
TACTS_Inference.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000184b0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00045498  08018680  08018680  00028680  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0805db18  0805db18  00071630  2**0
                  CONTENTS
  4 .ARM          00000008  0805db18  0805db18  0006db18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0805db20  0805db20  00071630  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0805db20  0805db20  0006db20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0805db24  0805db24  0006db24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001630  20000000  0805db28  00070000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b034  20001640  0805f158  00071640  2**5
                  ALLOC
 10 ._user_heap_stack 00001004  2000c674  0805f158  0007c674  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00071630  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026ee3  00000000  00000000  00071660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000048e5  00000000  00000000  00098543  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001948  00000000  00000000  0009ce28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001750  00000000  00000000  0009e770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c9a7  00000000  00000000  0009fec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023b77  00000000  00000000  000cc867  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001065b6  00000000  00000000  000f03de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001f6994  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008508  00000000  00000000  001f69e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  001feeec  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  001fefb8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20001640 	.word	0x20001640
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08018668 	.word	0x08018668

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20001644 	.word	0x20001644
 800020c:	08018668 	.word	0x08018668

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b9aa 	b.w	8001054 <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f83c 	bl	8000d84 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_d2lz>:
 8000d18:	b538      	push	{r3, r4, r5, lr}
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	4604      	mov	r4, r0
 8000d20:	460d      	mov	r5, r1
 8000d22:	f7ff ff0b 	bl	8000b3c <__aeabi_dcmplt>
 8000d26:	b928      	cbnz	r0, 8000d34 <__aeabi_d2lz+0x1c>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	4629      	mov	r1, r5
 8000d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d30:	f000 b80a 	b.w	8000d48 <__aeabi_d2ulz>
 8000d34:	4620      	mov	r0, r4
 8000d36:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d3a:	f000 f805 	bl	8000d48 <__aeabi_d2ulz>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	bd38      	pop	{r3, r4, r5, pc}
 8000d46:	bf00      	nop

08000d48 <__aeabi_d2ulz>:
 8000d48:	b5d0      	push	{r4, r6, r7, lr}
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <__aeabi_d2ulz+0x34>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4606      	mov	r6, r0
 8000d50:	460f      	mov	r7, r1
 8000d52:	f7ff fc81 	bl	8000658 <__aeabi_dmul>
 8000d56:	f7ff ff57 	bl	8000c08 <__aeabi_d2uiz>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	f7ff fc02 	bl	8000564 <__aeabi_ui2d>
 8000d60:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <__aeabi_d2ulz+0x38>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f7ff fc78 	bl	8000658 <__aeabi_dmul>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	4639      	mov	r1, r7
 8000d70:	f7ff faba 	bl	80002e8 <__aeabi_dsub>
 8000d74:	f7ff ff48 	bl	8000c08 <__aeabi_d2uiz>
 8000d78:	4621      	mov	r1, r4
 8000d7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d7c:	3df00000 	.word	0x3df00000
 8000d80:	41f00000 	.word	0x41f00000

08000d84 <__udivmoddi4>:
 8000d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d88:	9d08      	ldr	r5, [sp, #32]
 8000d8a:	4604      	mov	r4, r0
 8000d8c:	468e      	mov	lr, r1
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d14d      	bne.n	8000e2e <__udivmoddi4+0xaa>
 8000d92:	428a      	cmp	r2, r1
 8000d94:	4694      	mov	ip, r2
 8000d96:	d969      	bls.n	8000e6c <__udivmoddi4+0xe8>
 8000d98:	fab2 f282 	clz	r2, r2
 8000d9c:	b152      	cbz	r2, 8000db4 <__udivmoddi4+0x30>
 8000d9e:	fa01 f302 	lsl.w	r3, r1, r2
 8000da2:	f1c2 0120 	rsb	r1, r2, #32
 8000da6:	fa20 f101 	lsr.w	r1, r0, r1
 8000daa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dae:	ea41 0e03 	orr.w	lr, r1, r3
 8000db2:	4094      	lsls	r4, r2
 8000db4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db8:	0c21      	lsrs	r1, r4, #16
 8000dba:	fbbe f6f8 	udiv	r6, lr, r8
 8000dbe:	fa1f f78c 	uxth.w	r7, ip
 8000dc2:	fb08 e316 	mls	r3, r8, r6, lr
 8000dc6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dca:	fb06 f107 	mul.w	r1, r6, r7
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	d90a      	bls.n	8000de8 <__udivmoddi4+0x64>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dda:	f080 811f 	bcs.w	800101c <__udivmoddi4+0x298>
 8000dde:	4299      	cmp	r1, r3
 8000de0:	f240 811c 	bls.w	800101c <__udivmoddi4+0x298>
 8000de4:	3e02      	subs	r6, #2
 8000de6:	4463      	add	r3, ip
 8000de8:	1a5b      	subs	r3, r3, r1
 8000dea:	b2a4      	uxth	r4, r4
 8000dec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000df0:	fb08 3310 	mls	r3, r8, r0, r3
 8000df4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000df8:	fb00 f707 	mul.w	r7, r0, r7
 8000dfc:	42a7      	cmp	r7, r4
 8000dfe:	d90a      	bls.n	8000e16 <__udivmoddi4+0x92>
 8000e00:	eb1c 0404 	adds.w	r4, ip, r4
 8000e04:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e08:	f080 810a 	bcs.w	8001020 <__udivmoddi4+0x29c>
 8000e0c:	42a7      	cmp	r7, r4
 8000e0e:	f240 8107 	bls.w	8001020 <__udivmoddi4+0x29c>
 8000e12:	4464      	add	r4, ip
 8000e14:	3802      	subs	r0, #2
 8000e16:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e1a:	1be4      	subs	r4, r4, r7
 8000e1c:	2600      	movs	r6, #0
 8000e1e:	b11d      	cbz	r5, 8000e28 <__udivmoddi4+0xa4>
 8000e20:	40d4      	lsrs	r4, r2
 8000e22:	2300      	movs	r3, #0
 8000e24:	e9c5 4300 	strd	r4, r3, [r5]
 8000e28:	4631      	mov	r1, r6
 8000e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d909      	bls.n	8000e46 <__udivmoddi4+0xc2>
 8000e32:	2d00      	cmp	r5, #0
 8000e34:	f000 80ef 	beq.w	8001016 <__udivmoddi4+0x292>
 8000e38:	2600      	movs	r6, #0
 8000e3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e3e:	4630      	mov	r0, r6
 8000e40:	4631      	mov	r1, r6
 8000e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e46:	fab3 f683 	clz	r6, r3
 8000e4a:	2e00      	cmp	r6, #0
 8000e4c:	d14a      	bne.n	8000ee4 <__udivmoddi4+0x160>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d302      	bcc.n	8000e58 <__udivmoddi4+0xd4>
 8000e52:	4282      	cmp	r2, r0
 8000e54:	f200 80f9 	bhi.w	800104a <__udivmoddi4+0x2c6>
 8000e58:	1a84      	subs	r4, r0, r2
 8000e5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e5e:	2001      	movs	r0, #1
 8000e60:	469e      	mov	lr, r3
 8000e62:	2d00      	cmp	r5, #0
 8000e64:	d0e0      	beq.n	8000e28 <__udivmoddi4+0xa4>
 8000e66:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e6a:	e7dd      	b.n	8000e28 <__udivmoddi4+0xa4>
 8000e6c:	b902      	cbnz	r2, 8000e70 <__udivmoddi4+0xec>
 8000e6e:	deff      	udf	#255	; 0xff
 8000e70:	fab2 f282 	clz	r2, r2
 8000e74:	2a00      	cmp	r2, #0
 8000e76:	f040 8092 	bne.w	8000f9e <__udivmoddi4+0x21a>
 8000e7a:	eba1 010c 	sub.w	r1, r1, ip
 8000e7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e82:	fa1f fe8c 	uxth.w	lr, ip
 8000e86:	2601      	movs	r6, #1
 8000e88:	0c20      	lsrs	r0, r4, #16
 8000e8a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e8e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e92:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e96:	fb0e f003 	mul.w	r0, lr, r3
 8000e9a:	4288      	cmp	r0, r1
 8000e9c:	d908      	bls.n	8000eb0 <__udivmoddi4+0x12c>
 8000e9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ea6:	d202      	bcs.n	8000eae <__udivmoddi4+0x12a>
 8000ea8:	4288      	cmp	r0, r1
 8000eaa:	f200 80cb 	bhi.w	8001044 <__udivmoddi4+0x2c0>
 8000eae:	4643      	mov	r3, r8
 8000eb0:	1a09      	subs	r1, r1, r0
 8000eb2:	b2a4      	uxth	r4, r4
 8000eb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb8:	fb07 1110 	mls	r1, r7, r0, r1
 8000ebc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ec0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ec4:	45a6      	cmp	lr, r4
 8000ec6:	d908      	bls.n	8000eda <__udivmoddi4+0x156>
 8000ec8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ecc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ed0:	d202      	bcs.n	8000ed8 <__udivmoddi4+0x154>
 8000ed2:	45a6      	cmp	lr, r4
 8000ed4:	f200 80bb 	bhi.w	800104e <__udivmoddi4+0x2ca>
 8000ed8:	4608      	mov	r0, r1
 8000eda:	eba4 040e 	sub.w	r4, r4, lr
 8000ede:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ee2:	e79c      	b.n	8000e1e <__udivmoddi4+0x9a>
 8000ee4:	f1c6 0720 	rsb	r7, r6, #32
 8000ee8:	40b3      	lsls	r3, r6
 8000eea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ef2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ef6:	fa01 f306 	lsl.w	r3, r1, r6
 8000efa:	431c      	orrs	r4, r3
 8000efc:	40f9      	lsrs	r1, r7
 8000efe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f02:	fa00 f306 	lsl.w	r3, r0, r6
 8000f06:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f0a:	0c20      	lsrs	r0, r4, #16
 8000f0c:	fa1f fe8c 	uxth.w	lr, ip
 8000f10:	fb09 1118 	mls	r1, r9, r8, r1
 8000f14:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f18:	fb08 f00e 	mul.w	r0, r8, lr
 8000f1c:	4288      	cmp	r0, r1
 8000f1e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f22:	d90b      	bls.n	8000f3c <__udivmoddi4+0x1b8>
 8000f24:	eb1c 0101 	adds.w	r1, ip, r1
 8000f28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f2c:	f080 8088 	bcs.w	8001040 <__udivmoddi4+0x2bc>
 8000f30:	4288      	cmp	r0, r1
 8000f32:	f240 8085 	bls.w	8001040 <__udivmoddi4+0x2bc>
 8000f36:	f1a8 0802 	sub.w	r8, r8, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	1a09      	subs	r1, r1, r0
 8000f3e:	b2a4      	uxth	r4, r4
 8000f40:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f44:	fb09 1110 	mls	r1, r9, r0, r1
 8000f48:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f50:	458e      	cmp	lr, r1
 8000f52:	d908      	bls.n	8000f66 <__udivmoddi4+0x1e2>
 8000f54:	eb1c 0101 	adds.w	r1, ip, r1
 8000f58:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f5c:	d26c      	bcs.n	8001038 <__udivmoddi4+0x2b4>
 8000f5e:	458e      	cmp	lr, r1
 8000f60:	d96a      	bls.n	8001038 <__udivmoddi4+0x2b4>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4461      	add	r1, ip
 8000f66:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f6a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f6e:	eba1 010e 	sub.w	r1, r1, lr
 8000f72:	42a1      	cmp	r1, r4
 8000f74:	46c8      	mov	r8, r9
 8000f76:	46a6      	mov	lr, r4
 8000f78:	d356      	bcc.n	8001028 <__udivmoddi4+0x2a4>
 8000f7a:	d053      	beq.n	8001024 <__udivmoddi4+0x2a0>
 8000f7c:	b15d      	cbz	r5, 8000f96 <__udivmoddi4+0x212>
 8000f7e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f82:	eb61 010e 	sbc.w	r1, r1, lr
 8000f86:	fa01 f707 	lsl.w	r7, r1, r7
 8000f8a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f8e:	40f1      	lsrs	r1, r6
 8000f90:	431f      	orrs	r7, r3
 8000f92:	e9c5 7100 	strd	r7, r1, [r5]
 8000f96:	2600      	movs	r6, #0
 8000f98:	4631      	mov	r1, r6
 8000f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f9e:	f1c2 0320 	rsb	r3, r2, #32
 8000fa2:	40d8      	lsrs	r0, r3
 8000fa4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fa8:	fa21 f303 	lsr.w	r3, r1, r3
 8000fac:	4091      	lsls	r1, r2
 8000fae:	4301      	orrs	r1, r0
 8000fb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fb4:	fa1f fe8c 	uxth.w	lr, ip
 8000fb8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fbc:	fb07 3610 	mls	r6, r7, r0, r3
 8000fc0:	0c0b      	lsrs	r3, r1, #16
 8000fc2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fc6:	fb00 f60e 	mul.w	r6, r0, lr
 8000fca:	429e      	cmp	r6, r3
 8000fcc:	fa04 f402 	lsl.w	r4, r4, r2
 8000fd0:	d908      	bls.n	8000fe4 <__udivmoddi4+0x260>
 8000fd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fd6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fda:	d22f      	bcs.n	800103c <__udivmoddi4+0x2b8>
 8000fdc:	429e      	cmp	r6, r3
 8000fde:	d92d      	bls.n	800103c <__udivmoddi4+0x2b8>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	4463      	add	r3, ip
 8000fe4:	1b9b      	subs	r3, r3, r6
 8000fe6:	b289      	uxth	r1, r1
 8000fe8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fec:	fb07 3316 	mls	r3, r7, r6, r3
 8000ff0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ff4:	fb06 f30e 	mul.w	r3, r6, lr
 8000ff8:	428b      	cmp	r3, r1
 8000ffa:	d908      	bls.n	800100e <__udivmoddi4+0x28a>
 8000ffc:	eb1c 0101 	adds.w	r1, ip, r1
 8001000:	f106 38ff 	add.w	r8, r6, #4294967295
 8001004:	d216      	bcs.n	8001034 <__udivmoddi4+0x2b0>
 8001006:	428b      	cmp	r3, r1
 8001008:	d914      	bls.n	8001034 <__udivmoddi4+0x2b0>
 800100a:	3e02      	subs	r6, #2
 800100c:	4461      	add	r1, ip
 800100e:	1ac9      	subs	r1, r1, r3
 8001010:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001014:	e738      	b.n	8000e88 <__udivmoddi4+0x104>
 8001016:	462e      	mov	r6, r5
 8001018:	4628      	mov	r0, r5
 800101a:	e705      	b.n	8000e28 <__udivmoddi4+0xa4>
 800101c:	4606      	mov	r6, r0
 800101e:	e6e3      	b.n	8000de8 <__udivmoddi4+0x64>
 8001020:	4618      	mov	r0, r3
 8001022:	e6f8      	b.n	8000e16 <__udivmoddi4+0x92>
 8001024:	454b      	cmp	r3, r9
 8001026:	d2a9      	bcs.n	8000f7c <__udivmoddi4+0x1f8>
 8001028:	ebb9 0802 	subs.w	r8, r9, r2
 800102c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001030:	3801      	subs	r0, #1
 8001032:	e7a3      	b.n	8000f7c <__udivmoddi4+0x1f8>
 8001034:	4646      	mov	r6, r8
 8001036:	e7ea      	b.n	800100e <__udivmoddi4+0x28a>
 8001038:	4620      	mov	r0, r4
 800103a:	e794      	b.n	8000f66 <__udivmoddi4+0x1e2>
 800103c:	4640      	mov	r0, r8
 800103e:	e7d1      	b.n	8000fe4 <__udivmoddi4+0x260>
 8001040:	46d0      	mov	r8, sl
 8001042:	e77b      	b.n	8000f3c <__udivmoddi4+0x1b8>
 8001044:	3b02      	subs	r3, #2
 8001046:	4461      	add	r1, ip
 8001048:	e732      	b.n	8000eb0 <__udivmoddi4+0x12c>
 800104a:	4630      	mov	r0, r6
 800104c:	e709      	b.n	8000e62 <__udivmoddi4+0xde>
 800104e:	4464      	add	r4, ip
 8001050:	3802      	subs	r0, #2
 8001052:	e742      	b.n	8000eda <__udivmoddi4+0x156>

08001054 <__aeabi_idiv0>:
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop

08001058 <aiInit>:
#endif

ai_buffer *ai_input;
ai_buffer *ai_output;

int aiInit(void) {
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
    ai_error err;
    const ai_handle acts[] = { activations };
 800105e:	4b17      	ldr	r3, [pc, #92]	; (80010bc <aiInit+0x64>)
 8001060:	603b      	str	r3, [r7, #0]
	#if  NUM_SENSOR == 24
    err = ai_twoline_create_and_init(&allLine, acts, NULL);
	#elif  NUM_SENSOR == 36
    err = ai_threeline_create_and_init(&allLine, acts, NULL);
	#elif  NUM_SENSOR == 48
    err = ai_fourline_create_and_init(&allLine, acts, NULL);
 8001062:	463b      	mov	r3, r7
 8001064:	2200      	movs	r2, #0
 8001066:	4619      	mov	r1, r3
 8001068:	4815      	ldr	r0, [pc, #84]	; (80010c0 <aiInit+0x68>)
 800106a:	f00e f865 	bl	800f138 <ai_fourline_create_and_init>
 800106e:	4603      	mov	r3, r0
 8001070:	607b      	str	r3, [r7, #4]
	#endif
    if (err.type != AI_ERROR_NONE) {
 8001072:	793b      	ldrb	r3, [r7, #4]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d00a      	beq.n	800108e <aiInit+0x36>
        HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "aiInit Error \n"), 100);
 8001078:	4912      	ldr	r1, [pc, #72]	; (80010c4 <aiInit+0x6c>)
 800107a:	4813      	ldr	r0, [pc, #76]	; (80010c8 <aiInit+0x70>)
 800107c:	f012 f9e6 	bl	801344c <siprintf>
 8001080:	4603      	mov	r3, r0
 8001082:	b29a      	uxth	r2, r3
 8001084:	2364      	movs	r3, #100	; 0x64
 8001086:	4910      	ldr	r1, [pc, #64]	; (80010c8 <aiInit+0x70>)
 8001088:	4810      	ldr	r0, [pc, #64]	; (80010cc <aiInit+0x74>)
 800108a:	f007 fcad 	bl	80089e8 <HAL_UART_Transmit>
    ai_output = ai_twoline_outputs_get(allLine, NULL);
#elif NUM_SENSOR == 36
    ai_input = ai_threeline_inputs_get(allLine, NULL);
    ai_output= ai_threeline_outputs_get(allLine, NULL);
#elif NUM_SENSOR == 48
    ai_input = ai_fourline_inputs_get(allLine, NULL);
 800108e:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <aiInit+0x68>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	2100      	movs	r1, #0
 8001094:	4618      	mov	r0, r3
 8001096:	f00e f8c3 	bl	800f220 <ai_fourline_inputs_get>
 800109a:	4603      	mov	r3, r0
 800109c:	4a0c      	ldr	r2, [pc, #48]	; (80010d0 <aiInit+0x78>)
 800109e:	6013      	str	r3, [r2, #0]
    ai_output = ai_fourline_outputs_get(allLine, NULL);
 80010a0:	4b07      	ldr	r3, [pc, #28]	; (80010c0 <aiInit+0x68>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2100      	movs	r1, #0
 80010a6:	4618      	mov	r0, r3
 80010a8:	f00e f8d4 	bl	800f254 <ai_fourline_outputs_get>
 80010ac:	4603      	mov	r3, r0
 80010ae:	4a09      	ldr	r2, [pc, #36]	; (80010d4 <aiInit+0x7c>)
 80010b0:	6013      	str	r3, [r2, #0]
#else
    HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "Invalid NUM_SENSOR \n"), 100);
    return -1;
#endif
    return 0;
 80010b2:	2300      	movs	r3, #0
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20001660 	.word	0x20001660
 80010c0:	2000165c 	.word	0x2000165c
 80010c4:	08018680 	.word	0x08018680
 80010c8:	2000786c 	.word	0x2000786c
 80010cc:	200077e4 	.word	0x200077e4
 80010d0:	20002550 	.word	0x20002550
 80010d4:	20002554 	.word	0x20002554

080010d8 <aiRun>:


int aiRun(const ai_float *in_data, ai_float *out_data) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]
    ai_i32 n_batch;

    // 1 - Update IO handlers with the data payload
    ai_input[0].data = AI_HANDLE_PTR(in_data);
 80010e2:	4b14      	ldr	r3, [pc, #80]	; (8001134 <aiRun+0x5c>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	687a      	ldr	r2, [r7, #4]
 80010e8:	605a      	str	r2, [r3, #4]
    ai_output[0].data = AI_HANDLE_PTR(out_data);
 80010ea:	4b13      	ldr	r3, [pc, #76]	; (8001138 <aiRun+0x60>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	683a      	ldr	r2, [r7, #0]
 80010f0:	605a      	str	r2, [r3, #4]
#if NUM_SENSOR == 24
    n_batch = ai_twoline_run(allLine, &ai_input[0], &ai_output[0]);
#elif NUM_SENSOR == 36
    n_batch = ai_threeline_run(allLine, &ai_input[0], &ai_output[0]);
#elif NUM_SENSOR == 48
    n_batch = ai_fourline_run(allLine, &ai_input[0], &ai_output[0]);
 80010f2:	4b12      	ldr	r3, [pc, #72]	; (800113c <aiRun+0x64>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a0f      	ldr	r2, [pc, #60]	; (8001134 <aiRun+0x5c>)
 80010f8:	6811      	ldr	r1, [r2, #0]
 80010fa:	4a0f      	ldr	r2, [pc, #60]	; (8001138 <aiRun+0x60>)
 80010fc:	6812      	ldr	r2, [r2, #0]
 80010fe:	4618      	mov	r0, r3
 8001100:	f00e f8fe 	bl	800f300 <ai_fourline_run>
 8001104:	60f8      	str	r0, [r7, #12]
#else
    HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "Invalid NUM_SENSOR \n"), 100);
    return -1;
#endif
    if (n_batch != 1) {
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	2b01      	cmp	r3, #1
 800110a:	d00d      	beq.n	8001128 <aiRun+0x50>
        HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "aiRun Error \n"), 100);
 800110c:	490c      	ldr	r1, [pc, #48]	; (8001140 <aiRun+0x68>)
 800110e:	480d      	ldr	r0, [pc, #52]	; (8001144 <aiRun+0x6c>)
 8001110:	f012 f99c 	bl	801344c <siprintf>
 8001114:	4603      	mov	r3, r0
 8001116:	b29a      	uxth	r2, r3
 8001118:	2364      	movs	r3, #100	; 0x64
 800111a:	490a      	ldr	r1, [pc, #40]	; (8001144 <aiRun+0x6c>)
 800111c:	480a      	ldr	r0, [pc, #40]	; (8001148 <aiRun+0x70>)
 800111e:	f007 fc63 	bl	80089e8 <HAL_UART_Transmit>
        return -1;
 8001122:	f04f 33ff 	mov.w	r3, #4294967295
 8001126:	e000      	b.n	800112a <aiRun+0x52>
    };
    return 0;
 8001128:	2300      	movs	r3, #0
}
 800112a:	4618      	mov	r0, r3
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20002550 	.word	0x20002550
 8001138:	20002554 	.word	0x20002554
 800113c:	2000165c 	.word	0x2000165c
 8001140:	08018690 	.word	0x08018690
 8001144:	2000786c 	.word	0x2000786c
 8001148:	200077e4 	.word	0x200077e4
 800114c:	00000000 	.word	0x00000000

08001150 <CalculateStats>:
float sensorValues[NUM_SENSOR][NUM_READINGS-throwSomenumber] = {0};
float sensorAverages[NUM_SENSOR] = {0};
float sensorStdDevs[NUM_SENSOR] = {0};
int readingCount[NUM_SENSOR] = {0};

void CalculateStats(int sensorIndex) {
 8001150:	b5b0      	push	{r4, r5, r7, lr}
 8001152:	b088      	sub	sp, #32
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
    float sum = 0;
 8001158:	f04f 0300 	mov.w	r3, #0
 800115c:	61fb      	str	r3, [r7, #28]
    float mean = 0;
 800115e:	f04f 0300 	mov.w	r3, #0
 8001162:	60fb      	str	r3, [r7, #12]
    float stdDevSum = 0;
 8001164:	f04f 0300 	mov.w	r3, #0
 8001168:	61bb      	str	r3, [r7, #24]
    int count = readingCount[sensorIndex];
 800116a:	4a49      	ldr	r2, [pc, #292]	; (8001290 <CalculateStats+0x140>)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001172:	60bb      	str	r3, [r7, #8]

    // 평균 계산
    for (int i = 0; i < count; i++) { sum += sensorValues[sensorIndex][i];}
 8001174:	2300      	movs	r3, #0
 8001176:	617b      	str	r3, [r7, #20]
 8001178:	e013      	b.n	80011a2 <CalculateStats+0x52>
 800117a:	4946      	ldr	r1, [pc, #280]	; (8001294 <CalculateStats+0x144>)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2264      	movs	r2, #100	; 0x64
 8001180:	fb03 f202 	mul.w	r2, r3, r2
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	4413      	add	r3, r2
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	440b      	add	r3, r1
 800118c:	edd3 7a00 	vldr	s15, [r3]
 8001190:	ed97 7a07 	vldr	s14, [r7, #28]
 8001194:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001198:	edc7 7a07 	vstr	s15, [r7, #28]
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	3301      	adds	r3, #1
 80011a0:	617b      	str	r3, [r7, #20]
 80011a2:	697a      	ldr	r2, [r7, #20]
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	429a      	cmp	r2, r3
 80011a8:	dbe7      	blt.n	800117a <CalculateStats+0x2a>
    mean = sum / count;
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	ee07 3a90 	vmov	s15, r3
 80011b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80011b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011bc:	edc7 7a03 	vstr	s15, [r7, #12]
    sensorAverages[sensorIndex] = mean;
 80011c0:	4a35      	ldr	r2, [pc, #212]	; (8001298 <CalculateStats+0x148>)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	4413      	add	r3, r2
 80011c8:	68fa      	ldr	r2, [r7, #12]
 80011ca:	601a      	str	r2, [r3, #0]
    // 표준편차 계산
    for (int i = 0; i < count; i++) { stdDevSum += pow(sensorValues[sensorIndex][i] - mean, 2);}
 80011cc:	2300      	movs	r3, #0
 80011ce:	613b      	str	r3, [r7, #16]
 80011d0:	e030      	b.n	8001234 <CalculateStats+0xe4>
 80011d2:	4930      	ldr	r1, [pc, #192]	; (8001294 <CalculateStats+0x144>)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2264      	movs	r2, #100	; 0x64
 80011d8:	fb03 f202 	mul.w	r2, r3, r2
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	4413      	add	r3, r2
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	440b      	add	r3, r1
 80011e4:	ed93 7a00 	vldr	s14, [r3]
 80011e8:	edd7 7a03 	vldr	s15, [r7, #12]
 80011ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011f0:	ee17 0a90 	vmov	r0, s15
 80011f4:	f7ff f9d8 	bl	80005a8 <__aeabi_f2d>
 80011f8:	4602      	mov	r2, r0
 80011fa:	460b      	mov	r3, r1
 80011fc:	ed9f 1b22 	vldr	d1, [pc, #136]	; 8001288 <CalculateStats+0x138>
 8001200:	ec43 2b10 	vmov	d0, r2, r3
 8001204:	f016 faa8 	bl	8017758 <pow>
 8001208:	ec55 4b10 	vmov	r4, r5, d0
 800120c:	69b8      	ldr	r0, [r7, #24]
 800120e:	f7ff f9cb 	bl	80005a8 <__aeabi_f2d>
 8001212:	4602      	mov	r2, r0
 8001214:	460b      	mov	r3, r1
 8001216:	4620      	mov	r0, r4
 8001218:	4629      	mov	r1, r5
 800121a:	f7ff f867 	bl	80002ec <__adddf3>
 800121e:	4602      	mov	r2, r0
 8001220:	460b      	mov	r3, r1
 8001222:	4610      	mov	r0, r2
 8001224:	4619      	mov	r1, r3
 8001226:	f7ff fd0f 	bl	8000c48 <__aeabi_d2f>
 800122a:	4603      	mov	r3, r0
 800122c:	61bb      	str	r3, [r7, #24]
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	3301      	adds	r3, #1
 8001232:	613b      	str	r3, [r7, #16]
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	429a      	cmp	r2, r3
 800123a:	dbca      	blt.n	80011d2 <CalculateStats+0x82>
    sensorStdDevs[sensorIndex] = sqrt(stdDevSum / count);
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	ee07 3a90 	vmov	s15, r3
 8001242:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001246:	ed97 7a06 	vldr	s14, [r7, #24]
 800124a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800124e:	ee16 0a90 	vmov	r0, s13
 8001252:	f7ff f9a9 	bl	80005a8 <__aeabi_f2d>
 8001256:	4602      	mov	r2, r0
 8001258:	460b      	mov	r3, r1
 800125a:	ec43 2b10 	vmov	d0, r2, r3
 800125e:	f016 faeb 	bl	8017838 <sqrt>
 8001262:	ec53 2b10 	vmov	r2, r3, d0
 8001266:	4610      	mov	r0, r2
 8001268:	4619      	mov	r1, r3
 800126a:	f7ff fced 	bl	8000c48 <__aeabi_d2f>
 800126e:	4602      	mov	r2, r0
 8001270:	490a      	ldr	r1, [pc, #40]	; (800129c <CalculateStats+0x14c>)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	440b      	add	r3, r1
 8001278:	601a      	str	r2, [r3, #0]
}
 800127a:	bf00      	nop
 800127c:	3720      	adds	r7, #32
 800127e:	46bd      	mov	sp, r7
 8001280:	bdb0      	pop	{r4, r5, r7, pc}
 8001282:	bf00      	nop
 8001284:	f3af 8000 	nop.w
 8001288:	00000000 	.word	0x00000000
 800128c:	40000000 	.word	0x40000000
 8001290:	200071d8 	.word	0x200071d8
 8001294:	20002558 	.word	0x20002558
 8001298:	20007058 	.word	0x20007058
 800129c:	20007118 	.word	0x20007118

080012a0 <TransmitStats>:

// 평균과 표준편차를 UART로 전송하는 함수
void TransmitStats() {
 80012a0:	b5b0      	push	{r4, r5, r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af04      	add	r7, sp, #16
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "Sensor Avg Std\r\n"), 100);
 80012a6:	4920      	ldr	r1, [pc, #128]	; (8001328 <TransmitStats+0x88>)
 80012a8:	4820      	ldr	r0, [pc, #128]	; (800132c <TransmitStats+0x8c>)
 80012aa:	f012 f8cf 	bl	801344c <siprintf>
 80012ae:	4603      	mov	r3, r0
 80012b0:	b29a      	uxth	r2, r3
 80012b2:	2364      	movs	r3, #100	; 0x64
 80012b4:	491d      	ldr	r1, [pc, #116]	; (800132c <TransmitStats+0x8c>)
 80012b6:	481e      	ldr	r0, [pc, #120]	; (8001330 <TransmitStats+0x90>)
 80012b8:	f007 fb96 	bl	80089e8 <HAL_UART_Transmit>
    for (int i = 0; i < NUM_SENSOR; i++) {
 80012bc:	2300      	movs	r3, #0
 80012be:	607b      	str	r3, [r7, #4]
 80012c0:	e029      	b.n	8001316 <TransmitStats+0x76>
        CalculateStats(i); // 통계 계산
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f7ff ff44 	bl	8001150 <CalculateStats>
    	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "%d %.2f %.2f\r\n", i, sensorAverages[i], sensorStdDevs[i]), 100);
 80012c8:	4a1a      	ldr	r2, [pc, #104]	; (8001334 <TransmitStats+0x94>)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	4413      	add	r3, r2
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff f968 	bl	80005a8 <__aeabi_f2d>
 80012d8:	4604      	mov	r4, r0
 80012da:	460d      	mov	r5, r1
 80012dc:	4a16      	ldr	r2, [pc, #88]	; (8001338 <TransmitStats+0x98>)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	4413      	add	r3, r2
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff f95e 	bl	80005a8 <__aeabi_f2d>
 80012ec:	4602      	mov	r2, r0
 80012ee:	460b      	mov	r3, r1
 80012f0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80012f4:	e9cd 4500 	strd	r4, r5, [sp]
 80012f8:	687a      	ldr	r2, [r7, #4]
 80012fa:	4910      	ldr	r1, [pc, #64]	; (800133c <TransmitStats+0x9c>)
 80012fc:	480b      	ldr	r0, [pc, #44]	; (800132c <TransmitStats+0x8c>)
 80012fe:	f012 f8a5 	bl	801344c <siprintf>
 8001302:	4603      	mov	r3, r0
 8001304:	b29a      	uxth	r2, r3
 8001306:	2364      	movs	r3, #100	; 0x64
 8001308:	4908      	ldr	r1, [pc, #32]	; (800132c <TransmitStats+0x8c>)
 800130a:	4809      	ldr	r0, [pc, #36]	; (8001330 <TransmitStats+0x90>)
 800130c:	f007 fb6c 	bl	80089e8 <HAL_UART_Transmit>
    for (int i = 0; i < NUM_SENSOR; i++) {
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	3301      	adds	r3, #1
 8001314:	607b      	str	r3, [r7, #4]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2b2f      	cmp	r3, #47	; 0x2f
 800131a:	ddd2      	ble.n	80012c2 <TransmitStats+0x22>
    }
}
 800131c:	bf00      	nop
 800131e:	bf00      	nop
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bdb0      	pop	{r4, r5, r7, pc}
 8001326:	bf00      	nop
 8001328:	080186a0 	.word	0x080186a0
 800132c:	2000786c 	.word	0x2000786c
 8001330:	200077e4 	.word	0x200077e4
 8001334:	20007058 	.word	0x20007058
 8001338:	20007118 	.word	0x20007118
 800133c:	080186b4 	.word	0x080186b4

08001340 <ResetSensorData>:

void ResetSensorData() {
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
    // 모든 센서 값과 읽기 횟수를 0으로 설정
    for (int i = 0; i < NUM_SENSOR; i++) {
 8001346:	2300      	movs	r3, #0
 8001348:	607b      	str	r3, [r7, #4]
 800134a:	e014      	b.n	8001376 <ResetSensorData+0x36>
        memset(sensorValues[i], 0, sizeof(sensorValues[i]));
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001352:	fb02 f303 	mul.w	r3, r2, r3
 8001356:	4a0c      	ldr	r2, [pc, #48]	; (8001388 <ResetSensorData+0x48>)
 8001358:	4413      	add	r3, r2
 800135a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800135e:	2100      	movs	r1, #0
 8001360:	4618      	mov	r0, r3
 8001362:	f011 f8fb 	bl	801255c <memset>
        readingCount[i] = 0;
 8001366:	4a09      	ldr	r2, [pc, #36]	; (800138c <ResetSensorData+0x4c>)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2100      	movs	r1, #0
 800136c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < NUM_SENSOR; i++) {
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	3301      	adds	r3, #1
 8001374:	607b      	str	r3, [r7, #4]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2b2f      	cmp	r3, #47	; 0x2f
 800137a:	dde7      	ble.n	800134c <ResetSensorData+0xc>
    }
}
 800137c:	bf00      	nop
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20002558 	.word	0x20002558
 800138c:	200071d8 	.word	0x200071d8

08001390 <InitStats>:

void InitStats(){
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
	for(int i; i<NUM_SENSOR;i++){
 8001396:	e010      	b.n	80013ba <InitStats+0x2a>
		sensorAverages[i] = 0;
 8001398:	4a0d      	ldr	r2, [pc, #52]	; (80013d0 <InitStats+0x40>)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	4413      	add	r3, r2
 80013a0:	f04f 0200 	mov.w	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
		sensorStdDevs[i] = 0;
 80013a6:	4a0b      	ldr	r2, [pc, #44]	; (80013d4 <InitStats+0x44>)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	4413      	add	r3, r2
 80013ae:	f04f 0200 	mov.w	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
	for(int i; i<NUM_SENSOR;i++){
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	3301      	adds	r3, #1
 80013b8:	607b      	str	r3, [r7, #4]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2b2f      	cmp	r3, #47	; 0x2f
 80013be:	ddeb      	ble.n	8001398 <InitStats+0x8>
	}
}
 80013c0:	bf00      	nop
 80013c2:	bf00      	nop
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	20007058 	.word	0x20007058
 80013d4:	20007118 	.word	0x20007118

080013d8 <ProcessCommand>:

extern TIM_HandleTypeDef htim2;


void ProcessCommand(uint8_t *commandBuffer)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
    char *command = strtok((char*)commandBuffer, " "); // Command separation
 80013e0:	4953      	ldr	r1, [pc, #332]	; (8001530 <ProcessCommand+0x158>)
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f012 fef4 	bl	80141d0 <strtok>
 80013e8:	60f8      	str	r0, [r7, #12]
    char *argument = strtok(NULL, " "); // argument seperation
 80013ea:	4951      	ldr	r1, [pc, #324]	; (8001530 <ProcessCommand+0x158>)
 80013ec:	2000      	movs	r0, #0
 80013ee:	f012 feef 	bl	80141d0 <strtok>
 80013f2:	60b8      	str	r0, [r7, #8]

    if (strcmp((char*)command, "echo") == 0) {HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "echo\n"), 100);}
 80013f4:	494f      	ldr	r1, [pc, #316]	; (8001534 <ProcessCommand+0x15c>)
 80013f6:	68f8      	ldr	r0, [r7, #12]
 80013f8:	f7fe ff0a 	bl	8000210 <strcmp>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d10b      	bne.n	800141a <ProcessCommand+0x42>
 8001402:	494d      	ldr	r1, [pc, #308]	; (8001538 <ProcessCommand+0x160>)
 8001404:	484d      	ldr	r0, [pc, #308]	; (800153c <ProcessCommand+0x164>)
 8001406:	f012 f821 	bl	801344c <siprintf>
 800140a:	4603      	mov	r3, r0
 800140c:	b29a      	uxth	r2, r3
 800140e:	2364      	movs	r3, #100	; 0x64
 8001410:	494a      	ldr	r1, [pc, #296]	; (800153c <ProcessCommand+0x164>)
 8001412:	484b      	ldr	r0, [pc, #300]	; (8001540 <ProcessCommand+0x168>)
 8001414:	f007 fae8 	bl	80089e8 <HAL_UART_Transmit>
    else if (strcmp((char*)command, "pointr") == 0) {PointingRadial();} // (0,20) -> (0,140)
    else if (strcmp((char*)command, "ini") == 0) {InitializaionCalibrationCommand();}
    else if (strcmp((char*)command, "autoi2c") == 0) {AutoI2CCommand();}

    else {HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "Please insert correct command\n"), 100);}
}
 8001418:	e086      	b.n	8001528 <ProcessCommand+0x150>
    else if (strcmp((char*)command, "sensori2c") == 0) {SensorI2CCommand();} //sensori2c
 800141a:	494a      	ldr	r1, [pc, #296]	; (8001544 <ProcessCommand+0x16c>)
 800141c:	68f8      	ldr	r0, [r7, #12]
 800141e:	f7fe fef7 	bl	8000210 <strcmp>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d102      	bne.n	800142e <ProcessCommand+0x56>
 8001428:	f000 f8a6 	bl	8001578 <SensorI2CCommand>
}
 800142c:	e07c      	b.n	8001528 <ProcessCommand+0x150>
    else if (strcmp((char*)command, "seti2c") == 0) {SetI2CCommand();} //seti2c
 800142e:	4946      	ldr	r1, [pc, #280]	; (8001548 <ProcessCommand+0x170>)
 8001430:	68f8      	ldr	r0, [r7, #12]
 8001432:	f7fe feed 	bl	8000210 <strcmp>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d102      	bne.n	8001442 <ProcessCommand+0x6a>
 800143c:	f000 f94a 	bl	80016d4 <SetI2CCommand>
}
 8001440:	e072      	b.n	8001528 <ProcessCommand+0x150>
    else if (strcmp((char*)command, "rev") == 0) {RevCommand(argument);}
 8001442:	4942      	ldr	r1, [pc, #264]	; (800154c <ProcessCommand+0x174>)
 8001444:	68f8      	ldr	r0, [r7, #12]
 8001446:	f7fe fee3 	bl	8000210 <strcmp>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d103      	bne.n	8001458 <ProcessCommand+0x80>
 8001450:	68b8      	ldr	r0, [r7, #8]
 8001452:	f000 fa65 	bl	8001920 <RevCommand>
}
 8001456:	e067      	b.n	8001528 <ProcessCommand+0x150>
    else if (strcmp((char*)command, "lin") == 0) {LinCommand(argument);}
 8001458:	493d      	ldr	r1, [pc, #244]	; (8001550 <ProcessCommand+0x178>)
 800145a:	68f8      	ldr	r0, [r7, #12]
 800145c:	f7fe fed8 	bl	8000210 <strcmp>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d103      	bne.n	800146e <ProcessCommand+0x96>
 8001466:	68b8      	ldr	r0, [r7, #8]
 8001468:	f000 fabe 	bl	80019e8 <LinCommand>
}
 800146c:	e05c      	b.n	8001528 <ProcessCommand+0x150>
    else if (strcmp((char*)command, "servo") == 0) {ServoCommand(argument);}
 800146e:	4939      	ldr	r1, [pc, #228]	; (8001554 <ProcessCommand+0x17c>)
 8001470:	68f8      	ldr	r0, [r7, #12]
 8001472:	f7fe fecd 	bl	8000210 <strcmp>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d103      	bne.n	8001484 <ProcessCommand+0xac>
 800147c:	68b8      	ldr	r0, [r7, #8]
 800147e:	f000 fb19 	bl	8001ab4 <ServoCommand>
}
 8001482:	e051      	b.n	8001528 <ProcessCommand+0x150>
    else if (strcmp((char*)command, "servo2") == 0) {Servo2Command(argument);}
 8001484:	4934      	ldr	r1, [pc, #208]	; (8001558 <ProcessCommand+0x180>)
 8001486:	68f8      	ldr	r0, [r7, #12]
 8001488:	f7fe fec2 	bl	8000210 <strcmp>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d103      	bne.n	800149a <ProcessCommand+0xc2>
 8001492:	68b8      	ldr	r0, [r7, #8]
 8001494:	f000 fb72 	bl	8001b7c <Servo2Command>
}
 8001498:	e046      	b.n	8001528 <ProcessCommand+0x150>
    else if (strcmp((char*)command, "avg") == 0) {AvgStdCommand();}
 800149a:	4930      	ldr	r1, [pc, #192]	; (800155c <ProcessCommand+0x184>)
 800149c:	68f8      	ldr	r0, [r7, #12]
 800149e:	f7fe feb7 	bl	8000210 <strcmp>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d102      	bne.n	80014ae <ProcessCommand+0xd6>
 80014a8:	f000 fbc4 	bl	8001c34 <AvgStdCommand>
}
 80014ac:	e03c      	b.n	8001528 <ProcessCommand+0x150>
    else if (strcmp((char*)command, "inferheati2c") == 0) {InferenceHeatI2CCommand();} //infercnni2c
 80014ae:	492c      	ldr	r1, [pc, #176]	; (8001560 <ProcessCommand+0x188>)
 80014b0:	68f8      	ldr	r0, [r7, #12]
 80014b2:	f7fe fead 	bl	8000210 <strcmp>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d102      	bne.n	80014c2 <ProcessCommand+0xea>
 80014bc:	f000 fcb0 	bl	8001e20 <InferenceHeatI2CCommand>
}
 80014c0:	e032      	b.n	8001528 <ProcessCommand+0x150>
    else if (strcmp((char*)command, "pointv") == 0) {PointingVertical();} // (0,20) -> (0,140)
 80014c2:	4928      	ldr	r1, [pc, #160]	; (8001564 <ProcessCommand+0x18c>)
 80014c4:	68f8      	ldr	r0, [r7, #12]
 80014c6:	f7fe fea3 	bl	8000210 <strcmp>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d102      	bne.n	80014d6 <ProcessCommand+0xfe>
 80014d0:	f000 ffd2 	bl	8002478 <PointingVertical>
}
 80014d4:	e028      	b.n	8001528 <ProcessCommand+0x150>
    else if (strcmp((char*)command, "pointr") == 0) {PointingRadial();} // (0,20) -> (0,140)
 80014d6:	4924      	ldr	r1, [pc, #144]	; (8001568 <ProcessCommand+0x190>)
 80014d8:	68f8      	ldr	r0, [r7, #12]
 80014da:	f7fe fe99 	bl	8000210 <strcmp>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d102      	bne.n	80014ea <ProcessCommand+0x112>
 80014e4:	f001 fb0a 	bl	8002afc <PointingRadial>
}
 80014e8:	e01e      	b.n	8001528 <ProcessCommand+0x150>
    else if (strcmp((char*)command, "ini") == 0) {InitializaionCalibrationCommand();}
 80014ea:	4920      	ldr	r1, [pc, #128]	; (800156c <ProcessCommand+0x194>)
 80014ec:	68f8      	ldr	r0, [r7, #12]
 80014ee:	f7fe fe8f 	bl	8000210 <strcmp>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d102      	bne.n	80014fe <ProcessCommand+0x126>
 80014f8:	f001 fb28 	bl	8002b4c <InitializaionCalibrationCommand>
}
 80014fc:	e014      	b.n	8001528 <ProcessCommand+0x150>
    else if (strcmp((char*)command, "autoi2c") == 0) {AutoI2CCommand();}
 80014fe:	491c      	ldr	r1, [pc, #112]	; (8001570 <ProcessCommand+0x198>)
 8001500:	68f8      	ldr	r0, [r7, #12]
 8001502:	f7fe fe85 	bl	8000210 <strcmp>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d102      	bne.n	8001512 <ProcessCommand+0x13a>
 800150c:	f001 fd6e 	bl	8002fec <AutoI2CCommand>
}
 8001510:	e00a      	b.n	8001528 <ProcessCommand+0x150>
    else {HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "Please insert correct command\n"), 100);}
 8001512:	4918      	ldr	r1, [pc, #96]	; (8001574 <ProcessCommand+0x19c>)
 8001514:	4809      	ldr	r0, [pc, #36]	; (800153c <ProcessCommand+0x164>)
 8001516:	f011 ff99 	bl	801344c <siprintf>
 800151a:	4603      	mov	r3, r0
 800151c:	b29a      	uxth	r2, r3
 800151e:	2364      	movs	r3, #100	; 0x64
 8001520:	4906      	ldr	r1, [pc, #24]	; (800153c <ProcessCommand+0x164>)
 8001522:	4807      	ldr	r0, [pc, #28]	; (8001540 <ProcessCommand+0x168>)
 8001524:	f007 fa60 	bl	80089e8 <HAL_UART_Transmit>
}
 8001528:	bf00      	nop
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	080186c4 	.word	0x080186c4
 8001534:	080186c8 	.word	0x080186c8
 8001538:	080186d0 	.word	0x080186d0
 800153c:	2000786c 	.word	0x2000786c
 8001540:	200077e4 	.word	0x200077e4
 8001544:	080186d8 	.word	0x080186d8
 8001548:	080186e4 	.word	0x080186e4
 800154c:	080186ec 	.word	0x080186ec
 8001550:	080186f0 	.word	0x080186f0
 8001554:	080186f4 	.word	0x080186f4
 8001558:	080186fc 	.word	0x080186fc
 800155c:	08018704 	.word	0x08018704
 8001560:	08018708 	.word	0x08018708
 8001564:	08018718 	.word	0x08018718
 8001568:	08018720 	.word	0x08018720
 800156c:	08018728 	.word	0x08018728
 8001570:	0801872c 	.word	0x0801872c
 8001574:	08018734 	.word	0x08018734

08001578 <SensorI2CCommand>:


void SensorI2CCommand(){
 8001578:	b590      	push	{r4, r7, lr}
 800157a:	b087      	sub	sp, #28
 800157c:	af00      	add	r7, sp, #0
	ResetAllDevices();
 800157e:	f002 fea9 	bl	80042d4 <ResetAllDevices>
	setOnAllDevices();
 8001582:	f002 ff27 	bl	80043d4 <setOnAllDevices>
	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "sensor test\r\n"), 100);
 8001586:	4949      	ldr	r1, [pc, #292]	; (80016ac <SensorI2CCommand+0x134>)
 8001588:	4849      	ldr	r0, [pc, #292]	; (80016b0 <SensorI2CCommand+0x138>)
 800158a:	f011 ff5f 	bl	801344c <siprintf>
 800158e:	4603      	mov	r3, r0
 8001590:	b29a      	uxth	r2, r3
 8001592:	2364      	movs	r3, #100	; 0x64
 8001594:	4946      	ldr	r1, [pc, #280]	; (80016b0 <SensorI2CCommand+0x138>)
 8001596:	4847      	ldr	r0, [pc, #284]	; (80016b4 <SensorI2CCommand+0x13c>)
 8001598:	f007 fa26 	bl	80089e8 <HAL_UART_Transmit>
	uint32_t startTime = 0, endTime = 0, diffTime = 0;
 800159c:	2300      	movs	r3, #0
 800159e:	60bb      	str	r3, [r7, #8]
 80015a0:	2300      	movs	r3, #0
 80015a2:	607b      	str	r3, [r7, #4]
 80015a4:	2300      	movs	r3, #0
 80015a6:	603b      	str	r3, [r7, #0]

    for(int count =0; count < NUM_READINGS; count++){
 80015a8:	2300      	movs	r3, #0
 80015aa:	617b      	str	r3, [r7, #20]
 80015ac:	e072      	b.n	8001694 <SensorI2CCommand+0x11c>
    	uint8_t sensorCount = 0;
 80015ae:	2300      	movs	r3, #0
 80015b0:	74fb      	strb	r3, [r7, #19]
    	startTime = HAL_GetTick();
 80015b2:	f002 ffb5 	bl	8004520 <HAL_GetTick>
 80015b6:	60b8      	str	r0, [r7, #8]
		for (int i = 0; i < NUM_SENSOR; i++) {
 80015b8:	2300      	movs	r3, #0
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	e054      	b.n	8001668 <SensorI2CCommand+0xf0>
			Dev = &vl53l0x_s[i];
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80015c4:	fb02 f303 	mul.w	r3, r2, r3
 80015c8:	4a3b      	ldr	r2, [pc, #236]	; (80016b8 <SensorI2CCommand+0x140>)
 80015ca:	4413      	add	r3, r2
 80015cc:	4a3b      	ldr	r2, [pc, #236]	; (80016bc <SensorI2CCommand+0x144>)
 80015ce:	6013      	str	r3, [r2, #0]
			VL53L0X_PerformContinuousRangingMeasurement(Dev, &RangingData); // 1500us
 80015d0:	4b3a      	ldr	r3, [pc, #232]	; (80016bc <SensorI2CCommand+0x144>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	493a      	ldr	r1, [pc, #232]	; (80016c0 <SensorI2CCommand+0x148>)
 80015d6:	4618      	mov	r0, r3
 80015d8:	f009 ffea 	bl	800b5b0 <VL53L0X_PerformContinuousRangingMeasurement>
			if (RangingData.RangeStatus == 0) {
 80015dc:	4b38      	ldr	r3, [pc, #224]	; (80016c0 <SensorI2CCommand+0x148>)
 80015de:	7e1b      	ldrb	r3, [r3, #24]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d13e      	bne.n	8001662 <SensorI2CCommand+0xea>
			  if (RangingData.RangeMilliMeter < 100) {
 80015e4:	4b36      	ldr	r3, [pc, #216]	; (80016c0 <SensorI2CCommand+0x148>)
 80015e6:	891b      	ldrh	r3, [r3, #8]
 80015e8:	2b63      	cmp	r3, #99	; 0x63
 80015ea:	d83a      	bhi.n	8001662 <SensorI2CCommand+0xea>
				  filteredValue[i] = Kalman_Estimate(&filters[i], RangingData.RangeMilliMeter);
 80015ec:	68fa      	ldr	r2, [r7, #12]
 80015ee:	4613      	mov	r3, r2
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	4413      	add	r3, r2
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	4a33      	ldr	r2, [pc, #204]	; (80016c4 <SensorI2CCommand+0x14c>)
 80015f8:	4413      	add	r3, r2
 80015fa:	4a31      	ldr	r2, [pc, #196]	; (80016c0 <SensorI2CCommand+0x148>)
 80015fc:	8912      	ldrh	r2, [r2, #8]
 80015fe:	ee07 2a90 	vmov	s15, r2
 8001602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001606:	eeb0 0a67 	vmov.f32	s0, s15
 800160a:	4618      	mov	r0, r3
 800160c:	f001 ff64 	bl	80034d8 <Kalman_Estimate>
 8001610:	eef0 7a40 	vmov.f32	s15, s0
 8001614:	4a2c      	ldr	r2, [pc, #176]	; (80016c8 <SensorI2CCommand+0x150>)
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	4413      	add	r3, r2
 800161c:	edc3 7a00 	vstr	s15, [r3]
				  //filteredValue[i] = RangingData.RangeMilliMeter;
				  sensorValues[i][readingCount[i]] = filteredValue[i];
 8001620:	4a2a      	ldr	r2, [pc, #168]	; (80016cc <SensorI2CCommand+0x154>)
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001628:	4927      	ldr	r1, [pc, #156]	; (80016c8 <SensorI2CCommand+0x150>)
 800162a:	68fa      	ldr	r2, [r7, #12]
 800162c:	0092      	lsls	r2, r2, #2
 800162e:	440a      	add	r2, r1
 8001630:	6812      	ldr	r2, [r2, #0]
 8001632:	4827      	ldr	r0, [pc, #156]	; (80016d0 <SensorI2CCommand+0x158>)
 8001634:	68f9      	ldr	r1, [r7, #12]
 8001636:	2464      	movs	r4, #100	; 0x64
 8001638:	fb04 f101 	mul.w	r1, r4, r1
 800163c:	440b      	add	r3, r1
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	4403      	add	r3, r0
 8001642:	601a      	str	r2, [r3, #0]
				  if(count>throwSomenumber){
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	2b14      	cmp	r3, #20
 8001648:	dd08      	ble.n	800165c <SensorI2CCommand+0xe4>
				  readingCount[i]++;}
 800164a:	4a20      	ldr	r2, [pc, #128]	; (80016cc <SensorI2CCommand+0x154>)
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001652:	1c5a      	adds	r2, r3, #1
 8001654:	491d      	ldr	r1, [pc, #116]	; (80016cc <SensorI2CCommand+0x154>)
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				  sensorCount++;
 800165c:	7cfb      	ldrb	r3, [r7, #19]
 800165e:	3301      	adds	r3, #1
 8001660:	74fb      	strb	r3, [r7, #19]
		for (int i = 0; i < NUM_SENSOR; i++) {
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	3301      	adds	r3, #1
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2b2f      	cmp	r3, #47	; 0x2f
 800166c:	dda7      	ble.n	80015be <SensorI2CCommand+0x46>
				  // 1 : Sigma Fail | 2 : Signal Fail | 3 : Min Range Fail | 4 : Phase Fail | 5 : Hardware Fail | 255 : No update
			  }
		}

		do {
		    endTime = HAL_GetTick();
 800166e:	f002 ff57 	bl	8004520 <HAL_GetTick>
 8001672:	6078      	str	r0, [r7, #4]
		    diffTime = endTime - startTime;
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	603b      	str	r3, [r7, #0]
		} while (diffTime <= TIMBUDGET);
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	2b21      	cmp	r3, #33	; 0x21
 8001680:	d9f5      	bls.n	800166e <SensorI2CCommand+0xf6>
		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d ", NUM_READINGS), 100);
				HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d ", sensorCount), 100);

		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%lu\n", diffTime), 100);
		#endif
		startTime = 0;
 8001682:	2300      	movs	r3, #0
 8001684:	60bb      	str	r3, [r7, #8]
		endTime = 0;
 8001686:	2300      	movs	r3, #0
 8001688:	607b      	str	r3, [r7, #4]
		diffTime = 0;
 800168a:	2300      	movs	r3, #0
 800168c:	603b      	str	r3, [r7, #0]
    for(int count =0; count < NUM_READINGS; count++){
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	3301      	adds	r3, #1
 8001692:	617b      	str	r3, [r7, #20]
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	2b77      	cmp	r3, #119	; 0x77
 8001698:	dd89      	ble.n	80015ae <SensorI2CCommand+0x36>
    }
    TransmitStats();
 800169a:	f7ff fe01 	bl	80012a0 <TransmitStats>
    ResetSensorData();
 800169e:	f7ff fe4f 	bl	8001340 <ResetSensorData>
}
 80016a2:	bf00      	nop
 80016a4:	371c      	adds	r7, #28
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd90      	pop	{r4, r7, pc}
 80016aa:	bf00      	nop
 80016ac:	08018754 	.word	0x08018754
 80016b0:	2000786c 	.word	0x2000786c
 80016b4:	200077e4 	.word	0x200077e4
 80016b8:	20007a5c 	.word	0x20007a5c
 80016bc:	2000c55c 	.word	0x2000c55c
 80016c0:	200078f0 	.word	0x200078f0
 80016c4:	200072f0 	.word	0x200072f0
 80016c8:	200076b0 	.word	0x200076b0
 80016cc:	200071d8 	.word	0x200071d8
 80016d0:	20002558 	.word	0x20002558

080016d4 <SetI2CCommand>:

void SetI2CCommand(){
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "SetCommand\n\r"), 100);
 80016da:	4980      	ldr	r1, [pc, #512]	; (80018dc <SetI2CCommand+0x208>)
 80016dc:	4880      	ldr	r0, [pc, #512]	; (80018e0 <SetI2CCommand+0x20c>)
 80016de:	f011 feb5 	bl	801344c <siprintf>
 80016e2:	4603      	mov	r3, r0
 80016e4:	b29a      	uxth	r2, r3
 80016e6:	2364      	movs	r3, #100	; 0x64
 80016e8:	497d      	ldr	r1, [pc, #500]	; (80018e0 <SetI2CCommand+0x20c>)
 80016ea:	487e      	ldr	r0, [pc, #504]	; (80018e4 <SetI2CCommand+0x210>)
 80016ec:	f007 f97c 	bl	80089e8 <HAL_UART_Transmit>

	ResetAllDevices();
 80016f0:	f002 fdf0 	bl	80042d4 <ResetAllDevices>
	memset(vl53l0x_s, 0, sizeof(VL53L0X_Dev_t));
 80016f4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80016f8:	2100      	movs	r1, #0
 80016fa:	487b      	ldr	r0, [pc, #492]	; (80018e8 <SetI2CCommand+0x214>)
 80016fc:	f010 ff2e 	bl	801255c <memset>
  	for (int i = 0; i < NUM_SENSOR; i++) {
 8001700:	2300      	movs	r3, #0
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	e0e0      	b.n	80018c8 <SetI2CCommand+0x1f4>
  	    uint8_t q = i / 12;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	4a78      	ldr	r2, [pc, #480]	; (80018ec <SetI2CCommand+0x218>)
 800170a:	fb82 1203 	smull	r1, r2, r2, r3
 800170e:	1052      	asrs	r2, r2, #1
 8001710:	17db      	asrs	r3, r3, #31
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	72fb      	strb	r3, [r7, #11]
  	    uint8_t r = i % 12;
 8001716:	68fa      	ldr	r2, [r7, #12]
 8001718:	4b74      	ldr	r3, [pc, #464]	; (80018ec <SetI2CCommand+0x218>)
 800171a:	fb83 1302 	smull	r1, r3, r3, r2
 800171e:	1059      	asrs	r1, r3, #1
 8001720:	17d3      	asrs	r3, r2, #31
 8001722:	1ac9      	subs	r1, r1, r3
 8001724:	460b      	mov	r3, r1
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	440b      	add	r3, r1
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	1ad1      	subs	r1, r2, r3
 800172e:	460b      	mov	r3, r1
 8001730:	72bb      	strb	r3, [r7, #10]
  	    uint8_t active_device = q * 2 + (r >= 8 ? 1 : 0);
 8001732:	7afb      	ldrb	r3, [r7, #11]
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	b2db      	uxtb	r3, r3
 8001738:	7aba      	ldrb	r2, [r7, #10]
 800173a:	2a07      	cmp	r2, #7
 800173c:	bf8c      	ite	hi
 800173e:	2201      	movhi	r2, #1
 8001740:	2200      	movls	r2, #0
 8001742:	b2d2      	uxtb	r2, r2
 8001744:	4413      	add	r3, r2
 8001746:	727b      	strb	r3, [r7, #9]
  	    uint8_t channel = (r >= 8) ? r - 8 : r;
 8001748:	7abb      	ldrb	r3, [r7, #10]
 800174a:	2b07      	cmp	r3, #7
 800174c:	d903      	bls.n	8001756 <SetI2CCommand+0x82>
 800174e:	7abb      	ldrb	r3, [r7, #10]
 8001750:	3b08      	subs	r3, #8
 8001752:	b2db      	uxtb	r3, r3
 8001754:	e000      	b.n	8001758 <SetI2CCommand+0x84>
 8001756:	7abb      	ldrb	r3, [r7, #10]
 8001758:	723b      	strb	r3, [r7, #8]

        ResetDevicesExcept(active_device);
 800175a:	7a7b      	ldrb	r3, [r7, #9]
 800175c:	4618      	mov	r0, r3
 800175e:	f002 fde5 	bl	800432c <ResetDevicesExcept>
        setActiveTcaChannel(active_device,channel);
 8001762:	7a3a      	ldrb	r2, [r7, #8]
 8001764:	7a7b      	ldrb	r3, [r7, #9]
 8001766:	4611      	mov	r1, r2
 8001768:	4618      	mov	r0, r3
 800176a:	f002 fe11 	bl	8004390 <setActiveTcaChannel>
  		Dev = &vl53l0x_s[i];
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001774:	fb02 f303 	mul.w	r3, r2, r3
 8001778:	4a5b      	ldr	r2, [pc, #364]	; (80018e8 <SetI2CCommand+0x214>)
 800177a:	4413      	add	r3, r2
 800177c:	4a5c      	ldr	r2, [pc, #368]	; (80018f0 <SetI2CCommand+0x21c>)
 800177e:	6013      	str	r3, [r2, #0]
  		Dev->I2cHandle = &hi2c1;
 8001780:	4b5b      	ldr	r3, [pc, #364]	; (80018f0 <SetI2CCommand+0x21c>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a5b      	ldr	r2, [pc, #364]	; (80018f4 <SetI2CCommand+0x220>)
 8001786:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  		Dev->I2cDevAddr = VL53L0X_ADDR;
 800178a:	4b59      	ldr	r3, [pc, #356]	; (80018f0 <SetI2CCommand+0x21c>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	2252      	movs	r2, #82	; 0x52
 8001790:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
  		Dev->comms_type = 1;
 8001794:	4b56      	ldr	r3, [pc, #344]	; (80018f0 <SetI2CCommand+0x21c>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2201      	movs	r2, #1
 800179a:	f883 2174 	strb.w	r2, [r3, #372]	; 0x174
  		Dev->comms_speed_khz = 100;
 800179e:	4b54      	ldr	r3, [pc, #336]	; (80018f0 <SetI2CCommand+0x21c>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2264      	movs	r2, #100	; 0x64
 80017a4:	f8a3 2176 	strh.w	r2, [r3, #374]	; 0x176
  		uint8_t newadd = 0x52 + 2*i;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	3329      	adds	r3, #41	; 0x29
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	71fb      	strb	r3, [r7, #7]
  		VL53L0X_SetDeviceAddress(Dev, newadd);
 80017b2:	4b4f      	ldr	r3, [pc, #316]	; (80018f0 <SetI2CCommand+0x21c>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	79fa      	ldrb	r2, [r7, #7]
 80017b8:	4611      	mov	r1, r2
 80017ba:	4618      	mov	r0, r3
 80017bc:	f008 fa08 	bl	8009bd0 <VL53L0X_SetDeviceAddress>
  		Dev->I2cDevAddr = newadd;
 80017c0:	4b4b      	ldr	r3, [pc, #300]	; (80018f0 <SetI2CCommand+0x21c>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	79fa      	ldrb	r2, [r7, #7]
 80017c6:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

  		VL53L0X_WaitDeviceBooted( Dev );
 80017ca:	4b49      	ldr	r3, [pc, #292]	; (80018f0 <SetI2CCommand+0x21c>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f008 fcfc 	bl	800a1cc <VL53L0X_WaitDeviceBooted>
  		VL53L0X_DataInit( Dev );
 80017d4:	4b46      	ldr	r3, [pc, #280]	; (80018f0 <SetI2CCommand+0x21c>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4618      	mov	r0, r3
 80017da:	f008 fa11 	bl	8009c00 <VL53L0X_DataInit>
  		VL53L0X_StaticInit( Dev );
 80017de:	4b44      	ldr	r3, [pc, #272]	; (80018f0 <SetI2CCommand+0x21c>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f008 fb70 	bl	8009ec8 <VL53L0X_StaticInit>
  		VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 80017e8:	4b41      	ldr	r3, [pc, #260]	; (80018f0 <SetI2CCommand+0x21c>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2101      	movs	r1, #1
 80017ee:	4618      	mov	r0, r3
 80017f0:	f008 fd8a 	bl	800a308 <VL53L0X_SetDeviceMode>

		VL53L0X_SetReferenceSpads(Dev, refSpadCountHost[i], isApertureSpadsHost[i]);
 80017f4:	4b3e      	ldr	r3, [pc, #248]	; (80018f0 <SetI2CCommand+0x21c>)
 80017f6:	6818      	ldr	r0, [r3, #0]
 80017f8:	4a3f      	ldr	r2, [pc, #252]	; (80018f8 <SetI2CCommand+0x224>)
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001800:	4a3e      	ldr	r2, [pc, #248]	; (80018fc <SetI2CCommand+0x228>)
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	4413      	add	r3, r2
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	461a      	mov	r2, r3
 800180a:	f009 fea5 	bl	800b558 <VL53L0X_SetReferenceSpads>
  		VL53L0X_SetRefCalibration(Dev, VhvSettingsHost[i], PhaseCalHost[i]);
 800180e:	4b38      	ldr	r3, [pc, #224]	; (80018f0 <SetI2CCommand+0x21c>)
 8001810:	6818      	ldr	r0, [r3, #0]
 8001812:	4a3b      	ldr	r2, [pc, #236]	; (8001900 <SetI2CCommand+0x22c>)
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	4413      	add	r3, r2
 8001818:	7819      	ldrb	r1, [r3, #0]
 800181a:	4a3a      	ldr	r2, [pc, #232]	; (8001904 <SetI2CCommand+0x230>)
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	4413      	add	r3, r2
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	461a      	mov	r2, r3
 8001824:	f008 ffec 	bl	800a800 <VL53L0X_SetRefCalibration>

  		VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 8001828:	4b31      	ldr	r3, [pc, #196]	; (80018f0 <SetI2CCommand+0x21c>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2201      	movs	r2, #1
 800182e:	2100      	movs	r1, #0
 8001830:	4618      	mov	r0, r3
 8001832:	f008 fffd 	bl	800a830 <VL53L0X_SetLimitCheckEnable>
  		VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 8001836:	4b2e      	ldr	r3, [pc, #184]	; (80018f0 <SetI2CCommand+0x21c>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2201      	movs	r2, #1
 800183c:	2101      	movs	r1, #1
 800183e:	4618      	mov	r0, r3
 8001840:	f008 fff6 	bl	800a830 <VL53L0X_SetLimitCheckEnable>
  		VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 8001844:	4b2a      	ldr	r3, [pc, #168]	; (80018f0 <SetI2CCommand+0x21c>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f641 1299 	movw	r2, #6553	; 0x1999
 800184c:	2101      	movs	r1, #1
 800184e:	4618      	mov	r0, r3
 8001850:	f009 f89e 	bl	800a990 <VL53L0X_SetLimitCheckValue>
  		VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 8001854:	4b26      	ldr	r3, [pc, #152]	; (80018f0 <SetI2CCommand+0x21c>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800185c:	2100      	movs	r1, #0
 800185e:	4618      	mov	r0, r3
 8001860:	f009 f896 	bl	800a990 <VL53L0X_SetLimitCheckValue>
  		VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev, 100000);
 8001864:	4b22      	ldr	r3, [pc, #136]	; (80018f0 <SetI2CCommand+0x21c>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4927      	ldr	r1, [pc, #156]	; (8001908 <SetI2CCommand+0x234>)
 800186a:	4618      	mov	r0, r3
 800186c:	f008 fdaa 	bl	800a3c4 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
  		VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 8001870:	4b1f      	ldr	r3, [pc, #124]	; (80018f0 <SetI2CCommand+0x21c>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2212      	movs	r2, #18
 8001876:	2100      	movs	r1, #0
 8001878:	4618      	mov	r0, r3
 800187a:	f008 fdc9 	bl	800a410 <VL53L0X_SetVcselPulsePeriod>
  		VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 800187e:	4b1c      	ldr	r3, [pc, #112]	; (80018f0 <SetI2CCommand+0x21c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	220e      	movs	r2, #14
 8001884:	2101      	movs	r1, #1
 8001886:	4618      	mov	r0, r3
 8001888:	f008 fdc2 	bl	800a410 <VL53L0X_SetVcselPulsePeriod>

		Kalman_Init(&filters[i], Q, R, P, 0);  // Q, R, P
 800188c:	68fa      	ldr	r2, [r7, #12]
 800188e:	4613      	mov	r3, r2
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	4413      	add	r3, r2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	4a1d      	ldr	r2, [pc, #116]	; (800190c <SetI2CCommand+0x238>)
 8001898:	4413      	add	r3, r2
 800189a:	4a1d      	ldr	r2, [pc, #116]	; (8001910 <SetI2CCommand+0x23c>)
 800189c:	edd2 7a00 	vldr	s15, [r2]
 80018a0:	4a1c      	ldr	r2, [pc, #112]	; (8001914 <SetI2CCommand+0x240>)
 80018a2:	ed92 7a00 	vldr	s14, [r2]
 80018a6:	4a1c      	ldr	r2, [pc, #112]	; (8001918 <SetI2CCommand+0x244>)
 80018a8:	edd2 6a00 	vldr	s13, [r2]
 80018ac:	eddf 1a1b 	vldr	s3, [pc, #108]	; 800191c <SetI2CCommand+0x248>
 80018b0:	eeb0 1a66 	vmov.f32	s2, s13
 80018b4:	eef0 0a47 	vmov.f32	s1, s14
 80018b8:	eeb0 0a67 	vmov.f32	s0, s15
 80018bc:	4618      	mov	r0, r3
 80018be:	f001 fded 	bl	800349c <Kalman_Init>
  	for (int i = 0; i < NUM_SENSOR; i++) {
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	3301      	adds	r3, #1
 80018c6:	60fb      	str	r3, [r7, #12]
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	2b2f      	cmp	r3, #47	; 0x2f
 80018cc:	f77f af1b 	ble.w	8001706 <SetI2CCommand+0x32>
 		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%02d ",VhvSettingsHost[i]), 100);
 		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%02d) ",PhaseCalHost[i]), 100);
 		if(i%12 ==11){HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "\n\r"), 100);}
		#endif
  	}
  	InitStats();
 80018d0:	f7ff fd5e 	bl	8001390 <InitStats>
}
 80018d4:	bf00      	nop
 80018d6:	3710      	adds	r7, #16
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	08018764 	.word	0x08018764
 80018e0:	2000786c 	.word	0x2000786c
 80018e4:	200077e4 	.word	0x200077e4
 80018e8:	20007a5c 	.word	0x20007a5c
 80018ec:	2aaaaaab 	.word	0x2aaaaaab
 80018f0:	2000c55c 	.word	0x2000c55c
 80018f4:	2000729c 	.word	0x2000729c
 80018f8:	20000010 	.word	0x20000010
 80018fc:	200000d0 	.word	0x200000d0
 8001900:	20000100 	.word	0x20000100
 8001904:	20000130 	.word	0x20000130
 8001908:	000186a0 	.word	0x000186a0
 800190c:	200072f0 	.word	0x200072f0
 8001910:	20000000 	.word	0x20000000
 8001914:	20000004 	.word	0x20000004
 8001918:	20000008 	.word	0x20000008
 800191c:	00000000 	.word	0x00000000

08001920 <RevCommand>:

void RevCommand(char *arg){
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
    int step_rev_angle;
    uint32_t startTime, endTime, elapsedTime;
    if(sscanf(arg, "%d", &step_rev_angle) == 1){
 8001928:	f107 0308 	add.w	r3, r7, #8
 800192c:	461a      	mov	r2, r3
 800192e:	4927      	ldr	r1, [pc, #156]	; (80019cc <RevCommand+0xac>)
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f011 fdab 	bl	801348c <siscanf>
 8001936:	4603      	mov	r3, r0
 8001938:	2b01      	cmp	r3, #1
 800193a:	d134      	bne.n	80019a6 <RevCommand+0x86>
        startTime = HAL_GetTick();
 800193c:	f002 fdf0 	bl	8004520 <HAL_GetTick>
 8001940:	6178      	str	r0, [r7, #20]
		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d deg revolution Start \n\r",step_rev_angle), 100);
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	461a      	mov	r2, r3
 8001946:	4922      	ldr	r1, [pc, #136]	; (80019d0 <RevCommand+0xb0>)
 8001948:	4822      	ldr	r0, [pc, #136]	; (80019d4 <RevCommand+0xb4>)
 800194a:	f011 fd7f 	bl	801344c <siprintf>
 800194e:	4603      	mov	r3, r0
 8001950:	b29a      	uxth	r2, r3
 8001952:	2364      	movs	r3, #100	; 0x64
 8001954:	491f      	ldr	r1, [pc, #124]	; (80019d4 <RevCommand+0xb4>)
 8001956:	4820      	ldr	r0, [pc, #128]	; (80019d8 <RevCommand+0xb8>)
 8001958:	f007 f846 	bl	80089e8 <HAL_UART_Transmit>
        stepRev(step_rev_angle);
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	4618      	mov	r0, r3
 8001960:	f002 f8b0 	bl	8003ac4 <stepRev>
		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d deg revolution End \n\r",step_rev_angle), 100);
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	461a      	mov	r2, r3
 8001968:	491c      	ldr	r1, [pc, #112]	; (80019dc <RevCommand+0xbc>)
 800196a:	481a      	ldr	r0, [pc, #104]	; (80019d4 <RevCommand+0xb4>)
 800196c:	f011 fd6e 	bl	801344c <siprintf>
 8001970:	4603      	mov	r3, r0
 8001972:	b29a      	uxth	r2, r3
 8001974:	2364      	movs	r3, #100	; 0x64
 8001976:	4917      	ldr	r1, [pc, #92]	; (80019d4 <RevCommand+0xb4>)
 8001978:	4817      	ldr	r0, [pc, #92]	; (80019d8 <RevCommand+0xb8>)
 800197a:	f007 f835 	bl	80089e8 <HAL_UART_Transmit>
		endTime = HAL_GetTick();
 800197e:	f002 fdcf 	bl	8004520 <HAL_GetTick>
 8001982:	6138      	str	r0, [r7, #16]
		elapsedTime = endTime - startTime;
 8001984:	693a      	ldr	r2, [r7, #16]
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	60fb      	str	r3, [r7, #12]
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "Elapsed Time: %lu ms\n\r", elapsedTime), 100);
 800198c:	68fa      	ldr	r2, [r7, #12]
 800198e:	4914      	ldr	r1, [pc, #80]	; (80019e0 <RevCommand+0xc0>)
 8001990:	4810      	ldr	r0, [pc, #64]	; (80019d4 <RevCommand+0xb4>)
 8001992:	f011 fd5b 	bl	801344c <siprintf>
 8001996:	4603      	mov	r3, r0
 8001998:	b29a      	uxth	r2, r3
 800199a:	2364      	movs	r3, #100	; 0x64
 800199c:	490d      	ldr	r1, [pc, #52]	; (80019d4 <RevCommand+0xb4>)
 800199e:	480e      	ldr	r0, [pc, #56]	; (80019d8 <RevCommand+0xb8>)
 80019a0:	f007 f822 	bl	80089e8 <HAL_UART_Transmit>
 80019a4:	e00a      	b.n	80019bc <RevCommand+0x9c>
    }else{
    	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "invalid data\r\n"), 100);
 80019a6:	490f      	ldr	r1, [pc, #60]	; (80019e4 <RevCommand+0xc4>)
 80019a8:	480a      	ldr	r0, [pc, #40]	; (80019d4 <RevCommand+0xb4>)
 80019aa:	f011 fd4f 	bl	801344c <siprintf>
 80019ae:	4603      	mov	r3, r0
 80019b0:	b29a      	uxth	r2, r3
 80019b2:	2364      	movs	r3, #100	; 0x64
 80019b4:	4907      	ldr	r1, [pc, #28]	; (80019d4 <RevCommand+0xb4>)
 80019b6:	4808      	ldr	r0, [pc, #32]	; (80019d8 <RevCommand+0xb8>)
 80019b8:	f007 f816 	bl	80089e8 <HAL_UART_Transmit>
    }
    HAL_Delay(1000); // Delay for 1 second
 80019bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019c0:	f002 fdba 	bl	8004538 <HAL_Delay>
}
 80019c4:	bf00      	nop
 80019c6:	3718      	adds	r7, #24
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	08018774 	.word	0x08018774
 80019d0:	08018778 	.word	0x08018778
 80019d4:	2000786c 	.word	0x2000786c
 80019d8:	200077e4 	.word	0x200077e4
 80019dc:	08018794 	.word	0x08018794
 80019e0:	080187b0 	.word	0x080187b0
 80019e4:	080187c8 	.word	0x080187c8

080019e8 <LinCommand>:

void LinCommand(char *arg){
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
    int step_lin_dist = 0;
 80019f0:	2300      	movs	r3, #0
 80019f2:	60bb      	str	r3, [r7, #8]
    uint32_t startTime, endTime, elapsedTime;
    if (sscanf(arg, "%d", &step_lin_dist) == 1) {
 80019f4:	f107 0308 	add.w	r3, r7, #8
 80019f8:	461a      	mov	r2, r3
 80019fa:	4927      	ldr	r1, [pc, #156]	; (8001a98 <LinCommand+0xb0>)
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f011 fd45 	bl	801348c <siscanf>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d134      	bne.n	8001a72 <LinCommand+0x8a>
        startTime = HAL_GetTick();
 8001a08:	f002 fd8a 	bl	8004520 <HAL_GetTick>
 8001a0c:	6178      	str	r0, [r7, #20]
		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d mm lin Still moving \n\r",step_lin_dist), 100);
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	461a      	mov	r2, r3
 8001a12:	4922      	ldr	r1, [pc, #136]	; (8001a9c <LinCommand+0xb4>)
 8001a14:	4822      	ldr	r0, [pc, #136]	; (8001aa0 <LinCommand+0xb8>)
 8001a16:	f011 fd19 	bl	801344c <siprintf>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	b29a      	uxth	r2, r3
 8001a1e:	2364      	movs	r3, #100	; 0x64
 8001a20:	491f      	ldr	r1, [pc, #124]	; (8001aa0 <LinCommand+0xb8>)
 8001a22:	4820      	ldr	r0, [pc, #128]	; (8001aa4 <LinCommand+0xbc>)
 8001a24:	f006 ffe0 	bl	80089e8 <HAL_UART_Transmit>
        stepLin(step_lin_dist);
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f002 f8b2 	bl	8003b94 <stepLin>
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d mm lin End\n\r", step_lin_dist), 100);
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	461a      	mov	r2, r3
 8001a34:	491c      	ldr	r1, [pc, #112]	; (8001aa8 <LinCommand+0xc0>)
 8001a36:	481a      	ldr	r0, [pc, #104]	; (8001aa0 <LinCommand+0xb8>)
 8001a38:	f011 fd08 	bl	801344c <siprintf>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	b29a      	uxth	r2, r3
 8001a40:	2364      	movs	r3, #100	; 0x64
 8001a42:	4917      	ldr	r1, [pc, #92]	; (8001aa0 <LinCommand+0xb8>)
 8001a44:	4817      	ldr	r0, [pc, #92]	; (8001aa4 <LinCommand+0xbc>)
 8001a46:	f006 ffcf 	bl	80089e8 <HAL_UART_Transmit>
		endTime = HAL_GetTick();
 8001a4a:	f002 fd69 	bl	8004520 <HAL_GetTick>
 8001a4e:	6138      	str	r0, [r7, #16]
		elapsedTime = endTime - startTime;
 8001a50:	693a      	ldr	r2, [r7, #16]
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	60fb      	str	r3, [r7, #12]
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "Elapsed Time: %lu ms\n\r", elapsedTime), 100);
 8001a58:	68fa      	ldr	r2, [r7, #12]
 8001a5a:	4914      	ldr	r1, [pc, #80]	; (8001aac <LinCommand+0xc4>)
 8001a5c:	4810      	ldr	r0, [pc, #64]	; (8001aa0 <LinCommand+0xb8>)
 8001a5e:	f011 fcf5 	bl	801344c <siprintf>
 8001a62:	4603      	mov	r3, r0
 8001a64:	b29a      	uxth	r2, r3
 8001a66:	2364      	movs	r3, #100	; 0x64
 8001a68:	490d      	ldr	r1, [pc, #52]	; (8001aa0 <LinCommand+0xb8>)
 8001a6a:	480e      	ldr	r0, [pc, #56]	; (8001aa4 <LinCommand+0xbc>)
 8001a6c:	f006 ffbc 	bl	80089e8 <HAL_UART_Transmit>
 8001a70:	e00a      	b.n	8001a88 <LinCommand+0xa0>
    } else {
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "invalid data\r\n"), 100);
 8001a72:	490f      	ldr	r1, [pc, #60]	; (8001ab0 <LinCommand+0xc8>)
 8001a74:	480a      	ldr	r0, [pc, #40]	; (8001aa0 <LinCommand+0xb8>)
 8001a76:	f011 fce9 	bl	801344c <siprintf>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	b29a      	uxth	r2, r3
 8001a7e:	2364      	movs	r3, #100	; 0x64
 8001a80:	4907      	ldr	r1, [pc, #28]	; (8001aa0 <LinCommand+0xb8>)
 8001a82:	4808      	ldr	r0, [pc, #32]	; (8001aa4 <LinCommand+0xbc>)
 8001a84:	f006 ffb0 	bl	80089e8 <HAL_UART_Transmit>
    }
    HAL_Delay(1000); // Delay for 1 second
 8001a88:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a8c:	f002 fd54 	bl	8004538 <HAL_Delay>
}
 8001a90:	bf00      	nop
 8001a92:	3718      	adds	r7, #24
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	08018774 	.word	0x08018774
 8001a9c:	080187d8 	.word	0x080187d8
 8001aa0:	2000786c 	.word	0x2000786c
 8001aa4:	200077e4 	.word	0x200077e4
 8001aa8:	080187f4 	.word	0x080187f4
 8001aac:	080187b0 	.word	0x080187b0
 8001ab0:	080187c8 	.word	0x080187c8

08001ab4 <ServoCommand>:

void ServoCommand(char *arg){
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
    float servo_angle_val = 0;
 8001abc:	f04f 0300 	mov.w	r3, #0
 8001ac0:	60fb      	str	r3, [r7, #12]
    if(sscanf(arg, "%f", &servo_angle_val) == 1) {
 8001ac2:	f107 030c 	add.w	r3, r7, #12
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	4925      	ldr	r1, [pc, #148]	; (8001b60 <ServoCommand+0xac>)
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f011 fcde 	bl	801348c <siscanf>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d135      	bne.n	8001b42 <ServoCommand+0x8e>
    	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f servo Still moving \n\r", servo_angle_val), 100);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7fe fd65 	bl	80005a8 <__aeabi_f2d>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	4920      	ldr	r1, [pc, #128]	; (8001b64 <ServoCommand+0xb0>)
 8001ae4:	4820      	ldr	r0, [pc, #128]	; (8001b68 <ServoCommand+0xb4>)
 8001ae6:	f011 fcb1 	bl	801344c <siprintf>
 8001aea:	4603      	mov	r3, r0
 8001aec:	b29a      	uxth	r2, r3
 8001aee:	2364      	movs	r3, #100	; 0x64
 8001af0:	491d      	ldr	r1, [pc, #116]	; (8001b68 <ServoCommand+0xb4>)
 8001af2:	481e      	ldr	r0, [pc, #120]	; (8001b6c <ServoCommand+0xb8>)
 8001af4:	f006 ff78 	bl	80089e8 <HAL_UART_Transmit>
    	servo_angle(&htim2, TIM_CHANNEL_1, servo_angle_val);
 8001af8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001afc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b00:	ee17 2a90 	vmov	r2, s15
 8001b04:	2100      	movs	r1, #0
 8001b06:	481a      	ldr	r0, [pc, #104]	; (8001b70 <ServoCommand+0xbc>)
 8001b08:	f002 f8a0 	bl	8003c4c <servo_angle>
    	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f servo End \n\r", servo_angle_val), 100);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7fe fd4a 	bl	80005a8 <__aeabi_f2d>
 8001b14:	4602      	mov	r2, r0
 8001b16:	460b      	mov	r3, r1
 8001b18:	4916      	ldr	r1, [pc, #88]	; (8001b74 <ServoCommand+0xc0>)
 8001b1a:	4813      	ldr	r0, [pc, #76]	; (8001b68 <ServoCommand+0xb4>)
 8001b1c:	f011 fc96 	bl	801344c <siprintf>
 8001b20:	4603      	mov	r3, r0
 8001b22:	b29a      	uxth	r2, r3
 8001b24:	2364      	movs	r3, #100	; 0x64
 8001b26:	4910      	ldr	r1, [pc, #64]	; (8001b68 <ServoCommand+0xb4>)
 8001b28:	4810      	ldr	r0, [pc, #64]	; (8001b6c <ServoCommand+0xb8>)
 8001b2a:	f006 ff5d 	bl	80089e8 <HAL_UART_Transmit>
        HAL_Delay(2000); // Delay for 2 seconds
 8001b2e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001b32:	f002 fd01 	bl	8004538 <HAL_Delay>
        servo_angle(&htim2, TIM_CHANNEL_1, 0); // return to servo origin
 8001b36:	2200      	movs	r2, #0
 8001b38:	2100      	movs	r1, #0
 8001b3a:	480d      	ldr	r0, [pc, #52]	; (8001b70 <ServoCommand+0xbc>)
 8001b3c:	f002 f886 	bl	8003c4c <servo_angle>
    }else{
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "invalid data\r\n"), 100);
    }
}
 8001b40:	e00a      	b.n	8001b58 <ServoCommand+0xa4>
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "invalid data\r\n"), 100);
 8001b42:	490d      	ldr	r1, [pc, #52]	; (8001b78 <ServoCommand+0xc4>)
 8001b44:	4808      	ldr	r0, [pc, #32]	; (8001b68 <ServoCommand+0xb4>)
 8001b46:	f011 fc81 	bl	801344c <siprintf>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	b29a      	uxth	r2, r3
 8001b4e:	2364      	movs	r3, #100	; 0x64
 8001b50:	4905      	ldr	r1, [pc, #20]	; (8001b68 <ServoCommand+0xb4>)
 8001b52:	4806      	ldr	r0, [pc, #24]	; (8001b6c <ServoCommand+0xb8>)
 8001b54:	f006 ff48 	bl	80089e8 <HAL_UART_Transmit>
}
 8001b58:	bf00      	nop
 8001b5a:	3710      	adds	r7, #16
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	08018804 	.word	0x08018804
 8001b64:	08018808 	.word	0x08018808
 8001b68:	2000786c 	.word	0x2000786c
 8001b6c:	200077e4 	.word	0x200077e4
 8001b70:	20007794 	.word	0x20007794
 8001b74:	08018824 	.word	0x08018824
 8001b78:	080187c8 	.word	0x080187c8

08001b7c <Servo2Command>:

void Servo2Command(char *arg){
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
    float servo_angle_val = 0;
 8001b84:	f04f 0300 	mov.w	r3, #0
 8001b88:	60fb      	str	r3, [r7, #12]
    if(sscanf(arg, "%f", &servo_angle_val) == 1) {
 8001b8a:	f107 030c 	add.w	r3, r7, #12
 8001b8e:	461a      	mov	r2, r3
 8001b90:	4921      	ldr	r1, [pc, #132]	; (8001c18 <Servo2Command+0x9c>)
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f011 fc7a 	bl	801348c <siscanf>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d12c      	bne.n	8001bf8 <Servo2Command+0x7c>
    	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f servo Still moving \n\r", servo_angle_val), 100);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7fe fd01 	bl	80005a8 <__aeabi_f2d>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	460b      	mov	r3, r1
 8001baa:	491c      	ldr	r1, [pc, #112]	; (8001c1c <Servo2Command+0xa0>)
 8001bac:	481c      	ldr	r0, [pc, #112]	; (8001c20 <Servo2Command+0xa4>)
 8001bae:	f011 fc4d 	bl	801344c <siprintf>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	b29a      	uxth	r2, r3
 8001bb6:	2364      	movs	r3, #100	; 0x64
 8001bb8:	4919      	ldr	r1, [pc, #100]	; (8001c20 <Servo2Command+0xa4>)
 8001bba:	481a      	ldr	r0, [pc, #104]	; (8001c24 <Servo2Command+0xa8>)
 8001bbc:	f006 ff14 	bl	80089e8 <HAL_UART_Transmit>
    	servo_angle(&htim2, TIM_CHANNEL_1, servo_angle_val);
 8001bc0:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bc8:	ee17 2a90 	vmov	r2, s15
 8001bcc:	2100      	movs	r1, #0
 8001bce:	4816      	ldr	r0, [pc, #88]	; (8001c28 <Servo2Command+0xac>)
 8001bd0:	f002 f83c 	bl	8003c4c <servo_angle>
    	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f servo End \n\r", servo_angle_val), 100);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7fe fce6 	bl	80005a8 <__aeabi_f2d>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	460b      	mov	r3, r1
 8001be0:	4912      	ldr	r1, [pc, #72]	; (8001c2c <Servo2Command+0xb0>)
 8001be2:	480f      	ldr	r0, [pc, #60]	; (8001c20 <Servo2Command+0xa4>)
 8001be4:	f011 fc32 	bl	801344c <siprintf>
 8001be8:	4603      	mov	r3, r0
 8001bea:	b29a      	uxth	r2, r3
 8001bec:	2364      	movs	r3, #100	; 0x64
 8001bee:	490c      	ldr	r1, [pc, #48]	; (8001c20 <Servo2Command+0xa4>)
 8001bf0:	480c      	ldr	r0, [pc, #48]	; (8001c24 <Servo2Command+0xa8>)
 8001bf2:	f006 fef9 	bl	80089e8 <HAL_UART_Transmit>
    }else{
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "invalid data\r\n"), 100);
    }
}
 8001bf6:	e00a      	b.n	8001c0e <Servo2Command+0x92>
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "invalid data\r\n"), 100);
 8001bf8:	490d      	ldr	r1, [pc, #52]	; (8001c30 <Servo2Command+0xb4>)
 8001bfa:	4809      	ldr	r0, [pc, #36]	; (8001c20 <Servo2Command+0xa4>)
 8001bfc:	f011 fc26 	bl	801344c <siprintf>
 8001c00:	4603      	mov	r3, r0
 8001c02:	b29a      	uxth	r2, r3
 8001c04:	2364      	movs	r3, #100	; 0x64
 8001c06:	4906      	ldr	r1, [pc, #24]	; (8001c20 <Servo2Command+0xa4>)
 8001c08:	4806      	ldr	r0, [pc, #24]	; (8001c24 <Servo2Command+0xa8>)
 8001c0a:	f006 feed 	bl	80089e8 <HAL_UART_Transmit>
}
 8001c0e:	bf00      	nop
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	08018804 	.word	0x08018804
 8001c1c:	08018808 	.word	0x08018808
 8001c20:	2000786c 	.word	0x2000786c
 8001c24:	200077e4 	.word	0x200077e4
 8001c28:	20007794 	.word	0x20007794
 8001c2c:	08018824 	.word	0x08018824
 8001c30:	080187c8 	.word	0x080187c8

08001c34 <AvgStdCommand>:

void AvgStdCommand(){
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "Avg Std Force Z\n" ), 1000);
 8001c3a:	496f      	ldr	r1, [pc, #444]	; (8001df8 <AvgStdCommand+0x1c4>)
 8001c3c:	486f      	ldr	r0, [pc, #444]	; (8001dfc <AvgStdCommand+0x1c8>)
 8001c3e:	f011 fc05 	bl	801344c <siprintf>
 8001c42:	4603      	mov	r3, r0
 8001c44:	b29a      	uxth	r2, r3
 8001c46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c4a:	496c      	ldr	r1, [pc, #432]	; (8001dfc <AvgStdCommand+0x1c8>)
 8001c4c:	486c      	ldr	r0, [pc, #432]	; (8001e00 <AvgStdCommand+0x1cc>)
 8001c4e:	f006 fecb 	bl	80089e8 <HAL_UART_Transmit>
    for(int i = 0; i < sizeof(Xmean)/sizeof(Xmean[0]); i++) {
 8001c52:	2300      	movs	r3, #0
 8001c54:	607b      	str	r3, [r7, #4]
 8001c56:	e02e      	b.n	8001cb6 <AvgStdCommand+0x82>
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", Xmean[i]), 1000);
 8001c58:	4a6a      	ldr	r2, [pc, #424]	; (8001e04 <AvgStdCommand+0x1d0>)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	4413      	add	r3, r2
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7fe fca0 	bl	80005a8 <__aeabi_f2d>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	460b      	mov	r3, r1
 8001c6c:	4966      	ldr	r1, [pc, #408]	; (8001e08 <AvgStdCommand+0x1d4>)
 8001c6e:	4863      	ldr	r0, [pc, #396]	; (8001dfc <AvgStdCommand+0x1c8>)
 8001c70:	f011 fbec 	bl	801344c <siprintf>
 8001c74:	4603      	mov	r3, r0
 8001c76:	b29a      	uxth	r2, r3
 8001c78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c7c:	495f      	ldr	r1, [pc, #380]	; (8001dfc <AvgStdCommand+0x1c8>)
 8001c7e:	4860      	ldr	r0, [pc, #384]	; (8001e00 <AvgStdCommand+0x1cc>)
 8001c80:	f006 feb2 	bl	80089e8 <HAL_UART_Transmit>
        if(i%8==7){HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "\n"), 1000);}
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	425a      	negs	r2, r3
 8001c88:	f003 0307 	and.w	r3, r3, #7
 8001c8c:	f002 0207 	and.w	r2, r2, #7
 8001c90:	bf58      	it	pl
 8001c92:	4253      	negpl	r3, r2
 8001c94:	2b07      	cmp	r3, #7
 8001c96:	d10b      	bne.n	8001cb0 <AvgStdCommand+0x7c>
 8001c98:	495c      	ldr	r1, [pc, #368]	; (8001e0c <AvgStdCommand+0x1d8>)
 8001c9a:	4858      	ldr	r0, [pc, #352]	; (8001dfc <AvgStdCommand+0x1c8>)
 8001c9c:	f011 fbd6 	bl	801344c <siprintf>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	b29a      	uxth	r2, r3
 8001ca4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ca8:	4954      	ldr	r1, [pc, #336]	; (8001dfc <AvgStdCommand+0x1c8>)
 8001caa:	4855      	ldr	r0, [pc, #340]	; (8001e00 <AvgStdCommand+0x1cc>)
 8001cac:	f006 fe9c 	bl	80089e8 <HAL_UART_Transmit>
    for(int i = 0; i < sizeof(Xmean)/sizeof(Xmean[0]); i++) {
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	607b      	str	r3, [r7, #4]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2b2f      	cmp	r3, #47	; 0x2f
 8001cba:	d9cd      	bls.n	8001c58 <AvgStdCommand+0x24>
    }
    for(int i = 0; i < sizeof(Xstd)/sizeof(Xstd[0]); i++) {
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	603b      	str	r3, [r7, #0]
 8001cc0:	e02e      	b.n	8001d20 <AvgStdCommand+0xec>
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", Xstd[i]), 1000);
 8001cc2:	4a53      	ldr	r2, [pc, #332]	; (8001e10 <AvgStdCommand+0x1dc>)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	4413      	add	r3, r2
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7fe fc6b 	bl	80005a8 <__aeabi_f2d>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	494c      	ldr	r1, [pc, #304]	; (8001e08 <AvgStdCommand+0x1d4>)
 8001cd8:	4848      	ldr	r0, [pc, #288]	; (8001dfc <AvgStdCommand+0x1c8>)
 8001cda:	f011 fbb7 	bl	801344c <siprintf>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	b29a      	uxth	r2, r3
 8001ce2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ce6:	4945      	ldr	r1, [pc, #276]	; (8001dfc <AvgStdCommand+0x1c8>)
 8001ce8:	4845      	ldr	r0, [pc, #276]	; (8001e00 <AvgStdCommand+0x1cc>)
 8001cea:	f006 fe7d 	bl	80089e8 <HAL_UART_Transmit>
        if(i%8==7){HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "\n"), 1000);}
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	425a      	negs	r2, r3
 8001cf2:	f003 0307 	and.w	r3, r3, #7
 8001cf6:	f002 0207 	and.w	r2, r2, #7
 8001cfa:	bf58      	it	pl
 8001cfc:	4253      	negpl	r3, r2
 8001cfe:	2b07      	cmp	r3, #7
 8001d00:	d10b      	bne.n	8001d1a <AvgStdCommand+0xe6>
 8001d02:	4942      	ldr	r1, [pc, #264]	; (8001e0c <AvgStdCommand+0x1d8>)
 8001d04:	483d      	ldr	r0, [pc, #244]	; (8001dfc <AvgStdCommand+0x1c8>)
 8001d06:	f011 fba1 	bl	801344c <siprintf>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	b29a      	uxth	r2, r3
 8001d0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d12:	493a      	ldr	r1, [pc, #232]	; (8001dfc <AvgStdCommand+0x1c8>)
 8001d14:	483a      	ldr	r0, [pc, #232]	; (8001e00 <AvgStdCommand+0x1cc>)
 8001d16:	f006 fe67 	bl	80089e8 <HAL_UART_Transmit>
    for(int i = 0; i < sizeof(Xstd)/sizeof(Xstd[0]); i++) {
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	603b      	str	r3, [r7, #0]
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	2b2f      	cmp	r3, #47	; 0x2f
 8001d24:	d9cd      	bls.n	8001cc2 <AvgStdCommand+0x8e>
    }
    HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", Fminmax[0]), 1000);
 8001d26:	4b3b      	ldr	r3, [pc, #236]	; (8001e14 <AvgStdCommand+0x1e0>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7fe fc3c 	bl	80005a8 <__aeabi_f2d>
 8001d30:	4602      	mov	r2, r0
 8001d32:	460b      	mov	r3, r1
 8001d34:	4934      	ldr	r1, [pc, #208]	; (8001e08 <AvgStdCommand+0x1d4>)
 8001d36:	4831      	ldr	r0, [pc, #196]	; (8001dfc <AvgStdCommand+0x1c8>)
 8001d38:	f011 fb88 	bl	801344c <siprintf>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	b29a      	uxth	r2, r3
 8001d40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d44:	492d      	ldr	r1, [pc, #180]	; (8001dfc <AvgStdCommand+0x1c8>)
 8001d46:	482e      	ldr	r0, [pc, #184]	; (8001e00 <AvgStdCommand+0x1cc>)
 8001d48:	f006 fe4e 	bl	80089e8 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", Fminmax[1]), 1000);
 8001d4c:	4b31      	ldr	r3, [pc, #196]	; (8001e14 <AvgStdCommand+0x1e0>)
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7fe fc29 	bl	80005a8 <__aeabi_f2d>
 8001d56:	4602      	mov	r2, r0
 8001d58:	460b      	mov	r3, r1
 8001d5a:	492b      	ldr	r1, [pc, #172]	; (8001e08 <AvgStdCommand+0x1d4>)
 8001d5c:	4827      	ldr	r0, [pc, #156]	; (8001dfc <AvgStdCommand+0x1c8>)
 8001d5e:	f011 fb75 	bl	801344c <siprintf>
 8001d62:	4603      	mov	r3, r0
 8001d64:	b29a      	uxth	r2, r3
 8001d66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d6a:	4924      	ldr	r1, [pc, #144]	; (8001dfc <AvgStdCommand+0x1c8>)
 8001d6c:	4824      	ldr	r0, [pc, #144]	; (8001e00 <AvgStdCommand+0x1cc>)
 8001d6e:	f006 fe3b 	bl	80089e8 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "\n"), 1000);
 8001d72:	4926      	ldr	r1, [pc, #152]	; (8001e0c <AvgStdCommand+0x1d8>)
 8001d74:	4821      	ldr	r0, [pc, #132]	; (8001dfc <AvgStdCommand+0x1c8>)
 8001d76:	f011 fb69 	bl	801344c <siprintf>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	b29a      	uxth	r2, r3
 8001d7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d82:	491e      	ldr	r1, [pc, #120]	; (8001dfc <AvgStdCommand+0x1c8>)
 8001d84:	481e      	ldr	r0, [pc, #120]	; (8001e00 <AvgStdCommand+0x1cc>)
 8001d86:	f006 fe2f 	bl	80089e8 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", Zminmax[0]), 1000);
 8001d8a:	4b23      	ldr	r3, [pc, #140]	; (8001e18 <AvgStdCommand+0x1e4>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7fe fc0a 	bl	80005a8 <__aeabi_f2d>
 8001d94:	4602      	mov	r2, r0
 8001d96:	460b      	mov	r3, r1
 8001d98:	491b      	ldr	r1, [pc, #108]	; (8001e08 <AvgStdCommand+0x1d4>)
 8001d9a:	4818      	ldr	r0, [pc, #96]	; (8001dfc <AvgStdCommand+0x1c8>)
 8001d9c:	f011 fb56 	bl	801344c <siprintf>
 8001da0:	4603      	mov	r3, r0
 8001da2:	b29a      	uxth	r2, r3
 8001da4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001da8:	4914      	ldr	r1, [pc, #80]	; (8001dfc <AvgStdCommand+0x1c8>)
 8001daa:	4815      	ldr	r0, [pc, #84]	; (8001e00 <AvgStdCommand+0x1cc>)
 8001dac:	f006 fe1c 	bl	80089e8 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", Zminmax[1]), 1000);
 8001db0:	4b19      	ldr	r3, [pc, #100]	; (8001e18 <AvgStdCommand+0x1e4>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7fe fbf7 	bl	80005a8 <__aeabi_f2d>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	4912      	ldr	r1, [pc, #72]	; (8001e08 <AvgStdCommand+0x1d4>)
 8001dc0:	480e      	ldr	r0, [pc, #56]	; (8001dfc <AvgStdCommand+0x1c8>)
 8001dc2:	f011 fb43 	bl	801344c <siprintf>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	b29a      	uxth	r2, r3
 8001dca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dce:	490b      	ldr	r1, [pc, #44]	; (8001dfc <AvgStdCommand+0x1c8>)
 8001dd0:	480b      	ldr	r0, [pc, #44]	; (8001e00 <AvgStdCommand+0x1cc>)
 8001dd2:	f006 fe09 	bl	80089e8 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "\n"), 1000);
 8001dd6:	490d      	ldr	r1, [pc, #52]	; (8001e0c <AvgStdCommand+0x1d8>)
 8001dd8:	4808      	ldr	r0, [pc, #32]	; (8001dfc <AvgStdCommand+0x1c8>)
 8001dda:	f011 fb37 	bl	801344c <siprintf>
 8001dde:	4603      	mov	r3, r0
 8001de0:	b29a      	uxth	r2, r3
 8001de2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001de6:	4905      	ldr	r1, [pc, #20]	; (8001dfc <AvgStdCommand+0x1c8>)
 8001de8:	4805      	ldr	r0, [pc, #20]	; (8001e00 <AvgStdCommand+0x1cc>)
 8001dea:	f006 fdfd 	bl	80089e8 <HAL_UART_Transmit>
}
 8001dee:	bf00      	nop
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	08018838 	.word	0x08018838
 8001dfc:	2000786c 	.word	0x2000786c
 8001e00:	200077e4 	.word	0x200077e4
 8001e04:	20000178 	.word	0x20000178
 8001e08:	0801884c 	.word	0x0801884c
 8001e0c:	08018854 	.word	0x08018854
 8001e10:	20000238 	.word	0x20000238
 8001e14:	200002f8 	.word	0x200002f8
 8001e18:	20000300 	.word	0x20000300
 8001e1c:	00000000 	.word	0x00000000

08001e20 <InferenceHeatI2CCommand>:


void InferenceHeatI2CCommand()
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b08c      	sub	sp, #48	; 0x30
 8001e24:	af00      	add	r7, sp, #0
	SetI2CCommand();
 8001e26:	f7ff fc55 	bl	80016d4 <SetI2CCommand>
	SensorI2CCommand();
 8001e2a:	f7ff fba5 	bl	8001578 <SensorI2CCommand>
	ResetAllDevices();
 8001e2e:	f002 fa51 	bl	80042d4 <ResetAllDevices>
	setOnAllDevices();
 8001e32:	f002 facf 	bl	80043d4 <setOnAllDevices>
    HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "sensor test\r\n"), 100);
 8001e36:	490b      	ldr	r1, [pc, #44]	; (8001e64 <InferenceHeatI2CCommand+0x44>)
 8001e38:	480b      	ldr	r0, [pc, #44]	; (8001e68 <InferenceHeatI2CCommand+0x48>)
 8001e3a:	f011 fb07 	bl	801344c <siprintf>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	b29a      	uxth	r2, r3
 8001e42:	2364      	movs	r3, #100	; 0x64
 8001e44:	4908      	ldr	r1, [pc, #32]	; (8001e68 <InferenceHeatI2CCommand+0x48>)
 8001e46:	4809      	ldr	r0, [pc, #36]	; (8001e6c <InferenceHeatI2CCommand+0x4c>)
 8001e48:	f006 fdce 	bl	80089e8 <HAL_UART_Transmit>
    uint32_t startTime, endTime, diffTime;
    for (int count =0; count <50000;count ++){
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e50:	e2f8      	b.n	8002444 <InferenceHeatI2CCommand+0x624>
    	uint8_t tofCount =0;
 8001e52:	2300      	movs	r3, #0
 8001e54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    	startTime = HAL_GetTick();
 8001e58:	f002 fb62 	bl	8004520 <HAL_GetTick>
 8001e5c:	6178      	str	r0, [r7, #20]
        for (int i = 0; i < NUM_SENSOR; i++) {
 8001e5e:	2300      	movs	r3, #0
 8001e60:	627b      	str	r3, [r7, #36]	; 0x24
 8001e62:	e077      	b.n	8001f54 <InferenceHeatI2CCommand+0x134>
 8001e64:	08018754 	.word	0x08018754
 8001e68:	2000786c 	.word	0x2000786c
 8001e6c:	200077e4 	.word	0x200077e4
            Dev = &vl53l0x_s[i];
 8001e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e72:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001e76:	fb02 f303 	mul.w	r3, r2, r3
 8001e7a:	4a9b      	ldr	r2, [pc, #620]	; (80020e8 <InferenceHeatI2CCommand+0x2c8>)
 8001e7c:	4413      	add	r3, r2
 8001e7e:	4a9b      	ldr	r2, [pc, #620]	; (80020ec <InferenceHeatI2CCommand+0x2cc>)
 8001e80:	6013      	str	r3, [r2, #0]
            VL53L0X_PerformContinuousRangingMeasurement(Dev, &RangingData); // 1500 uss
 8001e82:	4b9a      	ldr	r3, [pc, #616]	; (80020ec <InferenceHeatI2CCommand+0x2cc>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	499a      	ldr	r1, [pc, #616]	; (80020f0 <InferenceHeatI2CCommand+0x2d0>)
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f009 fb91 	bl	800b5b0 <VL53L0X_PerformContinuousRangingMeasurement>
            if (RangingData.RangeStatus == 0) {
 8001e8e:	4b98      	ldr	r3, [pc, #608]	; (80020f0 <InferenceHeatI2CCommand+0x2d0>)
 8001e90:	7e1b      	ldrb	r3, [r3, #24]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d15b      	bne.n	8001f4e <InferenceHeatI2CCommand+0x12e>
  			  if (RangingData.RangeMilliMeter < sensorAverages[i]+20) {
 8001e96:	4b96      	ldr	r3, [pc, #600]	; (80020f0 <InferenceHeatI2CCommand+0x2d0>)
 8001e98:	891b      	ldrh	r3, [r3, #8]
 8001e9a:	ee07 3a90 	vmov	s15, r3
 8001e9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ea2:	4a94      	ldr	r2, [pc, #592]	; (80020f4 <InferenceHeatI2CCommand+0x2d4>)
 8001ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	4413      	add	r3, r2
 8001eaa:	edd3 7a00 	vldr	s15, [r3]
 8001eae:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8001eb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001eb6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ebe:	d546      	bpl.n	8001f4e <InferenceHeatI2CCommand+0x12e>
            	filteredValue[i] = Kalman_Estimate(&filters[i], RangingData.RangeMilliMeter); // 500 us
 8001ec0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	4413      	add	r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	4a8b      	ldr	r2, [pc, #556]	; (80020f8 <InferenceHeatI2CCommand+0x2d8>)
 8001ecc:	4413      	add	r3, r2
 8001ece:	4a88      	ldr	r2, [pc, #544]	; (80020f0 <InferenceHeatI2CCommand+0x2d0>)
 8001ed0:	8912      	ldrh	r2, [r2, #8]
 8001ed2:	ee07 2a90 	vmov	s15, r2
 8001ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001eda:	eeb0 0a67 	vmov.f32	s0, s15
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f001 fafa 	bl	80034d8 <Kalman_Estimate>
 8001ee4:	eef0 7a40 	vmov.f32	s15, s0
 8001ee8:	4a84      	ldr	r2, [pc, #528]	; (80020fc <InferenceHeatI2CCommand+0x2dc>)
 8001eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	4413      	add	r3, r2
 8001ef0:	edc3 7a00 	vstr	s15, [r3]
                filteredValue[i] -= sensorAverages[i];
 8001ef4:	4a81      	ldr	r2, [pc, #516]	; (80020fc <InferenceHeatI2CCommand+0x2dc>)
 8001ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	4413      	add	r3, r2
 8001efc:	ed93 7a00 	vldr	s14, [r3]
 8001f00:	4a7c      	ldr	r2, [pc, #496]	; (80020f4 <InferenceHeatI2CCommand+0x2d4>)
 8001f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	4413      	add	r3, r2
 8001f08:	edd3 7a00 	vldr	s15, [r3]
 8001f0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f10:	4a7a      	ldr	r2, [pc, #488]	; (80020fc <InferenceHeatI2CCommand+0x2dc>)
 8001f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	4413      	add	r3, r2
 8001f18:	edc3 7a00 	vstr	s15, [r3]
                //filteredValue[i] -= Xmean[i];
                filteredValue[i] /= Xstd[i];
 8001f1c:	4a77      	ldr	r2, [pc, #476]	; (80020fc <InferenceHeatI2CCommand+0x2dc>)
 8001f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	4413      	add	r3, r2
 8001f24:	edd3 6a00 	vldr	s13, [r3]
 8001f28:	4a75      	ldr	r2, [pc, #468]	; (8002100 <InferenceHeatI2CCommand+0x2e0>)
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	4413      	add	r3, r2
 8001f30:	ed93 7a00 	vldr	s14, [r3]
 8001f34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f38:	4a70      	ldr	r2, [pc, #448]	; (80020fc <InferenceHeatI2CCommand+0x2dc>)
 8001f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	4413      	add	r3, r2
 8001f40:	edc3 7a00 	vstr	s15, [r3]
                tofCount++;
 8001f44:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001f48:	3301      	adds	r3, #1
 8001f4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        for (int i = 0; i < NUM_SENSOR; i++) {
 8001f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f50:	3301      	adds	r3, #1
 8001f52:	627b      	str	r3, [r7, #36]	; 0x24
 8001f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f56:	2b2f      	cmp	r3, #47	; 0x2f
 8001f58:	dd8a      	ble.n	8001e70 <InferenceHeatI2CCommand+0x50>
  			  }
            }
        }

        in_data[0] = filteredValue[0];
 8001f5a:	4b68      	ldr	r3, [pc, #416]	; (80020fc <InferenceHeatI2CCommand+0x2dc>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a69      	ldr	r2, [pc, #420]	; (8002104 <InferenceHeatI2CCommand+0x2e4>)
 8001f60:	6013      	str	r3, [r2, #0]
        in_data[1] = filteredValue[1];
 8001f62:	4b66      	ldr	r3, [pc, #408]	; (80020fc <InferenceHeatI2CCommand+0x2dc>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	4a67      	ldr	r2, [pc, #412]	; (8002104 <InferenceHeatI2CCommand+0x2e4>)
 8001f68:	6053      	str	r3, [r2, #4]
        in_data[2] = filteredValue[2];
 8001f6a:	4b64      	ldr	r3, [pc, #400]	; (80020fc <InferenceHeatI2CCommand+0x2dc>)
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	4a65      	ldr	r2, [pc, #404]	; (8002104 <InferenceHeatI2CCommand+0x2e4>)
 8001f70:	6093      	str	r3, [r2, #8]
        in_data[3] = filteredValue[3];
 8001f72:	4b62      	ldr	r3, [pc, #392]	; (80020fc <InferenceHeatI2CCommand+0x2dc>)
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	4a63      	ldr	r2, [pc, #396]	; (8002104 <InferenceHeatI2CCommand+0x2e4>)
 8001f78:	60d3      	str	r3, [r2, #12]
        in_data[4] = filteredValue[4];
 8001f7a:	4b60      	ldr	r3, [pc, #384]	; (80020fc <InferenceHeatI2CCommand+0x2dc>)
 8001f7c:	691b      	ldr	r3, [r3, #16]
 8001f7e:	4a61      	ldr	r2, [pc, #388]	; (8002104 <InferenceHeatI2CCommand+0x2e4>)
 8001f80:	6113      	str	r3, [r2, #16]
        in_data[5] = filteredValue[5];
 8001f82:	4b5e      	ldr	r3, [pc, #376]	; (80020fc <InferenceHeatI2CCommand+0x2dc>)
 8001f84:	695b      	ldr	r3, [r3, #20]
 8001f86:	4a5f      	ldr	r2, [pc, #380]	; (8002104 <InferenceHeatI2CCommand+0x2e4>)
 8001f88:	6153      	str	r3, [r2, #20]
        in_data[6] = filteredValue[6];
 8001f8a:	4b5c      	ldr	r3, [pc, #368]	; (80020fc <InferenceHeatI2CCommand+0x2dc>)
 8001f8c:	699b      	ldr	r3, [r3, #24]
 8001f8e:	4a5d      	ldr	r2, [pc, #372]	; (8002104 <InferenceHeatI2CCommand+0x2e4>)
 8001f90:	6193      	str	r3, [r2, #24]
        in_data[7] = filteredValue[7];
 8001f92:	4b5a      	ldr	r3, [pc, #360]	; (80020fc <InferenceHeatI2CCommand+0x2dc>)
 8001f94:	69db      	ldr	r3, [r3, #28]
 8001f96:	4a5b      	ldr	r2, [pc, #364]	; (8002104 <InferenceHeatI2CCommand+0x2e4>)
 8001f98:	61d3      	str	r3, [r2, #28]
        in_data[8] = filteredValue[8];
 8001f9a:	4b58      	ldr	r3, [pc, #352]	; (80020fc <InferenceHeatI2CCommand+0x2dc>)
 8001f9c:	6a1b      	ldr	r3, [r3, #32]
 8001f9e:	4a59      	ldr	r2, [pc, #356]	; (8002104 <InferenceHeatI2CCommand+0x2e4>)
 8001fa0:	6213      	str	r3, [r2, #32]
        in_data[9] = filteredValue[9];
 8001fa2:	4b56      	ldr	r3, [pc, #344]	; (80020fc <InferenceHeatI2CCommand+0x2dc>)
 8001fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa6:	4a57      	ldr	r2, [pc, #348]	; (8002104 <InferenceHeatI2CCommand+0x2e4>)
 8001fa8:	6253      	str	r3, [r2, #36]	; 0x24
        in_data[10] = filteredValue[10];
 8001faa:	4b54      	ldr	r3, [pc, #336]	; (80020fc <InferenceHeatI2CCommand+0x2dc>)
 8001fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fae:	4a55      	ldr	r2, [pc, #340]	; (8002104 <InferenceHeatI2CCommand+0x2e4>)
 8001fb0:	6293      	str	r3, [r2, #40]	; 0x28
        in_data[11] = filteredValue[11];
 8001fb2:	4b52      	ldr	r3, [pc, #328]	; (80020fc <InferenceHeatI2CCommand+0x2dc>)
 8001fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb6:	4a53      	ldr	r2, [pc, #332]	; (8002104 <InferenceHeatI2CCommand+0x2e4>)
 8001fb8:	62d3      	str	r3, [r2, #44]	; 0x2c
        in_data[12] = filteredValue[0];
 8001fba:	4b50      	ldr	r3, [pc, #320]	; (80020fc <InferenceHeatI2CCommand+0x2dc>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a51      	ldr	r2, [pc, #324]	; (8002104 <InferenceHeatI2CCommand+0x2e4>)
 8001fc0:	6313      	str	r3, [r2, #48]	; 0x30

        in_data[13] = filteredValue[12];
 8001fc2:	4b4e      	ldr	r3, [pc, #312]	; (80020fc <InferenceHeatI2CCommand+0x2dc>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	4a4f      	ldr	r2, [pc, #316]	; (8002104 <InferenceHeatI2CCommand+0x2e4>)
 8001fc8:	6353      	str	r3, [r2, #52]	; 0x34
        in_data[14] = filteredValue[13];
 8001fca:	4b4c      	ldr	r3, [pc, #304]	; (80020fc <InferenceHeatI2CCommand+0x2dc>)
 8001fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fce:	4a4d      	ldr	r2, [pc, #308]	; (8002104 <InferenceHeatI2CCommand+0x2e4>)
 8001fd0:	6393      	str	r3, [r2, #56]	; 0x38
        in_data[15] = filteredValue[14];
 8001fd2:	4b4a      	ldr	r3, [pc, #296]	; (80020fc <InferenceHeatI2CCommand+0x2dc>)
 8001fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fd6:	4a4b      	ldr	r2, [pc, #300]	; (8002104 <InferenceHeatI2CCommand+0x2e4>)
 8001fd8:	63d3      	str	r3, [r2, #60]	; 0x3c
        in_data[16] = filteredValue[15];
 8001fda:	4b48      	ldr	r3, [pc, #288]	; (80020fc <InferenceHeatI2CCommand+0x2dc>)
 8001fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fde:	4a49      	ldr	r2, [pc, #292]	; (8002104 <InferenceHeatI2CCommand+0x2e4>)
 8001fe0:	6413      	str	r3, [r2, #64]	; 0x40
        in_data[17] = filteredValue[16];
 8001fe2:	4b46      	ldr	r3, [pc, #280]	; (80020fc <InferenceHeatI2CCommand+0x2dc>)
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe6:	4a47      	ldr	r2, [pc, #284]	; (8002104 <InferenceHeatI2CCommand+0x2e4>)
 8001fe8:	6453      	str	r3, [r2, #68]	; 0x44
        in_data[18] = filteredValue[17];
 8001fea:	4b44      	ldr	r3, [pc, #272]	; (80020fc <InferenceHeatI2CCommand+0x2dc>)
 8001fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fee:	4a45      	ldr	r2, [pc, #276]	; (8002104 <InferenceHeatI2CCommand+0x2e4>)
 8001ff0:	6493      	str	r3, [r2, #72]	; 0x48
        in_data[19] = filteredValue[18];
 8001ff2:	4b42      	ldr	r3, [pc, #264]	; (80020fc <InferenceHeatI2CCommand+0x2dc>)
 8001ff4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ff6:	4a43      	ldr	r2, [pc, #268]	; (8002104 <InferenceHeatI2CCommand+0x2e4>)
 8001ff8:	64d3      	str	r3, [r2, #76]	; 0x4c
        in_data[20] = filteredValue[19];
 8001ffa:	4b40      	ldr	r3, [pc, #256]	; (80020fc <InferenceHeatI2CCommand+0x2dc>)
 8001ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ffe:	4a41      	ldr	r2, [pc, #260]	; (8002104 <InferenceHeatI2CCommand+0x2e4>)
 8002000:	6513      	str	r3, [r2, #80]	; 0x50
        in_data[21] = filteredValue[20];
 8002002:	4b3e      	ldr	r3, [pc, #248]	; (80020fc <InferenceHeatI2CCommand+0x2dc>)
 8002004:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002006:	4a3f      	ldr	r2, [pc, #252]	; (8002104 <InferenceHeatI2CCommand+0x2e4>)
 8002008:	6553      	str	r3, [r2, #84]	; 0x54
        in_data[22] = filteredValue[21];
 800200a:	4b3c      	ldr	r3, [pc, #240]	; (80020fc <InferenceHeatI2CCommand+0x2dc>)
 800200c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800200e:	4a3d      	ldr	r2, [pc, #244]	; (8002104 <InferenceHeatI2CCommand+0x2e4>)
 8002010:	6593      	str	r3, [r2, #88]	; 0x58
        in_data[23] = filteredValue[22];
 8002012:	4b3a      	ldr	r3, [pc, #232]	; (80020fc <InferenceHeatI2CCommand+0x2dc>)
 8002014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002016:	4a3b      	ldr	r2, [pc, #236]	; (8002104 <InferenceHeatI2CCommand+0x2e4>)
 8002018:	65d3      	str	r3, [r2, #92]	; 0x5c
        in_data[24] = filteredValue[23];
 800201a:	4b38      	ldr	r3, [pc, #224]	; (80020fc <InferenceHeatI2CCommand+0x2dc>)
 800201c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800201e:	4a39      	ldr	r2, [pc, #228]	; (8002104 <InferenceHeatI2CCommand+0x2e4>)
 8002020:	6613      	str	r3, [r2, #96]	; 0x60
        in_data[25] = filteredValue[12];
 8002022:	4b36      	ldr	r3, [pc, #216]	; (80020fc <InferenceHeatI2CCommand+0x2dc>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002026:	4a37      	ldr	r2, [pc, #220]	; (8002104 <InferenceHeatI2CCommand+0x2e4>)
 8002028:	6653      	str	r3, [r2, #100]	; 0x64
		#if NUM_SENSOR >= 36
        in_data[26] = filteredValue[24];
 800202a:	4b34      	ldr	r3, [pc, #208]	; (80020fc <InferenceHeatI2CCommand+0x2dc>)
 800202c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800202e:	4a35      	ldr	r2, [pc, #212]	; (8002104 <InferenceHeatI2CCommand+0x2e4>)
 8002030:	6693      	str	r3, [r2, #104]	; 0x68
        in_data[27] = filteredValue[25];
 8002032:	4b32      	ldr	r3, [pc, #200]	; (80020fc <InferenceHeatI2CCommand+0x2dc>)
 8002034:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002036:	4a33      	ldr	r2, [pc, #204]	; (8002104 <InferenceHeatI2CCommand+0x2e4>)
 8002038:	66d3      	str	r3, [r2, #108]	; 0x6c
        in_data[28] = filteredValue[26];
 800203a:	4b30      	ldr	r3, [pc, #192]	; (80020fc <InferenceHeatI2CCommand+0x2dc>)
 800203c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800203e:	4a31      	ldr	r2, [pc, #196]	; (8002104 <InferenceHeatI2CCommand+0x2e4>)
 8002040:	6713      	str	r3, [r2, #112]	; 0x70
        in_data[29] = filteredValue[27];
 8002042:	4b2e      	ldr	r3, [pc, #184]	; (80020fc <InferenceHeatI2CCommand+0x2dc>)
 8002044:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002046:	4a2f      	ldr	r2, [pc, #188]	; (8002104 <InferenceHeatI2CCommand+0x2e4>)
 8002048:	6753      	str	r3, [r2, #116]	; 0x74
        in_data[30] = filteredValue[28];
 800204a:	4b2c      	ldr	r3, [pc, #176]	; (80020fc <InferenceHeatI2CCommand+0x2dc>)
 800204c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800204e:	4a2d      	ldr	r2, [pc, #180]	; (8002104 <InferenceHeatI2CCommand+0x2e4>)
 8002050:	6793      	str	r3, [r2, #120]	; 0x78
        in_data[31] = filteredValue[29];
 8002052:	4b2a      	ldr	r3, [pc, #168]	; (80020fc <InferenceHeatI2CCommand+0x2dc>)
 8002054:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002056:	4a2b      	ldr	r2, [pc, #172]	; (8002104 <InferenceHeatI2CCommand+0x2e4>)
 8002058:	67d3      	str	r3, [r2, #124]	; 0x7c
        in_data[32] = filteredValue[30];
 800205a:	4b28      	ldr	r3, [pc, #160]	; (80020fc <InferenceHeatI2CCommand+0x2dc>)
 800205c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800205e:	4a29      	ldr	r2, [pc, #164]	; (8002104 <InferenceHeatI2CCommand+0x2e4>)
 8002060:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
        in_data[33] = filteredValue[31];
 8002064:	4b25      	ldr	r3, [pc, #148]	; (80020fc <InferenceHeatI2CCommand+0x2dc>)
 8002066:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002068:	4a26      	ldr	r2, [pc, #152]	; (8002104 <InferenceHeatI2CCommand+0x2e4>)
 800206a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
        in_data[34] = filteredValue[32];
 800206e:	4b23      	ldr	r3, [pc, #140]	; (80020fc <InferenceHeatI2CCommand+0x2dc>)
 8002070:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002074:	4a23      	ldr	r2, [pc, #140]	; (8002104 <InferenceHeatI2CCommand+0x2e4>)
 8002076:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
        in_data[35] = filteredValue[33];
 800207a:	4b20      	ldr	r3, [pc, #128]	; (80020fc <InferenceHeatI2CCommand+0x2dc>)
 800207c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002080:	4a20      	ldr	r2, [pc, #128]	; (8002104 <InferenceHeatI2CCommand+0x2e4>)
 8002082:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
        in_data[36] = filteredValue[34];
 8002086:	4b1d      	ldr	r3, [pc, #116]	; (80020fc <InferenceHeatI2CCommand+0x2dc>)
 8002088:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800208c:	4a1d      	ldr	r2, [pc, #116]	; (8002104 <InferenceHeatI2CCommand+0x2e4>)
 800208e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        in_data[37] = filteredValue[35];
 8002092:	4b1a      	ldr	r3, [pc, #104]	; (80020fc <InferenceHeatI2CCommand+0x2dc>)
 8002094:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002098:	4a1a      	ldr	r2, [pc, #104]	; (8002104 <InferenceHeatI2CCommand+0x2e4>)
 800209a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        in_data[38] = filteredValue[24];
 800209e:	4b17      	ldr	r3, [pc, #92]	; (80020fc <InferenceHeatI2CCommand+0x2dc>)
 80020a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020a2:	4a18      	ldr	r2, [pc, #96]	; (8002104 <InferenceHeatI2CCommand+0x2e4>)
 80020a4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
		#endif
		#if NUM_SENSOR >= 48
		in_data[39] = filteredValue[36];
 80020a8:	4b14      	ldr	r3, [pc, #80]	; (80020fc <InferenceHeatI2CCommand+0x2dc>)
 80020aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ae:	4a15      	ldr	r2, [pc, #84]	; (8002104 <InferenceHeatI2CCommand+0x2e4>)
 80020b0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		in_data[40] = filteredValue[37];
 80020b4:	4b11      	ldr	r3, [pc, #68]	; (80020fc <InferenceHeatI2CCommand+0x2dc>)
 80020b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020ba:	4a12      	ldr	r2, [pc, #72]	; (8002104 <InferenceHeatI2CCommand+0x2e4>)
 80020bc:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
		in_data[41] = filteredValue[38];
 80020c0:	4b0e      	ldr	r3, [pc, #56]	; (80020fc <InferenceHeatI2CCommand+0x2dc>)
 80020c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020c6:	4a0f      	ldr	r2, [pc, #60]	; (8002104 <InferenceHeatI2CCommand+0x2e4>)
 80020c8:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
		in_data[42] = filteredValue[39];
 80020cc:	4b0b      	ldr	r3, [pc, #44]	; (80020fc <InferenceHeatI2CCommand+0x2dc>)
 80020ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80020d2:	4a0c      	ldr	r2, [pc, #48]	; (8002104 <InferenceHeatI2CCommand+0x2e4>)
 80020d4:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
		in_data[43] = filteredValue[40];
 80020d8:	4b08      	ldr	r3, [pc, #32]	; (80020fc <InferenceHeatI2CCommand+0x2dc>)
 80020da:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80020de:	4a09      	ldr	r2, [pc, #36]	; (8002104 <InferenceHeatI2CCommand+0x2e4>)
 80020e0:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
 80020e4:	e010      	b.n	8002108 <InferenceHeatI2CCommand+0x2e8>
 80020e6:	bf00      	nop
 80020e8:	20007a5c 	.word	0x20007a5c
 80020ec:	2000c55c 	.word	0x2000c55c
 80020f0:	200078f0 	.word	0x200078f0
 80020f4:	20007058 	.word	0x20007058
 80020f8:	200072f0 	.word	0x200072f0
 80020fc:	200076b0 	.word	0x200076b0
 8002100:	20000238 	.word	0x20000238
 8002104:	20002460 	.word	0x20002460
		in_data[44] = filteredValue[41];
 8002108:	4b93      	ldr	r3, [pc, #588]	; (8002358 <InferenceHeatI2CCommand+0x538>)
 800210a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800210e:	4a93      	ldr	r2, [pc, #588]	; (800235c <InferenceHeatI2CCommand+0x53c>)
 8002110:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
		in_data[45] = filteredValue[42];
 8002114:	4b90      	ldr	r3, [pc, #576]	; (8002358 <InferenceHeatI2CCommand+0x538>)
 8002116:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800211a:	4a90      	ldr	r2, [pc, #576]	; (800235c <InferenceHeatI2CCommand+0x53c>)
 800211c:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
		in_data[46] = filteredValue[43];
 8002120:	4b8d      	ldr	r3, [pc, #564]	; (8002358 <InferenceHeatI2CCommand+0x538>)
 8002122:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002126:	4a8d      	ldr	r2, [pc, #564]	; (800235c <InferenceHeatI2CCommand+0x53c>)
 8002128:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
		in_data[47] = filteredValue[44];
 800212c:	4b8a      	ldr	r3, [pc, #552]	; (8002358 <InferenceHeatI2CCommand+0x538>)
 800212e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002132:	4a8a      	ldr	r2, [pc, #552]	; (800235c <InferenceHeatI2CCommand+0x53c>)
 8002134:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
		in_data[48] = filteredValue[45];
 8002138:	4b87      	ldr	r3, [pc, #540]	; (8002358 <InferenceHeatI2CCommand+0x538>)
 800213a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800213e:	4a87      	ldr	r2, [pc, #540]	; (800235c <InferenceHeatI2CCommand+0x53c>)
 8002140:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
		in_data[49] = filteredValue[46];
 8002144:	4b84      	ldr	r3, [pc, #528]	; (8002358 <InferenceHeatI2CCommand+0x538>)
 8002146:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800214a:	4a84      	ldr	r2, [pc, #528]	; (800235c <InferenceHeatI2CCommand+0x53c>)
 800214c:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
		in_data[50] = filteredValue[47];
 8002150:	4b81      	ldr	r3, [pc, #516]	; (8002358 <InferenceHeatI2CCommand+0x538>)
 8002152:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002156:	4a81      	ldr	r2, [pc, #516]	; (800235c <InferenceHeatI2CCommand+0x53c>)
 8002158:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
		in_data[51] = filteredValue[36];
 800215c:	4b7e      	ldr	r3, [pc, #504]	; (8002358 <InferenceHeatI2CCommand+0x538>)
 800215e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002162:	4a7e      	ldr	r2, [pc, #504]	; (800235c <InferenceHeatI2CCommand+0x53c>)
 8002164:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
		#endif

		if(tofCount == NUM_SENSOR){
 8002168:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800216c:	2b30      	cmp	r3, #48	; 0x30
 800216e:	f040 8151 	bne.w	8002414 <InferenceHeatI2CCommand+0x5f4>
	        for(int i=0; i<NUM_SENSOR;i++){HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.1f ", filteredValue[i]), 100);}
 8002172:	2300      	movs	r3, #0
 8002174:	623b      	str	r3, [r7, #32]
 8002176:	e017      	b.n	80021a8 <InferenceHeatI2CCommand+0x388>
 8002178:	4a77      	ldr	r2, [pc, #476]	; (8002358 <InferenceHeatI2CCommand+0x538>)
 800217a:	6a3b      	ldr	r3, [r7, #32]
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	4413      	add	r3, r2
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4618      	mov	r0, r3
 8002184:	f7fe fa10 	bl	80005a8 <__aeabi_f2d>
 8002188:	4602      	mov	r2, r0
 800218a:	460b      	mov	r3, r1
 800218c:	4974      	ldr	r1, [pc, #464]	; (8002360 <InferenceHeatI2CCommand+0x540>)
 800218e:	4875      	ldr	r0, [pc, #468]	; (8002364 <InferenceHeatI2CCommand+0x544>)
 8002190:	f011 f95c 	bl	801344c <siprintf>
 8002194:	4603      	mov	r3, r0
 8002196:	b29a      	uxth	r2, r3
 8002198:	2364      	movs	r3, #100	; 0x64
 800219a:	4972      	ldr	r1, [pc, #456]	; (8002364 <InferenceHeatI2CCommand+0x544>)
 800219c:	4872      	ldr	r0, [pc, #456]	; (8002368 <InferenceHeatI2CCommand+0x548>)
 800219e:	f006 fc23 	bl	80089e8 <HAL_UART_Transmit>
 80021a2:	6a3b      	ldr	r3, [r7, #32]
 80021a4:	3301      	adds	r3, #1
 80021a6:	623b      	str	r3, [r7, #32]
 80021a8:	6a3b      	ldr	r3, [r7, #32]
 80021aa:	2b2f      	cmp	r3, #47	; 0x2f
 80021ac:	dde4      	ble.n	8002178 <InferenceHeatI2CCommand+0x358>
	        int a =0;
 80021ae:	2300      	movs	r3, #0
 80021b0:	613b      	str	r3, [r7, #16]
			aiRun(in_data,out_data);
 80021b2:	496e      	ldr	r1, [pc, #440]	; (800236c <InferenceHeatI2CCommand+0x54c>)
 80021b4:	4869      	ldr	r0, [pc, #420]	; (800235c <InferenceHeatI2CCommand+0x53c>)
 80021b6:	f7fe ff8f 	bl	80010d8 <aiRun>
			float sqSum= out_data[2]*out_data[2] + out_data[3]*out_data[3];
 80021ba:	4b6c      	ldr	r3, [pc, #432]	; (800236c <InferenceHeatI2CCommand+0x54c>)
 80021bc:	ed93 7a02 	vldr	s14, [r3, #8]
 80021c0:	4b6a      	ldr	r3, [pc, #424]	; (800236c <InferenceHeatI2CCommand+0x54c>)
 80021c2:	edd3 7a02 	vldr	s15, [r3, #8]
 80021c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021ca:	4b68      	ldr	r3, [pc, #416]	; (800236c <InferenceHeatI2CCommand+0x54c>)
 80021cc:	edd3 6a03 	vldr	s13, [r3, #12]
 80021d0:	4b66      	ldr	r3, [pc, #408]	; (800236c <InferenceHeatI2CCommand+0x54c>)
 80021d2:	edd3 7a03 	vldr	s15, [r3, #12]
 80021d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021de:	edc7 7a03 	vstr	s15, [r7, #12]
			//float sqrange = 0.08;
		    uint32_t timestamp = HAL_GetTick();
 80021e2:	f002 f99d 	bl	8004520 <HAL_GetTick>
 80021e6:	60b8      	str	r0, [r7, #8]
			if(sqSum>=0.97){
 80021e8:	68f8      	ldr	r0, [r7, #12]
 80021ea:	f7fe f9dd 	bl	80005a8 <__aeabi_f2d>
 80021ee:	a358      	add	r3, pc, #352	; (adr r3, 8002350 <InferenceHeatI2CCommand+0x530>)
 80021f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021f4:	f7fe fcb6 	bl	8000b64 <__aeabi_dcmpge>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	f000 809f 	beq.w	800233e <InferenceHeatI2CCommand+0x51e>
				out_data[0] = (out_data[0] + 1) * (Fminmax[1] - Fminmax[0]) / 2 + Fminmax[0];
 8002200:	4b5a      	ldr	r3, [pc, #360]	; (800236c <InferenceHeatI2CCommand+0x54c>)
 8002202:	edd3 7a00 	vldr	s15, [r3]
 8002206:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800220a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800220e:	4b58      	ldr	r3, [pc, #352]	; (8002370 <InferenceHeatI2CCommand+0x550>)
 8002210:	edd3 6a01 	vldr	s13, [r3, #4]
 8002214:	4b56      	ldr	r3, [pc, #344]	; (8002370 <InferenceHeatI2CCommand+0x550>)
 8002216:	edd3 7a00 	vldr	s15, [r3]
 800221a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800221e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002222:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002226:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800222a:	4b51      	ldr	r3, [pc, #324]	; (8002370 <InferenceHeatI2CCommand+0x550>)
 800222c:	edd3 7a00 	vldr	s15, [r3]
 8002230:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002234:	4b4d      	ldr	r3, [pc, #308]	; (800236c <InferenceHeatI2CCommand+0x54c>)
 8002236:	edc3 7a00 	vstr	s15, [r3]
				out_data[1] = (out_data[1] + 1) * (Zminmax[1] - Zminmax[0]) / 2 + Zminmax[0];
 800223a:	4b4c      	ldr	r3, [pc, #304]	; (800236c <InferenceHeatI2CCommand+0x54c>)
 800223c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002240:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002244:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002248:	4b4a      	ldr	r3, [pc, #296]	; (8002374 <InferenceHeatI2CCommand+0x554>)
 800224a:	edd3 6a01 	vldr	s13, [r3, #4]
 800224e:	4b49      	ldr	r3, [pc, #292]	; (8002374 <InferenceHeatI2CCommand+0x554>)
 8002250:	edd3 7a00 	vldr	s15, [r3]
 8002254:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002258:	ee67 7a27 	vmul.f32	s15, s14, s15
 800225c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002260:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002264:	4b43      	ldr	r3, [pc, #268]	; (8002374 <InferenceHeatI2CCommand+0x554>)
 8002266:	edd3 7a00 	vldr	s15, [r3]
 800226a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800226e:	4b3f      	ldr	r3, [pc, #252]	; (800236c <InferenceHeatI2CCommand+0x54c>)
 8002270:	edc3 7a01 	vstr	s15, [r3, #4]
				if(out_data[1] >=144){out_data[1]=144;}
 8002274:	4b3d      	ldr	r3, [pc, #244]	; (800236c <InferenceHeatI2CCommand+0x54c>)
 8002276:	edd3 7a01 	vldr	s15, [r3, #4]
 800227a:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8002378 <InferenceHeatI2CCommand+0x558>
 800227e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002286:	db02      	blt.n	800228e <InferenceHeatI2CCommand+0x46e>
 8002288:	4b38      	ldr	r3, [pc, #224]	; (800236c <InferenceHeatI2CCommand+0x54c>)
 800228a:	4a3c      	ldr	r2, [pc, #240]	; (800237c <InferenceHeatI2CCommand+0x55c>)
 800228c:	605a      	str	r2, [r3, #4]
				if(out_data[1] <=16){out_data[1]=16;}
 800228e:	4b37      	ldr	r3, [pc, #220]	; (800236c <InferenceHeatI2CCommand+0x54c>)
 8002290:	edd3 7a01 	vldr	s15, [r3, #4]
 8002294:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8002298:	eef4 7ac7 	vcmpe.f32	s15, s14
 800229c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022a0:	d803      	bhi.n	80022aa <InferenceHeatI2CCommand+0x48a>
 80022a2:	4b32      	ldr	r3, [pc, #200]	; (800236c <InferenceHeatI2CCommand+0x54c>)
 80022a4:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 80022a8:	605a      	str	r2, [r3, #4]
				if(out_data[0]>=Fminmax[0]){
 80022aa:	4b30      	ldr	r3, [pc, #192]	; (800236c <InferenceHeatI2CCommand+0x54c>)
 80022ac:	ed93 7a00 	vldr	s14, [r3]
 80022b0:	4b2f      	ldr	r3, [pc, #188]	; (8002370 <InferenceHeatI2CCommand+0x550>)
 80022b2:	edd3 7a00 	vldr	s15, [r3]
 80022b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022be:	f2c0 80a9 	blt.w	8002414 <InferenceHeatI2CCommand+0x5f4>
					for(int k=0; k<4;k++){
 80022c2:	2300      	movs	r3, #0
 80022c4:	61fb      	str	r3, [r7, #28]
 80022c6:	e018      	b.n	80022fa <InferenceHeatI2CCommand+0x4da>
						HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", out_data[k]), 1000);
 80022c8:	4a28      	ldr	r2, [pc, #160]	; (800236c <InferenceHeatI2CCommand+0x54c>)
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	4413      	add	r3, r2
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7fe f968 	bl	80005a8 <__aeabi_f2d>
 80022d8:	4602      	mov	r2, r0
 80022da:	460b      	mov	r3, r1
 80022dc:	4928      	ldr	r1, [pc, #160]	; (8002380 <InferenceHeatI2CCommand+0x560>)
 80022de:	4821      	ldr	r0, [pc, #132]	; (8002364 <InferenceHeatI2CCommand+0x544>)
 80022e0:	f011 f8b4 	bl	801344c <siprintf>
 80022e4:	4603      	mov	r3, r0
 80022e6:	b29a      	uxth	r2, r3
 80022e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022ec:	491d      	ldr	r1, [pc, #116]	; (8002364 <InferenceHeatI2CCommand+0x544>)
 80022ee:	481e      	ldr	r0, [pc, #120]	; (8002368 <InferenceHeatI2CCommand+0x548>)
 80022f0:	f006 fb7a 	bl	80089e8 <HAL_UART_Transmit>
					for(int k=0; k<4;k++){
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	3301      	adds	r3, #1
 80022f8:	61fb      	str	r3, [r7, #28]
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	2b03      	cmp	r3, #3
 80022fe:	dde3      	ble.n	80022c8 <InferenceHeatI2CCommand+0x4a8>
					}
					HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", sqSum), 1000);
 8002300:	68f8      	ldr	r0, [r7, #12]
 8002302:	f7fe f951 	bl	80005a8 <__aeabi_f2d>
 8002306:	4602      	mov	r2, r0
 8002308:	460b      	mov	r3, r1
 800230a:	491d      	ldr	r1, [pc, #116]	; (8002380 <InferenceHeatI2CCommand+0x560>)
 800230c:	4815      	ldr	r0, [pc, #84]	; (8002364 <InferenceHeatI2CCommand+0x544>)
 800230e:	f011 f89d 	bl	801344c <siprintf>
 8002312:	4603      	mov	r3, r0
 8002314:	b29a      	uxth	r2, r3
 8002316:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800231a:	4912      	ldr	r1, [pc, #72]	; (8002364 <InferenceHeatI2CCommand+0x544>)
 800231c:	4812      	ldr	r0, [pc, #72]	; (8002368 <InferenceHeatI2CCommand+0x548>)
 800231e:	f006 fb63 	bl	80089e8 <HAL_UART_Transmit>
				    HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%lu ", timestamp), 1000);
 8002322:	68ba      	ldr	r2, [r7, #8]
 8002324:	4917      	ldr	r1, [pc, #92]	; (8002384 <InferenceHeatI2CCommand+0x564>)
 8002326:	480f      	ldr	r0, [pc, #60]	; (8002364 <InferenceHeatI2CCommand+0x544>)
 8002328:	f011 f890 	bl	801344c <siprintf>
 800232c:	4603      	mov	r3, r0
 800232e:	b29a      	uxth	r2, r3
 8002330:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002334:	490b      	ldr	r1, [pc, #44]	; (8002364 <InferenceHeatI2CCommand+0x544>)
 8002336:	480c      	ldr	r0, [pc, #48]	; (8002368 <InferenceHeatI2CCommand+0x548>)
 8002338:	f006 fb56 	bl	80089e8 <HAL_UART_Transmit>
 800233c:	e06a      	b.n	8002414 <InferenceHeatI2CCommand+0x5f4>
				    //HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "1"), 1000);
				}
			}else if(a==1){
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	2b01      	cmp	r3, #1
 8002342:	d167      	bne.n	8002414 <InferenceHeatI2CCommand+0x5f4>
				for(int k=0; k<4;k++){
 8002344:	2300      	movs	r3, #0
 8002346:	61bb      	str	r3, [r7, #24]
 8002348:	e037      	b.n	80023ba <InferenceHeatI2CCommand+0x59a>
 800234a:	bf00      	nop
 800234c:	f3af 8000 	nop.w
 8002350:	70a3d70a 	.word	0x70a3d70a
 8002354:	3fef0a3d 	.word	0x3fef0a3d
 8002358:	200076b0 	.word	0x200076b0
 800235c:	20002460 	.word	0x20002460
 8002360:	08018858 	.word	0x08018858
 8002364:	2000786c 	.word	0x2000786c
 8002368:	200077e4 	.word	0x200077e4
 800236c:	20002540 	.word	0x20002540
 8002370:	200002f8 	.word	0x200002f8
 8002374:	20000300 	.word	0x20000300
 8002378:	43100000 	.word	0x43100000
 800237c:	43100000 	.word	0x43100000
 8002380:	0801884c 	.word	0x0801884c
 8002384:	08018860 	.word	0x08018860
					HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", out_data[k]), 1000);
 8002388:	4a34      	ldr	r2, [pc, #208]	; (800245c <InferenceHeatI2CCommand+0x63c>)
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	4413      	add	r3, r2
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4618      	mov	r0, r3
 8002394:	f7fe f908 	bl	80005a8 <__aeabi_f2d>
 8002398:	4602      	mov	r2, r0
 800239a:	460b      	mov	r3, r1
 800239c:	4930      	ldr	r1, [pc, #192]	; (8002460 <InferenceHeatI2CCommand+0x640>)
 800239e:	4831      	ldr	r0, [pc, #196]	; (8002464 <InferenceHeatI2CCommand+0x644>)
 80023a0:	f011 f854 	bl	801344c <siprintf>
 80023a4:	4603      	mov	r3, r0
 80023a6:	b29a      	uxth	r2, r3
 80023a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023ac:	492d      	ldr	r1, [pc, #180]	; (8002464 <InferenceHeatI2CCommand+0x644>)
 80023ae:	482e      	ldr	r0, [pc, #184]	; (8002468 <InferenceHeatI2CCommand+0x648>)
 80023b0:	f006 fb1a 	bl	80089e8 <HAL_UART_Transmit>
				for(int k=0; k<4;k++){
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	3301      	adds	r3, #1
 80023b8:	61bb      	str	r3, [r7, #24]
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	2b03      	cmp	r3, #3
 80023be:	dde3      	ble.n	8002388 <InferenceHeatI2CCommand+0x568>
				}
				HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", sqSum), 1000);
 80023c0:	68f8      	ldr	r0, [r7, #12]
 80023c2:	f7fe f8f1 	bl	80005a8 <__aeabi_f2d>
 80023c6:	4602      	mov	r2, r0
 80023c8:	460b      	mov	r3, r1
 80023ca:	4925      	ldr	r1, [pc, #148]	; (8002460 <InferenceHeatI2CCommand+0x640>)
 80023cc:	4825      	ldr	r0, [pc, #148]	; (8002464 <InferenceHeatI2CCommand+0x644>)
 80023ce:	f011 f83d 	bl	801344c <siprintf>
 80023d2:	4603      	mov	r3, r0
 80023d4:	b29a      	uxth	r2, r3
 80023d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023da:	4922      	ldr	r1, [pc, #136]	; (8002464 <InferenceHeatI2CCommand+0x644>)
 80023dc:	4822      	ldr	r0, [pc, #136]	; (8002468 <InferenceHeatI2CCommand+0x648>)
 80023de:	f006 fb03 	bl	80089e8 <HAL_UART_Transmit>
			    HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%lu ", timestamp), 1000);
 80023e2:	68ba      	ldr	r2, [r7, #8]
 80023e4:	4921      	ldr	r1, [pc, #132]	; (800246c <InferenceHeatI2CCommand+0x64c>)
 80023e6:	481f      	ldr	r0, [pc, #124]	; (8002464 <InferenceHeatI2CCommand+0x644>)
 80023e8:	f011 f830 	bl	801344c <siprintf>
 80023ec:	4603      	mov	r3, r0
 80023ee:	b29a      	uxth	r2, r3
 80023f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023f4:	491b      	ldr	r1, [pc, #108]	; (8002464 <InferenceHeatI2CCommand+0x644>)
 80023f6:	481c      	ldr	r0, [pc, #112]	; (8002468 <InferenceHeatI2CCommand+0x648>)
 80023f8:	f006 faf6 	bl	80089e8 <HAL_UART_Transmit>
			    HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "0"), 1000);
 80023fc:	491c      	ldr	r1, [pc, #112]	; (8002470 <InferenceHeatI2CCommand+0x650>)
 80023fe:	4819      	ldr	r0, [pc, #100]	; (8002464 <InferenceHeatI2CCommand+0x644>)
 8002400:	f011 f824 	bl	801344c <siprintf>
 8002404:	4603      	mov	r3, r0
 8002406:	b29a      	uxth	r2, r3
 8002408:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800240c:	4915      	ldr	r1, [pc, #84]	; (8002464 <InferenceHeatI2CCommand+0x644>)
 800240e:	4816      	ldr	r0, [pc, #88]	; (8002468 <InferenceHeatI2CCommand+0x648>)
 8002410:	f006 faea 	bl	80089e8 <HAL_UART_Transmit>
			}
		}
		do{
			endTime = HAL_GetTick();
 8002414:	f002 f884 	bl	8004520 <HAL_GetTick>
 8002418:	6078      	str	r0, [r7, #4]
			diffTime = endTime - startTime;
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	603b      	str	r3, [r7, #0]
		}while (diffTime <= TIMBUDGET);
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	2b21      	cmp	r3, #33	; 0x21
 8002426:	d9f5      	bls.n	8002414 <InferenceHeatI2CCommand+0x5f4>
		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "\n"), 100);
 8002428:	4912      	ldr	r1, [pc, #72]	; (8002474 <InferenceHeatI2CCommand+0x654>)
 800242a:	480e      	ldr	r0, [pc, #56]	; (8002464 <InferenceHeatI2CCommand+0x644>)
 800242c:	f011 f80e 	bl	801344c <siprintf>
 8002430:	4603      	mov	r3, r0
 8002432:	b29a      	uxth	r2, r3
 8002434:	2364      	movs	r3, #100	; 0x64
 8002436:	490b      	ldr	r1, [pc, #44]	; (8002464 <InferenceHeatI2CCommand+0x644>)
 8002438:	480b      	ldr	r0, [pc, #44]	; (8002468 <InferenceHeatI2CCommand+0x648>)
 800243a:	f006 fad5 	bl	80089e8 <HAL_UART_Transmit>
    for (int count =0; count <50000;count ++){
 800243e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002440:	3301      	adds	r3, #1
 8002442:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002446:	f24c 324f 	movw	r2, #49999	; 0xc34f
 800244a:	4293      	cmp	r3, r2
 800244c:	f77f ad01 	ble.w	8001e52 <InferenceHeatI2CCommand+0x32>
    }
}
 8002450:	bf00      	nop
 8002452:	bf00      	nop
 8002454:	3730      	adds	r7, #48	; 0x30
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	20002540 	.word	0x20002540
 8002460:	0801884c 	.word	0x0801884c
 8002464:	2000786c 	.word	0x2000786c
 8002468:	200077e4 	.word	0x200077e4
 800246c:	08018860 	.word	0x08018860
 8002470:	08018868 	.word	0x08018868
 8002474:	08018854 	.word	0x08018854

08002478 <PointingVertical>:

void PointingVertical(){
 8002478:	b580      	push	{r7, lr}
 800247a:	b08e      	sub	sp, #56	; 0x38
 800247c:	af00      	add	r7, sp, #0

	SetI2CCommand();
 800247e:	f7ff f929 	bl	80016d4 <SetI2CCommand>
	SensorI2CCommand();
 8002482:	f7ff f879 	bl	8001578 <SensorI2CCommand>
	ResetAllDevices();
 8002486:	f001 ff25 	bl	80042d4 <ResetAllDevices>
	setOnAllDevices();
 800248a:	f001 ffa3 	bl	80043d4 <setOnAllDevices>


	for(int i = 0; i < 5; i++) {
 800248e:	2300      	movs	r3, #0
 8002490:	637b      	str	r3, [r7, #52]	; 0x34
 8002492:	e31a      	b.n	8002aca <PointingVertical+0x652>

	    uint32_t ServoStartTime = HAL_GetTick(); // 시작 시간 기록
 8002494:	f002 f844 	bl	8004520 <HAL_GetTick>
 8002498:	61f8      	str	r0, [r7, #28]
	        servo_angle(&htim2, TIM_CHANNEL_1, 10);
 800249a:	220a      	movs	r2, #10
 800249c:	2100      	movs	r1, #0
 800249e:	4808      	ldr	r0, [pc, #32]	; (80024c0 <PointingVertical+0x48>)
 80024a0:	f001 fbd4 	bl	8003c4c <servo_angle>
	        HAL_Delay(1000);
 80024a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024a8:	f002 f846 	bl	8004538 <HAL_Delay>
		    while(HAL_GetTick() - ServoStartTime < 7000) {
 80024ac:	e2ef      	b.n	8002a8e <PointingVertical+0x616>
	        uint32_t startTime, endTime, diffTime;
	        uint8_t tofCount =0;
 80024ae:	2300      	movs	r3, #0
 80024b0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			startTime = HAL_GetTick();
 80024b4:	f002 f834 	bl	8004520 <HAL_GetTick>
 80024b8:	61b8      	str	r0, [r7, #24]
			for (int i = 0; i < NUM_SENSOR; i++) {
 80024ba:	2300      	movs	r3, #0
 80024bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024be:	e073      	b.n	80025a8 <PointingVertical+0x130>
 80024c0:	20007794 	.word	0x20007794
				Dev = &vl53l0x_s[i];
 80024c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80024ca:	fb02 f303 	mul.w	r3, r2, r3
 80024ce:	4a9b      	ldr	r2, [pc, #620]	; (800273c <PointingVertical+0x2c4>)
 80024d0:	4413      	add	r3, r2
 80024d2:	4a9b      	ldr	r2, [pc, #620]	; (8002740 <PointingVertical+0x2c8>)
 80024d4:	6013      	str	r3, [r2, #0]
				VL53L0X_PerformContinuousRangingMeasurement(Dev, &RangingData); // 1500 uss
 80024d6:	4b9a      	ldr	r3, [pc, #616]	; (8002740 <PointingVertical+0x2c8>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	499a      	ldr	r1, [pc, #616]	; (8002744 <PointingVertical+0x2cc>)
 80024dc:	4618      	mov	r0, r3
 80024de:	f009 f867 	bl	800b5b0 <VL53L0X_PerformContinuousRangingMeasurement>
				if (RangingData.RangeStatus == 0) {
 80024e2:	4b98      	ldr	r3, [pc, #608]	; (8002744 <PointingVertical+0x2cc>)
 80024e4:	7e1b      	ldrb	r3, [r3, #24]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d15b      	bne.n	80025a2 <PointingVertical+0x12a>
				  if (RangingData.RangeMilliMeter < sensorAverages[i]+20) {
 80024ea:	4b96      	ldr	r3, [pc, #600]	; (8002744 <PointingVertical+0x2cc>)
 80024ec:	891b      	ldrh	r3, [r3, #8]
 80024ee:	ee07 3a90 	vmov	s15, r3
 80024f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024f6:	4a94      	ldr	r2, [pc, #592]	; (8002748 <PointingVertical+0x2d0>)
 80024f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	4413      	add	r3, r2
 80024fe:	edd3 7a00 	vldr	s15, [r3]
 8002502:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8002506:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800250a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800250e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002512:	d546      	bpl.n	80025a2 <PointingVertical+0x12a>
					filteredValue[i] = Kalman_Estimate(&filters[i], RangingData.RangeMilliMeter); // 500 us
 8002514:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002516:	4613      	mov	r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	4413      	add	r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	4a8b      	ldr	r2, [pc, #556]	; (800274c <PointingVertical+0x2d4>)
 8002520:	4413      	add	r3, r2
 8002522:	4a88      	ldr	r2, [pc, #544]	; (8002744 <PointingVertical+0x2cc>)
 8002524:	8912      	ldrh	r2, [r2, #8]
 8002526:	ee07 2a90 	vmov	s15, r2
 800252a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800252e:	eeb0 0a67 	vmov.f32	s0, s15
 8002532:	4618      	mov	r0, r3
 8002534:	f000 ffd0 	bl	80034d8 <Kalman_Estimate>
 8002538:	eef0 7a40 	vmov.f32	s15, s0
 800253c:	4a84      	ldr	r2, [pc, #528]	; (8002750 <PointingVertical+0x2d8>)
 800253e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	4413      	add	r3, r2
 8002544:	edc3 7a00 	vstr	s15, [r3]
					filteredValue[i] -= sensorAverages[i];
 8002548:	4a81      	ldr	r2, [pc, #516]	; (8002750 <PointingVertical+0x2d8>)
 800254a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	4413      	add	r3, r2
 8002550:	ed93 7a00 	vldr	s14, [r3]
 8002554:	4a7c      	ldr	r2, [pc, #496]	; (8002748 <PointingVertical+0x2d0>)
 8002556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	4413      	add	r3, r2
 800255c:	edd3 7a00 	vldr	s15, [r3]
 8002560:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002564:	4a7a      	ldr	r2, [pc, #488]	; (8002750 <PointingVertical+0x2d8>)
 8002566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	4413      	add	r3, r2
 800256c:	edc3 7a00 	vstr	s15, [r3]
					//filteredValue[i] -= Xmean[i];
					filteredValue[i] /= Xstd[i];
 8002570:	4a77      	ldr	r2, [pc, #476]	; (8002750 <PointingVertical+0x2d8>)
 8002572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	4413      	add	r3, r2
 8002578:	edd3 6a00 	vldr	s13, [r3]
 800257c:	4a75      	ldr	r2, [pc, #468]	; (8002754 <PointingVertical+0x2dc>)
 800257e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	4413      	add	r3, r2
 8002584:	ed93 7a00 	vldr	s14, [r3]
 8002588:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800258c:	4a70      	ldr	r2, [pc, #448]	; (8002750 <PointingVertical+0x2d8>)
 800258e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	4413      	add	r3, r2
 8002594:	edc3 7a00 	vstr	s15, [r3]
					tofCount++;
 8002598:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800259c:	3301      	adds	r3, #1
 800259e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			for (int i = 0; i < NUM_SENSOR; i++) {
 80025a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025a4:	3301      	adds	r3, #1
 80025a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025aa:	2b2f      	cmp	r3, #47	; 0x2f
 80025ac:	dd8a      	ble.n	80024c4 <PointingVertical+0x4c>
				  }
				}
			}

			in_data[0] = filteredValue[0];
 80025ae:	4b68      	ldr	r3, [pc, #416]	; (8002750 <PointingVertical+0x2d8>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a69      	ldr	r2, [pc, #420]	; (8002758 <PointingVertical+0x2e0>)
 80025b4:	6013      	str	r3, [r2, #0]
			in_data[1] = filteredValue[1];
 80025b6:	4b66      	ldr	r3, [pc, #408]	; (8002750 <PointingVertical+0x2d8>)
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	4a67      	ldr	r2, [pc, #412]	; (8002758 <PointingVertical+0x2e0>)
 80025bc:	6053      	str	r3, [r2, #4]
			in_data[2] = filteredValue[2];
 80025be:	4b64      	ldr	r3, [pc, #400]	; (8002750 <PointingVertical+0x2d8>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	4a65      	ldr	r2, [pc, #404]	; (8002758 <PointingVertical+0x2e0>)
 80025c4:	6093      	str	r3, [r2, #8]
			in_data[3] = filteredValue[3];
 80025c6:	4b62      	ldr	r3, [pc, #392]	; (8002750 <PointingVertical+0x2d8>)
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	4a63      	ldr	r2, [pc, #396]	; (8002758 <PointingVertical+0x2e0>)
 80025cc:	60d3      	str	r3, [r2, #12]
			in_data[4] = filteredValue[4];
 80025ce:	4b60      	ldr	r3, [pc, #384]	; (8002750 <PointingVertical+0x2d8>)
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	4a61      	ldr	r2, [pc, #388]	; (8002758 <PointingVertical+0x2e0>)
 80025d4:	6113      	str	r3, [r2, #16]
			in_data[5] = filteredValue[5];
 80025d6:	4b5e      	ldr	r3, [pc, #376]	; (8002750 <PointingVertical+0x2d8>)
 80025d8:	695b      	ldr	r3, [r3, #20]
 80025da:	4a5f      	ldr	r2, [pc, #380]	; (8002758 <PointingVertical+0x2e0>)
 80025dc:	6153      	str	r3, [r2, #20]
			in_data[6] = filteredValue[6];
 80025de:	4b5c      	ldr	r3, [pc, #368]	; (8002750 <PointingVertical+0x2d8>)
 80025e0:	699b      	ldr	r3, [r3, #24]
 80025e2:	4a5d      	ldr	r2, [pc, #372]	; (8002758 <PointingVertical+0x2e0>)
 80025e4:	6193      	str	r3, [r2, #24]
			in_data[7] = filteredValue[7];
 80025e6:	4b5a      	ldr	r3, [pc, #360]	; (8002750 <PointingVertical+0x2d8>)
 80025e8:	69db      	ldr	r3, [r3, #28]
 80025ea:	4a5b      	ldr	r2, [pc, #364]	; (8002758 <PointingVertical+0x2e0>)
 80025ec:	61d3      	str	r3, [r2, #28]
			in_data[8] = filteredValue[8];
 80025ee:	4b58      	ldr	r3, [pc, #352]	; (8002750 <PointingVertical+0x2d8>)
 80025f0:	6a1b      	ldr	r3, [r3, #32]
 80025f2:	4a59      	ldr	r2, [pc, #356]	; (8002758 <PointingVertical+0x2e0>)
 80025f4:	6213      	str	r3, [r2, #32]
			in_data[9] = filteredValue[9];
 80025f6:	4b56      	ldr	r3, [pc, #344]	; (8002750 <PointingVertical+0x2d8>)
 80025f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fa:	4a57      	ldr	r2, [pc, #348]	; (8002758 <PointingVertical+0x2e0>)
 80025fc:	6253      	str	r3, [r2, #36]	; 0x24
			in_data[10] = filteredValue[10];
 80025fe:	4b54      	ldr	r3, [pc, #336]	; (8002750 <PointingVertical+0x2d8>)
 8002600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002602:	4a55      	ldr	r2, [pc, #340]	; (8002758 <PointingVertical+0x2e0>)
 8002604:	6293      	str	r3, [r2, #40]	; 0x28
			in_data[11] = filteredValue[11];
 8002606:	4b52      	ldr	r3, [pc, #328]	; (8002750 <PointingVertical+0x2d8>)
 8002608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800260a:	4a53      	ldr	r2, [pc, #332]	; (8002758 <PointingVertical+0x2e0>)
 800260c:	62d3      	str	r3, [r2, #44]	; 0x2c
			in_data[12] = filteredValue[0];
 800260e:	4b50      	ldr	r3, [pc, #320]	; (8002750 <PointingVertical+0x2d8>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a51      	ldr	r2, [pc, #324]	; (8002758 <PointingVertical+0x2e0>)
 8002614:	6313      	str	r3, [r2, #48]	; 0x30

			in_data[13] = filteredValue[12];
 8002616:	4b4e      	ldr	r3, [pc, #312]	; (8002750 <PointingVertical+0x2d8>)
 8002618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261a:	4a4f      	ldr	r2, [pc, #316]	; (8002758 <PointingVertical+0x2e0>)
 800261c:	6353      	str	r3, [r2, #52]	; 0x34
			in_data[14] = filteredValue[13];
 800261e:	4b4c      	ldr	r3, [pc, #304]	; (8002750 <PointingVertical+0x2d8>)
 8002620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002622:	4a4d      	ldr	r2, [pc, #308]	; (8002758 <PointingVertical+0x2e0>)
 8002624:	6393      	str	r3, [r2, #56]	; 0x38
			in_data[15] = filteredValue[14];
 8002626:	4b4a      	ldr	r3, [pc, #296]	; (8002750 <PointingVertical+0x2d8>)
 8002628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800262a:	4a4b      	ldr	r2, [pc, #300]	; (8002758 <PointingVertical+0x2e0>)
 800262c:	63d3      	str	r3, [r2, #60]	; 0x3c
			in_data[16] = filteredValue[15];
 800262e:	4b48      	ldr	r3, [pc, #288]	; (8002750 <PointingVertical+0x2d8>)
 8002630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002632:	4a49      	ldr	r2, [pc, #292]	; (8002758 <PointingVertical+0x2e0>)
 8002634:	6413      	str	r3, [r2, #64]	; 0x40
			in_data[17] = filteredValue[16];
 8002636:	4b46      	ldr	r3, [pc, #280]	; (8002750 <PointingVertical+0x2d8>)
 8002638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263a:	4a47      	ldr	r2, [pc, #284]	; (8002758 <PointingVertical+0x2e0>)
 800263c:	6453      	str	r3, [r2, #68]	; 0x44
			in_data[18] = filteredValue[17];
 800263e:	4b44      	ldr	r3, [pc, #272]	; (8002750 <PointingVertical+0x2d8>)
 8002640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002642:	4a45      	ldr	r2, [pc, #276]	; (8002758 <PointingVertical+0x2e0>)
 8002644:	6493      	str	r3, [r2, #72]	; 0x48
			in_data[19] = filteredValue[18];
 8002646:	4b42      	ldr	r3, [pc, #264]	; (8002750 <PointingVertical+0x2d8>)
 8002648:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800264a:	4a43      	ldr	r2, [pc, #268]	; (8002758 <PointingVertical+0x2e0>)
 800264c:	64d3      	str	r3, [r2, #76]	; 0x4c
			in_data[20] = filteredValue[19];
 800264e:	4b40      	ldr	r3, [pc, #256]	; (8002750 <PointingVertical+0x2d8>)
 8002650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002652:	4a41      	ldr	r2, [pc, #260]	; (8002758 <PointingVertical+0x2e0>)
 8002654:	6513      	str	r3, [r2, #80]	; 0x50
			in_data[21] = filteredValue[20];
 8002656:	4b3e      	ldr	r3, [pc, #248]	; (8002750 <PointingVertical+0x2d8>)
 8002658:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800265a:	4a3f      	ldr	r2, [pc, #252]	; (8002758 <PointingVertical+0x2e0>)
 800265c:	6553      	str	r3, [r2, #84]	; 0x54
			in_data[22] = filteredValue[21];
 800265e:	4b3c      	ldr	r3, [pc, #240]	; (8002750 <PointingVertical+0x2d8>)
 8002660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002662:	4a3d      	ldr	r2, [pc, #244]	; (8002758 <PointingVertical+0x2e0>)
 8002664:	6593      	str	r3, [r2, #88]	; 0x58
			in_data[23] = filteredValue[22];
 8002666:	4b3a      	ldr	r3, [pc, #232]	; (8002750 <PointingVertical+0x2d8>)
 8002668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800266a:	4a3b      	ldr	r2, [pc, #236]	; (8002758 <PointingVertical+0x2e0>)
 800266c:	65d3      	str	r3, [r2, #92]	; 0x5c
			in_data[24] = filteredValue[23];
 800266e:	4b38      	ldr	r3, [pc, #224]	; (8002750 <PointingVertical+0x2d8>)
 8002670:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002672:	4a39      	ldr	r2, [pc, #228]	; (8002758 <PointingVertical+0x2e0>)
 8002674:	6613      	str	r3, [r2, #96]	; 0x60
			in_data[25] = filteredValue[12];
 8002676:	4b36      	ldr	r3, [pc, #216]	; (8002750 <PointingVertical+0x2d8>)
 8002678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267a:	4a37      	ldr	r2, [pc, #220]	; (8002758 <PointingVertical+0x2e0>)
 800267c:	6653      	str	r3, [r2, #100]	; 0x64
			#if NUM_SENSOR >= 36
			in_data[26] = filteredValue[24];
 800267e:	4b34      	ldr	r3, [pc, #208]	; (8002750 <PointingVertical+0x2d8>)
 8002680:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002682:	4a35      	ldr	r2, [pc, #212]	; (8002758 <PointingVertical+0x2e0>)
 8002684:	6693      	str	r3, [r2, #104]	; 0x68
			in_data[27] = filteredValue[25];
 8002686:	4b32      	ldr	r3, [pc, #200]	; (8002750 <PointingVertical+0x2d8>)
 8002688:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800268a:	4a33      	ldr	r2, [pc, #204]	; (8002758 <PointingVertical+0x2e0>)
 800268c:	66d3      	str	r3, [r2, #108]	; 0x6c
			in_data[28] = filteredValue[26];
 800268e:	4b30      	ldr	r3, [pc, #192]	; (8002750 <PointingVertical+0x2d8>)
 8002690:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002692:	4a31      	ldr	r2, [pc, #196]	; (8002758 <PointingVertical+0x2e0>)
 8002694:	6713      	str	r3, [r2, #112]	; 0x70
			in_data[29] = filteredValue[27];
 8002696:	4b2e      	ldr	r3, [pc, #184]	; (8002750 <PointingVertical+0x2d8>)
 8002698:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800269a:	4a2f      	ldr	r2, [pc, #188]	; (8002758 <PointingVertical+0x2e0>)
 800269c:	6753      	str	r3, [r2, #116]	; 0x74
			in_data[30] = filteredValue[28];
 800269e:	4b2c      	ldr	r3, [pc, #176]	; (8002750 <PointingVertical+0x2d8>)
 80026a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a2:	4a2d      	ldr	r2, [pc, #180]	; (8002758 <PointingVertical+0x2e0>)
 80026a4:	6793      	str	r3, [r2, #120]	; 0x78
			in_data[31] = filteredValue[29];
 80026a6:	4b2a      	ldr	r3, [pc, #168]	; (8002750 <PointingVertical+0x2d8>)
 80026a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026aa:	4a2b      	ldr	r2, [pc, #172]	; (8002758 <PointingVertical+0x2e0>)
 80026ac:	67d3      	str	r3, [r2, #124]	; 0x7c
			in_data[32] = filteredValue[30];
 80026ae:	4b28      	ldr	r3, [pc, #160]	; (8002750 <PointingVertical+0x2d8>)
 80026b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026b2:	4a29      	ldr	r2, [pc, #164]	; (8002758 <PointingVertical+0x2e0>)
 80026b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
			in_data[33] = filteredValue[31];
 80026b8:	4b25      	ldr	r3, [pc, #148]	; (8002750 <PointingVertical+0x2d8>)
 80026ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026bc:	4a26      	ldr	r2, [pc, #152]	; (8002758 <PointingVertical+0x2e0>)
 80026be:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
			in_data[34] = filteredValue[32];
 80026c2:	4b23      	ldr	r3, [pc, #140]	; (8002750 <PointingVertical+0x2d8>)
 80026c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026c8:	4a23      	ldr	r2, [pc, #140]	; (8002758 <PointingVertical+0x2e0>)
 80026ca:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
			in_data[35] = filteredValue[33];
 80026ce:	4b20      	ldr	r3, [pc, #128]	; (8002750 <PointingVertical+0x2d8>)
 80026d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026d4:	4a20      	ldr	r2, [pc, #128]	; (8002758 <PointingVertical+0x2e0>)
 80026d6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
			in_data[36] = filteredValue[34];
 80026da:	4b1d      	ldr	r3, [pc, #116]	; (8002750 <PointingVertical+0x2d8>)
 80026dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e0:	4a1d      	ldr	r2, [pc, #116]	; (8002758 <PointingVertical+0x2e0>)
 80026e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
			in_data[37] = filteredValue[35];
 80026e6:	4b1a      	ldr	r3, [pc, #104]	; (8002750 <PointingVertical+0x2d8>)
 80026e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026ec:	4a1a      	ldr	r2, [pc, #104]	; (8002758 <PointingVertical+0x2e0>)
 80026ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
			in_data[38] = filteredValue[24];
 80026f2:	4b17      	ldr	r3, [pc, #92]	; (8002750 <PointingVertical+0x2d8>)
 80026f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026f6:	4a18      	ldr	r2, [pc, #96]	; (8002758 <PointingVertical+0x2e0>)
 80026f8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
			#endif
			#if NUM_SENSOR >= 48
			in_data[39] = filteredValue[36];
 80026fc:	4b14      	ldr	r3, [pc, #80]	; (8002750 <PointingVertical+0x2d8>)
 80026fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002702:	4a15      	ldr	r2, [pc, #84]	; (8002758 <PointingVertical+0x2e0>)
 8002704:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
			in_data[40] = filteredValue[37];
 8002708:	4b11      	ldr	r3, [pc, #68]	; (8002750 <PointingVertical+0x2d8>)
 800270a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800270e:	4a12      	ldr	r2, [pc, #72]	; (8002758 <PointingVertical+0x2e0>)
 8002710:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
			in_data[41] = filteredValue[38];
 8002714:	4b0e      	ldr	r3, [pc, #56]	; (8002750 <PointingVertical+0x2d8>)
 8002716:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800271a:	4a0f      	ldr	r2, [pc, #60]	; (8002758 <PointingVertical+0x2e0>)
 800271c:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
			in_data[42] = filteredValue[39];
 8002720:	4b0b      	ldr	r3, [pc, #44]	; (8002750 <PointingVertical+0x2d8>)
 8002722:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002726:	4a0c      	ldr	r2, [pc, #48]	; (8002758 <PointingVertical+0x2e0>)
 8002728:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
			in_data[43] = filteredValue[40];
 800272c:	4b08      	ldr	r3, [pc, #32]	; (8002750 <PointingVertical+0x2d8>)
 800272e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002732:	4a09      	ldr	r2, [pc, #36]	; (8002758 <PointingVertical+0x2e0>)
 8002734:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
 8002738:	e010      	b.n	800275c <PointingVertical+0x2e4>
 800273a:	bf00      	nop
 800273c:	20007a5c 	.word	0x20007a5c
 8002740:	2000c55c 	.word	0x2000c55c
 8002744:	200078f0 	.word	0x200078f0
 8002748:	20007058 	.word	0x20007058
 800274c:	200072f0 	.word	0x200072f0
 8002750:	200076b0 	.word	0x200076b0
 8002754:	20000238 	.word	0x20000238
 8002758:	20002460 	.word	0x20002460
			in_data[44] = filteredValue[41];
 800275c:	4b92      	ldr	r3, [pc, #584]	; (80029a8 <PointingVertical+0x530>)
 800275e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002762:	4a92      	ldr	r2, [pc, #584]	; (80029ac <PointingVertical+0x534>)
 8002764:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
			in_data[45] = filteredValue[42];
 8002768:	4b8f      	ldr	r3, [pc, #572]	; (80029a8 <PointingVertical+0x530>)
 800276a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800276e:	4a8f      	ldr	r2, [pc, #572]	; (80029ac <PointingVertical+0x534>)
 8002770:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
			in_data[46] = filteredValue[43];
 8002774:	4b8c      	ldr	r3, [pc, #560]	; (80029a8 <PointingVertical+0x530>)
 8002776:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800277a:	4a8c      	ldr	r2, [pc, #560]	; (80029ac <PointingVertical+0x534>)
 800277c:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
			in_data[47] = filteredValue[44];
 8002780:	4b89      	ldr	r3, [pc, #548]	; (80029a8 <PointingVertical+0x530>)
 8002782:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002786:	4a89      	ldr	r2, [pc, #548]	; (80029ac <PointingVertical+0x534>)
 8002788:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
			in_data[48] = filteredValue[45];
 800278c:	4b86      	ldr	r3, [pc, #536]	; (80029a8 <PointingVertical+0x530>)
 800278e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002792:	4a86      	ldr	r2, [pc, #536]	; (80029ac <PointingVertical+0x534>)
 8002794:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
			in_data[49] = filteredValue[46];
 8002798:	4b83      	ldr	r3, [pc, #524]	; (80029a8 <PointingVertical+0x530>)
 800279a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800279e:	4a83      	ldr	r2, [pc, #524]	; (80029ac <PointingVertical+0x534>)
 80027a0:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
			in_data[50] = filteredValue[47];
 80027a4:	4b80      	ldr	r3, [pc, #512]	; (80029a8 <PointingVertical+0x530>)
 80027a6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80027aa:	4a80      	ldr	r2, [pc, #512]	; (80029ac <PointingVertical+0x534>)
 80027ac:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
			in_data[51] = filteredValue[36];
 80027b0:	4b7d      	ldr	r3, [pc, #500]	; (80029a8 <PointingVertical+0x530>)
 80027b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027b6:	4a7d      	ldr	r2, [pc, #500]	; (80029ac <PointingVertical+0x534>)
 80027b8:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
			#endif

			if(tofCount == NUM_SENSOR){
 80027bc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80027c0:	2b30      	cmp	r3, #48	; 0x30
 80027c2:	f040 814f 	bne.w	8002a64 <PointingVertical+0x5ec>
				for(int i=0; i<NUM_SENSOR;i++){HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.1f ", filteredValue[i]), 100);}
 80027c6:	2300      	movs	r3, #0
 80027c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80027ca:	e017      	b.n	80027fc <PointingVertical+0x384>
 80027cc:	4a76      	ldr	r2, [pc, #472]	; (80029a8 <PointingVertical+0x530>)
 80027ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	4413      	add	r3, r2
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7fd fee6 	bl	80005a8 <__aeabi_f2d>
 80027dc:	4602      	mov	r2, r0
 80027de:	460b      	mov	r3, r1
 80027e0:	4973      	ldr	r1, [pc, #460]	; (80029b0 <PointingVertical+0x538>)
 80027e2:	4874      	ldr	r0, [pc, #464]	; (80029b4 <PointingVertical+0x53c>)
 80027e4:	f010 fe32 	bl	801344c <siprintf>
 80027e8:	4603      	mov	r3, r0
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	2364      	movs	r3, #100	; 0x64
 80027ee:	4971      	ldr	r1, [pc, #452]	; (80029b4 <PointingVertical+0x53c>)
 80027f0:	4871      	ldr	r0, [pc, #452]	; (80029b8 <PointingVertical+0x540>)
 80027f2:	f006 f8f9 	bl	80089e8 <HAL_UART_Transmit>
 80027f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f8:	3301      	adds	r3, #1
 80027fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80027fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027fe:	2b2f      	cmp	r3, #47	; 0x2f
 8002800:	dde4      	ble.n	80027cc <PointingVertical+0x354>
				int a =0;
 8002802:	2300      	movs	r3, #0
 8002804:	617b      	str	r3, [r7, #20]
				aiRun(in_data,out_data);
 8002806:	496d      	ldr	r1, [pc, #436]	; (80029bc <PointingVertical+0x544>)
 8002808:	4868      	ldr	r0, [pc, #416]	; (80029ac <PointingVertical+0x534>)
 800280a:	f7fe fc65 	bl	80010d8 <aiRun>
				float sqSum= out_data[2]*out_data[2] + out_data[3]*out_data[3];
 800280e:	4b6b      	ldr	r3, [pc, #428]	; (80029bc <PointingVertical+0x544>)
 8002810:	ed93 7a02 	vldr	s14, [r3, #8]
 8002814:	4b69      	ldr	r3, [pc, #420]	; (80029bc <PointingVertical+0x544>)
 8002816:	edd3 7a02 	vldr	s15, [r3, #8]
 800281a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800281e:	4b67      	ldr	r3, [pc, #412]	; (80029bc <PointingVertical+0x544>)
 8002820:	edd3 6a03 	vldr	s13, [r3, #12]
 8002824:	4b65      	ldr	r3, [pc, #404]	; (80029bc <PointingVertical+0x544>)
 8002826:	edd3 7a03 	vldr	s15, [r3, #12]
 800282a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800282e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002832:	edc7 7a04 	vstr	s15, [r7, #16]
				//float sqrange = 0.08;
				uint32_t timestamp = HAL_GetTick();
 8002836:	f001 fe73 	bl	8004520 <HAL_GetTick>
 800283a:	60f8      	str	r0, [r7, #12]
				if(sqSum>=0.97){
 800283c:	6938      	ldr	r0, [r7, #16]
 800283e:	f7fd feb3 	bl	80005a8 <__aeabi_f2d>
 8002842:	a357      	add	r3, pc, #348	; (adr r3, 80029a0 <PointingVertical+0x528>)
 8002844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002848:	f7fe f98c 	bl	8000b64 <__aeabi_dcmpge>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	f000 809f 	beq.w	8002992 <PointingVertical+0x51a>
					out_data[0] = (out_data[0] + 1) * (Fminmax[1] - Fminmax[0]) / 2 + Fminmax[0];
 8002854:	4b59      	ldr	r3, [pc, #356]	; (80029bc <PointingVertical+0x544>)
 8002856:	edd3 7a00 	vldr	s15, [r3]
 800285a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800285e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002862:	4b57      	ldr	r3, [pc, #348]	; (80029c0 <PointingVertical+0x548>)
 8002864:	edd3 6a01 	vldr	s13, [r3, #4]
 8002868:	4b55      	ldr	r3, [pc, #340]	; (80029c0 <PointingVertical+0x548>)
 800286a:	edd3 7a00 	vldr	s15, [r3]
 800286e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002872:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002876:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800287a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800287e:	4b50      	ldr	r3, [pc, #320]	; (80029c0 <PointingVertical+0x548>)
 8002880:	edd3 7a00 	vldr	s15, [r3]
 8002884:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002888:	4b4c      	ldr	r3, [pc, #304]	; (80029bc <PointingVertical+0x544>)
 800288a:	edc3 7a00 	vstr	s15, [r3]
					out_data[1] = (out_data[1] + 1) * (Zminmax[1] - Zminmax[0]) / 2 + Zminmax[0];
 800288e:	4b4b      	ldr	r3, [pc, #300]	; (80029bc <PointingVertical+0x544>)
 8002890:	edd3 7a01 	vldr	s15, [r3, #4]
 8002894:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002898:	ee37 7a87 	vadd.f32	s14, s15, s14
 800289c:	4b49      	ldr	r3, [pc, #292]	; (80029c4 <PointingVertical+0x54c>)
 800289e:	edd3 6a01 	vldr	s13, [r3, #4]
 80028a2:	4b48      	ldr	r3, [pc, #288]	; (80029c4 <PointingVertical+0x54c>)
 80028a4:	edd3 7a00 	vldr	s15, [r3]
 80028a8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80028ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028b0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80028b4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80028b8:	4b42      	ldr	r3, [pc, #264]	; (80029c4 <PointingVertical+0x54c>)
 80028ba:	edd3 7a00 	vldr	s15, [r3]
 80028be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028c2:	4b3e      	ldr	r3, [pc, #248]	; (80029bc <PointingVertical+0x544>)
 80028c4:	edc3 7a01 	vstr	s15, [r3, #4]
					if(out_data[1] >=144){out_data[1]=144;}
 80028c8:	4b3c      	ldr	r3, [pc, #240]	; (80029bc <PointingVertical+0x544>)
 80028ca:	edd3 7a01 	vldr	s15, [r3, #4]
 80028ce:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80029c8 <PointingVertical+0x550>
 80028d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028da:	db02      	blt.n	80028e2 <PointingVertical+0x46a>
 80028dc:	4b37      	ldr	r3, [pc, #220]	; (80029bc <PointingVertical+0x544>)
 80028de:	4a3b      	ldr	r2, [pc, #236]	; (80029cc <PointingVertical+0x554>)
 80028e0:	605a      	str	r2, [r3, #4]
					if(out_data[1] <=16){out_data[1]=16;}
 80028e2:	4b36      	ldr	r3, [pc, #216]	; (80029bc <PointingVertical+0x544>)
 80028e4:	edd3 7a01 	vldr	s15, [r3, #4]
 80028e8:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80028ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028f4:	d803      	bhi.n	80028fe <PointingVertical+0x486>
 80028f6:	4b31      	ldr	r3, [pc, #196]	; (80029bc <PointingVertical+0x544>)
 80028f8:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 80028fc:	605a      	str	r2, [r3, #4]
					if(out_data[0]>=Fminmax[0]){
 80028fe:	4b2f      	ldr	r3, [pc, #188]	; (80029bc <PointingVertical+0x544>)
 8002900:	ed93 7a00 	vldr	s14, [r3]
 8002904:	4b2e      	ldr	r3, [pc, #184]	; (80029c0 <PointingVertical+0x548>)
 8002906:	edd3 7a00 	vldr	s15, [r3]
 800290a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800290e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002912:	f2c0 80a7 	blt.w	8002a64 <PointingVertical+0x5ec>
						for(int k=0; k<4;k++){
 8002916:	2300      	movs	r3, #0
 8002918:	627b      	str	r3, [r7, #36]	; 0x24
 800291a:	e018      	b.n	800294e <PointingVertical+0x4d6>
							HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", out_data[k]), 1000);
 800291c:	4a27      	ldr	r2, [pc, #156]	; (80029bc <PointingVertical+0x544>)
 800291e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	4413      	add	r3, r2
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4618      	mov	r0, r3
 8002928:	f7fd fe3e 	bl	80005a8 <__aeabi_f2d>
 800292c:	4602      	mov	r2, r0
 800292e:	460b      	mov	r3, r1
 8002930:	4927      	ldr	r1, [pc, #156]	; (80029d0 <PointingVertical+0x558>)
 8002932:	4820      	ldr	r0, [pc, #128]	; (80029b4 <PointingVertical+0x53c>)
 8002934:	f010 fd8a 	bl	801344c <siprintf>
 8002938:	4603      	mov	r3, r0
 800293a:	b29a      	uxth	r2, r3
 800293c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002940:	491c      	ldr	r1, [pc, #112]	; (80029b4 <PointingVertical+0x53c>)
 8002942:	481d      	ldr	r0, [pc, #116]	; (80029b8 <PointingVertical+0x540>)
 8002944:	f006 f850 	bl	80089e8 <HAL_UART_Transmit>
						for(int k=0; k<4;k++){
 8002948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294a:	3301      	adds	r3, #1
 800294c:	627b      	str	r3, [r7, #36]	; 0x24
 800294e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002950:	2b03      	cmp	r3, #3
 8002952:	dde3      	ble.n	800291c <PointingVertical+0x4a4>
						}
						HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", sqSum), 1000);
 8002954:	6938      	ldr	r0, [r7, #16]
 8002956:	f7fd fe27 	bl	80005a8 <__aeabi_f2d>
 800295a:	4602      	mov	r2, r0
 800295c:	460b      	mov	r3, r1
 800295e:	491c      	ldr	r1, [pc, #112]	; (80029d0 <PointingVertical+0x558>)
 8002960:	4814      	ldr	r0, [pc, #80]	; (80029b4 <PointingVertical+0x53c>)
 8002962:	f010 fd73 	bl	801344c <siprintf>
 8002966:	4603      	mov	r3, r0
 8002968:	b29a      	uxth	r2, r3
 800296a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800296e:	4911      	ldr	r1, [pc, #68]	; (80029b4 <PointingVertical+0x53c>)
 8002970:	4811      	ldr	r0, [pc, #68]	; (80029b8 <PointingVertical+0x540>)
 8002972:	f006 f839 	bl	80089e8 <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%lu ", timestamp), 1000);
 8002976:	68fa      	ldr	r2, [r7, #12]
 8002978:	4916      	ldr	r1, [pc, #88]	; (80029d4 <PointingVertical+0x55c>)
 800297a:	480e      	ldr	r0, [pc, #56]	; (80029b4 <PointingVertical+0x53c>)
 800297c:	f010 fd66 	bl	801344c <siprintf>
 8002980:	4603      	mov	r3, r0
 8002982:	b29a      	uxth	r2, r3
 8002984:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002988:	490a      	ldr	r1, [pc, #40]	; (80029b4 <PointingVertical+0x53c>)
 800298a:	480b      	ldr	r0, [pc, #44]	; (80029b8 <PointingVertical+0x540>)
 800298c:	f006 f82c 	bl	80089e8 <HAL_UART_Transmit>
 8002990:	e068      	b.n	8002a64 <PointingVertical+0x5ec>
						//HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "1"), 1000);
					}
				}else if(a==1){
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	2b01      	cmp	r3, #1
 8002996:	d165      	bne.n	8002a64 <PointingVertical+0x5ec>
					for(int k=0; k<4;k++){
 8002998:	2300      	movs	r3, #0
 800299a:	623b      	str	r3, [r7, #32]
 800299c:	e035      	b.n	8002a0a <PointingVertical+0x592>
 800299e:	bf00      	nop
 80029a0:	70a3d70a 	.word	0x70a3d70a
 80029a4:	3fef0a3d 	.word	0x3fef0a3d
 80029a8:	200076b0 	.word	0x200076b0
 80029ac:	20002460 	.word	0x20002460
 80029b0:	08018858 	.word	0x08018858
 80029b4:	2000786c 	.word	0x2000786c
 80029b8:	200077e4 	.word	0x200077e4
 80029bc:	20002540 	.word	0x20002540
 80029c0:	200002f8 	.word	0x200002f8
 80029c4:	20000300 	.word	0x20000300
 80029c8:	43100000 	.word	0x43100000
 80029cc:	43100000 	.word	0x43100000
 80029d0:	0801884c 	.word	0x0801884c
 80029d4:	08018860 	.word	0x08018860
						HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", out_data[k]), 1000);
 80029d8:	4a40      	ldr	r2, [pc, #256]	; (8002adc <PointingVertical+0x664>)
 80029da:	6a3b      	ldr	r3, [r7, #32]
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	4413      	add	r3, r2
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7fd fde0 	bl	80005a8 <__aeabi_f2d>
 80029e8:	4602      	mov	r2, r0
 80029ea:	460b      	mov	r3, r1
 80029ec:	493c      	ldr	r1, [pc, #240]	; (8002ae0 <PointingVertical+0x668>)
 80029ee:	483d      	ldr	r0, [pc, #244]	; (8002ae4 <PointingVertical+0x66c>)
 80029f0:	f010 fd2c 	bl	801344c <siprintf>
 80029f4:	4603      	mov	r3, r0
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029fc:	4939      	ldr	r1, [pc, #228]	; (8002ae4 <PointingVertical+0x66c>)
 80029fe:	483a      	ldr	r0, [pc, #232]	; (8002ae8 <PointingVertical+0x670>)
 8002a00:	f005 fff2 	bl	80089e8 <HAL_UART_Transmit>
					for(int k=0; k<4;k++){
 8002a04:	6a3b      	ldr	r3, [r7, #32]
 8002a06:	3301      	adds	r3, #1
 8002a08:	623b      	str	r3, [r7, #32]
 8002a0a:	6a3b      	ldr	r3, [r7, #32]
 8002a0c:	2b03      	cmp	r3, #3
 8002a0e:	dde3      	ble.n	80029d8 <PointingVertical+0x560>
					}
					HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", sqSum), 1000);
 8002a10:	6938      	ldr	r0, [r7, #16]
 8002a12:	f7fd fdc9 	bl	80005a8 <__aeabi_f2d>
 8002a16:	4602      	mov	r2, r0
 8002a18:	460b      	mov	r3, r1
 8002a1a:	4931      	ldr	r1, [pc, #196]	; (8002ae0 <PointingVertical+0x668>)
 8002a1c:	4831      	ldr	r0, [pc, #196]	; (8002ae4 <PointingVertical+0x66c>)
 8002a1e:	f010 fd15 	bl	801344c <siprintf>
 8002a22:	4603      	mov	r3, r0
 8002a24:	b29a      	uxth	r2, r3
 8002a26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a2a:	492e      	ldr	r1, [pc, #184]	; (8002ae4 <PointingVertical+0x66c>)
 8002a2c:	482e      	ldr	r0, [pc, #184]	; (8002ae8 <PointingVertical+0x670>)
 8002a2e:	f005 ffdb 	bl	80089e8 <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%lu ", timestamp), 1000);
 8002a32:	68fa      	ldr	r2, [r7, #12]
 8002a34:	492d      	ldr	r1, [pc, #180]	; (8002aec <PointingVertical+0x674>)
 8002a36:	482b      	ldr	r0, [pc, #172]	; (8002ae4 <PointingVertical+0x66c>)
 8002a38:	f010 fd08 	bl	801344c <siprintf>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	b29a      	uxth	r2, r3
 8002a40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a44:	4927      	ldr	r1, [pc, #156]	; (8002ae4 <PointingVertical+0x66c>)
 8002a46:	4828      	ldr	r0, [pc, #160]	; (8002ae8 <PointingVertical+0x670>)
 8002a48:	f005 ffce 	bl	80089e8 <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "0"), 1000);
 8002a4c:	4928      	ldr	r1, [pc, #160]	; (8002af0 <PointingVertical+0x678>)
 8002a4e:	4825      	ldr	r0, [pc, #148]	; (8002ae4 <PointingVertical+0x66c>)
 8002a50:	f010 fcfc 	bl	801344c <siprintf>
 8002a54:	4603      	mov	r3, r0
 8002a56:	b29a      	uxth	r2, r3
 8002a58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a5c:	4921      	ldr	r1, [pc, #132]	; (8002ae4 <PointingVertical+0x66c>)
 8002a5e:	4822      	ldr	r0, [pc, #136]	; (8002ae8 <PointingVertical+0x670>)
 8002a60:	f005 ffc2 	bl	80089e8 <HAL_UART_Transmit>
				}
			}
			do{
				endTime = HAL_GetTick();
 8002a64:	f001 fd5c 	bl	8004520 <HAL_GetTick>
 8002a68:	60b8      	str	r0, [r7, #8]
				diffTime = endTime - startTime;
 8002a6a:	68ba      	ldr	r2, [r7, #8]
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	607b      	str	r3, [r7, #4]
			}while (diffTime <= TIMBUDGET);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2b21      	cmp	r3, #33	; 0x21
 8002a76:	d9f5      	bls.n	8002a64 <PointingVertical+0x5ec>
			HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "\n"), 100);
 8002a78:	491e      	ldr	r1, [pc, #120]	; (8002af4 <PointingVertical+0x67c>)
 8002a7a:	481a      	ldr	r0, [pc, #104]	; (8002ae4 <PointingVertical+0x66c>)
 8002a7c:	f010 fce6 	bl	801344c <siprintf>
 8002a80:	4603      	mov	r3, r0
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	2364      	movs	r3, #100	; 0x64
 8002a86:	4917      	ldr	r1, [pc, #92]	; (8002ae4 <PointingVertical+0x66c>)
 8002a88:	4817      	ldr	r0, [pc, #92]	; (8002ae8 <PointingVertical+0x670>)
 8002a8a:	f005 ffad 	bl	80089e8 <HAL_UART_Transmit>
		    while(HAL_GetTick() - ServoStartTime < 7000) {
 8002a8e:	f001 fd47 	bl	8004520 <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	f641 3257 	movw	r2, #6999	; 0x1b57
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	f67f ad06 	bls.w	80024ae <PointingVertical+0x36>
	    }
	    HAL_Delay(1000);
 8002aa2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002aa6:	f001 fd47 	bl	8004538 <HAL_Delay>

		servo_angle(&htim2, TIM_CHANNEL_1, 0);
 8002aaa:	2200      	movs	r2, #0
 8002aac:	2100      	movs	r1, #0
 8002aae:	4812      	ldr	r0, [pc, #72]	; (8002af8 <PointingVertical+0x680>)
 8002ab0:	f001 f8cc 	bl	8003c4c <servo_angle>
		HAL_Delay(1000);
 8002ab4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ab8:	f001 fd3e 	bl	8004538 <HAL_Delay>
	    stepLin(-25);
 8002abc:	f06f 0018 	mvn.w	r0, #24
 8002ac0:	f001 f868 	bl	8003b94 <stepLin>
	for(int i = 0; i < 5; i++) {
 8002ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	637b      	str	r3, [r7, #52]	; 0x34
 8002aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002acc:	2b04      	cmp	r3, #4
 8002ace:	f77f ace1 	ble.w	8002494 <PointingVertical+0x1c>
	}
	//stepLin(130);

	// 30 55 80 110 130
}
 8002ad2:	bf00      	nop
 8002ad4:	bf00      	nop
 8002ad6:	3738      	adds	r7, #56	; 0x38
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	20002540 	.word	0x20002540
 8002ae0:	0801884c 	.word	0x0801884c
 8002ae4:	2000786c 	.word	0x2000786c
 8002ae8:	200077e4 	.word	0x200077e4
 8002aec:	08018860 	.word	0x08018860
 8002af0:	08018868 	.word	0x08018868
 8002af4:	08018854 	.word	0x08018854
 8002af8:	20007794 	.word	0x20007794

08002afc <PointingRadial>:

void PointingRadial(){
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
	for(int i = 0; i < 7; i++) {
 8002b02:	2300      	movs	r3, #0
 8002b04:	607b      	str	r3, [r7, #4]
 8002b06:	e017      	b.n	8002b38 <PointingRadial+0x3c>
		servo_angle(&htim2, TIM_CHANNEL_1, 12); // poking 8
 8002b08:	220c      	movs	r2, #12
 8002b0a:	2100      	movs	r1, #0
 8002b0c:	480e      	ldr	r0, [pc, #56]	; (8002b48 <PointingRadial+0x4c>)
 8002b0e:	f001 f89d 	bl	8003c4c <servo_angle>
		HAL_Delay(5000);
 8002b12:	f241 3088 	movw	r0, #5000	; 0x1388
 8002b16:	f001 fd0f 	bl	8004538 <HAL_Delay>
		servo_angle(&htim2, TIM_CHANNEL_1, 0); // poking 8
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	2100      	movs	r1, #0
 8002b1e:	480a      	ldr	r0, [pc, #40]	; (8002b48 <PointingRadial+0x4c>)
 8002b20:	f001 f894 	bl	8003c4c <servo_angle>
	    stepRev(15);
 8002b24:	200f      	movs	r0, #15
 8002b26:	f000 ffcd 	bl	8003ac4 <stepRev>
		HAL_Delay(5000);
 8002b2a:	f241 3088 	movw	r0, #5000	; 0x1388
 8002b2e:	f001 fd03 	bl	8004538 <HAL_Delay>
	for(int i = 0; i < 7; i++) {
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	3301      	adds	r3, #1
 8002b36:	607b      	str	r3, [r7, #4]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2b06      	cmp	r3, #6
 8002b3c:	dde4      	ble.n	8002b08 <PointingRadial+0xc>
	}

	// 0 15 30 45 60 75 90
}
 8002b3e:	bf00      	nop
 8002b40:	bf00      	nop
 8002b42:	3708      	adds	r7, #8
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	20007794 	.word	0x20007794

08002b4c <InitializaionCalibrationCommand>:
void InitializaionCalibrationCommand()
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b086      	sub	sp, #24
 8002b50:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "InitializationCommand\n\r"), 100);
 8002b52:	49b2      	ldr	r1, [pc, #712]	; (8002e1c <InitializaionCalibrationCommand+0x2d0>)
 8002b54:	48b2      	ldr	r0, [pc, #712]	; (8002e20 <InitializaionCalibrationCommand+0x2d4>)
 8002b56:	f010 fc79 	bl	801344c <siprintf>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	b29a      	uxth	r2, r3
 8002b5e:	2364      	movs	r3, #100	; 0x64
 8002b60:	49af      	ldr	r1, [pc, #700]	; (8002e20 <InitializaionCalibrationCommand+0x2d4>)
 8002b62:	48b0      	ldr	r0, [pc, #704]	; (8002e24 <InitializaionCalibrationCommand+0x2d8>)
 8002b64:	f005 ff40 	bl	80089e8 <HAL_UART_Transmit>

	ResetAllDevices();
 8002b68:	f001 fbb4 	bl	80042d4 <ResetAllDevices>
  	for (int i = 0; i < NUM_SENSOR; i++) {
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	617b      	str	r3, [r7, #20]
 8002b70:	e10a      	b.n	8002d88 <InitializaionCalibrationCommand+0x23c>
  	    uint8_t q = i / 12;
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	4aac      	ldr	r2, [pc, #688]	; (8002e28 <InitializaionCalibrationCommand+0x2dc>)
 8002b76:	fb82 1203 	smull	r1, r2, r2, r3
 8002b7a:	1052      	asrs	r2, r2, #1
 8002b7c:	17db      	asrs	r3, r3, #31
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	70fb      	strb	r3, [r7, #3]
  	    uint8_t r = i % 12;
 8002b82:	697a      	ldr	r2, [r7, #20]
 8002b84:	4ba8      	ldr	r3, [pc, #672]	; (8002e28 <InitializaionCalibrationCommand+0x2dc>)
 8002b86:	fb83 1302 	smull	r1, r3, r3, r2
 8002b8a:	1059      	asrs	r1, r3, #1
 8002b8c:	17d3      	asrs	r3, r2, #31
 8002b8e:	1ac9      	subs	r1, r1, r3
 8002b90:	460b      	mov	r3, r1
 8002b92:	005b      	lsls	r3, r3, #1
 8002b94:	440b      	add	r3, r1
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	1ad1      	subs	r1, r2, r3
 8002b9a:	460b      	mov	r3, r1
 8002b9c:	70bb      	strb	r3, [r7, #2]
  	    uint8_t active_device = q * 2 + (r >= 8 ? 1 : 0);
 8002b9e:	78fb      	ldrb	r3, [r7, #3]
 8002ba0:	005b      	lsls	r3, r3, #1
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	78ba      	ldrb	r2, [r7, #2]
 8002ba6:	2a07      	cmp	r2, #7
 8002ba8:	bf8c      	ite	hi
 8002baa:	2201      	movhi	r2, #1
 8002bac:	2200      	movls	r2, #0
 8002bae:	b2d2      	uxtb	r2, r2
 8002bb0:	4413      	add	r3, r2
 8002bb2:	707b      	strb	r3, [r7, #1]
  	    uint8_t channel = (r >= 8) ? r - 8 : r;
 8002bb4:	78bb      	ldrb	r3, [r7, #2]
 8002bb6:	2b07      	cmp	r3, #7
 8002bb8:	d903      	bls.n	8002bc2 <InitializaionCalibrationCommand+0x76>
 8002bba:	78bb      	ldrb	r3, [r7, #2]
 8002bbc:	3b08      	subs	r3, #8
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	e000      	b.n	8002bc4 <InitializaionCalibrationCommand+0x78>
 8002bc2:	78bb      	ldrb	r3, [r7, #2]
 8002bc4:	703b      	strb	r3, [r7, #0]

        ResetDevicesExcept(active_device);
 8002bc6:	787b      	ldrb	r3, [r7, #1]
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f001 fbaf 	bl	800432c <ResetDevicesExcept>
        setActiveTcaChannel(active_device,channel);
 8002bce:	783a      	ldrb	r2, [r7, #0]
 8002bd0:	787b      	ldrb	r3, [r7, #1]
 8002bd2:	4611      	mov	r1, r2
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f001 fbdb 	bl	8004390 <setActiveTcaChannel>

  		Dev = &vl53l0x_s[i];
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002be0:	fb02 f303 	mul.w	r3, r2, r3
 8002be4:	4a91      	ldr	r2, [pc, #580]	; (8002e2c <InitializaionCalibrationCommand+0x2e0>)
 8002be6:	4413      	add	r3, r2
 8002be8:	4a91      	ldr	r2, [pc, #580]	; (8002e30 <InitializaionCalibrationCommand+0x2e4>)
 8002bea:	6013      	str	r3, [r2, #0]
  		Dev->I2cHandle = &hi2c1;
 8002bec:	4b90      	ldr	r3, [pc, #576]	; (8002e30 <InitializaionCalibrationCommand+0x2e4>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a90      	ldr	r2, [pc, #576]	; (8002e34 <InitializaionCalibrationCommand+0x2e8>)
 8002bf2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  		Dev->I2cDevAddr = VL53L0X_ADDR;
 8002bf6:	4b8e      	ldr	r3, [pc, #568]	; (8002e30 <InitializaionCalibrationCommand+0x2e4>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2252      	movs	r2, #82	; 0x52
 8002bfc:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

  		VL53L0X_WaitDeviceBooted( Dev );
 8002c00:	4b8b      	ldr	r3, [pc, #556]	; (8002e30 <InitializaionCalibrationCommand+0x2e4>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f007 fae1 	bl	800a1cc <VL53L0X_WaitDeviceBooted>
  		VL53L0X_DataInit( Dev );
 8002c0a:	4b89      	ldr	r3, [pc, #548]	; (8002e30 <InitializaionCalibrationCommand+0x2e4>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f006 fff6 	bl	8009c00 <VL53L0X_DataInit>
  		VL53L0X_StaticInit( Dev );
 8002c14:	4b86      	ldr	r3, [pc, #536]	; (8002e30 <InitializaionCalibrationCommand+0x2e4>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f007 f955 	bl	8009ec8 <VL53L0X_StaticInit>
  		VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 8002c1e:	4b84      	ldr	r3, [pc, #528]	; (8002e30 <InitializaionCalibrationCommand+0x2e4>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2101      	movs	r1, #1
 8002c24:	4618      	mov	r0, r3
 8002c26:	f007 fb6f 	bl	800a308 <VL53L0X_SetDeviceMode>

  		VL53L0X_PerformRefSpadManagement( Dev, &refSpadCount[i], &isApertureSpads[i]);
 8002c2a:	4b81      	ldr	r3, [pc, #516]	; (8002e30 <InitializaionCalibrationCommand+0x2e4>)
 8002c2c:	6818      	ldr	r0, [r3, #0]
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	4a81      	ldr	r2, [pc, #516]	; (8002e38 <InitializaionCalibrationCommand+0x2ec>)
 8002c34:	1899      	adds	r1, r3, r2
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	4a80      	ldr	r2, [pc, #512]	; (8002e3c <InitializaionCalibrationCommand+0x2f0>)
 8002c3a:	4413      	add	r3, r2
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	f008 fca2 	bl	800b586 <VL53L0X_PerformRefSpadManagement>
  		VL53L0X_PerformRefCalibration( Dev, &VhvSettings[i], &PhaseCal[i]);
 8002c42:	4b7b      	ldr	r3, [pc, #492]	; (8002e30 <InitializaionCalibrationCommand+0x2e4>)
 8002c44:	6818      	ldr	r0, [r3, #0]
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	4a7d      	ldr	r2, [pc, #500]	; (8002e40 <InitializaionCalibrationCommand+0x2f4>)
 8002c4a:	1899      	adds	r1, r3, r2
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	4a7d      	ldr	r2, [pc, #500]	; (8002e44 <InitializaionCalibrationCommand+0x2f8>)
 8002c50:	4413      	add	r3, r2
 8002c52:	461a      	mov	r2, r3
 8002c54:	f007 fff2 	bl	800ac3c <VL53L0X_PerformRefCalibration>

  		refSpadCountHost[i] = refSpadCount[i];
 8002c58:	4a77      	ldr	r2, [pc, #476]	; (8002e38 <InitializaionCalibrationCommand+0x2ec>)
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002c60:	4979      	ldr	r1, [pc, #484]	; (8002e48 <InitializaionCalibrationCommand+0x2fc>)
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  		isApertureSpadsHost[i] = isApertureSpads[i];
 8002c68:	4a74      	ldr	r2, [pc, #464]	; (8002e3c <InitializaionCalibrationCommand+0x2f0>)
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	7819      	ldrb	r1, [r3, #0]
 8002c70:	4a76      	ldr	r2, [pc, #472]	; (8002e4c <InitializaionCalibrationCommand+0x300>)
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	4413      	add	r3, r2
 8002c76:	460a      	mov	r2, r1
 8002c78:	701a      	strb	r2, [r3, #0]
  		VhvSettingsHost[i] = VhvSettings[i];
 8002c7a:	4a71      	ldr	r2, [pc, #452]	; (8002e40 <InitializaionCalibrationCommand+0x2f4>)
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	4413      	add	r3, r2
 8002c80:	7819      	ldrb	r1, [r3, #0]
 8002c82:	4a73      	ldr	r2, [pc, #460]	; (8002e50 <InitializaionCalibrationCommand+0x304>)
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	4413      	add	r3, r2
 8002c88:	460a      	mov	r2, r1
 8002c8a:	701a      	strb	r2, [r3, #0]
  		PhaseCalHost[i] = PhaseCal[i];
 8002c8c:	4a6d      	ldr	r2, [pc, #436]	; (8002e44 <InitializaionCalibrationCommand+0x2f8>)
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	4413      	add	r3, r2
 8002c92:	7819      	ldrb	r1, [r3, #0]
 8002c94:	4a6f      	ldr	r2, [pc, #444]	; (8002e54 <InitializaionCalibrationCommand+0x308>)
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	4413      	add	r3, r2
 8002c9a:	460a      	mov	r2, r1
 8002c9c:	701a      	strb	r2, [r3, #0]

  		VL53L0X_SetLimitCheckEnable( Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 8002c9e:	4b64      	ldr	r3, [pc, #400]	; (8002e30 <InitializaionCalibrationCommand+0x2e4>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	2100      	movs	r1, #0
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f007 fdc2 	bl	800a830 <VL53L0X_SetLimitCheckEnable>
  		VL53L0X_SetLimitCheckEnable( Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 8002cac:	4b60      	ldr	r3, [pc, #384]	; (8002e30 <InitializaionCalibrationCommand+0x2e4>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	2101      	movs	r1, #1
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f007 fdbb 	bl	800a830 <VL53L0X_SetLimitCheckEnable>
  		VL53L0X_SetLimitCheckValue( Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 8002cba:	4b5d      	ldr	r3, [pc, #372]	; (8002e30 <InitializaionCalibrationCommand+0x2e4>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f641 1299 	movw	r2, #6553	; 0x1999
 8002cc2:	2101      	movs	r1, #1
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f007 fe63 	bl	800a990 <VL53L0X_SetLimitCheckValue>
  		VL53L0X_SetLimitCheckValue( Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 8002cca:	4b59      	ldr	r3, [pc, #356]	; (8002e30 <InitializaionCalibrationCommand+0x2e4>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f007 fe5b 	bl	800a990 <VL53L0X_SetLimitCheckValue>
  		VL53L0X_SetMeasurementTimingBudgetMicroSeconds( Dev, 100000);
 8002cda:	4b55      	ldr	r3, [pc, #340]	; (8002e30 <InitializaionCalibrationCommand+0x2e4>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	495e      	ldr	r1, [pc, #376]	; (8002e58 <InitializaionCalibrationCommand+0x30c>)
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f007 fb6f 	bl	800a3c4 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
  		VL53L0X_SetVcselPulsePeriod( Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 8002ce6:	4b52      	ldr	r3, [pc, #328]	; (8002e30 <InitializaionCalibrationCommand+0x2e4>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2212      	movs	r2, #18
 8002cec:	2100      	movs	r1, #0
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f007 fb8e 	bl	800a410 <VL53L0X_SetVcselPulsePeriod>
  		VL53L0X_SetVcselPulsePeriod( Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 8002cf4:	4b4e      	ldr	r3, [pc, #312]	; (8002e30 <InitializaionCalibrationCommand+0x2e4>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	220e      	movs	r2, #14
 8002cfa:	2101      	movs	r1, #1
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f007 fb87 	bl	800a410 <VL53L0X_SetVcselPulsePeriod>

		Kalman_Init(&filters[i], Q, R, P, 0);  // Q, R, P, 초기�????????
 8002d02:	697a      	ldr	r2, [r7, #20]
 8002d04:	4613      	mov	r3, r2
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	4413      	add	r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	4a53      	ldr	r2, [pc, #332]	; (8002e5c <InitializaionCalibrationCommand+0x310>)
 8002d0e:	4413      	add	r3, r2
 8002d10:	4a53      	ldr	r2, [pc, #332]	; (8002e60 <InitializaionCalibrationCommand+0x314>)
 8002d12:	edd2 7a00 	vldr	s15, [r2]
 8002d16:	4a53      	ldr	r2, [pc, #332]	; (8002e64 <InitializaionCalibrationCommand+0x318>)
 8002d18:	ed92 7a00 	vldr	s14, [r2]
 8002d1c:	4a52      	ldr	r2, [pc, #328]	; (8002e68 <InitializaionCalibrationCommand+0x31c>)
 8002d1e:	edd2 6a00 	vldr	s13, [r2]
 8002d22:	eddf 1a52 	vldr	s3, [pc, #328]	; 8002e6c <InitializaionCalibrationCommand+0x320>
 8002d26:	eeb0 1a66 	vmov.f32	s2, s13
 8002d2a:	eef0 0a47 	vmov.f32	s1, s14
 8002d2e:	eeb0 0a67 	vmov.f32	s0, s15
 8002d32:	4618      	mov	r0, r3
 8002d34:	f000 fbb2 	bl	800349c <Kalman_Init>

 		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%02d ",i), 100);
 8002d38:	697a      	ldr	r2, [r7, #20]
 8002d3a:	494d      	ldr	r1, [pc, #308]	; (8002e70 <InitializaionCalibrationCommand+0x324>)
 8002d3c:	4838      	ldr	r0, [pc, #224]	; (8002e20 <InitializaionCalibrationCommand+0x2d4>)
 8002d3e:	f010 fb85 	bl	801344c <siprintf>
 8002d42:	4603      	mov	r3, r0
 8002d44:	b29a      	uxth	r2, r3
 8002d46:	2364      	movs	r3, #100	; 0x64
 8002d48:	4935      	ldr	r1, [pc, #212]	; (8002e20 <InitializaionCalibrationCommand+0x2d4>)
 8002d4a:	4836      	ldr	r0, [pc, #216]	; (8002e24 <InitializaionCalibrationCommand+0x2d8>)
 8002d4c:	f005 fe4c 	bl	80089e8 <HAL_UART_Transmit>
 		if(i%12 ==11){HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "\n\r"), 100);}
 8002d50:	6979      	ldr	r1, [r7, #20]
 8002d52:	4b35      	ldr	r3, [pc, #212]	; (8002e28 <InitializaionCalibrationCommand+0x2dc>)
 8002d54:	fb83 2301 	smull	r2, r3, r3, r1
 8002d58:	105a      	asrs	r2, r3, #1
 8002d5a:	17cb      	asrs	r3, r1, #31
 8002d5c:	1ad2      	subs	r2, r2, r3
 8002d5e:	4613      	mov	r3, r2
 8002d60:	005b      	lsls	r3, r3, #1
 8002d62:	4413      	add	r3, r2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	1aca      	subs	r2, r1, r3
 8002d68:	2a0b      	cmp	r2, #11
 8002d6a:	d10a      	bne.n	8002d82 <InitializaionCalibrationCommand+0x236>
 8002d6c:	4941      	ldr	r1, [pc, #260]	; (8002e74 <InitializaionCalibrationCommand+0x328>)
 8002d6e:	482c      	ldr	r0, [pc, #176]	; (8002e20 <InitializaionCalibrationCommand+0x2d4>)
 8002d70:	f010 fb6c 	bl	801344c <siprintf>
 8002d74:	4603      	mov	r3, r0
 8002d76:	b29a      	uxth	r2, r3
 8002d78:	2364      	movs	r3, #100	; 0x64
 8002d7a:	4929      	ldr	r1, [pc, #164]	; (8002e20 <InitializaionCalibrationCommand+0x2d4>)
 8002d7c:	4829      	ldr	r0, [pc, #164]	; (8002e24 <InitializaionCalibrationCommand+0x2d8>)
 8002d7e:	f005 fe33 	bl	80089e8 <HAL_UART_Transmit>
  	for (int i = 0; i < NUM_SENSOR; i++) {
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	3301      	adds	r3, #1
 8002d86:	617b      	str	r3, [r7, #20]
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	2b2f      	cmp	r3, #47	; 0x2f
 8002d8c:	f77f aef1 	ble.w	8002b72 <InitializaionCalibrationCommand+0x26>
  	}


	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "uint32_t refSpadCountHost[NUM_SENSOR]={"), 100);
 8002d90:	4939      	ldr	r1, [pc, #228]	; (8002e78 <InitializaionCalibrationCommand+0x32c>)
 8002d92:	4823      	ldr	r0, [pc, #140]	; (8002e20 <InitializaionCalibrationCommand+0x2d4>)
 8002d94:	f010 fb5a 	bl	801344c <siprintf>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	b29a      	uxth	r2, r3
 8002d9c:	2364      	movs	r3, #100	; 0x64
 8002d9e:	4920      	ldr	r1, [pc, #128]	; (8002e20 <InitializaionCalibrationCommand+0x2d4>)
 8002da0:	4820      	ldr	r0, [pc, #128]	; (8002e24 <InitializaionCalibrationCommand+0x2d8>)
 8002da2:	f005 fe21 	bl	80089e8 <HAL_UART_Transmit>
	for (int i = 0; i < NUM_SENSOR; i++){
 8002da6:	2300      	movs	r3, #0
 8002da8:	613b      	str	r3, [r7, #16]
 8002daa:	e026      	b.n	8002dfa <InitializaionCalibrationCommand+0x2ae>
		if(i < NUM_SENSOR - 1){
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	2b2e      	cmp	r3, #46	; 0x2e
 8002db0:	dc10      	bgt.n	8002dd4 <InitializaionCalibrationCommand+0x288>
			HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%lu,",refSpadCount[i]), 100);
 8002db2:	4a21      	ldr	r2, [pc, #132]	; (8002e38 <InitializaionCalibrationCommand+0x2ec>)
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dba:	461a      	mov	r2, r3
 8002dbc:	492f      	ldr	r1, [pc, #188]	; (8002e7c <InitializaionCalibrationCommand+0x330>)
 8002dbe:	4818      	ldr	r0, [pc, #96]	; (8002e20 <InitializaionCalibrationCommand+0x2d4>)
 8002dc0:	f010 fb44 	bl	801344c <siprintf>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	b29a      	uxth	r2, r3
 8002dc8:	2364      	movs	r3, #100	; 0x64
 8002dca:	4915      	ldr	r1, [pc, #84]	; (8002e20 <InitializaionCalibrationCommand+0x2d4>)
 8002dcc:	4815      	ldr	r0, [pc, #84]	; (8002e24 <InitializaionCalibrationCommand+0x2d8>)
 8002dce:	f005 fe0b 	bl	80089e8 <HAL_UART_Transmit>
 8002dd2:	e00f      	b.n	8002df4 <InitializaionCalibrationCommand+0x2a8>
		} else {
			HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%lu};\n",refSpadCount[i]), 100);
 8002dd4:	4a18      	ldr	r2, [pc, #96]	; (8002e38 <InitializaionCalibrationCommand+0x2ec>)
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ddc:	461a      	mov	r2, r3
 8002dde:	4928      	ldr	r1, [pc, #160]	; (8002e80 <InitializaionCalibrationCommand+0x334>)
 8002de0:	480f      	ldr	r0, [pc, #60]	; (8002e20 <InitializaionCalibrationCommand+0x2d4>)
 8002de2:	f010 fb33 	bl	801344c <siprintf>
 8002de6:	4603      	mov	r3, r0
 8002de8:	b29a      	uxth	r2, r3
 8002dea:	2364      	movs	r3, #100	; 0x64
 8002dec:	490c      	ldr	r1, [pc, #48]	; (8002e20 <InitializaionCalibrationCommand+0x2d4>)
 8002dee:	480d      	ldr	r0, [pc, #52]	; (8002e24 <InitializaionCalibrationCommand+0x2d8>)
 8002df0:	f005 fdfa 	bl	80089e8 <HAL_UART_Transmit>
	for (int i = 0; i < NUM_SENSOR; i++){
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	3301      	adds	r3, #1
 8002df8:	613b      	str	r3, [r7, #16]
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	2b2f      	cmp	r3, #47	; 0x2f
 8002dfe:	ddd5      	ble.n	8002dac <InitializaionCalibrationCommand+0x260>
		}
	}

	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "uint8_t isApertureSpadsHost[NUM_SENSOR]={"), 100);
 8002e00:	4920      	ldr	r1, [pc, #128]	; (8002e84 <InitializaionCalibrationCommand+0x338>)
 8002e02:	4807      	ldr	r0, [pc, #28]	; (8002e20 <InitializaionCalibrationCommand+0x2d4>)
 8002e04:	f010 fb22 	bl	801344c <siprintf>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	b29a      	uxth	r2, r3
 8002e0c:	2364      	movs	r3, #100	; 0x64
 8002e0e:	4904      	ldr	r1, [pc, #16]	; (8002e20 <InitializaionCalibrationCommand+0x2d4>)
 8002e10:	4804      	ldr	r0, [pc, #16]	; (8002e24 <InitializaionCalibrationCommand+0x2d8>)
 8002e12:	f005 fde9 	bl	80089e8 <HAL_UART_Transmit>
	for (int i = 0; i < NUM_SENSOR; i++){
 8002e16:	2300      	movs	r3, #0
 8002e18:	60fb      	str	r3, [r7, #12]
 8002e1a:	e05c      	b.n	8002ed6 <InitializaionCalibrationCommand+0x38a>
 8002e1c:	0801886c 	.word	0x0801886c
 8002e20:	2000786c 	.word	0x2000786c
 8002e24:	200077e4 	.word	0x200077e4
 8002e28:	2aaaaaab 	.word	0x2aaaaaab
 8002e2c:	20007a5c 	.word	0x20007a5c
 8002e30:	2000c55c 	.word	0x2000c55c
 8002e34:	2000729c 	.word	0x2000729c
 8002e38:	2000790c 	.word	0x2000790c
 8002e3c:	200079cc 	.word	0x200079cc
 8002e40:	200079fc 	.word	0x200079fc
 8002e44:	20007a2c 	.word	0x20007a2c
 8002e48:	20000010 	.word	0x20000010
 8002e4c:	200000d0 	.word	0x200000d0
 8002e50:	20000100 	.word	0x20000100
 8002e54:	20000130 	.word	0x20000130
 8002e58:	000186a0 	.word	0x000186a0
 8002e5c:	200072f0 	.word	0x200072f0
 8002e60:	20000000 	.word	0x20000000
 8002e64:	20000004 	.word	0x20000004
 8002e68:	20000008 	.word	0x20000008
 8002e6c:	00000000 	.word	0x00000000
 8002e70:	08018884 	.word	0x08018884
 8002e74:	0801888c 	.word	0x0801888c
 8002e78:	08018890 	.word	0x08018890
 8002e7c:	080188b8 	.word	0x080188b8
 8002e80:	080188c0 	.word	0x080188c0
 8002e84:	080188c8 	.word	0x080188c8
		if(i < NUM_SENSOR - 1){
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2b2e      	cmp	r3, #46	; 0x2e
 8002e8c:	dc10      	bgt.n	8002eb0 <InitializaionCalibrationCommand+0x364>
			HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d,",isApertureSpads[i]), 100);
 8002e8e:	4a4e      	ldr	r2, [pc, #312]	; (8002fc8 <InitializaionCalibrationCommand+0x47c>)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	4413      	add	r3, r2
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	461a      	mov	r2, r3
 8002e98:	494c      	ldr	r1, [pc, #304]	; (8002fcc <InitializaionCalibrationCommand+0x480>)
 8002e9a:	484d      	ldr	r0, [pc, #308]	; (8002fd0 <InitializaionCalibrationCommand+0x484>)
 8002e9c:	f010 fad6 	bl	801344c <siprintf>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	b29a      	uxth	r2, r3
 8002ea4:	2364      	movs	r3, #100	; 0x64
 8002ea6:	494a      	ldr	r1, [pc, #296]	; (8002fd0 <InitializaionCalibrationCommand+0x484>)
 8002ea8:	484a      	ldr	r0, [pc, #296]	; (8002fd4 <InitializaionCalibrationCommand+0x488>)
 8002eaa:	f005 fd9d 	bl	80089e8 <HAL_UART_Transmit>
 8002eae:	e00f      	b.n	8002ed0 <InitializaionCalibrationCommand+0x384>
		} else {
			HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d};\n",isApertureSpads[i]), 100);
 8002eb0:	4a45      	ldr	r2, [pc, #276]	; (8002fc8 <InitializaionCalibrationCommand+0x47c>)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	4413      	add	r3, r2
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	461a      	mov	r2, r3
 8002eba:	4947      	ldr	r1, [pc, #284]	; (8002fd8 <InitializaionCalibrationCommand+0x48c>)
 8002ebc:	4844      	ldr	r0, [pc, #272]	; (8002fd0 <InitializaionCalibrationCommand+0x484>)
 8002ebe:	f010 fac5 	bl	801344c <siprintf>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	b29a      	uxth	r2, r3
 8002ec6:	2364      	movs	r3, #100	; 0x64
 8002ec8:	4941      	ldr	r1, [pc, #260]	; (8002fd0 <InitializaionCalibrationCommand+0x484>)
 8002eca:	4842      	ldr	r0, [pc, #264]	; (8002fd4 <InitializaionCalibrationCommand+0x488>)
 8002ecc:	f005 fd8c 	bl	80089e8 <HAL_UART_Transmit>
	for (int i = 0; i < NUM_SENSOR; i++){
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	60fb      	str	r3, [r7, #12]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2b2f      	cmp	r3, #47	; 0x2f
 8002eda:	ddd5      	ble.n	8002e88 <InitializaionCalibrationCommand+0x33c>
		}
	}

	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "uint8_t VhvSettingsHost[NUM_SENSOR]={"), 100);
 8002edc:	493f      	ldr	r1, [pc, #252]	; (8002fdc <InitializaionCalibrationCommand+0x490>)
 8002ede:	483c      	ldr	r0, [pc, #240]	; (8002fd0 <InitializaionCalibrationCommand+0x484>)
 8002ee0:	f010 fab4 	bl	801344c <siprintf>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	b29a      	uxth	r2, r3
 8002ee8:	2364      	movs	r3, #100	; 0x64
 8002eea:	4939      	ldr	r1, [pc, #228]	; (8002fd0 <InitializaionCalibrationCommand+0x484>)
 8002eec:	4839      	ldr	r0, [pc, #228]	; (8002fd4 <InitializaionCalibrationCommand+0x488>)
 8002eee:	f005 fd7b 	bl	80089e8 <HAL_UART_Transmit>
	for (int i = 0; i < NUM_SENSOR; i++){
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	60bb      	str	r3, [r7, #8]
 8002ef6:	e026      	b.n	8002f46 <InitializaionCalibrationCommand+0x3fa>
		if(i < NUM_SENSOR - 1){
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	2b2e      	cmp	r3, #46	; 0x2e
 8002efc:	dc10      	bgt.n	8002f20 <InitializaionCalibrationCommand+0x3d4>
			HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d,",VhvSettings[i]), 100);
 8002efe:	4a38      	ldr	r2, [pc, #224]	; (8002fe0 <InitializaionCalibrationCommand+0x494>)
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	4413      	add	r3, r2
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	461a      	mov	r2, r3
 8002f08:	4930      	ldr	r1, [pc, #192]	; (8002fcc <InitializaionCalibrationCommand+0x480>)
 8002f0a:	4831      	ldr	r0, [pc, #196]	; (8002fd0 <InitializaionCalibrationCommand+0x484>)
 8002f0c:	f010 fa9e 	bl	801344c <siprintf>
 8002f10:	4603      	mov	r3, r0
 8002f12:	b29a      	uxth	r2, r3
 8002f14:	2364      	movs	r3, #100	; 0x64
 8002f16:	492e      	ldr	r1, [pc, #184]	; (8002fd0 <InitializaionCalibrationCommand+0x484>)
 8002f18:	482e      	ldr	r0, [pc, #184]	; (8002fd4 <InitializaionCalibrationCommand+0x488>)
 8002f1a:	f005 fd65 	bl	80089e8 <HAL_UART_Transmit>
 8002f1e:	e00f      	b.n	8002f40 <InitializaionCalibrationCommand+0x3f4>
		} else {
			HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d};\n",VhvSettings[i]), 100);
 8002f20:	4a2f      	ldr	r2, [pc, #188]	; (8002fe0 <InitializaionCalibrationCommand+0x494>)
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	4413      	add	r3, r2
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	461a      	mov	r2, r3
 8002f2a:	492b      	ldr	r1, [pc, #172]	; (8002fd8 <InitializaionCalibrationCommand+0x48c>)
 8002f2c:	4828      	ldr	r0, [pc, #160]	; (8002fd0 <InitializaionCalibrationCommand+0x484>)
 8002f2e:	f010 fa8d 	bl	801344c <siprintf>
 8002f32:	4603      	mov	r3, r0
 8002f34:	b29a      	uxth	r2, r3
 8002f36:	2364      	movs	r3, #100	; 0x64
 8002f38:	4925      	ldr	r1, [pc, #148]	; (8002fd0 <InitializaionCalibrationCommand+0x484>)
 8002f3a:	4826      	ldr	r0, [pc, #152]	; (8002fd4 <InitializaionCalibrationCommand+0x488>)
 8002f3c:	f005 fd54 	bl	80089e8 <HAL_UART_Transmit>
	for (int i = 0; i < NUM_SENSOR; i++){
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	3301      	adds	r3, #1
 8002f44:	60bb      	str	r3, [r7, #8]
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	2b2f      	cmp	r3, #47	; 0x2f
 8002f4a:	ddd5      	ble.n	8002ef8 <InitializaionCalibrationCommand+0x3ac>
		}
	}

	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "uint8_t PhaseCalHost[NUM_SENSOR]={"), 100);
 8002f4c:	4925      	ldr	r1, [pc, #148]	; (8002fe4 <InitializaionCalibrationCommand+0x498>)
 8002f4e:	4820      	ldr	r0, [pc, #128]	; (8002fd0 <InitializaionCalibrationCommand+0x484>)
 8002f50:	f010 fa7c 	bl	801344c <siprintf>
 8002f54:	4603      	mov	r3, r0
 8002f56:	b29a      	uxth	r2, r3
 8002f58:	2364      	movs	r3, #100	; 0x64
 8002f5a:	491d      	ldr	r1, [pc, #116]	; (8002fd0 <InitializaionCalibrationCommand+0x484>)
 8002f5c:	481d      	ldr	r0, [pc, #116]	; (8002fd4 <InitializaionCalibrationCommand+0x488>)
 8002f5e:	f005 fd43 	bl	80089e8 <HAL_UART_Transmit>
	for (int i = 0; i < NUM_SENSOR; i++){
 8002f62:	2300      	movs	r3, #0
 8002f64:	607b      	str	r3, [r7, #4]
 8002f66:	e026      	b.n	8002fb6 <InitializaionCalibrationCommand+0x46a>
		if(i < NUM_SENSOR - 1){
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2b2e      	cmp	r3, #46	; 0x2e
 8002f6c:	dc10      	bgt.n	8002f90 <InitializaionCalibrationCommand+0x444>
			HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d,",PhaseCal[i]), 100);
 8002f6e:	4a1e      	ldr	r2, [pc, #120]	; (8002fe8 <InitializaionCalibrationCommand+0x49c>)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4413      	add	r3, r2
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	461a      	mov	r2, r3
 8002f78:	4914      	ldr	r1, [pc, #80]	; (8002fcc <InitializaionCalibrationCommand+0x480>)
 8002f7a:	4815      	ldr	r0, [pc, #84]	; (8002fd0 <InitializaionCalibrationCommand+0x484>)
 8002f7c:	f010 fa66 	bl	801344c <siprintf>
 8002f80:	4603      	mov	r3, r0
 8002f82:	b29a      	uxth	r2, r3
 8002f84:	2364      	movs	r3, #100	; 0x64
 8002f86:	4912      	ldr	r1, [pc, #72]	; (8002fd0 <InitializaionCalibrationCommand+0x484>)
 8002f88:	4812      	ldr	r0, [pc, #72]	; (8002fd4 <InitializaionCalibrationCommand+0x488>)
 8002f8a:	f005 fd2d 	bl	80089e8 <HAL_UART_Transmit>
 8002f8e:	e00f      	b.n	8002fb0 <InitializaionCalibrationCommand+0x464>
		} else {
			HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d};\n",PhaseCal[i]), 100);
 8002f90:	4a15      	ldr	r2, [pc, #84]	; (8002fe8 <InitializaionCalibrationCommand+0x49c>)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4413      	add	r3, r2
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	461a      	mov	r2, r3
 8002f9a:	490f      	ldr	r1, [pc, #60]	; (8002fd8 <InitializaionCalibrationCommand+0x48c>)
 8002f9c:	480c      	ldr	r0, [pc, #48]	; (8002fd0 <InitializaionCalibrationCommand+0x484>)
 8002f9e:	f010 fa55 	bl	801344c <siprintf>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	b29a      	uxth	r2, r3
 8002fa6:	2364      	movs	r3, #100	; 0x64
 8002fa8:	4909      	ldr	r1, [pc, #36]	; (8002fd0 <InitializaionCalibrationCommand+0x484>)
 8002faa:	480a      	ldr	r0, [pc, #40]	; (8002fd4 <InitializaionCalibrationCommand+0x488>)
 8002fac:	f005 fd1c 	bl	80089e8 <HAL_UART_Transmit>
	for (int i = 0; i < NUM_SENSOR; i++){
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	607b      	str	r3, [r7, #4]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2b2f      	cmp	r3, #47	; 0x2f
 8002fba:	ddd5      	ble.n	8002f68 <InitializaionCalibrationCommand+0x41c>
		}
	}
}
 8002fbc:	bf00      	nop
 8002fbe:	bf00      	nop
 8002fc0:	3718      	adds	r7, #24
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	200079cc 	.word	0x200079cc
 8002fcc:	080188f4 	.word	0x080188f4
 8002fd0:	2000786c 	.word	0x2000786c
 8002fd4:	200077e4 	.word	0x200077e4
 8002fd8:	080188f8 	.word	0x080188f8
 8002fdc:	08018900 	.word	0x08018900
 8002fe0:	200079fc 	.word	0x200079fc
 8002fe4:	08018928 	.word	0x08018928
 8002fe8:	20007a2c 	.word	0x20007a2c

08002fec <AutoI2CCommand>:

void AutoI2CCommand(){
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b08e      	sub	sp, #56	; 0x38
 8002ff0:	af02      	add	r7, sp, #8
    HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "Auto Command \r\n"), 100);
 8002ff2:	49a0      	ldr	r1, [pc, #640]	; (8003274 <AutoI2CCommand+0x288>)
 8002ff4:	48a0      	ldr	r0, [pc, #640]	; (8003278 <AutoI2CCommand+0x28c>)
 8002ff6:	f010 fa29 	bl	801344c <siprintf>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	b29a      	uxth	r2, r3
 8002ffe:	2364      	movs	r3, #100	; 0x64
 8003000:	499d      	ldr	r1, [pc, #628]	; (8003278 <AutoI2CCommand+0x28c>)
 8003002:	489e      	ldr	r0, [pc, #632]	; (800327c <AutoI2CCommand+0x290>)
 8003004:	f005 fcf0 	bl	80089e8 <HAL_UART_Transmit>
    SensorI2CCommand();
 8003008:	f7fe fab6 	bl	8001578 <SensorI2CCommand>

    ResetAllDevices();
 800300c:	f001 f962 	bl	80042d4 <ResetAllDevices>
    setOnAllDevices();
 8003010:	f001 f9e0 	bl	80043d4 <setOnAllDevices>

    float forceSensorZeroPoint = 0.0f;
 8003014:	f04f 0300 	mov.w	r3, #0
 8003018:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint32_t startTime = 0, endTime = 0;
 800301a:	2300      	movs	r3, #0
 800301c:	60fb      	str	r3, [r7, #12]
 800301e:	2300      	movs	r3, #0
 8003020:	60bb      	str	r3, [r7, #8]
    uint8_t diffTime = 0;
 8003022:	2300      	movs	r3, #0
 8003024:	71fb      	strb	r3, [r7, #7]

    servo_angle(&htim2, TIM_CHANNEL_1, 0); // 초기 ?��?�� ?���?? ?��?��
 8003026:	2200      	movs	r2, #0
 8003028:	2100      	movs	r1, #0
 800302a:	4895      	ldr	r0, [pc, #596]	; (8003280 <AutoI2CCommand+0x294>)
 800302c:	f000 fe0e 	bl	8003c4c <servo_angle>

    for(int lin = 2; lin < 19; lin++){
 8003030:	2302      	movs	r3, #2
 8003032:	62bb      	str	r3, [r7, #40]	; 0x28
 8003034:	e114      	b.n	8003260 <AutoI2CCommand+0x274>
        for(int rev = 0; rev < 72; rev++){
 8003036:	2300      	movs	r3, #0
 8003038:	627b      	str	r3, [r7, #36]	; 0x24
 800303a:	e0ff      	b.n	800323c <AutoI2CCommand+0x250>
            for(int r = 1; r <6; r++){
 800303c:	2301      	movs	r3, #1
 800303e:	623b      	str	r3, [r7, #32]
 8003040:	e0f2      	b.n	8003228 <AutoI2CCommand+0x23c>
                servo_angle(&htim2, TIM_CHANNEL_1, 2*r); // ?��?�� ?��?��
 8003042:	6a3b      	ldr	r3, [r7, #32]
 8003044:	005b      	lsls	r3, r3, #1
 8003046:	461a      	mov	r2, r3
 8003048:	2100      	movs	r1, #0
 800304a:	488d      	ldr	r0, [pc, #564]	; (8003280 <AutoI2CCommand+0x294>)
 800304c:	f000 fdfe 	bl	8003c4c <servo_angle>
                HAL_Delay(200);
 8003050:	20c8      	movs	r0, #200	; 0xc8
 8003052:	f001 fa71 	bl	8004538 <HAL_Delay>
                int tofHitCount = 0;
 8003056:	2300      	movs	r3, #0
 8003058:	61fb      	str	r3, [r7, #28]
                while(tofHitCount < 20){
 800305a:	e0d4      	b.n	8003206 <AutoI2CCommand+0x21a>
                    uint8_t tofcount = 0;
 800305c:	2300      	movs	r3, #0
 800305e:	76fb      	strb	r3, [r7, #27]
					if(lin ==2 && rev ==0 && r == 1){
 8003060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003062:	2b02      	cmp	r3, #2
 8003064:	d112      	bne.n	800308c <AutoI2CCommand+0xa0>
 8003066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003068:	2b00      	cmp	r3, #0
 800306a:	d10f      	bne.n	800308c <AutoI2CCommand+0xa0>
 800306c:	6a3b      	ldr	r3, [r7, #32]
 800306e:	2b01      	cmp	r3, #1
 8003070:	d10c      	bne.n	800308c <AutoI2CCommand+0xa0>
						forceSensorZeroPoint = Read_HX711();
 8003072:	f000 f91f 	bl	80032b4 <Read_HX711>
 8003076:	ee07 0a90 	vmov	s15, r0
 800307a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800307e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
						Hx711Data = 0;
 8003082:	4b80      	ldr	r3, [pc, #512]	; (8003284 <AutoI2CCommand+0x298>)
 8003084:	f04f 0200 	mov.w	r2, #0
 8003088:	601a      	str	r2, [r3, #0]
 800308a:	e00c      	b.n	80030a6 <AutoI2CCommand+0xba>
					}else{
						Hx711Data = Read_HX711() - forceSensorZeroPoint;
 800308c:	f000 f912 	bl	80032b4 <Read_HX711>
 8003090:	ee07 0a90 	vmov	s15, r0
 8003094:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003098:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800309c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030a0:	4b78      	ldr	r3, [pc, #480]	; (8003284 <AutoI2CCommand+0x298>)
 80030a2:	edc3 7a00 	vstr	s15, [r3]
					}
   					startTime = HAL_GetTick();
 80030a6:	f001 fa3b 	bl	8004520 <HAL_GetTick>
 80030aa:	60f8      	str	r0, [r7, #12]
   					for (int i = 0; i < NUM_SENSOR; i++) {
 80030ac:	2300      	movs	r3, #0
 80030ae:	617b      	str	r3, [r7, #20]
 80030b0:	e06f      	b.n	8003192 <AutoI2CCommand+0x1a6>
   						Dev = &vl53l0x_s[i];
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80030b8:	fb02 f303 	mul.w	r3, r2, r3
 80030bc:	4a72      	ldr	r2, [pc, #456]	; (8003288 <AutoI2CCommand+0x29c>)
 80030be:	4413      	add	r3, r2
 80030c0:	4a72      	ldr	r2, [pc, #456]	; (800328c <AutoI2CCommand+0x2a0>)
 80030c2:	6013      	str	r3, [r2, #0]
   						VL53L0X_PerformContinuousRangingMeasurement(Dev, &RangingData); // 1500us
 80030c4:	4b71      	ldr	r3, [pc, #452]	; (800328c <AutoI2CCommand+0x2a0>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4971      	ldr	r1, [pc, #452]	; (8003290 <AutoI2CCommand+0x2a4>)
 80030ca:	4618      	mov	r0, r3
 80030cc:	f008 fa70 	bl	800b5b0 <VL53L0X_PerformContinuousRangingMeasurement>
   						if (RangingData.RangeStatus == 0) {
 80030d0:	4b6f      	ldr	r3, [pc, #444]	; (8003290 <AutoI2CCommand+0x2a4>)
 80030d2:	7e1b      	ldrb	r3, [r3, #24]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d134      	bne.n	8003142 <AutoI2CCommand+0x156>
   						  if (RangingData.RangeMilliMeter < 100) {
 80030d8:	4b6d      	ldr	r3, [pc, #436]	; (8003290 <AutoI2CCommand+0x2a4>)
 80030da:	891b      	ldrh	r3, [r3, #8]
 80030dc:	2b63      	cmp	r3, #99	; 0x63
 80030de:	d830      	bhi.n	8003142 <AutoI2CCommand+0x156>
   							  filteredValue[i] = Kalman_Estimate(&filters[i], RangingData.RangeMilliMeter);
 80030e0:	697a      	ldr	r2, [r7, #20]
 80030e2:	4613      	mov	r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	4413      	add	r3, r2
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	4a6a      	ldr	r2, [pc, #424]	; (8003294 <AutoI2CCommand+0x2a8>)
 80030ec:	4413      	add	r3, r2
 80030ee:	4a68      	ldr	r2, [pc, #416]	; (8003290 <AutoI2CCommand+0x2a4>)
 80030f0:	8912      	ldrh	r2, [r2, #8]
 80030f2:	ee07 2a90 	vmov	s15, r2
 80030f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030fa:	eeb0 0a67 	vmov.f32	s0, s15
 80030fe:	4618      	mov	r0, r3
 8003100:	f000 f9ea 	bl	80034d8 <Kalman_Estimate>
 8003104:	eef0 7a40 	vmov.f32	s15, s0
 8003108:	4a63      	ldr	r2, [pc, #396]	; (8003298 <AutoI2CCommand+0x2ac>)
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	4413      	add	r3, r2
 8003110:	edc3 7a00 	vstr	s15, [r3]
   							  filteredValue[i] -= sensorAverages[i];
 8003114:	4a60      	ldr	r2, [pc, #384]	; (8003298 <AutoI2CCommand+0x2ac>)
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	4413      	add	r3, r2
 800311c:	ed93 7a00 	vldr	s14, [r3]
 8003120:	4a5e      	ldr	r2, [pc, #376]	; (800329c <AutoI2CCommand+0x2b0>)
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	4413      	add	r3, r2
 8003128:	edd3 7a00 	vldr	s15, [r3]
 800312c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003130:	4a59      	ldr	r2, [pc, #356]	; (8003298 <AutoI2CCommand+0x2ac>)
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	4413      	add	r3, r2
 8003138:	edc3 7a00 	vstr	s15, [r3]
   							  //filteredValue /= Xstd[i];
   							  tofcount++;
 800313c:	7efb      	ldrb	r3, [r7, #27]
 800313e:	3301      	adds	r3, #1
 8003140:	76fb      	strb	r3, [r7, #27]
   						  }
   						}
   						if(tofcount==NUM_SENSOR){
 8003142:	7efb      	ldrb	r3, [r7, #27]
 8003144:	2b30      	cmp	r3, #48	; 0x30
 8003146:	d121      	bne.n	800318c <AutoI2CCommand+0x1a0>
   							for(int i = 0; i< NUM_SENSOR;i++){
 8003148:	2300      	movs	r3, #0
 800314a:	613b      	str	r3, [r7, #16]
 800314c:	e018      	b.n	8003180 <AutoI2CCommand+0x194>
   							  HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.1f ", filteredValue[i]), 500);
 800314e:	4a52      	ldr	r2, [pc, #328]	; (8003298 <AutoI2CCommand+0x2ac>)
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	4413      	add	r3, r2
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4618      	mov	r0, r3
 800315a:	f7fd fa25 	bl	80005a8 <__aeabi_f2d>
 800315e:	4602      	mov	r2, r0
 8003160:	460b      	mov	r3, r1
 8003162:	494f      	ldr	r1, [pc, #316]	; (80032a0 <AutoI2CCommand+0x2b4>)
 8003164:	4844      	ldr	r0, [pc, #272]	; (8003278 <AutoI2CCommand+0x28c>)
 8003166:	f010 f971 	bl	801344c <siprintf>
 800316a:	4603      	mov	r3, r0
 800316c:	b29a      	uxth	r2, r3
 800316e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003172:	4941      	ldr	r1, [pc, #260]	; (8003278 <AutoI2CCommand+0x28c>)
 8003174:	4841      	ldr	r0, [pc, #260]	; (800327c <AutoI2CCommand+0x290>)
 8003176:	f005 fc37 	bl	80089e8 <HAL_UART_Transmit>
   							for(int i = 0; i< NUM_SENSOR;i++){
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	3301      	adds	r3, #1
 800317e:	613b      	str	r3, [r7, #16]
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	2b2f      	cmp	r3, #47	; 0x2f
 8003184:	dde3      	ble.n	800314e <AutoI2CCommand+0x162>
   							}
   	                        tofHitCount++;
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	3301      	adds	r3, #1
 800318a:	61fb      	str	r3, [r7, #28]
   					for (int i = 0; i < NUM_SENSOR; i++) {
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	3301      	adds	r3, #1
 8003190:	617b      	str	r3, [r7, #20]
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	2b2f      	cmp	r3, #47	; 0x2f
 8003196:	dd8c      	ble.n	80030b2 <AutoI2CCommand+0xc6>
   						}
   					}
   					do {
   					endTime = HAL_GetTick();
 8003198:	f001 f9c2 	bl	8004520 <HAL_GetTick>
 800319c:	60b8      	str	r0, [r7, #8]
   					diffTime = endTime - startTime;
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	b2da      	uxtb	r2, r3
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	71fb      	strb	r3, [r7, #7]
   					} while (diffTime <= TIMBUDGET);
 80031aa:	79fb      	ldrb	r3, [r7, #7]
 80031ac:	2b21      	cmp	r3, #33	; 0x21
 80031ae:	d9f3      	bls.n	8003198 <AutoI2CCommand+0x1ac>

   					startTime = 0;
 80031b0:	2300      	movs	r3, #0
 80031b2:	60fb      	str	r3, [r7, #12]
   					endTime = 0;
 80031b4:	2300      	movs	r3, #0
 80031b6:	60bb      	str	r3, [r7, #8]
   					diffTime = 0;
 80031b8:	2300      	movs	r3, #0
 80031ba:	71fb      	strb	r3, [r7, #7]

   					UART_SendWeight_N(Hx711Data,-1/1600.00f,0); // Send the weight data over UART
 80031bc:	4b31      	ldr	r3, [pc, #196]	; (8003284 <AutoI2CCommand+0x298>)
 80031be:	edd3 7a00 	vldr	s15, [r3]
 80031c2:	ed9f 1a38 	vldr	s2, [pc, #224]	; 80032a4 <AutoI2CCommand+0x2b8>
 80031c6:	eddf 0a38 	vldr	s1, [pc, #224]	; 80032a8 <AutoI2CCommand+0x2bc>
 80031ca:	eeb0 0a67 	vmov.f32	s0, s15
 80031ce:	f000 f8bf 	bl	8003350 <UART_SendWeight_N>
   					HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, " %d %d %d\n", 8*lin, 5*rev, 2*r), 500);
 80031d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d4:	00d9      	lsls	r1, r3, #3
 80031d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031d8:	4613      	mov	r3, r2
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	441a      	add	r2, r3
 80031de:	6a3b      	ldr	r3, [r7, #32]
 80031e0:	005b      	lsls	r3, r3, #1
 80031e2:	9300      	str	r3, [sp, #0]
 80031e4:	4613      	mov	r3, r2
 80031e6:	460a      	mov	r2, r1
 80031e8:	4930      	ldr	r1, [pc, #192]	; (80032ac <AutoI2CCommand+0x2c0>)
 80031ea:	4823      	ldr	r0, [pc, #140]	; (8003278 <AutoI2CCommand+0x28c>)
 80031ec:	f010 f92e 	bl	801344c <siprintf>
 80031f0:	4603      	mov	r3, r0
 80031f2:	b29a      	uxth	r2, r3
 80031f4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80031f8:	491f      	ldr	r1, [pc, #124]	; (8003278 <AutoI2CCommand+0x28c>)
 80031fa:	4820      	ldr	r0, [pc, #128]	; (800327c <AutoI2CCommand+0x290>)
 80031fc:	f005 fbf4 	bl	80089e8 <HAL_UART_Transmit>

                    if (tofHitCount >= 20) {
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	2b13      	cmp	r3, #19
 8003204:	dc04      	bgt.n	8003210 <AutoI2CCommand+0x224>
                while(tofHitCount < 20){
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	2b13      	cmp	r3, #19
 800320a:	f77f af27 	ble.w	800305c <AutoI2CCommand+0x70>
 800320e:	e000      	b.n	8003212 <AutoI2CCommand+0x226>
                        break;
 8003210:	bf00      	nop
                    }
                }
                servo_angle(&htim2, TIM_CHANNEL_1, 0); // ?��?�� ?��치로 ?��?���??
 8003212:	2200      	movs	r2, #0
 8003214:	2100      	movs	r1, #0
 8003216:	481a      	ldr	r0, [pc, #104]	; (8003280 <AutoI2CCommand+0x294>)
 8003218:	f000 fd18 	bl	8003c4c <servo_angle>
                HAL_Delay(200);
 800321c:	20c8      	movs	r0, #200	; 0xc8
 800321e:	f001 f98b 	bl	8004538 <HAL_Delay>
            for(int r = 1; r <6; r++){
 8003222:	6a3b      	ldr	r3, [r7, #32]
 8003224:	3301      	adds	r3, #1
 8003226:	623b      	str	r3, [r7, #32]
 8003228:	6a3b      	ldr	r3, [r7, #32]
 800322a:	2b05      	cmp	r3, #5
 800322c:	f77f af09 	ble.w	8003042 <AutoI2CCommand+0x56>
            }

            stepRev(5); // ?�� 바�?? ?��?��
 8003230:	2005      	movs	r0, #5
 8003232:	f000 fc47 	bl	8003ac4 <stepRev>
        for(int rev = 0; rev < 72; rev++){
 8003236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003238:	3301      	adds	r3, #1
 800323a:	627b      	str	r3, [r7, #36]	; 0x24
 800323c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323e:	2b47      	cmp	r3, #71	; 0x47
 8003240:	f77f aefc 	ble.w	800303c <AutoI2CCommand+0x50>
        }
        HAL_Delay(500);
 8003244:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003248:	f001 f976 	bl	8004538 <HAL_Delay>
        stepRev(-360); // ?��?���??
 800324c:	4818      	ldr	r0, [pc, #96]	; (80032b0 <AutoI2CCommand+0x2c4>)
 800324e:	f000 fc39 	bl	8003ac4 <stepRev>
        stepLin(-8); // ?��?�� ?��?��
 8003252:	f06f 0007 	mvn.w	r0, #7
 8003256:	f000 fc9d 	bl	8003b94 <stepLin>
    for(int lin = 2; lin < 19; lin++){
 800325a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800325c:	3301      	adds	r3, #1
 800325e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003262:	2b12      	cmp	r3, #18
 8003264:	f77f aee7 	ble.w	8003036 <AutoI2CCommand+0x4a>
    }
    //stepLin(144); // 마�?�?? ?��치로 ?��?��
}
 8003268:	bf00      	nop
 800326a:	bf00      	nop
 800326c:	3730      	adds	r7, #48	; 0x30
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	0801894c 	.word	0x0801894c
 8003278:	2000786c 	.word	0x2000786c
 800327c:	200077e4 	.word	0x200077e4
 8003280:	20007794 	.word	0x20007794
 8003284:	20007298 	.word	0x20007298
 8003288:	20007a5c 	.word	0x20007a5c
 800328c:	2000c55c 	.word	0x2000c55c
 8003290:	200078f0 	.word	0x200078f0
 8003294:	200072f0 	.word	0x200072f0
 8003298:	200076b0 	.word	0x200076b0
 800329c:	20007058 	.word	0x20007058
 80032a0:	08018858 	.word	0x08018858
 80032a4:	00000000 	.word	0x00000000
 80032a8:	ba23d70a 	.word	0xba23d70a
 80032ac:	0801895c 	.word	0x0801895c
 80032b0:	fffffe98 	.word	0xfffffe98

080032b4 <Read_HX711>:
  // Set the SCK pin to low
  HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_RESET);
}

int32_t Read_HX711(void)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
  int32_t data = 0;
 80032ba:	2300      	movs	r3, #0
 80032bc:	607b      	str	r3, [r7, #4]

  // Wait until the DT pin goes low
  while (HAL_GPIO_ReadPin(HX711_DT_GPIO_Port, HX711_DT_Pin) == GPIO_PIN_SET);
 80032be:	bf00      	nop
 80032c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80032c4:	4820      	ldr	r0, [pc, #128]	; (8003348 <Read_HX711+0x94>)
 80032c6:	f001 fda3 	bl	8004e10 <HAL_GPIO_ReadPin>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d0f7      	beq.n	80032c0 <Read_HX711+0xc>

  // Read the 24-bit data
  for (int i = 0; i < 24; i++)
 80032d0:	2300      	movs	r3, #0
 80032d2:	603b      	str	r3, [r7, #0]
 80032d4:	e020      	b.n	8003318 <Read_HX711+0x64>
  {
    // Generate a clock pulse on SCK pin
    HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_SET);
 80032d6:	2201      	movs	r2, #1
 80032d8:	2102      	movs	r1, #2
 80032da:	481c      	ldr	r0, [pc, #112]	; (800334c <Read_HX711+0x98>)
 80032dc:	f001 fdb0 	bl	8004e40 <HAL_GPIO_WritePin>
    DelayMicroseconds(1);
 80032e0:	2001      	movs	r0, #1
 80032e2:	f000 f887 	bl	80033f4 <DelayMicroseconds>
    data = (data << 1);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	607b      	str	r3, [r7, #4]
    if (HAL_GPIO_ReadPin(HX711_DT_GPIO_Port, HX711_DT_Pin) == GPIO_PIN_SET)
 80032ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80032f0:	4815      	ldr	r0, [pc, #84]	; (8003348 <Read_HX711+0x94>)
 80032f2:	f001 fd8d 	bl	8004e10 <HAL_GPIO_ReadPin>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d102      	bne.n	8003302 <Read_HX711+0x4e>
    {
      data++;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	3301      	adds	r3, #1
 8003300:	607b      	str	r3, [r7, #4]
    }
    HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_RESET);
 8003302:	2200      	movs	r2, #0
 8003304:	2102      	movs	r1, #2
 8003306:	4811      	ldr	r0, [pc, #68]	; (800334c <Read_HX711+0x98>)
 8003308:	f001 fd9a 	bl	8004e40 <HAL_GPIO_WritePin>
    DelayMicroseconds(1);
 800330c:	2001      	movs	r0, #1
 800330e:	f000 f871 	bl	80033f4 <DelayMicroseconds>
  for (int i = 0; i < 24; i++)
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	3301      	adds	r3, #1
 8003316:	603b      	str	r3, [r7, #0]
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	2b17      	cmp	r3, #23
 800331c:	dddb      	ble.n	80032d6 <Read_HX711+0x22>
  }

  // Generate an additional 25th pulse to set the HX711 back to idle mode
  HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_SET);
 800331e:	2201      	movs	r2, #1
 8003320:	2102      	movs	r1, #2
 8003322:	480a      	ldr	r0, [pc, #40]	; (800334c <Read_HX711+0x98>)
 8003324:	f001 fd8c 	bl	8004e40 <HAL_GPIO_WritePin>
  DelayMicroseconds(1);
 8003328:	2001      	movs	r0, #1
 800332a:	f000 f863 	bl	80033f4 <DelayMicroseconds>
  HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_RESET);
 800332e:	2200      	movs	r2, #0
 8003330:	2102      	movs	r1, #2
 8003332:	4806      	ldr	r0, [pc, #24]	; (800334c <Read_HX711+0x98>)
 8003334:	f001 fd84 	bl	8004e40 <HAL_GPIO_WritePin>
  DelayMicroseconds(1);
 8003338:	2001      	movs	r0, #1
 800333a:	f000 f85b 	bl	80033f4 <DelayMicroseconds>


  // Return the 24-bit data
  return data;
 800333e:	687b      	ldr	r3, [r7, #4]
}
 8003340:	4618      	mov	r0, r3
 8003342:	3708      	adds	r7, #8
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	40020400 	.word	0x40020400
 800334c:	40022000 	.word	0x40022000

08003350 <UART_SendWeight_N>:
#endif
  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, data, 1000);
}

void UART_SendWeight_N(float rawData,float loadcell_slope,float loadcell_bias)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b08e      	sub	sp, #56	; 0x38
 8003354:	af00      	add	r7, sp, #0
 8003356:	ed87 0a03 	vstr	s0, [r7, #12]
 800335a:	edc7 0a02 	vstr	s1, [r7, #8]
 800335e:	ed87 1a01 	vstr	s2, [r7, #4]
  float weight = loadcell_slope * rawData  + loadcell_bias;
 8003362:	ed97 7a02 	vldr	s14, [r7, #8]
 8003366:	edd7 7a03 	vldr	s15, [r7, #12]
 800336a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800336e:	ed97 7a01 	vldr	s14, [r7, #4]
 8003372:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003376:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
  weight *=9.8;
 800337a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800337c:	f7fd f914 	bl	80005a8 <__aeabi_f2d>
 8003380:	a31a      	add	r3, pc, #104	; (adr r3, 80033ec <UART_SendWeight_N+0x9c>)
 8003382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003386:	f7fd f967 	bl	8000658 <__aeabi_dmul>
 800338a:	4602      	mov	r2, r0
 800338c:	460b      	mov	r3, r1
 800338e:	4610      	mov	r0, r2
 8003390:	4619      	mov	r1, r3
 8003392:	f7fd fc59 	bl	8000c48 <__aeabi_d2f>
 8003396:	4603      	mov	r3, r0
 8003398:	637b      	str	r3, [r7, #52]	; 0x34
  weight /=1000;
 800339a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800339e:	eddf 6a10 	vldr	s13, [pc, #64]	; 80033e0 <UART_SendWeight_N+0x90>
 80033a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80033a6:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
  char buffer[32];
  int len = sprintf(buffer, "%.4f", weight);
 80033aa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80033ac:	f7fd f8fc 	bl	80005a8 <__aeabi_f2d>
 80033b0:	4602      	mov	r2, r0
 80033b2:	460b      	mov	r3, r1
 80033b4:	f107 0010 	add.w	r0, r7, #16
 80033b8:	490a      	ldr	r1, [pc, #40]	; (80033e4 <UART_SendWeight_N+0x94>)
 80033ba:	f010 f847 	bl	801344c <siprintf>
 80033be:	6338      	str	r0, [r7, #48]	; 0x30

  // Send the buffer content via UART
  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, len, 1000);
 80033c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c2:	b29a      	uxth	r2, r3
 80033c4:	f107 0110 	add.w	r1, r7, #16
 80033c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033cc:	4806      	ldr	r0, [pc, #24]	; (80033e8 <UART_SendWeight_N+0x98>)
 80033ce:	f005 fb0b 	bl	80089e8 <HAL_UART_Transmit>
}
 80033d2:	bf00      	nop
 80033d4:	3738      	adds	r7, #56	; 0x38
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	f3af 8000 	nop.w
 80033e0:	447a0000 	.word	0x447a0000
 80033e4:	08018970 	.word	0x08018970
 80033e8:	200077e4 	.word	0x200077e4
 80033ec:	9999999a 	.word	0x9999999a
 80033f0:	40239999 	.word	0x40239999

080033f4 <DelayMicroseconds>:
  weight *=9.8;
  weight /=1000;
  return weight;
}
void DelayMicroseconds(uint32_t microseconds)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b085      	sub	sp, #20
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  uint32_t ticks = microseconds;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	60fb      	str	r3, [r7, #12]
  while (ticks--)
 8003400:	e000      	b.n	8003404 <DelayMicroseconds+0x10>
  {
    __NOP();
 8003402:	bf00      	nop
  while (ticks--)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	1e5a      	subs	r2, r3, #1
 8003408:	60fa      	str	r2, [r7, #12]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1f9      	bne.n	8003402 <DelayMicroseconds+0xe>
  }
}
 800340e:	bf00      	nop
 8003410:	bf00      	nop
 8003412:	3714      	adds	r7, #20
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;


void MX_I2C1_Init(void)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003420:	4b1b      	ldr	r3, [pc, #108]	; (8003490 <MX_I2C1_Init+0x74>)
 8003422:	4a1c      	ldr	r2, [pc, #112]	; (8003494 <MX_I2C1_Init+0x78>)
 8003424:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6000030D;
 8003426:	4b1a      	ldr	r3, [pc, #104]	; (8003490 <MX_I2C1_Init+0x74>)
 8003428:	4a1b      	ldr	r2, [pc, #108]	; (8003498 <MX_I2C1_Init+0x7c>)
 800342a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800342c:	4b18      	ldr	r3, [pc, #96]	; (8003490 <MX_I2C1_Init+0x74>)
 800342e:	2200      	movs	r2, #0
 8003430:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003432:	4b17      	ldr	r3, [pc, #92]	; (8003490 <MX_I2C1_Init+0x74>)
 8003434:	2201      	movs	r2, #1
 8003436:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003438:	4b15      	ldr	r3, [pc, #84]	; (8003490 <MX_I2C1_Init+0x74>)
 800343a:	2200      	movs	r2, #0
 800343c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800343e:	4b14      	ldr	r3, [pc, #80]	; (8003490 <MX_I2C1_Init+0x74>)
 8003440:	2200      	movs	r2, #0
 8003442:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003444:	4b12      	ldr	r3, [pc, #72]	; (8003490 <MX_I2C1_Init+0x74>)
 8003446:	2200      	movs	r2, #0
 8003448:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800344a:	4b11      	ldr	r3, [pc, #68]	; (8003490 <MX_I2C1_Init+0x74>)
 800344c:	2200      	movs	r2, #0
 800344e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003450:	4b0f      	ldr	r3, [pc, #60]	; (8003490 <MX_I2C1_Init+0x74>)
 8003452:	2200      	movs	r2, #0
 8003454:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003456:	480e      	ldr	r0, [pc, #56]	; (8003490 <MX_I2C1_Init+0x74>)
 8003458:	f001 fd30 	bl	8004ebc <HAL_I2C_Init>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d001      	beq.n	8003466 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003462:	f000 fb19 	bl	8003a98 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003466:	2100      	movs	r1, #0
 8003468:	4809      	ldr	r0, [pc, #36]	; (8003490 <MX_I2C1_Init+0x74>)
 800346a:	f002 ff81 	bl	8006370 <HAL_I2CEx_ConfigAnalogFilter>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d001      	beq.n	8003478 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003474:	f000 fb10 	bl	8003a98 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003478:	2100      	movs	r1, #0
 800347a:	4805      	ldr	r0, [pc, #20]	; (8003490 <MX_I2C1_Init+0x74>)
 800347c:	f002 ffc3 	bl	8006406 <HAL_I2CEx_ConfigDigitalFilter>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d001      	beq.n	800348a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003486:	f000 fb07 	bl	8003a98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800348a:	bf00      	nop
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	2000729c 	.word	0x2000729c
 8003494:	40005400 	.word	0x40005400
 8003498:	6000030d 	.word	0x6000030d

0800349c <Kalman_Init>:
float filteredValue[NUM_SENSOR]={0};
float Q = 0.001f; // Process noise covariance
float R = 0.03f;   // Measurement noise covariance
float P = 0.001f;

void Kalman_Init(KalmanFilter *kf, float Q, float R, float P, float initial_value) {
 800349c:	b480      	push	{r7}
 800349e:	b087      	sub	sp, #28
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6178      	str	r0, [r7, #20]
 80034a4:	ed87 0a04 	vstr	s0, [r7, #16]
 80034a8:	edc7 0a03 	vstr	s1, [r7, #12]
 80034ac:	ed87 1a02 	vstr	s2, [r7, #8]
 80034b0:	edc7 1a01 	vstr	s3, [r7, #4]
    kf->Q = Q;
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	693a      	ldr	r2, [r7, #16]
 80034b8:	601a      	str	r2, [r3, #0]
    kf->R = R;
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	68fa      	ldr	r2, [r7, #12]
 80034be:	605a      	str	r2, [r3, #4]
    kf->P = P;
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	68ba      	ldr	r2, [r7, #8]
 80034c4:	609a      	str	r2, [r3, #8]
    kf->X = initial_value;
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	60da      	str	r2, [r3, #12]
}
 80034cc:	bf00      	nop
 80034ce:	371c      	adds	r7, #28
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <Kalman_Estimate>:

float Kalman_Estimate(KalmanFilter *kf, float measurement) {
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	ed87 0a00 	vstr	s0, [r7]
    // Prediction step: Update the error covariance 'P'
    // This is adding process noise to our uncertainty in the estimated state.
    kf->P = kf->P + kf->Q;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	ed93 7a02 	vldr	s14, [r3, #8]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	edd3 7a00 	vldr	s15, [r3]
 80034f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	edc3 7a02 	vstr	s15, [r3, #8]

    // Update step: Compute the Kalman Gain 'K'
    // Kalman Gain balances the ratio between the prediction and the new measurement
    kf->K = kf->P / (kf->P + kf->R);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	edd3 6a02 	vldr	s13, [r3, #8]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	ed93 7a02 	vldr	s14, [r3, #8]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	edd3 7a01 	vldr	s15, [r3, #4]
 800350c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003510:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	edc3 7a04 	vstr	s15, [r3, #16]

    // Update step: Update the state estimate 'X'
    // Here we adjust our state estimate based on the new measurement,
    // scaling the "innovation" by the Kalman Gain
    kf->X = kf->X + kf->K * (measurement - kf->X);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	ed93 7a03 	vldr	s14, [r3, #12]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	edd3 6a04 	vldr	s13, [r3, #16]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	edd3 7a03 	vldr	s15, [r3, #12]
 800352c:	ed97 6a00 	vldr	s12, [r7]
 8003530:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003534:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003538:	ee77 7a27 	vadd.f32	s15, s14, s15
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	edc3 7a03 	vstr	s15, [r3, #12]

    // Update step: Update the error covariance 'P'
    // We've used our observation, so we adjust our uncertainty accordingly
    kf->P = (1 - kf->K) * kf->P;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	edd3 7a04 	vldr	s15, [r3, #16]
 8003548:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800354c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	edd3 7a02 	vldr	s15, [r3, #8]
 8003556:	ee67 7a27 	vmul.f32	s15, s14, s15
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	edc3 7a02 	vstr	s15, [r3, #8]

    // Return the updated state estimate
    return kf->X;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	ee07 3a90 	vmov	s15, r3
}
 8003568:	eeb0 0a67 	vmov.f32	s0, s15
 800356c:	370c      	adds	r7, #12
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
	...

08003578 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8003578:	b480      	push	{r7}
 800357a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800357c:	f3bf 8f4f 	dsb	sy
}
 8003580:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003582:	f3bf 8f6f 	isb	sy
}
 8003586:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8003588:	4b0d      	ldr	r3, [pc, #52]	; (80035c0 <SCB_EnableICache+0x48>)
 800358a:	2200      	movs	r2, #0
 800358c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8003590:	f3bf 8f4f 	dsb	sy
}
 8003594:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003596:	f3bf 8f6f 	isb	sy
}
 800359a:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800359c:	4b08      	ldr	r3, [pc, #32]	; (80035c0 <SCB_EnableICache+0x48>)
 800359e:	695b      	ldr	r3, [r3, #20]
 80035a0:	4a07      	ldr	r2, [pc, #28]	; (80035c0 <SCB_EnableICache+0x48>)
 80035a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035a6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80035a8:	f3bf 8f4f 	dsb	sy
}
 80035ac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80035ae:	f3bf 8f6f 	isb	sy
}
 80035b2:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80035b4:	bf00      	nop
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop
 80035c0:	e000ed00 	.word	0xe000ed00

080035c4 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80035ca:	4b1f      	ldr	r3, [pc, #124]	; (8003648 <SCB_EnableDCache+0x84>)
 80035cc:	2200      	movs	r2, #0
 80035ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80035d2:	f3bf 8f4f 	dsb	sy
}
 80035d6:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80035d8:	4b1b      	ldr	r3, [pc, #108]	; (8003648 <SCB_EnableDCache+0x84>)
 80035da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035de:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	0b5b      	lsrs	r3, r3, #13
 80035e4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80035e8:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	08db      	lsrs	r3, r3, #3
 80035ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035f2:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	015a      	lsls	r2, r3, #5
 80035f8:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80035fc:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80035fe:	68ba      	ldr	r2, [r7, #8]
 8003600:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003602:	4911      	ldr	r1, [pc, #68]	; (8003648 <SCB_EnableDCache+0x84>)
 8003604:	4313      	orrs	r3, r2
 8003606:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	1e5a      	subs	r2, r3, #1
 800360e:	60ba      	str	r2, [r7, #8]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d1ef      	bne.n	80035f4 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	1e5a      	subs	r2, r3, #1
 8003618:	60fa      	str	r2, [r7, #12]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1e5      	bne.n	80035ea <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800361e:	f3bf 8f4f 	dsb	sy
}
 8003622:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8003624:	4b08      	ldr	r3, [pc, #32]	; (8003648 <SCB_EnableDCache+0x84>)
 8003626:	695b      	ldr	r3, [r3, #20]
 8003628:	4a07      	ldr	r2, [pc, #28]	; (8003648 <SCB_EnableDCache+0x84>)
 800362a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800362e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8003630:	f3bf 8f4f 	dsb	sy
}
 8003634:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003636:	f3bf 8f6f 	isb	sy
}
 800363a:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 800363c:	bf00      	nop
 800363e:	3714      	adds	r7, #20
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr
 8003648:	e000ed00 	.word	0xe000ed00

0800364c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8003650:	f7ff ff92 	bl	8003578 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8003654:	f7ff ffb6 	bl	80035c4 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003658:	f000 ff11 	bl	800447e <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800365c:	f000 f82c 	bl	80036b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003660:	f000 f962 	bl	8003928 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8003664:	f000 fd66 	bl	8004134 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8003668:	f7ff fed8 	bl	800341c <MX_I2C1_Init>
  MX_CRC_Init();
 800366c:	f000 f8c4 	bl	80037f8 <MX_CRC_Init>
  MX_TIM2_Init();
 8003670:	f000 f8e4 	bl	800383c <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8003674:	f000 f88c 	bl	8003790 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 8003678:	2100      	movs	r1, #0
 800367a:	480c      	ldr	r0, [pc, #48]	; (80036ac <main+0x60>)
 800367c:	f004 f8d2 	bl	8007824 <HAL_TIM_PWM_Start>

  aiInit();
 8003680:	f7fd fcea 	bl	8001058 <aiInit>
  startMsg();
 8003684:	f000 fdbc 	bl	8004200 <startMsg>
  servo_angle(&htim2, TIM_CHANNEL_1, 0);
 8003688:	2200      	movs	r2, #0
 800368a:	2100      	movs	r1, #0
 800368c:	4807      	ldr	r0, [pc, #28]	; (80036ac <main+0x60>)
 800368e:	f000 fadd 	bl	8003c4c <servo_angle>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
#ifdef JH
	  if(ReceiveUartMessage(&huart1, rxMsg, sizeof(rxMsg)) == HAL_OK)
 8003692:	2241      	movs	r2, #65	; 0x41
 8003694:	4906      	ldr	r1, [pc, #24]	; (80036b0 <main+0x64>)
 8003696:	4807      	ldr	r0, [pc, #28]	; (80036b4 <main+0x68>)
 8003698:	f000 fd7c 	bl	8004194 <ReceiveUartMessage>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d1f7      	bne.n	8003692 <main+0x46>
	  {
	      ProcessCommand(rxMsg);
 80036a2:	4803      	ldr	r0, [pc, #12]	; (80036b0 <main+0x64>)
 80036a4:	f7fd fe98 	bl	80013d8 <ProcessCommand>
	  if(ReceiveUartMessage(&huart1, rxMsg, sizeof(rxMsg)) == HAL_OK)
 80036a8:	e7f3      	b.n	8003692 <main+0x46>
 80036aa:	bf00      	nop
 80036ac:	20007794 	.word	0x20007794
 80036b0:	200078ac 	.word	0x200078ac
 80036b4:	200077e4 	.word	0x200077e4

080036b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b094      	sub	sp, #80	; 0x50
 80036bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80036be:	f107 0320 	add.w	r3, r7, #32
 80036c2:	2230      	movs	r2, #48	; 0x30
 80036c4:	2100      	movs	r1, #0
 80036c6:	4618      	mov	r0, r3
 80036c8:	f00e ff48 	bl	801255c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80036cc:	f107 030c 	add.w	r3, r7, #12
 80036d0:	2200      	movs	r2, #0
 80036d2:	601a      	str	r2, [r3, #0]
 80036d4:	605a      	str	r2, [r3, #4]
 80036d6:	609a      	str	r2, [r3, #8]
 80036d8:	60da      	str	r2, [r3, #12]
 80036da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80036dc:	4b2a      	ldr	r3, [pc, #168]	; (8003788 <SystemClock_Config+0xd0>)
 80036de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e0:	4a29      	ldr	r2, [pc, #164]	; (8003788 <SystemClock_Config+0xd0>)
 80036e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036e6:	6413      	str	r3, [r2, #64]	; 0x40
 80036e8:	4b27      	ldr	r3, [pc, #156]	; (8003788 <SystemClock_Config+0xd0>)
 80036ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036f0:	60bb      	str	r3, [r7, #8]
 80036f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80036f4:	4b25      	ldr	r3, [pc, #148]	; (800378c <SystemClock_Config+0xd4>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a24      	ldr	r2, [pc, #144]	; (800378c <SystemClock_Config+0xd4>)
 80036fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80036fe:	6013      	str	r3, [r2, #0]
 8003700:	4b22      	ldr	r3, [pc, #136]	; (800378c <SystemClock_Config+0xd4>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003708:	607b      	str	r3, [r7, #4]
 800370a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800370c:	2302      	movs	r3, #2
 800370e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003710:	2301      	movs	r3, #1
 8003712:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003714:	2310      	movs	r3, #16
 8003716:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003718:	2302      	movs	r3, #2
 800371a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800371c:	2300      	movs	r3, #0
 800371e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003720:	2308      	movs	r3, #8
 8003722:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8003724:	23d8      	movs	r3, #216	; 0xd8
 8003726:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003728:	2302      	movs	r3, #2
 800372a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800372c:	2302      	movs	r3, #2
 800372e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003730:	f107 0320 	add.w	r3, r7, #32
 8003734:	4618      	mov	r0, r3
 8003736:	f002 ff03 	bl	8006540 <HAL_RCC_OscConfig>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d001      	beq.n	8003744 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8003740:	f000 f9aa 	bl	8003a98 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003744:	f002 feac 	bl	80064a0 <HAL_PWREx_EnableOverDrive>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d001      	beq.n	8003752 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800374e:	f000 f9a3 	bl	8003a98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003752:	230f      	movs	r3, #15
 8003754:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003756:	2302      	movs	r3, #2
 8003758:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800375a:	2300      	movs	r3, #0
 800375c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800375e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003762:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003768:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800376a:	f107 030c 	add.w	r3, r7, #12
 800376e:	2107      	movs	r1, #7
 8003770:	4618      	mov	r0, r3
 8003772:	f003 f989 	bl	8006a88 <HAL_RCC_ClockConfig>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d001      	beq.n	8003780 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800377c:	f000 f98c 	bl	8003a98 <Error_Handler>
  }
}
 8003780:	bf00      	nop
 8003782:	3750      	adds	r7, #80	; 0x50
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}
 8003788:	40023800 	.word	0x40023800
 800378c:	40007000 	.word	0x40007000

08003790 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003794:	2200      	movs	r2, #0
 8003796:	2100      	movs	r1, #0
 8003798:	2025      	movs	r0, #37	; 0x25
 800379a:	f000 ffcc 	bl	8004736 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 800379e:	2025      	movs	r0, #37	; 0x25
 80037a0:	f000 ffe5 	bl	800476e <HAL_NVIC_EnableIRQ>
  /* I2C1_ER_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80037a4:	2200      	movs	r2, #0
 80037a6:	2100      	movs	r1, #0
 80037a8:	2020      	movs	r0, #32
 80037aa:	f000 ffc4 	bl	8004736 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80037ae:	2020      	movs	r0, #32
 80037b0:	f000 ffdd 	bl	800476e <HAL_NVIC_EnableIRQ>
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80037b4:	2200      	movs	r2, #0
 80037b6:	2100      	movs	r1, #0
 80037b8:	201f      	movs	r0, #31
 80037ba:	f000 ffbc 	bl	8004736 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80037be:	201f      	movs	r0, #31
 80037c0:	f000 ffd5 	bl	800476e <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80037c4:	2200      	movs	r2, #0
 80037c6:	2100      	movs	r1, #0
 80037c8:	2028      	movs	r0, #40	; 0x28
 80037ca:	f000 ffb4 	bl	8004736 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80037ce:	2028      	movs	r0, #40	; 0x28
 80037d0:	f000 ffcd 	bl	800476e <HAL_NVIC_EnableIRQ>
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80037d4:	2200      	movs	r2, #0
 80037d6:	2100      	movs	r1, #0
 80037d8:	2017      	movs	r0, #23
 80037da:	f000 ffac 	bl	8004736 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80037de:	2017      	movs	r0, #23
 80037e0:	f000 ffc5 	bl	800476e <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80037e4:	2200      	movs	r2, #0
 80037e6:	2100      	movs	r1, #0
 80037e8:	201c      	movs	r0, #28
 80037ea:	f000 ffa4 	bl	8004736 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80037ee:	201c      	movs	r0, #28
 80037f0:	f000 ffbd 	bl	800476e <HAL_NVIC_EnableIRQ>
}
 80037f4:	bf00      	nop
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80037fc:	4b0d      	ldr	r3, [pc, #52]	; (8003834 <MX_CRC_Init+0x3c>)
 80037fe:	4a0e      	ldr	r2, [pc, #56]	; (8003838 <MX_CRC_Init+0x40>)
 8003800:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8003802:	4b0c      	ldr	r3, [pc, #48]	; (8003834 <MX_CRC_Init+0x3c>)
 8003804:	2200      	movs	r2, #0
 8003806:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8003808:	4b0a      	ldr	r3, [pc, #40]	; (8003834 <MX_CRC_Init+0x3c>)
 800380a:	2200      	movs	r2, #0
 800380c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800380e:	4b09      	ldr	r3, [pc, #36]	; (8003834 <MX_CRC_Init+0x3c>)
 8003810:	2200      	movs	r2, #0
 8003812:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8003814:	4b07      	ldr	r3, [pc, #28]	; (8003834 <MX_CRC_Init+0x3c>)
 8003816:	2200      	movs	r2, #0
 8003818:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800381a:	4b06      	ldr	r3, [pc, #24]	; (8003834 <MX_CRC_Init+0x3c>)
 800381c:	2201      	movs	r2, #1
 800381e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8003820:	4804      	ldr	r0, [pc, #16]	; (8003834 <MX_CRC_Init+0x3c>)
 8003822:	f000 ffbf 	bl	80047a4 <HAL_CRC_Init>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d001      	beq.n	8003830 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800382c:	f000 f934 	bl	8003a98 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8003830:	bf00      	nop
 8003832:	bd80      	pop	{r7, pc}
 8003834:	20007770 	.word	0x20007770
 8003838:	40023000 	.word	0x40023000

0800383c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b08e      	sub	sp, #56	; 0x38
 8003840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003842:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003846:	2200      	movs	r2, #0
 8003848:	601a      	str	r2, [r3, #0]
 800384a:	605a      	str	r2, [r3, #4]
 800384c:	609a      	str	r2, [r3, #8]
 800384e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003850:	f107 031c 	add.w	r3, r7, #28
 8003854:	2200      	movs	r2, #0
 8003856:	601a      	str	r2, [r3, #0]
 8003858:	605a      	str	r2, [r3, #4]
 800385a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800385c:	463b      	mov	r3, r7
 800385e:	2200      	movs	r2, #0
 8003860:	601a      	str	r2, [r3, #0]
 8003862:	605a      	str	r2, [r3, #4]
 8003864:	609a      	str	r2, [r3, #8]
 8003866:	60da      	str	r2, [r3, #12]
 8003868:	611a      	str	r2, [r3, #16]
 800386a:	615a      	str	r2, [r3, #20]
 800386c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800386e:	4b2d      	ldr	r3, [pc, #180]	; (8003924 <MX_TIM2_Init+0xe8>)
 8003870:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003874:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10800-1;
 8003876:	4b2b      	ldr	r3, [pc, #172]	; (8003924 <MX_TIM2_Init+0xe8>)
 8003878:	f642 222f 	movw	r2, #10799	; 0x2a2f
 800387c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800387e:	4b29      	ldr	r3, [pc, #164]	; (8003924 <MX_TIM2_Init+0xe8>)
 8003880:	2200      	movs	r2, #0
 8003882:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50-1;
 8003884:	4b27      	ldr	r3, [pc, #156]	; (8003924 <MX_TIM2_Init+0xe8>)
 8003886:	2231      	movs	r2, #49	; 0x31
 8003888:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800388a:	4b26      	ldr	r3, [pc, #152]	; (8003924 <MX_TIM2_Init+0xe8>)
 800388c:	2200      	movs	r2, #0
 800388e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003890:	4b24      	ldr	r3, [pc, #144]	; (8003924 <MX_TIM2_Init+0xe8>)
 8003892:	2200      	movs	r2, #0
 8003894:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003896:	4823      	ldr	r0, [pc, #140]	; (8003924 <MX_TIM2_Init+0xe8>)
 8003898:	f003 ff0c 	bl	80076b4 <HAL_TIM_Base_Init>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d001      	beq.n	80038a6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80038a2:	f000 f8f9 	bl	8003a98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80038a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038aa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80038ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80038b0:	4619      	mov	r1, r3
 80038b2:	481c      	ldr	r0, [pc, #112]	; (8003924 <MX_TIM2_Init+0xe8>)
 80038b4:	f004 fae4 	bl	8007e80 <HAL_TIM_ConfigClockSource>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d001      	beq.n	80038c2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80038be:	f000 f8eb 	bl	8003a98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80038c2:	4818      	ldr	r0, [pc, #96]	; (8003924 <MX_TIM2_Init+0xe8>)
 80038c4:	f003 ff4d 	bl	8007762 <HAL_TIM_PWM_Init>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d001      	beq.n	80038d2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80038ce:	f000 f8e3 	bl	8003a98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038d2:	2300      	movs	r3, #0
 80038d4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038d6:	2300      	movs	r3, #0
 80038d8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80038da:	f107 031c 	add.w	r3, r7, #28
 80038de:	4619      	mov	r1, r3
 80038e0:	4810      	ldr	r0, [pc, #64]	; (8003924 <MX_TIM2_Init+0xe8>)
 80038e2:	f004 ff87 	bl	80087f4 <HAL_TIMEx_MasterConfigSynchronization>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d001      	beq.n	80038f0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80038ec:	f000 f8d4 	bl	8003a98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80038f0:	2360      	movs	r3, #96	; 0x60
 80038f2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80038f4:	2300      	movs	r3, #0
 80038f6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80038f8:	2300      	movs	r3, #0
 80038fa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80038fc:	2300      	movs	r3, #0
 80038fe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003900:	463b      	mov	r3, r7
 8003902:	2200      	movs	r2, #0
 8003904:	4619      	mov	r1, r3
 8003906:	4807      	ldr	r0, [pc, #28]	; (8003924 <MX_TIM2_Init+0xe8>)
 8003908:	f004 f9a6 	bl	8007c58 <HAL_TIM_PWM_ConfigChannel>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d001      	beq.n	8003916 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8003912:	f000 f8c1 	bl	8003a98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003916:	4803      	ldr	r0, [pc, #12]	; (8003924 <MX_TIM2_Init+0xe8>)
 8003918:	f000 faa2 	bl	8003e60 <HAL_TIM_MspPostInit>

}
 800391c:	bf00      	nop
 800391e:	3738      	adds	r7, #56	; 0x38
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}
 8003924:	20007794 	.word	0x20007794

08003928 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b08a      	sub	sp, #40	; 0x28
 800392c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800392e:	f107 0314 	add.w	r3, r7, #20
 8003932:	2200      	movs	r2, #0
 8003934:	601a      	str	r2, [r3, #0]
 8003936:	605a      	str	r2, [r3, #4]
 8003938:	609a      	str	r2, [r3, #8]
 800393a:	60da      	str	r2, [r3, #12]
 800393c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800393e:	4b51      	ldr	r3, [pc, #324]	; (8003a84 <MX_GPIO_Init+0x15c>)
 8003940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003942:	4a50      	ldr	r2, [pc, #320]	; (8003a84 <MX_GPIO_Init+0x15c>)
 8003944:	f043 0302 	orr.w	r3, r3, #2
 8003948:	6313      	str	r3, [r2, #48]	; 0x30
 800394a:	4b4e      	ldr	r3, [pc, #312]	; (8003a84 <MX_GPIO_Init+0x15c>)
 800394c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	613b      	str	r3, [r7, #16]
 8003954:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003956:	4b4b      	ldr	r3, [pc, #300]	; (8003a84 <MX_GPIO_Init+0x15c>)
 8003958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395a:	4a4a      	ldr	r2, [pc, #296]	; (8003a84 <MX_GPIO_Init+0x15c>)
 800395c:	f043 0301 	orr.w	r3, r3, #1
 8003960:	6313      	str	r3, [r2, #48]	; 0x30
 8003962:	4b48      	ldr	r3, [pc, #288]	; (8003a84 <MX_GPIO_Init+0x15c>)
 8003964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	60fb      	str	r3, [r7, #12]
 800396c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800396e:	4b45      	ldr	r3, [pc, #276]	; (8003a84 <MX_GPIO_Init+0x15c>)
 8003970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003972:	4a44      	ldr	r2, [pc, #272]	; (8003a84 <MX_GPIO_Init+0x15c>)
 8003974:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003978:	6313      	str	r3, [r2, #48]	; 0x30
 800397a:	4b42      	ldr	r3, [pc, #264]	; (8003a84 <MX_GPIO_Init+0x15c>)
 800397c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003982:	60bb      	str	r3, [r7, #8]
 8003984:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003986:	4b3f      	ldr	r3, [pc, #252]	; (8003a84 <MX_GPIO_Init+0x15c>)
 8003988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398a:	4a3e      	ldr	r2, [pc, #248]	; (8003a84 <MX_GPIO_Init+0x15c>)
 800398c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003990:	6313      	str	r3, [r2, #48]	; 0x30
 8003992:	4b3c      	ldr	r3, [pc, #240]	; (8003a84 <MX_GPIO_Init+0x15c>)
 8003994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800399a:	607b      	str	r3, [r7, #4]
 800399c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800399e:	4b39      	ldr	r3, [pc, #228]	; (8003a84 <MX_GPIO_Init+0x15c>)
 80039a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a2:	4a38      	ldr	r2, [pc, #224]	; (8003a84 <MX_GPIO_Init+0x15c>)
 80039a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039a8:	6313      	str	r3, [r2, #48]	; 0x30
 80039aa:	4b36      	ldr	r3, [pc, #216]	; (8003a84 <MX_GPIO_Init+0x15c>)
 80039ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039b2:	603b      	str	r3, [r7, #0]
 80039b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80039b6:	2200      	movs	r2, #0
 80039b8:	2110      	movs	r1, #16
 80039ba:	4833      	ldr	r0, [pc, #204]	; (8003a88 <MX_GPIO_Init+0x160>)
 80039bc:	f001 fa40 	bl	8004e40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0, GPIO_PIN_RESET);
 80039c0:	2200      	movs	r2, #0
 80039c2:	210f      	movs	r1, #15
 80039c4:	4831      	ldr	r0, [pc, #196]	; (8003a8c <MX_GPIO_Init+0x164>)
 80039c6:	f001 fa3b 	bl	8004e40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7|GPIO_PIN_6, GPIO_PIN_RESET);
 80039ca:	2200      	movs	r2, #0
 80039cc:	21c0      	movs	r1, #192	; 0xc0
 80039ce:	4830      	ldr	r0, [pc, #192]	; (8003a90 <MX_GPIO_Init+0x168>)
 80039d0:	f001 fa36 	bl	8004e40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80039d4:	2310      	movs	r3, #16
 80039d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039d8:	2301      	movs	r3, #1
 80039da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039dc:	2300      	movs	r3, #0
 80039de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039e0:	2300      	movs	r3, #0
 80039e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039e4:	f107 0314 	add.w	r3, r7, #20
 80039e8:	4619      	mov	r1, r3
 80039ea:	4827      	ldr	r0, [pc, #156]	; (8003a88 <MX_GPIO_Init+0x160>)
 80039ec:	f001 f864 	bl	8004ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI3 PI2 PI1 PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0;
 80039f0:	230f      	movs	r3, #15
 80039f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039f4:	2301      	movs	r3, #1
 80039f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039f8:	2300      	movs	r3, #0
 80039fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039fc:	2300      	movs	r3, #0
 80039fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003a00:	f107 0314 	add.w	r3, r7, #20
 8003a04:	4619      	mov	r1, r3
 8003a06:	4821      	ldr	r0, [pc, #132]	; (8003a8c <MX_GPIO_Init+0x164>)
 8003a08:	f001 f856 	bl	8004ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003a0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003a12:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003a16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a1c:	f107 0314 	add.w	r3, r7, #20
 8003a20:	4619      	mov	r1, r3
 8003a22:	481c      	ldr	r0, [pc, #112]	; (8003a94 <MX_GPIO_Init+0x16c>)
 8003a24:	f001 f848 	bl	8004ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8003a28:	23c0      	movs	r3, #192	; 0xc0
 8003a2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a30:	2300      	movs	r3, #0
 8003a32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a34:	2300      	movs	r3, #0
 8003a36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003a38:	f107 0314 	add.w	r3, r7, #20
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	4814      	ldr	r0, [pc, #80]	; (8003a90 <MX_GPIO_Init+0x168>)
 8003a40:	f001 f83a 	bl	8004ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003a44:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003a48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a52:	f107 0314 	add.w	r3, r7, #20
 8003a56:	4619      	mov	r1, r3
 8003a58:	480b      	ldr	r0, [pc, #44]	; (8003a88 <MX_GPIO_Init+0x160>)
 8003a5a:	f001 f82d 	bl	8004ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003a5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003a64:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003a68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a6e:	f107 0314 	add.w	r3, r7, #20
 8003a72:	4619      	mov	r1, r3
 8003a74:	4804      	ldr	r0, [pc, #16]	; (8003a88 <MX_GPIO_Init+0x160>)
 8003a76:	f001 f81f 	bl	8004ab8 <HAL_GPIO_Init>

}
 8003a7a:	bf00      	nop
 8003a7c:	3728      	adds	r7, #40	; 0x28
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	40023800 	.word	0x40023800
 8003a88:	40020400 	.word	0x40020400
 8003a8c:	40022000 	.word	0x40022000
 8003a90:	40021800 	.word	0x40021800
 8003a94:	40020000 	.word	0x40020000

08003a98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003a9c:	b672      	cpsid	i
}
 8003a9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "Error\n\r"), 100);
 8003aa0:	4905      	ldr	r1, [pc, #20]	; (8003ab8 <Error_Handler+0x20>)
 8003aa2:	4806      	ldr	r0, [pc, #24]	; (8003abc <Error_Handler+0x24>)
 8003aa4:	f00f fcd2 	bl	801344c <siprintf>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	b29a      	uxth	r2, r3
 8003aac:	2364      	movs	r3, #100	; 0x64
 8003aae:	4903      	ldr	r1, [pc, #12]	; (8003abc <Error_Handler+0x24>)
 8003ab0:	4803      	ldr	r0, [pc, #12]	; (8003ac0 <Error_Handler+0x28>)
 8003ab2:	f004 ff99 	bl	80089e8 <HAL_UART_Transmit>
 8003ab6:	e7f3      	b.n	8003aa0 <Error_Handler+0x8>
 8003ab8:	08018978 	.word	0x08018978
 8003abc:	2000786c 	.word	0x2000786c
 8003ac0:	200077e4 	.word	0x200077e4

08003ac4 <stepRev>:
#include "usart.h"

#define PULSE 200
#define GEAR 139

void stepRev(int ANG) {
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b086      	sub	sp, #24
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
	// ENA D2 PG7 GPIOG GPIO_PIN_6
	// CLK D3 PB4 GPIOB GPIO_PIN_4
	// DIR D4 PG7 GPIOG GPIO_PIN_7


  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);  // ENA
 8003acc:	2200      	movs	r2, #0
 8003ace:	2140      	movs	r1, #64	; 0x40
 8003ad0:	482d      	ldr	r0, [pc, #180]	; (8003b88 <stepRev+0xc4>)
 8003ad2:	f001 f9b5 	bl	8004e40 <HAL_GPIO_WritePin>

  if (ANG != 0) {
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d04c      	beq.n	8003b76 <stepRev+0xb2>
    int direction = (ANG > 0) ? 1 : -1;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	dd01      	ble.n	8003ae6 <stepRev+0x22>
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e001      	b.n	8003aea <stepRev+0x26>
 8003ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8003aea:	613b      	str	r3, [r7, #16]
    ANG *= direction;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	693a      	ldr	r2, [r7, #16]
 8003af0:	fb02 f303 	mul.w	r3, r2, r3
 8003af4:	607b      	str	r3, [r7, #4]
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, direction == 1 ? GPIO_PIN_SET : GPIO_PIN_RESET); // DIR
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	bf0c      	ite	eq
 8003afc:	2301      	moveq	r3, #1
 8003afe:	2300      	movne	r3, #0
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	461a      	mov	r2, r3
 8003b04:	2180      	movs	r1, #128	; 0x80
 8003b06:	4820      	ldr	r0, [pc, #128]	; (8003b88 <stepRev+0xc4>)
 8003b08:	f001 f99a 	bl	8004e40 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET); // ENA
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	2140      	movs	r1, #64	; 0x40
 8003b10:	481d      	ldr	r0, [pc, #116]	; (8003b88 <stepRev+0xc4>)
 8003b12:	f001 f995 	bl	8004e40 <HAL_GPIO_WritePin>
    uint32_t steps = PULSE * GEAR * ANG / 360.0;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f646 4298 	movw	r2, #27800	; 0x6c98
 8003b1c:	fb02 f303 	mul.w	r3, r2, r3
 8003b20:	4618      	mov	r0, r3
 8003b22:	f7fc fd2f 	bl	8000584 <__aeabi_i2d>
 8003b26:	f04f 0200 	mov.w	r2, #0
 8003b2a:	4b18      	ldr	r3, [pc, #96]	; (8003b8c <stepRev+0xc8>)
 8003b2c:	f7fc febe 	bl	80008ac <__aeabi_ddiv>
 8003b30:	4602      	mov	r2, r0
 8003b32:	460b      	mov	r3, r1
 8003b34:	4610      	mov	r0, r2
 8003b36:	4619      	mov	r1, r3
 8003b38:	f7fd f866 	bl	8000c08 <__aeabi_d2uiz>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	60fb      	str	r3, [r7, #12]

    for (int i = 0; i < steps; i++) {
 8003b40:	2300      	movs	r3, #0
 8003b42:	617b      	str	r3, [r7, #20]
 8003b44:	e012      	b.n	8003b6c <stepRev+0xa8>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET); //CLK
 8003b46:	2201      	movs	r2, #1
 8003b48:	2110      	movs	r1, #16
 8003b4a:	4811      	ldr	r0, [pc, #68]	; (8003b90 <stepRev+0xcc>)
 8003b4c:	f001 f978 	bl	8004e40 <HAL_GPIO_WritePin>
      HAL_Delay(1); // 변경된 지연 함수 사용
 8003b50:	2001      	movs	r0, #1
 8003b52:	f000 fcf1 	bl	8004538 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); //CLK
 8003b56:	2200      	movs	r2, #0
 8003b58:	2110      	movs	r1, #16
 8003b5a:	480d      	ldr	r0, [pc, #52]	; (8003b90 <stepRev+0xcc>)
 8003b5c:	f001 f970 	bl	8004e40 <HAL_GPIO_WritePin>
      HAL_Delay(1); // 변경된 지연 함수 사용
 8003b60:	2001      	movs	r0, #1
 8003b62:	f000 fce9 	bl	8004538 <HAL_Delay>
    for (int i = 0; i < steps; i++) {
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	3301      	adds	r3, #1
 8003b6a:	617b      	str	r3, [r7, #20]
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	68fa      	ldr	r2, [r7, #12]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d8e8      	bhi.n	8003b46 <stepRev+0x82>
  }
  else {
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET); // ENA
  }

}
 8003b74:	e004      	b.n	8003b80 <stepRev+0xbc>
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET); // ENA
 8003b76:	2200      	movs	r2, #0
 8003b78:	2140      	movs	r1, #64	; 0x40
 8003b7a:	4803      	ldr	r0, [pc, #12]	; (8003b88 <stepRev+0xc4>)
 8003b7c:	f001 f960 	bl	8004e40 <HAL_GPIO_WritePin>
}
 8003b80:	bf00      	nop
 8003b82:	3718      	adds	r7, #24
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	40021800 	.word	0x40021800
 8003b8c:	40768000 	.word	0x40768000
 8003b90:	40020400 	.word	0x40020400

08003b94 <stepLin>:

void stepLin(int DIST) {
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]

	// ENA D5 PI0 GPIOI GPIO_PIN_0
	// CLK D8 PI2 GPIOI GPIO_PIN_2
	// DIR D7 PI3 GPIOI GPIO_PIN_3

  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_SET);  // ENA
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	2101      	movs	r1, #1
 8003ba0:	4829      	ldr	r0, [pc, #164]	; (8003c48 <stepLin+0xb4>)
 8003ba2:	f001 f94d 	bl	8004e40 <HAL_GPIO_WritePin>

  if (DIST != 0) {
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d03e      	beq.n	8003c2a <stepLin+0x96>
    int direction = (DIST > 0) ? 1 : -1;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	dd01      	ble.n	8003bb6 <stepLin+0x22>
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e001      	b.n	8003bba <stepLin+0x26>
 8003bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8003bba:	613b      	str	r3, [r7, #16]
    DIST *= direction;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	693a      	ldr	r2, [r7, #16]
 8003bc0:	fb02 f303 	mul.w	r3, r2, r3
 8003bc4:	607b      	str	r3, [r7, #4]
    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_3, direction == 1 ? GPIO_PIN_SET : GPIO_PIN_RESET); // DIR
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	bf0c      	ite	eq
 8003bcc:	2301      	moveq	r3, #1
 8003bce:	2300      	movne	r3, #0
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	2108      	movs	r1, #8
 8003bd6:	481c      	ldr	r0, [pc, #112]	; (8003c48 <stepLin+0xb4>)
 8003bd8:	f001 f932 	bl	8004e40 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_RESET);  // ENA
 8003bdc:	2200      	movs	r2, #0
 8003bde:	2101      	movs	r1, #1
 8003be0:	4819      	ldr	r0, [pc, #100]	; (8003c48 <stepLin+0xb4>)
 8003be2:	f001 f92d 	bl	8004e40 <HAL_GPIO_WritePin>
    uint32_t steps = 25*DIST;
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	4613      	mov	r3, r2
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	4413      	add	r3, r2
 8003bee:	009a      	lsls	r2, r3, #2
 8003bf0:	4413      	add	r3, r2
 8003bf2:	60fb      	str	r3, [r7, #12]
	//HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d\n ", steps), 1000);


    for (int i = 0; i < steps; i++) {
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	617b      	str	r3, [r7, #20]
 8003bf8:	e012      	b.n	8003c20 <stepLin+0x8c>
      HAL_GPIO_WritePin(GPIOI, GPIO_PIN_2, GPIO_PIN_SET); // CLK
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	2104      	movs	r1, #4
 8003bfe:	4812      	ldr	r0, [pc, #72]	; (8003c48 <stepLin+0xb4>)
 8003c00:	f001 f91e 	bl	8004e40 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8003c04:	2001      	movs	r0, #1
 8003c06:	f000 fc97 	bl	8004538 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOI, GPIO_PIN_2, GPIO_PIN_RESET); // CLK
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	2104      	movs	r1, #4
 8003c0e:	480e      	ldr	r0, [pc, #56]	; (8003c48 <stepLin+0xb4>)
 8003c10:	f001 f916 	bl	8004e40 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8003c14:	2001      	movs	r0, #1
 8003c16:	f000 fc8f 	bl	8004538 <HAL_Delay>
    for (int i = 0; i < steps; i++) {
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	3301      	adds	r3, #1
 8003c1e:	617b      	str	r3, [r7, #20]
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d8e8      	bhi.n	8003bfa <stepLin+0x66>
 8003c28:	e004      	b.n	8003c34 <stepLin+0xa0>
    }
  }
  else {
    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_RESET);  // ENA
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	2101      	movs	r1, #1
 8003c2e:	4806      	ldr	r0, [pc, #24]	; (8003c48 <stepLin+0xb4>)
 8003c30:	f001 f906 	bl	8004e40 <HAL_GPIO_WritePin>
  }

  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_SET);  // ENA
 8003c34:	2201      	movs	r2, #1
 8003c36:	2101      	movs	r1, #1
 8003c38:	4803      	ldr	r0, [pc, #12]	; (8003c48 <stepLin+0xb4>)
 8003c3a:	f001 f901 	bl	8004e40 <HAL_GPIO_WritePin>

}
 8003c3e:	bf00      	nop
 8003c40:	3718      	adds	r7, #24
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	40022000 	.word	0x40022000

08003c4c <servo_angle>:

void servo_angle(TIM_HandleTypeDef *htim, uint32_t channel, int step) {
 8003c4c:	b480      	push	{r7}
 8003c4e:	b087      	sub	sp, #28
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	60b9      	str	r1, [r7, #8]
 8003c56:	607a      	str	r2, [r7, #4]

	// 1 step is 0.8 mm
    if (step > 17)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2b11      	cmp	r3, #17
 8003c5c:	dd01      	ble.n	8003c62 <servo_angle+0x16>
    	step = 17; // 최대 각도 제한
 8003c5e:	2311      	movs	r3, #17
 8003c60:	607b      	str	r3, [r7, #4]

    int pulse_width = 21-step; // 듀티 사이클 계산 (0도에서 180도까지)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f1c3 0315 	rsb	r3, r3, #21
 8003c68:	617b      	str	r3, [r7, #20]
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width); // 듀티 사이클 변경
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d104      	bne.n	8003c7a <servo_angle+0x2e>
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	697a      	ldr	r2, [r7, #20]
 8003c76:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003c78:	e023      	b.n	8003cc2 <servo_angle+0x76>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width); // 듀티 사이클 변경
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	2b04      	cmp	r3, #4
 8003c7e:	d104      	bne.n	8003c8a <servo_angle+0x3e>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003c88:	e01b      	b.n	8003cc2 <servo_angle+0x76>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width); // 듀티 사이클 변경
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	2b08      	cmp	r3, #8
 8003c8e:	d104      	bne.n	8003c9a <servo_angle+0x4e>
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8003c98:	e013      	b.n	8003cc2 <servo_angle+0x76>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width); // 듀티 사이클 변경
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	2b0c      	cmp	r3, #12
 8003c9e:	d104      	bne.n	8003caa <servo_angle+0x5e>
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	6413      	str	r3, [r2, #64]	; 0x40
}
 8003ca8:	e00b      	b.n	8003cc2 <servo_angle+0x76>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width); // 듀티 사이클 변경
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	2b10      	cmp	r3, #16
 8003cae:	d104      	bne.n	8003cba <servo_angle+0x6e>
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	6593      	str	r3, [r2, #88]	; 0x58
}
 8003cb8:	e003      	b.n	8003cc2 <servo_angle+0x76>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width); // 듀티 사이클 변경
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8003cc2:	bf00      	nop
 8003cc4:	371c      	adds	r7, #28
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr
	...

08003cd0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003cd6:	4b12      	ldr	r3, [pc, #72]	; (8003d20 <HAL_MspInit+0x50>)
 8003cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cda:	4a11      	ldr	r2, [pc, #68]	; (8003d20 <HAL_MspInit+0x50>)
 8003cdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ce0:	6413      	str	r3, [r2, #64]	; 0x40
 8003ce2:	4b0f      	ldr	r3, [pc, #60]	; (8003d20 <HAL_MspInit+0x50>)
 8003ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cea:	607b      	str	r3, [r7, #4]
 8003cec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cee:	4b0c      	ldr	r3, [pc, #48]	; (8003d20 <HAL_MspInit+0x50>)
 8003cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf2:	4a0b      	ldr	r2, [pc, #44]	; (8003d20 <HAL_MspInit+0x50>)
 8003cf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cf8:	6453      	str	r3, [r2, #68]	; 0x44
 8003cfa:	4b09      	ldr	r3, [pc, #36]	; (8003d20 <HAL_MspInit+0x50>)
 8003cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d02:	603b      	str	r3, [r7, #0]
 8003d04:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8003d06:	2200      	movs	r2, #0
 8003d08:	2100      	movs	r1, #0
 8003d0a:	2005      	movs	r0, #5
 8003d0c:	f000 fd13 	bl	8004736 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8003d10:	2005      	movs	r0, #5
 8003d12:	f000 fd2c 	bl	800476e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d16:	bf00      	nop
 8003d18:	3708      	adds	r7, #8
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	40023800 	.word	0x40023800

08003d24 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b085      	sub	sp, #20
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a0a      	ldr	r2, [pc, #40]	; (8003d5c <HAL_CRC_MspInit+0x38>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d10b      	bne.n	8003d4e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8003d36:	4b0a      	ldr	r3, [pc, #40]	; (8003d60 <HAL_CRC_MspInit+0x3c>)
 8003d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3a:	4a09      	ldr	r2, [pc, #36]	; (8003d60 <HAL_CRC_MspInit+0x3c>)
 8003d3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003d40:	6313      	str	r3, [r2, #48]	; 0x30
 8003d42:	4b07      	ldr	r3, [pc, #28]	; (8003d60 <HAL_CRC_MspInit+0x3c>)
 8003d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d4a:	60fb      	str	r3, [r7, #12]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8003d4e:	bf00      	nop
 8003d50:	3714      	adds	r7, #20
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop
 8003d5c:	40023000 	.word	0x40023000
 8003d60:	40023800 	.word	0x40023800

08003d64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b0aa      	sub	sp, #168	; 0xa8
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d6c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003d70:	2200      	movs	r2, #0
 8003d72:	601a      	str	r2, [r3, #0]
 8003d74:	605a      	str	r2, [r3, #4]
 8003d76:	609a      	str	r2, [r3, #8]
 8003d78:	60da      	str	r2, [r3, #12]
 8003d7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003d7c:	f107 0310 	add.w	r3, r7, #16
 8003d80:	2284      	movs	r2, #132	; 0x84
 8003d82:	2100      	movs	r1, #0
 8003d84:	4618      	mov	r0, r3
 8003d86:	f00e fbe9 	bl	801255c <memset>
  if(hi2c->Instance==I2C1)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a22      	ldr	r2, [pc, #136]	; (8003e18 <HAL_I2C_MspInit+0xb4>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d13c      	bne.n	8003e0e <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003d94:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003d98:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003d9e:	f107 0310 	add.w	r3, r7, #16
 8003da2:	4618      	mov	r0, r3
 8003da4:	f003 f896 	bl	8006ed4 <HAL_RCCEx_PeriphCLKConfig>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d001      	beq.n	8003db2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003dae:	f7ff fe73 	bl	8003a98 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003db2:	4b1a      	ldr	r3, [pc, #104]	; (8003e1c <HAL_I2C_MspInit+0xb8>)
 8003db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db6:	4a19      	ldr	r2, [pc, #100]	; (8003e1c <HAL_I2C_MspInit+0xb8>)
 8003db8:	f043 0302 	orr.w	r3, r3, #2
 8003dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8003dbe:	4b17      	ldr	r3, [pc, #92]	; (8003e1c <HAL_I2C_MspInit+0xb8>)
 8003dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc2:	f003 0302 	and.w	r3, r3, #2
 8003dc6:	60fb      	str	r3, [r7, #12]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003dca:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003dce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003dd2:	2312      	movs	r3, #18
 8003dd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dde:	2303      	movs	r3, #3
 8003de0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003de4:	2304      	movs	r3, #4
 8003de6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dea:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003dee:	4619      	mov	r1, r3
 8003df0:	480b      	ldr	r0, [pc, #44]	; (8003e20 <HAL_I2C_MspInit+0xbc>)
 8003df2:	f000 fe61 	bl	8004ab8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003df6:	4b09      	ldr	r3, [pc, #36]	; (8003e1c <HAL_I2C_MspInit+0xb8>)
 8003df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfa:	4a08      	ldr	r2, [pc, #32]	; (8003e1c <HAL_I2C_MspInit+0xb8>)
 8003dfc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003e00:	6413      	str	r3, [r2, #64]	; 0x40
 8003e02:	4b06      	ldr	r3, [pc, #24]	; (8003e1c <HAL_I2C_MspInit+0xb8>)
 8003e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e0a:	60bb      	str	r3, [r7, #8]
 8003e0c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003e0e:	bf00      	nop
 8003e10:	37a8      	adds	r7, #168	; 0xa8
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	40005400 	.word	0x40005400
 8003e1c:	40023800 	.word	0x40023800
 8003e20:	40020400 	.word	0x40020400

08003e24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b085      	sub	sp, #20
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e34:	d10b      	bne.n	8003e4e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003e36:	4b09      	ldr	r3, [pc, #36]	; (8003e5c <HAL_TIM_Base_MspInit+0x38>)
 8003e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3a:	4a08      	ldr	r2, [pc, #32]	; (8003e5c <HAL_TIM_Base_MspInit+0x38>)
 8003e3c:	f043 0301 	orr.w	r3, r3, #1
 8003e40:	6413      	str	r3, [r2, #64]	; 0x40
 8003e42:	4b06      	ldr	r3, [pc, #24]	; (8003e5c <HAL_TIM_Base_MspInit+0x38>)
 8003e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e46:	f003 0301 	and.w	r3, r3, #1
 8003e4a:	60fb      	str	r3, [r7, #12]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003e4e:	bf00      	nop
 8003e50:	3714      	adds	r7, #20
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr
 8003e5a:	bf00      	nop
 8003e5c:	40023800 	.word	0x40023800

08003e60 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b088      	sub	sp, #32
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e68:	f107 030c 	add.w	r3, r7, #12
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	601a      	str	r2, [r3, #0]
 8003e70:	605a      	str	r2, [r3, #4]
 8003e72:	609a      	str	r2, [r3, #8]
 8003e74:	60da      	str	r2, [r3, #12]
 8003e76:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e80:	d11c      	bne.n	8003ebc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e82:	4b10      	ldr	r3, [pc, #64]	; (8003ec4 <HAL_TIM_MspPostInit+0x64>)
 8003e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e86:	4a0f      	ldr	r2, [pc, #60]	; (8003ec4 <HAL_TIM_MspPostInit+0x64>)
 8003e88:	f043 0301 	orr.w	r3, r3, #1
 8003e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e8e:	4b0d      	ldr	r3, [pc, #52]	; (8003ec4 <HAL_TIM_MspPostInit+0x64>)
 8003e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e92:	f003 0301 	and.w	r3, r3, #1
 8003e96:	60bb      	str	r3, [r7, #8]
 8003e98:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003e9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e9e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ea0:	2302      	movs	r3, #2
 8003ea2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003eac:	2301      	movs	r3, #1
 8003eae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003eb0:	f107 030c 	add.w	r3, r7, #12
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	4804      	ldr	r0, [pc, #16]	; (8003ec8 <HAL_TIM_MspPostInit+0x68>)
 8003eb8:	f000 fdfe 	bl	8004ab8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003ebc:	bf00      	nop
 8003ebe:	3720      	adds	r7, #32
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	40023800 	.word	0x40023800
 8003ec8:	40020000 	.word	0x40020000

08003ecc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b0ac      	sub	sp, #176	; 0xb0
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ed4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003ed8:	2200      	movs	r2, #0
 8003eda:	601a      	str	r2, [r3, #0]
 8003edc:	605a      	str	r2, [r3, #4]
 8003ede:	609a      	str	r2, [r3, #8]
 8003ee0:	60da      	str	r2, [r3, #12]
 8003ee2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003ee4:	f107 0318 	add.w	r3, r7, #24
 8003ee8:	2284      	movs	r2, #132	; 0x84
 8003eea:	2100      	movs	r1, #0
 8003eec:	4618      	mov	r0, r3
 8003eee:	f00e fb35 	bl	801255c <memset>
  if(huart->Instance==USART1)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a32      	ldr	r2, [pc, #200]	; (8003fc0 <HAL_UART_MspInit+0xf4>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d15c      	bne.n	8003fb6 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003efc:	2340      	movs	r3, #64	; 0x40
 8003efe:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003f00:	2300      	movs	r3, #0
 8003f02:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003f04:	f107 0318 	add.w	r3, r7, #24
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f002 ffe3 	bl	8006ed4 <HAL_RCCEx_PeriphCLKConfig>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d001      	beq.n	8003f18 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003f14:	f7ff fdc0 	bl	8003a98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003f18:	4b2a      	ldr	r3, [pc, #168]	; (8003fc4 <HAL_UART_MspInit+0xf8>)
 8003f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f1c:	4a29      	ldr	r2, [pc, #164]	; (8003fc4 <HAL_UART_MspInit+0xf8>)
 8003f1e:	f043 0310 	orr.w	r3, r3, #16
 8003f22:	6453      	str	r3, [r2, #68]	; 0x44
 8003f24:	4b27      	ldr	r3, [pc, #156]	; (8003fc4 <HAL_UART_MspInit+0xf8>)
 8003f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f28:	f003 0310 	and.w	r3, r3, #16
 8003f2c:	617b      	str	r3, [r7, #20]
 8003f2e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f30:	4b24      	ldr	r3, [pc, #144]	; (8003fc4 <HAL_UART_MspInit+0xf8>)
 8003f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f34:	4a23      	ldr	r2, [pc, #140]	; (8003fc4 <HAL_UART_MspInit+0xf8>)
 8003f36:	f043 0302 	orr.w	r3, r3, #2
 8003f3a:	6313      	str	r3, [r2, #48]	; 0x30
 8003f3c:	4b21      	ldr	r3, [pc, #132]	; (8003fc4 <HAL_UART_MspInit+0xf8>)
 8003f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f40:	f003 0302 	and.w	r3, r3, #2
 8003f44:	613b      	str	r3, [r7, #16]
 8003f46:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f48:	4b1e      	ldr	r3, [pc, #120]	; (8003fc4 <HAL_UART_MspInit+0xf8>)
 8003f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f4c:	4a1d      	ldr	r2, [pc, #116]	; (8003fc4 <HAL_UART_MspInit+0xf8>)
 8003f4e:	f043 0301 	orr.w	r3, r3, #1
 8003f52:	6313      	str	r3, [r2, #48]	; 0x30
 8003f54:	4b1b      	ldr	r3, [pc, #108]	; (8003fc4 <HAL_UART_MspInit+0xf8>)
 8003f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f58:	f003 0301 	and.w	r3, r3, #1
 8003f5c:	60fb      	str	r3, [r7, #12]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003f60:	2380      	movs	r3, #128	; 0x80
 8003f62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f66:	2302      	movs	r3, #2
 8003f68:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f72:	2303      	movs	r3, #3
 8003f74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003f78:	2307      	movs	r3, #7
 8003f7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f7e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003f82:	4619      	mov	r1, r3
 8003f84:	4810      	ldr	r0, [pc, #64]	; (8003fc8 <HAL_UART_MspInit+0xfc>)
 8003f86:	f000 fd97 	bl	8004ab8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003f8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f92:	2302      	movs	r3, #2
 8003f94:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003fa4:	2307      	movs	r3, #7
 8003fa6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003faa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003fae:	4619      	mov	r1, r3
 8003fb0:	4806      	ldr	r0, [pc, #24]	; (8003fcc <HAL_UART_MspInit+0x100>)
 8003fb2:	f000 fd81 	bl	8004ab8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003fb6:	bf00      	nop
 8003fb8:	37b0      	adds	r7, #176	; 0xb0
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	40011000 	.word	0x40011000
 8003fc4:	40023800 	.word	0x40023800
 8003fc8:	40020400 	.word	0x40020400
 8003fcc:	40020000 	.word	0x40020000

08003fd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003fd4:	e7fe      	b.n	8003fd4 <NMI_Handler+0x4>

08003fd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003fd6:	b480      	push	{r7}
 8003fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003fda:	e7fe      	b.n	8003fda <HardFault_Handler+0x4>

08003fdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003fe0:	e7fe      	b.n	8003fe0 <MemManage_Handler+0x4>

08003fe2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003fe2:	b480      	push	{r7}
 8003fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003fe6:	e7fe      	b.n	8003fe6 <BusFault_Handler+0x4>

08003fe8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003fec:	e7fe      	b.n	8003fec <UsageFault_Handler+0x4>

08003fee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003fee:	b480      	push	{r7}
 8003ff0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003ff2:	bf00      	nop
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004000:	bf00      	nop
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr

0800400a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800400a:	b480      	push	{r7}
 800400c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800400e:	bf00      	nop
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr

08004018 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800401c:	f000 fa6c 	bl	80044f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004020:	bf00      	nop
 8004022:	bd80      	pop	{r7, pc}

08004024 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8004024:	b480      	push	{r7}
 8004026:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8004028:	bf00      	nop
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr

08004032 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004032:	b580      	push	{r7, lr}
 8004034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8004036:	f44f 7080 	mov.w	r0, #256	; 0x100
 800403a:	f000 ff1b 	bl	8004e74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800403e:	bf00      	nop
 8004040:	bd80      	pop	{r7, pc}
	...

08004044 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004048:	4802      	ldr	r0, [pc, #8]	; (8004054 <TIM2_IRQHandler+0x10>)
 800404a:	f003 fce5 	bl	8007a18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800404e:	bf00      	nop
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	20007794 	.word	0x20007794

08004058 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800405c:	4802      	ldr	r0, [pc, #8]	; (8004068 <I2C1_EV_IRQHandler+0x10>)
 800405e:	f001 f9a7 	bl	80053b0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004062:	bf00      	nop
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	2000729c 	.word	0x2000729c

0800406c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004070:	4802      	ldr	r0, [pc, #8]	; (800407c <I2C1_ER_IRQHandler+0x10>)
 8004072:	f001 f9b7 	bl	80053e4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8004076:	bf00      	nop
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	2000729c 	.word	0x2000729c

08004080 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004084:	4802      	ldr	r0, [pc, #8]	; (8004090 <USART1_IRQHandler+0x10>)
 8004086:	f004 fdf7 	bl	8008c78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800408a:	bf00      	nop
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	200077e4 	.word	0x200077e4

08004094 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8004098:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800409c:	f000 feea 	bl	8004e74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80040a0:	bf00      	nop
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b086      	sub	sp, #24
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80040ac:	4a14      	ldr	r2, [pc, #80]	; (8004100 <_sbrk+0x5c>)
 80040ae:	4b15      	ldr	r3, [pc, #84]	; (8004104 <_sbrk+0x60>)
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80040b8:	4b13      	ldr	r3, [pc, #76]	; (8004108 <_sbrk+0x64>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d102      	bne.n	80040c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80040c0:	4b11      	ldr	r3, [pc, #68]	; (8004108 <_sbrk+0x64>)
 80040c2:	4a12      	ldr	r2, [pc, #72]	; (800410c <_sbrk+0x68>)
 80040c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80040c6:	4b10      	ldr	r3, [pc, #64]	; (8004108 <_sbrk+0x64>)
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4413      	add	r3, r2
 80040ce:	693a      	ldr	r2, [r7, #16]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d207      	bcs.n	80040e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80040d4:	f00e fa02 	bl	80124dc <__errno>
 80040d8:	4603      	mov	r3, r0
 80040da:	220c      	movs	r2, #12
 80040dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80040de:	f04f 33ff 	mov.w	r3, #4294967295
 80040e2:	e009      	b.n	80040f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80040e4:	4b08      	ldr	r3, [pc, #32]	; (8004108 <_sbrk+0x64>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80040ea:	4b07      	ldr	r3, [pc, #28]	; (8004108 <_sbrk+0x64>)
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4413      	add	r3, r2
 80040f2:	4a05      	ldr	r2, [pc, #20]	; (8004108 <_sbrk+0x64>)
 80040f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80040f6:	68fb      	ldr	r3, [r7, #12]
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3718      	adds	r7, #24
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	20050000 	.word	0x20050000
 8004104:	00000800 	.word	0x00000800
 8004108:	200077e0 	.word	0x200077e0
 800410c:	2000c678 	.word	0x2000c678

08004110 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004110:	b480      	push	{r7}
 8004112:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004114:	4b06      	ldr	r3, [pc, #24]	; (8004130 <SystemInit+0x20>)
 8004116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800411a:	4a05      	ldr	r2, [pc, #20]	; (8004130 <SystemInit+0x20>)
 800411c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004120:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004124:	bf00      	nop
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	e000ed00 	.word	0xe000ed00

08004134 <MX_USART1_UART_Init>:
uint8_t txMsg[64];
uint8_t rxMsg[65];


void MX_USART1_UART_Init(void)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004138:	4b14      	ldr	r3, [pc, #80]	; (800418c <MX_USART1_UART_Init+0x58>)
 800413a:	4a15      	ldr	r2, [pc, #84]	; (8004190 <MX_USART1_UART_Init+0x5c>)
 800413c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800413e:	4b13      	ldr	r3, [pc, #76]	; (800418c <MX_USART1_UART_Init+0x58>)
 8004140:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004144:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004146:	4b11      	ldr	r3, [pc, #68]	; (800418c <MX_USART1_UART_Init+0x58>)
 8004148:	2200      	movs	r2, #0
 800414a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800414c:	4b0f      	ldr	r3, [pc, #60]	; (800418c <MX_USART1_UART_Init+0x58>)
 800414e:	2200      	movs	r2, #0
 8004150:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004152:	4b0e      	ldr	r3, [pc, #56]	; (800418c <MX_USART1_UART_Init+0x58>)
 8004154:	2200      	movs	r2, #0
 8004156:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004158:	4b0c      	ldr	r3, [pc, #48]	; (800418c <MX_USART1_UART_Init+0x58>)
 800415a:	220c      	movs	r2, #12
 800415c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800415e:	4b0b      	ldr	r3, [pc, #44]	; (800418c <MX_USART1_UART_Init+0x58>)
 8004160:	2200      	movs	r2, #0
 8004162:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004164:	4b09      	ldr	r3, [pc, #36]	; (800418c <MX_USART1_UART_Init+0x58>)
 8004166:	2200      	movs	r2, #0
 8004168:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800416a:	4b08      	ldr	r3, [pc, #32]	; (800418c <MX_USART1_UART_Init+0x58>)
 800416c:	2200      	movs	r2, #0
 800416e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004170:	4b06      	ldr	r3, [pc, #24]	; (800418c <MX_USART1_UART_Init+0x58>)
 8004172:	2200      	movs	r2, #0
 8004174:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004176:	4805      	ldr	r0, [pc, #20]	; (800418c <MX_USART1_UART_Init+0x58>)
 8004178:	f004 fbe8 	bl	800894c <HAL_UART_Init>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d001      	beq.n	8004186 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8004182:	f7ff fc89 	bl	8003a98 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004186:	bf00      	nop
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	200077e4 	.word	0x200077e4
 8004190:	40011000 	.word	0x40011000

08004194 <ReceiveUartMessage>:


HAL_StatusTypeDef ReceiveUartMessage(UART_HandleTypeDef *huart, uint8_t *buffer, uint16_t size)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b086      	sub	sp, #24
 8004198:	af00      	add	r7, sp, #0
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	4613      	mov	r3, r2
 80041a0:	80fb      	strh	r3, [r7, #6]
    uint8_t receivedByte;
    uint16_t rxBufferIndex = 0;
 80041a2:	2300      	movs	r3, #0
 80041a4:	82fb      	strh	r3, [r7, #22]
    while(1)
    {
        if(HAL_UART_Receive(huart, &receivedByte, 1, 1000) == HAL_OK)
 80041a6:	f107 0115 	add.w	r1, r7, #21
 80041aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80041ae:	2201      	movs	r2, #1
 80041b0:	68f8      	ldr	r0, [r7, #12]
 80041b2:	f004 fc9c 	bl	8008aee <HAL_UART_Receive>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d1f4      	bne.n	80041a6 <ReceiveUartMessage+0x12>
        {
            if(receivedByte == '\n') // 종료 문자 감지
 80041bc:	7d7b      	ldrb	r3, [r7, #21]
 80041be:	2b0a      	cmp	r3, #10
 80041c0:	d106      	bne.n	80041d0 <ReceiveUartMessage+0x3c>
            {
                buffer[rxBufferIndex] = '\0'; // 문자열의 끝을 표시
 80041c2:	8afb      	ldrh	r3, [r7, #22]
 80041c4:	68ba      	ldr	r2, [r7, #8]
 80041c6:	4413      	add	r3, r2
 80041c8:	2200      	movs	r2, #0
 80041ca:	701a      	strb	r2, [r3, #0]
                return HAL_OK;
 80041cc:	2300      	movs	r3, #0
 80041ce:	e012      	b.n	80041f6 <ReceiveUartMessage+0x62>
            }
            else
            {
                buffer[rxBufferIndex] = receivedByte; // 문자 저장
 80041d0:	8afb      	ldrh	r3, [r7, #22]
 80041d2:	68ba      	ldr	r2, [r7, #8]
 80041d4:	4413      	add	r3, r2
 80041d6:	7d7a      	ldrb	r2, [r7, #21]
 80041d8:	701a      	strb	r2, [r3, #0]
                rxBufferIndex++;
 80041da:	8afb      	ldrh	r3, [r7, #22]
 80041dc:	3301      	adds	r3, #1
 80041de:	82fb      	strh	r3, [r7, #22]
                if(rxBufferIndex >= size) // 버퍼 초과 방지
 80041e0:	8afa      	ldrh	r2, [r7, #22]
 80041e2:	88fb      	ldrh	r3, [r7, #6]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d3de      	bcc.n	80041a6 <ReceiveUartMessage+0x12>
                {
                    buffer[rxBufferIndex - 1] = '\0'; // 문자열의 끝을 표시
 80041e8:	8afb      	ldrh	r3, [r7, #22]
 80041ea:	3b01      	subs	r3, #1
 80041ec:	68ba      	ldr	r2, [r7, #8]
 80041ee:	4413      	add	r3, r2
 80041f0:	2200      	movs	r2, #0
 80041f2:	701a      	strb	r2, [r3, #0]
                    return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
                }
            }
        }
    }
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3718      	adds	r7, #24
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
	...

08004200 <startMsg>:

void startMsg(){
 8004200:	b580      	push	{r7, lr}
 8004202:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "--------------------------------------------------------------\n"), 100);
 8004204:	492c      	ldr	r1, [pc, #176]	; (80042b8 <startMsg+0xb8>)
 8004206:	482d      	ldr	r0, [pc, #180]	; (80042bc <startMsg+0xbc>)
 8004208:	f00f f920 	bl	801344c <siprintf>
 800420c:	4603      	mov	r3, r0
 800420e:	b29a      	uxth	r2, r3
 8004210:	2364      	movs	r3, #100	; 0x64
 8004212:	492a      	ldr	r1, [pc, #168]	; (80042bc <startMsg+0xbc>)
 8004214:	482a      	ldr	r0, [pc, #168]	; (80042c0 <startMsg+0xc0>)
 8004216:	f004 fbe7 	bl	80089e8 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "--------------------------------------------------------------\n"), 100);
 800421a:	4927      	ldr	r1, [pc, #156]	; (80042b8 <startMsg+0xb8>)
 800421c:	4827      	ldr	r0, [pc, #156]	; (80042bc <startMsg+0xbc>)
 800421e:	f00f f915 	bl	801344c <siprintf>
 8004222:	4603      	mov	r3, r0
 8004224:	b29a      	uxth	r2, r3
 8004226:	2364      	movs	r3, #100	; 0x64
 8004228:	4924      	ldr	r1, [pc, #144]	; (80042bc <startMsg+0xbc>)
 800422a:	4825      	ldr	r0, [pc, #148]	; (80042c0 <startMsg+0xc0>)
 800422c:	f004 fbdc 	bl	80089e8 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "----------- AI Inference for TACTS made by JaeHyeong----------\n"), 100);
 8004230:	4924      	ldr	r1, [pc, #144]	; (80042c4 <startMsg+0xc4>)
 8004232:	4822      	ldr	r0, [pc, #136]	; (80042bc <startMsg+0xbc>)
 8004234:	f00f f90a 	bl	801344c <siprintf>
 8004238:	4603      	mov	r3, r0
 800423a:	b29a      	uxth	r2, r3
 800423c:	2364      	movs	r3, #100	; 0x64
 800423e:	491f      	ldr	r1, [pc, #124]	; (80042bc <startMsg+0xbc>)
 8004240:	481f      	ldr	r0, [pc, #124]	; (80042c0 <startMsg+0xc0>)
 8004242:	f004 fbd1 	bl	80089e8 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "----------------- 1 : TOF sensor array -----------------------\n"), 100);
 8004246:	4920      	ldr	r1, [pc, #128]	; (80042c8 <startMsg+0xc8>)
 8004248:	481c      	ldr	r0, [pc, #112]	; (80042bc <startMsg+0xbc>)
 800424a:	f00f f8ff 	bl	801344c <siprintf>
 800424e:	4603      	mov	r3, r0
 8004250:	b29a      	uxth	r2, r3
 8004252:	2364      	movs	r3, #100	; 0x64
 8004254:	4919      	ldr	r1, [pc, #100]	; (80042bc <startMsg+0xbc>)
 8004256:	481a      	ldr	r0, [pc, #104]	; (80042c0 <startMsg+0xc0>)
 8004258:	f004 fbc6 	bl	80089e8 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "----------------- 2 : TOF sensor array and AI output ---------\n"), 100);
 800425c:	491b      	ldr	r1, [pc, #108]	; (80042cc <startMsg+0xcc>)
 800425e:	4817      	ldr	r0, [pc, #92]	; (80042bc <startMsg+0xbc>)
 8004260:	f00f f8f4 	bl	801344c <siprintf>
 8004264:	4603      	mov	r3, r0
 8004266:	b29a      	uxth	r2, r3
 8004268:	2364      	movs	r3, #100	; 0x64
 800426a:	4914      	ldr	r1, [pc, #80]	; (80042bc <startMsg+0xbc>)
 800426c:	4814      	ldr	r0, [pc, #80]	; (80042c0 <startMsg+0xc0>)
 800426e:	f004 fbbb 	bl	80089e8 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "----------------- 3 : TOF Avg Std Force Z --------------------\n"), 100);
 8004272:	4917      	ldr	r1, [pc, #92]	; (80042d0 <startMsg+0xd0>)
 8004274:	4811      	ldr	r0, [pc, #68]	; (80042bc <startMsg+0xbc>)
 8004276:	f00f f8e9 	bl	801344c <siprintf>
 800427a:	4603      	mov	r3, r0
 800427c:	b29a      	uxth	r2, r3
 800427e:	2364      	movs	r3, #100	; 0x64
 8004280:	490e      	ldr	r1, [pc, #56]	; (80042bc <startMsg+0xbc>)
 8004282:	480f      	ldr	r0, [pc, #60]	; (80042c0 <startMsg+0xc0>)
 8004284:	f004 fbb0 	bl	80089e8 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "--------------------------------------------------------------\n"), 100);
 8004288:	490b      	ldr	r1, [pc, #44]	; (80042b8 <startMsg+0xb8>)
 800428a:	480c      	ldr	r0, [pc, #48]	; (80042bc <startMsg+0xbc>)
 800428c:	f00f f8de 	bl	801344c <siprintf>
 8004290:	4603      	mov	r3, r0
 8004292:	b29a      	uxth	r2, r3
 8004294:	2364      	movs	r3, #100	; 0x64
 8004296:	4909      	ldr	r1, [pc, #36]	; (80042bc <startMsg+0xbc>)
 8004298:	4809      	ldr	r0, [pc, #36]	; (80042c0 <startMsg+0xc0>)
 800429a:	f004 fba5 	bl	80089e8 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "--------------------------------------------------------------\n"), 100);
 800429e:	4906      	ldr	r1, [pc, #24]	; (80042b8 <startMsg+0xb8>)
 80042a0:	4806      	ldr	r0, [pc, #24]	; (80042bc <startMsg+0xbc>)
 80042a2:	f00f f8d3 	bl	801344c <siprintf>
 80042a6:	4603      	mov	r3, r0
 80042a8:	b29a      	uxth	r2, r3
 80042aa:	2364      	movs	r3, #100	; 0x64
 80042ac:	4903      	ldr	r1, [pc, #12]	; (80042bc <startMsg+0xbc>)
 80042ae:	4804      	ldr	r0, [pc, #16]	; (80042c0 <startMsg+0xc0>)
 80042b0:	f004 fb9a 	bl	80089e8 <HAL_UART_Transmit>
}
 80042b4:	bf00      	nop
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	08018980 	.word	0x08018980
 80042bc:	2000786c 	.word	0x2000786c
 80042c0:	200077e4 	.word	0x200077e4
 80042c4:	080189c0 	.word	0x080189c0
 80042c8:	08018a00 	.word	0x08018a00
 80042cc:	08018a40 	.word	0x08018a40
 80042d0:	08018a80 	.word	0x08018a80

080042d4 <ResetAllDevices>:
    }
}
#endif


void ResetAllDevices() {
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af02      	add	r7, sp, #8
  for (int j = 0; j < tcaLength; ++j) {
 80042da:	2300      	movs	r3, #0
 80042dc:	607b      	str	r3, [r7, #4]
 80042de:	e011      	b.n	8004304 <ResetAllDevices+0x30>
	  HAL_I2C_Master_Transmit(&hi2c1, tca_addr[j] << 1, &tca_ch_reset, 1, 1000);
 80042e0:	4a0e      	ldr	r2, [pc, #56]	; (800431c <ResetAllDevices+0x48>)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4413      	add	r3, r2
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	005b      	lsls	r3, r3, #1
 80042ec:	b299      	uxth	r1, r3
 80042ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80042f2:	9300      	str	r3, [sp, #0]
 80042f4:	2301      	movs	r3, #1
 80042f6:	4a0a      	ldr	r2, [pc, #40]	; (8004320 <ResetAllDevices+0x4c>)
 80042f8:	480a      	ldr	r0, [pc, #40]	; (8004324 <ResetAllDevices+0x50>)
 80042fa:	f000 fe6f 	bl	8004fdc <HAL_I2C_Master_Transmit>
  for (int j = 0; j < tcaLength; ++j) {
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	3301      	adds	r3, #1
 8004302:	607b      	str	r3, [r7, #4]
 8004304:	4b08      	ldr	r3, [pc, #32]	; (8004328 <ResetAllDevices+0x54>)
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	461a      	mov	r2, r3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4293      	cmp	r3, r2
 800430e:	dbe7      	blt.n	80042e0 <ResetAllDevices+0xc>
  }
}
 8004310:	bf00      	nop
 8004312:	bf00      	nop
 8004314:	3708      	adds	r7, #8
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	2000016c 	.word	0x2000016c
 8004320:	2000c560 	.word	0x2000c560
 8004324:	2000729c 	.word	0x2000729c
 8004328:	20000174 	.word	0x20000174

0800432c <ResetDevicesExcept>:

void ResetDevicesExcept(uint8_t active_device) {
 800432c:	b580      	push	{r7, lr}
 800432e:	b086      	sub	sp, #24
 8004330:	af02      	add	r7, sp, #8
 8004332:	4603      	mov	r3, r0
 8004334:	71fb      	strb	r3, [r7, #7]
    for (int j = 0; j < tcaLength; ++j) {
 8004336:	2300      	movs	r3, #0
 8004338:	60fb      	str	r3, [r7, #12]
 800433a:	e015      	b.n	8004368 <ResetDevicesExcept+0x3c>
        if (j != active_device) {
 800433c:	79fb      	ldrb	r3, [r7, #7]
 800433e:	68fa      	ldr	r2, [r7, #12]
 8004340:	429a      	cmp	r2, r3
 8004342:	d00e      	beq.n	8004362 <ResetDevicesExcept+0x36>
            HAL_I2C_Master_Transmit(&hi2c1, tca_addr[j] << 1, &tca_ch_reset, 1, 1000);
 8004344:	4a0e      	ldr	r2, [pc, #56]	; (8004380 <ResetDevicesExcept+0x54>)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	4413      	add	r3, r2
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	b29b      	uxth	r3, r3
 800434e:	005b      	lsls	r3, r3, #1
 8004350:	b299      	uxth	r1, r3
 8004352:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004356:	9300      	str	r3, [sp, #0]
 8004358:	2301      	movs	r3, #1
 800435a:	4a0a      	ldr	r2, [pc, #40]	; (8004384 <ResetDevicesExcept+0x58>)
 800435c:	480a      	ldr	r0, [pc, #40]	; (8004388 <ResetDevicesExcept+0x5c>)
 800435e:	f000 fe3d 	bl	8004fdc <HAL_I2C_Master_Transmit>
    for (int j = 0; j < tcaLength; ++j) {
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	3301      	adds	r3, #1
 8004366:	60fb      	str	r3, [r7, #12]
 8004368:	4b08      	ldr	r3, [pc, #32]	; (800438c <ResetDevicesExcept+0x60>)
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	461a      	mov	r2, r3
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	4293      	cmp	r3, r2
 8004372:	dbe3      	blt.n	800433c <ResetDevicesExcept+0x10>
        }
    }
}
 8004374:	bf00      	nop
 8004376:	bf00      	nop
 8004378:	3710      	adds	r7, #16
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	2000016c 	.word	0x2000016c
 8004384:	2000c560 	.word	0x2000c560
 8004388:	2000729c 	.word	0x2000729c
 800438c:	20000174 	.word	0x20000174

08004390 <setActiveTcaChannel>:

void setActiveTcaChannel(uint8_t active_device, uint8_t channel){
 8004390:	b580      	push	{r7, lr}
 8004392:	b084      	sub	sp, #16
 8004394:	af02      	add	r7, sp, #8
 8004396:	4603      	mov	r3, r0
 8004398:	460a      	mov	r2, r1
 800439a:	71fb      	strb	r3, [r7, #7]
 800439c:	4613      	mov	r3, r2
 800439e:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(&hi2c1, tca_addr[active_device] << 1, &tca_ch[channel], 1, 1000);
 80043a0:	79fb      	ldrb	r3, [r7, #7]
 80043a2:	4a09      	ldr	r2, [pc, #36]	; (80043c8 <setActiveTcaChannel+0x38>)
 80043a4:	5cd3      	ldrb	r3, [r2, r3]
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	005b      	lsls	r3, r3, #1
 80043aa:	b299      	uxth	r1, r3
 80043ac:	79bb      	ldrb	r3, [r7, #6]
 80043ae:	4a07      	ldr	r2, [pc, #28]	; (80043cc <setActiveTcaChannel+0x3c>)
 80043b0:	441a      	add	r2, r3
 80043b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80043b6:	9300      	str	r3, [sp, #0]
 80043b8:	2301      	movs	r3, #1
 80043ba:	4805      	ldr	r0, [pc, #20]	; (80043d0 <setActiveTcaChannel+0x40>)
 80043bc:	f000 fe0e 	bl	8004fdc <HAL_I2C_Master_Transmit>
}
 80043c0:	bf00      	nop
 80043c2:	3708      	adds	r7, #8
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	2000016c 	.word	0x2000016c
 80043cc:	20000160 	.word	0x20000160
 80043d0:	2000729c 	.word	0x2000729c

080043d4 <setOnAllDevices>:

void setOnAllDevices(){
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af02      	add	r7, sp, #8
  for (int j = 0; j < tcaLength; ++j) {
 80043da:	2300      	movs	r3, #0
 80043dc:	607b      	str	r3, [r7, #4]
 80043de:	e011      	b.n	8004404 <setOnAllDevices+0x30>
	  HAL_I2C_Master_Transmit(&hi2c1, tca_addr[j] << 1, &tca_ch_all_on, 1, 1000);
 80043e0:	4a0e      	ldr	r2, [pc, #56]	; (800441c <setOnAllDevices+0x48>)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4413      	add	r3, r2
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	005b      	lsls	r3, r3, #1
 80043ec:	b299      	uxth	r1, r3
 80043ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80043f2:	9300      	str	r3, [sp, #0]
 80043f4:	2301      	movs	r3, #1
 80043f6:	4a0a      	ldr	r2, [pc, #40]	; (8004420 <setOnAllDevices+0x4c>)
 80043f8:	480a      	ldr	r0, [pc, #40]	; (8004424 <setOnAllDevices+0x50>)
 80043fa:	f000 fdef 	bl	8004fdc <HAL_I2C_Master_Transmit>
  for (int j = 0; j < tcaLength; ++j) {
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	3301      	adds	r3, #1
 8004402:	607b      	str	r3, [r7, #4]
 8004404:	4b08      	ldr	r3, [pc, #32]	; (8004428 <setOnAllDevices+0x54>)
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	461a      	mov	r2, r3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4293      	cmp	r3, r2
 800440e:	dbe7      	blt.n	80043e0 <setOnAllDevices+0xc>
  }
}
 8004410:	bf00      	nop
 8004412:	bf00      	nop
 8004414:	3708      	adds	r7, #8
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	2000016c 	.word	0x2000016c
 8004420:	20000168 	.word	0x20000168
 8004424:	2000729c 	.word	0x2000729c
 8004428:	20000174 	.word	0x20000174

0800442c <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack      /* set stack pointer */
 800442c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004464 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004430:	480d      	ldr	r0, [pc, #52]	; (8004468 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004432:	490e      	ldr	r1, [pc, #56]	; (800446c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004434:	4a0e      	ldr	r2, [pc, #56]	; (8004470 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004436:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004438:	e002      	b.n	8004440 <LoopCopyDataInit>

0800443a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800443a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800443c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800443e:	3304      	adds	r3, #4

08004440 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004440:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004442:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004444:	d3f9      	bcc.n	800443a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004446:	4a0b      	ldr	r2, [pc, #44]	; (8004474 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004448:	4c0b      	ldr	r4, [pc, #44]	; (8004478 <LoopFillZerobss+0x26>)
  movs r3, #0
 800444a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800444c:	e001      	b.n	8004452 <LoopFillZerobss>

0800444e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800444e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004450:	3204      	adds	r2, #4

08004452 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004452:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004454:	d3fb      	bcc.n	800444e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004456:	f7ff fe5b 	bl	8004110 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800445a:	f00e f845 	bl	80124e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800445e:	f7ff f8f5 	bl	800364c <main>
  bx  lr    
 8004462:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004464:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8004468:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800446c:	20001630 	.word	0x20001630
  ldr r2, =_sidata
 8004470:	0805db28 	.word	0x0805db28
  ldr r2, =_sbss
 8004474:	20001640 	.word	0x20001640
  ldr r4, =_ebss
 8004478:	2000c674 	.word	0x2000c674

0800447c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800447c:	e7fe      	b.n	800447c <ADC_IRQHandler>

0800447e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800447e:	b580      	push	{r7, lr}
 8004480:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004482:	2003      	movs	r0, #3
 8004484:	f000 f94c 	bl	8004720 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004488:	200f      	movs	r0, #15
 800448a:	f000 f805 	bl	8004498 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800448e:	f7ff fc1f 	bl	8003cd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004492:	2300      	movs	r3, #0
}
 8004494:	4618      	mov	r0, r3
 8004496:	bd80      	pop	{r7, pc}

08004498 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b082      	sub	sp, #8
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80044a0:	4b12      	ldr	r3, [pc, #72]	; (80044ec <HAL_InitTick+0x54>)
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	4b12      	ldr	r3, [pc, #72]	; (80044f0 <HAL_InitTick+0x58>)
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	4619      	mov	r1, r3
 80044aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80044ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80044b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044b6:	4618      	mov	r0, r3
 80044b8:	f000 f967 	bl	800478a <HAL_SYSTICK_Config>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d001      	beq.n	80044c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e00e      	b.n	80044e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2b0f      	cmp	r3, #15
 80044ca:	d80a      	bhi.n	80044e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80044cc:	2200      	movs	r2, #0
 80044ce:	6879      	ldr	r1, [r7, #4]
 80044d0:	f04f 30ff 	mov.w	r0, #4294967295
 80044d4:	f000 f92f 	bl	8004736 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80044d8:	4a06      	ldr	r2, [pc, #24]	; (80044f4 <HAL_InitTick+0x5c>)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80044de:	2300      	movs	r3, #0
 80044e0:	e000      	b.n	80044e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3708      	adds	r7, #8
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}
 80044ec:	2000000c 	.word	0x2000000c
 80044f0:	2000030c 	.word	0x2000030c
 80044f4:	20000308 	.word	0x20000308

080044f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80044f8:	b480      	push	{r7}
 80044fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80044fc:	4b06      	ldr	r3, [pc, #24]	; (8004518 <HAL_IncTick+0x20>)
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	461a      	mov	r2, r3
 8004502:	4b06      	ldr	r3, [pc, #24]	; (800451c <HAL_IncTick+0x24>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4413      	add	r3, r2
 8004508:	4a04      	ldr	r2, [pc, #16]	; (800451c <HAL_IncTick+0x24>)
 800450a:	6013      	str	r3, [r2, #0]
}
 800450c:	bf00      	nop
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr
 8004516:	bf00      	nop
 8004518:	2000030c 	.word	0x2000030c
 800451c:	2000c564 	.word	0x2000c564

08004520 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004520:	b480      	push	{r7}
 8004522:	af00      	add	r7, sp, #0
  return uwTick;
 8004524:	4b03      	ldr	r3, [pc, #12]	; (8004534 <HAL_GetTick+0x14>)
 8004526:	681b      	ldr	r3, [r3, #0]
}
 8004528:	4618      	mov	r0, r3
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr
 8004532:	bf00      	nop
 8004534:	2000c564 	.word	0x2000c564

08004538 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004540:	f7ff ffee 	bl	8004520 <HAL_GetTick>
 8004544:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004550:	d005      	beq.n	800455e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004552:	4b0a      	ldr	r3, [pc, #40]	; (800457c <HAL_Delay+0x44>)
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	461a      	mov	r2, r3
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	4413      	add	r3, r2
 800455c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800455e:	bf00      	nop
 8004560:	f7ff ffde 	bl	8004520 <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	68fa      	ldr	r2, [r7, #12]
 800456c:	429a      	cmp	r2, r3
 800456e:	d8f7      	bhi.n	8004560 <HAL_Delay+0x28>
  {
  }
}
 8004570:	bf00      	nop
 8004572:	bf00      	nop
 8004574:	3710      	adds	r7, #16
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	2000030c 	.word	0x2000030c

08004580 <__NVIC_SetPriorityGrouping>:
{
 8004580:	b480      	push	{r7}
 8004582:	b085      	sub	sp, #20
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f003 0307 	and.w	r3, r3, #7
 800458e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004590:	4b0b      	ldr	r3, [pc, #44]	; (80045c0 <__NVIC_SetPriorityGrouping+0x40>)
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004596:	68ba      	ldr	r2, [r7, #8]
 8004598:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800459c:	4013      	ands	r3, r2
 800459e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80045a8:	4b06      	ldr	r3, [pc, #24]	; (80045c4 <__NVIC_SetPriorityGrouping+0x44>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80045ae:	4a04      	ldr	r2, [pc, #16]	; (80045c0 <__NVIC_SetPriorityGrouping+0x40>)
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	60d3      	str	r3, [r2, #12]
}
 80045b4:	bf00      	nop
 80045b6:	3714      	adds	r7, #20
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr
 80045c0:	e000ed00 	.word	0xe000ed00
 80045c4:	05fa0000 	.word	0x05fa0000

080045c8 <__NVIC_GetPriorityGrouping>:
{
 80045c8:	b480      	push	{r7}
 80045ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80045cc:	4b04      	ldr	r3, [pc, #16]	; (80045e0 <__NVIC_GetPriorityGrouping+0x18>)
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	0a1b      	lsrs	r3, r3, #8
 80045d2:	f003 0307 	and.w	r3, r3, #7
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr
 80045e0:	e000ed00 	.word	0xe000ed00

080045e4 <__NVIC_EnableIRQ>:
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	4603      	mov	r3, r0
 80045ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	db0b      	blt.n	800460e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045f6:	79fb      	ldrb	r3, [r7, #7]
 80045f8:	f003 021f 	and.w	r2, r3, #31
 80045fc:	4907      	ldr	r1, [pc, #28]	; (800461c <__NVIC_EnableIRQ+0x38>)
 80045fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004602:	095b      	lsrs	r3, r3, #5
 8004604:	2001      	movs	r0, #1
 8004606:	fa00 f202 	lsl.w	r2, r0, r2
 800460a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800460e:	bf00      	nop
 8004610:	370c      	adds	r7, #12
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr
 800461a:	bf00      	nop
 800461c:	e000e100 	.word	0xe000e100

08004620 <__NVIC_SetPriority>:
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	4603      	mov	r3, r0
 8004628:	6039      	str	r1, [r7, #0]
 800462a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800462c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004630:	2b00      	cmp	r3, #0
 8004632:	db0a      	blt.n	800464a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	b2da      	uxtb	r2, r3
 8004638:	490c      	ldr	r1, [pc, #48]	; (800466c <__NVIC_SetPriority+0x4c>)
 800463a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800463e:	0112      	lsls	r2, r2, #4
 8004640:	b2d2      	uxtb	r2, r2
 8004642:	440b      	add	r3, r1
 8004644:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004648:	e00a      	b.n	8004660 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	b2da      	uxtb	r2, r3
 800464e:	4908      	ldr	r1, [pc, #32]	; (8004670 <__NVIC_SetPriority+0x50>)
 8004650:	79fb      	ldrb	r3, [r7, #7]
 8004652:	f003 030f 	and.w	r3, r3, #15
 8004656:	3b04      	subs	r3, #4
 8004658:	0112      	lsls	r2, r2, #4
 800465a:	b2d2      	uxtb	r2, r2
 800465c:	440b      	add	r3, r1
 800465e:	761a      	strb	r2, [r3, #24]
}
 8004660:	bf00      	nop
 8004662:	370c      	adds	r7, #12
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr
 800466c:	e000e100 	.word	0xe000e100
 8004670:	e000ed00 	.word	0xe000ed00

08004674 <NVIC_EncodePriority>:
{
 8004674:	b480      	push	{r7}
 8004676:	b089      	sub	sp, #36	; 0x24
 8004678:	af00      	add	r7, sp, #0
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	60b9      	str	r1, [r7, #8]
 800467e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f003 0307 	and.w	r3, r3, #7
 8004686:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004688:	69fb      	ldr	r3, [r7, #28]
 800468a:	f1c3 0307 	rsb	r3, r3, #7
 800468e:	2b04      	cmp	r3, #4
 8004690:	bf28      	it	cs
 8004692:	2304      	movcs	r3, #4
 8004694:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	3304      	adds	r3, #4
 800469a:	2b06      	cmp	r3, #6
 800469c:	d902      	bls.n	80046a4 <NVIC_EncodePriority+0x30>
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	3b03      	subs	r3, #3
 80046a2:	e000      	b.n	80046a6 <NVIC_EncodePriority+0x32>
 80046a4:	2300      	movs	r3, #0
 80046a6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046a8:	f04f 32ff 	mov.w	r2, #4294967295
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	fa02 f303 	lsl.w	r3, r2, r3
 80046b2:	43da      	mvns	r2, r3
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	401a      	ands	r2, r3
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80046bc:	f04f 31ff 	mov.w	r1, #4294967295
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	fa01 f303 	lsl.w	r3, r1, r3
 80046c6:	43d9      	mvns	r1, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046cc:	4313      	orrs	r3, r2
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3724      	adds	r7, #36	; 0x24
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr
	...

080046dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b082      	sub	sp, #8
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	3b01      	subs	r3, #1
 80046e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80046ec:	d301      	bcc.n	80046f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80046ee:	2301      	movs	r3, #1
 80046f0:	e00f      	b.n	8004712 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80046f2:	4a0a      	ldr	r2, [pc, #40]	; (800471c <SysTick_Config+0x40>)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	3b01      	subs	r3, #1
 80046f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80046fa:	210f      	movs	r1, #15
 80046fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004700:	f7ff ff8e 	bl	8004620 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004704:	4b05      	ldr	r3, [pc, #20]	; (800471c <SysTick_Config+0x40>)
 8004706:	2200      	movs	r2, #0
 8004708:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800470a:	4b04      	ldr	r3, [pc, #16]	; (800471c <SysTick_Config+0x40>)
 800470c:	2207      	movs	r2, #7
 800470e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004710:	2300      	movs	r3, #0
}
 8004712:	4618      	mov	r0, r3
 8004714:	3708      	adds	r7, #8
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	e000e010 	.word	0xe000e010

08004720 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b082      	sub	sp, #8
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f7ff ff29 	bl	8004580 <__NVIC_SetPriorityGrouping>
}
 800472e:	bf00      	nop
 8004730:	3708      	adds	r7, #8
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}

08004736 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004736:	b580      	push	{r7, lr}
 8004738:	b086      	sub	sp, #24
 800473a:	af00      	add	r7, sp, #0
 800473c:	4603      	mov	r3, r0
 800473e:	60b9      	str	r1, [r7, #8]
 8004740:	607a      	str	r2, [r7, #4]
 8004742:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004744:	2300      	movs	r3, #0
 8004746:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004748:	f7ff ff3e 	bl	80045c8 <__NVIC_GetPriorityGrouping>
 800474c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	68b9      	ldr	r1, [r7, #8]
 8004752:	6978      	ldr	r0, [r7, #20]
 8004754:	f7ff ff8e 	bl	8004674 <NVIC_EncodePriority>
 8004758:	4602      	mov	r2, r0
 800475a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800475e:	4611      	mov	r1, r2
 8004760:	4618      	mov	r0, r3
 8004762:	f7ff ff5d 	bl	8004620 <__NVIC_SetPriority>
}
 8004766:	bf00      	nop
 8004768:	3718      	adds	r7, #24
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}

0800476e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800476e:	b580      	push	{r7, lr}
 8004770:	b082      	sub	sp, #8
 8004772:	af00      	add	r7, sp, #0
 8004774:	4603      	mov	r3, r0
 8004776:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004778:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800477c:	4618      	mov	r0, r3
 800477e:	f7ff ff31 	bl	80045e4 <__NVIC_EnableIRQ>
}
 8004782:	bf00      	nop
 8004784:	3708      	adds	r7, #8
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}

0800478a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800478a:	b580      	push	{r7, lr}
 800478c:	b082      	sub	sp, #8
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f7ff ffa2 	bl	80046dc <SysTick_Config>
 8004798:	4603      	mov	r3, r0
}
 800479a:	4618      	mov	r0, r3
 800479c:	3708      	adds	r7, #8
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
	...

080047a4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b082      	sub	sp, #8
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d101      	bne.n	80047b6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e054      	b.n	8004860 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	7f5b      	ldrb	r3, [r3, #29]
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d105      	bne.n	80047cc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f7ff faac 	bl	8003d24 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2202      	movs	r2, #2
 80047d0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	791b      	ldrb	r3, [r3, #4]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d10c      	bne.n	80047f4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a22      	ldr	r2, [pc, #136]	; (8004868 <HAL_CRC_Init+0xc4>)
 80047e0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	689a      	ldr	r2, [r3, #8]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f022 0218 	bic.w	r2, r2, #24
 80047f0:	609a      	str	r2, [r3, #8]
 80047f2:	e00c      	b.n	800480e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6899      	ldr	r1, [r3, #8]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	461a      	mov	r2, r3
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 f834 	bl	800486c <HAL_CRCEx_Polynomial_Set>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d001      	beq.n	800480e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e028      	b.n	8004860 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	795b      	ldrb	r3, [r3, #5]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d105      	bne.n	8004822 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f04f 32ff 	mov.w	r2, #4294967295
 800481e:	611a      	str	r2, [r3, #16]
 8004820:	e004      	b.n	800482c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	6912      	ldr	r2, [r2, #16]
 800482a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	695a      	ldr	r2, [r3, #20]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	430a      	orrs	r2, r1
 8004840:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	699a      	ldr	r2, [r3, #24]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	430a      	orrs	r2, r1
 8004856:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800485e:	2300      	movs	r3, #0
}
 8004860:	4618      	mov	r0, r3
 8004862:	3708      	adds	r7, #8
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}
 8004868:	04c11db7 	.word	0x04c11db7

0800486c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800486c:	b480      	push	{r7}
 800486e:	b087      	sub	sp, #28
 8004870:	af00      	add	r7, sp, #0
 8004872:	60f8      	str	r0, [r7, #12]
 8004874:	60b9      	str	r1, [r7, #8]
 8004876:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004878:	2300      	movs	r3, #0
 800487a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800487c:	231f      	movs	r3, #31
 800487e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004880:	bf00      	nop
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	1e5a      	subs	r2, r3, #1
 8004886:	613a      	str	r2, [r7, #16]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d009      	beq.n	80048a0 <HAL_CRCEx_Polynomial_Set+0x34>
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	f003 031f 	and.w	r3, r3, #31
 8004892:	68ba      	ldr	r2, [r7, #8]
 8004894:	fa22 f303 	lsr.w	r3, r2, r3
 8004898:	f003 0301 	and.w	r3, r3, #1
 800489c:	2b00      	cmp	r3, #0
 800489e:	d0f0      	beq.n	8004882 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2b18      	cmp	r3, #24
 80048a4:	d846      	bhi.n	8004934 <HAL_CRCEx_Polynomial_Set+0xc8>
 80048a6:	a201      	add	r2, pc, #4	; (adr r2, 80048ac <HAL_CRCEx_Polynomial_Set+0x40>)
 80048a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ac:	0800493b 	.word	0x0800493b
 80048b0:	08004935 	.word	0x08004935
 80048b4:	08004935 	.word	0x08004935
 80048b8:	08004935 	.word	0x08004935
 80048bc:	08004935 	.word	0x08004935
 80048c0:	08004935 	.word	0x08004935
 80048c4:	08004935 	.word	0x08004935
 80048c8:	08004935 	.word	0x08004935
 80048cc:	08004929 	.word	0x08004929
 80048d0:	08004935 	.word	0x08004935
 80048d4:	08004935 	.word	0x08004935
 80048d8:	08004935 	.word	0x08004935
 80048dc:	08004935 	.word	0x08004935
 80048e0:	08004935 	.word	0x08004935
 80048e4:	08004935 	.word	0x08004935
 80048e8:	08004935 	.word	0x08004935
 80048ec:	0800491d 	.word	0x0800491d
 80048f0:	08004935 	.word	0x08004935
 80048f4:	08004935 	.word	0x08004935
 80048f8:	08004935 	.word	0x08004935
 80048fc:	08004935 	.word	0x08004935
 8004900:	08004935 	.word	0x08004935
 8004904:	08004935 	.word	0x08004935
 8004908:	08004935 	.word	0x08004935
 800490c:	08004911 	.word	0x08004911
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	2b06      	cmp	r3, #6
 8004914:	d913      	bls.n	800493e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800491a:	e010      	b.n	800493e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	2b07      	cmp	r3, #7
 8004920:	d90f      	bls.n	8004942 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004926:	e00c      	b.n	8004942 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	2b0f      	cmp	r3, #15
 800492c:	d90b      	bls.n	8004946 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004932:	e008      	b.n	8004946 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	75fb      	strb	r3, [r7, #23]
      break;
 8004938:	e006      	b.n	8004948 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800493a:	bf00      	nop
 800493c:	e004      	b.n	8004948 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800493e:	bf00      	nop
 8004940:	e002      	b.n	8004948 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004942:	bf00      	nop
 8004944:	e000      	b.n	8004948 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004946:	bf00      	nop
  }
  if (status == HAL_OK)
 8004948:	7dfb      	ldrb	r3, [r7, #23]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d10d      	bne.n	800496a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	68ba      	ldr	r2, [r7, #8]
 8004954:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	f023 0118 	bic.w	r1, r3, #24
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	430a      	orrs	r2, r1
 8004968:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800496a:	7dfb      	ldrb	r3, [r7, #23]
}
 800496c:	4618      	mov	r0, r3
 800496e:	371c      	adds	r7, #28
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr

08004978 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b084      	sub	sp, #16
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004984:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004986:	f7ff fdcb 	bl	8004520 <HAL_GetTick>
 800498a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004992:	b2db      	uxtb	r3, r3
 8004994:	2b02      	cmp	r3, #2
 8004996:	d008      	beq.n	80049aa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2280      	movs	r2, #128	; 0x80
 800499c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e052      	b.n	8004a50 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f022 0216 	bic.w	r2, r2, #22
 80049b8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	695a      	ldr	r2, [r3, #20]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049c8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d103      	bne.n	80049da <HAL_DMA_Abort+0x62>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d007      	beq.n	80049ea <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f022 0208 	bic.w	r2, r2, #8
 80049e8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f022 0201 	bic.w	r2, r2, #1
 80049f8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80049fa:	e013      	b.n	8004a24 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80049fc:	f7ff fd90 	bl	8004520 <HAL_GetTick>
 8004a00:	4602      	mov	r2, r0
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	2b05      	cmp	r3, #5
 8004a08:	d90c      	bls.n	8004a24 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2220      	movs	r2, #32
 8004a0e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2203      	movs	r2, #3
 8004a14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	e015      	b.n	8004a50 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 0301 	and.w	r3, r3, #1
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d1e4      	bne.n	80049fc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a36:	223f      	movs	r2, #63	; 0x3f
 8004a38:	409a      	lsls	r2, r3
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2201      	movs	r2, #1
 8004a42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8004a4e:	2300      	movs	r3, #0
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3710      	adds	r7, #16
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d004      	beq.n	8004a76 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2280      	movs	r2, #128	; 0x80
 8004a70:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e00c      	b.n	8004a90 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2205      	movs	r2, #5
 8004a7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f022 0201 	bic.w	r2, r2, #1
 8004a8c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	370c      	adds	r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004aaa:	b2db      	uxtb	r3, r3
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	370c      	adds	r7, #12
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr

08004ab8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b089      	sub	sp, #36	; 0x24
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004aca:	2300      	movs	r3, #0
 8004acc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	61fb      	str	r3, [r7, #28]
 8004ad6:	e175      	b.n	8004dc4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004ad8:	2201      	movs	r2, #1
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	697a      	ldr	r2, [r7, #20]
 8004ae8:	4013      	ands	r3, r2
 8004aea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004aec:	693a      	ldr	r2, [r7, #16]
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	f040 8164 	bne.w	8004dbe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	f003 0303 	and.w	r3, r3, #3
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d005      	beq.n	8004b0e <HAL_GPIO_Init+0x56>
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	f003 0303 	and.w	r3, r3, #3
 8004b0a:	2b02      	cmp	r3, #2
 8004b0c:	d130      	bne.n	8004b70 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004b14:	69fb      	ldr	r3, [r7, #28]
 8004b16:	005b      	lsls	r3, r3, #1
 8004b18:	2203      	movs	r2, #3
 8004b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b1e:	43db      	mvns	r3, r3
 8004b20:	69ba      	ldr	r2, [r7, #24]
 8004b22:	4013      	ands	r3, r2
 8004b24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	68da      	ldr	r2, [r3, #12]
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	005b      	lsls	r3, r3, #1
 8004b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b32:	69ba      	ldr	r2, [r7, #24]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	69ba      	ldr	r2, [r7, #24]
 8004b3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004b44:	2201      	movs	r2, #1
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	fa02 f303 	lsl.w	r3, r2, r3
 8004b4c:	43db      	mvns	r3, r3
 8004b4e:	69ba      	ldr	r2, [r7, #24]
 8004b50:	4013      	ands	r3, r2
 8004b52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	091b      	lsrs	r3, r3, #4
 8004b5a:	f003 0201 	and.w	r2, r3, #1
 8004b5e:	69fb      	ldr	r3, [r7, #28]
 8004b60:	fa02 f303 	lsl.w	r3, r2, r3
 8004b64:	69ba      	ldr	r2, [r7, #24]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	69ba      	ldr	r2, [r7, #24]
 8004b6e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	f003 0303 	and.w	r3, r3, #3
 8004b78:	2b03      	cmp	r3, #3
 8004b7a:	d017      	beq.n	8004bac <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	005b      	lsls	r3, r3, #1
 8004b86:	2203      	movs	r2, #3
 8004b88:	fa02 f303 	lsl.w	r3, r2, r3
 8004b8c:	43db      	mvns	r3, r3
 8004b8e:	69ba      	ldr	r2, [r7, #24]
 8004b90:	4013      	ands	r3, r2
 8004b92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	689a      	ldr	r2, [r3, #8]
 8004b98:	69fb      	ldr	r3, [r7, #28]
 8004b9a:	005b      	lsls	r3, r3, #1
 8004b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba0:	69ba      	ldr	r2, [r7, #24]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	69ba      	ldr	r2, [r7, #24]
 8004baa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	f003 0303 	and.w	r3, r3, #3
 8004bb4:	2b02      	cmp	r3, #2
 8004bb6:	d123      	bne.n	8004c00 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004bb8:	69fb      	ldr	r3, [r7, #28]
 8004bba:	08da      	lsrs	r2, r3, #3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	3208      	adds	r2, #8
 8004bc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	f003 0307 	and.w	r3, r3, #7
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	220f      	movs	r2, #15
 8004bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd4:	43db      	mvns	r3, r3
 8004bd6:	69ba      	ldr	r2, [r7, #24]
 8004bd8:	4013      	ands	r3, r2
 8004bda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	691a      	ldr	r2, [r3, #16]
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	f003 0307 	and.w	r3, r3, #7
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bec:	69ba      	ldr	r2, [r7, #24]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	08da      	lsrs	r2, r3, #3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	3208      	adds	r2, #8
 8004bfa:	69b9      	ldr	r1, [r7, #24]
 8004bfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004c06:	69fb      	ldr	r3, [r7, #28]
 8004c08:	005b      	lsls	r3, r3, #1
 8004c0a:	2203      	movs	r2, #3
 8004c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c10:	43db      	mvns	r3, r3
 8004c12:	69ba      	ldr	r2, [r7, #24]
 8004c14:	4013      	ands	r3, r2
 8004c16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	f003 0203 	and.w	r2, r3, #3
 8004c20:	69fb      	ldr	r3, [r7, #28]
 8004c22:	005b      	lsls	r3, r3, #1
 8004c24:	fa02 f303 	lsl.w	r3, r2, r3
 8004c28:	69ba      	ldr	r2, [r7, #24]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	69ba      	ldr	r2, [r7, #24]
 8004c32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	f000 80be 	beq.w	8004dbe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c42:	4b66      	ldr	r3, [pc, #408]	; (8004ddc <HAL_GPIO_Init+0x324>)
 8004c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c46:	4a65      	ldr	r2, [pc, #404]	; (8004ddc <HAL_GPIO_Init+0x324>)
 8004c48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c4c:	6453      	str	r3, [r2, #68]	; 0x44
 8004c4e:	4b63      	ldr	r3, [pc, #396]	; (8004ddc <HAL_GPIO_Init+0x324>)
 8004c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c56:	60fb      	str	r3, [r7, #12]
 8004c58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004c5a:	4a61      	ldr	r2, [pc, #388]	; (8004de0 <HAL_GPIO_Init+0x328>)
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	089b      	lsrs	r3, r3, #2
 8004c60:	3302      	adds	r3, #2
 8004c62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004c68:	69fb      	ldr	r3, [r7, #28]
 8004c6a:	f003 0303 	and.w	r3, r3, #3
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	220f      	movs	r2, #15
 8004c72:	fa02 f303 	lsl.w	r3, r2, r3
 8004c76:	43db      	mvns	r3, r3
 8004c78:	69ba      	ldr	r2, [r7, #24]
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4a58      	ldr	r2, [pc, #352]	; (8004de4 <HAL_GPIO_Init+0x32c>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d037      	beq.n	8004cf6 <HAL_GPIO_Init+0x23e>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4a57      	ldr	r2, [pc, #348]	; (8004de8 <HAL_GPIO_Init+0x330>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d031      	beq.n	8004cf2 <HAL_GPIO_Init+0x23a>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4a56      	ldr	r2, [pc, #344]	; (8004dec <HAL_GPIO_Init+0x334>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d02b      	beq.n	8004cee <HAL_GPIO_Init+0x236>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4a55      	ldr	r2, [pc, #340]	; (8004df0 <HAL_GPIO_Init+0x338>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d025      	beq.n	8004cea <HAL_GPIO_Init+0x232>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4a54      	ldr	r2, [pc, #336]	; (8004df4 <HAL_GPIO_Init+0x33c>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d01f      	beq.n	8004ce6 <HAL_GPIO_Init+0x22e>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4a53      	ldr	r2, [pc, #332]	; (8004df8 <HAL_GPIO_Init+0x340>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d019      	beq.n	8004ce2 <HAL_GPIO_Init+0x22a>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4a52      	ldr	r2, [pc, #328]	; (8004dfc <HAL_GPIO_Init+0x344>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d013      	beq.n	8004cde <HAL_GPIO_Init+0x226>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4a51      	ldr	r2, [pc, #324]	; (8004e00 <HAL_GPIO_Init+0x348>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d00d      	beq.n	8004cda <HAL_GPIO_Init+0x222>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4a50      	ldr	r2, [pc, #320]	; (8004e04 <HAL_GPIO_Init+0x34c>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d007      	beq.n	8004cd6 <HAL_GPIO_Init+0x21e>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a4f      	ldr	r2, [pc, #316]	; (8004e08 <HAL_GPIO_Init+0x350>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d101      	bne.n	8004cd2 <HAL_GPIO_Init+0x21a>
 8004cce:	2309      	movs	r3, #9
 8004cd0:	e012      	b.n	8004cf8 <HAL_GPIO_Init+0x240>
 8004cd2:	230a      	movs	r3, #10
 8004cd4:	e010      	b.n	8004cf8 <HAL_GPIO_Init+0x240>
 8004cd6:	2308      	movs	r3, #8
 8004cd8:	e00e      	b.n	8004cf8 <HAL_GPIO_Init+0x240>
 8004cda:	2307      	movs	r3, #7
 8004cdc:	e00c      	b.n	8004cf8 <HAL_GPIO_Init+0x240>
 8004cde:	2306      	movs	r3, #6
 8004ce0:	e00a      	b.n	8004cf8 <HAL_GPIO_Init+0x240>
 8004ce2:	2305      	movs	r3, #5
 8004ce4:	e008      	b.n	8004cf8 <HAL_GPIO_Init+0x240>
 8004ce6:	2304      	movs	r3, #4
 8004ce8:	e006      	b.n	8004cf8 <HAL_GPIO_Init+0x240>
 8004cea:	2303      	movs	r3, #3
 8004cec:	e004      	b.n	8004cf8 <HAL_GPIO_Init+0x240>
 8004cee:	2302      	movs	r3, #2
 8004cf0:	e002      	b.n	8004cf8 <HAL_GPIO_Init+0x240>
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e000      	b.n	8004cf8 <HAL_GPIO_Init+0x240>
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	69fa      	ldr	r2, [r7, #28]
 8004cfa:	f002 0203 	and.w	r2, r2, #3
 8004cfe:	0092      	lsls	r2, r2, #2
 8004d00:	4093      	lsls	r3, r2
 8004d02:	69ba      	ldr	r2, [r7, #24]
 8004d04:	4313      	orrs	r3, r2
 8004d06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004d08:	4935      	ldr	r1, [pc, #212]	; (8004de0 <HAL_GPIO_Init+0x328>)
 8004d0a:	69fb      	ldr	r3, [r7, #28]
 8004d0c:	089b      	lsrs	r3, r3, #2
 8004d0e:	3302      	adds	r3, #2
 8004d10:	69ba      	ldr	r2, [r7, #24]
 8004d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004d16:	4b3d      	ldr	r3, [pc, #244]	; (8004e0c <HAL_GPIO_Init+0x354>)
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	43db      	mvns	r3, r3
 8004d20:	69ba      	ldr	r2, [r7, #24]
 8004d22:	4013      	ands	r3, r2
 8004d24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d003      	beq.n	8004d3a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004d32:	69ba      	ldr	r2, [r7, #24]
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	4313      	orrs	r3, r2
 8004d38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004d3a:	4a34      	ldr	r2, [pc, #208]	; (8004e0c <HAL_GPIO_Init+0x354>)
 8004d3c:	69bb      	ldr	r3, [r7, #24]
 8004d3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004d40:	4b32      	ldr	r3, [pc, #200]	; (8004e0c <HAL_GPIO_Init+0x354>)
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	43db      	mvns	r3, r3
 8004d4a:	69ba      	ldr	r2, [r7, #24]
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d003      	beq.n	8004d64 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004d5c:	69ba      	ldr	r2, [r7, #24]
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004d64:	4a29      	ldr	r2, [pc, #164]	; (8004e0c <HAL_GPIO_Init+0x354>)
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004d6a:	4b28      	ldr	r3, [pc, #160]	; (8004e0c <HAL_GPIO_Init+0x354>)
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	43db      	mvns	r3, r3
 8004d74:	69ba      	ldr	r2, [r7, #24]
 8004d76:	4013      	ands	r3, r2
 8004d78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d003      	beq.n	8004d8e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004d86:	69ba      	ldr	r2, [r7, #24]
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004d8e:	4a1f      	ldr	r2, [pc, #124]	; (8004e0c <HAL_GPIO_Init+0x354>)
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004d94:	4b1d      	ldr	r3, [pc, #116]	; (8004e0c <HAL_GPIO_Init+0x354>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	43db      	mvns	r3, r3
 8004d9e:	69ba      	ldr	r2, [r7, #24]
 8004da0:	4013      	ands	r3, r2
 8004da2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d003      	beq.n	8004db8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004db0:	69ba      	ldr	r2, [r7, #24]
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004db8:	4a14      	ldr	r2, [pc, #80]	; (8004e0c <HAL_GPIO_Init+0x354>)
 8004dba:	69bb      	ldr	r3, [r7, #24]
 8004dbc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	3301      	adds	r3, #1
 8004dc2:	61fb      	str	r3, [r7, #28]
 8004dc4:	69fb      	ldr	r3, [r7, #28]
 8004dc6:	2b0f      	cmp	r3, #15
 8004dc8:	f67f ae86 	bls.w	8004ad8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004dcc:	bf00      	nop
 8004dce:	bf00      	nop
 8004dd0:	3724      	adds	r7, #36	; 0x24
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop
 8004ddc:	40023800 	.word	0x40023800
 8004de0:	40013800 	.word	0x40013800
 8004de4:	40020000 	.word	0x40020000
 8004de8:	40020400 	.word	0x40020400
 8004dec:	40020800 	.word	0x40020800
 8004df0:	40020c00 	.word	0x40020c00
 8004df4:	40021000 	.word	0x40021000
 8004df8:	40021400 	.word	0x40021400
 8004dfc:	40021800 	.word	0x40021800
 8004e00:	40021c00 	.word	0x40021c00
 8004e04:	40022000 	.word	0x40022000
 8004e08:	40022400 	.word	0x40022400
 8004e0c:	40013c00 	.word	0x40013c00

08004e10 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b085      	sub	sp, #20
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	460b      	mov	r3, r1
 8004e1a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	691a      	ldr	r2, [r3, #16]
 8004e20:	887b      	ldrh	r3, [r7, #2]
 8004e22:	4013      	ands	r3, r2
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d002      	beq.n	8004e2e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	73fb      	strb	r3, [r7, #15]
 8004e2c:	e001      	b.n	8004e32 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3714      	adds	r7, #20
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr

08004e40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b083      	sub	sp, #12
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	460b      	mov	r3, r1
 8004e4a:	807b      	strh	r3, [r7, #2]
 8004e4c:	4613      	mov	r3, r2
 8004e4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004e50:	787b      	ldrb	r3, [r7, #1]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d003      	beq.n	8004e5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004e56:	887a      	ldrh	r2, [r7, #2]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004e5c:	e003      	b.n	8004e66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004e5e:	887b      	ldrh	r3, [r7, #2]
 8004e60:	041a      	lsls	r2, r3, #16
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	619a      	str	r2, [r3, #24]
}
 8004e66:	bf00      	nop
 8004e68:	370c      	adds	r7, #12
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr
	...

08004e74 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b082      	sub	sp, #8
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004e7e:	4b08      	ldr	r3, [pc, #32]	; (8004ea0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e80:	695a      	ldr	r2, [r3, #20]
 8004e82:	88fb      	ldrh	r3, [r7, #6]
 8004e84:	4013      	ands	r3, r2
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d006      	beq.n	8004e98 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004e8a:	4a05      	ldr	r2, [pc, #20]	; (8004ea0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e8c:	88fb      	ldrh	r3, [r7, #6]
 8004e8e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004e90:	88fb      	ldrh	r3, [r7, #6]
 8004e92:	4618      	mov	r0, r3
 8004e94:	f000 f806 	bl	8004ea4 <HAL_GPIO_EXTI_Callback>
  }
}
 8004e98:	bf00      	nop
 8004e9a:	3708      	adds	r7, #8
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	40013c00 	.word	0x40013c00

08004ea4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b083      	sub	sp, #12
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	4603      	mov	r3, r0
 8004eac:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004eae:	bf00      	nop
 8004eb0:	370c      	adds	r7, #12
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr
	...

08004ebc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b082      	sub	sp, #8
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d101      	bne.n	8004ece <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e07f      	b.n	8004fce <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d106      	bne.n	8004ee8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f7fe ff3e 	bl	8003d64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2224      	movs	r2, #36	; 0x24
 8004eec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f022 0201 	bic.w	r2, r2, #1
 8004efe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	685a      	ldr	r2, [r3, #4]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004f0c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	689a      	ldr	r2, [r3, #8]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f1c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d107      	bne.n	8004f36 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	689a      	ldr	r2, [r3, #8]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f32:	609a      	str	r2, [r3, #8]
 8004f34:	e006      	b.n	8004f44 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	689a      	ldr	r2, [r3, #8]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004f42:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	2b02      	cmp	r3, #2
 8004f4a:	d104      	bne.n	8004f56 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f54:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	6859      	ldr	r1, [r3, #4]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	4b1d      	ldr	r3, [pc, #116]	; (8004fd8 <HAL_I2C_Init+0x11c>)
 8004f62:	430b      	orrs	r3, r1
 8004f64:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	68da      	ldr	r2, [r3, #12]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f74:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	691a      	ldr	r2, [r3, #16]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	695b      	ldr	r3, [r3, #20]
 8004f7e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	699b      	ldr	r3, [r3, #24]
 8004f86:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	430a      	orrs	r2, r1
 8004f8e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	69d9      	ldr	r1, [r3, #28]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6a1a      	ldr	r2, [r3, #32]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	430a      	orrs	r2, r1
 8004f9e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f042 0201 	orr.w	r2, r2, #1
 8004fae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2220      	movs	r2, #32
 8004fba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004fcc:	2300      	movs	r3, #0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3708      	adds	r7, #8
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	02008000 	.word	0x02008000

08004fdc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b088      	sub	sp, #32
 8004fe0:	af02      	add	r7, sp, #8
 8004fe2:	60f8      	str	r0, [r7, #12]
 8004fe4:	607a      	str	r2, [r7, #4]
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	460b      	mov	r3, r1
 8004fea:	817b      	strh	r3, [r7, #10]
 8004fec:	4613      	mov	r3, r2
 8004fee:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	2b20      	cmp	r3, #32
 8004ffa:	f040 80da 	bne.w	80051b2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005004:	2b01      	cmp	r3, #1
 8005006:	d101      	bne.n	800500c <HAL_I2C_Master_Transmit+0x30>
 8005008:	2302      	movs	r3, #2
 800500a:	e0d3      	b.n	80051b4 <HAL_I2C_Master_Transmit+0x1d8>
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005014:	f7ff fa84 	bl	8004520 <HAL_GetTick>
 8005018:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	9300      	str	r3, [sp, #0]
 800501e:	2319      	movs	r3, #25
 8005020:	2201      	movs	r2, #1
 8005022:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005026:	68f8      	ldr	r0, [r7, #12]
 8005028:	f000 fefb 	bl	8005e22 <I2C_WaitOnFlagUntilTimeout>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d001      	beq.n	8005036 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e0be      	b.n	80051b4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2221      	movs	r2, #33	; 0x21
 800503a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2210      	movs	r2, #16
 8005042:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2200      	movs	r2, #0
 800504a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	893a      	ldrh	r2, [r7, #8]
 8005056:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2200      	movs	r2, #0
 800505c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005062:	b29b      	uxth	r3, r3
 8005064:	2bff      	cmp	r3, #255	; 0xff
 8005066:	d90e      	bls.n	8005086 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	22ff      	movs	r2, #255	; 0xff
 800506c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005072:	b2da      	uxtb	r2, r3
 8005074:	8979      	ldrh	r1, [r7, #10]
 8005076:	4b51      	ldr	r3, [pc, #324]	; (80051bc <HAL_I2C_Master_Transmit+0x1e0>)
 8005078:	9300      	str	r3, [sp, #0]
 800507a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800507e:	68f8      	ldr	r0, [r7, #12]
 8005080:	f001 f8e6 	bl	8006250 <I2C_TransferConfig>
 8005084:	e06c      	b.n	8005160 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800508a:	b29a      	uxth	r2, r3
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005094:	b2da      	uxtb	r2, r3
 8005096:	8979      	ldrh	r1, [r7, #10]
 8005098:	4b48      	ldr	r3, [pc, #288]	; (80051bc <HAL_I2C_Master_Transmit+0x1e0>)
 800509a:	9300      	str	r3, [sp, #0]
 800509c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80050a0:	68f8      	ldr	r0, [r7, #12]
 80050a2:	f001 f8d5 	bl	8006250 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80050a6:	e05b      	b.n	8005160 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050a8:	697a      	ldr	r2, [r7, #20]
 80050aa:	6a39      	ldr	r1, [r7, #32]
 80050ac:	68f8      	ldr	r0, [r7, #12]
 80050ae:	f000 fef8 	bl	8005ea2 <I2C_WaitOnTXISFlagUntilTimeout>
 80050b2:	4603      	mov	r3, r0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d001      	beq.n	80050bc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	e07b      	b.n	80051b4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c0:	781a      	ldrb	r2, [r3, #0]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050cc:	1c5a      	adds	r2, r3, #1
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	3b01      	subs	r3, #1
 80050da:	b29a      	uxth	r2, r3
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050e4:	3b01      	subs	r3, #1
 80050e6:	b29a      	uxth	r2, r3
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d034      	beq.n	8005160 <HAL_I2C_Master_Transmit+0x184>
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d130      	bne.n	8005160 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	9300      	str	r3, [sp, #0]
 8005102:	6a3b      	ldr	r3, [r7, #32]
 8005104:	2200      	movs	r2, #0
 8005106:	2180      	movs	r1, #128	; 0x80
 8005108:	68f8      	ldr	r0, [r7, #12]
 800510a:	f000 fe8a 	bl	8005e22 <I2C_WaitOnFlagUntilTimeout>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d001      	beq.n	8005118 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e04d      	b.n	80051b4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800511c:	b29b      	uxth	r3, r3
 800511e:	2bff      	cmp	r3, #255	; 0xff
 8005120:	d90e      	bls.n	8005140 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	22ff      	movs	r2, #255	; 0xff
 8005126:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800512c:	b2da      	uxtb	r2, r3
 800512e:	8979      	ldrh	r1, [r7, #10]
 8005130:	2300      	movs	r3, #0
 8005132:	9300      	str	r3, [sp, #0]
 8005134:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005138:	68f8      	ldr	r0, [r7, #12]
 800513a:	f001 f889 	bl	8006250 <I2C_TransferConfig>
 800513e:	e00f      	b.n	8005160 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005144:	b29a      	uxth	r2, r3
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800514e:	b2da      	uxtb	r2, r3
 8005150:	8979      	ldrh	r1, [r7, #10]
 8005152:	2300      	movs	r3, #0
 8005154:	9300      	str	r3, [sp, #0]
 8005156:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800515a:	68f8      	ldr	r0, [r7, #12]
 800515c:	f001 f878 	bl	8006250 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005164:	b29b      	uxth	r3, r3
 8005166:	2b00      	cmp	r3, #0
 8005168:	d19e      	bne.n	80050a8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800516a:	697a      	ldr	r2, [r7, #20]
 800516c:	6a39      	ldr	r1, [r7, #32]
 800516e:	68f8      	ldr	r0, [r7, #12]
 8005170:	f000 fed7 	bl	8005f22 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d001      	beq.n	800517e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e01a      	b.n	80051b4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	2220      	movs	r2, #32
 8005184:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	6859      	ldr	r1, [r3, #4]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	4b0b      	ldr	r3, [pc, #44]	; (80051c0 <HAL_I2C_Master_Transmit+0x1e4>)
 8005192:	400b      	ands	r3, r1
 8005194:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2220      	movs	r2, #32
 800519a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2200      	movs	r2, #0
 80051aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80051ae:	2300      	movs	r3, #0
 80051b0:	e000      	b.n	80051b4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80051b2:	2302      	movs	r3, #2
  }
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3718      	adds	r7, #24
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}
 80051bc:	80002000 	.word	0x80002000
 80051c0:	fe00e800 	.word	0xfe00e800

080051c4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b088      	sub	sp, #32
 80051c8:	af02      	add	r7, sp, #8
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	607a      	str	r2, [r7, #4]
 80051ce:	461a      	mov	r2, r3
 80051d0:	460b      	mov	r3, r1
 80051d2:	817b      	strh	r3, [r7, #10]
 80051d4:	4613      	mov	r3, r2
 80051d6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	2b20      	cmp	r3, #32
 80051e2:	f040 80db 	bne.w	800539c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d101      	bne.n	80051f4 <HAL_I2C_Master_Receive+0x30>
 80051f0:	2302      	movs	r3, #2
 80051f2:	e0d4      	b.n	800539e <HAL_I2C_Master_Receive+0x1da>
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80051fc:	f7ff f990 	bl	8004520 <HAL_GetTick>
 8005200:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	9300      	str	r3, [sp, #0]
 8005206:	2319      	movs	r3, #25
 8005208:	2201      	movs	r2, #1
 800520a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800520e:	68f8      	ldr	r0, [r7, #12]
 8005210:	f000 fe07 	bl	8005e22 <I2C_WaitOnFlagUntilTimeout>
 8005214:	4603      	mov	r3, r0
 8005216:	2b00      	cmp	r3, #0
 8005218:	d001      	beq.n	800521e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e0bf      	b.n	800539e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2222      	movs	r2, #34	; 0x22
 8005222:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2210      	movs	r2, #16
 800522a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2200      	movs	r2, #0
 8005232:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	893a      	ldrh	r2, [r7, #8]
 800523e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2200      	movs	r2, #0
 8005244:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800524a:	b29b      	uxth	r3, r3
 800524c:	2bff      	cmp	r3, #255	; 0xff
 800524e:	d90e      	bls.n	800526e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	22ff      	movs	r2, #255	; 0xff
 8005254:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800525a:	b2da      	uxtb	r2, r3
 800525c:	8979      	ldrh	r1, [r7, #10]
 800525e:	4b52      	ldr	r3, [pc, #328]	; (80053a8 <HAL_I2C_Master_Receive+0x1e4>)
 8005260:	9300      	str	r3, [sp, #0]
 8005262:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005266:	68f8      	ldr	r0, [r7, #12]
 8005268:	f000 fff2 	bl	8006250 <I2C_TransferConfig>
 800526c:	e06d      	b.n	800534a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005272:	b29a      	uxth	r2, r3
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800527c:	b2da      	uxtb	r2, r3
 800527e:	8979      	ldrh	r1, [r7, #10]
 8005280:	4b49      	ldr	r3, [pc, #292]	; (80053a8 <HAL_I2C_Master_Receive+0x1e4>)
 8005282:	9300      	str	r3, [sp, #0]
 8005284:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005288:	68f8      	ldr	r0, [r7, #12]
 800528a:	f000 ffe1 	bl	8006250 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800528e:	e05c      	b.n	800534a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005290:	697a      	ldr	r2, [r7, #20]
 8005292:	6a39      	ldr	r1, [r7, #32]
 8005294:	68f8      	ldr	r0, [r7, #12]
 8005296:	f000 fe81 	bl	8005f9c <I2C_WaitOnRXNEFlagUntilTimeout>
 800529a:	4603      	mov	r3, r0
 800529c:	2b00      	cmp	r3, #0
 800529e:	d001      	beq.n	80052a4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	e07c      	b.n	800539e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ae:	b2d2      	uxtb	r2, r2
 80052b0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b6:	1c5a      	adds	r2, r3, #1
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052c0:	3b01      	subs	r3, #1
 80052c2:	b29a      	uxth	r2, r3
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	3b01      	subs	r3, #1
 80052d0:	b29a      	uxth	r2, r3
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052da:	b29b      	uxth	r3, r3
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d034      	beq.n	800534a <HAL_I2C_Master_Receive+0x186>
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d130      	bne.n	800534a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	9300      	str	r3, [sp, #0]
 80052ec:	6a3b      	ldr	r3, [r7, #32]
 80052ee:	2200      	movs	r2, #0
 80052f0:	2180      	movs	r1, #128	; 0x80
 80052f2:	68f8      	ldr	r0, [r7, #12]
 80052f4:	f000 fd95 	bl	8005e22 <I2C_WaitOnFlagUntilTimeout>
 80052f8:	4603      	mov	r3, r0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d001      	beq.n	8005302 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e04d      	b.n	800539e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005306:	b29b      	uxth	r3, r3
 8005308:	2bff      	cmp	r3, #255	; 0xff
 800530a:	d90e      	bls.n	800532a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	22ff      	movs	r2, #255	; 0xff
 8005310:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005316:	b2da      	uxtb	r2, r3
 8005318:	8979      	ldrh	r1, [r7, #10]
 800531a:	2300      	movs	r3, #0
 800531c:	9300      	str	r3, [sp, #0]
 800531e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005322:	68f8      	ldr	r0, [r7, #12]
 8005324:	f000 ff94 	bl	8006250 <I2C_TransferConfig>
 8005328:	e00f      	b.n	800534a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800532e:	b29a      	uxth	r2, r3
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005338:	b2da      	uxtb	r2, r3
 800533a:	8979      	ldrh	r1, [r7, #10]
 800533c:	2300      	movs	r3, #0
 800533e:	9300      	str	r3, [sp, #0]
 8005340:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005344:	68f8      	ldr	r0, [r7, #12]
 8005346:	f000 ff83 	bl	8006250 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800534e:	b29b      	uxth	r3, r3
 8005350:	2b00      	cmp	r3, #0
 8005352:	d19d      	bne.n	8005290 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005354:	697a      	ldr	r2, [r7, #20]
 8005356:	6a39      	ldr	r1, [r7, #32]
 8005358:	68f8      	ldr	r0, [r7, #12]
 800535a:	f000 fde2 	bl	8005f22 <I2C_WaitOnSTOPFlagUntilTimeout>
 800535e:	4603      	mov	r3, r0
 8005360:	2b00      	cmp	r3, #0
 8005362:	d001      	beq.n	8005368 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	e01a      	b.n	800539e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	2220      	movs	r2, #32
 800536e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	6859      	ldr	r1, [r3, #4]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	4b0c      	ldr	r3, [pc, #48]	; (80053ac <HAL_I2C_Master_Receive+0x1e8>)
 800537c:	400b      	ands	r3, r1
 800537e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2220      	movs	r2, #32
 8005384:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2200      	movs	r2, #0
 800538c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2200      	movs	r2, #0
 8005394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005398:	2300      	movs	r3, #0
 800539a:	e000      	b.n	800539e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800539c:	2302      	movs	r3, #2
  }
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3718      	adds	r7, #24
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	bf00      	nop
 80053a8:	80002400 	.word	0x80002400
 80053ac:	fe00e800 	.word	0xfe00e800

080053b0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b084      	sub	sp, #16
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	699b      	ldr	r3, [r3, #24]
 80053be:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d005      	beq.n	80053dc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053d4:	68ba      	ldr	r2, [r7, #8]
 80053d6:	68f9      	ldr	r1, [r7, #12]
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	4798      	blx	r3
  }
}
 80053dc:	bf00      	nop
 80053de:	3710      	adds	r7, #16
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b086      	sub	sp, #24
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	699b      	ldr	r3, [r3, #24]
 80053f2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	0a1b      	lsrs	r3, r3, #8
 8005400:	f003 0301 	and.w	r3, r3, #1
 8005404:	2b00      	cmp	r3, #0
 8005406:	d010      	beq.n	800542a <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	09db      	lsrs	r3, r3, #7
 800540c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005410:	2b00      	cmp	r3, #0
 8005412:	d00a      	beq.n	800542a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005418:	f043 0201 	orr.w	r2, r3, #1
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005428:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	0a9b      	lsrs	r3, r3, #10
 800542e:	f003 0301 	and.w	r3, r3, #1
 8005432:	2b00      	cmp	r3, #0
 8005434:	d010      	beq.n	8005458 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	09db      	lsrs	r3, r3, #7
 800543a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00a      	beq.n	8005458 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005446:	f043 0208 	orr.w	r2, r3, #8
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005456:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	0a5b      	lsrs	r3, r3, #9
 800545c:	f003 0301 	and.w	r3, r3, #1
 8005460:	2b00      	cmp	r3, #0
 8005462:	d010      	beq.n	8005486 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	09db      	lsrs	r3, r3, #7
 8005468:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800546c:	2b00      	cmp	r3, #0
 800546e:	d00a      	beq.n	8005486 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005474:	f043 0202 	orr.w	r2, r3, #2
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005484:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800548a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f003 030b 	and.w	r3, r3, #11
 8005492:	2b00      	cmp	r3, #0
 8005494:	d003      	beq.n	800549e <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8005496:	68f9      	ldr	r1, [r7, #12]
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f000 fb89 	bl	8005bb0 <I2C_ITError>
  }
}
 800549e:	bf00      	nop
 80054a0:	3718      	adds	r7, #24
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}

080054a6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80054a6:	b480      	push	{r7}
 80054a8:	b083      	sub	sp, #12
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80054ae:	bf00      	nop
 80054b0:	370c      	adds	r7, #12
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr

080054ba <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80054ba:	b480      	push	{r7}
 80054bc:	b083      	sub	sp, #12
 80054be:	af00      	add	r7, sp, #0
 80054c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80054c2:	bf00      	nop
 80054c4:	370c      	adds	r7, #12
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr

080054ce <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80054ce:	b480      	push	{r7}
 80054d0:	b083      	sub	sp, #12
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]
 80054d6:	460b      	mov	r3, r1
 80054d8:	70fb      	strb	r3, [r7, #3]
 80054da:	4613      	mov	r3, r2
 80054dc:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80054de:	bf00      	nop
 80054e0:	370c      	adds	r7, #12
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr

080054ea <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80054ea:	b480      	push	{r7}
 80054ec:	b083      	sub	sp, #12
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80054f2:	bf00      	nop
 80054f4:	370c      	adds	r7, #12
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr

080054fe <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80054fe:	b480      	push	{r7}
 8005500:	b083      	sub	sp, #12
 8005502:	af00      	add	r7, sp, #0
 8005504:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005506:	bf00      	nop
 8005508:	370c      	adds	r7, #12
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr

08005512 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005512:	b480      	push	{r7}
 8005514:	b083      	sub	sp, #12
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800551a:	bf00      	nop
 800551c:	370c      	adds	r7, #12
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr

08005526 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8005526:	b580      	push	{r7, lr}
 8005528:	b086      	sub	sp, #24
 800552a:	af00      	add	r7, sp, #0
 800552c:	60f8      	str	r0, [r7, #12]
 800552e:	60b9      	str	r1, [r7, #8]
 8005530:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005536:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005542:	2b01      	cmp	r3, #1
 8005544:	d101      	bne.n	800554a <I2C_Slave_ISR_IT+0x24>
 8005546:	2302      	movs	r3, #2
 8005548:	e0ec      	b.n	8005724 <I2C_Slave_ISR_IT+0x1fe>
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2201      	movs	r2, #1
 800554e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	095b      	lsrs	r3, r3, #5
 8005556:	f003 0301 	and.w	r3, r3, #1
 800555a:	2b00      	cmp	r3, #0
 800555c:	d009      	beq.n	8005572 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	095b      	lsrs	r3, r3, #5
 8005562:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005566:	2b00      	cmp	r3, #0
 8005568:	d003      	beq.n	8005572 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800556a:	6939      	ldr	r1, [r7, #16]
 800556c:	68f8      	ldr	r0, [r7, #12]
 800556e:	f000 f9bf 	bl	80058f0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	091b      	lsrs	r3, r3, #4
 8005576:	f003 0301 	and.w	r3, r3, #1
 800557a:	2b00      	cmp	r3, #0
 800557c:	d04d      	beq.n	800561a <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	091b      	lsrs	r3, r3, #4
 8005582:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005586:	2b00      	cmp	r3, #0
 8005588:	d047      	beq.n	800561a <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800558e:	b29b      	uxth	r3, r3
 8005590:	2b00      	cmp	r3, #0
 8005592:	d128      	bne.n	80055e6 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800559a:	b2db      	uxtb	r3, r3
 800559c:	2b28      	cmp	r3, #40	; 0x28
 800559e:	d108      	bne.n	80055b2 <I2C_Slave_ISR_IT+0x8c>
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80055a6:	d104      	bne.n	80055b2 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80055a8:	6939      	ldr	r1, [r7, #16]
 80055aa:	68f8      	ldr	r0, [r7, #12]
 80055ac:	f000 faaa 	bl	8005b04 <I2C_ITListenCplt>
 80055b0:	e032      	b.n	8005618 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	2b29      	cmp	r3, #41	; 0x29
 80055bc:	d10e      	bne.n	80055dc <I2C_Slave_ISR_IT+0xb6>
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80055c4:	d00a      	beq.n	80055dc <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	2210      	movs	r2, #16
 80055cc:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80055ce:	68f8      	ldr	r0, [r7, #12]
 80055d0:	f000 fbe5 	bl	8005d9e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80055d4:	68f8      	ldr	r0, [r7, #12]
 80055d6:	f000 f92d 	bl	8005834 <I2C_ITSlaveSeqCplt>
 80055da:	e01d      	b.n	8005618 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	2210      	movs	r2, #16
 80055e2:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80055e4:	e096      	b.n	8005714 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	2210      	movs	r2, #16
 80055ec:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055f2:	f043 0204 	orr.w	r2, r3, #4
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d004      	beq.n	800560a <I2C_Slave_ISR_IT+0xe4>
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005606:	f040 8085 	bne.w	8005714 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800560e:	4619      	mov	r1, r3
 8005610:	68f8      	ldr	r0, [r7, #12]
 8005612:	f000 facd 	bl	8005bb0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005616:	e07d      	b.n	8005714 <I2C_Slave_ISR_IT+0x1ee>
 8005618:	e07c      	b.n	8005714 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	089b      	lsrs	r3, r3, #2
 800561e:	f003 0301 	and.w	r3, r3, #1
 8005622:	2b00      	cmp	r3, #0
 8005624:	d030      	beq.n	8005688 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	089b      	lsrs	r3, r3, #2
 800562a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800562e:	2b00      	cmp	r3, #0
 8005630:	d02a      	beq.n	8005688 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005636:	b29b      	uxth	r3, r3
 8005638:	2b00      	cmp	r3, #0
 800563a:	d018      	beq.n	800566e <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005646:	b2d2      	uxtb	r2, r2
 8005648:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564e:	1c5a      	adds	r2, r3, #1
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005658:	3b01      	subs	r3, #1
 800565a:	b29a      	uxth	r2, r3
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005664:	b29b      	uxth	r3, r3
 8005666:	3b01      	subs	r3, #1
 8005668:	b29a      	uxth	r2, r3
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005672:	b29b      	uxth	r3, r3
 8005674:	2b00      	cmp	r3, #0
 8005676:	d14f      	bne.n	8005718 <I2C_Slave_ISR_IT+0x1f2>
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800567e:	d04b      	beq.n	8005718 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8005680:	68f8      	ldr	r0, [r7, #12]
 8005682:	f000 f8d7 	bl	8005834 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005686:	e047      	b.n	8005718 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	08db      	lsrs	r3, r3, #3
 800568c:	f003 0301 	and.w	r3, r3, #1
 8005690:	2b00      	cmp	r3, #0
 8005692:	d00a      	beq.n	80056aa <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	08db      	lsrs	r3, r3, #3
 8005698:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800569c:	2b00      	cmp	r3, #0
 800569e:	d004      	beq.n	80056aa <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80056a0:	6939      	ldr	r1, [r7, #16]
 80056a2:	68f8      	ldr	r0, [r7, #12]
 80056a4:	f000 f842 	bl	800572c <I2C_ITAddrCplt>
 80056a8:	e037      	b.n	800571a <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	085b      	lsrs	r3, r3, #1
 80056ae:	f003 0301 	and.w	r3, r3, #1
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d031      	beq.n	800571a <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	085b      	lsrs	r3, r3, #1
 80056ba:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d02b      	beq.n	800571a <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d018      	beq.n	80056fe <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d0:	781a      	ldrb	r2, [r3, #0]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056dc:	1c5a      	adds	r2, r3, #1
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	3b01      	subs	r3, #1
 80056ea:	b29a      	uxth	r2, r3
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056f4:	3b01      	subs	r3, #1
 80056f6:	b29a      	uxth	r2, r3
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	851a      	strh	r2, [r3, #40]	; 0x28
 80056fc:	e00d      	b.n	800571a <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005704:	d002      	beq.n	800570c <I2C_Slave_ISR_IT+0x1e6>
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d106      	bne.n	800571a <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800570c:	68f8      	ldr	r0, [r7, #12]
 800570e:	f000 f891 	bl	8005834 <I2C_ITSlaveSeqCplt>
 8005712:	e002      	b.n	800571a <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8005714:	bf00      	nop
 8005716:	e000      	b.n	800571a <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8005718:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2200      	movs	r2, #0
 800571e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005722:	2300      	movs	r3, #0
}
 8005724:	4618      	mov	r0, r3
 8005726:	3718      	adds	r7, #24
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}

0800572c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b084      	sub	sp, #16
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800573c:	b2db      	uxtb	r3, r3
 800573e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005742:	2b28      	cmp	r3, #40	; 0x28
 8005744:	d16a      	bne.n	800581c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	699b      	ldr	r3, [r3, #24]
 800574c:	0c1b      	lsrs	r3, r3, #16
 800574e:	b2db      	uxtb	r3, r3
 8005750:	f003 0301 	and.w	r3, r3, #1
 8005754:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	699b      	ldr	r3, [r3, #24]
 800575c:	0c1b      	lsrs	r3, r3, #16
 800575e:	b29b      	uxth	r3, r3
 8005760:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005764:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	b29b      	uxth	r3, r3
 800576e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005772:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	b29b      	uxth	r3, r3
 800577c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005780:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	2b02      	cmp	r3, #2
 8005788:	d138      	bne.n	80057fc <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800578a:	897b      	ldrh	r3, [r7, #10]
 800578c:	09db      	lsrs	r3, r3, #7
 800578e:	b29a      	uxth	r2, r3
 8005790:	89bb      	ldrh	r3, [r7, #12]
 8005792:	4053      	eors	r3, r2
 8005794:	b29b      	uxth	r3, r3
 8005796:	f003 0306 	and.w	r3, r3, #6
 800579a:	2b00      	cmp	r3, #0
 800579c:	d11c      	bne.n	80057d8 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800579e:	897b      	ldrh	r3, [r7, #10]
 80057a0:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057a6:	1c5a      	adds	r2, r3, #1
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057b0:	2b02      	cmp	r3, #2
 80057b2:	d13b      	bne.n	800582c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	2208      	movs	r2, #8
 80057c0:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80057ca:	89ba      	ldrh	r2, [r7, #12]
 80057cc:	7bfb      	ldrb	r3, [r7, #15]
 80057ce:	4619      	mov	r1, r3
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f7ff fe7c 	bl	80054ce <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80057d6:	e029      	b.n	800582c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80057d8:	893b      	ldrh	r3, [r7, #8]
 80057da:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80057dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f000 fd67 	bl	80062b4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80057ee:	89ba      	ldrh	r2, [r7, #12]
 80057f0:	7bfb      	ldrb	r3, [r7, #15]
 80057f2:	4619      	mov	r1, r3
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f7ff fe6a 	bl	80054ce <HAL_I2C_AddrCallback>
}
 80057fa:	e017      	b.n	800582c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80057fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f000 fd57 	bl	80062b4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800580e:	89ba      	ldrh	r2, [r7, #12]
 8005810:	7bfb      	ldrb	r3, [r7, #15]
 8005812:	4619      	mov	r1, r3
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f7ff fe5a 	bl	80054ce <HAL_I2C_AddrCallback>
}
 800581a:	e007      	b.n	800582c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2208      	movs	r2, #8
 8005822:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800582c:	bf00      	nop
 800582e:	3710      	adds	r7, #16
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}

08005834 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	0b9b      	lsrs	r3, r3, #14
 8005850:	f003 0301 	and.w	r3, r3, #1
 8005854:	2b00      	cmp	r3, #0
 8005856:	d008      	beq.n	800586a <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005866:	601a      	str	r2, [r3, #0]
 8005868:	e00d      	b.n	8005886 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	0bdb      	lsrs	r3, r3, #15
 800586e:	f003 0301 	and.w	r3, r3, #1
 8005872:	2b00      	cmp	r3, #0
 8005874:	d007      	beq.n	8005886 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005884:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800588c:	b2db      	uxtb	r3, r3
 800588e:	2b29      	cmp	r3, #41	; 0x29
 8005890:	d112      	bne.n	80058b8 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2228      	movs	r2, #40	; 0x28
 8005896:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2221      	movs	r2, #33	; 0x21
 800589e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80058a0:	2101      	movs	r1, #1
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f000 fd06 	bl	80062b4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f7ff fdf8 	bl	80054a6 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80058b6:	e017      	b.n	80058e8 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	2b2a      	cmp	r3, #42	; 0x2a
 80058c2:	d111      	bne.n	80058e8 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2228      	movs	r2, #40	; 0x28
 80058c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2222      	movs	r2, #34	; 0x22
 80058d0:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80058d2:	2102      	movs	r1, #2
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f000 fced 	bl	80062b4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f7ff fde9 	bl	80054ba <HAL_I2C_SlaveRxCpltCallback>
}
 80058e8:	bf00      	nop
 80058ea:	3710      	adds	r7, #16
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}

080058f0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b086      	sub	sp, #24
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800590c:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	2220      	movs	r2, #32
 8005914:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005916:	7bfb      	ldrb	r3, [r7, #15]
 8005918:	2b21      	cmp	r3, #33	; 0x21
 800591a:	d002      	beq.n	8005922 <I2C_ITSlaveCplt+0x32>
 800591c:	7bfb      	ldrb	r3, [r7, #15]
 800591e:	2b29      	cmp	r3, #41	; 0x29
 8005920:	d108      	bne.n	8005934 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8005922:	f248 0101 	movw	r1, #32769	; 0x8001
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f000 fcc4 	bl	80062b4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2221      	movs	r2, #33	; 0x21
 8005930:	631a      	str	r2, [r3, #48]	; 0x30
 8005932:	e00d      	b.n	8005950 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005934:	7bfb      	ldrb	r3, [r7, #15]
 8005936:	2b22      	cmp	r3, #34	; 0x22
 8005938:	d002      	beq.n	8005940 <I2C_ITSlaveCplt+0x50>
 800593a:	7bfb      	ldrb	r3, [r7, #15]
 800593c:	2b2a      	cmp	r3, #42	; 0x2a
 800593e:	d107      	bne.n	8005950 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8005940:	f248 0102 	movw	r1, #32770	; 0x8002
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f000 fcb5 	bl	80062b4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2222      	movs	r2, #34	; 0x22
 800594e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	685a      	ldr	r2, [r3, #4]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800595e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	6859      	ldr	r1, [r3, #4]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	4b64      	ldr	r3, [pc, #400]	; (8005afc <I2C_ITSlaveCplt+0x20c>)
 800596c:	400b      	ands	r3, r1
 800596e:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f000 fa14 	bl	8005d9e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	0b9b      	lsrs	r3, r3, #14
 800597a:	f003 0301 	and.w	r3, r3, #1
 800597e:	2b00      	cmp	r3, #0
 8005980:	d013      	beq.n	80059aa <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005990:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005996:	2b00      	cmp	r3, #0
 8005998:	d020      	beq.n	80059dc <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	b29a      	uxth	r2, r3
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80059a8:	e018      	b.n	80059dc <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	0bdb      	lsrs	r3, r3, #15
 80059ae:	f003 0301 	and.w	r3, r3, #1
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d012      	beq.n	80059dc <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80059c4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d006      	beq.n	80059dc <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	b29a      	uxth	r2, r3
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	089b      	lsrs	r3, r3, #2
 80059e0:	f003 0301 	and.w	r3, r3, #1
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d020      	beq.n	8005a2a <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	f023 0304 	bic.w	r3, r3, #4
 80059ee:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059fa:	b2d2      	uxtb	r2, r2
 80059fc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a02:	1c5a      	adds	r2, r3, #1
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d00c      	beq.n	8005a2a <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a14:	3b01      	subs	r3, #1
 8005a16:	b29a      	uxth	r2, r3
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	3b01      	subs	r3, #1
 8005a24:	b29a      	uxth	r2, r3
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d005      	beq.n	8005a40 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a38:	f043 0204 	orr.w	r2, r3, #4
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2200      	movs	r2, #0
 8005a44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d010      	beq.n	8005a78 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a5a:	4619      	mov	r1, r3
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f000 f8a7 	bl	8005bb0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	2b28      	cmp	r3, #40	; 0x28
 8005a6c:	d141      	bne.n	8005af2 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8005a6e:	6979      	ldr	r1, [r7, #20]
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f000 f847 	bl	8005b04 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005a76:	e03c      	b.n	8005af2 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a7c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005a80:	d014      	beq.n	8005aac <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f7ff fed6 	bl	8005834 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	4a1d      	ldr	r2, [pc, #116]	; (8005b00 <I2C_ITSlaveCplt+0x210>)
 8005a8c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2220      	movs	r2, #32
 8005a92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f7ff fd20 	bl	80054ea <HAL_I2C_ListenCpltCallback>
}
 8005aaa:	e022      	b.n	8005af2 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ab2:	b2db      	uxtb	r3, r3
 8005ab4:	2b22      	cmp	r3, #34	; 0x22
 8005ab6:	d10e      	bne.n	8005ad6 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2220      	movs	r2, #32
 8005abc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f7ff fcf3 	bl	80054ba <HAL_I2C_SlaveRxCpltCallback>
}
 8005ad4:	e00d      	b.n	8005af2 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2220      	movs	r2, #32
 8005ada:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f7ff fcda 	bl	80054a6 <HAL_I2C_SlaveTxCpltCallback>
}
 8005af2:	bf00      	nop
 8005af4:	3718      	adds	r7, #24
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	bf00      	nop
 8005afc:	fe00e800 	.word	0xfe00e800
 8005b00:	ffff0000 	.word	0xffff0000

08005b04 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b082      	sub	sp, #8
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4a26      	ldr	r2, [pc, #152]	; (8005bac <I2C_ITListenCplt+0xa8>)
 8005b12:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2220      	movs	r2, #32
 8005b1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2200      	movs	r2, #0
 8005b26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	089b      	lsrs	r3, r3, #2
 8005b34:	f003 0301 	and.w	r3, r3, #1
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d022      	beq.n	8005b82 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b46:	b2d2      	uxtb	r2, r2
 8005b48:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4e:	1c5a      	adds	r2, r3, #1
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d012      	beq.n	8005b82 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b60:	3b01      	subs	r3, #1
 8005b62:	b29a      	uxth	r2, r3
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	3b01      	subs	r3, #1
 8005b70:	b29a      	uxth	r2, r3
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b7a:	f043 0204 	orr.w	r2, r3, #4
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005b82:	f248 0103 	movw	r1, #32771	; 0x8003
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 fb94 	bl	80062b4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	2210      	movs	r2, #16
 8005b92:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f7ff fca4 	bl	80054ea <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8005ba2:	bf00      	nop
 8005ba4:	3708      	adds	r7, #8
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
 8005baa:	bf00      	nop
 8005bac:	ffff0000 	.word	0xffff0000

08005bb0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b084      	sub	sp, #16
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bc0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	4a5d      	ldr	r2, [pc, #372]	; (8005d44 <I2C_ITError+0x194>)
 8005bce:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	431a      	orrs	r2, r3
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8005be2:	7bfb      	ldrb	r3, [r7, #15]
 8005be4:	2b28      	cmp	r3, #40	; 0x28
 8005be6:	d005      	beq.n	8005bf4 <I2C_ITError+0x44>
 8005be8:	7bfb      	ldrb	r3, [r7, #15]
 8005bea:	2b29      	cmp	r3, #41	; 0x29
 8005bec:	d002      	beq.n	8005bf4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8005bee:	7bfb      	ldrb	r3, [r7, #15]
 8005bf0:	2b2a      	cmp	r3, #42	; 0x2a
 8005bf2:	d10b      	bne.n	8005c0c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005bf4:	2103      	movs	r1, #3
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 fb5c 	bl	80062b4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2228      	movs	r2, #40	; 0x28
 8005c00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	4a50      	ldr	r2, [pc, #320]	; (8005d48 <I2C_ITError+0x198>)
 8005c08:	635a      	str	r2, [r3, #52]	; 0x34
 8005c0a:	e011      	b.n	8005c30 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005c0c:	f248 0103 	movw	r1, #32771	; 0x8003
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f000 fb4f 	bl	80062b4 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	2b60      	cmp	r3, #96	; 0x60
 8005c20:	d003      	beq.n	8005c2a <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2220      	movs	r2, #32
 8005c26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c34:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d039      	beq.n	8005cb2 <I2C_ITError+0x102>
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	2b11      	cmp	r3, #17
 8005c42:	d002      	beq.n	8005c4a <I2C_ITError+0x9a>
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	2b21      	cmp	r3, #33	; 0x21
 8005c48:	d133      	bne.n	8005cb2 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c58:	d107      	bne.n	8005c6a <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005c68:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f7fe ff14 	bl	8004a9c <HAL_DMA_GetState>
 8005c74:	4603      	mov	r3, r0
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d017      	beq.n	8005caa <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c7e:	4a33      	ldr	r2, [pc, #204]	; (8005d4c <I2C_ITError+0x19c>)
 8005c80:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f7fe fee2 	bl	8004a58 <HAL_DMA_Abort_IT>
 8005c94:	4603      	mov	r3, r0
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d04d      	beq.n	8005d36 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005ca4:	4610      	mov	r0, r2
 8005ca6:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005ca8:	e045      	b.n	8005d36 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f000 f850 	bl	8005d50 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005cb0:	e041      	b.n	8005d36 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d039      	beq.n	8005d2e <I2C_ITError+0x17e>
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	2b12      	cmp	r3, #18
 8005cbe:	d002      	beq.n	8005cc6 <I2C_ITError+0x116>
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	2b22      	cmp	r3, #34	; 0x22
 8005cc4:	d133      	bne.n	8005d2e <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005cd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cd4:	d107      	bne.n	8005ce6 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005ce4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cea:	4618      	mov	r0, r3
 8005cec:	f7fe fed6 	bl	8004a9c <HAL_DMA_GetState>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d017      	beq.n	8005d26 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cfa:	4a14      	ldr	r2, [pc, #80]	; (8005d4c <I2C_ITError+0x19c>)
 8005cfc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2200      	movs	r2, #0
 8005d02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f7fe fea4 	bl	8004a58 <HAL_DMA_Abort_IT>
 8005d10:	4603      	mov	r3, r0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d011      	beq.n	8005d3a <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d1c:	687a      	ldr	r2, [r7, #4]
 8005d1e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005d20:	4610      	mov	r0, r2
 8005d22:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005d24:	e009      	b.n	8005d3a <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f000 f812 	bl	8005d50 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005d2c:	e005      	b.n	8005d3a <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 f80e 	bl	8005d50 <I2C_TreatErrorCallback>
  }
}
 8005d34:	e002      	b.n	8005d3c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005d36:	bf00      	nop
 8005d38:	e000      	b.n	8005d3c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005d3a:	bf00      	nop
}
 8005d3c:	bf00      	nop
 8005d3e:	3710      	adds	r7, #16
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}
 8005d44:	ffff0000 	.word	0xffff0000
 8005d48:	08005527 	.word	0x08005527
 8005d4c:	08005de7 	.word	0x08005de7

08005d50 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b082      	sub	sp, #8
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d5e:	b2db      	uxtb	r3, r3
 8005d60:	2b60      	cmp	r3, #96	; 0x60
 8005d62:	d10e      	bne.n	8005d82 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2220      	movs	r2, #32
 8005d68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f7ff fbc9 	bl	8005512 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005d80:	e009      	b.n	8005d96 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2200      	movs	r2, #0
 8005d86:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f7ff fbb4 	bl	80054fe <HAL_I2C_ErrorCallback>
}
 8005d96:	bf00      	nop
 8005d98:	3708      	adds	r7, #8
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}

08005d9e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005d9e:	b480      	push	{r7}
 8005da0:	b083      	sub	sp, #12
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	699b      	ldr	r3, [r3, #24]
 8005dac:	f003 0302 	and.w	r3, r3, #2
 8005db0:	2b02      	cmp	r3, #2
 8005db2:	d103      	bne.n	8005dbc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	2200      	movs	r2, #0
 8005dba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	699b      	ldr	r3, [r3, #24]
 8005dc2:	f003 0301 	and.w	r3, r3, #1
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d007      	beq.n	8005dda <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	699a      	ldr	r2, [r3, #24]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f042 0201 	orr.w	r2, r2, #1
 8005dd8:	619a      	str	r2, [r3, #24]
  }
}
 8005dda:	bf00      	nop
 8005ddc:	370c      	adds	r7, #12
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr

08005de6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005de6:	b580      	push	{r7, lr}
 8005de8:	b084      	sub	sp, #16
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005df2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d003      	beq.n	8005e04 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e00:	2200      	movs	r2, #0
 8005e02:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d003      	beq.n	8005e14 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e10:	2200      	movs	r2, #0
 8005e12:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8005e14:	68f8      	ldr	r0, [r7, #12]
 8005e16:	f7ff ff9b 	bl	8005d50 <I2C_TreatErrorCallback>
}
 8005e1a:	bf00      	nop
 8005e1c:	3710      	adds	r7, #16
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}

08005e22 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005e22:	b580      	push	{r7, lr}
 8005e24:	b084      	sub	sp, #16
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	60f8      	str	r0, [r7, #12]
 8005e2a:	60b9      	str	r1, [r7, #8]
 8005e2c:	603b      	str	r3, [r7, #0]
 8005e2e:	4613      	mov	r3, r2
 8005e30:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e32:	e022      	b.n	8005e7a <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e3a:	d01e      	beq.n	8005e7a <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e3c:	f7fe fb70 	bl	8004520 <HAL_GetTick>
 8005e40:	4602      	mov	r2, r0
 8005e42:	69bb      	ldr	r3, [r7, #24]
 8005e44:	1ad3      	subs	r3, r2, r3
 8005e46:	683a      	ldr	r2, [r7, #0]
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d302      	bcc.n	8005e52 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d113      	bne.n	8005e7a <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e56:	f043 0220 	orr.w	r2, r3, #32
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2220      	movs	r2, #32
 8005e62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2200      	movs	r2, #0
 8005e72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	e00f      	b.n	8005e9a <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	699a      	ldr	r2, [r3, #24]
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	4013      	ands	r3, r2
 8005e84:	68ba      	ldr	r2, [r7, #8]
 8005e86:	429a      	cmp	r2, r3
 8005e88:	bf0c      	ite	eq
 8005e8a:	2301      	moveq	r3, #1
 8005e8c:	2300      	movne	r3, #0
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	461a      	mov	r2, r3
 8005e92:	79fb      	ldrb	r3, [r7, #7]
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d0cd      	beq.n	8005e34 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e98:	2300      	movs	r3, #0
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3710      	adds	r7, #16
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}

08005ea2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005ea2:	b580      	push	{r7, lr}
 8005ea4:	b084      	sub	sp, #16
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	60f8      	str	r0, [r7, #12]
 8005eaa:	60b9      	str	r1, [r7, #8]
 8005eac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005eae:	e02c      	b.n	8005f0a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005eb0:	687a      	ldr	r2, [r7, #4]
 8005eb2:	68b9      	ldr	r1, [r7, #8]
 8005eb4:	68f8      	ldr	r0, [r7, #12]
 8005eb6:	f000 f8eb 	bl	8006090 <I2C_IsErrorOccurred>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d001      	beq.n	8005ec4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e02a      	b.n	8005f1a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eca:	d01e      	beq.n	8005f0a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ecc:	f7fe fb28 	bl	8004520 <HAL_GetTick>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	1ad3      	subs	r3, r2, r3
 8005ed6:	68ba      	ldr	r2, [r7, #8]
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d302      	bcc.n	8005ee2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d113      	bne.n	8005f0a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ee6:	f043 0220 	orr.w	r2, r3, #32
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2220      	movs	r2, #32
 8005ef2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2200      	movs	r2, #0
 8005f02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	e007      	b.n	8005f1a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	699b      	ldr	r3, [r3, #24]
 8005f10:	f003 0302 	and.w	r3, r3, #2
 8005f14:	2b02      	cmp	r3, #2
 8005f16:	d1cb      	bne.n	8005eb0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005f18:	2300      	movs	r3, #0
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3710      	adds	r7, #16
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}

08005f22 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005f22:	b580      	push	{r7, lr}
 8005f24:	b084      	sub	sp, #16
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	60f8      	str	r0, [r7, #12]
 8005f2a:	60b9      	str	r1, [r7, #8]
 8005f2c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f2e:	e028      	b.n	8005f82 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	68b9      	ldr	r1, [r7, #8]
 8005f34:	68f8      	ldr	r0, [r7, #12]
 8005f36:	f000 f8ab 	bl	8006090 <I2C_IsErrorOccurred>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d001      	beq.n	8005f44 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	e026      	b.n	8005f92 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f44:	f7fe faec 	bl	8004520 <HAL_GetTick>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	1ad3      	subs	r3, r2, r3
 8005f4e:	68ba      	ldr	r2, [r7, #8]
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d302      	bcc.n	8005f5a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d113      	bne.n	8005f82 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f5e:	f043 0220 	orr.w	r2, r3, #32
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2220      	movs	r2, #32
 8005f6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2200      	movs	r2, #0
 8005f72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e007      	b.n	8005f92 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	699b      	ldr	r3, [r3, #24]
 8005f88:	f003 0320 	and.w	r3, r3, #32
 8005f8c:	2b20      	cmp	r3, #32
 8005f8e:	d1cf      	bne.n	8005f30 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005f90:	2300      	movs	r3, #0
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3710      	adds	r7, #16
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
	...

08005f9c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b084      	sub	sp, #16
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	60f8      	str	r0, [r7, #12]
 8005fa4:	60b9      	str	r1, [r7, #8]
 8005fa6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005fa8:	e064      	b.n	8006074 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005faa:	687a      	ldr	r2, [r7, #4]
 8005fac:	68b9      	ldr	r1, [r7, #8]
 8005fae:	68f8      	ldr	r0, [r7, #12]
 8005fb0:	f000 f86e 	bl	8006090 <I2C_IsErrorOccurred>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d001      	beq.n	8005fbe <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e062      	b.n	8006084 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	699b      	ldr	r3, [r3, #24]
 8005fc4:	f003 0320 	and.w	r3, r3, #32
 8005fc8:	2b20      	cmp	r3, #32
 8005fca:	d138      	bne.n	800603e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	699b      	ldr	r3, [r3, #24]
 8005fd2:	f003 0304 	and.w	r3, r3, #4
 8005fd6:	2b04      	cmp	r3, #4
 8005fd8:	d105      	bne.n	8005fe6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d001      	beq.n	8005fe6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	e04e      	b.n	8006084 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	699b      	ldr	r3, [r3, #24]
 8005fec:	f003 0310 	and.w	r3, r3, #16
 8005ff0:	2b10      	cmp	r3, #16
 8005ff2:	d107      	bne.n	8006004 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	2210      	movs	r2, #16
 8005ffa:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2204      	movs	r2, #4
 8006000:	645a      	str	r2, [r3, #68]	; 0x44
 8006002:	e002      	b.n	800600a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2200      	movs	r2, #0
 8006008:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	2220      	movs	r2, #32
 8006010:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	6859      	ldr	r1, [r3, #4]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	4b1b      	ldr	r3, [pc, #108]	; (800608c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800601e:	400b      	ands	r3, r1
 8006020:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2220      	movs	r2, #32
 8006026:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2200      	movs	r2, #0
 800602e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2200      	movs	r2, #0
 8006036:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	e022      	b.n	8006084 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800603e:	f7fe fa6f 	bl	8004520 <HAL_GetTick>
 8006042:	4602      	mov	r2, r0
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	1ad3      	subs	r3, r2, r3
 8006048:	68ba      	ldr	r2, [r7, #8]
 800604a:	429a      	cmp	r2, r3
 800604c:	d302      	bcc.n	8006054 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d10f      	bne.n	8006074 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006058:	f043 0220 	orr.w	r2, r3, #32
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2220      	movs	r2, #32
 8006064:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2200      	movs	r2, #0
 800606c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	e007      	b.n	8006084 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	699b      	ldr	r3, [r3, #24]
 800607a:	f003 0304 	and.w	r3, r3, #4
 800607e:	2b04      	cmp	r3, #4
 8006080:	d193      	bne.n	8005faa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006082:	2300      	movs	r3, #0
}
 8006084:	4618      	mov	r0, r3
 8006086:	3710      	adds	r7, #16
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}
 800608c:	fe00e800 	.word	0xfe00e800

08006090 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b08a      	sub	sp, #40	; 0x28
 8006094:	af00      	add	r7, sp, #0
 8006096:	60f8      	str	r0, [r7, #12]
 8006098:	60b9      	str	r1, [r7, #8]
 800609a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800609c:	2300      	movs	r3, #0
 800609e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	699b      	ldr	r3, [r3, #24]
 80060a8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80060aa:	2300      	movs	r3, #0
 80060ac:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80060b2:	69bb      	ldr	r3, [r7, #24]
 80060b4:	f003 0310 	and.w	r3, r3, #16
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d068      	beq.n	800618e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	2210      	movs	r2, #16
 80060c2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80060c4:	e049      	b.n	800615a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060cc:	d045      	beq.n	800615a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80060ce:	f7fe fa27 	bl	8004520 <HAL_GetTick>
 80060d2:	4602      	mov	r2, r0
 80060d4:	69fb      	ldr	r3, [r7, #28]
 80060d6:	1ad3      	subs	r3, r2, r3
 80060d8:	68ba      	ldr	r2, [r7, #8]
 80060da:	429a      	cmp	r2, r3
 80060dc:	d302      	bcc.n	80060e4 <I2C_IsErrorOccurred+0x54>
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d13a      	bne.n	800615a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060ee:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80060f6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	699b      	ldr	r3, [r3, #24]
 80060fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006102:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006106:	d121      	bne.n	800614c <I2C_IsErrorOccurred+0xbc>
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800610e:	d01d      	beq.n	800614c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006110:	7cfb      	ldrb	r3, [r7, #19]
 8006112:	2b20      	cmp	r3, #32
 8006114:	d01a      	beq.n	800614c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	685a      	ldr	r2, [r3, #4]
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006124:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006126:	f7fe f9fb 	bl	8004520 <HAL_GetTick>
 800612a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800612c:	e00e      	b.n	800614c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800612e:	f7fe f9f7 	bl	8004520 <HAL_GetTick>
 8006132:	4602      	mov	r2, r0
 8006134:	69fb      	ldr	r3, [r7, #28]
 8006136:	1ad3      	subs	r3, r2, r3
 8006138:	2b19      	cmp	r3, #25
 800613a:	d907      	bls.n	800614c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800613c:	6a3b      	ldr	r3, [r7, #32]
 800613e:	f043 0320 	orr.w	r3, r3, #32
 8006142:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800614a:	e006      	b.n	800615a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	699b      	ldr	r3, [r3, #24]
 8006152:	f003 0320 	and.w	r3, r3, #32
 8006156:	2b20      	cmp	r3, #32
 8006158:	d1e9      	bne.n	800612e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	699b      	ldr	r3, [r3, #24]
 8006160:	f003 0320 	and.w	r3, r3, #32
 8006164:	2b20      	cmp	r3, #32
 8006166:	d003      	beq.n	8006170 <I2C_IsErrorOccurred+0xe0>
 8006168:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800616c:	2b00      	cmp	r3, #0
 800616e:	d0aa      	beq.n	80060c6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006170:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006174:	2b00      	cmp	r3, #0
 8006176:	d103      	bne.n	8006180 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	2220      	movs	r2, #32
 800617e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006180:	6a3b      	ldr	r3, [r7, #32]
 8006182:	f043 0304 	orr.w	r3, r3, #4
 8006186:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006188:	2301      	movs	r3, #1
 800618a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	699b      	ldr	r3, [r3, #24]
 8006194:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006196:	69bb      	ldr	r3, [r7, #24]
 8006198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800619c:	2b00      	cmp	r3, #0
 800619e:	d00b      	beq.n	80061b8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80061a0:	6a3b      	ldr	r3, [r7, #32]
 80061a2:	f043 0301 	orr.w	r3, r3, #1
 80061a6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80061b0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80061b8:	69bb      	ldr	r3, [r7, #24]
 80061ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d00b      	beq.n	80061da <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80061c2:	6a3b      	ldr	r3, [r7, #32]
 80061c4:	f043 0308 	orr.w	r3, r3, #8
 80061c8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80061d2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80061d4:	2301      	movs	r3, #1
 80061d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80061da:	69bb      	ldr	r3, [r7, #24]
 80061dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d00b      	beq.n	80061fc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80061e4:	6a3b      	ldr	r3, [r7, #32]
 80061e6:	f043 0302 	orr.w	r3, r3, #2
 80061ea:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061f4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80061fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006200:	2b00      	cmp	r3, #0
 8006202:	d01c      	beq.n	800623e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006204:	68f8      	ldr	r0, [r7, #12]
 8006206:	f7ff fdca 	bl	8005d9e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	6859      	ldr	r1, [r3, #4]
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	4b0d      	ldr	r3, [pc, #52]	; (800624c <I2C_IsErrorOccurred+0x1bc>)
 8006216:	400b      	ands	r3, r1
 8006218:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800621e:	6a3b      	ldr	r3, [r7, #32]
 8006220:	431a      	orrs	r2, r3
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2220      	movs	r2, #32
 800622a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2200      	movs	r2, #0
 8006232:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2200      	movs	r2, #0
 800623a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800623e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006242:	4618      	mov	r0, r3
 8006244:	3728      	adds	r7, #40	; 0x28
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
 800624a:	bf00      	nop
 800624c:	fe00e800 	.word	0xfe00e800

08006250 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006250:	b480      	push	{r7}
 8006252:	b087      	sub	sp, #28
 8006254:	af00      	add	r7, sp, #0
 8006256:	60f8      	str	r0, [r7, #12]
 8006258:	607b      	str	r3, [r7, #4]
 800625a:	460b      	mov	r3, r1
 800625c:	817b      	strh	r3, [r7, #10]
 800625e:	4613      	mov	r3, r2
 8006260:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006262:	897b      	ldrh	r3, [r7, #10]
 8006264:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006268:	7a7b      	ldrb	r3, [r7, #9]
 800626a:	041b      	lsls	r3, r3, #16
 800626c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006270:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006276:	6a3b      	ldr	r3, [r7, #32]
 8006278:	4313      	orrs	r3, r2
 800627a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800627e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	685a      	ldr	r2, [r3, #4]
 8006286:	6a3b      	ldr	r3, [r7, #32]
 8006288:	0d5b      	lsrs	r3, r3, #21
 800628a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800628e:	4b08      	ldr	r3, [pc, #32]	; (80062b0 <I2C_TransferConfig+0x60>)
 8006290:	430b      	orrs	r3, r1
 8006292:	43db      	mvns	r3, r3
 8006294:	ea02 0103 	and.w	r1, r2, r3
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	697a      	ldr	r2, [r7, #20]
 800629e:	430a      	orrs	r2, r1
 80062a0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80062a2:	bf00      	nop
 80062a4:	371c      	adds	r7, #28
 80062a6:	46bd      	mov	sp, r7
 80062a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ac:	4770      	bx	lr
 80062ae:	bf00      	nop
 80062b0:	03ff63ff 	.word	0x03ff63ff

080062b4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b085      	sub	sp, #20
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	460b      	mov	r3, r1
 80062be:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80062c0:	2300      	movs	r3, #0
 80062c2:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80062c4:	887b      	ldrh	r3, [r7, #2]
 80062c6:	f003 0301 	and.w	r3, r3, #1
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d00f      	beq.n	80062ee <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80062d4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80062e2:	2b28      	cmp	r3, #40	; 0x28
 80062e4:	d003      	beq.n	80062ee <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80062ec:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80062ee:	887b      	ldrh	r3, [r7, #2]
 80062f0:	f003 0302 	and.w	r3, r3, #2
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d00f      	beq.n	8006318 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80062fe:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006306:	b2db      	uxtb	r3, r3
 8006308:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800630c:	2b28      	cmp	r3, #40	; 0x28
 800630e:	d003      	beq.n	8006318 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8006316:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006318:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800631c:	2b00      	cmp	r3, #0
 800631e:	da03      	bge.n	8006328 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8006326:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006328:	887b      	ldrh	r3, [r7, #2]
 800632a:	2b10      	cmp	r3, #16
 800632c:	d103      	bne.n	8006336 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8006334:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006336:	887b      	ldrh	r3, [r7, #2]
 8006338:	2b20      	cmp	r3, #32
 800633a:	d103      	bne.n	8006344 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f043 0320 	orr.w	r3, r3, #32
 8006342:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006344:	887b      	ldrh	r3, [r7, #2]
 8006346:	2b40      	cmp	r3, #64	; 0x40
 8006348:	d103      	bne.n	8006352 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006350:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	6819      	ldr	r1, [r3, #0]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	43da      	mvns	r2, r3
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	400a      	ands	r2, r1
 8006362:	601a      	str	r2, [r3, #0]
}
 8006364:	bf00      	nop
 8006366:	3714      	adds	r7, #20
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr

08006370 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006370:	b480      	push	{r7}
 8006372:	b083      	sub	sp, #12
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006380:	b2db      	uxtb	r3, r3
 8006382:	2b20      	cmp	r3, #32
 8006384:	d138      	bne.n	80063f8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800638c:	2b01      	cmp	r3, #1
 800638e:	d101      	bne.n	8006394 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006390:	2302      	movs	r3, #2
 8006392:	e032      	b.n	80063fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2201      	movs	r2, #1
 8006398:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2224      	movs	r2, #36	; 0x24
 80063a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f022 0201 	bic.w	r2, r2, #1
 80063b2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80063c2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	6819      	ldr	r1, [r3, #0]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	683a      	ldr	r2, [r7, #0]
 80063d0:	430a      	orrs	r2, r1
 80063d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f042 0201 	orr.w	r2, r2, #1
 80063e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2220      	movs	r2, #32
 80063e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2200      	movs	r2, #0
 80063f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80063f4:	2300      	movs	r3, #0
 80063f6:	e000      	b.n	80063fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80063f8:	2302      	movs	r3, #2
  }
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	370c      	adds	r7, #12
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr

08006406 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006406:	b480      	push	{r7}
 8006408:	b085      	sub	sp, #20
 800640a:	af00      	add	r7, sp, #0
 800640c:	6078      	str	r0, [r7, #4]
 800640e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006416:	b2db      	uxtb	r3, r3
 8006418:	2b20      	cmp	r3, #32
 800641a:	d139      	bne.n	8006490 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006422:	2b01      	cmp	r3, #1
 8006424:	d101      	bne.n	800642a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006426:	2302      	movs	r3, #2
 8006428:	e033      	b.n	8006492 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2201      	movs	r2, #1
 800642e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2224      	movs	r2, #36	; 0x24
 8006436:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f022 0201 	bic.w	r2, r2, #1
 8006448:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006458:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	021b      	lsls	r3, r3, #8
 800645e:	68fa      	ldr	r2, [r7, #12]
 8006460:	4313      	orrs	r3, r2
 8006462:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	68fa      	ldr	r2, [r7, #12]
 800646a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f042 0201 	orr.w	r2, r2, #1
 800647a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2220      	movs	r2, #32
 8006480:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2200      	movs	r2, #0
 8006488:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800648c:	2300      	movs	r3, #0
 800648e:	e000      	b.n	8006492 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006490:	2302      	movs	r3, #2
  }
}
 8006492:	4618      	mov	r0, r3
 8006494:	3714      	adds	r7, #20
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr
	...

080064a0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b082      	sub	sp, #8
 80064a4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80064a6:	2300      	movs	r3, #0
 80064a8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80064aa:	4b23      	ldr	r3, [pc, #140]	; (8006538 <HAL_PWREx_EnableOverDrive+0x98>)
 80064ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ae:	4a22      	ldr	r2, [pc, #136]	; (8006538 <HAL_PWREx_EnableOverDrive+0x98>)
 80064b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064b4:	6413      	str	r3, [r2, #64]	; 0x40
 80064b6:	4b20      	ldr	r3, [pc, #128]	; (8006538 <HAL_PWREx_EnableOverDrive+0x98>)
 80064b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064be:	603b      	str	r3, [r7, #0]
 80064c0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80064c2:	4b1e      	ldr	r3, [pc, #120]	; (800653c <HAL_PWREx_EnableOverDrive+0x9c>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a1d      	ldr	r2, [pc, #116]	; (800653c <HAL_PWREx_EnableOverDrive+0x9c>)
 80064c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064cc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80064ce:	f7fe f827 	bl	8004520 <HAL_GetTick>
 80064d2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80064d4:	e009      	b.n	80064ea <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80064d6:	f7fe f823 	bl	8004520 <HAL_GetTick>
 80064da:	4602      	mov	r2, r0
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	1ad3      	subs	r3, r2, r3
 80064e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80064e4:	d901      	bls.n	80064ea <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80064e6:	2303      	movs	r3, #3
 80064e8:	e022      	b.n	8006530 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80064ea:	4b14      	ldr	r3, [pc, #80]	; (800653c <HAL_PWREx_EnableOverDrive+0x9c>)
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064f6:	d1ee      	bne.n	80064d6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80064f8:	4b10      	ldr	r3, [pc, #64]	; (800653c <HAL_PWREx_EnableOverDrive+0x9c>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a0f      	ldr	r2, [pc, #60]	; (800653c <HAL_PWREx_EnableOverDrive+0x9c>)
 80064fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006502:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006504:	f7fe f80c 	bl	8004520 <HAL_GetTick>
 8006508:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800650a:	e009      	b.n	8006520 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800650c:	f7fe f808 	bl	8004520 <HAL_GetTick>
 8006510:	4602      	mov	r2, r0
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	1ad3      	subs	r3, r2, r3
 8006516:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800651a:	d901      	bls.n	8006520 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800651c:	2303      	movs	r3, #3
 800651e:	e007      	b.n	8006530 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006520:	4b06      	ldr	r3, [pc, #24]	; (800653c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006528:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800652c:	d1ee      	bne.n	800650c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800652e:	2300      	movs	r3, #0
}
 8006530:	4618      	mov	r0, r3
 8006532:	3708      	adds	r7, #8
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}
 8006538:	40023800 	.word	0x40023800
 800653c:	40007000 	.word	0x40007000

08006540 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b086      	sub	sp, #24
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006548:	2300      	movs	r3, #0
 800654a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d101      	bne.n	8006556 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	e291      	b.n	8006a7a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f003 0301 	and.w	r3, r3, #1
 800655e:	2b00      	cmp	r3, #0
 8006560:	f000 8087 	beq.w	8006672 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006564:	4b96      	ldr	r3, [pc, #600]	; (80067c0 <HAL_RCC_OscConfig+0x280>)
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	f003 030c 	and.w	r3, r3, #12
 800656c:	2b04      	cmp	r3, #4
 800656e:	d00c      	beq.n	800658a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006570:	4b93      	ldr	r3, [pc, #588]	; (80067c0 <HAL_RCC_OscConfig+0x280>)
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	f003 030c 	and.w	r3, r3, #12
 8006578:	2b08      	cmp	r3, #8
 800657a:	d112      	bne.n	80065a2 <HAL_RCC_OscConfig+0x62>
 800657c:	4b90      	ldr	r3, [pc, #576]	; (80067c0 <HAL_RCC_OscConfig+0x280>)
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006584:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006588:	d10b      	bne.n	80065a2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800658a:	4b8d      	ldr	r3, [pc, #564]	; (80067c0 <HAL_RCC_OscConfig+0x280>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006592:	2b00      	cmp	r3, #0
 8006594:	d06c      	beq.n	8006670 <HAL_RCC_OscConfig+0x130>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d168      	bne.n	8006670 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	e26b      	b.n	8006a7a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065aa:	d106      	bne.n	80065ba <HAL_RCC_OscConfig+0x7a>
 80065ac:	4b84      	ldr	r3, [pc, #528]	; (80067c0 <HAL_RCC_OscConfig+0x280>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a83      	ldr	r2, [pc, #524]	; (80067c0 <HAL_RCC_OscConfig+0x280>)
 80065b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065b6:	6013      	str	r3, [r2, #0]
 80065b8:	e02e      	b.n	8006618 <HAL_RCC_OscConfig+0xd8>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d10c      	bne.n	80065dc <HAL_RCC_OscConfig+0x9c>
 80065c2:	4b7f      	ldr	r3, [pc, #508]	; (80067c0 <HAL_RCC_OscConfig+0x280>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a7e      	ldr	r2, [pc, #504]	; (80067c0 <HAL_RCC_OscConfig+0x280>)
 80065c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065cc:	6013      	str	r3, [r2, #0]
 80065ce:	4b7c      	ldr	r3, [pc, #496]	; (80067c0 <HAL_RCC_OscConfig+0x280>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a7b      	ldr	r2, [pc, #492]	; (80067c0 <HAL_RCC_OscConfig+0x280>)
 80065d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80065d8:	6013      	str	r3, [r2, #0]
 80065da:	e01d      	b.n	8006618 <HAL_RCC_OscConfig+0xd8>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80065e4:	d10c      	bne.n	8006600 <HAL_RCC_OscConfig+0xc0>
 80065e6:	4b76      	ldr	r3, [pc, #472]	; (80067c0 <HAL_RCC_OscConfig+0x280>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a75      	ldr	r2, [pc, #468]	; (80067c0 <HAL_RCC_OscConfig+0x280>)
 80065ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80065f0:	6013      	str	r3, [r2, #0]
 80065f2:	4b73      	ldr	r3, [pc, #460]	; (80067c0 <HAL_RCC_OscConfig+0x280>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a72      	ldr	r2, [pc, #456]	; (80067c0 <HAL_RCC_OscConfig+0x280>)
 80065f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065fc:	6013      	str	r3, [r2, #0]
 80065fe:	e00b      	b.n	8006618 <HAL_RCC_OscConfig+0xd8>
 8006600:	4b6f      	ldr	r3, [pc, #444]	; (80067c0 <HAL_RCC_OscConfig+0x280>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a6e      	ldr	r2, [pc, #440]	; (80067c0 <HAL_RCC_OscConfig+0x280>)
 8006606:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800660a:	6013      	str	r3, [r2, #0]
 800660c:	4b6c      	ldr	r3, [pc, #432]	; (80067c0 <HAL_RCC_OscConfig+0x280>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a6b      	ldr	r2, [pc, #428]	; (80067c0 <HAL_RCC_OscConfig+0x280>)
 8006612:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006616:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d013      	beq.n	8006648 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006620:	f7fd ff7e 	bl	8004520 <HAL_GetTick>
 8006624:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006626:	e008      	b.n	800663a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006628:	f7fd ff7a 	bl	8004520 <HAL_GetTick>
 800662c:	4602      	mov	r2, r0
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	1ad3      	subs	r3, r2, r3
 8006632:	2b64      	cmp	r3, #100	; 0x64
 8006634:	d901      	bls.n	800663a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006636:	2303      	movs	r3, #3
 8006638:	e21f      	b.n	8006a7a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800663a:	4b61      	ldr	r3, [pc, #388]	; (80067c0 <HAL_RCC_OscConfig+0x280>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006642:	2b00      	cmp	r3, #0
 8006644:	d0f0      	beq.n	8006628 <HAL_RCC_OscConfig+0xe8>
 8006646:	e014      	b.n	8006672 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006648:	f7fd ff6a 	bl	8004520 <HAL_GetTick>
 800664c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800664e:	e008      	b.n	8006662 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006650:	f7fd ff66 	bl	8004520 <HAL_GetTick>
 8006654:	4602      	mov	r2, r0
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	1ad3      	subs	r3, r2, r3
 800665a:	2b64      	cmp	r3, #100	; 0x64
 800665c:	d901      	bls.n	8006662 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800665e:	2303      	movs	r3, #3
 8006660:	e20b      	b.n	8006a7a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006662:	4b57      	ldr	r3, [pc, #348]	; (80067c0 <HAL_RCC_OscConfig+0x280>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800666a:	2b00      	cmp	r3, #0
 800666c:	d1f0      	bne.n	8006650 <HAL_RCC_OscConfig+0x110>
 800666e:	e000      	b.n	8006672 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006670:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f003 0302 	and.w	r3, r3, #2
 800667a:	2b00      	cmp	r3, #0
 800667c:	d069      	beq.n	8006752 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800667e:	4b50      	ldr	r3, [pc, #320]	; (80067c0 <HAL_RCC_OscConfig+0x280>)
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	f003 030c 	and.w	r3, r3, #12
 8006686:	2b00      	cmp	r3, #0
 8006688:	d00b      	beq.n	80066a2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800668a:	4b4d      	ldr	r3, [pc, #308]	; (80067c0 <HAL_RCC_OscConfig+0x280>)
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	f003 030c 	and.w	r3, r3, #12
 8006692:	2b08      	cmp	r3, #8
 8006694:	d11c      	bne.n	80066d0 <HAL_RCC_OscConfig+0x190>
 8006696:	4b4a      	ldr	r3, [pc, #296]	; (80067c0 <HAL_RCC_OscConfig+0x280>)
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d116      	bne.n	80066d0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066a2:	4b47      	ldr	r3, [pc, #284]	; (80067c0 <HAL_RCC_OscConfig+0x280>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f003 0302 	and.w	r3, r3, #2
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d005      	beq.n	80066ba <HAL_RCC_OscConfig+0x17a>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	68db      	ldr	r3, [r3, #12]
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d001      	beq.n	80066ba <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	e1df      	b.n	8006a7a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066ba:	4b41      	ldr	r3, [pc, #260]	; (80067c0 <HAL_RCC_OscConfig+0x280>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	691b      	ldr	r3, [r3, #16]
 80066c6:	00db      	lsls	r3, r3, #3
 80066c8:	493d      	ldr	r1, [pc, #244]	; (80067c0 <HAL_RCC_OscConfig+0x280>)
 80066ca:	4313      	orrs	r3, r2
 80066cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066ce:	e040      	b.n	8006752 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	68db      	ldr	r3, [r3, #12]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d023      	beq.n	8006720 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80066d8:	4b39      	ldr	r3, [pc, #228]	; (80067c0 <HAL_RCC_OscConfig+0x280>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a38      	ldr	r2, [pc, #224]	; (80067c0 <HAL_RCC_OscConfig+0x280>)
 80066de:	f043 0301 	orr.w	r3, r3, #1
 80066e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066e4:	f7fd ff1c 	bl	8004520 <HAL_GetTick>
 80066e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066ea:	e008      	b.n	80066fe <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066ec:	f7fd ff18 	bl	8004520 <HAL_GetTick>
 80066f0:	4602      	mov	r2, r0
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	1ad3      	subs	r3, r2, r3
 80066f6:	2b02      	cmp	r3, #2
 80066f8:	d901      	bls.n	80066fe <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80066fa:	2303      	movs	r3, #3
 80066fc:	e1bd      	b.n	8006a7a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066fe:	4b30      	ldr	r3, [pc, #192]	; (80067c0 <HAL_RCC_OscConfig+0x280>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f003 0302 	and.w	r3, r3, #2
 8006706:	2b00      	cmp	r3, #0
 8006708:	d0f0      	beq.n	80066ec <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800670a:	4b2d      	ldr	r3, [pc, #180]	; (80067c0 <HAL_RCC_OscConfig+0x280>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	691b      	ldr	r3, [r3, #16]
 8006716:	00db      	lsls	r3, r3, #3
 8006718:	4929      	ldr	r1, [pc, #164]	; (80067c0 <HAL_RCC_OscConfig+0x280>)
 800671a:	4313      	orrs	r3, r2
 800671c:	600b      	str	r3, [r1, #0]
 800671e:	e018      	b.n	8006752 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006720:	4b27      	ldr	r3, [pc, #156]	; (80067c0 <HAL_RCC_OscConfig+0x280>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a26      	ldr	r2, [pc, #152]	; (80067c0 <HAL_RCC_OscConfig+0x280>)
 8006726:	f023 0301 	bic.w	r3, r3, #1
 800672a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800672c:	f7fd fef8 	bl	8004520 <HAL_GetTick>
 8006730:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006732:	e008      	b.n	8006746 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006734:	f7fd fef4 	bl	8004520 <HAL_GetTick>
 8006738:	4602      	mov	r2, r0
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	1ad3      	subs	r3, r2, r3
 800673e:	2b02      	cmp	r3, #2
 8006740:	d901      	bls.n	8006746 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006742:	2303      	movs	r3, #3
 8006744:	e199      	b.n	8006a7a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006746:	4b1e      	ldr	r3, [pc, #120]	; (80067c0 <HAL_RCC_OscConfig+0x280>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f003 0302 	and.w	r3, r3, #2
 800674e:	2b00      	cmp	r3, #0
 8006750:	d1f0      	bne.n	8006734 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f003 0308 	and.w	r3, r3, #8
 800675a:	2b00      	cmp	r3, #0
 800675c:	d038      	beq.n	80067d0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	695b      	ldr	r3, [r3, #20]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d019      	beq.n	800679a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006766:	4b16      	ldr	r3, [pc, #88]	; (80067c0 <HAL_RCC_OscConfig+0x280>)
 8006768:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800676a:	4a15      	ldr	r2, [pc, #84]	; (80067c0 <HAL_RCC_OscConfig+0x280>)
 800676c:	f043 0301 	orr.w	r3, r3, #1
 8006770:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006772:	f7fd fed5 	bl	8004520 <HAL_GetTick>
 8006776:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006778:	e008      	b.n	800678c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800677a:	f7fd fed1 	bl	8004520 <HAL_GetTick>
 800677e:	4602      	mov	r2, r0
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	1ad3      	subs	r3, r2, r3
 8006784:	2b02      	cmp	r3, #2
 8006786:	d901      	bls.n	800678c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006788:	2303      	movs	r3, #3
 800678a:	e176      	b.n	8006a7a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800678c:	4b0c      	ldr	r3, [pc, #48]	; (80067c0 <HAL_RCC_OscConfig+0x280>)
 800678e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006790:	f003 0302 	and.w	r3, r3, #2
 8006794:	2b00      	cmp	r3, #0
 8006796:	d0f0      	beq.n	800677a <HAL_RCC_OscConfig+0x23a>
 8006798:	e01a      	b.n	80067d0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800679a:	4b09      	ldr	r3, [pc, #36]	; (80067c0 <HAL_RCC_OscConfig+0x280>)
 800679c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800679e:	4a08      	ldr	r2, [pc, #32]	; (80067c0 <HAL_RCC_OscConfig+0x280>)
 80067a0:	f023 0301 	bic.w	r3, r3, #1
 80067a4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067a6:	f7fd febb 	bl	8004520 <HAL_GetTick>
 80067aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067ac:	e00a      	b.n	80067c4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067ae:	f7fd feb7 	bl	8004520 <HAL_GetTick>
 80067b2:	4602      	mov	r2, r0
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	1ad3      	subs	r3, r2, r3
 80067b8:	2b02      	cmp	r3, #2
 80067ba:	d903      	bls.n	80067c4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80067bc:	2303      	movs	r3, #3
 80067be:	e15c      	b.n	8006a7a <HAL_RCC_OscConfig+0x53a>
 80067c0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067c4:	4b91      	ldr	r3, [pc, #580]	; (8006a0c <HAL_RCC_OscConfig+0x4cc>)
 80067c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067c8:	f003 0302 	and.w	r3, r3, #2
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d1ee      	bne.n	80067ae <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f003 0304 	and.w	r3, r3, #4
 80067d8:	2b00      	cmp	r3, #0
 80067da:	f000 80a4 	beq.w	8006926 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80067de:	4b8b      	ldr	r3, [pc, #556]	; (8006a0c <HAL_RCC_OscConfig+0x4cc>)
 80067e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d10d      	bne.n	8006806 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80067ea:	4b88      	ldr	r3, [pc, #544]	; (8006a0c <HAL_RCC_OscConfig+0x4cc>)
 80067ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ee:	4a87      	ldr	r2, [pc, #540]	; (8006a0c <HAL_RCC_OscConfig+0x4cc>)
 80067f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067f4:	6413      	str	r3, [r2, #64]	; 0x40
 80067f6:	4b85      	ldr	r3, [pc, #532]	; (8006a0c <HAL_RCC_OscConfig+0x4cc>)
 80067f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067fe:	60bb      	str	r3, [r7, #8]
 8006800:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006802:	2301      	movs	r3, #1
 8006804:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006806:	4b82      	ldr	r3, [pc, #520]	; (8006a10 <HAL_RCC_OscConfig+0x4d0>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800680e:	2b00      	cmp	r3, #0
 8006810:	d118      	bne.n	8006844 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006812:	4b7f      	ldr	r3, [pc, #508]	; (8006a10 <HAL_RCC_OscConfig+0x4d0>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a7e      	ldr	r2, [pc, #504]	; (8006a10 <HAL_RCC_OscConfig+0x4d0>)
 8006818:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800681c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800681e:	f7fd fe7f 	bl	8004520 <HAL_GetTick>
 8006822:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006824:	e008      	b.n	8006838 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006826:	f7fd fe7b 	bl	8004520 <HAL_GetTick>
 800682a:	4602      	mov	r2, r0
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	1ad3      	subs	r3, r2, r3
 8006830:	2b64      	cmp	r3, #100	; 0x64
 8006832:	d901      	bls.n	8006838 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006834:	2303      	movs	r3, #3
 8006836:	e120      	b.n	8006a7a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006838:	4b75      	ldr	r3, [pc, #468]	; (8006a10 <HAL_RCC_OscConfig+0x4d0>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006840:	2b00      	cmp	r3, #0
 8006842:	d0f0      	beq.n	8006826 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	2b01      	cmp	r3, #1
 800684a:	d106      	bne.n	800685a <HAL_RCC_OscConfig+0x31a>
 800684c:	4b6f      	ldr	r3, [pc, #444]	; (8006a0c <HAL_RCC_OscConfig+0x4cc>)
 800684e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006850:	4a6e      	ldr	r2, [pc, #440]	; (8006a0c <HAL_RCC_OscConfig+0x4cc>)
 8006852:	f043 0301 	orr.w	r3, r3, #1
 8006856:	6713      	str	r3, [r2, #112]	; 0x70
 8006858:	e02d      	b.n	80068b6 <HAL_RCC_OscConfig+0x376>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d10c      	bne.n	800687c <HAL_RCC_OscConfig+0x33c>
 8006862:	4b6a      	ldr	r3, [pc, #424]	; (8006a0c <HAL_RCC_OscConfig+0x4cc>)
 8006864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006866:	4a69      	ldr	r2, [pc, #420]	; (8006a0c <HAL_RCC_OscConfig+0x4cc>)
 8006868:	f023 0301 	bic.w	r3, r3, #1
 800686c:	6713      	str	r3, [r2, #112]	; 0x70
 800686e:	4b67      	ldr	r3, [pc, #412]	; (8006a0c <HAL_RCC_OscConfig+0x4cc>)
 8006870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006872:	4a66      	ldr	r2, [pc, #408]	; (8006a0c <HAL_RCC_OscConfig+0x4cc>)
 8006874:	f023 0304 	bic.w	r3, r3, #4
 8006878:	6713      	str	r3, [r2, #112]	; 0x70
 800687a:	e01c      	b.n	80068b6 <HAL_RCC_OscConfig+0x376>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	2b05      	cmp	r3, #5
 8006882:	d10c      	bne.n	800689e <HAL_RCC_OscConfig+0x35e>
 8006884:	4b61      	ldr	r3, [pc, #388]	; (8006a0c <HAL_RCC_OscConfig+0x4cc>)
 8006886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006888:	4a60      	ldr	r2, [pc, #384]	; (8006a0c <HAL_RCC_OscConfig+0x4cc>)
 800688a:	f043 0304 	orr.w	r3, r3, #4
 800688e:	6713      	str	r3, [r2, #112]	; 0x70
 8006890:	4b5e      	ldr	r3, [pc, #376]	; (8006a0c <HAL_RCC_OscConfig+0x4cc>)
 8006892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006894:	4a5d      	ldr	r2, [pc, #372]	; (8006a0c <HAL_RCC_OscConfig+0x4cc>)
 8006896:	f043 0301 	orr.w	r3, r3, #1
 800689a:	6713      	str	r3, [r2, #112]	; 0x70
 800689c:	e00b      	b.n	80068b6 <HAL_RCC_OscConfig+0x376>
 800689e:	4b5b      	ldr	r3, [pc, #364]	; (8006a0c <HAL_RCC_OscConfig+0x4cc>)
 80068a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068a2:	4a5a      	ldr	r2, [pc, #360]	; (8006a0c <HAL_RCC_OscConfig+0x4cc>)
 80068a4:	f023 0301 	bic.w	r3, r3, #1
 80068a8:	6713      	str	r3, [r2, #112]	; 0x70
 80068aa:	4b58      	ldr	r3, [pc, #352]	; (8006a0c <HAL_RCC_OscConfig+0x4cc>)
 80068ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068ae:	4a57      	ldr	r2, [pc, #348]	; (8006a0c <HAL_RCC_OscConfig+0x4cc>)
 80068b0:	f023 0304 	bic.w	r3, r3, #4
 80068b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d015      	beq.n	80068ea <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068be:	f7fd fe2f 	bl	8004520 <HAL_GetTick>
 80068c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068c4:	e00a      	b.n	80068dc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068c6:	f7fd fe2b 	bl	8004520 <HAL_GetTick>
 80068ca:	4602      	mov	r2, r0
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	1ad3      	subs	r3, r2, r3
 80068d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d901      	bls.n	80068dc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80068d8:	2303      	movs	r3, #3
 80068da:	e0ce      	b.n	8006a7a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068dc:	4b4b      	ldr	r3, [pc, #300]	; (8006a0c <HAL_RCC_OscConfig+0x4cc>)
 80068de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068e0:	f003 0302 	and.w	r3, r3, #2
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d0ee      	beq.n	80068c6 <HAL_RCC_OscConfig+0x386>
 80068e8:	e014      	b.n	8006914 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068ea:	f7fd fe19 	bl	8004520 <HAL_GetTick>
 80068ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80068f0:	e00a      	b.n	8006908 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068f2:	f7fd fe15 	bl	8004520 <HAL_GetTick>
 80068f6:	4602      	mov	r2, r0
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	1ad3      	subs	r3, r2, r3
 80068fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006900:	4293      	cmp	r3, r2
 8006902:	d901      	bls.n	8006908 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006904:	2303      	movs	r3, #3
 8006906:	e0b8      	b.n	8006a7a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006908:	4b40      	ldr	r3, [pc, #256]	; (8006a0c <HAL_RCC_OscConfig+0x4cc>)
 800690a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800690c:	f003 0302 	and.w	r3, r3, #2
 8006910:	2b00      	cmp	r3, #0
 8006912:	d1ee      	bne.n	80068f2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006914:	7dfb      	ldrb	r3, [r7, #23]
 8006916:	2b01      	cmp	r3, #1
 8006918:	d105      	bne.n	8006926 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800691a:	4b3c      	ldr	r3, [pc, #240]	; (8006a0c <HAL_RCC_OscConfig+0x4cc>)
 800691c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800691e:	4a3b      	ldr	r2, [pc, #236]	; (8006a0c <HAL_RCC_OscConfig+0x4cc>)
 8006920:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006924:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	699b      	ldr	r3, [r3, #24]
 800692a:	2b00      	cmp	r3, #0
 800692c:	f000 80a4 	beq.w	8006a78 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006930:	4b36      	ldr	r3, [pc, #216]	; (8006a0c <HAL_RCC_OscConfig+0x4cc>)
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	f003 030c 	and.w	r3, r3, #12
 8006938:	2b08      	cmp	r3, #8
 800693a:	d06b      	beq.n	8006a14 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	699b      	ldr	r3, [r3, #24]
 8006940:	2b02      	cmp	r3, #2
 8006942:	d149      	bne.n	80069d8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006944:	4b31      	ldr	r3, [pc, #196]	; (8006a0c <HAL_RCC_OscConfig+0x4cc>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a30      	ldr	r2, [pc, #192]	; (8006a0c <HAL_RCC_OscConfig+0x4cc>)
 800694a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800694e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006950:	f7fd fde6 	bl	8004520 <HAL_GetTick>
 8006954:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006956:	e008      	b.n	800696a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006958:	f7fd fde2 	bl	8004520 <HAL_GetTick>
 800695c:	4602      	mov	r2, r0
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	1ad3      	subs	r3, r2, r3
 8006962:	2b02      	cmp	r3, #2
 8006964:	d901      	bls.n	800696a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006966:	2303      	movs	r3, #3
 8006968:	e087      	b.n	8006a7a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800696a:	4b28      	ldr	r3, [pc, #160]	; (8006a0c <HAL_RCC_OscConfig+0x4cc>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006972:	2b00      	cmp	r3, #0
 8006974:	d1f0      	bne.n	8006958 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	69da      	ldr	r2, [r3, #28]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6a1b      	ldr	r3, [r3, #32]
 800697e:	431a      	orrs	r2, r3
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006984:	019b      	lsls	r3, r3, #6
 8006986:	431a      	orrs	r2, r3
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800698c:	085b      	lsrs	r3, r3, #1
 800698e:	3b01      	subs	r3, #1
 8006990:	041b      	lsls	r3, r3, #16
 8006992:	431a      	orrs	r2, r3
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006998:	061b      	lsls	r3, r3, #24
 800699a:	4313      	orrs	r3, r2
 800699c:	4a1b      	ldr	r2, [pc, #108]	; (8006a0c <HAL_RCC_OscConfig+0x4cc>)
 800699e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80069a2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80069a4:	4b19      	ldr	r3, [pc, #100]	; (8006a0c <HAL_RCC_OscConfig+0x4cc>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a18      	ldr	r2, [pc, #96]	; (8006a0c <HAL_RCC_OscConfig+0x4cc>)
 80069aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80069ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069b0:	f7fd fdb6 	bl	8004520 <HAL_GetTick>
 80069b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069b6:	e008      	b.n	80069ca <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069b8:	f7fd fdb2 	bl	8004520 <HAL_GetTick>
 80069bc:	4602      	mov	r2, r0
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	1ad3      	subs	r3, r2, r3
 80069c2:	2b02      	cmp	r3, #2
 80069c4:	d901      	bls.n	80069ca <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80069c6:	2303      	movs	r3, #3
 80069c8:	e057      	b.n	8006a7a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069ca:	4b10      	ldr	r3, [pc, #64]	; (8006a0c <HAL_RCC_OscConfig+0x4cc>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d0f0      	beq.n	80069b8 <HAL_RCC_OscConfig+0x478>
 80069d6:	e04f      	b.n	8006a78 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069d8:	4b0c      	ldr	r3, [pc, #48]	; (8006a0c <HAL_RCC_OscConfig+0x4cc>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a0b      	ldr	r2, [pc, #44]	; (8006a0c <HAL_RCC_OscConfig+0x4cc>)
 80069de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80069e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069e4:	f7fd fd9c 	bl	8004520 <HAL_GetTick>
 80069e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069ea:	e008      	b.n	80069fe <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069ec:	f7fd fd98 	bl	8004520 <HAL_GetTick>
 80069f0:	4602      	mov	r2, r0
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	1ad3      	subs	r3, r2, r3
 80069f6:	2b02      	cmp	r3, #2
 80069f8:	d901      	bls.n	80069fe <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80069fa:	2303      	movs	r3, #3
 80069fc:	e03d      	b.n	8006a7a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069fe:	4b03      	ldr	r3, [pc, #12]	; (8006a0c <HAL_RCC_OscConfig+0x4cc>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d1f0      	bne.n	80069ec <HAL_RCC_OscConfig+0x4ac>
 8006a0a:	e035      	b.n	8006a78 <HAL_RCC_OscConfig+0x538>
 8006a0c:	40023800 	.word	0x40023800
 8006a10:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006a14:	4b1b      	ldr	r3, [pc, #108]	; (8006a84 <HAL_RCC_OscConfig+0x544>)
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	699b      	ldr	r3, [r3, #24]
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d028      	beq.n	8006a74 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d121      	bne.n	8006a74 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d11a      	bne.n	8006a74 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a3e:	68fa      	ldr	r2, [r7, #12]
 8006a40:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006a44:	4013      	ands	r3, r2
 8006a46:	687a      	ldr	r2, [r7, #4]
 8006a48:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006a4a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d111      	bne.n	8006a74 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a5a:	085b      	lsrs	r3, r3, #1
 8006a5c:	3b01      	subs	r3, #1
 8006a5e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a60:	429a      	cmp	r2, r3
 8006a62:	d107      	bne.n	8006a74 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a6e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d001      	beq.n	8006a78 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006a74:	2301      	movs	r3, #1
 8006a76:	e000      	b.n	8006a7a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006a78:	2300      	movs	r3, #0
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3718      	adds	r7, #24
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}
 8006a82:	bf00      	nop
 8006a84:	40023800 	.word	0x40023800

08006a88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b084      	sub	sp, #16
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006a92:	2300      	movs	r3, #0
 8006a94:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d101      	bne.n	8006aa0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	e0d0      	b.n	8006c42 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006aa0:	4b6a      	ldr	r3, [pc, #424]	; (8006c4c <HAL_RCC_ClockConfig+0x1c4>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f003 030f 	and.w	r3, r3, #15
 8006aa8:	683a      	ldr	r2, [r7, #0]
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	d910      	bls.n	8006ad0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006aae:	4b67      	ldr	r3, [pc, #412]	; (8006c4c <HAL_RCC_ClockConfig+0x1c4>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f023 020f 	bic.w	r2, r3, #15
 8006ab6:	4965      	ldr	r1, [pc, #404]	; (8006c4c <HAL_RCC_ClockConfig+0x1c4>)
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	4313      	orrs	r3, r2
 8006abc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006abe:	4b63      	ldr	r3, [pc, #396]	; (8006c4c <HAL_RCC_ClockConfig+0x1c4>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f003 030f 	and.w	r3, r3, #15
 8006ac6:	683a      	ldr	r2, [r7, #0]
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d001      	beq.n	8006ad0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006acc:	2301      	movs	r3, #1
 8006ace:	e0b8      	b.n	8006c42 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f003 0302 	and.w	r3, r3, #2
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d020      	beq.n	8006b1e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f003 0304 	and.w	r3, r3, #4
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d005      	beq.n	8006af4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006ae8:	4b59      	ldr	r3, [pc, #356]	; (8006c50 <HAL_RCC_ClockConfig+0x1c8>)
 8006aea:	689b      	ldr	r3, [r3, #8]
 8006aec:	4a58      	ldr	r2, [pc, #352]	; (8006c50 <HAL_RCC_ClockConfig+0x1c8>)
 8006aee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006af2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f003 0308 	and.w	r3, r3, #8
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d005      	beq.n	8006b0c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006b00:	4b53      	ldr	r3, [pc, #332]	; (8006c50 <HAL_RCC_ClockConfig+0x1c8>)
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	4a52      	ldr	r2, [pc, #328]	; (8006c50 <HAL_RCC_ClockConfig+0x1c8>)
 8006b06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006b0a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b0c:	4b50      	ldr	r3, [pc, #320]	; (8006c50 <HAL_RCC_ClockConfig+0x1c8>)
 8006b0e:	689b      	ldr	r3, [r3, #8]
 8006b10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	494d      	ldr	r1, [pc, #308]	; (8006c50 <HAL_RCC_ClockConfig+0x1c8>)
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f003 0301 	and.w	r3, r3, #1
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d040      	beq.n	8006bac <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	d107      	bne.n	8006b42 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b32:	4b47      	ldr	r3, [pc, #284]	; (8006c50 <HAL_RCC_ClockConfig+0x1c8>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d115      	bne.n	8006b6a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	e07f      	b.n	8006c42 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	2b02      	cmp	r3, #2
 8006b48:	d107      	bne.n	8006b5a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b4a:	4b41      	ldr	r3, [pc, #260]	; (8006c50 <HAL_RCC_ClockConfig+0x1c8>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d109      	bne.n	8006b6a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006b56:	2301      	movs	r3, #1
 8006b58:	e073      	b.n	8006c42 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b5a:	4b3d      	ldr	r3, [pc, #244]	; (8006c50 <HAL_RCC_ClockConfig+0x1c8>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f003 0302 	and.w	r3, r3, #2
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d101      	bne.n	8006b6a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006b66:	2301      	movs	r3, #1
 8006b68:	e06b      	b.n	8006c42 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006b6a:	4b39      	ldr	r3, [pc, #228]	; (8006c50 <HAL_RCC_ClockConfig+0x1c8>)
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	f023 0203 	bic.w	r2, r3, #3
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	4936      	ldr	r1, [pc, #216]	; (8006c50 <HAL_RCC_ClockConfig+0x1c8>)
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b7c:	f7fd fcd0 	bl	8004520 <HAL_GetTick>
 8006b80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b82:	e00a      	b.n	8006b9a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b84:	f7fd fccc 	bl	8004520 <HAL_GetTick>
 8006b88:	4602      	mov	r2, r0
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	1ad3      	subs	r3, r2, r3
 8006b8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d901      	bls.n	8006b9a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006b96:	2303      	movs	r3, #3
 8006b98:	e053      	b.n	8006c42 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b9a:	4b2d      	ldr	r3, [pc, #180]	; (8006c50 <HAL_RCC_ClockConfig+0x1c8>)
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	f003 020c 	and.w	r2, r3, #12
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d1eb      	bne.n	8006b84 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006bac:	4b27      	ldr	r3, [pc, #156]	; (8006c4c <HAL_RCC_ClockConfig+0x1c4>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f003 030f 	and.w	r3, r3, #15
 8006bb4:	683a      	ldr	r2, [r7, #0]
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	d210      	bcs.n	8006bdc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bba:	4b24      	ldr	r3, [pc, #144]	; (8006c4c <HAL_RCC_ClockConfig+0x1c4>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f023 020f 	bic.w	r2, r3, #15
 8006bc2:	4922      	ldr	r1, [pc, #136]	; (8006c4c <HAL_RCC_ClockConfig+0x1c4>)
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bca:	4b20      	ldr	r3, [pc, #128]	; (8006c4c <HAL_RCC_ClockConfig+0x1c4>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f003 030f 	and.w	r3, r3, #15
 8006bd2:	683a      	ldr	r2, [r7, #0]
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	d001      	beq.n	8006bdc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	e032      	b.n	8006c42 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f003 0304 	and.w	r3, r3, #4
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d008      	beq.n	8006bfa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006be8:	4b19      	ldr	r3, [pc, #100]	; (8006c50 <HAL_RCC_ClockConfig+0x1c8>)
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	68db      	ldr	r3, [r3, #12]
 8006bf4:	4916      	ldr	r1, [pc, #88]	; (8006c50 <HAL_RCC_ClockConfig+0x1c8>)
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f003 0308 	and.w	r3, r3, #8
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d009      	beq.n	8006c1a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006c06:	4b12      	ldr	r3, [pc, #72]	; (8006c50 <HAL_RCC_ClockConfig+0x1c8>)
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	691b      	ldr	r3, [r3, #16]
 8006c12:	00db      	lsls	r3, r3, #3
 8006c14:	490e      	ldr	r1, [pc, #56]	; (8006c50 <HAL_RCC_ClockConfig+0x1c8>)
 8006c16:	4313      	orrs	r3, r2
 8006c18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006c1a:	f000 f821 	bl	8006c60 <HAL_RCC_GetSysClockFreq>
 8006c1e:	4602      	mov	r2, r0
 8006c20:	4b0b      	ldr	r3, [pc, #44]	; (8006c50 <HAL_RCC_ClockConfig+0x1c8>)
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	091b      	lsrs	r3, r3, #4
 8006c26:	f003 030f 	and.w	r3, r3, #15
 8006c2a:	490a      	ldr	r1, [pc, #40]	; (8006c54 <HAL_RCC_ClockConfig+0x1cc>)
 8006c2c:	5ccb      	ldrb	r3, [r1, r3]
 8006c2e:	fa22 f303 	lsr.w	r3, r2, r3
 8006c32:	4a09      	ldr	r2, [pc, #36]	; (8006c58 <HAL_RCC_ClockConfig+0x1d0>)
 8006c34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006c36:	4b09      	ldr	r3, [pc, #36]	; (8006c5c <HAL_RCC_ClockConfig+0x1d4>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f7fd fc2c 	bl	8004498 <HAL_InitTick>

  return HAL_OK;
 8006c40:	2300      	movs	r3, #0
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3710      	adds	r7, #16
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}
 8006c4a:	bf00      	nop
 8006c4c:	40023c00 	.word	0x40023c00
 8006c50:	40023800 	.word	0x40023800
 8006c54:	08018afc 	.word	0x08018afc
 8006c58:	2000000c 	.word	0x2000000c
 8006c5c:	20000308 	.word	0x20000308

08006c60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c64:	b094      	sub	sp, #80	; 0x50
 8006c66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	647b      	str	r3, [r7, #68]	; 0x44
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c70:	2300      	movs	r3, #0
 8006c72:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8006c74:	2300      	movs	r3, #0
 8006c76:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006c78:	4b79      	ldr	r3, [pc, #484]	; (8006e60 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	f003 030c 	and.w	r3, r3, #12
 8006c80:	2b08      	cmp	r3, #8
 8006c82:	d00d      	beq.n	8006ca0 <HAL_RCC_GetSysClockFreq+0x40>
 8006c84:	2b08      	cmp	r3, #8
 8006c86:	f200 80e1 	bhi.w	8006e4c <HAL_RCC_GetSysClockFreq+0x1ec>
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d002      	beq.n	8006c94 <HAL_RCC_GetSysClockFreq+0x34>
 8006c8e:	2b04      	cmp	r3, #4
 8006c90:	d003      	beq.n	8006c9a <HAL_RCC_GetSysClockFreq+0x3a>
 8006c92:	e0db      	b.n	8006e4c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006c94:	4b73      	ldr	r3, [pc, #460]	; (8006e64 <HAL_RCC_GetSysClockFreq+0x204>)
 8006c96:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006c98:	e0db      	b.n	8006e52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006c9a:	4b73      	ldr	r3, [pc, #460]	; (8006e68 <HAL_RCC_GetSysClockFreq+0x208>)
 8006c9c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006c9e:	e0d8      	b.n	8006e52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006ca0:	4b6f      	ldr	r3, [pc, #444]	; (8006e60 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ca8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006caa:	4b6d      	ldr	r3, [pc, #436]	; (8006e60 <HAL_RCC_GetSysClockFreq+0x200>)
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d063      	beq.n	8006d7e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006cb6:	4b6a      	ldr	r3, [pc, #424]	; (8006e60 <HAL_RCC_GetSysClockFreq+0x200>)
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	099b      	lsrs	r3, r3, #6
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	63bb      	str	r3, [r7, #56]	; 0x38
 8006cc0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cc8:	633b      	str	r3, [r7, #48]	; 0x30
 8006cca:	2300      	movs	r3, #0
 8006ccc:	637b      	str	r3, [r7, #52]	; 0x34
 8006cce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006cd2:	4622      	mov	r2, r4
 8006cd4:	462b      	mov	r3, r5
 8006cd6:	f04f 0000 	mov.w	r0, #0
 8006cda:	f04f 0100 	mov.w	r1, #0
 8006cde:	0159      	lsls	r1, r3, #5
 8006ce0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006ce4:	0150      	lsls	r0, r2, #5
 8006ce6:	4602      	mov	r2, r0
 8006ce8:	460b      	mov	r3, r1
 8006cea:	4621      	mov	r1, r4
 8006cec:	1a51      	subs	r1, r2, r1
 8006cee:	6139      	str	r1, [r7, #16]
 8006cf0:	4629      	mov	r1, r5
 8006cf2:	eb63 0301 	sbc.w	r3, r3, r1
 8006cf6:	617b      	str	r3, [r7, #20]
 8006cf8:	f04f 0200 	mov.w	r2, #0
 8006cfc:	f04f 0300 	mov.w	r3, #0
 8006d00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006d04:	4659      	mov	r1, fp
 8006d06:	018b      	lsls	r3, r1, #6
 8006d08:	4651      	mov	r1, sl
 8006d0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006d0e:	4651      	mov	r1, sl
 8006d10:	018a      	lsls	r2, r1, #6
 8006d12:	4651      	mov	r1, sl
 8006d14:	ebb2 0801 	subs.w	r8, r2, r1
 8006d18:	4659      	mov	r1, fp
 8006d1a:	eb63 0901 	sbc.w	r9, r3, r1
 8006d1e:	f04f 0200 	mov.w	r2, #0
 8006d22:	f04f 0300 	mov.w	r3, #0
 8006d26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006d2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006d2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006d32:	4690      	mov	r8, r2
 8006d34:	4699      	mov	r9, r3
 8006d36:	4623      	mov	r3, r4
 8006d38:	eb18 0303 	adds.w	r3, r8, r3
 8006d3c:	60bb      	str	r3, [r7, #8]
 8006d3e:	462b      	mov	r3, r5
 8006d40:	eb49 0303 	adc.w	r3, r9, r3
 8006d44:	60fb      	str	r3, [r7, #12]
 8006d46:	f04f 0200 	mov.w	r2, #0
 8006d4a:	f04f 0300 	mov.w	r3, #0
 8006d4e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006d52:	4629      	mov	r1, r5
 8006d54:	024b      	lsls	r3, r1, #9
 8006d56:	4621      	mov	r1, r4
 8006d58:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006d5c:	4621      	mov	r1, r4
 8006d5e:	024a      	lsls	r2, r1, #9
 8006d60:	4610      	mov	r0, r2
 8006d62:	4619      	mov	r1, r3
 8006d64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d66:	2200      	movs	r2, #0
 8006d68:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d6c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006d70:	f7f9 ffba 	bl	8000ce8 <__aeabi_uldivmod>
 8006d74:	4602      	mov	r2, r0
 8006d76:	460b      	mov	r3, r1
 8006d78:	4613      	mov	r3, r2
 8006d7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d7c:	e058      	b.n	8006e30 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d7e:	4b38      	ldr	r3, [pc, #224]	; (8006e60 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	099b      	lsrs	r3, r3, #6
 8006d84:	2200      	movs	r2, #0
 8006d86:	4618      	mov	r0, r3
 8006d88:	4611      	mov	r1, r2
 8006d8a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006d8e:	623b      	str	r3, [r7, #32]
 8006d90:	2300      	movs	r3, #0
 8006d92:	627b      	str	r3, [r7, #36]	; 0x24
 8006d94:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006d98:	4642      	mov	r2, r8
 8006d9a:	464b      	mov	r3, r9
 8006d9c:	f04f 0000 	mov.w	r0, #0
 8006da0:	f04f 0100 	mov.w	r1, #0
 8006da4:	0159      	lsls	r1, r3, #5
 8006da6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006daa:	0150      	lsls	r0, r2, #5
 8006dac:	4602      	mov	r2, r0
 8006dae:	460b      	mov	r3, r1
 8006db0:	4641      	mov	r1, r8
 8006db2:	ebb2 0a01 	subs.w	sl, r2, r1
 8006db6:	4649      	mov	r1, r9
 8006db8:	eb63 0b01 	sbc.w	fp, r3, r1
 8006dbc:	f04f 0200 	mov.w	r2, #0
 8006dc0:	f04f 0300 	mov.w	r3, #0
 8006dc4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006dc8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006dcc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006dd0:	ebb2 040a 	subs.w	r4, r2, sl
 8006dd4:	eb63 050b 	sbc.w	r5, r3, fp
 8006dd8:	f04f 0200 	mov.w	r2, #0
 8006ddc:	f04f 0300 	mov.w	r3, #0
 8006de0:	00eb      	lsls	r3, r5, #3
 8006de2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006de6:	00e2      	lsls	r2, r4, #3
 8006de8:	4614      	mov	r4, r2
 8006dea:	461d      	mov	r5, r3
 8006dec:	4643      	mov	r3, r8
 8006dee:	18e3      	adds	r3, r4, r3
 8006df0:	603b      	str	r3, [r7, #0]
 8006df2:	464b      	mov	r3, r9
 8006df4:	eb45 0303 	adc.w	r3, r5, r3
 8006df8:	607b      	str	r3, [r7, #4]
 8006dfa:	f04f 0200 	mov.w	r2, #0
 8006dfe:	f04f 0300 	mov.w	r3, #0
 8006e02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006e06:	4629      	mov	r1, r5
 8006e08:	028b      	lsls	r3, r1, #10
 8006e0a:	4621      	mov	r1, r4
 8006e0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006e10:	4621      	mov	r1, r4
 8006e12:	028a      	lsls	r2, r1, #10
 8006e14:	4610      	mov	r0, r2
 8006e16:	4619      	mov	r1, r3
 8006e18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	61bb      	str	r3, [r7, #24]
 8006e1e:	61fa      	str	r2, [r7, #28]
 8006e20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e24:	f7f9 ff60 	bl	8000ce8 <__aeabi_uldivmod>
 8006e28:	4602      	mov	r2, r0
 8006e2a:	460b      	mov	r3, r1
 8006e2c:	4613      	mov	r3, r2
 8006e2e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006e30:	4b0b      	ldr	r3, [pc, #44]	; (8006e60 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	0c1b      	lsrs	r3, r3, #16
 8006e36:	f003 0303 	and.w	r3, r3, #3
 8006e3a:	3301      	adds	r3, #1
 8006e3c:	005b      	lsls	r3, r3, #1
 8006e3e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8006e40:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006e42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e48:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006e4a:	e002      	b.n	8006e52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006e4c:	4b05      	ldr	r3, [pc, #20]	; (8006e64 <HAL_RCC_GetSysClockFreq+0x204>)
 8006e4e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006e50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006e52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3750      	adds	r7, #80	; 0x50
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e5e:	bf00      	nop
 8006e60:	40023800 	.word	0x40023800
 8006e64:	00f42400 	.word	0x00f42400
 8006e68:	007a1200 	.word	0x007a1200

08006e6c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e70:	4b03      	ldr	r3, [pc, #12]	; (8006e80 <HAL_RCC_GetHCLKFreq+0x14>)
 8006e72:	681b      	ldr	r3, [r3, #0]
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	46bd      	mov	sp, r7
 8006e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7c:	4770      	bx	lr
 8006e7e:	bf00      	nop
 8006e80:	2000000c 	.word	0x2000000c

08006e84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006e88:	f7ff fff0 	bl	8006e6c <HAL_RCC_GetHCLKFreq>
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	4b05      	ldr	r3, [pc, #20]	; (8006ea4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006e90:	689b      	ldr	r3, [r3, #8]
 8006e92:	0a9b      	lsrs	r3, r3, #10
 8006e94:	f003 0307 	and.w	r3, r3, #7
 8006e98:	4903      	ldr	r1, [pc, #12]	; (8006ea8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e9a:	5ccb      	ldrb	r3, [r1, r3]
 8006e9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	bd80      	pop	{r7, pc}
 8006ea4:	40023800 	.word	0x40023800
 8006ea8:	08018b0c 	.word	0x08018b0c

08006eac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006eb0:	f7ff ffdc 	bl	8006e6c <HAL_RCC_GetHCLKFreq>
 8006eb4:	4602      	mov	r2, r0
 8006eb6:	4b05      	ldr	r3, [pc, #20]	; (8006ecc <HAL_RCC_GetPCLK2Freq+0x20>)
 8006eb8:	689b      	ldr	r3, [r3, #8]
 8006eba:	0b5b      	lsrs	r3, r3, #13
 8006ebc:	f003 0307 	and.w	r3, r3, #7
 8006ec0:	4903      	ldr	r1, [pc, #12]	; (8006ed0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006ec2:	5ccb      	ldrb	r3, [r1, r3]
 8006ec4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	bd80      	pop	{r7, pc}
 8006ecc:	40023800 	.word	0x40023800
 8006ed0:	08018b0c 	.word	0x08018b0c

08006ed4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b088      	sub	sp, #32
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006edc:	2300      	movs	r3, #0
 8006ede:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006eec:	2300      	movs	r3, #0
 8006eee:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f003 0301 	and.w	r3, r3, #1
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d012      	beq.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006efc:	4b69      	ldr	r3, [pc, #420]	; (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	4a68      	ldr	r2, [pc, #416]	; (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f02:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006f06:	6093      	str	r3, [r2, #8]
 8006f08:	4b66      	ldr	r3, [pc, #408]	; (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f0a:	689a      	ldr	r2, [r3, #8]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f10:	4964      	ldr	r1, [pc, #400]	; (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f12:	4313      	orrs	r3, r2
 8006f14:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d101      	bne.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d017      	beq.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006f2e:	4b5d      	ldr	r3, [pc, #372]	; (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f34:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f3c:	4959      	ldr	r1, [pc, #356]	; (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f4c:	d101      	bne.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d101      	bne.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d017      	beq.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006f6a:	4b4e      	ldr	r3, [pc, #312]	; (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f70:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f78:	494a      	ldr	r1, [pc, #296]	; (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f88:	d101      	bne.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d101      	bne.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006f96:	2301      	movs	r3, #1
 8006f98:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d001      	beq.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f003 0320 	and.w	r3, r3, #32
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	f000 808b 	beq.w	80070ce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006fb8:	4b3a      	ldr	r3, [pc, #232]	; (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fbc:	4a39      	ldr	r2, [pc, #228]	; (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fc2:	6413      	str	r3, [r2, #64]	; 0x40
 8006fc4:	4b37      	ldr	r3, [pc, #220]	; (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fcc:	60bb      	str	r3, [r7, #8]
 8006fce:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006fd0:	4b35      	ldr	r3, [pc, #212]	; (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a34      	ldr	r2, [pc, #208]	; (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006fd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fdc:	f7fd faa0 	bl	8004520 <HAL_GetTick>
 8006fe0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006fe2:	e008      	b.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fe4:	f7fd fa9c 	bl	8004520 <HAL_GetTick>
 8006fe8:	4602      	mov	r2, r0
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	1ad3      	subs	r3, r2, r3
 8006fee:	2b64      	cmp	r3, #100	; 0x64
 8006ff0:	d901      	bls.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006ff2:	2303      	movs	r3, #3
 8006ff4:	e357      	b.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006ff6:	4b2c      	ldr	r3, [pc, #176]	; (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d0f0      	beq.n	8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007002:	4b28      	ldr	r3, [pc, #160]	; (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007006:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800700a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d035      	beq.n	800707e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007016:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800701a:	693a      	ldr	r2, [r7, #16]
 800701c:	429a      	cmp	r2, r3
 800701e:	d02e      	beq.n	800707e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007020:	4b20      	ldr	r3, [pc, #128]	; (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007024:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007028:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800702a:	4b1e      	ldr	r3, [pc, #120]	; (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800702c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800702e:	4a1d      	ldr	r2, [pc, #116]	; (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007030:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007034:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007036:	4b1b      	ldr	r3, [pc, #108]	; (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800703a:	4a1a      	ldr	r2, [pc, #104]	; (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800703c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007040:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007042:	4a18      	ldr	r2, [pc, #96]	; (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007048:	4b16      	ldr	r3, [pc, #88]	; (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800704a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800704c:	f003 0301 	and.w	r3, r3, #1
 8007050:	2b01      	cmp	r3, #1
 8007052:	d114      	bne.n	800707e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007054:	f7fd fa64 	bl	8004520 <HAL_GetTick>
 8007058:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800705a:	e00a      	b.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800705c:	f7fd fa60 	bl	8004520 <HAL_GetTick>
 8007060:	4602      	mov	r2, r0
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	1ad3      	subs	r3, r2, r3
 8007066:	f241 3288 	movw	r2, #5000	; 0x1388
 800706a:	4293      	cmp	r3, r2
 800706c:	d901      	bls.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800706e:	2303      	movs	r3, #3
 8007070:	e319      	b.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007072:	4b0c      	ldr	r3, [pc, #48]	; (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007076:	f003 0302 	and.w	r3, r3, #2
 800707a:	2b00      	cmp	r3, #0
 800707c:	d0ee      	beq.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007082:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007086:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800708a:	d111      	bne.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800708c:	4b05      	ldr	r3, [pc, #20]	; (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007098:	4b04      	ldr	r3, [pc, #16]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800709a:	400b      	ands	r3, r1
 800709c:	4901      	ldr	r1, [pc, #4]	; (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800709e:	4313      	orrs	r3, r2
 80070a0:	608b      	str	r3, [r1, #8]
 80070a2:	e00b      	b.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80070a4:	40023800 	.word	0x40023800
 80070a8:	40007000 	.word	0x40007000
 80070ac:	0ffffcff 	.word	0x0ffffcff
 80070b0:	4baa      	ldr	r3, [pc, #680]	; (800735c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	4aa9      	ldr	r2, [pc, #676]	; (800735c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070b6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80070ba:	6093      	str	r3, [r2, #8]
 80070bc:	4ba7      	ldr	r3, [pc, #668]	; (800735c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070c8:	49a4      	ldr	r1, [pc, #656]	; (800735c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070ca:	4313      	orrs	r3, r2
 80070cc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f003 0310 	and.w	r3, r3, #16
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d010      	beq.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80070da:	4ba0      	ldr	r3, [pc, #640]	; (800735c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070e0:	4a9e      	ldr	r2, [pc, #632]	; (800735c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80070e6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80070ea:	4b9c      	ldr	r3, [pc, #624]	; (800735c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070ec:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070f4:	4999      	ldr	r1, [pc, #612]	; (800735c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070f6:	4313      	orrs	r3, r2
 80070f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007104:	2b00      	cmp	r3, #0
 8007106:	d00a      	beq.n	800711e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007108:	4b94      	ldr	r3, [pc, #592]	; (800735c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800710a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800710e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007116:	4991      	ldr	r1, [pc, #580]	; (800735c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007118:	4313      	orrs	r3, r2
 800711a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007126:	2b00      	cmp	r3, #0
 8007128:	d00a      	beq.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800712a:	4b8c      	ldr	r3, [pc, #560]	; (800735c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800712c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007130:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007138:	4988      	ldr	r1, [pc, #544]	; (800735c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800713a:	4313      	orrs	r3, r2
 800713c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007148:	2b00      	cmp	r3, #0
 800714a:	d00a      	beq.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800714c:	4b83      	ldr	r3, [pc, #524]	; (800735c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800714e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007152:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800715a:	4980      	ldr	r1, [pc, #512]	; (800735c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800715c:	4313      	orrs	r3, r2
 800715e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800716a:	2b00      	cmp	r3, #0
 800716c:	d00a      	beq.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800716e:	4b7b      	ldr	r3, [pc, #492]	; (800735c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007174:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800717c:	4977      	ldr	r1, [pc, #476]	; (800735c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800717e:	4313      	orrs	r3, r2
 8007180:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800718c:	2b00      	cmp	r3, #0
 800718e:	d00a      	beq.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007190:	4b72      	ldr	r3, [pc, #456]	; (800735c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007196:	f023 0203 	bic.w	r2, r3, #3
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800719e:	496f      	ldr	r1, [pc, #444]	; (800735c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071a0:	4313      	orrs	r3, r2
 80071a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d00a      	beq.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80071b2:	4b6a      	ldr	r3, [pc, #424]	; (800735c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071b8:	f023 020c 	bic.w	r2, r3, #12
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071c0:	4966      	ldr	r1, [pc, #408]	; (800735c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071c2:	4313      	orrs	r3, r2
 80071c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d00a      	beq.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80071d4:	4b61      	ldr	r3, [pc, #388]	; (800735c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071da:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071e2:	495e      	ldr	r1, [pc, #376]	; (800735c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071e4:	4313      	orrs	r3, r2
 80071e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d00a      	beq.n	800720c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80071f6:	4b59      	ldr	r3, [pc, #356]	; (800735c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071fc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007204:	4955      	ldr	r1, [pc, #340]	; (800735c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007206:	4313      	orrs	r3, r2
 8007208:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007214:	2b00      	cmp	r3, #0
 8007216:	d00a      	beq.n	800722e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007218:	4b50      	ldr	r3, [pc, #320]	; (800735c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800721a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800721e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007226:	494d      	ldr	r1, [pc, #308]	; (800735c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007228:	4313      	orrs	r3, r2
 800722a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007236:	2b00      	cmp	r3, #0
 8007238:	d00a      	beq.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800723a:	4b48      	ldr	r3, [pc, #288]	; (800735c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800723c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007240:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007248:	4944      	ldr	r1, [pc, #272]	; (800735c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800724a:	4313      	orrs	r3, r2
 800724c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007258:	2b00      	cmp	r3, #0
 800725a:	d00a      	beq.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800725c:	4b3f      	ldr	r3, [pc, #252]	; (800735c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800725e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007262:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800726a:	493c      	ldr	r1, [pc, #240]	; (800735c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800726c:	4313      	orrs	r3, r2
 800726e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800727a:	2b00      	cmp	r3, #0
 800727c:	d00a      	beq.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800727e:	4b37      	ldr	r3, [pc, #220]	; (800735c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007280:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007284:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800728c:	4933      	ldr	r1, [pc, #204]	; (800735c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800728e:	4313      	orrs	r3, r2
 8007290:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800729c:	2b00      	cmp	r3, #0
 800729e:	d00a      	beq.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80072a0:	4b2e      	ldr	r3, [pc, #184]	; (800735c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80072a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072a6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072ae:	492b      	ldr	r1, [pc, #172]	; (800735c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80072b0:	4313      	orrs	r3, r2
 80072b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d011      	beq.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80072c2:	4b26      	ldr	r3, [pc, #152]	; (800735c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80072c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072c8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072d0:	4922      	ldr	r1, [pc, #136]	; (800735c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80072d2:	4313      	orrs	r3, r2
 80072d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80072e0:	d101      	bne.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80072e2:	2301      	movs	r3, #1
 80072e4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f003 0308 	and.w	r3, r3, #8
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d001      	beq.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80072f2:	2301      	movs	r3, #1
 80072f4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d00a      	beq.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007302:	4b16      	ldr	r3, [pc, #88]	; (800735c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007308:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007310:	4912      	ldr	r1, [pc, #72]	; (800735c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007312:	4313      	orrs	r3, r2
 8007314:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007320:	2b00      	cmp	r3, #0
 8007322:	d00b      	beq.n	800733c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007324:	4b0d      	ldr	r3, [pc, #52]	; (800735c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800732a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007334:	4909      	ldr	r1, [pc, #36]	; (800735c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007336:	4313      	orrs	r3, r2
 8007338:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800733c:	69fb      	ldr	r3, [r7, #28]
 800733e:	2b01      	cmp	r3, #1
 8007340:	d006      	beq.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800734a:	2b00      	cmp	r3, #0
 800734c:	f000 80d9 	beq.w	8007502 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007350:	4b02      	ldr	r3, [pc, #8]	; (800735c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a01      	ldr	r2, [pc, #4]	; (800735c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007356:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800735a:	e001      	b.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800735c:	40023800 	.word	0x40023800
 8007360:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007362:	f7fd f8dd 	bl	8004520 <HAL_GetTick>
 8007366:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007368:	e008      	b.n	800737c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800736a:	f7fd f8d9 	bl	8004520 <HAL_GetTick>
 800736e:	4602      	mov	r2, r0
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	1ad3      	subs	r3, r2, r3
 8007374:	2b64      	cmp	r3, #100	; 0x64
 8007376:	d901      	bls.n	800737c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007378:	2303      	movs	r3, #3
 800737a:	e194      	b.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800737c:	4b6c      	ldr	r3, [pc, #432]	; (8007530 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007384:	2b00      	cmp	r3, #0
 8007386:	d1f0      	bne.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f003 0301 	and.w	r3, r3, #1
 8007390:	2b00      	cmp	r3, #0
 8007392:	d021      	beq.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007398:	2b00      	cmp	r3, #0
 800739a:	d11d      	bne.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800739c:	4b64      	ldr	r3, [pc, #400]	; (8007530 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800739e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073a2:	0c1b      	lsrs	r3, r3, #16
 80073a4:	f003 0303 	and.w	r3, r3, #3
 80073a8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80073aa:	4b61      	ldr	r3, [pc, #388]	; (8007530 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80073ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073b0:	0e1b      	lsrs	r3, r3, #24
 80073b2:	f003 030f 	and.w	r3, r3, #15
 80073b6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	019a      	lsls	r2, r3, #6
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	041b      	lsls	r3, r3, #16
 80073c2:	431a      	orrs	r2, r3
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	061b      	lsls	r3, r3, #24
 80073c8:	431a      	orrs	r2, r3
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	689b      	ldr	r3, [r3, #8]
 80073ce:	071b      	lsls	r3, r3, #28
 80073d0:	4957      	ldr	r1, [pc, #348]	; (8007530 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80073d2:	4313      	orrs	r3, r2
 80073d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d004      	beq.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80073ec:	d00a      	beq.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d02e      	beq.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007402:	d129      	bne.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007404:	4b4a      	ldr	r3, [pc, #296]	; (8007530 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007406:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800740a:	0c1b      	lsrs	r3, r3, #16
 800740c:	f003 0303 	and.w	r3, r3, #3
 8007410:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007412:	4b47      	ldr	r3, [pc, #284]	; (8007530 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007414:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007418:	0f1b      	lsrs	r3, r3, #28
 800741a:	f003 0307 	and.w	r3, r3, #7
 800741e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	019a      	lsls	r2, r3, #6
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	041b      	lsls	r3, r3, #16
 800742a:	431a      	orrs	r2, r3
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	68db      	ldr	r3, [r3, #12]
 8007430:	061b      	lsls	r3, r3, #24
 8007432:	431a      	orrs	r2, r3
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	071b      	lsls	r3, r3, #28
 8007438:	493d      	ldr	r1, [pc, #244]	; (8007530 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800743a:	4313      	orrs	r3, r2
 800743c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007440:	4b3b      	ldr	r3, [pc, #236]	; (8007530 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007442:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007446:	f023 021f 	bic.w	r2, r3, #31
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800744e:	3b01      	subs	r3, #1
 8007450:	4937      	ldr	r1, [pc, #220]	; (8007530 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007452:	4313      	orrs	r3, r2
 8007454:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007460:	2b00      	cmp	r3, #0
 8007462:	d01d      	beq.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007464:	4b32      	ldr	r3, [pc, #200]	; (8007530 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007466:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800746a:	0e1b      	lsrs	r3, r3, #24
 800746c:	f003 030f 	and.w	r3, r3, #15
 8007470:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007472:	4b2f      	ldr	r3, [pc, #188]	; (8007530 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007474:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007478:	0f1b      	lsrs	r3, r3, #28
 800747a:	f003 0307 	and.w	r3, r3, #7
 800747e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	019a      	lsls	r2, r3, #6
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	691b      	ldr	r3, [r3, #16]
 800748a:	041b      	lsls	r3, r3, #16
 800748c:	431a      	orrs	r2, r3
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	061b      	lsls	r3, r3, #24
 8007492:	431a      	orrs	r2, r3
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	071b      	lsls	r3, r3, #28
 8007498:	4925      	ldr	r1, [pc, #148]	; (8007530 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800749a:	4313      	orrs	r3, r2
 800749c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d011      	beq.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	019a      	lsls	r2, r3, #6
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	691b      	ldr	r3, [r3, #16]
 80074b6:	041b      	lsls	r3, r3, #16
 80074b8:	431a      	orrs	r2, r3
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	68db      	ldr	r3, [r3, #12]
 80074be:	061b      	lsls	r3, r3, #24
 80074c0:	431a      	orrs	r2, r3
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	689b      	ldr	r3, [r3, #8]
 80074c6:	071b      	lsls	r3, r3, #28
 80074c8:	4919      	ldr	r1, [pc, #100]	; (8007530 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80074ca:	4313      	orrs	r3, r2
 80074cc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80074d0:	4b17      	ldr	r3, [pc, #92]	; (8007530 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a16      	ldr	r2, [pc, #88]	; (8007530 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80074d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80074da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074dc:	f7fd f820 	bl	8004520 <HAL_GetTick>
 80074e0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80074e2:	e008      	b.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80074e4:	f7fd f81c 	bl	8004520 <HAL_GetTick>
 80074e8:	4602      	mov	r2, r0
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	1ad3      	subs	r3, r2, r3
 80074ee:	2b64      	cmp	r3, #100	; 0x64
 80074f0:	d901      	bls.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80074f2:	2303      	movs	r3, #3
 80074f4:	e0d7      	b.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80074f6:	4b0e      	ldr	r3, [pc, #56]	; (8007530 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d0f0      	beq.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007502:	69bb      	ldr	r3, [r7, #24]
 8007504:	2b01      	cmp	r3, #1
 8007506:	f040 80cd 	bne.w	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800750a:	4b09      	ldr	r3, [pc, #36]	; (8007530 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a08      	ldr	r2, [pc, #32]	; (8007530 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007510:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007514:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007516:	f7fd f803 	bl	8004520 <HAL_GetTick>
 800751a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800751c:	e00a      	b.n	8007534 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800751e:	f7fc ffff 	bl	8004520 <HAL_GetTick>
 8007522:	4602      	mov	r2, r0
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	1ad3      	subs	r3, r2, r3
 8007528:	2b64      	cmp	r3, #100	; 0x64
 800752a:	d903      	bls.n	8007534 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800752c:	2303      	movs	r3, #3
 800752e:	e0ba      	b.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8007530:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007534:	4b5e      	ldr	r3, [pc, #376]	; (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800753c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007540:	d0ed      	beq.n	800751e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800754a:	2b00      	cmp	r3, #0
 800754c:	d003      	beq.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007552:	2b00      	cmp	r3, #0
 8007554:	d009      	beq.n	800756a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800755e:	2b00      	cmp	r3, #0
 8007560:	d02e      	beq.n	80075c0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007566:	2b00      	cmp	r3, #0
 8007568:	d12a      	bne.n	80075c0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800756a:	4b51      	ldr	r3, [pc, #324]	; (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800756c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007570:	0c1b      	lsrs	r3, r3, #16
 8007572:	f003 0303 	and.w	r3, r3, #3
 8007576:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007578:	4b4d      	ldr	r3, [pc, #308]	; (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800757a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800757e:	0f1b      	lsrs	r3, r3, #28
 8007580:	f003 0307 	and.w	r3, r3, #7
 8007584:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	695b      	ldr	r3, [r3, #20]
 800758a:	019a      	lsls	r2, r3, #6
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	041b      	lsls	r3, r3, #16
 8007590:	431a      	orrs	r2, r3
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	699b      	ldr	r3, [r3, #24]
 8007596:	061b      	lsls	r3, r3, #24
 8007598:	431a      	orrs	r2, r3
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	071b      	lsls	r3, r3, #28
 800759e:	4944      	ldr	r1, [pc, #272]	; (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80075a0:	4313      	orrs	r3, r2
 80075a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80075a6:	4b42      	ldr	r3, [pc, #264]	; (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80075a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075ac:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075b4:	3b01      	subs	r3, #1
 80075b6:	021b      	lsls	r3, r3, #8
 80075b8:	493d      	ldr	r1, [pc, #244]	; (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80075ba:	4313      	orrs	r3, r2
 80075bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d022      	beq.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80075d4:	d11d      	bne.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80075d6:	4b36      	ldr	r3, [pc, #216]	; (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80075d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075dc:	0e1b      	lsrs	r3, r3, #24
 80075de:	f003 030f 	and.w	r3, r3, #15
 80075e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80075e4:	4b32      	ldr	r3, [pc, #200]	; (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80075e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075ea:	0f1b      	lsrs	r3, r3, #28
 80075ec:	f003 0307 	and.w	r3, r3, #7
 80075f0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	695b      	ldr	r3, [r3, #20]
 80075f6:	019a      	lsls	r2, r3, #6
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6a1b      	ldr	r3, [r3, #32]
 80075fc:	041b      	lsls	r3, r3, #16
 80075fe:	431a      	orrs	r2, r3
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	061b      	lsls	r3, r3, #24
 8007604:	431a      	orrs	r2, r3
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	071b      	lsls	r3, r3, #28
 800760a:	4929      	ldr	r1, [pc, #164]	; (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800760c:	4313      	orrs	r3, r2
 800760e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f003 0308 	and.w	r3, r3, #8
 800761a:	2b00      	cmp	r3, #0
 800761c:	d028      	beq.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800761e:	4b24      	ldr	r3, [pc, #144]	; (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007624:	0e1b      	lsrs	r3, r3, #24
 8007626:	f003 030f 	and.w	r3, r3, #15
 800762a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800762c:	4b20      	ldr	r3, [pc, #128]	; (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800762e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007632:	0c1b      	lsrs	r3, r3, #16
 8007634:	f003 0303 	and.w	r3, r3, #3
 8007638:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	695b      	ldr	r3, [r3, #20]
 800763e:	019a      	lsls	r2, r3, #6
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	041b      	lsls	r3, r3, #16
 8007644:	431a      	orrs	r2, r3
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	061b      	lsls	r3, r3, #24
 800764a:	431a      	orrs	r2, r3
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	69db      	ldr	r3, [r3, #28]
 8007650:	071b      	lsls	r3, r3, #28
 8007652:	4917      	ldr	r1, [pc, #92]	; (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007654:	4313      	orrs	r3, r2
 8007656:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800765a:	4b15      	ldr	r3, [pc, #84]	; (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800765c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007660:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007668:	4911      	ldr	r1, [pc, #68]	; (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800766a:	4313      	orrs	r3, r2
 800766c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007670:	4b0f      	ldr	r3, [pc, #60]	; (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a0e      	ldr	r2, [pc, #56]	; (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007676:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800767a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800767c:	f7fc ff50 	bl	8004520 <HAL_GetTick>
 8007680:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007682:	e008      	b.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007684:	f7fc ff4c 	bl	8004520 <HAL_GetTick>
 8007688:	4602      	mov	r2, r0
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	1ad3      	subs	r3, r2, r3
 800768e:	2b64      	cmp	r3, #100	; 0x64
 8007690:	d901      	bls.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007692:	2303      	movs	r3, #3
 8007694:	e007      	b.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007696:	4b06      	ldr	r3, [pc, #24]	; (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800769e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076a2:	d1ef      	bne.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80076a4:	2300      	movs	r3, #0
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3720      	adds	r7, #32
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}
 80076ae:	bf00      	nop
 80076b0:	40023800 	.word	0x40023800

080076b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b082      	sub	sp, #8
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d101      	bne.n	80076c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80076c2:	2301      	movs	r3, #1
 80076c4:	e049      	b.n	800775a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076cc:	b2db      	uxtb	r3, r3
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d106      	bne.n	80076e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2200      	movs	r2, #0
 80076d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f7fc fba2 	bl	8003e24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2202      	movs	r2, #2
 80076e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681a      	ldr	r2, [r3, #0]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	3304      	adds	r3, #4
 80076f0:	4619      	mov	r1, r3
 80076f2:	4610      	mov	r0, r2
 80076f4:	f000 fcc0 	bl	8008078 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2201      	movs	r2, #1
 80076fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2201      	movs	r2, #1
 8007704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2201      	movs	r2, #1
 800770c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2201      	movs	r2, #1
 8007714:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2201      	movs	r2, #1
 800771c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2201      	movs	r2, #1
 8007724:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2201      	movs	r2, #1
 800772c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2201      	movs	r2, #1
 8007734:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2201      	movs	r2, #1
 800773c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2201      	movs	r2, #1
 8007744:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2201      	movs	r2, #1
 800774c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2201      	movs	r2, #1
 8007754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007758:	2300      	movs	r3, #0
}
 800775a:	4618      	mov	r0, r3
 800775c:	3708      	adds	r7, #8
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}

08007762 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007762:	b580      	push	{r7, lr}
 8007764:	b082      	sub	sp, #8
 8007766:	af00      	add	r7, sp, #0
 8007768:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d101      	bne.n	8007774 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007770:	2301      	movs	r3, #1
 8007772:	e049      	b.n	8007808 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800777a:	b2db      	uxtb	r3, r3
 800777c:	2b00      	cmp	r3, #0
 800777e:	d106      	bne.n	800778e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2200      	movs	r2, #0
 8007784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f000 f841 	bl	8007810 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2202      	movs	r2, #2
 8007792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681a      	ldr	r2, [r3, #0]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	3304      	adds	r3, #4
 800779e:	4619      	mov	r1, r3
 80077a0:	4610      	mov	r0, r2
 80077a2:	f000 fc69 	bl	8008078 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2201      	movs	r2, #1
 80077aa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2201      	movs	r2, #1
 80077b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2201      	movs	r2, #1
 80077ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2201      	movs	r2, #1
 80077c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2201      	movs	r2, #1
 80077ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2201      	movs	r2, #1
 80077d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2201      	movs	r2, #1
 80077da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2201      	movs	r2, #1
 80077e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2201      	movs	r2, #1
 80077ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2201      	movs	r2, #1
 80077f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2201      	movs	r2, #1
 80077fa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2201      	movs	r2, #1
 8007802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007806:	2300      	movs	r3, #0
}
 8007808:	4618      	mov	r0, r3
 800780a:	3708      	adds	r7, #8
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}

08007810 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007810:	b480      	push	{r7}
 8007812:	b083      	sub	sp, #12
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007818:	bf00      	nop
 800781a:	370c      	adds	r7, #12
 800781c:	46bd      	mov	sp, r7
 800781e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007822:	4770      	bx	lr

08007824 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b084      	sub	sp, #16
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d109      	bne.n	8007848 <HAL_TIM_PWM_Start+0x24>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800783a:	b2db      	uxtb	r3, r3
 800783c:	2b01      	cmp	r3, #1
 800783e:	bf14      	ite	ne
 8007840:	2301      	movne	r3, #1
 8007842:	2300      	moveq	r3, #0
 8007844:	b2db      	uxtb	r3, r3
 8007846:	e03c      	b.n	80078c2 <HAL_TIM_PWM_Start+0x9e>
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	2b04      	cmp	r3, #4
 800784c:	d109      	bne.n	8007862 <HAL_TIM_PWM_Start+0x3e>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007854:	b2db      	uxtb	r3, r3
 8007856:	2b01      	cmp	r3, #1
 8007858:	bf14      	ite	ne
 800785a:	2301      	movne	r3, #1
 800785c:	2300      	moveq	r3, #0
 800785e:	b2db      	uxtb	r3, r3
 8007860:	e02f      	b.n	80078c2 <HAL_TIM_PWM_Start+0x9e>
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	2b08      	cmp	r3, #8
 8007866:	d109      	bne.n	800787c <HAL_TIM_PWM_Start+0x58>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800786e:	b2db      	uxtb	r3, r3
 8007870:	2b01      	cmp	r3, #1
 8007872:	bf14      	ite	ne
 8007874:	2301      	movne	r3, #1
 8007876:	2300      	moveq	r3, #0
 8007878:	b2db      	uxtb	r3, r3
 800787a:	e022      	b.n	80078c2 <HAL_TIM_PWM_Start+0x9e>
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	2b0c      	cmp	r3, #12
 8007880:	d109      	bne.n	8007896 <HAL_TIM_PWM_Start+0x72>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007888:	b2db      	uxtb	r3, r3
 800788a:	2b01      	cmp	r3, #1
 800788c:	bf14      	ite	ne
 800788e:	2301      	movne	r3, #1
 8007890:	2300      	moveq	r3, #0
 8007892:	b2db      	uxtb	r3, r3
 8007894:	e015      	b.n	80078c2 <HAL_TIM_PWM_Start+0x9e>
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	2b10      	cmp	r3, #16
 800789a:	d109      	bne.n	80078b0 <HAL_TIM_PWM_Start+0x8c>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80078a2:	b2db      	uxtb	r3, r3
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	bf14      	ite	ne
 80078a8:	2301      	movne	r3, #1
 80078aa:	2300      	moveq	r3, #0
 80078ac:	b2db      	uxtb	r3, r3
 80078ae:	e008      	b.n	80078c2 <HAL_TIM_PWM_Start+0x9e>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80078b6:	b2db      	uxtb	r3, r3
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	bf14      	ite	ne
 80078bc:	2301      	movne	r3, #1
 80078be:	2300      	moveq	r3, #0
 80078c0:	b2db      	uxtb	r3, r3
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d001      	beq.n	80078ca <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80078c6:	2301      	movs	r3, #1
 80078c8:	e092      	b.n	80079f0 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d104      	bne.n	80078da <HAL_TIM_PWM_Start+0xb6>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2202      	movs	r2, #2
 80078d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80078d8:	e023      	b.n	8007922 <HAL_TIM_PWM_Start+0xfe>
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	2b04      	cmp	r3, #4
 80078de:	d104      	bne.n	80078ea <HAL_TIM_PWM_Start+0xc6>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2202      	movs	r2, #2
 80078e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80078e8:	e01b      	b.n	8007922 <HAL_TIM_PWM_Start+0xfe>
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	2b08      	cmp	r3, #8
 80078ee:	d104      	bne.n	80078fa <HAL_TIM_PWM_Start+0xd6>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2202      	movs	r2, #2
 80078f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80078f8:	e013      	b.n	8007922 <HAL_TIM_PWM_Start+0xfe>
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	2b0c      	cmp	r3, #12
 80078fe:	d104      	bne.n	800790a <HAL_TIM_PWM_Start+0xe6>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2202      	movs	r2, #2
 8007904:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007908:	e00b      	b.n	8007922 <HAL_TIM_PWM_Start+0xfe>
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	2b10      	cmp	r3, #16
 800790e:	d104      	bne.n	800791a <HAL_TIM_PWM_Start+0xf6>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2202      	movs	r2, #2
 8007914:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007918:	e003      	b.n	8007922 <HAL_TIM_PWM_Start+0xfe>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2202      	movs	r2, #2
 800791e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	2201      	movs	r2, #1
 8007928:	6839      	ldr	r1, [r7, #0]
 800792a:	4618      	mov	r0, r3
 800792c:	f000 ff3c 	bl	80087a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a30      	ldr	r2, [pc, #192]	; (80079f8 <HAL_TIM_PWM_Start+0x1d4>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d004      	beq.n	8007944 <HAL_TIM_PWM_Start+0x120>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a2f      	ldr	r2, [pc, #188]	; (80079fc <HAL_TIM_PWM_Start+0x1d8>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d101      	bne.n	8007948 <HAL_TIM_PWM_Start+0x124>
 8007944:	2301      	movs	r3, #1
 8007946:	e000      	b.n	800794a <HAL_TIM_PWM_Start+0x126>
 8007948:	2300      	movs	r3, #0
 800794a:	2b00      	cmp	r3, #0
 800794c:	d007      	beq.n	800795e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800795c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4a25      	ldr	r2, [pc, #148]	; (80079f8 <HAL_TIM_PWM_Start+0x1d4>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d022      	beq.n	80079ae <HAL_TIM_PWM_Start+0x18a>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007970:	d01d      	beq.n	80079ae <HAL_TIM_PWM_Start+0x18a>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a22      	ldr	r2, [pc, #136]	; (8007a00 <HAL_TIM_PWM_Start+0x1dc>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d018      	beq.n	80079ae <HAL_TIM_PWM_Start+0x18a>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a20      	ldr	r2, [pc, #128]	; (8007a04 <HAL_TIM_PWM_Start+0x1e0>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d013      	beq.n	80079ae <HAL_TIM_PWM_Start+0x18a>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a1f      	ldr	r2, [pc, #124]	; (8007a08 <HAL_TIM_PWM_Start+0x1e4>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d00e      	beq.n	80079ae <HAL_TIM_PWM_Start+0x18a>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a19      	ldr	r2, [pc, #100]	; (80079fc <HAL_TIM_PWM_Start+0x1d8>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d009      	beq.n	80079ae <HAL_TIM_PWM_Start+0x18a>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a1b      	ldr	r2, [pc, #108]	; (8007a0c <HAL_TIM_PWM_Start+0x1e8>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d004      	beq.n	80079ae <HAL_TIM_PWM_Start+0x18a>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a19      	ldr	r2, [pc, #100]	; (8007a10 <HAL_TIM_PWM_Start+0x1ec>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d115      	bne.n	80079da <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	689a      	ldr	r2, [r3, #8]
 80079b4:	4b17      	ldr	r3, [pc, #92]	; (8007a14 <HAL_TIM_PWM_Start+0x1f0>)
 80079b6:	4013      	ands	r3, r2
 80079b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2b06      	cmp	r3, #6
 80079be:	d015      	beq.n	80079ec <HAL_TIM_PWM_Start+0x1c8>
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079c6:	d011      	beq.n	80079ec <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	681a      	ldr	r2, [r3, #0]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f042 0201 	orr.w	r2, r2, #1
 80079d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079d8:	e008      	b.n	80079ec <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	681a      	ldr	r2, [r3, #0]
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f042 0201 	orr.w	r2, r2, #1
 80079e8:	601a      	str	r2, [r3, #0]
 80079ea:	e000      	b.n	80079ee <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079ec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80079ee:	2300      	movs	r3, #0
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3710      	adds	r7, #16
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}
 80079f8:	40010000 	.word	0x40010000
 80079fc:	40010400 	.word	0x40010400
 8007a00:	40000400 	.word	0x40000400
 8007a04:	40000800 	.word	0x40000800
 8007a08:	40000c00 	.word	0x40000c00
 8007a0c:	40014000 	.word	0x40014000
 8007a10:	40001800 	.word	0x40001800
 8007a14:	00010007 	.word	0x00010007

08007a18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b082      	sub	sp, #8
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	691b      	ldr	r3, [r3, #16]
 8007a26:	f003 0302 	and.w	r3, r3, #2
 8007a2a:	2b02      	cmp	r3, #2
 8007a2c:	d122      	bne.n	8007a74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	68db      	ldr	r3, [r3, #12]
 8007a34:	f003 0302 	and.w	r3, r3, #2
 8007a38:	2b02      	cmp	r3, #2
 8007a3a:	d11b      	bne.n	8007a74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f06f 0202 	mvn.w	r2, #2
 8007a44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2201      	movs	r2, #1
 8007a4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	699b      	ldr	r3, [r3, #24]
 8007a52:	f003 0303 	and.w	r3, r3, #3
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d003      	beq.n	8007a62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f000 faee 	bl	800803c <HAL_TIM_IC_CaptureCallback>
 8007a60:	e005      	b.n	8007a6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f000 fae0 	bl	8008028 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f000 faf1 	bl	8008050 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2200      	movs	r2, #0
 8007a72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	691b      	ldr	r3, [r3, #16]
 8007a7a:	f003 0304 	and.w	r3, r3, #4
 8007a7e:	2b04      	cmp	r3, #4
 8007a80:	d122      	bne.n	8007ac8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	68db      	ldr	r3, [r3, #12]
 8007a88:	f003 0304 	and.w	r3, r3, #4
 8007a8c:	2b04      	cmp	r3, #4
 8007a8e:	d11b      	bne.n	8007ac8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f06f 0204 	mvn.w	r2, #4
 8007a98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2202      	movs	r2, #2
 8007a9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	699b      	ldr	r3, [r3, #24]
 8007aa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d003      	beq.n	8007ab6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f000 fac4 	bl	800803c <HAL_TIM_IC_CaptureCallback>
 8007ab4:	e005      	b.n	8007ac2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 fab6 	bl	8008028 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 fac7 	bl	8008050 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	691b      	ldr	r3, [r3, #16]
 8007ace:	f003 0308 	and.w	r3, r3, #8
 8007ad2:	2b08      	cmp	r3, #8
 8007ad4:	d122      	bne.n	8007b1c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	68db      	ldr	r3, [r3, #12]
 8007adc:	f003 0308 	and.w	r3, r3, #8
 8007ae0:	2b08      	cmp	r3, #8
 8007ae2:	d11b      	bne.n	8007b1c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f06f 0208 	mvn.w	r2, #8
 8007aec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2204      	movs	r2, #4
 8007af2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	69db      	ldr	r3, [r3, #28]
 8007afa:	f003 0303 	and.w	r3, r3, #3
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d003      	beq.n	8007b0a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f000 fa9a 	bl	800803c <HAL_TIM_IC_CaptureCallback>
 8007b08:	e005      	b.n	8007b16 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f000 fa8c 	bl	8008028 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f000 fa9d 	bl	8008050 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	691b      	ldr	r3, [r3, #16]
 8007b22:	f003 0310 	and.w	r3, r3, #16
 8007b26:	2b10      	cmp	r3, #16
 8007b28:	d122      	bne.n	8007b70 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	68db      	ldr	r3, [r3, #12]
 8007b30:	f003 0310 	and.w	r3, r3, #16
 8007b34:	2b10      	cmp	r3, #16
 8007b36:	d11b      	bne.n	8007b70 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f06f 0210 	mvn.w	r2, #16
 8007b40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2208      	movs	r2, #8
 8007b46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	69db      	ldr	r3, [r3, #28]
 8007b4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d003      	beq.n	8007b5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f000 fa70 	bl	800803c <HAL_TIM_IC_CaptureCallback>
 8007b5c:	e005      	b.n	8007b6a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f000 fa62 	bl	8008028 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f000 fa73 	bl	8008050 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	691b      	ldr	r3, [r3, #16]
 8007b76:	f003 0301 	and.w	r3, r3, #1
 8007b7a:	2b01      	cmp	r3, #1
 8007b7c:	d10e      	bne.n	8007b9c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	68db      	ldr	r3, [r3, #12]
 8007b84:	f003 0301 	and.w	r3, r3, #1
 8007b88:	2b01      	cmp	r3, #1
 8007b8a:	d107      	bne.n	8007b9c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f06f 0201 	mvn.w	r2, #1
 8007b94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f000 fa3c 	bl	8008014 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	691b      	ldr	r3, [r3, #16]
 8007ba2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ba6:	2b80      	cmp	r3, #128	; 0x80
 8007ba8:	d10e      	bne.n	8007bc8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	68db      	ldr	r3, [r3, #12]
 8007bb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bb4:	2b80      	cmp	r3, #128	; 0x80
 8007bb6:	d107      	bne.n	8007bc8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007bc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f000 feae 	bl	8008924 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	691b      	ldr	r3, [r3, #16]
 8007bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bd6:	d10e      	bne.n	8007bf6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	68db      	ldr	r3, [r3, #12]
 8007bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007be2:	2b80      	cmp	r3, #128	; 0x80
 8007be4:	d107      	bne.n	8007bf6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007bee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f000 fea1 	bl	8008938 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	691b      	ldr	r3, [r3, #16]
 8007bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c00:	2b40      	cmp	r3, #64	; 0x40
 8007c02:	d10e      	bne.n	8007c22 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	68db      	ldr	r3, [r3, #12]
 8007c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c0e:	2b40      	cmp	r3, #64	; 0x40
 8007c10:	d107      	bne.n	8007c22 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007c1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f000 fa21 	bl	8008064 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	691b      	ldr	r3, [r3, #16]
 8007c28:	f003 0320 	and.w	r3, r3, #32
 8007c2c:	2b20      	cmp	r3, #32
 8007c2e:	d10e      	bne.n	8007c4e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	68db      	ldr	r3, [r3, #12]
 8007c36:	f003 0320 	and.w	r3, r3, #32
 8007c3a:	2b20      	cmp	r3, #32
 8007c3c:	d107      	bne.n	8007c4e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f06f 0220 	mvn.w	r2, #32
 8007c46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f000 fe61 	bl	8008910 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007c4e:	bf00      	nop
 8007c50:	3708      	adds	r7, #8
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}
	...

08007c58 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b086      	sub	sp, #24
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	60f8      	str	r0, [r7, #12]
 8007c60:	60b9      	str	r1, [r7, #8]
 8007c62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c64:	2300      	movs	r3, #0
 8007c66:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c6e:	2b01      	cmp	r3, #1
 8007c70:	d101      	bne.n	8007c76 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007c72:	2302      	movs	r3, #2
 8007c74:	e0ff      	b.n	8007e76 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2201      	movs	r2, #1
 8007c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2b14      	cmp	r3, #20
 8007c82:	f200 80f0 	bhi.w	8007e66 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007c86:	a201      	add	r2, pc, #4	; (adr r2, 8007c8c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c8c:	08007ce1 	.word	0x08007ce1
 8007c90:	08007e67 	.word	0x08007e67
 8007c94:	08007e67 	.word	0x08007e67
 8007c98:	08007e67 	.word	0x08007e67
 8007c9c:	08007d21 	.word	0x08007d21
 8007ca0:	08007e67 	.word	0x08007e67
 8007ca4:	08007e67 	.word	0x08007e67
 8007ca8:	08007e67 	.word	0x08007e67
 8007cac:	08007d63 	.word	0x08007d63
 8007cb0:	08007e67 	.word	0x08007e67
 8007cb4:	08007e67 	.word	0x08007e67
 8007cb8:	08007e67 	.word	0x08007e67
 8007cbc:	08007da3 	.word	0x08007da3
 8007cc0:	08007e67 	.word	0x08007e67
 8007cc4:	08007e67 	.word	0x08007e67
 8007cc8:	08007e67 	.word	0x08007e67
 8007ccc:	08007de5 	.word	0x08007de5
 8007cd0:	08007e67 	.word	0x08007e67
 8007cd4:	08007e67 	.word	0x08007e67
 8007cd8:	08007e67 	.word	0x08007e67
 8007cdc:	08007e25 	.word	0x08007e25
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	68b9      	ldr	r1, [r7, #8]
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f000 fa66 	bl	80081b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	699a      	ldr	r2, [r3, #24]
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f042 0208 	orr.w	r2, r2, #8
 8007cfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	699a      	ldr	r2, [r3, #24]
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f022 0204 	bic.w	r2, r2, #4
 8007d0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	6999      	ldr	r1, [r3, #24]
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	691a      	ldr	r2, [r3, #16]
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	430a      	orrs	r2, r1
 8007d1c:	619a      	str	r2, [r3, #24]
      break;
 8007d1e:	e0a5      	b.n	8007e6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	68b9      	ldr	r1, [r7, #8]
 8007d26:	4618      	mov	r0, r3
 8007d28:	f000 fab8 	bl	800829c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	699a      	ldr	r2, [r3, #24]
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	699a      	ldr	r2, [r3, #24]
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	6999      	ldr	r1, [r3, #24]
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	691b      	ldr	r3, [r3, #16]
 8007d56:	021a      	lsls	r2, r3, #8
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	430a      	orrs	r2, r1
 8007d5e:	619a      	str	r2, [r3, #24]
      break;
 8007d60:	e084      	b.n	8007e6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	68b9      	ldr	r1, [r7, #8]
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f000 fb0f 	bl	800838c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	69da      	ldr	r2, [r3, #28]
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f042 0208 	orr.w	r2, r2, #8
 8007d7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	69da      	ldr	r2, [r3, #28]
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f022 0204 	bic.w	r2, r2, #4
 8007d8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	69d9      	ldr	r1, [r3, #28]
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	691a      	ldr	r2, [r3, #16]
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	430a      	orrs	r2, r1
 8007d9e:	61da      	str	r2, [r3, #28]
      break;
 8007da0:	e064      	b.n	8007e6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	68b9      	ldr	r1, [r7, #8]
 8007da8:	4618      	mov	r0, r3
 8007daa:	f000 fb65 	bl	8008478 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	69da      	ldr	r2, [r3, #28]
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007dbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	69da      	ldr	r2, [r3, #28]
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007dcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	69d9      	ldr	r1, [r3, #28]
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	691b      	ldr	r3, [r3, #16]
 8007dd8:	021a      	lsls	r2, r3, #8
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	430a      	orrs	r2, r1
 8007de0:	61da      	str	r2, [r3, #28]
      break;
 8007de2:	e043      	b.n	8007e6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	68b9      	ldr	r1, [r7, #8]
 8007dea:	4618      	mov	r0, r3
 8007dec:	f000 fb9c 	bl	8008528 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f042 0208 	orr.w	r2, r2, #8
 8007dfe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f022 0204 	bic.w	r2, r2, #4
 8007e0e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	691a      	ldr	r2, [r3, #16]
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	430a      	orrs	r2, r1
 8007e20:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007e22:	e023      	b.n	8007e6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	68b9      	ldr	r1, [r7, #8]
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f000 fbce 	bl	80085cc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e3e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e4e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	691b      	ldr	r3, [r3, #16]
 8007e5a:	021a      	lsls	r2, r3, #8
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	430a      	orrs	r2, r1
 8007e62:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007e64:	e002      	b.n	8007e6c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007e66:	2301      	movs	r3, #1
 8007e68:	75fb      	strb	r3, [r7, #23]
      break;
 8007e6a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007e74:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3718      	adds	r7, #24
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}
 8007e7e:	bf00      	nop

08007e80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b084      	sub	sp, #16
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	d101      	bne.n	8007e9c <HAL_TIM_ConfigClockSource+0x1c>
 8007e98:	2302      	movs	r3, #2
 8007e9a:	e0b4      	b.n	8008006 <HAL_TIM_ConfigClockSource+0x186>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2202      	movs	r2, #2
 8007ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	689b      	ldr	r3, [r3, #8]
 8007eb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007eb4:	68ba      	ldr	r2, [r7, #8]
 8007eb6:	4b56      	ldr	r3, [pc, #344]	; (8008010 <HAL_TIM_ConfigClockSource+0x190>)
 8007eb8:	4013      	ands	r3, r2
 8007eba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007ec2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	68ba      	ldr	r2, [r7, #8]
 8007eca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ed4:	d03e      	beq.n	8007f54 <HAL_TIM_ConfigClockSource+0xd4>
 8007ed6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007eda:	f200 8087 	bhi.w	8007fec <HAL_TIM_ConfigClockSource+0x16c>
 8007ede:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ee2:	f000 8086 	beq.w	8007ff2 <HAL_TIM_ConfigClockSource+0x172>
 8007ee6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007eea:	d87f      	bhi.n	8007fec <HAL_TIM_ConfigClockSource+0x16c>
 8007eec:	2b70      	cmp	r3, #112	; 0x70
 8007eee:	d01a      	beq.n	8007f26 <HAL_TIM_ConfigClockSource+0xa6>
 8007ef0:	2b70      	cmp	r3, #112	; 0x70
 8007ef2:	d87b      	bhi.n	8007fec <HAL_TIM_ConfigClockSource+0x16c>
 8007ef4:	2b60      	cmp	r3, #96	; 0x60
 8007ef6:	d050      	beq.n	8007f9a <HAL_TIM_ConfigClockSource+0x11a>
 8007ef8:	2b60      	cmp	r3, #96	; 0x60
 8007efa:	d877      	bhi.n	8007fec <HAL_TIM_ConfigClockSource+0x16c>
 8007efc:	2b50      	cmp	r3, #80	; 0x50
 8007efe:	d03c      	beq.n	8007f7a <HAL_TIM_ConfigClockSource+0xfa>
 8007f00:	2b50      	cmp	r3, #80	; 0x50
 8007f02:	d873      	bhi.n	8007fec <HAL_TIM_ConfigClockSource+0x16c>
 8007f04:	2b40      	cmp	r3, #64	; 0x40
 8007f06:	d058      	beq.n	8007fba <HAL_TIM_ConfigClockSource+0x13a>
 8007f08:	2b40      	cmp	r3, #64	; 0x40
 8007f0a:	d86f      	bhi.n	8007fec <HAL_TIM_ConfigClockSource+0x16c>
 8007f0c:	2b30      	cmp	r3, #48	; 0x30
 8007f0e:	d064      	beq.n	8007fda <HAL_TIM_ConfigClockSource+0x15a>
 8007f10:	2b30      	cmp	r3, #48	; 0x30
 8007f12:	d86b      	bhi.n	8007fec <HAL_TIM_ConfigClockSource+0x16c>
 8007f14:	2b20      	cmp	r3, #32
 8007f16:	d060      	beq.n	8007fda <HAL_TIM_ConfigClockSource+0x15a>
 8007f18:	2b20      	cmp	r3, #32
 8007f1a:	d867      	bhi.n	8007fec <HAL_TIM_ConfigClockSource+0x16c>
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d05c      	beq.n	8007fda <HAL_TIM_ConfigClockSource+0x15a>
 8007f20:	2b10      	cmp	r3, #16
 8007f22:	d05a      	beq.n	8007fda <HAL_TIM_ConfigClockSource+0x15a>
 8007f24:	e062      	b.n	8007fec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6818      	ldr	r0, [r3, #0]
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	6899      	ldr	r1, [r3, #8]
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	685a      	ldr	r2, [r3, #4]
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	68db      	ldr	r3, [r3, #12]
 8007f36:	f000 fc17 	bl	8008768 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	689b      	ldr	r3, [r3, #8]
 8007f40:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007f48:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	68ba      	ldr	r2, [r7, #8]
 8007f50:	609a      	str	r2, [r3, #8]
      break;
 8007f52:	e04f      	b.n	8007ff4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6818      	ldr	r0, [r3, #0]
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	6899      	ldr	r1, [r3, #8]
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	685a      	ldr	r2, [r3, #4]
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	68db      	ldr	r3, [r3, #12]
 8007f64:	f000 fc00 	bl	8008768 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	689a      	ldr	r2, [r3, #8]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007f76:	609a      	str	r2, [r3, #8]
      break;
 8007f78:	e03c      	b.n	8007ff4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6818      	ldr	r0, [r3, #0]
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	6859      	ldr	r1, [r3, #4]
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	68db      	ldr	r3, [r3, #12]
 8007f86:	461a      	mov	r2, r3
 8007f88:	f000 fb74 	bl	8008674 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	2150      	movs	r1, #80	; 0x50
 8007f92:	4618      	mov	r0, r3
 8007f94:	f000 fbcd 	bl	8008732 <TIM_ITRx_SetConfig>
      break;
 8007f98:	e02c      	b.n	8007ff4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6818      	ldr	r0, [r3, #0]
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	6859      	ldr	r1, [r3, #4]
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	68db      	ldr	r3, [r3, #12]
 8007fa6:	461a      	mov	r2, r3
 8007fa8:	f000 fb93 	bl	80086d2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	2160      	movs	r1, #96	; 0x60
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f000 fbbd 	bl	8008732 <TIM_ITRx_SetConfig>
      break;
 8007fb8:	e01c      	b.n	8007ff4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6818      	ldr	r0, [r3, #0]
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	6859      	ldr	r1, [r3, #4]
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	68db      	ldr	r3, [r3, #12]
 8007fc6:	461a      	mov	r2, r3
 8007fc8:	f000 fb54 	bl	8008674 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	2140      	movs	r1, #64	; 0x40
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f000 fbad 	bl	8008732 <TIM_ITRx_SetConfig>
      break;
 8007fd8:	e00c      	b.n	8007ff4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681a      	ldr	r2, [r3, #0]
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4619      	mov	r1, r3
 8007fe4:	4610      	mov	r0, r2
 8007fe6:	f000 fba4 	bl	8008732 <TIM_ITRx_SetConfig>
      break;
 8007fea:	e003      	b.n	8007ff4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007fec:	2301      	movs	r3, #1
 8007fee:	73fb      	strb	r3, [r7, #15]
      break;
 8007ff0:	e000      	b.n	8007ff4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007ff2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2200      	movs	r2, #0
 8008000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008004:	7bfb      	ldrb	r3, [r7, #15]
}
 8008006:	4618      	mov	r0, r3
 8008008:	3710      	adds	r7, #16
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}
 800800e:	bf00      	nop
 8008010:	fffeff88 	.word	0xfffeff88

08008014 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008014:	b480      	push	{r7}
 8008016:	b083      	sub	sp, #12
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800801c:	bf00      	nop
 800801e:	370c      	adds	r7, #12
 8008020:	46bd      	mov	sp, r7
 8008022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008026:	4770      	bx	lr

08008028 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008028:	b480      	push	{r7}
 800802a:	b083      	sub	sp, #12
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008030:	bf00      	nop
 8008032:	370c      	adds	r7, #12
 8008034:	46bd      	mov	sp, r7
 8008036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803a:	4770      	bx	lr

0800803c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800803c:	b480      	push	{r7}
 800803e:	b083      	sub	sp, #12
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008044:	bf00      	nop
 8008046:	370c      	adds	r7, #12
 8008048:	46bd      	mov	sp, r7
 800804a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804e:	4770      	bx	lr

08008050 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008050:	b480      	push	{r7}
 8008052:	b083      	sub	sp, #12
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008058:	bf00      	nop
 800805a:	370c      	adds	r7, #12
 800805c:	46bd      	mov	sp, r7
 800805e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008062:	4770      	bx	lr

08008064 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008064:	b480      	push	{r7}
 8008066:	b083      	sub	sp, #12
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800806c:	bf00      	nop
 800806e:	370c      	adds	r7, #12
 8008070:	46bd      	mov	sp, r7
 8008072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008076:	4770      	bx	lr

08008078 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008078:	b480      	push	{r7}
 800807a:	b085      	sub	sp, #20
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	4a40      	ldr	r2, [pc, #256]	; (800818c <TIM_Base_SetConfig+0x114>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d013      	beq.n	80080b8 <TIM_Base_SetConfig+0x40>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008096:	d00f      	beq.n	80080b8 <TIM_Base_SetConfig+0x40>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	4a3d      	ldr	r2, [pc, #244]	; (8008190 <TIM_Base_SetConfig+0x118>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d00b      	beq.n	80080b8 <TIM_Base_SetConfig+0x40>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	4a3c      	ldr	r2, [pc, #240]	; (8008194 <TIM_Base_SetConfig+0x11c>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d007      	beq.n	80080b8 <TIM_Base_SetConfig+0x40>
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	4a3b      	ldr	r2, [pc, #236]	; (8008198 <TIM_Base_SetConfig+0x120>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d003      	beq.n	80080b8 <TIM_Base_SetConfig+0x40>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	4a3a      	ldr	r2, [pc, #232]	; (800819c <TIM_Base_SetConfig+0x124>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d108      	bne.n	80080ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	685b      	ldr	r3, [r3, #4]
 80080c4:	68fa      	ldr	r2, [r7, #12]
 80080c6:	4313      	orrs	r3, r2
 80080c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	4a2f      	ldr	r2, [pc, #188]	; (800818c <TIM_Base_SetConfig+0x114>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d02b      	beq.n	800812a <TIM_Base_SetConfig+0xb2>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080d8:	d027      	beq.n	800812a <TIM_Base_SetConfig+0xb2>
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	4a2c      	ldr	r2, [pc, #176]	; (8008190 <TIM_Base_SetConfig+0x118>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d023      	beq.n	800812a <TIM_Base_SetConfig+0xb2>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	4a2b      	ldr	r2, [pc, #172]	; (8008194 <TIM_Base_SetConfig+0x11c>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d01f      	beq.n	800812a <TIM_Base_SetConfig+0xb2>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	4a2a      	ldr	r2, [pc, #168]	; (8008198 <TIM_Base_SetConfig+0x120>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d01b      	beq.n	800812a <TIM_Base_SetConfig+0xb2>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	4a29      	ldr	r2, [pc, #164]	; (800819c <TIM_Base_SetConfig+0x124>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d017      	beq.n	800812a <TIM_Base_SetConfig+0xb2>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	4a28      	ldr	r2, [pc, #160]	; (80081a0 <TIM_Base_SetConfig+0x128>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d013      	beq.n	800812a <TIM_Base_SetConfig+0xb2>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	4a27      	ldr	r2, [pc, #156]	; (80081a4 <TIM_Base_SetConfig+0x12c>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d00f      	beq.n	800812a <TIM_Base_SetConfig+0xb2>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	4a26      	ldr	r2, [pc, #152]	; (80081a8 <TIM_Base_SetConfig+0x130>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d00b      	beq.n	800812a <TIM_Base_SetConfig+0xb2>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	4a25      	ldr	r2, [pc, #148]	; (80081ac <TIM_Base_SetConfig+0x134>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d007      	beq.n	800812a <TIM_Base_SetConfig+0xb2>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	4a24      	ldr	r2, [pc, #144]	; (80081b0 <TIM_Base_SetConfig+0x138>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d003      	beq.n	800812a <TIM_Base_SetConfig+0xb2>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	4a23      	ldr	r2, [pc, #140]	; (80081b4 <TIM_Base_SetConfig+0x13c>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d108      	bne.n	800813c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008130:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	68db      	ldr	r3, [r3, #12]
 8008136:	68fa      	ldr	r2, [r7, #12]
 8008138:	4313      	orrs	r3, r2
 800813a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	695b      	ldr	r3, [r3, #20]
 8008146:	4313      	orrs	r3, r2
 8008148:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	68fa      	ldr	r2, [r7, #12]
 800814e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	689a      	ldr	r2, [r3, #8]
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	681a      	ldr	r2, [r3, #0]
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	4a0a      	ldr	r2, [pc, #40]	; (800818c <TIM_Base_SetConfig+0x114>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d003      	beq.n	8008170 <TIM_Base_SetConfig+0xf8>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	4a0c      	ldr	r2, [pc, #48]	; (800819c <TIM_Base_SetConfig+0x124>)
 800816c:	4293      	cmp	r3, r2
 800816e:	d103      	bne.n	8008178 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	691a      	ldr	r2, [r3, #16]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2201      	movs	r2, #1
 800817c:	615a      	str	r2, [r3, #20]
}
 800817e:	bf00      	nop
 8008180:	3714      	adds	r7, #20
 8008182:	46bd      	mov	sp, r7
 8008184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008188:	4770      	bx	lr
 800818a:	bf00      	nop
 800818c:	40010000 	.word	0x40010000
 8008190:	40000400 	.word	0x40000400
 8008194:	40000800 	.word	0x40000800
 8008198:	40000c00 	.word	0x40000c00
 800819c:	40010400 	.word	0x40010400
 80081a0:	40014000 	.word	0x40014000
 80081a4:	40014400 	.word	0x40014400
 80081a8:	40014800 	.word	0x40014800
 80081ac:	40001800 	.word	0x40001800
 80081b0:	40001c00 	.word	0x40001c00
 80081b4:	40002000 	.word	0x40002000

080081b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b087      	sub	sp, #28
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6a1b      	ldr	r3, [r3, #32]
 80081c6:	f023 0201 	bic.w	r2, r3, #1
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6a1b      	ldr	r3, [r3, #32]
 80081d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	685b      	ldr	r3, [r3, #4]
 80081d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	699b      	ldr	r3, [r3, #24]
 80081de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80081e0:	68fa      	ldr	r2, [r7, #12]
 80081e2:	4b2b      	ldr	r3, [pc, #172]	; (8008290 <TIM_OC1_SetConfig+0xd8>)
 80081e4:	4013      	ands	r3, r2
 80081e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	f023 0303 	bic.w	r3, r3, #3
 80081ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	68fa      	ldr	r2, [r7, #12]
 80081f6:	4313      	orrs	r3, r2
 80081f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	f023 0302 	bic.w	r3, r3, #2
 8008200:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	689b      	ldr	r3, [r3, #8]
 8008206:	697a      	ldr	r2, [r7, #20]
 8008208:	4313      	orrs	r3, r2
 800820a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	4a21      	ldr	r2, [pc, #132]	; (8008294 <TIM_OC1_SetConfig+0xdc>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d003      	beq.n	800821c <TIM_OC1_SetConfig+0x64>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	4a20      	ldr	r2, [pc, #128]	; (8008298 <TIM_OC1_SetConfig+0xe0>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d10c      	bne.n	8008236 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	f023 0308 	bic.w	r3, r3, #8
 8008222:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	68db      	ldr	r3, [r3, #12]
 8008228:	697a      	ldr	r2, [r7, #20]
 800822a:	4313      	orrs	r3, r2
 800822c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	f023 0304 	bic.w	r3, r3, #4
 8008234:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	4a16      	ldr	r2, [pc, #88]	; (8008294 <TIM_OC1_SetConfig+0xdc>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d003      	beq.n	8008246 <TIM_OC1_SetConfig+0x8e>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	4a15      	ldr	r2, [pc, #84]	; (8008298 <TIM_OC1_SetConfig+0xe0>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d111      	bne.n	800826a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008246:	693b      	ldr	r3, [r7, #16]
 8008248:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800824c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008254:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	695b      	ldr	r3, [r3, #20]
 800825a:	693a      	ldr	r2, [r7, #16]
 800825c:	4313      	orrs	r3, r2
 800825e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	699b      	ldr	r3, [r3, #24]
 8008264:	693a      	ldr	r2, [r7, #16]
 8008266:	4313      	orrs	r3, r2
 8008268:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	693a      	ldr	r2, [r7, #16]
 800826e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	68fa      	ldr	r2, [r7, #12]
 8008274:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	685a      	ldr	r2, [r3, #4]
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	697a      	ldr	r2, [r7, #20]
 8008282:	621a      	str	r2, [r3, #32]
}
 8008284:	bf00      	nop
 8008286:	371c      	adds	r7, #28
 8008288:	46bd      	mov	sp, r7
 800828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828e:	4770      	bx	lr
 8008290:	fffeff8f 	.word	0xfffeff8f
 8008294:	40010000 	.word	0x40010000
 8008298:	40010400 	.word	0x40010400

0800829c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800829c:	b480      	push	{r7}
 800829e:	b087      	sub	sp, #28
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6a1b      	ldr	r3, [r3, #32]
 80082aa:	f023 0210 	bic.w	r2, r3, #16
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6a1b      	ldr	r3, [r3, #32]
 80082b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	685b      	ldr	r3, [r3, #4]
 80082bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	699b      	ldr	r3, [r3, #24]
 80082c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80082c4:	68fa      	ldr	r2, [r7, #12]
 80082c6:	4b2e      	ldr	r3, [pc, #184]	; (8008380 <TIM_OC2_SetConfig+0xe4>)
 80082c8:	4013      	ands	r3, r2
 80082ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	021b      	lsls	r3, r3, #8
 80082da:	68fa      	ldr	r2, [r7, #12]
 80082dc:	4313      	orrs	r3, r2
 80082de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80082e0:	697b      	ldr	r3, [r7, #20]
 80082e2:	f023 0320 	bic.w	r3, r3, #32
 80082e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	689b      	ldr	r3, [r3, #8]
 80082ec:	011b      	lsls	r3, r3, #4
 80082ee:	697a      	ldr	r2, [r7, #20]
 80082f0:	4313      	orrs	r3, r2
 80082f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	4a23      	ldr	r2, [pc, #140]	; (8008384 <TIM_OC2_SetConfig+0xe8>)
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d003      	beq.n	8008304 <TIM_OC2_SetConfig+0x68>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	4a22      	ldr	r2, [pc, #136]	; (8008388 <TIM_OC2_SetConfig+0xec>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d10d      	bne.n	8008320 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800830a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	68db      	ldr	r3, [r3, #12]
 8008310:	011b      	lsls	r3, r3, #4
 8008312:	697a      	ldr	r2, [r7, #20]
 8008314:	4313      	orrs	r3, r2
 8008316:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008318:	697b      	ldr	r3, [r7, #20]
 800831a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800831e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	4a18      	ldr	r2, [pc, #96]	; (8008384 <TIM_OC2_SetConfig+0xe8>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d003      	beq.n	8008330 <TIM_OC2_SetConfig+0x94>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	4a17      	ldr	r2, [pc, #92]	; (8008388 <TIM_OC2_SetConfig+0xec>)
 800832c:	4293      	cmp	r3, r2
 800832e:	d113      	bne.n	8008358 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008330:	693b      	ldr	r3, [r7, #16]
 8008332:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008336:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008338:	693b      	ldr	r3, [r7, #16]
 800833a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800833e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	695b      	ldr	r3, [r3, #20]
 8008344:	009b      	lsls	r3, r3, #2
 8008346:	693a      	ldr	r2, [r7, #16]
 8008348:	4313      	orrs	r3, r2
 800834a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	699b      	ldr	r3, [r3, #24]
 8008350:	009b      	lsls	r3, r3, #2
 8008352:	693a      	ldr	r2, [r7, #16]
 8008354:	4313      	orrs	r3, r2
 8008356:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	693a      	ldr	r2, [r7, #16]
 800835c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	68fa      	ldr	r2, [r7, #12]
 8008362:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	685a      	ldr	r2, [r3, #4]
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	697a      	ldr	r2, [r7, #20]
 8008370:	621a      	str	r2, [r3, #32]
}
 8008372:	bf00      	nop
 8008374:	371c      	adds	r7, #28
 8008376:	46bd      	mov	sp, r7
 8008378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837c:	4770      	bx	lr
 800837e:	bf00      	nop
 8008380:	feff8fff 	.word	0xfeff8fff
 8008384:	40010000 	.word	0x40010000
 8008388:	40010400 	.word	0x40010400

0800838c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800838c:	b480      	push	{r7}
 800838e:	b087      	sub	sp, #28
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
 8008394:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6a1b      	ldr	r3, [r3, #32]
 800839a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6a1b      	ldr	r3, [r3, #32]
 80083a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	685b      	ldr	r3, [r3, #4]
 80083ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	69db      	ldr	r3, [r3, #28]
 80083b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80083b4:	68fa      	ldr	r2, [r7, #12]
 80083b6:	4b2d      	ldr	r3, [pc, #180]	; (800846c <TIM_OC3_SetConfig+0xe0>)
 80083b8:	4013      	ands	r3, r2
 80083ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	f023 0303 	bic.w	r3, r3, #3
 80083c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	68fa      	ldr	r2, [r7, #12]
 80083ca:	4313      	orrs	r3, r2
 80083cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80083d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	689b      	ldr	r3, [r3, #8]
 80083da:	021b      	lsls	r3, r3, #8
 80083dc:	697a      	ldr	r2, [r7, #20]
 80083de:	4313      	orrs	r3, r2
 80083e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	4a22      	ldr	r2, [pc, #136]	; (8008470 <TIM_OC3_SetConfig+0xe4>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d003      	beq.n	80083f2 <TIM_OC3_SetConfig+0x66>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	4a21      	ldr	r2, [pc, #132]	; (8008474 <TIM_OC3_SetConfig+0xe8>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d10d      	bne.n	800840e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80083f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	68db      	ldr	r3, [r3, #12]
 80083fe:	021b      	lsls	r3, r3, #8
 8008400:	697a      	ldr	r2, [r7, #20]
 8008402:	4313      	orrs	r3, r2
 8008404:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800840c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	4a17      	ldr	r2, [pc, #92]	; (8008470 <TIM_OC3_SetConfig+0xe4>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d003      	beq.n	800841e <TIM_OC3_SetConfig+0x92>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	4a16      	ldr	r2, [pc, #88]	; (8008474 <TIM_OC3_SetConfig+0xe8>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d113      	bne.n	8008446 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800841e:	693b      	ldr	r3, [r7, #16]
 8008420:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008424:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008426:	693b      	ldr	r3, [r7, #16]
 8008428:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800842c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	695b      	ldr	r3, [r3, #20]
 8008432:	011b      	lsls	r3, r3, #4
 8008434:	693a      	ldr	r2, [r7, #16]
 8008436:	4313      	orrs	r3, r2
 8008438:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	699b      	ldr	r3, [r3, #24]
 800843e:	011b      	lsls	r3, r3, #4
 8008440:	693a      	ldr	r2, [r7, #16]
 8008442:	4313      	orrs	r3, r2
 8008444:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	693a      	ldr	r2, [r7, #16]
 800844a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	68fa      	ldr	r2, [r7, #12]
 8008450:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	685a      	ldr	r2, [r3, #4]
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	697a      	ldr	r2, [r7, #20]
 800845e:	621a      	str	r2, [r3, #32]
}
 8008460:	bf00      	nop
 8008462:	371c      	adds	r7, #28
 8008464:	46bd      	mov	sp, r7
 8008466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846a:	4770      	bx	lr
 800846c:	fffeff8f 	.word	0xfffeff8f
 8008470:	40010000 	.word	0x40010000
 8008474:	40010400 	.word	0x40010400

08008478 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008478:	b480      	push	{r7}
 800847a:	b087      	sub	sp, #28
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
 8008480:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6a1b      	ldr	r3, [r3, #32]
 8008486:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6a1b      	ldr	r3, [r3, #32]
 8008492:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	685b      	ldr	r3, [r3, #4]
 8008498:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	69db      	ldr	r3, [r3, #28]
 800849e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80084a0:	68fa      	ldr	r2, [r7, #12]
 80084a2:	4b1e      	ldr	r3, [pc, #120]	; (800851c <TIM_OC4_SetConfig+0xa4>)
 80084a4:	4013      	ands	r3, r2
 80084a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80084ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	021b      	lsls	r3, r3, #8
 80084b6:	68fa      	ldr	r2, [r7, #12]
 80084b8:	4313      	orrs	r3, r2
 80084ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80084c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	689b      	ldr	r3, [r3, #8]
 80084c8:	031b      	lsls	r3, r3, #12
 80084ca:	693a      	ldr	r2, [r7, #16]
 80084cc:	4313      	orrs	r3, r2
 80084ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	4a13      	ldr	r2, [pc, #76]	; (8008520 <TIM_OC4_SetConfig+0xa8>)
 80084d4:	4293      	cmp	r3, r2
 80084d6:	d003      	beq.n	80084e0 <TIM_OC4_SetConfig+0x68>
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	4a12      	ldr	r2, [pc, #72]	; (8008524 <TIM_OC4_SetConfig+0xac>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d109      	bne.n	80084f4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80084e0:	697b      	ldr	r3, [r7, #20]
 80084e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80084e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	695b      	ldr	r3, [r3, #20]
 80084ec:	019b      	lsls	r3, r3, #6
 80084ee:	697a      	ldr	r2, [r7, #20]
 80084f0:	4313      	orrs	r3, r2
 80084f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	697a      	ldr	r2, [r7, #20]
 80084f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	68fa      	ldr	r2, [r7, #12]
 80084fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	685a      	ldr	r2, [r3, #4]
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	693a      	ldr	r2, [r7, #16]
 800850c:	621a      	str	r2, [r3, #32]
}
 800850e:	bf00      	nop
 8008510:	371c      	adds	r7, #28
 8008512:	46bd      	mov	sp, r7
 8008514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008518:	4770      	bx	lr
 800851a:	bf00      	nop
 800851c:	feff8fff 	.word	0xfeff8fff
 8008520:	40010000 	.word	0x40010000
 8008524:	40010400 	.word	0x40010400

08008528 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008528:	b480      	push	{r7}
 800852a:	b087      	sub	sp, #28
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6a1b      	ldr	r3, [r3, #32]
 8008536:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6a1b      	ldr	r3, [r3, #32]
 8008542:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800854e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008550:	68fa      	ldr	r2, [r7, #12]
 8008552:	4b1b      	ldr	r3, [pc, #108]	; (80085c0 <TIM_OC5_SetConfig+0x98>)
 8008554:	4013      	ands	r3, r2
 8008556:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	68fa      	ldr	r2, [r7, #12]
 800855e:	4313      	orrs	r3, r2
 8008560:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008562:	693b      	ldr	r3, [r7, #16]
 8008564:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008568:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	689b      	ldr	r3, [r3, #8]
 800856e:	041b      	lsls	r3, r3, #16
 8008570:	693a      	ldr	r2, [r7, #16]
 8008572:	4313      	orrs	r3, r2
 8008574:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	4a12      	ldr	r2, [pc, #72]	; (80085c4 <TIM_OC5_SetConfig+0x9c>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d003      	beq.n	8008586 <TIM_OC5_SetConfig+0x5e>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	4a11      	ldr	r2, [pc, #68]	; (80085c8 <TIM_OC5_SetConfig+0xa0>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d109      	bne.n	800859a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800858c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	695b      	ldr	r3, [r3, #20]
 8008592:	021b      	lsls	r3, r3, #8
 8008594:	697a      	ldr	r2, [r7, #20]
 8008596:	4313      	orrs	r3, r2
 8008598:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	697a      	ldr	r2, [r7, #20]
 800859e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	68fa      	ldr	r2, [r7, #12]
 80085a4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	685a      	ldr	r2, [r3, #4]
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	693a      	ldr	r2, [r7, #16]
 80085b2:	621a      	str	r2, [r3, #32]
}
 80085b4:	bf00      	nop
 80085b6:	371c      	adds	r7, #28
 80085b8:	46bd      	mov	sp, r7
 80085ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085be:	4770      	bx	lr
 80085c0:	fffeff8f 	.word	0xfffeff8f
 80085c4:	40010000 	.word	0x40010000
 80085c8:	40010400 	.word	0x40010400

080085cc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80085cc:	b480      	push	{r7}
 80085ce:	b087      	sub	sp, #28
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
 80085d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6a1b      	ldr	r3, [r3, #32]
 80085da:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6a1b      	ldr	r3, [r3, #32]
 80085e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	685b      	ldr	r3, [r3, #4]
 80085ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80085f4:	68fa      	ldr	r2, [r7, #12]
 80085f6:	4b1c      	ldr	r3, [pc, #112]	; (8008668 <TIM_OC6_SetConfig+0x9c>)
 80085f8:	4013      	ands	r3, r2
 80085fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	021b      	lsls	r3, r3, #8
 8008602:	68fa      	ldr	r2, [r7, #12]
 8008604:	4313      	orrs	r3, r2
 8008606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008608:	693b      	ldr	r3, [r7, #16]
 800860a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800860e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	689b      	ldr	r3, [r3, #8]
 8008614:	051b      	lsls	r3, r3, #20
 8008616:	693a      	ldr	r2, [r7, #16]
 8008618:	4313      	orrs	r3, r2
 800861a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	4a13      	ldr	r2, [pc, #76]	; (800866c <TIM_OC6_SetConfig+0xa0>)
 8008620:	4293      	cmp	r3, r2
 8008622:	d003      	beq.n	800862c <TIM_OC6_SetConfig+0x60>
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	4a12      	ldr	r2, [pc, #72]	; (8008670 <TIM_OC6_SetConfig+0xa4>)
 8008628:	4293      	cmp	r3, r2
 800862a:	d109      	bne.n	8008640 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008632:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	695b      	ldr	r3, [r3, #20]
 8008638:	029b      	lsls	r3, r3, #10
 800863a:	697a      	ldr	r2, [r7, #20]
 800863c:	4313      	orrs	r3, r2
 800863e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	697a      	ldr	r2, [r7, #20]
 8008644:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	68fa      	ldr	r2, [r7, #12]
 800864a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	685a      	ldr	r2, [r3, #4]
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	693a      	ldr	r2, [r7, #16]
 8008658:	621a      	str	r2, [r3, #32]
}
 800865a:	bf00      	nop
 800865c:	371c      	adds	r7, #28
 800865e:	46bd      	mov	sp, r7
 8008660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008664:	4770      	bx	lr
 8008666:	bf00      	nop
 8008668:	feff8fff 	.word	0xfeff8fff
 800866c:	40010000 	.word	0x40010000
 8008670:	40010400 	.word	0x40010400

08008674 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008674:	b480      	push	{r7}
 8008676:	b087      	sub	sp, #28
 8008678:	af00      	add	r7, sp, #0
 800867a:	60f8      	str	r0, [r7, #12]
 800867c:	60b9      	str	r1, [r7, #8]
 800867e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	6a1b      	ldr	r3, [r3, #32]
 8008684:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	6a1b      	ldr	r3, [r3, #32]
 800868a:	f023 0201 	bic.w	r2, r3, #1
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	699b      	ldr	r3, [r3, #24]
 8008696:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008698:	693b      	ldr	r3, [r7, #16]
 800869a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800869e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	011b      	lsls	r3, r3, #4
 80086a4:	693a      	ldr	r2, [r7, #16]
 80086a6:	4313      	orrs	r3, r2
 80086a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	f023 030a 	bic.w	r3, r3, #10
 80086b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80086b2:	697a      	ldr	r2, [r7, #20]
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	4313      	orrs	r3, r2
 80086b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	693a      	ldr	r2, [r7, #16]
 80086be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	697a      	ldr	r2, [r7, #20]
 80086c4:	621a      	str	r2, [r3, #32]
}
 80086c6:	bf00      	nop
 80086c8:	371c      	adds	r7, #28
 80086ca:	46bd      	mov	sp, r7
 80086cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d0:	4770      	bx	lr

080086d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80086d2:	b480      	push	{r7}
 80086d4:	b087      	sub	sp, #28
 80086d6:	af00      	add	r7, sp, #0
 80086d8:	60f8      	str	r0, [r7, #12]
 80086da:	60b9      	str	r1, [r7, #8]
 80086dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	6a1b      	ldr	r3, [r3, #32]
 80086e2:	f023 0210 	bic.w	r2, r3, #16
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	699b      	ldr	r3, [r3, #24]
 80086ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	6a1b      	ldr	r3, [r3, #32]
 80086f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80086fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	031b      	lsls	r3, r3, #12
 8008702:	697a      	ldr	r2, [r7, #20]
 8008704:	4313      	orrs	r3, r2
 8008706:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800870e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	011b      	lsls	r3, r3, #4
 8008714:	693a      	ldr	r2, [r7, #16]
 8008716:	4313      	orrs	r3, r2
 8008718:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	697a      	ldr	r2, [r7, #20]
 800871e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	693a      	ldr	r2, [r7, #16]
 8008724:	621a      	str	r2, [r3, #32]
}
 8008726:	bf00      	nop
 8008728:	371c      	adds	r7, #28
 800872a:	46bd      	mov	sp, r7
 800872c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008730:	4770      	bx	lr

08008732 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008732:	b480      	push	{r7}
 8008734:	b085      	sub	sp, #20
 8008736:	af00      	add	r7, sp, #0
 8008738:	6078      	str	r0, [r7, #4]
 800873a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	689b      	ldr	r3, [r3, #8]
 8008740:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008748:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800874a:	683a      	ldr	r2, [r7, #0]
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	4313      	orrs	r3, r2
 8008750:	f043 0307 	orr.w	r3, r3, #7
 8008754:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	68fa      	ldr	r2, [r7, #12]
 800875a:	609a      	str	r2, [r3, #8]
}
 800875c:	bf00      	nop
 800875e:	3714      	adds	r7, #20
 8008760:	46bd      	mov	sp, r7
 8008762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008766:	4770      	bx	lr

08008768 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008768:	b480      	push	{r7}
 800876a:	b087      	sub	sp, #28
 800876c:	af00      	add	r7, sp, #0
 800876e:	60f8      	str	r0, [r7, #12]
 8008770:	60b9      	str	r1, [r7, #8]
 8008772:	607a      	str	r2, [r7, #4]
 8008774:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	689b      	ldr	r3, [r3, #8]
 800877a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008782:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	021a      	lsls	r2, r3, #8
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	431a      	orrs	r2, r3
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	4313      	orrs	r3, r2
 8008790:	697a      	ldr	r2, [r7, #20]
 8008792:	4313      	orrs	r3, r2
 8008794:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	697a      	ldr	r2, [r7, #20]
 800879a:	609a      	str	r2, [r3, #8]
}
 800879c:	bf00      	nop
 800879e:	371c      	adds	r7, #28
 80087a0:	46bd      	mov	sp, r7
 80087a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a6:	4770      	bx	lr

080087a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80087a8:	b480      	push	{r7}
 80087aa:	b087      	sub	sp, #28
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	60f8      	str	r0, [r7, #12]
 80087b0:	60b9      	str	r1, [r7, #8]
 80087b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	f003 031f 	and.w	r3, r3, #31
 80087ba:	2201      	movs	r2, #1
 80087bc:	fa02 f303 	lsl.w	r3, r2, r3
 80087c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	6a1a      	ldr	r2, [r3, #32]
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	43db      	mvns	r3, r3
 80087ca:	401a      	ands	r2, r3
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	6a1a      	ldr	r2, [r3, #32]
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	f003 031f 	and.w	r3, r3, #31
 80087da:	6879      	ldr	r1, [r7, #4]
 80087dc:	fa01 f303 	lsl.w	r3, r1, r3
 80087e0:	431a      	orrs	r2, r3
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	621a      	str	r2, [r3, #32]
}
 80087e6:	bf00      	nop
 80087e8:	371c      	adds	r7, #28
 80087ea:	46bd      	mov	sp, r7
 80087ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f0:	4770      	bx	lr
	...

080087f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80087f4:	b480      	push	{r7}
 80087f6:	b085      	sub	sp, #20
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
 80087fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008804:	2b01      	cmp	r3, #1
 8008806:	d101      	bne.n	800880c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008808:	2302      	movs	r3, #2
 800880a:	e06d      	b.n	80088e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2201      	movs	r2, #1
 8008810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2202      	movs	r2, #2
 8008818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	685b      	ldr	r3, [r3, #4]
 8008822:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	689b      	ldr	r3, [r3, #8]
 800882a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4a30      	ldr	r2, [pc, #192]	; (80088f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d004      	beq.n	8008840 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4a2f      	ldr	r2, [pc, #188]	; (80088f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d108      	bne.n	8008852 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008846:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	685b      	ldr	r3, [r3, #4]
 800884c:	68fa      	ldr	r2, [r7, #12]
 800884e:	4313      	orrs	r3, r2
 8008850:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008858:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	68fa      	ldr	r2, [r7, #12]
 8008860:	4313      	orrs	r3, r2
 8008862:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	68fa      	ldr	r2, [r7, #12]
 800886a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4a20      	ldr	r2, [pc, #128]	; (80088f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008872:	4293      	cmp	r3, r2
 8008874:	d022      	beq.n	80088bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800887e:	d01d      	beq.n	80088bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4a1d      	ldr	r2, [pc, #116]	; (80088fc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d018      	beq.n	80088bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	4a1c      	ldr	r2, [pc, #112]	; (8008900 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d013      	beq.n	80088bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	4a1a      	ldr	r2, [pc, #104]	; (8008904 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d00e      	beq.n	80088bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4a15      	ldr	r2, [pc, #84]	; (80088f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d009      	beq.n	80088bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4a16      	ldr	r2, [pc, #88]	; (8008908 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d004      	beq.n	80088bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	4a15      	ldr	r2, [pc, #84]	; (800890c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d10c      	bne.n	80088d6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80088c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	689b      	ldr	r3, [r3, #8]
 80088c8:	68ba      	ldr	r2, [r7, #8]
 80088ca:	4313      	orrs	r3, r2
 80088cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	68ba      	ldr	r2, [r7, #8]
 80088d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2201      	movs	r2, #1
 80088da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2200      	movs	r2, #0
 80088e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80088e6:	2300      	movs	r3, #0
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	3714      	adds	r7, #20
 80088ec:	46bd      	mov	sp, r7
 80088ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f2:	4770      	bx	lr
 80088f4:	40010000 	.word	0x40010000
 80088f8:	40010400 	.word	0x40010400
 80088fc:	40000400 	.word	0x40000400
 8008900:	40000800 	.word	0x40000800
 8008904:	40000c00 	.word	0x40000c00
 8008908:	40014000 	.word	0x40014000
 800890c:	40001800 	.word	0x40001800

08008910 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008910:	b480      	push	{r7}
 8008912:	b083      	sub	sp, #12
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008918:	bf00      	nop
 800891a:	370c      	adds	r7, #12
 800891c:	46bd      	mov	sp, r7
 800891e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008922:	4770      	bx	lr

08008924 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008924:	b480      	push	{r7}
 8008926:	b083      	sub	sp, #12
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800892c:	bf00      	nop
 800892e:	370c      	adds	r7, #12
 8008930:	46bd      	mov	sp, r7
 8008932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008936:	4770      	bx	lr

08008938 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008938:	b480      	push	{r7}
 800893a:	b083      	sub	sp, #12
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008940:	bf00      	nop
 8008942:	370c      	adds	r7, #12
 8008944:	46bd      	mov	sp, r7
 8008946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894a:	4770      	bx	lr

0800894c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b082      	sub	sp, #8
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d101      	bne.n	800895e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800895a:	2301      	movs	r3, #1
 800895c:	e040      	b.n	80089e0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008962:	2b00      	cmp	r3, #0
 8008964:	d106      	bne.n	8008974 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2200      	movs	r2, #0
 800896a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f7fb faac 	bl	8003ecc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2224      	movs	r2, #36	; 0x24
 8008978:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	681a      	ldr	r2, [r3, #0]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f022 0201 	bic.w	r2, r2, #1
 8008988:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f000 fc66 	bl	800925c <UART_SetConfig>
 8008990:	4603      	mov	r3, r0
 8008992:	2b01      	cmp	r3, #1
 8008994:	d101      	bne.n	800899a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008996:	2301      	movs	r3, #1
 8008998:	e022      	b.n	80089e0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d002      	beq.n	80089a8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f000 febe 	bl	8009724 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	685a      	ldr	r2, [r3, #4]
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80089b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	689a      	ldr	r2, [r3, #8]
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80089c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	681a      	ldr	r2, [r3, #0]
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f042 0201 	orr.w	r2, r2, #1
 80089d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f000 ff45 	bl	8009868 <UART_CheckIdleState>
 80089de:	4603      	mov	r3, r0
}
 80089e0:	4618      	mov	r0, r3
 80089e2:	3708      	adds	r7, #8
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd80      	pop	{r7, pc}

080089e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b08a      	sub	sp, #40	; 0x28
 80089ec:	af02      	add	r7, sp, #8
 80089ee:	60f8      	str	r0, [r7, #12]
 80089f0:	60b9      	str	r1, [r7, #8]
 80089f2:	603b      	str	r3, [r7, #0]
 80089f4:	4613      	mov	r3, r2
 80089f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80089fc:	2b20      	cmp	r3, #32
 80089fe:	d171      	bne.n	8008ae4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d002      	beq.n	8008a0c <HAL_UART_Transmit+0x24>
 8008a06:	88fb      	ldrh	r3, [r7, #6]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d101      	bne.n	8008a10 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	e06a      	b.n	8008ae6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	2200      	movs	r2, #0
 8008a14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	2221      	movs	r2, #33	; 0x21
 8008a1c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008a1e:	f7fb fd7f 	bl	8004520 <HAL_GetTick>
 8008a22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	88fa      	ldrh	r2, [r7, #6]
 8008a28:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	88fa      	ldrh	r2, [r7, #6]
 8008a30:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	689b      	ldr	r3, [r3, #8]
 8008a38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a3c:	d108      	bne.n	8008a50 <HAL_UART_Transmit+0x68>
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	691b      	ldr	r3, [r3, #16]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d104      	bne.n	8008a50 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8008a46:	2300      	movs	r3, #0
 8008a48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	61bb      	str	r3, [r7, #24]
 8008a4e:	e003      	b.n	8008a58 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008a54:	2300      	movs	r3, #0
 8008a56:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008a58:	e02c      	b.n	8008ab4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	9300      	str	r3, [sp, #0]
 8008a5e:	697b      	ldr	r3, [r7, #20]
 8008a60:	2200      	movs	r2, #0
 8008a62:	2180      	movs	r1, #128	; 0x80
 8008a64:	68f8      	ldr	r0, [r7, #12]
 8008a66:	f000 ff36 	bl	80098d6 <UART_WaitOnFlagUntilTimeout>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d001      	beq.n	8008a74 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8008a70:	2303      	movs	r3, #3
 8008a72:	e038      	b.n	8008ae6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8008a74:	69fb      	ldr	r3, [r7, #28]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d10b      	bne.n	8008a92 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008a7a:	69bb      	ldr	r3, [r7, #24]
 8008a7c:	881b      	ldrh	r3, [r3, #0]
 8008a7e:	461a      	mov	r2, r3
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008a88:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008a8a:	69bb      	ldr	r3, [r7, #24]
 8008a8c:	3302      	adds	r3, #2
 8008a8e:	61bb      	str	r3, [r7, #24]
 8008a90:	e007      	b.n	8008aa2 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008a92:	69fb      	ldr	r3, [r7, #28]
 8008a94:	781a      	ldrb	r2, [r3, #0]
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008a9c:	69fb      	ldr	r3, [r7, #28]
 8008a9e:	3301      	adds	r3, #1
 8008aa0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008aa8:	b29b      	uxth	r3, r3
 8008aaa:	3b01      	subs	r3, #1
 8008aac:	b29a      	uxth	r2, r3
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008aba:	b29b      	uxth	r3, r3
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d1cc      	bne.n	8008a5a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	9300      	str	r3, [sp, #0]
 8008ac4:	697b      	ldr	r3, [r7, #20]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	2140      	movs	r1, #64	; 0x40
 8008aca:	68f8      	ldr	r0, [r7, #12]
 8008acc:	f000 ff03 	bl	80098d6 <UART_WaitOnFlagUntilTimeout>
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d001      	beq.n	8008ada <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8008ad6:	2303      	movs	r3, #3
 8008ad8:	e005      	b.n	8008ae6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	2220      	movs	r2, #32
 8008ade:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	e000      	b.n	8008ae6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8008ae4:	2302      	movs	r3, #2
  }
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3720      	adds	r7, #32
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}

08008aee <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008aee:	b580      	push	{r7, lr}
 8008af0:	b08a      	sub	sp, #40	; 0x28
 8008af2:	af02      	add	r7, sp, #8
 8008af4:	60f8      	str	r0, [r7, #12]
 8008af6:	60b9      	str	r1, [r7, #8]
 8008af8:	603b      	str	r3, [r7, #0]
 8008afa:	4613      	mov	r3, r2
 8008afc:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b04:	2b20      	cmp	r3, #32
 8008b06:	f040 80b1 	bne.w	8008c6c <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d002      	beq.n	8008b16 <HAL_UART_Receive+0x28>
 8008b10:	88fb      	ldrh	r3, [r7, #6]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d101      	bne.n	8008b1a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8008b16:	2301      	movs	r3, #1
 8008b18:	e0a9      	b.n	8008c6e <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	2222      	movs	r2, #34	; 0x22
 8008b26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008b30:	f7fb fcf6 	bl	8004520 <HAL_GetTick>
 8008b34:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	88fa      	ldrh	r2, [r7, #6]
 8008b3a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	88fa      	ldrh	r2, [r7, #6]
 8008b42:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	689b      	ldr	r3, [r3, #8]
 8008b4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b4e:	d10e      	bne.n	8008b6e <HAL_UART_Receive+0x80>
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	691b      	ldr	r3, [r3, #16]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d105      	bne.n	8008b64 <HAL_UART_Receive+0x76>
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008b5e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008b62:	e02d      	b.n	8008bc0 <HAL_UART_Receive+0xd2>
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	22ff      	movs	r2, #255	; 0xff
 8008b68:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008b6c:	e028      	b.n	8008bc0 <HAL_UART_Receive+0xd2>
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	689b      	ldr	r3, [r3, #8]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d10d      	bne.n	8008b92 <HAL_UART_Receive+0xa4>
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	691b      	ldr	r3, [r3, #16]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d104      	bne.n	8008b88 <HAL_UART_Receive+0x9a>
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	22ff      	movs	r2, #255	; 0xff
 8008b82:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008b86:	e01b      	b.n	8008bc0 <HAL_UART_Receive+0xd2>
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	227f      	movs	r2, #127	; 0x7f
 8008b8c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008b90:	e016      	b.n	8008bc0 <HAL_UART_Receive+0xd2>
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	689b      	ldr	r3, [r3, #8]
 8008b96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008b9a:	d10d      	bne.n	8008bb8 <HAL_UART_Receive+0xca>
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	691b      	ldr	r3, [r3, #16]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d104      	bne.n	8008bae <HAL_UART_Receive+0xc0>
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	227f      	movs	r2, #127	; 0x7f
 8008ba8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008bac:	e008      	b.n	8008bc0 <HAL_UART_Receive+0xd2>
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	223f      	movs	r2, #63	; 0x3f
 8008bb2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008bb6:	e003      	b.n	8008bc0 <HAL_UART_Receive+0xd2>
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008bc6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	689b      	ldr	r3, [r3, #8]
 8008bcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bd0:	d108      	bne.n	8008be4 <HAL_UART_Receive+0xf6>
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	691b      	ldr	r3, [r3, #16]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d104      	bne.n	8008be4 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	61bb      	str	r3, [r7, #24]
 8008be2:	e003      	b.n	8008bec <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008be8:	2300      	movs	r3, #0
 8008bea:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8008bec:	e032      	b.n	8008c54 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	9300      	str	r3, [sp, #0]
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	2120      	movs	r1, #32
 8008bf8:	68f8      	ldr	r0, [r7, #12]
 8008bfa:	f000 fe6c 	bl	80098d6 <UART_WaitOnFlagUntilTimeout>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d001      	beq.n	8008c08 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8008c04:	2303      	movs	r3, #3
 8008c06:	e032      	b.n	8008c6e <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8008c08:	69fb      	ldr	r3, [r7, #28]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d10c      	bne.n	8008c28 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c14:	b29a      	uxth	r2, r3
 8008c16:	8a7b      	ldrh	r3, [r7, #18]
 8008c18:	4013      	ands	r3, r2
 8008c1a:	b29a      	uxth	r2, r3
 8008c1c:	69bb      	ldr	r3, [r7, #24]
 8008c1e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008c20:	69bb      	ldr	r3, [r7, #24]
 8008c22:	3302      	adds	r3, #2
 8008c24:	61bb      	str	r3, [r7, #24]
 8008c26:	e00c      	b.n	8008c42 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c2e:	b2da      	uxtb	r2, r3
 8008c30:	8a7b      	ldrh	r3, [r7, #18]
 8008c32:	b2db      	uxtb	r3, r3
 8008c34:	4013      	ands	r3, r2
 8008c36:	b2da      	uxtb	r2, r3
 8008c38:	69fb      	ldr	r3, [r7, #28]
 8008c3a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8008c3c:	69fb      	ldr	r3, [r7, #28]
 8008c3e:	3301      	adds	r3, #1
 8008c40:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008c48:	b29b      	uxth	r3, r3
 8008c4a:	3b01      	subs	r3, #1
 8008c4c:	b29a      	uxth	r2, r3
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008c5a:	b29b      	uxth	r3, r3
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d1c6      	bne.n	8008bee <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2220      	movs	r2, #32
 8008c64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8008c68:	2300      	movs	r3, #0
 8008c6a:	e000      	b.n	8008c6e <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8008c6c:	2302      	movs	r3, #2
  }
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	3720      	adds	r7, #32
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}
	...

08008c78 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b0ba      	sub	sp, #232	; 0xe8
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	69db      	ldr	r3, [r3, #28]
 8008c86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	689b      	ldr	r3, [r3, #8]
 8008c9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008c9e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008ca2:	f640 030f 	movw	r3, #2063	; 0x80f
 8008ca6:	4013      	ands	r3, r2
 8008ca8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008cac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d115      	bne.n	8008ce0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008cb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cb8:	f003 0320 	and.w	r3, r3, #32
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d00f      	beq.n	8008ce0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008cc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008cc4:	f003 0320 	and.w	r3, r3, #32
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d009      	beq.n	8008ce0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	f000 8297 	beq.w	8009204 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	4798      	blx	r3
      }
      return;
 8008cde:	e291      	b.n	8009204 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008ce0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	f000 8117 	beq.w	8008f18 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008cea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008cee:	f003 0301 	and.w	r3, r3, #1
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d106      	bne.n	8008d04 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008cf6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008cfa:	4b85      	ldr	r3, [pc, #532]	; (8008f10 <HAL_UART_IRQHandler+0x298>)
 8008cfc:	4013      	ands	r3, r2
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	f000 810a 	beq.w	8008f18 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008d04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d08:	f003 0301 	and.w	r3, r3, #1
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d011      	beq.n	8008d34 <HAL_UART_IRQHandler+0xbc>
 8008d10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d00b      	beq.n	8008d34 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	2201      	movs	r2, #1
 8008d22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d2a:	f043 0201 	orr.w	r2, r3, #1
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008d34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d38:	f003 0302 	and.w	r3, r3, #2
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d011      	beq.n	8008d64 <HAL_UART_IRQHandler+0xec>
 8008d40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008d44:	f003 0301 	and.w	r3, r3, #1
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d00b      	beq.n	8008d64 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	2202      	movs	r2, #2
 8008d52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d5a:	f043 0204 	orr.w	r2, r3, #4
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008d64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d68:	f003 0304 	and.w	r3, r3, #4
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d011      	beq.n	8008d94 <HAL_UART_IRQHandler+0x11c>
 8008d70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008d74:	f003 0301 	and.w	r3, r3, #1
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d00b      	beq.n	8008d94 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	2204      	movs	r2, #4
 8008d82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d8a:	f043 0202 	orr.w	r2, r3, #2
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008d94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d98:	f003 0308 	and.w	r3, r3, #8
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d017      	beq.n	8008dd0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008da0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008da4:	f003 0320 	and.w	r3, r3, #32
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d105      	bne.n	8008db8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008dac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008db0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d00b      	beq.n	8008dd0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	2208      	movs	r2, #8
 8008dbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008dc6:	f043 0208 	orr.w	r2, r3, #8
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008dd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008dd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d012      	beq.n	8008e02 <HAL_UART_IRQHandler+0x18a>
 8008ddc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008de0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d00c      	beq.n	8008e02 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008df0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008df8:	f043 0220 	orr.w	r2, r3, #32
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	f000 81fd 	beq.w	8009208 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008e0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e12:	f003 0320 	and.w	r3, r3, #32
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d00d      	beq.n	8008e36 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008e1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e1e:	f003 0320 	and.w	r3, r3, #32
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d007      	beq.n	8008e36 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d003      	beq.n	8008e36 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e3c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	689b      	ldr	r3, [r3, #8]
 8008e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e4a:	2b40      	cmp	r3, #64	; 0x40
 8008e4c:	d005      	beq.n	8008e5a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008e4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008e52:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d04f      	beq.n	8008efa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f000 fe01 	bl	8009a62 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	689b      	ldr	r3, [r3, #8]
 8008e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e6a:	2b40      	cmp	r3, #64	; 0x40
 8008e6c:	d141      	bne.n	8008ef2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	3308      	adds	r3, #8
 8008e74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e78:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008e7c:	e853 3f00 	ldrex	r3, [r3]
 8008e80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008e84:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008e88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	3308      	adds	r3, #8
 8008e96:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008e9a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008e9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ea2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008ea6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008eaa:	e841 2300 	strex	r3, r2, [r1]
 8008eae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008eb2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d1d9      	bne.n	8008e6e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d013      	beq.n	8008eea <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ec6:	4a13      	ldr	r2, [pc, #76]	; (8008f14 <HAL_UART_IRQHandler+0x29c>)
 8008ec8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f7fb fdc2 	bl	8004a58 <HAL_DMA_Abort_IT>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d017      	beq.n	8008f0a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ede:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ee0:	687a      	ldr	r2, [r7, #4]
 8008ee2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008ee4:	4610      	mov	r0, r2
 8008ee6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ee8:	e00f      	b.n	8008f0a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f000 f9a0 	bl	8009230 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ef0:	e00b      	b.n	8008f0a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f000 f99c 	bl	8009230 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ef8:	e007      	b.n	8008f0a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f000 f998 	bl	8009230 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2200      	movs	r2, #0
 8008f04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8008f08:	e17e      	b.n	8009208 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f0a:	bf00      	nop
    return;
 8008f0c:	e17c      	b.n	8009208 <HAL_UART_IRQHandler+0x590>
 8008f0e:	bf00      	nop
 8008f10:	04000120 	.word	0x04000120
 8008f14:	08009b2b 	.word	0x08009b2b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f1c:	2b01      	cmp	r3, #1
 8008f1e:	f040 814c 	bne.w	80091ba <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008f22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f26:	f003 0310 	and.w	r3, r3, #16
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	f000 8145 	beq.w	80091ba <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008f30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f34:	f003 0310 	and.w	r3, r3, #16
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	f000 813e 	beq.w	80091ba <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	2210      	movs	r2, #16
 8008f44:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	689b      	ldr	r3, [r3, #8]
 8008f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f50:	2b40      	cmp	r3, #64	; 0x40
 8008f52:	f040 80b6 	bne.w	80090c2 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	685b      	ldr	r3, [r3, #4]
 8008f5e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008f62:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	f000 8150 	beq.w	800920c <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008f72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008f76:	429a      	cmp	r2, r3
 8008f78:	f080 8148 	bcs.w	800920c <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008f82:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f8a:	69db      	ldr	r3, [r3, #28]
 8008f8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f90:	f000 8086 	beq.w	80090a0 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008fa0:	e853 3f00 	ldrex	r3, [r3]
 8008fa4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008fa8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008fac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008fb0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	461a      	mov	r2, r3
 8008fba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008fbe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008fc2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fc6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008fca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008fce:	e841 2300 	strex	r3, r2, [r1]
 8008fd2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008fd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d1da      	bne.n	8008f94 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	3308      	adds	r3, #8
 8008fe4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fe6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008fe8:	e853 3f00 	ldrex	r3, [r3]
 8008fec:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008fee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008ff0:	f023 0301 	bic.w	r3, r3, #1
 8008ff4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	3308      	adds	r3, #8
 8008ffe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009002:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009006:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009008:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800900a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800900e:	e841 2300 	strex	r3, r2, [r1]
 8009012:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009014:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009016:	2b00      	cmp	r3, #0
 8009018:	d1e1      	bne.n	8008fde <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	3308      	adds	r3, #8
 8009020:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009022:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009024:	e853 3f00 	ldrex	r3, [r3]
 8009028:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800902a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800902c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009030:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	3308      	adds	r3, #8
 800903a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800903e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009040:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009042:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009044:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009046:	e841 2300 	strex	r3, r2, [r1]
 800904a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800904c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800904e:	2b00      	cmp	r3, #0
 8009050:	d1e3      	bne.n	800901a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2220      	movs	r2, #32
 8009056:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2200      	movs	r2, #0
 800905e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009066:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009068:	e853 3f00 	ldrex	r3, [r3]
 800906c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800906e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009070:	f023 0310 	bic.w	r3, r3, #16
 8009074:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	461a      	mov	r2, r3
 800907e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009082:	65bb      	str	r3, [r7, #88]	; 0x58
 8009084:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009086:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009088:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800908a:	e841 2300 	strex	r3, r2, [r1]
 800908e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009090:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009092:	2b00      	cmp	r3, #0
 8009094:	d1e4      	bne.n	8009060 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800909a:	4618      	mov	r0, r3
 800909c:	f7fb fc6c 	bl	8004978 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2202      	movs	r2, #2
 80090a4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80090b2:	b29b      	uxth	r3, r3
 80090b4:	1ad3      	subs	r3, r2, r3
 80090b6:	b29b      	uxth	r3, r3
 80090b8:	4619      	mov	r1, r3
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f000 f8c2 	bl	8009244 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80090c0:	e0a4      	b.n	800920c <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80090ce:	b29b      	uxth	r3, r3
 80090d0:	1ad3      	subs	r3, r2, r3
 80090d2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80090dc:	b29b      	uxth	r3, r3
 80090de:	2b00      	cmp	r3, #0
 80090e0:	f000 8096 	beq.w	8009210 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 80090e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	f000 8091 	beq.w	8009210 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090f6:	e853 3f00 	ldrex	r3, [r3]
 80090fa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80090fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009102:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	461a      	mov	r2, r3
 800910c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009110:	647b      	str	r3, [r7, #68]	; 0x44
 8009112:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009114:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009116:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009118:	e841 2300 	strex	r3, r2, [r1]
 800911c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800911e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009120:	2b00      	cmp	r3, #0
 8009122:	d1e4      	bne.n	80090ee <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	3308      	adds	r3, #8
 800912a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800912c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800912e:	e853 3f00 	ldrex	r3, [r3]
 8009132:	623b      	str	r3, [r7, #32]
   return(result);
 8009134:	6a3b      	ldr	r3, [r7, #32]
 8009136:	f023 0301 	bic.w	r3, r3, #1
 800913a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	3308      	adds	r3, #8
 8009144:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009148:	633a      	str	r2, [r7, #48]	; 0x30
 800914a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800914c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800914e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009150:	e841 2300 	strex	r3, r2, [r1]
 8009154:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009158:	2b00      	cmp	r3, #0
 800915a:	d1e3      	bne.n	8009124 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2220      	movs	r2, #32
 8009160:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2200      	movs	r2, #0
 8009168:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2200      	movs	r2, #0
 800916e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009176:	693b      	ldr	r3, [r7, #16]
 8009178:	e853 3f00 	ldrex	r3, [r3]
 800917c:	60fb      	str	r3, [r7, #12]
   return(result);
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	f023 0310 	bic.w	r3, r3, #16
 8009184:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	461a      	mov	r2, r3
 800918e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009192:	61fb      	str	r3, [r7, #28]
 8009194:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009196:	69b9      	ldr	r1, [r7, #24]
 8009198:	69fa      	ldr	r2, [r7, #28]
 800919a:	e841 2300 	strex	r3, r2, [r1]
 800919e:	617b      	str	r3, [r7, #20]
   return(result);
 80091a0:	697b      	ldr	r3, [r7, #20]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d1e4      	bne.n	8009170 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2202      	movs	r2, #2
 80091aa:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80091ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80091b0:	4619      	mov	r1, r3
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f000 f846 	bl	8009244 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80091b8:	e02a      	b.n	8009210 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80091ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d00e      	beq.n	80091e4 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80091c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80091ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d008      	beq.n	80091e4 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d01c      	beq.n	8009214 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	4798      	blx	r3
    }
    return;
 80091e2:	e017      	b.n	8009214 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80091e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d012      	beq.n	8009216 <HAL_UART_IRQHandler+0x59e>
 80091f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80091f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d00c      	beq.n	8009216 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f000 fcaa 	bl	8009b56 <UART_EndTransmit_IT>
    return;
 8009202:	e008      	b.n	8009216 <HAL_UART_IRQHandler+0x59e>
      return;
 8009204:	bf00      	nop
 8009206:	e006      	b.n	8009216 <HAL_UART_IRQHandler+0x59e>
    return;
 8009208:	bf00      	nop
 800920a:	e004      	b.n	8009216 <HAL_UART_IRQHandler+0x59e>
      return;
 800920c:	bf00      	nop
 800920e:	e002      	b.n	8009216 <HAL_UART_IRQHandler+0x59e>
      return;
 8009210:	bf00      	nop
 8009212:	e000      	b.n	8009216 <HAL_UART_IRQHandler+0x59e>
    return;
 8009214:	bf00      	nop
  }

}
 8009216:	37e8      	adds	r7, #232	; 0xe8
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}

0800921c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800921c:	b480      	push	{r7}
 800921e:	b083      	sub	sp, #12
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009224:	bf00      	nop
 8009226:	370c      	adds	r7, #12
 8009228:	46bd      	mov	sp, r7
 800922a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922e:	4770      	bx	lr

08009230 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009230:	b480      	push	{r7}
 8009232:	b083      	sub	sp, #12
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009238:	bf00      	nop
 800923a:	370c      	adds	r7, #12
 800923c:	46bd      	mov	sp, r7
 800923e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009242:	4770      	bx	lr

08009244 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009244:	b480      	push	{r7}
 8009246:	b083      	sub	sp, #12
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
 800924c:	460b      	mov	r3, r1
 800924e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009250:	bf00      	nop
 8009252:	370c      	adds	r7, #12
 8009254:	46bd      	mov	sp, r7
 8009256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925a:	4770      	bx	lr

0800925c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b088      	sub	sp, #32
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009264:	2300      	movs	r3, #0
 8009266:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	689a      	ldr	r2, [r3, #8]
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	691b      	ldr	r3, [r3, #16]
 8009270:	431a      	orrs	r2, r3
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	695b      	ldr	r3, [r3, #20]
 8009276:	431a      	orrs	r2, r3
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	69db      	ldr	r3, [r3, #28]
 800927c:	4313      	orrs	r3, r2
 800927e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	681a      	ldr	r2, [r3, #0]
 8009286:	4ba6      	ldr	r3, [pc, #664]	; (8009520 <UART_SetConfig+0x2c4>)
 8009288:	4013      	ands	r3, r2
 800928a:	687a      	ldr	r2, [r7, #4]
 800928c:	6812      	ldr	r2, [r2, #0]
 800928e:	6979      	ldr	r1, [r7, #20]
 8009290:	430b      	orrs	r3, r1
 8009292:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	685b      	ldr	r3, [r3, #4]
 800929a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	68da      	ldr	r2, [r3, #12]
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	430a      	orrs	r2, r1
 80092a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	699b      	ldr	r3, [r3, #24]
 80092ae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6a1b      	ldr	r3, [r3, #32]
 80092b4:	697a      	ldr	r2, [r7, #20]
 80092b6:	4313      	orrs	r3, r2
 80092b8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	689b      	ldr	r3, [r3, #8]
 80092c0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	697a      	ldr	r2, [r7, #20]
 80092ca:	430a      	orrs	r2, r1
 80092cc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	4a94      	ldr	r2, [pc, #592]	; (8009524 <UART_SetConfig+0x2c8>)
 80092d4:	4293      	cmp	r3, r2
 80092d6:	d120      	bne.n	800931a <UART_SetConfig+0xbe>
 80092d8:	4b93      	ldr	r3, [pc, #588]	; (8009528 <UART_SetConfig+0x2cc>)
 80092da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092de:	f003 0303 	and.w	r3, r3, #3
 80092e2:	2b03      	cmp	r3, #3
 80092e4:	d816      	bhi.n	8009314 <UART_SetConfig+0xb8>
 80092e6:	a201      	add	r2, pc, #4	; (adr r2, 80092ec <UART_SetConfig+0x90>)
 80092e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092ec:	080092fd 	.word	0x080092fd
 80092f0:	08009309 	.word	0x08009309
 80092f4:	08009303 	.word	0x08009303
 80092f8:	0800930f 	.word	0x0800930f
 80092fc:	2301      	movs	r3, #1
 80092fe:	77fb      	strb	r3, [r7, #31]
 8009300:	e150      	b.n	80095a4 <UART_SetConfig+0x348>
 8009302:	2302      	movs	r3, #2
 8009304:	77fb      	strb	r3, [r7, #31]
 8009306:	e14d      	b.n	80095a4 <UART_SetConfig+0x348>
 8009308:	2304      	movs	r3, #4
 800930a:	77fb      	strb	r3, [r7, #31]
 800930c:	e14a      	b.n	80095a4 <UART_SetConfig+0x348>
 800930e:	2308      	movs	r3, #8
 8009310:	77fb      	strb	r3, [r7, #31]
 8009312:	e147      	b.n	80095a4 <UART_SetConfig+0x348>
 8009314:	2310      	movs	r3, #16
 8009316:	77fb      	strb	r3, [r7, #31]
 8009318:	e144      	b.n	80095a4 <UART_SetConfig+0x348>
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	4a83      	ldr	r2, [pc, #524]	; (800952c <UART_SetConfig+0x2d0>)
 8009320:	4293      	cmp	r3, r2
 8009322:	d132      	bne.n	800938a <UART_SetConfig+0x12e>
 8009324:	4b80      	ldr	r3, [pc, #512]	; (8009528 <UART_SetConfig+0x2cc>)
 8009326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800932a:	f003 030c 	and.w	r3, r3, #12
 800932e:	2b0c      	cmp	r3, #12
 8009330:	d828      	bhi.n	8009384 <UART_SetConfig+0x128>
 8009332:	a201      	add	r2, pc, #4	; (adr r2, 8009338 <UART_SetConfig+0xdc>)
 8009334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009338:	0800936d 	.word	0x0800936d
 800933c:	08009385 	.word	0x08009385
 8009340:	08009385 	.word	0x08009385
 8009344:	08009385 	.word	0x08009385
 8009348:	08009379 	.word	0x08009379
 800934c:	08009385 	.word	0x08009385
 8009350:	08009385 	.word	0x08009385
 8009354:	08009385 	.word	0x08009385
 8009358:	08009373 	.word	0x08009373
 800935c:	08009385 	.word	0x08009385
 8009360:	08009385 	.word	0x08009385
 8009364:	08009385 	.word	0x08009385
 8009368:	0800937f 	.word	0x0800937f
 800936c:	2300      	movs	r3, #0
 800936e:	77fb      	strb	r3, [r7, #31]
 8009370:	e118      	b.n	80095a4 <UART_SetConfig+0x348>
 8009372:	2302      	movs	r3, #2
 8009374:	77fb      	strb	r3, [r7, #31]
 8009376:	e115      	b.n	80095a4 <UART_SetConfig+0x348>
 8009378:	2304      	movs	r3, #4
 800937a:	77fb      	strb	r3, [r7, #31]
 800937c:	e112      	b.n	80095a4 <UART_SetConfig+0x348>
 800937e:	2308      	movs	r3, #8
 8009380:	77fb      	strb	r3, [r7, #31]
 8009382:	e10f      	b.n	80095a4 <UART_SetConfig+0x348>
 8009384:	2310      	movs	r3, #16
 8009386:	77fb      	strb	r3, [r7, #31]
 8009388:	e10c      	b.n	80095a4 <UART_SetConfig+0x348>
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	4a68      	ldr	r2, [pc, #416]	; (8009530 <UART_SetConfig+0x2d4>)
 8009390:	4293      	cmp	r3, r2
 8009392:	d120      	bne.n	80093d6 <UART_SetConfig+0x17a>
 8009394:	4b64      	ldr	r3, [pc, #400]	; (8009528 <UART_SetConfig+0x2cc>)
 8009396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800939a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800939e:	2b30      	cmp	r3, #48	; 0x30
 80093a0:	d013      	beq.n	80093ca <UART_SetConfig+0x16e>
 80093a2:	2b30      	cmp	r3, #48	; 0x30
 80093a4:	d814      	bhi.n	80093d0 <UART_SetConfig+0x174>
 80093a6:	2b20      	cmp	r3, #32
 80093a8:	d009      	beq.n	80093be <UART_SetConfig+0x162>
 80093aa:	2b20      	cmp	r3, #32
 80093ac:	d810      	bhi.n	80093d0 <UART_SetConfig+0x174>
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d002      	beq.n	80093b8 <UART_SetConfig+0x15c>
 80093b2:	2b10      	cmp	r3, #16
 80093b4:	d006      	beq.n	80093c4 <UART_SetConfig+0x168>
 80093b6:	e00b      	b.n	80093d0 <UART_SetConfig+0x174>
 80093b8:	2300      	movs	r3, #0
 80093ba:	77fb      	strb	r3, [r7, #31]
 80093bc:	e0f2      	b.n	80095a4 <UART_SetConfig+0x348>
 80093be:	2302      	movs	r3, #2
 80093c0:	77fb      	strb	r3, [r7, #31]
 80093c2:	e0ef      	b.n	80095a4 <UART_SetConfig+0x348>
 80093c4:	2304      	movs	r3, #4
 80093c6:	77fb      	strb	r3, [r7, #31]
 80093c8:	e0ec      	b.n	80095a4 <UART_SetConfig+0x348>
 80093ca:	2308      	movs	r3, #8
 80093cc:	77fb      	strb	r3, [r7, #31]
 80093ce:	e0e9      	b.n	80095a4 <UART_SetConfig+0x348>
 80093d0:	2310      	movs	r3, #16
 80093d2:	77fb      	strb	r3, [r7, #31]
 80093d4:	e0e6      	b.n	80095a4 <UART_SetConfig+0x348>
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	4a56      	ldr	r2, [pc, #344]	; (8009534 <UART_SetConfig+0x2d8>)
 80093dc:	4293      	cmp	r3, r2
 80093de:	d120      	bne.n	8009422 <UART_SetConfig+0x1c6>
 80093e0:	4b51      	ldr	r3, [pc, #324]	; (8009528 <UART_SetConfig+0x2cc>)
 80093e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80093ea:	2bc0      	cmp	r3, #192	; 0xc0
 80093ec:	d013      	beq.n	8009416 <UART_SetConfig+0x1ba>
 80093ee:	2bc0      	cmp	r3, #192	; 0xc0
 80093f0:	d814      	bhi.n	800941c <UART_SetConfig+0x1c0>
 80093f2:	2b80      	cmp	r3, #128	; 0x80
 80093f4:	d009      	beq.n	800940a <UART_SetConfig+0x1ae>
 80093f6:	2b80      	cmp	r3, #128	; 0x80
 80093f8:	d810      	bhi.n	800941c <UART_SetConfig+0x1c0>
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d002      	beq.n	8009404 <UART_SetConfig+0x1a8>
 80093fe:	2b40      	cmp	r3, #64	; 0x40
 8009400:	d006      	beq.n	8009410 <UART_SetConfig+0x1b4>
 8009402:	e00b      	b.n	800941c <UART_SetConfig+0x1c0>
 8009404:	2300      	movs	r3, #0
 8009406:	77fb      	strb	r3, [r7, #31]
 8009408:	e0cc      	b.n	80095a4 <UART_SetConfig+0x348>
 800940a:	2302      	movs	r3, #2
 800940c:	77fb      	strb	r3, [r7, #31]
 800940e:	e0c9      	b.n	80095a4 <UART_SetConfig+0x348>
 8009410:	2304      	movs	r3, #4
 8009412:	77fb      	strb	r3, [r7, #31]
 8009414:	e0c6      	b.n	80095a4 <UART_SetConfig+0x348>
 8009416:	2308      	movs	r3, #8
 8009418:	77fb      	strb	r3, [r7, #31]
 800941a:	e0c3      	b.n	80095a4 <UART_SetConfig+0x348>
 800941c:	2310      	movs	r3, #16
 800941e:	77fb      	strb	r3, [r7, #31]
 8009420:	e0c0      	b.n	80095a4 <UART_SetConfig+0x348>
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	4a44      	ldr	r2, [pc, #272]	; (8009538 <UART_SetConfig+0x2dc>)
 8009428:	4293      	cmp	r3, r2
 800942a:	d125      	bne.n	8009478 <UART_SetConfig+0x21c>
 800942c:	4b3e      	ldr	r3, [pc, #248]	; (8009528 <UART_SetConfig+0x2cc>)
 800942e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009432:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009436:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800943a:	d017      	beq.n	800946c <UART_SetConfig+0x210>
 800943c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009440:	d817      	bhi.n	8009472 <UART_SetConfig+0x216>
 8009442:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009446:	d00b      	beq.n	8009460 <UART_SetConfig+0x204>
 8009448:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800944c:	d811      	bhi.n	8009472 <UART_SetConfig+0x216>
 800944e:	2b00      	cmp	r3, #0
 8009450:	d003      	beq.n	800945a <UART_SetConfig+0x1fe>
 8009452:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009456:	d006      	beq.n	8009466 <UART_SetConfig+0x20a>
 8009458:	e00b      	b.n	8009472 <UART_SetConfig+0x216>
 800945a:	2300      	movs	r3, #0
 800945c:	77fb      	strb	r3, [r7, #31]
 800945e:	e0a1      	b.n	80095a4 <UART_SetConfig+0x348>
 8009460:	2302      	movs	r3, #2
 8009462:	77fb      	strb	r3, [r7, #31]
 8009464:	e09e      	b.n	80095a4 <UART_SetConfig+0x348>
 8009466:	2304      	movs	r3, #4
 8009468:	77fb      	strb	r3, [r7, #31]
 800946a:	e09b      	b.n	80095a4 <UART_SetConfig+0x348>
 800946c:	2308      	movs	r3, #8
 800946e:	77fb      	strb	r3, [r7, #31]
 8009470:	e098      	b.n	80095a4 <UART_SetConfig+0x348>
 8009472:	2310      	movs	r3, #16
 8009474:	77fb      	strb	r3, [r7, #31]
 8009476:	e095      	b.n	80095a4 <UART_SetConfig+0x348>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	4a2f      	ldr	r2, [pc, #188]	; (800953c <UART_SetConfig+0x2e0>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d125      	bne.n	80094ce <UART_SetConfig+0x272>
 8009482:	4b29      	ldr	r3, [pc, #164]	; (8009528 <UART_SetConfig+0x2cc>)
 8009484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009488:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800948c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009490:	d017      	beq.n	80094c2 <UART_SetConfig+0x266>
 8009492:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009496:	d817      	bhi.n	80094c8 <UART_SetConfig+0x26c>
 8009498:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800949c:	d00b      	beq.n	80094b6 <UART_SetConfig+0x25a>
 800949e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80094a2:	d811      	bhi.n	80094c8 <UART_SetConfig+0x26c>
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d003      	beq.n	80094b0 <UART_SetConfig+0x254>
 80094a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80094ac:	d006      	beq.n	80094bc <UART_SetConfig+0x260>
 80094ae:	e00b      	b.n	80094c8 <UART_SetConfig+0x26c>
 80094b0:	2301      	movs	r3, #1
 80094b2:	77fb      	strb	r3, [r7, #31]
 80094b4:	e076      	b.n	80095a4 <UART_SetConfig+0x348>
 80094b6:	2302      	movs	r3, #2
 80094b8:	77fb      	strb	r3, [r7, #31]
 80094ba:	e073      	b.n	80095a4 <UART_SetConfig+0x348>
 80094bc:	2304      	movs	r3, #4
 80094be:	77fb      	strb	r3, [r7, #31]
 80094c0:	e070      	b.n	80095a4 <UART_SetConfig+0x348>
 80094c2:	2308      	movs	r3, #8
 80094c4:	77fb      	strb	r3, [r7, #31]
 80094c6:	e06d      	b.n	80095a4 <UART_SetConfig+0x348>
 80094c8:	2310      	movs	r3, #16
 80094ca:	77fb      	strb	r3, [r7, #31]
 80094cc:	e06a      	b.n	80095a4 <UART_SetConfig+0x348>
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	4a1b      	ldr	r2, [pc, #108]	; (8009540 <UART_SetConfig+0x2e4>)
 80094d4:	4293      	cmp	r3, r2
 80094d6:	d138      	bne.n	800954a <UART_SetConfig+0x2ee>
 80094d8:	4b13      	ldr	r3, [pc, #76]	; (8009528 <UART_SetConfig+0x2cc>)
 80094da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094de:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80094e2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80094e6:	d017      	beq.n	8009518 <UART_SetConfig+0x2bc>
 80094e8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80094ec:	d82a      	bhi.n	8009544 <UART_SetConfig+0x2e8>
 80094ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80094f2:	d00b      	beq.n	800950c <UART_SetConfig+0x2b0>
 80094f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80094f8:	d824      	bhi.n	8009544 <UART_SetConfig+0x2e8>
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d003      	beq.n	8009506 <UART_SetConfig+0x2aa>
 80094fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009502:	d006      	beq.n	8009512 <UART_SetConfig+0x2b6>
 8009504:	e01e      	b.n	8009544 <UART_SetConfig+0x2e8>
 8009506:	2300      	movs	r3, #0
 8009508:	77fb      	strb	r3, [r7, #31]
 800950a:	e04b      	b.n	80095a4 <UART_SetConfig+0x348>
 800950c:	2302      	movs	r3, #2
 800950e:	77fb      	strb	r3, [r7, #31]
 8009510:	e048      	b.n	80095a4 <UART_SetConfig+0x348>
 8009512:	2304      	movs	r3, #4
 8009514:	77fb      	strb	r3, [r7, #31]
 8009516:	e045      	b.n	80095a4 <UART_SetConfig+0x348>
 8009518:	2308      	movs	r3, #8
 800951a:	77fb      	strb	r3, [r7, #31]
 800951c:	e042      	b.n	80095a4 <UART_SetConfig+0x348>
 800951e:	bf00      	nop
 8009520:	efff69f3 	.word	0xefff69f3
 8009524:	40011000 	.word	0x40011000
 8009528:	40023800 	.word	0x40023800
 800952c:	40004400 	.word	0x40004400
 8009530:	40004800 	.word	0x40004800
 8009534:	40004c00 	.word	0x40004c00
 8009538:	40005000 	.word	0x40005000
 800953c:	40011400 	.word	0x40011400
 8009540:	40007800 	.word	0x40007800
 8009544:	2310      	movs	r3, #16
 8009546:	77fb      	strb	r3, [r7, #31]
 8009548:	e02c      	b.n	80095a4 <UART_SetConfig+0x348>
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	4a72      	ldr	r2, [pc, #456]	; (8009718 <UART_SetConfig+0x4bc>)
 8009550:	4293      	cmp	r3, r2
 8009552:	d125      	bne.n	80095a0 <UART_SetConfig+0x344>
 8009554:	4b71      	ldr	r3, [pc, #452]	; (800971c <UART_SetConfig+0x4c0>)
 8009556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800955a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800955e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009562:	d017      	beq.n	8009594 <UART_SetConfig+0x338>
 8009564:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009568:	d817      	bhi.n	800959a <UART_SetConfig+0x33e>
 800956a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800956e:	d00b      	beq.n	8009588 <UART_SetConfig+0x32c>
 8009570:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009574:	d811      	bhi.n	800959a <UART_SetConfig+0x33e>
 8009576:	2b00      	cmp	r3, #0
 8009578:	d003      	beq.n	8009582 <UART_SetConfig+0x326>
 800957a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800957e:	d006      	beq.n	800958e <UART_SetConfig+0x332>
 8009580:	e00b      	b.n	800959a <UART_SetConfig+0x33e>
 8009582:	2300      	movs	r3, #0
 8009584:	77fb      	strb	r3, [r7, #31]
 8009586:	e00d      	b.n	80095a4 <UART_SetConfig+0x348>
 8009588:	2302      	movs	r3, #2
 800958a:	77fb      	strb	r3, [r7, #31]
 800958c:	e00a      	b.n	80095a4 <UART_SetConfig+0x348>
 800958e:	2304      	movs	r3, #4
 8009590:	77fb      	strb	r3, [r7, #31]
 8009592:	e007      	b.n	80095a4 <UART_SetConfig+0x348>
 8009594:	2308      	movs	r3, #8
 8009596:	77fb      	strb	r3, [r7, #31]
 8009598:	e004      	b.n	80095a4 <UART_SetConfig+0x348>
 800959a:	2310      	movs	r3, #16
 800959c:	77fb      	strb	r3, [r7, #31]
 800959e:	e001      	b.n	80095a4 <UART_SetConfig+0x348>
 80095a0:	2310      	movs	r3, #16
 80095a2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	69db      	ldr	r3, [r3, #28]
 80095a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095ac:	d15b      	bne.n	8009666 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80095ae:	7ffb      	ldrb	r3, [r7, #31]
 80095b0:	2b08      	cmp	r3, #8
 80095b2:	d828      	bhi.n	8009606 <UART_SetConfig+0x3aa>
 80095b4:	a201      	add	r2, pc, #4	; (adr r2, 80095bc <UART_SetConfig+0x360>)
 80095b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095ba:	bf00      	nop
 80095bc:	080095e1 	.word	0x080095e1
 80095c0:	080095e9 	.word	0x080095e9
 80095c4:	080095f1 	.word	0x080095f1
 80095c8:	08009607 	.word	0x08009607
 80095cc:	080095f7 	.word	0x080095f7
 80095d0:	08009607 	.word	0x08009607
 80095d4:	08009607 	.word	0x08009607
 80095d8:	08009607 	.word	0x08009607
 80095dc:	080095ff 	.word	0x080095ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80095e0:	f7fd fc50 	bl	8006e84 <HAL_RCC_GetPCLK1Freq>
 80095e4:	61b8      	str	r0, [r7, #24]
        break;
 80095e6:	e013      	b.n	8009610 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80095e8:	f7fd fc60 	bl	8006eac <HAL_RCC_GetPCLK2Freq>
 80095ec:	61b8      	str	r0, [r7, #24]
        break;
 80095ee:	e00f      	b.n	8009610 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80095f0:	4b4b      	ldr	r3, [pc, #300]	; (8009720 <UART_SetConfig+0x4c4>)
 80095f2:	61bb      	str	r3, [r7, #24]
        break;
 80095f4:	e00c      	b.n	8009610 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80095f6:	f7fd fb33 	bl	8006c60 <HAL_RCC_GetSysClockFreq>
 80095fa:	61b8      	str	r0, [r7, #24]
        break;
 80095fc:	e008      	b.n	8009610 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80095fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009602:	61bb      	str	r3, [r7, #24]
        break;
 8009604:	e004      	b.n	8009610 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8009606:	2300      	movs	r3, #0
 8009608:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800960a:	2301      	movs	r3, #1
 800960c:	77bb      	strb	r3, [r7, #30]
        break;
 800960e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009610:	69bb      	ldr	r3, [r7, #24]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d074      	beq.n	8009700 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009616:	69bb      	ldr	r3, [r7, #24]
 8009618:	005a      	lsls	r2, r3, #1
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	685b      	ldr	r3, [r3, #4]
 800961e:	085b      	lsrs	r3, r3, #1
 8009620:	441a      	add	r2, r3
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	685b      	ldr	r3, [r3, #4]
 8009626:	fbb2 f3f3 	udiv	r3, r2, r3
 800962a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800962c:	693b      	ldr	r3, [r7, #16]
 800962e:	2b0f      	cmp	r3, #15
 8009630:	d916      	bls.n	8009660 <UART_SetConfig+0x404>
 8009632:	693b      	ldr	r3, [r7, #16]
 8009634:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009638:	d212      	bcs.n	8009660 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800963a:	693b      	ldr	r3, [r7, #16]
 800963c:	b29b      	uxth	r3, r3
 800963e:	f023 030f 	bic.w	r3, r3, #15
 8009642:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009644:	693b      	ldr	r3, [r7, #16]
 8009646:	085b      	lsrs	r3, r3, #1
 8009648:	b29b      	uxth	r3, r3
 800964a:	f003 0307 	and.w	r3, r3, #7
 800964e:	b29a      	uxth	r2, r3
 8009650:	89fb      	ldrh	r3, [r7, #14]
 8009652:	4313      	orrs	r3, r2
 8009654:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	89fa      	ldrh	r2, [r7, #14]
 800965c:	60da      	str	r2, [r3, #12]
 800965e:	e04f      	b.n	8009700 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009660:	2301      	movs	r3, #1
 8009662:	77bb      	strb	r3, [r7, #30]
 8009664:	e04c      	b.n	8009700 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009666:	7ffb      	ldrb	r3, [r7, #31]
 8009668:	2b08      	cmp	r3, #8
 800966a:	d828      	bhi.n	80096be <UART_SetConfig+0x462>
 800966c:	a201      	add	r2, pc, #4	; (adr r2, 8009674 <UART_SetConfig+0x418>)
 800966e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009672:	bf00      	nop
 8009674:	08009699 	.word	0x08009699
 8009678:	080096a1 	.word	0x080096a1
 800967c:	080096a9 	.word	0x080096a9
 8009680:	080096bf 	.word	0x080096bf
 8009684:	080096af 	.word	0x080096af
 8009688:	080096bf 	.word	0x080096bf
 800968c:	080096bf 	.word	0x080096bf
 8009690:	080096bf 	.word	0x080096bf
 8009694:	080096b7 	.word	0x080096b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009698:	f7fd fbf4 	bl	8006e84 <HAL_RCC_GetPCLK1Freq>
 800969c:	61b8      	str	r0, [r7, #24]
        break;
 800969e:	e013      	b.n	80096c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80096a0:	f7fd fc04 	bl	8006eac <HAL_RCC_GetPCLK2Freq>
 80096a4:	61b8      	str	r0, [r7, #24]
        break;
 80096a6:	e00f      	b.n	80096c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80096a8:	4b1d      	ldr	r3, [pc, #116]	; (8009720 <UART_SetConfig+0x4c4>)
 80096aa:	61bb      	str	r3, [r7, #24]
        break;
 80096ac:	e00c      	b.n	80096c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80096ae:	f7fd fad7 	bl	8006c60 <HAL_RCC_GetSysClockFreq>
 80096b2:	61b8      	str	r0, [r7, #24]
        break;
 80096b4:	e008      	b.n	80096c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80096b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80096ba:	61bb      	str	r3, [r7, #24]
        break;
 80096bc:	e004      	b.n	80096c8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80096be:	2300      	movs	r3, #0
 80096c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80096c2:	2301      	movs	r3, #1
 80096c4:	77bb      	strb	r3, [r7, #30]
        break;
 80096c6:	bf00      	nop
    }

    if (pclk != 0U)
 80096c8:	69bb      	ldr	r3, [r7, #24]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d018      	beq.n	8009700 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	685b      	ldr	r3, [r3, #4]
 80096d2:	085a      	lsrs	r2, r3, #1
 80096d4:	69bb      	ldr	r3, [r7, #24]
 80096d6:	441a      	add	r2, r3
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	685b      	ldr	r3, [r3, #4]
 80096dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80096e0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80096e2:	693b      	ldr	r3, [r7, #16]
 80096e4:	2b0f      	cmp	r3, #15
 80096e6:	d909      	bls.n	80096fc <UART_SetConfig+0x4a0>
 80096e8:	693b      	ldr	r3, [r7, #16]
 80096ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096ee:	d205      	bcs.n	80096fc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80096f0:	693b      	ldr	r3, [r7, #16]
 80096f2:	b29a      	uxth	r2, r3
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	60da      	str	r2, [r3, #12]
 80096fa:	e001      	b.n	8009700 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80096fc:	2301      	movs	r3, #1
 80096fe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2200      	movs	r2, #0
 8009704:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2200      	movs	r2, #0
 800970a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800970c:	7fbb      	ldrb	r3, [r7, #30]
}
 800970e:	4618      	mov	r0, r3
 8009710:	3720      	adds	r7, #32
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}
 8009716:	bf00      	nop
 8009718:	40007c00 	.word	0x40007c00
 800971c:	40023800 	.word	0x40023800
 8009720:	00f42400 	.word	0x00f42400

08009724 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009724:	b480      	push	{r7}
 8009726:	b083      	sub	sp, #12
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009730:	f003 0301 	and.w	r3, r3, #1
 8009734:	2b00      	cmp	r3, #0
 8009736:	d00a      	beq.n	800974e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	685b      	ldr	r3, [r3, #4]
 800973e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	430a      	orrs	r2, r1
 800974c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009752:	f003 0302 	and.w	r3, r3, #2
 8009756:	2b00      	cmp	r3, #0
 8009758:	d00a      	beq.n	8009770 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	685b      	ldr	r3, [r3, #4]
 8009760:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	430a      	orrs	r2, r1
 800976e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009774:	f003 0304 	and.w	r3, r3, #4
 8009778:	2b00      	cmp	r3, #0
 800977a:	d00a      	beq.n	8009792 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	685b      	ldr	r3, [r3, #4]
 8009782:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	430a      	orrs	r2, r1
 8009790:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009796:	f003 0308 	and.w	r3, r3, #8
 800979a:	2b00      	cmp	r3, #0
 800979c:	d00a      	beq.n	80097b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	685b      	ldr	r3, [r3, #4]
 80097a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	430a      	orrs	r2, r1
 80097b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097b8:	f003 0310 	and.w	r3, r3, #16
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d00a      	beq.n	80097d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	689b      	ldr	r3, [r3, #8]
 80097c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	430a      	orrs	r2, r1
 80097d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097da:	f003 0320 	and.w	r3, r3, #32
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d00a      	beq.n	80097f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	689b      	ldr	r3, [r3, #8]
 80097e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	430a      	orrs	r2, r1
 80097f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009800:	2b00      	cmp	r3, #0
 8009802:	d01a      	beq.n	800983a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	685b      	ldr	r3, [r3, #4]
 800980a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	430a      	orrs	r2, r1
 8009818:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800981e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009822:	d10a      	bne.n	800983a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	685b      	ldr	r3, [r3, #4]
 800982a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	430a      	orrs	r2, r1
 8009838:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800983e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009842:	2b00      	cmp	r3, #0
 8009844:	d00a      	beq.n	800985c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	685b      	ldr	r3, [r3, #4]
 800984c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	430a      	orrs	r2, r1
 800985a:	605a      	str	r2, [r3, #4]
  }
}
 800985c:	bf00      	nop
 800985e:	370c      	adds	r7, #12
 8009860:	46bd      	mov	sp, r7
 8009862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009866:	4770      	bx	lr

08009868 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b086      	sub	sp, #24
 800986c:	af02      	add	r7, sp, #8
 800986e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2200      	movs	r2, #0
 8009874:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009878:	f7fa fe52 	bl	8004520 <HAL_GetTick>
 800987c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f003 0308 	and.w	r3, r3, #8
 8009888:	2b08      	cmp	r3, #8
 800988a:	d10e      	bne.n	80098aa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800988c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009890:	9300      	str	r3, [sp, #0]
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	2200      	movs	r2, #0
 8009896:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	f000 f81b 	bl	80098d6 <UART_WaitOnFlagUntilTimeout>
 80098a0:	4603      	mov	r3, r0
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d001      	beq.n	80098aa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80098a6:	2303      	movs	r3, #3
 80098a8:	e011      	b.n	80098ce <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2220      	movs	r2, #32
 80098ae:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2220      	movs	r2, #32
 80098b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2200      	movs	r2, #0
 80098bc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2200      	movs	r2, #0
 80098c2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2200      	movs	r2, #0
 80098c8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80098cc:	2300      	movs	r3, #0
}
 80098ce:	4618      	mov	r0, r3
 80098d0:	3710      	adds	r7, #16
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}

080098d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80098d6:	b580      	push	{r7, lr}
 80098d8:	b09c      	sub	sp, #112	; 0x70
 80098da:	af00      	add	r7, sp, #0
 80098dc:	60f8      	str	r0, [r7, #12]
 80098de:	60b9      	str	r1, [r7, #8]
 80098e0:	603b      	str	r3, [r7, #0]
 80098e2:	4613      	mov	r3, r2
 80098e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80098e6:	e0a7      	b.n	8009a38 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80098e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80098ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098ee:	f000 80a3 	beq.w	8009a38 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80098f2:	f7fa fe15 	bl	8004520 <HAL_GetTick>
 80098f6:	4602      	mov	r2, r0
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	1ad3      	subs	r3, r2, r3
 80098fc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80098fe:	429a      	cmp	r2, r3
 8009900:	d302      	bcc.n	8009908 <UART_WaitOnFlagUntilTimeout+0x32>
 8009902:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009904:	2b00      	cmp	r3, #0
 8009906:	d13f      	bne.n	8009988 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800990e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009910:	e853 3f00 	ldrex	r3, [r3]
 8009914:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009916:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009918:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800991c:	667b      	str	r3, [r7, #100]	; 0x64
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	461a      	mov	r2, r3
 8009924:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009926:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009928:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800992a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800992c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800992e:	e841 2300 	strex	r3, r2, [r1]
 8009932:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009934:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009936:	2b00      	cmp	r3, #0
 8009938:	d1e6      	bne.n	8009908 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	3308      	adds	r3, #8
 8009940:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009944:	e853 3f00 	ldrex	r3, [r3]
 8009948:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800994a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800994c:	f023 0301 	bic.w	r3, r3, #1
 8009950:	663b      	str	r3, [r7, #96]	; 0x60
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	3308      	adds	r3, #8
 8009958:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800995a:	64ba      	str	r2, [r7, #72]	; 0x48
 800995c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800995e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009960:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009962:	e841 2300 	strex	r3, r2, [r1]
 8009966:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009968:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800996a:	2b00      	cmp	r3, #0
 800996c:	d1e5      	bne.n	800993a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	2220      	movs	r2, #32
 8009972:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	2220      	movs	r2, #32
 8009978:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	2200      	movs	r2, #0
 8009980:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8009984:	2303      	movs	r3, #3
 8009986:	e068      	b.n	8009a5a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	f003 0304 	and.w	r3, r3, #4
 8009992:	2b00      	cmp	r3, #0
 8009994:	d050      	beq.n	8009a38 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	69db      	ldr	r3, [r3, #28]
 800999c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80099a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80099a4:	d148      	bne.n	8009a38 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80099ae:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099b8:	e853 3f00 	ldrex	r3, [r3]
 80099bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80099be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099c0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80099c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	461a      	mov	r2, r3
 80099cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80099ce:	637b      	str	r3, [r7, #52]	; 0x34
 80099d0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80099d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80099d6:	e841 2300 	strex	r3, r2, [r1]
 80099da:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80099dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d1e6      	bne.n	80099b0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	3308      	adds	r3, #8
 80099e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	e853 3f00 	ldrex	r3, [r3]
 80099f0:	613b      	str	r3, [r7, #16]
   return(result);
 80099f2:	693b      	ldr	r3, [r7, #16]
 80099f4:	f023 0301 	bic.w	r3, r3, #1
 80099f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	3308      	adds	r3, #8
 8009a00:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009a02:	623a      	str	r2, [r7, #32]
 8009a04:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a06:	69f9      	ldr	r1, [r7, #28]
 8009a08:	6a3a      	ldr	r2, [r7, #32]
 8009a0a:	e841 2300 	strex	r3, r2, [r1]
 8009a0e:	61bb      	str	r3, [r7, #24]
   return(result);
 8009a10:	69bb      	ldr	r3, [r7, #24]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d1e5      	bne.n	80099e2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	2220      	movs	r2, #32
 8009a1a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	2220      	movs	r2, #32
 8009a20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	2220      	movs	r2, #32
 8009a28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8009a34:	2303      	movs	r3, #3
 8009a36:	e010      	b.n	8009a5a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	69da      	ldr	r2, [r3, #28]
 8009a3e:	68bb      	ldr	r3, [r7, #8]
 8009a40:	4013      	ands	r3, r2
 8009a42:	68ba      	ldr	r2, [r7, #8]
 8009a44:	429a      	cmp	r2, r3
 8009a46:	bf0c      	ite	eq
 8009a48:	2301      	moveq	r3, #1
 8009a4a:	2300      	movne	r3, #0
 8009a4c:	b2db      	uxtb	r3, r3
 8009a4e:	461a      	mov	r2, r3
 8009a50:	79fb      	ldrb	r3, [r7, #7]
 8009a52:	429a      	cmp	r2, r3
 8009a54:	f43f af48 	beq.w	80098e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009a58:	2300      	movs	r3, #0
}
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	3770      	adds	r7, #112	; 0x70
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd80      	pop	{r7, pc}

08009a62 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009a62:	b480      	push	{r7}
 8009a64:	b095      	sub	sp, #84	; 0x54
 8009a66:	af00      	add	r7, sp, #0
 8009a68:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a72:	e853 3f00 	ldrex	r3, [r3]
 8009a76:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a7a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009a7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	461a      	mov	r2, r3
 8009a86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a88:	643b      	str	r3, [r7, #64]	; 0x40
 8009a8a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a8c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009a8e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009a90:	e841 2300 	strex	r3, r2, [r1]
 8009a94:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d1e6      	bne.n	8009a6a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	3308      	adds	r3, #8
 8009aa2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aa4:	6a3b      	ldr	r3, [r7, #32]
 8009aa6:	e853 3f00 	ldrex	r3, [r3]
 8009aaa:	61fb      	str	r3, [r7, #28]
   return(result);
 8009aac:	69fb      	ldr	r3, [r7, #28]
 8009aae:	f023 0301 	bic.w	r3, r3, #1
 8009ab2:	64bb      	str	r3, [r7, #72]	; 0x48
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	3308      	adds	r3, #8
 8009aba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009abc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009abe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ac0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009ac2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ac4:	e841 2300 	strex	r3, r2, [r1]
 8009ac8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d1e5      	bne.n	8009a9c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ad4:	2b01      	cmp	r3, #1
 8009ad6:	d118      	bne.n	8009b0a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	e853 3f00 	ldrex	r3, [r3]
 8009ae4:	60bb      	str	r3, [r7, #8]
   return(result);
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	f023 0310 	bic.w	r3, r3, #16
 8009aec:	647b      	str	r3, [r7, #68]	; 0x44
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	461a      	mov	r2, r3
 8009af4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009af6:	61bb      	str	r3, [r7, #24]
 8009af8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009afa:	6979      	ldr	r1, [r7, #20]
 8009afc:	69ba      	ldr	r2, [r7, #24]
 8009afe:	e841 2300 	strex	r3, r2, [r1]
 8009b02:	613b      	str	r3, [r7, #16]
   return(result);
 8009b04:	693b      	ldr	r3, [r7, #16]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d1e6      	bne.n	8009ad8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2220      	movs	r2, #32
 8009b0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2200      	movs	r2, #0
 8009b16:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8009b1e:	bf00      	nop
 8009b20:	3754      	adds	r7, #84	; 0x54
 8009b22:	46bd      	mov	sp, r7
 8009b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b28:	4770      	bx	lr

08009b2a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009b2a:	b580      	push	{r7, lr}
 8009b2c:	b084      	sub	sp, #16
 8009b2e:	af00      	add	r7, sp, #0
 8009b30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b36:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	2200      	movs	r2, #0
 8009b44:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009b48:	68f8      	ldr	r0, [r7, #12]
 8009b4a:	f7ff fb71 	bl	8009230 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b4e:	bf00      	nop
 8009b50:	3710      	adds	r7, #16
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}

08009b56 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009b56:	b580      	push	{r7, lr}
 8009b58:	b088      	sub	sp, #32
 8009b5a:	af00      	add	r7, sp, #0
 8009b5c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	e853 3f00 	ldrex	r3, [r3]
 8009b6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b72:	61fb      	str	r3, [r7, #28]
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	461a      	mov	r2, r3
 8009b7a:	69fb      	ldr	r3, [r7, #28]
 8009b7c:	61bb      	str	r3, [r7, #24]
 8009b7e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b80:	6979      	ldr	r1, [r7, #20]
 8009b82:	69ba      	ldr	r2, [r7, #24]
 8009b84:	e841 2300 	strex	r3, r2, [r1]
 8009b88:	613b      	str	r3, [r7, #16]
   return(result);
 8009b8a:	693b      	ldr	r3, [r7, #16]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d1e6      	bne.n	8009b5e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2220      	movs	r2, #32
 8009b94:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2200      	movs	r2, #0
 8009b9a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009b9c:	6878      	ldr	r0, [r7, #4]
 8009b9e:	f7ff fb3d 	bl	800921c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009ba2:	bf00      	nop
 8009ba4:	3720      	adds	r7, #32
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd80      	pop	{r7, pc}

08009baa <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8009baa:	b580      	push	{r7, lr}
 8009bac:	b084      	sub	sp, #16
 8009bae:	af00      	add	r7, sp, #0
 8009bb0:	6078      	str	r0, [r7, #4]
 8009bb2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8009bb8:	6839      	ldr	r1, [r7, #0]
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f001 fd28 	bl	800b610 <VL53L0X_get_offset_calibration_data_micro_meter>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8009bc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	3710      	adds	r7, #16
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}

08009bd0 <VL53L0X_SetDeviceAddress>:

/* End Group PAL General Functions */

/* Group PAL Init Functions */
VL53L0X_Error VL53L0X_SetDeviceAddress(VL53L0X_DEV Dev, uint8_t DeviceAddress)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b084      	sub	sp, #16
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
 8009bd8:	460b      	mov	r3, r1
 8009bda:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009bdc:	2300      	movs	r3, #0
 8009bde:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_I2C_SLAVE_DEVICE_ADDRESS,
 8009be0:	78fb      	ldrb	r3, [r7, #3]
 8009be2:	085b      	lsrs	r3, r3, #1
 8009be4:	b2db      	uxtb	r3, r3
 8009be6:	461a      	mov	r2, r3
 8009be8:	218a      	movs	r1, #138	; 0x8a
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	f004 ff46 	bl	800ea7c <VL53L0X_WrByte>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	73fb      	strb	r3, [r7, #15]
		DeviceAddress / 2);

	LOG_FUNCTION_END(Status);
	return Status;
 8009bf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	3710      	adds	r7, #16
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	bd80      	pop	{r7, pc}

08009c00 <VL53L0X_DataInit>:

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8009c00:	b5b0      	push	{r4, r5, r7, lr}
 8009c02:	b096      	sub	sp, #88	; 0x58
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009c08:	2300      	movs	r3, #0
 8009c0a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8009c0e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d107      	bne.n	8009c26 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8009c16:	2200      	movs	r2, #0
 8009c18:	2188      	movs	r1, #136	; 0x88
 8009c1a:	6878      	ldr	r0, [r7, #4]
 8009c1c:	f004 ff2e 	bl	800ea7c <VL53L0X_WrByte>
 8009c20:	4603      	mov	r3, r0
 8009c22:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	2200      	movs	r2, #0
 8009c2a:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009c34:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009c3e:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	4a9e      	ldr	r2, [pc, #632]	; (8009ec0 <VL53L0X_DataInit+0x2c0>)
 8009c46:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	4a9d      	ldr	r2, [pc, #628]	; (8009ec4 <VL53L0X_DataInit+0x2c4>)
 8009c4e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	2200      	movs	r2, #0
 8009c56:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8009c58:	f107 0310 	add.w	r3, r7, #16
 8009c5c:	4619      	mov	r1, r3
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f000 fac2 	bl	800a1e8 <VL53L0X_GetDeviceParameters>
 8009c64:	4603      	mov	r3, r0
 8009c66:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8009c6a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d112      	bne.n	8009c98 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8009c72:	2300      	movs	r3, #0
 8009c74:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8009c76:	2300      	movs	r3, #0
 8009c78:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	f103 0410 	add.w	r4, r3, #16
 8009c80:	f107 0510 	add.w	r5, r7, #16
 8009c84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009c86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009c88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009c8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009c8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009c8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009c90:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8009c94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2264      	movs	r2, #100	; 0x64
 8009c9c:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f44f 7261 	mov.w	r2, #900	; 0x384
 8009ca6:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8009cb0:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8009cba:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2201      	movs	r2, #1
 8009cc2:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8009cc6:	2201      	movs	r2, #1
 8009cc8:	2180      	movs	r1, #128	; 0x80
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f004 fed6 	bl	800ea7c <VL53L0X_WrByte>
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	461a      	mov	r2, r3
 8009cd4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009cd8:	4313      	orrs	r3, r2
 8009cda:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009cde:	2201      	movs	r2, #1
 8009ce0:	21ff      	movs	r1, #255	; 0xff
 8009ce2:	6878      	ldr	r0, [r7, #4]
 8009ce4:	f004 feca 	bl	800ea7c <VL53L0X_WrByte>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	461a      	mov	r2, r3
 8009cec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009cf0:	4313      	orrs	r3, r2
 8009cf2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	2100      	movs	r1, #0
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	f004 febe 	bl	800ea7c <VL53L0X_WrByte>
 8009d00:	4603      	mov	r3, r0
 8009d02:	461a      	mov	r2, r3
 8009d04:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009d08:	4313      	orrs	r3, r2
 8009d0a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8009d0e:	f107 030f 	add.w	r3, r7, #15
 8009d12:	461a      	mov	r2, r3
 8009d14:	2191      	movs	r1, #145	; 0x91
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	f004 ff32 	bl	800eb80 <VL53L0X_RdByte>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	461a      	mov	r2, r3
 8009d20:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009d24:	4313      	orrs	r3, r2
 8009d26:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8009d2a:	7bfa      	ldrb	r2, [r7, #15]
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8009d32:	2201      	movs	r2, #1
 8009d34:	2100      	movs	r1, #0
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	f004 fea0 	bl	800ea7c <VL53L0X_WrByte>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	461a      	mov	r2, r3
 8009d40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009d44:	4313      	orrs	r3, r2
 8009d46:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	21ff      	movs	r1, #255	; 0xff
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	f004 fe94 	bl	800ea7c <VL53L0X_WrByte>
 8009d54:	4603      	mov	r3, r0
 8009d56:	461a      	mov	r2, r3
 8009d58:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009d5c:	4313      	orrs	r3, r2
 8009d5e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8009d62:	2200      	movs	r2, #0
 8009d64:	2180      	movs	r1, #128	; 0x80
 8009d66:	6878      	ldr	r0, [r7, #4]
 8009d68:	f004 fe88 	bl	800ea7c <VL53L0X_WrByte>
 8009d6c:	4603      	mov	r3, r0
 8009d6e:	461a      	mov	r2, r3
 8009d70:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009d74:	4313      	orrs	r3, r2
 8009d76:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	653b      	str	r3, [r7, #80]	; 0x50
 8009d7e:	e014      	b.n	8009daa <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 8009d80:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d114      	bne.n	8009db2 <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8009d88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d8a:	b29b      	uxth	r3, r3
 8009d8c:	2201      	movs	r2, #1
 8009d8e:	4619      	mov	r1, r3
 8009d90:	6878      	ldr	r0, [r7, #4]
 8009d92:	f000 fd4d 	bl	800a830 <VL53L0X_SetLimitCheckEnable>
 8009d96:	4603      	mov	r3, r0
 8009d98:	461a      	mov	r2, r3
 8009d9a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009d9e:	4313      	orrs	r3, r2
 8009da0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8009da4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009da6:	3301      	adds	r3, #1
 8009da8:	653b      	str	r3, [r7, #80]	; 0x50
 8009daa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009dac:	2b05      	cmp	r3, #5
 8009dae:	dde7      	ble.n	8009d80 <VL53L0X_DataInit+0x180>
 8009db0:	e000      	b.n	8009db4 <VL53L0X_DataInit+0x1b4>
		else
			break;
 8009db2:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8009db4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d107      	bne.n	8009dcc <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	2102      	movs	r1, #2
 8009dc0:	6878      	ldr	r0, [r7, #4]
 8009dc2:	f000 fd35 	bl	800a830 <VL53L0X_SetLimitCheckEnable>
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8009dcc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d107      	bne.n	8009de4 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	2103      	movs	r1, #3
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	f000 fd29 	bl	800a830 <VL53L0X_SetLimitCheckEnable>
 8009dde:	4603      	mov	r3, r0
 8009de0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8009de4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d107      	bne.n	8009dfc <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8009dec:	2200      	movs	r2, #0
 8009dee:	2104      	movs	r1, #4
 8009df0:	6878      	ldr	r0, [r7, #4]
 8009df2:	f000 fd1d 	bl	800a830 <VL53L0X_SetLimitCheckEnable>
 8009df6:	4603      	mov	r3, r0
 8009df8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8009dfc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d107      	bne.n	8009e14 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8009e04:	2200      	movs	r2, #0
 8009e06:	2105      	movs	r1, #5
 8009e08:	6878      	ldr	r0, [r7, #4]
 8009e0a:	f000 fd11 	bl	800a830 <VL53L0X_SetLimitCheckEnable>
 8009e0e:	4603      	mov	r3, r0
 8009e10:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8009e14:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d108      	bne.n	8009e2e <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8009e1c:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8009e20:	2100      	movs	r1, #0
 8009e22:	6878      	ldr	r0, [r7, #4]
 8009e24:	f000 fdb4 	bl	800a990 <VL53L0X_SetLimitCheckValue>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8009e2e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d108      	bne.n	8009e48 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8009e36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009e3a:	2101      	movs	r1, #1
 8009e3c:	6878      	ldr	r0, [r7, #4]
 8009e3e:	f000 fda7 	bl	800a990 <VL53L0X_SetLimitCheckValue>
 8009e42:	4603      	mov	r3, r0
 8009e44:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009e48:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d108      	bne.n	8009e62 <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8009e50:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8009e54:	2102      	movs	r1, #2
 8009e56:	6878      	ldr	r0, [r7, #4]
 8009e58:	f000 fd9a 	bl	800a990 <VL53L0X_SetLimitCheckValue>
 8009e5c:	4603      	mov	r3, r0
 8009e5e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009e62:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d107      	bne.n	8009e7a <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	2103      	movs	r1, #3
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	f000 fd8e 	bl	800a990 <VL53L0X_SetLimitCheckValue>
 8009e74:	4603      	mov	r3, r0
 8009e76:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009e7a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d10f      	bne.n	8009ea2 <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	22ff      	movs	r2, #255	; 0xff
 8009e86:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8009e8a:	22ff      	movs	r2, #255	; 0xff
 8009e8c:	2101      	movs	r1, #1
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f004 fdf4 	bl	800ea7c <VL53L0X_WrByte>
 8009e94:	4603      	mov	r3, r0
 8009e96:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	2201      	movs	r2, #1
 8009e9e:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 8009ea2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d103      	bne.n	8009eb2 <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	2200      	movs	r2, #0
 8009eae:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 8009eb2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	3758      	adds	r7, #88	; 0x58
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bdb0      	pop	{r4, r5, r7, pc}
 8009ebe:	bf00      	nop
 8009ec0:	00016b85 	.word	0x00016b85
 8009ec4:	000970a4 	.word	0x000970a4

08009ec8 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8009ec8:	b5b0      	push	{r4, r5, r7, lr}
 8009eca:	b09e      	sub	sp, #120	; 0x78
 8009ecc:	af02      	add	r7, sp, #8
 8009ece:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8009ed6:	f107 031c 	add.w	r3, r7, #28
 8009eda:	2240      	movs	r2, #64	; 0x40
 8009edc:	2100      	movs	r1, #0
 8009ede:	4618      	mov	r0, r3
 8009ee0:	f008 fb3c 	bl	801255c <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8009ee8:	2300      	movs	r3, #0
 8009eea:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8009eec:	2300      	movs	r3, #0
 8009eee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 8009efa:	2300      	movs	r3, #0
 8009efc:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8009efe:	2300      	movs	r3, #0
 8009f00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8009f04:	2101      	movs	r1, #1
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	f002 fafc 	bl	800c504 <VL53L0X_get_info_from_device>
 8009f0c:	4603      	mov	r3, r0
 8009f0e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8009f18:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8009f20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8009f24:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009f28:	2b01      	cmp	r3, #1
 8009f2a:	d80d      	bhi.n	8009f48 <VL53L0X_StaticInit+0x80>
 8009f2c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009f30:	2b01      	cmp	r3, #1
 8009f32:	d102      	bne.n	8009f3a <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8009f34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009f36:	2b20      	cmp	r3, #32
 8009f38:	d806      	bhi.n	8009f48 <VL53L0X_StaticInit+0x80>
 8009f3a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d10e      	bne.n	8009f60 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 8009f42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009f44:	2b0c      	cmp	r3, #12
 8009f46:	d90b      	bls.n	8009f60 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8009f48:	f107 0218 	add.w	r2, r7, #24
 8009f4c:	f107 0314 	add.w	r3, r7, #20
 8009f50:	4619      	mov	r1, r3
 8009f52:	6878      	ldr	r0, [r7, #4]
 8009f54:	f001 fd58 	bl	800ba08 <VL53L0X_perform_ref_spad_management>
 8009f58:	4603      	mov	r3, r0
 8009f5a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8009f5e:	e009      	b.n	8009f74 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8009f60:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009f64:	461a      	mov	r2, r3
 8009f66:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8009f68:	6878      	ldr	r0, [r7, #4]
 8009f6a:	f001 ff59 	bl	800be20 <VL53L0X_set_reference_spads>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8009f74:	4b94      	ldr	r3, [pc, #592]	; (800a1c8 <VL53L0X_StaticInit+0x300>)
 8009f76:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8009f78:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d10f      	bne.n	8009fa0 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8009f86:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8009f8a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d104      	bne.n	8009f9c <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8009f98:	66bb      	str	r3, [r7, #104]	; 0x68
 8009f9a:	e001      	b.n	8009fa0 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8009f9c:	4b8a      	ldr	r3, [pc, #552]	; (800a1c8 <VL53L0X_StaticInit+0x300>)
 8009f9e:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8009fa0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d106      	bne.n	8009fb6 <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8009fa8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009faa:	6878      	ldr	r0, [r7, #4]
 8009fac:	f003 fe50 	bl	800dc50 <VL53L0X_load_tuning_settings>
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8009fb6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d10a      	bne.n	8009fd4 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	9300      	str	r3, [sp, #0]
 8009fc2:	2304      	movs	r3, #4
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	2100      	movs	r1, #0
 8009fc8:	6878      	ldr	r0, [r7, #4]
 8009fca:	f001 f909 	bl	800b1e0 <VL53L0X_SetGpioConfig>
 8009fce:	4603      	mov	r3, r0
 8009fd0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009fd4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d121      	bne.n	800a020 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009fdc:	2201      	movs	r2, #1
 8009fde:	21ff      	movs	r1, #255	; 0xff
 8009fe0:	6878      	ldr	r0, [r7, #4]
 8009fe2:	f004 fd4b 	bl	800ea7c <VL53L0X_WrByte>
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8009fec:	f107 031a 	add.w	r3, r7, #26
 8009ff0:	461a      	mov	r2, r3
 8009ff2:	2184      	movs	r1, #132	; 0x84
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f004 fded 	bl	800ebd4 <VL53L0X_RdWord>
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	461a      	mov	r2, r3
 8009ffe:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800a002:	4313      	orrs	r3, r2
 800a004:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a008:	2200      	movs	r2, #0
 800a00a:	21ff      	movs	r1, #255	; 0xff
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	f004 fd35 	bl	800ea7c <VL53L0X_WrByte>
 800a012:	4603      	mov	r3, r0
 800a014:	461a      	mov	r2, r3
 800a016:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800a01a:	4313      	orrs	r3, r2
 800a01c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a020:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a024:	2b00      	cmp	r3, #0
 800a026:	d105      	bne.n	800a034 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 800a028:	8b7b      	ldrh	r3, [r7, #26]
 800a02a:	011b      	lsls	r3, r3, #4
 800a02c:	461a      	mov	r2, r3
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 800a034:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d108      	bne.n	800a04e <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800a03c:	f107 031c 	add.w	r3, r7, #28
 800a040:	4619      	mov	r1, r3
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	f000 f8d0 	bl	800a1e8 <VL53L0X_GetDeviceParameters>
 800a048:	4603      	mov	r3, r0
 800a04a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 800a04e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a052:	2b00      	cmp	r3, #0
 800a054:	d110      	bne.n	800a078 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 800a056:	f107 0319 	add.w	r3, r7, #25
 800a05a:	4619      	mov	r1, r3
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	f000 f992 	bl	800a386 <VL53L0X_GetFractionEnable>
 800a062:	4603      	mov	r3, r0
 800a064:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 800a068:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d103      	bne.n	800a078 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 800a070:	7e7a      	ldrb	r2, [r7, #25]
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 800a078:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d10e      	bne.n	800a09e <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f103 0410 	add.w	r4, r3, #16
 800a086:	f107 051c 	add.w	r5, r7, #28
 800a08a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a08c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a08e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a090:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a092:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a094:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a096:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800a09a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 800a09e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d111      	bne.n	800a0ca <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 800a0a6:	f107 0319 	add.w	r3, r7, #25
 800a0aa:	461a      	mov	r2, r3
 800a0ac:	2101      	movs	r1, #1
 800a0ae:	6878      	ldr	r0, [r7, #4]
 800a0b0:	f004 fd66 	bl	800eb80 <VL53L0X_RdByte>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 800a0ba:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d103      	bne.n	800a0ca <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 800a0c2:	7e7a      	ldrb	r2, [r7, #25]
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 800a0ca:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d107      	bne.n	800a0e2 <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	2100      	movs	r1, #0
 800a0d6:	6878      	ldr	r0, [r7, #4]
 800a0d8:	f000 f9ca 	bl	800a470 <VL53L0X_SetSequenceStepEnable>
 800a0dc:	4603      	mov	r3, r0
 800a0de:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800a0e2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d107      	bne.n	800a0fa <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	2102      	movs	r1, #2
 800a0ee:	6878      	ldr	r0, [r7, #4]
 800a0f0:	f000 f9be 	bl	800a470 <VL53L0X_SetSequenceStepEnable>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 800a0fa:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d103      	bne.n	800a10a <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2203      	movs	r2, #3
 800a106:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800a10a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d109      	bne.n	800a126 <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 800a112:	f107 0313 	add.w	r3, r7, #19
 800a116:	461a      	mov	r2, r3
 800a118:	2100      	movs	r1, #0
 800a11a:	6878      	ldr	r0, [r7, #4]
 800a11c:	f000 f990 	bl	800a440 <VL53L0X_GetVcselPulsePeriod>
 800a120:	4603      	mov	r3, r0
 800a122:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a126:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d103      	bne.n	800a136 <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a12e:	7cfa      	ldrb	r2, [r7, #19]
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800a136:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d109      	bne.n	800a152 <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 800a13e:	f107 0313 	add.w	r3, r7, #19
 800a142:	461a      	mov	r2, r3
 800a144:	2101      	movs	r1, #1
 800a146:	6878      	ldr	r0, [r7, #4]
 800a148:	f000 f97a 	bl	800a440 <VL53L0X_GetVcselPulsePeriod>
 800a14c:	4603      	mov	r3, r0
 800a14e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a152:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a156:	2b00      	cmp	r3, #0
 800a158:	d103      	bne.n	800a162 <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a15a:	7cfa      	ldrb	r2, [r7, #19]
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800a162:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a166:	2b00      	cmp	r3, #0
 800a168:	d109      	bne.n	800a17e <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 800a16a:	f107 030c 	add.w	r3, r7, #12
 800a16e:	461a      	mov	r2, r3
 800a170:	2103      	movs	r1, #3
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	f002 ff48 	bl	800d008 <get_sequence_step_timeout>
 800a178:	4603      	mov	r3, r0
 800a17a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a17e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a182:	2b00      	cmp	r3, #0
 800a184:	d103      	bne.n	800a18e <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a186:	68fa      	ldr	r2, [r7, #12]
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800a18e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a192:	2b00      	cmp	r3, #0
 800a194:	d109      	bne.n	800a1aa <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 800a196:	f107 030c 	add.w	r3, r7, #12
 800a19a:	461a      	mov	r2, r3
 800a19c:	2104      	movs	r1, #4
 800a19e:	6878      	ldr	r0, [r7, #4]
 800a1a0:	f002 ff32 	bl	800d008 <get_sequence_step_timeout>
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a1aa:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d103      	bne.n	800a1ba <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a1b2:	68fa      	ldr	r2, [r7, #12]
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a1ba:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 800a1be:	4618      	mov	r0, r3
 800a1c0:	3770      	adds	r7, #112	; 0x70
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	bdb0      	pop	{r4, r5, r7, pc}
 800a1c6:	bf00      	nop
 800a1c8:	20000310 	.word	0x20000310

0800a1cc <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 800a1cc:	b480      	push	{r7}
 800a1ce:	b085      	sub	sp, #20
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 800a1d4:	239d      	movs	r3, #157	; 0x9d
 800a1d6:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 800a1d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a1dc:	4618      	mov	r0, r3
 800a1de:	3714      	adds	r7, #20
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e6:	4770      	bx	lr

0800a1e8 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b084      	sub	sp, #16
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
 800a1f0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	4619      	mov	r1, r3
 800a1fa:	6878      	ldr	r0, [r7, #4]
 800a1fc:	f000 f8b0 	bl	800a360 <VL53L0X_GetDeviceMode>
 800a200:	4603      	mov	r3, r0
 800a202:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800a204:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d107      	bne.n	800a21c <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	3308      	adds	r3, #8
 800a210:	4619      	mov	r1, r3
 800a212:	6878      	ldr	r0, [r7, #4]
 800a214:	f000 fa78 	bl	800a708 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 800a218:	4603      	mov	r3, r0
 800a21a:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 800a21c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d102      	bne.n	800a22a <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	2200      	movs	r2, #0
 800a228:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 800a22a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d107      	bne.n	800a242 <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	3310      	adds	r3, #16
 800a236:	4619      	mov	r1, r3
 800a238:	6878      	ldr	r0, [r7, #4]
 800a23a:	f000 faae 	bl	800a79a <VL53L0X_GetXTalkCompensationRateMegaCps>
 800a23e:	4603      	mov	r3, r0
 800a240:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 800a242:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d107      	bne.n	800a25a <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	3314      	adds	r3, #20
 800a24e:	4619      	mov	r1, r3
 800a250:	6878      	ldr	r0, [r7, #4]
 800a252:	f7ff fcaa 	bl	8009baa <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 800a256:	4603      	mov	r3, r0
 800a258:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 800a25a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d134      	bne.n	800a2cc <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800a262:	2300      	movs	r3, #0
 800a264:	60bb      	str	r3, [r7, #8]
 800a266:	e02a      	b.n	800a2be <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800a268:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d12a      	bne.n	800a2c6 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	b299      	uxth	r1, r3
 800a274:	68bb      	ldr	r3, [r7, #8]
 800a276:	3308      	adds	r3, #8
 800a278:	009b      	lsls	r3, r3, #2
 800a27a:	683a      	ldr	r2, [r7, #0]
 800a27c:	4413      	add	r3, r2
 800a27e:	3304      	adds	r3, #4
 800a280:	461a      	mov	r2, r3
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	f000 fbe6 	bl	800aa54 <VL53L0X_GetLimitCheckValue>
 800a288:	4603      	mov	r3, r0
 800a28a:	461a      	mov	r2, r3
 800a28c:	7bfb      	ldrb	r3, [r7, #15]
 800a28e:	4313      	orrs	r3, r2
 800a290:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800a292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d117      	bne.n	800a2ca <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 800a29a:	68bb      	ldr	r3, [r7, #8]
 800a29c:	b299      	uxth	r1, r3
 800a29e:	68bb      	ldr	r3, [r7, #8]
 800a2a0:	3318      	adds	r3, #24
 800a2a2:	683a      	ldr	r2, [r7, #0]
 800a2a4:	4413      	add	r3, r2
 800a2a6:	461a      	mov	r2, r3
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	f000 fb4d 	bl	800a948 <VL53L0X_GetLimitCheckEnable>
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	461a      	mov	r2, r3
 800a2b2:	7bfb      	ldrb	r3, [r7, #15]
 800a2b4:	4313      	orrs	r3, r2
 800a2b6:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	3301      	adds	r3, #1
 800a2bc:	60bb      	str	r3, [r7, #8]
 800a2be:	68bb      	ldr	r3, [r7, #8]
 800a2c0:	2b05      	cmp	r3, #5
 800a2c2:	ddd1      	ble.n	800a268 <VL53L0X_GetDeviceParameters+0x80>
 800a2c4:	e002      	b.n	800a2cc <VL53L0X_GetDeviceParameters+0xe4>
				break;
 800a2c6:	bf00      	nop
 800a2c8:	e000      	b.n	800a2cc <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 800a2ca:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a2cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d107      	bne.n	800a2e4 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	333c      	adds	r3, #60	; 0x3c
 800a2d8:	4619      	mov	r1, r3
 800a2da:	6878      	ldr	r0, [r7, #4]
 800a2dc:	f000 fc48 	bl	800ab70 <VL53L0X_GetWrapAroundCheckEnable>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 800a2e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d107      	bne.n	800a2fc <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	3304      	adds	r3, #4
 800a2f0:	4619      	mov	r1, r3
 800a2f2:	6878      	ldr	r0, [r7, #4]
 800a2f4:	f000 f879 	bl	800a3ea <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a2fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a300:	4618      	mov	r0, r3
 800a302:	3710      	adds	r7, #16
 800a304:	46bd      	mov	sp, r7
 800a306:	bd80      	pop	{r7, pc}

0800a308 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 800a308:	b480      	push	{r7}
 800a30a:	b085      	sub	sp, #20
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
 800a310:	460b      	mov	r3, r1
 800a312:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a314:	2300      	movs	r3, #0
 800a316:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 800a318:	78fb      	ldrb	r3, [r7, #3]
 800a31a:	2b15      	cmp	r3, #21
 800a31c:	bf8c      	ite	hi
 800a31e:	2201      	movhi	r2, #1
 800a320:	2200      	movls	r2, #0
 800a322:	b2d2      	uxtb	r2, r2
 800a324:	2a00      	cmp	r2, #0
 800a326:	d10e      	bne.n	800a346 <VL53L0X_SetDeviceMode+0x3e>
 800a328:	2201      	movs	r2, #1
 800a32a:	409a      	lsls	r2, r3
 800a32c:	4b0b      	ldr	r3, [pc, #44]	; (800a35c <VL53L0X_SetDeviceMode+0x54>)
 800a32e:	4013      	ands	r3, r2
 800a330:	2b00      	cmp	r3, #0
 800a332:	bf14      	ite	ne
 800a334:	2301      	movne	r3, #1
 800a336:	2300      	moveq	r3, #0
 800a338:	b2db      	uxtb	r3, r3
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d003      	beq.n	800a346 <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	78fa      	ldrb	r2, [r7, #3]
 800a342:	741a      	strb	r2, [r3, #16]
		break;
 800a344:	e001      	b.n	800a34a <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800a346:	23f8      	movs	r3, #248	; 0xf8
 800a348:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a34a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a34e:	4618      	mov	r0, r3
 800a350:	3714      	adds	r7, #20
 800a352:	46bd      	mov	sp, r7
 800a354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a358:	4770      	bx	lr
 800a35a:	bf00      	nop
 800a35c:	0030000b 	.word	0x0030000b

0800a360 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 800a360:	b480      	push	{r7}
 800a362:	b085      	sub	sp, #20
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
 800a368:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a36a:	2300      	movs	r3, #0
 800a36c:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	7c1a      	ldrb	r2, [r3, #16]
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800a376:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a37a:	4618      	mov	r0, r3
 800a37c:	3714      	adds	r7, #20
 800a37e:	46bd      	mov	sp, r7
 800a380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a384:	4770      	bx	lr

0800a386 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 800a386:	b580      	push	{r7, lr}
 800a388:	b084      	sub	sp, #16
 800a38a:	af00      	add	r7, sp, #0
 800a38c:	6078      	str	r0, [r7, #4]
 800a38e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a390:	2300      	movs	r3, #0
 800a392:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 800a394:	683a      	ldr	r2, [r7, #0]
 800a396:	2109      	movs	r1, #9
 800a398:	6878      	ldr	r0, [r7, #4]
 800a39a:	f004 fbf1 	bl	800eb80 <VL53L0X_RdByte>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800a3a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d106      	bne.n	800a3b8 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	781b      	ldrb	r3, [r3, #0]
 800a3ae:	f003 0301 	and.w	r3, r3, #1
 800a3b2:	b2da      	uxtb	r2, r3
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800a3b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a3bc:	4618      	mov	r0, r3
 800a3be:	3710      	adds	r7, #16
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	bd80      	pop	{r7, pc}

0800a3c4 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b084      	sub	sp, #16
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
 800a3cc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 800a3d2:	6839      	ldr	r1, [r7, #0]
 800a3d4:	6878      	ldr	r0, [r7, #4]
 800a3d6:	f003 faaa 	bl	800d92e <VL53L0X_set_measurement_timing_budget_micro_seconds>
 800a3da:	4603      	mov	r3, r0
 800a3dc:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 800a3de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	3710      	adds	r7, #16
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bd80      	pop	{r7, pc}

0800a3ea <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800a3ea:	b580      	push	{r7, lr}
 800a3ec:	b084      	sub	sp, #16
 800a3ee:	af00      	add	r7, sp, #0
 800a3f0:	6078      	str	r0, [r7, #4]
 800a3f2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 800a3f8:	6839      	ldr	r1, [r7, #0]
 800a3fa:	6878      	ldr	r0, [r7, #4]
 800a3fc:	f003 fb77 	bl	800daee <VL53L0X_get_measurement_timing_budget_micro_seconds>
 800a400:	4603      	mov	r3, r0
 800a402:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 800a404:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a408:	4618      	mov	r0, r3
 800a40a:	3710      	adds	r7, #16
 800a40c:	46bd      	mov	sp, r7
 800a40e:	bd80      	pop	{r7, pc}

0800a410 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b084      	sub	sp, #16
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
 800a418:	460b      	mov	r3, r1
 800a41a:	70fb      	strb	r3, [r7, #3]
 800a41c:	4613      	mov	r3, r2
 800a41e:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a420:	2300      	movs	r3, #0
 800a422:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 800a424:	78ba      	ldrb	r2, [r7, #2]
 800a426:	78fb      	ldrb	r3, [r7, #3]
 800a428:	4619      	mov	r1, r3
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	f002 ffbf 	bl	800d3ae <VL53L0X_set_vcsel_pulse_period>
 800a430:	4603      	mov	r3, r0
 800a432:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800a434:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a438:	4618      	mov	r0, r3
 800a43a:	3710      	adds	r7, #16
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bd80      	pop	{r7, pc}

0800a440 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b086      	sub	sp, #24
 800a444:	af00      	add	r7, sp, #0
 800a446:	60f8      	str	r0, [r7, #12]
 800a448:	460b      	mov	r3, r1
 800a44a:	607a      	str	r2, [r7, #4]
 800a44c:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a44e:	2300      	movs	r3, #0
 800a450:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 800a452:	7afb      	ldrb	r3, [r7, #11]
 800a454:	687a      	ldr	r2, [r7, #4]
 800a456:	4619      	mov	r1, r3
 800a458:	68f8      	ldr	r0, [r7, #12]
 800a45a:	f003 fa31 	bl	800d8c0 <VL53L0X_get_vcsel_pulse_period>
 800a45e:	4603      	mov	r3, r0
 800a460:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800a462:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a466:	4618      	mov	r0, r3
 800a468:	3718      	adds	r7, #24
 800a46a:	46bd      	mov	sp, r7
 800a46c:	bd80      	pop	{r7, pc}
	...

0800a470 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b086      	sub	sp, #24
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
 800a478:	460b      	mov	r3, r1
 800a47a:	70fb      	strb	r3, [r7, #3]
 800a47c:	4613      	mov	r3, r2
 800a47e:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a480:	2300      	movs	r3, #0
 800a482:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800a484:	2300      	movs	r3, #0
 800a486:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 800a488:	2300      	movs	r3, #0
 800a48a:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800a48c:	f107 030f 	add.w	r3, r7, #15
 800a490:	461a      	mov	r2, r3
 800a492:	2101      	movs	r1, #1
 800a494:	6878      	ldr	r0, [r7, #4]
 800a496:	f004 fb73 	bl	800eb80 <VL53L0X_RdByte>
 800a49a:	4603      	mov	r3, r0
 800a49c:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 800a49e:	7bfb      	ldrb	r3, [r7, #15]
 800a4a0:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 800a4a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d15a      	bne.n	800a560 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 800a4aa:	78bb      	ldrb	r3, [r7, #2]
 800a4ac:	2b01      	cmp	r3, #1
 800a4ae:	d12b      	bne.n	800a508 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 800a4b0:	78fb      	ldrb	r3, [r7, #3]
 800a4b2:	2b04      	cmp	r3, #4
 800a4b4:	d825      	bhi.n	800a502 <VL53L0X_SetSequenceStepEnable+0x92>
 800a4b6:	a201      	add	r2, pc, #4	; (adr r2, 800a4bc <VL53L0X_SetSequenceStepEnable+0x4c>)
 800a4b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4bc:	0800a4d1 	.word	0x0800a4d1
 800a4c0:	0800a4db 	.word	0x0800a4db
 800a4c4:	0800a4e5 	.word	0x0800a4e5
 800a4c8:	0800a4ef 	.word	0x0800a4ef
 800a4cc:	0800a4f9 	.word	0x0800a4f9
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 800a4d0:	7dbb      	ldrb	r3, [r7, #22]
 800a4d2:	f043 0310 	orr.w	r3, r3, #16
 800a4d6:	75bb      	strb	r3, [r7, #22]
				break;
 800a4d8:	e043      	b.n	800a562 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 800a4da:	7dbb      	ldrb	r3, [r7, #22]
 800a4dc:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 800a4e0:	75bb      	strb	r3, [r7, #22]
				break;
 800a4e2:	e03e      	b.n	800a562 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 800a4e4:	7dbb      	ldrb	r3, [r7, #22]
 800a4e6:	f043 0304 	orr.w	r3, r3, #4
 800a4ea:	75bb      	strb	r3, [r7, #22]
				break;
 800a4ec:	e039      	b.n	800a562 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 800a4ee:	7dbb      	ldrb	r3, [r7, #22]
 800a4f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4f4:	75bb      	strb	r3, [r7, #22]
				break;
 800a4f6:	e034      	b.n	800a562 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 800a4f8:	7dbb      	ldrb	r3, [r7, #22]
 800a4fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a4fe:	75bb      	strb	r3, [r7, #22]
				break;
 800a500:	e02f      	b.n	800a562 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a502:	23fc      	movs	r3, #252	; 0xfc
 800a504:	75fb      	strb	r3, [r7, #23]
 800a506:	e02c      	b.n	800a562 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 800a508:	78fb      	ldrb	r3, [r7, #3]
 800a50a:	2b04      	cmp	r3, #4
 800a50c:	d825      	bhi.n	800a55a <VL53L0X_SetSequenceStepEnable+0xea>
 800a50e:	a201      	add	r2, pc, #4	; (adr r2, 800a514 <VL53L0X_SetSequenceStepEnable+0xa4>)
 800a510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a514:	0800a529 	.word	0x0800a529
 800a518:	0800a533 	.word	0x0800a533
 800a51c:	0800a53d 	.word	0x0800a53d
 800a520:	0800a547 	.word	0x0800a547
 800a524:	0800a551 	.word	0x0800a551
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 800a528:	7dbb      	ldrb	r3, [r7, #22]
 800a52a:	f023 0310 	bic.w	r3, r3, #16
 800a52e:	75bb      	strb	r3, [r7, #22]
				break;
 800a530:	e017      	b.n	800a562 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 800a532:	7dbb      	ldrb	r3, [r7, #22]
 800a534:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 800a538:	75bb      	strb	r3, [r7, #22]
				break;
 800a53a:	e012      	b.n	800a562 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 800a53c:	7dbb      	ldrb	r3, [r7, #22]
 800a53e:	f023 0304 	bic.w	r3, r3, #4
 800a542:	75bb      	strb	r3, [r7, #22]
				break;
 800a544:	e00d      	b.n	800a562 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 800a546:	7dbb      	ldrb	r3, [r7, #22]
 800a548:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a54c:	75bb      	strb	r3, [r7, #22]
				break;
 800a54e:	e008      	b.n	800a562 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 800a550:	7dbb      	ldrb	r3, [r7, #22]
 800a552:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a556:	75bb      	strb	r3, [r7, #22]
				break;
 800a558:	e003      	b.n	800a562 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a55a:	23fc      	movs	r3, #252	; 0xfc
 800a55c:	75fb      	strb	r3, [r7, #23]
 800a55e:	e000      	b.n	800a562 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 800a560:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 800a562:	7bfb      	ldrb	r3, [r7, #15]
 800a564:	7dba      	ldrb	r2, [r7, #22]
 800a566:	429a      	cmp	r2, r3
 800a568:	d01e      	beq.n	800a5a8 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 800a56a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d107      	bne.n	800a582 <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 800a572:	7dbb      	ldrb	r3, [r7, #22]
 800a574:	461a      	mov	r2, r3
 800a576:	2101      	movs	r1, #1
 800a578:	6878      	ldr	r0, [r7, #4]
 800a57a:	f004 fa7f 	bl	800ea7c <VL53L0X_WrByte>
 800a57e:	4603      	mov	r3, r0
 800a580:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 800a582:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d103      	bne.n	800a592 <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	7dba      	ldrb	r2, [r7, #22]
 800a58e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 800a592:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d106      	bne.n	800a5a8 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	695b      	ldr	r3, [r3, #20]
 800a59e:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800a5a0:	6939      	ldr	r1, [r7, #16]
 800a5a2:	6878      	ldr	r0, [r7, #4]
 800a5a4:	f7ff ff0e 	bl	800a3c4 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800a5a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	3718      	adds	r7, #24
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	bd80      	pop	{r7, pc}

0800a5b4 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	b087      	sub	sp, #28
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	60f8      	str	r0, [r7, #12]
 800a5bc:	607b      	str	r3, [r7, #4]
 800a5be:	460b      	mov	r3, r1
 800a5c0:	72fb      	strb	r3, [r7, #11]
 800a5c2:	4613      	mov	r3, r2
 800a5c4:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 800a5d0:	7afb      	ldrb	r3, [r7, #11]
 800a5d2:	2b04      	cmp	r3, #4
 800a5d4:	d836      	bhi.n	800a644 <sequence_step_enabled+0x90>
 800a5d6:	a201      	add	r2, pc, #4	; (adr r2, 800a5dc <sequence_step_enabled+0x28>)
 800a5d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5dc:	0800a5f1 	.word	0x0800a5f1
 800a5e0:	0800a603 	.word	0x0800a603
 800a5e4:	0800a615 	.word	0x0800a615
 800a5e8:	0800a627 	.word	0x0800a627
 800a5ec:	0800a639 	.word	0x0800a639
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 800a5f0:	7abb      	ldrb	r3, [r7, #10]
 800a5f2:	111b      	asrs	r3, r3, #4
 800a5f4:	b2db      	uxtb	r3, r3
 800a5f6:	f003 0301 	and.w	r3, r3, #1
 800a5fa:	b2da      	uxtb	r2, r3
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	701a      	strb	r2, [r3, #0]
		break;
 800a600:	e022      	b.n	800a648 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 800a602:	7abb      	ldrb	r3, [r7, #10]
 800a604:	10db      	asrs	r3, r3, #3
 800a606:	b2db      	uxtb	r3, r3
 800a608:	f003 0301 	and.w	r3, r3, #1
 800a60c:	b2da      	uxtb	r2, r3
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	701a      	strb	r2, [r3, #0]
		break;
 800a612:	e019      	b.n	800a648 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 800a614:	7abb      	ldrb	r3, [r7, #10]
 800a616:	109b      	asrs	r3, r3, #2
 800a618:	b2db      	uxtb	r3, r3
 800a61a:	f003 0301 	and.w	r3, r3, #1
 800a61e:	b2da      	uxtb	r2, r3
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	701a      	strb	r2, [r3, #0]
		break;
 800a624:	e010      	b.n	800a648 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 800a626:	7abb      	ldrb	r3, [r7, #10]
 800a628:	119b      	asrs	r3, r3, #6
 800a62a:	b2db      	uxtb	r3, r3
 800a62c:	f003 0301 	and.w	r3, r3, #1
 800a630:	b2da      	uxtb	r2, r3
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	701a      	strb	r2, [r3, #0]
		break;
 800a636:	e007      	b.n	800a648 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 800a638:	7abb      	ldrb	r3, [r7, #10]
 800a63a:	09db      	lsrs	r3, r3, #7
 800a63c:	b2da      	uxtb	r2, r3
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	701a      	strb	r2, [r3, #0]
		break;
 800a642:	e001      	b.n	800a648 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a644:	23fc      	movs	r3, #252	; 0xfc
 800a646:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a648:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a64c:	4618      	mov	r0, r3
 800a64e:	371c      	adds	r7, #28
 800a650:	46bd      	mov	sp, r7
 800a652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a656:	4770      	bx	lr

0800a658 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b084      	sub	sp, #16
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
 800a660:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a662:	2300      	movs	r3, #0
 800a664:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 800a666:	2300      	movs	r3, #0
 800a668:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800a66a:	f107 030e 	add.w	r3, r7, #14
 800a66e:	461a      	mov	r2, r3
 800a670:	2101      	movs	r1, #1
 800a672:	6878      	ldr	r0, [r7, #4]
 800a674:	f004 fa84 	bl	800eb80 <VL53L0X_RdByte>
 800a678:	4603      	mov	r3, r0
 800a67a:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 800a67c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d107      	bne.n	800a694 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 800a684:	7bba      	ldrb	r2, [r7, #14]
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	2100      	movs	r1, #0
 800a68a:	6878      	ldr	r0, [r7, #4]
 800a68c:	f7ff ff92 	bl	800a5b4 <sequence_step_enabled>
 800a690:	4603      	mov	r3, r0
 800a692:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800a694:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d108      	bne.n	800a6ae <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 800a69c:	7bba      	ldrb	r2, [r7, #14]
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	3302      	adds	r3, #2
 800a6a2:	2101      	movs	r1, #1
 800a6a4:	6878      	ldr	r0, [r7, #4]
 800a6a6:	f7ff ff85 	bl	800a5b4 <sequence_step_enabled>
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800a6ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d108      	bne.n	800a6c8 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 800a6b6:	7bba      	ldrb	r2, [r7, #14]
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	3301      	adds	r3, #1
 800a6bc:	2102      	movs	r1, #2
 800a6be:	6878      	ldr	r0, [r7, #4]
 800a6c0:	f7ff ff78 	bl	800a5b4 <sequence_step_enabled>
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800a6c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d108      	bne.n	800a6e2 <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 800a6d0:	7bba      	ldrb	r2, [r7, #14]
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	3303      	adds	r3, #3
 800a6d6:	2103      	movs	r1, #3
 800a6d8:	6878      	ldr	r0, [r7, #4]
 800a6da:	f7ff ff6b 	bl	800a5b4 <sequence_step_enabled>
 800a6de:	4603      	mov	r3, r0
 800a6e0:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800a6e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d108      	bne.n	800a6fc <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 800a6ea:	7bba      	ldrb	r2, [r7, #14]
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	3304      	adds	r3, #4
 800a6f0:	2104      	movs	r1, #4
 800a6f2:	6878      	ldr	r0, [r7, #4]
 800a6f4:	f7ff ff5e 	bl	800a5b4 <sequence_step_enabled>
 800a6f8:	4603      	mov	r3, r0
 800a6fa:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a6fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a700:	4618      	mov	r0, r3
 800a702:	3710      	adds	r7, #16
 800a704:	46bd      	mov	sp, r7
 800a706:	bd80      	pop	{r7, pc}

0800a708 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b084      	sub	sp, #16
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
 800a710:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a712:	2300      	movs	r3, #0
 800a714:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 800a716:	f107 030c 	add.w	r3, r7, #12
 800a71a:	461a      	mov	r2, r3
 800a71c:	21f8      	movs	r1, #248	; 0xf8
 800a71e:	6878      	ldr	r0, [r7, #4]
 800a720:	f004 fa58 	bl	800ebd4 <VL53L0X_RdWord>
 800a724:	4603      	mov	r3, r0
 800a726:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 800a728:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d108      	bne.n	800a742 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 800a730:	f107 0308 	add.w	r3, r7, #8
 800a734:	461a      	mov	r2, r3
 800a736:	2104      	movs	r1, #4
 800a738:	6878      	ldr	r0, [r7, #4]
 800a73a:	f004 fa83 	bl	800ec44 <VL53L0X_RdDWord>
 800a73e:	4603      	mov	r3, r0
 800a740:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a742:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d10c      	bne.n	800a764 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 800a74a:	89bb      	ldrh	r3, [r7, #12]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d005      	beq.n	800a75c <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 800a750:	68bb      	ldr	r3, [r7, #8]
 800a752:	89ba      	ldrh	r2, [r7, #12]
 800a754:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 800a758:	683b      	ldr	r3, [r7, #0]
 800a75a:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	681a      	ldr	r2, [r3, #0]
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a764:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a768:	4618      	mov	r0, r3
 800a76a:	3710      	adds	r7, #16
 800a76c:	46bd      	mov	sp, r7
 800a76e:	bd80      	pop	{r7, pc}

0800a770 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 800a770:	b480      	push	{r7}
 800a772:	b085      	sub	sp, #20
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
 800a778:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a77a:	2300      	movs	r3, #0
 800a77c:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	7f1b      	ldrb	r3, [r3, #28]
 800a782:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	7bba      	ldrb	r2, [r7, #14]
 800a788:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800a78a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a78e:	4618      	mov	r0, r3
 800a790:	3714      	adds	r7, #20
 800a792:	46bd      	mov	sp, r7
 800a794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a798:	4770      	bx	lr

0800a79a <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 800a79a:	b580      	push	{r7, lr}
 800a79c:	b086      	sub	sp, #24
 800a79e:	af00      	add	r7, sp, #0
 800a7a0:	6078      	str	r0, [r7, #4]
 800a7a2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 800a7a8:	f107 030e 	add.w	r3, r7, #14
 800a7ac:	461a      	mov	r2, r3
 800a7ae:	2120      	movs	r1, #32
 800a7b0:	6878      	ldr	r0, [r7, #4]
 800a7b2:	f004 fa0f 	bl	800ebd4 <VL53L0X_RdWord>
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 800a7ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d118      	bne.n	800a7f4 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 800a7c2:	89fb      	ldrh	r3, [r7, #14]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d109      	bne.n	800a7dc <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	6a1b      	ldr	r3, [r3, #32]
 800a7cc:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	693a      	ldr	r2, [r7, #16]
 800a7d2:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	771a      	strb	r2, [r3, #28]
 800a7da:	e00b      	b.n	800a7f4 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 800a7dc:	89fb      	ldrh	r3, [r7, #14]
 800a7de:	00db      	lsls	r3, r3, #3
 800a7e0:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800a7e2:	683b      	ldr	r3, [r7, #0]
 800a7e4:	693a      	ldr	r2, [r7, #16]
 800a7e6:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	693a      	ldr	r2, [r7, #16]
 800a7ec:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	2201      	movs	r2, #1
 800a7f2:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a7f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	3718      	adds	r7, #24
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	bd80      	pop	{r7, pc}

0800a800 <VL53L0X_SetRefCalibration>:

VL53L0X_Error VL53L0X_SetRefCalibration(VL53L0X_DEV Dev, uint8_t VhvSettings,
	uint8_t PhaseCal)
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b084      	sub	sp, #16
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
 800a808:	460b      	mov	r3, r1
 800a80a:	70fb      	strb	r3, [r7, #3]
 800a80c:	4613      	mov	r3, r2
 800a80e:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a810:	2300      	movs	r3, #0
 800a812:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_ref_calibration(Dev, VhvSettings, PhaseCal);
 800a814:	78ba      	ldrb	r2, [r7, #2]
 800a816:	78fb      	ldrb	r3, [r7, #3]
 800a818:	4619      	mov	r1, r3
 800a81a:	6878      	ldr	r0, [r7, #4]
 800a81c:	f001 fd82 	bl	800c324 <VL53L0X_set_ref_calibration>
 800a820:	4603      	mov	r3, r0
 800a822:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800a824:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a828:	4618      	mov	r0, r3
 800a82a:	3710      	adds	r7, #16
 800a82c:	46bd      	mov	sp, r7
 800a82e:	bd80      	pop	{r7, pc}

0800a830 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b086      	sub	sp, #24
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
 800a838:	460b      	mov	r3, r1
 800a83a:	807b      	strh	r3, [r7, #2]
 800a83c:	4613      	mov	r3, r2
 800a83e:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a840:	2300      	movs	r3, #0
 800a842:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 800a844:	2300      	movs	r3, #0
 800a846:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 800a848:	2300      	movs	r3, #0
 800a84a:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 800a84c:	2300      	movs	r3, #0
 800a84e:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800a850:	887b      	ldrh	r3, [r7, #2]
 800a852:	2b05      	cmp	r3, #5
 800a854:	d902      	bls.n	800a85c <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a856:	23fc      	movs	r3, #252	; 0xfc
 800a858:	75fb      	strb	r3, [r7, #23]
 800a85a:	e05b      	b.n	800a914 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 800a85c:	787b      	ldrb	r3, [r7, #1]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d106      	bne.n	800a870 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 800a862:	2300      	movs	r3, #0
 800a864:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 800a866:	2300      	movs	r3, #0
 800a868:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 800a86a:	2301      	movs	r3, #1
 800a86c:	73bb      	strb	r3, [r7, #14]
 800a86e:	e00a      	b.n	800a886 <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800a870:	887b      	ldrh	r3, [r7, #2]
 800a872:	687a      	ldr	r2, [r7, #4]
 800a874:	330c      	adds	r3, #12
 800a876:	009b      	lsls	r3, r3, #2
 800a878:	4413      	add	r3, r2
 800a87a:	685b      	ldr	r3, [r3, #4]
 800a87c:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 800a87e:	2300      	movs	r3, #0
 800a880:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 800a882:	2301      	movs	r3, #1
 800a884:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 800a886:	887b      	ldrh	r3, [r7, #2]
 800a888:	2b05      	cmp	r3, #5
 800a88a:	d841      	bhi.n	800a910 <VL53L0X_SetLimitCheckEnable+0xe0>
 800a88c:	a201      	add	r2, pc, #4	; (adr r2, 800a894 <VL53L0X_SetLimitCheckEnable+0x64>)
 800a88e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a892:	bf00      	nop
 800a894:	0800a8ad 	.word	0x0800a8ad
 800a898:	0800a8b7 	.word	0x0800a8b7
 800a89c:	0800a8cd 	.word	0x0800a8cd
 800a8a0:	0800a8d7 	.word	0x0800a8d7
 800a8a4:	0800a8e1 	.word	0x0800a8e1
 800a8a8:	0800a8f9 	.word	0x0800a8f9

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	7bfa      	ldrb	r2, [r7, #15]
 800a8b0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 800a8b4:	e02e      	b.n	800a914 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 800a8b6:	693b      	ldr	r3, [r7, #16]
 800a8b8:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800a8ba:	b29b      	uxth	r3, r3
 800a8bc:	461a      	mov	r2, r3
 800a8be:	2144      	movs	r1, #68	; 0x44
 800a8c0:	6878      	ldr	r0, [r7, #4]
 800a8c2:	f004 f8ff 	bl	800eac4 <VL53L0X_WrWord>
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	75fb      	strb	r3, [r7, #23]

			break;
 800a8ca:	e023      	b.n	800a914 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	7bfa      	ldrb	r2, [r7, #15]
 800a8d0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 800a8d4:	e01e      	b.n	800a914 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	7bfa      	ldrb	r2, [r7, #15]
 800a8da:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 800a8de:	e019      	b.n	800a914 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 800a8e0:	7bbb      	ldrb	r3, [r7, #14]
 800a8e2:	005b      	lsls	r3, r3, #1
 800a8e4:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800a8e6:	7b7b      	ldrb	r3, [r7, #13]
 800a8e8:	22fe      	movs	r2, #254	; 0xfe
 800a8ea:	2160      	movs	r1, #96	; 0x60
 800a8ec:	6878      	ldr	r0, [r7, #4]
 800a8ee:	f004 f913 	bl	800eb18 <VL53L0X_UpdateByte>
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 800a8f6:	e00d      	b.n	800a914 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 800a8f8:	7bbb      	ldrb	r3, [r7, #14]
 800a8fa:	011b      	lsls	r3, r3, #4
 800a8fc:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800a8fe:	7b7b      	ldrb	r3, [r7, #13]
 800a900:	22ef      	movs	r2, #239	; 0xef
 800a902:	2160      	movs	r1, #96	; 0x60
 800a904:	6878      	ldr	r0, [r7, #4]
 800a906:	f004 f907 	bl	800eb18 <VL53L0X_UpdateByte>
 800a90a:	4603      	mov	r3, r0
 800a90c:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 800a90e:	e001      	b.n	800a914 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a910:	23fc      	movs	r3, #252	; 0xfc
 800a912:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a914:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d10f      	bne.n	800a93c <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 800a91c:	787b      	ldrb	r3, [r7, #1]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d106      	bne.n	800a930 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800a922:	887b      	ldrh	r3, [r7, #2]
 800a924:	687a      	ldr	r2, [r7, #4]
 800a926:	4413      	add	r3, r2
 800a928:	2200      	movs	r2, #0
 800a92a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800a92e:	e005      	b.n	800a93c <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800a930:	887b      	ldrh	r3, [r7, #2]
 800a932:	687a      	ldr	r2, [r7, #4]
 800a934:	4413      	add	r3, r2
 800a936:	2201      	movs	r2, #1
 800a938:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a93c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a940:	4618      	mov	r0, r3
 800a942:	3718      	adds	r7, #24
 800a944:	46bd      	mov	sp, r7
 800a946:	bd80      	pop	{r7, pc}

0800a948 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 800a948:	b480      	push	{r7}
 800a94a:	b087      	sub	sp, #28
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	60f8      	str	r0, [r7, #12]
 800a950:	460b      	mov	r3, r1
 800a952:	607a      	str	r2, [r7, #4]
 800a954:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a956:	2300      	movs	r3, #0
 800a958:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800a95a:	897b      	ldrh	r3, [r7, #10]
 800a95c:	2b05      	cmp	r3, #5
 800a95e:	d905      	bls.n	800a96c <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a960:	23fc      	movs	r3, #252	; 0xfc
 800a962:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2200      	movs	r2, #0
 800a968:	701a      	strb	r2, [r3, #0]
 800a96a:	e008      	b.n	800a97e <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800a96c:	897b      	ldrh	r3, [r7, #10]
 800a96e:	68fa      	ldr	r2, [r7, #12]
 800a970:	4413      	add	r3, r2
 800a972:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a976:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	7dba      	ldrb	r2, [r7, #22]
 800a97c:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a97e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a982:	4618      	mov	r0, r3
 800a984:	371c      	adds	r7, #28
 800a986:	46bd      	mov	sp, r7
 800a988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98c:	4770      	bx	lr
	...

0800a990 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b086      	sub	sp, #24
 800a994:	af00      	add	r7, sp, #0
 800a996:	60f8      	str	r0, [r7, #12]
 800a998:	460b      	mov	r3, r1
 800a99a:	607a      	str	r2, [r7, #4]
 800a99c:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a99e:	2300      	movs	r3, #0
 800a9a0:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 800a9a2:	897b      	ldrh	r3, [r7, #10]
 800a9a4:	68fa      	ldr	r2, [r7, #12]
 800a9a6:	4413      	add	r3, r2
 800a9a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a9ac:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 800a9ae:	7dbb      	ldrb	r3, [r7, #22]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d107      	bne.n	800a9c4 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800a9b4:	897b      	ldrh	r3, [r7, #10]
 800a9b6:	68fa      	ldr	r2, [r7, #12]
 800a9b8:	330c      	adds	r3, #12
 800a9ba:	009b      	lsls	r3, r3, #2
 800a9bc:	4413      	add	r3, r2
 800a9be:	687a      	ldr	r2, [r7, #4]
 800a9c0:	605a      	str	r2, [r3, #4]
 800a9c2:	e040      	b.n	800aa46 <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 800a9c4:	897b      	ldrh	r3, [r7, #10]
 800a9c6:	2b05      	cmp	r3, #5
 800a9c8:	d830      	bhi.n	800aa2c <VL53L0X_SetLimitCheckValue+0x9c>
 800a9ca:	a201      	add	r2, pc, #4	; (adr r2, 800a9d0 <VL53L0X_SetLimitCheckValue+0x40>)
 800a9cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9d0:	0800a9e9 	.word	0x0800a9e9
 800a9d4:	0800a9f1 	.word	0x0800a9f1
 800a9d8:	0800aa07 	.word	0x0800aa07
 800a9dc:	0800aa0f 	.word	0x0800aa0f
 800a9e0:	0800aa17 	.word	0x0800aa17
 800a9e4:	0800aa17 	.word	0x0800aa17

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	687a      	ldr	r2, [r7, #4]
 800a9ec:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 800a9ee:	e01f      	b.n	800aa30 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800a9f4:	b29b      	uxth	r3, r3
 800a9f6:	461a      	mov	r2, r3
 800a9f8:	2144      	movs	r1, #68	; 0x44
 800a9fa:	68f8      	ldr	r0, [r7, #12]
 800a9fc:	f004 f862 	bl	800eac4 <VL53L0X_WrWord>
 800aa00:	4603      	mov	r3, r0
 800aa02:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800aa04:	e014      	b.n	800aa30 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	687a      	ldr	r2, [r7, #4]
 800aa0a:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 800aa0c:	e010      	b.n	800aa30 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	687a      	ldr	r2, [r7, #4]
 800aa12:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 800aa14:	e00c      	b.n	800aa30 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800aa1a:	b29b      	uxth	r3, r3
 800aa1c:	461a      	mov	r2, r3
 800aa1e:	2164      	movs	r1, #100	; 0x64
 800aa20:	68f8      	ldr	r0, [r7, #12]
 800aa22:	f004 f84f 	bl	800eac4 <VL53L0X_WrWord>
 800aa26:	4603      	mov	r3, r0
 800aa28:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800aa2a:	e001      	b.n	800aa30 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800aa2c:	23fc      	movs	r3, #252	; 0xfc
 800aa2e:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 800aa30:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d106      	bne.n	800aa46 <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800aa38:	897b      	ldrh	r3, [r7, #10]
 800aa3a:	68fa      	ldr	r2, [r7, #12]
 800aa3c:	330c      	adds	r3, #12
 800aa3e:	009b      	lsls	r3, r3, #2
 800aa40:	4413      	add	r3, r2
 800aa42:	687a      	ldr	r2, [r7, #4]
 800aa44:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800aa46:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	3718      	adds	r7, #24
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	bd80      	pop	{r7, pc}
 800aa52:	bf00      	nop

0800aa54 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b088      	sub	sp, #32
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	60f8      	str	r0, [r7, #12]
 800aa5c:	460b      	mov	r3, r1
 800aa5e:	607a      	str	r2, [r7, #4]
 800aa60:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aa62:	2300      	movs	r3, #0
 800aa64:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 800aa66:	2300      	movs	r3, #0
 800aa68:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800aa6a:	897b      	ldrh	r3, [r7, #10]
 800aa6c:	2b05      	cmp	r3, #5
 800aa6e:	d847      	bhi.n	800ab00 <VL53L0X_GetLimitCheckValue+0xac>
 800aa70:	a201      	add	r2, pc, #4	; (adr r2, 800aa78 <VL53L0X_GetLimitCheckValue+0x24>)
 800aa72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa76:	bf00      	nop
 800aa78:	0800aa91 	.word	0x0800aa91
 800aa7c:	0800aa9d 	.word	0x0800aa9d
 800aa80:	0800aac3 	.word	0x0800aac3
 800aa84:	0800aacf 	.word	0x0800aacf
 800aa88:	0800aadb 	.word	0x0800aadb
 800aa8c:	0800aadb 	.word	0x0800aadb

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa94:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 800aa96:	2300      	movs	r3, #0
 800aa98:	77bb      	strb	r3, [r7, #30]
		break;
 800aa9a:	e033      	b.n	800ab04 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800aa9c:	f107 0316 	add.w	r3, r7, #22
 800aaa0:	461a      	mov	r2, r3
 800aaa2:	2144      	movs	r1, #68	; 0x44
 800aaa4:	68f8      	ldr	r0, [r7, #12]
 800aaa6:	f004 f895 	bl	800ebd4 <VL53L0X_RdWord>
 800aaaa:	4603      	mov	r3, r0
 800aaac:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800aaae:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d102      	bne.n	800aabc <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800aab6:	8afb      	ldrh	r3, [r7, #22]
 800aab8:	025b      	lsls	r3, r3, #9
 800aaba:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 800aabc:	2301      	movs	r3, #1
 800aabe:	77bb      	strb	r3, [r7, #30]
		break;
 800aac0:	e020      	b.n	800ab04 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aac6:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 800aac8:	2300      	movs	r3, #0
 800aaca:	77bb      	strb	r3, [r7, #30]
		break;
 800aacc:	e01a      	b.n	800ab04 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aad2:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 800aad4:	2300      	movs	r3, #0
 800aad6:	77bb      	strb	r3, [r7, #30]
		break;
 800aad8:	e014      	b.n	800ab04 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800aada:	f107 0316 	add.w	r3, r7, #22
 800aade:	461a      	mov	r2, r3
 800aae0:	2164      	movs	r1, #100	; 0x64
 800aae2:	68f8      	ldr	r0, [r7, #12]
 800aae4:	f004 f876 	bl	800ebd4 <VL53L0X_RdWord>
 800aae8:	4603      	mov	r3, r0
 800aaea:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800aaec:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d102      	bne.n	800aafa <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800aaf4:	8afb      	ldrh	r3, [r7, #22]
 800aaf6:	025b      	lsls	r3, r3, #9
 800aaf8:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 800aafa:	2300      	movs	r3, #0
 800aafc:	77bb      	strb	r3, [r7, #30]
		break;
 800aafe:	e001      	b.n	800ab04 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ab00:	23fc      	movs	r3, #252	; 0xfc
 800ab02:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ab04:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d12a      	bne.n	800ab62 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 800ab0c:	7fbb      	ldrb	r3, [r7, #30]
 800ab0e:	2b01      	cmp	r3, #1
 800ab10:	d124      	bne.n	800ab5c <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 800ab12:	69bb      	ldr	r3, [r7, #24]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d110      	bne.n	800ab3a <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 800ab18:	897b      	ldrh	r3, [r7, #10]
 800ab1a:	68fa      	ldr	r2, [r7, #12]
 800ab1c:	330c      	adds	r3, #12
 800ab1e:	009b      	lsls	r3, r3, #2
 800ab20:	4413      	add	r3, r2
 800ab22:	685b      	ldr	r3, [r3, #4]
 800ab24:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	69ba      	ldr	r2, [r7, #24]
 800ab2a:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800ab2c:	897b      	ldrh	r3, [r7, #10]
 800ab2e:	68fa      	ldr	r2, [r7, #12]
 800ab30:	4413      	add	r3, r2
 800ab32:	2200      	movs	r2, #0
 800ab34:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800ab38:	e013      	b.n	800ab62 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	69ba      	ldr	r2, [r7, #24]
 800ab3e:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800ab40:	897b      	ldrh	r3, [r7, #10]
 800ab42:	68fa      	ldr	r2, [r7, #12]
 800ab44:	330c      	adds	r3, #12
 800ab46:	009b      	lsls	r3, r3, #2
 800ab48:	4413      	add	r3, r2
 800ab4a:	69ba      	ldr	r2, [r7, #24]
 800ab4c:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800ab4e:	897b      	ldrh	r3, [r7, #10]
 800ab50:	68fa      	ldr	r2, [r7, #12]
 800ab52:	4413      	add	r3, r2
 800ab54:	2201      	movs	r2, #1
 800ab56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800ab5a:	e002      	b.n	800ab62 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	69ba      	ldr	r2, [r7, #24]
 800ab60:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ab62:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800ab66:	4618      	mov	r0, r3
 800ab68:	3720      	adds	r7, #32
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	bd80      	pop	{r7, pc}
 800ab6e:	bf00      	nop

0800ab70 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b084      	sub	sp, #16
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
 800ab78:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 800ab7e:	f107 030e 	add.w	r3, r7, #14
 800ab82:	461a      	mov	r2, r3
 800ab84:	2101      	movs	r1, #1
 800ab86:	6878      	ldr	r0, [r7, #4]
 800ab88:	f003 fffa 	bl	800eb80 <VL53L0X_RdByte>
 800ab8c:	4603      	mov	r3, r0
 800ab8e:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 800ab90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d10e      	bne.n	800abb6 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 800ab98:	7bba      	ldrb	r2, [r7, #14]
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 800aba0:	7bbb      	ldrb	r3, [r7, #14]
 800aba2:	b25b      	sxtb	r3, r3
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	da03      	bge.n	800abb0 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	2201      	movs	r2, #1
 800abac:	701a      	strb	r2, [r3, #0]
 800abae:	e002      	b.n	800abb6 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	2200      	movs	r2, #0
 800abb4:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800abb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d104      	bne.n	800abc8 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	781a      	ldrb	r2, [r3, #0]
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800abc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800abcc:	4618      	mov	r0, r3
 800abce:	3710      	adds	r7, #16
 800abd0:	46bd      	mov	sp, r7
 800abd2:	bd80      	pop	{r7, pc}

0800abd4 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b084      	sub	sp, #16
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800abdc:	2300      	movs	r3, #0
 800abde:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800abe0:	f107 030e 	add.w	r3, r7, #14
 800abe4:	4619      	mov	r1, r3
 800abe6:	6878      	ldr	r0, [r7, #4]
 800abe8:	f7ff fbba 	bl	800a360 <VL53L0X_GetDeviceMode>
 800abec:	4603      	mov	r3, r0
 800abee:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800abf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d107      	bne.n	800ac08 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800abf8:	7bbb      	ldrb	r3, [r7, #14]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d104      	bne.n	800ac08 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 800abfe:	6878      	ldr	r0, [r7, #4]
 800ac00:	f000 f898 	bl	800ad34 <VL53L0X_StartMeasurement>
 800ac04:	4603      	mov	r3, r0
 800ac06:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800ac08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d104      	bne.n	800ac1a <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800ac10:	6878      	ldr	r0, [r7, #4]
 800ac12:	f001 fbaa 	bl	800c36a <VL53L0X_measurement_poll_for_completion>
 800ac16:	4603      	mov	r3, r0
 800ac18:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800ac1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d106      	bne.n	800ac30 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800ac22:	7bbb      	ldrb	r3, [r7, #14]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d103      	bne.n	800ac30 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2203      	movs	r2, #3
 800ac2c:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 800ac30:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ac34:	4618      	mov	r0, r3
 800ac36:	3710      	adds	r7, #16
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	bd80      	pop	{r7, pc}

0800ac3c <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b086      	sub	sp, #24
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	60f8      	str	r0, [r7, #12]
 800ac44:	60b9      	str	r1, [r7, #8]
 800ac46:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ac48:	2300      	movs	r3, #0
 800ac4a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 800ac4c:	2301      	movs	r3, #1
 800ac4e:	687a      	ldr	r2, [r7, #4]
 800ac50:	68b9      	ldr	r1, [r7, #8]
 800ac52:	68f8      	ldr	r0, [r7, #12]
 800ac54:	f001 fb29 	bl	800c2aa <VL53L0X_perform_ref_calibration>
 800ac58:	4603      	mov	r3, r0
 800ac5a:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 800ac5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ac60:	4618      	mov	r0, r3
 800ac62:	3718      	adds	r7, #24
 800ac64:	46bd      	mov	sp, r7
 800ac66:	bd80      	pop	{r7, pc}

0800ac68 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b086      	sub	sp, #24
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
 800ac70:	460b      	mov	r3, r1
 800ac72:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ac74:	2300      	movs	r3, #0
 800ac76:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800ac7e:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 800ac80:	7dbb      	ldrb	r3, [r7, #22]
 800ac82:	2b01      	cmp	r3, #1
 800ac84:	d005      	beq.n	800ac92 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 800ac86:	7dbb      	ldrb	r3, [r7, #22]
 800ac88:	2b02      	cmp	r3, #2
 800ac8a:	d002      	beq.n	800ac92 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 800ac8c:	7dbb      	ldrb	r3, [r7, #22]
 800ac8e:	2b03      	cmp	r3, #3
 800ac90:	d147      	bne.n	800ad22 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 800ac92:	f107 030c 	add.w	r3, r7, #12
 800ac96:	f107 0210 	add.w	r2, r7, #16
 800ac9a:	2101      	movs	r1, #1
 800ac9c:	6878      	ldr	r0, [r7, #4]
 800ac9e:	f000 fbc3 	bl	800b428 <VL53L0X_GetInterruptThresholds>
 800aca2:	4603      	mov	r3, r0
 800aca4:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 800aca6:	693b      	ldr	r3, [r7, #16]
 800aca8:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 800acac:	d803      	bhi.n	800acb6 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 800acae:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 800acb0:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 800acb4:	d935      	bls.n	800ad22 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 800acb6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d131      	bne.n	800ad22 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 800acbe:	78fb      	ldrb	r3, [r7, #3]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d006      	beq.n	800acd2 <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 800acc4:	491a      	ldr	r1, [pc, #104]	; (800ad30 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 800acc6:	6878      	ldr	r0, [r7, #4]
 800acc8:	f002 ffc2 	bl	800dc50 <VL53L0X_load_tuning_settings>
 800accc:	4603      	mov	r3, r0
 800acce:	75fb      	strb	r3, [r7, #23]
 800acd0:	e027      	b.n	800ad22 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 800acd2:	2204      	movs	r2, #4
 800acd4:	21ff      	movs	r1, #255	; 0xff
 800acd6:	6878      	ldr	r0, [r7, #4]
 800acd8:	f003 fed0 	bl	800ea7c <VL53L0X_WrByte>
 800acdc:	4603      	mov	r3, r0
 800acde:	461a      	mov	r2, r3
 800ace0:	7dfb      	ldrb	r3, [r7, #23]
 800ace2:	4313      	orrs	r3, r2
 800ace4:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 800ace6:	2200      	movs	r2, #0
 800ace8:	2170      	movs	r1, #112	; 0x70
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	f003 fec6 	bl	800ea7c <VL53L0X_WrByte>
 800acf0:	4603      	mov	r3, r0
 800acf2:	461a      	mov	r2, r3
 800acf4:	7dfb      	ldrb	r3, [r7, #23]
 800acf6:	4313      	orrs	r3, r2
 800acf8:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800acfa:	2200      	movs	r2, #0
 800acfc:	21ff      	movs	r1, #255	; 0xff
 800acfe:	6878      	ldr	r0, [r7, #4]
 800ad00:	f003 febc 	bl	800ea7c <VL53L0X_WrByte>
 800ad04:	4603      	mov	r3, r0
 800ad06:	461a      	mov	r2, r3
 800ad08:	7dfb      	ldrb	r3, [r7, #23]
 800ad0a:	4313      	orrs	r3, r2
 800ad0c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800ad0e:	2200      	movs	r2, #0
 800ad10:	2180      	movs	r1, #128	; 0x80
 800ad12:	6878      	ldr	r0, [r7, #4]
 800ad14:	f003 feb2 	bl	800ea7c <VL53L0X_WrByte>
 800ad18:	4603      	mov	r3, r0
 800ad1a:	461a      	mov	r2, r3
 800ad1c:	7dfb      	ldrb	r3, [r7, #23]
 800ad1e:	4313      	orrs	r3, r2
 800ad20:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 800ad22:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800ad26:	4618      	mov	r0, r3
 800ad28:	3718      	adds	r7, #24
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bd80      	pop	{r7, pc}
 800ad2e:	bf00      	nop
 800ad30:	20000404 	.word	0x20000404

0800ad34 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b086      	sub	sp, #24
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 800ad40:	2301      	movs	r3, #1
 800ad42:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800ad44:	f107 030e 	add.w	r3, r7, #14
 800ad48:	4619      	mov	r1, r3
 800ad4a:	6878      	ldr	r0, [r7, #4]
 800ad4c:	f7ff fb08 	bl	800a360 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 800ad50:	2201      	movs	r2, #1
 800ad52:	2180      	movs	r1, #128	; 0x80
 800ad54:	6878      	ldr	r0, [r7, #4]
 800ad56:	f003 fe91 	bl	800ea7c <VL53L0X_WrByte>
 800ad5a:	4603      	mov	r3, r0
 800ad5c:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800ad5e:	2201      	movs	r2, #1
 800ad60:	21ff      	movs	r1, #255	; 0xff
 800ad62:	6878      	ldr	r0, [r7, #4]
 800ad64:	f003 fe8a 	bl	800ea7c <VL53L0X_WrByte>
 800ad68:	4603      	mov	r3, r0
 800ad6a:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	2100      	movs	r1, #0
 800ad70:	6878      	ldr	r0, [r7, #4]
 800ad72:	f003 fe83 	bl	800ea7c <VL53L0X_WrByte>
 800ad76:	4603      	mov	r3, r0
 800ad78:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 800ad80:	461a      	mov	r2, r3
 800ad82:	2191      	movs	r1, #145	; 0x91
 800ad84:	6878      	ldr	r0, [r7, #4]
 800ad86:	f003 fe79 	bl	800ea7c <VL53L0X_WrByte>
 800ad8a:	4603      	mov	r3, r0
 800ad8c:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 800ad8e:	2201      	movs	r2, #1
 800ad90:	2100      	movs	r1, #0
 800ad92:	6878      	ldr	r0, [r7, #4]
 800ad94:	f003 fe72 	bl	800ea7c <VL53L0X_WrByte>
 800ad98:	4603      	mov	r3, r0
 800ad9a:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	21ff      	movs	r1, #255	; 0xff
 800ada0:	6878      	ldr	r0, [r7, #4]
 800ada2:	f003 fe6b 	bl	800ea7c <VL53L0X_WrByte>
 800ada6:	4603      	mov	r3, r0
 800ada8:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 800adaa:	2200      	movs	r2, #0
 800adac:	2180      	movs	r1, #128	; 0x80
 800adae:	6878      	ldr	r0, [r7, #4]
 800adb0:	f003 fe64 	bl	800ea7c <VL53L0X_WrByte>
 800adb4:	4603      	mov	r3, r0
 800adb6:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 800adb8:	7bbb      	ldrb	r3, [r7, #14]
 800adba:	2b03      	cmp	r3, #3
 800adbc:	d054      	beq.n	800ae68 <VL53L0X_StartMeasurement+0x134>
 800adbe:	2b03      	cmp	r3, #3
 800adc0:	dc6c      	bgt.n	800ae9c <VL53L0X_StartMeasurement+0x168>
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d002      	beq.n	800adcc <VL53L0X_StartMeasurement+0x98>
 800adc6:	2b01      	cmp	r3, #1
 800adc8:	d034      	beq.n	800ae34 <VL53L0X_StartMeasurement+0x100>
 800adca:	e067      	b.n	800ae9c <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 800adcc:	2201      	movs	r2, #1
 800adce:	2100      	movs	r1, #0
 800add0:	6878      	ldr	r0, [r7, #4]
 800add2:	f003 fe53 	bl	800ea7c <VL53L0X_WrByte>
 800add6:	4603      	mov	r3, r0
 800add8:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 800adda:	7bfb      	ldrb	r3, [r7, #15]
 800addc:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 800adde:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d15d      	bne.n	800aea2 <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 800ade6:	2300      	movs	r3, #0
 800ade8:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 800adea:	693b      	ldr	r3, [r7, #16]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d008      	beq.n	800ae02 <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 800adf0:	f107 030d 	add.w	r3, r7, #13
 800adf4:	461a      	mov	r2, r3
 800adf6:	2100      	movs	r1, #0
 800adf8:	6878      	ldr	r0, [r7, #4]
 800adfa:	f003 fec1 	bl	800eb80 <VL53L0X_RdByte>
 800adfe:	4603      	mov	r3, r0
 800ae00:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 800ae02:	693b      	ldr	r3, [r7, #16]
 800ae04:	3301      	adds	r3, #1
 800ae06:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 800ae08:	7b7a      	ldrb	r2, [r7, #13]
 800ae0a:	7bfb      	ldrb	r3, [r7, #15]
 800ae0c:	4013      	ands	r3, r2
 800ae0e:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800ae10:	7bfa      	ldrb	r2, [r7, #15]
 800ae12:	429a      	cmp	r2, r3
 800ae14:	d107      	bne.n	800ae26 <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 800ae16:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d103      	bne.n	800ae26 <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800ae1e:	693b      	ldr	r3, [r7, #16]
 800ae20:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800ae24:	d3e1      	bcc.n	800adea <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800ae26:	693b      	ldr	r3, [r7, #16]
 800ae28:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800ae2c:	d339      	bcc.n	800aea2 <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 800ae2e:	23f9      	movs	r3, #249	; 0xf9
 800ae30:	75fb      	strb	r3, [r7, #23]

		}

		break;
 800ae32:	e036      	b.n	800aea2 <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800ae34:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d105      	bne.n	800ae48 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800ae3c:	2101      	movs	r1, #1
 800ae3e:	6878      	ldr	r0, [r7, #4]
 800ae40:	f7ff ff12 	bl	800ac68 <VL53L0X_CheckAndLoadInterruptSettings>
 800ae44:	4603      	mov	r3, r0
 800ae46:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800ae48:	2202      	movs	r2, #2
 800ae4a:	2100      	movs	r1, #0
 800ae4c:	6878      	ldr	r0, [r7, #4]
 800ae4e:	f003 fe15 	bl	800ea7c <VL53L0X_WrByte>
 800ae52:	4603      	mov	r3, r0
 800ae54:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 800ae56:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d123      	bne.n	800aea6 <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	2204      	movs	r2, #4
 800ae62:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 800ae66:	e01e      	b.n	800aea6 <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800ae68:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d105      	bne.n	800ae7c <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800ae70:	2101      	movs	r1, #1
 800ae72:	6878      	ldr	r0, [r7, #4]
 800ae74:	f7ff fef8 	bl	800ac68 <VL53L0X_CheckAndLoadInterruptSettings>
 800ae78:	4603      	mov	r3, r0
 800ae7a:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800ae7c:	2204      	movs	r2, #4
 800ae7e:	2100      	movs	r1, #0
 800ae80:	6878      	ldr	r0, [r7, #4]
 800ae82:	f003 fdfb 	bl	800ea7c <VL53L0X_WrByte>
 800ae86:	4603      	mov	r3, r0
 800ae88:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 800ae8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d10b      	bne.n	800aeaa <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2204      	movs	r2, #4
 800ae96:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 800ae9a:	e006      	b.n	800aeaa <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800ae9c:	23f8      	movs	r3, #248	; 0xf8
 800ae9e:	75fb      	strb	r3, [r7, #23]
 800aea0:	e004      	b.n	800aeac <VL53L0X_StartMeasurement+0x178>
		break;
 800aea2:	bf00      	nop
 800aea4:	e002      	b.n	800aeac <VL53L0X_StartMeasurement+0x178>
		break;
 800aea6:	bf00      	nop
 800aea8:	e000      	b.n	800aeac <VL53L0X_StartMeasurement+0x178>
		break;
 800aeaa:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 800aeac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	3718      	adds	r7, #24
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	bd80      	pop	{r7, pc}

0800aeb8 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b084      	sub	sp, #16
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
 800aec0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aec2:	2300      	movs	r3, #0
 800aec4:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800aecc:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 800aece:	7bbb      	ldrb	r3, [r7, #14]
 800aed0:	2b04      	cmp	r3, #4
 800aed2:	d112      	bne.n	800aefa <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 800aed4:	f107 0308 	add.w	r3, r7, #8
 800aed8:	4619      	mov	r1, r3
 800aeda:	6878      	ldr	r0, [r7, #4]
 800aedc:	f000 fb1a 	bl	800b514 <VL53L0X_GetInterruptMaskStatus>
 800aee0:	4603      	mov	r3, r0
 800aee2:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	2b04      	cmp	r3, #4
 800aee8:	d103      	bne.n	800aef2 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	2201      	movs	r2, #1
 800aeee:	701a      	strb	r2, [r3, #0]
 800aef0:	e01c      	b.n	800af2c <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 800aef2:	683b      	ldr	r3, [r7, #0]
 800aef4:	2200      	movs	r2, #0
 800aef6:	701a      	strb	r2, [r3, #0]
 800aef8:	e018      	b.n	800af2c <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 800aefa:	f107 030d 	add.w	r3, r7, #13
 800aefe:	461a      	mov	r2, r3
 800af00:	2114      	movs	r1, #20
 800af02:	6878      	ldr	r0, [r7, #4]
 800af04:	f003 fe3c 	bl	800eb80 <VL53L0X_RdByte>
 800af08:	4603      	mov	r3, r0
 800af0a:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 800af0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d10b      	bne.n	800af2c <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 800af14:	7b7b      	ldrb	r3, [r7, #13]
 800af16:	f003 0301 	and.w	r3, r3, #1
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d003      	beq.n	800af26 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 800af1e:	683b      	ldr	r3, [r7, #0]
 800af20:	2201      	movs	r2, #1
 800af22:	701a      	strb	r2, [r3, #0]
 800af24:	e002      	b.n	800af2c <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	2200      	movs	r2, #0
 800af2a:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800af2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800af30:	4618      	mov	r0, r3
 800af32:	3710      	adds	r7, #16
 800af34:	46bd      	mov	sp, r7
 800af36:	bd80      	pop	{r7, pc}

0800af38 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800af38:	b5b0      	push	{r4, r5, r7, lr}
 800af3a:	b096      	sub	sp, #88	; 0x58
 800af3c:	af02      	add	r7, sp, #8
 800af3e:	6078      	str	r0, [r7, #4]
 800af40:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800af42:	2300      	movs	r3, #0
 800af44:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 800af48:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800af4c:	230c      	movs	r3, #12
 800af4e:	2114      	movs	r1, #20
 800af50:	6878      	ldr	r0, [r7, #4]
 800af52:	f003 fd67 	bl	800ea24 <VL53L0X_ReadMulti>
 800af56:	4603      	mov	r3, r0
 800af58:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 800af5c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800af60:	2b00      	cmp	r3, #0
 800af62:	f040 80d1 	bne.w	800b108 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	2200      	movs	r2, #0
 800af6a:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 800af6c:	683b      	ldr	r3, [r7, #0]
 800af6e:	2200      	movs	r2, #0
 800af70:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 800af72:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800af76:	b29b      	uxth	r3, r3
 800af78:	021b      	lsls	r3, r3, #8
 800af7a:	b29a      	uxth	r2, r3
 800af7c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800af80:	b29b      	uxth	r3, r3
 800af82:	4413      	add	r3, r2
 800af84:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 800af88:	683b      	ldr	r3, [r7, #0]
 800af8a:	2200      	movs	r2, #0
 800af8c:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 800af8e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800af92:	b29b      	uxth	r3, r3
 800af94:	021b      	lsls	r3, r3, #8
 800af96:	b29a      	uxth	r2, r3
 800af98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800af9c:	b29b      	uxth	r3, r3
 800af9e:	4413      	add	r3, r2
 800afa0:	b29b      	uxth	r3, r3
 800afa2:	025b      	lsls	r3, r3, #9
 800afa4:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800afaa:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 800afac:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800afb0:	b29b      	uxth	r3, r3
 800afb2:	021b      	lsls	r3, r3, #8
 800afb4:	b29a      	uxth	r2, r3
 800afb6:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800afba:	b29b      	uxth	r3, r3
 800afbc:	4413      	add	r3, r2
 800afbe:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 800afc2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800afc6:	025b      	lsls	r3, r3, #9
 800afc8:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 800afce:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800afd2:	b29b      	uxth	r3, r3
 800afd4:	021b      	lsls	r3, r3, #8
 800afd6:	b29a      	uxth	r2, r3
 800afd8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800afdc:	b29b      	uxth	r3, r3
 800afde:	4413      	add	r3, r2
 800afe0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800afea:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 800afec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800aff0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 800affa:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 800b002:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 800b006:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b008:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b00c:	d046      	beq.n	800b09c <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 800b00e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b010:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800b014:	fb02 f303 	mul.w	r3, r2, r3
 800b018:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b01c:	4a57      	ldr	r2, [pc, #348]	; (800b17c <VL53L0X_GetRangingMeasurementData+0x244>)
 800b01e:	fb82 1203 	smull	r1, r2, r2, r3
 800b022:	1192      	asrs	r2, r2, #6
 800b024:	17db      	asrs	r3, r3, #31
 800b026:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 800b028:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	6a1b      	ldr	r3, [r3, #32]
 800b030:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	7f1b      	ldrb	r3, [r3, #28]
 800b036:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 800b03a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d02c      	beq.n	800b09c <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 800b042:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800b044:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800b048:	fb02 f303 	mul.w	r3, r2, r3
 800b04c:	121a      	asrs	r2, r3, #8
					<= 0) {
 800b04e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 800b050:	429a      	cmp	r2, r3
 800b052:	d10d      	bne.n	800b070 <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 800b054:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d004      	beq.n	800b066 <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 800b05c:	f242 23b8 	movw	r3, #8888	; 0x22b8
 800b060:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800b064:	e016      	b.n	800b094 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 800b066:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 800b06a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800b06e:	e011      	b.n	800b094 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 800b070:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800b074:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b076:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 800b07a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800b07c:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 800b080:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 800b084:	121b      	asrs	r3, r3, #8
 800b086:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 800b088:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b08a:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 800b08c:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 800b090:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 800b094:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800b098:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 800b09c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d00d      	beq.n	800b0c0 <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 800b0a4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800b0a8:	089b      	lsrs	r3, r3, #2
 800b0aa:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 800b0ac:	683b      	ldr	r3, [r7, #0]
 800b0ae:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 800b0b0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800b0b4:	b2db      	uxtb	r3, r3
 800b0b6:	019b      	lsls	r3, r3, #6
 800b0b8:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 800b0ba:	683b      	ldr	r3, [r7, #0]
 800b0bc:	75da      	strb	r2, [r3, #23]
 800b0be:	e006      	b.n	800b0ce <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 800b0c0:	683b      	ldr	r3, [r7, #0]
 800b0c2:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800b0c6:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 800b0c8:	683b      	ldr	r3, [r7, #0]
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 800b0ce:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800b0d2:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800b0d6:	f107 0336 	add.w	r3, r7, #54	; 0x36
 800b0da:	9301      	str	r3, [sp, #4]
 800b0dc:	683b      	ldr	r3, [r7, #0]
 800b0de:	9300      	str	r3, [sp, #0]
 800b0e0:	4613      	mov	r3, r2
 800b0e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b0e4:	6878      	ldr	r0, [r7, #4]
 800b0e6:	f003 fa51 	bl	800e58c <VL53L0X_get_pal_range_status>
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	461a      	mov	r2, r3
 800b0ee:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b0f2:	4313      	orrs	r3, r2
 800b0f4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 800b0f8:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d103      	bne.n	800b108 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 800b100:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b108:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d12f      	bne.n	800b170 <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	f107 040c 	add.w	r4, r7, #12
 800b116:	f103 0550 	add.w	r5, r3, #80	; 0x50
 800b11a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b11c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b11e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b122:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 800b126:	683b      	ldr	r3, [r7, #0]
 800b128:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 800b12a:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 800b12c:	683b      	ldr	r3, [r7, #0]
 800b12e:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 800b130:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 800b134:	683b      	ldr	r3, [r7, #0]
 800b136:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 800b138:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 800b13e:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 800b140:	683b      	ldr	r3, [r7, #0]
 800b142:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 800b144:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 800b146:	683b      	ldr	r3, [r7, #0]
 800b148:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 800b14a:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 800b14c:	683b      	ldr	r3, [r7, #0]
 800b14e:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 800b150:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 800b152:	683b      	ldr	r3, [r7, #0]
 800b154:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 800b156:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	f103 0450 	add.w	r4, r3, #80	; 0x50
 800b160:	f107 050c 	add.w	r5, r7, #12
 800b164:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b166:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b168:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b16c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b170:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 800b174:	4618      	mov	r0, r3
 800b176:	3750      	adds	r7, #80	; 0x50
 800b178:	46bd      	mov	sp, r7
 800b17a:	bdb0      	pop	{r4, r5, r7, pc}
 800b17c:	10624dd3 	.word	0x10624dd3

0800b180 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b084      	sub	sp, #16
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
 800b188:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b18a:	2300      	movs	r3, #0
 800b18c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 800b18e:	2100      	movs	r1, #0
 800b190:	6878      	ldr	r0, [r7, #4]
 800b192:	f7ff f8b9 	bl	800a308 <VL53L0X_SetDeviceMode>
 800b196:	4603      	mov	r3, r0
 800b198:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800b19a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d104      	bne.n	800b1ac <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 800b1a2:	6878      	ldr	r0, [r7, #4]
 800b1a4:	f7ff fd16 	bl	800abd4 <VL53L0X_PerformSingleMeasurement>
 800b1a8:	4603      	mov	r3, r0
 800b1aa:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800b1ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d105      	bne.n	800b1c0 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 800b1b4:	6839      	ldr	r1, [r7, #0]
 800b1b6:	6878      	ldr	r0, [r7, #4]
 800b1b8:	f7ff febe 	bl	800af38 <VL53L0X_GetRangingMeasurementData>
 800b1bc:	4603      	mov	r3, r0
 800b1be:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 800b1c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d105      	bne.n	800b1d4 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800b1c8:	2100      	movs	r1, #0
 800b1ca:	6878      	ldr	r0, [r7, #4]
 800b1cc:	f000 f962 	bl	800b494 <VL53L0X_ClearInterruptMask>
 800b1d0:	4603      	mov	r3, r0
 800b1d2:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 800b1d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b1d8:	4618      	mov	r0, r3
 800b1da:	3710      	adds	r7, #16
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	bd80      	pop	{r7, pc}

0800b1e0 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b084      	sub	sp, #16
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
 800b1e8:	4608      	mov	r0, r1
 800b1ea:	4611      	mov	r1, r2
 800b1ec:	461a      	mov	r2, r3
 800b1ee:	4603      	mov	r3, r0
 800b1f0:	70fb      	strb	r3, [r7, #3]
 800b1f2:	460b      	mov	r3, r1
 800b1f4:	70bb      	strb	r3, [r7, #2]
 800b1f6:	4613      	mov	r3, r2
 800b1f8:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 800b1fe:	78fb      	ldrb	r3, [r7, #3]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d002      	beq.n	800b20a <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 800b204:	23f6      	movs	r3, #246	; 0xf6
 800b206:	73fb      	strb	r3, [r7, #15]
 800b208:	e107      	b.n	800b41a <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 800b20a:	78bb      	ldrb	r3, [r7, #2]
 800b20c:	2b14      	cmp	r3, #20
 800b20e:	d110      	bne.n	800b232 <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800b210:	7e3b      	ldrb	r3, [r7, #24]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d102      	bne.n	800b21c <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 800b216:	2310      	movs	r3, #16
 800b218:	73bb      	strb	r3, [r7, #14]
 800b21a:	e001      	b.n	800b220 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 800b21c:	2301      	movs	r3, #1
 800b21e:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 800b220:	7bbb      	ldrb	r3, [r7, #14]
 800b222:	461a      	mov	r2, r3
 800b224:	2184      	movs	r1, #132	; 0x84
 800b226:	6878      	ldr	r0, [r7, #4]
 800b228:	f003 fc28 	bl	800ea7c <VL53L0X_WrByte>
 800b22c:	4603      	mov	r3, r0
 800b22e:	73fb      	strb	r3, [r7, #15]
 800b230:	e0f3      	b.n	800b41a <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 800b232:	78bb      	ldrb	r3, [r7, #2]
 800b234:	2b15      	cmp	r3, #21
 800b236:	f040 8097 	bne.w	800b368 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800b23a:	2201      	movs	r2, #1
 800b23c:	21ff      	movs	r1, #255	; 0xff
 800b23e:	6878      	ldr	r0, [r7, #4]
 800b240:	f003 fc1c 	bl	800ea7c <VL53L0X_WrByte>
 800b244:	4603      	mov	r3, r0
 800b246:	461a      	mov	r2, r3
 800b248:	7bfb      	ldrb	r3, [r7, #15]
 800b24a:	4313      	orrs	r3, r2
 800b24c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800b24e:	2200      	movs	r2, #0
 800b250:	2100      	movs	r1, #0
 800b252:	6878      	ldr	r0, [r7, #4]
 800b254:	f003 fc12 	bl	800ea7c <VL53L0X_WrByte>
 800b258:	4603      	mov	r3, r0
 800b25a:	461a      	mov	r2, r3
 800b25c:	7bfb      	ldrb	r3, [r7, #15]
 800b25e:	4313      	orrs	r3, r2
 800b260:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800b262:	2200      	movs	r2, #0
 800b264:	21ff      	movs	r1, #255	; 0xff
 800b266:	6878      	ldr	r0, [r7, #4]
 800b268:	f003 fc08 	bl	800ea7c <VL53L0X_WrByte>
 800b26c:	4603      	mov	r3, r0
 800b26e:	461a      	mov	r2, r3
 800b270:	7bfb      	ldrb	r3, [r7, #15]
 800b272:	4313      	orrs	r3, r2
 800b274:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800b276:	2201      	movs	r2, #1
 800b278:	2180      	movs	r1, #128	; 0x80
 800b27a:	6878      	ldr	r0, [r7, #4]
 800b27c:	f003 fbfe 	bl	800ea7c <VL53L0X_WrByte>
 800b280:	4603      	mov	r3, r0
 800b282:	461a      	mov	r2, r3
 800b284:	7bfb      	ldrb	r3, [r7, #15]
 800b286:	4313      	orrs	r3, r2
 800b288:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 800b28a:	2202      	movs	r2, #2
 800b28c:	2185      	movs	r1, #133	; 0x85
 800b28e:	6878      	ldr	r0, [r7, #4]
 800b290:	f003 fbf4 	bl	800ea7c <VL53L0X_WrByte>
 800b294:	4603      	mov	r3, r0
 800b296:	461a      	mov	r2, r3
 800b298:	7bfb      	ldrb	r3, [r7, #15]
 800b29a:	4313      	orrs	r3, r2
 800b29c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 800b29e:	2204      	movs	r2, #4
 800b2a0:	21ff      	movs	r1, #255	; 0xff
 800b2a2:	6878      	ldr	r0, [r7, #4]
 800b2a4:	f003 fbea 	bl	800ea7c <VL53L0X_WrByte>
 800b2a8:	4603      	mov	r3, r0
 800b2aa:	461a      	mov	r2, r3
 800b2ac:	7bfb      	ldrb	r3, [r7, #15]
 800b2ae:	4313      	orrs	r3, r2
 800b2b0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	21cd      	movs	r1, #205	; 0xcd
 800b2b6:	6878      	ldr	r0, [r7, #4]
 800b2b8:	f003 fbe0 	bl	800ea7c <VL53L0X_WrByte>
 800b2bc:	4603      	mov	r3, r0
 800b2be:	461a      	mov	r2, r3
 800b2c0:	7bfb      	ldrb	r3, [r7, #15]
 800b2c2:	4313      	orrs	r3, r2
 800b2c4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 800b2c6:	2211      	movs	r2, #17
 800b2c8:	21cc      	movs	r1, #204	; 0xcc
 800b2ca:	6878      	ldr	r0, [r7, #4]
 800b2cc:	f003 fbd6 	bl	800ea7c <VL53L0X_WrByte>
 800b2d0:	4603      	mov	r3, r0
 800b2d2:	461a      	mov	r2, r3
 800b2d4:	7bfb      	ldrb	r3, [r7, #15]
 800b2d6:	4313      	orrs	r3, r2
 800b2d8:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 800b2da:	2207      	movs	r2, #7
 800b2dc:	21ff      	movs	r1, #255	; 0xff
 800b2de:	6878      	ldr	r0, [r7, #4]
 800b2e0:	f003 fbcc 	bl	800ea7c <VL53L0X_WrByte>
 800b2e4:	4603      	mov	r3, r0
 800b2e6:	461a      	mov	r2, r3
 800b2e8:	7bfb      	ldrb	r3, [r7, #15]
 800b2ea:	4313      	orrs	r3, r2
 800b2ec:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	21be      	movs	r1, #190	; 0xbe
 800b2f2:	6878      	ldr	r0, [r7, #4]
 800b2f4:	f003 fbc2 	bl	800ea7c <VL53L0X_WrByte>
 800b2f8:	4603      	mov	r3, r0
 800b2fa:	461a      	mov	r2, r3
 800b2fc:	7bfb      	ldrb	r3, [r7, #15]
 800b2fe:	4313      	orrs	r3, r2
 800b300:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 800b302:	2206      	movs	r2, #6
 800b304:	21ff      	movs	r1, #255	; 0xff
 800b306:	6878      	ldr	r0, [r7, #4]
 800b308:	f003 fbb8 	bl	800ea7c <VL53L0X_WrByte>
 800b30c:	4603      	mov	r3, r0
 800b30e:	461a      	mov	r2, r3
 800b310:	7bfb      	ldrb	r3, [r7, #15]
 800b312:	4313      	orrs	r3, r2
 800b314:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 800b316:	2209      	movs	r2, #9
 800b318:	21cc      	movs	r1, #204	; 0xcc
 800b31a:	6878      	ldr	r0, [r7, #4]
 800b31c:	f003 fbae 	bl	800ea7c <VL53L0X_WrByte>
 800b320:	4603      	mov	r3, r0
 800b322:	461a      	mov	r2, r3
 800b324:	7bfb      	ldrb	r3, [r7, #15]
 800b326:	4313      	orrs	r3, r2
 800b328:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800b32a:	2200      	movs	r2, #0
 800b32c:	21ff      	movs	r1, #255	; 0xff
 800b32e:	6878      	ldr	r0, [r7, #4]
 800b330:	f003 fba4 	bl	800ea7c <VL53L0X_WrByte>
 800b334:	4603      	mov	r3, r0
 800b336:	461a      	mov	r2, r3
 800b338:	7bfb      	ldrb	r3, [r7, #15]
 800b33a:	4313      	orrs	r3, r2
 800b33c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800b33e:	2201      	movs	r2, #1
 800b340:	21ff      	movs	r1, #255	; 0xff
 800b342:	6878      	ldr	r0, [r7, #4]
 800b344:	f003 fb9a 	bl	800ea7c <VL53L0X_WrByte>
 800b348:	4603      	mov	r3, r0
 800b34a:	461a      	mov	r2, r3
 800b34c:	7bfb      	ldrb	r3, [r7, #15]
 800b34e:	4313      	orrs	r3, r2
 800b350:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800b352:	2200      	movs	r2, #0
 800b354:	2100      	movs	r1, #0
 800b356:	6878      	ldr	r0, [r7, #4]
 800b358:	f003 fb90 	bl	800ea7c <VL53L0X_WrByte>
 800b35c:	4603      	mov	r3, r0
 800b35e:	461a      	mov	r2, r3
 800b360:	7bfb      	ldrb	r3, [r7, #15]
 800b362:	4313      	orrs	r3, r2
 800b364:	73fb      	strb	r3, [r7, #15]
 800b366:	e058      	b.n	800b41a <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 800b368:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d121      	bne.n	800b3b4 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 800b370:	787b      	ldrb	r3, [r7, #1]
 800b372:	2b04      	cmp	r3, #4
 800b374:	d81b      	bhi.n	800b3ae <VL53L0X_SetGpioConfig+0x1ce>
 800b376:	a201      	add	r2, pc, #4	; (adr r2, 800b37c <VL53L0X_SetGpioConfig+0x19c>)
 800b378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b37c:	0800b391 	.word	0x0800b391
 800b380:	0800b397 	.word	0x0800b397
 800b384:	0800b39d 	.word	0x0800b39d
 800b388:	0800b3a3 	.word	0x0800b3a3
 800b38c:	0800b3a9 	.word	0x0800b3a9
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 800b390:	2300      	movs	r3, #0
 800b392:	73bb      	strb	r3, [r7, #14]
				break;
 800b394:	e00f      	b.n	800b3b6 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 800b396:	2301      	movs	r3, #1
 800b398:	73bb      	strb	r3, [r7, #14]
				break;
 800b39a:	e00c      	b.n	800b3b6 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 800b39c:	2302      	movs	r3, #2
 800b39e:	73bb      	strb	r3, [r7, #14]
				break;
 800b3a0:	e009      	b.n	800b3b6 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 800b3a2:	2303      	movs	r3, #3
 800b3a4:	73bb      	strb	r3, [r7, #14]
				break;
 800b3a6:	e006      	b.n	800b3b6 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 800b3a8:	2304      	movs	r3, #4
 800b3aa:	73bb      	strb	r3, [r7, #14]
				break;
 800b3ac:	e003      	b.n	800b3b6 <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 800b3ae:	23f5      	movs	r3, #245	; 0xf5
 800b3b0:	73fb      	strb	r3, [r7, #15]
 800b3b2:	e000      	b.n	800b3b6 <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 800b3b4:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 800b3b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d107      	bne.n	800b3ce <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 800b3be:	7bbb      	ldrb	r3, [r7, #14]
 800b3c0:	461a      	mov	r2, r3
 800b3c2:	210a      	movs	r1, #10
 800b3c4:	6878      	ldr	r0, [r7, #4]
 800b3c6:	f003 fb59 	bl	800ea7c <VL53L0X_WrByte>
 800b3ca:	4603      	mov	r3, r0
 800b3cc:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 800b3ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d10f      	bne.n	800b3f6 <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800b3d6:	7e3b      	ldrb	r3, [r7, #24]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d102      	bne.n	800b3e2 <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 800b3dc:	2300      	movs	r3, #0
 800b3de:	73bb      	strb	r3, [r7, #14]
 800b3e0:	e001      	b.n	800b3e6 <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 800b3e2:	2310      	movs	r3, #16
 800b3e4:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 800b3e6:	7bbb      	ldrb	r3, [r7, #14]
 800b3e8:	22ef      	movs	r2, #239	; 0xef
 800b3ea:	2184      	movs	r1, #132	; 0x84
 800b3ec:	6878      	ldr	r0, [r7, #4]
 800b3ee:	f003 fb93 	bl	800eb18 <VL53L0X_UpdateByte>
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 800b3f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d103      	bne.n	800b406 <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	787a      	ldrb	r2, [r7, #1]
 800b402:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 800b406:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d105      	bne.n	800b41a <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800b40e:	2100      	movs	r1, #0
 800b410:	6878      	ldr	r0, [r7, #4]
 800b412:	f000 f83f 	bl	800b494 <VL53L0X_ClearInterruptMask>
 800b416:	4603      	mov	r3, r0
 800b418:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b41a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b41e:	4618      	mov	r0, r3
 800b420:	3710      	adds	r7, #16
 800b422:	46bd      	mov	sp, r7
 800b424:	bd80      	pop	{r7, pc}
 800b426:	bf00      	nop

0800b428 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b086      	sub	sp, #24
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	60f8      	str	r0, [r7, #12]
 800b430:	607a      	str	r2, [r7, #4]
 800b432:	603b      	str	r3, [r7, #0]
 800b434:	460b      	mov	r3, r1
 800b436:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b438:	2300      	movs	r3, #0
 800b43a:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 800b43c:	f107 0314 	add.w	r3, r7, #20
 800b440:	461a      	mov	r2, r3
 800b442:	210e      	movs	r1, #14
 800b444:	68f8      	ldr	r0, [r7, #12]
 800b446:	f003 fbc5 	bl	800ebd4 <VL53L0X_RdWord>
 800b44a:	4603      	mov	r3, r0
 800b44c:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800b44e:	8abb      	ldrh	r3, [r7, #20]
 800b450:	045b      	lsls	r3, r3, #17
 800b452:	461a      	mov	r2, r3
 800b454:	4b0e      	ldr	r3, [pc, #56]	; (800b490 <VL53L0X_GetInterruptThresholds+0x68>)
 800b456:	4013      	ands	r3, r2
 800b458:	687a      	ldr	r2, [r7, #4]
 800b45a:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 800b45c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d10f      	bne.n	800b484 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 800b464:	f107 0314 	add.w	r3, r7, #20
 800b468:	461a      	mov	r2, r3
 800b46a:	210c      	movs	r1, #12
 800b46c:	68f8      	ldr	r0, [r7, #12]
 800b46e:	f003 fbb1 	bl	800ebd4 <VL53L0X_RdWord>
 800b472:	4603      	mov	r3, r0
 800b474:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800b476:	8abb      	ldrh	r3, [r7, #20]
 800b478:	045b      	lsls	r3, r3, #17
 800b47a:	461a      	mov	r2, r3
 800b47c:	4b04      	ldr	r3, [pc, #16]	; (800b490 <VL53L0X_GetInterruptThresholds+0x68>)
 800b47e:	4013      	ands	r3, r2
		*pThresholdHigh =
 800b480:	683a      	ldr	r2, [r7, #0]
 800b482:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b484:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b488:	4618      	mov	r0, r3
 800b48a:	3718      	adds	r7, #24
 800b48c:	46bd      	mov	sp, r7
 800b48e:	bd80      	pop	{r7, pc}
 800b490:	1ffe0000 	.word	0x1ffe0000

0800b494 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b084      	sub	sp, #16
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
 800b49c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b49e:	2300      	movs	r3, #0
 800b4a0:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 800b4a6:	2201      	movs	r2, #1
 800b4a8:	210b      	movs	r1, #11
 800b4aa:	6878      	ldr	r0, [r7, #4]
 800b4ac:	f003 fae6 	bl	800ea7c <VL53L0X_WrByte>
 800b4b0:	4603      	mov	r3, r0
 800b4b2:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	210b      	movs	r1, #11
 800b4b8:	6878      	ldr	r0, [r7, #4]
 800b4ba:	f003 fadf 	bl	800ea7c <VL53L0X_WrByte>
 800b4be:	4603      	mov	r3, r0
 800b4c0:	461a      	mov	r2, r3
 800b4c2:	7bfb      	ldrb	r3, [r7, #15]
 800b4c4:	4313      	orrs	r3, r2
 800b4c6:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 800b4c8:	f107 030d 	add.w	r3, r7, #13
 800b4cc:	461a      	mov	r2, r3
 800b4ce:	2113      	movs	r1, #19
 800b4d0:	6878      	ldr	r0, [r7, #4]
 800b4d2:	f003 fb55 	bl	800eb80 <VL53L0X_RdByte>
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	461a      	mov	r2, r3
 800b4da:	7bfb      	ldrb	r3, [r7, #15]
 800b4dc:	4313      	orrs	r3, r2
 800b4de:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 800b4e0:	7bbb      	ldrb	r3, [r7, #14]
 800b4e2:	3301      	adds	r3, #1
 800b4e4:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 800b4e6:	7b7b      	ldrb	r3, [r7, #13]
 800b4e8:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d006      	beq.n	800b4fe <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 800b4f0:	7bbb      	ldrb	r3, [r7, #14]
 800b4f2:	2b02      	cmp	r3, #2
 800b4f4:	d803      	bhi.n	800b4fe <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 800b4f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d0d3      	beq.n	800b4a6 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 800b4fe:	7bbb      	ldrb	r3, [r7, #14]
 800b500:	2b02      	cmp	r3, #2
 800b502:	d901      	bls.n	800b508 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 800b504:	23f4      	movs	r3, #244	; 0xf4
 800b506:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800b508:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b50c:	4618      	mov	r0, r3
 800b50e:	3710      	adds	r7, #16
 800b510:	46bd      	mov	sp, r7
 800b512:	bd80      	pop	{r7, pc}

0800b514 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b084      	sub	sp, #16
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
 800b51c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b51e:	2300      	movs	r3, #0
 800b520:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 800b522:	f107 030e 	add.w	r3, r7, #14
 800b526:	461a      	mov	r2, r3
 800b528:	2113      	movs	r1, #19
 800b52a:	6878      	ldr	r0, [r7, #4]
 800b52c:	f003 fb28 	bl	800eb80 <VL53L0X_RdByte>
 800b530:	4603      	mov	r3, r0
 800b532:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 800b534:	7bbb      	ldrb	r3, [r7, #14]
 800b536:	f003 0207 	and.w	r2, r3, #7
 800b53a:	683b      	ldr	r3, [r7, #0]
 800b53c:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 800b53e:	7bbb      	ldrb	r3, [r7, #14]
 800b540:	f003 0318 	and.w	r3, r3, #24
 800b544:	2b00      	cmp	r3, #0
 800b546:	d001      	beq.n	800b54c <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 800b548:	23fa      	movs	r3, #250	; 0xfa
 800b54a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800b54c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b550:	4618      	mov	r0, r3
 800b552:	3710      	adds	r7, #16
 800b554:	46bd      	mov	sp, r7
 800b556:	bd80      	pop	{r7, pc}

0800b558 <VL53L0X_SetReferenceSpads>:
 * Internal functions
 *****************************************************************************/

VL53L0X_Error VL53L0X_SetReferenceSpads(VL53L0X_DEV Dev, uint32_t count,
	uint8_t isApertureSpads)
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b086      	sub	sp, #24
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	60f8      	str	r0, [r7, #12]
 800b560:	60b9      	str	r1, [r7, #8]
 800b562:	4613      	mov	r3, r2
 800b564:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b566:	2300      	movs	r3, #0
 800b568:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_reference_spads(Dev, count, isApertureSpads);
 800b56a:	79fb      	ldrb	r3, [r7, #7]
 800b56c:	461a      	mov	r2, r3
 800b56e:	68b9      	ldr	r1, [r7, #8]
 800b570:	68f8      	ldr	r0, [r7, #12]
 800b572:	f000 fc55 	bl	800be20 <VL53L0X_set_reference_spads>
 800b576:	4603      	mov	r3, r0
 800b578:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);

	return Status;
 800b57a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b57e:	4618      	mov	r0, r3
 800b580:	3718      	adds	r7, #24
 800b582:	46bd      	mov	sp, r7
 800b584:	bd80      	pop	{r7, pc}

0800b586 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 800b586:	b580      	push	{r7, lr}
 800b588:	b086      	sub	sp, #24
 800b58a:	af00      	add	r7, sp, #0
 800b58c:	60f8      	str	r0, [r7, #12]
 800b58e:	60b9      	str	r1, [r7, #8]
 800b590:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b592:	2300      	movs	r3, #0
 800b594:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 800b596:	687a      	ldr	r2, [r7, #4]
 800b598:	68b9      	ldr	r1, [r7, #8]
 800b59a:	68f8      	ldr	r0, [r7, #12]
 800b59c:	f000 fa34 	bl	800ba08 <VL53L0X_perform_ref_spad_management>
 800b5a0:	4603      	mov	r3, r0
 800b5a2:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 800b5a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	3718      	adds	r7, #24
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	bd80      	pop	{r7, pc}

0800b5b0 <VL53L0X_PerformContinuousRangingMeasurement>:


VL53L0X_Error VL53L0X_PerformContinuousRangingMeasurement(VL53L0X_Dev_t *device, VL53L0X_RangingMeasurementData_t *ranging_data) {
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b084      	sub	sp, #16
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
 800b5b8:	6039      	str	r1, [r7, #0]
    VL53L0X_Error status;

    // Set the device to high accuracy mode
    status = VL53L0X_SetDeviceMode(device, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 800b5ba:	2101      	movs	r1, #1
 800b5bc:	6878      	ldr	r0, [r7, #4]
 800b5be:	f7fe fea3 	bl	800a308 <VL53L0X_SetDeviceMode>
 800b5c2:	4603      	mov	r3, r0
 800b5c4:	73fb      	strb	r3, [r7, #15]
    if (status != VL53L0X_ERROR_NONE) {
 800b5c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d002      	beq.n	800b5d4 <VL53L0X_PerformContinuousRangingMeasurement+0x24>
        return status;
 800b5ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b5d2:	e019      	b.n	800b608 <VL53L0X_PerformContinuousRangingMeasurement+0x58>
    }

    // Start continuous ranging measurement
    status = VL53L0X_StartMeasurement(device);
 800b5d4:	6878      	ldr	r0, [r7, #4]
 800b5d6:	f7ff fbad 	bl	800ad34 <VL53L0X_StartMeasurement>
 800b5da:	4603      	mov	r3, r0
 800b5dc:	73fb      	strb	r3, [r7, #15]
    if (status != VL53L0X_ERROR_NONE) {
 800b5de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d002      	beq.n	800b5ec <VL53L0X_PerformContinuousRangingMeasurement+0x3c>
        return status;
 800b5e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b5ea:	e00d      	b.n	800b608 <VL53L0X_PerformContinuousRangingMeasurement+0x58>
    }

    // Get ranging measurement data
    status = VL53L0X_GetRangingMeasurementData(device, ranging_data);
 800b5ec:	6839      	ldr	r1, [r7, #0]
 800b5ee:	6878      	ldr	r0, [r7, #4]
 800b5f0:	f7ff fca2 	bl	800af38 <VL53L0X_GetRangingMeasurementData>
 800b5f4:	4603      	mov	r3, r0
 800b5f6:	73fb      	strb	r3, [r7, #15]
    if (status != VL53L0X_ERROR_NONE) {
 800b5f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d002      	beq.n	800b606 <VL53L0X_PerformContinuousRangingMeasurement+0x56>
        return status;
 800b600:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b604:	e000      	b.n	800b608 <VL53L0X_PerformContinuousRangingMeasurement+0x58>
    }

    return VL53L0X_ERROR_NONE;
 800b606:	2300      	movs	r3, #0
}
 800b608:	4618      	mov	r0, r3
 800b60a:	3710      	adds	r7, #16
 800b60c:	46bd      	mov	sp, r7
 800b60e:	bd80      	pop	{r7, pc}

0800b610 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b084      	sub	sp, #16
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
 800b618:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b61a:	2300      	movs	r3, #0
 800b61c:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 800b61e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800b622:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 800b624:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b628:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 800b62a:	f107 0308 	add.w	r3, r7, #8
 800b62e:	461a      	mov	r2, r3
 800b630:	2128      	movs	r1, #40	; 0x28
 800b632:	6878      	ldr	r0, [r7, #4]
 800b634:	f003 face 	bl	800ebd4 <VL53L0X_RdWord>
 800b638:	4603      	mov	r3, r0
 800b63a:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 800b63c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d11e      	bne.n	800b682 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 800b644:	893b      	ldrh	r3, [r7, #8]
 800b646:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b64a:	b29b      	uxth	r3, r3
 800b64c:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 800b64e:	893b      	ldrh	r3, [r7, #8]
 800b650:	461a      	mov	r2, r3
 800b652:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b656:	429a      	cmp	r2, r3
 800b658:	dd0b      	ble.n	800b672 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 800b65a:	893a      	ldrh	r2, [r7, #8]
 800b65c:	897b      	ldrh	r3, [r7, #10]
 800b65e:	1ad3      	subs	r3, r2, r3
 800b660:	b29b      	uxth	r3, r3
 800b662:	b21b      	sxth	r3, r3
 800b664:	461a      	mov	r2, r3
					* 250;
 800b666:	23fa      	movs	r3, #250	; 0xfa
 800b668:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800b66c:	683b      	ldr	r3, [r7, #0]
 800b66e:	601a      	str	r2, [r3, #0]
 800b670:	e007      	b.n	800b682 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 800b672:	893b      	ldrh	r3, [r7, #8]
 800b674:	b21b      	sxth	r3, r3
 800b676:	461a      	mov	r2, r3
 800b678:	23fa      	movs	r3, #250	; 0xfa
 800b67a:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	601a      	str	r2, [r3, #0]

	}

	return Status;
 800b682:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b686:	4618      	mov	r0, r3
 800b688:	3710      	adds	r7, #16
 800b68a:	46bd      	mov	sp, r7
 800b68c:	bd80      	pop	{r7, pc}

0800b68e <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 800b68e:	b480      	push	{r7}
 800b690:	b08b      	sub	sp, #44	; 0x2c
 800b692:	af00      	add	r7, sp, #0
 800b694:	60f8      	str	r0, [r7, #12]
 800b696:	60b9      	str	r1, [r7, #8]
 800b698:	607a      	str	r2, [r7, #4]
 800b69a:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 800b69c:	2308      	movs	r3, #8
 800b69e:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 800b6a4:	683b      	ldr	r3, [r7, #0]
 800b6a6:	f04f 32ff 	mov.w	r2, #4294967295
 800b6aa:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 800b6ac:	687a      	ldr	r2, [r7, #4]
 800b6ae:	69bb      	ldr	r3, [r7, #24]
 800b6b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6b4:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	69ba      	ldr	r2, [r7, #24]
 800b6ba:	fbb3 f2f2 	udiv	r2, r3, r2
 800b6be:	69b9      	ldr	r1, [r7, #24]
 800b6c0:	fb01 f202 	mul.w	r2, r1, r2
 800b6c4:	1a9b      	subs	r3, r3, r2
 800b6c6:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800b6c8:	697b      	ldr	r3, [r7, #20]
 800b6ca:	627b      	str	r3, [r7, #36]	; 0x24
 800b6cc:	e030      	b.n	800b730 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 800b6d2:	68fa      	ldr	r2, [r7, #12]
 800b6d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6d6:	4413      	add	r3, r2
 800b6d8:	781b      	ldrb	r3, [r3, #0]
 800b6da:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 800b6dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6de:	697b      	ldr	r3, [r7, #20]
 800b6e0:	429a      	cmp	r2, r3
 800b6e2:	d11e      	bne.n	800b722 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 800b6e4:	7ffa      	ldrb	r2, [r7, #31]
 800b6e6:	693b      	ldr	r3, [r7, #16]
 800b6e8:	fa42 f303 	asr.w	r3, r2, r3
 800b6ec:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 800b6ee:	693b      	ldr	r3, [r7, #16]
 800b6f0:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 800b6f2:	e016      	b.n	800b722 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 800b6f4:	7ffb      	ldrb	r3, [r7, #31]
 800b6f6:	f003 0301 	and.w	r3, r3, #1
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d00b      	beq.n	800b716 <get_next_good_spad+0x88>
				success = 1;
 800b6fe:	2301      	movs	r3, #1
 800b700:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 800b702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b704:	69ba      	ldr	r2, [r7, #24]
 800b706:	fb03 f202 	mul.w	r2, r3, r2
 800b70a:	6a3b      	ldr	r3, [r7, #32]
 800b70c:	4413      	add	r3, r2
 800b70e:	461a      	mov	r2, r3
 800b710:	683b      	ldr	r3, [r7, #0]
 800b712:	601a      	str	r2, [r3, #0]
				break;
 800b714:	e009      	b.n	800b72a <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 800b716:	7ffb      	ldrb	r3, [r7, #31]
 800b718:	085b      	lsrs	r3, r3, #1
 800b71a:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 800b71c:	6a3b      	ldr	r3, [r7, #32]
 800b71e:	3301      	adds	r3, #1
 800b720:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 800b722:	6a3a      	ldr	r2, [r7, #32]
 800b724:	69bb      	ldr	r3, [r7, #24]
 800b726:	429a      	cmp	r2, r3
 800b728:	d3e4      	bcc.n	800b6f4 <get_next_good_spad+0x66>
				coarseIndex++) {
 800b72a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b72c:	3301      	adds	r3, #1
 800b72e:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800b730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b732:	68bb      	ldr	r3, [r7, #8]
 800b734:	429a      	cmp	r2, r3
 800b736:	d202      	bcs.n	800b73e <get_next_good_spad+0xb0>
 800b738:	7fbb      	ldrb	r3, [r7, #30]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d0c7      	beq.n	800b6ce <get_next_good_spad+0x40>
		}
	}
}
 800b73e:	bf00      	nop
 800b740:	372c      	adds	r7, #44	; 0x2c
 800b742:	46bd      	mov	sp, r7
 800b744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b748:	4770      	bx	lr
	...

0800b74c <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 800b74c:	b480      	push	{r7}
 800b74e:	b085      	sub	sp, #20
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 800b754:	2301      	movs	r3, #1
 800b756:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	099b      	lsrs	r3, r3, #6
 800b75c:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 800b75e:	4a07      	ldr	r2, [pc, #28]	; (800b77c <is_aperture+0x30>)
 800b760:	68bb      	ldr	r3, [r7, #8]
 800b762:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d101      	bne.n	800b76e <is_aperture+0x22>
		isAperture = 0;
 800b76a:	2300      	movs	r3, #0
 800b76c:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 800b76e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b770:	4618      	mov	r0, r3
 800b772:	3714      	adds	r7, #20
 800b774:	46bd      	mov	sp, r7
 800b776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77a:	4770      	bx	lr
 800b77c:	200005bc 	.word	0x200005bc

0800b780 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 800b780:	b480      	push	{r7}
 800b782:	b089      	sub	sp, #36	; 0x24
 800b784:	af00      	add	r7, sp, #0
 800b786:	60f8      	str	r0, [r7, #12]
 800b788:	60b9      	str	r1, [r7, #8]
 800b78a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800b78c:	2300      	movs	r3, #0
 800b78e:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 800b790:	2308      	movs	r3, #8
 800b792:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 800b794:	687a      	ldr	r2, [r7, #4]
 800b796:	69bb      	ldr	r3, [r7, #24]
 800b798:	fbb2 f3f3 	udiv	r3, r2, r3
 800b79c:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	69ba      	ldr	r2, [r7, #24]
 800b7a2:	fbb3 f2f2 	udiv	r2, r3, r2
 800b7a6:	69b9      	ldr	r1, [r7, #24]
 800b7a8:	fb01 f202 	mul.w	r2, r1, r2
 800b7ac:	1a9b      	subs	r3, r3, r2
 800b7ae:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 800b7b0:	697a      	ldr	r2, [r7, #20]
 800b7b2:	68bb      	ldr	r3, [r7, #8]
 800b7b4:	429a      	cmp	r2, r3
 800b7b6:	d302      	bcc.n	800b7be <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 800b7b8:	23ce      	movs	r3, #206	; 0xce
 800b7ba:	77fb      	strb	r3, [r7, #31]
 800b7bc:	e010      	b.n	800b7e0 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 800b7be:	68fa      	ldr	r2, [r7, #12]
 800b7c0:	697b      	ldr	r3, [r7, #20]
 800b7c2:	4413      	add	r3, r2
 800b7c4:	781b      	ldrb	r3, [r3, #0]
 800b7c6:	b25a      	sxtb	r2, r3
 800b7c8:	2101      	movs	r1, #1
 800b7ca:	693b      	ldr	r3, [r7, #16]
 800b7cc:	fa01 f303 	lsl.w	r3, r1, r3
 800b7d0:	b25b      	sxtb	r3, r3
 800b7d2:	4313      	orrs	r3, r2
 800b7d4:	b259      	sxtb	r1, r3
 800b7d6:	68fa      	ldr	r2, [r7, #12]
 800b7d8:	697b      	ldr	r3, [r7, #20]
 800b7da:	4413      	add	r3, r2
 800b7dc:	b2ca      	uxtb	r2, r1
 800b7de:	701a      	strb	r2, [r3, #0]

	return status;
 800b7e0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	3724      	adds	r7, #36	; 0x24
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ee:	4770      	bx	lr

0800b7f0 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b084      	sub	sp, #16
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
 800b7f8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 800b7fa:	2306      	movs	r3, #6
 800b7fc:	683a      	ldr	r2, [r7, #0]
 800b7fe:	21b0      	movs	r1, #176	; 0xb0
 800b800:	6878      	ldr	r0, [r7, #4]
 800b802:	f003 f8df 	bl	800e9c4 <VL53L0X_WriteMulti>
 800b806:	4603      	mov	r3, r0
 800b808:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 800b80a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b80e:	4618      	mov	r0, r3
 800b810:	3710      	adds	r7, #16
 800b812:	46bd      	mov	sp, r7
 800b814:	bd80      	pop	{r7, pc}

0800b816 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800b816:	b580      	push	{r7, lr}
 800b818:	b084      	sub	sp, #16
 800b81a:	af00      	add	r7, sp, #0
 800b81c:	6078      	str	r0, [r7, #4]
 800b81e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 800b820:	2306      	movs	r3, #6
 800b822:	683a      	ldr	r2, [r7, #0]
 800b824:	21b0      	movs	r1, #176	; 0xb0
 800b826:	6878      	ldr	r0, [r7, #4]
 800b828:	f003 f8fc 	bl	800ea24 <VL53L0X_ReadMulti>
 800b82c:	4603      	mov	r3, r0
 800b82e:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 800b830:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b834:	4618      	mov	r0, r3
 800b836:	3710      	adds	r7, #16
 800b838:	46bd      	mov	sp, r7
 800b83a:	bd80      	pop	{r7, pc}

0800b83c <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b08c      	sub	sp, #48	; 0x30
 800b840:	af00      	add	r7, sp, #0
 800b842:	60f8      	str	r0, [r7, #12]
 800b844:	607a      	str	r2, [r7, #4]
 800b846:	603b      	str	r3, [r7, #0]
 800b848:	460b      	mov	r3, r1
 800b84a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800b84c:	2300      	movs	r3, #0
 800b84e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 800b852:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b854:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 800b856:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b858:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800b85a:	2300      	movs	r3, #0
 800b85c:	62bb      	str	r3, [r7, #40]	; 0x28
 800b85e:	e02b      	b.n	800b8b8 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 800b860:	f107 031c 	add.w	r3, r7, #28
 800b864:	6a3a      	ldr	r2, [r7, #32]
 800b866:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b868:	6878      	ldr	r0, [r7, #4]
 800b86a:	f7ff ff10 	bl	800b68e <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 800b86e:	69fb      	ldr	r3, [r7, #28]
 800b870:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b874:	d103      	bne.n	800b87e <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800b876:	23ce      	movs	r3, #206	; 0xce
 800b878:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800b87c:	e020      	b.n	800b8c0 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 800b87e:	69fb      	ldr	r3, [r7, #28]
 800b880:	461a      	mov	r2, r3
 800b882:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b884:	4413      	add	r3, r2
 800b886:	4618      	mov	r0, r3
 800b888:	f7ff ff60 	bl	800b74c <is_aperture>
 800b88c:	4603      	mov	r3, r0
 800b88e:	461a      	mov	r2, r3
 800b890:	7afb      	ldrb	r3, [r7, #11]
 800b892:	4293      	cmp	r3, r2
 800b894:	d003      	beq.n	800b89e <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800b896:	23ce      	movs	r3, #206	; 0xce
 800b898:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800b89c:	e010      	b.n	800b8c0 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 800b89e:	69fb      	ldr	r3, [r7, #28]
 800b8a0:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 800b8a2:	6a3a      	ldr	r2, [r7, #32]
 800b8a4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b8a6:	6838      	ldr	r0, [r7, #0]
 800b8a8:	f7ff ff6a 	bl	800b780 <enable_spad_bit>
		currentSpad++;
 800b8ac:	6a3b      	ldr	r3, [r7, #32]
 800b8ae:	3301      	adds	r3, #1
 800b8b0:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800b8b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8b4:	3301      	adds	r3, #1
 800b8b6:	62bb      	str	r3, [r7, #40]	; 0x28
 800b8b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b8ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8bc:	429a      	cmp	r2, r3
 800b8be:	d3cf      	bcc.n	800b860 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 800b8c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b8c2:	6a3a      	ldr	r2, [r7, #32]
 800b8c4:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 800b8c6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d106      	bne.n	800b8dc <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 800b8ce:	6839      	ldr	r1, [r7, #0]
 800b8d0:	68f8      	ldr	r0, [r7, #12]
 800b8d2:	f7ff ff8d 	bl	800b7f0 <set_ref_spad_map>
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 800b8dc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d121      	bne.n	800b928 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 800b8e4:	f107 0314 	add.w	r3, r7, #20
 800b8e8:	4619      	mov	r1, r3
 800b8ea:	68f8      	ldr	r0, [r7, #12]
 800b8ec:	f7ff ff93 	bl	800b816 <get_ref_spad_map>
 800b8f0:	4603      	mov	r3, r0
 800b8f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 800b8fa:	e011      	b.n	800b920 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 800b8fc:	683a      	ldr	r2, [r7, #0]
 800b8fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b900:	4413      	add	r3, r2
 800b902:	781a      	ldrb	r2, [r3, #0]
 800b904:	f107 0114 	add.w	r1, r7, #20
 800b908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b90a:	440b      	add	r3, r1
 800b90c:	781b      	ldrb	r3, [r3, #0]
 800b90e:	429a      	cmp	r2, r3
 800b910:	d003      	beq.n	800b91a <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 800b912:	23ce      	movs	r3, #206	; 0xce
 800b914:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 800b918:	e006      	b.n	800b928 <enable_ref_spads+0xec>
			}
			i++;
 800b91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b91c:	3301      	adds	r3, #1
 800b91e:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 800b920:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b924:	429a      	cmp	r2, r3
 800b926:	d3e9      	bcc.n	800b8fc <enable_ref_spads+0xc0>
		}
	}
	return status;
 800b928:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800b92c:	4618      	mov	r0, r3
 800b92e:	3730      	adds	r7, #48	; 0x30
 800b930:	46bd      	mov	sp, r7
 800b932:	bd80      	pop	{r7, pc}

0800b934 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b08a      	sub	sp, #40	; 0x28
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
 800b93c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800b93e:	2300      	movs	r3, #0
 800b940:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 800b944:	2300      	movs	r3, #0
 800b946:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800b950:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 800b954:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d107      	bne.n	800b96c <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 800b95c:	22c0      	movs	r2, #192	; 0xc0
 800b95e:	2101      	movs	r1, #1
 800b960:	6878      	ldr	r0, [r7, #4]
 800b962:	f003 f88b 	bl	800ea7c <VL53L0X_WrByte>
 800b966:	4603      	mov	r3, r0
 800b968:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 800b96c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b970:	2b00      	cmp	r3, #0
 800b972:	d108      	bne.n	800b986 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 800b974:	f107 0308 	add.w	r3, r7, #8
 800b978:	4619      	mov	r1, r3
 800b97a:	6878      	ldr	r0, [r7, #4]
 800b97c:	f7ff fc00 	bl	800b180 <VL53L0X_PerformSingleRangingMeasurement>
 800b980:	4603      	mov	r3, r0
 800b982:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 800b986:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d107      	bne.n	800b99e <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b98e:	2201      	movs	r2, #1
 800b990:	21ff      	movs	r1, #255	; 0xff
 800b992:	6878      	ldr	r0, [r7, #4]
 800b994:	f003 f872 	bl	800ea7c <VL53L0X_WrByte>
 800b998:	4603      	mov	r3, r0
 800b99a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 800b99e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d107      	bne.n	800b9b6 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 800b9a6:	683a      	ldr	r2, [r7, #0]
 800b9a8:	21b6      	movs	r1, #182	; 0xb6
 800b9aa:	6878      	ldr	r0, [r7, #4]
 800b9ac:	f003 f912 	bl	800ebd4 <VL53L0X_RdWord>
 800b9b0:	4603      	mov	r3, r0
 800b9b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 800b9b6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d107      	bne.n	800b9ce <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b9be:	2200      	movs	r2, #0
 800b9c0:	21ff      	movs	r1, #255	; 0xff
 800b9c2:	6878      	ldr	r0, [r7, #4]
 800b9c4:	f003 f85a 	bl	800ea7c <VL53L0X_WrByte>
 800b9c8:	4603      	mov	r3, r0
 800b9ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 800b9ce:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d112      	bne.n	800b9fc <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800b9d6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b9da:	461a      	mov	r2, r3
 800b9dc:	2101      	movs	r1, #1
 800b9de:	6878      	ldr	r0, [r7, #4]
 800b9e0:	f003 f84c 	bl	800ea7c <VL53L0X_WrByte>
 800b9e4:	4603      	mov	r3, r0
 800b9e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 800b9ea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d104      	bne.n	800b9fc <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b9f8:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 800b9fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800ba00:	4618      	mov	r0, r3
 800ba02:	3728      	adds	r7, #40	; 0x28
 800ba04:	46bd      	mov	sp, r7
 800ba06:	bd80      	pop	{r7, pc}

0800ba08 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 800ba08:	b590      	push	{r4, r7, lr}
 800ba0a:	b09d      	sub	sp, #116	; 0x74
 800ba0c:	af06      	add	r7, sp, #24
 800ba0e:	60f8      	str	r0, [r7, #12]
 800ba10:	60b9      	str	r1, [r7, #8]
 800ba12:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ba14:	2300      	movs	r3, #0
 800ba16:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 800ba1a:	23b4      	movs	r3, #180	; 0xb4
 800ba1c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 800ba20:	2303      	movs	r3, #3
 800ba22:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 800ba24:	232c      	movs	r3, #44	; 0x2c
 800ba26:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 800ba28:	2300      	movs	r3, #0
 800ba2a:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 800ba30:	2300      	movs	r3, #0
 800ba32:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 800ba34:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800ba38:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 800ba3e:	2300      	movs	r3, #0
 800ba40:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 800ba42:	2306      	movs	r3, #6
 800ba44:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 800ba46:	2300      	movs	r3, #0
 800ba48:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 800ba4e:	2300      	movs	r3, #0
 800ba50:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 800ba54:	2300      	movs	r3, #0
 800ba56:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 800ba58:	2300      	movs	r3, #0
 800ba5a:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 800ba60:	2300      	movs	r3, #0
 800ba62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 800ba6c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 800ba6e:	2300      	movs	r3, #0
 800ba70:	64bb      	str	r3, [r7, #72]	; 0x48
 800ba72:	e009      	b.n	800ba88 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800ba74:	68fa      	ldr	r2, [r7, #12]
 800ba76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba78:	4413      	add	r3, r2
 800ba7a:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800ba7e:	2200      	movs	r2, #0
 800ba80:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800ba82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba84:	3301      	adds	r3, #1
 800ba86:	64bb      	str	r3, [r7, #72]	; 0x48
 800ba88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ba8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba8c:	429a      	cmp	r2, r3
 800ba8e:	d3f1      	bcc.n	800ba74 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800ba90:	2201      	movs	r2, #1
 800ba92:	21ff      	movs	r1, #255	; 0xff
 800ba94:	68f8      	ldr	r0, [r7, #12]
 800ba96:	f002 fff1 	bl	800ea7c <VL53L0X_WrByte>
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800baa0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d107      	bne.n	800bab8 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 800baa8:	2200      	movs	r2, #0
 800baaa:	214f      	movs	r1, #79	; 0x4f
 800baac:	68f8      	ldr	r0, [r7, #12]
 800baae:	f002 ffe5 	bl	800ea7c <VL53L0X_WrByte>
 800bab2:	4603      	mov	r3, r0
 800bab4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800bab8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800babc:	2b00      	cmp	r3, #0
 800babe:	d107      	bne.n	800bad0 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 800bac0:	222c      	movs	r2, #44	; 0x2c
 800bac2:	214e      	movs	r1, #78	; 0x4e
 800bac4:	68f8      	ldr	r0, [r7, #12]
 800bac6:	f002 ffd9 	bl	800ea7c <VL53L0X_WrByte>
 800baca:	4603      	mov	r3, r0
 800bacc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800bad0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d107      	bne.n	800bae8 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800bad8:	2200      	movs	r2, #0
 800bada:	21ff      	movs	r1, #255	; 0xff
 800badc:	68f8      	ldr	r0, [r7, #12]
 800bade:	f002 ffcd 	bl	800ea7c <VL53L0X_WrByte>
 800bae2:	4603      	mov	r3, r0
 800bae4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800bae8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800baec:	2b00      	cmp	r3, #0
 800baee:	d109      	bne.n	800bb04 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 800baf0:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800baf4:	461a      	mov	r2, r3
 800baf6:	21b6      	movs	r1, #182	; 0xb6
 800baf8:	68f8      	ldr	r0, [r7, #12]
 800bafa:	f002 ffbf 	bl	800ea7c <VL53L0X_WrByte>
 800bafe:	4603      	mov	r3, r0
 800bb00:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 800bb04:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d107      	bne.n	800bb1c <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	2180      	movs	r1, #128	; 0x80
 800bb10:	68f8      	ldr	r0, [r7, #12]
 800bb12:	f002 ffb3 	bl	800ea7c <VL53L0X_WrByte>
 800bb16:	4603      	mov	r3, r0
 800bb18:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 800bb1c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d10a      	bne.n	800bb3a <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 800bb24:	f107 0210 	add.w	r2, r7, #16
 800bb28:	f107 0111 	add.w	r1, r7, #17
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	68f8      	ldr	r0, [r7, #12]
 800bb30:	f000 fbbb 	bl	800c2aa <VL53L0X_perform_ref_calibration>
 800bb34:	4603      	mov	r3, r0
 800bb36:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 800bb3a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d121      	bne.n	800bb86 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 800bb42:	2300      	movs	r3, #0
 800bb44:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 800bb46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb48:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 800bb4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb50:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 800bb5e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800bb62:	f107 0218 	add.w	r2, r7, #24
 800bb66:	9204      	str	r2, [sp, #16]
 800bb68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bb6a:	9203      	str	r2, [sp, #12]
 800bb6c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bb6e:	9202      	str	r2, [sp, #8]
 800bb70:	9301      	str	r3, [sp, #4]
 800bb72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb74:	9300      	str	r3, [sp, #0]
 800bb76:	4623      	mov	r3, r4
 800bb78:	4602      	mov	r2, r0
 800bb7a:	68f8      	ldr	r0, [r7, #12]
 800bb7c:	f7ff fe5e 	bl	800b83c <enable_ref_spads>
 800bb80:	4603      	mov	r3, r0
 800bb82:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800bb86:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d174      	bne.n	800bc78 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 800bb8e:	69bb      	ldr	r3, [r7, #24]
 800bb90:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 800bb92:	f107 0312 	add.w	r3, r7, #18
 800bb96:	4619      	mov	r1, r3
 800bb98:	68f8      	ldr	r0, [r7, #12]
 800bb9a:	f7ff fecb 	bl	800b934 <perform_ref_signal_measurement>
 800bb9e:	4603      	mov	r3, r0
 800bba0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 800bba4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d161      	bne.n	800bc70 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 800bbac:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 800bbae:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bbb0:	429a      	cmp	r2, r3
 800bbb2:	d25d      	bcs.n	800bc70 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	64bb      	str	r3, [r7, #72]	; 0x48
 800bbb8:	e009      	b.n	800bbce <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800bbba:	68fa      	ldr	r2, [r7, #12]
 800bbbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bbbe:	4413      	add	r3, r2
 800bbc0:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 800bbc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bbca:	3301      	adds	r3, #1
 800bbcc:	64bb      	str	r3, [r7, #72]	; 0x48
 800bbce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bbd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbd2:	429a      	cmp	r2, r3
 800bbd4:	d3f1      	bcc.n	800bbba <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 800bbd6:	e002      	b.n	800bbde <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 800bbd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bbda:	3301      	adds	r3, #1
 800bbdc:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 800bbde:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 800bbe2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bbe4:	4413      	add	r3, r2
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	f7ff fdb0 	bl	800b74c <is_aperture>
 800bbec:	4603      	mov	r3, r0
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d103      	bne.n	800bbfa <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 800bbf2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bbf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbf6:	429a      	cmp	r2, r3
 800bbf8:	d3ee      	bcc.n	800bbd8 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 800bbfa:	2301      	movs	r3, #1
 800bbfc:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 800bbfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc00:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 800bc0e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800bc12:	f107 0218 	add.w	r2, r7, #24
 800bc16:	9204      	str	r2, [sp, #16]
 800bc18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bc1a:	9203      	str	r2, [sp, #12]
 800bc1c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bc1e:	9202      	str	r2, [sp, #8]
 800bc20:	9301      	str	r3, [sp, #4]
 800bc22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc24:	9300      	str	r3, [sp, #0]
 800bc26:	4623      	mov	r3, r4
 800bc28:	4602      	mov	r2, r0
 800bc2a:	68f8      	ldr	r0, [r7, #12]
 800bc2c:	f7ff fe06 	bl	800b83c <enable_ref_spads>
 800bc30:	4603      	mov	r3, r0
 800bc32:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800bc36:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d11b      	bne.n	800bc76 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 800bc3e:	69bb      	ldr	r3, [r7, #24]
 800bc40:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 800bc42:	f107 0312 	add.w	r3, r7, #18
 800bc46:	4619      	mov	r1, r3
 800bc48:	68f8      	ldr	r0, [r7, #12]
 800bc4a:	f7ff fe73 	bl	800b934 <perform_ref_signal_measurement>
 800bc4e:	4603      	mov	r3, r0
 800bc50:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 800bc54:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d10c      	bne.n	800bc76 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 800bc5c:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 800bc5e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bc60:	429a      	cmp	r2, r3
 800bc62:	d208      	bcs.n	800bc76 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 800bc64:	2301      	movs	r3, #1
 800bc66:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 800bc6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc6c:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 800bc6e:	e002      	b.n	800bc76 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 800bc70:	2300      	movs	r3, #0
 800bc72:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bc74:	e000      	b.n	800bc78 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 800bc76:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800bc78:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	f040 80af 	bne.w	800bde0 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 800bc82:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 800bc84:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bc86:	429a      	cmp	r2, r3
 800bc88:	f240 80aa 	bls.w	800bde0 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 800bc8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc8e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 800bc92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc94:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	f503 7192 	add.w	r1, r3, #292	; 0x124
 800bc9c:	f107 031c 	add.w	r3, r7, #28
 800bca0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bca2:	4618      	mov	r0, r3
 800bca4:	f006 fc4c 	bl	8012540 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 800bca8:	8a7b      	ldrh	r3, [r7, #18]
 800bcaa:	461a      	mov	r2, r3
 800bcac:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bcae:	1ad3      	subs	r3, r2, r3
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	bfb8      	it	lt
 800bcb4:	425b      	neglt	r3, r3
 800bcb6:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 800bcb8:	2300      	movs	r3, #0
 800bcba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 800bcbe:	e086      	b.n	800bdce <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 800bcc6:	f107 0314 	add.w	r3, r7, #20
 800bcca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bccc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bcce:	f7ff fcde 	bl	800b68e <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 800bcd2:	697b      	ldr	r3, [r7, #20]
 800bcd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcd8:	d103      	bne.n	800bce2 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 800bcda:	23ce      	movs	r3, #206	; 0xce
 800bcdc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 800bce0:	e07e      	b.n	800bde0 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 800bce2:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800bce6:	697a      	ldr	r2, [r7, #20]
 800bce8:	4413      	add	r3, r2
 800bcea:	4618      	mov	r0, r3
 800bcec:	f7ff fd2e 	bl	800b74c <is_aperture>
 800bcf0:	4603      	mov	r3, r0
 800bcf2:	461a      	mov	r2, r3
 800bcf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcf6:	4293      	cmp	r3, r2
 800bcf8:	d003      	beq.n	800bd02 <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 800bcfa:	2301      	movs	r3, #1
 800bcfc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 800bd00:	e06e      	b.n	800bde0 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 800bd02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd04:	3301      	adds	r3, #1
 800bd06:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 800bd08:	697b      	ldr	r3, [r7, #20]
 800bd0a:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 800bd12:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bd14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bd16:	4618      	mov	r0, r3
 800bd18:	f7ff fd32 	bl	800b780 <enable_spad_bit>
 800bd1c:	4603      	mov	r3, r0
 800bd1e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800bd22:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d10c      	bne.n	800bd44 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 800bd2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd2c:	3301      	adds	r3, #1
 800bd2e:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 800bd36:	4619      	mov	r1, r3
 800bd38:	68f8      	ldr	r0, [r7, #12]
 800bd3a:	f7ff fd59 	bl	800b7f0 <set_ref_spad_map>
 800bd3e:	4603      	mov	r3, r0
 800bd40:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 800bd44:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d146      	bne.n	800bdda <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 800bd4c:	f107 0312 	add.w	r3, r7, #18
 800bd50:	4619      	mov	r1, r3
 800bd52:	68f8      	ldr	r0, [r7, #12]
 800bd54:	f7ff fdee 	bl	800b934 <perform_ref_signal_measurement>
 800bd58:	4603      	mov	r3, r0
 800bd5a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 800bd5e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d13b      	bne.n	800bdde <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 800bd66:	8a7b      	ldrh	r3, [r7, #18]
 800bd68:	461a      	mov	r2, r3
 800bd6a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bd6c:	1ad3      	subs	r3, r2, r3
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	bfb8      	it	lt
 800bd72:	425b      	neglt	r3, r3
 800bd74:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 800bd76:	8a7b      	ldrh	r3, [r7, #18]
 800bd78:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bd7a:	429a      	cmp	r2, r3
 800bd7c:	d21c      	bcs.n	800bdb8 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 800bd7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd82:	429a      	cmp	r2, r3
 800bd84:	d914      	bls.n	800bdb0 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 800bd86:	f107 031c 	add.w	r3, r7, #28
 800bd8a:	4619      	mov	r1, r3
 800bd8c:	68f8      	ldr	r0, [r7, #12]
 800bd8e:	f7ff fd2f 	bl	800b7f0 <set_ref_spad_map>
 800bd92:	4603      	mov	r3, r0
 800bd94:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 800bd9e:	f107 011c 	add.w	r1, r7, #28
 800bda2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bda4:	4618      	mov	r0, r3
 800bda6:	f006 fbcb 	bl	8012540 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 800bdaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdac:	3b01      	subs	r3, #1
 800bdae:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 800bdb0:	2301      	movs	r3, #1
 800bdb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bdb6:	e00a      	b.n	800bdce <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 800bdb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdba:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 800bdc2:	f107 031c 	add.w	r3, r7, #28
 800bdc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bdc8:	4618      	mov	r0, r3
 800bdca:	f006 fbb9 	bl	8012540 <memcpy>
		while (!complete) {
 800bdce:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	f43f af74 	beq.w	800bcc0 <VL53L0X_perform_ref_spad_management+0x2b8>
 800bdd8:	e002      	b.n	800bde0 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800bdda:	bf00      	nop
 800bddc:	e000      	b.n	800bde0 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800bdde:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800bde0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d115      	bne.n	800be14 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 800bde8:	68bb      	ldr	r3, [r7, #8]
 800bdea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bdec:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800bdf4:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	2201      	movs	r2, #1
 800bdfa:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800bdfe:	68bb      	ldr	r3, [r7, #8]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	b2da      	uxtb	r2, r3
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	781a      	ldrb	r2, [r3, #0]
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 800be14:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800be18:	4618      	mov	r0, r3
 800be1a:	375c      	adds	r7, #92	; 0x5c
 800be1c:	46bd      	mov	sp, r7
 800be1e:	bd90      	pop	{r4, r7, pc}

0800be20 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 800be20:	b590      	push	{r4, r7, lr}
 800be22:	b093      	sub	sp, #76	; 0x4c
 800be24:	af06      	add	r7, sp, #24
 800be26:	60f8      	str	r0, [r7, #12]
 800be28:	60b9      	str	r1, [r7, #8]
 800be2a:	4613      	mov	r3, r2
 800be2c:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800be2e:	2300      	movs	r3, #0
 800be30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 800be34:	2300      	movs	r3, #0
 800be36:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 800be38:	23b4      	movs	r3, #180	; 0xb4
 800be3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 800be3e:	2306      	movs	r3, #6
 800be40:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 800be42:	232c      	movs	r3, #44	; 0x2c
 800be44:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800be46:	2201      	movs	r2, #1
 800be48:	21ff      	movs	r1, #255	; 0xff
 800be4a:	68f8      	ldr	r0, [r7, #12]
 800be4c:	f002 fe16 	bl	800ea7c <VL53L0X_WrByte>
 800be50:	4603      	mov	r3, r0
 800be52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800be56:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d107      	bne.n	800be6e <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 800be5e:	2200      	movs	r2, #0
 800be60:	214f      	movs	r1, #79	; 0x4f
 800be62:	68f8      	ldr	r0, [r7, #12]
 800be64:	f002 fe0a 	bl	800ea7c <VL53L0X_WrByte>
 800be68:	4603      	mov	r3, r0
 800be6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800be6e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800be72:	2b00      	cmp	r3, #0
 800be74:	d107      	bne.n	800be86 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 800be76:	222c      	movs	r2, #44	; 0x2c
 800be78:	214e      	movs	r1, #78	; 0x4e
 800be7a:	68f8      	ldr	r0, [r7, #12]
 800be7c:	f002 fdfe 	bl	800ea7c <VL53L0X_WrByte>
 800be80:	4603      	mov	r3, r0
 800be82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800be86:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d107      	bne.n	800be9e <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800be8e:	2200      	movs	r2, #0
 800be90:	21ff      	movs	r1, #255	; 0xff
 800be92:	68f8      	ldr	r0, [r7, #12]
 800be94:	f002 fdf2 	bl	800ea7c <VL53L0X_WrByte>
 800be98:	4603      	mov	r3, r0
 800be9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800be9e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d109      	bne.n	800beba <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 800bea6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800beaa:	461a      	mov	r2, r3
 800beac:	21b6      	movs	r1, #182	; 0xb6
 800beae:	68f8      	ldr	r0, [r7, #12]
 800beb0:	f002 fde4 	bl	800ea7c <VL53L0X_WrByte>
 800beb4:	4603      	mov	r3, r0
 800beb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 800beba:	2300      	movs	r3, #0
 800bebc:	627b      	str	r3, [r7, #36]	; 0x24
 800bebe:	e009      	b.n	800bed4 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800bec0:	68fa      	ldr	r2, [r7, #12]
 800bec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bec4:	4413      	add	r3, r2
 800bec6:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800beca:	2200      	movs	r2, #0
 800becc:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800bece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bed0:	3301      	adds	r3, #1
 800bed2:	627b      	str	r3, [r7, #36]	; 0x24
 800bed4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bed6:	69fb      	ldr	r3, [r7, #28]
 800bed8:	429a      	cmp	r2, r3
 800beda:	d3f1      	bcc.n	800bec0 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 800bedc:	79fb      	ldrb	r3, [r7, #7]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d011      	beq.n	800bf06 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800bee2:	e002      	b.n	800beea <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 800bee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bee6:	3301      	adds	r3, #1
 800bee8:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800beea:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800beee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bef0:	4413      	add	r3, r2
 800bef2:	4618      	mov	r0, r3
 800bef4:	f7ff fc2a 	bl	800b74c <is_aperture>
 800bef8:	4603      	mov	r3, r0
 800befa:	2b00      	cmp	r3, #0
 800befc:	d103      	bne.n	800bf06 <VL53L0X_set_reference_spads+0xe6>
 800befe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bf00:	69bb      	ldr	r3, [r7, #24]
 800bf02:	429a      	cmp	r2, r3
 800bf04:	d3ee      	bcc.n	800bee4 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 800bf12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bf16:	79f9      	ldrb	r1, [r7, #7]
 800bf18:	f107 0214 	add.w	r2, r7, #20
 800bf1c:	9204      	str	r2, [sp, #16]
 800bf1e:	68ba      	ldr	r2, [r7, #8]
 800bf20:	9203      	str	r2, [sp, #12]
 800bf22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bf24:	9202      	str	r2, [sp, #8]
 800bf26:	9301      	str	r3, [sp, #4]
 800bf28:	69fb      	ldr	r3, [r7, #28]
 800bf2a:	9300      	str	r3, [sp, #0]
 800bf2c:	4623      	mov	r3, r4
 800bf2e:	4602      	mov	r2, r0
 800bf30:	68f8      	ldr	r0, [r7, #12]
 800bf32:	f7ff fc83 	bl	800b83c <enable_ref_spads>
 800bf36:	4603      	mov	r3, r0
 800bf38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 800bf3c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d10c      	bne.n	800bf5e <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	2201      	movs	r2, #1
 800bf48:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800bf4c:	68bb      	ldr	r3, [r7, #8]
 800bf4e:	b2da      	uxtb	r2, r3
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	79fa      	ldrb	r2, [r7, #7]
 800bf5a:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 800bf5e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800bf62:	4618      	mov	r0, r3
 800bf64:	3734      	adds	r7, #52	; 0x34
 800bf66:	46bd      	mov	sp, r7
 800bf68:	bd90      	pop	{r4, r7, pc}

0800bf6a <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 800bf6a:	b580      	push	{r7, lr}
 800bf6c:	b084      	sub	sp, #16
 800bf6e:	af00      	add	r7, sp, #0
 800bf70:	6078      	str	r0, [r7, #4]
 800bf72:	460b      	mov	r3, r1
 800bf74:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bf76:	2300      	movs	r3, #0
 800bf78:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800bf7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d10a      	bne.n	800bf98 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800bf82:	78fb      	ldrb	r3, [r7, #3]
 800bf84:	f043 0301 	orr.w	r3, r3, #1
 800bf88:	b2db      	uxtb	r3, r3
 800bf8a:	461a      	mov	r2, r3
 800bf8c:	2100      	movs	r1, #0
 800bf8e:	6878      	ldr	r0, [r7, #4]
 800bf90:	f002 fd74 	bl	800ea7c <VL53L0X_WrByte>
 800bf94:	4603      	mov	r3, r0
 800bf96:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 800bf98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d104      	bne.n	800bfaa <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800bfa0:	6878      	ldr	r0, [r7, #4]
 800bfa2:	f000 f9e2 	bl	800c36a <VL53L0X_measurement_poll_for_completion>
 800bfa6:	4603      	mov	r3, r0
 800bfa8:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800bfaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d105      	bne.n	800bfbe <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800bfb2:	2100      	movs	r1, #0
 800bfb4:	6878      	ldr	r0, [r7, #4]
 800bfb6:	f7ff fa6d 	bl	800b494 <VL53L0X_ClearInterruptMask>
 800bfba:	4603      	mov	r3, r0
 800bfbc:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800bfbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d106      	bne.n	800bfd4 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	2100      	movs	r1, #0
 800bfca:	6878      	ldr	r0, [r7, #4]
 800bfcc:	f002 fd56 	bl	800ea7c <VL53L0X_WrByte>
 800bfd0:	4603      	mov	r3, r0
 800bfd2:	73fb      	strb	r3, [r7, #15]

	return Status;
 800bfd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bfd8:	4618      	mov	r0, r3
 800bfda:	3710      	adds	r7, #16
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	bd80      	pop	{r7, pc}

0800bfe0 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b084      	sub	sp, #16
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]
 800bfe8:	4608      	mov	r0, r1
 800bfea:	4611      	mov	r1, r2
 800bfec:	461a      	mov	r2, r3
 800bfee:	4603      	mov	r3, r0
 800bff0:	70fb      	strb	r3, [r7, #3]
 800bff2:	460b      	mov	r3, r1
 800bff4:	70bb      	strb	r3, [r7, #2]
 800bff6:	4613      	mov	r3, r2
 800bff8:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bffa:	2300      	movs	r3, #0
 800bffc:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 800bffe:	2300      	movs	r3, #0
 800c000:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800c002:	2201      	movs	r2, #1
 800c004:	21ff      	movs	r1, #255	; 0xff
 800c006:	6878      	ldr	r0, [r7, #4]
 800c008:	f002 fd38 	bl	800ea7c <VL53L0X_WrByte>
 800c00c:	4603      	mov	r3, r0
 800c00e:	461a      	mov	r2, r3
 800c010:	7bfb      	ldrb	r3, [r7, #15]
 800c012:	4313      	orrs	r3, r2
 800c014:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800c016:	2200      	movs	r2, #0
 800c018:	2100      	movs	r1, #0
 800c01a:	6878      	ldr	r0, [r7, #4]
 800c01c:	f002 fd2e 	bl	800ea7c <VL53L0X_WrByte>
 800c020:	4603      	mov	r3, r0
 800c022:	461a      	mov	r2, r3
 800c024:	7bfb      	ldrb	r3, [r7, #15]
 800c026:	4313      	orrs	r3, r2
 800c028:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800c02a:	2200      	movs	r2, #0
 800c02c:	21ff      	movs	r1, #255	; 0xff
 800c02e:	6878      	ldr	r0, [r7, #4]
 800c030:	f002 fd24 	bl	800ea7c <VL53L0X_WrByte>
 800c034:	4603      	mov	r3, r0
 800c036:	461a      	mov	r2, r3
 800c038:	7bfb      	ldrb	r3, [r7, #15]
 800c03a:	4313      	orrs	r3, r2
 800c03c:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 800c03e:	78fb      	ldrb	r3, [r7, #3]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d01e      	beq.n	800c082 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 800c044:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d009      	beq.n	800c060 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 800c04c:	69ba      	ldr	r2, [r7, #24]
 800c04e:	21cb      	movs	r1, #203	; 0xcb
 800c050:	6878      	ldr	r0, [r7, #4]
 800c052:	f002 fd95 	bl	800eb80 <VL53L0X_RdByte>
 800c056:	4603      	mov	r3, r0
 800c058:	461a      	mov	r2, r3
 800c05a:	7bfb      	ldrb	r3, [r7, #15]
 800c05c:	4313      	orrs	r3, r2
 800c05e:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800c060:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c064:	2b00      	cmp	r3, #0
 800c066:	d02a      	beq.n	800c0be <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 800c068:	f107 030e 	add.w	r3, r7, #14
 800c06c:	461a      	mov	r2, r3
 800c06e:	21ee      	movs	r1, #238	; 0xee
 800c070:	6878      	ldr	r0, [r7, #4]
 800c072:	f002 fd85 	bl	800eb80 <VL53L0X_RdByte>
 800c076:	4603      	mov	r3, r0
 800c078:	461a      	mov	r2, r3
 800c07a:	7bfb      	ldrb	r3, [r7, #15]
 800c07c:	4313      	orrs	r3, r2
 800c07e:	73fb      	strb	r3, [r7, #15]
 800c080:	e01d      	b.n	800c0be <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 800c082:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d00a      	beq.n	800c0a0 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 800c08a:	78bb      	ldrb	r3, [r7, #2]
 800c08c:	461a      	mov	r2, r3
 800c08e:	21cb      	movs	r1, #203	; 0xcb
 800c090:	6878      	ldr	r0, [r7, #4]
 800c092:	f002 fcf3 	bl	800ea7c <VL53L0X_WrByte>
 800c096:	4603      	mov	r3, r0
 800c098:	461a      	mov	r2, r3
 800c09a:	7bfb      	ldrb	r3, [r7, #15]
 800c09c:	4313      	orrs	r3, r2
 800c09e:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800c0a0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d00a      	beq.n	800c0be <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 800c0a8:	787b      	ldrb	r3, [r7, #1]
 800c0aa:	2280      	movs	r2, #128	; 0x80
 800c0ac:	21ee      	movs	r1, #238	; 0xee
 800c0ae:	6878      	ldr	r0, [r7, #4]
 800c0b0:	f002 fd32 	bl	800eb18 <VL53L0X_UpdateByte>
 800c0b4:	4603      	mov	r3, r0
 800c0b6:	461a      	mov	r2, r3
 800c0b8:	7bfb      	ldrb	r3, [r7, #15]
 800c0ba:	4313      	orrs	r3, r2
 800c0bc:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800c0be:	2201      	movs	r2, #1
 800c0c0:	21ff      	movs	r1, #255	; 0xff
 800c0c2:	6878      	ldr	r0, [r7, #4]
 800c0c4:	f002 fcda 	bl	800ea7c <VL53L0X_WrByte>
 800c0c8:	4603      	mov	r3, r0
 800c0ca:	461a      	mov	r2, r3
 800c0cc:	7bfb      	ldrb	r3, [r7, #15]
 800c0ce:	4313      	orrs	r3, r2
 800c0d0:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800c0d2:	2201      	movs	r2, #1
 800c0d4:	2100      	movs	r1, #0
 800c0d6:	6878      	ldr	r0, [r7, #4]
 800c0d8:	f002 fcd0 	bl	800ea7c <VL53L0X_WrByte>
 800c0dc:	4603      	mov	r3, r0
 800c0de:	461a      	mov	r2, r3
 800c0e0:	7bfb      	ldrb	r3, [r7, #15]
 800c0e2:	4313      	orrs	r3, r2
 800c0e4:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	21ff      	movs	r1, #255	; 0xff
 800c0ea:	6878      	ldr	r0, [r7, #4]
 800c0ec:	f002 fcc6 	bl	800ea7c <VL53L0X_WrByte>
 800c0f0:	4603      	mov	r3, r0
 800c0f2:	461a      	mov	r2, r3
 800c0f4:	7bfb      	ldrb	r3, [r7, #15]
 800c0f6:	4313      	orrs	r3, r2
 800c0f8:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 800c0fa:	7bbb      	ldrb	r3, [r7, #14]
 800c0fc:	f023 0310 	bic.w	r3, r3, #16
 800c100:	b2da      	uxtb	r2, r3
 800c102:	69fb      	ldr	r3, [r7, #28]
 800c104:	701a      	strb	r2, [r3, #0]

	return Status;
 800c106:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c10a:	4618      	mov	r0, r3
 800c10c:	3710      	adds	r7, #16
 800c10e:	46bd      	mov	sp, r7
 800c110:	bd80      	pop	{r7, pc}

0800c112 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800c112:	b580      	push	{r7, lr}
 800c114:	b08a      	sub	sp, #40	; 0x28
 800c116:	af04      	add	r7, sp, #16
 800c118:	60f8      	str	r0, [r7, #12]
 800c11a:	60b9      	str	r1, [r7, #8]
 800c11c:	4611      	mov	r1, r2
 800c11e:	461a      	mov	r2, r3
 800c120:	460b      	mov	r3, r1
 800c122:	71fb      	strb	r3, [r7, #7]
 800c124:	4613      	mov	r3, r2
 800c126:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c128:	2300      	movs	r3, #0
 800c12a:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800c12c:	2300      	movs	r3, #0
 800c12e:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800c130:	2300      	movs	r3, #0
 800c132:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800c134:	2300      	movs	r3, #0
 800c136:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 800c138:	2300      	movs	r3, #0
 800c13a:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800c13c:	79bb      	ldrb	r3, [r7, #6]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d003      	beq.n	800c14a <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800c148:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 800c14a:	2201      	movs	r2, #1
 800c14c:	2101      	movs	r1, #1
 800c14e:	68f8      	ldr	r0, [r7, #12]
 800c150:	f002 fc94 	bl	800ea7c <VL53L0X_WrByte>
 800c154:	4603      	mov	r3, r0
 800c156:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800c158:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d105      	bne.n	800c16c <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 800c160:	2140      	movs	r1, #64	; 0x40
 800c162:	68f8      	ldr	r0, [r7, #12]
 800c164:	f7ff ff01 	bl	800bf6a <VL53L0X_perform_single_ref_calibration>
 800c168:	4603      	mov	r3, r0
 800c16a:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800c16c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d115      	bne.n	800c1a0 <VL53L0X_perform_vhv_calibration+0x8e>
 800c174:	79fb      	ldrb	r3, [r7, #7]
 800c176:	2b01      	cmp	r3, #1
 800c178:	d112      	bne.n	800c1a0 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800c17a:	7d39      	ldrb	r1, [r7, #20]
 800c17c:	7d7a      	ldrb	r2, [r7, #21]
 800c17e:	2300      	movs	r3, #0
 800c180:	9303      	str	r3, [sp, #12]
 800c182:	2301      	movs	r3, #1
 800c184:	9302      	str	r3, [sp, #8]
 800c186:	f107 0313 	add.w	r3, r7, #19
 800c18a:	9301      	str	r3, [sp, #4]
 800c18c:	68bb      	ldr	r3, [r7, #8]
 800c18e:	9300      	str	r3, [sp, #0]
 800c190:	460b      	mov	r3, r1
 800c192:	2101      	movs	r1, #1
 800c194:	68f8      	ldr	r0, [r7, #12]
 800c196:	f7ff ff23 	bl	800bfe0 <VL53L0X_ref_calibration_io>
 800c19a:	4603      	mov	r3, r0
 800c19c:	75fb      	strb	r3, [r7, #23]
 800c19e:	e002      	b.n	800c1a6 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 800c1a0:	68bb      	ldr	r3, [r7, #8]
 800c1a2:	2200      	movs	r2, #0
 800c1a4:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800c1a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d112      	bne.n	800c1d4 <VL53L0X_perform_vhv_calibration+0xc2>
 800c1ae:	79bb      	ldrb	r3, [r7, #6]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d00f      	beq.n	800c1d4 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800c1b4:	7dbb      	ldrb	r3, [r7, #22]
 800c1b6:	461a      	mov	r2, r3
 800c1b8:	2101      	movs	r1, #1
 800c1ba:	68f8      	ldr	r0, [r7, #12]
 800c1bc:	f002 fc5e 	bl	800ea7c <VL53L0X_WrByte>
 800c1c0:	4603      	mov	r3, r0
 800c1c2:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800c1c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d103      	bne.n	800c1d4 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	7dba      	ldrb	r2, [r7, #22]
 800c1d0:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800c1d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c1d8:	4618      	mov	r0, r3
 800c1da:	3718      	adds	r7, #24
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	bd80      	pop	{r7, pc}

0800c1e0 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b08a      	sub	sp, #40	; 0x28
 800c1e4:	af04      	add	r7, sp, #16
 800c1e6:	60f8      	str	r0, [r7, #12]
 800c1e8:	60b9      	str	r1, [r7, #8]
 800c1ea:	4611      	mov	r1, r2
 800c1ec:	461a      	mov	r2, r3
 800c1ee:	460b      	mov	r3, r1
 800c1f0:	71fb      	strb	r3, [r7, #7]
 800c1f2:	4613      	mov	r3, r2
 800c1f4:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800c1fe:	2300      	movs	r3, #0
 800c200:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800c202:	2300      	movs	r3, #0
 800c204:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800c206:	79bb      	ldrb	r3, [r7, #6]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d003      	beq.n	800c214 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800c212:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 800c214:	2202      	movs	r2, #2
 800c216:	2101      	movs	r1, #1
 800c218:	68f8      	ldr	r0, [r7, #12]
 800c21a:	f002 fc2f 	bl	800ea7c <VL53L0X_WrByte>
 800c21e:	4603      	mov	r3, r0
 800c220:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800c222:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d105      	bne.n	800c236 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 800c22a:	2100      	movs	r1, #0
 800c22c:	68f8      	ldr	r0, [r7, #12]
 800c22e:	f7ff fe9c 	bl	800bf6a <VL53L0X_perform_single_ref_calibration>
 800c232:	4603      	mov	r3, r0
 800c234:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800c236:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d115      	bne.n	800c26a <VL53L0X_perform_phase_calibration+0x8a>
 800c23e:	79fb      	ldrb	r3, [r7, #7]
 800c240:	2b01      	cmp	r3, #1
 800c242:	d112      	bne.n	800c26a <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800c244:	7d39      	ldrb	r1, [r7, #20]
 800c246:	7d7a      	ldrb	r2, [r7, #21]
 800c248:	2301      	movs	r3, #1
 800c24a:	9303      	str	r3, [sp, #12]
 800c24c:	2300      	movs	r3, #0
 800c24e:	9302      	str	r3, [sp, #8]
 800c250:	68bb      	ldr	r3, [r7, #8]
 800c252:	9301      	str	r3, [sp, #4]
 800c254:	f107 0313 	add.w	r3, r7, #19
 800c258:	9300      	str	r3, [sp, #0]
 800c25a:	460b      	mov	r3, r1
 800c25c:	2101      	movs	r1, #1
 800c25e:	68f8      	ldr	r0, [r7, #12]
 800c260:	f7ff febe 	bl	800bfe0 <VL53L0X_ref_calibration_io>
 800c264:	4603      	mov	r3, r0
 800c266:	75fb      	strb	r3, [r7, #23]
 800c268:	e002      	b.n	800c270 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 800c26a:	68bb      	ldr	r3, [r7, #8]
 800c26c:	2200      	movs	r2, #0
 800c26e:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800c270:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d112      	bne.n	800c29e <VL53L0X_perform_phase_calibration+0xbe>
 800c278:	79bb      	ldrb	r3, [r7, #6]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d00f      	beq.n	800c29e <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800c27e:	7dbb      	ldrb	r3, [r7, #22]
 800c280:	461a      	mov	r2, r3
 800c282:	2101      	movs	r1, #1
 800c284:	68f8      	ldr	r0, [r7, #12]
 800c286:	f002 fbf9 	bl	800ea7c <VL53L0X_WrByte>
 800c28a:	4603      	mov	r3, r0
 800c28c:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800c28e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c292:	2b00      	cmp	r3, #0
 800c294:	d103      	bne.n	800c29e <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	7dba      	ldrb	r2, [r7, #22]
 800c29a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800c29e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	3718      	adds	r7, #24
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	bd80      	pop	{r7, pc}

0800c2aa <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 800c2aa:	b580      	push	{r7, lr}
 800c2ac:	b086      	sub	sp, #24
 800c2ae:	af00      	add	r7, sp, #0
 800c2b0:	60f8      	str	r0, [r7, #12]
 800c2b2:	60b9      	str	r1, [r7, #8]
 800c2b4:	607a      	str	r2, [r7, #4]
 800c2b6:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800c2bc:	2300      	movs	r3, #0
 800c2be:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800c2c6:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 800c2c8:	78fa      	ldrb	r2, [r7, #3]
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	68b9      	ldr	r1, [r7, #8]
 800c2ce:	68f8      	ldr	r0, [r7, #12]
 800c2d0:	f7ff ff1f 	bl	800c112 <VL53L0X_perform_vhv_calibration>
 800c2d4:	4603      	mov	r3, r0
 800c2d6:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800c2d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d107      	bne.n	800c2f0 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 800c2e0:	78fa      	ldrb	r2, [r7, #3]
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	6879      	ldr	r1, [r7, #4]
 800c2e6:	68f8      	ldr	r0, [r7, #12]
 800c2e8:	f7ff ff7a 	bl	800c1e0 <VL53L0X_perform_phase_calibration>
 800c2ec:	4603      	mov	r3, r0
 800c2ee:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 800c2f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d10f      	bne.n	800c318 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800c2f8:	7dbb      	ldrb	r3, [r7, #22]
 800c2fa:	461a      	mov	r2, r3
 800c2fc:	2101      	movs	r1, #1
 800c2fe:	68f8      	ldr	r0, [r7, #12]
 800c300:	f002 fbbc 	bl	800ea7c <VL53L0X_WrByte>
 800c304:	4603      	mov	r3, r0
 800c306:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800c308:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d103      	bne.n	800c318 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	7dba      	ldrb	r2, [r7, #22]
 800c314:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800c318:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c31c:	4618      	mov	r0, r3
 800c31e:	3718      	adds	r7, #24
 800c320:	46bd      	mov	sp, r7
 800c322:	bd80      	pop	{r7, pc}

0800c324 <VL53L0X_set_ref_calibration>:

VL53L0X_Error VL53L0X_set_ref_calibration(VL53L0X_DEV Dev,
		uint8_t VhvSettings, uint8_t PhaseCal)
{
 800c324:	b580      	push	{r7, lr}
 800c326:	b088      	sub	sp, #32
 800c328:	af04      	add	r7, sp, #16
 800c32a:	6078      	str	r0, [r7, #4]
 800c32c:	460b      	mov	r3, r1
 800c32e:	70fb      	strb	r3, [r7, #3]
 800c330:	4613      	mov	r3, r2
 800c332:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c334:	2300      	movs	r3, #0
 800c336:	73fb      	strb	r3, [r7, #15]
	uint8_t pVhvSettings;
	uint8_t pPhaseCal;

	Status = VL53L0X_ref_calibration_io(Dev, 0,
 800c338:	78b9      	ldrb	r1, [r7, #2]
 800c33a:	78fa      	ldrb	r2, [r7, #3]
 800c33c:	2301      	movs	r3, #1
 800c33e:	9303      	str	r3, [sp, #12]
 800c340:	2301      	movs	r3, #1
 800c342:	9302      	str	r3, [sp, #8]
 800c344:	f107 030d 	add.w	r3, r7, #13
 800c348:	9301      	str	r3, [sp, #4]
 800c34a:	f107 030e 	add.w	r3, r7, #14
 800c34e:	9300      	str	r3, [sp, #0]
 800c350:	460b      	mov	r3, r1
 800c352:	2100      	movs	r1, #0
 800c354:	6878      	ldr	r0, [r7, #4]
 800c356:	f7ff fe43 	bl	800bfe0 <VL53L0X_ref_calibration_io>
 800c35a:	4603      	mov	r3, r0
 800c35c:	73fb      	strb	r3, [r7, #15]
		VhvSettings, PhaseCal,
		&pVhvSettings, &pPhaseCal,
		1, 1);

	return Status;
 800c35e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c362:	4618      	mov	r0, r3
 800c364:	3710      	adds	r7, #16
 800c366:	46bd      	mov	sp, r7
 800c368:	bd80      	pop	{r7, pc}

0800c36a <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 800c36a:	b580      	push	{r7, lr}
 800c36c:	b086      	sub	sp, #24
 800c36e:	af00      	add	r7, sp, #0
 800c370:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c372:	2300      	movs	r3, #0
 800c374:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 800c376:	2300      	movs	r3, #0
 800c378:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 800c37a:	2300      	movs	r3, #0
 800c37c:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800c37e:	f107 030f 	add.w	r3, r7, #15
 800c382:	4619      	mov	r1, r3
 800c384:	6878      	ldr	r0, [r7, #4]
 800c386:	f7fe fd97 	bl	800aeb8 <VL53L0X_GetMeasurementDataReady>
 800c38a:	4603      	mov	r3, r0
 800c38c:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 800c38e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d110      	bne.n	800c3b8 <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 800c396:	7bfb      	ldrb	r3, [r7, #15]
 800c398:	2b01      	cmp	r3, #1
 800c39a:	d00f      	beq.n	800c3bc <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 800c39c:	693b      	ldr	r3, [r7, #16]
 800c39e:	3301      	adds	r3, #1
 800c3a0:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 800c3a2:	693b      	ldr	r3, [r7, #16]
 800c3a4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800c3a8:	d302      	bcc.n	800c3b0 <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 800c3aa:	23f9      	movs	r3, #249	; 0xf9
 800c3ac:	75fb      	strb	r3, [r7, #23]
			break;
 800c3ae:	e006      	b.n	800c3be <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 800c3b0:	6878      	ldr	r0, [r7, #4]
 800c3b2:	f002 fc83 	bl	800ecbc <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800c3b6:	e7e2      	b.n	800c37e <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 800c3b8:	bf00      	nop
 800c3ba:	e000      	b.n	800c3be <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 800c3bc:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 800c3be:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	3718      	adds	r7, #24
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	bd80      	pop	{r7, pc}

0800c3ca <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800c3ca:	b480      	push	{r7}
 800c3cc:	b085      	sub	sp, #20
 800c3ce:	af00      	add	r7, sp, #0
 800c3d0:	4603      	mov	r3, r0
 800c3d2:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800c3d8:	79fb      	ldrb	r3, [r7, #7]
 800c3da:	3301      	adds	r3, #1
 800c3dc:	b2db      	uxtb	r3, r3
 800c3de:	005b      	lsls	r3, r3, #1
 800c3e0:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800c3e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	3714      	adds	r7, #20
 800c3e8:	46bd      	mov	sp, r7
 800c3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ee:	4770      	bx	lr

0800c3f0 <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 800c3f0:	b480      	push	{r7}
 800c3f2:	b085      	sub	sp, #20
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	4603      	mov	r3, r0
 800c3f8:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 800c3fe:	79fb      	ldrb	r3, [r7, #7]
 800c400:	085b      	lsrs	r3, r3, #1
 800c402:	b2db      	uxtb	r3, r3
 800c404:	3b01      	subs	r3, #1
 800c406:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 800c408:	7bfb      	ldrb	r3, [r7, #15]
}
 800c40a:	4618      	mov	r0, r3
 800c40c:	3714      	adds	r7, #20
 800c40e:	46bd      	mov	sp, r7
 800c410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c414:	4770      	bx	lr

0800c416 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 800c416:	b480      	push	{r7}
 800c418:	b085      	sub	sp, #20
 800c41a:	af00      	add	r7, sp, #0
 800c41c:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 800c41e:	2300      	movs	r3, #0
 800c420:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800c422:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c426:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 800c428:	e002      	b.n	800c430 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 800c42a:	68bb      	ldr	r3, [r7, #8]
 800c42c:	089b      	lsrs	r3, r3, #2
 800c42e:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800c430:	68ba      	ldr	r2, [r7, #8]
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	429a      	cmp	r2, r3
 800c436:	d8f8      	bhi.n	800c42a <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 800c438:	e017      	b.n	800c46a <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 800c43a:	68fa      	ldr	r2, [r7, #12]
 800c43c:	68bb      	ldr	r3, [r7, #8]
 800c43e:	4413      	add	r3, r2
 800c440:	687a      	ldr	r2, [r7, #4]
 800c442:	429a      	cmp	r2, r3
 800c444:	d30b      	bcc.n	800c45e <VL53L0X_isqrt+0x48>
			num -= res + bit;
 800c446:	68fa      	ldr	r2, [r7, #12]
 800c448:	68bb      	ldr	r3, [r7, #8]
 800c44a:	4413      	add	r3, r2
 800c44c:	687a      	ldr	r2, [r7, #4]
 800c44e:	1ad3      	subs	r3, r2, r3
 800c450:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	085b      	lsrs	r3, r3, #1
 800c456:	68ba      	ldr	r2, [r7, #8]
 800c458:	4413      	add	r3, r2
 800c45a:	60fb      	str	r3, [r7, #12]
 800c45c:	e002      	b.n	800c464 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	085b      	lsrs	r3, r3, #1
 800c462:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 800c464:	68bb      	ldr	r3, [r7, #8]
 800c466:	089b      	lsrs	r3, r3, #2
 800c468:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800c46a:	68bb      	ldr	r3, [r7, #8]
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d1e4      	bne.n	800c43a <VL53L0X_isqrt+0x24>
	}

	return res;
 800c470:	68fb      	ldr	r3, [r7, #12]
}
 800c472:	4618      	mov	r0, r3
 800c474:	3714      	adds	r7, #20
 800c476:	46bd      	mov	sp, r7
 800c478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47c:	4770      	bx	lr

0800c47e <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 800c47e:	b580      	push	{r7, lr}
 800c480:	b086      	sub	sp, #24
 800c482:	af00      	add	r7, sp, #0
 800c484:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c486:	2300      	movs	r3, #0
 800c488:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 800c48a:	2200      	movs	r2, #0
 800c48c:	2183      	movs	r1, #131	; 0x83
 800c48e:	6878      	ldr	r0, [r7, #4]
 800c490:	f002 faf4 	bl	800ea7c <VL53L0X_WrByte>
 800c494:	4603      	mov	r3, r0
 800c496:	461a      	mov	r2, r3
 800c498:	7dfb      	ldrb	r3, [r7, #23]
 800c49a:	4313      	orrs	r3, r2
 800c49c:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 800c49e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d11e      	bne.n	800c4e4 <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 800c4aa:	f107 030f 	add.w	r3, r7, #15
 800c4ae:	461a      	mov	r2, r3
 800c4b0:	2183      	movs	r1, #131	; 0x83
 800c4b2:	6878      	ldr	r0, [r7, #4]
 800c4b4:	f002 fb64 	bl	800eb80 <VL53L0X_RdByte>
 800c4b8:	4603      	mov	r3, r0
 800c4ba:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 800c4bc:	7bfb      	ldrb	r3, [r7, #15]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d10a      	bne.n	800c4d8 <VL53L0X_device_read_strobe+0x5a>
 800c4c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d106      	bne.n	800c4d8 <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 800c4ca:	693b      	ldr	r3, [r7, #16]
 800c4cc:	3301      	adds	r3, #1
 800c4ce:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800c4d0:	693b      	ldr	r3, [r7, #16]
 800c4d2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800c4d6:	d3e8      	bcc.n	800c4aa <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800c4d8:	693b      	ldr	r3, [r7, #16]
 800c4da:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800c4de:	d301      	bcc.n	800c4e4 <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 800c4e0:	23f9      	movs	r3, #249	; 0xf9
 800c4e2:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 800c4e4:	2201      	movs	r2, #1
 800c4e6:	2183      	movs	r1, #131	; 0x83
 800c4e8:	6878      	ldr	r0, [r7, #4]
 800c4ea:	f002 fac7 	bl	800ea7c <VL53L0X_WrByte>
 800c4ee:	4603      	mov	r3, r0
 800c4f0:	461a      	mov	r2, r3
 800c4f2:	7dfb      	ldrb	r3, [r7, #23]
 800c4f4:	4313      	orrs	r3, r2
 800c4f6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 800c4f8:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	3718      	adds	r7, #24
 800c500:	46bd      	mov	sp, r7
 800c502:	bd80      	pop	{r7, pc}

0800c504 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 800c504:	b580      	push	{r7, lr}
 800c506:	b098      	sub	sp, #96	; 0x60
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
 800c50c:	460b      	mov	r3, r1
 800c50e:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c510:	2300      	movs	r3, #0
 800c512:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 800c516:	2300      	movs	r3, #0
 800c518:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 800c51c:	2300      	movs	r3, #0
 800c51e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 800c522:	2300      	movs	r3, #0
 800c524:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 800c526:	2300      	movs	r3, #0
 800c528:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 800c52a:	2300      	movs	r3, #0
 800c52c:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 800c52e:	2300      	movs	r3, #0
 800c530:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 800c534:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800c538:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 800c53a:	2300      	movs	r3, #0
 800c53c:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 800c53e:	2300      	movs	r3, #0
 800c540:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 800c542:	2300      	movs	r3, #0
 800c544:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800c54c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 800c550:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c554:	2b07      	cmp	r3, #7
 800c556:	f000 8408 	beq.w	800cd6a <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800c55a:	2201      	movs	r2, #1
 800c55c:	2180      	movs	r1, #128	; 0x80
 800c55e:	6878      	ldr	r0, [r7, #4]
 800c560:	f002 fa8c 	bl	800ea7c <VL53L0X_WrByte>
 800c564:	4603      	mov	r3, r0
 800c566:	461a      	mov	r2, r3
 800c568:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c56c:	4313      	orrs	r3, r2
 800c56e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800c572:	2201      	movs	r2, #1
 800c574:	21ff      	movs	r1, #255	; 0xff
 800c576:	6878      	ldr	r0, [r7, #4]
 800c578:	f002 fa80 	bl	800ea7c <VL53L0X_WrByte>
 800c57c:	4603      	mov	r3, r0
 800c57e:	461a      	mov	r2, r3
 800c580:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c584:	4313      	orrs	r3, r2
 800c586:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800c58a:	2200      	movs	r2, #0
 800c58c:	2100      	movs	r1, #0
 800c58e:	6878      	ldr	r0, [r7, #4]
 800c590:	f002 fa74 	bl	800ea7c <VL53L0X_WrByte>
 800c594:	4603      	mov	r3, r0
 800c596:	461a      	mov	r2, r3
 800c598:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c59c:	4313      	orrs	r3, r2
 800c59e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800c5a2:	2206      	movs	r2, #6
 800c5a4:	21ff      	movs	r1, #255	; 0xff
 800c5a6:	6878      	ldr	r0, [r7, #4]
 800c5a8:	f002 fa68 	bl	800ea7c <VL53L0X_WrByte>
 800c5ac:	4603      	mov	r3, r0
 800c5ae:	461a      	mov	r2, r3
 800c5b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c5b4:	4313      	orrs	r3, r2
 800c5b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800c5ba:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800c5be:	461a      	mov	r2, r3
 800c5c0:	2183      	movs	r1, #131	; 0x83
 800c5c2:	6878      	ldr	r0, [r7, #4]
 800c5c4:	f002 fadc 	bl	800eb80 <VL53L0X_RdByte>
 800c5c8:	4603      	mov	r3, r0
 800c5ca:	461a      	mov	r2, r3
 800c5cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c5d0:	4313      	orrs	r3, r2
 800c5d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 800c5d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c5da:	f043 0304 	orr.w	r3, r3, #4
 800c5de:	b2db      	uxtb	r3, r3
 800c5e0:	461a      	mov	r2, r3
 800c5e2:	2183      	movs	r1, #131	; 0x83
 800c5e4:	6878      	ldr	r0, [r7, #4]
 800c5e6:	f002 fa49 	bl	800ea7c <VL53L0X_WrByte>
 800c5ea:	4603      	mov	r3, r0
 800c5ec:	461a      	mov	r2, r3
 800c5ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c5f2:	4313      	orrs	r3, r2
 800c5f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 800c5f8:	2207      	movs	r2, #7
 800c5fa:	21ff      	movs	r1, #255	; 0xff
 800c5fc:	6878      	ldr	r0, [r7, #4]
 800c5fe:	f002 fa3d 	bl	800ea7c <VL53L0X_WrByte>
 800c602:	4603      	mov	r3, r0
 800c604:	461a      	mov	r2, r3
 800c606:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c60a:	4313      	orrs	r3, r2
 800c60c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 800c610:	2201      	movs	r2, #1
 800c612:	2181      	movs	r1, #129	; 0x81
 800c614:	6878      	ldr	r0, [r7, #4]
 800c616:	f002 fa31 	bl	800ea7c <VL53L0X_WrByte>
 800c61a:	4603      	mov	r3, r0
 800c61c:	461a      	mov	r2, r3
 800c61e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c622:	4313      	orrs	r3, r2
 800c624:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 800c628:	6878      	ldr	r0, [r7, #4]
 800c62a:	f002 fb47 	bl	800ecbc <VL53L0X_PollingDelay>
 800c62e:	4603      	mov	r3, r0
 800c630:	461a      	mov	r2, r3
 800c632:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c636:	4313      	orrs	r3, r2
 800c638:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800c63c:	2201      	movs	r2, #1
 800c63e:	2180      	movs	r1, #128	; 0x80
 800c640:	6878      	ldr	r0, [r7, #4]
 800c642:	f002 fa1b 	bl	800ea7c <VL53L0X_WrByte>
 800c646:	4603      	mov	r3, r0
 800c648:	461a      	mov	r2, r3
 800c64a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c64e:	4313      	orrs	r3, r2
 800c650:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 800c654:	78fb      	ldrb	r3, [r7, #3]
 800c656:	f003 0301 	and.w	r3, r3, #1
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	f000 8098 	beq.w	800c790 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800c660:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c664:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800c668:	2b00      	cmp	r3, #0
 800c66a:	f040 8091 	bne.w	800c790 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 800c66e:	226b      	movs	r2, #107	; 0x6b
 800c670:	2194      	movs	r1, #148	; 0x94
 800c672:	6878      	ldr	r0, [r7, #4]
 800c674:	f002 fa02 	bl	800ea7c <VL53L0X_WrByte>
 800c678:	4603      	mov	r3, r0
 800c67a:	461a      	mov	r2, r3
 800c67c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c680:	4313      	orrs	r3, r2
 800c682:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c686:	6878      	ldr	r0, [r7, #4]
 800c688:	f7ff fef9 	bl	800c47e <VL53L0X_device_read_strobe>
 800c68c:	4603      	mov	r3, r0
 800c68e:	461a      	mov	r2, r3
 800c690:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c694:	4313      	orrs	r3, r2
 800c696:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800c69a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c69e:	461a      	mov	r2, r3
 800c6a0:	2190      	movs	r1, #144	; 0x90
 800c6a2:	6878      	ldr	r0, [r7, #4]
 800c6a4:	f002 face 	bl	800ec44 <VL53L0X_RdDWord>
 800c6a8:	4603      	mov	r3, r0
 800c6aa:	461a      	mov	r2, r3
 800c6ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c6b0:	4313      	orrs	r3, r2
 800c6b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 800c6b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6b8:	0a1b      	lsrs	r3, r3, #8
 800c6ba:	b2db      	uxtb	r3, r3
 800c6bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c6c0:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 800c6c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6c6:	0bdb      	lsrs	r3, r3, #15
 800c6c8:	b2db      	uxtb	r3, r3
 800c6ca:	f003 0301 	and.w	r3, r3, #1
 800c6ce:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 800c6d2:	2224      	movs	r2, #36	; 0x24
 800c6d4:	2194      	movs	r1, #148	; 0x94
 800c6d6:	6878      	ldr	r0, [r7, #4]
 800c6d8:	f002 f9d0 	bl	800ea7c <VL53L0X_WrByte>
 800c6dc:	4603      	mov	r3, r0
 800c6de:	461a      	mov	r2, r3
 800c6e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c6e4:	4313      	orrs	r3, r2
 800c6e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c6ea:	6878      	ldr	r0, [r7, #4]
 800c6ec:	f7ff fec7 	bl	800c47e <VL53L0X_device_read_strobe>
 800c6f0:	4603      	mov	r3, r0
 800c6f2:	461a      	mov	r2, r3
 800c6f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c6f8:	4313      	orrs	r3, r2
 800c6fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800c6fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c702:	461a      	mov	r2, r3
 800c704:	2190      	movs	r1, #144	; 0x90
 800c706:	6878      	ldr	r0, [r7, #4]
 800c708:	f002 fa9c 	bl	800ec44 <VL53L0X_RdDWord>
 800c70c:	4603      	mov	r3, r0
 800c70e:	461a      	mov	r2, r3
 800c710:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c714:	4313      	orrs	r3, r2
 800c716:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 800c71a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c71c:	0e1b      	lsrs	r3, r3, #24
 800c71e:	b2db      	uxtb	r3, r3
 800c720:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 800c722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c724:	0c1b      	lsrs	r3, r3, #16
 800c726:	b2db      	uxtb	r3, r3
 800c728:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 800c72a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c72c:	0a1b      	lsrs	r3, r3, #8
 800c72e:	b2db      	uxtb	r3, r3
 800c730:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 800c732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c734:	b2db      	uxtb	r3, r3
 800c736:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 800c738:	2225      	movs	r2, #37	; 0x25
 800c73a:	2194      	movs	r1, #148	; 0x94
 800c73c:	6878      	ldr	r0, [r7, #4]
 800c73e:	f002 f99d 	bl	800ea7c <VL53L0X_WrByte>
 800c742:	4603      	mov	r3, r0
 800c744:	461a      	mov	r2, r3
 800c746:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c74a:	4313      	orrs	r3, r2
 800c74c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c750:	6878      	ldr	r0, [r7, #4]
 800c752:	f7ff fe94 	bl	800c47e <VL53L0X_device_read_strobe>
 800c756:	4603      	mov	r3, r0
 800c758:	461a      	mov	r2, r3
 800c75a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c75e:	4313      	orrs	r3, r2
 800c760:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800c764:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c768:	461a      	mov	r2, r3
 800c76a:	2190      	movs	r1, #144	; 0x90
 800c76c:	6878      	ldr	r0, [r7, #4]
 800c76e:	f002 fa69 	bl	800ec44 <VL53L0X_RdDWord>
 800c772:	4603      	mov	r3, r0
 800c774:	461a      	mov	r2, r3
 800c776:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c77a:	4313      	orrs	r3, r2
 800c77c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 800c780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c782:	0e1b      	lsrs	r3, r3, #24
 800c784:	b2db      	uxtb	r3, r3
 800c786:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 800c788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c78a:	0c1b      	lsrs	r3, r3, #16
 800c78c:	b2db      	uxtb	r3, r3
 800c78e:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 800c790:	78fb      	ldrb	r3, [r7, #3]
 800c792:	f003 0302 	and.w	r3, r3, #2
 800c796:	2b00      	cmp	r3, #0
 800c798:	f000 8189 	beq.w	800caae <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800c79c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c7a0:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	f040 8182 	bne.w	800caae <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 800c7aa:	2202      	movs	r2, #2
 800c7ac:	2194      	movs	r1, #148	; 0x94
 800c7ae:	6878      	ldr	r0, [r7, #4]
 800c7b0:	f002 f964 	bl	800ea7c <VL53L0X_WrByte>
 800c7b4:	4603      	mov	r3, r0
 800c7b6:	461a      	mov	r2, r3
 800c7b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c7bc:	4313      	orrs	r3, r2
 800c7be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c7c2:	6878      	ldr	r0, [r7, #4]
 800c7c4:	f7ff fe5b 	bl	800c47e <VL53L0X_device_read_strobe>
 800c7c8:	4603      	mov	r3, r0
 800c7ca:	461a      	mov	r2, r3
 800c7cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c7d0:	4313      	orrs	r3, r2
 800c7d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 800c7d6:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800c7da:	461a      	mov	r2, r3
 800c7dc:	2190      	movs	r1, #144	; 0x90
 800c7de:	6878      	ldr	r0, [r7, #4]
 800c7e0:	f002 f9ce 	bl	800eb80 <VL53L0X_RdByte>
 800c7e4:	4603      	mov	r3, r0
 800c7e6:	461a      	mov	r2, r3
 800c7e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c7ec:	4313      	orrs	r3, r2
 800c7ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800c7f2:	227b      	movs	r2, #123	; 0x7b
 800c7f4:	2194      	movs	r1, #148	; 0x94
 800c7f6:	6878      	ldr	r0, [r7, #4]
 800c7f8:	f002 f940 	bl	800ea7c <VL53L0X_WrByte>
 800c7fc:	4603      	mov	r3, r0
 800c7fe:	461a      	mov	r2, r3
 800c800:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c804:	4313      	orrs	r3, r2
 800c806:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c80a:	6878      	ldr	r0, [r7, #4]
 800c80c:	f7ff fe37 	bl	800c47e <VL53L0X_device_read_strobe>
 800c810:	4603      	mov	r3, r0
 800c812:	461a      	mov	r2, r3
 800c814:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c818:	4313      	orrs	r3, r2
 800c81a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 800c81e:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800c822:	461a      	mov	r2, r3
 800c824:	2190      	movs	r1, #144	; 0x90
 800c826:	6878      	ldr	r0, [r7, #4]
 800c828:	f002 f9aa 	bl	800eb80 <VL53L0X_RdByte>
 800c82c:	4603      	mov	r3, r0
 800c82e:	461a      	mov	r2, r3
 800c830:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c834:	4313      	orrs	r3, r2
 800c836:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 800c83a:	2277      	movs	r2, #119	; 0x77
 800c83c:	2194      	movs	r1, #148	; 0x94
 800c83e:	6878      	ldr	r0, [r7, #4]
 800c840:	f002 f91c 	bl	800ea7c <VL53L0X_WrByte>
 800c844:	4603      	mov	r3, r0
 800c846:	461a      	mov	r2, r3
 800c848:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c84c:	4313      	orrs	r3, r2
 800c84e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c852:	6878      	ldr	r0, [r7, #4]
 800c854:	f7ff fe13 	bl	800c47e <VL53L0X_device_read_strobe>
 800c858:	4603      	mov	r3, r0
 800c85a:	461a      	mov	r2, r3
 800c85c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c860:	4313      	orrs	r3, r2
 800c862:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800c866:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c86a:	461a      	mov	r2, r3
 800c86c:	2190      	movs	r1, #144	; 0x90
 800c86e:	6878      	ldr	r0, [r7, #4]
 800c870:	f002 f9e8 	bl	800ec44 <VL53L0X_RdDWord>
 800c874:	4603      	mov	r3, r0
 800c876:	461a      	mov	r2, r3
 800c878:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c87c:	4313      	orrs	r3, r2
 800c87e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 800c882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c884:	0e5b      	lsrs	r3, r3, #25
 800c886:	b2db      	uxtb	r3, r3
 800c888:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c88c:	b2db      	uxtb	r3, r3
 800c88e:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 800c890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c892:	0c9b      	lsrs	r3, r3, #18
 800c894:	b2db      	uxtb	r3, r3
 800c896:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c89a:	b2db      	uxtb	r3, r3
 800c89c:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 800c89e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8a0:	0adb      	lsrs	r3, r3, #11
 800c8a2:	b2db      	uxtb	r3, r3
 800c8a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c8a8:	b2db      	uxtb	r3, r3
 800c8aa:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 800c8ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8ae:	091b      	lsrs	r3, r3, #4
 800c8b0:	b2db      	uxtb	r3, r3
 800c8b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c8b6:	b2db      	uxtb	r3, r3
 800c8b8:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 800c8ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8bc:	b2db      	uxtb	r3, r3
 800c8be:	00db      	lsls	r3, r3, #3
 800c8c0:	b2db      	uxtb	r3, r3
 800c8c2:	f003 0378 	and.w	r3, r3, #120	; 0x78
 800c8c6:	b2db      	uxtb	r3, r3
 800c8c8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 800c8cc:	2278      	movs	r2, #120	; 0x78
 800c8ce:	2194      	movs	r1, #148	; 0x94
 800c8d0:	6878      	ldr	r0, [r7, #4]
 800c8d2:	f002 f8d3 	bl	800ea7c <VL53L0X_WrByte>
 800c8d6:	4603      	mov	r3, r0
 800c8d8:	461a      	mov	r2, r3
 800c8da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c8de:	4313      	orrs	r3, r2
 800c8e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c8e4:	6878      	ldr	r0, [r7, #4]
 800c8e6:	f7ff fdca 	bl	800c47e <VL53L0X_device_read_strobe>
 800c8ea:	4603      	mov	r3, r0
 800c8ec:	461a      	mov	r2, r3
 800c8ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c8f2:	4313      	orrs	r3, r2
 800c8f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800c8f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c8fc:	461a      	mov	r2, r3
 800c8fe:	2190      	movs	r1, #144	; 0x90
 800c900:	6878      	ldr	r0, [r7, #4]
 800c902:	f002 f99f 	bl	800ec44 <VL53L0X_RdDWord>
 800c906:	4603      	mov	r3, r0
 800c908:	461a      	mov	r2, r3
 800c90a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c90e:	4313      	orrs	r3, r2
 800c910:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 800c914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c916:	0f5b      	lsrs	r3, r3, #29
 800c918:	b2db      	uxtb	r3, r3
 800c91a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c91e:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 800c920:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c924:	4413      	add	r3, r2
 800c926:	b2db      	uxtb	r3, r3
 800c928:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 800c92a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c92c:	0d9b      	lsrs	r3, r3, #22
 800c92e:	b2db      	uxtb	r3, r3
 800c930:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c934:	b2db      	uxtb	r3, r3
 800c936:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 800c938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c93a:	0bdb      	lsrs	r3, r3, #15
 800c93c:	b2db      	uxtb	r3, r3
 800c93e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c942:	b2db      	uxtb	r3, r3
 800c944:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 800c946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c948:	0a1b      	lsrs	r3, r3, #8
 800c94a:	b2db      	uxtb	r3, r3
 800c94c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c950:	b2db      	uxtb	r3, r3
 800c952:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 800c954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c956:	085b      	lsrs	r3, r3, #1
 800c958:	b2db      	uxtb	r3, r3
 800c95a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c95e:	b2db      	uxtb	r3, r3
 800c960:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 800c962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c964:	b2db      	uxtb	r3, r3
 800c966:	019b      	lsls	r3, r3, #6
 800c968:	b2db      	uxtb	r3, r3
 800c96a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c96e:	b2db      	uxtb	r3, r3
 800c970:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 800c974:	2279      	movs	r2, #121	; 0x79
 800c976:	2194      	movs	r1, #148	; 0x94
 800c978:	6878      	ldr	r0, [r7, #4]
 800c97a:	f002 f87f 	bl	800ea7c <VL53L0X_WrByte>
 800c97e:	4603      	mov	r3, r0
 800c980:	461a      	mov	r2, r3
 800c982:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c986:	4313      	orrs	r3, r2
 800c988:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800c98c:	6878      	ldr	r0, [r7, #4]
 800c98e:	f7ff fd76 	bl	800c47e <VL53L0X_device_read_strobe>
 800c992:	4603      	mov	r3, r0
 800c994:	461a      	mov	r2, r3
 800c996:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c99a:	4313      	orrs	r3, r2
 800c99c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800c9a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c9a4:	461a      	mov	r2, r3
 800c9a6:	2190      	movs	r1, #144	; 0x90
 800c9a8:	6878      	ldr	r0, [r7, #4]
 800c9aa:	f002 f94b 	bl	800ec44 <VL53L0X_RdDWord>
 800c9ae:	4603      	mov	r3, r0
 800c9b0:	461a      	mov	r2, r3
 800c9b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c9b6:	4313      	orrs	r3, r2
 800c9b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 800c9bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9be:	0e9b      	lsrs	r3, r3, #26
 800c9c0:	b2db      	uxtb	r3, r3
 800c9c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c9c6:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 800c9c8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c9cc:	4413      	add	r3, r2
 800c9ce:	b2db      	uxtb	r3, r3
 800c9d0:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 800c9d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9d4:	0cdb      	lsrs	r3, r3, #19
 800c9d6:	b2db      	uxtb	r3, r3
 800c9d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c9dc:	b2db      	uxtb	r3, r3
 800c9de:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 800c9e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9e2:	0b1b      	lsrs	r3, r3, #12
 800c9e4:	b2db      	uxtb	r3, r3
 800c9e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c9ea:	b2db      	uxtb	r3, r3
 800c9ec:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 800c9ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9f0:	095b      	lsrs	r3, r3, #5
 800c9f2:	b2db      	uxtb	r3, r3
 800c9f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c9f8:	b2db      	uxtb	r3, r3
 800c9fa:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800c9fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9fe:	b2db      	uxtb	r3, r3
 800ca00:	009b      	lsls	r3, r3, #2
 800ca02:	b2db      	uxtb	r3, r3
 800ca04:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 800ca08:	b2db      	uxtb	r3, r3
 800ca0a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 800ca0e:	227a      	movs	r2, #122	; 0x7a
 800ca10:	2194      	movs	r1, #148	; 0x94
 800ca12:	6878      	ldr	r0, [r7, #4]
 800ca14:	f002 f832 	bl	800ea7c <VL53L0X_WrByte>
 800ca18:	4603      	mov	r3, r0
 800ca1a:	461a      	mov	r2, r3
 800ca1c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ca20:	4313      	orrs	r3, r2
 800ca22:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800ca26:	6878      	ldr	r0, [r7, #4]
 800ca28:	f7ff fd29 	bl	800c47e <VL53L0X_device_read_strobe>
 800ca2c:	4603      	mov	r3, r0
 800ca2e:	461a      	mov	r2, r3
 800ca30:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ca34:	4313      	orrs	r3, r2
 800ca36:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800ca3a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ca3e:	461a      	mov	r2, r3
 800ca40:	2190      	movs	r1, #144	; 0x90
 800ca42:	6878      	ldr	r0, [r7, #4]
 800ca44:	f002 f8fe 	bl	800ec44 <VL53L0X_RdDWord>
 800ca48:	4603      	mov	r3, r0
 800ca4a:	461a      	mov	r2, r3
 800ca4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ca50:	4313      	orrs	r3, r2
 800ca52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 800ca56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca58:	0f9b      	lsrs	r3, r3, #30
 800ca5a:	b2db      	uxtb	r3, r3
 800ca5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca60:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 800ca62:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ca66:	4413      	add	r3, r2
 800ca68:	b2db      	uxtb	r3, r3
 800ca6a:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 800ca6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca6e:	0ddb      	lsrs	r3, r3, #23
 800ca70:	b2db      	uxtb	r3, r3
 800ca72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca76:	b2db      	uxtb	r3, r3
 800ca78:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 800ca7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca7c:	0c1b      	lsrs	r3, r3, #16
 800ca7e:	b2db      	uxtb	r3, r3
 800ca80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca84:	b2db      	uxtb	r3, r3
 800ca86:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 800ca88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca8a:	0a5b      	lsrs	r3, r3, #9
 800ca8c:	b2db      	uxtb	r3, r3
 800ca8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca92:	b2db      	uxtb	r3, r3
 800ca94:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 800ca98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca9a:	089b      	lsrs	r3, r3, #2
 800ca9c:	b2db      	uxtb	r3, r3
 800ca9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800caa2:	b2db      	uxtb	r3, r3
 800caa4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 800caa8:	2300      	movs	r3, #0
 800caaa:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 800caae:	78fb      	ldrb	r3, [r7, #3]
 800cab0:	f003 0304 	and.w	r3, r3, #4
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	f000 80f1 	beq.w	800cc9c <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800caba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cabe:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	f040 80ea 	bne.w	800cc9c <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800cac8:	227b      	movs	r2, #123	; 0x7b
 800caca:	2194      	movs	r1, #148	; 0x94
 800cacc:	6878      	ldr	r0, [r7, #4]
 800cace:	f001 ffd5 	bl	800ea7c <VL53L0X_WrByte>
 800cad2:	4603      	mov	r3, r0
 800cad4:	461a      	mov	r2, r3
 800cad6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cada:	4313      	orrs	r3, r2
 800cadc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800cae0:	6878      	ldr	r0, [r7, #4]
 800cae2:	f7ff fccc 	bl	800c47e <VL53L0X_device_read_strobe>
 800cae6:	4603      	mov	r3, r0
 800cae8:	461a      	mov	r2, r3
 800caea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800caee:	4313      	orrs	r3, r2
 800caf0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 800caf4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800caf8:	461a      	mov	r2, r3
 800cafa:	2190      	movs	r1, #144	; 0x90
 800cafc:	6878      	ldr	r0, [r7, #4]
 800cafe:	f002 f8a1 	bl	800ec44 <VL53L0X_RdDWord>
 800cb02:	4603      	mov	r3, r0
 800cb04:	461a      	mov	r2, r3
 800cb06:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cb0a:	4313      	orrs	r3, r2
 800cb0c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 800cb10:	227c      	movs	r2, #124	; 0x7c
 800cb12:	2194      	movs	r1, #148	; 0x94
 800cb14:	6878      	ldr	r0, [r7, #4]
 800cb16:	f001 ffb1 	bl	800ea7c <VL53L0X_WrByte>
 800cb1a:	4603      	mov	r3, r0
 800cb1c:	461a      	mov	r2, r3
 800cb1e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cb22:	4313      	orrs	r3, r2
 800cb24:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800cb28:	6878      	ldr	r0, [r7, #4]
 800cb2a:	f7ff fca8 	bl	800c47e <VL53L0X_device_read_strobe>
 800cb2e:	4603      	mov	r3, r0
 800cb30:	461a      	mov	r2, r3
 800cb32:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cb36:	4313      	orrs	r3, r2
 800cb38:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 800cb3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cb40:	461a      	mov	r2, r3
 800cb42:	2190      	movs	r1, #144	; 0x90
 800cb44:	6878      	ldr	r0, [r7, #4]
 800cb46:	f002 f87d 	bl	800ec44 <VL53L0X_RdDWord>
 800cb4a:	4603      	mov	r3, r0
 800cb4c:	461a      	mov	r2, r3
 800cb4e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cb52:	4313      	orrs	r3, r2
 800cb54:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 800cb58:	2273      	movs	r2, #115	; 0x73
 800cb5a:	2194      	movs	r1, #148	; 0x94
 800cb5c:	6878      	ldr	r0, [r7, #4]
 800cb5e:	f001 ff8d 	bl	800ea7c <VL53L0X_WrByte>
 800cb62:	4603      	mov	r3, r0
 800cb64:	461a      	mov	r2, r3
 800cb66:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cb6a:	4313      	orrs	r3, r2
 800cb6c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800cb70:	6878      	ldr	r0, [r7, #4]
 800cb72:	f7ff fc84 	bl	800c47e <VL53L0X_device_read_strobe>
 800cb76:	4603      	mov	r3, r0
 800cb78:	461a      	mov	r2, r3
 800cb7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cb7e:	4313      	orrs	r3, r2
 800cb80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800cb84:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cb88:	461a      	mov	r2, r3
 800cb8a:	2190      	movs	r1, #144	; 0x90
 800cb8c:	6878      	ldr	r0, [r7, #4]
 800cb8e:	f002 f859 	bl	800ec44 <VL53L0X_RdDWord>
 800cb92:	4603      	mov	r3, r0
 800cb94:	461a      	mov	r2, r3
 800cb96:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cb9a:	4313      	orrs	r3, r2
 800cb9c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 800cba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cba2:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 800cba4:	b29b      	uxth	r3, r3
 800cba6:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800cba8:	2274      	movs	r2, #116	; 0x74
 800cbaa:	2194      	movs	r1, #148	; 0x94
 800cbac:	6878      	ldr	r0, [r7, #4]
 800cbae:	f001 ff65 	bl	800ea7c <VL53L0X_WrByte>
 800cbb2:	4603      	mov	r3, r0
 800cbb4:	461a      	mov	r2, r3
 800cbb6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cbba:	4313      	orrs	r3, r2
 800cbbc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800cbc0:	6878      	ldr	r0, [r7, #4]
 800cbc2:	f7ff fc5c 	bl	800c47e <VL53L0X_device_read_strobe>
 800cbc6:	4603      	mov	r3, r0
 800cbc8:	461a      	mov	r2, r3
 800cbca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cbce:	4313      	orrs	r3, r2
 800cbd0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800cbd4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cbd8:	461a      	mov	r2, r3
 800cbda:	2190      	movs	r1, #144	; 0x90
 800cbdc:	6878      	ldr	r0, [r7, #4]
 800cbde:	f002 f831 	bl	800ec44 <VL53L0X_RdDWord>
 800cbe2:	4603      	mov	r3, r0
 800cbe4:	461a      	mov	r2, r3
 800cbe6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cbea:	4313      	orrs	r3, r2
 800cbec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 800cbf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbf2:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 800cbf4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cbf6:	4313      	orrs	r3, r2
 800cbf8:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 800cbfa:	2275      	movs	r2, #117	; 0x75
 800cbfc:	2194      	movs	r1, #148	; 0x94
 800cbfe:	6878      	ldr	r0, [r7, #4]
 800cc00:	f001 ff3c 	bl	800ea7c <VL53L0X_WrByte>
 800cc04:	4603      	mov	r3, r0
 800cc06:	461a      	mov	r2, r3
 800cc08:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cc0c:	4313      	orrs	r3, r2
 800cc0e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800cc12:	6878      	ldr	r0, [r7, #4]
 800cc14:	f7ff fc33 	bl	800c47e <VL53L0X_device_read_strobe>
 800cc18:	4603      	mov	r3, r0
 800cc1a:	461a      	mov	r2, r3
 800cc1c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cc20:	4313      	orrs	r3, r2
 800cc22:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800cc26:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cc2a:	461a      	mov	r2, r3
 800cc2c:	2190      	movs	r1, #144	; 0x90
 800cc2e:	6878      	ldr	r0, [r7, #4]
 800cc30:	f002 f808 	bl	800ec44 <VL53L0X_RdDWord>
 800cc34:	4603      	mov	r3, r0
 800cc36:	461a      	mov	r2, r3
 800cc38:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cc3c:	4313      	orrs	r3, r2
 800cc3e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 800cc42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc44:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 800cc46:	b29b      	uxth	r3, r3
 800cc48:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 800cc4a:	2276      	movs	r2, #118	; 0x76
 800cc4c:	2194      	movs	r1, #148	; 0x94
 800cc4e:	6878      	ldr	r0, [r7, #4]
 800cc50:	f001 ff14 	bl	800ea7c <VL53L0X_WrByte>
 800cc54:	4603      	mov	r3, r0
 800cc56:	461a      	mov	r2, r3
 800cc58:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cc5c:	4313      	orrs	r3, r2
 800cc5e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800cc62:	6878      	ldr	r0, [r7, #4]
 800cc64:	f7ff fc0b 	bl	800c47e <VL53L0X_device_read_strobe>
 800cc68:	4603      	mov	r3, r0
 800cc6a:	461a      	mov	r2, r3
 800cc6c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cc70:	4313      	orrs	r3, r2
 800cc72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800cc76:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cc7a:	461a      	mov	r2, r3
 800cc7c:	2190      	movs	r1, #144	; 0x90
 800cc7e:	6878      	ldr	r0, [r7, #4]
 800cc80:	f001 ffe0 	bl	800ec44 <VL53L0X_RdDWord>
 800cc84:	4603      	mov	r3, r0
 800cc86:	461a      	mov	r2, r3
 800cc88:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cc8c:	4313      	orrs	r3, r2
 800cc8e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 800cc92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc94:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 800cc96:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cc98:	4313      	orrs	r3, r2
 800cc9a:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 800cc9c:	2200      	movs	r2, #0
 800cc9e:	2181      	movs	r1, #129	; 0x81
 800cca0:	6878      	ldr	r0, [r7, #4]
 800cca2:	f001 feeb 	bl	800ea7c <VL53L0X_WrByte>
 800cca6:	4603      	mov	r3, r0
 800cca8:	461a      	mov	r2, r3
 800ccaa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ccae:	4313      	orrs	r3, r2
 800ccb0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800ccb4:	2206      	movs	r2, #6
 800ccb6:	21ff      	movs	r1, #255	; 0xff
 800ccb8:	6878      	ldr	r0, [r7, #4]
 800ccba:	f001 fedf 	bl	800ea7c <VL53L0X_WrByte>
 800ccbe:	4603      	mov	r3, r0
 800ccc0:	461a      	mov	r2, r3
 800ccc2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ccc6:	4313      	orrs	r3, r2
 800ccc8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800cccc:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800ccd0:	461a      	mov	r2, r3
 800ccd2:	2183      	movs	r1, #131	; 0x83
 800ccd4:	6878      	ldr	r0, [r7, #4]
 800ccd6:	f001 ff53 	bl	800eb80 <VL53L0X_RdByte>
 800ccda:	4603      	mov	r3, r0
 800ccdc:	461a      	mov	r2, r3
 800ccde:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cce2:	4313      	orrs	r3, r2
 800cce4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 800cce8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ccec:	f023 0304 	bic.w	r3, r3, #4
 800ccf0:	b2db      	uxtb	r3, r3
 800ccf2:	461a      	mov	r2, r3
 800ccf4:	2183      	movs	r1, #131	; 0x83
 800ccf6:	6878      	ldr	r0, [r7, #4]
 800ccf8:	f001 fec0 	bl	800ea7c <VL53L0X_WrByte>
 800ccfc:	4603      	mov	r3, r0
 800ccfe:	461a      	mov	r2, r3
 800cd00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cd04:	4313      	orrs	r3, r2
 800cd06:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800cd0a:	2201      	movs	r2, #1
 800cd0c:	21ff      	movs	r1, #255	; 0xff
 800cd0e:	6878      	ldr	r0, [r7, #4]
 800cd10:	f001 feb4 	bl	800ea7c <VL53L0X_WrByte>
 800cd14:	4603      	mov	r3, r0
 800cd16:	461a      	mov	r2, r3
 800cd18:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cd1c:	4313      	orrs	r3, r2
 800cd1e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800cd22:	2201      	movs	r2, #1
 800cd24:	2100      	movs	r1, #0
 800cd26:	6878      	ldr	r0, [r7, #4]
 800cd28:	f001 fea8 	bl	800ea7c <VL53L0X_WrByte>
 800cd2c:	4603      	mov	r3, r0
 800cd2e:	461a      	mov	r2, r3
 800cd30:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cd34:	4313      	orrs	r3, r2
 800cd36:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800cd3a:	2200      	movs	r2, #0
 800cd3c:	21ff      	movs	r1, #255	; 0xff
 800cd3e:	6878      	ldr	r0, [r7, #4]
 800cd40:	f001 fe9c 	bl	800ea7c <VL53L0X_WrByte>
 800cd44:	4603      	mov	r3, r0
 800cd46:	461a      	mov	r2, r3
 800cd48:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cd4c:	4313      	orrs	r3, r2
 800cd4e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800cd52:	2200      	movs	r2, #0
 800cd54:	2180      	movs	r1, #128	; 0x80
 800cd56:	6878      	ldr	r0, [r7, #4]
 800cd58:	f001 fe90 	bl	800ea7c <VL53L0X_WrByte>
 800cd5c:	4603      	mov	r3, r0
 800cd5e:	461a      	mov	r2, r3
 800cd60:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cd64:	4313      	orrs	r3, r2
 800cd66:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800cd6a:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	f040 808f 	bne.w	800ce92 <VL53L0X_get_info_from_device+0x98e>
 800cd74:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cd78:	2b07      	cmp	r3, #7
 800cd7a:	f000 808a 	beq.w	800ce92 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 800cd7e:	78fb      	ldrb	r3, [r7, #3]
 800cd80:	f003 0301 	and.w	r3, r3, #1
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d024      	beq.n	800cdd2 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800cd88:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cd8c:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d11e      	bne.n	800cdd2 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800cd9a:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 800cda4:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800cda8:	2300      	movs	r3, #0
 800cdaa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cdac:	e00e      	b.n	800cdcc <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 800cdae:	f107 0208 	add.w	r2, r7, #8
 800cdb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cdb4:	4413      	add	r3, r2
 800cdb6:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 800cdb8:	687a      	ldr	r2, [r7, #4]
 800cdba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cdbc:	4413      	add	r3, r2
 800cdbe:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800cdc2:	460a      	mov	r2, r1
 800cdc4:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800cdc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cdc8:	3301      	adds	r3, #1
 800cdca:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cdcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cdce:	2b05      	cmp	r3, #5
 800cdd0:	dded      	ble.n	800cdae <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 800cdd2:	78fb      	ldrb	r3, [r7, #3]
 800cdd4:	f003 0302 	and.w	r3, r3, #2
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d018      	beq.n	800ce0e <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800cddc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cde0:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d112      	bne.n	800ce0e <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800cde8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800cdf2:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	33f3      	adds	r3, #243	; 0xf3
 800ce00:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 800ce02:	f107 0310 	add.w	r3, r7, #16
 800ce06:	4619      	mov	r1, r3
 800ce08:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ce0a:	f006 fbb0 	bl	801356e <strcpy>

		}

		if (((option & 4) == 4) &&
 800ce0e:	78fb      	ldrb	r3, [r7, #3]
 800ce10:	f003 0304 	and.w	r3, r3, #4
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d030      	beq.n	800ce7a <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800ce18:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ce1c:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d12a      	bne.n	800ce7a <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800ce24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800ce2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 800ce34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce36:	025b      	lsls	r3, r3, #9
 800ce38:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ce3e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 800ce42:	2300      	movs	r3, #0
 800ce44:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 800ce48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d011      	beq.n	800ce72 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 800ce4e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ce50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce52:	1ad3      	subs	r3, r2, r3
 800ce54:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 800ce56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ce58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ce5c:	fb02 f303 	mul.w	r3, r2, r3
 800ce60:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 800ce62:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 800ce66:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800ce6a:	425b      	negs	r3, r3
 800ce6c:	b29b      	uxth	r3, r3
 800ce6e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 800ce72:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 800ce7a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800ce7e:	78fb      	ldrb	r3, [r7, #3]
 800ce80:	4313      	orrs	r3, r2
 800ce82:	b2db      	uxtb	r3, r3
 800ce84:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 800ce88:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ce92:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 800ce96:	4618      	mov	r0, r3
 800ce98:	3760      	adds	r7, #96	; 0x60
 800ce9a:	46bd      	mov	sp, r7
 800ce9c:	bd80      	pop	{r7, pc}

0800ce9e <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 800ce9e:	b480      	push	{r7}
 800cea0:	b087      	sub	sp, #28
 800cea2:	af00      	add	r7, sp, #0
 800cea4:	6078      	str	r0, [r7, #4]
 800cea6:	460b      	mov	r3, r1
 800cea8:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 800ceaa:	f240 6277 	movw	r2, #1655	; 0x677
 800ceae:	f04f 0300 	mov.w	r3, #0
 800ceb2:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 800ceb6:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800ceba:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 800cebc:	78fb      	ldrb	r3, [r7, #3]
 800cebe:	68fa      	ldr	r2, [r7, #12]
 800cec0:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 800cec4:	693a      	ldr	r2, [r7, #16]
 800cec6:	fb02 f303 	mul.w	r3, r2, r3
 800ceca:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 800cecc:	68bb      	ldr	r3, [r7, #8]
}
 800cece:	4618      	mov	r0, r3
 800ced0:	371c      	adds	r7, #28
 800ced2:	46bd      	mov	sp, r7
 800ced4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced8:	4770      	bx	lr

0800ceda <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 800ceda:	b480      	push	{r7}
 800cedc:	b087      	sub	sp, #28
 800cede:	af00      	add	r7, sp, #0
 800cee0:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800cee2:	2300      	movs	r3, #0
 800cee4:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800cee6:	2300      	movs	r3, #0
 800cee8:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800ceea:	2300      	movs	r3, #0
 800ceec:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d017      	beq.n	800cf24 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	3b01      	subs	r3, #1
 800cef8:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800cefa:	e005      	b.n	800cf08 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800cefc:	693b      	ldr	r3, [r7, #16]
 800cefe:	085b      	lsrs	r3, r3, #1
 800cf00:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800cf02:	89fb      	ldrh	r3, [r7, #14]
 800cf04:	3301      	adds	r3, #1
 800cf06:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800cf08:	693b      	ldr	r3, [r7, #16]
 800cf0a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d1f4      	bne.n	800cefc <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800cf12:	89fb      	ldrh	r3, [r7, #14]
 800cf14:	021b      	lsls	r3, r3, #8
 800cf16:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800cf18:	693b      	ldr	r3, [r7, #16]
 800cf1a:	b29b      	uxth	r3, r3
 800cf1c:	b2db      	uxtb	r3, r3
 800cf1e:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800cf20:	4413      	add	r3, r2
 800cf22:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800cf24:	8afb      	ldrh	r3, [r7, #22]

}
 800cf26:	4618      	mov	r0, r3
 800cf28:	371c      	adds	r7, #28
 800cf2a:	46bd      	mov	sp, r7
 800cf2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf30:	4770      	bx	lr

0800cf32 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 800cf32:	b480      	push	{r7}
 800cf34:	b085      	sub	sp, #20
 800cf36:	af00      	add	r7, sp, #0
 800cf38:	4603      	mov	r3, r0
 800cf3a:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800cf3c:	2300      	movs	r3, #0
 800cf3e:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800cf40:	88fb      	ldrh	r3, [r7, #6]
 800cf42:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800cf44:	88fa      	ldrh	r2, [r7, #6]
 800cf46:	0a12      	lsrs	r2, r2, #8
 800cf48:	b292      	uxth	r2, r2
 800cf4a:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800cf4c:	3301      	adds	r3, #1
 800cf4e:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800cf50:	68fb      	ldr	r3, [r7, #12]
}
 800cf52:	4618      	mov	r0, r3
 800cf54:	3714      	adds	r7, #20
 800cf56:	46bd      	mov	sp, r7
 800cf58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf5c:	4770      	bx	lr
	...

0800cf60 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 800cf60:	b580      	push	{r7, lr}
 800cf62:	b088      	sub	sp, #32
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	60f8      	str	r0, [r7, #12]
 800cf68:	60b9      	str	r1, [r7, #8]
 800cf6a:	4613      	mov	r3, r2
 800cf6c:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800cf6e:	2300      	movs	r3, #0
 800cf70:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800cf72:	79fb      	ldrb	r3, [r7, #7]
 800cf74:	4619      	mov	r1, r3
 800cf76:	68f8      	ldr	r0, [r7, #12]
 800cf78:	f7ff ff91 	bl	800ce9e <VL53L0X_calc_macro_period_ps>
 800cf7c:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800cf7e:	69bb      	ldr	r3, [r7, #24]
 800cf80:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800cf84:	4a0a      	ldr	r2, [pc, #40]	; (800cfb0 <VL53L0X_calc_timeout_mclks+0x50>)
 800cf86:	fba2 2303 	umull	r2, r3, r2, r3
 800cf8a:	099b      	lsrs	r3, r3, #6
 800cf8c:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 800cf8e:	68bb      	ldr	r3, [r7, #8]
 800cf90:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cf94:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 800cf98:	697b      	ldr	r3, [r7, #20]
 800cf9a:	085b      	lsrs	r3, r3, #1
 800cf9c:	441a      	add	r2, r3
	timeout_period_mclks =
 800cf9e:	697b      	ldr	r3, [r7, #20]
 800cfa0:	fbb2 f3f3 	udiv	r3, r2, r3
 800cfa4:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 800cfa6:	69fb      	ldr	r3, [r7, #28]
}
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	3720      	adds	r7, #32
 800cfac:	46bd      	mov	sp, r7
 800cfae:	bd80      	pop	{r7, pc}
 800cfb0:	10624dd3 	.word	0x10624dd3

0800cfb4 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 800cfb4:	b580      	push	{r7, lr}
 800cfb6:	b086      	sub	sp, #24
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	6078      	str	r0, [r7, #4]
 800cfbc:	460b      	mov	r3, r1
 800cfbe:	807b      	strh	r3, [r7, #2]
 800cfc0:	4613      	mov	r3, r2
 800cfc2:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 800cfc4:	2300      	movs	r3, #0
 800cfc6:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800cfc8:	787b      	ldrb	r3, [r7, #1]
 800cfca:	4619      	mov	r1, r3
 800cfcc:	6878      	ldr	r0, [r7, #4]
 800cfce:	f7ff ff66 	bl	800ce9e <VL53L0X_calc_macro_period_ps>
 800cfd2:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800cfd4:	693b      	ldr	r3, [r7, #16]
 800cfd6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800cfda:	4a0a      	ldr	r2, [pc, #40]	; (800d004 <VL53L0X_calc_timeout_us+0x50>)
 800cfdc:	fba2 2303 	umull	r2, r3, r2, r3
 800cfe0:	099b      	lsrs	r3, r3, #6
 800cfe2:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 800cfe4:	887b      	ldrh	r3, [r7, #2]
 800cfe6:	68fa      	ldr	r2, [r7, #12]
 800cfe8:	fb02 f303 	mul.w	r3, r2, r3
 800cfec:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 800cff0:	4a04      	ldr	r2, [pc, #16]	; (800d004 <VL53L0X_calc_timeout_us+0x50>)
 800cff2:	fba2 2303 	umull	r2, r3, r2, r3
 800cff6:	099b      	lsrs	r3, r3, #6
 800cff8:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 800cffa:	697b      	ldr	r3, [r7, #20]
}
 800cffc:	4618      	mov	r0, r3
 800cffe:	3718      	adds	r7, #24
 800d000:	46bd      	mov	sp, r7
 800d002:	bd80      	pop	{r7, pc}
 800d004:	10624dd3 	.word	0x10624dd3

0800d008 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 800d008:	b580      	push	{r7, lr}
 800d00a:	b08c      	sub	sp, #48	; 0x30
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	60f8      	str	r0, [r7, #12]
 800d010:	460b      	mov	r3, r1
 800d012:	607a      	str	r2, [r7, #4]
 800d014:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d016:	2300      	movs	r3, #0
 800d018:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 800d01c:	2300      	movs	r3, #0
 800d01e:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 800d022:	2300      	movs	r3, #0
 800d024:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 800d026:	2300      	movs	r3, #0
 800d028:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 800d02a:	2300      	movs	r3, #0
 800d02c:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800d02e:	7afb      	ldrb	r3, [r7, #11]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d005      	beq.n	800d040 <get_sequence_step_timeout+0x38>
 800d034:	7afb      	ldrb	r3, [r7, #11]
 800d036:	2b01      	cmp	r3, #1
 800d038:	d002      	beq.n	800d040 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800d03a:	7afb      	ldrb	r3, [r7, #11]
 800d03c:	2b02      	cmp	r3, #2
 800d03e:	d128      	bne.n	800d092 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800d040:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800d044:	461a      	mov	r2, r3
 800d046:	2100      	movs	r1, #0
 800d048:	68f8      	ldr	r0, [r7, #12]
 800d04a:	f7fd f9f9 	bl	800a440 <VL53L0X_GetVcselPulsePeriod>
 800d04e:	4603      	mov	r3, r0
 800d050:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 800d054:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d109      	bne.n	800d070 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 800d05c:	f107 0320 	add.w	r3, r7, #32
 800d060:	461a      	mov	r2, r3
 800d062:	2146      	movs	r1, #70	; 0x46
 800d064:	68f8      	ldr	r0, [r7, #12]
 800d066:	f001 fd8b 	bl	800eb80 <VL53L0X_RdByte>
 800d06a:	4603      	mov	r3, r0
 800d06c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 800d070:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d074:	b29b      	uxth	r3, r3
 800d076:	4618      	mov	r0, r3
 800d078:	f7ff ff5b 	bl	800cf32 <VL53L0X_decode_timeout>
 800d07c:	4603      	mov	r3, r0
 800d07e:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800d080:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800d084:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d086:	4619      	mov	r1, r3
 800d088:	68f8      	ldr	r0, [r7, #12]
 800d08a:	f7ff ff93 	bl	800cfb4 <VL53L0X_calc_timeout_us>
 800d08e:	62b8      	str	r0, [r7, #40]	; 0x28
 800d090:	e092      	b.n	800d1b8 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800d092:	7afb      	ldrb	r3, [r7, #11]
 800d094:	2b03      	cmp	r3, #3
 800d096:	d135      	bne.n	800d104 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800d098:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800d09c:	461a      	mov	r2, r3
 800d09e:	2100      	movs	r1, #0
 800d0a0:	68f8      	ldr	r0, [r7, #12]
 800d0a2:	f7fd f9cd 	bl	800a440 <VL53L0X_GetVcselPulsePeriod>
 800d0a6:	4603      	mov	r3, r0
 800d0a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800d0ac:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	f040 8081 	bne.w	800d1b8 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800d0b6:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800d0ba:	461a      	mov	r2, r3
 800d0bc:	2100      	movs	r1, #0
 800d0be:	68f8      	ldr	r0, [r7, #12]
 800d0c0:	f7fd f9be 	bl	800a440 <VL53L0X_GetVcselPulsePeriod>
 800d0c4:	4603      	mov	r3, r0
 800d0c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 800d0ca:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d109      	bne.n	800d0e6 <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 800d0d2:	f107 031e 	add.w	r3, r7, #30
 800d0d6:	461a      	mov	r2, r3
 800d0d8:	2151      	movs	r1, #81	; 0x51
 800d0da:	68f8      	ldr	r0, [r7, #12]
 800d0dc:	f001 fd7a 	bl	800ebd4 <VL53L0X_RdWord>
 800d0e0:	4603      	mov	r3, r0
 800d0e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800d0e6:	8bfb      	ldrh	r3, [r7, #30]
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	f7ff ff22 	bl	800cf32 <VL53L0X_decode_timeout>
 800d0ee:	4603      	mov	r3, r0
 800d0f0:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800d0f2:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800d0f6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d0f8:	4619      	mov	r1, r3
 800d0fa:	68f8      	ldr	r0, [r7, #12]
 800d0fc:	f7ff ff5a 	bl	800cfb4 <VL53L0X_calc_timeout_us>
 800d100:	62b8      	str	r0, [r7, #40]	; 0x28
 800d102:	e059      	b.n	800d1b8 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800d104:	7afb      	ldrb	r3, [r7, #11]
 800d106:	2b04      	cmp	r3, #4
 800d108:	d156      	bne.n	800d1b8 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800d10a:	f107 0314 	add.w	r3, r7, #20
 800d10e:	4619      	mov	r1, r3
 800d110:	68f8      	ldr	r0, [r7, #12]
 800d112:	f7fd faa1 	bl	800a658 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 800d116:	2300      	movs	r3, #0
 800d118:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 800d11a:	7dfb      	ldrb	r3, [r7, #23]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d01d      	beq.n	800d15c <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800d120:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800d124:	461a      	mov	r2, r3
 800d126:	2100      	movs	r1, #0
 800d128:	68f8      	ldr	r0, [r7, #12]
 800d12a:	f7fd f989 	bl	800a440 <VL53L0X_GetVcselPulsePeriod>
 800d12e:	4603      	mov	r3, r0
 800d130:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 800d134:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d10f      	bne.n	800d15c <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 800d13c:	f107 031e 	add.w	r3, r7, #30
 800d140:	461a      	mov	r2, r3
 800d142:	2151      	movs	r1, #81	; 0x51
 800d144:	68f8      	ldr	r0, [r7, #12]
 800d146:	f001 fd45 	bl	800ebd4 <VL53L0X_RdWord>
 800d14a:	4603      	mov	r3, r0
 800d14c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800d150:	8bfb      	ldrh	r3, [r7, #30]
 800d152:	4618      	mov	r0, r3
 800d154:	f7ff feed 	bl	800cf32 <VL53L0X_decode_timeout>
 800d158:	4603      	mov	r3, r0
 800d15a:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800d15c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d160:	2b00      	cmp	r3, #0
 800d162:	d109      	bne.n	800d178 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800d164:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800d168:	461a      	mov	r2, r3
 800d16a:	2101      	movs	r1, #1
 800d16c:	68f8      	ldr	r0, [r7, #12]
 800d16e:	f7fd f967 	bl	800a440 <VL53L0X_GetVcselPulsePeriod>
 800d172:	4603      	mov	r3, r0
 800d174:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800d178:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d10f      	bne.n	800d1a0 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 800d180:	f107 031c 	add.w	r3, r7, #28
 800d184:	461a      	mov	r2, r3
 800d186:	2171      	movs	r1, #113	; 0x71
 800d188:	68f8      	ldr	r0, [r7, #12]
 800d18a:	f001 fd23 	bl	800ebd4 <VL53L0X_RdWord>
 800d18e:	4603      	mov	r3, r0
 800d190:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 800d194:	8bbb      	ldrh	r3, [r7, #28]
 800d196:	4618      	mov	r0, r3
 800d198:	f7ff fecb 	bl	800cf32 <VL53L0X_decode_timeout>
 800d19c:	4603      	mov	r3, r0
 800d19e:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 800d1a0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d1a2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d1a4:	1ad3      	subs	r3, r2, r3
 800d1a6:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800d1a8:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800d1ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d1ae:	4619      	mov	r1, r3
 800d1b0:	68f8      	ldr	r0, [r7, #12]
 800d1b2:	f7ff feff 	bl	800cfb4 <VL53L0X_calc_timeout_us>
 800d1b6:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d1bc:	601a      	str	r2, [r3, #0]

	return Status;
 800d1be:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	3730      	adds	r7, #48	; 0x30
 800d1c6:	46bd      	mov	sp, r7
 800d1c8:	bd80      	pop	{r7, pc}

0800d1ca <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 800d1ca:	b580      	push	{r7, lr}
 800d1cc:	b08a      	sub	sp, #40	; 0x28
 800d1ce:	af00      	add	r7, sp, #0
 800d1d0:	60f8      	str	r0, [r7, #12]
 800d1d2:	460b      	mov	r3, r1
 800d1d4:	607a      	str	r2, [r7, #4]
 800d1d6:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d1d8:	2300      	movs	r3, #0
 800d1da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800d1de:	7afb      	ldrb	r3, [r7, #11]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d005      	beq.n	800d1f0 <set_sequence_step_timeout+0x26>
 800d1e4:	7afb      	ldrb	r3, [r7, #11]
 800d1e6:	2b01      	cmp	r3, #1
 800d1e8:	d002      	beq.n	800d1f0 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800d1ea:	7afb      	ldrb	r3, [r7, #11]
 800d1ec:	2b02      	cmp	r3, #2
 800d1ee:	d138      	bne.n	800d262 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800d1f0:	f107 031b 	add.w	r3, r7, #27
 800d1f4:	461a      	mov	r2, r3
 800d1f6:	2100      	movs	r1, #0
 800d1f8:	68f8      	ldr	r0, [r7, #12]
 800d1fa:	f7fd f921 	bl	800a440 <VL53L0X_GetVcselPulsePeriod>
 800d1fe:	4603      	mov	r3, r0
 800d200:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 800d204:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d11a      	bne.n	800d242 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 800d20c:	7efb      	ldrb	r3, [r7, #27]
 800d20e:	461a      	mov	r2, r3
 800d210:	6879      	ldr	r1, [r7, #4]
 800d212:	68f8      	ldr	r0, [r7, #12]
 800d214:	f7ff fea4 	bl	800cf60 <VL53L0X_calc_timeout_mclks>
 800d218:	4603      	mov	r3, r0
 800d21a:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 800d21c:	8bbb      	ldrh	r3, [r7, #28]
 800d21e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d222:	d903      	bls.n	800d22c <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 800d224:	23ff      	movs	r3, #255	; 0xff
 800d226:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d22a:	e004      	b.n	800d236 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 800d22c:	8bbb      	ldrh	r3, [r7, #28]
 800d22e:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 800d230:	3b01      	subs	r3, #1
 800d232:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d236:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d23a:	b29a      	uxth	r2, r3
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800d242:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d246:	2b00      	cmp	r3, #0
 800d248:	f040 80ab 	bne.w	800d3a2 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 800d24c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d250:	461a      	mov	r2, r3
 800d252:	2146      	movs	r1, #70	; 0x46
 800d254:	68f8      	ldr	r0, [r7, #12]
 800d256:	f001 fc11 	bl	800ea7c <VL53L0X_WrByte>
 800d25a:	4603      	mov	r3, r0
 800d25c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 800d260:	e09f      	b.n	800d3a2 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800d262:	7afb      	ldrb	r3, [r7, #11]
 800d264:	2b03      	cmp	r3, #3
 800d266:	d135      	bne.n	800d2d4 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 800d268:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d11b      	bne.n	800d2a8 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800d270:	f107 031b 	add.w	r3, r7, #27
 800d274:	461a      	mov	r2, r3
 800d276:	2100      	movs	r1, #0
 800d278:	68f8      	ldr	r0, [r7, #12]
 800d27a:	f7fd f8e1 	bl	800a440 <VL53L0X_GetVcselPulsePeriod>
 800d27e:	4603      	mov	r3, r0
 800d280:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800d284:	7efb      	ldrb	r3, [r7, #27]
 800d286:	461a      	mov	r2, r3
 800d288:	6879      	ldr	r1, [r7, #4]
 800d28a:	68f8      	ldr	r0, [r7, #12]
 800d28c:	f7ff fe68 	bl	800cf60 <VL53L0X_calc_timeout_mclks>
 800d290:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 800d292:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 800d294:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d296:	4618      	mov	r0, r3
 800d298:	f7ff fe1f 	bl	800ceda <VL53L0X_encode_timeout>
 800d29c:	4603      	mov	r3, r0
 800d29e:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d2a0:	8b3a      	ldrh	r2, [r7, #24]
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800d2a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d108      	bne.n	800d2c2 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 800d2b0:	8b3b      	ldrh	r3, [r7, #24]
 800d2b2:	461a      	mov	r2, r3
 800d2b4:	2151      	movs	r1, #81	; 0x51
 800d2b6:	68f8      	ldr	r0, [r7, #12]
 800d2b8:	f001 fc04 	bl	800eac4 <VL53L0X_WrWord>
 800d2bc:	4603      	mov	r3, r0
 800d2be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800d2c2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d16b      	bne.n	800d3a2 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	687a      	ldr	r2, [r7, #4]
 800d2ce:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800d2d2:	e066      	b.n	800d3a2 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800d2d4:	7afb      	ldrb	r3, [r7, #11]
 800d2d6:	2b04      	cmp	r3, #4
 800d2d8:	d160      	bne.n	800d39c <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800d2da:	f107 0310 	add.w	r3, r7, #16
 800d2de:	4619      	mov	r1, r3
 800d2e0:	68f8      	ldr	r0, [r7, #12]
 800d2e2:	f7fd f9b9 	bl	800a658 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800d2ea:	7cfb      	ldrb	r3, [r7, #19]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d01d      	beq.n	800d32c <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800d2f0:	f107 031b 	add.w	r3, r7, #27
 800d2f4:	461a      	mov	r2, r3
 800d2f6:	2100      	movs	r1, #0
 800d2f8:	68f8      	ldr	r0, [r7, #12]
 800d2fa:	f7fd f8a1 	bl	800a440 <VL53L0X_GetVcselPulsePeriod>
 800d2fe:	4603      	mov	r3, r0
 800d300:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 800d304:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d10f      	bne.n	800d32c <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 800d30c:	f107 0318 	add.w	r3, r7, #24
 800d310:	461a      	mov	r2, r3
 800d312:	2151      	movs	r1, #81	; 0x51
 800d314:	68f8      	ldr	r0, [r7, #12]
 800d316:	f001 fc5d 	bl	800ebd4 <VL53L0X_RdWord>
 800d31a:	4603      	mov	r3, r0
 800d31c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 800d320:	8b3b      	ldrh	r3, [r7, #24]
 800d322:	4618      	mov	r0, r3
 800d324:	f7ff fe05 	bl	800cf32 <VL53L0X_decode_timeout>
 800d328:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800d32a:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800d32c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d330:	2b00      	cmp	r3, #0
 800d332:	d109      	bne.n	800d348 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800d334:	f107 031b 	add.w	r3, r7, #27
 800d338:	461a      	mov	r2, r3
 800d33a:	2101      	movs	r1, #1
 800d33c:	68f8      	ldr	r0, [r7, #12]
 800d33e:	f7fd f87f 	bl	800a440 <VL53L0X_GetVcselPulsePeriod>
 800d342:	4603      	mov	r3, r0
 800d344:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800d348:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d128      	bne.n	800d3a2 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800d350:	7efb      	ldrb	r3, [r7, #27]
 800d352:	461a      	mov	r2, r3
 800d354:	6879      	ldr	r1, [r7, #4]
 800d356:	68f8      	ldr	r0, [r7, #12]
 800d358:	f7ff fe02 	bl	800cf60 <VL53L0X_calc_timeout_mclks>
 800d35c:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800d35e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d360:	6a3a      	ldr	r2, [r7, #32]
 800d362:	4413      	add	r3, r2
 800d364:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800d366:	6a38      	ldr	r0, [r7, #32]
 800d368:	f7ff fdb7 	bl	800ceda <VL53L0X_encode_timeout>
 800d36c:	4603      	mov	r3, r0
 800d36e:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 800d370:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d374:	2b00      	cmp	r3, #0
 800d376:	d108      	bne.n	800d38a <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800d378:	8bfb      	ldrh	r3, [r7, #30]
 800d37a:	461a      	mov	r2, r3
 800d37c:	2171      	movs	r1, #113	; 0x71
 800d37e:	68f8      	ldr	r0, [r7, #12]
 800d380:	f001 fba0 	bl	800eac4 <VL53L0X_WrWord>
 800d384:	4603      	mov	r3, r0
 800d386:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800d38a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d107      	bne.n	800d3a2 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	687a      	ldr	r2, [r7, #4]
 800d396:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800d39a:	e002      	b.n	800d3a2 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800d39c:	23fc      	movs	r3, #252	; 0xfc
 800d39e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 800d3a2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	3728      	adds	r7, #40	; 0x28
 800d3aa:	46bd      	mov	sp, r7
 800d3ac:	bd80      	pop	{r7, pc}

0800d3ae <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800d3ae:	b580      	push	{r7, lr}
 800d3b0:	b08a      	sub	sp, #40	; 0x28
 800d3b2:	af00      	add	r7, sp, #0
 800d3b4:	6078      	str	r0, [r7, #4]
 800d3b6:	460b      	mov	r3, r1
 800d3b8:	70fb      	strb	r3, [r7, #3]
 800d3ba:	4613      	mov	r3, r2
 800d3bc:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d3be:	2300      	movs	r3, #0
 800d3c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 800d3c4:	230c      	movs	r3, #12
 800d3c6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 800d3ca:	2312      	movs	r3, #18
 800d3cc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 800d3d0:	2308      	movs	r3, #8
 800d3d2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 800d3d6:	230e      	movs	r3, #14
 800d3d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 800d3dc:	2300      	movs	r3, #0
 800d3de:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 800d3e0:	78bb      	ldrb	r3, [r7, #2]
 800d3e2:	f003 0301 	and.w	r3, r3, #1
 800d3e6:	b2db      	uxtb	r3, r3
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d003      	beq.n	800d3f4 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800d3ec:	23fc      	movs	r3, #252	; 0xfc
 800d3ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d3f2:	e020      	b.n	800d436 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 800d3f4:	78fb      	ldrb	r3, [r7, #3]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d10d      	bne.n	800d416 <VL53L0X_set_vcsel_pulse_period+0x68>
 800d3fa:	78ba      	ldrb	r2, [r7, #2]
 800d3fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d400:	429a      	cmp	r2, r3
 800d402:	d304      	bcc.n	800d40e <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 800d404:	78ba      	ldrb	r2, [r7, #2]
 800d406:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800d40a:	429a      	cmp	r2, r3
 800d40c:	d903      	bls.n	800d416 <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800d40e:	23fc      	movs	r3, #252	; 0xfc
 800d410:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d414:	e00f      	b.n	800d436 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 800d416:	78fb      	ldrb	r3, [r7, #3]
 800d418:	2b01      	cmp	r3, #1
 800d41a:	d10c      	bne.n	800d436 <VL53L0X_set_vcsel_pulse_period+0x88>
 800d41c:	78ba      	ldrb	r2, [r7, #2]
 800d41e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d422:	429a      	cmp	r2, r3
 800d424:	d304      	bcc.n	800d430 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 800d426:	78ba      	ldrb	r2, [r7, #2]
 800d428:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d42c:	429a      	cmp	r2, r3
 800d42e:	d902      	bls.n	800d436 <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800d430:	23fc      	movs	r3, #252	; 0xfc
 800d432:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 800d436:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d002      	beq.n	800d444 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 800d43e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d442:	e239      	b.n	800d8b8 <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 800d444:	78fb      	ldrb	r3, [r7, #3]
 800d446:	2b00      	cmp	r3, #0
 800d448:	d150      	bne.n	800d4ec <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 800d44a:	78bb      	ldrb	r3, [r7, #2]
 800d44c:	2b0c      	cmp	r3, #12
 800d44e:	d110      	bne.n	800d472 <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 800d450:	2218      	movs	r2, #24
 800d452:	2157      	movs	r1, #87	; 0x57
 800d454:	6878      	ldr	r0, [r7, #4]
 800d456:	f001 fb11 	bl	800ea7c <VL53L0X_WrByte>
 800d45a:	4603      	mov	r3, r0
 800d45c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 800d460:	2208      	movs	r2, #8
 800d462:	2156      	movs	r1, #86	; 0x56
 800d464:	6878      	ldr	r0, [r7, #4]
 800d466:	f001 fb09 	bl	800ea7c <VL53L0X_WrByte>
 800d46a:	4603      	mov	r3, r0
 800d46c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d470:	e17f      	b.n	800d772 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 800d472:	78bb      	ldrb	r3, [r7, #2]
 800d474:	2b0e      	cmp	r3, #14
 800d476:	d110      	bne.n	800d49a <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 800d478:	2230      	movs	r2, #48	; 0x30
 800d47a:	2157      	movs	r1, #87	; 0x57
 800d47c:	6878      	ldr	r0, [r7, #4]
 800d47e:	f001 fafd 	bl	800ea7c <VL53L0X_WrByte>
 800d482:	4603      	mov	r3, r0
 800d484:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 800d488:	2208      	movs	r2, #8
 800d48a:	2156      	movs	r1, #86	; 0x56
 800d48c:	6878      	ldr	r0, [r7, #4]
 800d48e:	f001 faf5 	bl	800ea7c <VL53L0X_WrByte>
 800d492:	4603      	mov	r3, r0
 800d494:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d498:	e16b      	b.n	800d772 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 800d49a:	78bb      	ldrb	r3, [r7, #2]
 800d49c:	2b10      	cmp	r3, #16
 800d49e:	d110      	bne.n	800d4c2 <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 800d4a0:	2240      	movs	r2, #64	; 0x40
 800d4a2:	2157      	movs	r1, #87	; 0x57
 800d4a4:	6878      	ldr	r0, [r7, #4]
 800d4a6:	f001 fae9 	bl	800ea7c <VL53L0X_WrByte>
 800d4aa:	4603      	mov	r3, r0
 800d4ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 800d4b0:	2208      	movs	r2, #8
 800d4b2:	2156      	movs	r1, #86	; 0x56
 800d4b4:	6878      	ldr	r0, [r7, #4]
 800d4b6:	f001 fae1 	bl	800ea7c <VL53L0X_WrByte>
 800d4ba:	4603      	mov	r3, r0
 800d4bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d4c0:	e157      	b.n	800d772 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 800d4c2:	78bb      	ldrb	r3, [r7, #2]
 800d4c4:	2b12      	cmp	r3, #18
 800d4c6:	f040 8154 	bne.w	800d772 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800d4ca:	2250      	movs	r2, #80	; 0x50
 800d4cc:	2157      	movs	r1, #87	; 0x57
 800d4ce:	6878      	ldr	r0, [r7, #4]
 800d4d0:	f001 fad4 	bl	800ea7c <VL53L0X_WrByte>
 800d4d4:	4603      	mov	r3, r0
 800d4d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 800d4da:	2208      	movs	r2, #8
 800d4dc:	2156      	movs	r1, #86	; 0x56
 800d4de:	6878      	ldr	r0, [r7, #4]
 800d4e0:	f001 facc 	bl	800ea7c <VL53L0X_WrByte>
 800d4e4:	4603      	mov	r3, r0
 800d4e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d4ea:	e142      	b.n	800d772 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 800d4ec:	78fb      	ldrb	r3, [r7, #3]
 800d4ee:	2b01      	cmp	r3, #1
 800d4f0:	f040 813f 	bne.w	800d772 <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 800d4f4:	78bb      	ldrb	r3, [r7, #2]
 800d4f6:	2b08      	cmp	r3, #8
 800d4f8:	d14c      	bne.n	800d594 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 800d4fa:	2210      	movs	r2, #16
 800d4fc:	2148      	movs	r1, #72	; 0x48
 800d4fe:	6878      	ldr	r0, [r7, #4]
 800d500:	f001 fabc 	bl	800ea7c <VL53L0X_WrByte>
 800d504:	4603      	mov	r3, r0
 800d506:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 800d50a:	2208      	movs	r2, #8
 800d50c:	2147      	movs	r1, #71	; 0x47
 800d50e:	6878      	ldr	r0, [r7, #4]
 800d510:	f001 fab4 	bl	800ea7c <VL53L0X_WrByte>
 800d514:	4603      	mov	r3, r0
 800d516:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800d51a:	2202      	movs	r2, #2
 800d51c:	2132      	movs	r1, #50	; 0x32
 800d51e:	6878      	ldr	r0, [r7, #4]
 800d520:	f001 faac 	bl	800ea7c <VL53L0X_WrByte>
 800d524:	4603      	mov	r3, r0
 800d526:	461a      	mov	r2, r3
 800d528:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d52c:	4313      	orrs	r3, r2
 800d52e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 800d532:	220c      	movs	r2, #12
 800d534:	2130      	movs	r1, #48	; 0x30
 800d536:	6878      	ldr	r0, [r7, #4]
 800d538:	f001 faa0 	bl	800ea7c <VL53L0X_WrByte>
 800d53c:	4603      	mov	r3, r0
 800d53e:	461a      	mov	r2, r3
 800d540:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d544:	4313      	orrs	r3, r2
 800d546:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800d54a:	2201      	movs	r2, #1
 800d54c:	21ff      	movs	r1, #255	; 0xff
 800d54e:	6878      	ldr	r0, [r7, #4]
 800d550:	f001 fa94 	bl	800ea7c <VL53L0X_WrByte>
 800d554:	4603      	mov	r3, r0
 800d556:	461a      	mov	r2, r3
 800d558:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d55c:	4313      	orrs	r3, r2
 800d55e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800d562:	2230      	movs	r2, #48	; 0x30
 800d564:	2130      	movs	r1, #48	; 0x30
 800d566:	6878      	ldr	r0, [r7, #4]
 800d568:	f001 fa88 	bl	800ea7c <VL53L0X_WrByte>
 800d56c:	4603      	mov	r3, r0
 800d56e:	461a      	mov	r2, r3
 800d570:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d574:	4313      	orrs	r3, r2
 800d576:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800d57a:	2200      	movs	r2, #0
 800d57c:	21ff      	movs	r1, #255	; 0xff
 800d57e:	6878      	ldr	r0, [r7, #4]
 800d580:	f001 fa7c 	bl	800ea7c <VL53L0X_WrByte>
 800d584:	4603      	mov	r3, r0
 800d586:	461a      	mov	r2, r3
 800d588:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d58c:	4313      	orrs	r3, r2
 800d58e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d592:	e0ee      	b.n	800d772 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 800d594:	78bb      	ldrb	r3, [r7, #2]
 800d596:	2b0a      	cmp	r3, #10
 800d598:	d14c      	bne.n	800d634 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 800d59a:	2228      	movs	r2, #40	; 0x28
 800d59c:	2148      	movs	r1, #72	; 0x48
 800d59e:	6878      	ldr	r0, [r7, #4]
 800d5a0:	f001 fa6c 	bl	800ea7c <VL53L0X_WrByte>
 800d5a4:	4603      	mov	r3, r0
 800d5a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 800d5aa:	2208      	movs	r2, #8
 800d5ac:	2147      	movs	r1, #71	; 0x47
 800d5ae:	6878      	ldr	r0, [r7, #4]
 800d5b0:	f001 fa64 	bl	800ea7c <VL53L0X_WrByte>
 800d5b4:	4603      	mov	r3, r0
 800d5b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800d5ba:	2203      	movs	r2, #3
 800d5bc:	2132      	movs	r1, #50	; 0x32
 800d5be:	6878      	ldr	r0, [r7, #4]
 800d5c0:	f001 fa5c 	bl	800ea7c <VL53L0X_WrByte>
 800d5c4:	4603      	mov	r3, r0
 800d5c6:	461a      	mov	r2, r3
 800d5c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d5cc:	4313      	orrs	r3, r2
 800d5ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800d5d2:	2209      	movs	r2, #9
 800d5d4:	2130      	movs	r1, #48	; 0x30
 800d5d6:	6878      	ldr	r0, [r7, #4]
 800d5d8:	f001 fa50 	bl	800ea7c <VL53L0X_WrByte>
 800d5dc:	4603      	mov	r3, r0
 800d5de:	461a      	mov	r2, r3
 800d5e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d5e4:	4313      	orrs	r3, r2
 800d5e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800d5ea:	2201      	movs	r2, #1
 800d5ec:	21ff      	movs	r1, #255	; 0xff
 800d5ee:	6878      	ldr	r0, [r7, #4]
 800d5f0:	f001 fa44 	bl	800ea7c <VL53L0X_WrByte>
 800d5f4:	4603      	mov	r3, r0
 800d5f6:	461a      	mov	r2, r3
 800d5f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d5fc:	4313      	orrs	r3, r2
 800d5fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800d602:	2220      	movs	r2, #32
 800d604:	2130      	movs	r1, #48	; 0x30
 800d606:	6878      	ldr	r0, [r7, #4]
 800d608:	f001 fa38 	bl	800ea7c <VL53L0X_WrByte>
 800d60c:	4603      	mov	r3, r0
 800d60e:	461a      	mov	r2, r3
 800d610:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d614:	4313      	orrs	r3, r2
 800d616:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800d61a:	2200      	movs	r2, #0
 800d61c:	21ff      	movs	r1, #255	; 0xff
 800d61e:	6878      	ldr	r0, [r7, #4]
 800d620:	f001 fa2c 	bl	800ea7c <VL53L0X_WrByte>
 800d624:	4603      	mov	r3, r0
 800d626:	461a      	mov	r2, r3
 800d628:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d62c:	4313      	orrs	r3, r2
 800d62e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d632:	e09e      	b.n	800d772 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 800d634:	78bb      	ldrb	r3, [r7, #2]
 800d636:	2b0c      	cmp	r3, #12
 800d638:	d14c      	bne.n	800d6d4 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 800d63a:	2238      	movs	r2, #56	; 0x38
 800d63c:	2148      	movs	r1, #72	; 0x48
 800d63e:	6878      	ldr	r0, [r7, #4]
 800d640:	f001 fa1c 	bl	800ea7c <VL53L0X_WrByte>
 800d644:	4603      	mov	r3, r0
 800d646:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 800d64a:	2208      	movs	r2, #8
 800d64c:	2147      	movs	r1, #71	; 0x47
 800d64e:	6878      	ldr	r0, [r7, #4]
 800d650:	f001 fa14 	bl	800ea7c <VL53L0X_WrByte>
 800d654:	4603      	mov	r3, r0
 800d656:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800d65a:	2203      	movs	r2, #3
 800d65c:	2132      	movs	r1, #50	; 0x32
 800d65e:	6878      	ldr	r0, [r7, #4]
 800d660:	f001 fa0c 	bl	800ea7c <VL53L0X_WrByte>
 800d664:	4603      	mov	r3, r0
 800d666:	461a      	mov	r2, r3
 800d668:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d66c:	4313      	orrs	r3, r2
 800d66e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800d672:	2208      	movs	r2, #8
 800d674:	2130      	movs	r1, #48	; 0x30
 800d676:	6878      	ldr	r0, [r7, #4]
 800d678:	f001 fa00 	bl	800ea7c <VL53L0X_WrByte>
 800d67c:	4603      	mov	r3, r0
 800d67e:	461a      	mov	r2, r3
 800d680:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d684:	4313      	orrs	r3, r2
 800d686:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800d68a:	2201      	movs	r2, #1
 800d68c:	21ff      	movs	r1, #255	; 0xff
 800d68e:	6878      	ldr	r0, [r7, #4]
 800d690:	f001 f9f4 	bl	800ea7c <VL53L0X_WrByte>
 800d694:	4603      	mov	r3, r0
 800d696:	461a      	mov	r2, r3
 800d698:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d69c:	4313      	orrs	r3, r2
 800d69e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800d6a2:	2220      	movs	r2, #32
 800d6a4:	2130      	movs	r1, #48	; 0x30
 800d6a6:	6878      	ldr	r0, [r7, #4]
 800d6a8:	f001 f9e8 	bl	800ea7c <VL53L0X_WrByte>
 800d6ac:	4603      	mov	r3, r0
 800d6ae:	461a      	mov	r2, r3
 800d6b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d6b4:	4313      	orrs	r3, r2
 800d6b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	21ff      	movs	r1, #255	; 0xff
 800d6be:	6878      	ldr	r0, [r7, #4]
 800d6c0:	f001 f9dc 	bl	800ea7c <VL53L0X_WrByte>
 800d6c4:	4603      	mov	r3, r0
 800d6c6:	461a      	mov	r2, r3
 800d6c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d6cc:	4313      	orrs	r3, r2
 800d6ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d6d2:	e04e      	b.n	800d772 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 800d6d4:	78bb      	ldrb	r3, [r7, #2]
 800d6d6:	2b0e      	cmp	r3, #14
 800d6d8:	d14b      	bne.n	800d772 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800d6da:	2248      	movs	r2, #72	; 0x48
 800d6dc:	2148      	movs	r1, #72	; 0x48
 800d6de:	6878      	ldr	r0, [r7, #4]
 800d6e0:	f001 f9cc 	bl	800ea7c <VL53L0X_WrByte>
 800d6e4:	4603      	mov	r3, r0
 800d6e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 800d6ea:	2208      	movs	r2, #8
 800d6ec:	2147      	movs	r1, #71	; 0x47
 800d6ee:	6878      	ldr	r0, [r7, #4]
 800d6f0:	f001 f9c4 	bl	800ea7c <VL53L0X_WrByte>
 800d6f4:	4603      	mov	r3, r0
 800d6f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800d6fa:	2203      	movs	r2, #3
 800d6fc:	2132      	movs	r1, #50	; 0x32
 800d6fe:	6878      	ldr	r0, [r7, #4]
 800d700:	f001 f9bc 	bl	800ea7c <VL53L0X_WrByte>
 800d704:	4603      	mov	r3, r0
 800d706:	461a      	mov	r2, r3
 800d708:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d70c:	4313      	orrs	r3, r2
 800d70e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800d712:	2207      	movs	r2, #7
 800d714:	2130      	movs	r1, #48	; 0x30
 800d716:	6878      	ldr	r0, [r7, #4]
 800d718:	f001 f9b0 	bl	800ea7c <VL53L0X_WrByte>
 800d71c:	4603      	mov	r3, r0
 800d71e:	461a      	mov	r2, r3
 800d720:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d724:	4313      	orrs	r3, r2
 800d726:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800d72a:	2201      	movs	r2, #1
 800d72c:	21ff      	movs	r1, #255	; 0xff
 800d72e:	6878      	ldr	r0, [r7, #4]
 800d730:	f001 f9a4 	bl	800ea7c <VL53L0X_WrByte>
 800d734:	4603      	mov	r3, r0
 800d736:	461a      	mov	r2, r3
 800d738:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d73c:	4313      	orrs	r3, r2
 800d73e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800d742:	2220      	movs	r2, #32
 800d744:	2130      	movs	r1, #48	; 0x30
 800d746:	6878      	ldr	r0, [r7, #4]
 800d748:	f001 f998 	bl	800ea7c <VL53L0X_WrByte>
 800d74c:	4603      	mov	r3, r0
 800d74e:	461a      	mov	r2, r3
 800d750:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d754:	4313      	orrs	r3, r2
 800d756:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800d75a:	2200      	movs	r2, #0
 800d75c:	21ff      	movs	r1, #255	; 0xff
 800d75e:	6878      	ldr	r0, [r7, #4]
 800d760:	f001 f98c 	bl	800ea7c <VL53L0X_WrByte>
 800d764:	4603      	mov	r3, r0
 800d766:	461a      	mov	r2, r3
 800d768:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d76c:	4313      	orrs	r3, r2
 800d76e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 800d772:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d776:	2b00      	cmp	r3, #0
 800d778:	d17f      	bne.n	800d87a <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 800d77a:	78bb      	ldrb	r3, [r7, #2]
 800d77c:	4618      	mov	r0, r3
 800d77e:	f7fe fe37 	bl	800c3f0 <VL53L0X_encode_vcsel_period>
 800d782:	4603      	mov	r3, r0
 800d784:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 800d788:	78fb      	ldrb	r3, [r7, #3]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d002      	beq.n	800d794 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 800d78e:	2b01      	cmp	r3, #1
 800d790:	d045      	beq.n	800d81e <VL53L0X_set_vcsel_pulse_period+0x470>
 800d792:	e06e      	b.n	800d872 <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800d794:	f107 0314 	add.w	r3, r7, #20
 800d798:	461a      	mov	r2, r3
 800d79a:	2103      	movs	r1, #3
 800d79c:	6878      	ldr	r0, [r7, #4]
 800d79e:	f7ff fc33 	bl	800d008 <get_sequence_step_timeout>
 800d7a2:	4603      	mov	r3, r0
 800d7a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800d7a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d109      	bne.n	800d7c4 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 800d7b0:	f107 0310 	add.w	r3, r7, #16
 800d7b4:	461a      	mov	r2, r3
 800d7b6:	2102      	movs	r1, #2
 800d7b8:	6878      	ldr	r0, [r7, #4]
 800d7ba:	f7ff fc25 	bl	800d008 <get_sequence_step_timeout>
 800d7be:	4603      	mov	r3, r0
 800d7c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800d7c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d109      	bne.n	800d7e0 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 800d7cc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800d7d0:	461a      	mov	r2, r3
 800d7d2:	2150      	movs	r1, #80	; 0x50
 800d7d4:	6878      	ldr	r0, [r7, #4]
 800d7d6:	f001 f951 	bl	800ea7c <VL53L0X_WrByte>
 800d7da:	4603      	mov	r3, r0
 800d7dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800d7e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d108      	bne.n	800d7fa <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 800d7e8:	697b      	ldr	r3, [r7, #20]
 800d7ea:	461a      	mov	r2, r3
 800d7ec:	2103      	movs	r1, #3
 800d7ee:	6878      	ldr	r0, [r7, #4]
 800d7f0:	f7ff fceb 	bl	800d1ca <set_sequence_step_timeout>
 800d7f4:	4603      	mov	r3, r0
 800d7f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 800d7fa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d108      	bne.n	800d814 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 800d802:	693b      	ldr	r3, [r7, #16]
 800d804:	461a      	mov	r2, r3
 800d806:	2102      	movs	r1, #2
 800d808:	6878      	ldr	r0, [r7, #4]
 800d80a:	f7ff fcde 	bl	800d1ca <set_sequence_step_timeout>
 800d80e:	4603      	mov	r3, r0
 800d810:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	78ba      	ldrb	r2, [r7, #2]
 800d818:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800d81c:	e02e      	b.n	800d87c <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800d81e:	f107 0318 	add.w	r3, r7, #24
 800d822:	461a      	mov	r2, r3
 800d824:	2104      	movs	r1, #4
 800d826:	6878      	ldr	r0, [r7, #4]
 800d828:	f7ff fbee 	bl	800d008 <get_sequence_step_timeout>
 800d82c:	4603      	mov	r3, r0
 800d82e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800d832:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d836:	2b00      	cmp	r3, #0
 800d838:	d109      	bne.n	800d84e <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 800d83a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800d83e:	461a      	mov	r2, r3
 800d840:	2170      	movs	r1, #112	; 0x70
 800d842:	6878      	ldr	r0, [r7, #4]
 800d844:	f001 f91a 	bl	800ea7c <VL53L0X_WrByte>
 800d848:	4603      	mov	r3, r0
 800d84a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800d84e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d852:	2b00      	cmp	r3, #0
 800d854:	d108      	bne.n	800d868 <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 800d856:	69bb      	ldr	r3, [r7, #24]
 800d858:	461a      	mov	r2, r3
 800d85a:	2104      	movs	r1, #4
 800d85c:	6878      	ldr	r0, [r7, #4]
 800d85e:	f7ff fcb4 	bl	800d1ca <set_sequence_step_timeout>
 800d862:	4603      	mov	r3, r0
 800d864:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	78ba      	ldrb	r2, [r7, #2]
 800d86c:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800d870:	e004      	b.n	800d87c <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800d872:	23fc      	movs	r3, #252	; 0xfc
 800d874:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d878:	e000      	b.n	800d87c <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 800d87a:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 800d87c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d880:	2b00      	cmp	r3, #0
 800d882:	d109      	bne.n	800d898 <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	695b      	ldr	r3, [r3, #20]
 800d888:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800d88a:	69f9      	ldr	r1, [r7, #28]
 800d88c:	6878      	ldr	r0, [r7, #4]
 800d88e:	f7fc fd99 	bl	800a3c4 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800d892:	4603      	mov	r3, r0
 800d894:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 800d898:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d109      	bne.n	800d8b4 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 800d8a0:	f107 010f 	add.w	r1, r7, #15
 800d8a4:	2301      	movs	r3, #1
 800d8a6:	2200      	movs	r2, #0
 800d8a8:	6878      	ldr	r0, [r7, #4]
 800d8aa:	f7fe fc99 	bl	800c1e0 <VL53L0X_perform_phase_calibration>
 800d8ae:	4603      	mov	r3, r0
 800d8b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 800d8b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d8b8:	4618      	mov	r0, r3
 800d8ba:	3728      	adds	r7, #40	; 0x28
 800d8bc:	46bd      	mov	sp, r7
 800d8be:	bd80      	pop	{r7, pc}

0800d8c0 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800d8c0:	b580      	push	{r7, lr}
 800d8c2:	b086      	sub	sp, #24
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	60f8      	str	r0, [r7, #12]
 800d8c8:	460b      	mov	r3, r1
 800d8ca:	607a      	str	r2, [r7, #4]
 800d8cc:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d8ce:	2300      	movs	r3, #0
 800d8d0:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800d8d2:	7afb      	ldrb	r3, [r7, #11]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d002      	beq.n	800d8de <VL53L0X_get_vcsel_pulse_period+0x1e>
 800d8d8:	2b01      	cmp	r3, #1
 800d8da:	d00a      	beq.n	800d8f2 <VL53L0X_get_vcsel_pulse_period+0x32>
 800d8dc:	e013      	b.n	800d906 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800d8de:	f107 0316 	add.w	r3, r7, #22
 800d8e2:	461a      	mov	r2, r3
 800d8e4:	2150      	movs	r1, #80	; 0x50
 800d8e6:	68f8      	ldr	r0, [r7, #12]
 800d8e8:	f001 f94a 	bl	800eb80 <VL53L0X_RdByte>
 800d8ec:	4603      	mov	r3, r0
 800d8ee:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800d8f0:	e00b      	b.n	800d90a <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800d8f2:	f107 0316 	add.w	r3, r7, #22
 800d8f6:	461a      	mov	r2, r3
 800d8f8:	2170      	movs	r1, #112	; 0x70
 800d8fa:	68f8      	ldr	r0, [r7, #12]
 800d8fc:	f001 f940 	bl	800eb80 <VL53L0X_RdByte>
 800d900:	4603      	mov	r3, r0
 800d902:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800d904:	e001      	b.n	800d90a <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800d906:	23fc      	movs	r3, #252	; 0xfc
 800d908:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800d90a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d107      	bne.n	800d922 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800d912:	7dbb      	ldrb	r3, [r7, #22]
 800d914:	4618      	mov	r0, r3
 800d916:	f7fe fd58 	bl	800c3ca <VL53L0X_decode_vcsel_period>
 800d91a:	4603      	mov	r3, r0
 800d91c:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	701a      	strb	r2, [r3, #0]

	return Status;
 800d922:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d926:	4618      	mov	r0, r3
 800d928:	3718      	adds	r7, #24
 800d92a:	46bd      	mov	sp, r7
 800d92c:	bd80      	pop	{r7, pc}

0800d92e <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800d92e:	b580      	push	{r7, lr}
 800d930:	b092      	sub	sp, #72	; 0x48
 800d932:	af00      	add	r7, sp, #0
 800d934:	6078      	str	r0, [r7, #4]
 800d936:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d938:	2300      	movs	r3, #0
 800d93a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800d93e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800d942:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800d944:	f240 7376 	movw	r3, #1910	; 0x776
 800d948:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800d94a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800d94e:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800d950:	f44f 7325 	mov.w	r3, #660	; 0x294
 800d954:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 800d956:	f240 234e 	movw	r3, #590	; 0x24e
 800d95a:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 800d95c:	f240 23b2 	movw	r3, #690	; 0x2b2
 800d960:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800d962:	f44f 7325 	mov.w	r3, #660	; 0x294
 800d966:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800d968:	f240 2326 	movw	r3, #550	; 0x226
 800d96c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800d96e:	2300      	movs	r3, #0
 800d970:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 800d972:	f644 6320 	movw	r3, #20000	; 0x4e20
 800d976:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 800d978:	2300      	movs	r3, #0
 800d97a:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 800d97c:	683a      	ldr	r2, [r7, #0]
 800d97e:	6a3b      	ldr	r3, [r7, #32]
 800d980:	429a      	cmp	r2, r3
 800d982:	d205      	bcs.n	800d990 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800d984:	23fc      	movs	r3, #252	; 0xfc
 800d986:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 800d98a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800d98e:	e0aa      	b.n	800dae6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800d990:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d994:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 800d996:	683a      	ldr	r2, [r7, #0]
 800d998:	1ad3      	subs	r3, r2, r3
 800d99a:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800d99c:	f107 0314 	add.w	r3, r7, #20
 800d9a0:	4619      	mov	r1, r3
 800d9a2:	6878      	ldr	r0, [r7, #4]
 800d9a4:	f7fc fe58 	bl	800a658 <VL53L0X_GetSequenceStepEnables>
 800d9a8:	4603      	mov	r3, r0
 800d9aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 800d9ae:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d15b      	bne.n	800da6e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 800d9b6:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d105      	bne.n	800d9c8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 800d9bc:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d102      	bne.n	800d9c8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 800d9c2:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d052      	beq.n	800da6e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800d9c8:	f107 0310 	add.w	r3, r7, #16
 800d9cc:	461a      	mov	r2, r3
 800d9ce:	2102      	movs	r1, #2
 800d9d0:	6878      	ldr	r0, [r7, #4]
 800d9d2:	f7ff fb19 	bl	800d008 <get_sequence_step_timeout>
 800d9d6:	4603      	mov	r3, r0
 800d9d8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800d9dc:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d002      	beq.n	800d9ea <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 800d9e4:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800d9e8:	e07d      	b.n	800dae6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800d9ea:	7d3b      	ldrb	r3, [r7, #20]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d00f      	beq.n	800da10 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800d9f0:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800d9f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d9f4:	4413      	add	r3, r2
 800d9f6:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800d9f8:	69fa      	ldr	r2, [r7, #28]
 800d9fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9fc:	429a      	cmp	r2, r3
 800d9fe:	d204      	bcs.n	800da0a <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800da00:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800da02:	69fb      	ldr	r3, [r7, #28]
 800da04:	1ad3      	subs	r3, r2, r3
 800da06:	643b      	str	r3, [r7, #64]	; 0x40
 800da08:	e002      	b.n	800da10 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800da0a:	23fc      	movs	r3, #252	; 0xfc
 800da0c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800da10:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800da14:	2b00      	cmp	r3, #0
 800da16:	d002      	beq.n	800da1e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800da18:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800da1c:	e063      	b.n	800dae6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800da1e:	7dbb      	ldrb	r3, [r7, #22]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d011      	beq.n	800da48 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800da24:	693a      	ldr	r2, [r7, #16]
 800da26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da28:	4413      	add	r3, r2
 800da2a:	005b      	lsls	r3, r3, #1
 800da2c:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800da2e:	69fa      	ldr	r2, [r7, #28]
 800da30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da32:	429a      	cmp	r2, r3
 800da34:	d204      	bcs.n	800da40 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800da36:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800da38:	69fb      	ldr	r3, [r7, #28]
 800da3a:	1ad3      	subs	r3, r2, r3
 800da3c:	643b      	str	r3, [r7, #64]	; 0x40
 800da3e:	e016      	b.n	800da6e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800da40:	23fc      	movs	r3, #252	; 0xfc
 800da42:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800da46:	e012      	b.n	800da6e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800da48:	7d7b      	ldrb	r3, [r7, #21]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d00f      	beq.n	800da6e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800da4e:	693b      	ldr	r3, [r7, #16]
 800da50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800da52:	4413      	add	r3, r2
 800da54:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800da56:	69fa      	ldr	r2, [r7, #28]
 800da58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da5a:	429a      	cmp	r2, r3
 800da5c:	d204      	bcs.n	800da68 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800da5e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800da60:	69fb      	ldr	r3, [r7, #28]
 800da62:	1ad3      	subs	r3, r2, r3
 800da64:	643b      	str	r3, [r7, #64]	; 0x40
 800da66:	e002      	b.n	800da6e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800da68:	23fc      	movs	r3, #252	; 0xfc
 800da6a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800da6e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800da72:	2b00      	cmp	r3, #0
 800da74:	d002      	beq.n	800da7c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 800da76:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800da7a:	e034      	b.n	800dae6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800da7c:	7dfb      	ldrb	r3, [r7, #23]
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d019      	beq.n	800dab6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800da82:	f107 030c 	add.w	r3, r7, #12
 800da86:	461a      	mov	r2, r3
 800da88:	2103      	movs	r1, #3
 800da8a:	6878      	ldr	r0, [r7, #4]
 800da8c:	f7ff fabc 	bl	800d008 <get_sequence_step_timeout>
 800da90:	4603      	mov	r3, r0
 800da92:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800da9a:	4413      	add	r3, r2
 800da9c:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800da9e:	69fa      	ldr	r2, [r7, #28]
 800daa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800daa2:	429a      	cmp	r2, r3
 800daa4:	d204      	bcs.n	800dab0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800daa6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800daa8:	69fb      	ldr	r3, [r7, #28]
 800daaa:	1ad3      	subs	r3, r2, r3
 800daac:	643b      	str	r3, [r7, #64]	; 0x40
 800daae:	e002      	b.n	800dab6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800dab0:	23fc      	movs	r3, #252	; 0xfc
 800dab2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800dab6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d111      	bne.n	800dae2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800dabe:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d00e      	beq.n	800dae2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 800dac4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dac8:	1ad3      	subs	r3, r2, r3
 800daca:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800dacc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dace:	2104      	movs	r1, #4
 800dad0:	6878      	ldr	r0, [r7, #4]
 800dad2:	f7ff fb7a 	bl	800d1ca <set_sequence_step_timeout>
 800dad6:	4603      	mov	r3, r0
 800dad8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	683a      	ldr	r2, [r7, #0]
 800dae0:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800dae2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800dae6:	4618      	mov	r0, r3
 800dae8:	3748      	adds	r7, #72	; 0x48
 800daea:	46bd      	mov	sp, r7
 800daec:	bd80      	pop	{r7, pc}

0800daee <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800daee:	b580      	push	{r7, lr}
 800daf0:	b090      	sub	sp, #64	; 0x40
 800daf2:	af00      	add	r7, sp, #0
 800daf4:	6078      	str	r0, [r7, #4]
 800daf6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800daf8:	2300      	movs	r3, #0
 800dafa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800dafe:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800db02:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800db04:	f240 7376 	movw	r3, #1910	; 0x776
 800db08:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800db0a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800db0e:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800db10:	f44f 7325 	mov.w	r3, #660	; 0x294
 800db14:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800db16:	f240 234e 	movw	r3, #590	; 0x24e
 800db1a:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800db1c:	f240 23b2 	movw	r3, #690	; 0x2b2
 800db20:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800db22:	f44f 7325 	mov.w	r3, #660	; 0x294
 800db26:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800db28:	f240 2326 	movw	r3, #550	; 0x226
 800db2c:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800db2e:	2300      	movs	r3, #0
 800db30:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800db32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800db34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db36:	441a      	add	r2, r3
 800db38:	683b      	ldr	r3, [r7, #0]
 800db3a:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800db3c:	f107 0318 	add.w	r3, r7, #24
 800db40:	4619      	mov	r1, r3
 800db42:	6878      	ldr	r0, [r7, #4]
 800db44:	f7fc fd88 	bl	800a658 <VL53L0X_GetSequenceStepEnables>
 800db48:	4603      	mov	r3, r0
 800db4a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800db4e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800db52:	2b00      	cmp	r3, #0
 800db54:	d002      	beq.n	800db5c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800db56:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800db5a:	e075      	b.n	800dc48 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800db5c:	7e3b      	ldrb	r3, [r7, #24]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d105      	bne.n	800db6e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800db62:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800db64:	2b00      	cmp	r3, #0
 800db66:	d102      	bne.n	800db6e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800db68:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d030      	beq.n	800dbd0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800db6e:	f107 0310 	add.w	r3, r7, #16
 800db72:	461a      	mov	r2, r3
 800db74:	2102      	movs	r1, #2
 800db76:	6878      	ldr	r0, [r7, #4]
 800db78:	f7ff fa46 	bl	800d008 <get_sequence_step_timeout>
 800db7c:	4603      	mov	r3, r0
 800db7e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800db82:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800db86:	2b00      	cmp	r3, #0
 800db88:	d122      	bne.n	800dbd0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800db8a:	7e3b      	ldrb	r3, [r7, #24]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d007      	beq.n	800dba0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800db90:	683b      	ldr	r3, [r7, #0]
 800db92:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800db94:	6939      	ldr	r1, [r7, #16]
 800db96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db98:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800db9a:	441a      	add	r2, r3
 800db9c:	683b      	ldr	r3, [r7, #0]
 800db9e:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800dba0:	7ebb      	ldrb	r3, [r7, #26]
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d009      	beq.n	800dbba <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800dba6:	683b      	ldr	r3, [r7, #0]
 800dba8:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800dbaa:	6939      	ldr	r1, [r7, #16]
 800dbac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbae:	440b      	add	r3, r1
 800dbb0:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800dbb2:	441a      	add	r2, r3
 800dbb4:	683b      	ldr	r3, [r7, #0]
 800dbb6:	601a      	str	r2, [r3, #0]
 800dbb8:	e00a      	b.n	800dbd0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800dbba:	7e7b      	ldrb	r3, [r7, #25]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d007      	beq.n	800dbd0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800dbc0:	683b      	ldr	r3, [r7, #0]
 800dbc2:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800dbc4:	6939      	ldr	r1, [r7, #16]
 800dbc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbc8:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800dbca:	441a      	add	r2, r3
 800dbcc:	683b      	ldr	r3, [r7, #0]
 800dbce:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800dbd0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d114      	bne.n	800dc02 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800dbd8:	7efb      	ldrb	r3, [r7, #27]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d011      	beq.n	800dc02 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800dbde:	f107 030c 	add.w	r3, r7, #12
 800dbe2:	461a      	mov	r2, r3
 800dbe4:	2103      	movs	r1, #3
 800dbe6:	6878      	ldr	r0, [r7, #4]
 800dbe8:	f7ff fa0e 	bl	800d008 <get_sequence_step_timeout>
 800dbec:	4603      	mov	r3, r0
 800dbee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800dbf2:	683b      	ldr	r3, [r7, #0]
 800dbf4:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800dbf6:	68f9      	ldr	r1, [r7, #12]
 800dbf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbfa:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800dbfc:	441a      	add	r2, r3
 800dbfe:	683b      	ldr	r3, [r7, #0]
 800dc00:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800dc02:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d114      	bne.n	800dc34 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800dc0a:	7f3b      	ldrb	r3, [r7, #28]
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d011      	beq.n	800dc34 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800dc10:	f107 0314 	add.w	r3, r7, #20
 800dc14:	461a      	mov	r2, r3
 800dc16:	2104      	movs	r1, #4
 800dc18:	6878      	ldr	r0, [r7, #4]
 800dc1a:	f7ff f9f5 	bl	800d008 <get_sequence_step_timeout>
 800dc1e:	4603      	mov	r3, r0
 800dc20:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800dc24:	683b      	ldr	r3, [r7, #0]
 800dc26:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800dc28:	6979      	ldr	r1, [r7, #20]
 800dc2a:	6a3b      	ldr	r3, [r7, #32]
 800dc2c:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800dc2e:	441a      	add	r2, r3
 800dc30:	683b      	ldr	r3, [r7, #0]
 800dc32:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800dc34:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d103      	bne.n	800dc44 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800dc3c:	683b      	ldr	r3, [r7, #0]
 800dc3e:	681a      	ldr	r2, [r3, #0]
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800dc44:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800dc48:	4618      	mov	r0, r3
 800dc4a:	3740      	adds	r7, #64	; 0x40
 800dc4c:	46bd      	mov	sp, r7
 800dc4e:	bd80      	pop	{r7, pc}

0800dc50 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800dc50:	b580      	push	{r7, lr}
 800dc52:	b088      	sub	sp, #32
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	6078      	str	r0, [r7, #4]
 800dc58:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800dc5a:	2300      	movs	r3, #0
 800dc5c:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800dc5e:	2300      	movs	r3, #0
 800dc60:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800dc62:	e0c6      	b.n	800ddf2 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800dc64:	697b      	ldr	r3, [r7, #20]
 800dc66:	683a      	ldr	r2, [r7, #0]
 800dc68:	4413      	add	r3, r2
 800dc6a:	781b      	ldrb	r3, [r3, #0]
 800dc6c:	74fb      	strb	r3, [r7, #19]
		Index++;
 800dc6e:	697b      	ldr	r3, [r7, #20]
 800dc70:	3301      	adds	r3, #1
 800dc72:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 800dc74:	7cfb      	ldrb	r3, [r7, #19]
 800dc76:	2bff      	cmp	r3, #255	; 0xff
 800dc78:	f040 808d 	bne.w	800dd96 <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800dc7c:	697b      	ldr	r3, [r7, #20]
 800dc7e:	683a      	ldr	r2, [r7, #0]
 800dc80:	4413      	add	r3, r2
 800dc82:	781b      	ldrb	r3, [r3, #0]
 800dc84:	747b      	strb	r3, [r7, #17]
			Index++;
 800dc86:	697b      	ldr	r3, [r7, #20]
 800dc88:	3301      	adds	r3, #1
 800dc8a:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800dc8c:	7c7b      	ldrb	r3, [r7, #17]
 800dc8e:	2b03      	cmp	r3, #3
 800dc90:	d87e      	bhi.n	800dd90 <VL53L0X_load_tuning_settings+0x140>
 800dc92:	a201      	add	r2, pc, #4	; (adr r2, 800dc98 <VL53L0X_load_tuning_settings+0x48>)
 800dc94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc98:	0800dca9 	.word	0x0800dca9
 800dc9c:	0800dce3 	.word	0x0800dce3
 800dca0:	0800dd1d 	.word	0x0800dd1d
 800dca4:	0800dd57 	.word	0x0800dd57
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800dca8:	697b      	ldr	r3, [r7, #20]
 800dcaa:	683a      	ldr	r2, [r7, #0]
 800dcac:	4413      	add	r3, r2
 800dcae:	781b      	ldrb	r3, [r3, #0]
 800dcb0:	743b      	strb	r3, [r7, #16]
				Index++;
 800dcb2:	697b      	ldr	r3, [r7, #20]
 800dcb4:	3301      	adds	r3, #1
 800dcb6:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800dcb8:	697b      	ldr	r3, [r7, #20]
 800dcba:	683a      	ldr	r2, [r7, #0]
 800dcbc:	4413      	add	r3, r2
 800dcbe:	781b      	ldrb	r3, [r3, #0]
 800dcc0:	73fb      	strb	r3, [r7, #15]
				Index++;
 800dcc2:	697b      	ldr	r3, [r7, #20]
 800dcc4:	3301      	adds	r3, #1
 800dcc6:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800dcc8:	7c3b      	ldrb	r3, [r7, #16]
 800dcca:	b29b      	uxth	r3, r3
 800dccc:	021b      	lsls	r3, r3, #8
 800dcce:	b29a      	uxth	r2, r3
 800dcd0:	7bfb      	ldrb	r3, [r7, #15]
 800dcd2:	b29b      	uxth	r3, r3
 800dcd4:	4413      	add	r3, r2
 800dcd6:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	89ba      	ldrh	r2, [r7, #12]
 800dcdc:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 800dce0:	e087      	b.n	800ddf2 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800dce2:	697b      	ldr	r3, [r7, #20]
 800dce4:	683a      	ldr	r2, [r7, #0]
 800dce6:	4413      	add	r3, r2
 800dce8:	781b      	ldrb	r3, [r3, #0]
 800dcea:	743b      	strb	r3, [r7, #16]
				Index++;
 800dcec:	697b      	ldr	r3, [r7, #20]
 800dcee:	3301      	adds	r3, #1
 800dcf0:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800dcf2:	697b      	ldr	r3, [r7, #20]
 800dcf4:	683a      	ldr	r2, [r7, #0]
 800dcf6:	4413      	add	r3, r2
 800dcf8:	781b      	ldrb	r3, [r3, #0]
 800dcfa:	73fb      	strb	r3, [r7, #15]
				Index++;
 800dcfc:	697b      	ldr	r3, [r7, #20]
 800dcfe:	3301      	adds	r3, #1
 800dd00:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800dd02:	7c3b      	ldrb	r3, [r7, #16]
 800dd04:	b29b      	uxth	r3, r3
 800dd06:	021b      	lsls	r3, r3, #8
 800dd08:	b29a      	uxth	r2, r3
 800dd0a:	7bfb      	ldrb	r3, [r7, #15]
 800dd0c:	b29b      	uxth	r3, r3
 800dd0e:	4413      	add	r3, r2
 800dd10:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	89ba      	ldrh	r2, [r7, #12]
 800dd16:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 800dd1a:	e06a      	b.n	800ddf2 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800dd1c:	697b      	ldr	r3, [r7, #20]
 800dd1e:	683a      	ldr	r2, [r7, #0]
 800dd20:	4413      	add	r3, r2
 800dd22:	781b      	ldrb	r3, [r3, #0]
 800dd24:	743b      	strb	r3, [r7, #16]
				Index++;
 800dd26:	697b      	ldr	r3, [r7, #20]
 800dd28:	3301      	adds	r3, #1
 800dd2a:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800dd2c:	697b      	ldr	r3, [r7, #20]
 800dd2e:	683a      	ldr	r2, [r7, #0]
 800dd30:	4413      	add	r3, r2
 800dd32:	781b      	ldrb	r3, [r3, #0]
 800dd34:	73fb      	strb	r3, [r7, #15]
				Index++;
 800dd36:	697b      	ldr	r3, [r7, #20]
 800dd38:	3301      	adds	r3, #1
 800dd3a:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800dd3c:	7c3b      	ldrb	r3, [r7, #16]
 800dd3e:	b29b      	uxth	r3, r3
 800dd40:	021b      	lsls	r3, r3, #8
 800dd42:	b29a      	uxth	r2, r3
 800dd44:	7bfb      	ldrb	r3, [r7, #15]
 800dd46:	b29b      	uxth	r3, r3
 800dd48:	4413      	add	r3, r2
 800dd4a:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	89ba      	ldrh	r2, [r7, #12]
 800dd50:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 800dd54:	e04d      	b.n	800ddf2 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800dd56:	697b      	ldr	r3, [r7, #20]
 800dd58:	683a      	ldr	r2, [r7, #0]
 800dd5a:	4413      	add	r3, r2
 800dd5c:	781b      	ldrb	r3, [r3, #0]
 800dd5e:	743b      	strb	r3, [r7, #16]
				Index++;
 800dd60:	697b      	ldr	r3, [r7, #20]
 800dd62:	3301      	adds	r3, #1
 800dd64:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800dd66:	697b      	ldr	r3, [r7, #20]
 800dd68:	683a      	ldr	r2, [r7, #0]
 800dd6a:	4413      	add	r3, r2
 800dd6c:	781b      	ldrb	r3, [r3, #0]
 800dd6e:	73fb      	strb	r3, [r7, #15]
				Index++;
 800dd70:	697b      	ldr	r3, [r7, #20]
 800dd72:	3301      	adds	r3, #1
 800dd74:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800dd76:	7c3b      	ldrb	r3, [r7, #16]
 800dd78:	b29b      	uxth	r3, r3
 800dd7a:	021b      	lsls	r3, r3, #8
 800dd7c:	b29a      	uxth	r2, r3
 800dd7e:	7bfb      	ldrb	r3, [r7, #15]
 800dd80:	b29b      	uxth	r3, r3
 800dd82:	4413      	add	r3, r2
 800dd84:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	89ba      	ldrh	r2, [r7, #12]
 800dd8a:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 800dd8e:	e030      	b.n	800ddf2 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800dd90:	23fc      	movs	r3, #252	; 0xfc
 800dd92:	77fb      	strb	r3, [r7, #31]
 800dd94:	e02d      	b.n	800ddf2 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800dd96:	7cfb      	ldrb	r3, [r7, #19]
 800dd98:	2b04      	cmp	r3, #4
 800dd9a:	d828      	bhi.n	800ddee <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800dd9c:	697b      	ldr	r3, [r7, #20]
 800dd9e:	683a      	ldr	r2, [r7, #0]
 800dda0:	4413      	add	r3, r2
 800dda2:	781b      	ldrb	r3, [r3, #0]
 800dda4:	74bb      	strb	r3, [r7, #18]
			Index++;
 800dda6:	697b      	ldr	r3, [r7, #20]
 800dda8:	3301      	adds	r3, #1
 800ddaa:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800ddac:	2300      	movs	r3, #0
 800ddae:	61bb      	str	r3, [r7, #24]
 800ddb0:	e00f      	b.n	800ddd2 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800ddb2:	697b      	ldr	r3, [r7, #20]
 800ddb4:	683a      	ldr	r2, [r7, #0]
 800ddb6:	4413      	add	r3, r2
 800ddb8:	7819      	ldrb	r1, [r3, #0]
 800ddba:	f107 0208 	add.w	r2, r7, #8
 800ddbe:	69bb      	ldr	r3, [r7, #24]
 800ddc0:	4413      	add	r3, r2
 800ddc2:	460a      	mov	r2, r1
 800ddc4:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800ddc6:	697b      	ldr	r3, [r7, #20]
 800ddc8:	3301      	adds	r3, #1
 800ddca:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800ddcc:	69bb      	ldr	r3, [r7, #24]
 800ddce:	3301      	adds	r3, #1
 800ddd0:	61bb      	str	r3, [r7, #24]
 800ddd2:	7cfb      	ldrb	r3, [r7, #19]
 800ddd4:	69ba      	ldr	r2, [r7, #24]
 800ddd6:	429a      	cmp	r2, r3
 800ddd8:	dbeb      	blt.n	800ddb2 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800ddda:	7cfb      	ldrb	r3, [r7, #19]
 800dddc:	f107 0208 	add.w	r2, r7, #8
 800dde0:	7cb9      	ldrb	r1, [r7, #18]
 800dde2:	6878      	ldr	r0, [r7, #4]
 800dde4:	f000 fdee 	bl	800e9c4 <VL53L0X_WriteMulti>
 800dde8:	4603      	mov	r3, r0
 800ddea:	77fb      	strb	r3, [r7, #31]
 800ddec:	e001      	b.n	800ddf2 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ddee:	23fc      	movs	r3, #252	; 0xfc
 800ddf0:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800ddf2:	697b      	ldr	r3, [r7, #20]
 800ddf4:	683a      	ldr	r2, [r7, #0]
 800ddf6:	4413      	add	r3, r2
 800ddf8:	781b      	ldrb	r3, [r3, #0]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d004      	beq.n	800de08 <VL53L0X_load_tuning_settings+0x1b8>
 800ddfe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800de02:	2b00      	cmp	r3, #0
 800de04:	f43f af2e 	beq.w	800dc64 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800de08:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800de0c:	4618      	mov	r0, r3
 800de0e:	3720      	adds	r7, #32
 800de10:	46bd      	mov	sp, r7
 800de12:	bd80      	pop	{r7, pc}

0800de14 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800de14:	b580      	push	{r7, lr}
 800de16:	b088      	sub	sp, #32
 800de18:	af00      	add	r7, sp, #0
 800de1a:	60f8      	str	r0, [r7, #12]
 800de1c:	60b9      	str	r1, [r7, #8]
 800de1e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800de20:	2300      	movs	r3, #0
 800de22:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	2200      	movs	r2, #0
 800de28:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800de2a:	f107 0313 	add.w	r3, r7, #19
 800de2e:	4619      	mov	r1, r3
 800de30:	68f8      	ldr	r0, [r7, #12]
 800de32:	f7fc fc9d 	bl	800a770 <VL53L0X_GetXTalkCompensationEnable>
 800de36:	4603      	mov	r3, r0
 800de38:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800de3a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d111      	bne.n	800de66 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800de42:	7cfb      	ldrb	r3, [r7, #19]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d00e      	beq.n	800de66 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	6a1b      	ldr	r3, [r3, #32]
 800de4c:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800de4e:	68bb      	ldr	r3, [r7, #8]
 800de50:	8a9b      	ldrh	r3, [r3, #20]
 800de52:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800de54:	69bb      	ldr	r3, [r7, #24]
 800de56:	fb02 f303 	mul.w	r3, r2, r3
 800de5a:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800de5c:	697b      	ldr	r3, [r7, #20]
 800de5e:	3380      	adds	r3, #128	; 0x80
 800de60:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800de66:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800de6a:	4618      	mov	r0, r3
 800de6c:	3720      	adds	r7, #32
 800de6e:	46bd      	mov	sp, r7
 800de70:	bd80      	pop	{r7, pc}

0800de72 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800de72:	b580      	push	{r7, lr}
 800de74:	b086      	sub	sp, #24
 800de76:	af00      	add	r7, sp, #0
 800de78:	60f8      	str	r0, [r7, #12]
 800de7a:	60b9      	str	r1, [r7, #8]
 800de7c:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800de7e:	2300      	movs	r3, #0
 800de80:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800de82:	68bb      	ldr	r3, [r7, #8]
 800de84:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800de8a:	f107 0310 	add.w	r3, r7, #16
 800de8e:	461a      	mov	r2, r3
 800de90:	68b9      	ldr	r1, [r7, #8]
 800de92:	68f8      	ldr	r0, [r7, #12]
 800de94:	f7ff ffbe 	bl	800de14 <VL53L0X_get_total_xtalk_rate>
 800de98:	4603      	mov	r3, r0
 800de9a:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800de9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d105      	bne.n	800deb0 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	681a      	ldr	r2, [r3, #0]
 800dea8:	693b      	ldr	r3, [r7, #16]
 800deaa:	441a      	add	r2, r3
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	601a      	str	r2, [r3, #0]

	return Status;
 800deb0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800deb4:	4618      	mov	r0, r3
 800deb6:	3718      	adds	r7, #24
 800deb8:	46bd      	mov	sp, r7
 800deba:	bd80      	pop	{r7, pc}

0800debc <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 800debc:	b580      	push	{r7, lr}
 800debe:	b09a      	sub	sp, #104	; 0x68
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	60f8      	str	r0, [r7, #12]
 800dec4:	60b9      	str	r1, [r7, #8]
 800dec6:	607a      	str	r2, [r7, #4]
 800dec8:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800deca:	2312      	movs	r3, #18
 800decc:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800dece:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ded2:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800ded4:	2342      	movs	r3, #66	; 0x42
 800ded6:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800ded8:	2306      	movs	r3, #6
 800deda:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 800dedc:	2307      	movs	r3, #7
 800dede:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800dee0:	2300      	movs	r3, #0
 800dee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 800deec:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800def4:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800def6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800def8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800defa:	fb02 f303 	mul.w	r3, r2, r3
 800defe:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800df00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df02:	3380      	adds	r3, #128	; 0x80
 800df04:	0a1b      	lsrs	r3, r3, #8
 800df06:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800df08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df0a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800df0c:	fb02 f303 	mul.w	r3, r2, r3
 800df10:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 800df12:	2300      	movs	r3, #0
 800df14:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d01a      	beq.n	800df52 <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800df1c:	68bb      	ldr	r3, [r7, #8]
 800df1e:	029b      	lsls	r3, r3, #10
 800df20:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800df26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df28:	4413      	add	r3, r2
 800df2a:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800df2c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	fbb2 f3f3 	udiv	r3, r2, r3
 800df34:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800df36:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800df38:	4613      	mov	r3, r2
 800df3a:	005b      	lsls	r3, r3, #1
 800df3c:	4413      	add	r3, r2
 800df3e:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800df40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800df42:	fb03 f303 	mul.w	r3, r3, r3
 800df46:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800df48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800df4a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800df4e:	0c1b      	lsrs	r3, r3, #16
 800df50:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800df52:	683b      	ldr	r3, [r7, #0]
 800df54:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800df56:	fb02 f303 	mul.w	r3, r2, r3
 800df5a:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800df5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df5e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800df62:	0c1b      	lsrs	r3, r3, #16
 800df64:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800df66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df68:	fb03 f303 	mul.w	r3, r3, r3
 800df6c:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800df6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800df70:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800df74:	0c1b      	lsrs	r3, r3, #16
 800df76:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800df78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800df7a:	085a      	lsrs	r2, r3, #1
 800df7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df7e:	441a      	add	r2, r3
 800df80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800df82:	fbb2 f3f3 	udiv	r3, r2, r3
 800df86:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800df88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800df8c:	fb02 f303 	mul.w	r3, r2, r3
 800df90:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800df92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800df98:	d302      	bcc.n	800dfa0 <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 800df9a:	4b54      	ldr	r3, [pc, #336]	; (800e0ec <VL53L0X_calc_dmax+0x230>)
 800df9c:	663b      	str	r3, [r7, #96]	; 0x60
 800df9e:	e015      	b.n	800dfcc <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800dfa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dfa2:	085a      	lsrs	r2, r3, #1
 800dfa4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dfa6:	441a      	add	r2, r3
 800dfa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dfaa:	fbb2 f3f3 	udiv	r3, r2, r3
 800dfae:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800dfb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dfb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dfb4:	fb02 f303 	mul.w	r3, r2, r3
 800dfb8:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800dfba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dfbc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800dfc0:	0c1b      	lsrs	r3, r3, #16
 800dfc2:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800dfc4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dfc6:	fb03 f303 	mul.w	r3, r3, r3
 800dfca:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800dfcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dfce:	039b      	lsls	r3, r3, #14
 800dfd0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800dfd4:	4a46      	ldr	r2, [pc, #280]	; (800e0f0 <VL53L0X_calc_dmax+0x234>)
 800dfd6:	fba2 2303 	umull	r2, r3, r2, r3
 800dfda:	099b      	lsrs	r3, r3, #6
 800dfdc:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800dfde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfe0:	fb03 f303 	mul.w	r3, r3, r3
 800dfe4:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800dfe6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dfe8:	fb03 f303 	mul.w	r3, r3, r3
 800dfec:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800dfee:	6a3b      	ldr	r3, [r7, #32]
 800dff0:	3308      	adds	r3, #8
 800dff2:	091b      	lsrs	r3, r3, #4
 800dff4:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800dff6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dff8:	6a3b      	ldr	r3, [r7, #32]
 800dffa:	1ad3      	subs	r3, r2, r3
 800dffc:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800dffe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e000:	4613      	mov	r3, r2
 800e002:	005b      	lsls	r3, r3, #1
 800e004:	4413      	add	r3, r2
 800e006:	011b      	lsls	r3, r3, #4
 800e008:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800e00a:	69fb      	ldr	r3, [r7, #28]
 800e00c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800e010:	0b9b      	lsrs	r3, r3, #14
 800e012:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800e014:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e016:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e018:	4413      	add	r3, r2
 800e01a:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800e01c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e01e:	085b      	lsrs	r3, r3, #1
 800e020:	69ba      	ldr	r2, [r7, #24]
 800e022:	4413      	add	r3, r2
 800e024:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800e026:	69ba      	ldr	r2, [r7, #24]
 800e028:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e02a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e02e:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800e030:	69bb      	ldr	r3, [r7, #24]
 800e032:	039b      	lsls	r3, r3, #14
 800e034:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800e036:	69fb      	ldr	r3, [r7, #28]
 800e038:	085b      	lsrs	r3, r3, #1
 800e03a:	69ba      	ldr	r2, [r7, #24]
 800e03c:	4413      	add	r3, r2
 800e03e:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800e040:	69ba      	ldr	r2, [r7, #24]
 800e042:	69fb      	ldr	r3, [r7, #28]
 800e044:	fbb2 f3f3 	udiv	r3, r2, r3
 800e048:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800e04a:	69bb      	ldr	r3, [r7, #24]
 800e04c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e04e:	fb02 f303 	mul.w	r3, r2, r3
 800e052:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800e054:	69bb      	ldr	r3, [r7, #24]
 800e056:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800e05a:	4a25      	ldr	r2, [pc, #148]	; (800e0f0 <VL53L0X_calc_dmax+0x234>)
 800e05c:	fba2 2303 	umull	r2, r3, r2, r3
 800e060:	099b      	lsrs	r3, r3, #6
 800e062:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800e064:	69bb      	ldr	r3, [r7, #24]
 800e066:	011b      	lsls	r3, r3, #4
 800e068:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800e06a:	69bb      	ldr	r3, [r7, #24]
 800e06c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800e070:	4a1f      	ldr	r2, [pc, #124]	; (800e0f0 <VL53L0X_calc_dmax+0x234>)
 800e072:	fba2 2303 	umull	r2, r3, r2, r3
 800e076:	099b      	lsrs	r3, r3, #6
 800e078:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800e07a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e07c:	3380      	adds	r3, #128	; 0x80
 800e07e:	0a1b      	lsrs	r3, r3, #8
 800e080:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800e082:	697b      	ldr	r3, [r7, #20]
 800e084:	2b00      	cmp	r3, #0
 800e086:	d008      	beq.n	800e09a <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800e088:	697b      	ldr	r3, [r7, #20]
 800e08a:	085a      	lsrs	r2, r3, #1
 800e08c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e08e:	441a      	add	r2, r3
 800e090:	697b      	ldr	r3, [r7, #20]
 800e092:	fbb2 f3f3 	udiv	r3, r2, r3
 800e096:	65bb      	str	r3, [r7, #88]	; 0x58
 800e098:	e001      	b.n	800e09e <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800e09a:	2300      	movs	r3, #0
 800e09c:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800e09e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800e0a0:	f7fe f9b9 	bl	800c416 <VL53L0X_isqrt>
 800e0a4:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800e0a6:	69bb      	ldr	r3, [r7, #24]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d008      	beq.n	800e0be <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800e0ac:	69bb      	ldr	r3, [r7, #24]
 800e0ae:	085a      	lsrs	r2, r3, #1
 800e0b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0b2:	441a      	add	r2, r3
 800e0b4:	69bb      	ldr	r3, [r7, #24]
 800e0b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800e0ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e0bc:	e001      	b.n	800e0c2 <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800e0be:	2300      	movs	r3, #0
 800e0c0:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800e0c2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800e0c4:	f7fe f9a7 	bl	800c416 <VL53L0X_isqrt>
 800e0c8:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 800e0ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e0cc:	693a      	ldr	r2, [r7, #16]
 800e0ce:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800e0d0:	693a      	ldr	r2, [r7, #16]
 800e0d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e0d4:	429a      	cmp	r2, r3
 800e0d6:	d902      	bls.n	800e0de <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 800e0d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e0da:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e0dc:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800e0de:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800e0e2:	4618      	mov	r0, r3
 800e0e4:	3768      	adds	r7, #104	; 0x68
 800e0e6:	46bd      	mov	sp, r7
 800e0e8:	bd80      	pop	{r7, pc}
 800e0ea:	bf00      	nop
 800e0ec:	fff00000 	.word	0xfff00000
 800e0f0:	10624dd3 	.word	0x10624dd3

0800e0f4 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800e0f4:	b580      	push	{r7, lr}
 800e0f6:	b0b4      	sub	sp, #208	; 0xd0
 800e0f8:	af04      	add	r7, sp, #16
 800e0fa:	60f8      	str	r0, [r7, #12]
 800e0fc:	60b9      	str	r1, [r7, #8]
 800e0fe:	607a      	str	r2, [r7, #4]
 800e100:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800e102:	f44f 7348 	mov.w	r3, #800	; 0x320
 800e106:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800e10a:	f44f 7316 	mov.w	r3, #600	; 0x258
 800e10e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800e112:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800e116:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800e11a:	f241 235c 	movw	r3, #4700	; 0x125c
 800e11e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800e122:	4b9e      	ldr	r3, [pc, #632]	; (800e39c <VL53L0X_calc_sigma_estimate+0x2a8>)
 800e124:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800e128:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800e12c:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800e12e:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800e132:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e136:	fbb2 f3f3 	udiv	r3, r2, r3
 800e13a:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800e13c:	4b98      	ldr	r3, [pc, #608]	; (800e3a0 <VL53L0X_calc_sigma_estimate+0x2ac>)
 800e13e:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800e140:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e144:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800e146:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800e14a:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 800e14c:	f240 6377 	movw	r3, #1655	; 0x677
 800e150:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e152:	2300      	movs	r3, #0
 800e154:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	6a1b      	ldr	r3, [r3, #32]
 800e15c:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800e15e:	68bb      	ldr	r3, [r7, #8]
 800e160:	691b      	ldr	r3, [r3, #16]
 800e162:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e166:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800e16a:	0c1b      	lsrs	r3, r3, #16
 800e16c:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 800e16e:	68bb      	ldr	r3, [r7, #8]
 800e170:	68db      	ldr	r3, [r3, #12]
 800e172:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 800e174:	f107 0310 	add.w	r3, r7, #16
 800e178:	461a      	mov	r2, r3
 800e17a:	68b9      	ldr	r1, [r7, #8]
 800e17c:	68f8      	ldr	r0, [r7, #12]
 800e17e:	f7ff fe78 	bl	800de72 <VL53L0X_get_total_signal_rate>
 800e182:	4603      	mov	r3, r0
 800e184:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800e188:	f107 0314 	add.w	r3, r7, #20
 800e18c:	461a      	mov	r2, r3
 800e18e:	68b9      	ldr	r1, [r7, #8]
 800e190:	68f8      	ldr	r0, [r7, #12]
 800e192:	f7ff fe3f 	bl	800de14 <VL53L0X_get_total_xtalk_rate>
 800e196:	4603      	mov	r3, r0
 800e198:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800e19c:	693b      	ldr	r3, [r7, #16]
 800e19e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e1a2:	fb02 f303 	mul.w	r3, r2, r3
 800e1a6:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800e1a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e1aa:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e1ae:	0c1b      	lsrs	r3, r3, #16
 800e1b0:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800e1b2:	697b      	ldr	r3, [r7, #20]
 800e1b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e1b8:	fb02 f303 	mul.w	r3, r2, r3
 800e1bc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800e1c0:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800e1c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e1c6:	429a      	cmp	r2, r3
 800e1c8:	d902      	bls.n	800e1d0 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800e1ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e1cc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800e1d0:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d168      	bne.n	800e2aa <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800e1de:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800e1e8:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800e1ec:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800e1f0:	461a      	mov	r2, r3
 800e1f2:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800e1f6:	68f8      	ldr	r0, [r7, #12]
 800e1f8:	f7fe feb2 	bl	800cf60 <VL53L0X_calc_timeout_mclks>
 800e1fc:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800e204:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800e20e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800e212:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800e216:	461a      	mov	r2, r3
 800e218:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800e21c:	68f8      	ldr	r0, [r7, #12]
 800e21e:	f7fe fe9f 	bl	800cf60 <VL53L0X_calc_timeout_mclks>
 800e222:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800e224:	2303      	movs	r3, #3
 800e226:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 800e22a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800e22e:	2b08      	cmp	r3, #8
 800e230:	d102      	bne.n	800e238 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 800e232:	2302      	movs	r3, #2
 800e234:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800e238:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e23a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e23c:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800e23e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800e242:	fb02 f303 	mul.w	r3, r2, r3
 800e246:	02db      	lsls	r3, r3, #11
 800e248:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800e24c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e250:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800e254:	4a53      	ldr	r2, [pc, #332]	; (800e3a4 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800e256:	fba2 2303 	umull	r2, r3, r2, r3
 800e25a:	099b      	lsrs	r3, r3, #6
 800e25c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 800e260:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e264:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e266:	fb02 f303 	mul.w	r3, r2, r3
 800e26a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800e26e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e272:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800e276:	4a4b      	ldr	r2, [pc, #300]	; (800e3a4 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800e278:	fba2 2303 	umull	r2, r3, r2, r3
 800e27c:	099b      	lsrs	r3, r3, #6
 800e27e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800e282:	693b      	ldr	r3, [r7, #16]
 800e284:	3380      	adds	r3, #128	; 0x80
 800e286:	0a1b      	lsrs	r3, r3, #8
 800e288:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800e28a:	693a      	ldr	r2, [r7, #16]
 800e28c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e290:	fb02 f303 	mul.w	r3, r2, r3
 800e294:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800e298:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800e29c:	3380      	adds	r3, #128	; 0x80
 800e29e:	0a1b      	lsrs	r3, r3, #8
 800e2a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800e2a4:	693b      	ldr	r3, [r7, #16]
 800e2a6:	021b      	lsls	r3, r3, #8
 800e2a8:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800e2aa:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d002      	beq.n	800e2b8 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 800e2b2:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800e2b6:	e15e      	b.n	800e576 <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 800e2b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d10c      	bne.n	800e2d8 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e2c4:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e2cc:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 800e2d0:	683b      	ldr	r3, [r7, #0]
 800e2d2:	2200      	movs	r2, #0
 800e2d4:	601a      	str	r2, [r3, #0]
 800e2d6:	e14c      	b.n	800e572 <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 800e2d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d102      	bne.n	800e2e6 <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 800e2e0:	2301      	movs	r3, #1
 800e2e2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800e2e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e2ea:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800e2ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e2ee:	041a      	lsls	r2, r3, #16
 800e2f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e2f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800e2f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800e2fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e2fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e300:	429a      	cmp	r2, r3
 800e302:	d902      	bls.n	800e30a <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800e304:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e306:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800e30a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e30e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800e312:	fb02 f303 	mul.w	r3, r2, r3
 800e316:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800e31a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800e31e:	4613      	mov	r3, r2
 800e320:	005b      	lsls	r3, r3, #1
 800e322:	4413      	add	r3, r2
 800e324:	009b      	lsls	r3, r3, #2
 800e326:	4618      	mov	r0, r3
 800e328:	f7fe f875 	bl	800c416 <VL53L0X_isqrt>
 800e32c:	4603      	mov	r3, r0
 800e32e:	005b      	lsls	r3, r3, #1
 800e330:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800e332:	68bb      	ldr	r3, [r7, #8]
 800e334:	891b      	ldrh	r3, [r3, #8]
 800e336:	461a      	mov	r2, r3
 800e338:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e33a:	fb02 f303 	mul.w	r3, r2, r3
 800e33e:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800e340:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e342:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800e344:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e348:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800e34a:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800e34c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800e350:	4a14      	ldr	r2, [pc, #80]	; (800e3a4 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800e352:	fba2 2303 	umull	r2, r3, r2, r3
 800e356:	099b      	lsrs	r3, r3, #6
 800e358:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800e35a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e35c:	041b      	lsls	r3, r3, #16
 800e35e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800e362:	4a10      	ldr	r2, [pc, #64]	; (800e3a4 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800e364:	fba2 2303 	umull	r2, r3, r2, r3
 800e368:	099b      	lsrs	r3, r3, #6
 800e36a:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800e36c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e36e:	021b      	lsls	r3, r3, #8
 800e370:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800e372:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e376:	fbb2 f3f3 	udiv	r3, r2, r3
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	bfb8      	it	lt
 800e37e:	425b      	neglt	r3, r3
 800e380:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800e382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e384:	021b      	lsls	r3, r3, #8
 800e386:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800e388:	68bb      	ldr	r3, [r7, #8]
 800e38a:	7e1b      	ldrb	r3, [r3, #24]
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d00b      	beq.n	800e3a8 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 800e390:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800e394:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e398:	e033      	b.n	800e402 <VL53L0X_calc_sigma_estimate+0x30e>
 800e39a:	bf00      	nop
 800e39c:	028f87ae 	.word	0x028f87ae
 800e3a0:	0006999a 	.word	0x0006999a
 800e3a4:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800e3a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e3aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e3ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800e3b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800e3b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3b8:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800e3bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e3c0:	fb02 f303 	mul.w	r3, r2, r3
 800e3c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800e3c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800e3cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e3ce:	4413      	add	r3, r2
 800e3d0:	0c1b      	lsrs	r3, r3, #16
 800e3d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800e3d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e3da:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800e3de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800e3e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e3e6:	085b      	lsrs	r3, r3, #1
 800e3e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800e3ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e3f0:	fb03 f303 	mul.w	r3, r3, r3
 800e3f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800e3f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e3fc:	0b9b      	lsrs	r3, r3, #14
 800e3fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800e402:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e406:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e408:	fb02 f303 	mul.w	r3, r2, r3
 800e40c:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800e40e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e410:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e414:	0c1b      	lsrs	r3, r3, #16
 800e416:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800e418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e41a:	fb03 f303 	mul.w	r3, r3, r3
 800e41e:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 800e420:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e424:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800e426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e428:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e42c:	0c1b      	lsrs	r3, r3, #16
 800e42e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800e430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e432:	fb03 f303 	mul.w	r3, r3, r3
 800e436:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800e438:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e43a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e43c:	4413      	add	r3, r2
 800e43e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800e440:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e442:	f7fd ffe8 	bl	800c416 <VL53L0X_isqrt>
 800e446:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800e448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e44a:	041b      	lsls	r3, r3, #16
 800e44c:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800e44e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e450:	3332      	adds	r3, #50	; 0x32
 800e452:	4a4b      	ldr	r2, [pc, #300]	; (800e580 <VL53L0X_calc_sigma_estimate+0x48c>)
 800e454:	fba2 2303 	umull	r2, r3, r2, r3
 800e458:	095a      	lsrs	r2, r3, #5
 800e45a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e45c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e460:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800e464:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e468:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800e46c:	fb02 f303 	mul.w	r3, r2, r3
 800e470:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800e474:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e478:	f241 3388 	movw	r3, #5000	; 0x1388
 800e47c:	4413      	add	r3, r2
 800e47e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 800e482:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e486:	4a3f      	ldr	r2, [pc, #252]	; (800e584 <VL53L0X_calc_sigma_estimate+0x490>)
 800e488:	fba2 2303 	umull	r2, r3, r2, r3
 800e48c:	0b5b      	lsrs	r3, r3, #13
 800e48e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800e492:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e496:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e498:	429a      	cmp	r2, r3
 800e49a:	d902      	bls.n	800e4a2 <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800e49c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e49e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800e4a2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800e4a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e4aa:	4413      	add	r3, r2
 800e4ac:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800e4b0:	4a35      	ldr	r2, [pc, #212]	; (800e588 <VL53L0X_calc_sigma_estimate+0x494>)
 800e4b2:	fba2 2303 	umull	r2, r3, r2, r3
 800e4b6:	099b      	lsrs	r3, r3, #6
 800e4b8:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800e4ba:	6a3b      	ldr	r3, [r7, #32]
 800e4bc:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800e4be:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e4c2:	441a      	add	r2, r3
 800e4c4:	6a3b      	ldr	r3, [r7, #32]
 800e4c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	f7fd ffa3 	bl	800c416 <VL53L0X_isqrt>
 800e4d0:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800e4d2:	69fb      	ldr	r3, [r7, #28]
 800e4d4:	021b      	lsls	r3, r3, #8
 800e4d6:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800e4d8:	69fb      	ldr	r3, [r7, #28]
 800e4da:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800e4de:	4a2a      	ldr	r2, [pc, #168]	; (800e588 <VL53L0X_calc_sigma_estimate+0x494>)
 800e4e0:	fba2 2303 	umull	r2, r3, r2, r3
 800e4e4:	099b      	lsrs	r3, r3, #6
 800e4e6:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800e4e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e4ec:	fb03 f303 	mul.w	r3, r3, r3
 800e4f0:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800e4f2:	69fb      	ldr	r3, [r7, #28]
 800e4f4:	fb03 f303 	mul.w	r3, r3, r3
 800e4f8:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800e4fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e4fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4fe:	4413      	add	r3, r2
 800e500:	4618      	mov	r0, r3
 800e502:	f7fd ff88 	bl	800c416 <VL53L0X_isqrt>
 800e506:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800e508:	69bb      	ldr	r3, [r7, #24]
 800e50a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e50e:	fb02 f303 	mul.w	r3, r2, r3
 800e512:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800e516:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d009      	beq.n	800e530 <VL53L0X_calc_sigma_estimate+0x43c>
 800e51c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800e520:	2b00      	cmp	r3, #0
 800e522:	d005      	beq.n	800e530 <VL53L0X_calc_sigma_estimate+0x43c>
 800e524:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800e528:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e52c:	429a      	cmp	r2, r3
 800e52e:	d903      	bls.n	800e538 <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800e530:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e534:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800e53e:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	681a      	ldr	r2, [r3, #0]
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 800e54a:	6939      	ldr	r1, [r7, #16]
 800e54c:	683b      	ldr	r3, [r7, #0]
 800e54e:	9303      	str	r3, [sp, #12]
 800e550:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e554:	9302      	str	r3, [sp, #8]
 800e556:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e55a:	9301      	str	r3, [sp, #4]
 800e55c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e55e:	9300      	str	r3, [sp, #0]
 800e560:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e564:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e566:	68f8      	ldr	r0, [r7, #12]
 800e568:	f7ff fca8 	bl	800debc <VL53L0X_calc_dmax>
 800e56c:	4603      	mov	r3, r0
 800e56e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800e572:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 800e576:	4618      	mov	r0, r3
 800e578:	37c0      	adds	r7, #192	; 0xc0
 800e57a:	46bd      	mov	sp, r7
 800e57c:	bd80      	pop	{r7, pc}
 800e57e:	bf00      	nop
 800e580:	51eb851f 	.word	0x51eb851f
 800e584:	d1b71759 	.word	0xd1b71759
 800e588:	10624dd3 	.word	0x10624dd3

0800e58c <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800e58c:	b580      	push	{r7, lr}
 800e58e:	b090      	sub	sp, #64	; 0x40
 800e590:	af00      	add	r7, sp, #0
 800e592:	60f8      	str	r0, [r7, #12]
 800e594:	607a      	str	r2, [r7, #4]
 800e596:	461a      	mov	r2, r3
 800e598:	460b      	mov	r3, r1
 800e59a:	72fb      	strb	r3, [r7, #11]
 800e59c:	4613      	mov	r3, r2
 800e59e:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e5a0:	2300      	movs	r3, #0
 800e5a2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800e5a6:	2300      	movs	r3, #0
 800e5a8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800e5ac:	2300      	movs	r3, #0
 800e5ae:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800e5b2:	2300      	movs	r3, #0
 800e5b4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800e5b8:	2300      	movs	r3, #0
 800e5ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800e5be:	2300      	movs	r3, #0
 800e5c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800e5c4:	2300      	movs	r3, #0
 800e5c6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800e5ca:	2300      	movs	r3, #0
 800e5cc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800e5d0:	2300      	movs	r3, #0
 800e5d2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800e5d6:	2300      	movs	r3, #0
 800e5d8:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800e5da:	2300      	movs	r3, #0
 800e5dc:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800e5de:	7afb      	ldrb	r3, [r7, #11]
 800e5e0:	10db      	asrs	r3, r3, #3
 800e5e2:	b2db      	uxtb	r3, r3
 800e5e4:	f003 030f 	and.w	r3, r3, #15
 800e5e8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800e5ec:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d017      	beq.n	800e624 <VL53L0X_get_pal_range_status+0x98>
 800e5f4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e5f8:	2b05      	cmp	r3, #5
 800e5fa:	d013      	beq.n	800e624 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800e5fc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e600:	2b07      	cmp	r3, #7
 800e602:	d00f      	beq.n	800e624 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800e604:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e608:	2b0c      	cmp	r3, #12
 800e60a:	d00b      	beq.n	800e624 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800e60c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e610:	2b0d      	cmp	r3, #13
 800e612:	d007      	beq.n	800e624 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800e614:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e618:	2b0e      	cmp	r3, #14
 800e61a:	d003      	beq.n	800e624 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800e61c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e620:	2b0f      	cmp	r3, #15
 800e622:	d103      	bne.n	800e62c <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800e624:	2301      	movs	r3, #1
 800e626:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800e62a:	e002      	b.n	800e632 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800e62c:	2300      	movs	r3, #0
 800e62e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800e632:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e636:	2b00      	cmp	r3, #0
 800e638:	d109      	bne.n	800e64e <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800e63a:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800e63e:	461a      	mov	r2, r3
 800e640:	2100      	movs	r1, #0
 800e642:	68f8      	ldr	r0, [r7, #12]
 800e644:	f7fc f980 	bl	800a948 <VL53L0X_GetLimitCheckEnable>
 800e648:	4603      	mov	r3, r0
 800e64a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800e64e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e652:	2b00      	cmp	r3, #0
 800e654:	d02e      	beq.n	800e6b4 <VL53L0X_get_pal_range_status+0x128>
 800e656:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d12a      	bne.n	800e6b4 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800e65e:	f107 0310 	add.w	r3, r7, #16
 800e662:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800e666:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e668:	68f8      	ldr	r0, [r7, #12]
 800e66a:	f7ff fd43 	bl	800e0f4 <VL53L0X_calc_sigma_estimate>
 800e66e:	4603      	mov	r3, r0
 800e670:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800e674:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d103      	bne.n	800e684 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800e67c:	693b      	ldr	r3, [r7, #16]
 800e67e:	b29a      	uxth	r2, r3
 800e680:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e682:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800e684:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d113      	bne.n	800e6b4 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800e68c:	f107 0320 	add.w	r3, r7, #32
 800e690:	461a      	mov	r2, r3
 800e692:	2100      	movs	r1, #0
 800e694:	68f8      	ldr	r0, [r7, #12]
 800e696:	f7fc f9dd 	bl	800aa54 <VL53L0X_GetLimitCheckValue>
 800e69a:	4603      	mov	r3, r0
 800e69c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800e6a0:	6a3b      	ldr	r3, [r7, #32]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d006      	beq.n	800e6b4 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800e6a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e6a8:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800e6aa:	429a      	cmp	r2, r3
 800e6ac:	d902      	bls.n	800e6b4 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800e6ae:	2301      	movs	r3, #1
 800e6b0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800e6b4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d109      	bne.n	800e6d0 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800e6bc:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800e6c0:	461a      	mov	r2, r3
 800e6c2:	2102      	movs	r1, #2
 800e6c4:	68f8      	ldr	r0, [r7, #12]
 800e6c6:	f7fc f93f 	bl	800a948 <VL53L0X_GetLimitCheckEnable>
 800e6ca:	4603      	mov	r3, r0
 800e6cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800e6d0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d044      	beq.n	800e762 <VL53L0X_get_pal_range_status+0x1d6>
 800e6d8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d140      	bne.n	800e762 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800e6e0:	f107 031c 	add.w	r3, r7, #28
 800e6e4:	461a      	mov	r2, r3
 800e6e6:	2102      	movs	r1, #2
 800e6e8:	68f8      	ldr	r0, [r7, #12]
 800e6ea:	f7fc f9b3 	bl	800aa54 <VL53L0X_GetLimitCheckValue>
 800e6ee:	4603      	mov	r3, r0
 800e6f0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800e6f4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d107      	bne.n	800e70c <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800e6fc:	2201      	movs	r2, #1
 800e6fe:	21ff      	movs	r1, #255	; 0xff
 800e700:	68f8      	ldr	r0, [r7, #12]
 800e702:	f000 f9bb 	bl	800ea7c <VL53L0X_WrByte>
 800e706:	4603      	mov	r3, r0
 800e708:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800e70c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e710:	2b00      	cmp	r3, #0
 800e712:	d109      	bne.n	800e728 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 800e714:	f107 0316 	add.w	r3, r7, #22
 800e718:	461a      	mov	r2, r3
 800e71a:	21b6      	movs	r1, #182	; 0xb6
 800e71c:	68f8      	ldr	r0, [r7, #12]
 800e71e:	f000 fa59 	bl	800ebd4 <VL53L0X_RdWord>
 800e722:	4603      	mov	r3, r0
 800e724:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800e728:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d107      	bne.n	800e740 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800e730:	2200      	movs	r2, #0
 800e732:	21ff      	movs	r1, #255	; 0xff
 800e734:	68f8      	ldr	r0, [r7, #12]
 800e736:	f000 f9a1 	bl	800ea7c <VL53L0X_WrByte>
 800e73a:	4603      	mov	r3, r0
 800e73c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800e740:	8afb      	ldrh	r3, [r7, #22]
 800e742:	025b      	lsls	r3, r3, #9
 800e744:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e74a:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 800e74e:	69fb      	ldr	r3, [r7, #28]
 800e750:	2b00      	cmp	r3, #0
 800e752:	d006      	beq.n	800e762 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800e754:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800e756:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e758:	429a      	cmp	r2, r3
 800e75a:	d902      	bls.n	800e762 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800e75c:	2301      	movs	r3, #1
 800e75e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800e762:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e766:	2b00      	cmp	r3, #0
 800e768:	d109      	bne.n	800e77e <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800e76a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e76e:	461a      	mov	r2, r3
 800e770:	2103      	movs	r1, #3
 800e772:	68f8      	ldr	r0, [r7, #12]
 800e774:	f7fc f8e8 	bl	800a948 <VL53L0X_GetLimitCheckEnable>
 800e778:	4603      	mov	r3, r0
 800e77a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800e77e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e782:	2b00      	cmp	r3, #0
 800e784:	d023      	beq.n	800e7ce <VL53L0X_get_pal_range_status+0x242>
 800e786:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d11f      	bne.n	800e7ce <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800e78e:	893b      	ldrh	r3, [r7, #8]
 800e790:	2b00      	cmp	r3, #0
 800e792:	d102      	bne.n	800e79a <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800e794:	2300      	movs	r3, #0
 800e796:	637b      	str	r3, [r7, #52]	; 0x34
 800e798:	e005      	b.n	800e7a6 <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	021a      	lsls	r2, r3, #8
 800e79e:	893b      	ldrh	r3, [r7, #8]
 800e7a0:	fbb2 f3f3 	udiv	r3, r2, r3
 800e7a4:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800e7a6:	f107 0318 	add.w	r3, r7, #24
 800e7aa:	461a      	mov	r2, r3
 800e7ac:	2103      	movs	r1, #3
 800e7ae:	68f8      	ldr	r0, [r7, #12]
 800e7b0:	f7fc f950 	bl	800aa54 <VL53L0X_GetLimitCheckValue>
 800e7b4:	4603      	mov	r3, r0
 800e7b6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800e7ba:	69bb      	ldr	r3, [r7, #24]
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d006      	beq.n	800e7ce <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800e7c0:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800e7c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e7c4:	429a      	cmp	r2, r3
 800e7c6:	d202      	bcs.n	800e7ce <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800e7c8:	2301      	movs	r3, #1
 800e7ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800e7ce:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d14a      	bne.n	800e86c <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800e7d6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800e7da:	2b01      	cmp	r3, #1
 800e7dc:	d103      	bne.n	800e7e6 <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800e7de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e7e0:	22ff      	movs	r2, #255	; 0xff
 800e7e2:	701a      	strb	r2, [r3, #0]
 800e7e4:	e042      	b.n	800e86c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800e7e6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e7ea:	2b01      	cmp	r3, #1
 800e7ec:	d007      	beq.n	800e7fe <VL53L0X_get_pal_range_status+0x272>
 800e7ee:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e7f2:	2b02      	cmp	r3, #2
 800e7f4:	d003      	beq.n	800e7fe <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800e7f6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e7fa:	2b03      	cmp	r3, #3
 800e7fc:	d103      	bne.n	800e806 <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800e7fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e800:	2205      	movs	r2, #5
 800e802:	701a      	strb	r2, [r3, #0]
 800e804:	e032      	b.n	800e86c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800e806:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e80a:	2b06      	cmp	r3, #6
 800e80c:	d003      	beq.n	800e816 <VL53L0X_get_pal_range_status+0x28a>
 800e80e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e812:	2b09      	cmp	r3, #9
 800e814:	d103      	bne.n	800e81e <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800e816:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e818:	2204      	movs	r2, #4
 800e81a:	701a      	strb	r2, [r3, #0]
 800e81c:	e026      	b.n	800e86c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800e81e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e822:	2b08      	cmp	r3, #8
 800e824:	d007      	beq.n	800e836 <VL53L0X_get_pal_range_status+0x2aa>
 800e826:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e82a:	2b0a      	cmp	r3, #10
 800e82c:	d003      	beq.n	800e836 <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800e82e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800e832:	2b01      	cmp	r3, #1
 800e834:	d103      	bne.n	800e83e <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800e836:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e838:	2203      	movs	r2, #3
 800e83a:	701a      	strb	r2, [r3, #0]
 800e83c:	e016      	b.n	800e86c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800e83e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e842:	2b04      	cmp	r3, #4
 800e844:	d003      	beq.n	800e84e <VL53L0X_get_pal_range_status+0x2c2>
 800e846:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800e84a:	2b01      	cmp	r3, #1
 800e84c:	d103      	bne.n	800e856 <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800e84e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e850:	2202      	movs	r2, #2
 800e852:	701a      	strb	r2, [r3, #0]
 800e854:	e00a      	b.n	800e86c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800e856:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800e85a:	2b01      	cmp	r3, #1
 800e85c:	d103      	bne.n	800e866 <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800e85e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e860:	2201      	movs	r2, #1
 800e862:	701a      	strb	r2, [r3, #0]
 800e864:	e002      	b.n	800e86c <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800e866:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e868:	2200      	movs	r2, #0
 800e86a:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800e86c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e86e:	781b      	ldrb	r3, [r3, #0]
 800e870:	2b00      	cmp	r3, #0
 800e872:	d102      	bne.n	800e87a <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800e874:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e876:	2200      	movs	r2, #0
 800e878:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800e87a:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800e87e:	461a      	mov	r2, r3
 800e880:	2101      	movs	r1, #1
 800e882:	68f8      	ldr	r0, [r7, #12]
 800e884:	f7fc f860 	bl	800a948 <VL53L0X_GetLimitCheckEnable>
 800e888:	4603      	mov	r3, r0
 800e88a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800e88e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e892:	2b00      	cmp	r3, #0
 800e894:	d14f      	bne.n	800e936 <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800e896:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d003      	beq.n	800e8a6 <VL53L0X_get_pal_range_status+0x31a>
 800e89e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800e8a2:	2b01      	cmp	r3, #1
 800e8a4:	d103      	bne.n	800e8ae <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800e8a6:	2301      	movs	r3, #1
 800e8a8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e8ac:	e002      	b.n	800e8b4 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800e8ae:	2300      	movs	r3, #0
 800e8b0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800e8ba:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800e8be:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e8c2:	2b04      	cmp	r3, #4
 800e8c4:	d003      	beq.n	800e8ce <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800e8c6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d103      	bne.n	800e8d6 <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800e8ce:	2301      	movs	r3, #1
 800e8d0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e8d4:	e002      	b.n	800e8dc <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800e8d6:	2300      	movs	r3, #0
 800e8d8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800e8e2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800e8e6:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d003      	beq.n	800e8f6 <VL53L0X_get_pal_range_status+0x36a>
 800e8ee:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800e8f2:	2b01      	cmp	r3, #1
 800e8f4:	d103      	bne.n	800e8fe <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800e8f6:	2301      	movs	r3, #1
 800e8f8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e8fc:	e002      	b.n	800e904 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800e8fe:	2300      	movs	r3, #0
 800e900:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800e90a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800e90e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e912:	2b00      	cmp	r3, #0
 800e914:	d003      	beq.n	800e91e <VL53L0X_get_pal_range_status+0x392>
 800e916:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800e91a:	2b01      	cmp	r3, #1
 800e91c:	d103      	bne.n	800e926 <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800e91e:	2301      	movs	r3, #1
 800e920:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e924:	e002      	b.n	800e92c <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800e926:	2300      	movs	r3, #0
 800e928:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800e932:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800e936:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800e93a:	4618      	mov	r0, r3
 800e93c:	3740      	adds	r7, #64	; 0x40
 800e93e:	46bd      	mov	sp, r7
 800e940:	bd80      	pop	{r7, pc}

0800e942 <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800e942:	b580      	push	{r7, lr}
 800e944:	b088      	sub	sp, #32
 800e946:	af02      	add	r7, sp, #8
 800e948:	60f8      	str	r0, [r7, #12]
 800e94a:	60b9      	str	r1, [r7, #8]
 800e94c:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	330a      	adds	r3, #10
 800e952:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800e960:	b299      	uxth	r1, r3
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	b29a      	uxth	r2, r3
 800e966:	697b      	ldr	r3, [r7, #20]
 800e968:	9300      	str	r3, [sp, #0]
 800e96a:	4613      	mov	r3, r2
 800e96c:	68ba      	ldr	r2, [r7, #8]
 800e96e:	f7f6 fb35 	bl	8004fdc <HAL_I2C_Master_Transmit>
 800e972:	4603      	mov	r3, r0
 800e974:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800e976:	693b      	ldr	r3, [r7, #16]
}
 800e978:	4618      	mov	r0, r3
 800e97a:	3718      	adds	r7, #24
 800e97c:	46bd      	mov	sp, r7
 800e97e:	bd80      	pop	{r7, pc}

0800e980 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800e980:	b580      	push	{r7, lr}
 800e982:	b088      	sub	sp, #32
 800e984:	af02      	add	r7, sp, #8
 800e986:	60f8      	str	r0, [r7, #12]
 800e988:	60b9      	str	r1, [r7, #8]
 800e98a:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	330a      	adds	r3, #10
 800e990:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800e99e:	f043 0301 	orr.w	r3, r3, #1
 800e9a2:	b2db      	uxtb	r3, r3
 800e9a4:	b299      	uxth	r1, r3
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	b29a      	uxth	r2, r3
 800e9aa:	697b      	ldr	r3, [r7, #20]
 800e9ac:	9300      	str	r3, [sp, #0]
 800e9ae:	4613      	mov	r3, r2
 800e9b0:	68ba      	ldr	r2, [r7, #8]
 800e9b2:	f7f6 fc07 	bl	80051c4 <HAL_I2C_Master_Receive>
 800e9b6:	4603      	mov	r3, r0
 800e9b8:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800e9ba:	693b      	ldr	r3, [r7, #16]
}
 800e9bc:	4618      	mov	r0, r3
 800e9be:	3718      	adds	r7, #24
 800e9c0:	46bd      	mov	sp, r7
 800e9c2:	bd80      	pop	{r7, pc}

0800e9c4 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800e9c4:	b580      	push	{r7, lr}
 800e9c6:	b086      	sub	sp, #24
 800e9c8:	af00      	add	r7, sp, #0
 800e9ca:	60f8      	str	r0, [r7, #12]
 800e9cc:	607a      	str	r2, [r7, #4]
 800e9ce:	603b      	str	r3, [r7, #0]
 800e9d0:	460b      	mov	r3, r1
 800e9d2:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e9d4:	2300      	movs	r3, #0
 800e9d6:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800e9d8:	683b      	ldr	r3, [r7, #0]
 800e9da:	2b3f      	cmp	r3, #63	; 0x3f
 800e9dc:	d902      	bls.n	800e9e4 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800e9de:	f06f 0303 	mvn.w	r3, #3
 800e9e2:	e016      	b.n	800ea12 <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 800e9e4:	4a0d      	ldr	r2, [pc, #52]	; (800ea1c <VL53L0X_WriteMulti+0x58>)
 800e9e6:	7afb      	ldrb	r3, [r7, #11]
 800e9e8:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800e9ea:	683a      	ldr	r2, [r7, #0]
 800e9ec:	6879      	ldr	r1, [r7, #4]
 800e9ee:	480c      	ldr	r0, [pc, #48]	; (800ea20 <VL53L0X_WriteMulti+0x5c>)
 800e9f0:	f003 fda6 	bl	8012540 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800e9f4:	683b      	ldr	r3, [r7, #0]
 800e9f6:	3301      	adds	r3, #1
 800e9f8:	461a      	mov	r2, r3
 800e9fa:	4908      	ldr	r1, [pc, #32]	; (800ea1c <VL53L0X_WriteMulti+0x58>)
 800e9fc:	68f8      	ldr	r0, [r7, #12]
 800e9fe:	f7ff ffa0 	bl	800e942 <_I2CWrite>
 800ea02:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ea04:	693b      	ldr	r3, [r7, #16]
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d001      	beq.n	800ea0e <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ea0a:	23ec      	movs	r3, #236	; 0xec
 800ea0c:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800ea0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ea12:	4618      	mov	r0, r3
 800ea14:	3718      	adds	r7, #24
 800ea16:	46bd      	mov	sp, r7
 800ea18:	bd80      	pop	{r7, pc}
 800ea1a:	bf00      	nop
 800ea1c:	2000c568 	.word	0x2000c568
 800ea20:	2000c569 	.word	0x2000c569

0800ea24 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800ea24:	b580      	push	{r7, lr}
 800ea26:	b086      	sub	sp, #24
 800ea28:	af00      	add	r7, sp, #0
 800ea2a:	60f8      	str	r0, [r7, #12]
 800ea2c:	607a      	str	r2, [r7, #4]
 800ea2e:	603b      	str	r3, [r7, #0]
 800ea30:	460b      	mov	r3, r1
 800ea32:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ea34:	2300      	movs	r3, #0
 800ea36:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800ea38:	f107 030b 	add.w	r3, r7, #11
 800ea3c:	2201      	movs	r2, #1
 800ea3e:	4619      	mov	r1, r3
 800ea40:	68f8      	ldr	r0, [r7, #12]
 800ea42:	f7ff ff7e 	bl	800e942 <_I2CWrite>
 800ea46:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ea48:	693b      	ldr	r3, [r7, #16]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d002      	beq.n	800ea54 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ea4e:	23ec      	movs	r3, #236	; 0xec
 800ea50:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ea52:	e00c      	b.n	800ea6e <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800ea54:	683a      	ldr	r2, [r7, #0]
 800ea56:	6879      	ldr	r1, [r7, #4]
 800ea58:	68f8      	ldr	r0, [r7, #12]
 800ea5a:	f7ff ff91 	bl	800e980 <_I2CRead>
 800ea5e:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ea60:	693b      	ldr	r3, [r7, #16]
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d002      	beq.n	800ea6c <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ea66:	23ec      	movs	r3, #236	; 0xec
 800ea68:	75fb      	strb	r3, [r7, #23]
 800ea6a:	e000      	b.n	800ea6e <VL53L0X_ReadMulti+0x4a>
    }
done:
 800ea6c:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800ea6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ea72:	4618      	mov	r0, r3
 800ea74:	3718      	adds	r7, #24
 800ea76:	46bd      	mov	sp, r7
 800ea78:	bd80      	pop	{r7, pc}
	...

0800ea7c <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800ea7c:	b580      	push	{r7, lr}
 800ea7e:	b084      	sub	sp, #16
 800ea80:	af00      	add	r7, sp, #0
 800ea82:	6078      	str	r0, [r7, #4]
 800ea84:	460b      	mov	r3, r1
 800ea86:	70fb      	strb	r3, [r7, #3]
 800ea88:	4613      	mov	r3, r2
 800ea8a:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ea8c:	2300      	movs	r3, #0
 800ea8e:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800ea90:	4a0b      	ldr	r2, [pc, #44]	; (800eac0 <VL53L0X_WrByte+0x44>)
 800ea92:	78fb      	ldrb	r3, [r7, #3]
 800ea94:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800ea96:	4a0a      	ldr	r2, [pc, #40]	; (800eac0 <VL53L0X_WrByte+0x44>)
 800ea98:	78bb      	ldrb	r3, [r7, #2]
 800ea9a:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800ea9c:	2202      	movs	r2, #2
 800ea9e:	4908      	ldr	r1, [pc, #32]	; (800eac0 <VL53L0X_WrByte+0x44>)
 800eaa0:	6878      	ldr	r0, [r7, #4]
 800eaa2:	f7ff ff4e 	bl	800e942 <_I2CWrite>
 800eaa6:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800eaa8:	68bb      	ldr	r3, [r7, #8]
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d001      	beq.n	800eab2 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800eaae:	23ec      	movs	r3, #236	; 0xec
 800eab0:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800eab2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800eab6:	4618      	mov	r0, r3
 800eab8:	3710      	adds	r7, #16
 800eaba:	46bd      	mov	sp, r7
 800eabc:	bd80      	pop	{r7, pc}
 800eabe:	bf00      	nop
 800eac0:	2000c568 	.word	0x2000c568

0800eac4 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800eac4:	b580      	push	{r7, lr}
 800eac6:	b084      	sub	sp, #16
 800eac8:	af00      	add	r7, sp, #0
 800eaca:	6078      	str	r0, [r7, #4]
 800eacc:	460b      	mov	r3, r1
 800eace:	70fb      	strb	r3, [r7, #3]
 800ead0:	4613      	mov	r3, r2
 800ead2:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ead4:	2300      	movs	r3, #0
 800ead6:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800ead8:	4a0e      	ldr	r2, [pc, #56]	; (800eb14 <VL53L0X_WrWord+0x50>)
 800eada:	78fb      	ldrb	r3, [r7, #3]
 800eadc:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800eade:	883b      	ldrh	r3, [r7, #0]
 800eae0:	0a1b      	lsrs	r3, r3, #8
 800eae2:	b29b      	uxth	r3, r3
 800eae4:	b2da      	uxtb	r2, r3
 800eae6:	4b0b      	ldr	r3, [pc, #44]	; (800eb14 <VL53L0X_WrWord+0x50>)
 800eae8:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800eaea:	883b      	ldrh	r3, [r7, #0]
 800eaec:	b2da      	uxtb	r2, r3
 800eaee:	4b09      	ldr	r3, [pc, #36]	; (800eb14 <VL53L0X_WrWord+0x50>)
 800eaf0:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800eaf2:	2203      	movs	r2, #3
 800eaf4:	4907      	ldr	r1, [pc, #28]	; (800eb14 <VL53L0X_WrWord+0x50>)
 800eaf6:	6878      	ldr	r0, [r7, #4]
 800eaf8:	f7ff ff23 	bl	800e942 <_I2CWrite>
 800eafc:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800eafe:	68bb      	ldr	r3, [r7, #8]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d001      	beq.n	800eb08 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800eb04:	23ec      	movs	r3, #236	; 0xec
 800eb06:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800eb08:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800eb0c:	4618      	mov	r0, r3
 800eb0e:	3710      	adds	r7, #16
 800eb10:	46bd      	mov	sp, r7
 800eb12:	bd80      	pop	{r7, pc}
 800eb14:	2000c568 	.word	0x2000c568

0800eb18 <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800eb18:	b580      	push	{r7, lr}
 800eb1a:	b084      	sub	sp, #16
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	6078      	str	r0, [r7, #4]
 800eb20:	4608      	mov	r0, r1
 800eb22:	4611      	mov	r1, r2
 800eb24:	461a      	mov	r2, r3
 800eb26:	4603      	mov	r3, r0
 800eb28:	70fb      	strb	r3, [r7, #3]
 800eb2a:	460b      	mov	r3, r1
 800eb2c:	70bb      	strb	r3, [r7, #2]
 800eb2e:	4613      	mov	r3, r2
 800eb30:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800eb32:	2300      	movs	r3, #0
 800eb34:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800eb36:	f107 020e 	add.w	r2, r7, #14
 800eb3a:	78fb      	ldrb	r3, [r7, #3]
 800eb3c:	4619      	mov	r1, r3
 800eb3e:	6878      	ldr	r0, [r7, #4]
 800eb40:	f000 f81e 	bl	800eb80 <VL53L0X_RdByte>
 800eb44:	4603      	mov	r3, r0
 800eb46:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 800eb48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d110      	bne.n	800eb72 <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 800eb50:	7bba      	ldrb	r2, [r7, #14]
 800eb52:	78bb      	ldrb	r3, [r7, #2]
 800eb54:	4013      	ands	r3, r2
 800eb56:	b2da      	uxtb	r2, r3
 800eb58:	787b      	ldrb	r3, [r7, #1]
 800eb5a:	4313      	orrs	r3, r2
 800eb5c:	b2db      	uxtb	r3, r3
 800eb5e:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800eb60:	7bba      	ldrb	r2, [r7, #14]
 800eb62:	78fb      	ldrb	r3, [r7, #3]
 800eb64:	4619      	mov	r1, r3
 800eb66:	6878      	ldr	r0, [r7, #4]
 800eb68:	f7ff ff88 	bl	800ea7c <VL53L0X_WrByte>
 800eb6c:	4603      	mov	r3, r0
 800eb6e:	73fb      	strb	r3, [r7, #15]
 800eb70:	e000      	b.n	800eb74 <VL53L0X_UpdateByte+0x5c>
        goto done;
 800eb72:	bf00      	nop
done:
    return Status;
 800eb74:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800eb78:	4618      	mov	r0, r3
 800eb7a:	3710      	adds	r7, #16
 800eb7c:	46bd      	mov	sp, r7
 800eb7e:	bd80      	pop	{r7, pc}

0800eb80 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800eb80:	b580      	push	{r7, lr}
 800eb82:	b086      	sub	sp, #24
 800eb84:	af00      	add	r7, sp, #0
 800eb86:	60f8      	str	r0, [r7, #12]
 800eb88:	460b      	mov	r3, r1
 800eb8a:	607a      	str	r2, [r7, #4]
 800eb8c:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800eb8e:	2300      	movs	r3, #0
 800eb90:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800eb92:	f107 030b 	add.w	r3, r7, #11
 800eb96:	2201      	movs	r2, #1
 800eb98:	4619      	mov	r1, r3
 800eb9a:	68f8      	ldr	r0, [r7, #12]
 800eb9c:	f7ff fed1 	bl	800e942 <_I2CWrite>
 800eba0:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800eba2:	693b      	ldr	r3, [r7, #16]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d002      	beq.n	800ebae <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800eba8:	23ec      	movs	r3, #236	; 0xec
 800ebaa:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ebac:	e00c      	b.n	800ebc8 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 800ebae:	2201      	movs	r2, #1
 800ebb0:	6879      	ldr	r1, [r7, #4]
 800ebb2:	68f8      	ldr	r0, [r7, #12]
 800ebb4:	f7ff fee4 	bl	800e980 <_I2CRead>
 800ebb8:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ebba:	693b      	ldr	r3, [r7, #16]
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d002      	beq.n	800ebc6 <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ebc0:	23ec      	movs	r3, #236	; 0xec
 800ebc2:	75fb      	strb	r3, [r7, #23]
 800ebc4:	e000      	b.n	800ebc8 <VL53L0X_RdByte+0x48>
    }
done:
 800ebc6:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800ebc8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ebcc:	4618      	mov	r0, r3
 800ebce:	3718      	adds	r7, #24
 800ebd0:	46bd      	mov	sp, r7
 800ebd2:	bd80      	pop	{r7, pc}

0800ebd4 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800ebd4:	b580      	push	{r7, lr}
 800ebd6:	b086      	sub	sp, #24
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	60f8      	str	r0, [r7, #12]
 800ebdc:	460b      	mov	r3, r1
 800ebde:	607a      	str	r2, [r7, #4]
 800ebe0:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ebe2:	2300      	movs	r3, #0
 800ebe4:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800ebe6:	f107 030b 	add.w	r3, r7, #11
 800ebea:	2201      	movs	r2, #1
 800ebec:	4619      	mov	r1, r3
 800ebee:	68f8      	ldr	r0, [r7, #12]
 800ebf0:	f7ff fea7 	bl	800e942 <_I2CWrite>
 800ebf4:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800ebf6:	693b      	ldr	r3, [r7, #16]
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d002      	beq.n	800ec02 <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ebfc:	23ec      	movs	r3, #236	; 0xec
 800ebfe:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ec00:	e017      	b.n	800ec32 <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800ec02:	2202      	movs	r2, #2
 800ec04:	490e      	ldr	r1, [pc, #56]	; (800ec40 <VL53L0X_RdWord+0x6c>)
 800ec06:	68f8      	ldr	r0, [r7, #12]
 800ec08:	f7ff feba 	bl	800e980 <_I2CRead>
 800ec0c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ec0e:	693b      	ldr	r3, [r7, #16]
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d002      	beq.n	800ec1a <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ec14:	23ec      	movs	r3, #236	; 0xec
 800ec16:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ec18:	e00b      	b.n	800ec32 <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800ec1a:	4b09      	ldr	r3, [pc, #36]	; (800ec40 <VL53L0X_RdWord+0x6c>)
 800ec1c:	781b      	ldrb	r3, [r3, #0]
 800ec1e:	b29b      	uxth	r3, r3
 800ec20:	021b      	lsls	r3, r3, #8
 800ec22:	b29a      	uxth	r2, r3
 800ec24:	4b06      	ldr	r3, [pc, #24]	; (800ec40 <VL53L0X_RdWord+0x6c>)
 800ec26:	785b      	ldrb	r3, [r3, #1]
 800ec28:	b29b      	uxth	r3, r3
 800ec2a:	4413      	add	r3, r2
 800ec2c:	b29a      	uxth	r2, r3
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 800ec32:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ec36:	4618      	mov	r0, r3
 800ec38:	3718      	adds	r7, #24
 800ec3a:	46bd      	mov	sp, r7
 800ec3c:	bd80      	pop	{r7, pc}
 800ec3e:	bf00      	nop
 800ec40:	2000c568 	.word	0x2000c568

0800ec44 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 800ec44:	b580      	push	{r7, lr}
 800ec46:	b086      	sub	sp, #24
 800ec48:	af00      	add	r7, sp, #0
 800ec4a:	60f8      	str	r0, [r7, #12]
 800ec4c:	460b      	mov	r3, r1
 800ec4e:	607a      	str	r2, [r7, #4]
 800ec50:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ec52:	2300      	movs	r3, #0
 800ec54:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800ec56:	f107 030b 	add.w	r3, r7, #11
 800ec5a:	2201      	movs	r2, #1
 800ec5c:	4619      	mov	r1, r3
 800ec5e:	68f8      	ldr	r0, [r7, #12]
 800ec60:	f7ff fe6f 	bl	800e942 <_I2CWrite>
 800ec64:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ec66:	693b      	ldr	r3, [r7, #16]
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d002      	beq.n	800ec72 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ec6c:	23ec      	movs	r3, #236	; 0xec
 800ec6e:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ec70:	e01b      	b.n	800ecaa <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800ec72:	2204      	movs	r2, #4
 800ec74:	4910      	ldr	r1, [pc, #64]	; (800ecb8 <VL53L0X_RdDWord+0x74>)
 800ec76:	68f8      	ldr	r0, [r7, #12]
 800ec78:	f7ff fe82 	bl	800e980 <_I2CRead>
 800ec7c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ec7e:	693b      	ldr	r3, [r7, #16]
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d002      	beq.n	800ec8a <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ec84:	23ec      	movs	r3, #236	; 0xec
 800ec86:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ec88:	e00f      	b.n	800ecaa <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800ec8a:	4b0b      	ldr	r3, [pc, #44]	; (800ecb8 <VL53L0X_RdDWord+0x74>)
 800ec8c:	781b      	ldrb	r3, [r3, #0]
 800ec8e:	061a      	lsls	r2, r3, #24
 800ec90:	4b09      	ldr	r3, [pc, #36]	; (800ecb8 <VL53L0X_RdDWord+0x74>)
 800ec92:	785b      	ldrb	r3, [r3, #1]
 800ec94:	041b      	lsls	r3, r3, #16
 800ec96:	441a      	add	r2, r3
 800ec98:	4b07      	ldr	r3, [pc, #28]	; (800ecb8 <VL53L0X_RdDWord+0x74>)
 800ec9a:	789b      	ldrb	r3, [r3, #2]
 800ec9c:	021b      	lsls	r3, r3, #8
 800ec9e:	4413      	add	r3, r2
 800eca0:	4a05      	ldr	r2, [pc, #20]	; (800ecb8 <VL53L0X_RdDWord+0x74>)
 800eca2:	78d2      	ldrb	r2, [r2, #3]
 800eca4:	441a      	add	r2, r3
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 800ecaa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ecae:	4618      	mov	r0, r3
 800ecb0:	3718      	adds	r7, #24
 800ecb2:	46bd      	mov	sp, r7
 800ecb4:	bd80      	pop	{r7, pc}
 800ecb6:	bf00      	nop
 800ecb8:	2000c568 	.word	0x2000c568

0800ecbc <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 800ecbc:	b580      	push	{r7, lr}
 800ecbe:	b084      	sub	sp, #16
 800ecc0:	af00      	add	r7, sp, #0
 800ecc2:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800ecc4:	2300      	movs	r3, #0
 800ecc6:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800ecc8:	2002      	movs	r0, #2
 800ecca:	f7f5 fc35 	bl	8004538 <HAL_Delay>
    return status;
 800ecce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ecd2:	4618      	mov	r0, r3
 800ecd4:	3710      	adds	r7, #16
 800ecd6:	46bd      	mov	sp, r7
 800ecd8:	bd80      	pop	{r7, pc}
	...

0800ecdc <fourline_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool fourline_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 800ecdc:	b580      	push	{r7, lr}
 800ecde:	b082      	sub	sp, #8
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	6078      	str	r0, [r7, #4]
 800ece4:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_fourline_activations_map, 1, params)) {
 800ece6:	683a      	ldr	r2, [r7, #0]
 800ece8:	2101      	movs	r1, #1
 800ecea:	4850      	ldr	r0, [pc, #320]	; (800ee2c <fourline_configure_activations+0x150>)
 800ecec:	f000 fbea 	bl	800f4c4 <ai_platform_get_activations_map>
 800ecf0:	4603      	mov	r3, r0
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	f000 8090 	beq.w	800ee18 <fourline_configure_activations+0x13c>
    /* Updating activations (byte) offsets */
    
    input_0_output_array.data = AI_PTR(g_fourline_activations_map[0] + 48);
 800ecf8:	4b4c      	ldr	r3, [pc, #304]	; (800ee2c <fourline_configure_activations+0x150>)
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	3330      	adds	r3, #48	; 0x30
 800ecfe:	4a4c      	ldr	r2, [pc, #304]	; (800ee30 <fourline_configure_activations+0x154>)
 800ed00:	6093      	str	r3, [r2, #8]
    input_0_output_array.data_start = AI_PTR(g_fourline_activations_map[0] + 48);
 800ed02:	4b4a      	ldr	r3, [pc, #296]	; (800ee2c <fourline_configure_activations+0x150>)
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	3330      	adds	r3, #48	; 0x30
 800ed08:	4a49      	ldr	r2, [pc, #292]	; (800ee30 <fourline_configure_activations+0x154>)
 800ed0a:	60d3      	str	r3, [r2, #12]
    
    conv2d_1_conv2d_output_array.data = AI_PTR(g_fourline_activations_map[0] + 256);
 800ed0c:	4b47      	ldr	r3, [pc, #284]	; (800ee2c <fourline_configure_activations+0x150>)
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800ed14:	4a47      	ldr	r2, [pc, #284]	; (800ee34 <fourline_configure_activations+0x158>)
 800ed16:	6093      	str	r3, [r2, #8]
    conv2d_1_conv2d_output_array.data_start = AI_PTR(g_fourline_activations_map[0] + 256);
 800ed18:	4b44      	ldr	r3, [pc, #272]	; (800ee2c <fourline_configure_activations+0x150>)
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800ed20:	4a44      	ldr	r2, [pc, #272]	; (800ee34 <fourline_configure_activations+0x158>)
 800ed22:	60d3      	str	r3, [r2, #12]
    
    conv2d_1_output_array.data = AI_PTR(g_fourline_activations_map[0] + 256);
 800ed24:	4b41      	ldr	r3, [pc, #260]	; (800ee2c <fourline_configure_activations+0x150>)
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800ed2c:	4a42      	ldr	r2, [pc, #264]	; (800ee38 <fourline_configure_activations+0x15c>)
 800ed2e:	6093      	str	r3, [r2, #8]
    conv2d_1_output_array.data_start = AI_PTR(g_fourline_activations_map[0] + 256);
 800ed30:	4b3e      	ldr	r3, [pc, #248]	; (800ee2c <fourline_configure_activations+0x150>)
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800ed38:	4a3f      	ldr	r2, [pc, #252]	; (800ee38 <fourline_configure_activations+0x15c>)
 800ed3a:	60d3      	str	r3, [r2, #12]
    
    dense_6_dense_output_array.data = AI_PTR(g_fourline_activations_map[0] + 0);
 800ed3c:	4b3b      	ldr	r3, [pc, #236]	; (800ee2c <fourline_configure_activations+0x150>)
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	4a3e      	ldr	r2, [pc, #248]	; (800ee3c <fourline_configure_activations+0x160>)
 800ed42:	6093      	str	r3, [r2, #8]
    dense_6_dense_output_array.data_start = AI_PTR(g_fourline_activations_map[0] + 0);
 800ed44:	4b39      	ldr	r3, [pc, #228]	; (800ee2c <fourline_configure_activations+0x150>)
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	4a3c      	ldr	r2, [pc, #240]	; (800ee3c <fourline_configure_activations+0x160>)
 800ed4a:	60d3      	str	r3, [r2, #12]
    
    dense_6_output_array.data = AI_PTR(g_fourline_activations_map[0] + 256);
 800ed4c:	4b37      	ldr	r3, [pc, #220]	; (800ee2c <fourline_configure_activations+0x150>)
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800ed54:	4a3a      	ldr	r2, [pc, #232]	; (800ee40 <fourline_configure_activations+0x164>)
 800ed56:	6093      	str	r3, [r2, #8]
    dense_6_output_array.data_start = AI_PTR(g_fourline_activations_map[0] + 256);
 800ed58:	4b34      	ldr	r3, [pc, #208]	; (800ee2c <fourline_configure_activations+0x150>)
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800ed60:	4a37      	ldr	r2, [pc, #220]	; (800ee40 <fourline_configure_activations+0x164>)
 800ed62:	60d3      	str	r3, [r2, #12]
    
    dense_7_dense_output_array.data = AI_PTR(g_fourline_activations_map[0] + 0);
 800ed64:	4b31      	ldr	r3, [pc, #196]	; (800ee2c <fourline_configure_activations+0x150>)
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	4a36      	ldr	r2, [pc, #216]	; (800ee44 <fourline_configure_activations+0x168>)
 800ed6a:	6093      	str	r3, [r2, #8]
    dense_7_dense_output_array.data_start = AI_PTR(g_fourline_activations_map[0] + 0);
 800ed6c:	4b2f      	ldr	r3, [pc, #188]	; (800ee2c <fourline_configure_activations+0x150>)
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	4a34      	ldr	r2, [pc, #208]	; (800ee44 <fourline_configure_activations+0x168>)
 800ed72:	60d3      	str	r3, [r2, #12]
    
    dense_7_output_array.data = AI_PTR(g_fourline_activations_map[0] + 256);
 800ed74:	4b2d      	ldr	r3, [pc, #180]	; (800ee2c <fourline_configure_activations+0x150>)
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800ed7c:	4a32      	ldr	r2, [pc, #200]	; (800ee48 <fourline_configure_activations+0x16c>)
 800ed7e:	6093      	str	r3, [r2, #8]
    dense_7_output_array.data_start = AI_PTR(g_fourline_activations_map[0] + 256);
 800ed80:	4b2a      	ldr	r3, [pc, #168]	; (800ee2c <fourline_configure_activations+0x150>)
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800ed88:	4a2f      	ldr	r2, [pc, #188]	; (800ee48 <fourline_configure_activations+0x16c>)
 800ed8a:	60d3      	str	r3, [r2, #12]
    
    dense_8_dense_output_array.data = AI_PTR(g_fourline_activations_map[0] + 0);
 800ed8c:	4b27      	ldr	r3, [pc, #156]	; (800ee2c <fourline_configure_activations+0x150>)
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	4a2e      	ldr	r2, [pc, #184]	; (800ee4c <fourline_configure_activations+0x170>)
 800ed92:	6093      	str	r3, [r2, #8]
    dense_8_dense_output_array.data_start = AI_PTR(g_fourline_activations_map[0] + 0);
 800ed94:	4b25      	ldr	r3, [pc, #148]	; (800ee2c <fourline_configure_activations+0x150>)
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	4a2c      	ldr	r2, [pc, #176]	; (800ee4c <fourline_configure_activations+0x170>)
 800ed9a:	60d3      	str	r3, [r2, #12]
    
    dense_8_output_array.data = AI_PTR(g_fourline_activations_map[0] + 256);
 800ed9c:	4b23      	ldr	r3, [pc, #140]	; (800ee2c <fourline_configure_activations+0x150>)
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800eda4:	4a2a      	ldr	r2, [pc, #168]	; (800ee50 <fourline_configure_activations+0x174>)
 800eda6:	6093      	str	r3, [r2, #8]
    dense_8_output_array.data_start = AI_PTR(g_fourline_activations_map[0] + 256);
 800eda8:	4b20      	ldr	r3, [pc, #128]	; (800ee2c <fourline_configure_activations+0x150>)
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800edb0:	4a27      	ldr	r2, [pc, #156]	; (800ee50 <fourline_configure_activations+0x174>)
 800edb2:	60d3      	str	r3, [r2, #12]
    
    dense_9_dense_output_array.data = AI_PTR(g_fourline_activations_map[0] + 0);
 800edb4:	4b1d      	ldr	r3, [pc, #116]	; (800ee2c <fourline_configure_activations+0x150>)
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	4a26      	ldr	r2, [pc, #152]	; (800ee54 <fourline_configure_activations+0x178>)
 800edba:	6093      	str	r3, [r2, #8]
    dense_9_dense_output_array.data_start = AI_PTR(g_fourline_activations_map[0] + 0);
 800edbc:	4b1b      	ldr	r3, [pc, #108]	; (800ee2c <fourline_configure_activations+0x150>)
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	4a24      	ldr	r2, [pc, #144]	; (800ee54 <fourline_configure_activations+0x178>)
 800edc2:	60d3      	str	r3, [r2, #12]
    
    dense_9_output_array.data = AI_PTR(g_fourline_activations_map[0] + 256);
 800edc4:	4b19      	ldr	r3, [pc, #100]	; (800ee2c <fourline_configure_activations+0x150>)
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800edcc:	4a22      	ldr	r2, [pc, #136]	; (800ee58 <fourline_configure_activations+0x17c>)
 800edce:	6093      	str	r3, [r2, #8]
    dense_9_output_array.data_start = AI_PTR(g_fourline_activations_map[0] + 256);
 800edd0:	4b16      	ldr	r3, [pc, #88]	; (800ee2c <fourline_configure_activations+0x150>)
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800edd8:	4a1f      	ldr	r2, [pc, #124]	; (800ee58 <fourline_configure_activations+0x17c>)
 800edda:	60d3      	str	r3, [r2, #12]
    
    dense_10_dense_output_array.data = AI_PTR(g_fourline_activations_map[0] + 0);
 800eddc:	4b13      	ldr	r3, [pc, #76]	; (800ee2c <fourline_configure_activations+0x150>)
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	4a1e      	ldr	r2, [pc, #120]	; (800ee5c <fourline_configure_activations+0x180>)
 800ede2:	6093      	str	r3, [r2, #8]
    dense_10_dense_output_array.data_start = AI_PTR(g_fourline_activations_map[0] + 0);
 800ede4:	4b11      	ldr	r3, [pc, #68]	; (800ee2c <fourline_configure_activations+0x150>)
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	4a1c      	ldr	r2, [pc, #112]	; (800ee5c <fourline_configure_activations+0x180>)
 800edea:	60d3      	str	r3, [r2, #12]
    
    dense_10_output_array.data = AI_PTR(g_fourline_activations_map[0] + 256);
 800edec:	4b0f      	ldr	r3, [pc, #60]	; (800ee2c <fourline_configure_activations+0x150>)
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800edf4:	4a1a      	ldr	r2, [pc, #104]	; (800ee60 <fourline_configure_activations+0x184>)
 800edf6:	6093      	str	r3, [r2, #8]
    dense_10_output_array.data_start = AI_PTR(g_fourline_activations_map[0] + 256);
 800edf8:	4b0c      	ldr	r3, [pc, #48]	; (800ee2c <fourline_configure_activations+0x150>)
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800ee00:	4a17      	ldr	r2, [pc, #92]	; (800ee60 <fourline_configure_activations+0x184>)
 800ee02:	60d3      	str	r3, [r2, #12]
    
    dense_11_dense_output_array.data = AI_PTR(g_fourline_activations_map[0] + 0);
 800ee04:	4b09      	ldr	r3, [pc, #36]	; (800ee2c <fourline_configure_activations+0x150>)
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	4a16      	ldr	r2, [pc, #88]	; (800ee64 <fourline_configure_activations+0x188>)
 800ee0a:	6093      	str	r3, [r2, #8]
    dense_11_dense_output_array.data_start = AI_PTR(g_fourline_activations_map[0] + 0);
 800ee0c:	4b07      	ldr	r3, [pc, #28]	; (800ee2c <fourline_configure_activations+0x150>)
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	4a14      	ldr	r2, [pc, #80]	; (800ee64 <fourline_configure_activations+0x188>)
 800ee12:	60d3      	str	r3, [r2, #12]
    
    return true;
 800ee14:	2301      	movs	r3, #1
 800ee16:	e005      	b.n	800ee24 <fourline_configure_activations+0x148>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 800ee18:	2213      	movs	r2, #19
 800ee1a:	2130      	movs	r1, #48	; 0x30
 800ee1c:	6878      	ldr	r0, [r7, #4]
 800ee1e:	f000 fccf 	bl	800f7c0 <ai_platform_network_set_error>
  return false;
 800ee22:	2300      	movs	r3, #0
}
 800ee24:	4618      	mov	r0, r3
 800ee26:	3708      	adds	r7, #8
 800ee28:	46bd      	mov	sp, r7
 800ee2a:	bd80      	pop	{r7, pc}
 800ee2c:	2000c5a8 	.word	0x2000c5a8
 800ee30:	2000069c 	.word	0x2000069c
 800ee34:	200006ac 	.word	0x200006ac
 800ee38:	200006bc 	.word	0x200006bc
 800ee3c:	200006cc 	.word	0x200006cc
 800ee40:	200006dc 	.word	0x200006dc
 800ee44:	200006ec 	.word	0x200006ec
 800ee48:	200006fc 	.word	0x200006fc
 800ee4c:	2000070c 	.word	0x2000070c
 800ee50:	2000071c 	.word	0x2000071c
 800ee54:	2000072c 	.word	0x2000072c
 800ee58:	2000073c 	.word	0x2000073c
 800ee5c:	2000074c 	.word	0x2000074c
 800ee60:	2000075c 	.word	0x2000075c
 800ee64:	2000076c 	.word	0x2000076c

0800ee68 <fourline_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool fourline_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 800ee68:	b580      	push	{r7, lr}
 800ee6a:	b082      	sub	sp, #8
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	6078      	str	r0, [r7, #4]
 800ee70:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_fourline_weights_map, 1, params)) {
 800ee72:	683a      	ldr	r2, [r7, #0]
 800ee74:	2101      	movs	r1, #1
 800ee76:	4884      	ldr	r0, [pc, #528]	; (800f088 <fourline_configure_weights+0x220>)
 800ee78:	f000 facc 	bl	800f414 <ai_platform_get_weights_map>
 800ee7c:	4603      	mov	r3, r0
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	f000 80f8 	beq.w	800f074 <fourline_configure_weights+0x20c>
    /* Updating weights (byte) offsets */
    
    conv2d_1_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 800ee84:	4b81      	ldr	r3, [pc, #516]	; (800f08c <fourline_configure_weights+0x224>)
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ee8c:	4a7f      	ldr	r2, [pc, #508]	; (800f08c <fourline_configure_weights+0x224>)
 800ee8e:	6013      	str	r3, [r2, #0]
    conv2d_1_conv2d_bias_array.data = AI_PTR(g_fourline_weights_map[0] + 0);
 800ee90:	4b7d      	ldr	r3, [pc, #500]	; (800f088 <fourline_configure_weights+0x220>)
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	4a7d      	ldr	r2, [pc, #500]	; (800f08c <fourline_configure_weights+0x224>)
 800ee96:	6093      	str	r3, [r2, #8]
    conv2d_1_conv2d_bias_array.data_start = AI_PTR(g_fourline_weights_map[0] + 0);
 800ee98:	4b7b      	ldr	r3, [pc, #492]	; (800f088 <fourline_configure_weights+0x220>)
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	4a7b      	ldr	r2, [pc, #492]	; (800f08c <fourline_configure_weights+0x224>)
 800ee9e:	60d3      	str	r3, [r2, #12]
    
    dense_6_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800eea0:	4b7b      	ldr	r3, [pc, #492]	; (800f090 <fourline_configure_weights+0x228>)
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800eea8:	4a79      	ldr	r2, [pc, #484]	; (800f090 <fourline_configure_weights+0x228>)
 800eeaa:	6013      	str	r3, [r2, #0]
    dense_6_dense_weights_array.data = AI_PTR(g_fourline_weights_map[0] + 64);
 800eeac:	4b76      	ldr	r3, [pc, #472]	; (800f088 <fourline_configure_weights+0x220>)
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	3340      	adds	r3, #64	; 0x40
 800eeb2:	4a77      	ldr	r2, [pc, #476]	; (800f090 <fourline_configure_weights+0x228>)
 800eeb4:	6093      	str	r3, [r2, #8]
    dense_6_dense_weights_array.data_start = AI_PTR(g_fourline_weights_map[0] + 64);
 800eeb6:	4b74      	ldr	r3, [pc, #464]	; (800f088 <fourline_configure_weights+0x220>)
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	3340      	adds	r3, #64	; 0x40
 800eebc:	4a74      	ldr	r2, [pc, #464]	; (800f090 <fourline_configure_weights+0x228>)
 800eebe:	60d3      	str	r3, [r2, #12]
    
    dense_6_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800eec0:	4b74      	ldr	r3, [pc, #464]	; (800f094 <fourline_configure_weights+0x22c>)
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800eec8:	4a72      	ldr	r2, [pc, #456]	; (800f094 <fourline_configure_weights+0x22c>)
 800eeca:	6013      	str	r3, [r2, #0]
    dense_6_dense_bias_array.data = AI_PTR(g_fourline_weights_map[0] + 213056);
 800eecc:	4b6e      	ldr	r3, [pc, #440]	; (800f088 <fourline_configure_weights+0x220>)
 800eece:	681a      	ldr	r2, [r3, #0]
 800eed0:	4b71      	ldr	r3, [pc, #452]	; (800f098 <fourline_configure_weights+0x230>)
 800eed2:	4413      	add	r3, r2
 800eed4:	4a6f      	ldr	r2, [pc, #444]	; (800f094 <fourline_configure_weights+0x22c>)
 800eed6:	6093      	str	r3, [r2, #8]
    dense_6_dense_bias_array.data_start = AI_PTR(g_fourline_weights_map[0] + 213056);
 800eed8:	4b6b      	ldr	r3, [pc, #428]	; (800f088 <fourline_configure_weights+0x220>)
 800eeda:	681a      	ldr	r2, [r3, #0]
 800eedc:	4b6e      	ldr	r3, [pc, #440]	; (800f098 <fourline_configure_weights+0x230>)
 800eede:	4413      	add	r3, r2
 800eee0:	4a6c      	ldr	r2, [pc, #432]	; (800f094 <fourline_configure_weights+0x22c>)
 800eee2:	60d3      	str	r3, [r2, #12]
    
    dense_7_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800eee4:	4b6d      	ldr	r3, [pc, #436]	; (800f09c <fourline_configure_weights+0x234>)
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800eeec:	4a6b      	ldr	r2, [pc, #428]	; (800f09c <fourline_configure_weights+0x234>)
 800eeee:	6013      	str	r3, [r2, #0]
    dense_7_dense_weights_array.data = AI_PTR(g_fourline_weights_map[0] + 213312);
 800eef0:	4b65      	ldr	r3, [pc, #404]	; (800f088 <fourline_configure_weights+0x220>)
 800eef2:	681a      	ldr	r2, [r3, #0]
 800eef4:	4b6a      	ldr	r3, [pc, #424]	; (800f0a0 <fourline_configure_weights+0x238>)
 800eef6:	4413      	add	r3, r2
 800eef8:	4a68      	ldr	r2, [pc, #416]	; (800f09c <fourline_configure_weights+0x234>)
 800eefa:	6093      	str	r3, [r2, #8]
    dense_7_dense_weights_array.data_start = AI_PTR(g_fourline_weights_map[0] + 213312);
 800eefc:	4b62      	ldr	r3, [pc, #392]	; (800f088 <fourline_configure_weights+0x220>)
 800eefe:	681a      	ldr	r2, [r3, #0]
 800ef00:	4b67      	ldr	r3, [pc, #412]	; (800f0a0 <fourline_configure_weights+0x238>)
 800ef02:	4413      	add	r3, r2
 800ef04:	4a65      	ldr	r2, [pc, #404]	; (800f09c <fourline_configure_weights+0x234>)
 800ef06:	60d3      	str	r3, [r2, #12]
    
    dense_7_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800ef08:	4b66      	ldr	r3, [pc, #408]	; (800f0a4 <fourline_configure_weights+0x23c>)
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ef10:	4a64      	ldr	r2, [pc, #400]	; (800f0a4 <fourline_configure_weights+0x23c>)
 800ef12:	6013      	str	r3, [r2, #0]
    dense_7_dense_bias_array.data = AI_PTR(g_fourline_weights_map[0] + 229696);
 800ef14:	4b5c      	ldr	r3, [pc, #368]	; (800f088 <fourline_configure_weights+0x220>)
 800ef16:	681a      	ldr	r2, [r3, #0]
 800ef18:	4b63      	ldr	r3, [pc, #396]	; (800f0a8 <fourline_configure_weights+0x240>)
 800ef1a:	4413      	add	r3, r2
 800ef1c:	4a61      	ldr	r2, [pc, #388]	; (800f0a4 <fourline_configure_weights+0x23c>)
 800ef1e:	6093      	str	r3, [r2, #8]
    dense_7_dense_bias_array.data_start = AI_PTR(g_fourline_weights_map[0] + 229696);
 800ef20:	4b59      	ldr	r3, [pc, #356]	; (800f088 <fourline_configure_weights+0x220>)
 800ef22:	681a      	ldr	r2, [r3, #0]
 800ef24:	4b60      	ldr	r3, [pc, #384]	; (800f0a8 <fourline_configure_weights+0x240>)
 800ef26:	4413      	add	r3, r2
 800ef28:	4a5e      	ldr	r2, [pc, #376]	; (800f0a4 <fourline_configure_weights+0x23c>)
 800ef2a:	60d3      	str	r3, [r2, #12]
    
    dense_8_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800ef2c:	4b5f      	ldr	r3, [pc, #380]	; (800f0ac <fourline_configure_weights+0x244>)
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ef34:	4a5d      	ldr	r2, [pc, #372]	; (800f0ac <fourline_configure_weights+0x244>)
 800ef36:	6013      	str	r3, [r2, #0]
    dense_8_dense_weights_array.data = AI_PTR(g_fourline_weights_map[0] + 229952);
 800ef38:	4b53      	ldr	r3, [pc, #332]	; (800f088 <fourline_configure_weights+0x220>)
 800ef3a:	681a      	ldr	r2, [r3, #0]
 800ef3c:	4b5c      	ldr	r3, [pc, #368]	; (800f0b0 <fourline_configure_weights+0x248>)
 800ef3e:	4413      	add	r3, r2
 800ef40:	4a5a      	ldr	r2, [pc, #360]	; (800f0ac <fourline_configure_weights+0x244>)
 800ef42:	6093      	str	r3, [r2, #8]
    dense_8_dense_weights_array.data_start = AI_PTR(g_fourline_weights_map[0] + 229952);
 800ef44:	4b50      	ldr	r3, [pc, #320]	; (800f088 <fourline_configure_weights+0x220>)
 800ef46:	681a      	ldr	r2, [r3, #0]
 800ef48:	4b59      	ldr	r3, [pc, #356]	; (800f0b0 <fourline_configure_weights+0x248>)
 800ef4a:	4413      	add	r3, r2
 800ef4c:	4a57      	ldr	r2, [pc, #348]	; (800f0ac <fourline_configure_weights+0x244>)
 800ef4e:	60d3      	str	r3, [r2, #12]
    
    dense_8_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800ef50:	4b58      	ldr	r3, [pc, #352]	; (800f0b4 <fourline_configure_weights+0x24c>)
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ef58:	4a56      	ldr	r2, [pc, #344]	; (800f0b4 <fourline_configure_weights+0x24c>)
 800ef5a:	6013      	str	r3, [r2, #0]
    dense_8_dense_bias_array.data = AI_PTR(g_fourline_weights_map[0] + 246336);
 800ef5c:	4b4a      	ldr	r3, [pc, #296]	; (800f088 <fourline_configure_weights+0x220>)
 800ef5e:	681a      	ldr	r2, [r3, #0]
 800ef60:	4b55      	ldr	r3, [pc, #340]	; (800f0b8 <fourline_configure_weights+0x250>)
 800ef62:	4413      	add	r3, r2
 800ef64:	4a53      	ldr	r2, [pc, #332]	; (800f0b4 <fourline_configure_weights+0x24c>)
 800ef66:	6093      	str	r3, [r2, #8]
    dense_8_dense_bias_array.data_start = AI_PTR(g_fourline_weights_map[0] + 246336);
 800ef68:	4b47      	ldr	r3, [pc, #284]	; (800f088 <fourline_configure_weights+0x220>)
 800ef6a:	681a      	ldr	r2, [r3, #0]
 800ef6c:	4b52      	ldr	r3, [pc, #328]	; (800f0b8 <fourline_configure_weights+0x250>)
 800ef6e:	4413      	add	r3, r2
 800ef70:	4a50      	ldr	r2, [pc, #320]	; (800f0b4 <fourline_configure_weights+0x24c>)
 800ef72:	60d3      	str	r3, [r2, #12]
    
    dense_9_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800ef74:	4b51      	ldr	r3, [pc, #324]	; (800f0bc <fourline_configure_weights+0x254>)
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ef7c:	4a4f      	ldr	r2, [pc, #316]	; (800f0bc <fourline_configure_weights+0x254>)
 800ef7e:	6013      	str	r3, [r2, #0]
    dense_9_dense_weights_array.data = AI_PTR(g_fourline_weights_map[0] + 246592);
 800ef80:	4b41      	ldr	r3, [pc, #260]	; (800f088 <fourline_configure_weights+0x220>)
 800ef82:	681a      	ldr	r2, [r3, #0]
 800ef84:	4b4e      	ldr	r3, [pc, #312]	; (800f0c0 <fourline_configure_weights+0x258>)
 800ef86:	4413      	add	r3, r2
 800ef88:	4a4c      	ldr	r2, [pc, #304]	; (800f0bc <fourline_configure_weights+0x254>)
 800ef8a:	6093      	str	r3, [r2, #8]
    dense_9_dense_weights_array.data_start = AI_PTR(g_fourline_weights_map[0] + 246592);
 800ef8c:	4b3e      	ldr	r3, [pc, #248]	; (800f088 <fourline_configure_weights+0x220>)
 800ef8e:	681a      	ldr	r2, [r3, #0]
 800ef90:	4b4b      	ldr	r3, [pc, #300]	; (800f0c0 <fourline_configure_weights+0x258>)
 800ef92:	4413      	add	r3, r2
 800ef94:	4a49      	ldr	r2, [pc, #292]	; (800f0bc <fourline_configure_weights+0x254>)
 800ef96:	60d3      	str	r3, [r2, #12]
    
    dense_9_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800ef98:	4b4a      	ldr	r3, [pc, #296]	; (800f0c4 <fourline_configure_weights+0x25c>)
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800efa0:	4a48      	ldr	r2, [pc, #288]	; (800f0c4 <fourline_configure_weights+0x25c>)
 800efa2:	6013      	str	r3, [r2, #0]
    dense_9_dense_bias_array.data = AI_PTR(g_fourline_weights_map[0] + 262976);
 800efa4:	4b38      	ldr	r3, [pc, #224]	; (800f088 <fourline_configure_weights+0x220>)
 800efa6:	681a      	ldr	r2, [r3, #0]
 800efa8:	4b47      	ldr	r3, [pc, #284]	; (800f0c8 <fourline_configure_weights+0x260>)
 800efaa:	4413      	add	r3, r2
 800efac:	4a45      	ldr	r2, [pc, #276]	; (800f0c4 <fourline_configure_weights+0x25c>)
 800efae:	6093      	str	r3, [r2, #8]
    dense_9_dense_bias_array.data_start = AI_PTR(g_fourline_weights_map[0] + 262976);
 800efb0:	4b35      	ldr	r3, [pc, #212]	; (800f088 <fourline_configure_weights+0x220>)
 800efb2:	681a      	ldr	r2, [r3, #0]
 800efb4:	4b44      	ldr	r3, [pc, #272]	; (800f0c8 <fourline_configure_weights+0x260>)
 800efb6:	4413      	add	r3, r2
 800efb8:	4a42      	ldr	r2, [pc, #264]	; (800f0c4 <fourline_configure_weights+0x25c>)
 800efba:	60d3      	str	r3, [r2, #12]
    
    dense_10_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800efbc:	4b43      	ldr	r3, [pc, #268]	; (800f0cc <fourline_configure_weights+0x264>)
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800efc4:	4a41      	ldr	r2, [pc, #260]	; (800f0cc <fourline_configure_weights+0x264>)
 800efc6:	6013      	str	r3, [r2, #0]
    dense_10_dense_weights_array.data = AI_PTR(g_fourline_weights_map[0] + 263232);
 800efc8:	4b2f      	ldr	r3, [pc, #188]	; (800f088 <fourline_configure_weights+0x220>)
 800efca:	681a      	ldr	r2, [r3, #0]
 800efcc:	4b40      	ldr	r3, [pc, #256]	; (800f0d0 <fourline_configure_weights+0x268>)
 800efce:	4413      	add	r3, r2
 800efd0:	4a3e      	ldr	r2, [pc, #248]	; (800f0cc <fourline_configure_weights+0x264>)
 800efd2:	6093      	str	r3, [r2, #8]
    dense_10_dense_weights_array.data_start = AI_PTR(g_fourline_weights_map[0] + 263232);
 800efd4:	4b2c      	ldr	r3, [pc, #176]	; (800f088 <fourline_configure_weights+0x220>)
 800efd6:	681a      	ldr	r2, [r3, #0]
 800efd8:	4b3d      	ldr	r3, [pc, #244]	; (800f0d0 <fourline_configure_weights+0x268>)
 800efda:	4413      	add	r3, r2
 800efdc:	4a3b      	ldr	r2, [pc, #236]	; (800f0cc <fourline_configure_weights+0x264>)
 800efde:	60d3      	str	r3, [r2, #12]
    
    dense_10_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800efe0:	4b3c      	ldr	r3, [pc, #240]	; (800f0d4 <fourline_configure_weights+0x26c>)
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800efe8:	4a3a      	ldr	r2, [pc, #232]	; (800f0d4 <fourline_configure_weights+0x26c>)
 800efea:	6013      	str	r3, [r2, #0]
    dense_10_dense_bias_array.data = AI_PTR(g_fourline_weights_map[0] + 279616);
 800efec:	4b26      	ldr	r3, [pc, #152]	; (800f088 <fourline_configure_weights+0x220>)
 800efee:	681a      	ldr	r2, [r3, #0]
 800eff0:	4b39      	ldr	r3, [pc, #228]	; (800f0d8 <fourline_configure_weights+0x270>)
 800eff2:	4413      	add	r3, r2
 800eff4:	4a37      	ldr	r2, [pc, #220]	; (800f0d4 <fourline_configure_weights+0x26c>)
 800eff6:	6093      	str	r3, [r2, #8]
    dense_10_dense_bias_array.data_start = AI_PTR(g_fourline_weights_map[0] + 279616);
 800eff8:	4b23      	ldr	r3, [pc, #140]	; (800f088 <fourline_configure_weights+0x220>)
 800effa:	681a      	ldr	r2, [r3, #0]
 800effc:	4b36      	ldr	r3, [pc, #216]	; (800f0d8 <fourline_configure_weights+0x270>)
 800effe:	4413      	add	r3, r2
 800f000:	4a34      	ldr	r2, [pc, #208]	; (800f0d4 <fourline_configure_weights+0x26c>)
 800f002:	60d3      	str	r3, [r2, #12]
    
    dense_11_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800f004:	4b35      	ldr	r3, [pc, #212]	; (800f0dc <fourline_configure_weights+0x274>)
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f00c:	4a33      	ldr	r2, [pc, #204]	; (800f0dc <fourline_configure_weights+0x274>)
 800f00e:	6013      	str	r3, [r2, #0]
    dense_11_dense_weights_array.data = AI_PTR(g_fourline_weights_map[0] + 279872);
 800f010:	4b1d      	ldr	r3, [pc, #116]	; (800f088 <fourline_configure_weights+0x220>)
 800f012:	681a      	ldr	r2, [r3, #0]
 800f014:	4b32      	ldr	r3, [pc, #200]	; (800f0e0 <fourline_configure_weights+0x278>)
 800f016:	4413      	add	r3, r2
 800f018:	4a30      	ldr	r2, [pc, #192]	; (800f0dc <fourline_configure_weights+0x274>)
 800f01a:	6093      	str	r3, [r2, #8]
    dense_11_dense_weights_array.data_start = AI_PTR(g_fourline_weights_map[0] + 279872);
 800f01c:	4b1a      	ldr	r3, [pc, #104]	; (800f088 <fourline_configure_weights+0x220>)
 800f01e:	681a      	ldr	r2, [r3, #0]
 800f020:	4b2f      	ldr	r3, [pc, #188]	; (800f0e0 <fourline_configure_weights+0x278>)
 800f022:	4413      	add	r3, r2
 800f024:	4a2d      	ldr	r2, [pc, #180]	; (800f0dc <fourline_configure_weights+0x274>)
 800f026:	60d3      	str	r3, [r2, #12]
    
    dense_11_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800f028:	4b2e      	ldr	r3, [pc, #184]	; (800f0e4 <fourline_configure_weights+0x27c>)
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f030:	4a2c      	ldr	r2, [pc, #176]	; (800f0e4 <fourline_configure_weights+0x27c>)
 800f032:	6013      	str	r3, [r2, #0]
    dense_11_dense_bias_array.data = AI_PTR(g_fourline_weights_map[0] + 280896);
 800f034:	4b14      	ldr	r3, [pc, #80]	; (800f088 <fourline_configure_weights+0x220>)
 800f036:	681a      	ldr	r2, [r3, #0]
 800f038:	4b2b      	ldr	r3, [pc, #172]	; (800f0e8 <fourline_configure_weights+0x280>)
 800f03a:	4413      	add	r3, r2
 800f03c:	4a29      	ldr	r2, [pc, #164]	; (800f0e4 <fourline_configure_weights+0x27c>)
 800f03e:	6093      	str	r3, [r2, #8]
    dense_11_dense_bias_array.data_start = AI_PTR(g_fourline_weights_map[0] + 280896);
 800f040:	4b11      	ldr	r3, [pc, #68]	; (800f088 <fourline_configure_weights+0x220>)
 800f042:	681a      	ldr	r2, [r3, #0]
 800f044:	4b28      	ldr	r3, [pc, #160]	; (800f0e8 <fourline_configure_weights+0x280>)
 800f046:	4413      	add	r3, r2
 800f048:	4a26      	ldr	r2, [pc, #152]	; (800f0e4 <fourline_configure_weights+0x27c>)
 800f04a:	60d3      	str	r3, [r2, #12]
    
    conv2d_1_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 800f04c:	4b27      	ldr	r3, [pc, #156]	; (800f0ec <fourline_configure_weights+0x284>)
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f054:	4a25      	ldr	r2, [pc, #148]	; (800f0ec <fourline_configure_weights+0x284>)
 800f056:	6013      	str	r3, [r2, #0]
    conv2d_1_conv2d_weights_array.data = AI_PTR(g_fourline_weights_map[0] + 280912);
 800f058:	4b0b      	ldr	r3, [pc, #44]	; (800f088 <fourline_configure_weights+0x220>)
 800f05a:	681a      	ldr	r2, [r3, #0]
 800f05c:	4b24      	ldr	r3, [pc, #144]	; (800f0f0 <fourline_configure_weights+0x288>)
 800f05e:	4413      	add	r3, r2
 800f060:	4a22      	ldr	r2, [pc, #136]	; (800f0ec <fourline_configure_weights+0x284>)
 800f062:	6093      	str	r3, [r2, #8]
    conv2d_1_conv2d_weights_array.data_start = AI_PTR(g_fourline_weights_map[0] + 280912);
 800f064:	4b08      	ldr	r3, [pc, #32]	; (800f088 <fourline_configure_weights+0x220>)
 800f066:	681a      	ldr	r2, [r3, #0]
 800f068:	4b21      	ldr	r3, [pc, #132]	; (800f0f0 <fourline_configure_weights+0x288>)
 800f06a:	4413      	add	r3, r2
 800f06c:	4a1f      	ldr	r2, [pc, #124]	; (800f0ec <fourline_configure_weights+0x284>)
 800f06e:	60d3      	str	r3, [r2, #12]
    
    return true;
 800f070:	2301      	movs	r3, #1
 800f072:	e005      	b.n	800f080 <fourline_configure_weights+0x218>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 800f074:	2212      	movs	r2, #18
 800f076:	2130      	movs	r1, #48	; 0x30
 800f078:	6878      	ldr	r0, [r7, #4]
 800f07a:	f000 fba1 	bl	800f7c0 <ai_platform_network_set_error>
  return false;
 800f07e:	2300      	movs	r3, #0
}
 800f080:	4618      	mov	r0, r3
 800f082:	3708      	adds	r7, #8
 800f084:	46bd      	mov	sp, r7
 800f086:	bd80      	pop	{r7, pc}
 800f088:	2000c5ac 	.word	0x2000c5ac
 800f08c:	200005cc 	.word	0x200005cc
 800f090:	200005dc 	.word	0x200005dc
 800f094:	200005ec 	.word	0x200005ec
 800f098:	00034040 	.word	0x00034040
 800f09c:	200005fc 	.word	0x200005fc
 800f0a0:	00034140 	.word	0x00034140
 800f0a4:	2000060c 	.word	0x2000060c
 800f0a8:	00038140 	.word	0x00038140
 800f0ac:	2000061c 	.word	0x2000061c
 800f0b0:	00038240 	.word	0x00038240
 800f0b4:	2000062c 	.word	0x2000062c
 800f0b8:	0003c240 	.word	0x0003c240
 800f0bc:	2000063c 	.word	0x2000063c
 800f0c0:	0003c340 	.word	0x0003c340
 800f0c4:	2000064c 	.word	0x2000064c
 800f0c8:	00040340 	.word	0x00040340
 800f0cc:	2000065c 	.word	0x2000065c
 800f0d0:	00040440 	.word	0x00040440
 800f0d4:	2000066c 	.word	0x2000066c
 800f0d8:	00044440 	.word	0x00044440
 800f0dc:	2000067c 	.word	0x2000067c
 800f0e0:	00044540 	.word	0x00044540
 800f0e4:	2000068c 	.word	0x2000068c
 800f0e8:	00044940 	.word	0x00044940
 800f0ec:	2000077c 	.word	0x2000077c
 800f0f0:	00044950 	.word	0x00044950

0800f0f4 <ai_fourline_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_fourline_get_error(ai_handle network)
{
 800f0f4:	b580      	push	{r7, lr}
 800f0f6:	b082      	sub	sp, #8
 800f0f8:	af00      	add	r7, sp, #0
 800f0fa:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 800f0fc:	6878      	ldr	r0, [r7, #4]
 800f0fe:	f000 fa53 	bl	800f5a8 <ai_platform_network_get_error>
 800f102:	4603      	mov	r3, r0
}
 800f104:	4618      	mov	r0, r3
 800f106:	3708      	adds	r7, #8
 800f108:	46bd      	mov	sp, r7
 800f10a:	bd80      	pop	{r7, pc}

0800f10c <ai_fourline_create>:

AI_API_ENTRY
ai_error ai_fourline_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800f10c:	b580      	push	{r7, lr}
 800f10e:	b084      	sub	sp, #16
 800f110:	af02      	add	r7, sp, #8
 800f112:	6078      	str	r0, [r7, #4]
 800f114:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800f116:	2300      	movs	r3, #0
 800f118:	9301      	str	r3, [sp, #4]
 800f11a:	2305      	movs	r3, #5
 800f11c:	9300      	str	r3, [sp, #0]
 800f11e:	2301      	movs	r3, #1
 800f120:	4a04      	ldr	r2, [pc, #16]	; (800f134 <ai_fourline_create+0x28>)
 800f122:	6839      	ldr	r1, [r7, #0]
 800f124:	6878      	ldr	r0, [r7, #4]
 800f126:	f000 fe65 	bl	800fdf4 <ai_platform_network_create>
 800f12a:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800f12c:	4618      	mov	r0, r3
 800f12e:	3708      	adds	r7, #8
 800f130:	46bd      	mov	sp, r7
 800f132:	bd80      	pop	{r7, pc}
 800f134:	200013b8 	.word	0x200013b8

0800f138 <ai_fourline_create_and_init>:

AI_API_ENTRY
ai_error ai_fourline_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 800f138:	b580      	push	{r7, lr}
 800f13a:	b096      	sub	sp, #88	; 0x58
 800f13c:	af00      	add	r7, sp, #0
 800f13e:	60f8      	str	r0, [r7, #12]
 800f140:	60b9      	str	r1, [r7, #8]
 800f142:	607a      	str	r2, [r7, #4]
    ai_error err;
    ai_network_params params;

    err = ai_fourline_create(network, AI_FOURLINE_DATA_CONFIG);
 800f144:	2100      	movs	r1, #0
 800f146:	68f8      	ldr	r0, [r7, #12]
 800f148:	f7ff ffe0 	bl	800f10c <ai_fourline_create>
 800f14c:	4603      	mov	r3, r0
 800f14e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (err.type != AI_ERROR_NONE)
 800f150:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800f154:	2b00      	cmp	r3, #0
 800f156:	d001      	beq.n	800f15c <ai_fourline_create_and_init+0x24>
        return err;
 800f158:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f15a:	e05d      	b.n	800f218 <ai_fourline_create_and_init+0xe0>
    if (ai_fourline_data_params_get(&params) != true) {
 800f15c:	f107 0314 	add.w	r3, r7, #20
 800f160:	4618      	mov	r0, r3
 800f162:	f000 f8dd 	bl	800f320 <ai_fourline_data_params_get>
 800f166:	4603      	mov	r3, r0
 800f168:	f083 0301 	eor.w	r3, r3, #1
 800f16c:	b2db      	uxtb	r3, r3
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d008      	beq.n	800f184 <ai_fourline_create_and_init+0x4c>
        err = ai_fourline_get_error(*network);
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	4618      	mov	r0, r3
 800f178:	f7ff ffbc 	bl	800f0f4 <ai_fourline_get_error>
 800f17c:	4603      	mov	r3, r0
 800f17e:	64fb      	str	r3, [r7, #76]	; 0x4c
        return err;
 800f180:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f182:	e049      	b.n	800f218 <ai_fourline_create_and_init+0xe0>
    }
#if defined(AI_FOURLINE_DATA_ACTIVATIONS_COUNT)
    if (activations) {
 800f184:	68bb      	ldr	r3, [r7, #8]
 800f186:	2b00      	cmp	r3, #0
 800f188:	d016      	beq.n	800f1b8 <ai_fourline_create_and_init+0x80>
        /* set the addresses of the activations buffers */
        for (int idx=0;idx<params.map_activations.size;idx++)
 800f18a:	2300      	movs	r3, #0
 800f18c:	657b      	str	r3, [r7, #84]	; 0x54
 800f18e:	e00e      	b.n	800f1ae <ai_fourline_create_and_init+0x76>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 800f190:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f192:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f194:	009b      	lsls	r3, r3, #2
 800f196:	68ba      	ldr	r2, [r7, #8]
 800f198:	4413      	add	r3, r2
 800f19a:	681a      	ldr	r2, [r3, #0]
 800f19c:	f107 0314 	add.w	r3, r7, #20
 800f1a0:	330c      	adds	r3, #12
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	f000 f922 	bl	800f3ec <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 800f1a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f1aa:	3301      	adds	r3, #1
 800f1ac:	657b      	str	r3, [r7, #84]	; 0x54
 800f1ae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f1b0:	461a      	mov	r2, r3
 800f1b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f1b4:	4293      	cmp	r3, r2
 800f1b6:	dbeb      	blt.n	800f190 <ai_fourline_create_and_init+0x58>
    }
#endif
#if defined(AI_FOURLINE_DATA_WEIGHTS_COUNT)
    if (weights) {
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d016      	beq.n	800f1ec <ai_fourline_create_and_init+0xb4>
        /* set the addresses of the weight buffers */
        for (int idx=0;idx<params.map_weights.size;idx++)
 800f1be:	2300      	movs	r3, #0
 800f1c0:	653b      	str	r3, [r7, #80]	; 0x50
 800f1c2:	e00e      	b.n	800f1e2 <ai_fourline_create_and_init+0xaa>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 800f1c4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f1c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f1c8:	009b      	lsls	r3, r3, #2
 800f1ca:	687a      	ldr	r2, [r7, #4]
 800f1cc:	4413      	add	r3, r2
 800f1ce:	681a      	ldr	r2, [r3, #0]
 800f1d0:	f107 0314 	add.w	r3, r7, #20
 800f1d4:	3304      	adds	r3, #4
 800f1d6:	4618      	mov	r0, r3
 800f1d8:	f000 f908 	bl	800f3ec <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 800f1dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f1de:	3301      	adds	r3, #1
 800f1e0:	653b      	str	r3, [r7, #80]	; 0x50
 800f1e2:	8b7b      	ldrh	r3, [r7, #26]
 800f1e4:	461a      	mov	r2, r3
 800f1e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f1e8:	4293      	cmp	r3, r2
 800f1ea:	dbeb      	blt.n	800f1c4 <ai_fourline_create_and_init+0x8c>
    }
#endif
    if (ai_fourline_init(*network, &params) != true) {
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	f107 0214 	add.w	r2, r7, #20
 800f1f4:	4611      	mov	r1, r2
 800f1f6:	4618      	mov	r0, r3
 800f1f8:	f000 f846 	bl	800f288 <ai_fourline_init>
 800f1fc:	4603      	mov	r3, r0
 800f1fe:	f083 0301 	eor.w	r3, r3, #1
 800f202:	b2db      	uxtb	r3, r3
 800f204:	2b00      	cmp	r3, #0
 800f206:	d006      	beq.n	800f216 <ai_fourline_create_and_init+0xde>
        err = ai_fourline_get_error(*network);
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	4618      	mov	r0, r3
 800f20e:	f7ff ff71 	bl	800f0f4 <ai_fourline_get_error>
 800f212:	4603      	mov	r3, r0
 800f214:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    return err;
 800f216:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800f218:	4618      	mov	r0, r3
 800f21a:	3758      	adds	r7, #88	; 0x58
 800f21c:	46bd      	mov	sp, r7
 800f21e:	bd80      	pop	{r7, pc}

0800f220 <ai_fourline_inputs_get>:

AI_API_ENTRY
ai_buffer* ai_fourline_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800f220:	b580      	push	{r7, lr}
 800f222:	b082      	sub	sp, #8
 800f224:	af00      	add	r7, sp, #0
 800f226:	6078      	str	r0, [r7, #4]
 800f228:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d104      	bne.n	800f23a <ai_fourline_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800f230:	4b06      	ldr	r3, [pc, #24]	; (800f24c <ai_fourline_inputs_get+0x2c>)
 800f232:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	4a06      	ldr	r2, [pc, #24]	; (800f250 <ai_fourline_inputs_get+0x30>)
 800f238:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 800f23a:	6839      	ldr	r1, [r7, #0]
 800f23c:	6878      	ldr	r0, [r7, #4]
 800f23e:	f000 fac5 	bl	800f7cc <ai_platform_inputs_get>
 800f242:	4603      	mov	r3, r0
}
 800f244:	4618      	mov	r0, r3
 800f246:	3708      	adds	r7, #8
 800f248:	46bd      	mov	sp, r7
 800f24a:	bd80      	pop	{r7, pc}
 800f24c:	200013b8 	.word	0x200013b8
 800f250:	a1c00100 	.word	0xa1c00100

0800f254 <ai_fourline_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_fourline_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800f254:	b580      	push	{r7, lr}
 800f256:	b082      	sub	sp, #8
 800f258:	af00      	add	r7, sp, #0
 800f25a:	6078      	str	r0, [r7, #4]
 800f25c:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	2b00      	cmp	r3, #0
 800f262:	d104      	bne.n	800f26e <ai_fourline_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800f264:	4b06      	ldr	r3, [pc, #24]	; (800f280 <ai_fourline_outputs_get+0x2c>)
 800f266:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	4a06      	ldr	r2, [pc, #24]	; (800f284 <ai_fourline_outputs_get+0x30>)
 800f26c:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 800f26e:	6839      	ldr	r1, [r7, #0]
 800f270:	6878      	ldr	r0, [r7, #4]
 800f272:	f000 fc37 	bl	800fae4 <ai_platform_outputs_get>
 800f276:	4603      	mov	r3, r0
}
 800f278:	4618      	mov	r0, r3
 800f27a:	3708      	adds	r7, #8
 800f27c:	46bd      	mov	sp, r7
 800f27e:	bd80      	pop	{r7, pc}
 800f280:	200013b8 	.word	0x200013b8
 800f284:	a1c00100 	.word	0xa1c00100

0800f288 <ai_fourline_init>:
}

AI_API_ENTRY
ai_bool ai_fourline_init(
  ai_handle network, const ai_network_params* params)
{
 800f288:	b580      	push	{r7, lr}
 800f28a:	b084      	sub	sp, #16
 800f28c:	af00      	add	r7, sp, #0
 800f28e:	6078      	str	r0, [r7, #4]
 800f290:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 800f292:	6839      	ldr	r1, [r7, #0]
 800f294:	6878      	ldr	r0, [r7, #4]
 800f296:	f000 ff87 	bl	80101a8 <ai_platform_network_init>
 800f29a:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d101      	bne.n	800f2a6 <ai_fourline_init+0x1e>
 800f2a2:	2300      	movs	r3, #0
 800f2a4:	e028      	b.n	800f2f8 <ai_fourline_init+0x70>

  ai_bool ok = true;
 800f2a6:	2301      	movs	r3, #1
 800f2a8:	72fb      	strb	r3, [r7, #11]
  ok &= fourline_configure_weights(net_ctx, params);
 800f2aa:	6839      	ldr	r1, [r7, #0]
 800f2ac:	68f8      	ldr	r0, [r7, #12]
 800f2ae:	f7ff fddb 	bl	800ee68 <fourline_configure_weights>
 800f2b2:	4603      	mov	r3, r0
 800f2b4:	461a      	mov	r2, r3
 800f2b6:	7afb      	ldrb	r3, [r7, #11]
 800f2b8:	4013      	ands	r3, r2
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	bf14      	ite	ne
 800f2be:	2301      	movne	r3, #1
 800f2c0:	2300      	moveq	r3, #0
 800f2c2:	72fb      	strb	r3, [r7, #11]
  ok &= fourline_configure_activations(net_ctx, params);
 800f2c4:	6839      	ldr	r1, [r7, #0]
 800f2c6:	68f8      	ldr	r0, [r7, #12]
 800f2c8:	f7ff fd08 	bl	800ecdc <fourline_configure_activations>
 800f2cc:	4603      	mov	r3, r0
 800f2ce:	461a      	mov	r2, r3
 800f2d0:	7afb      	ldrb	r3, [r7, #11]
 800f2d2:	4013      	ands	r3, r2
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	bf14      	ite	ne
 800f2d8:	2301      	movne	r3, #1
 800f2da:	2300      	moveq	r3, #0
 800f2dc:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 800f2de:	6878      	ldr	r0, [r7, #4]
 800f2e0:	f001 f8fe 	bl	80104e0 <ai_platform_network_post_init>
 800f2e4:	4603      	mov	r3, r0
 800f2e6:	461a      	mov	r2, r3
 800f2e8:	7afb      	ldrb	r3, [r7, #11]
 800f2ea:	4013      	ands	r3, r2
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	bf14      	ite	ne
 800f2f0:	2301      	movne	r3, #1
 800f2f2:	2300      	moveq	r3, #0
 800f2f4:	72fb      	strb	r3, [r7, #11]

  return ok;
 800f2f6:	7afb      	ldrb	r3, [r7, #11]
}
 800f2f8:	4618      	mov	r0, r3
 800f2fa:	3710      	adds	r7, #16
 800f2fc:	46bd      	mov	sp, r7
 800f2fe:	bd80      	pop	{r7, pc}

0800f300 <ai_fourline_run>:


AI_API_ENTRY
ai_i32 ai_fourline_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 800f300:	b580      	push	{r7, lr}
 800f302:	b084      	sub	sp, #16
 800f304:	af00      	add	r7, sp, #0
 800f306:	60f8      	str	r0, [r7, #12]
 800f308:	60b9      	str	r1, [r7, #8]
 800f30a:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 800f30c:	687a      	ldr	r2, [r7, #4]
 800f30e:	68b9      	ldr	r1, [r7, #8]
 800f310:	68f8      	ldr	r0, [r7, #12]
 800f312:	f001 fa0f 	bl	8010734 <ai_platform_network_process>
 800f316:	4603      	mov	r3, r0
}
 800f318:	4618      	mov	r0, r3
 800f31a:	3710      	adds	r7, #16
 800f31c:	46bd      	mov	sp, r7
 800f31e:	bd80      	pop	{r7, pc}

0800f320 <ai_fourline_data_params_get>:
 * @ingroup fourline_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_fourline_data_params_get(ai_network_params* params)
{
 800f320:	b580      	push	{r7, lr}
 800f322:	b086      	sub	sp, #24
 800f324:	af00      	add	r7, sp, #0
 800f326:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d101      	bne.n	800f332 <ai_fourline_data_params_get+0x12>
 800f32e:	2300      	movs	r3, #0
 800f330:	e016      	b.n	800f360 <ai_fourline_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 800f332:	4a0d      	ldr	r2, [pc, #52]	; (800f368 <ai_fourline_data_params_get+0x48>)
 800f334:	f107 0310 	add.w	r3, r7, #16
 800f338:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f33c:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_FOURLINE_DATA_ACTIVATIONS_COUNT, g_fourline_data_map_activations);
  
  const ai_buffer_array map_weights = 
 800f340:	4a0a      	ldr	r2, [pc, #40]	; (800f36c <ai_fourline_data_params_get+0x4c>)
 800f342:	f107 0308 	add.w	r3, r7, #8
 800f346:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f34a:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_FOURLINE_DATA_WEIGHTS_COUNT, g_fourline_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 800f34e:	f107 0210 	add.w	r2, r7, #16
 800f352:	f107 0308 	add.w	r3, r7, #8
 800f356:	4619      	mov	r1, r3
 800f358:	6878      	ldr	r0, [r7, #4]
 800f35a:	f000 f90b 	bl	800f574 <ai_platform_bind_network_params>
 800f35e:	4603      	mov	r3, r0
}
 800f360:	4618      	mov	r0, r3
 800f362:	3718      	adds	r7, #24
 800f364:	46bd      	mov	sp, r7
 800f366:	bd80      	pop	{r7, pc}
 800f368:	08018ae0 	.word	0x08018ae0
 800f36c:	08018ae8 	.word	0x08018ae8

0800f370 <ai_buffer_get_size>:
 800f370:	b368      	cbz	r0, 800f3ce <ai_buffer_get_size+0x5e>
 800f372:	4b17      	ldr	r3, [pc, #92]	; (800f3d0 <ai_buffer_get_size+0x60>)
 800f374:	4a17      	ldr	r2, [pc, #92]	; (800f3d4 <ai_buffer_get_size+0x64>)
 800f376:	b410      	push	{r4}
 800f378:	6804      	ldr	r4, [r0, #0]
 800f37a:	4023      	ands	r3, r4
 800f37c:	4293      	cmp	r3, r2
 800f37e:	d123      	bne.n	800f3c8 <ai_buffer_get_size+0x58>
 800f380:	b311      	cbz	r1, 800f3c8 <ai_buffer_get_size+0x58>
 800f382:	6984      	ldr	r4, [r0, #24]
 800f384:	6862      	ldr	r2, [r4, #4]
 800f386:	321f      	adds	r2, #31
 800f388:	f022 021f 	bic.w	r2, r2, #31
 800f38c:	7d03      	ldrb	r3, [r0, #20]
 800f38e:	6941      	ldr	r1, [r0, #20]
 800f390:	f1a3 0301 	sub.w	r3, r3, #1
 800f394:	f3c1 2017 	ubfx	r0, r1, #8, #24
 800f398:	fab3 f383 	clz	r3, r3
 800f39c:	095b      	lsrs	r3, r3, #5
 800f39e:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 800f3a2:	da0c      	bge.n	800f3be <ai_buffer_get_size+0x4e>
 800f3a4:	2b01      	cmp	r3, #1
 800f3a6:	d103      	bne.n	800f3b0 <ai_buffer_get_size+0x40>
 800f3a8:	2802      	cmp	r0, #2
 800f3aa:	f04f 0302 	mov.w	r3, #2
 800f3ae:	d006      	beq.n	800f3be <ai_buffer_get_size+0x4e>
 800f3b0:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800f3b4:	3301      	adds	r3, #1
 800f3b6:	4298      	cmp	r0, r3
 800f3b8:	fb01 f202 	mul.w	r2, r1, r2
 800f3bc:	d1f2      	bne.n	800f3a4 <ai_buffer_get_size+0x34>
 800f3be:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 800f3c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f3c6:	4770      	bx	lr
 800f3c8:	6984      	ldr	r4, [r0, #24]
 800f3ca:	6862      	ldr	r2, [r4, #4]
 800f3cc:	e7de      	b.n	800f38c <ai_buffer_get_size+0x1c>
 800f3ce:	4770      	bx	lr
 800f3d0:	017fffff 	.word	0x017fffff
 800f3d4:	000400c0 	.word	0x000400c0

0800f3d8 <ai_buffer_array_sane>:
 800f3d8:	b138      	cbz	r0, 800f3ea <ai_buffer_array_sane+0x12>
 800f3da:	6843      	ldr	r3, [r0, #4]
 800f3dc:	b123      	cbz	r3, 800f3e8 <ai_buffer_array_sane+0x10>
 800f3de:	8840      	ldrh	r0, [r0, #2]
 800f3e0:	3800      	subs	r0, #0
 800f3e2:	bf18      	it	ne
 800f3e4:	2001      	movne	r0, #1
 800f3e6:	4770      	bx	lr
 800f3e8:	4618      	mov	r0, r3
 800f3ea:	4770      	bx	lr

0800f3ec <ai_buffer_array_item_set_address>:
 800f3ec:	b150      	cbz	r0, 800f404 <ai_buffer_array_item_set_address+0x18>
 800f3ee:	6843      	ldr	r3, [r0, #4]
 800f3f0:	b14b      	cbz	r3, 800f406 <ai_buffer_array_item_set_address+0x1a>
 800f3f2:	8840      	ldrh	r0, [r0, #2]
 800f3f4:	b900      	cbnz	r0, 800f3f8 <ai_buffer_array_item_set_address+0xc>
 800f3f6:	4770      	bx	lr
 800f3f8:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800f3fc:	2001      	movs	r0, #1
 800f3fe:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800f402:	604a      	str	r2, [r1, #4]
 800f404:	4770      	bx	lr
 800f406:	4618      	mov	r0, r3
 800f408:	4770      	bx	lr
 800f40a:	bf00      	nop

0800f40c <_ai_platform_acquire_crc>:
 800f40c:	2001      	movs	r0, #1
 800f40e:	4770      	bx	lr

0800f410 <_ai_platform_release_crc>:
 800f410:	4770      	bx	lr
 800f412:	bf00      	nop

0800f414 <ai_platform_get_weights_map>:
 800f414:	2900      	cmp	r1, #0
 800f416:	bf18      	it	ne
 800f418:	2800      	cmpne	r0, #0
 800f41a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f41c:	bf0c      	ite	eq
 800f41e:	2401      	moveq	r4, #1
 800f420:	2400      	movne	r4, #0
 800f422:	2a00      	cmp	r2, #0
 800f424:	bf08      	it	eq
 800f426:	f044 0401 	orreq.w	r4, r4, #1
 800f42a:	b114      	cbz	r4, 800f432 <ai_platform_get_weights_map+0x1e>
 800f42c:	2400      	movs	r4, #0
 800f42e:	4620      	mov	r0, r4
 800f430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f432:	4616      	mov	r6, r2
 800f434:	4b22      	ldr	r3, [pc, #136]	; (800f4c0 <ai_platform_get_weights_map+0xac>)
 800f436:	6812      	ldr	r2, [r2, #0]
 800f438:	4605      	mov	r5, r0
 800f43a:	460f      	mov	r7, r1
 800f43c:	429a      	cmp	r2, r3
 800f43e:	d022      	beq.n	800f486 <ai_platform_get_weights_map+0x72>
 800f440:	6870      	ldr	r0, [r6, #4]
 800f442:	2800      	cmp	r0, #0
 800f444:	d0f2      	beq.n	800f42c <ai_platform_get_weights_map+0x18>
 800f446:	6806      	ldr	r6, [r0, #0]
 800f448:	429e      	cmp	r6, r3
 800f44a:	d006      	beq.n	800f45a <ai_platform_get_weights_map+0x46>
 800f44c:	f1a1 0401 	sub.w	r4, r1, #1
 800f450:	6028      	str	r0, [r5, #0]
 800f452:	fab4 f484 	clz	r4, r4
 800f456:	0964      	lsrs	r4, r4, #5
 800f458:	e7e9      	b.n	800f42e <ai_platform_get_weights_map+0x1a>
 800f45a:	3d04      	subs	r5, #4
 800f45c:	4602      	mov	r2, r0
 800f45e:	4621      	mov	r1, r4
 800f460:	e000      	b.n	800f464 <ai_platform_get_weights_map+0x50>
 800f462:	4619      	mov	r1, r3
 800f464:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800f468:	42b3      	cmp	r3, r6
 800f46a:	d025      	beq.n	800f4b8 <ai_platform_get_weights_map+0xa4>
 800f46c:	f845 3f04 	str.w	r3, [r5, #4]!
 800f470:	1c4b      	adds	r3, r1, #1
 800f472:	429f      	cmp	r7, r3
 800f474:	d8f5      	bhi.n	800f462 <ai_platform_get_weights_map+0x4e>
 800f476:	d1da      	bne.n	800f42e <ai_platform_get_weights_map+0x1a>
 800f478:	3102      	adds	r1, #2
 800f47a:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800f47e:	42b3      	cmp	r3, r6
 800f480:	d1d5      	bne.n	800f42e <ai_platform_get_weights_map+0x1a>
 800f482:	2401      	movs	r4, #1
 800f484:	e7d3      	b.n	800f42e <ai_platform_get_weights_map+0x1a>
 800f486:	1d30      	adds	r0, r6, #4
 800f488:	f7ff ffa6 	bl	800f3d8 <ai_buffer_array_sane>
 800f48c:	2800      	cmp	r0, #0
 800f48e:	d0cd      	beq.n	800f42c <ai_platform_get_weights_map+0x18>
 800f490:	88f3      	ldrh	r3, [r6, #6]
 800f492:	429f      	cmp	r7, r3
 800f494:	d1ca      	bne.n	800f42c <ai_platform_get_weights_map+0x18>
 800f496:	3d04      	subs	r5, #4
 800f498:	4622      	mov	r2, r4
 800f49a:	68b3      	ldr	r3, [r6, #8]
 800f49c:	4423      	add	r3, r4
 800f49e:	341c      	adds	r4, #28
 800f4a0:	685b      	ldr	r3, [r3, #4]
 800f4a2:	b123      	cbz	r3, 800f4ae <ai_platform_get_weights_map+0x9a>
 800f4a4:	3201      	adds	r2, #1
 800f4a6:	f845 3f04 	str.w	r3, [r5, #4]!
 800f4aa:	4297      	cmp	r7, r2
 800f4ac:	d8f5      	bhi.n	800f49a <ai_platform_get_weights_map+0x86>
 800f4ae:	1abc      	subs	r4, r7, r2
 800f4b0:	fab4 f484 	clz	r4, r4
 800f4b4:	0964      	lsrs	r4, r4, #5
 800f4b6:	e7ba      	b.n	800f42e <ai_platform_get_weights_map+0x1a>
 800f4b8:	428f      	cmp	r7, r1
 800f4ba:	d1b8      	bne.n	800f42e <ai_platform_get_weights_map+0x1a>
 800f4bc:	e7e1      	b.n	800f482 <ai_platform_get_weights_map+0x6e>
 800f4be:	bf00      	nop
 800f4c0:	a1facade 	.word	0xa1facade

0800f4c4 <ai_platform_get_activations_map>:
 800f4c4:	2900      	cmp	r1, #0
 800f4c6:	bf18      	it	ne
 800f4c8:	2800      	cmpne	r0, #0
 800f4ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4cc:	bf0c      	ite	eq
 800f4ce:	2401      	moveq	r4, #1
 800f4d0:	2400      	movne	r4, #0
 800f4d2:	2a00      	cmp	r2, #0
 800f4d4:	bf08      	it	eq
 800f4d6:	f044 0401 	orreq.w	r4, r4, #1
 800f4da:	b114      	cbz	r4, 800f4e2 <ai_platform_get_activations_map+0x1e>
 800f4dc:	2400      	movs	r4, #0
 800f4de:	4620      	mov	r0, r4
 800f4e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f4e2:	4616      	mov	r6, r2
 800f4e4:	4b22      	ldr	r3, [pc, #136]	; (800f570 <ai_platform_get_activations_map+0xac>)
 800f4e6:	6812      	ldr	r2, [r2, #0]
 800f4e8:	4605      	mov	r5, r0
 800f4ea:	460f      	mov	r7, r1
 800f4ec:	429a      	cmp	r2, r3
 800f4ee:	d022      	beq.n	800f536 <ai_platform_get_activations_map+0x72>
 800f4f0:	6a30      	ldr	r0, [r6, #32]
 800f4f2:	2800      	cmp	r0, #0
 800f4f4:	d0f2      	beq.n	800f4dc <ai_platform_get_activations_map+0x18>
 800f4f6:	6806      	ldr	r6, [r0, #0]
 800f4f8:	429e      	cmp	r6, r3
 800f4fa:	d006      	beq.n	800f50a <ai_platform_get_activations_map+0x46>
 800f4fc:	f1a1 0401 	sub.w	r4, r1, #1
 800f500:	6028      	str	r0, [r5, #0]
 800f502:	fab4 f484 	clz	r4, r4
 800f506:	0964      	lsrs	r4, r4, #5
 800f508:	e7e9      	b.n	800f4de <ai_platform_get_activations_map+0x1a>
 800f50a:	3d04      	subs	r5, #4
 800f50c:	4602      	mov	r2, r0
 800f50e:	4621      	mov	r1, r4
 800f510:	e000      	b.n	800f514 <ai_platform_get_activations_map+0x50>
 800f512:	4619      	mov	r1, r3
 800f514:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800f518:	42b3      	cmp	r3, r6
 800f51a:	d026      	beq.n	800f56a <ai_platform_get_activations_map+0xa6>
 800f51c:	f845 3f04 	str.w	r3, [r5, #4]!
 800f520:	1c4b      	adds	r3, r1, #1
 800f522:	429f      	cmp	r7, r3
 800f524:	d8f5      	bhi.n	800f512 <ai_platform_get_activations_map+0x4e>
 800f526:	d1da      	bne.n	800f4de <ai_platform_get_activations_map+0x1a>
 800f528:	3102      	adds	r1, #2
 800f52a:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800f52e:	42b3      	cmp	r3, r6
 800f530:	d1d5      	bne.n	800f4de <ai_platform_get_activations_map+0x1a>
 800f532:	2401      	movs	r4, #1
 800f534:	e7d3      	b.n	800f4de <ai_platform_get_activations_map+0x1a>
 800f536:	f106 000c 	add.w	r0, r6, #12
 800f53a:	f7ff ff4d 	bl	800f3d8 <ai_buffer_array_sane>
 800f53e:	2800      	cmp	r0, #0
 800f540:	d0cc      	beq.n	800f4dc <ai_platform_get_activations_map+0x18>
 800f542:	89f3      	ldrh	r3, [r6, #14]
 800f544:	429f      	cmp	r7, r3
 800f546:	d1c9      	bne.n	800f4dc <ai_platform_get_activations_map+0x18>
 800f548:	3d04      	subs	r5, #4
 800f54a:	4622      	mov	r2, r4
 800f54c:	6933      	ldr	r3, [r6, #16]
 800f54e:	4423      	add	r3, r4
 800f550:	341c      	adds	r4, #28
 800f552:	685b      	ldr	r3, [r3, #4]
 800f554:	b123      	cbz	r3, 800f560 <ai_platform_get_activations_map+0x9c>
 800f556:	3201      	adds	r2, #1
 800f558:	f845 3f04 	str.w	r3, [r5, #4]!
 800f55c:	4297      	cmp	r7, r2
 800f55e:	d8f5      	bhi.n	800f54c <ai_platform_get_activations_map+0x88>
 800f560:	1abc      	subs	r4, r7, r2
 800f562:	fab4 f484 	clz	r4, r4
 800f566:	0964      	lsrs	r4, r4, #5
 800f568:	e7b9      	b.n	800f4de <ai_platform_get_activations_map+0x1a>
 800f56a:	428f      	cmp	r7, r1
 800f56c:	d1b7      	bne.n	800f4de <ai_platform_get_activations_map+0x1a>
 800f56e:	e7e0      	b.n	800f532 <ai_platform_get_activations_map+0x6e>
 800f570:	a1facade 	.word	0xa1facade

0800f574 <ai_platform_bind_network_params>:
 800f574:	2a00      	cmp	r2, #0
 800f576:	bf18      	it	ne
 800f578:	2900      	cmpne	r1, #0
 800f57a:	d010      	beq.n	800f59e <ai_platform_bind_network_params+0x2a>
 800f57c:	b178      	cbz	r0, 800f59e <ai_platform_bind_network_params+0x2a>
 800f57e:	4603      	mov	r3, r0
 800f580:	4808      	ldr	r0, [pc, #32]	; (800f5a4 <ai_platform_bind_network_params+0x30>)
 800f582:	f103 0c0c 	add.w	ip, r3, #12
 800f586:	f843 0b04 	str.w	r0, [r3], #4
 800f58a:	c903      	ldmia	r1, {r0, r1}
 800f58c:	e883 0003 	stmia.w	r3, {r0, r1}
 800f590:	2301      	movs	r3, #1
 800f592:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f596:	e88c 0003 	stmia.w	ip, {r0, r1}
 800f59a:	4618      	mov	r0, r3
 800f59c:	4770      	bx	lr
 800f59e:	2300      	movs	r3, #0
 800f5a0:	4618      	mov	r0, r3
 800f5a2:	4770      	bx	lr
 800f5a4:	a1facade 	.word	0xa1facade

0800f5a8 <ai_platform_network_get_error>:
 800f5a8:	b510      	push	{r4, lr}
 800f5aa:	2800      	cmp	r0, #0
 800f5ac:	d03f      	beq.n	800f62e <ai_platform_network_get_error+0x86>
 800f5ae:	4b7d      	ldr	r3, [pc, #500]	; (800f7a4 <ai_platform_network_get_error+0x1fc>)
 800f5b0:	4604      	mov	r4, r0
 800f5b2:	6802      	ldr	r2, [r0, #0]
 800f5b4:	429a      	cmp	r2, r3
 800f5b6:	d13a      	bne.n	800f62e <ai_platform_network_get_error+0x86>
 800f5b8:	f7ff ff28 	bl	800f40c <_ai_platform_acquire_crc>
 800f5bc:	4b7a      	ldr	r3, [pc, #488]	; (800f7a8 <ai_platform_network_get_error+0x200>)
 800f5be:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f5c8:	189a      	adds	r2, r3, r2
 800f5ca:	2a01      	cmp	r2, #1
 800f5cc:	f240 8086 	bls.w	800f6dc <ai_platform_network_get_error+0x134>
 800f5d0:	f240 4249 	movw	r2, #1097	; 0x449
 800f5d4:	4293      	cmp	r3, r2
 800f5d6:	f000 8081 	beq.w	800f6dc <ai_platform_network_get_error+0x134>
 800f5da:	4a74      	ldr	r2, [pc, #464]	; (800f7ac <ai_platform_network_get_error+0x204>)
 800f5dc:	6813      	ldr	r3, [r2, #0]
 800f5de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f5e2:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800f5e6:	f000 8087 	beq.w	800f6f8 <ai_platform_network_get_error+0x150>
 800f5ea:	6813      	ldr	r3, [r2, #0]
 800f5ec:	f240 4183 	movw	r1, #1155	; 0x483
 800f5f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f5f4:	428b      	cmp	r3, r1
 800f5f6:	f000 80a9 	beq.w	800f74c <ai_platform_network_get_error+0x1a4>
 800f5fa:	6813      	ldr	r3, [r2, #0]
 800f5fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f600:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800f604:	f000 80c0 	beq.w	800f788 <ai_platform_network_get_error+0x1e0>
 800f608:	6813      	ldr	r3, [r2, #0]
 800f60a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f60e:	2b00      	cmp	r3, #0
 800f610:	f040 8082 	bne.w	800f718 <ai_platform_network_get_error+0x170>
 800f614:	4a66      	ldr	r2, [pc, #408]	; (800f7b0 <ai_platform_network_get_error+0x208>)
 800f616:	2301      	movs	r3, #1
 800f618:	6093      	str	r3, [r2, #8]
 800f61a:	6893      	ldr	r3, [r2, #8]
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d1fc      	bne.n	800f61a <ai_platform_network_get_error+0x72>
 800f620:	4964      	ldr	r1, [pc, #400]	; (800f7b4 <ai_platform_network_get_error+0x20c>)
 800f622:	4b65      	ldr	r3, [pc, #404]	; (800f7b8 <ai_platform_network_get_error+0x210>)
 800f624:	6011      	str	r1, [r2, #0]
 800f626:	6812      	ldr	r2, [r2, #0]
 800f628:	429a      	cmp	r2, r3
 800f62a:	d075      	beq.n	800f718 <ai_platform_network_get_error+0x170>
 800f62c:	e7fe      	b.n	800f62c <ai_platform_network_get_error+0x84>
 800f62e:	f7ff feed 	bl	800f40c <_ai_platform_acquire_crc>
 800f632:	4b5d      	ldr	r3, [pc, #372]	; (800f7a8 <ai_platform_network_get_error+0x200>)
 800f634:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f63e:	185a      	adds	r2, r3, r1
 800f640:	2a01      	cmp	r2, #1
 800f642:	d929      	bls.n	800f698 <ai_platform_network_get_error+0xf0>
 800f644:	f240 4249 	movw	r2, #1097	; 0x449
 800f648:	4293      	cmp	r3, r2
 800f64a:	d025      	beq.n	800f698 <ai_platform_network_get_error+0xf0>
 800f64c:	4a57      	ldr	r2, [pc, #348]	; (800f7ac <ai_platform_network_get_error+0x204>)
 800f64e:	6813      	ldr	r3, [r2, #0]
 800f650:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f654:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800f658:	d02b      	beq.n	800f6b2 <ai_platform_network_get_error+0x10a>
 800f65a:	6813      	ldr	r3, [r2, #0]
 800f65c:	f240 4183 	movw	r1, #1155	; 0x483
 800f660:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f664:	428b      	cmp	r3, r1
 800f666:	d060      	beq.n	800f72a <ai_platform_network_get_error+0x182>
 800f668:	6813      	ldr	r3, [r2, #0]
 800f66a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f66e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800f672:	d07c      	beq.n	800f76e <ai_platform_network_get_error+0x1c6>
 800f674:	6813      	ldr	r3, [r2, #0]
 800f676:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d129      	bne.n	800f6d2 <ai_platform_network_get_error+0x12a>
 800f67e:	4a4c      	ldr	r2, [pc, #304]	; (800f7b0 <ai_platform_network_get_error+0x208>)
 800f680:	2301      	movs	r3, #1
 800f682:	6093      	str	r3, [r2, #8]
 800f684:	6893      	ldr	r3, [r2, #8]
 800f686:	2b00      	cmp	r3, #0
 800f688:	d1fc      	bne.n	800f684 <ai_platform_network_get_error+0xdc>
 800f68a:	494a      	ldr	r1, [pc, #296]	; (800f7b4 <ai_platform_network_get_error+0x20c>)
 800f68c:	4b4a      	ldr	r3, [pc, #296]	; (800f7b8 <ai_platform_network_get_error+0x210>)
 800f68e:	6011      	str	r1, [r2, #0]
 800f690:	6812      	ldr	r2, [r2, #0]
 800f692:	429a      	cmp	r2, r3
 800f694:	d01d      	beq.n	800f6d2 <ai_platform_network_get_error+0x12a>
 800f696:	e7fe      	b.n	800f696 <ai_platform_network_get_error+0xee>
 800f698:	4a45      	ldr	r2, [pc, #276]	; (800f7b0 <ai_platform_network_get_error+0x208>)
 800f69a:	2301      	movs	r3, #1
 800f69c:	6093      	str	r3, [r2, #8]
 800f69e:	6893      	ldr	r3, [r2, #8]
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d1fc      	bne.n	800f69e <ai_platform_network_get_error+0xf6>
 800f6a4:	4943      	ldr	r1, [pc, #268]	; (800f7b4 <ai_platform_network_get_error+0x20c>)
 800f6a6:	4b44      	ldr	r3, [pc, #272]	; (800f7b8 <ai_platform_network_get_error+0x210>)
 800f6a8:	6011      	str	r1, [r2, #0]
 800f6aa:	6812      	ldr	r2, [r2, #0]
 800f6ac:	429a      	cmp	r2, r3
 800f6ae:	d010      	beq.n	800f6d2 <ai_platform_network_get_error+0x12a>
 800f6b0:	e7fe      	b.n	800f6b0 <ai_platform_network_get_error+0x108>
 800f6b2:	4a42      	ldr	r2, [pc, #264]	; (800f7bc <ai_platform_network_get_error+0x214>)
 800f6b4:	2301      	movs	r3, #1
 800f6b6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800f6ba:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d1fb      	bne.n	800f6ba <ai_platform_network_get_error+0x112>
 800f6c2:	493c      	ldr	r1, [pc, #240]	; (800f7b4 <ai_platform_network_get_error+0x20c>)
 800f6c4:	4b3c      	ldr	r3, [pc, #240]	; (800f7b8 <ai_platform_network_get_error+0x210>)
 800f6c6:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800f6ca:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800f6ce:	429a      	cmp	r2, r3
 800f6d0:	d111      	bne.n	800f6f6 <ai_platform_network_get_error+0x14e>
 800f6d2:	f7ff fe9d 	bl	800f410 <_ai_platform_release_crc>
 800f6d6:	f241 0010 	movw	r0, #4112	; 0x1010
 800f6da:	bd10      	pop	{r4, pc}
 800f6dc:	4a34      	ldr	r2, [pc, #208]	; (800f7b0 <ai_platform_network_get_error+0x208>)
 800f6de:	2301      	movs	r3, #1
 800f6e0:	6093      	str	r3, [r2, #8]
 800f6e2:	6893      	ldr	r3, [r2, #8]
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d1fc      	bne.n	800f6e2 <ai_platform_network_get_error+0x13a>
 800f6e8:	4932      	ldr	r1, [pc, #200]	; (800f7b4 <ai_platform_network_get_error+0x20c>)
 800f6ea:	4b33      	ldr	r3, [pc, #204]	; (800f7b8 <ai_platform_network_get_error+0x210>)
 800f6ec:	6011      	str	r1, [r2, #0]
 800f6ee:	6812      	ldr	r2, [r2, #0]
 800f6f0:	429a      	cmp	r2, r3
 800f6f2:	d011      	beq.n	800f718 <ai_platform_network_get_error+0x170>
 800f6f4:	e7fe      	b.n	800f6f4 <ai_platform_network_get_error+0x14c>
 800f6f6:	e7fe      	b.n	800f6f6 <ai_platform_network_get_error+0x14e>
 800f6f8:	4a30      	ldr	r2, [pc, #192]	; (800f7bc <ai_platform_network_get_error+0x214>)
 800f6fa:	2301      	movs	r3, #1
 800f6fc:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800f700:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800f704:	2b00      	cmp	r3, #0
 800f706:	d1fb      	bne.n	800f700 <ai_platform_network_get_error+0x158>
 800f708:	492a      	ldr	r1, [pc, #168]	; (800f7b4 <ai_platform_network_get_error+0x20c>)
 800f70a:	4b2b      	ldr	r3, [pc, #172]	; (800f7b8 <ai_platform_network_get_error+0x210>)
 800f70c:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800f710:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800f714:	429a      	cmp	r2, r3
 800f716:	d107      	bne.n	800f728 <ai_platform_network_get_error+0x180>
 800f718:	f7ff fe7a 	bl	800f410 <_ai_platform_release_crc>
 800f71c:	f104 0010 	add.w	r0, r4, #16
 800f720:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f724:	f001 bae4 	b.w	8010cf0 <core_get_error>
 800f728:	e7fe      	b.n	800f728 <ai_platform_network_get_error+0x180>
 800f72a:	4a24      	ldr	r2, [pc, #144]	; (800f7bc <ai_platform_network_get_error+0x214>)
 800f72c:	2301      	movs	r3, #1
 800f72e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800f732:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800f736:	2b00      	cmp	r3, #0
 800f738:	d1fb      	bne.n	800f732 <ai_platform_network_get_error+0x18a>
 800f73a:	491e      	ldr	r1, [pc, #120]	; (800f7b4 <ai_platform_network_get_error+0x20c>)
 800f73c:	4b1e      	ldr	r3, [pc, #120]	; (800f7b8 <ai_platform_network_get_error+0x210>)
 800f73e:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800f742:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800f746:	429a      	cmp	r2, r3
 800f748:	d0c3      	beq.n	800f6d2 <ai_platform_network_get_error+0x12a>
 800f74a:	e7fe      	b.n	800f74a <ai_platform_network_get_error+0x1a2>
 800f74c:	4a1b      	ldr	r2, [pc, #108]	; (800f7bc <ai_platform_network_get_error+0x214>)
 800f74e:	2301      	movs	r3, #1
 800f750:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800f754:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d1fb      	bne.n	800f754 <ai_platform_network_get_error+0x1ac>
 800f75c:	4915      	ldr	r1, [pc, #84]	; (800f7b4 <ai_platform_network_get_error+0x20c>)
 800f75e:	4b16      	ldr	r3, [pc, #88]	; (800f7b8 <ai_platform_network_get_error+0x210>)
 800f760:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800f764:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800f768:	429a      	cmp	r2, r3
 800f76a:	d0d5      	beq.n	800f718 <ai_platform_network_get_error+0x170>
 800f76c:	e7fe      	b.n	800f76c <ai_platform_network_get_error+0x1c4>
 800f76e:	4a10      	ldr	r2, [pc, #64]	; (800f7b0 <ai_platform_network_get_error+0x208>)
 800f770:	2301      	movs	r3, #1
 800f772:	6093      	str	r3, [r2, #8]
 800f774:	6893      	ldr	r3, [r2, #8]
 800f776:	2b00      	cmp	r3, #0
 800f778:	d1fc      	bne.n	800f774 <ai_platform_network_get_error+0x1cc>
 800f77a:	490e      	ldr	r1, [pc, #56]	; (800f7b4 <ai_platform_network_get_error+0x20c>)
 800f77c:	4b0e      	ldr	r3, [pc, #56]	; (800f7b8 <ai_platform_network_get_error+0x210>)
 800f77e:	6011      	str	r1, [r2, #0]
 800f780:	6812      	ldr	r2, [r2, #0]
 800f782:	429a      	cmp	r2, r3
 800f784:	d0a5      	beq.n	800f6d2 <ai_platform_network_get_error+0x12a>
 800f786:	e7fe      	b.n	800f786 <ai_platform_network_get_error+0x1de>
 800f788:	4a09      	ldr	r2, [pc, #36]	; (800f7b0 <ai_platform_network_get_error+0x208>)
 800f78a:	2301      	movs	r3, #1
 800f78c:	6093      	str	r3, [r2, #8]
 800f78e:	6893      	ldr	r3, [r2, #8]
 800f790:	2b00      	cmp	r3, #0
 800f792:	d1fc      	bne.n	800f78e <ai_platform_network_get_error+0x1e6>
 800f794:	4907      	ldr	r1, [pc, #28]	; (800f7b4 <ai_platform_network_get_error+0x20c>)
 800f796:	4b08      	ldr	r3, [pc, #32]	; (800f7b8 <ai_platform_network_get_error+0x210>)
 800f798:	6011      	str	r1, [r2, #0]
 800f79a:	6812      	ldr	r2, [r2, #0]
 800f79c:	429a      	cmp	r2, r3
 800f79e:	d0bb      	beq.n	800f718 <ai_platform_network_get_error+0x170>
 800f7a0:	e7fe      	b.n	800f7a0 <ai_platform_network_get_error+0x1f8>
 800f7a2:	bf00      	nop
 800f7a4:	a1c00100 	.word	0xa1c00100
 800f7a8:	e0042000 	.word	0xe0042000
 800f7ac:	5c001000 	.word	0x5c001000
 800f7b0:	40023000 	.word	0x40023000
 800f7b4:	f407a5c2 	.word	0xf407a5c2
 800f7b8:	b5e8b5cd 	.word	0xb5e8b5cd
 800f7bc:	58024000 	.word	0x58024000

0800f7c0 <ai_platform_network_set_error>:
 800f7c0:	b110      	cbz	r0, 800f7c8 <ai_platform_network_set_error+0x8>
 800f7c2:	3010      	adds	r0, #16
 800f7c4:	f001 ba9a 	b.w	8010cfc <core_set_error>
 800f7c8:	4770      	bx	lr
 800f7ca:	bf00      	nop

0800f7cc <ai_platform_inputs_get>:
 800f7cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7d0:	b085      	sub	sp, #20
 800f7d2:	9102      	str	r1, [sp, #8]
 800f7d4:	2800      	cmp	r0, #0
 800f7d6:	f000 8093 	beq.w	800f900 <ai_platform_inputs_get+0x134>
 800f7da:	4baa      	ldr	r3, [pc, #680]	; (800fa84 <ai_platform_inputs_get+0x2b8>)
 800f7dc:	4681      	mov	r9, r0
 800f7de:	6802      	ldr	r2, [r0, #0]
 800f7e0:	429a      	cmp	r2, r3
 800f7e2:	f040 808d 	bne.w	800f900 <ai_platform_inputs_get+0x134>
 800f7e6:	f7ff fe11 	bl	800f40c <_ai_platform_acquire_crc>
 800f7ea:	4ba7      	ldr	r3, [pc, #668]	; (800fa88 <ai_platform_inputs_get+0x2bc>)
 800f7ec:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f7f6:	189a      	adds	r2, r3, r2
 800f7f8:	2a01      	cmp	r2, #1
 800f7fa:	f240 80da 	bls.w	800f9b2 <ai_platform_inputs_get+0x1e6>
 800f7fe:	f240 4249 	movw	r2, #1097	; 0x449
 800f802:	4293      	cmp	r3, r2
 800f804:	f000 80d5 	beq.w	800f9b2 <ai_platform_inputs_get+0x1e6>
 800f808:	4aa0      	ldr	r2, [pc, #640]	; (800fa8c <ai_platform_inputs_get+0x2c0>)
 800f80a:	6813      	ldr	r3, [r2, #0]
 800f80c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f810:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800f814:	f000 80dc 	beq.w	800f9d0 <ai_platform_inputs_get+0x204>
 800f818:	6813      	ldr	r3, [r2, #0]
 800f81a:	f240 4183 	movw	r1, #1155	; 0x483
 800f81e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f822:	428b      	cmp	r3, r1
 800f824:	f000 810e 	beq.w	800fa44 <ai_platform_inputs_get+0x278>
 800f828:	6813      	ldr	r3, [r2, #0]
 800f82a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f82e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800f832:	f000 8143 	beq.w	800fabc <ai_platform_inputs_get+0x2f0>
 800f836:	6813      	ldr	r3, [r2, #0]
 800f838:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	f000 8113 	beq.w	800fa68 <ai_platform_inputs_get+0x29c>
 800f842:	f7ff fde5 	bl	800f410 <_ai_platform_release_crc>
 800f846:	f8b9 302c 	ldrh.w	r3, [r9, #44]	; 0x2c
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	f000 80d2 	beq.w	800f9f4 <ai_platform_inputs_get+0x228>
 800f850:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 800f854:	f1ba 0f00 	cmp.w	sl, #0
 800f858:	f000 80cc 	beq.w	800f9f4 <ai_platform_inputs_get+0x228>
 800f85c:	2100      	movs	r1, #0
 800f85e:	f8cd 900c 	str.w	r9, [sp, #12]
 800f862:	460d      	mov	r5, r1
 800f864:	4689      	mov	r9, r1
 800f866:	e016      	b.n	800f896 <ai_platform_inputs_get+0xca>
 800f868:	9a01      	ldr	r2, [sp, #4]
 800f86a:	2301      	movs	r3, #1
 800f86c:	f848 3002 	str.w	r3, [r8, r2]
 800f870:	69b2      	ldr	r2, [r6, #24]
 800f872:	f04f 0301 	mov.w	r3, #1
 800f876:	6856      	ldr	r6, [r2, #4]
 800f878:	3501      	adds	r5, #1
 800f87a:	f109 091c 	add.w	r9, r9, #28
 800f87e:	7523      	strb	r3, [r4, #20]
 800f880:	2300      	movs	r3, #0
 800f882:	6962      	ldr	r2, [r4, #20]
 800f884:	60a7      	str	r7, [r4, #8]
 800f886:	f36b 221f 	bfi	r2, fp, #8, #24
 800f88a:	6126      	str	r6, [r4, #16]
 800f88c:	61a1      	str	r1, [r4, #24]
 800f88e:	60e3      	str	r3, [r4, #12]
 800f890:	6162      	str	r2, [r4, #20]
 800f892:	e9c4 0c00 	strd	r0, ip, [r4]
 800f896:	f8ba 3000 	ldrh.w	r3, [sl]
 800f89a:	b2ac      	uxth	r4, r5
 800f89c:	42ab      	cmp	r3, r5
 800f89e:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 800f8a2:	9301      	str	r3, [sp, #4]
 800f8a4:	f240 80b5 	bls.w	800fa12 <ai_platform_inputs_get+0x246>
 800f8a8:	f8da 3004 	ldr.w	r3, [sl, #4]
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	f000 80b0 	beq.w	800fa12 <ai_platform_inputs_get+0x246>
 800f8b2:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800f8b6:	2e00      	cmp	r6, #0
 800f8b8:	f000 80ab 	beq.w	800fa12 <ai_platform_inputs_get+0x246>
 800f8bc:	f8da 3008 	ldr.w	r3, [sl, #8]
 800f8c0:	69b2      	ldr	r2, [r6, #24]
 800f8c2:	68f1      	ldr	r1, [r6, #12]
 800f8c4:	6810      	ldr	r0, [r2, #0]
 800f8c6:	9100      	str	r1, [sp, #0]
 800f8c8:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 800f8cc:	68b3      	ldr	r3, [r6, #8]
 800f8ce:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 800f8d2:	444c      	add	r4, r9
 800f8d4:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 800f8d8:	f002 fd40 	bl	801235c <ai_array_to_buffer_fmt>
 800f8dc:	69b2      	ldr	r2, [r6, #24]
 800f8de:	9900      	ldr	r1, [sp, #0]
 800f8e0:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800f8e4:	2f00      	cmp	r7, #0
 800f8e6:	d0c4      	beq.n	800f872 <ai_platform_inputs_get+0xa6>
 800f8e8:	2200      	movs	r2, #0
 800f8ea:	f848 2035 	str.w	r2, [r8, r5, lsl #3]
 800f8ee:	6832      	ldr	r2, [r6, #0]
 800f8f0:	607a      	str	r2, [r7, #4]
 800f8f2:	b112      	cbz	r2, 800f8fa <ai_platform_inputs_get+0x12e>
 800f8f4:	8852      	ldrh	r2, [r2, #2]
 800f8f6:	2a00      	cmp	r2, #0
 800f8f8:	d1b6      	bne.n	800f868 <ai_platform_inputs_get+0x9c>
 800f8fa:	69b2      	ldr	r2, [r6, #24]
 800f8fc:	2700      	movs	r7, #0
 800f8fe:	e7b8      	b.n	800f872 <ai_platform_inputs_get+0xa6>
 800f900:	f7ff fd84 	bl	800f40c <_ai_platform_acquire_crc>
 800f904:	4b60      	ldr	r3, [pc, #384]	; (800fa88 <ai_platform_inputs_get+0x2bc>)
 800f906:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f910:	185a      	adds	r2, r3, r1
 800f912:	2a01      	cmp	r2, #1
 800f914:	d92a      	bls.n	800f96c <ai_platform_inputs_get+0x1a0>
 800f916:	f240 4249 	movw	r2, #1097	; 0x449
 800f91a:	4293      	cmp	r3, r2
 800f91c:	d026      	beq.n	800f96c <ai_platform_inputs_get+0x1a0>
 800f91e:	4a5b      	ldr	r2, [pc, #364]	; (800fa8c <ai_platform_inputs_get+0x2c0>)
 800f920:	6813      	ldr	r3, [r2, #0]
 800f922:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f926:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800f92a:	d02c      	beq.n	800f986 <ai_platform_inputs_get+0x1ba>
 800f92c:	6813      	ldr	r3, [r2, #0]
 800f92e:	f240 4183 	movw	r1, #1155	; 0x483
 800f932:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f936:	428b      	cmp	r3, r1
 800f938:	d073      	beq.n	800fa22 <ai_platform_inputs_get+0x256>
 800f93a:	6813      	ldr	r3, [r2, #0]
 800f93c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f940:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800f944:	f000 80ac 	beq.w	800faa0 <ai_platform_inputs_get+0x2d4>
 800f948:	6813      	ldr	r3, [r2, #0]
 800f94a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d129      	bne.n	800f9a6 <ai_platform_inputs_get+0x1da>
 800f952:	4a4f      	ldr	r2, [pc, #316]	; (800fa90 <ai_platform_inputs_get+0x2c4>)
 800f954:	2301      	movs	r3, #1
 800f956:	6093      	str	r3, [r2, #8]
 800f958:	6893      	ldr	r3, [r2, #8]
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d1fc      	bne.n	800f958 <ai_platform_inputs_get+0x18c>
 800f95e:	494d      	ldr	r1, [pc, #308]	; (800fa94 <ai_platform_inputs_get+0x2c8>)
 800f960:	4b4d      	ldr	r3, [pc, #308]	; (800fa98 <ai_platform_inputs_get+0x2cc>)
 800f962:	6011      	str	r1, [r2, #0]
 800f964:	6812      	ldr	r2, [r2, #0]
 800f966:	429a      	cmp	r2, r3
 800f968:	d01d      	beq.n	800f9a6 <ai_platform_inputs_get+0x1da>
 800f96a:	e7fe      	b.n	800f96a <ai_platform_inputs_get+0x19e>
 800f96c:	4a48      	ldr	r2, [pc, #288]	; (800fa90 <ai_platform_inputs_get+0x2c4>)
 800f96e:	2301      	movs	r3, #1
 800f970:	6093      	str	r3, [r2, #8]
 800f972:	6893      	ldr	r3, [r2, #8]
 800f974:	2b00      	cmp	r3, #0
 800f976:	d1fc      	bne.n	800f972 <ai_platform_inputs_get+0x1a6>
 800f978:	4946      	ldr	r1, [pc, #280]	; (800fa94 <ai_platform_inputs_get+0x2c8>)
 800f97a:	4b47      	ldr	r3, [pc, #284]	; (800fa98 <ai_platform_inputs_get+0x2cc>)
 800f97c:	6011      	str	r1, [r2, #0]
 800f97e:	6812      	ldr	r2, [r2, #0]
 800f980:	429a      	cmp	r2, r3
 800f982:	d010      	beq.n	800f9a6 <ai_platform_inputs_get+0x1da>
 800f984:	e7fe      	b.n	800f984 <ai_platform_inputs_get+0x1b8>
 800f986:	4a45      	ldr	r2, [pc, #276]	; (800fa9c <ai_platform_inputs_get+0x2d0>)
 800f988:	2301      	movs	r3, #1
 800f98a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800f98e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800f992:	2b00      	cmp	r3, #0
 800f994:	d1fb      	bne.n	800f98e <ai_platform_inputs_get+0x1c2>
 800f996:	493f      	ldr	r1, [pc, #252]	; (800fa94 <ai_platform_inputs_get+0x2c8>)
 800f998:	4b3f      	ldr	r3, [pc, #252]	; (800fa98 <ai_platform_inputs_get+0x2cc>)
 800f99a:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800f99e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800f9a2:	429a      	cmp	r2, r3
 800f9a4:	d113      	bne.n	800f9ce <ai_platform_inputs_get+0x202>
 800f9a6:	f7ff fd33 	bl	800f410 <_ai_platform_release_crc>
 800f9aa:	2000      	movs	r0, #0
 800f9ac:	b005      	add	sp, #20
 800f9ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9b2:	4a37      	ldr	r2, [pc, #220]	; (800fa90 <ai_platform_inputs_get+0x2c4>)
 800f9b4:	2301      	movs	r3, #1
 800f9b6:	6093      	str	r3, [r2, #8]
 800f9b8:	6893      	ldr	r3, [r2, #8]
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d1fc      	bne.n	800f9b8 <ai_platform_inputs_get+0x1ec>
 800f9be:	4b35      	ldr	r3, [pc, #212]	; (800fa94 <ai_platform_inputs_get+0x2c8>)
 800f9c0:	6013      	str	r3, [r2, #0]
 800f9c2:	4b35      	ldr	r3, [pc, #212]	; (800fa98 <ai_platform_inputs_get+0x2cc>)
 800f9c4:	6812      	ldr	r2, [r2, #0]
 800f9c6:	429a      	cmp	r2, r3
 800f9c8:	f43f af3b 	beq.w	800f842 <ai_platform_inputs_get+0x76>
 800f9cc:	e7fe      	b.n	800f9cc <ai_platform_inputs_get+0x200>
 800f9ce:	e7fe      	b.n	800f9ce <ai_platform_inputs_get+0x202>
 800f9d0:	4a32      	ldr	r2, [pc, #200]	; (800fa9c <ai_platform_inputs_get+0x2d0>)
 800f9d2:	2301      	movs	r3, #1
 800f9d4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800f9d8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d1fb      	bne.n	800f9d8 <ai_platform_inputs_get+0x20c>
 800f9e0:	4b2c      	ldr	r3, [pc, #176]	; (800fa94 <ai_platform_inputs_get+0x2c8>)
 800f9e2:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800f9e6:	4b2c      	ldr	r3, [pc, #176]	; (800fa98 <ai_platform_inputs_get+0x2cc>)
 800f9e8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800f9ec:	429a      	cmp	r2, r3
 800f9ee:	f43f af28 	beq.w	800f842 <ai_platform_inputs_get+0x76>
 800f9f2:	e7fe      	b.n	800f9f2 <ai_platform_inputs_get+0x226>
 800f9f4:	2400      	movs	r4, #0
 800f9f6:	2218      	movs	r2, #24
 800f9f8:	2111      	movs	r1, #17
 800f9fa:	f109 0010 	add.w	r0, r9, #16
 800f9fe:	f001 f97d 	bl	8010cfc <core_set_error>
 800fa02:	4620      	mov	r0, r4
 800fa04:	9b02      	ldr	r3, [sp, #8]
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d0d0      	beq.n	800f9ac <ai_platform_inputs_get+0x1e0>
 800fa0a:	801c      	strh	r4, [r3, #0]
 800fa0c:	b005      	add	sp, #20
 800fa0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa12:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800fa16:	2c00      	cmp	r4, #0
 800fa18:	d0ec      	beq.n	800f9f4 <ai_platform_inputs_get+0x228>
 800fa1a:	f8da 3008 	ldr.w	r3, [sl, #8]
 800fa1e:	6858      	ldr	r0, [r3, #4]
 800fa20:	e7f0      	b.n	800fa04 <ai_platform_inputs_get+0x238>
 800fa22:	4a1e      	ldr	r2, [pc, #120]	; (800fa9c <ai_platform_inputs_get+0x2d0>)
 800fa24:	2301      	movs	r3, #1
 800fa26:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800fa2a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d1fb      	bne.n	800fa2a <ai_platform_inputs_get+0x25e>
 800fa32:	4918      	ldr	r1, [pc, #96]	; (800fa94 <ai_platform_inputs_get+0x2c8>)
 800fa34:	4b18      	ldr	r3, [pc, #96]	; (800fa98 <ai_platform_inputs_get+0x2cc>)
 800fa36:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800fa3a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800fa3e:	429a      	cmp	r2, r3
 800fa40:	d0b1      	beq.n	800f9a6 <ai_platform_inputs_get+0x1da>
 800fa42:	e7fe      	b.n	800fa42 <ai_platform_inputs_get+0x276>
 800fa44:	4a15      	ldr	r2, [pc, #84]	; (800fa9c <ai_platform_inputs_get+0x2d0>)
 800fa46:	2301      	movs	r3, #1
 800fa48:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800fa4c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d1fb      	bne.n	800fa4c <ai_platform_inputs_get+0x280>
 800fa54:	4b0f      	ldr	r3, [pc, #60]	; (800fa94 <ai_platform_inputs_get+0x2c8>)
 800fa56:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800fa5a:	4b0f      	ldr	r3, [pc, #60]	; (800fa98 <ai_platform_inputs_get+0x2cc>)
 800fa5c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800fa60:	429a      	cmp	r2, r3
 800fa62:	f43f aeee 	beq.w	800f842 <ai_platform_inputs_get+0x76>
 800fa66:	e7fe      	b.n	800fa66 <ai_platform_inputs_get+0x29a>
 800fa68:	4a09      	ldr	r2, [pc, #36]	; (800fa90 <ai_platform_inputs_get+0x2c4>)
 800fa6a:	2301      	movs	r3, #1
 800fa6c:	6093      	str	r3, [r2, #8]
 800fa6e:	6893      	ldr	r3, [r2, #8]
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d1fc      	bne.n	800fa6e <ai_platform_inputs_get+0x2a2>
 800fa74:	4b07      	ldr	r3, [pc, #28]	; (800fa94 <ai_platform_inputs_get+0x2c8>)
 800fa76:	6013      	str	r3, [r2, #0]
 800fa78:	4b07      	ldr	r3, [pc, #28]	; (800fa98 <ai_platform_inputs_get+0x2cc>)
 800fa7a:	6812      	ldr	r2, [r2, #0]
 800fa7c:	429a      	cmp	r2, r3
 800fa7e:	f43f aee0 	beq.w	800f842 <ai_platform_inputs_get+0x76>
 800fa82:	e7fe      	b.n	800fa82 <ai_platform_inputs_get+0x2b6>
 800fa84:	a1c00100 	.word	0xa1c00100
 800fa88:	e0042000 	.word	0xe0042000
 800fa8c:	5c001000 	.word	0x5c001000
 800fa90:	40023000 	.word	0x40023000
 800fa94:	f407a5c2 	.word	0xf407a5c2
 800fa98:	b5e8b5cd 	.word	0xb5e8b5cd
 800fa9c:	58024000 	.word	0x58024000
 800faa0:	4a0d      	ldr	r2, [pc, #52]	; (800fad8 <ai_platform_inputs_get+0x30c>)
 800faa2:	2301      	movs	r3, #1
 800faa4:	6093      	str	r3, [r2, #8]
 800faa6:	6893      	ldr	r3, [r2, #8]
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d1fc      	bne.n	800faa6 <ai_platform_inputs_get+0x2da>
 800faac:	490b      	ldr	r1, [pc, #44]	; (800fadc <ai_platform_inputs_get+0x310>)
 800faae:	4b0c      	ldr	r3, [pc, #48]	; (800fae0 <ai_platform_inputs_get+0x314>)
 800fab0:	6011      	str	r1, [r2, #0]
 800fab2:	6812      	ldr	r2, [r2, #0]
 800fab4:	429a      	cmp	r2, r3
 800fab6:	f43f af76 	beq.w	800f9a6 <ai_platform_inputs_get+0x1da>
 800faba:	e7fe      	b.n	800faba <ai_platform_inputs_get+0x2ee>
 800fabc:	4a06      	ldr	r2, [pc, #24]	; (800fad8 <ai_platform_inputs_get+0x30c>)
 800fabe:	2301      	movs	r3, #1
 800fac0:	6093      	str	r3, [r2, #8]
 800fac2:	6893      	ldr	r3, [r2, #8]
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d1fc      	bne.n	800fac2 <ai_platform_inputs_get+0x2f6>
 800fac8:	4b04      	ldr	r3, [pc, #16]	; (800fadc <ai_platform_inputs_get+0x310>)
 800faca:	6013      	str	r3, [r2, #0]
 800facc:	4b04      	ldr	r3, [pc, #16]	; (800fae0 <ai_platform_inputs_get+0x314>)
 800face:	6812      	ldr	r2, [r2, #0]
 800fad0:	429a      	cmp	r2, r3
 800fad2:	f43f aeb6 	beq.w	800f842 <ai_platform_inputs_get+0x76>
 800fad6:	e7fe      	b.n	800fad6 <ai_platform_inputs_get+0x30a>
 800fad8:	40023000 	.word	0x40023000
 800fadc:	f407a5c2 	.word	0xf407a5c2
 800fae0:	b5e8b5cd 	.word	0xb5e8b5cd

0800fae4 <ai_platform_outputs_get>:
 800fae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fae8:	b085      	sub	sp, #20
 800faea:	9102      	str	r1, [sp, #8]
 800faec:	2800      	cmp	r0, #0
 800faee:	f000 808f 	beq.w	800fc10 <ai_platform_outputs_get+0x12c>
 800faf2:	4ba8      	ldr	r3, [pc, #672]	; (800fd94 <ai_platform_outputs_get+0x2b0>)
 800faf4:	4681      	mov	r9, r0
 800faf6:	6802      	ldr	r2, [r0, #0]
 800faf8:	429a      	cmp	r2, r3
 800fafa:	f040 8089 	bne.w	800fc10 <ai_platform_outputs_get+0x12c>
 800fafe:	f7ff fc85 	bl	800f40c <_ai_platform_acquire_crc>
 800fb02:	4ba5      	ldr	r3, [pc, #660]	; (800fd98 <ai_platform_outputs_get+0x2b4>)
 800fb04:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fb0e:	189a      	adds	r2, r3, r2
 800fb10:	2a01      	cmp	r2, #1
 800fb12:	f240 80d6 	bls.w	800fcc2 <ai_platform_outputs_get+0x1de>
 800fb16:	f240 4249 	movw	r2, #1097	; 0x449
 800fb1a:	4293      	cmp	r3, r2
 800fb1c:	f000 80d1 	beq.w	800fcc2 <ai_platform_outputs_get+0x1de>
 800fb20:	4a9e      	ldr	r2, [pc, #632]	; (800fd9c <ai_platform_outputs_get+0x2b8>)
 800fb22:	6813      	ldr	r3, [r2, #0]
 800fb24:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fb28:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800fb2c:	f000 80d8 	beq.w	800fce0 <ai_platform_outputs_get+0x1fc>
 800fb30:	6813      	ldr	r3, [r2, #0]
 800fb32:	f240 4183 	movw	r1, #1155	; 0x483
 800fb36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fb3a:	428b      	cmp	r3, r1
 800fb3c:	f000 8109 	beq.w	800fd52 <ai_platform_outputs_get+0x26e>
 800fb40:	6813      	ldr	r3, [r2, #0]
 800fb42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fb46:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800fb4a:	f000 813f 	beq.w	800fdcc <ai_platform_outputs_get+0x2e8>
 800fb4e:	6813      	ldr	r3, [r2, #0]
 800fb50:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	f000 810e 	beq.w	800fd76 <ai_platform_outputs_get+0x292>
 800fb5a:	f7ff fc59 	bl	800f410 <_ai_platform_release_crc>
 800fb5e:	f8b9 302c 	ldrh.w	r3, [r9, #44]	; 0x2c
 800fb62:	2b01      	cmp	r3, #1
 800fb64:	f240 80db 	bls.w	800fd1e <ai_platform_outputs_get+0x23a>
 800fb68:	2100      	movs	r1, #0
 800fb6a:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 800fb6e:	f8cd 900c 	str.w	r9, [sp, #12]
 800fb72:	460d      	mov	r5, r1
 800fb74:	4689      	mov	r9, r1
 800fb76:	e016      	b.n	800fba6 <ai_platform_outputs_get+0xc2>
 800fb78:	9a01      	ldr	r2, [sp, #4]
 800fb7a:	2301      	movs	r3, #1
 800fb7c:	f848 3002 	str.w	r3, [r8, r2]
 800fb80:	69b2      	ldr	r2, [r6, #24]
 800fb82:	f04f 0301 	mov.w	r3, #1
 800fb86:	6856      	ldr	r6, [r2, #4]
 800fb88:	3501      	adds	r5, #1
 800fb8a:	f109 091c 	add.w	r9, r9, #28
 800fb8e:	7523      	strb	r3, [r4, #20]
 800fb90:	2300      	movs	r3, #0
 800fb92:	6962      	ldr	r2, [r4, #20]
 800fb94:	60a7      	str	r7, [r4, #8]
 800fb96:	f36b 221f 	bfi	r2, fp, #8, #24
 800fb9a:	6126      	str	r6, [r4, #16]
 800fb9c:	61a1      	str	r1, [r4, #24]
 800fb9e:	60e3      	str	r3, [r4, #12]
 800fba0:	6162      	str	r2, [r4, #20]
 800fba2:	e9c4 0c00 	strd	r0, ip, [r4]
 800fba6:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800fbaa:	b2ac      	uxth	r4, r5
 800fbac:	42ab      	cmp	r3, r5
 800fbae:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 800fbb2:	9301      	str	r3, [sp, #4]
 800fbb4:	f240 80a6 	bls.w	800fd04 <ai_platform_outputs_get+0x220>
 800fbb8:	f8da 3010 	ldr.w	r3, [sl, #16]
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	f000 80a1 	beq.w	800fd04 <ai_platform_outputs_get+0x220>
 800fbc2:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800fbc6:	2e00      	cmp	r6, #0
 800fbc8:	f000 809c 	beq.w	800fd04 <ai_platform_outputs_get+0x220>
 800fbcc:	f8da 3014 	ldr.w	r3, [sl, #20]
 800fbd0:	69b2      	ldr	r2, [r6, #24]
 800fbd2:	68f1      	ldr	r1, [r6, #12]
 800fbd4:	6810      	ldr	r0, [r2, #0]
 800fbd6:	9100      	str	r1, [sp, #0]
 800fbd8:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 800fbdc:	68b3      	ldr	r3, [r6, #8]
 800fbde:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 800fbe2:	444c      	add	r4, r9
 800fbe4:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 800fbe8:	f002 fbb8 	bl	801235c <ai_array_to_buffer_fmt>
 800fbec:	69b2      	ldr	r2, [r6, #24]
 800fbee:	9900      	ldr	r1, [sp, #0]
 800fbf0:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800fbf4:	2f00      	cmp	r7, #0
 800fbf6:	d0c4      	beq.n	800fb82 <ai_platform_outputs_get+0x9e>
 800fbf8:	2200      	movs	r2, #0
 800fbfa:	f848 2035 	str.w	r2, [r8, r5, lsl #3]
 800fbfe:	6832      	ldr	r2, [r6, #0]
 800fc00:	607a      	str	r2, [r7, #4]
 800fc02:	b112      	cbz	r2, 800fc0a <ai_platform_outputs_get+0x126>
 800fc04:	8852      	ldrh	r2, [r2, #2]
 800fc06:	2a00      	cmp	r2, #0
 800fc08:	d1b6      	bne.n	800fb78 <ai_platform_outputs_get+0x94>
 800fc0a:	69b2      	ldr	r2, [r6, #24]
 800fc0c:	2700      	movs	r7, #0
 800fc0e:	e7b8      	b.n	800fb82 <ai_platform_outputs_get+0x9e>
 800fc10:	f7ff fbfc 	bl	800f40c <_ai_platform_acquire_crc>
 800fc14:	4b60      	ldr	r3, [pc, #384]	; (800fd98 <ai_platform_outputs_get+0x2b4>)
 800fc16:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fc20:	185a      	adds	r2, r3, r1
 800fc22:	2a01      	cmp	r2, #1
 800fc24:	d92a      	bls.n	800fc7c <ai_platform_outputs_get+0x198>
 800fc26:	f240 4249 	movw	r2, #1097	; 0x449
 800fc2a:	4293      	cmp	r3, r2
 800fc2c:	d026      	beq.n	800fc7c <ai_platform_outputs_get+0x198>
 800fc2e:	4a5b      	ldr	r2, [pc, #364]	; (800fd9c <ai_platform_outputs_get+0x2b8>)
 800fc30:	6813      	ldr	r3, [r2, #0]
 800fc32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fc36:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800fc3a:	d02c      	beq.n	800fc96 <ai_platform_outputs_get+0x1b2>
 800fc3c:	6813      	ldr	r3, [r2, #0]
 800fc3e:	f240 4183 	movw	r1, #1155	; 0x483
 800fc42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fc46:	428b      	cmp	r3, r1
 800fc48:	d072      	beq.n	800fd30 <ai_platform_outputs_get+0x24c>
 800fc4a:	6813      	ldr	r3, [r2, #0]
 800fc4c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fc50:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800fc54:	f000 80ac 	beq.w	800fdb0 <ai_platform_outputs_get+0x2cc>
 800fc58:	6813      	ldr	r3, [r2, #0]
 800fc5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d129      	bne.n	800fcb6 <ai_platform_outputs_get+0x1d2>
 800fc62:	4a4f      	ldr	r2, [pc, #316]	; (800fda0 <ai_platform_outputs_get+0x2bc>)
 800fc64:	2301      	movs	r3, #1
 800fc66:	6093      	str	r3, [r2, #8]
 800fc68:	6893      	ldr	r3, [r2, #8]
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d1fc      	bne.n	800fc68 <ai_platform_outputs_get+0x184>
 800fc6e:	494d      	ldr	r1, [pc, #308]	; (800fda4 <ai_platform_outputs_get+0x2c0>)
 800fc70:	4b4d      	ldr	r3, [pc, #308]	; (800fda8 <ai_platform_outputs_get+0x2c4>)
 800fc72:	6011      	str	r1, [r2, #0]
 800fc74:	6812      	ldr	r2, [r2, #0]
 800fc76:	429a      	cmp	r2, r3
 800fc78:	d01d      	beq.n	800fcb6 <ai_platform_outputs_get+0x1d2>
 800fc7a:	e7fe      	b.n	800fc7a <ai_platform_outputs_get+0x196>
 800fc7c:	4a48      	ldr	r2, [pc, #288]	; (800fda0 <ai_platform_outputs_get+0x2bc>)
 800fc7e:	2301      	movs	r3, #1
 800fc80:	6093      	str	r3, [r2, #8]
 800fc82:	6893      	ldr	r3, [r2, #8]
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d1fc      	bne.n	800fc82 <ai_platform_outputs_get+0x19e>
 800fc88:	4946      	ldr	r1, [pc, #280]	; (800fda4 <ai_platform_outputs_get+0x2c0>)
 800fc8a:	4b47      	ldr	r3, [pc, #284]	; (800fda8 <ai_platform_outputs_get+0x2c4>)
 800fc8c:	6011      	str	r1, [r2, #0]
 800fc8e:	6812      	ldr	r2, [r2, #0]
 800fc90:	429a      	cmp	r2, r3
 800fc92:	d010      	beq.n	800fcb6 <ai_platform_outputs_get+0x1d2>
 800fc94:	e7fe      	b.n	800fc94 <ai_platform_outputs_get+0x1b0>
 800fc96:	4a45      	ldr	r2, [pc, #276]	; (800fdac <ai_platform_outputs_get+0x2c8>)
 800fc98:	2301      	movs	r3, #1
 800fc9a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800fc9e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d1fb      	bne.n	800fc9e <ai_platform_outputs_get+0x1ba>
 800fca6:	493f      	ldr	r1, [pc, #252]	; (800fda4 <ai_platform_outputs_get+0x2c0>)
 800fca8:	4b3f      	ldr	r3, [pc, #252]	; (800fda8 <ai_platform_outputs_get+0x2c4>)
 800fcaa:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800fcae:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800fcb2:	429a      	cmp	r2, r3
 800fcb4:	d113      	bne.n	800fcde <ai_platform_outputs_get+0x1fa>
 800fcb6:	f7ff fbab 	bl	800f410 <_ai_platform_release_crc>
 800fcba:	2000      	movs	r0, #0
 800fcbc:	b005      	add	sp, #20
 800fcbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcc2:	4a37      	ldr	r2, [pc, #220]	; (800fda0 <ai_platform_outputs_get+0x2bc>)
 800fcc4:	2301      	movs	r3, #1
 800fcc6:	6093      	str	r3, [r2, #8]
 800fcc8:	6893      	ldr	r3, [r2, #8]
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d1fc      	bne.n	800fcc8 <ai_platform_outputs_get+0x1e4>
 800fcce:	4b35      	ldr	r3, [pc, #212]	; (800fda4 <ai_platform_outputs_get+0x2c0>)
 800fcd0:	6013      	str	r3, [r2, #0]
 800fcd2:	4b35      	ldr	r3, [pc, #212]	; (800fda8 <ai_platform_outputs_get+0x2c4>)
 800fcd4:	6812      	ldr	r2, [r2, #0]
 800fcd6:	429a      	cmp	r2, r3
 800fcd8:	f43f af3f 	beq.w	800fb5a <ai_platform_outputs_get+0x76>
 800fcdc:	e7fe      	b.n	800fcdc <ai_platform_outputs_get+0x1f8>
 800fcde:	e7fe      	b.n	800fcde <ai_platform_outputs_get+0x1fa>
 800fce0:	4a32      	ldr	r2, [pc, #200]	; (800fdac <ai_platform_outputs_get+0x2c8>)
 800fce2:	2301      	movs	r3, #1
 800fce4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800fce8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d1fb      	bne.n	800fce8 <ai_platform_outputs_get+0x204>
 800fcf0:	4b2c      	ldr	r3, [pc, #176]	; (800fda4 <ai_platform_outputs_get+0x2c0>)
 800fcf2:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800fcf6:	4b2c      	ldr	r3, [pc, #176]	; (800fda8 <ai_platform_outputs_get+0x2c4>)
 800fcf8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800fcfc:	429a      	cmp	r2, r3
 800fcfe:	f43f af2c 	beq.w	800fb5a <ai_platform_outputs_get+0x76>
 800fd02:	e7fe      	b.n	800fd02 <ai_platform_outputs_get+0x21e>
 800fd04:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800fd08:	b14c      	cbz	r4, 800fd1e <ai_platform_outputs_get+0x23a>
 800fd0a:	f8da 3014 	ldr.w	r3, [sl, #20]
 800fd0e:	6858      	ldr	r0, [r3, #4]
 800fd10:	9b02      	ldr	r3, [sp, #8]
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d0d2      	beq.n	800fcbc <ai_platform_outputs_get+0x1d8>
 800fd16:	801c      	strh	r4, [r3, #0]
 800fd18:	b005      	add	sp, #20
 800fd1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd1e:	2400      	movs	r4, #0
 800fd20:	2218      	movs	r2, #24
 800fd22:	2111      	movs	r1, #17
 800fd24:	f109 0010 	add.w	r0, r9, #16
 800fd28:	f000 ffe8 	bl	8010cfc <core_set_error>
 800fd2c:	4620      	mov	r0, r4
 800fd2e:	e7ef      	b.n	800fd10 <ai_platform_outputs_get+0x22c>
 800fd30:	4a1e      	ldr	r2, [pc, #120]	; (800fdac <ai_platform_outputs_get+0x2c8>)
 800fd32:	2301      	movs	r3, #1
 800fd34:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800fd38:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d1fb      	bne.n	800fd38 <ai_platform_outputs_get+0x254>
 800fd40:	4918      	ldr	r1, [pc, #96]	; (800fda4 <ai_platform_outputs_get+0x2c0>)
 800fd42:	4b19      	ldr	r3, [pc, #100]	; (800fda8 <ai_platform_outputs_get+0x2c4>)
 800fd44:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800fd48:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800fd4c:	429a      	cmp	r2, r3
 800fd4e:	d0b2      	beq.n	800fcb6 <ai_platform_outputs_get+0x1d2>
 800fd50:	e7fe      	b.n	800fd50 <ai_platform_outputs_get+0x26c>
 800fd52:	4a16      	ldr	r2, [pc, #88]	; (800fdac <ai_platform_outputs_get+0x2c8>)
 800fd54:	2301      	movs	r3, #1
 800fd56:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800fd5a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d1fb      	bne.n	800fd5a <ai_platform_outputs_get+0x276>
 800fd62:	4b10      	ldr	r3, [pc, #64]	; (800fda4 <ai_platform_outputs_get+0x2c0>)
 800fd64:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800fd68:	4b0f      	ldr	r3, [pc, #60]	; (800fda8 <ai_platform_outputs_get+0x2c4>)
 800fd6a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800fd6e:	429a      	cmp	r2, r3
 800fd70:	f43f aef3 	beq.w	800fb5a <ai_platform_outputs_get+0x76>
 800fd74:	e7fe      	b.n	800fd74 <ai_platform_outputs_get+0x290>
 800fd76:	4a0a      	ldr	r2, [pc, #40]	; (800fda0 <ai_platform_outputs_get+0x2bc>)
 800fd78:	2301      	movs	r3, #1
 800fd7a:	6093      	str	r3, [r2, #8]
 800fd7c:	6893      	ldr	r3, [r2, #8]
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d1fc      	bne.n	800fd7c <ai_platform_outputs_get+0x298>
 800fd82:	4b08      	ldr	r3, [pc, #32]	; (800fda4 <ai_platform_outputs_get+0x2c0>)
 800fd84:	6013      	str	r3, [r2, #0]
 800fd86:	4b08      	ldr	r3, [pc, #32]	; (800fda8 <ai_platform_outputs_get+0x2c4>)
 800fd88:	6812      	ldr	r2, [r2, #0]
 800fd8a:	429a      	cmp	r2, r3
 800fd8c:	f43f aee5 	beq.w	800fb5a <ai_platform_outputs_get+0x76>
 800fd90:	e7fe      	b.n	800fd90 <ai_platform_outputs_get+0x2ac>
 800fd92:	bf00      	nop
 800fd94:	a1c00100 	.word	0xa1c00100
 800fd98:	e0042000 	.word	0xe0042000
 800fd9c:	5c001000 	.word	0x5c001000
 800fda0:	40023000 	.word	0x40023000
 800fda4:	f407a5c2 	.word	0xf407a5c2
 800fda8:	b5e8b5cd 	.word	0xb5e8b5cd
 800fdac:	58024000 	.word	0x58024000
 800fdb0:	4a0d      	ldr	r2, [pc, #52]	; (800fde8 <ai_platform_outputs_get+0x304>)
 800fdb2:	2301      	movs	r3, #1
 800fdb4:	6093      	str	r3, [r2, #8]
 800fdb6:	6893      	ldr	r3, [r2, #8]
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d1fc      	bne.n	800fdb6 <ai_platform_outputs_get+0x2d2>
 800fdbc:	490b      	ldr	r1, [pc, #44]	; (800fdec <ai_platform_outputs_get+0x308>)
 800fdbe:	4b0c      	ldr	r3, [pc, #48]	; (800fdf0 <ai_platform_outputs_get+0x30c>)
 800fdc0:	6011      	str	r1, [r2, #0]
 800fdc2:	6812      	ldr	r2, [r2, #0]
 800fdc4:	429a      	cmp	r2, r3
 800fdc6:	f43f af76 	beq.w	800fcb6 <ai_platform_outputs_get+0x1d2>
 800fdca:	e7fe      	b.n	800fdca <ai_platform_outputs_get+0x2e6>
 800fdcc:	4a06      	ldr	r2, [pc, #24]	; (800fde8 <ai_platform_outputs_get+0x304>)
 800fdce:	2301      	movs	r3, #1
 800fdd0:	6093      	str	r3, [r2, #8]
 800fdd2:	6893      	ldr	r3, [r2, #8]
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d1fc      	bne.n	800fdd2 <ai_platform_outputs_get+0x2ee>
 800fdd8:	4b04      	ldr	r3, [pc, #16]	; (800fdec <ai_platform_outputs_get+0x308>)
 800fdda:	6013      	str	r3, [r2, #0]
 800fddc:	4b04      	ldr	r3, [pc, #16]	; (800fdf0 <ai_platform_outputs_get+0x30c>)
 800fdde:	6812      	ldr	r2, [r2, #0]
 800fde0:	429a      	cmp	r2, r3
 800fde2:	f43f aeba 	beq.w	800fb5a <ai_platform_outputs_get+0x76>
 800fde6:	e7fe      	b.n	800fde6 <ai_platform_outputs_get+0x302>
 800fde8:	40023000 	.word	0x40023000
 800fdec:	f407a5c2 	.word	0xf407a5c2
 800fdf0:	b5e8b5cd 	.word	0xb5e8b5cd

0800fdf4 <ai_platform_network_create>:
 800fdf4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fdf8:	b083      	sub	sp, #12
 800fdfa:	4604      	mov	r4, r0
 800fdfc:	4615      	mov	r5, r2
 800fdfe:	461e      	mov	r6, r3
 800fe00:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 800fe04:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 800fe08:	f7ff fb00 	bl	800f40c <_ai_platform_acquire_crc>
 800fe0c:	2800      	cmp	r0, #0
 800fe0e:	f000 80bd 	beq.w	800ff8c <ai_platform_network_create+0x198>
 800fe12:	4ba5      	ldr	r3, [pc, #660]	; (80100a8 <ai_platform_network_create+0x2b4>)
 800fe14:	f46f 6c8a 	mvn.w	ip, #1104	; 0x450
 800fe18:	4601      	mov	r1, r0
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fe20:	eb03 020c 	add.w	r2, r3, ip
 800fe24:	2a01      	cmp	r2, #1
 800fe26:	f240 80a8 	bls.w	800ff7a <ai_platform_network_create+0x186>
 800fe2a:	f240 4249 	movw	r2, #1097	; 0x449
 800fe2e:	4293      	cmp	r3, r2
 800fe30:	f000 80a3 	beq.w	800ff7a <ai_platform_network_create+0x186>
 800fe34:	4a9d      	ldr	r2, [pc, #628]	; (80100ac <ai_platform_network_create+0x2b8>)
 800fe36:	6813      	ldr	r3, [r2, #0]
 800fe38:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fe3c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800fe40:	f000 80b9 	beq.w	800ffb6 <ai_platform_network_create+0x1c2>
 800fe44:	6813      	ldr	r3, [r2, #0]
 800fe46:	f240 4c83 	movw	ip, #1155	; 0x483
 800fe4a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fe4e:	4563      	cmp	r3, ip
 800fe50:	f000 80a1 	beq.w	800ff96 <ai_platform_network_create+0x1a2>
 800fe54:	6813      	ldr	r3, [r2, #0]
 800fe56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fe5a:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800fe5e:	f000 8153 	beq.w	8010108 <ai_platform_network_create+0x314>
 800fe62:	6813      	ldr	r3, [r2, #0]
 800fe64:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	f040 808d 	bne.w	800ff88 <ai_platform_network_create+0x194>
 800fe6e:	4a90      	ldr	r2, [pc, #576]	; (80100b0 <ai_platform_network_create+0x2bc>)
 800fe70:	2318      	movs	r3, #24
 800fe72:	6093      	str	r3, [r2, #8]
 800fe74:	6893      	ldr	r3, [r2, #8]
 800fe76:	2b18      	cmp	r3, #24
 800fe78:	f040 8086 	bne.w	800ff88 <ai_platform_network_create+0x194>
 800fe7c:	2301      	movs	r3, #1
 800fe7e:	6093      	str	r3, [r2, #8]
 800fe80:	6893      	ldr	r3, [r2, #8]
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d1fc      	bne.n	800fe80 <ai_platform_network_create+0x8c>
 800fe86:	4608      	mov	r0, r1
 800fe88:	f7ff fac2 	bl	800f410 <_ai_platform_release_crc>
 800fe8c:	f7ff fabe 	bl	800f40c <_ai_platform_acquire_crc>
 800fe90:	4b85      	ldr	r3, [pc, #532]	; (80100a8 <ai_platform_network_create+0x2b4>)
 800fe92:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fe9c:	189a      	adds	r2, r3, r2
 800fe9e:	2a01      	cmp	r2, #1
 800fea0:	f240 809f 	bls.w	800ffe2 <ai_platform_network_create+0x1ee>
 800fea4:	f240 4249 	movw	r2, #1097	; 0x449
 800fea8:	4293      	cmp	r3, r2
 800feaa:	f000 809a 	beq.w	800ffe2 <ai_platform_network_create+0x1ee>
 800feae:	4a7f      	ldr	r2, [pc, #508]	; (80100ac <ai_platform_network_create+0x2b8>)
 800feb0:	6813      	ldr	r3, [r2, #0]
 800feb2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800feb6:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800feba:	f000 80a0 	beq.w	800fffe <ai_platform_network_create+0x20a>
 800febe:	6813      	ldr	r3, [r2, #0]
 800fec0:	f240 4183 	movw	r1, #1155	; 0x483
 800fec4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fec8:	428b      	cmp	r3, r1
 800feca:	f000 80bf 	beq.w	801004c <ai_platform_network_create+0x258>
 800fece:	6813      	ldr	r3, [r2, #0]
 800fed0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fed4:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800fed8:	f000 8123 	beq.w	8010122 <ai_platform_network_create+0x32e>
 800fedc:	6813      	ldr	r3, [r2, #0]
 800fede:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	f000 80c4 	beq.w	8010070 <ai_platform_network_create+0x27c>
 800fee8:	f7ff fa92 	bl	800f410 <_ai_platform_release_crc>
 800feec:	2c00      	cmp	r4, #0
 800feee:	f000 80aa 	beq.w	8010046 <ai_platform_network_create+0x252>
 800fef2:	4b70      	ldr	r3, [pc, #448]	; (80100b4 <ai_platform_network_create+0x2c0>)
 800fef4:	602b      	str	r3, [r5, #0]
 800fef6:	6025      	str	r5, [r4, #0]
 800fef8:	f000 fef8 	bl	8010cec <core_init>
 800fefc:	2800      	cmp	r0, #0
 800fefe:	f000 8090 	beq.w	8010022 <ai_platform_network_create+0x22e>
 800ff02:	f7ff fa83 	bl	800f40c <_ai_platform_acquire_crc>
 800ff06:	4b68      	ldr	r3, [pc, #416]	; (80100a8 <ai_platform_network_create+0x2b4>)
 800ff08:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ff12:	185a      	adds	r2, r3, r1
 800ff14:	2a01      	cmp	r2, #1
 800ff16:	f240 80b9 	bls.w	801008c <ai_platform_network_create+0x298>
 800ff1a:	f240 4249 	movw	r2, #1097	; 0x449
 800ff1e:	4293      	cmp	r3, r2
 800ff20:	f000 80b4 	beq.w	801008c <ai_platform_network_create+0x298>
 800ff24:	4a61      	ldr	r2, [pc, #388]	; (80100ac <ai_platform_network_create+0x2b8>)
 800ff26:	6813      	ldr	r3, [r2, #0]
 800ff28:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ff2c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800ff30:	f000 80c8 	beq.w	80100c4 <ai_platform_network_create+0x2d0>
 800ff34:	6813      	ldr	r3, [r2, #0]
 800ff36:	f240 4183 	movw	r1, #1155	; 0x483
 800ff3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ff3e:	428b      	cmp	r3, r1
 800ff40:	f000 8107 	beq.w	8010152 <ai_platform_network_create+0x35e>
 800ff44:	6813      	ldr	r3, [r2, #0]
 800ff46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ff4a:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800ff4e:	f000 8111 	beq.w	8010174 <ai_platform_network_create+0x380>
 800ff52:	6813      	ldr	r3, [r2, #0]
 800ff54:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	f040 80c3 	bne.w	80100e4 <ai_platform_network_create+0x2f0>
 800ff5e:	4b54      	ldr	r3, [pc, #336]	; (80100b0 <ai_platform_network_create+0x2bc>)
 800ff60:	2201      	movs	r2, #1
 800ff62:	609a      	str	r2, [r3, #8]
 800ff64:	689a      	ldr	r2, [r3, #8]
 800ff66:	2a00      	cmp	r2, #0
 800ff68:	d1fc      	bne.n	800ff64 <ai_platform_network_create+0x170>
 800ff6a:	4a53      	ldr	r2, [pc, #332]	; (80100b8 <ai_platform_network_create+0x2c4>)
 800ff6c:	601a      	str	r2, [r3, #0]
 800ff6e:	681a      	ldr	r2, [r3, #0]
 800ff70:	4b52      	ldr	r3, [pc, #328]	; (80100bc <ai_platform_network_create+0x2c8>)
 800ff72:	429a      	cmp	r2, r3
 800ff74:	f000 80b6 	beq.w	80100e4 <ai_platform_network_create+0x2f0>
 800ff78:	e7fe      	b.n	800ff78 <ai_platform_network_create+0x184>
 800ff7a:	4b4d      	ldr	r3, [pc, #308]	; (80100b0 <ai_platform_network_create+0x2bc>)
 800ff7c:	2218      	movs	r2, #24
 800ff7e:	609a      	str	r2, [r3, #8]
 800ff80:	689a      	ldr	r2, [r3, #8]
 800ff82:	2a18      	cmp	r2, #24
 800ff84:	d027      	beq.n	800ffd6 <ai_platform_network_create+0x1e2>
 800ff86:	4608      	mov	r0, r1
 800ff88:	f7ff fa42 	bl	800f410 <_ai_platform_release_crc>
 800ff8c:	f244 1033 	movw	r0, #16691	; 0x4133
 800ff90:	b003      	add	sp, #12
 800ff92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ff96:	4a4a      	ldr	r2, [pc, #296]	; (80100c0 <ai_platform_network_create+0x2cc>)
 800ff98:	2318      	movs	r3, #24
 800ff9a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800ff9e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800ffa2:	2b18      	cmp	r3, #24
 800ffa4:	d1f0      	bne.n	800ff88 <ai_platform_network_create+0x194>
 800ffa6:	2301      	movs	r3, #1
 800ffa8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800ffac:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d1fb      	bne.n	800ffac <ai_platform_network_create+0x1b8>
 800ffb4:	e767      	b.n	800fe86 <ai_platform_network_create+0x92>
 800ffb6:	4a42      	ldr	r2, [pc, #264]	; (80100c0 <ai_platform_network_create+0x2cc>)
 800ffb8:	2318      	movs	r3, #24
 800ffba:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800ffbe:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800ffc2:	2b18      	cmp	r3, #24
 800ffc4:	d1e0      	bne.n	800ff88 <ai_platform_network_create+0x194>
 800ffc6:	2301      	movs	r3, #1
 800ffc8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800ffcc:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d1fb      	bne.n	800ffcc <ai_platform_network_create+0x1d8>
 800ffd4:	e757      	b.n	800fe86 <ai_platform_network_create+0x92>
 800ffd6:	2201      	movs	r2, #1
 800ffd8:	609a      	str	r2, [r3, #8]
 800ffda:	689a      	ldr	r2, [r3, #8]
 800ffdc:	2a00      	cmp	r2, #0
 800ffde:	d1fc      	bne.n	800ffda <ai_platform_network_create+0x1e6>
 800ffe0:	e751      	b.n	800fe86 <ai_platform_network_create+0x92>
 800ffe2:	4a33      	ldr	r2, [pc, #204]	; (80100b0 <ai_platform_network_create+0x2bc>)
 800ffe4:	2301      	movs	r3, #1
 800ffe6:	6093      	str	r3, [r2, #8]
 800ffe8:	6891      	ldr	r1, [r2, #8]
 800ffea:	2900      	cmp	r1, #0
 800ffec:	d1fc      	bne.n	800ffe8 <ai_platform_network_create+0x1f4>
 800ffee:	4b32      	ldr	r3, [pc, #200]	; (80100b8 <ai_platform_network_create+0x2c4>)
 800fff0:	6013      	str	r3, [r2, #0]
 800fff2:	4b32      	ldr	r3, [pc, #200]	; (80100bc <ai_platform_network_create+0x2c8>)
 800fff4:	6812      	ldr	r2, [r2, #0]
 800fff6:	429a      	cmp	r2, r3
 800fff8:	f43f af76 	beq.w	800fee8 <ai_platform_network_create+0xf4>
 800fffc:	e7fe      	b.n	800fffc <ai_platform_network_create+0x208>
 800fffe:	4a30      	ldr	r2, [pc, #192]	; (80100c0 <ai_platform_network_create+0x2cc>)
 8010000:	2301      	movs	r3, #1
 8010002:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8010006:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801000a:	2b00      	cmp	r3, #0
 801000c:	d1fb      	bne.n	8010006 <ai_platform_network_create+0x212>
 801000e:	4b2a      	ldr	r3, [pc, #168]	; (80100b8 <ai_platform_network_create+0x2c4>)
 8010010:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8010014:	4b29      	ldr	r3, [pc, #164]	; (80100bc <ai_platform_network_create+0x2c8>)
 8010016:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 801001a:	429a      	cmp	r2, r3
 801001c:	f43f af64 	beq.w	800fee8 <ai_platform_network_create+0xf4>
 8010020:	e7fe      	b.n	8010020 <ai_platform_network_create+0x22c>
 8010022:	f04f 0930 	mov.w	r9, #48	; 0x30
 8010026:	2300      	movs	r3, #0
 8010028:	6023      	str	r3, [r4, #0]
 801002a:	2410      	movs	r4, #16
 801002c:	4642      	mov	r2, r8
 801002e:	4639      	mov	r1, r7
 8010030:	4630      	mov	r0, r6
 8010032:	f002 fa37 	bl	80124a4 <ai_version_get>
 8010036:	4603      	mov	r3, r0
 8010038:	2000      	movs	r0, #0
 801003a:	64ab      	str	r3, [r5, #72]	; 0x48
 801003c:	f369 0007 	bfi	r0, r9, #0, #8
 8010040:	f364 201f 	bfi	r0, r4, #8, #24
 8010044:	e7a4      	b.n	800ff90 <ai_platform_network_create+0x19c>
 8010046:	f241 0010 	movw	r0, #4112	; 0x1010
 801004a:	e7a1      	b.n	800ff90 <ai_platform_network_create+0x19c>
 801004c:	4a1c      	ldr	r2, [pc, #112]	; (80100c0 <ai_platform_network_create+0x2cc>)
 801004e:	2301      	movs	r3, #1
 8010050:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8010054:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8010058:	2b00      	cmp	r3, #0
 801005a:	d1fb      	bne.n	8010054 <ai_platform_network_create+0x260>
 801005c:	4b16      	ldr	r3, [pc, #88]	; (80100b8 <ai_platform_network_create+0x2c4>)
 801005e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8010062:	4b16      	ldr	r3, [pc, #88]	; (80100bc <ai_platform_network_create+0x2c8>)
 8010064:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8010068:	429a      	cmp	r2, r3
 801006a:	f43f af3d 	beq.w	800fee8 <ai_platform_network_create+0xf4>
 801006e:	e7fe      	b.n	801006e <ai_platform_network_create+0x27a>
 8010070:	4a0f      	ldr	r2, [pc, #60]	; (80100b0 <ai_platform_network_create+0x2bc>)
 8010072:	2301      	movs	r3, #1
 8010074:	6093      	str	r3, [r2, #8]
 8010076:	6893      	ldr	r3, [r2, #8]
 8010078:	2b00      	cmp	r3, #0
 801007a:	d1fc      	bne.n	8010076 <ai_platform_network_create+0x282>
 801007c:	4b0e      	ldr	r3, [pc, #56]	; (80100b8 <ai_platform_network_create+0x2c4>)
 801007e:	6013      	str	r3, [r2, #0]
 8010080:	4b0e      	ldr	r3, [pc, #56]	; (80100bc <ai_platform_network_create+0x2c8>)
 8010082:	6812      	ldr	r2, [r2, #0]
 8010084:	429a      	cmp	r2, r3
 8010086:	f43f af2f 	beq.w	800fee8 <ai_platform_network_create+0xf4>
 801008a:	e7fe      	b.n	801008a <ai_platform_network_create+0x296>
 801008c:	4a08      	ldr	r2, [pc, #32]	; (80100b0 <ai_platform_network_create+0x2bc>)
 801008e:	2301      	movs	r3, #1
 8010090:	6093      	str	r3, [r2, #8]
 8010092:	6893      	ldr	r3, [r2, #8]
 8010094:	2b00      	cmp	r3, #0
 8010096:	d1fc      	bne.n	8010092 <ai_platform_network_create+0x29e>
 8010098:	4b07      	ldr	r3, [pc, #28]	; (80100b8 <ai_platform_network_create+0x2c4>)
 801009a:	6013      	str	r3, [r2, #0]
 801009c:	4b07      	ldr	r3, [pc, #28]	; (80100bc <ai_platform_network_create+0x2c8>)
 801009e:	6812      	ldr	r2, [r2, #0]
 80100a0:	429a      	cmp	r2, r3
 80100a2:	d01f      	beq.n	80100e4 <ai_platform_network_create+0x2f0>
 80100a4:	e7fe      	b.n	80100a4 <ai_platform_network_create+0x2b0>
 80100a6:	bf00      	nop
 80100a8:	e0042000 	.word	0xe0042000
 80100ac:	5c001000 	.word	0x5c001000
 80100b0:	40023000 	.word	0x40023000
 80100b4:	a1c00100 	.word	0xa1c00100
 80100b8:	f407a5c2 	.word	0xf407a5c2
 80100bc:	b5e8b5cd 	.word	0xb5e8b5cd
 80100c0:	58024000 	.word	0x58024000
 80100c4:	4a33      	ldr	r2, [pc, #204]	; (8010194 <ai_platform_network_create+0x3a0>)
 80100c6:	2301      	movs	r3, #1
 80100c8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80100cc:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d1fb      	bne.n	80100cc <ai_platform_network_create+0x2d8>
 80100d4:	4b30      	ldr	r3, [pc, #192]	; (8010198 <ai_platform_network_create+0x3a4>)
 80100d6:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80100da:	4b30      	ldr	r3, [pc, #192]	; (801019c <ai_platform_network_create+0x3a8>)
 80100dc:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80100e0:	429a      	cmp	r2, r3
 80100e2:	d12c      	bne.n	801013e <ai_platform_network_create+0x34a>
 80100e4:	f7ff f994 	bl	800f410 <_ai_platform_release_crc>
 80100e8:	2200      	movs	r2, #0
 80100ea:	4639      	mov	r1, r7
 80100ec:	4630      	mov	r0, r6
 80100ee:	f002 f9d9 	bl	80124a4 <ai_version_get>
 80100f2:	4681      	mov	r9, r0
 80100f4:	2200      	movs	r2, #0
 80100f6:	2105      	movs	r1, #5
 80100f8:	2001      	movs	r0, #1
 80100fa:	f002 f9d3 	bl	80124a4 <ai_version_get>
 80100fe:	4581      	cmp	r9, r0
 8010100:	d01e      	beq.n	8010140 <ai_platform_network_create+0x34c>
 8010102:	f04f 0901 	mov.w	r9, #1
 8010106:	e78e      	b.n	8010026 <ai_platform_network_create+0x232>
 8010108:	4b25      	ldr	r3, [pc, #148]	; (80101a0 <ai_platform_network_create+0x3ac>)
 801010a:	2218      	movs	r2, #24
 801010c:	609a      	str	r2, [r3, #8]
 801010e:	689a      	ldr	r2, [r3, #8]
 8010110:	2a18      	cmp	r2, #24
 8010112:	f47f af39 	bne.w	800ff88 <ai_platform_network_create+0x194>
 8010116:	2201      	movs	r2, #1
 8010118:	609a      	str	r2, [r3, #8]
 801011a:	689a      	ldr	r2, [r3, #8]
 801011c:	2a00      	cmp	r2, #0
 801011e:	d1fc      	bne.n	801011a <ai_platform_network_create+0x326>
 8010120:	e6b1      	b.n	800fe86 <ai_platform_network_create+0x92>
 8010122:	4a1f      	ldr	r2, [pc, #124]	; (80101a0 <ai_platform_network_create+0x3ac>)
 8010124:	2301      	movs	r3, #1
 8010126:	6093      	str	r3, [r2, #8]
 8010128:	6893      	ldr	r3, [r2, #8]
 801012a:	2b00      	cmp	r3, #0
 801012c:	d1fc      	bne.n	8010128 <ai_platform_network_create+0x334>
 801012e:	4b1a      	ldr	r3, [pc, #104]	; (8010198 <ai_platform_network_create+0x3a4>)
 8010130:	6013      	str	r3, [r2, #0]
 8010132:	4b1a      	ldr	r3, [pc, #104]	; (801019c <ai_platform_network_create+0x3a8>)
 8010134:	6812      	ldr	r2, [r2, #0]
 8010136:	429a      	cmp	r2, r3
 8010138:	f43f aed6 	beq.w	800fee8 <ai_platform_network_create+0xf4>
 801013c:	e7fe      	b.n	801013c <ai_platform_network_create+0x348>
 801013e:	e7fe      	b.n	801013e <ai_platform_network_create+0x34a>
 8010140:	4b18      	ldr	r3, [pc, #96]	; (80101a4 <ai_platform_network_create+0x3b0>)
 8010142:	a801      	add	r0, sp, #4
 8010144:	9301      	str	r3, [sp, #4]
 8010146:	f000 fde5 	bl	8010d14 <ai_check_custom_types>
 801014a:	b300      	cbz	r0, 801018e <ai_platform_network_create+0x39a>
 801014c:	2400      	movs	r4, #0
 801014e:	46a1      	mov	r9, r4
 8010150:	e76c      	b.n	801002c <ai_platform_network_create+0x238>
 8010152:	4b10      	ldr	r3, [pc, #64]	; (8010194 <ai_platform_network_create+0x3a0>)
 8010154:	2201      	movs	r2, #1
 8010156:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 801015a:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 801015e:	2a00      	cmp	r2, #0
 8010160:	d1fb      	bne.n	801015a <ai_platform_network_create+0x366>
 8010162:	4a0d      	ldr	r2, [pc, #52]	; (8010198 <ai_platform_network_create+0x3a4>)
 8010164:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8010168:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 801016c:	4b0b      	ldr	r3, [pc, #44]	; (801019c <ai_platform_network_create+0x3a8>)
 801016e:	429a      	cmp	r2, r3
 8010170:	d0b8      	beq.n	80100e4 <ai_platform_network_create+0x2f0>
 8010172:	e7fe      	b.n	8010172 <ai_platform_network_create+0x37e>
 8010174:	4b0a      	ldr	r3, [pc, #40]	; (80101a0 <ai_platform_network_create+0x3ac>)
 8010176:	2201      	movs	r2, #1
 8010178:	609a      	str	r2, [r3, #8]
 801017a:	689a      	ldr	r2, [r3, #8]
 801017c:	2a00      	cmp	r2, #0
 801017e:	d1fc      	bne.n	801017a <ai_platform_network_create+0x386>
 8010180:	4a05      	ldr	r2, [pc, #20]	; (8010198 <ai_platform_network_create+0x3a4>)
 8010182:	601a      	str	r2, [r3, #0]
 8010184:	681a      	ldr	r2, [r3, #0]
 8010186:	4b05      	ldr	r3, [pc, #20]	; (801019c <ai_platform_network_create+0x3a8>)
 8010188:	429a      	cmp	r2, r3
 801018a:	d0ab      	beq.n	80100e4 <ai_platform_network_create+0x2f0>
 801018c:	e7fe      	b.n	801018c <ai_platform_network_create+0x398>
 801018e:	f04f 0902 	mov.w	r9, #2
 8010192:	e748      	b.n	8010026 <ai_platform_network_create+0x232>
 8010194:	58024000 	.word	0x58024000
 8010198:	f407a5c2 	.word	0xf407a5c2
 801019c:	b5e8b5cd 	.word	0xb5e8b5cd
 80101a0:	40023000 	.word	0x40023000
 80101a4:	84048403 	.word	0x84048403

080101a8 <ai_platform_network_init>:
 80101a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80101ac:	2800      	cmp	r0, #0
 80101ae:	d052      	beq.n	8010256 <ai_platform_network_init+0xae>
 80101b0:	4bab      	ldr	r3, [pc, #684]	; (8010460 <ai_platform_network_init+0x2b8>)
 80101b2:	4604      	mov	r4, r0
 80101b4:	6802      	ldr	r2, [r0, #0]
 80101b6:	429a      	cmp	r2, r3
 80101b8:	d14d      	bne.n	8010256 <ai_platform_network_init+0xae>
 80101ba:	460d      	mov	r5, r1
 80101bc:	f7ff f926 	bl	800f40c <_ai_platform_acquire_crc>
 80101c0:	4ba8      	ldr	r3, [pc, #672]	; (8010464 <ai_platform_network_init+0x2bc>)
 80101c2:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80101cc:	189a      	adds	r2, r3, r2
 80101ce:	2a01      	cmp	r2, #1
 80101d0:	f240 809b 	bls.w	801030a <ai_platform_network_init+0x162>
 80101d4:	f240 4249 	movw	r2, #1097	; 0x449
 80101d8:	4293      	cmp	r3, r2
 80101da:	f000 8096 	beq.w	801030a <ai_platform_network_init+0x162>
 80101de:	4aa2      	ldr	r2, [pc, #648]	; (8010468 <ai_platform_network_init+0x2c0>)
 80101e0:	6813      	ldr	r3, [r2, #0]
 80101e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80101e6:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80101ea:	f000 809d 	beq.w	8010328 <ai_platform_network_init+0x180>
 80101ee:	6813      	ldr	r3, [r2, #0]
 80101f0:	f240 4183 	movw	r1, #1155	; 0x483
 80101f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80101f8:	428b      	cmp	r3, r1
 80101fa:	f000 80e4 	beq.w	80103c6 <ai_platform_network_init+0x21e>
 80101fe:	6813      	ldr	r3, [r2, #0]
 8010200:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010204:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8010208:	f000 811b 	beq.w	8010442 <ai_platform_network_init+0x29a>
 801020c:	6813      	ldr	r3, [r2, #0]
 801020e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010212:	2b00      	cmp	r3, #0
 8010214:	f000 80f9 	beq.w	801040a <ai_platform_network_init+0x262>
 8010218:	f7ff f8fa 	bl	800f410 <_ai_platform_release_crc>
 801021c:	2d00      	cmp	r5, #0
 801021e:	f000 8147 	beq.w	80104b0 <ai_platform_network_init+0x308>
 8010222:	4b92      	ldr	r3, [pc, #584]	; (801046c <ai_platform_network_init+0x2c4>)
 8010224:	682a      	ldr	r2, [r5, #0]
 8010226:	429a      	cmp	r2, r3
 8010228:	f040 8090 	bne.w	801034c <ai_platform_network_init+0x1a4>
 801022c:	692b      	ldr	r3, [r5, #16]
 801022e:	89ae      	ldrh	r6, [r5, #12]
 8010230:	f8b5 c00e 	ldrh.w	ip, [r5, #14]
 8010234:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
 8010238:	62a3      	str	r3, [r4, #40]	; 0x28
 801023a:	e9c4 1207 	strd	r1, r2, [r4, #28]
 801023e:	2303      	movs	r3, #3
 8010240:	84a6      	strh	r6, [r4, #36]	; 0x24
 8010242:	4626      	mov	r6, r4
 8010244:	4620      	mov	r0, r4
 8010246:	f8a4 c026 	strh.w	ip, [r4, #38]	; 0x26
 801024a:	60e3      	str	r3, [r4, #12]
 801024c:	f000 fd8a 	bl	8010d64 <ai_layers_init_all>
 8010250:	4630      	mov	r0, r6
 8010252:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010256:	f7ff f8d9 	bl	800f40c <_ai_platform_acquire_crc>
 801025a:	4b82      	ldr	r3, [pc, #520]	; (8010464 <ai_platform_network_init+0x2bc>)
 801025c:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010266:	185a      	adds	r2, r3, r1
 8010268:	2a01      	cmp	r2, #1
 801026a:	d92b      	bls.n	80102c4 <ai_platform_network_init+0x11c>
 801026c:	f240 4249 	movw	r2, #1097	; 0x449
 8010270:	4293      	cmp	r3, r2
 8010272:	d027      	beq.n	80102c4 <ai_platform_network_init+0x11c>
 8010274:	4a7c      	ldr	r2, [pc, #496]	; (8010468 <ai_platform_network_init+0x2c0>)
 8010276:	6813      	ldr	r3, [r2, #0]
 8010278:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801027c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8010280:	d02d      	beq.n	80102de <ai_platform_network_init+0x136>
 8010282:	6813      	ldr	r3, [r2, #0]
 8010284:	f240 4183 	movw	r1, #1155	; 0x483
 8010288:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801028c:	428b      	cmp	r3, r1
 801028e:	f000 8089 	beq.w	80103a4 <ai_platform_network_init+0x1fc>
 8010292:	6813      	ldr	r3, [r2, #0]
 8010294:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010298:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801029c:	f000 80c3 	beq.w	8010426 <ai_platform_network_init+0x27e>
 80102a0:	6813      	ldr	r3, [r2, #0]
 80102a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d129      	bne.n	80102fe <ai_platform_network_init+0x156>
 80102aa:	4a71      	ldr	r2, [pc, #452]	; (8010470 <ai_platform_network_init+0x2c8>)
 80102ac:	2301      	movs	r3, #1
 80102ae:	6093      	str	r3, [r2, #8]
 80102b0:	6893      	ldr	r3, [r2, #8]
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d1fc      	bne.n	80102b0 <ai_platform_network_init+0x108>
 80102b6:	496f      	ldr	r1, [pc, #444]	; (8010474 <ai_platform_network_init+0x2cc>)
 80102b8:	4b6f      	ldr	r3, [pc, #444]	; (8010478 <ai_platform_network_init+0x2d0>)
 80102ba:	6011      	str	r1, [r2, #0]
 80102bc:	6812      	ldr	r2, [r2, #0]
 80102be:	429a      	cmp	r2, r3
 80102c0:	d01d      	beq.n	80102fe <ai_platform_network_init+0x156>
 80102c2:	e7fe      	b.n	80102c2 <ai_platform_network_init+0x11a>
 80102c4:	4a6a      	ldr	r2, [pc, #424]	; (8010470 <ai_platform_network_init+0x2c8>)
 80102c6:	2301      	movs	r3, #1
 80102c8:	6093      	str	r3, [r2, #8]
 80102ca:	6893      	ldr	r3, [r2, #8]
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d1fc      	bne.n	80102ca <ai_platform_network_init+0x122>
 80102d0:	4968      	ldr	r1, [pc, #416]	; (8010474 <ai_platform_network_init+0x2cc>)
 80102d2:	4b69      	ldr	r3, [pc, #420]	; (8010478 <ai_platform_network_init+0x2d0>)
 80102d4:	6011      	str	r1, [r2, #0]
 80102d6:	6812      	ldr	r2, [r2, #0]
 80102d8:	429a      	cmp	r2, r3
 80102da:	d010      	beq.n	80102fe <ai_platform_network_init+0x156>
 80102dc:	e7fe      	b.n	80102dc <ai_platform_network_init+0x134>
 80102de:	4a67      	ldr	r2, [pc, #412]	; (801047c <ai_platform_network_init+0x2d4>)
 80102e0:	2301      	movs	r3, #1
 80102e2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80102e6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d1fb      	bne.n	80102e6 <ai_platform_network_init+0x13e>
 80102ee:	4961      	ldr	r1, [pc, #388]	; (8010474 <ai_platform_network_init+0x2cc>)
 80102f0:	4b61      	ldr	r3, [pc, #388]	; (8010478 <ai_platform_network_init+0x2d0>)
 80102f2:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 80102f6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80102fa:	429a      	cmp	r2, r3
 80102fc:	d113      	bne.n	8010326 <ai_platform_network_init+0x17e>
 80102fe:	2600      	movs	r6, #0
 8010300:	f7ff f886 	bl	800f410 <_ai_platform_release_crc>
 8010304:	4630      	mov	r0, r6
 8010306:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801030a:	4a59      	ldr	r2, [pc, #356]	; (8010470 <ai_platform_network_init+0x2c8>)
 801030c:	2301      	movs	r3, #1
 801030e:	6093      	str	r3, [r2, #8]
 8010310:	6893      	ldr	r3, [r2, #8]
 8010312:	2b00      	cmp	r3, #0
 8010314:	d1fc      	bne.n	8010310 <ai_platform_network_init+0x168>
 8010316:	4b57      	ldr	r3, [pc, #348]	; (8010474 <ai_platform_network_init+0x2cc>)
 8010318:	6013      	str	r3, [r2, #0]
 801031a:	4b57      	ldr	r3, [pc, #348]	; (8010478 <ai_platform_network_init+0x2d0>)
 801031c:	6812      	ldr	r2, [r2, #0]
 801031e:	429a      	cmp	r2, r3
 8010320:	f43f af7a 	beq.w	8010218 <ai_platform_network_init+0x70>
 8010324:	e7fe      	b.n	8010324 <ai_platform_network_init+0x17c>
 8010326:	e7fe      	b.n	8010326 <ai_platform_network_init+0x17e>
 8010328:	4a54      	ldr	r2, [pc, #336]	; (801047c <ai_platform_network_init+0x2d4>)
 801032a:	2301      	movs	r3, #1
 801032c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8010330:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8010334:	2b00      	cmp	r3, #0
 8010336:	d1fb      	bne.n	8010330 <ai_platform_network_init+0x188>
 8010338:	4b4e      	ldr	r3, [pc, #312]	; (8010474 <ai_platform_network_init+0x2cc>)
 801033a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 801033e:	4b4e      	ldr	r3, [pc, #312]	; (8010478 <ai_platform_network_init+0x2d0>)
 8010340:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8010344:	429a      	cmp	r2, r3
 8010346:	f43f af67 	beq.w	8010218 <ai_platform_network_init+0x70>
 801034a:	e7fe      	b.n	801034a <ai_platform_network_init+0x1a2>
 801034c:	2101      	movs	r1, #1
 801034e:	4628      	mov	r0, r5
 8010350:	f105 081c 	add.w	r8, r5, #28
 8010354:	686e      	ldr	r6, [r5, #4]
 8010356:	f7ff f80b 	bl	800f370 <ai_buffer_get_size>
 801035a:	4607      	mov	r7, r0
 801035c:	2101      	movs	r1, #1
 801035e:	4640      	mov	r0, r8
 8010360:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8010364:	f7ff f804 	bl	800f370 <ai_buffer_get_size>
 8010368:	2f00      	cmp	r7, #0
 801036a:	d13e      	bne.n	80103ea <ai_platform_network_init+0x242>
 801036c:	2800      	cmp	r0, #0
 801036e:	f000 808e 	beq.w	801048e <ai_platform_network_init+0x2e6>
 8010372:	f1b9 0f00 	cmp.w	r9, #0
 8010376:	f000 8094 	beq.w	80104a2 <ai_platform_network_init+0x2fa>
 801037a:	f04f 0c01 	mov.w	ip, #1
 801037e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8010380:	2600      	movs	r6, #0
 8010382:	83e7      	strh	r7, [r4, #30]
 8010384:	4563      	cmp	r3, ip
 8010386:	83a6      	strh	r6, [r4, #28]
 8010388:	d37a      	bcc.n	8010480 <ai_platform_network_init+0x2d8>
 801038a:	f1bc 0f00 	cmp.w	ip, #0
 801038e:	f000 809c 	beq.w	80104ca <ai_platform_network_init+0x322>
 8010392:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8010394:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 8010398:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801039a:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 801039e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80103a2:	e74c      	b.n	801023e <ai_platform_network_init+0x96>
 80103a4:	4a35      	ldr	r2, [pc, #212]	; (801047c <ai_platform_network_init+0x2d4>)
 80103a6:	2301      	movs	r3, #1
 80103a8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80103ac:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d1fb      	bne.n	80103ac <ai_platform_network_init+0x204>
 80103b4:	492f      	ldr	r1, [pc, #188]	; (8010474 <ai_platform_network_init+0x2cc>)
 80103b6:	4b30      	ldr	r3, [pc, #192]	; (8010478 <ai_platform_network_init+0x2d0>)
 80103b8:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 80103bc:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80103c0:	429a      	cmp	r2, r3
 80103c2:	d09c      	beq.n	80102fe <ai_platform_network_init+0x156>
 80103c4:	e7fe      	b.n	80103c4 <ai_platform_network_init+0x21c>
 80103c6:	4a2d      	ldr	r2, [pc, #180]	; (801047c <ai_platform_network_init+0x2d4>)
 80103c8:	2301      	movs	r3, #1
 80103ca:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80103ce:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d1fb      	bne.n	80103ce <ai_platform_network_init+0x226>
 80103d6:	4b27      	ldr	r3, [pc, #156]	; (8010474 <ai_platform_network_init+0x2cc>)
 80103d8:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80103dc:	4b26      	ldr	r3, [pc, #152]	; (8010478 <ai_platform_network_init+0x2d0>)
 80103de:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80103e2:	429a      	cmp	r2, r3
 80103e4:	f43f af18 	beq.w	8010218 <ai_platform_network_init+0x70>
 80103e8:	e7fe      	b.n	80103e8 <ai_platform_network_init+0x240>
 80103ea:	2800      	cmp	r0, #0
 80103ec:	d153      	bne.n	8010496 <ai_platform_network_init+0x2ee>
 80103ee:	4680      	mov	r8, r0
 80103f0:	4684      	mov	ip, r0
 80103f2:	2e00      	cmp	r6, #0
 80103f4:	d063      	beq.n	80104be <ai_platform_network_init+0x316>
 80103f6:	8be6      	ldrh	r6, [r4, #30]
 80103f8:	2e00      	cmp	r6, #0
 80103fa:	d168      	bne.n	80104ce <ai_platform_network_init+0x326>
 80103fc:	2212      	movs	r2, #18
 80103fe:	2116      	movs	r1, #22
 8010400:	f104 0010 	add.w	r0, r4, #16
 8010404:	f000 fc7a 	bl	8010cfc <core_set_error>
 8010408:	e77c      	b.n	8010304 <ai_platform_network_init+0x15c>
 801040a:	4a19      	ldr	r2, [pc, #100]	; (8010470 <ai_platform_network_init+0x2c8>)
 801040c:	2301      	movs	r3, #1
 801040e:	6093      	str	r3, [r2, #8]
 8010410:	6893      	ldr	r3, [r2, #8]
 8010412:	2b00      	cmp	r3, #0
 8010414:	d1fc      	bne.n	8010410 <ai_platform_network_init+0x268>
 8010416:	4b17      	ldr	r3, [pc, #92]	; (8010474 <ai_platform_network_init+0x2cc>)
 8010418:	6013      	str	r3, [r2, #0]
 801041a:	4b17      	ldr	r3, [pc, #92]	; (8010478 <ai_platform_network_init+0x2d0>)
 801041c:	6812      	ldr	r2, [r2, #0]
 801041e:	429a      	cmp	r2, r3
 8010420:	f43f aefa 	beq.w	8010218 <ai_platform_network_init+0x70>
 8010424:	e7fe      	b.n	8010424 <ai_platform_network_init+0x27c>
 8010426:	4a12      	ldr	r2, [pc, #72]	; (8010470 <ai_platform_network_init+0x2c8>)
 8010428:	2301      	movs	r3, #1
 801042a:	6093      	str	r3, [r2, #8]
 801042c:	6893      	ldr	r3, [r2, #8]
 801042e:	2b00      	cmp	r3, #0
 8010430:	d1fc      	bne.n	801042c <ai_platform_network_init+0x284>
 8010432:	4910      	ldr	r1, [pc, #64]	; (8010474 <ai_platform_network_init+0x2cc>)
 8010434:	4b10      	ldr	r3, [pc, #64]	; (8010478 <ai_platform_network_init+0x2d0>)
 8010436:	6011      	str	r1, [r2, #0]
 8010438:	6812      	ldr	r2, [r2, #0]
 801043a:	429a      	cmp	r2, r3
 801043c:	f43f af5f 	beq.w	80102fe <ai_platform_network_init+0x156>
 8010440:	e7fe      	b.n	8010440 <ai_platform_network_init+0x298>
 8010442:	4a0b      	ldr	r2, [pc, #44]	; (8010470 <ai_platform_network_init+0x2c8>)
 8010444:	2301      	movs	r3, #1
 8010446:	6093      	str	r3, [r2, #8]
 8010448:	6893      	ldr	r3, [r2, #8]
 801044a:	2b00      	cmp	r3, #0
 801044c:	d1fc      	bne.n	8010448 <ai_platform_network_init+0x2a0>
 801044e:	4b09      	ldr	r3, [pc, #36]	; (8010474 <ai_platform_network_init+0x2cc>)
 8010450:	6013      	str	r3, [r2, #0]
 8010452:	4b09      	ldr	r3, [pc, #36]	; (8010478 <ai_platform_network_init+0x2d0>)
 8010454:	6812      	ldr	r2, [r2, #0]
 8010456:	429a      	cmp	r2, r3
 8010458:	f43f aede 	beq.w	8010218 <ai_platform_network_init+0x70>
 801045c:	e7fe      	b.n	801045c <ai_platform_network_init+0x2b4>
 801045e:	bf00      	nop
 8010460:	a1c00100 	.word	0xa1c00100
 8010464:	e0042000 	.word	0xe0042000
 8010468:	5c001000 	.word	0x5c001000
 801046c:	a1facade 	.word	0xa1facade
 8010470:	40023000 	.word	0x40023000
 8010474:	f407a5c2 	.word	0xf407a5c2
 8010478:	b5e8b5cd 	.word	0xb5e8b5cd
 801047c:	58024000 	.word	0x58024000
 8010480:	2213      	movs	r2, #19
 8010482:	2116      	movs	r1, #22
 8010484:	f104 0010 	add.w	r0, r4, #16
 8010488:	f000 fc38 	bl	8010cfc <core_set_error>
 801048c:	e73a      	b.n	8010304 <ai_platform_network_init+0x15c>
 801048e:	4607      	mov	r7, r0
 8010490:	4680      	mov	r8, r0
 8010492:	4684      	mov	ip, r0
 8010494:	e773      	b.n	801037e <ai_platform_network_init+0x1d6>
 8010496:	f1b9 0f00 	cmp.w	r9, #0
 801049a:	d002      	beq.n	80104a2 <ai_platform_network_init+0x2fa>
 801049c:	f04f 0c01 	mov.w	ip, #1
 80104a0:	e7a7      	b.n	80103f2 <ai_platform_network_init+0x24a>
 80104a2:	2110      	movs	r1, #16
 80104a4:	2213      	movs	r2, #19
 80104a6:	2600      	movs	r6, #0
 80104a8:	1860      	adds	r0, r4, r1
 80104aa:	f000 fc27 	bl	8010cfc <core_set_error>
 80104ae:	e729      	b.n	8010304 <ai_platform_network_init+0x15c>
 80104b0:	2110      	movs	r1, #16
 80104b2:	2211      	movs	r2, #17
 80104b4:	462e      	mov	r6, r5
 80104b6:	1860      	adds	r0, r4, r1
 80104b8:	f000 fc20 	bl	8010cfc <core_set_error>
 80104bc:	e722      	b.n	8010304 <ai_platform_network_init+0x15c>
 80104be:	2110      	movs	r1, #16
 80104c0:	2212      	movs	r2, #18
 80104c2:	1860      	adds	r0, r4, r1
 80104c4:	f000 fc1a 	bl	8010cfc <core_set_error>
 80104c8:	e71c      	b.n	8010304 <ai_platform_network_init+0x15c>
 80104ca:	4666      	mov	r6, ip
 80104cc:	e6b7      	b.n	801023e <ai_platform_network_init+0x96>
 80104ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80104d0:	6a26      	ldr	r6, [r4, #32]
 80104d2:	2701      	movs	r7, #1
 80104d4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80104d6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80104da:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 80104de:	e74e      	b.n	801037e <ai_platform_network_init+0x1d6>

080104e0 <ai_platform_network_post_init>:
 80104e0:	b538      	push	{r3, r4, r5, lr}
 80104e2:	2800      	cmp	r0, #0
 80104e4:	d04e      	beq.n	8010584 <ai_platform_network_post_init+0xa4>
 80104e6:	4b8c      	ldr	r3, [pc, #560]	; (8010718 <ai_platform_network_post_init+0x238>)
 80104e8:	4604      	mov	r4, r0
 80104ea:	6802      	ldr	r2, [r0, #0]
 80104ec:	429a      	cmp	r2, r3
 80104ee:	d149      	bne.n	8010584 <ai_platform_network_post_init+0xa4>
 80104f0:	f7fe ff8c 	bl	800f40c <_ai_platform_acquire_crc>
 80104f4:	4b89      	ldr	r3, [pc, #548]	; (801071c <ai_platform_network_post_init+0x23c>)
 80104f6:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010500:	189a      	adds	r2, r3, r2
 8010502:	2a01      	cmp	r2, #1
 8010504:	f240 8095 	bls.w	8010632 <ai_platform_network_post_init+0x152>
 8010508:	f240 4249 	movw	r2, #1097	; 0x449
 801050c:	4293      	cmp	r3, r2
 801050e:	f000 8090 	beq.w	8010632 <ai_platform_network_post_init+0x152>
 8010512:	4a83      	ldr	r2, [pc, #524]	; (8010720 <ai_platform_network_post_init+0x240>)
 8010514:	6813      	ldr	r3, [r2, #0]
 8010516:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801051a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801051e:	f000 8096 	beq.w	801064e <ai_platform_network_post_init+0x16e>
 8010522:	6813      	ldr	r3, [r2, #0]
 8010524:	f240 4183 	movw	r1, #1155	; 0x483
 8010528:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801052c:	428b      	cmp	r3, r1
 801052e:	f000 80b8 	beq.w	80106a2 <ai_platform_network_post_init+0x1c2>
 8010532:	6813      	ldr	r3, [r2, #0]
 8010534:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010538:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801053c:	f000 80de 	beq.w	80106fc <ai_platform_network_post_init+0x21c>
 8010540:	6813      	ldr	r3, [r2, #0]
 8010542:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010546:	2b00      	cmp	r3, #0
 8010548:	f000 80bd 	beq.w	80106c6 <ai_platform_network_post_init+0x1e6>
 801054c:	f7fe ff60 	bl	800f410 <_ai_platform_release_crc>
 8010550:	68e3      	ldr	r3, [r4, #12]
 8010552:	f013 0502 	ands.w	r5, r3, #2
 8010556:	f000 808c 	beq.w	8010672 <ai_platform_network_post_init+0x192>
 801055a:	4620      	mov	r0, r4
 801055c:	f000 fc10 	bl	8010d80 <ai_layers_post_init_all>
 8010560:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010562:	b16b      	cbz	r3, 8010580 <ai_platform_network_post_init+0xa0>
 8010564:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8010566:	e007      	b.n	8010578 <ai_platform_network_post_init+0x98>
 8010568:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 801056c:	4798      	blx	r3
 801056e:	692b      	ldr	r3, [r5, #16]
 8010570:	b133      	cbz	r3, 8010580 <ai_platform_network_post_init+0xa0>
 8010572:	42ab      	cmp	r3, r5
 8010574:	461d      	mov	r5, r3
 8010576:	d003      	beq.n	8010580 <ai_platform_network_post_init+0xa0>
 8010578:	4629      	mov	r1, r5
 801057a:	2000      	movs	r0, #0
 801057c:	2d00      	cmp	r5, #0
 801057e:	d1f3      	bne.n	8010568 <ai_platform_network_post_init+0x88>
 8010580:	2001      	movs	r0, #1
 8010582:	bd38      	pop	{r3, r4, r5, pc}
 8010584:	f7fe ff42 	bl	800f40c <_ai_platform_acquire_crc>
 8010588:	4b64      	ldr	r3, [pc, #400]	; (801071c <ai_platform_network_post_init+0x23c>)
 801058a:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010594:	185a      	adds	r2, r3, r1
 8010596:	2a01      	cmp	r2, #1
 8010598:	d92a      	bls.n	80105f0 <ai_platform_network_post_init+0x110>
 801059a:	f240 4249 	movw	r2, #1097	; 0x449
 801059e:	4293      	cmp	r3, r2
 80105a0:	d026      	beq.n	80105f0 <ai_platform_network_post_init+0x110>
 80105a2:	4a5f      	ldr	r2, [pc, #380]	; (8010720 <ai_platform_network_post_init+0x240>)
 80105a4:	6813      	ldr	r3, [r2, #0]
 80105a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80105aa:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80105ae:	d02c      	beq.n	801060a <ai_platform_network_post_init+0x12a>
 80105b0:	6813      	ldr	r3, [r2, #0]
 80105b2:	f240 4183 	movw	r1, #1155	; 0x483
 80105b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80105ba:	428b      	cmp	r3, r1
 80105bc:	d060      	beq.n	8010680 <ai_platform_network_post_init+0x1a0>
 80105be:	6813      	ldr	r3, [r2, #0]
 80105c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80105c4:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80105c8:	f000 808b 	beq.w	80106e2 <ai_platform_network_post_init+0x202>
 80105cc:	6813      	ldr	r3, [r2, #0]
 80105ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d129      	bne.n	801062a <ai_platform_network_post_init+0x14a>
 80105d6:	4a53      	ldr	r2, [pc, #332]	; (8010724 <ai_platform_network_post_init+0x244>)
 80105d8:	2301      	movs	r3, #1
 80105da:	6093      	str	r3, [r2, #8]
 80105dc:	6893      	ldr	r3, [r2, #8]
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d1fc      	bne.n	80105dc <ai_platform_network_post_init+0xfc>
 80105e2:	4951      	ldr	r1, [pc, #324]	; (8010728 <ai_platform_network_post_init+0x248>)
 80105e4:	4b51      	ldr	r3, [pc, #324]	; (801072c <ai_platform_network_post_init+0x24c>)
 80105e6:	6011      	str	r1, [r2, #0]
 80105e8:	6812      	ldr	r2, [r2, #0]
 80105ea:	429a      	cmp	r2, r3
 80105ec:	d01d      	beq.n	801062a <ai_platform_network_post_init+0x14a>
 80105ee:	e7fe      	b.n	80105ee <ai_platform_network_post_init+0x10e>
 80105f0:	4a4c      	ldr	r2, [pc, #304]	; (8010724 <ai_platform_network_post_init+0x244>)
 80105f2:	2301      	movs	r3, #1
 80105f4:	6093      	str	r3, [r2, #8]
 80105f6:	6893      	ldr	r3, [r2, #8]
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d1fc      	bne.n	80105f6 <ai_platform_network_post_init+0x116>
 80105fc:	494a      	ldr	r1, [pc, #296]	; (8010728 <ai_platform_network_post_init+0x248>)
 80105fe:	4b4b      	ldr	r3, [pc, #300]	; (801072c <ai_platform_network_post_init+0x24c>)
 8010600:	6011      	str	r1, [r2, #0]
 8010602:	6812      	ldr	r2, [r2, #0]
 8010604:	429a      	cmp	r2, r3
 8010606:	d010      	beq.n	801062a <ai_platform_network_post_init+0x14a>
 8010608:	e7fe      	b.n	8010608 <ai_platform_network_post_init+0x128>
 801060a:	4a49      	ldr	r2, [pc, #292]	; (8010730 <ai_platform_network_post_init+0x250>)
 801060c:	2301      	movs	r3, #1
 801060e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8010612:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8010616:	2b00      	cmp	r3, #0
 8010618:	d1fb      	bne.n	8010612 <ai_platform_network_post_init+0x132>
 801061a:	4943      	ldr	r1, [pc, #268]	; (8010728 <ai_platform_network_post_init+0x248>)
 801061c:	4b43      	ldr	r3, [pc, #268]	; (801072c <ai_platform_network_post_init+0x24c>)
 801061e:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8010622:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8010626:	429a      	cmp	r2, r3
 8010628:	d110      	bne.n	801064c <ai_platform_network_post_init+0x16c>
 801062a:	f7fe fef1 	bl	800f410 <_ai_platform_release_crc>
 801062e:	2000      	movs	r0, #0
 8010630:	bd38      	pop	{r3, r4, r5, pc}
 8010632:	4a3c      	ldr	r2, [pc, #240]	; (8010724 <ai_platform_network_post_init+0x244>)
 8010634:	2301      	movs	r3, #1
 8010636:	6093      	str	r3, [r2, #8]
 8010638:	6893      	ldr	r3, [r2, #8]
 801063a:	2b00      	cmp	r3, #0
 801063c:	d1fc      	bne.n	8010638 <ai_platform_network_post_init+0x158>
 801063e:	493a      	ldr	r1, [pc, #232]	; (8010728 <ai_platform_network_post_init+0x248>)
 8010640:	4b3a      	ldr	r3, [pc, #232]	; (801072c <ai_platform_network_post_init+0x24c>)
 8010642:	6011      	str	r1, [r2, #0]
 8010644:	6812      	ldr	r2, [r2, #0]
 8010646:	429a      	cmp	r2, r3
 8010648:	d080      	beq.n	801054c <ai_platform_network_post_init+0x6c>
 801064a:	e7fe      	b.n	801064a <ai_platform_network_post_init+0x16a>
 801064c:	e7fe      	b.n	801064c <ai_platform_network_post_init+0x16c>
 801064e:	4a38      	ldr	r2, [pc, #224]	; (8010730 <ai_platform_network_post_init+0x250>)
 8010650:	2301      	movs	r3, #1
 8010652:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8010656:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801065a:	2b00      	cmp	r3, #0
 801065c:	d1fb      	bne.n	8010656 <ai_platform_network_post_init+0x176>
 801065e:	4932      	ldr	r1, [pc, #200]	; (8010728 <ai_platform_network_post_init+0x248>)
 8010660:	4b32      	ldr	r3, [pc, #200]	; (801072c <ai_platform_network_post_init+0x24c>)
 8010662:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8010666:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 801066a:	429a      	cmp	r2, r3
 801066c:	f43f af6e 	beq.w	801054c <ai_platform_network_post_init+0x6c>
 8010670:	e7fe      	b.n	8010670 <ai_platform_network_post_init+0x190>
 8010672:	2210      	movs	r2, #16
 8010674:	2111      	movs	r1, #17
 8010676:	18a0      	adds	r0, r4, r2
 8010678:	f000 fb40 	bl	8010cfc <core_set_error>
 801067c:	4628      	mov	r0, r5
 801067e:	bd38      	pop	{r3, r4, r5, pc}
 8010680:	4a2b      	ldr	r2, [pc, #172]	; (8010730 <ai_platform_network_post_init+0x250>)
 8010682:	2301      	movs	r3, #1
 8010684:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8010688:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801068c:	2b00      	cmp	r3, #0
 801068e:	d1fb      	bne.n	8010688 <ai_platform_network_post_init+0x1a8>
 8010690:	4925      	ldr	r1, [pc, #148]	; (8010728 <ai_platform_network_post_init+0x248>)
 8010692:	4b26      	ldr	r3, [pc, #152]	; (801072c <ai_platform_network_post_init+0x24c>)
 8010694:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8010698:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 801069c:	429a      	cmp	r2, r3
 801069e:	d0c4      	beq.n	801062a <ai_platform_network_post_init+0x14a>
 80106a0:	e7fe      	b.n	80106a0 <ai_platform_network_post_init+0x1c0>
 80106a2:	4a23      	ldr	r2, [pc, #140]	; (8010730 <ai_platform_network_post_init+0x250>)
 80106a4:	2301      	movs	r3, #1
 80106a6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80106aa:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d1fb      	bne.n	80106aa <ai_platform_network_post_init+0x1ca>
 80106b2:	491d      	ldr	r1, [pc, #116]	; (8010728 <ai_platform_network_post_init+0x248>)
 80106b4:	4b1d      	ldr	r3, [pc, #116]	; (801072c <ai_platform_network_post_init+0x24c>)
 80106b6:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 80106ba:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80106be:	429a      	cmp	r2, r3
 80106c0:	f43f af44 	beq.w	801054c <ai_platform_network_post_init+0x6c>
 80106c4:	e7fe      	b.n	80106c4 <ai_platform_network_post_init+0x1e4>
 80106c6:	4a17      	ldr	r2, [pc, #92]	; (8010724 <ai_platform_network_post_init+0x244>)
 80106c8:	2301      	movs	r3, #1
 80106ca:	6093      	str	r3, [r2, #8]
 80106cc:	6893      	ldr	r3, [r2, #8]
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d1fc      	bne.n	80106cc <ai_platform_network_post_init+0x1ec>
 80106d2:	4915      	ldr	r1, [pc, #84]	; (8010728 <ai_platform_network_post_init+0x248>)
 80106d4:	4b15      	ldr	r3, [pc, #84]	; (801072c <ai_platform_network_post_init+0x24c>)
 80106d6:	6011      	str	r1, [r2, #0]
 80106d8:	6812      	ldr	r2, [r2, #0]
 80106da:	429a      	cmp	r2, r3
 80106dc:	f43f af36 	beq.w	801054c <ai_platform_network_post_init+0x6c>
 80106e0:	e7fe      	b.n	80106e0 <ai_platform_network_post_init+0x200>
 80106e2:	4a10      	ldr	r2, [pc, #64]	; (8010724 <ai_platform_network_post_init+0x244>)
 80106e4:	2301      	movs	r3, #1
 80106e6:	6093      	str	r3, [r2, #8]
 80106e8:	6893      	ldr	r3, [r2, #8]
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d1fc      	bne.n	80106e8 <ai_platform_network_post_init+0x208>
 80106ee:	490e      	ldr	r1, [pc, #56]	; (8010728 <ai_platform_network_post_init+0x248>)
 80106f0:	4b0e      	ldr	r3, [pc, #56]	; (801072c <ai_platform_network_post_init+0x24c>)
 80106f2:	6011      	str	r1, [r2, #0]
 80106f4:	6812      	ldr	r2, [r2, #0]
 80106f6:	429a      	cmp	r2, r3
 80106f8:	d097      	beq.n	801062a <ai_platform_network_post_init+0x14a>
 80106fa:	e7fe      	b.n	80106fa <ai_platform_network_post_init+0x21a>
 80106fc:	4a09      	ldr	r2, [pc, #36]	; (8010724 <ai_platform_network_post_init+0x244>)
 80106fe:	2301      	movs	r3, #1
 8010700:	6093      	str	r3, [r2, #8]
 8010702:	6893      	ldr	r3, [r2, #8]
 8010704:	2b00      	cmp	r3, #0
 8010706:	d1fc      	bne.n	8010702 <ai_platform_network_post_init+0x222>
 8010708:	4907      	ldr	r1, [pc, #28]	; (8010728 <ai_platform_network_post_init+0x248>)
 801070a:	4b08      	ldr	r3, [pc, #32]	; (801072c <ai_platform_network_post_init+0x24c>)
 801070c:	6011      	str	r1, [r2, #0]
 801070e:	6812      	ldr	r2, [r2, #0]
 8010710:	429a      	cmp	r2, r3
 8010712:	f43f af1b 	beq.w	801054c <ai_platform_network_post_init+0x6c>
 8010716:	e7fe      	b.n	8010716 <ai_platform_network_post_init+0x236>
 8010718:	a1c00100 	.word	0xa1c00100
 801071c:	e0042000 	.word	0xe0042000
 8010720:	5c001000 	.word	0x5c001000
 8010724:	40023000 	.word	0x40023000
 8010728:	f407a5c2 	.word	0xf407a5c2
 801072c:	b5e8b5cd 	.word	0xb5e8b5cd
 8010730:	58024000 	.word	0x58024000

08010734 <ai_platform_network_process>:
 8010734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010738:	b085      	sub	sp, #20
 801073a:	460e      	mov	r6, r1
 801073c:	4605      	mov	r5, r0
 801073e:	9201      	str	r2, [sp, #4]
 8010740:	b120      	cbz	r0, 801074c <ai_platform_network_process+0x18>
 8010742:	4b24      	ldr	r3, [pc, #144]	; (80107d4 <ai_platform_network_process+0xa0>)
 8010744:	6802      	ldr	r2, [r0, #0]
 8010746:	429a      	cmp	r2, r3
 8010748:	bf18      	it	ne
 801074a:	2500      	movne	r5, #0
 801074c:	f7fe fe5e 	bl	800f40c <_ai_platform_acquire_crc>
 8010750:	4b21      	ldr	r3, [pc, #132]	; (80107d8 <ai_platform_network_process+0xa4>)
 8010752:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8010756:	681b      	ldr	r3, [r3, #0]
 8010758:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801075c:	185a      	adds	r2, r3, r1
 801075e:	2a01      	cmp	r2, #1
 8010760:	d92b      	bls.n	80107ba <ai_platform_network_process+0x86>
 8010762:	f240 4249 	movw	r2, #1097	; 0x449
 8010766:	4293      	cmp	r3, r2
 8010768:	d027      	beq.n	80107ba <ai_platform_network_process+0x86>
 801076a:	4a1c      	ldr	r2, [pc, #112]	; (80107dc <ai_platform_network_process+0xa8>)
 801076c:	6813      	ldr	r3, [r2, #0]
 801076e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010772:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8010776:	d039      	beq.n	80107ec <ai_platform_network_process+0xb8>
 8010778:	6813      	ldr	r3, [r2, #0]
 801077a:	f240 4183 	movw	r1, #1155	; 0x483
 801077e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010782:	428b      	cmp	r3, r1
 8010784:	f000 819c 	beq.w	8010ac0 <ai_platform_network_process+0x38c>
 8010788:	6813      	ldr	r3, [r2, #0]
 801078a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801078e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8010792:	f000 8179 	beq.w	8010a88 <ai_platform_network_process+0x354>
 8010796:	6813      	ldr	r3, [r2, #0]
 8010798:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801079c:	2b00      	cmp	r3, #0
 801079e:	d136      	bne.n	801080e <ai_platform_network_process+0xda>
 80107a0:	4a0f      	ldr	r2, [pc, #60]	; (80107e0 <ai_platform_network_process+0xac>)
 80107a2:	2301      	movs	r3, #1
 80107a4:	6093      	str	r3, [r2, #8]
 80107a6:	6893      	ldr	r3, [r2, #8]
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d1fc      	bne.n	80107a6 <ai_platform_network_process+0x72>
 80107ac:	4b0d      	ldr	r3, [pc, #52]	; (80107e4 <ai_platform_network_process+0xb0>)
 80107ae:	6013      	str	r3, [r2, #0]
 80107b0:	4b0d      	ldr	r3, [pc, #52]	; (80107e8 <ai_platform_network_process+0xb4>)
 80107b2:	6812      	ldr	r2, [r2, #0]
 80107b4:	429a      	cmp	r2, r3
 80107b6:	d02a      	beq.n	801080e <ai_platform_network_process+0xda>
 80107b8:	e7fe      	b.n	80107b8 <ai_platform_network_process+0x84>
 80107ba:	4a09      	ldr	r2, [pc, #36]	; (80107e0 <ai_platform_network_process+0xac>)
 80107bc:	2301      	movs	r3, #1
 80107be:	6093      	str	r3, [r2, #8]
 80107c0:	6893      	ldr	r3, [r2, #8]
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	d1fc      	bne.n	80107c0 <ai_platform_network_process+0x8c>
 80107c6:	4b07      	ldr	r3, [pc, #28]	; (80107e4 <ai_platform_network_process+0xb0>)
 80107c8:	6013      	str	r3, [r2, #0]
 80107ca:	4b07      	ldr	r3, [pc, #28]	; (80107e8 <ai_platform_network_process+0xb4>)
 80107cc:	6812      	ldr	r2, [r2, #0]
 80107ce:	429a      	cmp	r2, r3
 80107d0:	d01d      	beq.n	801080e <ai_platform_network_process+0xda>
 80107d2:	e7fe      	b.n	80107d2 <ai_platform_network_process+0x9e>
 80107d4:	a1c00100 	.word	0xa1c00100
 80107d8:	e0042000 	.word	0xe0042000
 80107dc:	5c001000 	.word	0x5c001000
 80107e0:	40023000 	.word	0x40023000
 80107e4:	f407a5c2 	.word	0xf407a5c2
 80107e8:	b5e8b5cd 	.word	0xb5e8b5cd
 80107ec:	4ab0      	ldr	r2, [pc, #704]	; (8010ab0 <ai_platform_network_process+0x37c>)
 80107ee:	2301      	movs	r3, #1
 80107f0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80107f4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d1fb      	bne.n	80107f4 <ai_platform_network_process+0xc0>
 80107fc:	4bad      	ldr	r3, [pc, #692]	; (8010ab4 <ai_platform_network_process+0x380>)
 80107fe:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8010802:	4bad      	ldr	r3, [pc, #692]	; (8010ab8 <ai_platform_network_process+0x384>)
 8010804:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8010808:	429a      	cmp	r2, r3
 801080a:	f040 812b 	bne.w	8010a64 <ai_platform_network_process+0x330>
 801080e:	f7fe fdff 	bl	800f410 <_ai_platform_release_crc>
 8010812:	2d00      	cmp	r5, #0
 8010814:	f000 8172 	beq.w	8010afc <ai_platform_network_process+0x3c8>
 8010818:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 801081a:	2b00      	cmp	r3, #0
 801081c:	f000 8123 	beq.w	8010a66 <ai_platform_network_process+0x332>
 8010820:	68eb      	ldr	r3, [r5, #12]
 8010822:	2200      	movs	r2, #0
 8010824:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 8010828:	f003 0303 	and.w	r3, r3, #3
 801082c:	616a      	str	r2, [r5, #20]
 801082e:	2b03      	cmp	r3, #3
 8010830:	f040 811f 	bne.w	8010a72 <ai_platform_network_process+0x33e>
 8010834:	2e00      	cmp	r6, #0
 8010836:	f000 8156 	beq.w	8010ae6 <ai_platform_network_process+0x3b2>
 801083a:	fab8 f788 	clz	r7, r8
 801083e:	097f      	lsrs	r7, r7, #5
 8010840:	f1b8 0f00 	cmp.w	r8, #0
 8010844:	f000 814f 	beq.w	8010ae6 <ai_platform_network_process+0x3b2>
 8010848:	f8b8 3000 	ldrh.w	r3, [r8]
 801084c:	2b00      	cmp	r3, #0
 801084e:	f000 814a 	beq.w	8010ae6 <ai_platform_network_process+0x3b2>
 8010852:	69b3      	ldr	r3, [r6, #24]
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	e9cd 3502 	strd	r3, r5, [sp, #8]
 801085a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801085e:	2b00      	cmp	r3, #0
 8010860:	d072      	beq.n	8010948 <ai_platform_network_process+0x214>
 8010862:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8010866:	2c00      	cmp	r4, #0
 8010868:	d06e      	beq.n	8010948 <ai_platform_network_process+0x214>
 801086a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801086e:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8010872:	f8d3 a000 	ldr.w	sl, [r3]
 8010876:	eb1a 1907 	adds.w	r9, sl, r7, lsl #4
 801087a:	f000 8133 	beq.w	8010ae4 <ai_platform_network_process+0x3b0>
 801087e:	69a3      	ldr	r3, [r4, #24]
 8010880:	2101      	movs	r1, #1
 8010882:	4630      	mov	r0, r6
 8010884:	685d      	ldr	r5, [r3, #4]
 8010886:	f7fe fd73 	bl	800f370 <ai_buffer_get_size>
 801088a:	4285      	cmp	r5, r0
 801088c:	f0c0 8138 	bcc.w	8010b00 <ai_platform_network_process+0x3cc>
 8010890:	68e0      	ldr	r0, [r4, #12]
 8010892:	69b1      	ldr	r1, [r6, #24]
 8010894:	68c2      	ldr	r2, [r0, #12]
 8010896:	68cb      	ldr	r3, [r1, #12]
 8010898:	429a      	cmp	r2, r3
 801089a:	f040 8131 	bne.w	8010b00 <ai_platform_network_process+0x3cc>
 801089e:	6882      	ldr	r2, [r0, #8]
 80108a0:	688b      	ldr	r3, [r1, #8]
 80108a2:	429a      	cmp	r2, r3
 80108a4:	f040 812c 	bne.w	8010b00 <ai_platform_network_process+0x3cc>
 80108a8:	6842      	ldr	r2, [r0, #4]
 80108aa:	684b      	ldr	r3, [r1, #4]
 80108ac:	429a      	cmp	r2, r3
 80108ae:	f040 8127 	bne.w	8010b00 <ai_platform_network_process+0x3cc>
 80108b2:	69a3      	ldr	r3, [r4, #24]
 80108b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80108b8:	f001 fde4 	bl	8012484 <ai_array_get_data_byte_size>
 80108bc:	4605      	mov	r5, r0
 80108be:	4620      	mov	r0, r4
 80108c0:	f001 fdf6 	bl	80124b0 <get_tensor_byte_size>
 80108c4:	4285      	cmp	r5, r0
 80108c6:	f0c0 811b 	bcc.w	8010b00 <ai_platform_network_process+0x3cc>
 80108ca:	69a3      	ldr	r3, [r4, #24]
 80108cc:	6818      	ldr	r0, [r3, #0]
 80108ce:	f001 fd45 	bl	801235c <ai_array_to_buffer_fmt>
 80108d2:	6833      	ldr	r3, [r6, #0]
 80108d4:	4058      	eors	r0, r3
 80108d6:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 80108da:	f040 81c8 	bne.w	8010c6e <ai_platform_network_process+0x53a>
 80108de:	6873      	ldr	r3, [r6, #4]
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	f000 81bb 	beq.w	8010c5c <ai_platform_network_process+0x528>
 80108e6:	69b3      	ldr	r3, [r6, #24]
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	f000 81c8 	beq.w	8010c80 <ai_platform_network_process+0x54c>
 80108f0:	9a02      	ldr	r2, [sp, #8]
 80108f2:	4620      	mov	r0, r4
 80108f4:	3701      	adds	r7, #1
 80108f6:	361c      	adds	r6, #28
 80108f8:	429a      	cmp	r2, r3
 80108fa:	bf38      	it	cc
 80108fc:	461a      	movcc	r2, r3
 80108fe:	9202      	str	r2, [sp, #8]
 8010900:	f001 fdd6 	bl	80124b0 <get_tensor_byte_size>
 8010904:	f8c9 0008 	str.w	r0, [r9, #8]
 8010908:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	fb00 f303 	mul.w	r3, r0, r3
 8010912:	f8c9 300c 	str.w	r3, [r9, #12]
 8010916:	f856 1c18 	ldr.w	r1, [r6, #-24]
 801091a:	440b      	add	r3, r1
 801091c:	f8c9 1004 	str.w	r1, [r9, #4]
 8010920:	f84a 300b 	str.w	r3, [sl, fp]
 8010924:	69a0      	ldr	r0, [r4, #24]
 8010926:	6803      	ldr	r3, [r0, #0]
 8010928:	009a      	lsls	r2, r3, #2
 801092a:	f100 80bb 	bmi.w	8010aa4 <ai_platform_network_process+0x370>
 801092e:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8010932:	1a9b      	subs	r3, r3, r2
 8010934:	4419      	add	r1, r3
 8010936:	6081      	str	r1, [r0, #8]
 8010938:	69a3      	ldr	r3, [r4, #24]
 801093a:	f8d9 2004 	ldr.w	r2, [r9, #4]
 801093e:	60da      	str	r2, [r3, #12]
 8010940:	f8b8 3000 	ldrh.w	r3, [r8]
 8010944:	42bb      	cmp	r3, r7
 8010946:	d888      	bhi.n	801085a <ai_platform_network_process+0x126>
 8010948:	9d03      	ldr	r5, [sp, #12]
 801094a:	9b01      	ldr	r3, [sp, #4]
 801094c:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 801094e:	2b00      	cmp	r3, #0
 8010950:	f000 819f 	beq.w	8010c92 <ai_platform_network_process+0x55e>
 8010954:	2a01      	cmp	r2, #1
 8010956:	f240 8179 	bls.w	8010c4c <ai_platform_network_process+0x518>
 801095a:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 801095e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8010962:	2b00      	cmp	r3, #0
 8010964:	f000 8172 	beq.w	8010c4c <ai_platform_network_process+0x518>
 8010968:	9e01      	ldr	r6, [sp, #4]
 801096a:	2700      	movs	r7, #0
 801096c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010970:	2b00      	cmp	r3, #0
 8010972:	f000 80d3 	beq.w	8010b1c <ai_platform_network_process+0x3e8>
 8010976:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 801097a:	2c00      	cmp	r4, #0
 801097c:	f000 80ce 	beq.w	8010b1c <ai_platform_network_process+0x3e8>
 8010980:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8010984:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8010988:	f8d3 8000 	ldr.w	r8, [r3]
 801098c:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 8010990:	f000 819d 	beq.w	8010cce <ai_platform_network_process+0x59a>
 8010994:	69a3      	ldr	r3, [r4, #24]
 8010996:	2101      	movs	r1, #1
 8010998:	4630      	mov	r0, r6
 801099a:	685b      	ldr	r3, [r3, #4]
 801099c:	9301      	str	r3, [sp, #4]
 801099e:	f7fe fce7 	bl	800f370 <ai_buffer_get_size>
 80109a2:	9b01      	ldr	r3, [sp, #4]
 80109a4:	4283      	cmp	r3, r0
 80109a6:	f0c0 8151 	bcc.w	8010c4c <ai_platform_network_process+0x518>
 80109aa:	68e0      	ldr	r0, [r4, #12]
 80109ac:	69b1      	ldr	r1, [r6, #24]
 80109ae:	68c2      	ldr	r2, [r0, #12]
 80109b0:	68cb      	ldr	r3, [r1, #12]
 80109b2:	429a      	cmp	r2, r3
 80109b4:	f040 814a 	bne.w	8010c4c <ai_platform_network_process+0x518>
 80109b8:	6882      	ldr	r2, [r0, #8]
 80109ba:	688b      	ldr	r3, [r1, #8]
 80109bc:	429a      	cmp	r2, r3
 80109be:	f040 8145 	bne.w	8010c4c <ai_platform_network_process+0x518>
 80109c2:	6842      	ldr	r2, [r0, #4]
 80109c4:	684b      	ldr	r3, [r1, #4]
 80109c6:	429a      	cmp	r2, r3
 80109c8:	f040 8140 	bne.w	8010c4c <ai_platform_network_process+0x518>
 80109cc:	69a3      	ldr	r3, [r4, #24]
 80109ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80109d2:	f001 fd57 	bl	8012484 <ai_array_get_data_byte_size>
 80109d6:	9001      	str	r0, [sp, #4]
 80109d8:	4620      	mov	r0, r4
 80109da:	f001 fd69 	bl	80124b0 <get_tensor_byte_size>
 80109de:	9b01      	ldr	r3, [sp, #4]
 80109e0:	4283      	cmp	r3, r0
 80109e2:	f0c0 8133 	bcc.w	8010c4c <ai_platform_network_process+0x518>
 80109e6:	69a3      	ldr	r3, [r4, #24]
 80109e8:	6818      	ldr	r0, [r3, #0]
 80109ea:	f001 fcb7 	bl	801235c <ai_array_to_buffer_fmt>
 80109ee:	6833      	ldr	r3, [r6, #0]
 80109f0:	4058      	eors	r0, r3
 80109f2:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 80109f6:	f040 815a 	bne.w	8010cae <ai_platform_network_process+0x57a>
 80109fa:	6873      	ldr	r3, [r6, #4]
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	f000 814e 	beq.w	8010c9e <ai_platform_network_process+0x56a>
 8010a02:	69b3      	ldr	r3, [r6, #24]
 8010a04:	681b      	ldr	r3, [r3, #0]
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	f000 8159 	beq.w	8010cbe <ai_platform_network_process+0x58a>
 8010a0c:	9a02      	ldr	r2, [sp, #8]
 8010a0e:	4620      	mov	r0, r4
 8010a10:	3701      	adds	r7, #1
 8010a12:	361c      	adds	r6, #28
 8010a14:	429a      	cmp	r2, r3
 8010a16:	bf38      	it	cc
 8010a18:	461a      	movcc	r2, r3
 8010a1a:	9202      	str	r2, [sp, #8]
 8010a1c:	f001 fd48 	bl	80124b0 <get_tensor_byte_size>
 8010a20:	f8ca 0008 	str.w	r0, [sl, #8]
 8010a24:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8010a28:	681b      	ldr	r3, [r3, #0]
 8010a2a:	fb00 f303 	mul.w	r3, r0, r3
 8010a2e:	f8ca 300c 	str.w	r3, [sl, #12]
 8010a32:	f856 1c18 	ldr.w	r1, [r6, #-24]
 8010a36:	440b      	add	r3, r1
 8010a38:	f8ca 1004 	str.w	r1, [sl, #4]
 8010a3c:	f848 300b 	str.w	r3, [r8, fp]
 8010a40:	69a0      	ldr	r0, [r4, #24]
 8010a42:	6803      	ldr	r3, [r0, #0]
 8010a44:	009b      	lsls	r3, r3, #2
 8010a46:	d464      	bmi.n	8010b12 <ai_platform_network_process+0x3de>
 8010a48:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8010a4c:	1a9b      	subs	r3, r3, r2
 8010a4e:	4419      	add	r1, r3
 8010a50:	6081      	str	r1, [r0, #8]
 8010a52:	69a3      	ldr	r3, [r4, #24]
 8010a54:	f8da 2004 	ldr.w	r2, [sl, #4]
 8010a58:	60da      	str	r2, [r3, #12]
 8010a5a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8010a5e:	429f      	cmp	r7, r3
 8010a60:	d384      	bcc.n	801096c <ai_platform_network_process+0x238>
 8010a62:	e05b      	b.n	8010b1c <ai_platform_network_process+0x3e8>
 8010a64:	e7fe      	b.n	8010a64 <ai_platform_network_process+0x330>
 8010a66:	68ea      	ldr	r2, [r5, #12]
 8010a68:	616b      	str	r3, [r5, #20]
 8010a6a:	f002 0203 	and.w	r2, r2, #3
 8010a6e:	2a03      	cmp	r2, #3
 8010a70:	d039      	beq.n	8010ae6 <ai_platform_network_process+0x3b2>
 8010a72:	2230      	movs	r2, #48	; 0x30
 8010a74:	2111      	movs	r1, #17
 8010a76:	f105 0010 	add.w	r0, r5, #16
 8010a7a:	2400      	movs	r4, #0
 8010a7c:	f000 f93e 	bl	8010cfc <core_set_error>
 8010a80:	4620      	mov	r0, r4
 8010a82:	b005      	add	sp, #20
 8010a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a88:	4a0c      	ldr	r2, [pc, #48]	; (8010abc <ai_platform_network_process+0x388>)
 8010a8a:	2301      	movs	r3, #1
 8010a8c:	6093      	str	r3, [r2, #8]
 8010a8e:	6893      	ldr	r3, [r2, #8]
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d1fc      	bne.n	8010a8e <ai_platform_network_process+0x35a>
 8010a94:	4b07      	ldr	r3, [pc, #28]	; (8010ab4 <ai_platform_network_process+0x380>)
 8010a96:	6013      	str	r3, [r2, #0]
 8010a98:	4b07      	ldr	r3, [pc, #28]	; (8010ab8 <ai_platform_network_process+0x384>)
 8010a9a:	6812      	ldr	r2, [r2, #0]
 8010a9c:	429a      	cmp	r2, r3
 8010a9e:	f43f aeb6 	beq.w	801080e <ai_platform_network_process+0xda>
 8010aa2:	e7fe      	b.n	8010aa2 <ai_platform_network_process+0x36e>
 8010aa4:	f8b8 3000 	ldrh.w	r3, [r8]
 8010aa8:	429f      	cmp	r7, r3
 8010aaa:	f4ff aed6 	bcc.w	801085a <ai_platform_network_process+0x126>
 8010aae:	e74b      	b.n	8010948 <ai_platform_network_process+0x214>
 8010ab0:	58024000 	.word	0x58024000
 8010ab4:	f407a5c2 	.word	0xf407a5c2
 8010ab8:	b5e8b5cd 	.word	0xb5e8b5cd
 8010abc:	40023000 	.word	0x40023000
 8010ac0:	4a87      	ldr	r2, [pc, #540]	; (8010ce0 <ai_platform_network_process+0x5ac>)
 8010ac2:	2301      	movs	r3, #1
 8010ac4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8010ac8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d1fb      	bne.n	8010ac8 <ai_platform_network_process+0x394>
 8010ad0:	4b84      	ldr	r3, [pc, #528]	; (8010ce4 <ai_platform_network_process+0x5b0>)
 8010ad2:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8010ad6:	4b84      	ldr	r3, [pc, #528]	; (8010ce8 <ai_platform_network_process+0x5b4>)
 8010ad8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8010adc:	429a      	cmp	r2, r3
 8010ade:	f43f ae96 	beq.w	801080e <ai_platform_network_process+0xda>
 8010ae2:	e7fe      	b.n	8010ae2 <ai_platform_network_process+0x3ae>
 8010ae4:	9d03      	ldr	r5, [sp, #12]
 8010ae6:	2400      	movs	r4, #0
 8010ae8:	2217      	movs	r2, #23
 8010aea:	2112      	movs	r1, #18
 8010aec:	f105 0010 	add.w	r0, r5, #16
 8010af0:	f000 f904 	bl	8010cfc <core_set_error>
 8010af4:	4620      	mov	r0, r4
 8010af6:	b005      	add	sp, #20
 8010af8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010afc:	462c      	mov	r4, r5
 8010afe:	e7bf      	b.n	8010a80 <ai_platform_network_process+0x34c>
 8010b00:	9d03      	ldr	r5, [sp, #12]
 8010b02:	2218      	movs	r2, #24
 8010b04:	2112      	movs	r1, #18
 8010b06:	2400      	movs	r4, #0
 8010b08:	f105 0010 	add.w	r0, r5, #16
 8010b0c:	f000 f8f6 	bl	8010cfc <core_set_error>
 8010b10:	e7b6      	b.n	8010a80 <ai_platform_network_process+0x34c>
 8010b12:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8010b16:	429f      	cmp	r7, r3
 8010b18:	f4ff af28 	bcc.w	801096c <ai_platform_network_process+0x238>
 8010b1c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8010b20:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 8010b22:	82ab      	strh	r3, [r5, #20]
 8010b24:	2a00      	cmp	r2, #0
 8010b26:	f040 808b 	bne.w	8010c40 <ai_platform_network_process+0x50c>
 8010b2a:	4616      	mov	r6, r2
 8010b2c:	4617      	mov	r7, r2
 8010b2e:	8aec      	ldrh	r4, [r5, #22]
 8010b30:	429c      	cmp	r4, r3
 8010b32:	d2a5      	bcs.n	8010a80 <ai_platform_network_process+0x34c>
 8010b34:	46ab      	mov	fp, r5
 8010b36:	2e00      	cmp	r6, #0
 8010b38:	d030      	beq.n	8010b9c <ai_platform_network_process+0x468>
 8010b3a:	f04f 0800 	mov.w	r8, #0
 8010b3e:	e014      	b.n	8010b6a <ai_platform_network_process+0x436>
 8010b40:	6882      	ldr	r2, [r0, #8]
 8010b42:	68c5      	ldr	r5, [r0, #12]
 8010b44:	6863      	ldr	r3, [r4, #4]
 8010b46:	1b52      	subs	r2, r2, r5
 8010b48:	4413      	add	r3, r2
 8010b4a:	6083      	str	r3, [r0, #8]
 8010b4c:	698b      	ldr	r3, [r1, #24]
 8010b4e:	6862      	ldr	r2, [r4, #4]
 8010b50:	60da      	str	r2, [r3, #12]
 8010b52:	f859 200a 	ldr.w	r2, [r9, sl]
 8010b56:	f108 0801 	add.w	r8, r8, #1
 8010b5a:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8010b5e:	440b      	add	r3, r1
 8010b60:	4293      	cmp	r3, r2
 8010b62:	d301      	bcc.n	8010b68 <ai_platform_network_process+0x434>
 8010b64:	68e3      	ldr	r3, [r4, #12]
 8010b66:	1ad3      	subs	r3, r2, r3
 8010b68:	6063      	str	r3, [r4, #4]
 8010b6a:	8833      	ldrh	r3, [r6, #0]
 8010b6c:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8010b70:	4543      	cmp	r3, r8
 8010b72:	d913      	bls.n	8010b9c <ai_platform_network_process+0x468>
 8010b74:	6873      	ldr	r3, [r6, #4]
 8010b76:	b18b      	cbz	r3, 8010b9c <ai_platform_network_process+0x468>
 8010b78:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8010b7c:	b171      	cbz	r1, 8010b9c <ai_platform_network_process+0x468>
 8010b7e:	6988      	ldr	r0, [r1, #24]
 8010b80:	68b2      	ldr	r2, [r6, #8]
 8010b82:	6803      	ldr	r3, [r0, #0]
 8010b84:	f8d2 9000 	ldr.w	r9, [r2]
 8010b88:	009d      	lsls	r5, r3, #2
 8010b8a:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8010b8e:	d5d7      	bpl.n	8010b40 <ai_platform_network_process+0x40c>
 8010b90:	6881      	ldr	r1, [r0, #8]
 8010b92:	68a2      	ldr	r2, [r4, #8]
 8010b94:	6860      	ldr	r0, [r4, #4]
 8010b96:	f001 fb59 	bl	801224c <st_int8_copy>
 8010b9a:	e7da      	b.n	8010b52 <ai_platform_network_process+0x41e>
 8010b9c:	4658      	mov	r0, fp
 8010b9e:	f000 f903 	bl	8010da8 <ai_layers_forward_all>
 8010ba2:	2f00      	cmp	r7, #0
 8010ba4:	d03d      	beq.n	8010c22 <ai_platform_network_process+0x4ee>
 8010ba6:	2400      	movs	r4, #0
 8010ba8:	e016      	b.n	8010bd8 <ai_platform_network_process+0x4a4>
 8010baa:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8010bae:	f859 100a 	ldr.w	r1, [r9, sl]
 8010bb2:	4413      	add	r3, r2
 8010bb4:	428b      	cmp	r3, r1
 8010bb6:	d302      	bcc.n	8010bbe <ai_platform_network_process+0x48a>
 8010bb8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010bbc:	1acb      	subs	r3, r1, r3
 8010bbe:	f8c8 3004 	str.w	r3, [r8, #4]
 8010bc2:	6981      	ldr	r1, [r0, #24]
 8010bc4:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8010bc8:	1b52      	subs	r2, r2, r5
 8010bca:	4413      	add	r3, r2
 8010bcc:	608b      	str	r3, [r1, #8]
 8010bce:	6983      	ldr	r3, [r0, #24]
 8010bd0:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8010bd4:	60da      	str	r2, [r3, #12]
 8010bd6:	3401      	adds	r4, #1
 8010bd8:	883b      	ldrh	r3, [r7, #0]
 8010bda:	42a3      	cmp	r3, r4
 8010bdc:	d921      	bls.n	8010c22 <ai_platform_network_process+0x4ee>
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	b1fb      	cbz	r3, 8010c22 <ai_platform_network_process+0x4ee>
 8010be2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8010be6:	b1e0      	cbz	r0, 8010c22 <ai_platform_network_process+0x4ee>
 8010be8:	68ba      	ldr	r2, [r7, #8]
 8010bea:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8010bee:	6983      	ldr	r3, [r0, #24]
 8010bf0:	f8d2 9000 	ldr.w	r9, [r2]
 8010bf4:	681a      	ldr	r2, [r3, #0]
 8010bf6:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8010bfa:	0092      	lsls	r2, r2, #2
 8010bfc:	d5d5      	bpl.n	8010baa <ai_platform_network_process+0x476>
 8010bfe:	6898      	ldr	r0, [r3, #8]
 8010c00:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 8010c04:	f001 fb22 	bl	801224c <st_int8_copy>
 8010c08:	f859 200a 	ldr.w	r2, [r9, sl]
 8010c0c:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8010c10:	440b      	add	r3, r1
 8010c12:	4293      	cmp	r3, r2
 8010c14:	d302      	bcc.n	8010c1c <ai_platform_network_process+0x4e8>
 8010c16:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010c1a:	1ad3      	subs	r3, r2, r3
 8010c1c:	f8c8 3004 	str.w	r3, [r8, #4]
 8010c20:	e7d9      	b.n	8010bd6 <ai_platform_network_process+0x4a2>
 8010c22:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 8010c26:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 8010c2a:	3401      	adds	r4, #1
 8010c2c:	b2a4      	uxth	r4, r4
 8010c2e:	42a3      	cmp	r3, r4
 8010c30:	f8ab 4016 	strh.w	r4, [fp, #22]
 8010c34:	f63f af7f 	bhi.w	8010b36 <ai_platform_network_process+0x402>
 8010c38:	4620      	mov	r0, r4
 8010c3a:	b005      	add	sp, #20
 8010c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c40:	2a01      	cmp	r2, #1
 8010c42:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 8010c44:	d029      	beq.n	8010c9a <ai_platform_network_process+0x566>
 8010c46:	f106 070c 	add.w	r7, r6, #12
 8010c4a:	e770      	b.n	8010b2e <ai_platform_network_process+0x3fa>
 8010c4c:	2218      	movs	r2, #24
 8010c4e:	2113      	movs	r1, #19
 8010c50:	f105 0010 	add.w	r0, r5, #16
 8010c54:	2400      	movs	r4, #0
 8010c56:	f000 f851 	bl	8010cfc <core_set_error>
 8010c5a:	e711      	b.n	8010a80 <ai_platform_network_process+0x34c>
 8010c5c:	9d03      	ldr	r5, [sp, #12]
 8010c5e:	4604      	mov	r4, r0
 8010c60:	2217      	movs	r2, #23
 8010c62:	2112      	movs	r1, #18
 8010c64:	f105 0010 	add.w	r0, r5, #16
 8010c68:	f000 f848 	bl	8010cfc <core_set_error>
 8010c6c:	e708      	b.n	8010a80 <ai_platform_network_process+0x34c>
 8010c6e:	9d03      	ldr	r5, [sp, #12]
 8010c70:	2219      	movs	r2, #25
 8010c72:	2112      	movs	r1, #18
 8010c74:	2400      	movs	r4, #0
 8010c76:	f105 0010 	add.w	r0, r5, #16
 8010c7a:	f000 f83f 	bl	8010cfc <core_set_error>
 8010c7e:	e6ff      	b.n	8010a80 <ai_platform_network_process+0x34c>
 8010c80:	9d03      	ldr	r5, [sp, #12]
 8010c82:	4604      	mov	r4, r0
 8010c84:	2221      	movs	r2, #33	; 0x21
 8010c86:	2112      	movs	r1, #18
 8010c88:	f105 0010 	add.w	r0, r5, #16
 8010c8c:	f000 f836 	bl	8010cfc <core_set_error>
 8010c90:	e6f6      	b.n	8010a80 <ai_platform_network_process+0x34c>
 8010c92:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8010c96:	82ab      	strh	r3, [r5, #20]
 8010c98:	e744      	b.n	8010b24 <ai_platform_network_process+0x3f0>
 8010c9a:	2700      	movs	r7, #0
 8010c9c:	e747      	b.n	8010b2e <ai_platform_network_process+0x3fa>
 8010c9e:	4604      	mov	r4, r0
 8010ca0:	2217      	movs	r2, #23
 8010ca2:	2113      	movs	r1, #19
 8010ca4:	f105 0010 	add.w	r0, r5, #16
 8010ca8:	f000 f828 	bl	8010cfc <core_set_error>
 8010cac:	e6e8      	b.n	8010a80 <ai_platform_network_process+0x34c>
 8010cae:	2219      	movs	r2, #25
 8010cb0:	2113      	movs	r1, #19
 8010cb2:	f105 0010 	add.w	r0, r5, #16
 8010cb6:	2400      	movs	r4, #0
 8010cb8:	f000 f820 	bl	8010cfc <core_set_error>
 8010cbc:	e6e0      	b.n	8010a80 <ai_platform_network_process+0x34c>
 8010cbe:	4604      	mov	r4, r0
 8010cc0:	2221      	movs	r2, #33	; 0x21
 8010cc2:	2113      	movs	r1, #19
 8010cc4:	f105 0010 	add.w	r0, r5, #16
 8010cc8:	f000 f818 	bl	8010cfc <core_set_error>
 8010ccc:	e6d8      	b.n	8010a80 <ai_platform_network_process+0x34c>
 8010cce:	2217      	movs	r2, #23
 8010cd0:	2113      	movs	r1, #19
 8010cd2:	f105 0010 	add.w	r0, r5, #16
 8010cd6:	4654      	mov	r4, sl
 8010cd8:	f000 f810 	bl	8010cfc <core_set_error>
 8010cdc:	e6d0      	b.n	8010a80 <ai_platform_network_process+0x34c>
 8010cde:	bf00      	nop
 8010ce0:	58024000 	.word	0x58024000
 8010ce4:	f407a5c2 	.word	0xf407a5c2
 8010ce8:	b5e8b5cd 	.word	0xb5e8b5cd

08010cec <core_init>:
 8010cec:	2001      	movs	r0, #1
 8010cee:	4770      	bx	lr

08010cf0 <core_get_error>:
 8010cf0:	4603      	mov	r3, r0
 8010cf2:	2200      	movs	r2, #0
 8010cf4:	6800      	ldr	r0, [r0, #0]
 8010cf6:	601a      	str	r2, [r3, #0]
 8010cf8:	4770      	bx	lr
 8010cfa:	bf00      	nop

08010cfc <core_set_error>:
 8010cfc:	4603      	mov	r3, r0
 8010cfe:	7800      	ldrb	r0, [r0, #0]
 8010d00:	b108      	cbz	r0, 8010d06 <core_set_error+0xa>
 8010d02:	2000      	movs	r0, #0
 8010d04:	4770      	bx	lr
 8010d06:	7019      	strb	r1, [r3, #0]
 8010d08:	2001      	movs	r0, #1
 8010d0a:	6819      	ldr	r1, [r3, #0]
 8010d0c:	f362 211f 	bfi	r1, r2, #8, #24
 8010d10:	6019      	str	r1, [r3, #0]
 8010d12:	4770      	bx	lr

08010d14 <ai_check_custom_types>:
 8010d14:	b082      	sub	sp, #8
 8010d16:	4b12      	ldr	r3, [pc, #72]	; (8010d60 <ai_check_custom_types+0x4c>)
 8010d18:	9301      	str	r3, [sp, #4]
 8010d1a:	b118      	cbz	r0, 8010d24 <ai_check_custom_types+0x10>
 8010d1c:	7803      	ldrb	r3, [r0, #0]
 8010d1e:	2b03      	cmp	r3, #3
 8010d20:	d002      	beq.n	8010d28 <ai_check_custom_types+0x14>
 8010d22:	2000      	movs	r0, #0
 8010d24:	b002      	add	sp, #8
 8010d26:	4770      	bx	lr
 8010d28:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010d2c:	4293      	cmp	r3, r2
 8010d2e:	d004      	beq.n	8010d3a <ai_check_custom_types+0x26>
 8010d30:	2001      	movs	r0, #1
 8010d32:	f080 0001 	eor.w	r0, r0, #1
 8010d36:	b002      	add	sp, #8
 8010d38:	4770      	bx	lr
 8010d3a:	7842      	ldrb	r2, [r0, #1]
 8010d3c:	3001      	adds	r0, #1
 8010d3e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010d42:	429a      	cmp	r2, r3
 8010d44:	d1f4      	bne.n	8010d30 <ai_check_custom_types+0x1c>
 8010d46:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8010d4a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010d4e:	429a      	cmp	r2, r3
 8010d50:	d1ee      	bne.n	8010d30 <ai_check_custom_types+0x1c>
 8010d52:	7842      	ldrb	r2, [r0, #1]
 8010d54:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010d58:	429a      	cmp	r2, r3
 8010d5a:	d1e9      	bne.n	8010d30 <ai_check_custom_types+0x1c>
 8010d5c:	2000      	movs	r0, #0
 8010d5e:	e7e8      	b.n	8010d32 <ai_check_custom_types+0x1e>
 8010d60:	84048403 	.word	0x84048403

08010d64 <ai_layers_init_all>:
 8010d64:	2100      	movs	r1, #0
 8010d66:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010d68:	b13b      	cbz	r3, 8010d7a <ai_layers_init_all+0x16>
 8010d6a:	691a      	ldr	r2, [r3, #16]
 8010d6c:	3101      	adds	r1, #1
 8010d6e:	60d8      	str	r0, [r3, #12]
 8010d70:	429a      	cmp	r2, r3
 8010d72:	4613      	mov	r3, r2
 8010d74:	d001      	beq.n	8010d7a <ai_layers_init_all+0x16>
 8010d76:	2a00      	cmp	r2, #0
 8010d78:	d1f6      	bne.n	8010d68 <ai_layers_init_all+0x4>
 8010d7a:	4608      	mov	r0, r1
 8010d7c:	4770      	bx	lr
 8010d7e:	bf00      	nop

08010d80 <ai_layers_post_init_all>:
 8010d80:	b538      	push	{r3, r4, r5, lr}
 8010d82:	2500      	movs	r5, #0
 8010d84:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8010d86:	b16c      	cbz	r4, 8010da4 <ai_layers_post_init_all+0x24>
 8010d88:	6863      	ldr	r3, [r4, #4]
 8010d8a:	07db      	lsls	r3, r3, #31
 8010d8c:	d504      	bpl.n	8010d98 <ai_layers_post_init_all+0x18>
 8010d8e:	6a23      	ldr	r3, [r4, #32]
 8010d90:	4620      	mov	r0, r4
 8010d92:	b10b      	cbz	r3, 8010d98 <ai_layers_post_init_all+0x18>
 8010d94:	3501      	adds	r5, #1
 8010d96:	4798      	blx	r3
 8010d98:	6923      	ldr	r3, [r4, #16]
 8010d9a:	42a3      	cmp	r3, r4
 8010d9c:	461c      	mov	r4, r3
 8010d9e:	d001      	beq.n	8010da4 <ai_layers_post_init_all+0x24>
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d1f0      	bne.n	8010d86 <ai_layers_post_init_all+0x6>
 8010da4:	4628      	mov	r0, r5
 8010da6:	bd38      	pop	{r3, r4, r5, pc}

08010da8 <ai_layers_forward_all>:
 8010da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010dac:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 8010db0:	4604      	mov	r4, r0
 8010db2:	f1b8 0f00 	cmp.w	r8, #0
 8010db6:	d02a      	beq.n	8010e0e <ai_layers_forward_all+0x66>
 8010db8:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8010dba:	6381      	str	r1, [r0, #56]	; 0x38
 8010dbc:	b319      	cbz	r1, 8010e06 <ai_layers_forward_all+0x5e>
 8010dbe:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8010dc0:	2001      	movs	r0, #1
 8010dc2:	47c0      	blx	r8
 8010dc4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8010dc6:	b1f6      	cbz	r6, 8010e06 <ai_layers_forward_all+0x5e>
 8010dc8:	2700      	movs	r7, #0
 8010dca:	4631      	mov	r1, r6
 8010dcc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8010dce:	2002      	movs	r0, #2
 8010dd0:	47c0      	blx	r8
 8010dd2:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8010dd4:	4628      	mov	r0, r5
 8010dd6:	696b      	ldr	r3, [r5, #20]
 8010dd8:	4798      	blx	r3
 8010dda:	692e      	ldr	r6, [r5, #16]
 8010ddc:	2003      	movs	r0, #3
 8010dde:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8010de0:	42b5      	cmp	r5, r6
 8010de2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8010de4:	d007      	beq.n	8010df6 <ai_layers_forward_all+0x4e>
 8010de6:	47c0      	blx	r8
 8010de8:	3701      	adds	r7, #1
 8010dea:	63a6      	str	r6, [r4, #56]	; 0x38
 8010dec:	2e00      	cmp	r6, #0
 8010dee:	d1ec      	bne.n	8010dca <ai_layers_forward_all+0x22>
 8010df0:	4638      	mov	r0, r7
 8010df2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010df6:	2003      	movs	r0, #3
 8010df8:	3701      	adds	r7, #1
 8010dfa:	47c0      	blx	r8
 8010dfc:	2300      	movs	r3, #0
 8010dfe:	4638      	mov	r0, r7
 8010e00:	63a3      	str	r3, [r4, #56]	; 0x38
 8010e02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e06:	2700      	movs	r7, #0
 8010e08:	4638      	mov	r0, r7
 8010e0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e0e:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8010e10:	6385      	str	r5, [r0, #56]	; 0x38
 8010e12:	2d00      	cmp	r5, #0
 8010e14:	d0f7      	beq.n	8010e06 <ai_layers_forward_all+0x5e>
 8010e16:	4647      	mov	r7, r8
 8010e18:	696b      	ldr	r3, [r5, #20]
 8010e1a:	4628      	mov	r0, r5
 8010e1c:	4798      	blx	r3
 8010e1e:	462b      	mov	r3, r5
 8010e20:	692d      	ldr	r5, [r5, #16]
 8010e22:	429d      	cmp	r5, r3
 8010e24:	d004      	beq.n	8010e30 <ai_layers_forward_all+0x88>
 8010e26:	3701      	adds	r7, #1
 8010e28:	63a5      	str	r5, [r4, #56]	; 0x38
 8010e2a:	2d00      	cmp	r5, #0
 8010e2c:	d1f4      	bne.n	8010e18 <ai_layers_forward_all+0x70>
 8010e2e:	e7df      	b.n	8010df0 <ai_layers_forward_all+0x48>
 8010e30:	2300      	movs	r3, #0
 8010e32:	3701      	adds	r7, #1
 8010e34:	63a3      	str	r3, [r4, #56]	; 0x38
 8010e36:	e7db      	b.n	8010df0 <ai_layers_forward_all+0x48>

08010e38 <ai_dict_decompress_f32>:
 8010e38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010e3c:	9d08      	ldr	r5, [sp, #32]
 8010e3e:	2b04      	cmp	r3, #4
 8010e40:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8010e44:	d00e      	beq.n	8010e64 <ai_dict_decompress_f32+0x2c>
 8010e46:	2b08      	cmp	r3, #8
 8010e48:	d10a      	bne.n	8010e60 <ai_dict_decompress_f32+0x28>
 8010e4a:	42a8      	cmp	r0, r5
 8010e4c:	d208      	bcs.n	8010e60 <ai_dict_decompress_f32+0x28>
 8010e4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010e52:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010e56:	681b      	ldr	r3, [r3, #0]
 8010e58:	f840 3b04 	str.w	r3, [r0], #4
 8010e5c:	4285      	cmp	r5, r0
 8010e5e:	d8f6      	bhi.n	8010e4e <ai_dict_decompress_f32+0x16>
 8010e60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010e64:	9b07      	ldr	r3, [sp, #28]
 8010e66:	085e      	lsrs	r6, r3, #1
 8010e68:	f003 0701 	and.w	r7, r3, #1
 8010e6c:	ea4f 09c6 	mov.w	r9, r6, lsl #3
 8010e70:	f106 38ff 	add.w	r8, r6, #4294967295
 8010e74:	42a8      	cmp	r0, r5
 8010e76:	d2f3      	bcs.n	8010e60 <ai_dict_decompress_f32+0x28>
 8010e78:	b33e      	cbz	r6, 8010eca <ai_dict_decompress_f32+0x92>
 8010e7a:	f100 0e08 	add.w	lr, r0, #8
 8010e7e:	f101 3cff 	add.w	ip, r1, #4294967295
 8010e82:	eb01 0408 	add.w	r4, r1, r8
 8010e86:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 8010e8a:	f10e 0e08 	add.w	lr, lr, #8
 8010e8e:	091b      	lsrs	r3, r3, #4
 8010e90:	4564      	cmp	r4, ip
 8010e92:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010e96:	681b      	ldr	r3, [r3, #0]
 8010e98:	f84e 3c10 	str.w	r3, [lr, #-16]
 8010e9c:	f89c 3000 	ldrb.w	r3, [ip]
 8010ea0:	f003 030f 	and.w	r3, r3, #15
 8010ea4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010ea8:	681b      	ldr	r3, [r3, #0]
 8010eaa:	f84e 3c0c 	str.w	r3, [lr, #-12]
 8010eae:	d1ea      	bne.n	8010e86 <ai_dict_decompress_f32+0x4e>
 8010eb0:	4431      	add	r1, r6
 8010eb2:	4448      	add	r0, r9
 8010eb4:	2f00      	cmp	r7, #0
 8010eb6:	d0dd      	beq.n	8010e74 <ai_dict_decompress_f32+0x3c>
 8010eb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010ebc:	091b      	lsrs	r3, r3, #4
 8010ebe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010ec2:	681b      	ldr	r3, [r3, #0]
 8010ec4:	f840 3b04 	str.w	r3, [r0], #4
 8010ec8:	e7d4      	b.n	8010e74 <ai_dict_decompress_f32+0x3c>
 8010eca:	2f00      	cmp	r7, #0
 8010ecc:	d1f4      	bne.n	8010eb8 <ai_dict_decompress_f32+0x80>
 8010ece:	42a8      	cmp	r0, r5
 8010ed0:	d3fd      	bcc.n	8010ece <ai_dict_decompress_f32+0x96>
 8010ed2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010ed6:	bf00      	nop

08010ed8 <forward_conv2d_if32of32wf32>:
 8010ed8:	6982      	ldr	r2, [r0, #24]
 8010eda:	8813      	ldrh	r3, [r2, #0]
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	f000 8092 	beq.w	8011006 <forward_conv2d_if32of32wf32+0x12e>
 8010ee2:	f8d2 c004 	ldr.w	ip, [r2, #4]
 8010ee6:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8010eea:	b102      	cbz	r2, 8010eee <forward_conv2d_if32of32wf32+0x16>
 8010eec:	6812      	ldr	r2, [r2, #0]
 8010eee:	2b01      	cmp	r3, #1
 8010ef0:	f000 80b3 	beq.w	801105a <forward_conv2d_if32of32wf32+0x182>
 8010ef4:	f8dc 1010 	ldr.w	r1, [ip, #16]
 8010ef8:	b101      	cbz	r1, 8010efc <forward_conv2d_if32of32wf32+0x24>
 8010efa:	6809      	ldr	r1, [r1, #0]
 8010efc:	2b02      	cmp	r3, #2
 8010efe:	f000 8084 	beq.w	801100a <forward_conv2d_if32of32wf32+0x132>
 8010f02:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f06:	f8dc 601c 	ldr.w	r6, [ip, #28]
 8010f0a:	b0a1      	sub	sp, #132	; 0x84
 8010f0c:	2e00      	cmp	r6, #0
 8010f0e:	f000 809d 	beq.w	801104c <forward_conv2d_if32of32wf32+0x174>
 8010f12:	f8bc 5018 	ldrh.w	r5, [ip, #24]
 8010f16:	6834      	ldr	r4, [r6, #0]
 8010f18:	2d01      	cmp	r5, #1
 8010f1a:	f240 8099 	bls.w	8011050 <forward_conv2d_if32of32wf32+0x178>
 8010f1e:	6876      	ldr	r6, [r6, #4]
 8010f20:	f8d2 800c 	ldr.w	r8, [r2, #12]
 8010f24:	f8d1 900c 	ldr.w	r9, [r1, #12]
 8010f28:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8010f2c:	6992      	ldr	r2, [r2, #24]
 8010f2e:	9713      	str	r7, [sp, #76]	; 0x4c
 8010f30:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8010f34:	f8d0 e03c 	ldr.w	lr, [r0, #60]	; 0x3c
 8010f38:	9714      	str	r7, [sp, #80]	; 0x50
 8010f3a:	f8d9 700c 	ldr.w	r7, [r9, #12]
 8010f3e:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 8010f42:	9715      	str	r7, [sp, #84]	; 0x54
 8010f44:	f8d9 7008 	ldr.w	r7, [r9, #8]
 8010f48:	f8d2 b008 	ldr.w	fp, [r2, #8]
 8010f4c:	9716      	str	r7, [sp, #88]	; 0x58
 8010f4e:	f8d8 700c 	ldr.w	r7, [r8, #12]
 8010f52:	69a2      	ldr	r2, [r4, #24]
 8010f54:	9717      	str	r7, [sp, #92]	; 0x5c
 8010f56:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8010f5a:	9718      	str	r7, [sp, #96]	; 0x60
 8010f5c:	8d07      	ldrh	r7, [r0, #40]	; 0x28
 8010f5e:	e9d0 540c 	ldrd	r5, r4, [r0, #48]	; 0x30
 8010f62:	9719      	str	r7, [sp, #100]	; 0x64
 8010f64:	8d87      	ldrh	r7, [r0, #44]	; 0x2c
 8010f66:	69c0      	ldr	r0, [r0, #28]
 8010f68:	971a      	str	r7, [sp, #104]	; 0x68
 8010f6a:	901f      	str	r0, [sp, #124]	; 0x7c
 8010f6c:	f8be 0000 	ldrh.w	r0, [lr]
 8010f70:	901b      	str	r0, [sp, #108]	; 0x6c
 8010f72:	f8be 0004 	ldrh.w	r0, [lr, #4]
 8010f76:	901c      	str	r0, [sp, #112]	; 0x70
 8010f78:	b2a8      	uxth	r0, r5
 8010f7a:	901d      	str	r0, [sp, #116]	; 0x74
 8010f7c:	b2a0      	uxth	r0, r4
 8010f7e:	901e      	str	r0, [sp, #120]	; 0x78
 8010f80:	f8d2 9008 	ldr.w	r9, [r2, #8]
 8010f84:	e9da 7801 	ldrd	r7, r8, [sl, #4]
 8010f88:	b10e      	cbz	r6, 8010f8e <forward_conv2d_if32of32wf32+0xb6>
 8010f8a:	69b0      	ldr	r0, [r6, #24]
 8010f8c:	6886      	ldr	r6, [r0, #8]
 8010f8e:	b2a4      	uxth	r4, r4
 8010f90:	6989      	ldr	r1, [r1, #24]
 8010f92:	f108 30ff 	add.w	r0, r8, #4294967295
 8010f96:	b2ad      	uxth	r5, r5
 8010f98:	3c01      	subs	r4, #1
 8010f9a:	f8d1 a008 	ldr.w	sl, [r1, #8]
 8010f9e:	3d01      	subs	r5, #1
 8010fa0:	6811      	ldr	r1, [r2, #0]
 8010fa2:	fb00 8404 	mla	r4, r0, r4, r8
 8010fa6:	1e78      	subs	r0, r7, #1
 8010fa8:	fb00 7505 	mla	r5, r0, r5, r7
 8010fac:	f3c1 4043 	ubfx	r0, r1, #17, #4
 8010fb0:	2804      	cmp	r0, #4
 8010fb2:	d02d      	beq.n	8011010 <forward_conv2d_if32of32wf32+0x138>
 8010fb4:	2808      	cmp	r0, #8
 8010fb6:	d02b      	beq.n	8011010 <forward_conv2d_if32of32wf32+0x138>
 8010fb8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010fba:	464a      	mov	r2, r9
 8010fbc:	940c      	str	r4, [sp, #48]	; 0x30
 8010fbe:	4651      	mov	r1, sl
 8010fc0:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8010fc2:	4658      	mov	r0, fp
 8010fc4:	9706      	str	r7, [sp, #24]
 8010fc6:	940f      	str	r4, [sp, #60]	; 0x3c
 8010fc8:	e9cd 530d 	strd	r5, r3, [sp, #52]	; 0x34
 8010fcc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8010fce:	930b      	str	r3, [sp, #44]	; 0x2c
 8010fd0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010fd2:	930a      	str	r3, [sp, #40]	; 0x28
 8010fd4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010fd6:	9309      	str	r3, [sp, #36]	; 0x24
 8010fd8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8010fda:	e9cd 8307 	strd	r8, r3, [sp, #28]
 8010fde:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010fe0:	9305      	str	r3, [sp, #20]
 8010fe2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010fe4:	9304      	str	r3, [sp, #16]
 8010fe6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010fe8:	9303      	str	r3, [sp, #12]
 8010fea:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8010fec:	9302      	str	r3, [sp, #8]
 8010fee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010ff0:	9301      	str	r3, [sp, #4]
 8010ff2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010ff4:	9300      	str	r3, [sp, #0]
 8010ff6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8010ff8:	9310      	str	r3, [sp, #64]	; 0x40
 8010ffa:	4633      	mov	r3, r6
 8010ffc:	f000 fe9e 	bl	8011d3c <forward_lite_conv2d_if32of32wf32>
 8011000:	b021      	add	sp, #132	; 0x84
 8011002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011006:	685b      	ldr	r3, [r3, #4]
 8011008:	deff      	udf	#255	; 0xff
 801100a:	2300      	movs	r3, #0
 801100c:	685b      	ldr	r3, [r3, #4]
 801100e:	deff      	udf	#255	; 0xff
 8011010:	68d2      	ldr	r2, [r2, #12]
 8011012:	2a00      	cmp	r2, #0
 8011014:	d0d0      	beq.n	8010fb8 <forward_conv2d_if32of32wf32+0xe0>
 8011016:	2b03      	cmp	r3, #3
 8011018:	d022      	beq.n	8011060 <forward_conv2d_if32of32wf32+0x188>
 801101a:	f8dc 3028 	ldr.w	r3, [ip, #40]	; 0x28
 801101e:	b1cb      	cbz	r3, 8011054 <forward_conv2d_if32of32wf32+0x17c>
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	b1bb      	cbz	r3, 8011054 <forward_conv2d_if32of32wf32+0x17c>
 8011024:	f8d3 c018 	ldr.w	ip, [r3, #24]
 8011028:	f3c1 13c6 	ubfx	r3, r1, #7, #7
 801102c:	f3c1 5141 	ubfx	r1, r1, #21, #2
 8011030:	410b      	asrs	r3, r1
 8011032:	e9dc 1001 	ldrd	r1, r0, [ip, #4]
 8011036:	b29b      	uxth	r3, r3
 8011038:	9101      	str	r1, [sp, #4]
 801103a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801103c:	9100      	str	r1, [sp, #0]
 801103e:	4649      	mov	r1, r9
 8011040:	2800      	cmp	r0, #0
 8011042:	bf18      	it	ne
 8011044:	4681      	movne	r9, r0
 8011046:	f7ff fef7 	bl	8010e38 <ai_dict_decompress_f32>
 801104a:	e7b5      	b.n	8010fb8 <forward_conv2d_if32of32wf32+0xe0>
 801104c:	4634      	mov	r4, r6
 801104e:	e767      	b.n	8010f20 <forward_conv2d_if32of32wf32+0x48>
 8011050:	2600      	movs	r6, #0
 8011052:	e765      	b.n	8010f20 <forward_conv2d_if32of32wf32+0x48>
 8011054:	2300      	movs	r3, #0
 8011056:	699b      	ldr	r3, [r3, #24]
 8011058:	deff      	udf	#255	; 0xff
 801105a:	2300      	movs	r3, #0
 801105c:	685b      	ldr	r3, [r3, #4]
 801105e:	deff      	udf	#255	; 0xff
 8011060:	2300      	movs	r3, #0
 8011062:	685b      	ldr	r3, [r3, #4]
 8011064:	deff      	udf	#255	; 0xff
 8011066:	bf00      	nop

08011068 <forward_dense>:
 8011068:	6983      	ldr	r3, [r0, #24]
 801106a:	881a      	ldrh	r2, [r3, #0]
 801106c:	2a00      	cmp	r2, #0
 801106e:	f000 80f0 	beq.w	8011252 <forward_dense+0x1ea>
 8011072:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011076:	ed2d 8b02 	vpush	{d8}
 801107a:	6858      	ldr	r0, [r3, #4]
 801107c:	b09b      	sub	sp, #108	; 0x6c
 801107e:	6845      	ldr	r5, [r0, #4]
 8011080:	b105      	cbz	r5, 8011084 <forward_dense+0x1c>
 8011082:	682d      	ldr	r5, [r5, #0]
 8011084:	2a01      	cmp	r2, #1
 8011086:	f000 840a 	beq.w	801189e <forward_dense+0x836>
 801108a:	6906      	ldr	r6, [r0, #16]
 801108c:	b106      	cbz	r6, 8011090 <forward_dense+0x28>
 801108e:	6836      	ldr	r6, [r6, #0]
 8011090:	2a02      	cmp	r2, #2
 8011092:	f000 80e0 	beq.w	8011256 <forward_dense+0x1ee>
 8011096:	69c3      	ldr	r3, [r0, #28]
 8011098:	930d      	str	r3, [sp, #52]	; 0x34
 801109a:	2b00      	cmp	r3, #0
 801109c:	f000 83f1 	beq.w	8011882 <forward_dense+0x81a>
 80110a0:	4619      	mov	r1, r3
 80110a2:	8b03      	ldrh	r3, [r0, #24]
 80110a4:	6809      	ldr	r1, [r1, #0]
 80110a6:	2b01      	cmp	r3, #1
 80110a8:	910f      	str	r1, [sp, #60]	; 0x3c
 80110aa:	f240 83ec 	bls.w	8011886 <forward_dense+0x81e>
 80110ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80110b0:	685b      	ldr	r3, [r3, #4]
 80110b2:	930d      	str	r3, [sp, #52]	; 0x34
 80110b4:	460b      	mov	r3, r1
 80110b6:	f8d3 8018 	ldr.w	r8, [r3, #24]
 80110ba:	2a03      	cmp	r2, #3
 80110bc:	68eb      	ldr	r3, [r5, #12]
 80110be:	68f7      	ldr	r7, [r6, #12]
 80110c0:	685b      	ldr	r3, [r3, #4]
 80110c2:	687c      	ldr	r4, [r7, #4]
 80110c4:	9317      	str	r3, [sp, #92]	; 0x5c
 80110c6:	f8d8 3000 	ldr.w	r3, [r8]
 80110ca:	4621      	mov	r1, r4
 80110cc:	9419      	str	r4, [sp, #100]	; 0x64
 80110ce:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 80110d2:	f3c3 5c41 	ubfx	ip, r3, #21, #2
 80110d6:	e9d7 4702 	ldrd	r4, r7, [r7, #8]
 80110da:	fb01 f404 	mul.w	r4, r1, r4
 80110de:	fa4e f10c 	asr.w	r1, lr, ip
 80110e2:	9116      	str	r1, [sp, #88]	; 0x58
 80110e4:	f000 83d8 	beq.w	8011898 <forward_dense+0x830>
 80110e8:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80110ea:	f3c3 4343 	ubfx	r3, r3, #17, #4
 80110ee:	2a00      	cmp	r2, #0
 80110f0:	f000 83c2 	beq.w	8011878 <forward_dense+0x810>
 80110f4:	6812      	ldr	r2, [r2, #0]
 80110f6:	2a00      	cmp	r2, #0
 80110f8:	f000 83be 	beq.w	8011878 <forward_dense+0x810>
 80110fc:	2b04      	cmp	r3, #4
 80110fe:	f8d2 9018 	ldr.w	r9, [r2, #24]
 8011102:	f000 83a8 	beq.w	8011856 <forward_dense+0x7ee>
 8011106:	2b08      	cmp	r3, #8
 8011108:	f000 83a5 	beq.w	8011856 <forward_dense+0x7ee>
 801110c:	f04f 0a00 	mov.w	sl, #0
 8011110:	69ab      	ldr	r3, [r5, #24]
 8011112:	fb07 f404 	mul.w	r4, r7, r4
 8011116:	69b2      	ldr	r2, [r6, #24]
 8011118:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801111c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801111e:	6892      	ldr	r2, [r2, #8]
 8011120:	695b      	ldr	r3, [r3, #20]
 8011122:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 8011126:	9206      	str	r2, [sp, #24]
 8011128:	685b      	ldr	r3, [r3, #4]
 801112a:	428a      	cmp	r2, r1
 801112c:	9110      	str	r1, [sp, #64]	; 0x40
 801112e:	9304      	str	r3, [sp, #16]
 8011130:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011132:	ea4f 0083 	mov.w	r0, r3, lsl #2
 8011136:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801113a:	900e      	str	r0, [sp, #56]	; 0x38
 801113c:	9303      	str	r3, [sp, #12]
 801113e:	f080 8380 	bcs.w	8011842 <forward_dense+0x7da>
 8011142:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011144:	4654      	mov	r4, sl
 8011146:	4bb9      	ldr	r3, [pc, #740]	; (801142c <forward_dense+0x3c4>)
 8011148:	46ca      	mov	sl, r9
 801114a:	08d0      	lsrs	r0, r2, #3
 801114c:	ed9f 8ab8 	vldr	s16, [pc, #736]	; 8011430 <forward_dense+0x3c8>
 8011150:	4413      	add	r3, r2
 8011152:	9009      	str	r0, [sp, #36]	; 0x24
 8011154:	0099      	lsls	r1, r3, #2
 8011156:	f022 0301 	bic.w	r3, r2, #1
 801115a:	f002 0201 	and.w	r2, r2, #1
 801115e:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8011162:	9118      	str	r1, [sp, #96]	; 0x60
 8011164:	920a      	str	r2, [sp, #40]	; 0x28
 8011166:	eb09 1240 	add.w	r2, r9, r0, lsl #5
 801116a:	9305      	str	r3, [sp, #20]
 801116c:	f101 0320 	add.w	r3, r1, #32
 8011170:	9207      	str	r2, [sp, #28]
 8011172:	9311      	str	r3, [sp, #68]	; 0x44
 8011174:	444b      	add	r3, r9
 8011176:	469b      	mov	fp, r3
 8011178:	930b      	str	r3, [sp, #44]	; 0x2c
 801117a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801117c:	699b      	ldr	r3, [r3, #24]
 801117e:	689a      	ldr	r2, [r3, #8]
 8011180:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011182:	b10b      	cbz	r3, 8011188 <forward_dense+0x120>
 8011184:	699b      	ldr	r3, [r3, #24]
 8011186:	689b      	ldr	r3, [r3, #8]
 8011188:	2c00      	cmp	r4, #0
 801118a:	f000 834b 	beq.w	8011824 <forward_dense+0x7bc>
 801118e:	9916      	ldr	r1, [sp, #88]	; 0x58
 8011190:	2904      	cmp	r1, #4
 8011192:	f000 826a 	beq.w	801166a <forward_dense+0x602>
 8011196:	9903      	ldr	r1, [sp, #12]
 8011198:	9806      	ldr	r0, [sp, #24]
 801119a:	4281      	cmp	r1, r0
 801119c:	f240 8356 	bls.w	801184c <forward_dense+0x7e4>
 80111a0:	4686      	mov	lr, r0
 80111a2:	9818      	ldr	r0, [sp, #96]	; 0x60
 80111a4:	eb00 090a 	add.w	r9, r0, sl
 80111a8:	0941      	lsrs	r1, r0, #5
 80111aa:	f10a 0004 	add.w	r0, sl, #4
 80111ae:	f8cd 9020 	str.w	r9, [sp, #32]
 80111b2:	9012      	str	r0, [sp, #72]	; 0x48
 80111b4:	1c48      	adds	r0, r1, #1
 80111b6:	00c9      	lsls	r1, r1, #3
 80111b8:	3110      	adds	r1, #16
 80111ba:	9115      	str	r1, [sp, #84]	; 0x54
 80111bc:	00c1      	lsls	r1, r0, #3
 80111be:	9113      	str	r1, [sp, #76]	; 0x4c
 80111c0:	eb0a 1140 	add.w	r1, sl, r0, lsl #5
 80111c4:	9114      	str	r1, [sp, #80]	; 0x50
 80111c6:	f1a9 0104 	sub.w	r1, r9, #4
 80111ca:	f8dd 905c 	ldr.w	r9, [sp, #92]	; 0x5c
 80111ce:	910c      	str	r1, [sp, #48]	; 0x30
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	f000 8128 	beq.w	8011426 <forward_dense+0x3be>
 80111d6:	ecb3 5a01 	vldmia	r3!, {s10}
 80111da:	f1b9 0f07 	cmp.w	r9, #7
 80111de:	d83d      	bhi.n	801125c <forward_dense+0x1f4>
 80111e0:	45da      	cmp	sl, fp
 80111e2:	d211      	bcs.n	8011208 <forward_dense+0x1a0>
 80111e4:	eddf 7a92 	vldr	s15, [pc, #584]	; 8011430 <forward_dense+0x3c8>
 80111e8:	4650      	mov	r0, sl
 80111ea:	4615      	mov	r5, r2
 80111ec:	f815 1b01 	ldrb.w	r1, [r5], #1
 80111f0:	ecb0 7a01 	vldmia	r0!, {s14}
 80111f4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80111f8:	4558      	cmp	r0, fp
 80111fa:	edd1 6a00 	vldr	s13, [r1]
 80111fe:	eee6 7a87 	vfma.f32	s15, s13, s14
 8011202:	d3f3      	bcc.n	80111ec <forward_dense+0x184>
 8011204:	ee35 5a27 	vadd.f32	s10, s10, s15
 8011208:	9904      	ldr	r1, [sp, #16]
 801120a:	ecae 5a01 	vstmia	lr!, {s10}
 801120e:	440a      	add	r2, r1
 8011210:	9903      	ldr	r1, [sp, #12]
 8011212:	458e      	cmp	lr, r1
 8011214:	d3dc      	bcc.n	80111d0 <forward_dense+0x168>
 8011216:	9a06      	ldr	r2, [sp, #24]
 8011218:	1a8b      	subs	r3, r1, r2
 801121a:	3b01      	subs	r3, #1
 801121c:	f023 0303 	bic.w	r3, r3, #3
 8011220:	3304      	adds	r3, #4
 8011222:	18d3      	adds	r3, r2, r3
 8011224:	4619      	mov	r1, r3
 8011226:	9306      	str	r3, [sp, #24]
 8011228:	9b03      	ldr	r3, [sp, #12]
 801122a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801122c:	9810      	ldr	r0, [sp, #64]	; 0x40
 801122e:	4413      	add	r3, r2
 8011230:	9a07      	ldr	r2, [sp, #28]
 8011232:	4281      	cmp	r1, r0
 8011234:	9303      	str	r3, [sp, #12]
 8011236:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011238:	441a      	add	r2, r3
 801123a:	449b      	add	fp, r3
 801123c:	9207      	str	r2, [sp, #28]
 801123e:	9a05      	ldr	r2, [sp, #20]
 8011240:	441a      	add	r2, r3
 8011242:	9205      	str	r2, [sp, #20]
 8011244:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011246:	4692      	mov	sl, r2
 8011248:	f080 82fb 	bcs.w	8011842 <forward_dense+0x7da>
 801124c:	441a      	add	r2, r3
 801124e:	920b      	str	r2, [sp, #44]	; 0x2c
 8011250:	e793      	b.n	801117a <forward_dense+0x112>
 8011252:	6853      	ldr	r3, [r2, #4]
 8011254:	deff      	udf	#255	; 0xff
 8011256:	2300      	movs	r3, #0
 8011258:	685b      	ldr	r3, [r3, #4]
 801125a:	deff      	udf	#255	; 0xff
 801125c:	f002 0103 	and.w	r1, r2, #3
 8011260:	2902      	cmp	r1, #2
 8011262:	f000 81e6 	beq.w	8011632 <forward_dense+0x5ca>
 8011266:	2903      	cmp	r1, #3
 8011268:	f000 80e4 	beq.w	8011434 <forward_dense+0x3cc>
 801126c:	2901      	cmp	r1, #1
 801126e:	f000 81ef 	beq.w	8011650 <forward_dense+0x5e8>
 8011272:	9908      	ldr	r1, [sp, #32]
 8011274:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8011430 <forward_dense+0x3c8>
 8011278:	458a      	cmp	sl, r1
 801127a:	f200 82e9 	bhi.w	8011850 <forward_dense+0x7e8>
 801127e:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8011280:	f102 0108 	add.w	r1, r2, #8
 8011284:	f10a 0020 	add.w	r0, sl, #32
 8011288:	18ae      	adds	r6, r5, r2
 801128a:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 801128e:	3108      	adds	r1, #8
 8011290:	ed50 2a07 	vldr	s5, [r0, #-28]	; 0xffffffe4
 8011294:	3020      	adds	r0, #32
 8011296:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 801129a:	ed10 3a10 	vldr	s6, [r0, #-64]	; 0xffffffc0
 801129e:	ed50 3a0e 	vldr	s7, [r0, #-56]	; 0xffffffc8
 80112a2:	edd5 7a00 	vldr	s15, [r5]
 80112a6:	f811 5c10 	ldrb.w	r5, [r1, #-16]
 80112aa:	ee67 7aa2 	vmul.f32	s15, s15, s5
 80112ae:	ed10 4a0d 	vldr	s8, [r0, #-52]	; 0xffffffcc
 80112b2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80112b6:	ed50 4a0c 	vldr	s9, [r0, #-48]	; 0xffffffd0
 80112ba:	ed50 5a0b 	vldr	s11, [r0, #-44]	; 0xffffffd4
 80112be:	edd5 2a00 	vldr	s5, [r5]
 80112c2:	f811 5c0e 	ldrb.w	r5, [r1, #-14]
 80112c6:	eee2 7a83 	vfma.f32	s15, s5, s6
 80112ca:	ed10 6a0a 	vldr	s12, [r0, #-40]	; 0xffffffd8
 80112ce:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80112d2:	ed50 6a09 	vldr	s13, [r0, #-36]	; 0xffffffdc
 80112d6:	ed95 3a00 	vldr	s6, [r5]
 80112da:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 80112de:	eee3 7a23 	vfma.f32	s15, s6, s7
 80112e2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80112e6:	edd5 3a00 	vldr	s7, [r5]
 80112ea:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 80112ee:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80112f2:	eee3 7a84 	vfma.f32	s15, s7, s8
 80112f6:	ed95 4a00 	vldr	s8, [r5]
 80112fa:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 80112fe:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8011302:	eee4 7a24 	vfma.f32	s15, s8, s9
 8011306:	edd5 4a00 	vldr	s9, [r5]
 801130a:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 801130e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8011312:	eee4 7aa5 	vfma.f32	s15, s9, s11
 8011316:	edd5 5a00 	vldr	s11, [r5]
 801131a:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 801131e:	428e      	cmp	r6, r1
 8011320:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8011324:	eee5 7a86 	vfma.f32	s15, s11, s12
 8011328:	ed95 6a00 	vldr	s12, [r5]
 801132c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8011330:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011334:	d1a9      	bne.n	801128a <forward_dense+0x222>
 8011336:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8011338:	1850      	adds	r0, r2, r1
 801133a:	9914      	ldr	r1, [sp, #80]	; 0x50
 801133c:	4559      	cmp	r1, fp
 801133e:	d26f      	bcs.n	8011420 <forward_dense+0x3b8>
 8011340:	7805      	ldrb	r5, [r0, #0]
 8011342:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8011346:	edd5 7a00 	vldr	s15, [r5]
 801134a:	460d      	mov	r5, r1
 801134c:	ecf5 6a01 	vldmia	r5!, {s13}
 8011350:	45ab      	cmp	fp, r5
 8011352:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011356:	d963      	bls.n	8011420 <forward_dense+0x3b8>
 8011358:	7845      	ldrb	r5, [r0, #1]
 801135a:	edd1 6a01 	vldr	s13, [r1, #4]
 801135e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8011362:	edd5 7a00 	vldr	s15, [r5]
 8011366:	f101 0508 	add.w	r5, r1, #8
 801136a:	45ab      	cmp	fp, r5
 801136c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011370:	d956      	bls.n	8011420 <forward_dense+0x3b8>
 8011372:	7885      	ldrb	r5, [r0, #2]
 8011374:	edd1 6a02 	vldr	s13, [r1, #8]
 8011378:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 801137c:	edd5 7a00 	vldr	s15, [r5]
 8011380:	f101 050c 	add.w	r5, r1, #12
 8011384:	45ab      	cmp	fp, r5
 8011386:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801138a:	d949      	bls.n	8011420 <forward_dense+0x3b8>
 801138c:	78c5      	ldrb	r5, [r0, #3]
 801138e:	edd1 6a03 	vldr	s13, [r1, #12]
 8011392:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8011396:	edd5 7a00 	vldr	s15, [r5]
 801139a:	f101 0510 	add.w	r5, r1, #16
 801139e:	45ab      	cmp	fp, r5
 80113a0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80113a4:	d93c      	bls.n	8011420 <forward_dense+0x3b8>
 80113a6:	7905      	ldrb	r5, [r0, #4]
 80113a8:	edd1 6a04 	vldr	s13, [r1, #16]
 80113ac:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80113b0:	edd5 7a00 	vldr	s15, [r5]
 80113b4:	f101 0514 	add.w	r5, r1, #20
 80113b8:	45ab      	cmp	fp, r5
 80113ba:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80113be:	d92f      	bls.n	8011420 <forward_dense+0x3b8>
 80113c0:	7945      	ldrb	r5, [r0, #5]
 80113c2:	edd1 6a05 	vldr	s13, [r1, #20]
 80113c6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80113ca:	edd5 7a00 	vldr	s15, [r5]
 80113ce:	f101 0518 	add.w	r5, r1, #24
 80113d2:	45ab      	cmp	fp, r5
 80113d4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80113d8:	d922      	bls.n	8011420 <forward_dense+0x3b8>
 80113da:	7985      	ldrb	r5, [r0, #6]
 80113dc:	edd1 6a06 	vldr	s13, [r1, #24]
 80113e0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80113e4:	edd5 7a00 	vldr	s15, [r5]
 80113e8:	f101 051c 	add.w	r5, r1, #28
 80113ec:	45ab      	cmp	fp, r5
 80113ee:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80113f2:	d915      	bls.n	8011420 <forward_dense+0x3b8>
 80113f4:	79c5      	ldrb	r5, [r0, #7]
 80113f6:	edd1 6a07 	vldr	s13, [r1, #28]
 80113fa:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80113fe:	edd5 7a00 	vldr	s15, [r5]
 8011402:	f101 0520 	add.w	r5, r1, #32
 8011406:	45ab      	cmp	fp, r5
 8011408:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801140c:	d908      	bls.n	8011420 <forward_dense+0x3b8>
 801140e:	edd1 7a08 	vldr	s15, [r1, #32]
 8011412:	7a01      	ldrb	r1, [r0, #8]
 8011414:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8011418:	edd1 6a00 	vldr	s13, [r1]
 801141c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011420:	ee35 5a07 	vadd.f32	s10, s10, s14
 8011424:	e6f0      	b.n	8011208 <forward_dense+0x1a0>
 8011426:	ed9f 5a02 	vldr	s10, [pc, #8]	; 8011430 <forward_dense+0x3c8>
 801142a:	e6d6      	b.n	80111da <forward_dense+0x172>
 801142c:	3ffffff8 	.word	0x3ffffff8
 8011430:	00000000 	.word	0x00000000
 8011434:	eeb0 7a48 	vmov.f32	s14, s16
 8011438:	4650      	mov	r0, sl
 801143a:	4611      	mov	r1, r2
 801143c:	468c      	mov	ip, r1
 801143e:	4606      	mov	r6, r0
 8011440:	f81c 5b01 	ldrb.w	r5, [ip], #1
 8011444:	ecf6 7a01 	vldmia	r6!, {s15}
 8011448:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 801144c:	edd5 6a00 	vldr	s13, [r5]
 8011450:	9d08      	ldr	r5, [sp, #32]
 8011452:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011456:	42ae      	cmp	r6, r5
 8011458:	d866      	bhi.n	8011528 <forward_dense+0x4c0>
 801145a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801145c:	f101 0711 	add.w	r7, r1, #17
 8011460:	3109      	adds	r1, #9
 8011462:	eba5 0800 	sub.w	r8, r5, r0
 8011466:	3024      	adds	r0, #36	; 0x24
 8011468:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801146c:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 8011470:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 8011474:	3108      	adds	r1, #8
 8011476:	ed50 2a07 	vldr	s5, [r0, #-28]	; 0xffffffe4
 801147a:	3020      	adds	r0, #32
 801147c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8011480:	ed10 3a10 	vldr	s6, [r0, #-64]	; 0xffffffc0
 8011484:	ed50 3a0e 	vldr	s7, [r0, #-56]	; 0xffffffc8
 8011488:	edd5 7a00 	vldr	s15, [r5]
 801148c:	f811 5c10 	ldrb.w	r5, [r1, #-16]
 8011490:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8011494:	ed10 4a0d 	vldr	s8, [r0, #-52]	; 0xffffffcc
 8011498:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 801149c:	ed50 4a0c 	vldr	s9, [r0, #-48]	; 0xffffffd0
 80114a0:	ed50 5a0b 	vldr	s11, [r0, #-44]	; 0xffffffd4
 80114a4:	edd5 2a00 	vldr	s5, [r5]
 80114a8:	f811 5c0e 	ldrb.w	r5, [r1, #-14]
 80114ac:	eee2 7a83 	vfma.f32	s15, s5, s6
 80114b0:	ed10 6a0a 	vldr	s12, [r0, #-40]	; 0xffffffd8
 80114b4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80114b8:	ed50 6a09 	vldr	s13, [r0, #-36]	; 0xffffffdc
 80114bc:	ed95 3a00 	vldr	s6, [r5]
 80114c0:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 80114c4:	eee3 7a23 	vfma.f32	s15, s6, s7
 80114c8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80114cc:	edd5 3a00 	vldr	s7, [r5]
 80114d0:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 80114d4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80114d8:	eee3 7a84 	vfma.f32	s15, s7, s8
 80114dc:	ed95 4a00 	vldr	s8, [r5]
 80114e0:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 80114e4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80114e8:	eee4 7a24 	vfma.f32	s15, s8, s9
 80114ec:	edd5 4a00 	vldr	s9, [r5]
 80114f0:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 80114f4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80114f8:	eee4 7aa5 	vfma.f32	s15, s9, s11
 80114fc:	edd5 5a00 	vldr	s11, [r5]
 8011500:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 8011504:	428f      	cmp	r7, r1
 8011506:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 801150a:	eee5 7a86 	vfma.f32	s15, s11, s12
 801150e:	ed95 6a00 	vldr	s12, [r5]
 8011512:	eee6 7a26 	vfma.f32	s15, s12, s13
 8011516:	ee37 7a27 	vadd.f32	s14, s14, s15
 801151a:	d1a9      	bne.n	8011470 <forward_dense+0x408>
 801151c:	f108 0801 	add.w	r8, r8, #1
 8011520:	eb0c 0cc8 	add.w	ip, ip, r8, lsl #3
 8011524:	eb06 1648 	add.w	r6, r6, r8, lsl #5
 8011528:	455e      	cmp	r6, fp
 801152a:	f4bf af79 	bcs.w	8011420 <forward_dense+0x3b8>
 801152e:	f89c 1000 	ldrb.w	r1, [ip]
 8011532:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8011536:	edd1 7a00 	vldr	s15, [r1]
 801153a:	4631      	mov	r1, r6
 801153c:	ecf1 6a01 	vldmia	r1!, {s13}
 8011540:	458b      	cmp	fp, r1
 8011542:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011546:	f67f af6b 	bls.w	8011420 <forward_dense+0x3b8>
 801154a:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801154e:	edd6 6a01 	vldr	s13, [r6, #4]
 8011552:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8011556:	edd1 7a00 	vldr	s15, [r1]
 801155a:	f106 0108 	add.w	r1, r6, #8
 801155e:	458b      	cmp	fp, r1
 8011560:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011564:	f67f af5c 	bls.w	8011420 <forward_dense+0x3b8>
 8011568:	f89c 1002 	ldrb.w	r1, [ip, #2]
 801156c:	edd6 6a02 	vldr	s13, [r6, #8]
 8011570:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8011574:	edd1 7a00 	vldr	s15, [r1]
 8011578:	f106 010c 	add.w	r1, r6, #12
 801157c:	458b      	cmp	fp, r1
 801157e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011582:	f67f af4d 	bls.w	8011420 <forward_dense+0x3b8>
 8011586:	f89c 1003 	ldrb.w	r1, [ip, #3]
 801158a:	edd6 6a03 	vldr	s13, [r6, #12]
 801158e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8011592:	edd1 7a00 	vldr	s15, [r1]
 8011596:	f106 0110 	add.w	r1, r6, #16
 801159a:	458b      	cmp	fp, r1
 801159c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80115a0:	f67f af3e 	bls.w	8011420 <forward_dense+0x3b8>
 80115a4:	f89c 1004 	ldrb.w	r1, [ip, #4]
 80115a8:	edd6 6a04 	vldr	s13, [r6, #16]
 80115ac:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80115b0:	edd1 7a00 	vldr	s15, [r1]
 80115b4:	f106 0114 	add.w	r1, r6, #20
 80115b8:	458b      	cmp	fp, r1
 80115ba:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80115be:	f67f af2f 	bls.w	8011420 <forward_dense+0x3b8>
 80115c2:	f89c 1005 	ldrb.w	r1, [ip, #5]
 80115c6:	edd6 6a05 	vldr	s13, [r6, #20]
 80115ca:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80115ce:	edd1 7a00 	vldr	s15, [r1]
 80115d2:	f106 0118 	add.w	r1, r6, #24
 80115d6:	458b      	cmp	fp, r1
 80115d8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80115dc:	f67f af20 	bls.w	8011420 <forward_dense+0x3b8>
 80115e0:	f89c 1006 	ldrb.w	r1, [ip, #6]
 80115e4:	edd6 6a06 	vldr	s13, [r6, #24]
 80115e8:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80115ec:	edd1 7a00 	vldr	s15, [r1]
 80115f0:	f106 011c 	add.w	r1, r6, #28
 80115f4:	458b      	cmp	fp, r1
 80115f6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80115fa:	f67f af11 	bls.w	8011420 <forward_dense+0x3b8>
 80115fe:	f89c 1007 	ldrb.w	r1, [ip, #7]
 8011602:	edd6 6a07 	vldr	s13, [r6, #28]
 8011606:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801160a:	edd1 7a00 	vldr	s15, [r1]
 801160e:	f106 0120 	add.w	r1, r6, #32
 8011612:	458b      	cmp	fp, r1
 8011614:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011618:	f67f af02 	bls.w	8011420 <forward_dense+0x3b8>
 801161c:	f89c 1008 	ldrb.w	r1, [ip, #8]
 8011620:	edd6 7a08 	vldr	s15, [r6, #32]
 8011624:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8011628:	edd1 6a00 	vldr	s13, [r1]
 801162c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011630:	e6f6      	b.n	8011420 <forward_dense+0x3b8>
 8011632:	eeb0 7a48 	vmov.f32	s14, s16
 8011636:	4650      	mov	r0, sl
 8011638:	4611      	mov	r1, r2
 801163a:	f811 5b01 	ldrb.w	r5, [r1], #1
 801163e:	ecf0 7a01 	vldmia	r0!, {s15}
 8011642:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8011646:	edd5 6a00 	vldr	s13, [r5]
 801164a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801164e:	e6f5      	b.n	801143c <forward_dense+0x3d4>
 8011650:	4611      	mov	r1, r2
 8011652:	edda 7a00 	vldr	s15, [sl]
 8011656:	9812      	ldr	r0, [sp, #72]	; 0x48
 8011658:	f811 5b01 	ldrb.w	r5, [r1], #1
 801165c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8011660:	ed95 7a00 	vldr	s14, [r5]
 8011664:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011668:	e7e7      	b.n	801163a <forward_dense+0x5d2>
 801166a:	9803      	ldr	r0, [sp, #12]
 801166c:	9906      	ldr	r1, [sp, #24]
 801166e:	4288      	cmp	r0, r1
 8011670:	f67f adda 	bls.w	8011228 <forward_dense+0x1c0>
 8011674:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011676:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 801167a:	468b      	mov	fp, r1
 801167c:	f100 0c01 	add.w	ip, r0, #1
 8011680:	9805      	ldr	r0, [sp, #20]
 8011682:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8011686:	3801      	subs	r0, #1
 8011688:	9008      	str	r0, [sp, #32]
 801168a:	2b00      	cmp	r3, #0
 801168c:	f000 80bf 	beq.w	801180e <forward_dense+0x7a6>
 8011690:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011692:	ecf3 2a01 	vldmia	r3!, {s5}
 8011696:	ed1f 7a9a 	vldr	s14, [pc, #-616]	; 8011430 <forward_dense+0x3c8>
 801169a:	2900      	cmp	r1, #0
 801169c:	f000 80bf 	beq.w	801181e <forward_dense+0x7b6>
 80116a0:	1d10      	adds	r0, r2, #4
 80116a2:	f10a 0120 	add.w	r1, sl, #32
 80116a6:	f810 7c04 	ldrb.w	r7, [r0, #-4]
 80116aa:	3004      	adds	r0, #4
 80116ac:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
 80116b0:	3120      	adds	r1, #32
 80116b2:	f007 0e0f 	and.w	lr, r7, #15
 80116b6:	093f      	lsrs	r7, r7, #4
 80116b8:	f810 6c07 	ldrb.w	r6, [r0, #-7]
 80116bc:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
 80116c0:	ed11 4a10 	vldr	s8, [r1, #-64]	; 0xffffffc0
 80116c4:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 80116c8:	ed51 3a0e 	vldr	s7, [r1, #-56]	; 0xffffffc8
 80116cc:	edde 7a00 	vldr	s15, [lr]
 80116d0:	ed97 3a00 	vldr	s6, [r7]
 80116d4:	0937      	lsrs	r7, r6, #4
 80116d6:	ee67 7a82 	vmul.f32	s15, s15, s4
 80116da:	f006 060f 	and.w	r6, r6, #15
 80116de:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 80116e2:	f810 5c06 	ldrb.w	r5, [r0, #-6]
 80116e6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80116ea:	ed11 5a0d 	vldr	s10, [r1, #-52]	; 0xffffffcc
 80116ee:	eee3 7a04 	vfma.f32	s15, s6, s8
 80116f2:	ed97 3a00 	vldr	s6, [r7]
 80116f6:	ed96 4a00 	vldr	s8, [r6]
 80116fa:	092e      	lsrs	r6, r5, #4
 80116fc:	ed51 4a0c 	vldr	s9, [r1, #-48]	; 0xffffffd0
 8011700:	f005 050f 	and.w	r5, r5, #15
 8011704:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8011708:	ed11 6a0b 	vldr	s12, [r1, #-44]	; 0xffffffd4
 801170c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8011710:	ed51 5a0a 	vldr	s11, [r1, #-40]	; 0xffffffd8
 8011714:	ed51 6a09 	vldr	s13, [r1, #-36]	; 0xffffffdc
 8011718:	eee3 7a23 	vfma.f32	s15, s6, s7
 801171c:	eee4 7a05 	vfma.f32	s15, s8, s10
 8011720:	ed96 4a00 	vldr	s8, [r6]
 8011724:	ed95 5a00 	vldr	s10, [r5]
 8011728:	f810 5c05 	ldrb.w	r5, [r0, #-5]
 801172c:	4560      	cmp	r0, ip
 801172e:	ea4f 1615 	mov.w	r6, r5, lsr #4
 8011732:	f005 050f 	and.w	r5, r5, #15
 8011736:	eee4 7a24 	vfma.f32	s15, s8, s9
 801173a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 801173e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8011742:	eee5 7a06 	vfma.f32	s15, s10, s12
 8011746:	ed96 5a00 	vldr	s10, [r6]
 801174a:	ed95 6a00 	vldr	s12, [r5]
 801174e:	eee5 7a25 	vfma.f32	s15, s10, s11
 8011752:	eee6 7a26 	vfma.f32	s15, s12, s13
 8011756:	ee37 7a27 	vadd.f32	s14, s14, s15
 801175a:	d1a4      	bne.n	80116a6 <forward_dense+0x63e>
 801175c:	f1ac 0804 	sub.w	r8, ip, #4
 8011760:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8011764:	9905      	ldr	r1, [sp, #20]
 8011766:	458e      	cmp	lr, r1
 8011768:	d229      	bcs.n	80117be <forward_dense+0x756>
 801176a:	9908      	ldr	r1, [sp, #32]
 801176c:	f10e 0008 	add.w	r0, lr, #8
 8011770:	f108 36ff 	add.w	r6, r8, #4294967295
 8011774:	eba1 070e 	sub.w	r7, r1, lr
 8011778:	ea4f 09d7 	mov.w	r9, r7, lsr #3
 801177c:	eb08 07d7 	add.w	r7, r8, r7, lsr #3
 8011780:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011784:	3008      	adds	r0, #8
 8011786:	ed50 5a03 	vldr	s11, [r0, #-12]
 801178a:	f001 050f 	and.w	r5, r1, #15
 801178e:	0909      	lsrs	r1, r1, #4
 8011790:	ed50 6a04 	vldr	s13, [r0, #-16]
 8011794:	42b7      	cmp	r7, r6
 8011796:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 801179a:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801179e:	edd5 7a00 	vldr	s15, [r5]
 80117a2:	ed91 6a00 	vldr	s12, [r1]
 80117a6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80117aa:	eee6 7a26 	vfma.f32	s15, s12, s13
 80117ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80117b2:	d1e5      	bne.n	8011780 <forward_dense+0x718>
 80117b4:	f109 0901 	add.w	r9, r9, #1
 80117b8:	44c8      	add	r8, r9
 80117ba:	eb0e 0ec9 	add.w	lr, lr, r9, lsl #3
 80117be:	990a      	ldr	r1, [sp, #40]	; 0x28
 80117c0:	b1c1      	cbz	r1, 80117f4 <forward_dense+0x78c>
 80117c2:	f898 1000 	ldrb.w	r1, [r8]
 80117c6:	edde 7a00 	vldr	s15, [lr]
 80117ca:	0909      	lsrs	r1, r1, #4
 80117cc:	9804      	ldr	r0, [sp, #16]
 80117ce:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80117d2:	4402      	add	r2, r0
 80117d4:	4484      	add	ip, r0
 80117d6:	edd1 6a00 	vldr	s13, [r1]
 80117da:	9903      	ldr	r1, [sp, #12]
 80117dc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80117e0:	ee72 2a87 	vadd.f32	s5, s5, s14
 80117e4:	eceb 2a01 	vstmia	fp!, {s5}
 80117e8:	4559      	cmp	r1, fp
 80117ea:	f63f af4e 	bhi.w	801168a <forward_dense+0x622>
 80117ee:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 80117f2:	e510      	b.n	8011216 <forward_dense+0x1ae>
 80117f4:	9904      	ldr	r1, [sp, #16]
 80117f6:	ee32 7a87 	vadd.f32	s14, s5, s14
 80117fa:	440a      	add	r2, r1
 80117fc:	448c      	add	ip, r1
 80117fe:	9903      	ldr	r1, [sp, #12]
 8011800:	ecab 7a01 	vstmia	fp!, {s14}
 8011804:	458b      	cmp	fp, r1
 8011806:	d2f2      	bcs.n	80117ee <forward_dense+0x786>
 8011808:	2b00      	cmp	r3, #0
 801180a:	f47f af41 	bne.w	8011690 <forward_dense+0x628>
 801180e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011810:	eef0 2a48 	vmov.f32	s5, s16
 8011814:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80118a4 <forward_dense+0x83c>
 8011818:	2900      	cmp	r1, #0
 801181a:	f47f af41 	bne.w	80116a0 <forward_dense+0x638>
 801181e:	46d6      	mov	lr, sl
 8011820:	4690      	mov	r8, r2
 8011822:	e79f      	b.n	8011764 <forward_dense+0x6fc>
 8011824:	9819      	ldr	r0, [sp, #100]	; 0x64
 8011826:	4651      	mov	r1, sl
 8011828:	9d06      	ldr	r5, [sp, #24]
 801182a:	9001      	str	r0, [sp, #4]
 801182c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801182e:	9000      	str	r0, [sp, #0]
 8011830:	4628      	mov	r0, r5
 8011832:	f000 fbe3 	bl	8011ffc <forward_lite_dense_if32of32wf32>
 8011836:	462b      	mov	r3, r5
 8011838:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801183a:	4413      	add	r3, r2
 801183c:	4619      	mov	r1, r3
 801183e:	9306      	str	r3, [sp, #24]
 8011840:	e4f2      	b.n	8011228 <forward_dense+0x1c0>
 8011842:	b01b      	add	sp, #108	; 0x6c
 8011844:	ecbd 8b02 	vpop	{d8}
 8011848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801184c:	4601      	mov	r1, r0
 801184e:	e4eb      	b.n	8011228 <forward_dense+0x1c0>
 8011850:	4651      	mov	r1, sl
 8011852:	4610      	mov	r0, r2
 8011854:	e572      	b.n	801133c <forward_dense+0x2d4>
 8011856:	f8d8 800c 	ldr.w	r8, [r8, #12]
 801185a:	f1b9 0f00 	cmp.w	r9, #0
 801185e:	d016      	beq.n	801188e <forward_dense+0x826>
 8011860:	e9d9 0100 	ldrd	r0, r1, [r9]
 8011864:	f000 fde6 	bl	8012434 <ai_array_get_byte_size>
 8011868:	f8d9 a00c 	ldr.w	sl, [r9, #12]
 801186c:	4602      	mov	r2, r0
 801186e:	4640      	mov	r0, r8
 8011870:	4651      	mov	r1, sl
 8011872:	f000 fceb 	bl	801224c <st_int8_copy>
 8011876:	e44b      	b.n	8011110 <forward_dense+0xa8>
 8011878:	2b04      	cmp	r3, #4
 801187a:	d00a      	beq.n	8011892 <forward_dense+0x82a>
 801187c:	f04f 0900 	mov.w	r9, #0
 8011880:	e441      	b.n	8011106 <forward_dense+0x9e>
 8011882:	930f      	str	r3, [sp, #60]	; 0x3c
 8011884:	e417      	b.n	80110b6 <forward_dense+0x4e>
 8011886:	2300      	movs	r3, #0
 8011888:	930d      	str	r3, [sp, #52]	; 0x34
 801188a:	460b      	mov	r3, r1
 801188c:	e413      	b.n	80110b6 <forward_dense+0x4e>
 801188e:	46c2      	mov	sl, r8
 8011890:	e43e      	b.n	8011110 <forward_dense+0xa8>
 8011892:	f8d8 a00c 	ldr.w	sl, [r8, #12]
 8011896:	e43b      	b.n	8011110 <forward_dense+0xa8>
 8011898:	2300      	movs	r3, #0
 801189a:	685b      	ldr	r3, [r3, #4]
 801189c:	deff      	udf	#255	; 0xff
 801189e:	2300      	movs	r3, #0
 80118a0:	685b      	ldr	r3, [r3, #4]
 80118a2:	deff      	udf	#255	; 0xff
 80118a4:	00000000 	.word	0x00000000

080118a8 <forward_relu>:
 80118a8:	6982      	ldr	r2, [r0, #24]
 80118aa:	8813      	ldrh	r3, [r2, #0]
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d05b      	beq.n	8011968 <forward_relu+0xc0>
 80118b0:	6851      	ldr	r1, [r2, #4]
 80118b2:	684a      	ldr	r2, [r1, #4]
 80118b4:	b102      	cbz	r2, 80118b8 <forward_relu+0x10>
 80118b6:	6812      	ldr	r2, [r2, #0]
 80118b8:	2b01      	cmp	r3, #1
 80118ba:	f000 8123 	beq.w	8011b04 <forward_relu+0x25c>
 80118be:	b470      	push	{r4, r5, r6}
 80118c0:	690b      	ldr	r3, [r1, #16]
 80118c2:	b103      	cbz	r3, 80118c6 <forward_relu+0x1e>
 80118c4:	681b      	ldr	r3, [r3, #0]
 80118c6:	69c6      	ldr	r6, [r0, #28]
 80118c8:	2e00      	cmp	r6, #0
 80118ca:	f000 809e 	beq.w	8011a0a <forward_relu+0x162>
 80118ce:	6871      	ldr	r1, [r6, #4]
 80118d0:	6998      	ldr	r0, [r3, #24]
 80118d2:	2901      	cmp	r1, #1
 80118d4:	f000 80c3 	beq.w	8011a5e <forward_relu+0x1b6>
 80118d8:	6893      	ldr	r3, [r2, #8]
 80118da:	6991      	ldr	r1, [r2, #24]
 80118dc:	0a1b      	lsrs	r3, r3, #8
 80118de:	6880      	ldr	r0, [r0, #8]
 80118e0:	688d      	ldr	r5, [r1, #8]
 80118e2:	f000 80f2 	beq.w	8011aca <forward_relu+0x222>
 80118e6:	68d4      	ldr	r4, [r2, #12]
 80118e8:	2201      	movs	r2, #1
 80118ea:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80118ee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80118f2:	42a3      	cmp	r3, r4
 80118f4:	fb01 f202 	mul.w	r2, r1, r2
 80118f8:	d1f9      	bne.n	80118ee <forward_relu+0x46>
 80118fa:	68b3      	ldr	r3, [r6, #8]
 80118fc:	ed93 7a02 	vldr	s14, [r3, #8]
 8011900:	edd3 6a00 	vldr	s13, [r3]
 8011904:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8011908:	ed93 6a01 	vldr	s12, [r3, #4]
 801190c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011910:	d42c      	bmi.n	801196c <forward_relu+0xc4>
 8011912:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8011916:	4413      	add	r3, r2
 8011918:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 801191c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8011920:	4295      	cmp	r5, r2
 8011922:	d81f      	bhi.n	8011964 <forward_relu+0xbc>
 8011924:	3204      	adds	r2, #4
 8011926:	1d01      	adds	r1, r0, #4
 8011928:	e00d      	b.n	8011946 <forward_relu+0x9e>
 801192a:	eef4 6ae7 	vcmpe.f32	s13, s15
 801192e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011932:	db03      	blt.n	801193c <forward_relu+0x94>
 8011934:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011938:	ee67 7a86 	vmul.f32	s15, s15, s12
 801193c:	3b08      	subs	r3, #8
 801193e:	ed61 7a01 	vstmdb	r1!, {s15}
 8011942:	429d      	cmp	r5, r3
 8011944:	d80e      	bhi.n	8011964 <forward_relu+0xbc>
 8011946:	4613      	mov	r3, r2
 8011948:	ed72 7a01 	vldmdb	r2!, {s15}
 801194c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011954:	d9e9      	bls.n	801192a <forward_relu+0x82>
 8011956:	3b08      	subs	r3, #8
 8011958:	eef0 7a47 	vmov.f32	s15, s14
 801195c:	429d      	cmp	r5, r3
 801195e:	ed61 7a01 	vstmdb	r1!, {s15}
 8011962:	d9f0      	bls.n	8011946 <forward_relu+0x9e>
 8011964:	bc70      	pop	{r4, r5, r6}
 8011966:	4770      	bx	lr
 8011968:	685b      	ldr	r3, [r3, #4]
 801196a:	deff      	udf	#255	; 0xff
 801196c:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8011970:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
 8011974:	4411      	add	r1, r2
 8011976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801197a:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 801197e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8011982:	d11f      	bne.n	80119c4 <forward_relu+0x11c>
 8011984:	429d      	cmp	r5, r3
 8011986:	d8ed      	bhi.n	8011964 <forward_relu+0xbc>
 8011988:	1b5d      	subs	r5, r3, r5
 801198a:	1d1a      	adds	r2, r3, #4
 801198c:	1d01      	adds	r1, r0, #4
 801198e:	2000      	movs	r0, #0
 8011990:	f025 0503 	bic.w	r5, r5, #3
 8011994:	1b5b      	subs	r3, r3, r5
 8011996:	ed72 7a01 	vldmdb	r2!, {s15}
 801199a:	eef4 7ae6 	vcmpe.f32	s15, s13
 801199e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119a2:	dc0a      	bgt.n	80119ba <forward_relu+0x112>
 80119a4:	429a      	cmp	r2, r3
 80119a6:	f841 0d04 	str.w	r0, [r1, #-4]!
 80119aa:	d0db      	beq.n	8011964 <forward_relu+0xbc>
 80119ac:	ed72 7a01 	vldmdb	r2!, {s15}
 80119b0:	eef4 7ae6 	vcmpe.f32	s15, s13
 80119b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119b8:	ddf4      	ble.n	80119a4 <forward_relu+0xfc>
 80119ba:	429a      	cmp	r2, r3
 80119bc:	ed61 7a01 	vstmdb	r1!, {s15}
 80119c0:	d1e9      	bne.n	8011996 <forward_relu+0xee>
 80119c2:	e7cf      	b.n	8011964 <forward_relu+0xbc>
 80119c4:	429d      	cmp	r5, r3
 80119c6:	d8cd      	bhi.n	8011964 <forward_relu+0xbc>
 80119c8:	1b5d      	subs	r5, r3, r5
 80119ca:	1d1a      	adds	r2, r3, #4
 80119cc:	1d01      	adds	r1, r0, #4
 80119ce:	f025 0503 	bic.w	r5, r5, #3
 80119d2:	1b5b      	subs	r3, r3, r5
 80119d4:	ed72 7a01 	vldmdb	r2!, {s15}
 80119d8:	eef4 6ae7 	vcmpe.f32	s13, s15
 80119dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119e0:	db0e      	blt.n	8011a00 <forward_relu+0x158>
 80119e2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80119e6:	4293      	cmp	r3, r2
 80119e8:	ee67 7a86 	vmul.f32	s15, s15, s12
 80119ec:	ed61 7a01 	vstmdb	r1!, {s15}
 80119f0:	d0b8      	beq.n	8011964 <forward_relu+0xbc>
 80119f2:	ed72 7a01 	vldmdb	r2!, {s15}
 80119f6:	eef4 6ae7 	vcmpe.f32	s13, s15
 80119fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119fe:	daf0      	bge.n	80119e2 <forward_relu+0x13a>
 8011a00:	4293      	cmp	r3, r2
 8011a02:	ed61 7a01 	vstmdb	r1!, {s15}
 8011a06:	d1e5      	bne.n	80119d4 <forward_relu+0x12c>
 8011a08:	e7ac      	b.n	8011964 <forward_relu+0xbc>
 8011a0a:	6999      	ldr	r1, [r3, #24]
 8011a0c:	6893      	ldr	r3, [r2, #8]
 8011a0e:	6990      	ldr	r0, [r2, #24]
 8011a10:	0a1b      	lsrs	r3, r3, #8
 8011a12:	6889      	ldr	r1, [r1, #8]
 8011a14:	6884      	ldr	r4, [r0, #8]
 8011a16:	d06e      	beq.n	8011af6 <forward_relu+0x24e>
 8011a18:	68d5      	ldr	r5, [r2, #12]
 8011a1a:	2201      	movs	r2, #1
 8011a1c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8011a20:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 8011a24:	429d      	cmp	r5, r3
 8011a26:	fb00 f202 	mul.w	r2, r0, r2
 8011a2a:	d1f9      	bne.n	8011a20 <forward_relu+0x178>
 8011a2c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8011a30:	4413      	add	r3, r2
 8011a32:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8011a36:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8011a3a:	4294      	cmp	r4, r2
 8011a3c:	d892      	bhi.n	8011964 <forward_relu+0xbc>
 8011a3e:	3204      	adds	r2, #4
 8011a40:	3104      	adds	r1, #4
 8011a42:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8011b0c <forward_relu+0x264>
 8011a46:	4613      	mov	r3, r2
 8011a48:	ed72 7a01 	vldmdb	r2!, {s15}
 8011a4c:	3b08      	subs	r3, #8
 8011a4e:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8011a52:	ed61 7a01 	vstmdb	r1!, {s15}
 8011a56:	429c      	cmp	r4, r3
 8011a58:	d9f5      	bls.n	8011a46 <forward_relu+0x19e>
 8011a5a:	bc70      	pop	{r4, r5, r6}
 8011a5c:	4770      	bx	lr
 8011a5e:	6993      	ldr	r3, [r2, #24]
 8011a60:	6880      	ldr	r0, [r0, #8]
 8011a62:	689c      	ldr	r4, [r3, #8]
 8011a64:	6893      	ldr	r3, [r2, #8]
 8011a66:	0a1b      	lsrs	r3, r3, #8
 8011a68:	d047      	beq.n	8011afa <forward_relu+0x252>
 8011a6a:	68d5      	ldr	r5, [r2, #12]
 8011a6c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8011a70:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8011a74:	42ab      	cmp	r3, r5
 8011a76:	fb02 f101 	mul.w	r1, r2, r1
 8011a7a:	d1f9      	bne.n	8011a70 <forward_relu+0x1c8>
 8011a7c:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 8011a80:	68b3      	ldr	r3, [r6, #8]
 8011a82:	440a      	add	r2, r1
 8011a84:	ed93 7a00 	vldr	s14, [r3]
 8011a88:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011a8c:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8011a90:	429c      	cmp	r4, r3
 8011a92:	f63f af67 	bhi.w	8011964 <forward_relu+0xbc>
 8011a96:	1d02      	adds	r2, r0, #4
 8011a98:	3304      	adds	r3, #4
 8011a9a:	2000      	movs	r0, #0
 8011a9c:	ed53 7a01 	vldr	s15, [r3, #-4]
 8011aa0:	1f19      	subs	r1, r3, #4
 8011aa2:	3b08      	subs	r3, #8
 8011aa4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011aa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011aac:	d406      	bmi.n	8011abc <forward_relu+0x214>
 8011aae:	429c      	cmp	r4, r3
 8011ab0:	f842 0d04 	str.w	r0, [r2, #-4]!
 8011ab4:	f63f af56 	bhi.w	8011964 <forward_relu+0xbc>
 8011ab8:	460b      	mov	r3, r1
 8011aba:	e7ef      	b.n	8011a9c <forward_relu+0x1f4>
 8011abc:	429c      	cmp	r4, r3
 8011abe:	ed62 7a01 	vstmdb	r2!, {s15}
 8011ac2:	f63f af4f 	bhi.w	8011964 <forward_relu+0xbc>
 8011ac6:	460b      	mov	r3, r1
 8011ac8:	e7e8      	b.n	8011a9c <forward_relu+0x1f4>
 8011aca:	68b3      	ldr	r3, [r6, #8]
 8011acc:	ed93 7a02 	vldr	s14, [r3, #8]
 8011ad0:	edd3 6a00 	vldr	s13, [r3]
 8011ad4:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8011ad8:	ed93 6a01 	vldr	s12, [r3, #4]
 8011adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ae0:	d401      	bmi.n	8011ae6 <forward_relu+0x23e>
 8011ae2:	462a      	mov	r2, r5
 8011ae4:	e71e      	b.n	8011924 <forward_relu+0x7c>
 8011ae6:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8011aea:	462b      	mov	r3, r5
 8011aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011af0:	f47f af6a 	bne.w	80119c8 <forward_relu+0x120>
 8011af4:	e748      	b.n	8011988 <forward_relu+0xe0>
 8011af6:	4622      	mov	r2, r4
 8011af8:	e7a1      	b.n	8011a3e <forward_relu+0x196>
 8011afa:	68b2      	ldr	r2, [r6, #8]
 8011afc:	4623      	mov	r3, r4
 8011afe:	ed92 7a00 	vldr	s14, [r2]
 8011b02:	e7c8      	b.n	8011a96 <forward_relu+0x1ee>
 8011b04:	2300      	movs	r3, #0
 8011b06:	685b      	ldr	r3, [r3, #4]
 8011b08:	deff      	udf	#255	; 0xff
 8011b0a:	bf00      	nop
 8011b0c:	00000000 	.word	0x00000000

08011b10 <ai_conv2d_kernel_simple_opt_f32.constprop.0>:
 8011b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b14:	ed2d 8b0c 	vpush	{d8-d13}
 8011b18:	b08d      	sub	sp, #52	; 0x34
 8011b1a:	461d      	mov	r5, r3
 8011b1c:	9003      	str	r0, [sp, #12]
 8011b1e:	9207      	str	r2, [sp, #28]
 8011b20:	9c24      	ldr	r4, [sp, #144]	; 0x90
 8011b22:	9308      	str	r3, [sp, #32]
 8011b24:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
 8011b28:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011b2a:	910b      	str	r1, [sp, #44]	; 0x2c
 8011b2c:	e9dd 0225 	ldrd	r0, r2, [sp, #148]	; 0x94
 8011b30:	fb00 f002 	mul.w	r0, r0, r2
 8011b34:	9004      	str	r0, [sp, #16]
 8011b36:	f8bd 00a4 	ldrh.w	r0, [sp, #164]	; 0xa4
 8011b3a:	9009      	str	r0, [sp, #36]	; 0x24
 8011b3c:	2c00      	cmp	r4, #0
 8011b3e:	f000 80ed 	beq.w	8011d1c <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x20c>
 8011b42:	009c      	lsls	r4, r3, #2
 8011b44:	fb00 f305 	mul.w	r3, r0, r5
 8011b48:	009b      	lsls	r3, r3, #2
 8011b4a:	9405      	str	r4, [sp, #20]
 8011b4c:	9306      	str	r3, [sp, #24]
 8011b4e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8011b50:	fb03 f305 	mul.w	r3, r3, r5
 8011b54:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8011b58:	9301      	str	r3, [sp, #4]
 8011b5a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8011b5c:	425b      	negs	r3, r3
 8011b5e:	9300      	str	r3, [sp, #0]
 8011b60:	2300      	movs	r3, #0
 8011b62:	9302      	str	r3, [sp, #8]
 8011b64:	00ab      	lsls	r3, r5, #2
 8011b66:	930a      	str	r3, [sp, #40]	; 0x28
 8011b68:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	f2c0 80dd 	blt.w	8011d2a <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x21a>
 8011b70:	9e01      	ldr	r6, [sp, #4]
 8011b72:	2000      	movs	r0, #0
 8011b74:	9d04      	ldr	r5, [sp, #16]
 8011b76:	9b07      	ldr	r3, [sp, #28]
 8011b78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011b7a:	9900      	ldr	r1, [sp, #0]
 8011b7c:	fb05 3502 	mla	r5, r5, r2, r3
 8011b80:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8011b82:	440b      	add	r3, r1
 8011b84:	9925      	ldr	r1, [sp, #148]	; 0x94
 8011b86:	428b      	cmp	r3, r1
 8011b88:	bf94      	ite	ls
 8011b8a:	ebc0 0003 	rsbls	r0, r0, r3
 8011b8e:	ebc0 0001 	rsbhi	r0, r0, r1
 8011b92:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8011b94:	f1bb 0f00 	cmp.w	fp, #0
 8011b98:	eba3 0a00 	sub.w	sl, r3, r0
 8011b9c:	9b08      	ldr	r3, [sp, #32]
 8011b9e:	eba1 0900 	sub.w	r9, r1, r0
 8011ba2:	fb03 f000 	mul.w	r0, r3, r0
 8011ba6:	f340 80c6 	ble.w	8011d36 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x226>
 8011baa:	f020 040f 	bic.w	r4, r0, #15
 8011bae:	eeb0 7a40 	vmov.f32	s14, s0
 8011bb2:	fb02 fa0a 	mul.w	sl, r2, sl
 8011bb6:	f04f 0c00 	mov.w	ip, #0
 8011bba:	f104 38ff 	add.w	r8, r4, #4294967295
 8011bbe:	fb02 f909 	mul.w	r9, r2, r9
 8011bc2:	ea4f 1818 	mov.w	r8, r8, lsr #4
 8011bc6:	f108 0801 	add.w	r8, r8, #1
 8011bca:	ea4f 1e88 	mov.w	lr, r8, lsl #6
 8011bce:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8011bd2:	2c00      	cmp	r4, #0
 8011bd4:	f340 80a7 	ble.w	8011d26 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x216>
 8011bd8:	f106 0240 	add.w	r2, r6, #64	; 0x40
 8011bdc:	f105 0340 	add.w	r3, r5, #64	; 0x40
 8011be0:	2100      	movs	r1, #0
 8011be2:	ed53 6a0f 	vldr	s13, [r3, #-60]	; 0xffffffc4
 8011be6:	3110      	adds	r1, #16
 8011be8:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 8011bec:	3340      	adds	r3, #64	; 0x40
 8011bee:	ed52 4a10 	vldr	s9, [r2, #-64]	; 0xffffffc0
 8011bf2:	42a1      	cmp	r1, r4
 8011bf4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011bf8:	ed13 5a20 	vldr	s10, [r3, #-128]	; 0xffffff80
 8011bfc:	ed52 5a0e 	vldr	s11, [r2, #-56]	; 0xffffffc8
 8011c00:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8011c04:	ed13 6a1e 	vldr	s12, [r3, #-120]	; 0xffffff88
 8011c08:	eee4 7a85 	vfma.f32	s15, s9, s10
 8011c0c:	ed53 6a1d 	vldr	s13, [r3, #-116]	; 0xffffff8c
 8011c10:	ed52 da1d 	vldr	s27, [r2, #-116]	; 0xffffff8c
 8011c14:	ed12 da1c 	vldr	s26, [r2, #-112]	; 0xffffff90
 8011c18:	ed53 ca1c 	vldr	s25, [r3, #-112]	; 0xffffff90
 8011c1c:	ed12 ca1b 	vldr	s24, [r2, #-108]	; 0xffffff94
 8011c20:	ed53 ba1b 	vldr	s23, [r3, #-108]	; 0xffffff94
 8011c24:	eee5 7a86 	vfma.f32	s15, s11, s12
 8011c28:	ed12 ba1a 	vldr	s22, [r2, #-104]	; 0xffffff98
 8011c2c:	ed53 aa1a 	vldr	s21, [r3, #-104]	; 0xffffff98
 8011c30:	ed12 aa19 	vldr	s20, [r2, #-100]	; 0xffffff9c
 8011c34:	ed53 9a19 	vldr	s19, [r3, #-100]	; 0xffffff9c
 8011c38:	ed12 9a18 	vldr	s18, [r2, #-96]	; 0xffffffa0
 8011c3c:	ed53 8a18 	vldr	s17, [r3, #-96]	; 0xffffffa0
 8011c40:	eeed 7aa6 	vfma.f32	s15, s27, s13
 8011c44:	ed12 8a17 	vldr	s16, [r2, #-92]	; 0xffffffa4
 8011c48:	ed53 0a17 	vldr	s1, [r3, #-92]	; 0xffffffa4
 8011c4c:	ed12 1a16 	vldr	s2, [r2, #-88]	; 0xffffffa8
 8011c50:	ed53 1a16 	vldr	s3, [r3, #-88]	; 0xffffffa8
 8011c54:	ed12 2a15 	vldr	s4, [r2, #-84]	; 0xffffffac
 8011c58:	ed53 2a15 	vldr	s5, [r3, #-84]	; 0xffffffac
 8011c5c:	eeed 7a2c 	vfma.f32	s15, s26, s25
 8011c60:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 8011c64:	ed53 3a14 	vldr	s7, [r3, #-80]	; 0xffffffb0
 8011c68:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 8011c6c:	ed53 4a13 	vldr	s9, [r3, #-76]	; 0xffffffb4
 8011c70:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 8011c74:	ed53 5a12 	vldr	s11, [r3, #-72]	; 0xffffffb8
 8011c78:	eeec 7a2b 	vfma.f32	s15, s24, s23
 8011c7c:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 8011c80:	ed53 6a11 	vldr	s13, [r3, #-68]	; 0xffffffbc
 8011c84:	eeeb 7a2a 	vfma.f32	s15, s22, s21
 8011c88:	eeea 7a29 	vfma.f32	s15, s20, s19
 8011c8c:	eee9 7a28 	vfma.f32	s15, s18, s17
 8011c90:	eee8 7a20 	vfma.f32	s15, s16, s1
 8011c94:	eee1 7a21 	vfma.f32	s15, s2, s3
 8011c98:	eee2 7a22 	vfma.f32	s15, s4, s5
 8011c9c:	eee3 7a23 	vfma.f32	s15, s6, s7
 8011ca0:	eee4 7a24 	vfma.f32	s15, s8, s9
 8011ca4:	eee5 7a25 	vfma.f32	s15, s10, s11
 8011ca8:	eee6 7a26 	vfma.f32	s15, s12, s13
 8011cac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011cb0:	db97      	blt.n	8011be2 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0xd2>
 8011cb2:	4476      	add	r6, lr
 8011cb4:	4475      	add	r5, lr
 8011cb6:	4647      	mov	r7, r8
 8011cb8:	42b8      	cmp	r0, r7
 8011cba:	dd10      	ble.n	8011cde <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1ce>
 8011cbc:	463b      	mov	r3, r7
 8011cbe:	4631      	mov	r1, r6
 8011cc0:	462a      	mov	r2, r5
 8011cc2:	3301      	adds	r3, #1
 8011cc4:	ecf2 6a01 	vldmia	r2!, {s13}
 8011cc8:	ecf1 7a01 	vldmia	r1!, {s15}
 8011ccc:	4298      	cmp	r0, r3
 8011cce:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011cd2:	d1f6      	bne.n	8011cc2 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1b2>
 8011cd4:	1bc7      	subs	r7, r0, r7
 8011cd6:	eb05 0587 	add.w	r5, r5, r7, lsl #2
 8011cda:	eb06 0687 	add.w	r6, r6, r7, lsl #2
 8011cde:	f10c 0c01 	add.w	ip, ip, #1
 8011ce2:	4456      	add	r6, sl
 8011ce4:	444d      	add	r5, r9
 8011ce6:	45dc      	cmp	ip, fp
 8011ce8:	f47f af73 	bne.w	8011bd2 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0xc2>
 8011cec:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8011cee:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011cf0:	9a03      	ldr	r2, [sp, #12]
 8011cf2:	4401      	add	r1, r0
 8011cf4:	9b02      	ldr	r3, [sp, #8]
 8011cf6:	ed82 7a00 	vstr	s14, [r2]
 8011cfa:	9128      	str	r1, [sp, #160]	; 0xa0
 8011cfc:	3301      	adds	r3, #1
 8011cfe:	9905      	ldr	r1, [sp, #20]
 8011d00:	9302      	str	r3, [sp, #8]
 8011d02:	440a      	add	r2, r1
 8011d04:	9906      	ldr	r1, [sp, #24]
 8011d06:	9203      	str	r2, [sp, #12]
 8011d08:	9a00      	ldr	r2, [sp, #0]
 8011d0a:	1a12      	subs	r2, r2, r0
 8011d0c:	9200      	str	r2, [sp, #0]
 8011d0e:	9a01      	ldr	r2, [sp, #4]
 8011d10:	440a      	add	r2, r1
 8011d12:	9201      	str	r2, [sp, #4]
 8011d14:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8011d16:	4293      	cmp	r3, r2
 8011d18:	f47f af26 	bne.w	8011b68 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x58>
 8011d1c:	b00d      	add	sp, #52	; 0x34
 8011d1e:	ecbd 8b0c 	vpop	{d8-d13}
 8011d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d26:	2700      	movs	r7, #0
 8011d28:	e7c6      	b.n	8011cb8 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1a8>
 8011d2a:	9a00      	ldr	r2, [sp, #0]
 8011d2c:	9b04      	ldr	r3, [sp, #16]
 8011d2e:	4610      	mov	r0, r2
 8011d30:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8011d32:	189d      	adds	r5, r3, r2
 8011d34:	e71f      	b.n	8011b76 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x66>
 8011d36:	eeb0 7a40 	vmov.f32	s14, s0
 8011d3a:	e7d7      	b.n	8011cec <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1dc>

08011d3c <forward_lite_conv2d_if32of32wf32>:
 8011d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d40:	ed2d 8b02 	vpush	{d8}
 8011d44:	b09f      	sub	sp, #124	; 0x7c
 8011d46:	4686      	mov	lr, r0
 8011d48:	4694      	mov	ip, r2
 8011d4a:	af08      	add	r7, sp, #32
 8011d4c:	f8b7 40b0 	ldrh.w	r4, [r7, #176]	; 0xb0
 8011d50:	62f9      	str	r1, [r7, #44]	; 0x2c
 8011d52:	f8b7 10ac 	ldrh.w	r1, [r7, #172]	; 0xac
 8011d56:	f8b7 50b4 	ldrh.w	r5, [r7, #180]	; 0xb4
 8011d5a:	424e      	negs	r6, r1
 8011d5c:	64fc      	str	r4, [r7, #76]	; 0x4c
 8011d5e:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 8011d62:	6078      	str	r0, [r7, #4]
 8011d64:	613a      	str	r2, [r7, #16]
 8011d66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011d68:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8011d6c:	f8b7 00a8 	ldrh.w	r0, [r7, #168]	; 0xa8
 8011d70:	617d      	str	r5, [r7, #20]
 8011d72:	633e      	str	r6, [r7, #48]	; 0x30
 8011d74:	e9d7 3a22 	ldrd	r3, sl, [r7, #136]	; 0x88
 8011d78:	2c00      	cmp	r4, #0
 8011d7a:	f000 8092 	beq.w	8011ea2 <forward_lite_conv2d_if32of32wf32+0x166>
 8011d7e:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8011d82:	6379      	str	r1, [r7, #52]	; 0x34
 8011d84:	fb04 f202 	mul.w	r2, r4, r2
 8011d88:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8011d8c:	4244      	negs	r4, r0
 8011d8e:	ed9f 8a9a 	vldr	s16, [pc, #616]	; 8011ff8 <forward_lite_conv2d_if32of32wf32+0x2bc>
 8011d92:	653c      	str	r4, [r7, #80]	; 0x50
 8011d94:	fb03 f402 	mul.w	r4, r3, r2
 8011d98:	fb03 f201 	mul.w	r2, r3, r1
 8011d9c:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8011da0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011da4:	63bc      	str	r4, [r7, #56]	; 0x38
 8011da6:	fb01 f10a 	mul.w	r1, r1, sl
 8011daa:	0089      	lsls	r1, r1, #2
 8011dac:	61b9      	str	r1, [r7, #24]
 8011dae:	fb05 f102 	mul.w	r1, r5, r2
 8011db2:	4655      	mov	r5, sl
 8011db4:	fb06 f202 	mul.w	r2, r6, r2
 8011db8:	46da      	mov	sl, fp
 8011dba:	0089      	lsls	r1, r1, #2
 8011dbc:	61f9      	str	r1, [r7, #28]
 8011dbe:	eb0e 0182 	add.w	r1, lr, r2, lsl #2
 8011dc2:	f10b 0207 	add.w	r2, fp, #7
 8011dc6:	62b9      	str	r1, [r7, #40]	; 0x28
 8011dc8:	f022 0107 	bic.w	r1, r2, #7
 8011dcc:	eb0c 0284 	add.w	r2, ip, r4, lsl #2
 8011dd0:	60f9      	str	r1, [r7, #12]
 8011dd2:	f10c 4178 	add.w	r1, ip, #4160749568	; 0xf8000000
 8011dd6:	60ba      	str	r2, [r7, #8]
 8011dd8:	2200      	movs	r2, #0
 8011dda:	6239      	str	r1, [r7, #32]
 8011ddc:	627a      	str	r2, [r7, #36]	; 0x24
 8011dde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011de0:	2a00      	cmp	r2, #0
 8011de2:	f2c0 80d5 	blt.w	8011f90 <forward_lite_conv2d_if32of32wf32+0x254>
 8011de6:	2200      	movs	r2, #0
 8011de8:	f8d7 b028 	ldr.w	fp, [r7, #40]	; 0x28
 8011dec:	657a      	str	r2, [r7, #84]	; 0x54
 8011dee:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011df0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8011df4:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8011df8:	440a      	add	r2, r1
 8011dfa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011dfc:	4282      	cmp	r2, r0
 8011dfe:	bf94      	ite	ls
 8011e00:	ebc1 0102 	rsbls	r1, r1, r2
 8011e04:	ebc1 0100 	rsbhi	r1, r1, r0
 8011e08:	6a3a      	ldr	r2, [r7, #32]
 8011e0a:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8011e0e:	6439      	str	r1, [r7, #64]	; 0x40
 8011e10:	d24d      	bcs.n	8011eae <forward_lite_conv2d_if32of32wf32+0x172>
 8011e12:	b385      	cbz	r5, 8011e76 <forward_lite_conv2d_if32of32wf32+0x13a>
 8011e14:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011e16:	2a00      	cmp	r2, #0
 8011e18:	f000 80bf 	beq.w	8011f9a <forward_lite_conv2d_if32of32wf32+0x25e>
 8011e1c:	4659      	mov	r1, fp
 8011e1e:	4691      	mov	r9, r2
 8011e20:	46d3      	mov	fp, sl
 8011e22:	f8d7 802c 	ldr.w	r8, [r7, #44]	; 0x2c
 8011e26:	693e      	ldr	r6, [r7, #16]
 8011e28:	2400      	movs	r4, #0
 8011e2a:	f8d7 a040 	ldr.w	sl, [r7, #64]	; 0x40
 8011e2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011e30:	3401      	adds	r4, #1
 8011e32:	ecb9 0a01 	vldmia	r9!, {s0}
 8011e36:	4640      	mov	r0, r8
 8011e38:	9207      	str	r2, [sp, #28]
 8011e3a:	f108 0804 	add.w	r8, r8, #4
 8011e3e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011e40:	e9cd a205 	strd	sl, r2, [sp, #20]
 8011e44:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011e46:	9204      	str	r2, [sp, #16]
 8011e48:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8011e4c:	9203      	str	r2, [sp, #12]
 8011e4e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8011e52:	9202      	str	r2, [sp, #8]
 8011e54:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8011e58:	e9cd 5200 	strd	r5, r2, [sp]
 8011e5c:	4632      	mov	r2, r6
 8011e5e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8011e62:	64b9      	str	r1, [r7, #72]	; 0x48
 8011e64:	445e      	add	r6, fp
 8011e66:	f7ff fe53 	bl	8011b10 <ai_conv2d_kernel_simple_opt_f32.constprop.0>
 8011e6a:	42a5      	cmp	r5, r4
 8011e6c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8011e6e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011e72:	d1dc      	bne.n	8011e2e <forward_lite_conv2d_if32of32wf32+0xf2>
 8011e74:	46da      	mov	sl, fp
 8011e76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011e78:	69b8      	ldr	r0, [r7, #24]
 8011e7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011e7c:	4401      	add	r1, r0
 8011e7e:	6978      	ldr	r0, [r7, #20]
 8011e80:	3201      	adds	r2, #1
 8011e82:	62f9      	str	r1, [r7, #44]	; 0x2c
 8011e84:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011e86:	627a      	str	r2, [r7, #36]	; 0x24
 8011e88:	4401      	add	r1, r0
 8011e8a:	6339      	str	r1, [r7, #48]	; 0x30
 8011e8c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011e8e:	1a09      	subs	r1, r1, r0
 8011e90:	69f8      	ldr	r0, [r7, #28]
 8011e92:	6379      	str	r1, [r7, #52]	; 0x34
 8011e94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011e96:	4401      	add	r1, r0
 8011e98:	62b9      	str	r1, [r7, #40]	; 0x28
 8011e9a:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8011e9e:	4291      	cmp	r1, r2
 8011ea0:	d19d      	bne.n	8011dde <forward_lite_conv2d_if32of32wf32+0xa2>
 8011ea2:	375c      	adds	r7, #92	; 0x5c
 8011ea4:	46bd      	mov	sp, r7
 8011ea6:	ecbd 8b02 	vpop	{d8}
 8011eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011eae:	466a      	mov	r2, sp
 8011eb0:	ee08 2a90 	vmov	s17, r2
 8011eb4:	68fa      	ldr	r2, [r7, #12]
 8011eb6:	ebad 0d02 	sub.w	sp, sp, r2
 8011eba:	aa08      	add	r2, sp, #32
 8011ebc:	2d00      	cmp	r5, #0
 8011ebe:	d03d      	beq.n	8011f3c <forward_lite_conv2d_if32of32wf32+0x200>
 8011ec0:	6938      	ldr	r0, [r7, #16]
 8011ec2:	4659      	mov	r1, fp
 8011ec4:	68bc      	ldr	r4, [r7, #8]
 8011ec6:	46ab      	mov	fp, r5
 8011ec8:	f8d7 902c 	ldr.w	r9, [r7, #44]	; 0x2c
 8011ecc:	f04f 0800 	mov.w	r8, #0
 8011ed0:	6bfe      	ldr	r6, [r7, #60]	; 0x3c
 8011ed2:	4605      	mov	r5, r0
 8011ed4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011ed6:	b138      	cbz	r0, 8011ee8 <forward_lite_conv2d_if32of32wf32+0x1ac>
 8011ed8:	4628      	mov	r0, r5
 8011eda:	4694      	mov	ip, r2
 8011edc:	f850 eb04 	ldr.w	lr, [r0], #4
 8011ee0:	42a0      	cmp	r0, r4
 8011ee2:	f84c eb04 	str.w	lr, [ip], #4
 8011ee6:	d1f9      	bne.n	8011edc <forward_lite_conv2d_if32of32wf32+0x1a0>
 8011ee8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011eea:	f108 0801 	add.w	r8, r8, #1
 8011eee:	b348      	cbz	r0, 8011f44 <forward_lite_conv2d_if32of32wf32+0x208>
 8011ef0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8011ef2:	4455      	add	r5, sl
 8011ef4:	ecb6 0a01 	vldmia	r6!, {s0}
 8011ef8:	4454      	add	r4, sl
 8011efa:	9007      	str	r0, [sp, #28]
 8011efc:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8011efe:	9006      	str	r0, [sp, #24]
 8011f00:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8011f02:	9005      	str	r0, [sp, #20]
 8011f04:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011f06:	9004      	str	r0, [sp, #16]
 8011f08:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8011f0c:	9003      	str	r0, [sp, #12]
 8011f0e:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8011f12:	9002      	str	r0, [sp, #8]
 8011f14:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8011f18:	e9cd b000 	strd	fp, r0, [sp]
 8011f1c:	4648      	mov	r0, r9
 8011f1e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8011f22:	f109 0904 	add.w	r9, r9, #4
 8011f26:	e9c7 2111 	strd	r2, r1, [r7, #68]	; 0x44
 8011f2a:	f7ff fdf1 	bl	8011b10 <ai_conv2d_kernel_simple_opt_f32.constprop.0>
 8011f2e:	45d8      	cmp	r8, fp
 8011f30:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011f34:	e9d7 2111 	ldrd	r2, r1, [r7, #68]	; 0x44
 8011f38:	d1cc      	bne.n	8011ed4 <forward_lite_conv2d_if32of32wf32+0x198>
 8011f3a:	465d      	mov	r5, fp
 8011f3c:	ee18 2a90 	vmov	r2, s17
 8011f40:	4695      	mov	sp, r2
 8011f42:	e798      	b.n	8011e76 <forward_lite_conv2d_if32of32wf32+0x13a>
 8011f44:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8011f46:	eeb0 0a48 	vmov.f32	s0, s16
 8011f4a:	4455      	add	r5, sl
 8011f4c:	4454      	add	r4, sl
 8011f4e:	9007      	str	r0, [sp, #28]
 8011f50:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8011f52:	9006      	str	r0, [sp, #24]
 8011f54:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8011f56:	9005      	str	r0, [sp, #20]
 8011f58:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011f5a:	9004      	str	r0, [sp, #16]
 8011f5c:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8011f60:	9003      	str	r0, [sp, #12]
 8011f62:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8011f66:	9002      	str	r0, [sp, #8]
 8011f68:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8011f6c:	e9cd b000 	strd	fp, r0, [sp]
 8011f70:	4648      	mov	r0, r9
 8011f72:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8011f76:	f109 0904 	add.w	r9, r9, #4
 8011f7a:	e9c7 2111 	strd	r2, r1, [r7, #68]	; 0x44
 8011f7e:	f7ff fdc7 	bl	8011b10 <ai_conv2d_kernel_simple_opt_f32.constprop.0>
 8011f82:	45c3      	cmp	fp, r8
 8011f84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011f88:	e9d7 2111 	ldrd	r2, r1, [r7, #68]	; 0x44
 8011f8c:	d1a2      	bne.n	8011ed4 <forward_lite_conv2d_if32of32wf32+0x198>
 8011f8e:	e7d4      	b.n	8011f3a <forward_lite_conv2d_if32of32wf32+0x1fe>
 8011f90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011f92:	f8d7 b004 	ldr.w	fp, [r7, #4]
 8011f96:	657a      	str	r2, [r7, #84]	; 0x54
 8011f98:	e729      	b.n	8011dee <forward_lite_conv2d_if32of32wf32+0xb2>
 8011f9a:	4659      	mov	r1, fp
 8011f9c:	f8d7 802c 	ldr.w	r8, [r7, #44]	; 0x2c
 8011fa0:	46d3      	mov	fp, sl
 8011fa2:	693e      	ldr	r6, [r7, #16]
 8011fa4:	4614      	mov	r4, r2
 8011fa6:	f8d7 9054 	ldr.w	r9, [r7, #84]	; 0x54
 8011faa:	f8d7 a040 	ldr.w	sl, [r7, #64]	; 0x40
 8011fae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011fb0:	3401      	adds	r4, #1
 8011fb2:	4640      	mov	r0, r8
 8011fb4:	eeb0 0a48 	vmov.f32	s0, s16
 8011fb8:	9207      	str	r2, [sp, #28]
 8011fba:	f108 0804 	add.w	r8, r8, #4
 8011fbe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011fc0:	f8cd 9010 	str.w	r9, [sp, #16]
 8011fc4:	e9cd a205 	strd	sl, r2, [sp, #20]
 8011fc8:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8011fcc:	9203      	str	r2, [sp, #12]
 8011fce:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8011fd2:	9202      	str	r2, [sp, #8]
 8011fd4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8011fd8:	e9cd 5200 	strd	r5, r2, [sp]
 8011fdc:	4632      	mov	r2, r6
 8011fde:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8011fe2:	6579      	str	r1, [r7, #84]	; 0x54
 8011fe4:	445e      	add	r6, fp
 8011fe6:	f7ff fd93 	bl	8011b10 <ai_conv2d_kernel_simple_opt_f32.constprop.0>
 8011fea:	42a5      	cmp	r5, r4
 8011fec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011fee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011ff2:	d1dc      	bne.n	8011fae <forward_lite_conv2d_if32of32wf32+0x272>
 8011ff4:	e73e      	b.n	8011e74 <forward_lite_conv2d_if32of32wf32+0x138>
 8011ff6:	bf00      	nop
 8011ff8:	00000000 	.word	0x00000000

08011ffc <forward_lite_dense_if32of32wf32>:
 8011ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012000:	ed2d 8b0c 	vpush	{d8-d13}
 8012004:	e9dd 6415 	ldrd	r6, r4, [sp, #84]	; 0x54
 8012008:	eb00 0784 	add.w	r7, r0, r4, lsl #2
 801200c:	4287      	cmp	r7, r0
 801200e:	f240 8105 	bls.w	801221c <forward_lite_dense_if32of32wf32+0x220>
 8012012:	f1a6 0810 	sub.w	r8, r6, #16
 8012016:	ea4f 0986 	mov.w	r9, r6, lsl #2
 801201a:	4605      	mov	r5, r0
 801201c:	f006 0b0f 	and.w	fp, r6, #15
 8012020:	ea4f 1818 	mov.w	r8, r8, lsr #4
 8012024:	f108 0801 	add.w	r8, r8, #1
 8012028:	ea4f 1a88 	mov.w	sl, r8, lsl #6
 801202c:	eb01 1888 	add.w	r8, r1, r8, lsl #6
 8012030:	2e0f      	cmp	r6, #15
 8012032:	ed9f 7a85 	vldr	s14, [pc, #532]	; 8012248 <forward_lite_dense_if32of32wf32+0x24c>
 8012036:	f240 8102 	bls.w	801223e <forward_lite_dense_if32of32wf32+0x242>
 801203a:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 801203e:	f102 0440 	add.w	r4, r2, #64	; 0x40
 8012042:	46b6      	mov	lr, r6
 8012044:	ed54 6a0f 	vldr	s13, [r4, #-60]	; 0xffffffc4
 8012048:	f1ae 0e10 	sub.w	lr, lr, #16
 801204c:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 8012050:	3440      	adds	r4, #64	; 0x40
 8012052:	ed5c 4a10 	vldr	s9, [ip, #-64]	; 0xffffffc0
 8012056:	f1be 0f0f 	cmp.w	lr, #15
 801205a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801205e:	ed14 5a20 	vldr	s10, [r4, #-128]	; 0xffffff80
 8012062:	ed5c 5a0e 	vldr	s11, [ip, #-56]	; 0xffffffc8
 8012066:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 801206a:	ed14 6a1e 	vldr	s12, [r4, #-120]	; 0xffffff88
 801206e:	eee4 7a85 	vfma.f32	s15, s9, s10
 8012072:	ed54 6a1d 	vldr	s13, [r4, #-116]	; 0xffffff8c
 8012076:	ed1c da1d 	vldr	s26, [ip, #-116]	; 0xffffff8c
 801207a:	ed5c ca1c 	vldr	s25, [ip, #-112]	; 0xffffff90
 801207e:	ed14 ca1c 	vldr	s24, [r4, #-112]	; 0xffffff90
 8012082:	ed5c ba1b 	vldr	s23, [ip, #-108]	; 0xffffff94
 8012086:	ed14 ba1b 	vldr	s22, [r4, #-108]	; 0xffffff94
 801208a:	eee5 7a86 	vfma.f32	s15, s11, s12
 801208e:	ed5c aa1a 	vldr	s21, [ip, #-104]	; 0xffffff98
 8012092:	ed14 aa1a 	vldr	s20, [r4, #-104]	; 0xffffff98
 8012096:	ed5c 9a19 	vldr	s19, [ip, #-100]	; 0xffffff9c
 801209a:	ed14 9a19 	vldr	s18, [r4, #-100]	; 0xffffff9c
 801209e:	ed5c 8a18 	vldr	s17, [ip, #-96]	; 0xffffffa0
 80120a2:	ed14 8a18 	vldr	s16, [r4, #-96]	; 0xffffffa0
 80120a6:	eeed 7a26 	vfma.f32	s15, s26, s13
 80120aa:	ed1c 0a17 	vldr	s0, [ip, #-92]	; 0xffffffa4
 80120ae:	ed54 0a17 	vldr	s1, [r4, #-92]	; 0xffffffa4
 80120b2:	ed1c 1a16 	vldr	s2, [ip, #-88]	; 0xffffffa8
 80120b6:	ed54 1a16 	vldr	s3, [r4, #-88]	; 0xffffffa8
 80120ba:	ed1c 2a15 	vldr	s4, [ip, #-84]	; 0xffffffac
 80120be:	ed54 2a15 	vldr	s5, [r4, #-84]	; 0xffffffac
 80120c2:	eeec 7a8c 	vfma.f32	s15, s25, s24
 80120c6:	ed1c 3a14 	vldr	s6, [ip, #-80]	; 0xffffffb0
 80120ca:	ed54 3a14 	vldr	s7, [r4, #-80]	; 0xffffffb0
 80120ce:	ed1c 4a13 	vldr	s8, [ip, #-76]	; 0xffffffb4
 80120d2:	ed54 4a13 	vldr	s9, [r4, #-76]	; 0xffffffb4
 80120d6:	ed1c 5a12 	vldr	s10, [ip, #-72]	; 0xffffffb8
 80120da:	ed54 5a12 	vldr	s11, [r4, #-72]	; 0xffffffb8
 80120de:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 80120e2:	ed1c 6a11 	vldr	s12, [ip, #-68]	; 0xffffffbc
 80120e6:	ed54 6a11 	vldr	s13, [r4, #-68]	; 0xffffffbc
 80120ea:	eeea 7a8a 	vfma.f32	s15, s21, s20
 80120ee:	eee9 7a89 	vfma.f32	s15, s19, s18
 80120f2:	eee8 7a88 	vfma.f32	s15, s17, s16
 80120f6:	eee0 7a20 	vfma.f32	s15, s0, s1
 80120fa:	eee1 7a21 	vfma.f32	s15, s2, s3
 80120fe:	eee2 7a22 	vfma.f32	s15, s4, s5
 8012102:	eee3 7a23 	vfma.f32	s15, s6, s7
 8012106:	eee4 7a24 	vfma.f32	s15, s8, s9
 801210a:	eee5 7a25 	vfma.f32	s15, s10, s11
 801210e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8012112:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012116:	d895      	bhi.n	8012044 <forward_lite_dense_if32of32wf32+0x48>
 8012118:	eb02 0e0a 	add.w	lr, r2, sl
 801211c:	465c      	mov	r4, fp
 801211e:	46c4      	mov	ip, r8
 8012120:	2c00      	cmp	r4, #0
 8012122:	d075      	beq.n	8012210 <forward_lite_dense_if32of32wf32+0x214>
 8012124:	eddc 6a00 	vldr	s13, [ip]
 8012128:	2c01      	cmp	r4, #1
 801212a:	edde 7a00 	vldr	s15, [lr]
 801212e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012132:	d06d      	beq.n	8012210 <forward_lite_dense_if32of32wf32+0x214>
 8012134:	eddc 6a01 	vldr	s13, [ip, #4]
 8012138:	2c02      	cmp	r4, #2
 801213a:	edde 7a01 	vldr	s15, [lr, #4]
 801213e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012142:	d065      	beq.n	8012210 <forward_lite_dense_if32of32wf32+0x214>
 8012144:	eddc 6a02 	vldr	s13, [ip, #8]
 8012148:	2c03      	cmp	r4, #3
 801214a:	edde 7a02 	vldr	s15, [lr, #8]
 801214e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012152:	d05d      	beq.n	8012210 <forward_lite_dense_if32of32wf32+0x214>
 8012154:	eddc 6a03 	vldr	s13, [ip, #12]
 8012158:	2c04      	cmp	r4, #4
 801215a:	edde 7a03 	vldr	s15, [lr, #12]
 801215e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012162:	d055      	beq.n	8012210 <forward_lite_dense_if32of32wf32+0x214>
 8012164:	eddc 6a04 	vldr	s13, [ip, #16]
 8012168:	2c05      	cmp	r4, #5
 801216a:	edde 7a04 	vldr	s15, [lr, #16]
 801216e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012172:	d04d      	beq.n	8012210 <forward_lite_dense_if32of32wf32+0x214>
 8012174:	eddc 6a05 	vldr	s13, [ip, #20]
 8012178:	2c06      	cmp	r4, #6
 801217a:	edde 7a05 	vldr	s15, [lr, #20]
 801217e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012182:	d045      	beq.n	8012210 <forward_lite_dense_if32of32wf32+0x214>
 8012184:	eddc 6a06 	vldr	s13, [ip, #24]
 8012188:	2c07      	cmp	r4, #7
 801218a:	edde 7a06 	vldr	s15, [lr, #24]
 801218e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012192:	d03d      	beq.n	8012210 <forward_lite_dense_if32of32wf32+0x214>
 8012194:	eddc 6a07 	vldr	s13, [ip, #28]
 8012198:	2c08      	cmp	r4, #8
 801219a:	edde 7a07 	vldr	s15, [lr, #28]
 801219e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80121a2:	d035      	beq.n	8012210 <forward_lite_dense_if32of32wf32+0x214>
 80121a4:	eddc 6a08 	vldr	s13, [ip, #32]
 80121a8:	2c09      	cmp	r4, #9
 80121aa:	edde 7a08 	vldr	s15, [lr, #32]
 80121ae:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80121b2:	d02d      	beq.n	8012210 <forward_lite_dense_if32of32wf32+0x214>
 80121b4:	eddc 6a09 	vldr	s13, [ip, #36]	; 0x24
 80121b8:	2c0a      	cmp	r4, #10
 80121ba:	edde 7a09 	vldr	s15, [lr, #36]	; 0x24
 80121be:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80121c2:	d025      	beq.n	8012210 <forward_lite_dense_if32of32wf32+0x214>
 80121c4:	eddc 6a0a 	vldr	s13, [ip, #40]	; 0x28
 80121c8:	2c0b      	cmp	r4, #11
 80121ca:	edde 7a0a 	vldr	s15, [lr, #40]	; 0x28
 80121ce:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80121d2:	d01d      	beq.n	8012210 <forward_lite_dense_if32of32wf32+0x214>
 80121d4:	eddc 6a0b 	vldr	s13, [ip, #44]	; 0x2c
 80121d8:	2c0c      	cmp	r4, #12
 80121da:	edde 7a0b 	vldr	s15, [lr, #44]	; 0x2c
 80121de:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80121e2:	d015      	beq.n	8012210 <forward_lite_dense_if32of32wf32+0x214>
 80121e4:	eddc 6a0c 	vldr	s13, [ip, #48]	; 0x30
 80121e8:	3c0d      	subs	r4, #13
 80121ea:	edde 7a0c 	vldr	s15, [lr, #48]	; 0x30
 80121ee:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80121f2:	d00d      	beq.n	8012210 <forward_lite_dense_if32of32wf32+0x214>
 80121f4:	eddc 6a0d 	vldr	s13, [ip, #52]	; 0x34
 80121f8:	2c01      	cmp	r4, #1
 80121fa:	edde 7a0d 	vldr	s15, [lr, #52]	; 0x34
 80121fe:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012202:	d005      	beq.n	8012210 <forward_lite_dense_if32of32wf32+0x214>
 8012204:	edde 6a0e 	vldr	s13, [lr, #56]	; 0x38
 8012208:	eddc 7a0e 	vldr	s15, [ip, #56]	; 0x38
 801220c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012210:	eca5 7a01 	vstmia	r5!, {s14}
 8012214:	42af      	cmp	r7, r5
 8012216:	444a      	add	r2, r9
 8012218:	f63f af0a 	bhi.w	8012030 <forward_lite_dense_if32of32wf32+0x34>
 801221c:	b15b      	cbz	r3, 8012236 <forward_lite_dense_if32of32wf32+0x23a>
 801221e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8012220:	b14a      	cbz	r2, 8012236 <forward_lite_dense_if32of32wf32+0x23a>
 8012222:	edd0 7a00 	vldr	s15, [r0]
 8012226:	ecb3 7a01 	vldmia	r3!, {s14}
 801222a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801222e:	ece0 7a01 	vstmia	r0!, {s15}
 8012232:	4287      	cmp	r7, r0
 8012234:	d1f5      	bne.n	8012222 <forward_lite_dense_if32of32wf32+0x226>
 8012236:	ecbd 8b0c 	vpop	{d8-d13}
 801223a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801223e:	4634      	mov	r4, r6
 8012240:	4696      	mov	lr, r2
 8012242:	468c      	mov	ip, r1
 8012244:	e76c      	b.n	8012120 <forward_lite_dense_if32of32wf32+0x124>
 8012246:	bf00      	nop
 8012248:	00000000 	.word	0x00000000

0801224c <st_int8_copy>:
 801224c:	4288      	cmp	r0, r1
 801224e:	d010      	beq.n	8012272 <st_int8_copy+0x26>
 8012250:	b17a      	cbz	r2, 8012272 <st_int8_copy+0x26>
 8012252:	4288      	cmp	r0, r1
 8012254:	eb00 0302 	add.w	r3, r0, r2
 8012258:	d20c      	bcs.n	8012274 <st_int8_copy+0x28>
 801225a:	428b      	cmp	r3, r1
 801225c:	d90a      	bls.n	8012274 <st_int8_copy+0x28>
 801225e:	4283      	cmp	r3, r0
 8012260:	440a      	add	r2, r1
 8012262:	d906      	bls.n	8012272 <st_int8_copy+0x26>
 8012264:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 8012268:	4283      	cmp	r3, r0
 801226a:	f802 1d01 	strb.w	r1, [r2, #-1]!
 801226e:	d1f9      	bne.n	8012264 <st_int8_copy+0x18>
 8012270:	4770      	bx	lr
 8012272:	4770      	bx	lr
 8012274:	078b      	lsls	r3, r1, #30
 8012276:	d102      	bne.n	801227e <st_int8_copy+0x32>
 8012278:	e008      	b.n	801228c <st_int8_copy+0x40>
 801227a:	2a00      	cmp	r2, #0
 801227c:	d04d      	beq.n	801231a <st_int8_copy+0xce>
 801227e:	f910 3b01 	ldrsb.w	r3, [r0], #1
 8012282:	3a01      	subs	r2, #1
 8012284:	f801 3b01 	strb.w	r3, [r1], #1
 8012288:	078b      	lsls	r3, r1, #30
 801228a:	d1f6      	bne.n	801227a <st_int8_copy+0x2e>
 801228c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012290:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 8012294:	d05e      	beq.n	8012354 <st_int8_copy+0x108>
 8012296:	ea40 0301 	orr.w	r3, r0, r1
 801229a:	075b      	lsls	r3, r3, #29
 801229c:	d13e      	bne.n	801231c <st_int8_copy+0xd0>
 801229e:	f10e 33ff 	add.w	r3, lr, #4294967295
 80122a2:	2b01      	cmp	r3, #1
 80122a4:	d93a      	bls.n	801231c <st_int8_copy+0xd0>
 80122a6:	f100 0310 	add.w	r3, r0, #16
 80122aa:	ea4f 140e 	mov.w	r4, lr, lsl #4
 80122ae:	f101 0c10 	add.w	ip, r1, #16
 80122b2:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 80122b6:	3310      	adds	r3, #16
 80122b8:	f10c 0c10 	add.w	ip, ip, #16
 80122bc:	ed13 6b08 	vldr	d6, [r3, #-32]	; 0xffffffe0
 80122c0:	ed13 7b06 	vldr	d7, [r3, #-24]	; 0xffffffe8
 80122c4:	4573      	cmp	r3, lr
 80122c6:	ed0c 6b08 	vstr	d6, [ip, #-32]	; 0xffffffe0
 80122ca:	ed0c 7b06 	vstr	d7, [ip, #-24]	; 0xffffffe8
 80122ce:	d1f2      	bne.n	80122b6 <st_int8_copy+0x6a>
 80122d0:	f3c2 0381 	ubfx	r3, r2, #2, #2
 80122d4:	4421      	add	r1, r4
 80122d6:	4420      	add	r0, r4
 80122d8:	f002 0203 	and.w	r2, r2, #3
 80122dc:	b16b      	cbz	r3, 80122fa <st_int8_copy+0xae>
 80122de:	6804      	ldr	r4, [r0, #0]
 80122e0:	600c      	str	r4, [r1, #0]
 80122e2:	1e5c      	subs	r4, r3, #1
 80122e4:	d005      	beq.n	80122f2 <st_int8_copy+0xa6>
 80122e6:	6845      	ldr	r5, [r0, #4]
 80122e8:	2c01      	cmp	r4, #1
 80122ea:	604d      	str	r5, [r1, #4]
 80122ec:	d001      	beq.n	80122f2 <st_int8_copy+0xa6>
 80122ee:	6884      	ldr	r4, [r0, #8]
 80122f0:	608c      	str	r4, [r1, #8]
 80122f2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80122f6:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80122fa:	b162      	cbz	r2, 8012316 <st_int8_copy+0xca>
 80122fc:	f990 3000 	ldrsb.w	r3, [r0]
 8012300:	3a01      	subs	r2, #1
 8012302:	700b      	strb	r3, [r1, #0]
 8012304:	d007      	beq.n	8012316 <st_int8_copy+0xca>
 8012306:	f990 3001 	ldrsb.w	r3, [r0, #1]
 801230a:	2a01      	cmp	r2, #1
 801230c:	704b      	strb	r3, [r1, #1]
 801230e:	d002      	beq.n	8012316 <st_int8_copy+0xca>
 8012310:	f990 3002 	ldrsb.w	r3, [r0, #2]
 8012314:	708b      	strb	r3, [r1, #2]
 8012316:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801231a:	4770      	bx	lr
 801231c:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8012320:	460b      	mov	r3, r1
 8012322:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 8012326:	4684      	mov	ip, r0
 8012328:	f8dc 8000 	ldr.w	r8, [ip]
 801232c:	3310      	adds	r3, #16
 801232e:	f8dc 7004 	ldr.w	r7, [ip, #4]
 8012332:	f10c 0c10 	add.w	ip, ip, #16
 8012336:	f85c 6c08 	ldr.w	r6, [ip, #-8]
 801233a:	f85c 5c04 	ldr.w	r5, [ip, #-4]
 801233e:	f843 8c10 	str.w	r8, [r3, #-16]
 8012342:	f843 7c0c 	str.w	r7, [r3, #-12]
 8012346:	f843 6c08 	str.w	r6, [r3, #-8]
 801234a:	f843 5c04 	str.w	r5, [r3, #-4]
 801234e:	459e      	cmp	lr, r3
 8012350:	d1ea      	bne.n	8012328 <st_int8_copy+0xdc>
 8012352:	e7bd      	b.n	80122d0 <st_int8_copy+0x84>
 8012354:	0893      	lsrs	r3, r2, #2
 8012356:	f002 0203 	and.w	r2, r2, #3
 801235a:	e7bf      	b.n	80122dc <st_int8_copy+0x90>

0801235c <ai_array_to_buffer_fmt>:
 801235c:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8012360:	2b02      	cmp	r3, #2
 8012362:	d050      	beq.n	8012406 <ai_array_to_buffer_fmt+0xaa>
 8012364:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 8012368:	4b29      	ldr	r3, [pc, #164]	; (8012410 <ai_array_to_buffer_fmt+0xb4>)
 801236a:	429a      	cmp	r2, r3
 801236c:	d00b      	beq.n	8012386 <ai_array_to_buffer_fmt+0x2a>
 801236e:	dc1c      	bgt.n	80123aa <ai_array_to_buffer_fmt+0x4e>
 8012370:	4b28      	ldr	r3, [pc, #160]	; (8012414 <ai_array_to_buffer_fmt+0xb8>)
 8012372:	429a      	cmp	r2, r3
 8012374:	d007      	beq.n	8012386 <ai_array_to_buffer_fmt+0x2a>
 8012376:	dd0b      	ble.n	8012390 <ai_array_to_buffer_fmt+0x34>
 8012378:	4b27      	ldr	r3, [pc, #156]	; (8012418 <ai_array_to_buffer_fmt+0xbc>)
 801237a:	429a      	cmp	r2, r3
 801237c:	d003      	beq.n	8012386 <ai_array_to_buffer_fmt+0x2a>
 801237e:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8012382:	429a      	cmp	r2, r3
 8012384:	d131      	bne.n	80123ea <ai_array_to_buffer_fmt+0x8e>
 8012386:	4613      	mov	r3, r2
 8012388:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 801238c:	4318      	orrs	r0, r3
 801238e:	4770      	bx	lr
 8012390:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8012394:	429a      	cmp	r2, r3
 8012396:	d0f6      	beq.n	8012386 <ai_array_to_buffer_fmt+0x2a>
 8012398:	dd2c      	ble.n	80123f4 <ai_array_to_buffer_fmt+0x98>
 801239a:	4b20      	ldr	r3, [pc, #128]	; (801241c <ai_array_to_buffer_fmt+0xc0>)
 801239c:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80123a0:	429a      	cmp	r2, r3
 80123a2:	bf18      	it	ne
 80123a4:	2340      	movne	r3, #64	; 0x40
 80123a6:	4318      	orrs	r0, r3
 80123a8:	4770      	bx	lr
 80123aa:	4b1d      	ldr	r3, [pc, #116]	; (8012420 <ai_array_to_buffer_fmt+0xc4>)
 80123ac:	429a      	cmp	r2, r3
 80123ae:	d0ea      	beq.n	8012386 <ai_array_to_buffer_fmt+0x2a>
 80123b0:	dd0e      	ble.n	80123d0 <ai_array_to_buffer_fmt+0x74>
 80123b2:	4b1c      	ldr	r3, [pc, #112]	; (8012424 <ai_array_to_buffer_fmt+0xc8>)
 80123b4:	429a      	cmp	r2, r3
 80123b6:	d0e6      	beq.n	8012386 <ai_array_to_buffer_fmt+0x2a>
 80123b8:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 80123bc:	429a      	cmp	r2, r3
 80123be:	d0e2      	beq.n	8012386 <ai_array_to_buffer_fmt+0x2a>
 80123c0:	4b19      	ldr	r3, [pc, #100]	; (8012428 <ai_array_to_buffer_fmt+0xcc>)
 80123c2:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80123c6:	429a      	cmp	r2, r3
 80123c8:	bf18      	it	ne
 80123ca:	2340      	movne	r3, #64	; 0x40
 80123cc:	4318      	orrs	r0, r3
 80123ce:	4770      	bx	lr
 80123d0:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80123d4:	429a      	cmp	r2, r3
 80123d6:	d0d6      	beq.n	8012386 <ai_array_to_buffer_fmt+0x2a>
 80123d8:	3307      	adds	r3, #7
 80123da:	429a      	cmp	r2, r3
 80123dc:	d0d3      	beq.n	8012386 <ai_array_to_buffer_fmt+0x2a>
 80123de:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 80123e2:	429a      	cmp	r2, r3
 80123e4:	bf18      	it	ne
 80123e6:	2340      	movne	r3, #64	; 0x40
 80123e8:	e7ce      	b.n	8012388 <ai_array_to_buffer_fmt+0x2c>
 80123ea:	4b10      	ldr	r3, [pc, #64]	; (801242c <ai_array_to_buffer_fmt+0xd0>)
 80123ec:	429a      	cmp	r2, r3
 80123ee:	bf18      	it	ne
 80123f0:	2340      	movne	r3, #64	; 0x40
 80123f2:	e7c9      	b.n	8012388 <ai_array_to_buffer_fmt+0x2c>
 80123f4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80123f8:	429a      	cmp	r2, r3
 80123fa:	d0c4      	beq.n	8012386 <ai_array_to_buffer_fmt+0x2a>
 80123fc:	3380      	adds	r3, #128	; 0x80
 80123fe:	429a      	cmp	r2, r3
 8012400:	bf18      	it	ne
 8012402:	2340      	movne	r3, #64	; 0x40
 8012404:	e7c0      	b.n	8012388 <ai_array_to_buffer_fmt+0x2c>
 8012406:	4b0a      	ldr	r3, [pc, #40]	; (8012430 <ai_array_to_buffer_fmt+0xd4>)
 8012408:	4003      	ands	r3, r0
 801240a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801240e:	e7bb      	b.n	8012388 <ai_array_to_buffer_fmt+0x2c>
 8012410:	00840040 	.word	0x00840040
 8012414:	00040840 	.word	0x00040840
 8012418:	00041040 	.word	0x00041040
 801241c:	00040447 	.word	0x00040447
 8012420:	00840840 	.word	0x00840840
 8012424:	00841040 	.word	0x00841040
 8012428:	0084084f 	.word	0x0084084f
 801242c:	0004084f 	.word	0x0004084f
 8012430:	00803fff 	.word	0x00803fff

08012434 <ai_array_get_byte_size>:
 8012434:	b319      	cbz	r1, 801247e <ai_array_get_byte_size+0x4a>
 8012436:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 801243a:	f3c0 4243 	ubfx	r2, r0, #17, #4
 801243e:	f3c0 5c41 	ubfx	ip, r0, #21, #2
 8012442:	11c0      	asrs	r0, r0, #7
 8012444:	fb03 f101 	mul.w	r1, r3, r1
 8012448:	2a04      	cmp	r2, #4
 801244a:	f101 0107 	add.w	r1, r1, #7
 801244e:	f021 0107 	bic.w	r1, r1, #7
 8012452:	fa21 f10c 	lsr.w	r1, r1, ip
 8012456:	d00b      	beq.n	8012470 <ai_array_get_byte_size+0x3c>
 8012458:	2a08      	cmp	r2, #8
 801245a:	d002      	beq.n	8012462 <ai_array_get_byte_size+0x2e>
 801245c:	3107      	adds	r1, #7
 801245e:	08c8      	lsrs	r0, r1, #3
 8012460:	4770      	bx	lr
 8012462:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8012466:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 801246a:	3107      	adds	r1, #7
 801246c:	08c8      	lsrs	r0, r1, #3
 801246e:	4770      	bx	lr
 8012470:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8012474:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 8012478:	3107      	adds	r1, #7
 801247a:	08c8      	lsrs	r0, r1, #3
 801247c:	4770      	bx	lr
 801247e:	4608      	mov	r0, r1
 8012480:	4770      	bx	lr
 8012482:	bf00      	nop

08012484 <ai_array_get_data_byte_size>:
 8012484:	b161      	cbz	r1, 80124a0 <ai_array_get_data_byte_size+0x1c>
 8012486:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 801248a:	f3c0 5241 	ubfx	r2, r0, #21, #2
 801248e:	fb03 f101 	mul.w	r1, r3, r1
 8012492:	1dc8      	adds	r0, r1, #7
 8012494:	f020 0007 	bic.w	r0, r0, #7
 8012498:	40d0      	lsrs	r0, r2
 801249a:	3007      	adds	r0, #7
 801249c:	08c0      	lsrs	r0, r0, #3
 801249e:	4770      	bx	lr
 80124a0:	4608      	mov	r0, r1
 80124a2:	4770      	bx	lr

080124a4 <ai_version_get>:
 80124a4:	0212      	lsls	r2, r2, #8
 80124a6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80124aa:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 80124ae:	4770      	bx	lr

080124b0 <get_tensor_byte_size>:
 80124b0:	b430      	push	{r4, r5}
 80124b2:	6985      	ldr	r5, [r0, #24]
 80124b4:	68c4      	ldr	r4, [r0, #12]
 80124b6:	6941      	ldr	r1, [r0, #20]
 80124b8:	4b06      	ldr	r3, [pc, #24]	; (80124d4 <get_tensor_byte_size+0x24>)
 80124ba:	6828      	ldr	r0, [r5, #0]
 80124bc:	4a06      	ldr	r2, [pc, #24]	; (80124d8 <get_tensor_byte_size+0x28>)
 80124be:	4003      	ands	r3, r0
 80124c0:	68c9      	ldr	r1, [r1, #12]
 80124c2:	68e0      	ldr	r0, [r4, #12]
 80124c4:	4293      	cmp	r3, r2
 80124c6:	fb01 f000 	mul.w	r0, r1, r0
 80124ca:	d101      	bne.n	80124d0 <get_tensor_byte_size+0x20>
 80124cc:	3007      	adds	r0, #7
 80124ce:	08c0      	lsrs	r0, r0, #3
 80124d0:	bc30      	pop	{r4, r5}
 80124d2:	4770      	bx	lr
 80124d4:	017fffff 	.word	0x017fffff
 80124d8:	000400c0 	.word	0x000400c0

080124dc <__errno>:
 80124dc:	4b01      	ldr	r3, [pc, #4]	; (80124e4 <__errno+0x8>)
 80124de:	6818      	ldr	r0, [r3, #0]
 80124e0:	4770      	bx	lr
 80124e2:	bf00      	nop
 80124e4:	2000145c 	.word	0x2000145c

080124e8 <__libc_init_array>:
 80124e8:	b570      	push	{r4, r5, r6, lr}
 80124ea:	4d0d      	ldr	r5, [pc, #52]	; (8012520 <__libc_init_array+0x38>)
 80124ec:	4c0d      	ldr	r4, [pc, #52]	; (8012524 <__libc_init_array+0x3c>)
 80124ee:	1b64      	subs	r4, r4, r5
 80124f0:	10a4      	asrs	r4, r4, #2
 80124f2:	2600      	movs	r6, #0
 80124f4:	42a6      	cmp	r6, r4
 80124f6:	d109      	bne.n	801250c <__libc_init_array+0x24>
 80124f8:	4d0b      	ldr	r5, [pc, #44]	; (8012528 <__libc_init_array+0x40>)
 80124fa:	4c0c      	ldr	r4, [pc, #48]	; (801252c <__libc_init_array+0x44>)
 80124fc:	f006 f8b4 	bl	8018668 <_init>
 8012500:	1b64      	subs	r4, r4, r5
 8012502:	10a4      	asrs	r4, r4, #2
 8012504:	2600      	movs	r6, #0
 8012506:	42a6      	cmp	r6, r4
 8012508:	d105      	bne.n	8012516 <__libc_init_array+0x2e>
 801250a:	bd70      	pop	{r4, r5, r6, pc}
 801250c:	f855 3b04 	ldr.w	r3, [r5], #4
 8012510:	4798      	blx	r3
 8012512:	3601      	adds	r6, #1
 8012514:	e7ee      	b.n	80124f4 <__libc_init_array+0xc>
 8012516:	f855 3b04 	ldr.w	r3, [r5], #4
 801251a:	4798      	blx	r3
 801251c:	3601      	adds	r6, #1
 801251e:	e7f2      	b.n	8012506 <__libc_init_array+0x1e>
 8012520:	0805db20 	.word	0x0805db20
 8012524:	0805db20 	.word	0x0805db20
 8012528:	0805db20 	.word	0x0805db20
 801252c:	0805db24 	.word	0x0805db24

08012530 <malloc>:
 8012530:	4b02      	ldr	r3, [pc, #8]	; (801253c <malloc+0xc>)
 8012532:	4601      	mov	r1, r0
 8012534:	6818      	ldr	r0, [r3, #0]
 8012536:	f000 b885 	b.w	8012644 <_malloc_r>
 801253a:	bf00      	nop
 801253c:	2000145c 	.word	0x2000145c

08012540 <memcpy>:
 8012540:	440a      	add	r2, r1
 8012542:	4291      	cmp	r1, r2
 8012544:	f100 33ff 	add.w	r3, r0, #4294967295
 8012548:	d100      	bne.n	801254c <memcpy+0xc>
 801254a:	4770      	bx	lr
 801254c:	b510      	push	{r4, lr}
 801254e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012552:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012556:	4291      	cmp	r1, r2
 8012558:	d1f9      	bne.n	801254e <memcpy+0xe>
 801255a:	bd10      	pop	{r4, pc}

0801255c <memset>:
 801255c:	4402      	add	r2, r0
 801255e:	4603      	mov	r3, r0
 8012560:	4293      	cmp	r3, r2
 8012562:	d100      	bne.n	8012566 <memset+0xa>
 8012564:	4770      	bx	lr
 8012566:	f803 1b01 	strb.w	r1, [r3], #1
 801256a:	e7f9      	b.n	8012560 <memset+0x4>

0801256c <_free_r>:
 801256c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801256e:	2900      	cmp	r1, #0
 8012570:	d044      	beq.n	80125fc <_free_r+0x90>
 8012572:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012576:	9001      	str	r0, [sp, #4]
 8012578:	2b00      	cmp	r3, #0
 801257a:	f1a1 0404 	sub.w	r4, r1, #4
 801257e:	bfb8      	it	lt
 8012580:	18e4      	addlt	r4, r4, r3
 8012582:	f003 f969 	bl	8015858 <__malloc_lock>
 8012586:	4a1e      	ldr	r2, [pc, #120]	; (8012600 <_free_r+0x94>)
 8012588:	9801      	ldr	r0, [sp, #4]
 801258a:	6813      	ldr	r3, [r2, #0]
 801258c:	b933      	cbnz	r3, 801259c <_free_r+0x30>
 801258e:	6063      	str	r3, [r4, #4]
 8012590:	6014      	str	r4, [r2, #0]
 8012592:	b003      	add	sp, #12
 8012594:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012598:	f003 b964 	b.w	8015864 <__malloc_unlock>
 801259c:	42a3      	cmp	r3, r4
 801259e:	d908      	bls.n	80125b2 <_free_r+0x46>
 80125a0:	6825      	ldr	r5, [r4, #0]
 80125a2:	1961      	adds	r1, r4, r5
 80125a4:	428b      	cmp	r3, r1
 80125a6:	bf01      	itttt	eq
 80125a8:	6819      	ldreq	r1, [r3, #0]
 80125aa:	685b      	ldreq	r3, [r3, #4]
 80125ac:	1949      	addeq	r1, r1, r5
 80125ae:	6021      	streq	r1, [r4, #0]
 80125b0:	e7ed      	b.n	801258e <_free_r+0x22>
 80125b2:	461a      	mov	r2, r3
 80125b4:	685b      	ldr	r3, [r3, #4]
 80125b6:	b10b      	cbz	r3, 80125bc <_free_r+0x50>
 80125b8:	42a3      	cmp	r3, r4
 80125ba:	d9fa      	bls.n	80125b2 <_free_r+0x46>
 80125bc:	6811      	ldr	r1, [r2, #0]
 80125be:	1855      	adds	r5, r2, r1
 80125c0:	42a5      	cmp	r5, r4
 80125c2:	d10b      	bne.n	80125dc <_free_r+0x70>
 80125c4:	6824      	ldr	r4, [r4, #0]
 80125c6:	4421      	add	r1, r4
 80125c8:	1854      	adds	r4, r2, r1
 80125ca:	42a3      	cmp	r3, r4
 80125cc:	6011      	str	r1, [r2, #0]
 80125ce:	d1e0      	bne.n	8012592 <_free_r+0x26>
 80125d0:	681c      	ldr	r4, [r3, #0]
 80125d2:	685b      	ldr	r3, [r3, #4]
 80125d4:	6053      	str	r3, [r2, #4]
 80125d6:	4421      	add	r1, r4
 80125d8:	6011      	str	r1, [r2, #0]
 80125da:	e7da      	b.n	8012592 <_free_r+0x26>
 80125dc:	d902      	bls.n	80125e4 <_free_r+0x78>
 80125de:	230c      	movs	r3, #12
 80125e0:	6003      	str	r3, [r0, #0]
 80125e2:	e7d6      	b.n	8012592 <_free_r+0x26>
 80125e4:	6825      	ldr	r5, [r4, #0]
 80125e6:	1961      	adds	r1, r4, r5
 80125e8:	428b      	cmp	r3, r1
 80125ea:	bf04      	itt	eq
 80125ec:	6819      	ldreq	r1, [r3, #0]
 80125ee:	685b      	ldreq	r3, [r3, #4]
 80125f0:	6063      	str	r3, [r4, #4]
 80125f2:	bf04      	itt	eq
 80125f4:	1949      	addeq	r1, r1, r5
 80125f6:	6021      	streq	r1, [r4, #0]
 80125f8:	6054      	str	r4, [r2, #4]
 80125fa:	e7ca      	b.n	8012592 <_free_r+0x26>
 80125fc:	b003      	add	sp, #12
 80125fe:	bd30      	pop	{r4, r5, pc}
 8012600:	2000c664 	.word	0x2000c664

08012604 <sbrk_aligned>:
 8012604:	b570      	push	{r4, r5, r6, lr}
 8012606:	4e0e      	ldr	r6, [pc, #56]	; (8012640 <sbrk_aligned+0x3c>)
 8012608:	460c      	mov	r4, r1
 801260a:	6831      	ldr	r1, [r6, #0]
 801260c:	4605      	mov	r5, r0
 801260e:	b911      	cbnz	r1, 8012616 <sbrk_aligned+0x12>
 8012610:	f000 ff06 	bl	8013420 <_sbrk_r>
 8012614:	6030      	str	r0, [r6, #0]
 8012616:	4621      	mov	r1, r4
 8012618:	4628      	mov	r0, r5
 801261a:	f000 ff01 	bl	8013420 <_sbrk_r>
 801261e:	1c43      	adds	r3, r0, #1
 8012620:	d00a      	beq.n	8012638 <sbrk_aligned+0x34>
 8012622:	1cc4      	adds	r4, r0, #3
 8012624:	f024 0403 	bic.w	r4, r4, #3
 8012628:	42a0      	cmp	r0, r4
 801262a:	d007      	beq.n	801263c <sbrk_aligned+0x38>
 801262c:	1a21      	subs	r1, r4, r0
 801262e:	4628      	mov	r0, r5
 8012630:	f000 fef6 	bl	8013420 <_sbrk_r>
 8012634:	3001      	adds	r0, #1
 8012636:	d101      	bne.n	801263c <sbrk_aligned+0x38>
 8012638:	f04f 34ff 	mov.w	r4, #4294967295
 801263c:	4620      	mov	r0, r4
 801263e:	bd70      	pop	{r4, r5, r6, pc}
 8012640:	2000c668 	.word	0x2000c668

08012644 <_malloc_r>:
 8012644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012648:	1ccd      	adds	r5, r1, #3
 801264a:	f025 0503 	bic.w	r5, r5, #3
 801264e:	3508      	adds	r5, #8
 8012650:	2d0c      	cmp	r5, #12
 8012652:	bf38      	it	cc
 8012654:	250c      	movcc	r5, #12
 8012656:	2d00      	cmp	r5, #0
 8012658:	4607      	mov	r7, r0
 801265a:	db01      	blt.n	8012660 <_malloc_r+0x1c>
 801265c:	42a9      	cmp	r1, r5
 801265e:	d905      	bls.n	801266c <_malloc_r+0x28>
 8012660:	230c      	movs	r3, #12
 8012662:	603b      	str	r3, [r7, #0]
 8012664:	2600      	movs	r6, #0
 8012666:	4630      	mov	r0, r6
 8012668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801266c:	4e2e      	ldr	r6, [pc, #184]	; (8012728 <_malloc_r+0xe4>)
 801266e:	f003 f8f3 	bl	8015858 <__malloc_lock>
 8012672:	6833      	ldr	r3, [r6, #0]
 8012674:	461c      	mov	r4, r3
 8012676:	bb34      	cbnz	r4, 80126c6 <_malloc_r+0x82>
 8012678:	4629      	mov	r1, r5
 801267a:	4638      	mov	r0, r7
 801267c:	f7ff ffc2 	bl	8012604 <sbrk_aligned>
 8012680:	1c43      	adds	r3, r0, #1
 8012682:	4604      	mov	r4, r0
 8012684:	d14d      	bne.n	8012722 <_malloc_r+0xde>
 8012686:	6834      	ldr	r4, [r6, #0]
 8012688:	4626      	mov	r6, r4
 801268a:	2e00      	cmp	r6, #0
 801268c:	d140      	bne.n	8012710 <_malloc_r+0xcc>
 801268e:	6823      	ldr	r3, [r4, #0]
 8012690:	4631      	mov	r1, r6
 8012692:	4638      	mov	r0, r7
 8012694:	eb04 0803 	add.w	r8, r4, r3
 8012698:	f000 fec2 	bl	8013420 <_sbrk_r>
 801269c:	4580      	cmp	r8, r0
 801269e:	d13a      	bne.n	8012716 <_malloc_r+0xd2>
 80126a0:	6821      	ldr	r1, [r4, #0]
 80126a2:	3503      	adds	r5, #3
 80126a4:	1a6d      	subs	r5, r5, r1
 80126a6:	f025 0503 	bic.w	r5, r5, #3
 80126aa:	3508      	adds	r5, #8
 80126ac:	2d0c      	cmp	r5, #12
 80126ae:	bf38      	it	cc
 80126b0:	250c      	movcc	r5, #12
 80126b2:	4629      	mov	r1, r5
 80126b4:	4638      	mov	r0, r7
 80126b6:	f7ff ffa5 	bl	8012604 <sbrk_aligned>
 80126ba:	3001      	adds	r0, #1
 80126bc:	d02b      	beq.n	8012716 <_malloc_r+0xd2>
 80126be:	6823      	ldr	r3, [r4, #0]
 80126c0:	442b      	add	r3, r5
 80126c2:	6023      	str	r3, [r4, #0]
 80126c4:	e00e      	b.n	80126e4 <_malloc_r+0xa0>
 80126c6:	6822      	ldr	r2, [r4, #0]
 80126c8:	1b52      	subs	r2, r2, r5
 80126ca:	d41e      	bmi.n	801270a <_malloc_r+0xc6>
 80126cc:	2a0b      	cmp	r2, #11
 80126ce:	d916      	bls.n	80126fe <_malloc_r+0xba>
 80126d0:	1961      	adds	r1, r4, r5
 80126d2:	42a3      	cmp	r3, r4
 80126d4:	6025      	str	r5, [r4, #0]
 80126d6:	bf18      	it	ne
 80126d8:	6059      	strne	r1, [r3, #4]
 80126da:	6863      	ldr	r3, [r4, #4]
 80126dc:	bf08      	it	eq
 80126de:	6031      	streq	r1, [r6, #0]
 80126e0:	5162      	str	r2, [r4, r5]
 80126e2:	604b      	str	r3, [r1, #4]
 80126e4:	4638      	mov	r0, r7
 80126e6:	f104 060b 	add.w	r6, r4, #11
 80126ea:	f003 f8bb 	bl	8015864 <__malloc_unlock>
 80126ee:	f026 0607 	bic.w	r6, r6, #7
 80126f2:	1d23      	adds	r3, r4, #4
 80126f4:	1af2      	subs	r2, r6, r3
 80126f6:	d0b6      	beq.n	8012666 <_malloc_r+0x22>
 80126f8:	1b9b      	subs	r3, r3, r6
 80126fa:	50a3      	str	r3, [r4, r2]
 80126fc:	e7b3      	b.n	8012666 <_malloc_r+0x22>
 80126fe:	6862      	ldr	r2, [r4, #4]
 8012700:	42a3      	cmp	r3, r4
 8012702:	bf0c      	ite	eq
 8012704:	6032      	streq	r2, [r6, #0]
 8012706:	605a      	strne	r2, [r3, #4]
 8012708:	e7ec      	b.n	80126e4 <_malloc_r+0xa0>
 801270a:	4623      	mov	r3, r4
 801270c:	6864      	ldr	r4, [r4, #4]
 801270e:	e7b2      	b.n	8012676 <_malloc_r+0x32>
 8012710:	4634      	mov	r4, r6
 8012712:	6876      	ldr	r6, [r6, #4]
 8012714:	e7b9      	b.n	801268a <_malloc_r+0x46>
 8012716:	230c      	movs	r3, #12
 8012718:	603b      	str	r3, [r7, #0]
 801271a:	4638      	mov	r0, r7
 801271c:	f003 f8a2 	bl	8015864 <__malloc_unlock>
 8012720:	e7a1      	b.n	8012666 <_malloc_r+0x22>
 8012722:	6025      	str	r5, [r4, #0]
 8012724:	e7de      	b.n	80126e4 <_malloc_r+0xa0>
 8012726:	bf00      	nop
 8012728:	2000c664 	.word	0x2000c664

0801272c <__cvt>:
 801272c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012730:	ec55 4b10 	vmov	r4, r5, d0
 8012734:	2d00      	cmp	r5, #0
 8012736:	460e      	mov	r6, r1
 8012738:	4619      	mov	r1, r3
 801273a:	462b      	mov	r3, r5
 801273c:	bfbb      	ittet	lt
 801273e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8012742:	461d      	movlt	r5, r3
 8012744:	2300      	movge	r3, #0
 8012746:	232d      	movlt	r3, #45	; 0x2d
 8012748:	700b      	strb	r3, [r1, #0]
 801274a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801274c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8012750:	4691      	mov	r9, r2
 8012752:	f023 0820 	bic.w	r8, r3, #32
 8012756:	bfbc      	itt	lt
 8012758:	4622      	movlt	r2, r4
 801275a:	4614      	movlt	r4, r2
 801275c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8012760:	d005      	beq.n	801276e <__cvt+0x42>
 8012762:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8012766:	d100      	bne.n	801276a <__cvt+0x3e>
 8012768:	3601      	adds	r6, #1
 801276a:	2102      	movs	r1, #2
 801276c:	e000      	b.n	8012770 <__cvt+0x44>
 801276e:	2103      	movs	r1, #3
 8012770:	ab03      	add	r3, sp, #12
 8012772:	9301      	str	r3, [sp, #4]
 8012774:	ab02      	add	r3, sp, #8
 8012776:	9300      	str	r3, [sp, #0]
 8012778:	ec45 4b10 	vmov	d0, r4, r5
 801277c:	4653      	mov	r3, sl
 801277e:	4632      	mov	r2, r6
 8012780:	f001 fed2 	bl	8014528 <_dtoa_r>
 8012784:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8012788:	4607      	mov	r7, r0
 801278a:	d102      	bne.n	8012792 <__cvt+0x66>
 801278c:	f019 0f01 	tst.w	r9, #1
 8012790:	d022      	beq.n	80127d8 <__cvt+0xac>
 8012792:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8012796:	eb07 0906 	add.w	r9, r7, r6
 801279a:	d110      	bne.n	80127be <__cvt+0x92>
 801279c:	783b      	ldrb	r3, [r7, #0]
 801279e:	2b30      	cmp	r3, #48	; 0x30
 80127a0:	d10a      	bne.n	80127b8 <__cvt+0x8c>
 80127a2:	2200      	movs	r2, #0
 80127a4:	2300      	movs	r3, #0
 80127a6:	4620      	mov	r0, r4
 80127a8:	4629      	mov	r1, r5
 80127aa:	f7ee f9bd 	bl	8000b28 <__aeabi_dcmpeq>
 80127ae:	b918      	cbnz	r0, 80127b8 <__cvt+0x8c>
 80127b0:	f1c6 0601 	rsb	r6, r6, #1
 80127b4:	f8ca 6000 	str.w	r6, [sl]
 80127b8:	f8da 3000 	ldr.w	r3, [sl]
 80127bc:	4499      	add	r9, r3
 80127be:	2200      	movs	r2, #0
 80127c0:	2300      	movs	r3, #0
 80127c2:	4620      	mov	r0, r4
 80127c4:	4629      	mov	r1, r5
 80127c6:	f7ee f9af 	bl	8000b28 <__aeabi_dcmpeq>
 80127ca:	b108      	cbz	r0, 80127d0 <__cvt+0xa4>
 80127cc:	f8cd 900c 	str.w	r9, [sp, #12]
 80127d0:	2230      	movs	r2, #48	; 0x30
 80127d2:	9b03      	ldr	r3, [sp, #12]
 80127d4:	454b      	cmp	r3, r9
 80127d6:	d307      	bcc.n	80127e8 <__cvt+0xbc>
 80127d8:	9b03      	ldr	r3, [sp, #12]
 80127da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80127dc:	1bdb      	subs	r3, r3, r7
 80127de:	4638      	mov	r0, r7
 80127e0:	6013      	str	r3, [r2, #0]
 80127e2:	b004      	add	sp, #16
 80127e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80127e8:	1c59      	adds	r1, r3, #1
 80127ea:	9103      	str	r1, [sp, #12]
 80127ec:	701a      	strb	r2, [r3, #0]
 80127ee:	e7f0      	b.n	80127d2 <__cvt+0xa6>

080127f0 <__exponent>:
 80127f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80127f2:	4603      	mov	r3, r0
 80127f4:	2900      	cmp	r1, #0
 80127f6:	bfb8      	it	lt
 80127f8:	4249      	neglt	r1, r1
 80127fa:	f803 2b02 	strb.w	r2, [r3], #2
 80127fe:	bfb4      	ite	lt
 8012800:	222d      	movlt	r2, #45	; 0x2d
 8012802:	222b      	movge	r2, #43	; 0x2b
 8012804:	2909      	cmp	r1, #9
 8012806:	7042      	strb	r2, [r0, #1]
 8012808:	dd2a      	ble.n	8012860 <__exponent+0x70>
 801280a:	f10d 0407 	add.w	r4, sp, #7
 801280e:	46a4      	mov	ip, r4
 8012810:	270a      	movs	r7, #10
 8012812:	46a6      	mov	lr, r4
 8012814:	460a      	mov	r2, r1
 8012816:	fb91 f6f7 	sdiv	r6, r1, r7
 801281a:	fb07 1516 	mls	r5, r7, r6, r1
 801281e:	3530      	adds	r5, #48	; 0x30
 8012820:	2a63      	cmp	r2, #99	; 0x63
 8012822:	f104 34ff 	add.w	r4, r4, #4294967295
 8012826:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801282a:	4631      	mov	r1, r6
 801282c:	dcf1      	bgt.n	8012812 <__exponent+0x22>
 801282e:	3130      	adds	r1, #48	; 0x30
 8012830:	f1ae 0502 	sub.w	r5, lr, #2
 8012834:	f804 1c01 	strb.w	r1, [r4, #-1]
 8012838:	1c44      	adds	r4, r0, #1
 801283a:	4629      	mov	r1, r5
 801283c:	4561      	cmp	r1, ip
 801283e:	d30a      	bcc.n	8012856 <__exponent+0x66>
 8012840:	f10d 0209 	add.w	r2, sp, #9
 8012844:	eba2 020e 	sub.w	r2, r2, lr
 8012848:	4565      	cmp	r5, ip
 801284a:	bf88      	it	hi
 801284c:	2200      	movhi	r2, #0
 801284e:	4413      	add	r3, r2
 8012850:	1a18      	subs	r0, r3, r0
 8012852:	b003      	add	sp, #12
 8012854:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012856:	f811 2b01 	ldrb.w	r2, [r1], #1
 801285a:	f804 2f01 	strb.w	r2, [r4, #1]!
 801285e:	e7ed      	b.n	801283c <__exponent+0x4c>
 8012860:	2330      	movs	r3, #48	; 0x30
 8012862:	3130      	adds	r1, #48	; 0x30
 8012864:	7083      	strb	r3, [r0, #2]
 8012866:	70c1      	strb	r1, [r0, #3]
 8012868:	1d03      	adds	r3, r0, #4
 801286a:	e7f1      	b.n	8012850 <__exponent+0x60>

0801286c <_printf_float>:
 801286c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012870:	ed2d 8b02 	vpush	{d8}
 8012874:	b08d      	sub	sp, #52	; 0x34
 8012876:	460c      	mov	r4, r1
 8012878:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801287c:	4616      	mov	r6, r2
 801287e:	461f      	mov	r7, r3
 8012880:	4605      	mov	r5, r0
 8012882:	f002 ffc1 	bl	8015808 <_localeconv_r>
 8012886:	f8d0 a000 	ldr.w	sl, [r0]
 801288a:	4650      	mov	r0, sl
 801288c:	f7ed fcca 	bl	8000224 <strlen>
 8012890:	2300      	movs	r3, #0
 8012892:	930a      	str	r3, [sp, #40]	; 0x28
 8012894:	6823      	ldr	r3, [r4, #0]
 8012896:	9305      	str	r3, [sp, #20]
 8012898:	f8d8 3000 	ldr.w	r3, [r8]
 801289c:	f894 b018 	ldrb.w	fp, [r4, #24]
 80128a0:	3307      	adds	r3, #7
 80128a2:	f023 0307 	bic.w	r3, r3, #7
 80128a6:	f103 0208 	add.w	r2, r3, #8
 80128aa:	f8c8 2000 	str.w	r2, [r8]
 80128ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128b2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80128b6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80128ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80128be:	9307      	str	r3, [sp, #28]
 80128c0:	f8cd 8018 	str.w	r8, [sp, #24]
 80128c4:	ee08 0a10 	vmov	s16, r0
 80128c8:	4b9f      	ldr	r3, [pc, #636]	; (8012b48 <_printf_float+0x2dc>)
 80128ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80128ce:	f04f 32ff 	mov.w	r2, #4294967295
 80128d2:	f7ee f95b 	bl	8000b8c <__aeabi_dcmpun>
 80128d6:	bb88      	cbnz	r0, 801293c <_printf_float+0xd0>
 80128d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80128dc:	4b9a      	ldr	r3, [pc, #616]	; (8012b48 <_printf_float+0x2dc>)
 80128de:	f04f 32ff 	mov.w	r2, #4294967295
 80128e2:	f7ee f935 	bl	8000b50 <__aeabi_dcmple>
 80128e6:	bb48      	cbnz	r0, 801293c <_printf_float+0xd0>
 80128e8:	2200      	movs	r2, #0
 80128ea:	2300      	movs	r3, #0
 80128ec:	4640      	mov	r0, r8
 80128ee:	4649      	mov	r1, r9
 80128f0:	f7ee f924 	bl	8000b3c <__aeabi_dcmplt>
 80128f4:	b110      	cbz	r0, 80128fc <_printf_float+0x90>
 80128f6:	232d      	movs	r3, #45	; 0x2d
 80128f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80128fc:	4b93      	ldr	r3, [pc, #588]	; (8012b4c <_printf_float+0x2e0>)
 80128fe:	4894      	ldr	r0, [pc, #592]	; (8012b50 <_printf_float+0x2e4>)
 8012900:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8012904:	bf94      	ite	ls
 8012906:	4698      	movls	r8, r3
 8012908:	4680      	movhi	r8, r0
 801290a:	2303      	movs	r3, #3
 801290c:	6123      	str	r3, [r4, #16]
 801290e:	9b05      	ldr	r3, [sp, #20]
 8012910:	f023 0204 	bic.w	r2, r3, #4
 8012914:	6022      	str	r2, [r4, #0]
 8012916:	f04f 0900 	mov.w	r9, #0
 801291a:	9700      	str	r7, [sp, #0]
 801291c:	4633      	mov	r3, r6
 801291e:	aa0b      	add	r2, sp, #44	; 0x2c
 8012920:	4621      	mov	r1, r4
 8012922:	4628      	mov	r0, r5
 8012924:	f000 f9d8 	bl	8012cd8 <_printf_common>
 8012928:	3001      	adds	r0, #1
 801292a:	f040 8090 	bne.w	8012a4e <_printf_float+0x1e2>
 801292e:	f04f 30ff 	mov.w	r0, #4294967295
 8012932:	b00d      	add	sp, #52	; 0x34
 8012934:	ecbd 8b02 	vpop	{d8}
 8012938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801293c:	4642      	mov	r2, r8
 801293e:	464b      	mov	r3, r9
 8012940:	4640      	mov	r0, r8
 8012942:	4649      	mov	r1, r9
 8012944:	f7ee f922 	bl	8000b8c <__aeabi_dcmpun>
 8012948:	b140      	cbz	r0, 801295c <_printf_float+0xf0>
 801294a:	464b      	mov	r3, r9
 801294c:	2b00      	cmp	r3, #0
 801294e:	bfbc      	itt	lt
 8012950:	232d      	movlt	r3, #45	; 0x2d
 8012952:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8012956:	487f      	ldr	r0, [pc, #508]	; (8012b54 <_printf_float+0x2e8>)
 8012958:	4b7f      	ldr	r3, [pc, #508]	; (8012b58 <_printf_float+0x2ec>)
 801295a:	e7d1      	b.n	8012900 <_printf_float+0x94>
 801295c:	6863      	ldr	r3, [r4, #4]
 801295e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8012962:	9206      	str	r2, [sp, #24]
 8012964:	1c5a      	adds	r2, r3, #1
 8012966:	d13f      	bne.n	80129e8 <_printf_float+0x17c>
 8012968:	2306      	movs	r3, #6
 801296a:	6063      	str	r3, [r4, #4]
 801296c:	9b05      	ldr	r3, [sp, #20]
 801296e:	6861      	ldr	r1, [r4, #4]
 8012970:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8012974:	2300      	movs	r3, #0
 8012976:	9303      	str	r3, [sp, #12]
 8012978:	ab0a      	add	r3, sp, #40	; 0x28
 801297a:	e9cd b301 	strd	fp, r3, [sp, #4]
 801297e:	ab09      	add	r3, sp, #36	; 0x24
 8012980:	ec49 8b10 	vmov	d0, r8, r9
 8012984:	9300      	str	r3, [sp, #0]
 8012986:	6022      	str	r2, [r4, #0]
 8012988:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801298c:	4628      	mov	r0, r5
 801298e:	f7ff fecd 	bl	801272c <__cvt>
 8012992:	9b06      	ldr	r3, [sp, #24]
 8012994:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012996:	2b47      	cmp	r3, #71	; 0x47
 8012998:	4680      	mov	r8, r0
 801299a:	d108      	bne.n	80129ae <_printf_float+0x142>
 801299c:	1cc8      	adds	r0, r1, #3
 801299e:	db02      	blt.n	80129a6 <_printf_float+0x13a>
 80129a0:	6863      	ldr	r3, [r4, #4]
 80129a2:	4299      	cmp	r1, r3
 80129a4:	dd41      	ble.n	8012a2a <_printf_float+0x1be>
 80129a6:	f1ab 0b02 	sub.w	fp, fp, #2
 80129aa:	fa5f fb8b 	uxtb.w	fp, fp
 80129ae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80129b2:	d820      	bhi.n	80129f6 <_printf_float+0x18a>
 80129b4:	3901      	subs	r1, #1
 80129b6:	465a      	mov	r2, fp
 80129b8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80129bc:	9109      	str	r1, [sp, #36]	; 0x24
 80129be:	f7ff ff17 	bl	80127f0 <__exponent>
 80129c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80129c4:	1813      	adds	r3, r2, r0
 80129c6:	2a01      	cmp	r2, #1
 80129c8:	4681      	mov	r9, r0
 80129ca:	6123      	str	r3, [r4, #16]
 80129cc:	dc02      	bgt.n	80129d4 <_printf_float+0x168>
 80129ce:	6822      	ldr	r2, [r4, #0]
 80129d0:	07d2      	lsls	r2, r2, #31
 80129d2:	d501      	bpl.n	80129d8 <_printf_float+0x16c>
 80129d4:	3301      	adds	r3, #1
 80129d6:	6123      	str	r3, [r4, #16]
 80129d8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80129dc:	2b00      	cmp	r3, #0
 80129de:	d09c      	beq.n	801291a <_printf_float+0xae>
 80129e0:	232d      	movs	r3, #45	; 0x2d
 80129e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80129e6:	e798      	b.n	801291a <_printf_float+0xae>
 80129e8:	9a06      	ldr	r2, [sp, #24]
 80129ea:	2a47      	cmp	r2, #71	; 0x47
 80129ec:	d1be      	bne.n	801296c <_printf_float+0x100>
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	d1bc      	bne.n	801296c <_printf_float+0x100>
 80129f2:	2301      	movs	r3, #1
 80129f4:	e7b9      	b.n	801296a <_printf_float+0xfe>
 80129f6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80129fa:	d118      	bne.n	8012a2e <_printf_float+0x1c2>
 80129fc:	2900      	cmp	r1, #0
 80129fe:	6863      	ldr	r3, [r4, #4]
 8012a00:	dd0b      	ble.n	8012a1a <_printf_float+0x1ae>
 8012a02:	6121      	str	r1, [r4, #16]
 8012a04:	b913      	cbnz	r3, 8012a0c <_printf_float+0x1a0>
 8012a06:	6822      	ldr	r2, [r4, #0]
 8012a08:	07d0      	lsls	r0, r2, #31
 8012a0a:	d502      	bpl.n	8012a12 <_printf_float+0x1a6>
 8012a0c:	3301      	adds	r3, #1
 8012a0e:	440b      	add	r3, r1
 8012a10:	6123      	str	r3, [r4, #16]
 8012a12:	65a1      	str	r1, [r4, #88]	; 0x58
 8012a14:	f04f 0900 	mov.w	r9, #0
 8012a18:	e7de      	b.n	80129d8 <_printf_float+0x16c>
 8012a1a:	b913      	cbnz	r3, 8012a22 <_printf_float+0x1b6>
 8012a1c:	6822      	ldr	r2, [r4, #0]
 8012a1e:	07d2      	lsls	r2, r2, #31
 8012a20:	d501      	bpl.n	8012a26 <_printf_float+0x1ba>
 8012a22:	3302      	adds	r3, #2
 8012a24:	e7f4      	b.n	8012a10 <_printf_float+0x1a4>
 8012a26:	2301      	movs	r3, #1
 8012a28:	e7f2      	b.n	8012a10 <_printf_float+0x1a4>
 8012a2a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8012a2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012a30:	4299      	cmp	r1, r3
 8012a32:	db05      	blt.n	8012a40 <_printf_float+0x1d4>
 8012a34:	6823      	ldr	r3, [r4, #0]
 8012a36:	6121      	str	r1, [r4, #16]
 8012a38:	07d8      	lsls	r0, r3, #31
 8012a3a:	d5ea      	bpl.n	8012a12 <_printf_float+0x1a6>
 8012a3c:	1c4b      	adds	r3, r1, #1
 8012a3e:	e7e7      	b.n	8012a10 <_printf_float+0x1a4>
 8012a40:	2900      	cmp	r1, #0
 8012a42:	bfd4      	ite	le
 8012a44:	f1c1 0202 	rsble	r2, r1, #2
 8012a48:	2201      	movgt	r2, #1
 8012a4a:	4413      	add	r3, r2
 8012a4c:	e7e0      	b.n	8012a10 <_printf_float+0x1a4>
 8012a4e:	6823      	ldr	r3, [r4, #0]
 8012a50:	055a      	lsls	r2, r3, #21
 8012a52:	d407      	bmi.n	8012a64 <_printf_float+0x1f8>
 8012a54:	6923      	ldr	r3, [r4, #16]
 8012a56:	4642      	mov	r2, r8
 8012a58:	4631      	mov	r1, r6
 8012a5a:	4628      	mov	r0, r5
 8012a5c:	47b8      	blx	r7
 8012a5e:	3001      	adds	r0, #1
 8012a60:	d12c      	bne.n	8012abc <_printf_float+0x250>
 8012a62:	e764      	b.n	801292e <_printf_float+0xc2>
 8012a64:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8012a68:	f240 80e0 	bls.w	8012c2c <_printf_float+0x3c0>
 8012a6c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012a70:	2200      	movs	r2, #0
 8012a72:	2300      	movs	r3, #0
 8012a74:	f7ee f858 	bl	8000b28 <__aeabi_dcmpeq>
 8012a78:	2800      	cmp	r0, #0
 8012a7a:	d034      	beq.n	8012ae6 <_printf_float+0x27a>
 8012a7c:	4a37      	ldr	r2, [pc, #220]	; (8012b5c <_printf_float+0x2f0>)
 8012a7e:	2301      	movs	r3, #1
 8012a80:	4631      	mov	r1, r6
 8012a82:	4628      	mov	r0, r5
 8012a84:	47b8      	blx	r7
 8012a86:	3001      	adds	r0, #1
 8012a88:	f43f af51 	beq.w	801292e <_printf_float+0xc2>
 8012a8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012a90:	429a      	cmp	r2, r3
 8012a92:	db02      	blt.n	8012a9a <_printf_float+0x22e>
 8012a94:	6823      	ldr	r3, [r4, #0]
 8012a96:	07d8      	lsls	r0, r3, #31
 8012a98:	d510      	bpl.n	8012abc <_printf_float+0x250>
 8012a9a:	ee18 3a10 	vmov	r3, s16
 8012a9e:	4652      	mov	r2, sl
 8012aa0:	4631      	mov	r1, r6
 8012aa2:	4628      	mov	r0, r5
 8012aa4:	47b8      	blx	r7
 8012aa6:	3001      	adds	r0, #1
 8012aa8:	f43f af41 	beq.w	801292e <_printf_float+0xc2>
 8012aac:	f04f 0800 	mov.w	r8, #0
 8012ab0:	f104 091a 	add.w	r9, r4, #26
 8012ab4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012ab6:	3b01      	subs	r3, #1
 8012ab8:	4543      	cmp	r3, r8
 8012aba:	dc09      	bgt.n	8012ad0 <_printf_float+0x264>
 8012abc:	6823      	ldr	r3, [r4, #0]
 8012abe:	079b      	lsls	r3, r3, #30
 8012ac0:	f100 8105 	bmi.w	8012cce <_printf_float+0x462>
 8012ac4:	68e0      	ldr	r0, [r4, #12]
 8012ac6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012ac8:	4298      	cmp	r0, r3
 8012aca:	bfb8      	it	lt
 8012acc:	4618      	movlt	r0, r3
 8012ace:	e730      	b.n	8012932 <_printf_float+0xc6>
 8012ad0:	2301      	movs	r3, #1
 8012ad2:	464a      	mov	r2, r9
 8012ad4:	4631      	mov	r1, r6
 8012ad6:	4628      	mov	r0, r5
 8012ad8:	47b8      	blx	r7
 8012ada:	3001      	adds	r0, #1
 8012adc:	f43f af27 	beq.w	801292e <_printf_float+0xc2>
 8012ae0:	f108 0801 	add.w	r8, r8, #1
 8012ae4:	e7e6      	b.n	8012ab4 <_printf_float+0x248>
 8012ae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	dc39      	bgt.n	8012b60 <_printf_float+0x2f4>
 8012aec:	4a1b      	ldr	r2, [pc, #108]	; (8012b5c <_printf_float+0x2f0>)
 8012aee:	2301      	movs	r3, #1
 8012af0:	4631      	mov	r1, r6
 8012af2:	4628      	mov	r0, r5
 8012af4:	47b8      	blx	r7
 8012af6:	3001      	adds	r0, #1
 8012af8:	f43f af19 	beq.w	801292e <_printf_float+0xc2>
 8012afc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012b00:	4313      	orrs	r3, r2
 8012b02:	d102      	bne.n	8012b0a <_printf_float+0x29e>
 8012b04:	6823      	ldr	r3, [r4, #0]
 8012b06:	07d9      	lsls	r1, r3, #31
 8012b08:	d5d8      	bpl.n	8012abc <_printf_float+0x250>
 8012b0a:	ee18 3a10 	vmov	r3, s16
 8012b0e:	4652      	mov	r2, sl
 8012b10:	4631      	mov	r1, r6
 8012b12:	4628      	mov	r0, r5
 8012b14:	47b8      	blx	r7
 8012b16:	3001      	adds	r0, #1
 8012b18:	f43f af09 	beq.w	801292e <_printf_float+0xc2>
 8012b1c:	f04f 0900 	mov.w	r9, #0
 8012b20:	f104 0a1a 	add.w	sl, r4, #26
 8012b24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012b26:	425b      	negs	r3, r3
 8012b28:	454b      	cmp	r3, r9
 8012b2a:	dc01      	bgt.n	8012b30 <_printf_float+0x2c4>
 8012b2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012b2e:	e792      	b.n	8012a56 <_printf_float+0x1ea>
 8012b30:	2301      	movs	r3, #1
 8012b32:	4652      	mov	r2, sl
 8012b34:	4631      	mov	r1, r6
 8012b36:	4628      	mov	r0, r5
 8012b38:	47b8      	blx	r7
 8012b3a:	3001      	adds	r0, #1
 8012b3c:	f43f aef7 	beq.w	801292e <_printf_float+0xc2>
 8012b40:	f109 0901 	add.w	r9, r9, #1
 8012b44:	e7ee      	b.n	8012b24 <_printf_float+0x2b8>
 8012b46:	bf00      	nop
 8012b48:	7fefffff 	.word	0x7fefffff
 8012b4c:	0805d5d4 	.word	0x0805d5d4
 8012b50:	0805d5d8 	.word	0x0805d5d8
 8012b54:	0805d5e0 	.word	0x0805d5e0
 8012b58:	0805d5dc 	.word	0x0805d5dc
 8012b5c:	0805da71 	.word	0x0805da71
 8012b60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012b62:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012b64:	429a      	cmp	r2, r3
 8012b66:	bfa8      	it	ge
 8012b68:	461a      	movge	r2, r3
 8012b6a:	2a00      	cmp	r2, #0
 8012b6c:	4691      	mov	r9, r2
 8012b6e:	dc37      	bgt.n	8012be0 <_printf_float+0x374>
 8012b70:	f04f 0b00 	mov.w	fp, #0
 8012b74:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012b78:	f104 021a 	add.w	r2, r4, #26
 8012b7c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012b7e:	9305      	str	r3, [sp, #20]
 8012b80:	eba3 0309 	sub.w	r3, r3, r9
 8012b84:	455b      	cmp	r3, fp
 8012b86:	dc33      	bgt.n	8012bf0 <_printf_float+0x384>
 8012b88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012b8c:	429a      	cmp	r2, r3
 8012b8e:	db3b      	blt.n	8012c08 <_printf_float+0x39c>
 8012b90:	6823      	ldr	r3, [r4, #0]
 8012b92:	07da      	lsls	r2, r3, #31
 8012b94:	d438      	bmi.n	8012c08 <_printf_float+0x39c>
 8012b96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012b98:	9a05      	ldr	r2, [sp, #20]
 8012b9a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012b9c:	1a9a      	subs	r2, r3, r2
 8012b9e:	eba3 0901 	sub.w	r9, r3, r1
 8012ba2:	4591      	cmp	r9, r2
 8012ba4:	bfa8      	it	ge
 8012ba6:	4691      	movge	r9, r2
 8012ba8:	f1b9 0f00 	cmp.w	r9, #0
 8012bac:	dc35      	bgt.n	8012c1a <_printf_float+0x3ae>
 8012bae:	f04f 0800 	mov.w	r8, #0
 8012bb2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012bb6:	f104 0a1a 	add.w	sl, r4, #26
 8012bba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012bbe:	1a9b      	subs	r3, r3, r2
 8012bc0:	eba3 0309 	sub.w	r3, r3, r9
 8012bc4:	4543      	cmp	r3, r8
 8012bc6:	f77f af79 	ble.w	8012abc <_printf_float+0x250>
 8012bca:	2301      	movs	r3, #1
 8012bcc:	4652      	mov	r2, sl
 8012bce:	4631      	mov	r1, r6
 8012bd0:	4628      	mov	r0, r5
 8012bd2:	47b8      	blx	r7
 8012bd4:	3001      	adds	r0, #1
 8012bd6:	f43f aeaa 	beq.w	801292e <_printf_float+0xc2>
 8012bda:	f108 0801 	add.w	r8, r8, #1
 8012bde:	e7ec      	b.n	8012bba <_printf_float+0x34e>
 8012be0:	4613      	mov	r3, r2
 8012be2:	4631      	mov	r1, r6
 8012be4:	4642      	mov	r2, r8
 8012be6:	4628      	mov	r0, r5
 8012be8:	47b8      	blx	r7
 8012bea:	3001      	adds	r0, #1
 8012bec:	d1c0      	bne.n	8012b70 <_printf_float+0x304>
 8012bee:	e69e      	b.n	801292e <_printf_float+0xc2>
 8012bf0:	2301      	movs	r3, #1
 8012bf2:	4631      	mov	r1, r6
 8012bf4:	4628      	mov	r0, r5
 8012bf6:	9205      	str	r2, [sp, #20]
 8012bf8:	47b8      	blx	r7
 8012bfa:	3001      	adds	r0, #1
 8012bfc:	f43f ae97 	beq.w	801292e <_printf_float+0xc2>
 8012c00:	9a05      	ldr	r2, [sp, #20]
 8012c02:	f10b 0b01 	add.w	fp, fp, #1
 8012c06:	e7b9      	b.n	8012b7c <_printf_float+0x310>
 8012c08:	ee18 3a10 	vmov	r3, s16
 8012c0c:	4652      	mov	r2, sl
 8012c0e:	4631      	mov	r1, r6
 8012c10:	4628      	mov	r0, r5
 8012c12:	47b8      	blx	r7
 8012c14:	3001      	adds	r0, #1
 8012c16:	d1be      	bne.n	8012b96 <_printf_float+0x32a>
 8012c18:	e689      	b.n	801292e <_printf_float+0xc2>
 8012c1a:	9a05      	ldr	r2, [sp, #20]
 8012c1c:	464b      	mov	r3, r9
 8012c1e:	4442      	add	r2, r8
 8012c20:	4631      	mov	r1, r6
 8012c22:	4628      	mov	r0, r5
 8012c24:	47b8      	blx	r7
 8012c26:	3001      	adds	r0, #1
 8012c28:	d1c1      	bne.n	8012bae <_printf_float+0x342>
 8012c2a:	e680      	b.n	801292e <_printf_float+0xc2>
 8012c2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012c2e:	2a01      	cmp	r2, #1
 8012c30:	dc01      	bgt.n	8012c36 <_printf_float+0x3ca>
 8012c32:	07db      	lsls	r3, r3, #31
 8012c34:	d538      	bpl.n	8012ca8 <_printf_float+0x43c>
 8012c36:	2301      	movs	r3, #1
 8012c38:	4642      	mov	r2, r8
 8012c3a:	4631      	mov	r1, r6
 8012c3c:	4628      	mov	r0, r5
 8012c3e:	47b8      	blx	r7
 8012c40:	3001      	adds	r0, #1
 8012c42:	f43f ae74 	beq.w	801292e <_printf_float+0xc2>
 8012c46:	ee18 3a10 	vmov	r3, s16
 8012c4a:	4652      	mov	r2, sl
 8012c4c:	4631      	mov	r1, r6
 8012c4e:	4628      	mov	r0, r5
 8012c50:	47b8      	blx	r7
 8012c52:	3001      	adds	r0, #1
 8012c54:	f43f ae6b 	beq.w	801292e <_printf_float+0xc2>
 8012c58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012c5c:	2200      	movs	r2, #0
 8012c5e:	2300      	movs	r3, #0
 8012c60:	f7ed ff62 	bl	8000b28 <__aeabi_dcmpeq>
 8012c64:	b9d8      	cbnz	r0, 8012c9e <_printf_float+0x432>
 8012c66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012c68:	f108 0201 	add.w	r2, r8, #1
 8012c6c:	3b01      	subs	r3, #1
 8012c6e:	4631      	mov	r1, r6
 8012c70:	4628      	mov	r0, r5
 8012c72:	47b8      	blx	r7
 8012c74:	3001      	adds	r0, #1
 8012c76:	d10e      	bne.n	8012c96 <_printf_float+0x42a>
 8012c78:	e659      	b.n	801292e <_printf_float+0xc2>
 8012c7a:	2301      	movs	r3, #1
 8012c7c:	4652      	mov	r2, sl
 8012c7e:	4631      	mov	r1, r6
 8012c80:	4628      	mov	r0, r5
 8012c82:	47b8      	blx	r7
 8012c84:	3001      	adds	r0, #1
 8012c86:	f43f ae52 	beq.w	801292e <_printf_float+0xc2>
 8012c8a:	f108 0801 	add.w	r8, r8, #1
 8012c8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012c90:	3b01      	subs	r3, #1
 8012c92:	4543      	cmp	r3, r8
 8012c94:	dcf1      	bgt.n	8012c7a <_printf_float+0x40e>
 8012c96:	464b      	mov	r3, r9
 8012c98:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012c9c:	e6dc      	b.n	8012a58 <_printf_float+0x1ec>
 8012c9e:	f04f 0800 	mov.w	r8, #0
 8012ca2:	f104 0a1a 	add.w	sl, r4, #26
 8012ca6:	e7f2      	b.n	8012c8e <_printf_float+0x422>
 8012ca8:	2301      	movs	r3, #1
 8012caa:	4642      	mov	r2, r8
 8012cac:	e7df      	b.n	8012c6e <_printf_float+0x402>
 8012cae:	2301      	movs	r3, #1
 8012cb0:	464a      	mov	r2, r9
 8012cb2:	4631      	mov	r1, r6
 8012cb4:	4628      	mov	r0, r5
 8012cb6:	47b8      	blx	r7
 8012cb8:	3001      	adds	r0, #1
 8012cba:	f43f ae38 	beq.w	801292e <_printf_float+0xc2>
 8012cbe:	f108 0801 	add.w	r8, r8, #1
 8012cc2:	68e3      	ldr	r3, [r4, #12]
 8012cc4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012cc6:	1a5b      	subs	r3, r3, r1
 8012cc8:	4543      	cmp	r3, r8
 8012cca:	dcf0      	bgt.n	8012cae <_printf_float+0x442>
 8012ccc:	e6fa      	b.n	8012ac4 <_printf_float+0x258>
 8012cce:	f04f 0800 	mov.w	r8, #0
 8012cd2:	f104 0919 	add.w	r9, r4, #25
 8012cd6:	e7f4      	b.n	8012cc2 <_printf_float+0x456>

08012cd8 <_printf_common>:
 8012cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012cdc:	4616      	mov	r6, r2
 8012cde:	4699      	mov	r9, r3
 8012ce0:	688a      	ldr	r2, [r1, #8]
 8012ce2:	690b      	ldr	r3, [r1, #16]
 8012ce4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012ce8:	4293      	cmp	r3, r2
 8012cea:	bfb8      	it	lt
 8012cec:	4613      	movlt	r3, r2
 8012cee:	6033      	str	r3, [r6, #0]
 8012cf0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012cf4:	4607      	mov	r7, r0
 8012cf6:	460c      	mov	r4, r1
 8012cf8:	b10a      	cbz	r2, 8012cfe <_printf_common+0x26>
 8012cfa:	3301      	adds	r3, #1
 8012cfc:	6033      	str	r3, [r6, #0]
 8012cfe:	6823      	ldr	r3, [r4, #0]
 8012d00:	0699      	lsls	r1, r3, #26
 8012d02:	bf42      	ittt	mi
 8012d04:	6833      	ldrmi	r3, [r6, #0]
 8012d06:	3302      	addmi	r3, #2
 8012d08:	6033      	strmi	r3, [r6, #0]
 8012d0a:	6825      	ldr	r5, [r4, #0]
 8012d0c:	f015 0506 	ands.w	r5, r5, #6
 8012d10:	d106      	bne.n	8012d20 <_printf_common+0x48>
 8012d12:	f104 0a19 	add.w	sl, r4, #25
 8012d16:	68e3      	ldr	r3, [r4, #12]
 8012d18:	6832      	ldr	r2, [r6, #0]
 8012d1a:	1a9b      	subs	r3, r3, r2
 8012d1c:	42ab      	cmp	r3, r5
 8012d1e:	dc26      	bgt.n	8012d6e <_printf_common+0x96>
 8012d20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012d24:	1e13      	subs	r3, r2, #0
 8012d26:	6822      	ldr	r2, [r4, #0]
 8012d28:	bf18      	it	ne
 8012d2a:	2301      	movne	r3, #1
 8012d2c:	0692      	lsls	r2, r2, #26
 8012d2e:	d42b      	bmi.n	8012d88 <_printf_common+0xb0>
 8012d30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012d34:	4649      	mov	r1, r9
 8012d36:	4638      	mov	r0, r7
 8012d38:	47c0      	blx	r8
 8012d3a:	3001      	adds	r0, #1
 8012d3c:	d01e      	beq.n	8012d7c <_printf_common+0xa4>
 8012d3e:	6823      	ldr	r3, [r4, #0]
 8012d40:	68e5      	ldr	r5, [r4, #12]
 8012d42:	6832      	ldr	r2, [r6, #0]
 8012d44:	f003 0306 	and.w	r3, r3, #6
 8012d48:	2b04      	cmp	r3, #4
 8012d4a:	bf08      	it	eq
 8012d4c:	1aad      	subeq	r5, r5, r2
 8012d4e:	68a3      	ldr	r3, [r4, #8]
 8012d50:	6922      	ldr	r2, [r4, #16]
 8012d52:	bf0c      	ite	eq
 8012d54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012d58:	2500      	movne	r5, #0
 8012d5a:	4293      	cmp	r3, r2
 8012d5c:	bfc4      	itt	gt
 8012d5e:	1a9b      	subgt	r3, r3, r2
 8012d60:	18ed      	addgt	r5, r5, r3
 8012d62:	2600      	movs	r6, #0
 8012d64:	341a      	adds	r4, #26
 8012d66:	42b5      	cmp	r5, r6
 8012d68:	d11a      	bne.n	8012da0 <_printf_common+0xc8>
 8012d6a:	2000      	movs	r0, #0
 8012d6c:	e008      	b.n	8012d80 <_printf_common+0xa8>
 8012d6e:	2301      	movs	r3, #1
 8012d70:	4652      	mov	r2, sl
 8012d72:	4649      	mov	r1, r9
 8012d74:	4638      	mov	r0, r7
 8012d76:	47c0      	blx	r8
 8012d78:	3001      	adds	r0, #1
 8012d7a:	d103      	bne.n	8012d84 <_printf_common+0xac>
 8012d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8012d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d84:	3501      	adds	r5, #1
 8012d86:	e7c6      	b.n	8012d16 <_printf_common+0x3e>
 8012d88:	18e1      	adds	r1, r4, r3
 8012d8a:	1c5a      	adds	r2, r3, #1
 8012d8c:	2030      	movs	r0, #48	; 0x30
 8012d8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012d92:	4422      	add	r2, r4
 8012d94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012d98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012d9c:	3302      	adds	r3, #2
 8012d9e:	e7c7      	b.n	8012d30 <_printf_common+0x58>
 8012da0:	2301      	movs	r3, #1
 8012da2:	4622      	mov	r2, r4
 8012da4:	4649      	mov	r1, r9
 8012da6:	4638      	mov	r0, r7
 8012da8:	47c0      	blx	r8
 8012daa:	3001      	adds	r0, #1
 8012dac:	d0e6      	beq.n	8012d7c <_printf_common+0xa4>
 8012dae:	3601      	adds	r6, #1
 8012db0:	e7d9      	b.n	8012d66 <_printf_common+0x8e>
	...

08012db4 <_printf_i>:
 8012db4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012db8:	7e0f      	ldrb	r7, [r1, #24]
 8012dba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012dbc:	2f78      	cmp	r7, #120	; 0x78
 8012dbe:	4691      	mov	r9, r2
 8012dc0:	4680      	mov	r8, r0
 8012dc2:	460c      	mov	r4, r1
 8012dc4:	469a      	mov	sl, r3
 8012dc6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8012dca:	d807      	bhi.n	8012ddc <_printf_i+0x28>
 8012dcc:	2f62      	cmp	r7, #98	; 0x62
 8012dce:	d80a      	bhi.n	8012de6 <_printf_i+0x32>
 8012dd0:	2f00      	cmp	r7, #0
 8012dd2:	f000 80d8 	beq.w	8012f86 <_printf_i+0x1d2>
 8012dd6:	2f58      	cmp	r7, #88	; 0x58
 8012dd8:	f000 80a3 	beq.w	8012f22 <_printf_i+0x16e>
 8012ddc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012de0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012de4:	e03a      	b.n	8012e5c <_printf_i+0xa8>
 8012de6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012dea:	2b15      	cmp	r3, #21
 8012dec:	d8f6      	bhi.n	8012ddc <_printf_i+0x28>
 8012dee:	a101      	add	r1, pc, #4	; (adr r1, 8012df4 <_printf_i+0x40>)
 8012df0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012df4:	08012e4d 	.word	0x08012e4d
 8012df8:	08012e61 	.word	0x08012e61
 8012dfc:	08012ddd 	.word	0x08012ddd
 8012e00:	08012ddd 	.word	0x08012ddd
 8012e04:	08012ddd 	.word	0x08012ddd
 8012e08:	08012ddd 	.word	0x08012ddd
 8012e0c:	08012e61 	.word	0x08012e61
 8012e10:	08012ddd 	.word	0x08012ddd
 8012e14:	08012ddd 	.word	0x08012ddd
 8012e18:	08012ddd 	.word	0x08012ddd
 8012e1c:	08012ddd 	.word	0x08012ddd
 8012e20:	08012f6d 	.word	0x08012f6d
 8012e24:	08012e91 	.word	0x08012e91
 8012e28:	08012f4f 	.word	0x08012f4f
 8012e2c:	08012ddd 	.word	0x08012ddd
 8012e30:	08012ddd 	.word	0x08012ddd
 8012e34:	08012f8f 	.word	0x08012f8f
 8012e38:	08012ddd 	.word	0x08012ddd
 8012e3c:	08012e91 	.word	0x08012e91
 8012e40:	08012ddd 	.word	0x08012ddd
 8012e44:	08012ddd 	.word	0x08012ddd
 8012e48:	08012f57 	.word	0x08012f57
 8012e4c:	682b      	ldr	r3, [r5, #0]
 8012e4e:	1d1a      	adds	r2, r3, #4
 8012e50:	681b      	ldr	r3, [r3, #0]
 8012e52:	602a      	str	r2, [r5, #0]
 8012e54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012e58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012e5c:	2301      	movs	r3, #1
 8012e5e:	e0a3      	b.n	8012fa8 <_printf_i+0x1f4>
 8012e60:	6820      	ldr	r0, [r4, #0]
 8012e62:	6829      	ldr	r1, [r5, #0]
 8012e64:	0606      	lsls	r6, r0, #24
 8012e66:	f101 0304 	add.w	r3, r1, #4
 8012e6a:	d50a      	bpl.n	8012e82 <_printf_i+0xce>
 8012e6c:	680e      	ldr	r6, [r1, #0]
 8012e6e:	602b      	str	r3, [r5, #0]
 8012e70:	2e00      	cmp	r6, #0
 8012e72:	da03      	bge.n	8012e7c <_printf_i+0xc8>
 8012e74:	232d      	movs	r3, #45	; 0x2d
 8012e76:	4276      	negs	r6, r6
 8012e78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012e7c:	485e      	ldr	r0, [pc, #376]	; (8012ff8 <_printf_i+0x244>)
 8012e7e:	230a      	movs	r3, #10
 8012e80:	e019      	b.n	8012eb6 <_printf_i+0x102>
 8012e82:	680e      	ldr	r6, [r1, #0]
 8012e84:	602b      	str	r3, [r5, #0]
 8012e86:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012e8a:	bf18      	it	ne
 8012e8c:	b236      	sxthne	r6, r6
 8012e8e:	e7ef      	b.n	8012e70 <_printf_i+0xbc>
 8012e90:	682b      	ldr	r3, [r5, #0]
 8012e92:	6820      	ldr	r0, [r4, #0]
 8012e94:	1d19      	adds	r1, r3, #4
 8012e96:	6029      	str	r1, [r5, #0]
 8012e98:	0601      	lsls	r1, r0, #24
 8012e9a:	d501      	bpl.n	8012ea0 <_printf_i+0xec>
 8012e9c:	681e      	ldr	r6, [r3, #0]
 8012e9e:	e002      	b.n	8012ea6 <_printf_i+0xf2>
 8012ea0:	0646      	lsls	r6, r0, #25
 8012ea2:	d5fb      	bpl.n	8012e9c <_printf_i+0xe8>
 8012ea4:	881e      	ldrh	r6, [r3, #0]
 8012ea6:	4854      	ldr	r0, [pc, #336]	; (8012ff8 <_printf_i+0x244>)
 8012ea8:	2f6f      	cmp	r7, #111	; 0x6f
 8012eaa:	bf0c      	ite	eq
 8012eac:	2308      	moveq	r3, #8
 8012eae:	230a      	movne	r3, #10
 8012eb0:	2100      	movs	r1, #0
 8012eb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012eb6:	6865      	ldr	r5, [r4, #4]
 8012eb8:	60a5      	str	r5, [r4, #8]
 8012eba:	2d00      	cmp	r5, #0
 8012ebc:	bfa2      	ittt	ge
 8012ebe:	6821      	ldrge	r1, [r4, #0]
 8012ec0:	f021 0104 	bicge.w	r1, r1, #4
 8012ec4:	6021      	strge	r1, [r4, #0]
 8012ec6:	b90e      	cbnz	r6, 8012ecc <_printf_i+0x118>
 8012ec8:	2d00      	cmp	r5, #0
 8012eca:	d04d      	beq.n	8012f68 <_printf_i+0x1b4>
 8012ecc:	4615      	mov	r5, r2
 8012ece:	fbb6 f1f3 	udiv	r1, r6, r3
 8012ed2:	fb03 6711 	mls	r7, r3, r1, r6
 8012ed6:	5dc7      	ldrb	r7, [r0, r7]
 8012ed8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012edc:	4637      	mov	r7, r6
 8012ede:	42bb      	cmp	r3, r7
 8012ee0:	460e      	mov	r6, r1
 8012ee2:	d9f4      	bls.n	8012ece <_printf_i+0x11a>
 8012ee4:	2b08      	cmp	r3, #8
 8012ee6:	d10b      	bne.n	8012f00 <_printf_i+0x14c>
 8012ee8:	6823      	ldr	r3, [r4, #0]
 8012eea:	07de      	lsls	r6, r3, #31
 8012eec:	d508      	bpl.n	8012f00 <_printf_i+0x14c>
 8012eee:	6923      	ldr	r3, [r4, #16]
 8012ef0:	6861      	ldr	r1, [r4, #4]
 8012ef2:	4299      	cmp	r1, r3
 8012ef4:	bfde      	ittt	le
 8012ef6:	2330      	movle	r3, #48	; 0x30
 8012ef8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012efc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012f00:	1b52      	subs	r2, r2, r5
 8012f02:	6122      	str	r2, [r4, #16]
 8012f04:	f8cd a000 	str.w	sl, [sp]
 8012f08:	464b      	mov	r3, r9
 8012f0a:	aa03      	add	r2, sp, #12
 8012f0c:	4621      	mov	r1, r4
 8012f0e:	4640      	mov	r0, r8
 8012f10:	f7ff fee2 	bl	8012cd8 <_printf_common>
 8012f14:	3001      	adds	r0, #1
 8012f16:	d14c      	bne.n	8012fb2 <_printf_i+0x1fe>
 8012f18:	f04f 30ff 	mov.w	r0, #4294967295
 8012f1c:	b004      	add	sp, #16
 8012f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f22:	4835      	ldr	r0, [pc, #212]	; (8012ff8 <_printf_i+0x244>)
 8012f24:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8012f28:	6829      	ldr	r1, [r5, #0]
 8012f2a:	6823      	ldr	r3, [r4, #0]
 8012f2c:	f851 6b04 	ldr.w	r6, [r1], #4
 8012f30:	6029      	str	r1, [r5, #0]
 8012f32:	061d      	lsls	r5, r3, #24
 8012f34:	d514      	bpl.n	8012f60 <_printf_i+0x1ac>
 8012f36:	07df      	lsls	r7, r3, #31
 8012f38:	bf44      	itt	mi
 8012f3a:	f043 0320 	orrmi.w	r3, r3, #32
 8012f3e:	6023      	strmi	r3, [r4, #0]
 8012f40:	b91e      	cbnz	r6, 8012f4a <_printf_i+0x196>
 8012f42:	6823      	ldr	r3, [r4, #0]
 8012f44:	f023 0320 	bic.w	r3, r3, #32
 8012f48:	6023      	str	r3, [r4, #0]
 8012f4a:	2310      	movs	r3, #16
 8012f4c:	e7b0      	b.n	8012eb0 <_printf_i+0xfc>
 8012f4e:	6823      	ldr	r3, [r4, #0]
 8012f50:	f043 0320 	orr.w	r3, r3, #32
 8012f54:	6023      	str	r3, [r4, #0]
 8012f56:	2378      	movs	r3, #120	; 0x78
 8012f58:	4828      	ldr	r0, [pc, #160]	; (8012ffc <_printf_i+0x248>)
 8012f5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012f5e:	e7e3      	b.n	8012f28 <_printf_i+0x174>
 8012f60:	0659      	lsls	r1, r3, #25
 8012f62:	bf48      	it	mi
 8012f64:	b2b6      	uxthmi	r6, r6
 8012f66:	e7e6      	b.n	8012f36 <_printf_i+0x182>
 8012f68:	4615      	mov	r5, r2
 8012f6a:	e7bb      	b.n	8012ee4 <_printf_i+0x130>
 8012f6c:	682b      	ldr	r3, [r5, #0]
 8012f6e:	6826      	ldr	r6, [r4, #0]
 8012f70:	6961      	ldr	r1, [r4, #20]
 8012f72:	1d18      	adds	r0, r3, #4
 8012f74:	6028      	str	r0, [r5, #0]
 8012f76:	0635      	lsls	r5, r6, #24
 8012f78:	681b      	ldr	r3, [r3, #0]
 8012f7a:	d501      	bpl.n	8012f80 <_printf_i+0x1cc>
 8012f7c:	6019      	str	r1, [r3, #0]
 8012f7e:	e002      	b.n	8012f86 <_printf_i+0x1d2>
 8012f80:	0670      	lsls	r0, r6, #25
 8012f82:	d5fb      	bpl.n	8012f7c <_printf_i+0x1c8>
 8012f84:	8019      	strh	r1, [r3, #0]
 8012f86:	2300      	movs	r3, #0
 8012f88:	6123      	str	r3, [r4, #16]
 8012f8a:	4615      	mov	r5, r2
 8012f8c:	e7ba      	b.n	8012f04 <_printf_i+0x150>
 8012f8e:	682b      	ldr	r3, [r5, #0]
 8012f90:	1d1a      	adds	r2, r3, #4
 8012f92:	602a      	str	r2, [r5, #0]
 8012f94:	681d      	ldr	r5, [r3, #0]
 8012f96:	6862      	ldr	r2, [r4, #4]
 8012f98:	2100      	movs	r1, #0
 8012f9a:	4628      	mov	r0, r5
 8012f9c:	f7ed f950 	bl	8000240 <memchr>
 8012fa0:	b108      	cbz	r0, 8012fa6 <_printf_i+0x1f2>
 8012fa2:	1b40      	subs	r0, r0, r5
 8012fa4:	6060      	str	r0, [r4, #4]
 8012fa6:	6863      	ldr	r3, [r4, #4]
 8012fa8:	6123      	str	r3, [r4, #16]
 8012faa:	2300      	movs	r3, #0
 8012fac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012fb0:	e7a8      	b.n	8012f04 <_printf_i+0x150>
 8012fb2:	6923      	ldr	r3, [r4, #16]
 8012fb4:	462a      	mov	r2, r5
 8012fb6:	4649      	mov	r1, r9
 8012fb8:	4640      	mov	r0, r8
 8012fba:	47d0      	blx	sl
 8012fbc:	3001      	adds	r0, #1
 8012fbe:	d0ab      	beq.n	8012f18 <_printf_i+0x164>
 8012fc0:	6823      	ldr	r3, [r4, #0]
 8012fc2:	079b      	lsls	r3, r3, #30
 8012fc4:	d413      	bmi.n	8012fee <_printf_i+0x23a>
 8012fc6:	68e0      	ldr	r0, [r4, #12]
 8012fc8:	9b03      	ldr	r3, [sp, #12]
 8012fca:	4298      	cmp	r0, r3
 8012fcc:	bfb8      	it	lt
 8012fce:	4618      	movlt	r0, r3
 8012fd0:	e7a4      	b.n	8012f1c <_printf_i+0x168>
 8012fd2:	2301      	movs	r3, #1
 8012fd4:	4632      	mov	r2, r6
 8012fd6:	4649      	mov	r1, r9
 8012fd8:	4640      	mov	r0, r8
 8012fda:	47d0      	blx	sl
 8012fdc:	3001      	adds	r0, #1
 8012fde:	d09b      	beq.n	8012f18 <_printf_i+0x164>
 8012fe0:	3501      	adds	r5, #1
 8012fe2:	68e3      	ldr	r3, [r4, #12]
 8012fe4:	9903      	ldr	r1, [sp, #12]
 8012fe6:	1a5b      	subs	r3, r3, r1
 8012fe8:	42ab      	cmp	r3, r5
 8012fea:	dcf2      	bgt.n	8012fd2 <_printf_i+0x21e>
 8012fec:	e7eb      	b.n	8012fc6 <_printf_i+0x212>
 8012fee:	2500      	movs	r5, #0
 8012ff0:	f104 0619 	add.w	r6, r4, #25
 8012ff4:	e7f5      	b.n	8012fe2 <_printf_i+0x22e>
 8012ff6:	bf00      	nop
 8012ff8:	0805d5e4 	.word	0x0805d5e4
 8012ffc:	0805d5f5 	.word	0x0805d5f5

08013000 <_scanf_float>:
 8013000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013004:	b087      	sub	sp, #28
 8013006:	4617      	mov	r7, r2
 8013008:	9303      	str	r3, [sp, #12]
 801300a:	688b      	ldr	r3, [r1, #8]
 801300c:	1e5a      	subs	r2, r3, #1
 801300e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8013012:	bf83      	ittte	hi
 8013014:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8013018:	195b      	addhi	r3, r3, r5
 801301a:	9302      	strhi	r3, [sp, #8]
 801301c:	2300      	movls	r3, #0
 801301e:	bf86      	itte	hi
 8013020:	f240 135d 	movwhi	r3, #349	; 0x15d
 8013024:	608b      	strhi	r3, [r1, #8]
 8013026:	9302      	strls	r3, [sp, #8]
 8013028:	680b      	ldr	r3, [r1, #0]
 801302a:	468b      	mov	fp, r1
 801302c:	2500      	movs	r5, #0
 801302e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8013032:	f84b 3b1c 	str.w	r3, [fp], #28
 8013036:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801303a:	4680      	mov	r8, r0
 801303c:	460c      	mov	r4, r1
 801303e:	465e      	mov	r6, fp
 8013040:	46aa      	mov	sl, r5
 8013042:	46a9      	mov	r9, r5
 8013044:	9501      	str	r5, [sp, #4]
 8013046:	68a2      	ldr	r2, [r4, #8]
 8013048:	b152      	cbz	r2, 8013060 <_scanf_float+0x60>
 801304a:	683b      	ldr	r3, [r7, #0]
 801304c:	781b      	ldrb	r3, [r3, #0]
 801304e:	2b4e      	cmp	r3, #78	; 0x4e
 8013050:	d864      	bhi.n	801311c <_scanf_float+0x11c>
 8013052:	2b40      	cmp	r3, #64	; 0x40
 8013054:	d83c      	bhi.n	80130d0 <_scanf_float+0xd0>
 8013056:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801305a:	b2c8      	uxtb	r0, r1
 801305c:	280e      	cmp	r0, #14
 801305e:	d93a      	bls.n	80130d6 <_scanf_float+0xd6>
 8013060:	f1b9 0f00 	cmp.w	r9, #0
 8013064:	d003      	beq.n	801306e <_scanf_float+0x6e>
 8013066:	6823      	ldr	r3, [r4, #0]
 8013068:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801306c:	6023      	str	r3, [r4, #0]
 801306e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013072:	f1ba 0f01 	cmp.w	sl, #1
 8013076:	f200 8113 	bhi.w	80132a0 <_scanf_float+0x2a0>
 801307a:	455e      	cmp	r6, fp
 801307c:	f200 8105 	bhi.w	801328a <_scanf_float+0x28a>
 8013080:	2501      	movs	r5, #1
 8013082:	4628      	mov	r0, r5
 8013084:	b007      	add	sp, #28
 8013086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801308a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801308e:	2a0d      	cmp	r2, #13
 8013090:	d8e6      	bhi.n	8013060 <_scanf_float+0x60>
 8013092:	a101      	add	r1, pc, #4	; (adr r1, 8013098 <_scanf_float+0x98>)
 8013094:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8013098:	080131d7 	.word	0x080131d7
 801309c:	08013061 	.word	0x08013061
 80130a0:	08013061 	.word	0x08013061
 80130a4:	08013061 	.word	0x08013061
 80130a8:	08013237 	.word	0x08013237
 80130ac:	0801320f 	.word	0x0801320f
 80130b0:	08013061 	.word	0x08013061
 80130b4:	08013061 	.word	0x08013061
 80130b8:	080131e5 	.word	0x080131e5
 80130bc:	08013061 	.word	0x08013061
 80130c0:	08013061 	.word	0x08013061
 80130c4:	08013061 	.word	0x08013061
 80130c8:	08013061 	.word	0x08013061
 80130cc:	0801319d 	.word	0x0801319d
 80130d0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80130d4:	e7db      	b.n	801308e <_scanf_float+0x8e>
 80130d6:	290e      	cmp	r1, #14
 80130d8:	d8c2      	bhi.n	8013060 <_scanf_float+0x60>
 80130da:	a001      	add	r0, pc, #4	; (adr r0, 80130e0 <_scanf_float+0xe0>)
 80130dc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80130e0:	0801318f 	.word	0x0801318f
 80130e4:	08013061 	.word	0x08013061
 80130e8:	0801318f 	.word	0x0801318f
 80130ec:	08013223 	.word	0x08013223
 80130f0:	08013061 	.word	0x08013061
 80130f4:	0801313d 	.word	0x0801313d
 80130f8:	08013179 	.word	0x08013179
 80130fc:	08013179 	.word	0x08013179
 8013100:	08013179 	.word	0x08013179
 8013104:	08013179 	.word	0x08013179
 8013108:	08013179 	.word	0x08013179
 801310c:	08013179 	.word	0x08013179
 8013110:	08013179 	.word	0x08013179
 8013114:	08013179 	.word	0x08013179
 8013118:	08013179 	.word	0x08013179
 801311c:	2b6e      	cmp	r3, #110	; 0x6e
 801311e:	d809      	bhi.n	8013134 <_scanf_float+0x134>
 8013120:	2b60      	cmp	r3, #96	; 0x60
 8013122:	d8b2      	bhi.n	801308a <_scanf_float+0x8a>
 8013124:	2b54      	cmp	r3, #84	; 0x54
 8013126:	d077      	beq.n	8013218 <_scanf_float+0x218>
 8013128:	2b59      	cmp	r3, #89	; 0x59
 801312a:	d199      	bne.n	8013060 <_scanf_float+0x60>
 801312c:	2d07      	cmp	r5, #7
 801312e:	d197      	bne.n	8013060 <_scanf_float+0x60>
 8013130:	2508      	movs	r5, #8
 8013132:	e029      	b.n	8013188 <_scanf_float+0x188>
 8013134:	2b74      	cmp	r3, #116	; 0x74
 8013136:	d06f      	beq.n	8013218 <_scanf_float+0x218>
 8013138:	2b79      	cmp	r3, #121	; 0x79
 801313a:	e7f6      	b.n	801312a <_scanf_float+0x12a>
 801313c:	6821      	ldr	r1, [r4, #0]
 801313e:	05c8      	lsls	r0, r1, #23
 8013140:	d51a      	bpl.n	8013178 <_scanf_float+0x178>
 8013142:	9b02      	ldr	r3, [sp, #8]
 8013144:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8013148:	6021      	str	r1, [r4, #0]
 801314a:	f109 0901 	add.w	r9, r9, #1
 801314e:	b11b      	cbz	r3, 8013158 <_scanf_float+0x158>
 8013150:	3b01      	subs	r3, #1
 8013152:	3201      	adds	r2, #1
 8013154:	9302      	str	r3, [sp, #8]
 8013156:	60a2      	str	r2, [r4, #8]
 8013158:	68a3      	ldr	r3, [r4, #8]
 801315a:	3b01      	subs	r3, #1
 801315c:	60a3      	str	r3, [r4, #8]
 801315e:	6923      	ldr	r3, [r4, #16]
 8013160:	3301      	adds	r3, #1
 8013162:	6123      	str	r3, [r4, #16]
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	3b01      	subs	r3, #1
 8013168:	2b00      	cmp	r3, #0
 801316a:	607b      	str	r3, [r7, #4]
 801316c:	f340 8084 	ble.w	8013278 <_scanf_float+0x278>
 8013170:	683b      	ldr	r3, [r7, #0]
 8013172:	3301      	adds	r3, #1
 8013174:	603b      	str	r3, [r7, #0]
 8013176:	e766      	b.n	8013046 <_scanf_float+0x46>
 8013178:	eb1a 0f05 	cmn.w	sl, r5
 801317c:	f47f af70 	bne.w	8013060 <_scanf_float+0x60>
 8013180:	6822      	ldr	r2, [r4, #0]
 8013182:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8013186:	6022      	str	r2, [r4, #0]
 8013188:	f806 3b01 	strb.w	r3, [r6], #1
 801318c:	e7e4      	b.n	8013158 <_scanf_float+0x158>
 801318e:	6822      	ldr	r2, [r4, #0]
 8013190:	0610      	lsls	r0, r2, #24
 8013192:	f57f af65 	bpl.w	8013060 <_scanf_float+0x60>
 8013196:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801319a:	e7f4      	b.n	8013186 <_scanf_float+0x186>
 801319c:	f1ba 0f00 	cmp.w	sl, #0
 80131a0:	d10e      	bne.n	80131c0 <_scanf_float+0x1c0>
 80131a2:	f1b9 0f00 	cmp.w	r9, #0
 80131a6:	d10e      	bne.n	80131c6 <_scanf_float+0x1c6>
 80131a8:	6822      	ldr	r2, [r4, #0]
 80131aa:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80131ae:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80131b2:	d108      	bne.n	80131c6 <_scanf_float+0x1c6>
 80131b4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80131b8:	6022      	str	r2, [r4, #0]
 80131ba:	f04f 0a01 	mov.w	sl, #1
 80131be:	e7e3      	b.n	8013188 <_scanf_float+0x188>
 80131c0:	f1ba 0f02 	cmp.w	sl, #2
 80131c4:	d055      	beq.n	8013272 <_scanf_float+0x272>
 80131c6:	2d01      	cmp	r5, #1
 80131c8:	d002      	beq.n	80131d0 <_scanf_float+0x1d0>
 80131ca:	2d04      	cmp	r5, #4
 80131cc:	f47f af48 	bne.w	8013060 <_scanf_float+0x60>
 80131d0:	3501      	adds	r5, #1
 80131d2:	b2ed      	uxtb	r5, r5
 80131d4:	e7d8      	b.n	8013188 <_scanf_float+0x188>
 80131d6:	f1ba 0f01 	cmp.w	sl, #1
 80131da:	f47f af41 	bne.w	8013060 <_scanf_float+0x60>
 80131de:	f04f 0a02 	mov.w	sl, #2
 80131e2:	e7d1      	b.n	8013188 <_scanf_float+0x188>
 80131e4:	b97d      	cbnz	r5, 8013206 <_scanf_float+0x206>
 80131e6:	f1b9 0f00 	cmp.w	r9, #0
 80131ea:	f47f af3c 	bne.w	8013066 <_scanf_float+0x66>
 80131ee:	6822      	ldr	r2, [r4, #0]
 80131f0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80131f4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80131f8:	f47f af39 	bne.w	801306e <_scanf_float+0x6e>
 80131fc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8013200:	6022      	str	r2, [r4, #0]
 8013202:	2501      	movs	r5, #1
 8013204:	e7c0      	b.n	8013188 <_scanf_float+0x188>
 8013206:	2d03      	cmp	r5, #3
 8013208:	d0e2      	beq.n	80131d0 <_scanf_float+0x1d0>
 801320a:	2d05      	cmp	r5, #5
 801320c:	e7de      	b.n	80131cc <_scanf_float+0x1cc>
 801320e:	2d02      	cmp	r5, #2
 8013210:	f47f af26 	bne.w	8013060 <_scanf_float+0x60>
 8013214:	2503      	movs	r5, #3
 8013216:	e7b7      	b.n	8013188 <_scanf_float+0x188>
 8013218:	2d06      	cmp	r5, #6
 801321a:	f47f af21 	bne.w	8013060 <_scanf_float+0x60>
 801321e:	2507      	movs	r5, #7
 8013220:	e7b2      	b.n	8013188 <_scanf_float+0x188>
 8013222:	6822      	ldr	r2, [r4, #0]
 8013224:	0591      	lsls	r1, r2, #22
 8013226:	f57f af1b 	bpl.w	8013060 <_scanf_float+0x60>
 801322a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801322e:	6022      	str	r2, [r4, #0]
 8013230:	f8cd 9004 	str.w	r9, [sp, #4]
 8013234:	e7a8      	b.n	8013188 <_scanf_float+0x188>
 8013236:	6822      	ldr	r2, [r4, #0]
 8013238:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801323c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8013240:	d006      	beq.n	8013250 <_scanf_float+0x250>
 8013242:	0550      	lsls	r0, r2, #21
 8013244:	f57f af0c 	bpl.w	8013060 <_scanf_float+0x60>
 8013248:	f1b9 0f00 	cmp.w	r9, #0
 801324c:	f43f af0f 	beq.w	801306e <_scanf_float+0x6e>
 8013250:	0591      	lsls	r1, r2, #22
 8013252:	bf58      	it	pl
 8013254:	9901      	ldrpl	r1, [sp, #4]
 8013256:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801325a:	bf58      	it	pl
 801325c:	eba9 0101 	subpl.w	r1, r9, r1
 8013260:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8013264:	bf58      	it	pl
 8013266:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801326a:	6022      	str	r2, [r4, #0]
 801326c:	f04f 0900 	mov.w	r9, #0
 8013270:	e78a      	b.n	8013188 <_scanf_float+0x188>
 8013272:	f04f 0a03 	mov.w	sl, #3
 8013276:	e787      	b.n	8013188 <_scanf_float+0x188>
 8013278:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801327c:	4639      	mov	r1, r7
 801327e:	4640      	mov	r0, r8
 8013280:	4798      	blx	r3
 8013282:	2800      	cmp	r0, #0
 8013284:	f43f aedf 	beq.w	8013046 <_scanf_float+0x46>
 8013288:	e6ea      	b.n	8013060 <_scanf_float+0x60>
 801328a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801328e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013292:	463a      	mov	r2, r7
 8013294:	4640      	mov	r0, r8
 8013296:	4798      	blx	r3
 8013298:	6923      	ldr	r3, [r4, #16]
 801329a:	3b01      	subs	r3, #1
 801329c:	6123      	str	r3, [r4, #16]
 801329e:	e6ec      	b.n	801307a <_scanf_float+0x7a>
 80132a0:	1e6b      	subs	r3, r5, #1
 80132a2:	2b06      	cmp	r3, #6
 80132a4:	d825      	bhi.n	80132f2 <_scanf_float+0x2f2>
 80132a6:	2d02      	cmp	r5, #2
 80132a8:	d836      	bhi.n	8013318 <_scanf_float+0x318>
 80132aa:	455e      	cmp	r6, fp
 80132ac:	f67f aee8 	bls.w	8013080 <_scanf_float+0x80>
 80132b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80132b4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80132b8:	463a      	mov	r2, r7
 80132ba:	4640      	mov	r0, r8
 80132bc:	4798      	blx	r3
 80132be:	6923      	ldr	r3, [r4, #16]
 80132c0:	3b01      	subs	r3, #1
 80132c2:	6123      	str	r3, [r4, #16]
 80132c4:	e7f1      	b.n	80132aa <_scanf_float+0x2aa>
 80132c6:	9802      	ldr	r0, [sp, #8]
 80132c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80132cc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80132d0:	9002      	str	r0, [sp, #8]
 80132d2:	463a      	mov	r2, r7
 80132d4:	4640      	mov	r0, r8
 80132d6:	4798      	blx	r3
 80132d8:	6923      	ldr	r3, [r4, #16]
 80132da:	3b01      	subs	r3, #1
 80132dc:	6123      	str	r3, [r4, #16]
 80132de:	f10a 3aff 	add.w	sl, sl, #4294967295
 80132e2:	fa5f fa8a 	uxtb.w	sl, sl
 80132e6:	f1ba 0f02 	cmp.w	sl, #2
 80132ea:	d1ec      	bne.n	80132c6 <_scanf_float+0x2c6>
 80132ec:	3d03      	subs	r5, #3
 80132ee:	b2ed      	uxtb	r5, r5
 80132f0:	1b76      	subs	r6, r6, r5
 80132f2:	6823      	ldr	r3, [r4, #0]
 80132f4:	05da      	lsls	r2, r3, #23
 80132f6:	d52f      	bpl.n	8013358 <_scanf_float+0x358>
 80132f8:	055b      	lsls	r3, r3, #21
 80132fa:	d510      	bpl.n	801331e <_scanf_float+0x31e>
 80132fc:	455e      	cmp	r6, fp
 80132fe:	f67f aebf 	bls.w	8013080 <_scanf_float+0x80>
 8013302:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013306:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801330a:	463a      	mov	r2, r7
 801330c:	4640      	mov	r0, r8
 801330e:	4798      	blx	r3
 8013310:	6923      	ldr	r3, [r4, #16]
 8013312:	3b01      	subs	r3, #1
 8013314:	6123      	str	r3, [r4, #16]
 8013316:	e7f1      	b.n	80132fc <_scanf_float+0x2fc>
 8013318:	46aa      	mov	sl, r5
 801331a:	9602      	str	r6, [sp, #8]
 801331c:	e7df      	b.n	80132de <_scanf_float+0x2de>
 801331e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8013322:	6923      	ldr	r3, [r4, #16]
 8013324:	2965      	cmp	r1, #101	; 0x65
 8013326:	f103 33ff 	add.w	r3, r3, #4294967295
 801332a:	f106 35ff 	add.w	r5, r6, #4294967295
 801332e:	6123      	str	r3, [r4, #16]
 8013330:	d00c      	beq.n	801334c <_scanf_float+0x34c>
 8013332:	2945      	cmp	r1, #69	; 0x45
 8013334:	d00a      	beq.n	801334c <_scanf_float+0x34c>
 8013336:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801333a:	463a      	mov	r2, r7
 801333c:	4640      	mov	r0, r8
 801333e:	4798      	blx	r3
 8013340:	6923      	ldr	r3, [r4, #16]
 8013342:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8013346:	3b01      	subs	r3, #1
 8013348:	1eb5      	subs	r5, r6, #2
 801334a:	6123      	str	r3, [r4, #16]
 801334c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013350:	463a      	mov	r2, r7
 8013352:	4640      	mov	r0, r8
 8013354:	4798      	blx	r3
 8013356:	462e      	mov	r6, r5
 8013358:	6825      	ldr	r5, [r4, #0]
 801335a:	f015 0510 	ands.w	r5, r5, #16
 801335e:	d159      	bne.n	8013414 <_scanf_float+0x414>
 8013360:	7035      	strb	r5, [r6, #0]
 8013362:	6823      	ldr	r3, [r4, #0]
 8013364:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8013368:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801336c:	d11b      	bne.n	80133a6 <_scanf_float+0x3a6>
 801336e:	9b01      	ldr	r3, [sp, #4]
 8013370:	454b      	cmp	r3, r9
 8013372:	eba3 0209 	sub.w	r2, r3, r9
 8013376:	d123      	bne.n	80133c0 <_scanf_float+0x3c0>
 8013378:	2200      	movs	r2, #0
 801337a:	4659      	mov	r1, fp
 801337c:	4640      	mov	r0, r8
 801337e:	f000 ff21 	bl	80141c4 <_strtod_r>
 8013382:	6822      	ldr	r2, [r4, #0]
 8013384:	9b03      	ldr	r3, [sp, #12]
 8013386:	f012 0f02 	tst.w	r2, #2
 801338a:	ec57 6b10 	vmov	r6, r7, d0
 801338e:	681b      	ldr	r3, [r3, #0]
 8013390:	d021      	beq.n	80133d6 <_scanf_float+0x3d6>
 8013392:	9903      	ldr	r1, [sp, #12]
 8013394:	1d1a      	adds	r2, r3, #4
 8013396:	600a      	str	r2, [r1, #0]
 8013398:	681b      	ldr	r3, [r3, #0]
 801339a:	e9c3 6700 	strd	r6, r7, [r3]
 801339e:	68e3      	ldr	r3, [r4, #12]
 80133a0:	3301      	adds	r3, #1
 80133a2:	60e3      	str	r3, [r4, #12]
 80133a4:	e66d      	b.n	8013082 <_scanf_float+0x82>
 80133a6:	9b04      	ldr	r3, [sp, #16]
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	d0e5      	beq.n	8013378 <_scanf_float+0x378>
 80133ac:	9905      	ldr	r1, [sp, #20]
 80133ae:	230a      	movs	r3, #10
 80133b0:	462a      	mov	r2, r5
 80133b2:	3101      	adds	r1, #1
 80133b4:	4640      	mov	r0, r8
 80133b6:	f000 ffe9 	bl	801438c <_strtol_r>
 80133ba:	9b04      	ldr	r3, [sp, #16]
 80133bc:	9e05      	ldr	r6, [sp, #20]
 80133be:	1ac2      	subs	r2, r0, r3
 80133c0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80133c4:	429e      	cmp	r6, r3
 80133c6:	bf28      	it	cs
 80133c8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80133cc:	4912      	ldr	r1, [pc, #72]	; (8013418 <_scanf_float+0x418>)
 80133ce:	4630      	mov	r0, r6
 80133d0:	f000 f83c 	bl	801344c <siprintf>
 80133d4:	e7d0      	b.n	8013378 <_scanf_float+0x378>
 80133d6:	9903      	ldr	r1, [sp, #12]
 80133d8:	f012 0f04 	tst.w	r2, #4
 80133dc:	f103 0204 	add.w	r2, r3, #4
 80133e0:	600a      	str	r2, [r1, #0]
 80133e2:	d1d9      	bne.n	8013398 <_scanf_float+0x398>
 80133e4:	f8d3 8000 	ldr.w	r8, [r3]
 80133e8:	ee10 2a10 	vmov	r2, s0
 80133ec:	ee10 0a10 	vmov	r0, s0
 80133f0:	463b      	mov	r3, r7
 80133f2:	4639      	mov	r1, r7
 80133f4:	f7ed fbca 	bl	8000b8c <__aeabi_dcmpun>
 80133f8:	b128      	cbz	r0, 8013406 <_scanf_float+0x406>
 80133fa:	4808      	ldr	r0, [pc, #32]	; (801341c <_scanf_float+0x41c>)
 80133fc:	f000 f820 	bl	8013440 <nanf>
 8013400:	ed88 0a00 	vstr	s0, [r8]
 8013404:	e7cb      	b.n	801339e <_scanf_float+0x39e>
 8013406:	4630      	mov	r0, r6
 8013408:	4639      	mov	r1, r7
 801340a:	f7ed fc1d 	bl	8000c48 <__aeabi_d2f>
 801340e:	f8c8 0000 	str.w	r0, [r8]
 8013412:	e7c4      	b.n	801339e <_scanf_float+0x39e>
 8013414:	2500      	movs	r5, #0
 8013416:	e634      	b.n	8013082 <_scanf_float+0x82>
 8013418:	0805d606 	.word	0x0805d606
 801341c:	0805d70f 	.word	0x0805d70f

08013420 <_sbrk_r>:
 8013420:	b538      	push	{r3, r4, r5, lr}
 8013422:	4d06      	ldr	r5, [pc, #24]	; (801343c <_sbrk_r+0x1c>)
 8013424:	2300      	movs	r3, #0
 8013426:	4604      	mov	r4, r0
 8013428:	4608      	mov	r0, r1
 801342a:	602b      	str	r3, [r5, #0]
 801342c:	f7f0 fe3a 	bl	80040a4 <_sbrk>
 8013430:	1c43      	adds	r3, r0, #1
 8013432:	d102      	bne.n	801343a <_sbrk_r+0x1a>
 8013434:	682b      	ldr	r3, [r5, #0]
 8013436:	b103      	cbz	r3, 801343a <_sbrk_r+0x1a>
 8013438:	6023      	str	r3, [r4, #0]
 801343a:	bd38      	pop	{r3, r4, r5, pc}
 801343c:	2000c66c 	.word	0x2000c66c

08013440 <nanf>:
 8013440:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013448 <nanf+0x8>
 8013444:	4770      	bx	lr
 8013446:	bf00      	nop
 8013448:	7fc00000 	.word	0x7fc00000

0801344c <siprintf>:
 801344c:	b40e      	push	{r1, r2, r3}
 801344e:	b500      	push	{lr}
 8013450:	b09c      	sub	sp, #112	; 0x70
 8013452:	ab1d      	add	r3, sp, #116	; 0x74
 8013454:	9002      	str	r0, [sp, #8]
 8013456:	9006      	str	r0, [sp, #24]
 8013458:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801345c:	4809      	ldr	r0, [pc, #36]	; (8013484 <siprintf+0x38>)
 801345e:	9107      	str	r1, [sp, #28]
 8013460:	9104      	str	r1, [sp, #16]
 8013462:	4909      	ldr	r1, [pc, #36]	; (8013488 <siprintf+0x3c>)
 8013464:	f853 2b04 	ldr.w	r2, [r3], #4
 8013468:	9105      	str	r1, [sp, #20]
 801346a:	6800      	ldr	r0, [r0, #0]
 801346c:	9301      	str	r3, [sp, #4]
 801346e:	a902      	add	r1, sp, #8
 8013470:	f002 ff60 	bl	8016334 <_svfiprintf_r>
 8013474:	9b02      	ldr	r3, [sp, #8]
 8013476:	2200      	movs	r2, #0
 8013478:	701a      	strb	r2, [r3, #0]
 801347a:	b01c      	add	sp, #112	; 0x70
 801347c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013480:	b003      	add	sp, #12
 8013482:	4770      	bx	lr
 8013484:	2000145c 	.word	0x2000145c
 8013488:	ffff0208 	.word	0xffff0208

0801348c <siscanf>:
 801348c:	b40e      	push	{r1, r2, r3}
 801348e:	b510      	push	{r4, lr}
 8013490:	b09f      	sub	sp, #124	; 0x7c
 8013492:	ac21      	add	r4, sp, #132	; 0x84
 8013494:	f44f 7101 	mov.w	r1, #516	; 0x204
 8013498:	f854 2b04 	ldr.w	r2, [r4], #4
 801349c:	9201      	str	r2, [sp, #4]
 801349e:	f8ad 101c 	strh.w	r1, [sp, #28]
 80134a2:	9004      	str	r0, [sp, #16]
 80134a4:	9008      	str	r0, [sp, #32]
 80134a6:	f7ec febd 	bl	8000224 <strlen>
 80134aa:	4b0c      	ldr	r3, [pc, #48]	; (80134dc <siscanf+0x50>)
 80134ac:	9005      	str	r0, [sp, #20]
 80134ae:	9009      	str	r0, [sp, #36]	; 0x24
 80134b0:	930d      	str	r3, [sp, #52]	; 0x34
 80134b2:	480b      	ldr	r0, [pc, #44]	; (80134e0 <siscanf+0x54>)
 80134b4:	9a01      	ldr	r2, [sp, #4]
 80134b6:	6800      	ldr	r0, [r0, #0]
 80134b8:	9403      	str	r4, [sp, #12]
 80134ba:	2300      	movs	r3, #0
 80134bc:	9311      	str	r3, [sp, #68]	; 0x44
 80134be:	9316      	str	r3, [sp, #88]	; 0x58
 80134c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80134c4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80134c8:	a904      	add	r1, sp, #16
 80134ca:	4623      	mov	r3, r4
 80134cc:	f003 f88c 	bl	80165e8 <__ssvfiscanf_r>
 80134d0:	b01f      	add	sp, #124	; 0x7c
 80134d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80134d6:	b003      	add	sp, #12
 80134d8:	4770      	bx	lr
 80134da:	bf00      	nop
 80134dc:	08013507 	.word	0x08013507
 80134e0:	2000145c 	.word	0x2000145c

080134e4 <__sread>:
 80134e4:	b510      	push	{r4, lr}
 80134e6:	460c      	mov	r4, r1
 80134e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80134ec:	f003 fca0 	bl	8016e30 <_read_r>
 80134f0:	2800      	cmp	r0, #0
 80134f2:	bfab      	itete	ge
 80134f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80134f6:	89a3      	ldrhlt	r3, [r4, #12]
 80134f8:	181b      	addge	r3, r3, r0
 80134fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80134fe:	bfac      	ite	ge
 8013500:	6563      	strge	r3, [r4, #84]	; 0x54
 8013502:	81a3      	strhlt	r3, [r4, #12]
 8013504:	bd10      	pop	{r4, pc}

08013506 <__seofread>:
 8013506:	2000      	movs	r0, #0
 8013508:	4770      	bx	lr

0801350a <__swrite>:
 801350a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801350e:	461f      	mov	r7, r3
 8013510:	898b      	ldrh	r3, [r1, #12]
 8013512:	05db      	lsls	r3, r3, #23
 8013514:	4605      	mov	r5, r0
 8013516:	460c      	mov	r4, r1
 8013518:	4616      	mov	r6, r2
 801351a:	d505      	bpl.n	8013528 <__swrite+0x1e>
 801351c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013520:	2302      	movs	r3, #2
 8013522:	2200      	movs	r2, #0
 8013524:	f002 f974 	bl	8015810 <_lseek_r>
 8013528:	89a3      	ldrh	r3, [r4, #12]
 801352a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801352e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013532:	81a3      	strh	r3, [r4, #12]
 8013534:	4632      	mov	r2, r6
 8013536:	463b      	mov	r3, r7
 8013538:	4628      	mov	r0, r5
 801353a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801353e:	f000 bf27 	b.w	8014390 <_write_r>

08013542 <__sseek>:
 8013542:	b510      	push	{r4, lr}
 8013544:	460c      	mov	r4, r1
 8013546:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801354a:	f002 f961 	bl	8015810 <_lseek_r>
 801354e:	1c43      	adds	r3, r0, #1
 8013550:	89a3      	ldrh	r3, [r4, #12]
 8013552:	bf15      	itete	ne
 8013554:	6560      	strne	r0, [r4, #84]	; 0x54
 8013556:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801355a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801355e:	81a3      	strheq	r3, [r4, #12]
 8013560:	bf18      	it	ne
 8013562:	81a3      	strhne	r3, [r4, #12]
 8013564:	bd10      	pop	{r4, pc}

08013566 <__sclose>:
 8013566:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801356a:	f000 bf41 	b.w	80143f0 <_close_r>

0801356e <strcpy>:
 801356e:	4603      	mov	r3, r0
 8013570:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013574:	f803 2b01 	strb.w	r2, [r3], #1
 8013578:	2a00      	cmp	r2, #0
 801357a:	d1f9      	bne.n	8013570 <strcpy+0x2>
 801357c:	4770      	bx	lr

0801357e <sulp>:
 801357e:	b570      	push	{r4, r5, r6, lr}
 8013580:	4604      	mov	r4, r0
 8013582:	460d      	mov	r5, r1
 8013584:	ec45 4b10 	vmov	d0, r4, r5
 8013588:	4616      	mov	r6, r2
 801358a:	f002 fce3 	bl	8015f54 <__ulp>
 801358e:	ec51 0b10 	vmov	r0, r1, d0
 8013592:	b17e      	cbz	r6, 80135b4 <sulp+0x36>
 8013594:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8013598:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801359c:	2b00      	cmp	r3, #0
 801359e:	dd09      	ble.n	80135b4 <sulp+0x36>
 80135a0:	051b      	lsls	r3, r3, #20
 80135a2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80135a6:	2400      	movs	r4, #0
 80135a8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80135ac:	4622      	mov	r2, r4
 80135ae:	462b      	mov	r3, r5
 80135b0:	f7ed f852 	bl	8000658 <__aeabi_dmul>
 80135b4:	bd70      	pop	{r4, r5, r6, pc}
	...

080135b8 <_strtod_l>:
 80135b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135bc:	ed2d 8b02 	vpush	{d8}
 80135c0:	b09d      	sub	sp, #116	; 0x74
 80135c2:	461f      	mov	r7, r3
 80135c4:	2300      	movs	r3, #0
 80135c6:	9318      	str	r3, [sp, #96]	; 0x60
 80135c8:	4ba2      	ldr	r3, [pc, #648]	; (8013854 <_strtod_l+0x29c>)
 80135ca:	9213      	str	r2, [sp, #76]	; 0x4c
 80135cc:	681b      	ldr	r3, [r3, #0]
 80135ce:	9305      	str	r3, [sp, #20]
 80135d0:	4604      	mov	r4, r0
 80135d2:	4618      	mov	r0, r3
 80135d4:	4688      	mov	r8, r1
 80135d6:	f7ec fe25 	bl	8000224 <strlen>
 80135da:	f04f 0a00 	mov.w	sl, #0
 80135de:	4605      	mov	r5, r0
 80135e0:	f04f 0b00 	mov.w	fp, #0
 80135e4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80135e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80135ea:	781a      	ldrb	r2, [r3, #0]
 80135ec:	2a2b      	cmp	r2, #43	; 0x2b
 80135ee:	d04e      	beq.n	801368e <_strtod_l+0xd6>
 80135f0:	d83b      	bhi.n	801366a <_strtod_l+0xb2>
 80135f2:	2a0d      	cmp	r2, #13
 80135f4:	d834      	bhi.n	8013660 <_strtod_l+0xa8>
 80135f6:	2a08      	cmp	r2, #8
 80135f8:	d834      	bhi.n	8013664 <_strtod_l+0xac>
 80135fa:	2a00      	cmp	r2, #0
 80135fc:	d03e      	beq.n	801367c <_strtod_l+0xc4>
 80135fe:	2300      	movs	r3, #0
 8013600:	930a      	str	r3, [sp, #40]	; 0x28
 8013602:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8013604:	7833      	ldrb	r3, [r6, #0]
 8013606:	2b30      	cmp	r3, #48	; 0x30
 8013608:	f040 80b0 	bne.w	801376c <_strtod_l+0x1b4>
 801360c:	7873      	ldrb	r3, [r6, #1]
 801360e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8013612:	2b58      	cmp	r3, #88	; 0x58
 8013614:	d168      	bne.n	80136e8 <_strtod_l+0x130>
 8013616:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013618:	9301      	str	r3, [sp, #4]
 801361a:	ab18      	add	r3, sp, #96	; 0x60
 801361c:	9702      	str	r7, [sp, #8]
 801361e:	9300      	str	r3, [sp, #0]
 8013620:	4a8d      	ldr	r2, [pc, #564]	; (8013858 <_strtod_l+0x2a0>)
 8013622:	ab19      	add	r3, sp, #100	; 0x64
 8013624:	a917      	add	r1, sp, #92	; 0x5c
 8013626:	4620      	mov	r0, r4
 8013628:	f001 fde6 	bl	80151f8 <__gethex>
 801362c:	f010 0707 	ands.w	r7, r0, #7
 8013630:	4605      	mov	r5, r0
 8013632:	d005      	beq.n	8013640 <_strtod_l+0x88>
 8013634:	2f06      	cmp	r7, #6
 8013636:	d12c      	bne.n	8013692 <_strtod_l+0xda>
 8013638:	3601      	adds	r6, #1
 801363a:	2300      	movs	r3, #0
 801363c:	9617      	str	r6, [sp, #92]	; 0x5c
 801363e:	930a      	str	r3, [sp, #40]	; 0x28
 8013640:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013642:	2b00      	cmp	r3, #0
 8013644:	f040 8590 	bne.w	8014168 <_strtod_l+0xbb0>
 8013648:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801364a:	b1eb      	cbz	r3, 8013688 <_strtod_l+0xd0>
 801364c:	4652      	mov	r2, sl
 801364e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8013652:	ec43 2b10 	vmov	d0, r2, r3
 8013656:	b01d      	add	sp, #116	; 0x74
 8013658:	ecbd 8b02 	vpop	{d8}
 801365c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013660:	2a20      	cmp	r2, #32
 8013662:	d1cc      	bne.n	80135fe <_strtod_l+0x46>
 8013664:	3301      	adds	r3, #1
 8013666:	9317      	str	r3, [sp, #92]	; 0x5c
 8013668:	e7be      	b.n	80135e8 <_strtod_l+0x30>
 801366a:	2a2d      	cmp	r2, #45	; 0x2d
 801366c:	d1c7      	bne.n	80135fe <_strtod_l+0x46>
 801366e:	2201      	movs	r2, #1
 8013670:	920a      	str	r2, [sp, #40]	; 0x28
 8013672:	1c5a      	adds	r2, r3, #1
 8013674:	9217      	str	r2, [sp, #92]	; 0x5c
 8013676:	785b      	ldrb	r3, [r3, #1]
 8013678:	2b00      	cmp	r3, #0
 801367a:	d1c2      	bne.n	8013602 <_strtod_l+0x4a>
 801367c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801367e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8013682:	2b00      	cmp	r3, #0
 8013684:	f040 856e 	bne.w	8014164 <_strtod_l+0xbac>
 8013688:	4652      	mov	r2, sl
 801368a:	465b      	mov	r3, fp
 801368c:	e7e1      	b.n	8013652 <_strtod_l+0x9a>
 801368e:	2200      	movs	r2, #0
 8013690:	e7ee      	b.n	8013670 <_strtod_l+0xb8>
 8013692:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013694:	b13a      	cbz	r2, 80136a6 <_strtod_l+0xee>
 8013696:	2135      	movs	r1, #53	; 0x35
 8013698:	a81a      	add	r0, sp, #104	; 0x68
 801369a:	f002 fd66 	bl	801616a <__copybits>
 801369e:	9918      	ldr	r1, [sp, #96]	; 0x60
 80136a0:	4620      	mov	r0, r4
 80136a2:	f002 f925 	bl	80158f0 <_Bfree>
 80136a6:	3f01      	subs	r7, #1
 80136a8:	2f04      	cmp	r7, #4
 80136aa:	d806      	bhi.n	80136ba <_strtod_l+0x102>
 80136ac:	e8df f007 	tbb	[pc, r7]
 80136b0:	1714030a 	.word	0x1714030a
 80136b4:	0a          	.byte	0x0a
 80136b5:	00          	.byte	0x00
 80136b6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80136ba:	0728      	lsls	r0, r5, #28
 80136bc:	d5c0      	bpl.n	8013640 <_strtod_l+0x88>
 80136be:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80136c2:	e7bd      	b.n	8013640 <_strtod_l+0x88>
 80136c4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80136c8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80136ca:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80136ce:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80136d2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80136d6:	e7f0      	b.n	80136ba <_strtod_l+0x102>
 80136d8:	f8df b180 	ldr.w	fp, [pc, #384]	; 801385c <_strtod_l+0x2a4>
 80136dc:	e7ed      	b.n	80136ba <_strtod_l+0x102>
 80136de:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80136e2:	f04f 3aff 	mov.w	sl, #4294967295
 80136e6:	e7e8      	b.n	80136ba <_strtod_l+0x102>
 80136e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80136ea:	1c5a      	adds	r2, r3, #1
 80136ec:	9217      	str	r2, [sp, #92]	; 0x5c
 80136ee:	785b      	ldrb	r3, [r3, #1]
 80136f0:	2b30      	cmp	r3, #48	; 0x30
 80136f2:	d0f9      	beq.n	80136e8 <_strtod_l+0x130>
 80136f4:	2b00      	cmp	r3, #0
 80136f6:	d0a3      	beq.n	8013640 <_strtod_l+0x88>
 80136f8:	2301      	movs	r3, #1
 80136fa:	f04f 0900 	mov.w	r9, #0
 80136fe:	9304      	str	r3, [sp, #16]
 8013700:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013702:	9308      	str	r3, [sp, #32]
 8013704:	f8cd 901c 	str.w	r9, [sp, #28]
 8013708:	464f      	mov	r7, r9
 801370a:	220a      	movs	r2, #10
 801370c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801370e:	7806      	ldrb	r6, [r0, #0]
 8013710:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8013714:	b2d9      	uxtb	r1, r3
 8013716:	2909      	cmp	r1, #9
 8013718:	d92a      	bls.n	8013770 <_strtod_l+0x1b8>
 801371a:	9905      	ldr	r1, [sp, #20]
 801371c:	462a      	mov	r2, r5
 801371e:	f003 fbdb 	bl	8016ed8 <strncmp>
 8013722:	b398      	cbz	r0, 801378c <_strtod_l+0x1d4>
 8013724:	2000      	movs	r0, #0
 8013726:	4632      	mov	r2, r6
 8013728:	463d      	mov	r5, r7
 801372a:	9005      	str	r0, [sp, #20]
 801372c:	4603      	mov	r3, r0
 801372e:	2a65      	cmp	r2, #101	; 0x65
 8013730:	d001      	beq.n	8013736 <_strtod_l+0x17e>
 8013732:	2a45      	cmp	r2, #69	; 0x45
 8013734:	d118      	bne.n	8013768 <_strtod_l+0x1b0>
 8013736:	b91d      	cbnz	r5, 8013740 <_strtod_l+0x188>
 8013738:	9a04      	ldr	r2, [sp, #16]
 801373a:	4302      	orrs	r2, r0
 801373c:	d09e      	beq.n	801367c <_strtod_l+0xc4>
 801373e:	2500      	movs	r5, #0
 8013740:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8013744:	f108 0201 	add.w	r2, r8, #1
 8013748:	9217      	str	r2, [sp, #92]	; 0x5c
 801374a:	f898 2001 	ldrb.w	r2, [r8, #1]
 801374e:	2a2b      	cmp	r2, #43	; 0x2b
 8013750:	d075      	beq.n	801383e <_strtod_l+0x286>
 8013752:	2a2d      	cmp	r2, #45	; 0x2d
 8013754:	d07b      	beq.n	801384e <_strtod_l+0x296>
 8013756:	f04f 0c00 	mov.w	ip, #0
 801375a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801375e:	2909      	cmp	r1, #9
 8013760:	f240 8082 	bls.w	8013868 <_strtod_l+0x2b0>
 8013764:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8013768:	2600      	movs	r6, #0
 801376a:	e09d      	b.n	80138a8 <_strtod_l+0x2f0>
 801376c:	2300      	movs	r3, #0
 801376e:	e7c4      	b.n	80136fa <_strtod_l+0x142>
 8013770:	2f08      	cmp	r7, #8
 8013772:	bfd8      	it	le
 8013774:	9907      	ldrle	r1, [sp, #28]
 8013776:	f100 0001 	add.w	r0, r0, #1
 801377a:	bfda      	itte	le
 801377c:	fb02 3301 	mlale	r3, r2, r1, r3
 8013780:	9307      	strle	r3, [sp, #28]
 8013782:	fb02 3909 	mlagt	r9, r2, r9, r3
 8013786:	3701      	adds	r7, #1
 8013788:	9017      	str	r0, [sp, #92]	; 0x5c
 801378a:	e7bf      	b.n	801370c <_strtod_l+0x154>
 801378c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801378e:	195a      	adds	r2, r3, r5
 8013790:	9217      	str	r2, [sp, #92]	; 0x5c
 8013792:	5d5a      	ldrb	r2, [r3, r5]
 8013794:	2f00      	cmp	r7, #0
 8013796:	d037      	beq.n	8013808 <_strtod_l+0x250>
 8013798:	9005      	str	r0, [sp, #20]
 801379a:	463d      	mov	r5, r7
 801379c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80137a0:	2b09      	cmp	r3, #9
 80137a2:	d912      	bls.n	80137ca <_strtod_l+0x212>
 80137a4:	2301      	movs	r3, #1
 80137a6:	e7c2      	b.n	801372e <_strtod_l+0x176>
 80137a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80137aa:	1c5a      	adds	r2, r3, #1
 80137ac:	9217      	str	r2, [sp, #92]	; 0x5c
 80137ae:	785a      	ldrb	r2, [r3, #1]
 80137b0:	3001      	adds	r0, #1
 80137b2:	2a30      	cmp	r2, #48	; 0x30
 80137b4:	d0f8      	beq.n	80137a8 <_strtod_l+0x1f0>
 80137b6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80137ba:	2b08      	cmp	r3, #8
 80137bc:	f200 84d9 	bhi.w	8014172 <_strtod_l+0xbba>
 80137c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80137c2:	9005      	str	r0, [sp, #20]
 80137c4:	2000      	movs	r0, #0
 80137c6:	9308      	str	r3, [sp, #32]
 80137c8:	4605      	mov	r5, r0
 80137ca:	3a30      	subs	r2, #48	; 0x30
 80137cc:	f100 0301 	add.w	r3, r0, #1
 80137d0:	d014      	beq.n	80137fc <_strtod_l+0x244>
 80137d2:	9905      	ldr	r1, [sp, #20]
 80137d4:	4419      	add	r1, r3
 80137d6:	9105      	str	r1, [sp, #20]
 80137d8:	462b      	mov	r3, r5
 80137da:	eb00 0e05 	add.w	lr, r0, r5
 80137de:	210a      	movs	r1, #10
 80137e0:	4573      	cmp	r3, lr
 80137e2:	d113      	bne.n	801380c <_strtod_l+0x254>
 80137e4:	182b      	adds	r3, r5, r0
 80137e6:	2b08      	cmp	r3, #8
 80137e8:	f105 0501 	add.w	r5, r5, #1
 80137ec:	4405      	add	r5, r0
 80137ee:	dc1c      	bgt.n	801382a <_strtod_l+0x272>
 80137f0:	9907      	ldr	r1, [sp, #28]
 80137f2:	230a      	movs	r3, #10
 80137f4:	fb03 2301 	mla	r3, r3, r1, r2
 80137f8:	9307      	str	r3, [sp, #28]
 80137fa:	2300      	movs	r3, #0
 80137fc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80137fe:	1c51      	adds	r1, r2, #1
 8013800:	9117      	str	r1, [sp, #92]	; 0x5c
 8013802:	7852      	ldrb	r2, [r2, #1]
 8013804:	4618      	mov	r0, r3
 8013806:	e7c9      	b.n	801379c <_strtod_l+0x1e4>
 8013808:	4638      	mov	r0, r7
 801380a:	e7d2      	b.n	80137b2 <_strtod_l+0x1fa>
 801380c:	2b08      	cmp	r3, #8
 801380e:	dc04      	bgt.n	801381a <_strtod_l+0x262>
 8013810:	9e07      	ldr	r6, [sp, #28]
 8013812:	434e      	muls	r6, r1
 8013814:	9607      	str	r6, [sp, #28]
 8013816:	3301      	adds	r3, #1
 8013818:	e7e2      	b.n	80137e0 <_strtod_l+0x228>
 801381a:	f103 0c01 	add.w	ip, r3, #1
 801381e:	f1bc 0f10 	cmp.w	ip, #16
 8013822:	bfd8      	it	le
 8013824:	fb01 f909 	mulle.w	r9, r1, r9
 8013828:	e7f5      	b.n	8013816 <_strtod_l+0x25e>
 801382a:	2d10      	cmp	r5, #16
 801382c:	bfdc      	itt	le
 801382e:	230a      	movle	r3, #10
 8013830:	fb03 2909 	mlale	r9, r3, r9, r2
 8013834:	e7e1      	b.n	80137fa <_strtod_l+0x242>
 8013836:	2300      	movs	r3, #0
 8013838:	9305      	str	r3, [sp, #20]
 801383a:	2301      	movs	r3, #1
 801383c:	e77c      	b.n	8013738 <_strtod_l+0x180>
 801383e:	f04f 0c00 	mov.w	ip, #0
 8013842:	f108 0202 	add.w	r2, r8, #2
 8013846:	9217      	str	r2, [sp, #92]	; 0x5c
 8013848:	f898 2002 	ldrb.w	r2, [r8, #2]
 801384c:	e785      	b.n	801375a <_strtod_l+0x1a2>
 801384e:	f04f 0c01 	mov.w	ip, #1
 8013852:	e7f6      	b.n	8013842 <_strtod_l+0x28a>
 8013854:	0805d8f0 	.word	0x0805d8f0
 8013858:	0805d60c 	.word	0x0805d60c
 801385c:	7ff00000 	.word	0x7ff00000
 8013860:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013862:	1c51      	adds	r1, r2, #1
 8013864:	9117      	str	r1, [sp, #92]	; 0x5c
 8013866:	7852      	ldrb	r2, [r2, #1]
 8013868:	2a30      	cmp	r2, #48	; 0x30
 801386a:	d0f9      	beq.n	8013860 <_strtod_l+0x2a8>
 801386c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8013870:	2908      	cmp	r1, #8
 8013872:	f63f af79 	bhi.w	8013768 <_strtod_l+0x1b0>
 8013876:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801387a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801387c:	9206      	str	r2, [sp, #24]
 801387e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013880:	1c51      	adds	r1, r2, #1
 8013882:	9117      	str	r1, [sp, #92]	; 0x5c
 8013884:	7852      	ldrb	r2, [r2, #1]
 8013886:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 801388a:	2e09      	cmp	r6, #9
 801388c:	d937      	bls.n	80138fe <_strtod_l+0x346>
 801388e:	9e06      	ldr	r6, [sp, #24]
 8013890:	1b89      	subs	r1, r1, r6
 8013892:	2908      	cmp	r1, #8
 8013894:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8013898:	dc02      	bgt.n	80138a0 <_strtod_l+0x2e8>
 801389a:	4576      	cmp	r6, lr
 801389c:	bfa8      	it	ge
 801389e:	4676      	movge	r6, lr
 80138a0:	f1bc 0f00 	cmp.w	ip, #0
 80138a4:	d000      	beq.n	80138a8 <_strtod_l+0x2f0>
 80138a6:	4276      	negs	r6, r6
 80138a8:	2d00      	cmp	r5, #0
 80138aa:	d14d      	bne.n	8013948 <_strtod_l+0x390>
 80138ac:	9904      	ldr	r1, [sp, #16]
 80138ae:	4301      	orrs	r1, r0
 80138b0:	f47f aec6 	bne.w	8013640 <_strtod_l+0x88>
 80138b4:	2b00      	cmp	r3, #0
 80138b6:	f47f aee1 	bne.w	801367c <_strtod_l+0xc4>
 80138ba:	2a69      	cmp	r2, #105	; 0x69
 80138bc:	d027      	beq.n	801390e <_strtod_l+0x356>
 80138be:	dc24      	bgt.n	801390a <_strtod_l+0x352>
 80138c0:	2a49      	cmp	r2, #73	; 0x49
 80138c2:	d024      	beq.n	801390e <_strtod_l+0x356>
 80138c4:	2a4e      	cmp	r2, #78	; 0x4e
 80138c6:	f47f aed9 	bne.w	801367c <_strtod_l+0xc4>
 80138ca:	499f      	ldr	r1, [pc, #636]	; (8013b48 <_strtod_l+0x590>)
 80138cc:	a817      	add	r0, sp, #92	; 0x5c
 80138ce:	f001 feeb 	bl	80156a8 <__match>
 80138d2:	2800      	cmp	r0, #0
 80138d4:	f43f aed2 	beq.w	801367c <_strtod_l+0xc4>
 80138d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80138da:	781b      	ldrb	r3, [r3, #0]
 80138dc:	2b28      	cmp	r3, #40	; 0x28
 80138de:	d12d      	bne.n	801393c <_strtod_l+0x384>
 80138e0:	499a      	ldr	r1, [pc, #616]	; (8013b4c <_strtod_l+0x594>)
 80138e2:	aa1a      	add	r2, sp, #104	; 0x68
 80138e4:	a817      	add	r0, sp, #92	; 0x5c
 80138e6:	f001 fef3 	bl	80156d0 <__hexnan>
 80138ea:	2805      	cmp	r0, #5
 80138ec:	d126      	bne.n	801393c <_strtod_l+0x384>
 80138ee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80138f0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80138f4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80138f8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80138fc:	e6a0      	b.n	8013640 <_strtod_l+0x88>
 80138fe:	210a      	movs	r1, #10
 8013900:	fb01 2e0e 	mla	lr, r1, lr, r2
 8013904:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8013908:	e7b9      	b.n	801387e <_strtod_l+0x2c6>
 801390a:	2a6e      	cmp	r2, #110	; 0x6e
 801390c:	e7db      	b.n	80138c6 <_strtod_l+0x30e>
 801390e:	4990      	ldr	r1, [pc, #576]	; (8013b50 <_strtod_l+0x598>)
 8013910:	a817      	add	r0, sp, #92	; 0x5c
 8013912:	f001 fec9 	bl	80156a8 <__match>
 8013916:	2800      	cmp	r0, #0
 8013918:	f43f aeb0 	beq.w	801367c <_strtod_l+0xc4>
 801391c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801391e:	498d      	ldr	r1, [pc, #564]	; (8013b54 <_strtod_l+0x59c>)
 8013920:	3b01      	subs	r3, #1
 8013922:	a817      	add	r0, sp, #92	; 0x5c
 8013924:	9317      	str	r3, [sp, #92]	; 0x5c
 8013926:	f001 febf 	bl	80156a8 <__match>
 801392a:	b910      	cbnz	r0, 8013932 <_strtod_l+0x37a>
 801392c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801392e:	3301      	adds	r3, #1
 8013930:	9317      	str	r3, [sp, #92]	; 0x5c
 8013932:	f8df b230 	ldr.w	fp, [pc, #560]	; 8013b64 <_strtod_l+0x5ac>
 8013936:	f04f 0a00 	mov.w	sl, #0
 801393a:	e681      	b.n	8013640 <_strtod_l+0x88>
 801393c:	4886      	ldr	r0, [pc, #536]	; (8013b58 <_strtod_l+0x5a0>)
 801393e:	f003 fa8b 	bl	8016e58 <nan>
 8013942:	ec5b ab10 	vmov	sl, fp, d0
 8013946:	e67b      	b.n	8013640 <_strtod_l+0x88>
 8013948:	9b05      	ldr	r3, [sp, #20]
 801394a:	9807      	ldr	r0, [sp, #28]
 801394c:	1af3      	subs	r3, r6, r3
 801394e:	2f00      	cmp	r7, #0
 8013950:	bf08      	it	eq
 8013952:	462f      	moveq	r7, r5
 8013954:	2d10      	cmp	r5, #16
 8013956:	9306      	str	r3, [sp, #24]
 8013958:	46a8      	mov	r8, r5
 801395a:	bfa8      	it	ge
 801395c:	f04f 0810 	movge.w	r8, #16
 8013960:	f7ec fe00 	bl	8000564 <__aeabi_ui2d>
 8013964:	2d09      	cmp	r5, #9
 8013966:	4682      	mov	sl, r0
 8013968:	468b      	mov	fp, r1
 801396a:	dd13      	ble.n	8013994 <_strtod_l+0x3dc>
 801396c:	4b7b      	ldr	r3, [pc, #492]	; (8013b5c <_strtod_l+0x5a4>)
 801396e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8013972:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8013976:	f7ec fe6f 	bl	8000658 <__aeabi_dmul>
 801397a:	4682      	mov	sl, r0
 801397c:	4648      	mov	r0, r9
 801397e:	468b      	mov	fp, r1
 8013980:	f7ec fdf0 	bl	8000564 <__aeabi_ui2d>
 8013984:	4602      	mov	r2, r0
 8013986:	460b      	mov	r3, r1
 8013988:	4650      	mov	r0, sl
 801398a:	4659      	mov	r1, fp
 801398c:	f7ec fcae 	bl	80002ec <__adddf3>
 8013990:	4682      	mov	sl, r0
 8013992:	468b      	mov	fp, r1
 8013994:	2d0f      	cmp	r5, #15
 8013996:	dc38      	bgt.n	8013a0a <_strtod_l+0x452>
 8013998:	9b06      	ldr	r3, [sp, #24]
 801399a:	2b00      	cmp	r3, #0
 801399c:	f43f ae50 	beq.w	8013640 <_strtod_l+0x88>
 80139a0:	dd24      	ble.n	80139ec <_strtod_l+0x434>
 80139a2:	2b16      	cmp	r3, #22
 80139a4:	dc0b      	bgt.n	80139be <_strtod_l+0x406>
 80139a6:	496d      	ldr	r1, [pc, #436]	; (8013b5c <_strtod_l+0x5a4>)
 80139a8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80139ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80139b0:	4652      	mov	r2, sl
 80139b2:	465b      	mov	r3, fp
 80139b4:	f7ec fe50 	bl	8000658 <__aeabi_dmul>
 80139b8:	4682      	mov	sl, r0
 80139ba:	468b      	mov	fp, r1
 80139bc:	e640      	b.n	8013640 <_strtod_l+0x88>
 80139be:	9a06      	ldr	r2, [sp, #24]
 80139c0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80139c4:	4293      	cmp	r3, r2
 80139c6:	db20      	blt.n	8013a0a <_strtod_l+0x452>
 80139c8:	4c64      	ldr	r4, [pc, #400]	; (8013b5c <_strtod_l+0x5a4>)
 80139ca:	f1c5 050f 	rsb	r5, r5, #15
 80139ce:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80139d2:	4652      	mov	r2, sl
 80139d4:	465b      	mov	r3, fp
 80139d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80139da:	f7ec fe3d 	bl	8000658 <__aeabi_dmul>
 80139de:	9b06      	ldr	r3, [sp, #24]
 80139e0:	1b5d      	subs	r5, r3, r5
 80139e2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80139e6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80139ea:	e7e3      	b.n	80139b4 <_strtod_l+0x3fc>
 80139ec:	9b06      	ldr	r3, [sp, #24]
 80139ee:	3316      	adds	r3, #22
 80139f0:	db0b      	blt.n	8013a0a <_strtod_l+0x452>
 80139f2:	9b05      	ldr	r3, [sp, #20]
 80139f4:	1b9e      	subs	r6, r3, r6
 80139f6:	4b59      	ldr	r3, [pc, #356]	; (8013b5c <_strtod_l+0x5a4>)
 80139f8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80139fc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8013a00:	4650      	mov	r0, sl
 8013a02:	4659      	mov	r1, fp
 8013a04:	f7ec ff52 	bl	80008ac <__aeabi_ddiv>
 8013a08:	e7d6      	b.n	80139b8 <_strtod_l+0x400>
 8013a0a:	9b06      	ldr	r3, [sp, #24]
 8013a0c:	eba5 0808 	sub.w	r8, r5, r8
 8013a10:	4498      	add	r8, r3
 8013a12:	f1b8 0f00 	cmp.w	r8, #0
 8013a16:	dd74      	ble.n	8013b02 <_strtod_l+0x54a>
 8013a18:	f018 030f 	ands.w	r3, r8, #15
 8013a1c:	d00a      	beq.n	8013a34 <_strtod_l+0x47c>
 8013a1e:	494f      	ldr	r1, [pc, #316]	; (8013b5c <_strtod_l+0x5a4>)
 8013a20:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013a24:	4652      	mov	r2, sl
 8013a26:	465b      	mov	r3, fp
 8013a28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013a2c:	f7ec fe14 	bl	8000658 <__aeabi_dmul>
 8013a30:	4682      	mov	sl, r0
 8013a32:	468b      	mov	fp, r1
 8013a34:	f038 080f 	bics.w	r8, r8, #15
 8013a38:	d04f      	beq.n	8013ada <_strtod_l+0x522>
 8013a3a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8013a3e:	dd22      	ble.n	8013a86 <_strtod_l+0x4ce>
 8013a40:	2500      	movs	r5, #0
 8013a42:	462e      	mov	r6, r5
 8013a44:	9507      	str	r5, [sp, #28]
 8013a46:	9505      	str	r5, [sp, #20]
 8013a48:	2322      	movs	r3, #34	; 0x22
 8013a4a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8013b64 <_strtod_l+0x5ac>
 8013a4e:	6023      	str	r3, [r4, #0]
 8013a50:	f04f 0a00 	mov.w	sl, #0
 8013a54:	9b07      	ldr	r3, [sp, #28]
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	f43f adf2 	beq.w	8013640 <_strtod_l+0x88>
 8013a5c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013a5e:	4620      	mov	r0, r4
 8013a60:	f001 ff46 	bl	80158f0 <_Bfree>
 8013a64:	9905      	ldr	r1, [sp, #20]
 8013a66:	4620      	mov	r0, r4
 8013a68:	f001 ff42 	bl	80158f0 <_Bfree>
 8013a6c:	4631      	mov	r1, r6
 8013a6e:	4620      	mov	r0, r4
 8013a70:	f001 ff3e 	bl	80158f0 <_Bfree>
 8013a74:	9907      	ldr	r1, [sp, #28]
 8013a76:	4620      	mov	r0, r4
 8013a78:	f001 ff3a 	bl	80158f0 <_Bfree>
 8013a7c:	4629      	mov	r1, r5
 8013a7e:	4620      	mov	r0, r4
 8013a80:	f001 ff36 	bl	80158f0 <_Bfree>
 8013a84:	e5dc      	b.n	8013640 <_strtod_l+0x88>
 8013a86:	4b36      	ldr	r3, [pc, #216]	; (8013b60 <_strtod_l+0x5a8>)
 8013a88:	9304      	str	r3, [sp, #16]
 8013a8a:	2300      	movs	r3, #0
 8013a8c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8013a90:	4650      	mov	r0, sl
 8013a92:	4659      	mov	r1, fp
 8013a94:	4699      	mov	r9, r3
 8013a96:	f1b8 0f01 	cmp.w	r8, #1
 8013a9a:	dc21      	bgt.n	8013ae0 <_strtod_l+0x528>
 8013a9c:	b10b      	cbz	r3, 8013aa2 <_strtod_l+0x4ea>
 8013a9e:	4682      	mov	sl, r0
 8013aa0:	468b      	mov	fp, r1
 8013aa2:	4b2f      	ldr	r3, [pc, #188]	; (8013b60 <_strtod_l+0x5a8>)
 8013aa4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8013aa8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8013aac:	4652      	mov	r2, sl
 8013aae:	465b      	mov	r3, fp
 8013ab0:	e9d9 0100 	ldrd	r0, r1, [r9]
 8013ab4:	f7ec fdd0 	bl	8000658 <__aeabi_dmul>
 8013ab8:	4b2a      	ldr	r3, [pc, #168]	; (8013b64 <_strtod_l+0x5ac>)
 8013aba:	460a      	mov	r2, r1
 8013abc:	400b      	ands	r3, r1
 8013abe:	492a      	ldr	r1, [pc, #168]	; (8013b68 <_strtod_l+0x5b0>)
 8013ac0:	428b      	cmp	r3, r1
 8013ac2:	4682      	mov	sl, r0
 8013ac4:	d8bc      	bhi.n	8013a40 <_strtod_l+0x488>
 8013ac6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8013aca:	428b      	cmp	r3, r1
 8013acc:	bf86      	itte	hi
 8013ace:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8013b6c <_strtod_l+0x5b4>
 8013ad2:	f04f 3aff 	movhi.w	sl, #4294967295
 8013ad6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8013ada:	2300      	movs	r3, #0
 8013adc:	9304      	str	r3, [sp, #16]
 8013ade:	e084      	b.n	8013bea <_strtod_l+0x632>
 8013ae0:	f018 0f01 	tst.w	r8, #1
 8013ae4:	d005      	beq.n	8013af2 <_strtod_l+0x53a>
 8013ae6:	9b04      	ldr	r3, [sp, #16]
 8013ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013aec:	f7ec fdb4 	bl	8000658 <__aeabi_dmul>
 8013af0:	2301      	movs	r3, #1
 8013af2:	9a04      	ldr	r2, [sp, #16]
 8013af4:	3208      	adds	r2, #8
 8013af6:	f109 0901 	add.w	r9, r9, #1
 8013afa:	ea4f 0868 	mov.w	r8, r8, asr #1
 8013afe:	9204      	str	r2, [sp, #16]
 8013b00:	e7c9      	b.n	8013a96 <_strtod_l+0x4de>
 8013b02:	d0ea      	beq.n	8013ada <_strtod_l+0x522>
 8013b04:	f1c8 0800 	rsb	r8, r8, #0
 8013b08:	f018 020f 	ands.w	r2, r8, #15
 8013b0c:	d00a      	beq.n	8013b24 <_strtod_l+0x56c>
 8013b0e:	4b13      	ldr	r3, [pc, #76]	; (8013b5c <_strtod_l+0x5a4>)
 8013b10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013b14:	4650      	mov	r0, sl
 8013b16:	4659      	mov	r1, fp
 8013b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b1c:	f7ec fec6 	bl	80008ac <__aeabi_ddiv>
 8013b20:	4682      	mov	sl, r0
 8013b22:	468b      	mov	fp, r1
 8013b24:	ea5f 1828 	movs.w	r8, r8, asr #4
 8013b28:	d0d7      	beq.n	8013ada <_strtod_l+0x522>
 8013b2a:	f1b8 0f1f 	cmp.w	r8, #31
 8013b2e:	dd1f      	ble.n	8013b70 <_strtod_l+0x5b8>
 8013b30:	2500      	movs	r5, #0
 8013b32:	462e      	mov	r6, r5
 8013b34:	9507      	str	r5, [sp, #28]
 8013b36:	9505      	str	r5, [sp, #20]
 8013b38:	2322      	movs	r3, #34	; 0x22
 8013b3a:	f04f 0a00 	mov.w	sl, #0
 8013b3e:	f04f 0b00 	mov.w	fp, #0
 8013b42:	6023      	str	r3, [r4, #0]
 8013b44:	e786      	b.n	8013a54 <_strtod_l+0x49c>
 8013b46:	bf00      	nop
 8013b48:	0805d5e1 	.word	0x0805d5e1
 8013b4c:	0805d620 	.word	0x0805d620
 8013b50:	0805d5d9 	.word	0x0805d5d9
 8013b54:	0805d814 	.word	0x0805d814
 8013b58:	0805d70f 	.word	0x0805d70f
 8013b5c:	0805d988 	.word	0x0805d988
 8013b60:	0805d960 	.word	0x0805d960
 8013b64:	7ff00000 	.word	0x7ff00000
 8013b68:	7ca00000 	.word	0x7ca00000
 8013b6c:	7fefffff 	.word	0x7fefffff
 8013b70:	f018 0310 	ands.w	r3, r8, #16
 8013b74:	bf18      	it	ne
 8013b76:	236a      	movne	r3, #106	; 0x6a
 8013b78:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8013f28 <_strtod_l+0x970>
 8013b7c:	9304      	str	r3, [sp, #16]
 8013b7e:	4650      	mov	r0, sl
 8013b80:	4659      	mov	r1, fp
 8013b82:	2300      	movs	r3, #0
 8013b84:	f018 0f01 	tst.w	r8, #1
 8013b88:	d004      	beq.n	8013b94 <_strtod_l+0x5dc>
 8013b8a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8013b8e:	f7ec fd63 	bl	8000658 <__aeabi_dmul>
 8013b92:	2301      	movs	r3, #1
 8013b94:	ea5f 0868 	movs.w	r8, r8, asr #1
 8013b98:	f109 0908 	add.w	r9, r9, #8
 8013b9c:	d1f2      	bne.n	8013b84 <_strtod_l+0x5cc>
 8013b9e:	b10b      	cbz	r3, 8013ba4 <_strtod_l+0x5ec>
 8013ba0:	4682      	mov	sl, r0
 8013ba2:	468b      	mov	fp, r1
 8013ba4:	9b04      	ldr	r3, [sp, #16]
 8013ba6:	b1c3      	cbz	r3, 8013bda <_strtod_l+0x622>
 8013ba8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8013bac:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8013bb0:	2b00      	cmp	r3, #0
 8013bb2:	4659      	mov	r1, fp
 8013bb4:	dd11      	ble.n	8013bda <_strtod_l+0x622>
 8013bb6:	2b1f      	cmp	r3, #31
 8013bb8:	f340 8124 	ble.w	8013e04 <_strtod_l+0x84c>
 8013bbc:	2b34      	cmp	r3, #52	; 0x34
 8013bbe:	bfde      	ittt	le
 8013bc0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8013bc4:	f04f 33ff 	movle.w	r3, #4294967295
 8013bc8:	fa03 f202 	lslle.w	r2, r3, r2
 8013bcc:	f04f 0a00 	mov.w	sl, #0
 8013bd0:	bfcc      	ite	gt
 8013bd2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8013bd6:	ea02 0b01 	andle.w	fp, r2, r1
 8013bda:	2200      	movs	r2, #0
 8013bdc:	2300      	movs	r3, #0
 8013bde:	4650      	mov	r0, sl
 8013be0:	4659      	mov	r1, fp
 8013be2:	f7ec ffa1 	bl	8000b28 <__aeabi_dcmpeq>
 8013be6:	2800      	cmp	r0, #0
 8013be8:	d1a2      	bne.n	8013b30 <_strtod_l+0x578>
 8013bea:	9b07      	ldr	r3, [sp, #28]
 8013bec:	9300      	str	r3, [sp, #0]
 8013bee:	9908      	ldr	r1, [sp, #32]
 8013bf0:	462b      	mov	r3, r5
 8013bf2:	463a      	mov	r2, r7
 8013bf4:	4620      	mov	r0, r4
 8013bf6:	f001 fee3 	bl	80159c0 <__s2b>
 8013bfa:	9007      	str	r0, [sp, #28]
 8013bfc:	2800      	cmp	r0, #0
 8013bfe:	f43f af1f 	beq.w	8013a40 <_strtod_l+0x488>
 8013c02:	9b05      	ldr	r3, [sp, #20]
 8013c04:	1b9e      	subs	r6, r3, r6
 8013c06:	9b06      	ldr	r3, [sp, #24]
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	bfb4      	ite	lt
 8013c0c:	4633      	movlt	r3, r6
 8013c0e:	2300      	movge	r3, #0
 8013c10:	930c      	str	r3, [sp, #48]	; 0x30
 8013c12:	9b06      	ldr	r3, [sp, #24]
 8013c14:	2500      	movs	r5, #0
 8013c16:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013c1a:	9312      	str	r3, [sp, #72]	; 0x48
 8013c1c:	462e      	mov	r6, r5
 8013c1e:	9b07      	ldr	r3, [sp, #28]
 8013c20:	4620      	mov	r0, r4
 8013c22:	6859      	ldr	r1, [r3, #4]
 8013c24:	f001 fe24 	bl	8015870 <_Balloc>
 8013c28:	9005      	str	r0, [sp, #20]
 8013c2a:	2800      	cmp	r0, #0
 8013c2c:	f43f af0c 	beq.w	8013a48 <_strtod_l+0x490>
 8013c30:	9b07      	ldr	r3, [sp, #28]
 8013c32:	691a      	ldr	r2, [r3, #16]
 8013c34:	3202      	adds	r2, #2
 8013c36:	f103 010c 	add.w	r1, r3, #12
 8013c3a:	0092      	lsls	r2, r2, #2
 8013c3c:	300c      	adds	r0, #12
 8013c3e:	f7fe fc7f 	bl	8012540 <memcpy>
 8013c42:	ec4b ab10 	vmov	d0, sl, fp
 8013c46:	aa1a      	add	r2, sp, #104	; 0x68
 8013c48:	a919      	add	r1, sp, #100	; 0x64
 8013c4a:	4620      	mov	r0, r4
 8013c4c:	f002 f9fe 	bl	801604c <__d2b>
 8013c50:	ec4b ab18 	vmov	d8, sl, fp
 8013c54:	9018      	str	r0, [sp, #96]	; 0x60
 8013c56:	2800      	cmp	r0, #0
 8013c58:	f43f aef6 	beq.w	8013a48 <_strtod_l+0x490>
 8013c5c:	2101      	movs	r1, #1
 8013c5e:	4620      	mov	r0, r4
 8013c60:	f001 ff48 	bl	8015af4 <__i2b>
 8013c64:	4606      	mov	r6, r0
 8013c66:	2800      	cmp	r0, #0
 8013c68:	f43f aeee 	beq.w	8013a48 <_strtod_l+0x490>
 8013c6c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013c6e:	9904      	ldr	r1, [sp, #16]
 8013c70:	2b00      	cmp	r3, #0
 8013c72:	bfab      	itete	ge
 8013c74:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8013c76:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8013c78:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8013c7a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8013c7e:	bfac      	ite	ge
 8013c80:	eb03 0902 	addge.w	r9, r3, r2
 8013c84:	1ad7      	sublt	r7, r2, r3
 8013c86:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8013c88:	eba3 0801 	sub.w	r8, r3, r1
 8013c8c:	4490      	add	r8, r2
 8013c8e:	4ba1      	ldr	r3, [pc, #644]	; (8013f14 <_strtod_l+0x95c>)
 8013c90:	f108 38ff 	add.w	r8, r8, #4294967295
 8013c94:	4598      	cmp	r8, r3
 8013c96:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8013c9a:	f280 80c7 	bge.w	8013e2c <_strtod_l+0x874>
 8013c9e:	eba3 0308 	sub.w	r3, r3, r8
 8013ca2:	2b1f      	cmp	r3, #31
 8013ca4:	eba2 0203 	sub.w	r2, r2, r3
 8013ca8:	f04f 0101 	mov.w	r1, #1
 8013cac:	f300 80b1 	bgt.w	8013e12 <_strtod_l+0x85a>
 8013cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8013cb4:	930d      	str	r3, [sp, #52]	; 0x34
 8013cb6:	2300      	movs	r3, #0
 8013cb8:	9308      	str	r3, [sp, #32]
 8013cba:	eb09 0802 	add.w	r8, r9, r2
 8013cbe:	9b04      	ldr	r3, [sp, #16]
 8013cc0:	45c1      	cmp	r9, r8
 8013cc2:	4417      	add	r7, r2
 8013cc4:	441f      	add	r7, r3
 8013cc6:	464b      	mov	r3, r9
 8013cc8:	bfa8      	it	ge
 8013cca:	4643      	movge	r3, r8
 8013ccc:	42bb      	cmp	r3, r7
 8013cce:	bfa8      	it	ge
 8013cd0:	463b      	movge	r3, r7
 8013cd2:	2b00      	cmp	r3, #0
 8013cd4:	bfc2      	ittt	gt
 8013cd6:	eba8 0803 	subgt.w	r8, r8, r3
 8013cda:	1aff      	subgt	r7, r7, r3
 8013cdc:	eba9 0903 	subgt.w	r9, r9, r3
 8013ce0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	dd17      	ble.n	8013d16 <_strtod_l+0x75e>
 8013ce6:	4631      	mov	r1, r6
 8013ce8:	461a      	mov	r2, r3
 8013cea:	4620      	mov	r0, r4
 8013cec:	f001 ffc2 	bl	8015c74 <__pow5mult>
 8013cf0:	4606      	mov	r6, r0
 8013cf2:	2800      	cmp	r0, #0
 8013cf4:	f43f aea8 	beq.w	8013a48 <_strtod_l+0x490>
 8013cf8:	4601      	mov	r1, r0
 8013cfa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013cfc:	4620      	mov	r0, r4
 8013cfe:	f001 ff0f 	bl	8015b20 <__multiply>
 8013d02:	900b      	str	r0, [sp, #44]	; 0x2c
 8013d04:	2800      	cmp	r0, #0
 8013d06:	f43f ae9f 	beq.w	8013a48 <_strtod_l+0x490>
 8013d0a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013d0c:	4620      	mov	r0, r4
 8013d0e:	f001 fdef 	bl	80158f0 <_Bfree>
 8013d12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013d14:	9318      	str	r3, [sp, #96]	; 0x60
 8013d16:	f1b8 0f00 	cmp.w	r8, #0
 8013d1a:	f300 808c 	bgt.w	8013e36 <_strtod_l+0x87e>
 8013d1e:	9b06      	ldr	r3, [sp, #24]
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	dd08      	ble.n	8013d36 <_strtod_l+0x77e>
 8013d24:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013d26:	9905      	ldr	r1, [sp, #20]
 8013d28:	4620      	mov	r0, r4
 8013d2a:	f001 ffa3 	bl	8015c74 <__pow5mult>
 8013d2e:	9005      	str	r0, [sp, #20]
 8013d30:	2800      	cmp	r0, #0
 8013d32:	f43f ae89 	beq.w	8013a48 <_strtod_l+0x490>
 8013d36:	2f00      	cmp	r7, #0
 8013d38:	dd08      	ble.n	8013d4c <_strtod_l+0x794>
 8013d3a:	9905      	ldr	r1, [sp, #20]
 8013d3c:	463a      	mov	r2, r7
 8013d3e:	4620      	mov	r0, r4
 8013d40:	f001 fff2 	bl	8015d28 <__lshift>
 8013d44:	9005      	str	r0, [sp, #20]
 8013d46:	2800      	cmp	r0, #0
 8013d48:	f43f ae7e 	beq.w	8013a48 <_strtod_l+0x490>
 8013d4c:	f1b9 0f00 	cmp.w	r9, #0
 8013d50:	dd08      	ble.n	8013d64 <_strtod_l+0x7ac>
 8013d52:	4631      	mov	r1, r6
 8013d54:	464a      	mov	r2, r9
 8013d56:	4620      	mov	r0, r4
 8013d58:	f001 ffe6 	bl	8015d28 <__lshift>
 8013d5c:	4606      	mov	r6, r0
 8013d5e:	2800      	cmp	r0, #0
 8013d60:	f43f ae72 	beq.w	8013a48 <_strtod_l+0x490>
 8013d64:	9a05      	ldr	r2, [sp, #20]
 8013d66:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013d68:	4620      	mov	r0, r4
 8013d6a:	f002 f869 	bl	8015e40 <__mdiff>
 8013d6e:	4605      	mov	r5, r0
 8013d70:	2800      	cmp	r0, #0
 8013d72:	f43f ae69 	beq.w	8013a48 <_strtod_l+0x490>
 8013d76:	68c3      	ldr	r3, [r0, #12]
 8013d78:	930b      	str	r3, [sp, #44]	; 0x2c
 8013d7a:	2300      	movs	r3, #0
 8013d7c:	60c3      	str	r3, [r0, #12]
 8013d7e:	4631      	mov	r1, r6
 8013d80:	f002 f842 	bl	8015e08 <__mcmp>
 8013d84:	2800      	cmp	r0, #0
 8013d86:	da60      	bge.n	8013e4a <_strtod_l+0x892>
 8013d88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013d8a:	ea53 030a 	orrs.w	r3, r3, sl
 8013d8e:	f040 8082 	bne.w	8013e96 <_strtod_l+0x8de>
 8013d92:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013d96:	2b00      	cmp	r3, #0
 8013d98:	d17d      	bne.n	8013e96 <_strtod_l+0x8de>
 8013d9a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013d9e:	0d1b      	lsrs	r3, r3, #20
 8013da0:	051b      	lsls	r3, r3, #20
 8013da2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8013da6:	d976      	bls.n	8013e96 <_strtod_l+0x8de>
 8013da8:	696b      	ldr	r3, [r5, #20]
 8013daa:	b913      	cbnz	r3, 8013db2 <_strtod_l+0x7fa>
 8013dac:	692b      	ldr	r3, [r5, #16]
 8013dae:	2b01      	cmp	r3, #1
 8013db0:	dd71      	ble.n	8013e96 <_strtod_l+0x8de>
 8013db2:	4629      	mov	r1, r5
 8013db4:	2201      	movs	r2, #1
 8013db6:	4620      	mov	r0, r4
 8013db8:	f001 ffb6 	bl	8015d28 <__lshift>
 8013dbc:	4631      	mov	r1, r6
 8013dbe:	4605      	mov	r5, r0
 8013dc0:	f002 f822 	bl	8015e08 <__mcmp>
 8013dc4:	2800      	cmp	r0, #0
 8013dc6:	dd66      	ble.n	8013e96 <_strtod_l+0x8de>
 8013dc8:	9904      	ldr	r1, [sp, #16]
 8013dca:	4a53      	ldr	r2, [pc, #332]	; (8013f18 <_strtod_l+0x960>)
 8013dcc:	465b      	mov	r3, fp
 8013dce:	2900      	cmp	r1, #0
 8013dd0:	f000 8081 	beq.w	8013ed6 <_strtod_l+0x91e>
 8013dd4:	ea02 010b 	and.w	r1, r2, fp
 8013dd8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8013ddc:	dc7b      	bgt.n	8013ed6 <_strtod_l+0x91e>
 8013dde:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8013de2:	f77f aea9 	ble.w	8013b38 <_strtod_l+0x580>
 8013de6:	4b4d      	ldr	r3, [pc, #308]	; (8013f1c <_strtod_l+0x964>)
 8013de8:	4650      	mov	r0, sl
 8013dea:	4659      	mov	r1, fp
 8013dec:	2200      	movs	r2, #0
 8013dee:	f7ec fc33 	bl	8000658 <__aeabi_dmul>
 8013df2:	460b      	mov	r3, r1
 8013df4:	4303      	orrs	r3, r0
 8013df6:	bf08      	it	eq
 8013df8:	2322      	moveq	r3, #34	; 0x22
 8013dfa:	4682      	mov	sl, r0
 8013dfc:	468b      	mov	fp, r1
 8013dfe:	bf08      	it	eq
 8013e00:	6023      	streq	r3, [r4, #0]
 8013e02:	e62b      	b.n	8013a5c <_strtod_l+0x4a4>
 8013e04:	f04f 32ff 	mov.w	r2, #4294967295
 8013e08:	fa02 f303 	lsl.w	r3, r2, r3
 8013e0c:	ea03 0a0a 	and.w	sl, r3, sl
 8013e10:	e6e3      	b.n	8013bda <_strtod_l+0x622>
 8013e12:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8013e16:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8013e1a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8013e1e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8013e22:	fa01 f308 	lsl.w	r3, r1, r8
 8013e26:	9308      	str	r3, [sp, #32]
 8013e28:	910d      	str	r1, [sp, #52]	; 0x34
 8013e2a:	e746      	b.n	8013cba <_strtod_l+0x702>
 8013e2c:	2300      	movs	r3, #0
 8013e2e:	9308      	str	r3, [sp, #32]
 8013e30:	2301      	movs	r3, #1
 8013e32:	930d      	str	r3, [sp, #52]	; 0x34
 8013e34:	e741      	b.n	8013cba <_strtod_l+0x702>
 8013e36:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013e38:	4642      	mov	r2, r8
 8013e3a:	4620      	mov	r0, r4
 8013e3c:	f001 ff74 	bl	8015d28 <__lshift>
 8013e40:	9018      	str	r0, [sp, #96]	; 0x60
 8013e42:	2800      	cmp	r0, #0
 8013e44:	f47f af6b 	bne.w	8013d1e <_strtod_l+0x766>
 8013e48:	e5fe      	b.n	8013a48 <_strtod_l+0x490>
 8013e4a:	465f      	mov	r7, fp
 8013e4c:	d16e      	bne.n	8013f2c <_strtod_l+0x974>
 8013e4e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013e50:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013e54:	b342      	cbz	r2, 8013ea8 <_strtod_l+0x8f0>
 8013e56:	4a32      	ldr	r2, [pc, #200]	; (8013f20 <_strtod_l+0x968>)
 8013e58:	4293      	cmp	r3, r2
 8013e5a:	d128      	bne.n	8013eae <_strtod_l+0x8f6>
 8013e5c:	9b04      	ldr	r3, [sp, #16]
 8013e5e:	4651      	mov	r1, sl
 8013e60:	b1eb      	cbz	r3, 8013e9e <_strtod_l+0x8e6>
 8013e62:	4b2d      	ldr	r3, [pc, #180]	; (8013f18 <_strtod_l+0x960>)
 8013e64:	403b      	ands	r3, r7
 8013e66:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8013e6a:	f04f 32ff 	mov.w	r2, #4294967295
 8013e6e:	d819      	bhi.n	8013ea4 <_strtod_l+0x8ec>
 8013e70:	0d1b      	lsrs	r3, r3, #20
 8013e72:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013e76:	fa02 f303 	lsl.w	r3, r2, r3
 8013e7a:	4299      	cmp	r1, r3
 8013e7c:	d117      	bne.n	8013eae <_strtod_l+0x8f6>
 8013e7e:	4b29      	ldr	r3, [pc, #164]	; (8013f24 <_strtod_l+0x96c>)
 8013e80:	429f      	cmp	r7, r3
 8013e82:	d102      	bne.n	8013e8a <_strtod_l+0x8d2>
 8013e84:	3101      	adds	r1, #1
 8013e86:	f43f addf 	beq.w	8013a48 <_strtod_l+0x490>
 8013e8a:	4b23      	ldr	r3, [pc, #140]	; (8013f18 <_strtod_l+0x960>)
 8013e8c:	403b      	ands	r3, r7
 8013e8e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8013e92:	f04f 0a00 	mov.w	sl, #0
 8013e96:	9b04      	ldr	r3, [sp, #16]
 8013e98:	2b00      	cmp	r3, #0
 8013e9a:	d1a4      	bne.n	8013de6 <_strtod_l+0x82e>
 8013e9c:	e5de      	b.n	8013a5c <_strtod_l+0x4a4>
 8013e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8013ea2:	e7ea      	b.n	8013e7a <_strtod_l+0x8c2>
 8013ea4:	4613      	mov	r3, r2
 8013ea6:	e7e8      	b.n	8013e7a <_strtod_l+0x8c2>
 8013ea8:	ea53 030a 	orrs.w	r3, r3, sl
 8013eac:	d08c      	beq.n	8013dc8 <_strtod_l+0x810>
 8013eae:	9b08      	ldr	r3, [sp, #32]
 8013eb0:	b1db      	cbz	r3, 8013eea <_strtod_l+0x932>
 8013eb2:	423b      	tst	r3, r7
 8013eb4:	d0ef      	beq.n	8013e96 <_strtod_l+0x8de>
 8013eb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013eb8:	9a04      	ldr	r2, [sp, #16]
 8013eba:	4650      	mov	r0, sl
 8013ebc:	4659      	mov	r1, fp
 8013ebe:	b1c3      	cbz	r3, 8013ef2 <_strtod_l+0x93a>
 8013ec0:	f7ff fb5d 	bl	801357e <sulp>
 8013ec4:	4602      	mov	r2, r0
 8013ec6:	460b      	mov	r3, r1
 8013ec8:	ec51 0b18 	vmov	r0, r1, d8
 8013ecc:	f7ec fa0e 	bl	80002ec <__adddf3>
 8013ed0:	4682      	mov	sl, r0
 8013ed2:	468b      	mov	fp, r1
 8013ed4:	e7df      	b.n	8013e96 <_strtod_l+0x8de>
 8013ed6:	4013      	ands	r3, r2
 8013ed8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8013edc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8013ee0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8013ee4:	f04f 3aff 	mov.w	sl, #4294967295
 8013ee8:	e7d5      	b.n	8013e96 <_strtod_l+0x8de>
 8013eea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013eec:	ea13 0f0a 	tst.w	r3, sl
 8013ef0:	e7e0      	b.n	8013eb4 <_strtod_l+0x8fc>
 8013ef2:	f7ff fb44 	bl	801357e <sulp>
 8013ef6:	4602      	mov	r2, r0
 8013ef8:	460b      	mov	r3, r1
 8013efa:	ec51 0b18 	vmov	r0, r1, d8
 8013efe:	f7ec f9f3 	bl	80002e8 <__aeabi_dsub>
 8013f02:	2200      	movs	r2, #0
 8013f04:	2300      	movs	r3, #0
 8013f06:	4682      	mov	sl, r0
 8013f08:	468b      	mov	fp, r1
 8013f0a:	f7ec fe0d 	bl	8000b28 <__aeabi_dcmpeq>
 8013f0e:	2800      	cmp	r0, #0
 8013f10:	d0c1      	beq.n	8013e96 <_strtod_l+0x8de>
 8013f12:	e611      	b.n	8013b38 <_strtod_l+0x580>
 8013f14:	fffffc02 	.word	0xfffffc02
 8013f18:	7ff00000 	.word	0x7ff00000
 8013f1c:	39500000 	.word	0x39500000
 8013f20:	000fffff 	.word	0x000fffff
 8013f24:	7fefffff 	.word	0x7fefffff
 8013f28:	0805d638 	.word	0x0805d638
 8013f2c:	4631      	mov	r1, r6
 8013f2e:	4628      	mov	r0, r5
 8013f30:	f002 f8e8 	bl	8016104 <__ratio>
 8013f34:	ec59 8b10 	vmov	r8, r9, d0
 8013f38:	ee10 0a10 	vmov	r0, s0
 8013f3c:	2200      	movs	r2, #0
 8013f3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013f42:	4649      	mov	r1, r9
 8013f44:	f7ec fe04 	bl	8000b50 <__aeabi_dcmple>
 8013f48:	2800      	cmp	r0, #0
 8013f4a:	d07a      	beq.n	8014042 <_strtod_l+0xa8a>
 8013f4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013f4e:	2b00      	cmp	r3, #0
 8013f50:	d04a      	beq.n	8013fe8 <_strtod_l+0xa30>
 8013f52:	4b95      	ldr	r3, [pc, #596]	; (80141a8 <_strtod_l+0xbf0>)
 8013f54:	2200      	movs	r2, #0
 8013f56:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013f5a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80141a8 <_strtod_l+0xbf0>
 8013f5e:	f04f 0800 	mov.w	r8, #0
 8013f62:	4b92      	ldr	r3, [pc, #584]	; (80141ac <_strtod_l+0xbf4>)
 8013f64:	403b      	ands	r3, r7
 8013f66:	930d      	str	r3, [sp, #52]	; 0x34
 8013f68:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013f6a:	4b91      	ldr	r3, [pc, #580]	; (80141b0 <_strtod_l+0xbf8>)
 8013f6c:	429a      	cmp	r2, r3
 8013f6e:	f040 80b0 	bne.w	80140d2 <_strtod_l+0xb1a>
 8013f72:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013f76:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8013f7a:	ec4b ab10 	vmov	d0, sl, fp
 8013f7e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013f82:	f001 ffe7 	bl	8015f54 <__ulp>
 8013f86:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013f8a:	ec53 2b10 	vmov	r2, r3, d0
 8013f8e:	f7ec fb63 	bl	8000658 <__aeabi_dmul>
 8013f92:	4652      	mov	r2, sl
 8013f94:	465b      	mov	r3, fp
 8013f96:	f7ec f9a9 	bl	80002ec <__adddf3>
 8013f9a:	460b      	mov	r3, r1
 8013f9c:	4983      	ldr	r1, [pc, #524]	; (80141ac <_strtod_l+0xbf4>)
 8013f9e:	4a85      	ldr	r2, [pc, #532]	; (80141b4 <_strtod_l+0xbfc>)
 8013fa0:	4019      	ands	r1, r3
 8013fa2:	4291      	cmp	r1, r2
 8013fa4:	4682      	mov	sl, r0
 8013fa6:	d960      	bls.n	801406a <_strtod_l+0xab2>
 8013fa8:	ee18 3a90 	vmov	r3, s17
 8013fac:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8013fb0:	4293      	cmp	r3, r2
 8013fb2:	d104      	bne.n	8013fbe <_strtod_l+0xa06>
 8013fb4:	ee18 3a10 	vmov	r3, s16
 8013fb8:	3301      	adds	r3, #1
 8013fba:	f43f ad45 	beq.w	8013a48 <_strtod_l+0x490>
 8013fbe:	f8df b200 	ldr.w	fp, [pc, #512]	; 80141c0 <_strtod_l+0xc08>
 8013fc2:	f04f 3aff 	mov.w	sl, #4294967295
 8013fc6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013fc8:	4620      	mov	r0, r4
 8013fca:	f001 fc91 	bl	80158f0 <_Bfree>
 8013fce:	9905      	ldr	r1, [sp, #20]
 8013fd0:	4620      	mov	r0, r4
 8013fd2:	f001 fc8d 	bl	80158f0 <_Bfree>
 8013fd6:	4631      	mov	r1, r6
 8013fd8:	4620      	mov	r0, r4
 8013fda:	f001 fc89 	bl	80158f0 <_Bfree>
 8013fde:	4629      	mov	r1, r5
 8013fe0:	4620      	mov	r0, r4
 8013fe2:	f001 fc85 	bl	80158f0 <_Bfree>
 8013fe6:	e61a      	b.n	8013c1e <_strtod_l+0x666>
 8013fe8:	f1ba 0f00 	cmp.w	sl, #0
 8013fec:	d11b      	bne.n	8014026 <_strtod_l+0xa6e>
 8013fee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013ff2:	b9f3      	cbnz	r3, 8014032 <_strtod_l+0xa7a>
 8013ff4:	4b6c      	ldr	r3, [pc, #432]	; (80141a8 <_strtod_l+0xbf0>)
 8013ff6:	2200      	movs	r2, #0
 8013ff8:	4640      	mov	r0, r8
 8013ffa:	4649      	mov	r1, r9
 8013ffc:	f7ec fd9e 	bl	8000b3c <__aeabi_dcmplt>
 8014000:	b9d0      	cbnz	r0, 8014038 <_strtod_l+0xa80>
 8014002:	4640      	mov	r0, r8
 8014004:	4649      	mov	r1, r9
 8014006:	4b6c      	ldr	r3, [pc, #432]	; (80141b8 <_strtod_l+0xc00>)
 8014008:	2200      	movs	r2, #0
 801400a:	f7ec fb25 	bl	8000658 <__aeabi_dmul>
 801400e:	4680      	mov	r8, r0
 8014010:	4689      	mov	r9, r1
 8014012:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8014016:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 801401a:	9315      	str	r3, [sp, #84]	; 0x54
 801401c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8014020:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014024:	e79d      	b.n	8013f62 <_strtod_l+0x9aa>
 8014026:	f1ba 0f01 	cmp.w	sl, #1
 801402a:	d102      	bne.n	8014032 <_strtod_l+0xa7a>
 801402c:	2f00      	cmp	r7, #0
 801402e:	f43f ad83 	beq.w	8013b38 <_strtod_l+0x580>
 8014032:	4b62      	ldr	r3, [pc, #392]	; (80141bc <_strtod_l+0xc04>)
 8014034:	2200      	movs	r2, #0
 8014036:	e78e      	b.n	8013f56 <_strtod_l+0x99e>
 8014038:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80141b8 <_strtod_l+0xc00>
 801403c:	f04f 0800 	mov.w	r8, #0
 8014040:	e7e7      	b.n	8014012 <_strtod_l+0xa5a>
 8014042:	4b5d      	ldr	r3, [pc, #372]	; (80141b8 <_strtod_l+0xc00>)
 8014044:	4640      	mov	r0, r8
 8014046:	4649      	mov	r1, r9
 8014048:	2200      	movs	r2, #0
 801404a:	f7ec fb05 	bl	8000658 <__aeabi_dmul>
 801404e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014050:	4680      	mov	r8, r0
 8014052:	4689      	mov	r9, r1
 8014054:	b933      	cbnz	r3, 8014064 <_strtod_l+0xaac>
 8014056:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801405a:	900e      	str	r0, [sp, #56]	; 0x38
 801405c:	930f      	str	r3, [sp, #60]	; 0x3c
 801405e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8014062:	e7dd      	b.n	8014020 <_strtod_l+0xa68>
 8014064:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8014068:	e7f9      	b.n	801405e <_strtod_l+0xaa6>
 801406a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801406e:	9b04      	ldr	r3, [sp, #16]
 8014070:	2b00      	cmp	r3, #0
 8014072:	d1a8      	bne.n	8013fc6 <_strtod_l+0xa0e>
 8014074:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014078:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801407a:	0d1b      	lsrs	r3, r3, #20
 801407c:	051b      	lsls	r3, r3, #20
 801407e:	429a      	cmp	r2, r3
 8014080:	d1a1      	bne.n	8013fc6 <_strtod_l+0xa0e>
 8014082:	4640      	mov	r0, r8
 8014084:	4649      	mov	r1, r9
 8014086:	f7ec fe47 	bl	8000d18 <__aeabi_d2lz>
 801408a:	f7ec fab7 	bl	80005fc <__aeabi_l2d>
 801408e:	4602      	mov	r2, r0
 8014090:	460b      	mov	r3, r1
 8014092:	4640      	mov	r0, r8
 8014094:	4649      	mov	r1, r9
 8014096:	f7ec f927 	bl	80002e8 <__aeabi_dsub>
 801409a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801409c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80140a0:	ea43 030a 	orr.w	r3, r3, sl
 80140a4:	4313      	orrs	r3, r2
 80140a6:	4680      	mov	r8, r0
 80140a8:	4689      	mov	r9, r1
 80140aa:	d055      	beq.n	8014158 <_strtod_l+0xba0>
 80140ac:	a336      	add	r3, pc, #216	; (adr r3, 8014188 <_strtod_l+0xbd0>)
 80140ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140b2:	f7ec fd43 	bl	8000b3c <__aeabi_dcmplt>
 80140b6:	2800      	cmp	r0, #0
 80140b8:	f47f acd0 	bne.w	8013a5c <_strtod_l+0x4a4>
 80140bc:	a334      	add	r3, pc, #208	; (adr r3, 8014190 <_strtod_l+0xbd8>)
 80140be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140c2:	4640      	mov	r0, r8
 80140c4:	4649      	mov	r1, r9
 80140c6:	f7ec fd57 	bl	8000b78 <__aeabi_dcmpgt>
 80140ca:	2800      	cmp	r0, #0
 80140cc:	f43f af7b 	beq.w	8013fc6 <_strtod_l+0xa0e>
 80140d0:	e4c4      	b.n	8013a5c <_strtod_l+0x4a4>
 80140d2:	9b04      	ldr	r3, [sp, #16]
 80140d4:	b333      	cbz	r3, 8014124 <_strtod_l+0xb6c>
 80140d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80140d8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80140dc:	d822      	bhi.n	8014124 <_strtod_l+0xb6c>
 80140de:	a32e      	add	r3, pc, #184	; (adr r3, 8014198 <_strtod_l+0xbe0>)
 80140e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140e4:	4640      	mov	r0, r8
 80140e6:	4649      	mov	r1, r9
 80140e8:	f7ec fd32 	bl	8000b50 <__aeabi_dcmple>
 80140ec:	b1a0      	cbz	r0, 8014118 <_strtod_l+0xb60>
 80140ee:	4649      	mov	r1, r9
 80140f0:	4640      	mov	r0, r8
 80140f2:	f7ec fd89 	bl	8000c08 <__aeabi_d2uiz>
 80140f6:	2801      	cmp	r0, #1
 80140f8:	bf38      	it	cc
 80140fa:	2001      	movcc	r0, #1
 80140fc:	f7ec fa32 	bl	8000564 <__aeabi_ui2d>
 8014100:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014102:	4680      	mov	r8, r0
 8014104:	4689      	mov	r9, r1
 8014106:	bb23      	cbnz	r3, 8014152 <_strtod_l+0xb9a>
 8014108:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801410c:	9010      	str	r0, [sp, #64]	; 0x40
 801410e:	9311      	str	r3, [sp, #68]	; 0x44
 8014110:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8014114:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014118:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801411a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801411c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8014120:	1a9b      	subs	r3, r3, r2
 8014122:	9309      	str	r3, [sp, #36]	; 0x24
 8014124:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014128:	eeb0 0a48 	vmov.f32	s0, s16
 801412c:	eef0 0a68 	vmov.f32	s1, s17
 8014130:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014134:	f001 ff0e 	bl	8015f54 <__ulp>
 8014138:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801413c:	ec53 2b10 	vmov	r2, r3, d0
 8014140:	f7ec fa8a 	bl	8000658 <__aeabi_dmul>
 8014144:	ec53 2b18 	vmov	r2, r3, d8
 8014148:	f7ec f8d0 	bl	80002ec <__adddf3>
 801414c:	4682      	mov	sl, r0
 801414e:	468b      	mov	fp, r1
 8014150:	e78d      	b.n	801406e <_strtod_l+0xab6>
 8014152:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8014156:	e7db      	b.n	8014110 <_strtod_l+0xb58>
 8014158:	a311      	add	r3, pc, #68	; (adr r3, 80141a0 <_strtod_l+0xbe8>)
 801415a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801415e:	f7ec fced 	bl	8000b3c <__aeabi_dcmplt>
 8014162:	e7b2      	b.n	80140ca <_strtod_l+0xb12>
 8014164:	2300      	movs	r3, #0
 8014166:	930a      	str	r3, [sp, #40]	; 0x28
 8014168:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801416a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801416c:	6013      	str	r3, [r2, #0]
 801416e:	f7ff ba6b 	b.w	8013648 <_strtod_l+0x90>
 8014172:	2a65      	cmp	r2, #101	; 0x65
 8014174:	f43f ab5f 	beq.w	8013836 <_strtod_l+0x27e>
 8014178:	2a45      	cmp	r2, #69	; 0x45
 801417a:	f43f ab5c 	beq.w	8013836 <_strtod_l+0x27e>
 801417e:	2301      	movs	r3, #1
 8014180:	f7ff bb94 	b.w	80138ac <_strtod_l+0x2f4>
 8014184:	f3af 8000 	nop.w
 8014188:	94a03595 	.word	0x94a03595
 801418c:	3fdfffff 	.word	0x3fdfffff
 8014190:	35afe535 	.word	0x35afe535
 8014194:	3fe00000 	.word	0x3fe00000
 8014198:	ffc00000 	.word	0xffc00000
 801419c:	41dfffff 	.word	0x41dfffff
 80141a0:	94a03595 	.word	0x94a03595
 80141a4:	3fcfffff 	.word	0x3fcfffff
 80141a8:	3ff00000 	.word	0x3ff00000
 80141ac:	7ff00000 	.word	0x7ff00000
 80141b0:	7fe00000 	.word	0x7fe00000
 80141b4:	7c9fffff 	.word	0x7c9fffff
 80141b8:	3fe00000 	.word	0x3fe00000
 80141bc:	bff00000 	.word	0xbff00000
 80141c0:	7fefffff 	.word	0x7fefffff

080141c4 <_strtod_r>:
 80141c4:	4b01      	ldr	r3, [pc, #4]	; (80141cc <_strtod_r+0x8>)
 80141c6:	f7ff b9f7 	b.w	80135b8 <_strtod_l>
 80141ca:	bf00      	nop
 80141cc:	200014c4 	.word	0x200014c4

080141d0 <strtok>:
 80141d0:	4b16      	ldr	r3, [pc, #88]	; (801422c <strtok+0x5c>)
 80141d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80141d4:	681e      	ldr	r6, [r3, #0]
 80141d6:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80141d8:	4605      	mov	r5, r0
 80141da:	b9fc      	cbnz	r4, 801421c <strtok+0x4c>
 80141dc:	2050      	movs	r0, #80	; 0x50
 80141de:	9101      	str	r1, [sp, #4]
 80141e0:	f7fe f9a6 	bl	8012530 <malloc>
 80141e4:	9901      	ldr	r1, [sp, #4]
 80141e6:	65b0      	str	r0, [r6, #88]	; 0x58
 80141e8:	4602      	mov	r2, r0
 80141ea:	b920      	cbnz	r0, 80141f6 <strtok+0x26>
 80141ec:	4b10      	ldr	r3, [pc, #64]	; (8014230 <strtok+0x60>)
 80141ee:	4811      	ldr	r0, [pc, #68]	; (8014234 <strtok+0x64>)
 80141f0:	2157      	movs	r1, #87	; 0x57
 80141f2:	f000 f8df 	bl	80143b4 <__assert_func>
 80141f6:	e9c0 4400 	strd	r4, r4, [r0]
 80141fa:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80141fe:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8014202:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8014206:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 801420a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 801420e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8014212:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8014216:	6184      	str	r4, [r0, #24]
 8014218:	7704      	strb	r4, [r0, #28]
 801421a:	6244      	str	r4, [r0, #36]	; 0x24
 801421c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 801421e:	2301      	movs	r3, #1
 8014220:	4628      	mov	r0, r5
 8014222:	b002      	add	sp, #8
 8014224:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014228:	f000 b806 	b.w	8014238 <__strtok_r>
 801422c:	2000145c 	.word	0x2000145c
 8014230:	0805d660 	.word	0x0805d660
 8014234:	0805d677 	.word	0x0805d677

08014238 <__strtok_r>:
 8014238:	b5f0      	push	{r4, r5, r6, r7, lr}
 801423a:	b908      	cbnz	r0, 8014240 <__strtok_r+0x8>
 801423c:	6810      	ldr	r0, [r2, #0]
 801423e:	b188      	cbz	r0, 8014264 <__strtok_r+0x2c>
 8014240:	4604      	mov	r4, r0
 8014242:	4620      	mov	r0, r4
 8014244:	f814 5b01 	ldrb.w	r5, [r4], #1
 8014248:	460f      	mov	r7, r1
 801424a:	f817 6b01 	ldrb.w	r6, [r7], #1
 801424e:	b91e      	cbnz	r6, 8014258 <__strtok_r+0x20>
 8014250:	b965      	cbnz	r5, 801426c <__strtok_r+0x34>
 8014252:	6015      	str	r5, [r2, #0]
 8014254:	4628      	mov	r0, r5
 8014256:	e005      	b.n	8014264 <__strtok_r+0x2c>
 8014258:	42b5      	cmp	r5, r6
 801425a:	d1f6      	bne.n	801424a <__strtok_r+0x12>
 801425c:	2b00      	cmp	r3, #0
 801425e:	d1f0      	bne.n	8014242 <__strtok_r+0xa>
 8014260:	6014      	str	r4, [r2, #0]
 8014262:	7003      	strb	r3, [r0, #0]
 8014264:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014266:	461c      	mov	r4, r3
 8014268:	e00c      	b.n	8014284 <__strtok_r+0x4c>
 801426a:	b915      	cbnz	r5, 8014272 <__strtok_r+0x3a>
 801426c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8014270:	460e      	mov	r6, r1
 8014272:	f816 5b01 	ldrb.w	r5, [r6], #1
 8014276:	42ab      	cmp	r3, r5
 8014278:	d1f7      	bne.n	801426a <__strtok_r+0x32>
 801427a:	2b00      	cmp	r3, #0
 801427c:	d0f3      	beq.n	8014266 <__strtok_r+0x2e>
 801427e:	2300      	movs	r3, #0
 8014280:	f804 3c01 	strb.w	r3, [r4, #-1]
 8014284:	6014      	str	r4, [r2, #0]
 8014286:	e7ed      	b.n	8014264 <__strtok_r+0x2c>

08014288 <_strtol_l.constprop.0>:
 8014288:	2b01      	cmp	r3, #1
 801428a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801428e:	d001      	beq.n	8014294 <_strtol_l.constprop.0+0xc>
 8014290:	2b24      	cmp	r3, #36	; 0x24
 8014292:	d906      	bls.n	80142a2 <_strtol_l.constprop.0+0x1a>
 8014294:	f7fe f922 	bl	80124dc <__errno>
 8014298:	2316      	movs	r3, #22
 801429a:	6003      	str	r3, [r0, #0]
 801429c:	2000      	movs	r0, #0
 801429e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80142a2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8014388 <_strtol_l.constprop.0+0x100>
 80142a6:	460d      	mov	r5, r1
 80142a8:	462e      	mov	r6, r5
 80142aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80142ae:	f814 700c 	ldrb.w	r7, [r4, ip]
 80142b2:	f017 0708 	ands.w	r7, r7, #8
 80142b6:	d1f7      	bne.n	80142a8 <_strtol_l.constprop.0+0x20>
 80142b8:	2c2d      	cmp	r4, #45	; 0x2d
 80142ba:	d132      	bne.n	8014322 <_strtol_l.constprop.0+0x9a>
 80142bc:	782c      	ldrb	r4, [r5, #0]
 80142be:	2701      	movs	r7, #1
 80142c0:	1cb5      	adds	r5, r6, #2
 80142c2:	2b00      	cmp	r3, #0
 80142c4:	d05b      	beq.n	801437e <_strtol_l.constprop.0+0xf6>
 80142c6:	2b10      	cmp	r3, #16
 80142c8:	d109      	bne.n	80142de <_strtol_l.constprop.0+0x56>
 80142ca:	2c30      	cmp	r4, #48	; 0x30
 80142cc:	d107      	bne.n	80142de <_strtol_l.constprop.0+0x56>
 80142ce:	782c      	ldrb	r4, [r5, #0]
 80142d0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80142d4:	2c58      	cmp	r4, #88	; 0x58
 80142d6:	d14d      	bne.n	8014374 <_strtol_l.constprop.0+0xec>
 80142d8:	786c      	ldrb	r4, [r5, #1]
 80142da:	2310      	movs	r3, #16
 80142dc:	3502      	adds	r5, #2
 80142de:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80142e2:	f108 38ff 	add.w	r8, r8, #4294967295
 80142e6:	f04f 0c00 	mov.w	ip, #0
 80142ea:	fbb8 f9f3 	udiv	r9, r8, r3
 80142ee:	4666      	mov	r6, ip
 80142f0:	fb03 8a19 	mls	sl, r3, r9, r8
 80142f4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80142f8:	f1be 0f09 	cmp.w	lr, #9
 80142fc:	d816      	bhi.n	801432c <_strtol_l.constprop.0+0xa4>
 80142fe:	4674      	mov	r4, lr
 8014300:	42a3      	cmp	r3, r4
 8014302:	dd24      	ble.n	801434e <_strtol_l.constprop.0+0xc6>
 8014304:	f1bc 0f00 	cmp.w	ip, #0
 8014308:	db1e      	blt.n	8014348 <_strtol_l.constprop.0+0xc0>
 801430a:	45b1      	cmp	r9, r6
 801430c:	d31c      	bcc.n	8014348 <_strtol_l.constprop.0+0xc0>
 801430e:	d101      	bne.n	8014314 <_strtol_l.constprop.0+0x8c>
 8014310:	45a2      	cmp	sl, r4
 8014312:	db19      	blt.n	8014348 <_strtol_l.constprop.0+0xc0>
 8014314:	fb06 4603 	mla	r6, r6, r3, r4
 8014318:	f04f 0c01 	mov.w	ip, #1
 801431c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014320:	e7e8      	b.n	80142f4 <_strtol_l.constprop.0+0x6c>
 8014322:	2c2b      	cmp	r4, #43	; 0x2b
 8014324:	bf04      	itt	eq
 8014326:	782c      	ldrbeq	r4, [r5, #0]
 8014328:	1cb5      	addeq	r5, r6, #2
 801432a:	e7ca      	b.n	80142c2 <_strtol_l.constprop.0+0x3a>
 801432c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8014330:	f1be 0f19 	cmp.w	lr, #25
 8014334:	d801      	bhi.n	801433a <_strtol_l.constprop.0+0xb2>
 8014336:	3c37      	subs	r4, #55	; 0x37
 8014338:	e7e2      	b.n	8014300 <_strtol_l.constprop.0+0x78>
 801433a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801433e:	f1be 0f19 	cmp.w	lr, #25
 8014342:	d804      	bhi.n	801434e <_strtol_l.constprop.0+0xc6>
 8014344:	3c57      	subs	r4, #87	; 0x57
 8014346:	e7db      	b.n	8014300 <_strtol_l.constprop.0+0x78>
 8014348:	f04f 3cff 	mov.w	ip, #4294967295
 801434c:	e7e6      	b.n	801431c <_strtol_l.constprop.0+0x94>
 801434e:	f1bc 0f00 	cmp.w	ip, #0
 8014352:	da05      	bge.n	8014360 <_strtol_l.constprop.0+0xd8>
 8014354:	2322      	movs	r3, #34	; 0x22
 8014356:	6003      	str	r3, [r0, #0]
 8014358:	4646      	mov	r6, r8
 801435a:	b942      	cbnz	r2, 801436e <_strtol_l.constprop.0+0xe6>
 801435c:	4630      	mov	r0, r6
 801435e:	e79e      	b.n	801429e <_strtol_l.constprop.0+0x16>
 8014360:	b107      	cbz	r7, 8014364 <_strtol_l.constprop.0+0xdc>
 8014362:	4276      	negs	r6, r6
 8014364:	2a00      	cmp	r2, #0
 8014366:	d0f9      	beq.n	801435c <_strtol_l.constprop.0+0xd4>
 8014368:	f1bc 0f00 	cmp.w	ip, #0
 801436c:	d000      	beq.n	8014370 <_strtol_l.constprop.0+0xe8>
 801436e:	1e69      	subs	r1, r5, #1
 8014370:	6011      	str	r1, [r2, #0]
 8014372:	e7f3      	b.n	801435c <_strtol_l.constprop.0+0xd4>
 8014374:	2430      	movs	r4, #48	; 0x30
 8014376:	2b00      	cmp	r3, #0
 8014378:	d1b1      	bne.n	80142de <_strtol_l.constprop.0+0x56>
 801437a:	2308      	movs	r3, #8
 801437c:	e7af      	b.n	80142de <_strtol_l.constprop.0+0x56>
 801437e:	2c30      	cmp	r4, #48	; 0x30
 8014380:	d0a5      	beq.n	80142ce <_strtol_l.constprop.0+0x46>
 8014382:	230a      	movs	r3, #10
 8014384:	e7ab      	b.n	80142de <_strtol_l.constprop.0+0x56>
 8014386:	bf00      	nop
 8014388:	0805d711 	.word	0x0805d711

0801438c <_strtol_r>:
 801438c:	f7ff bf7c 	b.w	8014288 <_strtol_l.constprop.0>

08014390 <_write_r>:
 8014390:	b538      	push	{r3, r4, r5, lr}
 8014392:	4d07      	ldr	r5, [pc, #28]	; (80143b0 <_write_r+0x20>)
 8014394:	4604      	mov	r4, r0
 8014396:	4608      	mov	r0, r1
 8014398:	4611      	mov	r1, r2
 801439a:	2200      	movs	r2, #0
 801439c:	602a      	str	r2, [r5, #0]
 801439e:	461a      	mov	r2, r3
 80143a0:	f004 f958 	bl	8018654 <_write>
 80143a4:	1c43      	adds	r3, r0, #1
 80143a6:	d102      	bne.n	80143ae <_write_r+0x1e>
 80143a8:	682b      	ldr	r3, [r5, #0]
 80143aa:	b103      	cbz	r3, 80143ae <_write_r+0x1e>
 80143ac:	6023      	str	r3, [r4, #0]
 80143ae:	bd38      	pop	{r3, r4, r5, pc}
 80143b0:	2000c66c 	.word	0x2000c66c

080143b4 <__assert_func>:
 80143b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80143b6:	4614      	mov	r4, r2
 80143b8:	461a      	mov	r2, r3
 80143ba:	4b09      	ldr	r3, [pc, #36]	; (80143e0 <__assert_func+0x2c>)
 80143bc:	681b      	ldr	r3, [r3, #0]
 80143be:	4605      	mov	r5, r0
 80143c0:	68d8      	ldr	r0, [r3, #12]
 80143c2:	b14c      	cbz	r4, 80143d8 <__assert_func+0x24>
 80143c4:	4b07      	ldr	r3, [pc, #28]	; (80143e4 <__assert_func+0x30>)
 80143c6:	9100      	str	r1, [sp, #0]
 80143c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80143cc:	4906      	ldr	r1, [pc, #24]	; (80143e8 <__assert_func+0x34>)
 80143ce:	462b      	mov	r3, r5
 80143d0:	f000 fe98 	bl	8015104 <fiprintf>
 80143d4:	f002 ff10 	bl	80171f8 <abort>
 80143d8:	4b04      	ldr	r3, [pc, #16]	; (80143ec <__assert_func+0x38>)
 80143da:	461c      	mov	r4, r3
 80143dc:	e7f3      	b.n	80143c6 <__assert_func+0x12>
 80143de:	bf00      	nop
 80143e0:	2000145c 	.word	0x2000145c
 80143e4:	0805d6d4 	.word	0x0805d6d4
 80143e8:	0805d6e1 	.word	0x0805d6e1
 80143ec:	0805d70f 	.word	0x0805d70f

080143f0 <_close_r>:
 80143f0:	b538      	push	{r3, r4, r5, lr}
 80143f2:	4d06      	ldr	r5, [pc, #24]	; (801440c <_close_r+0x1c>)
 80143f4:	2300      	movs	r3, #0
 80143f6:	4604      	mov	r4, r0
 80143f8:	4608      	mov	r0, r1
 80143fa:	602b      	str	r3, [r5, #0]
 80143fc:	f004 f8f2 	bl	80185e4 <_close>
 8014400:	1c43      	adds	r3, r0, #1
 8014402:	d102      	bne.n	801440a <_close_r+0x1a>
 8014404:	682b      	ldr	r3, [r5, #0]
 8014406:	b103      	cbz	r3, 801440a <_close_r+0x1a>
 8014408:	6023      	str	r3, [r4, #0]
 801440a:	bd38      	pop	{r3, r4, r5, pc}
 801440c:	2000c66c 	.word	0x2000c66c

08014410 <quorem>:
 8014410:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014414:	6903      	ldr	r3, [r0, #16]
 8014416:	690c      	ldr	r4, [r1, #16]
 8014418:	42a3      	cmp	r3, r4
 801441a:	4607      	mov	r7, r0
 801441c:	f2c0 8081 	blt.w	8014522 <quorem+0x112>
 8014420:	3c01      	subs	r4, #1
 8014422:	f101 0814 	add.w	r8, r1, #20
 8014426:	f100 0514 	add.w	r5, r0, #20
 801442a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801442e:	9301      	str	r3, [sp, #4]
 8014430:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014434:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014438:	3301      	adds	r3, #1
 801443a:	429a      	cmp	r2, r3
 801443c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8014440:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014444:	fbb2 f6f3 	udiv	r6, r2, r3
 8014448:	d331      	bcc.n	80144ae <quorem+0x9e>
 801444a:	f04f 0e00 	mov.w	lr, #0
 801444e:	4640      	mov	r0, r8
 8014450:	46ac      	mov	ip, r5
 8014452:	46f2      	mov	sl, lr
 8014454:	f850 2b04 	ldr.w	r2, [r0], #4
 8014458:	b293      	uxth	r3, r2
 801445a:	fb06 e303 	mla	r3, r6, r3, lr
 801445e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8014462:	b29b      	uxth	r3, r3
 8014464:	ebaa 0303 	sub.w	r3, sl, r3
 8014468:	f8dc a000 	ldr.w	sl, [ip]
 801446c:	0c12      	lsrs	r2, r2, #16
 801446e:	fa13 f38a 	uxtah	r3, r3, sl
 8014472:	fb06 e202 	mla	r2, r6, r2, lr
 8014476:	9300      	str	r3, [sp, #0]
 8014478:	9b00      	ldr	r3, [sp, #0]
 801447a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801447e:	b292      	uxth	r2, r2
 8014480:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8014484:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014488:	f8bd 3000 	ldrh.w	r3, [sp]
 801448c:	4581      	cmp	r9, r0
 801448e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014492:	f84c 3b04 	str.w	r3, [ip], #4
 8014496:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801449a:	d2db      	bcs.n	8014454 <quorem+0x44>
 801449c:	f855 300b 	ldr.w	r3, [r5, fp]
 80144a0:	b92b      	cbnz	r3, 80144ae <quorem+0x9e>
 80144a2:	9b01      	ldr	r3, [sp, #4]
 80144a4:	3b04      	subs	r3, #4
 80144a6:	429d      	cmp	r5, r3
 80144a8:	461a      	mov	r2, r3
 80144aa:	d32e      	bcc.n	801450a <quorem+0xfa>
 80144ac:	613c      	str	r4, [r7, #16]
 80144ae:	4638      	mov	r0, r7
 80144b0:	f001 fcaa 	bl	8015e08 <__mcmp>
 80144b4:	2800      	cmp	r0, #0
 80144b6:	db24      	blt.n	8014502 <quorem+0xf2>
 80144b8:	3601      	adds	r6, #1
 80144ba:	4628      	mov	r0, r5
 80144bc:	f04f 0c00 	mov.w	ip, #0
 80144c0:	f858 2b04 	ldr.w	r2, [r8], #4
 80144c4:	f8d0 e000 	ldr.w	lr, [r0]
 80144c8:	b293      	uxth	r3, r2
 80144ca:	ebac 0303 	sub.w	r3, ip, r3
 80144ce:	0c12      	lsrs	r2, r2, #16
 80144d0:	fa13 f38e 	uxtah	r3, r3, lr
 80144d4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80144d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80144dc:	b29b      	uxth	r3, r3
 80144de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80144e2:	45c1      	cmp	r9, r8
 80144e4:	f840 3b04 	str.w	r3, [r0], #4
 80144e8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80144ec:	d2e8      	bcs.n	80144c0 <quorem+0xb0>
 80144ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80144f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80144f6:	b922      	cbnz	r2, 8014502 <quorem+0xf2>
 80144f8:	3b04      	subs	r3, #4
 80144fa:	429d      	cmp	r5, r3
 80144fc:	461a      	mov	r2, r3
 80144fe:	d30a      	bcc.n	8014516 <quorem+0x106>
 8014500:	613c      	str	r4, [r7, #16]
 8014502:	4630      	mov	r0, r6
 8014504:	b003      	add	sp, #12
 8014506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801450a:	6812      	ldr	r2, [r2, #0]
 801450c:	3b04      	subs	r3, #4
 801450e:	2a00      	cmp	r2, #0
 8014510:	d1cc      	bne.n	80144ac <quorem+0x9c>
 8014512:	3c01      	subs	r4, #1
 8014514:	e7c7      	b.n	80144a6 <quorem+0x96>
 8014516:	6812      	ldr	r2, [r2, #0]
 8014518:	3b04      	subs	r3, #4
 801451a:	2a00      	cmp	r2, #0
 801451c:	d1f0      	bne.n	8014500 <quorem+0xf0>
 801451e:	3c01      	subs	r4, #1
 8014520:	e7eb      	b.n	80144fa <quorem+0xea>
 8014522:	2000      	movs	r0, #0
 8014524:	e7ee      	b.n	8014504 <quorem+0xf4>
	...

08014528 <_dtoa_r>:
 8014528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801452c:	ed2d 8b04 	vpush	{d8-d9}
 8014530:	ec57 6b10 	vmov	r6, r7, d0
 8014534:	b093      	sub	sp, #76	; 0x4c
 8014536:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014538:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801453c:	9106      	str	r1, [sp, #24]
 801453e:	ee10 aa10 	vmov	sl, s0
 8014542:	4604      	mov	r4, r0
 8014544:	9209      	str	r2, [sp, #36]	; 0x24
 8014546:	930c      	str	r3, [sp, #48]	; 0x30
 8014548:	46bb      	mov	fp, r7
 801454a:	b975      	cbnz	r5, 801456a <_dtoa_r+0x42>
 801454c:	2010      	movs	r0, #16
 801454e:	f7fd ffef 	bl	8012530 <malloc>
 8014552:	4602      	mov	r2, r0
 8014554:	6260      	str	r0, [r4, #36]	; 0x24
 8014556:	b920      	cbnz	r0, 8014562 <_dtoa_r+0x3a>
 8014558:	4ba7      	ldr	r3, [pc, #668]	; (80147f8 <_dtoa_r+0x2d0>)
 801455a:	21ea      	movs	r1, #234	; 0xea
 801455c:	48a7      	ldr	r0, [pc, #668]	; (80147fc <_dtoa_r+0x2d4>)
 801455e:	f7ff ff29 	bl	80143b4 <__assert_func>
 8014562:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8014566:	6005      	str	r5, [r0, #0]
 8014568:	60c5      	str	r5, [r0, #12]
 801456a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801456c:	6819      	ldr	r1, [r3, #0]
 801456e:	b151      	cbz	r1, 8014586 <_dtoa_r+0x5e>
 8014570:	685a      	ldr	r2, [r3, #4]
 8014572:	604a      	str	r2, [r1, #4]
 8014574:	2301      	movs	r3, #1
 8014576:	4093      	lsls	r3, r2
 8014578:	608b      	str	r3, [r1, #8]
 801457a:	4620      	mov	r0, r4
 801457c:	f001 f9b8 	bl	80158f0 <_Bfree>
 8014580:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014582:	2200      	movs	r2, #0
 8014584:	601a      	str	r2, [r3, #0]
 8014586:	1e3b      	subs	r3, r7, #0
 8014588:	bfaa      	itet	ge
 801458a:	2300      	movge	r3, #0
 801458c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8014590:	f8c8 3000 	strge.w	r3, [r8]
 8014594:	4b9a      	ldr	r3, [pc, #616]	; (8014800 <_dtoa_r+0x2d8>)
 8014596:	bfbc      	itt	lt
 8014598:	2201      	movlt	r2, #1
 801459a:	f8c8 2000 	strlt.w	r2, [r8]
 801459e:	ea33 030b 	bics.w	r3, r3, fp
 80145a2:	d11b      	bne.n	80145dc <_dtoa_r+0xb4>
 80145a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80145a6:	f242 730f 	movw	r3, #9999	; 0x270f
 80145aa:	6013      	str	r3, [r2, #0]
 80145ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80145b0:	4333      	orrs	r3, r6
 80145b2:	f000 8592 	beq.w	80150da <_dtoa_r+0xbb2>
 80145b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80145b8:	b963      	cbnz	r3, 80145d4 <_dtoa_r+0xac>
 80145ba:	4b92      	ldr	r3, [pc, #584]	; (8014804 <_dtoa_r+0x2dc>)
 80145bc:	e022      	b.n	8014604 <_dtoa_r+0xdc>
 80145be:	4b92      	ldr	r3, [pc, #584]	; (8014808 <_dtoa_r+0x2e0>)
 80145c0:	9301      	str	r3, [sp, #4]
 80145c2:	3308      	adds	r3, #8
 80145c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80145c6:	6013      	str	r3, [r2, #0]
 80145c8:	9801      	ldr	r0, [sp, #4]
 80145ca:	b013      	add	sp, #76	; 0x4c
 80145cc:	ecbd 8b04 	vpop	{d8-d9}
 80145d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80145d4:	4b8b      	ldr	r3, [pc, #556]	; (8014804 <_dtoa_r+0x2dc>)
 80145d6:	9301      	str	r3, [sp, #4]
 80145d8:	3303      	adds	r3, #3
 80145da:	e7f3      	b.n	80145c4 <_dtoa_r+0x9c>
 80145dc:	2200      	movs	r2, #0
 80145de:	2300      	movs	r3, #0
 80145e0:	4650      	mov	r0, sl
 80145e2:	4659      	mov	r1, fp
 80145e4:	f7ec faa0 	bl	8000b28 <__aeabi_dcmpeq>
 80145e8:	ec4b ab19 	vmov	d9, sl, fp
 80145ec:	4680      	mov	r8, r0
 80145ee:	b158      	cbz	r0, 8014608 <_dtoa_r+0xe0>
 80145f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80145f2:	2301      	movs	r3, #1
 80145f4:	6013      	str	r3, [r2, #0]
 80145f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80145f8:	2b00      	cmp	r3, #0
 80145fa:	f000 856b 	beq.w	80150d4 <_dtoa_r+0xbac>
 80145fe:	4883      	ldr	r0, [pc, #524]	; (801480c <_dtoa_r+0x2e4>)
 8014600:	6018      	str	r0, [r3, #0]
 8014602:	1e43      	subs	r3, r0, #1
 8014604:	9301      	str	r3, [sp, #4]
 8014606:	e7df      	b.n	80145c8 <_dtoa_r+0xa0>
 8014608:	ec4b ab10 	vmov	d0, sl, fp
 801460c:	aa10      	add	r2, sp, #64	; 0x40
 801460e:	a911      	add	r1, sp, #68	; 0x44
 8014610:	4620      	mov	r0, r4
 8014612:	f001 fd1b 	bl	801604c <__d2b>
 8014616:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801461a:	ee08 0a10 	vmov	s16, r0
 801461e:	2d00      	cmp	r5, #0
 8014620:	f000 8084 	beq.w	801472c <_dtoa_r+0x204>
 8014624:	ee19 3a90 	vmov	r3, s19
 8014628:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801462c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8014630:	4656      	mov	r6, sl
 8014632:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8014636:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801463a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801463e:	4b74      	ldr	r3, [pc, #464]	; (8014810 <_dtoa_r+0x2e8>)
 8014640:	2200      	movs	r2, #0
 8014642:	4630      	mov	r0, r6
 8014644:	4639      	mov	r1, r7
 8014646:	f7eb fe4f 	bl	80002e8 <__aeabi_dsub>
 801464a:	a365      	add	r3, pc, #404	; (adr r3, 80147e0 <_dtoa_r+0x2b8>)
 801464c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014650:	f7ec f802 	bl	8000658 <__aeabi_dmul>
 8014654:	a364      	add	r3, pc, #400	; (adr r3, 80147e8 <_dtoa_r+0x2c0>)
 8014656:	e9d3 2300 	ldrd	r2, r3, [r3]
 801465a:	f7eb fe47 	bl	80002ec <__adddf3>
 801465e:	4606      	mov	r6, r0
 8014660:	4628      	mov	r0, r5
 8014662:	460f      	mov	r7, r1
 8014664:	f7eb ff8e 	bl	8000584 <__aeabi_i2d>
 8014668:	a361      	add	r3, pc, #388	; (adr r3, 80147f0 <_dtoa_r+0x2c8>)
 801466a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801466e:	f7eb fff3 	bl	8000658 <__aeabi_dmul>
 8014672:	4602      	mov	r2, r0
 8014674:	460b      	mov	r3, r1
 8014676:	4630      	mov	r0, r6
 8014678:	4639      	mov	r1, r7
 801467a:	f7eb fe37 	bl	80002ec <__adddf3>
 801467e:	4606      	mov	r6, r0
 8014680:	460f      	mov	r7, r1
 8014682:	f7ec fa99 	bl	8000bb8 <__aeabi_d2iz>
 8014686:	2200      	movs	r2, #0
 8014688:	9000      	str	r0, [sp, #0]
 801468a:	2300      	movs	r3, #0
 801468c:	4630      	mov	r0, r6
 801468e:	4639      	mov	r1, r7
 8014690:	f7ec fa54 	bl	8000b3c <__aeabi_dcmplt>
 8014694:	b150      	cbz	r0, 80146ac <_dtoa_r+0x184>
 8014696:	9800      	ldr	r0, [sp, #0]
 8014698:	f7eb ff74 	bl	8000584 <__aeabi_i2d>
 801469c:	4632      	mov	r2, r6
 801469e:	463b      	mov	r3, r7
 80146a0:	f7ec fa42 	bl	8000b28 <__aeabi_dcmpeq>
 80146a4:	b910      	cbnz	r0, 80146ac <_dtoa_r+0x184>
 80146a6:	9b00      	ldr	r3, [sp, #0]
 80146a8:	3b01      	subs	r3, #1
 80146aa:	9300      	str	r3, [sp, #0]
 80146ac:	9b00      	ldr	r3, [sp, #0]
 80146ae:	2b16      	cmp	r3, #22
 80146b0:	d85a      	bhi.n	8014768 <_dtoa_r+0x240>
 80146b2:	9a00      	ldr	r2, [sp, #0]
 80146b4:	4b57      	ldr	r3, [pc, #348]	; (8014814 <_dtoa_r+0x2ec>)
 80146b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80146ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146be:	ec51 0b19 	vmov	r0, r1, d9
 80146c2:	f7ec fa3b 	bl	8000b3c <__aeabi_dcmplt>
 80146c6:	2800      	cmp	r0, #0
 80146c8:	d050      	beq.n	801476c <_dtoa_r+0x244>
 80146ca:	9b00      	ldr	r3, [sp, #0]
 80146cc:	3b01      	subs	r3, #1
 80146ce:	9300      	str	r3, [sp, #0]
 80146d0:	2300      	movs	r3, #0
 80146d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80146d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80146d6:	1b5d      	subs	r5, r3, r5
 80146d8:	1e6b      	subs	r3, r5, #1
 80146da:	9305      	str	r3, [sp, #20]
 80146dc:	bf45      	ittet	mi
 80146de:	f1c5 0301 	rsbmi	r3, r5, #1
 80146e2:	9304      	strmi	r3, [sp, #16]
 80146e4:	2300      	movpl	r3, #0
 80146e6:	2300      	movmi	r3, #0
 80146e8:	bf4c      	ite	mi
 80146ea:	9305      	strmi	r3, [sp, #20]
 80146ec:	9304      	strpl	r3, [sp, #16]
 80146ee:	9b00      	ldr	r3, [sp, #0]
 80146f0:	2b00      	cmp	r3, #0
 80146f2:	db3d      	blt.n	8014770 <_dtoa_r+0x248>
 80146f4:	9b05      	ldr	r3, [sp, #20]
 80146f6:	9a00      	ldr	r2, [sp, #0]
 80146f8:	920a      	str	r2, [sp, #40]	; 0x28
 80146fa:	4413      	add	r3, r2
 80146fc:	9305      	str	r3, [sp, #20]
 80146fe:	2300      	movs	r3, #0
 8014700:	9307      	str	r3, [sp, #28]
 8014702:	9b06      	ldr	r3, [sp, #24]
 8014704:	2b09      	cmp	r3, #9
 8014706:	f200 8089 	bhi.w	801481c <_dtoa_r+0x2f4>
 801470a:	2b05      	cmp	r3, #5
 801470c:	bfc4      	itt	gt
 801470e:	3b04      	subgt	r3, #4
 8014710:	9306      	strgt	r3, [sp, #24]
 8014712:	9b06      	ldr	r3, [sp, #24]
 8014714:	f1a3 0302 	sub.w	r3, r3, #2
 8014718:	bfcc      	ite	gt
 801471a:	2500      	movgt	r5, #0
 801471c:	2501      	movle	r5, #1
 801471e:	2b03      	cmp	r3, #3
 8014720:	f200 8087 	bhi.w	8014832 <_dtoa_r+0x30a>
 8014724:	e8df f003 	tbb	[pc, r3]
 8014728:	59383a2d 	.word	0x59383a2d
 801472c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8014730:	441d      	add	r5, r3
 8014732:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8014736:	2b20      	cmp	r3, #32
 8014738:	bfc1      	itttt	gt
 801473a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801473e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8014742:	fa0b f303 	lslgt.w	r3, fp, r3
 8014746:	fa26 f000 	lsrgt.w	r0, r6, r0
 801474a:	bfda      	itte	le
 801474c:	f1c3 0320 	rsble	r3, r3, #32
 8014750:	fa06 f003 	lslle.w	r0, r6, r3
 8014754:	4318      	orrgt	r0, r3
 8014756:	f7eb ff05 	bl	8000564 <__aeabi_ui2d>
 801475a:	2301      	movs	r3, #1
 801475c:	4606      	mov	r6, r0
 801475e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8014762:	3d01      	subs	r5, #1
 8014764:	930e      	str	r3, [sp, #56]	; 0x38
 8014766:	e76a      	b.n	801463e <_dtoa_r+0x116>
 8014768:	2301      	movs	r3, #1
 801476a:	e7b2      	b.n	80146d2 <_dtoa_r+0x1aa>
 801476c:	900b      	str	r0, [sp, #44]	; 0x2c
 801476e:	e7b1      	b.n	80146d4 <_dtoa_r+0x1ac>
 8014770:	9b04      	ldr	r3, [sp, #16]
 8014772:	9a00      	ldr	r2, [sp, #0]
 8014774:	1a9b      	subs	r3, r3, r2
 8014776:	9304      	str	r3, [sp, #16]
 8014778:	4253      	negs	r3, r2
 801477a:	9307      	str	r3, [sp, #28]
 801477c:	2300      	movs	r3, #0
 801477e:	930a      	str	r3, [sp, #40]	; 0x28
 8014780:	e7bf      	b.n	8014702 <_dtoa_r+0x1da>
 8014782:	2300      	movs	r3, #0
 8014784:	9308      	str	r3, [sp, #32]
 8014786:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014788:	2b00      	cmp	r3, #0
 801478a:	dc55      	bgt.n	8014838 <_dtoa_r+0x310>
 801478c:	2301      	movs	r3, #1
 801478e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8014792:	461a      	mov	r2, r3
 8014794:	9209      	str	r2, [sp, #36]	; 0x24
 8014796:	e00c      	b.n	80147b2 <_dtoa_r+0x28a>
 8014798:	2301      	movs	r3, #1
 801479a:	e7f3      	b.n	8014784 <_dtoa_r+0x25c>
 801479c:	2300      	movs	r3, #0
 801479e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80147a0:	9308      	str	r3, [sp, #32]
 80147a2:	9b00      	ldr	r3, [sp, #0]
 80147a4:	4413      	add	r3, r2
 80147a6:	9302      	str	r3, [sp, #8]
 80147a8:	3301      	adds	r3, #1
 80147aa:	2b01      	cmp	r3, #1
 80147ac:	9303      	str	r3, [sp, #12]
 80147ae:	bfb8      	it	lt
 80147b0:	2301      	movlt	r3, #1
 80147b2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80147b4:	2200      	movs	r2, #0
 80147b6:	6042      	str	r2, [r0, #4]
 80147b8:	2204      	movs	r2, #4
 80147ba:	f102 0614 	add.w	r6, r2, #20
 80147be:	429e      	cmp	r6, r3
 80147c0:	6841      	ldr	r1, [r0, #4]
 80147c2:	d93d      	bls.n	8014840 <_dtoa_r+0x318>
 80147c4:	4620      	mov	r0, r4
 80147c6:	f001 f853 	bl	8015870 <_Balloc>
 80147ca:	9001      	str	r0, [sp, #4]
 80147cc:	2800      	cmp	r0, #0
 80147ce:	d13b      	bne.n	8014848 <_dtoa_r+0x320>
 80147d0:	4b11      	ldr	r3, [pc, #68]	; (8014818 <_dtoa_r+0x2f0>)
 80147d2:	4602      	mov	r2, r0
 80147d4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80147d8:	e6c0      	b.n	801455c <_dtoa_r+0x34>
 80147da:	2301      	movs	r3, #1
 80147dc:	e7df      	b.n	801479e <_dtoa_r+0x276>
 80147de:	bf00      	nop
 80147e0:	636f4361 	.word	0x636f4361
 80147e4:	3fd287a7 	.word	0x3fd287a7
 80147e8:	8b60c8b3 	.word	0x8b60c8b3
 80147ec:	3fc68a28 	.word	0x3fc68a28
 80147f0:	509f79fb 	.word	0x509f79fb
 80147f4:	3fd34413 	.word	0x3fd34413
 80147f8:	0805d660 	.word	0x0805d660
 80147fc:	0805d81e 	.word	0x0805d81e
 8014800:	7ff00000 	.word	0x7ff00000
 8014804:	0805d81a 	.word	0x0805d81a
 8014808:	0805d811 	.word	0x0805d811
 801480c:	0805da72 	.word	0x0805da72
 8014810:	3ff80000 	.word	0x3ff80000
 8014814:	0805d988 	.word	0x0805d988
 8014818:	0805d879 	.word	0x0805d879
 801481c:	2501      	movs	r5, #1
 801481e:	2300      	movs	r3, #0
 8014820:	9306      	str	r3, [sp, #24]
 8014822:	9508      	str	r5, [sp, #32]
 8014824:	f04f 33ff 	mov.w	r3, #4294967295
 8014828:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801482c:	2200      	movs	r2, #0
 801482e:	2312      	movs	r3, #18
 8014830:	e7b0      	b.n	8014794 <_dtoa_r+0x26c>
 8014832:	2301      	movs	r3, #1
 8014834:	9308      	str	r3, [sp, #32]
 8014836:	e7f5      	b.n	8014824 <_dtoa_r+0x2fc>
 8014838:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801483a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801483e:	e7b8      	b.n	80147b2 <_dtoa_r+0x28a>
 8014840:	3101      	adds	r1, #1
 8014842:	6041      	str	r1, [r0, #4]
 8014844:	0052      	lsls	r2, r2, #1
 8014846:	e7b8      	b.n	80147ba <_dtoa_r+0x292>
 8014848:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801484a:	9a01      	ldr	r2, [sp, #4]
 801484c:	601a      	str	r2, [r3, #0]
 801484e:	9b03      	ldr	r3, [sp, #12]
 8014850:	2b0e      	cmp	r3, #14
 8014852:	f200 809d 	bhi.w	8014990 <_dtoa_r+0x468>
 8014856:	2d00      	cmp	r5, #0
 8014858:	f000 809a 	beq.w	8014990 <_dtoa_r+0x468>
 801485c:	9b00      	ldr	r3, [sp, #0]
 801485e:	2b00      	cmp	r3, #0
 8014860:	dd32      	ble.n	80148c8 <_dtoa_r+0x3a0>
 8014862:	4ab7      	ldr	r2, [pc, #732]	; (8014b40 <_dtoa_r+0x618>)
 8014864:	f003 030f 	and.w	r3, r3, #15
 8014868:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801486c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014870:	9b00      	ldr	r3, [sp, #0]
 8014872:	05d8      	lsls	r0, r3, #23
 8014874:	ea4f 1723 	mov.w	r7, r3, asr #4
 8014878:	d516      	bpl.n	80148a8 <_dtoa_r+0x380>
 801487a:	4bb2      	ldr	r3, [pc, #712]	; (8014b44 <_dtoa_r+0x61c>)
 801487c:	ec51 0b19 	vmov	r0, r1, d9
 8014880:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8014884:	f7ec f812 	bl	80008ac <__aeabi_ddiv>
 8014888:	f007 070f 	and.w	r7, r7, #15
 801488c:	4682      	mov	sl, r0
 801488e:	468b      	mov	fp, r1
 8014890:	2503      	movs	r5, #3
 8014892:	4eac      	ldr	r6, [pc, #688]	; (8014b44 <_dtoa_r+0x61c>)
 8014894:	b957      	cbnz	r7, 80148ac <_dtoa_r+0x384>
 8014896:	4642      	mov	r2, r8
 8014898:	464b      	mov	r3, r9
 801489a:	4650      	mov	r0, sl
 801489c:	4659      	mov	r1, fp
 801489e:	f7ec f805 	bl	80008ac <__aeabi_ddiv>
 80148a2:	4682      	mov	sl, r0
 80148a4:	468b      	mov	fp, r1
 80148a6:	e028      	b.n	80148fa <_dtoa_r+0x3d2>
 80148a8:	2502      	movs	r5, #2
 80148aa:	e7f2      	b.n	8014892 <_dtoa_r+0x36a>
 80148ac:	07f9      	lsls	r1, r7, #31
 80148ae:	d508      	bpl.n	80148c2 <_dtoa_r+0x39a>
 80148b0:	4640      	mov	r0, r8
 80148b2:	4649      	mov	r1, r9
 80148b4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80148b8:	f7eb fece 	bl	8000658 <__aeabi_dmul>
 80148bc:	3501      	adds	r5, #1
 80148be:	4680      	mov	r8, r0
 80148c0:	4689      	mov	r9, r1
 80148c2:	107f      	asrs	r7, r7, #1
 80148c4:	3608      	adds	r6, #8
 80148c6:	e7e5      	b.n	8014894 <_dtoa_r+0x36c>
 80148c8:	f000 809b 	beq.w	8014a02 <_dtoa_r+0x4da>
 80148cc:	9b00      	ldr	r3, [sp, #0]
 80148ce:	4f9d      	ldr	r7, [pc, #628]	; (8014b44 <_dtoa_r+0x61c>)
 80148d0:	425e      	negs	r6, r3
 80148d2:	4b9b      	ldr	r3, [pc, #620]	; (8014b40 <_dtoa_r+0x618>)
 80148d4:	f006 020f 	and.w	r2, r6, #15
 80148d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80148dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148e0:	ec51 0b19 	vmov	r0, r1, d9
 80148e4:	f7eb feb8 	bl	8000658 <__aeabi_dmul>
 80148e8:	1136      	asrs	r6, r6, #4
 80148ea:	4682      	mov	sl, r0
 80148ec:	468b      	mov	fp, r1
 80148ee:	2300      	movs	r3, #0
 80148f0:	2502      	movs	r5, #2
 80148f2:	2e00      	cmp	r6, #0
 80148f4:	d17a      	bne.n	80149ec <_dtoa_r+0x4c4>
 80148f6:	2b00      	cmp	r3, #0
 80148f8:	d1d3      	bne.n	80148a2 <_dtoa_r+0x37a>
 80148fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80148fc:	2b00      	cmp	r3, #0
 80148fe:	f000 8082 	beq.w	8014a06 <_dtoa_r+0x4de>
 8014902:	4b91      	ldr	r3, [pc, #580]	; (8014b48 <_dtoa_r+0x620>)
 8014904:	2200      	movs	r2, #0
 8014906:	4650      	mov	r0, sl
 8014908:	4659      	mov	r1, fp
 801490a:	f7ec f917 	bl	8000b3c <__aeabi_dcmplt>
 801490e:	2800      	cmp	r0, #0
 8014910:	d079      	beq.n	8014a06 <_dtoa_r+0x4de>
 8014912:	9b03      	ldr	r3, [sp, #12]
 8014914:	2b00      	cmp	r3, #0
 8014916:	d076      	beq.n	8014a06 <_dtoa_r+0x4de>
 8014918:	9b02      	ldr	r3, [sp, #8]
 801491a:	2b00      	cmp	r3, #0
 801491c:	dd36      	ble.n	801498c <_dtoa_r+0x464>
 801491e:	9b00      	ldr	r3, [sp, #0]
 8014920:	4650      	mov	r0, sl
 8014922:	4659      	mov	r1, fp
 8014924:	1e5f      	subs	r7, r3, #1
 8014926:	2200      	movs	r2, #0
 8014928:	4b88      	ldr	r3, [pc, #544]	; (8014b4c <_dtoa_r+0x624>)
 801492a:	f7eb fe95 	bl	8000658 <__aeabi_dmul>
 801492e:	9e02      	ldr	r6, [sp, #8]
 8014930:	4682      	mov	sl, r0
 8014932:	468b      	mov	fp, r1
 8014934:	3501      	adds	r5, #1
 8014936:	4628      	mov	r0, r5
 8014938:	f7eb fe24 	bl	8000584 <__aeabi_i2d>
 801493c:	4652      	mov	r2, sl
 801493e:	465b      	mov	r3, fp
 8014940:	f7eb fe8a 	bl	8000658 <__aeabi_dmul>
 8014944:	4b82      	ldr	r3, [pc, #520]	; (8014b50 <_dtoa_r+0x628>)
 8014946:	2200      	movs	r2, #0
 8014948:	f7eb fcd0 	bl	80002ec <__adddf3>
 801494c:	46d0      	mov	r8, sl
 801494e:	46d9      	mov	r9, fp
 8014950:	4682      	mov	sl, r0
 8014952:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8014956:	2e00      	cmp	r6, #0
 8014958:	d158      	bne.n	8014a0c <_dtoa_r+0x4e4>
 801495a:	4b7e      	ldr	r3, [pc, #504]	; (8014b54 <_dtoa_r+0x62c>)
 801495c:	2200      	movs	r2, #0
 801495e:	4640      	mov	r0, r8
 8014960:	4649      	mov	r1, r9
 8014962:	f7eb fcc1 	bl	80002e8 <__aeabi_dsub>
 8014966:	4652      	mov	r2, sl
 8014968:	465b      	mov	r3, fp
 801496a:	4680      	mov	r8, r0
 801496c:	4689      	mov	r9, r1
 801496e:	f7ec f903 	bl	8000b78 <__aeabi_dcmpgt>
 8014972:	2800      	cmp	r0, #0
 8014974:	f040 8295 	bne.w	8014ea2 <_dtoa_r+0x97a>
 8014978:	4652      	mov	r2, sl
 801497a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801497e:	4640      	mov	r0, r8
 8014980:	4649      	mov	r1, r9
 8014982:	f7ec f8db 	bl	8000b3c <__aeabi_dcmplt>
 8014986:	2800      	cmp	r0, #0
 8014988:	f040 8289 	bne.w	8014e9e <_dtoa_r+0x976>
 801498c:	ec5b ab19 	vmov	sl, fp, d9
 8014990:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014992:	2b00      	cmp	r3, #0
 8014994:	f2c0 8148 	blt.w	8014c28 <_dtoa_r+0x700>
 8014998:	9a00      	ldr	r2, [sp, #0]
 801499a:	2a0e      	cmp	r2, #14
 801499c:	f300 8144 	bgt.w	8014c28 <_dtoa_r+0x700>
 80149a0:	4b67      	ldr	r3, [pc, #412]	; (8014b40 <_dtoa_r+0x618>)
 80149a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80149a6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80149aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80149ac:	2b00      	cmp	r3, #0
 80149ae:	f280 80d5 	bge.w	8014b5c <_dtoa_r+0x634>
 80149b2:	9b03      	ldr	r3, [sp, #12]
 80149b4:	2b00      	cmp	r3, #0
 80149b6:	f300 80d1 	bgt.w	8014b5c <_dtoa_r+0x634>
 80149ba:	f040 826f 	bne.w	8014e9c <_dtoa_r+0x974>
 80149be:	4b65      	ldr	r3, [pc, #404]	; (8014b54 <_dtoa_r+0x62c>)
 80149c0:	2200      	movs	r2, #0
 80149c2:	4640      	mov	r0, r8
 80149c4:	4649      	mov	r1, r9
 80149c6:	f7eb fe47 	bl	8000658 <__aeabi_dmul>
 80149ca:	4652      	mov	r2, sl
 80149cc:	465b      	mov	r3, fp
 80149ce:	f7ec f8c9 	bl	8000b64 <__aeabi_dcmpge>
 80149d2:	9e03      	ldr	r6, [sp, #12]
 80149d4:	4637      	mov	r7, r6
 80149d6:	2800      	cmp	r0, #0
 80149d8:	f040 8245 	bne.w	8014e66 <_dtoa_r+0x93e>
 80149dc:	9d01      	ldr	r5, [sp, #4]
 80149de:	2331      	movs	r3, #49	; 0x31
 80149e0:	f805 3b01 	strb.w	r3, [r5], #1
 80149e4:	9b00      	ldr	r3, [sp, #0]
 80149e6:	3301      	adds	r3, #1
 80149e8:	9300      	str	r3, [sp, #0]
 80149ea:	e240      	b.n	8014e6e <_dtoa_r+0x946>
 80149ec:	07f2      	lsls	r2, r6, #31
 80149ee:	d505      	bpl.n	80149fc <_dtoa_r+0x4d4>
 80149f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80149f4:	f7eb fe30 	bl	8000658 <__aeabi_dmul>
 80149f8:	3501      	adds	r5, #1
 80149fa:	2301      	movs	r3, #1
 80149fc:	1076      	asrs	r6, r6, #1
 80149fe:	3708      	adds	r7, #8
 8014a00:	e777      	b.n	80148f2 <_dtoa_r+0x3ca>
 8014a02:	2502      	movs	r5, #2
 8014a04:	e779      	b.n	80148fa <_dtoa_r+0x3d2>
 8014a06:	9f00      	ldr	r7, [sp, #0]
 8014a08:	9e03      	ldr	r6, [sp, #12]
 8014a0a:	e794      	b.n	8014936 <_dtoa_r+0x40e>
 8014a0c:	9901      	ldr	r1, [sp, #4]
 8014a0e:	4b4c      	ldr	r3, [pc, #304]	; (8014b40 <_dtoa_r+0x618>)
 8014a10:	4431      	add	r1, r6
 8014a12:	910d      	str	r1, [sp, #52]	; 0x34
 8014a14:	9908      	ldr	r1, [sp, #32]
 8014a16:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8014a1a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8014a1e:	2900      	cmp	r1, #0
 8014a20:	d043      	beq.n	8014aaa <_dtoa_r+0x582>
 8014a22:	494d      	ldr	r1, [pc, #308]	; (8014b58 <_dtoa_r+0x630>)
 8014a24:	2000      	movs	r0, #0
 8014a26:	f7eb ff41 	bl	80008ac <__aeabi_ddiv>
 8014a2a:	4652      	mov	r2, sl
 8014a2c:	465b      	mov	r3, fp
 8014a2e:	f7eb fc5b 	bl	80002e8 <__aeabi_dsub>
 8014a32:	9d01      	ldr	r5, [sp, #4]
 8014a34:	4682      	mov	sl, r0
 8014a36:	468b      	mov	fp, r1
 8014a38:	4649      	mov	r1, r9
 8014a3a:	4640      	mov	r0, r8
 8014a3c:	f7ec f8bc 	bl	8000bb8 <__aeabi_d2iz>
 8014a40:	4606      	mov	r6, r0
 8014a42:	f7eb fd9f 	bl	8000584 <__aeabi_i2d>
 8014a46:	4602      	mov	r2, r0
 8014a48:	460b      	mov	r3, r1
 8014a4a:	4640      	mov	r0, r8
 8014a4c:	4649      	mov	r1, r9
 8014a4e:	f7eb fc4b 	bl	80002e8 <__aeabi_dsub>
 8014a52:	3630      	adds	r6, #48	; 0x30
 8014a54:	f805 6b01 	strb.w	r6, [r5], #1
 8014a58:	4652      	mov	r2, sl
 8014a5a:	465b      	mov	r3, fp
 8014a5c:	4680      	mov	r8, r0
 8014a5e:	4689      	mov	r9, r1
 8014a60:	f7ec f86c 	bl	8000b3c <__aeabi_dcmplt>
 8014a64:	2800      	cmp	r0, #0
 8014a66:	d163      	bne.n	8014b30 <_dtoa_r+0x608>
 8014a68:	4642      	mov	r2, r8
 8014a6a:	464b      	mov	r3, r9
 8014a6c:	4936      	ldr	r1, [pc, #216]	; (8014b48 <_dtoa_r+0x620>)
 8014a6e:	2000      	movs	r0, #0
 8014a70:	f7eb fc3a 	bl	80002e8 <__aeabi_dsub>
 8014a74:	4652      	mov	r2, sl
 8014a76:	465b      	mov	r3, fp
 8014a78:	f7ec f860 	bl	8000b3c <__aeabi_dcmplt>
 8014a7c:	2800      	cmp	r0, #0
 8014a7e:	f040 80b5 	bne.w	8014bec <_dtoa_r+0x6c4>
 8014a82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014a84:	429d      	cmp	r5, r3
 8014a86:	d081      	beq.n	801498c <_dtoa_r+0x464>
 8014a88:	4b30      	ldr	r3, [pc, #192]	; (8014b4c <_dtoa_r+0x624>)
 8014a8a:	2200      	movs	r2, #0
 8014a8c:	4650      	mov	r0, sl
 8014a8e:	4659      	mov	r1, fp
 8014a90:	f7eb fde2 	bl	8000658 <__aeabi_dmul>
 8014a94:	4b2d      	ldr	r3, [pc, #180]	; (8014b4c <_dtoa_r+0x624>)
 8014a96:	4682      	mov	sl, r0
 8014a98:	468b      	mov	fp, r1
 8014a9a:	4640      	mov	r0, r8
 8014a9c:	4649      	mov	r1, r9
 8014a9e:	2200      	movs	r2, #0
 8014aa0:	f7eb fdda 	bl	8000658 <__aeabi_dmul>
 8014aa4:	4680      	mov	r8, r0
 8014aa6:	4689      	mov	r9, r1
 8014aa8:	e7c6      	b.n	8014a38 <_dtoa_r+0x510>
 8014aaa:	4650      	mov	r0, sl
 8014aac:	4659      	mov	r1, fp
 8014aae:	f7eb fdd3 	bl	8000658 <__aeabi_dmul>
 8014ab2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014ab4:	9d01      	ldr	r5, [sp, #4]
 8014ab6:	930f      	str	r3, [sp, #60]	; 0x3c
 8014ab8:	4682      	mov	sl, r0
 8014aba:	468b      	mov	fp, r1
 8014abc:	4649      	mov	r1, r9
 8014abe:	4640      	mov	r0, r8
 8014ac0:	f7ec f87a 	bl	8000bb8 <__aeabi_d2iz>
 8014ac4:	4606      	mov	r6, r0
 8014ac6:	f7eb fd5d 	bl	8000584 <__aeabi_i2d>
 8014aca:	3630      	adds	r6, #48	; 0x30
 8014acc:	4602      	mov	r2, r0
 8014ace:	460b      	mov	r3, r1
 8014ad0:	4640      	mov	r0, r8
 8014ad2:	4649      	mov	r1, r9
 8014ad4:	f7eb fc08 	bl	80002e8 <__aeabi_dsub>
 8014ad8:	f805 6b01 	strb.w	r6, [r5], #1
 8014adc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014ade:	429d      	cmp	r5, r3
 8014ae0:	4680      	mov	r8, r0
 8014ae2:	4689      	mov	r9, r1
 8014ae4:	f04f 0200 	mov.w	r2, #0
 8014ae8:	d124      	bne.n	8014b34 <_dtoa_r+0x60c>
 8014aea:	4b1b      	ldr	r3, [pc, #108]	; (8014b58 <_dtoa_r+0x630>)
 8014aec:	4650      	mov	r0, sl
 8014aee:	4659      	mov	r1, fp
 8014af0:	f7eb fbfc 	bl	80002ec <__adddf3>
 8014af4:	4602      	mov	r2, r0
 8014af6:	460b      	mov	r3, r1
 8014af8:	4640      	mov	r0, r8
 8014afa:	4649      	mov	r1, r9
 8014afc:	f7ec f83c 	bl	8000b78 <__aeabi_dcmpgt>
 8014b00:	2800      	cmp	r0, #0
 8014b02:	d173      	bne.n	8014bec <_dtoa_r+0x6c4>
 8014b04:	4652      	mov	r2, sl
 8014b06:	465b      	mov	r3, fp
 8014b08:	4913      	ldr	r1, [pc, #76]	; (8014b58 <_dtoa_r+0x630>)
 8014b0a:	2000      	movs	r0, #0
 8014b0c:	f7eb fbec 	bl	80002e8 <__aeabi_dsub>
 8014b10:	4602      	mov	r2, r0
 8014b12:	460b      	mov	r3, r1
 8014b14:	4640      	mov	r0, r8
 8014b16:	4649      	mov	r1, r9
 8014b18:	f7ec f810 	bl	8000b3c <__aeabi_dcmplt>
 8014b1c:	2800      	cmp	r0, #0
 8014b1e:	f43f af35 	beq.w	801498c <_dtoa_r+0x464>
 8014b22:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8014b24:	1e6b      	subs	r3, r5, #1
 8014b26:	930f      	str	r3, [sp, #60]	; 0x3c
 8014b28:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014b2c:	2b30      	cmp	r3, #48	; 0x30
 8014b2e:	d0f8      	beq.n	8014b22 <_dtoa_r+0x5fa>
 8014b30:	9700      	str	r7, [sp, #0]
 8014b32:	e049      	b.n	8014bc8 <_dtoa_r+0x6a0>
 8014b34:	4b05      	ldr	r3, [pc, #20]	; (8014b4c <_dtoa_r+0x624>)
 8014b36:	f7eb fd8f 	bl	8000658 <__aeabi_dmul>
 8014b3a:	4680      	mov	r8, r0
 8014b3c:	4689      	mov	r9, r1
 8014b3e:	e7bd      	b.n	8014abc <_dtoa_r+0x594>
 8014b40:	0805d988 	.word	0x0805d988
 8014b44:	0805d960 	.word	0x0805d960
 8014b48:	3ff00000 	.word	0x3ff00000
 8014b4c:	40240000 	.word	0x40240000
 8014b50:	401c0000 	.word	0x401c0000
 8014b54:	40140000 	.word	0x40140000
 8014b58:	3fe00000 	.word	0x3fe00000
 8014b5c:	9d01      	ldr	r5, [sp, #4]
 8014b5e:	4656      	mov	r6, sl
 8014b60:	465f      	mov	r7, fp
 8014b62:	4642      	mov	r2, r8
 8014b64:	464b      	mov	r3, r9
 8014b66:	4630      	mov	r0, r6
 8014b68:	4639      	mov	r1, r7
 8014b6a:	f7eb fe9f 	bl	80008ac <__aeabi_ddiv>
 8014b6e:	f7ec f823 	bl	8000bb8 <__aeabi_d2iz>
 8014b72:	4682      	mov	sl, r0
 8014b74:	f7eb fd06 	bl	8000584 <__aeabi_i2d>
 8014b78:	4642      	mov	r2, r8
 8014b7a:	464b      	mov	r3, r9
 8014b7c:	f7eb fd6c 	bl	8000658 <__aeabi_dmul>
 8014b80:	4602      	mov	r2, r0
 8014b82:	460b      	mov	r3, r1
 8014b84:	4630      	mov	r0, r6
 8014b86:	4639      	mov	r1, r7
 8014b88:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8014b8c:	f7eb fbac 	bl	80002e8 <__aeabi_dsub>
 8014b90:	f805 6b01 	strb.w	r6, [r5], #1
 8014b94:	9e01      	ldr	r6, [sp, #4]
 8014b96:	9f03      	ldr	r7, [sp, #12]
 8014b98:	1bae      	subs	r6, r5, r6
 8014b9a:	42b7      	cmp	r7, r6
 8014b9c:	4602      	mov	r2, r0
 8014b9e:	460b      	mov	r3, r1
 8014ba0:	d135      	bne.n	8014c0e <_dtoa_r+0x6e6>
 8014ba2:	f7eb fba3 	bl	80002ec <__adddf3>
 8014ba6:	4642      	mov	r2, r8
 8014ba8:	464b      	mov	r3, r9
 8014baa:	4606      	mov	r6, r0
 8014bac:	460f      	mov	r7, r1
 8014bae:	f7eb ffe3 	bl	8000b78 <__aeabi_dcmpgt>
 8014bb2:	b9d0      	cbnz	r0, 8014bea <_dtoa_r+0x6c2>
 8014bb4:	4642      	mov	r2, r8
 8014bb6:	464b      	mov	r3, r9
 8014bb8:	4630      	mov	r0, r6
 8014bba:	4639      	mov	r1, r7
 8014bbc:	f7eb ffb4 	bl	8000b28 <__aeabi_dcmpeq>
 8014bc0:	b110      	cbz	r0, 8014bc8 <_dtoa_r+0x6a0>
 8014bc2:	f01a 0f01 	tst.w	sl, #1
 8014bc6:	d110      	bne.n	8014bea <_dtoa_r+0x6c2>
 8014bc8:	4620      	mov	r0, r4
 8014bca:	ee18 1a10 	vmov	r1, s16
 8014bce:	f000 fe8f 	bl	80158f0 <_Bfree>
 8014bd2:	2300      	movs	r3, #0
 8014bd4:	9800      	ldr	r0, [sp, #0]
 8014bd6:	702b      	strb	r3, [r5, #0]
 8014bd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014bda:	3001      	adds	r0, #1
 8014bdc:	6018      	str	r0, [r3, #0]
 8014bde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014be0:	2b00      	cmp	r3, #0
 8014be2:	f43f acf1 	beq.w	80145c8 <_dtoa_r+0xa0>
 8014be6:	601d      	str	r5, [r3, #0]
 8014be8:	e4ee      	b.n	80145c8 <_dtoa_r+0xa0>
 8014bea:	9f00      	ldr	r7, [sp, #0]
 8014bec:	462b      	mov	r3, r5
 8014bee:	461d      	mov	r5, r3
 8014bf0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014bf4:	2a39      	cmp	r2, #57	; 0x39
 8014bf6:	d106      	bne.n	8014c06 <_dtoa_r+0x6de>
 8014bf8:	9a01      	ldr	r2, [sp, #4]
 8014bfa:	429a      	cmp	r2, r3
 8014bfc:	d1f7      	bne.n	8014bee <_dtoa_r+0x6c6>
 8014bfe:	9901      	ldr	r1, [sp, #4]
 8014c00:	2230      	movs	r2, #48	; 0x30
 8014c02:	3701      	adds	r7, #1
 8014c04:	700a      	strb	r2, [r1, #0]
 8014c06:	781a      	ldrb	r2, [r3, #0]
 8014c08:	3201      	adds	r2, #1
 8014c0a:	701a      	strb	r2, [r3, #0]
 8014c0c:	e790      	b.n	8014b30 <_dtoa_r+0x608>
 8014c0e:	4ba6      	ldr	r3, [pc, #664]	; (8014ea8 <_dtoa_r+0x980>)
 8014c10:	2200      	movs	r2, #0
 8014c12:	f7eb fd21 	bl	8000658 <__aeabi_dmul>
 8014c16:	2200      	movs	r2, #0
 8014c18:	2300      	movs	r3, #0
 8014c1a:	4606      	mov	r6, r0
 8014c1c:	460f      	mov	r7, r1
 8014c1e:	f7eb ff83 	bl	8000b28 <__aeabi_dcmpeq>
 8014c22:	2800      	cmp	r0, #0
 8014c24:	d09d      	beq.n	8014b62 <_dtoa_r+0x63a>
 8014c26:	e7cf      	b.n	8014bc8 <_dtoa_r+0x6a0>
 8014c28:	9a08      	ldr	r2, [sp, #32]
 8014c2a:	2a00      	cmp	r2, #0
 8014c2c:	f000 80d7 	beq.w	8014dde <_dtoa_r+0x8b6>
 8014c30:	9a06      	ldr	r2, [sp, #24]
 8014c32:	2a01      	cmp	r2, #1
 8014c34:	f300 80ba 	bgt.w	8014dac <_dtoa_r+0x884>
 8014c38:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014c3a:	2a00      	cmp	r2, #0
 8014c3c:	f000 80b2 	beq.w	8014da4 <_dtoa_r+0x87c>
 8014c40:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8014c44:	9e07      	ldr	r6, [sp, #28]
 8014c46:	9d04      	ldr	r5, [sp, #16]
 8014c48:	9a04      	ldr	r2, [sp, #16]
 8014c4a:	441a      	add	r2, r3
 8014c4c:	9204      	str	r2, [sp, #16]
 8014c4e:	9a05      	ldr	r2, [sp, #20]
 8014c50:	2101      	movs	r1, #1
 8014c52:	441a      	add	r2, r3
 8014c54:	4620      	mov	r0, r4
 8014c56:	9205      	str	r2, [sp, #20]
 8014c58:	f000 ff4c 	bl	8015af4 <__i2b>
 8014c5c:	4607      	mov	r7, r0
 8014c5e:	2d00      	cmp	r5, #0
 8014c60:	dd0c      	ble.n	8014c7c <_dtoa_r+0x754>
 8014c62:	9b05      	ldr	r3, [sp, #20]
 8014c64:	2b00      	cmp	r3, #0
 8014c66:	dd09      	ble.n	8014c7c <_dtoa_r+0x754>
 8014c68:	42ab      	cmp	r3, r5
 8014c6a:	9a04      	ldr	r2, [sp, #16]
 8014c6c:	bfa8      	it	ge
 8014c6e:	462b      	movge	r3, r5
 8014c70:	1ad2      	subs	r2, r2, r3
 8014c72:	9204      	str	r2, [sp, #16]
 8014c74:	9a05      	ldr	r2, [sp, #20]
 8014c76:	1aed      	subs	r5, r5, r3
 8014c78:	1ad3      	subs	r3, r2, r3
 8014c7a:	9305      	str	r3, [sp, #20]
 8014c7c:	9b07      	ldr	r3, [sp, #28]
 8014c7e:	b31b      	cbz	r3, 8014cc8 <_dtoa_r+0x7a0>
 8014c80:	9b08      	ldr	r3, [sp, #32]
 8014c82:	2b00      	cmp	r3, #0
 8014c84:	f000 80af 	beq.w	8014de6 <_dtoa_r+0x8be>
 8014c88:	2e00      	cmp	r6, #0
 8014c8a:	dd13      	ble.n	8014cb4 <_dtoa_r+0x78c>
 8014c8c:	4639      	mov	r1, r7
 8014c8e:	4632      	mov	r2, r6
 8014c90:	4620      	mov	r0, r4
 8014c92:	f000 ffef 	bl	8015c74 <__pow5mult>
 8014c96:	ee18 2a10 	vmov	r2, s16
 8014c9a:	4601      	mov	r1, r0
 8014c9c:	4607      	mov	r7, r0
 8014c9e:	4620      	mov	r0, r4
 8014ca0:	f000 ff3e 	bl	8015b20 <__multiply>
 8014ca4:	ee18 1a10 	vmov	r1, s16
 8014ca8:	4680      	mov	r8, r0
 8014caa:	4620      	mov	r0, r4
 8014cac:	f000 fe20 	bl	80158f0 <_Bfree>
 8014cb0:	ee08 8a10 	vmov	s16, r8
 8014cb4:	9b07      	ldr	r3, [sp, #28]
 8014cb6:	1b9a      	subs	r2, r3, r6
 8014cb8:	d006      	beq.n	8014cc8 <_dtoa_r+0x7a0>
 8014cba:	ee18 1a10 	vmov	r1, s16
 8014cbe:	4620      	mov	r0, r4
 8014cc0:	f000 ffd8 	bl	8015c74 <__pow5mult>
 8014cc4:	ee08 0a10 	vmov	s16, r0
 8014cc8:	2101      	movs	r1, #1
 8014cca:	4620      	mov	r0, r4
 8014ccc:	f000 ff12 	bl	8015af4 <__i2b>
 8014cd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014cd2:	2b00      	cmp	r3, #0
 8014cd4:	4606      	mov	r6, r0
 8014cd6:	f340 8088 	ble.w	8014dea <_dtoa_r+0x8c2>
 8014cda:	461a      	mov	r2, r3
 8014cdc:	4601      	mov	r1, r0
 8014cde:	4620      	mov	r0, r4
 8014ce0:	f000 ffc8 	bl	8015c74 <__pow5mult>
 8014ce4:	9b06      	ldr	r3, [sp, #24]
 8014ce6:	2b01      	cmp	r3, #1
 8014ce8:	4606      	mov	r6, r0
 8014cea:	f340 8081 	ble.w	8014df0 <_dtoa_r+0x8c8>
 8014cee:	f04f 0800 	mov.w	r8, #0
 8014cf2:	6933      	ldr	r3, [r6, #16]
 8014cf4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8014cf8:	6918      	ldr	r0, [r3, #16]
 8014cfa:	f000 feab 	bl	8015a54 <__hi0bits>
 8014cfe:	f1c0 0020 	rsb	r0, r0, #32
 8014d02:	9b05      	ldr	r3, [sp, #20]
 8014d04:	4418      	add	r0, r3
 8014d06:	f010 001f 	ands.w	r0, r0, #31
 8014d0a:	f000 8092 	beq.w	8014e32 <_dtoa_r+0x90a>
 8014d0e:	f1c0 0320 	rsb	r3, r0, #32
 8014d12:	2b04      	cmp	r3, #4
 8014d14:	f340 808a 	ble.w	8014e2c <_dtoa_r+0x904>
 8014d18:	f1c0 001c 	rsb	r0, r0, #28
 8014d1c:	9b04      	ldr	r3, [sp, #16]
 8014d1e:	4403      	add	r3, r0
 8014d20:	9304      	str	r3, [sp, #16]
 8014d22:	9b05      	ldr	r3, [sp, #20]
 8014d24:	4403      	add	r3, r0
 8014d26:	4405      	add	r5, r0
 8014d28:	9305      	str	r3, [sp, #20]
 8014d2a:	9b04      	ldr	r3, [sp, #16]
 8014d2c:	2b00      	cmp	r3, #0
 8014d2e:	dd07      	ble.n	8014d40 <_dtoa_r+0x818>
 8014d30:	ee18 1a10 	vmov	r1, s16
 8014d34:	461a      	mov	r2, r3
 8014d36:	4620      	mov	r0, r4
 8014d38:	f000 fff6 	bl	8015d28 <__lshift>
 8014d3c:	ee08 0a10 	vmov	s16, r0
 8014d40:	9b05      	ldr	r3, [sp, #20]
 8014d42:	2b00      	cmp	r3, #0
 8014d44:	dd05      	ble.n	8014d52 <_dtoa_r+0x82a>
 8014d46:	4631      	mov	r1, r6
 8014d48:	461a      	mov	r2, r3
 8014d4a:	4620      	mov	r0, r4
 8014d4c:	f000 ffec 	bl	8015d28 <__lshift>
 8014d50:	4606      	mov	r6, r0
 8014d52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014d54:	2b00      	cmp	r3, #0
 8014d56:	d06e      	beq.n	8014e36 <_dtoa_r+0x90e>
 8014d58:	ee18 0a10 	vmov	r0, s16
 8014d5c:	4631      	mov	r1, r6
 8014d5e:	f001 f853 	bl	8015e08 <__mcmp>
 8014d62:	2800      	cmp	r0, #0
 8014d64:	da67      	bge.n	8014e36 <_dtoa_r+0x90e>
 8014d66:	9b00      	ldr	r3, [sp, #0]
 8014d68:	3b01      	subs	r3, #1
 8014d6a:	ee18 1a10 	vmov	r1, s16
 8014d6e:	9300      	str	r3, [sp, #0]
 8014d70:	220a      	movs	r2, #10
 8014d72:	2300      	movs	r3, #0
 8014d74:	4620      	mov	r0, r4
 8014d76:	f000 fddd 	bl	8015934 <__multadd>
 8014d7a:	9b08      	ldr	r3, [sp, #32]
 8014d7c:	ee08 0a10 	vmov	s16, r0
 8014d80:	2b00      	cmp	r3, #0
 8014d82:	f000 81b1 	beq.w	80150e8 <_dtoa_r+0xbc0>
 8014d86:	2300      	movs	r3, #0
 8014d88:	4639      	mov	r1, r7
 8014d8a:	220a      	movs	r2, #10
 8014d8c:	4620      	mov	r0, r4
 8014d8e:	f000 fdd1 	bl	8015934 <__multadd>
 8014d92:	9b02      	ldr	r3, [sp, #8]
 8014d94:	2b00      	cmp	r3, #0
 8014d96:	4607      	mov	r7, r0
 8014d98:	f300 808e 	bgt.w	8014eb8 <_dtoa_r+0x990>
 8014d9c:	9b06      	ldr	r3, [sp, #24]
 8014d9e:	2b02      	cmp	r3, #2
 8014da0:	dc51      	bgt.n	8014e46 <_dtoa_r+0x91e>
 8014da2:	e089      	b.n	8014eb8 <_dtoa_r+0x990>
 8014da4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014da6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8014daa:	e74b      	b.n	8014c44 <_dtoa_r+0x71c>
 8014dac:	9b03      	ldr	r3, [sp, #12]
 8014dae:	1e5e      	subs	r6, r3, #1
 8014db0:	9b07      	ldr	r3, [sp, #28]
 8014db2:	42b3      	cmp	r3, r6
 8014db4:	bfbf      	itttt	lt
 8014db6:	9b07      	ldrlt	r3, [sp, #28]
 8014db8:	9607      	strlt	r6, [sp, #28]
 8014dba:	1af2      	sublt	r2, r6, r3
 8014dbc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8014dbe:	bfb6      	itet	lt
 8014dc0:	189b      	addlt	r3, r3, r2
 8014dc2:	1b9e      	subge	r6, r3, r6
 8014dc4:	930a      	strlt	r3, [sp, #40]	; 0x28
 8014dc6:	9b03      	ldr	r3, [sp, #12]
 8014dc8:	bfb8      	it	lt
 8014dca:	2600      	movlt	r6, #0
 8014dcc:	2b00      	cmp	r3, #0
 8014dce:	bfb7      	itett	lt
 8014dd0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8014dd4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8014dd8:	1a9d      	sublt	r5, r3, r2
 8014dda:	2300      	movlt	r3, #0
 8014ddc:	e734      	b.n	8014c48 <_dtoa_r+0x720>
 8014dde:	9e07      	ldr	r6, [sp, #28]
 8014de0:	9d04      	ldr	r5, [sp, #16]
 8014de2:	9f08      	ldr	r7, [sp, #32]
 8014de4:	e73b      	b.n	8014c5e <_dtoa_r+0x736>
 8014de6:	9a07      	ldr	r2, [sp, #28]
 8014de8:	e767      	b.n	8014cba <_dtoa_r+0x792>
 8014dea:	9b06      	ldr	r3, [sp, #24]
 8014dec:	2b01      	cmp	r3, #1
 8014dee:	dc18      	bgt.n	8014e22 <_dtoa_r+0x8fa>
 8014df0:	f1ba 0f00 	cmp.w	sl, #0
 8014df4:	d115      	bne.n	8014e22 <_dtoa_r+0x8fa>
 8014df6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014dfa:	b993      	cbnz	r3, 8014e22 <_dtoa_r+0x8fa>
 8014dfc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014e00:	0d1b      	lsrs	r3, r3, #20
 8014e02:	051b      	lsls	r3, r3, #20
 8014e04:	b183      	cbz	r3, 8014e28 <_dtoa_r+0x900>
 8014e06:	9b04      	ldr	r3, [sp, #16]
 8014e08:	3301      	adds	r3, #1
 8014e0a:	9304      	str	r3, [sp, #16]
 8014e0c:	9b05      	ldr	r3, [sp, #20]
 8014e0e:	3301      	adds	r3, #1
 8014e10:	9305      	str	r3, [sp, #20]
 8014e12:	f04f 0801 	mov.w	r8, #1
 8014e16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014e18:	2b00      	cmp	r3, #0
 8014e1a:	f47f af6a 	bne.w	8014cf2 <_dtoa_r+0x7ca>
 8014e1e:	2001      	movs	r0, #1
 8014e20:	e76f      	b.n	8014d02 <_dtoa_r+0x7da>
 8014e22:	f04f 0800 	mov.w	r8, #0
 8014e26:	e7f6      	b.n	8014e16 <_dtoa_r+0x8ee>
 8014e28:	4698      	mov	r8, r3
 8014e2a:	e7f4      	b.n	8014e16 <_dtoa_r+0x8ee>
 8014e2c:	f43f af7d 	beq.w	8014d2a <_dtoa_r+0x802>
 8014e30:	4618      	mov	r0, r3
 8014e32:	301c      	adds	r0, #28
 8014e34:	e772      	b.n	8014d1c <_dtoa_r+0x7f4>
 8014e36:	9b03      	ldr	r3, [sp, #12]
 8014e38:	2b00      	cmp	r3, #0
 8014e3a:	dc37      	bgt.n	8014eac <_dtoa_r+0x984>
 8014e3c:	9b06      	ldr	r3, [sp, #24]
 8014e3e:	2b02      	cmp	r3, #2
 8014e40:	dd34      	ble.n	8014eac <_dtoa_r+0x984>
 8014e42:	9b03      	ldr	r3, [sp, #12]
 8014e44:	9302      	str	r3, [sp, #8]
 8014e46:	9b02      	ldr	r3, [sp, #8]
 8014e48:	b96b      	cbnz	r3, 8014e66 <_dtoa_r+0x93e>
 8014e4a:	4631      	mov	r1, r6
 8014e4c:	2205      	movs	r2, #5
 8014e4e:	4620      	mov	r0, r4
 8014e50:	f000 fd70 	bl	8015934 <__multadd>
 8014e54:	4601      	mov	r1, r0
 8014e56:	4606      	mov	r6, r0
 8014e58:	ee18 0a10 	vmov	r0, s16
 8014e5c:	f000 ffd4 	bl	8015e08 <__mcmp>
 8014e60:	2800      	cmp	r0, #0
 8014e62:	f73f adbb 	bgt.w	80149dc <_dtoa_r+0x4b4>
 8014e66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014e68:	9d01      	ldr	r5, [sp, #4]
 8014e6a:	43db      	mvns	r3, r3
 8014e6c:	9300      	str	r3, [sp, #0]
 8014e6e:	f04f 0800 	mov.w	r8, #0
 8014e72:	4631      	mov	r1, r6
 8014e74:	4620      	mov	r0, r4
 8014e76:	f000 fd3b 	bl	80158f0 <_Bfree>
 8014e7a:	2f00      	cmp	r7, #0
 8014e7c:	f43f aea4 	beq.w	8014bc8 <_dtoa_r+0x6a0>
 8014e80:	f1b8 0f00 	cmp.w	r8, #0
 8014e84:	d005      	beq.n	8014e92 <_dtoa_r+0x96a>
 8014e86:	45b8      	cmp	r8, r7
 8014e88:	d003      	beq.n	8014e92 <_dtoa_r+0x96a>
 8014e8a:	4641      	mov	r1, r8
 8014e8c:	4620      	mov	r0, r4
 8014e8e:	f000 fd2f 	bl	80158f0 <_Bfree>
 8014e92:	4639      	mov	r1, r7
 8014e94:	4620      	mov	r0, r4
 8014e96:	f000 fd2b 	bl	80158f0 <_Bfree>
 8014e9a:	e695      	b.n	8014bc8 <_dtoa_r+0x6a0>
 8014e9c:	2600      	movs	r6, #0
 8014e9e:	4637      	mov	r7, r6
 8014ea0:	e7e1      	b.n	8014e66 <_dtoa_r+0x93e>
 8014ea2:	9700      	str	r7, [sp, #0]
 8014ea4:	4637      	mov	r7, r6
 8014ea6:	e599      	b.n	80149dc <_dtoa_r+0x4b4>
 8014ea8:	40240000 	.word	0x40240000
 8014eac:	9b08      	ldr	r3, [sp, #32]
 8014eae:	2b00      	cmp	r3, #0
 8014eb0:	f000 80ca 	beq.w	8015048 <_dtoa_r+0xb20>
 8014eb4:	9b03      	ldr	r3, [sp, #12]
 8014eb6:	9302      	str	r3, [sp, #8]
 8014eb8:	2d00      	cmp	r5, #0
 8014eba:	dd05      	ble.n	8014ec8 <_dtoa_r+0x9a0>
 8014ebc:	4639      	mov	r1, r7
 8014ebe:	462a      	mov	r2, r5
 8014ec0:	4620      	mov	r0, r4
 8014ec2:	f000 ff31 	bl	8015d28 <__lshift>
 8014ec6:	4607      	mov	r7, r0
 8014ec8:	f1b8 0f00 	cmp.w	r8, #0
 8014ecc:	d05b      	beq.n	8014f86 <_dtoa_r+0xa5e>
 8014ece:	6879      	ldr	r1, [r7, #4]
 8014ed0:	4620      	mov	r0, r4
 8014ed2:	f000 fccd 	bl	8015870 <_Balloc>
 8014ed6:	4605      	mov	r5, r0
 8014ed8:	b928      	cbnz	r0, 8014ee6 <_dtoa_r+0x9be>
 8014eda:	4b87      	ldr	r3, [pc, #540]	; (80150f8 <_dtoa_r+0xbd0>)
 8014edc:	4602      	mov	r2, r0
 8014ede:	f240 21ea 	movw	r1, #746	; 0x2ea
 8014ee2:	f7ff bb3b 	b.w	801455c <_dtoa_r+0x34>
 8014ee6:	693a      	ldr	r2, [r7, #16]
 8014ee8:	3202      	adds	r2, #2
 8014eea:	0092      	lsls	r2, r2, #2
 8014eec:	f107 010c 	add.w	r1, r7, #12
 8014ef0:	300c      	adds	r0, #12
 8014ef2:	f7fd fb25 	bl	8012540 <memcpy>
 8014ef6:	2201      	movs	r2, #1
 8014ef8:	4629      	mov	r1, r5
 8014efa:	4620      	mov	r0, r4
 8014efc:	f000 ff14 	bl	8015d28 <__lshift>
 8014f00:	9b01      	ldr	r3, [sp, #4]
 8014f02:	f103 0901 	add.w	r9, r3, #1
 8014f06:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8014f0a:	4413      	add	r3, r2
 8014f0c:	9305      	str	r3, [sp, #20]
 8014f0e:	f00a 0301 	and.w	r3, sl, #1
 8014f12:	46b8      	mov	r8, r7
 8014f14:	9304      	str	r3, [sp, #16]
 8014f16:	4607      	mov	r7, r0
 8014f18:	4631      	mov	r1, r6
 8014f1a:	ee18 0a10 	vmov	r0, s16
 8014f1e:	f7ff fa77 	bl	8014410 <quorem>
 8014f22:	4641      	mov	r1, r8
 8014f24:	9002      	str	r0, [sp, #8]
 8014f26:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8014f2a:	ee18 0a10 	vmov	r0, s16
 8014f2e:	f000 ff6b 	bl	8015e08 <__mcmp>
 8014f32:	463a      	mov	r2, r7
 8014f34:	9003      	str	r0, [sp, #12]
 8014f36:	4631      	mov	r1, r6
 8014f38:	4620      	mov	r0, r4
 8014f3a:	f000 ff81 	bl	8015e40 <__mdiff>
 8014f3e:	68c2      	ldr	r2, [r0, #12]
 8014f40:	f109 3bff 	add.w	fp, r9, #4294967295
 8014f44:	4605      	mov	r5, r0
 8014f46:	bb02      	cbnz	r2, 8014f8a <_dtoa_r+0xa62>
 8014f48:	4601      	mov	r1, r0
 8014f4a:	ee18 0a10 	vmov	r0, s16
 8014f4e:	f000 ff5b 	bl	8015e08 <__mcmp>
 8014f52:	4602      	mov	r2, r0
 8014f54:	4629      	mov	r1, r5
 8014f56:	4620      	mov	r0, r4
 8014f58:	9207      	str	r2, [sp, #28]
 8014f5a:	f000 fcc9 	bl	80158f0 <_Bfree>
 8014f5e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8014f62:	ea43 0102 	orr.w	r1, r3, r2
 8014f66:	9b04      	ldr	r3, [sp, #16]
 8014f68:	430b      	orrs	r3, r1
 8014f6a:	464d      	mov	r5, r9
 8014f6c:	d10f      	bne.n	8014f8e <_dtoa_r+0xa66>
 8014f6e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8014f72:	d02a      	beq.n	8014fca <_dtoa_r+0xaa2>
 8014f74:	9b03      	ldr	r3, [sp, #12]
 8014f76:	2b00      	cmp	r3, #0
 8014f78:	dd02      	ble.n	8014f80 <_dtoa_r+0xa58>
 8014f7a:	9b02      	ldr	r3, [sp, #8]
 8014f7c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8014f80:	f88b a000 	strb.w	sl, [fp]
 8014f84:	e775      	b.n	8014e72 <_dtoa_r+0x94a>
 8014f86:	4638      	mov	r0, r7
 8014f88:	e7ba      	b.n	8014f00 <_dtoa_r+0x9d8>
 8014f8a:	2201      	movs	r2, #1
 8014f8c:	e7e2      	b.n	8014f54 <_dtoa_r+0xa2c>
 8014f8e:	9b03      	ldr	r3, [sp, #12]
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	db04      	blt.n	8014f9e <_dtoa_r+0xa76>
 8014f94:	9906      	ldr	r1, [sp, #24]
 8014f96:	430b      	orrs	r3, r1
 8014f98:	9904      	ldr	r1, [sp, #16]
 8014f9a:	430b      	orrs	r3, r1
 8014f9c:	d122      	bne.n	8014fe4 <_dtoa_r+0xabc>
 8014f9e:	2a00      	cmp	r2, #0
 8014fa0:	ddee      	ble.n	8014f80 <_dtoa_r+0xa58>
 8014fa2:	ee18 1a10 	vmov	r1, s16
 8014fa6:	2201      	movs	r2, #1
 8014fa8:	4620      	mov	r0, r4
 8014faa:	f000 febd 	bl	8015d28 <__lshift>
 8014fae:	4631      	mov	r1, r6
 8014fb0:	ee08 0a10 	vmov	s16, r0
 8014fb4:	f000 ff28 	bl	8015e08 <__mcmp>
 8014fb8:	2800      	cmp	r0, #0
 8014fba:	dc03      	bgt.n	8014fc4 <_dtoa_r+0xa9c>
 8014fbc:	d1e0      	bne.n	8014f80 <_dtoa_r+0xa58>
 8014fbe:	f01a 0f01 	tst.w	sl, #1
 8014fc2:	d0dd      	beq.n	8014f80 <_dtoa_r+0xa58>
 8014fc4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8014fc8:	d1d7      	bne.n	8014f7a <_dtoa_r+0xa52>
 8014fca:	2339      	movs	r3, #57	; 0x39
 8014fcc:	f88b 3000 	strb.w	r3, [fp]
 8014fd0:	462b      	mov	r3, r5
 8014fd2:	461d      	mov	r5, r3
 8014fd4:	3b01      	subs	r3, #1
 8014fd6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8014fda:	2a39      	cmp	r2, #57	; 0x39
 8014fdc:	d071      	beq.n	80150c2 <_dtoa_r+0xb9a>
 8014fde:	3201      	adds	r2, #1
 8014fe0:	701a      	strb	r2, [r3, #0]
 8014fe2:	e746      	b.n	8014e72 <_dtoa_r+0x94a>
 8014fe4:	2a00      	cmp	r2, #0
 8014fe6:	dd07      	ble.n	8014ff8 <_dtoa_r+0xad0>
 8014fe8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8014fec:	d0ed      	beq.n	8014fca <_dtoa_r+0xaa2>
 8014fee:	f10a 0301 	add.w	r3, sl, #1
 8014ff2:	f88b 3000 	strb.w	r3, [fp]
 8014ff6:	e73c      	b.n	8014e72 <_dtoa_r+0x94a>
 8014ff8:	9b05      	ldr	r3, [sp, #20]
 8014ffa:	f809 ac01 	strb.w	sl, [r9, #-1]
 8014ffe:	4599      	cmp	r9, r3
 8015000:	d047      	beq.n	8015092 <_dtoa_r+0xb6a>
 8015002:	ee18 1a10 	vmov	r1, s16
 8015006:	2300      	movs	r3, #0
 8015008:	220a      	movs	r2, #10
 801500a:	4620      	mov	r0, r4
 801500c:	f000 fc92 	bl	8015934 <__multadd>
 8015010:	45b8      	cmp	r8, r7
 8015012:	ee08 0a10 	vmov	s16, r0
 8015016:	f04f 0300 	mov.w	r3, #0
 801501a:	f04f 020a 	mov.w	r2, #10
 801501e:	4641      	mov	r1, r8
 8015020:	4620      	mov	r0, r4
 8015022:	d106      	bne.n	8015032 <_dtoa_r+0xb0a>
 8015024:	f000 fc86 	bl	8015934 <__multadd>
 8015028:	4680      	mov	r8, r0
 801502a:	4607      	mov	r7, r0
 801502c:	f109 0901 	add.w	r9, r9, #1
 8015030:	e772      	b.n	8014f18 <_dtoa_r+0x9f0>
 8015032:	f000 fc7f 	bl	8015934 <__multadd>
 8015036:	4639      	mov	r1, r7
 8015038:	4680      	mov	r8, r0
 801503a:	2300      	movs	r3, #0
 801503c:	220a      	movs	r2, #10
 801503e:	4620      	mov	r0, r4
 8015040:	f000 fc78 	bl	8015934 <__multadd>
 8015044:	4607      	mov	r7, r0
 8015046:	e7f1      	b.n	801502c <_dtoa_r+0xb04>
 8015048:	9b03      	ldr	r3, [sp, #12]
 801504a:	9302      	str	r3, [sp, #8]
 801504c:	9d01      	ldr	r5, [sp, #4]
 801504e:	ee18 0a10 	vmov	r0, s16
 8015052:	4631      	mov	r1, r6
 8015054:	f7ff f9dc 	bl	8014410 <quorem>
 8015058:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801505c:	9b01      	ldr	r3, [sp, #4]
 801505e:	f805 ab01 	strb.w	sl, [r5], #1
 8015062:	1aea      	subs	r2, r5, r3
 8015064:	9b02      	ldr	r3, [sp, #8]
 8015066:	4293      	cmp	r3, r2
 8015068:	dd09      	ble.n	801507e <_dtoa_r+0xb56>
 801506a:	ee18 1a10 	vmov	r1, s16
 801506e:	2300      	movs	r3, #0
 8015070:	220a      	movs	r2, #10
 8015072:	4620      	mov	r0, r4
 8015074:	f000 fc5e 	bl	8015934 <__multadd>
 8015078:	ee08 0a10 	vmov	s16, r0
 801507c:	e7e7      	b.n	801504e <_dtoa_r+0xb26>
 801507e:	9b02      	ldr	r3, [sp, #8]
 8015080:	2b00      	cmp	r3, #0
 8015082:	bfc8      	it	gt
 8015084:	461d      	movgt	r5, r3
 8015086:	9b01      	ldr	r3, [sp, #4]
 8015088:	bfd8      	it	le
 801508a:	2501      	movle	r5, #1
 801508c:	441d      	add	r5, r3
 801508e:	f04f 0800 	mov.w	r8, #0
 8015092:	ee18 1a10 	vmov	r1, s16
 8015096:	2201      	movs	r2, #1
 8015098:	4620      	mov	r0, r4
 801509a:	f000 fe45 	bl	8015d28 <__lshift>
 801509e:	4631      	mov	r1, r6
 80150a0:	ee08 0a10 	vmov	s16, r0
 80150a4:	f000 feb0 	bl	8015e08 <__mcmp>
 80150a8:	2800      	cmp	r0, #0
 80150aa:	dc91      	bgt.n	8014fd0 <_dtoa_r+0xaa8>
 80150ac:	d102      	bne.n	80150b4 <_dtoa_r+0xb8c>
 80150ae:	f01a 0f01 	tst.w	sl, #1
 80150b2:	d18d      	bne.n	8014fd0 <_dtoa_r+0xaa8>
 80150b4:	462b      	mov	r3, r5
 80150b6:	461d      	mov	r5, r3
 80150b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80150bc:	2a30      	cmp	r2, #48	; 0x30
 80150be:	d0fa      	beq.n	80150b6 <_dtoa_r+0xb8e>
 80150c0:	e6d7      	b.n	8014e72 <_dtoa_r+0x94a>
 80150c2:	9a01      	ldr	r2, [sp, #4]
 80150c4:	429a      	cmp	r2, r3
 80150c6:	d184      	bne.n	8014fd2 <_dtoa_r+0xaaa>
 80150c8:	9b00      	ldr	r3, [sp, #0]
 80150ca:	3301      	adds	r3, #1
 80150cc:	9300      	str	r3, [sp, #0]
 80150ce:	2331      	movs	r3, #49	; 0x31
 80150d0:	7013      	strb	r3, [r2, #0]
 80150d2:	e6ce      	b.n	8014e72 <_dtoa_r+0x94a>
 80150d4:	4b09      	ldr	r3, [pc, #36]	; (80150fc <_dtoa_r+0xbd4>)
 80150d6:	f7ff ba95 	b.w	8014604 <_dtoa_r+0xdc>
 80150da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80150dc:	2b00      	cmp	r3, #0
 80150de:	f47f aa6e 	bne.w	80145be <_dtoa_r+0x96>
 80150e2:	4b07      	ldr	r3, [pc, #28]	; (8015100 <_dtoa_r+0xbd8>)
 80150e4:	f7ff ba8e 	b.w	8014604 <_dtoa_r+0xdc>
 80150e8:	9b02      	ldr	r3, [sp, #8]
 80150ea:	2b00      	cmp	r3, #0
 80150ec:	dcae      	bgt.n	801504c <_dtoa_r+0xb24>
 80150ee:	9b06      	ldr	r3, [sp, #24]
 80150f0:	2b02      	cmp	r3, #2
 80150f2:	f73f aea8 	bgt.w	8014e46 <_dtoa_r+0x91e>
 80150f6:	e7a9      	b.n	801504c <_dtoa_r+0xb24>
 80150f8:	0805d879 	.word	0x0805d879
 80150fc:	0805da71 	.word	0x0805da71
 8015100:	0805d811 	.word	0x0805d811

08015104 <fiprintf>:
 8015104:	b40e      	push	{r1, r2, r3}
 8015106:	b503      	push	{r0, r1, lr}
 8015108:	4601      	mov	r1, r0
 801510a:	ab03      	add	r3, sp, #12
 801510c:	4805      	ldr	r0, [pc, #20]	; (8015124 <fiprintf+0x20>)
 801510e:	f853 2b04 	ldr.w	r2, [r3], #4
 8015112:	6800      	ldr	r0, [r0, #0]
 8015114:	9301      	str	r3, [sp, #4]
 8015116:	f001 fc09 	bl	801692c <_vfiprintf_r>
 801511a:	b002      	add	sp, #8
 801511c:	f85d eb04 	ldr.w	lr, [sp], #4
 8015120:	b003      	add	sp, #12
 8015122:	4770      	bx	lr
 8015124:	2000145c 	.word	0x2000145c

08015128 <rshift>:
 8015128:	6903      	ldr	r3, [r0, #16]
 801512a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801512e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015132:	ea4f 1261 	mov.w	r2, r1, asr #5
 8015136:	f100 0414 	add.w	r4, r0, #20
 801513a:	dd45      	ble.n	80151c8 <rshift+0xa0>
 801513c:	f011 011f 	ands.w	r1, r1, #31
 8015140:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8015144:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8015148:	d10c      	bne.n	8015164 <rshift+0x3c>
 801514a:	f100 0710 	add.w	r7, r0, #16
 801514e:	4629      	mov	r1, r5
 8015150:	42b1      	cmp	r1, r6
 8015152:	d334      	bcc.n	80151be <rshift+0x96>
 8015154:	1a9b      	subs	r3, r3, r2
 8015156:	009b      	lsls	r3, r3, #2
 8015158:	1eea      	subs	r2, r5, #3
 801515a:	4296      	cmp	r6, r2
 801515c:	bf38      	it	cc
 801515e:	2300      	movcc	r3, #0
 8015160:	4423      	add	r3, r4
 8015162:	e015      	b.n	8015190 <rshift+0x68>
 8015164:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8015168:	f1c1 0820 	rsb	r8, r1, #32
 801516c:	40cf      	lsrs	r7, r1
 801516e:	f105 0e04 	add.w	lr, r5, #4
 8015172:	46a1      	mov	r9, r4
 8015174:	4576      	cmp	r6, lr
 8015176:	46f4      	mov	ip, lr
 8015178:	d815      	bhi.n	80151a6 <rshift+0x7e>
 801517a:	1a9a      	subs	r2, r3, r2
 801517c:	0092      	lsls	r2, r2, #2
 801517e:	3a04      	subs	r2, #4
 8015180:	3501      	adds	r5, #1
 8015182:	42ae      	cmp	r6, r5
 8015184:	bf38      	it	cc
 8015186:	2200      	movcc	r2, #0
 8015188:	18a3      	adds	r3, r4, r2
 801518a:	50a7      	str	r7, [r4, r2]
 801518c:	b107      	cbz	r7, 8015190 <rshift+0x68>
 801518e:	3304      	adds	r3, #4
 8015190:	1b1a      	subs	r2, r3, r4
 8015192:	42a3      	cmp	r3, r4
 8015194:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8015198:	bf08      	it	eq
 801519a:	2300      	moveq	r3, #0
 801519c:	6102      	str	r2, [r0, #16]
 801519e:	bf08      	it	eq
 80151a0:	6143      	streq	r3, [r0, #20]
 80151a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80151a6:	f8dc c000 	ldr.w	ip, [ip]
 80151aa:	fa0c fc08 	lsl.w	ip, ip, r8
 80151ae:	ea4c 0707 	orr.w	r7, ip, r7
 80151b2:	f849 7b04 	str.w	r7, [r9], #4
 80151b6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80151ba:	40cf      	lsrs	r7, r1
 80151bc:	e7da      	b.n	8015174 <rshift+0x4c>
 80151be:	f851 cb04 	ldr.w	ip, [r1], #4
 80151c2:	f847 cf04 	str.w	ip, [r7, #4]!
 80151c6:	e7c3      	b.n	8015150 <rshift+0x28>
 80151c8:	4623      	mov	r3, r4
 80151ca:	e7e1      	b.n	8015190 <rshift+0x68>

080151cc <__hexdig_fun>:
 80151cc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80151d0:	2b09      	cmp	r3, #9
 80151d2:	d802      	bhi.n	80151da <__hexdig_fun+0xe>
 80151d4:	3820      	subs	r0, #32
 80151d6:	b2c0      	uxtb	r0, r0
 80151d8:	4770      	bx	lr
 80151da:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80151de:	2b05      	cmp	r3, #5
 80151e0:	d801      	bhi.n	80151e6 <__hexdig_fun+0x1a>
 80151e2:	3847      	subs	r0, #71	; 0x47
 80151e4:	e7f7      	b.n	80151d6 <__hexdig_fun+0xa>
 80151e6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80151ea:	2b05      	cmp	r3, #5
 80151ec:	d801      	bhi.n	80151f2 <__hexdig_fun+0x26>
 80151ee:	3827      	subs	r0, #39	; 0x27
 80151f0:	e7f1      	b.n	80151d6 <__hexdig_fun+0xa>
 80151f2:	2000      	movs	r0, #0
 80151f4:	4770      	bx	lr
	...

080151f8 <__gethex>:
 80151f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151fc:	ed2d 8b02 	vpush	{d8}
 8015200:	b089      	sub	sp, #36	; 0x24
 8015202:	ee08 0a10 	vmov	s16, r0
 8015206:	9304      	str	r3, [sp, #16]
 8015208:	4bb4      	ldr	r3, [pc, #720]	; (80154dc <__gethex+0x2e4>)
 801520a:	681b      	ldr	r3, [r3, #0]
 801520c:	9301      	str	r3, [sp, #4]
 801520e:	4618      	mov	r0, r3
 8015210:	468b      	mov	fp, r1
 8015212:	4690      	mov	r8, r2
 8015214:	f7eb f806 	bl	8000224 <strlen>
 8015218:	9b01      	ldr	r3, [sp, #4]
 801521a:	f8db 2000 	ldr.w	r2, [fp]
 801521e:	4403      	add	r3, r0
 8015220:	4682      	mov	sl, r0
 8015222:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8015226:	9305      	str	r3, [sp, #20]
 8015228:	1c93      	adds	r3, r2, #2
 801522a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801522e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8015232:	32fe      	adds	r2, #254	; 0xfe
 8015234:	18d1      	adds	r1, r2, r3
 8015236:	461f      	mov	r7, r3
 8015238:	f813 0b01 	ldrb.w	r0, [r3], #1
 801523c:	9100      	str	r1, [sp, #0]
 801523e:	2830      	cmp	r0, #48	; 0x30
 8015240:	d0f8      	beq.n	8015234 <__gethex+0x3c>
 8015242:	f7ff ffc3 	bl	80151cc <__hexdig_fun>
 8015246:	4604      	mov	r4, r0
 8015248:	2800      	cmp	r0, #0
 801524a:	d13a      	bne.n	80152c2 <__gethex+0xca>
 801524c:	9901      	ldr	r1, [sp, #4]
 801524e:	4652      	mov	r2, sl
 8015250:	4638      	mov	r0, r7
 8015252:	f001 fe41 	bl	8016ed8 <strncmp>
 8015256:	4605      	mov	r5, r0
 8015258:	2800      	cmp	r0, #0
 801525a:	d168      	bne.n	801532e <__gethex+0x136>
 801525c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8015260:	eb07 060a 	add.w	r6, r7, sl
 8015264:	f7ff ffb2 	bl	80151cc <__hexdig_fun>
 8015268:	2800      	cmp	r0, #0
 801526a:	d062      	beq.n	8015332 <__gethex+0x13a>
 801526c:	4633      	mov	r3, r6
 801526e:	7818      	ldrb	r0, [r3, #0]
 8015270:	2830      	cmp	r0, #48	; 0x30
 8015272:	461f      	mov	r7, r3
 8015274:	f103 0301 	add.w	r3, r3, #1
 8015278:	d0f9      	beq.n	801526e <__gethex+0x76>
 801527a:	f7ff ffa7 	bl	80151cc <__hexdig_fun>
 801527e:	2301      	movs	r3, #1
 8015280:	fab0 f480 	clz	r4, r0
 8015284:	0964      	lsrs	r4, r4, #5
 8015286:	4635      	mov	r5, r6
 8015288:	9300      	str	r3, [sp, #0]
 801528a:	463a      	mov	r2, r7
 801528c:	4616      	mov	r6, r2
 801528e:	3201      	adds	r2, #1
 8015290:	7830      	ldrb	r0, [r6, #0]
 8015292:	f7ff ff9b 	bl	80151cc <__hexdig_fun>
 8015296:	2800      	cmp	r0, #0
 8015298:	d1f8      	bne.n	801528c <__gethex+0x94>
 801529a:	9901      	ldr	r1, [sp, #4]
 801529c:	4652      	mov	r2, sl
 801529e:	4630      	mov	r0, r6
 80152a0:	f001 fe1a 	bl	8016ed8 <strncmp>
 80152a4:	b980      	cbnz	r0, 80152c8 <__gethex+0xd0>
 80152a6:	b94d      	cbnz	r5, 80152bc <__gethex+0xc4>
 80152a8:	eb06 050a 	add.w	r5, r6, sl
 80152ac:	462a      	mov	r2, r5
 80152ae:	4616      	mov	r6, r2
 80152b0:	3201      	adds	r2, #1
 80152b2:	7830      	ldrb	r0, [r6, #0]
 80152b4:	f7ff ff8a 	bl	80151cc <__hexdig_fun>
 80152b8:	2800      	cmp	r0, #0
 80152ba:	d1f8      	bne.n	80152ae <__gethex+0xb6>
 80152bc:	1bad      	subs	r5, r5, r6
 80152be:	00ad      	lsls	r5, r5, #2
 80152c0:	e004      	b.n	80152cc <__gethex+0xd4>
 80152c2:	2400      	movs	r4, #0
 80152c4:	4625      	mov	r5, r4
 80152c6:	e7e0      	b.n	801528a <__gethex+0x92>
 80152c8:	2d00      	cmp	r5, #0
 80152ca:	d1f7      	bne.n	80152bc <__gethex+0xc4>
 80152cc:	7833      	ldrb	r3, [r6, #0]
 80152ce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80152d2:	2b50      	cmp	r3, #80	; 0x50
 80152d4:	d13b      	bne.n	801534e <__gethex+0x156>
 80152d6:	7873      	ldrb	r3, [r6, #1]
 80152d8:	2b2b      	cmp	r3, #43	; 0x2b
 80152da:	d02c      	beq.n	8015336 <__gethex+0x13e>
 80152dc:	2b2d      	cmp	r3, #45	; 0x2d
 80152de:	d02e      	beq.n	801533e <__gethex+0x146>
 80152e0:	1c71      	adds	r1, r6, #1
 80152e2:	f04f 0900 	mov.w	r9, #0
 80152e6:	7808      	ldrb	r0, [r1, #0]
 80152e8:	f7ff ff70 	bl	80151cc <__hexdig_fun>
 80152ec:	1e43      	subs	r3, r0, #1
 80152ee:	b2db      	uxtb	r3, r3
 80152f0:	2b18      	cmp	r3, #24
 80152f2:	d82c      	bhi.n	801534e <__gethex+0x156>
 80152f4:	f1a0 0210 	sub.w	r2, r0, #16
 80152f8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80152fc:	f7ff ff66 	bl	80151cc <__hexdig_fun>
 8015300:	1e43      	subs	r3, r0, #1
 8015302:	b2db      	uxtb	r3, r3
 8015304:	2b18      	cmp	r3, #24
 8015306:	d91d      	bls.n	8015344 <__gethex+0x14c>
 8015308:	f1b9 0f00 	cmp.w	r9, #0
 801530c:	d000      	beq.n	8015310 <__gethex+0x118>
 801530e:	4252      	negs	r2, r2
 8015310:	4415      	add	r5, r2
 8015312:	f8cb 1000 	str.w	r1, [fp]
 8015316:	b1e4      	cbz	r4, 8015352 <__gethex+0x15a>
 8015318:	9b00      	ldr	r3, [sp, #0]
 801531a:	2b00      	cmp	r3, #0
 801531c:	bf14      	ite	ne
 801531e:	2700      	movne	r7, #0
 8015320:	2706      	moveq	r7, #6
 8015322:	4638      	mov	r0, r7
 8015324:	b009      	add	sp, #36	; 0x24
 8015326:	ecbd 8b02 	vpop	{d8}
 801532a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801532e:	463e      	mov	r6, r7
 8015330:	4625      	mov	r5, r4
 8015332:	2401      	movs	r4, #1
 8015334:	e7ca      	b.n	80152cc <__gethex+0xd4>
 8015336:	f04f 0900 	mov.w	r9, #0
 801533a:	1cb1      	adds	r1, r6, #2
 801533c:	e7d3      	b.n	80152e6 <__gethex+0xee>
 801533e:	f04f 0901 	mov.w	r9, #1
 8015342:	e7fa      	b.n	801533a <__gethex+0x142>
 8015344:	230a      	movs	r3, #10
 8015346:	fb03 0202 	mla	r2, r3, r2, r0
 801534a:	3a10      	subs	r2, #16
 801534c:	e7d4      	b.n	80152f8 <__gethex+0x100>
 801534e:	4631      	mov	r1, r6
 8015350:	e7df      	b.n	8015312 <__gethex+0x11a>
 8015352:	1bf3      	subs	r3, r6, r7
 8015354:	3b01      	subs	r3, #1
 8015356:	4621      	mov	r1, r4
 8015358:	2b07      	cmp	r3, #7
 801535a:	dc0b      	bgt.n	8015374 <__gethex+0x17c>
 801535c:	ee18 0a10 	vmov	r0, s16
 8015360:	f000 fa86 	bl	8015870 <_Balloc>
 8015364:	4604      	mov	r4, r0
 8015366:	b940      	cbnz	r0, 801537a <__gethex+0x182>
 8015368:	4b5d      	ldr	r3, [pc, #372]	; (80154e0 <__gethex+0x2e8>)
 801536a:	4602      	mov	r2, r0
 801536c:	21de      	movs	r1, #222	; 0xde
 801536e:	485d      	ldr	r0, [pc, #372]	; (80154e4 <__gethex+0x2ec>)
 8015370:	f7ff f820 	bl	80143b4 <__assert_func>
 8015374:	3101      	adds	r1, #1
 8015376:	105b      	asrs	r3, r3, #1
 8015378:	e7ee      	b.n	8015358 <__gethex+0x160>
 801537a:	f100 0914 	add.w	r9, r0, #20
 801537e:	f04f 0b00 	mov.w	fp, #0
 8015382:	f1ca 0301 	rsb	r3, sl, #1
 8015386:	f8cd 9008 	str.w	r9, [sp, #8]
 801538a:	f8cd b000 	str.w	fp, [sp]
 801538e:	9306      	str	r3, [sp, #24]
 8015390:	42b7      	cmp	r7, r6
 8015392:	d340      	bcc.n	8015416 <__gethex+0x21e>
 8015394:	9802      	ldr	r0, [sp, #8]
 8015396:	9b00      	ldr	r3, [sp, #0]
 8015398:	f840 3b04 	str.w	r3, [r0], #4
 801539c:	eba0 0009 	sub.w	r0, r0, r9
 80153a0:	1080      	asrs	r0, r0, #2
 80153a2:	0146      	lsls	r6, r0, #5
 80153a4:	6120      	str	r0, [r4, #16]
 80153a6:	4618      	mov	r0, r3
 80153a8:	f000 fb54 	bl	8015a54 <__hi0bits>
 80153ac:	1a30      	subs	r0, r6, r0
 80153ae:	f8d8 6000 	ldr.w	r6, [r8]
 80153b2:	42b0      	cmp	r0, r6
 80153b4:	dd63      	ble.n	801547e <__gethex+0x286>
 80153b6:	1b87      	subs	r7, r0, r6
 80153b8:	4639      	mov	r1, r7
 80153ba:	4620      	mov	r0, r4
 80153bc:	f000 fef8 	bl	80161b0 <__any_on>
 80153c0:	4682      	mov	sl, r0
 80153c2:	b1a8      	cbz	r0, 80153f0 <__gethex+0x1f8>
 80153c4:	1e7b      	subs	r3, r7, #1
 80153c6:	1159      	asrs	r1, r3, #5
 80153c8:	f003 021f 	and.w	r2, r3, #31
 80153cc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80153d0:	f04f 0a01 	mov.w	sl, #1
 80153d4:	fa0a f202 	lsl.w	r2, sl, r2
 80153d8:	420a      	tst	r2, r1
 80153da:	d009      	beq.n	80153f0 <__gethex+0x1f8>
 80153dc:	4553      	cmp	r3, sl
 80153de:	dd05      	ble.n	80153ec <__gethex+0x1f4>
 80153e0:	1eb9      	subs	r1, r7, #2
 80153e2:	4620      	mov	r0, r4
 80153e4:	f000 fee4 	bl	80161b0 <__any_on>
 80153e8:	2800      	cmp	r0, #0
 80153ea:	d145      	bne.n	8015478 <__gethex+0x280>
 80153ec:	f04f 0a02 	mov.w	sl, #2
 80153f0:	4639      	mov	r1, r7
 80153f2:	4620      	mov	r0, r4
 80153f4:	f7ff fe98 	bl	8015128 <rshift>
 80153f8:	443d      	add	r5, r7
 80153fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80153fe:	42ab      	cmp	r3, r5
 8015400:	da4c      	bge.n	801549c <__gethex+0x2a4>
 8015402:	ee18 0a10 	vmov	r0, s16
 8015406:	4621      	mov	r1, r4
 8015408:	f000 fa72 	bl	80158f0 <_Bfree>
 801540c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801540e:	2300      	movs	r3, #0
 8015410:	6013      	str	r3, [r2, #0]
 8015412:	27a3      	movs	r7, #163	; 0xa3
 8015414:	e785      	b.n	8015322 <__gethex+0x12a>
 8015416:	1e73      	subs	r3, r6, #1
 8015418:	9a05      	ldr	r2, [sp, #20]
 801541a:	9303      	str	r3, [sp, #12]
 801541c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8015420:	4293      	cmp	r3, r2
 8015422:	d019      	beq.n	8015458 <__gethex+0x260>
 8015424:	f1bb 0f20 	cmp.w	fp, #32
 8015428:	d107      	bne.n	801543a <__gethex+0x242>
 801542a:	9b02      	ldr	r3, [sp, #8]
 801542c:	9a00      	ldr	r2, [sp, #0]
 801542e:	f843 2b04 	str.w	r2, [r3], #4
 8015432:	9302      	str	r3, [sp, #8]
 8015434:	2300      	movs	r3, #0
 8015436:	9300      	str	r3, [sp, #0]
 8015438:	469b      	mov	fp, r3
 801543a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801543e:	f7ff fec5 	bl	80151cc <__hexdig_fun>
 8015442:	9b00      	ldr	r3, [sp, #0]
 8015444:	f000 000f 	and.w	r0, r0, #15
 8015448:	fa00 f00b 	lsl.w	r0, r0, fp
 801544c:	4303      	orrs	r3, r0
 801544e:	9300      	str	r3, [sp, #0]
 8015450:	f10b 0b04 	add.w	fp, fp, #4
 8015454:	9b03      	ldr	r3, [sp, #12]
 8015456:	e00d      	b.n	8015474 <__gethex+0x27c>
 8015458:	9b03      	ldr	r3, [sp, #12]
 801545a:	9a06      	ldr	r2, [sp, #24]
 801545c:	4413      	add	r3, r2
 801545e:	42bb      	cmp	r3, r7
 8015460:	d3e0      	bcc.n	8015424 <__gethex+0x22c>
 8015462:	4618      	mov	r0, r3
 8015464:	9901      	ldr	r1, [sp, #4]
 8015466:	9307      	str	r3, [sp, #28]
 8015468:	4652      	mov	r2, sl
 801546a:	f001 fd35 	bl	8016ed8 <strncmp>
 801546e:	9b07      	ldr	r3, [sp, #28]
 8015470:	2800      	cmp	r0, #0
 8015472:	d1d7      	bne.n	8015424 <__gethex+0x22c>
 8015474:	461e      	mov	r6, r3
 8015476:	e78b      	b.n	8015390 <__gethex+0x198>
 8015478:	f04f 0a03 	mov.w	sl, #3
 801547c:	e7b8      	b.n	80153f0 <__gethex+0x1f8>
 801547e:	da0a      	bge.n	8015496 <__gethex+0x29e>
 8015480:	1a37      	subs	r7, r6, r0
 8015482:	4621      	mov	r1, r4
 8015484:	ee18 0a10 	vmov	r0, s16
 8015488:	463a      	mov	r2, r7
 801548a:	f000 fc4d 	bl	8015d28 <__lshift>
 801548e:	1bed      	subs	r5, r5, r7
 8015490:	4604      	mov	r4, r0
 8015492:	f100 0914 	add.w	r9, r0, #20
 8015496:	f04f 0a00 	mov.w	sl, #0
 801549a:	e7ae      	b.n	80153fa <__gethex+0x202>
 801549c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80154a0:	42a8      	cmp	r0, r5
 80154a2:	dd72      	ble.n	801558a <__gethex+0x392>
 80154a4:	1b45      	subs	r5, r0, r5
 80154a6:	42ae      	cmp	r6, r5
 80154a8:	dc36      	bgt.n	8015518 <__gethex+0x320>
 80154aa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80154ae:	2b02      	cmp	r3, #2
 80154b0:	d02a      	beq.n	8015508 <__gethex+0x310>
 80154b2:	2b03      	cmp	r3, #3
 80154b4:	d02c      	beq.n	8015510 <__gethex+0x318>
 80154b6:	2b01      	cmp	r3, #1
 80154b8:	d11c      	bne.n	80154f4 <__gethex+0x2fc>
 80154ba:	42ae      	cmp	r6, r5
 80154bc:	d11a      	bne.n	80154f4 <__gethex+0x2fc>
 80154be:	2e01      	cmp	r6, #1
 80154c0:	d112      	bne.n	80154e8 <__gethex+0x2f0>
 80154c2:	9a04      	ldr	r2, [sp, #16]
 80154c4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80154c8:	6013      	str	r3, [r2, #0]
 80154ca:	2301      	movs	r3, #1
 80154cc:	6123      	str	r3, [r4, #16]
 80154ce:	f8c9 3000 	str.w	r3, [r9]
 80154d2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80154d4:	2762      	movs	r7, #98	; 0x62
 80154d6:	601c      	str	r4, [r3, #0]
 80154d8:	e723      	b.n	8015322 <__gethex+0x12a>
 80154da:	bf00      	nop
 80154dc:	0805d8f0 	.word	0x0805d8f0
 80154e0:	0805d879 	.word	0x0805d879
 80154e4:	0805d88a 	.word	0x0805d88a
 80154e8:	1e71      	subs	r1, r6, #1
 80154ea:	4620      	mov	r0, r4
 80154ec:	f000 fe60 	bl	80161b0 <__any_on>
 80154f0:	2800      	cmp	r0, #0
 80154f2:	d1e6      	bne.n	80154c2 <__gethex+0x2ca>
 80154f4:	ee18 0a10 	vmov	r0, s16
 80154f8:	4621      	mov	r1, r4
 80154fa:	f000 f9f9 	bl	80158f0 <_Bfree>
 80154fe:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015500:	2300      	movs	r3, #0
 8015502:	6013      	str	r3, [r2, #0]
 8015504:	2750      	movs	r7, #80	; 0x50
 8015506:	e70c      	b.n	8015322 <__gethex+0x12a>
 8015508:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801550a:	2b00      	cmp	r3, #0
 801550c:	d1f2      	bne.n	80154f4 <__gethex+0x2fc>
 801550e:	e7d8      	b.n	80154c2 <__gethex+0x2ca>
 8015510:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015512:	2b00      	cmp	r3, #0
 8015514:	d1d5      	bne.n	80154c2 <__gethex+0x2ca>
 8015516:	e7ed      	b.n	80154f4 <__gethex+0x2fc>
 8015518:	1e6f      	subs	r7, r5, #1
 801551a:	f1ba 0f00 	cmp.w	sl, #0
 801551e:	d131      	bne.n	8015584 <__gethex+0x38c>
 8015520:	b127      	cbz	r7, 801552c <__gethex+0x334>
 8015522:	4639      	mov	r1, r7
 8015524:	4620      	mov	r0, r4
 8015526:	f000 fe43 	bl	80161b0 <__any_on>
 801552a:	4682      	mov	sl, r0
 801552c:	117b      	asrs	r3, r7, #5
 801552e:	2101      	movs	r1, #1
 8015530:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8015534:	f007 071f 	and.w	r7, r7, #31
 8015538:	fa01 f707 	lsl.w	r7, r1, r7
 801553c:	421f      	tst	r7, r3
 801553e:	4629      	mov	r1, r5
 8015540:	4620      	mov	r0, r4
 8015542:	bf18      	it	ne
 8015544:	f04a 0a02 	orrne.w	sl, sl, #2
 8015548:	1b76      	subs	r6, r6, r5
 801554a:	f7ff fded 	bl	8015128 <rshift>
 801554e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8015552:	2702      	movs	r7, #2
 8015554:	f1ba 0f00 	cmp.w	sl, #0
 8015558:	d048      	beq.n	80155ec <__gethex+0x3f4>
 801555a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801555e:	2b02      	cmp	r3, #2
 8015560:	d015      	beq.n	801558e <__gethex+0x396>
 8015562:	2b03      	cmp	r3, #3
 8015564:	d017      	beq.n	8015596 <__gethex+0x39e>
 8015566:	2b01      	cmp	r3, #1
 8015568:	d109      	bne.n	801557e <__gethex+0x386>
 801556a:	f01a 0f02 	tst.w	sl, #2
 801556e:	d006      	beq.n	801557e <__gethex+0x386>
 8015570:	f8d9 0000 	ldr.w	r0, [r9]
 8015574:	ea4a 0a00 	orr.w	sl, sl, r0
 8015578:	f01a 0f01 	tst.w	sl, #1
 801557c:	d10e      	bne.n	801559c <__gethex+0x3a4>
 801557e:	f047 0710 	orr.w	r7, r7, #16
 8015582:	e033      	b.n	80155ec <__gethex+0x3f4>
 8015584:	f04f 0a01 	mov.w	sl, #1
 8015588:	e7d0      	b.n	801552c <__gethex+0x334>
 801558a:	2701      	movs	r7, #1
 801558c:	e7e2      	b.n	8015554 <__gethex+0x35c>
 801558e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015590:	f1c3 0301 	rsb	r3, r3, #1
 8015594:	9315      	str	r3, [sp, #84]	; 0x54
 8015596:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015598:	2b00      	cmp	r3, #0
 801559a:	d0f0      	beq.n	801557e <__gethex+0x386>
 801559c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80155a0:	f104 0314 	add.w	r3, r4, #20
 80155a4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80155a8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80155ac:	f04f 0c00 	mov.w	ip, #0
 80155b0:	4618      	mov	r0, r3
 80155b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80155b6:	f1b2 3fff 	cmp.w	r2, #4294967295
 80155ba:	d01c      	beq.n	80155f6 <__gethex+0x3fe>
 80155bc:	3201      	adds	r2, #1
 80155be:	6002      	str	r2, [r0, #0]
 80155c0:	2f02      	cmp	r7, #2
 80155c2:	f104 0314 	add.w	r3, r4, #20
 80155c6:	d13f      	bne.n	8015648 <__gethex+0x450>
 80155c8:	f8d8 2000 	ldr.w	r2, [r8]
 80155cc:	3a01      	subs	r2, #1
 80155ce:	42b2      	cmp	r2, r6
 80155d0:	d10a      	bne.n	80155e8 <__gethex+0x3f0>
 80155d2:	1171      	asrs	r1, r6, #5
 80155d4:	2201      	movs	r2, #1
 80155d6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80155da:	f006 061f 	and.w	r6, r6, #31
 80155de:	fa02 f606 	lsl.w	r6, r2, r6
 80155e2:	421e      	tst	r6, r3
 80155e4:	bf18      	it	ne
 80155e6:	4617      	movne	r7, r2
 80155e8:	f047 0720 	orr.w	r7, r7, #32
 80155ec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80155ee:	601c      	str	r4, [r3, #0]
 80155f0:	9b04      	ldr	r3, [sp, #16]
 80155f2:	601d      	str	r5, [r3, #0]
 80155f4:	e695      	b.n	8015322 <__gethex+0x12a>
 80155f6:	4299      	cmp	r1, r3
 80155f8:	f843 cc04 	str.w	ip, [r3, #-4]
 80155fc:	d8d8      	bhi.n	80155b0 <__gethex+0x3b8>
 80155fe:	68a3      	ldr	r3, [r4, #8]
 8015600:	459b      	cmp	fp, r3
 8015602:	db19      	blt.n	8015638 <__gethex+0x440>
 8015604:	6861      	ldr	r1, [r4, #4]
 8015606:	ee18 0a10 	vmov	r0, s16
 801560a:	3101      	adds	r1, #1
 801560c:	f000 f930 	bl	8015870 <_Balloc>
 8015610:	4681      	mov	r9, r0
 8015612:	b918      	cbnz	r0, 801561c <__gethex+0x424>
 8015614:	4b1a      	ldr	r3, [pc, #104]	; (8015680 <__gethex+0x488>)
 8015616:	4602      	mov	r2, r0
 8015618:	2184      	movs	r1, #132	; 0x84
 801561a:	e6a8      	b.n	801536e <__gethex+0x176>
 801561c:	6922      	ldr	r2, [r4, #16]
 801561e:	3202      	adds	r2, #2
 8015620:	f104 010c 	add.w	r1, r4, #12
 8015624:	0092      	lsls	r2, r2, #2
 8015626:	300c      	adds	r0, #12
 8015628:	f7fc ff8a 	bl	8012540 <memcpy>
 801562c:	4621      	mov	r1, r4
 801562e:	ee18 0a10 	vmov	r0, s16
 8015632:	f000 f95d 	bl	80158f0 <_Bfree>
 8015636:	464c      	mov	r4, r9
 8015638:	6923      	ldr	r3, [r4, #16]
 801563a:	1c5a      	adds	r2, r3, #1
 801563c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015640:	6122      	str	r2, [r4, #16]
 8015642:	2201      	movs	r2, #1
 8015644:	615a      	str	r2, [r3, #20]
 8015646:	e7bb      	b.n	80155c0 <__gethex+0x3c8>
 8015648:	6922      	ldr	r2, [r4, #16]
 801564a:	455a      	cmp	r2, fp
 801564c:	dd0b      	ble.n	8015666 <__gethex+0x46e>
 801564e:	2101      	movs	r1, #1
 8015650:	4620      	mov	r0, r4
 8015652:	f7ff fd69 	bl	8015128 <rshift>
 8015656:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801565a:	3501      	adds	r5, #1
 801565c:	42ab      	cmp	r3, r5
 801565e:	f6ff aed0 	blt.w	8015402 <__gethex+0x20a>
 8015662:	2701      	movs	r7, #1
 8015664:	e7c0      	b.n	80155e8 <__gethex+0x3f0>
 8015666:	f016 061f 	ands.w	r6, r6, #31
 801566a:	d0fa      	beq.n	8015662 <__gethex+0x46a>
 801566c:	4453      	add	r3, sl
 801566e:	f1c6 0620 	rsb	r6, r6, #32
 8015672:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8015676:	f000 f9ed 	bl	8015a54 <__hi0bits>
 801567a:	42b0      	cmp	r0, r6
 801567c:	dbe7      	blt.n	801564e <__gethex+0x456>
 801567e:	e7f0      	b.n	8015662 <__gethex+0x46a>
 8015680:	0805d879 	.word	0x0805d879

08015684 <L_shift>:
 8015684:	f1c2 0208 	rsb	r2, r2, #8
 8015688:	0092      	lsls	r2, r2, #2
 801568a:	b570      	push	{r4, r5, r6, lr}
 801568c:	f1c2 0620 	rsb	r6, r2, #32
 8015690:	6843      	ldr	r3, [r0, #4]
 8015692:	6804      	ldr	r4, [r0, #0]
 8015694:	fa03 f506 	lsl.w	r5, r3, r6
 8015698:	432c      	orrs	r4, r5
 801569a:	40d3      	lsrs	r3, r2
 801569c:	6004      	str	r4, [r0, #0]
 801569e:	f840 3f04 	str.w	r3, [r0, #4]!
 80156a2:	4288      	cmp	r0, r1
 80156a4:	d3f4      	bcc.n	8015690 <L_shift+0xc>
 80156a6:	bd70      	pop	{r4, r5, r6, pc}

080156a8 <__match>:
 80156a8:	b530      	push	{r4, r5, lr}
 80156aa:	6803      	ldr	r3, [r0, #0]
 80156ac:	3301      	adds	r3, #1
 80156ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80156b2:	b914      	cbnz	r4, 80156ba <__match+0x12>
 80156b4:	6003      	str	r3, [r0, #0]
 80156b6:	2001      	movs	r0, #1
 80156b8:	bd30      	pop	{r4, r5, pc}
 80156ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80156be:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80156c2:	2d19      	cmp	r5, #25
 80156c4:	bf98      	it	ls
 80156c6:	3220      	addls	r2, #32
 80156c8:	42a2      	cmp	r2, r4
 80156ca:	d0f0      	beq.n	80156ae <__match+0x6>
 80156cc:	2000      	movs	r0, #0
 80156ce:	e7f3      	b.n	80156b8 <__match+0x10>

080156d0 <__hexnan>:
 80156d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156d4:	680b      	ldr	r3, [r1, #0]
 80156d6:	115e      	asrs	r6, r3, #5
 80156d8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80156dc:	f013 031f 	ands.w	r3, r3, #31
 80156e0:	b087      	sub	sp, #28
 80156e2:	bf18      	it	ne
 80156e4:	3604      	addne	r6, #4
 80156e6:	2500      	movs	r5, #0
 80156e8:	1f37      	subs	r7, r6, #4
 80156ea:	4690      	mov	r8, r2
 80156ec:	6802      	ldr	r2, [r0, #0]
 80156ee:	9301      	str	r3, [sp, #4]
 80156f0:	4682      	mov	sl, r0
 80156f2:	f846 5c04 	str.w	r5, [r6, #-4]
 80156f6:	46b9      	mov	r9, r7
 80156f8:	463c      	mov	r4, r7
 80156fa:	9502      	str	r5, [sp, #8]
 80156fc:	46ab      	mov	fp, r5
 80156fe:	7851      	ldrb	r1, [r2, #1]
 8015700:	1c53      	adds	r3, r2, #1
 8015702:	9303      	str	r3, [sp, #12]
 8015704:	b341      	cbz	r1, 8015758 <__hexnan+0x88>
 8015706:	4608      	mov	r0, r1
 8015708:	9205      	str	r2, [sp, #20]
 801570a:	9104      	str	r1, [sp, #16]
 801570c:	f7ff fd5e 	bl	80151cc <__hexdig_fun>
 8015710:	2800      	cmp	r0, #0
 8015712:	d14f      	bne.n	80157b4 <__hexnan+0xe4>
 8015714:	9904      	ldr	r1, [sp, #16]
 8015716:	9a05      	ldr	r2, [sp, #20]
 8015718:	2920      	cmp	r1, #32
 801571a:	d818      	bhi.n	801574e <__hexnan+0x7e>
 801571c:	9b02      	ldr	r3, [sp, #8]
 801571e:	459b      	cmp	fp, r3
 8015720:	dd13      	ble.n	801574a <__hexnan+0x7a>
 8015722:	454c      	cmp	r4, r9
 8015724:	d206      	bcs.n	8015734 <__hexnan+0x64>
 8015726:	2d07      	cmp	r5, #7
 8015728:	dc04      	bgt.n	8015734 <__hexnan+0x64>
 801572a:	462a      	mov	r2, r5
 801572c:	4649      	mov	r1, r9
 801572e:	4620      	mov	r0, r4
 8015730:	f7ff ffa8 	bl	8015684 <L_shift>
 8015734:	4544      	cmp	r4, r8
 8015736:	d950      	bls.n	80157da <__hexnan+0x10a>
 8015738:	2300      	movs	r3, #0
 801573a:	f1a4 0904 	sub.w	r9, r4, #4
 801573e:	f844 3c04 	str.w	r3, [r4, #-4]
 8015742:	f8cd b008 	str.w	fp, [sp, #8]
 8015746:	464c      	mov	r4, r9
 8015748:	461d      	mov	r5, r3
 801574a:	9a03      	ldr	r2, [sp, #12]
 801574c:	e7d7      	b.n	80156fe <__hexnan+0x2e>
 801574e:	2929      	cmp	r1, #41	; 0x29
 8015750:	d156      	bne.n	8015800 <__hexnan+0x130>
 8015752:	3202      	adds	r2, #2
 8015754:	f8ca 2000 	str.w	r2, [sl]
 8015758:	f1bb 0f00 	cmp.w	fp, #0
 801575c:	d050      	beq.n	8015800 <__hexnan+0x130>
 801575e:	454c      	cmp	r4, r9
 8015760:	d206      	bcs.n	8015770 <__hexnan+0xa0>
 8015762:	2d07      	cmp	r5, #7
 8015764:	dc04      	bgt.n	8015770 <__hexnan+0xa0>
 8015766:	462a      	mov	r2, r5
 8015768:	4649      	mov	r1, r9
 801576a:	4620      	mov	r0, r4
 801576c:	f7ff ff8a 	bl	8015684 <L_shift>
 8015770:	4544      	cmp	r4, r8
 8015772:	d934      	bls.n	80157de <__hexnan+0x10e>
 8015774:	f1a8 0204 	sub.w	r2, r8, #4
 8015778:	4623      	mov	r3, r4
 801577a:	f853 1b04 	ldr.w	r1, [r3], #4
 801577e:	f842 1f04 	str.w	r1, [r2, #4]!
 8015782:	429f      	cmp	r7, r3
 8015784:	d2f9      	bcs.n	801577a <__hexnan+0xaa>
 8015786:	1b3b      	subs	r3, r7, r4
 8015788:	f023 0303 	bic.w	r3, r3, #3
 801578c:	3304      	adds	r3, #4
 801578e:	3401      	adds	r4, #1
 8015790:	3e03      	subs	r6, #3
 8015792:	42b4      	cmp	r4, r6
 8015794:	bf88      	it	hi
 8015796:	2304      	movhi	r3, #4
 8015798:	4443      	add	r3, r8
 801579a:	2200      	movs	r2, #0
 801579c:	f843 2b04 	str.w	r2, [r3], #4
 80157a0:	429f      	cmp	r7, r3
 80157a2:	d2fb      	bcs.n	801579c <__hexnan+0xcc>
 80157a4:	683b      	ldr	r3, [r7, #0]
 80157a6:	b91b      	cbnz	r3, 80157b0 <__hexnan+0xe0>
 80157a8:	4547      	cmp	r7, r8
 80157aa:	d127      	bne.n	80157fc <__hexnan+0x12c>
 80157ac:	2301      	movs	r3, #1
 80157ae:	603b      	str	r3, [r7, #0]
 80157b0:	2005      	movs	r0, #5
 80157b2:	e026      	b.n	8015802 <__hexnan+0x132>
 80157b4:	3501      	adds	r5, #1
 80157b6:	2d08      	cmp	r5, #8
 80157b8:	f10b 0b01 	add.w	fp, fp, #1
 80157bc:	dd06      	ble.n	80157cc <__hexnan+0xfc>
 80157be:	4544      	cmp	r4, r8
 80157c0:	d9c3      	bls.n	801574a <__hexnan+0x7a>
 80157c2:	2300      	movs	r3, #0
 80157c4:	f844 3c04 	str.w	r3, [r4, #-4]
 80157c8:	2501      	movs	r5, #1
 80157ca:	3c04      	subs	r4, #4
 80157cc:	6822      	ldr	r2, [r4, #0]
 80157ce:	f000 000f 	and.w	r0, r0, #15
 80157d2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80157d6:	6022      	str	r2, [r4, #0]
 80157d8:	e7b7      	b.n	801574a <__hexnan+0x7a>
 80157da:	2508      	movs	r5, #8
 80157dc:	e7b5      	b.n	801574a <__hexnan+0x7a>
 80157de:	9b01      	ldr	r3, [sp, #4]
 80157e0:	2b00      	cmp	r3, #0
 80157e2:	d0df      	beq.n	80157a4 <__hexnan+0xd4>
 80157e4:	f04f 32ff 	mov.w	r2, #4294967295
 80157e8:	f1c3 0320 	rsb	r3, r3, #32
 80157ec:	fa22 f303 	lsr.w	r3, r2, r3
 80157f0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80157f4:	401a      	ands	r2, r3
 80157f6:	f846 2c04 	str.w	r2, [r6, #-4]
 80157fa:	e7d3      	b.n	80157a4 <__hexnan+0xd4>
 80157fc:	3f04      	subs	r7, #4
 80157fe:	e7d1      	b.n	80157a4 <__hexnan+0xd4>
 8015800:	2004      	movs	r0, #4
 8015802:	b007      	add	sp, #28
 8015804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015808 <_localeconv_r>:
 8015808:	4800      	ldr	r0, [pc, #0]	; (801580c <_localeconv_r+0x4>)
 801580a:	4770      	bx	lr
 801580c:	200015b4 	.word	0x200015b4

08015810 <_lseek_r>:
 8015810:	b538      	push	{r3, r4, r5, lr}
 8015812:	4d07      	ldr	r5, [pc, #28]	; (8015830 <_lseek_r+0x20>)
 8015814:	4604      	mov	r4, r0
 8015816:	4608      	mov	r0, r1
 8015818:	4611      	mov	r1, r2
 801581a:	2200      	movs	r2, #0
 801581c:	602a      	str	r2, [r5, #0]
 801581e:	461a      	mov	r2, r3
 8015820:	f002 ff08 	bl	8018634 <_lseek>
 8015824:	1c43      	adds	r3, r0, #1
 8015826:	d102      	bne.n	801582e <_lseek_r+0x1e>
 8015828:	682b      	ldr	r3, [r5, #0]
 801582a:	b103      	cbz	r3, 801582e <_lseek_r+0x1e>
 801582c:	6023      	str	r3, [r4, #0]
 801582e:	bd38      	pop	{r3, r4, r5, pc}
 8015830:	2000c66c 	.word	0x2000c66c

08015834 <__ascii_mbtowc>:
 8015834:	b082      	sub	sp, #8
 8015836:	b901      	cbnz	r1, 801583a <__ascii_mbtowc+0x6>
 8015838:	a901      	add	r1, sp, #4
 801583a:	b142      	cbz	r2, 801584e <__ascii_mbtowc+0x1a>
 801583c:	b14b      	cbz	r3, 8015852 <__ascii_mbtowc+0x1e>
 801583e:	7813      	ldrb	r3, [r2, #0]
 8015840:	600b      	str	r3, [r1, #0]
 8015842:	7812      	ldrb	r2, [r2, #0]
 8015844:	1e10      	subs	r0, r2, #0
 8015846:	bf18      	it	ne
 8015848:	2001      	movne	r0, #1
 801584a:	b002      	add	sp, #8
 801584c:	4770      	bx	lr
 801584e:	4610      	mov	r0, r2
 8015850:	e7fb      	b.n	801584a <__ascii_mbtowc+0x16>
 8015852:	f06f 0001 	mvn.w	r0, #1
 8015856:	e7f8      	b.n	801584a <__ascii_mbtowc+0x16>

08015858 <__malloc_lock>:
 8015858:	4801      	ldr	r0, [pc, #4]	; (8015860 <__malloc_lock+0x8>)
 801585a:	f001 be8d 	b.w	8017578 <__retarget_lock_acquire_recursive>
 801585e:	bf00      	nop
 8015860:	2000c670 	.word	0x2000c670

08015864 <__malloc_unlock>:
 8015864:	4801      	ldr	r0, [pc, #4]	; (801586c <__malloc_unlock+0x8>)
 8015866:	f001 be88 	b.w	801757a <__retarget_lock_release_recursive>
 801586a:	bf00      	nop
 801586c:	2000c670 	.word	0x2000c670

08015870 <_Balloc>:
 8015870:	b570      	push	{r4, r5, r6, lr}
 8015872:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015874:	4604      	mov	r4, r0
 8015876:	460d      	mov	r5, r1
 8015878:	b976      	cbnz	r6, 8015898 <_Balloc+0x28>
 801587a:	2010      	movs	r0, #16
 801587c:	f7fc fe58 	bl	8012530 <malloc>
 8015880:	4602      	mov	r2, r0
 8015882:	6260      	str	r0, [r4, #36]	; 0x24
 8015884:	b920      	cbnz	r0, 8015890 <_Balloc+0x20>
 8015886:	4b18      	ldr	r3, [pc, #96]	; (80158e8 <_Balloc+0x78>)
 8015888:	4818      	ldr	r0, [pc, #96]	; (80158ec <_Balloc+0x7c>)
 801588a:	2166      	movs	r1, #102	; 0x66
 801588c:	f7fe fd92 	bl	80143b4 <__assert_func>
 8015890:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015894:	6006      	str	r6, [r0, #0]
 8015896:	60c6      	str	r6, [r0, #12]
 8015898:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801589a:	68f3      	ldr	r3, [r6, #12]
 801589c:	b183      	cbz	r3, 80158c0 <_Balloc+0x50>
 801589e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80158a0:	68db      	ldr	r3, [r3, #12]
 80158a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80158a6:	b9b8      	cbnz	r0, 80158d8 <_Balloc+0x68>
 80158a8:	2101      	movs	r1, #1
 80158aa:	fa01 f605 	lsl.w	r6, r1, r5
 80158ae:	1d72      	adds	r2, r6, #5
 80158b0:	0092      	lsls	r2, r2, #2
 80158b2:	4620      	mov	r0, r4
 80158b4:	f000 fc9d 	bl	80161f2 <_calloc_r>
 80158b8:	b160      	cbz	r0, 80158d4 <_Balloc+0x64>
 80158ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80158be:	e00e      	b.n	80158de <_Balloc+0x6e>
 80158c0:	2221      	movs	r2, #33	; 0x21
 80158c2:	2104      	movs	r1, #4
 80158c4:	4620      	mov	r0, r4
 80158c6:	f000 fc94 	bl	80161f2 <_calloc_r>
 80158ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80158cc:	60f0      	str	r0, [r6, #12]
 80158ce:	68db      	ldr	r3, [r3, #12]
 80158d0:	2b00      	cmp	r3, #0
 80158d2:	d1e4      	bne.n	801589e <_Balloc+0x2e>
 80158d4:	2000      	movs	r0, #0
 80158d6:	bd70      	pop	{r4, r5, r6, pc}
 80158d8:	6802      	ldr	r2, [r0, #0]
 80158da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80158de:	2300      	movs	r3, #0
 80158e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80158e4:	e7f7      	b.n	80158d6 <_Balloc+0x66>
 80158e6:	bf00      	nop
 80158e8:	0805d660 	.word	0x0805d660
 80158ec:	0805d904 	.word	0x0805d904

080158f0 <_Bfree>:
 80158f0:	b570      	push	{r4, r5, r6, lr}
 80158f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80158f4:	4605      	mov	r5, r0
 80158f6:	460c      	mov	r4, r1
 80158f8:	b976      	cbnz	r6, 8015918 <_Bfree+0x28>
 80158fa:	2010      	movs	r0, #16
 80158fc:	f7fc fe18 	bl	8012530 <malloc>
 8015900:	4602      	mov	r2, r0
 8015902:	6268      	str	r0, [r5, #36]	; 0x24
 8015904:	b920      	cbnz	r0, 8015910 <_Bfree+0x20>
 8015906:	4b09      	ldr	r3, [pc, #36]	; (801592c <_Bfree+0x3c>)
 8015908:	4809      	ldr	r0, [pc, #36]	; (8015930 <_Bfree+0x40>)
 801590a:	218a      	movs	r1, #138	; 0x8a
 801590c:	f7fe fd52 	bl	80143b4 <__assert_func>
 8015910:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015914:	6006      	str	r6, [r0, #0]
 8015916:	60c6      	str	r6, [r0, #12]
 8015918:	b13c      	cbz	r4, 801592a <_Bfree+0x3a>
 801591a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801591c:	6862      	ldr	r2, [r4, #4]
 801591e:	68db      	ldr	r3, [r3, #12]
 8015920:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015924:	6021      	str	r1, [r4, #0]
 8015926:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801592a:	bd70      	pop	{r4, r5, r6, pc}
 801592c:	0805d660 	.word	0x0805d660
 8015930:	0805d904 	.word	0x0805d904

08015934 <__multadd>:
 8015934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015938:	690d      	ldr	r5, [r1, #16]
 801593a:	4607      	mov	r7, r0
 801593c:	460c      	mov	r4, r1
 801593e:	461e      	mov	r6, r3
 8015940:	f101 0c14 	add.w	ip, r1, #20
 8015944:	2000      	movs	r0, #0
 8015946:	f8dc 3000 	ldr.w	r3, [ip]
 801594a:	b299      	uxth	r1, r3
 801594c:	fb02 6101 	mla	r1, r2, r1, r6
 8015950:	0c1e      	lsrs	r6, r3, #16
 8015952:	0c0b      	lsrs	r3, r1, #16
 8015954:	fb02 3306 	mla	r3, r2, r6, r3
 8015958:	b289      	uxth	r1, r1
 801595a:	3001      	adds	r0, #1
 801595c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8015960:	4285      	cmp	r5, r0
 8015962:	f84c 1b04 	str.w	r1, [ip], #4
 8015966:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801596a:	dcec      	bgt.n	8015946 <__multadd+0x12>
 801596c:	b30e      	cbz	r6, 80159b2 <__multadd+0x7e>
 801596e:	68a3      	ldr	r3, [r4, #8]
 8015970:	42ab      	cmp	r3, r5
 8015972:	dc19      	bgt.n	80159a8 <__multadd+0x74>
 8015974:	6861      	ldr	r1, [r4, #4]
 8015976:	4638      	mov	r0, r7
 8015978:	3101      	adds	r1, #1
 801597a:	f7ff ff79 	bl	8015870 <_Balloc>
 801597e:	4680      	mov	r8, r0
 8015980:	b928      	cbnz	r0, 801598e <__multadd+0x5a>
 8015982:	4602      	mov	r2, r0
 8015984:	4b0c      	ldr	r3, [pc, #48]	; (80159b8 <__multadd+0x84>)
 8015986:	480d      	ldr	r0, [pc, #52]	; (80159bc <__multadd+0x88>)
 8015988:	21b5      	movs	r1, #181	; 0xb5
 801598a:	f7fe fd13 	bl	80143b4 <__assert_func>
 801598e:	6922      	ldr	r2, [r4, #16]
 8015990:	3202      	adds	r2, #2
 8015992:	f104 010c 	add.w	r1, r4, #12
 8015996:	0092      	lsls	r2, r2, #2
 8015998:	300c      	adds	r0, #12
 801599a:	f7fc fdd1 	bl	8012540 <memcpy>
 801599e:	4621      	mov	r1, r4
 80159a0:	4638      	mov	r0, r7
 80159a2:	f7ff ffa5 	bl	80158f0 <_Bfree>
 80159a6:	4644      	mov	r4, r8
 80159a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80159ac:	3501      	adds	r5, #1
 80159ae:	615e      	str	r6, [r3, #20]
 80159b0:	6125      	str	r5, [r4, #16]
 80159b2:	4620      	mov	r0, r4
 80159b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80159b8:	0805d879 	.word	0x0805d879
 80159bc:	0805d904 	.word	0x0805d904

080159c0 <__s2b>:
 80159c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80159c4:	460c      	mov	r4, r1
 80159c6:	4615      	mov	r5, r2
 80159c8:	461f      	mov	r7, r3
 80159ca:	2209      	movs	r2, #9
 80159cc:	3308      	adds	r3, #8
 80159ce:	4606      	mov	r6, r0
 80159d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80159d4:	2100      	movs	r1, #0
 80159d6:	2201      	movs	r2, #1
 80159d8:	429a      	cmp	r2, r3
 80159da:	db09      	blt.n	80159f0 <__s2b+0x30>
 80159dc:	4630      	mov	r0, r6
 80159de:	f7ff ff47 	bl	8015870 <_Balloc>
 80159e2:	b940      	cbnz	r0, 80159f6 <__s2b+0x36>
 80159e4:	4602      	mov	r2, r0
 80159e6:	4b19      	ldr	r3, [pc, #100]	; (8015a4c <__s2b+0x8c>)
 80159e8:	4819      	ldr	r0, [pc, #100]	; (8015a50 <__s2b+0x90>)
 80159ea:	21ce      	movs	r1, #206	; 0xce
 80159ec:	f7fe fce2 	bl	80143b4 <__assert_func>
 80159f0:	0052      	lsls	r2, r2, #1
 80159f2:	3101      	adds	r1, #1
 80159f4:	e7f0      	b.n	80159d8 <__s2b+0x18>
 80159f6:	9b08      	ldr	r3, [sp, #32]
 80159f8:	6143      	str	r3, [r0, #20]
 80159fa:	2d09      	cmp	r5, #9
 80159fc:	f04f 0301 	mov.w	r3, #1
 8015a00:	6103      	str	r3, [r0, #16]
 8015a02:	dd16      	ble.n	8015a32 <__s2b+0x72>
 8015a04:	f104 0909 	add.w	r9, r4, #9
 8015a08:	46c8      	mov	r8, r9
 8015a0a:	442c      	add	r4, r5
 8015a0c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8015a10:	4601      	mov	r1, r0
 8015a12:	3b30      	subs	r3, #48	; 0x30
 8015a14:	220a      	movs	r2, #10
 8015a16:	4630      	mov	r0, r6
 8015a18:	f7ff ff8c 	bl	8015934 <__multadd>
 8015a1c:	45a0      	cmp	r8, r4
 8015a1e:	d1f5      	bne.n	8015a0c <__s2b+0x4c>
 8015a20:	f1a5 0408 	sub.w	r4, r5, #8
 8015a24:	444c      	add	r4, r9
 8015a26:	1b2d      	subs	r5, r5, r4
 8015a28:	1963      	adds	r3, r4, r5
 8015a2a:	42bb      	cmp	r3, r7
 8015a2c:	db04      	blt.n	8015a38 <__s2b+0x78>
 8015a2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015a32:	340a      	adds	r4, #10
 8015a34:	2509      	movs	r5, #9
 8015a36:	e7f6      	b.n	8015a26 <__s2b+0x66>
 8015a38:	f814 3b01 	ldrb.w	r3, [r4], #1
 8015a3c:	4601      	mov	r1, r0
 8015a3e:	3b30      	subs	r3, #48	; 0x30
 8015a40:	220a      	movs	r2, #10
 8015a42:	4630      	mov	r0, r6
 8015a44:	f7ff ff76 	bl	8015934 <__multadd>
 8015a48:	e7ee      	b.n	8015a28 <__s2b+0x68>
 8015a4a:	bf00      	nop
 8015a4c:	0805d879 	.word	0x0805d879
 8015a50:	0805d904 	.word	0x0805d904

08015a54 <__hi0bits>:
 8015a54:	0c03      	lsrs	r3, r0, #16
 8015a56:	041b      	lsls	r3, r3, #16
 8015a58:	b9d3      	cbnz	r3, 8015a90 <__hi0bits+0x3c>
 8015a5a:	0400      	lsls	r0, r0, #16
 8015a5c:	2310      	movs	r3, #16
 8015a5e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8015a62:	bf04      	itt	eq
 8015a64:	0200      	lsleq	r0, r0, #8
 8015a66:	3308      	addeq	r3, #8
 8015a68:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8015a6c:	bf04      	itt	eq
 8015a6e:	0100      	lsleq	r0, r0, #4
 8015a70:	3304      	addeq	r3, #4
 8015a72:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8015a76:	bf04      	itt	eq
 8015a78:	0080      	lsleq	r0, r0, #2
 8015a7a:	3302      	addeq	r3, #2
 8015a7c:	2800      	cmp	r0, #0
 8015a7e:	db05      	blt.n	8015a8c <__hi0bits+0x38>
 8015a80:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8015a84:	f103 0301 	add.w	r3, r3, #1
 8015a88:	bf08      	it	eq
 8015a8a:	2320      	moveq	r3, #32
 8015a8c:	4618      	mov	r0, r3
 8015a8e:	4770      	bx	lr
 8015a90:	2300      	movs	r3, #0
 8015a92:	e7e4      	b.n	8015a5e <__hi0bits+0xa>

08015a94 <__lo0bits>:
 8015a94:	6803      	ldr	r3, [r0, #0]
 8015a96:	f013 0207 	ands.w	r2, r3, #7
 8015a9a:	4601      	mov	r1, r0
 8015a9c:	d00b      	beq.n	8015ab6 <__lo0bits+0x22>
 8015a9e:	07da      	lsls	r2, r3, #31
 8015aa0:	d423      	bmi.n	8015aea <__lo0bits+0x56>
 8015aa2:	0798      	lsls	r0, r3, #30
 8015aa4:	bf49      	itett	mi
 8015aa6:	085b      	lsrmi	r3, r3, #1
 8015aa8:	089b      	lsrpl	r3, r3, #2
 8015aaa:	2001      	movmi	r0, #1
 8015aac:	600b      	strmi	r3, [r1, #0]
 8015aae:	bf5c      	itt	pl
 8015ab0:	600b      	strpl	r3, [r1, #0]
 8015ab2:	2002      	movpl	r0, #2
 8015ab4:	4770      	bx	lr
 8015ab6:	b298      	uxth	r0, r3
 8015ab8:	b9a8      	cbnz	r0, 8015ae6 <__lo0bits+0x52>
 8015aba:	0c1b      	lsrs	r3, r3, #16
 8015abc:	2010      	movs	r0, #16
 8015abe:	b2da      	uxtb	r2, r3
 8015ac0:	b90a      	cbnz	r2, 8015ac6 <__lo0bits+0x32>
 8015ac2:	3008      	adds	r0, #8
 8015ac4:	0a1b      	lsrs	r3, r3, #8
 8015ac6:	071a      	lsls	r2, r3, #28
 8015ac8:	bf04      	itt	eq
 8015aca:	091b      	lsreq	r3, r3, #4
 8015acc:	3004      	addeq	r0, #4
 8015ace:	079a      	lsls	r2, r3, #30
 8015ad0:	bf04      	itt	eq
 8015ad2:	089b      	lsreq	r3, r3, #2
 8015ad4:	3002      	addeq	r0, #2
 8015ad6:	07da      	lsls	r2, r3, #31
 8015ad8:	d403      	bmi.n	8015ae2 <__lo0bits+0x4e>
 8015ada:	085b      	lsrs	r3, r3, #1
 8015adc:	f100 0001 	add.w	r0, r0, #1
 8015ae0:	d005      	beq.n	8015aee <__lo0bits+0x5a>
 8015ae2:	600b      	str	r3, [r1, #0]
 8015ae4:	4770      	bx	lr
 8015ae6:	4610      	mov	r0, r2
 8015ae8:	e7e9      	b.n	8015abe <__lo0bits+0x2a>
 8015aea:	2000      	movs	r0, #0
 8015aec:	4770      	bx	lr
 8015aee:	2020      	movs	r0, #32
 8015af0:	4770      	bx	lr
	...

08015af4 <__i2b>:
 8015af4:	b510      	push	{r4, lr}
 8015af6:	460c      	mov	r4, r1
 8015af8:	2101      	movs	r1, #1
 8015afa:	f7ff feb9 	bl	8015870 <_Balloc>
 8015afe:	4602      	mov	r2, r0
 8015b00:	b928      	cbnz	r0, 8015b0e <__i2b+0x1a>
 8015b02:	4b05      	ldr	r3, [pc, #20]	; (8015b18 <__i2b+0x24>)
 8015b04:	4805      	ldr	r0, [pc, #20]	; (8015b1c <__i2b+0x28>)
 8015b06:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8015b0a:	f7fe fc53 	bl	80143b4 <__assert_func>
 8015b0e:	2301      	movs	r3, #1
 8015b10:	6144      	str	r4, [r0, #20]
 8015b12:	6103      	str	r3, [r0, #16]
 8015b14:	bd10      	pop	{r4, pc}
 8015b16:	bf00      	nop
 8015b18:	0805d879 	.word	0x0805d879
 8015b1c:	0805d904 	.word	0x0805d904

08015b20 <__multiply>:
 8015b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b24:	4691      	mov	r9, r2
 8015b26:	690a      	ldr	r2, [r1, #16]
 8015b28:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015b2c:	429a      	cmp	r2, r3
 8015b2e:	bfb8      	it	lt
 8015b30:	460b      	movlt	r3, r1
 8015b32:	460c      	mov	r4, r1
 8015b34:	bfbc      	itt	lt
 8015b36:	464c      	movlt	r4, r9
 8015b38:	4699      	movlt	r9, r3
 8015b3a:	6927      	ldr	r7, [r4, #16]
 8015b3c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8015b40:	68a3      	ldr	r3, [r4, #8]
 8015b42:	6861      	ldr	r1, [r4, #4]
 8015b44:	eb07 060a 	add.w	r6, r7, sl
 8015b48:	42b3      	cmp	r3, r6
 8015b4a:	b085      	sub	sp, #20
 8015b4c:	bfb8      	it	lt
 8015b4e:	3101      	addlt	r1, #1
 8015b50:	f7ff fe8e 	bl	8015870 <_Balloc>
 8015b54:	b930      	cbnz	r0, 8015b64 <__multiply+0x44>
 8015b56:	4602      	mov	r2, r0
 8015b58:	4b44      	ldr	r3, [pc, #272]	; (8015c6c <__multiply+0x14c>)
 8015b5a:	4845      	ldr	r0, [pc, #276]	; (8015c70 <__multiply+0x150>)
 8015b5c:	f240 115d 	movw	r1, #349	; 0x15d
 8015b60:	f7fe fc28 	bl	80143b4 <__assert_func>
 8015b64:	f100 0514 	add.w	r5, r0, #20
 8015b68:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8015b6c:	462b      	mov	r3, r5
 8015b6e:	2200      	movs	r2, #0
 8015b70:	4543      	cmp	r3, r8
 8015b72:	d321      	bcc.n	8015bb8 <__multiply+0x98>
 8015b74:	f104 0314 	add.w	r3, r4, #20
 8015b78:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8015b7c:	f109 0314 	add.w	r3, r9, #20
 8015b80:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8015b84:	9202      	str	r2, [sp, #8]
 8015b86:	1b3a      	subs	r2, r7, r4
 8015b88:	3a15      	subs	r2, #21
 8015b8a:	f022 0203 	bic.w	r2, r2, #3
 8015b8e:	3204      	adds	r2, #4
 8015b90:	f104 0115 	add.w	r1, r4, #21
 8015b94:	428f      	cmp	r7, r1
 8015b96:	bf38      	it	cc
 8015b98:	2204      	movcc	r2, #4
 8015b9a:	9201      	str	r2, [sp, #4]
 8015b9c:	9a02      	ldr	r2, [sp, #8]
 8015b9e:	9303      	str	r3, [sp, #12]
 8015ba0:	429a      	cmp	r2, r3
 8015ba2:	d80c      	bhi.n	8015bbe <__multiply+0x9e>
 8015ba4:	2e00      	cmp	r6, #0
 8015ba6:	dd03      	ble.n	8015bb0 <__multiply+0x90>
 8015ba8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8015bac:	2b00      	cmp	r3, #0
 8015bae:	d05a      	beq.n	8015c66 <__multiply+0x146>
 8015bb0:	6106      	str	r6, [r0, #16]
 8015bb2:	b005      	add	sp, #20
 8015bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015bb8:	f843 2b04 	str.w	r2, [r3], #4
 8015bbc:	e7d8      	b.n	8015b70 <__multiply+0x50>
 8015bbe:	f8b3 a000 	ldrh.w	sl, [r3]
 8015bc2:	f1ba 0f00 	cmp.w	sl, #0
 8015bc6:	d024      	beq.n	8015c12 <__multiply+0xf2>
 8015bc8:	f104 0e14 	add.w	lr, r4, #20
 8015bcc:	46a9      	mov	r9, r5
 8015bce:	f04f 0c00 	mov.w	ip, #0
 8015bd2:	f85e 2b04 	ldr.w	r2, [lr], #4
 8015bd6:	f8d9 1000 	ldr.w	r1, [r9]
 8015bda:	fa1f fb82 	uxth.w	fp, r2
 8015bde:	b289      	uxth	r1, r1
 8015be0:	fb0a 110b 	mla	r1, sl, fp, r1
 8015be4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8015be8:	f8d9 2000 	ldr.w	r2, [r9]
 8015bec:	4461      	add	r1, ip
 8015bee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8015bf2:	fb0a c20b 	mla	r2, sl, fp, ip
 8015bf6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8015bfa:	b289      	uxth	r1, r1
 8015bfc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8015c00:	4577      	cmp	r7, lr
 8015c02:	f849 1b04 	str.w	r1, [r9], #4
 8015c06:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8015c0a:	d8e2      	bhi.n	8015bd2 <__multiply+0xb2>
 8015c0c:	9a01      	ldr	r2, [sp, #4]
 8015c0e:	f845 c002 	str.w	ip, [r5, r2]
 8015c12:	9a03      	ldr	r2, [sp, #12]
 8015c14:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8015c18:	3304      	adds	r3, #4
 8015c1a:	f1b9 0f00 	cmp.w	r9, #0
 8015c1e:	d020      	beq.n	8015c62 <__multiply+0x142>
 8015c20:	6829      	ldr	r1, [r5, #0]
 8015c22:	f104 0c14 	add.w	ip, r4, #20
 8015c26:	46ae      	mov	lr, r5
 8015c28:	f04f 0a00 	mov.w	sl, #0
 8015c2c:	f8bc b000 	ldrh.w	fp, [ip]
 8015c30:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8015c34:	fb09 220b 	mla	r2, r9, fp, r2
 8015c38:	4492      	add	sl, r2
 8015c3a:	b289      	uxth	r1, r1
 8015c3c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8015c40:	f84e 1b04 	str.w	r1, [lr], #4
 8015c44:	f85c 2b04 	ldr.w	r2, [ip], #4
 8015c48:	f8be 1000 	ldrh.w	r1, [lr]
 8015c4c:	0c12      	lsrs	r2, r2, #16
 8015c4e:	fb09 1102 	mla	r1, r9, r2, r1
 8015c52:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8015c56:	4567      	cmp	r7, ip
 8015c58:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8015c5c:	d8e6      	bhi.n	8015c2c <__multiply+0x10c>
 8015c5e:	9a01      	ldr	r2, [sp, #4]
 8015c60:	50a9      	str	r1, [r5, r2]
 8015c62:	3504      	adds	r5, #4
 8015c64:	e79a      	b.n	8015b9c <__multiply+0x7c>
 8015c66:	3e01      	subs	r6, #1
 8015c68:	e79c      	b.n	8015ba4 <__multiply+0x84>
 8015c6a:	bf00      	nop
 8015c6c:	0805d879 	.word	0x0805d879
 8015c70:	0805d904 	.word	0x0805d904

08015c74 <__pow5mult>:
 8015c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015c78:	4615      	mov	r5, r2
 8015c7a:	f012 0203 	ands.w	r2, r2, #3
 8015c7e:	4606      	mov	r6, r0
 8015c80:	460f      	mov	r7, r1
 8015c82:	d007      	beq.n	8015c94 <__pow5mult+0x20>
 8015c84:	4c25      	ldr	r4, [pc, #148]	; (8015d1c <__pow5mult+0xa8>)
 8015c86:	3a01      	subs	r2, #1
 8015c88:	2300      	movs	r3, #0
 8015c8a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015c8e:	f7ff fe51 	bl	8015934 <__multadd>
 8015c92:	4607      	mov	r7, r0
 8015c94:	10ad      	asrs	r5, r5, #2
 8015c96:	d03d      	beq.n	8015d14 <__pow5mult+0xa0>
 8015c98:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8015c9a:	b97c      	cbnz	r4, 8015cbc <__pow5mult+0x48>
 8015c9c:	2010      	movs	r0, #16
 8015c9e:	f7fc fc47 	bl	8012530 <malloc>
 8015ca2:	4602      	mov	r2, r0
 8015ca4:	6270      	str	r0, [r6, #36]	; 0x24
 8015ca6:	b928      	cbnz	r0, 8015cb4 <__pow5mult+0x40>
 8015ca8:	4b1d      	ldr	r3, [pc, #116]	; (8015d20 <__pow5mult+0xac>)
 8015caa:	481e      	ldr	r0, [pc, #120]	; (8015d24 <__pow5mult+0xb0>)
 8015cac:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8015cb0:	f7fe fb80 	bl	80143b4 <__assert_func>
 8015cb4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015cb8:	6004      	str	r4, [r0, #0]
 8015cba:	60c4      	str	r4, [r0, #12]
 8015cbc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8015cc0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015cc4:	b94c      	cbnz	r4, 8015cda <__pow5mult+0x66>
 8015cc6:	f240 2171 	movw	r1, #625	; 0x271
 8015cca:	4630      	mov	r0, r6
 8015ccc:	f7ff ff12 	bl	8015af4 <__i2b>
 8015cd0:	2300      	movs	r3, #0
 8015cd2:	f8c8 0008 	str.w	r0, [r8, #8]
 8015cd6:	4604      	mov	r4, r0
 8015cd8:	6003      	str	r3, [r0, #0]
 8015cda:	f04f 0900 	mov.w	r9, #0
 8015cde:	07eb      	lsls	r3, r5, #31
 8015ce0:	d50a      	bpl.n	8015cf8 <__pow5mult+0x84>
 8015ce2:	4639      	mov	r1, r7
 8015ce4:	4622      	mov	r2, r4
 8015ce6:	4630      	mov	r0, r6
 8015ce8:	f7ff ff1a 	bl	8015b20 <__multiply>
 8015cec:	4639      	mov	r1, r7
 8015cee:	4680      	mov	r8, r0
 8015cf0:	4630      	mov	r0, r6
 8015cf2:	f7ff fdfd 	bl	80158f0 <_Bfree>
 8015cf6:	4647      	mov	r7, r8
 8015cf8:	106d      	asrs	r5, r5, #1
 8015cfa:	d00b      	beq.n	8015d14 <__pow5mult+0xa0>
 8015cfc:	6820      	ldr	r0, [r4, #0]
 8015cfe:	b938      	cbnz	r0, 8015d10 <__pow5mult+0x9c>
 8015d00:	4622      	mov	r2, r4
 8015d02:	4621      	mov	r1, r4
 8015d04:	4630      	mov	r0, r6
 8015d06:	f7ff ff0b 	bl	8015b20 <__multiply>
 8015d0a:	6020      	str	r0, [r4, #0]
 8015d0c:	f8c0 9000 	str.w	r9, [r0]
 8015d10:	4604      	mov	r4, r0
 8015d12:	e7e4      	b.n	8015cde <__pow5mult+0x6a>
 8015d14:	4638      	mov	r0, r7
 8015d16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015d1a:	bf00      	nop
 8015d1c:	0805da50 	.word	0x0805da50
 8015d20:	0805d660 	.word	0x0805d660
 8015d24:	0805d904 	.word	0x0805d904

08015d28 <__lshift>:
 8015d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015d2c:	460c      	mov	r4, r1
 8015d2e:	6849      	ldr	r1, [r1, #4]
 8015d30:	6923      	ldr	r3, [r4, #16]
 8015d32:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8015d36:	68a3      	ldr	r3, [r4, #8]
 8015d38:	4607      	mov	r7, r0
 8015d3a:	4691      	mov	r9, r2
 8015d3c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015d40:	f108 0601 	add.w	r6, r8, #1
 8015d44:	42b3      	cmp	r3, r6
 8015d46:	db0b      	blt.n	8015d60 <__lshift+0x38>
 8015d48:	4638      	mov	r0, r7
 8015d4a:	f7ff fd91 	bl	8015870 <_Balloc>
 8015d4e:	4605      	mov	r5, r0
 8015d50:	b948      	cbnz	r0, 8015d66 <__lshift+0x3e>
 8015d52:	4602      	mov	r2, r0
 8015d54:	4b2a      	ldr	r3, [pc, #168]	; (8015e00 <__lshift+0xd8>)
 8015d56:	482b      	ldr	r0, [pc, #172]	; (8015e04 <__lshift+0xdc>)
 8015d58:	f240 11d9 	movw	r1, #473	; 0x1d9
 8015d5c:	f7fe fb2a 	bl	80143b4 <__assert_func>
 8015d60:	3101      	adds	r1, #1
 8015d62:	005b      	lsls	r3, r3, #1
 8015d64:	e7ee      	b.n	8015d44 <__lshift+0x1c>
 8015d66:	2300      	movs	r3, #0
 8015d68:	f100 0114 	add.w	r1, r0, #20
 8015d6c:	f100 0210 	add.w	r2, r0, #16
 8015d70:	4618      	mov	r0, r3
 8015d72:	4553      	cmp	r3, sl
 8015d74:	db37      	blt.n	8015de6 <__lshift+0xbe>
 8015d76:	6920      	ldr	r0, [r4, #16]
 8015d78:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015d7c:	f104 0314 	add.w	r3, r4, #20
 8015d80:	f019 091f 	ands.w	r9, r9, #31
 8015d84:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015d88:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8015d8c:	d02f      	beq.n	8015dee <__lshift+0xc6>
 8015d8e:	f1c9 0e20 	rsb	lr, r9, #32
 8015d92:	468a      	mov	sl, r1
 8015d94:	f04f 0c00 	mov.w	ip, #0
 8015d98:	681a      	ldr	r2, [r3, #0]
 8015d9a:	fa02 f209 	lsl.w	r2, r2, r9
 8015d9e:	ea42 020c 	orr.w	r2, r2, ip
 8015da2:	f84a 2b04 	str.w	r2, [sl], #4
 8015da6:	f853 2b04 	ldr.w	r2, [r3], #4
 8015daa:	4298      	cmp	r0, r3
 8015dac:	fa22 fc0e 	lsr.w	ip, r2, lr
 8015db0:	d8f2      	bhi.n	8015d98 <__lshift+0x70>
 8015db2:	1b03      	subs	r3, r0, r4
 8015db4:	3b15      	subs	r3, #21
 8015db6:	f023 0303 	bic.w	r3, r3, #3
 8015dba:	3304      	adds	r3, #4
 8015dbc:	f104 0215 	add.w	r2, r4, #21
 8015dc0:	4290      	cmp	r0, r2
 8015dc2:	bf38      	it	cc
 8015dc4:	2304      	movcc	r3, #4
 8015dc6:	f841 c003 	str.w	ip, [r1, r3]
 8015dca:	f1bc 0f00 	cmp.w	ip, #0
 8015dce:	d001      	beq.n	8015dd4 <__lshift+0xac>
 8015dd0:	f108 0602 	add.w	r6, r8, #2
 8015dd4:	3e01      	subs	r6, #1
 8015dd6:	4638      	mov	r0, r7
 8015dd8:	612e      	str	r6, [r5, #16]
 8015dda:	4621      	mov	r1, r4
 8015ddc:	f7ff fd88 	bl	80158f0 <_Bfree>
 8015de0:	4628      	mov	r0, r5
 8015de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015de6:	f842 0f04 	str.w	r0, [r2, #4]!
 8015dea:	3301      	adds	r3, #1
 8015dec:	e7c1      	b.n	8015d72 <__lshift+0x4a>
 8015dee:	3904      	subs	r1, #4
 8015df0:	f853 2b04 	ldr.w	r2, [r3], #4
 8015df4:	f841 2f04 	str.w	r2, [r1, #4]!
 8015df8:	4298      	cmp	r0, r3
 8015dfa:	d8f9      	bhi.n	8015df0 <__lshift+0xc8>
 8015dfc:	e7ea      	b.n	8015dd4 <__lshift+0xac>
 8015dfe:	bf00      	nop
 8015e00:	0805d879 	.word	0x0805d879
 8015e04:	0805d904 	.word	0x0805d904

08015e08 <__mcmp>:
 8015e08:	b530      	push	{r4, r5, lr}
 8015e0a:	6902      	ldr	r2, [r0, #16]
 8015e0c:	690c      	ldr	r4, [r1, #16]
 8015e0e:	1b12      	subs	r2, r2, r4
 8015e10:	d10e      	bne.n	8015e30 <__mcmp+0x28>
 8015e12:	f100 0314 	add.w	r3, r0, #20
 8015e16:	3114      	adds	r1, #20
 8015e18:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8015e1c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8015e20:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8015e24:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8015e28:	42a5      	cmp	r5, r4
 8015e2a:	d003      	beq.n	8015e34 <__mcmp+0x2c>
 8015e2c:	d305      	bcc.n	8015e3a <__mcmp+0x32>
 8015e2e:	2201      	movs	r2, #1
 8015e30:	4610      	mov	r0, r2
 8015e32:	bd30      	pop	{r4, r5, pc}
 8015e34:	4283      	cmp	r3, r0
 8015e36:	d3f3      	bcc.n	8015e20 <__mcmp+0x18>
 8015e38:	e7fa      	b.n	8015e30 <__mcmp+0x28>
 8015e3a:	f04f 32ff 	mov.w	r2, #4294967295
 8015e3e:	e7f7      	b.n	8015e30 <__mcmp+0x28>

08015e40 <__mdiff>:
 8015e40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e44:	460c      	mov	r4, r1
 8015e46:	4606      	mov	r6, r0
 8015e48:	4611      	mov	r1, r2
 8015e4a:	4620      	mov	r0, r4
 8015e4c:	4690      	mov	r8, r2
 8015e4e:	f7ff ffdb 	bl	8015e08 <__mcmp>
 8015e52:	1e05      	subs	r5, r0, #0
 8015e54:	d110      	bne.n	8015e78 <__mdiff+0x38>
 8015e56:	4629      	mov	r1, r5
 8015e58:	4630      	mov	r0, r6
 8015e5a:	f7ff fd09 	bl	8015870 <_Balloc>
 8015e5e:	b930      	cbnz	r0, 8015e6e <__mdiff+0x2e>
 8015e60:	4b3a      	ldr	r3, [pc, #232]	; (8015f4c <__mdiff+0x10c>)
 8015e62:	4602      	mov	r2, r0
 8015e64:	f240 2132 	movw	r1, #562	; 0x232
 8015e68:	4839      	ldr	r0, [pc, #228]	; (8015f50 <__mdiff+0x110>)
 8015e6a:	f7fe faa3 	bl	80143b4 <__assert_func>
 8015e6e:	2301      	movs	r3, #1
 8015e70:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8015e74:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e78:	bfa4      	itt	ge
 8015e7a:	4643      	movge	r3, r8
 8015e7c:	46a0      	movge	r8, r4
 8015e7e:	4630      	mov	r0, r6
 8015e80:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8015e84:	bfa6      	itte	ge
 8015e86:	461c      	movge	r4, r3
 8015e88:	2500      	movge	r5, #0
 8015e8a:	2501      	movlt	r5, #1
 8015e8c:	f7ff fcf0 	bl	8015870 <_Balloc>
 8015e90:	b920      	cbnz	r0, 8015e9c <__mdiff+0x5c>
 8015e92:	4b2e      	ldr	r3, [pc, #184]	; (8015f4c <__mdiff+0x10c>)
 8015e94:	4602      	mov	r2, r0
 8015e96:	f44f 7110 	mov.w	r1, #576	; 0x240
 8015e9a:	e7e5      	b.n	8015e68 <__mdiff+0x28>
 8015e9c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8015ea0:	6926      	ldr	r6, [r4, #16]
 8015ea2:	60c5      	str	r5, [r0, #12]
 8015ea4:	f104 0914 	add.w	r9, r4, #20
 8015ea8:	f108 0514 	add.w	r5, r8, #20
 8015eac:	f100 0e14 	add.w	lr, r0, #20
 8015eb0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8015eb4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8015eb8:	f108 0210 	add.w	r2, r8, #16
 8015ebc:	46f2      	mov	sl, lr
 8015ebe:	2100      	movs	r1, #0
 8015ec0:	f859 3b04 	ldr.w	r3, [r9], #4
 8015ec4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8015ec8:	fa1f f883 	uxth.w	r8, r3
 8015ecc:	fa11 f18b 	uxtah	r1, r1, fp
 8015ed0:	0c1b      	lsrs	r3, r3, #16
 8015ed2:	eba1 0808 	sub.w	r8, r1, r8
 8015ed6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8015eda:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8015ede:	fa1f f888 	uxth.w	r8, r8
 8015ee2:	1419      	asrs	r1, r3, #16
 8015ee4:	454e      	cmp	r6, r9
 8015ee6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8015eea:	f84a 3b04 	str.w	r3, [sl], #4
 8015eee:	d8e7      	bhi.n	8015ec0 <__mdiff+0x80>
 8015ef0:	1b33      	subs	r3, r6, r4
 8015ef2:	3b15      	subs	r3, #21
 8015ef4:	f023 0303 	bic.w	r3, r3, #3
 8015ef8:	3304      	adds	r3, #4
 8015efa:	3415      	adds	r4, #21
 8015efc:	42a6      	cmp	r6, r4
 8015efe:	bf38      	it	cc
 8015f00:	2304      	movcc	r3, #4
 8015f02:	441d      	add	r5, r3
 8015f04:	4473      	add	r3, lr
 8015f06:	469e      	mov	lr, r3
 8015f08:	462e      	mov	r6, r5
 8015f0a:	4566      	cmp	r6, ip
 8015f0c:	d30e      	bcc.n	8015f2c <__mdiff+0xec>
 8015f0e:	f10c 0203 	add.w	r2, ip, #3
 8015f12:	1b52      	subs	r2, r2, r5
 8015f14:	f022 0203 	bic.w	r2, r2, #3
 8015f18:	3d03      	subs	r5, #3
 8015f1a:	45ac      	cmp	ip, r5
 8015f1c:	bf38      	it	cc
 8015f1e:	2200      	movcc	r2, #0
 8015f20:	441a      	add	r2, r3
 8015f22:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8015f26:	b17b      	cbz	r3, 8015f48 <__mdiff+0x108>
 8015f28:	6107      	str	r7, [r0, #16]
 8015f2a:	e7a3      	b.n	8015e74 <__mdiff+0x34>
 8015f2c:	f856 8b04 	ldr.w	r8, [r6], #4
 8015f30:	fa11 f288 	uxtah	r2, r1, r8
 8015f34:	1414      	asrs	r4, r2, #16
 8015f36:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8015f3a:	b292      	uxth	r2, r2
 8015f3c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8015f40:	f84e 2b04 	str.w	r2, [lr], #4
 8015f44:	1421      	asrs	r1, r4, #16
 8015f46:	e7e0      	b.n	8015f0a <__mdiff+0xca>
 8015f48:	3f01      	subs	r7, #1
 8015f4a:	e7ea      	b.n	8015f22 <__mdiff+0xe2>
 8015f4c:	0805d879 	.word	0x0805d879
 8015f50:	0805d904 	.word	0x0805d904

08015f54 <__ulp>:
 8015f54:	b082      	sub	sp, #8
 8015f56:	ed8d 0b00 	vstr	d0, [sp]
 8015f5a:	9b01      	ldr	r3, [sp, #4]
 8015f5c:	4912      	ldr	r1, [pc, #72]	; (8015fa8 <__ulp+0x54>)
 8015f5e:	4019      	ands	r1, r3
 8015f60:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8015f64:	2900      	cmp	r1, #0
 8015f66:	dd05      	ble.n	8015f74 <__ulp+0x20>
 8015f68:	2200      	movs	r2, #0
 8015f6a:	460b      	mov	r3, r1
 8015f6c:	ec43 2b10 	vmov	d0, r2, r3
 8015f70:	b002      	add	sp, #8
 8015f72:	4770      	bx	lr
 8015f74:	4249      	negs	r1, r1
 8015f76:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8015f7a:	ea4f 5021 	mov.w	r0, r1, asr #20
 8015f7e:	f04f 0200 	mov.w	r2, #0
 8015f82:	f04f 0300 	mov.w	r3, #0
 8015f86:	da04      	bge.n	8015f92 <__ulp+0x3e>
 8015f88:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8015f8c:	fa41 f300 	asr.w	r3, r1, r0
 8015f90:	e7ec      	b.n	8015f6c <__ulp+0x18>
 8015f92:	f1a0 0114 	sub.w	r1, r0, #20
 8015f96:	291e      	cmp	r1, #30
 8015f98:	bfda      	itte	le
 8015f9a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8015f9e:	fa20 f101 	lsrle.w	r1, r0, r1
 8015fa2:	2101      	movgt	r1, #1
 8015fa4:	460a      	mov	r2, r1
 8015fa6:	e7e1      	b.n	8015f6c <__ulp+0x18>
 8015fa8:	7ff00000 	.word	0x7ff00000

08015fac <__b2d>:
 8015fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015fae:	6905      	ldr	r5, [r0, #16]
 8015fb0:	f100 0714 	add.w	r7, r0, #20
 8015fb4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8015fb8:	1f2e      	subs	r6, r5, #4
 8015fba:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8015fbe:	4620      	mov	r0, r4
 8015fc0:	f7ff fd48 	bl	8015a54 <__hi0bits>
 8015fc4:	f1c0 0320 	rsb	r3, r0, #32
 8015fc8:	280a      	cmp	r0, #10
 8015fca:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8016048 <__b2d+0x9c>
 8015fce:	600b      	str	r3, [r1, #0]
 8015fd0:	dc14      	bgt.n	8015ffc <__b2d+0x50>
 8015fd2:	f1c0 0e0b 	rsb	lr, r0, #11
 8015fd6:	fa24 f10e 	lsr.w	r1, r4, lr
 8015fda:	42b7      	cmp	r7, r6
 8015fdc:	ea41 030c 	orr.w	r3, r1, ip
 8015fe0:	bf34      	ite	cc
 8015fe2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8015fe6:	2100      	movcs	r1, #0
 8015fe8:	3015      	adds	r0, #21
 8015fea:	fa04 f000 	lsl.w	r0, r4, r0
 8015fee:	fa21 f10e 	lsr.w	r1, r1, lr
 8015ff2:	ea40 0201 	orr.w	r2, r0, r1
 8015ff6:	ec43 2b10 	vmov	d0, r2, r3
 8015ffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015ffc:	42b7      	cmp	r7, r6
 8015ffe:	bf3a      	itte	cc
 8016000:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8016004:	f1a5 0608 	subcc.w	r6, r5, #8
 8016008:	2100      	movcs	r1, #0
 801600a:	380b      	subs	r0, #11
 801600c:	d017      	beq.n	801603e <__b2d+0x92>
 801600e:	f1c0 0c20 	rsb	ip, r0, #32
 8016012:	fa04 f500 	lsl.w	r5, r4, r0
 8016016:	42be      	cmp	r6, r7
 8016018:	fa21 f40c 	lsr.w	r4, r1, ip
 801601c:	ea45 0504 	orr.w	r5, r5, r4
 8016020:	bf8c      	ite	hi
 8016022:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8016026:	2400      	movls	r4, #0
 8016028:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801602c:	fa01 f000 	lsl.w	r0, r1, r0
 8016030:	fa24 f40c 	lsr.w	r4, r4, ip
 8016034:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8016038:	ea40 0204 	orr.w	r2, r0, r4
 801603c:	e7db      	b.n	8015ff6 <__b2d+0x4a>
 801603e:	ea44 030c 	orr.w	r3, r4, ip
 8016042:	460a      	mov	r2, r1
 8016044:	e7d7      	b.n	8015ff6 <__b2d+0x4a>
 8016046:	bf00      	nop
 8016048:	3ff00000 	.word	0x3ff00000

0801604c <__d2b>:
 801604c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016050:	4689      	mov	r9, r1
 8016052:	2101      	movs	r1, #1
 8016054:	ec57 6b10 	vmov	r6, r7, d0
 8016058:	4690      	mov	r8, r2
 801605a:	f7ff fc09 	bl	8015870 <_Balloc>
 801605e:	4604      	mov	r4, r0
 8016060:	b930      	cbnz	r0, 8016070 <__d2b+0x24>
 8016062:	4602      	mov	r2, r0
 8016064:	4b25      	ldr	r3, [pc, #148]	; (80160fc <__d2b+0xb0>)
 8016066:	4826      	ldr	r0, [pc, #152]	; (8016100 <__d2b+0xb4>)
 8016068:	f240 310a 	movw	r1, #778	; 0x30a
 801606c:	f7fe f9a2 	bl	80143b4 <__assert_func>
 8016070:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8016074:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8016078:	bb35      	cbnz	r5, 80160c8 <__d2b+0x7c>
 801607a:	2e00      	cmp	r6, #0
 801607c:	9301      	str	r3, [sp, #4]
 801607e:	d028      	beq.n	80160d2 <__d2b+0x86>
 8016080:	4668      	mov	r0, sp
 8016082:	9600      	str	r6, [sp, #0]
 8016084:	f7ff fd06 	bl	8015a94 <__lo0bits>
 8016088:	9900      	ldr	r1, [sp, #0]
 801608a:	b300      	cbz	r0, 80160ce <__d2b+0x82>
 801608c:	9a01      	ldr	r2, [sp, #4]
 801608e:	f1c0 0320 	rsb	r3, r0, #32
 8016092:	fa02 f303 	lsl.w	r3, r2, r3
 8016096:	430b      	orrs	r3, r1
 8016098:	40c2      	lsrs	r2, r0
 801609a:	6163      	str	r3, [r4, #20]
 801609c:	9201      	str	r2, [sp, #4]
 801609e:	9b01      	ldr	r3, [sp, #4]
 80160a0:	61a3      	str	r3, [r4, #24]
 80160a2:	2b00      	cmp	r3, #0
 80160a4:	bf14      	ite	ne
 80160a6:	2202      	movne	r2, #2
 80160a8:	2201      	moveq	r2, #1
 80160aa:	6122      	str	r2, [r4, #16]
 80160ac:	b1d5      	cbz	r5, 80160e4 <__d2b+0x98>
 80160ae:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80160b2:	4405      	add	r5, r0
 80160b4:	f8c9 5000 	str.w	r5, [r9]
 80160b8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80160bc:	f8c8 0000 	str.w	r0, [r8]
 80160c0:	4620      	mov	r0, r4
 80160c2:	b003      	add	sp, #12
 80160c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80160c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80160cc:	e7d5      	b.n	801607a <__d2b+0x2e>
 80160ce:	6161      	str	r1, [r4, #20]
 80160d0:	e7e5      	b.n	801609e <__d2b+0x52>
 80160d2:	a801      	add	r0, sp, #4
 80160d4:	f7ff fcde 	bl	8015a94 <__lo0bits>
 80160d8:	9b01      	ldr	r3, [sp, #4]
 80160da:	6163      	str	r3, [r4, #20]
 80160dc:	2201      	movs	r2, #1
 80160de:	6122      	str	r2, [r4, #16]
 80160e0:	3020      	adds	r0, #32
 80160e2:	e7e3      	b.n	80160ac <__d2b+0x60>
 80160e4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80160e8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80160ec:	f8c9 0000 	str.w	r0, [r9]
 80160f0:	6918      	ldr	r0, [r3, #16]
 80160f2:	f7ff fcaf 	bl	8015a54 <__hi0bits>
 80160f6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80160fa:	e7df      	b.n	80160bc <__d2b+0x70>
 80160fc:	0805d879 	.word	0x0805d879
 8016100:	0805d904 	.word	0x0805d904

08016104 <__ratio>:
 8016104:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016108:	4688      	mov	r8, r1
 801610a:	4669      	mov	r1, sp
 801610c:	4681      	mov	r9, r0
 801610e:	f7ff ff4d 	bl	8015fac <__b2d>
 8016112:	a901      	add	r1, sp, #4
 8016114:	4640      	mov	r0, r8
 8016116:	ec55 4b10 	vmov	r4, r5, d0
 801611a:	f7ff ff47 	bl	8015fac <__b2d>
 801611e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016122:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8016126:	eba3 0c02 	sub.w	ip, r3, r2
 801612a:	e9dd 3200 	ldrd	r3, r2, [sp]
 801612e:	1a9b      	subs	r3, r3, r2
 8016130:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8016134:	ec51 0b10 	vmov	r0, r1, d0
 8016138:	2b00      	cmp	r3, #0
 801613a:	bfd6      	itet	le
 801613c:	460a      	movle	r2, r1
 801613e:	462a      	movgt	r2, r5
 8016140:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8016144:	468b      	mov	fp, r1
 8016146:	462f      	mov	r7, r5
 8016148:	bfd4      	ite	le
 801614a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801614e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8016152:	4620      	mov	r0, r4
 8016154:	ee10 2a10 	vmov	r2, s0
 8016158:	465b      	mov	r3, fp
 801615a:	4639      	mov	r1, r7
 801615c:	f7ea fba6 	bl	80008ac <__aeabi_ddiv>
 8016160:	ec41 0b10 	vmov	d0, r0, r1
 8016164:	b003      	add	sp, #12
 8016166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801616a <__copybits>:
 801616a:	3901      	subs	r1, #1
 801616c:	b570      	push	{r4, r5, r6, lr}
 801616e:	1149      	asrs	r1, r1, #5
 8016170:	6914      	ldr	r4, [r2, #16]
 8016172:	3101      	adds	r1, #1
 8016174:	f102 0314 	add.w	r3, r2, #20
 8016178:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801617c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8016180:	1f05      	subs	r5, r0, #4
 8016182:	42a3      	cmp	r3, r4
 8016184:	d30c      	bcc.n	80161a0 <__copybits+0x36>
 8016186:	1aa3      	subs	r3, r4, r2
 8016188:	3b11      	subs	r3, #17
 801618a:	f023 0303 	bic.w	r3, r3, #3
 801618e:	3211      	adds	r2, #17
 8016190:	42a2      	cmp	r2, r4
 8016192:	bf88      	it	hi
 8016194:	2300      	movhi	r3, #0
 8016196:	4418      	add	r0, r3
 8016198:	2300      	movs	r3, #0
 801619a:	4288      	cmp	r0, r1
 801619c:	d305      	bcc.n	80161aa <__copybits+0x40>
 801619e:	bd70      	pop	{r4, r5, r6, pc}
 80161a0:	f853 6b04 	ldr.w	r6, [r3], #4
 80161a4:	f845 6f04 	str.w	r6, [r5, #4]!
 80161a8:	e7eb      	b.n	8016182 <__copybits+0x18>
 80161aa:	f840 3b04 	str.w	r3, [r0], #4
 80161ae:	e7f4      	b.n	801619a <__copybits+0x30>

080161b0 <__any_on>:
 80161b0:	f100 0214 	add.w	r2, r0, #20
 80161b4:	6900      	ldr	r0, [r0, #16]
 80161b6:	114b      	asrs	r3, r1, #5
 80161b8:	4298      	cmp	r0, r3
 80161ba:	b510      	push	{r4, lr}
 80161bc:	db11      	blt.n	80161e2 <__any_on+0x32>
 80161be:	dd0a      	ble.n	80161d6 <__any_on+0x26>
 80161c0:	f011 011f 	ands.w	r1, r1, #31
 80161c4:	d007      	beq.n	80161d6 <__any_on+0x26>
 80161c6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80161ca:	fa24 f001 	lsr.w	r0, r4, r1
 80161ce:	fa00 f101 	lsl.w	r1, r0, r1
 80161d2:	428c      	cmp	r4, r1
 80161d4:	d10b      	bne.n	80161ee <__any_on+0x3e>
 80161d6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80161da:	4293      	cmp	r3, r2
 80161dc:	d803      	bhi.n	80161e6 <__any_on+0x36>
 80161de:	2000      	movs	r0, #0
 80161e0:	bd10      	pop	{r4, pc}
 80161e2:	4603      	mov	r3, r0
 80161e4:	e7f7      	b.n	80161d6 <__any_on+0x26>
 80161e6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80161ea:	2900      	cmp	r1, #0
 80161ec:	d0f5      	beq.n	80161da <__any_on+0x2a>
 80161ee:	2001      	movs	r0, #1
 80161f0:	e7f6      	b.n	80161e0 <__any_on+0x30>

080161f2 <_calloc_r>:
 80161f2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80161f4:	fba1 2402 	umull	r2, r4, r1, r2
 80161f8:	b94c      	cbnz	r4, 801620e <_calloc_r+0x1c>
 80161fa:	4611      	mov	r1, r2
 80161fc:	9201      	str	r2, [sp, #4]
 80161fe:	f7fc fa21 	bl	8012644 <_malloc_r>
 8016202:	9a01      	ldr	r2, [sp, #4]
 8016204:	4605      	mov	r5, r0
 8016206:	b930      	cbnz	r0, 8016216 <_calloc_r+0x24>
 8016208:	4628      	mov	r0, r5
 801620a:	b003      	add	sp, #12
 801620c:	bd30      	pop	{r4, r5, pc}
 801620e:	220c      	movs	r2, #12
 8016210:	6002      	str	r2, [r0, #0]
 8016212:	2500      	movs	r5, #0
 8016214:	e7f8      	b.n	8016208 <_calloc_r+0x16>
 8016216:	4621      	mov	r1, r4
 8016218:	f7fc f9a0 	bl	801255c <memset>
 801621c:	e7f4      	b.n	8016208 <_calloc_r+0x16>

0801621e <_realloc_r>:
 801621e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016222:	4680      	mov	r8, r0
 8016224:	4614      	mov	r4, r2
 8016226:	460e      	mov	r6, r1
 8016228:	b921      	cbnz	r1, 8016234 <_realloc_r+0x16>
 801622a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801622e:	4611      	mov	r1, r2
 8016230:	f7fc ba08 	b.w	8012644 <_malloc_r>
 8016234:	b92a      	cbnz	r2, 8016242 <_realloc_r+0x24>
 8016236:	f7fc f999 	bl	801256c <_free_r>
 801623a:	4625      	mov	r5, r4
 801623c:	4628      	mov	r0, r5
 801623e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016242:	f001 fa1b 	bl	801767c <_malloc_usable_size_r>
 8016246:	4284      	cmp	r4, r0
 8016248:	4607      	mov	r7, r0
 801624a:	d802      	bhi.n	8016252 <_realloc_r+0x34>
 801624c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8016250:	d812      	bhi.n	8016278 <_realloc_r+0x5a>
 8016252:	4621      	mov	r1, r4
 8016254:	4640      	mov	r0, r8
 8016256:	f7fc f9f5 	bl	8012644 <_malloc_r>
 801625a:	4605      	mov	r5, r0
 801625c:	2800      	cmp	r0, #0
 801625e:	d0ed      	beq.n	801623c <_realloc_r+0x1e>
 8016260:	42bc      	cmp	r4, r7
 8016262:	4622      	mov	r2, r4
 8016264:	4631      	mov	r1, r6
 8016266:	bf28      	it	cs
 8016268:	463a      	movcs	r2, r7
 801626a:	f7fc f969 	bl	8012540 <memcpy>
 801626e:	4631      	mov	r1, r6
 8016270:	4640      	mov	r0, r8
 8016272:	f7fc f97b 	bl	801256c <_free_r>
 8016276:	e7e1      	b.n	801623c <_realloc_r+0x1e>
 8016278:	4635      	mov	r5, r6
 801627a:	e7df      	b.n	801623c <_realloc_r+0x1e>

0801627c <__ssputs_r>:
 801627c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016280:	688e      	ldr	r6, [r1, #8]
 8016282:	429e      	cmp	r6, r3
 8016284:	4682      	mov	sl, r0
 8016286:	460c      	mov	r4, r1
 8016288:	4690      	mov	r8, r2
 801628a:	461f      	mov	r7, r3
 801628c:	d838      	bhi.n	8016300 <__ssputs_r+0x84>
 801628e:	898a      	ldrh	r2, [r1, #12]
 8016290:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016294:	d032      	beq.n	80162fc <__ssputs_r+0x80>
 8016296:	6825      	ldr	r5, [r4, #0]
 8016298:	6909      	ldr	r1, [r1, #16]
 801629a:	eba5 0901 	sub.w	r9, r5, r1
 801629e:	6965      	ldr	r5, [r4, #20]
 80162a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80162a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80162a8:	3301      	adds	r3, #1
 80162aa:	444b      	add	r3, r9
 80162ac:	106d      	asrs	r5, r5, #1
 80162ae:	429d      	cmp	r5, r3
 80162b0:	bf38      	it	cc
 80162b2:	461d      	movcc	r5, r3
 80162b4:	0553      	lsls	r3, r2, #21
 80162b6:	d531      	bpl.n	801631c <__ssputs_r+0xa0>
 80162b8:	4629      	mov	r1, r5
 80162ba:	f7fc f9c3 	bl	8012644 <_malloc_r>
 80162be:	4606      	mov	r6, r0
 80162c0:	b950      	cbnz	r0, 80162d8 <__ssputs_r+0x5c>
 80162c2:	230c      	movs	r3, #12
 80162c4:	f8ca 3000 	str.w	r3, [sl]
 80162c8:	89a3      	ldrh	r3, [r4, #12]
 80162ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80162ce:	81a3      	strh	r3, [r4, #12]
 80162d0:	f04f 30ff 	mov.w	r0, #4294967295
 80162d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80162d8:	6921      	ldr	r1, [r4, #16]
 80162da:	464a      	mov	r2, r9
 80162dc:	f7fc f930 	bl	8012540 <memcpy>
 80162e0:	89a3      	ldrh	r3, [r4, #12]
 80162e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80162e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80162ea:	81a3      	strh	r3, [r4, #12]
 80162ec:	6126      	str	r6, [r4, #16]
 80162ee:	6165      	str	r5, [r4, #20]
 80162f0:	444e      	add	r6, r9
 80162f2:	eba5 0509 	sub.w	r5, r5, r9
 80162f6:	6026      	str	r6, [r4, #0]
 80162f8:	60a5      	str	r5, [r4, #8]
 80162fa:	463e      	mov	r6, r7
 80162fc:	42be      	cmp	r6, r7
 80162fe:	d900      	bls.n	8016302 <__ssputs_r+0x86>
 8016300:	463e      	mov	r6, r7
 8016302:	6820      	ldr	r0, [r4, #0]
 8016304:	4632      	mov	r2, r6
 8016306:	4641      	mov	r1, r8
 8016308:	f001 f99e 	bl	8017648 <memmove>
 801630c:	68a3      	ldr	r3, [r4, #8]
 801630e:	1b9b      	subs	r3, r3, r6
 8016310:	60a3      	str	r3, [r4, #8]
 8016312:	6823      	ldr	r3, [r4, #0]
 8016314:	4433      	add	r3, r6
 8016316:	6023      	str	r3, [r4, #0]
 8016318:	2000      	movs	r0, #0
 801631a:	e7db      	b.n	80162d4 <__ssputs_r+0x58>
 801631c:	462a      	mov	r2, r5
 801631e:	f7ff ff7e 	bl	801621e <_realloc_r>
 8016322:	4606      	mov	r6, r0
 8016324:	2800      	cmp	r0, #0
 8016326:	d1e1      	bne.n	80162ec <__ssputs_r+0x70>
 8016328:	6921      	ldr	r1, [r4, #16]
 801632a:	4650      	mov	r0, sl
 801632c:	f7fc f91e 	bl	801256c <_free_r>
 8016330:	e7c7      	b.n	80162c2 <__ssputs_r+0x46>
	...

08016334 <_svfiprintf_r>:
 8016334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016338:	4698      	mov	r8, r3
 801633a:	898b      	ldrh	r3, [r1, #12]
 801633c:	061b      	lsls	r3, r3, #24
 801633e:	b09d      	sub	sp, #116	; 0x74
 8016340:	4607      	mov	r7, r0
 8016342:	460d      	mov	r5, r1
 8016344:	4614      	mov	r4, r2
 8016346:	d50e      	bpl.n	8016366 <_svfiprintf_r+0x32>
 8016348:	690b      	ldr	r3, [r1, #16]
 801634a:	b963      	cbnz	r3, 8016366 <_svfiprintf_r+0x32>
 801634c:	2140      	movs	r1, #64	; 0x40
 801634e:	f7fc f979 	bl	8012644 <_malloc_r>
 8016352:	6028      	str	r0, [r5, #0]
 8016354:	6128      	str	r0, [r5, #16]
 8016356:	b920      	cbnz	r0, 8016362 <_svfiprintf_r+0x2e>
 8016358:	230c      	movs	r3, #12
 801635a:	603b      	str	r3, [r7, #0]
 801635c:	f04f 30ff 	mov.w	r0, #4294967295
 8016360:	e0d1      	b.n	8016506 <_svfiprintf_r+0x1d2>
 8016362:	2340      	movs	r3, #64	; 0x40
 8016364:	616b      	str	r3, [r5, #20]
 8016366:	2300      	movs	r3, #0
 8016368:	9309      	str	r3, [sp, #36]	; 0x24
 801636a:	2320      	movs	r3, #32
 801636c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016370:	f8cd 800c 	str.w	r8, [sp, #12]
 8016374:	2330      	movs	r3, #48	; 0x30
 8016376:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8016520 <_svfiprintf_r+0x1ec>
 801637a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801637e:	f04f 0901 	mov.w	r9, #1
 8016382:	4623      	mov	r3, r4
 8016384:	469a      	mov	sl, r3
 8016386:	f813 2b01 	ldrb.w	r2, [r3], #1
 801638a:	b10a      	cbz	r2, 8016390 <_svfiprintf_r+0x5c>
 801638c:	2a25      	cmp	r2, #37	; 0x25
 801638e:	d1f9      	bne.n	8016384 <_svfiprintf_r+0x50>
 8016390:	ebba 0b04 	subs.w	fp, sl, r4
 8016394:	d00b      	beq.n	80163ae <_svfiprintf_r+0x7a>
 8016396:	465b      	mov	r3, fp
 8016398:	4622      	mov	r2, r4
 801639a:	4629      	mov	r1, r5
 801639c:	4638      	mov	r0, r7
 801639e:	f7ff ff6d 	bl	801627c <__ssputs_r>
 80163a2:	3001      	adds	r0, #1
 80163a4:	f000 80aa 	beq.w	80164fc <_svfiprintf_r+0x1c8>
 80163a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80163aa:	445a      	add	r2, fp
 80163ac:	9209      	str	r2, [sp, #36]	; 0x24
 80163ae:	f89a 3000 	ldrb.w	r3, [sl]
 80163b2:	2b00      	cmp	r3, #0
 80163b4:	f000 80a2 	beq.w	80164fc <_svfiprintf_r+0x1c8>
 80163b8:	2300      	movs	r3, #0
 80163ba:	f04f 32ff 	mov.w	r2, #4294967295
 80163be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80163c2:	f10a 0a01 	add.w	sl, sl, #1
 80163c6:	9304      	str	r3, [sp, #16]
 80163c8:	9307      	str	r3, [sp, #28]
 80163ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80163ce:	931a      	str	r3, [sp, #104]	; 0x68
 80163d0:	4654      	mov	r4, sl
 80163d2:	2205      	movs	r2, #5
 80163d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80163d8:	4851      	ldr	r0, [pc, #324]	; (8016520 <_svfiprintf_r+0x1ec>)
 80163da:	f7e9 ff31 	bl	8000240 <memchr>
 80163de:	9a04      	ldr	r2, [sp, #16]
 80163e0:	b9d8      	cbnz	r0, 801641a <_svfiprintf_r+0xe6>
 80163e2:	06d0      	lsls	r0, r2, #27
 80163e4:	bf44      	itt	mi
 80163e6:	2320      	movmi	r3, #32
 80163e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80163ec:	0711      	lsls	r1, r2, #28
 80163ee:	bf44      	itt	mi
 80163f0:	232b      	movmi	r3, #43	; 0x2b
 80163f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80163f6:	f89a 3000 	ldrb.w	r3, [sl]
 80163fa:	2b2a      	cmp	r3, #42	; 0x2a
 80163fc:	d015      	beq.n	801642a <_svfiprintf_r+0xf6>
 80163fe:	9a07      	ldr	r2, [sp, #28]
 8016400:	4654      	mov	r4, sl
 8016402:	2000      	movs	r0, #0
 8016404:	f04f 0c0a 	mov.w	ip, #10
 8016408:	4621      	mov	r1, r4
 801640a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801640e:	3b30      	subs	r3, #48	; 0x30
 8016410:	2b09      	cmp	r3, #9
 8016412:	d94e      	bls.n	80164b2 <_svfiprintf_r+0x17e>
 8016414:	b1b0      	cbz	r0, 8016444 <_svfiprintf_r+0x110>
 8016416:	9207      	str	r2, [sp, #28]
 8016418:	e014      	b.n	8016444 <_svfiprintf_r+0x110>
 801641a:	eba0 0308 	sub.w	r3, r0, r8
 801641e:	fa09 f303 	lsl.w	r3, r9, r3
 8016422:	4313      	orrs	r3, r2
 8016424:	9304      	str	r3, [sp, #16]
 8016426:	46a2      	mov	sl, r4
 8016428:	e7d2      	b.n	80163d0 <_svfiprintf_r+0x9c>
 801642a:	9b03      	ldr	r3, [sp, #12]
 801642c:	1d19      	adds	r1, r3, #4
 801642e:	681b      	ldr	r3, [r3, #0]
 8016430:	9103      	str	r1, [sp, #12]
 8016432:	2b00      	cmp	r3, #0
 8016434:	bfbb      	ittet	lt
 8016436:	425b      	neglt	r3, r3
 8016438:	f042 0202 	orrlt.w	r2, r2, #2
 801643c:	9307      	strge	r3, [sp, #28]
 801643e:	9307      	strlt	r3, [sp, #28]
 8016440:	bfb8      	it	lt
 8016442:	9204      	strlt	r2, [sp, #16]
 8016444:	7823      	ldrb	r3, [r4, #0]
 8016446:	2b2e      	cmp	r3, #46	; 0x2e
 8016448:	d10c      	bne.n	8016464 <_svfiprintf_r+0x130>
 801644a:	7863      	ldrb	r3, [r4, #1]
 801644c:	2b2a      	cmp	r3, #42	; 0x2a
 801644e:	d135      	bne.n	80164bc <_svfiprintf_r+0x188>
 8016450:	9b03      	ldr	r3, [sp, #12]
 8016452:	1d1a      	adds	r2, r3, #4
 8016454:	681b      	ldr	r3, [r3, #0]
 8016456:	9203      	str	r2, [sp, #12]
 8016458:	2b00      	cmp	r3, #0
 801645a:	bfb8      	it	lt
 801645c:	f04f 33ff 	movlt.w	r3, #4294967295
 8016460:	3402      	adds	r4, #2
 8016462:	9305      	str	r3, [sp, #20]
 8016464:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8016530 <_svfiprintf_r+0x1fc>
 8016468:	7821      	ldrb	r1, [r4, #0]
 801646a:	2203      	movs	r2, #3
 801646c:	4650      	mov	r0, sl
 801646e:	f7e9 fee7 	bl	8000240 <memchr>
 8016472:	b140      	cbz	r0, 8016486 <_svfiprintf_r+0x152>
 8016474:	2340      	movs	r3, #64	; 0x40
 8016476:	eba0 000a 	sub.w	r0, r0, sl
 801647a:	fa03 f000 	lsl.w	r0, r3, r0
 801647e:	9b04      	ldr	r3, [sp, #16]
 8016480:	4303      	orrs	r3, r0
 8016482:	3401      	adds	r4, #1
 8016484:	9304      	str	r3, [sp, #16]
 8016486:	f814 1b01 	ldrb.w	r1, [r4], #1
 801648a:	4826      	ldr	r0, [pc, #152]	; (8016524 <_svfiprintf_r+0x1f0>)
 801648c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016490:	2206      	movs	r2, #6
 8016492:	f7e9 fed5 	bl	8000240 <memchr>
 8016496:	2800      	cmp	r0, #0
 8016498:	d038      	beq.n	801650c <_svfiprintf_r+0x1d8>
 801649a:	4b23      	ldr	r3, [pc, #140]	; (8016528 <_svfiprintf_r+0x1f4>)
 801649c:	bb1b      	cbnz	r3, 80164e6 <_svfiprintf_r+0x1b2>
 801649e:	9b03      	ldr	r3, [sp, #12]
 80164a0:	3307      	adds	r3, #7
 80164a2:	f023 0307 	bic.w	r3, r3, #7
 80164a6:	3308      	adds	r3, #8
 80164a8:	9303      	str	r3, [sp, #12]
 80164aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80164ac:	4433      	add	r3, r6
 80164ae:	9309      	str	r3, [sp, #36]	; 0x24
 80164b0:	e767      	b.n	8016382 <_svfiprintf_r+0x4e>
 80164b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80164b6:	460c      	mov	r4, r1
 80164b8:	2001      	movs	r0, #1
 80164ba:	e7a5      	b.n	8016408 <_svfiprintf_r+0xd4>
 80164bc:	2300      	movs	r3, #0
 80164be:	3401      	adds	r4, #1
 80164c0:	9305      	str	r3, [sp, #20]
 80164c2:	4619      	mov	r1, r3
 80164c4:	f04f 0c0a 	mov.w	ip, #10
 80164c8:	4620      	mov	r0, r4
 80164ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80164ce:	3a30      	subs	r2, #48	; 0x30
 80164d0:	2a09      	cmp	r2, #9
 80164d2:	d903      	bls.n	80164dc <_svfiprintf_r+0x1a8>
 80164d4:	2b00      	cmp	r3, #0
 80164d6:	d0c5      	beq.n	8016464 <_svfiprintf_r+0x130>
 80164d8:	9105      	str	r1, [sp, #20]
 80164da:	e7c3      	b.n	8016464 <_svfiprintf_r+0x130>
 80164dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80164e0:	4604      	mov	r4, r0
 80164e2:	2301      	movs	r3, #1
 80164e4:	e7f0      	b.n	80164c8 <_svfiprintf_r+0x194>
 80164e6:	ab03      	add	r3, sp, #12
 80164e8:	9300      	str	r3, [sp, #0]
 80164ea:	462a      	mov	r2, r5
 80164ec:	4b0f      	ldr	r3, [pc, #60]	; (801652c <_svfiprintf_r+0x1f8>)
 80164ee:	a904      	add	r1, sp, #16
 80164f0:	4638      	mov	r0, r7
 80164f2:	f7fc f9bb 	bl	801286c <_printf_float>
 80164f6:	1c42      	adds	r2, r0, #1
 80164f8:	4606      	mov	r6, r0
 80164fa:	d1d6      	bne.n	80164aa <_svfiprintf_r+0x176>
 80164fc:	89ab      	ldrh	r3, [r5, #12]
 80164fe:	065b      	lsls	r3, r3, #25
 8016500:	f53f af2c 	bmi.w	801635c <_svfiprintf_r+0x28>
 8016504:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016506:	b01d      	add	sp, #116	; 0x74
 8016508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801650c:	ab03      	add	r3, sp, #12
 801650e:	9300      	str	r3, [sp, #0]
 8016510:	462a      	mov	r2, r5
 8016512:	4b06      	ldr	r3, [pc, #24]	; (801652c <_svfiprintf_r+0x1f8>)
 8016514:	a904      	add	r1, sp, #16
 8016516:	4638      	mov	r0, r7
 8016518:	f7fc fc4c 	bl	8012db4 <_printf_i>
 801651c:	e7eb      	b.n	80164f6 <_svfiprintf_r+0x1c2>
 801651e:	bf00      	nop
 8016520:	0805da5c 	.word	0x0805da5c
 8016524:	0805da66 	.word	0x0805da66
 8016528:	0801286d 	.word	0x0801286d
 801652c:	0801627d 	.word	0x0801627d
 8016530:	0805da62 	.word	0x0805da62

08016534 <_sungetc_r>:
 8016534:	b538      	push	{r3, r4, r5, lr}
 8016536:	1c4b      	adds	r3, r1, #1
 8016538:	4614      	mov	r4, r2
 801653a:	d103      	bne.n	8016544 <_sungetc_r+0x10>
 801653c:	f04f 35ff 	mov.w	r5, #4294967295
 8016540:	4628      	mov	r0, r5
 8016542:	bd38      	pop	{r3, r4, r5, pc}
 8016544:	8993      	ldrh	r3, [r2, #12]
 8016546:	f023 0320 	bic.w	r3, r3, #32
 801654a:	8193      	strh	r3, [r2, #12]
 801654c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801654e:	6852      	ldr	r2, [r2, #4]
 8016550:	b2cd      	uxtb	r5, r1
 8016552:	b18b      	cbz	r3, 8016578 <_sungetc_r+0x44>
 8016554:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016556:	4293      	cmp	r3, r2
 8016558:	dd08      	ble.n	801656c <_sungetc_r+0x38>
 801655a:	6823      	ldr	r3, [r4, #0]
 801655c:	1e5a      	subs	r2, r3, #1
 801655e:	6022      	str	r2, [r4, #0]
 8016560:	f803 5c01 	strb.w	r5, [r3, #-1]
 8016564:	6863      	ldr	r3, [r4, #4]
 8016566:	3301      	adds	r3, #1
 8016568:	6063      	str	r3, [r4, #4]
 801656a:	e7e9      	b.n	8016540 <_sungetc_r+0xc>
 801656c:	4621      	mov	r1, r4
 801656e:	f000 fd3b 	bl	8016fe8 <__submore>
 8016572:	2800      	cmp	r0, #0
 8016574:	d0f1      	beq.n	801655a <_sungetc_r+0x26>
 8016576:	e7e1      	b.n	801653c <_sungetc_r+0x8>
 8016578:	6921      	ldr	r1, [r4, #16]
 801657a:	6823      	ldr	r3, [r4, #0]
 801657c:	b151      	cbz	r1, 8016594 <_sungetc_r+0x60>
 801657e:	4299      	cmp	r1, r3
 8016580:	d208      	bcs.n	8016594 <_sungetc_r+0x60>
 8016582:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8016586:	42a9      	cmp	r1, r5
 8016588:	d104      	bne.n	8016594 <_sungetc_r+0x60>
 801658a:	3b01      	subs	r3, #1
 801658c:	3201      	adds	r2, #1
 801658e:	6023      	str	r3, [r4, #0]
 8016590:	6062      	str	r2, [r4, #4]
 8016592:	e7d5      	b.n	8016540 <_sungetc_r+0xc>
 8016594:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8016598:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801659c:	6363      	str	r3, [r4, #52]	; 0x34
 801659e:	2303      	movs	r3, #3
 80165a0:	63a3      	str	r3, [r4, #56]	; 0x38
 80165a2:	4623      	mov	r3, r4
 80165a4:	f803 5f46 	strb.w	r5, [r3, #70]!
 80165a8:	6023      	str	r3, [r4, #0]
 80165aa:	2301      	movs	r3, #1
 80165ac:	e7dc      	b.n	8016568 <_sungetc_r+0x34>

080165ae <__ssrefill_r>:
 80165ae:	b510      	push	{r4, lr}
 80165b0:	460c      	mov	r4, r1
 80165b2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80165b4:	b169      	cbz	r1, 80165d2 <__ssrefill_r+0x24>
 80165b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80165ba:	4299      	cmp	r1, r3
 80165bc:	d001      	beq.n	80165c2 <__ssrefill_r+0x14>
 80165be:	f7fb ffd5 	bl	801256c <_free_r>
 80165c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80165c4:	6063      	str	r3, [r4, #4]
 80165c6:	2000      	movs	r0, #0
 80165c8:	6360      	str	r0, [r4, #52]	; 0x34
 80165ca:	b113      	cbz	r3, 80165d2 <__ssrefill_r+0x24>
 80165cc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80165ce:	6023      	str	r3, [r4, #0]
 80165d0:	bd10      	pop	{r4, pc}
 80165d2:	6923      	ldr	r3, [r4, #16]
 80165d4:	6023      	str	r3, [r4, #0]
 80165d6:	2300      	movs	r3, #0
 80165d8:	6063      	str	r3, [r4, #4]
 80165da:	89a3      	ldrh	r3, [r4, #12]
 80165dc:	f043 0320 	orr.w	r3, r3, #32
 80165e0:	81a3      	strh	r3, [r4, #12]
 80165e2:	f04f 30ff 	mov.w	r0, #4294967295
 80165e6:	e7f3      	b.n	80165d0 <__ssrefill_r+0x22>

080165e8 <__ssvfiscanf_r>:
 80165e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80165ec:	460c      	mov	r4, r1
 80165ee:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80165f2:	2100      	movs	r1, #0
 80165f4:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80165f8:	49a6      	ldr	r1, [pc, #664]	; (8016894 <__ssvfiscanf_r+0x2ac>)
 80165fa:	91a0      	str	r1, [sp, #640]	; 0x280
 80165fc:	f10d 0804 	add.w	r8, sp, #4
 8016600:	49a5      	ldr	r1, [pc, #660]	; (8016898 <__ssvfiscanf_r+0x2b0>)
 8016602:	4fa6      	ldr	r7, [pc, #664]	; (801689c <__ssvfiscanf_r+0x2b4>)
 8016604:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80168a0 <__ssvfiscanf_r+0x2b8>
 8016608:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801660c:	4606      	mov	r6, r0
 801660e:	91a1      	str	r1, [sp, #644]	; 0x284
 8016610:	9300      	str	r3, [sp, #0]
 8016612:	7813      	ldrb	r3, [r2, #0]
 8016614:	2b00      	cmp	r3, #0
 8016616:	f000 815a 	beq.w	80168ce <__ssvfiscanf_r+0x2e6>
 801661a:	5dd9      	ldrb	r1, [r3, r7]
 801661c:	f011 0108 	ands.w	r1, r1, #8
 8016620:	f102 0501 	add.w	r5, r2, #1
 8016624:	d019      	beq.n	801665a <__ssvfiscanf_r+0x72>
 8016626:	6863      	ldr	r3, [r4, #4]
 8016628:	2b00      	cmp	r3, #0
 801662a:	dd0f      	ble.n	801664c <__ssvfiscanf_r+0x64>
 801662c:	6823      	ldr	r3, [r4, #0]
 801662e:	781a      	ldrb	r2, [r3, #0]
 8016630:	5cba      	ldrb	r2, [r7, r2]
 8016632:	0712      	lsls	r2, r2, #28
 8016634:	d401      	bmi.n	801663a <__ssvfiscanf_r+0x52>
 8016636:	462a      	mov	r2, r5
 8016638:	e7eb      	b.n	8016612 <__ssvfiscanf_r+0x2a>
 801663a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801663c:	3201      	adds	r2, #1
 801663e:	9245      	str	r2, [sp, #276]	; 0x114
 8016640:	6862      	ldr	r2, [r4, #4]
 8016642:	3301      	adds	r3, #1
 8016644:	3a01      	subs	r2, #1
 8016646:	6062      	str	r2, [r4, #4]
 8016648:	6023      	str	r3, [r4, #0]
 801664a:	e7ec      	b.n	8016626 <__ssvfiscanf_r+0x3e>
 801664c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801664e:	4621      	mov	r1, r4
 8016650:	4630      	mov	r0, r6
 8016652:	4798      	blx	r3
 8016654:	2800      	cmp	r0, #0
 8016656:	d0e9      	beq.n	801662c <__ssvfiscanf_r+0x44>
 8016658:	e7ed      	b.n	8016636 <__ssvfiscanf_r+0x4e>
 801665a:	2b25      	cmp	r3, #37	; 0x25
 801665c:	d012      	beq.n	8016684 <__ssvfiscanf_r+0x9c>
 801665e:	469a      	mov	sl, r3
 8016660:	6863      	ldr	r3, [r4, #4]
 8016662:	2b00      	cmp	r3, #0
 8016664:	f340 8091 	ble.w	801678a <__ssvfiscanf_r+0x1a2>
 8016668:	6822      	ldr	r2, [r4, #0]
 801666a:	7813      	ldrb	r3, [r2, #0]
 801666c:	4553      	cmp	r3, sl
 801666e:	f040 812e 	bne.w	80168ce <__ssvfiscanf_r+0x2e6>
 8016672:	6863      	ldr	r3, [r4, #4]
 8016674:	3b01      	subs	r3, #1
 8016676:	6063      	str	r3, [r4, #4]
 8016678:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801667a:	3201      	adds	r2, #1
 801667c:	3301      	adds	r3, #1
 801667e:	6022      	str	r2, [r4, #0]
 8016680:	9345      	str	r3, [sp, #276]	; 0x114
 8016682:	e7d8      	b.n	8016636 <__ssvfiscanf_r+0x4e>
 8016684:	9141      	str	r1, [sp, #260]	; 0x104
 8016686:	9143      	str	r1, [sp, #268]	; 0x10c
 8016688:	7853      	ldrb	r3, [r2, #1]
 801668a:	2b2a      	cmp	r3, #42	; 0x2a
 801668c:	bf02      	ittt	eq
 801668e:	2310      	moveq	r3, #16
 8016690:	1c95      	addeq	r5, r2, #2
 8016692:	9341      	streq	r3, [sp, #260]	; 0x104
 8016694:	220a      	movs	r2, #10
 8016696:	46aa      	mov	sl, r5
 8016698:	f81a 1b01 	ldrb.w	r1, [sl], #1
 801669c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80166a0:	2b09      	cmp	r3, #9
 80166a2:	d91d      	bls.n	80166e0 <__ssvfiscanf_r+0xf8>
 80166a4:	487e      	ldr	r0, [pc, #504]	; (80168a0 <__ssvfiscanf_r+0x2b8>)
 80166a6:	2203      	movs	r2, #3
 80166a8:	f7e9 fdca 	bl	8000240 <memchr>
 80166ac:	b140      	cbz	r0, 80166c0 <__ssvfiscanf_r+0xd8>
 80166ae:	2301      	movs	r3, #1
 80166b0:	eba0 0009 	sub.w	r0, r0, r9
 80166b4:	fa03 f000 	lsl.w	r0, r3, r0
 80166b8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80166ba:	4318      	orrs	r0, r3
 80166bc:	9041      	str	r0, [sp, #260]	; 0x104
 80166be:	4655      	mov	r5, sl
 80166c0:	f815 3b01 	ldrb.w	r3, [r5], #1
 80166c4:	2b78      	cmp	r3, #120	; 0x78
 80166c6:	d806      	bhi.n	80166d6 <__ssvfiscanf_r+0xee>
 80166c8:	2b57      	cmp	r3, #87	; 0x57
 80166ca:	d810      	bhi.n	80166ee <__ssvfiscanf_r+0x106>
 80166cc:	2b25      	cmp	r3, #37	; 0x25
 80166ce:	d0c6      	beq.n	801665e <__ssvfiscanf_r+0x76>
 80166d0:	d856      	bhi.n	8016780 <__ssvfiscanf_r+0x198>
 80166d2:	2b00      	cmp	r3, #0
 80166d4:	d064      	beq.n	80167a0 <__ssvfiscanf_r+0x1b8>
 80166d6:	2303      	movs	r3, #3
 80166d8:	9347      	str	r3, [sp, #284]	; 0x11c
 80166da:	230a      	movs	r3, #10
 80166dc:	9342      	str	r3, [sp, #264]	; 0x108
 80166de:	e071      	b.n	80167c4 <__ssvfiscanf_r+0x1dc>
 80166e0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80166e2:	fb02 1103 	mla	r1, r2, r3, r1
 80166e6:	3930      	subs	r1, #48	; 0x30
 80166e8:	9143      	str	r1, [sp, #268]	; 0x10c
 80166ea:	4655      	mov	r5, sl
 80166ec:	e7d3      	b.n	8016696 <__ssvfiscanf_r+0xae>
 80166ee:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80166f2:	2a20      	cmp	r2, #32
 80166f4:	d8ef      	bhi.n	80166d6 <__ssvfiscanf_r+0xee>
 80166f6:	a101      	add	r1, pc, #4	; (adr r1, 80166fc <__ssvfiscanf_r+0x114>)
 80166f8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80166fc:	080167af 	.word	0x080167af
 8016700:	080166d7 	.word	0x080166d7
 8016704:	080166d7 	.word	0x080166d7
 8016708:	0801680d 	.word	0x0801680d
 801670c:	080166d7 	.word	0x080166d7
 8016710:	080166d7 	.word	0x080166d7
 8016714:	080166d7 	.word	0x080166d7
 8016718:	080166d7 	.word	0x080166d7
 801671c:	080166d7 	.word	0x080166d7
 8016720:	080166d7 	.word	0x080166d7
 8016724:	080166d7 	.word	0x080166d7
 8016728:	08016823 	.word	0x08016823
 801672c:	080167f9 	.word	0x080167f9
 8016730:	08016787 	.word	0x08016787
 8016734:	08016787 	.word	0x08016787
 8016738:	08016787 	.word	0x08016787
 801673c:	080166d7 	.word	0x080166d7
 8016740:	080167fd 	.word	0x080167fd
 8016744:	080166d7 	.word	0x080166d7
 8016748:	080166d7 	.word	0x080166d7
 801674c:	080166d7 	.word	0x080166d7
 8016750:	080166d7 	.word	0x080166d7
 8016754:	08016833 	.word	0x08016833
 8016758:	08016805 	.word	0x08016805
 801675c:	080167a7 	.word	0x080167a7
 8016760:	080166d7 	.word	0x080166d7
 8016764:	080166d7 	.word	0x080166d7
 8016768:	0801682f 	.word	0x0801682f
 801676c:	080166d7 	.word	0x080166d7
 8016770:	080167f9 	.word	0x080167f9
 8016774:	080166d7 	.word	0x080166d7
 8016778:	080166d7 	.word	0x080166d7
 801677c:	080167af 	.word	0x080167af
 8016780:	3b45      	subs	r3, #69	; 0x45
 8016782:	2b02      	cmp	r3, #2
 8016784:	d8a7      	bhi.n	80166d6 <__ssvfiscanf_r+0xee>
 8016786:	2305      	movs	r3, #5
 8016788:	e01b      	b.n	80167c2 <__ssvfiscanf_r+0x1da>
 801678a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801678c:	4621      	mov	r1, r4
 801678e:	4630      	mov	r0, r6
 8016790:	4798      	blx	r3
 8016792:	2800      	cmp	r0, #0
 8016794:	f43f af68 	beq.w	8016668 <__ssvfiscanf_r+0x80>
 8016798:	9844      	ldr	r0, [sp, #272]	; 0x110
 801679a:	2800      	cmp	r0, #0
 801679c:	f040 808d 	bne.w	80168ba <__ssvfiscanf_r+0x2d2>
 80167a0:	f04f 30ff 	mov.w	r0, #4294967295
 80167a4:	e08f      	b.n	80168c6 <__ssvfiscanf_r+0x2de>
 80167a6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80167a8:	f042 0220 	orr.w	r2, r2, #32
 80167ac:	9241      	str	r2, [sp, #260]	; 0x104
 80167ae:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80167b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80167b4:	9241      	str	r2, [sp, #260]	; 0x104
 80167b6:	2210      	movs	r2, #16
 80167b8:	2b6f      	cmp	r3, #111	; 0x6f
 80167ba:	9242      	str	r2, [sp, #264]	; 0x108
 80167bc:	bf34      	ite	cc
 80167be:	2303      	movcc	r3, #3
 80167c0:	2304      	movcs	r3, #4
 80167c2:	9347      	str	r3, [sp, #284]	; 0x11c
 80167c4:	6863      	ldr	r3, [r4, #4]
 80167c6:	2b00      	cmp	r3, #0
 80167c8:	dd42      	ble.n	8016850 <__ssvfiscanf_r+0x268>
 80167ca:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80167cc:	0659      	lsls	r1, r3, #25
 80167ce:	d404      	bmi.n	80167da <__ssvfiscanf_r+0x1f2>
 80167d0:	6823      	ldr	r3, [r4, #0]
 80167d2:	781a      	ldrb	r2, [r3, #0]
 80167d4:	5cba      	ldrb	r2, [r7, r2]
 80167d6:	0712      	lsls	r2, r2, #28
 80167d8:	d441      	bmi.n	801685e <__ssvfiscanf_r+0x276>
 80167da:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80167dc:	2b02      	cmp	r3, #2
 80167de:	dc50      	bgt.n	8016882 <__ssvfiscanf_r+0x29a>
 80167e0:	466b      	mov	r3, sp
 80167e2:	4622      	mov	r2, r4
 80167e4:	a941      	add	r1, sp, #260	; 0x104
 80167e6:	4630      	mov	r0, r6
 80167e8:	f000 f9d0 	bl	8016b8c <_scanf_chars>
 80167ec:	2801      	cmp	r0, #1
 80167ee:	d06e      	beq.n	80168ce <__ssvfiscanf_r+0x2e6>
 80167f0:	2802      	cmp	r0, #2
 80167f2:	f47f af20 	bne.w	8016636 <__ssvfiscanf_r+0x4e>
 80167f6:	e7cf      	b.n	8016798 <__ssvfiscanf_r+0x1b0>
 80167f8:	220a      	movs	r2, #10
 80167fa:	e7dd      	b.n	80167b8 <__ssvfiscanf_r+0x1d0>
 80167fc:	2300      	movs	r3, #0
 80167fe:	9342      	str	r3, [sp, #264]	; 0x108
 8016800:	2303      	movs	r3, #3
 8016802:	e7de      	b.n	80167c2 <__ssvfiscanf_r+0x1da>
 8016804:	2308      	movs	r3, #8
 8016806:	9342      	str	r3, [sp, #264]	; 0x108
 8016808:	2304      	movs	r3, #4
 801680a:	e7da      	b.n	80167c2 <__ssvfiscanf_r+0x1da>
 801680c:	4629      	mov	r1, r5
 801680e:	4640      	mov	r0, r8
 8016810:	f000 fb2a 	bl	8016e68 <__sccl>
 8016814:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016816:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801681a:	9341      	str	r3, [sp, #260]	; 0x104
 801681c:	4605      	mov	r5, r0
 801681e:	2301      	movs	r3, #1
 8016820:	e7cf      	b.n	80167c2 <__ssvfiscanf_r+0x1da>
 8016822:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016824:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016828:	9341      	str	r3, [sp, #260]	; 0x104
 801682a:	2300      	movs	r3, #0
 801682c:	e7c9      	b.n	80167c2 <__ssvfiscanf_r+0x1da>
 801682e:	2302      	movs	r3, #2
 8016830:	e7c7      	b.n	80167c2 <__ssvfiscanf_r+0x1da>
 8016832:	9841      	ldr	r0, [sp, #260]	; 0x104
 8016834:	06c3      	lsls	r3, r0, #27
 8016836:	f53f aefe 	bmi.w	8016636 <__ssvfiscanf_r+0x4e>
 801683a:	9b00      	ldr	r3, [sp, #0]
 801683c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801683e:	1d19      	adds	r1, r3, #4
 8016840:	9100      	str	r1, [sp, #0]
 8016842:	681b      	ldr	r3, [r3, #0]
 8016844:	f010 0f01 	tst.w	r0, #1
 8016848:	bf14      	ite	ne
 801684a:	801a      	strhne	r2, [r3, #0]
 801684c:	601a      	streq	r2, [r3, #0]
 801684e:	e6f2      	b.n	8016636 <__ssvfiscanf_r+0x4e>
 8016850:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016852:	4621      	mov	r1, r4
 8016854:	4630      	mov	r0, r6
 8016856:	4798      	blx	r3
 8016858:	2800      	cmp	r0, #0
 801685a:	d0b6      	beq.n	80167ca <__ssvfiscanf_r+0x1e2>
 801685c:	e79c      	b.n	8016798 <__ssvfiscanf_r+0x1b0>
 801685e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8016860:	3201      	adds	r2, #1
 8016862:	9245      	str	r2, [sp, #276]	; 0x114
 8016864:	6862      	ldr	r2, [r4, #4]
 8016866:	3a01      	subs	r2, #1
 8016868:	2a00      	cmp	r2, #0
 801686a:	6062      	str	r2, [r4, #4]
 801686c:	dd02      	ble.n	8016874 <__ssvfiscanf_r+0x28c>
 801686e:	3301      	adds	r3, #1
 8016870:	6023      	str	r3, [r4, #0]
 8016872:	e7ad      	b.n	80167d0 <__ssvfiscanf_r+0x1e8>
 8016874:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016876:	4621      	mov	r1, r4
 8016878:	4630      	mov	r0, r6
 801687a:	4798      	blx	r3
 801687c:	2800      	cmp	r0, #0
 801687e:	d0a7      	beq.n	80167d0 <__ssvfiscanf_r+0x1e8>
 8016880:	e78a      	b.n	8016798 <__ssvfiscanf_r+0x1b0>
 8016882:	2b04      	cmp	r3, #4
 8016884:	dc0e      	bgt.n	80168a4 <__ssvfiscanf_r+0x2bc>
 8016886:	466b      	mov	r3, sp
 8016888:	4622      	mov	r2, r4
 801688a:	a941      	add	r1, sp, #260	; 0x104
 801688c:	4630      	mov	r0, r6
 801688e:	f000 f9d7 	bl	8016c40 <_scanf_i>
 8016892:	e7ab      	b.n	80167ec <__ssvfiscanf_r+0x204>
 8016894:	08016535 	.word	0x08016535
 8016898:	080165af 	.word	0x080165af
 801689c:	0805d711 	.word	0x0805d711
 80168a0:	0805da62 	.word	0x0805da62
 80168a4:	4b0b      	ldr	r3, [pc, #44]	; (80168d4 <__ssvfiscanf_r+0x2ec>)
 80168a6:	2b00      	cmp	r3, #0
 80168a8:	f43f aec5 	beq.w	8016636 <__ssvfiscanf_r+0x4e>
 80168ac:	466b      	mov	r3, sp
 80168ae:	4622      	mov	r2, r4
 80168b0:	a941      	add	r1, sp, #260	; 0x104
 80168b2:	4630      	mov	r0, r6
 80168b4:	f7fc fba4 	bl	8013000 <_scanf_float>
 80168b8:	e798      	b.n	80167ec <__ssvfiscanf_r+0x204>
 80168ba:	89a3      	ldrh	r3, [r4, #12]
 80168bc:	f013 0f40 	tst.w	r3, #64	; 0x40
 80168c0:	bf18      	it	ne
 80168c2:	f04f 30ff 	movne.w	r0, #4294967295
 80168c6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80168ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80168ce:	9844      	ldr	r0, [sp, #272]	; 0x110
 80168d0:	e7f9      	b.n	80168c6 <__ssvfiscanf_r+0x2de>
 80168d2:	bf00      	nop
 80168d4:	08013001 	.word	0x08013001

080168d8 <__sfputc_r>:
 80168d8:	6893      	ldr	r3, [r2, #8]
 80168da:	3b01      	subs	r3, #1
 80168dc:	2b00      	cmp	r3, #0
 80168de:	b410      	push	{r4}
 80168e0:	6093      	str	r3, [r2, #8]
 80168e2:	da08      	bge.n	80168f6 <__sfputc_r+0x1e>
 80168e4:	6994      	ldr	r4, [r2, #24]
 80168e6:	42a3      	cmp	r3, r4
 80168e8:	db01      	blt.n	80168ee <__sfputc_r+0x16>
 80168ea:	290a      	cmp	r1, #10
 80168ec:	d103      	bne.n	80168f6 <__sfputc_r+0x1e>
 80168ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80168f2:	f000 bbb3 	b.w	801705c <__swbuf_r>
 80168f6:	6813      	ldr	r3, [r2, #0]
 80168f8:	1c58      	adds	r0, r3, #1
 80168fa:	6010      	str	r0, [r2, #0]
 80168fc:	7019      	strb	r1, [r3, #0]
 80168fe:	4608      	mov	r0, r1
 8016900:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016904:	4770      	bx	lr

08016906 <__sfputs_r>:
 8016906:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016908:	4606      	mov	r6, r0
 801690a:	460f      	mov	r7, r1
 801690c:	4614      	mov	r4, r2
 801690e:	18d5      	adds	r5, r2, r3
 8016910:	42ac      	cmp	r4, r5
 8016912:	d101      	bne.n	8016918 <__sfputs_r+0x12>
 8016914:	2000      	movs	r0, #0
 8016916:	e007      	b.n	8016928 <__sfputs_r+0x22>
 8016918:	f814 1b01 	ldrb.w	r1, [r4], #1
 801691c:	463a      	mov	r2, r7
 801691e:	4630      	mov	r0, r6
 8016920:	f7ff ffda 	bl	80168d8 <__sfputc_r>
 8016924:	1c43      	adds	r3, r0, #1
 8016926:	d1f3      	bne.n	8016910 <__sfputs_r+0xa>
 8016928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801692c <_vfiprintf_r>:
 801692c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016930:	460d      	mov	r5, r1
 8016932:	b09d      	sub	sp, #116	; 0x74
 8016934:	4614      	mov	r4, r2
 8016936:	4698      	mov	r8, r3
 8016938:	4606      	mov	r6, r0
 801693a:	b118      	cbz	r0, 8016944 <_vfiprintf_r+0x18>
 801693c:	6983      	ldr	r3, [r0, #24]
 801693e:	b90b      	cbnz	r3, 8016944 <_vfiprintf_r+0x18>
 8016940:	f000 fd7c 	bl	801743c <__sinit>
 8016944:	4b89      	ldr	r3, [pc, #548]	; (8016b6c <_vfiprintf_r+0x240>)
 8016946:	429d      	cmp	r5, r3
 8016948:	d11b      	bne.n	8016982 <_vfiprintf_r+0x56>
 801694a:	6875      	ldr	r5, [r6, #4]
 801694c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801694e:	07d9      	lsls	r1, r3, #31
 8016950:	d405      	bmi.n	801695e <_vfiprintf_r+0x32>
 8016952:	89ab      	ldrh	r3, [r5, #12]
 8016954:	059a      	lsls	r2, r3, #22
 8016956:	d402      	bmi.n	801695e <_vfiprintf_r+0x32>
 8016958:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801695a:	f000 fe0d 	bl	8017578 <__retarget_lock_acquire_recursive>
 801695e:	89ab      	ldrh	r3, [r5, #12]
 8016960:	071b      	lsls	r3, r3, #28
 8016962:	d501      	bpl.n	8016968 <_vfiprintf_r+0x3c>
 8016964:	692b      	ldr	r3, [r5, #16]
 8016966:	b9eb      	cbnz	r3, 80169a4 <_vfiprintf_r+0x78>
 8016968:	4629      	mov	r1, r5
 801696a:	4630      	mov	r0, r6
 801696c:	f000 fbd6 	bl	801711c <__swsetup_r>
 8016970:	b1c0      	cbz	r0, 80169a4 <_vfiprintf_r+0x78>
 8016972:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016974:	07dc      	lsls	r4, r3, #31
 8016976:	d50e      	bpl.n	8016996 <_vfiprintf_r+0x6a>
 8016978:	f04f 30ff 	mov.w	r0, #4294967295
 801697c:	b01d      	add	sp, #116	; 0x74
 801697e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016982:	4b7b      	ldr	r3, [pc, #492]	; (8016b70 <_vfiprintf_r+0x244>)
 8016984:	429d      	cmp	r5, r3
 8016986:	d101      	bne.n	801698c <_vfiprintf_r+0x60>
 8016988:	68b5      	ldr	r5, [r6, #8]
 801698a:	e7df      	b.n	801694c <_vfiprintf_r+0x20>
 801698c:	4b79      	ldr	r3, [pc, #484]	; (8016b74 <_vfiprintf_r+0x248>)
 801698e:	429d      	cmp	r5, r3
 8016990:	bf08      	it	eq
 8016992:	68f5      	ldreq	r5, [r6, #12]
 8016994:	e7da      	b.n	801694c <_vfiprintf_r+0x20>
 8016996:	89ab      	ldrh	r3, [r5, #12]
 8016998:	0598      	lsls	r0, r3, #22
 801699a:	d4ed      	bmi.n	8016978 <_vfiprintf_r+0x4c>
 801699c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801699e:	f000 fdec 	bl	801757a <__retarget_lock_release_recursive>
 80169a2:	e7e9      	b.n	8016978 <_vfiprintf_r+0x4c>
 80169a4:	2300      	movs	r3, #0
 80169a6:	9309      	str	r3, [sp, #36]	; 0x24
 80169a8:	2320      	movs	r3, #32
 80169aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80169ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80169b2:	2330      	movs	r3, #48	; 0x30
 80169b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8016b78 <_vfiprintf_r+0x24c>
 80169b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80169bc:	f04f 0901 	mov.w	r9, #1
 80169c0:	4623      	mov	r3, r4
 80169c2:	469a      	mov	sl, r3
 80169c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80169c8:	b10a      	cbz	r2, 80169ce <_vfiprintf_r+0xa2>
 80169ca:	2a25      	cmp	r2, #37	; 0x25
 80169cc:	d1f9      	bne.n	80169c2 <_vfiprintf_r+0x96>
 80169ce:	ebba 0b04 	subs.w	fp, sl, r4
 80169d2:	d00b      	beq.n	80169ec <_vfiprintf_r+0xc0>
 80169d4:	465b      	mov	r3, fp
 80169d6:	4622      	mov	r2, r4
 80169d8:	4629      	mov	r1, r5
 80169da:	4630      	mov	r0, r6
 80169dc:	f7ff ff93 	bl	8016906 <__sfputs_r>
 80169e0:	3001      	adds	r0, #1
 80169e2:	f000 80aa 	beq.w	8016b3a <_vfiprintf_r+0x20e>
 80169e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80169e8:	445a      	add	r2, fp
 80169ea:	9209      	str	r2, [sp, #36]	; 0x24
 80169ec:	f89a 3000 	ldrb.w	r3, [sl]
 80169f0:	2b00      	cmp	r3, #0
 80169f2:	f000 80a2 	beq.w	8016b3a <_vfiprintf_r+0x20e>
 80169f6:	2300      	movs	r3, #0
 80169f8:	f04f 32ff 	mov.w	r2, #4294967295
 80169fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016a00:	f10a 0a01 	add.w	sl, sl, #1
 8016a04:	9304      	str	r3, [sp, #16]
 8016a06:	9307      	str	r3, [sp, #28]
 8016a08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016a0c:	931a      	str	r3, [sp, #104]	; 0x68
 8016a0e:	4654      	mov	r4, sl
 8016a10:	2205      	movs	r2, #5
 8016a12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016a16:	4858      	ldr	r0, [pc, #352]	; (8016b78 <_vfiprintf_r+0x24c>)
 8016a18:	f7e9 fc12 	bl	8000240 <memchr>
 8016a1c:	9a04      	ldr	r2, [sp, #16]
 8016a1e:	b9d8      	cbnz	r0, 8016a58 <_vfiprintf_r+0x12c>
 8016a20:	06d1      	lsls	r1, r2, #27
 8016a22:	bf44      	itt	mi
 8016a24:	2320      	movmi	r3, #32
 8016a26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016a2a:	0713      	lsls	r3, r2, #28
 8016a2c:	bf44      	itt	mi
 8016a2e:	232b      	movmi	r3, #43	; 0x2b
 8016a30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016a34:	f89a 3000 	ldrb.w	r3, [sl]
 8016a38:	2b2a      	cmp	r3, #42	; 0x2a
 8016a3a:	d015      	beq.n	8016a68 <_vfiprintf_r+0x13c>
 8016a3c:	9a07      	ldr	r2, [sp, #28]
 8016a3e:	4654      	mov	r4, sl
 8016a40:	2000      	movs	r0, #0
 8016a42:	f04f 0c0a 	mov.w	ip, #10
 8016a46:	4621      	mov	r1, r4
 8016a48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016a4c:	3b30      	subs	r3, #48	; 0x30
 8016a4e:	2b09      	cmp	r3, #9
 8016a50:	d94e      	bls.n	8016af0 <_vfiprintf_r+0x1c4>
 8016a52:	b1b0      	cbz	r0, 8016a82 <_vfiprintf_r+0x156>
 8016a54:	9207      	str	r2, [sp, #28]
 8016a56:	e014      	b.n	8016a82 <_vfiprintf_r+0x156>
 8016a58:	eba0 0308 	sub.w	r3, r0, r8
 8016a5c:	fa09 f303 	lsl.w	r3, r9, r3
 8016a60:	4313      	orrs	r3, r2
 8016a62:	9304      	str	r3, [sp, #16]
 8016a64:	46a2      	mov	sl, r4
 8016a66:	e7d2      	b.n	8016a0e <_vfiprintf_r+0xe2>
 8016a68:	9b03      	ldr	r3, [sp, #12]
 8016a6a:	1d19      	adds	r1, r3, #4
 8016a6c:	681b      	ldr	r3, [r3, #0]
 8016a6e:	9103      	str	r1, [sp, #12]
 8016a70:	2b00      	cmp	r3, #0
 8016a72:	bfbb      	ittet	lt
 8016a74:	425b      	neglt	r3, r3
 8016a76:	f042 0202 	orrlt.w	r2, r2, #2
 8016a7a:	9307      	strge	r3, [sp, #28]
 8016a7c:	9307      	strlt	r3, [sp, #28]
 8016a7e:	bfb8      	it	lt
 8016a80:	9204      	strlt	r2, [sp, #16]
 8016a82:	7823      	ldrb	r3, [r4, #0]
 8016a84:	2b2e      	cmp	r3, #46	; 0x2e
 8016a86:	d10c      	bne.n	8016aa2 <_vfiprintf_r+0x176>
 8016a88:	7863      	ldrb	r3, [r4, #1]
 8016a8a:	2b2a      	cmp	r3, #42	; 0x2a
 8016a8c:	d135      	bne.n	8016afa <_vfiprintf_r+0x1ce>
 8016a8e:	9b03      	ldr	r3, [sp, #12]
 8016a90:	1d1a      	adds	r2, r3, #4
 8016a92:	681b      	ldr	r3, [r3, #0]
 8016a94:	9203      	str	r2, [sp, #12]
 8016a96:	2b00      	cmp	r3, #0
 8016a98:	bfb8      	it	lt
 8016a9a:	f04f 33ff 	movlt.w	r3, #4294967295
 8016a9e:	3402      	adds	r4, #2
 8016aa0:	9305      	str	r3, [sp, #20]
 8016aa2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8016b88 <_vfiprintf_r+0x25c>
 8016aa6:	7821      	ldrb	r1, [r4, #0]
 8016aa8:	2203      	movs	r2, #3
 8016aaa:	4650      	mov	r0, sl
 8016aac:	f7e9 fbc8 	bl	8000240 <memchr>
 8016ab0:	b140      	cbz	r0, 8016ac4 <_vfiprintf_r+0x198>
 8016ab2:	2340      	movs	r3, #64	; 0x40
 8016ab4:	eba0 000a 	sub.w	r0, r0, sl
 8016ab8:	fa03 f000 	lsl.w	r0, r3, r0
 8016abc:	9b04      	ldr	r3, [sp, #16]
 8016abe:	4303      	orrs	r3, r0
 8016ac0:	3401      	adds	r4, #1
 8016ac2:	9304      	str	r3, [sp, #16]
 8016ac4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016ac8:	482c      	ldr	r0, [pc, #176]	; (8016b7c <_vfiprintf_r+0x250>)
 8016aca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016ace:	2206      	movs	r2, #6
 8016ad0:	f7e9 fbb6 	bl	8000240 <memchr>
 8016ad4:	2800      	cmp	r0, #0
 8016ad6:	d03f      	beq.n	8016b58 <_vfiprintf_r+0x22c>
 8016ad8:	4b29      	ldr	r3, [pc, #164]	; (8016b80 <_vfiprintf_r+0x254>)
 8016ada:	bb1b      	cbnz	r3, 8016b24 <_vfiprintf_r+0x1f8>
 8016adc:	9b03      	ldr	r3, [sp, #12]
 8016ade:	3307      	adds	r3, #7
 8016ae0:	f023 0307 	bic.w	r3, r3, #7
 8016ae4:	3308      	adds	r3, #8
 8016ae6:	9303      	str	r3, [sp, #12]
 8016ae8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016aea:	443b      	add	r3, r7
 8016aec:	9309      	str	r3, [sp, #36]	; 0x24
 8016aee:	e767      	b.n	80169c0 <_vfiprintf_r+0x94>
 8016af0:	fb0c 3202 	mla	r2, ip, r2, r3
 8016af4:	460c      	mov	r4, r1
 8016af6:	2001      	movs	r0, #1
 8016af8:	e7a5      	b.n	8016a46 <_vfiprintf_r+0x11a>
 8016afa:	2300      	movs	r3, #0
 8016afc:	3401      	adds	r4, #1
 8016afe:	9305      	str	r3, [sp, #20]
 8016b00:	4619      	mov	r1, r3
 8016b02:	f04f 0c0a 	mov.w	ip, #10
 8016b06:	4620      	mov	r0, r4
 8016b08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016b0c:	3a30      	subs	r2, #48	; 0x30
 8016b0e:	2a09      	cmp	r2, #9
 8016b10:	d903      	bls.n	8016b1a <_vfiprintf_r+0x1ee>
 8016b12:	2b00      	cmp	r3, #0
 8016b14:	d0c5      	beq.n	8016aa2 <_vfiprintf_r+0x176>
 8016b16:	9105      	str	r1, [sp, #20]
 8016b18:	e7c3      	b.n	8016aa2 <_vfiprintf_r+0x176>
 8016b1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8016b1e:	4604      	mov	r4, r0
 8016b20:	2301      	movs	r3, #1
 8016b22:	e7f0      	b.n	8016b06 <_vfiprintf_r+0x1da>
 8016b24:	ab03      	add	r3, sp, #12
 8016b26:	9300      	str	r3, [sp, #0]
 8016b28:	462a      	mov	r2, r5
 8016b2a:	4b16      	ldr	r3, [pc, #88]	; (8016b84 <_vfiprintf_r+0x258>)
 8016b2c:	a904      	add	r1, sp, #16
 8016b2e:	4630      	mov	r0, r6
 8016b30:	f7fb fe9c 	bl	801286c <_printf_float>
 8016b34:	4607      	mov	r7, r0
 8016b36:	1c78      	adds	r0, r7, #1
 8016b38:	d1d6      	bne.n	8016ae8 <_vfiprintf_r+0x1bc>
 8016b3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016b3c:	07d9      	lsls	r1, r3, #31
 8016b3e:	d405      	bmi.n	8016b4c <_vfiprintf_r+0x220>
 8016b40:	89ab      	ldrh	r3, [r5, #12]
 8016b42:	059a      	lsls	r2, r3, #22
 8016b44:	d402      	bmi.n	8016b4c <_vfiprintf_r+0x220>
 8016b46:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016b48:	f000 fd17 	bl	801757a <__retarget_lock_release_recursive>
 8016b4c:	89ab      	ldrh	r3, [r5, #12]
 8016b4e:	065b      	lsls	r3, r3, #25
 8016b50:	f53f af12 	bmi.w	8016978 <_vfiprintf_r+0x4c>
 8016b54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016b56:	e711      	b.n	801697c <_vfiprintf_r+0x50>
 8016b58:	ab03      	add	r3, sp, #12
 8016b5a:	9300      	str	r3, [sp, #0]
 8016b5c:	462a      	mov	r2, r5
 8016b5e:	4b09      	ldr	r3, [pc, #36]	; (8016b84 <_vfiprintf_r+0x258>)
 8016b60:	a904      	add	r1, sp, #16
 8016b62:	4630      	mov	r0, r6
 8016b64:	f7fc f926 	bl	8012db4 <_printf_i>
 8016b68:	e7e4      	b.n	8016b34 <_vfiprintf_r+0x208>
 8016b6a:	bf00      	nop
 8016b6c:	0805daa8 	.word	0x0805daa8
 8016b70:	0805dac8 	.word	0x0805dac8
 8016b74:	0805da88 	.word	0x0805da88
 8016b78:	0805da5c 	.word	0x0805da5c
 8016b7c:	0805da66 	.word	0x0805da66
 8016b80:	0801286d 	.word	0x0801286d
 8016b84:	08016907 	.word	0x08016907
 8016b88:	0805da62 	.word	0x0805da62

08016b8c <_scanf_chars>:
 8016b8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016b90:	4615      	mov	r5, r2
 8016b92:	688a      	ldr	r2, [r1, #8]
 8016b94:	4680      	mov	r8, r0
 8016b96:	460c      	mov	r4, r1
 8016b98:	b932      	cbnz	r2, 8016ba8 <_scanf_chars+0x1c>
 8016b9a:	698a      	ldr	r2, [r1, #24]
 8016b9c:	2a00      	cmp	r2, #0
 8016b9e:	bf0c      	ite	eq
 8016ba0:	2201      	moveq	r2, #1
 8016ba2:	f04f 32ff 	movne.w	r2, #4294967295
 8016ba6:	608a      	str	r2, [r1, #8]
 8016ba8:	6822      	ldr	r2, [r4, #0]
 8016baa:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8016c3c <_scanf_chars+0xb0>
 8016bae:	06d1      	lsls	r1, r2, #27
 8016bb0:	bf5f      	itttt	pl
 8016bb2:	681a      	ldrpl	r2, [r3, #0]
 8016bb4:	1d11      	addpl	r1, r2, #4
 8016bb6:	6019      	strpl	r1, [r3, #0]
 8016bb8:	6816      	ldrpl	r6, [r2, #0]
 8016bba:	2700      	movs	r7, #0
 8016bbc:	69a0      	ldr	r0, [r4, #24]
 8016bbe:	b188      	cbz	r0, 8016be4 <_scanf_chars+0x58>
 8016bc0:	2801      	cmp	r0, #1
 8016bc2:	d107      	bne.n	8016bd4 <_scanf_chars+0x48>
 8016bc4:	682a      	ldr	r2, [r5, #0]
 8016bc6:	7811      	ldrb	r1, [r2, #0]
 8016bc8:	6962      	ldr	r2, [r4, #20]
 8016bca:	5c52      	ldrb	r2, [r2, r1]
 8016bcc:	b952      	cbnz	r2, 8016be4 <_scanf_chars+0x58>
 8016bce:	2f00      	cmp	r7, #0
 8016bd0:	d031      	beq.n	8016c36 <_scanf_chars+0xaa>
 8016bd2:	e022      	b.n	8016c1a <_scanf_chars+0x8e>
 8016bd4:	2802      	cmp	r0, #2
 8016bd6:	d120      	bne.n	8016c1a <_scanf_chars+0x8e>
 8016bd8:	682b      	ldr	r3, [r5, #0]
 8016bda:	781b      	ldrb	r3, [r3, #0]
 8016bdc:	f813 3009 	ldrb.w	r3, [r3, r9]
 8016be0:	071b      	lsls	r3, r3, #28
 8016be2:	d41a      	bmi.n	8016c1a <_scanf_chars+0x8e>
 8016be4:	6823      	ldr	r3, [r4, #0]
 8016be6:	06da      	lsls	r2, r3, #27
 8016be8:	bf5e      	ittt	pl
 8016bea:	682b      	ldrpl	r3, [r5, #0]
 8016bec:	781b      	ldrbpl	r3, [r3, #0]
 8016bee:	f806 3b01 	strbpl.w	r3, [r6], #1
 8016bf2:	682a      	ldr	r2, [r5, #0]
 8016bf4:	686b      	ldr	r3, [r5, #4]
 8016bf6:	3201      	adds	r2, #1
 8016bf8:	602a      	str	r2, [r5, #0]
 8016bfa:	68a2      	ldr	r2, [r4, #8]
 8016bfc:	3b01      	subs	r3, #1
 8016bfe:	3a01      	subs	r2, #1
 8016c00:	606b      	str	r3, [r5, #4]
 8016c02:	3701      	adds	r7, #1
 8016c04:	60a2      	str	r2, [r4, #8]
 8016c06:	b142      	cbz	r2, 8016c1a <_scanf_chars+0x8e>
 8016c08:	2b00      	cmp	r3, #0
 8016c0a:	dcd7      	bgt.n	8016bbc <_scanf_chars+0x30>
 8016c0c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016c10:	4629      	mov	r1, r5
 8016c12:	4640      	mov	r0, r8
 8016c14:	4798      	blx	r3
 8016c16:	2800      	cmp	r0, #0
 8016c18:	d0d0      	beq.n	8016bbc <_scanf_chars+0x30>
 8016c1a:	6823      	ldr	r3, [r4, #0]
 8016c1c:	f013 0310 	ands.w	r3, r3, #16
 8016c20:	d105      	bne.n	8016c2e <_scanf_chars+0xa2>
 8016c22:	68e2      	ldr	r2, [r4, #12]
 8016c24:	3201      	adds	r2, #1
 8016c26:	60e2      	str	r2, [r4, #12]
 8016c28:	69a2      	ldr	r2, [r4, #24]
 8016c2a:	b102      	cbz	r2, 8016c2e <_scanf_chars+0xa2>
 8016c2c:	7033      	strb	r3, [r6, #0]
 8016c2e:	6923      	ldr	r3, [r4, #16]
 8016c30:	443b      	add	r3, r7
 8016c32:	6123      	str	r3, [r4, #16]
 8016c34:	2000      	movs	r0, #0
 8016c36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016c3a:	bf00      	nop
 8016c3c:	0805d711 	.word	0x0805d711

08016c40 <_scanf_i>:
 8016c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c44:	4698      	mov	r8, r3
 8016c46:	4b76      	ldr	r3, [pc, #472]	; (8016e20 <_scanf_i+0x1e0>)
 8016c48:	460c      	mov	r4, r1
 8016c4a:	4682      	mov	sl, r0
 8016c4c:	4616      	mov	r6, r2
 8016c4e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016c52:	b087      	sub	sp, #28
 8016c54:	ab03      	add	r3, sp, #12
 8016c56:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8016c5a:	4b72      	ldr	r3, [pc, #456]	; (8016e24 <_scanf_i+0x1e4>)
 8016c5c:	69a1      	ldr	r1, [r4, #24]
 8016c5e:	4a72      	ldr	r2, [pc, #456]	; (8016e28 <_scanf_i+0x1e8>)
 8016c60:	2903      	cmp	r1, #3
 8016c62:	bf18      	it	ne
 8016c64:	461a      	movne	r2, r3
 8016c66:	68a3      	ldr	r3, [r4, #8]
 8016c68:	9201      	str	r2, [sp, #4]
 8016c6a:	1e5a      	subs	r2, r3, #1
 8016c6c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8016c70:	bf88      	it	hi
 8016c72:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8016c76:	4627      	mov	r7, r4
 8016c78:	bf82      	ittt	hi
 8016c7a:	eb03 0905 	addhi.w	r9, r3, r5
 8016c7e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8016c82:	60a3      	strhi	r3, [r4, #8]
 8016c84:	f857 3b1c 	ldr.w	r3, [r7], #28
 8016c88:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8016c8c:	bf98      	it	ls
 8016c8e:	f04f 0900 	movls.w	r9, #0
 8016c92:	6023      	str	r3, [r4, #0]
 8016c94:	463d      	mov	r5, r7
 8016c96:	f04f 0b00 	mov.w	fp, #0
 8016c9a:	6831      	ldr	r1, [r6, #0]
 8016c9c:	ab03      	add	r3, sp, #12
 8016c9e:	7809      	ldrb	r1, [r1, #0]
 8016ca0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8016ca4:	2202      	movs	r2, #2
 8016ca6:	f7e9 facb 	bl	8000240 <memchr>
 8016caa:	b328      	cbz	r0, 8016cf8 <_scanf_i+0xb8>
 8016cac:	f1bb 0f01 	cmp.w	fp, #1
 8016cb0:	d159      	bne.n	8016d66 <_scanf_i+0x126>
 8016cb2:	6862      	ldr	r2, [r4, #4]
 8016cb4:	b92a      	cbnz	r2, 8016cc2 <_scanf_i+0x82>
 8016cb6:	6822      	ldr	r2, [r4, #0]
 8016cb8:	2308      	movs	r3, #8
 8016cba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016cbe:	6063      	str	r3, [r4, #4]
 8016cc0:	6022      	str	r2, [r4, #0]
 8016cc2:	6822      	ldr	r2, [r4, #0]
 8016cc4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8016cc8:	6022      	str	r2, [r4, #0]
 8016cca:	68a2      	ldr	r2, [r4, #8]
 8016ccc:	1e51      	subs	r1, r2, #1
 8016cce:	60a1      	str	r1, [r4, #8]
 8016cd0:	b192      	cbz	r2, 8016cf8 <_scanf_i+0xb8>
 8016cd2:	6832      	ldr	r2, [r6, #0]
 8016cd4:	1c51      	adds	r1, r2, #1
 8016cd6:	6031      	str	r1, [r6, #0]
 8016cd8:	7812      	ldrb	r2, [r2, #0]
 8016cda:	f805 2b01 	strb.w	r2, [r5], #1
 8016cde:	6872      	ldr	r2, [r6, #4]
 8016ce0:	3a01      	subs	r2, #1
 8016ce2:	2a00      	cmp	r2, #0
 8016ce4:	6072      	str	r2, [r6, #4]
 8016ce6:	dc07      	bgt.n	8016cf8 <_scanf_i+0xb8>
 8016ce8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8016cec:	4631      	mov	r1, r6
 8016cee:	4650      	mov	r0, sl
 8016cf0:	4790      	blx	r2
 8016cf2:	2800      	cmp	r0, #0
 8016cf4:	f040 8085 	bne.w	8016e02 <_scanf_i+0x1c2>
 8016cf8:	f10b 0b01 	add.w	fp, fp, #1
 8016cfc:	f1bb 0f03 	cmp.w	fp, #3
 8016d00:	d1cb      	bne.n	8016c9a <_scanf_i+0x5a>
 8016d02:	6863      	ldr	r3, [r4, #4]
 8016d04:	b90b      	cbnz	r3, 8016d0a <_scanf_i+0xca>
 8016d06:	230a      	movs	r3, #10
 8016d08:	6063      	str	r3, [r4, #4]
 8016d0a:	6863      	ldr	r3, [r4, #4]
 8016d0c:	4947      	ldr	r1, [pc, #284]	; (8016e2c <_scanf_i+0x1ec>)
 8016d0e:	6960      	ldr	r0, [r4, #20]
 8016d10:	1ac9      	subs	r1, r1, r3
 8016d12:	f000 f8a9 	bl	8016e68 <__sccl>
 8016d16:	f04f 0b00 	mov.w	fp, #0
 8016d1a:	68a3      	ldr	r3, [r4, #8]
 8016d1c:	6822      	ldr	r2, [r4, #0]
 8016d1e:	2b00      	cmp	r3, #0
 8016d20:	d03d      	beq.n	8016d9e <_scanf_i+0x15e>
 8016d22:	6831      	ldr	r1, [r6, #0]
 8016d24:	6960      	ldr	r0, [r4, #20]
 8016d26:	f891 c000 	ldrb.w	ip, [r1]
 8016d2a:	f810 000c 	ldrb.w	r0, [r0, ip]
 8016d2e:	2800      	cmp	r0, #0
 8016d30:	d035      	beq.n	8016d9e <_scanf_i+0x15e>
 8016d32:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8016d36:	d124      	bne.n	8016d82 <_scanf_i+0x142>
 8016d38:	0510      	lsls	r0, r2, #20
 8016d3a:	d522      	bpl.n	8016d82 <_scanf_i+0x142>
 8016d3c:	f10b 0b01 	add.w	fp, fp, #1
 8016d40:	f1b9 0f00 	cmp.w	r9, #0
 8016d44:	d003      	beq.n	8016d4e <_scanf_i+0x10e>
 8016d46:	3301      	adds	r3, #1
 8016d48:	f109 39ff 	add.w	r9, r9, #4294967295
 8016d4c:	60a3      	str	r3, [r4, #8]
 8016d4e:	6873      	ldr	r3, [r6, #4]
 8016d50:	3b01      	subs	r3, #1
 8016d52:	2b00      	cmp	r3, #0
 8016d54:	6073      	str	r3, [r6, #4]
 8016d56:	dd1b      	ble.n	8016d90 <_scanf_i+0x150>
 8016d58:	6833      	ldr	r3, [r6, #0]
 8016d5a:	3301      	adds	r3, #1
 8016d5c:	6033      	str	r3, [r6, #0]
 8016d5e:	68a3      	ldr	r3, [r4, #8]
 8016d60:	3b01      	subs	r3, #1
 8016d62:	60a3      	str	r3, [r4, #8]
 8016d64:	e7d9      	b.n	8016d1a <_scanf_i+0xda>
 8016d66:	f1bb 0f02 	cmp.w	fp, #2
 8016d6a:	d1ae      	bne.n	8016cca <_scanf_i+0x8a>
 8016d6c:	6822      	ldr	r2, [r4, #0]
 8016d6e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8016d72:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8016d76:	d1bf      	bne.n	8016cf8 <_scanf_i+0xb8>
 8016d78:	2310      	movs	r3, #16
 8016d7a:	6063      	str	r3, [r4, #4]
 8016d7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8016d80:	e7a2      	b.n	8016cc8 <_scanf_i+0x88>
 8016d82:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8016d86:	6022      	str	r2, [r4, #0]
 8016d88:	780b      	ldrb	r3, [r1, #0]
 8016d8a:	f805 3b01 	strb.w	r3, [r5], #1
 8016d8e:	e7de      	b.n	8016d4e <_scanf_i+0x10e>
 8016d90:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016d94:	4631      	mov	r1, r6
 8016d96:	4650      	mov	r0, sl
 8016d98:	4798      	blx	r3
 8016d9a:	2800      	cmp	r0, #0
 8016d9c:	d0df      	beq.n	8016d5e <_scanf_i+0x11e>
 8016d9e:	6823      	ldr	r3, [r4, #0]
 8016da0:	05db      	lsls	r3, r3, #23
 8016da2:	d50d      	bpl.n	8016dc0 <_scanf_i+0x180>
 8016da4:	42bd      	cmp	r5, r7
 8016da6:	d909      	bls.n	8016dbc <_scanf_i+0x17c>
 8016da8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8016dac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016db0:	4632      	mov	r2, r6
 8016db2:	4650      	mov	r0, sl
 8016db4:	4798      	blx	r3
 8016db6:	f105 39ff 	add.w	r9, r5, #4294967295
 8016dba:	464d      	mov	r5, r9
 8016dbc:	42bd      	cmp	r5, r7
 8016dbe:	d02d      	beq.n	8016e1c <_scanf_i+0x1dc>
 8016dc0:	6822      	ldr	r2, [r4, #0]
 8016dc2:	f012 0210 	ands.w	r2, r2, #16
 8016dc6:	d113      	bne.n	8016df0 <_scanf_i+0x1b0>
 8016dc8:	702a      	strb	r2, [r5, #0]
 8016dca:	6863      	ldr	r3, [r4, #4]
 8016dcc:	9e01      	ldr	r6, [sp, #4]
 8016dce:	4639      	mov	r1, r7
 8016dd0:	4650      	mov	r0, sl
 8016dd2:	47b0      	blx	r6
 8016dd4:	6821      	ldr	r1, [r4, #0]
 8016dd6:	f8d8 3000 	ldr.w	r3, [r8]
 8016dda:	f011 0f20 	tst.w	r1, #32
 8016dde:	d013      	beq.n	8016e08 <_scanf_i+0x1c8>
 8016de0:	1d1a      	adds	r2, r3, #4
 8016de2:	f8c8 2000 	str.w	r2, [r8]
 8016de6:	681b      	ldr	r3, [r3, #0]
 8016de8:	6018      	str	r0, [r3, #0]
 8016dea:	68e3      	ldr	r3, [r4, #12]
 8016dec:	3301      	adds	r3, #1
 8016dee:	60e3      	str	r3, [r4, #12]
 8016df0:	1bed      	subs	r5, r5, r7
 8016df2:	44ab      	add	fp, r5
 8016df4:	6925      	ldr	r5, [r4, #16]
 8016df6:	445d      	add	r5, fp
 8016df8:	6125      	str	r5, [r4, #16]
 8016dfa:	2000      	movs	r0, #0
 8016dfc:	b007      	add	sp, #28
 8016dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e02:	f04f 0b00 	mov.w	fp, #0
 8016e06:	e7ca      	b.n	8016d9e <_scanf_i+0x15e>
 8016e08:	1d1a      	adds	r2, r3, #4
 8016e0a:	f8c8 2000 	str.w	r2, [r8]
 8016e0e:	681b      	ldr	r3, [r3, #0]
 8016e10:	f011 0f01 	tst.w	r1, #1
 8016e14:	bf14      	ite	ne
 8016e16:	8018      	strhne	r0, [r3, #0]
 8016e18:	6018      	streq	r0, [r3, #0]
 8016e1a:	e7e6      	b.n	8016dea <_scanf_i+0x1aa>
 8016e1c:	2001      	movs	r0, #1
 8016e1e:	e7ed      	b.n	8016dfc <_scanf_i+0x1bc>
 8016e20:	08018af0 	.word	0x08018af0
 8016e24:	08016fe5 	.word	0x08016fe5
 8016e28:	0801438d 	.word	0x0801438d
 8016e2c:	0805da86 	.word	0x0805da86

08016e30 <_read_r>:
 8016e30:	b538      	push	{r3, r4, r5, lr}
 8016e32:	4d07      	ldr	r5, [pc, #28]	; (8016e50 <_read_r+0x20>)
 8016e34:	4604      	mov	r4, r0
 8016e36:	4608      	mov	r0, r1
 8016e38:	4611      	mov	r1, r2
 8016e3a:	2200      	movs	r2, #0
 8016e3c:	602a      	str	r2, [r5, #0]
 8016e3e:	461a      	mov	r2, r3
 8016e40:	f001 fc00 	bl	8018644 <_read>
 8016e44:	1c43      	adds	r3, r0, #1
 8016e46:	d102      	bne.n	8016e4e <_read_r+0x1e>
 8016e48:	682b      	ldr	r3, [r5, #0]
 8016e4a:	b103      	cbz	r3, 8016e4e <_read_r+0x1e>
 8016e4c:	6023      	str	r3, [r4, #0]
 8016e4e:	bd38      	pop	{r3, r4, r5, pc}
 8016e50:	2000c66c 	.word	0x2000c66c
 8016e54:	00000000 	.word	0x00000000

08016e58 <nan>:
 8016e58:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8016e60 <nan+0x8>
 8016e5c:	4770      	bx	lr
 8016e5e:	bf00      	nop
 8016e60:	00000000 	.word	0x00000000
 8016e64:	7ff80000 	.word	0x7ff80000

08016e68 <__sccl>:
 8016e68:	b570      	push	{r4, r5, r6, lr}
 8016e6a:	780b      	ldrb	r3, [r1, #0]
 8016e6c:	4604      	mov	r4, r0
 8016e6e:	2b5e      	cmp	r3, #94	; 0x5e
 8016e70:	bf0b      	itete	eq
 8016e72:	784b      	ldrbeq	r3, [r1, #1]
 8016e74:	1c48      	addne	r0, r1, #1
 8016e76:	1c88      	addeq	r0, r1, #2
 8016e78:	2200      	movne	r2, #0
 8016e7a:	bf08      	it	eq
 8016e7c:	2201      	moveq	r2, #1
 8016e7e:	1e61      	subs	r1, r4, #1
 8016e80:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8016e84:	f801 2f01 	strb.w	r2, [r1, #1]!
 8016e88:	42a9      	cmp	r1, r5
 8016e8a:	d1fb      	bne.n	8016e84 <__sccl+0x1c>
 8016e8c:	b90b      	cbnz	r3, 8016e92 <__sccl+0x2a>
 8016e8e:	3801      	subs	r0, #1
 8016e90:	bd70      	pop	{r4, r5, r6, pc}
 8016e92:	f082 0201 	eor.w	r2, r2, #1
 8016e96:	54e2      	strb	r2, [r4, r3]
 8016e98:	4605      	mov	r5, r0
 8016e9a:	4628      	mov	r0, r5
 8016e9c:	f810 1b01 	ldrb.w	r1, [r0], #1
 8016ea0:	292d      	cmp	r1, #45	; 0x2d
 8016ea2:	d006      	beq.n	8016eb2 <__sccl+0x4a>
 8016ea4:	295d      	cmp	r1, #93	; 0x5d
 8016ea6:	d0f3      	beq.n	8016e90 <__sccl+0x28>
 8016ea8:	b909      	cbnz	r1, 8016eae <__sccl+0x46>
 8016eaa:	4628      	mov	r0, r5
 8016eac:	e7f0      	b.n	8016e90 <__sccl+0x28>
 8016eae:	460b      	mov	r3, r1
 8016eb0:	e7f1      	b.n	8016e96 <__sccl+0x2e>
 8016eb2:	786e      	ldrb	r6, [r5, #1]
 8016eb4:	2e5d      	cmp	r6, #93	; 0x5d
 8016eb6:	d0fa      	beq.n	8016eae <__sccl+0x46>
 8016eb8:	42b3      	cmp	r3, r6
 8016eba:	dcf8      	bgt.n	8016eae <__sccl+0x46>
 8016ebc:	3502      	adds	r5, #2
 8016ebe:	4619      	mov	r1, r3
 8016ec0:	3101      	adds	r1, #1
 8016ec2:	428e      	cmp	r6, r1
 8016ec4:	5462      	strb	r2, [r4, r1]
 8016ec6:	dcfb      	bgt.n	8016ec0 <__sccl+0x58>
 8016ec8:	1af1      	subs	r1, r6, r3
 8016eca:	3901      	subs	r1, #1
 8016ecc:	1c58      	adds	r0, r3, #1
 8016ece:	42b3      	cmp	r3, r6
 8016ed0:	bfa8      	it	ge
 8016ed2:	2100      	movge	r1, #0
 8016ed4:	1843      	adds	r3, r0, r1
 8016ed6:	e7e0      	b.n	8016e9a <__sccl+0x32>

08016ed8 <strncmp>:
 8016ed8:	b510      	push	{r4, lr}
 8016eda:	b17a      	cbz	r2, 8016efc <strncmp+0x24>
 8016edc:	4603      	mov	r3, r0
 8016ede:	3901      	subs	r1, #1
 8016ee0:	1884      	adds	r4, r0, r2
 8016ee2:	f813 0b01 	ldrb.w	r0, [r3], #1
 8016ee6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8016eea:	4290      	cmp	r0, r2
 8016eec:	d101      	bne.n	8016ef2 <strncmp+0x1a>
 8016eee:	42a3      	cmp	r3, r4
 8016ef0:	d101      	bne.n	8016ef6 <strncmp+0x1e>
 8016ef2:	1a80      	subs	r0, r0, r2
 8016ef4:	bd10      	pop	{r4, pc}
 8016ef6:	2800      	cmp	r0, #0
 8016ef8:	d1f3      	bne.n	8016ee2 <strncmp+0xa>
 8016efa:	e7fa      	b.n	8016ef2 <strncmp+0x1a>
 8016efc:	4610      	mov	r0, r2
 8016efe:	e7f9      	b.n	8016ef4 <strncmp+0x1c>

08016f00 <_strtoul_l.constprop.0>:
 8016f00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016f04:	4f36      	ldr	r7, [pc, #216]	; (8016fe0 <_strtoul_l.constprop.0+0xe0>)
 8016f06:	4686      	mov	lr, r0
 8016f08:	460d      	mov	r5, r1
 8016f0a:	4628      	mov	r0, r5
 8016f0c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016f10:	5de6      	ldrb	r6, [r4, r7]
 8016f12:	f016 0608 	ands.w	r6, r6, #8
 8016f16:	d1f8      	bne.n	8016f0a <_strtoul_l.constprop.0+0xa>
 8016f18:	2c2d      	cmp	r4, #45	; 0x2d
 8016f1a:	d12f      	bne.n	8016f7c <_strtoul_l.constprop.0+0x7c>
 8016f1c:	782c      	ldrb	r4, [r5, #0]
 8016f1e:	2601      	movs	r6, #1
 8016f20:	1c85      	adds	r5, r0, #2
 8016f22:	2b00      	cmp	r3, #0
 8016f24:	d057      	beq.n	8016fd6 <_strtoul_l.constprop.0+0xd6>
 8016f26:	2b10      	cmp	r3, #16
 8016f28:	d109      	bne.n	8016f3e <_strtoul_l.constprop.0+0x3e>
 8016f2a:	2c30      	cmp	r4, #48	; 0x30
 8016f2c:	d107      	bne.n	8016f3e <_strtoul_l.constprop.0+0x3e>
 8016f2e:	7828      	ldrb	r0, [r5, #0]
 8016f30:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8016f34:	2858      	cmp	r0, #88	; 0x58
 8016f36:	d149      	bne.n	8016fcc <_strtoul_l.constprop.0+0xcc>
 8016f38:	786c      	ldrb	r4, [r5, #1]
 8016f3a:	2310      	movs	r3, #16
 8016f3c:	3502      	adds	r5, #2
 8016f3e:	f04f 38ff 	mov.w	r8, #4294967295
 8016f42:	2700      	movs	r7, #0
 8016f44:	fbb8 f8f3 	udiv	r8, r8, r3
 8016f48:	fb03 f908 	mul.w	r9, r3, r8
 8016f4c:	ea6f 0909 	mvn.w	r9, r9
 8016f50:	4638      	mov	r0, r7
 8016f52:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8016f56:	f1bc 0f09 	cmp.w	ip, #9
 8016f5a:	d814      	bhi.n	8016f86 <_strtoul_l.constprop.0+0x86>
 8016f5c:	4664      	mov	r4, ip
 8016f5e:	42a3      	cmp	r3, r4
 8016f60:	dd22      	ble.n	8016fa8 <_strtoul_l.constprop.0+0xa8>
 8016f62:	2f00      	cmp	r7, #0
 8016f64:	db1d      	blt.n	8016fa2 <_strtoul_l.constprop.0+0xa2>
 8016f66:	4580      	cmp	r8, r0
 8016f68:	d31b      	bcc.n	8016fa2 <_strtoul_l.constprop.0+0xa2>
 8016f6a:	d101      	bne.n	8016f70 <_strtoul_l.constprop.0+0x70>
 8016f6c:	45a1      	cmp	r9, r4
 8016f6e:	db18      	blt.n	8016fa2 <_strtoul_l.constprop.0+0xa2>
 8016f70:	fb00 4003 	mla	r0, r0, r3, r4
 8016f74:	2701      	movs	r7, #1
 8016f76:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016f7a:	e7ea      	b.n	8016f52 <_strtoul_l.constprop.0+0x52>
 8016f7c:	2c2b      	cmp	r4, #43	; 0x2b
 8016f7e:	bf04      	itt	eq
 8016f80:	782c      	ldrbeq	r4, [r5, #0]
 8016f82:	1c85      	addeq	r5, r0, #2
 8016f84:	e7cd      	b.n	8016f22 <_strtoul_l.constprop.0+0x22>
 8016f86:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8016f8a:	f1bc 0f19 	cmp.w	ip, #25
 8016f8e:	d801      	bhi.n	8016f94 <_strtoul_l.constprop.0+0x94>
 8016f90:	3c37      	subs	r4, #55	; 0x37
 8016f92:	e7e4      	b.n	8016f5e <_strtoul_l.constprop.0+0x5e>
 8016f94:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8016f98:	f1bc 0f19 	cmp.w	ip, #25
 8016f9c:	d804      	bhi.n	8016fa8 <_strtoul_l.constprop.0+0xa8>
 8016f9e:	3c57      	subs	r4, #87	; 0x57
 8016fa0:	e7dd      	b.n	8016f5e <_strtoul_l.constprop.0+0x5e>
 8016fa2:	f04f 37ff 	mov.w	r7, #4294967295
 8016fa6:	e7e6      	b.n	8016f76 <_strtoul_l.constprop.0+0x76>
 8016fa8:	2f00      	cmp	r7, #0
 8016faa:	da07      	bge.n	8016fbc <_strtoul_l.constprop.0+0xbc>
 8016fac:	2322      	movs	r3, #34	; 0x22
 8016fae:	f8ce 3000 	str.w	r3, [lr]
 8016fb2:	f04f 30ff 	mov.w	r0, #4294967295
 8016fb6:	b932      	cbnz	r2, 8016fc6 <_strtoul_l.constprop.0+0xc6>
 8016fb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016fbc:	b106      	cbz	r6, 8016fc0 <_strtoul_l.constprop.0+0xc0>
 8016fbe:	4240      	negs	r0, r0
 8016fc0:	2a00      	cmp	r2, #0
 8016fc2:	d0f9      	beq.n	8016fb8 <_strtoul_l.constprop.0+0xb8>
 8016fc4:	b107      	cbz	r7, 8016fc8 <_strtoul_l.constprop.0+0xc8>
 8016fc6:	1e69      	subs	r1, r5, #1
 8016fc8:	6011      	str	r1, [r2, #0]
 8016fca:	e7f5      	b.n	8016fb8 <_strtoul_l.constprop.0+0xb8>
 8016fcc:	2430      	movs	r4, #48	; 0x30
 8016fce:	2b00      	cmp	r3, #0
 8016fd0:	d1b5      	bne.n	8016f3e <_strtoul_l.constprop.0+0x3e>
 8016fd2:	2308      	movs	r3, #8
 8016fd4:	e7b3      	b.n	8016f3e <_strtoul_l.constprop.0+0x3e>
 8016fd6:	2c30      	cmp	r4, #48	; 0x30
 8016fd8:	d0a9      	beq.n	8016f2e <_strtoul_l.constprop.0+0x2e>
 8016fda:	230a      	movs	r3, #10
 8016fdc:	e7af      	b.n	8016f3e <_strtoul_l.constprop.0+0x3e>
 8016fde:	bf00      	nop
 8016fe0:	0805d711 	.word	0x0805d711

08016fe4 <_strtoul_r>:
 8016fe4:	f7ff bf8c 	b.w	8016f00 <_strtoul_l.constprop.0>

08016fe8 <__submore>:
 8016fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016fec:	460c      	mov	r4, r1
 8016fee:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8016ff0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016ff4:	4299      	cmp	r1, r3
 8016ff6:	d11d      	bne.n	8017034 <__submore+0x4c>
 8016ff8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8016ffc:	f7fb fb22 	bl	8012644 <_malloc_r>
 8017000:	b918      	cbnz	r0, 801700a <__submore+0x22>
 8017002:	f04f 30ff 	mov.w	r0, #4294967295
 8017006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801700a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801700e:	63a3      	str	r3, [r4, #56]	; 0x38
 8017010:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8017014:	6360      	str	r0, [r4, #52]	; 0x34
 8017016:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801701a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801701e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8017022:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8017026:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801702a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801702e:	6020      	str	r0, [r4, #0]
 8017030:	2000      	movs	r0, #0
 8017032:	e7e8      	b.n	8017006 <__submore+0x1e>
 8017034:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8017036:	0077      	lsls	r7, r6, #1
 8017038:	463a      	mov	r2, r7
 801703a:	f7ff f8f0 	bl	801621e <_realloc_r>
 801703e:	4605      	mov	r5, r0
 8017040:	2800      	cmp	r0, #0
 8017042:	d0de      	beq.n	8017002 <__submore+0x1a>
 8017044:	eb00 0806 	add.w	r8, r0, r6
 8017048:	4601      	mov	r1, r0
 801704a:	4632      	mov	r2, r6
 801704c:	4640      	mov	r0, r8
 801704e:	f7fb fa77 	bl	8012540 <memcpy>
 8017052:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8017056:	f8c4 8000 	str.w	r8, [r4]
 801705a:	e7e9      	b.n	8017030 <__submore+0x48>

0801705c <__swbuf_r>:
 801705c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801705e:	460e      	mov	r6, r1
 8017060:	4614      	mov	r4, r2
 8017062:	4605      	mov	r5, r0
 8017064:	b118      	cbz	r0, 801706e <__swbuf_r+0x12>
 8017066:	6983      	ldr	r3, [r0, #24]
 8017068:	b90b      	cbnz	r3, 801706e <__swbuf_r+0x12>
 801706a:	f000 f9e7 	bl	801743c <__sinit>
 801706e:	4b21      	ldr	r3, [pc, #132]	; (80170f4 <__swbuf_r+0x98>)
 8017070:	429c      	cmp	r4, r3
 8017072:	d12b      	bne.n	80170cc <__swbuf_r+0x70>
 8017074:	686c      	ldr	r4, [r5, #4]
 8017076:	69a3      	ldr	r3, [r4, #24]
 8017078:	60a3      	str	r3, [r4, #8]
 801707a:	89a3      	ldrh	r3, [r4, #12]
 801707c:	071a      	lsls	r2, r3, #28
 801707e:	d52f      	bpl.n	80170e0 <__swbuf_r+0x84>
 8017080:	6923      	ldr	r3, [r4, #16]
 8017082:	b36b      	cbz	r3, 80170e0 <__swbuf_r+0x84>
 8017084:	6923      	ldr	r3, [r4, #16]
 8017086:	6820      	ldr	r0, [r4, #0]
 8017088:	1ac0      	subs	r0, r0, r3
 801708a:	6963      	ldr	r3, [r4, #20]
 801708c:	b2f6      	uxtb	r6, r6
 801708e:	4283      	cmp	r3, r0
 8017090:	4637      	mov	r7, r6
 8017092:	dc04      	bgt.n	801709e <__swbuf_r+0x42>
 8017094:	4621      	mov	r1, r4
 8017096:	4628      	mov	r0, r5
 8017098:	f000 f93c 	bl	8017314 <_fflush_r>
 801709c:	bb30      	cbnz	r0, 80170ec <__swbuf_r+0x90>
 801709e:	68a3      	ldr	r3, [r4, #8]
 80170a0:	3b01      	subs	r3, #1
 80170a2:	60a3      	str	r3, [r4, #8]
 80170a4:	6823      	ldr	r3, [r4, #0]
 80170a6:	1c5a      	adds	r2, r3, #1
 80170a8:	6022      	str	r2, [r4, #0]
 80170aa:	701e      	strb	r6, [r3, #0]
 80170ac:	6963      	ldr	r3, [r4, #20]
 80170ae:	3001      	adds	r0, #1
 80170b0:	4283      	cmp	r3, r0
 80170b2:	d004      	beq.n	80170be <__swbuf_r+0x62>
 80170b4:	89a3      	ldrh	r3, [r4, #12]
 80170b6:	07db      	lsls	r3, r3, #31
 80170b8:	d506      	bpl.n	80170c8 <__swbuf_r+0x6c>
 80170ba:	2e0a      	cmp	r6, #10
 80170bc:	d104      	bne.n	80170c8 <__swbuf_r+0x6c>
 80170be:	4621      	mov	r1, r4
 80170c0:	4628      	mov	r0, r5
 80170c2:	f000 f927 	bl	8017314 <_fflush_r>
 80170c6:	b988      	cbnz	r0, 80170ec <__swbuf_r+0x90>
 80170c8:	4638      	mov	r0, r7
 80170ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80170cc:	4b0a      	ldr	r3, [pc, #40]	; (80170f8 <__swbuf_r+0x9c>)
 80170ce:	429c      	cmp	r4, r3
 80170d0:	d101      	bne.n	80170d6 <__swbuf_r+0x7a>
 80170d2:	68ac      	ldr	r4, [r5, #8]
 80170d4:	e7cf      	b.n	8017076 <__swbuf_r+0x1a>
 80170d6:	4b09      	ldr	r3, [pc, #36]	; (80170fc <__swbuf_r+0xa0>)
 80170d8:	429c      	cmp	r4, r3
 80170da:	bf08      	it	eq
 80170dc:	68ec      	ldreq	r4, [r5, #12]
 80170de:	e7ca      	b.n	8017076 <__swbuf_r+0x1a>
 80170e0:	4621      	mov	r1, r4
 80170e2:	4628      	mov	r0, r5
 80170e4:	f000 f81a 	bl	801711c <__swsetup_r>
 80170e8:	2800      	cmp	r0, #0
 80170ea:	d0cb      	beq.n	8017084 <__swbuf_r+0x28>
 80170ec:	f04f 37ff 	mov.w	r7, #4294967295
 80170f0:	e7ea      	b.n	80170c8 <__swbuf_r+0x6c>
 80170f2:	bf00      	nop
 80170f4:	0805daa8 	.word	0x0805daa8
 80170f8:	0805dac8 	.word	0x0805dac8
 80170fc:	0805da88 	.word	0x0805da88

08017100 <__ascii_wctomb>:
 8017100:	b149      	cbz	r1, 8017116 <__ascii_wctomb+0x16>
 8017102:	2aff      	cmp	r2, #255	; 0xff
 8017104:	bf85      	ittet	hi
 8017106:	238a      	movhi	r3, #138	; 0x8a
 8017108:	6003      	strhi	r3, [r0, #0]
 801710a:	700a      	strbls	r2, [r1, #0]
 801710c:	f04f 30ff 	movhi.w	r0, #4294967295
 8017110:	bf98      	it	ls
 8017112:	2001      	movls	r0, #1
 8017114:	4770      	bx	lr
 8017116:	4608      	mov	r0, r1
 8017118:	4770      	bx	lr
	...

0801711c <__swsetup_r>:
 801711c:	4b32      	ldr	r3, [pc, #200]	; (80171e8 <__swsetup_r+0xcc>)
 801711e:	b570      	push	{r4, r5, r6, lr}
 8017120:	681d      	ldr	r5, [r3, #0]
 8017122:	4606      	mov	r6, r0
 8017124:	460c      	mov	r4, r1
 8017126:	b125      	cbz	r5, 8017132 <__swsetup_r+0x16>
 8017128:	69ab      	ldr	r3, [r5, #24]
 801712a:	b913      	cbnz	r3, 8017132 <__swsetup_r+0x16>
 801712c:	4628      	mov	r0, r5
 801712e:	f000 f985 	bl	801743c <__sinit>
 8017132:	4b2e      	ldr	r3, [pc, #184]	; (80171ec <__swsetup_r+0xd0>)
 8017134:	429c      	cmp	r4, r3
 8017136:	d10f      	bne.n	8017158 <__swsetup_r+0x3c>
 8017138:	686c      	ldr	r4, [r5, #4]
 801713a:	89a3      	ldrh	r3, [r4, #12]
 801713c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017140:	0719      	lsls	r1, r3, #28
 8017142:	d42c      	bmi.n	801719e <__swsetup_r+0x82>
 8017144:	06dd      	lsls	r5, r3, #27
 8017146:	d411      	bmi.n	801716c <__swsetup_r+0x50>
 8017148:	2309      	movs	r3, #9
 801714a:	6033      	str	r3, [r6, #0]
 801714c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8017150:	81a3      	strh	r3, [r4, #12]
 8017152:	f04f 30ff 	mov.w	r0, #4294967295
 8017156:	e03e      	b.n	80171d6 <__swsetup_r+0xba>
 8017158:	4b25      	ldr	r3, [pc, #148]	; (80171f0 <__swsetup_r+0xd4>)
 801715a:	429c      	cmp	r4, r3
 801715c:	d101      	bne.n	8017162 <__swsetup_r+0x46>
 801715e:	68ac      	ldr	r4, [r5, #8]
 8017160:	e7eb      	b.n	801713a <__swsetup_r+0x1e>
 8017162:	4b24      	ldr	r3, [pc, #144]	; (80171f4 <__swsetup_r+0xd8>)
 8017164:	429c      	cmp	r4, r3
 8017166:	bf08      	it	eq
 8017168:	68ec      	ldreq	r4, [r5, #12]
 801716a:	e7e6      	b.n	801713a <__swsetup_r+0x1e>
 801716c:	0758      	lsls	r0, r3, #29
 801716e:	d512      	bpl.n	8017196 <__swsetup_r+0x7a>
 8017170:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017172:	b141      	cbz	r1, 8017186 <__swsetup_r+0x6a>
 8017174:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017178:	4299      	cmp	r1, r3
 801717a:	d002      	beq.n	8017182 <__swsetup_r+0x66>
 801717c:	4630      	mov	r0, r6
 801717e:	f7fb f9f5 	bl	801256c <_free_r>
 8017182:	2300      	movs	r3, #0
 8017184:	6363      	str	r3, [r4, #52]	; 0x34
 8017186:	89a3      	ldrh	r3, [r4, #12]
 8017188:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801718c:	81a3      	strh	r3, [r4, #12]
 801718e:	2300      	movs	r3, #0
 8017190:	6063      	str	r3, [r4, #4]
 8017192:	6923      	ldr	r3, [r4, #16]
 8017194:	6023      	str	r3, [r4, #0]
 8017196:	89a3      	ldrh	r3, [r4, #12]
 8017198:	f043 0308 	orr.w	r3, r3, #8
 801719c:	81a3      	strh	r3, [r4, #12]
 801719e:	6923      	ldr	r3, [r4, #16]
 80171a0:	b94b      	cbnz	r3, 80171b6 <__swsetup_r+0x9a>
 80171a2:	89a3      	ldrh	r3, [r4, #12]
 80171a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80171a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80171ac:	d003      	beq.n	80171b6 <__swsetup_r+0x9a>
 80171ae:	4621      	mov	r1, r4
 80171b0:	4630      	mov	r0, r6
 80171b2:	f000 fa09 	bl	80175c8 <__smakebuf_r>
 80171b6:	89a0      	ldrh	r0, [r4, #12]
 80171b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80171bc:	f010 0301 	ands.w	r3, r0, #1
 80171c0:	d00a      	beq.n	80171d8 <__swsetup_r+0xbc>
 80171c2:	2300      	movs	r3, #0
 80171c4:	60a3      	str	r3, [r4, #8]
 80171c6:	6963      	ldr	r3, [r4, #20]
 80171c8:	425b      	negs	r3, r3
 80171ca:	61a3      	str	r3, [r4, #24]
 80171cc:	6923      	ldr	r3, [r4, #16]
 80171ce:	b943      	cbnz	r3, 80171e2 <__swsetup_r+0xc6>
 80171d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80171d4:	d1ba      	bne.n	801714c <__swsetup_r+0x30>
 80171d6:	bd70      	pop	{r4, r5, r6, pc}
 80171d8:	0781      	lsls	r1, r0, #30
 80171da:	bf58      	it	pl
 80171dc:	6963      	ldrpl	r3, [r4, #20]
 80171de:	60a3      	str	r3, [r4, #8]
 80171e0:	e7f4      	b.n	80171cc <__swsetup_r+0xb0>
 80171e2:	2000      	movs	r0, #0
 80171e4:	e7f7      	b.n	80171d6 <__swsetup_r+0xba>
 80171e6:	bf00      	nop
 80171e8:	2000145c 	.word	0x2000145c
 80171ec:	0805daa8 	.word	0x0805daa8
 80171f0:	0805dac8 	.word	0x0805dac8
 80171f4:	0805da88 	.word	0x0805da88

080171f8 <abort>:
 80171f8:	b508      	push	{r3, lr}
 80171fa:	2006      	movs	r0, #6
 80171fc:	f000 fa6e 	bl	80176dc <raise>
 8017200:	2001      	movs	r0, #1
 8017202:	f001 fa2f 	bl	8018664 <_exit>
	...

08017208 <__sflush_r>:
 8017208:	898a      	ldrh	r2, [r1, #12]
 801720a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801720e:	4605      	mov	r5, r0
 8017210:	0710      	lsls	r0, r2, #28
 8017212:	460c      	mov	r4, r1
 8017214:	d458      	bmi.n	80172c8 <__sflush_r+0xc0>
 8017216:	684b      	ldr	r3, [r1, #4]
 8017218:	2b00      	cmp	r3, #0
 801721a:	dc05      	bgt.n	8017228 <__sflush_r+0x20>
 801721c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801721e:	2b00      	cmp	r3, #0
 8017220:	dc02      	bgt.n	8017228 <__sflush_r+0x20>
 8017222:	2000      	movs	r0, #0
 8017224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017228:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801722a:	2e00      	cmp	r6, #0
 801722c:	d0f9      	beq.n	8017222 <__sflush_r+0x1a>
 801722e:	2300      	movs	r3, #0
 8017230:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017234:	682f      	ldr	r7, [r5, #0]
 8017236:	602b      	str	r3, [r5, #0]
 8017238:	d032      	beq.n	80172a0 <__sflush_r+0x98>
 801723a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801723c:	89a3      	ldrh	r3, [r4, #12]
 801723e:	075a      	lsls	r2, r3, #29
 8017240:	d505      	bpl.n	801724e <__sflush_r+0x46>
 8017242:	6863      	ldr	r3, [r4, #4]
 8017244:	1ac0      	subs	r0, r0, r3
 8017246:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017248:	b10b      	cbz	r3, 801724e <__sflush_r+0x46>
 801724a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801724c:	1ac0      	subs	r0, r0, r3
 801724e:	2300      	movs	r3, #0
 8017250:	4602      	mov	r2, r0
 8017252:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017254:	6a21      	ldr	r1, [r4, #32]
 8017256:	4628      	mov	r0, r5
 8017258:	47b0      	blx	r6
 801725a:	1c43      	adds	r3, r0, #1
 801725c:	89a3      	ldrh	r3, [r4, #12]
 801725e:	d106      	bne.n	801726e <__sflush_r+0x66>
 8017260:	6829      	ldr	r1, [r5, #0]
 8017262:	291d      	cmp	r1, #29
 8017264:	d82c      	bhi.n	80172c0 <__sflush_r+0xb8>
 8017266:	4a2a      	ldr	r2, [pc, #168]	; (8017310 <__sflush_r+0x108>)
 8017268:	40ca      	lsrs	r2, r1
 801726a:	07d6      	lsls	r6, r2, #31
 801726c:	d528      	bpl.n	80172c0 <__sflush_r+0xb8>
 801726e:	2200      	movs	r2, #0
 8017270:	6062      	str	r2, [r4, #4]
 8017272:	04d9      	lsls	r1, r3, #19
 8017274:	6922      	ldr	r2, [r4, #16]
 8017276:	6022      	str	r2, [r4, #0]
 8017278:	d504      	bpl.n	8017284 <__sflush_r+0x7c>
 801727a:	1c42      	adds	r2, r0, #1
 801727c:	d101      	bne.n	8017282 <__sflush_r+0x7a>
 801727e:	682b      	ldr	r3, [r5, #0]
 8017280:	b903      	cbnz	r3, 8017284 <__sflush_r+0x7c>
 8017282:	6560      	str	r0, [r4, #84]	; 0x54
 8017284:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017286:	602f      	str	r7, [r5, #0]
 8017288:	2900      	cmp	r1, #0
 801728a:	d0ca      	beq.n	8017222 <__sflush_r+0x1a>
 801728c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017290:	4299      	cmp	r1, r3
 8017292:	d002      	beq.n	801729a <__sflush_r+0x92>
 8017294:	4628      	mov	r0, r5
 8017296:	f7fb f969 	bl	801256c <_free_r>
 801729a:	2000      	movs	r0, #0
 801729c:	6360      	str	r0, [r4, #52]	; 0x34
 801729e:	e7c1      	b.n	8017224 <__sflush_r+0x1c>
 80172a0:	6a21      	ldr	r1, [r4, #32]
 80172a2:	2301      	movs	r3, #1
 80172a4:	4628      	mov	r0, r5
 80172a6:	47b0      	blx	r6
 80172a8:	1c41      	adds	r1, r0, #1
 80172aa:	d1c7      	bne.n	801723c <__sflush_r+0x34>
 80172ac:	682b      	ldr	r3, [r5, #0]
 80172ae:	2b00      	cmp	r3, #0
 80172b0:	d0c4      	beq.n	801723c <__sflush_r+0x34>
 80172b2:	2b1d      	cmp	r3, #29
 80172b4:	d001      	beq.n	80172ba <__sflush_r+0xb2>
 80172b6:	2b16      	cmp	r3, #22
 80172b8:	d101      	bne.n	80172be <__sflush_r+0xb6>
 80172ba:	602f      	str	r7, [r5, #0]
 80172bc:	e7b1      	b.n	8017222 <__sflush_r+0x1a>
 80172be:	89a3      	ldrh	r3, [r4, #12]
 80172c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80172c4:	81a3      	strh	r3, [r4, #12]
 80172c6:	e7ad      	b.n	8017224 <__sflush_r+0x1c>
 80172c8:	690f      	ldr	r7, [r1, #16]
 80172ca:	2f00      	cmp	r7, #0
 80172cc:	d0a9      	beq.n	8017222 <__sflush_r+0x1a>
 80172ce:	0793      	lsls	r3, r2, #30
 80172d0:	680e      	ldr	r6, [r1, #0]
 80172d2:	bf08      	it	eq
 80172d4:	694b      	ldreq	r3, [r1, #20]
 80172d6:	600f      	str	r7, [r1, #0]
 80172d8:	bf18      	it	ne
 80172da:	2300      	movne	r3, #0
 80172dc:	eba6 0807 	sub.w	r8, r6, r7
 80172e0:	608b      	str	r3, [r1, #8]
 80172e2:	f1b8 0f00 	cmp.w	r8, #0
 80172e6:	dd9c      	ble.n	8017222 <__sflush_r+0x1a>
 80172e8:	6a21      	ldr	r1, [r4, #32]
 80172ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80172ec:	4643      	mov	r3, r8
 80172ee:	463a      	mov	r2, r7
 80172f0:	4628      	mov	r0, r5
 80172f2:	47b0      	blx	r6
 80172f4:	2800      	cmp	r0, #0
 80172f6:	dc06      	bgt.n	8017306 <__sflush_r+0xfe>
 80172f8:	89a3      	ldrh	r3, [r4, #12]
 80172fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80172fe:	81a3      	strh	r3, [r4, #12]
 8017300:	f04f 30ff 	mov.w	r0, #4294967295
 8017304:	e78e      	b.n	8017224 <__sflush_r+0x1c>
 8017306:	4407      	add	r7, r0
 8017308:	eba8 0800 	sub.w	r8, r8, r0
 801730c:	e7e9      	b.n	80172e2 <__sflush_r+0xda>
 801730e:	bf00      	nop
 8017310:	20400001 	.word	0x20400001

08017314 <_fflush_r>:
 8017314:	b538      	push	{r3, r4, r5, lr}
 8017316:	690b      	ldr	r3, [r1, #16]
 8017318:	4605      	mov	r5, r0
 801731a:	460c      	mov	r4, r1
 801731c:	b913      	cbnz	r3, 8017324 <_fflush_r+0x10>
 801731e:	2500      	movs	r5, #0
 8017320:	4628      	mov	r0, r5
 8017322:	bd38      	pop	{r3, r4, r5, pc}
 8017324:	b118      	cbz	r0, 801732e <_fflush_r+0x1a>
 8017326:	6983      	ldr	r3, [r0, #24]
 8017328:	b90b      	cbnz	r3, 801732e <_fflush_r+0x1a>
 801732a:	f000 f887 	bl	801743c <__sinit>
 801732e:	4b14      	ldr	r3, [pc, #80]	; (8017380 <_fflush_r+0x6c>)
 8017330:	429c      	cmp	r4, r3
 8017332:	d11b      	bne.n	801736c <_fflush_r+0x58>
 8017334:	686c      	ldr	r4, [r5, #4]
 8017336:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801733a:	2b00      	cmp	r3, #0
 801733c:	d0ef      	beq.n	801731e <_fflush_r+0xa>
 801733e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017340:	07d0      	lsls	r0, r2, #31
 8017342:	d404      	bmi.n	801734e <_fflush_r+0x3a>
 8017344:	0599      	lsls	r1, r3, #22
 8017346:	d402      	bmi.n	801734e <_fflush_r+0x3a>
 8017348:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801734a:	f000 f915 	bl	8017578 <__retarget_lock_acquire_recursive>
 801734e:	4628      	mov	r0, r5
 8017350:	4621      	mov	r1, r4
 8017352:	f7ff ff59 	bl	8017208 <__sflush_r>
 8017356:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017358:	07da      	lsls	r2, r3, #31
 801735a:	4605      	mov	r5, r0
 801735c:	d4e0      	bmi.n	8017320 <_fflush_r+0xc>
 801735e:	89a3      	ldrh	r3, [r4, #12]
 8017360:	059b      	lsls	r3, r3, #22
 8017362:	d4dd      	bmi.n	8017320 <_fflush_r+0xc>
 8017364:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017366:	f000 f908 	bl	801757a <__retarget_lock_release_recursive>
 801736a:	e7d9      	b.n	8017320 <_fflush_r+0xc>
 801736c:	4b05      	ldr	r3, [pc, #20]	; (8017384 <_fflush_r+0x70>)
 801736e:	429c      	cmp	r4, r3
 8017370:	d101      	bne.n	8017376 <_fflush_r+0x62>
 8017372:	68ac      	ldr	r4, [r5, #8]
 8017374:	e7df      	b.n	8017336 <_fflush_r+0x22>
 8017376:	4b04      	ldr	r3, [pc, #16]	; (8017388 <_fflush_r+0x74>)
 8017378:	429c      	cmp	r4, r3
 801737a:	bf08      	it	eq
 801737c:	68ec      	ldreq	r4, [r5, #12]
 801737e:	e7da      	b.n	8017336 <_fflush_r+0x22>
 8017380:	0805daa8 	.word	0x0805daa8
 8017384:	0805dac8 	.word	0x0805dac8
 8017388:	0805da88 	.word	0x0805da88

0801738c <std>:
 801738c:	2300      	movs	r3, #0
 801738e:	b510      	push	{r4, lr}
 8017390:	4604      	mov	r4, r0
 8017392:	e9c0 3300 	strd	r3, r3, [r0]
 8017396:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801739a:	6083      	str	r3, [r0, #8]
 801739c:	8181      	strh	r1, [r0, #12]
 801739e:	6643      	str	r3, [r0, #100]	; 0x64
 80173a0:	81c2      	strh	r2, [r0, #14]
 80173a2:	6183      	str	r3, [r0, #24]
 80173a4:	4619      	mov	r1, r3
 80173a6:	2208      	movs	r2, #8
 80173a8:	305c      	adds	r0, #92	; 0x5c
 80173aa:	f7fb f8d7 	bl	801255c <memset>
 80173ae:	4b05      	ldr	r3, [pc, #20]	; (80173c4 <std+0x38>)
 80173b0:	6263      	str	r3, [r4, #36]	; 0x24
 80173b2:	4b05      	ldr	r3, [pc, #20]	; (80173c8 <std+0x3c>)
 80173b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80173b6:	4b05      	ldr	r3, [pc, #20]	; (80173cc <std+0x40>)
 80173b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80173ba:	4b05      	ldr	r3, [pc, #20]	; (80173d0 <std+0x44>)
 80173bc:	6224      	str	r4, [r4, #32]
 80173be:	6323      	str	r3, [r4, #48]	; 0x30
 80173c0:	bd10      	pop	{r4, pc}
 80173c2:	bf00      	nop
 80173c4:	080134e5 	.word	0x080134e5
 80173c8:	0801350b 	.word	0x0801350b
 80173cc:	08013543 	.word	0x08013543
 80173d0:	08013567 	.word	0x08013567

080173d4 <_cleanup_r>:
 80173d4:	4901      	ldr	r1, [pc, #4]	; (80173dc <_cleanup_r+0x8>)
 80173d6:	f000 b8af 	b.w	8017538 <_fwalk_reent>
 80173da:	bf00      	nop
 80173dc:	08017315 	.word	0x08017315

080173e0 <__sfmoreglue>:
 80173e0:	b570      	push	{r4, r5, r6, lr}
 80173e2:	2268      	movs	r2, #104	; 0x68
 80173e4:	1e4d      	subs	r5, r1, #1
 80173e6:	4355      	muls	r5, r2
 80173e8:	460e      	mov	r6, r1
 80173ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80173ee:	f7fb f929 	bl	8012644 <_malloc_r>
 80173f2:	4604      	mov	r4, r0
 80173f4:	b140      	cbz	r0, 8017408 <__sfmoreglue+0x28>
 80173f6:	2100      	movs	r1, #0
 80173f8:	e9c0 1600 	strd	r1, r6, [r0]
 80173fc:	300c      	adds	r0, #12
 80173fe:	60a0      	str	r0, [r4, #8]
 8017400:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017404:	f7fb f8aa 	bl	801255c <memset>
 8017408:	4620      	mov	r0, r4
 801740a:	bd70      	pop	{r4, r5, r6, pc}

0801740c <__sfp_lock_acquire>:
 801740c:	4801      	ldr	r0, [pc, #4]	; (8017414 <__sfp_lock_acquire+0x8>)
 801740e:	f000 b8b3 	b.w	8017578 <__retarget_lock_acquire_recursive>
 8017412:	bf00      	nop
 8017414:	2000c671 	.word	0x2000c671

08017418 <__sfp_lock_release>:
 8017418:	4801      	ldr	r0, [pc, #4]	; (8017420 <__sfp_lock_release+0x8>)
 801741a:	f000 b8ae 	b.w	801757a <__retarget_lock_release_recursive>
 801741e:	bf00      	nop
 8017420:	2000c671 	.word	0x2000c671

08017424 <__sinit_lock_acquire>:
 8017424:	4801      	ldr	r0, [pc, #4]	; (801742c <__sinit_lock_acquire+0x8>)
 8017426:	f000 b8a7 	b.w	8017578 <__retarget_lock_acquire_recursive>
 801742a:	bf00      	nop
 801742c:	2000c672 	.word	0x2000c672

08017430 <__sinit_lock_release>:
 8017430:	4801      	ldr	r0, [pc, #4]	; (8017438 <__sinit_lock_release+0x8>)
 8017432:	f000 b8a2 	b.w	801757a <__retarget_lock_release_recursive>
 8017436:	bf00      	nop
 8017438:	2000c672 	.word	0x2000c672

0801743c <__sinit>:
 801743c:	b510      	push	{r4, lr}
 801743e:	4604      	mov	r4, r0
 8017440:	f7ff fff0 	bl	8017424 <__sinit_lock_acquire>
 8017444:	69a3      	ldr	r3, [r4, #24]
 8017446:	b11b      	cbz	r3, 8017450 <__sinit+0x14>
 8017448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801744c:	f7ff bff0 	b.w	8017430 <__sinit_lock_release>
 8017450:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8017454:	6523      	str	r3, [r4, #80]	; 0x50
 8017456:	4b13      	ldr	r3, [pc, #76]	; (80174a4 <__sinit+0x68>)
 8017458:	4a13      	ldr	r2, [pc, #76]	; (80174a8 <__sinit+0x6c>)
 801745a:	681b      	ldr	r3, [r3, #0]
 801745c:	62a2      	str	r2, [r4, #40]	; 0x28
 801745e:	42a3      	cmp	r3, r4
 8017460:	bf04      	itt	eq
 8017462:	2301      	moveq	r3, #1
 8017464:	61a3      	streq	r3, [r4, #24]
 8017466:	4620      	mov	r0, r4
 8017468:	f000 f820 	bl	80174ac <__sfp>
 801746c:	6060      	str	r0, [r4, #4]
 801746e:	4620      	mov	r0, r4
 8017470:	f000 f81c 	bl	80174ac <__sfp>
 8017474:	60a0      	str	r0, [r4, #8]
 8017476:	4620      	mov	r0, r4
 8017478:	f000 f818 	bl	80174ac <__sfp>
 801747c:	2200      	movs	r2, #0
 801747e:	60e0      	str	r0, [r4, #12]
 8017480:	2104      	movs	r1, #4
 8017482:	6860      	ldr	r0, [r4, #4]
 8017484:	f7ff ff82 	bl	801738c <std>
 8017488:	68a0      	ldr	r0, [r4, #8]
 801748a:	2201      	movs	r2, #1
 801748c:	2109      	movs	r1, #9
 801748e:	f7ff ff7d 	bl	801738c <std>
 8017492:	68e0      	ldr	r0, [r4, #12]
 8017494:	2202      	movs	r2, #2
 8017496:	2112      	movs	r1, #18
 8017498:	f7ff ff78 	bl	801738c <std>
 801749c:	2301      	movs	r3, #1
 801749e:	61a3      	str	r3, [r4, #24]
 80174a0:	e7d2      	b.n	8017448 <__sinit+0xc>
 80174a2:	bf00      	nop
 80174a4:	0805d5d0 	.word	0x0805d5d0
 80174a8:	080173d5 	.word	0x080173d5

080174ac <__sfp>:
 80174ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80174ae:	4607      	mov	r7, r0
 80174b0:	f7ff ffac 	bl	801740c <__sfp_lock_acquire>
 80174b4:	4b1e      	ldr	r3, [pc, #120]	; (8017530 <__sfp+0x84>)
 80174b6:	681e      	ldr	r6, [r3, #0]
 80174b8:	69b3      	ldr	r3, [r6, #24]
 80174ba:	b913      	cbnz	r3, 80174c2 <__sfp+0x16>
 80174bc:	4630      	mov	r0, r6
 80174be:	f7ff ffbd 	bl	801743c <__sinit>
 80174c2:	3648      	adds	r6, #72	; 0x48
 80174c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80174c8:	3b01      	subs	r3, #1
 80174ca:	d503      	bpl.n	80174d4 <__sfp+0x28>
 80174cc:	6833      	ldr	r3, [r6, #0]
 80174ce:	b30b      	cbz	r3, 8017514 <__sfp+0x68>
 80174d0:	6836      	ldr	r6, [r6, #0]
 80174d2:	e7f7      	b.n	80174c4 <__sfp+0x18>
 80174d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80174d8:	b9d5      	cbnz	r5, 8017510 <__sfp+0x64>
 80174da:	4b16      	ldr	r3, [pc, #88]	; (8017534 <__sfp+0x88>)
 80174dc:	60e3      	str	r3, [r4, #12]
 80174de:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80174e2:	6665      	str	r5, [r4, #100]	; 0x64
 80174e4:	f000 f847 	bl	8017576 <__retarget_lock_init_recursive>
 80174e8:	f7ff ff96 	bl	8017418 <__sfp_lock_release>
 80174ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80174f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80174f4:	6025      	str	r5, [r4, #0]
 80174f6:	61a5      	str	r5, [r4, #24]
 80174f8:	2208      	movs	r2, #8
 80174fa:	4629      	mov	r1, r5
 80174fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017500:	f7fb f82c 	bl	801255c <memset>
 8017504:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017508:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801750c:	4620      	mov	r0, r4
 801750e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017510:	3468      	adds	r4, #104	; 0x68
 8017512:	e7d9      	b.n	80174c8 <__sfp+0x1c>
 8017514:	2104      	movs	r1, #4
 8017516:	4638      	mov	r0, r7
 8017518:	f7ff ff62 	bl	80173e0 <__sfmoreglue>
 801751c:	4604      	mov	r4, r0
 801751e:	6030      	str	r0, [r6, #0]
 8017520:	2800      	cmp	r0, #0
 8017522:	d1d5      	bne.n	80174d0 <__sfp+0x24>
 8017524:	f7ff ff78 	bl	8017418 <__sfp_lock_release>
 8017528:	230c      	movs	r3, #12
 801752a:	603b      	str	r3, [r7, #0]
 801752c:	e7ee      	b.n	801750c <__sfp+0x60>
 801752e:	bf00      	nop
 8017530:	0805d5d0 	.word	0x0805d5d0
 8017534:	ffff0001 	.word	0xffff0001

08017538 <_fwalk_reent>:
 8017538:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801753c:	4606      	mov	r6, r0
 801753e:	4688      	mov	r8, r1
 8017540:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017544:	2700      	movs	r7, #0
 8017546:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801754a:	f1b9 0901 	subs.w	r9, r9, #1
 801754e:	d505      	bpl.n	801755c <_fwalk_reent+0x24>
 8017550:	6824      	ldr	r4, [r4, #0]
 8017552:	2c00      	cmp	r4, #0
 8017554:	d1f7      	bne.n	8017546 <_fwalk_reent+0xe>
 8017556:	4638      	mov	r0, r7
 8017558:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801755c:	89ab      	ldrh	r3, [r5, #12]
 801755e:	2b01      	cmp	r3, #1
 8017560:	d907      	bls.n	8017572 <_fwalk_reent+0x3a>
 8017562:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017566:	3301      	adds	r3, #1
 8017568:	d003      	beq.n	8017572 <_fwalk_reent+0x3a>
 801756a:	4629      	mov	r1, r5
 801756c:	4630      	mov	r0, r6
 801756e:	47c0      	blx	r8
 8017570:	4307      	orrs	r7, r0
 8017572:	3568      	adds	r5, #104	; 0x68
 8017574:	e7e9      	b.n	801754a <_fwalk_reent+0x12>

08017576 <__retarget_lock_init_recursive>:
 8017576:	4770      	bx	lr

08017578 <__retarget_lock_acquire_recursive>:
 8017578:	4770      	bx	lr

0801757a <__retarget_lock_release_recursive>:
 801757a:	4770      	bx	lr

0801757c <__swhatbuf_r>:
 801757c:	b570      	push	{r4, r5, r6, lr}
 801757e:	460e      	mov	r6, r1
 8017580:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017584:	2900      	cmp	r1, #0
 8017586:	b096      	sub	sp, #88	; 0x58
 8017588:	4614      	mov	r4, r2
 801758a:	461d      	mov	r5, r3
 801758c:	da08      	bge.n	80175a0 <__swhatbuf_r+0x24>
 801758e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8017592:	2200      	movs	r2, #0
 8017594:	602a      	str	r2, [r5, #0]
 8017596:	061a      	lsls	r2, r3, #24
 8017598:	d410      	bmi.n	80175bc <__swhatbuf_r+0x40>
 801759a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801759e:	e00e      	b.n	80175be <__swhatbuf_r+0x42>
 80175a0:	466a      	mov	r2, sp
 80175a2:	f000 f8b7 	bl	8017714 <_fstat_r>
 80175a6:	2800      	cmp	r0, #0
 80175a8:	dbf1      	blt.n	801758e <__swhatbuf_r+0x12>
 80175aa:	9a01      	ldr	r2, [sp, #4]
 80175ac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80175b0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80175b4:	425a      	negs	r2, r3
 80175b6:	415a      	adcs	r2, r3
 80175b8:	602a      	str	r2, [r5, #0]
 80175ba:	e7ee      	b.n	801759a <__swhatbuf_r+0x1e>
 80175bc:	2340      	movs	r3, #64	; 0x40
 80175be:	2000      	movs	r0, #0
 80175c0:	6023      	str	r3, [r4, #0]
 80175c2:	b016      	add	sp, #88	; 0x58
 80175c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080175c8 <__smakebuf_r>:
 80175c8:	898b      	ldrh	r3, [r1, #12]
 80175ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80175cc:	079d      	lsls	r5, r3, #30
 80175ce:	4606      	mov	r6, r0
 80175d0:	460c      	mov	r4, r1
 80175d2:	d507      	bpl.n	80175e4 <__smakebuf_r+0x1c>
 80175d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80175d8:	6023      	str	r3, [r4, #0]
 80175da:	6123      	str	r3, [r4, #16]
 80175dc:	2301      	movs	r3, #1
 80175de:	6163      	str	r3, [r4, #20]
 80175e0:	b002      	add	sp, #8
 80175e2:	bd70      	pop	{r4, r5, r6, pc}
 80175e4:	ab01      	add	r3, sp, #4
 80175e6:	466a      	mov	r2, sp
 80175e8:	f7ff ffc8 	bl	801757c <__swhatbuf_r>
 80175ec:	9900      	ldr	r1, [sp, #0]
 80175ee:	4605      	mov	r5, r0
 80175f0:	4630      	mov	r0, r6
 80175f2:	f7fb f827 	bl	8012644 <_malloc_r>
 80175f6:	b948      	cbnz	r0, 801760c <__smakebuf_r+0x44>
 80175f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80175fc:	059a      	lsls	r2, r3, #22
 80175fe:	d4ef      	bmi.n	80175e0 <__smakebuf_r+0x18>
 8017600:	f023 0303 	bic.w	r3, r3, #3
 8017604:	f043 0302 	orr.w	r3, r3, #2
 8017608:	81a3      	strh	r3, [r4, #12]
 801760a:	e7e3      	b.n	80175d4 <__smakebuf_r+0xc>
 801760c:	4b0d      	ldr	r3, [pc, #52]	; (8017644 <__smakebuf_r+0x7c>)
 801760e:	62b3      	str	r3, [r6, #40]	; 0x28
 8017610:	89a3      	ldrh	r3, [r4, #12]
 8017612:	6020      	str	r0, [r4, #0]
 8017614:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017618:	81a3      	strh	r3, [r4, #12]
 801761a:	9b00      	ldr	r3, [sp, #0]
 801761c:	6163      	str	r3, [r4, #20]
 801761e:	9b01      	ldr	r3, [sp, #4]
 8017620:	6120      	str	r0, [r4, #16]
 8017622:	b15b      	cbz	r3, 801763c <__smakebuf_r+0x74>
 8017624:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017628:	4630      	mov	r0, r6
 801762a:	f000 f885 	bl	8017738 <_isatty_r>
 801762e:	b128      	cbz	r0, 801763c <__smakebuf_r+0x74>
 8017630:	89a3      	ldrh	r3, [r4, #12]
 8017632:	f023 0303 	bic.w	r3, r3, #3
 8017636:	f043 0301 	orr.w	r3, r3, #1
 801763a:	81a3      	strh	r3, [r4, #12]
 801763c:	89a0      	ldrh	r0, [r4, #12]
 801763e:	4305      	orrs	r5, r0
 8017640:	81a5      	strh	r5, [r4, #12]
 8017642:	e7cd      	b.n	80175e0 <__smakebuf_r+0x18>
 8017644:	080173d5 	.word	0x080173d5

08017648 <memmove>:
 8017648:	4288      	cmp	r0, r1
 801764a:	b510      	push	{r4, lr}
 801764c:	eb01 0402 	add.w	r4, r1, r2
 8017650:	d902      	bls.n	8017658 <memmove+0x10>
 8017652:	4284      	cmp	r4, r0
 8017654:	4623      	mov	r3, r4
 8017656:	d807      	bhi.n	8017668 <memmove+0x20>
 8017658:	1e43      	subs	r3, r0, #1
 801765a:	42a1      	cmp	r1, r4
 801765c:	d008      	beq.n	8017670 <memmove+0x28>
 801765e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017662:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017666:	e7f8      	b.n	801765a <memmove+0x12>
 8017668:	4402      	add	r2, r0
 801766a:	4601      	mov	r1, r0
 801766c:	428a      	cmp	r2, r1
 801766e:	d100      	bne.n	8017672 <memmove+0x2a>
 8017670:	bd10      	pop	{r4, pc}
 8017672:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017676:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801767a:	e7f7      	b.n	801766c <memmove+0x24>

0801767c <_malloc_usable_size_r>:
 801767c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017680:	1f18      	subs	r0, r3, #4
 8017682:	2b00      	cmp	r3, #0
 8017684:	bfbc      	itt	lt
 8017686:	580b      	ldrlt	r3, [r1, r0]
 8017688:	18c0      	addlt	r0, r0, r3
 801768a:	4770      	bx	lr

0801768c <_raise_r>:
 801768c:	291f      	cmp	r1, #31
 801768e:	b538      	push	{r3, r4, r5, lr}
 8017690:	4604      	mov	r4, r0
 8017692:	460d      	mov	r5, r1
 8017694:	d904      	bls.n	80176a0 <_raise_r+0x14>
 8017696:	2316      	movs	r3, #22
 8017698:	6003      	str	r3, [r0, #0]
 801769a:	f04f 30ff 	mov.w	r0, #4294967295
 801769e:	bd38      	pop	{r3, r4, r5, pc}
 80176a0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80176a2:	b112      	cbz	r2, 80176aa <_raise_r+0x1e>
 80176a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80176a8:	b94b      	cbnz	r3, 80176be <_raise_r+0x32>
 80176aa:	4620      	mov	r0, r4
 80176ac:	f000 f830 	bl	8017710 <_getpid_r>
 80176b0:	462a      	mov	r2, r5
 80176b2:	4601      	mov	r1, r0
 80176b4:	4620      	mov	r0, r4
 80176b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80176ba:	f000 b817 	b.w	80176ec <_kill_r>
 80176be:	2b01      	cmp	r3, #1
 80176c0:	d00a      	beq.n	80176d8 <_raise_r+0x4c>
 80176c2:	1c59      	adds	r1, r3, #1
 80176c4:	d103      	bne.n	80176ce <_raise_r+0x42>
 80176c6:	2316      	movs	r3, #22
 80176c8:	6003      	str	r3, [r0, #0]
 80176ca:	2001      	movs	r0, #1
 80176cc:	e7e7      	b.n	801769e <_raise_r+0x12>
 80176ce:	2400      	movs	r4, #0
 80176d0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80176d4:	4628      	mov	r0, r5
 80176d6:	4798      	blx	r3
 80176d8:	2000      	movs	r0, #0
 80176da:	e7e0      	b.n	801769e <_raise_r+0x12>

080176dc <raise>:
 80176dc:	4b02      	ldr	r3, [pc, #8]	; (80176e8 <raise+0xc>)
 80176de:	4601      	mov	r1, r0
 80176e0:	6818      	ldr	r0, [r3, #0]
 80176e2:	f7ff bfd3 	b.w	801768c <_raise_r>
 80176e6:	bf00      	nop
 80176e8:	2000145c 	.word	0x2000145c

080176ec <_kill_r>:
 80176ec:	b538      	push	{r3, r4, r5, lr}
 80176ee:	4d07      	ldr	r5, [pc, #28]	; (801770c <_kill_r+0x20>)
 80176f0:	2300      	movs	r3, #0
 80176f2:	4604      	mov	r4, r0
 80176f4:	4608      	mov	r0, r1
 80176f6:	4611      	mov	r1, r2
 80176f8:	602b      	str	r3, [r5, #0]
 80176fa:	f000 ff93 	bl	8018624 <_kill>
 80176fe:	1c43      	adds	r3, r0, #1
 8017700:	d102      	bne.n	8017708 <_kill_r+0x1c>
 8017702:	682b      	ldr	r3, [r5, #0]
 8017704:	b103      	cbz	r3, 8017708 <_kill_r+0x1c>
 8017706:	6023      	str	r3, [r4, #0]
 8017708:	bd38      	pop	{r3, r4, r5, pc}
 801770a:	bf00      	nop
 801770c:	2000c66c 	.word	0x2000c66c

08017710 <_getpid_r>:
 8017710:	f000 bf78 	b.w	8018604 <_getpid>

08017714 <_fstat_r>:
 8017714:	b538      	push	{r3, r4, r5, lr}
 8017716:	4d07      	ldr	r5, [pc, #28]	; (8017734 <_fstat_r+0x20>)
 8017718:	2300      	movs	r3, #0
 801771a:	4604      	mov	r4, r0
 801771c:	4608      	mov	r0, r1
 801771e:	4611      	mov	r1, r2
 8017720:	602b      	str	r3, [r5, #0]
 8017722:	f000 ff67 	bl	80185f4 <_fstat>
 8017726:	1c43      	adds	r3, r0, #1
 8017728:	d102      	bne.n	8017730 <_fstat_r+0x1c>
 801772a:	682b      	ldr	r3, [r5, #0]
 801772c:	b103      	cbz	r3, 8017730 <_fstat_r+0x1c>
 801772e:	6023      	str	r3, [r4, #0]
 8017730:	bd38      	pop	{r3, r4, r5, pc}
 8017732:	bf00      	nop
 8017734:	2000c66c 	.word	0x2000c66c

08017738 <_isatty_r>:
 8017738:	b538      	push	{r3, r4, r5, lr}
 801773a:	4d06      	ldr	r5, [pc, #24]	; (8017754 <_isatty_r+0x1c>)
 801773c:	2300      	movs	r3, #0
 801773e:	4604      	mov	r4, r0
 8017740:	4608      	mov	r0, r1
 8017742:	602b      	str	r3, [r5, #0]
 8017744:	f000 ff66 	bl	8018614 <_isatty>
 8017748:	1c43      	adds	r3, r0, #1
 801774a:	d102      	bne.n	8017752 <_isatty_r+0x1a>
 801774c:	682b      	ldr	r3, [r5, #0]
 801774e:	b103      	cbz	r3, 8017752 <_isatty_r+0x1a>
 8017750:	6023      	str	r3, [r4, #0]
 8017752:	bd38      	pop	{r3, r4, r5, pc}
 8017754:	2000c66c 	.word	0x2000c66c

08017758 <pow>:
 8017758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801775a:	ed2d 8b02 	vpush	{d8}
 801775e:	eeb0 8a40 	vmov.f32	s16, s0
 8017762:	eef0 8a60 	vmov.f32	s17, s1
 8017766:	ec55 4b11 	vmov	r4, r5, d1
 801776a:	f000 f891 	bl	8017890 <__ieee754_pow>
 801776e:	4622      	mov	r2, r4
 8017770:	462b      	mov	r3, r5
 8017772:	4620      	mov	r0, r4
 8017774:	4629      	mov	r1, r5
 8017776:	ec57 6b10 	vmov	r6, r7, d0
 801777a:	f7e9 fa07 	bl	8000b8c <__aeabi_dcmpun>
 801777e:	2800      	cmp	r0, #0
 8017780:	d13b      	bne.n	80177fa <pow+0xa2>
 8017782:	ec51 0b18 	vmov	r0, r1, d8
 8017786:	2200      	movs	r2, #0
 8017788:	2300      	movs	r3, #0
 801778a:	f7e9 f9cd 	bl	8000b28 <__aeabi_dcmpeq>
 801778e:	b1b8      	cbz	r0, 80177c0 <pow+0x68>
 8017790:	2200      	movs	r2, #0
 8017792:	2300      	movs	r3, #0
 8017794:	4620      	mov	r0, r4
 8017796:	4629      	mov	r1, r5
 8017798:	f7e9 f9c6 	bl	8000b28 <__aeabi_dcmpeq>
 801779c:	2800      	cmp	r0, #0
 801779e:	d146      	bne.n	801782e <pow+0xd6>
 80177a0:	ec45 4b10 	vmov	d0, r4, r5
 80177a4:	f000 fe8d 	bl	80184c2 <finite>
 80177a8:	b338      	cbz	r0, 80177fa <pow+0xa2>
 80177aa:	2200      	movs	r2, #0
 80177ac:	2300      	movs	r3, #0
 80177ae:	4620      	mov	r0, r4
 80177b0:	4629      	mov	r1, r5
 80177b2:	f7e9 f9c3 	bl	8000b3c <__aeabi_dcmplt>
 80177b6:	b300      	cbz	r0, 80177fa <pow+0xa2>
 80177b8:	f7fa fe90 	bl	80124dc <__errno>
 80177bc:	2322      	movs	r3, #34	; 0x22
 80177be:	e01b      	b.n	80177f8 <pow+0xa0>
 80177c0:	ec47 6b10 	vmov	d0, r6, r7
 80177c4:	f000 fe7d 	bl	80184c2 <finite>
 80177c8:	b9e0      	cbnz	r0, 8017804 <pow+0xac>
 80177ca:	eeb0 0a48 	vmov.f32	s0, s16
 80177ce:	eef0 0a68 	vmov.f32	s1, s17
 80177d2:	f000 fe76 	bl	80184c2 <finite>
 80177d6:	b1a8      	cbz	r0, 8017804 <pow+0xac>
 80177d8:	ec45 4b10 	vmov	d0, r4, r5
 80177dc:	f000 fe71 	bl	80184c2 <finite>
 80177e0:	b180      	cbz	r0, 8017804 <pow+0xac>
 80177e2:	4632      	mov	r2, r6
 80177e4:	463b      	mov	r3, r7
 80177e6:	4630      	mov	r0, r6
 80177e8:	4639      	mov	r1, r7
 80177ea:	f7e9 f9cf 	bl	8000b8c <__aeabi_dcmpun>
 80177ee:	2800      	cmp	r0, #0
 80177f0:	d0e2      	beq.n	80177b8 <pow+0x60>
 80177f2:	f7fa fe73 	bl	80124dc <__errno>
 80177f6:	2321      	movs	r3, #33	; 0x21
 80177f8:	6003      	str	r3, [r0, #0]
 80177fa:	ecbd 8b02 	vpop	{d8}
 80177fe:	ec47 6b10 	vmov	d0, r6, r7
 8017802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017804:	2200      	movs	r2, #0
 8017806:	2300      	movs	r3, #0
 8017808:	4630      	mov	r0, r6
 801780a:	4639      	mov	r1, r7
 801780c:	f7e9 f98c 	bl	8000b28 <__aeabi_dcmpeq>
 8017810:	2800      	cmp	r0, #0
 8017812:	d0f2      	beq.n	80177fa <pow+0xa2>
 8017814:	eeb0 0a48 	vmov.f32	s0, s16
 8017818:	eef0 0a68 	vmov.f32	s1, s17
 801781c:	f000 fe51 	bl	80184c2 <finite>
 8017820:	2800      	cmp	r0, #0
 8017822:	d0ea      	beq.n	80177fa <pow+0xa2>
 8017824:	ec45 4b10 	vmov	d0, r4, r5
 8017828:	f000 fe4b 	bl	80184c2 <finite>
 801782c:	e7c3      	b.n	80177b6 <pow+0x5e>
 801782e:	4f01      	ldr	r7, [pc, #4]	; (8017834 <pow+0xdc>)
 8017830:	2600      	movs	r6, #0
 8017832:	e7e2      	b.n	80177fa <pow+0xa2>
 8017834:	3ff00000 	.word	0x3ff00000

08017838 <sqrt>:
 8017838:	b538      	push	{r3, r4, r5, lr}
 801783a:	ed2d 8b02 	vpush	{d8}
 801783e:	ec55 4b10 	vmov	r4, r5, d0
 8017842:	f000 fd53 	bl	80182ec <__ieee754_sqrt>
 8017846:	4622      	mov	r2, r4
 8017848:	462b      	mov	r3, r5
 801784a:	4620      	mov	r0, r4
 801784c:	4629      	mov	r1, r5
 801784e:	eeb0 8a40 	vmov.f32	s16, s0
 8017852:	eef0 8a60 	vmov.f32	s17, s1
 8017856:	f7e9 f999 	bl	8000b8c <__aeabi_dcmpun>
 801785a:	b990      	cbnz	r0, 8017882 <sqrt+0x4a>
 801785c:	2200      	movs	r2, #0
 801785e:	2300      	movs	r3, #0
 8017860:	4620      	mov	r0, r4
 8017862:	4629      	mov	r1, r5
 8017864:	f7e9 f96a 	bl	8000b3c <__aeabi_dcmplt>
 8017868:	b158      	cbz	r0, 8017882 <sqrt+0x4a>
 801786a:	f7fa fe37 	bl	80124dc <__errno>
 801786e:	2321      	movs	r3, #33	; 0x21
 8017870:	6003      	str	r3, [r0, #0]
 8017872:	2200      	movs	r2, #0
 8017874:	2300      	movs	r3, #0
 8017876:	4610      	mov	r0, r2
 8017878:	4619      	mov	r1, r3
 801787a:	f7e9 f817 	bl	80008ac <__aeabi_ddiv>
 801787e:	ec41 0b18 	vmov	d8, r0, r1
 8017882:	eeb0 0a48 	vmov.f32	s0, s16
 8017886:	eef0 0a68 	vmov.f32	s1, s17
 801788a:	ecbd 8b02 	vpop	{d8}
 801788e:	bd38      	pop	{r3, r4, r5, pc}

08017890 <__ieee754_pow>:
 8017890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017894:	ed2d 8b06 	vpush	{d8-d10}
 8017898:	b089      	sub	sp, #36	; 0x24
 801789a:	ed8d 1b00 	vstr	d1, [sp]
 801789e:	e9dd 2900 	ldrd	r2, r9, [sp]
 80178a2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80178a6:	ea58 0102 	orrs.w	r1, r8, r2
 80178aa:	ec57 6b10 	vmov	r6, r7, d0
 80178ae:	d115      	bne.n	80178dc <__ieee754_pow+0x4c>
 80178b0:	19b3      	adds	r3, r6, r6
 80178b2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80178b6:	4152      	adcs	r2, r2
 80178b8:	4299      	cmp	r1, r3
 80178ba:	4b89      	ldr	r3, [pc, #548]	; (8017ae0 <__ieee754_pow+0x250>)
 80178bc:	4193      	sbcs	r3, r2
 80178be:	f080 84d2 	bcs.w	8018266 <__ieee754_pow+0x9d6>
 80178c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80178c6:	4630      	mov	r0, r6
 80178c8:	4639      	mov	r1, r7
 80178ca:	f7e8 fd0f 	bl	80002ec <__adddf3>
 80178ce:	ec41 0b10 	vmov	d0, r0, r1
 80178d2:	b009      	add	sp, #36	; 0x24
 80178d4:	ecbd 8b06 	vpop	{d8-d10}
 80178d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80178dc:	4b81      	ldr	r3, [pc, #516]	; (8017ae4 <__ieee754_pow+0x254>)
 80178de:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80178e2:	429c      	cmp	r4, r3
 80178e4:	ee10 aa10 	vmov	sl, s0
 80178e8:	463d      	mov	r5, r7
 80178ea:	dc06      	bgt.n	80178fa <__ieee754_pow+0x6a>
 80178ec:	d101      	bne.n	80178f2 <__ieee754_pow+0x62>
 80178ee:	2e00      	cmp	r6, #0
 80178f0:	d1e7      	bne.n	80178c2 <__ieee754_pow+0x32>
 80178f2:	4598      	cmp	r8, r3
 80178f4:	dc01      	bgt.n	80178fa <__ieee754_pow+0x6a>
 80178f6:	d10f      	bne.n	8017918 <__ieee754_pow+0x88>
 80178f8:	b172      	cbz	r2, 8017918 <__ieee754_pow+0x88>
 80178fa:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80178fe:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8017902:	ea55 050a 	orrs.w	r5, r5, sl
 8017906:	d1dc      	bne.n	80178c2 <__ieee754_pow+0x32>
 8017908:	e9dd 3200 	ldrd	r3, r2, [sp]
 801790c:	18db      	adds	r3, r3, r3
 801790e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8017912:	4152      	adcs	r2, r2
 8017914:	429d      	cmp	r5, r3
 8017916:	e7d0      	b.n	80178ba <__ieee754_pow+0x2a>
 8017918:	2d00      	cmp	r5, #0
 801791a:	da3b      	bge.n	8017994 <__ieee754_pow+0x104>
 801791c:	4b72      	ldr	r3, [pc, #456]	; (8017ae8 <__ieee754_pow+0x258>)
 801791e:	4598      	cmp	r8, r3
 8017920:	dc51      	bgt.n	80179c6 <__ieee754_pow+0x136>
 8017922:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8017926:	4598      	cmp	r8, r3
 8017928:	f340 84ac 	ble.w	8018284 <__ieee754_pow+0x9f4>
 801792c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8017930:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8017934:	2b14      	cmp	r3, #20
 8017936:	dd0f      	ble.n	8017958 <__ieee754_pow+0xc8>
 8017938:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801793c:	fa22 f103 	lsr.w	r1, r2, r3
 8017940:	fa01 f303 	lsl.w	r3, r1, r3
 8017944:	4293      	cmp	r3, r2
 8017946:	f040 849d 	bne.w	8018284 <__ieee754_pow+0x9f4>
 801794a:	f001 0101 	and.w	r1, r1, #1
 801794e:	f1c1 0302 	rsb	r3, r1, #2
 8017952:	9304      	str	r3, [sp, #16]
 8017954:	b182      	cbz	r2, 8017978 <__ieee754_pow+0xe8>
 8017956:	e05f      	b.n	8017a18 <__ieee754_pow+0x188>
 8017958:	2a00      	cmp	r2, #0
 801795a:	d15b      	bne.n	8017a14 <__ieee754_pow+0x184>
 801795c:	f1c3 0314 	rsb	r3, r3, #20
 8017960:	fa48 f103 	asr.w	r1, r8, r3
 8017964:	fa01 f303 	lsl.w	r3, r1, r3
 8017968:	4543      	cmp	r3, r8
 801796a:	f040 8488 	bne.w	801827e <__ieee754_pow+0x9ee>
 801796e:	f001 0101 	and.w	r1, r1, #1
 8017972:	f1c1 0302 	rsb	r3, r1, #2
 8017976:	9304      	str	r3, [sp, #16]
 8017978:	4b5c      	ldr	r3, [pc, #368]	; (8017aec <__ieee754_pow+0x25c>)
 801797a:	4598      	cmp	r8, r3
 801797c:	d132      	bne.n	80179e4 <__ieee754_pow+0x154>
 801797e:	f1b9 0f00 	cmp.w	r9, #0
 8017982:	f280 8478 	bge.w	8018276 <__ieee754_pow+0x9e6>
 8017986:	4959      	ldr	r1, [pc, #356]	; (8017aec <__ieee754_pow+0x25c>)
 8017988:	4632      	mov	r2, r6
 801798a:	463b      	mov	r3, r7
 801798c:	2000      	movs	r0, #0
 801798e:	f7e8 ff8d 	bl	80008ac <__aeabi_ddiv>
 8017992:	e79c      	b.n	80178ce <__ieee754_pow+0x3e>
 8017994:	2300      	movs	r3, #0
 8017996:	9304      	str	r3, [sp, #16]
 8017998:	2a00      	cmp	r2, #0
 801799a:	d13d      	bne.n	8017a18 <__ieee754_pow+0x188>
 801799c:	4b51      	ldr	r3, [pc, #324]	; (8017ae4 <__ieee754_pow+0x254>)
 801799e:	4598      	cmp	r8, r3
 80179a0:	d1ea      	bne.n	8017978 <__ieee754_pow+0xe8>
 80179a2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80179a6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80179aa:	ea53 030a 	orrs.w	r3, r3, sl
 80179ae:	f000 845a 	beq.w	8018266 <__ieee754_pow+0x9d6>
 80179b2:	4b4f      	ldr	r3, [pc, #316]	; (8017af0 <__ieee754_pow+0x260>)
 80179b4:	429c      	cmp	r4, r3
 80179b6:	dd08      	ble.n	80179ca <__ieee754_pow+0x13a>
 80179b8:	f1b9 0f00 	cmp.w	r9, #0
 80179bc:	f2c0 8457 	blt.w	801826e <__ieee754_pow+0x9de>
 80179c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80179c4:	e783      	b.n	80178ce <__ieee754_pow+0x3e>
 80179c6:	2302      	movs	r3, #2
 80179c8:	e7e5      	b.n	8017996 <__ieee754_pow+0x106>
 80179ca:	f1b9 0f00 	cmp.w	r9, #0
 80179ce:	f04f 0000 	mov.w	r0, #0
 80179d2:	f04f 0100 	mov.w	r1, #0
 80179d6:	f6bf af7a 	bge.w	80178ce <__ieee754_pow+0x3e>
 80179da:	e9dd 0300 	ldrd	r0, r3, [sp]
 80179de:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80179e2:	e774      	b.n	80178ce <__ieee754_pow+0x3e>
 80179e4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80179e8:	d106      	bne.n	80179f8 <__ieee754_pow+0x168>
 80179ea:	4632      	mov	r2, r6
 80179ec:	463b      	mov	r3, r7
 80179ee:	4630      	mov	r0, r6
 80179f0:	4639      	mov	r1, r7
 80179f2:	f7e8 fe31 	bl	8000658 <__aeabi_dmul>
 80179f6:	e76a      	b.n	80178ce <__ieee754_pow+0x3e>
 80179f8:	4b3e      	ldr	r3, [pc, #248]	; (8017af4 <__ieee754_pow+0x264>)
 80179fa:	4599      	cmp	r9, r3
 80179fc:	d10c      	bne.n	8017a18 <__ieee754_pow+0x188>
 80179fe:	2d00      	cmp	r5, #0
 8017a00:	db0a      	blt.n	8017a18 <__ieee754_pow+0x188>
 8017a02:	ec47 6b10 	vmov	d0, r6, r7
 8017a06:	b009      	add	sp, #36	; 0x24
 8017a08:	ecbd 8b06 	vpop	{d8-d10}
 8017a0c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a10:	f000 bc6c 	b.w	80182ec <__ieee754_sqrt>
 8017a14:	2300      	movs	r3, #0
 8017a16:	9304      	str	r3, [sp, #16]
 8017a18:	ec47 6b10 	vmov	d0, r6, r7
 8017a1c:	f000 fd48 	bl	80184b0 <fabs>
 8017a20:	ec51 0b10 	vmov	r0, r1, d0
 8017a24:	f1ba 0f00 	cmp.w	sl, #0
 8017a28:	d129      	bne.n	8017a7e <__ieee754_pow+0x1ee>
 8017a2a:	b124      	cbz	r4, 8017a36 <__ieee754_pow+0x1a6>
 8017a2c:	4b2f      	ldr	r3, [pc, #188]	; (8017aec <__ieee754_pow+0x25c>)
 8017a2e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8017a32:	429a      	cmp	r2, r3
 8017a34:	d123      	bne.n	8017a7e <__ieee754_pow+0x1ee>
 8017a36:	f1b9 0f00 	cmp.w	r9, #0
 8017a3a:	da05      	bge.n	8017a48 <__ieee754_pow+0x1b8>
 8017a3c:	4602      	mov	r2, r0
 8017a3e:	460b      	mov	r3, r1
 8017a40:	2000      	movs	r0, #0
 8017a42:	492a      	ldr	r1, [pc, #168]	; (8017aec <__ieee754_pow+0x25c>)
 8017a44:	f7e8 ff32 	bl	80008ac <__aeabi_ddiv>
 8017a48:	2d00      	cmp	r5, #0
 8017a4a:	f6bf af40 	bge.w	80178ce <__ieee754_pow+0x3e>
 8017a4e:	9b04      	ldr	r3, [sp, #16]
 8017a50:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8017a54:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8017a58:	4323      	orrs	r3, r4
 8017a5a:	d108      	bne.n	8017a6e <__ieee754_pow+0x1de>
 8017a5c:	4602      	mov	r2, r0
 8017a5e:	460b      	mov	r3, r1
 8017a60:	4610      	mov	r0, r2
 8017a62:	4619      	mov	r1, r3
 8017a64:	f7e8 fc40 	bl	80002e8 <__aeabi_dsub>
 8017a68:	4602      	mov	r2, r0
 8017a6a:	460b      	mov	r3, r1
 8017a6c:	e78f      	b.n	801798e <__ieee754_pow+0xfe>
 8017a6e:	9b04      	ldr	r3, [sp, #16]
 8017a70:	2b01      	cmp	r3, #1
 8017a72:	f47f af2c 	bne.w	80178ce <__ieee754_pow+0x3e>
 8017a76:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017a7a:	4619      	mov	r1, r3
 8017a7c:	e727      	b.n	80178ce <__ieee754_pow+0x3e>
 8017a7e:	0feb      	lsrs	r3, r5, #31
 8017a80:	3b01      	subs	r3, #1
 8017a82:	9306      	str	r3, [sp, #24]
 8017a84:	9a06      	ldr	r2, [sp, #24]
 8017a86:	9b04      	ldr	r3, [sp, #16]
 8017a88:	4313      	orrs	r3, r2
 8017a8a:	d102      	bne.n	8017a92 <__ieee754_pow+0x202>
 8017a8c:	4632      	mov	r2, r6
 8017a8e:	463b      	mov	r3, r7
 8017a90:	e7e6      	b.n	8017a60 <__ieee754_pow+0x1d0>
 8017a92:	4b19      	ldr	r3, [pc, #100]	; (8017af8 <__ieee754_pow+0x268>)
 8017a94:	4598      	cmp	r8, r3
 8017a96:	f340 80fb 	ble.w	8017c90 <__ieee754_pow+0x400>
 8017a9a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8017a9e:	4598      	cmp	r8, r3
 8017aa0:	4b13      	ldr	r3, [pc, #76]	; (8017af0 <__ieee754_pow+0x260>)
 8017aa2:	dd0c      	ble.n	8017abe <__ieee754_pow+0x22e>
 8017aa4:	429c      	cmp	r4, r3
 8017aa6:	dc0f      	bgt.n	8017ac8 <__ieee754_pow+0x238>
 8017aa8:	f1b9 0f00 	cmp.w	r9, #0
 8017aac:	da0f      	bge.n	8017ace <__ieee754_pow+0x23e>
 8017aae:	2000      	movs	r0, #0
 8017ab0:	b009      	add	sp, #36	; 0x24
 8017ab2:	ecbd 8b06 	vpop	{d8-d10}
 8017ab6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017aba:	f000 bcf0 	b.w	801849e <__math_oflow>
 8017abe:	429c      	cmp	r4, r3
 8017ac0:	dbf2      	blt.n	8017aa8 <__ieee754_pow+0x218>
 8017ac2:	4b0a      	ldr	r3, [pc, #40]	; (8017aec <__ieee754_pow+0x25c>)
 8017ac4:	429c      	cmp	r4, r3
 8017ac6:	dd19      	ble.n	8017afc <__ieee754_pow+0x26c>
 8017ac8:	f1b9 0f00 	cmp.w	r9, #0
 8017acc:	dcef      	bgt.n	8017aae <__ieee754_pow+0x21e>
 8017ace:	2000      	movs	r0, #0
 8017ad0:	b009      	add	sp, #36	; 0x24
 8017ad2:	ecbd 8b06 	vpop	{d8-d10}
 8017ad6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ada:	f000 bcd7 	b.w	801848c <__math_uflow>
 8017ade:	bf00      	nop
 8017ae0:	fff00000 	.word	0xfff00000
 8017ae4:	7ff00000 	.word	0x7ff00000
 8017ae8:	433fffff 	.word	0x433fffff
 8017aec:	3ff00000 	.word	0x3ff00000
 8017af0:	3fefffff 	.word	0x3fefffff
 8017af4:	3fe00000 	.word	0x3fe00000
 8017af8:	41e00000 	.word	0x41e00000
 8017afc:	4b60      	ldr	r3, [pc, #384]	; (8017c80 <__ieee754_pow+0x3f0>)
 8017afe:	2200      	movs	r2, #0
 8017b00:	f7e8 fbf2 	bl	80002e8 <__aeabi_dsub>
 8017b04:	a354      	add	r3, pc, #336	; (adr r3, 8017c58 <__ieee754_pow+0x3c8>)
 8017b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017b0a:	4604      	mov	r4, r0
 8017b0c:	460d      	mov	r5, r1
 8017b0e:	f7e8 fda3 	bl	8000658 <__aeabi_dmul>
 8017b12:	a353      	add	r3, pc, #332	; (adr r3, 8017c60 <__ieee754_pow+0x3d0>)
 8017b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017b18:	4606      	mov	r6, r0
 8017b1a:	460f      	mov	r7, r1
 8017b1c:	4620      	mov	r0, r4
 8017b1e:	4629      	mov	r1, r5
 8017b20:	f7e8 fd9a 	bl	8000658 <__aeabi_dmul>
 8017b24:	4b57      	ldr	r3, [pc, #348]	; (8017c84 <__ieee754_pow+0x3f4>)
 8017b26:	4682      	mov	sl, r0
 8017b28:	468b      	mov	fp, r1
 8017b2a:	2200      	movs	r2, #0
 8017b2c:	4620      	mov	r0, r4
 8017b2e:	4629      	mov	r1, r5
 8017b30:	f7e8 fd92 	bl	8000658 <__aeabi_dmul>
 8017b34:	4602      	mov	r2, r0
 8017b36:	460b      	mov	r3, r1
 8017b38:	a14b      	add	r1, pc, #300	; (adr r1, 8017c68 <__ieee754_pow+0x3d8>)
 8017b3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017b3e:	f7e8 fbd3 	bl	80002e8 <__aeabi_dsub>
 8017b42:	4622      	mov	r2, r4
 8017b44:	462b      	mov	r3, r5
 8017b46:	f7e8 fd87 	bl	8000658 <__aeabi_dmul>
 8017b4a:	4602      	mov	r2, r0
 8017b4c:	460b      	mov	r3, r1
 8017b4e:	2000      	movs	r0, #0
 8017b50:	494d      	ldr	r1, [pc, #308]	; (8017c88 <__ieee754_pow+0x3f8>)
 8017b52:	f7e8 fbc9 	bl	80002e8 <__aeabi_dsub>
 8017b56:	4622      	mov	r2, r4
 8017b58:	4680      	mov	r8, r0
 8017b5a:	4689      	mov	r9, r1
 8017b5c:	462b      	mov	r3, r5
 8017b5e:	4620      	mov	r0, r4
 8017b60:	4629      	mov	r1, r5
 8017b62:	f7e8 fd79 	bl	8000658 <__aeabi_dmul>
 8017b66:	4602      	mov	r2, r0
 8017b68:	460b      	mov	r3, r1
 8017b6a:	4640      	mov	r0, r8
 8017b6c:	4649      	mov	r1, r9
 8017b6e:	f7e8 fd73 	bl	8000658 <__aeabi_dmul>
 8017b72:	a33f      	add	r3, pc, #252	; (adr r3, 8017c70 <__ieee754_pow+0x3e0>)
 8017b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017b78:	f7e8 fd6e 	bl	8000658 <__aeabi_dmul>
 8017b7c:	4602      	mov	r2, r0
 8017b7e:	460b      	mov	r3, r1
 8017b80:	4650      	mov	r0, sl
 8017b82:	4659      	mov	r1, fp
 8017b84:	f7e8 fbb0 	bl	80002e8 <__aeabi_dsub>
 8017b88:	4602      	mov	r2, r0
 8017b8a:	460b      	mov	r3, r1
 8017b8c:	4680      	mov	r8, r0
 8017b8e:	4689      	mov	r9, r1
 8017b90:	4630      	mov	r0, r6
 8017b92:	4639      	mov	r1, r7
 8017b94:	f7e8 fbaa 	bl	80002ec <__adddf3>
 8017b98:	2000      	movs	r0, #0
 8017b9a:	4632      	mov	r2, r6
 8017b9c:	463b      	mov	r3, r7
 8017b9e:	4604      	mov	r4, r0
 8017ba0:	460d      	mov	r5, r1
 8017ba2:	f7e8 fba1 	bl	80002e8 <__aeabi_dsub>
 8017ba6:	4602      	mov	r2, r0
 8017ba8:	460b      	mov	r3, r1
 8017baa:	4640      	mov	r0, r8
 8017bac:	4649      	mov	r1, r9
 8017bae:	f7e8 fb9b 	bl	80002e8 <__aeabi_dsub>
 8017bb2:	9b04      	ldr	r3, [sp, #16]
 8017bb4:	9a06      	ldr	r2, [sp, #24]
 8017bb6:	3b01      	subs	r3, #1
 8017bb8:	4313      	orrs	r3, r2
 8017bba:	4682      	mov	sl, r0
 8017bbc:	468b      	mov	fp, r1
 8017bbe:	f040 81e7 	bne.w	8017f90 <__ieee754_pow+0x700>
 8017bc2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8017c78 <__ieee754_pow+0x3e8>
 8017bc6:	eeb0 8a47 	vmov.f32	s16, s14
 8017bca:	eef0 8a67 	vmov.f32	s17, s15
 8017bce:	e9dd 6700 	ldrd	r6, r7, [sp]
 8017bd2:	2600      	movs	r6, #0
 8017bd4:	4632      	mov	r2, r6
 8017bd6:	463b      	mov	r3, r7
 8017bd8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017bdc:	f7e8 fb84 	bl	80002e8 <__aeabi_dsub>
 8017be0:	4622      	mov	r2, r4
 8017be2:	462b      	mov	r3, r5
 8017be4:	f7e8 fd38 	bl	8000658 <__aeabi_dmul>
 8017be8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017bec:	4680      	mov	r8, r0
 8017bee:	4689      	mov	r9, r1
 8017bf0:	4650      	mov	r0, sl
 8017bf2:	4659      	mov	r1, fp
 8017bf4:	f7e8 fd30 	bl	8000658 <__aeabi_dmul>
 8017bf8:	4602      	mov	r2, r0
 8017bfa:	460b      	mov	r3, r1
 8017bfc:	4640      	mov	r0, r8
 8017bfe:	4649      	mov	r1, r9
 8017c00:	f7e8 fb74 	bl	80002ec <__adddf3>
 8017c04:	4632      	mov	r2, r6
 8017c06:	463b      	mov	r3, r7
 8017c08:	4680      	mov	r8, r0
 8017c0a:	4689      	mov	r9, r1
 8017c0c:	4620      	mov	r0, r4
 8017c0e:	4629      	mov	r1, r5
 8017c10:	f7e8 fd22 	bl	8000658 <__aeabi_dmul>
 8017c14:	460b      	mov	r3, r1
 8017c16:	4604      	mov	r4, r0
 8017c18:	460d      	mov	r5, r1
 8017c1a:	4602      	mov	r2, r0
 8017c1c:	4649      	mov	r1, r9
 8017c1e:	4640      	mov	r0, r8
 8017c20:	f7e8 fb64 	bl	80002ec <__adddf3>
 8017c24:	4b19      	ldr	r3, [pc, #100]	; (8017c8c <__ieee754_pow+0x3fc>)
 8017c26:	4299      	cmp	r1, r3
 8017c28:	ec45 4b19 	vmov	d9, r4, r5
 8017c2c:	4606      	mov	r6, r0
 8017c2e:	460f      	mov	r7, r1
 8017c30:	468b      	mov	fp, r1
 8017c32:	f340 82f1 	ble.w	8018218 <__ieee754_pow+0x988>
 8017c36:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8017c3a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8017c3e:	4303      	orrs	r3, r0
 8017c40:	f000 81e4 	beq.w	801800c <__ieee754_pow+0x77c>
 8017c44:	ec51 0b18 	vmov	r0, r1, d8
 8017c48:	2200      	movs	r2, #0
 8017c4a:	2300      	movs	r3, #0
 8017c4c:	f7e8 ff76 	bl	8000b3c <__aeabi_dcmplt>
 8017c50:	3800      	subs	r0, #0
 8017c52:	bf18      	it	ne
 8017c54:	2001      	movne	r0, #1
 8017c56:	e72b      	b.n	8017ab0 <__ieee754_pow+0x220>
 8017c58:	60000000 	.word	0x60000000
 8017c5c:	3ff71547 	.word	0x3ff71547
 8017c60:	f85ddf44 	.word	0xf85ddf44
 8017c64:	3e54ae0b 	.word	0x3e54ae0b
 8017c68:	55555555 	.word	0x55555555
 8017c6c:	3fd55555 	.word	0x3fd55555
 8017c70:	652b82fe 	.word	0x652b82fe
 8017c74:	3ff71547 	.word	0x3ff71547
 8017c78:	00000000 	.word	0x00000000
 8017c7c:	bff00000 	.word	0xbff00000
 8017c80:	3ff00000 	.word	0x3ff00000
 8017c84:	3fd00000 	.word	0x3fd00000
 8017c88:	3fe00000 	.word	0x3fe00000
 8017c8c:	408fffff 	.word	0x408fffff
 8017c90:	4bd5      	ldr	r3, [pc, #852]	; (8017fe8 <__ieee754_pow+0x758>)
 8017c92:	402b      	ands	r3, r5
 8017c94:	2200      	movs	r2, #0
 8017c96:	b92b      	cbnz	r3, 8017ca4 <__ieee754_pow+0x414>
 8017c98:	4bd4      	ldr	r3, [pc, #848]	; (8017fec <__ieee754_pow+0x75c>)
 8017c9a:	f7e8 fcdd 	bl	8000658 <__aeabi_dmul>
 8017c9e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8017ca2:	460c      	mov	r4, r1
 8017ca4:	1523      	asrs	r3, r4, #20
 8017ca6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8017caa:	4413      	add	r3, r2
 8017cac:	9305      	str	r3, [sp, #20]
 8017cae:	4bd0      	ldr	r3, [pc, #832]	; (8017ff0 <__ieee754_pow+0x760>)
 8017cb0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8017cb4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8017cb8:	429c      	cmp	r4, r3
 8017cba:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8017cbe:	dd08      	ble.n	8017cd2 <__ieee754_pow+0x442>
 8017cc0:	4bcc      	ldr	r3, [pc, #816]	; (8017ff4 <__ieee754_pow+0x764>)
 8017cc2:	429c      	cmp	r4, r3
 8017cc4:	f340 8162 	ble.w	8017f8c <__ieee754_pow+0x6fc>
 8017cc8:	9b05      	ldr	r3, [sp, #20]
 8017cca:	3301      	adds	r3, #1
 8017ccc:	9305      	str	r3, [sp, #20]
 8017cce:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8017cd2:	2400      	movs	r4, #0
 8017cd4:	00e3      	lsls	r3, r4, #3
 8017cd6:	9307      	str	r3, [sp, #28]
 8017cd8:	4bc7      	ldr	r3, [pc, #796]	; (8017ff8 <__ieee754_pow+0x768>)
 8017cda:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8017cde:	ed93 7b00 	vldr	d7, [r3]
 8017ce2:	4629      	mov	r1, r5
 8017ce4:	ec53 2b17 	vmov	r2, r3, d7
 8017ce8:	eeb0 9a47 	vmov.f32	s18, s14
 8017cec:	eef0 9a67 	vmov.f32	s19, s15
 8017cf0:	4682      	mov	sl, r0
 8017cf2:	f7e8 faf9 	bl	80002e8 <__aeabi_dsub>
 8017cf6:	4652      	mov	r2, sl
 8017cf8:	4606      	mov	r6, r0
 8017cfa:	460f      	mov	r7, r1
 8017cfc:	462b      	mov	r3, r5
 8017cfe:	ec51 0b19 	vmov	r0, r1, d9
 8017d02:	f7e8 faf3 	bl	80002ec <__adddf3>
 8017d06:	4602      	mov	r2, r0
 8017d08:	460b      	mov	r3, r1
 8017d0a:	2000      	movs	r0, #0
 8017d0c:	49bb      	ldr	r1, [pc, #748]	; (8017ffc <__ieee754_pow+0x76c>)
 8017d0e:	f7e8 fdcd 	bl	80008ac <__aeabi_ddiv>
 8017d12:	ec41 0b1a 	vmov	d10, r0, r1
 8017d16:	4602      	mov	r2, r0
 8017d18:	460b      	mov	r3, r1
 8017d1a:	4630      	mov	r0, r6
 8017d1c:	4639      	mov	r1, r7
 8017d1e:	f7e8 fc9b 	bl	8000658 <__aeabi_dmul>
 8017d22:	2300      	movs	r3, #0
 8017d24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017d28:	9302      	str	r3, [sp, #8]
 8017d2a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8017d2e:	46ab      	mov	fp, r5
 8017d30:	106d      	asrs	r5, r5, #1
 8017d32:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8017d36:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8017d3a:	ec41 0b18 	vmov	d8, r0, r1
 8017d3e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8017d42:	2200      	movs	r2, #0
 8017d44:	4640      	mov	r0, r8
 8017d46:	4649      	mov	r1, r9
 8017d48:	4614      	mov	r4, r2
 8017d4a:	461d      	mov	r5, r3
 8017d4c:	f7e8 fc84 	bl	8000658 <__aeabi_dmul>
 8017d50:	4602      	mov	r2, r0
 8017d52:	460b      	mov	r3, r1
 8017d54:	4630      	mov	r0, r6
 8017d56:	4639      	mov	r1, r7
 8017d58:	f7e8 fac6 	bl	80002e8 <__aeabi_dsub>
 8017d5c:	ec53 2b19 	vmov	r2, r3, d9
 8017d60:	4606      	mov	r6, r0
 8017d62:	460f      	mov	r7, r1
 8017d64:	4620      	mov	r0, r4
 8017d66:	4629      	mov	r1, r5
 8017d68:	f7e8 fabe 	bl	80002e8 <__aeabi_dsub>
 8017d6c:	4602      	mov	r2, r0
 8017d6e:	460b      	mov	r3, r1
 8017d70:	4650      	mov	r0, sl
 8017d72:	4659      	mov	r1, fp
 8017d74:	f7e8 fab8 	bl	80002e8 <__aeabi_dsub>
 8017d78:	4642      	mov	r2, r8
 8017d7a:	464b      	mov	r3, r9
 8017d7c:	f7e8 fc6c 	bl	8000658 <__aeabi_dmul>
 8017d80:	4602      	mov	r2, r0
 8017d82:	460b      	mov	r3, r1
 8017d84:	4630      	mov	r0, r6
 8017d86:	4639      	mov	r1, r7
 8017d88:	f7e8 faae 	bl	80002e8 <__aeabi_dsub>
 8017d8c:	ec53 2b1a 	vmov	r2, r3, d10
 8017d90:	f7e8 fc62 	bl	8000658 <__aeabi_dmul>
 8017d94:	ec53 2b18 	vmov	r2, r3, d8
 8017d98:	ec41 0b19 	vmov	d9, r0, r1
 8017d9c:	ec51 0b18 	vmov	r0, r1, d8
 8017da0:	f7e8 fc5a 	bl	8000658 <__aeabi_dmul>
 8017da4:	a37c      	add	r3, pc, #496	; (adr r3, 8017f98 <__ieee754_pow+0x708>)
 8017da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017daa:	4604      	mov	r4, r0
 8017dac:	460d      	mov	r5, r1
 8017dae:	f7e8 fc53 	bl	8000658 <__aeabi_dmul>
 8017db2:	a37b      	add	r3, pc, #492	; (adr r3, 8017fa0 <__ieee754_pow+0x710>)
 8017db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017db8:	f7e8 fa98 	bl	80002ec <__adddf3>
 8017dbc:	4622      	mov	r2, r4
 8017dbe:	462b      	mov	r3, r5
 8017dc0:	f7e8 fc4a 	bl	8000658 <__aeabi_dmul>
 8017dc4:	a378      	add	r3, pc, #480	; (adr r3, 8017fa8 <__ieee754_pow+0x718>)
 8017dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017dca:	f7e8 fa8f 	bl	80002ec <__adddf3>
 8017dce:	4622      	mov	r2, r4
 8017dd0:	462b      	mov	r3, r5
 8017dd2:	f7e8 fc41 	bl	8000658 <__aeabi_dmul>
 8017dd6:	a376      	add	r3, pc, #472	; (adr r3, 8017fb0 <__ieee754_pow+0x720>)
 8017dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ddc:	f7e8 fa86 	bl	80002ec <__adddf3>
 8017de0:	4622      	mov	r2, r4
 8017de2:	462b      	mov	r3, r5
 8017de4:	f7e8 fc38 	bl	8000658 <__aeabi_dmul>
 8017de8:	a373      	add	r3, pc, #460	; (adr r3, 8017fb8 <__ieee754_pow+0x728>)
 8017dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017dee:	f7e8 fa7d 	bl	80002ec <__adddf3>
 8017df2:	4622      	mov	r2, r4
 8017df4:	462b      	mov	r3, r5
 8017df6:	f7e8 fc2f 	bl	8000658 <__aeabi_dmul>
 8017dfa:	a371      	add	r3, pc, #452	; (adr r3, 8017fc0 <__ieee754_pow+0x730>)
 8017dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e00:	f7e8 fa74 	bl	80002ec <__adddf3>
 8017e04:	4622      	mov	r2, r4
 8017e06:	4606      	mov	r6, r0
 8017e08:	460f      	mov	r7, r1
 8017e0a:	462b      	mov	r3, r5
 8017e0c:	4620      	mov	r0, r4
 8017e0e:	4629      	mov	r1, r5
 8017e10:	f7e8 fc22 	bl	8000658 <__aeabi_dmul>
 8017e14:	4602      	mov	r2, r0
 8017e16:	460b      	mov	r3, r1
 8017e18:	4630      	mov	r0, r6
 8017e1a:	4639      	mov	r1, r7
 8017e1c:	f7e8 fc1c 	bl	8000658 <__aeabi_dmul>
 8017e20:	4642      	mov	r2, r8
 8017e22:	4604      	mov	r4, r0
 8017e24:	460d      	mov	r5, r1
 8017e26:	464b      	mov	r3, r9
 8017e28:	ec51 0b18 	vmov	r0, r1, d8
 8017e2c:	f7e8 fa5e 	bl	80002ec <__adddf3>
 8017e30:	ec53 2b19 	vmov	r2, r3, d9
 8017e34:	f7e8 fc10 	bl	8000658 <__aeabi_dmul>
 8017e38:	4622      	mov	r2, r4
 8017e3a:	462b      	mov	r3, r5
 8017e3c:	f7e8 fa56 	bl	80002ec <__adddf3>
 8017e40:	4642      	mov	r2, r8
 8017e42:	4682      	mov	sl, r0
 8017e44:	468b      	mov	fp, r1
 8017e46:	464b      	mov	r3, r9
 8017e48:	4640      	mov	r0, r8
 8017e4a:	4649      	mov	r1, r9
 8017e4c:	f7e8 fc04 	bl	8000658 <__aeabi_dmul>
 8017e50:	4b6b      	ldr	r3, [pc, #428]	; (8018000 <__ieee754_pow+0x770>)
 8017e52:	2200      	movs	r2, #0
 8017e54:	4606      	mov	r6, r0
 8017e56:	460f      	mov	r7, r1
 8017e58:	f7e8 fa48 	bl	80002ec <__adddf3>
 8017e5c:	4652      	mov	r2, sl
 8017e5e:	465b      	mov	r3, fp
 8017e60:	f7e8 fa44 	bl	80002ec <__adddf3>
 8017e64:	2000      	movs	r0, #0
 8017e66:	4604      	mov	r4, r0
 8017e68:	460d      	mov	r5, r1
 8017e6a:	4602      	mov	r2, r0
 8017e6c:	460b      	mov	r3, r1
 8017e6e:	4640      	mov	r0, r8
 8017e70:	4649      	mov	r1, r9
 8017e72:	f7e8 fbf1 	bl	8000658 <__aeabi_dmul>
 8017e76:	4b62      	ldr	r3, [pc, #392]	; (8018000 <__ieee754_pow+0x770>)
 8017e78:	4680      	mov	r8, r0
 8017e7a:	4689      	mov	r9, r1
 8017e7c:	2200      	movs	r2, #0
 8017e7e:	4620      	mov	r0, r4
 8017e80:	4629      	mov	r1, r5
 8017e82:	f7e8 fa31 	bl	80002e8 <__aeabi_dsub>
 8017e86:	4632      	mov	r2, r6
 8017e88:	463b      	mov	r3, r7
 8017e8a:	f7e8 fa2d 	bl	80002e8 <__aeabi_dsub>
 8017e8e:	4602      	mov	r2, r0
 8017e90:	460b      	mov	r3, r1
 8017e92:	4650      	mov	r0, sl
 8017e94:	4659      	mov	r1, fp
 8017e96:	f7e8 fa27 	bl	80002e8 <__aeabi_dsub>
 8017e9a:	ec53 2b18 	vmov	r2, r3, d8
 8017e9e:	f7e8 fbdb 	bl	8000658 <__aeabi_dmul>
 8017ea2:	4622      	mov	r2, r4
 8017ea4:	4606      	mov	r6, r0
 8017ea6:	460f      	mov	r7, r1
 8017ea8:	462b      	mov	r3, r5
 8017eaa:	ec51 0b19 	vmov	r0, r1, d9
 8017eae:	f7e8 fbd3 	bl	8000658 <__aeabi_dmul>
 8017eb2:	4602      	mov	r2, r0
 8017eb4:	460b      	mov	r3, r1
 8017eb6:	4630      	mov	r0, r6
 8017eb8:	4639      	mov	r1, r7
 8017eba:	f7e8 fa17 	bl	80002ec <__adddf3>
 8017ebe:	4606      	mov	r6, r0
 8017ec0:	460f      	mov	r7, r1
 8017ec2:	4602      	mov	r2, r0
 8017ec4:	460b      	mov	r3, r1
 8017ec6:	4640      	mov	r0, r8
 8017ec8:	4649      	mov	r1, r9
 8017eca:	f7e8 fa0f 	bl	80002ec <__adddf3>
 8017ece:	a33e      	add	r3, pc, #248	; (adr r3, 8017fc8 <__ieee754_pow+0x738>)
 8017ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ed4:	2000      	movs	r0, #0
 8017ed6:	4604      	mov	r4, r0
 8017ed8:	460d      	mov	r5, r1
 8017eda:	f7e8 fbbd 	bl	8000658 <__aeabi_dmul>
 8017ede:	4642      	mov	r2, r8
 8017ee0:	ec41 0b18 	vmov	d8, r0, r1
 8017ee4:	464b      	mov	r3, r9
 8017ee6:	4620      	mov	r0, r4
 8017ee8:	4629      	mov	r1, r5
 8017eea:	f7e8 f9fd 	bl	80002e8 <__aeabi_dsub>
 8017eee:	4602      	mov	r2, r0
 8017ef0:	460b      	mov	r3, r1
 8017ef2:	4630      	mov	r0, r6
 8017ef4:	4639      	mov	r1, r7
 8017ef6:	f7e8 f9f7 	bl	80002e8 <__aeabi_dsub>
 8017efa:	a335      	add	r3, pc, #212	; (adr r3, 8017fd0 <__ieee754_pow+0x740>)
 8017efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f00:	f7e8 fbaa 	bl	8000658 <__aeabi_dmul>
 8017f04:	a334      	add	r3, pc, #208	; (adr r3, 8017fd8 <__ieee754_pow+0x748>)
 8017f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f0a:	4606      	mov	r6, r0
 8017f0c:	460f      	mov	r7, r1
 8017f0e:	4620      	mov	r0, r4
 8017f10:	4629      	mov	r1, r5
 8017f12:	f7e8 fba1 	bl	8000658 <__aeabi_dmul>
 8017f16:	4602      	mov	r2, r0
 8017f18:	460b      	mov	r3, r1
 8017f1a:	4630      	mov	r0, r6
 8017f1c:	4639      	mov	r1, r7
 8017f1e:	f7e8 f9e5 	bl	80002ec <__adddf3>
 8017f22:	9a07      	ldr	r2, [sp, #28]
 8017f24:	4b37      	ldr	r3, [pc, #220]	; (8018004 <__ieee754_pow+0x774>)
 8017f26:	4413      	add	r3, r2
 8017f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f2c:	f7e8 f9de 	bl	80002ec <__adddf3>
 8017f30:	4682      	mov	sl, r0
 8017f32:	9805      	ldr	r0, [sp, #20]
 8017f34:	468b      	mov	fp, r1
 8017f36:	f7e8 fb25 	bl	8000584 <__aeabi_i2d>
 8017f3a:	9a07      	ldr	r2, [sp, #28]
 8017f3c:	4b32      	ldr	r3, [pc, #200]	; (8018008 <__ieee754_pow+0x778>)
 8017f3e:	4413      	add	r3, r2
 8017f40:	e9d3 8900 	ldrd	r8, r9, [r3]
 8017f44:	4606      	mov	r6, r0
 8017f46:	460f      	mov	r7, r1
 8017f48:	4652      	mov	r2, sl
 8017f4a:	465b      	mov	r3, fp
 8017f4c:	ec51 0b18 	vmov	r0, r1, d8
 8017f50:	f7e8 f9cc 	bl	80002ec <__adddf3>
 8017f54:	4642      	mov	r2, r8
 8017f56:	464b      	mov	r3, r9
 8017f58:	f7e8 f9c8 	bl	80002ec <__adddf3>
 8017f5c:	4632      	mov	r2, r6
 8017f5e:	463b      	mov	r3, r7
 8017f60:	f7e8 f9c4 	bl	80002ec <__adddf3>
 8017f64:	2000      	movs	r0, #0
 8017f66:	4632      	mov	r2, r6
 8017f68:	463b      	mov	r3, r7
 8017f6a:	4604      	mov	r4, r0
 8017f6c:	460d      	mov	r5, r1
 8017f6e:	f7e8 f9bb 	bl	80002e8 <__aeabi_dsub>
 8017f72:	4642      	mov	r2, r8
 8017f74:	464b      	mov	r3, r9
 8017f76:	f7e8 f9b7 	bl	80002e8 <__aeabi_dsub>
 8017f7a:	ec53 2b18 	vmov	r2, r3, d8
 8017f7e:	f7e8 f9b3 	bl	80002e8 <__aeabi_dsub>
 8017f82:	4602      	mov	r2, r0
 8017f84:	460b      	mov	r3, r1
 8017f86:	4650      	mov	r0, sl
 8017f88:	4659      	mov	r1, fp
 8017f8a:	e610      	b.n	8017bae <__ieee754_pow+0x31e>
 8017f8c:	2401      	movs	r4, #1
 8017f8e:	e6a1      	b.n	8017cd4 <__ieee754_pow+0x444>
 8017f90:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8017fe0 <__ieee754_pow+0x750>
 8017f94:	e617      	b.n	8017bc6 <__ieee754_pow+0x336>
 8017f96:	bf00      	nop
 8017f98:	4a454eef 	.word	0x4a454eef
 8017f9c:	3fca7e28 	.word	0x3fca7e28
 8017fa0:	93c9db65 	.word	0x93c9db65
 8017fa4:	3fcd864a 	.word	0x3fcd864a
 8017fa8:	a91d4101 	.word	0xa91d4101
 8017fac:	3fd17460 	.word	0x3fd17460
 8017fb0:	518f264d 	.word	0x518f264d
 8017fb4:	3fd55555 	.word	0x3fd55555
 8017fb8:	db6fabff 	.word	0xdb6fabff
 8017fbc:	3fdb6db6 	.word	0x3fdb6db6
 8017fc0:	33333303 	.word	0x33333303
 8017fc4:	3fe33333 	.word	0x3fe33333
 8017fc8:	e0000000 	.word	0xe0000000
 8017fcc:	3feec709 	.word	0x3feec709
 8017fd0:	dc3a03fd 	.word	0xdc3a03fd
 8017fd4:	3feec709 	.word	0x3feec709
 8017fd8:	145b01f5 	.word	0x145b01f5
 8017fdc:	be3e2fe0 	.word	0xbe3e2fe0
 8017fe0:	00000000 	.word	0x00000000
 8017fe4:	3ff00000 	.word	0x3ff00000
 8017fe8:	7ff00000 	.word	0x7ff00000
 8017fec:	43400000 	.word	0x43400000
 8017ff0:	0003988e 	.word	0x0003988e
 8017ff4:	000bb679 	.word	0x000bb679
 8017ff8:	0805dae8 	.word	0x0805dae8
 8017ffc:	3ff00000 	.word	0x3ff00000
 8018000:	40080000 	.word	0x40080000
 8018004:	0805db08 	.word	0x0805db08
 8018008:	0805daf8 	.word	0x0805daf8
 801800c:	a3b5      	add	r3, pc, #724	; (adr r3, 80182e4 <__ieee754_pow+0xa54>)
 801800e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018012:	4640      	mov	r0, r8
 8018014:	4649      	mov	r1, r9
 8018016:	f7e8 f969 	bl	80002ec <__adddf3>
 801801a:	4622      	mov	r2, r4
 801801c:	ec41 0b1a 	vmov	d10, r0, r1
 8018020:	462b      	mov	r3, r5
 8018022:	4630      	mov	r0, r6
 8018024:	4639      	mov	r1, r7
 8018026:	f7e8 f95f 	bl	80002e8 <__aeabi_dsub>
 801802a:	4602      	mov	r2, r0
 801802c:	460b      	mov	r3, r1
 801802e:	ec51 0b1a 	vmov	r0, r1, d10
 8018032:	f7e8 fda1 	bl	8000b78 <__aeabi_dcmpgt>
 8018036:	2800      	cmp	r0, #0
 8018038:	f47f ae04 	bne.w	8017c44 <__ieee754_pow+0x3b4>
 801803c:	4aa4      	ldr	r2, [pc, #656]	; (80182d0 <__ieee754_pow+0xa40>)
 801803e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8018042:	4293      	cmp	r3, r2
 8018044:	f340 8108 	ble.w	8018258 <__ieee754_pow+0x9c8>
 8018048:	151b      	asrs	r3, r3, #20
 801804a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801804e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8018052:	fa4a f303 	asr.w	r3, sl, r3
 8018056:	445b      	add	r3, fp
 8018058:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801805c:	4e9d      	ldr	r6, [pc, #628]	; (80182d4 <__ieee754_pow+0xa44>)
 801805e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8018062:	4116      	asrs	r6, r2
 8018064:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8018068:	2000      	movs	r0, #0
 801806a:	ea23 0106 	bic.w	r1, r3, r6
 801806e:	f1c2 0214 	rsb	r2, r2, #20
 8018072:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8018076:	fa4a fa02 	asr.w	sl, sl, r2
 801807a:	f1bb 0f00 	cmp.w	fp, #0
 801807e:	4602      	mov	r2, r0
 8018080:	460b      	mov	r3, r1
 8018082:	4620      	mov	r0, r4
 8018084:	4629      	mov	r1, r5
 8018086:	bfb8      	it	lt
 8018088:	f1ca 0a00 	rsblt	sl, sl, #0
 801808c:	f7e8 f92c 	bl	80002e8 <__aeabi_dsub>
 8018090:	ec41 0b19 	vmov	d9, r0, r1
 8018094:	4642      	mov	r2, r8
 8018096:	464b      	mov	r3, r9
 8018098:	ec51 0b19 	vmov	r0, r1, d9
 801809c:	f7e8 f926 	bl	80002ec <__adddf3>
 80180a0:	a37b      	add	r3, pc, #492	; (adr r3, 8018290 <__ieee754_pow+0xa00>)
 80180a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180a6:	2000      	movs	r0, #0
 80180a8:	4604      	mov	r4, r0
 80180aa:	460d      	mov	r5, r1
 80180ac:	f7e8 fad4 	bl	8000658 <__aeabi_dmul>
 80180b0:	ec53 2b19 	vmov	r2, r3, d9
 80180b4:	4606      	mov	r6, r0
 80180b6:	460f      	mov	r7, r1
 80180b8:	4620      	mov	r0, r4
 80180ba:	4629      	mov	r1, r5
 80180bc:	f7e8 f914 	bl	80002e8 <__aeabi_dsub>
 80180c0:	4602      	mov	r2, r0
 80180c2:	460b      	mov	r3, r1
 80180c4:	4640      	mov	r0, r8
 80180c6:	4649      	mov	r1, r9
 80180c8:	f7e8 f90e 	bl	80002e8 <__aeabi_dsub>
 80180cc:	a372      	add	r3, pc, #456	; (adr r3, 8018298 <__ieee754_pow+0xa08>)
 80180ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180d2:	f7e8 fac1 	bl	8000658 <__aeabi_dmul>
 80180d6:	a372      	add	r3, pc, #456	; (adr r3, 80182a0 <__ieee754_pow+0xa10>)
 80180d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180dc:	4680      	mov	r8, r0
 80180de:	4689      	mov	r9, r1
 80180e0:	4620      	mov	r0, r4
 80180e2:	4629      	mov	r1, r5
 80180e4:	f7e8 fab8 	bl	8000658 <__aeabi_dmul>
 80180e8:	4602      	mov	r2, r0
 80180ea:	460b      	mov	r3, r1
 80180ec:	4640      	mov	r0, r8
 80180ee:	4649      	mov	r1, r9
 80180f0:	f7e8 f8fc 	bl	80002ec <__adddf3>
 80180f4:	4604      	mov	r4, r0
 80180f6:	460d      	mov	r5, r1
 80180f8:	4602      	mov	r2, r0
 80180fa:	460b      	mov	r3, r1
 80180fc:	4630      	mov	r0, r6
 80180fe:	4639      	mov	r1, r7
 8018100:	f7e8 f8f4 	bl	80002ec <__adddf3>
 8018104:	4632      	mov	r2, r6
 8018106:	463b      	mov	r3, r7
 8018108:	4680      	mov	r8, r0
 801810a:	4689      	mov	r9, r1
 801810c:	f7e8 f8ec 	bl	80002e8 <__aeabi_dsub>
 8018110:	4602      	mov	r2, r0
 8018112:	460b      	mov	r3, r1
 8018114:	4620      	mov	r0, r4
 8018116:	4629      	mov	r1, r5
 8018118:	f7e8 f8e6 	bl	80002e8 <__aeabi_dsub>
 801811c:	4642      	mov	r2, r8
 801811e:	4606      	mov	r6, r0
 8018120:	460f      	mov	r7, r1
 8018122:	464b      	mov	r3, r9
 8018124:	4640      	mov	r0, r8
 8018126:	4649      	mov	r1, r9
 8018128:	f7e8 fa96 	bl	8000658 <__aeabi_dmul>
 801812c:	a35e      	add	r3, pc, #376	; (adr r3, 80182a8 <__ieee754_pow+0xa18>)
 801812e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018132:	4604      	mov	r4, r0
 8018134:	460d      	mov	r5, r1
 8018136:	f7e8 fa8f 	bl	8000658 <__aeabi_dmul>
 801813a:	a35d      	add	r3, pc, #372	; (adr r3, 80182b0 <__ieee754_pow+0xa20>)
 801813c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018140:	f7e8 f8d2 	bl	80002e8 <__aeabi_dsub>
 8018144:	4622      	mov	r2, r4
 8018146:	462b      	mov	r3, r5
 8018148:	f7e8 fa86 	bl	8000658 <__aeabi_dmul>
 801814c:	a35a      	add	r3, pc, #360	; (adr r3, 80182b8 <__ieee754_pow+0xa28>)
 801814e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018152:	f7e8 f8cb 	bl	80002ec <__adddf3>
 8018156:	4622      	mov	r2, r4
 8018158:	462b      	mov	r3, r5
 801815a:	f7e8 fa7d 	bl	8000658 <__aeabi_dmul>
 801815e:	a358      	add	r3, pc, #352	; (adr r3, 80182c0 <__ieee754_pow+0xa30>)
 8018160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018164:	f7e8 f8c0 	bl	80002e8 <__aeabi_dsub>
 8018168:	4622      	mov	r2, r4
 801816a:	462b      	mov	r3, r5
 801816c:	f7e8 fa74 	bl	8000658 <__aeabi_dmul>
 8018170:	a355      	add	r3, pc, #340	; (adr r3, 80182c8 <__ieee754_pow+0xa38>)
 8018172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018176:	f7e8 f8b9 	bl	80002ec <__adddf3>
 801817a:	4622      	mov	r2, r4
 801817c:	462b      	mov	r3, r5
 801817e:	f7e8 fa6b 	bl	8000658 <__aeabi_dmul>
 8018182:	4602      	mov	r2, r0
 8018184:	460b      	mov	r3, r1
 8018186:	4640      	mov	r0, r8
 8018188:	4649      	mov	r1, r9
 801818a:	f7e8 f8ad 	bl	80002e8 <__aeabi_dsub>
 801818e:	4604      	mov	r4, r0
 8018190:	460d      	mov	r5, r1
 8018192:	4602      	mov	r2, r0
 8018194:	460b      	mov	r3, r1
 8018196:	4640      	mov	r0, r8
 8018198:	4649      	mov	r1, r9
 801819a:	f7e8 fa5d 	bl	8000658 <__aeabi_dmul>
 801819e:	2200      	movs	r2, #0
 80181a0:	ec41 0b19 	vmov	d9, r0, r1
 80181a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80181a8:	4620      	mov	r0, r4
 80181aa:	4629      	mov	r1, r5
 80181ac:	f7e8 f89c 	bl	80002e8 <__aeabi_dsub>
 80181b0:	4602      	mov	r2, r0
 80181b2:	460b      	mov	r3, r1
 80181b4:	ec51 0b19 	vmov	r0, r1, d9
 80181b8:	f7e8 fb78 	bl	80008ac <__aeabi_ddiv>
 80181bc:	4632      	mov	r2, r6
 80181be:	4604      	mov	r4, r0
 80181c0:	460d      	mov	r5, r1
 80181c2:	463b      	mov	r3, r7
 80181c4:	4640      	mov	r0, r8
 80181c6:	4649      	mov	r1, r9
 80181c8:	f7e8 fa46 	bl	8000658 <__aeabi_dmul>
 80181cc:	4632      	mov	r2, r6
 80181ce:	463b      	mov	r3, r7
 80181d0:	f7e8 f88c 	bl	80002ec <__adddf3>
 80181d4:	4602      	mov	r2, r0
 80181d6:	460b      	mov	r3, r1
 80181d8:	4620      	mov	r0, r4
 80181da:	4629      	mov	r1, r5
 80181dc:	f7e8 f884 	bl	80002e8 <__aeabi_dsub>
 80181e0:	4642      	mov	r2, r8
 80181e2:	464b      	mov	r3, r9
 80181e4:	f7e8 f880 	bl	80002e8 <__aeabi_dsub>
 80181e8:	460b      	mov	r3, r1
 80181ea:	4602      	mov	r2, r0
 80181ec:	493a      	ldr	r1, [pc, #232]	; (80182d8 <__ieee754_pow+0xa48>)
 80181ee:	2000      	movs	r0, #0
 80181f0:	f7e8 f87a 	bl	80002e8 <__aeabi_dsub>
 80181f4:	ec41 0b10 	vmov	d0, r0, r1
 80181f8:	ee10 3a90 	vmov	r3, s1
 80181fc:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8018200:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8018204:	da2b      	bge.n	801825e <__ieee754_pow+0x9ce>
 8018206:	4650      	mov	r0, sl
 8018208:	f000 f966 	bl	80184d8 <scalbn>
 801820c:	ec51 0b10 	vmov	r0, r1, d0
 8018210:	ec53 2b18 	vmov	r2, r3, d8
 8018214:	f7ff bbed 	b.w	80179f2 <__ieee754_pow+0x162>
 8018218:	4b30      	ldr	r3, [pc, #192]	; (80182dc <__ieee754_pow+0xa4c>)
 801821a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801821e:	429e      	cmp	r6, r3
 8018220:	f77f af0c 	ble.w	801803c <__ieee754_pow+0x7ac>
 8018224:	4b2e      	ldr	r3, [pc, #184]	; (80182e0 <__ieee754_pow+0xa50>)
 8018226:	440b      	add	r3, r1
 8018228:	4303      	orrs	r3, r0
 801822a:	d009      	beq.n	8018240 <__ieee754_pow+0x9b0>
 801822c:	ec51 0b18 	vmov	r0, r1, d8
 8018230:	2200      	movs	r2, #0
 8018232:	2300      	movs	r3, #0
 8018234:	f7e8 fc82 	bl	8000b3c <__aeabi_dcmplt>
 8018238:	3800      	subs	r0, #0
 801823a:	bf18      	it	ne
 801823c:	2001      	movne	r0, #1
 801823e:	e447      	b.n	8017ad0 <__ieee754_pow+0x240>
 8018240:	4622      	mov	r2, r4
 8018242:	462b      	mov	r3, r5
 8018244:	f7e8 f850 	bl	80002e8 <__aeabi_dsub>
 8018248:	4642      	mov	r2, r8
 801824a:	464b      	mov	r3, r9
 801824c:	f7e8 fc8a 	bl	8000b64 <__aeabi_dcmpge>
 8018250:	2800      	cmp	r0, #0
 8018252:	f43f aef3 	beq.w	801803c <__ieee754_pow+0x7ac>
 8018256:	e7e9      	b.n	801822c <__ieee754_pow+0x99c>
 8018258:	f04f 0a00 	mov.w	sl, #0
 801825c:	e71a      	b.n	8018094 <__ieee754_pow+0x804>
 801825e:	ec51 0b10 	vmov	r0, r1, d0
 8018262:	4619      	mov	r1, r3
 8018264:	e7d4      	b.n	8018210 <__ieee754_pow+0x980>
 8018266:	491c      	ldr	r1, [pc, #112]	; (80182d8 <__ieee754_pow+0xa48>)
 8018268:	2000      	movs	r0, #0
 801826a:	f7ff bb30 	b.w	80178ce <__ieee754_pow+0x3e>
 801826e:	2000      	movs	r0, #0
 8018270:	2100      	movs	r1, #0
 8018272:	f7ff bb2c 	b.w	80178ce <__ieee754_pow+0x3e>
 8018276:	4630      	mov	r0, r6
 8018278:	4639      	mov	r1, r7
 801827a:	f7ff bb28 	b.w	80178ce <__ieee754_pow+0x3e>
 801827e:	9204      	str	r2, [sp, #16]
 8018280:	f7ff bb7a 	b.w	8017978 <__ieee754_pow+0xe8>
 8018284:	2300      	movs	r3, #0
 8018286:	f7ff bb64 	b.w	8017952 <__ieee754_pow+0xc2>
 801828a:	bf00      	nop
 801828c:	f3af 8000 	nop.w
 8018290:	00000000 	.word	0x00000000
 8018294:	3fe62e43 	.word	0x3fe62e43
 8018298:	fefa39ef 	.word	0xfefa39ef
 801829c:	3fe62e42 	.word	0x3fe62e42
 80182a0:	0ca86c39 	.word	0x0ca86c39
 80182a4:	be205c61 	.word	0xbe205c61
 80182a8:	72bea4d0 	.word	0x72bea4d0
 80182ac:	3e663769 	.word	0x3e663769
 80182b0:	c5d26bf1 	.word	0xc5d26bf1
 80182b4:	3ebbbd41 	.word	0x3ebbbd41
 80182b8:	af25de2c 	.word	0xaf25de2c
 80182bc:	3f11566a 	.word	0x3f11566a
 80182c0:	16bebd93 	.word	0x16bebd93
 80182c4:	3f66c16c 	.word	0x3f66c16c
 80182c8:	5555553e 	.word	0x5555553e
 80182cc:	3fc55555 	.word	0x3fc55555
 80182d0:	3fe00000 	.word	0x3fe00000
 80182d4:	000fffff 	.word	0x000fffff
 80182d8:	3ff00000 	.word	0x3ff00000
 80182dc:	4090cbff 	.word	0x4090cbff
 80182e0:	3f6f3400 	.word	0x3f6f3400
 80182e4:	652b82fe 	.word	0x652b82fe
 80182e8:	3c971547 	.word	0x3c971547

080182ec <__ieee754_sqrt>:
 80182ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80182f0:	ec55 4b10 	vmov	r4, r5, d0
 80182f4:	4e55      	ldr	r6, [pc, #340]	; (801844c <__ieee754_sqrt+0x160>)
 80182f6:	43ae      	bics	r6, r5
 80182f8:	ee10 0a10 	vmov	r0, s0
 80182fc:	ee10 3a10 	vmov	r3, s0
 8018300:	462a      	mov	r2, r5
 8018302:	4629      	mov	r1, r5
 8018304:	d110      	bne.n	8018328 <__ieee754_sqrt+0x3c>
 8018306:	ee10 2a10 	vmov	r2, s0
 801830a:	462b      	mov	r3, r5
 801830c:	f7e8 f9a4 	bl	8000658 <__aeabi_dmul>
 8018310:	4602      	mov	r2, r0
 8018312:	460b      	mov	r3, r1
 8018314:	4620      	mov	r0, r4
 8018316:	4629      	mov	r1, r5
 8018318:	f7e7 ffe8 	bl	80002ec <__adddf3>
 801831c:	4604      	mov	r4, r0
 801831e:	460d      	mov	r5, r1
 8018320:	ec45 4b10 	vmov	d0, r4, r5
 8018324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018328:	2d00      	cmp	r5, #0
 801832a:	dc10      	bgt.n	801834e <__ieee754_sqrt+0x62>
 801832c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8018330:	4330      	orrs	r0, r6
 8018332:	d0f5      	beq.n	8018320 <__ieee754_sqrt+0x34>
 8018334:	b15d      	cbz	r5, 801834e <__ieee754_sqrt+0x62>
 8018336:	ee10 2a10 	vmov	r2, s0
 801833a:	462b      	mov	r3, r5
 801833c:	ee10 0a10 	vmov	r0, s0
 8018340:	f7e7 ffd2 	bl	80002e8 <__aeabi_dsub>
 8018344:	4602      	mov	r2, r0
 8018346:	460b      	mov	r3, r1
 8018348:	f7e8 fab0 	bl	80008ac <__aeabi_ddiv>
 801834c:	e7e6      	b.n	801831c <__ieee754_sqrt+0x30>
 801834e:	1512      	asrs	r2, r2, #20
 8018350:	d074      	beq.n	801843c <__ieee754_sqrt+0x150>
 8018352:	07d4      	lsls	r4, r2, #31
 8018354:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8018358:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 801835c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8018360:	bf5e      	ittt	pl
 8018362:	0fda      	lsrpl	r2, r3, #31
 8018364:	005b      	lslpl	r3, r3, #1
 8018366:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 801836a:	2400      	movs	r4, #0
 801836c:	0fda      	lsrs	r2, r3, #31
 801836e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8018372:	107f      	asrs	r7, r7, #1
 8018374:	005b      	lsls	r3, r3, #1
 8018376:	2516      	movs	r5, #22
 8018378:	4620      	mov	r0, r4
 801837a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801837e:	1886      	adds	r6, r0, r2
 8018380:	428e      	cmp	r6, r1
 8018382:	bfde      	ittt	le
 8018384:	1b89      	suble	r1, r1, r6
 8018386:	18b0      	addle	r0, r6, r2
 8018388:	18a4      	addle	r4, r4, r2
 801838a:	0049      	lsls	r1, r1, #1
 801838c:	3d01      	subs	r5, #1
 801838e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8018392:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8018396:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801839a:	d1f0      	bne.n	801837e <__ieee754_sqrt+0x92>
 801839c:	462a      	mov	r2, r5
 801839e:	f04f 0e20 	mov.w	lr, #32
 80183a2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80183a6:	4281      	cmp	r1, r0
 80183a8:	eb06 0c05 	add.w	ip, r6, r5
 80183ac:	dc02      	bgt.n	80183b4 <__ieee754_sqrt+0xc8>
 80183ae:	d113      	bne.n	80183d8 <__ieee754_sqrt+0xec>
 80183b0:	459c      	cmp	ip, r3
 80183b2:	d811      	bhi.n	80183d8 <__ieee754_sqrt+0xec>
 80183b4:	f1bc 0f00 	cmp.w	ip, #0
 80183b8:	eb0c 0506 	add.w	r5, ip, r6
 80183bc:	da43      	bge.n	8018446 <__ieee754_sqrt+0x15a>
 80183be:	2d00      	cmp	r5, #0
 80183c0:	db41      	blt.n	8018446 <__ieee754_sqrt+0x15a>
 80183c2:	f100 0801 	add.w	r8, r0, #1
 80183c6:	1a09      	subs	r1, r1, r0
 80183c8:	459c      	cmp	ip, r3
 80183ca:	bf88      	it	hi
 80183cc:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80183d0:	eba3 030c 	sub.w	r3, r3, ip
 80183d4:	4432      	add	r2, r6
 80183d6:	4640      	mov	r0, r8
 80183d8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80183dc:	f1be 0e01 	subs.w	lr, lr, #1
 80183e0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80183e4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80183e8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80183ec:	d1db      	bne.n	80183a6 <__ieee754_sqrt+0xba>
 80183ee:	430b      	orrs	r3, r1
 80183f0:	d006      	beq.n	8018400 <__ieee754_sqrt+0x114>
 80183f2:	1c50      	adds	r0, r2, #1
 80183f4:	bf13      	iteet	ne
 80183f6:	3201      	addne	r2, #1
 80183f8:	3401      	addeq	r4, #1
 80183fa:	4672      	moveq	r2, lr
 80183fc:	f022 0201 	bicne.w	r2, r2, #1
 8018400:	1063      	asrs	r3, r4, #1
 8018402:	0852      	lsrs	r2, r2, #1
 8018404:	07e1      	lsls	r1, r4, #31
 8018406:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801840a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801840e:	bf48      	it	mi
 8018410:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8018414:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8018418:	4614      	mov	r4, r2
 801841a:	e781      	b.n	8018320 <__ieee754_sqrt+0x34>
 801841c:	0ad9      	lsrs	r1, r3, #11
 801841e:	3815      	subs	r0, #21
 8018420:	055b      	lsls	r3, r3, #21
 8018422:	2900      	cmp	r1, #0
 8018424:	d0fa      	beq.n	801841c <__ieee754_sqrt+0x130>
 8018426:	02cd      	lsls	r5, r1, #11
 8018428:	d50a      	bpl.n	8018440 <__ieee754_sqrt+0x154>
 801842a:	f1c2 0420 	rsb	r4, r2, #32
 801842e:	fa23 f404 	lsr.w	r4, r3, r4
 8018432:	1e55      	subs	r5, r2, #1
 8018434:	4093      	lsls	r3, r2
 8018436:	4321      	orrs	r1, r4
 8018438:	1b42      	subs	r2, r0, r5
 801843a:	e78a      	b.n	8018352 <__ieee754_sqrt+0x66>
 801843c:	4610      	mov	r0, r2
 801843e:	e7f0      	b.n	8018422 <__ieee754_sqrt+0x136>
 8018440:	0049      	lsls	r1, r1, #1
 8018442:	3201      	adds	r2, #1
 8018444:	e7ef      	b.n	8018426 <__ieee754_sqrt+0x13a>
 8018446:	4680      	mov	r8, r0
 8018448:	e7bd      	b.n	80183c6 <__ieee754_sqrt+0xda>
 801844a:	bf00      	nop
 801844c:	7ff00000 	.word	0x7ff00000

08018450 <with_errno>:
 8018450:	b570      	push	{r4, r5, r6, lr}
 8018452:	4604      	mov	r4, r0
 8018454:	460d      	mov	r5, r1
 8018456:	4616      	mov	r6, r2
 8018458:	f7fa f840 	bl	80124dc <__errno>
 801845c:	4629      	mov	r1, r5
 801845e:	6006      	str	r6, [r0, #0]
 8018460:	4620      	mov	r0, r4
 8018462:	bd70      	pop	{r4, r5, r6, pc}

08018464 <xflow>:
 8018464:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018466:	4614      	mov	r4, r2
 8018468:	461d      	mov	r5, r3
 801846a:	b108      	cbz	r0, 8018470 <xflow+0xc>
 801846c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8018470:	e9cd 2300 	strd	r2, r3, [sp]
 8018474:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018478:	4620      	mov	r0, r4
 801847a:	4629      	mov	r1, r5
 801847c:	f7e8 f8ec 	bl	8000658 <__aeabi_dmul>
 8018480:	2222      	movs	r2, #34	; 0x22
 8018482:	b003      	add	sp, #12
 8018484:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018488:	f7ff bfe2 	b.w	8018450 <with_errno>

0801848c <__math_uflow>:
 801848c:	b508      	push	{r3, lr}
 801848e:	2200      	movs	r2, #0
 8018490:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8018494:	f7ff ffe6 	bl	8018464 <xflow>
 8018498:	ec41 0b10 	vmov	d0, r0, r1
 801849c:	bd08      	pop	{r3, pc}

0801849e <__math_oflow>:
 801849e:	b508      	push	{r3, lr}
 80184a0:	2200      	movs	r2, #0
 80184a2:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80184a6:	f7ff ffdd 	bl	8018464 <xflow>
 80184aa:	ec41 0b10 	vmov	d0, r0, r1
 80184ae:	bd08      	pop	{r3, pc}

080184b0 <fabs>:
 80184b0:	ec51 0b10 	vmov	r0, r1, d0
 80184b4:	ee10 2a10 	vmov	r2, s0
 80184b8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80184bc:	ec43 2b10 	vmov	d0, r2, r3
 80184c0:	4770      	bx	lr

080184c2 <finite>:
 80184c2:	b082      	sub	sp, #8
 80184c4:	ed8d 0b00 	vstr	d0, [sp]
 80184c8:	9801      	ldr	r0, [sp, #4]
 80184ca:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80184ce:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80184d2:	0fc0      	lsrs	r0, r0, #31
 80184d4:	b002      	add	sp, #8
 80184d6:	4770      	bx	lr

080184d8 <scalbn>:
 80184d8:	b570      	push	{r4, r5, r6, lr}
 80184da:	ec55 4b10 	vmov	r4, r5, d0
 80184de:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80184e2:	4606      	mov	r6, r0
 80184e4:	462b      	mov	r3, r5
 80184e6:	b99a      	cbnz	r2, 8018510 <scalbn+0x38>
 80184e8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80184ec:	4323      	orrs	r3, r4
 80184ee:	d036      	beq.n	801855e <scalbn+0x86>
 80184f0:	4b39      	ldr	r3, [pc, #228]	; (80185d8 <scalbn+0x100>)
 80184f2:	4629      	mov	r1, r5
 80184f4:	ee10 0a10 	vmov	r0, s0
 80184f8:	2200      	movs	r2, #0
 80184fa:	f7e8 f8ad 	bl	8000658 <__aeabi_dmul>
 80184fe:	4b37      	ldr	r3, [pc, #220]	; (80185dc <scalbn+0x104>)
 8018500:	429e      	cmp	r6, r3
 8018502:	4604      	mov	r4, r0
 8018504:	460d      	mov	r5, r1
 8018506:	da10      	bge.n	801852a <scalbn+0x52>
 8018508:	a32b      	add	r3, pc, #172	; (adr r3, 80185b8 <scalbn+0xe0>)
 801850a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801850e:	e03a      	b.n	8018586 <scalbn+0xae>
 8018510:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8018514:	428a      	cmp	r2, r1
 8018516:	d10c      	bne.n	8018532 <scalbn+0x5a>
 8018518:	ee10 2a10 	vmov	r2, s0
 801851c:	4620      	mov	r0, r4
 801851e:	4629      	mov	r1, r5
 8018520:	f7e7 fee4 	bl	80002ec <__adddf3>
 8018524:	4604      	mov	r4, r0
 8018526:	460d      	mov	r5, r1
 8018528:	e019      	b.n	801855e <scalbn+0x86>
 801852a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801852e:	460b      	mov	r3, r1
 8018530:	3a36      	subs	r2, #54	; 0x36
 8018532:	4432      	add	r2, r6
 8018534:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8018538:	428a      	cmp	r2, r1
 801853a:	dd08      	ble.n	801854e <scalbn+0x76>
 801853c:	2d00      	cmp	r5, #0
 801853e:	a120      	add	r1, pc, #128	; (adr r1, 80185c0 <scalbn+0xe8>)
 8018540:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018544:	da1c      	bge.n	8018580 <scalbn+0xa8>
 8018546:	a120      	add	r1, pc, #128	; (adr r1, 80185c8 <scalbn+0xf0>)
 8018548:	e9d1 0100 	ldrd	r0, r1, [r1]
 801854c:	e018      	b.n	8018580 <scalbn+0xa8>
 801854e:	2a00      	cmp	r2, #0
 8018550:	dd08      	ble.n	8018564 <scalbn+0x8c>
 8018552:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8018556:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801855a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801855e:	ec45 4b10 	vmov	d0, r4, r5
 8018562:	bd70      	pop	{r4, r5, r6, pc}
 8018564:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8018568:	da19      	bge.n	801859e <scalbn+0xc6>
 801856a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801856e:	429e      	cmp	r6, r3
 8018570:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8018574:	dd0a      	ble.n	801858c <scalbn+0xb4>
 8018576:	a112      	add	r1, pc, #72	; (adr r1, 80185c0 <scalbn+0xe8>)
 8018578:	e9d1 0100 	ldrd	r0, r1, [r1]
 801857c:	2b00      	cmp	r3, #0
 801857e:	d1e2      	bne.n	8018546 <scalbn+0x6e>
 8018580:	a30f      	add	r3, pc, #60	; (adr r3, 80185c0 <scalbn+0xe8>)
 8018582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018586:	f7e8 f867 	bl	8000658 <__aeabi_dmul>
 801858a:	e7cb      	b.n	8018524 <scalbn+0x4c>
 801858c:	a10a      	add	r1, pc, #40	; (adr r1, 80185b8 <scalbn+0xe0>)
 801858e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018592:	2b00      	cmp	r3, #0
 8018594:	d0b8      	beq.n	8018508 <scalbn+0x30>
 8018596:	a10e      	add	r1, pc, #56	; (adr r1, 80185d0 <scalbn+0xf8>)
 8018598:	e9d1 0100 	ldrd	r0, r1, [r1]
 801859c:	e7b4      	b.n	8018508 <scalbn+0x30>
 801859e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80185a2:	3236      	adds	r2, #54	; 0x36
 80185a4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80185a8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80185ac:	4620      	mov	r0, r4
 80185ae:	4b0c      	ldr	r3, [pc, #48]	; (80185e0 <scalbn+0x108>)
 80185b0:	2200      	movs	r2, #0
 80185b2:	e7e8      	b.n	8018586 <scalbn+0xae>
 80185b4:	f3af 8000 	nop.w
 80185b8:	c2f8f359 	.word	0xc2f8f359
 80185bc:	01a56e1f 	.word	0x01a56e1f
 80185c0:	8800759c 	.word	0x8800759c
 80185c4:	7e37e43c 	.word	0x7e37e43c
 80185c8:	8800759c 	.word	0x8800759c
 80185cc:	fe37e43c 	.word	0xfe37e43c
 80185d0:	c2f8f359 	.word	0xc2f8f359
 80185d4:	81a56e1f 	.word	0x81a56e1f
 80185d8:	43500000 	.word	0x43500000
 80185dc:	ffff3cb0 	.word	0xffff3cb0
 80185e0:	3c900000 	.word	0x3c900000

080185e4 <_close>:
 80185e4:	4b02      	ldr	r3, [pc, #8]	; (80185f0 <_close+0xc>)
 80185e6:	2258      	movs	r2, #88	; 0x58
 80185e8:	601a      	str	r2, [r3, #0]
 80185ea:	f04f 30ff 	mov.w	r0, #4294967295
 80185ee:	4770      	bx	lr
 80185f0:	2000c66c 	.word	0x2000c66c

080185f4 <_fstat>:
 80185f4:	4b02      	ldr	r3, [pc, #8]	; (8018600 <_fstat+0xc>)
 80185f6:	2258      	movs	r2, #88	; 0x58
 80185f8:	601a      	str	r2, [r3, #0]
 80185fa:	f04f 30ff 	mov.w	r0, #4294967295
 80185fe:	4770      	bx	lr
 8018600:	2000c66c 	.word	0x2000c66c

08018604 <_getpid>:
 8018604:	4b02      	ldr	r3, [pc, #8]	; (8018610 <_getpid+0xc>)
 8018606:	2258      	movs	r2, #88	; 0x58
 8018608:	601a      	str	r2, [r3, #0]
 801860a:	f04f 30ff 	mov.w	r0, #4294967295
 801860e:	4770      	bx	lr
 8018610:	2000c66c 	.word	0x2000c66c

08018614 <_isatty>:
 8018614:	4b02      	ldr	r3, [pc, #8]	; (8018620 <_isatty+0xc>)
 8018616:	2258      	movs	r2, #88	; 0x58
 8018618:	601a      	str	r2, [r3, #0]
 801861a:	2000      	movs	r0, #0
 801861c:	4770      	bx	lr
 801861e:	bf00      	nop
 8018620:	2000c66c 	.word	0x2000c66c

08018624 <_kill>:
 8018624:	4b02      	ldr	r3, [pc, #8]	; (8018630 <_kill+0xc>)
 8018626:	2258      	movs	r2, #88	; 0x58
 8018628:	601a      	str	r2, [r3, #0]
 801862a:	f04f 30ff 	mov.w	r0, #4294967295
 801862e:	4770      	bx	lr
 8018630:	2000c66c 	.word	0x2000c66c

08018634 <_lseek>:
 8018634:	4b02      	ldr	r3, [pc, #8]	; (8018640 <_lseek+0xc>)
 8018636:	2258      	movs	r2, #88	; 0x58
 8018638:	601a      	str	r2, [r3, #0]
 801863a:	f04f 30ff 	mov.w	r0, #4294967295
 801863e:	4770      	bx	lr
 8018640:	2000c66c 	.word	0x2000c66c

08018644 <_read>:
 8018644:	4b02      	ldr	r3, [pc, #8]	; (8018650 <_read+0xc>)
 8018646:	2258      	movs	r2, #88	; 0x58
 8018648:	601a      	str	r2, [r3, #0]
 801864a:	f04f 30ff 	mov.w	r0, #4294967295
 801864e:	4770      	bx	lr
 8018650:	2000c66c 	.word	0x2000c66c

08018654 <_write>:
 8018654:	4b02      	ldr	r3, [pc, #8]	; (8018660 <_write+0xc>)
 8018656:	2258      	movs	r2, #88	; 0x58
 8018658:	601a      	str	r2, [r3, #0]
 801865a:	f04f 30ff 	mov.w	r0, #4294967295
 801865e:	4770      	bx	lr
 8018660:	2000c66c 	.word	0x2000c66c

08018664 <_exit>:
 8018664:	e7fe      	b.n	8018664 <_exit>
	...

08018668 <_init>:
 8018668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801866a:	bf00      	nop
 801866c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801866e:	bc08      	pop	{r3}
 8018670:	469e      	mov	lr, r3
 8018672:	4770      	bx	lr

08018674 <_fini>:
 8018674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018676:	bf00      	nop
 8018678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801867a:	bc08      	pop	{r3}
 801867c:	469e      	mov	lr, r3
 801867e:	4770      	bx	lr
