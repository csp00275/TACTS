
TACTS_Inference.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000184d0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000454a0  080186a0  080186a0  000196a0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0805db40  0805db40  00060638  2**0
                  CONTENTS
  4 .ARM          00000008  0805db40  0805db40  0005eb40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0805db48  0805db48  00060638  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0805db48  0805db48  0005eb48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0805db4c  0805db4c  0005eb4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001638  20000000  0805db50  0005f000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b174  20001640  0805f188  00060640  2**5
                  ALLOC
 10 ._user_heap_stack 00001004  2000c7b4  0805f188  000607b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00060638  2**0
                  CONTENTS, READONLY
 12 .debug_info   000256e2  00000000  00000000  00060668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b64  00000000  00000000  00085d4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001950  00000000  00000000  0008a8b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001394  00000000  00000000  0008c200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c349  00000000  00000000  0008d594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024ba2  00000000  00000000  000b98dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001060f1  00000000  00000000  000de47f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000093  00000000  00000000  001e4570  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008484  00000000  00000000  001e4604  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  001eca88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20001640 	.word	0x20001640
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08018688 	.word	0x08018688

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20001644 	.word	0x20001644
 800020c:	08018688 	.word	0x08018688

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b9a0 	b.w	8001040 <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f83c 	bl	8000d84 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_d2lz>:
 8000d18:	b538      	push	{r3, r4, r5, lr}
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	4604      	mov	r4, r0
 8000d20:	460d      	mov	r5, r1
 8000d22:	f7ff ff0b 	bl	8000b3c <__aeabi_dcmplt>
 8000d26:	b928      	cbnz	r0, 8000d34 <__aeabi_d2lz+0x1c>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	4629      	mov	r1, r5
 8000d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d30:	f000 b80a 	b.w	8000d48 <__aeabi_d2ulz>
 8000d34:	4620      	mov	r0, r4
 8000d36:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d3a:	f000 f805 	bl	8000d48 <__aeabi_d2ulz>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	bd38      	pop	{r3, r4, r5, pc}
 8000d46:	bf00      	nop

08000d48 <__aeabi_d2ulz>:
 8000d48:	b5d0      	push	{r4, r6, r7, lr}
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d7c <__aeabi_d2ulz+0x34>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4606      	mov	r6, r0
 8000d50:	460f      	mov	r7, r1
 8000d52:	f7ff fc81 	bl	8000658 <__aeabi_dmul>
 8000d56:	f7ff ff57 	bl	8000c08 <__aeabi_d2uiz>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	f7ff fc02 	bl	8000564 <__aeabi_ui2d>
 8000d60:	4b07      	ldr	r3, [pc, #28]	@ (8000d80 <__aeabi_d2ulz+0x38>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f7ff fc78 	bl	8000658 <__aeabi_dmul>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	4639      	mov	r1, r7
 8000d70:	f7ff faba 	bl	80002e8 <__aeabi_dsub>
 8000d74:	f7ff ff48 	bl	8000c08 <__aeabi_d2uiz>
 8000d78:	4621      	mov	r1, r4
 8000d7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d7c:	3df00000 	.word	0x3df00000
 8000d80:	41f00000 	.word	0x41f00000

08000d84 <__udivmoddi4>:
 8000d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d88:	9d08      	ldr	r5, [sp, #32]
 8000d8a:	460c      	mov	r4, r1
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d14e      	bne.n	8000e2e <__udivmoddi4+0xaa>
 8000d90:	4694      	mov	ip, r2
 8000d92:	458c      	cmp	ip, r1
 8000d94:	4686      	mov	lr, r0
 8000d96:	fab2 f282 	clz	r2, r2
 8000d9a:	d962      	bls.n	8000e62 <__udivmoddi4+0xde>
 8000d9c:	b14a      	cbz	r2, 8000db2 <__udivmoddi4+0x2e>
 8000d9e:	f1c2 0320 	rsb	r3, r2, #32
 8000da2:	4091      	lsls	r1, r2
 8000da4:	fa20 f303 	lsr.w	r3, r0, r3
 8000da8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dac:	4319      	orrs	r1, r3
 8000dae:	fa00 fe02 	lsl.w	lr, r0, r2
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f f68c 	uxth.w	r6, ip
 8000dba:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dc2:	fb07 1114 	mls	r1, r7, r4, r1
 8000dc6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dca:	fb04 f106 	mul.w	r1, r4, r6
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	d90a      	bls.n	8000de8 <__udivmoddi4+0x64>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dda:	f080 8112 	bcs.w	8001002 <__udivmoddi4+0x27e>
 8000dde:	4299      	cmp	r1, r3
 8000de0:	f240 810f 	bls.w	8001002 <__udivmoddi4+0x27e>
 8000de4:	3c02      	subs	r4, #2
 8000de6:	4463      	add	r3, ip
 8000de8:	1a59      	subs	r1, r3, r1
 8000dea:	fa1f f38e 	uxth.w	r3, lr
 8000dee:	fbb1 f0f7 	udiv	r0, r1, r7
 8000df2:	fb07 1110 	mls	r1, r7, r0, r1
 8000df6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dfa:	fb00 f606 	mul.w	r6, r0, r6
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	d90a      	bls.n	8000e18 <__udivmoddi4+0x94>
 8000e02:	eb1c 0303 	adds.w	r3, ip, r3
 8000e06:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e0a:	f080 80fc 	bcs.w	8001006 <__udivmoddi4+0x282>
 8000e0e:	429e      	cmp	r6, r3
 8000e10:	f240 80f9 	bls.w	8001006 <__udivmoddi4+0x282>
 8000e14:	4463      	add	r3, ip
 8000e16:	3802      	subs	r0, #2
 8000e18:	1b9b      	subs	r3, r3, r6
 8000e1a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e1e:	2100      	movs	r1, #0
 8000e20:	b11d      	cbz	r5, 8000e2a <__udivmoddi4+0xa6>
 8000e22:	40d3      	lsrs	r3, r2
 8000e24:	2200      	movs	r2, #0
 8000e26:	e9c5 3200 	strd	r3, r2, [r5]
 8000e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d905      	bls.n	8000e3e <__udivmoddi4+0xba>
 8000e32:	b10d      	cbz	r5, 8000e38 <__udivmoddi4+0xb4>
 8000e34:	e9c5 0100 	strd	r0, r1, [r5]
 8000e38:	2100      	movs	r1, #0
 8000e3a:	4608      	mov	r0, r1
 8000e3c:	e7f5      	b.n	8000e2a <__udivmoddi4+0xa6>
 8000e3e:	fab3 f183 	clz	r1, r3
 8000e42:	2900      	cmp	r1, #0
 8000e44:	d146      	bne.n	8000ed4 <__udivmoddi4+0x150>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d302      	bcc.n	8000e50 <__udivmoddi4+0xcc>
 8000e4a:	4290      	cmp	r0, r2
 8000e4c:	f0c0 80f0 	bcc.w	8001030 <__udivmoddi4+0x2ac>
 8000e50:	1a86      	subs	r6, r0, r2
 8000e52:	eb64 0303 	sbc.w	r3, r4, r3
 8000e56:	2001      	movs	r0, #1
 8000e58:	2d00      	cmp	r5, #0
 8000e5a:	d0e6      	beq.n	8000e2a <__udivmoddi4+0xa6>
 8000e5c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e60:	e7e3      	b.n	8000e2a <__udivmoddi4+0xa6>
 8000e62:	2a00      	cmp	r2, #0
 8000e64:	f040 8090 	bne.w	8000f88 <__udivmoddi4+0x204>
 8000e68:	eba1 040c 	sub.w	r4, r1, ip
 8000e6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e70:	fa1f f78c 	uxth.w	r7, ip
 8000e74:	2101      	movs	r1, #1
 8000e76:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e7a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e7e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e82:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e86:	fb07 f006 	mul.w	r0, r7, r6
 8000e8a:	4298      	cmp	r0, r3
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x11c>
 8000e8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e92:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e96:	d202      	bcs.n	8000e9e <__udivmoddi4+0x11a>
 8000e98:	4298      	cmp	r0, r3
 8000e9a:	f200 80cd 	bhi.w	8001038 <__udivmoddi4+0x2b4>
 8000e9e:	4626      	mov	r6, r4
 8000ea0:	1a1c      	subs	r4, r3, r0
 8000ea2:	fa1f f38e 	uxth.w	r3, lr
 8000ea6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000eaa:	fb08 4410 	mls	r4, r8, r0, r4
 8000eae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000eb2:	fb00 f707 	mul.w	r7, r0, r7
 8000eb6:	429f      	cmp	r7, r3
 8000eb8:	d908      	bls.n	8000ecc <__udivmoddi4+0x148>
 8000eba:	eb1c 0303 	adds.w	r3, ip, r3
 8000ebe:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ec2:	d202      	bcs.n	8000eca <__udivmoddi4+0x146>
 8000ec4:	429f      	cmp	r7, r3
 8000ec6:	f200 80b0 	bhi.w	800102a <__udivmoddi4+0x2a6>
 8000eca:	4620      	mov	r0, r4
 8000ecc:	1bdb      	subs	r3, r3, r7
 8000ece:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ed2:	e7a5      	b.n	8000e20 <__udivmoddi4+0x9c>
 8000ed4:	f1c1 0620 	rsb	r6, r1, #32
 8000ed8:	408b      	lsls	r3, r1
 8000eda:	fa22 f706 	lsr.w	r7, r2, r6
 8000ede:	431f      	orrs	r7, r3
 8000ee0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ee4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ee8:	ea43 030c 	orr.w	r3, r3, ip
 8000eec:	40f4      	lsrs	r4, r6
 8000eee:	fa00 f801 	lsl.w	r8, r0, r1
 8000ef2:	0c38      	lsrs	r0, r7, #16
 8000ef4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ef8:	fbb4 fef0 	udiv	lr, r4, r0
 8000efc:	fa1f fc87 	uxth.w	ip, r7
 8000f00:	fb00 441e 	mls	r4, r0, lr, r4
 8000f04:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f08:	fb0e f90c 	mul.w	r9, lr, ip
 8000f0c:	45a1      	cmp	r9, r4
 8000f0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f12:	d90a      	bls.n	8000f2a <__udivmoddi4+0x1a6>
 8000f14:	193c      	adds	r4, r7, r4
 8000f16:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f1a:	f080 8084 	bcs.w	8001026 <__udivmoddi4+0x2a2>
 8000f1e:	45a1      	cmp	r9, r4
 8000f20:	f240 8081 	bls.w	8001026 <__udivmoddi4+0x2a2>
 8000f24:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f28:	443c      	add	r4, r7
 8000f2a:	eba4 0409 	sub.w	r4, r4, r9
 8000f2e:	fa1f f983 	uxth.w	r9, r3
 8000f32:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f36:	fb00 4413 	mls	r4, r0, r3, r4
 8000f3a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f3e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f42:	45a4      	cmp	ip, r4
 8000f44:	d907      	bls.n	8000f56 <__udivmoddi4+0x1d2>
 8000f46:	193c      	adds	r4, r7, r4
 8000f48:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f4c:	d267      	bcs.n	800101e <__udivmoddi4+0x29a>
 8000f4e:	45a4      	cmp	ip, r4
 8000f50:	d965      	bls.n	800101e <__udivmoddi4+0x29a>
 8000f52:	3b02      	subs	r3, #2
 8000f54:	443c      	add	r4, r7
 8000f56:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f5a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f5e:	eba4 040c 	sub.w	r4, r4, ip
 8000f62:	429c      	cmp	r4, r3
 8000f64:	46ce      	mov	lr, r9
 8000f66:	469c      	mov	ip, r3
 8000f68:	d351      	bcc.n	800100e <__udivmoddi4+0x28a>
 8000f6a:	d04e      	beq.n	800100a <__udivmoddi4+0x286>
 8000f6c:	b155      	cbz	r5, 8000f84 <__udivmoddi4+0x200>
 8000f6e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f72:	eb64 040c 	sbc.w	r4, r4, ip
 8000f76:	fa04 f606 	lsl.w	r6, r4, r6
 8000f7a:	40cb      	lsrs	r3, r1
 8000f7c:	431e      	orrs	r6, r3
 8000f7e:	40cc      	lsrs	r4, r1
 8000f80:	e9c5 6400 	strd	r6, r4, [r5]
 8000f84:	2100      	movs	r1, #0
 8000f86:	e750      	b.n	8000e2a <__udivmoddi4+0xa6>
 8000f88:	f1c2 0320 	rsb	r3, r2, #32
 8000f8c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f90:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f94:	fa24 f303 	lsr.w	r3, r4, r3
 8000f98:	4094      	lsls	r4, r2
 8000f9a:	430c      	orrs	r4, r1
 8000f9c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000fa0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000fa4:	fa1f f78c 	uxth.w	r7, ip
 8000fa8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000fac:	fb08 3110 	mls	r1, r8, r0, r3
 8000fb0:	0c23      	lsrs	r3, r4, #16
 8000fb2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fb6:	fb00 f107 	mul.w	r1, r0, r7
 8000fba:	4299      	cmp	r1, r3
 8000fbc:	d908      	bls.n	8000fd0 <__udivmoddi4+0x24c>
 8000fbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000fc2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fc6:	d22c      	bcs.n	8001022 <__udivmoddi4+0x29e>
 8000fc8:	4299      	cmp	r1, r3
 8000fca:	d92a      	bls.n	8001022 <__udivmoddi4+0x29e>
 8000fcc:	3802      	subs	r0, #2
 8000fce:	4463      	add	r3, ip
 8000fd0:	1a5b      	subs	r3, r3, r1
 8000fd2:	b2a4      	uxth	r4, r4
 8000fd4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fd8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fdc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fe0:	fb01 f307 	mul.w	r3, r1, r7
 8000fe4:	42a3      	cmp	r3, r4
 8000fe6:	d908      	bls.n	8000ffa <__udivmoddi4+0x276>
 8000fe8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fec:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ff0:	d213      	bcs.n	800101a <__udivmoddi4+0x296>
 8000ff2:	42a3      	cmp	r3, r4
 8000ff4:	d911      	bls.n	800101a <__udivmoddi4+0x296>
 8000ff6:	3902      	subs	r1, #2
 8000ff8:	4464      	add	r4, ip
 8000ffa:	1ae4      	subs	r4, r4, r3
 8000ffc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001000:	e739      	b.n	8000e76 <__udivmoddi4+0xf2>
 8001002:	4604      	mov	r4, r0
 8001004:	e6f0      	b.n	8000de8 <__udivmoddi4+0x64>
 8001006:	4608      	mov	r0, r1
 8001008:	e706      	b.n	8000e18 <__udivmoddi4+0x94>
 800100a:	45c8      	cmp	r8, r9
 800100c:	d2ae      	bcs.n	8000f6c <__udivmoddi4+0x1e8>
 800100e:	ebb9 0e02 	subs.w	lr, r9, r2
 8001012:	eb63 0c07 	sbc.w	ip, r3, r7
 8001016:	3801      	subs	r0, #1
 8001018:	e7a8      	b.n	8000f6c <__udivmoddi4+0x1e8>
 800101a:	4631      	mov	r1, r6
 800101c:	e7ed      	b.n	8000ffa <__udivmoddi4+0x276>
 800101e:	4603      	mov	r3, r0
 8001020:	e799      	b.n	8000f56 <__udivmoddi4+0x1d2>
 8001022:	4630      	mov	r0, r6
 8001024:	e7d4      	b.n	8000fd0 <__udivmoddi4+0x24c>
 8001026:	46d6      	mov	lr, sl
 8001028:	e77f      	b.n	8000f2a <__udivmoddi4+0x1a6>
 800102a:	4463      	add	r3, ip
 800102c:	3802      	subs	r0, #2
 800102e:	e74d      	b.n	8000ecc <__udivmoddi4+0x148>
 8001030:	4606      	mov	r6, r0
 8001032:	4623      	mov	r3, r4
 8001034:	4608      	mov	r0, r1
 8001036:	e70f      	b.n	8000e58 <__udivmoddi4+0xd4>
 8001038:	3e02      	subs	r6, #2
 800103a:	4463      	add	r3, ip
 800103c:	e730      	b.n	8000ea0 <__udivmoddi4+0x11c>
 800103e:	bf00      	nop

08001040 <__aeabi_idiv0>:
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop

08001044 <aiInit>:
#endif

ai_buffer *ai_input;
ai_buffer *ai_output;

int aiInit(void) {
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
    ai_error err;
    const ai_handle acts[] = { activations };
 800104a:	4b17      	ldr	r3, [pc, #92]	@ (80010a8 <aiInit+0x64>)
 800104c:	603b      	str	r3, [r7, #0]
	#if  NUM_SENSOR == 24
    err = ai_twoline_create_and_init(&allLine, acts, NULL);
	#elif  NUM_SENSOR == 36
    err = ai_threeline_create_and_init(&allLine, acts, NULL);
	#elif  NUM_SENSOR == 48
    err = ai_fourline_create_and_init(&allLine, acts, NULL);
 800104e:	463b      	mov	r3, r7
 8001050:	2200      	movs	r2, #0
 8001052:	4619      	mov	r1, r3
 8001054:	4815      	ldr	r0, [pc, #84]	@ (80010ac <aiInit+0x68>)
 8001056:	f00e f981 	bl	800f35c <ai_fourline_create_and_init>
 800105a:	4603      	mov	r3, r0
 800105c:	607b      	str	r3, [r7, #4]
	#endif
    if (err.type != AI_ERROR_NONE) {
 800105e:	793b      	ldrb	r3, [r7, #4]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d00a      	beq.n	800107a <aiInit+0x36>
        HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "aiInit Error \n"), 100);
 8001064:	4912      	ldr	r1, [pc, #72]	@ (80010b0 <aiInit+0x6c>)
 8001066:	4813      	ldr	r0, [pc, #76]	@ (80010b4 <aiInit+0x70>)
 8001068:	f012 fb5c 	bl	8013724 <siprintf>
 800106c:	4603      	mov	r3, r0
 800106e:	b29a      	uxth	r2, r3
 8001070:	2364      	movs	r3, #100	@ 0x64
 8001072:	4910      	ldr	r1, [pc, #64]	@ (80010b4 <aiInit+0x70>)
 8001074:	4810      	ldr	r0, [pc, #64]	@ (80010b8 <aiInit+0x74>)
 8001076:	f007 fddf 	bl	8008c38 <HAL_UART_Transmit>
    ai_output = ai_twoline_outputs_get(allLine, NULL);
#elif NUM_SENSOR == 36
    ai_input = ai_threeline_inputs_get(allLine, NULL);
    ai_output= ai_threeline_outputs_get(allLine, NULL);
#elif NUM_SENSOR == 48
    ai_input = ai_fourline_inputs_get(allLine, NULL);
 800107a:	4b0c      	ldr	r3, [pc, #48]	@ (80010ac <aiInit+0x68>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	2100      	movs	r1, #0
 8001080:	4618      	mov	r0, r3
 8001082:	f00e f9df 	bl	800f444 <ai_fourline_inputs_get>
 8001086:	4603      	mov	r3, r0
 8001088:	4a0c      	ldr	r2, [pc, #48]	@ (80010bc <aiInit+0x78>)
 800108a:	6013      	str	r3, [r2, #0]
    ai_output = ai_fourline_outputs_get(allLine, NULL);
 800108c:	4b07      	ldr	r3, [pc, #28]	@ (80010ac <aiInit+0x68>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2100      	movs	r1, #0
 8001092:	4618      	mov	r0, r3
 8001094:	f00e f9f0 	bl	800f478 <ai_fourline_outputs_get>
 8001098:	4603      	mov	r3, r0
 800109a:	4a09      	ldr	r2, [pc, #36]	@ (80010c0 <aiInit+0x7c>)
 800109c:	6013      	str	r3, [r2, #0]
#else
    HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "Invalid NUM_SENSOR \n"), 100);
    return -1;
#endif
    return 0;
 800109e:	2300      	movs	r3, #0
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	20001660 	.word	0x20001660
 80010ac:	2000165c 	.word	0x2000165c
 80010b0:	080186a0 	.word	0x080186a0
 80010b4:	20007870 	.word	0x20007870
 80010b8:	200077e8 	.word	0x200077e8
 80010bc:	20002550 	.word	0x20002550
 80010c0:	20002554 	.word	0x20002554

080010c4 <aiRun>:


int aiRun(const ai_float *in_data, ai_float *out_data) {
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
    ai_i32 n_batch;

    // 1 - Update IO handlers with the data payload
    ai_input[0].data = AI_HANDLE_PTR(in_data);
 80010ce:	4b14      	ldr	r3, [pc, #80]	@ (8001120 <aiRun+0x5c>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	605a      	str	r2, [r3, #4]
    ai_output[0].data = AI_HANDLE_PTR(out_data);
 80010d6:	4b13      	ldr	r3, [pc, #76]	@ (8001124 <aiRun+0x60>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	683a      	ldr	r2, [r7, #0]
 80010dc:	605a      	str	r2, [r3, #4]
#if NUM_SENSOR == 24
    n_batch = ai_twoline_run(allLine, &ai_input[0], &ai_output[0]);
#elif NUM_SENSOR == 36
    n_batch = ai_threeline_run(allLine, &ai_input[0], &ai_output[0]);
#elif NUM_SENSOR == 48
    n_batch = ai_fourline_run(allLine, &ai_input[0], &ai_output[0]);
 80010de:	4b12      	ldr	r3, [pc, #72]	@ (8001128 <aiRun+0x64>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a0f      	ldr	r2, [pc, #60]	@ (8001120 <aiRun+0x5c>)
 80010e4:	6811      	ldr	r1, [r2, #0]
 80010e6:	4a0f      	ldr	r2, [pc, #60]	@ (8001124 <aiRun+0x60>)
 80010e8:	6812      	ldr	r2, [r2, #0]
 80010ea:	4618      	mov	r0, r3
 80010ec:	f00e fa1a 	bl	800f524 <ai_fourline_run>
 80010f0:	60f8      	str	r0, [r7, #12]
#else
    HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "Invalid NUM_SENSOR \n"), 100);
    return -1;
#endif
    if (n_batch != 1) {
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d00d      	beq.n	8001114 <aiRun+0x50>
        HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "aiRun Error \n"), 100);
 80010f8:	490c      	ldr	r1, [pc, #48]	@ (800112c <aiRun+0x68>)
 80010fa:	480d      	ldr	r0, [pc, #52]	@ (8001130 <aiRun+0x6c>)
 80010fc:	f012 fb12 	bl	8013724 <siprintf>
 8001100:	4603      	mov	r3, r0
 8001102:	b29a      	uxth	r2, r3
 8001104:	2364      	movs	r3, #100	@ 0x64
 8001106:	490a      	ldr	r1, [pc, #40]	@ (8001130 <aiRun+0x6c>)
 8001108:	480a      	ldr	r0, [pc, #40]	@ (8001134 <aiRun+0x70>)
 800110a:	f007 fd95 	bl	8008c38 <HAL_UART_Transmit>
        return -1;
 800110e:	f04f 33ff 	mov.w	r3, #4294967295
 8001112:	e000      	b.n	8001116 <aiRun+0x52>
    };
    return 0;
 8001114:	2300      	movs	r3, #0
}
 8001116:	4618      	mov	r0, r3
 8001118:	3710      	adds	r7, #16
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	20002550 	.word	0x20002550
 8001124:	20002554 	.word	0x20002554
 8001128:	2000165c 	.word	0x2000165c
 800112c:	080186b0 	.word	0x080186b0
 8001130:	20007870 	.word	0x20007870
 8001134:	200077e8 	.word	0x200077e8

08001138 <CalculateStats>:
float sensorValues[NUM_SENSOR][NUM_READINGS-throwSomenumber] = {0};
float sensorAverages[NUM_SENSOR] = {0};
float sensorStdDevs[NUM_SENSOR] = {0};
int readingCount[NUM_SENSOR] = {0};

void CalculateStats(int sensorIndex) {
 8001138:	b5b0      	push	{r4, r5, r7, lr}
 800113a:	b088      	sub	sp, #32
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
    float sum = 0;
 8001140:	f04f 0300 	mov.w	r3, #0
 8001144:	61fb      	str	r3, [r7, #28]
    float mean = 0;
 8001146:	f04f 0300 	mov.w	r3, #0
 800114a:	60fb      	str	r3, [r7, #12]
    float stdDevSum = 0;
 800114c:	f04f 0300 	mov.w	r3, #0
 8001150:	61bb      	str	r3, [r7, #24]
    int count = readingCount[sensorIndex];
 8001152:	4a49      	ldr	r2, [pc, #292]	@ (8001278 <CalculateStats+0x140>)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800115a:	60bb      	str	r3, [r7, #8]

    // 평균 계산
    for (int i = 0; i < count; i++) { sum += sensorValues[sensorIndex][i];}
 800115c:	2300      	movs	r3, #0
 800115e:	617b      	str	r3, [r7, #20]
 8001160:	e013      	b.n	800118a <CalculateStats+0x52>
 8001162:	4946      	ldr	r1, [pc, #280]	@ (800127c <CalculateStats+0x144>)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2264      	movs	r2, #100	@ 0x64
 8001168:	fb03 f202 	mul.w	r2, r3, r2
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	4413      	add	r3, r2
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	440b      	add	r3, r1
 8001174:	edd3 7a00 	vldr	s15, [r3]
 8001178:	ed97 7a07 	vldr	s14, [r7, #28]
 800117c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001180:	edc7 7a07 	vstr	s15, [r7, #28]
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	3301      	adds	r3, #1
 8001188:	617b      	str	r3, [r7, #20]
 800118a:	697a      	ldr	r2, [r7, #20]
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	429a      	cmp	r2, r3
 8001190:	dbe7      	blt.n	8001162 <CalculateStats+0x2a>
    mean = sum / count;
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	ee07 3a90 	vmov	s15, r3
 8001198:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800119c:	edd7 6a07 	vldr	s13, [r7, #28]
 80011a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011a4:	edc7 7a03 	vstr	s15, [r7, #12]
    sensorAverages[sensorIndex] = mean;
 80011a8:	4a35      	ldr	r2, [pc, #212]	@ (8001280 <CalculateStats+0x148>)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	4413      	add	r3, r2
 80011b0:	68fa      	ldr	r2, [r7, #12]
 80011b2:	601a      	str	r2, [r3, #0]
    // 표준편차 계산
    for (int i = 0; i < count; i++) { stdDevSum += pow(sensorValues[sensorIndex][i] - mean, 2);}
 80011b4:	2300      	movs	r3, #0
 80011b6:	613b      	str	r3, [r7, #16]
 80011b8:	e030      	b.n	800121c <CalculateStats+0xe4>
 80011ba:	4930      	ldr	r1, [pc, #192]	@ (800127c <CalculateStats+0x144>)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2264      	movs	r2, #100	@ 0x64
 80011c0:	fb03 f202 	mul.w	r2, r3, r2
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	4413      	add	r3, r2
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	440b      	add	r3, r1
 80011cc:	ed93 7a00 	vldr	s14, [r3]
 80011d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80011d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011d8:	ee17 0a90 	vmov	r0, s15
 80011dc:	f7ff f9e4 	bl	80005a8 <__aeabi_f2d>
 80011e0:	4602      	mov	r2, r0
 80011e2:	460b      	mov	r3, r1
 80011e4:	ed9f 1b22 	vldr	d1, [pc, #136]	@ 8001270 <CalculateStats+0x138>
 80011e8:	ec43 2b10 	vmov	d0, r2, r3
 80011ec:	f016 fa80 	bl	80176f0 <pow>
 80011f0:	ec55 4b10 	vmov	r4, r5, d0
 80011f4:	69b8      	ldr	r0, [r7, #24]
 80011f6:	f7ff f9d7 	bl	80005a8 <__aeabi_f2d>
 80011fa:	4602      	mov	r2, r0
 80011fc:	460b      	mov	r3, r1
 80011fe:	4620      	mov	r0, r4
 8001200:	4629      	mov	r1, r5
 8001202:	f7ff f873 	bl	80002ec <__adddf3>
 8001206:	4602      	mov	r2, r0
 8001208:	460b      	mov	r3, r1
 800120a:	4610      	mov	r0, r2
 800120c:	4619      	mov	r1, r3
 800120e:	f7ff fd1b 	bl	8000c48 <__aeabi_d2f>
 8001212:	4603      	mov	r3, r0
 8001214:	61bb      	str	r3, [r7, #24]
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	3301      	adds	r3, #1
 800121a:	613b      	str	r3, [r7, #16]
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	429a      	cmp	r2, r3
 8001222:	dbca      	blt.n	80011ba <CalculateStats+0x82>
    sensorStdDevs[sensorIndex] = sqrt(stdDevSum / count);
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	ee07 3a90 	vmov	s15, r3
 800122a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800122e:	ed97 7a06 	vldr	s14, [r7, #24]
 8001232:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001236:	ee16 0a90 	vmov	r0, s13
 800123a:	f7ff f9b5 	bl	80005a8 <__aeabi_f2d>
 800123e:	4602      	mov	r2, r0
 8001240:	460b      	mov	r3, r1
 8001242:	ec43 2b10 	vmov	d0, r2, r3
 8001246:	f016 fac3 	bl	80177d0 <sqrt>
 800124a:	ec53 2b10 	vmov	r2, r3, d0
 800124e:	4610      	mov	r0, r2
 8001250:	4619      	mov	r1, r3
 8001252:	f7ff fcf9 	bl	8000c48 <__aeabi_d2f>
 8001256:	4602      	mov	r2, r0
 8001258:	490a      	ldr	r1, [pc, #40]	@ (8001284 <CalculateStats+0x14c>)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	440b      	add	r3, r1
 8001260:	601a      	str	r2, [r3, #0]
}
 8001262:	bf00      	nop
 8001264:	3720      	adds	r7, #32
 8001266:	46bd      	mov	sp, r7
 8001268:	bdb0      	pop	{r4, r5, r7, pc}
 800126a:	bf00      	nop
 800126c:	f3af 8000 	nop.w
 8001270:	00000000 	.word	0x00000000
 8001274:	40000000 	.word	0x40000000
 8001278:	200071d8 	.word	0x200071d8
 800127c:	20002558 	.word	0x20002558
 8001280:	20007058 	.word	0x20007058
 8001284:	20007118 	.word	0x20007118

08001288 <TransmitStats>:

// 평균과 표준편차를 UART로 전송하는 함수
void TransmitStats() {
 8001288:	b5b0      	push	{r4, r5, r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af04      	add	r7, sp, #16
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "Sensor Avg Std\r\n"), 100);
 800128e:	4920      	ldr	r1, [pc, #128]	@ (8001310 <TransmitStats+0x88>)
 8001290:	4820      	ldr	r0, [pc, #128]	@ (8001314 <TransmitStats+0x8c>)
 8001292:	f012 fa47 	bl	8013724 <siprintf>
 8001296:	4603      	mov	r3, r0
 8001298:	b29a      	uxth	r2, r3
 800129a:	2364      	movs	r3, #100	@ 0x64
 800129c:	491d      	ldr	r1, [pc, #116]	@ (8001314 <TransmitStats+0x8c>)
 800129e:	481e      	ldr	r0, [pc, #120]	@ (8001318 <TransmitStats+0x90>)
 80012a0:	f007 fcca 	bl	8008c38 <HAL_UART_Transmit>
    for (int i = 0; i < NUM_SENSOR; i++) {
 80012a4:	2300      	movs	r3, #0
 80012a6:	607b      	str	r3, [r7, #4]
 80012a8:	e029      	b.n	80012fe <TransmitStats+0x76>
        CalculateStats(i); // 통계 계산
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f7ff ff44 	bl	8001138 <CalculateStats>
    	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "%d %.2f %.2f\r\n", i, sensorAverages[i], sensorStdDevs[i]), 100);
 80012b0:	4a1a      	ldr	r2, [pc, #104]	@ (800131c <TransmitStats+0x94>)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	4413      	add	r3, r2
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff f974 	bl	80005a8 <__aeabi_f2d>
 80012c0:	4604      	mov	r4, r0
 80012c2:	460d      	mov	r5, r1
 80012c4:	4a16      	ldr	r2, [pc, #88]	@ (8001320 <TransmitStats+0x98>)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	4413      	add	r3, r2
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff f96a 	bl	80005a8 <__aeabi_f2d>
 80012d4:	4602      	mov	r2, r0
 80012d6:	460b      	mov	r3, r1
 80012d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80012dc:	e9cd 4500 	strd	r4, r5, [sp]
 80012e0:	687a      	ldr	r2, [r7, #4]
 80012e2:	4910      	ldr	r1, [pc, #64]	@ (8001324 <TransmitStats+0x9c>)
 80012e4:	480b      	ldr	r0, [pc, #44]	@ (8001314 <TransmitStats+0x8c>)
 80012e6:	f012 fa1d 	bl	8013724 <siprintf>
 80012ea:	4603      	mov	r3, r0
 80012ec:	b29a      	uxth	r2, r3
 80012ee:	2364      	movs	r3, #100	@ 0x64
 80012f0:	4908      	ldr	r1, [pc, #32]	@ (8001314 <TransmitStats+0x8c>)
 80012f2:	4809      	ldr	r0, [pc, #36]	@ (8001318 <TransmitStats+0x90>)
 80012f4:	f007 fca0 	bl	8008c38 <HAL_UART_Transmit>
    for (int i = 0; i < NUM_SENSOR; i++) {
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3301      	adds	r3, #1
 80012fc:	607b      	str	r3, [r7, #4]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2b2f      	cmp	r3, #47	@ 0x2f
 8001302:	ddd2      	ble.n	80012aa <TransmitStats+0x22>
    }
}
 8001304:	bf00      	nop
 8001306:	bf00      	nop
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bdb0      	pop	{r4, r5, r7, pc}
 800130e:	bf00      	nop
 8001310:	080186c0 	.word	0x080186c0
 8001314:	20007870 	.word	0x20007870
 8001318:	200077e8 	.word	0x200077e8
 800131c:	20007058 	.word	0x20007058
 8001320:	20007118 	.word	0x20007118
 8001324:	080186d4 	.word	0x080186d4

08001328 <ResetSensorData>:

void ResetSensorData() {
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
    // 모든 센서 값과 읽기 횟수를 0으로 설정
    for (int i = 0; i < NUM_SENSOR; i++) {
 800132e:	2300      	movs	r3, #0
 8001330:	607b      	str	r3, [r7, #4]
 8001332:	e014      	b.n	800135e <ResetSensorData+0x36>
        memset(sensorValues[i], 0, sizeof(sensorValues[i]));
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800133a:	fb02 f303 	mul.w	r3, r2, r3
 800133e:	4a0c      	ldr	r2, [pc, #48]	@ (8001370 <ResetSensorData+0x48>)
 8001340:	4413      	add	r3, r2
 8001342:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001346:	2100      	movs	r1, #0
 8001348:	4618      	mov	r0, r3
 800134a:	f012 fa7a 	bl	8013842 <memset>
        readingCount[i] = 0;
 800134e:	4a09      	ldr	r2, [pc, #36]	@ (8001374 <ResetSensorData+0x4c>)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2100      	movs	r1, #0
 8001354:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < NUM_SENSOR; i++) {
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	3301      	adds	r3, #1
 800135c:	607b      	str	r3, [r7, #4]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2b2f      	cmp	r3, #47	@ 0x2f
 8001362:	dde7      	ble.n	8001334 <ResetSensorData+0xc>
    }
}
 8001364:	bf00      	nop
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	20002558 	.word	0x20002558
 8001374:	200071d8 	.word	0x200071d8

08001378 <InitStats>:

void InitStats(){
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
	for(int i; i<NUM_SENSOR;i++){
 800137e:	e010      	b.n	80013a2 <InitStats+0x2a>
		sensorAverages[i] = 0;
 8001380:	4a0d      	ldr	r2, [pc, #52]	@ (80013b8 <InitStats+0x40>)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	4413      	add	r3, r2
 8001388:	f04f 0200 	mov.w	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
		sensorStdDevs[i] = 0;
 800138e:	4a0b      	ldr	r2, [pc, #44]	@ (80013bc <InitStats+0x44>)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	4413      	add	r3, r2
 8001396:	f04f 0200 	mov.w	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
	for(int i; i<NUM_SENSOR;i++){
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	3301      	adds	r3, #1
 80013a0:	607b      	str	r3, [r7, #4]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2b2f      	cmp	r3, #47	@ 0x2f
 80013a6:	ddeb      	ble.n	8001380 <InitStats+0x8>
	}
}
 80013a8:	bf00      	nop
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	20007058 	.word	0x20007058
 80013bc:	20007118 	.word	0x20007118

080013c0 <ProcessCommand>:

extern TIM_HandleTypeDef htim2;


void ProcessCommand(uint8_t *commandBuffer)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]

    if (command_in_progress) {
 80013c8:	4b5c      	ldr	r3, [pc, #368]	@ (800153c <ProcessCommand+0x17c>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d006      	beq.n	80013e0 <ProcessCommand+0x20>
        HAL_UART_Transmit(&huart1, (uint8_t*)"Command is currently executing, please wait...\n", 48, 100);
 80013d2:	2364      	movs	r3, #100	@ 0x64
 80013d4:	2230      	movs	r2, #48	@ 0x30
 80013d6:	495a      	ldr	r1, [pc, #360]	@ (8001540 <ProcessCommand+0x180>)
 80013d8:	485a      	ldr	r0, [pc, #360]	@ (8001544 <ProcessCommand+0x184>)
 80013da:	f007 fc2d 	bl	8008c38 <HAL_UART_Transmit>
        return;
 80013de:	e0a9      	b.n	8001534 <ProcessCommand+0x174>
    }

    command_in_progress = 1; // 명령 실행 상태 설정
 80013e0:	4b56      	ldr	r3, [pc, #344]	@ (800153c <ProcessCommand+0x17c>)
 80013e2:	2201      	movs	r2, #1
 80013e4:	701a      	strb	r2, [r3, #0]

    char *command = strtok((char*)commandBuffer, " "); // Command separation
 80013e6:	4958      	ldr	r1, [pc, #352]	@ (8001548 <ProcessCommand+0x188>)
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f012 fa33 	bl	8013854 <strtok>
 80013ee:	60f8      	str	r0, [r7, #12]
    char *argument = strtok(NULL, " "); // argument seperation
 80013f0:	4955      	ldr	r1, [pc, #340]	@ (8001548 <ProcessCommand+0x188>)
 80013f2:	2000      	movs	r0, #0
 80013f4:	f012 fa2e 	bl	8013854 <strtok>
 80013f8:	60b8      	str	r0, [r7, #8]

    if (strcmp((char*)command, "echo") == 0) {HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "echo\n"), 100);}
 80013fa:	4954      	ldr	r1, [pc, #336]	@ (800154c <ProcessCommand+0x18c>)
 80013fc:	68f8      	ldr	r0, [r7, #12]
 80013fe:	f7fe ff07 	bl	8000210 <strcmp>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d10b      	bne.n	8001420 <ProcessCommand+0x60>
 8001408:	4951      	ldr	r1, [pc, #324]	@ (8001550 <ProcessCommand+0x190>)
 800140a:	4852      	ldr	r0, [pc, #328]	@ (8001554 <ProcessCommand+0x194>)
 800140c:	f012 f98a 	bl	8013724 <siprintf>
 8001410:	4603      	mov	r3, r0
 8001412:	b29a      	uxth	r2, r3
 8001414:	2364      	movs	r3, #100	@ 0x64
 8001416:	494f      	ldr	r1, [pc, #316]	@ (8001554 <ProcessCommand+0x194>)
 8001418:	484a      	ldr	r0, [pc, #296]	@ (8001544 <ProcessCommand+0x184>)
 800141a:	f007 fc0d 	bl	8008c38 <HAL_UART_Transmit>
 800141e:	e086      	b.n	800152e <ProcessCommand+0x16e>
    else if (strcmp((char*)command, "sensori2c") == 0) {SensorI2CCommand();} //sensori2c
 8001420:	494d      	ldr	r1, [pc, #308]	@ (8001558 <ProcessCommand+0x198>)
 8001422:	68f8      	ldr	r0, [r7, #12]
 8001424:	f7fe fef4 	bl	8000210 <strcmp>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d102      	bne.n	8001434 <ProcessCommand+0x74>
 800142e:	f000 f8ad 	bl	800158c <SensorI2CCommand>
 8001432:	e07c      	b.n	800152e <ProcessCommand+0x16e>
    else if (strcmp((char*)command, "seti2c") == 0) {SetI2CCommand();} //seti2c
 8001434:	4949      	ldr	r1, [pc, #292]	@ (800155c <ProcessCommand+0x19c>)
 8001436:	68f8      	ldr	r0, [r7, #12]
 8001438:	f7fe feea 	bl	8000210 <strcmp>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d102      	bne.n	8001448 <ProcessCommand+0x88>
 8001442:	f000 f99b 	bl	800177c <SetI2CCommand>
 8001446:	e072      	b.n	800152e <ProcessCommand+0x16e>
    else if (strcmp((char*)command, "rev") == 0) {RevCommand(argument);}
 8001448:	4945      	ldr	r1, [pc, #276]	@ (8001560 <ProcessCommand+0x1a0>)
 800144a:	68f8      	ldr	r0, [r7, #12]
 800144c:	f7fe fee0 	bl	8000210 <strcmp>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d103      	bne.n	800145e <ProcessCommand+0x9e>
 8001456:	68b8      	ldr	r0, [r7, #8]
 8001458:	f000 fb26 	bl	8001aa8 <RevCommand>
 800145c:	e067      	b.n	800152e <ProcessCommand+0x16e>
    else if (strcmp((char*)command, "lin") == 0) {LinCommand(argument);}
 800145e:	4941      	ldr	r1, [pc, #260]	@ (8001564 <ProcessCommand+0x1a4>)
 8001460:	68f8      	ldr	r0, [r7, #12]
 8001462:	f7fe fed5 	bl	8000210 <strcmp>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d103      	bne.n	8001474 <ProcessCommand+0xb4>
 800146c:	68b8      	ldr	r0, [r7, #8]
 800146e:	f000 fb7f 	bl	8001b70 <LinCommand>
 8001472:	e05c      	b.n	800152e <ProcessCommand+0x16e>
    else if (strcmp((char*)command, "servo") == 0) {ServoCommand(argument);}
 8001474:	493c      	ldr	r1, [pc, #240]	@ (8001568 <ProcessCommand+0x1a8>)
 8001476:	68f8      	ldr	r0, [r7, #12]
 8001478:	f7fe feca 	bl	8000210 <strcmp>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d103      	bne.n	800148a <ProcessCommand+0xca>
 8001482:	68b8      	ldr	r0, [r7, #8]
 8001484:	f000 fbda 	bl	8001c3c <ServoCommand>
 8001488:	e051      	b.n	800152e <ProcessCommand+0x16e>
    else if (strcmp((char*)command, "servo2") == 0) {Servo2Command(argument);}
 800148a:	4938      	ldr	r1, [pc, #224]	@ (800156c <ProcessCommand+0x1ac>)
 800148c:	68f8      	ldr	r0, [r7, #12]
 800148e:	f7fe febf 	bl	8000210 <strcmp>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d103      	bne.n	80014a0 <ProcessCommand+0xe0>
 8001498:	68b8      	ldr	r0, [r7, #8]
 800149a:	f000 fc37 	bl	8001d0c <Servo2Command>
 800149e:	e046      	b.n	800152e <ProcessCommand+0x16e>
    else if (strcmp((char*)command, "avg") == 0) {AvgStdCommand();}
 80014a0:	4933      	ldr	r1, [pc, #204]	@ (8001570 <ProcessCommand+0x1b0>)
 80014a2:	68f8      	ldr	r0, [r7, #12]
 80014a4:	f7fe feb4 	bl	8000210 <strcmp>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d102      	bne.n	80014b4 <ProcessCommand+0xf4>
 80014ae:	f000 fc8b 	bl	8001dc8 <AvgStdCommand>
 80014b2:	e03c      	b.n	800152e <ProcessCommand+0x16e>
    else if (strcmp((char*)command, "inferheati2c") == 0) {InferenceHeatI2CCommand();} //infercnni2c
 80014b4:	492f      	ldr	r1, [pc, #188]	@ (8001574 <ProcessCommand+0x1b4>)
 80014b6:	68f8      	ldr	r0, [r7, #12]
 80014b8:	f7fe feaa 	bl	8000210 <strcmp>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d102      	bne.n	80014c8 <ProcessCommand+0x108>
 80014c2:	f000 fd75 	bl	8001fb0 <InferenceHeatI2CCommand>
 80014c6:	e032      	b.n	800152e <ProcessCommand+0x16e>
    else if (strcmp((char*)command, "pointv") == 0) {PointingVertical();} // (0,20) -> (0,140)
 80014c8:	492b      	ldr	r1, [pc, #172]	@ (8001578 <ProcessCommand+0x1b8>)
 80014ca:	68f8      	ldr	r0, [r7, #12]
 80014cc:	f7fe fea0 	bl	8000210 <strcmp>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d102      	bne.n	80014dc <ProcessCommand+0x11c>
 80014d6:	f001 f897 	bl	8002608 <PointingVertical>
 80014da:	e028      	b.n	800152e <ProcessCommand+0x16e>
    else if (strcmp((char*)command, "pointr") == 0) {PointingRadial();} // (0,20) -> (0,140)
 80014dc:	4927      	ldr	r1, [pc, #156]	@ (800157c <ProcessCommand+0x1bc>)
 80014de:	68f8      	ldr	r0, [r7, #12]
 80014e0:	f7fe fe96 	bl	8000210 <strcmp>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d102      	bne.n	80014f0 <ProcessCommand+0x130>
 80014ea:	f001 fbcf 	bl	8002c8c <PointingRadial>
 80014ee:	e01e      	b.n	800152e <ProcessCommand+0x16e>
    else if (strcmp((char*)command, "ini") == 0) {InitializaionCalibrationCommand();}
 80014f0:	4923      	ldr	r1, [pc, #140]	@ (8001580 <ProcessCommand+0x1c0>)
 80014f2:	68f8      	ldr	r0, [r7, #12]
 80014f4:	f7fe fe8c 	bl	8000210 <strcmp>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d102      	bne.n	8001504 <ProcessCommand+0x144>
 80014fe:	f001 fbed 	bl	8002cdc <InitializaionCalibrationCommand>
 8001502:	e014      	b.n	800152e <ProcessCommand+0x16e>
    else if (strcmp((char*)command, "autoi2c") == 0) {AutoI2CCommand();}
 8001504:	491f      	ldr	r1, [pc, #124]	@ (8001584 <ProcessCommand+0x1c4>)
 8001506:	68f8      	ldr	r0, [r7, #12]
 8001508:	f7fe fe82 	bl	8000210 <strcmp>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d102      	bne.n	8001518 <ProcessCommand+0x158>
 8001512:	f001 fe33 	bl	800317c <AutoI2CCommand>
 8001516:	e00a      	b.n	800152e <ProcessCommand+0x16e>
    else {HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "Please insert correct command\n"), 100);}
 8001518:	491b      	ldr	r1, [pc, #108]	@ (8001588 <ProcessCommand+0x1c8>)
 800151a:	480e      	ldr	r0, [pc, #56]	@ (8001554 <ProcessCommand+0x194>)
 800151c:	f012 f902 	bl	8013724 <siprintf>
 8001520:	4603      	mov	r3, r0
 8001522:	b29a      	uxth	r2, r3
 8001524:	2364      	movs	r3, #100	@ 0x64
 8001526:	490b      	ldr	r1, [pc, #44]	@ (8001554 <ProcessCommand+0x194>)
 8001528:	4806      	ldr	r0, [pc, #24]	@ (8001544 <ProcessCommand+0x184>)
 800152a:	f007 fb85 	bl	8008c38 <HAL_UART_Transmit>

    command_in_progress = 0; // 명령 실행 완료 상태 해제
 800152e:	4b03      	ldr	r3, [pc, #12]	@ (800153c <ProcessCommand+0x17c>)
 8001530:	2200      	movs	r2, #0
 8001532:	701a      	strb	r2, [r3, #0]
}
 8001534:	3710      	adds	r7, #16
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	20007298 	.word	0x20007298
 8001540:	080186e4 	.word	0x080186e4
 8001544:	200077e8 	.word	0x200077e8
 8001548:	08018714 	.word	0x08018714
 800154c:	08018718 	.word	0x08018718
 8001550:	08018720 	.word	0x08018720
 8001554:	20007870 	.word	0x20007870
 8001558:	08018728 	.word	0x08018728
 800155c:	08018734 	.word	0x08018734
 8001560:	0801873c 	.word	0x0801873c
 8001564:	08018740 	.word	0x08018740
 8001568:	08018744 	.word	0x08018744
 800156c:	0801874c 	.word	0x0801874c
 8001570:	08018754 	.word	0x08018754
 8001574:	08018758 	.word	0x08018758
 8001578:	08018768 	.word	0x08018768
 800157c:	08018770 	.word	0x08018770
 8001580:	08018778 	.word	0x08018778
 8001584:	0801877c 	.word	0x0801877c
 8001588:	08018784 	.word	0x08018784

0800158c <SensorI2CCommand>:


void SensorI2CCommand(){
 800158c:	b590      	push	{r4, r7, lr}
 800158e:	b089      	sub	sp, #36	@ 0x24
 8001590:	af00      	add	r7, sp, #0
	ResetAllDevices();
 8001592:	f002 ffe5 	bl	8004560 <ResetAllDevices>
	setOnAllDevices();
 8001596:	f003 f85f 	bl	8004658 <setOnAllDevices>
	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "sensor test\r\n"), 100);
 800159a:	496b      	ldr	r1, [pc, #428]	@ (8001748 <SensorI2CCommand+0x1bc>)
 800159c:	486b      	ldr	r0, [pc, #428]	@ (800174c <SensorI2CCommand+0x1c0>)
 800159e:	f012 f8c1 	bl	8013724 <siprintf>
 80015a2:	4603      	mov	r3, r0
 80015a4:	b29a      	uxth	r2, r3
 80015a6:	2364      	movs	r3, #100	@ 0x64
 80015a8:	4968      	ldr	r1, [pc, #416]	@ (800174c <SensorI2CCommand+0x1c0>)
 80015aa:	4869      	ldr	r0, [pc, #420]	@ (8001750 <SensorI2CCommand+0x1c4>)
 80015ac:	f007 fb44 	bl	8008c38 <HAL_UART_Transmit>
	uint32_t startTime = 0, endTime = 0, diffTime = 0;
 80015b0:	2300      	movs	r3, #0
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	2300      	movs	r3, #0
 80015b6:	60bb      	str	r3, [r7, #8]
 80015b8:	2300      	movs	r3, #0
 80015ba:	607b      	str	r3, [r7, #4]

    for(int count =0; count < NUM_READINGS; count++){
 80015bc:	2300      	movs	r3, #0
 80015be:	61fb      	str	r3, [r7, #28]
 80015c0:	e0b6      	b.n	8001730 <SensorI2CCommand+0x1a4>
    	uint8_t sensorCount = 0;
 80015c2:	2300      	movs	r3, #0
 80015c4:	76fb      	strb	r3, [r7, #27]
    	startTime = HAL_GetTick();
 80015c6:	f003 f8eb 	bl	80047a0 <HAL_GetTick>
 80015ca:	60f8      	str	r0, [r7, #12]
		for (int i = 0; i < NUM_SENSOR; i++) {
 80015cc:	2300      	movs	r3, #0
 80015ce:	617b      	str	r3, [r7, #20]
 80015d0:	e054      	b.n	800167c <SensorI2CCommand+0xf0>
			Dev = &vl53l0x_s[i];
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80015d8:	fb02 f303 	mul.w	r3, r2, r3
 80015dc:	4a5d      	ldr	r2, [pc, #372]	@ (8001754 <SensorI2CCommand+0x1c8>)
 80015de:	4413      	add	r3, r2
 80015e0:	4a5d      	ldr	r2, [pc, #372]	@ (8001758 <SensorI2CCommand+0x1cc>)
 80015e2:	6013      	str	r3, [r2, #0]
			VL53L0X_PerformContinuousRangingMeasurement(Dev, &RangingData); // 1500us
 80015e4:	4b5c      	ldr	r3, [pc, #368]	@ (8001758 <SensorI2CCommand+0x1cc>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	495c      	ldr	r1, [pc, #368]	@ (800175c <SensorI2CCommand+0x1d0>)
 80015ea:	4618      	mov	r0, r3
 80015ec:	f00a f8f8 	bl	800b7e0 <VL53L0X_PerformContinuousRangingMeasurement>
			if (RangingData.RangeStatus == 0) {
 80015f0:	4b5a      	ldr	r3, [pc, #360]	@ (800175c <SensorI2CCommand+0x1d0>)
 80015f2:	7e1b      	ldrb	r3, [r3, #24]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d13e      	bne.n	8001676 <SensorI2CCommand+0xea>
			  if (RangingData.RangeMilliMeter < 100) {
 80015f8:	4b58      	ldr	r3, [pc, #352]	@ (800175c <SensorI2CCommand+0x1d0>)
 80015fa:	891b      	ldrh	r3, [r3, #8]
 80015fc:	2b63      	cmp	r3, #99	@ 0x63
 80015fe:	d83a      	bhi.n	8001676 <SensorI2CCommand+0xea>
				  filteredValue[i] = Kalman_Estimate(&filters[i], RangingData.RangeMilliMeter);
 8001600:	697a      	ldr	r2, [r7, #20]
 8001602:	4613      	mov	r3, r2
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	4413      	add	r3, r2
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	4a55      	ldr	r2, [pc, #340]	@ (8001760 <SensorI2CCommand+0x1d4>)
 800160c:	4413      	add	r3, r2
 800160e:	4a53      	ldr	r2, [pc, #332]	@ (800175c <SensorI2CCommand+0x1d0>)
 8001610:	8912      	ldrh	r2, [r2, #8]
 8001612:	ee07 2a90 	vmov	s15, r2
 8001616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800161a:	eeb0 0a67 	vmov.f32	s0, s15
 800161e:	4618      	mov	r0, r3
 8001620:	f002 f82e 	bl	8003680 <Kalman_Estimate>
 8001624:	eef0 7a40 	vmov.f32	s15, s0
 8001628:	4a4e      	ldr	r2, [pc, #312]	@ (8001764 <SensorI2CCommand+0x1d8>)
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	4413      	add	r3, r2
 8001630:	edc3 7a00 	vstr	s15, [r3]
				  //filteredValue[i] = RangingData.RangeMilliMeter;
				  sensorValues[i][readingCount[i]] = filteredValue[i];
 8001634:	4a4c      	ldr	r2, [pc, #304]	@ (8001768 <SensorI2CCommand+0x1dc>)
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800163c:	4949      	ldr	r1, [pc, #292]	@ (8001764 <SensorI2CCommand+0x1d8>)
 800163e:	697a      	ldr	r2, [r7, #20]
 8001640:	0092      	lsls	r2, r2, #2
 8001642:	440a      	add	r2, r1
 8001644:	6812      	ldr	r2, [r2, #0]
 8001646:	4849      	ldr	r0, [pc, #292]	@ (800176c <SensorI2CCommand+0x1e0>)
 8001648:	6979      	ldr	r1, [r7, #20]
 800164a:	2464      	movs	r4, #100	@ 0x64
 800164c:	fb04 f101 	mul.w	r1, r4, r1
 8001650:	440b      	add	r3, r1
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	4403      	add	r3, r0
 8001656:	601a      	str	r2, [r3, #0]
				  if(count>throwSomenumber){
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	2b14      	cmp	r3, #20
 800165c:	dd08      	ble.n	8001670 <SensorI2CCommand+0xe4>
				  readingCount[i]++;}
 800165e:	4a42      	ldr	r2, [pc, #264]	@ (8001768 <SensorI2CCommand+0x1dc>)
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001666:	1c5a      	adds	r2, r3, #1
 8001668:	493f      	ldr	r1, [pc, #252]	@ (8001768 <SensorI2CCommand+0x1dc>)
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				  sensorCount++;
 8001670:	7efb      	ldrb	r3, [r7, #27]
 8001672:	3301      	adds	r3, #1
 8001674:	76fb      	strb	r3, [r7, #27]
		for (int i = 0; i < NUM_SENSOR; i++) {
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	3301      	adds	r3, #1
 800167a:	617b      	str	r3, [r7, #20]
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	2b2f      	cmp	r3, #47	@ 0x2f
 8001680:	dda7      	ble.n	80015d2 <SensorI2CCommand+0x46>
				  //HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d ", RangingData.RangeStatus), 500);
				  // 1 : Sigma Fail | 2 : Signal Fail | 3 : Min Range Fail | 4 : Phase Fail | 5 : Hardware Fail | 255 : No update
			  }
		}
		do {
		    endTime = HAL_GetTick();
 8001682:	f003 f88d 	bl	80047a0 <HAL_GetTick>
 8001686:	60b8      	str	r0, [r7, #8]
		    diffTime = endTime - startTime;
 8001688:	68ba      	ldr	r2, [r7, #8]
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	607b      	str	r3, [r7, #4]
		} while (diffTime <= TIMBUDGET);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2b64      	cmp	r3, #100	@ 0x64
 8001694:	d9f5      	bls.n	8001682 <SensorI2CCommand+0xf6>
		#ifdef data
		for (int i = 0; i < NUM_SENSOR; i++) {
 8001696:	2300      	movs	r3, #0
 8001698:	613b      	str	r3, [r7, #16]
 800169a:	e018      	b.n	80016ce <SensorI2CCommand+0x142>
			  HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.1f ", filteredValue[i]), 500);
 800169c:	4a31      	ldr	r2, [pc, #196]	@ (8001764 <SensorI2CCommand+0x1d8>)
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	4413      	add	r3, r2
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7fe ff7e 	bl	80005a8 <__aeabi_f2d>
 80016ac:	4602      	mov	r2, r0
 80016ae:	460b      	mov	r3, r1
 80016b0:	492f      	ldr	r1, [pc, #188]	@ (8001770 <SensorI2CCommand+0x1e4>)
 80016b2:	4826      	ldr	r0, [pc, #152]	@ (800174c <SensorI2CCommand+0x1c0>)
 80016b4:	f012 f836 	bl	8013724 <siprintf>
 80016b8:	4603      	mov	r3, r0
 80016ba:	b29a      	uxth	r2, r3
 80016bc:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80016c0:	4922      	ldr	r1, [pc, #136]	@ (800174c <SensorI2CCommand+0x1c0>)
 80016c2:	4823      	ldr	r0, [pc, #140]	@ (8001750 <SensorI2CCommand+0x1c4>)
 80016c4:	f007 fab8 	bl	8008c38 <HAL_UART_Transmit>
		for (int i = 0; i < NUM_SENSOR; i++) {
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	3301      	adds	r3, #1
 80016cc:	613b      	str	r3, [r7, #16]
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	2b2f      	cmp	r3, #47	@ 0x2f
 80016d2:	dde3      	ble.n	800169c <SensorI2CCommand+0x110>
		  }
		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d ", NUM_READINGS), 100);
 80016d4:	2278      	movs	r2, #120	@ 0x78
 80016d6:	4927      	ldr	r1, [pc, #156]	@ (8001774 <SensorI2CCommand+0x1e8>)
 80016d8:	481c      	ldr	r0, [pc, #112]	@ (800174c <SensorI2CCommand+0x1c0>)
 80016da:	f012 f823 	bl	8013724 <siprintf>
 80016de:	4603      	mov	r3, r0
 80016e0:	b29a      	uxth	r2, r3
 80016e2:	2364      	movs	r3, #100	@ 0x64
 80016e4:	4919      	ldr	r1, [pc, #100]	@ (800174c <SensorI2CCommand+0x1c0>)
 80016e6:	481a      	ldr	r0, [pc, #104]	@ (8001750 <SensorI2CCommand+0x1c4>)
 80016e8:	f007 faa6 	bl	8008c38 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d ", sensorCount), 100);
 80016ec:	7efb      	ldrb	r3, [r7, #27]
 80016ee:	461a      	mov	r2, r3
 80016f0:	4920      	ldr	r1, [pc, #128]	@ (8001774 <SensorI2CCommand+0x1e8>)
 80016f2:	4816      	ldr	r0, [pc, #88]	@ (800174c <SensorI2CCommand+0x1c0>)
 80016f4:	f012 f816 	bl	8013724 <siprintf>
 80016f8:	4603      	mov	r3, r0
 80016fa:	b29a      	uxth	r2, r3
 80016fc:	2364      	movs	r3, #100	@ 0x64
 80016fe:	4913      	ldr	r1, [pc, #76]	@ (800174c <SensorI2CCommand+0x1c0>)
 8001700:	4813      	ldr	r0, [pc, #76]	@ (8001750 <SensorI2CCommand+0x1c4>)
 8001702:	f007 fa99 	bl	8008c38 <HAL_UART_Transmit>

		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%lu\n", diffTime), 100);
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	491b      	ldr	r1, [pc, #108]	@ (8001778 <SensorI2CCommand+0x1ec>)
 800170a:	4810      	ldr	r0, [pc, #64]	@ (800174c <SensorI2CCommand+0x1c0>)
 800170c:	f012 f80a 	bl	8013724 <siprintf>
 8001710:	4603      	mov	r3, r0
 8001712:	b29a      	uxth	r2, r3
 8001714:	2364      	movs	r3, #100	@ 0x64
 8001716:	490d      	ldr	r1, [pc, #52]	@ (800174c <SensorI2CCommand+0x1c0>)
 8001718:	480d      	ldr	r0, [pc, #52]	@ (8001750 <SensorI2CCommand+0x1c4>)
 800171a:	f007 fa8d 	bl	8008c38 <HAL_UART_Transmit>
		#endif
		startTime = 0;
 800171e:	2300      	movs	r3, #0
 8001720:	60fb      	str	r3, [r7, #12]
		endTime = 0;
 8001722:	2300      	movs	r3, #0
 8001724:	60bb      	str	r3, [r7, #8]
		diffTime = 0;
 8001726:	2300      	movs	r3, #0
 8001728:	607b      	str	r3, [r7, #4]
    for(int count =0; count < NUM_READINGS; count++){
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	3301      	adds	r3, #1
 800172e:	61fb      	str	r3, [r7, #28]
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	2b77      	cmp	r3, #119	@ 0x77
 8001734:	f77f af45 	ble.w	80015c2 <SensorI2CCommand+0x36>
    }
    TransmitStats();
 8001738:	f7ff fda6 	bl	8001288 <TransmitStats>
    ResetSensorData();
 800173c:	f7ff fdf4 	bl	8001328 <ResetSensorData>
}
 8001740:	bf00      	nop
 8001742:	3724      	adds	r7, #36	@ 0x24
 8001744:	46bd      	mov	sp, r7
 8001746:	bd90      	pop	{r4, r7, pc}
 8001748:	080187a4 	.word	0x080187a4
 800174c:	20007870 	.word	0x20007870
 8001750:	200077e8 	.word	0x200077e8
 8001754:	20007a60 	.word	0x20007a60
 8001758:	2000c560 	.word	0x2000c560
 800175c:	200078f4 	.word	0x200078f4
 8001760:	200072f4 	.word	0x200072f4
 8001764:	200076b4 	.word	0x200076b4
 8001768:	200071d8 	.word	0x200071d8
 800176c:	20002558 	.word	0x20002558
 8001770:	080187b4 	.word	0x080187b4
 8001774:	080187bc 	.word	0x080187bc
 8001778:	080187c0 	.word	0x080187c0

0800177c <SetI2CCommand>:

void SetI2CCommand(){
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "SetCommand\n\r"), 100);
 8001782:	49b3      	ldr	r1, [pc, #716]	@ (8001a50 <SetI2CCommand+0x2d4>)
 8001784:	48b3      	ldr	r0, [pc, #716]	@ (8001a54 <SetI2CCommand+0x2d8>)
 8001786:	f011 ffcd 	bl	8013724 <siprintf>
 800178a:	4603      	mov	r3, r0
 800178c:	b29a      	uxth	r2, r3
 800178e:	2364      	movs	r3, #100	@ 0x64
 8001790:	49b0      	ldr	r1, [pc, #704]	@ (8001a54 <SetI2CCommand+0x2d8>)
 8001792:	48b1      	ldr	r0, [pc, #708]	@ (8001a58 <SetI2CCommand+0x2dc>)
 8001794:	f007 fa50 	bl	8008c38 <HAL_UART_Transmit>

	ResetAllDevices();
 8001798:	f002 fee2 	bl	8004560 <ResetAllDevices>
	memset(vl53l0x_s, 0, sizeof(VL53L0X_Dev_t));
 800179c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80017a0:	2100      	movs	r1, #0
 80017a2:	48ae      	ldr	r0, [pc, #696]	@ (8001a5c <SetI2CCommand+0x2e0>)
 80017a4:	f012 f84d 	bl	8013842 <memset>
  	for (int i = 0; i < NUM_SENSOR; i++) {
 80017a8:	2300      	movs	r3, #0
 80017aa:	60fb      	str	r3, [r7, #12]
 80017ac:	e145      	b.n	8001a3a <SetI2CCommand+0x2be>
  	    uint8_t q = i / 12;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	4aab      	ldr	r2, [pc, #684]	@ (8001a60 <SetI2CCommand+0x2e4>)
 80017b2:	fb82 1203 	smull	r1, r2, r2, r3
 80017b6:	1052      	asrs	r2, r2, #1
 80017b8:	17db      	asrs	r3, r3, #31
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	72fb      	strb	r3, [r7, #11]
  	    uint8_t r = i % 12;
 80017be:	68fa      	ldr	r2, [r7, #12]
 80017c0:	4ba7      	ldr	r3, [pc, #668]	@ (8001a60 <SetI2CCommand+0x2e4>)
 80017c2:	fb83 1302 	smull	r1, r3, r3, r2
 80017c6:	1059      	asrs	r1, r3, #1
 80017c8:	17d3      	asrs	r3, r2, #31
 80017ca:	1ac9      	subs	r1, r1, r3
 80017cc:	460b      	mov	r3, r1
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	440b      	add	r3, r1
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	1ad1      	subs	r1, r2, r3
 80017d6:	460b      	mov	r3, r1
 80017d8:	72bb      	strb	r3, [r7, #10]
  	    uint8_t active_device = q * 2 + (r >= 8 ? 1 : 0);
 80017da:	7afb      	ldrb	r3, [r7, #11]
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	7aba      	ldrb	r2, [r7, #10]
 80017e2:	2a07      	cmp	r2, #7
 80017e4:	bf8c      	ite	hi
 80017e6:	2201      	movhi	r2, #1
 80017e8:	2200      	movls	r2, #0
 80017ea:	b2d2      	uxtb	r2, r2
 80017ec:	4413      	add	r3, r2
 80017ee:	727b      	strb	r3, [r7, #9]
  	    uint8_t channel = (r >= 8) ? r - 8 : r;
 80017f0:	7abb      	ldrb	r3, [r7, #10]
 80017f2:	2b07      	cmp	r3, #7
 80017f4:	d903      	bls.n	80017fe <SetI2CCommand+0x82>
 80017f6:	7abb      	ldrb	r3, [r7, #10]
 80017f8:	3b08      	subs	r3, #8
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	e000      	b.n	8001800 <SetI2CCommand+0x84>
 80017fe:	7abb      	ldrb	r3, [r7, #10]
 8001800:	723b      	strb	r3, [r7, #8]

        ResetDevicesExcept(active_device);
 8001802:	7a7b      	ldrb	r3, [r7, #9]
 8001804:	4618      	mov	r0, r3
 8001806:	f002 fed5 	bl	80045b4 <ResetDevicesExcept>
        setActiveTcaChannel(active_device,channel);
 800180a:	7a3a      	ldrb	r2, [r7, #8]
 800180c:	7a7b      	ldrb	r3, [r7, #9]
 800180e:	4611      	mov	r1, r2
 8001810:	4618      	mov	r0, r3
 8001812:	f002 feff 	bl	8004614 <setActiveTcaChannel>
  		Dev = &vl53l0x_s[i];
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800181c:	fb02 f303 	mul.w	r3, r2, r3
 8001820:	4a8e      	ldr	r2, [pc, #568]	@ (8001a5c <SetI2CCommand+0x2e0>)
 8001822:	4413      	add	r3, r2
 8001824:	4a8f      	ldr	r2, [pc, #572]	@ (8001a64 <SetI2CCommand+0x2e8>)
 8001826:	6013      	str	r3, [r2, #0]
  		Dev->I2cHandle = &hi2c1;
 8001828:	4b8e      	ldr	r3, [pc, #568]	@ (8001a64 <SetI2CCommand+0x2e8>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a8e      	ldr	r2, [pc, #568]	@ (8001a68 <SetI2CCommand+0x2ec>)
 800182e:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  		Dev->I2cDevAddr = VL53L0X_ADDR;
 8001832:	4b8c      	ldr	r3, [pc, #560]	@ (8001a64 <SetI2CCommand+0x2e8>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2252      	movs	r2, #82	@ 0x52
 8001838:	f883 2160 	strb.w	r2, [r3, #352]	@ 0x160
  		Dev->comms_type = 1;
 800183c:	4b89      	ldr	r3, [pc, #548]	@ (8001a64 <SetI2CCommand+0x2e8>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2201      	movs	r2, #1
 8001842:	f883 2174 	strb.w	r2, [r3, #372]	@ 0x174
  		Dev->comms_speed_khz = 100;
 8001846:	4b87      	ldr	r3, [pc, #540]	@ (8001a64 <SetI2CCommand+0x2e8>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	2264      	movs	r2, #100	@ 0x64
 800184c:	f8a3 2176 	strh.w	r2, [r3, #374]	@ 0x176
  		uint8_t newadd = 0x52 + 2*i;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	3329      	adds	r3, #41	@ 0x29
 8001854:	b2db      	uxtb	r3, r3
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	71fb      	strb	r3, [r7, #7]
  		VL53L0X_SetDeviceAddress(Dev, newadd);
 800185a:	4b82      	ldr	r3, [pc, #520]	@ (8001a64 <SetI2CCommand+0x2e8>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	79fa      	ldrb	r2, [r7, #7]
 8001860:	4611      	mov	r1, r2
 8001862:	4618      	mov	r0, r3
 8001864:	f008 fadc 	bl	8009e20 <VL53L0X_SetDeviceAddress>
  		Dev->I2cDevAddr = newadd;
 8001868:	4b7e      	ldr	r3, [pc, #504]	@ (8001a64 <SetI2CCommand+0x2e8>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	79fa      	ldrb	r2, [r7, #7]
 800186e:	f883 2160 	strb.w	r2, [r3, #352]	@ 0x160

  		VL53L0X_WaitDeviceBooted( Dev );
 8001872:	4b7c      	ldr	r3, [pc, #496]	@ (8001a64 <SetI2CCommand+0x2e8>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4618      	mov	r0, r3
 8001878:	f008 fdce 	bl	800a418 <VL53L0X_WaitDeviceBooted>
  		VL53L0X_DataInit( Dev );
 800187c:	4b79      	ldr	r3, [pc, #484]	@ (8001a64 <SetI2CCommand+0x2e8>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4618      	mov	r0, r3
 8001882:	f008 fae5 	bl	8009e50 <VL53L0X_DataInit>
  		VL53L0X_StaticInit( Dev );
 8001886:	4b77      	ldr	r3, [pc, #476]	@ (8001a64 <SetI2CCommand+0x2e8>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4618      	mov	r0, r3
 800188c:	f008 fc44 	bl	800a118 <VL53L0X_StaticInit>
  		VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 8001890:	4b74      	ldr	r3, [pc, #464]	@ (8001a64 <SetI2CCommand+0x2e8>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2101      	movs	r1, #1
 8001896:	4618      	mov	r0, r3
 8001898:	f008 fe5c 	bl	800a554 <VL53L0X_SetDeviceMode>

		VL53L0X_SetReferenceSpads(Dev, refSpadCountHost[i], isApertureSpadsHost[i]);
 800189c:	4b71      	ldr	r3, [pc, #452]	@ (8001a64 <SetI2CCommand+0x2e8>)
 800189e:	6818      	ldr	r0, [r3, #0]
 80018a0:	4a72      	ldr	r2, [pc, #456]	@ (8001a6c <SetI2CCommand+0x2f0>)
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80018a8:	4a71      	ldr	r2, [pc, #452]	@ (8001a70 <SetI2CCommand+0x2f4>)
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	4413      	add	r3, r2
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	461a      	mov	r2, r3
 80018b2:	f009 ff69 	bl	800b788 <VL53L0X_SetReferenceSpads>
  		VL53L0X_SetRefCalibration(Dev, VhvSettingsHost[i], PhaseCalHost[i]);
 80018b6:	4b6b      	ldr	r3, [pc, #428]	@ (8001a64 <SetI2CCommand+0x2e8>)
 80018b8:	6818      	ldr	r0, [r3, #0]
 80018ba:	4a6e      	ldr	r2, [pc, #440]	@ (8001a74 <SetI2CCommand+0x2f8>)
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	4413      	add	r3, r2
 80018c0:	7819      	ldrb	r1, [r3, #0]
 80018c2:	4a6d      	ldr	r2, [pc, #436]	@ (8001a78 <SetI2CCommand+0x2fc>)
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	4413      	add	r3, r2
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	461a      	mov	r2, r3
 80018cc:	f009 f8bc 	bl	800aa48 <VL53L0X_SetRefCalibration>

  		VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 80018d0:	4b64      	ldr	r3, [pc, #400]	@ (8001a64 <SetI2CCommand+0x2e8>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2201      	movs	r2, #1
 80018d6:	2100      	movs	r1, #0
 80018d8:	4618      	mov	r0, r3
 80018da:	f009 f8cd 	bl	800aa78 <VL53L0X_SetLimitCheckEnable>
  		VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 80018de:	4b61      	ldr	r3, [pc, #388]	@ (8001a64 <SetI2CCommand+0x2e8>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	2201      	movs	r2, #1
 80018e4:	2101      	movs	r1, #1
 80018e6:	4618      	mov	r0, r3
 80018e8:	f009 f8c6 	bl	800aa78 <VL53L0X_SetLimitCheckEnable>
  		VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 80018ec:	4b5d      	ldr	r3, [pc, #372]	@ (8001a64 <SetI2CCommand+0x2e8>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f641 1299 	movw	r2, #6553	@ 0x1999
 80018f4:	2101      	movs	r1, #1
 80018f6:	4618      	mov	r0, r3
 80018f8:	f009 f96e 	bl	800abd8 <VL53L0X_SetLimitCheckValue>
  		VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 80018fc:	4b59      	ldr	r3, [pc, #356]	@ (8001a64 <SetI2CCommand+0x2e8>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 8001904:	2100      	movs	r1, #0
 8001906:	4618      	mov	r0, r3
 8001908:	f009 f966 	bl	800abd8 <VL53L0X_SetLimitCheckValue>
  		VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev, 100000);
 800190c:	4b55      	ldr	r3, [pc, #340]	@ (8001a64 <SetI2CCommand+0x2e8>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	495a      	ldr	r1, [pc, #360]	@ (8001a7c <SetI2CCommand+0x300>)
 8001912:	4618      	mov	r0, r3
 8001914:	f008 fe7c 	bl	800a610 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
  		VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 8001918:	4b52      	ldr	r3, [pc, #328]	@ (8001a64 <SetI2CCommand+0x2e8>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2212      	movs	r2, #18
 800191e:	2100      	movs	r1, #0
 8001920:	4618      	mov	r0, r3
 8001922:	f008 fe9b 	bl	800a65c <VL53L0X_SetVcselPulsePeriod>
  		VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 8001926:	4b4f      	ldr	r3, [pc, #316]	@ (8001a64 <SetI2CCommand+0x2e8>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	220e      	movs	r2, #14
 800192c:	2101      	movs	r1, #1
 800192e:	4618      	mov	r0, r3
 8001930:	f008 fe94 	bl	800a65c <VL53L0X_SetVcselPulsePeriod>

		Kalman_Init(&filters[i], Q, R, P, 0);  // Q, R, P
 8001934:	68fa      	ldr	r2, [r7, #12]
 8001936:	4613      	mov	r3, r2
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	4413      	add	r3, r2
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	4a50      	ldr	r2, [pc, #320]	@ (8001a80 <SetI2CCommand+0x304>)
 8001940:	4413      	add	r3, r2
 8001942:	4a50      	ldr	r2, [pc, #320]	@ (8001a84 <SetI2CCommand+0x308>)
 8001944:	edd2 7a00 	vldr	s15, [r2]
 8001948:	4a4f      	ldr	r2, [pc, #316]	@ (8001a88 <SetI2CCommand+0x30c>)
 800194a:	ed92 7a00 	vldr	s14, [r2]
 800194e:	4a4f      	ldr	r2, [pc, #316]	@ (8001a8c <SetI2CCommand+0x310>)
 8001950:	edd2 6a00 	vldr	s13, [r2]
 8001954:	eddf 1a4e 	vldr	s3, [pc, #312]	@ 8001a90 <SetI2CCommand+0x314>
 8001958:	eeb0 1a66 	vmov.f32	s2, s13
 800195c:	eef0 0a47 	vmov.f32	s1, s14
 8001960:	eeb0 0a67 	vmov.f32	s0, s15
 8001964:	4618      	mov	r0, r3
 8001966:	f001 fe6d 	bl	8003644 <Kalman_Init>

		#ifdef data
 		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%02d:(",i), 100);
 800196a:	68fa      	ldr	r2, [r7, #12]
 800196c:	4949      	ldr	r1, [pc, #292]	@ (8001a94 <SetI2CCommand+0x318>)
 800196e:	4839      	ldr	r0, [pc, #228]	@ (8001a54 <SetI2CCommand+0x2d8>)
 8001970:	f011 fed8 	bl	8013724 <siprintf>
 8001974:	4603      	mov	r3, r0
 8001976:	b29a      	uxth	r2, r3
 8001978:	2364      	movs	r3, #100	@ 0x64
 800197a:	4936      	ldr	r1, [pc, #216]	@ (8001a54 <SetI2CCommand+0x2d8>)
 800197c:	4836      	ldr	r0, [pc, #216]	@ (8001a58 <SetI2CCommand+0x2dc>)
 800197e:	f007 f95b 	bl	8008c38 <HAL_UART_Transmit>
 		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%02lu ",refSpadCountHost[i]), 100);
 8001982:	4a3a      	ldr	r2, [pc, #232]	@ (8001a6c <SetI2CCommand+0x2f0>)
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800198a:	461a      	mov	r2, r3
 800198c:	4942      	ldr	r1, [pc, #264]	@ (8001a98 <SetI2CCommand+0x31c>)
 800198e:	4831      	ldr	r0, [pc, #196]	@ (8001a54 <SetI2CCommand+0x2d8>)
 8001990:	f011 fec8 	bl	8013724 <siprintf>
 8001994:	4603      	mov	r3, r0
 8001996:	b29a      	uxth	r2, r3
 8001998:	2364      	movs	r3, #100	@ 0x64
 800199a:	492e      	ldr	r1, [pc, #184]	@ (8001a54 <SetI2CCommand+0x2d8>)
 800199c:	482e      	ldr	r0, [pc, #184]	@ (8001a58 <SetI2CCommand+0x2dc>)
 800199e:	f007 f94b 	bl	8008c38 <HAL_UART_Transmit>
 		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%02d ",isApertureSpadsHost[i]), 100);
 80019a2:	4a33      	ldr	r2, [pc, #204]	@ (8001a70 <SetI2CCommand+0x2f4>)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	4413      	add	r3, r2
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	461a      	mov	r2, r3
 80019ac:	493b      	ldr	r1, [pc, #236]	@ (8001a9c <SetI2CCommand+0x320>)
 80019ae:	4829      	ldr	r0, [pc, #164]	@ (8001a54 <SetI2CCommand+0x2d8>)
 80019b0:	f011 feb8 	bl	8013724 <siprintf>
 80019b4:	4603      	mov	r3, r0
 80019b6:	b29a      	uxth	r2, r3
 80019b8:	2364      	movs	r3, #100	@ 0x64
 80019ba:	4926      	ldr	r1, [pc, #152]	@ (8001a54 <SetI2CCommand+0x2d8>)
 80019bc:	4826      	ldr	r0, [pc, #152]	@ (8001a58 <SetI2CCommand+0x2dc>)
 80019be:	f007 f93b 	bl	8008c38 <HAL_UART_Transmit>
 		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%02d ",VhvSettingsHost[i]), 100);
 80019c2:	4a2c      	ldr	r2, [pc, #176]	@ (8001a74 <SetI2CCommand+0x2f8>)
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	4413      	add	r3, r2
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	461a      	mov	r2, r3
 80019cc:	4933      	ldr	r1, [pc, #204]	@ (8001a9c <SetI2CCommand+0x320>)
 80019ce:	4821      	ldr	r0, [pc, #132]	@ (8001a54 <SetI2CCommand+0x2d8>)
 80019d0:	f011 fea8 	bl	8013724 <siprintf>
 80019d4:	4603      	mov	r3, r0
 80019d6:	b29a      	uxth	r2, r3
 80019d8:	2364      	movs	r3, #100	@ 0x64
 80019da:	491e      	ldr	r1, [pc, #120]	@ (8001a54 <SetI2CCommand+0x2d8>)
 80019dc:	481e      	ldr	r0, [pc, #120]	@ (8001a58 <SetI2CCommand+0x2dc>)
 80019de:	f007 f92b 	bl	8008c38 <HAL_UART_Transmit>
 		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%02d) ",PhaseCalHost[i]), 100);
 80019e2:	4a25      	ldr	r2, [pc, #148]	@ (8001a78 <SetI2CCommand+0x2fc>)
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	4413      	add	r3, r2
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	461a      	mov	r2, r3
 80019ec:	492c      	ldr	r1, [pc, #176]	@ (8001aa0 <SetI2CCommand+0x324>)
 80019ee:	4819      	ldr	r0, [pc, #100]	@ (8001a54 <SetI2CCommand+0x2d8>)
 80019f0:	f011 fe98 	bl	8013724 <siprintf>
 80019f4:	4603      	mov	r3, r0
 80019f6:	b29a      	uxth	r2, r3
 80019f8:	2364      	movs	r3, #100	@ 0x64
 80019fa:	4916      	ldr	r1, [pc, #88]	@ (8001a54 <SetI2CCommand+0x2d8>)
 80019fc:	4816      	ldr	r0, [pc, #88]	@ (8001a58 <SetI2CCommand+0x2dc>)
 80019fe:	f007 f91b 	bl	8008c38 <HAL_UART_Transmit>
 		if(i%12 ==11){HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "\n\r"), 100);}
 8001a02:	68f9      	ldr	r1, [r7, #12]
 8001a04:	4b16      	ldr	r3, [pc, #88]	@ (8001a60 <SetI2CCommand+0x2e4>)
 8001a06:	fb83 2301 	smull	r2, r3, r3, r1
 8001a0a:	105a      	asrs	r2, r3, #1
 8001a0c:	17cb      	asrs	r3, r1, #31
 8001a0e:	1ad2      	subs	r2, r2, r3
 8001a10:	4613      	mov	r3, r2
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	4413      	add	r3, r2
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	1aca      	subs	r2, r1, r3
 8001a1a:	2a0b      	cmp	r2, #11
 8001a1c:	d10a      	bne.n	8001a34 <SetI2CCommand+0x2b8>
 8001a1e:	4921      	ldr	r1, [pc, #132]	@ (8001aa4 <SetI2CCommand+0x328>)
 8001a20:	480c      	ldr	r0, [pc, #48]	@ (8001a54 <SetI2CCommand+0x2d8>)
 8001a22:	f011 fe7f 	bl	8013724 <siprintf>
 8001a26:	4603      	mov	r3, r0
 8001a28:	b29a      	uxth	r2, r3
 8001a2a:	2364      	movs	r3, #100	@ 0x64
 8001a2c:	4909      	ldr	r1, [pc, #36]	@ (8001a54 <SetI2CCommand+0x2d8>)
 8001a2e:	480a      	ldr	r0, [pc, #40]	@ (8001a58 <SetI2CCommand+0x2dc>)
 8001a30:	f007 f902 	bl	8008c38 <HAL_UART_Transmit>
  	for (int i = 0; i < NUM_SENSOR; i++) {
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	3301      	adds	r3, #1
 8001a38:	60fb      	str	r3, [r7, #12]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2b2f      	cmp	r3, #47	@ 0x2f
 8001a3e:	f77f aeb6 	ble.w	80017ae <SetI2CCommand+0x32>
		#endif
  	}
  	InitStats();
 8001a42:	f7ff fc99 	bl	8001378 <InitStats>
}
 8001a46:	bf00      	nop
 8001a48:	3710      	adds	r7, #16
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	080187c8 	.word	0x080187c8
 8001a54:	20007870 	.word	0x20007870
 8001a58:	200077e8 	.word	0x200077e8
 8001a5c:	20007a60 	.word	0x20007a60
 8001a60:	2aaaaaab 	.word	0x2aaaaaab
 8001a64:	2000c560 	.word	0x2000c560
 8001a68:	200072a0 	.word	0x200072a0
 8001a6c:	20000010 	.word	0x20000010
 8001a70:	200000d0 	.word	0x200000d0
 8001a74:	20000100 	.word	0x20000100
 8001a78:	20000130 	.word	0x20000130
 8001a7c:	000186a0 	.word	0x000186a0
 8001a80:	200072f4 	.word	0x200072f4
 8001a84:	20000000 	.word	0x20000000
 8001a88:	20000004 	.word	0x20000004
 8001a8c:	20000008 	.word	0x20000008
 8001a90:	00000000 	.word	0x00000000
 8001a94:	080187d8 	.word	0x080187d8
 8001a98:	080187e0 	.word	0x080187e0
 8001a9c:	080187e8 	.word	0x080187e8
 8001aa0:	080187f0 	.word	0x080187f0
 8001aa4:	080187f8 	.word	0x080187f8

08001aa8 <RevCommand>:

void RevCommand(char *arg){
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
    int step_rev_angle;
    uint32_t startTime, endTime, elapsedTime;
    if(sscanf(arg, "%d", &step_rev_angle) == 1){
 8001ab0:	f107 0308 	add.w	r3, r7, #8
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	4927      	ldr	r1, [pc, #156]	@ (8001b54 <RevCommand+0xac>)
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f011 fe53 	bl	8013764 <siscanf>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d134      	bne.n	8001b2e <RevCommand+0x86>
        startTime = HAL_GetTick();
 8001ac4:	f002 fe6c 	bl	80047a0 <HAL_GetTick>
 8001ac8:	6178      	str	r0, [r7, #20]
		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d deg revolution Start \n\r",step_rev_angle), 100);
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	461a      	mov	r2, r3
 8001ace:	4922      	ldr	r1, [pc, #136]	@ (8001b58 <RevCommand+0xb0>)
 8001ad0:	4822      	ldr	r0, [pc, #136]	@ (8001b5c <RevCommand+0xb4>)
 8001ad2:	f011 fe27 	bl	8013724 <siprintf>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	b29a      	uxth	r2, r3
 8001ada:	2364      	movs	r3, #100	@ 0x64
 8001adc:	491f      	ldr	r1, [pc, #124]	@ (8001b5c <RevCommand+0xb4>)
 8001ade:	4820      	ldr	r0, [pc, #128]	@ (8001b60 <RevCommand+0xb8>)
 8001ae0:	f007 f8aa 	bl	8008c38 <HAL_UART_Transmit>
        stepRev(step_rev_angle);
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f002 f8c2 	bl	8003c70 <stepRev>
		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d deg revolution End \n\r",step_rev_angle), 100);
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	461a      	mov	r2, r3
 8001af0:	491c      	ldr	r1, [pc, #112]	@ (8001b64 <RevCommand+0xbc>)
 8001af2:	481a      	ldr	r0, [pc, #104]	@ (8001b5c <RevCommand+0xb4>)
 8001af4:	f011 fe16 	bl	8013724 <siprintf>
 8001af8:	4603      	mov	r3, r0
 8001afa:	b29a      	uxth	r2, r3
 8001afc:	2364      	movs	r3, #100	@ 0x64
 8001afe:	4917      	ldr	r1, [pc, #92]	@ (8001b5c <RevCommand+0xb4>)
 8001b00:	4817      	ldr	r0, [pc, #92]	@ (8001b60 <RevCommand+0xb8>)
 8001b02:	f007 f899 	bl	8008c38 <HAL_UART_Transmit>
		endTime = HAL_GetTick();
 8001b06:	f002 fe4b 	bl	80047a0 <HAL_GetTick>
 8001b0a:	6138      	str	r0, [r7, #16]
		elapsedTime = endTime - startTime;
 8001b0c:	693a      	ldr	r2, [r7, #16]
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	60fb      	str	r3, [r7, #12]
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "Elapsed Time: %lu ms\n\r", elapsedTime), 100);
 8001b14:	68fa      	ldr	r2, [r7, #12]
 8001b16:	4914      	ldr	r1, [pc, #80]	@ (8001b68 <RevCommand+0xc0>)
 8001b18:	4810      	ldr	r0, [pc, #64]	@ (8001b5c <RevCommand+0xb4>)
 8001b1a:	f011 fe03 	bl	8013724 <siprintf>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	b29a      	uxth	r2, r3
 8001b22:	2364      	movs	r3, #100	@ 0x64
 8001b24:	490d      	ldr	r1, [pc, #52]	@ (8001b5c <RevCommand+0xb4>)
 8001b26:	480e      	ldr	r0, [pc, #56]	@ (8001b60 <RevCommand+0xb8>)
 8001b28:	f007 f886 	bl	8008c38 <HAL_UART_Transmit>
 8001b2c:	e00a      	b.n	8001b44 <RevCommand+0x9c>
    }else{
    	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "invalid data\r\n"), 100);
 8001b2e:	490f      	ldr	r1, [pc, #60]	@ (8001b6c <RevCommand+0xc4>)
 8001b30:	480a      	ldr	r0, [pc, #40]	@ (8001b5c <RevCommand+0xb4>)
 8001b32:	f011 fdf7 	bl	8013724 <siprintf>
 8001b36:	4603      	mov	r3, r0
 8001b38:	b29a      	uxth	r2, r3
 8001b3a:	2364      	movs	r3, #100	@ 0x64
 8001b3c:	4907      	ldr	r1, [pc, #28]	@ (8001b5c <RevCommand+0xb4>)
 8001b3e:	4808      	ldr	r0, [pc, #32]	@ (8001b60 <RevCommand+0xb8>)
 8001b40:	f007 f87a 	bl	8008c38 <HAL_UART_Transmit>
    }
    HAL_Delay(1000); // Delay for 1 second
 8001b44:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001b48:	f002 fe36 	bl	80047b8 <HAL_Delay>
}
 8001b4c:	bf00      	nop
 8001b4e:	3718      	adds	r7, #24
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	080187fc 	.word	0x080187fc
 8001b58:	08018800 	.word	0x08018800
 8001b5c:	20007870 	.word	0x20007870
 8001b60:	200077e8 	.word	0x200077e8
 8001b64:	0801881c 	.word	0x0801881c
 8001b68:	08018838 	.word	0x08018838
 8001b6c:	08018850 	.word	0x08018850

08001b70 <LinCommand>:

void LinCommand(char *arg){
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
    int step_lin_dist = 0;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	60bb      	str	r3, [r7, #8]
    uint32_t startTime, endTime, elapsedTime;
    if (sscanf(arg, "%d", &step_lin_dist) == 1) {
 8001b7c:	f107 0308 	add.w	r3, r7, #8
 8001b80:	461a      	mov	r2, r3
 8001b82:	4927      	ldr	r1, [pc, #156]	@ (8001c20 <LinCommand+0xb0>)
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f011 fded 	bl	8013764 <siscanf>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d134      	bne.n	8001bfa <LinCommand+0x8a>
        startTime = HAL_GetTick();
 8001b90:	f002 fe06 	bl	80047a0 <HAL_GetTick>
 8001b94:	6178      	str	r0, [r7, #20]
		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d mm lin Still moving \n\r",step_lin_dist), 100);
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	461a      	mov	r2, r3
 8001b9a:	4922      	ldr	r1, [pc, #136]	@ (8001c24 <LinCommand+0xb4>)
 8001b9c:	4822      	ldr	r0, [pc, #136]	@ (8001c28 <LinCommand+0xb8>)
 8001b9e:	f011 fdc1 	bl	8013724 <siprintf>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	b29a      	uxth	r2, r3
 8001ba6:	2364      	movs	r3, #100	@ 0x64
 8001ba8:	491f      	ldr	r1, [pc, #124]	@ (8001c28 <LinCommand+0xb8>)
 8001baa:	4820      	ldr	r0, [pc, #128]	@ (8001c2c <LinCommand+0xbc>)
 8001bac:	f007 f844 	bl	8008c38 <HAL_UART_Transmit>
        stepLin(step_lin_dist);
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f002 f8c4 	bl	8003d40 <stepLin>
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d mm lin End\n\r", step_lin_dist), 100);
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	461a      	mov	r2, r3
 8001bbc:	491c      	ldr	r1, [pc, #112]	@ (8001c30 <LinCommand+0xc0>)
 8001bbe:	481a      	ldr	r0, [pc, #104]	@ (8001c28 <LinCommand+0xb8>)
 8001bc0:	f011 fdb0 	bl	8013724 <siprintf>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	b29a      	uxth	r2, r3
 8001bc8:	2364      	movs	r3, #100	@ 0x64
 8001bca:	4917      	ldr	r1, [pc, #92]	@ (8001c28 <LinCommand+0xb8>)
 8001bcc:	4817      	ldr	r0, [pc, #92]	@ (8001c2c <LinCommand+0xbc>)
 8001bce:	f007 f833 	bl	8008c38 <HAL_UART_Transmit>
		endTime = HAL_GetTick();
 8001bd2:	f002 fde5 	bl	80047a0 <HAL_GetTick>
 8001bd6:	6138      	str	r0, [r7, #16]
		elapsedTime = endTime - startTime;
 8001bd8:	693a      	ldr	r2, [r7, #16]
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	60fb      	str	r3, [r7, #12]
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "Elapsed Time: %lu ms\n\r", elapsedTime), 100);
 8001be0:	68fa      	ldr	r2, [r7, #12]
 8001be2:	4914      	ldr	r1, [pc, #80]	@ (8001c34 <LinCommand+0xc4>)
 8001be4:	4810      	ldr	r0, [pc, #64]	@ (8001c28 <LinCommand+0xb8>)
 8001be6:	f011 fd9d 	bl	8013724 <siprintf>
 8001bea:	4603      	mov	r3, r0
 8001bec:	b29a      	uxth	r2, r3
 8001bee:	2364      	movs	r3, #100	@ 0x64
 8001bf0:	490d      	ldr	r1, [pc, #52]	@ (8001c28 <LinCommand+0xb8>)
 8001bf2:	480e      	ldr	r0, [pc, #56]	@ (8001c2c <LinCommand+0xbc>)
 8001bf4:	f007 f820 	bl	8008c38 <HAL_UART_Transmit>
 8001bf8:	e00a      	b.n	8001c10 <LinCommand+0xa0>
    } else {
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "invalid data\r\n"), 100);
 8001bfa:	490f      	ldr	r1, [pc, #60]	@ (8001c38 <LinCommand+0xc8>)
 8001bfc:	480a      	ldr	r0, [pc, #40]	@ (8001c28 <LinCommand+0xb8>)
 8001bfe:	f011 fd91 	bl	8013724 <siprintf>
 8001c02:	4603      	mov	r3, r0
 8001c04:	b29a      	uxth	r2, r3
 8001c06:	2364      	movs	r3, #100	@ 0x64
 8001c08:	4907      	ldr	r1, [pc, #28]	@ (8001c28 <LinCommand+0xb8>)
 8001c0a:	4808      	ldr	r0, [pc, #32]	@ (8001c2c <LinCommand+0xbc>)
 8001c0c:	f007 f814 	bl	8008c38 <HAL_UART_Transmit>
    }
    HAL_Delay(1000); // Delay for 1 second
 8001c10:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c14:	f002 fdd0 	bl	80047b8 <HAL_Delay>
}
 8001c18:	bf00      	nop
 8001c1a:	3718      	adds	r7, #24
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	080187fc 	.word	0x080187fc
 8001c24:	08018860 	.word	0x08018860
 8001c28:	20007870 	.word	0x20007870
 8001c2c:	200077e8 	.word	0x200077e8
 8001c30:	0801887c 	.word	0x0801887c
 8001c34:	08018838 	.word	0x08018838
 8001c38:	08018850 	.word	0x08018850

08001c3c <ServoCommand>:

void ServoCommand(char *arg){
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
    float servo_angle_val = 0;
 8001c44:	f04f 0300 	mov.w	r3, #0
 8001c48:	60fb      	str	r3, [r7, #12]
    if(sscanf(arg, "%f", &servo_angle_val) == 1) {
 8001c4a:	f107 030c 	add.w	r3, r7, #12
 8001c4e:	461a      	mov	r2, r3
 8001c50:	4927      	ldr	r1, [pc, #156]	@ (8001cf0 <ServoCommand+0xb4>)
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f011 fd86 	bl	8013764 <siscanf>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d138      	bne.n	8001cd0 <ServoCommand+0x94>
    	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f servo Still moving \n\r", servo_angle_val), 100);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7fe fca1 	bl	80005a8 <__aeabi_f2d>
 8001c66:	4602      	mov	r2, r0
 8001c68:	460b      	mov	r3, r1
 8001c6a:	4922      	ldr	r1, [pc, #136]	@ (8001cf4 <ServoCommand+0xb8>)
 8001c6c:	4822      	ldr	r0, [pc, #136]	@ (8001cf8 <ServoCommand+0xbc>)
 8001c6e:	f011 fd59 	bl	8013724 <siprintf>
 8001c72:	4603      	mov	r3, r0
 8001c74:	b29a      	uxth	r2, r3
 8001c76:	2364      	movs	r3, #100	@ 0x64
 8001c78:	491f      	ldr	r1, [pc, #124]	@ (8001cf8 <ServoCommand+0xbc>)
 8001c7a:	4820      	ldr	r0, [pc, #128]	@ (8001cfc <ServoCommand+0xc0>)
 8001c7c:	f006 ffdc 	bl	8008c38 <HAL_UART_Transmit>
    	setServoAngle(&htim2, TIM_CHANNEL_1, servo_angle_val);
 8001c80:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c88:	edc7 7a00 	vstr	s15, [r7]
 8001c8c:	783b      	ldrb	r3, [r7, #0]
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	461a      	mov	r2, r3
 8001c92:	2100      	movs	r1, #0
 8001c94:	481a      	ldr	r0, [pc, #104]	@ (8001d00 <ServoCommand+0xc4>)
 8001c96:	f002 f8fb 	bl	8003e90 <setServoAngle>
    	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f servo End \n\r", servo_angle_val), 100);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7fe fc83 	bl	80005a8 <__aeabi_f2d>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	4917      	ldr	r1, [pc, #92]	@ (8001d04 <ServoCommand+0xc8>)
 8001ca8:	4813      	ldr	r0, [pc, #76]	@ (8001cf8 <ServoCommand+0xbc>)
 8001caa:	f011 fd3b 	bl	8013724 <siprintf>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	2364      	movs	r3, #100	@ 0x64
 8001cb4:	4910      	ldr	r1, [pc, #64]	@ (8001cf8 <ServoCommand+0xbc>)
 8001cb6:	4811      	ldr	r0, [pc, #68]	@ (8001cfc <ServoCommand+0xc0>)
 8001cb8:	f006 ffbe 	bl	8008c38 <HAL_UART_Transmit>
        HAL_Delay(2000); // Delay for 2 seconds
 8001cbc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001cc0:	f002 fd7a 	bl	80047b8 <HAL_Delay>
        setServoAngle(&htim2, TIM_CHANNEL_1, 0); // return to servo origin
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	480d      	ldr	r0, [pc, #52]	@ (8001d00 <ServoCommand+0xc4>)
 8001cca:	f002 f8e1 	bl	8003e90 <setServoAngle>
    }else{
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "invalid data\r\n"), 100);
    }
}
 8001cce:	e00a      	b.n	8001ce6 <ServoCommand+0xaa>
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "invalid data\r\n"), 100);
 8001cd0:	490d      	ldr	r1, [pc, #52]	@ (8001d08 <ServoCommand+0xcc>)
 8001cd2:	4809      	ldr	r0, [pc, #36]	@ (8001cf8 <ServoCommand+0xbc>)
 8001cd4:	f011 fd26 	bl	8013724 <siprintf>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	b29a      	uxth	r2, r3
 8001cdc:	2364      	movs	r3, #100	@ 0x64
 8001cde:	4906      	ldr	r1, [pc, #24]	@ (8001cf8 <ServoCommand+0xbc>)
 8001ce0:	4806      	ldr	r0, [pc, #24]	@ (8001cfc <ServoCommand+0xc0>)
 8001ce2:	f006 ffa9 	bl	8008c38 <HAL_UART_Transmit>
}
 8001ce6:	bf00      	nop
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	0801888c 	.word	0x0801888c
 8001cf4:	08018890 	.word	0x08018890
 8001cf8:	20007870 	.word	0x20007870
 8001cfc:	200077e8 	.word	0x200077e8
 8001d00:	20007798 	.word	0x20007798
 8001d04:	080188ac 	.word	0x080188ac
 8001d08:	08018850 	.word	0x08018850

08001d0c <Servo2Command>:

void Servo2Command(char *arg){
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
    float servo_angle_val = 0;
 8001d14:	f04f 0300 	mov.w	r3, #0
 8001d18:	60fb      	str	r3, [r7, #12]
    if(sscanf(arg, "%f", &servo_angle_val) == 1) {
 8001d1a:	f107 030c 	add.w	r3, r7, #12
 8001d1e:	461a      	mov	r2, r3
 8001d20:	4922      	ldr	r1, [pc, #136]	@ (8001dac <Servo2Command+0xa0>)
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f011 fd1e 	bl	8013764 <siscanf>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d12f      	bne.n	8001d8e <Servo2Command+0x82>
    	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f servo Still moving \n\r", servo_angle_val), 100);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7fe fc39 	bl	80005a8 <__aeabi_f2d>
 8001d36:	4602      	mov	r2, r0
 8001d38:	460b      	mov	r3, r1
 8001d3a:	491d      	ldr	r1, [pc, #116]	@ (8001db0 <Servo2Command+0xa4>)
 8001d3c:	481d      	ldr	r0, [pc, #116]	@ (8001db4 <Servo2Command+0xa8>)
 8001d3e:	f011 fcf1 	bl	8013724 <siprintf>
 8001d42:	4603      	mov	r3, r0
 8001d44:	b29a      	uxth	r2, r3
 8001d46:	2364      	movs	r3, #100	@ 0x64
 8001d48:	491a      	ldr	r1, [pc, #104]	@ (8001db4 <Servo2Command+0xa8>)
 8001d4a:	481b      	ldr	r0, [pc, #108]	@ (8001db8 <Servo2Command+0xac>)
 8001d4c:	f006 ff74 	bl	8008c38 <HAL_UART_Transmit>
    	setServoAngle(&htim2, TIM_CHANNEL_1, servo_angle_val);
 8001d50:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d58:	edc7 7a00 	vstr	s15, [r7]
 8001d5c:	783b      	ldrb	r3, [r7, #0]
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	461a      	mov	r2, r3
 8001d62:	2100      	movs	r1, #0
 8001d64:	4815      	ldr	r0, [pc, #84]	@ (8001dbc <Servo2Command+0xb0>)
 8001d66:	f002 f893 	bl	8003e90 <setServoAngle>
    	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f servo End \n\r", servo_angle_val), 100);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7fe fc1b 	bl	80005a8 <__aeabi_f2d>
 8001d72:	4602      	mov	r2, r0
 8001d74:	460b      	mov	r3, r1
 8001d76:	4912      	ldr	r1, [pc, #72]	@ (8001dc0 <Servo2Command+0xb4>)
 8001d78:	480e      	ldr	r0, [pc, #56]	@ (8001db4 <Servo2Command+0xa8>)
 8001d7a:	f011 fcd3 	bl	8013724 <siprintf>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	b29a      	uxth	r2, r3
 8001d82:	2364      	movs	r3, #100	@ 0x64
 8001d84:	490b      	ldr	r1, [pc, #44]	@ (8001db4 <Servo2Command+0xa8>)
 8001d86:	480c      	ldr	r0, [pc, #48]	@ (8001db8 <Servo2Command+0xac>)
 8001d88:	f006 ff56 	bl	8008c38 <HAL_UART_Transmit>
    }else{
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "invalid data\r\n"), 100);
    }
}
 8001d8c:	e00a      	b.n	8001da4 <Servo2Command+0x98>
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "invalid data\r\n"), 100);
 8001d8e:	490d      	ldr	r1, [pc, #52]	@ (8001dc4 <Servo2Command+0xb8>)
 8001d90:	4808      	ldr	r0, [pc, #32]	@ (8001db4 <Servo2Command+0xa8>)
 8001d92:	f011 fcc7 	bl	8013724 <siprintf>
 8001d96:	4603      	mov	r3, r0
 8001d98:	b29a      	uxth	r2, r3
 8001d9a:	2364      	movs	r3, #100	@ 0x64
 8001d9c:	4905      	ldr	r1, [pc, #20]	@ (8001db4 <Servo2Command+0xa8>)
 8001d9e:	4806      	ldr	r0, [pc, #24]	@ (8001db8 <Servo2Command+0xac>)
 8001da0:	f006 ff4a 	bl	8008c38 <HAL_UART_Transmit>
}
 8001da4:	bf00      	nop
 8001da6:	3710      	adds	r7, #16
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	0801888c 	.word	0x0801888c
 8001db0:	08018890 	.word	0x08018890
 8001db4:	20007870 	.word	0x20007870
 8001db8:	200077e8 	.word	0x200077e8
 8001dbc:	20007798 	.word	0x20007798
 8001dc0:	080188ac 	.word	0x080188ac
 8001dc4:	08018850 	.word	0x08018850

08001dc8 <AvgStdCommand>:




void AvgStdCommand(){
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "Avg Std Force Z\n" ), 1000);
 8001dce:	496f      	ldr	r1, [pc, #444]	@ (8001f8c <AvgStdCommand+0x1c4>)
 8001dd0:	486f      	ldr	r0, [pc, #444]	@ (8001f90 <AvgStdCommand+0x1c8>)
 8001dd2:	f011 fca7 	bl	8013724 <siprintf>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	b29a      	uxth	r2, r3
 8001dda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dde:	496c      	ldr	r1, [pc, #432]	@ (8001f90 <AvgStdCommand+0x1c8>)
 8001de0:	486c      	ldr	r0, [pc, #432]	@ (8001f94 <AvgStdCommand+0x1cc>)
 8001de2:	f006 ff29 	bl	8008c38 <HAL_UART_Transmit>
    for(int i = 0; i < sizeof(Xmean)/sizeof(Xmean[0]); i++) {
 8001de6:	2300      	movs	r3, #0
 8001de8:	607b      	str	r3, [r7, #4]
 8001dea:	e02e      	b.n	8001e4a <AvgStdCommand+0x82>
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", Xmean[i]), 1000);
 8001dec:	4a6a      	ldr	r2, [pc, #424]	@ (8001f98 <AvgStdCommand+0x1d0>)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	4413      	add	r3, r2
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7fe fbd6 	bl	80005a8 <__aeabi_f2d>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	460b      	mov	r3, r1
 8001e00:	4966      	ldr	r1, [pc, #408]	@ (8001f9c <AvgStdCommand+0x1d4>)
 8001e02:	4863      	ldr	r0, [pc, #396]	@ (8001f90 <AvgStdCommand+0x1c8>)
 8001e04:	f011 fc8e 	bl	8013724 <siprintf>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	b29a      	uxth	r2, r3
 8001e0c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e10:	495f      	ldr	r1, [pc, #380]	@ (8001f90 <AvgStdCommand+0x1c8>)
 8001e12:	4860      	ldr	r0, [pc, #384]	@ (8001f94 <AvgStdCommand+0x1cc>)
 8001e14:	f006 ff10 	bl	8008c38 <HAL_UART_Transmit>
        if(i%8==7){HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "\n"), 1000);}
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	425a      	negs	r2, r3
 8001e1c:	f003 0307 	and.w	r3, r3, #7
 8001e20:	f002 0207 	and.w	r2, r2, #7
 8001e24:	bf58      	it	pl
 8001e26:	4253      	negpl	r3, r2
 8001e28:	2b07      	cmp	r3, #7
 8001e2a:	d10b      	bne.n	8001e44 <AvgStdCommand+0x7c>
 8001e2c:	495c      	ldr	r1, [pc, #368]	@ (8001fa0 <AvgStdCommand+0x1d8>)
 8001e2e:	4858      	ldr	r0, [pc, #352]	@ (8001f90 <AvgStdCommand+0x1c8>)
 8001e30:	f011 fc78 	bl	8013724 <siprintf>
 8001e34:	4603      	mov	r3, r0
 8001e36:	b29a      	uxth	r2, r3
 8001e38:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e3c:	4954      	ldr	r1, [pc, #336]	@ (8001f90 <AvgStdCommand+0x1c8>)
 8001e3e:	4855      	ldr	r0, [pc, #340]	@ (8001f94 <AvgStdCommand+0x1cc>)
 8001e40:	f006 fefa 	bl	8008c38 <HAL_UART_Transmit>
    for(int i = 0; i < sizeof(Xmean)/sizeof(Xmean[0]); i++) {
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	3301      	adds	r3, #1
 8001e48:	607b      	str	r3, [r7, #4]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2b2f      	cmp	r3, #47	@ 0x2f
 8001e4e:	d9cd      	bls.n	8001dec <AvgStdCommand+0x24>
    }
    for(int i = 0; i < sizeof(Xstd)/sizeof(Xstd[0]); i++) {
 8001e50:	2300      	movs	r3, #0
 8001e52:	603b      	str	r3, [r7, #0]
 8001e54:	e02e      	b.n	8001eb4 <AvgStdCommand+0xec>
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", Xstd[i]), 1000);
 8001e56:	4a53      	ldr	r2, [pc, #332]	@ (8001fa4 <AvgStdCommand+0x1dc>)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	4413      	add	r3, r2
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7fe fba1 	bl	80005a8 <__aeabi_f2d>
 8001e66:	4602      	mov	r2, r0
 8001e68:	460b      	mov	r3, r1
 8001e6a:	494c      	ldr	r1, [pc, #304]	@ (8001f9c <AvgStdCommand+0x1d4>)
 8001e6c:	4848      	ldr	r0, [pc, #288]	@ (8001f90 <AvgStdCommand+0x1c8>)
 8001e6e:	f011 fc59 	bl	8013724 <siprintf>
 8001e72:	4603      	mov	r3, r0
 8001e74:	b29a      	uxth	r2, r3
 8001e76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e7a:	4945      	ldr	r1, [pc, #276]	@ (8001f90 <AvgStdCommand+0x1c8>)
 8001e7c:	4845      	ldr	r0, [pc, #276]	@ (8001f94 <AvgStdCommand+0x1cc>)
 8001e7e:	f006 fedb 	bl	8008c38 <HAL_UART_Transmit>
        if(i%8==7){HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "\n"), 1000);}
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	425a      	negs	r2, r3
 8001e86:	f003 0307 	and.w	r3, r3, #7
 8001e8a:	f002 0207 	and.w	r2, r2, #7
 8001e8e:	bf58      	it	pl
 8001e90:	4253      	negpl	r3, r2
 8001e92:	2b07      	cmp	r3, #7
 8001e94:	d10b      	bne.n	8001eae <AvgStdCommand+0xe6>
 8001e96:	4942      	ldr	r1, [pc, #264]	@ (8001fa0 <AvgStdCommand+0x1d8>)
 8001e98:	483d      	ldr	r0, [pc, #244]	@ (8001f90 <AvgStdCommand+0x1c8>)
 8001e9a:	f011 fc43 	bl	8013724 <siprintf>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	b29a      	uxth	r2, r3
 8001ea2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ea6:	493a      	ldr	r1, [pc, #232]	@ (8001f90 <AvgStdCommand+0x1c8>)
 8001ea8:	483a      	ldr	r0, [pc, #232]	@ (8001f94 <AvgStdCommand+0x1cc>)
 8001eaa:	f006 fec5 	bl	8008c38 <HAL_UART_Transmit>
    for(int i = 0; i < sizeof(Xstd)/sizeof(Xstd[0]); i++) {
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	603b      	str	r3, [r7, #0]
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	2b2f      	cmp	r3, #47	@ 0x2f
 8001eb8:	d9cd      	bls.n	8001e56 <AvgStdCommand+0x8e>
    }
    HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", Fminmax[0]), 1000);
 8001eba:	4b3b      	ldr	r3, [pc, #236]	@ (8001fa8 <AvgStdCommand+0x1e0>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7fe fb72 	bl	80005a8 <__aeabi_f2d>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	4934      	ldr	r1, [pc, #208]	@ (8001f9c <AvgStdCommand+0x1d4>)
 8001eca:	4831      	ldr	r0, [pc, #196]	@ (8001f90 <AvgStdCommand+0x1c8>)
 8001ecc:	f011 fc2a 	bl	8013724 <siprintf>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	b29a      	uxth	r2, r3
 8001ed4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ed8:	492d      	ldr	r1, [pc, #180]	@ (8001f90 <AvgStdCommand+0x1c8>)
 8001eda:	482e      	ldr	r0, [pc, #184]	@ (8001f94 <AvgStdCommand+0x1cc>)
 8001edc:	f006 feac 	bl	8008c38 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", Fminmax[1]), 1000);
 8001ee0:	4b31      	ldr	r3, [pc, #196]	@ (8001fa8 <AvgStdCommand+0x1e0>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7fe fb5f 	bl	80005a8 <__aeabi_f2d>
 8001eea:	4602      	mov	r2, r0
 8001eec:	460b      	mov	r3, r1
 8001eee:	492b      	ldr	r1, [pc, #172]	@ (8001f9c <AvgStdCommand+0x1d4>)
 8001ef0:	4827      	ldr	r0, [pc, #156]	@ (8001f90 <AvgStdCommand+0x1c8>)
 8001ef2:	f011 fc17 	bl	8013724 <siprintf>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	b29a      	uxth	r2, r3
 8001efa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001efe:	4924      	ldr	r1, [pc, #144]	@ (8001f90 <AvgStdCommand+0x1c8>)
 8001f00:	4824      	ldr	r0, [pc, #144]	@ (8001f94 <AvgStdCommand+0x1cc>)
 8001f02:	f006 fe99 	bl	8008c38 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "\n"), 1000);
 8001f06:	4926      	ldr	r1, [pc, #152]	@ (8001fa0 <AvgStdCommand+0x1d8>)
 8001f08:	4821      	ldr	r0, [pc, #132]	@ (8001f90 <AvgStdCommand+0x1c8>)
 8001f0a:	f011 fc0b 	bl	8013724 <siprintf>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	b29a      	uxth	r2, r3
 8001f12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f16:	491e      	ldr	r1, [pc, #120]	@ (8001f90 <AvgStdCommand+0x1c8>)
 8001f18:	481e      	ldr	r0, [pc, #120]	@ (8001f94 <AvgStdCommand+0x1cc>)
 8001f1a:	f006 fe8d 	bl	8008c38 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", Zminmax[0]), 1000);
 8001f1e:	4b23      	ldr	r3, [pc, #140]	@ (8001fac <AvgStdCommand+0x1e4>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7fe fb40 	bl	80005a8 <__aeabi_f2d>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	491b      	ldr	r1, [pc, #108]	@ (8001f9c <AvgStdCommand+0x1d4>)
 8001f2e:	4818      	ldr	r0, [pc, #96]	@ (8001f90 <AvgStdCommand+0x1c8>)
 8001f30:	f011 fbf8 	bl	8013724 <siprintf>
 8001f34:	4603      	mov	r3, r0
 8001f36:	b29a      	uxth	r2, r3
 8001f38:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f3c:	4914      	ldr	r1, [pc, #80]	@ (8001f90 <AvgStdCommand+0x1c8>)
 8001f3e:	4815      	ldr	r0, [pc, #84]	@ (8001f94 <AvgStdCommand+0x1cc>)
 8001f40:	f006 fe7a 	bl	8008c38 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", Zminmax[1]), 1000);
 8001f44:	4b19      	ldr	r3, [pc, #100]	@ (8001fac <AvgStdCommand+0x1e4>)
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7fe fb2d 	bl	80005a8 <__aeabi_f2d>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	460b      	mov	r3, r1
 8001f52:	4912      	ldr	r1, [pc, #72]	@ (8001f9c <AvgStdCommand+0x1d4>)
 8001f54:	480e      	ldr	r0, [pc, #56]	@ (8001f90 <AvgStdCommand+0x1c8>)
 8001f56:	f011 fbe5 	bl	8013724 <siprintf>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	b29a      	uxth	r2, r3
 8001f5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f62:	490b      	ldr	r1, [pc, #44]	@ (8001f90 <AvgStdCommand+0x1c8>)
 8001f64:	480b      	ldr	r0, [pc, #44]	@ (8001f94 <AvgStdCommand+0x1cc>)
 8001f66:	f006 fe67 	bl	8008c38 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "\n"), 1000);
 8001f6a:	490d      	ldr	r1, [pc, #52]	@ (8001fa0 <AvgStdCommand+0x1d8>)
 8001f6c:	4808      	ldr	r0, [pc, #32]	@ (8001f90 <AvgStdCommand+0x1c8>)
 8001f6e:	f011 fbd9 	bl	8013724 <siprintf>
 8001f72:	4603      	mov	r3, r0
 8001f74:	b29a      	uxth	r2, r3
 8001f76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f7a:	4905      	ldr	r1, [pc, #20]	@ (8001f90 <AvgStdCommand+0x1c8>)
 8001f7c:	4805      	ldr	r0, [pc, #20]	@ (8001f94 <AvgStdCommand+0x1cc>)
 8001f7e:	f006 fe5b 	bl	8008c38 <HAL_UART_Transmit>
}
 8001f82:	bf00      	nop
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	080188c0 	.word	0x080188c0
 8001f90:	20007870 	.word	0x20007870
 8001f94:	200077e8 	.word	0x200077e8
 8001f98:	20000178 	.word	0x20000178
 8001f9c:	080188d4 	.word	0x080188d4
 8001fa0:	080188dc 	.word	0x080188dc
 8001fa4:	20000238 	.word	0x20000238
 8001fa8:	200002f8 	.word	0x200002f8
 8001fac:	20000300 	.word	0x20000300

08001fb0 <InferenceHeatI2CCommand>:


void InferenceHeatI2CCommand()
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b08c      	sub	sp, #48	@ 0x30
 8001fb4:	af00      	add	r7, sp, #0
	SetI2CCommand();
 8001fb6:	f7ff fbe1 	bl	800177c <SetI2CCommand>
	SensorI2CCommand();
 8001fba:	f7ff fae7 	bl	800158c <SensorI2CCommand>
	ResetAllDevices();
 8001fbe:	f002 facf 	bl	8004560 <ResetAllDevices>
	setOnAllDevices();
 8001fc2:	f002 fb49 	bl	8004658 <setOnAllDevices>
    HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "sensor test\r\n"), 100);
 8001fc6:	490b      	ldr	r1, [pc, #44]	@ (8001ff4 <InferenceHeatI2CCommand+0x44>)
 8001fc8:	480b      	ldr	r0, [pc, #44]	@ (8001ff8 <InferenceHeatI2CCommand+0x48>)
 8001fca:	f011 fbab 	bl	8013724 <siprintf>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	b29a      	uxth	r2, r3
 8001fd2:	2364      	movs	r3, #100	@ 0x64
 8001fd4:	4908      	ldr	r1, [pc, #32]	@ (8001ff8 <InferenceHeatI2CCommand+0x48>)
 8001fd6:	4809      	ldr	r0, [pc, #36]	@ (8001ffc <InferenceHeatI2CCommand+0x4c>)
 8001fd8:	f006 fe2e 	bl	8008c38 <HAL_UART_Transmit>
    uint32_t startTime, endTime, diffTime;
    for (int count =0; count <50000;count ++){
 8001fdc:	2300      	movs	r3, #0
 8001fde:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001fe0:	e2f8      	b.n	80025d4 <InferenceHeatI2CCommand+0x624>
    	uint8_t tofCount =0;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    	startTime = HAL_GetTick();
 8001fe8:	f002 fbda 	bl	80047a0 <HAL_GetTick>
 8001fec:	6178      	str	r0, [r7, #20]
        for (int i = 0; i < NUM_SENSOR; i++) {
 8001fee:	2300      	movs	r3, #0
 8001ff0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ff2:	e077      	b.n	80020e4 <InferenceHeatI2CCommand+0x134>
 8001ff4:	080187a4 	.word	0x080187a4
 8001ff8:	20007870 	.word	0x20007870
 8001ffc:	200077e8 	.word	0x200077e8
            Dev = &vl53l0x_s[i];
 8002000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002002:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8002006:	fb02 f303 	mul.w	r3, r2, r3
 800200a:	4a9b      	ldr	r2, [pc, #620]	@ (8002278 <InferenceHeatI2CCommand+0x2c8>)
 800200c:	4413      	add	r3, r2
 800200e:	4a9b      	ldr	r2, [pc, #620]	@ (800227c <InferenceHeatI2CCommand+0x2cc>)
 8002010:	6013      	str	r3, [r2, #0]
            VL53L0X_PerformContinuousRangingMeasurement(Dev, &RangingData); // 1500 uss
 8002012:	4b9a      	ldr	r3, [pc, #616]	@ (800227c <InferenceHeatI2CCommand+0x2cc>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	499a      	ldr	r1, [pc, #616]	@ (8002280 <InferenceHeatI2CCommand+0x2d0>)
 8002018:	4618      	mov	r0, r3
 800201a:	f009 fbe1 	bl	800b7e0 <VL53L0X_PerformContinuousRangingMeasurement>
            if (RangingData.RangeStatus == 0) {
 800201e:	4b98      	ldr	r3, [pc, #608]	@ (8002280 <InferenceHeatI2CCommand+0x2d0>)
 8002020:	7e1b      	ldrb	r3, [r3, #24]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d15b      	bne.n	80020de <InferenceHeatI2CCommand+0x12e>
  			  if (RangingData.RangeMilliMeter < sensorAverages[i]+20) {
 8002026:	4b96      	ldr	r3, [pc, #600]	@ (8002280 <InferenceHeatI2CCommand+0x2d0>)
 8002028:	891b      	ldrh	r3, [r3, #8]
 800202a:	ee07 3a90 	vmov	s15, r3
 800202e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002032:	4a94      	ldr	r2, [pc, #592]	@ (8002284 <InferenceHeatI2CCommand+0x2d4>)
 8002034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	4413      	add	r3, r2
 800203a:	edd3 7a00 	vldr	s15, [r3]
 800203e:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 8002042:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002046:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800204a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800204e:	d546      	bpl.n	80020de <InferenceHeatI2CCommand+0x12e>
            	filteredValue[i] = Kalman_Estimate(&filters[i], RangingData.RangeMilliMeter); // 500 us
 8002050:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002052:	4613      	mov	r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	4413      	add	r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	4a8b      	ldr	r2, [pc, #556]	@ (8002288 <InferenceHeatI2CCommand+0x2d8>)
 800205c:	4413      	add	r3, r2
 800205e:	4a88      	ldr	r2, [pc, #544]	@ (8002280 <InferenceHeatI2CCommand+0x2d0>)
 8002060:	8912      	ldrh	r2, [r2, #8]
 8002062:	ee07 2a90 	vmov	s15, r2
 8002066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800206a:	eeb0 0a67 	vmov.f32	s0, s15
 800206e:	4618      	mov	r0, r3
 8002070:	f001 fb06 	bl	8003680 <Kalman_Estimate>
 8002074:	eef0 7a40 	vmov.f32	s15, s0
 8002078:	4a84      	ldr	r2, [pc, #528]	@ (800228c <InferenceHeatI2CCommand+0x2dc>)
 800207a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	4413      	add	r3, r2
 8002080:	edc3 7a00 	vstr	s15, [r3]
                filteredValue[i] -= sensorAverages[i];
 8002084:	4a81      	ldr	r2, [pc, #516]	@ (800228c <InferenceHeatI2CCommand+0x2dc>)
 8002086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	4413      	add	r3, r2
 800208c:	ed93 7a00 	vldr	s14, [r3]
 8002090:	4a7c      	ldr	r2, [pc, #496]	@ (8002284 <InferenceHeatI2CCommand+0x2d4>)
 8002092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	4413      	add	r3, r2
 8002098:	edd3 7a00 	vldr	s15, [r3]
 800209c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020a0:	4a7a      	ldr	r2, [pc, #488]	@ (800228c <InferenceHeatI2CCommand+0x2dc>)
 80020a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	4413      	add	r3, r2
 80020a8:	edc3 7a00 	vstr	s15, [r3]
                //filteredValue[i] -= Xmean[i];
                filteredValue[i] /= Xstd[i];
 80020ac:	4a77      	ldr	r2, [pc, #476]	@ (800228c <InferenceHeatI2CCommand+0x2dc>)
 80020ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	4413      	add	r3, r2
 80020b4:	edd3 6a00 	vldr	s13, [r3]
 80020b8:	4a75      	ldr	r2, [pc, #468]	@ (8002290 <InferenceHeatI2CCommand+0x2e0>)
 80020ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	4413      	add	r3, r2
 80020c0:	ed93 7a00 	vldr	s14, [r3]
 80020c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020c8:	4a70      	ldr	r2, [pc, #448]	@ (800228c <InferenceHeatI2CCommand+0x2dc>)
 80020ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	4413      	add	r3, r2
 80020d0:	edc3 7a00 	vstr	s15, [r3]
                tofCount++;
 80020d4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80020d8:	3301      	adds	r3, #1
 80020da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        for (int i = 0; i < NUM_SENSOR; i++) {
 80020de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e0:	3301      	adds	r3, #1
 80020e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80020e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e6:	2b2f      	cmp	r3, #47	@ 0x2f
 80020e8:	dd8a      	ble.n	8002000 <InferenceHeatI2CCommand+0x50>
  			  }
            }
        }

        in_data[0] = filteredValue[0];
 80020ea:	4b68      	ldr	r3, [pc, #416]	@ (800228c <InferenceHeatI2CCommand+0x2dc>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a69      	ldr	r2, [pc, #420]	@ (8002294 <InferenceHeatI2CCommand+0x2e4>)
 80020f0:	6013      	str	r3, [r2, #0]
        in_data[1] = filteredValue[1];
 80020f2:	4b66      	ldr	r3, [pc, #408]	@ (800228c <InferenceHeatI2CCommand+0x2dc>)
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	4a67      	ldr	r2, [pc, #412]	@ (8002294 <InferenceHeatI2CCommand+0x2e4>)
 80020f8:	6053      	str	r3, [r2, #4]
        in_data[2] = filteredValue[2];
 80020fa:	4b64      	ldr	r3, [pc, #400]	@ (800228c <InferenceHeatI2CCommand+0x2dc>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	4a65      	ldr	r2, [pc, #404]	@ (8002294 <InferenceHeatI2CCommand+0x2e4>)
 8002100:	6093      	str	r3, [r2, #8]
        in_data[3] = filteredValue[3];
 8002102:	4b62      	ldr	r3, [pc, #392]	@ (800228c <InferenceHeatI2CCommand+0x2dc>)
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	4a63      	ldr	r2, [pc, #396]	@ (8002294 <InferenceHeatI2CCommand+0x2e4>)
 8002108:	60d3      	str	r3, [r2, #12]
        in_data[4] = filteredValue[4];
 800210a:	4b60      	ldr	r3, [pc, #384]	@ (800228c <InferenceHeatI2CCommand+0x2dc>)
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	4a61      	ldr	r2, [pc, #388]	@ (8002294 <InferenceHeatI2CCommand+0x2e4>)
 8002110:	6113      	str	r3, [r2, #16]
        in_data[5] = filteredValue[5];
 8002112:	4b5e      	ldr	r3, [pc, #376]	@ (800228c <InferenceHeatI2CCommand+0x2dc>)
 8002114:	695b      	ldr	r3, [r3, #20]
 8002116:	4a5f      	ldr	r2, [pc, #380]	@ (8002294 <InferenceHeatI2CCommand+0x2e4>)
 8002118:	6153      	str	r3, [r2, #20]
        in_data[6] = filteredValue[6];
 800211a:	4b5c      	ldr	r3, [pc, #368]	@ (800228c <InferenceHeatI2CCommand+0x2dc>)
 800211c:	699b      	ldr	r3, [r3, #24]
 800211e:	4a5d      	ldr	r2, [pc, #372]	@ (8002294 <InferenceHeatI2CCommand+0x2e4>)
 8002120:	6193      	str	r3, [r2, #24]
        in_data[7] = filteredValue[7];
 8002122:	4b5a      	ldr	r3, [pc, #360]	@ (800228c <InferenceHeatI2CCommand+0x2dc>)
 8002124:	69db      	ldr	r3, [r3, #28]
 8002126:	4a5b      	ldr	r2, [pc, #364]	@ (8002294 <InferenceHeatI2CCommand+0x2e4>)
 8002128:	61d3      	str	r3, [r2, #28]
        in_data[8] = filteredValue[8];
 800212a:	4b58      	ldr	r3, [pc, #352]	@ (800228c <InferenceHeatI2CCommand+0x2dc>)
 800212c:	6a1b      	ldr	r3, [r3, #32]
 800212e:	4a59      	ldr	r2, [pc, #356]	@ (8002294 <InferenceHeatI2CCommand+0x2e4>)
 8002130:	6213      	str	r3, [r2, #32]
        in_data[9] = filteredValue[9];
 8002132:	4b56      	ldr	r3, [pc, #344]	@ (800228c <InferenceHeatI2CCommand+0x2dc>)
 8002134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002136:	4a57      	ldr	r2, [pc, #348]	@ (8002294 <InferenceHeatI2CCommand+0x2e4>)
 8002138:	6253      	str	r3, [r2, #36]	@ 0x24
        in_data[10] = filteredValue[10];
 800213a:	4b54      	ldr	r3, [pc, #336]	@ (800228c <InferenceHeatI2CCommand+0x2dc>)
 800213c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800213e:	4a55      	ldr	r2, [pc, #340]	@ (8002294 <InferenceHeatI2CCommand+0x2e4>)
 8002140:	6293      	str	r3, [r2, #40]	@ 0x28
        in_data[11] = filteredValue[11];
 8002142:	4b52      	ldr	r3, [pc, #328]	@ (800228c <InferenceHeatI2CCommand+0x2dc>)
 8002144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002146:	4a53      	ldr	r2, [pc, #332]	@ (8002294 <InferenceHeatI2CCommand+0x2e4>)
 8002148:	62d3      	str	r3, [r2, #44]	@ 0x2c
        in_data[12] = filteredValue[0];
 800214a:	4b50      	ldr	r3, [pc, #320]	@ (800228c <InferenceHeatI2CCommand+0x2dc>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a51      	ldr	r2, [pc, #324]	@ (8002294 <InferenceHeatI2CCommand+0x2e4>)
 8002150:	6313      	str	r3, [r2, #48]	@ 0x30

        in_data[13] = filteredValue[12];
 8002152:	4b4e      	ldr	r3, [pc, #312]	@ (800228c <InferenceHeatI2CCommand+0x2dc>)
 8002154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002156:	4a4f      	ldr	r2, [pc, #316]	@ (8002294 <InferenceHeatI2CCommand+0x2e4>)
 8002158:	6353      	str	r3, [r2, #52]	@ 0x34
        in_data[14] = filteredValue[13];
 800215a:	4b4c      	ldr	r3, [pc, #304]	@ (800228c <InferenceHeatI2CCommand+0x2dc>)
 800215c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800215e:	4a4d      	ldr	r2, [pc, #308]	@ (8002294 <InferenceHeatI2CCommand+0x2e4>)
 8002160:	6393      	str	r3, [r2, #56]	@ 0x38
        in_data[15] = filteredValue[14];
 8002162:	4b4a      	ldr	r3, [pc, #296]	@ (800228c <InferenceHeatI2CCommand+0x2dc>)
 8002164:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002166:	4a4b      	ldr	r2, [pc, #300]	@ (8002294 <InferenceHeatI2CCommand+0x2e4>)
 8002168:	63d3      	str	r3, [r2, #60]	@ 0x3c
        in_data[16] = filteredValue[15];
 800216a:	4b48      	ldr	r3, [pc, #288]	@ (800228c <InferenceHeatI2CCommand+0x2dc>)
 800216c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800216e:	4a49      	ldr	r2, [pc, #292]	@ (8002294 <InferenceHeatI2CCommand+0x2e4>)
 8002170:	6413      	str	r3, [r2, #64]	@ 0x40
        in_data[17] = filteredValue[16];
 8002172:	4b46      	ldr	r3, [pc, #280]	@ (800228c <InferenceHeatI2CCommand+0x2dc>)
 8002174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002176:	4a47      	ldr	r2, [pc, #284]	@ (8002294 <InferenceHeatI2CCommand+0x2e4>)
 8002178:	6453      	str	r3, [r2, #68]	@ 0x44
        in_data[18] = filteredValue[17];
 800217a:	4b44      	ldr	r3, [pc, #272]	@ (800228c <InferenceHeatI2CCommand+0x2dc>)
 800217c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800217e:	4a45      	ldr	r2, [pc, #276]	@ (8002294 <InferenceHeatI2CCommand+0x2e4>)
 8002180:	6493      	str	r3, [r2, #72]	@ 0x48
        in_data[19] = filteredValue[18];
 8002182:	4b42      	ldr	r3, [pc, #264]	@ (800228c <InferenceHeatI2CCommand+0x2dc>)
 8002184:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002186:	4a43      	ldr	r2, [pc, #268]	@ (8002294 <InferenceHeatI2CCommand+0x2e4>)
 8002188:	64d3      	str	r3, [r2, #76]	@ 0x4c
        in_data[20] = filteredValue[19];
 800218a:	4b40      	ldr	r3, [pc, #256]	@ (800228c <InferenceHeatI2CCommand+0x2dc>)
 800218c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800218e:	4a41      	ldr	r2, [pc, #260]	@ (8002294 <InferenceHeatI2CCommand+0x2e4>)
 8002190:	6513      	str	r3, [r2, #80]	@ 0x50
        in_data[21] = filteredValue[20];
 8002192:	4b3e      	ldr	r3, [pc, #248]	@ (800228c <InferenceHeatI2CCommand+0x2dc>)
 8002194:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002196:	4a3f      	ldr	r2, [pc, #252]	@ (8002294 <InferenceHeatI2CCommand+0x2e4>)
 8002198:	6553      	str	r3, [r2, #84]	@ 0x54
        in_data[22] = filteredValue[21];
 800219a:	4b3c      	ldr	r3, [pc, #240]	@ (800228c <InferenceHeatI2CCommand+0x2dc>)
 800219c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800219e:	4a3d      	ldr	r2, [pc, #244]	@ (8002294 <InferenceHeatI2CCommand+0x2e4>)
 80021a0:	6593      	str	r3, [r2, #88]	@ 0x58
        in_data[23] = filteredValue[22];
 80021a2:	4b3a      	ldr	r3, [pc, #232]	@ (800228c <InferenceHeatI2CCommand+0x2dc>)
 80021a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021a6:	4a3b      	ldr	r2, [pc, #236]	@ (8002294 <InferenceHeatI2CCommand+0x2e4>)
 80021a8:	65d3      	str	r3, [r2, #92]	@ 0x5c
        in_data[24] = filteredValue[23];
 80021aa:	4b38      	ldr	r3, [pc, #224]	@ (800228c <InferenceHeatI2CCommand+0x2dc>)
 80021ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021ae:	4a39      	ldr	r2, [pc, #228]	@ (8002294 <InferenceHeatI2CCommand+0x2e4>)
 80021b0:	6613      	str	r3, [r2, #96]	@ 0x60
        in_data[25] = filteredValue[12];
 80021b2:	4b36      	ldr	r3, [pc, #216]	@ (800228c <InferenceHeatI2CCommand+0x2dc>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021b6:	4a37      	ldr	r2, [pc, #220]	@ (8002294 <InferenceHeatI2CCommand+0x2e4>)
 80021b8:	6653      	str	r3, [r2, #100]	@ 0x64
		#if NUM_SENSOR >= 36
        in_data[26] = filteredValue[24];
 80021ba:	4b34      	ldr	r3, [pc, #208]	@ (800228c <InferenceHeatI2CCommand+0x2dc>)
 80021bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021be:	4a35      	ldr	r2, [pc, #212]	@ (8002294 <InferenceHeatI2CCommand+0x2e4>)
 80021c0:	6693      	str	r3, [r2, #104]	@ 0x68
        in_data[27] = filteredValue[25];
 80021c2:	4b32      	ldr	r3, [pc, #200]	@ (800228c <InferenceHeatI2CCommand+0x2dc>)
 80021c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80021c6:	4a33      	ldr	r2, [pc, #204]	@ (8002294 <InferenceHeatI2CCommand+0x2e4>)
 80021c8:	66d3      	str	r3, [r2, #108]	@ 0x6c
        in_data[28] = filteredValue[26];
 80021ca:	4b30      	ldr	r3, [pc, #192]	@ (800228c <InferenceHeatI2CCommand+0x2dc>)
 80021cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80021ce:	4a31      	ldr	r2, [pc, #196]	@ (8002294 <InferenceHeatI2CCommand+0x2e4>)
 80021d0:	6713      	str	r3, [r2, #112]	@ 0x70
        in_data[29] = filteredValue[27];
 80021d2:	4b2e      	ldr	r3, [pc, #184]	@ (800228c <InferenceHeatI2CCommand+0x2dc>)
 80021d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80021d6:	4a2f      	ldr	r2, [pc, #188]	@ (8002294 <InferenceHeatI2CCommand+0x2e4>)
 80021d8:	6753      	str	r3, [r2, #116]	@ 0x74
        in_data[30] = filteredValue[28];
 80021da:	4b2c      	ldr	r3, [pc, #176]	@ (800228c <InferenceHeatI2CCommand+0x2dc>)
 80021dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021de:	4a2d      	ldr	r2, [pc, #180]	@ (8002294 <InferenceHeatI2CCommand+0x2e4>)
 80021e0:	6793      	str	r3, [r2, #120]	@ 0x78
        in_data[31] = filteredValue[29];
 80021e2:	4b2a      	ldr	r3, [pc, #168]	@ (800228c <InferenceHeatI2CCommand+0x2dc>)
 80021e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021e6:	4a2b      	ldr	r2, [pc, #172]	@ (8002294 <InferenceHeatI2CCommand+0x2e4>)
 80021e8:	67d3      	str	r3, [r2, #124]	@ 0x7c
        in_data[32] = filteredValue[30];
 80021ea:	4b28      	ldr	r3, [pc, #160]	@ (800228c <InferenceHeatI2CCommand+0x2dc>)
 80021ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80021ee:	4a29      	ldr	r2, [pc, #164]	@ (8002294 <InferenceHeatI2CCommand+0x2e4>)
 80021f0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
        in_data[33] = filteredValue[31];
 80021f4:	4b25      	ldr	r3, [pc, #148]	@ (800228c <InferenceHeatI2CCommand+0x2dc>)
 80021f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80021f8:	4a26      	ldr	r2, [pc, #152]	@ (8002294 <InferenceHeatI2CCommand+0x2e4>)
 80021fa:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
        in_data[34] = filteredValue[32];
 80021fe:	4b23      	ldr	r3, [pc, #140]	@ (800228c <InferenceHeatI2CCommand+0x2dc>)
 8002200:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002204:	4a23      	ldr	r2, [pc, #140]	@ (8002294 <InferenceHeatI2CCommand+0x2e4>)
 8002206:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
        in_data[35] = filteredValue[33];
 800220a:	4b20      	ldr	r3, [pc, #128]	@ (800228c <InferenceHeatI2CCommand+0x2dc>)
 800220c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002210:	4a20      	ldr	r2, [pc, #128]	@ (8002294 <InferenceHeatI2CCommand+0x2e4>)
 8002212:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
        in_data[36] = filteredValue[34];
 8002216:	4b1d      	ldr	r3, [pc, #116]	@ (800228c <InferenceHeatI2CCommand+0x2dc>)
 8002218:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800221c:	4a1d      	ldr	r2, [pc, #116]	@ (8002294 <InferenceHeatI2CCommand+0x2e4>)
 800221e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        in_data[37] = filteredValue[35];
 8002222:	4b1a      	ldr	r3, [pc, #104]	@ (800228c <InferenceHeatI2CCommand+0x2dc>)
 8002224:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002228:	4a1a      	ldr	r2, [pc, #104]	@ (8002294 <InferenceHeatI2CCommand+0x2e4>)
 800222a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        in_data[38] = filteredValue[24];
 800222e:	4b17      	ldr	r3, [pc, #92]	@ (800228c <InferenceHeatI2CCommand+0x2dc>)
 8002230:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002232:	4a18      	ldr	r2, [pc, #96]	@ (8002294 <InferenceHeatI2CCommand+0x2e4>)
 8002234:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
		#endif
		#if NUM_SENSOR >= 48
		in_data[39] = filteredValue[36];
 8002238:	4b14      	ldr	r3, [pc, #80]	@ (800228c <InferenceHeatI2CCommand+0x2dc>)
 800223a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800223e:	4a15      	ldr	r2, [pc, #84]	@ (8002294 <InferenceHeatI2CCommand+0x2e4>)
 8002240:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
		in_data[40] = filteredValue[37];
 8002244:	4b11      	ldr	r3, [pc, #68]	@ (800228c <InferenceHeatI2CCommand+0x2dc>)
 8002246:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800224a:	4a12      	ldr	r2, [pc, #72]	@ (8002294 <InferenceHeatI2CCommand+0x2e4>)
 800224c:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
		in_data[41] = filteredValue[38];
 8002250:	4b0e      	ldr	r3, [pc, #56]	@ (800228c <InferenceHeatI2CCommand+0x2dc>)
 8002252:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002256:	4a0f      	ldr	r2, [pc, #60]	@ (8002294 <InferenceHeatI2CCommand+0x2e4>)
 8002258:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
		in_data[42] = filteredValue[39];
 800225c:	4b0b      	ldr	r3, [pc, #44]	@ (800228c <InferenceHeatI2CCommand+0x2dc>)
 800225e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002262:	4a0c      	ldr	r2, [pc, #48]	@ (8002294 <InferenceHeatI2CCommand+0x2e4>)
 8002264:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
		in_data[43] = filteredValue[40];
 8002268:	4b08      	ldr	r3, [pc, #32]	@ (800228c <InferenceHeatI2CCommand+0x2dc>)
 800226a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800226e:	4a09      	ldr	r2, [pc, #36]	@ (8002294 <InferenceHeatI2CCommand+0x2e4>)
 8002270:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac
 8002274:	e010      	b.n	8002298 <InferenceHeatI2CCommand+0x2e8>
 8002276:	bf00      	nop
 8002278:	20007a60 	.word	0x20007a60
 800227c:	2000c560 	.word	0x2000c560
 8002280:	200078f4 	.word	0x200078f4
 8002284:	20007058 	.word	0x20007058
 8002288:	200072f4 	.word	0x200072f4
 800228c:	200076b4 	.word	0x200076b4
 8002290:	20000238 	.word	0x20000238
 8002294:	20002460 	.word	0x20002460
		in_data[44] = filteredValue[41];
 8002298:	4b93      	ldr	r3, [pc, #588]	@ (80024e8 <InferenceHeatI2CCommand+0x538>)
 800229a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800229e:	4a93      	ldr	r2, [pc, #588]	@ (80024ec <InferenceHeatI2CCommand+0x53c>)
 80022a0:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0
		in_data[45] = filteredValue[42];
 80022a4:	4b90      	ldr	r3, [pc, #576]	@ (80024e8 <InferenceHeatI2CCommand+0x538>)
 80022a6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80022aa:	4a90      	ldr	r2, [pc, #576]	@ (80024ec <InferenceHeatI2CCommand+0x53c>)
 80022ac:	f8c2 30b4 	str.w	r3, [r2, #180]	@ 0xb4
		in_data[46] = filteredValue[43];
 80022b0:	4b8d      	ldr	r3, [pc, #564]	@ (80024e8 <InferenceHeatI2CCommand+0x538>)
 80022b2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80022b6:	4a8d      	ldr	r2, [pc, #564]	@ (80024ec <InferenceHeatI2CCommand+0x53c>)
 80022b8:	f8c2 30b8 	str.w	r3, [r2, #184]	@ 0xb8
		in_data[47] = filteredValue[44];
 80022bc:	4b8a      	ldr	r3, [pc, #552]	@ (80024e8 <InferenceHeatI2CCommand+0x538>)
 80022be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80022c2:	4a8a      	ldr	r2, [pc, #552]	@ (80024ec <InferenceHeatI2CCommand+0x53c>)
 80022c4:	f8c2 30bc 	str.w	r3, [r2, #188]	@ 0xbc
		in_data[48] = filteredValue[45];
 80022c8:	4b87      	ldr	r3, [pc, #540]	@ (80024e8 <InferenceHeatI2CCommand+0x538>)
 80022ca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80022ce:	4a87      	ldr	r2, [pc, #540]	@ (80024ec <InferenceHeatI2CCommand+0x53c>)
 80022d0:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
		in_data[49] = filteredValue[46];
 80022d4:	4b84      	ldr	r3, [pc, #528]	@ (80024e8 <InferenceHeatI2CCommand+0x538>)
 80022d6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80022da:	4a84      	ldr	r2, [pc, #528]	@ (80024ec <InferenceHeatI2CCommand+0x53c>)
 80022dc:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
		in_data[50] = filteredValue[47];
 80022e0:	4b81      	ldr	r3, [pc, #516]	@ (80024e8 <InferenceHeatI2CCommand+0x538>)
 80022e2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80022e6:	4a81      	ldr	r2, [pc, #516]	@ (80024ec <InferenceHeatI2CCommand+0x53c>)
 80022e8:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
		in_data[51] = filteredValue[36];
 80022ec:	4b7e      	ldr	r3, [pc, #504]	@ (80024e8 <InferenceHeatI2CCommand+0x538>)
 80022ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022f2:	4a7e      	ldr	r2, [pc, #504]	@ (80024ec <InferenceHeatI2CCommand+0x53c>)
 80022f4:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
		#endif

		if(tofCount == NUM_SENSOR){
 80022f8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80022fc:	2b30      	cmp	r3, #48	@ 0x30
 80022fe:	f040 8151 	bne.w	80025a4 <InferenceHeatI2CCommand+0x5f4>
	        for(int i=0; i<NUM_SENSOR;i++){HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.1f ", filteredValue[i]), 100);}
 8002302:	2300      	movs	r3, #0
 8002304:	623b      	str	r3, [r7, #32]
 8002306:	e017      	b.n	8002338 <InferenceHeatI2CCommand+0x388>
 8002308:	4a77      	ldr	r2, [pc, #476]	@ (80024e8 <InferenceHeatI2CCommand+0x538>)
 800230a:	6a3b      	ldr	r3, [r7, #32]
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	4413      	add	r3, r2
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4618      	mov	r0, r3
 8002314:	f7fe f948 	bl	80005a8 <__aeabi_f2d>
 8002318:	4602      	mov	r2, r0
 800231a:	460b      	mov	r3, r1
 800231c:	4974      	ldr	r1, [pc, #464]	@ (80024f0 <InferenceHeatI2CCommand+0x540>)
 800231e:	4875      	ldr	r0, [pc, #468]	@ (80024f4 <InferenceHeatI2CCommand+0x544>)
 8002320:	f011 fa00 	bl	8013724 <siprintf>
 8002324:	4603      	mov	r3, r0
 8002326:	b29a      	uxth	r2, r3
 8002328:	2364      	movs	r3, #100	@ 0x64
 800232a:	4972      	ldr	r1, [pc, #456]	@ (80024f4 <InferenceHeatI2CCommand+0x544>)
 800232c:	4872      	ldr	r0, [pc, #456]	@ (80024f8 <InferenceHeatI2CCommand+0x548>)
 800232e:	f006 fc83 	bl	8008c38 <HAL_UART_Transmit>
 8002332:	6a3b      	ldr	r3, [r7, #32]
 8002334:	3301      	adds	r3, #1
 8002336:	623b      	str	r3, [r7, #32]
 8002338:	6a3b      	ldr	r3, [r7, #32]
 800233a:	2b2f      	cmp	r3, #47	@ 0x2f
 800233c:	dde4      	ble.n	8002308 <InferenceHeatI2CCommand+0x358>
	        int a =0;
 800233e:	2300      	movs	r3, #0
 8002340:	613b      	str	r3, [r7, #16]
			aiRun(in_data,out_data);
 8002342:	496e      	ldr	r1, [pc, #440]	@ (80024fc <InferenceHeatI2CCommand+0x54c>)
 8002344:	4869      	ldr	r0, [pc, #420]	@ (80024ec <InferenceHeatI2CCommand+0x53c>)
 8002346:	f7fe febd 	bl	80010c4 <aiRun>
			float sqSum= out_data[2]*out_data[2] + out_data[3]*out_data[3];
 800234a:	4b6c      	ldr	r3, [pc, #432]	@ (80024fc <InferenceHeatI2CCommand+0x54c>)
 800234c:	ed93 7a02 	vldr	s14, [r3, #8]
 8002350:	4b6a      	ldr	r3, [pc, #424]	@ (80024fc <InferenceHeatI2CCommand+0x54c>)
 8002352:	edd3 7a02 	vldr	s15, [r3, #8]
 8002356:	ee27 7a27 	vmul.f32	s14, s14, s15
 800235a:	4b68      	ldr	r3, [pc, #416]	@ (80024fc <InferenceHeatI2CCommand+0x54c>)
 800235c:	edd3 6a03 	vldr	s13, [r3, #12]
 8002360:	4b66      	ldr	r3, [pc, #408]	@ (80024fc <InferenceHeatI2CCommand+0x54c>)
 8002362:	edd3 7a03 	vldr	s15, [r3, #12]
 8002366:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800236a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800236e:	edc7 7a03 	vstr	s15, [r7, #12]
			//float sqrange = 0.08;
		    uint32_t timestamp = HAL_GetTick();
 8002372:	f002 fa15 	bl	80047a0 <HAL_GetTick>
 8002376:	60b8      	str	r0, [r7, #8]
			if(sqSum>=0.97){
 8002378:	68f8      	ldr	r0, [r7, #12]
 800237a:	f7fe f915 	bl	80005a8 <__aeabi_f2d>
 800237e:	a358      	add	r3, pc, #352	@ (adr r3, 80024e0 <InferenceHeatI2CCommand+0x530>)
 8002380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002384:	f7fe fbee 	bl	8000b64 <__aeabi_dcmpge>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	f000 809f 	beq.w	80024ce <InferenceHeatI2CCommand+0x51e>
				out_data[0] = (out_data[0] + 1) * (Fminmax[1] - Fminmax[0]) / 2 + Fminmax[0];
 8002390:	4b5a      	ldr	r3, [pc, #360]	@ (80024fc <InferenceHeatI2CCommand+0x54c>)
 8002392:	edd3 7a00 	vldr	s15, [r3]
 8002396:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800239a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800239e:	4b58      	ldr	r3, [pc, #352]	@ (8002500 <InferenceHeatI2CCommand+0x550>)
 80023a0:	edd3 6a01 	vldr	s13, [r3, #4]
 80023a4:	4b56      	ldr	r3, [pc, #344]	@ (8002500 <InferenceHeatI2CCommand+0x550>)
 80023a6:	edd3 7a00 	vldr	s15, [r3]
 80023aa:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80023ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023b2:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80023b6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80023ba:	4b51      	ldr	r3, [pc, #324]	@ (8002500 <InferenceHeatI2CCommand+0x550>)
 80023bc:	edd3 7a00 	vldr	s15, [r3]
 80023c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023c4:	4b4d      	ldr	r3, [pc, #308]	@ (80024fc <InferenceHeatI2CCommand+0x54c>)
 80023c6:	edc3 7a00 	vstr	s15, [r3]
				out_data[1] = (out_data[1] + 1) * (Zminmax[1] - Zminmax[0]) / 2 + Zminmax[0];
 80023ca:	4b4c      	ldr	r3, [pc, #304]	@ (80024fc <InferenceHeatI2CCommand+0x54c>)
 80023cc:	edd3 7a01 	vldr	s15, [r3, #4]
 80023d0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80023d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80023d8:	4b4a      	ldr	r3, [pc, #296]	@ (8002504 <InferenceHeatI2CCommand+0x554>)
 80023da:	edd3 6a01 	vldr	s13, [r3, #4]
 80023de:	4b49      	ldr	r3, [pc, #292]	@ (8002504 <InferenceHeatI2CCommand+0x554>)
 80023e0:	edd3 7a00 	vldr	s15, [r3]
 80023e4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80023e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023ec:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80023f0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80023f4:	4b43      	ldr	r3, [pc, #268]	@ (8002504 <InferenceHeatI2CCommand+0x554>)
 80023f6:	edd3 7a00 	vldr	s15, [r3]
 80023fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023fe:	4b3f      	ldr	r3, [pc, #252]	@ (80024fc <InferenceHeatI2CCommand+0x54c>)
 8002400:	edc3 7a01 	vstr	s15, [r3, #4]
				if(out_data[1] >=144){out_data[1]=144;}
 8002404:	4b3d      	ldr	r3, [pc, #244]	@ (80024fc <InferenceHeatI2CCommand+0x54c>)
 8002406:	edd3 7a01 	vldr	s15, [r3, #4]
 800240a:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8002508 <InferenceHeatI2CCommand+0x558>
 800240e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002416:	db02      	blt.n	800241e <InferenceHeatI2CCommand+0x46e>
 8002418:	4b38      	ldr	r3, [pc, #224]	@ (80024fc <InferenceHeatI2CCommand+0x54c>)
 800241a:	4a3c      	ldr	r2, [pc, #240]	@ (800250c <InferenceHeatI2CCommand+0x55c>)
 800241c:	605a      	str	r2, [r3, #4]
				if(out_data[1] <=16){out_data[1]=16;}
 800241e:	4b37      	ldr	r3, [pc, #220]	@ (80024fc <InferenceHeatI2CCommand+0x54c>)
 8002420:	edd3 7a01 	vldr	s15, [r3, #4]
 8002424:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 8002428:	eef4 7ac7 	vcmpe.f32	s15, s14
 800242c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002430:	d803      	bhi.n	800243a <InferenceHeatI2CCommand+0x48a>
 8002432:	4b32      	ldr	r3, [pc, #200]	@ (80024fc <InferenceHeatI2CCommand+0x54c>)
 8002434:	f04f 4283 	mov.w	r2, #1098907648	@ 0x41800000
 8002438:	605a      	str	r2, [r3, #4]
				if(out_data[0]>=Fminmax[0]){
 800243a:	4b30      	ldr	r3, [pc, #192]	@ (80024fc <InferenceHeatI2CCommand+0x54c>)
 800243c:	ed93 7a00 	vldr	s14, [r3]
 8002440:	4b2f      	ldr	r3, [pc, #188]	@ (8002500 <InferenceHeatI2CCommand+0x550>)
 8002442:	edd3 7a00 	vldr	s15, [r3]
 8002446:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800244a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800244e:	f2c0 80a9 	blt.w	80025a4 <InferenceHeatI2CCommand+0x5f4>
					for(int k=0; k<4;k++){
 8002452:	2300      	movs	r3, #0
 8002454:	61fb      	str	r3, [r7, #28]
 8002456:	e018      	b.n	800248a <InferenceHeatI2CCommand+0x4da>
						HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", out_data[k]), 1000);
 8002458:	4a28      	ldr	r2, [pc, #160]	@ (80024fc <InferenceHeatI2CCommand+0x54c>)
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	4413      	add	r3, r2
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4618      	mov	r0, r3
 8002464:	f7fe f8a0 	bl	80005a8 <__aeabi_f2d>
 8002468:	4602      	mov	r2, r0
 800246a:	460b      	mov	r3, r1
 800246c:	4928      	ldr	r1, [pc, #160]	@ (8002510 <InferenceHeatI2CCommand+0x560>)
 800246e:	4821      	ldr	r0, [pc, #132]	@ (80024f4 <InferenceHeatI2CCommand+0x544>)
 8002470:	f011 f958 	bl	8013724 <siprintf>
 8002474:	4603      	mov	r3, r0
 8002476:	b29a      	uxth	r2, r3
 8002478:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800247c:	491d      	ldr	r1, [pc, #116]	@ (80024f4 <InferenceHeatI2CCommand+0x544>)
 800247e:	481e      	ldr	r0, [pc, #120]	@ (80024f8 <InferenceHeatI2CCommand+0x548>)
 8002480:	f006 fbda 	bl	8008c38 <HAL_UART_Transmit>
					for(int k=0; k<4;k++){
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	3301      	adds	r3, #1
 8002488:	61fb      	str	r3, [r7, #28]
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	2b03      	cmp	r3, #3
 800248e:	dde3      	ble.n	8002458 <InferenceHeatI2CCommand+0x4a8>
					}
					HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", sqSum), 1000);
 8002490:	68f8      	ldr	r0, [r7, #12]
 8002492:	f7fe f889 	bl	80005a8 <__aeabi_f2d>
 8002496:	4602      	mov	r2, r0
 8002498:	460b      	mov	r3, r1
 800249a:	491d      	ldr	r1, [pc, #116]	@ (8002510 <InferenceHeatI2CCommand+0x560>)
 800249c:	4815      	ldr	r0, [pc, #84]	@ (80024f4 <InferenceHeatI2CCommand+0x544>)
 800249e:	f011 f941 	bl	8013724 <siprintf>
 80024a2:	4603      	mov	r3, r0
 80024a4:	b29a      	uxth	r2, r3
 80024a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024aa:	4912      	ldr	r1, [pc, #72]	@ (80024f4 <InferenceHeatI2CCommand+0x544>)
 80024ac:	4812      	ldr	r0, [pc, #72]	@ (80024f8 <InferenceHeatI2CCommand+0x548>)
 80024ae:	f006 fbc3 	bl	8008c38 <HAL_UART_Transmit>
				    HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%lu ", timestamp), 1000);
 80024b2:	68ba      	ldr	r2, [r7, #8]
 80024b4:	4917      	ldr	r1, [pc, #92]	@ (8002514 <InferenceHeatI2CCommand+0x564>)
 80024b6:	480f      	ldr	r0, [pc, #60]	@ (80024f4 <InferenceHeatI2CCommand+0x544>)
 80024b8:	f011 f934 	bl	8013724 <siprintf>
 80024bc:	4603      	mov	r3, r0
 80024be:	b29a      	uxth	r2, r3
 80024c0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024c4:	490b      	ldr	r1, [pc, #44]	@ (80024f4 <InferenceHeatI2CCommand+0x544>)
 80024c6:	480c      	ldr	r0, [pc, #48]	@ (80024f8 <InferenceHeatI2CCommand+0x548>)
 80024c8:	f006 fbb6 	bl	8008c38 <HAL_UART_Transmit>
 80024cc:	e06a      	b.n	80025a4 <InferenceHeatI2CCommand+0x5f4>
				    //HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "1"), 1000);
				}
			}else if(a==1){
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d167      	bne.n	80025a4 <InferenceHeatI2CCommand+0x5f4>
				for(int k=0; k<4;k++){
 80024d4:	2300      	movs	r3, #0
 80024d6:	61bb      	str	r3, [r7, #24]
 80024d8:	e037      	b.n	800254a <InferenceHeatI2CCommand+0x59a>
 80024da:	bf00      	nop
 80024dc:	f3af 8000 	nop.w
 80024e0:	70a3d70a 	.word	0x70a3d70a
 80024e4:	3fef0a3d 	.word	0x3fef0a3d
 80024e8:	200076b4 	.word	0x200076b4
 80024ec:	20002460 	.word	0x20002460
 80024f0:	080187b4 	.word	0x080187b4
 80024f4:	20007870 	.word	0x20007870
 80024f8:	200077e8 	.word	0x200077e8
 80024fc:	20002540 	.word	0x20002540
 8002500:	200002f8 	.word	0x200002f8
 8002504:	20000300 	.word	0x20000300
 8002508:	43100000 	.word	0x43100000
 800250c:	43100000 	.word	0x43100000
 8002510:	080188d4 	.word	0x080188d4
 8002514:	080188e0 	.word	0x080188e0
					HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", out_data[k]), 1000);
 8002518:	4a34      	ldr	r2, [pc, #208]	@ (80025ec <InferenceHeatI2CCommand+0x63c>)
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	4413      	add	r3, r2
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4618      	mov	r0, r3
 8002524:	f7fe f840 	bl	80005a8 <__aeabi_f2d>
 8002528:	4602      	mov	r2, r0
 800252a:	460b      	mov	r3, r1
 800252c:	4930      	ldr	r1, [pc, #192]	@ (80025f0 <InferenceHeatI2CCommand+0x640>)
 800252e:	4831      	ldr	r0, [pc, #196]	@ (80025f4 <InferenceHeatI2CCommand+0x644>)
 8002530:	f011 f8f8 	bl	8013724 <siprintf>
 8002534:	4603      	mov	r3, r0
 8002536:	b29a      	uxth	r2, r3
 8002538:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800253c:	492d      	ldr	r1, [pc, #180]	@ (80025f4 <InferenceHeatI2CCommand+0x644>)
 800253e:	482e      	ldr	r0, [pc, #184]	@ (80025f8 <InferenceHeatI2CCommand+0x648>)
 8002540:	f006 fb7a 	bl	8008c38 <HAL_UART_Transmit>
				for(int k=0; k<4;k++){
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	3301      	adds	r3, #1
 8002548:	61bb      	str	r3, [r7, #24]
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	2b03      	cmp	r3, #3
 800254e:	dde3      	ble.n	8002518 <InferenceHeatI2CCommand+0x568>
				}
				HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", sqSum), 1000);
 8002550:	68f8      	ldr	r0, [r7, #12]
 8002552:	f7fe f829 	bl	80005a8 <__aeabi_f2d>
 8002556:	4602      	mov	r2, r0
 8002558:	460b      	mov	r3, r1
 800255a:	4925      	ldr	r1, [pc, #148]	@ (80025f0 <InferenceHeatI2CCommand+0x640>)
 800255c:	4825      	ldr	r0, [pc, #148]	@ (80025f4 <InferenceHeatI2CCommand+0x644>)
 800255e:	f011 f8e1 	bl	8013724 <siprintf>
 8002562:	4603      	mov	r3, r0
 8002564:	b29a      	uxth	r2, r3
 8002566:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800256a:	4922      	ldr	r1, [pc, #136]	@ (80025f4 <InferenceHeatI2CCommand+0x644>)
 800256c:	4822      	ldr	r0, [pc, #136]	@ (80025f8 <InferenceHeatI2CCommand+0x648>)
 800256e:	f006 fb63 	bl	8008c38 <HAL_UART_Transmit>
			    HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%lu ", timestamp), 1000);
 8002572:	68ba      	ldr	r2, [r7, #8]
 8002574:	4921      	ldr	r1, [pc, #132]	@ (80025fc <InferenceHeatI2CCommand+0x64c>)
 8002576:	481f      	ldr	r0, [pc, #124]	@ (80025f4 <InferenceHeatI2CCommand+0x644>)
 8002578:	f011 f8d4 	bl	8013724 <siprintf>
 800257c:	4603      	mov	r3, r0
 800257e:	b29a      	uxth	r2, r3
 8002580:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002584:	491b      	ldr	r1, [pc, #108]	@ (80025f4 <InferenceHeatI2CCommand+0x644>)
 8002586:	481c      	ldr	r0, [pc, #112]	@ (80025f8 <InferenceHeatI2CCommand+0x648>)
 8002588:	f006 fb56 	bl	8008c38 <HAL_UART_Transmit>
			    HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "0"), 1000);
 800258c:	491c      	ldr	r1, [pc, #112]	@ (8002600 <InferenceHeatI2CCommand+0x650>)
 800258e:	4819      	ldr	r0, [pc, #100]	@ (80025f4 <InferenceHeatI2CCommand+0x644>)
 8002590:	f011 f8c8 	bl	8013724 <siprintf>
 8002594:	4603      	mov	r3, r0
 8002596:	b29a      	uxth	r2, r3
 8002598:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800259c:	4915      	ldr	r1, [pc, #84]	@ (80025f4 <InferenceHeatI2CCommand+0x644>)
 800259e:	4816      	ldr	r0, [pc, #88]	@ (80025f8 <InferenceHeatI2CCommand+0x648>)
 80025a0:	f006 fb4a 	bl	8008c38 <HAL_UART_Transmit>
			}
		}
		do{
			endTime = HAL_GetTick();
 80025a4:	f002 f8fc 	bl	80047a0 <HAL_GetTick>
 80025a8:	6078      	str	r0, [r7, #4]
			diffTime = endTime - startTime;
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	603b      	str	r3, [r7, #0]
		}while (diffTime <= TIMBUDGET);
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	2b64      	cmp	r3, #100	@ 0x64
 80025b6:	d9f5      	bls.n	80025a4 <InferenceHeatI2CCommand+0x5f4>
		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "\n"), 100);
 80025b8:	4912      	ldr	r1, [pc, #72]	@ (8002604 <InferenceHeatI2CCommand+0x654>)
 80025ba:	480e      	ldr	r0, [pc, #56]	@ (80025f4 <InferenceHeatI2CCommand+0x644>)
 80025bc:	f011 f8b2 	bl	8013724 <siprintf>
 80025c0:	4603      	mov	r3, r0
 80025c2:	b29a      	uxth	r2, r3
 80025c4:	2364      	movs	r3, #100	@ 0x64
 80025c6:	490b      	ldr	r1, [pc, #44]	@ (80025f4 <InferenceHeatI2CCommand+0x644>)
 80025c8:	480b      	ldr	r0, [pc, #44]	@ (80025f8 <InferenceHeatI2CCommand+0x648>)
 80025ca:	f006 fb35 	bl	8008c38 <HAL_UART_Transmit>
    for (int count =0; count <50000;count ++){
 80025ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025d0:	3301      	adds	r3, #1
 80025d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80025d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025d6:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 80025da:	4293      	cmp	r3, r2
 80025dc:	f77f ad01 	ble.w	8001fe2 <InferenceHeatI2CCommand+0x32>
    }
}
 80025e0:	bf00      	nop
 80025e2:	bf00      	nop
 80025e4:	3730      	adds	r7, #48	@ 0x30
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	20002540 	.word	0x20002540
 80025f0:	080188d4 	.word	0x080188d4
 80025f4:	20007870 	.word	0x20007870
 80025f8:	200077e8 	.word	0x200077e8
 80025fc:	080188e0 	.word	0x080188e0
 8002600:	080188e8 	.word	0x080188e8
 8002604:	080188dc 	.word	0x080188dc

08002608 <PointingVertical>:

void PointingVertical(){
 8002608:	b580      	push	{r7, lr}
 800260a:	b08e      	sub	sp, #56	@ 0x38
 800260c:	af00      	add	r7, sp, #0

	SetI2CCommand();
 800260e:	f7ff f8b5 	bl	800177c <SetI2CCommand>
	SensorI2CCommand();
 8002612:	f7fe ffbb 	bl	800158c <SensorI2CCommand>
	ResetAllDevices();
 8002616:	f001 ffa3 	bl	8004560 <ResetAllDevices>
	setOnAllDevices();
 800261a:	f002 f81d 	bl	8004658 <setOnAllDevices>


	for(int i = 0; i < 5; i++) {
 800261e:	2300      	movs	r3, #0
 8002620:	637b      	str	r3, [r7, #52]	@ 0x34
 8002622:	e31a      	b.n	8002c5a <PointingVertical+0x652>

	    uint32_t ServoStartTime = HAL_GetTick(); // 시작 시간 기록
 8002624:	f002 f8bc 	bl	80047a0 <HAL_GetTick>
 8002628:	61f8      	str	r0, [r7, #28]
	        servo_angle(&htim2, TIM_CHANNEL_1, 10);
 800262a:	220a      	movs	r2, #10
 800262c:	2100      	movs	r1, #0
 800262e:	4808      	ldr	r0, [pc, #32]	@ (8002650 <PointingVertical+0x48>)
 8002630:	f001 fbe2 	bl	8003df8 <servo_angle>
	        HAL_Delay(1000);
 8002634:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002638:	f002 f8be 	bl	80047b8 <HAL_Delay>
		    while(HAL_GetTick() - ServoStartTime < 7000) {
 800263c:	e2ef      	b.n	8002c1e <PointingVertical+0x616>
	        uint32_t startTime, endTime, diffTime;
	        uint8_t tofCount =0;
 800263e:	2300      	movs	r3, #0
 8002640:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			startTime = HAL_GetTick();
 8002644:	f002 f8ac 	bl	80047a0 <HAL_GetTick>
 8002648:	61b8      	str	r0, [r7, #24]
			for (int i = 0; i < NUM_SENSOR; i++) {
 800264a:	2300      	movs	r3, #0
 800264c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800264e:	e073      	b.n	8002738 <PointingVertical+0x130>
 8002650:	20007798 	.word	0x20007798
				Dev = &vl53l0x_s[i];
 8002654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002656:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800265a:	fb02 f303 	mul.w	r3, r2, r3
 800265e:	4a9b      	ldr	r2, [pc, #620]	@ (80028cc <PointingVertical+0x2c4>)
 8002660:	4413      	add	r3, r2
 8002662:	4a9b      	ldr	r2, [pc, #620]	@ (80028d0 <PointingVertical+0x2c8>)
 8002664:	6013      	str	r3, [r2, #0]
				VL53L0X_PerformContinuousRangingMeasurement(Dev, &RangingData); // 1500 uss
 8002666:	4b9a      	ldr	r3, [pc, #616]	@ (80028d0 <PointingVertical+0x2c8>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	499a      	ldr	r1, [pc, #616]	@ (80028d4 <PointingVertical+0x2cc>)
 800266c:	4618      	mov	r0, r3
 800266e:	f009 f8b7 	bl	800b7e0 <VL53L0X_PerformContinuousRangingMeasurement>
				if (RangingData.RangeStatus == 0) {
 8002672:	4b98      	ldr	r3, [pc, #608]	@ (80028d4 <PointingVertical+0x2cc>)
 8002674:	7e1b      	ldrb	r3, [r3, #24]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d15b      	bne.n	8002732 <PointingVertical+0x12a>
				  if (RangingData.RangeMilliMeter < sensorAverages[i]+20) {
 800267a:	4b96      	ldr	r3, [pc, #600]	@ (80028d4 <PointingVertical+0x2cc>)
 800267c:	891b      	ldrh	r3, [r3, #8]
 800267e:	ee07 3a90 	vmov	s15, r3
 8002682:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002686:	4a94      	ldr	r2, [pc, #592]	@ (80028d8 <PointingVertical+0x2d0>)
 8002688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	4413      	add	r3, r2
 800268e:	edd3 7a00 	vldr	s15, [r3]
 8002692:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 8002696:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800269a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800269e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026a2:	d546      	bpl.n	8002732 <PointingVertical+0x12a>
					filteredValue[i] = Kalman_Estimate(&filters[i], RangingData.RangeMilliMeter); // 500 us
 80026a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80026a6:	4613      	mov	r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	4413      	add	r3, r2
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	4a8b      	ldr	r2, [pc, #556]	@ (80028dc <PointingVertical+0x2d4>)
 80026b0:	4413      	add	r3, r2
 80026b2:	4a88      	ldr	r2, [pc, #544]	@ (80028d4 <PointingVertical+0x2cc>)
 80026b4:	8912      	ldrh	r2, [r2, #8]
 80026b6:	ee07 2a90 	vmov	s15, r2
 80026ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026be:	eeb0 0a67 	vmov.f32	s0, s15
 80026c2:	4618      	mov	r0, r3
 80026c4:	f000 ffdc 	bl	8003680 <Kalman_Estimate>
 80026c8:	eef0 7a40 	vmov.f32	s15, s0
 80026cc:	4a84      	ldr	r2, [pc, #528]	@ (80028e0 <PointingVertical+0x2d8>)
 80026ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	4413      	add	r3, r2
 80026d4:	edc3 7a00 	vstr	s15, [r3]
					filteredValue[i] -= sensorAverages[i];
 80026d8:	4a81      	ldr	r2, [pc, #516]	@ (80028e0 <PointingVertical+0x2d8>)
 80026da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	4413      	add	r3, r2
 80026e0:	ed93 7a00 	vldr	s14, [r3]
 80026e4:	4a7c      	ldr	r2, [pc, #496]	@ (80028d8 <PointingVertical+0x2d0>)
 80026e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	4413      	add	r3, r2
 80026ec:	edd3 7a00 	vldr	s15, [r3]
 80026f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026f4:	4a7a      	ldr	r2, [pc, #488]	@ (80028e0 <PointingVertical+0x2d8>)
 80026f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	4413      	add	r3, r2
 80026fc:	edc3 7a00 	vstr	s15, [r3]
					//filteredValue[i] -= Xmean[i];
					filteredValue[i] /= Xstd[i];
 8002700:	4a77      	ldr	r2, [pc, #476]	@ (80028e0 <PointingVertical+0x2d8>)
 8002702:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	4413      	add	r3, r2
 8002708:	edd3 6a00 	vldr	s13, [r3]
 800270c:	4a75      	ldr	r2, [pc, #468]	@ (80028e4 <PointingVertical+0x2dc>)
 800270e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	4413      	add	r3, r2
 8002714:	ed93 7a00 	vldr	s14, [r3]
 8002718:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800271c:	4a70      	ldr	r2, [pc, #448]	@ (80028e0 <PointingVertical+0x2d8>)
 800271e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	4413      	add	r3, r2
 8002724:	edc3 7a00 	vstr	s15, [r3]
					tofCount++;
 8002728:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800272c:	3301      	adds	r3, #1
 800272e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			for (int i = 0; i < NUM_SENSOR; i++) {
 8002732:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002734:	3301      	adds	r3, #1
 8002736:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800273a:	2b2f      	cmp	r3, #47	@ 0x2f
 800273c:	dd8a      	ble.n	8002654 <PointingVertical+0x4c>
				  }
				}
			}

			in_data[0] = filteredValue[0];
 800273e:	4b68      	ldr	r3, [pc, #416]	@ (80028e0 <PointingVertical+0x2d8>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a69      	ldr	r2, [pc, #420]	@ (80028e8 <PointingVertical+0x2e0>)
 8002744:	6013      	str	r3, [r2, #0]
			in_data[1] = filteredValue[1];
 8002746:	4b66      	ldr	r3, [pc, #408]	@ (80028e0 <PointingVertical+0x2d8>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	4a67      	ldr	r2, [pc, #412]	@ (80028e8 <PointingVertical+0x2e0>)
 800274c:	6053      	str	r3, [r2, #4]
			in_data[2] = filteredValue[2];
 800274e:	4b64      	ldr	r3, [pc, #400]	@ (80028e0 <PointingVertical+0x2d8>)
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	4a65      	ldr	r2, [pc, #404]	@ (80028e8 <PointingVertical+0x2e0>)
 8002754:	6093      	str	r3, [r2, #8]
			in_data[3] = filteredValue[3];
 8002756:	4b62      	ldr	r3, [pc, #392]	@ (80028e0 <PointingVertical+0x2d8>)
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	4a63      	ldr	r2, [pc, #396]	@ (80028e8 <PointingVertical+0x2e0>)
 800275c:	60d3      	str	r3, [r2, #12]
			in_data[4] = filteredValue[4];
 800275e:	4b60      	ldr	r3, [pc, #384]	@ (80028e0 <PointingVertical+0x2d8>)
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	4a61      	ldr	r2, [pc, #388]	@ (80028e8 <PointingVertical+0x2e0>)
 8002764:	6113      	str	r3, [r2, #16]
			in_data[5] = filteredValue[5];
 8002766:	4b5e      	ldr	r3, [pc, #376]	@ (80028e0 <PointingVertical+0x2d8>)
 8002768:	695b      	ldr	r3, [r3, #20]
 800276a:	4a5f      	ldr	r2, [pc, #380]	@ (80028e8 <PointingVertical+0x2e0>)
 800276c:	6153      	str	r3, [r2, #20]
			in_data[6] = filteredValue[6];
 800276e:	4b5c      	ldr	r3, [pc, #368]	@ (80028e0 <PointingVertical+0x2d8>)
 8002770:	699b      	ldr	r3, [r3, #24]
 8002772:	4a5d      	ldr	r2, [pc, #372]	@ (80028e8 <PointingVertical+0x2e0>)
 8002774:	6193      	str	r3, [r2, #24]
			in_data[7] = filteredValue[7];
 8002776:	4b5a      	ldr	r3, [pc, #360]	@ (80028e0 <PointingVertical+0x2d8>)
 8002778:	69db      	ldr	r3, [r3, #28]
 800277a:	4a5b      	ldr	r2, [pc, #364]	@ (80028e8 <PointingVertical+0x2e0>)
 800277c:	61d3      	str	r3, [r2, #28]
			in_data[8] = filteredValue[8];
 800277e:	4b58      	ldr	r3, [pc, #352]	@ (80028e0 <PointingVertical+0x2d8>)
 8002780:	6a1b      	ldr	r3, [r3, #32]
 8002782:	4a59      	ldr	r2, [pc, #356]	@ (80028e8 <PointingVertical+0x2e0>)
 8002784:	6213      	str	r3, [r2, #32]
			in_data[9] = filteredValue[9];
 8002786:	4b56      	ldr	r3, [pc, #344]	@ (80028e0 <PointingVertical+0x2d8>)
 8002788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800278a:	4a57      	ldr	r2, [pc, #348]	@ (80028e8 <PointingVertical+0x2e0>)
 800278c:	6253      	str	r3, [r2, #36]	@ 0x24
			in_data[10] = filteredValue[10];
 800278e:	4b54      	ldr	r3, [pc, #336]	@ (80028e0 <PointingVertical+0x2d8>)
 8002790:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002792:	4a55      	ldr	r2, [pc, #340]	@ (80028e8 <PointingVertical+0x2e0>)
 8002794:	6293      	str	r3, [r2, #40]	@ 0x28
			in_data[11] = filteredValue[11];
 8002796:	4b52      	ldr	r3, [pc, #328]	@ (80028e0 <PointingVertical+0x2d8>)
 8002798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800279a:	4a53      	ldr	r2, [pc, #332]	@ (80028e8 <PointingVertical+0x2e0>)
 800279c:	62d3      	str	r3, [r2, #44]	@ 0x2c
			in_data[12] = filteredValue[0];
 800279e:	4b50      	ldr	r3, [pc, #320]	@ (80028e0 <PointingVertical+0x2d8>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a51      	ldr	r2, [pc, #324]	@ (80028e8 <PointingVertical+0x2e0>)
 80027a4:	6313      	str	r3, [r2, #48]	@ 0x30

			in_data[13] = filteredValue[12];
 80027a6:	4b4e      	ldr	r3, [pc, #312]	@ (80028e0 <PointingVertical+0x2d8>)
 80027a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027aa:	4a4f      	ldr	r2, [pc, #316]	@ (80028e8 <PointingVertical+0x2e0>)
 80027ac:	6353      	str	r3, [r2, #52]	@ 0x34
			in_data[14] = filteredValue[13];
 80027ae:	4b4c      	ldr	r3, [pc, #304]	@ (80028e0 <PointingVertical+0x2d8>)
 80027b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027b2:	4a4d      	ldr	r2, [pc, #308]	@ (80028e8 <PointingVertical+0x2e0>)
 80027b4:	6393      	str	r3, [r2, #56]	@ 0x38
			in_data[15] = filteredValue[14];
 80027b6:	4b4a      	ldr	r3, [pc, #296]	@ (80028e0 <PointingVertical+0x2d8>)
 80027b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027ba:	4a4b      	ldr	r2, [pc, #300]	@ (80028e8 <PointingVertical+0x2e0>)
 80027bc:	63d3      	str	r3, [r2, #60]	@ 0x3c
			in_data[16] = filteredValue[15];
 80027be:	4b48      	ldr	r3, [pc, #288]	@ (80028e0 <PointingVertical+0x2d8>)
 80027c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027c2:	4a49      	ldr	r2, [pc, #292]	@ (80028e8 <PointingVertical+0x2e0>)
 80027c4:	6413      	str	r3, [r2, #64]	@ 0x40
			in_data[17] = filteredValue[16];
 80027c6:	4b46      	ldr	r3, [pc, #280]	@ (80028e0 <PointingVertical+0x2d8>)
 80027c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ca:	4a47      	ldr	r2, [pc, #284]	@ (80028e8 <PointingVertical+0x2e0>)
 80027cc:	6453      	str	r3, [r2, #68]	@ 0x44
			in_data[18] = filteredValue[17];
 80027ce:	4b44      	ldr	r3, [pc, #272]	@ (80028e0 <PointingVertical+0x2d8>)
 80027d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027d2:	4a45      	ldr	r2, [pc, #276]	@ (80028e8 <PointingVertical+0x2e0>)
 80027d4:	6493      	str	r3, [r2, #72]	@ 0x48
			in_data[19] = filteredValue[18];
 80027d6:	4b42      	ldr	r3, [pc, #264]	@ (80028e0 <PointingVertical+0x2d8>)
 80027d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027da:	4a43      	ldr	r2, [pc, #268]	@ (80028e8 <PointingVertical+0x2e0>)
 80027dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
			in_data[20] = filteredValue[19];
 80027de:	4b40      	ldr	r3, [pc, #256]	@ (80028e0 <PointingVertical+0x2d8>)
 80027e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027e2:	4a41      	ldr	r2, [pc, #260]	@ (80028e8 <PointingVertical+0x2e0>)
 80027e4:	6513      	str	r3, [r2, #80]	@ 0x50
			in_data[21] = filteredValue[20];
 80027e6:	4b3e      	ldr	r3, [pc, #248]	@ (80028e0 <PointingVertical+0x2d8>)
 80027e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027ea:	4a3f      	ldr	r2, [pc, #252]	@ (80028e8 <PointingVertical+0x2e0>)
 80027ec:	6553      	str	r3, [r2, #84]	@ 0x54
			in_data[22] = filteredValue[21];
 80027ee:	4b3c      	ldr	r3, [pc, #240]	@ (80028e0 <PointingVertical+0x2d8>)
 80027f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027f2:	4a3d      	ldr	r2, [pc, #244]	@ (80028e8 <PointingVertical+0x2e0>)
 80027f4:	6593      	str	r3, [r2, #88]	@ 0x58
			in_data[23] = filteredValue[22];
 80027f6:	4b3a      	ldr	r3, [pc, #232]	@ (80028e0 <PointingVertical+0x2d8>)
 80027f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027fa:	4a3b      	ldr	r2, [pc, #236]	@ (80028e8 <PointingVertical+0x2e0>)
 80027fc:	65d3      	str	r3, [r2, #92]	@ 0x5c
			in_data[24] = filteredValue[23];
 80027fe:	4b38      	ldr	r3, [pc, #224]	@ (80028e0 <PointingVertical+0x2d8>)
 8002800:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002802:	4a39      	ldr	r2, [pc, #228]	@ (80028e8 <PointingVertical+0x2e0>)
 8002804:	6613      	str	r3, [r2, #96]	@ 0x60
			in_data[25] = filteredValue[12];
 8002806:	4b36      	ldr	r3, [pc, #216]	@ (80028e0 <PointingVertical+0x2d8>)
 8002808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800280a:	4a37      	ldr	r2, [pc, #220]	@ (80028e8 <PointingVertical+0x2e0>)
 800280c:	6653      	str	r3, [r2, #100]	@ 0x64
			#if NUM_SENSOR >= 36
			in_data[26] = filteredValue[24];
 800280e:	4b34      	ldr	r3, [pc, #208]	@ (80028e0 <PointingVertical+0x2d8>)
 8002810:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002812:	4a35      	ldr	r2, [pc, #212]	@ (80028e8 <PointingVertical+0x2e0>)
 8002814:	6693      	str	r3, [r2, #104]	@ 0x68
			in_data[27] = filteredValue[25];
 8002816:	4b32      	ldr	r3, [pc, #200]	@ (80028e0 <PointingVertical+0x2d8>)
 8002818:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800281a:	4a33      	ldr	r2, [pc, #204]	@ (80028e8 <PointingVertical+0x2e0>)
 800281c:	66d3      	str	r3, [r2, #108]	@ 0x6c
			in_data[28] = filteredValue[26];
 800281e:	4b30      	ldr	r3, [pc, #192]	@ (80028e0 <PointingVertical+0x2d8>)
 8002820:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002822:	4a31      	ldr	r2, [pc, #196]	@ (80028e8 <PointingVertical+0x2e0>)
 8002824:	6713      	str	r3, [r2, #112]	@ 0x70
			in_data[29] = filteredValue[27];
 8002826:	4b2e      	ldr	r3, [pc, #184]	@ (80028e0 <PointingVertical+0x2d8>)
 8002828:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800282a:	4a2f      	ldr	r2, [pc, #188]	@ (80028e8 <PointingVertical+0x2e0>)
 800282c:	6753      	str	r3, [r2, #116]	@ 0x74
			in_data[30] = filteredValue[28];
 800282e:	4b2c      	ldr	r3, [pc, #176]	@ (80028e0 <PointingVertical+0x2d8>)
 8002830:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002832:	4a2d      	ldr	r2, [pc, #180]	@ (80028e8 <PointingVertical+0x2e0>)
 8002834:	6793      	str	r3, [r2, #120]	@ 0x78
			in_data[31] = filteredValue[29];
 8002836:	4b2a      	ldr	r3, [pc, #168]	@ (80028e0 <PointingVertical+0x2d8>)
 8002838:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800283a:	4a2b      	ldr	r2, [pc, #172]	@ (80028e8 <PointingVertical+0x2e0>)
 800283c:	67d3      	str	r3, [r2, #124]	@ 0x7c
			in_data[32] = filteredValue[30];
 800283e:	4b28      	ldr	r3, [pc, #160]	@ (80028e0 <PointingVertical+0x2d8>)
 8002840:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002842:	4a29      	ldr	r2, [pc, #164]	@ (80028e8 <PointingVertical+0x2e0>)
 8002844:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
			in_data[33] = filteredValue[31];
 8002848:	4b25      	ldr	r3, [pc, #148]	@ (80028e0 <PointingVertical+0x2d8>)
 800284a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800284c:	4a26      	ldr	r2, [pc, #152]	@ (80028e8 <PointingVertical+0x2e0>)
 800284e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
			in_data[34] = filteredValue[32];
 8002852:	4b23      	ldr	r3, [pc, #140]	@ (80028e0 <PointingVertical+0x2d8>)
 8002854:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002858:	4a23      	ldr	r2, [pc, #140]	@ (80028e8 <PointingVertical+0x2e0>)
 800285a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
			in_data[35] = filteredValue[33];
 800285e:	4b20      	ldr	r3, [pc, #128]	@ (80028e0 <PointingVertical+0x2d8>)
 8002860:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002864:	4a20      	ldr	r2, [pc, #128]	@ (80028e8 <PointingVertical+0x2e0>)
 8002866:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
			in_data[36] = filteredValue[34];
 800286a:	4b1d      	ldr	r3, [pc, #116]	@ (80028e0 <PointingVertical+0x2d8>)
 800286c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002870:	4a1d      	ldr	r2, [pc, #116]	@ (80028e8 <PointingVertical+0x2e0>)
 8002872:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
			in_data[37] = filteredValue[35];
 8002876:	4b1a      	ldr	r3, [pc, #104]	@ (80028e0 <PointingVertical+0x2d8>)
 8002878:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800287c:	4a1a      	ldr	r2, [pc, #104]	@ (80028e8 <PointingVertical+0x2e0>)
 800287e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
			in_data[38] = filteredValue[24];
 8002882:	4b17      	ldr	r3, [pc, #92]	@ (80028e0 <PointingVertical+0x2d8>)
 8002884:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002886:	4a18      	ldr	r2, [pc, #96]	@ (80028e8 <PointingVertical+0x2e0>)
 8002888:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
			#endif
			#if NUM_SENSOR >= 48
			in_data[39] = filteredValue[36];
 800288c:	4b14      	ldr	r3, [pc, #80]	@ (80028e0 <PointingVertical+0x2d8>)
 800288e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002892:	4a15      	ldr	r2, [pc, #84]	@ (80028e8 <PointingVertical+0x2e0>)
 8002894:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
			in_data[40] = filteredValue[37];
 8002898:	4b11      	ldr	r3, [pc, #68]	@ (80028e0 <PointingVertical+0x2d8>)
 800289a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800289e:	4a12      	ldr	r2, [pc, #72]	@ (80028e8 <PointingVertical+0x2e0>)
 80028a0:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
			in_data[41] = filteredValue[38];
 80028a4:	4b0e      	ldr	r3, [pc, #56]	@ (80028e0 <PointingVertical+0x2d8>)
 80028a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80028aa:	4a0f      	ldr	r2, [pc, #60]	@ (80028e8 <PointingVertical+0x2e0>)
 80028ac:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
			in_data[42] = filteredValue[39];
 80028b0:	4b0b      	ldr	r3, [pc, #44]	@ (80028e0 <PointingVertical+0x2d8>)
 80028b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80028b6:	4a0c      	ldr	r2, [pc, #48]	@ (80028e8 <PointingVertical+0x2e0>)
 80028b8:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
			in_data[43] = filteredValue[40];
 80028bc:	4b08      	ldr	r3, [pc, #32]	@ (80028e0 <PointingVertical+0x2d8>)
 80028be:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80028c2:	4a09      	ldr	r2, [pc, #36]	@ (80028e8 <PointingVertical+0x2e0>)
 80028c4:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac
 80028c8:	e010      	b.n	80028ec <PointingVertical+0x2e4>
 80028ca:	bf00      	nop
 80028cc:	20007a60 	.word	0x20007a60
 80028d0:	2000c560 	.word	0x2000c560
 80028d4:	200078f4 	.word	0x200078f4
 80028d8:	20007058 	.word	0x20007058
 80028dc:	200072f4 	.word	0x200072f4
 80028e0:	200076b4 	.word	0x200076b4
 80028e4:	20000238 	.word	0x20000238
 80028e8:	20002460 	.word	0x20002460
			in_data[44] = filteredValue[41];
 80028ec:	4b92      	ldr	r3, [pc, #584]	@ (8002b38 <PointingVertical+0x530>)
 80028ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80028f2:	4a92      	ldr	r2, [pc, #584]	@ (8002b3c <PointingVertical+0x534>)
 80028f4:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0
			in_data[45] = filteredValue[42];
 80028f8:	4b8f      	ldr	r3, [pc, #572]	@ (8002b38 <PointingVertical+0x530>)
 80028fa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80028fe:	4a8f      	ldr	r2, [pc, #572]	@ (8002b3c <PointingVertical+0x534>)
 8002900:	f8c2 30b4 	str.w	r3, [r2, #180]	@ 0xb4
			in_data[46] = filteredValue[43];
 8002904:	4b8c      	ldr	r3, [pc, #560]	@ (8002b38 <PointingVertical+0x530>)
 8002906:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800290a:	4a8c      	ldr	r2, [pc, #560]	@ (8002b3c <PointingVertical+0x534>)
 800290c:	f8c2 30b8 	str.w	r3, [r2, #184]	@ 0xb8
			in_data[47] = filteredValue[44];
 8002910:	4b89      	ldr	r3, [pc, #548]	@ (8002b38 <PointingVertical+0x530>)
 8002912:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002916:	4a89      	ldr	r2, [pc, #548]	@ (8002b3c <PointingVertical+0x534>)
 8002918:	f8c2 30bc 	str.w	r3, [r2, #188]	@ 0xbc
			in_data[48] = filteredValue[45];
 800291c:	4b86      	ldr	r3, [pc, #536]	@ (8002b38 <PointingVertical+0x530>)
 800291e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002922:	4a86      	ldr	r2, [pc, #536]	@ (8002b3c <PointingVertical+0x534>)
 8002924:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
			in_data[49] = filteredValue[46];
 8002928:	4b83      	ldr	r3, [pc, #524]	@ (8002b38 <PointingVertical+0x530>)
 800292a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800292e:	4a83      	ldr	r2, [pc, #524]	@ (8002b3c <PointingVertical+0x534>)
 8002930:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
			in_data[50] = filteredValue[47];
 8002934:	4b80      	ldr	r3, [pc, #512]	@ (8002b38 <PointingVertical+0x530>)
 8002936:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800293a:	4a80      	ldr	r2, [pc, #512]	@ (8002b3c <PointingVertical+0x534>)
 800293c:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
			in_data[51] = filteredValue[36];
 8002940:	4b7d      	ldr	r3, [pc, #500]	@ (8002b38 <PointingVertical+0x530>)
 8002942:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002946:	4a7d      	ldr	r2, [pc, #500]	@ (8002b3c <PointingVertical+0x534>)
 8002948:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
			#endif

			if(tofCount == NUM_SENSOR){
 800294c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002950:	2b30      	cmp	r3, #48	@ 0x30
 8002952:	f040 814f 	bne.w	8002bf4 <PointingVertical+0x5ec>
				for(int i=0; i<NUM_SENSOR;i++){HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.1f ", filteredValue[i]), 100);}
 8002956:	2300      	movs	r3, #0
 8002958:	62bb      	str	r3, [r7, #40]	@ 0x28
 800295a:	e017      	b.n	800298c <PointingVertical+0x384>
 800295c:	4a76      	ldr	r2, [pc, #472]	@ (8002b38 <PointingVertical+0x530>)
 800295e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	4413      	add	r3, r2
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4618      	mov	r0, r3
 8002968:	f7fd fe1e 	bl	80005a8 <__aeabi_f2d>
 800296c:	4602      	mov	r2, r0
 800296e:	460b      	mov	r3, r1
 8002970:	4973      	ldr	r1, [pc, #460]	@ (8002b40 <PointingVertical+0x538>)
 8002972:	4874      	ldr	r0, [pc, #464]	@ (8002b44 <PointingVertical+0x53c>)
 8002974:	f010 fed6 	bl	8013724 <siprintf>
 8002978:	4603      	mov	r3, r0
 800297a:	b29a      	uxth	r2, r3
 800297c:	2364      	movs	r3, #100	@ 0x64
 800297e:	4971      	ldr	r1, [pc, #452]	@ (8002b44 <PointingVertical+0x53c>)
 8002980:	4871      	ldr	r0, [pc, #452]	@ (8002b48 <PointingVertical+0x540>)
 8002982:	f006 f959 	bl	8008c38 <HAL_UART_Transmit>
 8002986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002988:	3301      	adds	r3, #1
 800298a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800298c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800298e:	2b2f      	cmp	r3, #47	@ 0x2f
 8002990:	dde4      	ble.n	800295c <PointingVertical+0x354>
				int a =0;
 8002992:	2300      	movs	r3, #0
 8002994:	617b      	str	r3, [r7, #20]
				aiRun(in_data,out_data);
 8002996:	496d      	ldr	r1, [pc, #436]	@ (8002b4c <PointingVertical+0x544>)
 8002998:	4868      	ldr	r0, [pc, #416]	@ (8002b3c <PointingVertical+0x534>)
 800299a:	f7fe fb93 	bl	80010c4 <aiRun>
				float sqSum= out_data[2]*out_data[2] + out_data[3]*out_data[3];
 800299e:	4b6b      	ldr	r3, [pc, #428]	@ (8002b4c <PointingVertical+0x544>)
 80029a0:	ed93 7a02 	vldr	s14, [r3, #8]
 80029a4:	4b69      	ldr	r3, [pc, #420]	@ (8002b4c <PointingVertical+0x544>)
 80029a6:	edd3 7a02 	vldr	s15, [r3, #8]
 80029aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029ae:	4b67      	ldr	r3, [pc, #412]	@ (8002b4c <PointingVertical+0x544>)
 80029b0:	edd3 6a03 	vldr	s13, [r3, #12]
 80029b4:	4b65      	ldr	r3, [pc, #404]	@ (8002b4c <PointingVertical+0x544>)
 80029b6:	edd3 7a03 	vldr	s15, [r3, #12]
 80029ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029c2:	edc7 7a04 	vstr	s15, [r7, #16]
				//float sqrange = 0.08;
				uint32_t timestamp = HAL_GetTick();
 80029c6:	f001 feeb 	bl	80047a0 <HAL_GetTick>
 80029ca:	60f8      	str	r0, [r7, #12]
				if(sqSum>=0.97){
 80029cc:	6938      	ldr	r0, [r7, #16]
 80029ce:	f7fd fdeb 	bl	80005a8 <__aeabi_f2d>
 80029d2:	a357      	add	r3, pc, #348	@ (adr r3, 8002b30 <PointingVertical+0x528>)
 80029d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029d8:	f7fe f8c4 	bl	8000b64 <__aeabi_dcmpge>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	f000 809f 	beq.w	8002b22 <PointingVertical+0x51a>
					out_data[0] = (out_data[0] + 1) * (Fminmax[1] - Fminmax[0]) / 2 + Fminmax[0];
 80029e4:	4b59      	ldr	r3, [pc, #356]	@ (8002b4c <PointingVertical+0x544>)
 80029e6:	edd3 7a00 	vldr	s15, [r3]
 80029ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80029ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80029f2:	4b57      	ldr	r3, [pc, #348]	@ (8002b50 <PointingVertical+0x548>)
 80029f4:	edd3 6a01 	vldr	s13, [r3, #4]
 80029f8:	4b55      	ldr	r3, [pc, #340]	@ (8002b50 <PointingVertical+0x548>)
 80029fa:	edd3 7a00 	vldr	s15, [r3]
 80029fe:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002a02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a06:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002a0a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002a0e:	4b50      	ldr	r3, [pc, #320]	@ (8002b50 <PointingVertical+0x548>)
 8002a10:	edd3 7a00 	vldr	s15, [r3]
 8002a14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a18:	4b4c      	ldr	r3, [pc, #304]	@ (8002b4c <PointingVertical+0x544>)
 8002a1a:	edc3 7a00 	vstr	s15, [r3]
					out_data[1] = (out_data[1] + 1) * (Zminmax[1] - Zminmax[0]) / 2 + Zminmax[0];
 8002a1e:	4b4b      	ldr	r3, [pc, #300]	@ (8002b4c <PointingVertical+0x544>)
 8002a20:	edd3 7a01 	vldr	s15, [r3, #4]
 8002a24:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002a28:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002a2c:	4b49      	ldr	r3, [pc, #292]	@ (8002b54 <PointingVertical+0x54c>)
 8002a2e:	edd3 6a01 	vldr	s13, [r3, #4]
 8002a32:	4b48      	ldr	r3, [pc, #288]	@ (8002b54 <PointingVertical+0x54c>)
 8002a34:	edd3 7a00 	vldr	s15, [r3]
 8002a38:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002a3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a40:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002a44:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002a48:	4b42      	ldr	r3, [pc, #264]	@ (8002b54 <PointingVertical+0x54c>)
 8002a4a:	edd3 7a00 	vldr	s15, [r3]
 8002a4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a52:	4b3e      	ldr	r3, [pc, #248]	@ (8002b4c <PointingVertical+0x544>)
 8002a54:	edc3 7a01 	vstr	s15, [r3, #4]
					if(out_data[1] >=144){out_data[1]=144;}
 8002a58:	4b3c      	ldr	r3, [pc, #240]	@ (8002b4c <PointingVertical+0x544>)
 8002a5a:	edd3 7a01 	vldr	s15, [r3, #4]
 8002a5e:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8002b58 <PointingVertical+0x550>
 8002a62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a6a:	db02      	blt.n	8002a72 <PointingVertical+0x46a>
 8002a6c:	4b37      	ldr	r3, [pc, #220]	@ (8002b4c <PointingVertical+0x544>)
 8002a6e:	4a3b      	ldr	r2, [pc, #236]	@ (8002b5c <PointingVertical+0x554>)
 8002a70:	605a      	str	r2, [r3, #4]
					if(out_data[1] <=16){out_data[1]=16;}
 8002a72:	4b36      	ldr	r3, [pc, #216]	@ (8002b4c <PointingVertical+0x544>)
 8002a74:	edd3 7a01 	vldr	s15, [r3, #4]
 8002a78:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 8002a7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a84:	d803      	bhi.n	8002a8e <PointingVertical+0x486>
 8002a86:	4b31      	ldr	r3, [pc, #196]	@ (8002b4c <PointingVertical+0x544>)
 8002a88:	f04f 4283 	mov.w	r2, #1098907648	@ 0x41800000
 8002a8c:	605a      	str	r2, [r3, #4]
					if(out_data[0]>=Fminmax[0]){
 8002a8e:	4b2f      	ldr	r3, [pc, #188]	@ (8002b4c <PointingVertical+0x544>)
 8002a90:	ed93 7a00 	vldr	s14, [r3]
 8002a94:	4b2e      	ldr	r3, [pc, #184]	@ (8002b50 <PointingVertical+0x548>)
 8002a96:	edd3 7a00 	vldr	s15, [r3]
 8002a9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aa2:	f2c0 80a7 	blt.w	8002bf4 <PointingVertical+0x5ec>
						for(int k=0; k<4;k++){
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002aaa:	e018      	b.n	8002ade <PointingVertical+0x4d6>
							HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", out_data[k]), 1000);
 8002aac:	4a27      	ldr	r2, [pc, #156]	@ (8002b4c <PointingVertical+0x544>)
 8002aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	4413      	add	r3, r2
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7fd fd76 	bl	80005a8 <__aeabi_f2d>
 8002abc:	4602      	mov	r2, r0
 8002abe:	460b      	mov	r3, r1
 8002ac0:	4927      	ldr	r1, [pc, #156]	@ (8002b60 <PointingVertical+0x558>)
 8002ac2:	4820      	ldr	r0, [pc, #128]	@ (8002b44 <PointingVertical+0x53c>)
 8002ac4:	f010 fe2e 	bl	8013724 <siprintf>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	b29a      	uxth	r2, r3
 8002acc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ad0:	491c      	ldr	r1, [pc, #112]	@ (8002b44 <PointingVertical+0x53c>)
 8002ad2:	481d      	ldr	r0, [pc, #116]	@ (8002b48 <PointingVertical+0x540>)
 8002ad4:	f006 f8b0 	bl	8008c38 <HAL_UART_Transmit>
						for(int k=0; k<4;k++){
 8002ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ada:	3301      	adds	r3, #1
 8002adc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae0:	2b03      	cmp	r3, #3
 8002ae2:	dde3      	ble.n	8002aac <PointingVertical+0x4a4>
						}
						HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", sqSum), 1000);
 8002ae4:	6938      	ldr	r0, [r7, #16]
 8002ae6:	f7fd fd5f 	bl	80005a8 <__aeabi_f2d>
 8002aea:	4602      	mov	r2, r0
 8002aec:	460b      	mov	r3, r1
 8002aee:	491c      	ldr	r1, [pc, #112]	@ (8002b60 <PointingVertical+0x558>)
 8002af0:	4814      	ldr	r0, [pc, #80]	@ (8002b44 <PointingVertical+0x53c>)
 8002af2:	f010 fe17 	bl	8013724 <siprintf>
 8002af6:	4603      	mov	r3, r0
 8002af8:	b29a      	uxth	r2, r3
 8002afa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002afe:	4911      	ldr	r1, [pc, #68]	@ (8002b44 <PointingVertical+0x53c>)
 8002b00:	4811      	ldr	r0, [pc, #68]	@ (8002b48 <PointingVertical+0x540>)
 8002b02:	f006 f899 	bl	8008c38 <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%lu ", timestamp), 1000);
 8002b06:	68fa      	ldr	r2, [r7, #12]
 8002b08:	4916      	ldr	r1, [pc, #88]	@ (8002b64 <PointingVertical+0x55c>)
 8002b0a:	480e      	ldr	r0, [pc, #56]	@ (8002b44 <PointingVertical+0x53c>)
 8002b0c:	f010 fe0a 	bl	8013724 <siprintf>
 8002b10:	4603      	mov	r3, r0
 8002b12:	b29a      	uxth	r2, r3
 8002b14:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b18:	490a      	ldr	r1, [pc, #40]	@ (8002b44 <PointingVertical+0x53c>)
 8002b1a:	480b      	ldr	r0, [pc, #44]	@ (8002b48 <PointingVertical+0x540>)
 8002b1c:	f006 f88c 	bl	8008c38 <HAL_UART_Transmit>
 8002b20:	e068      	b.n	8002bf4 <PointingVertical+0x5ec>
						//HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "1"), 1000);
					}
				}else if(a==1){
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d165      	bne.n	8002bf4 <PointingVertical+0x5ec>
					for(int k=0; k<4;k++){
 8002b28:	2300      	movs	r3, #0
 8002b2a:	623b      	str	r3, [r7, #32]
 8002b2c:	e035      	b.n	8002b9a <PointingVertical+0x592>
 8002b2e:	bf00      	nop
 8002b30:	70a3d70a 	.word	0x70a3d70a
 8002b34:	3fef0a3d 	.word	0x3fef0a3d
 8002b38:	200076b4 	.word	0x200076b4
 8002b3c:	20002460 	.word	0x20002460
 8002b40:	080187b4 	.word	0x080187b4
 8002b44:	20007870 	.word	0x20007870
 8002b48:	200077e8 	.word	0x200077e8
 8002b4c:	20002540 	.word	0x20002540
 8002b50:	200002f8 	.word	0x200002f8
 8002b54:	20000300 	.word	0x20000300
 8002b58:	43100000 	.word	0x43100000
 8002b5c:	43100000 	.word	0x43100000
 8002b60:	080188d4 	.word	0x080188d4
 8002b64:	080188e0 	.word	0x080188e0
						HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", out_data[k]), 1000);
 8002b68:	4a40      	ldr	r2, [pc, #256]	@ (8002c6c <PointingVertical+0x664>)
 8002b6a:	6a3b      	ldr	r3, [r7, #32]
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	4413      	add	r3, r2
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7fd fd18 	bl	80005a8 <__aeabi_f2d>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	493c      	ldr	r1, [pc, #240]	@ (8002c70 <PointingVertical+0x668>)
 8002b7e:	483d      	ldr	r0, [pc, #244]	@ (8002c74 <PointingVertical+0x66c>)
 8002b80:	f010 fdd0 	bl	8013724 <siprintf>
 8002b84:	4603      	mov	r3, r0
 8002b86:	b29a      	uxth	r2, r3
 8002b88:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b8c:	4939      	ldr	r1, [pc, #228]	@ (8002c74 <PointingVertical+0x66c>)
 8002b8e:	483a      	ldr	r0, [pc, #232]	@ (8002c78 <PointingVertical+0x670>)
 8002b90:	f006 f852 	bl	8008c38 <HAL_UART_Transmit>
					for(int k=0; k<4;k++){
 8002b94:	6a3b      	ldr	r3, [r7, #32]
 8002b96:	3301      	adds	r3, #1
 8002b98:	623b      	str	r3, [r7, #32]
 8002b9a:	6a3b      	ldr	r3, [r7, #32]
 8002b9c:	2b03      	cmp	r3, #3
 8002b9e:	dde3      	ble.n	8002b68 <PointingVertical+0x560>
					}
					HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", sqSum), 1000);
 8002ba0:	6938      	ldr	r0, [r7, #16]
 8002ba2:	f7fd fd01 	bl	80005a8 <__aeabi_f2d>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	460b      	mov	r3, r1
 8002baa:	4931      	ldr	r1, [pc, #196]	@ (8002c70 <PointingVertical+0x668>)
 8002bac:	4831      	ldr	r0, [pc, #196]	@ (8002c74 <PointingVertical+0x66c>)
 8002bae:	f010 fdb9 	bl	8013724 <siprintf>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	b29a      	uxth	r2, r3
 8002bb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002bba:	492e      	ldr	r1, [pc, #184]	@ (8002c74 <PointingVertical+0x66c>)
 8002bbc:	482e      	ldr	r0, [pc, #184]	@ (8002c78 <PointingVertical+0x670>)
 8002bbe:	f006 f83b 	bl	8008c38 <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%lu ", timestamp), 1000);
 8002bc2:	68fa      	ldr	r2, [r7, #12]
 8002bc4:	492d      	ldr	r1, [pc, #180]	@ (8002c7c <PointingVertical+0x674>)
 8002bc6:	482b      	ldr	r0, [pc, #172]	@ (8002c74 <PointingVertical+0x66c>)
 8002bc8:	f010 fdac 	bl	8013724 <siprintf>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	b29a      	uxth	r2, r3
 8002bd0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002bd4:	4927      	ldr	r1, [pc, #156]	@ (8002c74 <PointingVertical+0x66c>)
 8002bd6:	4828      	ldr	r0, [pc, #160]	@ (8002c78 <PointingVertical+0x670>)
 8002bd8:	f006 f82e 	bl	8008c38 <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "0"), 1000);
 8002bdc:	4928      	ldr	r1, [pc, #160]	@ (8002c80 <PointingVertical+0x678>)
 8002bde:	4825      	ldr	r0, [pc, #148]	@ (8002c74 <PointingVertical+0x66c>)
 8002be0:	f010 fda0 	bl	8013724 <siprintf>
 8002be4:	4603      	mov	r3, r0
 8002be6:	b29a      	uxth	r2, r3
 8002be8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002bec:	4921      	ldr	r1, [pc, #132]	@ (8002c74 <PointingVertical+0x66c>)
 8002bee:	4822      	ldr	r0, [pc, #136]	@ (8002c78 <PointingVertical+0x670>)
 8002bf0:	f006 f822 	bl	8008c38 <HAL_UART_Transmit>
				}
			}
			do{
				endTime = HAL_GetTick();
 8002bf4:	f001 fdd4 	bl	80047a0 <HAL_GetTick>
 8002bf8:	60b8      	str	r0, [r7, #8]
				diffTime = endTime - startTime;
 8002bfa:	68ba      	ldr	r2, [r7, #8]
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	607b      	str	r3, [r7, #4]
			}while (diffTime <= TIMBUDGET);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2b64      	cmp	r3, #100	@ 0x64
 8002c06:	d9f5      	bls.n	8002bf4 <PointingVertical+0x5ec>
			HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "\n"), 100);
 8002c08:	491e      	ldr	r1, [pc, #120]	@ (8002c84 <PointingVertical+0x67c>)
 8002c0a:	481a      	ldr	r0, [pc, #104]	@ (8002c74 <PointingVertical+0x66c>)
 8002c0c:	f010 fd8a 	bl	8013724 <siprintf>
 8002c10:	4603      	mov	r3, r0
 8002c12:	b29a      	uxth	r2, r3
 8002c14:	2364      	movs	r3, #100	@ 0x64
 8002c16:	4917      	ldr	r1, [pc, #92]	@ (8002c74 <PointingVertical+0x66c>)
 8002c18:	4817      	ldr	r0, [pc, #92]	@ (8002c78 <PointingVertical+0x670>)
 8002c1a:	f006 f80d 	bl	8008c38 <HAL_UART_Transmit>
		    while(HAL_GetTick() - ServoStartTime < 7000) {
 8002c1e:	f001 fdbf 	bl	80047a0 <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	f641 3257 	movw	r2, #6999	@ 0x1b57
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	f67f ad06 	bls.w	800263e <PointingVertical+0x36>
	    }
	    HAL_Delay(1000);
 8002c32:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002c36:	f001 fdbf 	bl	80047b8 <HAL_Delay>

		servo_angle(&htim2, TIM_CHANNEL_1, 0);
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	2100      	movs	r1, #0
 8002c3e:	4812      	ldr	r0, [pc, #72]	@ (8002c88 <PointingVertical+0x680>)
 8002c40:	f001 f8da 	bl	8003df8 <servo_angle>
		HAL_Delay(1000);
 8002c44:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002c48:	f001 fdb6 	bl	80047b8 <HAL_Delay>
	    stepLin(-25);
 8002c4c:	f06f 0018 	mvn.w	r0, #24
 8002c50:	f001 f876 	bl	8003d40 <stepLin>
	for(int i = 0; i < 5; i++) {
 8002c54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c56:	3301      	adds	r3, #1
 8002c58:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c5c:	2b04      	cmp	r3, #4
 8002c5e:	f77f ace1 	ble.w	8002624 <PointingVertical+0x1c>
	}
	//stepLin(130);

	// 30 55 80 110 130
}
 8002c62:	bf00      	nop
 8002c64:	bf00      	nop
 8002c66:	3738      	adds	r7, #56	@ 0x38
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	20002540 	.word	0x20002540
 8002c70:	080188d4 	.word	0x080188d4
 8002c74:	20007870 	.word	0x20007870
 8002c78:	200077e8 	.word	0x200077e8
 8002c7c:	080188e0 	.word	0x080188e0
 8002c80:	080188e8 	.word	0x080188e8
 8002c84:	080188dc 	.word	0x080188dc
 8002c88:	20007798 	.word	0x20007798

08002c8c <PointingRadial>:

void PointingRadial(){
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
	for(int i = 0; i < 7; i++) {
 8002c92:	2300      	movs	r3, #0
 8002c94:	607b      	str	r3, [r7, #4]
 8002c96:	e017      	b.n	8002cc8 <PointingRadial+0x3c>
		servo_angle(&htim2, TIM_CHANNEL_1, 12); // poking 8
 8002c98:	220c      	movs	r2, #12
 8002c9a:	2100      	movs	r1, #0
 8002c9c:	480e      	ldr	r0, [pc, #56]	@ (8002cd8 <PointingRadial+0x4c>)
 8002c9e:	f001 f8ab 	bl	8003df8 <servo_angle>
		HAL_Delay(5000);
 8002ca2:	f241 3088 	movw	r0, #5000	@ 0x1388
 8002ca6:	f001 fd87 	bl	80047b8 <HAL_Delay>
		servo_angle(&htim2, TIM_CHANNEL_1, 0); // poking 8
 8002caa:	2200      	movs	r2, #0
 8002cac:	2100      	movs	r1, #0
 8002cae:	480a      	ldr	r0, [pc, #40]	@ (8002cd8 <PointingRadial+0x4c>)
 8002cb0:	f001 f8a2 	bl	8003df8 <servo_angle>
	    stepRev(15);
 8002cb4:	200f      	movs	r0, #15
 8002cb6:	f000 ffdb 	bl	8003c70 <stepRev>
		HAL_Delay(5000);
 8002cba:	f241 3088 	movw	r0, #5000	@ 0x1388
 8002cbe:	f001 fd7b 	bl	80047b8 <HAL_Delay>
	for(int i = 0; i < 7; i++) {
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	607b      	str	r3, [r7, #4]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2b06      	cmp	r3, #6
 8002ccc:	dde4      	ble.n	8002c98 <PointingRadial+0xc>
	}

	// 0 15 30 45 60 75 90
}
 8002cce:	bf00      	nop
 8002cd0:	bf00      	nop
 8002cd2:	3708      	adds	r7, #8
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	20007798 	.word	0x20007798

08002cdc <InitializaionCalibrationCommand>:
void InitializaionCalibrationCommand()
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b086      	sub	sp, #24
 8002ce0:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "InitializationCommand\n\r"), 100);
 8002ce2:	49b2      	ldr	r1, [pc, #712]	@ (8002fac <InitializaionCalibrationCommand+0x2d0>)
 8002ce4:	48b2      	ldr	r0, [pc, #712]	@ (8002fb0 <InitializaionCalibrationCommand+0x2d4>)
 8002ce6:	f010 fd1d 	bl	8013724 <siprintf>
 8002cea:	4603      	mov	r3, r0
 8002cec:	b29a      	uxth	r2, r3
 8002cee:	2364      	movs	r3, #100	@ 0x64
 8002cf0:	49af      	ldr	r1, [pc, #700]	@ (8002fb0 <InitializaionCalibrationCommand+0x2d4>)
 8002cf2:	48b0      	ldr	r0, [pc, #704]	@ (8002fb4 <InitializaionCalibrationCommand+0x2d8>)
 8002cf4:	f005 ffa0 	bl	8008c38 <HAL_UART_Transmit>

	ResetAllDevices();
 8002cf8:	f001 fc32 	bl	8004560 <ResetAllDevices>
  	for (int i = 0; i < NUM_SENSOR; i++) {
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	617b      	str	r3, [r7, #20]
 8002d00:	e10a      	b.n	8002f18 <InitializaionCalibrationCommand+0x23c>
  	    uint8_t q = i / 12;
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	4aac      	ldr	r2, [pc, #688]	@ (8002fb8 <InitializaionCalibrationCommand+0x2dc>)
 8002d06:	fb82 1203 	smull	r1, r2, r2, r3
 8002d0a:	1052      	asrs	r2, r2, #1
 8002d0c:	17db      	asrs	r3, r3, #31
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	70fb      	strb	r3, [r7, #3]
  	    uint8_t r = i % 12;
 8002d12:	697a      	ldr	r2, [r7, #20]
 8002d14:	4ba8      	ldr	r3, [pc, #672]	@ (8002fb8 <InitializaionCalibrationCommand+0x2dc>)
 8002d16:	fb83 1302 	smull	r1, r3, r3, r2
 8002d1a:	1059      	asrs	r1, r3, #1
 8002d1c:	17d3      	asrs	r3, r2, #31
 8002d1e:	1ac9      	subs	r1, r1, r3
 8002d20:	460b      	mov	r3, r1
 8002d22:	005b      	lsls	r3, r3, #1
 8002d24:	440b      	add	r3, r1
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	1ad1      	subs	r1, r2, r3
 8002d2a:	460b      	mov	r3, r1
 8002d2c:	70bb      	strb	r3, [r7, #2]
  	    uint8_t active_device = q * 2 + (r >= 8 ? 1 : 0);
 8002d2e:	78fb      	ldrb	r3, [r7, #3]
 8002d30:	005b      	lsls	r3, r3, #1
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	78ba      	ldrb	r2, [r7, #2]
 8002d36:	2a07      	cmp	r2, #7
 8002d38:	bf8c      	ite	hi
 8002d3a:	2201      	movhi	r2, #1
 8002d3c:	2200      	movls	r2, #0
 8002d3e:	b2d2      	uxtb	r2, r2
 8002d40:	4413      	add	r3, r2
 8002d42:	707b      	strb	r3, [r7, #1]
  	    uint8_t channel = (r >= 8) ? r - 8 : r;
 8002d44:	78bb      	ldrb	r3, [r7, #2]
 8002d46:	2b07      	cmp	r3, #7
 8002d48:	d903      	bls.n	8002d52 <InitializaionCalibrationCommand+0x76>
 8002d4a:	78bb      	ldrb	r3, [r7, #2]
 8002d4c:	3b08      	subs	r3, #8
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	e000      	b.n	8002d54 <InitializaionCalibrationCommand+0x78>
 8002d52:	78bb      	ldrb	r3, [r7, #2]
 8002d54:	703b      	strb	r3, [r7, #0]

        ResetDevicesExcept(active_device);
 8002d56:	787b      	ldrb	r3, [r7, #1]
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f001 fc2b 	bl	80045b4 <ResetDevicesExcept>
        setActiveTcaChannel(active_device,channel);
 8002d5e:	783a      	ldrb	r2, [r7, #0]
 8002d60:	787b      	ldrb	r3, [r7, #1]
 8002d62:	4611      	mov	r1, r2
 8002d64:	4618      	mov	r0, r3
 8002d66:	f001 fc55 	bl	8004614 <setActiveTcaChannel>

  		Dev = &vl53l0x_s[i];
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8002d70:	fb02 f303 	mul.w	r3, r2, r3
 8002d74:	4a91      	ldr	r2, [pc, #580]	@ (8002fbc <InitializaionCalibrationCommand+0x2e0>)
 8002d76:	4413      	add	r3, r2
 8002d78:	4a91      	ldr	r2, [pc, #580]	@ (8002fc0 <InitializaionCalibrationCommand+0x2e4>)
 8002d7a:	6013      	str	r3, [r2, #0]
  		Dev->I2cHandle = &hi2c1;
 8002d7c:	4b90      	ldr	r3, [pc, #576]	@ (8002fc0 <InitializaionCalibrationCommand+0x2e4>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a90      	ldr	r2, [pc, #576]	@ (8002fc4 <InitializaionCalibrationCommand+0x2e8>)
 8002d82:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  		Dev->I2cDevAddr = VL53L0X_ADDR;
 8002d86:	4b8e      	ldr	r3, [pc, #568]	@ (8002fc0 <InitializaionCalibrationCommand+0x2e4>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2252      	movs	r2, #82	@ 0x52
 8002d8c:	f883 2160 	strb.w	r2, [r3, #352]	@ 0x160

  		VL53L0X_WaitDeviceBooted( Dev );
 8002d90:	4b8b      	ldr	r3, [pc, #556]	@ (8002fc0 <InitializaionCalibrationCommand+0x2e4>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f007 fb3f 	bl	800a418 <VL53L0X_WaitDeviceBooted>
  		VL53L0X_DataInit( Dev );
 8002d9a:	4b89      	ldr	r3, [pc, #548]	@ (8002fc0 <InitializaionCalibrationCommand+0x2e4>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f007 f856 	bl	8009e50 <VL53L0X_DataInit>
  		VL53L0X_StaticInit( Dev );
 8002da4:	4b86      	ldr	r3, [pc, #536]	@ (8002fc0 <InitializaionCalibrationCommand+0x2e4>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4618      	mov	r0, r3
 8002daa:	f007 f9b5 	bl	800a118 <VL53L0X_StaticInit>
  		VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 8002dae:	4b84      	ldr	r3, [pc, #528]	@ (8002fc0 <InitializaionCalibrationCommand+0x2e4>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2101      	movs	r1, #1
 8002db4:	4618      	mov	r0, r3
 8002db6:	f007 fbcd 	bl	800a554 <VL53L0X_SetDeviceMode>

  		VL53L0X_PerformRefSpadManagement( Dev, &refSpadCount[i], &isApertureSpads[i]);
 8002dba:	4b81      	ldr	r3, [pc, #516]	@ (8002fc0 <InitializaionCalibrationCommand+0x2e4>)
 8002dbc:	6818      	ldr	r0, [r3, #0]
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	4a81      	ldr	r2, [pc, #516]	@ (8002fc8 <InitializaionCalibrationCommand+0x2ec>)
 8002dc4:	1899      	adds	r1, r3, r2
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	4a80      	ldr	r2, [pc, #512]	@ (8002fcc <InitializaionCalibrationCommand+0x2f0>)
 8002dca:	4413      	add	r3, r2
 8002dcc:	461a      	mov	r2, r3
 8002dce:	f008 fcf2 	bl	800b7b6 <VL53L0X_PerformRefSpadManagement>
  		VL53L0X_PerformRefCalibration( Dev, &VhvSettings[i], &PhaseCal[i]);
 8002dd2:	4b7b      	ldr	r3, [pc, #492]	@ (8002fc0 <InitializaionCalibrationCommand+0x2e4>)
 8002dd4:	6818      	ldr	r0, [r3, #0]
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	4a7d      	ldr	r2, [pc, #500]	@ (8002fd0 <InitializaionCalibrationCommand+0x2f4>)
 8002dda:	1899      	adds	r1, r3, r2
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	4a7d      	ldr	r2, [pc, #500]	@ (8002fd4 <InitializaionCalibrationCommand+0x2f8>)
 8002de0:	4413      	add	r3, r2
 8002de2:	461a      	mov	r2, r3
 8002de4:	f008 f84e 	bl	800ae84 <VL53L0X_PerformRefCalibration>

  		refSpadCountHost[i] = refSpadCount[i];
 8002de8:	4a77      	ldr	r2, [pc, #476]	@ (8002fc8 <InitializaionCalibrationCommand+0x2ec>)
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002df0:	4979      	ldr	r1, [pc, #484]	@ (8002fd8 <InitializaionCalibrationCommand+0x2fc>)
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  		isApertureSpadsHost[i] = isApertureSpads[i];
 8002df8:	4a74      	ldr	r2, [pc, #464]	@ (8002fcc <InitializaionCalibrationCommand+0x2f0>)
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	7819      	ldrb	r1, [r3, #0]
 8002e00:	4a76      	ldr	r2, [pc, #472]	@ (8002fdc <InitializaionCalibrationCommand+0x300>)
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	4413      	add	r3, r2
 8002e06:	460a      	mov	r2, r1
 8002e08:	701a      	strb	r2, [r3, #0]
  		VhvSettingsHost[i] = VhvSettings[i];
 8002e0a:	4a71      	ldr	r2, [pc, #452]	@ (8002fd0 <InitializaionCalibrationCommand+0x2f4>)
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	4413      	add	r3, r2
 8002e10:	7819      	ldrb	r1, [r3, #0]
 8002e12:	4a73      	ldr	r2, [pc, #460]	@ (8002fe0 <InitializaionCalibrationCommand+0x304>)
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	4413      	add	r3, r2
 8002e18:	460a      	mov	r2, r1
 8002e1a:	701a      	strb	r2, [r3, #0]
  		PhaseCalHost[i] = PhaseCal[i];
 8002e1c:	4a6d      	ldr	r2, [pc, #436]	@ (8002fd4 <InitializaionCalibrationCommand+0x2f8>)
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	4413      	add	r3, r2
 8002e22:	7819      	ldrb	r1, [r3, #0]
 8002e24:	4a6f      	ldr	r2, [pc, #444]	@ (8002fe4 <InitializaionCalibrationCommand+0x308>)
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	4413      	add	r3, r2
 8002e2a:	460a      	mov	r2, r1
 8002e2c:	701a      	strb	r2, [r3, #0]

  		VL53L0X_SetLimitCheckEnable( Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 8002e2e:	4b64      	ldr	r3, [pc, #400]	@ (8002fc0 <InitializaionCalibrationCommand+0x2e4>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2201      	movs	r2, #1
 8002e34:	2100      	movs	r1, #0
 8002e36:	4618      	mov	r0, r3
 8002e38:	f007 fe1e 	bl	800aa78 <VL53L0X_SetLimitCheckEnable>
  		VL53L0X_SetLimitCheckEnable( Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 8002e3c:	4b60      	ldr	r3, [pc, #384]	@ (8002fc0 <InitializaionCalibrationCommand+0x2e4>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2201      	movs	r2, #1
 8002e42:	2101      	movs	r1, #1
 8002e44:	4618      	mov	r0, r3
 8002e46:	f007 fe17 	bl	800aa78 <VL53L0X_SetLimitCheckEnable>
  		VL53L0X_SetLimitCheckValue( Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 8002e4a:	4b5d      	ldr	r3, [pc, #372]	@ (8002fc0 <InitializaionCalibrationCommand+0x2e4>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f641 1299 	movw	r2, #6553	@ 0x1999
 8002e52:	2101      	movs	r1, #1
 8002e54:	4618      	mov	r0, r3
 8002e56:	f007 febf 	bl	800abd8 <VL53L0X_SetLimitCheckValue>
  		VL53L0X_SetLimitCheckValue( Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 8002e5a:	4b59      	ldr	r3, [pc, #356]	@ (8002fc0 <InitializaionCalibrationCommand+0x2e4>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 8002e62:	2100      	movs	r1, #0
 8002e64:	4618      	mov	r0, r3
 8002e66:	f007 feb7 	bl	800abd8 <VL53L0X_SetLimitCheckValue>
  		VL53L0X_SetMeasurementTimingBudgetMicroSeconds( Dev, 100000);
 8002e6a:	4b55      	ldr	r3, [pc, #340]	@ (8002fc0 <InitializaionCalibrationCommand+0x2e4>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	495e      	ldr	r1, [pc, #376]	@ (8002fe8 <InitializaionCalibrationCommand+0x30c>)
 8002e70:	4618      	mov	r0, r3
 8002e72:	f007 fbcd 	bl	800a610 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
  		VL53L0X_SetVcselPulsePeriod( Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 8002e76:	4b52      	ldr	r3, [pc, #328]	@ (8002fc0 <InitializaionCalibrationCommand+0x2e4>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	2212      	movs	r2, #18
 8002e7c:	2100      	movs	r1, #0
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f007 fbec 	bl	800a65c <VL53L0X_SetVcselPulsePeriod>
  		VL53L0X_SetVcselPulsePeriod( Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 8002e84:	4b4e      	ldr	r3, [pc, #312]	@ (8002fc0 <InitializaionCalibrationCommand+0x2e4>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	220e      	movs	r2, #14
 8002e8a:	2101      	movs	r1, #1
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f007 fbe5 	bl	800a65c <VL53L0X_SetVcselPulsePeriod>

		Kalman_Init(&filters[i], Q, R, P, 0);  // Q, R, P
 8002e92:	697a      	ldr	r2, [r7, #20]
 8002e94:	4613      	mov	r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	4413      	add	r3, r2
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	4a53      	ldr	r2, [pc, #332]	@ (8002fec <InitializaionCalibrationCommand+0x310>)
 8002e9e:	4413      	add	r3, r2
 8002ea0:	4a53      	ldr	r2, [pc, #332]	@ (8002ff0 <InitializaionCalibrationCommand+0x314>)
 8002ea2:	edd2 7a00 	vldr	s15, [r2]
 8002ea6:	4a53      	ldr	r2, [pc, #332]	@ (8002ff4 <InitializaionCalibrationCommand+0x318>)
 8002ea8:	ed92 7a00 	vldr	s14, [r2]
 8002eac:	4a52      	ldr	r2, [pc, #328]	@ (8002ff8 <InitializaionCalibrationCommand+0x31c>)
 8002eae:	edd2 6a00 	vldr	s13, [r2]
 8002eb2:	eddf 1a52 	vldr	s3, [pc, #328]	@ 8002ffc <InitializaionCalibrationCommand+0x320>
 8002eb6:	eeb0 1a66 	vmov.f32	s2, s13
 8002eba:	eef0 0a47 	vmov.f32	s1, s14
 8002ebe:	eeb0 0a67 	vmov.f32	s0, s15
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f000 fbbe 	bl	8003644 <Kalman_Init>

 		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%02d ",i), 100);
 8002ec8:	697a      	ldr	r2, [r7, #20]
 8002eca:	494d      	ldr	r1, [pc, #308]	@ (8003000 <InitializaionCalibrationCommand+0x324>)
 8002ecc:	4838      	ldr	r0, [pc, #224]	@ (8002fb0 <InitializaionCalibrationCommand+0x2d4>)
 8002ece:	f010 fc29 	bl	8013724 <siprintf>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	b29a      	uxth	r2, r3
 8002ed6:	2364      	movs	r3, #100	@ 0x64
 8002ed8:	4935      	ldr	r1, [pc, #212]	@ (8002fb0 <InitializaionCalibrationCommand+0x2d4>)
 8002eda:	4836      	ldr	r0, [pc, #216]	@ (8002fb4 <InitializaionCalibrationCommand+0x2d8>)
 8002edc:	f005 feac 	bl	8008c38 <HAL_UART_Transmit>
 		if(i%12 ==11){HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "\n\r"), 100);}
 8002ee0:	6979      	ldr	r1, [r7, #20]
 8002ee2:	4b35      	ldr	r3, [pc, #212]	@ (8002fb8 <InitializaionCalibrationCommand+0x2dc>)
 8002ee4:	fb83 2301 	smull	r2, r3, r3, r1
 8002ee8:	105a      	asrs	r2, r3, #1
 8002eea:	17cb      	asrs	r3, r1, #31
 8002eec:	1ad2      	subs	r2, r2, r3
 8002eee:	4613      	mov	r3, r2
 8002ef0:	005b      	lsls	r3, r3, #1
 8002ef2:	4413      	add	r3, r2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	1aca      	subs	r2, r1, r3
 8002ef8:	2a0b      	cmp	r2, #11
 8002efa:	d10a      	bne.n	8002f12 <InitializaionCalibrationCommand+0x236>
 8002efc:	4941      	ldr	r1, [pc, #260]	@ (8003004 <InitializaionCalibrationCommand+0x328>)
 8002efe:	482c      	ldr	r0, [pc, #176]	@ (8002fb0 <InitializaionCalibrationCommand+0x2d4>)
 8002f00:	f010 fc10 	bl	8013724 <siprintf>
 8002f04:	4603      	mov	r3, r0
 8002f06:	b29a      	uxth	r2, r3
 8002f08:	2364      	movs	r3, #100	@ 0x64
 8002f0a:	4929      	ldr	r1, [pc, #164]	@ (8002fb0 <InitializaionCalibrationCommand+0x2d4>)
 8002f0c:	4829      	ldr	r0, [pc, #164]	@ (8002fb4 <InitializaionCalibrationCommand+0x2d8>)
 8002f0e:	f005 fe93 	bl	8008c38 <HAL_UART_Transmit>
  	for (int i = 0; i < NUM_SENSOR; i++) {
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	3301      	adds	r3, #1
 8002f16:	617b      	str	r3, [r7, #20]
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	2b2f      	cmp	r3, #47	@ 0x2f
 8002f1c:	f77f aef1 	ble.w	8002d02 <InitializaionCalibrationCommand+0x26>
  	}


	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "uint32_t refSpadCountHost[NUM_SENSOR]={"), 100);
 8002f20:	4939      	ldr	r1, [pc, #228]	@ (8003008 <InitializaionCalibrationCommand+0x32c>)
 8002f22:	4823      	ldr	r0, [pc, #140]	@ (8002fb0 <InitializaionCalibrationCommand+0x2d4>)
 8002f24:	f010 fbfe 	bl	8013724 <siprintf>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	b29a      	uxth	r2, r3
 8002f2c:	2364      	movs	r3, #100	@ 0x64
 8002f2e:	4920      	ldr	r1, [pc, #128]	@ (8002fb0 <InitializaionCalibrationCommand+0x2d4>)
 8002f30:	4820      	ldr	r0, [pc, #128]	@ (8002fb4 <InitializaionCalibrationCommand+0x2d8>)
 8002f32:	f005 fe81 	bl	8008c38 <HAL_UART_Transmit>
	for (int i = 0; i < NUM_SENSOR; i++){
 8002f36:	2300      	movs	r3, #0
 8002f38:	613b      	str	r3, [r7, #16]
 8002f3a:	e026      	b.n	8002f8a <InitializaionCalibrationCommand+0x2ae>
		if(i < NUM_SENSOR - 1){
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	2b2e      	cmp	r3, #46	@ 0x2e
 8002f40:	dc10      	bgt.n	8002f64 <InitializaionCalibrationCommand+0x288>
			HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%lu,",refSpadCount[i]), 100);
 8002f42:	4a21      	ldr	r2, [pc, #132]	@ (8002fc8 <InitializaionCalibrationCommand+0x2ec>)
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	492f      	ldr	r1, [pc, #188]	@ (800300c <InitializaionCalibrationCommand+0x330>)
 8002f4e:	4818      	ldr	r0, [pc, #96]	@ (8002fb0 <InitializaionCalibrationCommand+0x2d4>)
 8002f50:	f010 fbe8 	bl	8013724 <siprintf>
 8002f54:	4603      	mov	r3, r0
 8002f56:	b29a      	uxth	r2, r3
 8002f58:	2364      	movs	r3, #100	@ 0x64
 8002f5a:	4915      	ldr	r1, [pc, #84]	@ (8002fb0 <InitializaionCalibrationCommand+0x2d4>)
 8002f5c:	4815      	ldr	r0, [pc, #84]	@ (8002fb4 <InitializaionCalibrationCommand+0x2d8>)
 8002f5e:	f005 fe6b 	bl	8008c38 <HAL_UART_Transmit>
 8002f62:	e00f      	b.n	8002f84 <InitializaionCalibrationCommand+0x2a8>
		} else {
			HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%lu};\n",refSpadCount[i]), 100);
 8002f64:	4a18      	ldr	r2, [pc, #96]	@ (8002fc8 <InitializaionCalibrationCommand+0x2ec>)
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	4928      	ldr	r1, [pc, #160]	@ (8003010 <InitializaionCalibrationCommand+0x334>)
 8002f70:	480f      	ldr	r0, [pc, #60]	@ (8002fb0 <InitializaionCalibrationCommand+0x2d4>)
 8002f72:	f010 fbd7 	bl	8013724 <siprintf>
 8002f76:	4603      	mov	r3, r0
 8002f78:	b29a      	uxth	r2, r3
 8002f7a:	2364      	movs	r3, #100	@ 0x64
 8002f7c:	490c      	ldr	r1, [pc, #48]	@ (8002fb0 <InitializaionCalibrationCommand+0x2d4>)
 8002f7e:	480d      	ldr	r0, [pc, #52]	@ (8002fb4 <InitializaionCalibrationCommand+0x2d8>)
 8002f80:	f005 fe5a 	bl	8008c38 <HAL_UART_Transmit>
	for (int i = 0; i < NUM_SENSOR; i++){
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	3301      	adds	r3, #1
 8002f88:	613b      	str	r3, [r7, #16]
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	2b2f      	cmp	r3, #47	@ 0x2f
 8002f8e:	ddd5      	ble.n	8002f3c <InitializaionCalibrationCommand+0x260>
		}
	}

	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "uint8_t isApertureSpadsHost[NUM_SENSOR]={"), 100);
 8002f90:	4920      	ldr	r1, [pc, #128]	@ (8003014 <InitializaionCalibrationCommand+0x338>)
 8002f92:	4807      	ldr	r0, [pc, #28]	@ (8002fb0 <InitializaionCalibrationCommand+0x2d4>)
 8002f94:	f010 fbc6 	bl	8013724 <siprintf>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	b29a      	uxth	r2, r3
 8002f9c:	2364      	movs	r3, #100	@ 0x64
 8002f9e:	4904      	ldr	r1, [pc, #16]	@ (8002fb0 <InitializaionCalibrationCommand+0x2d4>)
 8002fa0:	4804      	ldr	r0, [pc, #16]	@ (8002fb4 <InitializaionCalibrationCommand+0x2d8>)
 8002fa2:	f005 fe49 	bl	8008c38 <HAL_UART_Transmit>
	for (int i = 0; i < NUM_SENSOR; i++){
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	60fb      	str	r3, [r7, #12]
 8002faa:	e05c      	b.n	8003066 <InitializaionCalibrationCommand+0x38a>
 8002fac:	080188ec 	.word	0x080188ec
 8002fb0:	20007870 	.word	0x20007870
 8002fb4:	200077e8 	.word	0x200077e8
 8002fb8:	2aaaaaab 	.word	0x2aaaaaab
 8002fbc:	20007a60 	.word	0x20007a60
 8002fc0:	2000c560 	.word	0x2000c560
 8002fc4:	200072a0 	.word	0x200072a0
 8002fc8:	20007910 	.word	0x20007910
 8002fcc:	200079d0 	.word	0x200079d0
 8002fd0:	20007a00 	.word	0x20007a00
 8002fd4:	20007a30 	.word	0x20007a30
 8002fd8:	20000010 	.word	0x20000010
 8002fdc:	200000d0 	.word	0x200000d0
 8002fe0:	20000100 	.word	0x20000100
 8002fe4:	20000130 	.word	0x20000130
 8002fe8:	000186a0 	.word	0x000186a0
 8002fec:	200072f4 	.word	0x200072f4
 8002ff0:	20000000 	.word	0x20000000
 8002ff4:	20000004 	.word	0x20000004
 8002ff8:	20000008 	.word	0x20000008
 8002ffc:	00000000 	.word	0x00000000
 8003000:	080187e8 	.word	0x080187e8
 8003004:	080187f8 	.word	0x080187f8
 8003008:	08018904 	.word	0x08018904
 800300c:	0801892c 	.word	0x0801892c
 8003010:	08018934 	.word	0x08018934
 8003014:	0801893c 	.word	0x0801893c
		if(i < NUM_SENSOR - 1){
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2b2e      	cmp	r3, #46	@ 0x2e
 800301c:	dc10      	bgt.n	8003040 <InitializaionCalibrationCommand+0x364>
			HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d,",isApertureSpads[i]), 100);
 800301e:	4a4e      	ldr	r2, [pc, #312]	@ (8003158 <InitializaionCalibrationCommand+0x47c>)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	4413      	add	r3, r2
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	461a      	mov	r2, r3
 8003028:	494c      	ldr	r1, [pc, #304]	@ (800315c <InitializaionCalibrationCommand+0x480>)
 800302a:	484d      	ldr	r0, [pc, #308]	@ (8003160 <InitializaionCalibrationCommand+0x484>)
 800302c:	f010 fb7a 	bl	8013724 <siprintf>
 8003030:	4603      	mov	r3, r0
 8003032:	b29a      	uxth	r2, r3
 8003034:	2364      	movs	r3, #100	@ 0x64
 8003036:	494a      	ldr	r1, [pc, #296]	@ (8003160 <InitializaionCalibrationCommand+0x484>)
 8003038:	484a      	ldr	r0, [pc, #296]	@ (8003164 <InitializaionCalibrationCommand+0x488>)
 800303a:	f005 fdfd 	bl	8008c38 <HAL_UART_Transmit>
 800303e:	e00f      	b.n	8003060 <InitializaionCalibrationCommand+0x384>
		} else {
			HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d};\n",isApertureSpads[i]), 100);
 8003040:	4a45      	ldr	r2, [pc, #276]	@ (8003158 <InitializaionCalibrationCommand+0x47c>)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	4413      	add	r3, r2
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	461a      	mov	r2, r3
 800304a:	4947      	ldr	r1, [pc, #284]	@ (8003168 <InitializaionCalibrationCommand+0x48c>)
 800304c:	4844      	ldr	r0, [pc, #272]	@ (8003160 <InitializaionCalibrationCommand+0x484>)
 800304e:	f010 fb69 	bl	8013724 <siprintf>
 8003052:	4603      	mov	r3, r0
 8003054:	b29a      	uxth	r2, r3
 8003056:	2364      	movs	r3, #100	@ 0x64
 8003058:	4941      	ldr	r1, [pc, #260]	@ (8003160 <InitializaionCalibrationCommand+0x484>)
 800305a:	4842      	ldr	r0, [pc, #264]	@ (8003164 <InitializaionCalibrationCommand+0x488>)
 800305c:	f005 fdec 	bl	8008c38 <HAL_UART_Transmit>
	for (int i = 0; i < NUM_SENSOR; i++){
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	3301      	adds	r3, #1
 8003064:	60fb      	str	r3, [r7, #12]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2b2f      	cmp	r3, #47	@ 0x2f
 800306a:	ddd5      	ble.n	8003018 <InitializaionCalibrationCommand+0x33c>
		}
	}

	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "uint8_t VhvSettingsHost[NUM_SENSOR]={"), 100);
 800306c:	493f      	ldr	r1, [pc, #252]	@ (800316c <InitializaionCalibrationCommand+0x490>)
 800306e:	483c      	ldr	r0, [pc, #240]	@ (8003160 <InitializaionCalibrationCommand+0x484>)
 8003070:	f010 fb58 	bl	8013724 <siprintf>
 8003074:	4603      	mov	r3, r0
 8003076:	b29a      	uxth	r2, r3
 8003078:	2364      	movs	r3, #100	@ 0x64
 800307a:	4939      	ldr	r1, [pc, #228]	@ (8003160 <InitializaionCalibrationCommand+0x484>)
 800307c:	4839      	ldr	r0, [pc, #228]	@ (8003164 <InitializaionCalibrationCommand+0x488>)
 800307e:	f005 fddb 	bl	8008c38 <HAL_UART_Transmit>
	for (int i = 0; i < NUM_SENSOR; i++){
 8003082:	2300      	movs	r3, #0
 8003084:	60bb      	str	r3, [r7, #8]
 8003086:	e026      	b.n	80030d6 <InitializaionCalibrationCommand+0x3fa>
		if(i < NUM_SENSOR - 1){
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	2b2e      	cmp	r3, #46	@ 0x2e
 800308c:	dc10      	bgt.n	80030b0 <InitializaionCalibrationCommand+0x3d4>
			HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d,",VhvSettings[i]), 100);
 800308e:	4a38      	ldr	r2, [pc, #224]	@ (8003170 <InitializaionCalibrationCommand+0x494>)
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	4413      	add	r3, r2
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	461a      	mov	r2, r3
 8003098:	4930      	ldr	r1, [pc, #192]	@ (800315c <InitializaionCalibrationCommand+0x480>)
 800309a:	4831      	ldr	r0, [pc, #196]	@ (8003160 <InitializaionCalibrationCommand+0x484>)
 800309c:	f010 fb42 	bl	8013724 <siprintf>
 80030a0:	4603      	mov	r3, r0
 80030a2:	b29a      	uxth	r2, r3
 80030a4:	2364      	movs	r3, #100	@ 0x64
 80030a6:	492e      	ldr	r1, [pc, #184]	@ (8003160 <InitializaionCalibrationCommand+0x484>)
 80030a8:	482e      	ldr	r0, [pc, #184]	@ (8003164 <InitializaionCalibrationCommand+0x488>)
 80030aa:	f005 fdc5 	bl	8008c38 <HAL_UART_Transmit>
 80030ae:	e00f      	b.n	80030d0 <InitializaionCalibrationCommand+0x3f4>
		} else {
			HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d};\n",VhvSettings[i]), 100);
 80030b0:	4a2f      	ldr	r2, [pc, #188]	@ (8003170 <InitializaionCalibrationCommand+0x494>)
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	4413      	add	r3, r2
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	461a      	mov	r2, r3
 80030ba:	492b      	ldr	r1, [pc, #172]	@ (8003168 <InitializaionCalibrationCommand+0x48c>)
 80030bc:	4828      	ldr	r0, [pc, #160]	@ (8003160 <InitializaionCalibrationCommand+0x484>)
 80030be:	f010 fb31 	bl	8013724 <siprintf>
 80030c2:	4603      	mov	r3, r0
 80030c4:	b29a      	uxth	r2, r3
 80030c6:	2364      	movs	r3, #100	@ 0x64
 80030c8:	4925      	ldr	r1, [pc, #148]	@ (8003160 <InitializaionCalibrationCommand+0x484>)
 80030ca:	4826      	ldr	r0, [pc, #152]	@ (8003164 <InitializaionCalibrationCommand+0x488>)
 80030cc:	f005 fdb4 	bl	8008c38 <HAL_UART_Transmit>
	for (int i = 0; i < NUM_SENSOR; i++){
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	3301      	adds	r3, #1
 80030d4:	60bb      	str	r3, [r7, #8]
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	2b2f      	cmp	r3, #47	@ 0x2f
 80030da:	ddd5      	ble.n	8003088 <InitializaionCalibrationCommand+0x3ac>
		}
	}

	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "uint8_t PhaseCalHost[NUM_SENSOR]={"), 100);
 80030dc:	4925      	ldr	r1, [pc, #148]	@ (8003174 <InitializaionCalibrationCommand+0x498>)
 80030de:	4820      	ldr	r0, [pc, #128]	@ (8003160 <InitializaionCalibrationCommand+0x484>)
 80030e0:	f010 fb20 	bl	8013724 <siprintf>
 80030e4:	4603      	mov	r3, r0
 80030e6:	b29a      	uxth	r2, r3
 80030e8:	2364      	movs	r3, #100	@ 0x64
 80030ea:	491d      	ldr	r1, [pc, #116]	@ (8003160 <InitializaionCalibrationCommand+0x484>)
 80030ec:	481d      	ldr	r0, [pc, #116]	@ (8003164 <InitializaionCalibrationCommand+0x488>)
 80030ee:	f005 fda3 	bl	8008c38 <HAL_UART_Transmit>
	for (int i = 0; i < NUM_SENSOR; i++){
 80030f2:	2300      	movs	r3, #0
 80030f4:	607b      	str	r3, [r7, #4]
 80030f6:	e026      	b.n	8003146 <InitializaionCalibrationCommand+0x46a>
		if(i < NUM_SENSOR - 1){
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2b2e      	cmp	r3, #46	@ 0x2e
 80030fc:	dc10      	bgt.n	8003120 <InitializaionCalibrationCommand+0x444>
			HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d,",PhaseCal[i]), 100);
 80030fe:	4a1e      	ldr	r2, [pc, #120]	@ (8003178 <InitializaionCalibrationCommand+0x49c>)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4413      	add	r3, r2
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	461a      	mov	r2, r3
 8003108:	4914      	ldr	r1, [pc, #80]	@ (800315c <InitializaionCalibrationCommand+0x480>)
 800310a:	4815      	ldr	r0, [pc, #84]	@ (8003160 <InitializaionCalibrationCommand+0x484>)
 800310c:	f010 fb0a 	bl	8013724 <siprintf>
 8003110:	4603      	mov	r3, r0
 8003112:	b29a      	uxth	r2, r3
 8003114:	2364      	movs	r3, #100	@ 0x64
 8003116:	4912      	ldr	r1, [pc, #72]	@ (8003160 <InitializaionCalibrationCommand+0x484>)
 8003118:	4812      	ldr	r0, [pc, #72]	@ (8003164 <InitializaionCalibrationCommand+0x488>)
 800311a:	f005 fd8d 	bl	8008c38 <HAL_UART_Transmit>
 800311e:	e00f      	b.n	8003140 <InitializaionCalibrationCommand+0x464>
		} else {
			HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d};\n",PhaseCal[i]), 100);
 8003120:	4a15      	ldr	r2, [pc, #84]	@ (8003178 <InitializaionCalibrationCommand+0x49c>)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4413      	add	r3, r2
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	461a      	mov	r2, r3
 800312a:	490f      	ldr	r1, [pc, #60]	@ (8003168 <InitializaionCalibrationCommand+0x48c>)
 800312c:	480c      	ldr	r0, [pc, #48]	@ (8003160 <InitializaionCalibrationCommand+0x484>)
 800312e:	f010 faf9 	bl	8013724 <siprintf>
 8003132:	4603      	mov	r3, r0
 8003134:	b29a      	uxth	r2, r3
 8003136:	2364      	movs	r3, #100	@ 0x64
 8003138:	4909      	ldr	r1, [pc, #36]	@ (8003160 <InitializaionCalibrationCommand+0x484>)
 800313a:	480a      	ldr	r0, [pc, #40]	@ (8003164 <InitializaionCalibrationCommand+0x488>)
 800313c:	f005 fd7c 	bl	8008c38 <HAL_UART_Transmit>
	for (int i = 0; i < NUM_SENSOR; i++){
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	3301      	adds	r3, #1
 8003144:	607b      	str	r3, [r7, #4]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2b2f      	cmp	r3, #47	@ 0x2f
 800314a:	ddd5      	ble.n	80030f8 <InitializaionCalibrationCommand+0x41c>
		}
	}
}
 800314c:	bf00      	nop
 800314e:	bf00      	nop
 8003150:	3718      	adds	r7, #24
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	200079d0 	.word	0x200079d0
 800315c:	08018968 	.word	0x08018968
 8003160:	20007870 	.word	0x20007870
 8003164:	200077e8 	.word	0x200077e8
 8003168:	0801896c 	.word	0x0801896c
 800316c:	08018974 	.word	0x08018974
 8003170:	20007a00 	.word	0x20007a00
 8003174:	0801899c 	.word	0x0801899c
 8003178:	20007a30 	.word	0x20007a30

0800317c <AutoI2CCommand>:

void AutoI2CCommand(){
 800317c:	b580      	push	{r7, lr}
 800317e:	b08e      	sub	sp, #56	@ 0x38
 8003180:	af02      	add	r7, sp, #8

    HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "Auto Command \r\n"), 100);
 8003182:	49a6      	ldr	r1, [pc, #664]	@ (800341c <AutoI2CCommand+0x2a0>)
 8003184:	48a6      	ldr	r0, [pc, #664]	@ (8003420 <AutoI2CCommand+0x2a4>)
 8003186:	f010 facd 	bl	8013724 <siprintf>
 800318a:	4603      	mov	r3, r0
 800318c:	b29a      	uxth	r2, r3
 800318e:	2364      	movs	r3, #100	@ 0x64
 8003190:	49a3      	ldr	r1, [pc, #652]	@ (8003420 <AutoI2CCommand+0x2a4>)
 8003192:	48a4      	ldr	r0, [pc, #656]	@ (8003424 <AutoI2CCommand+0x2a8>)
 8003194:	f005 fd50 	bl	8008c38 <HAL_UART_Transmit>

    SetI2CCommand();
 8003198:	f7fe faf0 	bl	800177c <SetI2CCommand>
    SensorI2CCommand();
 800319c:	f7fe f9f6 	bl	800158c <SensorI2CCommand>
    ResetAllDevices();
 80031a0:	f001 f9de 	bl	8004560 <ResetAllDevices>
    setOnAllDevices();
 80031a4:	f001 fa58 	bl	8004658 <setOnAllDevices>

    float forceSensorZeroPoint = 0.0f;
 80031a8:	f04f 0300 	mov.w	r3, #0
 80031ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t startTime = 0, endTime = 0;
 80031ae:	2300      	movs	r3, #0
 80031b0:	60fb      	str	r3, [r7, #12]
 80031b2:	2300      	movs	r3, #0
 80031b4:	60bb      	str	r3, [r7, #8]
    uint8_t diffTime = 0;
 80031b6:	2300      	movs	r3, #0
 80031b8:	71fb      	strb	r3, [r7, #7]

    setServoAngle(&htim2, TIM_CHANNEL_1, 0); // 초기 ?��?�� ?���?? ?��?��
 80031ba:	2200      	movs	r2, #0
 80031bc:	2100      	movs	r1, #0
 80031be:	489a      	ldr	r0, [pc, #616]	@ (8003428 <AutoI2CCommand+0x2ac>)
 80031c0:	f000 fe66 	bl	8003e90 <setServoAngle>

    for(int lin = 2; lin < 19; lin++){
 80031c4:	2302      	movs	r3, #2
 80031c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80031c8:	e11f      	b.n	800340a <AutoI2CCommand+0x28e>
        for(int rev = 0; rev < 72; rev++){
 80031ca:	2300      	movs	r3, #0
 80031cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80031ce:	e10b      	b.n	80033e8 <AutoI2CCommand+0x26c>
            for(int r = 20; r <70; r+=10){
 80031d0:	2314      	movs	r3, #20
 80031d2:	623b      	str	r3, [r7, #32]
 80031d4:	e0fe      	b.n	80033d4 <AutoI2CCommand+0x258>
            	setServoAngle(&htim2, TIM_CHANNEL_1, r); // ?��?�� ?��?��
 80031d6:	6a3b      	ldr	r3, [r7, #32]
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	461a      	mov	r2, r3
 80031dc:	2100      	movs	r1, #0
 80031de:	4892      	ldr	r0, [pc, #584]	@ (8003428 <AutoI2CCommand+0x2ac>)
 80031e0:	f000 fe56 	bl	8003e90 <setServoAngle>
                HAL_Delay(r*6+100);
 80031e4:	6a3a      	ldr	r2, [r7, #32]
 80031e6:	4613      	mov	r3, r2
 80031e8:	005b      	lsls	r3, r3, #1
 80031ea:	4413      	add	r3, r2
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	3364      	adds	r3, #100	@ 0x64
 80031f0:	4618      	mov	r0, r3
 80031f2:	f001 fae1 	bl	80047b8 <HAL_Delay>
                int tofHitCount = 0;
 80031f6:	2300      	movs	r3, #0
 80031f8:	61fb      	str	r3, [r7, #28]
                while(tofHitCount < 20){
 80031fa:	e0d2      	b.n	80033a2 <AutoI2CCommand+0x226>
                    uint8_t tofcount = 0;
 80031fc:	2300      	movs	r3, #0
 80031fe:	76fb      	strb	r3, [r7, #27]
					if(lin ==2 && rev ==0 && r == 1){
 8003200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003202:	2b02      	cmp	r3, #2
 8003204:	d112      	bne.n	800322c <AutoI2CCommand+0xb0>
 8003206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003208:	2b00      	cmp	r3, #0
 800320a:	d10f      	bne.n	800322c <AutoI2CCommand+0xb0>
 800320c:	6a3b      	ldr	r3, [r7, #32]
 800320e:	2b01      	cmp	r3, #1
 8003210:	d10c      	bne.n	800322c <AutoI2CCommand+0xb0>
						forceSensorZeroPoint = Read_HX711();
 8003212:	f000 f923 	bl	800345c <Read_HX711>
 8003216:	ee07 0a90 	vmov	s15, r0
 800321a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800321e:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
						Hx711Data = 0;
 8003222:	4b82      	ldr	r3, [pc, #520]	@ (800342c <AutoI2CCommand+0x2b0>)
 8003224:	f04f 0200 	mov.w	r2, #0
 8003228:	601a      	str	r2, [r3, #0]
 800322a:	e00c      	b.n	8003246 <AutoI2CCommand+0xca>
					}else{
						Hx711Data = Read_HX711() - forceSensorZeroPoint;
 800322c:	f000 f916 	bl	800345c <Read_HX711>
 8003230:	ee07 0a90 	vmov	s15, r0
 8003234:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003238:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800323c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003240:	4b7a      	ldr	r3, [pc, #488]	@ (800342c <AutoI2CCommand+0x2b0>)
 8003242:	edc3 7a00 	vstr	s15, [r3]
					}
   					startTime = HAL_GetTick();
 8003246:	f001 faab 	bl	80047a0 <HAL_GetTick>
 800324a:	60f8      	str	r0, [r7, #12]
   					for (int i = 0; i < NUM_SENSOR; i++) {
 800324c:	2300      	movs	r3, #0
 800324e:	617b      	str	r3, [r7, #20]
 8003250:	e06e      	b.n	8003330 <AutoI2CCommand+0x1b4>
   						Dev = &vl53l0x_s[i];
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8003258:	fb02 f303 	mul.w	r3, r2, r3
 800325c:	4a74      	ldr	r2, [pc, #464]	@ (8003430 <AutoI2CCommand+0x2b4>)
 800325e:	4413      	add	r3, r2
 8003260:	4a74      	ldr	r2, [pc, #464]	@ (8003434 <AutoI2CCommand+0x2b8>)
 8003262:	6013      	str	r3, [r2, #0]
   						VL53L0X_PerformContinuousRangingMeasurement(Dev, &RangingData); // 1500us
 8003264:	4b73      	ldr	r3, [pc, #460]	@ (8003434 <AutoI2CCommand+0x2b8>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4973      	ldr	r1, [pc, #460]	@ (8003438 <AutoI2CCommand+0x2bc>)
 800326a:	4618      	mov	r0, r3
 800326c:	f008 fab8 	bl	800b7e0 <VL53L0X_PerformContinuousRangingMeasurement>
   						if (RangingData.RangeStatus == 0) {
 8003270:	4b71      	ldr	r3, [pc, #452]	@ (8003438 <AutoI2CCommand+0x2bc>)
 8003272:	7e1b      	ldrb	r3, [r3, #24]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d134      	bne.n	80032e2 <AutoI2CCommand+0x166>
   						  if (RangingData.RangeMilliMeter < 100) {
 8003278:	4b6f      	ldr	r3, [pc, #444]	@ (8003438 <AutoI2CCommand+0x2bc>)
 800327a:	891b      	ldrh	r3, [r3, #8]
 800327c:	2b63      	cmp	r3, #99	@ 0x63
 800327e:	d830      	bhi.n	80032e2 <AutoI2CCommand+0x166>
   							  filteredValue[i] = Kalman_Estimate(&filters[i], RangingData.RangeMilliMeter);
 8003280:	697a      	ldr	r2, [r7, #20]
 8003282:	4613      	mov	r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	4413      	add	r3, r2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	4a6c      	ldr	r2, [pc, #432]	@ (800343c <AutoI2CCommand+0x2c0>)
 800328c:	4413      	add	r3, r2
 800328e:	4a6a      	ldr	r2, [pc, #424]	@ (8003438 <AutoI2CCommand+0x2bc>)
 8003290:	8912      	ldrh	r2, [r2, #8]
 8003292:	ee07 2a90 	vmov	s15, r2
 8003296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800329a:	eeb0 0a67 	vmov.f32	s0, s15
 800329e:	4618      	mov	r0, r3
 80032a0:	f000 f9ee 	bl	8003680 <Kalman_Estimate>
 80032a4:	eef0 7a40 	vmov.f32	s15, s0
 80032a8:	4a65      	ldr	r2, [pc, #404]	@ (8003440 <AutoI2CCommand+0x2c4>)
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	4413      	add	r3, r2
 80032b0:	edc3 7a00 	vstr	s15, [r3]
   							  filteredValue[i] -= sensorAverages[i];
 80032b4:	4a62      	ldr	r2, [pc, #392]	@ (8003440 <AutoI2CCommand+0x2c4>)
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	4413      	add	r3, r2
 80032bc:	ed93 7a00 	vldr	s14, [r3]
 80032c0:	4a60      	ldr	r2, [pc, #384]	@ (8003444 <AutoI2CCommand+0x2c8>)
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	4413      	add	r3, r2
 80032c8:	edd3 7a00 	vldr	s15, [r3]
 80032cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032d0:	4a5b      	ldr	r2, [pc, #364]	@ (8003440 <AutoI2CCommand+0x2c4>)
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	4413      	add	r3, r2
 80032d8:	edc3 7a00 	vstr	s15, [r3]
   							  //filteredValue /= Xstd[i];
   							  tofcount++;
 80032dc:	7efb      	ldrb	r3, [r7, #27]
 80032de:	3301      	adds	r3, #1
 80032e0:	76fb      	strb	r3, [r7, #27]
   						  }
   						}
   						if(tofcount==NUM_SENSOR){
 80032e2:	7efb      	ldrb	r3, [r7, #27]
 80032e4:	2b30      	cmp	r3, #48	@ 0x30
 80032e6:	d120      	bne.n	800332a <AutoI2CCommand+0x1ae>
   							for(int i = 0; i< NUM_SENSOR;i++){
 80032e8:	2300      	movs	r3, #0
 80032ea:	613b      	str	r3, [r7, #16]
 80032ec:	e017      	b.n	800331e <AutoI2CCommand+0x1a2>
   							  HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.1f ", filteredValue[i]), 100);
 80032ee:	4a54      	ldr	r2, [pc, #336]	@ (8003440 <AutoI2CCommand+0x2c4>)
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	4413      	add	r3, r2
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7fd f955 	bl	80005a8 <__aeabi_f2d>
 80032fe:	4602      	mov	r2, r0
 8003300:	460b      	mov	r3, r1
 8003302:	4951      	ldr	r1, [pc, #324]	@ (8003448 <AutoI2CCommand+0x2cc>)
 8003304:	4846      	ldr	r0, [pc, #280]	@ (8003420 <AutoI2CCommand+0x2a4>)
 8003306:	f010 fa0d 	bl	8013724 <siprintf>
 800330a:	4603      	mov	r3, r0
 800330c:	b29a      	uxth	r2, r3
 800330e:	2364      	movs	r3, #100	@ 0x64
 8003310:	4943      	ldr	r1, [pc, #268]	@ (8003420 <AutoI2CCommand+0x2a4>)
 8003312:	4844      	ldr	r0, [pc, #272]	@ (8003424 <AutoI2CCommand+0x2a8>)
 8003314:	f005 fc90 	bl	8008c38 <HAL_UART_Transmit>
   							for(int i = 0; i< NUM_SENSOR;i++){
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	3301      	adds	r3, #1
 800331c:	613b      	str	r3, [r7, #16]
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	2b2f      	cmp	r3, #47	@ 0x2f
 8003322:	dde4      	ble.n	80032ee <AutoI2CCommand+0x172>
   							}
   	                        tofHitCount++;
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	3301      	adds	r3, #1
 8003328:	61fb      	str	r3, [r7, #28]
   					for (int i = 0; i < NUM_SENSOR; i++) {
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	3301      	adds	r3, #1
 800332e:	617b      	str	r3, [r7, #20]
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	2b2f      	cmp	r3, #47	@ 0x2f
 8003334:	dd8d      	ble.n	8003252 <AutoI2CCommand+0xd6>
   						}
   					}
   					do {
   					endTime = HAL_GetTick();
 8003336:	f001 fa33 	bl	80047a0 <HAL_GetTick>
 800333a:	60b8      	str	r0, [r7, #8]
   					diffTime = endTime - startTime;
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	b2da      	uxtb	r2, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	b2db      	uxtb	r3, r3
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	71fb      	strb	r3, [r7, #7]
   					} while (diffTime <= TIMBUDGET);
 8003348:	79fb      	ldrb	r3, [r7, #7]
 800334a:	2b64      	cmp	r3, #100	@ 0x64
 800334c:	d9f3      	bls.n	8003336 <AutoI2CCommand+0x1ba>

   					startTime = 0;
 800334e:	2300      	movs	r3, #0
 8003350:	60fb      	str	r3, [r7, #12]
   					endTime = 0;
 8003352:	2300      	movs	r3, #0
 8003354:	60bb      	str	r3, [r7, #8]
   					diffTime = 0;
 8003356:	2300      	movs	r3, #0
 8003358:	71fb      	strb	r3, [r7, #7]

   					UART_SendWeight_N(Hx711Data,-1/1600.00f,0); // Send the weight data over UART
 800335a:	4b34      	ldr	r3, [pc, #208]	@ (800342c <AutoI2CCommand+0x2b0>)
 800335c:	edd3 7a00 	vldr	s15, [r3]
 8003360:	ed9f 1a3a 	vldr	s2, [pc, #232]	@ 800344c <AutoI2CCommand+0x2d0>
 8003364:	eddf 0a3a 	vldr	s1, [pc, #232]	@ 8003450 <AutoI2CCommand+0x2d4>
 8003368:	eeb0 0a67 	vmov.f32	s0, s15
 800336c:	f000 f8c4 	bl	80034f8 <UART_SendWeight_N>
   					HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, " %d %d %d\n", 8*lin, 5*rev, 2*r), 100);
 8003370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003372:	00d9      	lsls	r1, r3, #3
 8003374:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003376:	4613      	mov	r3, r2
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	441a      	add	r2, r3
 800337c:	6a3b      	ldr	r3, [r7, #32]
 800337e:	005b      	lsls	r3, r3, #1
 8003380:	9300      	str	r3, [sp, #0]
 8003382:	4613      	mov	r3, r2
 8003384:	460a      	mov	r2, r1
 8003386:	4933      	ldr	r1, [pc, #204]	@ (8003454 <AutoI2CCommand+0x2d8>)
 8003388:	4825      	ldr	r0, [pc, #148]	@ (8003420 <AutoI2CCommand+0x2a4>)
 800338a:	f010 f9cb 	bl	8013724 <siprintf>
 800338e:	4603      	mov	r3, r0
 8003390:	b29a      	uxth	r2, r3
 8003392:	2364      	movs	r3, #100	@ 0x64
 8003394:	4922      	ldr	r1, [pc, #136]	@ (8003420 <AutoI2CCommand+0x2a4>)
 8003396:	4823      	ldr	r0, [pc, #140]	@ (8003424 <AutoI2CCommand+0x2a8>)
 8003398:	f005 fc4e 	bl	8008c38 <HAL_UART_Transmit>

                    if (tofHitCount >= 20) {
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	2b13      	cmp	r3, #19
 80033a0:	dc04      	bgt.n	80033ac <AutoI2CCommand+0x230>
                while(tofHitCount < 20){
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	2b13      	cmp	r3, #19
 80033a6:	f77f af29 	ble.w	80031fc <AutoI2CCommand+0x80>
 80033aa:	e000      	b.n	80033ae <AutoI2CCommand+0x232>
                        break;
 80033ac:	bf00      	nop
                    }
                }
                setServoAngle(&htim2, TIM_CHANNEL_1, 10); // ?��?�� ?��치로 ?��?���??
 80033ae:	220a      	movs	r2, #10
 80033b0:	2100      	movs	r1, #0
 80033b2:	481d      	ldr	r0, [pc, #116]	@ (8003428 <AutoI2CCommand+0x2ac>)
 80033b4:	f000 fd6c 	bl	8003e90 <setServoAngle>
                HAL_Delay((r-10)*6+100);
 80033b8:	6a3b      	ldr	r3, [r7, #32]
 80033ba:	f1a3 020a 	sub.w	r2, r3, #10
 80033be:	4613      	mov	r3, r2
 80033c0:	005b      	lsls	r3, r3, #1
 80033c2:	4413      	add	r3, r2
 80033c4:	005b      	lsls	r3, r3, #1
 80033c6:	3364      	adds	r3, #100	@ 0x64
 80033c8:	4618      	mov	r0, r3
 80033ca:	f001 f9f5 	bl	80047b8 <HAL_Delay>
            for(int r = 20; r <70; r+=10){
 80033ce:	6a3b      	ldr	r3, [r7, #32]
 80033d0:	330a      	adds	r3, #10
 80033d2:	623b      	str	r3, [r7, #32]
 80033d4:	6a3b      	ldr	r3, [r7, #32]
 80033d6:	2b45      	cmp	r3, #69	@ 0x45
 80033d8:	f77f aefd 	ble.w	80031d6 <AutoI2CCommand+0x5a>

            }

            stepRev(5); // ?�� 바�?? ?��?��
 80033dc:	2005      	movs	r0, #5
 80033de:	f000 fc47 	bl	8003c70 <stepRev>
        for(int rev = 0; rev < 72; rev++){
 80033e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e4:	3301      	adds	r3, #1
 80033e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80033e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ea:	2b47      	cmp	r3, #71	@ 0x47
 80033ec:	f77f aef0 	ble.w	80031d0 <AutoI2CCommand+0x54>
        }
        HAL_Delay(200);
 80033f0:	20c8      	movs	r0, #200	@ 0xc8
 80033f2:	f001 f9e1 	bl	80047b8 <HAL_Delay>
        stepRev(-360); // ?��?���??
 80033f6:	4818      	ldr	r0, [pc, #96]	@ (8003458 <AutoI2CCommand+0x2dc>)
 80033f8:	f000 fc3a 	bl	8003c70 <stepRev>
        stepLin(-8); // ?��?�� ?��?��
 80033fc:	f06f 0007 	mvn.w	r0, #7
 8003400:	f000 fc9e 	bl	8003d40 <stepLin>
    for(int lin = 2; lin < 19; lin++){
 8003404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003406:	3301      	adds	r3, #1
 8003408:	62bb      	str	r3, [r7, #40]	@ 0x28
 800340a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800340c:	2b12      	cmp	r3, #18
 800340e:	f77f aedc 	ble.w	80031ca <AutoI2CCommand+0x4e>
    }
    //stepLin(144); // 마�?�?? ?��치로 ?��?��
}
 8003412:	bf00      	nop
 8003414:	bf00      	nop
 8003416:	3730      	adds	r7, #48	@ 0x30
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	080189c0 	.word	0x080189c0
 8003420:	20007870 	.word	0x20007870
 8003424:	200077e8 	.word	0x200077e8
 8003428:	20007798 	.word	0x20007798
 800342c:	2000729c 	.word	0x2000729c
 8003430:	20007a60 	.word	0x20007a60
 8003434:	2000c560 	.word	0x2000c560
 8003438:	200078f4 	.word	0x200078f4
 800343c:	200072f4 	.word	0x200072f4
 8003440:	200076b4 	.word	0x200076b4
 8003444:	20007058 	.word	0x20007058
 8003448:	080187b4 	.word	0x080187b4
 800344c:	00000000 	.word	0x00000000
 8003450:	ba23d70a 	.word	0xba23d70a
 8003454:	080189d0 	.word	0x080189d0
 8003458:	fffffe98 	.word	0xfffffe98

0800345c <Read_HX711>:
  // Set the SCK pin to low
  HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_RESET);
}

int32_t Read_HX711(void)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
  int32_t data = 0;
 8003462:	2300      	movs	r3, #0
 8003464:	607b      	str	r3, [r7, #4]

  // Wait until the DT pin goes low
  while (HAL_GPIO_ReadPin(HX711_DT_GPIO_Port, HX711_DT_Pin) == GPIO_PIN_SET);
 8003466:	bf00      	nop
 8003468:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800346c:	4820      	ldr	r0, [pc, #128]	@ (80034f0 <Read_HX711+0x94>)
 800346e:	f001 fe0f 	bl	8005090 <HAL_GPIO_ReadPin>
 8003472:	4603      	mov	r3, r0
 8003474:	2b01      	cmp	r3, #1
 8003476:	d0f7      	beq.n	8003468 <Read_HX711+0xc>

  // Read the 24-bit data
  for (int i = 0; i < 24; i++)
 8003478:	2300      	movs	r3, #0
 800347a:	603b      	str	r3, [r7, #0]
 800347c:	e020      	b.n	80034c0 <Read_HX711+0x64>
  {
    // Generate a clock pulse on SCK pin
    HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_SET);
 800347e:	2201      	movs	r2, #1
 8003480:	2102      	movs	r1, #2
 8003482:	481c      	ldr	r0, [pc, #112]	@ (80034f4 <Read_HX711+0x98>)
 8003484:	f001 fe1c 	bl	80050c0 <HAL_GPIO_WritePin>
    DelayMicroseconds(1);
 8003488:	2001      	movs	r0, #1
 800348a:	f000 f887 	bl	800359c <DelayMicroseconds>
    data = (data << 1);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	005b      	lsls	r3, r3, #1
 8003492:	607b      	str	r3, [r7, #4]
    if (HAL_GPIO_ReadPin(HX711_DT_GPIO_Port, HX711_DT_Pin) == GPIO_PIN_SET)
 8003494:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003498:	4815      	ldr	r0, [pc, #84]	@ (80034f0 <Read_HX711+0x94>)
 800349a:	f001 fdf9 	bl	8005090 <HAL_GPIO_ReadPin>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d102      	bne.n	80034aa <Read_HX711+0x4e>
    {
      data++;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	3301      	adds	r3, #1
 80034a8:	607b      	str	r3, [r7, #4]
    }
    HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_RESET);
 80034aa:	2200      	movs	r2, #0
 80034ac:	2102      	movs	r1, #2
 80034ae:	4811      	ldr	r0, [pc, #68]	@ (80034f4 <Read_HX711+0x98>)
 80034b0:	f001 fe06 	bl	80050c0 <HAL_GPIO_WritePin>
    DelayMicroseconds(1);
 80034b4:	2001      	movs	r0, #1
 80034b6:	f000 f871 	bl	800359c <DelayMicroseconds>
  for (int i = 0; i < 24; i++)
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	3301      	adds	r3, #1
 80034be:	603b      	str	r3, [r7, #0]
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	2b17      	cmp	r3, #23
 80034c4:	dddb      	ble.n	800347e <Read_HX711+0x22>
  }

  // Generate an additional 25th pulse to set the HX711 back to idle mode
  HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_SET);
 80034c6:	2201      	movs	r2, #1
 80034c8:	2102      	movs	r1, #2
 80034ca:	480a      	ldr	r0, [pc, #40]	@ (80034f4 <Read_HX711+0x98>)
 80034cc:	f001 fdf8 	bl	80050c0 <HAL_GPIO_WritePin>
  DelayMicroseconds(1);
 80034d0:	2001      	movs	r0, #1
 80034d2:	f000 f863 	bl	800359c <DelayMicroseconds>
  HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_RESET);
 80034d6:	2200      	movs	r2, #0
 80034d8:	2102      	movs	r1, #2
 80034da:	4806      	ldr	r0, [pc, #24]	@ (80034f4 <Read_HX711+0x98>)
 80034dc:	f001 fdf0 	bl	80050c0 <HAL_GPIO_WritePin>
  DelayMicroseconds(1);
 80034e0:	2001      	movs	r0, #1
 80034e2:	f000 f85b 	bl	800359c <DelayMicroseconds>


  // Return the 24-bit data
  return data;
 80034e6:	687b      	ldr	r3, [r7, #4]
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3708      	adds	r7, #8
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	40020400 	.word	0x40020400
 80034f4:	40022000 	.word	0x40022000

080034f8 <UART_SendWeight_N>:
#endif
  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, data, 1000);
}

void UART_SendWeight_N(float rawData,float loadcell_slope,float loadcell_bias)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b08e      	sub	sp, #56	@ 0x38
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	ed87 0a03 	vstr	s0, [r7, #12]
 8003502:	edc7 0a02 	vstr	s1, [r7, #8]
 8003506:	ed87 1a01 	vstr	s2, [r7, #4]
  float weight = loadcell_slope * rawData  + loadcell_bias;
 800350a:	ed97 7a02 	vldr	s14, [r7, #8]
 800350e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003512:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003516:	ed97 7a01 	vldr	s14, [r7, #4]
 800351a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800351e:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
  weight *=9.8;
 8003522:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003524:	f7fd f840 	bl	80005a8 <__aeabi_f2d>
 8003528:	a31a      	add	r3, pc, #104	@ (adr r3, 8003594 <UART_SendWeight_N+0x9c>)
 800352a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800352e:	f7fd f893 	bl	8000658 <__aeabi_dmul>
 8003532:	4602      	mov	r2, r0
 8003534:	460b      	mov	r3, r1
 8003536:	4610      	mov	r0, r2
 8003538:	4619      	mov	r1, r3
 800353a:	f7fd fb85 	bl	8000c48 <__aeabi_d2f>
 800353e:	4603      	mov	r3, r0
 8003540:	637b      	str	r3, [r7, #52]	@ 0x34
  weight /=1000;
 8003542:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003546:	eddf 6a10 	vldr	s13, [pc, #64]	@ 8003588 <UART_SendWeight_N+0x90>
 800354a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800354e:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
  char buffer[32];
  int len = sprintf(buffer, "%.4f", weight);
 8003552:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003554:	f7fd f828 	bl	80005a8 <__aeabi_f2d>
 8003558:	4602      	mov	r2, r0
 800355a:	460b      	mov	r3, r1
 800355c:	f107 0010 	add.w	r0, r7, #16
 8003560:	490a      	ldr	r1, [pc, #40]	@ (800358c <UART_SendWeight_N+0x94>)
 8003562:	f010 f8df 	bl	8013724 <siprintf>
 8003566:	6338      	str	r0, [r7, #48]	@ 0x30

  // Send the buffer content via UART
  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, len, 1000);
 8003568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800356a:	b29a      	uxth	r2, r3
 800356c:	f107 0110 	add.w	r1, r7, #16
 8003570:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003574:	4806      	ldr	r0, [pc, #24]	@ (8003590 <UART_SendWeight_N+0x98>)
 8003576:	f005 fb5f 	bl	8008c38 <HAL_UART_Transmit>
}
 800357a:	bf00      	nop
 800357c:	3738      	adds	r7, #56	@ 0x38
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	f3af 8000 	nop.w
 8003588:	447a0000 	.word	0x447a0000
 800358c:	080189e4 	.word	0x080189e4
 8003590:	200077e8 	.word	0x200077e8
 8003594:	9999999a 	.word	0x9999999a
 8003598:	40239999 	.word	0x40239999

0800359c <DelayMicroseconds>:
  weight *=9.8;
  weight /=1000;
  return weight;
}
void DelayMicroseconds(uint32_t microseconds)
{
 800359c:	b480      	push	{r7}
 800359e:	b085      	sub	sp, #20
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  uint32_t ticks = microseconds;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	60fb      	str	r3, [r7, #12]
  while (ticks--)
 80035a8:	e000      	b.n	80035ac <DelayMicroseconds+0x10>
  {
    __NOP();
 80035aa:	bf00      	nop
  while (ticks--)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	1e5a      	subs	r2, r3, #1
 80035b0:	60fa      	str	r2, [r7, #12]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d1f9      	bne.n	80035aa <DelayMicroseconds+0xe>
  }
}
 80035b6:	bf00      	nop
 80035b8:	bf00      	nop
 80035ba:	3714      	adds	r7, #20
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;


void MX_I2C1_Init(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80035c8:	4b1b      	ldr	r3, [pc, #108]	@ (8003638 <MX_I2C1_Init+0x74>)
 80035ca:	4a1c      	ldr	r2, [pc, #112]	@ (800363c <MX_I2C1_Init+0x78>)
 80035cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6000030D;
 80035ce:	4b1a      	ldr	r3, [pc, #104]	@ (8003638 <MX_I2C1_Init+0x74>)
 80035d0:	4a1b      	ldr	r2, [pc, #108]	@ (8003640 <MX_I2C1_Init+0x7c>)
 80035d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80035d4:	4b18      	ldr	r3, [pc, #96]	@ (8003638 <MX_I2C1_Init+0x74>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80035da:	4b17      	ldr	r3, [pc, #92]	@ (8003638 <MX_I2C1_Init+0x74>)
 80035dc:	2201      	movs	r2, #1
 80035de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80035e0:	4b15      	ldr	r3, [pc, #84]	@ (8003638 <MX_I2C1_Init+0x74>)
 80035e2:	2200      	movs	r2, #0
 80035e4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80035e6:	4b14      	ldr	r3, [pc, #80]	@ (8003638 <MX_I2C1_Init+0x74>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80035ec:	4b12      	ldr	r3, [pc, #72]	@ (8003638 <MX_I2C1_Init+0x74>)
 80035ee:	2200      	movs	r2, #0
 80035f0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80035f2:	4b11      	ldr	r3, [pc, #68]	@ (8003638 <MX_I2C1_Init+0x74>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80035f8:	4b0f      	ldr	r3, [pc, #60]	@ (8003638 <MX_I2C1_Init+0x74>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80035fe:	480e      	ldr	r0, [pc, #56]	@ (8003638 <MX_I2C1_Init+0x74>)
 8003600:	f001 fd9c 	bl	800513c <HAL_I2C_Init>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d001      	beq.n	800360e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800360a:	f000 fb1b 	bl	8003c44 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800360e:	2100      	movs	r1, #0
 8003610:	4809      	ldr	r0, [pc, #36]	@ (8003638 <MX_I2C1_Init+0x74>)
 8003612:	f002 ffd5 	bl	80065c0 <HAL_I2CEx_ConfigAnalogFilter>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d001      	beq.n	8003620 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800361c:	f000 fb12 	bl	8003c44 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003620:	2100      	movs	r1, #0
 8003622:	4805      	ldr	r0, [pc, #20]	@ (8003638 <MX_I2C1_Init+0x74>)
 8003624:	f003 f817 	bl	8006656 <HAL_I2CEx_ConfigDigitalFilter>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d001      	beq.n	8003632 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800362e:	f000 fb09 	bl	8003c44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003632:	bf00      	nop
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	200072a0 	.word	0x200072a0
 800363c:	40005400 	.word	0x40005400
 8003640:	6000030d 	.word	0x6000030d

08003644 <Kalman_Init>:
float filteredValue[NUM_SENSOR]={0};
float Q = 0.001f; // Process noise covariance
float R = 0.03f;   // Measurement noise covariance
float P = 0.001f;

void Kalman_Init(KalmanFilter *kf, float Q, float R, float P, float initial_value) {
 8003644:	b480      	push	{r7}
 8003646:	b087      	sub	sp, #28
 8003648:	af00      	add	r7, sp, #0
 800364a:	6178      	str	r0, [r7, #20]
 800364c:	ed87 0a04 	vstr	s0, [r7, #16]
 8003650:	edc7 0a03 	vstr	s1, [r7, #12]
 8003654:	ed87 1a02 	vstr	s2, [r7, #8]
 8003658:	edc7 1a01 	vstr	s3, [r7, #4]
    kf->Q = Q;
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	693a      	ldr	r2, [r7, #16]
 8003660:	601a      	str	r2, [r3, #0]
    kf->R = R;
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	68fa      	ldr	r2, [r7, #12]
 8003666:	605a      	str	r2, [r3, #4]
    kf->P = P;
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	68ba      	ldr	r2, [r7, #8]
 800366c:	609a      	str	r2, [r3, #8]
    kf->X = initial_value;
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	60da      	str	r2, [r3, #12]
}
 8003674:	bf00      	nop
 8003676:	371c      	adds	r7, #28
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr

08003680 <Kalman_Estimate>:

float Kalman_Estimate(KalmanFilter *kf, float measurement) {
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	ed87 0a00 	vstr	s0, [r7]
    // Prediction step: Update the error covariance 'P'
    // This is adding process noise to our uncertainty in the estimated state.
    kf->P = kf->P + kf->Q;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	ed93 7a02 	vldr	s14, [r3, #8]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	edd3 7a00 	vldr	s15, [r3]
 8003698:	ee77 7a27 	vadd.f32	s15, s14, s15
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	edc3 7a02 	vstr	s15, [r3, #8]

    // Update step: Compute the Kalman Gain 'K'
    // Kalman Gain balances the ratio between the prediction and the new measurement
    kf->K = kf->P / (kf->P + kf->R);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	edd3 6a02 	vldr	s13, [r3, #8]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	ed93 7a02 	vldr	s14, [r3, #8]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	edd3 7a01 	vldr	s15, [r3, #4]
 80036b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80036b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	edc3 7a04 	vstr	s15, [r3, #16]

    // Update step: Update the state estimate 'X'
    // Here we adjust our state estimate based on the new measurement,
    // scaling the "innovation" by the Kalman Gain
    kf->X = kf->X + kf->K * (measurement - kf->X);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	ed93 7a03 	vldr	s14, [r3, #12]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	edd3 6a04 	vldr	s13, [r3, #16]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	edd3 7a03 	vldr	s15, [r3, #12]
 80036d4:	ed97 6a00 	vldr	s12, [r7]
 80036d8:	ee76 7a67 	vsub.f32	s15, s12, s15
 80036dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	edc3 7a03 	vstr	s15, [r3, #12]

    // Update step: Update the error covariance 'P'
    // We've used our observation, so we adjust our uncertainty accordingly
    kf->P = (1 - kf->K) * kf->P;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	edd3 7a04 	vldr	s15, [r3, #16]
 80036f0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80036f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	edd3 7a02 	vldr	s15, [r3, #8]
 80036fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	edc3 7a02 	vstr	s15, [r3, #8]

    // Return the updated state estimate
    return kf->X;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	ee07 3a90 	vmov	s15, r3
}
 8003710:	eeb0 0a67 	vmov.f32	s0, s15
 8003714:	370c      	adds	r7, #12
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
	...

08003720 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8003720:	b480      	push	{r7}
 8003722:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003724:	f3bf 8f4f 	dsb	sy
}
 8003728:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800372a:	f3bf 8f6f 	isb	sy
}
 800372e:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8003730:	4b0d      	ldr	r3, [pc, #52]	@ (8003768 <SCB_EnableICache+0x48>)
 8003732:	2200      	movs	r2, #0
 8003734:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8003738:	f3bf 8f4f 	dsb	sy
}
 800373c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800373e:	f3bf 8f6f 	isb	sy
}
 8003742:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8003744:	4b08      	ldr	r3, [pc, #32]	@ (8003768 <SCB_EnableICache+0x48>)
 8003746:	695b      	ldr	r3, [r3, #20]
 8003748:	4a07      	ldr	r2, [pc, #28]	@ (8003768 <SCB_EnableICache+0x48>)
 800374a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800374e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8003750:	f3bf 8f4f 	dsb	sy
}
 8003754:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003756:	f3bf 8f6f 	isb	sy
}
 800375a:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 800375c:	bf00      	nop
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr
 8003766:	bf00      	nop
 8003768:	e000ed00 	.word	0xe000ed00

0800376c <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 800376c:	b480      	push	{r7}
 800376e:	b085      	sub	sp, #20
 8003770:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8003772:	4b1f      	ldr	r3, [pc, #124]	@ (80037f0 <SCB_EnableDCache+0x84>)
 8003774:	2200      	movs	r2, #0
 8003776:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800377a:	f3bf 8f4f 	dsb	sy
}
 800377e:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8003780:	4b1b      	ldr	r3, [pc, #108]	@ (80037f0 <SCB_EnableDCache+0x84>)
 8003782:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003786:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	0b5b      	lsrs	r3, r3, #13
 800378c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003790:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	08db      	lsrs	r3, r3, #3
 8003796:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800379a:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	015a      	lsls	r2, r3, #5
 80037a0:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 80037a4:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80037a6:	68ba      	ldr	r2, [r7, #8]
 80037a8:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80037aa:	4911      	ldr	r1, [pc, #68]	@ (80037f0 <SCB_EnableDCache+0x84>)
 80037ac:	4313      	orrs	r3, r2
 80037ae:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	1e5a      	subs	r2, r3, #1
 80037b6:	60ba      	str	r2, [r7, #8]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d1ef      	bne.n	800379c <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	1e5a      	subs	r2, r3, #1
 80037c0:	60fa      	str	r2, [r7, #12]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d1e5      	bne.n	8003792 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80037c6:	f3bf 8f4f 	dsb	sy
}
 80037ca:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80037cc:	4b08      	ldr	r3, [pc, #32]	@ (80037f0 <SCB_EnableDCache+0x84>)
 80037ce:	695b      	ldr	r3, [r3, #20]
 80037d0:	4a07      	ldr	r2, [pc, #28]	@ (80037f0 <SCB_EnableDCache+0x84>)
 80037d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037d6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80037d8:	f3bf 8f4f 	dsb	sy
}
 80037dc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80037de:	f3bf 8f6f 	isb	sy
}
 80037e2:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80037e4:	bf00      	nop
 80037e6:	3714      	adds	r7, #20
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr
 80037f0:	e000ed00 	.word	0xe000ed00

080037f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80037f8:	f7ff ff92 	bl	8003720 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80037fc:	f7ff ffb6 	bl	800376c <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003800:	f000 ff7d 	bl	80046fe <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003804:	f000 f82c 	bl	8003860 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003808:	f000 f964 	bl	8003ad4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800380c:	f000 fdd8 	bl	80043c0 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8003810:	f7ff fed8 	bl	80035c4 <MX_I2C1_Init>
  MX_CRC_Init();
 8003814:	f000 f8c4 	bl	80039a0 <MX_CRC_Init>
  MX_TIM2_Init();
 8003818:	f000 f8e4 	bl	80039e4 <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800381c:	f000 f88c 	bl	8003938 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 8003820:	2100      	movs	r1, #0
 8003822:	480c      	ldr	r0, [pc, #48]	@ (8003854 <main+0x60>)
 8003824:	f004 f926 	bl	8007a74 <HAL_TIM_PWM_Start>

  aiInit();
 8003828:	f7fd fc0c 	bl	8001044 <aiInit>
  startMsg();
 800382c:	f000 fe2e 	bl	800448c <startMsg>
  servo_angle(&htim2, TIM_CHANNEL_1, 0);
 8003830:	2200      	movs	r2, #0
 8003832:	2100      	movs	r1, #0
 8003834:	4807      	ldr	r0, [pc, #28]	@ (8003854 <main+0x60>)
 8003836:	f000 fadf 	bl	8003df8 <servo_angle>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
#ifdef JH
	  if(ReceiveUartMessage(&huart1, rxMsg, sizeof(rxMsg)) == HAL_OK)
 800383a:	2241      	movs	r2, #65	@ 0x41
 800383c:	4906      	ldr	r1, [pc, #24]	@ (8003858 <main+0x64>)
 800383e:	4807      	ldr	r0, [pc, #28]	@ (800385c <main+0x68>)
 8003840:	f000 fdee 	bl	8004420 <ReceiveUartMessage>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d1f7      	bne.n	800383a <main+0x46>
	  {
	      ProcessCommand(rxMsg);
 800384a:	4803      	ldr	r0, [pc, #12]	@ (8003858 <main+0x64>)
 800384c:	f7fd fdb8 	bl	80013c0 <ProcessCommand>
	  if(ReceiveUartMessage(&huart1, rxMsg, sizeof(rxMsg)) == HAL_OK)
 8003850:	e7f3      	b.n	800383a <main+0x46>
 8003852:	bf00      	nop
 8003854:	20007798 	.word	0x20007798
 8003858:	200078b0 	.word	0x200078b0
 800385c:	200077e8 	.word	0x200077e8

08003860 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b094      	sub	sp, #80	@ 0x50
 8003864:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003866:	f107 0320 	add.w	r3, r7, #32
 800386a:	2230      	movs	r2, #48	@ 0x30
 800386c:	2100      	movs	r1, #0
 800386e:	4618      	mov	r0, r3
 8003870:	f00f ffe7 	bl	8013842 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003874:	f107 030c 	add.w	r3, r7, #12
 8003878:	2200      	movs	r2, #0
 800387a:	601a      	str	r2, [r3, #0]
 800387c:	605a      	str	r2, [r3, #4]
 800387e:	609a      	str	r2, [r3, #8]
 8003880:	60da      	str	r2, [r3, #12]
 8003882:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003884:	4b2a      	ldr	r3, [pc, #168]	@ (8003930 <SystemClock_Config+0xd0>)
 8003886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003888:	4a29      	ldr	r2, [pc, #164]	@ (8003930 <SystemClock_Config+0xd0>)
 800388a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800388e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003890:	4b27      	ldr	r3, [pc, #156]	@ (8003930 <SystemClock_Config+0xd0>)
 8003892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003894:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003898:	60bb      	str	r3, [r7, #8]
 800389a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800389c:	4b25      	ldr	r3, [pc, #148]	@ (8003934 <SystemClock_Config+0xd4>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a24      	ldr	r2, [pc, #144]	@ (8003934 <SystemClock_Config+0xd4>)
 80038a2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80038a6:	6013      	str	r3, [r2, #0]
 80038a8:	4b22      	ldr	r3, [pc, #136]	@ (8003934 <SystemClock_Config+0xd4>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80038b0:	607b      	str	r3, [r7, #4]
 80038b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80038b4:	2302      	movs	r3, #2
 80038b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80038b8:	2301      	movs	r3, #1
 80038ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80038bc:	2310      	movs	r3, #16
 80038be:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80038c0:	2302      	movs	r3, #2
 80038c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80038c4:	2300      	movs	r3, #0
 80038c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80038c8:	2308      	movs	r3, #8
 80038ca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80038cc:	23d8      	movs	r3, #216	@ 0xd8
 80038ce:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80038d0:	2302      	movs	r3, #2
 80038d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80038d4:	2302      	movs	r3, #2
 80038d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80038d8:	f107 0320 	add.w	r3, r7, #32
 80038dc:	4618      	mov	r0, r3
 80038de:	f002 ff57 	bl	8006790 <HAL_RCC_OscConfig>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d001      	beq.n	80038ec <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80038e8:	f000 f9ac 	bl	8003c44 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80038ec:	f002 ff00 	bl	80066f0 <HAL_PWREx_EnableOverDrive>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d001      	beq.n	80038fa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80038f6:	f000 f9a5 	bl	8003c44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80038fa:	230f      	movs	r3, #15
 80038fc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80038fe:	2302      	movs	r3, #2
 8003900:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003902:	2300      	movs	r3, #0
 8003904:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003906:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800390a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800390c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003910:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8003912:	f107 030c 	add.w	r3, r7, #12
 8003916:	2107      	movs	r1, #7
 8003918:	4618      	mov	r0, r3
 800391a:	f003 f9dd 	bl	8006cd8 <HAL_RCC_ClockConfig>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d001      	beq.n	8003928 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8003924:	f000 f98e 	bl	8003c44 <Error_Handler>
  }
}
 8003928:	bf00      	nop
 800392a:	3750      	adds	r7, #80	@ 0x50
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}
 8003930:	40023800 	.word	0x40023800
 8003934:	40007000 	.word	0x40007000

08003938 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800393c:	2200      	movs	r2, #0
 800393e:	2100      	movs	r1, #0
 8003940:	2025      	movs	r0, #37	@ 0x25
 8003942:	f001 f838 	bl	80049b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003946:	2025      	movs	r0, #37	@ 0x25
 8003948:	f001 f851 	bl	80049ee <HAL_NVIC_EnableIRQ>
  /* I2C1_ER_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800394c:	2200      	movs	r2, #0
 800394e:	2100      	movs	r1, #0
 8003950:	2020      	movs	r0, #32
 8003952:	f001 f830 	bl	80049b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003956:	2020      	movs	r0, #32
 8003958:	f001 f849 	bl	80049ee <HAL_NVIC_EnableIRQ>
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800395c:	2200      	movs	r2, #0
 800395e:	2100      	movs	r1, #0
 8003960:	201f      	movs	r0, #31
 8003962:	f001 f828 	bl	80049b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003966:	201f      	movs	r0, #31
 8003968:	f001 f841 	bl	80049ee <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800396c:	2200      	movs	r2, #0
 800396e:	2100      	movs	r1, #0
 8003970:	2028      	movs	r0, #40	@ 0x28
 8003972:	f001 f820 	bl	80049b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003976:	2028      	movs	r0, #40	@ 0x28
 8003978:	f001 f839 	bl	80049ee <HAL_NVIC_EnableIRQ>
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800397c:	2200      	movs	r2, #0
 800397e:	2100      	movs	r1, #0
 8003980:	2017      	movs	r0, #23
 8003982:	f001 f818 	bl	80049b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003986:	2017      	movs	r0, #23
 8003988:	f001 f831 	bl	80049ee <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800398c:	2200      	movs	r2, #0
 800398e:	2100      	movs	r1, #0
 8003990:	201c      	movs	r0, #28
 8003992:	f001 f810 	bl	80049b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003996:	201c      	movs	r0, #28
 8003998:	f001 f829 	bl	80049ee <HAL_NVIC_EnableIRQ>
}
 800399c:	bf00      	nop
 800399e:	bd80      	pop	{r7, pc}

080039a0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80039a4:	4b0d      	ldr	r3, [pc, #52]	@ (80039dc <MX_CRC_Init+0x3c>)
 80039a6:	4a0e      	ldr	r2, [pc, #56]	@ (80039e0 <MX_CRC_Init+0x40>)
 80039a8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80039aa:	4b0c      	ldr	r3, [pc, #48]	@ (80039dc <MX_CRC_Init+0x3c>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80039b0:	4b0a      	ldr	r3, [pc, #40]	@ (80039dc <MX_CRC_Init+0x3c>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80039b6:	4b09      	ldr	r3, [pc, #36]	@ (80039dc <MX_CRC_Init+0x3c>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80039bc:	4b07      	ldr	r3, [pc, #28]	@ (80039dc <MX_CRC_Init+0x3c>)
 80039be:	2200      	movs	r2, #0
 80039c0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80039c2:	4b06      	ldr	r3, [pc, #24]	@ (80039dc <MX_CRC_Init+0x3c>)
 80039c4:	2201      	movs	r2, #1
 80039c6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80039c8:	4804      	ldr	r0, [pc, #16]	@ (80039dc <MX_CRC_Init+0x3c>)
 80039ca:	f001 f82b 	bl	8004a24 <HAL_CRC_Init>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d001      	beq.n	80039d8 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80039d4:	f000 f936 	bl	8003c44 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80039d8:	bf00      	nop
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	20007774 	.word	0x20007774
 80039e0:	40023000 	.word	0x40023000

080039e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b08e      	sub	sp, #56	@ 0x38
 80039e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80039ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80039ee:	2200      	movs	r2, #0
 80039f0:	601a      	str	r2, [r3, #0]
 80039f2:	605a      	str	r2, [r3, #4]
 80039f4:	609a      	str	r2, [r3, #8]
 80039f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039f8:	f107 031c 	add.w	r3, r7, #28
 80039fc:	2200      	movs	r2, #0
 80039fe:	601a      	str	r2, [r3, #0]
 8003a00:	605a      	str	r2, [r3, #4]
 8003a02:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003a04:	463b      	mov	r3, r7
 8003a06:	2200      	movs	r2, #0
 8003a08:	601a      	str	r2, [r3, #0]
 8003a0a:	605a      	str	r2, [r3, #4]
 8003a0c:	609a      	str	r2, [r3, #8]
 8003a0e:	60da      	str	r2, [r3, #12]
 8003a10:	611a      	str	r2, [r3, #16]
 8003a12:	615a      	str	r2, [r3, #20]
 8003a14:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003a16:	4b2e      	ldr	r3, [pc, #184]	@ (8003ad0 <MX_TIM2_Init+0xec>)
 8003a18:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003a1c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2200-1;
 8003a1e:	4b2c      	ldr	r3, [pc, #176]	@ (8003ad0 <MX_TIM2_Init+0xec>)
 8003a20:	f640 0297 	movw	r2, #2199	@ 0x897
 8003a24:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a26:	4b2a      	ldr	r3, [pc, #168]	@ (8003ad0 <MX_TIM2_Init+0xec>)
 8003a28:	2200      	movs	r2, #0
 8003a2a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8003a2c:	4b28      	ldr	r3, [pc, #160]	@ (8003ad0 <MX_TIM2_Init+0xec>)
 8003a2e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003a32:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a34:	4b26      	ldr	r3, [pc, #152]	@ (8003ad0 <MX_TIM2_Init+0xec>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a3a:	4b25      	ldr	r3, [pc, #148]	@ (8003ad0 <MX_TIM2_Init+0xec>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003a40:	4823      	ldr	r0, [pc, #140]	@ (8003ad0 <MX_TIM2_Init+0xec>)
 8003a42:	f003 ff5f 	bl	8007904 <HAL_TIM_Base_Init>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d001      	beq.n	8003a50 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8003a4c:	f000 f8fa 	bl	8003c44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003a54:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003a56:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	481c      	ldr	r0, [pc, #112]	@ (8003ad0 <MX_TIM2_Init+0xec>)
 8003a5e:	f004 fb37 	bl	80080d0 <HAL_TIM_ConfigClockSource>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d001      	beq.n	8003a6c <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8003a68:	f000 f8ec 	bl	8003c44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003a6c:	4818      	ldr	r0, [pc, #96]	@ (8003ad0 <MX_TIM2_Init+0xec>)
 8003a6e:	f003 ffa0 	bl	80079b2 <HAL_TIM_PWM_Init>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d001      	beq.n	8003a7c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8003a78:	f000 f8e4 	bl	8003c44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a80:	2300      	movs	r3, #0
 8003a82:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003a84:	f107 031c 	add.w	r3, r7, #28
 8003a88:	4619      	mov	r1, r3
 8003a8a:	4811      	ldr	r0, [pc, #68]	@ (8003ad0 <MX_TIM2_Init+0xec>)
 8003a8c:	f004 ffda 	bl	8008a44 <HAL_TIMEx_MasterConfigSynchronization>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d001      	beq.n	8003a9a <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8003a96:	f000 f8d5 	bl	8003c44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a9a:	2360      	movs	r3, #96	@ 0x60
 8003a9c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003aaa:	463b      	mov	r3, r7
 8003aac:	2200      	movs	r2, #0
 8003aae:	4619      	mov	r1, r3
 8003ab0:	4807      	ldr	r0, [pc, #28]	@ (8003ad0 <MX_TIM2_Init+0xec>)
 8003ab2:	f004 f9f9 	bl	8007ea8 <HAL_TIM_PWM_ConfigChannel>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d001      	beq.n	8003ac0 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8003abc:	f000 f8c2 	bl	8003c44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003ac0:	4803      	ldr	r0, [pc, #12]	@ (8003ad0 <MX_TIM2_Init+0xec>)
 8003ac2:	f000 fb0f 	bl	80040e4 <HAL_TIM_MspPostInit>

}
 8003ac6:	bf00      	nop
 8003ac8:	3738      	adds	r7, #56	@ 0x38
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	20007798 	.word	0x20007798

08003ad4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b08a      	sub	sp, #40	@ 0x28
 8003ad8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ada:	f107 0314 	add.w	r3, r7, #20
 8003ade:	2200      	movs	r2, #0
 8003ae0:	601a      	str	r2, [r3, #0]
 8003ae2:	605a      	str	r2, [r3, #4]
 8003ae4:	609a      	str	r2, [r3, #8]
 8003ae6:	60da      	str	r2, [r3, #12]
 8003ae8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003aea:	4b51      	ldr	r3, [pc, #324]	@ (8003c30 <MX_GPIO_Init+0x15c>)
 8003aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aee:	4a50      	ldr	r2, [pc, #320]	@ (8003c30 <MX_GPIO_Init+0x15c>)
 8003af0:	f043 0302 	orr.w	r3, r3, #2
 8003af4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003af6:	4b4e      	ldr	r3, [pc, #312]	@ (8003c30 <MX_GPIO_Init+0x15c>)
 8003af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003afa:	f003 0302 	and.w	r3, r3, #2
 8003afe:	613b      	str	r3, [r7, #16]
 8003b00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b02:	4b4b      	ldr	r3, [pc, #300]	@ (8003c30 <MX_GPIO_Init+0x15c>)
 8003b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b06:	4a4a      	ldr	r2, [pc, #296]	@ (8003c30 <MX_GPIO_Init+0x15c>)
 8003b08:	f043 0301 	orr.w	r3, r3, #1
 8003b0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b0e:	4b48      	ldr	r3, [pc, #288]	@ (8003c30 <MX_GPIO_Init+0x15c>)
 8003b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b12:	f003 0301 	and.w	r3, r3, #1
 8003b16:	60fb      	str	r3, [r7, #12]
 8003b18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8003b1a:	4b45      	ldr	r3, [pc, #276]	@ (8003c30 <MX_GPIO_Init+0x15c>)
 8003b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b1e:	4a44      	ldr	r2, [pc, #272]	@ (8003c30 <MX_GPIO_Init+0x15c>)
 8003b20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b24:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b26:	4b42      	ldr	r3, [pc, #264]	@ (8003c30 <MX_GPIO_Init+0x15c>)
 8003b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b2e:	60bb      	str	r3, [r7, #8]
 8003b30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003b32:	4b3f      	ldr	r3, [pc, #252]	@ (8003c30 <MX_GPIO_Init+0x15c>)
 8003b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b36:	4a3e      	ldr	r2, [pc, #248]	@ (8003c30 <MX_GPIO_Init+0x15c>)
 8003b38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b3e:	4b3c      	ldr	r3, [pc, #240]	@ (8003c30 <MX_GPIO_Init+0x15c>)
 8003b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b46:	607b      	str	r3, [r7, #4]
 8003b48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003b4a:	4b39      	ldr	r3, [pc, #228]	@ (8003c30 <MX_GPIO_Init+0x15c>)
 8003b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b4e:	4a38      	ldr	r2, [pc, #224]	@ (8003c30 <MX_GPIO_Init+0x15c>)
 8003b50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b54:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b56:	4b36      	ldr	r3, [pc, #216]	@ (8003c30 <MX_GPIO_Init+0x15c>)
 8003b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b5e:	603b      	str	r3, [r7, #0]
 8003b60:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8003b62:	2200      	movs	r2, #0
 8003b64:	2110      	movs	r1, #16
 8003b66:	4833      	ldr	r0, [pc, #204]	@ (8003c34 <MX_GPIO_Init+0x160>)
 8003b68:	f001 faaa 	bl	80050c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0, GPIO_PIN_RESET);
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	210f      	movs	r1, #15
 8003b70:	4831      	ldr	r0, [pc, #196]	@ (8003c38 <MX_GPIO_Init+0x164>)
 8003b72:	f001 faa5 	bl	80050c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7|GPIO_PIN_6, GPIO_PIN_RESET);
 8003b76:	2200      	movs	r2, #0
 8003b78:	21c0      	movs	r1, #192	@ 0xc0
 8003b7a:	4830      	ldr	r0, [pc, #192]	@ (8003c3c <MX_GPIO_Init+0x168>)
 8003b7c:	f001 faa0 	bl	80050c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003b80:	2310      	movs	r3, #16
 8003b82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b84:	2301      	movs	r3, #1
 8003b86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b90:	f107 0314 	add.w	r3, r7, #20
 8003b94:	4619      	mov	r1, r3
 8003b96:	4827      	ldr	r0, [pc, #156]	@ (8003c34 <MX_GPIO_Init+0x160>)
 8003b98:	f001 f8ce 	bl	8004d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI3 PI2 PI1 PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0;
 8003b9c:	230f      	movs	r3, #15
 8003b9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003bac:	f107 0314 	add.w	r3, r7, #20
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	4821      	ldr	r0, [pc, #132]	@ (8003c38 <MX_GPIO_Init+0x164>)
 8003bb4:	f001 f8c0 	bl	8004d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003bb8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003bbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003bbe:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003bc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bc8:	f107 0314 	add.w	r3, r7, #20
 8003bcc:	4619      	mov	r1, r3
 8003bce:	481c      	ldr	r0, [pc, #112]	@ (8003c40 <MX_GPIO_Init+0x16c>)
 8003bd0:	f001 f8b2 	bl	8004d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8003bd4:	23c0      	movs	r3, #192	@ 0xc0
 8003bd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003be0:	2300      	movs	r3, #0
 8003be2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003be4:	f107 0314 	add.w	r3, r7, #20
 8003be8:	4619      	mov	r1, r3
 8003bea:	4814      	ldr	r0, [pc, #80]	@ (8003c3c <MX_GPIO_Init+0x168>)
 8003bec:	f001 f8a4 	bl	8004d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003bf0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003bf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bfe:	f107 0314 	add.w	r3, r7, #20
 8003c02:	4619      	mov	r1, r3
 8003c04:	480b      	ldr	r0, [pc, #44]	@ (8003c34 <MX_GPIO_Init+0x160>)
 8003c06:	f001 f897 	bl	8004d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003c0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003c10:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003c14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c16:	2300      	movs	r3, #0
 8003c18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c1a:	f107 0314 	add.w	r3, r7, #20
 8003c1e:	4619      	mov	r1, r3
 8003c20:	4804      	ldr	r0, [pc, #16]	@ (8003c34 <MX_GPIO_Init+0x160>)
 8003c22:	f001 f889 	bl	8004d38 <HAL_GPIO_Init>

}
 8003c26:	bf00      	nop
 8003c28:	3728      	adds	r7, #40	@ 0x28
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	40023800 	.word	0x40023800
 8003c34:	40020400 	.word	0x40020400
 8003c38:	40022000 	.word	0x40022000
 8003c3c:	40021800 	.word	0x40021800
 8003c40:	40020000 	.word	0x40020000

08003c44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003c48:	b672      	cpsid	i
}
 8003c4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "Error\n\r"), 100);
 8003c4c:	4905      	ldr	r1, [pc, #20]	@ (8003c64 <Error_Handler+0x20>)
 8003c4e:	4806      	ldr	r0, [pc, #24]	@ (8003c68 <Error_Handler+0x24>)
 8003c50:	f00f fd68 	bl	8013724 <siprintf>
 8003c54:	4603      	mov	r3, r0
 8003c56:	b29a      	uxth	r2, r3
 8003c58:	2364      	movs	r3, #100	@ 0x64
 8003c5a:	4903      	ldr	r1, [pc, #12]	@ (8003c68 <Error_Handler+0x24>)
 8003c5c:	4803      	ldr	r0, [pc, #12]	@ (8003c6c <Error_Handler+0x28>)
 8003c5e:	f004 ffeb 	bl	8008c38 <HAL_UART_Transmit>
 8003c62:	e7f3      	b.n	8003c4c <Error_Handler+0x8>
 8003c64:	080189ec 	.word	0x080189ec
 8003c68:	20007870 	.word	0x20007870
 8003c6c:	200077e8 	.word	0x200077e8

08003c70 <stepRev>:
#define GEAR 139

#define MIN_PULSE 50   // 1ms 펄스에 해당
#define MAX_PULSE 100  // 2ms 펄스에 해당

void stepRev(int ANG) {
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b086      	sub	sp, #24
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
	// ENA D2 PG7 GPIOG GPIO_PIN_6
	// CLK D3 PB4 GPIOB GPIO_PIN_4
	// DIR D4 PG7 GPIOG GPIO_PIN_7


  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);  // ENA
 8003c78:	2200      	movs	r2, #0
 8003c7a:	2140      	movs	r1, #64	@ 0x40
 8003c7c:	482d      	ldr	r0, [pc, #180]	@ (8003d34 <stepRev+0xc4>)
 8003c7e:	f001 fa1f 	bl	80050c0 <HAL_GPIO_WritePin>

  if (ANG != 0) {
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d04c      	beq.n	8003d22 <stepRev+0xb2>
    int direction = (ANG > 0) ? 1 : -1;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	dd01      	ble.n	8003c92 <stepRev+0x22>
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e001      	b.n	8003c96 <stepRev+0x26>
 8003c92:	f04f 33ff 	mov.w	r3, #4294967295
 8003c96:	613b      	str	r3, [r7, #16]
    ANG *= direction;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	693a      	ldr	r2, [r7, #16]
 8003c9c:	fb02 f303 	mul.w	r3, r2, r3
 8003ca0:	607b      	str	r3, [r7, #4]
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, direction == 1 ? GPIO_PIN_SET : GPIO_PIN_RESET); // DIR
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	bf0c      	ite	eq
 8003ca8:	2301      	moveq	r3, #1
 8003caa:	2300      	movne	r3, #0
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	461a      	mov	r2, r3
 8003cb0:	2180      	movs	r1, #128	@ 0x80
 8003cb2:	4820      	ldr	r0, [pc, #128]	@ (8003d34 <stepRev+0xc4>)
 8003cb4:	f001 fa04 	bl	80050c0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET); // ENA
 8003cb8:	2200      	movs	r2, #0
 8003cba:	2140      	movs	r1, #64	@ 0x40
 8003cbc:	481d      	ldr	r0, [pc, #116]	@ (8003d34 <stepRev+0xc4>)
 8003cbe:	f001 f9ff 	bl	80050c0 <HAL_GPIO_WritePin>
    uint32_t steps = PULSE * GEAR * ANG / 360.0;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f646 4298 	movw	r2, #27800	@ 0x6c98
 8003cc8:	fb02 f303 	mul.w	r3, r2, r3
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f7fc fc59 	bl	8000584 <__aeabi_i2d>
 8003cd2:	f04f 0200 	mov.w	r2, #0
 8003cd6:	4b18      	ldr	r3, [pc, #96]	@ (8003d38 <stepRev+0xc8>)
 8003cd8:	f7fc fde8 	bl	80008ac <__aeabi_ddiv>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	460b      	mov	r3, r1
 8003ce0:	4610      	mov	r0, r2
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	f7fc ff90 	bl	8000c08 <__aeabi_d2uiz>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	60fb      	str	r3, [r7, #12]

    for (int i = 0; i < steps; i++) {
 8003cec:	2300      	movs	r3, #0
 8003cee:	617b      	str	r3, [r7, #20]
 8003cf0:	e012      	b.n	8003d18 <stepRev+0xa8>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET); //CLK
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	2110      	movs	r1, #16
 8003cf6:	4811      	ldr	r0, [pc, #68]	@ (8003d3c <stepRev+0xcc>)
 8003cf8:	f001 f9e2 	bl	80050c0 <HAL_GPIO_WritePin>
      HAL_Delay(1); // 변경된 지연 함수 사용
 8003cfc:	2001      	movs	r0, #1
 8003cfe:	f000 fd5b 	bl	80047b8 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); //CLK
 8003d02:	2200      	movs	r2, #0
 8003d04:	2110      	movs	r1, #16
 8003d06:	480d      	ldr	r0, [pc, #52]	@ (8003d3c <stepRev+0xcc>)
 8003d08:	f001 f9da 	bl	80050c0 <HAL_GPIO_WritePin>
      HAL_Delay(1); // 변경된 지연 함수 사용
 8003d0c:	2001      	movs	r0, #1
 8003d0e:	f000 fd53 	bl	80047b8 <HAL_Delay>
    for (int i = 0; i < steps; i++) {
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	3301      	adds	r3, #1
 8003d16:	617b      	str	r3, [r7, #20]
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	68fa      	ldr	r2, [r7, #12]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d8e8      	bhi.n	8003cf2 <stepRev+0x82>
  }
  else {
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET); // ENA
  }

}
 8003d20:	e004      	b.n	8003d2c <stepRev+0xbc>
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET); // ENA
 8003d22:	2200      	movs	r2, #0
 8003d24:	2140      	movs	r1, #64	@ 0x40
 8003d26:	4803      	ldr	r0, [pc, #12]	@ (8003d34 <stepRev+0xc4>)
 8003d28:	f001 f9ca 	bl	80050c0 <HAL_GPIO_WritePin>
}
 8003d2c:	bf00      	nop
 8003d2e:	3718      	adds	r7, #24
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	40021800 	.word	0x40021800
 8003d38:	40768000 	.word	0x40768000
 8003d3c:	40020400 	.word	0x40020400

08003d40 <stepLin>:

void stepLin(int DIST) {
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b086      	sub	sp, #24
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]

	// ENA D5 PI0 GPIOI GPIO_PIN_0
	// CLK D8 PI2 GPIOI GPIO_PIN_2
	// DIR D7 PI3 GPIOI GPIO_PIN_3

  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_SET);  // ENA
 8003d48:	2201      	movs	r2, #1
 8003d4a:	2101      	movs	r1, #1
 8003d4c:	4829      	ldr	r0, [pc, #164]	@ (8003df4 <stepLin+0xb4>)
 8003d4e:	f001 f9b7 	bl	80050c0 <HAL_GPIO_WritePin>

  if (DIST != 0) {
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d03e      	beq.n	8003dd6 <stepLin+0x96>
    int direction = (DIST > 0) ? 1 : -1;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	dd01      	ble.n	8003d62 <stepLin+0x22>
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e001      	b.n	8003d66 <stepLin+0x26>
 8003d62:	f04f 33ff 	mov.w	r3, #4294967295
 8003d66:	613b      	str	r3, [r7, #16]
    DIST *= direction;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	693a      	ldr	r2, [r7, #16]
 8003d6c:	fb02 f303 	mul.w	r3, r2, r3
 8003d70:	607b      	str	r3, [r7, #4]
    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_3, direction == 1 ? GPIO_PIN_SET : GPIO_PIN_RESET); // DIR
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	bf0c      	ite	eq
 8003d78:	2301      	moveq	r3, #1
 8003d7a:	2300      	movne	r3, #0
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	461a      	mov	r2, r3
 8003d80:	2108      	movs	r1, #8
 8003d82:	481c      	ldr	r0, [pc, #112]	@ (8003df4 <stepLin+0xb4>)
 8003d84:	f001 f99c 	bl	80050c0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_RESET);  // ENA
 8003d88:	2200      	movs	r2, #0
 8003d8a:	2101      	movs	r1, #1
 8003d8c:	4819      	ldr	r0, [pc, #100]	@ (8003df4 <stepLin+0xb4>)
 8003d8e:	f001 f997 	bl	80050c0 <HAL_GPIO_WritePin>
    uint32_t steps = 25*DIST;
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	4613      	mov	r3, r2
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	4413      	add	r3, r2
 8003d9a:	009a      	lsls	r2, r3, #2
 8003d9c:	4413      	add	r3, r2
 8003d9e:	60fb      	str	r3, [r7, #12]
	//HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d\n ", steps), 1000);


    for (int i = 0; i < steps; i++) {
 8003da0:	2300      	movs	r3, #0
 8003da2:	617b      	str	r3, [r7, #20]
 8003da4:	e012      	b.n	8003dcc <stepLin+0x8c>
      HAL_GPIO_WritePin(GPIOI, GPIO_PIN_2, GPIO_PIN_SET); // CLK
 8003da6:	2201      	movs	r2, #1
 8003da8:	2104      	movs	r1, #4
 8003daa:	4812      	ldr	r0, [pc, #72]	@ (8003df4 <stepLin+0xb4>)
 8003dac:	f001 f988 	bl	80050c0 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8003db0:	2001      	movs	r0, #1
 8003db2:	f000 fd01 	bl	80047b8 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOI, GPIO_PIN_2, GPIO_PIN_RESET); // CLK
 8003db6:	2200      	movs	r2, #0
 8003db8:	2104      	movs	r1, #4
 8003dba:	480e      	ldr	r0, [pc, #56]	@ (8003df4 <stepLin+0xb4>)
 8003dbc:	f001 f980 	bl	80050c0 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8003dc0:	2001      	movs	r0, #1
 8003dc2:	f000 fcf9 	bl	80047b8 <HAL_Delay>
    for (int i = 0; i < steps; i++) {
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	3301      	adds	r3, #1
 8003dca:	617b      	str	r3, [r7, #20]
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	68fa      	ldr	r2, [r7, #12]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d8e8      	bhi.n	8003da6 <stepLin+0x66>
 8003dd4:	e004      	b.n	8003de0 <stepLin+0xa0>
    }
  }
  else {
    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_RESET);  // ENA
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	2101      	movs	r1, #1
 8003dda:	4806      	ldr	r0, [pc, #24]	@ (8003df4 <stepLin+0xb4>)
 8003ddc:	f001 f970 	bl	80050c0 <HAL_GPIO_WritePin>
  }

  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_SET);  // ENA
 8003de0:	2201      	movs	r2, #1
 8003de2:	2101      	movs	r1, #1
 8003de4:	4803      	ldr	r0, [pc, #12]	@ (8003df4 <stepLin+0xb4>)
 8003de6:	f001 f96b 	bl	80050c0 <HAL_GPIO_WritePin>

}
 8003dea:	bf00      	nop
 8003dec:	3718      	adds	r7, #24
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	40022000 	.word	0x40022000

08003df8 <servo_angle>:

void servo_angle(TIM_HandleTypeDef *htim, uint32_t channel, int step) {
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b086      	sub	sp, #24
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	60b9      	str	r1, [r7, #8]
 8003e02:	607a      	str	r2, [r7, #4]

	// 1 step is 0.8 mm

    int pulse_width = step; // 듀티 사이클 계산 (0도에서 180도까지)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	617b      	str	r3, [r7, #20]
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width); // 듀티 사이클 변경
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d104      	bne.n	8003e18 <servo_angle+0x20>
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	697a      	ldr	r2, [r7, #20]
 8003e14:	635a      	str	r2, [r3, #52]	@ 0x34
 8003e16:	e023      	b.n	8003e60 <servo_angle+0x68>
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	2b04      	cmp	r3, #4
 8003e1c:	d104      	bne.n	8003e28 <servo_angle+0x30>
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	6393      	str	r3, [r2, #56]	@ 0x38
 8003e26:	e01b      	b.n	8003e60 <servo_angle+0x68>
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	2b08      	cmp	r3, #8
 8003e2c:	d104      	bne.n	8003e38 <servo_angle+0x40>
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8003e36:	e013      	b.n	8003e60 <servo_angle+0x68>
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	2b0c      	cmp	r3, #12
 8003e3c:	d104      	bne.n	8003e48 <servo_angle+0x50>
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e46:	e00b      	b.n	8003e60 <servo_angle+0x68>
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	2b10      	cmp	r3, #16
 8003e4c:	d104      	bne.n	8003e58 <servo_angle+0x60>
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e56:	e003      	b.n	8003e60 <servo_angle+0x68>
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	65d3      	str	r3, [r2, #92]	@ 0x5c
    HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "pulse_width : %d \n\r", pulse_width), 100);
 8003e60:	697a      	ldr	r2, [r7, #20]
 8003e62:	4907      	ldr	r1, [pc, #28]	@ (8003e80 <servo_angle+0x88>)
 8003e64:	4807      	ldr	r0, [pc, #28]	@ (8003e84 <servo_angle+0x8c>)
 8003e66:	f00f fc5d 	bl	8013724 <siprintf>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	b29a      	uxth	r2, r3
 8003e6e:	2364      	movs	r3, #100	@ 0x64
 8003e70:	4904      	ldr	r1, [pc, #16]	@ (8003e84 <servo_angle+0x8c>)
 8003e72:	4805      	ldr	r0, [pc, #20]	@ (8003e88 <servo_angle+0x90>)
 8003e74:	f004 fee0 	bl	8008c38 <HAL_UART_Transmit>

}
 8003e78:	bf00      	nop
 8003e7a:	3718      	adds	r7, #24
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	080189f4 	.word	0x080189f4
 8003e84:	20007870 	.word	0x20007870
 8003e88:	200077e8 	.word	0x200077e8
 8003e8c:	00000000 	.word	0x00000000

08003e90 <setServoAngle>:

void setServoAngle(TIM_HandleTypeDef *htim, uint32_t channel, uint8_t value) {
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b086      	sub	sp, #24
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	71fb      	strb	r3, [r7, #7]
    uint16_t pulse_length;
    // 각도에 따른 펄스 길이 계산
    if(value<0){value = 0;}
    if(value>100){value = 100;}
 8003e9e:	79fb      	ldrb	r3, [r7, #7]
 8003ea0:	2b64      	cmp	r3, #100	@ 0x64
 8003ea2:	d901      	bls.n	8003ea8 <setServoAngle+0x18>
 8003ea4:	2364      	movs	r3, #100	@ 0x64
 8003ea6:	71fb      	strb	r3, [r7, #7]
    pulse_length = value+22;
 8003ea8:	79fb      	ldrb	r3, [r7, #7]
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	3316      	adds	r3, #22
 8003eae:	82fb      	strh	r3, [r7, #22]
	__HAL_TIM_SET_COMPARE(htim, channel, pulse_length); // 듀티 사이클 변경
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d104      	bne.n	8003ec0 <setServoAngle+0x30>
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	8afa      	ldrh	r2, [r7, #22]
 8003ebc:	635a      	str	r2, [r3, #52]	@ 0x34
 8003ebe:	e023      	b.n	8003f08 <setServoAngle+0x78>
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	2b04      	cmp	r3, #4
 8003ec4:	d104      	bne.n	8003ed0 <setServoAngle+0x40>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	8afb      	ldrh	r3, [r7, #22]
 8003ecc:	6393      	str	r3, [r2, #56]	@ 0x38
 8003ece:	e01b      	b.n	8003f08 <setServoAngle+0x78>
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	2b08      	cmp	r3, #8
 8003ed4:	d104      	bne.n	8003ee0 <setServoAngle+0x50>
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	8afb      	ldrh	r3, [r7, #22]
 8003edc:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8003ede:	e013      	b.n	8003f08 <setServoAngle+0x78>
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	2b0c      	cmp	r3, #12
 8003ee4:	d104      	bne.n	8003ef0 <setServoAngle+0x60>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	8afb      	ldrh	r3, [r7, #22]
 8003eec:	6413      	str	r3, [r2, #64]	@ 0x40
 8003eee:	e00b      	b.n	8003f08 <setServoAngle+0x78>
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	2b10      	cmp	r3, #16
 8003ef4:	d104      	bne.n	8003f00 <setServoAngle+0x70>
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	8afb      	ldrh	r3, [r7, #22]
 8003efc:	6593      	str	r3, [r2, #88]	@ 0x58
 8003efe:	e003      	b.n	8003f08 <setServoAngle+0x78>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	8afb      	ldrh	r3, [r7, #22]
 8003f06:	65d3      	str	r3, [r2, #92]	@ 0x5c
    HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "pulse_length : %2f \n\r", value*0.47), 100);
 8003f08:	79fb      	ldrb	r3, [r7, #7]
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f7fc fb3a 	bl	8000584 <__aeabi_i2d>
 8003f10:	a30e      	add	r3, pc, #56	@ (adr r3, 8003f4c <setServoAngle+0xbc>)
 8003f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f16:	f7fc fb9f 	bl	8000658 <__aeabi_dmul>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	4908      	ldr	r1, [pc, #32]	@ (8003f40 <setServoAngle+0xb0>)
 8003f20:	4808      	ldr	r0, [pc, #32]	@ (8003f44 <setServoAngle+0xb4>)
 8003f22:	f00f fbff 	bl	8013724 <siprintf>
 8003f26:	4603      	mov	r3, r0
 8003f28:	b29a      	uxth	r2, r3
 8003f2a:	2364      	movs	r3, #100	@ 0x64
 8003f2c:	4905      	ldr	r1, [pc, #20]	@ (8003f44 <setServoAngle+0xb4>)
 8003f2e:	4806      	ldr	r0, [pc, #24]	@ (8003f48 <setServoAngle+0xb8>)
 8003f30:	f004 fe82 	bl	8008c38 <HAL_UART_Transmit>

}
 8003f34:	bf00      	nop
 8003f36:	3718      	adds	r7, #24
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	f3af 8000 	nop.w
 8003f40:	08018a08 	.word	0x08018a08
 8003f44:	20007870 	.word	0x20007870
 8003f48:	200077e8 	.word	0x200077e8
 8003f4c:	e147ae14 	.word	0xe147ae14
 8003f50:	3fde147a 	.word	0x3fde147a

08003f54 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003f5a:	4b12      	ldr	r3, [pc, #72]	@ (8003fa4 <HAL_MspInit+0x50>)
 8003f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f5e:	4a11      	ldr	r2, [pc, #68]	@ (8003fa4 <HAL_MspInit+0x50>)
 8003f60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f64:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f66:	4b0f      	ldr	r3, [pc, #60]	@ (8003fa4 <HAL_MspInit+0x50>)
 8003f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f6e:	607b      	str	r3, [r7, #4]
 8003f70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f72:	4b0c      	ldr	r3, [pc, #48]	@ (8003fa4 <HAL_MspInit+0x50>)
 8003f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f76:	4a0b      	ldr	r2, [pc, #44]	@ (8003fa4 <HAL_MspInit+0x50>)
 8003f78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003f7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003f7e:	4b09      	ldr	r3, [pc, #36]	@ (8003fa4 <HAL_MspInit+0x50>)
 8003f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f86:	603b      	str	r3, [r7, #0]
 8003f88:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	2100      	movs	r1, #0
 8003f8e:	2005      	movs	r0, #5
 8003f90:	f000 fd11 	bl	80049b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8003f94:	2005      	movs	r0, #5
 8003f96:	f000 fd2a 	bl	80049ee <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f9a:	bf00      	nop
 8003f9c:	3708      	adds	r7, #8
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	40023800 	.word	0x40023800

08003fa8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b085      	sub	sp, #20
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a0a      	ldr	r2, [pc, #40]	@ (8003fe0 <HAL_CRC_MspInit+0x38>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d10b      	bne.n	8003fd2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8003fba:	4b0a      	ldr	r3, [pc, #40]	@ (8003fe4 <HAL_CRC_MspInit+0x3c>)
 8003fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fbe:	4a09      	ldr	r2, [pc, #36]	@ (8003fe4 <HAL_CRC_MspInit+0x3c>)
 8003fc0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003fc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fc6:	4b07      	ldr	r3, [pc, #28]	@ (8003fe4 <HAL_CRC_MspInit+0x3c>)
 8003fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003fce:	60fb      	str	r3, [r7, #12]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8003fd2:	bf00      	nop
 8003fd4:	3714      	adds	r7, #20
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop
 8003fe0:	40023000 	.word	0x40023000
 8003fe4:	40023800 	.word	0x40023800

08003fe8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b0aa      	sub	sp, #168	@ 0xa8
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ff0:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	601a      	str	r2, [r3, #0]
 8003ff8:	605a      	str	r2, [r3, #4]
 8003ffa:	609a      	str	r2, [r3, #8]
 8003ffc:	60da      	str	r2, [r3, #12]
 8003ffe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004000:	f107 0310 	add.w	r3, r7, #16
 8004004:	2284      	movs	r2, #132	@ 0x84
 8004006:	2100      	movs	r1, #0
 8004008:	4618      	mov	r0, r3
 800400a:	f00f fc1a 	bl	8013842 <memset>
  if(hi2c->Instance==I2C1)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a22      	ldr	r2, [pc, #136]	@ (800409c <HAL_I2C_MspInit+0xb4>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d13c      	bne.n	8004092 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004018:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800401c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800401e:	2300      	movs	r3, #0
 8004020:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004022:	f107 0310 	add.w	r3, r7, #16
 8004026:	4618      	mov	r0, r3
 8004028:	f003 f87c 	bl	8007124 <HAL_RCCEx_PeriphCLKConfig>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d001      	beq.n	8004036 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8004032:	f7ff fe07 	bl	8003c44 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004036:	4b1a      	ldr	r3, [pc, #104]	@ (80040a0 <HAL_I2C_MspInit+0xb8>)
 8004038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800403a:	4a19      	ldr	r2, [pc, #100]	@ (80040a0 <HAL_I2C_MspInit+0xb8>)
 800403c:	f043 0302 	orr.w	r3, r3, #2
 8004040:	6313      	str	r3, [r2, #48]	@ 0x30
 8004042:	4b17      	ldr	r3, [pc, #92]	@ (80040a0 <HAL_I2C_MspInit+0xb8>)
 8004044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004046:	f003 0302 	and.w	r3, r3, #2
 800404a:	60fb      	str	r3, [r7, #12]
 800404c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800404e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004052:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004056:	2312      	movs	r3, #18
 8004058:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800405c:	2300      	movs	r3, #0
 800405e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004062:	2303      	movs	r3, #3
 8004064:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004068:	2304      	movs	r3, #4
 800406a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800406e:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8004072:	4619      	mov	r1, r3
 8004074:	480b      	ldr	r0, [pc, #44]	@ (80040a4 <HAL_I2C_MspInit+0xbc>)
 8004076:	f000 fe5f 	bl	8004d38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800407a:	4b09      	ldr	r3, [pc, #36]	@ (80040a0 <HAL_I2C_MspInit+0xb8>)
 800407c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800407e:	4a08      	ldr	r2, [pc, #32]	@ (80040a0 <HAL_I2C_MspInit+0xb8>)
 8004080:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004084:	6413      	str	r3, [r2, #64]	@ 0x40
 8004086:	4b06      	ldr	r3, [pc, #24]	@ (80040a0 <HAL_I2C_MspInit+0xb8>)
 8004088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800408a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800408e:	60bb      	str	r3, [r7, #8]
 8004090:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004092:	bf00      	nop
 8004094:	37a8      	adds	r7, #168	@ 0xa8
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	40005400 	.word	0x40005400
 80040a0:	40023800 	.word	0x40023800
 80040a4:	40020400 	.word	0x40020400

080040a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b085      	sub	sp, #20
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040b8:	d10b      	bne.n	80040d2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80040ba:	4b09      	ldr	r3, [pc, #36]	@ (80040e0 <HAL_TIM_Base_MspInit+0x38>)
 80040bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040be:	4a08      	ldr	r2, [pc, #32]	@ (80040e0 <HAL_TIM_Base_MspInit+0x38>)
 80040c0:	f043 0301 	orr.w	r3, r3, #1
 80040c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80040c6:	4b06      	ldr	r3, [pc, #24]	@ (80040e0 <HAL_TIM_Base_MspInit+0x38>)
 80040c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ca:	f003 0301 	and.w	r3, r3, #1
 80040ce:	60fb      	str	r3, [r7, #12]
 80040d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80040d2:	bf00      	nop
 80040d4:	3714      	adds	r7, #20
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	40023800 	.word	0x40023800

080040e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b088      	sub	sp, #32
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040ec:	f107 030c 	add.w	r3, r7, #12
 80040f0:	2200      	movs	r2, #0
 80040f2:	601a      	str	r2, [r3, #0]
 80040f4:	605a      	str	r2, [r3, #4]
 80040f6:	609a      	str	r2, [r3, #8]
 80040f8:	60da      	str	r2, [r3, #12]
 80040fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004104:	d11c      	bne.n	8004140 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004106:	4b10      	ldr	r3, [pc, #64]	@ (8004148 <HAL_TIM_MspPostInit+0x64>)
 8004108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800410a:	4a0f      	ldr	r2, [pc, #60]	@ (8004148 <HAL_TIM_MspPostInit+0x64>)
 800410c:	f043 0301 	orr.w	r3, r3, #1
 8004110:	6313      	str	r3, [r2, #48]	@ 0x30
 8004112:	4b0d      	ldr	r3, [pc, #52]	@ (8004148 <HAL_TIM_MspPostInit+0x64>)
 8004114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004116:	f003 0301 	and.w	r3, r3, #1
 800411a:	60bb      	str	r3, [r7, #8]
 800411c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800411e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004122:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004124:	2302      	movs	r3, #2
 8004126:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004128:	2300      	movs	r3, #0
 800412a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800412c:	2300      	movs	r3, #0
 800412e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004130:	2301      	movs	r3, #1
 8004132:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004134:	f107 030c 	add.w	r3, r7, #12
 8004138:	4619      	mov	r1, r3
 800413a:	4804      	ldr	r0, [pc, #16]	@ (800414c <HAL_TIM_MspPostInit+0x68>)
 800413c:	f000 fdfc 	bl	8004d38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8004140:	bf00      	nop
 8004142:	3720      	adds	r7, #32
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}
 8004148:	40023800 	.word	0x40023800
 800414c:	40020000 	.word	0x40020000

08004150 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b0ac      	sub	sp, #176	@ 0xb0
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004158:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800415c:	2200      	movs	r2, #0
 800415e:	601a      	str	r2, [r3, #0]
 8004160:	605a      	str	r2, [r3, #4]
 8004162:	609a      	str	r2, [r3, #8]
 8004164:	60da      	str	r2, [r3, #12]
 8004166:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004168:	f107 0318 	add.w	r3, r7, #24
 800416c:	2284      	movs	r2, #132	@ 0x84
 800416e:	2100      	movs	r1, #0
 8004170:	4618      	mov	r0, r3
 8004172:	f00f fb66 	bl	8013842 <memset>
  if(huart->Instance==USART1)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a32      	ldr	r2, [pc, #200]	@ (8004244 <HAL_UART_MspInit+0xf4>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d15c      	bne.n	800423a <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004180:	2340      	movs	r3, #64	@ 0x40
 8004182:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004184:	2300      	movs	r3, #0
 8004186:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004188:	f107 0318 	add.w	r3, r7, #24
 800418c:	4618      	mov	r0, r3
 800418e:	f002 ffc9 	bl	8007124 <HAL_RCCEx_PeriphCLKConfig>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d001      	beq.n	800419c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004198:	f7ff fd54 	bl	8003c44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800419c:	4b2a      	ldr	r3, [pc, #168]	@ (8004248 <HAL_UART_MspInit+0xf8>)
 800419e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041a0:	4a29      	ldr	r2, [pc, #164]	@ (8004248 <HAL_UART_MspInit+0xf8>)
 80041a2:	f043 0310 	orr.w	r3, r3, #16
 80041a6:	6453      	str	r3, [r2, #68]	@ 0x44
 80041a8:	4b27      	ldr	r3, [pc, #156]	@ (8004248 <HAL_UART_MspInit+0xf8>)
 80041aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ac:	f003 0310 	and.w	r3, r3, #16
 80041b0:	617b      	str	r3, [r7, #20]
 80041b2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041b4:	4b24      	ldr	r3, [pc, #144]	@ (8004248 <HAL_UART_MspInit+0xf8>)
 80041b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041b8:	4a23      	ldr	r2, [pc, #140]	@ (8004248 <HAL_UART_MspInit+0xf8>)
 80041ba:	f043 0302 	orr.w	r3, r3, #2
 80041be:	6313      	str	r3, [r2, #48]	@ 0x30
 80041c0:	4b21      	ldr	r3, [pc, #132]	@ (8004248 <HAL_UART_MspInit+0xf8>)
 80041c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041c4:	f003 0302 	and.w	r3, r3, #2
 80041c8:	613b      	str	r3, [r7, #16]
 80041ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041cc:	4b1e      	ldr	r3, [pc, #120]	@ (8004248 <HAL_UART_MspInit+0xf8>)
 80041ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041d0:	4a1d      	ldr	r2, [pc, #116]	@ (8004248 <HAL_UART_MspInit+0xf8>)
 80041d2:	f043 0301 	orr.w	r3, r3, #1
 80041d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80041d8:	4b1b      	ldr	r3, [pc, #108]	@ (8004248 <HAL_UART_MspInit+0xf8>)
 80041da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041dc:	f003 0301 	and.w	r3, r3, #1
 80041e0:	60fb      	str	r3, [r7, #12]
 80041e2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80041e4:	2380      	movs	r3, #128	@ 0x80
 80041e6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041ea:	2302      	movs	r3, #2
 80041ec:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041f0:	2300      	movs	r3, #0
 80041f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041f6:	2303      	movs	r3, #3
 80041f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80041fc:	2307      	movs	r3, #7
 80041fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004202:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8004206:	4619      	mov	r1, r3
 8004208:	4810      	ldr	r0, [pc, #64]	@ (800424c <HAL_UART_MspInit+0xfc>)
 800420a:	f000 fd95 	bl	8004d38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800420e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004212:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004216:	2302      	movs	r3, #2
 8004218:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800421c:	2300      	movs	r3, #0
 800421e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004222:	2303      	movs	r3, #3
 8004224:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004228:	2307      	movs	r3, #7
 800422a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800422e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8004232:	4619      	mov	r1, r3
 8004234:	4806      	ldr	r0, [pc, #24]	@ (8004250 <HAL_UART_MspInit+0x100>)
 8004236:	f000 fd7f 	bl	8004d38 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800423a:	bf00      	nop
 800423c:	37b0      	adds	r7, #176	@ 0xb0
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	40011000 	.word	0x40011000
 8004248:	40023800 	.word	0x40023800
 800424c:	40020400 	.word	0x40020400
 8004250:	40020000 	.word	0x40020000

08004254 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004254:	b480      	push	{r7}
 8004256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004258:	bf00      	nop
 800425a:	e7fd      	b.n	8004258 <NMI_Handler+0x4>

0800425c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800425c:	b480      	push	{r7}
 800425e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004260:	bf00      	nop
 8004262:	e7fd      	b.n	8004260 <HardFault_Handler+0x4>

08004264 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004264:	b480      	push	{r7}
 8004266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004268:	bf00      	nop
 800426a:	e7fd      	b.n	8004268 <MemManage_Handler+0x4>

0800426c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800426c:	b480      	push	{r7}
 800426e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004270:	bf00      	nop
 8004272:	e7fd      	b.n	8004270 <BusFault_Handler+0x4>

08004274 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004274:	b480      	push	{r7}
 8004276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004278:	bf00      	nop
 800427a:	e7fd      	b.n	8004278 <UsageFault_Handler+0x4>

0800427c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800427c:	b480      	push	{r7}
 800427e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004280:	bf00      	nop
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr

0800428a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800428a:	b480      	push	{r7}
 800428c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800428e:	bf00      	nop
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004298:	b480      	push	{r7}
 800429a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800429c:	bf00      	nop
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr

080042a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80042a6:	b580      	push	{r7, lr}
 80042a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80042aa:	f000 fa65 	bl	8004778 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80042ae:	bf00      	nop
 80042b0:	bd80      	pop	{r7, pc}

080042b2 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80042b2:	b480      	push	{r7}
 80042b4:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80042b6:	bf00      	nop
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80042c4:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80042c8:	f000 ff14 	bl	80050f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80042cc:	bf00      	nop
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80042d4:	4802      	ldr	r0, [pc, #8]	@ (80042e0 <TIM2_IRQHandler+0x10>)
 80042d6:	f003 fcc7 	bl	8007c68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80042da:	bf00      	nop
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	20007798 	.word	0x20007798

080042e4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80042e8:	4802      	ldr	r0, [pc, #8]	@ (80042f4 <I2C1_EV_IRQHandler+0x10>)
 80042ea:	f001 f9a1 	bl	8005630 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80042ee:	bf00      	nop
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	200072a0 	.word	0x200072a0

080042f8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80042fc:	4802      	ldr	r0, [pc, #8]	@ (8004308 <I2C1_ER_IRQHandler+0x10>)
 80042fe:	f001 f9b1 	bl	8005664 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8004302:	bf00      	nop
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	200072a0 	.word	0x200072a0

0800430c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004310:	4802      	ldr	r0, [pc, #8]	@ (800431c <USART1_IRQHandler+0x10>)
 8004312:	f004 fdd9 	bl	8008ec8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004316:	bf00      	nop
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	200077e8 	.word	0x200077e8

08004320 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8004324:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8004328:	f000 fee4 	bl	80050f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800432c:	bf00      	nop
 800432e:	bd80      	pop	{r7, pc}

08004330 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b086      	sub	sp, #24
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004338:	4a14      	ldr	r2, [pc, #80]	@ (800438c <_sbrk+0x5c>)
 800433a:	4b15      	ldr	r3, [pc, #84]	@ (8004390 <_sbrk+0x60>)
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004344:	4b13      	ldr	r3, [pc, #76]	@ (8004394 <_sbrk+0x64>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d102      	bne.n	8004352 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800434c:	4b11      	ldr	r3, [pc, #68]	@ (8004394 <_sbrk+0x64>)
 800434e:	4a12      	ldr	r2, [pc, #72]	@ (8004398 <_sbrk+0x68>)
 8004350:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004352:	4b10      	ldr	r3, [pc, #64]	@ (8004394 <_sbrk+0x64>)
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4413      	add	r3, r2
 800435a:	693a      	ldr	r2, [r7, #16]
 800435c:	429a      	cmp	r2, r3
 800435e:	d207      	bcs.n	8004370 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004360:	f00f fb2e 	bl	80139c0 <__errno>
 8004364:	4603      	mov	r3, r0
 8004366:	220c      	movs	r2, #12
 8004368:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800436a:	f04f 33ff 	mov.w	r3, #4294967295
 800436e:	e009      	b.n	8004384 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004370:	4b08      	ldr	r3, [pc, #32]	@ (8004394 <_sbrk+0x64>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004376:	4b07      	ldr	r3, [pc, #28]	@ (8004394 <_sbrk+0x64>)
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4413      	add	r3, r2
 800437e:	4a05      	ldr	r2, [pc, #20]	@ (8004394 <_sbrk+0x64>)
 8004380:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004382:	68fb      	ldr	r3, [r7, #12]
}
 8004384:	4618      	mov	r0, r3
 8004386:	3718      	adds	r7, #24
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}
 800438c:	20050000 	.word	0x20050000
 8004390:	00000800 	.word	0x00000800
 8004394:	200077e4 	.word	0x200077e4
 8004398:	2000c7b8 	.word	0x2000c7b8

0800439c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800439c:	b480      	push	{r7}
 800439e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80043a0:	4b06      	ldr	r3, [pc, #24]	@ (80043bc <SystemInit+0x20>)
 80043a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043a6:	4a05      	ldr	r2, [pc, #20]	@ (80043bc <SystemInit+0x20>)
 80043a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80043ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80043b0:	bf00      	nop
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr
 80043ba:	bf00      	nop
 80043bc:	e000ed00 	.word	0xe000ed00

080043c0 <MX_USART1_UART_Init>:
uint8_t txMsg[64];
uint8_t rxMsg[65];


void MX_USART1_UART_Init(void)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80043c4:	4b14      	ldr	r3, [pc, #80]	@ (8004418 <MX_USART1_UART_Init+0x58>)
 80043c6:	4a15      	ldr	r2, [pc, #84]	@ (800441c <MX_USART1_UART_Init+0x5c>)
 80043c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80043ca:	4b13      	ldr	r3, [pc, #76]	@ (8004418 <MX_USART1_UART_Init+0x58>)
 80043cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80043d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80043d2:	4b11      	ldr	r3, [pc, #68]	@ (8004418 <MX_USART1_UART_Init+0x58>)
 80043d4:	2200      	movs	r2, #0
 80043d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80043d8:	4b0f      	ldr	r3, [pc, #60]	@ (8004418 <MX_USART1_UART_Init+0x58>)
 80043da:	2200      	movs	r2, #0
 80043dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80043de:	4b0e      	ldr	r3, [pc, #56]	@ (8004418 <MX_USART1_UART_Init+0x58>)
 80043e0:	2200      	movs	r2, #0
 80043e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80043e4:	4b0c      	ldr	r3, [pc, #48]	@ (8004418 <MX_USART1_UART_Init+0x58>)
 80043e6:	220c      	movs	r2, #12
 80043e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80043ea:	4b0b      	ldr	r3, [pc, #44]	@ (8004418 <MX_USART1_UART_Init+0x58>)
 80043ec:	2200      	movs	r2, #0
 80043ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80043f0:	4b09      	ldr	r3, [pc, #36]	@ (8004418 <MX_USART1_UART_Init+0x58>)
 80043f2:	2200      	movs	r2, #0
 80043f4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80043f6:	4b08      	ldr	r3, [pc, #32]	@ (8004418 <MX_USART1_UART_Init+0x58>)
 80043f8:	2200      	movs	r2, #0
 80043fa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80043fc:	4b06      	ldr	r3, [pc, #24]	@ (8004418 <MX_USART1_UART_Init+0x58>)
 80043fe:	2200      	movs	r2, #0
 8004400:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004402:	4805      	ldr	r0, [pc, #20]	@ (8004418 <MX_USART1_UART_Init+0x58>)
 8004404:	f004 fbca 	bl	8008b9c <HAL_UART_Init>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d001      	beq.n	8004412 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800440e:	f7ff fc19 	bl	8003c44 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004412:	bf00      	nop
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	200077e8 	.word	0x200077e8
 800441c:	40011000 	.word	0x40011000

08004420 <ReceiveUartMessage>:


HAL_StatusTypeDef ReceiveUartMessage(UART_HandleTypeDef *huart, uint8_t *buffer, uint16_t size)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b086      	sub	sp, #24
 8004424:	af00      	add	r7, sp, #0
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	60b9      	str	r1, [r7, #8]
 800442a:	4613      	mov	r3, r2
 800442c:	80fb      	strh	r3, [r7, #6]
    uint8_t receivedByte;
    uint16_t rxBufferIndex = 0;
 800442e:	2300      	movs	r3, #0
 8004430:	82fb      	strh	r3, [r7, #22]
    while(1)
    {
        if(HAL_UART_Receive(huart, &receivedByte, 1, 1000) == HAL_OK)
 8004432:	f107 0115 	add.w	r1, r7, #21
 8004436:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800443a:	2201      	movs	r2, #1
 800443c:	68f8      	ldr	r0, [r7, #12]
 800443e:	f004 fc7e 	bl	8008d3e <HAL_UART_Receive>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d1f4      	bne.n	8004432 <ReceiveUartMessage+0x12>
        {
            if(receivedByte == '\n') // 종료 문자 감지
 8004448:	7d7b      	ldrb	r3, [r7, #21]
 800444a:	2b0a      	cmp	r3, #10
 800444c:	d106      	bne.n	800445c <ReceiveUartMessage+0x3c>
            {
                buffer[rxBufferIndex] = '\0'; // 문자열의 끝을 표시
 800444e:	8afb      	ldrh	r3, [r7, #22]
 8004450:	68ba      	ldr	r2, [r7, #8]
 8004452:	4413      	add	r3, r2
 8004454:	2200      	movs	r2, #0
 8004456:	701a      	strb	r2, [r3, #0]
                return HAL_OK;
 8004458:	2300      	movs	r3, #0
 800445a:	e012      	b.n	8004482 <ReceiveUartMessage+0x62>
            }
            else
            {
                buffer[rxBufferIndex] = receivedByte; // 문자 저장
 800445c:	8afb      	ldrh	r3, [r7, #22]
 800445e:	68ba      	ldr	r2, [r7, #8]
 8004460:	4413      	add	r3, r2
 8004462:	7d7a      	ldrb	r2, [r7, #21]
 8004464:	701a      	strb	r2, [r3, #0]
                rxBufferIndex++;
 8004466:	8afb      	ldrh	r3, [r7, #22]
 8004468:	3301      	adds	r3, #1
 800446a:	82fb      	strh	r3, [r7, #22]
                if(rxBufferIndex >= size) // 버퍼 초과 방지
 800446c:	8afa      	ldrh	r2, [r7, #22]
 800446e:	88fb      	ldrh	r3, [r7, #6]
 8004470:	429a      	cmp	r2, r3
 8004472:	d3de      	bcc.n	8004432 <ReceiveUartMessage+0x12>
                {
                    buffer[rxBufferIndex - 1] = '\0'; // 문자열의 끝을 표시
 8004474:	8afb      	ldrh	r3, [r7, #22]
 8004476:	3b01      	subs	r3, #1
 8004478:	68ba      	ldr	r2, [r7, #8]
 800447a:	4413      	add	r3, r2
 800447c:	2200      	movs	r2, #0
 800447e:	701a      	strb	r2, [r3, #0]
                    return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
                }
            }
        }
    }
}
 8004482:	4618      	mov	r0, r3
 8004484:	3718      	adds	r7, #24
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
	...

0800448c <startMsg>:

void startMsg(){
 800448c:	b580      	push	{r7, lr}
 800448e:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "--------------------------------------------------------------\n"), 100);
 8004490:	492c      	ldr	r1, [pc, #176]	@ (8004544 <startMsg+0xb8>)
 8004492:	482d      	ldr	r0, [pc, #180]	@ (8004548 <startMsg+0xbc>)
 8004494:	f00f f946 	bl	8013724 <siprintf>
 8004498:	4603      	mov	r3, r0
 800449a:	b29a      	uxth	r2, r3
 800449c:	2364      	movs	r3, #100	@ 0x64
 800449e:	492a      	ldr	r1, [pc, #168]	@ (8004548 <startMsg+0xbc>)
 80044a0:	482a      	ldr	r0, [pc, #168]	@ (800454c <startMsg+0xc0>)
 80044a2:	f004 fbc9 	bl	8008c38 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "--------------------------------------------------------------\n"), 100);
 80044a6:	4927      	ldr	r1, [pc, #156]	@ (8004544 <startMsg+0xb8>)
 80044a8:	4827      	ldr	r0, [pc, #156]	@ (8004548 <startMsg+0xbc>)
 80044aa:	f00f f93b 	bl	8013724 <siprintf>
 80044ae:	4603      	mov	r3, r0
 80044b0:	b29a      	uxth	r2, r3
 80044b2:	2364      	movs	r3, #100	@ 0x64
 80044b4:	4924      	ldr	r1, [pc, #144]	@ (8004548 <startMsg+0xbc>)
 80044b6:	4825      	ldr	r0, [pc, #148]	@ (800454c <startMsg+0xc0>)
 80044b8:	f004 fbbe 	bl	8008c38 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "----------- AI Inference for TACTS made by JaeHyeong----------\n"), 100);
 80044bc:	4924      	ldr	r1, [pc, #144]	@ (8004550 <startMsg+0xc4>)
 80044be:	4822      	ldr	r0, [pc, #136]	@ (8004548 <startMsg+0xbc>)
 80044c0:	f00f f930 	bl	8013724 <siprintf>
 80044c4:	4603      	mov	r3, r0
 80044c6:	b29a      	uxth	r2, r3
 80044c8:	2364      	movs	r3, #100	@ 0x64
 80044ca:	491f      	ldr	r1, [pc, #124]	@ (8004548 <startMsg+0xbc>)
 80044cc:	481f      	ldr	r0, [pc, #124]	@ (800454c <startMsg+0xc0>)
 80044ce:	f004 fbb3 	bl	8008c38 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "----------------- 1 : TOF sensor array -----------------------\n"), 100);
 80044d2:	4920      	ldr	r1, [pc, #128]	@ (8004554 <startMsg+0xc8>)
 80044d4:	481c      	ldr	r0, [pc, #112]	@ (8004548 <startMsg+0xbc>)
 80044d6:	f00f f925 	bl	8013724 <siprintf>
 80044da:	4603      	mov	r3, r0
 80044dc:	b29a      	uxth	r2, r3
 80044de:	2364      	movs	r3, #100	@ 0x64
 80044e0:	4919      	ldr	r1, [pc, #100]	@ (8004548 <startMsg+0xbc>)
 80044e2:	481a      	ldr	r0, [pc, #104]	@ (800454c <startMsg+0xc0>)
 80044e4:	f004 fba8 	bl	8008c38 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "----------------- 2 : TOF sensor array and AI output ---------\n"), 100);
 80044e8:	491b      	ldr	r1, [pc, #108]	@ (8004558 <startMsg+0xcc>)
 80044ea:	4817      	ldr	r0, [pc, #92]	@ (8004548 <startMsg+0xbc>)
 80044ec:	f00f f91a 	bl	8013724 <siprintf>
 80044f0:	4603      	mov	r3, r0
 80044f2:	b29a      	uxth	r2, r3
 80044f4:	2364      	movs	r3, #100	@ 0x64
 80044f6:	4914      	ldr	r1, [pc, #80]	@ (8004548 <startMsg+0xbc>)
 80044f8:	4814      	ldr	r0, [pc, #80]	@ (800454c <startMsg+0xc0>)
 80044fa:	f004 fb9d 	bl	8008c38 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "----------------- 3 : TOF Avg Std Force Z --------------------\n"), 100);
 80044fe:	4917      	ldr	r1, [pc, #92]	@ (800455c <startMsg+0xd0>)
 8004500:	4811      	ldr	r0, [pc, #68]	@ (8004548 <startMsg+0xbc>)
 8004502:	f00f f90f 	bl	8013724 <siprintf>
 8004506:	4603      	mov	r3, r0
 8004508:	b29a      	uxth	r2, r3
 800450a:	2364      	movs	r3, #100	@ 0x64
 800450c:	490e      	ldr	r1, [pc, #56]	@ (8004548 <startMsg+0xbc>)
 800450e:	480f      	ldr	r0, [pc, #60]	@ (800454c <startMsg+0xc0>)
 8004510:	f004 fb92 	bl	8008c38 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "--------------------------------------------------------------\n"), 100);
 8004514:	490b      	ldr	r1, [pc, #44]	@ (8004544 <startMsg+0xb8>)
 8004516:	480c      	ldr	r0, [pc, #48]	@ (8004548 <startMsg+0xbc>)
 8004518:	f00f f904 	bl	8013724 <siprintf>
 800451c:	4603      	mov	r3, r0
 800451e:	b29a      	uxth	r2, r3
 8004520:	2364      	movs	r3, #100	@ 0x64
 8004522:	4909      	ldr	r1, [pc, #36]	@ (8004548 <startMsg+0xbc>)
 8004524:	4809      	ldr	r0, [pc, #36]	@ (800454c <startMsg+0xc0>)
 8004526:	f004 fb87 	bl	8008c38 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "--------------------------------------------------------------\n"), 100);
 800452a:	4906      	ldr	r1, [pc, #24]	@ (8004544 <startMsg+0xb8>)
 800452c:	4806      	ldr	r0, [pc, #24]	@ (8004548 <startMsg+0xbc>)
 800452e:	f00f f8f9 	bl	8013724 <siprintf>
 8004532:	4603      	mov	r3, r0
 8004534:	b29a      	uxth	r2, r3
 8004536:	2364      	movs	r3, #100	@ 0x64
 8004538:	4903      	ldr	r1, [pc, #12]	@ (8004548 <startMsg+0xbc>)
 800453a:	4804      	ldr	r0, [pc, #16]	@ (800454c <startMsg+0xc0>)
 800453c:	f004 fb7c 	bl	8008c38 <HAL_UART_Transmit>
}
 8004540:	bf00      	nop
 8004542:	bd80      	pop	{r7, pc}
 8004544:	08018a20 	.word	0x08018a20
 8004548:	20007870 	.word	0x20007870
 800454c:	200077e8 	.word	0x200077e8
 8004550:	08018a60 	.word	0x08018a60
 8004554:	08018aa0 	.word	0x08018aa0
 8004558:	08018ae0 	.word	0x08018ae0
 800455c:	08018b20 	.word	0x08018b20

08004560 <ResetAllDevices>:
    }
}
#endif


void ResetAllDevices() {
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af02      	add	r7, sp, #8
  for (int j = 0; j < tcaLength; ++j) {
 8004566:	2300      	movs	r3, #0
 8004568:	607b      	str	r3, [r7, #4]
 800456a:	e010      	b.n	800458e <ResetAllDevices+0x2e>
	  HAL_I2C_Master_Transmit(&hi2c1, tca_addr[j] << 1, &tca_ch_reset, 1, 1000);
 800456c:	4a0d      	ldr	r2, [pc, #52]	@ (80045a4 <ResetAllDevices+0x44>)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4413      	add	r3, r2
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	005b      	lsls	r3, r3, #1
 8004576:	b299      	uxth	r1, r3
 8004578:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800457c:	9300      	str	r3, [sp, #0]
 800457e:	2301      	movs	r3, #1
 8004580:	4a09      	ldr	r2, [pc, #36]	@ (80045a8 <ResetAllDevices+0x48>)
 8004582:	480a      	ldr	r0, [pc, #40]	@ (80045ac <ResetAllDevices+0x4c>)
 8004584:	f000 fe6a 	bl	800525c <HAL_I2C_Master_Transmit>
  for (int j = 0; j < tcaLength; ++j) {
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	3301      	adds	r3, #1
 800458c:	607b      	str	r3, [r7, #4]
 800458e:	4b08      	ldr	r3, [pc, #32]	@ (80045b0 <ResetAllDevices+0x50>)
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	461a      	mov	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4293      	cmp	r3, r2
 8004598:	dbe8      	blt.n	800456c <ResetAllDevices+0xc>
  }
}
 800459a:	bf00      	nop
 800459c:	bf00      	nop
 800459e:	3708      	adds	r7, #8
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	2000016c 	.word	0x2000016c
 80045a8:	2000c564 	.word	0x2000c564
 80045ac:	200072a0 	.word	0x200072a0
 80045b0:	20000174 	.word	0x20000174

080045b4 <ResetDevicesExcept>:

void ResetDevicesExcept(uint8_t active_device) {
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b086      	sub	sp, #24
 80045b8:	af02      	add	r7, sp, #8
 80045ba:	4603      	mov	r3, r0
 80045bc:	71fb      	strb	r3, [r7, #7]
    for (int j = 0; j < tcaLength; ++j) {
 80045be:	2300      	movs	r3, #0
 80045c0:	60fb      	str	r3, [r7, #12]
 80045c2:	e014      	b.n	80045ee <ResetDevicesExcept+0x3a>
        if (j != active_device) {
 80045c4:	79fb      	ldrb	r3, [r7, #7]
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d00d      	beq.n	80045e8 <ResetDevicesExcept+0x34>
            HAL_I2C_Master_Transmit(&hi2c1, tca_addr[j] << 1, &tca_ch_reset, 1, 1000);
 80045cc:	4a0d      	ldr	r2, [pc, #52]	@ (8004604 <ResetDevicesExcept+0x50>)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	4413      	add	r3, r2
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	005b      	lsls	r3, r3, #1
 80045d6:	b299      	uxth	r1, r3
 80045d8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80045dc:	9300      	str	r3, [sp, #0]
 80045de:	2301      	movs	r3, #1
 80045e0:	4a09      	ldr	r2, [pc, #36]	@ (8004608 <ResetDevicesExcept+0x54>)
 80045e2:	480a      	ldr	r0, [pc, #40]	@ (800460c <ResetDevicesExcept+0x58>)
 80045e4:	f000 fe3a 	bl	800525c <HAL_I2C_Master_Transmit>
    for (int j = 0; j < tcaLength; ++j) {
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	3301      	adds	r3, #1
 80045ec:	60fb      	str	r3, [r7, #12]
 80045ee:	4b08      	ldr	r3, [pc, #32]	@ (8004610 <ResetDevicesExcept+0x5c>)
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	461a      	mov	r2, r3
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	4293      	cmp	r3, r2
 80045f8:	dbe4      	blt.n	80045c4 <ResetDevicesExcept+0x10>
        }
    }
}
 80045fa:	bf00      	nop
 80045fc:	bf00      	nop
 80045fe:	3710      	adds	r7, #16
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}
 8004604:	2000016c 	.word	0x2000016c
 8004608:	2000c564 	.word	0x2000c564
 800460c:	200072a0 	.word	0x200072a0
 8004610:	20000174 	.word	0x20000174

08004614 <setActiveTcaChannel>:

void setActiveTcaChannel(uint8_t active_device, uint8_t channel){
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af02      	add	r7, sp, #8
 800461a:	4603      	mov	r3, r0
 800461c:	460a      	mov	r2, r1
 800461e:	71fb      	strb	r3, [r7, #7]
 8004620:	4613      	mov	r3, r2
 8004622:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(&hi2c1, tca_addr[active_device] << 1, &tca_ch[channel], 1, 1000);
 8004624:	79fb      	ldrb	r3, [r7, #7]
 8004626:	4a09      	ldr	r2, [pc, #36]	@ (800464c <setActiveTcaChannel+0x38>)
 8004628:	5cd3      	ldrb	r3, [r2, r3]
 800462a:	005b      	lsls	r3, r3, #1
 800462c:	b299      	uxth	r1, r3
 800462e:	79bb      	ldrb	r3, [r7, #6]
 8004630:	4a07      	ldr	r2, [pc, #28]	@ (8004650 <setActiveTcaChannel+0x3c>)
 8004632:	441a      	add	r2, r3
 8004634:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004638:	9300      	str	r3, [sp, #0]
 800463a:	2301      	movs	r3, #1
 800463c:	4805      	ldr	r0, [pc, #20]	@ (8004654 <setActiveTcaChannel+0x40>)
 800463e:	f000 fe0d 	bl	800525c <HAL_I2C_Master_Transmit>
}
 8004642:	bf00      	nop
 8004644:	3708      	adds	r7, #8
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	2000016c 	.word	0x2000016c
 8004650:	20000160 	.word	0x20000160
 8004654:	200072a0 	.word	0x200072a0

08004658 <setOnAllDevices>:

void setOnAllDevices(){
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af02      	add	r7, sp, #8
  for (int j = 0; j < tcaLength; ++j) {
 800465e:	2300      	movs	r3, #0
 8004660:	607b      	str	r3, [r7, #4]
 8004662:	e010      	b.n	8004686 <setOnAllDevices+0x2e>
	  HAL_I2C_Master_Transmit(&hi2c1, tca_addr[j] << 1, &tca_ch_all_on, 1, 1000);
 8004664:	4a0d      	ldr	r2, [pc, #52]	@ (800469c <setOnAllDevices+0x44>)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4413      	add	r3, r2
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	005b      	lsls	r3, r3, #1
 800466e:	b299      	uxth	r1, r3
 8004670:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004674:	9300      	str	r3, [sp, #0]
 8004676:	2301      	movs	r3, #1
 8004678:	4a09      	ldr	r2, [pc, #36]	@ (80046a0 <setOnAllDevices+0x48>)
 800467a:	480a      	ldr	r0, [pc, #40]	@ (80046a4 <setOnAllDevices+0x4c>)
 800467c:	f000 fdee 	bl	800525c <HAL_I2C_Master_Transmit>
  for (int j = 0; j < tcaLength; ++j) {
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	3301      	adds	r3, #1
 8004684:	607b      	str	r3, [r7, #4]
 8004686:	4b08      	ldr	r3, [pc, #32]	@ (80046a8 <setOnAllDevices+0x50>)
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	461a      	mov	r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	4293      	cmp	r3, r2
 8004690:	dbe8      	blt.n	8004664 <setOnAllDevices+0xc>
  }


}
 8004692:	bf00      	nop
 8004694:	bf00      	nop
 8004696:	3708      	adds	r7, #8
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}
 800469c:	2000016c 	.word	0x2000016c
 80046a0:	20000168 	.word	0x20000168
 80046a4:	200072a0 	.word	0x200072a0
 80046a8:	20000174 	.word	0x20000174

080046ac <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack      /* set stack pointer */
 80046ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80046e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80046b0:	480d      	ldr	r0, [pc, #52]	@ (80046e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80046b2:	490e      	ldr	r1, [pc, #56]	@ (80046ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80046b4:	4a0e      	ldr	r2, [pc, #56]	@ (80046f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80046b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80046b8:	e002      	b.n	80046c0 <LoopCopyDataInit>

080046ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80046ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80046bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80046be:	3304      	adds	r3, #4

080046c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80046c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80046c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80046c4:	d3f9      	bcc.n	80046ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80046c6:	4a0b      	ldr	r2, [pc, #44]	@ (80046f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80046c8:	4c0b      	ldr	r4, [pc, #44]	@ (80046f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80046ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80046cc:	e001      	b.n	80046d2 <LoopFillZerobss>

080046ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80046ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80046d0:	3204      	adds	r2, #4

080046d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80046d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80046d4:	d3fb      	bcc.n	80046ce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80046d6:	f7ff fe61 	bl	800439c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80046da:	f00f f977 	bl	80139cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80046de:	f7ff f889 	bl	80037f4 <main>
  bx  lr    
 80046e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80046e4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80046e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80046ec:	20001638 	.word	0x20001638
  ldr r2, =_sidata
 80046f0:	0805db50 	.word	0x0805db50
  ldr r2, =_sbss
 80046f4:	20001640 	.word	0x20001640
  ldr r4, =_ebss
 80046f8:	2000c7b4 	.word	0x2000c7b4

080046fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80046fc:	e7fe      	b.n	80046fc <ADC_IRQHandler>

080046fe <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80046fe:	b580      	push	{r7, lr}
 8004700:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004702:	2003      	movs	r0, #3
 8004704:	f000 f94c 	bl	80049a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004708:	200f      	movs	r0, #15
 800470a:	f000 f805 	bl	8004718 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800470e:	f7ff fc21 	bl	8003f54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004712:	2300      	movs	r3, #0
}
 8004714:	4618      	mov	r0, r3
 8004716:	bd80      	pop	{r7, pc}

08004718 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004720:	4b12      	ldr	r3, [pc, #72]	@ (800476c <HAL_InitTick+0x54>)
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	4b12      	ldr	r3, [pc, #72]	@ (8004770 <HAL_InitTick+0x58>)
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	4619      	mov	r1, r3
 800472a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800472e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004732:	fbb2 f3f3 	udiv	r3, r2, r3
 8004736:	4618      	mov	r0, r3
 8004738:	f000 f967 	bl	8004a0a <HAL_SYSTICK_Config>
 800473c:	4603      	mov	r3, r0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d001      	beq.n	8004746 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e00e      	b.n	8004764 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2b0f      	cmp	r3, #15
 800474a:	d80a      	bhi.n	8004762 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800474c:	2200      	movs	r2, #0
 800474e:	6879      	ldr	r1, [r7, #4]
 8004750:	f04f 30ff 	mov.w	r0, #4294967295
 8004754:	f000 f92f 	bl	80049b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004758:	4a06      	ldr	r2, [pc, #24]	@ (8004774 <HAL_InitTick+0x5c>)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800475e:	2300      	movs	r3, #0
 8004760:	e000      	b.n	8004764 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
}
 8004764:	4618      	mov	r0, r3
 8004766:	3708      	adds	r7, #8
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}
 800476c:	2000000c 	.word	0x2000000c
 8004770:	2000030c 	.word	0x2000030c
 8004774:	20000308 	.word	0x20000308

08004778 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004778:	b480      	push	{r7}
 800477a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800477c:	4b06      	ldr	r3, [pc, #24]	@ (8004798 <HAL_IncTick+0x20>)
 800477e:	781b      	ldrb	r3, [r3, #0]
 8004780:	461a      	mov	r2, r3
 8004782:	4b06      	ldr	r3, [pc, #24]	@ (800479c <HAL_IncTick+0x24>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4413      	add	r3, r2
 8004788:	4a04      	ldr	r2, [pc, #16]	@ (800479c <HAL_IncTick+0x24>)
 800478a:	6013      	str	r3, [r2, #0]
}
 800478c:	bf00      	nop
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
 8004796:	bf00      	nop
 8004798:	2000030c 	.word	0x2000030c
 800479c:	2000c568 	.word	0x2000c568

080047a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80047a0:	b480      	push	{r7}
 80047a2:	af00      	add	r7, sp, #0
  return uwTick;
 80047a4:	4b03      	ldr	r3, [pc, #12]	@ (80047b4 <HAL_GetTick+0x14>)
 80047a6:	681b      	ldr	r3, [r3, #0]
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr
 80047b2:	bf00      	nop
 80047b4:	2000c568 	.word	0x2000c568

080047b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80047c0:	f7ff ffee 	bl	80047a0 <HAL_GetTick>
 80047c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047d0:	d005      	beq.n	80047de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80047d2:	4b0a      	ldr	r3, [pc, #40]	@ (80047fc <HAL_Delay+0x44>)
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	461a      	mov	r2, r3
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	4413      	add	r3, r2
 80047dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80047de:	bf00      	nop
 80047e0:	f7ff ffde 	bl	80047a0 <HAL_GetTick>
 80047e4:	4602      	mov	r2, r0
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d8f7      	bhi.n	80047e0 <HAL_Delay+0x28>
  {
  }
}
 80047f0:	bf00      	nop
 80047f2:	bf00      	nop
 80047f4:	3710      	adds	r7, #16
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	2000030c 	.word	0x2000030c

08004800 <__NVIC_SetPriorityGrouping>:
{
 8004800:	b480      	push	{r7}
 8004802:	b085      	sub	sp, #20
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f003 0307 	and.w	r3, r3, #7
 800480e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004810:	4b0b      	ldr	r3, [pc, #44]	@ (8004840 <__NVIC_SetPriorityGrouping+0x40>)
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004816:	68ba      	ldr	r2, [r7, #8]
 8004818:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800481c:	4013      	ands	r3, r2
 800481e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004828:	4b06      	ldr	r3, [pc, #24]	@ (8004844 <__NVIC_SetPriorityGrouping+0x44>)
 800482a:	4313      	orrs	r3, r2
 800482c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800482e:	4a04      	ldr	r2, [pc, #16]	@ (8004840 <__NVIC_SetPriorityGrouping+0x40>)
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	60d3      	str	r3, [r2, #12]
}
 8004834:	bf00      	nop
 8004836:	3714      	adds	r7, #20
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr
 8004840:	e000ed00 	.word	0xe000ed00
 8004844:	05fa0000 	.word	0x05fa0000

08004848 <__NVIC_GetPriorityGrouping>:
{
 8004848:	b480      	push	{r7}
 800484a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800484c:	4b04      	ldr	r3, [pc, #16]	@ (8004860 <__NVIC_GetPriorityGrouping+0x18>)
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	0a1b      	lsrs	r3, r3, #8
 8004852:	f003 0307 	and.w	r3, r3, #7
}
 8004856:	4618      	mov	r0, r3
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr
 8004860:	e000ed00 	.word	0xe000ed00

08004864 <__NVIC_EnableIRQ>:
{
 8004864:	b480      	push	{r7}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
 800486a:	4603      	mov	r3, r0
 800486c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800486e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004872:	2b00      	cmp	r3, #0
 8004874:	db0b      	blt.n	800488e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004876:	79fb      	ldrb	r3, [r7, #7]
 8004878:	f003 021f 	and.w	r2, r3, #31
 800487c:	4907      	ldr	r1, [pc, #28]	@ (800489c <__NVIC_EnableIRQ+0x38>)
 800487e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004882:	095b      	lsrs	r3, r3, #5
 8004884:	2001      	movs	r0, #1
 8004886:	fa00 f202 	lsl.w	r2, r0, r2
 800488a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800488e:	bf00      	nop
 8004890:	370c      	adds	r7, #12
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr
 800489a:	bf00      	nop
 800489c:	e000e100 	.word	0xe000e100

080048a0 <__NVIC_SetPriority>:
{
 80048a0:	b480      	push	{r7}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	4603      	mov	r3, r0
 80048a8:	6039      	str	r1, [r7, #0]
 80048aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	db0a      	blt.n	80048ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	b2da      	uxtb	r2, r3
 80048b8:	490c      	ldr	r1, [pc, #48]	@ (80048ec <__NVIC_SetPriority+0x4c>)
 80048ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048be:	0112      	lsls	r2, r2, #4
 80048c0:	b2d2      	uxtb	r2, r2
 80048c2:	440b      	add	r3, r1
 80048c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80048c8:	e00a      	b.n	80048e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	b2da      	uxtb	r2, r3
 80048ce:	4908      	ldr	r1, [pc, #32]	@ (80048f0 <__NVIC_SetPriority+0x50>)
 80048d0:	79fb      	ldrb	r3, [r7, #7]
 80048d2:	f003 030f 	and.w	r3, r3, #15
 80048d6:	3b04      	subs	r3, #4
 80048d8:	0112      	lsls	r2, r2, #4
 80048da:	b2d2      	uxtb	r2, r2
 80048dc:	440b      	add	r3, r1
 80048de:	761a      	strb	r2, [r3, #24]
}
 80048e0:	bf00      	nop
 80048e2:	370c      	adds	r7, #12
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr
 80048ec:	e000e100 	.word	0xe000e100
 80048f0:	e000ed00 	.word	0xe000ed00

080048f4 <NVIC_EncodePriority>:
{
 80048f4:	b480      	push	{r7}
 80048f6:	b089      	sub	sp, #36	@ 0x24
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	60b9      	str	r1, [r7, #8]
 80048fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f003 0307 	and.w	r3, r3, #7
 8004906:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	f1c3 0307 	rsb	r3, r3, #7
 800490e:	2b04      	cmp	r3, #4
 8004910:	bf28      	it	cs
 8004912:	2304      	movcs	r3, #4
 8004914:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	3304      	adds	r3, #4
 800491a:	2b06      	cmp	r3, #6
 800491c:	d902      	bls.n	8004924 <NVIC_EncodePriority+0x30>
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	3b03      	subs	r3, #3
 8004922:	e000      	b.n	8004926 <NVIC_EncodePriority+0x32>
 8004924:	2300      	movs	r3, #0
 8004926:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004928:	f04f 32ff 	mov.w	r2, #4294967295
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	fa02 f303 	lsl.w	r3, r2, r3
 8004932:	43da      	mvns	r2, r3
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	401a      	ands	r2, r3
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800493c:	f04f 31ff 	mov.w	r1, #4294967295
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	fa01 f303 	lsl.w	r3, r1, r3
 8004946:	43d9      	mvns	r1, r3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800494c:	4313      	orrs	r3, r2
}
 800494e:	4618      	mov	r0, r3
 8004950:	3724      	adds	r7, #36	@ 0x24
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr
	...

0800495c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b082      	sub	sp, #8
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	3b01      	subs	r3, #1
 8004968:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800496c:	d301      	bcc.n	8004972 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800496e:	2301      	movs	r3, #1
 8004970:	e00f      	b.n	8004992 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004972:	4a0a      	ldr	r2, [pc, #40]	@ (800499c <SysTick_Config+0x40>)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	3b01      	subs	r3, #1
 8004978:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800497a:	210f      	movs	r1, #15
 800497c:	f04f 30ff 	mov.w	r0, #4294967295
 8004980:	f7ff ff8e 	bl	80048a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004984:	4b05      	ldr	r3, [pc, #20]	@ (800499c <SysTick_Config+0x40>)
 8004986:	2200      	movs	r2, #0
 8004988:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800498a:	4b04      	ldr	r3, [pc, #16]	@ (800499c <SysTick_Config+0x40>)
 800498c:	2207      	movs	r2, #7
 800498e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	3708      	adds	r7, #8
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	e000e010 	.word	0xe000e010

080049a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b082      	sub	sp, #8
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f7ff ff29 	bl	8004800 <__NVIC_SetPriorityGrouping>
}
 80049ae:	bf00      	nop
 80049b0:	3708      	adds	r7, #8
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}

080049b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80049b6:	b580      	push	{r7, lr}
 80049b8:	b086      	sub	sp, #24
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	4603      	mov	r3, r0
 80049be:	60b9      	str	r1, [r7, #8]
 80049c0:	607a      	str	r2, [r7, #4]
 80049c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80049c4:	2300      	movs	r3, #0
 80049c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80049c8:	f7ff ff3e 	bl	8004848 <__NVIC_GetPriorityGrouping>
 80049cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	68b9      	ldr	r1, [r7, #8]
 80049d2:	6978      	ldr	r0, [r7, #20]
 80049d4:	f7ff ff8e 	bl	80048f4 <NVIC_EncodePriority>
 80049d8:	4602      	mov	r2, r0
 80049da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049de:	4611      	mov	r1, r2
 80049e0:	4618      	mov	r0, r3
 80049e2:	f7ff ff5d 	bl	80048a0 <__NVIC_SetPriority>
}
 80049e6:	bf00      	nop
 80049e8:	3718      	adds	r7, #24
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}

080049ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049ee:	b580      	push	{r7, lr}
 80049f0:	b082      	sub	sp, #8
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	4603      	mov	r3, r0
 80049f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80049f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049fc:	4618      	mov	r0, r3
 80049fe:	f7ff ff31 	bl	8004864 <__NVIC_EnableIRQ>
}
 8004a02:	bf00      	nop
 8004a04:	3708      	adds	r7, #8
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}

08004a0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004a0a:	b580      	push	{r7, lr}
 8004a0c:	b082      	sub	sp, #8
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f7ff ffa2 	bl	800495c <SysTick_Config>
 8004a18:	4603      	mov	r3, r0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3708      	adds	r7, #8
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
	...

08004a24 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b082      	sub	sp, #8
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d101      	bne.n	8004a36 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e054      	b.n	8004ae0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	7f5b      	ldrb	r3, [r3, #29]
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d105      	bne.n	8004a4c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f7ff faae 	bl	8003fa8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2202      	movs	r2, #2
 8004a50:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	791b      	ldrb	r3, [r3, #4]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d10c      	bne.n	8004a74 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a22      	ldr	r2, [pc, #136]	@ (8004ae8 <HAL_CRC_Init+0xc4>)
 8004a60:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	689a      	ldr	r2, [r3, #8]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f022 0218 	bic.w	r2, r2, #24
 8004a70:	609a      	str	r2, [r3, #8]
 8004a72:	e00c      	b.n	8004a8e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6899      	ldr	r1, [r3, #8]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f000 f834 	bl	8004aec <HAL_CRCEx_Polynomial_Set>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d001      	beq.n	8004a8e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e028      	b.n	8004ae0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	795b      	ldrb	r3, [r3, #5]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d105      	bne.n	8004aa2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f04f 32ff 	mov.w	r2, #4294967295
 8004a9e:	611a      	str	r2, [r3, #16]
 8004aa0:	e004      	b.n	8004aac <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	6912      	ldr	r2, [r2, #16]
 8004aaa:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	695a      	ldr	r2, [r3, #20]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	430a      	orrs	r2, r1
 8004ac0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	699a      	ldr	r2, [r3, #24]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	430a      	orrs	r2, r1
 8004ad6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004ade:	2300      	movs	r3, #0
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3708      	adds	r7, #8
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	04c11db7 	.word	0x04c11db7

08004aec <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b087      	sub	sp, #28
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	60b9      	str	r1, [r7, #8]
 8004af6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004af8:	2300      	movs	r3, #0
 8004afa:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004afc:	231f      	movs	r3, #31
 8004afe:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004b00:	bf00      	nop
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	1e5a      	subs	r2, r3, #1
 8004b06:	613a      	str	r2, [r7, #16]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d009      	beq.n	8004b20 <HAL_CRCEx_Polynomial_Set+0x34>
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	f003 031f 	and.w	r3, r3, #31
 8004b12:	68ba      	ldr	r2, [r7, #8]
 8004b14:	fa22 f303 	lsr.w	r3, r2, r3
 8004b18:	f003 0301 	and.w	r3, r3, #1
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d0f0      	beq.n	8004b02 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2b18      	cmp	r3, #24
 8004b24:	d846      	bhi.n	8004bb4 <HAL_CRCEx_Polynomial_Set+0xc8>
 8004b26:	a201      	add	r2, pc, #4	@ (adr r2, 8004b2c <HAL_CRCEx_Polynomial_Set+0x40>)
 8004b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b2c:	08004bbb 	.word	0x08004bbb
 8004b30:	08004bb5 	.word	0x08004bb5
 8004b34:	08004bb5 	.word	0x08004bb5
 8004b38:	08004bb5 	.word	0x08004bb5
 8004b3c:	08004bb5 	.word	0x08004bb5
 8004b40:	08004bb5 	.word	0x08004bb5
 8004b44:	08004bb5 	.word	0x08004bb5
 8004b48:	08004bb5 	.word	0x08004bb5
 8004b4c:	08004ba9 	.word	0x08004ba9
 8004b50:	08004bb5 	.word	0x08004bb5
 8004b54:	08004bb5 	.word	0x08004bb5
 8004b58:	08004bb5 	.word	0x08004bb5
 8004b5c:	08004bb5 	.word	0x08004bb5
 8004b60:	08004bb5 	.word	0x08004bb5
 8004b64:	08004bb5 	.word	0x08004bb5
 8004b68:	08004bb5 	.word	0x08004bb5
 8004b6c:	08004b9d 	.word	0x08004b9d
 8004b70:	08004bb5 	.word	0x08004bb5
 8004b74:	08004bb5 	.word	0x08004bb5
 8004b78:	08004bb5 	.word	0x08004bb5
 8004b7c:	08004bb5 	.word	0x08004bb5
 8004b80:	08004bb5 	.word	0x08004bb5
 8004b84:	08004bb5 	.word	0x08004bb5
 8004b88:	08004bb5 	.word	0x08004bb5
 8004b8c:	08004b91 	.word	0x08004b91
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	2b06      	cmp	r3, #6
 8004b94:	d913      	bls.n	8004bbe <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004b9a:	e010      	b.n	8004bbe <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	2b07      	cmp	r3, #7
 8004ba0:	d90f      	bls.n	8004bc2 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004ba6:	e00c      	b.n	8004bc2 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	2b0f      	cmp	r3, #15
 8004bac:	d90b      	bls.n	8004bc6 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004bb2:	e008      	b.n	8004bc6 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	75fb      	strb	r3, [r7, #23]
      break;
 8004bb8:	e006      	b.n	8004bc8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004bba:	bf00      	nop
 8004bbc:	e004      	b.n	8004bc8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004bbe:	bf00      	nop
 8004bc0:	e002      	b.n	8004bc8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004bc2:	bf00      	nop
 8004bc4:	e000      	b.n	8004bc8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004bc6:	bf00      	nop
  }
  if (status == HAL_OK)
 8004bc8:	7dfb      	ldrb	r3, [r7, #23]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d10d      	bne.n	8004bea <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	68ba      	ldr	r2, [r7, #8]
 8004bd4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	f023 0118 	bic.w	r1, r3, #24
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	430a      	orrs	r2, r1
 8004be8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004bea:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	371c      	adds	r7, #28
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr

08004bf8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c04:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004c06:	f7ff fdcb 	bl	80047a0 <HAL_GetTick>
 8004c0a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	2b02      	cmp	r3, #2
 8004c16:	d008      	beq.n	8004c2a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2280      	movs	r2, #128	@ 0x80
 8004c1c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e052      	b.n	8004cd0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f022 0216 	bic.w	r2, r2, #22
 8004c38:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	695a      	ldr	r2, [r3, #20]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004c48:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d103      	bne.n	8004c5a <HAL_DMA_Abort+0x62>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d007      	beq.n	8004c6a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f022 0208 	bic.w	r2, r2, #8
 8004c68:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f022 0201 	bic.w	r2, r2, #1
 8004c78:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c7a:	e013      	b.n	8004ca4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004c7c:	f7ff fd90 	bl	80047a0 <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	2b05      	cmp	r3, #5
 8004c88:	d90c      	bls.n	8004ca4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2220      	movs	r2, #32
 8004c8e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2203      	movs	r2, #3
 8004c94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	e015      	b.n	8004cd0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 0301 	and.w	r3, r3, #1
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d1e4      	bne.n	8004c7c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cb6:	223f      	movs	r2, #63	@ 0x3f
 8004cb8:	409a      	lsls	r2, r3
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3710      	adds	r7, #16
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	d004      	beq.n	8004cf6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2280      	movs	r2, #128	@ 0x80
 8004cf0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e00c      	b.n	8004d10 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2205      	movs	r2, #5
 8004cfa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f022 0201 	bic.w	r2, r2, #1
 8004d0c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004d0e:	2300      	movs	r3, #0
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	370c      	adds	r7, #12
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr

08004d1c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b083      	sub	sp, #12
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004d2a:	b2db      	uxtb	r3, r3
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	370c      	adds	r7, #12
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b089      	sub	sp, #36	@ 0x24
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004d42:	2300      	movs	r3, #0
 8004d44:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004d46:	2300      	movs	r3, #0
 8004d48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004d52:	2300      	movs	r3, #0
 8004d54:	61fb      	str	r3, [r7, #28]
 8004d56:	e175      	b.n	8005044 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004d58:	2201      	movs	r2, #1
 8004d5a:	69fb      	ldr	r3, [r7, #28]
 8004d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	697a      	ldr	r2, [r7, #20]
 8004d68:	4013      	ands	r3, r2
 8004d6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004d6c:	693a      	ldr	r2, [r7, #16]
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	429a      	cmp	r2, r3
 8004d72:	f040 8164 	bne.w	800503e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	f003 0303 	and.w	r3, r3, #3
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d005      	beq.n	8004d8e <HAL_GPIO_Init+0x56>
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	f003 0303 	and.w	r3, r3, #3
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d130      	bne.n	8004df0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	005b      	lsls	r3, r3, #1
 8004d98:	2203      	movs	r2, #3
 8004d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d9e:	43db      	mvns	r3, r3
 8004da0:	69ba      	ldr	r2, [r7, #24]
 8004da2:	4013      	ands	r3, r2
 8004da4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	68da      	ldr	r2, [r3, #12]
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	005b      	lsls	r3, r3, #1
 8004dae:	fa02 f303 	lsl.w	r3, r2, r3
 8004db2:	69ba      	ldr	r2, [r7, #24]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	69ba      	ldr	r2, [r7, #24]
 8004dbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dcc:	43db      	mvns	r3, r3
 8004dce:	69ba      	ldr	r2, [r7, #24]
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	091b      	lsrs	r3, r3, #4
 8004dda:	f003 0201 	and.w	r2, r3, #1
 8004dde:	69fb      	ldr	r3, [r7, #28]
 8004de0:	fa02 f303 	lsl.w	r3, r2, r3
 8004de4:	69ba      	ldr	r2, [r7, #24]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	69ba      	ldr	r2, [r7, #24]
 8004dee:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	f003 0303 	and.w	r3, r3, #3
 8004df8:	2b03      	cmp	r3, #3
 8004dfa:	d017      	beq.n	8004e2c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	005b      	lsls	r3, r3, #1
 8004e06:	2203      	movs	r2, #3
 8004e08:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0c:	43db      	mvns	r3, r3
 8004e0e:	69ba      	ldr	r2, [r7, #24]
 8004e10:	4013      	ands	r3, r2
 8004e12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	689a      	ldr	r2, [r3, #8]
 8004e18:	69fb      	ldr	r3, [r7, #28]
 8004e1a:	005b      	lsls	r3, r3, #1
 8004e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e20:	69ba      	ldr	r2, [r7, #24]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	69ba      	ldr	r2, [r7, #24]
 8004e2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	f003 0303 	and.w	r3, r3, #3
 8004e34:	2b02      	cmp	r3, #2
 8004e36:	d123      	bne.n	8004e80 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	08da      	lsrs	r2, r3, #3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	3208      	adds	r2, #8
 8004e40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004e46:	69fb      	ldr	r3, [r7, #28]
 8004e48:	f003 0307 	and.w	r3, r3, #7
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	220f      	movs	r2, #15
 8004e50:	fa02 f303 	lsl.w	r3, r2, r3
 8004e54:	43db      	mvns	r3, r3
 8004e56:	69ba      	ldr	r2, [r7, #24]
 8004e58:	4013      	ands	r3, r2
 8004e5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	691a      	ldr	r2, [r3, #16]
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	f003 0307 	and.w	r3, r3, #7
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	fa02 f303 	lsl.w	r3, r2, r3
 8004e6c:	69ba      	ldr	r2, [r7, #24]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	08da      	lsrs	r2, r3, #3
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	3208      	adds	r2, #8
 8004e7a:	69b9      	ldr	r1, [r7, #24]
 8004e7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	005b      	lsls	r3, r3, #1
 8004e8a:	2203      	movs	r2, #3
 8004e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e90:	43db      	mvns	r3, r3
 8004e92:	69ba      	ldr	r2, [r7, #24]
 8004e94:	4013      	ands	r3, r2
 8004e96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	f003 0203 	and.w	r2, r3, #3
 8004ea0:	69fb      	ldr	r3, [r7, #28]
 8004ea2:	005b      	lsls	r3, r3, #1
 8004ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea8:	69ba      	ldr	r2, [r7, #24]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	69ba      	ldr	r2, [r7, #24]
 8004eb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	f000 80be 	beq.w	800503e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ec2:	4b66      	ldr	r3, [pc, #408]	@ (800505c <HAL_GPIO_Init+0x324>)
 8004ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ec6:	4a65      	ldr	r2, [pc, #404]	@ (800505c <HAL_GPIO_Init+0x324>)
 8004ec8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004ecc:	6453      	str	r3, [r2, #68]	@ 0x44
 8004ece:	4b63      	ldr	r3, [pc, #396]	@ (800505c <HAL_GPIO_Init+0x324>)
 8004ed0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ed2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ed6:	60fb      	str	r3, [r7, #12]
 8004ed8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004eda:	4a61      	ldr	r2, [pc, #388]	@ (8005060 <HAL_GPIO_Init+0x328>)
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	089b      	lsrs	r3, r3, #2
 8004ee0:	3302      	adds	r3, #2
 8004ee2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	f003 0303 	and.w	r3, r3, #3
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	220f      	movs	r2, #15
 8004ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef6:	43db      	mvns	r3, r3
 8004ef8:	69ba      	ldr	r2, [r7, #24]
 8004efa:	4013      	ands	r3, r2
 8004efc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a58      	ldr	r2, [pc, #352]	@ (8005064 <HAL_GPIO_Init+0x32c>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d037      	beq.n	8004f76 <HAL_GPIO_Init+0x23e>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a57      	ldr	r2, [pc, #348]	@ (8005068 <HAL_GPIO_Init+0x330>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d031      	beq.n	8004f72 <HAL_GPIO_Init+0x23a>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a56      	ldr	r2, [pc, #344]	@ (800506c <HAL_GPIO_Init+0x334>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d02b      	beq.n	8004f6e <HAL_GPIO_Init+0x236>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a55      	ldr	r2, [pc, #340]	@ (8005070 <HAL_GPIO_Init+0x338>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d025      	beq.n	8004f6a <HAL_GPIO_Init+0x232>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a54      	ldr	r2, [pc, #336]	@ (8005074 <HAL_GPIO_Init+0x33c>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d01f      	beq.n	8004f66 <HAL_GPIO_Init+0x22e>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4a53      	ldr	r2, [pc, #332]	@ (8005078 <HAL_GPIO_Init+0x340>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d019      	beq.n	8004f62 <HAL_GPIO_Init+0x22a>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4a52      	ldr	r2, [pc, #328]	@ (800507c <HAL_GPIO_Init+0x344>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d013      	beq.n	8004f5e <HAL_GPIO_Init+0x226>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4a51      	ldr	r2, [pc, #324]	@ (8005080 <HAL_GPIO_Init+0x348>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d00d      	beq.n	8004f5a <HAL_GPIO_Init+0x222>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	4a50      	ldr	r2, [pc, #320]	@ (8005084 <HAL_GPIO_Init+0x34c>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d007      	beq.n	8004f56 <HAL_GPIO_Init+0x21e>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4a4f      	ldr	r2, [pc, #316]	@ (8005088 <HAL_GPIO_Init+0x350>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d101      	bne.n	8004f52 <HAL_GPIO_Init+0x21a>
 8004f4e:	2309      	movs	r3, #9
 8004f50:	e012      	b.n	8004f78 <HAL_GPIO_Init+0x240>
 8004f52:	230a      	movs	r3, #10
 8004f54:	e010      	b.n	8004f78 <HAL_GPIO_Init+0x240>
 8004f56:	2308      	movs	r3, #8
 8004f58:	e00e      	b.n	8004f78 <HAL_GPIO_Init+0x240>
 8004f5a:	2307      	movs	r3, #7
 8004f5c:	e00c      	b.n	8004f78 <HAL_GPIO_Init+0x240>
 8004f5e:	2306      	movs	r3, #6
 8004f60:	e00a      	b.n	8004f78 <HAL_GPIO_Init+0x240>
 8004f62:	2305      	movs	r3, #5
 8004f64:	e008      	b.n	8004f78 <HAL_GPIO_Init+0x240>
 8004f66:	2304      	movs	r3, #4
 8004f68:	e006      	b.n	8004f78 <HAL_GPIO_Init+0x240>
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e004      	b.n	8004f78 <HAL_GPIO_Init+0x240>
 8004f6e:	2302      	movs	r3, #2
 8004f70:	e002      	b.n	8004f78 <HAL_GPIO_Init+0x240>
 8004f72:	2301      	movs	r3, #1
 8004f74:	e000      	b.n	8004f78 <HAL_GPIO_Init+0x240>
 8004f76:	2300      	movs	r3, #0
 8004f78:	69fa      	ldr	r2, [r7, #28]
 8004f7a:	f002 0203 	and.w	r2, r2, #3
 8004f7e:	0092      	lsls	r2, r2, #2
 8004f80:	4093      	lsls	r3, r2
 8004f82:	69ba      	ldr	r2, [r7, #24]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004f88:	4935      	ldr	r1, [pc, #212]	@ (8005060 <HAL_GPIO_Init+0x328>)
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	089b      	lsrs	r3, r3, #2
 8004f8e:	3302      	adds	r3, #2
 8004f90:	69ba      	ldr	r2, [r7, #24]
 8004f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004f96:	4b3d      	ldr	r3, [pc, #244]	@ (800508c <HAL_GPIO_Init+0x354>)
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	43db      	mvns	r3, r3
 8004fa0:	69ba      	ldr	r2, [r7, #24]
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d003      	beq.n	8004fba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004fb2:	69ba      	ldr	r2, [r7, #24]
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004fba:	4a34      	ldr	r2, [pc, #208]	@ (800508c <HAL_GPIO_Init+0x354>)
 8004fbc:	69bb      	ldr	r3, [r7, #24]
 8004fbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004fc0:	4b32      	ldr	r3, [pc, #200]	@ (800508c <HAL_GPIO_Init+0x354>)
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	43db      	mvns	r3, r3
 8004fca:	69ba      	ldr	r2, [r7, #24]
 8004fcc:	4013      	ands	r3, r2
 8004fce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d003      	beq.n	8004fe4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004fdc:	69ba      	ldr	r2, [r7, #24]
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004fe4:	4a29      	ldr	r2, [pc, #164]	@ (800508c <HAL_GPIO_Init+0x354>)
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004fea:	4b28      	ldr	r3, [pc, #160]	@ (800508c <HAL_GPIO_Init+0x354>)
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	43db      	mvns	r3, r3
 8004ff4:	69ba      	ldr	r2, [r7, #24]
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005002:	2b00      	cmp	r3, #0
 8005004:	d003      	beq.n	800500e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005006:	69ba      	ldr	r2, [r7, #24]
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	4313      	orrs	r3, r2
 800500c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800500e:	4a1f      	ldr	r2, [pc, #124]	@ (800508c <HAL_GPIO_Init+0x354>)
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005014:	4b1d      	ldr	r3, [pc, #116]	@ (800508c <HAL_GPIO_Init+0x354>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	43db      	mvns	r3, r3
 800501e:	69ba      	ldr	r2, [r7, #24]
 8005020:	4013      	ands	r3, r2
 8005022:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800502c:	2b00      	cmp	r3, #0
 800502e:	d003      	beq.n	8005038 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005030:	69ba      	ldr	r2, [r7, #24]
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	4313      	orrs	r3, r2
 8005036:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005038:	4a14      	ldr	r2, [pc, #80]	@ (800508c <HAL_GPIO_Init+0x354>)
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	3301      	adds	r3, #1
 8005042:	61fb      	str	r3, [r7, #28]
 8005044:	69fb      	ldr	r3, [r7, #28]
 8005046:	2b0f      	cmp	r3, #15
 8005048:	f67f ae86 	bls.w	8004d58 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800504c:	bf00      	nop
 800504e:	bf00      	nop
 8005050:	3724      	adds	r7, #36	@ 0x24
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr
 800505a:	bf00      	nop
 800505c:	40023800 	.word	0x40023800
 8005060:	40013800 	.word	0x40013800
 8005064:	40020000 	.word	0x40020000
 8005068:	40020400 	.word	0x40020400
 800506c:	40020800 	.word	0x40020800
 8005070:	40020c00 	.word	0x40020c00
 8005074:	40021000 	.word	0x40021000
 8005078:	40021400 	.word	0x40021400
 800507c:	40021800 	.word	0x40021800
 8005080:	40021c00 	.word	0x40021c00
 8005084:	40022000 	.word	0x40022000
 8005088:	40022400 	.word	0x40022400
 800508c:	40013c00 	.word	0x40013c00

08005090 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005090:	b480      	push	{r7}
 8005092:	b085      	sub	sp, #20
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	460b      	mov	r3, r1
 800509a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	691a      	ldr	r2, [r3, #16]
 80050a0:	887b      	ldrh	r3, [r7, #2]
 80050a2:	4013      	ands	r3, r2
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d002      	beq.n	80050ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80050a8:	2301      	movs	r3, #1
 80050aa:	73fb      	strb	r3, [r7, #15]
 80050ac:	e001      	b.n	80050b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80050ae:	2300      	movs	r3, #0
 80050b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80050b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3714      	adds	r7, #20
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr

080050c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	460b      	mov	r3, r1
 80050ca:	807b      	strh	r3, [r7, #2]
 80050cc:	4613      	mov	r3, r2
 80050ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80050d0:	787b      	ldrb	r3, [r7, #1]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d003      	beq.n	80050de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80050d6:	887a      	ldrh	r2, [r7, #2]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80050dc:	e003      	b.n	80050e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80050de:	887b      	ldrh	r3, [r7, #2]
 80050e0:	041a      	lsls	r2, r3, #16
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	619a      	str	r2, [r3, #24]
}
 80050e6:	bf00      	nop
 80050e8:	370c      	adds	r7, #12
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr
	...

080050f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b082      	sub	sp, #8
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	4603      	mov	r3, r0
 80050fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80050fe:	4b08      	ldr	r3, [pc, #32]	@ (8005120 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005100:	695a      	ldr	r2, [r3, #20]
 8005102:	88fb      	ldrh	r3, [r7, #6]
 8005104:	4013      	ands	r3, r2
 8005106:	2b00      	cmp	r3, #0
 8005108:	d006      	beq.n	8005118 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800510a:	4a05      	ldr	r2, [pc, #20]	@ (8005120 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800510c:	88fb      	ldrh	r3, [r7, #6]
 800510e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005110:	88fb      	ldrh	r3, [r7, #6]
 8005112:	4618      	mov	r0, r3
 8005114:	f000 f806 	bl	8005124 <HAL_GPIO_EXTI_Callback>
  }
}
 8005118:	bf00      	nop
 800511a:	3708      	adds	r7, #8
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}
 8005120:	40013c00 	.word	0x40013c00

08005124 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005124:	b480      	push	{r7}
 8005126:	b083      	sub	sp, #12
 8005128:	af00      	add	r7, sp, #0
 800512a:	4603      	mov	r3, r0
 800512c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800512e:	bf00      	nop
 8005130:	370c      	adds	r7, #12
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr
	...

0800513c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b082      	sub	sp, #8
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d101      	bne.n	800514e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e07f      	b.n	800524e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005154:	b2db      	uxtb	r3, r3
 8005156:	2b00      	cmp	r3, #0
 8005158:	d106      	bne.n	8005168 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2200      	movs	r2, #0
 800515e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f7fe ff40 	bl	8003fe8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2224      	movs	r2, #36	@ 0x24
 800516c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f022 0201 	bic.w	r2, r2, #1
 800517e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	685a      	ldr	r2, [r3, #4]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800518c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	689a      	ldr	r2, [r3, #8]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800519c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d107      	bne.n	80051b6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	689a      	ldr	r2, [r3, #8]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80051b2:	609a      	str	r2, [r3, #8]
 80051b4:	e006      	b.n	80051c4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	689a      	ldr	r2, [r3, #8]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80051c2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	2b02      	cmp	r3, #2
 80051ca:	d104      	bne.n	80051d6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80051d4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	6859      	ldr	r1, [r3, #4]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	4b1d      	ldr	r3, [pc, #116]	@ (8005258 <HAL_I2C_Init+0x11c>)
 80051e2:	430b      	orrs	r3, r1
 80051e4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	68da      	ldr	r2, [r3, #12]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80051f4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	691a      	ldr	r2, [r3, #16]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	695b      	ldr	r3, [r3, #20]
 80051fe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	699b      	ldr	r3, [r3, #24]
 8005206:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	430a      	orrs	r2, r1
 800520e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	69d9      	ldr	r1, [r3, #28]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a1a      	ldr	r2, [r3, #32]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	430a      	orrs	r2, r1
 800521e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f042 0201 	orr.w	r2, r2, #1
 800522e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2220      	movs	r2, #32
 800523a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800524c:	2300      	movs	r3, #0
}
 800524e:	4618      	mov	r0, r3
 8005250:	3708      	adds	r7, #8
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
 8005256:	bf00      	nop
 8005258:	02008000 	.word	0x02008000

0800525c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b088      	sub	sp, #32
 8005260:	af02      	add	r7, sp, #8
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	607a      	str	r2, [r7, #4]
 8005266:	461a      	mov	r2, r3
 8005268:	460b      	mov	r3, r1
 800526a:	817b      	strh	r3, [r7, #10]
 800526c:	4613      	mov	r3, r2
 800526e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005276:	b2db      	uxtb	r3, r3
 8005278:	2b20      	cmp	r3, #32
 800527a:	f040 80da 	bne.w	8005432 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005284:	2b01      	cmp	r3, #1
 8005286:	d101      	bne.n	800528c <HAL_I2C_Master_Transmit+0x30>
 8005288:	2302      	movs	r3, #2
 800528a:	e0d3      	b.n	8005434 <HAL_I2C_Master_Transmit+0x1d8>
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005294:	f7ff fa84 	bl	80047a0 <HAL_GetTick>
 8005298:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	9300      	str	r3, [sp, #0]
 800529e:	2319      	movs	r3, #25
 80052a0:	2201      	movs	r2, #1
 80052a2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80052a6:	68f8      	ldr	r0, [r7, #12]
 80052a8:	f000 fee3 	bl	8006072 <I2C_WaitOnFlagUntilTimeout>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d001      	beq.n	80052b6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e0be      	b.n	8005434 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2221      	movs	r2, #33	@ 0x21
 80052ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2210      	movs	r2, #16
 80052c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2200      	movs	r2, #0
 80052ca:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	893a      	ldrh	r2, [r7, #8]
 80052d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2200      	movs	r2, #0
 80052dc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	2bff      	cmp	r3, #255	@ 0xff
 80052e6:	d90e      	bls.n	8005306 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	22ff      	movs	r2, #255	@ 0xff
 80052ec:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052f2:	b2da      	uxtb	r2, r3
 80052f4:	8979      	ldrh	r1, [r7, #10]
 80052f6:	4b51      	ldr	r3, [pc, #324]	@ (800543c <HAL_I2C_Master_Transmit+0x1e0>)
 80052f8:	9300      	str	r3, [sp, #0]
 80052fa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80052fe:	68f8      	ldr	r0, [r7, #12]
 8005300:	f001 f8ce 	bl	80064a0 <I2C_TransferConfig>
 8005304:	e06c      	b.n	80053e0 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800530a:	b29a      	uxth	r2, r3
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005314:	b2da      	uxtb	r2, r3
 8005316:	8979      	ldrh	r1, [r7, #10]
 8005318:	4b48      	ldr	r3, [pc, #288]	@ (800543c <HAL_I2C_Master_Transmit+0x1e0>)
 800531a:	9300      	str	r3, [sp, #0]
 800531c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005320:	68f8      	ldr	r0, [r7, #12]
 8005322:	f001 f8bd 	bl	80064a0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005326:	e05b      	b.n	80053e0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005328:	697a      	ldr	r2, [r7, #20]
 800532a:	6a39      	ldr	r1, [r7, #32]
 800532c:	68f8      	ldr	r0, [r7, #12]
 800532e:	f000 fee0 	bl	80060f2 <I2C_WaitOnTXISFlagUntilTimeout>
 8005332:	4603      	mov	r3, r0
 8005334:	2b00      	cmp	r3, #0
 8005336:	d001      	beq.n	800533c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	e07b      	b.n	8005434 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005340:	781a      	ldrb	r2, [r3, #0]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800534c:	1c5a      	adds	r2, r3, #1
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005356:	b29b      	uxth	r3, r3
 8005358:	3b01      	subs	r3, #1
 800535a:	b29a      	uxth	r2, r3
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005364:	3b01      	subs	r3, #1
 8005366:	b29a      	uxth	r2, r3
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005370:	b29b      	uxth	r3, r3
 8005372:	2b00      	cmp	r3, #0
 8005374:	d034      	beq.n	80053e0 <HAL_I2C_Master_Transmit+0x184>
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800537a:	2b00      	cmp	r3, #0
 800537c:	d130      	bne.n	80053e0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	9300      	str	r3, [sp, #0]
 8005382:	6a3b      	ldr	r3, [r7, #32]
 8005384:	2200      	movs	r2, #0
 8005386:	2180      	movs	r1, #128	@ 0x80
 8005388:	68f8      	ldr	r0, [r7, #12]
 800538a:	f000 fe72 	bl	8006072 <I2C_WaitOnFlagUntilTimeout>
 800538e:	4603      	mov	r3, r0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d001      	beq.n	8005398 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	e04d      	b.n	8005434 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800539c:	b29b      	uxth	r3, r3
 800539e:	2bff      	cmp	r3, #255	@ 0xff
 80053a0:	d90e      	bls.n	80053c0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	22ff      	movs	r2, #255	@ 0xff
 80053a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053ac:	b2da      	uxtb	r2, r3
 80053ae:	8979      	ldrh	r1, [r7, #10]
 80053b0:	2300      	movs	r3, #0
 80053b2:	9300      	str	r3, [sp, #0]
 80053b4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80053b8:	68f8      	ldr	r0, [r7, #12]
 80053ba:	f001 f871 	bl	80064a0 <I2C_TransferConfig>
 80053be:	e00f      	b.n	80053e0 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053c4:	b29a      	uxth	r2, r3
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053ce:	b2da      	uxtb	r2, r3
 80053d0:	8979      	ldrh	r1, [r7, #10]
 80053d2:	2300      	movs	r3, #0
 80053d4:	9300      	str	r3, [sp, #0]
 80053d6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80053da:	68f8      	ldr	r0, [r7, #12]
 80053dc:	f001 f860 	bl	80064a0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d19e      	bne.n	8005328 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053ea:	697a      	ldr	r2, [r7, #20]
 80053ec:	6a39      	ldr	r1, [r7, #32]
 80053ee:	68f8      	ldr	r0, [r7, #12]
 80053f0:	f000 febf 	bl	8006172 <I2C_WaitOnSTOPFlagUntilTimeout>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d001      	beq.n	80053fe <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	e01a      	b.n	8005434 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2220      	movs	r2, #32
 8005404:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	6859      	ldr	r1, [r3, #4]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	4b0b      	ldr	r3, [pc, #44]	@ (8005440 <HAL_I2C_Master_Transmit+0x1e4>)
 8005412:	400b      	ands	r3, r1
 8005414:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2220      	movs	r2, #32
 800541a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2200      	movs	r2, #0
 8005422:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800542e:	2300      	movs	r3, #0
 8005430:	e000      	b.n	8005434 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8005432:	2302      	movs	r3, #2
  }
}
 8005434:	4618      	mov	r0, r3
 8005436:	3718      	adds	r7, #24
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}
 800543c:	80002000 	.word	0x80002000
 8005440:	fe00e800 	.word	0xfe00e800

08005444 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b088      	sub	sp, #32
 8005448:	af02      	add	r7, sp, #8
 800544a:	60f8      	str	r0, [r7, #12]
 800544c:	607a      	str	r2, [r7, #4]
 800544e:	461a      	mov	r2, r3
 8005450:	460b      	mov	r3, r1
 8005452:	817b      	strh	r3, [r7, #10]
 8005454:	4613      	mov	r3, r2
 8005456:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800545e:	b2db      	uxtb	r3, r3
 8005460:	2b20      	cmp	r3, #32
 8005462:	f040 80db 	bne.w	800561c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800546c:	2b01      	cmp	r3, #1
 800546e:	d101      	bne.n	8005474 <HAL_I2C_Master_Receive+0x30>
 8005470:	2302      	movs	r3, #2
 8005472:	e0d4      	b.n	800561e <HAL_I2C_Master_Receive+0x1da>
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800547c:	f7ff f990 	bl	80047a0 <HAL_GetTick>
 8005480:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	9300      	str	r3, [sp, #0]
 8005486:	2319      	movs	r3, #25
 8005488:	2201      	movs	r2, #1
 800548a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800548e:	68f8      	ldr	r0, [r7, #12]
 8005490:	f000 fdef 	bl	8006072 <I2C_WaitOnFlagUntilTimeout>
 8005494:	4603      	mov	r3, r0
 8005496:	2b00      	cmp	r3, #0
 8005498:	d001      	beq.n	800549e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e0bf      	b.n	800561e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2222      	movs	r2, #34	@ 0x22
 80054a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2210      	movs	r2, #16
 80054aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2200      	movs	r2, #0
 80054b2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	893a      	ldrh	r2, [r7, #8]
 80054be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2200      	movs	r2, #0
 80054c4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	2bff      	cmp	r3, #255	@ 0xff
 80054ce:	d90e      	bls.n	80054ee <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	22ff      	movs	r2, #255	@ 0xff
 80054d4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054da:	b2da      	uxtb	r2, r3
 80054dc:	8979      	ldrh	r1, [r7, #10]
 80054de:	4b52      	ldr	r3, [pc, #328]	@ (8005628 <HAL_I2C_Master_Receive+0x1e4>)
 80054e0:	9300      	str	r3, [sp, #0]
 80054e2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80054e6:	68f8      	ldr	r0, [r7, #12]
 80054e8:	f000 ffda 	bl	80064a0 <I2C_TransferConfig>
 80054ec:	e06d      	b.n	80055ca <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054f2:	b29a      	uxth	r2, r3
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054fc:	b2da      	uxtb	r2, r3
 80054fe:	8979      	ldrh	r1, [r7, #10]
 8005500:	4b49      	ldr	r3, [pc, #292]	@ (8005628 <HAL_I2C_Master_Receive+0x1e4>)
 8005502:	9300      	str	r3, [sp, #0]
 8005504:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005508:	68f8      	ldr	r0, [r7, #12]
 800550a:	f000 ffc9 	bl	80064a0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800550e:	e05c      	b.n	80055ca <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005510:	697a      	ldr	r2, [r7, #20]
 8005512:	6a39      	ldr	r1, [r7, #32]
 8005514:	68f8      	ldr	r0, [r7, #12]
 8005516:	f000 fe69 	bl	80061ec <I2C_WaitOnRXNEFlagUntilTimeout>
 800551a:	4603      	mov	r3, r0
 800551c:	2b00      	cmp	r3, #0
 800551e:	d001      	beq.n	8005524 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	e07c      	b.n	800561e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800552e:	b2d2      	uxtb	r2, r2
 8005530:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005536:	1c5a      	adds	r2, r3, #1
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005540:	3b01      	subs	r3, #1
 8005542:	b29a      	uxth	r2, r3
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800554c:	b29b      	uxth	r3, r3
 800554e:	3b01      	subs	r3, #1
 8005550:	b29a      	uxth	r2, r3
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800555a:	b29b      	uxth	r3, r3
 800555c:	2b00      	cmp	r3, #0
 800555e:	d034      	beq.n	80055ca <HAL_I2C_Master_Receive+0x186>
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005564:	2b00      	cmp	r3, #0
 8005566:	d130      	bne.n	80055ca <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	9300      	str	r3, [sp, #0]
 800556c:	6a3b      	ldr	r3, [r7, #32]
 800556e:	2200      	movs	r2, #0
 8005570:	2180      	movs	r1, #128	@ 0x80
 8005572:	68f8      	ldr	r0, [r7, #12]
 8005574:	f000 fd7d 	bl	8006072 <I2C_WaitOnFlagUntilTimeout>
 8005578:	4603      	mov	r3, r0
 800557a:	2b00      	cmp	r3, #0
 800557c:	d001      	beq.n	8005582 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	e04d      	b.n	800561e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005586:	b29b      	uxth	r3, r3
 8005588:	2bff      	cmp	r3, #255	@ 0xff
 800558a:	d90e      	bls.n	80055aa <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	22ff      	movs	r2, #255	@ 0xff
 8005590:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005596:	b2da      	uxtb	r2, r3
 8005598:	8979      	ldrh	r1, [r7, #10]
 800559a:	2300      	movs	r3, #0
 800559c:	9300      	str	r3, [sp, #0]
 800559e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80055a2:	68f8      	ldr	r0, [r7, #12]
 80055a4:	f000 ff7c 	bl	80064a0 <I2C_TransferConfig>
 80055a8:	e00f      	b.n	80055ca <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055ae:	b29a      	uxth	r2, r3
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055b8:	b2da      	uxtb	r2, r3
 80055ba:	8979      	ldrh	r1, [r7, #10]
 80055bc:	2300      	movs	r3, #0
 80055be:	9300      	str	r3, [sp, #0]
 80055c0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80055c4:	68f8      	ldr	r0, [r7, #12]
 80055c6:	f000 ff6b 	bl	80064a0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d19d      	bne.n	8005510 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055d4:	697a      	ldr	r2, [r7, #20]
 80055d6:	6a39      	ldr	r1, [r7, #32]
 80055d8:	68f8      	ldr	r0, [r7, #12]
 80055da:	f000 fdca 	bl	8006172 <I2C_WaitOnSTOPFlagUntilTimeout>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d001      	beq.n	80055e8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e01a      	b.n	800561e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2220      	movs	r2, #32
 80055ee:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	6859      	ldr	r1, [r3, #4]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	4b0c      	ldr	r3, [pc, #48]	@ (800562c <HAL_I2C_Master_Receive+0x1e8>)
 80055fc:	400b      	ands	r3, r1
 80055fe:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2220      	movs	r2, #32
 8005604:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2200      	movs	r2, #0
 800560c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2200      	movs	r2, #0
 8005614:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005618:	2300      	movs	r3, #0
 800561a:	e000      	b.n	800561e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800561c:	2302      	movs	r3, #2
  }
}
 800561e:	4618      	mov	r0, r3
 8005620:	3718      	adds	r7, #24
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
 8005626:	bf00      	nop
 8005628:	80002400 	.word	0x80002400
 800562c:	fe00e800 	.word	0xfe00e800

08005630 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	699b      	ldr	r3, [r3, #24]
 800563e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800564c:	2b00      	cmp	r3, #0
 800564e:	d005      	beq.n	800565c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005654:	68ba      	ldr	r2, [r7, #8]
 8005656:	68f9      	ldr	r1, [r7, #12]
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	4798      	blx	r3
  }
}
 800565c:	bf00      	nop
 800565e:	3710      	adds	r7, #16
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}

08005664 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b086      	sub	sp, #24
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	699b      	ldr	r3, [r3, #24]
 8005672:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005682:	2b00      	cmp	r3, #0
 8005684:	d00f      	beq.n	80056a6 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800568c:	2b00      	cmp	r3, #0
 800568e:	d00a      	beq.n	80056a6 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005694:	f043 0201 	orr.w	r2, r3, #1
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80056a4:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d00f      	beq.n	80056d0 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d00a      	beq.n	80056d0 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056be:	f043 0208 	orr.w	r2, r3, #8
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80056ce:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d00f      	beq.n	80056fa <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d00a      	beq.n	80056fa <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056e8:	f043 0202 	orr.w	r2, r3, #2
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80056f8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056fe:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f003 030b 	and.w	r3, r3, #11
 8005706:	2b00      	cmp	r3, #0
 8005708:	d003      	beq.n	8005712 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800570a:	68f9      	ldr	r1, [r7, #12]
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f000 fb77 	bl	8005e00 <I2C_ITError>
  }
}
 8005712:	bf00      	nop
 8005714:	3718      	adds	r7, #24
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}

0800571a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800571a:	b480      	push	{r7}
 800571c:	b083      	sub	sp, #12
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005722:	bf00      	nop
 8005724:	370c      	adds	r7, #12
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr

0800572e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800572e:	b480      	push	{r7}
 8005730:	b083      	sub	sp, #12
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005736:	bf00      	nop
 8005738:	370c      	adds	r7, #12
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr

08005742 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005742:	b480      	push	{r7}
 8005744:	b083      	sub	sp, #12
 8005746:	af00      	add	r7, sp, #0
 8005748:	6078      	str	r0, [r7, #4]
 800574a:	460b      	mov	r3, r1
 800574c:	70fb      	strb	r3, [r7, #3]
 800574e:	4613      	mov	r3, r2
 8005750:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005752:	bf00      	nop
 8005754:	370c      	adds	r7, #12
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr

0800575e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800575e:	b480      	push	{r7}
 8005760:	b083      	sub	sp, #12
 8005762:	af00      	add	r7, sp, #0
 8005764:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8005766:	bf00      	nop
 8005768:	370c      	adds	r7, #12
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr

08005772 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005772:	b480      	push	{r7}
 8005774:	b083      	sub	sp, #12
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800577a:	bf00      	nop
 800577c:	370c      	adds	r7, #12
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr

08005786 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005786:	b480      	push	{r7}
 8005788:	b083      	sub	sp, #12
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800578e:	bf00      	nop
 8005790:	370c      	adds	r7, #12
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr

0800579a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800579a:	b580      	push	{r7, lr}
 800579c:	b086      	sub	sp, #24
 800579e:	af00      	add	r7, sp, #0
 80057a0:	60f8      	str	r0, [r7, #12]
 80057a2:	60b9      	str	r1, [r7, #8]
 80057a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057aa:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d101      	bne.n	80057be <I2C_Slave_ISR_IT+0x24>
 80057ba:	2302      	movs	r3, #2
 80057bc:	e0e1      	b.n	8005982 <I2C_Slave_ISR_IT+0x1e8>
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2201      	movs	r2, #1
 80057c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	f003 0320 	and.w	r3, r3, #32
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d008      	beq.n	80057e2 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d003      	beq.n	80057e2 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80057da:	6939      	ldr	r1, [r7, #16]
 80057dc:	68f8      	ldr	r0, [r7, #12]
 80057de:	f000 f9b5 	bl	8005b4c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	f003 0310 	and.w	r3, r3, #16
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d04b      	beq.n	8005884 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d046      	beq.n	8005884 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d128      	bne.n	8005852 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005806:	b2db      	uxtb	r3, r3
 8005808:	2b28      	cmp	r3, #40	@ 0x28
 800580a:	d108      	bne.n	800581e <I2C_Slave_ISR_IT+0x84>
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005812:	d104      	bne.n	800581e <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005814:	6939      	ldr	r1, [r7, #16]
 8005816:	68f8      	ldr	r0, [r7, #12]
 8005818:	f000 fa9e 	bl	8005d58 <I2C_ITListenCplt>
 800581c:	e031      	b.n	8005882 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005824:	b2db      	uxtb	r3, r3
 8005826:	2b29      	cmp	r3, #41	@ 0x29
 8005828:	d10e      	bne.n	8005848 <I2C_Slave_ISR_IT+0xae>
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005830:	d00a      	beq.n	8005848 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	2210      	movs	r2, #16
 8005838:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800583a:	68f8      	ldr	r0, [r7, #12]
 800583c:	f000 fbd7 	bl	8005fee <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005840:	68f8      	ldr	r0, [r7, #12]
 8005842:	f000 f926 	bl	8005a92 <I2C_ITSlaveSeqCplt>
 8005846:	e01c      	b.n	8005882 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	2210      	movs	r2, #16
 800584e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8005850:	e08f      	b.n	8005972 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	2210      	movs	r2, #16
 8005858:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800585e:	f043 0204 	orr.w	r2, r3, #4
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d003      	beq.n	8005874 <I2C_Slave_ISR_IT+0xda>
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005872:	d17e      	bne.n	8005972 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005878:	4619      	mov	r1, r3
 800587a:	68f8      	ldr	r0, [r7, #12]
 800587c:	f000 fac0 	bl	8005e00 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005880:	e077      	b.n	8005972 <I2C_Slave_ISR_IT+0x1d8>
 8005882:	e076      	b.n	8005972 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	f003 0304 	and.w	r3, r3, #4
 800588a:	2b00      	cmp	r3, #0
 800588c:	d02f      	beq.n	80058ee <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005894:	2b00      	cmp	r3, #0
 8005896:	d02a      	beq.n	80058ee <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800589c:	b29b      	uxth	r3, r3
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d018      	beq.n	80058d4 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ac:	b2d2      	uxtb	r2, r2
 80058ae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058b4:	1c5a      	adds	r2, r3, #1
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058be:	3b01      	subs	r3, #1
 80058c0:	b29a      	uxth	r2, r3
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	3b01      	subs	r3, #1
 80058ce:	b29a      	uxth	r2, r3
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058d8:	b29b      	uxth	r3, r3
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d14b      	bne.n	8005976 <I2C_Slave_ISR_IT+0x1dc>
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80058e4:	d047      	beq.n	8005976 <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80058e6:	68f8      	ldr	r0, [r7, #12]
 80058e8:	f000 f8d3 	bl	8005a92 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80058ec:	e043      	b.n	8005976 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	f003 0308 	and.w	r3, r3, #8
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d009      	beq.n	800590c <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d004      	beq.n	800590c <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8005902:	6939      	ldr	r1, [r7, #16]
 8005904:	68f8      	ldr	r0, [r7, #12]
 8005906:	f000 f840 	bl	800598a <I2C_ITAddrCplt>
 800590a:	e035      	b.n	8005978 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	f003 0302 	and.w	r3, r3, #2
 8005912:	2b00      	cmp	r3, #0
 8005914:	d030      	beq.n	8005978 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800591c:	2b00      	cmp	r3, #0
 800591e:	d02b      	beq.n	8005978 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005924:	b29b      	uxth	r3, r3
 8005926:	2b00      	cmp	r3, #0
 8005928:	d018      	beq.n	800595c <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800592e:	781a      	ldrb	r2, [r3, #0]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800593a:	1c5a      	adds	r2, r3, #1
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005944:	b29b      	uxth	r3, r3
 8005946:	3b01      	subs	r3, #1
 8005948:	b29a      	uxth	r2, r3
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005952:	3b01      	subs	r3, #1
 8005954:	b29a      	uxth	r2, r3
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	851a      	strh	r2, [r3, #40]	@ 0x28
 800595a:	e00d      	b.n	8005978 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005962:	d002      	beq.n	800596a <I2C_Slave_ISR_IT+0x1d0>
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d106      	bne.n	8005978 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800596a:	68f8      	ldr	r0, [r7, #12]
 800596c:	f000 f891 	bl	8005a92 <I2C_ITSlaveSeqCplt>
 8005970:	e002      	b.n	8005978 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8005972:	bf00      	nop
 8005974:	e000      	b.n	8005978 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8005976:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2200      	movs	r2, #0
 800597c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005980:	2300      	movs	r3, #0
}
 8005982:	4618      	mov	r0, r3
 8005984:	3718      	adds	r7, #24
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}

0800598a <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800598a:	b580      	push	{r7, lr}
 800598c:	b084      	sub	sp, #16
 800598e:	af00      	add	r7, sp, #0
 8005990:	6078      	str	r0, [r7, #4]
 8005992:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800599a:	b2db      	uxtb	r3, r3
 800599c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80059a0:	2b28      	cmp	r3, #40	@ 0x28
 80059a2:	d16a      	bne.n	8005a7a <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	699b      	ldr	r3, [r3, #24]
 80059aa:	0c1b      	lsrs	r3, r3, #16
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	f003 0301 	and.w	r3, r3, #1
 80059b2:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	699b      	ldr	r3, [r3, #24]
 80059ba:	0c1b      	lsrs	r3, r3, #16
 80059bc:	b29b      	uxth	r3, r3
 80059be:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80059c2:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80059d0:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	b29b      	uxth	r3, r3
 80059da:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80059de:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	2b02      	cmp	r3, #2
 80059e6:	d138      	bne.n	8005a5a <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80059e8:	897b      	ldrh	r3, [r7, #10]
 80059ea:	09db      	lsrs	r3, r3, #7
 80059ec:	b29a      	uxth	r2, r3
 80059ee:	89bb      	ldrh	r3, [r7, #12]
 80059f0:	4053      	eors	r3, r2
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	f003 0306 	and.w	r3, r3, #6
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d11c      	bne.n	8005a36 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80059fc:	897b      	ldrh	r3, [r7, #10]
 80059fe:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a04:	1c5a      	adds	r2, r3, #1
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a0e:	2b02      	cmp	r3, #2
 8005a10:	d13b      	bne.n	8005a8a <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2200      	movs	r2, #0
 8005a16:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	2208      	movs	r2, #8
 8005a1e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005a28:	89ba      	ldrh	r2, [r7, #12]
 8005a2a:	7bfb      	ldrb	r3, [r7, #15]
 8005a2c:	4619      	mov	r1, r3
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f7ff fe87 	bl	8005742 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005a34:	e029      	b.n	8005a8a <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8005a36:	893b      	ldrh	r3, [r7, #8]
 8005a38:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005a3a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f000 fd60 	bl	8006504 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005a4c:	89ba      	ldrh	r2, [r7, #12]
 8005a4e:	7bfb      	ldrb	r3, [r7, #15]
 8005a50:	4619      	mov	r1, r3
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f7ff fe75 	bl	8005742 <HAL_I2C_AddrCallback>
}
 8005a58:	e017      	b.n	8005a8a <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005a5a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 fd50 	bl	8006504 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005a6c:	89ba      	ldrh	r2, [r7, #12]
 8005a6e:	7bfb      	ldrb	r3, [r7, #15]
 8005a70:	4619      	mov	r1, r3
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f7ff fe65 	bl	8005742 <HAL_I2C_AddrCallback>
}
 8005a78:	e007      	b.n	8005a8a <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	2208      	movs	r2, #8
 8005a80:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8005a8a:	bf00      	nop
 8005a8c:	3710      	adds	r7, #16
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}

08005a92 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005a92:	b580      	push	{r7, lr}
 8005a94:	b084      	sub	sp, #16
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d008      	beq.n	8005ac6 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005ac2:	601a      	str	r2, [r3, #0]
 8005ac4:	e00c      	b.n	8005ae0 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d007      	beq.n	8005ae0 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005ade:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	2b29      	cmp	r3, #41	@ 0x29
 8005aea:	d112      	bne.n	8005b12 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2228      	movs	r2, #40	@ 0x28
 8005af0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2221      	movs	r2, #33	@ 0x21
 8005af8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005afa:	2101      	movs	r1, #1
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f000 fd01 	bl	8006504 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f7ff fe05 	bl	800571a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005b10:	e017      	b.n	8005b42 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b1c:	d111      	bne.n	8005b42 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2228      	movs	r2, #40	@ 0x28
 8005b22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2222      	movs	r2, #34	@ 0x22
 8005b2a:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005b2c:	2102      	movs	r1, #2
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f000 fce8 	bl	8006504 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f7ff fdf6 	bl	800572e <HAL_I2C_SlaveRxCpltCallback>
}
 8005b42:	bf00      	nop
 8005b44:	3710      	adds	r7, #16
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
	...

08005b4c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b086      	sub	sp, #24
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b68:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	2220      	movs	r2, #32
 8005b70:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005b72:	7bfb      	ldrb	r3, [r7, #15]
 8005b74:	2b21      	cmp	r3, #33	@ 0x21
 8005b76:	d002      	beq.n	8005b7e <I2C_ITSlaveCplt+0x32>
 8005b78:	7bfb      	ldrb	r3, [r7, #15]
 8005b7a:	2b29      	cmp	r3, #41	@ 0x29
 8005b7c:	d108      	bne.n	8005b90 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8005b7e:	f248 0101 	movw	r1, #32769	@ 0x8001
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 fcbe 	bl	8006504 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2221      	movs	r2, #33	@ 0x21
 8005b8c:	631a      	str	r2, [r3, #48]	@ 0x30
 8005b8e:	e00d      	b.n	8005bac <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005b90:	7bfb      	ldrb	r3, [r7, #15]
 8005b92:	2b22      	cmp	r3, #34	@ 0x22
 8005b94:	d002      	beq.n	8005b9c <I2C_ITSlaveCplt+0x50>
 8005b96:	7bfb      	ldrb	r3, [r7, #15]
 8005b98:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b9a:	d107      	bne.n	8005bac <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8005b9c:	f248 0102 	movw	r1, #32770	@ 0x8002
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f000 fcaf 	bl	8006504 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2222      	movs	r2, #34	@ 0x22
 8005baa:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	685a      	ldr	r2, [r3, #4]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005bba:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	6859      	ldr	r1, [r3, #4]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	4b62      	ldr	r3, [pc, #392]	@ (8005d50 <I2C_ITSlaveCplt+0x204>)
 8005bc8:	400b      	ands	r3, r1
 8005bca:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f000 fa0e 	bl	8005fee <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d013      	beq.n	8005c04 <I2C_ITSlaveCplt+0xb8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005bea:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d01f      	beq.n	8005c34 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	b29a      	uxth	r2, r3
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005c02:	e017      	b.n	8005c34 <I2C_ITSlaveCplt+0xe8>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d012      	beq.n	8005c34 <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005c1c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d006      	beq.n	8005c34 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	b29a      	uxth	r2, r3
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	f003 0304 	and.w	r3, r3, #4
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d020      	beq.n	8005c80 <I2C_ITSlaveCplt+0x134>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	f023 0304 	bic.w	r3, r3, #4
 8005c44:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c50:	b2d2      	uxtb	r2, r2
 8005c52:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c58:	1c5a      	adds	r2, r3, #1
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d00c      	beq.n	8005c80 <I2C_ITSlaveCplt+0x134>
    {
      hi2c->XferSize--;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c6a:	3b01      	subs	r3, #1
 8005c6c:	b29a      	uxth	r2, r3
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	3b01      	subs	r3, #1
 8005c7a:	b29a      	uxth	r2, r3
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d005      	beq.n	8005c96 <I2C_ITSlaveCplt+0x14a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c8e:	f043 0204 	orr.w	r2, r3, #4
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d010      	beq.n	8005cce <I2C_ITSlaveCplt+0x182>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cb0:	4619      	mov	r1, r3
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f000 f8a4 	bl	8005e00 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	2b28      	cmp	r3, #40	@ 0x28
 8005cc2:	d141      	bne.n	8005d48 <I2C_ITSlaveCplt+0x1fc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8005cc4:	6979      	ldr	r1, [r7, #20]
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f000 f846 	bl	8005d58 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005ccc:	e03c      	b.n	8005d48 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cd2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005cd6:	d014      	beq.n	8005d02 <I2C_ITSlaveCplt+0x1b6>
    I2C_ITSlaveSeqCplt(hi2c);
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f7ff feda 	bl	8005a92 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4a1c      	ldr	r2, [pc, #112]	@ (8005d54 <I2C_ITSlaveCplt+0x208>)
 8005ce2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2220      	movs	r2, #32
 8005ce8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f7ff fd2f 	bl	800575e <HAL_I2C_ListenCpltCallback>
}
 8005d00:	e022      	b.n	8005d48 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	2b22      	cmp	r3, #34	@ 0x22
 8005d0c:	d10e      	bne.n	8005d2c <I2C_ITSlaveCplt+0x1e0>
    hi2c->State = HAL_I2C_STATE_READY;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2220      	movs	r2, #32
 8005d12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f7ff fd02 	bl	800572e <HAL_I2C_SlaveRxCpltCallback>
}
 8005d2a:	e00d      	b.n	8005d48 <I2C_ITSlaveCplt+0x1fc>
    hi2c->State = HAL_I2C_STATE_READY;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2220      	movs	r2, #32
 8005d30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2200      	movs	r2, #0
 8005d38:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f7ff fce9 	bl	800571a <HAL_I2C_SlaveTxCpltCallback>
}
 8005d48:	bf00      	nop
 8005d4a:	3718      	adds	r7, #24
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}
 8005d50:	fe00e800 	.word	0xfe00e800
 8005d54:	ffff0000 	.word	0xffff0000

08005d58 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b082      	sub	sp, #8
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	4a25      	ldr	r2, [pc, #148]	@ (8005dfc <I2C_ITListenCplt+0xa4>)
 8005d66:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2220      	movs	r2, #32
 8005d72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	f003 0304 	and.w	r3, r3, #4
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d022      	beq.n	8005dd4 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d98:	b2d2      	uxtb	r2, r2
 8005d9a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005da0:	1c5a      	adds	r2, r3, #1
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d012      	beq.n	8005dd4 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005db2:	3b01      	subs	r3, #1
 8005db4:	b29a      	uxth	r2, r3
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	3b01      	subs	r3, #1
 8005dc2:	b29a      	uxth	r2, r3
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dcc:	f043 0204 	orr.w	r2, r3, #4
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005dd4:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f000 fb93 	bl	8006504 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	2210      	movs	r2, #16
 8005de4:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2200      	movs	r2, #0
 8005dea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f7ff fcb5 	bl	800575e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8005df4:	bf00      	nop
 8005df6:	3708      	adds	r7, #8
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}
 8005dfc:	ffff0000 	.word	0xffff0000

08005e00 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b084      	sub	sp, #16
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2200      	movs	r2, #0
 8005e16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a5d      	ldr	r2, [pc, #372]	@ (8005f94 <I2C_ITError+0x194>)
 8005e1e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2200      	movs	r2, #0
 8005e24:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	431a      	orrs	r2, r3
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8005e32:	7bfb      	ldrb	r3, [r7, #15]
 8005e34:	2b28      	cmp	r3, #40	@ 0x28
 8005e36:	d005      	beq.n	8005e44 <I2C_ITError+0x44>
 8005e38:	7bfb      	ldrb	r3, [r7, #15]
 8005e3a:	2b29      	cmp	r3, #41	@ 0x29
 8005e3c:	d002      	beq.n	8005e44 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8005e3e:	7bfb      	ldrb	r3, [r7, #15]
 8005e40:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e42:	d10b      	bne.n	8005e5c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005e44:	2103      	movs	r1, #3
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 fb5c 	bl	8006504 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2228      	movs	r2, #40	@ 0x28
 8005e50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	4a50      	ldr	r2, [pc, #320]	@ (8005f98 <I2C_ITError+0x198>)
 8005e58:	635a      	str	r2, [r3, #52]	@ 0x34
 8005e5a:	e011      	b.n	8005e80 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005e5c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f000 fb4f 	bl	8006504 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	2b60      	cmp	r3, #96	@ 0x60
 8005e70:	d003      	beq.n	8005e7a <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2220      	movs	r2, #32
 8005e76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    }
    hi2c->XferISR       = NULL;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e84:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d039      	beq.n	8005f02 <I2C_ITError+0x102>
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	2b11      	cmp	r3, #17
 8005e92:	d002      	beq.n	8005e9a <I2C_ITError+0x9a>
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	2b21      	cmp	r3, #33	@ 0x21
 8005e98:	d133      	bne.n	8005f02 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ea4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ea8:	d107      	bne.n	8005eba <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005eb8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f7fe ff2c 	bl	8004d1c <HAL_DMA_GetState>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d017      	beq.n	8005efa <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ece:	4a33      	ldr	r2, [pc, #204]	@ (8005f9c <I2C_ITError+0x19c>)
 8005ed0:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f7fe fefa 	bl	8004cd8 <HAL_DMA_Abort_IT>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d04d      	beq.n	8005f86 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005ef4:	4610      	mov	r0, r2
 8005ef6:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005ef8:	e045      	b.n	8005f86 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 f850 	bl	8005fa0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005f00:	e041      	b.n	8005f86 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d039      	beq.n	8005f7e <I2C_ITError+0x17e>
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	2b12      	cmp	r3, #18
 8005f0e:	d002      	beq.n	8005f16 <I2C_ITError+0x116>
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	2b22      	cmp	r3, #34	@ 0x22
 8005f14:	d133      	bne.n	8005f7e <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005f20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f24:	d107      	bne.n	8005f36 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005f34:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f7fe feee 	bl	8004d1c <HAL_DMA_GetState>
 8005f40:	4603      	mov	r3, r0
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d017      	beq.n	8005f76 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f4a:	4a14      	ldr	r2, [pc, #80]	@ (8005f9c <I2C_ITError+0x19c>)
 8005f4c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f7fe febc 	bl	8004cd8 <HAL_DMA_Abort_IT>
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d011      	beq.n	8005f8a <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005f70:	4610      	mov	r0, r2
 8005f72:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005f74:	e009      	b.n	8005f8a <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f000 f812 	bl	8005fa0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005f7c:	e005      	b.n	8005f8a <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f000 f80e 	bl	8005fa0 <I2C_TreatErrorCallback>
  }
}
 8005f84:	e002      	b.n	8005f8c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005f86:	bf00      	nop
 8005f88:	e000      	b.n	8005f8c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005f8a:	bf00      	nop
}
 8005f8c:	bf00      	nop
 8005f8e:	3710      	adds	r7, #16
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}
 8005f94:	ffff0000 	.word	0xffff0000
 8005f98:	0800579b 	.word	0x0800579b
 8005f9c:	08006037 	.word	0x08006037

08005fa0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b082      	sub	sp, #8
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	2b60      	cmp	r3, #96	@ 0x60
 8005fb2:	d10e      	bne.n	8005fd2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2220      	movs	r2, #32
 8005fb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f7ff fbdb 	bl	8005786 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005fd0:	e009      	b.n	8005fe6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f7ff fbc6 	bl	8005772 <HAL_I2C_ErrorCallback>
}
 8005fe6:	bf00      	nop
 8005fe8:	3708      	adds	r7, #8
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}

08005fee <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005fee:	b480      	push	{r7}
 8005ff0:	b083      	sub	sp, #12
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	699b      	ldr	r3, [r3, #24]
 8005ffc:	f003 0302 	and.w	r3, r3, #2
 8006000:	2b02      	cmp	r3, #2
 8006002:	d103      	bne.n	800600c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	2200      	movs	r2, #0
 800600a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	699b      	ldr	r3, [r3, #24]
 8006012:	f003 0301 	and.w	r3, r3, #1
 8006016:	2b01      	cmp	r3, #1
 8006018:	d007      	beq.n	800602a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	699a      	ldr	r2, [r3, #24]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f042 0201 	orr.w	r2, r2, #1
 8006028:	619a      	str	r2, [r3, #24]
  }
}
 800602a:	bf00      	nop
 800602c:	370c      	adds	r7, #12
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr

08006036 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006036:	b580      	push	{r7, lr}
 8006038:	b084      	sub	sp, #16
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006042:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006048:	2b00      	cmp	r3, #0
 800604a:	d003      	beq.n	8006054 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006050:	2200      	movs	r2, #0
 8006052:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006058:	2b00      	cmp	r3, #0
 800605a:	d003      	beq.n	8006064 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006060:	2200      	movs	r2, #0
 8006062:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8006064:	68f8      	ldr	r0, [r7, #12]
 8006066:	f7ff ff9b 	bl	8005fa0 <I2C_TreatErrorCallback>
}
 800606a:	bf00      	nop
 800606c:	3710      	adds	r7, #16
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}

08006072 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006072:	b580      	push	{r7, lr}
 8006074:	b084      	sub	sp, #16
 8006076:	af00      	add	r7, sp, #0
 8006078:	60f8      	str	r0, [r7, #12]
 800607a:	60b9      	str	r1, [r7, #8]
 800607c:	603b      	str	r3, [r7, #0]
 800607e:	4613      	mov	r3, r2
 8006080:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006082:	e022      	b.n	80060ca <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800608a:	d01e      	beq.n	80060ca <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800608c:	f7fe fb88 	bl	80047a0 <HAL_GetTick>
 8006090:	4602      	mov	r2, r0
 8006092:	69bb      	ldr	r3, [r7, #24]
 8006094:	1ad3      	subs	r3, r2, r3
 8006096:	683a      	ldr	r2, [r7, #0]
 8006098:	429a      	cmp	r2, r3
 800609a:	d302      	bcc.n	80060a2 <I2C_WaitOnFlagUntilTimeout+0x30>
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d113      	bne.n	80060ca <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060a6:	f043 0220 	orr.w	r2, r3, #32
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2220      	movs	r2, #32
 80060b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2200      	movs	r2, #0
 80060ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2200      	movs	r2, #0
 80060c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	e00f      	b.n	80060ea <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	699a      	ldr	r2, [r3, #24]
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	4013      	ands	r3, r2
 80060d4:	68ba      	ldr	r2, [r7, #8]
 80060d6:	429a      	cmp	r2, r3
 80060d8:	bf0c      	ite	eq
 80060da:	2301      	moveq	r3, #1
 80060dc:	2300      	movne	r3, #0
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	461a      	mov	r2, r3
 80060e2:	79fb      	ldrb	r3, [r7, #7]
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d0cd      	beq.n	8006084 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80060e8:	2300      	movs	r3, #0
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3710      	adds	r7, #16
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}

080060f2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80060f2:	b580      	push	{r7, lr}
 80060f4:	b084      	sub	sp, #16
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	60f8      	str	r0, [r7, #12]
 80060fa:	60b9      	str	r1, [r7, #8]
 80060fc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80060fe:	e02c      	b.n	800615a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	68b9      	ldr	r1, [r7, #8]
 8006104:	68f8      	ldr	r0, [r7, #12]
 8006106:	f000 f8eb 	bl	80062e0 <I2C_IsErrorOccurred>
 800610a:	4603      	mov	r3, r0
 800610c:	2b00      	cmp	r3, #0
 800610e:	d001      	beq.n	8006114 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	e02a      	b.n	800616a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800611a:	d01e      	beq.n	800615a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800611c:	f7fe fb40 	bl	80047a0 <HAL_GetTick>
 8006120:	4602      	mov	r2, r0
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	1ad3      	subs	r3, r2, r3
 8006126:	68ba      	ldr	r2, [r7, #8]
 8006128:	429a      	cmp	r2, r3
 800612a:	d302      	bcc.n	8006132 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d113      	bne.n	800615a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006136:	f043 0220 	orr.w	r2, r3, #32
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2220      	movs	r2, #32
 8006142:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2200      	movs	r2, #0
 800614a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2200      	movs	r2, #0
 8006152:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	e007      	b.n	800616a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	699b      	ldr	r3, [r3, #24]
 8006160:	f003 0302 	and.w	r3, r3, #2
 8006164:	2b02      	cmp	r3, #2
 8006166:	d1cb      	bne.n	8006100 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006168:	2300      	movs	r3, #0
}
 800616a:	4618      	mov	r0, r3
 800616c:	3710      	adds	r7, #16
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}

08006172 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006172:	b580      	push	{r7, lr}
 8006174:	b084      	sub	sp, #16
 8006176:	af00      	add	r7, sp, #0
 8006178:	60f8      	str	r0, [r7, #12]
 800617a:	60b9      	str	r1, [r7, #8]
 800617c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800617e:	e028      	b.n	80061d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	68b9      	ldr	r1, [r7, #8]
 8006184:	68f8      	ldr	r0, [r7, #12]
 8006186:	f000 f8ab 	bl	80062e0 <I2C_IsErrorOccurred>
 800618a:	4603      	mov	r3, r0
 800618c:	2b00      	cmp	r3, #0
 800618e:	d001      	beq.n	8006194 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006190:	2301      	movs	r3, #1
 8006192:	e026      	b.n	80061e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006194:	f7fe fb04 	bl	80047a0 <HAL_GetTick>
 8006198:	4602      	mov	r2, r0
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	1ad3      	subs	r3, r2, r3
 800619e:	68ba      	ldr	r2, [r7, #8]
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d302      	bcc.n	80061aa <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d113      	bne.n	80061d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061ae:	f043 0220 	orr.w	r2, r3, #32
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2220      	movs	r2, #32
 80061ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2200      	movs	r2, #0
 80061c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2200      	movs	r2, #0
 80061ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	e007      	b.n	80061e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	699b      	ldr	r3, [r3, #24]
 80061d8:	f003 0320 	and.w	r3, r3, #32
 80061dc:	2b20      	cmp	r3, #32
 80061de:	d1cf      	bne.n	8006180 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80061e0:	2300      	movs	r3, #0
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3710      	adds	r7, #16
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}
	...

080061ec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b084      	sub	sp, #16
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	60f8      	str	r0, [r7, #12]
 80061f4:	60b9      	str	r1, [r7, #8]
 80061f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80061f8:	e064      	b.n	80062c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	68b9      	ldr	r1, [r7, #8]
 80061fe:	68f8      	ldr	r0, [r7, #12]
 8006200:	f000 f86e 	bl	80062e0 <I2C_IsErrorOccurred>
 8006204:	4603      	mov	r3, r0
 8006206:	2b00      	cmp	r3, #0
 8006208:	d001      	beq.n	800620e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	e062      	b.n	80062d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	699b      	ldr	r3, [r3, #24]
 8006214:	f003 0320 	and.w	r3, r3, #32
 8006218:	2b20      	cmp	r3, #32
 800621a:	d138      	bne.n	800628e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	699b      	ldr	r3, [r3, #24]
 8006222:	f003 0304 	and.w	r3, r3, #4
 8006226:	2b04      	cmp	r3, #4
 8006228:	d105      	bne.n	8006236 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800622e:	2b00      	cmp	r3, #0
 8006230:	d001      	beq.n	8006236 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8006232:	2300      	movs	r3, #0
 8006234:	e04e      	b.n	80062d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	699b      	ldr	r3, [r3, #24]
 800623c:	f003 0310 	and.w	r3, r3, #16
 8006240:	2b10      	cmp	r3, #16
 8006242:	d107      	bne.n	8006254 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	2210      	movs	r2, #16
 800624a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2204      	movs	r2, #4
 8006250:	645a      	str	r2, [r3, #68]	@ 0x44
 8006252:	e002      	b.n	800625a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2200      	movs	r2, #0
 8006258:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	2220      	movs	r2, #32
 8006260:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	6859      	ldr	r1, [r3, #4]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	4b1b      	ldr	r3, [pc, #108]	@ (80062dc <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800626e:	400b      	ands	r3, r1
 8006270:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2220      	movs	r2, #32
 8006276:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2200      	movs	r2, #0
 800627e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2200      	movs	r2, #0
 8006286:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	e022      	b.n	80062d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800628e:	f7fe fa87 	bl	80047a0 <HAL_GetTick>
 8006292:	4602      	mov	r2, r0
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	1ad3      	subs	r3, r2, r3
 8006298:	68ba      	ldr	r2, [r7, #8]
 800629a:	429a      	cmp	r2, r3
 800629c:	d302      	bcc.n	80062a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d10f      	bne.n	80062c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062a8:	f043 0220 	orr.w	r2, r3, #32
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2220      	movs	r2, #32
 80062b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2200      	movs	r2, #0
 80062bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80062c0:	2301      	movs	r3, #1
 80062c2:	e007      	b.n	80062d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	699b      	ldr	r3, [r3, #24]
 80062ca:	f003 0304 	and.w	r3, r3, #4
 80062ce:	2b04      	cmp	r3, #4
 80062d0:	d193      	bne.n	80061fa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80062d2:	2300      	movs	r3, #0
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3710      	adds	r7, #16
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}
 80062dc:	fe00e800 	.word	0xfe00e800

080062e0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b08a      	sub	sp, #40	@ 0x28
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	60b9      	str	r1, [r7, #8]
 80062ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062ec:	2300      	movs	r3, #0
 80062ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	699b      	ldr	r3, [r3, #24]
 80062f8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80062fa:	2300      	movs	r3, #0
 80062fc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006302:	69bb      	ldr	r3, [r7, #24]
 8006304:	f003 0310 	and.w	r3, r3, #16
 8006308:	2b00      	cmp	r3, #0
 800630a:	d068      	beq.n	80063de <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	2210      	movs	r2, #16
 8006312:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006314:	e049      	b.n	80063aa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800631c:	d045      	beq.n	80063aa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800631e:	f7fe fa3f 	bl	80047a0 <HAL_GetTick>
 8006322:	4602      	mov	r2, r0
 8006324:	69fb      	ldr	r3, [r7, #28]
 8006326:	1ad3      	subs	r3, r2, r3
 8006328:	68ba      	ldr	r2, [r7, #8]
 800632a:	429a      	cmp	r2, r3
 800632c:	d302      	bcc.n	8006334 <I2C_IsErrorOccurred+0x54>
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d13a      	bne.n	80063aa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800633e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006346:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	699b      	ldr	r3, [r3, #24]
 800634e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006352:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006356:	d121      	bne.n	800639c <I2C_IsErrorOccurred+0xbc>
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800635e:	d01d      	beq.n	800639c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006360:	7cfb      	ldrb	r3, [r7, #19]
 8006362:	2b20      	cmp	r3, #32
 8006364:	d01a      	beq.n	800639c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	685a      	ldr	r2, [r3, #4]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006374:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006376:	f7fe fa13 	bl	80047a0 <HAL_GetTick>
 800637a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800637c:	e00e      	b.n	800639c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800637e:	f7fe fa0f 	bl	80047a0 <HAL_GetTick>
 8006382:	4602      	mov	r2, r0
 8006384:	69fb      	ldr	r3, [r7, #28]
 8006386:	1ad3      	subs	r3, r2, r3
 8006388:	2b19      	cmp	r3, #25
 800638a:	d907      	bls.n	800639c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800638c:	6a3b      	ldr	r3, [r7, #32]
 800638e:	f043 0320 	orr.w	r3, r3, #32
 8006392:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006394:	2301      	movs	r3, #1
 8006396:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800639a:	e006      	b.n	80063aa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	699b      	ldr	r3, [r3, #24]
 80063a2:	f003 0320 	and.w	r3, r3, #32
 80063a6:	2b20      	cmp	r3, #32
 80063a8:	d1e9      	bne.n	800637e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	699b      	ldr	r3, [r3, #24]
 80063b0:	f003 0320 	and.w	r3, r3, #32
 80063b4:	2b20      	cmp	r3, #32
 80063b6:	d003      	beq.n	80063c0 <I2C_IsErrorOccurred+0xe0>
 80063b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d0aa      	beq.n	8006316 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80063c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d103      	bne.n	80063d0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	2220      	movs	r2, #32
 80063ce:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80063d0:	6a3b      	ldr	r3, [r7, #32]
 80063d2:	f043 0304 	orr.w	r3, r3, #4
 80063d6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80063d8:	2301      	movs	r3, #1
 80063da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	699b      	ldr	r3, [r3, #24]
 80063e4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80063e6:	69bb      	ldr	r3, [r7, #24]
 80063e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d00b      	beq.n	8006408 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80063f0:	6a3b      	ldr	r3, [r7, #32]
 80063f2:	f043 0301 	orr.w	r3, r3, #1
 80063f6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006400:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006408:	69bb      	ldr	r3, [r7, #24]
 800640a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800640e:	2b00      	cmp	r3, #0
 8006410:	d00b      	beq.n	800642a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006412:	6a3b      	ldr	r3, [r7, #32]
 8006414:	f043 0308 	orr.w	r3, r3, #8
 8006418:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006422:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006424:	2301      	movs	r3, #1
 8006426:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800642a:	69bb      	ldr	r3, [r7, #24]
 800642c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006430:	2b00      	cmp	r3, #0
 8006432:	d00b      	beq.n	800644c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006434:	6a3b      	ldr	r3, [r7, #32]
 8006436:	f043 0302 	orr.w	r3, r3, #2
 800643a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006444:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800644c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006450:	2b00      	cmp	r3, #0
 8006452:	d01c      	beq.n	800648e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006454:	68f8      	ldr	r0, [r7, #12]
 8006456:	f7ff fdca 	bl	8005fee <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	6859      	ldr	r1, [r3, #4]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	4b0d      	ldr	r3, [pc, #52]	@ (800649c <I2C_IsErrorOccurred+0x1bc>)
 8006466:	400b      	ands	r3, r1
 8006468:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800646e:	6a3b      	ldr	r3, [r7, #32]
 8006470:	431a      	orrs	r2, r3
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2220      	movs	r2, #32
 800647a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2200      	movs	r2, #0
 8006482:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2200      	movs	r2, #0
 800648a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800648e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006492:	4618      	mov	r0, r3
 8006494:	3728      	adds	r7, #40	@ 0x28
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}
 800649a:	bf00      	nop
 800649c:	fe00e800 	.word	0xfe00e800

080064a0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b087      	sub	sp, #28
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	60f8      	str	r0, [r7, #12]
 80064a8:	607b      	str	r3, [r7, #4]
 80064aa:	460b      	mov	r3, r1
 80064ac:	817b      	strh	r3, [r7, #10]
 80064ae:	4613      	mov	r3, r2
 80064b0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80064b2:	897b      	ldrh	r3, [r7, #10]
 80064b4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80064b8:	7a7b      	ldrb	r3, [r7, #9]
 80064ba:	041b      	lsls	r3, r3, #16
 80064bc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80064c0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80064c6:	6a3b      	ldr	r3, [r7, #32]
 80064c8:	4313      	orrs	r3, r2
 80064ca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80064ce:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	685a      	ldr	r2, [r3, #4]
 80064d6:	6a3b      	ldr	r3, [r7, #32]
 80064d8:	0d5b      	lsrs	r3, r3, #21
 80064da:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80064de:	4b08      	ldr	r3, [pc, #32]	@ (8006500 <I2C_TransferConfig+0x60>)
 80064e0:	430b      	orrs	r3, r1
 80064e2:	43db      	mvns	r3, r3
 80064e4:	ea02 0103 	and.w	r1, r2, r3
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	697a      	ldr	r2, [r7, #20]
 80064ee:	430a      	orrs	r2, r1
 80064f0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80064f2:	bf00      	nop
 80064f4:	371c      	adds	r7, #28
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr
 80064fe:	bf00      	nop
 8006500:	03ff63ff 	.word	0x03ff63ff

08006504 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006504:	b480      	push	{r7}
 8006506:	b085      	sub	sp, #20
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	460b      	mov	r3, r1
 800650e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006510:	2300      	movs	r3, #0
 8006512:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006514:	887b      	ldrh	r3, [r7, #2]
 8006516:	f003 0301 	and.w	r3, r3, #1
 800651a:	2b00      	cmp	r3, #0
 800651c:	d00f      	beq.n	800653e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8006524:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800652c:	b2db      	uxtb	r3, r3
 800652e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006532:	2b28      	cmp	r3, #40	@ 0x28
 8006534:	d003      	beq.n	800653e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800653c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800653e:	887b      	ldrh	r3, [r7, #2]
 8006540:	f003 0302 	and.w	r3, r3, #2
 8006544:	2b00      	cmp	r3, #0
 8006546:	d00f      	beq.n	8006568 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800654e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006556:	b2db      	uxtb	r3, r3
 8006558:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800655c:	2b28      	cmp	r3, #40	@ 0x28
 800655e:	d003      	beq.n	8006568 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8006566:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006568:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800656c:	2b00      	cmp	r3, #0
 800656e:	da03      	bge.n	8006578 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8006576:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006578:	887b      	ldrh	r3, [r7, #2]
 800657a:	2b10      	cmp	r3, #16
 800657c:	d103      	bne.n	8006586 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8006584:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006586:	887b      	ldrh	r3, [r7, #2]
 8006588:	2b20      	cmp	r3, #32
 800658a:	d103      	bne.n	8006594 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f043 0320 	orr.w	r3, r3, #32
 8006592:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006594:	887b      	ldrh	r3, [r7, #2]
 8006596:	2b40      	cmp	r3, #64	@ 0x40
 8006598:	d103      	bne.n	80065a2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80065a0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	6819      	ldr	r1, [r3, #0]
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	43da      	mvns	r2, r3
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	400a      	ands	r2, r1
 80065b2:	601a      	str	r2, [r3, #0]
}
 80065b4:	bf00      	nop
 80065b6:	3714      	adds	r7, #20
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr

080065c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b083      	sub	sp, #12
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	2b20      	cmp	r3, #32
 80065d4:	d138      	bne.n	8006648 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d101      	bne.n	80065e4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80065e0:	2302      	movs	r3, #2
 80065e2:	e032      	b.n	800664a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2201      	movs	r2, #1
 80065e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2224      	movs	r2, #36	@ 0x24
 80065f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f022 0201 	bic.w	r2, r2, #1
 8006602:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	681a      	ldr	r2, [r3, #0]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006612:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	6819      	ldr	r1, [r3, #0]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	683a      	ldr	r2, [r7, #0]
 8006620:	430a      	orrs	r2, r1
 8006622:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f042 0201 	orr.w	r2, r2, #1
 8006632:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2220      	movs	r2, #32
 8006638:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2200      	movs	r2, #0
 8006640:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006644:	2300      	movs	r3, #0
 8006646:	e000      	b.n	800664a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006648:	2302      	movs	r3, #2
  }
}
 800664a:	4618      	mov	r0, r3
 800664c:	370c      	adds	r7, #12
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr

08006656 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006656:	b480      	push	{r7}
 8006658:	b085      	sub	sp, #20
 800665a:	af00      	add	r7, sp, #0
 800665c:	6078      	str	r0, [r7, #4]
 800665e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006666:	b2db      	uxtb	r3, r3
 8006668:	2b20      	cmp	r3, #32
 800666a:	d139      	bne.n	80066e0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006672:	2b01      	cmp	r3, #1
 8006674:	d101      	bne.n	800667a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006676:	2302      	movs	r3, #2
 8006678:	e033      	b.n	80066e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2201      	movs	r2, #1
 800667e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2224      	movs	r2, #36	@ 0x24
 8006686:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f022 0201 	bic.w	r2, r2, #1
 8006698:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80066a8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	021b      	lsls	r3, r3, #8
 80066ae:	68fa      	ldr	r2, [r7, #12]
 80066b0:	4313      	orrs	r3, r2
 80066b2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	68fa      	ldr	r2, [r7, #12]
 80066ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f042 0201 	orr.w	r2, r2, #1
 80066ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2220      	movs	r2, #32
 80066d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2200      	movs	r2, #0
 80066d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80066dc:	2300      	movs	r3, #0
 80066de:	e000      	b.n	80066e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80066e0:	2302      	movs	r3, #2
  }
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3714      	adds	r7, #20
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr
	...

080066f0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b082      	sub	sp, #8
 80066f4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80066f6:	2300      	movs	r3, #0
 80066f8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80066fa:	4b23      	ldr	r3, [pc, #140]	@ (8006788 <HAL_PWREx_EnableOverDrive+0x98>)
 80066fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066fe:	4a22      	ldr	r2, [pc, #136]	@ (8006788 <HAL_PWREx_EnableOverDrive+0x98>)
 8006700:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006704:	6413      	str	r3, [r2, #64]	@ 0x40
 8006706:	4b20      	ldr	r3, [pc, #128]	@ (8006788 <HAL_PWREx_EnableOverDrive+0x98>)
 8006708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800670a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800670e:	603b      	str	r3, [r7, #0]
 8006710:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006712:	4b1e      	ldr	r3, [pc, #120]	@ (800678c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a1d      	ldr	r2, [pc, #116]	@ (800678c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006718:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800671c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800671e:	f7fe f83f 	bl	80047a0 <HAL_GetTick>
 8006722:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006724:	e009      	b.n	800673a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006726:	f7fe f83b 	bl	80047a0 <HAL_GetTick>
 800672a:	4602      	mov	r2, r0
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	1ad3      	subs	r3, r2, r3
 8006730:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006734:	d901      	bls.n	800673a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006736:	2303      	movs	r3, #3
 8006738:	e022      	b.n	8006780 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800673a:	4b14      	ldr	r3, [pc, #80]	@ (800678c <HAL_PWREx_EnableOverDrive+0x9c>)
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006742:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006746:	d1ee      	bne.n	8006726 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006748:	4b10      	ldr	r3, [pc, #64]	@ (800678c <HAL_PWREx_EnableOverDrive+0x9c>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a0f      	ldr	r2, [pc, #60]	@ (800678c <HAL_PWREx_EnableOverDrive+0x9c>)
 800674e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006752:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006754:	f7fe f824 	bl	80047a0 <HAL_GetTick>
 8006758:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800675a:	e009      	b.n	8006770 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800675c:	f7fe f820 	bl	80047a0 <HAL_GetTick>
 8006760:	4602      	mov	r2, r0
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	1ad3      	subs	r3, r2, r3
 8006766:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800676a:	d901      	bls.n	8006770 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800676c:	2303      	movs	r3, #3
 800676e:	e007      	b.n	8006780 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006770:	4b06      	ldr	r3, [pc, #24]	@ (800678c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006778:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800677c:	d1ee      	bne.n	800675c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800677e:	2300      	movs	r3, #0
}
 8006780:	4618      	mov	r0, r3
 8006782:	3708      	adds	r7, #8
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}
 8006788:	40023800 	.word	0x40023800
 800678c:	40007000 	.word	0x40007000

08006790 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b086      	sub	sp, #24
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006798:	2300      	movs	r3, #0
 800679a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d101      	bne.n	80067a6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80067a2:	2301      	movs	r3, #1
 80067a4:	e291      	b.n	8006cca <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f003 0301 	and.w	r3, r3, #1
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	f000 8087 	beq.w	80068c2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80067b4:	4b96      	ldr	r3, [pc, #600]	@ (8006a10 <HAL_RCC_OscConfig+0x280>)
 80067b6:	689b      	ldr	r3, [r3, #8]
 80067b8:	f003 030c 	and.w	r3, r3, #12
 80067bc:	2b04      	cmp	r3, #4
 80067be:	d00c      	beq.n	80067da <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80067c0:	4b93      	ldr	r3, [pc, #588]	@ (8006a10 <HAL_RCC_OscConfig+0x280>)
 80067c2:	689b      	ldr	r3, [r3, #8]
 80067c4:	f003 030c 	and.w	r3, r3, #12
 80067c8:	2b08      	cmp	r3, #8
 80067ca:	d112      	bne.n	80067f2 <HAL_RCC_OscConfig+0x62>
 80067cc:	4b90      	ldr	r3, [pc, #576]	@ (8006a10 <HAL_RCC_OscConfig+0x280>)
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80067d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80067d8:	d10b      	bne.n	80067f2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067da:	4b8d      	ldr	r3, [pc, #564]	@ (8006a10 <HAL_RCC_OscConfig+0x280>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d06c      	beq.n	80068c0 <HAL_RCC_OscConfig+0x130>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d168      	bne.n	80068c0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80067ee:	2301      	movs	r3, #1
 80067f0:	e26b      	b.n	8006cca <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067fa:	d106      	bne.n	800680a <HAL_RCC_OscConfig+0x7a>
 80067fc:	4b84      	ldr	r3, [pc, #528]	@ (8006a10 <HAL_RCC_OscConfig+0x280>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a83      	ldr	r2, [pc, #524]	@ (8006a10 <HAL_RCC_OscConfig+0x280>)
 8006802:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006806:	6013      	str	r3, [r2, #0]
 8006808:	e02e      	b.n	8006868 <HAL_RCC_OscConfig+0xd8>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d10c      	bne.n	800682c <HAL_RCC_OscConfig+0x9c>
 8006812:	4b7f      	ldr	r3, [pc, #508]	@ (8006a10 <HAL_RCC_OscConfig+0x280>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a7e      	ldr	r2, [pc, #504]	@ (8006a10 <HAL_RCC_OscConfig+0x280>)
 8006818:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800681c:	6013      	str	r3, [r2, #0]
 800681e:	4b7c      	ldr	r3, [pc, #496]	@ (8006a10 <HAL_RCC_OscConfig+0x280>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a7b      	ldr	r2, [pc, #492]	@ (8006a10 <HAL_RCC_OscConfig+0x280>)
 8006824:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006828:	6013      	str	r3, [r2, #0]
 800682a:	e01d      	b.n	8006868 <HAL_RCC_OscConfig+0xd8>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006834:	d10c      	bne.n	8006850 <HAL_RCC_OscConfig+0xc0>
 8006836:	4b76      	ldr	r3, [pc, #472]	@ (8006a10 <HAL_RCC_OscConfig+0x280>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a75      	ldr	r2, [pc, #468]	@ (8006a10 <HAL_RCC_OscConfig+0x280>)
 800683c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006840:	6013      	str	r3, [r2, #0]
 8006842:	4b73      	ldr	r3, [pc, #460]	@ (8006a10 <HAL_RCC_OscConfig+0x280>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a72      	ldr	r2, [pc, #456]	@ (8006a10 <HAL_RCC_OscConfig+0x280>)
 8006848:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800684c:	6013      	str	r3, [r2, #0]
 800684e:	e00b      	b.n	8006868 <HAL_RCC_OscConfig+0xd8>
 8006850:	4b6f      	ldr	r3, [pc, #444]	@ (8006a10 <HAL_RCC_OscConfig+0x280>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a6e      	ldr	r2, [pc, #440]	@ (8006a10 <HAL_RCC_OscConfig+0x280>)
 8006856:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800685a:	6013      	str	r3, [r2, #0]
 800685c:	4b6c      	ldr	r3, [pc, #432]	@ (8006a10 <HAL_RCC_OscConfig+0x280>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a6b      	ldr	r2, [pc, #428]	@ (8006a10 <HAL_RCC_OscConfig+0x280>)
 8006862:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006866:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d013      	beq.n	8006898 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006870:	f7fd ff96 	bl	80047a0 <HAL_GetTick>
 8006874:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006876:	e008      	b.n	800688a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006878:	f7fd ff92 	bl	80047a0 <HAL_GetTick>
 800687c:	4602      	mov	r2, r0
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	1ad3      	subs	r3, r2, r3
 8006882:	2b64      	cmp	r3, #100	@ 0x64
 8006884:	d901      	bls.n	800688a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006886:	2303      	movs	r3, #3
 8006888:	e21f      	b.n	8006cca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800688a:	4b61      	ldr	r3, [pc, #388]	@ (8006a10 <HAL_RCC_OscConfig+0x280>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006892:	2b00      	cmp	r3, #0
 8006894:	d0f0      	beq.n	8006878 <HAL_RCC_OscConfig+0xe8>
 8006896:	e014      	b.n	80068c2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006898:	f7fd ff82 	bl	80047a0 <HAL_GetTick>
 800689c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800689e:	e008      	b.n	80068b2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068a0:	f7fd ff7e 	bl	80047a0 <HAL_GetTick>
 80068a4:	4602      	mov	r2, r0
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	1ad3      	subs	r3, r2, r3
 80068aa:	2b64      	cmp	r3, #100	@ 0x64
 80068ac:	d901      	bls.n	80068b2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80068ae:	2303      	movs	r3, #3
 80068b0:	e20b      	b.n	8006cca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068b2:	4b57      	ldr	r3, [pc, #348]	@ (8006a10 <HAL_RCC_OscConfig+0x280>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d1f0      	bne.n	80068a0 <HAL_RCC_OscConfig+0x110>
 80068be:	e000      	b.n	80068c2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f003 0302 	and.w	r3, r3, #2
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d069      	beq.n	80069a2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80068ce:	4b50      	ldr	r3, [pc, #320]	@ (8006a10 <HAL_RCC_OscConfig+0x280>)
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	f003 030c 	and.w	r3, r3, #12
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d00b      	beq.n	80068f2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80068da:	4b4d      	ldr	r3, [pc, #308]	@ (8006a10 <HAL_RCC_OscConfig+0x280>)
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	f003 030c 	and.w	r3, r3, #12
 80068e2:	2b08      	cmp	r3, #8
 80068e4:	d11c      	bne.n	8006920 <HAL_RCC_OscConfig+0x190>
 80068e6:	4b4a      	ldr	r3, [pc, #296]	@ (8006a10 <HAL_RCC_OscConfig+0x280>)
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d116      	bne.n	8006920 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80068f2:	4b47      	ldr	r3, [pc, #284]	@ (8006a10 <HAL_RCC_OscConfig+0x280>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f003 0302 	and.w	r3, r3, #2
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d005      	beq.n	800690a <HAL_RCC_OscConfig+0x17a>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	68db      	ldr	r3, [r3, #12]
 8006902:	2b01      	cmp	r3, #1
 8006904:	d001      	beq.n	800690a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006906:	2301      	movs	r3, #1
 8006908:	e1df      	b.n	8006cca <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800690a:	4b41      	ldr	r3, [pc, #260]	@ (8006a10 <HAL_RCC_OscConfig+0x280>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	691b      	ldr	r3, [r3, #16]
 8006916:	00db      	lsls	r3, r3, #3
 8006918:	493d      	ldr	r1, [pc, #244]	@ (8006a10 <HAL_RCC_OscConfig+0x280>)
 800691a:	4313      	orrs	r3, r2
 800691c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800691e:	e040      	b.n	80069a2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	68db      	ldr	r3, [r3, #12]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d023      	beq.n	8006970 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006928:	4b39      	ldr	r3, [pc, #228]	@ (8006a10 <HAL_RCC_OscConfig+0x280>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a38      	ldr	r2, [pc, #224]	@ (8006a10 <HAL_RCC_OscConfig+0x280>)
 800692e:	f043 0301 	orr.w	r3, r3, #1
 8006932:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006934:	f7fd ff34 	bl	80047a0 <HAL_GetTick>
 8006938:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800693a:	e008      	b.n	800694e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800693c:	f7fd ff30 	bl	80047a0 <HAL_GetTick>
 8006940:	4602      	mov	r2, r0
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	1ad3      	subs	r3, r2, r3
 8006946:	2b02      	cmp	r3, #2
 8006948:	d901      	bls.n	800694e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800694a:	2303      	movs	r3, #3
 800694c:	e1bd      	b.n	8006cca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800694e:	4b30      	ldr	r3, [pc, #192]	@ (8006a10 <HAL_RCC_OscConfig+0x280>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f003 0302 	and.w	r3, r3, #2
 8006956:	2b00      	cmp	r3, #0
 8006958:	d0f0      	beq.n	800693c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800695a:	4b2d      	ldr	r3, [pc, #180]	@ (8006a10 <HAL_RCC_OscConfig+0x280>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	691b      	ldr	r3, [r3, #16]
 8006966:	00db      	lsls	r3, r3, #3
 8006968:	4929      	ldr	r1, [pc, #164]	@ (8006a10 <HAL_RCC_OscConfig+0x280>)
 800696a:	4313      	orrs	r3, r2
 800696c:	600b      	str	r3, [r1, #0]
 800696e:	e018      	b.n	80069a2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006970:	4b27      	ldr	r3, [pc, #156]	@ (8006a10 <HAL_RCC_OscConfig+0x280>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a26      	ldr	r2, [pc, #152]	@ (8006a10 <HAL_RCC_OscConfig+0x280>)
 8006976:	f023 0301 	bic.w	r3, r3, #1
 800697a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800697c:	f7fd ff10 	bl	80047a0 <HAL_GetTick>
 8006980:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006982:	e008      	b.n	8006996 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006984:	f7fd ff0c 	bl	80047a0 <HAL_GetTick>
 8006988:	4602      	mov	r2, r0
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	1ad3      	subs	r3, r2, r3
 800698e:	2b02      	cmp	r3, #2
 8006990:	d901      	bls.n	8006996 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006992:	2303      	movs	r3, #3
 8006994:	e199      	b.n	8006cca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006996:	4b1e      	ldr	r3, [pc, #120]	@ (8006a10 <HAL_RCC_OscConfig+0x280>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f003 0302 	and.w	r3, r3, #2
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d1f0      	bne.n	8006984 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f003 0308 	and.w	r3, r3, #8
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d038      	beq.n	8006a20 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	695b      	ldr	r3, [r3, #20]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d019      	beq.n	80069ea <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80069b6:	4b16      	ldr	r3, [pc, #88]	@ (8006a10 <HAL_RCC_OscConfig+0x280>)
 80069b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069ba:	4a15      	ldr	r2, [pc, #84]	@ (8006a10 <HAL_RCC_OscConfig+0x280>)
 80069bc:	f043 0301 	orr.w	r3, r3, #1
 80069c0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069c2:	f7fd feed 	bl	80047a0 <HAL_GetTick>
 80069c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069c8:	e008      	b.n	80069dc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80069ca:	f7fd fee9 	bl	80047a0 <HAL_GetTick>
 80069ce:	4602      	mov	r2, r0
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	1ad3      	subs	r3, r2, r3
 80069d4:	2b02      	cmp	r3, #2
 80069d6:	d901      	bls.n	80069dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80069d8:	2303      	movs	r3, #3
 80069da:	e176      	b.n	8006cca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069dc:	4b0c      	ldr	r3, [pc, #48]	@ (8006a10 <HAL_RCC_OscConfig+0x280>)
 80069de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069e0:	f003 0302 	and.w	r3, r3, #2
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d0f0      	beq.n	80069ca <HAL_RCC_OscConfig+0x23a>
 80069e8:	e01a      	b.n	8006a20 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80069ea:	4b09      	ldr	r3, [pc, #36]	@ (8006a10 <HAL_RCC_OscConfig+0x280>)
 80069ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069ee:	4a08      	ldr	r2, [pc, #32]	@ (8006a10 <HAL_RCC_OscConfig+0x280>)
 80069f0:	f023 0301 	bic.w	r3, r3, #1
 80069f4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069f6:	f7fd fed3 	bl	80047a0 <HAL_GetTick>
 80069fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80069fc:	e00a      	b.n	8006a14 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80069fe:	f7fd fecf 	bl	80047a0 <HAL_GetTick>
 8006a02:	4602      	mov	r2, r0
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	1ad3      	subs	r3, r2, r3
 8006a08:	2b02      	cmp	r3, #2
 8006a0a:	d903      	bls.n	8006a14 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006a0c:	2303      	movs	r3, #3
 8006a0e:	e15c      	b.n	8006cca <HAL_RCC_OscConfig+0x53a>
 8006a10:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a14:	4b91      	ldr	r3, [pc, #580]	@ (8006c5c <HAL_RCC_OscConfig+0x4cc>)
 8006a16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a18:	f003 0302 	and.w	r3, r3, #2
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d1ee      	bne.n	80069fe <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f003 0304 	and.w	r3, r3, #4
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	f000 80a4 	beq.w	8006b76 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a2e:	4b8b      	ldr	r3, [pc, #556]	@ (8006c5c <HAL_RCC_OscConfig+0x4cc>)
 8006a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d10d      	bne.n	8006a56 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a3a:	4b88      	ldr	r3, [pc, #544]	@ (8006c5c <HAL_RCC_OscConfig+0x4cc>)
 8006a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a3e:	4a87      	ldr	r2, [pc, #540]	@ (8006c5c <HAL_RCC_OscConfig+0x4cc>)
 8006a40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a44:	6413      	str	r3, [r2, #64]	@ 0x40
 8006a46:	4b85      	ldr	r3, [pc, #532]	@ (8006c5c <HAL_RCC_OscConfig+0x4cc>)
 8006a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a4e:	60bb      	str	r3, [r7, #8]
 8006a50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a52:	2301      	movs	r3, #1
 8006a54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a56:	4b82      	ldr	r3, [pc, #520]	@ (8006c60 <HAL_RCC_OscConfig+0x4d0>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d118      	bne.n	8006a94 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006a62:	4b7f      	ldr	r3, [pc, #508]	@ (8006c60 <HAL_RCC_OscConfig+0x4d0>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a7e      	ldr	r2, [pc, #504]	@ (8006c60 <HAL_RCC_OscConfig+0x4d0>)
 8006a68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a6e:	f7fd fe97 	bl	80047a0 <HAL_GetTick>
 8006a72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a74:	e008      	b.n	8006a88 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a76:	f7fd fe93 	bl	80047a0 <HAL_GetTick>
 8006a7a:	4602      	mov	r2, r0
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	1ad3      	subs	r3, r2, r3
 8006a80:	2b64      	cmp	r3, #100	@ 0x64
 8006a82:	d901      	bls.n	8006a88 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006a84:	2303      	movs	r3, #3
 8006a86:	e120      	b.n	8006cca <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a88:	4b75      	ldr	r3, [pc, #468]	@ (8006c60 <HAL_RCC_OscConfig+0x4d0>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d0f0      	beq.n	8006a76 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	d106      	bne.n	8006aaa <HAL_RCC_OscConfig+0x31a>
 8006a9c:	4b6f      	ldr	r3, [pc, #444]	@ (8006c5c <HAL_RCC_OscConfig+0x4cc>)
 8006a9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006aa0:	4a6e      	ldr	r2, [pc, #440]	@ (8006c5c <HAL_RCC_OscConfig+0x4cc>)
 8006aa2:	f043 0301 	orr.w	r3, r3, #1
 8006aa6:	6713      	str	r3, [r2, #112]	@ 0x70
 8006aa8:	e02d      	b.n	8006b06 <HAL_RCC_OscConfig+0x376>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d10c      	bne.n	8006acc <HAL_RCC_OscConfig+0x33c>
 8006ab2:	4b6a      	ldr	r3, [pc, #424]	@ (8006c5c <HAL_RCC_OscConfig+0x4cc>)
 8006ab4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ab6:	4a69      	ldr	r2, [pc, #420]	@ (8006c5c <HAL_RCC_OscConfig+0x4cc>)
 8006ab8:	f023 0301 	bic.w	r3, r3, #1
 8006abc:	6713      	str	r3, [r2, #112]	@ 0x70
 8006abe:	4b67      	ldr	r3, [pc, #412]	@ (8006c5c <HAL_RCC_OscConfig+0x4cc>)
 8006ac0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ac2:	4a66      	ldr	r2, [pc, #408]	@ (8006c5c <HAL_RCC_OscConfig+0x4cc>)
 8006ac4:	f023 0304 	bic.w	r3, r3, #4
 8006ac8:	6713      	str	r3, [r2, #112]	@ 0x70
 8006aca:	e01c      	b.n	8006b06 <HAL_RCC_OscConfig+0x376>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	2b05      	cmp	r3, #5
 8006ad2:	d10c      	bne.n	8006aee <HAL_RCC_OscConfig+0x35e>
 8006ad4:	4b61      	ldr	r3, [pc, #388]	@ (8006c5c <HAL_RCC_OscConfig+0x4cc>)
 8006ad6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ad8:	4a60      	ldr	r2, [pc, #384]	@ (8006c5c <HAL_RCC_OscConfig+0x4cc>)
 8006ada:	f043 0304 	orr.w	r3, r3, #4
 8006ade:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ae0:	4b5e      	ldr	r3, [pc, #376]	@ (8006c5c <HAL_RCC_OscConfig+0x4cc>)
 8006ae2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ae4:	4a5d      	ldr	r2, [pc, #372]	@ (8006c5c <HAL_RCC_OscConfig+0x4cc>)
 8006ae6:	f043 0301 	orr.w	r3, r3, #1
 8006aea:	6713      	str	r3, [r2, #112]	@ 0x70
 8006aec:	e00b      	b.n	8006b06 <HAL_RCC_OscConfig+0x376>
 8006aee:	4b5b      	ldr	r3, [pc, #364]	@ (8006c5c <HAL_RCC_OscConfig+0x4cc>)
 8006af0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006af2:	4a5a      	ldr	r2, [pc, #360]	@ (8006c5c <HAL_RCC_OscConfig+0x4cc>)
 8006af4:	f023 0301 	bic.w	r3, r3, #1
 8006af8:	6713      	str	r3, [r2, #112]	@ 0x70
 8006afa:	4b58      	ldr	r3, [pc, #352]	@ (8006c5c <HAL_RCC_OscConfig+0x4cc>)
 8006afc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006afe:	4a57      	ldr	r2, [pc, #348]	@ (8006c5c <HAL_RCC_OscConfig+0x4cc>)
 8006b00:	f023 0304 	bic.w	r3, r3, #4
 8006b04:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	689b      	ldr	r3, [r3, #8]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d015      	beq.n	8006b3a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b0e:	f7fd fe47 	bl	80047a0 <HAL_GetTick>
 8006b12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b14:	e00a      	b.n	8006b2c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b16:	f7fd fe43 	bl	80047a0 <HAL_GetTick>
 8006b1a:	4602      	mov	r2, r0
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	1ad3      	subs	r3, r2, r3
 8006b20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d901      	bls.n	8006b2c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006b28:	2303      	movs	r3, #3
 8006b2a:	e0ce      	b.n	8006cca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b2c:	4b4b      	ldr	r3, [pc, #300]	@ (8006c5c <HAL_RCC_OscConfig+0x4cc>)
 8006b2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b30:	f003 0302 	and.w	r3, r3, #2
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d0ee      	beq.n	8006b16 <HAL_RCC_OscConfig+0x386>
 8006b38:	e014      	b.n	8006b64 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b3a:	f7fd fe31 	bl	80047a0 <HAL_GetTick>
 8006b3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b40:	e00a      	b.n	8006b58 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b42:	f7fd fe2d 	bl	80047a0 <HAL_GetTick>
 8006b46:	4602      	mov	r2, r0
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	1ad3      	subs	r3, r2, r3
 8006b4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d901      	bls.n	8006b58 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006b54:	2303      	movs	r3, #3
 8006b56:	e0b8      	b.n	8006cca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b58:	4b40      	ldr	r3, [pc, #256]	@ (8006c5c <HAL_RCC_OscConfig+0x4cc>)
 8006b5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b5c:	f003 0302 	and.w	r3, r3, #2
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d1ee      	bne.n	8006b42 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006b64:	7dfb      	ldrb	r3, [r7, #23]
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d105      	bne.n	8006b76 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b6a:	4b3c      	ldr	r3, [pc, #240]	@ (8006c5c <HAL_RCC_OscConfig+0x4cc>)
 8006b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b6e:	4a3b      	ldr	r2, [pc, #236]	@ (8006c5c <HAL_RCC_OscConfig+0x4cc>)
 8006b70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006b74:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	699b      	ldr	r3, [r3, #24]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	f000 80a4 	beq.w	8006cc8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006b80:	4b36      	ldr	r3, [pc, #216]	@ (8006c5c <HAL_RCC_OscConfig+0x4cc>)
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	f003 030c 	and.w	r3, r3, #12
 8006b88:	2b08      	cmp	r3, #8
 8006b8a:	d06b      	beq.n	8006c64 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	699b      	ldr	r3, [r3, #24]
 8006b90:	2b02      	cmp	r3, #2
 8006b92:	d149      	bne.n	8006c28 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b94:	4b31      	ldr	r3, [pc, #196]	@ (8006c5c <HAL_RCC_OscConfig+0x4cc>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a30      	ldr	r2, [pc, #192]	@ (8006c5c <HAL_RCC_OscConfig+0x4cc>)
 8006b9a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006b9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ba0:	f7fd fdfe 	bl	80047a0 <HAL_GetTick>
 8006ba4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ba6:	e008      	b.n	8006bba <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ba8:	f7fd fdfa 	bl	80047a0 <HAL_GetTick>
 8006bac:	4602      	mov	r2, r0
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	1ad3      	subs	r3, r2, r3
 8006bb2:	2b02      	cmp	r3, #2
 8006bb4:	d901      	bls.n	8006bba <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006bb6:	2303      	movs	r3, #3
 8006bb8:	e087      	b.n	8006cca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bba:	4b28      	ldr	r3, [pc, #160]	@ (8006c5c <HAL_RCC_OscConfig+0x4cc>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d1f0      	bne.n	8006ba8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	69da      	ldr	r2, [r3, #28]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6a1b      	ldr	r3, [r3, #32]
 8006bce:	431a      	orrs	r2, r3
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bd4:	019b      	lsls	r3, r3, #6
 8006bd6:	431a      	orrs	r2, r3
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bdc:	085b      	lsrs	r3, r3, #1
 8006bde:	3b01      	subs	r3, #1
 8006be0:	041b      	lsls	r3, r3, #16
 8006be2:	431a      	orrs	r2, r3
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006be8:	061b      	lsls	r3, r3, #24
 8006bea:	4313      	orrs	r3, r2
 8006bec:	4a1b      	ldr	r2, [pc, #108]	@ (8006c5c <HAL_RCC_OscConfig+0x4cc>)
 8006bee:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006bf2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006bf4:	4b19      	ldr	r3, [pc, #100]	@ (8006c5c <HAL_RCC_OscConfig+0x4cc>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a18      	ldr	r2, [pc, #96]	@ (8006c5c <HAL_RCC_OscConfig+0x4cc>)
 8006bfa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006bfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c00:	f7fd fdce 	bl	80047a0 <HAL_GetTick>
 8006c04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c06:	e008      	b.n	8006c1a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c08:	f7fd fdca 	bl	80047a0 <HAL_GetTick>
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	1ad3      	subs	r3, r2, r3
 8006c12:	2b02      	cmp	r3, #2
 8006c14:	d901      	bls.n	8006c1a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006c16:	2303      	movs	r3, #3
 8006c18:	e057      	b.n	8006cca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c1a:	4b10      	ldr	r3, [pc, #64]	@ (8006c5c <HAL_RCC_OscConfig+0x4cc>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d0f0      	beq.n	8006c08 <HAL_RCC_OscConfig+0x478>
 8006c26:	e04f      	b.n	8006cc8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c28:	4b0c      	ldr	r3, [pc, #48]	@ (8006c5c <HAL_RCC_OscConfig+0x4cc>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a0b      	ldr	r2, [pc, #44]	@ (8006c5c <HAL_RCC_OscConfig+0x4cc>)
 8006c2e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006c32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c34:	f7fd fdb4 	bl	80047a0 <HAL_GetTick>
 8006c38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c3a:	e008      	b.n	8006c4e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c3c:	f7fd fdb0 	bl	80047a0 <HAL_GetTick>
 8006c40:	4602      	mov	r2, r0
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	1ad3      	subs	r3, r2, r3
 8006c46:	2b02      	cmp	r3, #2
 8006c48:	d901      	bls.n	8006c4e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8006c4a:	2303      	movs	r3, #3
 8006c4c:	e03d      	b.n	8006cca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c4e:	4b03      	ldr	r3, [pc, #12]	@ (8006c5c <HAL_RCC_OscConfig+0x4cc>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d1f0      	bne.n	8006c3c <HAL_RCC_OscConfig+0x4ac>
 8006c5a:	e035      	b.n	8006cc8 <HAL_RCC_OscConfig+0x538>
 8006c5c:	40023800 	.word	0x40023800
 8006c60:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006c64:	4b1b      	ldr	r3, [pc, #108]	@ (8006cd4 <HAL_RCC_OscConfig+0x544>)
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	699b      	ldr	r3, [r3, #24]
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	d028      	beq.n	8006cc4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	d121      	bne.n	8006cc4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d11a      	bne.n	8006cc4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006c8e:	68fa      	ldr	r2, [r7, #12]
 8006c90:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006c94:	4013      	ands	r3, r2
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006c9a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d111      	bne.n	8006cc4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006caa:	085b      	lsrs	r3, r3, #1
 8006cac:	3b01      	subs	r3, #1
 8006cae:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d107      	bne.n	8006cc4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cbe:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d001      	beq.n	8006cc8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	e000      	b.n	8006cca <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006cc8:	2300      	movs	r3, #0
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3718      	adds	r7, #24
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}
 8006cd2:	bf00      	nop
 8006cd4:	40023800 	.word	0x40023800

08006cd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b084      	sub	sp, #16
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d101      	bne.n	8006cf0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006cec:	2301      	movs	r3, #1
 8006cee:	e0d0      	b.n	8006e92 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006cf0:	4b6a      	ldr	r3, [pc, #424]	@ (8006e9c <HAL_RCC_ClockConfig+0x1c4>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f003 030f 	and.w	r3, r3, #15
 8006cf8:	683a      	ldr	r2, [r7, #0]
 8006cfa:	429a      	cmp	r2, r3
 8006cfc:	d910      	bls.n	8006d20 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cfe:	4b67      	ldr	r3, [pc, #412]	@ (8006e9c <HAL_RCC_ClockConfig+0x1c4>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f023 020f 	bic.w	r2, r3, #15
 8006d06:	4965      	ldr	r1, [pc, #404]	@ (8006e9c <HAL_RCC_ClockConfig+0x1c4>)
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d0e:	4b63      	ldr	r3, [pc, #396]	@ (8006e9c <HAL_RCC_ClockConfig+0x1c4>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f003 030f 	and.w	r3, r3, #15
 8006d16:	683a      	ldr	r2, [r7, #0]
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d001      	beq.n	8006d20 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	e0b8      	b.n	8006e92 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f003 0302 	and.w	r3, r3, #2
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d020      	beq.n	8006d6e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f003 0304 	and.w	r3, r3, #4
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d005      	beq.n	8006d44 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006d38:	4b59      	ldr	r3, [pc, #356]	@ (8006ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	4a58      	ldr	r2, [pc, #352]	@ (8006ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8006d3e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006d42:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f003 0308 	and.w	r3, r3, #8
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d005      	beq.n	8006d5c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006d50:	4b53      	ldr	r3, [pc, #332]	@ (8006ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8006d52:	689b      	ldr	r3, [r3, #8]
 8006d54:	4a52      	ldr	r2, [pc, #328]	@ (8006ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8006d56:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006d5a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d5c:	4b50      	ldr	r3, [pc, #320]	@ (8006ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8006d5e:	689b      	ldr	r3, [r3, #8]
 8006d60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	494d      	ldr	r1, [pc, #308]	@ (8006ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f003 0301 	and.w	r3, r3, #1
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d040      	beq.n	8006dfc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	d107      	bne.n	8006d92 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d82:	4b47      	ldr	r3, [pc, #284]	@ (8006ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d115      	bne.n	8006dba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	e07f      	b.n	8006e92 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	2b02      	cmp	r3, #2
 8006d98:	d107      	bne.n	8006daa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d9a:	4b41      	ldr	r3, [pc, #260]	@ (8006ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d109      	bne.n	8006dba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006da6:	2301      	movs	r3, #1
 8006da8:	e073      	b.n	8006e92 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006daa:	4b3d      	ldr	r3, [pc, #244]	@ (8006ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f003 0302 	and.w	r3, r3, #2
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d101      	bne.n	8006dba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006db6:	2301      	movs	r3, #1
 8006db8:	e06b      	b.n	8006e92 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006dba:	4b39      	ldr	r3, [pc, #228]	@ (8006ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8006dbc:	689b      	ldr	r3, [r3, #8]
 8006dbe:	f023 0203 	bic.w	r2, r3, #3
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	4936      	ldr	r1, [pc, #216]	@ (8006ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006dcc:	f7fd fce8 	bl	80047a0 <HAL_GetTick>
 8006dd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dd2:	e00a      	b.n	8006dea <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006dd4:	f7fd fce4 	bl	80047a0 <HAL_GetTick>
 8006dd8:	4602      	mov	r2, r0
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	1ad3      	subs	r3, r2, r3
 8006dde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d901      	bls.n	8006dea <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006de6:	2303      	movs	r3, #3
 8006de8:	e053      	b.n	8006e92 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dea:	4b2d      	ldr	r3, [pc, #180]	@ (8006ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	f003 020c 	and.w	r2, r3, #12
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	009b      	lsls	r3, r3, #2
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d1eb      	bne.n	8006dd4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006dfc:	4b27      	ldr	r3, [pc, #156]	@ (8006e9c <HAL_RCC_ClockConfig+0x1c4>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f003 030f 	and.w	r3, r3, #15
 8006e04:	683a      	ldr	r2, [r7, #0]
 8006e06:	429a      	cmp	r2, r3
 8006e08:	d210      	bcs.n	8006e2c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e0a:	4b24      	ldr	r3, [pc, #144]	@ (8006e9c <HAL_RCC_ClockConfig+0x1c4>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f023 020f 	bic.w	r2, r3, #15
 8006e12:	4922      	ldr	r1, [pc, #136]	@ (8006e9c <HAL_RCC_ClockConfig+0x1c4>)
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	4313      	orrs	r3, r2
 8006e18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e1a:	4b20      	ldr	r3, [pc, #128]	@ (8006e9c <HAL_RCC_ClockConfig+0x1c4>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f003 030f 	and.w	r3, r3, #15
 8006e22:	683a      	ldr	r2, [r7, #0]
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d001      	beq.n	8006e2c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	e032      	b.n	8006e92 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f003 0304 	and.w	r3, r3, #4
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d008      	beq.n	8006e4a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e38:	4b19      	ldr	r3, [pc, #100]	@ (8006ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	68db      	ldr	r3, [r3, #12]
 8006e44:	4916      	ldr	r1, [pc, #88]	@ (8006ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8006e46:	4313      	orrs	r3, r2
 8006e48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f003 0308 	and.w	r3, r3, #8
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d009      	beq.n	8006e6a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006e56:	4b12      	ldr	r3, [pc, #72]	@ (8006ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	691b      	ldr	r3, [r3, #16]
 8006e62:	00db      	lsls	r3, r3, #3
 8006e64:	490e      	ldr	r1, [pc, #56]	@ (8006ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8006e66:	4313      	orrs	r3, r2
 8006e68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006e6a:	f000 f821 	bl	8006eb0 <HAL_RCC_GetSysClockFreq>
 8006e6e:	4602      	mov	r2, r0
 8006e70:	4b0b      	ldr	r3, [pc, #44]	@ (8006ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8006e72:	689b      	ldr	r3, [r3, #8]
 8006e74:	091b      	lsrs	r3, r3, #4
 8006e76:	f003 030f 	and.w	r3, r3, #15
 8006e7a:	490a      	ldr	r1, [pc, #40]	@ (8006ea4 <HAL_RCC_ClockConfig+0x1cc>)
 8006e7c:	5ccb      	ldrb	r3, [r1, r3]
 8006e7e:	fa22 f303 	lsr.w	r3, r2, r3
 8006e82:	4a09      	ldr	r2, [pc, #36]	@ (8006ea8 <HAL_RCC_ClockConfig+0x1d0>)
 8006e84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006e86:	4b09      	ldr	r3, [pc, #36]	@ (8006eac <HAL_RCC_ClockConfig+0x1d4>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f7fd fc44 	bl	8004718 <HAL_InitTick>

  return HAL_OK;
 8006e90:	2300      	movs	r3, #0
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3710      	adds	r7, #16
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}
 8006e9a:	bf00      	nop
 8006e9c:	40023c00 	.word	0x40023c00
 8006ea0:	40023800 	.word	0x40023800
 8006ea4:	08018b9c 	.word	0x08018b9c
 8006ea8:	2000000c 	.word	0x2000000c
 8006eac:	20000308 	.word	0x20000308

08006eb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006eb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006eb4:	b094      	sub	sp, #80	@ 0x50
 8006eb6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006ec8:	4b79      	ldr	r3, [pc, #484]	@ (80070b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	f003 030c 	and.w	r3, r3, #12
 8006ed0:	2b08      	cmp	r3, #8
 8006ed2:	d00d      	beq.n	8006ef0 <HAL_RCC_GetSysClockFreq+0x40>
 8006ed4:	2b08      	cmp	r3, #8
 8006ed6:	f200 80e1 	bhi.w	800709c <HAL_RCC_GetSysClockFreq+0x1ec>
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d002      	beq.n	8006ee4 <HAL_RCC_GetSysClockFreq+0x34>
 8006ede:	2b04      	cmp	r3, #4
 8006ee0:	d003      	beq.n	8006eea <HAL_RCC_GetSysClockFreq+0x3a>
 8006ee2:	e0db      	b.n	800709c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006ee4:	4b73      	ldr	r3, [pc, #460]	@ (80070b4 <HAL_RCC_GetSysClockFreq+0x204>)
 8006ee6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006ee8:	e0db      	b.n	80070a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006eea:	4b73      	ldr	r3, [pc, #460]	@ (80070b8 <HAL_RCC_GetSysClockFreq+0x208>)
 8006eec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006eee:	e0d8      	b.n	80070a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006ef0:	4b6f      	ldr	r3, [pc, #444]	@ (80070b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006ef8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006efa:	4b6d      	ldr	r3, [pc, #436]	@ (80070b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d063      	beq.n	8006fce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f06:	4b6a      	ldr	r3, [pc, #424]	@ (80070b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	099b      	lsrs	r3, r3, #6
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006f10:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006f12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f18:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f1e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006f22:	4622      	mov	r2, r4
 8006f24:	462b      	mov	r3, r5
 8006f26:	f04f 0000 	mov.w	r0, #0
 8006f2a:	f04f 0100 	mov.w	r1, #0
 8006f2e:	0159      	lsls	r1, r3, #5
 8006f30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006f34:	0150      	lsls	r0, r2, #5
 8006f36:	4602      	mov	r2, r0
 8006f38:	460b      	mov	r3, r1
 8006f3a:	4621      	mov	r1, r4
 8006f3c:	1a51      	subs	r1, r2, r1
 8006f3e:	6139      	str	r1, [r7, #16]
 8006f40:	4629      	mov	r1, r5
 8006f42:	eb63 0301 	sbc.w	r3, r3, r1
 8006f46:	617b      	str	r3, [r7, #20]
 8006f48:	f04f 0200 	mov.w	r2, #0
 8006f4c:	f04f 0300 	mov.w	r3, #0
 8006f50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006f54:	4659      	mov	r1, fp
 8006f56:	018b      	lsls	r3, r1, #6
 8006f58:	4651      	mov	r1, sl
 8006f5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006f5e:	4651      	mov	r1, sl
 8006f60:	018a      	lsls	r2, r1, #6
 8006f62:	4651      	mov	r1, sl
 8006f64:	ebb2 0801 	subs.w	r8, r2, r1
 8006f68:	4659      	mov	r1, fp
 8006f6a:	eb63 0901 	sbc.w	r9, r3, r1
 8006f6e:	f04f 0200 	mov.w	r2, #0
 8006f72:	f04f 0300 	mov.w	r3, #0
 8006f76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006f7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006f7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006f82:	4690      	mov	r8, r2
 8006f84:	4699      	mov	r9, r3
 8006f86:	4623      	mov	r3, r4
 8006f88:	eb18 0303 	adds.w	r3, r8, r3
 8006f8c:	60bb      	str	r3, [r7, #8]
 8006f8e:	462b      	mov	r3, r5
 8006f90:	eb49 0303 	adc.w	r3, r9, r3
 8006f94:	60fb      	str	r3, [r7, #12]
 8006f96:	f04f 0200 	mov.w	r2, #0
 8006f9a:	f04f 0300 	mov.w	r3, #0
 8006f9e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006fa2:	4629      	mov	r1, r5
 8006fa4:	024b      	lsls	r3, r1, #9
 8006fa6:	4621      	mov	r1, r4
 8006fa8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006fac:	4621      	mov	r1, r4
 8006fae:	024a      	lsls	r2, r1, #9
 8006fb0:	4610      	mov	r0, r2
 8006fb2:	4619      	mov	r1, r3
 8006fb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006fba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006fbc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006fc0:	f7f9 fe92 	bl	8000ce8 <__aeabi_uldivmod>
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	460b      	mov	r3, r1
 8006fc8:	4613      	mov	r3, r2
 8006fca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006fcc:	e058      	b.n	8007080 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006fce:	4b38      	ldr	r3, [pc, #224]	@ (80070b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	099b      	lsrs	r3, r3, #6
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	4611      	mov	r1, r2
 8006fda:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006fde:	623b      	str	r3, [r7, #32]
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	627b      	str	r3, [r7, #36]	@ 0x24
 8006fe4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006fe8:	4642      	mov	r2, r8
 8006fea:	464b      	mov	r3, r9
 8006fec:	f04f 0000 	mov.w	r0, #0
 8006ff0:	f04f 0100 	mov.w	r1, #0
 8006ff4:	0159      	lsls	r1, r3, #5
 8006ff6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006ffa:	0150      	lsls	r0, r2, #5
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	460b      	mov	r3, r1
 8007000:	4641      	mov	r1, r8
 8007002:	ebb2 0a01 	subs.w	sl, r2, r1
 8007006:	4649      	mov	r1, r9
 8007008:	eb63 0b01 	sbc.w	fp, r3, r1
 800700c:	f04f 0200 	mov.w	r2, #0
 8007010:	f04f 0300 	mov.w	r3, #0
 8007014:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007018:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800701c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007020:	ebb2 040a 	subs.w	r4, r2, sl
 8007024:	eb63 050b 	sbc.w	r5, r3, fp
 8007028:	f04f 0200 	mov.w	r2, #0
 800702c:	f04f 0300 	mov.w	r3, #0
 8007030:	00eb      	lsls	r3, r5, #3
 8007032:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007036:	00e2      	lsls	r2, r4, #3
 8007038:	4614      	mov	r4, r2
 800703a:	461d      	mov	r5, r3
 800703c:	4643      	mov	r3, r8
 800703e:	18e3      	adds	r3, r4, r3
 8007040:	603b      	str	r3, [r7, #0]
 8007042:	464b      	mov	r3, r9
 8007044:	eb45 0303 	adc.w	r3, r5, r3
 8007048:	607b      	str	r3, [r7, #4]
 800704a:	f04f 0200 	mov.w	r2, #0
 800704e:	f04f 0300 	mov.w	r3, #0
 8007052:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007056:	4629      	mov	r1, r5
 8007058:	028b      	lsls	r3, r1, #10
 800705a:	4621      	mov	r1, r4
 800705c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007060:	4621      	mov	r1, r4
 8007062:	028a      	lsls	r2, r1, #10
 8007064:	4610      	mov	r0, r2
 8007066:	4619      	mov	r1, r3
 8007068:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800706a:	2200      	movs	r2, #0
 800706c:	61bb      	str	r3, [r7, #24]
 800706e:	61fa      	str	r2, [r7, #28]
 8007070:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007074:	f7f9 fe38 	bl	8000ce8 <__aeabi_uldivmod>
 8007078:	4602      	mov	r2, r0
 800707a:	460b      	mov	r3, r1
 800707c:	4613      	mov	r3, r2
 800707e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007080:	4b0b      	ldr	r3, [pc, #44]	@ (80070b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	0c1b      	lsrs	r3, r3, #16
 8007086:	f003 0303 	and.w	r3, r3, #3
 800708a:	3301      	adds	r3, #1
 800708c:	005b      	lsls	r3, r3, #1
 800708e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8007090:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007092:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007094:	fbb2 f3f3 	udiv	r3, r2, r3
 8007098:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800709a:	e002      	b.n	80070a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800709c:	4b05      	ldr	r3, [pc, #20]	@ (80070b4 <HAL_RCC_GetSysClockFreq+0x204>)
 800709e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80070a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80070a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3750      	adds	r7, #80	@ 0x50
 80070a8:	46bd      	mov	sp, r7
 80070aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070ae:	bf00      	nop
 80070b0:	40023800 	.word	0x40023800
 80070b4:	00f42400 	.word	0x00f42400
 80070b8:	007a1200 	.word	0x007a1200

080070bc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80070bc:	b480      	push	{r7}
 80070be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80070c0:	4b03      	ldr	r3, [pc, #12]	@ (80070d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80070c2:	681b      	ldr	r3, [r3, #0]
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	46bd      	mov	sp, r7
 80070c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070cc:	4770      	bx	lr
 80070ce:	bf00      	nop
 80070d0:	2000000c 	.word	0x2000000c

080070d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80070d8:	f7ff fff0 	bl	80070bc <HAL_RCC_GetHCLKFreq>
 80070dc:	4602      	mov	r2, r0
 80070de:	4b05      	ldr	r3, [pc, #20]	@ (80070f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	0a9b      	lsrs	r3, r3, #10
 80070e4:	f003 0307 	and.w	r3, r3, #7
 80070e8:	4903      	ldr	r1, [pc, #12]	@ (80070f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80070ea:	5ccb      	ldrb	r3, [r1, r3]
 80070ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	bd80      	pop	{r7, pc}
 80070f4:	40023800 	.word	0x40023800
 80070f8:	08018bac 	.word	0x08018bac

080070fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007100:	f7ff ffdc 	bl	80070bc <HAL_RCC_GetHCLKFreq>
 8007104:	4602      	mov	r2, r0
 8007106:	4b05      	ldr	r3, [pc, #20]	@ (800711c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	0b5b      	lsrs	r3, r3, #13
 800710c:	f003 0307 	and.w	r3, r3, #7
 8007110:	4903      	ldr	r1, [pc, #12]	@ (8007120 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007112:	5ccb      	ldrb	r3, [r1, r3]
 8007114:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007118:	4618      	mov	r0, r3
 800711a:	bd80      	pop	{r7, pc}
 800711c:	40023800 	.word	0x40023800
 8007120:	08018bac 	.word	0x08018bac

08007124 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b088      	sub	sp, #32
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800712c:	2300      	movs	r3, #0
 800712e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007130:	2300      	movs	r3, #0
 8007132:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007134:	2300      	movs	r3, #0
 8007136:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007138:	2300      	movs	r3, #0
 800713a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800713c:	2300      	movs	r3, #0
 800713e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f003 0301 	and.w	r3, r3, #1
 8007148:	2b00      	cmp	r3, #0
 800714a:	d012      	beq.n	8007172 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800714c:	4b69      	ldr	r3, [pc, #420]	@ (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	4a68      	ldr	r2, [pc, #416]	@ (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007152:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007156:	6093      	str	r3, [r2, #8]
 8007158:	4b66      	ldr	r3, [pc, #408]	@ (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800715a:	689a      	ldr	r2, [r3, #8]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007160:	4964      	ldr	r1, [pc, #400]	@ (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007162:	4313      	orrs	r3, r2
 8007164:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800716a:	2b00      	cmp	r3, #0
 800716c:	d101      	bne.n	8007172 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800716e:	2301      	movs	r3, #1
 8007170:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800717a:	2b00      	cmp	r3, #0
 800717c:	d017      	beq.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800717e:	4b5d      	ldr	r3, [pc, #372]	@ (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007180:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007184:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800718c:	4959      	ldr	r1, [pc, #356]	@ (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800718e:	4313      	orrs	r3, r2
 8007190:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007198:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800719c:	d101      	bne.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800719e:	2301      	movs	r3, #1
 80071a0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d101      	bne.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80071aa:	2301      	movs	r3, #1
 80071ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d017      	beq.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80071ba:	4b4e      	ldr	r3, [pc, #312]	@ (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80071c0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071c8:	494a      	ldr	r1, [pc, #296]	@ (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071ca:	4313      	orrs	r3, r2
 80071cc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80071d8:	d101      	bne.n	80071de <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80071da:	2301      	movs	r3, #1
 80071dc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d101      	bne.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80071e6:	2301      	movs	r3, #1
 80071e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d001      	beq.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80071f6:	2301      	movs	r3, #1
 80071f8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f003 0320 	and.w	r3, r3, #32
 8007202:	2b00      	cmp	r3, #0
 8007204:	f000 808b 	beq.w	800731e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007208:	4b3a      	ldr	r3, [pc, #232]	@ (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800720a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800720c:	4a39      	ldr	r2, [pc, #228]	@ (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800720e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007212:	6413      	str	r3, [r2, #64]	@ 0x40
 8007214:	4b37      	ldr	r3, [pc, #220]	@ (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007218:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800721c:	60bb      	str	r3, [r7, #8]
 800721e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007220:	4b35      	ldr	r3, [pc, #212]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a34      	ldr	r2, [pc, #208]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007226:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800722a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800722c:	f7fd fab8 	bl	80047a0 <HAL_GetTick>
 8007230:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007232:	e008      	b.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007234:	f7fd fab4 	bl	80047a0 <HAL_GetTick>
 8007238:	4602      	mov	r2, r0
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	1ad3      	subs	r3, r2, r3
 800723e:	2b64      	cmp	r3, #100	@ 0x64
 8007240:	d901      	bls.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007242:	2303      	movs	r3, #3
 8007244:	e357      	b.n	80078f6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007246:	4b2c      	ldr	r3, [pc, #176]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800724e:	2b00      	cmp	r3, #0
 8007250:	d0f0      	beq.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007252:	4b28      	ldr	r3, [pc, #160]	@ (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007254:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007256:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800725a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d035      	beq.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007266:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800726a:	693a      	ldr	r2, [r7, #16]
 800726c:	429a      	cmp	r2, r3
 800726e:	d02e      	beq.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007270:	4b20      	ldr	r3, [pc, #128]	@ (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007272:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007274:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007278:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800727a:	4b1e      	ldr	r3, [pc, #120]	@ (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800727c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800727e:	4a1d      	ldr	r2, [pc, #116]	@ (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007280:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007284:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007286:	4b1b      	ldr	r3, [pc, #108]	@ (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007288:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800728a:	4a1a      	ldr	r2, [pc, #104]	@ (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800728c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007290:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007292:	4a18      	ldr	r2, [pc, #96]	@ (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007298:	4b16      	ldr	r3, [pc, #88]	@ (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800729a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800729c:	f003 0301 	and.w	r3, r3, #1
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d114      	bne.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072a4:	f7fd fa7c 	bl	80047a0 <HAL_GetTick>
 80072a8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072aa:	e00a      	b.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80072ac:	f7fd fa78 	bl	80047a0 <HAL_GetTick>
 80072b0:	4602      	mov	r2, r0
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	1ad3      	subs	r3, r2, r3
 80072b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d901      	bls.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80072be:	2303      	movs	r3, #3
 80072c0:	e319      	b.n	80078f6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072c2:	4b0c      	ldr	r3, [pc, #48]	@ (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072c6:	f003 0302 	and.w	r3, r3, #2
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d0ee      	beq.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80072d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80072da:	d111      	bne.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80072dc:	4b05      	ldr	r3, [pc, #20]	@ (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80072e8:	4b04      	ldr	r3, [pc, #16]	@ (80072fc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80072ea:	400b      	ands	r3, r1
 80072ec:	4901      	ldr	r1, [pc, #4]	@ (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072ee:	4313      	orrs	r3, r2
 80072f0:	608b      	str	r3, [r1, #8]
 80072f2:	e00b      	b.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80072f4:	40023800 	.word	0x40023800
 80072f8:	40007000 	.word	0x40007000
 80072fc:	0ffffcff 	.word	0x0ffffcff
 8007300:	4baa      	ldr	r3, [pc, #680]	@ (80075ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007302:	689b      	ldr	r3, [r3, #8]
 8007304:	4aa9      	ldr	r2, [pc, #676]	@ (80075ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007306:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800730a:	6093      	str	r3, [r2, #8]
 800730c:	4ba7      	ldr	r3, [pc, #668]	@ (80075ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800730e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007314:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007318:	49a4      	ldr	r1, [pc, #656]	@ (80075ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800731a:	4313      	orrs	r3, r2
 800731c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f003 0310 	and.w	r3, r3, #16
 8007326:	2b00      	cmp	r3, #0
 8007328:	d010      	beq.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800732a:	4ba0      	ldr	r3, [pc, #640]	@ (80075ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800732c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007330:	4a9e      	ldr	r2, [pc, #632]	@ (80075ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007332:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007336:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800733a:	4b9c      	ldr	r3, [pc, #624]	@ (80075ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800733c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007344:	4999      	ldr	r1, [pc, #612]	@ (80075ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007346:	4313      	orrs	r3, r2
 8007348:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007354:	2b00      	cmp	r3, #0
 8007356:	d00a      	beq.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007358:	4b94      	ldr	r3, [pc, #592]	@ (80075ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800735a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800735e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007366:	4991      	ldr	r1, [pc, #580]	@ (80075ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007368:	4313      	orrs	r3, r2
 800736a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007376:	2b00      	cmp	r3, #0
 8007378:	d00a      	beq.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800737a:	4b8c      	ldr	r3, [pc, #560]	@ (80075ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800737c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007380:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007388:	4988      	ldr	r1, [pc, #544]	@ (80075ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800738a:	4313      	orrs	r3, r2
 800738c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007398:	2b00      	cmp	r3, #0
 800739a:	d00a      	beq.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800739c:	4b83      	ldr	r3, [pc, #524]	@ (80075ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800739e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073a2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80073aa:	4980      	ldr	r1, [pc, #512]	@ (80075ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80073ac:	4313      	orrs	r3, r2
 80073ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d00a      	beq.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80073be:	4b7b      	ldr	r3, [pc, #492]	@ (80075ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80073c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073c4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073cc:	4977      	ldr	r1, [pc, #476]	@ (80075ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80073ce:	4313      	orrs	r3, r2
 80073d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d00a      	beq.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80073e0:	4b72      	ldr	r3, [pc, #456]	@ (80075ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80073e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073e6:	f023 0203 	bic.w	r2, r3, #3
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073ee:	496f      	ldr	r1, [pc, #444]	@ (80075ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80073f0:	4313      	orrs	r3, r2
 80073f2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d00a      	beq.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007402:	4b6a      	ldr	r3, [pc, #424]	@ (80075ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007404:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007408:	f023 020c 	bic.w	r2, r3, #12
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007410:	4966      	ldr	r1, [pc, #408]	@ (80075ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007412:	4313      	orrs	r3, r2
 8007414:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007420:	2b00      	cmp	r3, #0
 8007422:	d00a      	beq.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007424:	4b61      	ldr	r3, [pc, #388]	@ (80075ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007426:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800742a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007432:	495e      	ldr	r1, [pc, #376]	@ (80075ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007434:	4313      	orrs	r3, r2
 8007436:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007442:	2b00      	cmp	r3, #0
 8007444:	d00a      	beq.n	800745c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007446:	4b59      	ldr	r3, [pc, #356]	@ (80075ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007448:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800744c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007454:	4955      	ldr	r1, [pc, #340]	@ (80075ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007456:	4313      	orrs	r3, r2
 8007458:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007464:	2b00      	cmp	r3, #0
 8007466:	d00a      	beq.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007468:	4b50      	ldr	r3, [pc, #320]	@ (80075ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800746a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800746e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007476:	494d      	ldr	r1, [pc, #308]	@ (80075ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007478:	4313      	orrs	r3, r2
 800747a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007486:	2b00      	cmp	r3, #0
 8007488:	d00a      	beq.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800748a:	4b48      	ldr	r3, [pc, #288]	@ (80075ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800748c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007490:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007498:	4944      	ldr	r1, [pc, #272]	@ (80075ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800749a:	4313      	orrs	r3, r2
 800749c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d00a      	beq.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80074ac:	4b3f      	ldr	r3, [pc, #252]	@ (80075ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074b2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074ba:	493c      	ldr	r1, [pc, #240]	@ (80075ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074bc:	4313      	orrs	r3, r2
 80074be:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d00a      	beq.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80074ce:	4b37      	ldr	r3, [pc, #220]	@ (80075ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074d4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074dc:	4933      	ldr	r1, [pc, #204]	@ (80075ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074de:	4313      	orrs	r3, r2
 80074e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d00a      	beq.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80074f0:	4b2e      	ldr	r3, [pc, #184]	@ (80075ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074f6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80074fe:	492b      	ldr	r1, [pc, #172]	@ (80075ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007500:	4313      	orrs	r3, r2
 8007502:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800750e:	2b00      	cmp	r3, #0
 8007510:	d011      	beq.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007512:	4b26      	ldr	r3, [pc, #152]	@ (80075ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007514:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007518:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007520:	4922      	ldr	r1, [pc, #136]	@ (80075ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007522:	4313      	orrs	r3, r2
 8007524:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800752c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007530:	d101      	bne.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007532:	2301      	movs	r3, #1
 8007534:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f003 0308 	and.w	r3, r3, #8
 800753e:	2b00      	cmp	r3, #0
 8007540:	d001      	beq.n	8007546 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007542:	2301      	movs	r3, #1
 8007544:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800754e:	2b00      	cmp	r3, #0
 8007550:	d00a      	beq.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007552:	4b16      	ldr	r3, [pc, #88]	@ (80075ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007554:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007558:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007560:	4912      	ldr	r1, [pc, #72]	@ (80075ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007562:	4313      	orrs	r3, r2
 8007564:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007570:	2b00      	cmp	r3, #0
 8007572:	d00b      	beq.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007574:	4b0d      	ldr	r3, [pc, #52]	@ (80075ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007576:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800757a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007584:	4909      	ldr	r1, [pc, #36]	@ (80075ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007586:	4313      	orrs	r3, r2
 8007588:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800758c:	69fb      	ldr	r3, [r7, #28]
 800758e:	2b01      	cmp	r3, #1
 8007590:	d006      	beq.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800759a:	2b00      	cmp	r3, #0
 800759c:	f000 80d9 	beq.w	8007752 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80075a0:	4b02      	ldr	r3, [pc, #8]	@ (80075ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a01      	ldr	r2, [pc, #4]	@ (80075ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075a6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80075aa:	e001      	b.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80075ac:	40023800 	.word	0x40023800
 80075b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075b2:	f7fd f8f5 	bl	80047a0 <HAL_GetTick>
 80075b6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80075b8:	e008      	b.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80075ba:	f7fd f8f1 	bl	80047a0 <HAL_GetTick>
 80075be:	4602      	mov	r2, r0
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	1ad3      	subs	r3, r2, r3
 80075c4:	2b64      	cmp	r3, #100	@ 0x64
 80075c6:	d901      	bls.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80075c8:	2303      	movs	r3, #3
 80075ca:	e194      	b.n	80078f6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80075cc:	4b6c      	ldr	r3, [pc, #432]	@ (8007780 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d1f0      	bne.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f003 0301 	and.w	r3, r3, #1
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d021      	beq.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d11d      	bne.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80075ec:	4b64      	ldr	r3, [pc, #400]	@ (8007780 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80075ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80075f2:	0c1b      	lsrs	r3, r3, #16
 80075f4:	f003 0303 	and.w	r3, r3, #3
 80075f8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80075fa:	4b61      	ldr	r3, [pc, #388]	@ (8007780 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80075fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007600:	0e1b      	lsrs	r3, r3, #24
 8007602:	f003 030f 	and.w	r3, r3, #15
 8007606:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	019a      	lsls	r2, r3, #6
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	041b      	lsls	r3, r3, #16
 8007612:	431a      	orrs	r2, r3
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	061b      	lsls	r3, r3, #24
 8007618:	431a      	orrs	r2, r3
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	689b      	ldr	r3, [r3, #8]
 800761e:	071b      	lsls	r3, r3, #28
 8007620:	4957      	ldr	r1, [pc, #348]	@ (8007780 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007622:	4313      	orrs	r3, r2
 8007624:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007630:	2b00      	cmp	r3, #0
 8007632:	d004      	beq.n	800763e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007638:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800763c:	d00a      	beq.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007646:	2b00      	cmp	r3, #0
 8007648:	d02e      	beq.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800764e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007652:	d129      	bne.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007654:	4b4a      	ldr	r3, [pc, #296]	@ (8007780 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007656:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800765a:	0c1b      	lsrs	r3, r3, #16
 800765c:	f003 0303 	and.w	r3, r3, #3
 8007660:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007662:	4b47      	ldr	r3, [pc, #284]	@ (8007780 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007664:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007668:	0f1b      	lsrs	r3, r3, #28
 800766a:	f003 0307 	and.w	r3, r3, #7
 800766e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	019a      	lsls	r2, r3, #6
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	041b      	lsls	r3, r3, #16
 800767a:	431a      	orrs	r2, r3
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	68db      	ldr	r3, [r3, #12]
 8007680:	061b      	lsls	r3, r3, #24
 8007682:	431a      	orrs	r2, r3
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	071b      	lsls	r3, r3, #28
 8007688:	493d      	ldr	r1, [pc, #244]	@ (8007780 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800768a:	4313      	orrs	r3, r2
 800768c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007690:	4b3b      	ldr	r3, [pc, #236]	@ (8007780 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007692:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007696:	f023 021f 	bic.w	r2, r3, #31
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800769e:	3b01      	subs	r3, #1
 80076a0:	4937      	ldr	r1, [pc, #220]	@ (8007780 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80076a2:	4313      	orrs	r3, r2
 80076a4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d01d      	beq.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80076b4:	4b32      	ldr	r3, [pc, #200]	@ (8007780 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80076b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80076ba:	0e1b      	lsrs	r3, r3, #24
 80076bc:	f003 030f 	and.w	r3, r3, #15
 80076c0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80076c2:	4b2f      	ldr	r3, [pc, #188]	@ (8007780 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80076c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80076c8:	0f1b      	lsrs	r3, r3, #28
 80076ca:	f003 0307 	and.w	r3, r3, #7
 80076ce:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	019a      	lsls	r2, r3, #6
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	691b      	ldr	r3, [r3, #16]
 80076da:	041b      	lsls	r3, r3, #16
 80076dc:	431a      	orrs	r2, r3
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	061b      	lsls	r3, r3, #24
 80076e2:	431a      	orrs	r2, r3
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	071b      	lsls	r3, r3, #28
 80076e8:	4925      	ldr	r1, [pc, #148]	@ (8007780 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80076ea:	4313      	orrs	r3, r2
 80076ec:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d011      	beq.n	8007720 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	019a      	lsls	r2, r3, #6
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	691b      	ldr	r3, [r3, #16]
 8007706:	041b      	lsls	r3, r3, #16
 8007708:	431a      	orrs	r2, r3
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	68db      	ldr	r3, [r3, #12]
 800770e:	061b      	lsls	r3, r3, #24
 8007710:	431a      	orrs	r2, r3
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	689b      	ldr	r3, [r3, #8]
 8007716:	071b      	lsls	r3, r3, #28
 8007718:	4919      	ldr	r1, [pc, #100]	@ (8007780 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800771a:	4313      	orrs	r3, r2
 800771c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007720:	4b17      	ldr	r3, [pc, #92]	@ (8007780 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a16      	ldr	r2, [pc, #88]	@ (8007780 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007726:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800772a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800772c:	f7fd f838 	bl	80047a0 <HAL_GetTick>
 8007730:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007732:	e008      	b.n	8007746 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007734:	f7fd f834 	bl	80047a0 <HAL_GetTick>
 8007738:	4602      	mov	r2, r0
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	1ad3      	subs	r3, r2, r3
 800773e:	2b64      	cmp	r3, #100	@ 0x64
 8007740:	d901      	bls.n	8007746 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007742:	2303      	movs	r3, #3
 8007744:	e0d7      	b.n	80078f6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007746:	4b0e      	ldr	r3, [pc, #56]	@ (8007780 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800774e:	2b00      	cmp	r3, #0
 8007750:	d0f0      	beq.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007752:	69bb      	ldr	r3, [r7, #24]
 8007754:	2b01      	cmp	r3, #1
 8007756:	f040 80cd 	bne.w	80078f4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800775a:	4b09      	ldr	r3, [pc, #36]	@ (8007780 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4a08      	ldr	r2, [pc, #32]	@ (8007780 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007760:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007764:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007766:	f7fd f81b 	bl	80047a0 <HAL_GetTick>
 800776a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800776c:	e00a      	b.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800776e:	f7fd f817 	bl	80047a0 <HAL_GetTick>
 8007772:	4602      	mov	r2, r0
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	1ad3      	subs	r3, r2, r3
 8007778:	2b64      	cmp	r3, #100	@ 0x64
 800777a:	d903      	bls.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800777c:	2303      	movs	r3, #3
 800777e:	e0ba      	b.n	80078f6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8007780:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007784:	4b5e      	ldr	r3, [pc, #376]	@ (8007900 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800778c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007790:	d0ed      	beq.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800779a:	2b00      	cmp	r3, #0
 800779c:	d003      	beq.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d009      	beq.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d02e      	beq.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d12a      	bne.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80077ba:	4b51      	ldr	r3, [pc, #324]	@ (8007900 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80077bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077c0:	0c1b      	lsrs	r3, r3, #16
 80077c2:	f003 0303 	and.w	r3, r3, #3
 80077c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80077c8:	4b4d      	ldr	r3, [pc, #308]	@ (8007900 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80077ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077ce:	0f1b      	lsrs	r3, r3, #28
 80077d0:	f003 0307 	and.w	r3, r3, #7
 80077d4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	695b      	ldr	r3, [r3, #20]
 80077da:	019a      	lsls	r2, r3, #6
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	041b      	lsls	r3, r3, #16
 80077e0:	431a      	orrs	r2, r3
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	699b      	ldr	r3, [r3, #24]
 80077e6:	061b      	lsls	r3, r3, #24
 80077e8:	431a      	orrs	r2, r3
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	071b      	lsls	r3, r3, #28
 80077ee:	4944      	ldr	r1, [pc, #272]	@ (8007900 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80077f0:	4313      	orrs	r3, r2
 80077f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80077f6:	4b42      	ldr	r3, [pc, #264]	@ (8007900 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80077f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80077fc:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007804:	3b01      	subs	r3, #1
 8007806:	021b      	lsls	r3, r3, #8
 8007808:	493d      	ldr	r1, [pc, #244]	@ (8007900 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800780a:	4313      	orrs	r3, r2
 800780c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007818:	2b00      	cmp	r3, #0
 800781a:	d022      	beq.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007820:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007824:	d11d      	bne.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007826:	4b36      	ldr	r3, [pc, #216]	@ (8007900 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007828:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800782c:	0e1b      	lsrs	r3, r3, #24
 800782e:	f003 030f 	and.w	r3, r3, #15
 8007832:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007834:	4b32      	ldr	r3, [pc, #200]	@ (8007900 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007836:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800783a:	0f1b      	lsrs	r3, r3, #28
 800783c:	f003 0307 	and.w	r3, r3, #7
 8007840:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	695b      	ldr	r3, [r3, #20]
 8007846:	019a      	lsls	r2, r3, #6
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6a1b      	ldr	r3, [r3, #32]
 800784c:	041b      	lsls	r3, r3, #16
 800784e:	431a      	orrs	r2, r3
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	061b      	lsls	r3, r3, #24
 8007854:	431a      	orrs	r2, r3
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	071b      	lsls	r3, r3, #28
 800785a:	4929      	ldr	r1, [pc, #164]	@ (8007900 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800785c:	4313      	orrs	r3, r2
 800785e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f003 0308 	and.w	r3, r3, #8
 800786a:	2b00      	cmp	r3, #0
 800786c:	d028      	beq.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800786e:	4b24      	ldr	r3, [pc, #144]	@ (8007900 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007870:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007874:	0e1b      	lsrs	r3, r3, #24
 8007876:	f003 030f 	and.w	r3, r3, #15
 800787a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800787c:	4b20      	ldr	r3, [pc, #128]	@ (8007900 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800787e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007882:	0c1b      	lsrs	r3, r3, #16
 8007884:	f003 0303 	and.w	r3, r3, #3
 8007888:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	695b      	ldr	r3, [r3, #20]
 800788e:	019a      	lsls	r2, r3, #6
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	041b      	lsls	r3, r3, #16
 8007894:	431a      	orrs	r2, r3
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	061b      	lsls	r3, r3, #24
 800789a:	431a      	orrs	r2, r3
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	69db      	ldr	r3, [r3, #28]
 80078a0:	071b      	lsls	r3, r3, #28
 80078a2:	4917      	ldr	r1, [pc, #92]	@ (8007900 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80078a4:	4313      	orrs	r3, r2
 80078a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80078aa:	4b15      	ldr	r3, [pc, #84]	@ (8007900 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80078ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80078b0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078b8:	4911      	ldr	r1, [pc, #68]	@ (8007900 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80078ba:	4313      	orrs	r3, r2
 80078bc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80078c0:	4b0f      	ldr	r3, [pc, #60]	@ (8007900 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a0e      	ldr	r2, [pc, #56]	@ (8007900 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80078c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80078ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078cc:	f7fc ff68 	bl	80047a0 <HAL_GetTick>
 80078d0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80078d2:	e008      	b.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80078d4:	f7fc ff64 	bl	80047a0 <HAL_GetTick>
 80078d8:	4602      	mov	r2, r0
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	1ad3      	subs	r3, r2, r3
 80078de:	2b64      	cmp	r3, #100	@ 0x64
 80078e0:	d901      	bls.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80078e2:	2303      	movs	r3, #3
 80078e4:	e007      	b.n	80078f6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80078e6:	4b06      	ldr	r3, [pc, #24]	@ (8007900 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80078ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80078f2:	d1ef      	bne.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80078f4:	2300      	movs	r3, #0
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3720      	adds	r7, #32
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}
 80078fe:	bf00      	nop
 8007900:	40023800 	.word	0x40023800

08007904 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b082      	sub	sp, #8
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d101      	bne.n	8007916 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007912:	2301      	movs	r3, #1
 8007914:	e049      	b.n	80079aa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800791c:	b2db      	uxtb	r3, r3
 800791e:	2b00      	cmp	r3, #0
 8007920:	d106      	bne.n	8007930 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2200      	movs	r2, #0
 8007926:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f7fc fbbc 	bl	80040a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2202      	movs	r2, #2
 8007934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681a      	ldr	r2, [r3, #0]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	3304      	adds	r3, #4
 8007940:	4619      	mov	r1, r3
 8007942:	4610      	mov	r0, r2
 8007944:	f000 fcc0 	bl	80082c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2201      	movs	r2, #1
 800794c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2201      	movs	r2, #1
 8007954:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2201      	movs	r2, #1
 800795c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2201      	movs	r2, #1
 8007964:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2201      	movs	r2, #1
 800796c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2201      	movs	r2, #1
 8007974:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2201      	movs	r2, #1
 800797c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2201      	movs	r2, #1
 8007984:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2201      	movs	r2, #1
 800798c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2201      	movs	r2, #1
 8007994:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2201      	movs	r2, #1
 800799c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2201      	movs	r2, #1
 80079a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80079a8:	2300      	movs	r3, #0
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3708      	adds	r7, #8
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}

080079b2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80079b2:	b580      	push	{r7, lr}
 80079b4:	b082      	sub	sp, #8
 80079b6:	af00      	add	r7, sp, #0
 80079b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d101      	bne.n	80079c4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80079c0:	2301      	movs	r3, #1
 80079c2:	e049      	b.n	8007a58 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80079ca:	b2db      	uxtb	r3, r3
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d106      	bne.n	80079de <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2200      	movs	r2, #0
 80079d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f000 f841 	bl	8007a60 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2202      	movs	r2, #2
 80079e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681a      	ldr	r2, [r3, #0]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	3304      	adds	r3, #4
 80079ee:	4619      	mov	r1, r3
 80079f0:	4610      	mov	r0, r2
 80079f2:	f000 fc69 	bl	80082c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2201      	movs	r2, #1
 80079fa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2201      	movs	r2, #1
 8007a02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2201      	movs	r2, #1
 8007a0a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2201      	movs	r2, #1
 8007a12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2201      	movs	r2, #1
 8007a1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2201      	movs	r2, #1
 8007a22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2201      	movs	r2, #1
 8007a2a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2201      	movs	r2, #1
 8007a32:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2201      	movs	r2, #1
 8007a3a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2201      	movs	r2, #1
 8007a42:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2201      	movs	r2, #1
 8007a4a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2201      	movs	r2, #1
 8007a52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007a56:	2300      	movs	r3, #0
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3708      	adds	r7, #8
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}

08007a60 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b083      	sub	sp, #12
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007a68:	bf00      	nop
 8007a6a:	370c      	adds	r7, #12
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr

08007a74 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b084      	sub	sp, #16
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d109      	bne.n	8007a98 <HAL_TIM_PWM_Start+0x24>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007a8a:	b2db      	uxtb	r3, r3
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	bf14      	ite	ne
 8007a90:	2301      	movne	r3, #1
 8007a92:	2300      	moveq	r3, #0
 8007a94:	b2db      	uxtb	r3, r3
 8007a96:	e03c      	b.n	8007b12 <HAL_TIM_PWM_Start+0x9e>
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	2b04      	cmp	r3, #4
 8007a9c:	d109      	bne.n	8007ab2 <HAL_TIM_PWM_Start+0x3e>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007aa4:	b2db      	uxtb	r3, r3
 8007aa6:	2b01      	cmp	r3, #1
 8007aa8:	bf14      	ite	ne
 8007aaa:	2301      	movne	r3, #1
 8007aac:	2300      	moveq	r3, #0
 8007aae:	b2db      	uxtb	r3, r3
 8007ab0:	e02f      	b.n	8007b12 <HAL_TIM_PWM_Start+0x9e>
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	2b08      	cmp	r3, #8
 8007ab6:	d109      	bne.n	8007acc <HAL_TIM_PWM_Start+0x58>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007abe:	b2db      	uxtb	r3, r3
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	bf14      	ite	ne
 8007ac4:	2301      	movne	r3, #1
 8007ac6:	2300      	moveq	r3, #0
 8007ac8:	b2db      	uxtb	r3, r3
 8007aca:	e022      	b.n	8007b12 <HAL_TIM_PWM_Start+0x9e>
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	2b0c      	cmp	r3, #12
 8007ad0:	d109      	bne.n	8007ae6 <HAL_TIM_PWM_Start+0x72>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ad8:	b2db      	uxtb	r3, r3
 8007ada:	2b01      	cmp	r3, #1
 8007adc:	bf14      	ite	ne
 8007ade:	2301      	movne	r3, #1
 8007ae0:	2300      	moveq	r3, #0
 8007ae2:	b2db      	uxtb	r3, r3
 8007ae4:	e015      	b.n	8007b12 <HAL_TIM_PWM_Start+0x9e>
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	2b10      	cmp	r3, #16
 8007aea:	d109      	bne.n	8007b00 <HAL_TIM_PWM_Start+0x8c>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007af2:	b2db      	uxtb	r3, r3
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	bf14      	ite	ne
 8007af8:	2301      	movne	r3, #1
 8007afa:	2300      	moveq	r3, #0
 8007afc:	b2db      	uxtb	r3, r3
 8007afe:	e008      	b.n	8007b12 <HAL_TIM_PWM_Start+0x9e>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007b06:	b2db      	uxtb	r3, r3
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	bf14      	ite	ne
 8007b0c:	2301      	movne	r3, #1
 8007b0e:	2300      	moveq	r3, #0
 8007b10:	b2db      	uxtb	r3, r3
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d001      	beq.n	8007b1a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007b16:	2301      	movs	r3, #1
 8007b18:	e092      	b.n	8007c40 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d104      	bne.n	8007b2a <HAL_TIM_PWM_Start+0xb6>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2202      	movs	r2, #2
 8007b24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007b28:	e023      	b.n	8007b72 <HAL_TIM_PWM_Start+0xfe>
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	2b04      	cmp	r3, #4
 8007b2e:	d104      	bne.n	8007b3a <HAL_TIM_PWM_Start+0xc6>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2202      	movs	r2, #2
 8007b34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007b38:	e01b      	b.n	8007b72 <HAL_TIM_PWM_Start+0xfe>
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	2b08      	cmp	r3, #8
 8007b3e:	d104      	bne.n	8007b4a <HAL_TIM_PWM_Start+0xd6>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2202      	movs	r2, #2
 8007b44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007b48:	e013      	b.n	8007b72 <HAL_TIM_PWM_Start+0xfe>
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	2b0c      	cmp	r3, #12
 8007b4e:	d104      	bne.n	8007b5a <HAL_TIM_PWM_Start+0xe6>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2202      	movs	r2, #2
 8007b54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007b58:	e00b      	b.n	8007b72 <HAL_TIM_PWM_Start+0xfe>
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	2b10      	cmp	r3, #16
 8007b5e:	d104      	bne.n	8007b6a <HAL_TIM_PWM_Start+0xf6>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2202      	movs	r2, #2
 8007b64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007b68:	e003      	b.n	8007b72 <HAL_TIM_PWM_Start+0xfe>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2202      	movs	r2, #2
 8007b6e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	2201      	movs	r2, #1
 8007b78:	6839      	ldr	r1, [r7, #0]
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	f000 ff3c 	bl	80089f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4a30      	ldr	r2, [pc, #192]	@ (8007c48 <HAL_TIM_PWM_Start+0x1d4>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d004      	beq.n	8007b94 <HAL_TIM_PWM_Start+0x120>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4a2f      	ldr	r2, [pc, #188]	@ (8007c4c <HAL_TIM_PWM_Start+0x1d8>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d101      	bne.n	8007b98 <HAL_TIM_PWM_Start+0x124>
 8007b94:	2301      	movs	r3, #1
 8007b96:	e000      	b.n	8007b9a <HAL_TIM_PWM_Start+0x126>
 8007b98:	2300      	movs	r3, #0
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d007      	beq.n	8007bae <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007bac:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4a25      	ldr	r2, [pc, #148]	@ (8007c48 <HAL_TIM_PWM_Start+0x1d4>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d022      	beq.n	8007bfe <HAL_TIM_PWM_Start+0x18a>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007bc0:	d01d      	beq.n	8007bfe <HAL_TIM_PWM_Start+0x18a>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4a22      	ldr	r2, [pc, #136]	@ (8007c50 <HAL_TIM_PWM_Start+0x1dc>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d018      	beq.n	8007bfe <HAL_TIM_PWM_Start+0x18a>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4a20      	ldr	r2, [pc, #128]	@ (8007c54 <HAL_TIM_PWM_Start+0x1e0>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d013      	beq.n	8007bfe <HAL_TIM_PWM_Start+0x18a>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4a1f      	ldr	r2, [pc, #124]	@ (8007c58 <HAL_TIM_PWM_Start+0x1e4>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d00e      	beq.n	8007bfe <HAL_TIM_PWM_Start+0x18a>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4a19      	ldr	r2, [pc, #100]	@ (8007c4c <HAL_TIM_PWM_Start+0x1d8>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d009      	beq.n	8007bfe <HAL_TIM_PWM_Start+0x18a>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4a1b      	ldr	r2, [pc, #108]	@ (8007c5c <HAL_TIM_PWM_Start+0x1e8>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d004      	beq.n	8007bfe <HAL_TIM_PWM_Start+0x18a>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4a19      	ldr	r2, [pc, #100]	@ (8007c60 <HAL_TIM_PWM_Start+0x1ec>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d115      	bne.n	8007c2a <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	689a      	ldr	r2, [r3, #8]
 8007c04:	4b17      	ldr	r3, [pc, #92]	@ (8007c64 <HAL_TIM_PWM_Start+0x1f0>)
 8007c06:	4013      	ands	r3, r2
 8007c08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2b06      	cmp	r3, #6
 8007c0e:	d015      	beq.n	8007c3c <HAL_TIM_PWM_Start+0x1c8>
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c16:	d011      	beq.n	8007c3c <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	681a      	ldr	r2, [r3, #0]
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f042 0201 	orr.w	r2, r2, #1
 8007c26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c28:	e008      	b.n	8007c3c <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	681a      	ldr	r2, [r3, #0]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f042 0201 	orr.w	r2, r2, #1
 8007c38:	601a      	str	r2, [r3, #0]
 8007c3a:	e000      	b.n	8007c3e <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c3c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007c3e:	2300      	movs	r3, #0
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3710      	adds	r7, #16
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}
 8007c48:	40010000 	.word	0x40010000
 8007c4c:	40010400 	.word	0x40010400
 8007c50:	40000400 	.word	0x40000400
 8007c54:	40000800 	.word	0x40000800
 8007c58:	40000c00 	.word	0x40000c00
 8007c5c:	40014000 	.word	0x40014000
 8007c60:	40001800 	.word	0x40001800
 8007c64:	00010007 	.word	0x00010007

08007c68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b082      	sub	sp, #8
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	691b      	ldr	r3, [r3, #16]
 8007c76:	f003 0302 	and.w	r3, r3, #2
 8007c7a:	2b02      	cmp	r3, #2
 8007c7c:	d122      	bne.n	8007cc4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	68db      	ldr	r3, [r3, #12]
 8007c84:	f003 0302 	and.w	r3, r3, #2
 8007c88:	2b02      	cmp	r3, #2
 8007c8a:	d11b      	bne.n	8007cc4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f06f 0202 	mvn.w	r2, #2
 8007c94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2201      	movs	r2, #1
 8007c9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	699b      	ldr	r3, [r3, #24]
 8007ca2:	f003 0303 	and.w	r3, r3, #3
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d003      	beq.n	8007cb2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f000 faee 	bl	800828c <HAL_TIM_IC_CaptureCallback>
 8007cb0:	e005      	b.n	8007cbe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f000 fae0 	bl	8008278 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f000 faf1 	bl	80082a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	691b      	ldr	r3, [r3, #16]
 8007cca:	f003 0304 	and.w	r3, r3, #4
 8007cce:	2b04      	cmp	r3, #4
 8007cd0:	d122      	bne.n	8007d18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	68db      	ldr	r3, [r3, #12]
 8007cd8:	f003 0304 	and.w	r3, r3, #4
 8007cdc:	2b04      	cmp	r3, #4
 8007cde:	d11b      	bne.n	8007d18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f06f 0204 	mvn.w	r2, #4
 8007ce8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2202      	movs	r2, #2
 8007cee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	699b      	ldr	r3, [r3, #24]
 8007cf6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d003      	beq.n	8007d06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f000 fac4 	bl	800828c <HAL_TIM_IC_CaptureCallback>
 8007d04:	e005      	b.n	8007d12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f000 fab6 	bl	8008278 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f000 fac7 	bl	80082a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2200      	movs	r2, #0
 8007d16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	691b      	ldr	r3, [r3, #16]
 8007d1e:	f003 0308 	and.w	r3, r3, #8
 8007d22:	2b08      	cmp	r3, #8
 8007d24:	d122      	bne.n	8007d6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	68db      	ldr	r3, [r3, #12]
 8007d2c:	f003 0308 	and.w	r3, r3, #8
 8007d30:	2b08      	cmp	r3, #8
 8007d32:	d11b      	bne.n	8007d6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f06f 0208 	mvn.w	r2, #8
 8007d3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2204      	movs	r2, #4
 8007d42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	69db      	ldr	r3, [r3, #28]
 8007d4a:	f003 0303 	and.w	r3, r3, #3
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d003      	beq.n	8007d5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f000 fa9a 	bl	800828c <HAL_TIM_IC_CaptureCallback>
 8007d58:	e005      	b.n	8007d66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f000 fa8c 	bl	8008278 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f000 fa9d 	bl	80082a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	691b      	ldr	r3, [r3, #16]
 8007d72:	f003 0310 	and.w	r3, r3, #16
 8007d76:	2b10      	cmp	r3, #16
 8007d78:	d122      	bne.n	8007dc0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	68db      	ldr	r3, [r3, #12]
 8007d80:	f003 0310 	and.w	r3, r3, #16
 8007d84:	2b10      	cmp	r3, #16
 8007d86:	d11b      	bne.n	8007dc0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f06f 0210 	mvn.w	r2, #16
 8007d90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2208      	movs	r2, #8
 8007d96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	69db      	ldr	r3, [r3, #28]
 8007d9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d003      	beq.n	8007dae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f000 fa70 	bl	800828c <HAL_TIM_IC_CaptureCallback>
 8007dac:	e005      	b.n	8007dba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f000 fa62 	bl	8008278 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f000 fa73 	bl	80082a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	691b      	ldr	r3, [r3, #16]
 8007dc6:	f003 0301 	and.w	r3, r3, #1
 8007dca:	2b01      	cmp	r3, #1
 8007dcc:	d10e      	bne.n	8007dec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	68db      	ldr	r3, [r3, #12]
 8007dd4:	f003 0301 	and.w	r3, r3, #1
 8007dd8:	2b01      	cmp	r3, #1
 8007dda:	d107      	bne.n	8007dec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f06f 0201 	mvn.w	r2, #1
 8007de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f000 fa3c 	bl	8008264 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	691b      	ldr	r3, [r3, #16]
 8007df2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007df6:	2b80      	cmp	r3, #128	@ 0x80
 8007df8:	d10e      	bne.n	8007e18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	68db      	ldr	r3, [r3, #12]
 8007e00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e04:	2b80      	cmp	r3, #128	@ 0x80
 8007e06:	d107      	bne.n	8007e18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007e10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f000 feae 	bl	8008b74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	691b      	ldr	r3, [r3, #16]
 8007e1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e26:	d10e      	bne.n	8007e46 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	68db      	ldr	r3, [r3, #12]
 8007e2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e32:	2b80      	cmp	r3, #128	@ 0x80
 8007e34:	d107      	bne.n	8007e46 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007e3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f000 fea1 	bl	8008b88 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	691b      	ldr	r3, [r3, #16]
 8007e4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e50:	2b40      	cmp	r3, #64	@ 0x40
 8007e52:	d10e      	bne.n	8007e72 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	68db      	ldr	r3, [r3, #12]
 8007e5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e5e:	2b40      	cmp	r3, #64	@ 0x40
 8007e60:	d107      	bne.n	8007e72 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007e6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f000 fa21 	bl	80082b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	691b      	ldr	r3, [r3, #16]
 8007e78:	f003 0320 	and.w	r3, r3, #32
 8007e7c:	2b20      	cmp	r3, #32
 8007e7e:	d10e      	bne.n	8007e9e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	68db      	ldr	r3, [r3, #12]
 8007e86:	f003 0320 	and.w	r3, r3, #32
 8007e8a:	2b20      	cmp	r3, #32
 8007e8c:	d107      	bne.n	8007e9e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f06f 0220 	mvn.w	r2, #32
 8007e96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f000 fe61 	bl	8008b60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007e9e:	bf00      	nop
 8007ea0:	3708      	adds	r7, #8
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}
	...

08007ea8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b086      	sub	sp, #24
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	60f8      	str	r0, [r7, #12]
 8007eb0:	60b9      	str	r1, [r7, #8]
 8007eb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007ebe:	2b01      	cmp	r3, #1
 8007ec0:	d101      	bne.n	8007ec6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007ec2:	2302      	movs	r3, #2
 8007ec4:	e0ff      	b.n	80080c6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	2201      	movs	r2, #1
 8007eca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2b14      	cmp	r3, #20
 8007ed2:	f200 80f0 	bhi.w	80080b6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007ed6:	a201      	add	r2, pc, #4	@ (adr r2, 8007edc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007edc:	08007f31 	.word	0x08007f31
 8007ee0:	080080b7 	.word	0x080080b7
 8007ee4:	080080b7 	.word	0x080080b7
 8007ee8:	080080b7 	.word	0x080080b7
 8007eec:	08007f71 	.word	0x08007f71
 8007ef0:	080080b7 	.word	0x080080b7
 8007ef4:	080080b7 	.word	0x080080b7
 8007ef8:	080080b7 	.word	0x080080b7
 8007efc:	08007fb3 	.word	0x08007fb3
 8007f00:	080080b7 	.word	0x080080b7
 8007f04:	080080b7 	.word	0x080080b7
 8007f08:	080080b7 	.word	0x080080b7
 8007f0c:	08007ff3 	.word	0x08007ff3
 8007f10:	080080b7 	.word	0x080080b7
 8007f14:	080080b7 	.word	0x080080b7
 8007f18:	080080b7 	.word	0x080080b7
 8007f1c:	08008035 	.word	0x08008035
 8007f20:	080080b7 	.word	0x080080b7
 8007f24:	080080b7 	.word	0x080080b7
 8007f28:	080080b7 	.word	0x080080b7
 8007f2c:	08008075 	.word	0x08008075
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	68b9      	ldr	r1, [r7, #8]
 8007f36:	4618      	mov	r0, r3
 8007f38:	f000 fa66 	bl	8008408 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	699a      	ldr	r2, [r3, #24]
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f042 0208 	orr.w	r2, r2, #8
 8007f4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	699a      	ldr	r2, [r3, #24]
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f022 0204 	bic.w	r2, r2, #4
 8007f5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	6999      	ldr	r1, [r3, #24]
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	691a      	ldr	r2, [r3, #16]
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	430a      	orrs	r2, r1
 8007f6c:	619a      	str	r2, [r3, #24]
      break;
 8007f6e:	e0a5      	b.n	80080bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	68b9      	ldr	r1, [r7, #8]
 8007f76:	4618      	mov	r0, r3
 8007f78:	f000 fab8 	bl	80084ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	699a      	ldr	r2, [r3, #24]
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007f8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	699a      	ldr	r2, [r3, #24]
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007f9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	6999      	ldr	r1, [r3, #24]
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	691b      	ldr	r3, [r3, #16]
 8007fa6:	021a      	lsls	r2, r3, #8
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	430a      	orrs	r2, r1
 8007fae:	619a      	str	r2, [r3, #24]
      break;
 8007fb0:	e084      	b.n	80080bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	68b9      	ldr	r1, [r7, #8]
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f000 fb0f 	bl	80085dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	69da      	ldr	r2, [r3, #28]
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f042 0208 	orr.w	r2, r2, #8
 8007fcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	69da      	ldr	r2, [r3, #28]
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f022 0204 	bic.w	r2, r2, #4
 8007fdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	69d9      	ldr	r1, [r3, #28]
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	691a      	ldr	r2, [r3, #16]
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	430a      	orrs	r2, r1
 8007fee:	61da      	str	r2, [r3, #28]
      break;
 8007ff0:	e064      	b.n	80080bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	68b9      	ldr	r1, [r7, #8]
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f000 fb65 	bl	80086c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	69da      	ldr	r2, [r3, #28]
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800800c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	69da      	ldr	r2, [r3, #28]
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800801c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	69d9      	ldr	r1, [r3, #28]
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	691b      	ldr	r3, [r3, #16]
 8008028:	021a      	lsls	r2, r3, #8
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	430a      	orrs	r2, r1
 8008030:	61da      	str	r2, [r3, #28]
      break;
 8008032:	e043      	b.n	80080bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	68b9      	ldr	r1, [r7, #8]
 800803a:	4618      	mov	r0, r3
 800803c:	f000 fb9c 	bl	8008778 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f042 0208 	orr.w	r2, r2, #8
 800804e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f022 0204 	bic.w	r2, r2, #4
 800805e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	691a      	ldr	r2, [r3, #16]
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	430a      	orrs	r2, r1
 8008070:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008072:	e023      	b.n	80080bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	68b9      	ldr	r1, [r7, #8]
 800807a:	4618      	mov	r0, r3
 800807c:	f000 fbce 	bl	800881c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800808e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800809e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	691b      	ldr	r3, [r3, #16]
 80080aa:	021a      	lsls	r2, r3, #8
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	430a      	orrs	r2, r1
 80080b2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80080b4:	e002      	b.n	80080bc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80080b6:	2301      	movs	r3, #1
 80080b8:	75fb      	strb	r3, [r7, #23]
      break;
 80080ba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	2200      	movs	r2, #0
 80080c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80080c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3718      	adds	r7, #24
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}
 80080ce:	bf00      	nop

080080d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b084      	sub	sp, #16
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80080da:	2300      	movs	r3, #0
 80080dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	d101      	bne.n	80080ec <HAL_TIM_ConfigClockSource+0x1c>
 80080e8:	2302      	movs	r3, #2
 80080ea:	e0b4      	b.n	8008256 <HAL_TIM_ConfigClockSource+0x186>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2201      	movs	r2, #1
 80080f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2202      	movs	r2, #2
 80080f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	689b      	ldr	r3, [r3, #8]
 8008102:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008104:	68ba      	ldr	r2, [r7, #8]
 8008106:	4b56      	ldr	r3, [pc, #344]	@ (8008260 <HAL_TIM_ConfigClockSource+0x190>)
 8008108:	4013      	ands	r3, r2
 800810a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008112:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	68ba      	ldr	r2, [r7, #8]
 800811a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008124:	d03e      	beq.n	80081a4 <HAL_TIM_ConfigClockSource+0xd4>
 8008126:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800812a:	f200 8087 	bhi.w	800823c <HAL_TIM_ConfigClockSource+0x16c>
 800812e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008132:	f000 8086 	beq.w	8008242 <HAL_TIM_ConfigClockSource+0x172>
 8008136:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800813a:	d87f      	bhi.n	800823c <HAL_TIM_ConfigClockSource+0x16c>
 800813c:	2b70      	cmp	r3, #112	@ 0x70
 800813e:	d01a      	beq.n	8008176 <HAL_TIM_ConfigClockSource+0xa6>
 8008140:	2b70      	cmp	r3, #112	@ 0x70
 8008142:	d87b      	bhi.n	800823c <HAL_TIM_ConfigClockSource+0x16c>
 8008144:	2b60      	cmp	r3, #96	@ 0x60
 8008146:	d050      	beq.n	80081ea <HAL_TIM_ConfigClockSource+0x11a>
 8008148:	2b60      	cmp	r3, #96	@ 0x60
 800814a:	d877      	bhi.n	800823c <HAL_TIM_ConfigClockSource+0x16c>
 800814c:	2b50      	cmp	r3, #80	@ 0x50
 800814e:	d03c      	beq.n	80081ca <HAL_TIM_ConfigClockSource+0xfa>
 8008150:	2b50      	cmp	r3, #80	@ 0x50
 8008152:	d873      	bhi.n	800823c <HAL_TIM_ConfigClockSource+0x16c>
 8008154:	2b40      	cmp	r3, #64	@ 0x40
 8008156:	d058      	beq.n	800820a <HAL_TIM_ConfigClockSource+0x13a>
 8008158:	2b40      	cmp	r3, #64	@ 0x40
 800815a:	d86f      	bhi.n	800823c <HAL_TIM_ConfigClockSource+0x16c>
 800815c:	2b30      	cmp	r3, #48	@ 0x30
 800815e:	d064      	beq.n	800822a <HAL_TIM_ConfigClockSource+0x15a>
 8008160:	2b30      	cmp	r3, #48	@ 0x30
 8008162:	d86b      	bhi.n	800823c <HAL_TIM_ConfigClockSource+0x16c>
 8008164:	2b20      	cmp	r3, #32
 8008166:	d060      	beq.n	800822a <HAL_TIM_ConfigClockSource+0x15a>
 8008168:	2b20      	cmp	r3, #32
 800816a:	d867      	bhi.n	800823c <HAL_TIM_ConfigClockSource+0x16c>
 800816c:	2b00      	cmp	r3, #0
 800816e:	d05c      	beq.n	800822a <HAL_TIM_ConfigClockSource+0x15a>
 8008170:	2b10      	cmp	r3, #16
 8008172:	d05a      	beq.n	800822a <HAL_TIM_ConfigClockSource+0x15a>
 8008174:	e062      	b.n	800823c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008186:	f000 fc17 	bl	80089b8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	689b      	ldr	r3, [r3, #8]
 8008190:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008198:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	68ba      	ldr	r2, [r7, #8]
 80081a0:	609a      	str	r2, [r3, #8]
      break;
 80081a2:	e04f      	b.n	8008244 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80081b4:	f000 fc00 	bl	80089b8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	689a      	ldr	r2, [r3, #8]
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80081c6:	609a      	str	r2, [r3, #8]
      break;
 80081c8:	e03c      	b.n	8008244 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80081d6:	461a      	mov	r2, r3
 80081d8:	f000 fb74 	bl	80088c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	2150      	movs	r1, #80	@ 0x50
 80081e2:	4618      	mov	r0, r3
 80081e4:	f000 fbcd 	bl	8008982 <TIM_ITRx_SetConfig>
      break;
 80081e8:	e02c      	b.n	8008244 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80081f6:	461a      	mov	r2, r3
 80081f8:	f000 fb93 	bl	8008922 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	2160      	movs	r1, #96	@ 0x60
 8008202:	4618      	mov	r0, r3
 8008204:	f000 fbbd 	bl	8008982 <TIM_ITRx_SetConfig>
      break;
 8008208:	e01c      	b.n	8008244 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008216:	461a      	mov	r2, r3
 8008218:	f000 fb54 	bl	80088c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	2140      	movs	r1, #64	@ 0x40
 8008222:	4618      	mov	r0, r3
 8008224:	f000 fbad 	bl	8008982 <TIM_ITRx_SetConfig>
      break;
 8008228:	e00c      	b.n	8008244 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681a      	ldr	r2, [r3, #0]
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4619      	mov	r1, r3
 8008234:	4610      	mov	r0, r2
 8008236:	f000 fba4 	bl	8008982 <TIM_ITRx_SetConfig>
      break;
 800823a:	e003      	b.n	8008244 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800823c:	2301      	movs	r3, #1
 800823e:	73fb      	strb	r3, [r7, #15]
      break;
 8008240:	e000      	b.n	8008244 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008242:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2201      	movs	r2, #1
 8008248:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2200      	movs	r2, #0
 8008250:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008254:	7bfb      	ldrb	r3, [r7, #15]
}
 8008256:	4618      	mov	r0, r3
 8008258:	3710      	adds	r7, #16
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}
 800825e:	bf00      	nop
 8008260:	fffeff88 	.word	0xfffeff88

08008264 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008264:	b480      	push	{r7}
 8008266:	b083      	sub	sp, #12
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800826c:	bf00      	nop
 800826e:	370c      	adds	r7, #12
 8008270:	46bd      	mov	sp, r7
 8008272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008276:	4770      	bx	lr

08008278 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008278:	b480      	push	{r7}
 800827a:	b083      	sub	sp, #12
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008280:	bf00      	nop
 8008282:	370c      	adds	r7, #12
 8008284:	46bd      	mov	sp, r7
 8008286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828a:	4770      	bx	lr

0800828c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800828c:	b480      	push	{r7}
 800828e:	b083      	sub	sp, #12
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008294:	bf00      	nop
 8008296:	370c      	adds	r7, #12
 8008298:	46bd      	mov	sp, r7
 800829a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829e:	4770      	bx	lr

080082a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80082a0:	b480      	push	{r7}
 80082a2:	b083      	sub	sp, #12
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80082a8:	bf00      	nop
 80082aa:	370c      	adds	r7, #12
 80082ac:	46bd      	mov	sp, r7
 80082ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b2:	4770      	bx	lr

080082b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b083      	sub	sp, #12
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80082bc:	bf00      	nop
 80082be:	370c      	adds	r7, #12
 80082c0:	46bd      	mov	sp, r7
 80082c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c6:	4770      	bx	lr

080082c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b085      	sub	sp, #20
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
 80082d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	4a40      	ldr	r2, [pc, #256]	@ (80083dc <TIM_Base_SetConfig+0x114>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d013      	beq.n	8008308 <TIM_Base_SetConfig+0x40>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082e6:	d00f      	beq.n	8008308 <TIM_Base_SetConfig+0x40>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	4a3d      	ldr	r2, [pc, #244]	@ (80083e0 <TIM_Base_SetConfig+0x118>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d00b      	beq.n	8008308 <TIM_Base_SetConfig+0x40>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	4a3c      	ldr	r2, [pc, #240]	@ (80083e4 <TIM_Base_SetConfig+0x11c>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d007      	beq.n	8008308 <TIM_Base_SetConfig+0x40>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	4a3b      	ldr	r2, [pc, #236]	@ (80083e8 <TIM_Base_SetConfig+0x120>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d003      	beq.n	8008308 <TIM_Base_SetConfig+0x40>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	4a3a      	ldr	r2, [pc, #232]	@ (80083ec <TIM_Base_SetConfig+0x124>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d108      	bne.n	800831a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800830e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	685b      	ldr	r3, [r3, #4]
 8008314:	68fa      	ldr	r2, [r7, #12]
 8008316:	4313      	orrs	r3, r2
 8008318:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	4a2f      	ldr	r2, [pc, #188]	@ (80083dc <TIM_Base_SetConfig+0x114>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d02b      	beq.n	800837a <TIM_Base_SetConfig+0xb2>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008328:	d027      	beq.n	800837a <TIM_Base_SetConfig+0xb2>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	4a2c      	ldr	r2, [pc, #176]	@ (80083e0 <TIM_Base_SetConfig+0x118>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d023      	beq.n	800837a <TIM_Base_SetConfig+0xb2>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	4a2b      	ldr	r2, [pc, #172]	@ (80083e4 <TIM_Base_SetConfig+0x11c>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d01f      	beq.n	800837a <TIM_Base_SetConfig+0xb2>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	4a2a      	ldr	r2, [pc, #168]	@ (80083e8 <TIM_Base_SetConfig+0x120>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d01b      	beq.n	800837a <TIM_Base_SetConfig+0xb2>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	4a29      	ldr	r2, [pc, #164]	@ (80083ec <TIM_Base_SetConfig+0x124>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d017      	beq.n	800837a <TIM_Base_SetConfig+0xb2>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	4a28      	ldr	r2, [pc, #160]	@ (80083f0 <TIM_Base_SetConfig+0x128>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d013      	beq.n	800837a <TIM_Base_SetConfig+0xb2>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	4a27      	ldr	r2, [pc, #156]	@ (80083f4 <TIM_Base_SetConfig+0x12c>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d00f      	beq.n	800837a <TIM_Base_SetConfig+0xb2>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	4a26      	ldr	r2, [pc, #152]	@ (80083f8 <TIM_Base_SetConfig+0x130>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d00b      	beq.n	800837a <TIM_Base_SetConfig+0xb2>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	4a25      	ldr	r2, [pc, #148]	@ (80083fc <TIM_Base_SetConfig+0x134>)
 8008366:	4293      	cmp	r3, r2
 8008368:	d007      	beq.n	800837a <TIM_Base_SetConfig+0xb2>
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	4a24      	ldr	r2, [pc, #144]	@ (8008400 <TIM_Base_SetConfig+0x138>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d003      	beq.n	800837a <TIM_Base_SetConfig+0xb2>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	4a23      	ldr	r2, [pc, #140]	@ (8008404 <TIM_Base_SetConfig+0x13c>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d108      	bne.n	800838c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008380:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	68db      	ldr	r3, [r3, #12]
 8008386:	68fa      	ldr	r2, [r7, #12]
 8008388:	4313      	orrs	r3, r2
 800838a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	695b      	ldr	r3, [r3, #20]
 8008396:	4313      	orrs	r3, r2
 8008398:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	68fa      	ldr	r2, [r7, #12]
 800839e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	689a      	ldr	r2, [r3, #8]
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	681a      	ldr	r2, [r3, #0]
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	4a0a      	ldr	r2, [pc, #40]	@ (80083dc <TIM_Base_SetConfig+0x114>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d003      	beq.n	80083c0 <TIM_Base_SetConfig+0xf8>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	4a0c      	ldr	r2, [pc, #48]	@ (80083ec <TIM_Base_SetConfig+0x124>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d103      	bne.n	80083c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	691a      	ldr	r2, [r3, #16]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2201      	movs	r2, #1
 80083cc:	615a      	str	r2, [r3, #20]
}
 80083ce:	bf00      	nop
 80083d0:	3714      	adds	r7, #20
 80083d2:	46bd      	mov	sp, r7
 80083d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d8:	4770      	bx	lr
 80083da:	bf00      	nop
 80083dc:	40010000 	.word	0x40010000
 80083e0:	40000400 	.word	0x40000400
 80083e4:	40000800 	.word	0x40000800
 80083e8:	40000c00 	.word	0x40000c00
 80083ec:	40010400 	.word	0x40010400
 80083f0:	40014000 	.word	0x40014000
 80083f4:	40014400 	.word	0x40014400
 80083f8:	40014800 	.word	0x40014800
 80083fc:	40001800 	.word	0x40001800
 8008400:	40001c00 	.word	0x40001c00
 8008404:	40002000 	.word	0x40002000

08008408 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008408:	b480      	push	{r7}
 800840a:	b087      	sub	sp, #28
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
 8008410:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6a1b      	ldr	r3, [r3, #32]
 8008416:	f023 0201 	bic.w	r2, r3, #1
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6a1b      	ldr	r3, [r3, #32]
 8008422:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	699b      	ldr	r3, [r3, #24]
 800842e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008430:	68fa      	ldr	r2, [r7, #12]
 8008432:	4b2b      	ldr	r3, [pc, #172]	@ (80084e0 <TIM_OC1_SetConfig+0xd8>)
 8008434:	4013      	ands	r3, r2
 8008436:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	f023 0303 	bic.w	r3, r3, #3
 800843e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	68fa      	ldr	r2, [r7, #12]
 8008446:	4313      	orrs	r3, r2
 8008448:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800844a:	697b      	ldr	r3, [r7, #20]
 800844c:	f023 0302 	bic.w	r3, r3, #2
 8008450:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	689b      	ldr	r3, [r3, #8]
 8008456:	697a      	ldr	r2, [r7, #20]
 8008458:	4313      	orrs	r3, r2
 800845a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	4a21      	ldr	r2, [pc, #132]	@ (80084e4 <TIM_OC1_SetConfig+0xdc>)
 8008460:	4293      	cmp	r3, r2
 8008462:	d003      	beq.n	800846c <TIM_OC1_SetConfig+0x64>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	4a20      	ldr	r2, [pc, #128]	@ (80084e8 <TIM_OC1_SetConfig+0xe0>)
 8008468:	4293      	cmp	r3, r2
 800846a:	d10c      	bne.n	8008486 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	f023 0308 	bic.w	r3, r3, #8
 8008472:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	68db      	ldr	r3, [r3, #12]
 8008478:	697a      	ldr	r2, [r7, #20]
 800847a:	4313      	orrs	r3, r2
 800847c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	f023 0304 	bic.w	r3, r3, #4
 8008484:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	4a16      	ldr	r2, [pc, #88]	@ (80084e4 <TIM_OC1_SetConfig+0xdc>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d003      	beq.n	8008496 <TIM_OC1_SetConfig+0x8e>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	4a15      	ldr	r2, [pc, #84]	@ (80084e8 <TIM_OC1_SetConfig+0xe0>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d111      	bne.n	80084ba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008496:	693b      	ldr	r3, [r7, #16]
 8008498:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800849c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80084a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	695b      	ldr	r3, [r3, #20]
 80084aa:	693a      	ldr	r2, [r7, #16]
 80084ac:	4313      	orrs	r3, r2
 80084ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	699b      	ldr	r3, [r3, #24]
 80084b4:	693a      	ldr	r2, [r7, #16]
 80084b6:	4313      	orrs	r3, r2
 80084b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	693a      	ldr	r2, [r7, #16]
 80084be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	68fa      	ldr	r2, [r7, #12]
 80084c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	685a      	ldr	r2, [r3, #4]
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	697a      	ldr	r2, [r7, #20]
 80084d2:	621a      	str	r2, [r3, #32]
}
 80084d4:	bf00      	nop
 80084d6:	371c      	adds	r7, #28
 80084d8:	46bd      	mov	sp, r7
 80084da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084de:	4770      	bx	lr
 80084e0:	fffeff8f 	.word	0xfffeff8f
 80084e4:	40010000 	.word	0x40010000
 80084e8:	40010400 	.word	0x40010400

080084ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80084ec:	b480      	push	{r7}
 80084ee:	b087      	sub	sp, #28
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
 80084f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6a1b      	ldr	r3, [r3, #32]
 80084fa:	f023 0210 	bic.w	r2, r3, #16
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6a1b      	ldr	r3, [r3, #32]
 8008506:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	685b      	ldr	r3, [r3, #4]
 800850c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	699b      	ldr	r3, [r3, #24]
 8008512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008514:	68fa      	ldr	r2, [r7, #12]
 8008516:	4b2e      	ldr	r3, [pc, #184]	@ (80085d0 <TIM_OC2_SetConfig+0xe4>)
 8008518:	4013      	ands	r3, r2
 800851a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008522:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	021b      	lsls	r3, r3, #8
 800852a:	68fa      	ldr	r2, [r7, #12]
 800852c:	4313      	orrs	r3, r2
 800852e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008530:	697b      	ldr	r3, [r7, #20]
 8008532:	f023 0320 	bic.w	r3, r3, #32
 8008536:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	689b      	ldr	r3, [r3, #8]
 800853c:	011b      	lsls	r3, r3, #4
 800853e:	697a      	ldr	r2, [r7, #20]
 8008540:	4313      	orrs	r3, r2
 8008542:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	4a23      	ldr	r2, [pc, #140]	@ (80085d4 <TIM_OC2_SetConfig+0xe8>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d003      	beq.n	8008554 <TIM_OC2_SetConfig+0x68>
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	4a22      	ldr	r2, [pc, #136]	@ (80085d8 <TIM_OC2_SetConfig+0xec>)
 8008550:	4293      	cmp	r3, r2
 8008552:	d10d      	bne.n	8008570 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800855a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	68db      	ldr	r3, [r3, #12]
 8008560:	011b      	lsls	r3, r3, #4
 8008562:	697a      	ldr	r2, [r7, #20]
 8008564:	4313      	orrs	r3, r2
 8008566:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008568:	697b      	ldr	r3, [r7, #20]
 800856a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800856e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	4a18      	ldr	r2, [pc, #96]	@ (80085d4 <TIM_OC2_SetConfig+0xe8>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d003      	beq.n	8008580 <TIM_OC2_SetConfig+0x94>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	4a17      	ldr	r2, [pc, #92]	@ (80085d8 <TIM_OC2_SetConfig+0xec>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d113      	bne.n	80085a8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008586:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800858e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	695b      	ldr	r3, [r3, #20]
 8008594:	009b      	lsls	r3, r3, #2
 8008596:	693a      	ldr	r2, [r7, #16]
 8008598:	4313      	orrs	r3, r2
 800859a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	699b      	ldr	r3, [r3, #24]
 80085a0:	009b      	lsls	r3, r3, #2
 80085a2:	693a      	ldr	r2, [r7, #16]
 80085a4:	4313      	orrs	r3, r2
 80085a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	693a      	ldr	r2, [r7, #16]
 80085ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	68fa      	ldr	r2, [r7, #12]
 80085b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	685a      	ldr	r2, [r3, #4]
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	697a      	ldr	r2, [r7, #20]
 80085c0:	621a      	str	r2, [r3, #32]
}
 80085c2:	bf00      	nop
 80085c4:	371c      	adds	r7, #28
 80085c6:	46bd      	mov	sp, r7
 80085c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085cc:	4770      	bx	lr
 80085ce:	bf00      	nop
 80085d0:	feff8fff 	.word	0xfeff8fff
 80085d4:	40010000 	.word	0x40010000
 80085d8:	40010400 	.word	0x40010400

080085dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80085dc:	b480      	push	{r7}
 80085de:	b087      	sub	sp, #28
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
 80085e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6a1b      	ldr	r3, [r3, #32]
 80085ea:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6a1b      	ldr	r3, [r3, #32]
 80085f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	685b      	ldr	r3, [r3, #4]
 80085fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	69db      	ldr	r3, [r3, #28]
 8008602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008604:	68fa      	ldr	r2, [r7, #12]
 8008606:	4b2d      	ldr	r3, [pc, #180]	@ (80086bc <TIM_OC3_SetConfig+0xe0>)
 8008608:	4013      	ands	r3, r2
 800860a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	f023 0303 	bic.w	r3, r3, #3
 8008612:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	68fa      	ldr	r2, [r7, #12]
 800861a:	4313      	orrs	r3, r2
 800861c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008624:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	689b      	ldr	r3, [r3, #8]
 800862a:	021b      	lsls	r3, r3, #8
 800862c:	697a      	ldr	r2, [r7, #20]
 800862e:	4313      	orrs	r3, r2
 8008630:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	4a22      	ldr	r2, [pc, #136]	@ (80086c0 <TIM_OC3_SetConfig+0xe4>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d003      	beq.n	8008642 <TIM_OC3_SetConfig+0x66>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	4a21      	ldr	r2, [pc, #132]	@ (80086c4 <TIM_OC3_SetConfig+0xe8>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d10d      	bne.n	800865e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008648:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	68db      	ldr	r3, [r3, #12]
 800864e:	021b      	lsls	r3, r3, #8
 8008650:	697a      	ldr	r2, [r7, #20]
 8008652:	4313      	orrs	r3, r2
 8008654:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800865c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	4a17      	ldr	r2, [pc, #92]	@ (80086c0 <TIM_OC3_SetConfig+0xe4>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d003      	beq.n	800866e <TIM_OC3_SetConfig+0x92>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	4a16      	ldr	r2, [pc, #88]	@ (80086c4 <TIM_OC3_SetConfig+0xe8>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d113      	bne.n	8008696 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800866e:	693b      	ldr	r3, [r7, #16]
 8008670:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008674:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008676:	693b      	ldr	r3, [r7, #16]
 8008678:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800867c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	695b      	ldr	r3, [r3, #20]
 8008682:	011b      	lsls	r3, r3, #4
 8008684:	693a      	ldr	r2, [r7, #16]
 8008686:	4313      	orrs	r3, r2
 8008688:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	699b      	ldr	r3, [r3, #24]
 800868e:	011b      	lsls	r3, r3, #4
 8008690:	693a      	ldr	r2, [r7, #16]
 8008692:	4313      	orrs	r3, r2
 8008694:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	693a      	ldr	r2, [r7, #16]
 800869a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	68fa      	ldr	r2, [r7, #12]
 80086a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	685a      	ldr	r2, [r3, #4]
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	697a      	ldr	r2, [r7, #20]
 80086ae:	621a      	str	r2, [r3, #32]
}
 80086b0:	bf00      	nop
 80086b2:	371c      	adds	r7, #28
 80086b4:	46bd      	mov	sp, r7
 80086b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ba:	4770      	bx	lr
 80086bc:	fffeff8f 	.word	0xfffeff8f
 80086c0:	40010000 	.word	0x40010000
 80086c4:	40010400 	.word	0x40010400

080086c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80086c8:	b480      	push	{r7}
 80086ca:	b087      	sub	sp, #28
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
 80086d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6a1b      	ldr	r3, [r3, #32]
 80086d6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6a1b      	ldr	r3, [r3, #32]
 80086e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	685b      	ldr	r3, [r3, #4]
 80086e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	69db      	ldr	r3, [r3, #28]
 80086ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80086f0:	68fa      	ldr	r2, [r7, #12]
 80086f2:	4b1e      	ldr	r3, [pc, #120]	@ (800876c <TIM_OC4_SetConfig+0xa4>)
 80086f4:	4013      	ands	r3, r2
 80086f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80086fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	021b      	lsls	r3, r3, #8
 8008706:	68fa      	ldr	r2, [r7, #12]
 8008708:	4313      	orrs	r3, r2
 800870a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008712:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	689b      	ldr	r3, [r3, #8]
 8008718:	031b      	lsls	r3, r3, #12
 800871a:	693a      	ldr	r2, [r7, #16]
 800871c:	4313      	orrs	r3, r2
 800871e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	4a13      	ldr	r2, [pc, #76]	@ (8008770 <TIM_OC4_SetConfig+0xa8>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d003      	beq.n	8008730 <TIM_OC4_SetConfig+0x68>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	4a12      	ldr	r2, [pc, #72]	@ (8008774 <TIM_OC4_SetConfig+0xac>)
 800872c:	4293      	cmp	r3, r2
 800872e:	d109      	bne.n	8008744 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008736:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	695b      	ldr	r3, [r3, #20]
 800873c:	019b      	lsls	r3, r3, #6
 800873e:	697a      	ldr	r2, [r7, #20]
 8008740:	4313      	orrs	r3, r2
 8008742:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	697a      	ldr	r2, [r7, #20]
 8008748:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	68fa      	ldr	r2, [r7, #12]
 800874e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	685a      	ldr	r2, [r3, #4]
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	693a      	ldr	r2, [r7, #16]
 800875c:	621a      	str	r2, [r3, #32]
}
 800875e:	bf00      	nop
 8008760:	371c      	adds	r7, #28
 8008762:	46bd      	mov	sp, r7
 8008764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008768:	4770      	bx	lr
 800876a:	bf00      	nop
 800876c:	feff8fff 	.word	0xfeff8fff
 8008770:	40010000 	.word	0x40010000
 8008774:	40010400 	.word	0x40010400

08008778 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008778:	b480      	push	{r7}
 800877a:	b087      	sub	sp, #28
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
 8008780:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6a1b      	ldr	r3, [r3, #32]
 8008786:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6a1b      	ldr	r3, [r3, #32]
 8008792:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	685b      	ldr	r3, [r3, #4]
 8008798:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800879e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80087a0:	68fa      	ldr	r2, [r7, #12]
 80087a2:	4b1b      	ldr	r3, [pc, #108]	@ (8008810 <TIM_OC5_SetConfig+0x98>)
 80087a4:	4013      	ands	r3, r2
 80087a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	68fa      	ldr	r2, [r7, #12]
 80087ae:	4313      	orrs	r3, r2
 80087b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80087b8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	689b      	ldr	r3, [r3, #8]
 80087be:	041b      	lsls	r3, r3, #16
 80087c0:	693a      	ldr	r2, [r7, #16]
 80087c2:	4313      	orrs	r3, r2
 80087c4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	4a12      	ldr	r2, [pc, #72]	@ (8008814 <TIM_OC5_SetConfig+0x9c>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d003      	beq.n	80087d6 <TIM_OC5_SetConfig+0x5e>
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	4a11      	ldr	r2, [pc, #68]	@ (8008818 <TIM_OC5_SetConfig+0xa0>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d109      	bne.n	80087ea <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80087dc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	695b      	ldr	r3, [r3, #20]
 80087e2:	021b      	lsls	r3, r3, #8
 80087e4:	697a      	ldr	r2, [r7, #20]
 80087e6:	4313      	orrs	r3, r2
 80087e8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	697a      	ldr	r2, [r7, #20]
 80087ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	68fa      	ldr	r2, [r7, #12]
 80087f4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	685a      	ldr	r2, [r3, #4]
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	693a      	ldr	r2, [r7, #16]
 8008802:	621a      	str	r2, [r3, #32]
}
 8008804:	bf00      	nop
 8008806:	371c      	adds	r7, #28
 8008808:	46bd      	mov	sp, r7
 800880a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880e:	4770      	bx	lr
 8008810:	fffeff8f 	.word	0xfffeff8f
 8008814:	40010000 	.word	0x40010000
 8008818:	40010400 	.word	0x40010400

0800881c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800881c:	b480      	push	{r7}
 800881e:	b087      	sub	sp, #28
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
 8008824:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6a1b      	ldr	r3, [r3, #32]
 800882a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6a1b      	ldr	r3, [r3, #32]
 8008836:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	685b      	ldr	r3, [r3, #4]
 800883c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008844:	68fa      	ldr	r2, [r7, #12]
 8008846:	4b1c      	ldr	r3, [pc, #112]	@ (80088b8 <TIM_OC6_SetConfig+0x9c>)
 8008848:	4013      	ands	r3, r2
 800884a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	021b      	lsls	r3, r3, #8
 8008852:	68fa      	ldr	r2, [r7, #12]
 8008854:	4313      	orrs	r3, r2
 8008856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008858:	693b      	ldr	r3, [r7, #16]
 800885a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800885e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	689b      	ldr	r3, [r3, #8]
 8008864:	051b      	lsls	r3, r3, #20
 8008866:	693a      	ldr	r2, [r7, #16]
 8008868:	4313      	orrs	r3, r2
 800886a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	4a13      	ldr	r2, [pc, #76]	@ (80088bc <TIM_OC6_SetConfig+0xa0>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d003      	beq.n	800887c <TIM_OC6_SetConfig+0x60>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	4a12      	ldr	r2, [pc, #72]	@ (80088c0 <TIM_OC6_SetConfig+0xa4>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d109      	bne.n	8008890 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800887c:	697b      	ldr	r3, [r7, #20]
 800887e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008882:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	695b      	ldr	r3, [r3, #20]
 8008888:	029b      	lsls	r3, r3, #10
 800888a:	697a      	ldr	r2, [r7, #20]
 800888c:	4313      	orrs	r3, r2
 800888e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	697a      	ldr	r2, [r7, #20]
 8008894:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	68fa      	ldr	r2, [r7, #12]
 800889a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	685a      	ldr	r2, [r3, #4]
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	693a      	ldr	r2, [r7, #16]
 80088a8:	621a      	str	r2, [r3, #32]
}
 80088aa:	bf00      	nop
 80088ac:	371c      	adds	r7, #28
 80088ae:	46bd      	mov	sp, r7
 80088b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b4:	4770      	bx	lr
 80088b6:	bf00      	nop
 80088b8:	feff8fff 	.word	0xfeff8fff
 80088bc:	40010000 	.word	0x40010000
 80088c0:	40010400 	.word	0x40010400

080088c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80088c4:	b480      	push	{r7}
 80088c6:	b087      	sub	sp, #28
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	60f8      	str	r0, [r7, #12]
 80088cc:	60b9      	str	r1, [r7, #8]
 80088ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	6a1b      	ldr	r3, [r3, #32]
 80088d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	6a1b      	ldr	r3, [r3, #32]
 80088da:	f023 0201 	bic.w	r2, r3, #1
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	699b      	ldr	r3, [r3, #24]
 80088e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80088e8:	693b      	ldr	r3, [r7, #16]
 80088ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80088ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	011b      	lsls	r3, r3, #4
 80088f4:	693a      	ldr	r2, [r7, #16]
 80088f6:	4313      	orrs	r3, r2
 80088f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	f023 030a 	bic.w	r3, r3, #10
 8008900:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008902:	697a      	ldr	r2, [r7, #20]
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	4313      	orrs	r3, r2
 8008908:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	693a      	ldr	r2, [r7, #16]
 800890e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	697a      	ldr	r2, [r7, #20]
 8008914:	621a      	str	r2, [r3, #32]
}
 8008916:	bf00      	nop
 8008918:	371c      	adds	r7, #28
 800891a:	46bd      	mov	sp, r7
 800891c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008920:	4770      	bx	lr

08008922 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008922:	b480      	push	{r7}
 8008924:	b087      	sub	sp, #28
 8008926:	af00      	add	r7, sp, #0
 8008928:	60f8      	str	r0, [r7, #12]
 800892a:	60b9      	str	r1, [r7, #8]
 800892c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	6a1b      	ldr	r3, [r3, #32]
 8008932:	f023 0210 	bic.w	r2, r3, #16
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	699b      	ldr	r3, [r3, #24]
 800893e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	6a1b      	ldr	r3, [r3, #32]
 8008944:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800894c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	031b      	lsls	r3, r3, #12
 8008952:	697a      	ldr	r2, [r7, #20]
 8008954:	4313      	orrs	r3, r2
 8008956:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008958:	693b      	ldr	r3, [r7, #16]
 800895a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800895e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	011b      	lsls	r3, r3, #4
 8008964:	693a      	ldr	r2, [r7, #16]
 8008966:	4313      	orrs	r3, r2
 8008968:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	697a      	ldr	r2, [r7, #20]
 800896e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	693a      	ldr	r2, [r7, #16]
 8008974:	621a      	str	r2, [r3, #32]
}
 8008976:	bf00      	nop
 8008978:	371c      	adds	r7, #28
 800897a:	46bd      	mov	sp, r7
 800897c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008980:	4770      	bx	lr

08008982 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008982:	b480      	push	{r7}
 8008984:	b085      	sub	sp, #20
 8008986:	af00      	add	r7, sp, #0
 8008988:	6078      	str	r0, [r7, #4]
 800898a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	689b      	ldr	r3, [r3, #8]
 8008990:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008998:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800899a:	683a      	ldr	r2, [r7, #0]
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	4313      	orrs	r3, r2
 80089a0:	f043 0307 	orr.w	r3, r3, #7
 80089a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	68fa      	ldr	r2, [r7, #12]
 80089aa:	609a      	str	r2, [r3, #8]
}
 80089ac:	bf00      	nop
 80089ae:	3714      	adds	r7, #20
 80089b0:	46bd      	mov	sp, r7
 80089b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b6:	4770      	bx	lr

080089b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80089b8:	b480      	push	{r7}
 80089ba:	b087      	sub	sp, #28
 80089bc:	af00      	add	r7, sp, #0
 80089be:	60f8      	str	r0, [r7, #12]
 80089c0:	60b9      	str	r1, [r7, #8]
 80089c2:	607a      	str	r2, [r7, #4]
 80089c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	689b      	ldr	r3, [r3, #8]
 80089ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80089cc:	697b      	ldr	r3, [r7, #20]
 80089ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80089d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	021a      	lsls	r2, r3, #8
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	431a      	orrs	r2, r3
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	4313      	orrs	r3, r2
 80089e0:	697a      	ldr	r2, [r7, #20]
 80089e2:	4313      	orrs	r3, r2
 80089e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	697a      	ldr	r2, [r7, #20]
 80089ea:	609a      	str	r2, [r3, #8]
}
 80089ec:	bf00      	nop
 80089ee:	371c      	adds	r7, #28
 80089f0:	46bd      	mov	sp, r7
 80089f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f6:	4770      	bx	lr

080089f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80089f8:	b480      	push	{r7}
 80089fa:	b087      	sub	sp, #28
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	60f8      	str	r0, [r7, #12]
 8008a00:	60b9      	str	r1, [r7, #8]
 8008a02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	f003 031f 	and.w	r3, r3, #31
 8008a0a:	2201      	movs	r2, #1
 8008a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8008a10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	6a1a      	ldr	r2, [r3, #32]
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	43db      	mvns	r3, r3
 8008a1a:	401a      	ands	r2, r3
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	6a1a      	ldr	r2, [r3, #32]
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	f003 031f 	and.w	r3, r3, #31
 8008a2a:	6879      	ldr	r1, [r7, #4]
 8008a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8008a30:	431a      	orrs	r2, r3
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	621a      	str	r2, [r3, #32]
}
 8008a36:	bf00      	nop
 8008a38:	371c      	adds	r7, #28
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a40:	4770      	bx	lr
	...

08008a44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008a44:	b480      	push	{r7}
 8008a46:	b085      	sub	sp, #20
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008a54:	2b01      	cmp	r3, #1
 8008a56:	d101      	bne.n	8008a5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008a58:	2302      	movs	r3, #2
 8008a5a:	e06d      	b.n	8008b38 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2201      	movs	r2, #1
 8008a60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2202      	movs	r2, #2
 8008a68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	689b      	ldr	r3, [r3, #8]
 8008a7a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4a30      	ldr	r2, [pc, #192]	@ (8008b44 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d004      	beq.n	8008a90 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a2f      	ldr	r2, [pc, #188]	@ (8008b48 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d108      	bne.n	8008aa2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008a96:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	685b      	ldr	r3, [r3, #4]
 8008a9c:	68fa      	ldr	r2, [r7, #12]
 8008a9e:	4313      	orrs	r3, r2
 8008aa0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008aa8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	68fa      	ldr	r2, [r7, #12]
 8008ab0:	4313      	orrs	r3, r2
 8008ab2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	68fa      	ldr	r2, [r7, #12]
 8008aba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	4a20      	ldr	r2, [pc, #128]	@ (8008b44 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d022      	beq.n	8008b0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ace:	d01d      	beq.n	8008b0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	4a1d      	ldr	r2, [pc, #116]	@ (8008b4c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d018      	beq.n	8008b0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4a1c      	ldr	r2, [pc, #112]	@ (8008b50 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d013      	beq.n	8008b0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	4a1a      	ldr	r2, [pc, #104]	@ (8008b54 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d00e      	beq.n	8008b0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	4a15      	ldr	r2, [pc, #84]	@ (8008b48 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008af4:	4293      	cmp	r3, r2
 8008af6:	d009      	beq.n	8008b0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	4a16      	ldr	r2, [pc, #88]	@ (8008b58 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d004      	beq.n	8008b0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	4a15      	ldr	r2, [pc, #84]	@ (8008b5c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d10c      	bne.n	8008b26 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008b12:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	689b      	ldr	r3, [r3, #8]
 8008b18:	68ba      	ldr	r2, [r7, #8]
 8008b1a:	4313      	orrs	r3, r2
 8008b1c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	68ba      	ldr	r2, [r7, #8]
 8008b24:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2201      	movs	r2, #1
 8008b2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2200      	movs	r2, #0
 8008b32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008b36:	2300      	movs	r3, #0
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	3714      	adds	r7, #20
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b42:	4770      	bx	lr
 8008b44:	40010000 	.word	0x40010000
 8008b48:	40010400 	.word	0x40010400
 8008b4c:	40000400 	.word	0x40000400
 8008b50:	40000800 	.word	0x40000800
 8008b54:	40000c00 	.word	0x40000c00
 8008b58:	40014000 	.word	0x40014000
 8008b5c:	40001800 	.word	0x40001800

08008b60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008b60:	b480      	push	{r7}
 8008b62:	b083      	sub	sp, #12
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008b68:	bf00      	nop
 8008b6a:	370c      	adds	r7, #12
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b72:	4770      	bx	lr

08008b74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008b74:	b480      	push	{r7}
 8008b76:	b083      	sub	sp, #12
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008b7c:	bf00      	nop
 8008b7e:	370c      	adds	r7, #12
 8008b80:	46bd      	mov	sp, r7
 8008b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b86:	4770      	bx	lr

08008b88 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b083      	sub	sp, #12
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008b90:	bf00      	nop
 8008b92:	370c      	adds	r7, #12
 8008b94:	46bd      	mov	sp, r7
 8008b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9a:	4770      	bx	lr

08008b9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b082      	sub	sp, #8
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d101      	bne.n	8008bae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008baa:	2301      	movs	r3, #1
 8008bac:	e040      	b.n	8008c30 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d106      	bne.n	8008bc4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f7fb fac6 	bl	8004150 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2224      	movs	r2, #36	@ 0x24
 8008bc8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	681a      	ldr	r2, [r3, #0]
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f022 0201 	bic.w	r2, r2, #1
 8008bd8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f000 fc66 	bl	80094ac <UART_SetConfig>
 8008be0:	4603      	mov	r3, r0
 8008be2:	2b01      	cmp	r3, #1
 8008be4:	d101      	bne.n	8008bea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008be6:	2301      	movs	r3, #1
 8008be8:	e022      	b.n	8008c30 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d002      	beq.n	8008bf8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f000 febe 	bl	8009974 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	685a      	ldr	r2, [r3, #4]
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008c06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	689a      	ldr	r2, [r3, #8]
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008c16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	681a      	ldr	r2, [r3, #0]
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f042 0201 	orr.w	r2, r2, #1
 8008c26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f000 ff45 	bl	8009ab8 <UART_CheckIdleState>
 8008c2e:	4603      	mov	r3, r0
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3708      	adds	r7, #8
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}

08008c38 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b08a      	sub	sp, #40	@ 0x28
 8008c3c:	af02      	add	r7, sp, #8
 8008c3e:	60f8      	str	r0, [r7, #12]
 8008c40:	60b9      	str	r1, [r7, #8]
 8008c42:	603b      	str	r3, [r7, #0]
 8008c44:	4613      	mov	r3, r2
 8008c46:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008c4c:	2b20      	cmp	r3, #32
 8008c4e:	d171      	bne.n	8008d34 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d002      	beq.n	8008c5c <HAL_UART_Transmit+0x24>
 8008c56:	88fb      	ldrh	r3, [r7, #6]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d101      	bne.n	8008c60 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008c5c:	2301      	movs	r3, #1
 8008c5e:	e06a      	b.n	8008d36 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2200      	movs	r2, #0
 8008c64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	2221      	movs	r2, #33	@ 0x21
 8008c6c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008c6e:	f7fb fd97 	bl	80047a0 <HAL_GetTick>
 8008c72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	88fa      	ldrh	r2, [r7, #6]
 8008c78:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	88fa      	ldrh	r2, [r7, #6]
 8008c80:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	689b      	ldr	r3, [r3, #8]
 8008c88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c8c:	d108      	bne.n	8008ca0 <HAL_UART_Transmit+0x68>
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	691b      	ldr	r3, [r3, #16]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d104      	bne.n	8008ca0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8008c96:	2300      	movs	r3, #0
 8008c98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	61bb      	str	r3, [r7, #24]
 8008c9e:	e003      	b.n	8008ca8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008ca8:	e02c      	b.n	8008d04 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	9300      	str	r3, [sp, #0]
 8008cae:	697b      	ldr	r3, [r7, #20]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	2180      	movs	r1, #128	@ 0x80
 8008cb4:	68f8      	ldr	r0, [r7, #12]
 8008cb6:	f000 ff36 	bl	8009b26 <UART_WaitOnFlagUntilTimeout>
 8008cba:	4603      	mov	r3, r0
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d001      	beq.n	8008cc4 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8008cc0:	2303      	movs	r3, #3
 8008cc2:	e038      	b.n	8008d36 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8008cc4:	69fb      	ldr	r3, [r7, #28]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d10b      	bne.n	8008ce2 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008cca:	69bb      	ldr	r3, [r7, #24]
 8008ccc:	881b      	ldrh	r3, [r3, #0]
 8008cce:	461a      	mov	r2, r3
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008cd8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008cda:	69bb      	ldr	r3, [r7, #24]
 8008cdc:	3302      	adds	r3, #2
 8008cde:	61bb      	str	r3, [r7, #24]
 8008ce0:	e007      	b.n	8008cf2 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008ce2:	69fb      	ldr	r3, [r7, #28]
 8008ce4:	781a      	ldrb	r2, [r3, #0]
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008cec:	69fb      	ldr	r3, [r7, #28]
 8008cee:	3301      	adds	r3, #1
 8008cf0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008cf8:	b29b      	uxth	r3, r3
 8008cfa:	3b01      	subs	r3, #1
 8008cfc:	b29a      	uxth	r2, r3
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008d0a:	b29b      	uxth	r3, r3
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d1cc      	bne.n	8008caa <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	9300      	str	r3, [sp, #0]
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	2200      	movs	r2, #0
 8008d18:	2140      	movs	r1, #64	@ 0x40
 8008d1a:	68f8      	ldr	r0, [r7, #12]
 8008d1c:	f000 ff03 	bl	8009b26 <UART_WaitOnFlagUntilTimeout>
 8008d20:	4603      	mov	r3, r0
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d001      	beq.n	8008d2a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8008d26:	2303      	movs	r3, #3
 8008d28:	e005      	b.n	8008d36 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	2220      	movs	r2, #32
 8008d2e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8008d30:	2300      	movs	r3, #0
 8008d32:	e000      	b.n	8008d36 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8008d34:	2302      	movs	r3, #2
  }
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3720      	adds	r7, #32
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}

08008d3e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d3e:	b580      	push	{r7, lr}
 8008d40:	b08a      	sub	sp, #40	@ 0x28
 8008d42:	af02      	add	r7, sp, #8
 8008d44:	60f8      	str	r0, [r7, #12]
 8008d46:	60b9      	str	r1, [r7, #8]
 8008d48:	603b      	str	r3, [r7, #0]
 8008d4a:	4613      	mov	r3, r2
 8008d4c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d54:	2b20      	cmp	r3, #32
 8008d56:	f040 80b1 	bne.w	8008ebc <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d5a:	68bb      	ldr	r3, [r7, #8]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d002      	beq.n	8008d66 <HAL_UART_Receive+0x28>
 8008d60:	88fb      	ldrh	r3, [r7, #6]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d101      	bne.n	8008d6a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8008d66:	2301      	movs	r3, #1
 8008d68:	e0a9      	b.n	8008ebe <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	2222      	movs	r2, #34	@ 0x22
 8008d76:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008d80:	f7fb fd0e 	bl	80047a0 <HAL_GetTick>
 8008d84:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	88fa      	ldrh	r2, [r7, #6]
 8008d8a:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	88fa      	ldrh	r2, [r7, #6]
 8008d92:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	689b      	ldr	r3, [r3, #8]
 8008d9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d9e:	d10e      	bne.n	8008dbe <HAL_UART_Receive+0x80>
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	691b      	ldr	r3, [r3, #16]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d105      	bne.n	8008db4 <HAL_UART_Receive+0x76>
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8008dae:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008db2:	e02d      	b.n	8008e10 <HAL_UART_Receive+0xd2>
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	22ff      	movs	r2, #255	@ 0xff
 8008db8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008dbc:	e028      	b.n	8008e10 <HAL_UART_Receive+0xd2>
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	689b      	ldr	r3, [r3, #8]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d10d      	bne.n	8008de2 <HAL_UART_Receive+0xa4>
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	691b      	ldr	r3, [r3, #16]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d104      	bne.n	8008dd8 <HAL_UART_Receive+0x9a>
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	22ff      	movs	r2, #255	@ 0xff
 8008dd2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008dd6:	e01b      	b.n	8008e10 <HAL_UART_Receive+0xd2>
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	227f      	movs	r2, #127	@ 0x7f
 8008ddc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008de0:	e016      	b.n	8008e10 <HAL_UART_Receive+0xd2>
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	689b      	ldr	r3, [r3, #8]
 8008de6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008dea:	d10d      	bne.n	8008e08 <HAL_UART_Receive+0xca>
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	691b      	ldr	r3, [r3, #16]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d104      	bne.n	8008dfe <HAL_UART_Receive+0xc0>
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	227f      	movs	r2, #127	@ 0x7f
 8008df8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008dfc:	e008      	b.n	8008e10 <HAL_UART_Receive+0xd2>
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	223f      	movs	r2, #63	@ 0x3f
 8008e02:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008e06:	e003      	b.n	8008e10 <HAL_UART_Receive+0xd2>
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008e16:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	689b      	ldr	r3, [r3, #8]
 8008e1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e20:	d108      	bne.n	8008e34 <HAL_UART_Receive+0xf6>
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	691b      	ldr	r3, [r3, #16]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d104      	bne.n	8008e34 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	61bb      	str	r3, [r7, #24]
 8008e32:	e003      	b.n	8008e3c <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008e38:	2300      	movs	r3, #0
 8008e3a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8008e3c:	e032      	b.n	8008ea4 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	9300      	str	r3, [sp, #0]
 8008e42:	697b      	ldr	r3, [r7, #20]
 8008e44:	2200      	movs	r2, #0
 8008e46:	2120      	movs	r1, #32
 8008e48:	68f8      	ldr	r0, [r7, #12]
 8008e4a:	f000 fe6c 	bl	8009b26 <UART_WaitOnFlagUntilTimeout>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d001      	beq.n	8008e58 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8008e54:	2303      	movs	r3, #3
 8008e56:	e032      	b.n	8008ebe <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8008e58:	69fb      	ldr	r3, [r7, #28]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d10c      	bne.n	8008e78 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e64:	b29a      	uxth	r2, r3
 8008e66:	8a7b      	ldrh	r3, [r7, #18]
 8008e68:	4013      	ands	r3, r2
 8008e6a:	b29a      	uxth	r2, r3
 8008e6c:	69bb      	ldr	r3, [r7, #24]
 8008e6e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008e70:	69bb      	ldr	r3, [r7, #24]
 8008e72:	3302      	adds	r3, #2
 8008e74:	61bb      	str	r3, [r7, #24]
 8008e76:	e00c      	b.n	8008e92 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e7e:	b2da      	uxtb	r2, r3
 8008e80:	8a7b      	ldrh	r3, [r7, #18]
 8008e82:	b2db      	uxtb	r3, r3
 8008e84:	4013      	ands	r3, r2
 8008e86:	b2da      	uxtb	r2, r3
 8008e88:	69fb      	ldr	r3, [r7, #28]
 8008e8a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8008e8c:	69fb      	ldr	r3, [r7, #28]
 8008e8e:	3301      	adds	r3, #1
 8008e90:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008e98:	b29b      	uxth	r3, r3
 8008e9a:	3b01      	subs	r3, #1
 8008e9c:	b29a      	uxth	r2, r3
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008eaa:	b29b      	uxth	r3, r3
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d1c6      	bne.n	8008e3e <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	2220      	movs	r2, #32
 8008eb4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8008eb8:	2300      	movs	r3, #0
 8008eba:	e000      	b.n	8008ebe <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8008ebc:	2302      	movs	r3, #2
  }
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	3720      	adds	r7, #32
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}
	...

08008ec8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b0ba      	sub	sp, #232	@ 0xe8
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	69db      	ldr	r3, [r3, #28]
 8008ed6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	689b      	ldr	r3, [r3, #8]
 8008eea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008eee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008ef2:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008ef6:	4013      	ands	r3, r2
 8008ef8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008efc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d115      	bne.n	8008f30 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008f04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f08:	f003 0320 	and.w	r3, r3, #32
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d00f      	beq.n	8008f30 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008f10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f14:	f003 0320 	and.w	r3, r3, #32
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d009      	beq.n	8008f30 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	f000 8297 	beq.w	8009454 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	4798      	blx	r3
      }
      return;
 8008f2e:	e291      	b.n	8009454 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008f30:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	f000 8117 	beq.w	8009168 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008f3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008f3e:	f003 0301 	and.w	r3, r3, #1
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d106      	bne.n	8008f54 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008f46:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008f4a:	4b85      	ldr	r3, [pc, #532]	@ (8009160 <HAL_UART_IRQHandler+0x298>)
 8008f4c:	4013      	ands	r3, r2
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	f000 810a 	beq.w	8009168 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008f54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f58:	f003 0301 	and.w	r3, r3, #1
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d011      	beq.n	8008f84 <HAL_UART_IRQHandler+0xbc>
 8008f60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d00b      	beq.n	8008f84 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	2201      	movs	r2, #1
 8008f72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008f7a:	f043 0201 	orr.w	r2, r3, #1
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008f84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f88:	f003 0302 	and.w	r3, r3, #2
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d011      	beq.n	8008fb4 <HAL_UART_IRQHandler+0xec>
 8008f90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008f94:	f003 0301 	and.w	r3, r3, #1
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d00b      	beq.n	8008fb4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	2202      	movs	r2, #2
 8008fa2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008faa:	f043 0204 	orr.w	r2, r3, #4
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008fb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008fb8:	f003 0304 	and.w	r3, r3, #4
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d011      	beq.n	8008fe4 <HAL_UART_IRQHandler+0x11c>
 8008fc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008fc4:	f003 0301 	and.w	r3, r3, #1
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d00b      	beq.n	8008fe4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	2204      	movs	r2, #4
 8008fd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008fda:	f043 0202 	orr.w	r2, r3, #2
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008fe4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008fe8:	f003 0308 	and.w	r3, r3, #8
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d017      	beq.n	8009020 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008ff0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ff4:	f003 0320 	and.w	r3, r3, #32
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d105      	bne.n	8009008 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008ffc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009000:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009004:	2b00      	cmp	r3, #0
 8009006:	d00b      	beq.n	8009020 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	2208      	movs	r2, #8
 800900e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009016:	f043 0208 	orr.w	r2, r3, #8
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009020:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009024:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009028:	2b00      	cmp	r3, #0
 800902a:	d012      	beq.n	8009052 <HAL_UART_IRQHandler+0x18a>
 800902c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009030:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009034:	2b00      	cmp	r3, #0
 8009036:	d00c      	beq.n	8009052 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009040:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009048:	f043 0220 	orr.w	r2, r3, #32
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009058:	2b00      	cmp	r3, #0
 800905a:	f000 81fd 	beq.w	8009458 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800905e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009062:	f003 0320 	and.w	r3, r3, #32
 8009066:	2b00      	cmp	r3, #0
 8009068:	d00d      	beq.n	8009086 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800906a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800906e:	f003 0320 	and.w	r3, r3, #32
 8009072:	2b00      	cmp	r3, #0
 8009074:	d007      	beq.n	8009086 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800907a:	2b00      	cmp	r3, #0
 800907c:	d003      	beq.n	8009086 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800908c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	689b      	ldr	r3, [r3, #8]
 8009096:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800909a:	2b40      	cmp	r3, #64	@ 0x40
 800909c:	d005      	beq.n	80090aa <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800909e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80090a2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d04f      	beq.n	800914a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f000 fe01 	bl	8009cb2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	689b      	ldr	r3, [r3, #8]
 80090b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090ba:	2b40      	cmp	r3, #64	@ 0x40
 80090bc:	d141      	bne.n	8009142 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	3308      	adds	r3, #8
 80090c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80090cc:	e853 3f00 	ldrex	r3, [r3]
 80090d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80090d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80090d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80090dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	3308      	adds	r3, #8
 80090e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80090ea:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80090ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80090f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80090fa:	e841 2300 	strex	r3, r2, [r1]
 80090fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009102:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009106:	2b00      	cmp	r3, #0
 8009108:	d1d9      	bne.n	80090be <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800910e:	2b00      	cmp	r3, #0
 8009110:	d013      	beq.n	800913a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009116:	4a13      	ldr	r2, [pc, #76]	@ (8009164 <HAL_UART_IRQHandler+0x29c>)
 8009118:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800911e:	4618      	mov	r0, r3
 8009120:	f7fb fdda 	bl	8004cd8 <HAL_DMA_Abort_IT>
 8009124:	4603      	mov	r3, r0
 8009126:	2b00      	cmp	r3, #0
 8009128:	d017      	beq.n	800915a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800912e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009130:	687a      	ldr	r2, [r7, #4]
 8009132:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8009134:	4610      	mov	r0, r2
 8009136:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009138:	e00f      	b.n	800915a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f000 f9a0 	bl	8009480 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009140:	e00b      	b.n	800915a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f000 f99c 	bl	8009480 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009148:	e007      	b.n	800915a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f000 f998 	bl	8009480 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2200      	movs	r2, #0
 8009154:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8009158:	e17e      	b.n	8009458 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800915a:	bf00      	nop
    return;
 800915c:	e17c      	b.n	8009458 <HAL_UART_IRQHandler+0x590>
 800915e:	bf00      	nop
 8009160:	04000120 	.word	0x04000120
 8009164:	08009d7b 	.word	0x08009d7b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800916c:	2b01      	cmp	r3, #1
 800916e:	f040 814c 	bne.w	800940a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009172:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009176:	f003 0310 	and.w	r3, r3, #16
 800917a:	2b00      	cmp	r3, #0
 800917c:	f000 8145 	beq.w	800940a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009180:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009184:	f003 0310 	and.w	r3, r3, #16
 8009188:	2b00      	cmp	r3, #0
 800918a:	f000 813e 	beq.w	800940a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	2210      	movs	r2, #16
 8009194:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	689b      	ldr	r3, [r3, #8]
 800919c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091a0:	2b40      	cmp	r3, #64	@ 0x40
 80091a2:	f040 80b6 	bne.w	8009312 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	685b      	ldr	r3, [r3, #4]
 80091ae:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80091b2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	f000 8150 	beq.w	800945c <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80091c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80091c6:	429a      	cmp	r2, r3
 80091c8:	f080 8148 	bcs.w	800945c <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80091d2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80091da:	69db      	ldr	r3, [r3, #28]
 80091dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80091e0:	f000 8086 	beq.w	80092f0 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80091f0:	e853 3f00 	ldrex	r3, [r3]
 80091f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80091f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80091fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009200:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	461a      	mov	r2, r3
 800920a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800920e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009212:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009216:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800921a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800921e:	e841 2300 	strex	r3, r2, [r1]
 8009222:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009226:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800922a:	2b00      	cmp	r3, #0
 800922c:	d1da      	bne.n	80091e4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	3308      	adds	r3, #8
 8009234:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009236:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009238:	e853 3f00 	ldrex	r3, [r3]
 800923c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800923e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009240:	f023 0301 	bic.w	r3, r3, #1
 8009244:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	3308      	adds	r3, #8
 800924e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009252:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009256:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009258:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800925a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800925e:	e841 2300 	strex	r3, r2, [r1]
 8009262:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009264:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009266:	2b00      	cmp	r3, #0
 8009268:	d1e1      	bne.n	800922e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	3308      	adds	r3, #8
 8009270:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009272:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009274:	e853 3f00 	ldrex	r3, [r3]
 8009278:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800927a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800927c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009280:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	3308      	adds	r3, #8
 800928a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800928e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009290:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009292:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009294:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009296:	e841 2300 	strex	r3, r2, [r1]
 800929a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800929c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d1e3      	bne.n	800926a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2220      	movs	r2, #32
 80092a6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2200      	movs	r2, #0
 80092ae:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80092b8:	e853 3f00 	ldrex	r3, [r3]
 80092bc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80092be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80092c0:	f023 0310 	bic.w	r3, r3, #16
 80092c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	461a      	mov	r2, r3
 80092ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80092d2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80092d4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092d6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80092d8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80092da:	e841 2300 	strex	r3, r2, [r1]
 80092de:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80092e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d1e4      	bne.n	80092b0 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80092ea:	4618      	mov	r0, r3
 80092ec:	f7fb fc84 	bl	8004bf8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2202      	movs	r2, #2
 80092f4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009302:	b29b      	uxth	r3, r3
 8009304:	1ad3      	subs	r3, r2, r3
 8009306:	b29b      	uxth	r3, r3
 8009308:	4619      	mov	r1, r3
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f000 f8c2 	bl	8009494 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009310:	e0a4      	b.n	800945c <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800931e:	b29b      	uxth	r3, r3
 8009320:	1ad3      	subs	r3, r2, r3
 8009322:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800932c:	b29b      	uxth	r3, r3
 800932e:	2b00      	cmp	r3, #0
 8009330:	f000 8096 	beq.w	8009460 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8009334:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009338:	2b00      	cmp	r3, #0
 800933a:	f000 8091 	beq.w	8009460 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009346:	e853 3f00 	ldrex	r3, [r3]
 800934a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800934c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800934e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009352:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	461a      	mov	r2, r3
 800935c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009360:	647b      	str	r3, [r7, #68]	@ 0x44
 8009362:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009364:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009366:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009368:	e841 2300 	strex	r3, r2, [r1]
 800936c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800936e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009370:	2b00      	cmp	r3, #0
 8009372:	d1e4      	bne.n	800933e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	3308      	adds	r3, #8
 800937a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800937c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800937e:	e853 3f00 	ldrex	r3, [r3]
 8009382:	623b      	str	r3, [r7, #32]
   return(result);
 8009384:	6a3b      	ldr	r3, [r7, #32]
 8009386:	f023 0301 	bic.w	r3, r3, #1
 800938a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	3308      	adds	r3, #8
 8009394:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009398:	633a      	str	r2, [r7, #48]	@ 0x30
 800939a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800939c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800939e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093a0:	e841 2300 	strex	r3, r2, [r1]
 80093a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80093a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d1e3      	bne.n	8009374 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2220      	movs	r2, #32
 80093b0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2200      	movs	r2, #0
 80093b8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2200      	movs	r2, #0
 80093be:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093c6:	693b      	ldr	r3, [r7, #16]
 80093c8:	e853 3f00 	ldrex	r3, [r3]
 80093cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	f023 0310 	bic.w	r3, r3, #16
 80093d4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	461a      	mov	r2, r3
 80093de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80093e2:	61fb      	str	r3, [r7, #28]
 80093e4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093e6:	69b9      	ldr	r1, [r7, #24]
 80093e8:	69fa      	ldr	r2, [r7, #28]
 80093ea:	e841 2300 	strex	r3, r2, [r1]
 80093ee:	617b      	str	r3, [r7, #20]
   return(result);
 80093f0:	697b      	ldr	r3, [r7, #20]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d1e4      	bne.n	80093c0 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2202      	movs	r2, #2
 80093fa:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80093fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009400:	4619      	mov	r1, r3
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f000 f846 	bl	8009494 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009408:	e02a      	b.n	8009460 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800940a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800940e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009412:	2b00      	cmp	r3, #0
 8009414:	d00e      	beq.n	8009434 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009416:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800941a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800941e:	2b00      	cmp	r3, #0
 8009420:	d008      	beq.n	8009434 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009426:	2b00      	cmp	r3, #0
 8009428:	d01c      	beq.n	8009464 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	4798      	blx	r3
    }
    return;
 8009432:	e017      	b.n	8009464 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009434:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009438:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800943c:	2b00      	cmp	r3, #0
 800943e:	d012      	beq.n	8009466 <HAL_UART_IRQHandler+0x59e>
 8009440:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009444:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009448:	2b00      	cmp	r3, #0
 800944a:	d00c      	beq.n	8009466 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f000 fcaa 	bl	8009da6 <UART_EndTransmit_IT>
    return;
 8009452:	e008      	b.n	8009466 <HAL_UART_IRQHandler+0x59e>
      return;
 8009454:	bf00      	nop
 8009456:	e006      	b.n	8009466 <HAL_UART_IRQHandler+0x59e>
    return;
 8009458:	bf00      	nop
 800945a:	e004      	b.n	8009466 <HAL_UART_IRQHandler+0x59e>
      return;
 800945c:	bf00      	nop
 800945e:	e002      	b.n	8009466 <HAL_UART_IRQHandler+0x59e>
      return;
 8009460:	bf00      	nop
 8009462:	e000      	b.n	8009466 <HAL_UART_IRQHandler+0x59e>
    return;
 8009464:	bf00      	nop
  }

}
 8009466:	37e8      	adds	r7, #232	@ 0xe8
 8009468:	46bd      	mov	sp, r7
 800946a:	bd80      	pop	{r7, pc}

0800946c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800946c:	b480      	push	{r7}
 800946e:	b083      	sub	sp, #12
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009474:	bf00      	nop
 8009476:	370c      	adds	r7, #12
 8009478:	46bd      	mov	sp, r7
 800947a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947e:	4770      	bx	lr

08009480 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009480:	b480      	push	{r7}
 8009482:	b083      	sub	sp, #12
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009488:	bf00      	nop
 800948a:	370c      	adds	r7, #12
 800948c:	46bd      	mov	sp, r7
 800948e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009492:	4770      	bx	lr

08009494 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009494:	b480      	push	{r7}
 8009496:	b083      	sub	sp, #12
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
 800949c:	460b      	mov	r3, r1
 800949e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80094a0:	bf00      	nop
 80094a2:	370c      	adds	r7, #12
 80094a4:	46bd      	mov	sp, r7
 80094a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094aa:	4770      	bx	lr

080094ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b088      	sub	sp, #32
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80094b4:	2300      	movs	r3, #0
 80094b6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	689a      	ldr	r2, [r3, #8]
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	691b      	ldr	r3, [r3, #16]
 80094c0:	431a      	orrs	r2, r3
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	695b      	ldr	r3, [r3, #20]
 80094c6:	431a      	orrs	r2, r3
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	69db      	ldr	r3, [r3, #28]
 80094cc:	4313      	orrs	r3, r2
 80094ce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	681a      	ldr	r2, [r3, #0]
 80094d6:	4ba6      	ldr	r3, [pc, #664]	@ (8009770 <UART_SetConfig+0x2c4>)
 80094d8:	4013      	ands	r3, r2
 80094da:	687a      	ldr	r2, [r7, #4]
 80094dc:	6812      	ldr	r2, [r2, #0]
 80094de:	6979      	ldr	r1, [r7, #20]
 80094e0:	430b      	orrs	r3, r1
 80094e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	685b      	ldr	r3, [r3, #4]
 80094ea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	68da      	ldr	r2, [r3, #12]
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	430a      	orrs	r2, r1
 80094f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	699b      	ldr	r3, [r3, #24]
 80094fe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6a1b      	ldr	r3, [r3, #32]
 8009504:	697a      	ldr	r2, [r7, #20]
 8009506:	4313      	orrs	r3, r2
 8009508:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	689b      	ldr	r3, [r3, #8]
 8009510:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	697a      	ldr	r2, [r7, #20]
 800951a:	430a      	orrs	r2, r1
 800951c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	4a94      	ldr	r2, [pc, #592]	@ (8009774 <UART_SetConfig+0x2c8>)
 8009524:	4293      	cmp	r3, r2
 8009526:	d120      	bne.n	800956a <UART_SetConfig+0xbe>
 8009528:	4b93      	ldr	r3, [pc, #588]	@ (8009778 <UART_SetConfig+0x2cc>)
 800952a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800952e:	f003 0303 	and.w	r3, r3, #3
 8009532:	2b03      	cmp	r3, #3
 8009534:	d816      	bhi.n	8009564 <UART_SetConfig+0xb8>
 8009536:	a201      	add	r2, pc, #4	@ (adr r2, 800953c <UART_SetConfig+0x90>)
 8009538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800953c:	0800954d 	.word	0x0800954d
 8009540:	08009559 	.word	0x08009559
 8009544:	08009553 	.word	0x08009553
 8009548:	0800955f 	.word	0x0800955f
 800954c:	2301      	movs	r3, #1
 800954e:	77fb      	strb	r3, [r7, #31]
 8009550:	e150      	b.n	80097f4 <UART_SetConfig+0x348>
 8009552:	2302      	movs	r3, #2
 8009554:	77fb      	strb	r3, [r7, #31]
 8009556:	e14d      	b.n	80097f4 <UART_SetConfig+0x348>
 8009558:	2304      	movs	r3, #4
 800955a:	77fb      	strb	r3, [r7, #31]
 800955c:	e14a      	b.n	80097f4 <UART_SetConfig+0x348>
 800955e:	2308      	movs	r3, #8
 8009560:	77fb      	strb	r3, [r7, #31]
 8009562:	e147      	b.n	80097f4 <UART_SetConfig+0x348>
 8009564:	2310      	movs	r3, #16
 8009566:	77fb      	strb	r3, [r7, #31]
 8009568:	e144      	b.n	80097f4 <UART_SetConfig+0x348>
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	4a83      	ldr	r2, [pc, #524]	@ (800977c <UART_SetConfig+0x2d0>)
 8009570:	4293      	cmp	r3, r2
 8009572:	d132      	bne.n	80095da <UART_SetConfig+0x12e>
 8009574:	4b80      	ldr	r3, [pc, #512]	@ (8009778 <UART_SetConfig+0x2cc>)
 8009576:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800957a:	f003 030c 	and.w	r3, r3, #12
 800957e:	2b0c      	cmp	r3, #12
 8009580:	d828      	bhi.n	80095d4 <UART_SetConfig+0x128>
 8009582:	a201      	add	r2, pc, #4	@ (adr r2, 8009588 <UART_SetConfig+0xdc>)
 8009584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009588:	080095bd 	.word	0x080095bd
 800958c:	080095d5 	.word	0x080095d5
 8009590:	080095d5 	.word	0x080095d5
 8009594:	080095d5 	.word	0x080095d5
 8009598:	080095c9 	.word	0x080095c9
 800959c:	080095d5 	.word	0x080095d5
 80095a0:	080095d5 	.word	0x080095d5
 80095a4:	080095d5 	.word	0x080095d5
 80095a8:	080095c3 	.word	0x080095c3
 80095ac:	080095d5 	.word	0x080095d5
 80095b0:	080095d5 	.word	0x080095d5
 80095b4:	080095d5 	.word	0x080095d5
 80095b8:	080095cf 	.word	0x080095cf
 80095bc:	2300      	movs	r3, #0
 80095be:	77fb      	strb	r3, [r7, #31]
 80095c0:	e118      	b.n	80097f4 <UART_SetConfig+0x348>
 80095c2:	2302      	movs	r3, #2
 80095c4:	77fb      	strb	r3, [r7, #31]
 80095c6:	e115      	b.n	80097f4 <UART_SetConfig+0x348>
 80095c8:	2304      	movs	r3, #4
 80095ca:	77fb      	strb	r3, [r7, #31]
 80095cc:	e112      	b.n	80097f4 <UART_SetConfig+0x348>
 80095ce:	2308      	movs	r3, #8
 80095d0:	77fb      	strb	r3, [r7, #31]
 80095d2:	e10f      	b.n	80097f4 <UART_SetConfig+0x348>
 80095d4:	2310      	movs	r3, #16
 80095d6:	77fb      	strb	r3, [r7, #31]
 80095d8:	e10c      	b.n	80097f4 <UART_SetConfig+0x348>
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	4a68      	ldr	r2, [pc, #416]	@ (8009780 <UART_SetConfig+0x2d4>)
 80095e0:	4293      	cmp	r3, r2
 80095e2:	d120      	bne.n	8009626 <UART_SetConfig+0x17a>
 80095e4:	4b64      	ldr	r3, [pc, #400]	@ (8009778 <UART_SetConfig+0x2cc>)
 80095e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095ea:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80095ee:	2b30      	cmp	r3, #48	@ 0x30
 80095f0:	d013      	beq.n	800961a <UART_SetConfig+0x16e>
 80095f2:	2b30      	cmp	r3, #48	@ 0x30
 80095f4:	d814      	bhi.n	8009620 <UART_SetConfig+0x174>
 80095f6:	2b20      	cmp	r3, #32
 80095f8:	d009      	beq.n	800960e <UART_SetConfig+0x162>
 80095fa:	2b20      	cmp	r3, #32
 80095fc:	d810      	bhi.n	8009620 <UART_SetConfig+0x174>
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d002      	beq.n	8009608 <UART_SetConfig+0x15c>
 8009602:	2b10      	cmp	r3, #16
 8009604:	d006      	beq.n	8009614 <UART_SetConfig+0x168>
 8009606:	e00b      	b.n	8009620 <UART_SetConfig+0x174>
 8009608:	2300      	movs	r3, #0
 800960a:	77fb      	strb	r3, [r7, #31]
 800960c:	e0f2      	b.n	80097f4 <UART_SetConfig+0x348>
 800960e:	2302      	movs	r3, #2
 8009610:	77fb      	strb	r3, [r7, #31]
 8009612:	e0ef      	b.n	80097f4 <UART_SetConfig+0x348>
 8009614:	2304      	movs	r3, #4
 8009616:	77fb      	strb	r3, [r7, #31]
 8009618:	e0ec      	b.n	80097f4 <UART_SetConfig+0x348>
 800961a:	2308      	movs	r3, #8
 800961c:	77fb      	strb	r3, [r7, #31]
 800961e:	e0e9      	b.n	80097f4 <UART_SetConfig+0x348>
 8009620:	2310      	movs	r3, #16
 8009622:	77fb      	strb	r3, [r7, #31]
 8009624:	e0e6      	b.n	80097f4 <UART_SetConfig+0x348>
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	4a56      	ldr	r2, [pc, #344]	@ (8009784 <UART_SetConfig+0x2d8>)
 800962c:	4293      	cmp	r3, r2
 800962e:	d120      	bne.n	8009672 <UART_SetConfig+0x1c6>
 8009630:	4b51      	ldr	r3, [pc, #324]	@ (8009778 <UART_SetConfig+0x2cc>)
 8009632:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009636:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800963a:	2bc0      	cmp	r3, #192	@ 0xc0
 800963c:	d013      	beq.n	8009666 <UART_SetConfig+0x1ba>
 800963e:	2bc0      	cmp	r3, #192	@ 0xc0
 8009640:	d814      	bhi.n	800966c <UART_SetConfig+0x1c0>
 8009642:	2b80      	cmp	r3, #128	@ 0x80
 8009644:	d009      	beq.n	800965a <UART_SetConfig+0x1ae>
 8009646:	2b80      	cmp	r3, #128	@ 0x80
 8009648:	d810      	bhi.n	800966c <UART_SetConfig+0x1c0>
 800964a:	2b00      	cmp	r3, #0
 800964c:	d002      	beq.n	8009654 <UART_SetConfig+0x1a8>
 800964e:	2b40      	cmp	r3, #64	@ 0x40
 8009650:	d006      	beq.n	8009660 <UART_SetConfig+0x1b4>
 8009652:	e00b      	b.n	800966c <UART_SetConfig+0x1c0>
 8009654:	2300      	movs	r3, #0
 8009656:	77fb      	strb	r3, [r7, #31]
 8009658:	e0cc      	b.n	80097f4 <UART_SetConfig+0x348>
 800965a:	2302      	movs	r3, #2
 800965c:	77fb      	strb	r3, [r7, #31]
 800965e:	e0c9      	b.n	80097f4 <UART_SetConfig+0x348>
 8009660:	2304      	movs	r3, #4
 8009662:	77fb      	strb	r3, [r7, #31]
 8009664:	e0c6      	b.n	80097f4 <UART_SetConfig+0x348>
 8009666:	2308      	movs	r3, #8
 8009668:	77fb      	strb	r3, [r7, #31]
 800966a:	e0c3      	b.n	80097f4 <UART_SetConfig+0x348>
 800966c:	2310      	movs	r3, #16
 800966e:	77fb      	strb	r3, [r7, #31]
 8009670:	e0c0      	b.n	80097f4 <UART_SetConfig+0x348>
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	4a44      	ldr	r2, [pc, #272]	@ (8009788 <UART_SetConfig+0x2dc>)
 8009678:	4293      	cmp	r3, r2
 800967a:	d125      	bne.n	80096c8 <UART_SetConfig+0x21c>
 800967c:	4b3e      	ldr	r3, [pc, #248]	@ (8009778 <UART_SetConfig+0x2cc>)
 800967e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009682:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009686:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800968a:	d017      	beq.n	80096bc <UART_SetConfig+0x210>
 800968c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009690:	d817      	bhi.n	80096c2 <UART_SetConfig+0x216>
 8009692:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009696:	d00b      	beq.n	80096b0 <UART_SetConfig+0x204>
 8009698:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800969c:	d811      	bhi.n	80096c2 <UART_SetConfig+0x216>
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d003      	beq.n	80096aa <UART_SetConfig+0x1fe>
 80096a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80096a6:	d006      	beq.n	80096b6 <UART_SetConfig+0x20a>
 80096a8:	e00b      	b.n	80096c2 <UART_SetConfig+0x216>
 80096aa:	2300      	movs	r3, #0
 80096ac:	77fb      	strb	r3, [r7, #31]
 80096ae:	e0a1      	b.n	80097f4 <UART_SetConfig+0x348>
 80096b0:	2302      	movs	r3, #2
 80096b2:	77fb      	strb	r3, [r7, #31]
 80096b4:	e09e      	b.n	80097f4 <UART_SetConfig+0x348>
 80096b6:	2304      	movs	r3, #4
 80096b8:	77fb      	strb	r3, [r7, #31]
 80096ba:	e09b      	b.n	80097f4 <UART_SetConfig+0x348>
 80096bc:	2308      	movs	r3, #8
 80096be:	77fb      	strb	r3, [r7, #31]
 80096c0:	e098      	b.n	80097f4 <UART_SetConfig+0x348>
 80096c2:	2310      	movs	r3, #16
 80096c4:	77fb      	strb	r3, [r7, #31]
 80096c6:	e095      	b.n	80097f4 <UART_SetConfig+0x348>
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	4a2f      	ldr	r2, [pc, #188]	@ (800978c <UART_SetConfig+0x2e0>)
 80096ce:	4293      	cmp	r3, r2
 80096d0:	d125      	bne.n	800971e <UART_SetConfig+0x272>
 80096d2:	4b29      	ldr	r3, [pc, #164]	@ (8009778 <UART_SetConfig+0x2cc>)
 80096d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096d8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80096dc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80096e0:	d017      	beq.n	8009712 <UART_SetConfig+0x266>
 80096e2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80096e6:	d817      	bhi.n	8009718 <UART_SetConfig+0x26c>
 80096e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80096ec:	d00b      	beq.n	8009706 <UART_SetConfig+0x25a>
 80096ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80096f2:	d811      	bhi.n	8009718 <UART_SetConfig+0x26c>
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d003      	beq.n	8009700 <UART_SetConfig+0x254>
 80096f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80096fc:	d006      	beq.n	800970c <UART_SetConfig+0x260>
 80096fe:	e00b      	b.n	8009718 <UART_SetConfig+0x26c>
 8009700:	2301      	movs	r3, #1
 8009702:	77fb      	strb	r3, [r7, #31]
 8009704:	e076      	b.n	80097f4 <UART_SetConfig+0x348>
 8009706:	2302      	movs	r3, #2
 8009708:	77fb      	strb	r3, [r7, #31]
 800970a:	e073      	b.n	80097f4 <UART_SetConfig+0x348>
 800970c:	2304      	movs	r3, #4
 800970e:	77fb      	strb	r3, [r7, #31]
 8009710:	e070      	b.n	80097f4 <UART_SetConfig+0x348>
 8009712:	2308      	movs	r3, #8
 8009714:	77fb      	strb	r3, [r7, #31]
 8009716:	e06d      	b.n	80097f4 <UART_SetConfig+0x348>
 8009718:	2310      	movs	r3, #16
 800971a:	77fb      	strb	r3, [r7, #31]
 800971c:	e06a      	b.n	80097f4 <UART_SetConfig+0x348>
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	4a1b      	ldr	r2, [pc, #108]	@ (8009790 <UART_SetConfig+0x2e4>)
 8009724:	4293      	cmp	r3, r2
 8009726:	d138      	bne.n	800979a <UART_SetConfig+0x2ee>
 8009728:	4b13      	ldr	r3, [pc, #76]	@ (8009778 <UART_SetConfig+0x2cc>)
 800972a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800972e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8009732:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009736:	d017      	beq.n	8009768 <UART_SetConfig+0x2bc>
 8009738:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800973c:	d82a      	bhi.n	8009794 <UART_SetConfig+0x2e8>
 800973e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009742:	d00b      	beq.n	800975c <UART_SetConfig+0x2b0>
 8009744:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009748:	d824      	bhi.n	8009794 <UART_SetConfig+0x2e8>
 800974a:	2b00      	cmp	r3, #0
 800974c:	d003      	beq.n	8009756 <UART_SetConfig+0x2aa>
 800974e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009752:	d006      	beq.n	8009762 <UART_SetConfig+0x2b6>
 8009754:	e01e      	b.n	8009794 <UART_SetConfig+0x2e8>
 8009756:	2300      	movs	r3, #0
 8009758:	77fb      	strb	r3, [r7, #31]
 800975a:	e04b      	b.n	80097f4 <UART_SetConfig+0x348>
 800975c:	2302      	movs	r3, #2
 800975e:	77fb      	strb	r3, [r7, #31]
 8009760:	e048      	b.n	80097f4 <UART_SetConfig+0x348>
 8009762:	2304      	movs	r3, #4
 8009764:	77fb      	strb	r3, [r7, #31]
 8009766:	e045      	b.n	80097f4 <UART_SetConfig+0x348>
 8009768:	2308      	movs	r3, #8
 800976a:	77fb      	strb	r3, [r7, #31]
 800976c:	e042      	b.n	80097f4 <UART_SetConfig+0x348>
 800976e:	bf00      	nop
 8009770:	efff69f3 	.word	0xefff69f3
 8009774:	40011000 	.word	0x40011000
 8009778:	40023800 	.word	0x40023800
 800977c:	40004400 	.word	0x40004400
 8009780:	40004800 	.word	0x40004800
 8009784:	40004c00 	.word	0x40004c00
 8009788:	40005000 	.word	0x40005000
 800978c:	40011400 	.word	0x40011400
 8009790:	40007800 	.word	0x40007800
 8009794:	2310      	movs	r3, #16
 8009796:	77fb      	strb	r3, [r7, #31]
 8009798:	e02c      	b.n	80097f4 <UART_SetConfig+0x348>
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	4a72      	ldr	r2, [pc, #456]	@ (8009968 <UART_SetConfig+0x4bc>)
 80097a0:	4293      	cmp	r3, r2
 80097a2:	d125      	bne.n	80097f0 <UART_SetConfig+0x344>
 80097a4:	4b71      	ldr	r3, [pc, #452]	@ (800996c <UART_SetConfig+0x4c0>)
 80097a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097aa:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80097ae:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80097b2:	d017      	beq.n	80097e4 <UART_SetConfig+0x338>
 80097b4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80097b8:	d817      	bhi.n	80097ea <UART_SetConfig+0x33e>
 80097ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80097be:	d00b      	beq.n	80097d8 <UART_SetConfig+0x32c>
 80097c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80097c4:	d811      	bhi.n	80097ea <UART_SetConfig+0x33e>
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d003      	beq.n	80097d2 <UART_SetConfig+0x326>
 80097ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80097ce:	d006      	beq.n	80097de <UART_SetConfig+0x332>
 80097d0:	e00b      	b.n	80097ea <UART_SetConfig+0x33e>
 80097d2:	2300      	movs	r3, #0
 80097d4:	77fb      	strb	r3, [r7, #31]
 80097d6:	e00d      	b.n	80097f4 <UART_SetConfig+0x348>
 80097d8:	2302      	movs	r3, #2
 80097da:	77fb      	strb	r3, [r7, #31]
 80097dc:	e00a      	b.n	80097f4 <UART_SetConfig+0x348>
 80097de:	2304      	movs	r3, #4
 80097e0:	77fb      	strb	r3, [r7, #31]
 80097e2:	e007      	b.n	80097f4 <UART_SetConfig+0x348>
 80097e4:	2308      	movs	r3, #8
 80097e6:	77fb      	strb	r3, [r7, #31]
 80097e8:	e004      	b.n	80097f4 <UART_SetConfig+0x348>
 80097ea:	2310      	movs	r3, #16
 80097ec:	77fb      	strb	r3, [r7, #31]
 80097ee:	e001      	b.n	80097f4 <UART_SetConfig+0x348>
 80097f0:	2310      	movs	r3, #16
 80097f2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	69db      	ldr	r3, [r3, #28]
 80097f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80097fc:	d15b      	bne.n	80098b6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80097fe:	7ffb      	ldrb	r3, [r7, #31]
 8009800:	2b08      	cmp	r3, #8
 8009802:	d828      	bhi.n	8009856 <UART_SetConfig+0x3aa>
 8009804:	a201      	add	r2, pc, #4	@ (adr r2, 800980c <UART_SetConfig+0x360>)
 8009806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800980a:	bf00      	nop
 800980c:	08009831 	.word	0x08009831
 8009810:	08009839 	.word	0x08009839
 8009814:	08009841 	.word	0x08009841
 8009818:	08009857 	.word	0x08009857
 800981c:	08009847 	.word	0x08009847
 8009820:	08009857 	.word	0x08009857
 8009824:	08009857 	.word	0x08009857
 8009828:	08009857 	.word	0x08009857
 800982c:	0800984f 	.word	0x0800984f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009830:	f7fd fc50 	bl	80070d4 <HAL_RCC_GetPCLK1Freq>
 8009834:	61b8      	str	r0, [r7, #24]
        break;
 8009836:	e013      	b.n	8009860 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009838:	f7fd fc60 	bl	80070fc <HAL_RCC_GetPCLK2Freq>
 800983c:	61b8      	str	r0, [r7, #24]
        break;
 800983e:	e00f      	b.n	8009860 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009840:	4b4b      	ldr	r3, [pc, #300]	@ (8009970 <UART_SetConfig+0x4c4>)
 8009842:	61bb      	str	r3, [r7, #24]
        break;
 8009844:	e00c      	b.n	8009860 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009846:	f7fd fb33 	bl	8006eb0 <HAL_RCC_GetSysClockFreq>
 800984a:	61b8      	str	r0, [r7, #24]
        break;
 800984c:	e008      	b.n	8009860 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800984e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009852:	61bb      	str	r3, [r7, #24]
        break;
 8009854:	e004      	b.n	8009860 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8009856:	2300      	movs	r3, #0
 8009858:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800985a:	2301      	movs	r3, #1
 800985c:	77bb      	strb	r3, [r7, #30]
        break;
 800985e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009860:	69bb      	ldr	r3, [r7, #24]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d074      	beq.n	8009950 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009866:	69bb      	ldr	r3, [r7, #24]
 8009868:	005a      	lsls	r2, r3, #1
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	685b      	ldr	r3, [r3, #4]
 800986e:	085b      	lsrs	r3, r3, #1
 8009870:	441a      	add	r2, r3
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	685b      	ldr	r3, [r3, #4]
 8009876:	fbb2 f3f3 	udiv	r3, r2, r3
 800987a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800987c:	693b      	ldr	r3, [r7, #16]
 800987e:	2b0f      	cmp	r3, #15
 8009880:	d916      	bls.n	80098b0 <UART_SetConfig+0x404>
 8009882:	693b      	ldr	r3, [r7, #16]
 8009884:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009888:	d212      	bcs.n	80098b0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800988a:	693b      	ldr	r3, [r7, #16]
 800988c:	b29b      	uxth	r3, r3
 800988e:	f023 030f 	bic.w	r3, r3, #15
 8009892:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009894:	693b      	ldr	r3, [r7, #16]
 8009896:	085b      	lsrs	r3, r3, #1
 8009898:	b29b      	uxth	r3, r3
 800989a:	f003 0307 	and.w	r3, r3, #7
 800989e:	b29a      	uxth	r2, r3
 80098a0:	89fb      	ldrh	r3, [r7, #14]
 80098a2:	4313      	orrs	r3, r2
 80098a4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	89fa      	ldrh	r2, [r7, #14]
 80098ac:	60da      	str	r2, [r3, #12]
 80098ae:	e04f      	b.n	8009950 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80098b0:	2301      	movs	r3, #1
 80098b2:	77bb      	strb	r3, [r7, #30]
 80098b4:	e04c      	b.n	8009950 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80098b6:	7ffb      	ldrb	r3, [r7, #31]
 80098b8:	2b08      	cmp	r3, #8
 80098ba:	d828      	bhi.n	800990e <UART_SetConfig+0x462>
 80098bc:	a201      	add	r2, pc, #4	@ (adr r2, 80098c4 <UART_SetConfig+0x418>)
 80098be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098c2:	bf00      	nop
 80098c4:	080098e9 	.word	0x080098e9
 80098c8:	080098f1 	.word	0x080098f1
 80098cc:	080098f9 	.word	0x080098f9
 80098d0:	0800990f 	.word	0x0800990f
 80098d4:	080098ff 	.word	0x080098ff
 80098d8:	0800990f 	.word	0x0800990f
 80098dc:	0800990f 	.word	0x0800990f
 80098e0:	0800990f 	.word	0x0800990f
 80098e4:	08009907 	.word	0x08009907
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80098e8:	f7fd fbf4 	bl	80070d4 <HAL_RCC_GetPCLK1Freq>
 80098ec:	61b8      	str	r0, [r7, #24]
        break;
 80098ee:	e013      	b.n	8009918 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80098f0:	f7fd fc04 	bl	80070fc <HAL_RCC_GetPCLK2Freq>
 80098f4:	61b8      	str	r0, [r7, #24]
        break;
 80098f6:	e00f      	b.n	8009918 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80098f8:	4b1d      	ldr	r3, [pc, #116]	@ (8009970 <UART_SetConfig+0x4c4>)
 80098fa:	61bb      	str	r3, [r7, #24]
        break;
 80098fc:	e00c      	b.n	8009918 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80098fe:	f7fd fad7 	bl	8006eb0 <HAL_RCC_GetSysClockFreq>
 8009902:	61b8      	str	r0, [r7, #24]
        break;
 8009904:	e008      	b.n	8009918 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009906:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800990a:	61bb      	str	r3, [r7, #24]
        break;
 800990c:	e004      	b.n	8009918 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800990e:	2300      	movs	r3, #0
 8009910:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009912:	2301      	movs	r3, #1
 8009914:	77bb      	strb	r3, [r7, #30]
        break;
 8009916:	bf00      	nop
    }

    if (pclk != 0U)
 8009918:	69bb      	ldr	r3, [r7, #24]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d018      	beq.n	8009950 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	685b      	ldr	r3, [r3, #4]
 8009922:	085a      	lsrs	r2, r3, #1
 8009924:	69bb      	ldr	r3, [r7, #24]
 8009926:	441a      	add	r2, r3
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	685b      	ldr	r3, [r3, #4]
 800992c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009930:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009932:	693b      	ldr	r3, [r7, #16]
 8009934:	2b0f      	cmp	r3, #15
 8009936:	d909      	bls.n	800994c <UART_SetConfig+0x4a0>
 8009938:	693b      	ldr	r3, [r7, #16]
 800993a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800993e:	d205      	bcs.n	800994c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009940:	693b      	ldr	r3, [r7, #16]
 8009942:	b29a      	uxth	r2, r3
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	60da      	str	r2, [r3, #12]
 800994a:	e001      	b.n	8009950 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800994c:	2301      	movs	r3, #1
 800994e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2200      	movs	r2, #0
 8009954:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2200      	movs	r2, #0
 800995a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800995c:	7fbb      	ldrb	r3, [r7, #30]
}
 800995e:	4618      	mov	r0, r3
 8009960:	3720      	adds	r7, #32
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}
 8009966:	bf00      	nop
 8009968:	40007c00 	.word	0x40007c00
 800996c:	40023800 	.word	0x40023800
 8009970:	00f42400 	.word	0x00f42400

08009974 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009974:	b480      	push	{r7}
 8009976:	b083      	sub	sp, #12
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009980:	f003 0301 	and.w	r3, r3, #1
 8009984:	2b00      	cmp	r3, #0
 8009986:	d00a      	beq.n	800999e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	685b      	ldr	r3, [r3, #4]
 800998e:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	430a      	orrs	r2, r1
 800999c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099a2:	f003 0302 	and.w	r3, r3, #2
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d00a      	beq.n	80099c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	685b      	ldr	r3, [r3, #4]
 80099b0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	430a      	orrs	r2, r1
 80099be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099c4:	f003 0304 	and.w	r3, r3, #4
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d00a      	beq.n	80099e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	685b      	ldr	r3, [r3, #4]
 80099d2:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	430a      	orrs	r2, r1
 80099e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099e6:	f003 0308 	and.w	r3, r3, #8
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d00a      	beq.n	8009a04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	685b      	ldr	r3, [r3, #4]
 80099f4:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	430a      	orrs	r2, r1
 8009a02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a08:	f003 0310 	and.w	r3, r3, #16
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d00a      	beq.n	8009a26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	689b      	ldr	r3, [r3, #8]
 8009a16:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	430a      	orrs	r2, r1
 8009a24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a2a:	f003 0320 	and.w	r3, r3, #32
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d00a      	beq.n	8009a48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	689b      	ldr	r3, [r3, #8]
 8009a38:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	430a      	orrs	r2, r1
 8009a46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d01a      	beq.n	8009a8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	685b      	ldr	r3, [r3, #4]
 8009a5a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	430a      	orrs	r2, r1
 8009a68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009a72:	d10a      	bne.n	8009a8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	685b      	ldr	r3, [r3, #4]
 8009a7a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	430a      	orrs	r2, r1
 8009a88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d00a      	beq.n	8009aac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	685b      	ldr	r3, [r3, #4]
 8009a9c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	430a      	orrs	r2, r1
 8009aaa:	605a      	str	r2, [r3, #4]
  }
}
 8009aac:	bf00      	nop
 8009aae:	370c      	adds	r7, #12
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab6:	4770      	bx	lr

08009ab8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b086      	sub	sp, #24
 8009abc:	af02      	add	r7, sp, #8
 8009abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009ac8:	f7fa fe6a 	bl	80047a0 <HAL_GetTick>
 8009acc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f003 0308 	and.w	r3, r3, #8
 8009ad8:	2b08      	cmp	r3, #8
 8009ada:	d10e      	bne.n	8009afa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009adc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009ae0:	9300      	str	r3, [sp, #0]
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f000 f81b 	bl	8009b26 <UART_WaitOnFlagUntilTimeout>
 8009af0:	4603      	mov	r3, r0
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d001      	beq.n	8009afa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009af6:	2303      	movs	r3, #3
 8009af8:	e011      	b.n	8009b1e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2220      	movs	r2, #32
 8009afe:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2220      	movs	r2, #32
 8009b04:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2200      	movs	r2, #0
 8009b12:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2200      	movs	r2, #0
 8009b18:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8009b1c:	2300      	movs	r3, #0
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	3710      	adds	r7, #16
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}

08009b26 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009b26:	b580      	push	{r7, lr}
 8009b28:	b09c      	sub	sp, #112	@ 0x70
 8009b2a:	af00      	add	r7, sp, #0
 8009b2c:	60f8      	str	r0, [r7, #12]
 8009b2e:	60b9      	str	r1, [r7, #8]
 8009b30:	603b      	str	r3, [r7, #0]
 8009b32:	4613      	mov	r3, r2
 8009b34:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b36:	e0a7      	b.n	8009c88 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b38:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b3e:	f000 80a3 	beq.w	8009c88 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b42:	f7fa fe2d 	bl	80047a0 <HAL_GetTick>
 8009b46:	4602      	mov	r2, r0
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	1ad3      	subs	r3, r2, r3
 8009b4c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8009b4e:	429a      	cmp	r2, r3
 8009b50:	d302      	bcc.n	8009b58 <UART_WaitOnFlagUntilTimeout+0x32>
 8009b52:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d13f      	bne.n	8009bd8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009b60:	e853 3f00 	ldrex	r3, [r3]
 8009b64:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009b66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b68:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8009b6c:	667b      	str	r3, [r7, #100]	@ 0x64
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	461a      	mov	r2, r3
 8009b74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009b76:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009b78:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b7a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009b7c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009b7e:	e841 2300 	strex	r3, r2, [r1]
 8009b82:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8009b84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d1e6      	bne.n	8009b58 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	3308      	adds	r3, #8
 8009b90:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b94:	e853 3f00 	ldrex	r3, [r3]
 8009b98:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b9c:	f023 0301 	bic.w	r3, r3, #1
 8009ba0:	663b      	str	r3, [r7, #96]	@ 0x60
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	3308      	adds	r3, #8
 8009ba8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009baa:	64ba      	str	r2, [r7, #72]	@ 0x48
 8009bac:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bae:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009bb0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009bb2:	e841 2300 	strex	r3, r2, [r1]
 8009bb6:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009bb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d1e5      	bne.n	8009b8a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	2220      	movs	r2, #32
 8009bc2:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	2220      	movs	r2, #32
 8009bc8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	2200      	movs	r2, #0
 8009bd0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 8009bd4:	2303      	movs	r3, #3
 8009bd6:	e068      	b.n	8009caa <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f003 0304 	and.w	r3, r3, #4
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d050      	beq.n	8009c88 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	69db      	ldr	r3, [r3, #28]
 8009bec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009bf0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009bf4:	d148      	bne.n	8009c88 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009bfe:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c08:	e853 3f00 	ldrex	r3, [r3]
 8009c0c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c10:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8009c14:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	461a      	mov	r2, r3
 8009c1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009c1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c20:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c22:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009c24:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009c26:	e841 2300 	strex	r3, r2, [r1]
 8009c2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009c2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d1e6      	bne.n	8009c00 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	3308      	adds	r3, #8
 8009c38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c3a:	697b      	ldr	r3, [r7, #20]
 8009c3c:	e853 3f00 	ldrex	r3, [r3]
 8009c40:	613b      	str	r3, [r7, #16]
   return(result);
 8009c42:	693b      	ldr	r3, [r7, #16]
 8009c44:	f023 0301 	bic.w	r3, r3, #1
 8009c48:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	3308      	adds	r3, #8
 8009c50:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009c52:	623a      	str	r2, [r7, #32]
 8009c54:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c56:	69f9      	ldr	r1, [r7, #28]
 8009c58:	6a3a      	ldr	r2, [r7, #32]
 8009c5a:	e841 2300 	strex	r3, r2, [r1]
 8009c5e:	61bb      	str	r3, [r7, #24]
   return(result);
 8009c60:	69bb      	ldr	r3, [r7, #24]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d1e5      	bne.n	8009c32 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	2220      	movs	r2, #32
 8009c6a:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	2220      	movs	r2, #32
 8009c70:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	2220      	movs	r2, #32
 8009c78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	2200      	movs	r2, #0
 8009c80:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8009c84:	2303      	movs	r3, #3
 8009c86:	e010      	b.n	8009caa <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	69da      	ldr	r2, [r3, #28]
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	4013      	ands	r3, r2
 8009c92:	68ba      	ldr	r2, [r7, #8]
 8009c94:	429a      	cmp	r2, r3
 8009c96:	bf0c      	ite	eq
 8009c98:	2301      	moveq	r3, #1
 8009c9a:	2300      	movne	r3, #0
 8009c9c:	b2db      	uxtb	r3, r3
 8009c9e:	461a      	mov	r2, r3
 8009ca0:	79fb      	ldrb	r3, [r7, #7]
 8009ca2:	429a      	cmp	r2, r3
 8009ca4:	f43f af48 	beq.w	8009b38 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009ca8:	2300      	movs	r3, #0
}
 8009caa:	4618      	mov	r0, r3
 8009cac:	3770      	adds	r7, #112	@ 0x70
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}

08009cb2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009cb2:	b480      	push	{r7}
 8009cb4:	b095      	sub	sp, #84	@ 0x54
 8009cb6:	af00      	add	r7, sp, #0
 8009cb8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cc2:	e853 3f00 	ldrex	r3, [r3]
 8009cc6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009cc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009cce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	461a      	mov	r2, r3
 8009cd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009cd8:	643b      	str	r3, [r7, #64]	@ 0x40
 8009cda:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cdc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009cde:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009ce0:	e841 2300 	strex	r3, r2, [r1]
 8009ce4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009ce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d1e6      	bne.n	8009cba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	3308      	adds	r3, #8
 8009cf2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cf4:	6a3b      	ldr	r3, [r7, #32]
 8009cf6:	e853 3f00 	ldrex	r3, [r3]
 8009cfa:	61fb      	str	r3, [r7, #28]
   return(result);
 8009cfc:	69fb      	ldr	r3, [r7, #28]
 8009cfe:	f023 0301 	bic.w	r3, r3, #1
 8009d02:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	3308      	adds	r3, #8
 8009d0a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009d0c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009d0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d10:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009d12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009d14:	e841 2300 	strex	r3, r2, [r1]
 8009d18:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d1e5      	bne.n	8009cec <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009d24:	2b01      	cmp	r3, #1
 8009d26:	d118      	bne.n	8009d5a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	e853 3f00 	ldrex	r3, [r3]
 8009d34:	60bb      	str	r3, [r7, #8]
   return(result);
 8009d36:	68bb      	ldr	r3, [r7, #8]
 8009d38:	f023 0310 	bic.w	r3, r3, #16
 8009d3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	461a      	mov	r2, r3
 8009d44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009d46:	61bb      	str	r3, [r7, #24]
 8009d48:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d4a:	6979      	ldr	r1, [r7, #20]
 8009d4c:	69ba      	ldr	r2, [r7, #24]
 8009d4e:	e841 2300 	strex	r3, r2, [r1]
 8009d52:	613b      	str	r3, [r7, #16]
   return(result);
 8009d54:	693b      	ldr	r3, [r7, #16]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d1e6      	bne.n	8009d28 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2220      	movs	r2, #32
 8009d5e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2200      	movs	r2, #0
 8009d66:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8009d6e:	bf00      	nop
 8009d70:	3754      	adds	r7, #84	@ 0x54
 8009d72:	46bd      	mov	sp, r7
 8009d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d78:	4770      	bx	lr

08009d7a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009d7a:	b580      	push	{r7, lr}
 8009d7c:	b084      	sub	sp, #16
 8009d7e:	af00      	add	r7, sp, #0
 8009d80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d86:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	2200      	movs	r2, #0
 8009d94:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009d98:	68f8      	ldr	r0, [r7, #12]
 8009d9a:	f7ff fb71 	bl	8009480 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009d9e:	bf00      	nop
 8009da0:	3710      	adds	r7, #16
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}

08009da6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009da6:	b580      	push	{r7, lr}
 8009da8:	b088      	sub	sp, #32
 8009daa:	af00      	add	r7, sp, #0
 8009dac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	e853 3f00 	ldrex	r3, [r3]
 8009dba:	60bb      	str	r3, [r7, #8]
   return(result);
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009dc2:	61fb      	str	r3, [r7, #28]
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	461a      	mov	r2, r3
 8009dca:	69fb      	ldr	r3, [r7, #28]
 8009dcc:	61bb      	str	r3, [r7, #24]
 8009dce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dd0:	6979      	ldr	r1, [r7, #20]
 8009dd2:	69ba      	ldr	r2, [r7, #24]
 8009dd4:	e841 2300 	strex	r3, r2, [r1]
 8009dd8:	613b      	str	r3, [r7, #16]
   return(result);
 8009dda:	693b      	ldr	r3, [r7, #16]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d1e6      	bne.n	8009dae <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2220      	movs	r2, #32
 8009de4:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2200      	movs	r2, #0
 8009dea:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f7ff fb3d 	bl	800946c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009df2:	bf00      	nop
 8009df4:	3720      	adds	r7, #32
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bd80      	pop	{r7, pc}

08009dfa <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8009dfa:	b580      	push	{r7, lr}
 8009dfc:	b084      	sub	sp, #16
 8009dfe:	af00      	add	r7, sp, #0
 8009e00:	6078      	str	r0, [r7, #4]
 8009e02:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009e04:	2300      	movs	r3, #0
 8009e06:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8009e08:	6839      	ldr	r1, [r7, #0]
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	f001 fd18 	bl	800b840 <VL53L0X_get_offset_calibration_data_micro_meter>
 8009e10:	4603      	mov	r3, r0
 8009e12:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8009e14:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009e18:	4618      	mov	r0, r3
 8009e1a:	3710      	adds	r7, #16
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd80      	pop	{r7, pc}

08009e20 <VL53L0X_SetDeviceAddress>:

/* End Group PAL General Functions */

/* Group PAL Init Functions */
VL53L0X_Error VL53L0X_SetDeviceAddress(VL53L0X_DEV Dev, uint8_t DeviceAddress)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b084      	sub	sp, #16
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
 8009e28:	460b      	mov	r3, r1
 8009e2a:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_I2C_SLAVE_DEVICE_ADDRESS,
 8009e30:	78fb      	ldrb	r3, [r7, #3]
 8009e32:	085b      	lsrs	r3, r3, #1
 8009e34:	b2db      	uxtb	r3, r3
 8009e36:	461a      	mov	r2, r3
 8009e38:	218a      	movs	r1, #138	@ 0x8a
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f004 ff32 	bl	800eca4 <VL53L0X_WrByte>
 8009e40:	4603      	mov	r3, r0
 8009e42:	73fb      	strb	r3, [r7, #15]
		DeviceAddress / 2);

	LOG_FUNCTION_END(Status);
	return Status;
 8009e44:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009e48:	4618      	mov	r0, r3
 8009e4a:	3710      	adds	r7, #16
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	bd80      	pop	{r7, pc}

08009e50 <VL53L0X_DataInit>:

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8009e50:	b5b0      	push	{r4, r5, r7, lr}
 8009e52:	b096      	sub	sp, #88	@ 0x58
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009e58:	2300      	movs	r3, #0
 8009e5a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8009e5e:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d107      	bne.n	8009e76 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8009e66:	2200      	movs	r2, #0
 8009e68:	2188      	movs	r1, #136	@ 0x88
 8009e6a:	6878      	ldr	r0, [r7, #4]
 8009e6c:	f004 ff1a 	bl	800eca4 <VL53L0X_WrByte>
 8009e70:	4603      	mov	r3, r0
 8009e72:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2200      	movs	r2, #0
 8009e7a:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009e84:	f8a3 2152 	strh.w	r2, [r3, #338]	@ 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8009e8e:	f8a3 2154 	strh.w	r2, [r3, #340]	@ 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	4a9e      	ldr	r2, [pc, #632]	@ (800a110 <VL53L0X_DataInit+0x2c0>)
 8009e96:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	4a9d      	ldr	r2, [pc, #628]	@ (800a114 <VL53L0X_DataInit+0x2c4>)
 8009e9e:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8009ea8:	f107 0310 	add.w	r3, r7, #16
 8009eac:	4619      	mov	r1, r3
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	f000 fac0 	bl	800a434 <VL53L0X_GetDeviceParameters>
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8009eba:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d112      	bne.n	8009ee8 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	f103 0410 	add.w	r4, r3, #16
 8009ed0:	f107 0510 	add.w	r5, r7, #16
 8009ed4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009ed6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009ed8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009eda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009edc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009ede:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009ee0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8009ee4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2264      	movs	r2, #100	@ 0x64
 8009eec:	f8a3 2134 	strh.w	r2, [r3, #308]	@ 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f44f 7261 	mov.w	r2, #900	@ 0x384
 8009ef6:	f8a3 2136 	strh.w	r2, [r3, #310]	@ 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8009f00:	f8a3 2138 	strh.w	r2, [r3, #312]	@ 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8009f0a:	f8a3 213c 	strh.w	r2, [r3, #316]	@ 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2201      	movs	r2, #1
 8009f12:	f883 2150 	strb.w	r2, [r3, #336]	@ 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8009f16:	2201      	movs	r2, #1
 8009f18:	2180      	movs	r1, #128	@ 0x80
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	f004 fec2 	bl	800eca4 <VL53L0X_WrByte>
 8009f20:	4603      	mov	r3, r0
 8009f22:	461a      	mov	r2, r3
 8009f24:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009f28:	4313      	orrs	r3, r2
 8009f2a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009f2e:	2201      	movs	r2, #1
 8009f30:	21ff      	movs	r1, #255	@ 0xff
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	f004 feb6 	bl	800eca4 <VL53L0X_WrByte>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	461a      	mov	r2, r3
 8009f3c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009f40:	4313      	orrs	r3, r2
 8009f42:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8009f46:	2200      	movs	r2, #0
 8009f48:	2100      	movs	r1, #0
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f004 feaa 	bl	800eca4 <VL53L0X_WrByte>
 8009f50:	4603      	mov	r3, r0
 8009f52:	461a      	mov	r2, r3
 8009f54:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009f58:	4313      	orrs	r3, r2
 8009f5a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8009f5e:	f107 030f 	add.w	r3, r7, #15
 8009f62:	461a      	mov	r2, r3
 8009f64:	2191      	movs	r1, #145	@ 0x91
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f004 ff1e 	bl	800eda8 <VL53L0X_RdByte>
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	461a      	mov	r2, r3
 8009f70:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009f74:	4313      	orrs	r3, r2
 8009f76:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8009f7a:	7bfa      	ldrb	r2, [r7, #15]
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	f883 213a 	strb.w	r2, [r3, #314]	@ 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8009f82:	2201      	movs	r2, #1
 8009f84:	2100      	movs	r1, #0
 8009f86:	6878      	ldr	r0, [r7, #4]
 8009f88:	f004 fe8c 	bl	800eca4 <VL53L0X_WrByte>
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	461a      	mov	r2, r3
 8009f90:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009f94:	4313      	orrs	r3, r2
 8009f96:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	21ff      	movs	r1, #255	@ 0xff
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f004 fe80 	bl	800eca4 <VL53L0X_WrByte>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	461a      	mov	r2, r3
 8009fa8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009fac:	4313      	orrs	r3, r2
 8009fae:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	2180      	movs	r1, #128	@ 0x80
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	f004 fe74 	bl	800eca4 <VL53L0X_WrByte>
 8009fbc:	4603      	mov	r3, r0
 8009fbe:	461a      	mov	r2, r3
 8009fc0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009fc4:	4313      	orrs	r3, r2
 8009fc6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8009fca:	2300      	movs	r3, #0
 8009fcc:	653b      	str	r3, [r7, #80]	@ 0x50
 8009fce:	e014      	b.n	8009ffa <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 8009fd0:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d114      	bne.n	800a002 <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8009fd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009fda:	b29b      	uxth	r3, r3
 8009fdc:	2201      	movs	r2, #1
 8009fde:	4619      	mov	r1, r3
 8009fe0:	6878      	ldr	r0, [r7, #4]
 8009fe2:	f000 fd49 	bl	800aa78 <VL53L0X_SetLimitCheckEnable>
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	461a      	mov	r2, r3
 8009fea:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009fee:	4313      	orrs	r3, r2
 8009ff0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8009ff4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009ff6:	3301      	adds	r3, #1
 8009ff8:	653b      	str	r3, [r7, #80]	@ 0x50
 8009ffa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009ffc:	2b05      	cmp	r3, #5
 8009ffe:	dde7      	ble.n	8009fd0 <VL53L0X_DataInit+0x180>
 800a000:	e000      	b.n	800a004 <VL53L0X_DataInit+0x1b4>
		else
			break;
 800a002:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 800a004:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d107      	bne.n	800a01c <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800a00c:	2200      	movs	r2, #0
 800a00e:	2102      	movs	r1, #2
 800a010:	6878      	ldr	r0, [r7, #4]
 800a012:	f000 fd31 	bl	800aa78 <VL53L0X_SetLimitCheckEnable>
 800a016:	4603      	mov	r3, r0
 800a018:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800a01c:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800a020:	2b00      	cmp	r3, #0
 800a022:	d107      	bne.n	800a034 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800a024:	2200      	movs	r2, #0
 800a026:	2103      	movs	r1, #3
 800a028:	6878      	ldr	r0, [r7, #4]
 800a02a:	f000 fd25 	bl	800aa78 <VL53L0X_SetLimitCheckEnable>
 800a02e:	4603      	mov	r3, r0
 800a030:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800a034:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d107      	bne.n	800a04c <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800a03c:	2200      	movs	r2, #0
 800a03e:	2104      	movs	r1, #4
 800a040:	6878      	ldr	r0, [r7, #4]
 800a042:	f000 fd19 	bl	800aa78 <VL53L0X_SetLimitCheckEnable>
 800a046:	4603      	mov	r3, r0
 800a048:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800a04c:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800a050:	2b00      	cmp	r3, #0
 800a052:	d107      	bne.n	800a064 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800a054:	2200      	movs	r2, #0
 800a056:	2105      	movs	r1, #5
 800a058:	6878      	ldr	r0, [r7, #4]
 800a05a:	f000 fd0d 	bl	800aa78 <VL53L0X_SetLimitCheckEnable>
 800a05e:	4603      	mov	r3, r0
 800a060:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 800a064:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d108      	bne.n	800a07e <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800a06c:	f44f 1290 	mov.w	r2, #1179648	@ 0x120000
 800a070:	2100      	movs	r1, #0
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f000 fdb0 	bl	800abd8 <VL53L0X_SetLimitCheckValue>
 800a078:	4603      	mov	r3, r0
 800a07a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800a07e:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800a082:	2b00      	cmp	r3, #0
 800a084:	d108      	bne.n	800a098 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800a086:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800a08a:	2101      	movs	r1, #1
 800a08c:	6878      	ldr	r0, [r7, #4]
 800a08e:	f000 fda3 	bl	800abd8 <VL53L0X_SetLimitCheckValue>
 800a092:	4603      	mov	r3, r0
 800a094:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a098:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d108      	bne.n	800a0b2 <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800a0a0:	f44f 120c 	mov.w	r2, #2293760	@ 0x230000
 800a0a4:	2102      	movs	r1, #2
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f000 fd96 	bl	800abd8 <VL53L0X_SetLimitCheckValue>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a0b2:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d107      	bne.n	800a0ca <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	2103      	movs	r1, #3
 800a0be:	6878      	ldr	r0, [r7, #4]
 800a0c0:	f000 fd8a 	bl	800abd8 <VL53L0X_SetLimitCheckValue>
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a0ca:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d10f      	bne.n	800a0f2 <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	22ff      	movs	r2, #255	@ 0xff
 800a0d6:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800a0da:	22ff      	movs	r2, #255	@ 0xff
 800a0dc:	2101      	movs	r1, #1
 800a0de:	6878      	ldr	r0, [r7, #4]
 800a0e0:	f004 fde0 	bl	800eca4 <VL53L0X_WrByte>
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	2201      	movs	r2, #1
 800a0ee:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 800a0f2:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d103      	bne.n	800a102 <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 800a102:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
}
 800a106:	4618      	mov	r0, r3
 800a108:	3758      	adds	r7, #88	@ 0x58
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bdb0      	pop	{r4, r5, r7, pc}
 800a10e:	bf00      	nop
 800a110:	00016b85 	.word	0x00016b85
 800a114:	000970a4 	.word	0x000970a4

0800a118 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 800a118:	b5b0      	push	{r4, r5, r7, lr}
 800a11a:	b09e      	sub	sp, #120	@ 0x78
 800a11c:	af02      	add	r7, sp, #8
 800a11e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a120:	2300      	movs	r3, #0
 800a122:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 800a126:	f107 031c 	add.w	r3, r7, #28
 800a12a:	2240      	movs	r2, #64	@ 0x40
 800a12c:	2100      	movs	r1, #0
 800a12e:	4618      	mov	r0, r3
 800a130:	f009 fb87 	bl	8013842 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 800a134:	2300      	movs	r3, #0
 800a136:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 800a138:	2300      	movs	r3, #0
 800a13a:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 800a13c:	2300      	movs	r3, #0
 800a13e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	uint32_t count = 0;
 800a142:	2300      	movs	r3, #0
 800a144:	663b      	str	r3, [r7, #96]	@ 0x60
	uint8_t isApertureSpads = 0;
 800a146:	2300      	movs	r3, #0
 800a148:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 800a14a:	2300      	movs	r3, #0
 800a14c:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 800a14e:	2300      	movs	r3, #0
 800a150:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 800a154:	2101      	movs	r1, #1
 800a156:	6878      	ldr	r0, [r7, #4]
 800a158:	f002 faec 	bl	800c734 <VL53L0X_get_info_from_device>
 800a15c:	4603      	mov	r3, r0
 800a15e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	f893 3113 	ldrb.w	r3, [r3, #275]	@ 0x113
 800a168:	663b      	str	r3, [r7, #96]	@ 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 800a170:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 800a174:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a178:	2b01      	cmp	r3, #1
 800a17a:	d80d      	bhi.n	800a198 <VL53L0X_StaticInit+0x80>
 800a17c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a180:	2b01      	cmp	r3, #1
 800a182:	d102      	bne.n	800a18a <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 800a184:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a186:	2b20      	cmp	r3, #32
 800a188:	d806      	bhi.n	800a198 <VL53L0X_StaticInit+0x80>
 800a18a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d10e      	bne.n	800a1b0 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 800a192:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a194:	2b0c      	cmp	r3, #12
 800a196:	d90b      	bls.n	800a1b0 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 800a198:	f107 0218 	add.w	r2, r7, #24
 800a19c:	f107 0314 	add.w	r3, r7, #20
 800a1a0:	4619      	mov	r1, r3
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	f001 fd48 	bl	800bc38 <VL53L0X_perform_ref_spad_management>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 800a1ae:	e009      	b.n	800a1c4 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 800a1b0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a1b4:	461a      	mov	r2, r3
 800a1b6:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	f001 ff49 	bl	800c050 <VL53L0X_set_reference_spads>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 800a1c4:	4b93      	ldr	r3, [pc, #588]	@ (800a414 <VL53L0X_StaticInit+0x2fc>)
 800a1c6:	66bb      	str	r3, [r7, #104]	@ 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 800a1c8:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d10f      	bne.n	800a1f0 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	f893 3150 	ldrb.w	r3, [r3, #336]	@ 0x150
 800a1d6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 800a1da:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d104      	bne.n	800a1ec <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 800a1e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a1ea:	e001      	b.n	800a1f0 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 800a1ec:	4b89      	ldr	r3, [pc, #548]	@ (800a414 <VL53L0X_StaticInit+0x2fc>)
 800a1ee:	66bb      	str	r3, [r7, #104]	@ 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 800a1f0:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d106      	bne.n	800a206 <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 800a1f8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a1fa:	6878      	ldr	r0, [r7, #4]
 800a1fc:	f003 fe3c 	bl	800de78 <VL53L0X_load_tuning_settings>
 800a200:	4603      	mov	r3, r0
 800a202:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 800a206:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d10a      	bne.n	800a224 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 800a20e:	2300      	movs	r3, #0
 800a210:	9300      	str	r3, [sp, #0]
 800a212:	2304      	movs	r3, #4
 800a214:	2200      	movs	r2, #0
 800a216:	2100      	movs	r1, #0
 800a218:	6878      	ldr	r0, [r7, #4]
 800a21a:	f001 f8fd 	bl	800b418 <VL53L0X_SetGpioConfig>
 800a21e:	4603      	mov	r3, r0
 800a220:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a224:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d121      	bne.n	800a270 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a22c:	2201      	movs	r2, #1
 800a22e:	21ff      	movs	r1, #255	@ 0xff
 800a230:	6878      	ldr	r0, [r7, #4]
 800a232:	f004 fd37 	bl	800eca4 <VL53L0X_WrByte>
 800a236:	4603      	mov	r3, r0
 800a238:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 800a23c:	f107 031a 	add.w	r3, r7, #26
 800a240:	461a      	mov	r2, r3
 800a242:	2184      	movs	r1, #132	@ 0x84
 800a244:	6878      	ldr	r0, [r7, #4]
 800a246:	f004 fdd9 	bl	800edfc <VL53L0X_RdWord>
 800a24a:	4603      	mov	r3, r0
 800a24c:	461a      	mov	r2, r3
 800a24e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800a252:	4313      	orrs	r3, r2
 800a254:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a258:	2200      	movs	r2, #0
 800a25a:	21ff      	movs	r1, #255	@ 0xff
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	f004 fd21 	bl	800eca4 <VL53L0X_WrByte>
 800a262:	4603      	mov	r3, r0
 800a264:	461a      	mov	r2, r3
 800a266:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800a26a:	4313      	orrs	r3, r2
 800a26c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a270:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800a274:	2b00      	cmp	r3, #0
 800a276:	d104      	bne.n	800a282 <VL53L0X_StaticInit+0x16a>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 800a278:	8b7b      	ldrh	r3, [r7, #26]
 800a27a:	011a      	lsls	r2, r3, #4
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 800a282:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800a286:	2b00      	cmp	r3, #0
 800a288:	d108      	bne.n	800a29c <VL53L0X_StaticInit+0x184>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800a28a:	f107 031c 	add.w	r3, r7, #28
 800a28e:	4619      	mov	r1, r3
 800a290:	6878      	ldr	r0, [r7, #4]
 800a292:	f000 f8cf 	bl	800a434 <VL53L0X_GetDeviceParameters>
 800a296:	4603      	mov	r3, r0
 800a298:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 800a29c:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d110      	bne.n	800a2c6 <VL53L0X_StaticInit+0x1ae>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 800a2a4:	f107 0319 	add.w	r3, r7, #25
 800a2a8:	4619      	mov	r1, r3
 800a2aa:	6878      	ldr	r0, [r7, #4]
 800a2ac:	f000 f991 	bl	800a5d2 <VL53L0X_GetFractionEnable>
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 800a2b6:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d103      	bne.n	800a2c6 <VL53L0X_StaticInit+0x1ae>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 800a2be:	7e7a      	ldrb	r2, [r7, #25]
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 800a2c6:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d10e      	bne.n	800a2ec <VL53L0X_StaticInit+0x1d4>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	f103 0410 	add.w	r4, r3, #16
 800a2d4:	f107 051c 	add.w	r5, r7, #28
 800a2d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a2da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a2dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a2de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a2e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a2e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a2e4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800a2e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 800a2ec:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d111      	bne.n	800a318 <VL53L0X_StaticInit+0x200>
		Status = VL53L0X_RdByte(Dev,
 800a2f4:	f107 0319 	add.w	r3, r7, #25
 800a2f8:	461a      	mov	r2, r3
 800a2fa:	2101      	movs	r1, #1
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	f004 fd53 	bl	800eda8 <VL53L0X_RdByte>
 800a302:	4603      	mov	r3, r0
 800a304:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 800a308:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d103      	bne.n	800a318 <VL53L0X_StaticInit+0x200>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 800a310:	7e7a      	ldrb	r2, [r7, #25]
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 800a318:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d107      	bne.n	800a330 <VL53L0X_StaticInit+0x218>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800a320:	2200      	movs	r2, #0
 800a322:	2100      	movs	r1, #0
 800a324:	6878      	ldr	r0, [r7, #4]
 800a326:	f000 f9c9 	bl	800a6bc <VL53L0X_SetSequenceStepEnable>
 800a32a:	4603      	mov	r3, r0
 800a32c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800a330:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800a334:	2b00      	cmp	r3, #0
 800a336:	d107      	bne.n	800a348 <VL53L0X_StaticInit+0x230>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800a338:	2200      	movs	r2, #0
 800a33a:	2102      	movs	r1, #2
 800a33c:	6878      	ldr	r0, [r7, #4]
 800a33e:	f000 f9bd 	bl	800a6bc <VL53L0X_SetSequenceStepEnable>
 800a342:	4603      	mov	r3, r0
 800a344:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 800a348:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d103      	bne.n	800a358 <VL53L0X_StaticInit+0x240>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2203      	movs	r2, #3
 800a354:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800a358:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d109      	bne.n	800a374 <VL53L0X_StaticInit+0x25c>
		Status = VL53L0X_GetVcselPulsePeriod(
 800a360:	f107 0313 	add.w	r3, r7, #19
 800a364:	461a      	mov	r2, r3
 800a366:	2100      	movs	r1, #0
 800a368:	6878      	ldr	r0, [r7, #4]
 800a36a:	f000 f98f 	bl	800a68c <VL53L0X_GetVcselPulsePeriod>
 800a36e:	4603      	mov	r3, r0
 800a370:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a374:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d103      	bne.n	800a384 <VL53L0X_StaticInit+0x26c>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a37c:	7cfa      	ldrb	r2, [r7, #19]
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800a384:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d109      	bne.n	800a3a0 <VL53L0X_StaticInit+0x288>
		Status = VL53L0X_GetVcselPulsePeriod(
 800a38c:	f107 0313 	add.w	r3, r7, #19
 800a390:	461a      	mov	r2, r3
 800a392:	2101      	movs	r1, #1
 800a394:	6878      	ldr	r0, [r7, #4]
 800a396:	f000 f979 	bl	800a68c <VL53L0X_GetVcselPulsePeriod>
 800a39a:	4603      	mov	r3, r0
 800a39c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a3a0:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d103      	bne.n	800a3b0 <VL53L0X_StaticInit+0x298>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a3a8:	7cfa      	ldrb	r2, [r7, #19]
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	f883 20e0 	strb.w	r2, [r3, #224]	@ 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800a3b0:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d109      	bne.n	800a3cc <VL53L0X_StaticInit+0x2b4>
		Status = get_sequence_step_timeout(
 800a3b8:	f107 030c 	add.w	r3, r7, #12
 800a3bc:	461a      	mov	r2, r3
 800a3be:	2103      	movs	r1, #3
 800a3c0:	6878      	ldr	r0, [r7, #4]
 800a3c2:	f002 ff37 	bl	800d234 <get_sequence_step_timeout>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a3cc:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d103      	bne.n	800a3dc <VL53L0X_StaticInit+0x2c4>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a3d4:	68fa      	ldr	r2, [r7, #12]
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800a3dc:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d109      	bne.n	800a3f8 <VL53L0X_StaticInit+0x2e0>
		Status = get_sequence_step_timeout(
 800a3e4:	f107 030c 	add.w	r3, r7, #12
 800a3e8:	461a      	mov	r2, r3
 800a3ea:	2104      	movs	r1, #4
 800a3ec:	6878      	ldr	r0, [r7, #4]
 800a3ee:	f002 ff21 	bl	800d234 <get_sequence_step_timeout>
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a3f8:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d103      	bne.n	800a408 <VL53L0X_StaticInit+0x2f0>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a400:	68fa      	ldr	r2, [r7, #12]
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a408:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
}
 800a40c:	4618      	mov	r0, r3
 800a40e:	3770      	adds	r7, #112	@ 0x70
 800a410:	46bd      	mov	sp, r7
 800a412:	bdb0      	pop	{r4, r5, r7, pc}
 800a414:	20000310 	.word	0x20000310

0800a418 <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 800a418:	b480      	push	{r7}
 800a41a:	b085      	sub	sp, #20
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 800a420:	239d      	movs	r3, #157	@ 0x9d
 800a422:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 800a424:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a428:	4618      	mov	r0, r3
 800a42a:	3714      	adds	r7, #20
 800a42c:	46bd      	mov	sp, r7
 800a42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a432:	4770      	bx	lr

0800a434 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b084      	sub	sp, #16
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
 800a43c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a43e:	2300      	movs	r3, #0
 800a440:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 800a442:	683b      	ldr	r3, [r7, #0]
 800a444:	4619      	mov	r1, r3
 800a446:	6878      	ldr	r0, [r7, #4]
 800a448:	f000 f8b0 	bl	800a5ac <VL53L0X_GetDeviceMode>
 800a44c:	4603      	mov	r3, r0
 800a44e:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800a450:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d107      	bne.n	800a468 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	3308      	adds	r3, #8
 800a45c:	4619      	mov	r1, r3
 800a45e:	6878      	ldr	r0, [r7, #4]
 800a460:	f000 fa76 	bl	800a950 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 800a464:	4603      	mov	r3, r0
 800a466:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 800a468:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d102      	bne.n	800a476 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	2200      	movs	r2, #0
 800a474:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 800a476:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d107      	bne.n	800a48e <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	3310      	adds	r3, #16
 800a482:	4619      	mov	r1, r3
 800a484:	6878      	ldr	r0, [r7, #4]
 800a486:	f000 faac 	bl	800a9e2 <VL53L0X_GetXTalkCompensationRateMegaCps>
 800a48a:	4603      	mov	r3, r0
 800a48c:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 800a48e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d107      	bne.n	800a4a6 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	3314      	adds	r3, #20
 800a49a:	4619      	mov	r1, r3
 800a49c:	6878      	ldr	r0, [r7, #4]
 800a49e:	f7ff fcac 	bl	8009dfa <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 800a4a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d134      	bne.n	800a518 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	60bb      	str	r3, [r7, #8]
 800a4b2:	e02a      	b.n	800a50a <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800a4b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d12a      	bne.n	800a512 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	b299      	uxth	r1, r3
 800a4c0:	68bb      	ldr	r3, [r7, #8]
 800a4c2:	3308      	adds	r3, #8
 800a4c4:	009b      	lsls	r3, r3, #2
 800a4c6:	683a      	ldr	r2, [r7, #0]
 800a4c8:	4413      	add	r3, r2
 800a4ca:	3304      	adds	r3, #4
 800a4cc:	461a      	mov	r2, r3
 800a4ce:	6878      	ldr	r0, [r7, #4]
 800a4d0:	f000 fbe4 	bl	800ac9c <VL53L0X_GetLimitCheckValue>
 800a4d4:	4603      	mov	r3, r0
 800a4d6:	461a      	mov	r2, r3
 800a4d8:	7bfb      	ldrb	r3, [r7, #15]
 800a4da:	4313      	orrs	r3, r2
 800a4dc:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800a4de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d117      	bne.n	800a516 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 800a4e6:	68bb      	ldr	r3, [r7, #8]
 800a4e8:	b299      	uxth	r1, r3
 800a4ea:	68bb      	ldr	r3, [r7, #8]
 800a4ec:	3318      	adds	r3, #24
 800a4ee:	683a      	ldr	r2, [r7, #0]
 800a4f0:	4413      	add	r3, r2
 800a4f2:	461a      	mov	r2, r3
 800a4f4:	6878      	ldr	r0, [r7, #4]
 800a4f6:	f000 fb4b 	bl	800ab90 <VL53L0X_GetLimitCheckEnable>
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	461a      	mov	r2, r3
 800a4fe:	7bfb      	ldrb	r3, [r7, #15]
 800a500:	4313      	orrs	r3, r2
 800a502:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800a504:	68bb      	ldr	r3, [r7, #8]
 800a506:	3301      	adds	r3, #1
 800a508:	60bb      	str	r3, [r7, #8]
 800a50a:	68bb      	ldr	r3, [r7, #8]
 800a50c:	2b05      	cmp	r3, #5
 800a50e:	ddd1      	ble.n	800a4b4 <VL53L0X_GetDeviceParameters+0x80>
 800a510:	e002      	b.n	800a518 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 800a512:	bf00      	nop
 800a514:	e000      	b.n	800a518 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 800a516:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a518:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d107      	bne.n	800a530 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	333c      	adds	r3, #60	@ 0x3c
 800a524:	4619      	mov	r1, r3
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	f000 fc46 	bl	800adb8 <VL53L0X_GetWrapAroundCheckEnable>
 800a52c:	4603      	mov	r3, r0
 800a52e:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 800a530:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d107      	bne.n	800a548 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	3304      	adds	r3, #4
 800a53c:	4619      	mov	r1, r3
 800a53e:	6878      	ldr	r0, [r7, #4]
 800a540:	f000 f879 	bl	800a636 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 800a544:	4603      	mov	r3, r0
 800a546:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a548:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	3710      	adds	r7, #16
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}

0800a554 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 800a554:	b480      	push	{r7}
 800a556:	b085      	sub	sp, #20
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
 800a55c:	460b      	mov	r3, r1
 800a55e:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a560:	2300      	movs	r3, #0
 800a562:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 800a564:	78fb      	ldrb	r3, [r7, #3]
 800a566:	2b15      	cmp	r3, #21
 800a568:	bf8c      	ite	hi
 800a56a:	2201      	movhi	r2, #1
 800a56c:	2200      	movls	r2, #0
 800a56e:	b2d2      	uxtb	r2, r2
 800a570:	2a00      	cmp	r2, #0
 800a572:	d10f      	bne.n	800a594 <VL53L0X_SetDeviceMode+0x40>
 800a574:	4a0c      	ldr	r2, [pc, #48]	@ (800a5a8 <VL53L0X_SetDeviceMode+0x54>)
 800a576:	fa22 f303 	lsr.w	r3, r2, r3
 800a57a:	f003 0301 	and.w	r3, r3, #1
 800a57e:	2b00      	cmp	r3, #0
 800a580:	bf14      	ite	ne
 800a582:	2301      	movne	r3, #1
 800a584:	2300      	moveq	r3, #0
 800a586:	b2db      	uxtb	r3, r3
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d003      	beq.n	800a594 <VL53L0X_SetDeviceMode+0x40>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	78fa      	ldrb	r2, [r7, #3]
 800a590:	741a      	strb	r2, [r3, #16]
		break;
 800a592:	e001      	b.n	800a598 <VL53L0X_SetDeviceMode+0x44>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800a594:	23f8      	movs	r3, #248	@ 0xf8
 800a596:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a598:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a59c:	4618      	mov	r0, r3
 800a59e:	3714      	adds	r7, #20
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a6:	4770      	bx	lr
 800a5a8:	0030000b 	.word	0x0030000b

0800a5ac <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	b085      	sub	sp, #20
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
 800a5b4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	7c1a      	ldrb	r2, [r3, #16]
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800a5c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	3714      	adds	r7, #20
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d0:	4770      	bx	lr

0800a5d2 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 800a5d2:	b580      	push	{r7, lr}
 800a5d4:	b084      	sub	sp, #16
 800a5d6:	af00      	add	r7, sp, #0
 800a5d8:	6078      	str	r0, [r7, #4]
 800a5da:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a5dc:	2300      	movs	r3, #0
 800a5de:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 800a5e0:	683a      	ldr	r2, [r7, #0]
 800a5e2:	2109      	movs	r1, #9
 800a5e4:	6878      	ldr	r0, [r7, #4]
 800a5e6:	f004 fbdf 	bl	800eda8 <VL53L0X_RdByte>
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800a5ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d106      	bne.n	800a604 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	781b      	ldrb	r3, [r3, #0]
 800a5fa:	f003 0301 	and.w	r3, r3, #1
 800a5fe:	b2da      	uxtb	r2, r3
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800a604:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a608:	4618      	mov	r0, r3
 800a60a:	3710      	adds	r7, #16
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bd80      	pop	{r7, pc}

0800a610 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b084      	sub	sp, #16
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
 800a618:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a61a:	2300      	movs	r3, #0
 800a61c:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 800a61e:	6839      	ldr	r1, [r7, #0]
 800a620:	6878      	ldr	r0, [r7, #4]
 800a622:	f003 fa97 	bl	800db54 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 800a626:	4603      	mov	r3, r0
 800a628:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 800a62a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a62e:	4618      	mov	r0, r3
 800a630:	3710      	adds	r7, #16
 800a632:	46bd      	mov	sp, r7
 800a634:	bd80      	pop	{r7, pc}

0800a636 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800a636:	b580      	push	{r7, lr}
 800a638:	b084      	sub	sp, #16
 800a63a:	af00      	add	r7, sp, #0
 800a63c:	6078      	str	r0, [r7, #4]
 800a63e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a640:	2300      	movs	r3, #0
 800a642:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 800a644:	6839      	ldr	r1, [r7, #0]
 800a646:	6878      	ldr	r0, [r7, #4]
 800a648:	f003 fb64 	bl	800dd14 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 800a64c:	4603      	mov	r3, r0
 800a64e:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 800a650:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a654:	4618      	mov	r0, r3
 800a656:	3710      	adds	r7, #16
 800a658:	46bd      	mov	sp, r7
 800a65a:	bd80      	pop	{r7, pc}

0800a65c <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b084      	sub	sp, #16
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
 800a664:	460b      	mov	r3, r1
 800a666:	70fb      	strb	r3, [r7, #3]
 800a668:	4613      	mov	r3, r2
 800a66a:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a66c:	2300      	movs	r3, #0
 800a66e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 800a670:	78ba      	ldrb	r2, [r7, #2]
 800a672:	78fb      	ldrb	r3, [r7, #3]
 800a674:	4619      	mov	r1, r3
 800a676:	6878      	ldr	r0, [r7, #4]
 800a678:	f002 ffae 	bl	800d5d8 <VL53L0X_set_vcsel_pulse_period>
 800a67c:	4603      	mov	r3, r0
 800a67e:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800a680:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a684:	4618      	mov	r0, r3
 800a686:	3710      	adds	r7, #16
 800a688:	46bd      	mov	sp, r7
 800a68a:	bd80      	pop	{r7, pc}

0800a68c <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b086      	sub	sp, #24
 800a690:	af00      	add	r7, sp, #0
 800a692:	60f8      	str	r0, [r7, #12]
 800a694:	460b      	mov	r3, r1
 800a696:	607a      	str	r2, [r7, #4]
 800a698:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a69a:	2300      	movs	r3, #0
 800a69c:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 800a69e:	7afb      	ldrb	r3, [r7, #11]
 800a6a0:	687a      	ldr	r2, [r7, #4]
 800a6a2:	4619      	mov	r1, r3
 800a6a4:	68f8      	ldr	r0, [r7, #12]
 800a6a6:	f003 fa1e 	bl	800dae6 <VL53L0X_get_vcsel_pulse_period>
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800a6ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	3718      	adds	r7, #24
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	bd80      	pop	{r7, pc}
	...

0800a6bc <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b086      	sub	sp, #24
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
 800a6c4:	460b      	mov	r3, r1
 800a6c6:	70fb      	strb	r3, [r7, #3]
 800a6c8:	4613      	mov	r3, r2
 800a6ca:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800a6d8:	f107 030f 	add.w	r3, r7, #15
 800a6dc:	461a      	mov	r2, r3
 800a6de:	2101      	movs	r1, #1
 800a6e0:	6878      	ldr	r0, [r7, #4]
 800a6e2:	f004 fb61 	bl	800eda8 <VL53L0X_RdByte>
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 800a6ea:	7bfb      	ldrb	r3, [r7, #15]
 800a6ec:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 800a6ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d159      	bne.n	800a7aa <VL53L0X_SetSequenceStepEnable+0xee>
		if (SequenceStepEnabled == 1) {
 800a6f6:	78bb      	ldrb	r3, [r7, #2]
 800a6f8:	2b01      	cmp	r3, #1
 800a6fa:	d12b      	bne.n	800a754 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 800a6fc:	78fb      	ldrb	r3, [r7, #3]
 800a6fe:	2b04      	cmp	r3, #4
 800a700:	d825      	bhi.n	800a74e <VL53L0X_SetSequenceStepEnable+0x92>
 800a702:	a201      	add	r2, pc, #4	@ (adr r2, 800a708 <VL53L0X_SetSequenceStepEnable+0x4c>)
 800a704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a708:	0800a71d 	.word	0x0800a71d
 800a70c:	0800a727 	.word	0x0800a727
 800a710:	0800a731 	.word	0x0800a731
 800a714:	0800a73b 	.word	0x0800a73b
 800a718:	0800a745 	.word	0x0800a745
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 800a71c:	7dbb      	ldrb	r3, [r7, #22]
 800a71e:	f043 0310 	orr.w	r3, r3, #16
 800a722:	75bb      	strb	r3, [r7, #22]
				break;
 800a724:	e041      	b.n	800a7aa <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 800a726:	7dbb      	ldrb	r3, [r7, #22]
 800a728:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 800a72c:	75bb      	strb	r3, [r7, #22]
				break;
 800a72e:	e03c      	b.n	800a7aa <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 800a730:	7dbb      	ldrb	r3, [r7, #22]
 800a732:	f043 0304 	orr.w	r3, r3, #4
 800a736:	75bb      	strb	r3, [r7, #22]
				break;
 800a738:	e037      	b.n	800a7aa <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 800a73a:	7dbb      	ldrb	r3, [r7, #22]
 800a73c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a740:	75bb      	strb	r3, [r7, #22]
				break;
 800a742:	e032      	b.n	800a7aa <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 800a744:	7dbb      	ldrb	r3, [r7, #22]
 800a746:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a74a:	75bb      	strb	r3, [r7, #22]
				break;
 800a74c:	e02d      	b.n	800a7aa <VL53L0X_SetSequenceStepEnable+0xee>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a74e:	23fc      	movs	r3, #252	@ 0xfc
 800a750:	75fb      	strb	r3, [r7, #23]
 800a752:	e02a      	b.n	800a7aa <VL53L0X_SetSequenceStepEnable+0xee>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 800a754:	78fb      	ldrb	r3, [r7, #3]
 800a756:	2b04      	cmp	r3, #4
 800a758:	d825      	bhi.n	800a7a6 <VL53L0X_SetSequenceStepEnable+0xea>
 800a75a:	a201      	add	r2, pc, #4	@ (adr r2, 800a760 <VL53L0X_SetSequenceStepEnable+0xa4>)
 800a75c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a760:	0800a775 	.word	0x0800a775
 800a764:	0800a77f 	.word	0x0800a77f
 800a768:	0800a789 	.word	0x0800a789
 800a76c:	0800a793 	.word	0x0800a793
 800a770:	0800a79d 	.word	0x0800a79d
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 800a774:	7dbb      	ldrb	r3, [r7, #22]
 800a776:	f023 0310 	bic.w	r3, r3, #16
 800a77a:	75bb      	strb	r3, [r7, #22]
				break;
 800a77c:	e015      	b.n	800a7aa <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 800a77e:	7dbb      	ldrb	r3, [r7, #22]
 800a780:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 800a784:	75bb      	strb	r3, [r7, #22]
				break;
 800a786:	e010      	b.n	800a7aa <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 800a788:	7dbb      	ldrb	r3, [r7, #22]
 800a78a:	f023 0304 	bic.w	r3, r3, #4
 800a78e:	75bb      	strb	r3, [r7, #22]
				break;
 800a790:	e00b      	b.n	800a7aa <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 800a792:	7dbb      	ldrb	r3, [r7, #22]
 800a794:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a798:	75bb      	strb	r3, [r7, #22]
				break;
 800a79a:	e006      	b.n	800a7aa <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 800a79c:	7dbb      	ldrb	r3, [r7, #22]
 800a79e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a7a2:	75bb      	strb	r3, [r7, #22]
				break;
 800a7a4:	e001      	b.n	800a7aa <VL53L0X_SetSequenceStepEnable+0xee>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a7a6:	23fc      	movs	r3, #252	@ 0xfc
 800a7a8:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	if (SequenceConfigNew != SequenceConfig) {
 800a7aa:	7bfb      	ldrb	r3, [r7, #15]
 800a7ac:	7dba      	ldrb	r2, [r7, #22]
 800a7ae:	429a      	cmp	r2, r3
 800a7b0:	d01e      	beq.n	800a7f0 <VL53L0X_SetSequenceStepEnable+0x134>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 800a7b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d107      	bne.n	800a7ca <VL53L0X_SetSequenceStepEnable+0x10e>
			Status = VL53L0X_WrByte(Dev,
 800a7ba:	7dbb      	ldrb	r3, [r7, #22]
 800a7bc:	461a      	mov	r2, r3
 800a7be:	2101      	movs	r1, #1
 800a7c0:	6878      	ldr	r0, [r7, #4]
 800a7c2:	f004 fa6f 	bl	800eca4 <VL53L0X_WrByte>
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 800a7ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d103      	bne.n	800a7da <VL53L0X_SetSequenceStepEnable+0x11e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	7dba      	ldrb	r2, [r7, #22]
 800a7d6:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 800a7da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d106      	bne.n	800a7f0 <VL53L0X_SetSequenceStepEnable+0x134>
			VL53L0X_GETPARAMETERFIELD(Dev,
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	695b      	ldr	r3, [r3, #20]
 800a7e6:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800a7e8:	6939      	ldr	r1, [r7, #16]
 800a7ea:	6878      	ldr	r0, [r7, #4]
 800a7ec:	f7ff ff10 	bl	800a610 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800a7f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	3718      	adds	r7, #24
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	bd80      	pop	{r7, pc}

0800a7fc <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 800a7fc:	b480      	push	{r7}
 800a7fe:	b087      	sub	sp, #28
 800a800:	af00      	add	r7, sp, #0
 800a802:	60f8      	str	r0, [r7, #12]
 800a804:	607b      	str	r3, [r7, #4]
 800a806:	460b      	mov	r3, r1
 800a808:	72fb      	strb	r3, [r7, #11]
 800a80a:	4613      	mov	r3, r2
 800a80c:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a80e:	2300      	movs	r3, #0
 800a810:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2200      	movs	r2, #0
 800a816:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 800a818:	7afb      	ldrb	r3, [r7, #11]
 800a81a:	2b04      	cmp	r3, #4
 800a81c:	d836      	bhi.n	800a88c <sequence_step_enabled+0x90>
 800a81e:	a201      	add	r2, pc, #4	@ (adr r2, 800a824 <sequence_step_enabled+0x28>)
 800a820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a824:	0800a839 	.word	0x0800a839
 800a828:	0800a84b 	.word	0x0800a84b
 800a82c:	0800a85d 	.word	0x0800a85d
 800a830:	0800a86f 	.word	0x0800a86f
 800a834:	0800a881 	.word	0x0800a881
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 800a838:	7abb      	ldrb	r3, [r7, #10]
 800a83a:	111b      	asrs	r3, r3, #4
 800a83c:	b2db      	uxtb	r3, r3
 800a83e:	f003 0301 	and.w	r3, r3, #1
 800a842:	b2da      	uxtb	r2, r3
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	701a      	strb	r2, [r3, #0]
		break;
 800a848:	e022      	b.n	800a890 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 800a84a:	7abb      	ldrb	r3, [r7, #10]
 800a84c:	10db      	asrs	r3, r3, #3
 800a84e:	b2db      	uxtb	r3, r3
 800a850:	f003 0301 	and.w	r3, r3, #1
 800a854:	b2da      	uxtb	r2, r3
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	701a      	strb	r2, [r3, #0]
		break;
 800a85a:	e019      	b.n	800a890 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 800a85c:	7abb      	ldrb	r3, [r7, #10]
 800a85e:	109b      	asrs	r3, r3, #2
 800a860:	b2db      	uxtb	r3, r3
 800a862:	f003 0301 	and.w	r3, r3, #1
 800a866:	b2da      	uxtb	r2, r3
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	701a      	strb	r2, [r3, #0]
		break;
 800a86c:	e010      	b.n	800a890 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 800a86e:	7abb      	ldrb	r3, [r7, #10]
 800a870:	119b      	asrs	r3, r3, #6
 800a872:	b2db      	uxtb	r3, r3
 800a874:	f003 0301 	and.w	r3, r3, #1
 800a878:	b2da      	uxtb	r2, r3
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	701a      	strb	r2, [r3, #0]
		break;
 800a87e:	e007      	b.n	800a890 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 800a880:	7abb      	ldrb	r3, [r7, #10]
 800a882:	09db      	lsrs	r3, r3, #7
 800a884:	b2da      	uxtb	r2, r3
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	701a      	strb	r2, [r3, #0]
		break;
 800a88a:	e001      	b.n	800a890 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a88c:	23fc      	movs	r3, #252	@ 0xfc
 800a88e:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a890:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a894:	4618      	mov	r0, r3
 800a896:	371c      	adds	r7, #28
 800a898:	46bd      	mov	sp, r7
 800a89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89e:	4770      	bx	lr

0800a8a0 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b084      	sub	sp, #16
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
 800a8a8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800a8b2:	f107 030e 	add.w	r3, r7, #14
 800a8b6:	461a      	mov	r2, r3
 800a8b8:	2101      	movs	r1, #1
 800a8ba:	6878      	ldr	r0, [r7, #4]
 800a8bc:	f004 fa74 	bl	800eda8 <VL53L0X_RdByte>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 800a8c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d107      	bne.n	800a8dc <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 800a8cc:	7bba      	ldrb	r2, [r7, #14]
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	2100      	movs	r1, #0
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	f7ff ff92 	bl	800a7fc <sequence_step_enabled>
 800a8d8:	4603      	mov	r3, r0
 800a8da:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800a8dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d108      	bne.n	800a8f6 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 800a8e4:	7bba      	ldrb	r2, [r7, #14]
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	3302      	adds	r3, #2
 800a8ea:	2101      	movs	r1, #1
 800a8ec:	6878      	ldr	r0, [r7, #4]
 800a8ee:	f7ff ff85 	bl	800a7fc <sequence_step_enabled>
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800a8f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d108      	bne.n	800a910 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 800a8fe:	7bba      	ldrb	r2, [r7, #14]
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	3301      	adds	r3, #1
 800a904:	2102      	movs	r1, #2
 800a906:	6878      	ldr	r0, [r7, #4]
 800a908:	f7ff ff78 	bl	800a7fc <sequence_step_enabled>
 800a90c:	4603      	mov	r3, r0
 800a90e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800a910:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d108      	bne.n	800a92a <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 800a918:	7bba      	ldrb	r2, [r7, #14]
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	3303      	adds	r3, #3
 800a91e:	2103      	movs	r1, #3
 800a920:	6878      	ldr	r0, [r7, #4]
 800a922:	f7ff ff6b 	bl	800a7fc <sequence_step_enabled>
 800a926:	4603      	mov	r3, r0
 800a928:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800a92a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d108      	bne.n	800a944 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 800a932:	7bba      	ldrb	r2, [r7, #14]
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	3304      	adds	r3, #4
 800a938:	2104      	movs	r1, #4
 800a93a:	6878      	ldr	r0, [r7, #4]
 800a93c:	f7ff ff5e 	bl	800a7fc <sequence_step_enabled>
 800a940:	4603      	mov	r3, r0
 800a942:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a944:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a948:	4618      	mov	r0, r3
 800a94a:	3710      	adds	r7, #16
 800a94c:	46bd      	mov	sp, r7
 800a94e:	bd80      	pop	{r7, pc}

0800a950 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b084      	sub	sp, #16
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
 800a958:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a95a:	2300      	movs	r3, #0
 800a95c:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 800a95e:	f107 030c 	add.w	r3, r7, #12
 800a962:	461a      	mov	r2, r3
 800a964:	21f8      	movs	r1, #248	@ 0xf8
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	f004 fa48 	bl	800edfc <VL53L0X_RdWord>
 800a96c:	4603      	mov	r3, r0
 800a96e:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 800a970:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d108      	bne.n	800a98a <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 800a978:	f107 0308 	add.w	r3, r7, #8
 800a97c:	461a      	mov	r2, r3
 800a97e:	2104      	movs	r1, #4
 800a980:	6878      	ldr	r0, [r7, #4]
 800a982:	f004 fa71 	bl	800ee68 <VL53L0X_RdDWord>
 800a986:	4603      	mov	r3, r0
 800a988:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a98a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d10c      	bne.n	800a9ac <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 800a992:	89bb      	ldrh	r3, [r7, #12]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d005      	beq.n	800a9a4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	89ba      	ldrh	r2, [r7, #12]
 800a99c:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	681a      	ldr	r2, [r3, #0]
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a9ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	3710      	adds	r7, #16
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	bd80      	pop	{r7, pc}

0800a9b8 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 800a9b8:	b480      	push	{r7}
 800a9ba:	b085      	sub	sp, #20
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
 800a9c0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	7f1b      	ldrb	r3, [r3, #28]
 800a9ca:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	7bba      	ldrb	r2, [r7, #14]
 800a9d0:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800a9d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	3714      	adds	r7, #20
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e0:	4770      	bx	lr

0800a9e2 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 800a9e2:	b580      	push	{r7, lr}
 800a9e4:	b086      	sub	sp, #24
 800a9e6:	af00      	add	r7, sp, #0
 800a9e8:	6078      	str	r0, [r7, #4]
 800a9ea:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 800a9f0:	f107 030e 	add.w	r3, r7, #14
 800a9f4:	461a      	mov	r2, r3
 800a9f6:	2120      	movs	r1, #32
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	f004 f9ff 	bl	800edfc <VL53L0X_RdWord>
 800a9fe:	4603      	mov	r3, r0
 800aa00:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 800aa02:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d118      	bne.n	800aa3c <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 800aa0a:	89fb      	ldrh	r3, [r7, #14]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d109      	bne.n	800aa24 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	6a1b      	ldr	r3, [r3, #32]
 800aa14:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800aa16:	683b      	ldr	r3, [r7, #0]
 800aa18:	693a      	ldr	r2, [r7, #16]
 800aa1a:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2200      	movs	r2, #0
 800aa20:	771a      	strb	r2, [r3, #28]
 800aa22:	e00b      	b.n	800aa3c <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 800aa24:	89fb      	ldrh	r3, [r7, #14]
 800aa26:	00db      	lsls	r3, r3, #3
 800aa28:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	693a      	ldr	r2, [r7, #16]
 800aa2e:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	693a      	ldr	r2, [r7, #16]
 800aa34:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	2201      	movs	r2, #1
 800aa3a:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800aa3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aa40:	4618      	mov	r0, r3
 800aa42:	3718      	adds	r7, #24
 800aa44:	46bd      	mov	sp, r7
 800aa46:	bd80      	pop	{r7, pc}

0800aa48 <VL53L0X_SetRefCalibration>:

VL53L0X_Error VL53L0X_SetRefCalibration(VL53L0X_DEV Dev, uint8_t VhvSettings,
	uint8_t PhaseCal)
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b084      	sub	sp, #16
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
 800aa50:	460b      	mov	r3, r1
 800aa52:	70fb      	strb	r3, [r7, #3]
 800aa54:	4613      	mov	r3, r2
 800aa56:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aa58:	2300      	movs	r3, #0
 800aa5a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_ref_calibration(Dev, VhvSettings, PhaseCal);
 800aa5c:	78ba      	ldrb	r2, [r7, #2]
 800aa5e:	78fb      	ldrb	r3, [r7, #3]
 800aa60:	4619      	mov	r1, r3
 800aa62:	6878      	ldr	r0, [r7, #4]
 800aa64:	f001 fd76 	bl	800c554 <VL53L0X_set_ref_calibration>
 800aa68:	4603      	mov	r3, r0
 800aa6a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800aa6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aa70:	4618      	mov	r0, r3
 800aa72:	3710      	adds	r7, #16
 800aa74:	46bd      	mov	sp, r7
 800aa76:	bd80      	pop	{r7, pc}

0800aa78 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b086      	sub	sp, #24
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
 800aa80:	460b      	mov	r3, r1
 800aa82:	807b      	strh	r3, [r7, #2]
 800aa84:	4613      	mov	r3, r2
 800aa86:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aa88:	2300      	movs	r3, #0
 800aa8a:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 800aa90:	2300      	movs	r3, #0
 800aa92:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 800aa94:	2300      	movs	r3, #0
 800aa96:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800aa98:	887b      	ldrh	r3, [r7, #2]
 800aa9a:	2b05      	cmp	r3, #5
 800aa9c:	d902      	bls.n	800aaa4 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800aa9e:	23fc      	movs	r3, #252	@ 0xfc
 800aaa0:	75fb      	strb	r3, [r7, #23]
 800aaa2:	e05b      	b.n	800ab5c <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 800aaa4:	787b      	ldrb	r3, [r7, #1]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d106      	bne.n	800aab8 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 800aaaa:	2300      	movs	r3, #0
 800aaac:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 800aaae:	2300      	movs	r3, #0
 800aab0:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 800aab2:	2301      	movs	r3, #1
 800aab4:	73bb      	strb	r3, [r7, #14]
 800aab6:	e00a      	b.n	800aace <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800aab8:	887b      	ldrh	r3, [r7, #2]
 800aaba:	687a      	ldr	r2, [r7, #4]
 800aabc:	330c      	adds	r3, #12
 800aabe:	009b      	lsls	r3, r3, #2
 800aac0:	4413      	add	r3, r2
 800aac2:	685b      	ldr	r3, [r3, #4]
 800aac4:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 800aac6:	2300      	movs	r3, #0
 800aac8:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 800aaca:	2301      	movs	r3, #1
 800aacc:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 800aace:	887b      	ldrh	r3, [r7, #2]
 800aad0:	2b05      	cmp	r3, #5
 800aad2:	d841      	bhi.n	800ab58 <VL53L0X_SetLimitCheckEnable+0xe0>
 800aad4:	a201      	add	r2, pc, #4	@ (adr r2, 800aadc <VL53L0X_SetLimitCheckEnable+0x64>)
 800aad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aada:	bf00      	nop
 800aadc:	0800aaf5 	.word	0x0800aaf5
 800aae0:	0800aaff 	.word	0x0800aaff
 800aae4:	0800ab15 	.word	0x0800ab15
 800aae8:	0800ab1f 	.word	0x0800ab1f
 800aaec:	0800ab29 	.word	0x0800ab29
 800aaf0:	0800ab41 	.word	0x0800ab41

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	7bfa      	ldrb	r2, [r7, #15]
 800aaf8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 800aafc:	e02e      	b.n	800ab5c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 800aafe:	693b      	ldr	r3, [r7, #16]
 800ab00:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800ab02:	b29b      	uxth	r3, r3
 800ab04:	461a      	mov	r2, r3
 800ab06:	2144      	movs	r1, #68	@ 0x44
 800ab08:	6878      	ldr	r0, [r7, #4]
 800ab0a:	f004 f8ef 	bl	800ecec <VL53L0X_WrWord>
 800ab0e:	4603      	mov	r3, r0
 800ab10:	75fb      	strb	r3, [r7, #23]

			break;
 800ab12:	e023      	b.n	800ab5c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	7bfa      	ldrb	r2, [r7, #15]
 800ab18:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 800ab1c:	e01e      	b.n	800ab5c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	7bfa      	ldrb	r2, [r7, #15]
 800ab22:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 800ab26:	e019      	b.n	800ab5c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 800ab28:	7bbb      	ldrb	r3, [r7, #14]
 800ab2a:	005b      	lsls	r3, r3, #1
 800ab2c:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800ab2e:	7b7b      	ldrb	r3, [r7, #13]
 800ab30:	22fe      	movs	r2, #254	@ 0xfe
 800ab32:	2160      	movs	r1, #96	@ 0x60
 800ab34:	6878      	ldr	r0, [r7, #4]
 800ab36:	f004 f903 	bl	800ed40 <VL53L0X_UpdateByte>
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 800ab3e:	e00d      	b.n	800ab5c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 800ab40:	7bbb      	ldrb	r3, [r7, #14]
 800ab42:	011b      	lsls	r3, r3, #4
 800ab44:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800ab46:	7b7b      	ldrb	r3, [r7, #13]
 800ab48:	22ef      	movs	r2, #239	@ 0xef
 800ab4a:	2160      	movs	r1, #96	@ 0x60
 800ab4c:	6878      	ldr	r0, [r7, #4]
 800ab4e:	f004 f8f7 	bl	800ed40 <VL53L0X_UpdateByte>
 800ab52:	4603      	mov	r3, r0
 800ab54:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 800ab56:	e001      	b.n	800ab5c <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ab58:	23fc      	movs	r3, #252	@ 0xfc
 800ab5a:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ab5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d10f      	bne.n	800ab84 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 800ab64:	787b      	ldrb	r3, [r7, #1]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d106      	bne.n	800ab78 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800ab6a:	887b      	ldrh	r3, [r7, #2]
 800ab6c:	687a      	ldr	r2, [r7, #4]
 800ab6e:	4413      	add	r3, r2
 800ab70:	2200      	movs	r2, #0
 800ab72:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 800ab76:	e005      	b.n	800ab84 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800ab78:	887b      	ldrh	r3, [r7, #2]
 800ab7a:	687a      	ldr	r2, [r7, #4]
 800ab7c:	4413      	add	r3, r2
 800ab7e:	2201      	movs	r2, #1
 800ab80:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ab84:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ab88:	4618      	mov	r0, r3
 800ab8a:	3718      	adds	r7, #24
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bd80      	pop	{r7, pc}

0800ab90 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 800ab90:	b480      	push	{r7}
 800ab92:	b087      	sub	sp, #28
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	60f8      	str	r0, [r7, #12]
 800ab98:	460b      	mov	r3, r1
 800ab9a:	607a      	str	r2, [r7, #4]
 800ab9c:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ab9e:	2300      	movs	r3, #0
 800aba0:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800aba2:	897b      	ldrh	r3, [r7, #10]
 800aba4:	2b05      	cmp	r3, #5
 800aba6:	d905      	bls.n	800abb4 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800aba8:	23fc      	movs	r3, #252	@ 0xfc
 800abaa:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2200      	movs	r2, #0
 800abb0:	701a      	strb	r2, [r3, #0]
 800abb2:	e008      	b.n	800abc6 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800abb4:	897b      	ldrh	r3, [r7, #10]
 800abb6:	68fa      	ldr	r2, [r7, #12]
 800abb8:	4413      	add	r3, r2
 800abba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800abbe:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	7dba      	ldrb	r2, [r7, #22]
 800abc4:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800abc6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800abca:	4618      	mov	r0, r3
 800abcc:	371c      	adds	r7, #28
 800abce:	46bd      	mov	sp, r7
 800abd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd4:	4770      	bx	lr
	...

0800abd8 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b086      	sub	sp, #24
 800abdc:	af00      	add	r7, sp, #0
 800abde:	60f8      	str	r0, [r7, #12]
 800abe0:	460b      	mov	r3, r1
 800abe2:	607a      	str	r2, [r7, #4]
 800abe4:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800abe6:	2300      	movs	r3, #0
 800abe8:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 800abea:	897b      	ldrh	r3, [r7, #10]
 800abec:	68fa      	ldr	r2, [r7, #12]
 800abee:	4413      	add	r3, r2
 800abf0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800abf4:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 800abf6:	7dbb      	ldrb	r3, [r7, #22]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d107      	bne.n	800ac0c <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800abfc:	897b      	ldrh	r3, [r7, #10]
 800abfe:	68fa      	ldr	r2, [r7, #12]
 800ac00:	330c      	adds	r3, #12
 800ac02:	009b      	lsls	r3, r3, #2
 800ac04:	4413      	add	r3, r2
 800ac06:	687a      	ldr	r2, [r7, #4]
 800ac08:	605a      	str	r2, [r3, #4]
 800ac0a:	e040      	b.n	800ac8e <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 800ac0c:	897b      	ldrh	r3, [r7, #10]
 800ac0e:	2b05      	cmp	r3, #5
 800ac10:	d830      	bhi.n	800ac74 <VL53L0X_SetLimitCheckValue+0x9c>
 800ac12:	a201      	add	r2, pc, #4	@ (adr r2, 800ac18 <VL53L0X_SetLimitCheckValue+0x40>)
 800ac14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac18:	0800ac31 	.word	0x0800ac31
 800ac1c:	0800ac39 	.word	0x0800ac39
 800ac20:	0800ac4f 	.word	0x0800ac4f
 800ac24:	0800ac57 	.word	0x0800ac57
 800ac28:	0800ac5f 	.word	0x0800ac5f
 800ac2c:	0800ac5f 	.word	0x0800ac5f

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	687a      	ldr	r2, [r7, #4]
 800ac34:	635a      	str	r2, [r3, #52]	@ 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 800ac36:	e01f      	b.n	800ac78 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800ac3c:	b29b      	uxth	r3, r3
 800ac3e:	461a      	mov	r2, r3
 800ac40:	2144      	movs	r1, #68	@ 0x44
 800ac42:	68f8      	ldr	r0, [r7, #12]
 800ac44:	f004 f852 	bl	800ecec <VL53L0X_WrWord>
 800ac48:	4603      	mov	r3, r0
 800ac4a:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800ac4c:	e014      	b.n	800ac78 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	687a      	ldr	r2, [r7, #4]
 800ac52:	63da      	str	r2, [r3, #60]	@ 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 800ac54:	e010      	b.n	800ac78 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	687a      	ldr	r2, [r7, #4]
 800ac5a:	641a      	str	r2, [r3, #64]	@ 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 800ac5c:	e00c      	b.n	800ac78 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800ac62:	b29b      	uxth	r3, r3
 800ac64:	461a      	mov	r2, r3
 800ac66:	2164      	movs	r1, #100	@ 0x64
 800ac68:	68f8      	ldr	r0, [r7, #12]
 800ac6a:	f004 f83f 	bl	800ecec <VL53L0X_WrWord>
 800ac6e:	4603      	mov	r3, r0
 800ac70:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800ac72:	e001      	b.n	800ac78 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ac74:	23fc      	movs	r3, #252	@ 0xfc
 800ac76:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 800ac78:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d106      	bne.n	800ac8e <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800ac80:	897b      	ldrh	r3, [r7, #10]
 800ac82:	68fa      	ldr	r2, [r7, #12]
 800ac84:	330c      	adds	r3, #12
 800ac86:	009b      	lsls	r3, r3, #2
 800ac88:	4413      	add	r3, r2
 800ac8a:	687a      	ldr	r2, [r7, #4]
 800ac8c:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ac8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ac92:	4618      	mov	r0, r3
 800ac94:	3718      	adds	r7, #24
 800ac96:	46bd      	mov	sp, r7
 800ac98:	bd80      	pop	{r7, pc}
 800ac9a:	bf00      	nop

0800ac9c <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b088      	sub	sp, #32
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	60f8      	str	r0, [r7, #12]
 800aca4:	460b      	mov	r3, r1
 800aca6:	607a      	str	r2, [r7, #4]
 800aca8:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800acaa:	2300      	movs	r3, #0
 800acac:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 800acae:	2300      	movs	r3, #0
 800acb0:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800acb2:	897b      	ldrh	r3, [r7, #10]
 800acb4:	2b05      	cmp	r3, #5
 800acb6:	d847      	bhi.n	800ad48 <VL53L0X_GetLimitCheckValue+0xac>
 800acb8:	a201      	add	r2, pc, #4	@ (adr r2, 800acc0 <VL53L0X_GetLimitCheckValue+0x24>)
 800acba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acbe:	bf00      	nop
 800acc0:	0800acd9 	.word	0x0800acd9
 800acc4:	0800ace5 	.word	0x0800ace5
 800acc8:	0800ad0b 	.word	0x0800ad0b
 800accc:	0800ad17 	.word	0x0800ad17
 800acd0:	0800ad23 	.word	0x0800ad23
 800acd4:	0800ad23 	.word	0x0800ad23

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800acdc:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 800acde:	2300      	movs	r3, #0
 800ace0:	77bb      	strb	r3, [r7, #30]
		break;
 800ace2:	e033      	b.n	800ad4c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800ace4:	f107 0316 	add.w	r3, r7, #22
 800ace8:	461a      	mov	r2, r3
 800acea:	2144      	movs	r1, #68	@ 0x44
 800acec:	68f8      	ldr	r0, [r7, #12]
 800acee:	f004 f885 	bl	800edfc <VL53L0X_RdWord>
 800acf2:	4603      	mov	r3, r0
 800acf4:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800acf6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d102      	bne.n	800ad04 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800acfe:	8afb      	ldrh	r3, [r7, #22]
 800ad00:	025b      	lsls	r3, r3, #9
 800ad02:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 800ad04:	2301      	movs	r3, #1
 800ad06:	77bb      	strb	r3, [r7, #30]
		break;
 800ad08:	e020      	b.n	800ad4c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad0e:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 800ad10:	2300      	movs	r3, #0
 800ad12:	77bb      	strb	r3, [r7, #30]
		break;
 800ad14:	e01a      	b.n	800ad4c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad1a:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	77bb      	strb	r3, [r7, #30]
		break;
 800ad20:	e014      	b.n	800ad4c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800ad22:	f107 0316 	add.w	r3, r7, #22
 800ad26:	461a      	mov	r2, r3
 800ad28:	2164      	movs	r1, #100	@ 0x64
 800ad2a:	68f8      	ldr	r0, [r7, #12]
 800ad2c:	f004 f866 	bl	800edfc <VL53L0X_RdWord>
 800ad30:	4603      	mov	r3, r0
 800ad32:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800ad34:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d102      	bne.n	800ad42 <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800ad3c:	8afb      	ldrh	r3, [r7, #22]
 800ad3e:	025b      	lsls	r3, r3, #9
 800ad40:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 800ad42:	2300      	movs	r3, #0
 800ad44:	77bb      	strb	r3, [r7, #30]
		break;
 800ad46:	e001      	b.n	800ad4c <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ad48:	23fc      	movs	r3, #252	@ 0xfc
 800ad4a:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ad4c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d12a      	bne.n	800adaa <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 800ad54:	7fbb      	ldrb	r3, [r7, #30]
 800ad56:	2b01      	cmp	r3, #1
 800ad58:	d124      	bne.n	800ada4 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 800ad5a:	69bb      	ldr	r3, [r7, #24]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d110      	bne.n	800ad82 <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 800ad60:	897b      	ldrh	r3, [r7, #10]
 800ad62:	68fa      	ldr	r2, [r7, #12]
 800ad64:	330c      	adds	r3, #12
 800ad66:	009b      	lsls	r3, r3, #2
 800ad68:	4413      	add	r3, r2
 800ad6a:	685b      	ldr	r3, [r3, #4]
 800ad6c:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	69ba      	ldr	r2, [r7, #24]
 800ad72:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800ad74:	897b      	ldrh	r3, [r7, #10]
 800ad76:	68fa      	ldr	r2, [r7, #12]
 800ad78:	4413      	add	r3, r2
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 800ad80:	e013      	b.n	800adaa <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	69ba      	ldr	r2, [r7, #24]
 800ad86:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800ad88:	897b      	ldrh	r3, [r7, #10]
 800ad8a:	68fa      	ldr	r2, [r7, #12]
 800ad8c:	330c      	adds	r3, #12
 800ad8e:	009b      	lsls	r3, r3, #2
 800ad90:	4413      	add	r3, r2
 800ad92:	69ba      	ldr	r2, [r7, #24]
 800ad94:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800ad96:	897b      	ldrh	r3, [r7, #10]
 800ad98:	68fa      	ldr	r2, [r7, #12]
 800ad9a:	4413      	add	r3, r2
 800ad9c:	2201      	movs	r2, #1
 800ad9e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 800ada2:	e002      	b.n	800adaa <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	69ba      	ldr	r2, [r7, #24]
 800ada8:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800adaa:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800adae:	4618      	mov	r0, r3
 800adb0:	3720      	adds	r7, #32
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bd80      	pop	{r7, pc}
 800adb6:	bf00      	nop

0800adb8 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b084      	sub	sp, #16
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
 800adc0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800adc2:	2300      	movs	r3, #0
 800adc4:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 800adc6:	f107 030e 	add.w	r3, r7, #14
 800adca:	461a      	mov	r2, r3
 800adcc:	2101      	movs	r1, #1
 800adce:	6878      	ldr	r0, [r7, #4]
 800add0:	f003 ffea 	bl	800eda8 <VL53L0X_RdByte>
 800add4:	4603      	mov	r3, r0
 800add6:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 800add8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d10e      	bne.n	800adfe <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 800ade0:	7bba      	ldrb	r2, [r7, #14]
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
		if (data & (0x01 << 7))
 800ade8:	7bbb      	ldrb	r3, [r7, #14]
 800adea:	b25b      	sxtb	r3, r3
 800adec:	2b00      	cmp	r3, #0
 800adee:	da03      	bge.n	800adf8 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	2201      	movs	r2, #1
 800adf4:	701a      	strb	r2, [r3, #0]
 800adf6:	e002      	b.n	800adfe <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	2200      	movs	r2, #0
 800adfc:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800adfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d104      	bne.n	800ae10 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	781a      	ldrb	r2, [r3, #0]
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ae10:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ae14:	4618      	mov	r0, r3
 800ae16:	3710      	adds	r7, #16
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}

0800ae1c <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b084      	sub	sp, #16
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ae24:	2300      	movs	r3, #0
 800ae26:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800ae28:	f107 030e 	add.w	r3, r7, #14
 800ae2c:	4619      	mov	r1, r3
 800ae2e:	6878      	ldr	r0, [r7, #4]
 800ae30:	f7ff fbbc 	bl	800a5ac <VL53L0X_GetDeviceMode>
 800ae34:	4603      	mov	r3, r0
 800ae36:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800ae38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d107      	bne.n	800ae50 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800ae40:	7bbb      	ldrb	r3, [r7, #14]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d104      	bne.n	800ae50 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 800ae46:	6878      	ldr	r0, [r7, #4]
 800ae48:	f000 f898 	bl	800af7c <VL53L0X_StartMeasurement>
 800ae4c:	4603      	mov	r3, r0
 800ae4e:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800ae50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d104      	bne.n	800ae62 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800ae58:	6878      	ldr	r0, [r7, #4]
 800ae5a:	f001 fb9e 	bl	800c59a <VL53L0X_measurement_poll_for_completion>
 800ae5e:	4603      	mov	r3, r0
 800ae60:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800ae62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d106      	bne.n	800ae78 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800ae6a:	7bbb      	ldrb	r3, [r7, #14]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d103      	bne.n	800ae78 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	2203      	movs	r2, #3
 800ae74:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 800ae78:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	3710      	adds	r7, #16
 800ae80:	46bd      	mov	sp, r7
 800ae82:	bd80      	pop	{r7, pc}

0800ae84 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b086      	sub	sp, #24
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	60f8      	str	r0, [r7, #12]
 800ae8c:	60b9      	str	r1, [r7, #8]
 800ae8e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ae90:	2300      	movs	r3, #0
 800ae92:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 800ae94:	2301      	movs	r3, #1
 800ae96:	687a      	ldr	r2, [r7, #4]
 800ae98:	68b9      	ldr	r1, [r7, #8]
 800ae9a:	68f8      	ldr	r0, [r7, #12]
 800ae9c:	f001 fb1d 	bl	800c4da <VL53L0X_perform_ref_calibration>
 800aea0:	4603      	mov	r3, r0
 800aea2:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 800aea4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aea8:	4618      	mov	r0, r3
 800aeaa:	3718      	adds	r7, #24
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bd80      	pop	{r7, pc}

0800aeb0 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b086      	sub	sp, #24
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
 800aeb8:	460b      	mov	r3, r1
 800aeba:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aebc:	2300      	movs	r3, #0
 800aebe:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	f893 30da 	ldrb.w	r3, [r3, #218]	@ 0xda
 800aec6:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 800aec8:	7dbb      	ldrb	r3, [r7, #22]
 800aeca:	2b01      	cmp	r3, #1
 800aecc:	d005      	beq.n	800aeda <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 800aece:	7dbb      	ldrb	r3, [r7, #22]
 800aed0:	2b02      	cmp	r3, #2
 800aed2:	d002      	beq.n	800aeda <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 800aed4:	7dbb      	ldrb	r3, [r7, #22]
 800aed6:	2b03      	cmp	r3, #3
 800aed8:	d147      	bne.n	800af6a <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 800aeda:	f107 030c 	add.w	r3, r7, #12
 800aede:	f107 0210 	add.w	r2, r7, #16
 800aee2:	2101      	movs	r1, #1
 800aee4:	6878      	ldr	r0, [r7, #4]
 800aee6:	f000 fbb9 	bl	800b65c <VL53L0X_GetInterruptThresholds>
 800aeea:	4603      	mov	r3, r0
 800aeec:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 800aeee:	693b      	ldr	r3, [r7, #16]
 800aef0:	f5b3 0f7f 	cmp.w	r3, #16711680	@ 0xff0000
 800aef4:	d803      	bhi.n	800aefe <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 800aef6:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 800aef8:	f5b3 0f7f 	cmp.w	r3, #16711680	@ 0xff0000
 800aefc:	d935      	bls.n	800af6a <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 800aefe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d131      	bne.n	800af6a <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 800af06:	78fb      	ldrb	r3, [r7, #3]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d006      	beq.n	800af1a <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 800af0c:	491a      	ldr	r1, [pc, #104]	@ (800af78 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 800af0e:	6878      	ldr	r0, [r7, #4]
 800af10:	f002 ffb2 	bl	800de78 <VL53L0X_load_tuning_settings>
 800af14:	4603      	mov	r3, r0
 800af16:	75fb      	strb	r3, [r7, #23]
 800af18:	e027      	b.n	800af6a <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 800af1a:	2204      	movs	r2, #4
 800af1c:	21ff      	movs	r1, #255	@ 0xff
 800af1e:	6878      	ldr	r0, [r7, #4]
 800af20:	f003 fec0 	bl	800eca4 <VL53L0X_WrByte>
 800af24:	4603      	mov	r3, r0
 800af26:	461a      	mov	r2, r3
 800af28:	7dfb      	ldrb	r3, [r7, #23]
 800af2a:	4313      	orrs	r3, r2
 800af2c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 800af2e:	2200      	movs	r2, #0
 800af30:	2170      	movs	r1, #112	@ 0x70
 800af32:	6878      	ldr	r0, [r7, #4]
 800af34:	f003 feb6 	bl	800eca4 <VL53L0X_WrByte>
 800af38:	4603      	mov	r3, r0
 800af3a:	461a      	mov	r2, r3
 800af3c:	7dfb      	ldrb	r3, [r7, #23]
 800af3e:	4313      	orrs	r3, r2
 800af40:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800af42:	2200      	movs	r2, #0
 800af44:	21ff      	movs	r1, #255	@ 0xff
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f003 feac 	bl	800eca4 <VL53L0X_WrByte>
 800af4c:	4603      	mov	r3, r0
 800af4e:	461a      	mov	r2, r3
 800af50:	7dfb      	ldrb	r3, [r7, #23]
 800af52:	4313      	orrs	r3, r2
 800af54:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800af56:	2200      	movs	r2, #0
 800af58:	2180      	movs	r1, #128	@ 0x80
 800af5a:	6878      	ldr	r0, [r7, #4]
 800af5c:	f003 fea2 	bl	800eca4 <VL53L0X_WrByte>
 800af60:	4603      	mov	r3, r0
 800af62:	461a      	mov	r2, r3
 800af64:	7dfb      	ldrb	r3, [r7, #23]
 800af66:	4313      	orrs	r3, r2
 800af68:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 800af6a:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800af6e:	4618      	mov	r0, r3
 800af70:	3718      	adds	r7, #24
 800af72:	46bd      	mov	sp, r7
 800af74:	bd80      	pop	{r7, pc}
 800af76:	bf00      	nop
 800af78:	20000404 	.word	0x20000404

0800af7c <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b086      	sub	sp, #24
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800af84:	2300      	movs	r3, #0
 800af86:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 800af88:	2301      	movs	r3, #1
 800af8a:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800af8c:	f107 030e 	add.w	r3, r7, #14
 800af90:	4619      	mov	r1, r3
 800af92:	6878      	ldr	r0, [r7, #4]
 800af94:	f7ff fb0a 	bl	800a5ac <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 800af98:	2201      	movs	r2, #1
 800af9a:	2180      	movs	r1, #128	@ 0x80
 800af9c:	6878      	ldr	r0, [r7, #4]
 800af9e:	f003 fe81 	bl	800eca4 <VL53L0X_WrByte>
 800afa2:	4603      	mov	r3, r0
 800afa4:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800afa6:	2201      	movs	r2, #1
 800afa8:	21ff      	movs	r1, #255	@ 0xff
 800afaa:	6878      	ldr	r0, [r7, #4]
 800afac:	f003 fe7a 	bl	800eca4 <VL53L0X_WrByte>
 800afb0:	4603      	mov	r3, r0
 800afb2:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 800afb4:	2200      	movs	r2, #0
 800afb6:	2100      	movs	r1, #0
 800afb8:	6878      	ldr	r0, [r7, #4]
 800afba:	f003 fe73 	bl	800eca4 <VL53L0X_WrByte>
 800afbe:	4603      	mov	r3, r0
 800afc0:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	f893 313a 	ldrb.w	r3, [r3, #314]	@ 0x13a
 800afc8:	461a      	mov	r2, r3
 800afca:	2191      	movs	r1, #145	@ 0x91
 800afcc:	6878      	ldr	r0, [r7, #4]
 800afce:	f003 fe69 	bl	800eca4 <VL53L0X_WrByte>
 800afd2:	4603      	mov	r3, r0
 800afd4:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 800afd6:	2201      	movs	r2, #1
 800afd8:	2100      	movs	r1, #0
 800afda:	6878      	ldr	r0, [r7, #4]
 800afdc:	f003 fe62 	bl	800eca4 <VL53L0X_WrByte>
 800afe0:	4603      	mov	r3, r0
 800afe2:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800afe4:	2200      	movs	r2, #0
 800afe6:	21ff      	movs	r1, #255	@ 0xff
 800afe8:	6878      	ldr	r0, [r7, #4]
 800afea:	f003 fe5b 	bl	800eca4 <VL53L0X_WrByte>
 800afee:	4603      	mov	r3, r0
 800aff0:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 800aff2:	2200      	movs	r2, #0
 800aff4:	2180      	movs	r1, #128	@ 0x80
 800aff6:	6878      	ldr	r0, [r7, #4]
 800aff8:	f003 fe54 	bl	800eca4 <VL53L0X_WrByte>
 800affc:	4603      	mov	r3, r0
 800affe:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 800b000:	7bbb      	ldrb	r3, [r7, #14]
 800b002:	2b03      	cmp	r3, #3
 800b004:	d054      	beq.n	800b0b0 <VL53L0X_StartMeasurement+0x134>
 800b006:	2b03      	cmp	r3, #3
 800b008:	dc6c      	bgt.n	800b0e4 <VL53L0X_StartMeasurement+0x168>
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d002      	beq.n	800b014 <VL53L0X_StartMeasurement+0x98>
 800b00e:	2b01      	cmp	r3, #1
 800b010:	d034      	beq.n	800b07c <VL53L0X_StartMeasurement+0x100>
 800b012:	e067      	b.n	800b0e4 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 800b014:	2201      	movs	r2, #1
 800b016:	2100      	movs	r1, #0
 800b018:	6878      	ldr	r0, [r7, #4]
 800b01a:	f003 fe43 	bl	800eca4 <VL53L0X_WrByte>
 800b01e:	4603      	mov	r3, r0
 800b020:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 800b022:	7bfb      	ldrb	r3, [r7, #15]
 800b024:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 800b026:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d15d      	bne.n	800b0ea <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 800b02e:	2300      	movs	r3, #0
 800b030:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 800b032:	693b      	ldr	r3, [r7, #16]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d008      	beq.n	800b04a <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 800b038:	f107 030d 	add.w	r3, r7, #13
 800b03c:	461a      	mov	r2, r3
 800b03e:	2100      	movs	r1, #0
 800b040:	6878      	ldr	r0, [r7, #4]
 800b042:	f003 feb1 	bl	800eda8 <VL53L0X_RdByte>
 800b046:	4603      	mov	r3, r0
 800b048:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 800b04a:	693b      	ldr	r3, [r7, #16]
 800b04c:	3301      	adds	r3, #1
 800b04e:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 800b050:	7b7a      	ldrb	r2, [r7, #13]
 800b052:	7bfb      	ldrb	r3, [r7, #15]
 800b054:	4013      	ands	r3, r2
 800b056:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800b058:	7bfa      	ldrb	r2, [r7, #15]
 800b05a:	429a      	cmp	r2, r3
 800b05c:	d107      	bne.n	800b06e <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 800b05e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d103      	bne.n	800b06e <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800b066:	693b      	ldr	r3, [r7, #16]
 800b068:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800b06c:	d3e1      	bcc.n	800b032 <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800b06e:	693b      	ldr	r3, [r7, #16]
 800b070:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800b074:	d339      	bcc.n	800b0ea <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 800b076:	23f9      	movs	r3, #249	@ 0xf9
 800b078:	75fb      	strb	r3, [r7, #23]

		}

		break;
 800b07a:	e036      	b.n	800b0ea <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800b07c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d105      	bne.n	800b090 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800b084:	2101      	movs	r1, #1
 800b086:	6878      	ldr	r0, [r7, #4]
 800b088:	f7ff ff12 	bl	800aeb0 <VL53L0X_CheckAndLoadInterruptSettings>
 800b08c:	4603      	mov	r3, r0
 800b08e:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800b090:	2202      	movs	r2, #2
 800b092:	2100      	movs	r1, #0
 800b094:	6878      	ldr	r0, [r7, #4]
 800b096:	f003 fe05 	bl	800eca4 <VL53L0X_WrByte>
 800b09a:	4603      	mov	r3, r0
 800b09c:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 800b09e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d123      	bne.n	800b0ee <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	2204      	movs	r2, #4
 800b0aa:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
		}
		break;
 800b0ae:	e01e      	b.n	800b0ee <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800b0b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d105      	bne.n	800b0c4 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800b0b8:	2101      	movs	r1, #1
 800b0ba:	6878      	ldr	r0, [r7, #4]
 800b0bc:	f7ff fef8 	bl	800aeb0 <VL53L0X_CheckAndLoadInterruptSettings>
 800b0c0:	4603      	mov	r3, r0
 800b0c2:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800b0c4:	2204      	movs	r2, #4
 800b0c6:	2100      	movs	r1, #0
 800b0c8:	6878      	ldr	r0, [r7, #4]
 800b0ca:	f003 fdeb 	bl	800eca4 <VL53L0X_WrByte>
 800b0ce:	4603      	mov	r3, r0
 800b0d0:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 800b0d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d10b      	bne.n	800b0f2 <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	2204      	movs	r2, #4
 800b0de:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
		}
		break;
 800b0e2:	e006      	b.n	800b0f2 <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800b0e4:	23f8      	movs	r3, #248	@ 0xf8
 800b0e6:	75fb      	strb	r3, [r7, #23]
 800b0e8:	e004      	b.n	800b0f4 <VL53L0X_StartMeasurement+0x178>
		break;
 800b0ea:	bf00      	nop
 800b0ec:	e002      	b.n	800b0f4 <VL53L0X_StartMeasurement+0x178>
		break;
 800b0ee:	bf00      	nop
 800b0f0:	e000      	b.n	800b0f4 <VL53L0X_StartMeasurement+0x178>
		break;
 800b0f2:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 800b0f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	3718      	adds	r7, #24
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	bd80      	pop	{r7, pc}

0800b100 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b084      	sub	sp, #16
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
 800b108:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b10a:	2300      	movs	r3, #0
 800b10c:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	f893 30da 	ldrb.w	r3, [r3, #218]	@ 0xda
 800b114:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 800b116:	7bbb      	ldrb	r3, [r7, #14]
 800b118:	2b04      	cmp	r3, #4
 800b11a:	d112      	bne.n	800b142 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 800b11c:	f107 0308 	add.w	r3, r7, #8
 800b120:	4619      	mov	r1, r3
 800b122:	6878      	ldr	r0, [r7, #4]
 800b124:	f000 fb0e 	bl	800b744 <VL53L0X_GetInterruptMaskStatus>
 800b128:	4603      	mov	r3, r0
 800b12a:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 800b12c:	68bb      	ldr	r3, [r7, #8]
 800b12e:	2b04      	cmp	r3, #4
 800b130:	d103      	bne.n	800b13a <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	2201      	movs	r2, #1
 800b136:	701a      	strb	r2, [r3, #0]
 800b138:	e01c      	b.n	800b174 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	2200      	movs	r2, #0
 800b13e:	701a      	strb	r2, [r3, #0]
 800b140:	e018      	b.n	800b174 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 800b142:	f107 030d 	add.w	r3, r7, #13
 800b146:	461a      	mov	r2, r3
 800b148:	2114      	movs	r1, #20
 800b14a:	6878      	ldr	r0, [r7, #4]
 800b14c:	f003 fe2c 	bl	800eda8 <VL53L0X_RdByte>
 800b150:	4603      	mov	r3, r0
 800b152:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 800b154:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d10b      	bne.n	800b174 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 800b15c:	7b7b      	ldrb	r3, [r7, #13]
 800b15e:	f003 0301 	and.w	r3, r3, #1
 800b162:	2b00      	cmp	r3, #0
 800b164:	d003      	beq.n	800b16e <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 800b166:	683b      	ldr	r3, [r7, #0]
 800b168:	2201      	movs	r2, #1
 800b16a:	701a      	strb	r2, [r3, #0]
 800b16c:	e002      	b.n	800b174 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	2200      	movs	r2, #0
 800b172:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b174:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b178:	4618      	mov	r0, r3
 800b17a:	3710      	adds	r7, #16
 800b17c:	46bd      	mov	sp, r7
 800b17e:	bd80      	pop	{r7, pc}

0800b180 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800b180:	b5b0      	push	{r4, r5, r7, lr}
 800b182:	b096      	sub	sp, #88	@ 0x58
 800b184:	af02      	add	r7, sp, #8
 800b186:	6078      	str	r0, [r7, #4]
 800b188:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b18a:	2300      	movs	r3, #0
 800b18c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 800b190:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800b194:	230c      	movs	r3, #12
 800b196:	2114      	movs	r1, #20
 800b198:	6878      	ldr	r0, [r7, #4]
 800b19a:	f003 fd57 	bl	800ec4c <VL53L0X_ReadMulti>
 800b19e:	4603      	mov	r3, r0
 800b1a0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 800b1a4:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	f040 80c8 	bne.w	800b33e <VL53L0X_GetRangingMeasurementData+0x1be>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 800b1ae:	683b      	ldr	r3, [r7, #0]
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 800b1ba:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800b1be:	021b      	lsls	r3, r3, #8
 800b1c0:	b29b      	uxth	r3, r3
 800b1c2:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800b1c6:	4413      	add	r3, r2
 800b1c8:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 800b1cc:	683b      	ldr	r3, [r7, #0]
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 800b1d2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b1d6:	021b      	lsls	r3, r3, #8
 800b1d8:	b29b      	uxth	r3, r3
 800b1da:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800b1de:	4413      	add	r3, r2
 800b1e0:	b29b      	uxth	r3, r3
 800b1e2:	025b      	lsls	r3, r3, #9
 800b1e4:	647b      	str	r3, [r7, #68]	@ 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b1ea:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 800b1ec:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800b1f0:	021b      	lsls	r3, r3, #8
 800b1f2:	b29b      	uxth	r3, r3
 800b1f4:	f897 2031 	ldrb.w	r2, [r7, #49]	@ 0x31
 800b1f8:	4413      	add	r3, r2
 800b1fa:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 800b1fe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800b202:	025a      	lsls	r2, r3, #9
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 800b208:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800b20c:	021b      	lsls	r3, r3, #8
 800b20e:	b29b      	uxth	r3, r3
 800b210:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800b214:	4413      	add	r3, r2
 800b216:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 800b21a:	683b      	ldr	r3, [r7, #0]
 800b21c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800b220:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 800b222:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b226:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	f8b3 3152 	ldrh.w	r3, [r3, #338]	@ 0x152
 800b230:	87bb      	strh	r3, [r7, #60]	@ 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 800b238:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 800b23c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800b23e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b242:	d046      	beq.n	800b2d2 <VL53L0X_GetRangingMeasurementData+0x152>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 800b244:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800b246:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 800b24a:	fb02 f303 	mul.w	r3, r2, r3
 800b24e:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800b252:	4a58      	ldr	r2, [pc, #352]	@ (800b3b4 <VL53L0X_GetRangingMeasurementData+0x234>)
 800b254:	fb82 1203 	smull	r1, r2, r2, r3
 800b258:	1192      	asrs	r2, r2, #6
 800b25a:	17db      	asrs	r3, r3, #31
 800b25c:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 800b25e:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	6a1b      	ldr	r3, [r3, #32]
 800b266:	873b      	strh	r3, [r7, #56]	@ 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	7f1b      	ldrb	r3, [r3, #28]
 800b26c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 800b270:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b274:	2b00      	cmp	r3, #0
 800b276:	d02c      	beq.n	800b2d2 <VL53L0X_GetRangingMeasurementData+0x152>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 800b278:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800b27a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800b27e:	fb02 f303 	mul.w	r3, r2, r3
 800b282:	121a      	asrs	r2, r3, #8
					<= 0) {
 800b284:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
				if ((SignalRate
 800b286:	429a      	cmp	r2, r3
 800b288:	d10d      	bne.n	800b2a6 <VL53L0X_GetRangingMeasurementData+0x126>
					if (RangeFractionalEnable)
 800b28a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d004      	beq.n	800b29c <VL53L0X_GetRangingMeasurementData+0x11c>
						XtalkRangeMilliMeter = 8888;
 800b292:	f242 23b8 	movw	r3, #8888	@ 0x22b8
 800b296:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800b29a:	e016      	b.n	800b2ca <VL53L0X_GetRangingMeasurementData+0x14a>
					else
						XtalkRangeMilliMeter = 8888
 800b29c:	f648 23e0 	movw	r3, #35552	@ 0x8ae0
 800b2a0:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800b2a4:	e011      	b.n	800b2ca <VL53L0X_GetRangingMeasurementData+0x14a>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 800b2a6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800b2aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b2ac:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 800b2b0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800b2b2:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 800b2b6:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 800b2ba:	121b      	asrs	r3, r3, #8
 800b2bc:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 800b2be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b2c0:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 800b2c2:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 800b2c6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 800b2ca:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800b2ce:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
			}

		}

		if (RangeFractionalEnable) {
 800b2d2:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d00d      	beq.n	800b2f6 <VL53L0X_GetRangingMeasurementData+0x176>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 800b2da:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800b2de:	089b      	lsrs	r3, r3, #2
 800b2e0:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 800b2e2:	683b      	ldr	r3, [r7, #0]
 800b2e4:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 800b2e6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800b2ea:	b2db      	uxtb	r3, r3
 800b2ec:	019b      	lsls	r3, r3, #6
 800b2ee:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 800b2f0:	683b      	ldr	r3, [r7, #0]
 800b2f2:	75da      	strb	r2, [r3, #23]
 800b2f4:	e006      	b.n	800b304 <VL53L0X_GetRangingMeasurementData+0x184>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 800b2f6:	683b      	ldr	r3, [r7, #0]
 800b2f8:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 800b2fc:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	2200      	movs	r2, #0
 800b302:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 800b304:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800b308:	f897 103f 	ldrb.w	r1, [r7, #63]	@ 0x3f
 800b30c:	f107 0336 	add.w	r3, r7, #54	@ 0x36
 800b310:	9301      	str	r3, [sp, #4]
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	9300      	str	r3, [sp, #0]
 800b316:	4613      	mov	r3, r2
 800b318:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b31a:	6878      	ldr	r0, [r7, #4]
 800b31c:	f003 fa4a 	bl	800e7b4 <VL53L0X_get_pal_range_status>
 800b320:	4603      	mov	r3, r0
 800b322:	461a      	mov	r2, r3
 800b324:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800b328:	4313      	orrs	r3, r2
 800b32a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 800b32e:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 800b332:	2b00      	cmp	r3, #0
 800b334:	d103      	bne.n	800b33e <VL53L0X_GetRangingMeasurementData+0x1be>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 800b336:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 800b33a:	683b      	ldr	r3, [r7, #0]
 800b33c:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b33e:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 800b342:	2b00      	cmp	r3, #0
 800b344:	d12f      	bne.n	800b3a6 <VL53L0X_GetRangingMeasurementData+0x226>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	f107 040c 	add.w	r4, r7, #12
 800b34c:	f103 0550 	add.w	r5, r3, #80	@ 0x50
 800b350:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b352:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b354:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b358:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 800b360:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 800b362:	683b      	ldr	r3, [r7, #0]
 800b364:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 800b366:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 800b36a:	683b      	ldr	r3, [r7, #0]
 800b36c:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 800b36e:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 800b370:	683b      	ldr	r3, [r7, #0]
 800b372:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 800b374:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 800b37a:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 800b380:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 800b386:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 800b388:	683b      	ldr	r3, [r7, #0]
 800b38a:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 800b38c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	f103 0450 	add.w	r4, r3, #80	@ 0x50
 800b396:	f107 050c 	add.w	r5, r7, #12
 800b39a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b39c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b39e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b3a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b3a6:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
}
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	3750      	adds	r7, #80	@ 0x50
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	bdb0      	pop	{r4, r5, r7, pc}
 800b3b2:	bf00      	nop
 800b3b4:	10624dd3 	.word	0x10624dd3

0800b3b8 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b084      	sub	sp, #16
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
 800b3c0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 800b3c6:	2100      	movs	r1, #0
 800b3c8:	6878      	ldr	r0, [r7, #4]
 800b3ca:	f7ff f8c3 	bl	800a554 <VL53L0X_SetDeviceMode>
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800b3d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d104      	bne.n	800b3e4 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 800b3da:	6878      	ldr	r0, [r7, #4]
 800b3dc:	f7ff fd1e 	bl	800ae1c <VL53L0X_PerformSingleMeasurement>
 800b3e0:	4603      	mov	r3, r0
 800b3e2:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800b3e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d105      	bne.n	800b3f8 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 800b3ec:	6839      	ldr	r1, [r7, #0]
 800b3ee:	6878      	ldr	r0, [r7, #4]
 800b3f0:	f7ff fec6 	bl	800b180 <VL53L0X_GetRangingMeasurementData>
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 800b3f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d105      	bne.n	800b40c <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800b400:	2100      	movs	r1, #0
 800b402:	6878      	ldr	r0, [r7, #4]
 800b404:	f000 f95e 	bl	800b6c4 <VL53L0X_ClearInterruptMask>
 800b408:	4603      	mov	r3, r0
 800b40a:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 800b40c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b410:	4618      	mov	r0, r3
 800b412:	3710      	adds	r7, #16
 800b414:	46bd      	mov	sp, r7
 800b416:	bd80      	pop	{r7, pc}

0800b418 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b084      	sub	sp, #16
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
 800b420:	4608      	mov	r0, r1
 800b422:	4611      	mov	r1, r2
 800b424:	461a      	mov	r2, r3
 800b426:	4603      	mov	r3, r0
 800b428:	70fb      	strb	r3, [r7, #3]
 800b42a:	460b      	mov	r3, r1
 800b42c:	70bb      	strb	r3, [r7, #2]
 800b42e:	4613      	mov	r3, r2
 800b430:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b432:	2300      	movs	r3, #0
 800b434:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 800b436:	78fb      	ldrb	r3, [r7, #3]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d002      	beq.n	800b442 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 800b43c:	23f6      	movs	r3, #246	@ 0xf6
 800b43e:	73fb      	strb	r3, [r7, #15]
 800b440:	e105      	b.n	800b64e <VL53L0X_SetGpioConfig+0x236>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 800b442:	78bb      	ldrb	r3, [r7, #2]
 800b444:	2b14      	cmp	r3, #20
 800b446:	d110      	bne.n	800b46a <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800b448:	7e3b      	ldrb	r3, [r7, #24]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d102      	bne.n	800b454 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 800b44e:	2310      	movs	r3, #16
 800b450:	73bb      	strb	r3, [r7, #14]
 800b452:	e001      	b.n	800b458 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 800b454:	2301      	movs	r3, #1
 800b456:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 800b458:	7bbb      	ldrb	r3, [r7, #14]
 800b45a:	461a      	mov	r2, r3
 800b45c:	2184      	movs	r1, #132	@ 0x84
 800b45e:	6878      	ldr	r0, [r7, #4]
 800b460:	f003 fc20 	bl	800eca4 <VL53L0X_WrByte>
 800b464:	4603      	mov	r3, r0
 800b466:	73fb      	strb	r3, [r7, #15]
 800b468:	e0f1      	b.n	800b64e <VL53L0X_SetGpioConfig+0x236>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 800b46a:	78bb      	ldrb	r3, [r7, #2]
 800b46c:	2b15      	cmp	r3, #21
 800b46e:	f040 8097 	bne.w	800b5a0 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800b472:	2201      	movs	r2, #1
 800b474:	21ff      	movs	r1, #255	@ 0xff
 800b476:	6878      	ldr	r0, [r7, #4]
 800b478:	f003 fc14 	bl	800eca4 <VL53L0X_WrByte>
 800b47c:	4603      	mov	r3, r0
 800b47e:	461a      	mov	r2, r3
 800b480:	7bfb      	ldrb	r3, [r7, #15]
 800b482:	4313      	orrs	r3, r2
 800b484:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800b486:	2200      	movs	r2, #0
 800b488:	2100      	movs	r1, #0
 800b48a:	6878      	ldr	r0, [r7, #4]
 800b48c:	f003 fc0a 	bl	800eca4 <VL53L0X_WrByte>
 800b490:	4603      	mov	r3, r0
 800b492:	461a      	mov	r2, r3
 800b494:	7bfb      	ldrb	r3, [r7, #15]
 800b496:	4313      	orrs	r3, r2
 800b498:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800b49a:	2200      	movs	r2, #0
 800b49c:	21ff      	movs	r1, #255	@ 0xff
 800b49e:	6878      	ldr	r0, [r7, #4]
 800b4a0:	f003 fc00 	bl	800eca4 <VL53L0X_WrByte>
 800b4a4:	4603      	mov	r3, r0
 800b4a6:	461a      	mov	r2, r3
 800b4a8:	7bfb      	ldrb	r3, [r7, #15]
 800b4aa:	4313      	orrs	r3, r2
 800b4ac:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800b4ae:	2201      	movs	r2, #1
 800b4b0:	2180      	movs	r1, #128	@ 0x80
 800b4b2:	6878      	ldr	r0, [r7, #4]
 800b4b4:	f003 fbf6 	bl	800eca4 <VL53L0X_WrByte>
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	461a      	mov	r2, r3
 800b4bc:	7bfb      	ldrb	r3, [r7, #15]
 800b4be:	4313      	orrs	r3, r2
 800b4c0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 800b4c2:	2202      	movs	r2, #2
 800b4c4:	2185      	movs	r1, #133	@ 0x85
 800b4c6:	6878      	ldr	r0, [r7, #4]
 800b4c8:	f003 fbec 	bl	800eca4 <VL53L0X_WrByte>
 800b4cc:	4603      	mov	r3, r0
 800b4ce:	461a      	mov	r2, r3
 800b4d0:	7bfb      	ldrb	r3, [r7, #15]
 800b4d2:	4313      	orrs	r3, r2
 800b4d4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 800b4d6:	2204      	movs	r2, #4
 800b4d8:	21ff      	movs	r1, #255	@ 0xff
 800b4da:	6878      	ldr	r0, [r7, #4]
 800b4dc:	f003 fbe2 	bl	800eca4 <VL53L0X_WrByte>
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	461a      	mov	r2, r3
 800b4e4:	7bfb      	ldrb	r3, [r7, #15]
 800b4e6:	4313      	orrs	r3, r2
 800b4e8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	21cd      	movs	r1, #205	@ 0xcd
 800b4ee:	6878      	ldr	r0, [r7, #4]
 800b4f0:	f003 fbd8 	bl	800eca4 <VL53L0X_WrByte>
 800b4f4:	4603      	mov	r3, r0
 800b4f6:	461a      	mov	r2, r3
 800b4f8:	7bfb      	ldrb	r3, [r7, #15]
 800b4fa:	4313      	orrs	r3, r2
 800b4fc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 800b4fe:	2211      	movs	r2, #17
 800b500:	21cc      	movs	r1, #204	@ 0xcc
 800b502:	6878      	ldr	r0, [r7, #4]
 800b504:	f003 fbce 	bl	800eca4 <VL53L0X_WrByte>
 800b508:	4603      	mov	r3, r0
 800b50a:	461a      	mov	r2, r3
 800b50c:	7bfb      	ldrb	r3, [r7, #15]
 800b50e:	4313      	orrs	r3, r2
 800b510:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 800b512:	2207      	movs	r2, #7
 800b514:	21ff      	movs	r1, #255	@ 0xff
 800b516:	6878      	ldr	r0, [r7, #4]
 800b518:	f003 fbc4 	bl	800eca4 <VL53L0X_WrByte>
 800b51c:	4603      	mov	r3, r0
 800b51e:	461a      	mov	r2, r3
 800b520:	7bfb      	ldrb	r3, [r7, #15]
 800b522:	4313      	orrs	r3, r2
 800b524:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 800b526:	2200      	movs	r2, #0
 800b528:	21be      	movs	r1, #190	@ 0xbe
 800b52a:	6878      	ldr	r0, [r7, #4]
 800b52c:	f003 fbba 	bl	800eca4 <VL53L0X_WrByte>
 800b530:	4603      	mov	r3, r0
 800b532:	461a      	mov	r2, r3
 800b534:	7bfb      	ldrb	r3, [r7, #15]
 800b536:	4313      	orrs	r3, r2
 800b538:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 800b53a:	2206      	movs	r2, #6
 800b53c:	21ff      	movs	r1, #255	@ 0xff
 800b53e:	6878      	ldr	r0, [r7, #4]
 800b540:	f003 fbb0 	bl	800eca4 <VL53L0X_WrByte>
 800b544:	4603      	mov	r3, r0
 800b546:	461a      	mov	r2, r3
 800b548:	7bfb      	ldrb	r3, [r7, #15]
 800b54a:	4313      	orrs	r3, r2
 800b54c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 800b54e:	2209      	movs	r2, #9
 800b550:	21cc      	movs	r1, #204	@ 0xcc
 800b552:	6878      	ldr	r0, [r7, #4]
 800b554:	f003 fba6 	bl	800eca4 <VL53L0X_WrByte>
 800b558:	4603      	mov	r3, r0
 800b55a:	461a      	mov	r2, r3
 800b55c:	7bfb      	ldrb	r3, [r7, #15]
 800b55e:	4313      	orrs	r3, r2
 800b560:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800b562:	2200      	movs	r2, #0
 800b564:	21ff      	movs	r1, #255	@ 0xff
 800b566:	6878      	ldr	r0, [r7, #4]
 800b568:	f003 fb9c 	bl	800eca4 <VL53L0X_WrByte>
 800b56c:	4603      	mov	r3, r0
 800b56e:	461a      	mov	r2, r3
 800b570:	7bfb      	ldrb	r3, [r7, #15]
 800b572:	4313      	orrs	r3, r2
 800b574:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800b576:	2201      	movs	r2, #1
 800b578:	21ff      	movs	r1, #255	@ 0xff
 800b57a:	6878      	ldr	r0, [r7, #4]
 800b57c:	f003 fb92 	bl	800eca4 <VL53L0X_WrByte>
 800b580:	4603      	mov	r3, r0
 800b582:	461a      	mov	r2, r3
 800b584:	7bfb      	ldrb	r3, [r7, #15]
 800b586:	4313      	orrs	r3, r2
 800b588:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800b58a:	2200      	movs	r2, #0
 800b58c:	2100      	movs	r1, #0
 800b58e:	6878      	ldr	r0, [r7, #4]
 800b590:	f003 fb88 	bl	800eca4 <VL53L0X_WrByte>
 800b594:	4603      	mov	r3, r0
 800b596:	461a      	mov	r2, r3
 800b598:	7bfb      	ldrb	r3, [r7, #15]
 800b59a:	4313      	orrs	r3, r2
 800b59c:	73fb      	strb	r3, [r7, #15]
 800b59e:	e056      	b.n	800b64e <VL53L0X_SetGpioConfig+0x236>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 800b5a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d120      	bne.n	800b5ea <VL53L0X_SetGpioConfig+0x1d2>
			switch (Functionality) {
 800b5a8:	787b      	ldrb	r3, [r7, #1]
 800b5aa:	2b04      	cmp	r3, #4
 800b5ac:	d81b      	bhi.n	800b5e6 <VL53L0X_SetGpioConfig+0x1ce>
 800b5ae:	a201      	add	r2, pc, #4	@ (adr r2, 800b5b4 <VL53L0X_SetGpioConfig+0x19c>)
 800b5b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5b4:	0800b5c9 	.word	0x0800b5c9
 800b5b8:	0800b5cf 	.word	0x0800b5cf
 800b5bc:	0800b5d5 	.word	0x0800b5d5
 800b5c0:	0800b5db 	.word	0x0800b5db
 800b5c4:	0800b5e1 	.word	0x0800b5e1
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	73bb      	strb	r3, [r7, #14]
				break;
 800b5cc:	e00d      	b.n	800b5ea <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 800b5ce:	2301      	movs	r3, #1
 800b5d0:	73bb      	strb	r3, [r7, #14]
				break;
 800b5d2:	e00a      	b.n	800b5ea <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 800b5d4:	2302      	movs	r3, #2
 800b5d6:	73bb      	strb	r3, [r7, #14]
				break;
 800b5d8:	e007      	b.n	800b5ea <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 800b5da:	2303      	movs	r3, #3
 800b5dc:	73bb      	strb	r3, [r7, #14]
				break;
 800b5de:	e004      	b.n	800b5ea <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 800b5e0:	2304      	movs	r3, #4
 800b5e2:	73bb      	strb	r3, [r7, #14]
				break;
 800b5e4:	e001      	b.n	800b5ea <VL53L0X_SetGpioConfig+0x1d2>
			default:
				Status =
 800b5e6:	23f5      	movs	r3, #245	@ 0xf5
 800b5e8:	73fb      	strb	r3, [r7, #15]
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}

		if (Status == VL53L0X_ERROR_NONE)
 800b5ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d107      	bne.n	800b602 <VL53L0X_SetGpioConfig+0x1ea>
			Status = VL53L0X_WrByte(Dev,
 800b5f2:	7bbb      	ldrb	r3, [r7, #14]
 800b5f4:	461a      	mov	r2, r3
 800b5f6:	210a      	movs	r1, #10
 800b5f8:	6878      	ldr	r0, [r7, #4]
 800b5fa:	f003 fb53 	bl	800eca4 <VL53L0X_WrByte>
 800b5fe:	4603      	mov	r3, r0
 800b600:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 800b602:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d10f      	bne.n	800b62a <VL53L0X_SetGpioConfig+0x212>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800b60a:	7e3b      	ldrb	r3, [r7, #24]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d102      	bne.n	800b616 <VL53L0X_SetGpioConfig+0x1fe>
				data = 0;
 800b610:	2300      	movs	r3, #0
 800b612:	73bb      	strb	r3, [r7, #14]
 800b614:	e001      	b.n	800b61a <VL53L0X_SetGpioConfig+0x202>
			else
				data = (uint8_t)(1 << 4);
 800b616:	2310      	movs	r3, #16
 800b618:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 800b61a:	7bbb      	ldrb	r3, [r7, #14]
 800b61c:	22ef      	movs	r2, #239	@ 0xef
 800b61e:	2184      	movs	r1, #132	@ 0x84
 800b620:	6878      	ldr	r0, [r7, #4]
 800b622:	f003 fb8d 	bl	800ed40 <VL53L0X_UpdateByte>
 800b626:	4603      	mov	r3, r0
 800b628:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 800b62a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d103      	bne.n	800b63a <VL53L0X_SetGpioConfig+0x222>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	787a      	ldrb	r2, [r7, #1]
 800b636:	f883 20da 	strb.w	r2, [r3, #218]	@ 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 800b63a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d105      	bne.n	800b64e <VL53L0X_SetGpioConfig+0x236>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800b642:	2100      	movs	r1, #0
 800b644:	6878      	ldr	r0, [r7, #4]
 800b646:	f000 f83d 	bl	800b6c4 <VL53L0X_ClearInterruptMask>
 800b64a:	4603      	mov	r3, r0
 800b64c:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b64e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b652:	4618      	mov	r0, r3
 800b654:	3710      	adds	r7, #16
 800b656:	46bd      	mov	sp, r7
 800b658:	bd80      	pop	{r7, pc}
 800b65a:	bf00      	nop

0800b65c <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b086      	sub	sp, #24
 800b660:	af00      	add	r7, sp, #0
 800b662:	60f8      	str	r0, [r7, #12]
 800b664:	607a      	str	r2, [r7, #4]
 800b666:	603b      	str	r3, [r7, #0]
 800b668:	460b      	mov	r3, r1
 800b66a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b66c:	2300      	movs	r3, #0
 800b66e:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 800b670:	f107 0314 	add.w	r3, r7, #20
 800b674:	461a      	mov	r2, r3
 800b676:	210e      	movs	r1, #14
 800b678:	68f8      	ldr	r0, [r7, #12]
 800b67a:	f003 fbbf 	bl	800edfc <VL53L0X_RdWord>
 800b67e:	4603      	mov	r3, r0
 800b680:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800b682:	8abb      	ldrh	r3, [r7, #20]
 800b684:	045a      	lsls	r2, r3, #17
 800b686:	4b0e      	ldr	r3, [pc, #56]	@ (800b6c0 <VL53L0X_GetInterruptThresholds+0x64>)
 800b688:	4013      	ands	r3, r2
 800b68a:	687a      	ldr	r2, [r7, #4]
 800b68c:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 800b68e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d10e      	bne.n	800b6b4 <VL53L0X_GetInterruptThresholds+0x58>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 800b696:	f107 0314 	add.w	r3, r7, #20
 800b69a:	461a      	mov	r2, r3
 800b69c:	210c      	movs	r1, #12
 800b69e:	68f8      	ldr	r0, [r7, #12]
 800b6a0:	f003 fbac 	bl	800edfc <VL53L0X_RdWord>
 800b6a4:	4603      	mov	r3, r0
 800b6a6:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800b6a8:	8abb      	ldrh	r3, [r7, #20]
 800b6aa:	045a      	lsls	r2, r3, #17
 800b6ac:	4b04      	ldr	r3, [pc, #16]	@ (800b6c0 <VL53L0X_GetInterruptThresholds+0x64>)
 800b6ae:	4013      	ands	r3, r2
		*pThresholdHigh =
 800b6b0:	683a      	ldr	r2, [r7, #0]
 800b6b2:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b6b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	3718      	adds	r7, #24
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	bd80      	pop	{r7, pc}
 800b6c0:	1ffe0000 	.word	0x1ffe0000

0800b6c4 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b084      	sub	sp, #16
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
 800b6cc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 800b6d6:	2201      	movs	r2, #1
 800b6d8:	210b      	movs	r1, #11
 800b6da:	6878      	ldr	r0, [r7, #4]
 800b6dc:	f003 fae2 	bl	800eca4 <VL53L0X_WrByte>
 800b6e0:	4603      	mov	r3, r0
 800b6e2:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 800b6e4:	2200      	movs	r2, #0
 800b6e6:	210b      	movs	r1, #11
 800b6e8:	6878      	ldr	r0, [r7, #4]
 800b6ea:	f003 fadb 	bl	800eca4 <VL53L0X_WrByte>
 800b6ee:	4603      	mov	r3, r0
 800b6f0:	461a      	mov	r2, r3
 800b6f2:	7bfb      	ldrb	r3, [r7, #15]
 800b6f4:	4313      	orrs	r3, r2
 800b6f6:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 800b6f8:	f107 030d 	add.w	r3, r7, #13
 800b6fc:	461a      	mov	r2, r3
 800b6fe:	2113      	movs	r1, #19
 800b700:	6878      	ldr	r0, [r7, #4]
 800b702:	f003 fb51 	bl	800eda8 <VL53L0X_RdByte>
 800b706:	4603      	mov	r3, r0
 800b708:	461a      	mov	r2, r3
 800b70a:	7bfb      	ldrb	r3, [r7, #15]
 800b70c:	4313      	orrs	r3, r2
 800b70e:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 800b710:	7bbb      	ldrb	r3, [r7, #14]
 800b712:	3301      	adds	r3, #1
 800b714:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 800b716:	7b7b      	ldrb	r3, [r7, #13]
 800b718:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d006      	beq.n	800b72e <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 800b720:	7bbb      	ldrb	r3, [r7, #14]
 800b722:	2b02      	cmp	r3, #2
 800b724:	d803      	bhi.n	800b72e <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 800b726:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d0d3      	beq.n	800b6d6 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 800b72e:	7bbb      	ldrb	r3, [r7, #14]
 800b730:	2b02      	cmp	r3, #2
 800b732:	d901      	bls.n	800b738 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 800b734:	23f4      	movs	r3, #244	@ 0xf4
 800b736:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800b738:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b73c:	4618      	mov	r0, r3
 800b73e:	3710      	adds	r7, #16
 800b740:	46bd      	mov	sp, r7
 800b742:	bd80      	pop	{r7, pc}

0800b744 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 800b744:	b580      	push	{r7, lr}
 800b746:	b084      	sub	sp, #16
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
 800b74c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b74e:	2300      	movs	r3, #0
 800b750:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 800b752:	f107 030e 	add.w	r3, r7, #14
 800b756:	461a      	mov	r2, r3
 800b758:	2113      	movs	r1, #19
 800b75a:	6878      	ldr	r0, [r7, #4]
 800b75c:	f003 fb24 	bl	800eda8 <VL53L0X_RdByte>
 800b760:	4603      	mov	r3, r0
 800b762:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 800b764:	7bbb      	ldrb	r3, [r7, #14]
 800b766:	f003 0207 	and.w	r2, r3, #7
 800b76a:	683b      	ldr	r3, [r7, #0]
 800b76c:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 800b76e:	7bbb      	ldrb	r3, [r7, #14]
 800b770:	f003 0318 	and.w	r3, r3, #24
 800b774:	2b00      	cmp	r3, #0
 800b776:	d001      	beq.n	800b77c <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 800b778:	23fa      	movs	r3, #250	@ 0xfa
 800b77a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800b77c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b780:	4618      	mov	r0, r3
 800b782:	3710      	adds	r7, #16
 800b784:	46bd      	mov	sp, r7
 800b786:	bd80      	pop	{r7, pc}

0800b788 <VL53L0X_SetReferenceSpads>:
 * Internal functions
 *****************************************************************************/

VL53L0X_Error VL53L0X_SetReferenceSpads(VL53L0X_DEV Dev, uint32_t count,
	uint8_t isApertureSpads)
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b086      	sub	sp, #24
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	60f8      	str	r0, [r7, #12]
 800b790:	60b9      	str	r1, [r7, #8]
 800b792:	4613      	mov	r3, r2
 800b794:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b796:	2300      	movs	r3, #0
 800b798:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_reference_spads(Dev, count, isApertureSpads);
 800b79a:	79fb      	ldrb	r3, [r7, #7]
 800b79c:	461a      	mov	r2, r3
 800b79e:	68b9      	ldr	r1, [r7, #8]
 800b7a0:	68f8      	ldr	r0, [r7, #12]
 800b7a2:	f000 fc55 	bl	800c050 <VL53L0X_set_reference_spads>
 800b7a6:	4603      	mov	r3, r0
 800b7a8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);

	return Status;
 800b7aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	3718      	adds	r7, #24
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	bd80      	pop	{r7, pc}

0800b7b6 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 800b7b6:	b580      	push	{r7, lr}
 800b7b8:	b086      	sub	sp, #24
 800b7ba:	af00      	add	r7, sp, #0
 800b7bc:	60f8      	str	r0, [r7, #12]
 800b7be:	60b9      	str	r1, [r7, #8]
 800b7c0:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 800b7c6:	687a      	ldr	r2, [r7, #4]
 800b7c8:	68b9      	ldr	r1, [r7, #8]
 800b7ca:	68f8      	ldr	r0, [r7, #12]
 800b7cc:	f000 fa34 	bl	800bc38 <VL53L0X_perform_ref_spad_management>
 800b7d0:	4603      	mov	r3, r0
 800b7d2:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 800b7d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b7d8:	4618      	mov	r0, r3
 800b7da:	3718      	adds	r7, #24
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	bd80      	pop	{r7, pc}

0800b7e0 <VL53L0X_PerformContinuousRangingMeasurement>:


VL53L0X_Error VL53L0X_PerformContinuousRangingMeasurement(VL53L0X_Dev_t *device, VL53L0X_RangingMeasurementData_t *ranging_data) {
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b084      	sub	sp, #16
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]
 800b7e8:	6039      	str	r1, [r7, #0]
    VL53L0X_Error status;

    // Set the device to high accuracy mode
    status = VL53L0X_SetDeviceMode(device, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 800b7ea:	2101      	movs	r1, #1
 800b7ec:	6878      	ldr	r0, [r7, #4]
 800b7ee:	f7fe feb1 	bl	800a554 <VL53L0X_SetDeviceMode>
 800b7f2:	4603      	mov	r3, r0
 800b7f4:	73fb      	strb	r3, [r7, #15]
    if (status != VL53L0X_ERROR_NONE) {
 800b7f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d002      	beq.n	800b804 <VL53L0X_PerformContinuousRangingMeasurement+0x24>
        return status;
 800b7fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b802:	e019      	b.n	800b838 <VL53L0X_PerformContinuousRangingMeasurement+0x58>
    }

    // Start continuous ranging measurement
    status = VL53L0X_StartMeasurement(device);
 800b804:	6878      	ldr	r0, [r7, #4]
 800b806:	f7ff fbb9 	bl	800af7c <VL53L0X_StartMeasurement>
 800b80a:	4603      	mov	r3, r0
 800b80c:	73fb      	strb	r3, [r7, #15]
    if (status != VL53L0X_ERROR_NONE) {
 800b80e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d002      	beq.n	800b81c <VL53L0X_PerformContinuousRangingMeasurement+0x3c>
        return status;
 800b816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b81a:	e00d      	b.n	800b838 <VL53L0X_PerformContinuousRangingMeasurement+0x58>
    }

    // Get ranging measurement data
    status = VL53L0X_GetRangingMeasurementData(device, ranging_data);
 800b81c:	6839      	ldr	r1, [r7, #0]
 800b81e:	6878      	ldr	r0, [r7, #4]
 800b820:	f7ff fcae 	bl	800b180 <VL53L0X_GetRangingMeasurementData>
 800b824:	4603      	mov	r3, r0
 800b826:	73fb      	strb	r3, [r7, #15]
    if (status != VL53L0X_ERROR_NONE) {
 800b828:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d002      	beq.n	800b836 <VL53L0X_PerformContinuousRangingMeasurement+0x56>
        return status;
 800b830:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b834:	e000      	b.n	800b838 <VL53L0X_PerformContinuousRangingMeasurement+0x58>
    }

    return VL53L0X_ERROR_NONE;
 800b836:	2300      	movs	r3, #0
}
 800b838:	4618      	mov	r0, r3
 800b83a:	3710      	adds	r7, #16
 800b83c:	46bd      	mov	sp, r7
 800b83e:	bd80      	pop	{r7, pc}

0800b840 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b084      	sub	sp, #16
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
 800b848:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b84a:	2300      	movs	r3, #0
 800b84c:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 800b84e:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800b852:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 800b854:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b858:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 800b85a:	f107 0308 	add.w	r3, r7, #8
 800b85e:	461a      	mov	r2, r3
 800b860:	2128      	movs	r1, #40	@ 0x28
 800b862:	6878      	ldr	r0, [r7, #4]
 800b864:	f003 faca 	bl	800edfc <VL53L0X_RdWord>
 800b868:	4603      	mov	r3, r0
 800b86a:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 800b86c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d11e      	bne.n	800b8b2 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 800b874:	893b      	ldrh	r3, [r7, #8]
 800b876:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b87a:	b29b      	uxth	r3, r3
 800b87c:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 800b87e:	893b      	ldrh	r3, [r7, #8]
 800b880:	461a      	mov	r2, r3
 800b882:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b886:	429a      	cmp	r2, r3
 800b888:	dd0b      	ble.n	800b8a2 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 800b88a:	893a      	ldrh	r2, [r7, #8]
 800b88c:	897b      	ldrh	r3, [r7, #10]
 800b88e:	1ad3      	subs	r3, r2, r3
 800b890:	b29b      	uxth	r3, r3
 800b892:	b21b      	sxth	r3, r3
 800b894:	461a      	mov	r2, r3
					* 250;
 800b896:	23fa      	movs	r3, #250	@ 0xfa
 800b898:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800b89c:	683b      	ldr	r3, [r7, #0]
 800b89e:	601a      	str	r2, [r3, #0]
 800b8a0:	e007      	b.n	800b8b2 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 800b8a2:	893b      	ldrh	r3, [r7, #8]
 800b8a4:	b21b      	sxth	r3, r3
 800b8a6:	461a      	mov	r2, r3
 800b8a8:	23fa      	movs	r3, #250	@ 0xfa
 800b8aa:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	601a      	str	r2, [r3, #0]

	}

	return Status;
 800b8b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	3710      	adds	r7, #16
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	bd80      	pop	{r7, pc}

0800b8be <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 800b8be:	b480      	push	{r7}
 800b8c0:	b08b      	sub	sp, #44	@ 0x2c
 800b8c2:	af00      	add	r7, sp, #0
 800b8c4:	60f8      	str	r0, [r7, #12]
 800b8c6:	60b9      	str	r1, [r7, #8]
 800b8c8:	607a      	str	r2, [r7, #4]
 800b8ca:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 800b8cc:	2308      	movs	r3, #8
 800b8ce:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	f04f 32ff 	mov.w	r2, #4294967295
 800b8da:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 800b8dc:	687a      	ldr	r2, [r7, #4]
 800b8de:	69bb      	ldr	r3, [r7, #24]
 800b8e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8e4:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	69ba      	ldr	r2, [r7, #24]
 800b8ea:	fbb3 f2f2 	udiv	r2, r3, r2
 800b8ee:	69b9      	ldr	r1, [r7, #24]
 800b8f0:	fb01 f202 	mul.w	r2, r1, r2
 800b8f4:	1a9b      	subs	r3, r3, r2
 800b8f6:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800b8f8:	697b      	ldr	r3, [r7, #20]
 800b8fa:	627b      	str	r3, [r7, #36]	@ 0x24
 800b8fc:	e030      	b.n	800b960 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 800b8fe:	2300      	movs	r3, #0
 800b900:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 800b902:	68fa      	ldr	r2, [r7, #12]
 800b904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b906:	4413      	add	r3, r2
 800b908:	781b      	ldrb	r3, [r3, #0]
 800b90a:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 800b90c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b90e:	697b      	ldr	r3, [r7, #20]
 800b910:	429a      	cmp	r2, r3
 800b912:	d11e      	bne.n	800b952 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 800b914:	7ffa      	ldrb	r2, [r7, #31]
 800b916:	693b      	ldr	r3, [r7, #16]
 800b918:	fa42 f303 	asr.w	r3, r2, r3
 800b91c:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 800b91e:	693b      	ldr	r3, [r7, #16]
 800b920:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 800b922:	e016      	b.n	800b952 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 800b924:	7ffb      	ldrb	r3, [r7, #31]
 800b926:	f003 0301 	and.w	r3, r3, #1
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d00b      	beq.n	800b946 <get_next_good_spad+0x88>
				success = 1;
 800b92e:	2301      	movs	r3, #1
 800b930:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 800b932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b934:	69ba      	ldr	r2, [r7, #24]
 800b936:	fb03 f202 	mul.w	r2, r3, r2
 800b93a:	6a3b      	ldr	r3, [r7, #32]
 800b93c:	4413      	add	r3, r2
 800b93e:	461a      	mov	r2, r3
 800b940:	683b      	ldr	r3, [r7, #0]
 800b942:	601a      	str	r2, [r3, #0]
				break;
 800b944:	e009      	b.n	800b95a <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 800b946:	7ffb      	ldrb	r3, [r7, #31]
 800b948:	085b      	lsrs	r3, r3, #1
 800b94a:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 800b94c:	6a3b      	ldr	r3, [r7, #32]
 800b94e:	3301      	adds	r3, #1
 800b950:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 800b952:	6a3a      	ldr	r2, [r7, #32]
 800b954:	69bb      	ldr	r3, [r7, #24]
 800b956:	429a      	cmp	r2, r3
 800b958:	d3e4      	bcc.n	800b924 <get_next_good_spad+0x66>
				coarseIndex++) {
 800b95a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b95c:	3301      	adds	r3, #1
 800b95e:	627b      	str	r3, [r7, #36]	@ 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800b960:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b962:	68bb      	ldr	r3, [r7, #8]
 800b964:	429a      	cmp	r2, r3
 800b966:	d202      	bcs.n	800b96e <get_next_good_spad+0xb0>
 800b968:	7fbb      	ldrb	r3, [r7, #30]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d0c7      	beq.n	800b8fe <get_next_good_spad+0x40>
		}
	}
}
 800b96e:	bf00      	nop
 800b970:	372c      	adds	r7, #44	@ 0x2c
 800b972:	46bd      	mov	sp, r7
 800b974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b978:	4770      	bx	lr
	...

0800b97c <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 800b97c:	b480      	push	{r7}
 800b97e:	b085      	sub	sp, #20
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 800b984:	2301      	movs	r3, #1
 800b986:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	099b      	lsrs	r3, r3, #6
 800b98c:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 800b98e:	4a07      	ldr	r2, [pc, #28]	@ (800b9ac <is_aperture+0x30>)
 800b990:	68bb      	ldr	r3, [r7, #8]
 800b992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d101      	bne.n	800b99e <is_aperture+0x22>
		isAperture = 0;
 800b99a:	2300      	movs	r3, #0
 800b99c:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 800b99e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	3714      	adds	r7, #20
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9aa:	4770      	bx	lr
 800b9ac:	200005bc 	.word	0x200005bc

0800b9b0 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 800b9b0:	b480      	push	{r7}
 800b9b2:	b089      	sub	sp, #36	@ 0x24
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	60f8      	str	r0, [r7, #12]
 800b9b8:	60b9      	str	r1, [r7, #8]
 800b9ba:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800b9bc:	2300      	movs	r3, #0
 800b9be:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 800b9c0:	2308      	movs	r3, #8
 800b9c2:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 800b9c4:	687a      	ldr	r2, [r7, #4]
 800b9c6:	69bb      	ldr	r3, [r7, #24]
 800b9c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9cc:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	69ba      	ldr	r2, [r7, #24]
 800b9d2:	fbb3 f2f2 	udiv	r2, r3, r2
 800b9d6:	69b9      	ldr	r1, [r7, #24]
 800b9d8:	fb01 f202 	mul.w	r2, r1, r2
 800b9dc:	1a9b      	subs	r3, r3, r2
 800b9de:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 800b9e0:	697a      	ldr	r2, [r7, #20]
 800b9e2:	68bb      	ldr	r3, [r7, #8]
 800b9e4:	429a      	cmp	r2, r3
 800b9e6:	d302      	bcc.n	800b9ee <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 800b9e8:	23ce      	movs	r3, #206	@ 0xce
 800b9ea:	77fb      	strb	r3, [r7, #31]
 800b9ec:	e010      	b.n	800ba10 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 800b9ee:	68fa      	ldr	r2, [r7, #12]
 800b9f0:	697b      	ldr	r3, [r7, #20]
 800b9f2:	4413      	add	r3, r2
 800b9f4:	781b      	ldrb	r3, [r3, #0]
 800b9f6:	b25a      	sxtb	r2, r3
 800b9f8:	2101      	movs	r1, #1
 800b9fa:	693b      	ldr	r3, [r7, #16]
 800b9fc:	fa01 f303 	lsl.w	r3, r1, r3
 800ba00:	b25b      	sxtb	r3, r3
 800ba02:	4313      	orrs	r3, r2
 800ba04:	b259      	sxtb	r1, r3
 800ba06:	68fa      	ldr	r2, [r7, #12]
 800ba08:	697b      	ldr	r3, [r7, #20]
 800ba0a:	4413      	add	r3, r2
 800ba0c:	b2ca      	uxtb	r2, r1
 800ba0e:	701a      	strb	r2, [r3, #0]

	return status;
 800ba10:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ba14:	4618      	mov	r0, r3
 800ba16:	3724      	adds	r7, #36	@ 0x24
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1e:	4770      	bx	lr

0800ba20 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b084      	sub	sp, #16
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
 800ba28:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 800ba2a:	2306      	movs	r3, #6
 800ba2c:	683a      	ldr	r2, [r7, #0]
 800ba2e:	21b0      	movs	r1, #176	@ 0xb0
 800ba30:	6878      	ldr	r0, [r7, #4]
 800ba32:	f003 f8db 	bl	800ebec <VL53L0X_WriteMulti>
 800ba36:	4603      	mov	r3, r0
 800ba38:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 800ba3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ba3e:	4618      	mov	r0, r3
 800ba40:	3710      	adds	r7, #16
 800ba42:	46bd      	mov	sp, r7
 800ba44:	bd80      	pop	{r7, pc}

0800ba46 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800ba46:	b580      	push	{r7, lr}
 800ba48:	b084      	sub	sp, #16
 800ba4a:	af00      	add	r7, sp, #0
 800ba4c:	6078      	str	r0, [r7, #4]
 800ba4e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 800ba50:	2306      	movs	r3, #6
 800ba52:	683a      	ldr	r2, [r7, #0]
 800ba54:	21b0      	movs	r1, #176	@ 0xb0
 800ba56:	6878      	ldr	r0, [r7, #4]
 800ba58:	f003 f8f8 	bl	800ec4c <VL53L0X_ReadMulti>
 800ba5c:	4603      	mov	r3, r0
 800ba5e:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 800ba60:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ba64:	4618      	mov	r0, r3
 800ba66:	3710      	adds	r7, #16
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	bd80      	pop	{r7, pc}

0800ba6c <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b08c      	sub	sp, #48	@ 0x30
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	60f8      	str	r0, [r7, #12]
 800ba74:	607a      	str	r2, [r7, #4]
 800ba76:	603b      	str	r3, [r7, #0]
 800ba78:	460b      	mov	r3, r1
 800ba7a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 800ba82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba84:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 800ba86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba88:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ba8e:	e02b      	b.n	800bae8 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 800ba90:	f107 031c 	add.w	r3, r7, #28
 800ba94:	6a3a      	ldr	r2, [r7, #32]
 800ba96:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ba98:	6878      	ldr	r0, [r7, #4]
 800ba9a:	f7ff ff10 	bl	800b8be <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 800ba9e:	69fb      	ldr	r3, [r7, #28]
 800baa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800baa4:	d103      	bne.n	800baae <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800baa6:	23ce      	movs	r3, #206	@ 0xce
 800baa8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			break;
 800baac:	e020      	b.n	800baf0 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 800baae:	69fb      	ldr	r3, [r7, #28]
 800bab0:	461a      	mov	r2, r3
 800bab2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bab4:	4413      	add	r3, r2
 800bab6:	4618      	mov	r0, r3
 800bab8:	f7ff ff60 	bl	800b97c <is_aperture>
 800babc:	4603      	mov	r3, r0
 800babe:	461a      	mov	r2, r3
 800bac0:	7afb      	ldrb	r3, [r7, #11]
 800bac2:	4293      	cmp	r3, r2
 800bac4:	d003      	beq.n	800bace <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800bac6:	23ce      	movs	r3, #206	@ 0xce
 800bac8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			break;
 800bacc:	e010      	b.n	800baf0 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 800bace:	69fb      	ldr	r3, [r7, #28]
 800bad0:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 800bad2:	6a3a      	ldr	r2, [r7, #32]
 800bad4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800bad6:	6838      	ldr	r0, [r7, #0]
 800bad8:	f7ff ff6a 	bl	800b9b0 <enable_spad_bit>
		currentSpad++;
 800badc:	6a3b      	ldr	r3, [r7, #32]
 800bade:	3301      	adds	r3, #1
 800bae0:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800bae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bae4:	3301      	adds	r3, #1
 800bae6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bae8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800baea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800baec:	429a      	cmp	r2, r3
 800baee:	d3cf      	bcc.n	800ba90 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 800baf0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800baf2:	6a3a      	ldr	r2, [r7, #32]
 800baf4:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 800baf6:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d106      	bne.n	800bb0c <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 800bafe:	6839      	ldr	r1, [r7, #0]
 800bb00:	68f8      	ldr	r0, [r7, #12]
 800bb02:	f7ff ff8d 	bl	800ba20 <set_ref_spad_map>
 800bb06:	4603      	mov	r3, r0
 800bb08:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 800bb0c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d121      	bne.n	800bb58 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 800bb14:	f107 0314 	add.w	r3, r7, #20
 800bb18:	4619      	mov	r1, r3
 800bb1a:	68f8      	ldr	r0, [r7, #12]
 800bb1c:	f7ff ff93 	bl	800ba46 <get_ref_spad_map>
 800bb20:	4603      	mov	r3, r0
 800bb22:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

		i = 0;
 800bb26:	2300      	movs	r3, #0
 800bb28:	627b      	str	r3, [r7, #36]	@ 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 800bb2a:	e011      	b.n	800bb50 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 800bb2c:	683a      	ldr	r2, [r7, #0]
 800bb2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb30:	4413      	add	r3, r2
 800bb32:	781a      	ldrb	r2, [r3, #0]
 800bb34:	f107 0114 	add.w	r1, r7, #20
 800bb38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb3a:	440b      	add	r3, r1
 800bb3c:	781b      	ldrb	r3, [r3, #0]
 800bb3e:	429a      	cmp	r2, r3
 800bb40:	d003      	beq.n	800bb4a <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 800bb42:	23ce      	movs	r3, #206	@ 0xce
 800bb44:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				break;
 800bb48:	e006      	b.n	800bb58 <enable_ref_spads+0xec>
			}
			i++;
 800bb4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb4c:	3301      	adds	r3, #1
 800bb4e:	627b      	str	r3, [r7, #36]	@ 0x24
		while (i < size) {
 800bb50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bb52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb54:	429a      	cmp	r2, r3
 800bb56:	d3e9      	bcc.n	800bb2c <enable_ref_spads+0xc0>
		}
	}
	return status;
 800bb58:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	3730      	adds	r7, #48	@ 0x30
 800bb60:	46bd      	mov	sp, r7
 800bb62:	bd80      	pop	{r7, pc}

0800bb64 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b08a      	sub	sp, #40	@ 0x28
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
 800bb6c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800bb6e:	2300      	movs	r3, #0
 800bb70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 800bb74:	2300      	movs	r3, #0
 800bb76:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800bb80:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 800bb84:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d107      	bne.n	800bb9c <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 800bb8c:	22c0      	movs	r2, #192	@ 0xc0
 800bb8e:	2101      	movs	r1, #1
 800bb90:	6878      	ldr	r0, [r7, #4]
 800bb92:	f003 f887 	bl	800eca4 <VL53L0X_WrByte>
 800bb96:	4603      	mov	r3, r0
 800bb98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 800bb9c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d108      	bne.n	800bbb6 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 800bba4:	f107 0308 	add.w	r3, r7, #8
 800bba8:	4619      	mov	r1, r3
 800bbaa:	6878      	ldr	r0, [r7, #4]
 800bbac:	f7ff fc04 	bl	800b3b8 <VL53L0X_PerformSingleRangingMeasurement>
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 800bbb6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d107      	bne.n	800bbce <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800bbbe:	2201      	movs	r2, #1
 800bbc0:	21ff      	movs	r1, #255	@ 0xff
 800bbc2:	6878      	ldr	r0, [r7, #4]
 800bbc4:	f003 f86e 	bl	800eca4 <VL53L0X_WrByte>
 800bbc8:	4603      	mov	r3, r0
 800bbca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (status == VL53L0X_ERROR_NONE)
 800bbce:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d107      	bne.n	800bbe6 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 800bbd6:	683a      	ldr	r2, [r7, #0]
 800bbd8:	21b6      	movs	r1, #182	@ 0xb6
 800bbda:	6878      	ldr	r0, [r7, #4]
 800bbdc:	f003 f90e 	bl	800edfc <VL53L0X_RdWord>
 800bbe0:	4603      	mov	r3, r0
 800bbe2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 800bbe6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d107      	bne.n	800bbfe <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800bbee:	2200      	movs	r2, #0
 800bbf0:	21ff      	movs	r1, #255	@ 0xff
 800bbf2:	6878      	ldr	r0, [r7, #4]
 800bbf4:	f003 f856 	bl	800eca4 <VL53L0X_WrByte>
 800bbf8:	4603      	mov	r3, r0
 800bbfa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (status == VL53L0X_ERROR_NONE) {
 800bbfe:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d112      	bne.n	800bc2c <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800bc06:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bc0a:	461a      	mov	r2, r3
 800bc0c:	2101      	movs	r1, #1
 800bc0e:	6878      	ldr	r0, [r7, #4]
 800bc10:	f003 f848 	bl	800eca4 <VL53L0X_WrByte>
 800bc14:	4603      	mov	r3, r0
 800bc16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 800bc1a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d104      	bne.n	800bc2c <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800bc28:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
	}

	return status;
 800bc2c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800bc30:	4618      	mov	r0, r3
 800bc32:	3728      	adds	r7, #40	@ 0x28
 800bc34:	46bd      	mov	sp, r7
 800bc36:	bd80      	pop	{r7, pc}

0800bc38 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 800bc38:	b590      	push	{r4, r7, lr}
 800bc3a:	b09d      	sub	sp, #116	@ 0x74
 800bc3c:	af06      	add	r7, sp, #24
 800bc3e:	60f8      	str	r0, [r7, #12]
 800bc40:	60b9      	str	r1, [r7, #8]
 800bc42:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bc44:	2300      	movs	r3, #0
 800bc46:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 800bc4a:	23b4      	movs	r3, #180	@ 0xb4
 800bc4c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
	uint32_t minimumSpadCount = 3;
 800bc50:	2303      	movs	r3, #3
 800bc52:	637b      	str	r3, [r7, #52]	@ 0x34
	uint32_t maxSpadCount = 44;
 800bc54:	232c      	movs	r3, #44	@ 0x2c
 800bc56:	633b      	str	r3, [r7, #48]	@ 0x30
	uint32_t currentSpadIndex = 0;
 800bc58:	2300      	movs	r3, #0
 800bc5a:	653b      	str	r3, [r7, #80]	@ 0x50
	uint32_t lastSpadIndex = 0;
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 800bc60:	2300      	movs	r3, #0
 800bc62:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 800bc64:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 800bc68:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
	uint32_t index = 0;
 800bc6e:	2300      	movs	r3, #0
 800bc70:	64bb      	str	r3, [r7, #72]	@ 0x48
	uint32_t spadArraySize = 6;
 800bc72:	2306      	movs	r3, #6
 800bc74:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t signalRateDiff = 0;
 800bc76:	2300      	movs	r3, #0
 800bc78:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t lastSignalRateDiff = 0;
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	647b      	str	r3, [r7, #68]	@ 0x44
	uint8_t complete = 0;
 800bc7e:	2300      	movs	r3, #0
 800bc80:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
	uint8_t VhvSettings = 0;
 800bc84:	2300      	movs	r3, #0
 800bc86:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 800bc88:	2300      	movs	r3, #0
 800bc8a:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	uint8_t	 isApertureSpads_int = 0;
 800bc90:	2300      	movs	r3, #0
 800bc92:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	f8b3 313c 	ldrh.w	r3, [r3, #316]	@ 0x13c
 800bc9c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 800bc9e:	2300      	movs	r3, #0
 800bca0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bca2:	e009      	b.n	800bcb8 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800bca4:	68fa      	ldr	r2, [r7, #12]
 800bca6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bca8:	4413      	add	r3, r2
 800bcaa:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800bcae:	2200      	movs	r2, #0
 800bcb0:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800bcb2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bcb4:	3301      	adds	r3, #1
 800bcb6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bcb8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bcba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcbc:	429a      	cmp	r2, r3
 800bcbe:	d3f1      	bcc.n	800bca4 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800bcc0:	2201      	movs	r2, #1
 800bcc2:	21ff      	movs	r1, #255	@ 0xff
 800bcc4:	68f8      	ldr	r0, [r7, #12]
 800bcc6:	f002 ffed 	bl	800eca4 <VL53L0X_WrByte>
 800bcca:	4603      	mov	r3, r0
 800bccc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800bcd0:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d107      	bne.n	800bce8 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 800bcd8:	2200      	movs	r2, #0
 800bcda:	214f      	movs	r1, #79	@ 0x4f
 800bcdc:	68f8      	ldr	r0, [r7, #12]
 800bcde:	f002 ffe1 	bl	800eca4 <VL53L0X_WrByte>
 800bce2:	4603      	mov	r3, r0
 800bce4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800bce8:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d107      	bne.n	800bd00 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 800bcf0:	222c      	movs	r2, #44	@ 0x2c
 800bcf2:	214e      	movs	r1, #78	@ 0x4e
 800bcf4:	68f8      	ldr	r0, [r7, #12]
 800bcf6:	f002 ffd5 	bl	800eca4 <VL53L0X_WrByte>
 800bcfa:	4603      	mov	r3, r0
 800bcfc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800bd00:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d107      	bne.n	800bd18 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800bd08:	2200      	movs	r2, #0
 800bd0a:	21ff      	movs	r1, #255	@ 0xff
 800bd0c:	68f8      	ldr	r0, [r7, #12]
 800bd0e:	f002 ffc9 	bl	800eca4 <VL53L0X_WrByte>
 800bd12:	4603      	mov	r3, r0
 800bd14:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800bd18:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d109      	bne.n	800bd34 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 800bd20:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800bd24:	461a      	mov	r2, r3
 800bd26:	21b6      	movs	r1, #182	@ 0xb6
 800bd28:	68f8      	ldr	r0, [r7, #12]
 800bd2a:	f002 ffbb 	bl	800eca4 <VL53L0X_WrByte>
 800bd2e:	4603      	mov	r3, r0
 800bd30:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 800bd34:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d107      	bne.n	800bd4c <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	2180      	movs	r1, #128	@ 0x80
 800bd40:	68f8      	ldr	r0, [r7, #12]
 800bd42:	f002 ffaf 	bl	800eca4 <VL53L0X_WrByte>
 800bd46:	4603      	mov	r3, r0
 800bd48:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 800bd4c:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d10a      	bne.n	800bd6a <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 800bd54:	f107 0210 	add.w	r2, r7, #16
 800bd58:	f107 0111 	add.w	r1, r7, #17
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	68f8      	ldr	r0, [r7, #12]
 800bd60:	f000 fbbb 	bl	800c4da <VL53L0X_perform_ref_calibration>
 800bd64:	4603      	mov	r3, r0
 800bd66:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 800bd6a:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d121      	bne.n	800bdb6 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 800bd72:	2300      	movs	r3, #0
 800bd74:	653b      	str	r3, [r7, #80]	@ 0x50
		lastSpadIndex = currentSpadIndex;
 800bd76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd78:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
		Status = enable_ref_spads(Dev,
 800bd7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bd80:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	f503 7095 	add.w	r0, r3, #298	@ 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	f503 7492 	add.w	r4, r3, #292	@ 0x124
		Status = enable_ref_spads(Dev,
 800bd8e:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800bd92:	f107 0218 	add.w	r2, r7, #24
 800bd96:	9204      	str	r2, [sp, #16]
 800bd98:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bd9a:	9203      	str	r2, [sp, #12]
 800bd9c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bd9e:	9202      	str	r2, [sp, #8]
 800bda0:	9301      	str	r3, [sp, #4]
 800bda2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bda4:	9300      	str	r3, [sp, #0]
 800bda6:	4623      	mov	r3, r4
 800bda8:	4602      	mov	r2, r0
 800bdaa:	68f8      	ldr	r0, [r7, #12]
 800bdac:	f7ff fe5e 	bl	800ba6c <enable_ref_spads>
 800bdb0:	4603      	mov	r3, r0
 800bdb2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800bdb6:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d174      	bne.n	800bea8 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 800bdbe:	69bb      	ldr	r3, [r7, #24]
 800bdc0:	653b      	str	r3, [r7, #80]	@ 0x50

		Status = perform_ref_signal_measurement(Dev,
 800bdc2:	f107 0312 	add.w	r3, r7, #18
 800bdc6:	4619      	mov	r1, r3
 800bdc8:	68f8      	ldr	r0, [r7, #12]
 800bdca:	f7ff fecb 	bl	800bb64 <perform_ref_signal_measurement>
 800bdce:	4603      	mov	r3, r0
 800bdd0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 800bdd4:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d161      	bne.n	800bea0 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 800bddc:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 800bdde:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800bde0:	429a      	cmp	r2, r3
 800bde2:	d25d      	bcs.n	800bea0 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 800bde4:	2300      	movs	r3, #0
 800bde6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bde8:	e009      	b.n	800bdfe <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800bdea:	68fa      	ldr	r2, [r7, #12]
 800bdec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bdee:	4413      	add	r3, r2
 800bdf0:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 800bdf8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bdfa:	3301      	adds	r3, #1
 800bdfc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bdfe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800be00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be02:	429a      	cmp	r2, r3
 800be04:	d3f1      	bcc.n	800bdea <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 800be06:	e002      	b.n	800be0e <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 800be08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be0a:	3301      	adds	r3, #1
 800be0c:	653b      	str	r3, [r7, #80]	@ 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 800be0e:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 800be12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be14:	4413      	add	r3, r2
 800be16:	4618      	mov	r0, r3
 800be18:	f7ff fdb0 	bl	800b97c <is_aperture>
 800be1c:	4603      	mov	r3, r0
				== 0) && (currentSpadIndex < maxSpadCount)) {
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d103      	bne.n	800be2a <VL53L0X_perform_ref_spad_management+0x1f2>
 800be22:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800be24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be26:	429a      	cmp	r2, r3
 800be28:	d3ee      	bcc.n	800be08 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 800be2a:	2301      	movs	r3, #1
 800be2c:	64fb      	str	r3, [r7, #76]	@ 0x4c

			Status = enable_ref_spads(Dev,
 800be2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800be30:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	f503 7095 	add.w	r0, r3, #298	@ 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	f503 7492 	add.w	r4, r3, #292	@ 0x124
			Status = enable_ref_spads(Dev,
 800be3e:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800be42:	f107 0218 	add.w	r2, r7, #24
 800be46:	9204      	str	r2, [sp, #16]
 800be48:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800be4a:	9203      	str	r2, [sp, #12]
 800be4c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800be4e:	9202      	str	r2, [sp, #8]
 800be50:	9301      	str	r3, [sp, #4]
 800be52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be54:	9300      	str	r3, [sp, #0]
 800be56:	4623      	mov	r3, r4
 800be58:	4602      	mov	r2, r0
 800be5a:	68f8      	ldr	r0, [r7, #12]
 800be5c:	f7ff fe06 	bl	800ba6c <enable_ref_spads>
 800be60:	4603      	mov	r3, r0
 800be62:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800be66:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d11b      	bne.n	800bea6 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 800be6e:	69bb      	ldr	r3, [r7, #24]
 800be70:	653b      	str	r3, [r7, #80]	@ 0x50
				Status = perform_ref_signal_measurement(Dev,
 800be72:	f107 0312 	add.w	r3, r7, #18
 800be76:	4619      	mov	r1, r3
 800be78:	68f8      	ldr	r0, [r7, #12]
 800be7a:	f7ff fe73 	bl	800bb64 <perform_ref_signal_measurement>
 800be7e:	4603      	mov	r3, r0
 800be80:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 800be84:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d10c      	bne.n	800bea6 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 800be8c:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 800be8e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800be90:	429a      	cmp	r2, r3
 800be92:	d208      	bcs.n	800bea6 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 800be94:	2301      	movs	r3, #1
 800be96:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
					refSpadCount_int = minimumSpadCount;
 800be9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 800be9e:	e002      	b.n	800bea6 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 800bea0:	2300      	movs	r3, #0
 800bea2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bea4:	e000      	b.n	800bea8 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 800bea6:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800bea8:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800beac:	2b00      	cmp	r3, #0
 800beae:	f040 80af 	bne.w	800c010 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 800beb2:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 800beb4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800beb6:	429a      	cmp	r2, r3
 800beb8:	f240 80aa 	bls.w	800c010 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 800bebc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bebe:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
		refSpadCount_int	= minimumSpadCount;
 800bec2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bec4:	63fb      	str	r3, [r7, #60]	@ 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	f503 7192 	add.w	r1, r3, #292	@ 0x124
 800becc:	f107 031c 	add.w	r3, r7, #28
 800bed0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bed2:	4618      	mov	r0, r3
 800bed4:	f007 fda9 	bl	8013a2a <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 800bed8:	8a7b      	ldrh	r3, [r7, #18]
 800beda:	461a      	mov	r2, r3
 800bedc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800bede:	1ad3      	subs	r3, r2, r3
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	bfb8      	it	lt
 800bee4:	425b      	neglt	r3, r3
 800bee6:	647b      	str	r3, [r7, #68]	@ 0x44
			targetRefRate);
		complete = 0;
 800bee8:	2300      	movs	r3, #0
 800beea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

		while (!complete) {
 800beee:	e086      	b.n	800bffe <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	f503 7095 	add.w	r0, r3, #298	@ 0x12a
			get_next_good_spad(
 800bef6:	f107 0314 	add.w	r3, r7, #20
 800befa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800befc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800befe:	f7ff fcde 	bl	800b8be <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 800bf02:	697b      	ldr	r3, [r7, #20]
 800bf04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf08:	d103      	bne.n	800bf12 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 800bf0a:	23ce      	movs	r3, #206	@ 0xce
 800bf0c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
				break;
 800bf10:	e07e      	b.n	800c010 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 800bf12:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800bf16:	697a      	ldr	r2, [r7, #20]
 800bf18:	4413      	add	r3, r2
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	f7ff fd2e 	bl	800b97c <is_aperture>
 800bf20:	4603      	mov	r3, r0
 800bf22:	461a      	mov	r2, r3
 800bf24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bf26:	4293      	cmp	r3, r2
 800bf28:	d003      	beq.n	800bf32 <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 800bf2a:	2301      	movs	r3, #1
 800bf2c:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
				break;
 800bf30:	e06e      	b.n	800c010 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 800bf32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf34:	3301      	adds	r3, #1
 800bf36:	63fb      	str	r3, [r7, #60]	@ 0x3c

			currentSpadIndex = nextGoodSpad;
 800bf38:	697b      	ldr	r3, [r7, #20]
 800bf3a:	653b      	str	r3, [r7, #80]	@ 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	f503 7392 	add.w	r3, r3, #292	@ 0x124
			Status = enable_spad_bit(
 800bf42:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bf44:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bf46:	4618      	mov	r0, r3
 800bf48:	f7ff fd32 	bl	800b9b0 <enable_spad_bit>
 800bf4c:	4603      	mov	r3, r0
 800bf4e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800bf52:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d10c      	bne.n	800bf74 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 800bf5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf5c:	3301      	adds	r3, #1
 800bf5e:	653b      	str	r3, [r7, #80]	@ 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	f503 7392 	add.w	r3, r3, #292	@ 0x124
				Status = set_ref_spad_map(Dev,
 800bf66:	4619      	mov	r1, r3
 800bf68:	68f8      	ldr	r0, [r7, #12]
 800bf6a:	f7ff fd59 	bl	800ba20 <set_ref_spad_map>
 800bf6e:	4603      	mov	r3, r0
 800bf70:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 800bf74:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d146      	bne.n	800c00a <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 800bf7c:	f107 0312 	add.w	r3, r7, #18
 800bf80:	4619      	mov	r1, r3
 800bf82:	68f8      	ldr	r0, [r7, #12]
 800bf84:	f7ff fdee 	bl	800bb64 <perform_ref_signal_measurement>
 800bf88:	4603      	mov	r3, r0
 800bf8a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 800bf8e:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d13b      	bne.n	800c00e <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 800bf96:	8a7b      	ldrh	r3, [r7, #18]
 800bf98:	461a      	mov	r2, r3
 800bf9a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800bf9c:	1ad3      	subs	r3, r2, r3
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	bfb8      	it	lt
 800bfa2:	425b      	neglt	r3, r3
 800bfa4:	627b      	str	r3, [r7, #36]	@ 0x24

			if (peakSignalRateRef > targetRefRate) {
 800bfa6:	8a7b      	ldrh	r3, [r7, #18]
 800bfa8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800bfaa:	429a      	cmp	r2, r3
 800bfac:	d21c      	bcs.n	800bfe8 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 800bfae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bfb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bfb2:	429a      	cmp	r2, r3
 800bfb4:	d914      	bls.n	800bfe0 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 800bfb6:	f107 031c 	add.w	r3, r7, #28
 800bfba:	4619      	mov	r1, r3
 800bfbc:	68f8      	ldr	r0, [r7, #12]
 800bfbe:	f7ff fd2f 	bl	800ba20 <set_ref_spad_map>
 800bfc2:	4603      	mov	r3, r0
 800bfc4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	f503 7392 	add.w	r3, r3, #292	@ 0x124
					memcpy(
 800bfce:	f107 011c 	add.w	r1, r7, #28
 800bfd2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	f007 fd28 	bl	8013a2a <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 800bfda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bfdc:	3b01      	subs	r3, #1
 800bfde:	63fb      	str	r3, [r7, #60]	@ 0x3c
				}
				complete = 1;
 800bfe0:	2301      	movs	r3, #1
 800bfe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bfe6:	e00a      	b.n	800bffe <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 800bfe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfea:	647b      	str	r3, [r7, #68]	@ 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	f503 7192 	add.w	r1, r3, #292	@ 0x124
				memcpy(lastSpadArray,
 800bff2:	f107 031c 	add.w	r3, r7, #28
 800bff6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bff8:	4618      	mov	r0, r3
 800bffa:	f007 fd16 	bl	8013a2a <memcpy>
		while (!complete) {
 800bffe:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c002:	2b00      	cmp	r3, #0
 800c004:	f43f af74 	beq.w	800bef0 <VL53L0X_perform_ref_spad_management+0x2b8>
 800c008:	e002      	b.n	800c010 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800c00a:	bf00      	nop
 800c00c:	e000      	b.n	800c010 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800c00e:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800c010:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800c014:	2b00      	cmp	r3, #0
 800c016:	d115      	bne.n	800c044 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 800c018:	68bb      	ldr	r3, [r7, #8]
 800c01a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c01c:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 800c024:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	2201      	movs	r2, #1
 800c02a:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c02e:	68bb      	ldr	r3, [r7, #8]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	b2da      	uxtb	r2, r3
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	f883 2113 	strb.w	r2, [r3, #275]	@ 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	781a      	ldrb	r2, [r3, #0]
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 800c044:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
}
 800c048:	4618      	mov	r0, r3
 800c04a:	375c      	adds	r7, #92	@ 0x5c
 800c04c:	46bd      	mov	sp, r7
 800c04e:	bd90      	pop	{r4, r7, pc}

0800c050 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 800c050:	b590      	push	{r4, r7, lr}
 800c052:	b093      	sub	sp, #76	@ 0x4c
 800c054:	af06      	add	r7, sp, #24
 800c056:	60f8      	str	r0, [r7, #12]
 800c058:	60b9      	str	r1, [r7, #8]
 800c05a:	4613      	mov	r3, r2
 800c05c:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c05e:	2300      	movs	r3, #0
 800c060:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint32_t currentSpadIndex = 0;
 800c064:	2300      	movs	r3, #0
 800c066:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint8_t startSelect = 0xB4;
 800c068:	23b4      	movs	r3, #180	@ 0xb4
 800c06a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint32_t spadArraySize = 6;
 800c06e:	2306      	movs	r3, #6
 800c070:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 800c072:	232c      	movs	r3, #44	@ 0x2c
 800c074:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800c076:	2201      	movs	r2, #1
 800c078:	21ff      	movs	r1, #255	@ 0xff
 800c07a:	68f8      	ldr	r0, [r7, #12]
 800c07c:	f002 fe12 	bl	800eca4 <VL53L0X_WrByte>
 800c080:	4603      	mov	r3, r0
 800c082:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800c086:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d107      	bne.n	800c09e <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 800c08e:	2200      	movs	r2, #0
 800c090:	214f      	movs	r1, #79	@ 0x4f
 800c092:	68f8      	ldr	r0, [r7, #12]
 800c094:	f002 fe06 	bl	800eca4 <VL53L0X_WrByte>
 800c098:	4603      	mov	r3, r0
 800c09a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800c09e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d107      	bne.n	800c0b6 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 800c0a6:	222c      	movs	r2, #44	@ 0x2c
 800c0a8:	214e      	movs	r1, #78	@ 0x4e
 800c0aa:	68f8      	ldr	r0, [r7, #12]
 800c0ac:	f002 fdfa 	bl	800eca4 <VL53L0X_WrByte>
 800c0b0:	4603      	mov	r3, r0
 800c0b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800c0b6:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d107      	bne.n	800c0ce <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800c0be:	2200      	movs	r2, #0
 800c0c0:	21ff      	movs	r1, #255	@ 0xff
 800c0c2:	68f8      	ldr	r0, [r7, #12]
 800c0c4:	f002 fdee 	bl	800eca4 <VL53L0X_WrByte>
 800c0c8:	4603      	mov	r3, r0
 800c0ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800c0ce:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d109      	bne.n	800c0ea <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 800c0d6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800c0da:	461a      	mov	r2, r3
 800c0dc:	21b6      	movs	r1, #182	@ 0xb6
 800c0de:	68f8      	ldr	r0, [r7, #12]
 800c0e0:	f002 fde0 	bl	800eca4 <VL53L0X_WrByte>
 800c0e4:	4603      	mov	r3, r0
 800c0e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	627b      	str	r3, [r7, #36]	@ 0x24
 800c0ee:	e009      	b.n	800c104 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800c0f0:	68fa      	ldr	r2, [r7, #12]
 800c0f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0f4:	4413      	add	r3, r2
 800c0f6:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800c0fa:	2200      	movs	r2, #0
 800c0fc:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800c0fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c100:	3301      	adds	r3, #1
 800c102:	627b      	str	r3, [r7, #36]	@ 0x24
 800c104:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c106:	69fb      	ldr	r3, [r7, #28]
 800c108:	429a      	cmp	r2, r3
 800c10a:	d3f1      	bcc.n	800c0f0 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 800c10c:	79fb      	ldrb	r3, [r7, #7]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d011      	beq.n	800c136 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800c112:	e002      	b.n	800c11a <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 800c114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c116:	3301      	adds	r3, #1
 800c118:	62bb      	str	r3, [r7, #40]	@ 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800c11a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800c11e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c120:	4413      	add	r3, r2
 800c122:	4618      	mov	r0, r3
 800c124:	f7ff fc2a 	bl	800b97c <is_aperture>
 800c128:	4603      	mov	r3, r0
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d103      	bne.n	800c136 <VL53L0X_set_reference_spads+0xe6>
 800c12e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c130:	69bb      	ldr	r3, [r7, #24]
 800c132:	429a      	cmp	r2, r3
 800c134:	d3ee      	bcc.n	800c114 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	f503 7095 	add.w	r0, r3, #298	@ 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	f503 7492 	add.w	r4, r3, #292	@ 0x124
	Status = enable_ref_spads(Dev,
 800c142:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800c146:	79f9      	ldrb	r1, [r7, #7]
 800c148:	f107 0214 	add.w	r2, r7, #20
 800c14c:	9204      	str	r2, [sp, #16]
 800c14e:	68ba      	ldr	r2, [r7, #8]
 800c150:	9203      	str	r2, [sp, #12]
 800c152:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c154:	9202      	str	r2, [sp, #8]
 800c156:	9301      	str	r3, [sp, #4]
 800c158:	69fb      	ldr	r3, [r7, #28]
 800c15a:	9300      	str	r3, [sp, #0]
 800c15c:	4623      	mov	r3, r4
 800c15e:	4602      	mov	r2, r0
 800c160:	68f8      	ldr	r0, [r7, #12]
 800c162:	f7ff fc83 	bl	800ba6c <enable_ref_spads>
 800c166:	4603      	mov	r3, r0
 800c168:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 800c16c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800c170:	2b00      	cmp	r3, #0
 800c172:	d10c      	bne.n	800c18e <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	2201      	movs	r2, #1
 800c178:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c17c:	68bb      	ldr	r3, [r7, #8]
 800c17e:	b2da      	uxtb	r2, r3
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	f883 2113 	strb.w	r2, [r3, #275]	@ 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	79fa      	ldrb	r2, [r7, #7]
 800c18a:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 800c18e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800c192:	4618      	mov	r0, r3
 800c194:	3734      	adds	r7, #52	@ 0x34
 800c196:	46bd      	mov	sp, r7
 800c198:	bd90      	pop	{r4, r7, pc}

0800c19a <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 800c19a:	b580      	push	{r7, lr}
 800c19c:	b084      	sub	sp, #16
 800c19e:	af00      	add	r7, sp, #0
 800c1a0:	6078      	str	r0, [r7, #4]
 800c1a2:	460b      	mov	r3, r1
 800c1a4:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800c1aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d10a      	bne.n	800c1c8 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800c1b2:	78fb      	ldrb	r3, [r7, #3]
 800c1b4:	f043 0301 	orr.w	r3, r3, #1
 800c1b8:	b2db      	uxtb	r3, r3
 800c1ba:	461a      	mov	r2, r3
 800c1bc:	2100      	movs	r1, #0
 800c1be:	6878      	ldr	r0, [r7, #4]
 800c1c0:	f002 fd70 	bl	800eca4 <VL53L0X_WrByte>
 800c1c4:	4603      	mov	r3, r0
 800c1c6:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 800c1c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d104      	bne.n	800c1da <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800c1d0:	6878      	ldr	r0, [r7, #4]
 800c1d2:	f000 f9e2 	bl	800c59a <VL53L0X_measurement_poll_for_completion>
 800c1d6:	4603      	mov	r3, r0
 800c1d8:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800c1da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d105      	bne.n	800c1ee <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800c1e2:	2100      	movs	r1, #0
 800c1e4:	6878      	ldr	r0, [r7, #4]
 800c1e6:	f7ff fa6d 	bl	800b6c4 <VL53L0X_ClearInterruptMask>
 800c1ea:	4603      	mov	r3, r0
 800c1ec:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800c1ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d106      	bne.n	800c204 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	2100      	movs	r1, #0
 800c1fa:	6878      	ldr	r0, [r7, #4]
 800c1fc:	f002 fd52 	bl	800eca4 <VL53L0X_WrByte>
 800c200:	4603      	mov	r3, r0
 800c202:	73fb      	strb	r3, [r7, #15]

	return Status;
 800c204:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c208:	4618      	mov	r0, r3
 800c20a:	3710      	adds	r7, #16
 800c20c:	46bd      	mov	sp, r7
 800c20e:	bd80      	pop	{r7, pc}

0800c210 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 800c210:	b580      	push	{r7, lr}
 800c212:	b084      	sub	sp, #16
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
 800c218:	4608      	mov	r0, r1
 800c21a:	4611      	mov	r1, r2
 800c21c:	461a      	mov	r2, r3
 800c21e:	4603      	mov	r3, r0
 800c220:	70fb      	strb	r3, [r7, #3]
 800c222:	460b      	mov	r3, r1
 800c224:	70bb      	strb	r3, [r7, #2]
 800c226:	4613      	mov	r3, r2
 800c228:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c22a:	2300      	movs	r3, #0
 800c22c:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 800c22e:	2300      	movs	r3, #0
 800c230:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800c232:	2201      	movs	r2, #1
 800c234:	21ff      	movs	r1, #255	@ 0xff
 800c236:	6878      	ldr	r0, [r7, #4]
 800c238:	f002 fd34 	bl	800eca4 <VL53L0X_WrByte>
 800c23c:	4603      	mov	r3, r0
 800c23e:	461a      	mov	r2, r3
 800c240:	7bfb      	ldrb	r3, [r7, #15]
 800c242:	4313      	orrs	r3, r2
 800c244:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800c246:	2200      	movs	r2, #0
 800c248:	2100      	movs	r1, #0
 800c24a:	6878      	ldr	r0, [r7, #4]
 800c24c:	f002 fd2a 	bl	800eca4 <VL53L0X_WrByte>
 800c250:	4603      	mov	r3, r0
 800c252:	461a      	mov	r2, r3
 800c254:	7bfb      	ldrb	r3, [r7, #15]
 800c256:	4313      	orrs	r3, r2
 800c258:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800c25a:	2200      	movs	r2, #0
 800c25c:	21ff      	movs	r1, #255	@ 0xff
 800c25e:	6878      	ldr	r0, [r7, #4]
 800c260:	f002 fd20 	bl	800eca4 <VL53L0X_WrByte>
 800c264:	4603      	mov	r3, r0
 800c266:	461a      	mov	r2, r3
 800c268:	7bfb      	ldrb	r3, [r7, #15]
 800c26a:	4313      	orrs	r3, r2
 800c26c:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 800c26e:	78fb      	ldrb	r3, [r7, #3]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d01e      	beq.n	800c2b2 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 800c274:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d009      	beq.n	800c290 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 800c27c:	69ba      	ldr	r2, [r7, #24]
 800c27e:	21cb      	movs	r1, #203	@ 0xcb
 800c280:	6878      	ldr	r0, [r7, #4]
 800c282:	f002 fd91 	bl	800eda8 <VL53L0X_RdByte>
 800c286:	4603      	mov	r3, r0
 800c288:	461a      	mov	r2, r3
 800c28a:	7bfb      	ldrb	r3, [r7, #15]
 800c28c:	4313      	orrs	r3, r2
 800c28e:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800c290:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800c294:	2b00      	cmp	r3, #0
 800c296:	d02a      	beq.n	800c2ee <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 800c298:	f107 030e 	add.w	r3, r7, #14
 800c29c:	461a      	mov	r2, r3
 800c29e:	21ee      	movs	r1, #238	@ 0xee
 800c2a0:	6878      	ldr	r0, [r7, #4]
 800c2a2:	f002 fd81 	bl	800eda8 <VL53L0X_RdByte>
 800c2a6:	4603      	mov	r3, r0
 800c2a8:	461a      	mov	r2, r3
 800c2aa:	7bfb      	ldrb	r3, [r7, #15]
 800c2ac:	4313      	orrs	r3, r2
 800c2ae:	73fb      	strb	r3, [r7, #15]
 800c2b0:	e01d      	b.n	800c2ee <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 800c2b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d00a      	beq.n	800c2d0 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 800c2ba:	78bb      	ldrb	r3, [r7, #2]
 800c2bc:	461a      	mov	r2, r3
 800c2be:	21cb      	movs	r1, #203	@ 0xcb
 800c2c0:	6878      	ldr	r0, [r7, #4]
 800c2c2:	f002 fcef 	bl	800eca4 <VL53L0X_WrByte>
 800c2c6:	4603      	mov	r3, r0
 800c2c8:	461a      	mov	r2, r3
 800c2ca:	7bfb      	ldrb	r3, [r7, #15]
 800c2cc:	4313      	orrs	r3, r2
 800c2ce:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800c2d0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d00a      	beq.n	800c2ee <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 800c2d8:	787b      	ldrb	r3, [r7, #1]
 800c2da:	2280      	movs	r2, #128	@ 0x80
 800c2dc:	21ee      	movs	r1, #238	@ 0xee
 800c2de:	6878      	ldr	r0, [r7, #4]
 800c2e0:	f002 fd2e 	bl	800ed40 <VL53L0X_UpdateByte>
 800c2e4:	4603      	mov	r3, r0
 800c2e6:	461a      	mov	r2, r3
 800c2e8:	7bfb      	ldrb	r3, [r7, #15]
 800c2ea:	4313      	orrs	r3, r2
 800c2ec:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800c2ee:	2201      	movs	r2, #1
 800c2f0:	21ff      	movs	r1, #255	@ 0xff
 800c2f2:	6878      	ldr	r0, [r7, #4]
 800c2f4:	f002 fcd6 	bl	800eca4 <VL53L0X_WrByte>
 800c2f8:	4603      	mov	r3, r0
 800c2fa:	461a      	mov	r2, r3
 800c2fc:	7bfb      	ldrb	r3, [r7, #15]
 800c2fe:	4313      	orrs	r3, r2
 800c300:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800c302:	2201      	movs	r2, #1
 800c304:	2100      	movs	r1, #0
 800c306:	6878      	ldr	r0, [r7, #4]
 800c308:	f002 fccc 	bl	800eca4 <VL53L0X_WrByte>
 800c30c:	4603      	mov	r3, r0
 800c30e:	461a      	mov	r2, r3
 800c310:	7bfb      	ldrb	r3, [r7, #15]
 800c312:	4313      	orrs	r3, r2
 800c314:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800c316:	2200      	movs	r2, #0
 800c318:	21ff      	movs	r1, #255	@ 0xff
 800c31a:	6878      	ldr	r0, [r7, #4]
 800c31c:	f002 fcc2 	bl	800eca4 <VL53L0X_WrByte>
 800c320:	4603      	mov	r3, r0
 800c322:	461a      	mov	r2, r3
 800c324:	7bfb      	ldrb	r3, [r7, #15]
 800c326:	4313      	orrs	r3, r2
 800c328:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 800c32a:	7bbb      	ldrb	r3, [r7, #14]
 800c32c:	f023 0310 	bic.w	r3, r3, #16
 800c330:	b2da      	uxtb	r2, r3
 800c332:	69fb      	ldr	r3, [r7, #28]
 800c334:	701a      	strb	r2, [r3, #0]

	return Status;
 800c336:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c33a:	4618      	mov	r0, r3
 800c33c:	3710      	adds	r7, #16
 800c33e:	46bd      	mov	sp, r7
 800c340:	bd80      	pop	{r7, pc}

0800c342 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800c342:	b580      	push	{r7, lr}
 800c344:	b08a      	sub	sp, #40	@ 0x28
 800c346:	af04      	add	r7, sp, #16
 800c348:	60f8      	str	r0, [r7, #12]
 800c34a:	60b9      	str	r1, [r7, #8]
 800c34c:	4611      	mov	r1, r2
 800c34e:	461a      	mov	r2, r3
 800c350:	460b      	mov	r3, r1
 800c352:	71fb      	strb	r3, [r7, #7]
 800c354:	4613      	mov	r3, r2
 800c356:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c358:	2300      	movs	r3, #0
 800c35a:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800c35c:	2300      	movs	r3, #0
 800c35e:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800c360:	2300      	movs	r3, #0
 800c362:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800c364:	2300      	movs	r3, #0
 800c366:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 800c368:	2300      	movs	r3, #0
 800c36a:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800c36c:	79bb      	ldrb	r3, [r7, #6]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d003      	beq.n	800c37a <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800c378:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 800c37a:	2201      	movs	r2, #1
 800c37c:	2101      	movs	r1, #1
 800c37e:	68f8      	ldr	r0, [r7, #12]
 800c380:	f002 fc90 	bl	800eca4 <VL53L0X_WrByte>
 800c384:	4603      	mov	r3, r0
 800c386:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800c388:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d105      	bne.n	800c39c <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 800c390:	2140      	movs	r1, #64	@ 0x40
 800c392:	68f8      	ldr	r0, [r7, #12]
 800c394:	f7ff ff01 	bl	800c19a <VL53L0X_perform_single_ref_calibration>
 800c398:	4603      	mov	r3, r0
 800c39a:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800c39c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d115      	bne.n	800c3d0 <VL53L0X_perform_vhv_calibration+0x8e>
 800c3a4:	79fb      	ldrb	r3, [r7, #7]
 800c3a6:	2b01      	cmp	r3, #1
 800c3a8:	d112      	bne.n	800c3d0 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800c3aa:	7d39      	ldrb	r1, [r7, #20]
 800c3ac:	7d7a      	ldrb	r2, [r7, #21]
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	9303      	str	r3, [sp, #12]
 800c3b2:	2301      	movs	r3, #1
 800c3b4:	9302      	str	r3, [sp, #8]
 800c3b6:	f107 0313 	add.w	r3, r7, #19
 800c3ba:	9301      	str	r3, [sp, #4]
 800c3bc:	68bb      	ldr	r3, [r7, #8]
 800c3be:	9300      	str	r3, [sp, #0]
 800c3c0:	460b      	mov	r3, r1
 800c3c2:	2101      	movs	r1, #1
 800c3c4:	68f8      	ldr	r0, [r7, #12]
 800c3c6:	f7ff ff23 	bl	800c210 <VL53L0X_ref_calibration_io>
 800c3ca:	4603      	mov	r3, r0
 800c3cc:	75fb      	strb	r3, [r7, #23]
 800c3ce:	e002      	b.n	800c3d6 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 800c3d0:	68bb      	ldr	r3, [r7, #8]
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800c3d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d112      	bne.n	800c404 <VL53L0X_perform_vhv_calibration+0xc2>
 800c3de:	79bb      	ldrb	r3, [r7, #6]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d00f      	beq.n	800c404 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800c3e4:	7dbb      	ldrb	r3, [r7, #22]
 800c3e6:	461a      	mov	r2, r3
 800c3e8:	2101      	movs	r1, #1
 800c3ea:	68f8      	ldr	r0, [r7, #12]
 800c3ec:	f002 fc5a 	bl	800eca4 <VL53L0X_WrByte>
 800c3f0:	4603      	mov	r3, r0
 800c3f2:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800c3f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d103      	bne.n	800c404 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	7dba      	ldrb	r2, [r7, #22]
 800c400:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130

	}

	return Status;
 800c404:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c408:	4618      	mov	r0, r3
 800c40a:	3718      	adds	r7, #24
 800c40c:	46bd      	mov	sp, r7
 800c40e:	bd80      	pop	{r7, pc}

0800c410 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800c410:	b580      	push	{r7, lr}
 800c412:	b08a      	sub	sp, #40	@ 0x28
 800c414:	af04      	add	r7, sp, #16
 800c416:	60f8      	str	r0, [r7, #12]
 800c418:	60b9      	str	r1, [r7, #8]
 800c41a:	4611      	mov	r1, r2
 800c41c:	461a      	mov	r2, r3
 800c41e:	460b      	mov	r3, r1
 800c420:	71fb      	strb	r3, [r7, #7]
 800c422:	4613      	mov	r3, r2
 800c424:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c426:	2300      	movs	r3, #0
 800c428:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800c42a:	2300      	movs	r3, #0
 800c42c:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800c42e:	2300      	movs	r3, #0
 800c430:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800c432:	2300      	movs	r3, #0
 800c434:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800c436:	79bb      	ldrb	r3, [r7, #6]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d003      	beq.n	800c444 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800c442:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 800c444:	2202      	movs	r2, #2
 800c446:	2101      	movs	r1, #1
 800c448:	68f8      	ldr	r0, [r7, #12]
 800c44a:	f002 fc2b 	bl	800eca4 <VL53L0X_WrByte>
 800c44e:	4603      	mov	r3, r0
 800c450:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800c452:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d105      	bne.n	800c466 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 800c45a:	2100      	movs	r1, #0
 800c45c:	68f8      	ldr	r0, [r7, #12]
 800c45e:	f7ff fe9c 	bl	800c19a <VL53L0X_perform_single_ref_calibration>
 800c462:	4603      	mov	r3, r0
 800c464:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800c466:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d115      	bne.n	800c49a <VL53L0X_perform_phase_calibration+0x8a>
 800c46e:	79fb      	ldrb	r3, [r7, #7]
 800c470:	2b01      	cmp	r3, #1
 800c472:	d112      	bne.n	800c49a <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800c474:	7d39      	ldrb	r1, [r7, #20]
 800c476:	7d7a      	ldrb	r2, [r7, #21]
 800c478:	2301      	movs	r3, #1
 800c47a:	9303      	str	r3, [sp, #12]
 800c47c:	2300      	movs	r3, #0
 800c47e:	9302      	str	r3, [sp, #8]
 800c480:	68bb      	ldr	r3, [r7, #8]
 800c482:	9301      	str	r3, [sp, #4]
 800c484:	f107 0313 	add.w	r3, r7, #19
 800c488:	9300      	str	r3, [sp, #0]
 800c48a:	460b      	mov	r3, r1
 800c48c:	2101      	movs	r1, #1
 800c48e:	68f8      	ldr	r0, [r7, #12]
 800c490:	f7ff febe 	bl	800c210 <VL53L0X_ref_calibration_io>
 800c494:	4603      	mov	r3, r0
 800c496:	75fb      	strb	r3, [r7, #23]
 800c498:	e002      	b.n	800c4a0 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 800c49a:	68bb      	ldr	r3, [r7, #8]
 800c49c:	2200      	movs	r2, #0
 800c49e:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800c4a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d112      	bne.n	800c4ce <VL53L0X_perform_phase_calibration+0xbe>
 800c4a8:	79bb      	ldrb	r3, [r7, #6]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d00f      	beq.n	800c4ce <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800c4ae:	7dbb      	ldrb	r3, [r7, #22]
 800c4b0:	461a      	mov	r2, r3
 800c4b2:	2101      	movs	r1, #1
 800c4b4:	68f8      	ldr	r0, [r7, #12]
 800c4b6:	f002 fbf5 	bl	800eca4 <VL53L0X_WrByte>
 800c4ba:	4603      	mov	r3, r0
 800c4bc:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800c4be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d103      	bne.n	800c4ce <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	7dba      	ldrb	r2, [r7, #22]
 800c4ca:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130

	}

	return Status;
 800c4ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	3718      	adds	r7, #24
 800c4d6:	46bd      	mov	sp, r7
 800c4d8:	bd80      	pop	{r7, pc}

0800c4da <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 800c4da:	b580      	push	{r7, lr}
 800c4dc:	b086      	sub	sp, #24
 800c4de:	af00      	add	r7, sp, #0
 800c4e0:	60f8      	str	r0, [r7, #12]
 800c4e2:	60b9      	str	r1, [r7, #8]
 800c4e4:	607a      	str	r2, [r7, #4]
 800c4e6:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800c4f6:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 800c4f8:	78fa      	ldrb	r2, [r7, #3]
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	68b9      	ldr	r1, [r7, #8]
 800c4fe:	68f8      	ldr	r0, [r7, #12]
 800c500:	f7ff ff1f 	bl	800c342 <VL53L0X_perform_vhv_calibration>
 800c504:	4603      	mov	r3, r0
 800c506:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800c508:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d107      	bne.n	800c520 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 800c510:	78fa      	ldrb	r2, [r7, #3]
 800c512:	2300      	movs	r3, #0
 800c514:	6879      	ldr	r1, [r7, #4]
 800c516:	68f8      	ldr	r0, [r7, #12]
 800c518:	f7ff ff7a 	bl	800c410 <VL53L0X_perform_phase_calibration>
 800c51c:	4603      	mov	r3, r0
 800c51e:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 800c520:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d10f      	bne.n	800c548 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800c528:	7dbb      	ldrb	r3, [r7, #22]
 800c52a:	461a      	mov	r2, r3
 800c52c:	2101      	movs	r1, #1
 800c52e:	68f8      	ldr	r0, [r7, #12]
 800c530:	f002 fbb8 	bl	800eca4 <VL53L0X_WrByte>
 800c534:	4603      	mov	r3, r0
 800c536:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800c538:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d103      	bne.n	800c548 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	7dba      	ldrb	r2, [r7, #22]
 800c544:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130

	}

	return Status;
 800c548:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c54c:	4618      	mov	r0, r3
 800c54e:	3718      	adds	r7, #24
 800c550:	46bd      	mov	sp, r7
 800c552:	bd80      	pop	{r7, pc}

0800c554 <VL53L0X_set_ref_calibration>:

VL53L0X_Error VL53L0X_set_ref_calibration(VL53L0X_DEV Dev,
		uint8_t VhvSettings, uint8_t PhaseCal)
{
 800c554:	b580      	push	{r7, lr}
 800c556:	b088      	sub	sp, #32
 800c558:	af04      	add	r7, sp, #16
 800c55a:	6078      	str	r0, [r7, #4]
 800c55c:	460b      	mov	r3, r1
 800c55e:	70fb      	strb	r3, [r7, #3]
 800c560:	4613      	mov	r3, r2
 800c562:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c564:	2300      	movs	r3, #0
 800c566:	73fb      	strb	r3, [r7, #15]
	uint8_t pVhvSettings;
	uint8_t pPhaseCal;

	Status = VL53L0X_ref_calibration_io(Dev, 0,
 800c568:	78b9      	ldrb	r1, [r7, #2]
 800c56a:	78fa      	ldrb	r2, [r7, #3]
 800c56c:	2301      	movs	r3, #1
 800c56e:	9303      	str	r3, [sp, #12]
 800c570:	2301      	movs	r3, #1
 800c572:	9302      	str	r3, [sp, #8]
 800c574:	f107 030d 	add.w	r3, r7, #13
 800c578:	9301      	str	r3, [sp, #4]
 800c57a:	f107 030e 	add.w	r3, r7, #14
 800c57e:	9300      	str	r3, [sp, #0]
 800c580:	460b      	mov	r3, r1
 800c582:	2100      	movs	r1, #0
 800c584:	6878      	ldr	r0, [r7, #4]
 800c586:	f7ff fe43 	bl	800c210 <VL53L0X_ref_calibration_io>
 800c58a:	4603      	mov	r3, r0
 800c58c:	73fb      	strb	r3, [r7, #15]
		VhvSettings, PhaseCal,
		&pVhvSettings, &pPhaseCal,
		1, 1);

	return Status;
 800c58e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c592:	4618      	mov	r0, r3
 800c594:	3710      	adds	r7, #16
 800c596:	46bd      	mov	sp, r7
 800c598:	bd80      	pop	{r7, pc}

0800c59a <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 800c59a:	b580      	push	{r7, lr}
 800c59c:	b086      	sub	sp, #24
 800c59e:	af00      	add	r7, sp, #0
 800c5a0:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800c5ae:	f107 030f 	add.w	r3, r7, #15
 800c5b2:	4619      	mov	r1, r3
 800c5b4:	6878      	ldr	r0, [r7, #4]
 800c5b6:	f7fe fda3 	bl	800b100 <VL53L0X_GetMeasurementDataReady>
 800c5ba:	4603      	mov	r3, r0
 800c5bc:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 800c5be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d110      	bne.n	800c5e8 <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 800c5c6:	7bfb      	ldrb	r3, [r7, #15]
 800c5c8:	2b01      	cmp	r3, #1
 800c5ca:	d00f      	beq.n	800c5ec <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 800c5cc:	693b      	ldr	r3, [r7, #16]
 800c5ce:	3301      	adds	r3, #1
 800c5d0:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 800c5d2:	693b      	ldr	r3, [r7, #16]
 800c5d4:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800c5d8:	d302      	bcc.n	800c5e0 <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 800c5da:	23f9      	movs	r3, #249	@ 0xf9
 800c5dc:	75fb      	strb	r3, [r7, #23]
			break;
 800c5de:	e006      	b.n	800c5ee <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 800c5e0:	6878      	ldr	r0, [r7, #4]
 800c5e2:	f002 fc7d 	bl	800eee0 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800c5e6:	e7e2      	b.n	800c5ae <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 800c5e8:	bf00      	nop
 800c5ea:	e000      	b.n	800c5ee <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 800c5ec:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 800c5ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	3718      	adds	r7, #24
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	bd80      	pop	{r7, pc}

0800c5fa <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800c5fa:	b480      	push	{r7}
 800c5fc:	b085      	sub	sp, #20
 800c5fe:	af00      	add	r7, sp, #0
 800c600:	4603      	mov	r3, r0
 800c602:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800c604:	2300      	movs	r3, #0
 800c606:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800c608:	79fb      	ldrb	r3, [r7, #7]
 800c60a:	3301      	adds	r3, #1
 800c60c:	b2db      	uxtb	r3, r3
 800c60e:	005b      	lsls	r3, r3, #1
 800c610:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800c612:	7bfb      	ldrb	r3, [r7, #15]
}
 800c614:	4618      	mov	r0, r3
 800c616:	3714      	adds	r7, #20
 800c618:	46bd      	mov	sp, r7
 800c61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c61e:	4770      	bx	lr

0800c620 <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 800c620:	b480      	push	{r7}
 800c622:	b085      	sub	sp, #20
 800c624:	af00      	add	r7, sp, #0
 800c626:	4603      	mov	r3, r0
 800c628:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 800c62a:	2300      	movs	r3, #0
 800c62c:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 800c62e:	79fb      	ldrb	r3, [r7, #7]
 800c630:	085b      	lsrs	r3, r3, #1
 800c632:	b2db      	uxtb	r3, r3
 800c634:	3b01      	subs	r3, #1
 800c636:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 800c638:	7bfb      	ldrb	r3, [r7, #15]
}
 800c63a:	4618      	mov	r0, r3
 800c63c:	3714      	adds	r7, #20
 800c63e:	46bd      	mov	sp, r7
 800c640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c644:	4770      	bx	lr

0800c646 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 800c646:	b480      	push	{r7}
 800c648:	b085      	sub	sp, #20
 800c64a:	af00      	add	r7, sp, #0
 800c64c:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 800c64e:	2300      	movs	r3, #0
 800c650:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800c652:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c656:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 800c658:	e002      	b.n	800c660 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 800c65a:	68bb      	ldr	r3, [r7, #8]
 800c65c:	089b      	lsrs	r3, r3, #2
 800c65e:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800c660:	68ba      	ldr	r2, [r7, #8]
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	429a      	cmp	r2, r3
 800c666:	d8f8      	bhi.n	800c65a <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 800c668:	e017      	b.n	800c69a <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 800c66a:	68fa      	ldr	r2, [r7, #12]
 800c66c:	68bb      	ldr	r3, [r7, #8]
 800c66e:	4413      	add	r3, r2
 800c670:	687a      	ldr	r2, [r7, #4]
 800c672:	429a      	cmp	r2, r3
 800c674:	d30b      	bcc.n	800c68e <VL53L0X_isqrt+0x48>
			num -= res + bit;
 800c676:	68fa      	ldr	r2, [r7, #12]
 800c678:	68bb      	ldr	r3, [r7, #8]
 800c67a:	4413      	add	r3, r2
 800c67c:	687a      	ldr	r2, [r7, #4]
 800c67e:	1ad3      	subs	r3, r2, r3
 800c680:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	085b      	lsrs	r3, r3, #1
 800c686:	68ba      	ldr	r2, [r7, #8]
 800c688:	4413      	add	r3, r2
 800c68a:	60fb      	str	r3, [r7, #12]
 800c68c:	e002      	b.n	800c694 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	085b      	lsrs	r3, r3, #1
 800c692:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 800c694:	68bb      	ldr	r3, [r7, #8]
 800c696:	089b      	lsrs	r3, r3, #2
 800c698:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800c69a:	68bb      	ldr	r3, [r7, #8]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d1e4      	bne.n	800c66a <VL53L0X_isqrt+0x24>
	}

	return res;
 800c6a0:	68fb      	ldr	r3, [r7, #12]
}
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	3714      	adds	r7, #20
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ac:	4770      	bx	lr

0800c6ae <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 800c6ae:	b580      	push	{r7, lr}
 800c6b0:	b086      	sub	sp, #24
 800c6b2:	af00      	add	r7, sp, #0
 800c6b4:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 800c6ba:	2200      	movs	r2, #0
 800c6bc:	2183      	movs	r1, #131	@ 0x83
 800c6be:	6878      	ldr	r0, [r7, #4]
 800c6c0:	f002 faf0 	bl	800eca4 <VL53L0X_WrByte>
 800c6c4:	4603      	mov	r3, r0
 800c6c6:	461a      	mov	r2, r3
 800c6c8:	7dfb      	ldrb	r3, [r7, #23]
 800c6ca:	4313      	orrs	r3, r2
 800c6cc:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 800c6ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d11e      	bne.n	800c714 <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 800c6da:	f107 030f 	add.w	r3, r7, #15
 800c6de:	461a      	mov	r2, r3
 800c6e0:	2183      	movs	r1, #131	@ 0x83
 800c6e2:	6878      	ldr	r0, [r7, #4]
 800c6e4:	f002 fb60 	bl	800eda8 <VL53L0X_RdByte>
 800c6e8:	4603      	mov	r3, r0
 800c6ea:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 800c6ec:	7bfb      	ldrb	r3, [r7, #15]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d10a      	bne.n	800c708 <VL53L0X_device_read_strobe+0x5a>
 800c6f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d106      	bne.n	800c708 <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 800c6fa:	693b      	ldr	r3, [r7, #16]
 800c6fc:	3301      	adds	r3, #1
 800c6fe:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800c700:	693b      	ldr	r3, [r7, #16]
 800c702:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800c706:	d3e8      	bcc.n	800c6da <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800c708:	693b      	ldr	r3, [r7, #16]
 800c70a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800c70e:	d301      	bcc.n	800c714 <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 800c710:	23f9      	movs	r3, #249	@ 0xf9
 800c712:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 800c714:	2201      	movs	r2, #1
 800c716:	2183      	movs	r1, #131	@ 0x83
 800c718:	6878      	ldr	r0, [r7, #4]
 800c71a:	f002 fac3 	bl	800eca4 <VL53L0X_WrByte>
 800c71e:	4603      	mov	r3, r0
 800c720:	461a      	mov	r2, r3
 800c722:	7dfb      	ldrb	r3, [r7, #23]
 800c724:	4313      	orrs	r3, r2
 800c726:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 800c728:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800c72c:	4618      	mov	r0, r3
 800c72e:	3718      	adds	r7, #24
 800c730:	46bd      	mov	sp, r7
 800c732:	bd80      	pop	{r7, pc}

0800c734 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 800c734:	b580      	push	{r7, lr}
 800c736:	b098      	sub	sp, #96	@ 0x60
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
 800c73c:	460b      	mov	r3, r1
 800c73e:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c740:	2300      	movs	r3, #0
 800c742:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 800c746:	2300      	movs	r3, #0
 800c748:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	uint8_t ReferenceSpadType = 0;
 800c74c:	2300      	movs	r3, #0
 800c74e:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
	uint32_t PartUIDUpper = 0;
 800c752:	2300      	movs	r3, #0
 800c754:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t PartUIDLower = 0;
 800c756:	2300      	movs	r3, #0
 800c758:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t OffsetFixed1104_mm = 0;
 800c75a:	2300      	movs	r3, #0
 800c75c:	64bb      	str	r3, [r7, #72]	@ 0x48
	int16_t OffsetMicroMeters = 0;
 800c75e:	2300      	movs	r3, #0
 800c760:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 800c764:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 800c768:	647b      	str	r3, [r7, #68]	@ 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 800c76a:	2300      	movs	r3, #0
 800c76c:	657b      	str	r3, [r7, #84]	@ 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 800c76e:	2300      	movs	r3, #0
 800c770:	653b      	str	r3, [r7, #80]	@ 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 800c772:	2300      	movs	r3, #0
 800c774:	643b      	str	r3, [r7, #64]	@ 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800c77c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 800c780:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c784:	2b07      	cmp	r3, #7
 800c786:	f000 8408 	beq.w	800cf9a <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800c78a:	2201      	movs	r2, #1
 800c78c:	2180      	movs	r1, #128	@ 0x80
 800c78e:	6878      	ldr	r0, [r7, #4]
 800c790:	f002 fa88 	bl	800eca4 <VL53L0X_WrByte>
 800c794:	4603      	mov	r3, r0
 800c796:	461a      	mov	r2, r3
 800c798:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c79c:	4313      	orrs	r3, r2
 800c79e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800c7a2:	2201      	movs	r2, #1
 800c7a4:	21ff      	movs	r1, #255	@ 0xff
 800c7a6:	6878      	ldr	r0, [r7, #4]
 800c7a8:	f002 fa7c 	bl	800eca4 <VL53L0X_WrByte>
 800c7ac:	4603      	mov	r3, r0
 800c7ae:	461a      	mov	r2, r3
 800c7b0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c7b4:	4313      	orrs	r3, r2
 800c7b6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	2100      	movs	r1, #0
 800c7be:	6878      	ldr	r0, [r7, #4]
 800c7c0:	f002 fa70 	bl	800eca4 <VL53L0X_WrByte>
 800c7c4:	4603      	mov	r3, r0
 800c7c6:	461a      	mov	r2, r3
 800c7c8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c7cc:	4313      	orrs	r3, r2
 800c7ce:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800c7d2:	2206      	movs	r2, #6
 800c7d4:	21ff      	movs	r1, #255	@ 0xff
 800c7d6:	6878      	ldr	r0, [r7, #4]
 800c7d8:	f002 fa64 	bl	800eca4 <VL53L0X_WrByte>
 800c7dc:	4603      	mov	r3, r0
 800c7de:	461a      	mov	r2, r3
 800c7e0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c7e4:	4313      	orrs	r3, r2
 800c7e6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800c7ea:	f107 0337 	add.w	r3, r7, #55	@ 0x37
 800c7ee:	461a      	mov	r2, r3
 800c7f0:	2183      	movs	r1, #131	@ 0x83
 800c7f2:	6878      	ldr	r0, [r7, #4]
 800c7f4:	f002 fad8 	bl	800eda8 <VL53L0X_RdByte>
 800c7f8:	4603      	mov	r3, r0
 800c7fa:	461a      	mov	r2, r3
 800c7fc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c800:	4313      	orrs	r3, r2
 800c802:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 800c806:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c80a:	f043 0304 	orr.w	r3, r3, #4
 800c80e:	b2db      	uxtb	r3, r3
 800c810:	461a      	mov	r2, r3
 800c812:	2183      	movs	r1, #131	@ 0x83
 800c814:	6878      	ldr	r0, [r7, #4]
 800c816:	f002 fa45 	bl	800eca4 <VL53L0X_WrByte>
 800c81a:	4603      	mov	r3, r0
 800c81c:	461a      	mov	r2, r3
 800c81e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c822:	4313      	orrs	r3, r2
 800c824:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 800c828:	2207      	movs	r2, #7
 800c82a:	21ff      	movs	r1, #255	@ 0xff
 800c82c:	6878      	ldr	r0, [r7, #4]
 800c82e:	f002 fa39 	bl	800eca4 <VL53L0X_WrByte>
 800c832:	4603      	mov	r3, r0
 800c834:	461a      	mov	r2, r3
 800c836:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c83a:	4313      	orrs	r3, r2
 800c83c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 800c840:	2201      	movs	r2, #1
 800c842:	2181      	movs	r1, #129	@ 0x81
 800c844:	6878      	ldr	r0, [r7, #4]
 800c846:	f002 fa2d 	bl	800eca4 <VL53L0X_WrByte>
 800c84a:	4603      	mov	r3, r0
 800c84c:	461a      	mov	r2, r3
 800c84e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c852:	4313      	orrs	r3, r2
 800c854:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 800c858:	6878      	ldr	r0, [r7, #4]
 800c85a:	f002 fb41 	bl	800eee0 <VL53L0X_PollingDelay>
 800c85e:	4603      	mov	r3, r0
 800c860:	461a      	mov	r2, r3
 800c862:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c866:	4313      	orrs	r3, r2
 800c868:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800c86c:	2201      	movs	r2, #1
 800c86e:	2180      	movs	r1, #128	@ 0x80
 800c870:	6878      	ldr	r0, [r7, #4]
 800c872:	f002 fa17 	bl	800eca4 <VL53L0X_WrByte>
 800c876:	4603      	mov	r3, r0
 800c878:	461a      	mov	r2, r3
 800c87a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c87e:	4313      	orrs	r3, r2
 800c880:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		if (((option & 1) == 1) &&
 800c884:	78fb      	ldrb	r3, [r7, #3]
 800c886:	f003 0301 	and.w	r3, r3, #1
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	f000 8098 	beq.w	800c9c0 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800c890:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c894:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800c898:	2b00      	cmp	r3, #0
 800c89a:	f040 8091 	bne.w	800c9c0 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 800c89e:	226b      	movs	r2, #107	@ 0x6b
 800c8a0:	2194      	movs	r1, #148	@ 0x94
 800c8a2:	6878      	ldr	r0, [r7, #4]
 800c8a4:	f002 f9fe 	bl	800eca4 <VL53L0X_WrByte>
 800c8a8:	4603      	mov	r3, r0
 800c8aa:	461a      	mov	r2, r3
 800c8ac:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c8b0:	4313      	orrs	r3, r2
 800c8b2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c8b6:	6878      	ldr	r0, [r7, #4]
 800c8b8:	f7ff fef9 	bl	800c6ae <VL53L0X_device_read_strobe>
 800c8bc:	4603      	mov	r3, r0
 800c8be:	461a      	mov	r2, r3
 800c8c0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c8c4:	4313      	orrs	r3, r2
 800c8c6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800c8ca:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800c8ce:	461a      	mov	r2, r3
 800c8d0:	2190      	movs	r1, #144	@ 0x90
 800c8d2:	6878      	ldr	r0, [r7, #4]
 800c8d4:	f002 fac8 	bl	800ee68 <VL53L0X_RdDWord>
 800c8d8:	4603      	mov	r3, r0
 800c8da:	461a      	mov	r2, r3
 800c8dc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c8e0:	4313      	orrs	r3, r2
 800c8e2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 800c8e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8e8:	0a1b      	lsrs	r3, r3, #8
 800c8ea:	b2db      	uxtb	r3, r3
 800c8ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c8f0:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 800c8f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8f6:	0bdb      	lsrs	r3, r3, #15
 800c8f8:	b2db      	uxtb	r3, r3
 800c8fa:	f003 0301 	and.w	r3, r3, #1
 800c8fe:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 800c902:	2224      	movs	r2, #36	@ 0x24
 800c904:	2194      	movs	r1, #148	@ 0x94
 800c906:	6878      	ldr	r0, [r7, #4]
 800c908:	f002 f9cc 	bl	800eca4 <VL53L0X_WrByte>
 800c90c:	4603      	mov	r3, r0
 800c90e:	461a      	mov	r2, r3
 800c910:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c914:	4313      	orrs	r3, r2
 800c916:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c91a:	6878      	ldr	r0, [r7, #4]
 800c91c:	f7ff fec7 	bl	800c6ae <VL53L0X_device_read_strobe>
 800c920:	4603      	mov	r3, r0
 800c922:	461a      	mov	r2, r3
 800c924:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c928:	4313      	orrs	r3, r2
 800c92a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800c92e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800c932:	461a      	mov	r2, r3
 800c934:	2190      	movs	r1, #144	@ 0x90
 800c936:	6878      	ldr	r0, [r7, #4]
 800c938:	f002 fa96 	bl	800ee68 <VL53L0X_RdDWord>
 800c93c:	4603      	mov	r3, r0
 800c93e:	461a      	mov	r2, r3
 800c940:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c944:	4313      	orrs	r3, r2
 800c946:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 800c94a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c94c:	0e1b      	lsrs	r3, r3, #24
 800c94e:	b2db      	uxtb	r3, r3
 800c950:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 800c952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c954:	0c1b      	lsrs	r3, r3, #16
 800c956:	b2db      	uxtb	r3, r3
 800c958:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 800c95a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c95c:	0a1b      	lsrs	r3, r3, #8
 800c95e:	b2db      	uxtb	r3, r3
 800c960:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 800c962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c964:	b2db      	uxtb	r3, r3
 800c966:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 800c968:	2225      	movs	r2, #37	@ 0x25
 800c96a:	2194      	movs	r1, #148	@ 0x94
 800c96c:	6878      	ldr	r0, [r7, #4]
 800c96e:	f002 f999 	bl	800eca4 <VL53L0X_WrByte>
 800c972:	4603      	mov	r3, r0
 800c974:	461a      	mov	r2, r3
 800c976:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c97a:	4313      	orrs	r3, r2
 800c97c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c980:	6878      	ldr	r0, [r7, #4]
 800c982:	f7ff fe94 	bl	800c6ae <VL53L0X_device_read_strobe>
 800c986:	4603      	mov	r3, r0
 800c988:	461a      	mov	r2, r3
 800c98a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c98e:	4313      	orrs	r3, r2
 800c990:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800c994:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800c998:	461a      	mov	r2, r3
 800c99a:	2190      	movs	r1, #144	@ 0x90
 800c99c:	6878      	ldr	r0, [r7, #4]
 800c99e:	f002 fa63 	bl	800ee68 <VL53L0X_RdDWord>
 800c9a2:	4603      	mov	r3, r0
 800c9a4:	461a      	mov	r2, r3
 800c9a6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c9aa:	4313      	orrs	r3, r2
 800c9ac:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 800c9b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9b2:	0e1b      	lsrs	r3, r3, #24
 800c9b4:	b2db      	uxtb	r3, r3
 800c9b6:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 800c9b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9ba:	0c1b      	lsrs	r3, r3, #16
 800c9bc:	b2db      	uxtb	r3, r3
 800c9be:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 800c9c0:	78fb      	ldrb	r3, [r7, #3]
 800c9c2:	f003 0302 	and.w	r3, r3, #2
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	f000 8189 	beq.w	800ccde <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800c9cc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c9d0:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	f040 8182 	bne.w	800ccde <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 800c9da:	2202      	movs	r2, #2
 800c9dc:	2194      	movs	r1, #148	@ 0x94
 800c9de:	6878      	ldr	r0, [r7, #4]
 800c9e0:	f002 f960 	bl	800eca4 <VL53L0X_WrByte>
 800c9e4:	4603      	mov	r3, r0
 800c9e6:	461a      	mov	r2, r3
 800c9e8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c9ec:	4313      	orrs	r3, r2
 800c9ee:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c9f2:	6878      	ldr	r0, [r7, #4]
 800c9f4:	f7ff fe5b 	bl	800c6ae <VL53L0X_device_read_strobe>
 800c9f8:	4603      	mov	r3, r0
 800c9fa:	461a      	mov	r2, r3
 800c9fc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ca00:	4313      	orrs	r3, r2
 800ca02:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 800ca06:	f107 032f 	add.w	r3, r7, #47	@ 0x2f
 800ca0a:	461a      	mov	r2, r3
 800ca0c:	2190      	movs	r1, #144	@ 0x90
 800ca0e:	6878      	ldr	r0, [r7, #4]
 800ca10:	f002 f9ca 	bl	800eda8 <VL53L0X_RdByte>
 800ca14:	4603      	mov	r3, r0
 800ca16:	461a      	mov	r2, r3
 800ca18:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ca1c:	4313      	orrs	r3, r2
 800ca1e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800ca22:	227b      	movs	r2, #123	@ 0x7b
 800ca24:	2194      	movs	r1, #148	@ 0x94
 800ca26:	6878      	ldr	r0, [r7, #4]
 800ca28:	f002 f93c 	bl	800eca4 <VL53L0X_WrByte>
 800ca2c:	4603      	mov	r3, r0
 800ca2e:	461a      	mov	r2, r3
 800ca30:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ca34:	4313      	orrs	r3, r2
 800ca36:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800ca3a:	6878      	ldr	r0, [r7, #4]
 800ca3c:	f7ff fe37 	bl	800c6ae <VL53L0X_device_read_strobe>
 800ca40:	4603      	mov	r3, r0
 800ca42:	461a      	mov	r2, r3
 800ca44:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ca48:	4313      	orrs	r3, r2
 800ca4a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 800ca4e:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 800ca52:	461a      	mov	r2, r3
 800ca54:	2190      	movs	r1, #144	@ 0x90
 800ca56:	6878      	ldr	r0, [r7, #4]
 800ca58:	f002 f9a6 	bl	800eda8 <VL53L0X_RdByte>
 800ca5c:	4603      	mov	r3, r0
 800ca5e:	461a      	mov	r2, r3
 800ca60:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ca64:	4313      	orrs	r3, r2
 800ca66:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 800ca6a:	2277      	movs	r2, #119	@ 0x77
 800ca6c:	2194      	movs	r1, #148	@ 0x94
 800ca6e:	6878      	ldr	r0, [r7, #4]
 800ca70:	f002 f918 	bl	800eca4 <VL53L0X_WrByte>
 800ca74:	4603      	mov	r3, r0
 800ca76:	461a      	mov	r2, r3
 800ca78:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ca7c:	4313      	orrs	r3, r2
 800ca7e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800ca82:	6878      	ldr	r0, [r7, #4]
 800ca84:	f7ff fe13 	bl	800c6ae <VL53L0X_device_read_strobe>
 800ca88:	4603      	mov	r3, r0
 800ca8a:	461a      	mov	r2, r3
 800ca8c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ca90:	4313      	orrs	r3, r2
 800ca92:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800ca96:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800ca9a:	461a      	mov	r2, r3
 800ca9c:	2190      	movs	r1, #144	@ 0x90
 800ca9e:	6878      	ldr	r0, [r7, #4]
 800caa0:	f002 f9e2 	bl	800ee68 <VL53L0X_RdDWord>
 800caa4:	4603      	mov	r3, r0
 800caa6:	461a      	mov	r2, r3
 800caa8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800caac:	4313      	orrs	r3, r2
 800caae:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 800cab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cab4:	0e5b      	lsrs	r3, r3, #25
 800cab6:	b2db      	uxtb	r3, r3
 800cab8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cabc:	b2db      	uxtb	r3, r3
 800cabe:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 800cac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cac2:	0c9b      	lsrs	r3, r3, #18
 800cac4:	b2db      	uxtb	r3, r3
 800cac6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800caca:	b2db      	uxtb	r3, r3
 800cacc:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 800cace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cad0:	0adb      	lsrs	r3, r3, #11
 800cad2:	b2db      	uxtb	r3, r3
 800cad4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cad8:	b2db      	uxtb	r3, r3
 800cada:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 800cadc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cade:	091b      	lsrs	r3, r3, #4
 800cae0:	b2db      	uxtb	r3, r3
 800cae2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cae6:	b2db      	uxtb	r3, r3
 800cae8:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 800caea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800caec:	b2db      	uxtb	r3, r3
 800caee:	00db      	lsls	r3, r3, #3
 800caf0:	b2db      	uxtb	r3, r3
 800caf2:	f003 0378 	and.w	r3, r3, #120	@ 0x78
 800caf6:	b2db      	uxtb	r3, r3
 800caf8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 800cafc:	2278      	movs	r2, #120	@ 0x78
 800cafe:	2194      	movs	r1, #148	@ 0x94
 800cb00:	6878      	ldr	r0, [r7, #4]
 800cb02:	f002 f8cf 	bl	800eca4 <VL53L0X_WrByte>
 800cb06:	4603      	mov	r3, r0
 800cb08:	461a      	mov	r2, r3
 800cb0a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cb0e:	4313      	orrs	r3, r2
 800cb10:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800cb14:	6878      	ldr	r0, [r7, #4]
 800cb16:	f7ff fdca 	bl	800c6ae <VL53L0X_device_read_strobe>
 800cb1a:	4603      	mov	r3, r0
 800cb1c:	461a      	mov	r2, r3
 800cb1e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cb22:	4313      	orrs	r3, r2
 800cb24:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800cb28:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800cb2c:	461a      	mov	r2, r3
 800cb2e:	2190      	movs	r1, #144	@ 0x90
 800cb30:	6878      	ldr	r0, [r7, #4]
 800cb32:	f002 f999 	bl	800ee68 <VL53L0X_RdDWord>
 800cb36:	4603      	mov	r3, r0
 800cb38:	461a      	mov	r2, r3
 800cb3a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cb3e:	4313      	orrs	r3, r2
 800cb40:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 800cb44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb46:	0f5b      	lsrs	r3, r3, #29
 800cb48:	b2db      	uxtb	r3, r3
 800cb4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cb4e:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 800cb50:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cb54:	4413      	add	r3, r2
 800cb56:	b2db      	uxtb	r3, r3
 800cb58:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 800cb5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb5c:	0d9b      	lsrs	r3, r3, #22
 800cb5e:	b2db      	uxtb	r3, r3
 800cb60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cb64:	b2db      	uxtb	r3, r3
 800cb66:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 800cb68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb6a:	0bdb      	lsrs	r3, r3, #15
 800cb6c:	b2db      	uxtb	r3, r3
 800cb6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cb72:	b2db      	uxtb	r3, r3
 800cb74:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 800cb76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb78:	0a1b      	lsrs	r3, r3, #8
 800cb7a:	b2db      	uxtb	r3, r3
 800cb7c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cb80:	b2db      	uxtb	r3, r3
 800cb82:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 800cb84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb86:	085b      	lsrs	r3, r3, #1
 800cb88:	b2db      	uxtb	r3, r3
 800cb8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cb8e:	b2db      	uxtb	r3, r3
 800cb90:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 800cb92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb94:	b2db      	uxtb	r3, r3
 800cb96:	019b      	lsls	r3, r3, #6
 800cb98:	b2db      	uxtb	r3, r3
 800cb9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cb9e:	b2db      	uxtb	r3, r3
 800cba0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 800cba4:	2279      	movs	r2, #121	@ 0x79
 800cba6:	2194      	movs	r1, #148	@ 0x94
 800cba8:	6878      	ldr	r0, [r7, #4]
 800cbaa:	f002 f87b 	bl	800eca4 <VL53L0X_WrByte>
 800cbae:	4603      	mov	r3, r0
 800cbb0:	461a      	mov	r2, r3
 800cbb2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cbb6:	4313      	orrs	r3, r2
 800cbb8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800cbbc:	6878      	ldr	r0, [r7, #4]
 800cbbe:	f7ff fd76 	bl	800c6ae <VL53L0X_device_read_strobe>
 800cbc2:	4603      	mov	r3, r0
 800cbc4:	461a      	mov	r2, r3
 800cbc6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cbca:	4313      	orrs	r3, r2
 800cbcc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800cbd0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800cbd4:	461a      	mov	r2, r3
 800cbd6:	2190      	movs	r1, #144	@ 0x90
 800cbd8:	6878      	ldr	r0, [r7, #4]
 800cbda:	f002 f945 	bl	800ee68 <VL53L0X_RdDWord>
 800cbde:	4603      	mov	r3, r0
 800cbe0:	461a      	mov	r2, r3
 800cbe2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cbe6:	4313      	orrs	r3, r2
 800cbe8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 800cbec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbee:	0e9b      	lsrs	r3, r3, #26
 800cbf0:	b2db      	uxtb	r3, r3
 800cbf2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cbf6:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 800cbf8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cbfc:	4413      	add	r3, r2
 800cbfe:	b2db      	uxtb	r3, r3
 800cc00:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 800cc02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc04:	0cdb      	lsrs	r3, r3, #19
 800cc06:	b2db      	uxtb	r3, r3
 800cc08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cc0c:	b2db      	uxtb	r3, r3
 800cc0e:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 800cc10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc12:	0b1b      	lsrs	r3, r3, #12
 800cc14:	b2db      	uxtb	r3, r3
 800cc16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cc1a:	b2db      	uxtb	r3, r3
 800cc1c:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 800cc1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc20:	095b      	lsrs	r3, r3, #5
 800cc22:	b2db      	uxtb	r3, r3
 800cc24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cc28:	b2db      	uxtb	r3, r3
 800cc2a:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800cc2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc2e:	b2db      	uxtb	r3, r3
 800cc30:	009b      	lsls	r3, r3, #2
 800cc32:	b2db      	uxtb	r3, r3
 800cc34:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 800cc38:	b2db      	uxtb	r3, r3
 800cc3a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 800cc3e:	227a      	movs	r2, #122	@ 0x7a
 800cc40:	2194      	movs	r1, #148	@ 0x94
 800cc42:	6878      	ldr	r0, [r7, #4]
 800cc44:	f002 f82e 	bl	800eca4 <VL53L0X_WrByte>
 800cc48:	4603      	mov	r3, r0
 800cc4a:	461a      	mov	r2, r3
 800cc4c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cc50:	4313      	orrs	r3, r2
 800cc52:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800cc56:	6878      	ldr	r0, [r7, #4]
 800cc58:	f7ff fd29 	bl	800c6ae <VL53L0X_device_read_strobe>
 800cc5c:	4603      	mov	r3, r0
 800cc5e:	461a      	mov	r2, r3
 800cc60:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cc64:	4313      	orrs	r3, r2
 800cc66:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800cc6a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800cc6e:	461a      	mov	r2, r3
 800cc70:	2190      	movs	r1, #144	@ 0x90
 800cc72:	6878      	ldr	r0, [r7, #4]
 800cc74:	f002 f8f8 	bl	800ee68 <VL53L0X_RdDWord>
 800cc78:	4603      	mov	r3, r0
 800cc7a:	461a      	mov	r2, r3
 800cc7c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cc80:	4313      	orrs	r3, r2
 800cc82:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 800cc86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc88:	0f9b      	lsrs	r3, r3, #30
 800cc8a:	b2db      	uxtb	r3, r3
 800cc8c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cc90:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 800cc92:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cc96:	4413      	add	r3, r2
 800cc98:	b2db      	uxtb	r3, r3
 800cc9a:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 800cc9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc9e:	0ddb      	lsrs	r3, r3, #23
 800cca0:	b2db      	uxtb	r3, r3
 800cca2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cca6:	b2db      	uxtb	r3, r3
 800cca8:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 800ccaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccac:	0c1b      	lsrs	r3, r3, #16
 800ccae:	b2db      	uxtb	r3, r3
 800ccb0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ccb4:	b2db      	uxtb	r3, r3
 800ccb6:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 800ccb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccba:	0a5b      	lsrs	r3, r3, #9
 800ccbc:	b2db      	uxtb	r3, r3
 800ccbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ccc2:	b2db      	uxtb	r3, r3
 800ccc4:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 800ccc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccca:	089b      	lsrs	r3, r3, #2
 800cccc:	b2db      	uxtb	r3, r3
 800ccce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ccd2:	b2db      	uxtb	r3, r3
 800ccd4:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
			ProductId[18] = '\0';
 800ccd8:	2300      	movs	r3, #0
 800ccda:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

		}

		if (((option & 4) == 4) &&
 800ccde:	78fb      	ldrb	r3, [r7, #3]
 800cce0:	f003 0304 	and.w	r3, r3, #4
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	f000 80f1 	beq.w	800cecc <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800ccea:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ccee:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	f040 80ea 	bne.w	800cecc <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800ccf8:	227b      	movs	r2, #123	@ 0x7b
 800ccfa:	2194      	movs	r1, #148	@ 0x94
 800ccfc:	6878      	ldr	r0, [r7, #4]
 800ccfe:	f001 ffd1 	bl	800eca4 <VL53L0X_WrByte>
 800cd02:	4603      	mov	r3, r0
 800cd04:	461a      	mov	r2, r3
 800cd06:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cd0a:	4313      	orrs	r3, r2
 800cd0c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800cd10:	6878      	ldr	r0, [r7, #4]
 800cd12:	f7ff fccc 	bl	800c6ae <VL53L0X_device_read_strobe>
 800cd16:	4603      	mov	r3, r0
 800cd18:	461a      	mov	r2, r3
 800cd1a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cd1e:	4313      	orrs	r3, r2
 800cd20:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 800cd24:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800cd28:	461a      	mov	r2, r3
 800cd2a:	2190      	movs	r1, #144	@ 0x90
 800cd2c:	6878      	ldr	r0, [r7, #4]
 800cd2e:	f002 f89b 	bl	800ee68 <VL53L0X_RdDWord>
 800cd32:	4603      	mov	r3, r0
 800cd34:	461a      	mov	r2, r3
 800cd36:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cd3a:	4313      	orrs	r3, r2
 800cd3c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 800cd40:	227c      	movs	r2, #124	@ 0x7c
 800cd42:	2194      	movs	r1, #148	@ 0x94
 800cd44:	6878      	ldr	r0, [r7, #4]
 800cd46:	f001 ffad 	bl	800eca4 <VL53L0X_WrByte>
 800cd4a:	4603      	mov	r3, r0
 800cd4c:	461a      	mov	r2, r3
 800cd4e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cd52:	4313      	orrs	r3, r2
 800cd54:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800cd58:	6878      	ldr	r0, [r7, #4]
 800cd5a:	f7ff fca8 	bl	800c6ae <VL53L0X_device_read_strobe>
 800cd5e:	4603      	mov	r3, r0
 800cd60:	461a      	mov	r2, r3
 800cd62:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cd66:	4313      	orrs	r3, r2
 800cd68:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 800cd6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cd70:	461a      	mov	r2, r3
 800cd72:	2190      	movs	r1, #144	@ 0x90
 800cd74:	6878      	ldr	r0, [r7, #4]
 800cd76:	f002 f877 	bl	800ee68 <VL53L0X_RdDWord>
 800cd7a:	4603      	mov	r3, r0
 800cd7c:	461a      	mov	r2, r3
 800cd7e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cd82:	4313      	orrs	r3, r2
 800cd84:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 800cd88:	2273      	movs	r2, #115	@ 0x73
 800cd8a:	2194      	movs	r1, #148	@ 0x94
 800cd8c:	6878      	ldr	r0, [r7, #4]
 800cd8e:	f001 ff89 	bl	800eca4 <VL53L0X_WrByte>
 800cd92:	4603      	mov	r3, r0
 800cd94:	461a      	mov	r2, r3
 800cd96:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cd9a:	4313      	orrs	r3, r2
 800cd9c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800cda0:	6878      	ldr	r0, [r7, #4]
 800cda2:	f7ff fc84 	bl	800c6ae <VL53L0X_device_read_strobe>
 800cda6:	4603      	mov	r3, r0
 800cda8:	461a      	mov	r2, r3
 800cdaa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cdae:	4313      	orrs	r3, r2
 800cdb0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800cdb4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800cdb8:	461a      	mov	r2, r3
 800cdba:	2190      	movs	r1, #144	@ 0x90
 800cdbc:	6878      	ldr	r0, [r7, #4]
 800cdbe:	f002 f853 	bl	800ee68 <VL53L0X_RdDWord>
 800cdc2:	4603      	mov	r3, r0
 800cdc4:	461a      	mov	r2, r3
 800cdc6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cdca:	4313      	orrs	r3, r2
 800cdcc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 800cdd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdd2:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 800cdd4:	b29b      	uxth	r3, r3
 800cdd6:	653b      	str	r3, [r7, #80]	@ 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800cdd8:	2274      	movs	r2, #116	@ 0x74
 800cdda:	2194      	movs	r1, #148	@ 0x94
 800cddc:	6878      	ldr	r0, [r7, #4]
 800cdde:	f001 ff61 	bl	800eca4 <VL53L0X_WrByte>
 800cde2:	4603      	mov	r3, r0
 800cde4:	461a      	mov	r2, r3
 800cde6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cdea:	4313      	orrs	r3, r2
 800cdec:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800cdf0:	6878      	ldr	r0, [r7, #4]
 800cdf2:	f7ff fc5c 	bl	800c6ae <VL53L0X_device_read_strobe>
 800cdf6:	4603      	mov	r3, r0
 800cdf8:	461a      	mov	r2, r3
 800cdfa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cdfe:	4313      	orrs	r3, r2
 800ce00:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800ce04:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800ce08:	461a      	mov	r2, r3
 800ce0a:	2190      	movs	r1, #144	@ 0x90
 800ce0c:	6878      	ldr	r0, [r7, #4]
 800ce0e:	f002 f82b 	bl	800ee68 <VL53L0X_RdDWord>
 800ce12:	4603      	mov	r3, r0
 800ce14:	461a      	mov	r2, r3
 800ce16:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ce1a:	4313      	orrs	r3, r2
 800ce1c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 800ce20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce22:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 800ce24:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ce26:	4313      	orrs	r3, r2
 800ce28:	653b      	str	r3, [r7, #80]	@ 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 800ce2a:	2275      	movs	r2, #117	@ 0x75
 800ce2c:	2194      	movs	r1, #148	@ 0x94
 800ce2e:	6878      	ldr	r0, [r7, #4]
 800ce30:	f001 ff38 	bl	800eca4 <VL53L0X_WrByte>
 800ce34:	4603      	mov	r3, r0
 800ce36:	461a      	mov	r2, r3
 800ce38:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ce3c:	4313      	orrs	r3, r2
 800ce3e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800ce42:	6878      	ldr	r0, [r7, #4]
 800ce44:	f7ff fc33 	bl	800c6ae <VL53L0X_device_read_strobe>
 800ce48:	4603      	mov	r3, r0
 800ce4a:	461a      	mov	r2, r3
 800ce4c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ce50:	4313      	orrs	r3, r2
 800ce52:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800ce56:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800ce5a:	461a      	mov	r2, r3
 800ce5c:	2190      	movs	r1, #144	@ 0x90
 800ce5e:	6878      	ldr	r0, [r7, #4]
 800ce60:	f002 f802 	bl	800ee68 <VL53L0X_RdDWord>
 800ce64:	4603      	mov	r3, r0
 800ce66:	461a      	mov	r2, r3
 800ce68:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ce6c:	4313      	orrs	r3, r2
 800ce6e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 800ce72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce74:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 800ce76:	b29b      	uxth	r3, r3
 800ce78:	657b      	str	r3, [r7, #84]	@ 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 800ce7a:	2276      	movs	r2, #118	@ 0x76
 800ce7c:	2194      	movs	r1, #148	@ 0x94
 800ce7e:	6878      	ldr	r0, [r7, #4]
 800ce80:	f001 ff10 	bl	800eca4 <VL53L0X_WrByte>
 800ce84:	4603      	mov	r3, r0
 800ce86:	461a      	mov	r2, r3
 800ce88:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ce8c:	4313      	orrs	r3, r2
 800ce8e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800ce92:	6878      	ldr	r0, [r7, #4]
 800ce94:	f7ff fc0b 	bl	800c6ae <VL53L0X_device_read_strobe>
 800ce98:	4603      	mov	r3, r0
 800ce9a:	461a      	mov	r2, r3
 800ce9c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cea0:	4313      	orrs	r3, r2
 800cea2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800cea6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800ceaa:	461a      	mov	r2, r3
 800ceac:	2190      	movs	r1, #144	@ 0x90
 800ceae:	6878      	ldr	r0, [r7, #4]
 800ceb0:	f001 ffda 	bl	800ee68 <VL53L0X_RdDWord>
 800ceb4:	4603      	mov	r3, r0
 800ceb6:	461a      	mov	r2, r3
 800ceb8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cebc:	4313      	orrs	r3, r2
 800cebe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 800cec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cec4:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 800cec6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800cec8:	4313      	orrs	r3, r2
 800ceca:	657b      	str	r3, [r7, #84]	@ 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 800cecc:	2200      	movs	r2, #0
 800cece:	2181      	movs	r1, #129	@ 0x81
 800ced0:	6878      	ldr	r0, [r7, #4]
 800ced2:	f001 fee7 	bl	800eca4 <VL53L0X_WrByte>
 800ced6:	4603      	mov	r3, r0
 800ced8:	461a      	mov	r2, r3
 800ceda:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cede:	4313      	orrs	r3, r2
 800cee0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800cee4:	2206      	movs	r2, #6
 800cee6:	21ff      	movs	r1, #255	@ 0xff
 800cee8:	6878      	ldr	r0, [r7, #4]
 800ceea:	f001 fedb 	bl	800eca4 <VL53L0X_WrByte>
 800ceee:	4603      	mov	r3, r0
 800cef0:	461a      	mov	r2, r3
 800cef2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cef6:	4313      	orrs	r3, r2
 800cef8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800cefc:	f107 0337 	add.w	r3, r7, #55	@ 0x37
 800cf00:	461a      	mov	r2, r3
 800cf02:	2183      	movs	r1, #131	@ 0x83
 800cf04:	6878      	ldr	r0, [r7, #4]
 800cf06:	f001 ff4f 	bl	800eda8 <VL53L0X_RdByte>
 800cf0a:	4603      	mov	r3, r0
 800cf0c:	461a      	mov	r2, r3
 800cf0e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cf12:	4313      	orrs	r3, r2
 800cf14:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 800cf18:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cf1c:	f023 0304 	bic.w	r3, r3, #4
 800cf20:	b2db      	uxtb	r3, r3
 800cf22:	461a      	mov	r2, r3
 800cf24:	2183      	movs	r1, #131	@ 0x83
 800cf26:	6878      	ldr	r0, [r7, #4]
 800cf28:	f001 febc 	bl	800eca4 <VL53L0X_WrByte>
 800cf2c:	4603      	mov	r3, r0
 800cf2e:	461a      	mov	r2, r3
 800cf30:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cf34:	4313      	orrs	r3, r2
 800cf36:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800cf3a:	2201      	movs	r2, #1
 800cf3c:	21ff      	movs	r1, #255	@ 0xff
 800cf3e:	6878      	ldr	r0, [r7, #4]
 800cf40:	f001 feb0 	bl	800eca4 <VL53L0X_WrByte>
 800cf44:	4603      	mov	r3, r0
 800cf46:	461a      	mov	r2, r3
 800cf48:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cf4c:	4313      	orrs	r3, r2
 800cf4e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800cf52:	2201      	movs	r2, #1
 800cf54:	2100      	movs	r1, #0
 800cf56:	6878      	ldr	r0, [r7, #4]
 800cf58:	f001 fea4 	bl	800eca4 <VL53L0X_WrByte>
 800cf5c:	4603      	mov	r3, r0
 800cf5e:	461a      	mov	r2, r3
 800cf60:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cf64:	4313      	orrs	r3, r2
 800cf66:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	21ff      	movs	r1, #255	@ 0xff
 800cf6e:	6878      	ldr	r0, [r7, #4]
 800cf70:	f001 fe98 	bl	800eca4 <VL53L0X_WrByte>
 800cf74:	4603      	mov	r3, r0
 800cf76:	461a      	mov	r2, r3
 800cf78:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cf7c:	4313      	orrs	r3, r2
 800cf7e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800cf82:	2200      	movs	r2, #0
 800cf84:	2180      	movs	r1, #128	@ 0x80
 800cf86:	6878      	ldr	r0, [r7, #4]
 800cf88:	f001 fe8c 	bl	800eca4 <VL53L0X_WrByte>
 800cf8c:	4603      	mov	r3, r0
 800cf8e:	461a      	mov	r2, r3
 800cf90:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cf94:	4313      	orrs	r3, r2
 800cf96:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800cf9a:	f997 305f 	ldrsb.w	r3, [r7, #95]	@ 0x5f
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	f040 808f 	bne.w	800d0c2 <VL53L0X_get_info_from_device+0x98e>
 800cfa4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800cfa8:	2b07      	cmp	r3, #7
 800cfaa:	f000 808a 	beq.w	800d0c2 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 800cfae:	78fb      	ldrb	r3, [r7, #3]
 800cfb0:	f003 0301 	and.w	r3, r3, #1
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d024      	beq.n	800d002 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800cfb8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800cfbc:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d11e      	bne.n	800d002 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	f897 205e 	ldrb.w	r2, [r7, #94]	@ 0x5e
 800cfca:	f883 2113 	strb.w	r2, [r3, #275]	@ 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	f897 205d 	ldrb.w	r2, [r7, #93]	@ 0x5d
 800cfd4:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800cfd8:	2300      	movs	r3, #0
 800cfda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cfdc:	e00e      	b.n	800cffc <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 800cfde:	f107 0208 	add.w	r2, r7, #8
 800cfe2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cfe4:	4413      	add	r3, r2
 800cfe6:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 800cfe8:	687a      	ldr	r2, [r7, #4]
 800cfea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cfec:	4413      	add	r3, r2
 800cfee:	f503 7395 	add.w	r3, r3, #298	@ 0x12a
 800cff2:	460a      	mov	r2, r1
 800cff4:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800cff6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cff8:	3301      	adds	r3, #1
 800cffa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cffc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cffe:	2b05      	cmp	r3, #5
 800d000:	dded      	ble.n	800cfde <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 800d002:	78fb      	ldrb	r3, [r7, #3]
 800d004:	f003 0302 	and.w	r3, r3, #2
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d018      	beq.n	800d03e <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800d00c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d010:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800d014:	2b00      	cmp	r3, #0
 800d016:	d112      	bne.n	800d03e <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d018:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	f883 20f1 	strb.w	r2, [r3, #241]	@ 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d022:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	f883 20f2 	strb.w	r2, [r3, #242]	@ 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	33f3      	adds	r3, #243	@ 0xf3
 800d030:	63bb      	str	r3, [r7, #56]	@ 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 800d032:	f107 0310 	add.w	r3, r7, #16
 800d036:	4619      	mov	r1, r3
 800d038:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d03a:	f006 fcee 	bl	8013a1a <strcpy>

		}

		if (((option & 4) == 4) &&
 800d03e:	78fb      	ldrb	r3, [r7, #3]
 800d040:	f003 0304 	and.w	r3, r3, #4
 800d044:	2b00      	cmp	r3, #0
 800d046:	d030      	beq.n	800d0aa <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800d048:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d04c:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800d050:	2b00      	cmp	r3, #0
 800d052:	d12a      	bne.n	800d0aa <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d054:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d05c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 800d064:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d066:	025b      	lsls	r3, r3, #9
 800d068:	643b      	str	r3, [r7, #64]	@ 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d06e:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 800d072:	2300      	movs	r3, #0
 800d074:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 800d078:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d011      	beq.n	800d0a2 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 800d07e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d080:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d082:	1ad3      	subs	r3, r2, r3
 800d084:	64bb      	str	r3, [r7, #72]	@ 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 800d086:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d088:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800d08c:	fb02 f303 	mul.w	r3, r2, r3
 800d090:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 800d092:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
					OffsetMicroMeters *= -1;
 800d096:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800d09a:	425b      	negs	r3, r3
 800d09c:	b29b      	uxth	r3, r3
 800d09e:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
			}

			PALDevDataSet(Dev,
 800d0a2:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	@ 0x5a
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 800d0aa:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800d0ae:	78fb      	ldrb	r3, [r7, #3]
 800d0b0:	4313      	orrs	r3, r2
 800d0b2:	b2db      	uxtb	r3, r3
 800d0b4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 800d0b8:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800d0c2:	f997 305f 	ldrsb.w	r3, [r7, #95]	@ 0x5f
}
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	3760      	adds	r7, #96	@ 0x60
 800d0ca:	46bd      	mov	sp, r7
 800d0cc:	bd80      	pop	{r7, pc}

0800d0ce <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 800d0ce:	b480      	push	{r7}
 800d0d0:	b087      	sub	sp, #28
 800d0d2:	af00      	add	r7, sp, #0
 800d0d4:	6078      	str	r0, [r7, #4]
 800d0d6:	460b      	mov	r3, r1
 800d0d8:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 800d0da:	f240 6277 	movw	r2, #1655	@ 0x677
 800d0de:	f04f 0300 	mov.w	r3, #0
 800d0e2:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 800d0e6:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 800d0ea:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 800d0ec:	78fb      	ldrb	r3, [r7, #3]
 800d0ee:	68fa      	ldr	r2, [r7, #12]
 800d0f0:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 800d0f4:	693a      	ldr	r2, [r7, #16]
 800d0f6:	fb02 f303 	mul.w	r3, r2, r3
 800d0fa:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 800d0fc:	68bb      	ldr	r3, [r7, #8]
}
 800d0fe:	4618      	mov	r0, r3
 800d100:	371c      	adds	r7, #28
 800d102:	46bd      	mov	sp, r7
 800d104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d108:	4770      	bx	lr

0800d10a <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 800d10a:	b480      	push	{r7}
 800d10c:	b087      	sub	sp, #28
 800d10e:	af00      	add	r7, sp, #0
 800d110:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800d112:	2300      	movs	r3, #0
 800d114:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800d116:	2300      	movs	r3, #0
 800d118:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800d11a:	2300      	movs	r3, #0
 800d11c:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d015      	beq.n	800d150 <VL53L0X_encode_timeout+0x46>
		ls_byte = timeout_macro_clks - 1;
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	3b01      	subs	r3, #1
 800d128:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800d12a:	e005      	b.n	800d138 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800d12c:	693b      	ldr	r3, [r7, #16]
 800d12e:	085b      	lsrs	r3, r3, #1
 800d130:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800d132:	89fb      	ldrh	r3, [r7, #14]
 800d134:	3301      	adds	r3, #1
 800d136:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800d138:	693b      	ldr	r3, [r7, #16]
 800d13a:	2bff      	cmp	r3, #255	@ 0xff
 800d13c:	d8f6      	bhi.n	800d12c <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800d13e:	89fb      	ldrh	r3, [r7, #14]
 800d140:	021b      	lsls	r3, r3, #8
 800d142:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800d144:	693b      	ldr	r3, [r7, #16]
 800d146:	b29b      	uxth	r3, r3
 800d148:	b2db      	uxtb	r3, r3
 800d14a:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800d14c:	4413      	add	r3, r2
 800d14e:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800d150:	8afb      	ldrh	r3, [r7, #22]

}
 800d152:	4618      	mov	r0, r3
 800d154:	371c      	adds	r7, #28
 800d156:	46bd      	mov	sp, r7
 800d158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d15c:	4770      	bx	lr

0800d15e <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 800d15e:	b480      	push	{r7}
 800d160:	b085      	sub	sp, #20
 800d162:	af00      	add	r7, sp, #0
 800d164:	4603      	mov	r3, r0
 800d166:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800d168:	2300      	movs	r3, #0
 800d16a:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800d16c:	88fb      	ldrh	r3, [r7, #6]
 800d16e:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800d170:	88fa      	ldrh	r2, [r7, #6]
 800d172:	0a12      	lsrs	r2, r2, #8
 800d174:	b292      	uxth	r2, r2
 800d176:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800d178:	3301      	adds	r3, #1
 800d17a:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800d17c:	68fb      	ldr	r3, [r7, #12]
}
 800d17e:	4618      	mov	r0, r3
 800d180:	3714      	adds	r7, #20
 800d182:	46bd      	mov	sp, r7
 800d184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d188:	4770      	bx	lr
	...

0800d18c <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 800d18c:	b580      	push	{r7, lr}
 800d18e:	b088      	sub	sp, #32
 800d190:	af00      	add	r7, sp, #0
 800d192:	60f8      	str	r0, [r7, #12]
 800d194:	60b9      	str	r1, [r7, #8]
 800d196:	4613      	mov	r3, r2
 800d198:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800d19a:	2300      	movs	r3, #0
 800d19c:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800d19e:	79fb      	ldrb	r3, [r7, #7]
 800d1a0:	4619      	mov	r1, r3
 800d1a2:	68f8      	ldr	r0, [r7, #12]
 800d1a4:	f7ff ff93 	bl	800d0ce <VL53L0X_calc_macro_period_ps>
 800d1a8:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800d1aa:	69bb      	ldr	r3, [r7, #24]
 800d1ac:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800d1b0:	4a0a      	ldr	r2, [pc, #40]	@ (800d1dc <VL53L0X_calc_timeout_mclks+0x50>)
 800d1b2:	fba2 2303 	umull	r2, r3, r2, r3
 800d1b6:	099b      	lsrs	r3, r3, #6
 800d1b8:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 800d1ba:	68bb      	ldr	r3, [r7, #8]
 800d1bc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800d1c0:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 800d1c4:	697b      	ldr	r3, [r7, #20]
 800d1c6:	085b      	lsrs	r3, r3, #1
 800d1c8:	441a      	add	r2, r3
	timeout_period_mclks =
 800d1ca:	697b      	ldr	r3, [r7, #20]
 800d1cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800d1d0:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 800d1d2:	69fb      	ldr	r3, [r7, #28]
}
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	3720      	adds	r7, #32
 800d1d8:	46bd      	mov	sp, r7
 800d1da:	bd80      	pop	{r7, pc}
 800d1dc:	10624dd3 	.word	0x10624dd3

0800d1e0 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 800d1e0:	b580      	push	{r7, lr}
 800d1e2:	b086      	sub	sp, #24
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	6078      	str	r0, [r7, #4]
 800d1e8:	460b      	mov	r3, r1
 800d1ea:	807b      	strh	r3, [r7, #2]
 800d1ec:	4613      	mov	r3, r2
 800d1ee:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800d1f4:	787b      	ldrb	r3, [r7, #1]
 800d1f6:	4619      	mov	r1, r3
 800d1f8:	6878      	ldr	r0, [r7, #4]
 800d1fa:	f7ff ff68 	bl	800d0ce <VL53L0X_calc_macro_period_ps>
 800d1fe:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800d200:	693b      	ldr	r3, [r7, #16]
 800d202:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800d206:	4a0a      	ldr	r2, [pc, #40]	@ (800d230 <VL53L0X_calc_timeout_us+0x50>)
 800d208:	fba2 2303 	umull	r2, r3, r2, r3
 800d20c:	099b      	lsrs	r3, r3, #6
 800d20e:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 800d210:	887b      	ldrh	r3, [r7, #2]
 800d212:	68fa      	ldr	r2, [r7, #12]
 800d214:	fb02 f303 	mul.w	r3, r2, r3
 800d218:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
	actual_timeout_period_us =
 800d21c:	4a04      	ldr	r2, [pc, #16]	@ (800d230 <VL53L0X_calc_timeout_us+0x50>)
 800d21e:	fba2 2303 	umull	r2, r3, r2, r3
 800d222:	099b      	lsrs	r3, r3, #6
 800d224:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 800d226:	697b      	ldr	r3, [r7, #20]
}
 800d228:	4618      	mov	r0, r3
 800d22a:	3718      	adds	r7, #24
 800d22c:	46bd      	mov	sp, r7
 800d22e:	bd80      	pop	{r7, pc}
 800d230:	10624dd3 	.word	0x10624dd3

0800d234 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 800d234:	b580      	push	{r7, lr}
 800d236:	b08c      	sub	sp, #48	@ 0x30
 800d238:	af00      	add	r7, sp, #0
 800d23a:	60f8      	str	r0, [r7, #12]
 800d23c:	460b      	mov	r3, r1
 800d23e:	607a      	str	r2, [r7, #4]
 800d240:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d242:	2300      	movs	r3, #0
 800d244:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 800d248:	2300      	movs	r3, #0
 800d24a:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 800d24e:	2300      	movs	r3, #0
 800d250:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 800d252:	2300      	movs	r3, #0
 800d254:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 800d256:	2300      	movs	r3, #0
 800d258:	84bb      	strh	r3, [r7, #36]	@ 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800d25a:	7afb      	ldrb	r3, [r7, #11]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d005      	beq.n	800d26c <get_sequence_step_timeout+0x38>
 800d260:	7afb      	ldrb	r3, [r7, #11]
 800d262:	2b01      	cmp	r3, #1
 800d264:	d002      	beq.n	800d26c <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800d266:	7afb      	ldrb	r3, [r7, #11]
 800d268:	2b02      	cmp	r3, #2
 800d26a:	d127      	bne.n	800d2bc <get_sequence_step_timeout+0x88>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800d26c:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 800d270:	461a      	mov	r2, r3
 800d272:	2100      	movs	r1, #0
 800d274:	68f8      	ldr	r0, [r7, #12]
 800d276:	f7fd fa09 	bl	800a68c <VL53L0X_GetVcselPulsePeriod>
 800d27a:	4603      	mov	r3, r0
 800d27c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 800d280:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800d284:	2b00      	cmp	r3, #0
 800d286:	d109      	bne.n	800d29c <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 800d288:	f107 0320 	add.w	r3, r7, #32
 800d28c:	461a      	mov	r2, r3
 800d28e:	2146      	movs	r1, #70	@ 0x46
 800d290:	68f8      	ldr	r0, [r7, #12]
 800d292:	f001 fd89 	bl	800eda8 <VL53L0X_RdByte>
 800d296:	4603      	mov	r3, r0
 800d298:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 800d29c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	f7ff ff5c 	bl	800d15e <VL53L0X_decode_timeout>
 800d2a6:	4603      	mov	r3, r0
 800d2a8:	847b      	strh	r3, [r7, #34]	@ 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800d2aa:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 800d2ae:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d2b0:	4619      	mov	r1, r3
 800d2b2:	68f8      	ldr	r0, [r7, #12]
 800d2b4:	f7ff ff94 	bl	800d1e0 <VL53L0X_calc_timeout_us>
 800d2b8:	62b8      	str	r0, [r7, #40]	@ 0x28
 800d2ba:	e092      	b.n	800d3e2 <get_sequence_step_timeout+0x1ae>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800d2bc:	7afb      	ldrb	r3, [r7, #11]
 800d2be:	2b03      	cmp	r3, #3
 800d2c0:	d135      	bne.n	800d32e <get_sequence_step_timeout+0xfa>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800d2c2:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 800d2c6:	461a      	mov	r2, r3
 800d2c8:	2100      	movs	r1, #0
 800d2ca:	68f8      	ldr	r0, [r7, #12]
 800d2cc:	f7fd f9de 	bl	800a68c <VL53L0X_GetVcselPulsePeriod>
 800d2d0:	4603      	mov	r3, r0
 800d2d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800d2d6:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	f040 8081 	bne.w	800d3e2 <get_sequence_step_timeout+0x1ae>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800d2e0:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 800d2e4:	461a      	mov	r2, r3
 800d2e6:	2100      	movs	r1, #0
 800d2e8:	68f8      	ldr	r0, [r7, #12]
 800d2ea:	f7fd f9cf 	bl	800a68c <VL53L0X_GetVcselPulsePeriod>
 800d2ee:	4603      	mov	r3, r0
 800d2f0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 800d2f4:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d109      	bne.n	800d310 <get_sequence_step_timeout+0xdc>
				Status = VL53L0X_RdWord(Dev,
 800d2fc:	f107 031e 	add.w	r3, r7, #30
 800d300:	461a      	mov	r2, r3
 800d302:	2151      	movs	r1, #81	@ 0x51
 800d304:	68f8      	ldr	r0, [r7, #12]
 800d306:	f001 fd79 	bl	800edfc <VL53L0X_RdWord>
 800d30a:	4603      	mov	r3, r0
 800d30c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800d310:	8bfb      	ldrh	r3, [r7, #30]
 800d312:	4618      	mov	r0, r3
 800d314:	f7ff ff23 	bl	800d15e <VL53L0X_decode_timeout>
 800d318:	4603      	mov	r3, r0
 800d31a:	84fb      	strh	r3, [r7, #38]	@ 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800d31c:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 800d320:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d322:	4619      	mov	r1, r3
 800d324:	68f8      	ldr	r0, [r7, #12]
 800d326:	f7ff ff5b 	bl	800d1e0 <VL53L0X_calc_timeout_us>
 800d32a:	62b8      	str	r0, [r7, #40]	@ 0x28
 800d32c:	e059      	b.n	800d3e2 <get_sequence_step_timeout+0x1ae>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800d32e:	7afb      	ldrb	r3, [r7, #11]
 800d330:	2b04      	cmp	r3, #4
 800d332:	d156      	bne.n	800d3e2 <get_sequence_step_timeout+0x1ae>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800d334:	f107 0314 	add.w	r3, r7, #20
 800d338:	4619      	mov	r1, r3
 800d33a:	68f8      	ldr	r0, [r7, #12]
 800d33c:	f7fd fab0 	bl	800a8a0 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 800d340:	2300      	movs	r3, #0
 800d342:	84fb      	strh	r3, [r7, #38]	@ 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 800d344:	7dfb      	ldrb	r3, [r7, #23]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d01d      	beq.n	800d386 <get_sequence_step_timeout+0x152>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800d34a:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 800d34e:	461a      	mov	r2, r3
 800d350:	2100      	movs	r1, #0
 800d352:	68f8      	ldr	r0, [r7, #12]
 800d354:	f7fd f99a 	bl	800a68c <VL53L0X_GetVcselPulsePeriod>
 800d358:	4603      	mov	r3, r0
 800d35a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 800d35e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800d362:	2b00      	cmp	r3, #0
 800d364:	d10f      	bne.n	800d386 <get_sequence_step_timeout+0x152>
				Status = VL53L0X_RdWord(Dev,
 800d366:	f107 031e 	add.w	r3, r7, #30
 800d36a:	461a      	mov	r2, r3
 800d36c:	2151      	movs	r1, #81	@ 0x51
 800d36e:	68f8      	ldr	r0, [r7, #12]
 800d370:	f001 fd44 	bl	800edfc <VL53L0X_RdWord>
 800d374:	4603      	mov	r3, r0
 800d376:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800d37a:	8bfb      	ldrh	r3, [r7, #30]
 800d37c:	4618      	mov	r0, r3
 800d37e:	f7ff feee 	bl	800d15e <VL53L0X_decode_timeout>
 800d382:	4603      	mov	r3, r0
 800d384:	84fb      	strh	r3, [r7, #38]	@ 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800d386:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d109      	bne.n	800d3a2 <get_sequence_step_timeout+0x16e>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800d38e:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 800d392:	461a      	mov	r2, r3
 800d394:	2101      	movs	r1, #1
 800d396:	68f8      	ldr	r0, [r7, #12]
 800d398:	f7fd f978 	bl	800a68c <VL53L0X_GetVcselPulsePeriod>
 800d39c:	4603      	mov	r3, r0
 800d39e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800d3a2:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d10f      	bne.n	800d3ca <get_sequence_step_timeout+0x196>
			Status = VL53L0X_RdWord(Dev,
 800d3aa:	f107 031c 	add.w	r3, r7, #28
 800d3ae:	461a      	mov	r2, r3
 800d3b0:	2171      	movs	r1, #113	@ 0x71
 800d3b2:	68f8      	ldr	r0, [r7, #12]
 800d3b4:	f001 fd22 	bl	800edfc <VL53L0X_RdWord>
 800d3b8:	4603      	mov	r3, r0
 800d3ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 800d3be:	8bbb      	ldrh	r3, [r7, #28]
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	f7ff fecc 	bl	800d15e <VL53L0X_decode_timeout>
 800d3c6:	4603      	mov	r3, r0
 800d3c8:	84bb      	strh	r3, [r7, #36]	@ 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 800d3ca:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d3cc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d3ce:	1ad3      	subs	r3, r2, r3
 800d3d0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800d3d2:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 800d3d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d3d8:	4619      	mov	r1, r3
 800d3da:	68f8      	ldr	r0, [r7, #12]
 800d3dc:	f7ff ff00 	bl	800d1e0 <VL53L0X_calc_timeout_us>
 800d3e0:	62b8      	str	r0, [r7, #40]	@ 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d3e6:	601a      	str	r2, [r3, #0]

	return Status;
 800d3e8:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	3730      	adds	r7, #48	@ 0x30
 800d3f0:	46bd      	mov	sp, r7
 800d3f2:	bd80      	pop	{r7, pc}

0800d3f4 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 800d3f4:	b580      	push	{r7, lr}
 800d3f6:	b08a      	sub	sp, #40	@ 0x28
 800d3f8:	af00      	add	r7, sp, #0
 800d3fa:	60f8      	str	r0, [r7, #12]
 800d3fc:	460b      	mov	r3, r1
 800d3fe:	607a      	str	r2, [r7, #4]
 800d400:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d402:	2300      	movs	r3, #0
 800d404:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800d408:	7afb      	ldrb	r3, [r7, #11]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d005      	beq.n	800d41a <set_sequence_step_timeout+0x26>
 800d40e:	7afb      	ldrb	r3, [r7, #11]
 800d410:	2b01      	cmp	r3, #1
 800d412:	d002      	beq.n	800d41a <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800d414:	7afb      	ldrb	r3, [r7, #11]
 800d416:	2b02      	cmp	r3, #2
 800d418:	d138      	bne.n	800d48c <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800d41a:	f107 031b 	add.w	r3, r7, #27
 800d41e:	461a      	mov	r2, r3
 800d420:	2100      	movs	r1, #0
 800d422:	68f8      	ldr	r0, [r7, #12]
 800d424:	f7fd f932 	bl	800a68c <VL53L0X_GetVcselPulsePeriod>
 800d428:	4603      	mov	r3, r0
 800d42a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 800d42e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d432:	2b00      	cmp	r3, #0
 800d434:	d11a      	bne.n	800d46c <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 800d436:	7efb      	ldrb	r3, [r7, #27]
 800d438:	461a      	mov	r2, r3
 800d43a:	6879      	ldr	r1, [r7, #4]
 800d43c:	68f8      	ldr	r0, [r7, #12]
 800d43e:	f7ff fea5 	bl	800d18c <VL53L0X_calc_timeout_mclks>
 800d442:	4603      	mov	r3, r0
 800d444:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 800d446:	8bbb      	ldrh	r3, [r7, #28]
 800d448:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d44c:	d903      	bls.n	800d456 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 800d44e:	23ff      	movs	r3, #255	@ 0xff
 800d450:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800d454:	e004      	b.n	800d460 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 800d456:	8bbb      	ldrh	r3, [r7, #28]
 800d458:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 800d45a:	3b01      	subs	r3, #1
 800d45c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d460:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d464:	b29a      	uxth	r2, r3
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	f8a3 20d8 	strh.w	r2, [r3, #216]	@ 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800d46c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d470:	2b00      	cmp	r3, #0
 800d472:	f040 80ab 	bne.w	800d5cc <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 800d476:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d47a:	461a      	mov	r2, r3
 800d47c:	2146      	movs	r1, #70	@ 0x46
 800d47e:	68f8      	ldr	r0, [r7, #12]
 800d480:	f001 fc10 	bl	800eca4 <VL53L0X_WrByte>
 800d484:	4603      	mov	r3, r0
 800d486:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 800d48a:	e09f      	b.n	800d5cc <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800d48c:	7afb      	ldrb	r3, [r7, #11]
 800d48e:	2b03      	cmp	r3, #3
 800d490:	d135      	bne.n	800d4fe <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 800d492:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d496:	2b00      	cmp	r3, #0
 800d498:	d11b      	bne.n	800d4d2 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800d49a:	f107 031b 	add.w	r3, r7, #27
 800d49e:	461a      	mov	r2, r3
 800d4a0:	2100      	movs	r1, #0
 800d4a2:	68f8      	ldr	r0, [r7, #12]
 800d4a4:	f7fd f8f2 	bl	800a68c <VL53L0X_GetVcselPulsePeriod>
 800d4a8:	4603      	mov	r3, r0
 800d4aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800d4ae:	7efb      	ldrb	r3, [r7, #27]
 800d4b0:	461a      	mov	r2, r3
 800d4b2:	6879      	ldr	r1, [r7, #4]
 800d4b4:	68f8      	ldr	r0, [r7, #12]
 800d4b6:	f7ff fe69 	bl	800d18c <VL53L0X_calc_timeout_mclks>
 800d4ba:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 800d4bc:	84bb      	strh	r3, [r7, #36]	@ 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 800d4be:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	f7ff fe22 	bl	800d10a <VL53L0X_encode_timeout>
 800d4c6:	4603      	mov	r3, r0
 800d4c8:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d4ca:	8b3a      	ldrh	r2, [r7, #24]
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	f8a3 20d8 	strh.w	r2, [r3, #216]	@ 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800d4d2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d108      	bne.n	800d4ec <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 800d4da:	8b3b      	ldrh	r3, [r7, #24]
 800d4dc:	461a      	mov	r2, r3
 800d4de:	2151      	movs	r1, #81	@ 0x51
 800d4e0:	68f8      	ldr	r0, [r7, #12]
 800d4e2:	f001 fc03 	bl	800ecec <VL53L0X_WrWord>
 800d4e6:	4603      	mov	r3, r0
 800d4e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800d4ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d16b      	bne.n	800d5cc <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	687a      	ldr	r2, [r7, #4]
 800d4f8:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
 800d4fc:	e066      	b.n	800d5cc <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800d4fe:	7afb      	ldrb	r3, [r7, #11]
 800d500:	2b04      	cmp	r3, #4
 800d502:	d160      	bne.n	800d5c6 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800d504:	f107 0310 	add.w	r3, r7, #16
 800d508:	4619      	mov	r1, r3
 800d50a:	68f8      	ldr	r0, [r7, #12]
 800d50c:	f7fd f9c8 	bl	800a8a0 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800d510:	2300      	movs	r3, #0
 800d512:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800d514:	7cfb      	ldrb	r3, [r7, #19]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d01d      	beq.n	800d556 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800d51a:	f107 031b 	add.w	r3, r7, #27
 800d51e:	461a      	mov	r2, r3
 800d520:	2100      	movs	r1, #0
 800d522:	68f8      	ldr	r0, [r7, #12]
 800d524:	f7fd f8b2 	bl	800a68c <VL53L0X_GetVcselPulsePeriod>
 800d528:	4603      	mov	r3, r0
 800d52a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 800d52e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d532:	2b00      	cmp	r3, #0
 800d534:	d10f      	bne.n	800d556 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 800d536:	f107 0318 	add.w	r3, r7, #24
 800d53a:	461a      	mov	r2, r3
 800d53c:	2151      	movs	r1, #81	@ 0x51
 800d53e:	68f8      	ldr	r0, [r7, #12]
 800d540:	f001 fc5c 	bl	800edfc <VL53L0X_RdWord>
 800d544:	4603      	mov	r3, r0
 800d546:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 800d54a:	8b3b      	ldrh	r3, [r7, #24]
 800d54c:	4618      	mov	r0, r3
 800d54e:	f7ff fe06 	bl	800d15e <VL53L0X_decode_timeout>
 800d552:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800d554:	84bb      	strh	r3, [r7, #36]	@ 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800d556:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d109      	bne.n	800d572 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800d55e:	f107 031b 	add.w	r3, r7, #27
 800d562:	461a      	mov	r2, r3
 800d564:	2101      	movs	r1, #1
 800d566:	68f8      	ldr	r0, [r7, #12]
 800d568:	f7fd f890 	bl	800a68c <VL53L0X_GetVcselPulsePeriod>
 800d56c:	4603      	mov	r3, r0
 800d56e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800d572:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d576:	2b00      	cmp	r3, #0
 800d578:	d128      	bne.n	800d5cc <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800d57a:	7efb      	ldrb	r3, [r7, #27]
 800d57c:	461a      	mov	r2, r3
 800d57e:	6879      	ldr	r1, [r7, #4]
 800d580:	68f8      	ldr	r0, [r7, #12]
 800d582:	f7ff fe03 	bl	800d18c <VL53L0X_calc_timeout_mclks>
 800d586:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800d588:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d58a:	6a3a      	ldr	r2, [r7, #32]
 800d58c:	4413      	add	r3, r2
 800d58e:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800d590:	6a38      	ldr	r0, [r7, #32]
 800d592:	f7ff fdba 	bl	800d10a <VL53L0X_encode_timeout>
 800d596:	4603      	mov	r3, r0
 800d598:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 800d59a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d108      	bne.n	800d5b4 <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800d5a2:	8bfb      	ldrh	r3, [r7, #30]
 800d5a4:	461a      	mov	r2, r3
 800d5a6:	2171      	movs	r1, #113	@ 0x71
 800d5a8:	68f8      	ldr	r0, [r7, #12]
 800d5aa:	f001 fb9f 	bl	800ecec <VL53L0X_WrWord>
 800d5ae:	4603      	mov	r3, r0
 800d5b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800d5b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d107      	bne.n	800d5cc <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	687a      	ldr	r2, [r7, #4]
 800d5c0:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
 800d5c4:	e002      	b.n	800d5cc <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800d5c6:	23fc      	movs	r3, #252	@ 0xfc
 800d5c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	}
	return Status;
 800d5cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	3728      	adds	r7, #40	@ 0x28
 800d5d4:	46bd      	mov	sp, r7
 800d5d6:	bd80      	pop	{r7, pc}

0800d5d8 <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	b08a      	sub	sp, #40	@ 0x28
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	6078      	str	r0, [r7, #4]
 800d5e0:	460b      	mov	r3, r1
 800d5e2:	70fb      	strb	r3, [r7, #3]
 800d5e4:	4613      	mov	r3, r2
 800d5e6:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d5e8:	2300      	movs	r3, #0
 800d5ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 800d5ee:	230c      	movs	r3, #12
 800d5f0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 800d5f4:	2312      	movs	r3, #18
 800d5f6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 800d5fa:	2308      	movs	r3, #8
 800d5fc:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 800d600:	230e      	movs	r3, #14
 800d602:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 800d606:	2300      	movs	r3, #0
 800d608:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 800d60a:	78bb      	ldrb	r3, [r7, #2]
 800d60c:	f003 0301 	and.w	r3, r3, #1
 800d610:	b2db      	uxtb	r3, r3
 800d612:	2b00      	cmp	r3, #0
 800d614:	d003      	beq.n	800d61e <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800d616:	23fc      	movs	r3, #252	@ 0xfc
 800d618:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d61c:	e020      	b.n	800d660 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 800d61e:	78fb      	ldrb	r3, [r7, #3]
 800d620:	2b00      	cmp	r3, #0
 800d622:	d10d      	bne.n	800d640 <VL53L0X_set_vcsel_pulse_period+0x68>
 800d624:	78ba      	ldrb	r2, [r7, #2]
 800d626:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d62a:	429a      	cmp	r2, r3
 800d62c:	d304      	bcc.n	800d638 <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 800d62e:	78ba      	ldrb	r2, [r7, #2]
 800d630:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800d634:	429a      	cmp	r2, r3
 800d636:	d903      	bls.n	800d640 <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800d638:	23fc      	movs	r3, #252	@ 0xfc
 800d63a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d63e:	e00f      	b.n	800d660 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 800d640:	78fb      	ldrb	r3, [r7, #3]
 800d642:	2b01      	cmp	r3, #1
 800d644:	d10c      	bne.n	800d660 <VL53L0X_set_vcsel_pulse_period+0x88>
 800d646:	78ba      	ldrb	r2, [r7, #2]
 800d648:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d64c:	429a      	cmp	r2, r3
 800d64e:	d304      	bcc.n	800d65a <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 800d650:	78ba      	ldrb	r2, [r7, #2]
 800d652:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800d656:	429a      	cmp	r2, r3
 800d658:	d902      	bls.n	800d660 <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800d65a:	23fc      	movs	r3, #252	@ 0xfc
 800d65c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 800d660:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d664:	2b00      	cmp	r3, #0
 800d666:	d002      	beq.n	800d66e <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 800d668:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d66c:	e237      	b.n	800dade <VL53L0X_set_vcsel_pulse_period+0x506>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 800d66e:	78fb      	ldrb	r3, [r7, #3]
 800d670:	2b00      	cmp	r3, #0
 800d672:	d150      	bne.n	800d716 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 800d674:	78bb      	ldrb	r3, [r7, #2]
 800d676:	2b0c      	cmp	r3, #12
 800d678:	d110      	bne.n	800d69c <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 800d67a:	2218      	movs	r2, #24
 800d67c:	2157      	movs	r1, #87	@ 0x57
 800d67e:	6878      	ldr	r0, [r7, #4]
 800d680:	f001 fb10 	bl	800eca4 <VL53L0X_WrByte>
 800d684:	4603      	mov	r3, r0
 800d686:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 800d68a:	2208      	movs	r2, #8
 800d68c:	2156      	movs	r1, #86	@ 0x56
 800d68e:	6878      	ldr	r0, [r7, #4]
 800d690:	f001 fb08 	bl	800eca4 <VL53L0X_WrByte>
 800d694:	4603      	mov	r3, r0
 800d696:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d69a:	e17f      	b.n	800d99c <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 800d69c:	78bb      	ldrb	r3, [r7, #2]
 800d69e:	2b0e      	cmp	r3, #14
 800d6a0:	d110      	bne.n	800d6c4 <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 800d6a2:	2230      	movs	r2, #48	@ 0x30
 800d6a4:	2157      	movs	r1, #87	@ 0x57
 800d6a6:	6878      	ldr	r0, [r7, #4]
 800d6a8:	f001 fafc 	bl	800eca4 <VL53L0X_WrByte>
 800d6ac:	4603      	mov	r3, r0
 800d6ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 800d6b2:	2208      	movs	r2, #8
 800d6b4:	2156      	movs	r1, #86	@ 0x56
 800d6b6:	6878      	ldr	r0, [r7, #4]
 800d6b8:	f001 faf4 	bl	800eca4 <VL53L0X_WrByte>
 800d6bc:	4603      	mov	r3, r0
 800d6be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d6c2:	e16b      	b.n	800d99c <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 800d6c4:	78bb      	ldrb	r3, [r7, #2]
 800d6c6:	2b10      	cmp	r3, #16
 800d6c8:	d110      	bne.n	800d6ec <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 800d6ca:	2240      	movs	r2, #64	@ 0x40
 800d6cc:	2157      	movs	r1, #87	@ 0x57
 800d6ce:	6878      	ldr	r0, [r7, #4]
 800d6d0:	f001 fae8 	bl	800eca4 <VL53L0X_WrByte>
 800d6d4:	4603      	mov	r3, r0
 800d6d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 800d6da:	2208      	movs	r2, #8
 800d6dc:	2156      	movs	r1, #86	@ 0x56
 800d6de:	6878      	ldr	r0, [r7, #4]
 800d6e0:	f001 fae0 	bl	800eca4 <VL53L0X_WrByte>
 800d6e4:	4603      	mov	r3, r0
 800d6e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d6ea:	e157      	b.n	800d99c <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 800d6ec:	78bb      	ldrb	r3, [r7, #2]
 800d6ee:	2b12      	cmp	r3, #18
 800d6f0:	f040 8154 	bne.w	800d99c <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800d6f4:	2250      	movs	r2, #80	@ 0x50
 800d6f6:	2157      	movs	r1, #87	@ 0x57
 800d6f8:	6878      	ldr	r0, [r7, #4]
 800d6fa:	f001 fad3 	bl	800eca4 <VL53L0X_WrByte>
 800d6fe:	4603      	mov	r3, r0
 800d700:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 800d704:	2208      	movs	r2, #8
 800d706:	2156      	movs	r1, #86	@ 0x56
 800d708:	6878      	ldr	r0, [r7, #4]
 800d70a:	f001 facb 	bl	800eca4 <VL53L0X_WrByte>
 800d70e:	4603      	mov	r3, r0
 800d710:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d714:	e142      	b.n	800d99c <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 800d716:	78fb      	ldrb	r3, [r7, #3]
 800d718:	2b01      	cmp	r3, #1
 800d71a:	f040 813f 	bne.w	800d99c <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 800d71e:	78bb      	ldrb	r3, [r7, #2]
 800d720:	2b08      	cmp	r3, #8
 800d722:	d14c      	bne.n	800d7be <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 800d724:	2210      	movs	r2, #16
 800d726:	2148      	movs	r1, #72	@ 0x48
 800d728:	6878      	ldr	r0, [r7, #4]
 800d72a:	f001 fabb 	bl	800eca4 <VL53L0X_WrByte>
 800d72e:	4603      	mov	r3, r0
 800d730:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 800d734:	2208      	movs	r2, #8
 800d736:	2147      	movs	r1, #71	@ 0x47
 800d738:	6878      	ldr	r0, [r7, #4]
 800d73a:	f001 fab3 	bl	800eca4 <VL53L0X_WrByte>
 800d73e:	4603      	mov	r3, r0
 800d740:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800d744:	2202      	movs	r2, #2
 800d746:	2132      	movs	r1, #50	@ 0x32
 800d748:	6878      	ldr	r0, [r7, #4]
 800d74a:	f001 faab 	bl	800eca4 <VL53L0X_WrByte>
 800d74e:	4603      	mov	r3, r0
 800d750:	461a      	mov	r2, r3
 800d752:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d756:	4313      	orrs	r3, r2
 800d758:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 800d75c:	220c      	movs	r2, #12
 800d75e:	2130      	movs	r1, #48	@ 0x30
 800d760:	6878      	ldr	r0, [r7, #4]
 800d762:	f001 fa9f 	bl	800eca4 <VL53L0X_WrByte>
 800d766:	4603      	mov	r3, r0
 800d768:	461a      	mov	r2, r3
 800d76a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d76e:	4313      	orrs	r3, r2
 800d770:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800d774:	2201      	movs	r2, #1
 800d776:	21ff      	movs	r1, #255	@ 0xff
 800d778:	6878      	ldr	r0, [r7, #4]
 800d77a:	f001 fa93 	bl	800eca4 <VL53L0X_WrByte>
 800d77e:	4603      	mov	r3, r0
 800d780:	461a      	mov	r2, r3
 800d782:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d786:	4313      	orrs	r3, r2
 800d788:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Status |= VL53L0X_WrByte(Dev,
 800d78c:	2230      	movs	r2, #48	@ 0x30
 800d78e:	2130      	movs	r1, #48	@ 0x30
 800d790:	6878      	ldr	r0, [r7, #4]
 800d792:	f001 fa87 	bl	800eca4 <VL53L0X_WrByte>
 800d796:	4603      	mov	r3, r0
 800d798:	461a      	mov	r2, r3
 800d79a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d79e:	4313      	orrs	r3, r2
 800d7a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800d7a4:	2200      	movs	r2, #0
 800d7a6:	21ff      	movs	r1, #255	@ 0xff
 800d7a8:	6878      	ldr	r0, [r7, #4]
 800d7aa:	f001 fa7b 	bl	800eca4 <VL53L0X_WrByte>
 800d7ae:	4603      	mov	r3, r0
 800d7b0:	461a      	mov	r2, r3
 800d7b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d7b6:	4313      	orrs	r3, r2
 800d7b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d7bc:	e0ee      	b.n	800d99c <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 800d7be:	78bb      	ldrb	r3, [r7, #2]
 800d7c0:	2b0a      	cmp	r3, #10
 800d7c2:	d14c      	bne.n	800d85e <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 800d7c4:	2228      	movs	r2, #40	@ 0x28
 800d7c6:	2148      	movs	r1, #72	@ 0x48
 800d7c8:	6878      	ldr	r0, [r7, #4]
 800d7ca:	f001 fa6b 	bl	800eca4 <VL53L0X_WrByte>
 800d7ce:	4603      	mov	r3, r0
 800d7d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 800d7d4:	2208      	movs	r2, #8
 800d7d6:	2147      	movs	r1, #71	@ 0x47
 800d7d8:	6878      	ldr	r0, [r7, #4]
 800d7da:	f001 fa63 	bl	800eca4 <VL53L0X_WrByte>
 800d7de:	4603      	mov	r3, r0
 800d7e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800d7e4:	2203      	movs	r2, #3
 800d7e6:	2132      	movs	r1, #50	@ 0x32
 800d7e8:	6878      	ldr	r0, [r7, #4]
 800d7ea:	f001 fa5b 	bl	800eca4 <VL53L0X_WrByte>
 800d7ee:	4603      	mov	r3, r0
 800d7f0:	461a      	mov	r2, r3
 800d7f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d7f6:	4313      	orrs	r3, r2
 800d7f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800d7fc:	2209      	movs	r2, #9
 800d7fe:	2130      	movs	r1, #48	@ 0x30
 800d800:	6878      	ldr	r0, [r7, #4]
 800d802:	f001 fa4f 	bl	800eca4 <VL53L0X_WrByte>
 800d806:	4603      	mov	r3, r0
 800d808:	461a      	mov	r2, r3
 800d80a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d80e:	4313      	orrs	r3, r2
 800d810:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800d814:	2201      	movs	r2, #1
 800d816:	21ff      	movs	r1, #255	@ 0xff
 800d818:	6878      	ldr	r0, [r7, #4]
 800d81a:	f001 fa43 	bl	800eca4 <VL53L0X_WrByte>
 800d81e:	4603      	mov	r3, r0
 800d820:	461a      	mov	r2, r3
 800d822:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d826:	4313      	orrs	r3, r2
 800d828:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Status |= VL53L0X_WrByte(Dev,
 800d82c:	2220      	movs	r2, #32
 800d82e:	2130      	movs	r1, #48	@ 0x30
 800d830:	6878      	ldr	r0, [r7, #4]
 800d832:	f001 fa37 	bl	800eca4 <VL53L0X_WrByte>
 800d836:	4603      	mov	r3, r0
 800d838:	461a      	mov	r2, r3
 800d83a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d83e:	4313      	orrs	r3, r2
 800d840:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800d844:	2200      	movs	r2, #0
 800d846:	21ff      	movs	r1, #255	@ 0xff
 800d848:	6878      	ldr	r0, [r7, #4]
 800d84a:	f001 fa2b 	bl	800eca4 <VL53L0X_WrByte>
 800d84e:	4603      	mov	r3, r0
 800d850:	461a      	mov	r2, r3
 800d852:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d856:	4313      	orrs	r3, r2
 800d858:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d85c:	e09e      	b.n	800d99c <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 800d85e:	78bb      	ldrb	r3, [r7, #2]
 800d860:	2b0c      	cmp	r3, #12
 800d862:	d14c      	bne.n	800d8fe <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 800d864:	2238      	movs	r2, #56	@ 0x38
 800d866:	2148      	movs	r1, #72	@ 0x48
 800d868:	6878      	ldr	r0, [r7, #4]
 800d86a:	f001 fa1b 	bl	800eca4 <VL53L0X_WrByte>
 800d86e:	4603      	mov	r3, r0
 800d870:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 800d874:	2208      	movs	r2, #8
 800d876:	2147      	movs	r1, #71	@ 0x47
 800d878:	6878      	ldr	r0, [r7, #4]
 800d87a:	f001 fa13 	bl	800eca4 <VL53L0X_WrByte>
 800d87e:	4603      	mov	r3, r0
 800d880:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800d884:	2203      	movs	r2, #3
 800d886:	2132      	movs	r1, #50	@ 0x32
 800d888:	6878      	ldr	r0, [r7, #4]
 800d88a:	f001 fa0b 	bl	800eca4 <VL53L0X_WrByte>
 800d88e:	4603      	mov	r3, r0
 800d890:	461a      	mov	r2, r3
 800d892:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d896:	4313      	orrs	r3, r2
 800d898:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800d89c:	2208      	movs	r2, #8
 800d89e:	2130      	movs	r1, #48	@ 0x30
 800d8a0:	6878      	ldr	r0, [r7, #4]
 800d8a2:	f001 f9ff 	bl	800eca4 <VL53L0X_WrByte>
 800d8a6:	4603      	mov	r3, r0
 800d8a8:	461a      	mov	r2, r3
 800d8aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d8ae:	4313      	orrs	r3, r2
 800d8b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800d8b4:	2201      	movs	r2, #1
 800d8b6:	21ff      	movs	r1, #255	@ 0xff
 800d8b8:	6878      	ldr	r0, [r7, #4]
 800d8ba:	f001 f9f3 	bl	800eca4 <VL53L0X_WrByte>
 800d8be:	4603      	mov	r3, r0
 800d8c0:	461a      	mov	r2, r3
 800d8c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d8c6:	4313      	orrs	r3, r2
 800d8c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Status |= VL53L0X_WrByte(Dev,
 800d8cc:	2220      	movs	r2, #32
 800d8ce:	2130      	movs	r1, #48	@ 0x30
 800d8d0:	6878      	ldr	r0, [r7, #4]
 800d8d2:	f001 f9e7 	bl	800eca4 <VL53L0X_WrByte>
 800d8d6:	4603      	mov	r3, r0
 800d8d8:	461a      	mov	r2, r3
 800d8da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d8de:	4313      	orrs	r3, r2
 800d8e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800d8e4:	2200      	movs	r2, #0
 800d8e6:	21ff      	movs	r1, #255	@ 0xff
 800d8e8:	6878      	ldr	r0, [r7, #4]
 800d8ea:	f001 f9db 	bl	800eca4 <VL53L0X_WrByte>
 800d8ee:	4603      	mov	r3, r0
 800d8f0:	461a      	mov	r2, r3
 800d8f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d8f6:	4313      	orrs	r3, r2
 800d8f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d8fc:	e04e      	b.n	800d99c <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 800d8fe:	78bb      	ldrb	r3, [r7, #2]
 800d900:	2b0e      	cmp	r3, #14
 800d902:	d14b      	bne.n	800d99c <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800d904:	2248      	movs	r2, #72	@ 0x48
 800d906:	2148      	movs	r1, #72	@ 0x48
 800d908:	6878      	ldr	r0, [r7, #4]
 800d90a:	f001 f9cb 	bl	800eca4 <VL53L0X_WrByte>
 800d90e:	4603      	mov	r3, r0
 800d910:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 800d914:	2208      	movs	r2, #8
 800d916:	2147      	movs	r1, #71	@ 0x47
 800d918:	6878      	ldr	r0, [r7, #4]
 800d91a:	f001 f9c3 	bl	800eca4 <VL53L0X_WrByte>
 800d91e:	4603      	mov	r3, r0
 800d920:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800d924:	2203      	movs	r2, #3
 800d926:	2132      	movs	r1, #50	@ 0x32
 800d928:	6878      	ldr	r0, [r7, #4]
 800d92a:	f001 f9bb 	bl	800eca4 <VL53L0X_WrByte>
 800d92e:	4603      	mov	r3, r0
 800d930:	461a      	mov	r2, r3
 800d932:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d936:	4313      	orrs	r3, r2
 800d938:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800d93c:	2207      	movs	r2, #7
 800d93e:	2130      	movs	r1, #48	@ 0x30
 800d940:	6878      	ldr	r0, [r7, #4]
 800d942:	f001 f9af 	bl	800eca4 <VL53L0X_WrByte>
 800d946:	4603      	mov	r3, r0
 800d948:	461a      	mov	r2, r3
 800d94a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d94e:	4313      	orrs	r3, r2
 800d950:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800d954:	2201      	movs	r2, #1
 800d956:	21ff      	movs	r1, #255	@ 0xff
 800d958:	6878      	ldr	r0, [r7, #4]
 800d95a:	f001 f9a3 	bl	800eca4 <VL53L0X_WrByte>
 800d95e:	4603      	mov	r3, r0
 800d960:	461a      	mov	r2, r3
 800d962:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d966:	4313      	orrs	r3, r2
 800d968:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Status |= VL53L0X_WrByte(Dev,
 800d96c:	2220      	movs	r2, #32
 800d96e:	2130      	movs	r1, #48	@ 0x30
 800d970:	6878      	ldr	r0, [r7, #4]
 800d972:	f001 f997 	bl	800eca4 <VL53L0X_WrByte>
 800d976:	4603      	mov	r3, r0
 800d978:	461a      	mov	r2, r3
 800d97a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d97e:	4313      	orrs	r3, r2
 800d980:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800d984:	2200      	movs	r2, #0
 800d986:	21ff      	movs	r1, #255	@ 0xff
 800d988:	6878      	ldr	r0, [r7, #4]
 800d98a:	f001 f98b 	bl	800eca4 <VL53L0X_WrByte>
 800d98e:	4603      	mov	r3, r0
 800d990:	461a      	mov	r2, r3
 800d992:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d996:	4313      	orrs	r3, r2
 800d998:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 800d99c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d17e      	bne.n	800daa2 <VL53L0X_set_vcsel_pulse_period+0x4ca>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 800d9a4:	78bb      	ldrb	r3, [r7, #2]
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	f7fe fe3a 	bl	800c620 <VL53L0X_encode_vcsel_period>
 800d9ac:	4603      	mov	r3, r0
 800d9ae:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 800d9b2:	78fb      	ldrb	r3, [r7, #3]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d002      	beq.n	800d9be <VL53L0X_set_vcsel_pulse_period+0x3e6>
 800d9b8:	2b01      	cmp	r3, #1
 800d9ba:	d045      	beq.n	800da48 <VL53L0X_set_vcsel_pulse_period+0x470>
 800d9bc:	e06e      	b.n	800da9c <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800d9be:	f107 0314 	add.w	r3, r7, #20
 800d9c2:	461a      	mov	r2, r3
 800d9c4:	2103      	movs	r1, #3
 800d9c6:	6878      	ldr	r0, [r7, #4]
 800d9c8:	f7ff fc34 	bl	800d234 <get_sequence_step_timeout>
 800d9cc:	4603      	mov	r3, r0
 800d9ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800d9d2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d109      	bne.n	800d9ee <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 800d9da:	f107 0310 	add.w	r3, r7, #16
 800d9de:	461a      	mov	r2, r3
 800d9e0:	2102      	movs	r1, #2
 800d9e2:	6878      	ldr	r0, [r7, #4]
 800d9e4:	f7ff fc26 	bl	800d234 <get_sequence_step_timeout>
 800d9e8:	4603      	mov	r3, r0
 800d9ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800d9ee:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d109      	bne.n	800da0a <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 800d9f6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800d9fa:	461a      	mov	r2, r3
 800d9fc:	2150      	movs	r1, #80	@ 0x50
 800d9fe:	6878      	ldr	r0, [r7, #4]
 800da00:	f001 f950 	bl	800eca4 <VL53L0X_WrByte>
 800da04:	4603      	mov	r3, r0
 800da06:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800da0a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d108      	bne.n	800da24 <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 800da12:	697b      	ldr	r3, [r7, #20]
 800da14:	461a      	mov	r2, r3
 800da16:	2103      	movs	r1, #3
 800da18:	6878      	ldr	r0, [r7, #4]
 800da1a:	f7ff fceb 	bl	800d3f4 <set_sequence_step_timeout>
 800da1e:	4603      	mov	r3, r0
 800da20:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 800da24:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d108      	bne.n	800da3e <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 800da2c:	693b      	ldr	r3, [r7, #16]
 800da2e:	461a      	mov	r2, r3
 800da30:	2102      	movs	r1, #2
 800da32:	6878      	ldr	r0, [r7, #4]
 800da34:	f7ff fcde 	bl	800d3f4 <set_sequence_step_timeout>
 800da38:	4603      	mov	r3, r0
 800da3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	78ba      	ldrb	r2, [r7, #2]
 800da42:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800da46:	e02c      	b.n	800daa2 <VL53L0X_set_vcsel_pulse_period+0x4ca>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800da48:	f107 0318 	add.w	r3, r7, #24
 800da4c:	461a      	mov	r2, r3
 800da4e:	2104      	movs	r1, #4
 800da50:	6878      	ldr	r0, [r7, #4]
 800da52:	f7ff fbef 	bl	800d234 <get_sequence_step_timeout>
 800da56:	4603      	mov	r3, r0
 800da58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800da5c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800da60:	2b00      	cmp	r3, #0
 800da62:	d109      	bne.n	800da78 <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 800da64:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800da68:	461a      	mov	r2, r3
 800da6a:	2170      	movs	r1, #112	@ 0x70
 800da6c:	6878      	ldr	r0, [r7, #4]
 800da6e:	f001 f919 	bl	800eca4 <VL53L0X_WrByte>
 800da72:	4603      	mov	r3, r0
 800da74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800da78:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d108      	bne.n	800da92 <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 800da80:	69bb      	ldr	r3, [r7, #24]
 800da82:	461a      	mov	r2, r3
 800da84:	2104      	movs	r1, #4
 800da86:	6878      	ldr	r0, [r7, #4]
 800da88:	f7ff fcb4 	bl	800d3f4 <set_sequence_step_timeout>
 800da8c:	4603      	mov	r3, r0
 800da8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	78ba      	ldrb	r2, [r7, #2]
 800da96:	f883 20e0 	strb.w	r2, [r3, #224]	@ 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800da9a:	e002      	b.n	800daa2 <VL53L0X_set_vcsel_pulse_period+0x4ca>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800da9c:	23fc      	movs	r3, #252	@ 0xfc
 800da9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		}
	}

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 800daa2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d109      	bne.n	800dabe <VL53L0X_set_vcsel_pulse_period+0x4e6>
		VL53L0X_GETPARAMETERFIELD(Dev,
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	695b      	ldr	r3, [r3, #20]
 800daae:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800dab0:	69f9      	ldr	r1, [r7, #28]
 800dab2:	6878      	ldr	r0, [r7, #4]
 800dab4:	f7fc fdac 	bl	800a610 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800dab8:	4603      	mov	r3, r0
 800daba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 800dabe:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d109      	bne.n	800dada <VL53L0X_set_vcsel_pulse_period+0x502>
		Status = VL53L0X_perform_phase_calibration(
 800dac6:	f107 010f 	add.w	r1, r7, #15
 800daca:	2301      	movs	r3, #1
 800dacc:	2200      	movs	r2, #0
 800dace:	6878      	ldr	r0, [r7, #4]
 800dad0:	f7fe fc9e 	bl	800c410 <VL53L0X_perform_phase_calibration>
 800dad4:	4603      	mov	r3, r0
 800dad6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 800dada:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800dade:	4618      	mov	r0, r3
 800dae0:	3728      	adds	r7, #40	@ 0x28
 800dae2:	46bd      	mov	sp, r7
 800dae4:	bd80      	pop	{r7, pc}

0800dae6 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800dae6:	b580      	push	{r7, lr}
 800dae8:	b086      	sub	sp, #24
 800daea:	af00      	add	r7, sp, #0
 800daec:	60f8      	str	r0, [r7, #12]
 800daee:	460b      	mov	r3, r1
 800daf0:	607a      	str	r2, [r7, #4]
 800daf2:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800daf4:	2300      	movs	r3, #0
 800daf6:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800daf8:	7afb      	ldrb	r3, [r7, #11]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d002      	beq.n	800db04 <VL53L0X_get_vcsel_pulse_period+0x1e>
 800dafe:	2b01      	cmp	r3, #1
 800db00:	d00a      	beq.n	800db18 <VL53L0X_get_vcsel_pulse_period+0x32>
 800db02:	e013      	b.n	800db2c <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800db04:	f107 0316 	add.w	r3, r7, #22
 800db08:	461a      	mov	r2, r3
 800db0a:	2150      	movs	r1, #80	@ 0x50
 800db0c:	68f8      	ldr	r0, [r7, #12]
 800db0e:	f001 f94b 	bl	800eda8 <VL53L0X_RdByte>
 800db12:	4603      	mov	r3, r0
 800db14:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800db16:	e00b      	b.n	800db30 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800db18:	f107 0316 	add.w	r3, r7, #22
 800db1c:	461a      	mov	r2, r3
 800db1e:	2170      	movs	r1, #112	@ 0x70
 800db20:	68f8      	ldr	r0, [r7, #12]
 800db22:	f001 f941 	bl	800eda8 <VL53L0X_RdByte>
 800db26:	4603      	mov	r3, r0
 800db28:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800db2a:	e001      	b.n	800db30 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800db2c:	23fc      	movs	r3, #252	@ 0xfc
 800db2e:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800db30:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d107      	bne.n	800db48 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800db38:	7dbb      	ldrb	r3, [r7, #22]
 800db3a:	4618      	mov	r0, r3
 800db3c:	f7fe fd5d 	bl	800c5fa <VL53L0X_decode_vcsel_period>
 800db40:	4603      	mov	r3, r0
 800db42:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	701a      	strb	r2, [r3, #0]

	return Status;
 800db48:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800db4c:	4618      	mov	r0, r3
 800db4e:	3718      	adds	r7, #24
 800db50:	46bd      	mov	sp, r7
 800db52:	bd80      	pop	{r7, pc}

0800db54 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800db54:	b580      	push	{r7, lr}
 800db56:	b092      	sub	sp, #72	@ 0x48
 800db58:	af00      	add	r7, sp, #0
 800db5a:	6078      	str	r0, [r7, #4]
 800db5c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800db5e:	2300      	movs	r3, #0
 800db60:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800db64:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800db68:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800db6a:	f240 7376 	movw	r3, #1910	@ 0x776
 800db6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800db70:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800db74:	63bb      	str	r3, [r7, #56]	@ 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800db76:	f44f 7325 	mov.w	r3, #660	@ 0x294
 800db7a:	637b      	str	r3, [r7, #52]	@ 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 800db7c:	f240 234e 	movw	r3, #590	@ 0x24e
 800db80:	633b      	str	r3, [r7, #48]	@ 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 800db82:	f240 23b2 	movw	r3, #690	@ 0x2b2
 800db86:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800db88:	f44f 7325 	mov.w	r3, #660	@ 0x294
 800db8c:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800db8e:	f240 2326 	movw	r3, #550	@ 0x226
 800db92:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800db94:	2300      	movs	r3, #0
 800db96:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 800db98:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800db9c:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 800db9e:	2300      	movs	r3, #0
 800dba0:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 800dba2:	683a      	ldr	r2, [r7, #0]
 800dba4:	6a3b      	ldr	r3, [r7, #32]
 800dba6:	429a      	cmp	r2, r3
 800dba8:	d205      	bcs.n	800dbb6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800dbaa:	23fc      	movs	r3, #252	@ 0xfc
 800dbac:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		return Status;
 800dbb0:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800dbb4:	e0aa      	b.n	800dd0c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800dbb6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800dbb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbba:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 800dbbc:	683a      	ldr	r2, [r7, #0]
 800dbbe:	1ad3      	subs	r3, r2, r3
 800dbc0:	643b      	str	r3, [r7, #64]	@ 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800dbc2:	f107 0314 	add.w	r3, r7, #20
 800dbc6:	4619      	mov	r1, r3
 800dbc8:	6878      	ldr	r0, [r7, #4]
 800dbca:	f7fc fe69 	bl	800a8a0 <VL53L0X_GetSequenceStepEnables>
 800dbce:	4603      	mov	r3, r0
 800dbd0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 800dbd4:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d15b      	bne.n	800dc94 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 800dbdc:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d105      	bne.n	800dbee <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 800dbe2:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d102      	bne.n	800dbee <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 800dbe8:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d052      	beq.n	800dc94 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800dbee:	f107 0310 	add.w	r3, r7, #16
 800dbf2:	461a      	mov	r2, r3
 800dbf4:	2102      	movs	r1, #2
 800dbf6:	6878      	ldr	r0, [r7, #4]
 800dbf8:	f7ff fb1c 	bl	800d234 <get_sequence_step_timeout>
 800dbfc:	4603      	mov	r3, r0
 800dbfe:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800dc02:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d002      	beq.n	800dc10 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 800dc0a:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800dc0e:	e07d      	b.n	800dd0c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800dc10:	7d3b      	ldrb	r3, [r7, #20]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d00f      	beq.n	800dc36 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800dc16:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800dc18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dc1a:	4413      	add	r3, r2
 800dc1c:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800dc1e:	69fa      	ldr	r2, [r7, #28]
 800dc20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dc22:	429a      	cmp	r2, r3
 800dc24:	d204      	bcs.n	800dc30 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800dc26:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dc28:	69fb      	ldr	r3, [r7, #28]
 800dc2a:	1ad3      	subs	r3, r2, r3
 800dc2c:	643b      	str	r3, [r7, #64]	@ 0x40
 800dc2e:	e002      	b.n	800dc36 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800dc30:	23fc      	movs	r3, #252	@ 0xfc
 800dc32:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800dc36:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d002      	beq.n	800dc44 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800dc3e:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800dc42:	e063      	b.n	800dd0c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800dc44:	7dbb      	ldrb	r3, [r7, #22]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d011      	beq.n	800dc6e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800dc4a:	693a      	ldr	r2, [r7, #16]
 800dc4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc4e:	4413      	add	r3, r2
 800dc50:	005b      	lsls	r3, r3, #1
 800dc52:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800dc54:	69fa      	ldr	r2, [r7, #28]
 800dc56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dc58:	429a      	cmp	r2, r3
 800dc5a:	d204      	bcs.n	800dc66 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800dc5c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dc5e:	69fb      	ldr	r3, [r7, #28]
 800dc60:	1ad3      	subs	r3, r2, r3
 800dc62:	643b      	str	r3, [r7, #64]	@ 0x40
 800dc64:	e016      	b.n	800dc94 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800dc66:	23fc      	movs	r3, #252	@ 0xfc
 800dc68:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800dc6c:	e012      	b.n	800dc94 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800dc6e:	7d7b      	ldrb	r3, [r7, #21]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d00f      	beq.n	800dc94 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800dc74:	693b      	ldr	r3, [r7, #16]
 800dc76:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dc78:	4413      	add	r3, r2
 800dc7a:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800dc7c:	69fa      	ldr	r2, [r7, #28]
 800dc7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dc80:	429a      	cmp	r2, r3
 800dc82:	d204      	bcs.n	800dc8e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800dc84:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dc86:	69fb      	ldr	r3, [r7, #28]
 800dc88:	1ad3      	subs	r3, r2, r3
 800dc8a:	643b      	str	r3, [r7, #64]	@ 0x40
 800dc8c:	e002      	b.n	800dc94 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800dc8e:	23fc      	movs	r3, #252	@ 0xfc
 800dc90:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800dc94:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d002      	beq.n	800dca2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 800dc9c:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800dca0:	e034      	b.n	800dd0c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800dca2:	7dfb      	ldrb	r3, [r7, #23]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d019      	beq.n	800dcdc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800dca8:	f107 030c 	add.w	r3, r7, #12
 800dcac:	461a      	mov	r2, r3
 800dcae:	2103      	movs	r1, #3
 800dcb0:	6878      	ldr	r0, [r7, #4]
 800dcb2:	f7ff fabf 	bl	800d234 <get_sequence_step_timeout>
 800dcb6:	4603      	mov	r3, r0
 800dcb8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dcc0:	4413      	add	r3, r2
 800dcc2:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800dcc4:	69fa      	ldr	r2, [r7, #28]
 800dcc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dcc8:	429a      	cmp	r2, r3
 800dcca:	d204      	bcs.n	800dcd6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800dccc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dcce:	69fb      	ldr	r3, [r7, #28]
 800dcd0:	1ad3      	subs	r3, r2, r3
 800dcd2:	643b      	str	r3, [r7, #64]	@ 0x40
 800dcd4:	e002      	b.n	800dcdc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800dcd6:	23fc      	movs	r3, #252	@ 0xfc
 800dcd8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800dcdc:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d111      	bne.n	800dd08 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800dce4:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d00e      	beq.n	800dd08 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 800dcea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dcec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcee:	1ad3      	subs	r3, r2, r3
 800dcf0:	643b      	str	r3, [r7, #64]	@ 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800dcf2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dcf4:	2104      	movs	r1, #4
 800dcf6:	6878      	ldr	r0, [r7, #4]
 800dcf8:	f7ff fb7c 	bl	800d3f4 <set_sequence_step_timeout>
 800dcfc:	4603      	mov	r3, r0
 800dcfe:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	683a      	ldr	r2, [r7, #0]
 800dd06:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800dd08:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
}
 800dd0c:	4618      	mov	r0, r3
 800dd0e:	3748      	adds	r7, #72	@ 0x48
 800dd10:	46bd      	mov	sp, r7
 800dd12:	bd80      	pop	{r7, pc}

0800dd14 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800dd14:	b580      	push	{r7, lr}
 800dd16:	b090      	sub	sp, #64	@ 0x40
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	6078      	str	r0, [r7, #4]
 800dd1c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800dd1e:	2300      	movs	r3, #0
 800dd20:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800dd24:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800dd28:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800dd2a:	f240 7376 	movw	r3, #1910	@ 0x776
 800dd2e:	63bb      	str	r3, [r7, #56]	@ 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800dd30:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800dd34:	637b      	str	r3, [r7, #52]	@ 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800dd36:	f44f 7325 	mov.w	r3, #660	@ 0x294
 800dd3a:	633b      	str	r3, [r7, #48]	@ 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800dd3c:	f240 234e 	movw	r3, #590	@ 0x24e
 800dd40:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800dd42:	f240 23b2 	movw	r3, #690	@ 0x2b2
 800dd46:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800dd48:	f44f 7325 	mov.w	r3, #660	@ 0x294
 800dd4c:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800dd4e:	f240 2326 	movw	r3, #550	@ 0x226
 800dd52:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800dd54:	2300      	movs	r3, #0
 800dd56:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800dd58:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dd5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd5c:	441a      	add	r2, r3
 800dd5e:	683b      	ldr	r3, [r7, #0]
 800dd60:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800dd62:	f107 0318 	add.w	r3, r7, #24
 800dd66:	4619      	mov	r1, r3
 800dd68:	6878      	ldr	r0, [r7, #4]
 800dd6a:	f7fc fd99 	bl	800a8a0 <VL53L0X_GetSequenceStepEnables>
 800dd6e:	4603      	mov	r3, r0
 800dd70:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800dd74:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d002      	beq.n	800dd82 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800dd7c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800dd80:	e075      	b.n	800de6e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800dd82:	7e3b      	ldrb	r3, [r7, #24]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d105      	bne.n	800dd94 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800dd88:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d102      	bne.n	800dd94 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800dd8e:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d030      	beq.n	800ddf6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800dd94:	f107 0310 	add.w	r3, r7, #16
 800dd98:	461a      	mov	r2, r3
 800dd9a:	2102      	movs	r1, #2
 800dd9c:	6878      	ldr	r0, [r7, #4]
 800dd9e:	f7ff fa49 	bl	800d234 <get_sequence_step_timeout>
 800dda2:	4603      	mov	r3, r0
 800dda4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800dda8:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d122      	bne.n	800ddf6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800ddb0:	7e3b      	ldrb	r3, [r7, #24]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d007      	beq.n	800ddc6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800ddb6:	683b      	ldr	r3, [r7, #0]
 800ddb8:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800ddba:	6939      	ldr	r1, [r7, #16]
 800ddbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddbe:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800ddc0:	441a      	add	r2, r3
 800ddc2:	683b      	ldr	r3, [r7, #0]
 800ddc4:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800ddc6:	7ebb      	ldrb	r3, [r7, #26]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d009      	beq.n	800dde0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800ddcc:	683b      	ldr	r3, [r7, #0]
 800ddce:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800ddd0:	6939      	ldr	r1, [r7, #16]
 800ddd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddd4:	440b      	add	r3, r1
 800ddd6:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800ddd8:	441a      	add	r2, r3
 800ddda:	683b      	ldr	r3, [r7, #0]
 800dddc:	601a      	str	r2, [r3, #0]
 800ddde:	e00a      	b.n	800ddf6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800dde0:	7e7b      	ldrb	r3, [r7, #25]
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d007      	beq.n	800ddf6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800dde6:	683b      	ldr	r3, [r7, #0]
 800dde8:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800ddea:	6939      	ldr	r1, [r7, #16]
 800ddec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddee:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800ddf0:	441a      	add	r2, r3
 800ddf2:	683b      	ldr	r3, [r7, #0]
 800ddf4:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ddf6:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d114      	bne.n	800de28 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800ddfe:	7efb      	ldrb	r3, [r7, #27]
 800de00:	2b00      	cmp	r3, #0
 800de02:	d011      	beq.n	800de28 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800de04:	f107 030c 	add.w	r3, r7, #12
 800de08:	461a      	mov	r2, r3
 800de0a:	2103      	movs	r1, #3
 800de0c:	6878      	ldr	r0, [r7, #4]
 800de0e:	f7ff fa11 	bl	800d234 <get_sequence_step_timeout>
 800de12:	4603      	mov	r3, r0
 800de14:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800de18:	683b      	ldr	r3, [r7, #0]
 800de1a:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800de1c:	68f9      	ldr	r1, [r7, #12]
 800de1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de20:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800de22:	441a      	add	r2, r3
 800de24:	683b      	ldr	r3, [r7, #0]
 800de26:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800de28:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d114      	bne.n	800de5a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800de30:	7f3b      	ldrb	r3, [r7, #28]
 800de32:	2b00      	cmp	r3, #0
 800de34:	d011      	beq.n	800de5a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800de36:	f107 0314 	add.w	r3, r7, #20
 800de3a:	461a      	mov	r2, r3
 800de3c:	2104      	movs	r1, #4
 800de3e:	6878      	ldr	r0, [r7, #4]
 800de40:	f7ff f9f8 	bl	800d234 <get_sequence_step_timeout>
 800de44:	4603      	mov	r3, r0
 800de46:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800de4a:	683b      	ldr	r3, [r7, #0]
 800de4c:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800de4e:	6979      	ldr	r1, [r7, #20]
 800de50:	6a3b      	ldr	r3, [r7, #32]
 800de52:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800de54:	441a      	add	r2, r3
 800de56:	683b      	ldr	r3, [r7, #0]
 800de58:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800de5a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d103      	bne.n	800de6a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800de62:	683b      	ldr	r3, [r7, #0]
 800de64:	681a      	ldr	r2, [r3, #0]
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800de6a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800de6e:	4618      	mov	r0, r3
 800de70:	3740      	adds	r7, #64	@ 0x40
 800de72:	46bd      	mov	sp, r7
 800de74:	bd80      	pop	{r7, pc}
	...

0800de78 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800de78:	b580      	push	{r7, lr}
 800de7a:	b088      	sub	sp, #32
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	6078      	str	r0, [r7, #4]
 800de80:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800de82:	2300      	movs	r3, #0
 800de84:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800de86:	2300      	movs	r3, #0
 800de88:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800de8a:	e0c6      	b.n	800e01a <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800de8c:	697b      	ldr	r3, [r7, #20]
 800de8e:	683a      	ldr	r2, [r7, #0]
 800de90:	4413      	add	r3, r2
 800de92:	781b      	ldrb	r3, [r3, #0]
 800de94:	74fb      	strb	r3, [r7, #19]
		Index++;
 800de96:	697b      	ldr	r3, [r7, #20]
 800de98:	3301      	adds	r3, #1
 800de9a:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 800de9c:	7cfb      	ldrb	r3, [r7, #19]
 800de9e:	2bff      	cmp	r3, #255	@ 0xff
 800dea0:	f040 808d 	bne.w	800dfbe <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800dea4:	697b      	ldr	r3, [r7, #20]
 800dea6:	683a      	ldr	r2, [r7, #0]
 800dea8:	4413      	add	r3, r2
 800deaa:	781b      	ldrb	r3, [r3, #0]
 800deac:	747b      	strb	r3, [r7, #17]
			Index++;
 800deae:	697b      	ldr	r3, [r7, #20]
 800deb0:	3301      	adds	r3, #1
 800deb2:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800deb4:	7c7b      	ldrb	r3, [r7, #17]
 800deb6:	2b03      	cmp	r3, #3
 800deb8:	d87e      	bhi.n	800dfb8 <VL53L0X_load_tuning_settings+0x140>
 800deba:	a201      	add	r2, pc, #4	@ (adr r2, 800dec0 <VL53L0X_load_tuning_settings+0x48>)
 800debc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dec0:	0800ded1 	.word	0x0800ded1
 800dec4:	0800df0b 	.word	0x0800df0b
 800dec8:	0800df45 	.word	0x0800df45
 800decc:	0800df7f 	.word	0x0800df7f
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800ded0:	697b      	ldr	r3, [r7, #20]
 800ded2:	683a      	ldr	r2, [r7, #0]
 800ded4:	4413      	add	r3, r2
 800ded6:	781b      	ldrb	r3, [r3, #0]
 800ded8:	743b      	strb	r3, [r7, #16]
				Index++;
 800deda:	697b      	ldr	r3, [r7, #20]
 800dedc:	3301      	adds	r3, #1
 800dede:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800dee0:	697b      	ldr	r3, [r7, #20]
 800dee2:	683a      	ldr	r2, [r7, #0]
 800dee4:	4413      	add	r3, r2
 800dee6:	781b      	ldrb	r3, [r3, #0]
 800dee8:	73fb      	strb	r3, [r7, #15]
				Index++;
 800deea:	697b      	ldr	r3, [r7, #20]
 800deec:	3301      	adds	r3, #1
 800deee:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800def0:	7c3b      	ldrb	r3, [r7, #16]
 800def2:	b29b      	uxth	r3, r3
 800def4:	021b      	lsls	r3, r3, #8
 800def6:	b29a      	uxth	r2, r3
 800def8:	7bfb      	ldrb	r3, [r7, #15]
 800defa:	b29b      	uxth	r3, r3
 800defc:	4413      	add	r3, r2
 800defe:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	89ba      	ldrh	r2, [r7, #12]
 800df04:	f8a3 2134 	strh.w	r2, [r3, #308]	@ 0x134
				break;
 800df08:	e087      	b.n	800e01a <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800df0a:	697b      	ldr	r3, [r7, #20]
 800df0c:	683a      	ldr	r2, [r7, #0]
 800df0e:	4413      	add	r3, r2
 800df10:	781b      	ldrb	r3, [r3, #0]
 800df12:	743b      	strb	r3, [r7, #16]
				Index++;
 800df14:	697b      	ldr	r3, [r7, #20]
 800df16:	3301      	adds	r3, #1
 800df18:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800df1a:	697b      	ldr	r3, [r7, #20]
 800df1c:	683a      	ldr	r2, [r7, #0]
 800df1e:	4413      	add	r3, r2
 800df20:	781b      	ldrb	r3, [r3, #0]
 800df22:	73fb      	strb	r3, [r7, #15]
				Index++;
 800df24:	697b      	ldr	r3, [r7, #20]
 800df26:	3301      	adds	r3, #1
 800df28:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800df2a:	7c3b      	ldrb	r3, [r7, #16]
 800df2c:	b29b      	uxth	r3, r3
 800df2e:	021b      	lsls	r3, r3, #8
 800df30:	b29a      	uxth	r2, r3
 800df32:	7bfb      	ldrb	r3, [r7, #15]
 800df34:	b29b      	uxth	r3, r3
 800df36:	4413      	add	r3, r2
 800df38:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	89ba      	ldrh	r2, [r7, #12]
 800df3e:	f8a3 2136 	strh.w	r2, [r3, #310]	@ 0x136
					Temp16);
				break;
 800df42:	e06a      	b.n	800e01a <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800df44:	697b      	ldr	r3, [r7, #20]
 800df46:	683a      	ldr	r2, [r7, #0]
 800df48:	4413      	add	r3, r2
 800df4a:	781b      	ldrb	r3, [r3, #0]
 800df4c:	743b      	strb	r3, [r7, #16]
				Index++;
 800df4e:	697b      	ldr	r3, [r7, #20]
 800df50:	3301      	adds	r3, #1
 800df52:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800df54:	697b      	ldr	r3, [r7, #20]
 800df56:	683a      	ldr	r2, [r7, #0]
 800df58:	4413      	add	r3, r2
 800df5a:	781b      	ldrb	r3, [r3, #0]
 800df5c:	73fb      	strb	r3, [r7, #15]
				Index++;
 800df5e:	697b      	ldr	r3, [r7, #20]
 800df60:	3301      	adds	r3, #1
 800df62:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800df64:	7c3b      	ldrb	r3, [r7, #16]
 800df66:	b29b      	uxth	r3, r3
 800df68:	021b      	lsls	r3, r3, #8
 800df6a:	b29a      	uxth	r2, r3
 800df6c:	7bfb      	ldrb	r3, [r7, #15]
 800df6e:	b29b      	uxth	r3, r3
 800df70:	4413      	add	r3, r2
 800df72:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	89ba      	ldrh	r2, [r7, #12]
 800df78:	f8a3 2138 	strh.w	r2, [r3, #312]	@ 0x138
				break;
 800df7c:	e04d      	b.n	800e01a <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800df7e:	697b      	ldr	r3, [r7, #20]
 800df80:	683a      	ldr	r2, [r7, #0]
 800df82:	4413      	add	r3, r2
 800df84:	781b      	ldrb	r3, [r3, #0]
 800df86:	743b      	strb	r3, [r7, #16]
				Index++;
 800df88:	697b      	ldr	r3, [r7, #20]
 800df8a:	3301      	adds	r3, #1
 800df8c:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800df8e:	697b      	ldr	r3, [r7, #20]
 800df90:	683a      	ldr	r2, [r7, #0]
 800df92:	4413      	add	r3, r2
 800df94:	781b      	ldrb	r3, [r3, #0]
 800df96:	73fb      	strb	r3, [r7, #15]
				Index++;
 800df98:	697b      	ldr	r3, [r7, #20]
 800df9a:	3301      	adds	r3, #1
 800df9c:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800df9e:	7c3b      	ldrb	r3, [r7, #16]
 800dfa0:	b29b      	uxth	r3, r3
 800dfa2:	021b      	lsls	r3, r3, #8
 800dfa4:	b29a      	uxth	r2, r3
 800dfa6:	7bfb      	ldrb	r3, [r7, #15]
 800dfa8:	b29b      	uxth	r3, r3
 800dfaa:	4413      	add	r3, r2
 800dfac:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	89ba      	ldrh	r2, [r7, #12]
 800dfb2:	f8a3 213c 	strh.w	r2, [r3, #316]	@ 0x13c
				break;
 800dfb6:	e030      	b.n	800e01a <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800dfb8:	23fc      	movs	r3, #252	@ 0xfc
 800dfba:	77fb      	strb	r3, [r7, #31]
 800dfbc:	e02d      	b.n	800e01a <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800dfbe:	7cfb      	ldrb	r3, [r7, #19]
 800dfc0:	2b04      	cmp	r3, #4
 800dfc2:	d828      	bhi.n	800e016 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800dfc4:	697b      	ldr	r3, [r7, #20]
 800dfc6:	683a      	ldr	r2, [r7, #0]
 800dfc8:	4413      	add	r3, r2
 800dfca:	781b      	ldrb	r3, [r3, #0]
 800dfcc:	74bb      	strb	r3, [r7, #18]
			Index++;
 800dfce:	697b      	ldr	r3, [r7, #20]
 800dfd0:	3301      	adds	r3, #1
 800dfd2:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	61bb      	str	r3, [r7, #24]
 800dfd8:	e00f      	b.n	800dffa <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800dfda:	697b      	ldr	r3, [r7, #20]
 800dfdc:	683a      	ldr	r2, [r7, #0]
 800dfde:	4413      	add	r3, r2
 800dfe0:	7819      	ldrb	r1, [r3, #0]
 800dfe2:	f107 0208 	add.w	r2, r7, #8
 800dfe6:	69bb      	ldr	r3, [r7, #24]
 800dfe8:	4413      	add	r3, r2
 800dfea:	460a      	mov	r2, r1
 800dfec:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800dfee:	697b      	ldr	r3, [r7, #20]
 800dff0:	3301      	adds	r3, #1
 800dff2:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800dff4:	69bb      	ldr	r3, [r7, #24]
 800dff6:	3301      	adds	r3, #1
 800dff8:	61bb      	str	r3, [r7, #24]
 800dffa:	7cfb      	ldrb	r3, [r7, #19]
 800dffc:	69ba      	ldr	r2, [r7, #24]
 800dffe:	429a      	cmp	r2, r3
 800e000:	dbeb      	blt.n	800dfda <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800e002:	7cfb      	ldrb	r3, [r7, #19]
 800e004:	f107 0208 	add.w	r2, r7, #8
 800e008:	7cb9      	ldrb	r1, [r7, #18]
 800e00a:	6878      	ldr	r0, [r7, #4]
 800e00c:	f000 fdee 	bl	800ebec <VL53L0X_WriteMulti>
 800e010:	4603      	mov	r3, r0
 800e012:	77fb      	strb	r3, [r7, #31]
 800e014:	e001      	b.n	800e01a <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e016:	23fc      	movs	r3, #252	@ 0xfc
 800e018:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800e01a:	697b      	ldr	r3, [r7, #20]
 800e01c:	683a      	ldr	r2, [r7, #0]
 800e01e:	4413      	add	r3, r2
 800e020:	781b      	ldrb	r3, [r3, #0]
 800e022:	2b00      	cmp	r3, #0
 800e024:	d004      	beq.n	800e030 <VL53L0X_load_tuning_settings+0x1b8>
 800e026:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	f43f af2e 	beq.w	800de8c <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800e030:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e034:	4618      	mov	r0, r3
 800e036:	3720      	adds	r7, #32
 800e038:	46bd      	mov	sp, r7
 800e03a:	bd80      	pop	{r7, pc}

0800e03c <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800e03c:	b580      	push	{r7, lr}
 800e03e:	b088      	sub	sp, #32
 800e040:	af00      	add	r7, sp, #0
 800e042:	60f8      	str	r0, [r7, #12]
 800e044:	60b9      	str	r1, [r7, #8]
 800e046:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e048:	2300      	movs	r3, #0
 800e04a:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	2200      	movs	r2, #0
 800e050:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800e052:	f107 0313 	add.w	r3, r7, #19
 800e056:	4619      	mov	r1, r3
 800e058:	68f8      	ldr	r0, [r7, #12]
 800e05a:	f7fc fcad 	bl	800a9b8 <VL53L0X_GetXTalkCompensationEnable>
 800e05e:	4603      	mov	r3, r0
 800e060:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800e062:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e066:	2b00      	cmp	r3, #0
 800e068:	d111      	bne.n	800e08e <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800e06a:	7cfb      	ldrb	r3, [r7, #19]
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d00e      	beq.n	800e08e <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	6a1b      	ldr	r3, [r3, #32]
 800e074:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800e076:	68bb      	ldr	r3, [r7, #8]
 800e078:	8a9b      	ldrh	r3, [r3, #20]
 800e07a:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800e07c:	69bb      	ldr	r3, [r7, #24]
 800e07e:	fb02 f303 	mul.w	r3, r2, r3
 800e082:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800e084:	697b      	ldr	r3, [r7, #20]
 800e086:	3380      	adds	r3, #128	@ 0x80
 800e088:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800e08e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e092:	4618      	mov	r0, r3
 800e094:	3720      	adds	r7, #32
 800e096:	46bd      	mov	sp, r7
 800e098:	bd80      	pop	{r7, pc}

0800e09a <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800e09a:	b580      	push	{r7, lr}
 800e09c:	b086      	sub	sp, #24
 800e09e:	af00      	add	r7, sp, #0
 800e0a0:	60f8      	str	r0, [r7, #12]
 800e0a2:	60b9      	str	r1, [r7, #8]
 800e0a4:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e0a6:	2300      	movs	r3, #0
 800e0a8:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800e0aa:	68bb      	ldr	r3, [r7, #8]
 800e0ac:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800e0b2:	f107 0310 	add.w	r3, r7, #16
 800e0b6:	461a      	mov	r2, r3
 800e0b8:	68b9      	ldr	r1, [r7, #8]
 800e0ba:	68f8      	ldr	r0, [r7, #12]
 800e0bc:	f7ff ffbe 	bl	800e03c <VL53L0X_get_total_xtalk_rate>
 800e0c0:	4603      	mov	r3, r0
 800e0c2:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800e0c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d105      	bne.n	800e0d8 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	681a      	ldr	r2, [r3, #0]
 800e0d0:	693b      	ldr	r3, [r7, #16]
 800e0d2:	441a      	add	r2, r3
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	601a      	str	r2, [r3, #0]

	return Status;
 800e0d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e0dc:	4618      	mov	r0, r3
 800e0de:	3718      	adds	r7, #24
 800e0e0:	46bd      	mov	sp, r7
 800e0e2:	bd80      	pop	{r7, pc}

0800e0e4 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 800e0e4:	b580      	push	{r7, lr}
 800e0e6:	b09a      	sub	sp, #104	@ 0x68
 800e0e8:	af00      	add	r7, sp, #0
 800e0ea:	60f8      	str	r0, [r7, #12]
 800e0ec:	60b9      	str	r1, [r7, #8]
 800e0ee:	607a      	str	r2, [r7, #4]
 800e0f0:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800e0f2:	2312      	movs	r3, #18
 800e0f4:	657b      	str	r3, [r7, #84]	@ 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800e0f6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800e0fa:	653b      	str	r3, [r7, #80]	@ 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800e0fc:	2342      	movs	r3, #66	@ 0x42
 800e0fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800e100:	2306      	movs	r3, #6
 800e102:	64bb      	str	r3, [r7, #72]	@ 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 800e104:	2307      	movs	r3, #7
 800e106:	647b      	str	r3, [r7, #68]	@ 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e108:	2300      	movs	r3, #0
 800e10a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	f8b3 3154 	ldrh.w	r3, [r3, #340]	@ 0x154
	dmaxCalRange_mm =
 800e114:	63fb      	str	r3, [r7, #60]	@ 0x3c

	dmaxCalSignalRateRtn_mcps =
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 800e11c:	63bb      	str	r3, [r7, #56]	@ 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800e11e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e120:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e122:	fb02 f303 	mul.w	r3, r2, r3
 800e126:	637b      	str	r3, [r7, #52]	@ 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800e128:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e12a:	3380      	adds	r3, #128	@ 0x80
 800e12c:	0a1b      	lsrs	r3, r3, #8
 800e12e:	637b      	str	r3, [r7, #52]	@ 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800e130:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e132:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e134:	fb02 f303 	mul.w	r3, r2, r3
 800e138:	637b      	str	r3, [r7, #52]	@ 0x34

	minSignalNeeded_p1 = 0;
 800e13a:	2300      	movs	r3, #0
 800e13c:	667b      	str	r3, [r7, #100]	@ 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	2b00      	cmp	r3, #0
 800e142:	d01a      	beq.n	800e17a <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800e144:	68bb      	ldr	r3, [r7, #8]
 800e146:	029b      	lsls	r3, r3, #10
 800e148:	633b      	str	r3, [r7, #48]	@ 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800e14e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e150:	4413      	add	r3, r2
 800e152:	667b      	str	r3, [r7, #100]	@ 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800e154:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	fbb2 f3f3 	udiv	r3, r2, r3
 800e15c:	667b      	str	r3, [r7, #100]	@ 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800e15e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e160:	4613      	mov	r3, r2
 800e162:	005b      	lsls	r3, r3, #1
 800e164:	4413      	add	r3, r2
 800e166:	667b      	str	r3, [r7, #100]	@ 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800e168:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e16a:	fb03 f303 	mul.w	r3, r3, r3
 800e16e:	667b      	str	r3, [r7, #100]	@ 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800e170:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e172:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800e176:	0c1b      	lsrs	r3, r3, #16
 800e178:	667b      	str	r3, [r7, #100]	@ 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800e17a:	683b      	ldr	r3, [r7, #0]
 800e17c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800e17e:	fb02 f303 	mul.w	r3, r2, r3
 800e182:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800e184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e186:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800e18a:	0c1b      	lsrs	r3, r3, #16
 800e18c:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800e18e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e190:	fb03 f303 	mul.w	r3, r3, r3
 800e194:	62fb      	str	r3, [r7, #44]	@ 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800e196:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e198:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800e19c:	0c1b      	lsrs	r3, r3, #16
 800e19e:	62bb      	str	r3, [r7, #40]	@ 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800e1a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e1a2:	085a      	lsrs	r2, r3, #1
 800e1a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1a6:	441a      	add	r2, r3
 800e1a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e1aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800e1ae:	62bb      	str	r3, [r7, #40]	@ 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800e1b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e1b4:	fb02 f303 	mul.w	r3, r2, r3
 800e1b8:	62bb      	str	r3, [r7, #40]	@ 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800e1ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e1c0:	d302      	bcc.n	800e1c8 <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 800e1c2:	4b54      	ldr	r3, [pc, #336]	@ (800e314 <VL53L0X_calc_dmax+0x230>)
 800e1c4:	663b      	str	r3, [r7, #96]	@ 0x60
 800e1c6:	e015      	b.n	800e1f4 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800e1c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e1ca:	085a      	lsrs	r2, r3, #1
 800e1cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e1ce:	441a      	add	r2, r3
 800e1d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e1d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800e1d6:	677b      	str	r3, [r7, #116]	@ 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800e1d8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e1da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e1dc:	fb02 f303 	mul.w	r3, r2, r3
 800e1e0:	677b      	str	r3, [r7, #116]	@ 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800e1e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e1e4:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800e1e8:	0c1b      	lsrs	r3, r3, #16
 800e1ea:	663b      	str	r3, [r7, #96]	@ 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800e1ec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e1ee:	fb03 f303 	mul.w	r3, r3, r3
 800e1f2:	663b      	str	r3, [r7, #96]	@ 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800e1f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e1f6:	039b      	lsls	r3, r3, #14
 800e1f8:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800e1fc:	4a46      	ldr	r2, [pc, #280]	@ (800e318 <VL53L0X_calc_dmax+0x234>)
 800e1fe:	fba2 2303 	umull	r2, r3, r2, r3
 800e202:	099b      	lsrs	r3, r3, #6
 800e204:	627b      	str	r3, [r7, #36]	@ 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800e206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e208:	fb03 f303 	mul.w	r3, r3, r3
 800e20c:	627b      	str	r3, [r7, #36]	@ 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800e20e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e210:	fb03 f303 	mul.w	r3, r3, r3
 800e214:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800e216:	6a3b      	ldr	r3, [r7, #32]
 800e218:	3308      	adds	r3, #8
 800e21a:	091b      	lsrs	r3, r3, #4
 800e21c:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800e21e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e220:	6a3b      	ldr	r3, [r7, #32]
 800e222:	1ad3      	subs	r3, r2, r3
 800e224:	627b      	str	r3, [r7, #36]	@ 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800e226:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e228:	4613      	mov	r3, r2
 800e22a:	005b      	lsls	r3, r3, #1
 800e22c:	4413      	add	r3, r2
 800e22e:	011b      	lsls	r3, r3, #4
 800e230:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800e232:	69fb      	ldr	r3, [r7, #28]
 800e234:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e238:	0b9b      	lsrs	r3, r3, #14
 800e23a:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800e23c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e23e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e240:	4413      	add	r3, r2
 800e242:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800e244:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e246:	085b      	lsrs	r3, r3, #1
 800e248:	69ba      	ldr	r2, [r7, #24]
 800e24a:	4413      	add	r3, r2
 800e24c:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800e24e:	69ba      	ldr	r2, [r7, #24]
 800e250:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e252:	fbb2 f3f3 	udiv	r3, r2, r3
 800e256:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800e258:	69bb      	ldr	r3, [r7, #24]
 800e25a:	039b      	lsls	r3, r3, #14
 800e25c:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800e25e:	69fb      	ldr	r3, [r7, #28]
 800e260:	085b      	lsrs	r3, r3, #1
 800e262:	69ba      	ldr	r2, [r7, #24]
 800e264:	4413      	add	r3, r2
 800e266:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800e268:	69ba      	ldr	r2, [r7, #24]
 800e26a:	69fb      	ldr	r3, [r7, #28]
 800e26c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e270:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800e272:	69bb      	ldr	r3, [r7, #24]
 800e274:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e276:	fb02 f303 	mul.w	r3, r2, r3
 800e27a:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800e27c:	69bb      	ldr	r3, [r7, #24]
 800e27e:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800e282:	4a25      	ldr	r2, [pc, #148]	@ (800e318 <VL53L0X_calc_dmax+0x234>)
 800e284:	fba2 2303 	umull	r2, r3, r2, r3
 800e288:	099b      	lsrs	r3, r3, #6
 800e28a:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800e28c:	69bb      	ldr	r3, [r7, #24]
 800e28e:	011b      	lsls	r3, r3, #4
 800e290:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800e292:	69bb      	ldr	r3, [r7, #24]
 800e294:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800e298:	4a1f      	ldr	r2, [pc, #124]	@ (800e318 <VL53L0X_calc_dmax+0x234>)
 800e29a:	fba2 2303 	umull	r2, r3, r2, r3
 800e29e:	099b      	lsrs	r3, r3, #6
 800e2a0:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800e2a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e2a4:	3380      	adds	r3, #128	@ 0x80
 800e2a6:	0a1b      	lsrs	r3, r3, #8
 800e2a8:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800e2aa:	697b      	ldr	r3, [r7, #20]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d008      	beq.n	800e2c2 <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800e2b0:	697b      	ldr	r3, [r7, #20]
 800e2b2:	085a      	lsrs	r2, r3, #1
 800e2b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e2b6:	441a      	add	r2, r3
 800e2b8:	697b      	ldr	r3, [r7, #20]
 800e2ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800e2be:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e2c0:	e001      	b.n	800e2c6 <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800e2c2:	2300      	movs	r3, #0
 800e2c4:	65bb      	str	r3, [r7, #88]	@ 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800e2c6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800e2c8:	f7fe f9bd 	bl	800c646 <VL53L0X_isqrt>
 800e2cc:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800e2ce:	69bb      	ldr	r3, [r7, #24]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d008      	beq.n	800e2e6 <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800e2d4:	69bb      	ldr	r3, [r7, #24]
 800e2d6:	085a      	lsrs	r2, r3, #1
 800e2d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e2da:	441a      	add	r2, r3
 800e2dc:	69bb      	ldr	r3, [r7, #24]
 800e2de:	fbb2 f3f3 	udiv	r3, r2, r3
 800e2e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e2e4:	e001      	b.n	800e2ea <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800e2e6:	2300      	movs	r3, #0
 800e2e8:	65fb      	str	r3, [r7, #92]	@ 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800e2ea:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800e2ec:	f7fe f9ab 	bl	800c646 <VL53L0X_isqrt>
 800e2f0:	65f8      	str	r0, [r7, #92]	@ 0x5c

	*pdmax_mm = dmaxDark;
 800e2f2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e2f4:	693a      	ldr	r2, [r7, #16]
 800e2f6:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800e2f8:	693a      	ldr	r2, [r7, #16]
 800e2fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e2fc:	429a      	cmp	r2, r3
 800e2fe:	d902      	bls.n	800e306 <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 800e300:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e302:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800e304:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800e306:	f997 3043 	ldrsb.w	r3, [r7, #67]	@ 0x43
}
 800e30a:	4618      	mov	r0, r3
 800e30c:	3768      	adds	r7, #104	@ 0x68
 800e30e:	46bd      	mov	sp, r7
 800e310:	bd80      	pop	{r7, pc}
 800e312:	bf00      	nop
 800e314:	fff00000 	.word	0xfff00000
 800e318:	10624dd3 	.word	0x10624dd3

0800e31c <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800e31c:	b580      	push	{r7, lr}
 800e31e:	b0b4      	sub	sp, #208	@ 0xd0
 800e320:	af04      	add	r7, sp, #16
 800e322:	60f8      	str	r0, [r7, #12]
 800e324:	60b9      	str	r1, [r7, #8]
 800e326:	607a      	str	r2, [r7, #4]
 800e328:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800e32a:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800e32e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800e332:	f44f 7316 	mov.w	r3, #600	@ 0x258
 800e336:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800e33a:	f44f 13c8 	mov.w	r3, #1638400	@ 0x190000
 800e33e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800e342:	f241 235c 	movw	r3, #4700	@ 0x125c
 800e346:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800e34a:	4b9e      	ldr	r3, [pc, #632]	@ (800e5c4 <VL53L0X_calc_sigma_estimate+0x2a8>)
 800e34c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800e350:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800e354:	67fb      	str	r3, [r7, #124]	@ 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800e356:	f04f 4270 	mov.w	r2, #4026531840	@ 0xf0000000
 800e35a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e35e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e362:	67bb      	str	r3, [r7, #120]	@ 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800e364:	4b98      	ldr	r3, [pc, #608]	@ (800e5c8 <VL53L0X_calc_sigma_estimate+0x2ac>)
 800e366:	677b      	str	r3, [r7, #116]	@ 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800e368:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e36c:	673b      	str	r3, [r7, #112]	@ 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800e36e:	f44f 1348 	mov.w	r3, #3276800	@ 0x320000
 800e372:	66fb      	str	r3, [r7, #108]	@ 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 800e374:	f240 6377 	movw	r3, #1655	@ 0x677
 800e378:	66bb      	str	r3, [r7, #104]	@ 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e37a:	2300      	movs	r3, #0
 800e37c:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	6a1b      	ldr	r3, [r3, #32]
 800e384:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800e386:	68bb      	ldr	r3, [r7, #8]
 800e388:	691b      	ldr	r3, [r3, #16]
 800e38a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800e38e:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800e392:	0c1b      	lsrs	r3, r3, #16
 800e394:	667b      	str	r3, [r7, #100]	@ 0x64

	correctedSignalRate_mcps =
 800e396:	68bb      	ldr	r3, [r7, #8]
 800e398:	68db      	ldr	r3, [r3, #12]
 800e39a:	663b      	str	r3, [r7, #96]	@ 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 800e39c:	f107 0310 	add.w	r3, r7, #16
 800e3a0:	461a      	mov	r2, r3
 800e3a2:	68b9      	ldr	r1, [r7, #8]
 800e3a4:	68f8      	ldr	r0, [r7, #12]
 800e3a6:	f7ff fe78 	bl	800e09a <VL53L0X_get_total_signal_rate>
 800e3aa:	4603      	mov	r3, r0
 800e3ac:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800e3b0:	f107 0314 	add.w	r3, r7, #20
 800e3b4:	461a      	mov	r2, r3
 800e3b6:	68b9      	ldr	r1, [r7, #8]
 800e3b8:	68f8      	ldr	r0, [r7, #12]
 800e3ba:	f7ff fe3f 	bl	800e03c <VL53L0X_get_total_xtalk_rate>
 800e3be:	4603      	mov	r3, r0
 800e3c0:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800e3c4:	693b      	ldr	r3, [r7, #16]
 800e3c6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800e3ca:	fb02 f303 	mul.w	r3, r2, r3
 800e3ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800e3d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e3d2:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800e3d6:	0c1b      	lsrs	r3, r3, #16
 800e3d8:	65fb      	str	r3, [r7, #92]	@ 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800e3da:	697b      	ldr	r3, [r7, #20]
 800e3dc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800e3e0:	fb02 f303 	mul.w	r3, r2, r3
 800e3e4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800e3e8:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800e3ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e3ee:	429a      	cmp	r2, r3
 800e3f0:	d902      	bls.n	800e3f8 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800e3f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e3f4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800e3f8:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d168      	bne.n	800e4d2 <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800e406:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	f893 30e0 	ldrb.w	r3, [r3, #224]	@ 0xe0
 800e410:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800e414:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800e418:	461a      	mov	r2, r3
 800e41a:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 800e41e:	68f8      	ldr	r0, [r7, #12]
 800e420:	f7fe feb4 	bl	800d18c <VL53L0X_calc_timeout_mclks>
 800e424:	6578      	str	r0, [r7, #84]	@ 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e42c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 800e436:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800e43a:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 800e43e:	461a      	mov	r2, r3
 800e440:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 800e444:	68f8      	ldr	r0, [r7, #12]
 800e446:	f7fe fea1 	bl	800d18c <VL53L0X_calc_timeout_mclks>
 800e44a:	64f8      	str	r0, [r7, #76]	@ 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800e44c:	2303      	movs	r3, #3
 800e44e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		if (finalRangeVcselPCLKS == 8)
 800e452:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800e456:	2b08      	cmp	r3, #8
 800e458:	d102      	bne.n	800e460 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 800e45a:	2302      	movs	r3, #2
 800e45c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800e460:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e462:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e464:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800e466:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800e46a:	fb02 f303 	mul.w	r3, r2, r3
 800e46e:	02db      	lsls	r3, r3, #11
 800e470:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800e474:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800e478:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800e47c:	4a53      	ldr	r2, [pc, #332]	@ (800e5cc <VL53L0X_calc_sigma_estimate+0x2b0>)
 800e47e:	fba2 2303 	umull	r2, r3, r2, r3
 800e482:	099b      	lsrs	r3, r3, #6
 800e484:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 800e488:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800e48c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800e48e:	fb02 f303 	mul.w	r3, r2, r3
 800e492:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800e496:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800e49a:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800e49e:	4a4b      	ldr	r2, [pc, #300]	@ (800e5cc <VL53L0X_calc_sigma_estimate+0x2b0>)
 800e4a0:	fba2 2303 	umull	r2, r3, r2, r3
 800e4a4:	099b      	lsrs	r3, r3, #6
 800e4a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800e4aa:	693b      	ldr	r3, [r7, #16]
 800e4ac:	3380      	adds	r3, #128	@ 0x80
 800e4ae:	0a1b      	lsrs	r3, r3, #8
 800e4b0:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800e4b2:	693a      	ldr	r2, [r7, #16]
 800e4b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800e4b8:	fb02 f303 	mul.w	r3, r2, r3
 800e4bc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800e4c0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800e4c4:	3380      	adds	r3, #128	@ 0x80
 800e4c6:	0a1b      	lsrs	r3, r3, #8
 800e4c8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800e4cc:	693b      	ldr	r3, [r7, #16]
 800e4ce:	021b      	lsls	r3, r3, #8
 800e4d0:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800e4d2:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d002      	beq.n	800e4e0 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 800e4da:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 800e4de:	e15e      	b.n	800e79e <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 800e4e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d10c      	bne.n	800e500 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800e4ec:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800e4f4:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
		*pDmax_mm = 0;
 800e4f8:	683b      	ldr	r3, [r7, #0]
 800e4fa:	2200      	movs	r2, #0
 800e4fc:	601a      	str	r2, [r3, #0]
 800e4fe:	e14c      	b.n	800e79a <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 800e500:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800e504:	2b00      	cmp	r3, #0
 800e506:	d102      	bne.n	800e50e <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 800e508:	2301      	movs	r3, #1
 800e50a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800e50e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800e512:	64bb      	str	r3, [r7, #72]	@ 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800e514:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e516:	041a      	lsls	r2, r3, #16
 800e518:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e51a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e51e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800e522:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800e526:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e528:	429a      	cmp	r2, r3
 800e52a:	d902      	bls.n	800e532 <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800e52c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e52e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800e532:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800e536:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800e53a:	fb02 f303 	mul.w	r3, r2, r3
 800e53e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800e542:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800e546:	4613      	mov	r3, r2
 800e548:	005b      	lsls	r3, r3, #1
 800e54a:	4413      	add	r3, r2
 800e54c:	009b      	lsls	r3, r3, #2
 800e54e:	4618      	mov	r0, r3
 800e550:	f7fe f879 	bl	800c646 <VL53L0X_isqrt>
 800e554:	4603      	mov	r3, r0
 800e556:	005b      	lsls	r3, r3, #1
 800e558:	647b      	str	r3, [r7, #68]	@ 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800e55a:	68bb      	ldr	r3, [r7, #8]
 800e55c:	891b      	ldrh	r3, [r3, #8]
 800e55e:	461a      	mov	r2, r3
 800e560:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e562:	fb02 f303 	mul.w	r3, r2, r3
 800e566:	643b      	str	r3, [r7, #64]	@ 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800e568:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e56a:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800e56c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e570:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800e572:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800e574:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800e578:	4a14      	ldr	r2, [pc, #80]	@ (800e5cc <VL53L0X_calc_sigma_estimate+0x2b0>)
 800e57a:	fba2 2303 	umull	r2, r3, r2, r3
 800e57e:	099b      	lsrs	r3, r3, #6
 800e580:	63fb      	str	r3, [r7, #60]	@ 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800e582:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e584:	041b      	lsls	r3, r3, #16
 800e586:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800e58a:	4a10      	ldr	r2, [pc, #64]	@ (800e5cc <VL53L0X_calc_sigma_estimate+0x2b0>)
 800e58c:	fba2 2303 	umull	r2, r3, r2, r3
 800e590:	099b      	lsrs	r3, r3, #6
 800e592:	63bb      	str	r3, [r7, #56]	@ 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800e594:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e596:	021b      	lsls	r3, r3, #8
 800e598:	63fb      	str	r3, [r7, #60]	@ 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800e59a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e59c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e59e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	bfb8      	it	lt
 800e5a6:	425b      	neglt	r3, r3
 800e5a8:	637b      	str	r3, [r7, #52]	@ 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800e5aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e5ac:	021b      	lsls	r3, r3, #8
 800e5ae:	637b      	str	r3, [r7, #52]	@ 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800e5b0:	68bb      	ldr	r3, [r7, #8]
 800e5b2:	7e1b      	ldrb	r3, [r3, #24]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d00b      	beq.n	800e5d0 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 800e5b8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800e5bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800e5c0:	e033      	b.n	800e62a <VL53L0X_calc_sigma_estimate+0x30e>
 800e5c2:	bf00      	nop
 800e5c4:	028f87ae 	.word	0x028f87ae
 800e5c8:	0006999a 	.word	0x0006999a
 800e5cc:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800e5d0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e5d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e5d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800e5da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800e5de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e5e0:	f5c3 3280 	rsb	r2, r3, #65536	@ 0x10000
 800e5e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e5e8:	fb02 f303 	mul.w	r3, r2, r3
 800e5ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800e5f0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800e5f4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e5f6:	4413      	add	r3, r2
 800e5f8:	0c1b      	lsrs	r3, r3, #16
 800e5fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800e5fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e602:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800e606:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800e60a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e60e:	085b      	lsrs	r3, r3, #1
 800e610:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800e614:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e618:	fb03 f303 	mul.w	r3, r3, r3
 800e61c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800e620:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e624:	0b9b      	lsrs	r3, r3, #14
 800e626:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800e62a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e62e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e630:	fb02 f303 	mul.w	r3, r2, r3
 800e634:	633b      	str	r3, [r7, #48]	@ 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800e636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e638:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800e63c:	0c1b      	lsrs	r3, r3, #16
 800e63e:	633b      	str	r3, [r7, #48]	@ 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800e640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e642:	fb03 f303 	mul.w	r3, r3, r3
 800e646:	633b      	str	r3, [r7, #48]	@ 0x30

		sqr2 = sigmaEstimateP2;
 800e648:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800e64c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800e64e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e650:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800e654:	0c1b      	lsrs	r3, r3, #16
 800e656:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800e658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e65a:	fb03 f303 	mul.w	r3, r3, r3
 800e65e:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800e660:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e664:	4413      	add	r3, r2
 800e666:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800e668:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e66a:	f7fd ffec 	bl	800c646 <VL53L0X_isqrt>
 800e66e:	6278      	str	r0, [r7, #36]	@ 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800e670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e672:	041b      	lsls	r3, r3, #16
 800e674:	627b      	str	r3, [r7, #36]	@ 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800e676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e678:	3332      	adds	r3, #50	@ 0x32
 800e67a:	4a4b      	ldr	r2, [pc, #300]	@ (800e7a8 <VL53L0X_calc_sigma_estimate+0x48c>)
 800e67c:	fba2 2303 	umull	r2, r3, r2, r3
 800e680:	095a      	lsrs	r2, r3, #5
 800e682:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e684:	fbb2 f3f3 	udiv	r3, r2, r3
 800e688:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800e68c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e690:	f640 32b5 	movw	r2, #2997	@ 0xbb5
 800e694:	fb02 f303 	mul.w	r3, r2, r3
 800e698:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800e69c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800e6a0:	f241 3388 	movw	r3, #5000	@ 0x1388
 800e6a4:	4413      	add	r3, r2
 800e6a6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
		sigmaEstRtn		 /= 10000;
 800e6aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e6ae:	4a3f      	ldr	r2, [pc, #252]	@ (800e7ac <VL53L0X_calc_sigma_estimate+0x490>)
 800e6b0:	fba2 2303 	umull	r2, r3, r2, r3
 800e6b4:	0b5b      	lsrs	r3, r3, #13
 800e6b6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800e6ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800e6be:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e6c0:	429a      	cmp	r2, r3
 800e6c2:	d902      	bls.n	800e6ca <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800e6c4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e6c6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800e6ca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800e6ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e6d2:	4413      	add	r3, r2
 800e6d4:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800e6d8:	4a35      	ldr	r2, [pc, #212]	@ (800e7b0 <VL53L0X_calc_sigma_estimate+0x494>)
 800e6da:	fba2 2303 	umull	r2, r3, r2, r3
 800e6de:	099b      	lsrs	r3, r3, #6
 800e6e0:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800e6e2:	6a3b      	ldr	r3, [r7, #32]
 800e6e4:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800e6e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800e6ea:	441a      	add	r2, r3
 800e6ec:	6a3b      	ldr	r3, [r7, #32]
 800e6ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800e6f2:	4618      	mov	r0, r3
 800e6f4:	f7fd ffa7 	bl	800c646 <VL53L0X_isqrt>
 800e6f8:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800e6fa:	69fb      	ldr	r3, [r7, #28]
 800e6fc:	021b      	lsls	r3, r3, #8
 800e6fe:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800e700:	69fb      	ldr	r3, [r7, #28]
 800e702:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800e706:	4a2a      	ldr	r2, [pc, #168]	@ (800e7b0 <VL53L0X_calc_sigma_estimate+0x494>)
 800e708:	fba2 2303 	umull	r2, r3, r2, r3
 800e70c:	099b      	lsrs	r3, r3, #6
 800e70e:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800e710:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e714:	fb03 f303 	mul.w	r3, r3, r3
 800e718:	633b      	str	r3, [r7, #48]	@ 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800e71a:	69fb      	ldr	r3, [r7, #28]
 800e71c:	fb03 f303 	mul.w	r3, r3, r3
 800e720:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800e722:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e726:	4413      	add	r3, r2
 800e728:	4618      	mov	r0, r3
 800e72a:	f7fd ff8c 	bl	800c646 <VL53L0X_isqrt>
 800e72e:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800e730:	69bb      	ldr	r3, [r7, #24]
 800e732:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800e736:	fb02 f303 	mul.w	r3, r2, r3
 800e73a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800e73e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e740:	2b00      	cmp	r3, #0
 800e742:	d009      	beq.n	800e758 <VL53L0X_calc_sigma_estimate+0x43c>
 800e744:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d005      	beq.n	800e758 <VL53L0X_calc_sigma_estimate+0x43c>
 800e74c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800e750:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800e754:	429a      	cmp	r2, r3
 800e756:	d903      	bls.n	800e760 <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800e758:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800e75c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800e766:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	681a      	ldr	r2, [r3, #0]
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
		Status = VL53L0X_calc_dmax(
 800e772:	6939      	ldr	r1, [r7, #16]
 800e774:	683b      	ldr	r3, [r7, #0]
 800e776:	9303      	str	r3, [sp, #12]
 800e778:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800e77c:	9302      	str	r3, [sp, #8]
 800e77e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800e782:	9301      	str	r3, [sp, #4]
 800e784:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e786:	9300      	str	r3, [sp, #0]
 800e788:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e78c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e78e:	68f8      	ldr	r0, [r7, #12]
 800e790:	f7ff fca8 	bl	800e0e4 <VL53L0X_calc_dmax>
 800e794:	4603      	mov	r3, r0
 800e796:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800e79a:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
}
 800e79e:	4618      	mov	r0, r3
 800e7a0:	37c0      	adds	r7, #192	@ 0xc0
 800e7a2:	46bd      	mov	sp, r7
 800e7a4:	bd80      	pop	{r7, pc}
 800e7a6:	bf00      	nop
 800e7a8:	51eb851f 	.word	0x51eb851f
 800e7ac:	d1b71759 	.word	0xd1b71759
 800e7b0:	10624dd3 	.word	0x10624dd3

0800e7b4 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800e7b4:	b580      	push	{r7, lr}
 800e7b6:	b090      	sub	sp, #64	@ 0x40
 800e7b8:	af00      	add	r7, sp, #0
 800e7ba:	60f8      	str	r0, [r7, #12]
 800e7bc:	607a      	str	r2, [r7, #4]
 800e7be:	461a      	mov	r2, r3
 800e7c0:	460b      	mov	r3, r1
 800e7c2:	72fb      	strb	r3, [r7, #11]
 800e7c4:	4613      	mov	r3, r2
 800e7c6:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e7c8:	2300      	movs	r3, #0
 800e7ca:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800e7ce:	2300      	movs	r3, #0
 800e7d0:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	uint8_t SignalRefClipflag = 0;
 800e7d4:	2300      	movs	r3, #0
 800e7d6:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800e7da:	2300      	movs	r3, #0
 800e7dc:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800e7e0:	2300      	movs	r3, #0
 800e7e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800e7e6:	2300      	movs	r3, #0
 800e7e8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800e7ec:	2300      	movs	r3, #0
 800e7ee:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800e7f2:	2300      	movs	r3, #0
 800e7f4:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800e7f8:	2300      	movs	r3, #0
 800e7fa:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	uint16_t tmpWord = 0;
 800e7fe:	2300      	movs	r3, #0
 800e800:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800e802:	2300      	movs	r3, #0
 800e804:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800e806:	7afb      	ldrb	r3, [r7, #11]
 800e808:	10db      	asrs	r3, r3, #3
 800e80a:	b2db      	uxtb	r3, r3
 800e80c:	f003 030f 	and.w	r3, r3, #15
 800e810:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800e814:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d017      	beq.n	800e84c <VL53L0X_get_pal_range_status+0x98>
 800e81c:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800e820:	2b05      	cmp	r3, #5
 800e822:	d013      	beq.n	800e84c <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800e824:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800e828:	2b07      	cmp	r3, #7
 800e82a:	d00f      	beq.n	800e84c <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800e82c:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800e830:	2b0c      	cmp	r3, #12
 800e832:	d00b      	beq.n	800e84c <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800e834:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800e838:	2b0d      	cmp	r3, #13
 800e83a:	d007      	beq.n	800e84c <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800e83c:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800e840:	2b0e      	cmp	r3, #14
 800e842:	d003      	beq.n	800e84c <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800e844:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800e848:	2b0f      	cmp	r3, #15
 800e84a:	d103      	bne.n	800e854 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800e84c:	2301      	movs	r3, #1
 800e84e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 800e852:	e002      	b.n	800e85a <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800e854:	2300      	movs	r3, #0
 800e856:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800e85a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d109      	bne.n	800e876 <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800e862:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800e866:	461a      	mov	r2, r3
 800e868:	2100      	movs	r1, #0
 800e86a:	68f8      	ldr	r0, [r7, #12]
 800e86c:	f7fc f990 	bl	800ab90 <VL53L0X_GetLimitCheckEnable>
 800e870:	4603      	mov	r3, r0
 800e872:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800e876:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d02e      	beq.n	800e8dc <VL53L0X_get_pal_range_status+0x128>
 800e87e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800e882:	2b00      	cmp	r3, #0
 800e884:	d12a      	bne.n	800e8dc <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800e886:	f107 0310 	add.w	r3, r7, #16
 800e88a:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800e88e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800e890:	68f8      	ldr	r0, [r7, #12]
 800e892:	f7ff fd43 	bl	800e31c <VL53L0X_calc_sigma_estimate>
 800e896:	4603      	mov	r3, r0
 800e898:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800e89c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d103      	bne.n	800e8ac <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800e8a4:	693b      	ldr	r3, [r7, #16]
 800e8a6:	b29a      	uxth	r2, r3
 800e8a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e8aa:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800e8ac:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d113      	bne.n	800e8dc <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800e8b4:	f107 0320 	add.w	r3, r7, #32
 800e8b8:	461a      	mov	r2, r3
 800e8ba:	2100      	movs	r1, #0
 800e8bc:	68f8      	ldr	r0, [r7, #12]
 800e8be:	f7fc f9ed 	bl	800ac9c <VL53L0X_GetLimitCheckValue>
 800e8c2:	4603      	mov	r3, r0
 800e8c4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800e8c8:	6a3b      	ldr	r3, [r7, #32]
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d006      	beq.n	800e8dc <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800e8ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e8d0:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800e8d2:	429a      	cmp	r2, r3
 800e8d4:	d902      	bls.n	800e8dc <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800e8d6:	2301      	movs	r3, #1
 800e8d8:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800e8dc:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d109      	bne.n	800e8f8 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800e8e4:	f107 0329 	add.w	r3, r7, #41	@ 0x29
 800e8e8:	461a      	mov	r2, r3
 800e8ea:	2102      	movs	r1, #2
 800e8ec:	68f8      	ldr	r0, [r7, #12]
 800e8ee:	f7fc f94f 	bl	800ab90 <VL53L0X_GetLimitCheckEnable>
 800e8f2:	4603      	mov	r3, r0
 800e8f4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800e8f8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d044      	beq.n	800e98a <VL53L0X_get_pal_range_status+0x1d6>
 800e900:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800e904:	2b00      	cmp	r3, #0
 800e906:	d140      	bne.n	800e98a <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800e908:	f107 031c 	add.w	r3, r7, #28
 800e90c:	461a      	mov	r2, r3
 800e90e:	2102      	movs	r1, #2
 800e910:	68f8      	ldr	r0, [r7, #12]
 800e912:	f7fc f9c3 	bl	800ac9c <VL53L0X_GetLimitCheckValue>
 800e916:	4603      	mov	r3, r0
 800e918:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800e91c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800e920:	2b00      	cmp	r3, #0
 800e922:	d107      	bne.n	800e934 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800e924:	2201      	movs	r2, #1
 800e926:	21ff      	movs	r1, #255	@ 0xff
 800e928:	68f8      	ldr	r0, [r7, #12]
 800e92a:	f000 f9bb 	bl	800eca4 <VL53L0X_WrByte>
 800e92e:	4603      	mov	r3, r0
 800e930:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800e934:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d109      	bne.n	800e950 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 800e93c:	f107 0316 	add.w	r3, r7, #22
 800e940:	461a      	mov	r2, r3
 800e942:	21b6      	movs	r1, #182	@ 0xb6
 800e944:	68f8      	ldr	r0, [r7, #12]
 800e946:	f000 fa59 	bl	800edfc <VL53L0X_RdWord>
 800e94a:	4603      	mov	r3, r0
 800e94c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800e950:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800e954:	2b00      	cmp	r3, #0
 800e956:	d107      	bne.n	800e968 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800e958:	2200      	movs	r2, #0
 800e95a:	21ff      	movs	r1, #255	@ 0xff
 800e95c:	68f8      	ldr	r0, [r7, #12]
 800e95e:	f000 f9a1 	bl	800eca4 <VL53L0X_WrByte>
 800e962:	4603      	mov	r3, r0
 800e964:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800e968:	8afb      	ldrh	r3, [r7, #22]
 800e96a:	025b      	lsls	r3, r3, #9
 800e96c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e972:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148

		if ((SignalRefClipValue > 0) &&
 800e976:	69fb      	ldr	r3, [r7, #28]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d006      	beq.n	800e98a <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800e97c:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800e97e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e980:	429a      	cmp	r2, r3
 800e982:	d902      	bls.n	800e98a <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800e984:	2301      	movs	r3, #1
 800e986:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800e98a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d109      	bne.n	800e9a6 <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800e992:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e996:	461a      	mov	r2, r3
 800e998:	2103      	movs	r1, #3
 800e99a:	68f8      	ldr	r0, [r7, #12]
 800e99c:	f7fc f8f8 	bl	800ab90 <VL53L0X_GetLimitCheckEnable>
 800e9a0:	4603      	mov	r3, r0
 800e9a2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800e9a6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d023      	beq.n	800e9f6 <VL53L0X_get_pal_range_status+0x242>
 800e9ae:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d11f      	bne.n	800e9f6 <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800e9b6:	893b      	ldrh	r3, [r7, #8]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d102      	bne.n	800e9c2 <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800e9bc:	2300      	movs	r3, #0
 800e9be:	637b      	str	r3, [r7, #52]	@ 0x34
 800e9c0:	e005      	b.n	800e9ce <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	021a      	lsls	r2, r3, #8
 800e9c6:	893b      	ldrh	r3, [r7, #8]
 800e9c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800e9cc:	637b      	str	r3, [r7, #52]	@ 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800e9ce:	f107 0318 	add.w	r3, r7, #24
 800e9d2:	461a      	mov	r2, r3
 800e9d4:	2103      	movs	r1, #3
 800e9d6:	68f8      	ldr	r0, [r7, #12]
 800e9d8:	f7fc f960 	bl	800ac9c <VL53L0X_GetLimitCheckValue>
 800e9dc:	4603      	mov	r3, r0
 800e9de:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800e9e2:	69bb      	ldr	r3, [r7, #24]
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d006      	beq.n	800e9f6 <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800e9e8:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800e9ea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e9ec:	429a      	cmp	r2, r3
 800e9ee:	d202      	bcs.n	800e9f6 <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800e9f0:	2301      	movs	r3, #1
 800e9f2:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800e9f6:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d14a      	bne.n	800ea94 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800e9fe:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800ea02:	2b01      	cmp	r3, #1
 800ea04:	d103      	bne.n	800ea0e <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800ea06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ea08:	22ff      	movs	r2, #255	@ 0xff
 800ea0a:	701a      	strb	r2, [r3, #0]
 800ea0c:	e042      	b.n	800ea94 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800ea0e:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800ea12:	2b01      	cmp	r3, #1
 800ea14:	d007      	beq.n	800ea26 <VL53L0X_get_pal_range_status+0x272>
 800ea16:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800ea1a:	2b02      	cmp	r3, #2
 800ea1c:	d003      	beq.n	800ea26 <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800ea1e:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800ea22:	2b03      	cmp	r3, #3
 800ea24:	d103      	bne.n	800ea2e <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800ea26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ea28:	2205      	movs	r2, #5
 800ea2a:	701a      	strb	r2, [r3, #0]
 800ea2c:	e032      	b.n	800ea94 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800ea2e:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800ea32:	2b06      	cmp	r3, #6
 800ea34:	d003      	beq.n	800ea3e <VL53L0X_get_pal_range_status+0x28a>
 800ea36:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800ea3a:	2b09      	cmp	r3, #9
 800ea3c:	d103      	bne.n	800ea46 <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800ea3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ea40:	2204      	movs	r2, #4
 800ea42:	701a      	strb	r2, [r3, #0]
 800ea44:	e026      	b.n	800ea94 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800ea46:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800ea4a:	2b08      	cmp	r3, #8
 800ea4c:	d007      	beq.n	800ea5e <VL53L0X_get_pal_range_status+0x2aa>
 800ea4e:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800ea52:	2b0a      	cmp	r3, #10
 800ea54:	d003      	beq.n	800ea5e <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800ea56:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800ea5a:	2b01      	cmp	r3, #1
 800ea5c:	d103      	bne.n	800ea66 <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800ea5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ea60:	2203      	movs	r2, #3
 800ea62:	701a      	strb	r2, [r3, #0]
 800ea64:	e016      	b.n	800ea94 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800ea66:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800ea6a:	2b04      	cmp	r3, #4
 800ea6c:	d003      	beq.n	800ea76 <VL53L0X_get_pal_range_status+0x2c2>
 800ea6e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800ea72:	2b01      	cmp	r3, #1
 800ea74:	d103      	bne.n	800ea7e <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800ea76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ea78:	2202      	movs	r2, #2
 800ea7a:	701a      	strb	r2, [r3, #0]
 800ea7c:	e00a      	b.n	800ea94 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800ea7e:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800ea82:	2b01      	cmp	r3, #1
 800ea84:	d103      	bne.n	800ea8e <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800ea86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ea88:	2201      	movs	r2, #1
 800ea8a:	701a      	strb	r2, [r3, #0]
 800ea8c:	e002      	b.n	800ea94 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800ea8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ea90:	2200      	movs	r2, #0
 800ea92:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800ea94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ea96:	781b      	ldrb	r3, [r3, #0]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d102      	bne.n	800eaa2 <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800ea9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ea9e:	2200      	movs	r2, #0
 800eaa0:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800eaa2:	f107 032a 	add.w	r3, r7, #42	@ 0x2a
 800eaa6:	461a      	mov	r2, r3
 800eaa8:	2101      	movs	r1, #1
 800eaaa:	68f8      	ldr	r0, [r7, #12]
 800eaac:	f7fc f870 	bl	800ab90 <VL53L0X_GetLimitCheckEnable>
 800eab0:	4603      	mov	r3, r0
 800eab2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800eab6:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d14f      	bne.n	800eb5e <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800eabe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d003      	beq.n	800eace <VL53L0X_get_pal_range_status+0x31a>
 800eac6:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800eaca:	2b01      	cmp	r3, #1
 800eacc:	d103      	bne.n	800ead6 <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800eace:	2301      	movs	r3, #1
 800ead0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800ead4:	e002      	b.n	800eadc <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800ead6:	2300      	movs	r3, #0
 800ead8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800eae2:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800eae6:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800eaea:	2b04      	cmp	r3, #4
 800eaec:	d003      	beq.n	800eaf6 <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800eaee:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d103      	bne.n	800eafe <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800eaf6:	2301      	movs	r3, #1
 800eaf8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800eafc:	e002      	b.n	800eb04 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800eafe:	2300      	movs	r3, #0
 800eb00:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800eb0a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800eb0e:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d003      	beq.n	800eb1e <VL53L0X_get_pal_range_status+0x36a>
 800eb16:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800eb1a:	2b01      	cmp	r3, #1
 800eb1c:	d103      	bne.n	800eb26 <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800eb1e:	2301      	movs	r3, #1
 800eb20:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800eb24:	e002      	b.n	800eb2c <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800eb26:	2300      	movs	r3, #0
 800eb28:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800eb32:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800eb36:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d003      	beq.n	800eb46 <VL53L0X_get_pal_range_status+0x392>
 800eb3e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800eb42:	2b01      	cmp	r3, #1
 800eb44:	d103      	bne.n	800eb4e <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800eb46:	2301      	movs	r3, #1
 800eb48:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800eb4c:	e002      	b.n	800eb54 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800eb4e:	2300      	movs	r3, #0
 800eb50:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800eb5a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800eb5e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f

}
 800eb62:	4618      	mov	r0, r3
 800eb64:	3740      	adds	r7, #64	@ 0x40
 800eb66:	46bd      	mov	sp, r7
 800eb68:	bd80      	pop	{r7, pc}

0800eb6a <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800eb6a:	b580      	push	{r7, lr}
 800eb6c:	b088      	sub	sp, #32
 800eb6e:	af02      	add	r7, sp, #8
 800eb70:	60f8      	str	r0, [r7, #12]
 800eb72:	60b9      	str	r1, [r7, #8]
 800eb74:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	330a      	adds	r3, #10
 800eb7a:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	f8d3 015c 	ldr.w	r0, [r3, #348]	@ 0x15c
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 800eb88:	4619      	mov	r1, r3
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	b29a      	uxth	r2, r3
 800eb8e:	697b      	ldr	r3, [r7, #20]
 800eb90:	9300      	str	r3, [sp, #0]
 800eb92:	4613      	mov	r3, r2
 800eb94:	68ba      	ldr	r2, [r7, #8]
 800eb96:	f7f6 fb61 	bl	800525c <HAL_I2C_Master_Transmit>
 800eb9a:	4603      	mov	r3, r0
 800eb9c:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800eb9e:	693b      	ldr	r3, [r7, #16]
}
 800eba0:	4618      	mov	r0, r3
 800eba2:	3718      	adds	r7, #24
 800eba4:	46bd      	mov	sp, r7
 800eba6:	bd80      	pop	{r7, pc}

0800eba8 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800eba8:	b580      	push	{r7, lr}
 800ebaa:	b088      	sub	sp, #32
 800ebac:	af02      	add	r7, sp, #8
 800ebae:	60f8      	str	r0, [r7, #12]
 800ebb0:	60b9      	str	r1, [r7, #8]
 800ebb2:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	330a      	adds	r3, #10
 800ebb8:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	f8d3 015c 	ldr.w	r0, [r3, #348]	@ 0x15c
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 800ebc6:	f043 0301 	orr.w	r3, r3, #1
 800ebca:	b2db      	uxtb	r3, r3
 800ebcc:	4619      	mov	r1, r3
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	b29a      	uxth	r2, r3
 800ebd2:	697b      	ldr	r3, [r7, #20]
 800ebd4:	9300      	str	r3, [sp, #0]
 800ebd6:	4613      	mov	r3, r2
 800ebd8:	68ba      	ldr	r2, [r7, #8]
 800ebda:	f7f6 fc33 	bl	8005444 <HAL_I2C_Master_Receive>
 800ebde:	4603      	mov	r3, r0
 800ebe0:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800ebe2:	693b      	ldr	r3, [r7, #16]
}
 800ebe4:	4618      	mov	r0, r3
 800ebe6:	3718      	adds	r7, #24
 800ebe8:	46bd      	mov	sp, r7
 800ebea:	bd80      	pop	{r7, pc}

0800ebec <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800ebec:	b580      	push	{r7, lr}
 800ebee:	b086      	sub	sp, #24
 800ebf0:	af00      	add	r7, sp, #0
 800ebf2:	60f8      	str	r0, [r7, #12]
 800ebf4:	607a      	str	r2, [r7, #4]
 800ebf6:	603b      	str	r3, [r7, #0]
 800ebf8:	460b      	mov	r3, r1
 800ebfa:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ebfc:	2300      	movs	r3, #0
 800ebfe:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800ec00:	683b      	ldr	r3, [r7, #0]
 800ec02:	2b3f      	cmp	r3, #63	@ 0x3f
 800ec04:	d902      	bls.n	800ec0c <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800ec06:	f06f 0303 	mvn.w	r3, #3
 800ec0a:	e016      	b.n	800ec3a <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 800ec0c:	4a0d      	ldr	r2, [pc, #52]	@ (800ec44 <VL53L0X_WriteMulti+0x58>)
 800ec0e:	7afb      	ldrb	r3, [r7, #11]
 800ec10:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800ec12:	683a      	ldr	r2, [r7, #0]
 800ec14:	6879      	ldr	r1, [r7, #4]
 800ec16:	480c      	ldr	r0, [pc, #48]	@ (800ec48 <VL53L0X_WriteMulti+0x5c>)
 800ec18:	f004 ff07 	bl	8013a2a <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800ec1c:	683b      	ldr	r3, [r7, #0]
 800ec1e:	3301      	adds	r3, #1
 800ec20:	461a      	mov	r2, r3
 800ec22:	4908      	ldr	r1, [pc, #32]	@ (800ec44 <VL53L0X_WriteMulti+0x58>)
 800ec24:	68f8      	ldr	r0, [r7, #12]
 800ec26:	f7ff ffa0 	bl	800eb6a <_I2CWrite>
 800ec2a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ec2c:	693b      	ldr	r3, [r7, #16]
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d001      	beq.n	800ec36 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ec32:	23ec      	movs	r3, #236	@ 0xec
 800ec34:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800ec36:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	3718      	adds	r7, #24
 800ec3e:	46bd      	mov	sp, r7
 800ec40:	bd80      	pop	{r7, pc}
 800ec42:	bf00      	nop
 800ec44:	2000c56c 	.word	0x2000c56c
 800ec48:	2000c56d 	.word	0x2000c56d

0800ec4c <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800ec4c:	b580      	push	{r7, lr}
 800ec4e:	b086      	sub	sp, #24
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	60f8      	str	r0, [r7, #12]
 800ec54:	607a      	str	r2, [r7, #4]
 800ec56:	603b      	str	r3, [r7, #0]
 800ec58:	460b      	mov	r3, r1
 800ec5a:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ec5c:	2300      	movs	r3, #0
 800ec5e:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800ec60:	f107 030b 	add.w	r3, r7, #11
 800ec64:	2201      	movs	r2, #1
 800ec66:	4619      	mov	r1, r3
 800ec68:	68f8      	ldr	r0, [r7, #12]
 800ec6a:	f7ff ff7e 	bl	800eb6a <_I2CWrite>
 800ec6e:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ec70:	693b      	ldr	r3, [r7, #16]
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d002      	beq.n	800ec7c <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ec76:	23ec      	movs	r3, #236	@ 0xec
 800ec78:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ec7a:	e00c      	b.n	800ec96 <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800ec7c:	683a      	ldr	r2, [r7, #0]
 800ec7e:	6879      	ldr	r1, [r7, #4]
 800ec80:	68f8      	ldr	r0, [r7, #12]
 800ec82:	f7ff ff91 	bl	800eba8 <_I2CRead>
 800ec86:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ec88:	693b      	ldr	r3, [r7, #16]
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d002      	beq.n	800ec94 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ec8e:	23ec      	movs	r3, #236	@ 0xec
 800ec90:	75fb      	strb	r3, [r7, #23]
 800ec92:	e000      	b.n	800ec96 <VL53L0X_ReadMulti+0x4a>
    }
done:
 800ec94:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800ec96:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ec9a:	4618      	mov	r0, r3
 800ec9c:	3718      	adds	r7, #24
 800ec9e:	46bd      	mov	sp, r7
 800eca0:	bd80      	pop	{r7, pc}
	...

0800eca4 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800eca4:	b580      	push	{r7, lr}
 800eca6:	b084      	sub	sp, #16
 800eca8:	af00      	add	r7, sp, #0
 800ecaa:	6078      	str	r0, [r7, #4]
 800ecac:	460b      	mov	r3, r1
 800ecae:	70fb      	strb	r3, [r7, #3]
 800ecb0:	4613      	mov	r3, r2
 800ecb2:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ecb4:	2300      	movs	r3, #0
 800ecb6:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800ecb8:	4a0b      	ldr	r2, [pc, #44]	@ (800ece8 <VL53L0X_WrByte+0x44>)
 800ecba:	78fb      	ldrb	r3, [r7, #3]
 800ecbc:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800ecbe:	4a0a      	ldr	r2, [pc, #40]	@ (800ece8 <VL53L0X_WrByte+0x44>)
 800ecc0:	78bb      	ldrb	r3, [r7, #2]
 800ecc2:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800ecc4:	2202      	movs	r2, #2
 800ecc6:	4908      	ldr	r1, [pc, #32]	@ (800ece8 <VL53L0X_WrByte+0x44>)
 800ecc8:	6878      	ldr	r0, [r7, #4]
 800ecca:	f7ff ff4e 	bl	800eb6a <_I2CWrite>
 800ecce:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800ecd0:	68bb      	ldr	r3, [r7, #8]
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d001      	beq.n	800ecda <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ecd6:	23ec      	movs	r3, #236	@ 0xec
 800ecd8:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800ecda:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ecde:	4618      	mov	r0, r3
 800ece0:	3710      	adds	r7, #16
 800ece2:	46bd      	mov	sp, r7
 800ece4:	bd80      	pop	{r7, pc}
 800ece6:	bf00      	nop
 800ece8:	2000c56c 	.word	0x2000c56c

0800ecec <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800ecec:	b580      	push	{r7, lr}
 800ecee:	b084      	sub	sp, #16
 800ecf0:	af00      	add	r7, sp, #0
 800ecf2:	6078      	str	r0, [r7, #4]
 800ecf4:	460b      	mov	r3, r1
 800ecf6:	70fb      	strb	r3, [r7, #3]
 800ecf8:	4613      	mov	r3, r2
 800ecfa:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ecfc:	2300      	movs	r3, #0
 800ecfe:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800ed00:	4a0e      	ldr	r2, [pc, #56]	@ (800ed3c <VL53L0X_WrWord+0x50>)
 800ed02:	78fb      	ldrb	r3, [r7, #3]
 800ed04:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800ed06:	883b      	ldrh	r3, [r7, #0]
 800ed08:	0a1b      	lsrs	r3, r3, #8
 800ed0a:	b29b      	uxth	r3, r3
 800ed0c:	b2da      	uxtb	r2, r3
 800ed0e:	4b0b      	ldr	r3, [pc, #44]	@ (800ed3c <VL53L0X_WrWord+0x50>)
 800ed10:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800ed12:	883b      	ldrh	r3, [r7, #0]
 800ed14:	b2da      	uxtb	r2, r3
 800ed16:	4b09      	ldr	r3, [pc, #36]	@ (800ed3c <VL53L0X_WrWord+0x50>)
 800ed18:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800ed1a:	2203      	movs	r2, #3
 800ed1c:	4907      	ldr	r1, [pc, #28]	@ (800ed3c <VL53L0X_WrWord+0x50>)
 800ed1e:	6878      	ldr	r0, [r7, #4]
 800ed20:	f7ff ff23 	bl	800eb6a <_I2CWrite>
 800ed24:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800ed26:	68bb      	ldr	r3, [r7, #8]
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d001      	beq.n	800ed30 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ed2c:	23ec      	movs	r3, #236	@ 0xec
 800ed2e:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800ed30:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ed34:	4618      	mov	r0, r3
 800ed36:	3710      	adds	r7, #16
 800ed38:	46bd      	mov	sp, r7
 800ed3a:	bd80      	pop	{r7, pc}
 800ed3c:	2000c56c 	.word	0x2000c56c

0800ed40 <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800ed40:	b580      	push	{r7, lr}
 800ed42:	b084      	sub	sp, #16
 800ed44:	af00      	add	r7, sp, #0
 800ed46:	6078      	str	r0, [r7, #4]
 800ed48:	4608      	mov	r0, r1
 800ed4a:	4611      	mov	r1, r2
 800ed4c:	461a      	mov	r2, r3
 800ed4e:	4603      	mov	r3, r0
 800ed50:	70fb      	strb	r3, [r7, #3]
 800ed52:	460b      	mov	r3, r1
 800ed54:	70bb      	strb	r3, [r7, #2]
 800ed56:	4613      	mov	r3, r2
 800ed58:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ed5a:	2300      	movs	r3, #0
 800ed5c:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800ed5e:	f107 020e 	add.w	r2, r7, #14
 800ed62:	78fb      	ldrb	r3, [r7, #3]
 800ed64:	4619      	mov	r1, r3
 800ed66:	6878      	ldr	r0, [r7, #4]
 800ed68:	f000 f81e 	bl	800eda8 <VL53L0X_RdByte>
 800ed6c:	4603      	mov	r3, r0
 800ed6e:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 800ed70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d110      	bne.n	800ed9a <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 800ed78:	7bba      	ldrb	r2, [r7, #14]
 800ed7a:	78bb      	ldrb	r3, [r7, #2]
 800ed7c:	4013      	ands	r3, r2
 800ed7e:	b2da      	uxtb	r2, r3
 800ed80:	787b      	ldrb	r3, [r7, #1]
 800ed82:	4313      	orrs	r3, r2
 800ed84:	b2db      	uxtb	r3, r3
 800ed86:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800ed88:	7bba      	ldrb	r2, [r7, #14]
 800ed8a:	78fb      	ldrb	r3, [r7, #3]
 800ed8c:	4619      	mov	r1, r3
 800ed8e:	6878      	ldr	r0, [r7, #4]
 800ed90:	f7ff ff88 	bl	800eca4 <VL53L0X_WrByte>
 800ed94:	4603      	mov	r3, r0
 800ed96:	73fb      	strb	r3, [r7, #15]
 800ed98:	e000      	b.n	800ed9c <VL53L0X_UpdateByte+0x5c>
        goto done;
 800ed9a:	bf00      	nop
done:
    return Status;
 800ed9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800eda0:	4618      	mov	r0, r3
 800eda2:	3710      	adds	r7, #16
 800eda4:	46bd      	mov	sp, r7
 800eda6:	bd80      	pop	{r7, pc}

0800eda8 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800eda8:	b580      	push	{r7, lr}
 800edaa:	b086      	sub	sp, #24
 800edac:	af00      	add	r7, sp, #0
 800edae:	60f8      	str	r0, [r7, #12]
 800edb0:	460b      	mov	r3, r1
 800edb2:	607a      	str	r2, [r7, #4]
 800edb4:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800edb6:	2300      	movs	r3, #0
 800edb8:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800edba:	f107 030b 	add.w	r3, r7, #11
 800edbe:	2201      	movs	r2, #1
 800edc0:	4619      	mov	r1, r3
 800edc2:	68f8      	ldr	r0, [r7, #12]
 800edc4:	f7ff fed1 	bl	800eb6a <_I2CWrite>
 800edc8:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800edca:	693b      	ldr	r3, [r7, #16]
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d002      	beq.n	800edd6 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800edd0:	23ec      	movs	r3, #236	@ 0xec
 800edd2:	75fb      	strb	r3, [r7, #23]
        goto done;
 800edd4:	e00c      	b.n	800edf0 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 800edd6:	2201      	movs	r2, #1
 800edd8:	6879      	ldr	r1, [r7, #4]
 800edda:	68f8      	ldr	r0, [r7, #12]
 800eddc:	f7ff fee4 	bl	800eba8 <_I2CRead>
 800ede0:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ede2:	693b      	ldr	r3, [r7, #16]
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d002      	beq.n	800edee <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ede8:	23ec      	movs	r3, #236	@ 0xec
 800edea:	75fb      	strb	r3, [r7, #23]
 800edec:	e000      	b.n	800edf0 <VL53L0X_RdByte+0x48>
    }
done:
 800edee:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800edf0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800edf4:	4618      	mov	r0, r3
 800edf6:	3718      	adds	r7, #24
 800edf8:	46bd      	mov	sp, r7
 800edfa:	bd80      	pop	{r7, pc}

0800edfc <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800edfc:	b580      	push	{r7, lr}
 800edfe:	b086      	sub	sp, #24
 800ee00:	af00      	add	r7, sp, #0
 800ee02:	60f8      	str	r0, [r7, #12]
 800ee04:	460b      	mov	r3, r1
 800ee06:	607a      	str	r2, [r7, #4]
 800ee08:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ee0a:	2300      	movs	r3, #0
 800ee0c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800ee0e:	f107 030b 	add.w	r3, r7, #11
 800ee12:	2201      	movs	r2, #1
 800ee14:	4619      	mov	r1, r3
 800ee16:	68f8      	ldr	r0, [r7, #12]
 800ee18:	f7ff fea7 	bl	800eb6a <_I2CWrite>
 800ee1c:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800ee1e:	693b      	ldr	r3, [r7, #16]
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d002      	beq.n	800ee2a <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ee24:	23ec      	movs	r3, #236	@ 0xec
 800ee26:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ee28:	e015      	b.n	800ee56 <VL53L0X_RdWord+0x5a>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800ee2a:	2202      	movs	r2, #2
 800ee2c:	490d      	ldr	r1, [pc, #52]	@ (800ee64 <VL53L0X_RdWord+0x68>)
 800ee2e:	68f8      	ldr	r0, [r7, #12]
 800ee30:	f7ff feba 	bl	800eba8 <_I2CRead>
 800ee34:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ee36:	693b      	ldr	r3, [r7, #16]
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d002      	beq.n	800ee42 <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ee3c:	23ec      	movs	r3, #236	@ 0xec
 800ee3e:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ee40:	e009      	b.n	800ee56 <VL53L0X_RdWord+0x5a>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800ee42:	4b08      	ldr	r3, [pc, #32]	@ (800ee64 <VL53L0X_RdWord+0x68>)
 800ee44:	781b      	ldrb	r3, [r3, #0]
 800ee46:	021b      	lsls	r3, r3, #8
 800ee48:	b29b      	uxth	r3, r3
 800ee4a:	4a06      	ldr	r2, [pc, #24]	@ (800ee64 <VL53L0X_RdWord+0x68>)
 800ee4c:	7852      	ldrb	r2, [r2, #1]
 800ee4e:	4413      	add	r3, r2
 800ee50:	b29a      	uxth	r2, r3
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 800ee56:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ee5a:	4618      	mov	r0, r3
 800ee5c:	3718      	adds	r7, #24
 800ee5e:	46bd      	mov	sp, r7
 800ee60:	bd80      	pop	{r7, pc}
 800ee62:	bf00      	nop
 800ee64:	2000c56c 	.word	0x2000c56c

0800ee68 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 800ee68:	b580      	push	{r7, lr}
 800ee6a:	b086      	sub	sp, #24
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	60f8      	str	r0, [r7, #12]
 800ee70:	460b      	mov	r3, r1
 800ee72:	607a      	str	r2, [r7, #4]
 800ee74:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ee76:	2300      	movs	r3, #0
 800ee78:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800ee7a:	f107 030b 	add.w	r3, r7, #11
 800ee7e:	2201      	movs	r2, #1
 800ee80:	4619      	mov	r1, r3
 800ee82:	68f8      	ldr	r0, [r7, #12]
 800ee84:	f7ff fe71 	bl	800eb6a <_I2CWrite>
 800ee88:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ee8a:	693b      	ldr	r3, [r7, #16]
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d002      	beq.n	800ee96 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ee90:	23ec      	movs	r3, #236	@ 0xec
 800ee92:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ee94:	e01b      	b.n	800eece <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800ee96:	2204      	movs	r2, #4
 800ee98:	4910      	ldr	r1, [pc, #64]	@ (800eedc <VL53L0X_RdDWord+0x74>)
 800ee9a:	68f8      	ldr	r0, [r7, #12]
 800ee9c:	f7ff fe84 	bl	800eba8 <_I2CRead>
 800eea0:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800eea2:	693b      	ldr	r3, [r7, #16]
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d002      	beq.n	800eeae <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800eea8:	23ec      	movs	r3, #236	@ 0xec
 800eeaa:	75fb      	strb	r3, [r7, #23]
        goto done;
 800eeac:	e00f      	b.n	800eece <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800eeae:	4b0b      	ldr	r3, [pc, #44]	@ (800eedc <VL53L0X_RdDWord+0x74>)
 800eeb0:	781b      	ldrb	r3, [r3, #0]
 800eeb2:	061a      	lsls	r2, r3, #24
 800eeb4:	4b09      	ldr	r3, [pc, #36]	@ (800eedc <VL53L0X_RdDWord+0x74>)
 800eeb6:	785b      	ldrb	r3, [r3, #1]
 800eeb8:	041b      	lsls	r3, r3, #16
 800eeba:	441a      	add	r2, r3
 800eebc:	4b07      	ldr	r3, [pc, #28]	@ (800eedc <VL53L0X_RdDWord+0x74>)
 800eebe:	789b      	ldrb	r3, [r3, #2]
 800eec0:	021b      	lsls	r3, r3, #8
 800eec2:	4413      	add	r3, r2
 800eec4:	4a05      	ldr	r2, [pc, #20]	@ (800eedc <VL53L0X_RdDWord+0x74>)
 800eec6:	78d2      	ldrb	r2, [r2, #3]
 800eec8:	441a      	add	r2, r3
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 800eece:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800eed2:	4618      	mov	r0, r3
 800eed4:	3718      	adds	r7, #24
 800eed6:	46bd      	mov	sp, r7
 800eed8:	bd80      	pop	{r7, pc}
 800eeda:	bf00      	nop
 800eedc:	2000c56c 	.word	0x2000c56c

0800eee0 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 800eee0:	b580      	push	{r7, lr}
 800eee2:	b084      	sub	sp, #16
 800eee4:	af00      	add	r7, sp, #0
 800eee6:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800eee8:	2300      	movs	r3, #0
 800eeea:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800eeec:	2002      	movs	r0, #2
 800eeee:	f7f5 fc63 	bl	80047b8 <HAL_Delay>
    return status;
 800eef2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800eef6:	4618      	mov	r0, r3
 800eef8:	3710      	adds	r7, #16
 800eefa:	46bd      	mov	sp, r7
 800eefc:	bd80      	pop	{r7, pc}
	...

0800ef00 <fourline_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool fourline_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 800ef00:	b580      	push	{r7, lr}
 800ef02:	b082      	sub	sp, #8
 800ef04:	af00      	add	r7, sp, #0
 800ef06:	6078      	str	r0, [r7, #4]
 800ef08:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_fourline_activations_map, 1, params)) {
 800ef0a:	683a      	ldr	r2, [r7, #0]
 800ef0c:	2101      	movs	r1, #1
 800ef0e:	4850      	ldr	r0, [pc, #320]	@ (800f050 <fourline_configure_activations+0x150>)
 800ef10:	f000 fbea 	bl	800f6e8 <ai_platform_get_activations_map>
 800ef14:	4603      	mov	r3, r0
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	f000 8090 	beq.w	800f03c <fourline_configure_activations+0x13c>
    /* Updating activations (byte) offsets */
    
    input_0_output_array.data = AI_PTR(g_fourline_activations_map[0] + 48);
 800ef1c:	4b4c      	ldr	r3, [pc, #304]	@ (800f050 <fourline_configure_activations+0x150>)
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	3330      	adds	r3, #48	@ 0x30
 800ef22:	4a4c      	ldr	r2, [pc, #304]	@ (800f054 <fourline_configure_activations+0x154>)
 800ef24:	6093      	str	r3, [r2, #8]
    input_0_output_array.data_start = AI_PTR(g_fourline_activations_map[0] + 48);
 800ef26:	4b4a      	ldr	r3, [pc, #296]	@ (800f050 <fourline_configure_activations+0x150>)
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	3330      	adds	r3, #48	@ 0x30
 800ef2c:	4a49      	ldr	r2, [pc, #292]	@ (800f054 <fourline_configure_activations+0x154>)
 800ef2e:	60d3      	str	r3, [r2, #12]
    
    conv2d_1_conv2d_output_array.data = AI_PTR(g_fourline_activations_map[0] + 256);
 800ef30:	4b47      	ldr	r3, [pc, #284]	@ (800f050 <fourline_configure_activations+0x150>)
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800ef38:	4a47      	ldr	r2, [pc, #284]	@ (800f058 <fourline_configure_activations+0x158>)
 800ef3a:	6093      	str	r3, [r2, #8]
    conv2d_1_conv2d_output_array.data_start = AI_PTR(g_fourline_activations_map[0] + 256);
 800ef3c:	4b44      	ldr	r3, [pc, #272]	@ (800f050 <fourline_configure_activations+0x150>)
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800ef44:	4a44      	ldr	r2, [pc, #272]	@ (800f058 <fourline_configure_activations+0x158>)
 800ef46:	60d3      	str	r3, [r2, #12]
    
    conv2d_1_output_array.data = AI_PTR(g_fourline_activations_map[0] + 256);
 800ef48:	4b41      	ldr	r3, [pc, #260]	@ (800f050 <fourline_configure_activations+0x150>)
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800ef50:	4a42      	ldr	r2, [pc, #264]	@ (800f05c <fourline_configure_activations+0x15c>)
 800ef52:	6093      	str	r3, [r2, #8]
    conv2d_1_output_array.data_start = AI_PTR(g_fourline_activations_map[0] + 256);
 800ef54:	4b3e      	ldr	r3, [pc, #248]	@ (800f050 <fourline_configure_activations+0x150>)
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800ef5c:	4a3f      	ldr	r2, [pc, #252]	@ (800f05c <fourline_configure_activations+0x15c>)
 800ef5e:	60d3      	str	r3, [r2, #12]
    
    dense_6_dense_output_array.data = AI_PTR(g_fourline_activations_map[0] + 0);
 800ef60:	4b3b      	ldr	r3, [pc, #236]	@ (800f050 <fourline_configure_activations+0x150>)
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	4a3e      	ldr	r2, [pc, #248]	@ (800f060 <fourline_configure_activations+0x160>)
 800ef66:	6093      	str	r3, [r2, #8]
    dense_6_dense_output_array.data_start = AI_PTR(g_fourline_activations_map[0] + 0);
 800ef68:	4b39      	ldr	r3, [pc, #228]	@ (800f050 <fourline_configure_activations+0x150>)
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	4a3c      	ldr	r2, [pc, #240]	@ (800f060 <fourline_configure_activations+0x160>)
 800ef6e:	60d3      	str	r3, [r2, #12]
    
    dense_6_output_array.data = AI_PTR(g_fourline_activations_map[0] + 256);
 800ef70:	4b37      	ldr	r3, [pc, #220]	@ (800f050 <fourline_configure_activations+0x150>)
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800ef78:	4a3a      	ldr	r2, [pc, #232]	@ (800f064 <fourline_configure_activations+0x164>)
 800ef7a:	6093      	str	r3, [r2, #8]
    dense_6_output_array.data_start = AI_PTR(g_fourline_activations_map[0] + 256);
 800ef7c:	4b34      	ldr	r3, [pc, #208]	@ (800f050 <fourline_configure_activations+0x150>)
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800ef84:	4a37      	ldr	r2, [pc, #220]	@ (800f064 <fourline_configure_activations+0x164>)
 800ef86:	60d3      	str	r3, [r2, #12]
    
    dense_7_dense_output_array.data = AI_PTR(g_fourline_activations_map[0] + 0);
 800ef88:	4b31      	ldr	r3, [pc, #196]	@ (800f050 <fourline_configure_activations+0x150>)
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	4a36      	ldr	r2, [pc, #216]	@ (800f068 <fourline_configure_activations+0x168>)
 800ef8e:	6093      	str	r3, [r2, #8]
    dense_7_dense_output_array.data_start = AI_PTR(g_fourline_activations_map[0] + 0);
 800ef90:	4b2f      	ldr	r3, [pc, #188]	@ (800f050 <fourline_configure_activations+0x150>)
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	4a34      	ldr	r2, [pc, #208]	@ (800f068 <fourline_configure_activations+0x168>)
 800ef96:	60d3      	str	r3, [r2, #12]
    
    dense_7_output_array.data = AI_PTR(g_fourline_activations_map[0] + 256);
 800ef98:	4b2d      	ldr	r3, [pc, #180]	@ (800f050 <fourline_configure_activations+0x150>)
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800efa0:	4a32      	ldr	r2, [pc, #200]	@ (800f06c <fourline_configure_activations+0x16c>)
 800efa2:	6093      	str	r3, [r2, #8]
    dense_7_output_array.data_start = AI_PTR(g_fourline_activations_map[0] + 256);
 800efa4:	4b2a      	ldr	r3, [pc, #168]	@ (800f050 <fourline_configure_activations+0x150>)
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800efac:	4a2f      	ldr	r2, [pc, #188]	@ (800f06c <fourline_configure_activations+0x16c>)
 800efae:	60d3      	str	r3, [r2, #12]
    
    dense_8_dense_output_array.data = AI_PTR(g_fourline_activations_map[0] + 0);
 800efb0:	4b27      	ldr	r3, [pc, #156]	@ (800f050 <fourline_configure_activations+0x150>)
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	4a2e      	ldr	r2, [pc, #184]	@ (800f070 <fourline_configure_activations+0x170>)
 800efb6:	6093      	str	r3, [r2, #8]
    dense_8_dense_output_array.data_start = AI_PTR(g_fourline_activations_map[0] + 0);
 800efb8:	4b25      	ldr	r3, [pc, #148]	@ (800f050 <fourline_configure_activations+0x150>)
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	4a2c      	ldr	r2, [pc, #176]	@ (800f070 <fourline_configure_activations+0x170>)
 800efbe:	60d3      	str	r3, [r2, #12]
    
    dense_8_output_array.data = AI_PTR(g_fourline_activations_map[0] + 256);
 800efc0:	4b23      	ldr	r3, [pc, #140]	@ (800f050 <fourline_configure_activations+0x150>)
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800efc8:	4a2a      	ldr	r2, [pc, #168]	@ (800f074 <fourline_configure_activations+0x174>)
 800efca:	6093      	str	r3, [r2, #8]
    dense_8_output_array.data_start = AI_PTR(g_fourline_activations_map[0] + 256);
 800efcc:	4b20      	ldr	r3, [pc, #128]	@ (800f050 <fourline_configure_activations+0x150>)
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800efd4:	4a27      	ldr	r2, [pc, #156]	@ (800f074 <fourline_configure_activations+0x174>)
 800efd6:	60d3      	str	r3, [r2, #12]
    
    dense_9_dense_output_array.data = AI_PTR(g_fourline_activations_map[0] + 0);
 800efd8:	4b1d      	ldr	r3, [pc, #116]	@ (800f050 <fourline_configure_activations+0x150>)
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	4a26      	ldr	r2, [pc, #152]	@ (800f078 <fourline_configure_activations+0x178>)
 800efde:	6093      	str	r3, [r2, #8]
    dense_9_dense_output_array.data_start = AI_PTR(g_fourline_activations_map[0] + 0);
 800efe0:	4b1b      	ldr	r3, [pc, #108]	@ (800f050 <fourline_configure_activations+0x150>)
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	4a24      	ldr	r2, [pc, #144]	@ (800f078 <fourline_configure_activations+0x178>)
 800efe6:	60d3      	str	r3, [r2, #12]
    
    dense_9_output_array.data = AI_PTR(g_fourline_activations_map[0] + 256);
 800efe8:	4b19      	ldr	r3, [pc, #100]	@ (800f050 <fourline_configure_activations+0x150>)
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800eff0:	4a22      	ldr	r2, [pc, #136]	@ (800f07c <fourline_configure_activations+0x17c>)
 800eff2:	6093      	str	r3, [r2, #8]
    dense_9_output_array.data_start = AI_PTR(g_fourline_activations_map[0] + 256);
 800eff4:	4b16      	ldr	r3, [pc, #88]	@ (800f050 <fourline_configure_activations+0x150>)
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800effc:	4a1f      	ldr	r2, [pc, #124]	@ (800f07c <fourline_configure_activations+0x17c>)
 800effe:	60d3      	str	r3, [r2, #12]
    
    dense_10_dense_output_array.data = AI_PTR(g_fourline_activations_map[0] + 0);
 800f000:	4b13      	ldr	r3, [pc, #76]	@ (800f050 <fourline_configure_activations+0x150>)
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	4a1e      	ldr	r2, [pc, #120]	@ (800f080 <fourline_configure_activations+0x180>)
 800f006:	6093      	str	r3, [r2, #8]
    dense_10_dense_output_array.data_start = AI_PTR(g_fourline_activations_map[0] + 0);
 800f008:	4b11      	ldr	r3, [pc, #68]	@ (800f050 <fourline_configure_activations+0x150>)
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	4a1c      	ldr	r2, [pc, #112]	@ (800f080 <fourline_configure_activations+0x180>)
 800f00e:	60d3      	str	r3, [r2, #12]
    
    dense_10_output_array.data = AI_PTR(g_fourline_activations_map[0] + 256);
 800f010:	4b0f      	ldr	r3, [pc, #60]	@ (800f050 <fourline_configure_activations+0x150>)
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800f018:	4a1a      	ldr	r2, [pc, #104]	@ (800f084 <fourline_configure_activations+0x184>)
 800f01a:	6093      	str	r3, [r2, #8]
    dense_10_output_array.data_start = AI_PTR(g_fourline_activations_map[0] + 256);
 800f01c:	4b0c      	ldr	r3, [pc, #48]	@ (800f050 <fourline_configure_activations+0x150>)
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800f024:	4a17      	ldr	r2, [pc, #92]	@ (800f084 <fourline_configure_activations+0x184>)
 800f026:	60d3      	str	r3, [r2, #12]
    
    dense_11_dense_output_array.data = AI_PTR(g_fourline_activations_map[0] + 0);
 800f028:	4b09      	ldr	r3, [pc, #36]	@ (800f050 <fourline_configure_activations+0x150>)
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	4a16      	ldr	r2, [pc, #88]	@ (800f088 <fourline_configure_activations+0x188>)
 800f02e:	6093      	str	r3, [r2, #8]
    dense_11_dense_output_array.data_start = AI_PTR(g_fourline_activations_map[0] + 0);
 800f030:	4b07      	ldr	r3, [pc, #28]	@ (800f050 <fourline_configure_activations+0x150>)
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	4a14      	ldr	r2, [pc, #80]	@ (800f088 <fourline_configure_activations+0x188>)
 800f036:	60d3      	str	r3, [r2, #12]
    
    return true;
 800f038:	2301      	movs	r3, #1
 800f03a:	e005      	b.n	800f048 <fourline_configure_activations+0x148>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 800f03c:	2213      	movs	r2, #19
 800f03e:	2130      	movs	r1, #48	@ 0x30
 800f040:	6878      	ldr	r0, [r7, #4]
 800f042:	f000 fccf 	bl	800f9e4 <ai_platform_network_set_error>
  return false;
 800f046:	2300      	movs	r3, #0
}
 800f048:	4618      	mov	r0, r3
 800f04a:	3708      	adds	r7, #8
 800f04c:	46bd      	mov	sp, r7
 800f04e:	bd80      	pop	{r7, pc}
 800f050:	2000c5ac 	.word	0x2000c5ac
 800f054:	2000069c 	.word	0x2000069c
 800f058:	200006ac 	.word	0x200006ac
 800f05c:	200006bc 	.word	0x200006bc
 800f060:	200006cc 	.word	0x200006cc
 800f064:	200006dc 	.word	0x200006dc
 800f068:	200006ec 	.word	0x200006ec
 800f06c:	200006fc 	.word	0x200006fc
 800f070:	2000070c 	.word	0x2000070c
 800f074:	2000071c 	.word	0x2000071c
 800f078:	2000072c 	.word	0x2000072c
 800f07c:	2000073c 	.word	0x2000073c
 800f080:	2000074c 	.word	0x2000074c
 800f084:	2000075c 	.word	0x2000075c
 800f088:	2000076c 	.word	0x2000076c

0800f08c <fourline_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool fourline_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 800f08c:	b580      	push	{r7, lr}
 800f08e:	b082      	sub	sp, #8
 800f090:	af00      	add	r7, sp, #0
 800f092:	6078      	str	r0, [r7, #4]
 800f094:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_fourline_weights_map, 1, params)) {
 800f096:	683a      	ldr	r2, [r7, #0]
 800f098:	2101      	movs	r1, #1
 800f09a:	4884      	ldr	r0, [pc, #528]	@ (800f2ac <fourline_configure_weights+0x220>)
 800f09c:	f000 facc 	bl	800f638 <ai_platform_get_weights_map>
 800f0a0:	4603      	mov	r3, r0
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	f000 80f8 	beq.w	800f298 <fourline_configure_weights+0x20c>
    /* Updating weights (byte) offsets */
    
    conv2d_1_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 800f0a8:	4b81      	ldr	r3, [pc, #516]	@ (800f2b0 <fourline_configure_weights+0x224>)
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f0b0:	4a7f      	ldr	r2, [pc, #508]	@ (800f2b0 <fourline_configure_weights+0x224>)
 800f0b2:	6013      	str	r3, [r2, #0]
    conv2d_1_conv2d_bias_array.data = AI_PTR(g_fourline_weights_map[0] + 0);
 800f0b4:	4b7d      	ldr	r3, [pc, #500]	@ (800f2ac <fourline_configure_weights+0x220>)
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	4a7d      	ldr	r2, [pc, #500]	@ (800f2b0 <fourline_configure_weights+0x224>)
 800f0ba:	6093      	str	r3, [r2, #8]
    conv2d_1_conv2d_bias_array.data_start = AI_PTR(g_fourline_weights_map[0] + 0);
 800f0bc:	4b7b      	ldr	r3, [pc, #492]	@ (800f2ac <fourline_configure_weights+0x220>)
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	4a7b      	ldr	r2, [pc, #492]	@ (800f2b0 <fourline_configure_weights+0x224>)
 800f0c2:	60d3      	str	r3, [r2, #12]
    
    dense_6_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800f0c4:	4b7b      	ldr	r3, [pc, #492]	@ (800f2b4 <fourline_configure_weights+0x228>)
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f0cc:	4a79      	ldr	r2, [pc, #484]	@ (800f2b4 <fourline_configure_weights+0x228>)
 800f0ce:	6013      	str	r3, [r2, #0]
    dense_6_dense_weights_array.data = AI_PTR(g_fourline_weights_map[0] + 64);
 800f0d0:	4b76      	ldr	r3, [pc, #472]	@ (800f2ac <fourline_configure_weights+0x220>)
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	3340      	adds	r3, #64	@ 0x40
 800f0d6:	4a77      	ldr	r2, [pc, #476]	@ (800f2b4 <fourline_configure_weights+0x228>)
 800f0d8:	6093      	str	r3, [r2, #8]
    dense_6_dense_weights_array.data_start = AI_PTR(g_fourline_weights_map[0] + 64);
 800f0da:	4b74      	ldr	r3, [pc, #464]	@ (800f2ac <fourline_configure_weights+0x220>)
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	3340      	adds	r3, #64	@ 0x40
 800f0e0:	4a74      	ldr	r2, [pc, #464]	@ (800f2b4 <fourline_configure_weights+0x228>)
 800f0e2:	60d3      	str	r3, [r2, #12]
    
    dense_6_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800f0e4:	4b74      	ldr	r3, [pc, #464]	@ (800f2b8 <fourline_configure_weights+0x22c>)
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f0ec:	4a72      	ldr	r2, [pc, #456]	@ (800f2b8 <fourline_configure_weights+0x22c>)
 800f0ee:	6013      	str	r3, [r2, #0]
    dense_6_dense_bias_array.data = AI_PTR(g_fourline_weights_map[0] + 213056);
 800f0f0:	4b6e      	ldr	r3, [pc, #440]	@ (800f2ac <fourline_configure_weights+0x220>)
 800f0f2:	681a      	ldr	r2, [r3, #0]
 800f0f4:	4b71      	ldr	r3, [pc, #452]	@ (800f2bc <fourline_configure_weights+0x230>)
 800f0f6:	4413      	add	r3, r2
 800f0f8:	4a6f      	ldr	r2, [pc, #444]	@ (800f2b8 <fourline_configure_weights+0x22c>)
 800f0fa:	6093      	str	r3, [r2, #8]
    dense_6_dense_bias_array.data_start = AI_PTR(g_fourline_weights_map[0] + 213056);
 800f0fc:	4b6b      	ldr	r3, [pc, #428]	@ (800f2ac <fourline_configure_weights+0x220>)
 800f0fe:	681a      	ldr	r2, [r3, #0]
 800f100:	4b6e      	ldr	r3, [pc, #440]	@ (800f2bc <fourline_configure_weights+0x230>)
 800f102:	4413      	add	r3, r2
 800f104:	4a6c      	ldr	r2, [pc, #432]	@ (800f2b8 <fourline_configure_weights+0x22c>)
 800f106:	60d3      	str	r3, [r2, #12]
    
    dense_7_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800f108:	4b6d      	ldr	r3, [pc, #436]	@ (800f2c0 <fourline_configure_weights+0x234>)
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f110:	4a6b      	ldr	r2, [pc, #428]	@ (800f2c0 <fourline_configure_weights+0x234>)
 800f112:	6013      	str	r3, [r2, #0]
    dense_7_dense_weights_array.data = AI_PTR(g_fourline_weights_map[0] + 213312);
 800f114:	4b65      	ldr	r3, [pc, #404]	@ (800f2ac <fourline_configure_weights+0x220>)
 800f116:	681a      	ldr	r2, [r3, #0]
 800f118:	4b6a      	ldr	r3, [pc, #424]	@ (800f2c4 <fourline_configure_weights+0x238>)
 800f11a:	4413      	add	r3, r2
 800f11c:	4a68      	ldr	r2, [pc, #416]	@ (800f2c0 <fourline_configure_weights+0x234>)
 800f11e:	6093      	str	r3, [r2, #8]
    dense_7_dense_weights_array.data_start = AI_PTR(g_fourline_weights_map[0] + 213312);
 800f120:	4b62      	ldr	r3, [pc, #392]	@ (800f2ac <fourline_configure_weights+0x220>)
 800f122:	681a      	ldr	r2, [r3, #0]
 800f124:	4b67      	ldr	r3, [pc, #412]	@ (800f2c4 <fourline_configure_weights+0x238>)
 800f126:	4413      	add	r3, r2
 800f128:	4a65      	ldr	r2, [pc, #404]	@ (800f2c0 <fourline_configure_weights+0x234>)
 800f12a:	60d3      	str	r3, [r2, #12]
    
    dense_7_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800f12c:	4b66      	ldr	r3, [pc, #408]	@ (800f2c8 <fourline_configure_weights+0x23c>)
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f134:	4a64      	ldr	r2, [pc, #400]	@ (800f2c8 <fourline_configure_weights+0x23c>)
 800f136:	6013      	str	r3, [r2, #0]
    dense_7_dense_bias_array.data = AI_PTR(g_fourline_weights_map[0] + 229696);
 800f138:	4b5c      	ldr	r3, [pc, #368]	@ (800f2ac <fourline_configure_weights+0x220>)
 800f13a:	681a      	ldr	r2, [r3, #0]
 800f13c:	4b63      	ldr	r3, [pc, #396]	@ (800f2cc <fourline_configure_weights+0x240>)
 800f13e:	4413      	add	r3, r2
 800f140:	4a61      	ldr	r2, [pc, #388]	@ (800f2c8 <fourline_configure_weights+0x23c>)
 800f142:	6093      	str	r3, [r2, #8]
    dense_7_dense_bias_array.data_start = AI_PTR(g_fourline_weights_map[0] + 229696);
 800f144:	4b59      	ldr	r3, [pc, #356]	@ (800f2ac <fourline_configure_weights+0x220>)
 800f146:	681a      	ldr	r2, [r3, #0]
 800f148:	4b60      	ldr	r3, [pc, #384]	@ (800f2cc <fourline_configure_weights+0x240>)
 800f14a:	4413      	add	r3, r2
 800f14c:	4a5e      	ldr	r2, [pc, #376]	@ (800f2c8 <fourline_configure_weights+0x23c>)
 800f14e:	60d3      	str	r3, [r2, #12]
    
    dense_8_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800f150:	4b5f      	ldr	r3, [pc, #380]	@ (800f2d0 <fourline_configure_weights+0x244>)
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f158:	4a5d      	ldr	r2, [pc, #372]	@ (800f2d0 <fourline_configure_weights+0x244>)
 800f15a:	6013      	str	r3, [r2, #0]
    dense_8_dense_weights_array.data = AI_PTR(g_fourline_weights_map[0] + 229952);
 800f15c:	4b53      	ldr	r3, [pc, #332]	@ (800f2ac <fourline_configure_weights+0x220>)
 800f15e:	681a      	ldr	r2, [r3, #0]
 800f160:	4b5c      	ldr	r3, [pc, #368]	@ (800f2d4 <fourline_configure_weights+0x248>)
 800f162:	4413      	add	r3, r2
 800f164:	4a5a      	ldr	r2, [pc, #360]	@ (800f2d0 <fourline_configure_weights+0x244>)
 800f166:	6093      	str	r3, [r2, #8]
    dense_8_dense_weights_array.data_start = AI_PTR(g_fourline_weights_map[0] + 229952);
 800f168:	4b50      	ldr	r3, [pc, #320]	@ (800f2ac <fourline_configure_weights+0x220>)
 800f16a:	681a      	ldr	r2, [r3, #0]
 800f16c:	4b59      	ldr	r3, [pc, #356]	@ (800f2d4 <fourline_configure_weights+0x248>)
 800f16e:	4413      	add	r3, r2
 800f170:	4a57      	ldr	r2, [pc, #348]	@ (800f2d0 <fourline_configure_weights+0x244>)
 800f172:	60d3      	str	r3, [r2, #12]
    
    dense_8_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800f174:	4b58      	ldr	r3, [pc, #352]	@ (800f2d8 <fourline_configure_weights+0x24c>)
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f17c:	4a56      	ldr	r2, [pc, #344]	@ (800f2d8 <fourline_configure_weights+0x24c>)
 800f17e:	6013      	str	r3, [r2, #0]
    dense_8_dense_bias_array.data = AI_PTR(g_fourline_weights_map[0] + 246336);
 800f180:	4b4a      	ldr	r3, [pc, #296]	@ (800f2ac <fourline_configure_weights+0x220>)
 800f182:	681a      	ldr	r2, [r3, #0]
 800f184:	4b55      	ldr	r3, [pc, #340]	@ (800f2dc <fourline_configure_weights+0x250>)
 800f186:	4413      	add	r3, r2
 800f188:	4a53      	ldr	r2, [pc, #332]	@ (800f2d8 <fourline_configure_weights+0x24c>)
 800f18a:	6093      	str	r3, [r2, #8]
    dense_8_dense_bias_array.data_start = AI_PTR(g_fourline_weights_map[0] + 246336);
 800f18c:	4b47      	ldr	r3, [pc, #284]	@ (800f2ac <fourline_configure_weights+0x220>)
 800f18e:	681a      	ldr	r2, [r3, #0]
 800f190:	4b52      	ldr	r3, [pc, #328]	@ (800f2dc <fourline_configure_weights+0x250>)
 800f192:	4413      	add	r3, r2
 800f194:	4a50      	ldr	r2, [pc, #320]	@ (800f2d8 <fourline_configure_weights+0x24c>)
 800f196:	60d3      	str	r3, [r2, #12]
    
    dense_9_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800f198:	4b51      	ldr	r3, [pc, #324]	@ (800f2e0 <fourline_configure_weights+0x254>)
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f1a0:	4a4f      	ldr	r2, [pc, #316]	@ (800f2e0 <fourline_configure_weights+0x254>)
 800f1a2:	6013      	str	r3, [r2, #0]
    dense_9_dense_weights_array.data = AI_PTR(g_fourline_weights_map[0] + 246592);
 800f1a4:	4b41      	ldr	r3, [pc, #260]	@ (800f2ac <fourline_configure_weights+0x220>)
 800f1a6:	681a      	ldr	r2, [r3, #0]
 800f1a8:	4b4e      	ldr	r3, [pc, #312]	@ (800f2e4 <fourline_configure_weights+0x258>)
 800f1aa:	4413      	add	r3, r2
 800f1ac:	4a4c      	ldr	r2, [pc, #304]	@ (800f2e0 <fourline_configure_weights+0x254>)
 800f1ae:	6093      	str	r3, [r2, #8]
    dense_9_dense_weights_array.data_start = AI_PTR(g_fourline_weights_map[0] + 246592);
 800f1b0:	4b3e      	ldr	r3, [pc, #248]	@ (800f2ac <fourline_configure_weights+0x220>)
 800f1b2:	681a      	ldr	r2, [r3, #0]
 800f1b4:	4b4b      	ldr	r3, [pc, #300]	@ (800f2e4 <fourline_configure_weights+0x258>)
 800f1b6:	4413      	add	r3, r2
 800f1b8:	4a49      	ldr	r2, [pc, #292]	@ (800f2e0 <fourline_configure_weights+0x254>)
 800f1ba:	60d3      	str	r3, [r2, #12]
    
    dense_9_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800f1bc:	4b4a      	ldr	r3, [pc, #296]	@ (800f2e8 <fourline_configure_weights+0x25c>)
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f1c4:	4a48      	ldr	r2, [pc, #288]	@ (800f2e8 <fourline_configure_weights+0x25c>)
 800f1c6:	6013      	str	r3, [r2, #0]
    dense_9_dense_bias_array.data = AI_PTR(g_fourline_weights_map[0] + 262976);
 800f1c8:	4b38      	ldr	r3, [pc, #224]	@ (800f2ac <fourline_configure_weights+0x220>)
 800f1ca:	681a      	ldr	r2, [r3, #0]
 800f1cc:	4b47      	ldr	r3, [pc, #284]	@ (800f2ec <fourline_configure_weights+0x260>)
 800f1ce:	4413      	add	r3, r2
 800f1d0:	4a45      	ldr	r2, [pc, #276]	@ (800f2e8 <fourline_configure_weights+0x25c>)
 800f1d2:	6093      	str	r3, [r2, #8]
    dense_9_dense_bias_array.data_start = AI_PTR(g_fourline_weights_map[0] + 262976);
 800f1d4:	4b35      	ldr	r3, [pc, #212]	@ (800f2ac <fourline_configure_weights+0x220>)
 800f1d6:	681a      	ldr	r2, [r3, #0]
 800f1d8:	4b44      	ldr	r3, [pc, #272]	@ (800f2ec <fourline_configure_weights+0x260>)
 800f1da:	4413      	add	r3, r2
 800f1dc:	4a42      	ldr	r2, [pc, #264]	@ (800f2e8 <fourline_configure_weights+0x25c>)
 800f1de:	60d3      	str	r3, [r2, #12]
    
    dense_10_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800f1e0:	4b43      	ldr	r3, [pc, #268]	@ (800f2f0 <fourline_configure_weights+0x264>)
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f1e8:	4a41      	ldr	r2, [pc, #260]	@ (800f2f0 <fourline_configure_weights+0x264>)
 800f1ea:	6013      	str	r3, [r2, #0]
    dense_10_dense_weights_array.data = AI_PTR(g_fourline_weights_map[0] + 263232);
 800f1ec:	4b2f      	ldr	r3, [pc, #188]	@ (800f2ac <fourline_configure_weights+0x220>)
 800f1ee:	681a      	ldr	r2, [r3, #0]
 800f1f0:	4b40      	ldr	r3, [pc, #256]	@ (800f2f4 <fourline_configure_weights+0x268>)
 800f1f2:	4413      	add	r3, r2
 800f1f4:	4a3e      	ldr	r2, [pc, #248]	@ (800f2f0 <fourline_configure_weights+0x264>)
 800f1f6:	6093      	str	r3, [r2, #8]
    dense_10_dense_weights_array.data_start = AI_PTR(g_fourline_weights_map[0] + 263232);
 800f1f8:	4b2c      	ldr	r3, [pc, #176]	@ (800f2ac <fourline_configure_weights+0x220>)
 800f1fa:	681a      	ldr	r2, [r3, #0]
 800f1fc:	4b3d      	ldr	r3, [pc, #244]	@ (800f2f4 <fourline_configure_weights+0x268>)
 800f1fe:	4413      	add	r3, r2
 800f200:	4a3b      	ldr	r2, [pc, #236]	@ (800f2f0 <fourline_configure_weights+0x264>)
 800f202:	60d3      	str	r3, [r2, #12]
    
    dense_10_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800f204:	4b3c      	ldr	r3, [pc, #240]	@ (800f2f8 <fourline_configure_weights+0x26c>)
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f20c:	4a3a      	ldr	r2, [pc, #232]	@ (800f2f8 <fourline_configure_weights+0x26c>)
 800f20e:	6013      	str	r3, [r2, #0]
    dense_10_dense_bias_array.data = AI_PTR(g_fourline_weights_map[0] + 279616);
 800f210:	4b26      	ldr	r3, [pc, #152]	@ (800f2ac <fourline_configure_weights+0x220>)
 800f212:	681a      	ldr	r2, [r3, #0]
 800f214:	4b39      	ldr	r3, [pc, #228]	@ (800f2fc <fourline_configure_weights+0x270>)
 800f216:	4413      	add	r3, r2
 800f218:	4a37      	ldr	r2, [pc, #220]	@ (800f2f8 <fourline_configure_weights+0x26c>)
 800f21a:	6093      	str	r3, [r2, #8]
    dense_10_dense_bias_array.data_start = AI_PTR(g_fourline_weights_map[0] + 279616);
 800f21c:	4b23      	ldr	r3, [pc, #140]	@ (800f2ac <fourline_configure_weights+0x220>)
 800f21e:	681a      	ldr	r2, [r3, #0]
 800f220:	4b36      	ldr	r3, [pc, #216]	@ (800f2fc <fourline_configure_weights+0x270>)
 800f222:	4413      	add	r3, r2
 800f224:	4a34      	ldr	r2, [pc, #208]	@ (800f2f8 <fourline_configure_weights+0x26c>)
 800f226:	60d3      	str	r3, [r2, #12]
    
    dense_11_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800f228:	4b35      	ldr	r3, [pc, #212]	@ (800f300 <fourline_configure_weights+0x274>)
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f230:	4a33      	ldr	r2, [pc, #204]	@ (800f300 <fourline_configure_weights+0x274>)
 800f232:	6013      	str	r3, [r2, #0]
    dense_11_dense_weights_array.data = AI_PTR(g_fourline_weights_map[0] + 279872);
 800f234:	4b1d      	ldr	r3, [pc, #116]	@ (800f2ac <fourline_configure_weights+0x220>)
 800f236:	681a      	ldr	r2, [r3, #0]
 800f238:	4b32      	ldr	r3, [pc, #200]	@ (800f304 <fourline_configure_weights+0x278>)
 800f23a:	4413      	add	r3, r2
 800f23c:	4a30      	ldr	r2, [pc, #192]	@ (800f300 <fourline_configure_weights+0x274>)
 800f23e:	6093      	str	r3, [r2, #8]
    dense_11_dense_weights_array.data_start = AI_PTR(g_fourline_weights_map[0] + 279872);
 800f240:	4b1a      	ldr	r3, [pc, #104]	@ (800f2ac <fourline_configure_weights+0x220>)
 800f242:	681a      	ldr	r2, [r3, #0]
 800f244:	4b2f      	ldr	r3, [pc, #188]	@ (800f304 <fourline_configure_weights+0x278>)
 800f246:	4413      	add	r3, r2
 800f248:	4a2d      	ldr	r2, [pc, #180]	@ (800f300 <fourline_configure_weights+0x274>)
 800f24a:	60d3      	str	r3, [r2, #12]
    
    dense_11_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800f24c:	4b2e      	ldr	r3, [pc, #184]	@ (800f308 <fourline_configure_weights+0x27c>)
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f254:	4a2c      	ldr	r2, [pc, #176]	@ (800f308 <fourline_configure_weights+0x27c>)
 800f256:	6013      	str	r3, [r2, #0]
    dense_11_dense_bias_array.data = AI_PTR(g_fourline_weights_map[0] + 280896);
 800f258:	4b14      	ldr	r3, [pc, #80]	@ (800f2ac <fourline_configure_weights+0x220>)
 800f25a:	681a      	ldr	r2, [r3, #0]
 800f25c:	4b2b      	ldr	r3, [pc, #172]	@ (800f30c <fourline_configure_weights+0x280>)
 800f25e:	4413      	add	r3, r2
 800f260:	4a29      	ldr	r2, [pc, #164]	@ (800f308 <fourline_configure_weights+0x27c>)
 800f262:	6093      	str	r3, [r2, #8]
    dense_11_dense_bias_array.data_start = AI_PTR(g_fourline_weights_map[0] + 280896);
 800f264:	4b11      	ldr	r3, [pc, #68]	@ (800f2ac <fourline_configure_weights+0x220>)
 800f266:	681a      	ldr	r2, [r3, #0]
 800f268:	4b28      	ldr	r3, [pc, #160]	@ (800f30c <fourline_configure_weights+0x280>)
 800f26a:	4413      	add	r3, r2
 800f26c:	4a26      	ldr	r2, [pc, #152]	@ (800f308 <fourline_configure_weights+0x27c>)
 800f26e:	60d3      	str	r3, [r2, #12]
    
    conv2d_1_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 800f270:	4b27      	ldr	r3, [pc, #156]	@ (800f310 <fourline_configure_weights+0x284>)
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f278:	4a25      	ldr	r2, [pc, #148]	@ (800f310 <fourline_configure_weights+0x284>)
 800f27a:	6013      	str	r3, [r2, #0]
    conv2d_1_conv2d_weights_array.data = AI_PTR(g_fourline_weights_map[0] + 280912);
 800f27c:	4b0b      	ldr	r3, [pc, #44]	@ (800f2ac <fourline_configure_weights+0x220>)
 800f27e:	681a      	ldr	r2, [r3, #0]
 800f280:	4b24      	ldr	r3, [pc, #144]	@ (800f314 <fourline_configure_weights+0x288>)
 800f282:	4413      	add	r3, r2
 800f284:	4a22      	ldr	r2, [pc, #136]	@ (800f310 <fourline_configure_weights+0x284>)
 800f286:	6093      	str	r3, [r2, #8]
    conv2d_1_conv2d_weights_array.data_start = AI_PTR(g_fourline_weights_map[0] + 280912);
 800f288:	4b08      	ldr	r3, [pc, #32]	@ (800f2ac <fourline_configure_weights+0x220>)
 800f28a:	681a      	ldr	r2, [r3, #0]
 800f28c:	4b21      	ldr	r3, [pc, #132]	@ (800f314 <fourline_configure_weights+0x288>)
 800f28e:	4413      	add	r3, r2
 800f290:	4a1f      	ldr	r2, [pc, #124]	@ (800f310 <fourline_configure_weights+0x284>)
 800f292:	60d3      	str	r3, [r2, #12]
    
    return true;
 800f294:	2301      	movs	r3, #1
 800f296:	e005      	b.n	800f2a4 <fourline_configure_weights+0x218>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 800f298:	2212      	movs	r2, #18
 800f29a:	2130      	movs	r1, #48	@ 0x30
 800f29c:	6878      	ldr	r0, [r7, #4]
 800f29e:	f000 fba1 	bl	800f9e4 <ai_platform_network_set_error>
  return false;
 800f2a2:	2300      	movs	r3, #0
}
 800f2a4:	4618      	mov	r0, r3
 800f2a6:	3708      	adds	r7, #8
 800f2a8:	46bd      	mov	sp, r7
 800f2aa:	bd80      	pop	{r7, pc}
 800f2ac:	2000c5b0 	.word	0x2000c5b0
 800f2b0:	200005cc 	.word	0x200005cc
 800f2b4:	200005dc 	.word	0x200005dc
 800f2b8:	200005ec 	.word	0x200005ec
 800f2bc:	00034040 	.word	0x00034040
 800f2c0:	200005fc 	.word	0x200005fc
 800f2c4:	00034140 	.word	0x00034140
 800f2c8:	2000060c 	.word	0x2000060c
 800f2cc:	00038140 	.word	0x00038140
 800f2d0:	2000061c 	.word	0x2000061c
 800f2d4:	00038240 	.word	0x00038240
 800f2d8:	2000062c 	.word	0x2000062c
 800f2dc:	0003c240 	.word	0x0003c240
 800f2e0:	2000063c 	.word	0x2000063c
 800f2e4:	0003c340 	.word	0x0003c340
 800f2e8:	2000064c 	.word	0x2000064c
 800f2ec:	00040340 	.word	0x00040340
 800f2f0:	2000065c 	.word	0x2000065c
 800f2f4:	00040440 	.word	0x00040440
 800f2f8:	2000066c 	.word	0x2000066c
 800f2fc:	00044440 	.word	0x00044440
 800f300:	2000067c 	.word	0x2000067c
 800f304:	00044540 	.word	0x00044540
 800f308:	2000068c 	.word	0x2000068c
 800f30c:	00044940 	.word	0x00044940
 800f310:	2000077c 	.word	0x2000077c
 800f314:	00044950 	.word	0x00044950

0800f318 <ai_fourline_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_fourline_get_error(ai_handle network)
{
 800f318:	b580      	push	{r7, lr}
 800f31a:	b082      	sub	sp, #8
 800f31c:	af00      	add	r7, sp, #0
 800f31e:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 800f320:	6878      	ldr	r0, [r7, #4]
 800f322:	f000 fa53 	bl	800f7cc <ai_platform_network_get_error>
 800f326:	4603      	mov	r3, r0
}
 800f328:	4618      	mov	r0, r3
 800f32a:	3708      	adds	r7, #8
 800f32c:	46bd      	mov	sp, r7
 800f32e:	bd80      	pop	{r7, pc}

0800f330 <ai_fourline_create>:

AI_API_ENTRY
ai_error ai_fourline_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800f330:	b580      	push	{r7, lr}
 800f332:	b084      	sub	sp, #16
 800f334:	af02      	add	r7, sp, #8
 800f336:	6078      	str	r0, [r7, #4]
 800f338:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800f33a:	2300      	movs	r3, #0
 800f33c:	9301      	str	r3, [sp, #4]
 800f33e:	2305      	movs	r3, #5
 800f340:	9300      	str	r3, [sp, #0]
 800f342:	2301      	movs	r3, #1
 800f344:	4a04      	ldr	r2, [pc, #16]	@ (800f358 <ai_fourline_create+0x28>)
 800f346:	6839      	ldr	r1, [r7, #0]
 800f348:	6878      	ldr	r0, [r7, #4]
 800f34a:	f000 fe65 	bl	8010018 <ai_platform_network_create>
 800f34e:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800f350:	4618      	mov	r0, r3
 800f352:	3708      	adds	r7, #8
 800f354:	46bd      	mov	sp, r7
 800f356:	bd80      	pop	{r7, pc}
 800f358:	200013b8 	.word	0x200013b8

0800f35c <ai_fourline_create_and_init>:

AI_API_ENTRY
ai_error ai_fourline_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 800f35c:	b580      	push	{r7, lr}
 800f35e:	b096      	sub	sp, #88	@ 0x58
 800f360:	af00      	add	r7, sp, #0
 800f362:	60f8      	str	r0, [r7, #12]
 800f364:	60b9      	str	r1, [r7, #8]
 800f366:	607a      	str	r2, [r7, #4]
    ai_error err;
    ai_network_params params;

    err = ai_fourline_create(network, AI_FOURLINE_DATA_CONFIG);
 800f368:	2100      	movs	r1, #0
 800f36a:	68f8      	ldr	r0, [r7, #12]
 800f36c:	f7ff ffe0 	bl	800f330 <ai_fourline_create>
 800f370:	4603      	mov	r3, r0
 800f372:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (err.type != AI_ERROR_NONE)
 800f374:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d001      	beq.n	800f380 <ai_fourline_create_and_init+0x24>
        return err;
 800f37c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f37e:	e05d      	b.n	800f43c <ai_fourline_create_and_init+0xe0>
    if (ai_fourline_data_params_get(&params) != true) {
 800f380:	f107 0314 	add.w	r3, r7, #20
 800f384:	4618      	mov	r0, r3
 800f386:	f000 f8dd 	bl	800f544 <ai_fourline_data_params_get>
 800f38a:	4603      	mov	r3, r0
 800f38c:	f083 0301 	eor.w	r3, r3, #1
 800f390:	b2db      	uxtb	r3, r3
 800f392:	2b00      	cmp	r3, #0
 800f394:	d008      	beq.n	800f3a8 <ai_fourline_create_and_init+0x4c>
        err = ai_fourline_get_error(*network);
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	4618      	mov	r0, r3
 800f39c:	f7ff ffbc 	bl	800f318 <ai_fourline_get_error>
 800f3a0:	4603      	mov	r3, r0
 800f3a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
        return err;
 800f3a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f3a6:	e049      	b.n	800f43c <ai_fourline_create_and_init+0xe0>
    }
#if defined(AI_FOURLINE_DATA_ACTIVATIONS_COUNT)
    if (activations) {
 800f3a8:	68bb      	ldr	r3, [r7, #8]
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d016      	beq.n	800f3dc <ai_fourline_create_and_init+0x80>
        /* set the addresses of the activations buffers */
        for (int idx=0;idx<params.map_activations.size;idx++)
 800f3ae:	2300      	movs	r3, #0
 800f3b0:	657b      	str	r3, [r7, #84]	@ 0x54
 800f3b2:	e00e      	b.n	800f3d2 <ai_fourline_create_and_init+0x76>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 800f3b4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f3b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f3b8:	009b      	lsls	r3, r3, #2
 800f3ba:	68ba      	ldr	r2, [r7, #8]
 800f3bc:	4413      	add	r3, r2
 800f3be:	681a      	ldr	r2, [r3, #0]
 800f3c0:	f107 0314 	add.w	r3, r7, #20
 800f3c4:	330c      	adds	r3, #12
 800f3c6:	4618      	mov	r0, r3
 800f3c8:	f000 f922 	bl	800f610 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 800f3cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f3ce:	3301      	adds	r3, #1
 800f3d0:	657b      	str	r3, [r7, #84]	@ 0x54
 800f3d2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f3d4:	461a      	mov	r2, r3
 800f3d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f3d8:	4293      	cmp	r3, r2
 800f3da:	dbeb      	blt.n	800f3b4 <ai_fourline_create_and_init+0x58>
    }
#endif
#if defined(AI_FOURLINE_DATA_WEIGHTS_COUNT)
    if (weights) {
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d016      	beq.n	800f410 <ai_fourline_create_and_init+0xb4>
        /* set the addresses of the weight buffers */
        for (int idx=0;idx<params.map_weights.size;idx++)
 800f3e2:	2300      	movs	r3, #0
 800f3e4:	653b      	str	r3, [r7, #80]	@ 0x50
 800f3e6:	e00e      	b.n	800f406 <ai_fourline_create_and_init+0xaa>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 800f3e8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800f3ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f3ec:	009b      	lsls	r3, r3, #2
 800f3ee:	687a      	ldr	r2, [r7, #4]
 800f3f0:	4413      	add	r3, r2
 800f3f2:	681a      	ldr	r2, [r3, #0]
 800f3f4:	f107 0314 	add.w	r3, r7, #20
 800f3f8:	3304      	adds	r3, #4
 800f3fa:	4618      	mov	r0, r3
 800f3fc:	f000 f908 	bl	800f610 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 800f400:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f402:	3301      	adds	r3, #1
 800f404:	653b      	str	r3, [r7, #80]	@ 0x50
 800f406:	8b7b      	ldrh	r3, [r7, #26]
 800f408:	461a      	mov	r2, r3
 800f40a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f40c:	4293      	cmp	r3, r2
 800f40e:	dbeb      	blt.n	800f3e8 <ai_fourline_create_and_init+0x8c>
    }
#endif
    if (ai_fourline_init(*network, &params) != true) {
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	f107 0214 	add.w	r2, r7, #20
 800f418:	4611      	mov	r1, r2
 800f41a:	4618      	mov	r0, r3
 800f41c:	f000 f846 	bl	800f4ac <ai_fourline_init>
 800f420:	4603      	mov	r3, r0
 800f422:	f083 0301 	eor.w	r3, r3, #1
 800f426:	b2db      	uxtb	r3, r3
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d006      	beq.n	800f43a <ai_fourline_create_and_init+0xde>
        err = ai_fourline_get_error(*network);
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	4618      	mov	r0, r3
 800f432:	f7ff ff71 	bl	800f318 <ai_fourline_get_error>
 800f436:	4603      	mov	r3, r0
 800f438:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
    return err;
 800f43a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800f43c:	4618      	mov	r0, r3
 800f43e:	3758      	adds	r7, #88	@ 0x58
 800f440:	46bd      	mov	sp, r7
 800f442:	bd80      	pop	{r7, pc}

0800f444 <ai_fourline_inputs_get>:

AI_API_ENTRY
ai_buffer* ai_fourline_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800f444:	b580      	push	{r7, lr}
 800f446:	b082      	sub	sp, #8
 800f448:	af00      	add	r7, sp, #0
 800f44a:	6078      	str	r0, [r7, #4]
 800f44c:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	2b00      	cmp	r3, #0
 800f452:	d104      	bne.n	800f45e <ai_fourline_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800f454:	4b06      	ldr	r3, [pc, #24]	@ (800f470 <ai_fourline_inputs_get+0x2c>)
 800f456:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	4a06      	ldr	r2, [pc, #24]	@ (800f474 <ai_fourline_inputs_get+0x30>)
 800f45c:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 800f45e:	6839      	ldr	r1, [r7, #0]
 800f460:	6878      	ldr	r0, [r7, #4]
 800f462:	f000 fac5 	bl	800f9f0 <ai_platform_inputs_get>
 800f466:	4603      	mov	r3, r0
}
 800f468:	4618      	mov	r0, r3
 800f46a:	3708      	adds	r7, #8
 800f46c:	46bd      	mov	sp, r7
 800f46e:	bd80      	pop	{r7, pc}
 800f470:	200013b8 	.word	0x200013b8
 800f474:	a1c00100 	.word	0xa1c00100

0800f478 <ai_fourline_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_fourline_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800f478:	b580      	push	{r7, lr}
 800f47a:	b082      	sub	sp, #8
 800f47c:	af00      	add	r7, sp, #0
 800f47e:	6078      	str	r0, [r7, #4]
 800f480:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	2b00      	cmp	r3, #0
 800f486:	d104      	bne.n	800f492 <ai_fourline_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800f488:	4b06      	ldr	r3, [pc, #24]	@ (800f4a4 <ai_fourline_outputs_get+0x2c>)
 800f48a:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	4a06      	ldr	r2, [pc, #24]	@ (800f4a8 <ai_fourline_outputs_get+0x30>)
 800f490:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 800f492:	6839      	ldr	r1, [r7, #0]
 800f494:	6878      	ldr	r0, [r7, #4]
 800f496:	f000 fc37 	bl	800fd08 <ai_platform_outputs_get>
 800f49a:	4603      	mov	r3, r0
}
 800f49c:	4618      	mov	r0, r3
 800f49e:	3708      	adds	r7, #8
 800f4a0:	46bd      	mov	sp, r7
 800f4a2:	bd80      	pop	{r7, pc}
 800f4a4:	200013b8 	.word	0x200013b8
 800f4a8:	a1c00100 	.word	0xa1c00100

0800f4ac <ai_fourline_init>:
}

AI_API_ENTRY
ai_bool ai_fourline_init(
  ai_handle network, const ai_network_params* params)
{
 800f4ac:	b580      	push	{r7, lr}
 800f4ae:	b084      	sub	sp, #16
 800f4b0:	af00      	add	r7, sp, #0
 800f4b2:	6078      	str	r0, [r7, #4]
 800f4b4:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 800f4b6:	6839      	ldr	r1, [r7, #0]
 800f4b8:	6878      	ldr	r0, [r7, #4]
 800f4ba:	f000 ff87 	bl	80103cc <ai_platform_network_init>
 800f4be:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d101      	bne.n	800f4ca <ai_fourline_init+0x1e>
 800f4c6:	2300      	movs	r3, #0
 800f4c8:	e028      	b.n	800f51c <ai_fourline_init+0x70>

  ai_bool ok = true;
 800f4ca:	2301      	movs	r3, #1
 800f4cc:	72fb      	strb	r3, [r7, #11]
  ok &= fourline_configure_weights(net_ctx, params);
 800f4ce:	6839      	ldr	r1, [r7, #0]
 800f4d0:	68f8      	ldr	r0, [r7, #12]
 800f4d2:	f7ff fddb 	bl	800f08c <fourline_configure_weights>
 800f4d6:	4603      	mov	r3, r0
 800f4d8:	461a      	mov	r2, r3
 800f4da:	7afb      	ldrb	r3, [r7, #11]
 800f4dc:	4013      	ands	r3, r2
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	bf14      	ite	ne
 800f4e2:	2301      	movne	r3, #1
 800f4e4:	2300      	moveq	r3, #0
 800f4e6:	72fb      	strb	r3, [r7, #11]
  ok &= fourline_configure_activations(net_ctx, params);
 800f4e8:	6839      	ldr	r1, [r7, #0]
 800f4ea:	68f8      	ldr	r0, [r7, #12]
 800f4ec:	f7ff fd08 	bl	800ef00 <fourline_configure_activations>
 800f4f0:	4603      	mov	r3, r0
 800f4f2:	461a      	mov	r2, r3
 800f4f4:	7afb      	ldrb	r3, [r7, #11]
 800f4f6:	4013      	ands	r3, r2
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	bf14      	ite	ne
 800f4fc:	2301      	movne	r3, #1
 800f4fe:	2300      	moveq	r3, #0
 800f500:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 800f502:	6878      	ldr	r0, [r7, #4]
 800f504:	f001 f8fe 	bl	8010704 <ai_platform_network_post_init>
 800f508:	4603      	mov	r3, r0
 800f50a:	461a      	mov	r2, r3
 800f50c:	7afb      	ldrb	r3, [r7, #11]
 800f50e:	4013      	ands	r3, r2
 800f510:	2b00      	cmp	r3, #0
 800f512:	bf14      	ite	ne
 800f514:	2301      	movne	r3, #1
 800f516:	2300      	moveq	r3, #0
 800f518:	72fb      	strb	r3, [r7, #11]

  return ok;
 800f51a:	7afb      	ldrb	r3, [r7, #11]
}
 800f51c:	4618      	mov	r0, r3
 800f51e:	3710      	adds	r7, #16
 800f520:	46bd      	mov	sp, r7
 800f522:	bd80      	pop	{r7, pc}

0800f524 <ai_fourline_run>:


AI_API_ENTRY
ai_i32 ai_fourline_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 800f524:	b580      	push	{r7, lr}
 800f526:	b084      	sub	sp, #16
 800f528:	af00      	add	r7, sp, #0
 800f52a:	60f8      	str	r0, [r7, #12]
 800f52c:	60b9      	str	r1, [r7, #8]
 800f52e:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 800f530:	687a      	ldr	r2, [r7, #4]
 800f532:	68b9      	ldr	r1, [r7, #8]
 800f534:	68f8      	ldr	r0, [r7, #12]
 800f536:	f001 fa0f 	bl	8010958 <ai_platform_network_process>
 800f53a:	4603      	mov	r3, r0
}
 800f53c:	4618      	mov	r0, r3
 800f53e:	3710      	adds	r7, #16
 800f540:	46bd      	mov	sp, r7
 800f542:	bd80      	pop	{r7, pc}

0800f544 <ai_fourline_data_params_get>:
 * @ingroup fourline_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_fourline_data_params_get(ai_network_params* params)
{
 800f544:	b580      	push	{r7, lr}
 800f546:	b086      	sub	sp, #24
 800f548:	af00      	add	r7, sp, #0
 800f54a:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d101      	bne.n	800f556 <ai_fourline_data_params_get+0x12>
 800f552:	2300      	movs	r3, #0
 800f554:	e016      	b.n	800f584 <ai_fourline_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 800f556:	4a0d      	ldr	r2, [pc, #52]	@ (800f58c <ai_fourline_data_params_get+0x48>)
 800f558:	f107 0310 	add.w	r3, r7, #16
 800f55c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f560:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_FOURLINE_DATA_ACTIVATIONS_COUNT, g_fourline_data_map_activations);
  
  const ai_buffer_array map_weights = 
 800f564:	4a0a      	ldr	r2, [pc, #40]	@ (800f590 <ai_fourline_data_params_get+0x4c>)
 800f566:	f107 0308 	add.w	r3, r7, #8
 800f56a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f56e:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_FOURLINE_DATA_WEIGHTS_COUNT, g_fourline_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 800f572:	f107 0210 	add.w	r2, r7, #16
 800f576:	f107 0308 	add.w	r3, r7, #8
 800f57a:	4619      	mov	r1, r3
 800f57c:	6878      	ldr	r0, [r7, #4]
 800f57e:	f000 f90b 	bl	800f798 <ai_platform_bind_network_params>
 800f582:	4603      	mov	r3, r0
}
 800f584:	4618      	mov	r0, r3
 800f586:	3718      	adds	r7, #24
 800f588:	46bd      	mov	sp, r7
 800f58a:	bd80      	pop	{r7, pc}
 800f58c:	08018b80 	.word	0x08018b80
 800f590:	08018b88 	.word	0x08018b88

0800f594 <ai_buffer_get_size>:
 800f594:	b368      	cbz	r0, 800f5f2 <ai_buffer_get_size+0x5e>
 800f596:	4b17      	ldr	r3, [pc, #92]	@ (800f5f4 <ai_buffer_get_size+0x60>)
 800f598:	4a17      	ldr	r2, [pc, #92]	@ (800f5f8 <ai_buffer_get_size+0x64>)
 800f59a:	b410      	push	{r4}
 800f59c:	6804      	ldr	r4, [r0, #0]
 800f59e:	4023      	ands	r3, r4
 800f5a0:	4293      	cmp	r3, r2
 800f5a2:	d123      	bne.n	800f5ec <ai_buffer_get_size+0x58>
 800f5a4:	b311      	cbz	r1, 800f5ec <ai_buffer_get_size+0x58>
 800f5a6:	6984      	ldr	r4, [r0, #24]
 800f5a8:	6862      	ldr	r2, [r4, #4]
 800f5aa:	321f      	adds	r2, #31
 800f5ac:	f022 021f 	bic.w	r2, r2, #31
 800f5b0:	7d03      	ldrb	r3, [r0, #20]
 800f5b2:	6941      	ldr	r1, [r0, #20]
 800f5b4:	f1a3 0301 	sub.w	r3, r3, #1
 800f5b8:	f3c1 2017 	ubfx	r0, r1, #8, #24
 800f5bc:	fab3 f383 	clz	r3, r3
 800f5c0:	095b      	lsrs	r3, r3, #5
 800f5c2:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 800f5c6:	da0c      	bge.n	800f5e2 <ai_buffer_get_size+0x4e>
 800f5c8:	2b01      	cmp	r3, #1
 800f5ca:	d103      	bne.n	800f5d4 <ai_buffer_get_size+0x40>
 800f5cc:	2802      	cmp	r0, #2
 800f5ce:	f04f 0302 	mov.w	r3, #2
 800f5d2:	d006      	beq.n	800f5e2 <ai_buffer_get_size+0x4e>
 800f5d4:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800f5d8:	3301      	adds	r3, #1
 800f5da:	4298      	cmp	r0, r3
 800f5dc:	fb01 f202 	mul.w	r2, r1, r2
 800f5e0:	d1f2      	bne.n	800f5c8 <ai_buffer_get_size+0x34>
 800f5e2:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 800f5e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f5ea:	4770      	bx	lr
 800f5ec:	6984      	ldr	r4, [r0, #24]
 800f5ee:	6862      	ldr	r2, [r4, #4]
 800f5f0:	e7de      	b.n	800f5b0 <ai_buffer_get_size+0x1c>
 800f5f2:	4770      	bx	lr
 800f5f4:	017fffff 	.word	0x017fffff
 800f5f8:	000400c0 	.word	0x000400c0

0800f5fc <ai_buffer_array_sane>:
 800f5fc:	b138      	cbz	r0, 800f60e <ai_buffer_array_sane+0x12>
 800f5fe:	6843      	ldr	r3, [r0, #4]
 800f600:	b123      	cbz	r3, 800f60c <ai_buffer_array_sane+0x10>
 800f602:	8840      	ldrh	r0, [r0, #2]
 800f604:	3800      	subs	r0, #0
 800f606:	bf18      	it	ne
 800f608:	2001      	movne	r0, #1
 800f60a:	4770      	bx	lr
 800f60c:	4618      	mov	r0, r3
 800f60e:	4770      	bx	lr

0800f610 <ai_buffer_array_item_set_address>:
 800f610:	b150      	cbz	r0, 800f628 <ai_buffer_array_item_set_address+0x18>
 800f612:	6843      	ldr	r3, [r0, #4]
 800f614:	b14b      	cbz	r3, 800f62a <ai_buffer_array_item_set_address+0x1a>
 800f616:	8840      	ldrh	r0, [r0, #2]
 800f618:	b900      	cbnz	r0, 800f61c <ai_buffer_array_item_set_address+0xc>
 800f61a:	4770      	bx	lr
 800f61c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800f620:	2001      	movs	r0, #1
 800f622:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800f626:	604a      	str	r2, [r1, #4]
 800f628:	4770      	bx	lr
 800f62a:	4618      	mov	r0, r3
 800f62c:	4770      	bx	lr
 800f62e:	bf00      	nop

0800f630 <_ai_platform_acquire_crc>:
 800f630:	2001      	movs	r0, #1
 800f632:	4770      	bx	lr

0800f634 <_ai_platform_release_crc>:
 800f634:	4770      	bx	lr
 800f636:	bf00      	nop

0800f638 <ai_platform_get_weights_map>:
 800f638:	2900      	cmp	r1, #0
 800f63a:	bf18      	it	ne
 800f63c:	2800      	cmpne	r0, #0
 800f63e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f640:	bf0c      	ite	eq
 800f642:	2401      	moveq	r4, #1
 800f644:	2400      	movne	r4, #0
 800f646:	2a00      	cmp	r2, #0
 800f648:	bf08      	it	eq
 800f64a:	f044 0401 	orreq.w	r4, r4, #1
 800f64e:	b114      	cbz	r4, 800f656 <ai_platform_get_weights_map+0x1e>
 800f650:	2400      	movs	r4, #0
 800f652:	4620      	mov	r0, r4
 800f654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f656:	4616      	mov	r6, r2
 800f658:	4b22      	ldr	r3, [pc, #136]	@ (800f6e4 <ai_platform_get_weights_map+0xac>)
 800f65a:	6812      	ldr	r2, [r2, #0]
 800f65c:	4605      	mov	r5, r0
 800f65e:	460f      	mov	r7, r1
 800f660:	429a      	cmp	r2, r3
 800f662:	d022      	beq.n	800f6aa <ai_platform_get_weights_map+0x72>
 800f664:	6870      	ldr	r0, [r6, #4]
 800f666:	2800      	cmp	r0, #0
 800f668:	d0f2      	beq.n	800f650 <ai_platform_get_weights_map+0x18>
 800f66a:	6806      	ldr	r6, [r0, #0]
 800f66c:	429e      	cmp	r6, r3
 800f66e:	d006      	beq.n	800f67e <ai_platform_get_weights_map+0x46>
 800f670:	f1a1 0401 	sub.w	r4, r1, #1
 800f674:	6028      	str	r0, [r5, #0]
 800f676:	fab4 f484 	clz	r4, r4
 800f67a:	0964      	lsrs	r4, r4, #5
 800f67c:	e7e9      	b.n	800f652 <ai_platform_get_weights_map+0x1a>
 800f67e:	3d04      	subs	r5, #4
 800f680:	4602      	mov	r2, r0
 800f682:	4621      	mov	r1, r4
 800f684:	e000      	b.n	800f688 <ai_platform_get_weights_map+0x50>
 800f686:	4619      	mov	r1, r3
 800f688:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800f68c:	42b3      	cmp	r3, r6
 800f68e:	d025      	beq.n	800f6dc <ai_platform_get_weights_map+0xa4>
 800f690:	f845 3f04 	str.w	r3, [r5, #4]!
 800f694:	1c4b      	adds	r3, r1, #1
 800f696:	429f      	cmp	r7, r3
 800f698:	d8f5      	bhi.n	800f686 <ai_platform_get_weights_map+0x4e>
 800f69a:	d1da      	bne.n	800f652 <ai_platform_get_weights_map+0x1a>
 800f69c:	3102      	adds	r1, #2
 800f69e:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800f6a2:	42b3      	cmp	r3, r6
 800f6a4:	d1d5      	bne.n	800f652 <ai_platform_get_weights_map+0x1a>
 800f6a6:	2401      	movs	r4, #1
 800f6a8:	e7d3      	b.n	800f652 <ai_platform_get_weights_map+0x1a>
 800f6aa:	1d30      	adds	r0, r6, #4
 800f6ac:	f7ff ffa6 	bl	800f5fc <ai_buffer_array_sane>
 800f6b0:	2800      	cmp	r0, #0
 800f6b2:	d0cd      	beq.n	800f650 <ai_platform_get_weights_map+0x18>
 800f6b4:	88f3      	ldrh	r3, [r6, #6]
 800f6b6:	429f      	cmp	r7, r3
 800f6b8:	d1ca      	bne.n	800f650 <ai_platform_get_weights_map+0x18>
 800f6ba:	3d04      	subs	r5, #4
 800f6bc:	4622      	mov	r2, r4
 800f6be:	68b3      	ldr	r3, [r6, #8]
 800f6c0:	4423      	add	r3, r4
 800f6c2:	341c      	adds	r4, #28
 800f6c4:	685b      	ldr	r3, [r3, #4]
 800f6c6:	b123      	cbz	r3, 800f6d2 <ai_platform_get_weights_map+0x9a>
 800f6c8:	3201      	adds	r2, #1
 800f6ca:	f845 3f04 	str.w	r3, [r5, #4]!
 800f6ce:	4297      	cmp	r7, r2
 800f6d0:	d8f5      	bhi.n	800f6be <ai_platform_get_weights_map+0x86>
 800f6d2:	1abc      	subs	r4, r7, r2
 800f6d4:	fab4 f484 	clz	r4, r4
 800f6d8:	0964      	lsrs	r4, r4, #5
 800f6da:	e7ba      	b.n	800f652 <ai_platform_get_weights_map+0x1a>
 800f6dc:	428f      	cmp	r7, r1
 800f6de:	d1b8      	bne.n	800f652 <ai_platform_get_weights_map+0x1a>
 800f6e0:	e7e1      	b.n	800f6a6 <ai_platform_get_weights_map+0x6e>
 800f6e2:	bf00      	nop
 800f6e4:	a1facade 	.word	0xa1facade

0800f6e8 <ai_platform_get_activations_map>:
 800f6e8:	2900      	cmp	r1, #0
 800f6ea:	bf18      	it	ne
 800f6ec:	2800      	cmpne	r0, #0
 800f6ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6f0:	bf0c      	ite	eq
 800f6f2:	2401      	moveq	r4, #1
 800f6f4:	2400      	movne	r4, #0
 800f6f6:	2a00      	cmp	r2, #0
 800f6f8:	bf08      	it	eq
 800f6fa:	f044 0401 	orreq.w	r4, r4, #1
 800f6fe:	b114      	cbz	r4, 800f706 <ai_platform_get_activations_map+0x1e>
 800f700:	2400      	movs	r4, #0
 800f702:	4620      	mov	r0, r4
 800f704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f706:	4616      	mov	r6, r2
 800f708:	4b22      	ldr	r3, [pc, #136]	@ (800f794 <ai_platform_get_activations_map+0xac>)
 800f70a:	6812      	ldr	r2, [r2, #0]
 800f70c:	4605      	mov	r5, r0
 800f70e:	460f      	mov	r7, r1
 800f710:	429a      	cmp	r2, r3
 800f712:	d022      	beq.n	800f75a <ai_platform_get_activations_map+0x72>
 800f714:	6a30      	ldr	r0, [r6, #32]
 800f716:	2800      	cmp	r0, #0
 800f718:	d0f2      	beq.n	800f700 <ai_platform_get_activations_map+0x18>
 800f71a:	6806      	ldr	r6, [r0, #0]
 800f71c:	429e      	cmp	r6, r3
 800f71e:	d006      	beq.n	800f72e <ai_platform_get_activations_map+0x46>
 800f720:	f1a1 0401 	sub.w	r4, r1, #1
 800f724:	6028      	str	r0, [r5, #0]
 800f726:	fab4 f484 	clz	r4, r4
 800f72a:	0964      	lsrs	r4, r4, #5
 800f72c:	e7e9      	b.n	800f702 <ai_platform_get_activations_map+0x1a>
 800f72e:	3d04      	subs	r5, #4
 800f730:	4602      	mov	r2, r0
 800f732:	4621      	mov	r1, r4
 800f734:	e000      	b.n	800f738 <ai_platform_get_activations_map+0x50>
 800f736:	4619      	mov	r1, r3
 800f738:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800f73c:	42b3      	cmp	r3, r6
 800f73e:	d026      	beq.n	800f78e <ai_platform_get_activations_map+0xa6>
 800f740:	f845 3f04 	str.w	r3, [r5, #4]!
 800f744:	1c4b      	adds	r3, r1, #1
 800f746:	429f      	cmp	r7, r3
 800f748:	d8f5      	bhi.n	800f736 <ai_platform_get_activations_map+0x4e>
 800f74a:	d1da      	bne.n	800f702 <ai_platform_get_activations_map+0x1a>
 800f74c:	3102      	adds	r1, #2
 800f74e:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800f752:	42b3      	cmp	r3, r6
 800f754:	d1d5      	bne.n	800f702 <ai_platform_get_activations_map+0x1a>
 800f756:	2401      	movs	r4, #1
 800f758:	e7d3      	b.n	800f702 <ai_platform_get_activations_map+0x1a>
 800f75a:	f106 000c 	add.w	r0, r6, #12
 800f75e:	f7ff ff4d 	bl	800f5fc <ai_buffer_array_sane>
 800f762:	2800      	cmp	r0, #0
 800f764:	d0cc      	beq.n	800f700 <ai_platform_get_activations_map+0x18>
 800f766:	89f3      	ldrh	r3, [r6, #14]
 800f768:	429f      	cmp	r7, r3
 800f76a:	d1c9      	bne.n	800f700 <ai_platform_get_activations_map+0x18>
 800f76c:	3d04      	subs	r5, #4
 800f76e:	4622      	mov	r2, r4
 800f770:	6933      	ldr	r3, [r6, #16]
 800f772:	4423      	add	r3, r4
 800f774:	341c      	adds	r4, #28
 800f776:	685b      	ldr	r3, [r3, #4]
 800f778:	b123      	cbz	r3, 800f784 <ai_platform_get_activations_map+0x9c>
 800f77a:	3201      	adds	r2, #1
 800f77c:	f845 3f04 	str.w	r3, [r5, #4]!
 800f780:	4297      	cmp	r7, r2
 800f782:	d8f5      	bhi.n	800f770 <ai_platform_get_activations_map+0x88>
 800f784:	1abc      	subs	r4, r7, r2
 800f786:	fab4 f484 	clz	r4, r4
 800f78a:	0964      	lsrs	r4, r4, #5
 800f78c:	e7b9      	b.n	800f702 <ai_platform_get_activations_map+0x1a>
 800f78e:	428f      	cmp	r7, r1
 800f790:	d1b7      	bne.n	800f702 <ai_platform_get_activations_map+0x1a>
 800f792:	e7e0      	b.n	800f756 <ai_platform_get_activations_map+0x6e>
 800f794:	a1facade 	.word	0xa1facade

0800f798 <ai_platform_bind_network_params>:
 800f798:	2a00      	cmp	r2, #0
 800f79a:	bf18      	it	ne
 800f79c:	2900      	cmpne	r1, #0
 800f79e:	d010      	beq.n	800f7c2 <ai_platform_bind_network_params+0x2a>
 800f7a0:	b178      	cbz	r0, 800f7c2 <ai_platform_bind_network_params+0x2a>
 800f7a2:	4603      	mov	r3, r0
 800f7a4:	4808      	ldr	r0, [pc, #32]	@ (800f7c8 <ai_platform_bind_network_params+0x30>)
 800f7a6:	f103 0c0c 	add.w	ip, r3, #12
 800f7aa:	f843 0b04 	str.w	r0, [r3], #4
 800f7ae:	c903      	ldmia	r1, {r0, r1}
 800f7b0:	e883 0003 	stmia.w	r3, {r0, r1}
 800f7b4:	2301      	movs	r3, #1
 800f7b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f7ba:	e88c 0003 	stmia.w	ip, {r0, r1}
 800f7be:	4618      	mov	r0, r3
 800f7c0:	4770      	bx	lr
 800f7c2:	2300      	movs	r3, #0
 800f7c4:	4618      	mov	r0, r3
 800f7c6:	4770      	bx	lr
 800f7c8:	a1facade 	.word	0xa1facade

0800f7cc <ai_platform_network_get_error>:
 800f7cc:	b510      	push	{r4, lr}
 800f7ce:	2800      	cmp	r0, #0
 800f7d0:	d03f      	beq.n	800f852 <ai_platform_network_get_error+0x86>
 800f7d2:	4b7d      	ldr	r3, [pc, #500]	@ (800f9c8 <ai_platform_network_get_error+0x1fc>)
 800f7d4:	4604      	mov	r4, r0
 800f7d6:	6802      	ldr	r2, [r0, #0]
 800f7d8:	429a      	cmp	r2, r3
 800f7da:	d13a      	bne.n	800f852 <ai_platform_network_get_error+0x86>
 800f7dc:	f7ff ff28 	bl	800f630 <_ai_platform_acquire_crc>
 800f7e0:	4b7a      	ldr	r3, [pc, #488]	@ (800f9cc <ai_platform_network_get_error+0x200>)
 800f7e2:	f46f 628a 	mvn.w	r2, #1104	@ 0x450
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f7ec:	189a      	adds	r2, r3, r2
 800f7ee:	2a01      	cmp	r2, #1
 800f7f0:	f240 8086 	bls.w	800f900 <ai_platform_network_get_error+0x134>
 800f7f4:	f240 4249 	movw	r2, #1097	@ 0x449
 800f7f8:	4293      	cmp	r3, r2
 800f7fa:	f000 8081 	beq.w	800f900 <ai_platform_network_get_error+0x134>
 800f7fe:	4a74      	ldr	r2, [pc, #464]	@ (800f9d0 <ai_platform_network_get_error+0x204>)
 800f800:	6813      	ldr	r3, [r2, #0]
 800f802:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f806:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 800f80a:	f000 8087 	beq.w	800f91c <ai_platform_network_get_error+0x150>
 800f80e:	6813      	ldr	r3, [r2, #0]
 800f810:	f240 4183 	movw	r1, #1155	@ 0x483
 800f814:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f818:	428b      	cmp	r3, r1
 800f81a:	f000 80a9 	beq.w	800f970 <ai_platform_network_get_error+0x1a4>
 800f81e:	6813      	ldr	r3, [r2, #0]
 800f820:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f824:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 800f828:	f000 80c0 	beq.w	800f9ac <ai_platform_network_get_error+0x1e0>
 800f82c:	6813      	ldr	r3, [r2, #0]
 800f82e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f832:	2b00      	cmp	r3, #0
 800f834:	f040 8082 	bne.w	800f93c <ai_platform_network_get_error+0x170>
 800f838:	4a66      	ldr	r2, [pc, #408]	@ (800f9d4 <ai_platform_network_get_error+0x208>)
 800f83a:	2301      	movs	r3, #1
 800f83c:	6093      	str	r3, [r2, #8]
 800f83e:	6893      	ldr	r3, [r2, #8]
 800f840:	2b00      	cmp	r3, #0
 800f842:	d1fc      	bne.n	800f83e <ai_platform_network_get_error+0x72>
 800f844:	4964      	ldr	r1, [pc, #400]	@ (800f9d8 <ai_platform_network_get_error+0x20c>)
 800f846:	4b65      	ldr	r3, [pc, #404]	@ (800f9dc <ai_platform_network_get_error+0x210>)
 800f848:	6011      	str	r1, [r2, #0]
 800f84a:	6812      	ldr	r2, [r2, #0]
 800f84c:	429a      	cmp	r2, r3
 800f84e:	d075      	beq.n	800f93c <ai_platform_network_get_error+0x170>
 800f850:	e7fe      	b.n	800f850 <ai_platform_network_get_error+0x84>
 800f852:	f7ff feed 	bl	800f630 <_ai_platform_acquire_crc>
 800f856:	4b5d      	ldr	r3, [pc, #372]	@ (800f9cc <ai_platform_network_get_error+0x200>)
 800f858:	f46f 618a 	mvn.w	r1, #1104	@ 0x450
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f862:	185a      	adds	r2, r3, r1
 800f864:	2a01      	cmp	r2, #1
 800f866:	d929      	bls.n	800f8bc <ai_platform_network_get_error+0xf0>
 800f868:	f240 4249 	movw	r2, #1097	@ 0x449
 800f86c:	4293      	cmp	r3, r2
 800f86e:	d025      	beq.n	800f8bc <ai_platform_network_get_error+0xf0>
 800f870:	4a57      	ldr	r2, [pc, #348]	@ (800f9d0 <ai_platform_network_get_error+0x204>)
 800f872:	6813      	ldr	r3, [r2, #0]
 800f874:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f878:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 800f87c:	d02b      	beq.n	800f8d6 <ai_platform_network_get_error+0x10a>
 800f87e:	6813      	ldr	r3, [r2, #0]
 800f880:	f240 4183 	movw	r1, #1155	@ 0x483
 800f884:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f888:	428b      	cmp	r3, r1
 800f88a:	d060      	beq.n	800f94e <ai_platform_network_get_error+0x182>
 800f88c:	6813      	ldr	r3, [r2, #0]
 800f88e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f892:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 800f896:	d07c      	beq.n	800f992 <ai_platform_network_get_error+0x1c6>
 800f898:	6813      	ldr	r3, [r2, #0]
 800f89a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d129      	bne.n	800f8f6 <ai_platform_network_get_error+0x12a>
 800f8a2:	4a4c      	ldr	r2, [pc, #304]	@ (800f9d4 <ai_platform_network_get_error+0x208>)
 800f8a4:	2301      	movs	r3, #1
 800f8a6:	6093      	str	r3, [r2, #8]
 800f8a8:	6893      	ldr	r3, [r2, #8]
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d1fc      	bne.n	800f8a8 <ai_platform_network_get_error+0xdc>
 800f8ae:	494a      	ldr	r1, [pc, #296]	@ (800f9d8 <ai_platform_network_get_error+0x20c>)
 800f8b0:	4b4a      	ldr	r3, [pc, #296]	@ (800f9dc <ai_platform_network_get_error+0x210>)
 800f8b2:	6011      	str	r1, [r2, #0]
 800f8b4:	6812      	ldr	r2, [r2, #0]
 800f8b6:	429a      	cmp	r2, r3
 800f8b8:	d01d      	beq.n	800f8f6 <ai_platform_network_get_error+0x12a>
 800f8ba:	e7fe      	b.n	800f8ba <ai_platform_network_get_error+0xee>
 800f8bc:	4a45      	ldr	r2, [pc, #276]	@ (800f9d4 <ai_platform_network_get_error+0x208>)
 800f8be:	2301      	movs	r3, #1
 800f8c0:	6093      	str	r3, [r2, #8]
 800f8c2:	6893      	ldr	r3, [r2, #8]
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d1fc      	bne.n	800f8c2 <ai_platform_network_get_error+0xf6>
 800f8c8:	4943      	ldr	r1, [pc, #268]	@ (800f9d8 <ai_platform_network_get_error+0x20c>)
 800f8ca:	4b44      	ldr	r3, [pc, #272]	@ (800f9dc <ai_platform_network_get_error+0x210>)
 800f8cc:	6011      	str	r1, [r2, #0]
 800f8ce:	6812      	ldr	r2, [r2, #0]
 800f8d0:	429a      	cmp	r2, r3
 800f8d2:	d010      	beq.n	800f8f6 <ai_platform_network_get_error+0x12a>
 800f8d4:	e7fe      	b.n	800f8d4 <ai_platform_network_get_error+0x108>
 800f8d6:	4a42      	ldr	r2, [pc, #264]	@ (800f9e0 <ai_platform_network_get_error+0x214>)
 800f8d8:	2301      	movs	r3, #1
 800f8da:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 800f8de:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d1fb      	bne.n	800f8de <ai_platform_network_get_error+0x112>
 800f8e6:	493c      	ldr	r1, [pc, #240]	@ (800f9d8 <ai_platform_network_get_error+0x20c>)
 800f8e8:	4b3c      	ldr	r3, [pc, #240]	@ (800f9dc <ai_platform_network_get_error+0x210>)
 800f8ea:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 800f8ee:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 800f8f2:	429a      	cmp	r2, r3
 800f8f4:	d111      	bne.n	800f91a <ai_platform_network_get_error+0x14e>
 800f8f6:	f7ff fe9d 	bl	800f634 <_ai_platform_release_crc>
 800f8fa:	f241 0010 	movw	r0, #4112	@ 0x1010
 800f8fe:	bd10      	pop	{r4, pc}
 800f900:	4a34      	ldr	r2, [pc, #208]	@ (800f9d4 <ai_platform_network_get_error+0x208>)
 800f902:	2301      	movs	r3, #1
 800f904:	6093      	str	r3, [r2, #8]
 800f906:	6893      	ldr	r3, [r2, #8]
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d1fc      	bne.n	800f906 <ai_platform_network_get_error+0x13a>
 800f90c:	4932      	ldr	r1, [pc, #200]	@ (800f9d8 <ai_platform_network_get_error+0x20c>)
 800f90e:	4b33      	ldr	r3, [pc, #204]	@ (800f9dc <ai_platform_network_get_error+0x210>)
 800f910:	6011      	str	r1, [r2, #0]
 800f912:	6812      	ldr	r2, [r2, #0]
 800f914:	429a      	cmp	r2, r3
 800f916:	d011      	beq.n	800f93c <ai_platform_network_get_error+0x170>
 800f918:	e7fe      	b.n	800f918 <ai_platform_network_get_error+0x14c>
 800f91a:	e7fe      	b.n	800f91a <ai_platform_network_get_error+0x14e>
 800f91c:	4a30      	ldr	r2, [pc, #192]	@ (800f9e0 <ai_platform_network_get_error+0x214>)
 800f91e:	2301      	movs	r3, #1
 800f920:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 800f924:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d1fb      	bne.n	800f924 <ai_platform_network_get_error+0x158>
 800f92c:	492a      	ldr	r1, [pc, #168]	@ (800f9d8 <ai_platform_network_get_error+0x20c>)
 800f92e:	4b2b      	ldr	r3, [pc, #172]	@ (800f9dc <ai_platform_network_get_error+0x210>)
 800f930:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 800f934:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 800f938:	429a      	cmp	r2, r3
 800f93a:	d107      	bne.n	800f94c <ai_platform_network_get_error+0x180>
 800f93c:	f7ff fe7a 	bl	800f634 <_ai_platform_release_crc>
 800f940:	f104 0010 	add.w	r0, r4, #16
 800f944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f948:	f001 bae4 	b.w	8010f14 <core_get_error>
 800f94c:	e7fe      	b.n	800f94c <ai_platform_network_get_error+0x180>
 800f94e:	4a24      	ldr	r2, [pc, #144]	@ (800f9e0 <ai_platform_network_get_error+0x214>)
 800f950:	2301      	movs	r3, #1
 800f952:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 800f956:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d1fb      	bne.n	800f956 <ai_platform_network_get_error+0x18a>
 800f95e:	491e      	ldr	r1, [pc, #120]	@ (800f9d8 <ai_platform_network_get_error+0x20c>)
 800f960:	4b1e      	ldr	r3, [pc, #120]	@ (800f9dc <ai_platform_network_get_error+0x210>)
 800f962:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 800f966:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 800f96a:	429a      	cmp	r2, r3
 800f96c:	d0c3      	beq.n	800f8f6 <ai_platform_network_get_error+0x12a>
 800f96e:	e7fe      	b.n	800f96e <ai_platform_network_get_error+0x1a2>
 800f970:	4a1b      	ldr	r2, [pc, #108]	@ (800f9e0 <ai_platform_network_get_error+0x214>)
 800f972:	2301      	movs	r3, #1
 800f974:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 800f978:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d1fb      	bne.n	800f978 <ai_platform_network_get_error+0x1ac>
 800f980:	4915      	ldr	r1, [pc, #84]	@ (800f9d8 <ai_platform_network_get_error+0x20c>)
 800f982:	4b16      	ldr	r3, [pc, #88]	@ (800f9dc <ai_platform_network_get_error+0x210>)
 800f984:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 800f988:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 800f98c:	429a      	cmp	r2, r3
 800f98e:	d0d5      	beq.n	800f93c <ai_platform_network_get_error+0x170>
 800f990:	e7fe      	b.n	800f990 <ai_platform_network_get_error+0x1c4>
 800f992:	4a10      	ldr	r2, [pc, #64]	@ (800f9d4 <ai_platform_network_get_error+0x208>)
 800f994:	2301      	movs	r3, #1
 800f996:	6093      	str	r3, [r2, #8]
 800f998:	6893      	ldr	r3, [r2, #8]
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d1fc      	bne.n	800f998 <ai_platform_network_get_error+0x1cc>
 800f99e:	490e      	ldr	r1, [pc, #56]	@ (800f9d8 <ai_platform_network_get_error+0x20c>)
 800f9a0:	4b0e      	ldr	r3, [pc, #56]	@ (800f9dc <ai_platform_network_get_error+0x210>)
 800f9a2:	6011      	str	r1, [r2, #0]
 800f9a4:	6812      	ldr	r2, [r2, #0]
 800f9a6:	429a      	cmp	r2, r3
 800f9a8:	d0a5      	beq.n	800f8f6 <ai_platform_network_get_error+0x12a>
 800f9aa:	e7fe      	b.n	800f9aa <ai_platform_network_get_error+0x1de>
 800f9ac:	4a09      	ldr	r2, [pc, #36]	@ (800f9d4 <ai_platform_network_get_error+0x208>)
 800f9ae:	2301      	movs	r3, #1
 800f9b0:	6093      	str	r3, [r2, #8]
 800f9b2:	6893      	ldr	r3, [r2, #8]
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d1fc      	bne.n	800f9b2 <ai_platform_network_get_error+0x1e6>
 800f9b8:	4907      	ldr	r1, [pc, #28]	@ (800f9d8 <ai_platform_network_get_error+0x20c>)
 800f9ba:	4b08      	ldr	r3, [pc, #32]	@ (800f9dc <ai_platform_network_get_error+0x210>)
 800f9bc:	6011      	str	r1, [r2, #0]
 800f9be:	6812      	ldr	r2, [r2, #0]
 800f9c0:	429a      	cmp	r2, r3
 800f9c2:	d0bb      	beq.n	800f93c <ai_platform_network_get_error+0x170>
 800f9c4:	e7fe      	b.n	800f9c4 <ai_platform_network_get_error+0x1f8>
 800f9c6:	bf00      	nop
 800f9c8:	a1c00100 	.word	0xa1c00100
 800f9cc:	e0042000 	.word	0xe0042000
 800f9d0:	5c001000 	.word	0x5c001000
 800f9d4:	40023000 	.word	0x40023000
 800f9d8:	f407a5c2 	.word	0xf407a5c2
 800f9dc:	b5e8b5cd 	.word	0xb5e8b5cd
 800f9e0:	58024000 	.word	0x58024000

0800f9e4 <ai_platform_network_set_error>:
 800f9e4:	b110      	cbz	r0, 800f9ec <ai_platform_network_set_error+0x8>
 800f9e6:	3010      	adds	r0, #16
 800f9e8:	f001 ba9a 	b.w	8010f20 <core_set_error>
 800f9ec:	4770      	bx	lr
 800f9ee:	bf00      	nop

0800f9f0 <ai_platform_inputs_get>:
 800f9f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9f4:	b085      	sub	sp, #20
 800f9f6:	9102      	str	r1, [sp, #8]
 800f9f8:	2800      	cmp	r0, #0
 800f9fa:	f000 8093 	beq.w	800fb24 <ai_platform_inputs_get+0x134>
 800f9fe:	4baa      	ldr	r3, [pc, #680]	@ (800fca8 <ai_platform_inputs_get+0x2b8>)
 800fa00:	4681      	mov	r9, r0
 800fa02:	6802      	ldr	r2, [r0, #0]
 800fa04:	429a      	cmp	r2, r3
 800fa06:	f040 808d 	bne.w	800fb24 <ai_platform_inputs_get+0x134>
 800fa0a:	f7ff fe11 	bl	800f630 <_ai_platform_acquire_crc>
 800fa0e:	4ba7      	ldr	r3, [pc, #668]	@ (800fcac <ai_platform_inputs_get+0x2bc>)
 800fa10:	f46f 628a 	mvn.w	r2, #1104	@ 0x450
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fa1a:	189a      	adds	r2, r3, r2
 800fa1c:	2a01      	cmp	r2, #1
 800fa1e:	f240 80da 	bls.w	800fbd6 <ai_platform_inputs_get+0x1e6>
 800fa22:	f240 4249 	movw	r2, #1097	@ 0x449
 800fa26:	4293      	cmp	r3, r2
 800fa28:	f000 80d5 	beq.w	800fbd6 <ai_platform_inputs_get+0x1e6>
 800fa2c:	4aa0      	ldr	r2, [pc, #640]	@ (800fcb0 <ai_platform_inputs_get+0x2c0>)
 800fa2e:	6813      	ldr	r3, [r2, #0]
 800fa30:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fa34:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 800fa38:	f000 80dc 	beq.w	800fbf4 <ai_platform_inputs_get+0x204>
 800fa3c:	6813      	ldr	r3, [r2, #0]
 800fa3e:	f240 4183 	movw	r1, #1155	@ 0x483
 800fa42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fa46:	428b      	cmp	r3, r1
 800fa48:	f000 810e 	beq.w	800fc68 <ai_platform_inputs_get+0x278>
 800fa4c:	6813      	ldr	r3, [r2, #0]
 800fa4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fa52:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 800fa56:	f000 8143 	beq.w	800fce0 <ai_platform_inputs_get+0x2f0>
 800fa5a:	6813      	ldr	r3, [r2, #0]
 800fa5c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	f000 8113 	beq.w	800fc8c <ai_platform_inputs_get+0x29c>
 800fa66:	f7ff fde5 	bl	800f634 <_ai_platform_release_crc>
 800fa6a:	f8b9 302c 	ldrh.w	r3, [r9, #44]	@ 0x2c
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	f000 80d2 	beq.w	800fc18 <ai_platform_inputs_get+0x228>
 800fa74:	f8d9 a030 	ldr.w	sl, [r9, #48]	@ 0x30
 800fa78:	f1ba 0f00 	cmp.w	sl, #0
 800fa7c:	f000 80cc 	beq.w	800fc18 <ai_platform_inputs_get+0x228>
 800fa80:	2100      	movs	r1, #0
 800fa82:	f8cd 900c 	str.w	r9, [sp, #12]
 800fa86:	460d      	mov	r5, r1
 800fa88:	4689      	mov	r9, r1
 800fa8a:	e016      	b.n	800faba <ai_platform_inputs_get+0xca>
 800fa8c:	9a01      	ldr	r2, [sp, #4]
 800fa8e:	2301      	movs	r3, #1
 800fa90:	f848 3002 	str.w	r3, [r8, r2]
 800fa94:	69b2      	ldr	r2, [r6, #24]
 800fa96:	f04f 0301 	mov.w	r3, #1
 800fa9a:	6856      	ldr	r6, [r2, #4]
 800fa9c:	3501      	adds	r5, #1
 800fa9e:	f109 091c 	add.w	r9, r9, #28
 800faa2:	7523      	strb	r3, [r4, #20]
 800faa4:	2300      	movs	r3, #0
 800faa6:	6962      	ldr	r2, [r4, #20]
 800faa8:	60a7      	str	r7, [r4, #8]
 800faaa:	f36b 221f 	bfi	r2, fp, #8, #24
 800faae:	6126      	str	r6, [r4, #16]
 800fab0:	61a1      	str	r1, [r4, #24]
 800fab2:	60e3      	str	r3, [r4, #12]
 800fab4:	6162      	str	r2, [r4, #20]
 800fab6:	e9c4 0c00 	strd	r0, ip, [r4]
 800faba:	f8ba 3000 	ldrh.w	r3, [sl]
 800fabe:	b2ac      	uxth	r4, r5
 800fac0:	42ab      	cmp	r3, r5
 800fac2:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 800fac6:	9301      	str	r3, [sp, #4]
 800fac8:	f240 80b5 	bls.w	800fc36 <ai_platform_inputs_get+0x246>
 800facc:	f8da 3004 	ldr.w	r3, [sl, #4]
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	f000 80b0 	beq.w	800fc36 <ai_platform_inputs_get+0x246>
 800fad6:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800fada:	2e00      	cmp	r6, #0
 800fadc:	f000 80ab 	beq.w	800fc36 <ai_platform_inputs_get+0x246>
 800fae0:	f8da 3008 	ldr.w	r3, [sl, #8]
 800fae4:	69b2      	ldr	r2, [r6, #24]
 800fae6:	68f1      	ldr	r1, [r6, #12]
 800fae8:	6810      	ldr	r0, [r2, #0]
 800faea:	9100      	str	r1, [sp, #0]
 800faec:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 800faf0:	68b3      	ldr	r3, [r6, #8]
 800faf2:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 800faf6:	444c      	add	r4, r9
 800faf8:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 800fafc:	f002 fd40 	bl	8012580 <ai_array_to_buffer_fmt>
 800fb00:	69b2      	ldr	r2, [r6, #24]
 800fb02:	9900      	ldr	r1, [sp, #0]
 800fb04:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800fb08:	2f00      	cmp	r7, #0
 800fb0a:	d0c4      	beq.n	800fa96 <ai_platform_inputs_get+0xa6>
 800fb0c:	2200      	movs	r2, #0
 800fb0e:	f848 2035 	str.w	r2, [r8, r5, lsl #3]
 800fb12:	6832      	ldr	r2, [r6, #0]
 800fb14:	607a      	str	r2, [r7, #4]
 800fb16:	b112      	cbz	r2, 800fb1e <ai_platform_inputs_get+0x12e>
 800fb18:	8852      	ldrh	r2, [r2, #2]
 800fb1a:	2a00      	cmp	r2, #0
 800fb1c:	d1b6      	bne.n	800fa8c <ai_platform_inputs_get+0x9c>
 800fb1e:	69b2      	ldr	r2, [r6, #24]
 800fb20:	2700      	movs	r7, #0
 800fb22:	e7b8      	b.n	800fa96 <ai_platform_inputs_get+0xa6>
 800fb24:	f7ff fd84 	bl	800f630 <_ai_platform_acquire_crc>
 800fb28:	4b60      	ldr	r3, [pc, #384]	@ (800fcac <ai_platform_inputs_get+0x2bc>)
 800fb2a:	f46f 618a 	mvn.w	r1, #1104	@ 0x450
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fb34:	185a      	adds	r2, r3, r1
 800fb36:	2a01      	cmp	r2, #1
 800fb38:	d92a      	bls.n	800fb90 <ai_platform_inputs_get+0x1a0>
 800fb3a:	f240 4249 	movw	r2, #1097	@ 0x449
 800fb3e:	4293      	cmp	r3, r2
 800fb40:	d026      	beq.n	800fb90 <ai_platform_inputs_get+0x1a0>
 800fb42:	4a5b      	ldr	r2, [pc, #364]	@ (800fcb0 <ai_platform_inputs_get+0x2c0>)
 800fb44:	6813      	ldr	r3, [r2, #0]
 800fb46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fb4a:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 800fb4e:	d02c      	beq.n	800fbaa <ai_platform_inputs_get+0x1ba>
 800fb50:	6813      	ldr	r3, [r2, #0]
 800fb52:	f240 4183 	movw	r1, #1155	@ 0x483
 800fb56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fb5a:	428b      	cmp	r3, r1
 800fb5c:	d073      	beq.n	800fc46 <ai_platform_inputs_get+0x256>
 800fb5e:	6813      	ldr	r3, [r2, #0]
 800fb60:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fb64:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 800fb68:	f000 80ac 	beq.w	800fcc4 <ai_platform_inputs_get+0x2d4>
 800fb6c:	6813      	ldr	r3, [r2, #0]
 800fb6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d129      	bne.n	800fbca <ai_platform_inputs_get+0x1da>
 800fb76:	4a4f      	ldr	r2, [pc, #316]	@ (800fcb4 <ai_platform_inputs_get+0x2c4>)
 800fb78:	2301      	movs	r3, #1
 800fb7a:	6093      	str	r3, [r2, #8]
 800fb7c:	6893      	ldr	r3, [r2, #8]
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d1fc      	bne.n	800fb7c <ai_platform_inputs_get+0x18c>
 800fb82:	494d      	ldr	r1, [pc, #308]	@ (800fcb8 <ai_platform_inputs_get+0x2c8>)
 800fb84:	4b4d      	ldr	r3, [pc, #308]	@ (800fcbc <ai_platform_inputs_get+0x2cc>)
 800fb86:	6011      	str	r1, [r2, #0]
 800fb88:	6812      	ldr	r2, [r2, #0]
 800fb8a:	429a      	cmp	r2, r3
 800fb8c:	d01d      	beq.n	800fbca <ai_platform_inputs_get+0x1da>
 800fb8e:	e7fe      	b.n	800fb8e <ai_platform_inputs_get+0x19e>
 800fb90:	4a48      	ldr	r2, [pc, #288]	@ (800fcb4 <ai_platform_inputs_get+0x2c4>)
 800fb92:	2301      	movs	r3, #1
 800fb94:	6093      	str	r3, [r2, #8]
 800fb96:	6893      	ldr	r3, [r2, #8]
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d1fc      	bne.n	800fb96 <ai_platform_inputs_get+0x1a6>
 800fb9c:	4946      	ldr	r1, [pc, #280]	@ (800fcb8 <ai_platform_inputs_get+0x2c8>)
 800fb9e:	4b47      	ldr	r3, [pc, #284]	@ (800fcbc <ai_platform_inputs_get+0x2cc>)
 800fba0:	6011      	str	r1, [r2, #0]
 800fba2:	6812      	ldr	r2, [r2, #0]
 800fba4:	429a      	cmp	r2, r3
 800fba6:	d010      	beq.n	800fbca <ai_platform_inputs_get+0x1da>
 800fba8:	e7fe      	b.n	800fba8 <ai_platform_inputs_get+0x1b8>
 800fbaa:	4a45      	ldr	r2, [pc, #276]	@ (800fcc0 <ai_platform_inputs_get+0x2d0>)
 800fbac:	2301      	movs	r3, #1
 800fbae:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 800fbb2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d1fb      	bne.n	800fbb2 <ai_platform_inputs_get+0x1c2>
 800fbba:	493f      	ldr	r1, [pc, #252]	@ (800fcb8 <ai_platform_inputs_get+0x2c8>)
 800fbbc:	4b3f      	ldr	r3, [pc, #252]	@ (800fcbc <ai_platform_inputs_get+0x2cc>)
 800fbbe:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 800fbc2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 800fbc6:	429a      	cmp	r2, r3
 800fbc8:	d113      	bne.n	800fbf2 <ai_platform_inputs_get+0x202>
 800fbca:	f7ff fd33 	bl	800f634 <_ai_platform_release_crc>
 800fbce:	2000      	movs	r0, #0
 800fbd0:	b005      	add	sp, #20
 800fbd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbd6:	4a37      	ldr	r2, [pc, #220]	@ (800fcb4 <ai_platform_inputs_get+0x2c4>)
 800fbd8:	2301      	movs	r3, #1
 800fbda:	6093      	str	r3, [r2, #8]
 800fbdc:	6893      	ldr	r3, [r2, #8]
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d1fc      	bne.n	800fbdc <ai_platform_inputs_get+0x1ec>
 800fbe2:	4b35      	ldr	r3, [pc, #212]	@ (800fcb8 <ai_platform_inputs_get+0x2c8>)
 800fbe4:	6013      	str	r3, [r2, #0]
 800fbe6:	4b35      	ldr	r3, [pc, #212]	@ (800fcbc <ai_platform_inputs_get+0x2cc>)
 800fbe8:	6812      	ldr	r2, [r2, #0]
 800fbea:	429a      	cmp	r2, r3
 800fbec:	f43f af3b 	beq.w	800fa66 <ai_platform_inputs_get+0x76>
 800fbf0:	e7fe      	b.n	800fbf0 <ai_platform_inputs_get+0x200>
 800fbf2:	e7fe      	b.n	800fbf2 <ai_platform_inputs_get+0x202>
 800fbf4:	4a32      	ldr	r2, [pc, #200]	@ (800fcc0 <ai_platform_inputs_get+0x2d0>)
 800fbf6:	2301      	movs	r3, #1
 800fbf8:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 800fbfc:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d1fb      	bne.n	800fbfc <ai_platform_inputs_get+0x20c>
 800fc04:	4b2c      	ldr	r3, [pc, #176]	@ (800fcb8 <ai_platform_inputs_get+0x2c8>)
 800fc06:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 800fc0a:	4b2c      	ldr	r3, [pc, #176]	@ (800fcbc <ai_platform_inputs_get+0x2cc>)
 800fc0c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 800fc10:	429a      	cmp	r2, r3
 800fc12:	f43f af28 	beq.w	800fa66 <ai_platform_inputs_get+0x76>
 800fc16:	e7fe      	b.n	800fc16 <ai_platform_inputs_get+0x226>
 800fc18:	2400      	movs	r4, #0
 800fc1a:	2218      	movs	r2, #24
 800fc1c:	2111      	movs	r1, #17
 800fc1e:	f109 0010 	add.w	r0, r9, #16
 800fc22:	f001 f97d 	bl	8010f20 <core_set_error>
 800fc26:	4620      	mov	r0, r4
 800fc28:	9b02      	ldr	r3, [sp, #8]
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d0d0      	beq.n	800fbd0 <ai_platform_inputs_get+0x1e0>
 800fc2e:	801c      	strh	r4, [r3, #0]
 800fc30:	b005      	add	sp, #20
 800fc32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc36:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800fc3a:	2c00      	cmp	r4, #0
 800fc3c:	d0ec      	beq.n	800fc18 <ai_platform_inputs_get+0x228>
 800fc3e:	f8da 3008 	ldr.w	r3, [sl, #8]
 800fc42:	6858      	ldr	r0, [r3, #4]
 800fc44:	e7f0      	b.n	800fc28 <ai_platform_inputs_get+0x238>
 800fc46:	4a1e      	ldr	r2, [pc, #120]	@ (800fcc0 <ai_platform_inputs_get+0x2d0>)
 800fc48:	2301      	movs	r3, #1
 800fc4a:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 800fc4e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d1fb      	bne.n	800fc4e <ai_platform_inputs_get+0x25e>
 800fc56:	4918      	ldr	r1, [pc, #96]	@ (800fcb8 <ai_platform_inputs_get+0x2c8>)
 800fc58:	4b18      	ldr	r3, [pc, #96]	@ (800fcbc <ai_platform_inputs_get+0x2cc>)
 800fc5a:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 800fc5e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 800fc62:	429a      	cmp	r2, r3
 800fc64:	d0b1      	beq.n	800fbca <ai_platform_inputs_get+0x1da>
 800fc66:	e7fe      	b.n	800fc66 <ai_platform_inputs_get+0x276>
 800fc68:	4a15      	ldr	r2, [pc, #84]	@ (800fcc0 <ai_platform_inputs_get+0x2d0>)
 800fc6a:	2301      	movs	r3, #1
 800fc6c:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 800fc70:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d1fb      	bne.n	800fc70 <ai_platform_inputs_get+0x280>
 800fc78:	4b0f      	ldr	r3, [pc, #60]	@ (800fcb8 <ai_platform_inputs_get+0x2c8>)
 800fc7a:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 800fc7e:	4b0f      	ldr	r3, [pc, #60]	@ (800fcbc <ai_platform_inputs_get+0x2cc>)
 800fc80:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 800fc84:	429a      	cmp	r2, r3
 800fc86:	f43f aeee 	beq.w	800fa66 <ai_platform_inputs_get+0x76>
 800fc8a:	e7fe      	b.n	800fc8a <ai_platform_inputs_get+0x29a>
 800fc8c:	4a09      	ldr	r2, [pc, #36]	@ (800fcb4 <ai_platform_inputs_get+0x2c4>)
 800fc8e:	2301      	movs	r3, #1
 800fc90:	6093      	str	r3, [r2, #8]
 800fc92:	6893      	ldr	r3, [r2, #8]
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d1fc      	bne.n	800fc92 <ai_platform_inputs_get+0x2a2>
 800fc98:	4b07      	ldr	r3, [pc, #28]	@ (800fcb8 <ai_platform_inputs_get+0x2c8>)
 800fc9a:	6013      	str	r3, [r2, #0]
 800fc9c:	4b07      	ldr	r3, [pc, #28]	@ (800fcbc <ai_platform_inputs_get+0x2cc>)
 800fc9e:	6812      	ldr	r2, [r2, #0]
 800fca0:	429a      	cmp	r2, r3
 800fca2:	f43f aee0 	beq.w	800fa66 <ai_platform_inputs_get+0x76>
 800fca6:	e7fe      	b.n	800fca6 <ai_platform_inputs_get+0x2b6>
 800fca8:	a1c00100 	.word	0xa1c00100
 800fcac:	e0042000 	.word	0xe0042000
 800fcb0:	5c001000 	.word	0x5c001000
 800fcb4:	40023000 	.word	0x40023000
 800fcb8:	f407a5c2 	.word	0xf407a5c2
 800fcbc:	b5e8b5cd 	.word	0xb5e8b5cd
 800fcc0:	58024000 	.word	0x58024000
 800fcc4:	4a0d      	ldr	r2, [pc, #52]	@ (800fcfc <ai_platform_inputs_get+0x30c>)
 800fcc6:	2301      	movs	r3, #1
 800fcc8:	6093      	str	r3, [r2, #8]
 800fcca:	6893      	ldr	r3, [r2, #8]
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d1fc      	bne.n	800fcca <ai_platform_inputs_get+0x2da>
 800fcd0:	490b      	ldr	r1, [pc, #44]	@ (800fd00 <ai_platform_inputs_get+0x310>)
 800fcd2:	4b0c      	ldr	r3, [pc, #48]	@ (800fd04 <ai_platform_inputs_get+0x314>)
 800fcd4:	6011      	str	r1, [r2, #0]
 800fcd6:	6812      	ldr	r2, [r2, #0]
 800fcd8:	429a      	cmp	r2, r3
 800fcda:	f43f af76 	beq.w	800fbca <ai_platform_inputs_get+0x1da>
 800fcde:	e7fe      	b.n	800fcde <ai_platform_inputs_get+0x2ee>
 800fce0:	4a06      	ldr	r2, [pc, #24]	@ (800fcfc <ai_platform_inputs_get+0x30c>)
 800fce2:	2301      	movs	r3, #1
 800fce4:	6093      	str	r3, [r2, #8]
 800fce6:	6893      	ldr	r3, [r2, #8]
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d1fc      	bne.n	800fce6 <ai_platform_inputs_get+0x2f6>
 800fcec:	4b04      	ldr	r3, [pc, #16]	@ (800fd00 <ai_platform_inputs_get+0x310>)
 800fcee:	6013      	str	r3, [r2, #0]
 800fcf0:	4b04      	ldr	r3, [pc, #16]	@ (800fd04 <ai_platform_inputs_get+0x314>)
 800fcf2:	6812      	ldr	r2, [r2, #0]
 800fcf4:	429a      	cmp	r2, r3
 800fcf6:	f43f aeb6 	beq.w	800fa66 <ai_platform_inputs_get+0x76>
 800fcfa:	e7fe      	b.n	800fcfa <ai_platform_inputs_get+0x30a>
 800fcfc:	40023000 	.word	0x40023000
 800fd00:	f407a5c2 	.word	0xf407a5c2
 800fd04:	b5e8b5cd 	.word	0xb5e8b5cd

0800fd08 <ai_platform_outputs_get>:
 800fd08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd0c:	b085      	sub	sp, #20
 800fd0e:	9102      	str	r1, [sp, #8]
 800fd10:	2800      	cmp	r0, #0
 800fd12:	f000 808f 	beq.w	800fe34 <ai_platform_outputs_get+0x12c>
 800fd16:	4ba8      	ldr	r3, [pc, #672]	@ (800ffb8 <ai_platform_outputs_get+0x2b0>)
 800fd18:	4681      	mov	r9, r0
 800fd1a:	6802      	ldr	r2, [r0, #0]
 800fd1c:	429a      	cmp	r2, r3
 800fd1e:	f040 8089 	bne.w	800fe34 <ai_platform_outputs_get+0x12c>
 800fd22:	f7ff fc85 	bl	800f630 <_ai_platform_acquire_crc>
 800fd26:	4ba5      	ldr	r3, [pc, #660]	@ (800ffbc <ai_platform_outputs_get+0x2b4>)
 800fd28:	f46f 628a 	mvn.w	r2, #1104	@ 0x450
 800fd2c:	681b      	ldr	r3, [r3, #0]
 800fd2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fd32:	189a      	adds	r2, r3, r2
 800fd34:	2a01      	cmp	r2, #1
 800fd36:	f240 80d6 	bls.w	800fee6 <ai_platform_outputs_get+0x1de>
 800fd3a:	f240 4249 	movw	r2, #1097	@ 0x449
 800fd3e:	4293      	cmp	r3, r2
 800fd40:	f000 80d1 	beq.w	800fee6 <ai_platform_outputs_get+0x1de>
 800fd44:	4a9e      	ldr	r2, [pc, #632]	@ (800ffc0 <ai_platform_outputs_get+0x2b8>)
 800fd46:	6813      	ldr	r3, [r2, #0]
 800fd48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fd4c:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 800fd50:	f000 80d8 	beq.w	800ff04 <ai_platform_outputs_get+0x1fc>
 800fd54:	6813      	ldr	r3, [r2, #0]
 800fd56:	f240 4183 	movw	r1, #1155	@ 0x483
 800fd5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fd5e:	428b      	cmp	r3, r1
 800fd60:	f000 8109 	beq.w	800ff76 <ai_platform_outputs_get+0x26e>
 800fd64:	6813      	ldr	r3, [r2, #0]
 800fd66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fd6a:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 800fd6e:	f000 813f 	beq.w	800fff0 <ai_platform_outputs_get+0x2e8>
 800fd72:	6813      	ldr	r3, [r2, #0]
 800fd74:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	f000 810e 	beq.w	800ff9a <ai_platform_outputs_get+0x292>
 800fd7e:	f7ff fc59 	bl	800f634 <_ai_platform_release_crc>
 800fd82:	f8b9 302c 	ldrh.w	r3, [r9, #44]	@ 0x2c
 800fd86:	2b01      	cmp	r3, #1
 800fd88:	f240 80db 	bls.w	800ff42 <ai_platform_outputs_get+0x23a>
 800fd8c:	2100      	movs	r1, #0
 800fd8e:	f8d9 a030 	ldr.w	sl, [r9, #48]	@ 0x30
 800fd92:	f8cd 900c 	str.w	r9, [sp, #12]
 800fd96:	460d      	mov	r5, r1
 800fd98:	4689      	mov	r9, r1
 800fd9a:	e016      	b.n	800fdca <ai_platform_outputs_get+0xc2>
 800fd9c:	9a01      	ldr	r2, [sp, #4]
 800fd9e:	2301      	movs	r3, #1
 800fda0:	f848 3002 	str.w	r3, [r8, r2]
 800fda4:	69b2      	ldr	r2, [r6, #24]
 800fda6:	f04f 0301 	mov.w	r3, #1
 800fdaa:	6856      	ldr	r6, [r2, #4]
 800fdac:	3501      	adds	r5, #1
 800fdae:	f109 091c 	add.w	r9, r9, #28
 800fdb2:	7523      	strb	r3, [r4, #20]
 800fdb4:	2300      	movs	r3, #0
 800fdb6:	6962      	ldr	r2, [r4, #20]
 800fdb8:	60a7      	str	r7, [r4, #8]
 800fdba:	f36b 221f 	bfi	r2, fp, #8, #24
 800fdbe:	6126      	str	r6, [r4, #16]
 800fdc0:	61a1      	str	r1, [r4, #24]
 800fdc2:	60e3      	str	r3, [r4, #12]
 800fdc4:	6162      	str	r2, [r4, #20]
 800fdc6:	e9c4 0c00 	strd	r0, ip, [r4]
 800fdca:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800fdce:	b2ac      	uxth	r4, r5
 800fdd0:	42ab      	cmp	r3, r5
 800fdd2:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 800fdd6:	9301      	str	r3, [sp, #4]
 800fdd8:	f240 80a6 	bls.w	800ff28 <ai_platform_outputs_get+0x220>
 800fddc:	f8da 3010 	ldr.w	r3, [sl, #16]
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	f000 80a1 	beq.w	800ff28 <ai_platform_outputs_get+0x220>
 800fde6:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800fdea:	2e00      	cmp	r6, #0
 800fdec:	f000 809c 	beq.w	800ff28 <ai_platform_outputs_get+0x220>
 800fdf0:	f8da 3014 	ldr.w	r3, [sl, #20]
 800fdf4:	69b2      	ldr	r2, [r6, #24]
 800fdf6:	68f1      	ldr	r1, [r6, #12]
 800fdf8:	6810      	ldr	r0, [r2, #0]
 800fdfa:	9100      	str	r1, [sp, #0]
 800fdfc:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 800fe00:	68b3      	ldr	r3, [r6, #8]
 800fe02:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 800fe06:	444c      	add	r4, r9
 800fe08:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 800fe0c:	f002 fbb8 	bl	8012580 <ai_array_to_buffer_fmt>
 800fe10:	69b2      	ldr	r2, [r6, #24]
 800fe12:	9900      	ldr	r1, [sp, #0]
 800fe14:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800fe18:	2f00      	cmp	r7, #0
 800fe1a:	d0c4      	beq.n	800fda6 <ai_platform_outputs_get+0x9e>
 800fe1c:	2200      	movs	r2, #0
 800fe1e:	f848 2035 	str.w	r2, [r8, r5, lsl #3]
 800fe22:	6832      	ldr	r2, [r6, #0]
 800fe24:	607a      	str	r2, [r7, #4]
 800fe26:	b112      	cbz	r2, 800fe2e <ai_platform_outputs_get+0x126>
 800fe28:	8852      	ldrh	r2, [r2, #2]
 800fe2a:	2a00      	cmp	r2, #0
 800fe2c:	d1b6      	bne.n	800fd9c <ai_platform_outputs_get+0x94>
 800fe2e:	69b2      	ldr	r2, [r6, #24]
 800fe30:	2700      	movs	r7, #0
 800fe32:	e7b8      	b.n	800fda6 <ai_platform_outputs_get+0x9e>
 800fe34:	f7ff fbfc 	bl	800f630 <_ai_platform_acquire_crc>
 800fe38:	4b60      	ldr	r3, [pc, #384]	@ (800ffbc <ai_platform_outputs_get+0x2b4>)
 800fe3a:	f46f 618a 	mvn.w	r1, #1104	@ 0x450
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fe44:	185a      	adds	r2, r3, r1
 800fe46:	2a01      	cmp	r2, #1
 800fe48:	d92a      	bls.n	800fea0 <ai_platform_outputs_get+0x198>
 800fe4a:	f240 4249 	movw	r2, #1097	@ 0x449
 800fe4e:	4293      	cmp	r3, r2
 800fe50:	d026      	beq.n	800fea0 <ai_platform_outputs_get+0x198>
 800fe52:	4a5b      	ldr	r2, [pc, #364]	@ (800ffc0 <ai_platform_outputs_get+0x2b8>)
 800fe54:	6813      	ldr	r3, [r2, #0]
 800fe56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fe5a:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 800fe5e:	d02c      	beq.n	800feba <ai_platform_outputs_get+0x1b2>
 800fe60:	6813      	ldr	r3, [r2, #0]
 800fe62:	f240 4183 	movw	r1, #1155	@ 0x483
 800fe66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fe6a:	428b      	cmp	r3, r1
 800fe6c:	d072      	beq.n	800ff54 <ai_platform_outputs_get+0x24c>
 800fe6e:	6813      	ldr	r3, [r2, #0]
 800fe70:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fe74:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 800fe78:	f000 80ac 	beq.w	800ffd4 <ai_platform_outputs_get+0x2cc>
 800fe7c:	6813      	ldr	r3, [r2, #0]
 800fe7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d129      	bne.n	800feda <ai_platform_outputs_get+0x1d2>
 800fe86:	4a4f      	ldr	r2, [pc, #316]	@ (800ffc4 <ai_platform_outputs_get+0x2bc>)
 800fe88:	2301      	movs	r3, #1
 800fe8a:	6093      	str	r3, [r2, #8]
 800fe8c:	6893      	ldr	r3, [r2, #8]
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d1fc      	bne.n	800fe8c <ai_platform_outputs_get+0x184>
 800fe92:	494d      	ldr	r1, [pc, #308]	@ (800ffc8 <ai_platform_outputs_get+0x2c0>)
 800fe94:	4b4d      	ldr	r3, [pc, #308]	@ (800ffcc <ai_platform_outputs_get+0x2c4>)
 800fe96:	6011      	str	r1, [r2, #0]
 800fe98:	6812      	ldr	r2, [r2, #0]
 800fe9a:	429a      	cmp	r2, r3
 800fe9c:	d01d      	beq.n	800feda <ai_platform_outputs_get+0x1d2>
 800fe9e:	e7fe      	b.n	800fe9e <ai_platform_outputs_get+0x196>
 800fea0:	4a48      	ldr	r2, [pc, #288]	@ (800ffc4 <ai_platform_outputs_get+0x2bc>)
 800fea2:	2301      	movs	r3, #1
 800fea4:	6093      	str	r3, [r2, #8]
 800fea6:	6893      	ldr	r3, [r2, #8]
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d1fc      	bne.n	800fea6 <ai_platform_outputs_get+0x19e>
 800feac:	4946      	ldr	r1, [pc, #280]	@ (800ffc8 <ai_platform_outputs_get+0x2c0>)
 800feae:	4b47      	ldr	r3, [pc, #284]	@ (800ffcc <ai_platform_outputs_get+0x2c4>)
 800feb0:	6011      	str	r1, [r2, #0]
 800feb2:	6812      	ldr	r2, [r2, #0]
 800feb4:	429a      	cmp	r2, r3
 800feb6:	d010      	beq.n	800feda <ai_platform_outputs_get+0x1d2>
 800feb8:	e7fe      	b.n	800feb8 <ai_platform_outputs_get+0x1b0>
 800feba:	4a45      	ldr	r2, [pc, #276]	@ (800ffd0 <ai_platform_outputs_get+0x2c8>)
 800febc:	2301      	movs	r3, #1
 800febe:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 800fec2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d1fb      	bne.n	800fec2 <ai_platform_outputs_get+0x1ba>
 800feca:	493f      	ldr	r1, [pc, #252]	@ (800ffc8 <ai_platform_outputs_get+0x2c0>)
 800fecc:	4b3f      	ldr	r3, [pc, #252]	@ (800ffcc <ai_platform_outputs_get+0x2c4>)
 800fece:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 800fed2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 800fed6:	429a      	cmp	r2, r3
 800fed8:	d113      	bne.n	800ff02 <ai_platform_outputs_get+0x1fa>
 800feda:	f7ff fbab 	bl	800f634 <_ai_platform_release_crc>
 800fede:	2000      	movs	r0, #0
 800fee0:	b005      	add	sp, #20
 800fee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fee6:	4a37      	ldr	r2, [pc, #220]	@ (800ffc4 <ai_platform_outputs_get+0x2bc>)
 800fee8:	2301      	movs	r3, #1
 800feea:	6093      	str	r3, [r2, #8]
 800feec:	6893      	ldr	r3, [r2, #8]
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d1fc      	bne.n	800feec <ai_platform_outputs_get+0x1e4>
 800fef2:	4b35      	ldr	r3, [pc, #212]	@ (800ffc8 <ai_platform_outputs_get+0x2c0>)
 800fef4:	6013      	str	r3, [r2, #0]
 800fef6:	4b35      	ldr	r3, [pc, #212]	@ (800ffcc <ai_platform_outputs_get+0x2c4>)
 800fef8:	6812      	ldr	r2, [r2, #0]
 800fefa:	429a      	cmp	r2, r3
 800fefc:	f43f af3f 	beq.w	800fd7e <ai_platform_outputs_get+0x76>
 800ff00:	e7fe      	b.n	800ff00 <ai_platform_outputs_get+0x1f8>
 800ff02:	e7fe      	b.n	800ff02 <ai_platform_outputs_get+0x1fa>
 800ff04:	4a32      	ldr	r2, [pc, #200]	@ (800ffd0 <ai_platform_outputs_get+0x2c8>)
 800ff06:	2301      	movs	r3, #1
 800ff08:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 800ff0c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d1fb      	bne.n	800ff0c <ai_platform_outputs_get+0x204>
 800ff14:	4b2c      	ldr	r3, [pc, #176]	@ (800ffc8 <ai_platform_outputs_get+0x2c0>)
 800ff16:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 800ff1a:	4b2c      	ldr	r3, [pc, #176]	@ (800ffcc <ai_platform_outputs_get+0x2c4>)
 800ff1c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 800ff20:	429a      	cmp	r2, r3
 800ff22:	f43f af2c 	beq.w	800fd7e <ai_platform_outputs_get+0x76>
 800ff26:	e7fe      	b.n	800ff26 <ai_platform_outputs_get+0x21e>
 800ff28:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800ff2c:	b14c      	cbz	r4, 800ff42 <ai_platform_outputs_get+0x23a>
 800ff2e:	f8da 3014 	ldr.w	r3, [sl, #20]
 800ff32:	6858      	ldr	r0, [r3, #4]
 800ff34:	9b02      	ldr	r3, [sp, #8]
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d0d2      	beq.n	800fee0 <ai_platform_outputs_get+0x1d8>
 800ff3a:	801c      	strh	r4, [r3, #0]
 800ff3c:	b005      	add	sp, #20
 800ff3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff42:	2400      	movs	r4, #0
 800ff44:	2218      	movs	r2, #24
 800ff46:	2111      	movs	r1, #17
 800ff48:	f109 0010 	add.w	r0, r9, #16
 800ff4c:	f000 ffe8 	bl	8010f20 <core_set_error>
 800ff50:	4620      	mov	r0, r4
 800ff52:	e7ef      	b.n	800ff34 <ai_platform_outputs_get+0x22c>
 800ff54:	4a1e      	ldr	r2, [pc, #120]	@ (800ffd0 <ai_platform_outputs_get+0x2c8>)
 800ff56:	2301      	movs	r3, #1
 800ff58:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 800ff5c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d1fb      	bne.n	800ff5c <ai_platform_outputs_get+0x254>
 800ff64:	4918      	ldr	r1, [pc, #96]	@ (800ffc8 <ai_platform_outputs_get+0x2c0>)
 800ff66:	4b19      	ldr	r3, [pc, #100]	@ (800ffcc <ai_platform_outputs_get+0x2c4>)
 800ff68:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 800ff6c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 800ff70:	429a      	cmp	r2, r3
 800ff72:	d0b2      	beq.n	800feda <ai_platform_outputs_get+0x1d2>
 800ff74:	e7fe      	b.n	800ff74 <ai_platform_outputs_get+0x26c>
 800ff76:	4a16      	ldr	r2, [pc, #88]	@ (800ffd0 <ai_platform_outputs_get+0x2c8>)
 800ff78:	2301      	movs	r3, #1
 800ff7a:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 800ff7e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d1fb      	bne.n	800ff7e <ai_platform_outputs_get+0x276>
 800ff86:	4b10      	ldr	r3, [pc, #64]	@ (800ffc8 <ai_platform_outputs_get+0x2c0>)
 800ff88:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 800ff8c:	4b0f      	ldr	r3, [pc, #60]	@ (800ffcc <ai_platform_outputs_get+0x2c4>)
 800ff8e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 800ff92:	429a      	cmp	r2, r3
 800ff94:	f43f aef3 	beq.w	800fd7e <ai_platform_outputs_get+0x76>
 800ff98:	e7fe      	b.n	800ff98 <ai_platform_outputs_get+0x290>
 800ff9a:	4a0a      	ldr	r2, [pc, #40]	@ (800ffc4 <ai_platform_outputs_get+0x2bc>)
 800ff9c:	2301      	movs	r3, #1
 800ff9e:	6093      	str	r3, [r2, #8]
 800ffa0:	6893      	ldr	r3, [r2, #8]
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d1fc      	bne.n	800ffa0 <ai_platform_outputs_get+0x298>
 800ffa6:	4b08      	ldr	r3, [pc, #32]	@ (800ffc8 <ai_platform_outputs_get+0x2c0>)
 800ffa8:	6013      	str	r3, [r2, #0]
 800ffaa:	4b08      	ldr	r3, [pc, #32]	@ (800ffcc <ai_platform_outputs_get+0x2c4>)
 800ffac:	6812      	ldr	r2, [r2, #0]
 800ffae:	429a      	cmp	r2, r3
 800ffb0:	f43f aee5 	beq.w	800fd7e <ai_platform_outputs_get+0x76>
 800ffb4:	e7fe      	b.n	800ffb4 <ai_platform_outputs_get+0x2ac>
 800ffb6:	bf00      	nop
 800ffb8:	a1c00100 	.word	0xa1c00100
 800ffbc:	e0042000 	.word	0xe0042000
 800ffc0:	5c001000 	.word	0x5c001000
 800ffc4:	40023000 	.word	0x40023000
 800ffc8:	f407a5c2 	.word	0xf407a5c2
 800ffcc:	b5e8b5cd 	.word	0xb5e8b5cd
 800ffd0:	58024000 	.word	0x58024000
 800ffd4:	4a0d      	ldr	r2, [pc, #52]	@ (801000c <ai_platform_outputs_get+0x304>)
 800ffd6:	2301      	movs	r3, #1
 800ffd8:	6093      	str	r3, [r2, #8]
 800ffda:	6893      	ldr	r3, [r2, #8]
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d1fc      	bne.n	800ffda <ai_platform_outputs_get+0x2d2>
 800ffe0:	490b      	ldr	r1, [pc, #44]	@ (8010010 <ai_platform_outputs_get+0x308>)
 800ffe2:	4b0c      	ldr	r3, [pc, #48]	@ (8010014 <ai_platform_outputs_get+0x30c>)
 800ffe4:	6011      	str	r1, [r2, #0]
 800ffe6:	6812      	ldr	r2, [r2, #0]
 800ffe8:	429a      	cmp	r2, r3
 800ffea:	f43f af76 	beq.w	800feda <ai_platform_outputs_get+0x1d2>
 800ffee:	e7fe      	b.n	800ffee <ai_platform_outputs_get+0x2e6>
 800fff0:	4a06      	ldr	r2, [pc, #24]	@ (801000c <ai_platform_outputs_get+0x304>)
 800fff2:	2301      	movs	r3, #1
 800fff4:	6093      	str	r3, [r2, #8]
 800fff6:	6893      	ldr	r3, [r2, #8]
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d1fc      	bne.n	800fff6 <ai_platform_outputs_get+0x2ee>
 800fffc:	4b04      	ldr	r3, [pc, #16]	@ (8010010 <ai_platform_outputs_get+0x308>)
 800fffe:	6013      	str	r3, [r2, #0]
 8010000:	4b04      	ldr	r3, [pc, #16]	@ (8010014 <ai_platform_outputs_get+0x30c>)
 8010002:	6812      	ldr	r2, [r2, #0]
 8010004:	429a      	cmp	r2, r3
 8010006:	f43f aeba 	beq.w	800fd7e <ai_platform_outputs_get+0x76>
 801000a:	e7fe      	b.n	801000a <ai_platform_outputs_get+0x302>
 801000c:	40023000 	.word	0x40023000
 8010010:	f407a5c2 	.word	0xf407a5c2
 8010014:	b5e8b5cd 	.word	0xb5e8b5cd

08010018 <ai_platform_network_create>:
 8010018:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801001c:	b083      	sub	sp, #12
 801001e:	4604      	mov	r4, r0
 8010020:	4615      	mov	r5, r2
 8010022:	461e      	mov	r6, r3
 8010024:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 8010028:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 801002c:	f7ff fb00 	bl	800f630 <_ai_platform_acquire_crc>
 8010030:	2800      	cmp	r0, #0
 8010032:	f000 80bd 	beq.w	80101b0 <ai_platform_network_create+0x198>
 8010036:	4ba5      	ldr	r3, [pc, #660]	@ (80102cc <ai_platform_network_create+0x2b4>)
 8010038:	f46f 6c8a 	mvn.w	ip, #1104	@ 0x450
 801003c:	4601      	mov	r1, r0
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010044:	eb03 020c 	add.w	r2, r3, ip
 8010048:	2a01      	cmp	r2, #1
 801004a:	f240 80a8 	bls.w	801019e <ai_platform_network_create+0x186>
 801004e:	f240 4249 	movw	r2, #1097	@ 0x449
 8010052:	4293      	cmp	r3, r2
 8010054:	f000 80a3 	beq.w	801019e <ai_platform_network_create+0x186>
 8010058:	4a9d      	ldr	r2, [pc, #628]	@ (80102d0 <ai_platform_network_create+0x2b8>)
 801005a:	6813      	ldr	r3, [r2, #0]
 801005c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010060:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8010064:	f000 80b9 	beq.w	80101da <ai_platform_network_create+0x1c2>
 8010068:	6813      	ldr	r3, [r2, #0]
 801006a:	f240 4c83 	movw	ip, #1155	@ 0x483
 801006e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010072:	4563      	cmp	r3, ip
 8010074:	f000 80a1 	beq.w	80101ba <ai_platform_network_create+0x1a2>
 8010078:	6813      	ldr	r3, [r2, #0]
 801007a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801007e:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8010082:	f000 8153 	beq.w	801032c <ai_platform_network_create+0x314>
 8010086:	6813      	ldr	r3, [r2, #0]
 8010088:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801008c:	2b00      	cmp	r3, #0
 801008e:	f040 808d 	bne.w	80101ac <ai_platform_network_create+0x194>
 8010092:	4a90      	ldr	r2, [pc, #576]	@ (80102d4 <ai_platform_network_create+0x2bc>)
 8010094:	2318      	movs	r3, #24
 8010096:	6093      	str	r3, [r2, #8]
 8010098:	6893      	ldr	r3, [r2, #8]
 801009a:	2b18      	cmp	r3, #24
 801009c:	f040 8086 	bne.w	80101ac <ai_platform_network_create+0x194>
 80100a0:	2301      	movs	r3, #1
 80100a2:	6093      	str	r3, [r2, #8]
 80100a4:	6893      	ldr	r3, [r2, #8]
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d1fc      	bne.n	80100a4 <ai_platform_network_create+0x8c>
 80100aa:	4608      	mov	r0, r1
 80100ac:	f7ff fac2 	bl	800f634 <_ai_platform_release_crc>
 80100b0:	f7ff fabe 	bl	800f630 <_ai_platform_acquire_crc>
 80100b4:	4b85      	ldr	r3, [pc, #532]	@ (80102cc <ai_platform_network_create+0x2b4>)
 80100b6:	f46f 628a 	mvn.w	r2, #1104	@ 0x450
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80100c0:	189a      	adds	r2, r3, r2
 80100c2:	2a01      	cmp	r2, #1
 80100c4:	f240 809f 	bls.w	8010206 <ai_platform_network_create+0x1ee>
 80100c8:	f240 4249 	movw	r2, #1097	@ 0x449
 80100cc:	4293      	cmp	r3, r2
 80100ce:	f000 809a 	beq.w	8010206 <ai_platform_network_create+0x1ee>
 80100d2:	4a7f      	ldr	r2, [pc, #508]	@ (80102d0 <ai_platform_network_create+0x2b8>)
 80100d4:	6813      	ldr	r3, [r2, #0]
 80100d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80100da:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 80100de:	f000 80a0 	beq.w	8010222 <ai_platform_network_create+0x20a>
 80100e2:	6813      	ldr	r3, [r2, #0]
 80100e4:	f240 4183 	movw	r1, #1155	@ 0x483
 80100e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80100ec:	428b      	cmp	r3, r1
 80100ee:	f000 80bf 	beq.w	8010270 <ai_platform_network_create+0x258>
 80100f2:	6813      	ldr	r3, [r2, #0]
 80100f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80100f8:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 80100fc:	f000 8123 	beq.w	8010346 <ai_platform_network_create+0x32e>
 8010100:	6813      	ldr	r3, [r2, #0]
 8010102:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010106:	2b00      	cmp	r3, #0
 8010108:	f000 80c4 	beq.w	8010294 <ai_platform_network_create+0x27c>
 801010c:	f7ff fa92 	bl	800f634 <_ai_platform_release_crc>
 8010110:	2c00      	cmp	r4, #0
 8010112:	f000 80aa 	beq.w	801026a <ai_platform_network_create+0x252>
 8010116:	4b70      	ldr	r3, [pc, #448]	@ (80102d8 <ai_platform_network_create+0x2c0>)
 8010118:	602b      	str	r3, [r5, #0]
 801011a:	6025      	str	r5, [r4, #0]
 801011c:	f000 fef8 	bl	8010f10 <core_init>
 8010120:	2800      	cmp	r0, #0
 8010122:	f000 8090 	beq.w	8010246 <ai_platform_network_create+0x22e>
 8010126:	f7ff fa83 	bl	800f630 <_ai_platform_acquire_crc>
 801012a:	4b68      	ldr	r3, [pc, #416]	@ (80102cc <ai_platform_network_create+0x2b4>)
 801012c:	f46f 618a 	mvn.w	r1, #1104	@ 0x450
 8010130:	681b      	ldr	r3, [r3, #0]
 8010132:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010136:	185a      	adds	r2, r3, r1
 8010138:	2a01      	cmp	r2, #1
 801013a:	f240 80b9 	bls.w	80102b0 <ai_platform_network_create+0x298>
 801013e:	f240 4249 	movw	r2, #1097	@ 0x449
 8010142:	4293      	cmp	r3, r2
 8010144:	f000 80b4 	beq.w	80102b0 <ai_platform_network_create+0x298>
 8010148:	4a61      	ldr	r2, [pc, #388]	@ (80102d0 <ai_platform_network_create+0x2b8>)
 801014a:	6813      	ldr	r3, [r2, #0]
 801014c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010150:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8010154:	f000 80c8 	beq.w	80102e8 <ai_platform_network_create+0x2d0>
 8010158:	6813      	ldr	r3, [r2, #0]
 801015a:	f240 4183 	movw	r1, #1155	@ 0x483
 801015e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010162:	428b      	cmp	r3, r1
 8010164:	f000 8107 	beq.w	8010376 <ai_platform_network_create+0x35e>
 8010168:	6813      	ldr	r3, [r2, #0]
 801016a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801016e:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8010172:	f000 8111 	beq.w	8010398 <ai_platform_network_create+0x380>
 8010176:	6813      	ldr	r3, [r2, #0]
 8010178:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801017c:	2b00      	cmp	r3, #0
 801017e:	f040 80c3 	bne.w	8010308 <ai_platform_network_create+0x2f0>
 8010182:	4b54      	ldr	r3, [pc, #336]	@ (80102d4 <ai_platform_network_create+0x2bc>)
 8010184:	2201      	movs	r2, #1
 8010186:	609a      	str	r2, [r3, #8]
 8010188:	689a      	ldr	r2, [r3, #8]
 801018a:	2a00      	cmp	r2, #0
 801018c:	d1fc      	bne.n	8010188 <ai_platform_network_create+0x170>
 801018e:	4a53      	ldr	r2, [pc, #332]	@ (80102dc <ai_platform_network_create+0x2c4>)
 8010190:	601a      	str	r2, [r3, #0]
 8010192:	681a      	ldr	r2, [r3, #0]
 8010194:	4b52      	ldr	r3, [pc, #328]	@ (80102e0 <ai_platform_network_create+0x2c8>)
 8010196:	429a      	cmp	r2, r3
 8010198:	f000 80b6 	beq.w	8010308 <ai_platform_network_create+0x2f0>
 801019c:	e7fe      	b.n	801019c <ai_platform_network_create+0x184>
 801019e:	4b4d      	ldr	r3, [pc, #308]	@ (80102d4 <ai_platform_network_create+0x2bc>)
 80101a0:	2218      	movs	r2, #24
 80101a2:	609a      	str	r2, [r3, #8]
 80101a4:	689a      	ldr	r2, [r3, #8]
 80101a6:	2a18      	cmp	r2, #24
 80101a8:	d027      	beq.n	80101fa <ai_platform_network_create+0x1e2>
 80101aa:	4608      	mov	r0, r1
 80101ac:	f7ff fa42 	bl	800f634 <_ai_platform_release_crc>
 80101b0:	f244 1033 	movw	r0, #16691	@ 0x4133
 80101b4:	b003      	add	sp, #12
 80101b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80101ba:	4a4a      	ldr	r2, [pc, #296]	@ (80102e4 <ai_platform_network_create+0x2cc>)
 80101bc:	2318      	movs	r3, #24
 80101be:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 80101c2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 80101c6:	2b18      	cmp	r3, #24
 80101c8:	d1f0      	bne.n	80101ac <ai_platform_network_create+0x194>
 80101ca:	2301      	movs	r3, #1
 80101cc:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 80101d0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d1fb      	bne.n	80101d0 <ai_platform_network_create+0x1b8>
 80101d8:	e767      	b.n	80100aa <ai_platform_network_create+0x92>
 80101da:	4a42      	ldr	r2, [pc, #264]	@ (80102e4 <ai_platform_network_create+0x2cc>)
 80101dc:	2318      	movs	r3, #24
 80101de:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 80101e2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 80101e6:	2b18      	cmp	r3, #24
 80101e8:	d1e0      	bne.n	80101ac <ai_platform_network_create+0x194>
 80101ea:	2301      	movs	r3, #1
 80101ec:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 80101f0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	d1fb      	bne.n	80101f0 <ai_platform_network_create+0x1d8>
 80101f8:	e757      	b.n	80100aa <ai_platform_network_create+0x92>
 80101fa:	2201      	movs	r2, #1
 80101fc:	609a      	str	r2, [r3, #8]
 80101fe:	689a      	ldr	r2, [r3, #8]
 8010200:	2a00      	cmp	r2, #0
 8010202:	d1fc      	bne.n	80101fe <ai_platform_network_create+0x1e6>
 8010204:	e751      	b.n	80100aa <ai_platform_network_create+0x92>
 8010206:	4a33      	ldr	r2, [pc, #204]	@ (80102d4 <ai_platform_network_create+0x2bc>)
 8010208:	2301      	movs	r3, #1
 801020a:	6093      	str	r3, [r2, #8]
 801020c:	6891      	ldr	r1, [r2, #8]
 801020e:	2900      	cmp	r1, #0
 8010210:	d1fc      	bne.n	801020c <ai_platform_network_create+0x1f4>
 8010212:	4b32      	ldr	r3, [pc, #200]	@ (80102dc <ai_platform_network_create+0x2c4>)
 8010214:	6013      	str	r3, [r2, #0]
 8010216:	4b32      	ldr	r3, [pc, #200]	@ (80102e0 <ai_platform_network_create+0x2c8>)
 8010218:	6812      	ldr	r2, [r2, #0]
 801021a:	429a      	cmp	r2, r3
 801021c:	f43f af76 	beq.w	801010c <ai_platform_network_create+0xf4>
 8010220:	e7fe      	b.n	8010220 <ai_platform_network_create+0x208>
 8010222:	4a30      	ldr	r2, [pc, #192]	@ (80102e4 <ai_platform_network_create+0x2cc>)
 8010224:	2301      	movs	r3, #1
 8010226:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 801022a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 801022e:	2b00      	cmp	r3, #0
 8010230:	d1fb      	bne.n	801022a <ai_platform_network_create+0x212>
 8010232:	4b2a      	ldr	r3, [pc, #168]	@ (80102dc <ai_platform_network_create+0x2c4>)
 8010234:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 8010238:	4b29      	ldr	r3, [pc, #164]	@ (80102e0 <ai_platform_network_create+0x2c8>)
 801023a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 801023e:	429a      	cmp	r2, r3
 8010240:	f43f af64 	beq.w	801010c <ai_platform_network_create+0xf4>
 8010244:	e7fe      	b.n	8010244 <ai_platform_network_create+0x22c>
 8010246:	f04f 0930 	mov.w	r9, #48	@ 0x30
 801024a:	2300      	movs	r3, #0
 801024c:	6023      	str	r3, [r4, #0]
 801024e:	2410      	movs	r4, #16
 8010250:	4642      	mov	r2, r8
 8010252:	4639      	mov	r1, r7
 8010254:	4630      	mov	r0, r6
 8010256:	f002 fa37 	bl	80126c8 <ai_version_get>
 801025a:	4603      	mov	r3, r0
 801025c:	2000      	movs	r0, #0
 801025e:	64ab      	str	r3, [r5, #72]	@ 0x48
 8010260:	f369 0007 	bfi	r0, r9, #0, #8
 8010264:	f364 201f 	bfi	r0, r4, #8, #24
 8010268:	e7a4      	b.n	80101b4 <ai_platform_network_create+0x19c>
 801026a:	f241 0010 	movw	r0, #4112	@ 0x1010
 801026e:	e7a1      	b.n	80101b4 <ai_platform_network_create+0x19c>
 8010270:	4a1c      	ldr	r2, [pc, #112]	@ (80102e4 <ai_platform_network_create+0x2cc>)
 8010272:	2301      	movs	r3, #1
 8010274:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8010278:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 801027c:	2b00      	cmp	r3, #0
 801027e:	d1fb      	bne.n	8010278 <ai_platform_network_create+0x260>
 8010280:	4b16      	ldr	r3, [pc, #88]	@ (80102dc <ai_platform_network_create+0x2c4>)
 8010282:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 8010286:	4b16      	ldr	r3, [pc, #88]	@ (80102e0 <ai_platform_network_create+0x2c8>)
 8010288:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 801028c:	429a      	cmp	r2, r3
 801028e:	f43f af3d 	beq.w	801010c <ai_platform_network_create+0xf4>
 8010292:	e7fe      	b.n	8010292 <ai_platform_network_create+0x27a>
 8010294:	4a0f      	ldr	r2, [pc, #60]	@ (80102d4 <ai_platform_network_create+0x2bc>)
 8010296:	2301      	movs	r3, #1
 8010298:	6093      	str	r3, [r2, #8]
 801029a:	6893      	ldr	r3, [r2, #8]
 801029c:	2b00      	cmp	r3, #0
 801029e:	d1fc      	bne.n	801029a <ai_platform_network_create+0x282>
 80102a0:	4b0e      	ldr	r3, [pc, #56]	@ (80102dc <ai_platform_network_create+0x2c4>)
 80102a2:	6013      	str	r3, [r2, #0]
 80102a4:	4b0e      	ldr	r3, [pc, #56]	@ (80102e0 <ai_platform_network_create+0x2c8>)
 80102a6:	6812      	ldr	r2, [r2, #0]
 80102a8:	429a      	cmp	r2, r3
 80102aa:	f43f af2f 	beq.w	801010c <ai_platform_network_create+0xf4>
 80102ae:	e7fe      	b.n	80102ae <ai_platform_network_create+0x296>
 80102b0:	4a08      	ldr	r2, [pc, #32]	@ (80102d4 <ai_platform_network_create+0x2bc>)
 80102b2:	2301      	movs	r3, #1
 80102b4:	6093      	str	r3, [r2, #8]
 80102b6:	6893      	ldr	r3, [r2, #8]
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d1fc      	bne.n	80102b6 <ai_platform_network_create+0x29e>
 80102bc:	4b07      	ldr	r3, [pc, #28]	@ (80102dc <ai_platform_network_create+0x2c4>)
 80102be:	6013      	str	r3, [r2, #0]
 80102c0:	4b07      	ldr	r3, [pc, #28]	@ (80102e0 <ai_platform_network_create+0x2c8>)
 80102c2:	6812      	ldr	r2, [r2, #0]
 80102c4:	429a      	cmp	r2, r3
 80102c6:	d01f      	beq.n	8010308 <ai_platform_network_create+0x2f0>
 80102c8:	e7fe      	b.n	80102c8 <ai_platform_network_create+0x2b0>
 80102ca:	bf00      	nop
 80102cc:	e0042000 	.word	0xe0042000
 80102d0:	5c001000 	.word	0x5c001000
 80102d4:	40023000 	.word	0x40023000
 80102d8:	a1c00100 	.word	0xa1c00100
 80102dc:	f407a5c2 	.word	0xf407a5c2
 80102e0:	b5e8b5cd 	.word	0xb5e8b5cd
 80102e4:	58024000 	.word	0x58024000
 80102e8:	4a33      	ldr	r2, [pc, #204]	@ (80103b8 <ai_platform_network_create+0x3a0>)
 80102ea:	2301      	movs	r3, #1
 80102ec:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 80102f0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d1fb      	bne.n	80102f0 <ai_platform_network_create+0x2d8>
 80102f8:	4b30      	ldr	r3, [pc, #192]	@ (80103bc <ai_platform_network_create+0x3a4>)
 80102fa:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 80102fe:	4b30      	ldr	r3, [pc, #192]	@ (80103c0 <ai_platform_network_create+0x3a8>)
 8010300:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8010304:	429a      	cmp	r2, r3
 8010306:	d12c      	bne.n	8010362 <ai_platform_network_create+0x34a>
 8010308:	f7ff f994 	bl	800f634 <_ai_platform_release_crc>
 801030c:	2200      	movs	r2, #0
 801030e:	4639      	mov	r1, r7
 8010310:	4630      	mov	r0, r6
 8010312:	f002 f9d9 	bl	80126c8 <ai_version_get>
 8010316:	4681      	mov	r9, r0
 8010318:	2200      	movs	r2, #0
 801031a:	2105      	movs	r1, #5
 801031c:	2001      	movs	r0, #1
 801031e:	f002 f9d3 	bl	80126c8 <ai_version_get>
 8010322:	4581      	cmp	r9, r0
 8010324:	d01e      	beq.n	8010364 <ai_platform_network_create+0x34c>
 8010326:	f04f 0901 	mov.w	r9, #1
 801032a:	e78e      	b.n	801024a <ai_platform_network_create+0x232>
 801032c:	4b25      	ldr	r3, [pc, #148]	@ (80103c4 <ai_platform_network_create+0x3ac>)
 801032e:	2218      	movs	r2, #24
 8010330:	609a      	str	r2, [r3, #8]
 8010332:	689a      	ldr	r2, [r3, #8]
 8010334:	2a18      	cmp	r2, #24
 8010336:	f47f af39 	bne.w	80101ac <ai_platform_network_create+0x194>
 801033a:	2201      	movs	r2, #1
 801033c:	609a      	str	r2, [r3, #8]
 801033e:	689a      	ldr	r2, [r3, #8]
 8010340:	2a00      	cmp	r2, #0
 8010342:	d1fc      	bne.n	801033e <ai_platform_network_create+0x326>
 8010344:	e6b1      	b.n	80100aa <ai_platform_network_create+0x92>
 8010346:	4a1f      	ldr	r2, [pc, #124]	@ (80103c4 <ai_platform_network_create+0x3ac>)
 8010348:	2301      	movs	r3, #1
 801034a:	6093      	str	r3, [r2, #8]
 801034c:	6893      	ldr	r3, [r2, #8]
 801034e:	2b00      	cmp	r3, #0
 8010350:	d1fc      	bne.n	801034c <ai_platform_network_create+0x334>
 8010352:	4b1a      	ldr	r3, [pc, #104]	@ (80103bc <ai_platform_network_create+0x3a4>)
 8010354:	6013      	str	r3, [r2, #0]
 8010356:	4b1a      	ldr	r3, [pc, #104]	@ (80103c0 <ai_platform_network_create+0x3a8>)
 8010358:	6812      	ldr	r2, [r2, #0]
 801035a:	429a      	cmp	r2, r3
 801035c:	f43f aed6 	beq.w	801010c <ai_platform_network_create+0xf4>
 8010360:	e7fe      	b.n	8010360 <ai_platform_network_create+0x348>
 8010362:	e7fe      	b.n	8010362 <ai_platform_network_create+0x34a>
 8010364:	4b18      	ldr	r3, [pc, #96]	@ (80103c8 <ai_platform_network_create+0x3b0>)
 8010366:	a801      	add	r0, sp, #4
 8010368:	9301      	str	r3, [sp, #4]
 801036a:	f000 fde5 	bl	8010f38 <ai_check_custom_types>
 801036e:	b300      	cbz	r0, 80103b2 <ai_platform_network_create+0x39a>
 8010370:	2400      	movs	r4, #0
 8010372:	46a1      	mov	r9, r4
 8010374:	e76c      	b.n	8010250 <ai_platform_network_create+0x238>
 8010376:	4b10      	ldr	r3, [pc, #64]	@ (80103b8 <ai_platform_network_create+0x3a0>)
 8010378:	2201      	movs	r2, #1
 801037a:	f8c3 2c08 	str.w	r2, [r3, #3080]	@ 0xc08
 801037e:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	@ 0xc08
 8010382:	2a00      	cmp	r2, #0
 8010384:	d1fb      	bne.n	801037e <ai_platform_network_create+0x366>
 8010386:	4a0d      	ldr	r2, [pc, #52]	@ (80103bc <ai_platform_network_create+0x3a4>)
 8010388:	f8c3 2c00 	str.w	r2, [r3, #3072]	@ 0xc00
 801038c:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	@ 0xc00
 8010390:	4b0b      	ldr	r3, [pc, #44]	@ (80103c0 <ai_platform_network_create+0x3a8>)
 8010392:	429a      	cmp	r2, r3
 8010394:	d0b8      	beq.n	8010308 <ai_platform_network_create+0x2f0>
 8010396:	e7fe      	b.n	8010396 <ai_platform_network_create+0x37e>
 8010398:	4b0a      	ldr	r3, [pc, #40]	@ (80103c4 <ai_platform_network_create+0x3ac>)
 801039a:	2201      	movs	r2, #1
 801039c:	609a      	str	r2, [r3, #8]
 801039e:	689a      	ldr	r2, [r3, #8]
 80103a0:	2a00      	cmp	r2, #0
 80103a2:	d1fc      	bne.n	801039e <ai_platform_network_create+0x386>
 80103a4:	4a05      	ldr	r2, [pc, #20]	@ (80103bc <ai_platform_network_create+0x3a4>)
 80103a6:	601a      	str	r2, [r3, #0]
 80103a8:	681a      	ldr	r2, [r3, #0]
 80103aa:	4b05      	ldr	r3, [pc, #20]	@ (80103c0 <ai_platform_network_create+0x3a8>)
 80103ac:	429a      	cmp	r2, r3
 80103ae:	d0ab      	beq.n	8010308 <ai_platform_network_create+0x2f0>
 80103b0:	e7fe      	b.n	80103b0 <ai_platform_network_create+0x398>
 80103b2:	f04f 0902 	mov.w	r9, #2
 80103b6:	e748      	b.n	801024a <ai_platform_network_create+0x232>
 80103b8:	58024000 	.word	0x58024000
 80103bc:	f407a5c2 	.word	0xf407a5c2
 80103c0:	b5e8b5cd 	.word	0xb5e8b5cd
 80103c4:	40023000 	.word	0x40023000
 80103c8:	84048403 	.word	0x84048403

080103cc <ai_platform_network_init>:
 80103cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80103d0:	2800      	cmp	r0, #0
 80103d2:	d052      	beq.n	801047a <ai_platform_network_init+0xae>
 80103d4:	4bab      	ldr	r3, [pc, #684]	@ (8010684 <ai_platform_network_init+0x2b8>)
 80103d6:	4604      	mov	r4, r0
 80103d8:	6802      	ldr	r2, [r0, #0]
 80103da:	429a      	cmp	r2, r3
 80103dc:	d14d      	bne.n	801047a <ai_platform_network_init+0xae>
 80103de:	460d      	mov	r5, r1
 80103e0:	f7ff f926 	bl	800f630 <_ai_platform_acquire_crc>
 80103e4:	4ba8      	ldr	r3, [pc, #672]	@ (8010688 <ai_platform_network_init+0x2bc>)
 80103e6:	f46f 628a 	mvn.w	r2, #1104	@ 0x450
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80103f0:	189a      	adds	r2, r3, r2
 80103f2:	2a01      	cmp	r2, #1
 80103f4:	f240 809b 	bls.w	801052e <ai_platform_network_init+0x162>
 80103f8:	f240 4249 	movw	r2, #1097	@ 0x449
 80103fc:	4293      	cmp	r3, r2
 80103fe:	f000 8096 	beq.w	801052e <ai_platform_network_init+0x162>
 8010402:	4aa2      	ldr	r2, [pc, #648]	@ (801068c <ai_platform_network_init+0x2c0>)
 8010404:	6813      	ldr	r3, [r2, #0]
 8010406:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801040a:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 801040e:	f000 809d 	beq.w	801054c <ai_platform_network_init+0x180>
 8010412:	6813      	ldr	r3, [r2, #0]
 8010414:	f240 4183 	movw	r1, #1155	@ 0x483
 8010418:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801041c:	428b      	cmp	r3, r1
 801041e:	f000 80e4 	beq.w	80105ea <ai_platform_network_init+0x21e>
 8010422:	6813      	ldr	r3, [r2, #0]
 8010424:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010428:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 801042c:	f000 811b 	beq.w	8010666 <ai_platform_network_init+0x29a>
 8010430:	6813      	ldr	r3, [r2, #0]
 8010432:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010436:	2b00      	cmp	r3, #0
 8010438:	f000 80f9 	beq.w	801062e <ai_platform_network_init+0x262>
 801043c:	f7ff f8fa 	bl	800f634 <_ai_platform_release_crc>
 8010440:	2d00      	cmp	r5, #0
 8010442:	f000 8147 	beq.w	80106d4 <ai_platform_network_init+0x308>
 8010446:	4b92      	ldr	r3, [pc, #584]	@ (8010690 <ai_platform_network_init+0x2c4>)
 8010448:	682a      	ldr	r2, [r5, #0]
 801044a:	429a      	cmp	r2, r3
 801044c:	f040 8090 	bne.w	8010570 <ai_platform_network_init+0x1a4>
 8010450:	692b      	ldr	r3, [r5, #16]
 8010452:	89ae      	ldrh	r6, [r5, #12]
 8010454:	f8b5 c00e 	ldrh.w	ip, [r5, #14]
 8010458:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
 801045c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801045e:	e9c4 1207 	strd	r1, r2, [r4, #28]
 8010462:	2303      	movs	r3, #3
 8010464:	84a6      	strh	r6, [r4, #36]	@ 0x24
 8010466:	4626      	mov	r6, r4
 8010468:	4620      	mov	r0, r4
 801046a:	f8a4 c026 	strh.w	ip, [r4, #38]	@ 0x26
 801046e:	60e3      	str	r3, [r4, #12]
 8010470:	f000 fd8a 	bl	8010f88 <ai_layers_init_all>
 8010474:	4630      	mov	r0, r6
 8010476:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801047a:	f7ff f8d9 	bl	800f630 <_ai_platform_acquire_crc>
 801047e:	4b82      	ldr	r3, [pc, #520]	@ (8010688 <ai_platform_network_init+0x2bc>)
 8010480:	f46f 618a 	mvn.w	r1, #1104	@ 0x450
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801048a:	185a      	adds	r2, r3, r1
 801048c:	2a01      	cmp	r2, #1
 801048e:	d92b      	bls.n	80104e8 <ai_platform_network_init+0x11c>
 8010490:	f240 4249 	movw	r2, #1097	@ 0x449
 8010494:	4293      	cmp	r3, r2
 8010496:	d027      	beq.n	80104e8 <ai_platform_network_init+0x11c>
 8010498:	4a7c      	ldr	r2, [pc, #496]	@ (801068c <ai_platform_network_init+0x2c0>)
 801049a:	6813      	ldr	r3, [r2, #0]
 801049c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80104a0:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 80104a4:	d02d      	beq.n	8010502 <ai_platform_network_init+0x136>
 80104a6:	6813      	ldr	r3, [r2, #0]
 80104a8:	f240 4183 	movw	r1, #1155	@ 0x483
 80104ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80104b0:	428b      	cmp	r3, r1
 80104b2:	f000 8089 	beq.w	80105c8 <ai_platform_network_init+0x1fc>
 80104b6:	6813      	ldr	r3, [r2, #0]
 80104b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80104bc:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 80104c0:	f000 80c3 	beq.w	801064a <ai_platform_network_init+0x27e>
 80104c4:	6813      	ldr	r3, [r2, #0]
 80104c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d129      	bne.n	8010522 <ai_platform_network_init+0x156>
 80104ce:	4a71      	ldr	r2, [pc, #452]	@ (8010694 <ai_platform_network_init+0x2c8>)
 80104d0:	2301      	movs	r3, #1
 80104d2:	6093      	str	r3, [r2, #8]
 80104d4:	6893      	ldr	r3, [r2, #8]
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d1fc      	bne.n	80104d4 <ai_platform_network_init+0x108>
 80104da:	496f      	ldr	r1, [pc, #444]	@ (8010698 <ai_platform_network_init+0x2cc>)
 80104dc:	4b6f      	ldr	r3, [pc, #444]	@ (801069c <ai_platform_network_init+0x2d0>)
 80104de:	6011      	str	r1, [r2, #0]
 80104e0:	6812      	ldr	r2, [r2, #0]
 80104e2:	429a      	cmp	r2, r3
 80104e4:	d01d      	beq.n	8010522 <ai_platform_network_init+0x156>
 80104e6:	e7fe      	b.n	80104e6 <ai_platform_network_init+0x11a>
 80104e8:	4a6a      	ldr	r2, [pc, #424]	@ (8010694 <ai_platform_network_init+0x2c8>)
 80104ea:	2301      	movs	r3, #1
 80104ec:	6093      	str	r3, [r2, #8]
 80104ee:	6893      	ldr	r3, [r2, #8]
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d1fc      	bne.n	80104ee <ai_platform_network_init+0x122>
 80104f4:	4968      	ldr	r1, [pc, #416]	@ (8010698 <ai_platform_network_init+0x2cc>)
 80104f6:	4b69      	ldr	r3, [pc, #420]	@ (801069c <ai_platform_network_init+0x2d0>)
 80104f8:	6011      	str	r1, [r2, #0]
 80104fa:	6812      	ldr	r2, [r2, #0]
 80104fc:	429a      	cmp	r2, r3
 80104fe:	d010      	beq.n	8010522 <ai_platform_network_init+0x156>
 8010500:	e7fe      	b.n	8010500 <ai_platform_network_init+0x134>
 8010502:	4a67      	ldr	r2, [pc, #412]	@ (80106a0 <ai_platform_network_init+0x2d4>)
 8010504:	2301      	movs	r3, #1
 8010506:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 801050a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 801050e:	2b00      	cmp	r3, #0
 8010510:	d1fb      	bne.n	801050a <ai_platform_network_init+0x13e>
 8010512:	4961      	ldr	r1, [pc, #388]	@ (8010698 <ai_platform_network_init+0x2cc>)
 8010514:	4b61      	ldr	r3, [pc, #388]	@ (801069c <ai_platform_network_init+0x2d0>)
 8010516:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 801051a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 801051e:	429a      	cmp	r2, r3
 8010520:	d113      	bne.n	801054a <ai_platform_network_init+0x17e>
 8010522:	2600      	movs	r6, #0
 8010524:	f7ff f886 	bl	800f634 <_ai_platform_release_crc>
 8010528:	4630      	mov	r0, r6
 801052a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801052e:	4a59      	ldr	r2, [pc, #356]	@ (8010694 <ai_platform_network_init+0x2c8>)
 8010530:	2301      	movs	r3, #1
 8010532:	6093      	str	r3, [r2, #8]
 8010534:	6893      	ldr	r3, [r2, #8]
 8010536:	2b00      	cmp	r3, #0
 8010538:	d1fc      	bne.n	8010534 <ai_platform_network_init+0x168>
 801053a:	4b57      	ldr	r3, [pc, #348]	@ (8010698 <ai_platform_network_init+0x2cc>)
 801053c:	6013      	str	r3, [r2, #0]
 801053e:	4b57      	ldr	r3, [pc, #348]	@ (801069c <ai_platform_network_init+0x2d0>)
 8010540:	6812      	ldr	r2, [r2, #0]
 8010542:	429a      	cmp	r2, r3
 8010544:	f43f af7a 	beq.w	801043c <ai_platform_network_init+0x70>
 8010548:	e7fe      	b.n	8010548 <ai_platform_network_init+0x17c>
 801054a:	e7fe      	b.n	801054a <ai_platform_network_init+0x17e>
 801054c:	4a54      	ldr	r2, [pc, #336]	@ (80106a0 <ai_platform_network_init+0x2d4>)
 801054e:	2301      	movs	r3, #1
 8010550:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8010554:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8010558:	2b00      	cmp	r3, #0
 801055a:	d1fb      	bne.n	8010554 <ai_platform_network_init+0x188>
 801055c:	4b4e      	ldr	r3, [pc, #312]	@ (8010698 <ai_platform_network_init+0x2cc>)
 801055e:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 8010562:	4b4e      	ldr	r3, [pc, #312]	@ (801069c <ai_platform_network_init+0x2d0>)
 8010564:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8010568:	429a      	cmp	r2, r3
 801056a:	f43f af67 	beq.w	801043c <ai_platform_network_init+0x70>
 801056e:	e7fe      	b.n	801056e <ai_platform_network_init+0x1a2>
 8010570:	2101      	movs	r1, #1
 8010572:	4628      	mov	r0, r5
 8010574:	f105 081c 	add.w	r8, r5, #28
 8010578:	686e      	ldr	r6, [r5, #4]
 801057a:	f7ff f80b 	bl	800f594 <ai_buffer_get_size>
 801057e:	4607      	mov	r7, r0
 8010580:	2101      	movs	r1, #1
 8010582:	4640      	mov	r0, r8
 8010584:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8010588:	f7ff f804 	bl	800f594 <ai_buffer_get_size>
 801058c:	2f00      	cmp	r7, #0
 801058e:	d13e      	bne.n	801060e <ai_platform_network_init+0x242>
 8010590:	2800      	cmp	r0, #0
 8010592:	f000 808e 	beq.w	80106b2 <ai_platform_network_init+0x2e6>
 8010596:	f1b9 0f00 	cmp.w	r9, #0
 801059a:	f000 8094 	beq.w	80106c6 <ai_platform_network_init+0x2fa>
 801059e:	f04f 0c01 	mov.w	ip, #1
 80105a2:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 80105a4:	2600      	movs	r6, #0
 80105a6:	83e7      	strh	r7, [r4, #30]
 80105a8:	4563      	cmp	r3, ip
 80105aa:	83a6      	strh	r6, [r4, #28]
 80105ac:	d37a      	bcc.n	80106a4 <ai_platform_network_init+0x2d8>
 80105ae:	f1bc 0f00 	cmp.w	ip, #0
 80105b2:	f000 809c 	beq.w	80106ee <ai_platform_network_init+0x322>
 80105b6:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 80105b8:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 80105bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80105be:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 80105c2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80105c6:	e74c      	b.n	8010462 <ai_platform_network_init+0x96>
 80105c8:	4a35      	ldr	r2, [pc, #212]	@ (80106a0 <ai_platform_network_init+0x2d4>)
 80105ca:	2301      	movs	r3, #1
 80105cc:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 80105d0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d1fb      	bne.n	80105d0 <ai_platform_network_init+0x204>
 80105d8:	492f      	ldr	r1, [pc, #188]	@ (8010698 <ai_platform_network_init+0x2cc>)
 80105da:	4b30      	ldr	r3, [pc, #192]	@ (801069c <ai_platform_network_init+0x2d0>)
 80105dc:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 80105e0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 80105e4:	429a      	cmp	r2, r3
 80105e6:	d09c      	beq.n	8010522 <ai_platform_network_init+0x156>
 80105e8:	e7fe      	b.n	80105e8 <ai_platform_network_init+0x21c>
 80105ea:	4a2d      	ldr	r2, [pc, #180]	@ (80106a0 <ai_platform_network_init+0x2d4>)
 80105ec:	2301      	movs	r3, #1
 80105ee:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 80105f2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d1fb      	bne.n	80105f2 <ai_platform_network_init+0x226>
 80105fa:	4b27      	ldr	r3, [pc, #156]	@ (8010698 <ai_platform_network_init+0x2cc>)
 80105fc:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 8010600:	4b26      	ldr	r3, [pc, #152]	@ (801069c <ai_platform_network_init+0x2d0>)
 8010602:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8010606:	429a      	cmp	r2, r3
 8010608:	f43f af18 	beq.w	801043c <ai_platform_network_init+0x70>
 801060c:	e7fe      	b.n	801060c <ai_platform_network_init+0x240>
 801060e:	2800      	cmp	r0, #0
 8010610:	d153      	bne.n	80106ba <ai_platform_network_init+0x2ee>
 8010612:	4680      	mov	r8, r0
 8010614:	4684      	mov	ip, r0
 8010616:	2e00      	cmp	r6, #0
 8010618:	d063      	beq.n	80106e2 <ai_platform_network_init+0x316>
 801061a:	8be6      	ldrh	r6, [r4, #30]
 801061c:	2e00      	cmp	r6, #0
 801061e:	d168      	bne.n	80106f2 <ai_platform_network_init+0x326>
 8010620:	2212      	movs	r2, #18
 8010622:	2116      	movs	r1, #22
 8010624:	f104 0010 	add.w	r0, r4, #16
 8010628:	f000 fc7a 	bl	8010f20 <core_set_error>
 801062c:	e77c      	b.n	8010528 <ai_platform_network_init+0x15c>
 801062e:	4a19      	ldr	r2, [pc, #100]	@ (8010694 <ai_platform_network_init+0x2c8>)
 8010630:	2301      	movs	r3, #1
 8010632:	6093      	str	r3, [r2, #8]
 8010634:	6893      	ldr	r3, [r2, #8]
 8010636:	2b00      	cmp	r3, #0
 8010638:	d1fc      	bne.n	8010634 <ai_platform_network_init+0x268>
 801063a:	4b17      	ldr	r3, [pc, #92]	@ (8010698 <ai_platform_network_init+0x2cc>)
 801063c:	6013      	str	r3, [r2, #0]
 801063e:	4b17      	ldr	r3, [pc, #92]	@ (801069c <ai_platform_network_init+0x2d0>)
 8010640:	6812      	ldr	r2, [r2, #0]
 8010642:	429a      	cmp	r2, r3
 8010644:	f43f aefa 	beq.w	801043c <ai_platform_network_init+0x70>
 8010648:	e7fe      	b.n	8010648 <ai_platform_network_init+0x27c>
 801064a:	4a12      	ldr	r2, [pc, #72]	@ (8010694 <ai_platform_network_init+0x2c8>)
 801064c:	2301      	movs	r3, #1
 801064e:	6093      	str	r3, [r2, #8]
 8010650:	6893      	ldr	r3, [r2, #8]
 8010652:	2b00      	cmp	r3, #0
 8010654:	d1fc      	bne.n	8010650 <ai_platform_network_init+0x284>
 8010656:	4910      	ldr	r1, [pc, #64]	@ (8010698 <ai_platform_network_init+0x2cc>)
 8010658:	4b10      	ldr	r3, [pc, #64]	@ (801069c <ai_platform_network_init+0x2d0>)
 801065a:	6011      	str	r1, [r2, #0]
 801065c:	6812      	ldr	r2, [r2, #0]
 801065e:	429a      	cmp	r2, r3
 8010660:	f43f af5f 	beq.w	8010522 <ai_platform_network_init+0x156>
 8010664:	e7fe      	b.n	8010664 <ai_platform_network_init+0x298>
 8010666:	4a0b      	ldr	r2, [pc, #44]	@ (8010694 <ai_platform_network_init+0x2c8>)
 8010668:	2301      	movs	r3, #1
 801066a:	6093      	str	r3, [r2, #8]
 801066c:	6893      	ldr	r3, [r2, #8]
 801066e:	2b00      	cmp	r3, #0
 8010670:	d1fc      	bne.n	801066c <ai_platform_network_init+0x2a0>
 8010672:	4b09      	ldr	r3, [pc, #36]	@ (8010698 <ai_platform_network_init+0x2cc>)
 8010674:	6013      	str	r3, [r2, #0]
 8010676:	4b09      	ldr	r3, [pc, #36]	@ (801069c <ai_platform_network_init+0x2d0>)
 8010678:	6812      	ldr	r2, [r2, #0]
 801067a:	429a      	cmp	r2, r3
 801067c:	f43f aede 	beq.w	801043c <ai_platform_network_init+0x70>
 8010680:	e7fe      	b.n	8010680 <ai_platform_network_init+0x2b4>
 8010682:	bf00      	nop
 8010684:	a1c00100 	.word	0xa1c00100
 8010688:	e0042000 	.word	0xe0042000
 801068c:	5c001000 	.word	0x5c001000
 8010690:	a1facade 	.word	0xa1facade
 8010694:	40023000 	.word	0x40023000
 8010698:	f407a5c2 	.word	0xf407a5c2
 801069c:	b5e8b5cd 	.word	0xb5e8b5cd
 80106a0:	58024000 	.word	0x58024000
 80106a4:	2213      	movs	r2, #19
 80106a6:	2116      	movs	r1, #22
 80106a8:	f104 0010 	add.w	r0, r4, #16
 80106ac:	f000 fc38 	bl	8010f20 <core_set_error>
 80106b0:	e73a      	b.n	8010528 <ai_platform_network_init+0x15c>
 80106b2:	4607      	mov	r7, r0
 80106b4:	4680      	mov	r8, r0
 80106b6:	4684      	mov	ip, r0
 80106b8:	e773      	b.n	80105a2 <ai_platform_network_init+0x1d6>
 80106ba:	f1b9 0f00 	cmp.w	r9, #0
 80106be:	d002      	beq.n	80106c6 <ai_platform_network_init+0x2fa>
 80106c0:	f04f 0c01 	mov.w	ip, #1
 80106c4:	e7a7      	b.n	8010616 <ai_platform_network_init+0x24a>
 80106c6:	2110      	movs	r1, #16
 80106c8:	2213      	movs	r2, #19
 80106ca:	2600      	movs	r6, #0
 80106cc:	1860      	adds	r0, r4, r1
 80106ce:	f000 fc27 	bl	8010f20 <core_set_error>
 80106d2:	e729      	b.n	8010528 <ai_platform_network_init+0x15c>
 80106d4:	2110      	movs	r1, #16
 80106d6:	2211      	movs	r2, #17
 80106d8:	462e      	mov	r6, r5
 80106da:	1860      	adds	r0, r4, r1
 80106dc:	f000 fc20 	bl	8010f20 <core_set_error>
 80106e0:	e722      	b.n	8010528 <ai_platform_network_init+0x15c>
 80106e2:	2110      	movs	r1, #16
 80106e4:	2212      	movs	r2, #18
 80106e6:	1860      	adds	r0, r4, r1
 80106e8:	f000 fc1a 	bl	8010f20 <core_set_error>
 80106ec:	e71c      	b.n	8010528 <ai_platform_network_init+0x15c>
 80106ee:	4666      	mov	r6, ip
 80106f0:	e6b7      	b.n	8010462 <ai_platform_network_init+0x96>
 80106f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80106f4:	6a26      	ldr	r6, [r4, #32]
 80106f6:	2701      	movs	r7, #1
 80106f8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80106fa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80106fe:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8010702:	e74e      	b.n	80105a2 <ai_platform_network_init+0x1d6>

08010704 <ai_platform_network_post_init>:
 8010704:	b538      	push	{r3, r4, r5, lr}
 8010706:	2800      	cmp	r0, #0
 8010708:	d04e      	beq.n	80107a8 <ai_platform_network_post_init+0xa4>
 801070a:	4b8c      	ldr	r3, [pc, #560]	@ (801093c <ai_platform_network_post_init+0x238>)
 801070c:	4604      	mov	r4, r0
 801070e:	6802      	ldr	r2, [r0, #0]
 8010710:	429a      	cmp	r2, r3
 8010712:	d149      	bne.n	80107a8 <ai_platform_network_post_init+0xa4>
 8010714:	f7fe ff8c 	bl	800f630 <_ai_platform_acquire_crc>
 8010718:	4b89      	ldr	r3, [pc, #548]	@ (8010940 <ai_platform_network_post_init+0x23c>)
 801071a:	f46f 628a 	mvn.w	r2, #1104	@ 0x450
 801071e:	681b      	ldr	r3, [r3, #0]
 8010720:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010724:	189a      	adds	r2, r3, r2
 8010726:	2a01      	cmp	r2, #1
 8010728:	f240 8095 	bls.w	8010856 <ai_platform_network_post_init+0x152>
 801072c:	f240 4249 	movw	r2, #1097	@ 0x449
 8010730:	4293      	cmp	r3, r2
 8010732:	f000 8090 	beq.w	8010856 <ai_platform_network_post_init+0x152>
 8010736:	4a83      	ldr	r2, [pc, #524]	@ (8010944 <ai_platform_network_post_init+0x240>)
 8010738:	6813      	ldr	r3, [r2, #0]
 801073a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801073e:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8010742:	f000 8096 	beq.w	8010872 <ai_platform_network_post_init+0x16e>
 8010746:	6813      	ldr	r3, [r2, #0]
 8010748:	f240 4183 	movw	r1, #1155	@ 0x483
 801074c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010750:	428b      	cmp	r3, r1
 8010752:	f000 80b8 	beq.w	80108c6 <ai_platform_network_post_init+0x1c2>
 8010756:	6813      	ldr	r3, [r2, #0]
 8010758:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801075c:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8010760:	f000 80de 	beq.w	8010920 <ai_platform_network_post_init+0x21c>
 8010764:	6813      	ldr	r3, [r2, #0]
 8010766:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801076a:	2b00      	cmp	r3, #0
 801076c:	f000 80bd 	beq.w	80108ea <ai_platform_network_post_init+0x1e6>
 8010770:	f7fe ff60 	bl	800f634 <_ai_platform_release_crc>
 8010774:	68e3      	ldr	r3, [r4, #12]
 8010776:	f013 0502 	ands.w	r5, r3, #2
 801077a:	f000 808c 	beq.w	8010896 <ai_platform_network_post_init+0x192>
 801077e:	4620      	mov	r0, r4
 8010780:	f000 fc10 	bl	8010fa4 <ai_layers_post_init_all>
 8010784:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8010786:	b16b      	cbz	r3, 80107a4 <ai_platform_network_post_init+0xa0>
 8010788:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 801078a:	e007      	b.n	801079c <ai_platform_network_post_init+0x98>
 801078c:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	@ 0x3c
 8010790:	4798      	blx	r3
 8010792:	692b      	ldr	r3, [r5, #16]
 8010794:	b133      	cbz	r3, 80107a4 <ai_platform_network_post_init+0xa0>
 8010796:	42ab      	cmp	r3, r5
 8010798:	461d      	mov	r5, r3
 801079a:	d003      	beq.n	80107a4 <ai_platform_network_post_init+0xa0>
 801079c:	4629      	mov	r1, r5
 801079e:	2000      	movs	r0, #0
 80107a0:	2d00      	cmp	r5, #0
 80107a2:	d1f3      	bne.n	801078c <ai_platform_network_post_init+0x88>
 80107a4:	2001      	movs	r0, #1
 80107a6:	bd38      	pop	{r3, r4, r5, pc}
 80107a8:	f7fe ff42 	bl	800f630 <_ai_platform_acquire_crc>
 80107ac:	4b64      	ldr	r3, [pc, #400]	@ (8010940 <ai_platform_network_post_init+0x23c>)
 80107ae:	f46f 618a 	mvn.w	r1, #1104	@ 0x450
 80107b2:	681b      	ldr	r3, [r3, #0]
 80107b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80107b8:	185a      	adds	r2, r3, r1
 80107ba:	2a01      	cmp	r2, #1
 80107bc:	d92a      	bls.n	8010814 <ai_platform_network_post_init+0x110>
 80107be:	f240 4249 	movw	r2, #1097	@ 0x449
 80107c2:	4293      	cmp	r3, r2
 80107c4:	d026      	beq.n	8010814 <ai_platform_network_post_init+0x110>
 80107c6:	4a5f      	ldr	r2, [pc, #380]	@ (8010944 <ai_platform_network_post_init+0x240>)
 80107c8:	6813      	ldr	r3, [r2, #0]
 80107ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80107ce:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 80107d2:	d02c      	beq.n	801082e <ai_platform_network_post_init+0x12a>
 80107d4:	6813      	ldr	r3, [r2, #0]
 80107d6:	f240 4183 	movw	r1, #1155	@ 0x483
 80107da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80107de:	428b      	cmp	r3, r1
 80107e0:	d060      	beq.n	80108a4 <ai_platform_network_post_init+0x1a0>
 80107e2:	6813      	ldr	r3, [r2, #0]
 80107e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80107e8:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 80107ec:	f000 808b 	beq.w	8010906 <ai_platform_network_post_init+0x202>
 80107f0:	6813      	ldr	r3, [r2, #0]
 80107f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d129      	bne.n	801084e <ai_platform_network_post_init+0x14a>
 80107fa:	4a53      	ldr	r2, [pc, #332]	@ (8010948 <ai_platform_network_post_init+0x244>)
 80107fc:	2301      	movs	r3, #1
 80107fe:	6093      	str	r3, [r2, #8]
 8010800:	6893      	ldr	r3, [r2, #8]
 8010802:	2b00      	cmp	r3, #0
 8010804:	d1fc      	bne.n	8010800 <ai_platform_network_post_init+0xfc>
 8010806:	4951      	ldr	r1, [pc, #324]	@ (801094c <ai_platform_network_post_init+0x248>)
 8010808:	4b51      	ldr	r3, [pc, #324]	@ (8010950 <ai_platform_network_post_init+0x24c>)
 801080a:	6011      	str	r1, [r2, #0]
 801080c:	6812      	ldr	r2, [r2, #0]
 801080e:	429a      	cmp	r2, r3
 8010810:	d01d      	beq.n	801084e <ai_platform_network_post_init+0x14a>
 8010812:	e7fe      	b.n	8010812 <ai_platform_network_post_init+0x10e>
 8010814:	4a4c      	ldr	r2, [pc, #304]	@ (8010948 <ai_platform_network_post_init+0x244>)
 8010816:	2301      	movs	r3, #1
 8010818:	6093      	str	r3, [r2, #8]
 801081a:	6893      	ldr	r3, [r2, #8]
 801081c:	2b00      	cmp	r3, #0
 801081e:	d1fc      	bne.n	801081a <ai_platform_network_post_init+0x116>
 8010820:	494a      	ldr	r1, [pc, #296]	@ (801094c <ai_platform_network_post_init+0x248>)
 8010822:	4b4b      	ldr	r3, [pc, #300]	@ (8010950 <ai_platform_network_post_init+0x24c>)
 8010824:	6011      	str	r1, [r2, #0]
 8010826:	6812      	ldr	r2, [r2, #0]
 8010828:	429a      	cmp	r2, r3
 801082a:	d010      	beq.n	801084e <ai_platform_network_post_init+0x14a>
 801082c:	e7fe      	b.n	801082c <ai_platform_network_post_init+0x128>
 801082e:	4a49      	ldr	r2, [pc, #292]	@ (8010954 <ai_platform_network_post_init+0x250>)
 8010830:	2301      	movs	r3, #1
 8010832:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8010836:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 801083a:	2b00      	cmp	r3, #0
 801083c:	d1fb      	bne.n	8010836 <ai_platform_network_post_init+0x132>
 801083e:	4943      	ldr	r1, [pc, #268]	@ (801094c <ai_platform_network_post_init+0x248>)
 8010840:	4b43      	ldr	r3, [pc, #268]	@ (8010950 <ai_platform_network_post_init+0x24c>)
 8010842:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 8010846:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 801084a:	429a      	cmp	r2, r3
 801084c:	d110      	bne.n	8010870 <ai_platform_network_post_init+0x16c>
 801084e:	f7fe fef1 	bl	800f634 <_ai_platform_release_crc>
 8010852:	2000      	movs	r0, #0
 8010854:	bd38      	pop	{r3, r4, r5, pc}
 8010856:	4a3c      	ldr	r2, [pc, #240]	@ (8010948 <ai_platform_network_post_init+0x244>)
 8010858:	2301      	movs	r3, #1
 801085a:	6093      	str	r3, [r2, #8]
 801085c:	6893      	ldr	r3, [r2, #8]
 801085e:	2b00      	cmp	r3, #0
 8010860:	d1fc      	bne.n	801085c <ai_platform_network_post_init+0x158>
 8010862:	493a      	ldr	r1, [pc, #232]	@ (801094c <ai_platform_network_post_init+0x248>)
 8010864:	4b3a      	ldr	r3, [pc, #232]	@ (8010950 <ai_platform_network_post_init+0x24c>)
 8010866:	6011      	str	r1, [r2, #0]
 8010868:	6812      	ldr	r2, [r2, #0]
 801086a:	429a      	cmp	r2, r3
 801086c:	d080      	beq.n	8010770 <ai_platform_network_post_init+0x6c>
 801086e:	e7fe      	b.n	801086e <ai_platform_network_post_init+0x16a>
 8010870:	e7fe      	b.n	8010870 <ai_platform_network_post_init+0x16c>
 8010872:	4a38      	ldr	r2, [pc, #224]	@ (8010954 <ai_platform_network_post_init+0x250>)
 8010874:	2301      	movs	r3, #1
 8010876:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 801087a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 801087e:	2b00      	cmp	r3, #0
 8010880:	d1fb      	bne.n	801087a <ai_platform_network_post_init+0x176>
 8010882:	4932      	ldr	r1, [pc, #200]	@ (801094c <ai_platform_network_post_init+0x248>)
 8010884:	4b32      	ldr	r3, [pc, #200]	@ (8010950 <ai_platform_network_post_init+0x24c>)
 8010886:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 801088a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 801088e:	429a      	cmp	r2, r3
 8010890:	f43f af6e 	beq.w	8010770 <ai_platform_network_post_init+0x6c>
 8010894:	e7fe      	b.n	8010894 <ai_platform_network_post_init+0x190>
 8010896:	2210      	movs	r2, #16
 8010898:	2111      	movs	r1, #17
 801089a:	18a0      	adds	r0, r4, r2
 801089c:	f000 fb40 	bl	8010f20 <core_set_error>
 80108a0:	4628      	mov	r0, r5
 80108a2:	bd38      	pop	{r3, r4, r5, pc}
 80108a4:	4a2b      	ldr	r2, [pc, #172]	@ (8010954 <ai_platform_network_post_init+0x250>)
 80108a6:	2301      	movs	r3, #1
 80108a8:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 80108ac:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d1fb      	bne.n	80108ac <ai_platform_network_post_init+0x1a8>
 80108b4:	4925      	ldr	r1, [pc, #148]	@ (801094c <ai_platform_network_post_init+0x248>)
 80108b6:	4b26      	ldr	r3, [pc, #152]	@ (8010950 <ai_platform_network_post_init+0x24c>)
 80108b8:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 80108bc:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 80108c0:	429a      	cmp	r2, r3
 80108c2:	d0c4      	beq.n	801084e <ai_platform_network_post_init+0x14a>
 80108c4:	e7fe      	b.n	80108c4 <ai_platform_network_post_init+0x1c0>
 80108c6:	4a23      	ldr	r2, [pc, #140]	@ (8010954 <ai_platform_network_post_init+0x250>)
 80108c8:	2301      	movs	r3, #1
 80108ca:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 80108ce:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d1fb      	bne.n	80108ce <ai_platform_network_post_init+0x1ca>
 80108d6:	491d      	ldr	r1, [pc, #116]	@ (801094c <ai_platform_network_post_init+0x248>)
 80108d8:	4b1d      	ldr	r3, [pc, #116]	@ (8010950 <ai_platform_network_post_init+0x24c>)
 80108da:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 80108de:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 80108e2:	429a      	cmp	r2, r3
 80108e4:	f43f af44 	beq.w	8010770 <ai_platform_network_post_init+0x6c>
 80108e8:	e7fe      	b.n	80108e8 <ai_platform_network_post_init+0x1e4>
 80108ea:	4a17      	ldr	r2, [pc, #92]	@ (8010948 <ai_platform_network_post_init+0x244>)
 80108ec:	2301      	movs	r3, #1
 80108ee:	6093      	str	r3, [r2, #8]
 80108f0:	6893      	ldr	r3, [r2, #8]
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d1fc      	bne.n	80108f0 <ai_platform_network_post_init+0x1ec>
 80108f6:	4915      	ldr	r1, [pc, #84]	@ (801094c <ai_platform_network_post_init+0x248>)
 80108f8:	4b15      	ldr	r3, [pc, #84]	@ (8010950 <ai_platform_network_post_init+0x24c>)
 80108fa:	6011      	str	r1, [r2, #0]
 80108fc:	6812      	ldr	r2, [r2, #0]
 80108fe:	429a      	cmp	r2, r3
 8010900:	f43f af36 	beq.w	8010770 <ai_platform_network_post_init+0x6c>
 8010904:	e7fe      	b.n	8010904 <ai_platform_network_post_init+0x200>
 8010906:	4a10      	ldr	r2, [pc, #64]	@ (8010948 <ai_platform_network_post_init+0x244>)
 8010908:	2301      	movs	r3, #1
 801090a:	6093      	str	r3, [r2, #8]
 801090c:	6893      	ldr	r3, [r2, #8]
 801090e:	2b00      	cmp	r3, #0
 8010910:	d1fc      	bne.n	801090c <ai_platform_network_post_init+0x208>
 8010912:	490e      	ldr	r1, [pc, #56]	@ (801094c <ai_platform_network_post_init+0x248>)
 8010914:	4b0e      	ldr	r3, [pc, #56]	@ (8010950 <ai_platform_network_post_init+0x24c>)
 8010916:	6011      	str	r1, [r2, #0]
 8010918:	6812      	ldr	r2, [r2, #0]
 801091a:	429a      	cmp	r2, r3
 801091c:	d097      	beq.n	801084e <ai_platform_network_post_init+0x14a>
 801091e:	e7fe      	b.n	801091e <ai_platform_network_post_init+0x21a>
 8010920:	4a09      	ldr	r2, [pc, #36]	@ (8010948 <ai_platform_network_post_init+0x244>)
 8010922:	2301      	movs	r3, #1
 8010924:	6093      	str	r3, [r2, #8]
 8010926:	6893      	ldr	r3, [r2, #8]
 8010928:	2b00      	cmp	r3, #0
 801092a:	d1fc      	bne.n	8010926 <ai_platform_network_post_init+0x222>
 801092c:	4907      	ldr	r1, [pc, #28]	@ (801094c <ai_platform_network_post_init+0x248>)
 801092e:	4b08      	ldr	r3, [pc, #32]	@ (8010950 <ai_platform_network_post_init+0x24c>)
 8010930:	6011      	str	r1, [r2, #0]
 8010932:	6812      	ldr	r2, [r2, #0]
 8010934:	429a      	cmp	r2, r3
 8010936:	f43f af1b 	beq.w	8010770 <ai_platform_network_post_init+0x6c>
 801093a:	e7fe      	b.n	801093a <ai_platform_network_post_init+0x236>
 801093c:	a1c00100 	.word	0xa1c00100
 8010940:	e0042000 	.word	0xe0042000
 8010944:	5c001000 	.word	0x5c001000
 8010948:	40023000 	.word	0x40023000
 801094c:	f407a5c2 	.word	0xf407a5c2
 8010950:	b5e8b5cd 	.word	0xb5e8b5cd
 8010954:	58024000 	.word	0x58024000

08010958 <ai_platform_network_process>:
 8010958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801095c:	b085      	sub	sp, #20
 801095e:	460e      	mov	r6, r1
 8010960:	4605      	mov	r5, r0
 8010962:	9201      	str	r2, [sp, #4]
 8010964:	b120      	cbz	r0, 8010970 <ai_platform_network_process+0x18>
 8010966:	4b24      	ldr	r3, [pc, #144]	@ (80109f8 <ai_platform_network_process+0xa0>)
 8010968:	6802      	ldr	r2, [r0, #0]
 801096a:	429a      	cmp	r2, r3
 801096c:	bf18      	it	ne
 801096e:	2500      	movne	r5, #0
 8010970:	f7fe fe5e 	bl	800f630 <_ai_platform_acquire_crc>
 8010974:	4b21      	ldr	r3, [pc, #132]	@ (80109fc <ai_platform_network_process+0xa4>)
 8010976:	f46f 618a 	mvn.w	r1, #1104	@ 0x450
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010980:	185a      	adds	r2, r3, r1
 8010982:	2a01      	cmp	r2, #1
 8010984:	d92b      	bls.n	80109de <ai_platform_network_process+0x86>
 8010986:	f240 4249 	movw	r2, #1097	@ 0x449
 801098a:	4293      	cmp	r3, r2
 801098c:	d027      	beq.n	80109de <ai_platform_network_process+0x86>
 801098e:	4a1c      	ldr	r2, [pc, #112]	@ (8010a00 <ai_platform_network_process+0xa8>)
 8010990:	6813      	ldr	r3, [r2, #0]
 8010992:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010996:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 801099a:	d039      	beq.n	8010a10 <ai_platform_network_process+0xb8>
 801099c:	6813      	ldr	r3, [r2, #0]
 801099e:	f240 4183 	movw	r1, #1155	@ 0x483
 80109a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80109a6:	428b      	cmp	r3, r1
 80109a8:	f000 819c 	beq.w	8010ce4 <ai_platform_network_process+0x38c>
 80109ac:	6813      	ldr	r3, [r2, #0]
 80109ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80109b2:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 80109b6:	f000 8179 	beq.w	8010cac <ai_platform_network_process+0x354>
 80109ba:	6813      	ldr	r3, [r2, #0]
 80109bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d136      	bne.n	8010a32 <ai_platform_network_process+0xda>
 80109c4:	4a0f      	ldr	r2, [pc, #60]	@ (8010a04 <ai_platform_network_process+0xac>)
 80109c6:	2301      	movs	r3, #1
 80109c8:	6093      	str	r3, [r2, #8]
 80109ca:	6893      	ldr	r3, [r2, #8]
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d1fc      	bne.n	80109ca <ai_platform_network_process+0x72>
 80109d0:	4b0d      	ldr	r3, [pc, #52]	@ (8010a08 <ai_platform_network_process+0xb0>)
 80109d2:	6013      	str	r3, [r2, #0]
 80109d4:	4b0d      	ldr	r3, [pc, #52]	@ (8010a0c <ai_platform_network_process+0xb4>)
 80109d6:	6812      	ldr	r2, [r2, #0]
 80109d8:	429a      	cmp	r2, r3
 80109da:	d02a      	beq.n	8010a32 <ai_platform_network_process+0xda>
 80109dc:	e7fe      	b.n	80109dc <ai_platform_network_process+0x84>
 80109de:	4a09      	ldr	r2, [pc, #36]	@ (8010a04 <ai_platform_network_process+0xac>)
 80109e0:	2301      	movs	r3, #1
 80109e2:	6093      	str	r3, [r2, #8]
 80109e4:	6893      	ldr	r3, [r2, #8]
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d1fc      	bne.n	80109e4 <ai_platform_network_process+0x8c>
 80109ea:	4b07      	ldr	r3, [pc, #28]	@ (8010a08 <ai_platform_network_process+0xb0>)
 80109ec:	6013      	str	r3, [r2, #0]
 80109ee:	4b07      	ldr	r3, [pc, #28]	@ (8010a0c <ai_platform_network_process+0xb4>)
 80109f0:	6812      	ldr	r2, [r2, #0]
 80109f2:	429a      	cmp	r2, r3
 80109f4:	d01d      	beq.n	8010a32 <ai_platform_network_process+0xda>
 80109f6:	e7fe      	b.n	80109f6 <ai_platform_network_process+0x9e>
 80109f8:	a1c00100 	.word	0xa1c00100
 80109fc:	e0042000 	.word	0xe0042000
 8010a00:	5c001000 	.word	0x5c001000
 8010a04:	40023000 	.word	0x40023000
 8010a08:	f407a5c2 	.word	0xf407a5c2
 8010a0c:	b5e8b5cd 	.word	0xb5e8b5cd
 8010a10:	4ab0      	ldr	r2, [pc, #704]	@ (8010cd4 <ai_platform_network_process+0x37c>)
 8010a12:	2301      	movs	r3, #1
 8010a14:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8010a18:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d1fb      	bne.n	8010a18 <ai_platform_network_process+0xc0>
 8010a20:	4bad      	ldr	r3, [pc, #692]	@ (8010cd8 <ai_platform_network_process+0x380>)
 8010a22:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 8010a26:	4bad      	ldr	r3, [pc, #692]	@ (8010cdc <ai_platform_network_process+0x384>)
 8010a28:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8010a2c:	429a      	cmp	r2, r3
 8010a2e:	f040 812b 	bne.w	8010c88 <ai_platform_network_process+0x330>
 8010a32:	f7fe fdff 	bl	800f634 <_ai_platform_release_crc>
 8010a36:	2d00      	cmp	r5, #0
 8010a38:	f000 8172 	beq.w	8010d20 <ai_platform_network_process+0x3c8>
 8010a3c:	8dab      	ldrh	r3, [r5, #44]	@ 0x2c
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	f000 8123 	beq.w	8010c8a <ai_platform_network_process+0x332>
 8010a44:	68eb      	ldr	r3, [r5, #12]
 8010a46:	2200      	movs	r2, #0
 8010a48:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 8010a4c:	f003 0303 	and.w	r3, r3, #3
 8010a50:	616a      	str	r2, [r5, #20]
 8010a52:	2b03      	cmp	r3, #3
 8010a54:	f040 811f 	bne.w	8010c96 <ai_platform_network_process+0x33e>
 8010a58:	2e00      	cmp	r6, #0
 8010a5a:	f000 8156 	beq.w	8010d0a <ai_platform_network_process+0x3b2>
 8010a5e:	fab8 f788 	clz	r7, r8
 8010a62:	097f      	lsrs	r7, r7, #5
 8010a64:	f1b8 0f00 	cmp.w	r8, #0
 8010a68:	f000 814f 	beq.w	8010d0a <ai_platform_network_process+0x3b2>
 8010a6c:	f8b8 3000 	ldrh.w	r3, [r8]
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	f000 814a 	beq.w	8010d0a <ai_platform_network_process+0x3b2>
 8010a76:	69b3      	ldr	r3, [r6, #24]
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	e9cd 3502 	strd	r3, r5, [sp, #8]
 8010a7e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	d072      	beq.n	8010b6c <ai_platform_network_process+0x214>
 8010a86:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8010a8a:	2c00      	cmp	r4, #0
 8010a8c:	d06e      	beq.n	8010b6c <ai_platform_network_process+0x214>
 8010a8e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010a92:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8010a96:	f8d3 a000 	ldr.w	sl, [r3]
 8010a9a:	eb1a 1907 	adds.w	r9, sl, r7, lsl #4
 8010a9e:	f000 8133 	beq.w	8010d08 <ai_platform_network_process+0x3b0>
 8010aa2:	69a3      	ldr	r3, [r4, #24]
 8010aa4:	2101      	movs	r1, #1
 8010aa6:	4630      	mov	r0, r6
 8010aa8:	685d      	ldr	r5, [r3, #4]
 8010aaa:	f7fe fd73 	bl	800f594 <ai_buffer_get_size>
 8010aae:	4285      	cmp	r5, r0
 8010ab0:	f0c0 8138 	bcc.w	8010d24 <ai_platform_network_process+0x3cc>
 8010ab4:	68e0      	ldr	r0, [r4, #12]
 8010ab6:	69b1      	ldr	r1, [r6, #24]
 8010ab8:	68c2      	ldr	r2, [r0, #12]
 8010aba:	68cb      	ldr	r3, [r1, #12]
 8010abc:	429a      	cmp	r2, r3
 8010abe:	f040 8131 	bne.w	8010d24 <ai_platform_network_process+0x3cc>
 8010ac2:	6882      	ldr	r2, [r0, #8]
 8010ac4:	688b      	ldr	r3, [r1, #8]
 8010ac6:	429a      	cmp	r2, r3
 8010ac8:	f040 812c 	bne.w	8010d24 <ai_platform_network_process+0x3cc>
 8010acc:	6842      	ldr	r2, [r0, #4]
 8010ace:	684b      	ldr	r3, [r1, #4]
 8010ad0:	429a      	cmp	r2, r3
 8010ad2:	f040 8127 	bne.w	8010d24 <ai_platform_network_process+0x3cc>
 8010ad6:	69a3      	ldr	r3, [r4, #24]
 8010ad8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010adc:	f001 fde4 	bl	80126a8 <ai_array_get_data_byte_size>
 8010ae0:	4605      	mov	r5, r0
 8010ae2:	4620      	mov	r0, r4
 8010ae4:	f001 fdf6 	bl	80126d4 <get_tensor_byte_size>
 8010ae8:	4285      	cmp	r5, r0
 8010aea:	f0c0 811b 	bcc.w	8010d24 <ai_platform_network_process+0x3cc>
 8010aee:	69a3      	ldr	r3, [r4, #24]
 8010af0:	6818      	ldr	r0, [r3, #0]
 8010af2:	f001 fd45 	bl	8012580 <ai_array_to_buffer_fmt>
 8010af6:	6833      	ldr	r3, [r6, #0]
 8010af8:	4058      	eors	r0, r3
 8010afa:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 8010afe:	f040 81c8 	bne.w	8010e92 <ai_platform_network_process+0x53a>
 8010b02:	6873      	ldr	r3, [r6, #4]
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	f000 81bb 	beq.w	8010e80 <ai_platform_network_process+0x528>
 8010b0a:	69b3      	ldr	r3, [r6, #24]
 8010b0c:	681b      	ldr	r3, [r3, #0]
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	f000 81c8 	beq.w	8010ea4 <ai_platform_network_process+0x54c>
 8010b14:	9a02      	ldr	r2, [sp, #8]
 8010b16:	4620      	mov	r0, r4
 8010b18:	3701      	adds	r7, #1
 8010b1a:	361c      	adds	r6, #28
 8010b1c:	429a      	cmp	r2, r3
 8010b1e:	bf38      	it	cc
 8010b20:	461a      	movcc	r2, r3
 8010b22:	9202      	str	r2, [sp, #8]
 8010b24:	f001 fdd6 	bl	80126d4 <get_tensor_byte_size>
 8010b28:	f8c9 0008 	str.w	r0, [r9, #8]
 8010b2c:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8010b30:	681b      	ldr	r3, [r3, #0]
 8010b32:	fb00 f303 	mul.w	r3, r0, r3
 8010b36:	f8c9 300c 	str.w	r3, [r9, #12]
 8010b3a:	f856 1c18 	ldr.w	r1, [r6, #-24]
 8010b3e:	440b      	add	r3, r1
 8010b40:	f8c9 1004 	str.w	r1, [r9, #4]
 8010b44:	f84a 300b 	str.w	r3, [sl, fp]
 8010b48:	69a0      	ldr	r0, [r4, #24]
 8010b4a:	6803      	ldr	r3, [r0, #0]
 8010b4c:	009a      	lsls	r2, r3, #2
 8010b4e:	f100 80bb 	bmi.w	8010cc8 <ai_platform_network_process+0x370>
 8010b52:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8010b56:	1a9b      	subs	r3, r3, r2
 8010b58:	4419      	add	r1, r3
 8010b5a:	6081      	str	r1, [r0, #8]
 8010b5c:	69a3      	ldr	r3, [r4, #24]
 8010b5e:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8010b62:	60da      	str	r2, [r3, #12]
 8010b64:	f8b8 3000 	ldrh.w	r3, [r8]
 8010b68:	42bb      	cmp	r3, r7
 8010b6a:	d888      	bhi.n	8010a7e <ai_platform_network_process+0x126>
 8010b6c:	9d03      	ldr	r5, [sp, #12]
 8010b6e:	9b01      	ldr	r3, [sp, #4]
 8010b70:	8daa      	ldrh	r2, [r5, #44]	@ 0x2c
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	f000 819f 	beq.w	8010eb6 <ai_platform_network_process+0x55e>
 8010b78:	2a01      	cmp	r2, #1
 8010b7a:	f240 8179 	bls.w	8010e70 <ai_platform_network_process+0x518>
 8010b7e:	f8d5 9030 	ldr.w	r9, [r5, #48]	@ 0x30
 8010b82:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	f000 8172 	beq.w	8010e70 <ai_platform_network_process+0x518>
 8010b8c:	9e01      	ldr	r6, [sp, #4]
 8010b8e:	2700      	movs	r7, #0
 8010b90:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	f000 80d3 	beq.w	8010d40 <ai_platform_network_process+0x3e8>
 8010b9a:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8010b9e:	2c00      	cmp	r4, #0
 8010ba0:	f000 80ce 	beq.w	8010d40 <ai_platform_network_process+0x3e8>
 8010ba4:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8010ba8:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8010bac:	f8d3 8000 	ldr.w	r8, [r3]
 8010bb0:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 8010bb4:	f000 819d 	beq.w	8010ef2 <ai_platform_network_process+0x59a>
 8010bb8:	69a3      	ldr	r3, [r4, #24]
 8010bba:	2101      	movs	r1, #1
 8010bbc:	4630      	mov	r0, r6
 8010bbe:	685b      	ldr	r3, [r3, #4]
 8010bc0:	9301      	str	r3, [sp, #4]
 8010bc2:	f7fe fce7 	bl	800f594 <ai_buffer_get_size>
 8010bc6:	9b01      	ldr	r3, [sp, #4]
 8010bc8:	4283      	cmp	r3, r0
 8010bca:	f0c0 8151 	bcc.w	8010e70 <ai_platform_network_process+0x518>
 8010bce:	68e0      	ldr	r0, [r4, #12]
 8010bd0:	69b1      	ldr	r1, [r6, #24]
 8010bd2:	68c2      	ldr	r2, [r0, #12]
 8010bd4:	68cb      	ldr	r3, [r1, #12]
 8010bd6:	429a      	cmp	r2, r3
 8010bd8:	f040 814a 	bne.w	8010e70 <ai_platform_network_process+0x518>
 8010bdc:	6882      	ldr	r2, [r0, #8]
 8010bde:	688b      	ldr	r3, [r1, #8]
 8010be0:	429a      	cmp	r2, r3
 8010be2:	f040 8145 	bne.w	8010e70 <ai_platform_network_process+0x518>
 8010be6:	6842      	ldr	r2, [r0, #4]
 8010be8:	684b      	ldr	r3, [r1, #4]
 8010bea:	429a      	cmp	r2, r3
 8010bec:	f040 8140 	bne.w	8010e70 <ai_platform_network_process+0x518>
 8010bf0:	69a3      	ldr	r3, [r4, #24]
 8010bf2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010bf6:	f001 fd57 	bl	80126a8 <ai_array_get_data_byte_size>
 8010bfa:	9001      	str	r0, [sp, #4]
 8010bfc:	4620      	mov	r0, r4
 8010bfe:	f001 fd69 	bl	80126d4 <get_tensor_byte_size>
 8010c02:	9b01      	ldr	r3, [sp, #4]
 8010c04:	4283      	cmp	r3, r0
 8010c06:	f0c0 8133 	bcc.w	8010e70 <ai_platform_network_process+0x518>
 8010c0a:	69a3      	ldr	r3, [r4, #24]
 8010c0c:	6818      	ldr	r0, [r3, #0]
 8010c0e:	f001 fcb7 	bl	8012580 <ai_array_to_buffer_fmt>
 8010c12:	6833      	ldr	r3, [r6, #0]
 8010c14:	4058      	eors	r0, r3
 8010c16:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 8010c1a:	f040 815a 	bne.w	8010ed2 <ai_platform_network_process+0x57a>
 8010c1e:	6873      	ldr	r3, [r6, #4]
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	f000 814e 	beq.w	8010ec2 <ai_platform_network_process+0x56a>
 8010c26:	69b3      	ldr	r3, [r6, #24]
 8010c28:	681b      	ldr	r3, [r3, #0]
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	f000 8159 	beq.w	8010ee2 <ai_platform_network_process+0x58a>
 8010c30:	9a02      	ldr	r2, [sp, #8]
 8010c32:	4620      	mov	r0, r4
 8010c34:	3701      	adds	r7, #1
 8010c36:	361c      	adds	r6, #28
 8010c38:	429a      	cmp	r2, r3
 8010c3a:	bf38      	it	cc
 8010c3c:	461a      	movcc	r2, r3
 8010c3e:	9202      	str	r2, [sp, #8]
 8010c40:	f001 fd48 	bl	80126d4 <get_tensor_byte_size>
 8010c44:	f8ca 0008 	str.w	r0, [sl, #8]
 8010c48:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8010c4c:	681b      	ldr	r3, [r3, #0]
 8010c4e:	fb00 f303 	mul.w	r3, r0, r3
 8010c52:	f8ca 300c 	str.w	r3, [sl, #12]
 8010c56:	f856 1c18 	ldr.w	r1, [r6, #-24]
 8010c5a:	440b      	add	r3, r1
 8010c5c:	f8ca 1004 	str.w	r1, [sl, #4]
 8010c60:	f848 300b 	str.w	r3, [r8, fp]
 8010c64:	69a0      	ldr	r0, [r4, #24]
 8010c66:	6803      	ldr	r3, [r0, #0]
 8010c68:	009b      	lsls	r3, r3, #2
 8010c6a:	d464      	bmi.n	8010d36 <ai_platform_network_process+0x3de>
 8010c6c:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8010c70:	1a9b      	subs	r3, r3, r2
 8010c72:	4419      	add	r1, r3
 8010c74:	6081      	str	r1, [r0, #8]
 8010c76:	69a3      	ldr	r3, [r4, #24]
 8010c78:	f8da 2004 	ldr.w	r2, [sl, #4]
 8010c7c:	60da      	str	r2, [r3, #12]
 8010c7e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8010c82:	429f      	cmp	r7, r3
 8010c84:	d384      	bcc.n	8010b90 <ai_platform_network_process+0x238>
 8010c86:	e05b      	b.n	8010d40 <ai_platform_network_process+0x3e8>
 8010c88:	e7fe      	b.n	8010c88 <ai_platform_network_process+0x330>
 8010c8a:	68ea      	ldr	r2, [r5, #12]
 8010c8c:	616b      	str	r3, [r5, #20]
 8010c8e:	f002 0203 	and.w	r2, r2, #3
 8010c92:	2a03      	cmp	r2, #3
 8010c94:	d039      	beq.n	8010d0a <ai_platform_network_process+0x3b2>
 8010c96:	2230      	movs	r2, #48	@ 0x30
 8010c98:	2111      	movs	r1, #17
 8010c9a:	f105 0010 	add.w	r0, r5, #16
 8010c9e:	2400      	movs	r4, #0
 8010ca0:	f000 f93e 	bl	8010f20 <core_set_error>
 8010ca4:	4620      	mov	r0, r4
 8010ca6:	b005      	add	sp, #20
 8010ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010cac:	4a0c      	ldr	r2, [pc, #48]	@ (8010ce0 <ai_platform_network_process+0x388>)
 8010cae:	2301      	movs	r3, #1
 8010cb0:	6093      	str	r3, [r2, #8]
 8010cb2:	6893      	ldr	r3, [r2, #8]
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d1fc      	bne.n	8010cb2 <ai_platform_network_process+0x35a>
 8010cb8:	4b07      	ldr	r3, [pc, #28]	@ (8010cd8 <ai_platform_network_process+0x380>)
 8010cba:	6013      	str	r3, [r2, #0]
 8010cbc:	4b07      	ldr	r3, [pc, #28]	@ (8010cdc <ai_platform_network_process+0x384>)
 8010cbe:	6812      	ldr	r2, [r2, #0]
 8010cc0:	429a      	cmp	r2, r3
 8010cc2:	f43f aeb6 	beq.w	8010a32 <ai_platform_network_process+0xda>
 8010cc6:	e7fe      	b.n	8010cc6 <ai_platform_network_process+0x36e>
 8010cc8:	f8b8 3000 	ldrh.w	r3, [r8]
 8010ccc:	429f      	cmp	r7, r3
 8010cce:	f4ff aed6 	bcc.w	8010a7e <ai_platform_network_process+0x126>
 8010cd2:	e74b      	b.n	8010b6c <ai_platform_network_process+0x214>
 8010cd4:	58024000 	.word	0x58024000
 8010cd8:	f407a5c2 	.word	0xf407a5c2
 8010cdc:	b5e8b5cd 	.word	0xb5e8b5cd
 8010ce0:	40023000 	.word	0x40023000
 8010ce4:	4a87      	ldr	r2, [pc, #540]	@ (8010f04 <ai_platform_network_process+0x5ac>)
 8010ce6:	2301      	movs	r3, #1
 8010ce8:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8010cec:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d1fb      	bne.n	8010cec <ai_platform_network_process+0x394>
 8010cf4:	4b84      	ldr	r3, [pc, #528]	@ (8010f08 <ai_platform_network_process+0x5b0>)
 8010cf6:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 8010cfa:	4b84      	ldr	r3, [pc, #528]	@ (8010f0c <ai_platform_network_process+0x5b4>)
 8010cfc:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8010d00:	429a      	cmp	r2, r3
 8010d02:	f43f ae96 	beq.w	8010a32 <ai_platform_network_process+0xda>
 8010d06:	e7fe      	b.n	8010d06 <ai_platform_network_process+0x3ae>
 8010d08:	9d03      	ldr	r5, [sp, #12]
 8010d0a:	2400      	movs	r4, #0
 8010d0c:	2217      	movs	r2, #23
 8010d0e:	2112      	movs	r1, #18
 8010d10:	f105 0010 	add.w	r0, r5, #16
 8010d14:	f000 f904 	bl	8010f20 <core_set_error>
 8010d18:	4620      	mov	r0, r4
 8010d1a:	b005      	add	sp, #20
 8010d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d20:	462c      	mov	r4, r5
 8010d22:	e7bf      	b.n	8010ca4 <ai_platform_network_process+0x34c>
 8010d24:	9d03      	ldr	r5, [sp, #12]
 8010d26:	2218      	movs	r2, #24
 8010d28:	2112      	movs	r1, #18
 8010d2a:	2400      	movs	r4, #0
 8010d2c:	f105 0010 	add.w	r0, r5, #16
 8010d30:	f000 f8f6 	bl	8010f20 <core_set_error>
 8010d34:	e7b6      	b.n	8010ca4 <ai_platform_network_process+0x34c>
 8010d36:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8010d3a:	429f      	cmp	r7, r3
 8010d3c:	f4ff af28 	bcc.w	8010b90 <ai_platform_network_process+0x238>
 8010d40:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8010d44:	8daa      	ldrh	r2, [r5, #44]	@ 0x2c
 8010d46:	82ab      	strh	r3, [r5, #20]
 8010d48:	2a00      	cmp	r2, #0
 8010d4a:	f040 808b 	bne.w	8010e64 <ai_platform_network_process+0x50c>
 8010d4e:	4616      	mov	r6, r2
 8010d50:	4617      	mov	r7, r2
 8010d52:	8aec      	ldrh	r4, [r5, #22]
 8010d54:	429c      	cmp	r4, r3
 8010d56:	d2a5      	bcs.n	8010ca4 <ai_platform_network_process+0x34c>
 8010d58:	46ab      	mov	fp, r5
 8010d5a:	2e00      	cmp	r6, #0
 8010d5c:	d030      	beq.n	8010dc0 <ai_platform_network_process+0x468>
 8010d5e:	f04f 0800 	mov.w	r8, #0
 8010d62:	e014      	b.n	8010d8e <ai_platform_network_process+0x436>
 8010d64:	6882      	ldr	r2, [r0, #8]
 8010d66:	68c5      	ldr	r5, [r0, #12]
 8010d68:	6863      	ldr	r3, [r4, #4]
 8010d6a:	1b52      	subs	r2, r2, r5
 8010d6c:	4413      	add	r3, r2
 8010d6e:	6083      	str	r3, [r0, #8]
 8010d70:	698b      	ldr	r3, [r1, #24]
 8010d72:	6862      	ldr	r2, [r4, #4]
 8010d74:	60da      	str	r2, [r3, #12]
 8010d76:	f859 200a 	ldr.w	r2, [r9, sl]
 8010d7a:	f108 0801 	add.w	r8, r8, #1
 8010d7e:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8010d82:	440b      	add	r3, r1
 8010d84:	4293      	cmp	r3, r2
 8010d86:	d301      	bcc.n	8010d8c <ai_platform_network_process+0x434>
 8010d88:	68e3      	ldr	r3, [r4, #12]
 8010d8a:	1ad3      	subs	r3, r2, r3
 8010d8c:	6063      	str	r3, [r4, #4]
 8010d8e:	8833      	ldrh	r3, [r6, #0]
 8010d90:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8010d94:	4543      	cmp	r3, r8
 8010d96:	d913      	bls.n	8010dc0 <ai_platform_network_process+0x468>
 8010d98:	6873      	ldr	r3, [r6, #4]
 8010d9a:	b18b      	cbz	r3, 8010dc0 <ai_platform_network_process+0x468>
 8010d9c:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8010da0:	b171      	cbz	r1, 8010dc0 <ai_platform_network_process+0x468>
 8010da2:	6988      	ldr	r0, [r1, #24]
 8010da4:	68b2      	ldr	r2, [r6, #8]
 8010da6:	6803      	ldr	r3, [r0, #0]
 8010da8:	f8d2 9000 	ldr.w	r9, [r2]
 8010dac:	009d      	lsls	r5, r3, #2
 8010dae:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8010db2:	d5d7      	bpl.n	8010d64 <ai_platform_network_process+0x40c>
 8010db4:	6881      	ldr	r1, [r0, #8]
 8010db6:	68a2      	ldr	r2, [r4, #8]
 8010db8:	6860      	ldr	r0, [r4, #4]
 8010dba:	f001 fb59 	bl	8012470 <st_int8_copy>
 8010dbe:	e7da      	b.n	8010d76 <ai_platform_network_process+0x41e>
 8010dc0:	4658      	mov	r0, fp
 8010dc2:	f000 f903 	bl	8010fcc <ai_layers_forward_all>
 8010dc6:	2f00      	cmp	r7, #0
 8010dc8:	d03d      	beq.n	8010e46 <ai_platform_network_process+0x4ee>
 8010dca:	2400      	movs	r4, #0
 8010dcc:	e016      	b.n	8010dfc <ai_platform_network_process+0x4a4>
 8010dce:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8010dd2:	f859 100a 	ldr.w	r1, [r9, sl]
 8010dd6:	4413      	add	r3, r2
 8010dd8:	428b      	cmp	r3, r1
 8010dda:	d302      	bcc.n	8010de2 <ai_platform_network_process+0x48a>
 8010ddc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010de0:	1acb      	subs	r3, r1, r3
 8010de2:	f8c8 3004 	str.w	r3, [r8, #4]
 8010de6:	6981      	ldr	r1, [r0, #24]
 8010de8:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8010dec:	1b52      	subs	r2, r2, r5
 8010dee:	4413      	add	r3, r2
 8010df0:	608b      	str	r3, [r1, #8]
 8010df2:	6983      	ldr	r3, [r0, #24]
 8010df4:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8010df8:	60da      	str	r2, [r3, #12]
 8010dfa:	3401      	adds	r4, #1
 8010dfc:	883b      	ldrh	r3, [r7, #0]
 8010dfe:	42a3      	cmp	r3, r4
 8010e00:	d921      	bls.n	8010e46 <ai_platform_network_process+0x4ee>
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	b1fb      	cbz	r3, 8010e46 <ai_platform_network_process+0x4ee>
 8010e06:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8010e0a:	b1e0      	cbz	r0, 8010e46 <ai_platform_network_process+0x4ee>
 8010e0c:	68ba      	ldr	r2, [r7, #8]
 8010e0e:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8010e12:	6983      	ldr	r3, [r0, #24]
 8010e14:	f8d2 9000 	ldr.w	r9, [r2]
 8010e18:	681a      	ldr	r2, [r3, #0]
 8010e1a:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8010e1e:	0092      	lsls	r2, r2, #2
 8010e20:	d5d5      	bpl.n	8010dce <ai_platform_network_process+0x476>
 8010e22:	6898      	ldr	r0, [r3, #8]
 8010e24:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 8010e28:	f001 fb22 	bl	8012470 <st_int8_copy>
 8010e2c:	f859 200a 	ldr.w	r2, [r9, sl]
 8010e30:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8010e34:	440b      	add	r3, r1
 8010e36:	4293      	cmp	r3, r2
 8010e38:	d302      	bcc.n	8010e40 <ai_platform_network_process+0x4e8>
 8010e3a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010e3e:	1ad3      	subs	r3, r2, r3
 8010e40:	f8c8 3004 	str.w	r3, [r8, #4]
 8010e44:	e7d9      	b.n	8010dfa <ai_platform_network_process+0x4a2>
 8010e46:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 8010e4a:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 8010e4e:	3401      	adds	r4, #1
 8010e50:	b2a4      	uxth	r4, r4
 8010e52:	42a3      	cmp	r3, r4
 8010e54:	f8ab 4016 	strh.w	r4, [fp, #22]
 8010e58:	f63f af7f 	bhi.w	8010d5a <ai_platform_network_process+0x402>
 8010e5c:	4620      	mov	r0, r4
 8010e5e:	b005      	add	sp, #20
 8010e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e64:	2a01      	cmp	r2, #1
 8010e66:	6b2e      	ldr	r6, [r5, #48]	@ 0x30
 8010e68:	d029      	beq.n	8010ebe <ai_platform_network_process+0x566>
 8010e6a:	f106 070c 	add.w	r7, r6, #12
 8010e6e:	e770      	b.n	8010d52 <ai_platform_network_process+0x3fa>
 8010e70:	2218      	movs	r2, #24
 8010e72:	2113      	movs	r1, #19
 8010e74:	f105 0010 	add.w	r0, r5, #16
 8010e78:	2400      	movs	r4, #0
 8010e7a:	f000 f851 	bl	8010f20 <core_set_error>
 8010e7e:	e711      	b.n	8010ca4 <ai_platform_network_process+0x34c>
 8010e80:	9d03      	ldr	r5, [sp, #12]
 8010e82:	4604      	mov	r4, r0
 8010e84:	2217      	movs	r2, #23
 8010e86:	2112      	movs	r1, #18
 8010e88:	f105 0010 	add.w	r0, r5, #16
 8010e8c:	f000 f848 	bl	8010f20 <core_set_error>
 8010e90:	e708      	b.n	8010ca4 <ai_platform_network_process+0x34c>
 8010e92:	9d03      	ldr	r5, [sp, #12]
 8010e94:	2219      	movs	r2, #25
 8010e96:	2112      	movs	r1, #18
 8010e98:	2400      	movs	r4, #0
 8010e9a:	f105 0010 	add.w	r0, r5, #16
 8010e9e:	f000 f83f 	bl	8010f20 <core_set_error>
 8010ea2:	e6ff      	b.n	8010ca4 <ai_platform_network_process+0x34c>
 8010ea4:	9d03      	ldr	r5, [sp, #12]
 8010ea6:	4604      	mov	r4, r0
 8010ea8:	2221      	movs	r2, #33	@ 0x21
 8010eaa:	2112      	movs	r1, #18
 8010eac:	f105 0010 	add.w	r0, r5, #16
 8010eb0:	f000 f836 	bl	8010f20 <core_set_error>
 8010eb4:	e6f6      	b.n	8010ca4 <ai_platform_network_process+0x34c>
 8010eb6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8010eba:	82ab      	strh	r3, [r5, #20]
 8010ebc:	e744      	b.n	8010d48 <ai_platform_network_process+0x3f0>
 8010ebe:	2700      	movs	r7, #0
 8010ec0:	e747      	b.n	8010d52 <ai_platform_network_process+0x3fa>
 8010ec2:	4604      	mov	r4, r0
 8010ec4:	2217      	movs	r2, #23
 8010ec6:	2113      	movs	r1, #19
 8010ec8:	f105 0010 	add.w	r0, r5, #16
 8010ecc:	f000 f828 	bl	8010f20 <core_set_error>
 8010ed0:	e6e8      	b.n	8010ca4 <ai_platform_network_process+0x34c>
 8010ed2:	2219      	movs	r2, #25
 8010ed4:	2113      	movs	r1, #19
 8010ed6:	f105 0010 	add.w	r0, r5, #16
 8010eda:	2400      	movs	r4, #0
 8010edc:	f000 f820 	bl	8010f20 <core_set_error>
 8010ee0:	e6e0      	b.n	8010ca4 <ai_platform_network_process+0x34c>
 8010ee2:	4604      	mov	r4, r0
 8010ee4:	2221      	movs	r2, #33	@ 0x21
 8010ee6:	2113      	movs	r1, #19
 8010ee8:	f105 0010 	add.w	r0, r5, #16
 8010eec:	f000 f818 	bl	8010f20 <core_set_error>
 8010ef0:	e6d8      	b.n	8010ca4 <ai_platform_network_process+0x34c>
 8010ef2:	2217      	movs	r2, #23
 8010ef4:	2113      	movs	r1, #19
 8010ef6:	f105 0010 	add.w	r0, r5, #16
 8010efa:	4654      	mov	r4, sl
 8010efc:	f000 f810 	bl	8010f20 <core_set_error>
 8010f00:	e6d0      	b.n	8010ca4 <ai_platform_network_process+0x34c>
 8010f02:	bf00      	nop
 8010f04:	58024000 	.word	0x58024000
 8010f08:	f407a5c2 	.word	0xf407a5c2
 8010f0c:	b5e8b5cd 	.word	0xb5e8b5cd

08010f10 <core_init>:
 8010f10:	2001      	movs	r0, #1
 8010f12:	4770      	bx	lr

08010f14 <core_get_error>:
 8010f14:	4603      	mov	r3, r0
 8010f16:	2200      	movs	r2, #0
 8010f18:	6800      	ldr	r0, [r0, #0]
 8010f1a:	601a      	str	r2, [r3, #0]
 8010f1c:	4770      	bx	lr
 8010f1e:	bf00      	nop

08010f20 <core_set_error>:
 8010f20:	4603      	mov	r3, r0
 8010f22:	7800      	ldrb	r0, [r0, #0]
 8010f24:	b108      	cbz	r0, 8010f2a <core_set_error+0xa>
 8010f26:	2000      	movs	r0, #0
 8010f28:	4770      	bx	lr
 8010f2a:	7019      	strb	r1, [r3, #0]
 8010f2c:	2001      	movs	r0, #1
 8010f2e:	6819      	ldr	r1, [r3, #0]
 8010f30:	f362 211f 	bfi	r1, r2, #8, #24
 8010f34:	6019      	str	r1, [r3, #0]
 8010f36:	4770      	bx	lr

08010f38 <ai_check_custom_types>:
 8010f38:	b082      	sub	sp, #8
 8010f3a:	4b12      	ldr	r3, [pc, #72]	@ (8010f84 <ai_check_custom_types+0x4c>)
 8010f3c:	9301      	str	r3, [sp, #4]
 8010f3e:	b118      	cbz	r0, 8010f48 <ai_check_custom_types+0x10>
 8010f40:	7803      	ldrb	r3, [r0, #0]
 8010f42:	2b03      	cmp	r3, #3
 8010f44:	d002      	beq.n	8010f4c <ai_check_custom_types+0x14>
 8010f46:	2000      	movs	r0, #0
 8010f48:	b002      	add	sp, #8
 8010f4a:	4770      	bx	lr
 8010f4c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010f50:	4293      	cmp	r3, r2
 8010f52:	d004      	beq.n	8010f5e <ai_check_custom_types+0x26>
 8010f54:	2001      	movs	r0, #1
 8010f56:	f080 0001 	eor.w	r0, r0, #1
 8010f5a:	b002      	add	sp, #8
 8010f5c:	4770      	bx	lr
 8010f5e:	7842      	ldrb	r2, [r0, #1]
 8010f60:	3001      	adds	r0, #1
 8010f62:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010f66:	429a      	cmp	r2, r3
 8010f68:	d1f4      	bne.n	8010f54 <ai_check_custom_types+0x1c>
 8010f6a:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8010f6e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010f72:	429a      	cmp	r2, r3
 8010f74:	d1ee      	bne.n	8010f54 <ai_check_custom_types+0x1c>
 8010f76:	7842      	ldrb	r2, [r0, #1]
 8010f78:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010f7c:	429a      	cmp	r2, r3
 8010f7e:	d1e9      	bne.n	8010f54 <ai_check_custom_types+0x1c>
 8010f80:	2000      	movs	r0, #0
 8010f82:	e7e8      	b.n	8010f56 <ai_check_custom_types+0x1e>
 8010f84:	84048403 	.word	0x84048403

08010f88 <ai_layers_init_all>:
 8010f88:	2100      	movs	r1, #0
 8010f8a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8010f8c:	b13b      	cbz	r3, 8010f9e <ai_layers_init_all+0x16>
 8010f8e:	691a      	ldr	r2, [r3, #16]
 8010f90:	3101      	adds	r1, #1
 8010f92:	60d8      	str	r0, [r3, #12]
 8010f94:	429a      	cmp	r2, r3
 8010f96:	4613      	mov	r3, r2
 8010f98:	d001      	beq.n	8010f9e <ai_layers_init_all+0x16>
 8010f9a:	2a00      	cmp	r2, #0
 8010f9c:	d1f6      	bne.n	8010f8c <ai_layers_init_all+0x4>
 8010f9e:	4608      	mov	r0, r1
 8010fa0:	4770      	bx	lr
 8010fa2:	bf00      	nop

08010fa4 <ai_layers_post_init_all>:
 8010fa4:	b538      	push	{r3, r4, r5, lr}
 8010fa6:	2500      	movs	r5, #0
 8010fa8:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8010faa:	b16c      	cbz	r4, 8010fc8 <ai_layers_post_init_all+0x24>
 8010fac:	6863      	ldr	r3, [r4, #4]
 8010fae:	07db      	lsls	r3, r3, #31
 8010fb0:	d504      	bpl.n	8010fbc <ai_layers_post_init_all+0x18>
 8010fb2:	6a23      	ldr	r3, [r4, #32]
 8010fb4:	4620      	mov	r0, r4
 8010fb6:	b10b      	cbz	r3, 8010fbc <ai_layers_post_init_all+0x18>
 8010fb8:	3501      	adds	r5, #1
 8010fba:	4798      	blx	r3
 8010fbc:	6923      	ldr	r3, [r4, #16]
 8010fbe:	42a3      	cmp	r3, r4
 8010fc0:	461c      	mov	r4, r3
 8010fc2:	d001      	beq.n	8010fc8 <ai_layers_post_init_all+0x24>
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d1f0      	bne.n	8010faa <ai_layers_post_init_all+0x6>
 8010fc8:	4628      	mov	r0, r5
 8010fca:	bd38      	pop	{r3, r4, r5, pc}

08010fcc <ai_layers_forward_all>:
 8010fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010fd0:	f8d0 803c 	ldr.w	r8, [r0, #60]	@ 0x3c
 8010fd4:	4604      	mov	r4, r0
 8010fd6:	f1b8 0f00 	cmp.w	r8, #0
 8010fda:	d02a      	beq.n	8011032 <ai_layers_forward_all+0x66>
 8010fdc:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 8010fde:	6381      	str	r1, [r0, #56]	@ 0x38
 8010fe0:	b319      	cbz	r1, 801102a <ai_layers_forward_all+0x5e>
 8010fe2:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8010fe4:	2001      	movs	r0, #1
 8010fe6:	47c0      	blx	r8
 8010fe8:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8010fea:	b1f6      	cbz	r6, 801102a <ai_layers_forward_all+0x5e>
 8010fec:	2700      	movs	r7, #0
 8010fee:	4631      	mov	r1, r6
 8010ff0:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8010ff2:	2002      	movs	r0, #2
 8010ff4:	47c0      	blx	r8
 8010ff6:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 8010ff8:	4628      	mov	r0, r5
 8010ffa:	696b      	ldr	r3, [r5, #20]
 8010ffc:	4798      	blx	r3
 8010ffe:	692e      	ldr	r6, [r5, #16]
 8011000:	2003      	movs	r0, #3
 8011002:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8011004:	42b5      	cmp	r5, r6
 8011006:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8011008:	d007      	beq.n	801101a <ai_layers_forward_all+0x4e>
 801100a:	47c0      	blx	r8
 801100c:	3701      	adds	r7, #1
 801100e:	63a6      	str	r6, [r4, #56]	@ 0x38
 8011010:	2e00      	cmp	r6, #0
 8011012:	d1ec      	bne.n	8010fee <ai_layers_forward_all+0x22>
 8011014:	4638      	mov	r0, r7
 8011016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801101a:	2003      	movs	r0, #3
 801101c:	3701      	adds	r7, #1
 801101e:	47c0      	blx	r8
 8011020:	2300      	movs	r3, #0
 8011022:	4638      	mov	r0, r7
 8011024:	63a3      	str	r3, [r4, #56]	@ 0x38
 8011026:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801102a:	2700      	movs	r7, #0
 801102c:	4638      	mov	r0, r7
 801102e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011032:	6b45      	ldr	r5, [r0, #52]	@ 0x34
 8011034:	6385      	str	r5, [r0, #56]	@ 0x38
 8011036:	2d00      	cmp	r5, #0
 8011038:	d0f7      	beq.n	801102a <ai_layers_forward_all+0x5e>
 801103a:	4647      	mov	r7, r8
 801103c:	696b      	ldr	r3, [r5, #20]
 801103e:	4628      	mov	r0, r5
 8011040:	4798      	blx	r3
 8011042:	462b      	mov	r3, r5
 8011044:	692d      	ldr	r5, [r5, #16]
 8011046:	429d      	cmp	r5, r3
 8011048:	d004      	beq.n	8011054 <ai_layers_forward_all+0x88>
 801104a:	3701      	adds	r7, #1
 801104c:	63a5      	str	r5, [r4, #56]	@ 0x38
 801104e:	2d00      	cmp	r5, #0
 8011050:	d1f4      	bne.n	801103c <ai_layers_forward_all+0x70>
 8011052:	e7df      	b.n	8011014 <ai_layers_forward_all+0x48>
 8011054:	2300      	movs	r3, #0
 8011056:	3701      	adds	r7, #1
 8011058:	63a3      	str	r3, [r4, #56]	@ 0x38
 801105a:	e7db      	b.n	8011014 <ai_layers_forward_all+0x48>

0801105c <ai_dict_decompress_f32>:
 801105c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011060:	9d08      	ldr	r5, [sp, #32]
 8011062:	2b04      	cmp	r3, #4
 8011064:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8011068:	d00e      	beq.n	8011088 <ai_dict_decompress_f32+0x2c>
 801106a:	2b08      	cmp	r3, #8
 801106c:	d10a      	bne.n	8011084 <ai_dict_decompress_f32+0x28>
 801106e:	42a8      	cmp	r0, r5
 8011070:	d208      	bcs.n	8011084 <ai_dict_decompress_f32+0x28>
 8011072:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011076:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801107a:	681b      	ldr	r3, [r3, #0]
 801107c:	f840 3b04 	str.w	r3, [r0], #4
 8011080:	4285      	cmp	r5, r0
 8011082:	d8f6      	bhi.n	8011072 <ai_dict_decompress_f32+0x16>
 8011084:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011088:	9b07      	ldr	r3, [sp, #28]
 801108a:	085e      	lsrs	r6, r3, #1
 801108c:	f003 0701 	and.w	r7, r3, #1
 8011090:	ea4f 09c6 	mov.w	r9, r6, lsl #3
 8011094:	f106 38ff 	add.w	r8, r6, #4294967295
 8011098:	42a8      	cmp	r0, r5
 801109a:	d2f3      	bcs.n	8011084 <ai_dict_decompress_f32+0x28>
 801109c:	b33e      	cbz	r6, 80110ee <ai_dict_decompress_f32+0x92>
 801109e:	f100 0e08 	add.w	lr, r0, #8
 80110a2:	f101 3cff 	add.w	ip, r1, #4294967295
 80110a6:	eb01 0408 	add.w	r4, r1, r8
 80110aa:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 80110ae:	f10e 0e08 	add.w	lr, lr, #8
 80110b2:	091b      	lsrs	r3, r3, #4
 80110b4:	4564      	cmp	r4, ip
 80110b6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80110ba:	681b      	ldr	r3, [r3, #0]
 80110bc:	f84e 3c10 	str.w	r3, [lr, #-16]
 80110c0:	f89c 3000 	ldrb.w	r3, [ip]
 80110c4:	f003 030f 	and.w	r3, r3, #15
 80110c8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80110cc:	681b      	ldr	r3, [r3, #0]
 80110ce:	f84e 3c0c 	str.w	r3, [lr, #-12]
 80110d2:	d1ea      	bne.n	80110aa <ai_dict_decompress_f32+0x4e>
 80110d4:	4431      	add	r1, r6
 80110d6:	4448      	add	r0, r9
 80110d8:	2f00      	cmp	r7, #0
 80110da:	d0dd      	beq.n	8011098 <ai_dict_decompress_f32+0x3c>
 80110dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80110e0:	091b      	lsrs	r3, r3, #4
 80110e2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	f840 3b04 	str.w	r3, [r0], #4
 80110ec:	e7d4      	b.n	8011098 <ai_dict_decompress_f32+0x3c>
 80110ee:	2f00      	cmp	r7, #0
 80110f0:	d1f4      	bne.n	80110dc <ai_dict_decompress_f32+0x80>
 80110f2:	42a8      	cmp	r0, r5
 80110f4:	d3fd      	bcc.n	80110f2 <ai_dict_decompress_f32+0x96>
 80110f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80110fa:	bf00      	nop

080110fc <forward_conv2d_if32of32wf32>:
 80110fc:	6982      	ldr	r2, [r0, #24]
 80110fe:	8813      	ldrh	r3, [r2, #0]
 8011100:	2b00      	cmp	r3, #0
 8011102:	f000 8092 	beq.w	801122a <forward_conv2d_if32of32wf32+0x12e>
 8011106:	f8d2 c004 	ldr.w	ip, [r2, #4]
 801110a:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801110e:	b102      	cbz	r2, 8011112 <forward_conv2d_if32of32wf32+0x16>
 8011110:	6812      	ldr	r2, [r2, #0]
 8011112:	2b01      	cmp	r3, #1
 8011114:	f000 80b3 	beq.w	801127e <forward_conv2d_if32of32wf32+0x182>
 8011118:	f8dc 1010 	ldr.w	r1, [ip, #16]
 801111c:	b101      	cbz	r1, 8011120 <forward_conv2d_if32of32wf32+0x24>
 801111e:	6809      	ldr	r1, [r1, #0]
 8011120:	2b02      	cmp	r3, #2
 8011122:	f000 8084 	beq.w	801122e <forward_conv2d_if32of32wf32+0x132>
 8011126:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801112a:	f8dc 601c 	ldr.w	r6, [ip, #28]
 801112e:	b0a1      	sub	sp, #132	@ 0x84
 8011130:	2e00      	cmp	r6, #0
 8011132:	f000 809d 	beq.w	8011270 <forward_conv2d_if32of32wf32+0x174>
 8011136:	f8bc 5018 	ldrh.w	r5, [ip, #24]
 801113a:	6834      	ldr	r4, [r6, #0]
 801113c:	2d01      	cmp	r5, #1
 801113e:	f240 8099 	bls.w	8011274 <forward_conv2d_if32of32wf32+0x178>
 8011142:	6876      	ldr	r6, [r6, #4]
 8011144:	f8d2 800c 	ldr.w	r8, [r2, #12]
 8011148:	f8d1 900c 	ldr.w	r9, [r1, #12]
 801114c:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8011150:	6992      	ldr	r2, [r2, #24]
 8011152:	9713      	str	r7, [sp, #76]	@ 0x4c
 8011154:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8011158:	f8d0 e03c 	ldr.w	lr, [r0, #60]	@ 0x3c
 801115c:	9714      	str	r7, [sp, #80]	@ 0x50
 801115e:	f8d9 700c 	ldr.w	r7, [r9, #12]
 8011162:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 8011166:	9715      	str	r7, [sp, #84]	@ 0x54
 8011168:	f8d9 7008 	ldr.w	r7, [r9, #8]
 801116c:	f8d2 b008 	ldr.w	fp, [r2, #8]
 8011170:	9716      	str	r7, [sp, #88]	@ 0x58
 8011172:	f8d8 700c 	ldr.w	r7, [r8, #12]
 8011176:	69a2      	ldr	r2, [r4, #24]
 8011178:	9717      	str	r7, [sp, #92]	@ 0x5c
 801117a:	f8d8 7008 	ldr.w	r7, [r8, #8]
 801117e:	9718      	str	r7, [sp, #96]	@ 0x60
 8011180:	8d07      	ldrh	r7, [r0, #40]	@ 0x28
 8011182:	e9d0 540c 	ldrd	r5, r4, [r0, #48]	@ 0x30
 8011186:	9719      	str	r7, [sp, #100]	@ 0x64
 8011188:	8d87      	ldrh	r7, [r0, #44]	@ 0x2c
 801118a:	69c0      	ldr	r0, [r0, #28]
 801118c:	971a      	str	r7, [sp, #104]	@ 0x68
 801118e:	901f      	str	r0, [sp, #124]	@ 0x7c
 8011190:	f8be 0000 	ldrh.w	r0, [lr]
 8011194:	901b      	str	r0, [sp, #108]	@ 0x6c
 8011196:	f8be 0004 	ldrh.w	r0, [lr, #4]
 801119a:	901c      	str	r0, [sp, #112]	@ 0x70
 801119c:	b2a8      	uxth	r0, r5
 801119e:	901d      	str	r0, [sp, #116]	@ 0x74
 80111a0:	b2a0      	uxth	r0, r4
 80111a2:	901e      	str	r0, [sp, #120]	@ 0x78
 80111a4:	f8d2 9008 	ldr.w	r9, [r2, #8]
 80111a8:	e9da 7801 	ldrd	r7, r8, [sl, #4]
 80111ac:	b10e      	cbz	r6, 80111b2 <forward_conv2d_if32of32wf32+0xb6>
 80111ae:	69b0      	ldr	r0, [r6, #24]
 80111b0:	6886      	ldr	r6, [r0, #8]
 80111b2:	b2a4      	uxth	r4, r4
 80111b4:	6989      	ldr	r1, [r1, #24]
 80111b6:	f108 30ff 	add.w	r0, r8, #4294967295
 80111ba:	b2ad      	uxth	r5, r5
 80111bc:	3c01      	subs	r4, #1
 80111be:	f8d1 a008 	ldr.w	sl, [r1, #8]
 80111c2:	3d01      	subs	r5, #1
 80111c4:	6811      	ldr	r1, [r2, #0]
 80111c6:	fb00 8404 	mla	r4, r0, r4, r8
 80111ca:	1e78      	subs	r0, r7, #1
 80111cc:	fb00 7505 	mla	r5, r0, r5, r7
 80111d0:	f3c1 4043 	ubfx	r0, r1, #17, #4
 80111d4:	2804      	cmp	r0, #4
 80111d6:	d02d      	beq.n	8011234 <forward_conv2d_if32of32wf32+0x138>
 80111d8:	2808      	cmp	r0, #8
 80111da:	d02b      	beq.n	8011234 <forward_conv2d_if32of32wf32+0x138>
 80111dc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80111de:	464a      	mov	r2, r9
 80111e0:	940c      	str	r4, [sp, #48]	@ 0x30
 80111e2:	4651      	mov	r1, sl
 80111e4:	9c1e      	ldr	r4, [sp, #120]	@ 0x78
 80111e6:	4658      	mov	r0, fp
 80111e8:	9706      	str	r7, [sp, #24]
 80111ea:	940f      	str	r4, [sp, #60]	@ 0x3c
 80111ec:	e9cd 530d 	strd	r5, r3, [sp, #52]	@ 0x34
 80111f0:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80111f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80111f4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80111f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80111f8:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80111fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80111fc:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80111fe:	e9cd 8307 	strd	r8, r3, [sp, #28]
 8011202:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8011204:	9305      	str	r3, [sp, #20]
 8011206:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8011208:	9304      	str	r3, [sp, #16]
 801120a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801120c:	9303      	str	r3, [sp, #12]
 801120e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8011210:	9302      	str	r3, [sp, #8]
 8011212:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8011214:	9301      	str	r3, [sp, #4]
 8011216:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011218:	9300      	str	r3, [sp, #0]
 801121a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801121c:	9310      	str	r3, [sp, #64]	@ 0x40
 801121e:	4633      	mov	r3, r6
 8011220:	f000 fe9e 	bl	8011f60 <forward_lite_conv2d_if32of32wf32>
 8011224:	b021      	add	sp, #132	@ 0x84
 8011226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801122a:	685b      	ldr	r3, [r3, #4]
 801122c:	deff      	udf	#255	@ 0xff
 801122e:	2300      	movs	r3, #0
 8011230:	685b      	ldr	r3, [r3, #4]
 8011232:	deff      	udf	#255	@ 0xff
 8011234:	68d2      	ldr	r2, [r2, #12]
 8011236:	2a00      	cmp	r2, #0
 8011238:	d0d0      	beq.n	80111dc <forward_conv2d_if32of32wf32+0xe0>
 801123a:	2b03      	cmp	r3, #3
 801123c:	d022      	beq.n	8011284 <forward_conv2d_if32of32wf32+0x188>
 801123e:	f8dc 3028 	ldr.w	r3, [ip, #40]	@ 0x28
 8011242:	b1cb      	cbz	r3, 8011278 <forward_conv2d_if32of32wf32+0x17c>
 8011244:	681b      	ldr	r3, [r3, #0]
 8011246:	b1bb      	cbz	r3, 8011278 <forward_conv2d_if32of32wf32+0x17c>
 8011248:	f8d3 c018 	ldr.w	ip, [r3, #24]
 801124c:	f3c1 13c6 	ubfx	r3, r1, #7, #7
 8011250:	f3c1 5141 	ubfx	r1, r1, #21, #2
 8011254:	410b      	asrs	r3, r1
 8011256:	e9dc 1001 	ldrd	r1, r0, [ip, #4]
 801125a:	b29b      	uxth	r3, r3
 801125c:	9101      	str	r1, [sp, #4]
 801125e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8011260:	9100      	str	r1, [sp, #0]
 8011262:	4649      	mov	r1, r9
 8011264:	2800      	cmp	r0, #0
 8011266:	bf18      	it	ne
 8011268:	4681      	movne	r9, r0
 801126a:	f7ff fef7 	bl	801105c <ai_dict_decompress_f32>
 801126e:	e7b5      	b.n	80111dc <forward_conv2d_if32of32wf32+0xe0>
 8011270:	4634      	mov	r4, r6
 8011272:	e767      	b.n	8011144 <forward_conv2d_if32of32wf32+0x48>
 8011274:	2600      	movs	r6, #0
 8011276:	e765      	b.n	8011144 <forward_conv2d_if32of32wf32+0x48>
 8011278:	2300      	movs	r3, #0
 801127a:	699b      	ldr	r3, [r3, #24]
 801127c:	deff      	udf	#255	@ 0xff
 801127e:	2300      	movs	r3, #0
 8011280:	685b      	ldr	r3, [r3, #4]
 8011282:	deff      	udf	#255	@ 0xff
 8011284:	2300      	movs	r3, #0
 8011286:	685b      	ldr	r3, [r3, #4]
 8011288:	deff      	udf	#255	@ 0xff
 801128a:	bf00      	nop

0801128c <forward_dense>:
 801128c:	6983      	ldr	r3, [r0, #24]
 801128e:	881a      	ldrh	r2, [r3, #0]
 8011290:	2a00      	cmp	r2, #0
 8011292:	f000 80f0 	beq.w	8011476 <forward_dense+0x1ea>
 8011296:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801129a:	ed2d 8b02 	vpush	{d8}
 801129e:	6858      	ldr	r0, [r3, #4]
 80112a0:	b09b      	sub	sp, #108	@ 0x6c
 80112a2:	6845      	ldr	r5, [r0, #4]
 80112a4:	b105      	cbz	r5, 80112a8 <forward_dense+0x1c>
 80112a6:	682d      	ldr	r5, [r5, #0]
 80112a8:	2a01      	cmp	r2, #1
 80112aa:	f000 840a 	beq.w	8011ac2 <forward_dense+0x836>
 80112ae:	6906      	ldr	r6, [r0, #16]
 80112b0:	b106      	cbz	r6, 80112b4 <forward_dense+0x28>
 80112b2:	6836      	ldr	r6, [r6, #0]
 80112b4:	2a02      	cmp	r2, #2
 80112b6:	f000 80e0 	beq.w	801147a <forward_dense+0x1ee>
 80112ba:	69c3      	ldr	r3, [r0, #28]
 80112bc:	930d      	str	r3, [sp, #52]	@ 0x34
 80112be:	2b00      	cmp	r3, #0
 80112c0:	f000 83f1 	beq.w	8011aa6 <forward_dense+0x81a>
 80112c4:	4619      	mov	r1, r3
 80112c6:	8b03      	ldrh	r3, [r0, #24]
 80112c8:	6809      	ldr	r1, [r1, #0]
 80112ca:	2b01      	cmp	r3, #1
 80112cc:	910f      	str	r1, [sp, #60]	@ 0x3c
 80112ce:	f240 83ec 	bls.w	8011aaa <forward_dense+0x81e>
 80112d2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80112d4:	685b      	ldr	r3, [r3, #4]
 80112d6:	930d      	str	r3, [sp, #52]	@ 0x34
 80112d8:	460b      	mov	r3, r1
 80112da:	f8d3 8018 	ldr.w	r8, [r3, #24]
 80112de:	2a03      	cmp	r2, #3
 80112e0:	68eb      	ldr	r3, [r5, #12]
 80112e2:	68f7      	ldr	r7, [r6, #12]
 80112e4:	685b      	ldr	r3, [r3, #4]
 80112e6:	687c      	ldr	r4, [r7, #4]
 80112e8:	9317      	str	r3, [sp, #92]	@ 0x5c
 80112ea:	f8d8 3000 	ldr.w	r3, [r8]
 80112ee:	4621      	mov	r1, r4
 80112f0:	9419      	str	r4, [sp, #100]	@ 0x64
 80112f2:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 80112f6:	f3c3 5c41 	ubfx	ip, r3, #21, #2
 80112fa:	e9d7 4702 	ldrd	r4, r7, [r7, #8]
 80112fe:	fb01 f404 	mul.w	r4, r1, r4
 8011302:	fa4e f10c 	asr.w	r1, lr, ip
 8011306:	9116      	str	r1, [sp, #88]	@ 0x58
 8011308:	f000 83d8 	beq.w	8011abc <forward_dense+0x830>
 801130c:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 801130e:	f3c3 4343 	ubfx	r3, r3, #17, #4
 8011312:	2a00      	cmp	r2, #0
 8011314:	f000 83c2 	beq.w	8011a9c <forward_dense+0x810>
 8011318:	6812      	ldr	r2, [r2, #0]
 801131a:	2a00      	cmp	r2, #0
 801131c:	f000 83be 	beq.w	8011a9c <forward_dense+0x810>
 8011320:	2b04      	cmp	r3, #4
 8011322:	f8d2 9018 	ldr.w	r9, [r2, #24]
 8011326:	f000 83a8 	beq.w	8011a7a <forward_dense+0x7ee>
 801132a:	2b08      	cmp	r3, #8
 801132c:	f000 83a5 	beq.w	8011a7a <forward_dense+0x7ee>
 8011330:	f04f 0a00 	mov.w	sl, #0
 8011334:	69ab      	ldr	r3, [r5, #24]
 8011336:	fb07 f404 	mul.w	r4, r7, r4
 801133a:	69b2      	ldr	r2, [r6, #24]
 801133c:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8011340:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011342:	6892      	ldr	r2, [r2, #8]
 8011344:	695b      	ldr	r3, [r3, #20]
 8011346:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 801134a:	9206      	str	r2, [sp, #24]
 801134c:	685b      	ldr	r3, [r3, #4]
 801134e:	428a      	cmp	r2, r1
 8011350:	9110      	str	r1, [sp, #64]	@ 0x40
 8011352:	9304      	str	r3, [sp, #16]
 8011354:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011356:	ea4f 0083 	mov.w	r0, r3, lsl #2
 801135a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801135e:	900e      	str	r0, [sp, #56]	@ 0x38
 8011360:	9303      	str	r3, [sp, #12]
 8011362:	f080 8380 	bcs.w	8011a66 <forward_dense+0x7da>
 8011366:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8011368:	4654      	mov	r4, sl
 801136a:	4bb9      	ldr	r3, [pc, #740]	@ (8011650 <forward_dense+0x3c4>)
 801136c:	46ca      	mov	sl, r9
 801136e:	08d0      	lsrs	r0, r2, #3
 8011370:	ed9f 8ab8 	vldr	s16, [pc, #736]	@ 8011654 <forward_dense+0x3c8>
 8011374:	4413      	add	r3, r2
 8011376:	9009      	str	r0, [sp, #36]	@ 0x24
 8011378:	0099      	lsls	r1, r3, #2
 801137a:	f022 0301 	bic.w	r3, r2, #1
 801137e:	f002 0201 	and.w	r2, r2, #1
 8011382:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8011386:	9118      	str	r1, [sp, #96]	@ 0x60
 8011388:	920a      	str	r2, [sp, #40]	@ 0x28
 801138a:	eb09 1240 	add.w	r2, r9, r0, lsl #5
 801138e:	9305      	str	r3, [sp, #20]
 8011390:	f101 0320 	add.w	r3, r1, #32
 8011394:	9207      	str	r2, [sp, #28]
 8011396:	9311      	str	r3, [sp, #68]	@ 0x44
 8011398:	444b      	add	r3, r9
 801139a:	469b      	mov	fp, r3
 801139c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801139e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80113a0:	699b      	ldr	r3, [r3, #24]
 80113a2:	689a      	ldr	r2, [r3, #8]
 80113a4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80113a6:	b10b      	cbz	r3, 80113ac <forward_dense+0x120>
 80113a8:	699b      	ldr	r3, [r3, #24]
 80113aa:	689b      	ldr	r3, [r3, #8]
 80113ac:	2c00      	cmp	r4, #0
 80113ae:	f000 834b 	beq.w	8011a48 <forward_dense+0x7bc>
 80113b2:	9916      	ldr	r1, [sp, #88]	@ 0x58
 80113b4:	2904      	cmp	r1, #4
 80113b6:	f000 826a 	beq.w	801188e <forward_dense+0x602>
 80113ba:	9903      	ldr	r1, [sp, #12]
 80113bc:	9806      	ldr	r0, [sp, #24]
 80113be:	4281      	cmp	r1, r0
 80113c0:	f240 8356 	bls.w	8011a70 <forward_dense+0x7e4>
 80113c4:	4686      	mov	lr, r0
 80113c6:	9818      	ldr	r0, [sp, #96]	@ 0x60
 80113c8:	eb00 090a 	add.w	r9, r0, sl
 80113cc:	0941      	lsrs	r1, r0, #5
 80113ce:	f10a 0004 	add.w	r0, sl, #4
 80113d2:	f8cd 9020 	str.w	r9, [sp, #32]
 80113d6:	9012      	str	r0, [sp, #72]	@ 0x48
 80113d8:	1c48      	adds	r0, r1, #1
 80113da:	00c9      	lsls	r1, r1, #3
 80113dc:	3110      	adds	r1, #16
 80113de:	9115      	str	r1, [sp, #84]	@ 0x54
 80113e0:	00c1      	lsls	r1, r0, #3
 80113e2:	9113      	str	r1, [sp, #76]	@ 0x4c
 80113e4:	eb0a 1140 	add.w	r1, sl, r0, lsl #5
 80113e8:	9114      	str	r1, [sp, #80]	@ 0x50
 80113ea:	f1a9 0104 	sub.w	r1, r9, #4
 80113ee:	f8dd 905c 	ldr.w	r9, [sp, #92]	@ 0x5c
 80113f2:	910c      	str	r1, [sp, #48]	@ 0x30
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	f000 8128 	beq.w	801164a <forward_dense+0x3be>
 80113fa:	ecb3 5a01 	vldmia	r3!, {s10}
 80113fe:	f1b9 0f07 	cmp.w	r9, #7
 8011402:	d83d      	bhi.n	8011480 <forward_dense+0x1f4>
 8011404:	45da      	cmp	sl, fp
 8011406:	d211      	bcs.n	801142c <forward_dense+0x1a0>
 8011408:	eddf 7a92 	vldr	s15, [pc, #584]	@ 8011654 <forward_dense+0x3c8>
 801140c:	4650      	mov	r0, sl
 801140e:	4615      	mov	r5, r2
 8011410:	f815 1b01 	ldrb.w	r1, [r5], #1
 8011414:	ecb0 7a01 	vldmia	r0!, {s14}
 8011418:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801141c:	4558      	cmp	r0, fp
 801141e:	edd1 6a00 	vldr	s13, [r1]
 8011422:	eee6 7a87 	vfma.f32	s15, s13, s14
 8011426:	d3f3      	bcc.n	8011410 <forward_dense+0x184>
 8011428:	ee35 5a27 	vadd.f32	s10, s10, s15
 801142c:	9904      	ldr	r1, [sp, #16]
 801142e:	ecae 5a01 	vstmia	lr!, {s10}
 8011432:	440a      	add	r2, r1
 8011434:	9903      	ldr	r1, [sp, #12]
 8011436:	458e      	cmp	lr, r1
 8011438:	d3dc      	bcc.n	80113f4 <forward_dense+0x168>
 801143a:	9a06      	ldr	r2, [sp, #24]
 801143c:	1a8b      	subs	r3, r1, r2
 801143e:	3b01      	subs	r3, #1
 8011440:	f023 0303 	bic.w	r3, r3, #3
 8011444:	3304      	adds	r3, #4
 8011446:	18d3      	adds	r3, r2, r3
 8011448:	4619      	mov	r1, r3
 801144a:	9306      	str	r3, [sp, #24]
 801144c:	9b03      	ldr	r3, [sp, #12]
 801144e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011450:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8011452:	4413      	add	r3, r2
 8011454:	9a07      	ldr	r2, [sp, #28]
 8011456:	4281      	cmp	r1, r0
 8011458:	9303      	str	r3, [sp, #12]
 801145a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801145c:	441a      	add	r2, r3
 801145e:	449b      	add	fp, r3
 8011460:	9207      	str	r2, [sp, #28]
 8011462:	9a05      	ldr	r2, [sp, #20]
 8011464:	441a      	add	r2, r3
 8011466:	9205      	str	r2, [sp, #20]
 8011468:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801146a:	4692      	mov	sl, r2
 801146c:	f080 82fb 	bcs.w	8011a66 <forward_dense+0x7da>
 8011470:	441a      	add	r2, r3
 8011472:	920b      	str	r2, [sp, #44]	@ 0x2c
 8011474:	e793      	b.n	801139e <forward_dense+0x112>
 8011476:	6853      	ldr	r3, [r2, #4]
 8011478:	deff      	udf	#255	@ 0xff
 801147a:	2300      	movs	r3, #0
 801147c:	685b      	ldr	r3, [r3, #4]
 801147e:	deff      	udf	#255	@ 0xff
 8011480:	f002 0103 	and.w	r1, r2, #3
 8011484:	2902      	cmp	r1, #2
 8011486:	f000 81e6 	beq.w	8011856 <forward_dense+0x5ca>
 801148a:	2903      	cmp	r1, #3
 801148c:	f000 80e4 	beq.w	8011658 <forward_dense+0x3cc>
 8011490:	2901      	cmp	r1, #1
 8011492:	f000 81ef 	beq.w	8011874 <forward_dense+0x5e8>
 8011496:	9908      	ldr	r1, [sp, #32]
 8011498:	ed9f 7a6e 	vldr	s14, [pc, #440]	@ 8011654 <forward_dense+0x3c8>
 801149c:	458a      	cmp	sl, r1
 801149e:	f200 82e9 	bhi.w	8011a74 <forward_dense+0x7e8>
 80114a2:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 80114a4:	f102 0108 	add.w	r1, r2, #8
 80114a8:	f10a 0020 	add.w	r0, sl, #32
 80114ac:	18ae      	adds	r6, r5, r2
 80114ae:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 80114b2:	3108      	adds	r1, #8
 80114b4:	ed50 2a07 	vldr	s5, [r0, #-28]	@ 0xffffffe4
 80114b8:	3020      	adds	r0, #32
 80114ba:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80114be:	ed10 3a10 	vldr	s6, [r0, #-64]	@ 0xffffffc0
 80114c2:	ed50 3a0e 	vldr	s7, [r0, #-56]	@ 0xffffffc8
 80114c6:	edd5 7a00 	vldr	s15, [r5]
 80114ca:	f811 5c10 	ldrb.w	r5, [r1, #-16]
 80114ce:	ee67 7aa2 	vmul.f32	s15, s15, s5
 80114d2:	ed10 4a0d 	vldr	s8, [r0, #-52]	@ 0xffffffcc
 80114d6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80114da:	ed50 4a0c 	vldr	s9, [r0, #-48]	@ 0xffffffd0
 80114de:	ed50 5a0b 	vldr	s11, [r0, #-44]	@ 0xffffffd4
 80114e2:	edd5 2a00 	vldr	s5, [r5]
 80114e6:	f811 5c0e 	ldrb.w	r5, [r1, #-14]
 80114ea:	eee2 7a83 	vfma.f32	s15, s5, s6
 80114ee:	ed10 6a0a 	vldr	s12, [r0, #-40]	@ 0xffffffd8
 80114f2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80114f6:	ed50 6a09 	vldr	s13, [r0, #-36]	@ 0xffffffdc
 80114fa:	ed95 3a00 	vldr	s6, [r5]
 80114fe:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 8011502:	eee3 7a23 	vfma.f32	s15, s6, s7
 8011506:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 801150a:	edd5 3a00 	vldr	s7, [r5]
 801150e:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 8011512:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8011516:	eee3 7a84 	vfma.f32	s15, s7, s8
 801151a:	ed95 4a00 	vldr	s8, [r5]
 801151e:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 8011522:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8011526:	eee4 7a24 	vfma.f32	s15, s8, s9
 801152a:	edd5 4a00 	vldr	s9, [r5]
 801152e:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 8011532:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8011536:	eee4 7aa5 	vfma.f32	s15, s9, s11
 801153a:	edd5 5a00 	vldr	s11, [r5]
 801153e:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 8011542:	428e      	cmp	r6, r1
 8011544:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8011548:	eee5 7a86 	vfma.f32	s15, s11, s12
 801154c:	ed95 6a00 	vldr	s12, [r5]
 8011550:	eee6 7a26 	vfma.f32	s15, s12, s13
 8011554:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011558:	d1a9      	bne.n	80114ae <forward_dense+0x222>
 801155a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801155c:	1850      	adds	r0, r2, r1
 801155e:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8011560:	4559      	cmp	r1, fp
 8011562:	d26f      	bcs.n	8011644 <forward_dense+0x3b8>
 8011564:	7805      	ldrb	r5, [r0, #0]
 8011566:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 801156a:	edd5 7a00 	vldr	s15, [r5]
 801156e:	460d      	mov	r5, r1
 8011570:	ecf5 6a01 	vldmia	r5!, {s13}
 8011574:	45ab      	cmp	fp, r5
 8011576:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801157a:	d963      	bls.n	8011644 <forward_dense+0x3b8>
 801157c:	7845      	ldrb	r5, [r0, #1]
 801157e:	edd1 6a01 	vldr	s13, [r1, #4]
 8011582:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8011586:	edd5 7a00 	vldr	s15, [r5]
 801158a:	f101 0508 	add.w	r5, r1, #8
 801158e:	45ab      	cmp	fp, r5
 8011590:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011594:	d956      	bls.n	8011644 <forward_dense+0x3b8>
 8011596:	7885      	ldrb	r5, [r0, #2]
 8011598:	edd1 6a02 	vldr	s13, [r1, #8]
 801159c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80115a0:	edd5 7a00 	vldr	s15, [r5]
 80115a4:	f101 050c 	add.w	r5, r1, #12
 80115a8:	45ab      	cmp	fp, r5
 80115aa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80115ae:	d949      	bls.n	8011644 <forward_dense+0x3b8>
 80115b0:	78c5      	ldrb	r5, [r0, #3]
 80115b2:	edd1 6a03 	vldr	s13, [r1, #12]
 80115b6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80115ba:	edd5 7a00 	vldr	s15, [r5]
 80115be:	f101 0510 	add.w	r5, r1, #16
 80115c2:	45ab      	cmp	fp, r5
 80115c4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80115c8:	d93c      	bls.n	8011644 <forward_dense+0x3b8>
 80115ca:	7905      	ldrb	r5, [r0, #4]
 80115cc:	edd1 6a04 	vldr	s13, [r1, #16]
 80115d0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80115d4:	edd5 7a00 	vldr	s15, [r5]
 80115d8:	f101 0514 	add.w	r5, r1, #20
 80115dc:	45ab      	cmp	fp, r5
 80115de:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80115e2:	d92f      	bls.n	8011644 <forward_dense+0x3b8>
 80115e4:	7945      	ldrb	r5, [r0, #5]
 80115e6:	edd1 6a05 	vldr	s13, [r1, #20]
 80115ea:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80115ee:	edd5 7a00 	vldr	s15, [r5]
 80115f2:	f101 0518 	add.w	r5, r1, #24
 80115f6:	45ab      	cmp	fp, r5
 80115f8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80115fc:	d922      	bls.n	8011644 <forward_dense+0x3b8>
 80115fe:	7985      	ldrb	r5, [r0, #6]
 8011600:	edd1 6a06 	vldr	s13, [r1, #24]
 8011604:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8011608:	edd5 7a00 	vldr	s15, [r5]
 801160c:	f101 051c 	add.w	r5, r1, #28
 8011610:	45ab      	cmp	fp, r5
 8011612:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011616:	d915      	bls.n	8011644 <forward_dense+0x3b8>
 8011618:	79c5      	ldrb	r5, [r0, #7]
 801161a:	edd1 6a07 	vldr	s13, [r1, #28]
 801161e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8011622:	edd5 7a00 	vldr	s15, [r5]
 8011626:	f101 0520 	add.w	r5, r1, #32
 801162a:	45ab      	cmp	fp, r5
 801162c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011630:	d908      	bls.n	8011644 <forward_dense+0x3b8>
 8011632:	edd1 7a08 	vldr	s15, [r1, #32]
 8011636:	7a01      	ldrb	r1, [r0, #8]
 8011638:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801163c:	edd1 6a00 	vldr	s13, [r1]
 8011640:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011644:	ee35 5a07 	vadd.f32	s10, s10, s14
 8011648:	e6f0      	b.n	801142c <forward_dense+0x1a0>
 801164a:	ed9f 5a02 	vldr	s10, [pc, #8]	@ 8011654 <forward_dense+0x3c8>
 801164e:	e6d6      	b.n	80113fe <forward_dense+0x172>
 8011650:	3ffffff8 	.word	0x3ffffff8
 8011654:	00000000 	.word	0x00000000
 8011658:	eeb0 7a48 	vmov.f32	s14, s16
 801165c:	4650      	mov	r0, sl
 801165e:	4611      	mov	r1, r2
 8011660:	468c      	mov	ip, r1
 8011662:	4606      	mov	r6, r0
 8011664:	f81c 5b01 	ldrb.w	r5, [ip], #1
 8011668:	ecf6 7a01 	vldmia	r6!, {s15}
 801166c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8011670:	edd5 6a00 	vldr	s13, [r5]
 8011674:	9d08      	ldr	r5, [sp, #32]
 8011676:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801167a:	42ae      	cmp	r6, r5
 801167c:	d866      	bhi.n	801174c <forward_dense+0x4c0>
 801167e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8011680:	f101 0711 	add.w	r7, r1, #17
 8011684:	3109      	adds	r1, #9
 8011686:	eba5 0800 	sub.w	r8, r5, r0
 801168a:	3024      	adds	r0, #36	@ 0x24
 801168c:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8011690:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 8011694:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 8011698:	3108      	adds	r1, #8
 801169a:	ed50 2a07 	vldr	s5, [r0, #-28]	@ 0xffffffe4
 801169e:	3020      	adds	r0, #32
 80116a0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80116a4:	ed10 3a10 	vldr	s6, [r0, #-64]	@ 0xffffffc0
 80116a8:	ed50 3a0e 	vldr	s7, [r0, #-56]	@ 0xffffffc8
 80116ac:	edd5 7a00 	vldr	s15, [r5]
 80116b0:	f811 5c10 	ldrb.w	r5, [r1, #-16]
 80116b4:	ee67 7aa2 	vmul.f32	s15, s15, s5
 80116b8:	ed10 4a0d 	vldr	s8, [r0, #-52]	@ 0xffffffcc
 80116bc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80116c0:	ed50 4a0c 	vldr	s9, [r0, #-48]	@ 0xffffffd0
 80116c4:	ed50 5a0b 	vldr	s11, [r0, #-44]	@ 0xffffffd4
 80116c8:	edd5 2a00 	vldr	s5, [r5]
 80116cc:	f811 5c0e 	ldrb.w	r5, [r1, #-14]
 80116d0:	eee2 7a83 	vfma.f32	s15, s5, s6
 80116d4:	ed10 6a0a 	vldr	s12, [r0, #-40]	@ 0xffffffd8
 80116d8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80116dc:	ed50 6a09 	vldr	s13, [r0, #-36]	@ 0xffffffdc
 80116e0:	ed95 3a00 	vldr	s6, [r5]
 80116e4:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 80116e8:	eee3 7a23 	vfma.f32	s15, s6, s7
 80116ec:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80116f0:	edd5 3a00 	vldr	s7, [r5]
 80116f4:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 80116f8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80116fc:	eee3 7a84 	vfma.f32	s15, s7, s8
 8011700:	ed95 4a00 	vldr	s8, [r5]
 8011704:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 8011708:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 801170c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8011710:	edd5 4a00 	vldr	s9, [r5]
 8011714:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 8011718:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 801171c:	eee4 7aa5 	vfma.f32	s15, s9, s11
 8011720:	edd5 5a00 	vldr	s11, [r5]
 8011724:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 8011728:	428f      	cmp	r7, r1
 801172a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 801172e:	eee5 7a86 	vfma.f32	s15, s11, s12
 8011732:	ed95 6a00 	vldr	s12, [r5]
 8011736:	eee6 7a26 	vfma.f32	s15, s12, s13
 801173a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801173e:	d1a9      	bne.n	8011694 <forward_dense+0x408>
 8011740:	f108 0801 	add.w	r8, r8, #1
 8011744:	eb0c 0cc8 	add.w	ip, ip, r8, lsl #3
 8011748:	eb06 1648 	add.w	r6, r6, r8, lsl #5
 801174c:	455e      	cmp	r6, fp
 801174e:	f4bf af79 	bcs.w	8011644 <forward_dense+0x3b8>
 8011752:	f89c 1000 	ldrb.w	r1, [ip]
 8011756:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801175a:	edd1 7a00 	vldr	s15, [r1]
 801175e:	4631      	mov	r1, r6
 8011760:	ecf1 6a01 	vldmia	r1!, {s13}
 8011764:	458b      	cmp	fp, r1
 8011766:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801176a:	f67f af6b 	bls.w	8011644 <forward_dense+0x3b8>
 801176e:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8011772:	edd6 6a01 	vldr	s13, [r6, #4]
 8011776:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801177a:	edd1 7a00 	vldr	s15, [r1]
 801177e:	f106 0108 	add.w	r1, r6, #8
 8011782:	458b      	cmp	fp, r1
 8011784:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011788:	f67f af5c 	bls.w	8011644 <forward_dense+0x3b8>
 801178c:	f89c 1002 	ldrb.w	r1, [ip, #2]
 8011790:	edd6 6a02 	vldr	s13, [r6, #8]
 8011794:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8011798:	edd1 7a00 	vldr	s15, [r1]
 801179c:	f106 010c 	add.w	r1, r6, #12
 80117a0:	458b      	cmp	fp, r1
 80117a2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80117a6:	f67f af4d 	bls.w	8011644 <forward_dense+0x3b8>
 80117aa:	f89c 1003 	ldrb.w	r1, [ip, #3]
 80117ae:	edd6 6a03 	vldr	s13, [r6, #12]
 80117b2:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80117b6:	edd1 7a00 	vldr	s15, [r1]
 80117ba:	f106 0110 	add.w	r1, r6, #16
 80117be:	458b      	cmp	fp, r1
 80117c0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80117c4:	f67f af3e 	bls.w	8011644 <forward_dense+0x3b8>
 80117c8:	f89c 1004 	ldrb.w	r1, [ip, #4]
 80117cc:	edd6 6a04 	vldr	s13, [r6, #16]
 80117d0:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80117d4:	edd1 7a00 	vldr	s15, [r1]
 80117d8:	f106 0114 	add.w	r1, r6, #20
 80117dc:	458b      	cmp	fp, r1
 80117de:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80117e2:	f67f af2f 	bls.w	8011644 <forward_dense+0x3b8>
 80117e6:	f89c 1005 	ldrb.w	r1, [ip, #5]
 80117ea:	edd6 6a05 	vldr	s13, [r6, #20]
 80117ee:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80117f2:	edd1 7a00 	vldr	s15, [r1]
 80117f6:	f106 0118 	add.w	r1, r6, #24
 80117fa:	458b      	cmp	fp, r1
 80117fc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011800:	f67f af20 	bls.w	8011644 <forward_dense+0x3b8>
 8011804:	f89c 1006 	ldrb.w	r1, [ip, #6]
 8011808:	edd6 6a06 	vldr	s13, [r6, #24]
 801180c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8011810:	edd1 7a00 	vldr	s15, [r1]
 8011814:	f106 011c 	add.w	r1, r6, #28
 8011818:	458b      	cmp	fp, r1
 801181a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801181e:	f67f af11 	bls.w	8011644 <forward_dense+0x3b8>
 8011822:	f89c 1007 	ldrb.w	r1, [ip, #7]
 8011826:	edd6 6a07 	vldr	s13, [r6, #28]
 801182a:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801182e:	edd1 7a00 	vldr	s15, [r1]
 8011832:	f106 0120 	add.w	r1, r6, #32
 8011836:	458b      	cmp	fp, r1
 8011838:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801183c:	f67f af02 	bls.w	8011644 <forward_dense+0x3b8>
 8011840:	f89c 1008 	ldrb.w	r1, [ip, #8]
 8011844:	edd6 7a08 	vldr	s15, [r6, #32]
 8011848:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801184c:	edd1 6a00 	vldr	s13, [r1]
 8011850:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011854:	e6f6      	b.n	8011644 <forward_dense+0x3b8>
 8011856:	eeb0 7a48 	vmov.f32	s14, s16
 801185a:	4650      	mov	r0, sl
 801185c:	4611      	mov	r1, r2
 801185e:	f811 5b01 	ldrb.w	r5, [r1], #1
 8011862:	ecf0 7a01 	vldmia	r0!, {s15}
 8011866:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 801186a:	edd5 6a00 	vldr	s13, [r5]
 801186e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011872:	e6f5      	b.n	8011660 <forward_dense+0x3d4>
 8011874:	4611      	mov	r1, r2
 8011876:	edda 7a00 	vldr	s15, [sl]
 801187a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801187c:	f811 5b01 	ldrb.w	r5, [r1], #1
 8011880:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8011884:	ed95 7a00 	vldr	s14, [r5]
 8011888:	ee27 7a27 	vmul.f32	s14, s14, s15
 801188c:	e7e7      	b.n	801185e <forward_dense+0x5d2>
 801188e:	9803      	ldr	r0, [sp, #12]
 8011890:	9906      	ldr	r1, [sp, #24]
 8011892:	4288      	cmp	r0, r1
 8011894:	f67f adda 	bls.w	801144c <forward_dense+0x1c0>
 8011898:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801189a:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 801189e:	468b      	mov	fp, r1
 80118a0:	f100 0c01 	add.w	ip, r0, #1
 80118a4:	9805      	ldr	r0, [sp, #20]
 80118a6:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 80118aa:	3801      	subs	r0, #1
 80118ac:	9008      	str	r0, [sp, #32]
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	f000 80bf 	beq.w	8011a32 <forward_dense+0x7a6>
 80118b4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80118b6:	ecf3 2a01 	vldmia	r3!, {s5}
 80118ba:	ed1f 7a9a 	vldr	s14, [pc, #-616]	@ 8011654 <forward_dense+0x3c8>
 80118be:	2900      	cmp	r1, #0
 80118c0:	f000 80bf 	beq.w	8011a42 <forward_dense+0x7b6>
 80118c4:	1d10      	adds	r0, r2, #4
 80118c6:	f10a 0120 	add.w	r1, sl, #32
 80118ca:	f810 7c04 	ldrb.w	r7, [r0, #-4]
 80118ce:	3004      	adds	r0, #4
 80118d0:	ed11 2a07 	vldr	s4, [r1, #-28]	@ 0xffffffe4
 80118d4:	3120      	adds	r1, #32
 80118d6:	f007 0e0f 	and.w	lr, r7, #15
 80118da:	093f      	lsrs	r7, r7, #4
 80118dc:	f810 6c07 	ldrb.w	r6, [r0, #-7]
 80118e0:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
 80118e4:	ed11 4a10 	vldr	s8, [r1, #-64]	@ 0xffffffc0
 80118e8:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 80118ec:	ed51 3a0e 	vldr	s7, [r1, #-56]	@ 0xffffffc8
 80118f0:	edde 7a00 	vldr	s15, [lr]
 80118f4:	ed97 3a00 	vldr	s6, [r7]
 80118f8:	0937      	lsrs	r7, r6, #4
 80118fa:	ee67 7a82 	vmul.f32	s15, s15, s4
 80118fe:	f006 060f 	and.w	r6, r6, #15
 8011902:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8011906:	f810 5c06 	ldrb.w	r5, [r0, #-6]
 801190a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 801190e:	ed11 5a0d 	vldr	s10, [r1, #-52]	@ 0xffffffcc
 8011912:	eee3 7a04 	vfma.f32	s15, s6, s8
 8011916:	ed97 3a00 	vldr	s6, [r7]
 801191a:	ed96 4a00 	vldr	s8, [r6]
 801191e:	092e      	lsrs	r6, r5, #4
 8011920:	ed51 4a0c 	vldr	s9, [r1, #-48]	@ 0xffffffd0
 8011924:	f005 050f 	and.w	r5, r5, #15
 8011928:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 801192c:	ed11 6a0b 	vldr	s12, [r1, #-44]	@ 0xffffffd4
 8011930:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8011934:	ed51 5a0a 	vldr	s11, [r1, #-40]	@ 0xffffffd8
 8011938:	ed51 6a09 	vldr	s13, [r1, #-36]	@ 0xffffffdc
 801193c:	eee3 7a23 	vfma.f32	s15, s6, s7
 8011940:	eee4 7a05 	vfma.f32	s15, s8, s10
 8011944:	ed96 4a00 	vldr	s8, [r6]
 8011948:	ed95 5a00 	vldr	s10, [r5]
 801194c:	f810 5c05 	ldrb.w	r5, [r0, #-5]
 8011950:	4560      	cmp	r0, ip
 8011952:	ea4f 1615 	mov.w	r6, r5, lsr #4
 8011956:	f005 050f 	and.w	r5, r5, #15
 801195a:	eee4 7a24 	vfma.f32	s15, s8, s9
 801195e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8011962:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8011966:	eee5 7a06 	vfma.f32	s15, s10, s12
 801196a:	ed96 5a00 	vldr	s10, [r6]
 801196e:	ed95 6a00 	vldr	s12, [r5]
 8011972:	eee5 7a25 	vfma.f32	s15, s10, s11
 8011976:	eee6 7a26 	vfma.f32	s15, s12, s13
 801197a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801197e:	d1a4      	bne.n	80118ca <forward_dense+0x63e>
 8011980:	f1ac 0804 	sub.w	r8, ip, #4
 8011984:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8011988:	9905      	ldr	r1, [sp, #20]
 801198a:	458e      	cmp	lr, r1
 801198c:	d229      	bcs.n	80119e2 <forward_dense+0x756>
 801198e:	9908      	ldr	r1, [sp, #32]
 8011990:	f10e 0008 	add.w	r0, lr, #8
 8011994:	f108 36ff 	add.w	r6, r8, #4294967295
 8011998:	eba1 070e 	sub.w	r7, r1, lr
 801199c:	ea4f 09d7 	mov.w	r9, r7, lsr #3
 80119a0:	eb08 07d7 	add.w	r7, r8, r7, lsr #3
 80119a4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80119a8:	3008      	adds	r0, #8
 80119aa:	ed50 5a03 	vldr	s11, [r0, #-12]
 80119ae:	f001 050f 	and.w	r5, r1, #15
 80119b2:	0909      	lsrs	r1, r1, #4
 80119b4:	ed50 6a04 	vldr	s13, [r0, #-16]
 80119b8:	42b7      	cmp	r7, r6
 80119ba:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80119be:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80119c2:	edd5 7a00 	vldr	s15, [r5]
 80119c6:	ed91 6a00 	vldr	s12, [r1]
 80119ca:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80119ce:	eee6 7a26 	vfma.f32	s15, s12, s13
 80119d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80119d6:	d1e5      	bne.n	80119a4 <forward_dense+0x718>
 80119d8:	f109 0901 	add.w	r9, r9, #1
 80119dc:	44c8      	add	r8, r9
 80119de:	eb0e 0ec9 	add.w	lr, lr, r9, lsl #3
 80119e2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80119e4:	b1c1      	cbz	r1, 8011a18 <forward_dense+0x78c>
 80119e6:	f898 1000 	ldrb.w	r1, [r8]
 80119ea:	edde 7a00 	vldr	s15, [lr]
 80119ee:	0909      	lsrs	r1, r1, #4
 80119f0:	9804      	ldr	r0, [sp, #16]
 80119f2:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80119f6:	4402      	add	r2, r0
 80119f8:	4484      	add	ip, r0
 80119fa:	edd1 6a00 	vldr	s13, [r1]
 80119fe:	9903      	ldr	r1, [sp, #12]
 8011a00:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011a04:	ee72 2a87 	vadd.f32	s5, s5, s14
 8011a08:	eceb 2a01 	vstmia	fp!, {s5}
 8011a0c:	4559      	cmp	r1, fp
 8011a0e:	f63f af4e 	bhi.w	80118ae <forward_dense+0x622>
 8011a12:	f8dd b030 	ldr.w	fp, [sp, #48]	@ 0x30
 8011a16:	e510      	b.n	801143a <forward_dense+0x1ae>
 8011a18:	9904      	ldr	r1, [sp, #16]
 8011a1a:	ee32 7a87 	vadd.f32	s14, s5, s14
 8011a1e:	440a      	add	r2, r1
 8011a20:	448c      	add	ip, r1
 8011a22:	9903      	ldr	r1, [sp, #12]
 8011a24:	ecab 7a01 	vstmia	fp!, {s14}
 8011a28:	458b      	cmp	fp, r1
 8011a2a:	d2f2      	bcs.n	8011a12 <forward_dense+0x786>
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	f47f af41 	bne.w	80118b4 <forward_dense+0x628>
 8011a32:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011a34:	eef0 2a48 	vmov.f32	s5, s16
 8011a38:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8011ac8 <forward_dense+0x83c>
 8011a3c:	2900      	cmp	r1, #0
 8011a3e:	f47f af41 	bne.w	80118c4 <forward_dense+0x638>
 8011a42:	46d6      	mov	lr, sl
 8011a44:	4690      	mov	r8, r2
 8011a46:	e79f      	b.n	8011988 <forward_dense+0x6fc>
 8011a48:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8011a4a:	4651      	mov	r1, sl
 8011a4c:	9d06      	ldr	r5, [sp, #24]
 8011a4e:	9001      	str	r0, [sp, #4]
 8011a50:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8011a52:	9000      	str	r0, [sp, #0]
 8011a54:	4628      	mov	r0, r5
 8011a56:	f000 fbe3 	bl	8012220 <forward_lite_dense_if32of32wf32>
 8011a5a:	462b      	mov	r3, r5
 8011a5c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011a5e:	4413      	add	r3, r2
 8011a60:	4619      	mov	r1, r3
 8011a62:	9306      	str	r3, [sp, #24]
 8011a64:	e4f2      	b.n	801144c <forward_dense+0x1c0>
 8011a66:	b01b      	add	sp, #108	@ 0x6c
 8011a68:	ecbd 8b02 	vpop	{d8}
 8011a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a70:	4601      	mov	r1, r0
 8011a72:	e4eb      	b.n	801144c <forward_dense+0x1c0>
 8011a74:	4651      	mov	r1, sl
 8011a76:	4610      	mov	r0, r2
 8011a78:	e572      	b.n	8011560 <forward_dense+0x2d4>
 8011a7a:	f8d8 800c 	ldr.w	r8, [r8, #12]
 8011a7e:	f1b9 0f00 	cmp.w	r9, #0
 8011a82:	d016      	beq.n	8011ab2 <forward_dense+0x826>
 8011a84:	e9d9 0100 	ldrd	r0, r1, [r9]
 8011a88:	f000 fde6 	bl	8012658 <ai_array_get_byte_size>
 8011a8c:	f8d9 a00c 	ldr.w	sl, [r9, #12]
 8011a90:	4602      	mov	r2, r0
 8011a92:	4640      	mov	r0, r8
 8011a94:	4651      	mov	r1, sl
 8011a96:	f000 fceb 	bl	8012470 <st_int8_copy>
 8011a9a:	e44b      	b.n	8011334 <forward_dense+0xa8>
 8011a9c:	2b04      	cmp	r3, #4
 8011a9e:	d00a      	beq.n	8011ab6 <forward_dense+0x82a>
 8011aa0:	f04f 0900 	mov.w	r9, #0
 8011aa4:	e441      	b.n	801132a <forward_dense+0x9e>
 8011aa6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011aa8:	e417      	b.n	80112da <forward_dense+0x4e>
 8011aaa:	2300      	movs	r3, #0
 8011aac:	930d      	str	r3, [sp, #52]	@ 0x34
 8011aae:	460b      	mov	r3, r1
 8011ab0:	e413      	b.n	80112da <forward_dense+0x4e>
 8011ab2:	46c2      	mov	sl, r8
 8011ab4:	e43e      	b.n	8011334 <forward_dense+0xa8>
 8011ab6:	f8d8 a00c 	ldr.w	sl, [r8, #12]
 8011aba:	e43b      	b.n	8011334 <forward_dense+0xa8>
 8011abc:	2300      	movs	r3, #0
 8011abe:	685b      	ldr	r3, [r3, #4]
 8011ac0:	deff      	udf	#255	@ 0xff
 8011ac2:	2300      	movs	r3, #0
 8011ac4:	685b      	ldr	r3, [r3, #4]
 8011ac6:	deff      	udf	#255	@ 0xff
 8011ac8:	00000000 	.word	0x00000000

08011acc <forward_relu>:
 8011acc:	6982      	ldr	r2, [r0, #24]
 8011ace:	8813      	ldrh	r3, [r2, #0]
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	d05b      	beq.n	8011b8c <forward_relu+0xc0>
 8011ad4:	6851      	ldr	r1, [r2, #4]
 8011ad6:	684a      	ldr	r2, [r1, #4]
 8011ad8:	b102      	cbz	r2, 8011adc <forward_relu+0x10>
 8011ada:	6812      	ldr	r2, [r2, #0]
 8011adc:	2b01      	cmp	r3, #1
 8011ade:	f000 8123 	beq.w	8011d28 <forward_relu+0x25c>
 8011ae2:	b470      	push	{r4, r5, r6}
 8011ae4:	690b      	ldr	r3, [r1, #16]
 8011ae6:	b103      	cbz	r3, 8011aea <forward_relu+0x1e>
 8011ae8:	681b      	ldr	r3, [r3, #0]
 8011aea:	69c6      	ldr	r6, [r0, #28]
 8011aec:	2e00      	cmp	r6, #0
 8011aee:	f000 809e 	beq.w	8011c2e <forward_relu+0x162>
 8011af2:	6871      	ldr	r1, [r6, #4]
 8011af4:	6998      	ldr	r0, [r3, #24]
 8011af6:	2901      	cmp	r1, #1
 8011af8:	f000 80c3 	beq.w	8011c82 <forward_relu+0x1b6>
 8011afc:	6893      	ldr	r3, [r2, #8]
 8011afe:	6991      	ldr	r1, [r2, #24]
 8011b00:	0a1b      	lsrs	r3, r3, #8
 8011b02:	6880      	ldr	r0, [r0, #8]
 8011b04:	688d      	ldr	r5, [r1, #8]
 8011b06:	f000 80f2 	beq.w	8011cee <forward_relu+0x222>
 8011b0a:	68d4      	ldr	r4, [r2, #12]
 8011b0c:	2201      	movs	r2, #1
 8011b0e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011b12:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011b16:	42a3      	cmp	r3, r4
 8011b18:	fb01 f202 	mul.w	r2, r1, r2
 8011b1c:	d1f9      	bne.n	8011b12 <forward_relu+0x46>
 8011b1e:	68b3      	ldr	r3, [r6, #8]
 8011b20:	ed93 7a02 	vldr	s14, [r3, #8]
 8011b24:	edd3 6a00 	vldr	s13, [r3]
 8011b28:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8011b2c:	ed93 6a01 	vldr	s12, [r3, #4]
 8011b30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b34:	d42c      	bmi.n	8011b90 <forward_relu+0xc4>
 8011b36:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8011b3a:	4413      	add	r3, r2
 8011b3c:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 8011b40:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8011b44:	4295      	cmp	r5, r2
 8011b46:	d81f      	bhi.n	8011b88 <forward_relu+0xbc>
 8011b48:	3204      	adds	r2, #4
 8011b4a:	1d01      	adds	r1, r0, #4
 8011b4c:	e00d      	b.n	8011b6a <forward_relu+0x9e>
 8011b4e:	eef4 6ae7 	vcmpe.f32	s13, s15
 8011b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b56:	db03      	blt.n	8011b60 <forward_relu+0x94>
 8011b58:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011b5c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8011b60:	3b08      	subs	r3, #8
 8011b62:	ed61 7a01 	vstmdb	r1!, {s15}
 8011b66:	429d      	cmp	r5, r3
 8011b68:	d80e      	bhi.n	8011b88 <forward_relu+0xbc>
 8011b6a:	4613      	mov	r3, r2
 8011b6c:	ed72 7a01 	vldmdb	r2!, {s15}
 8011b70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b78:	d9e9      	bls.n	8011b4e <forward_relu+0x82>
 8011b7a:	3b08      	subs	r3, #8
 8011b7c:	eef0 7a47 	vmov.f32	s15, s14
 8011b80:	429d      	cmp	r5, r3
 8011b82:	ed61 7a01 	vstmdb	r1!, {s15}
 8011b86:	d9f0      	bls.n	8011b6a <forward_relu+0x9e>
 8011b88:	bc70      	pop	{r4, r5, r6}
 8011b8a:	4770      	bx	lr
 8011b8c:	685b      	ldr	r3, [r3, #4]
 8011b8e:	deff      	udf	#255	@ 0xff
 8011b90:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8011b94:	f06f 4140 	mvn.w	r1, #3221225472	@ 0xc0000000
 8011b98:	4411      	add	r1, r2
 8011b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b9e:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8011ba2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8011ba6:	d11f      	bne.n	8011be8 <forward_relu+0x11c>
 8011ba8:	429d      	cmp	r5, r3
 8011baa:	d8ed      	bhi.n	8011b88 <forward_relu+0xbc>
 8011bac:	1b5d      	subs	r5, r3, r5
 8011bae:	1d1a      	adds	r2, r3, #4
 8011bb0:	1d01      	adds	r1, r0, #4
 8011bb2:	2000      	movs	r0, #0
 8011bb4:	f025 0503 	bic.w	r5, r5, #3
 8011bb8:	1b5b      	subs	r3, r3, r5
 8011bba:	ed72 7a01 	vldmdb	r2!, {s15}
 8011bbe:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011bc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bc6:	dc0a      	bgt.n	8011bde <forward_relu+0x112>
 8011bc8:	429a      	cmp	r2, r3
 8011bca:	f841 0d04 	str.w	r0, [r1, #-4]!
 8011bce:	d0db      	beq.n	8011b88 <forward_relu+0xbc>
 8011bd0:	ed72 7a01 	vldmdb	r2!, {s15}
 8011bd4:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bdc:	ddf4      	ble.n	8011bc8 <forward_relu+0xfc>
 8011bde:	429a      	cmp	r2, r3
 8011be0:	ed61 7a01 	vstmdb	r1!, {s15}
 8011be4:	d1e9      	bne.n	8011bba <forward_relu+0xee>
 8011be6:	e7cf      	b.n	8011b88 <forward_relu+0xbc>
 8011be8:	429d      	cmp	r5, r3
 8011bea:	d8cd      	bhi.n	8011b88 <forward_relu+0xbc>
 8011bec:	1b5d      	subs	r5, r3, r5
 8011bee:	1d1a      	adds	r2, r3, #4
 8011bf0:	1d01      	adds	r1, r0, #4
 8011bf2:	f025 0503 	bic.w	r5, r5, #3
 8011bf6:	1b5b      	subs	r3, r3, r5
 8011bf8:	ed72 7a01 	vldmdb	r2!, {s15}
 8011bfc:	eef4 6ae7 	vcmpe.f32	s13, s15
 8011c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c04:	db0e      	blt.n	8011c24 <forward_relu+0x158>
 8011c06:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011c0a:	4293      	cmp	r3, r2
 8011c0c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8011c10:	ed61 7a01 	vstmdb	r1!, {s15}
 8011c14:	d0b8      	beq.n	8011b88 <forward_relu+0xbc>
 8011c16:	ed72 7a01 	vldmdb	r2!, {s15}
 8011c1a:	eef4 6ae7 	vcmpe.f32	s13, s15
 8011c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c22:	daf0      	bge.n	8011c06 <forward_relu+0x13a>
 8011c24:	4293      	cmp	r3, r2
 8011c26:	ed61 7a01 	vstmdb	r1!, {s15}
 8011c2a:	d1e5      	bne.n	8011bf8 <forward_relu+0x12c>
 8011c2c:	e7ac      	b.n	8011b88 <forward_relu+0xbc>
 8011c2e:	6999      	ldr	r1, [r3, #24]
 8011c30:	6893      	ldr	r3, [r2, #8]
 8011c32:	6990      	ldr	r0, [r2, #24]
 8011c34:	0a1b      	lsrs	r3, r3, #8
 8011c36:	6889      	ldr	r1, [r1, #8]
 8011c38:	6884      	ldr	r4, [r0, #8]
 8011c3a:	d06e      	beq.n	8011d1a <forward_relu+0x24e>
 8011c3c:	68d5      	ldr	r5, [r2, #12]
 8011c3e:	2201      	movs	r2, #1
 8011c40:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8011c44:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 8011c48:	429d      	cmp	r5, r3
 8011c4a:	fb00 f202 	mul.w	r2, r0, r2
 8011c4e:	d1f9      	bne.n	8011c44 <forward_relu+0x178>
 8011c50:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8011c54:	4413      	add	r3, r2
 8011c56:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8011c5a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8011c5e:	4294      	cmp	r4, r2
 8011c60:	d892      	bhi.n	8011b88 <forward_relu+0xbc>
 8011c62:	3204      	adds	r2, #4
 8011c64:	3104      	adds	r1, #4
 8011c66:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8011d30 <forward_relu+0x264>
 8011c6a:	4613      	mov	r3, r2
 8011c6c:	ed72 7a01 	vldmdb	r2!, {s15}
 8011c70:	3b08      	subs	r3, #8
 8011c72:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8011c76:	ed61 7a01 	vstmdb	r1!, {s15}
 8011c7a:	429c      	cmp	r4, r3
 8011c7c:	d9f5      	bls.n	8011c6a <forward_relu+0x19e>
 8011c7e:	bc70      	pop	{r4, r5, r6}
 8011c80:	4770      	bx	lr
 8011c82:	6993      	ldr	r3, [r2, #24]
 8011c84:	6880      	ldr	r0, [r0, #8]
 8011c86:	689c      	ldr	r4, [r3, #8]
 8011c88:	6893      	ldr	r3, [r2, #8]
 8011c8a:	0a1b      	lsrs	r3, r3, #8
 8011c8c:	d047      	beq.n	8011d1e <forward_relu+0x252>
 8011c8e:	68d5      	ldr	r5, [r2, #12]
 8011c90:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8011c94:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8011c98:	42ab      	cmp	r3, r5
 8011c9a:	fb02 f101 	mul.w	r1, r2, r1
 8011c9e:	d1f9      	bne.n	8011c94 <forward_relu+0x1c8>
 8011ca0:	f06f 4240 	mvn.w	r2, #3221225472	@ 0xc0000000
 8011ca4:	68b3      	ldr	r3, [r6, #8]
 8011ca6:	440a      	add	r2, r1
 8011ca8:	ed93 7a00 	vldr	s14, [r3]
 8011cac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011cb0:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8011cb4:	429c      	cmp	r4, r3
 8011cb6:	f63f af67 	bhi.w	8011b88 <forward_relu+0xbc>
 8011cba:	1d02      	adds	r2, r0, #4
 8011cbc:	3304      	adds	r3, #4
 8011cbe:	2000      	movs	r0, #0
 8011cc0:	ed53 7a01 	vldr	s15, [r3, #-4]
 8011cc4:	1f19      	subs	r1, r3, #4
 8011cc6:	3b08      	subs	r3, #8
 8011cc8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011ccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011cd0:	d406      	bmi.n	8011ce0 <forward_relu+0x214>
 8011cd2:	429c      	cmp	r4, r3
 8011cd4:	f842 0d04 	str.w	r0, [r2, #-4]!
 8011cd8:	f63f af56 	bhi.w	8011b88 <forward_relu+0xbc>
 8011cdc:	460b      	mov	r3, r1
 8011cde:	e7ef      	b.n	8011cc0 <forward_relu+0x1f4>
 8011ce0:	429c      	cmp	r4, r3
 8011ce2:	ed62 7a01 	vstmdb	r2!, {s15}
 8011ce6:	f63f af4f 	bhi.w	8011b88 <forward_relu+0xbc>
 8011cea:	460b      	mov	r3, r1
 8011cec:	e7e8      	b.n	8011cc0 <forward_relu+0x1f4>
 8011cee:	68b3      	ldr	r3, [r6, #8]
 8011cf0:	ed93 7a02 	vldr	s14, [r3, #8]
 8011cf4:	edd3 6a00 	vldr	s13, [r3]
 8011cf8:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8011cfc:	ed93 6a01 	vldr	s12, [r3, #4]
 8011d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d04:	d401      	bmi.n	8011d0a <forward_relu+0x23e>
 8011d06:	462a      	mov	r2, r5
 8011d08:	e71e      	b.n	8011b48 <forward_relu+0x7c>
 8011d0a:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8011d0e:	462b      	mov	r3, r5
 8011d10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d14:	f47f af6a 	bne.w	8011bec <forward_relu+0x120>
 8011d18:	e748      	b.n	8011bac <forward_relu+0xe0>
 8011d1a:	4622      	mov	r2, r4
 8011d1c:	e7a1      	b.n	8011c62 <forward_relu+0x196>
 8011d1e:	68b2      	ldr	r2, [r6, #8]
 8011d20:	4623      	mov	r3, r4
 8011d22:	ed92 7a00 	vldr	s14, [r2]
 8011d26:	e7c8      	b.n	8011cba <forward_relu+0x1ee>
 8011d28:	2300      	movs	r3, #0
 8011d2a:	685b      	ldr	r3, [r3, #4]
 8011d2c:	deff      	udf	#255	@ 0xff
 8011d2e:	bf00      	nop
 8011d30:	00000000 	.word	0x00000000

08011d34 <ai_conv2d_kernel_simple_opt_f32.constprop.0>:
 8011d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d38:	ed2d 8b0c 	vpush	{d8-d13}
 8011d3c:	b08d      	sub	sp, #52	@ 0x34
 8011d3e:	461d      	mov	r5, r3
 8011d40:	9003      	str	r0, [sp, #12]
 8011d42:	9207      	str	r2, [sp, #28]
 8011d44:	9c24      	ldr	r4, [sp, #144]	@ 0x90
 8011d46:	9308      	str	r3, [sp, #32]
 8011d48:	f8dd b09c 	ldr.w	fp, [sp, #156]	@ 0x9c
 8011d4c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8011d4e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8011d50:	e9dd 0225 	ldrd	r0, r2, [sp, #148]	@ 0x94
 8011d54:	fb00 f002 	mul.w	r0, r0, r2
 8011d58:	9004      	str	r0, [sp, #16]
 8011d5a:	f8bd 00a4 	ldrh.w	r0, [sp, #164]	@ 0xa4
 8011d5e:	9009      	str	r0, [sp, #36]	@ 0x24
 8011d60:	2c00      	cmp	r4, #0
 8011d62:	f000 80ed 	beq.w	8011f40 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x20c>
 8011d66:	009c      	lsls	r4, r3, #2
 8011d68:	fb00 f305 	mul.w	r3, r0, r5
 8011d6c:	009b      	lsls	r3, r3, #2
 8011d6e:	9405      	str	r4, [sp, #20]
 8011d70:	9306      	str	r3, [sp, #24]
 8011d72:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8011d74:	fb03 f305 	mul.w	r3, r3, r5
 8011d78:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8011d7c:	9301      	str	r3, [sp, #4]
 8011d7e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8011d80:	425b      	negs	r3, r3
 8011d82:	9300      	str	r3, [sp, #0]
 8011d84:	2300      	movs	r3, #0
 8011d86:	9302      	str	r3, [sp, #8]
 8011d88:	00ab      	lsls	r3, r5, #2
 8011d8a:	930a      	str	r3, [sp, #40]	@ 0x28
 8011d8c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	f2c0 80dd 	blt.w	8011f4e <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x21a>
 8011d94:	9e01      	ldr	r6, [sp, #4]
 8011d96:	2000      	movs	r0, #0
 8011d98:	9d04      	ldr	r5, [sp, #16]
 8011d9a:	9b07      	ldr	r3, [sp, #28]
 8011d9c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011d9e:	9900      	ldr	r1, [sp, #0]
 8011da0:	fb05 3502 	mla	r5, r5, r2, r3
 8011da4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011da6:	440b      	add	r3, r1
 8011da8:	9925      	ldr	r1, [sp, #148]	@ 0x94
 8011daa:	428b      	cmp	r3, r1
 8011dac:	bf94      	ite	ls
 8011dae:	ebc0 0003 	rsbls	r0, r0, r3
 8011db2:	ebc0 0001 	rsbhi	r0, r0, r1
 8011db6:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011db8:	f1bb 0f00 	cmp.w	fp, #0
 8011dbc:	eba3 0a00 	sub.w	sl, r3, r0
 8011dc0:	9b08      	ldr	r3, [sp, #32]
 8011dc2:	eba1 0900 	sub.w	r9, r1, r0
 8011dc6:	fb03 f000 	mul.w	r0, r3, r0
 8011dca:	f340 80c6 	ble.w	8011f5a <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x226>
 8011dce:	f020 040f 	bic.w	r4, r0, #15
 8011dd2:	eeb0 7a40 	vmov.f32	s14, s0
 8011dd6:	fb02 fa0a 	mul.w	sl, r2, sl
 8011dda:	f04f 0c00 	mov.w	ip, #0
 8011dde:	f104 38ff 	add.w	r8, r4, #4294967295
 8011de2:	fb02 f909 	mul.w	r9, r2, r9
 8011de6:	ea4f 1818 	mov.w	r8, r8, lsr #4
 8011dea:	f108 0801 	add.w	r8, r8, #1
 8011dee:	ea4f 1e88 	mov.w	lr, r8, lsl #6
 8011df2:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8011df6:	2c00      	cmp	r4, #0
 8011df8:	f340 80a7 	ble.w	8011f4a <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x216>
 8011dfc:	f106 0240 	add.w	r2, r6, #64	@ 0x40
 8011e00:	f105 0340 	add.w	r3, r5, #64	@ 0x40
 8011e04:	2100      	movs	r1, #0
 8011e06:	ed53 6a0f 	vldr	s13, [r3, #-60]	@ 0xffffffc4
 8011e0a:	3110      	adds	r1, #16
 8011e0c:	ed52 7a0f 	vldr	s15, [r2, #-60]	@ 0xffffffc4
 8011e10:	3340      	adds	r3, #64	@ 0x40
 8011e12:	ed52 4a10 	vldr	s9, [r2, #-64]	@ 0xffffffc0
 8011e16:	42a1      	cmp	r1, r4
 8011e18:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011e1c:	ed13 5a20 	vldr	s10, [r3, #-128]	@ 0xffffff80
 8011e20:	ed52 5a0e 	vldr	s11, [r2, #-56]	@ 0xffffffc8
 8011e24:	f102 0240 	add.w	r2, r2, #64	@ 0x40
 8011e28:	ed13 6a1e 	vldr	s12, [r3, #-120]	@ 0xffffff88
 8011e2c:	eee4 7a85 	vfma.f32	s15, s9, s10
 8011e30:	ed53 6a1d 	vldr	s13, [r3, #-116]	@ 0xffffff8c
 8011e34:	ed52 da1d 	vldr	s27, [r2, #-116]	@ 0xffffff8c
 8011e38:	ed12 da1c 	vldr	s26, [r2, #-112]	@ 0xffffff90
 8011e3c:	ed53 ca1c 	vldr	s25, [r3, #-112]	@ 0xffffff90
 8011e40:	ed12 ca1b 	vldr	s24, [r2, #-108]	@ 0xffffff94
 8011e44:	ed53 ba1b 	vldr	s23, [r3, #-108]	@ 0xffffff94
 8011e48:	eee5 7a86 	vfma.f32	s15, s11, s12
 8011e4c:	ed12 ba1a 	vldr	s22, [r2, #-104]	@ 0xffffff98
 8011e50:	ed53 aa1a 	vldr	s21, [r3, #-104]	@ 0xffffff98
 8011e54:	ed12 aa19 	vldr	s20, [r2, #-100]	@ 0xffffff9c
 8011e58:	ed53 9a19 	vldr	s19, [r3, #-100]	@ 0xffffff9c
 8011e5c:	ed12 9a18 	vldr	s18, [r2, #-96]	@ 0xffffffa0
 8011e60:	ed53 8a18 	vldr	s17, [r3, #-96]	@ 0xffffffa0
 8011e64:	eeed 7aa6 	vfma.f32	s15, s27, s13
 8011e68:	ed12 8a17 	vldr	s16, [r2, #-92]	@ 0xffffffa4
 8011e6c:	ed53 0a17 	vldr	s1, [r3, #-92]	@ 0xffffffa4
 8011e70:	ed12 1a16 	vldr	s2, [r2, #-88]	@ 0xffffffa8
 8011e74:	ed53 1a16 	vldr	s3, [r3, #-88]	@ 0xffffffa8
 8011e78:	ed12 2a15 	vldr	s4, [r2, #-84]	@ 0xffffffac
 8011e7c:	ed53 2a15 	vldr	s5, [r3, #-84]	@ 0xffffffac
 8011e80:	eeed 7a2c 	vfma.f32	s15, s26, s25
 8011e84:	ed12 3a14 	vldr	s6, [r2, #-80]	@ 0xffffffb0
 8011e88:	ed53 3a14 	vldr	s7, [r3, #-80]	@ 0xffffffb0
 8011e8c:	ed12 4a13 	vldr	s8, [r2, #-76]	@ 0xffffffb4
 8011e90:	ed53 4a13 	vldr	s9, [r3, #-76]	@ 0xffffffb4
 8011e94:	ed12 5a12 	vldr	s10, [r2, #-72]	@ 0xffffffb8
 8011e98:	ed53 5a12 	vldr	s11, [r3, #-72]	@ 0xffffffb8
 8011e9c:	eeec 7a2b 	vfma.f32	s15, s24, s23
 8011ea0:	ed12 6a11 	vldr	s12, [r2, #-68]	@ 0xffffffbc
 8011ea4:	ed53 6a11 	vldr	s13, [r3, #-68]	@ 0xffffffbc
 8011ea8:	eeeb 7a2a 	vfma.f32	s15, s22, s21
 8011eac:	eeea 7a29 	vfma.f32	s15, s20, s19
 8011eb0:	eee9 7a28 	vfma.f32	s15, s18, s17
 8011eb4:	eee8 7a20 	vfma.f32	s15, s16, s1
 8011eb8:	eee1 7a21 	vfma.f32	s15, s2, s3
 8011ebc:	eee2 7a22 	vfma.f32	s15, s4, s5
 8011ec0:	eee3 7a23 	vfma.f32	s15, s6, s7
 8011ec4:	eee4 7a24 	vfma.f32	s15, s8, s9
 8011ec8:	eee5 7a25 	vfma.f32	s15, s10, s11
 8011ecc:	eee6 7a26 	vfma.f32	s15, s12, s13
 8011ed0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011ed4:	db97      	blt.n	8011e06 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0xd2>
 8011ed6:	4476      	add	r6, lr
 8011ed8:	4475      	add	r5, lr
 8011eda:	4647      	mov	r7, r8
 8011edc:	42b8      	cmp	r0, r7
 8011ede:	dd10      	ble.n	8011f02 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1ce>
 8011ee0:	463b      	mov	r3, r7
 8011ee2:	4631      	mov	r1, r6
 8011ee4:	462a      	mov	r2, r5
 8011ee6:	3301      	adds	r3, #1
 8011ee8:	ecf2 6a01 	vldmia	r2!, {s13}
 8011eec:	ecf1 7a01 	vldmia	r1!, {s15}
 8011ef0:	4298      	cmp	r0, r3
 8011ef2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011ef6:	d1f6      	bne.n	8011ee6 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1b2>
 8011ef8:	1bc7      	subs	r7, r0, r7
 8011efa:	eb05 0587 	add.w	r5, r5, r7, lsl #2
 8011efe:	eb06 0687 	add.w	r6, r6, r7, lsl #2
 8011f02:	f10c 0c01 	add.w	ip, ip, #1
 8011f06:	4456      	add	r6, sl
 8011f08:	444d      	add	r5, r9
 8011f0a:	45dc      	cmp	ip, fp
 8011f0c:	f47f af73 	bne.w	8011df6 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0xc2>
 8011f10:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8011f12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011f14:	9a03      	ldr	r2, [sp, #12]
 8011f16:	4401      	add	r1, r0
 8011f18:	9b02      	ldr	r3, [sp, #8]
 8011f1a:	ed82 7a00 	vstr	s14, [r2]
 8011f1e:	9128      	str	r1, [sp, #160]	@ 0xa0
 8011f20:	3301      	adds	r3, #1
 8011f22:	9905      	ldr	r1, [sp, #20]
 8011f24:	9302      	str	r3, [sp, #8]
 8011f26:	440a      	add	r2, r1
 8011f28:	9906      	ldr	r1, [sp, #24]
 8011f2a:	9203      	str	r2, [sp, #12]
 8011f2c:	9a00      	ldr	r2, [sp, #0]
 8011f2e:	1a12      	subs	r2, r2, r0
 8011f30:	9200      	str	r2, [sp, #0]
 8011f32:	9a01      	ldr	r2, [sp, #4]
 8011f34:	440a      	add	r2, r1
 8011f36:	9201      	str	r2, [sp, #4]
 8011f38:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8011f3a:	4293      	cmp	r3, r2
 8011f3c:	f47f af26 	bne.w	8011d8c <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x58>
 8011f40:	b00d      	add	sp, #52	@ 0x34
 8011f42:	ecbd 8b0c 	vpop	{d8-d13}
 8011f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f4a:	2700      	movs	r7, #0
 8011f4c:	e7c6      	b.n	8011edc <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1a8>
 8011f4e:	9a00      	ldr	r2, [sp, #0]
 8011f50:	9b04      	ldr	r3, [sp, #16]
 8011f52:	4610      	mov	r0, r2
 8011f54:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8011f56:	189d      	adds	r5, r3, r2
 8011f58:	e71f      	b.n	8011d9a <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x66>
 8011f5a:	eeb0 7a40 	vmov.f32	s14, s0
 8011f5e:	e7d7      	b.n	8011f10 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1dc>

08011f60 <forward_lite_conv2d_if32of32wf32>:
 8011f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f64:	ed2d 8b02 	vpush	{d8}
 8011f68:	b09f      	sub	sp, #124	@ 0x7c
 8011f6a:	4686      	mov	lr, r0
 8011f6c:	4694      	mov	ip, r2
 8011f6e:	af08      	add	r7, sp, #32
 8011f70:	f8b7 40b0 	ldrh.w	r4, [r7, #176]	@ 0xb0
 8011f74:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8011f76:	f8b7 10ac 	ldrh.w	r1, [r7, #172]	@ 0xac
 8011f7a:	f8b7 50b4 	ldrh.w	r5, [r7, #180]	@ 0xb4
 8011f7e:	424e      	negs	r6, r1
 8011f80:	64fc      	str	r4, [r7, #76]	@ 0x4c
 8011f82:	f8d7 409c 	ldr.w	r4, [r7, #156]	@ 0x9c
 8011f86:	6078      	str	r0, [r7, #4]
 8011f88:	613a      	str	r2, [r7, #16]
 8011f8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011f8c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8011f90:	f8b7 00a8 	ldrh.w	r0, [r7, #168]	@ 0xa8
 8011f94:	617d      	str	r5, [r7, #20]
 8011f96:	633e      	str	r6, [r7, #48]	@ 0x30
 8011f98:	e9d7 3a22 	ldrd	r3, sl, [r7, #136]	@ 0x88
 8011f9c:	2c00      	cmp	r4, #0
 8011f9e:	f000 8092 	beq.w	80120c6 <forward_lite_conv2d_if32of32wf32+0x166>
 8011fa2:	f8d7 40a0 	ldr.w	r4, [r7, #160]	@ 0xa0
 8011fa6:	6379      	str	r1, [r7, #52]	@ 0x34
 8011fa8:	fb04 f202 	mul.w	r2, r4, r2
 8011fac:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8011fb0:	4244      	negs	r4, r0
 8011fb2:	ed9f 8a9a 	vldr	s16, [pc, #616]	@ 801221c <forward_lite_conv2d_if32of32wf32+0x2bc>
 8011fb6:	653c      	str	r4, [r7, #80]	@ 0x50
 8011fb8:	fb03 f402 	mul.w	r4, r3, r2
 8011fbc:	fb03 f201 	mul.w	r2, r3, r1
 8011fc0:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8011fc4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011fc8:	63bc      	str	r4, [r7, #56]	@ 0x38
 8011fca:	fb01 f10a 	mul.w	r1, r1, sl
 8011fce:	0089      	lsls	r1, r1, #2
 8011fd0:	61b9      	str	r1, [r7, #24]
 8011fd2:	fb05 f102 	mul.w	r1, r5, r2
 8011fd6:	4655      	mov	r5, sl
 8011fd8:	fb06 f202 	mul.w	r2, r6, r2
 8011fdc:	46da      	mov	sl, fp
 8011fde:	0089      	lsls	r1, r1, #2
 8011fe0:	61f9      	str	r1, [r7, #28]
 8011fe2:	eb0e 0182 	add.w	r1, lr, r2, lsl #2
 8011fe6:	f10b 0207 	add.w	r2, fp, #7
 8011fea:	62b9      	str	r1, [r7, #40]	@ 0x28
 8011fec:	f022 0107 	bic.w	r1, r2, #7
 8011ff0:	eb0c 0284 	add.w	r2, ip, r4, lsl #2
 8011ff4:	60f9      	str	r1, [r7, #12]
 8011ff6:	f10c 4178 	add.w	r1, ip, #4160749568	@ 0xf8000000
 8011ffa:	60ba      	str	r2, [r7, #8]
 8011ffc:	2200      	movs	r2, #0
 8011ffe:	6239      	str	r1, [r7, #32]
 8012000:	627a      	str	r2, [r7, #36]	@ 0x24
 8012002:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012004:	2a00      	cmp	r2, #0
 8012006:	f2c0 80d5 	blt.w	80121b4 <forward_lite_conv2d_if32of32wf32+0x254>
 801200a:	2200      	movs	r2, #0
 801200c:	f8d7 b028 	ldr.w	fp, [r7, #40]	@ 0x28
 8012010:	657a      	str	r2, [r7, #84]	@ 0x54
 8012012:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8012014:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8012018:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 801201c:	440a      	add	r2, r1
 801201e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8012020:	4282      	cmp	r2, r0
 8012022:	bf94      	ite	ls
 8012024:	ebc1 0102 	rsbls	r1, r1, r2
 8012028:	ebc1 0100 	rsbhi	r1, r1, r0
 801202c:	6a3a      	ldr	r2, [r7, #32]
 801202e:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 8012032:	6439      	str	r1, [r7, #64]	@ 0x40
 8012034:	d24d      	bcs.n	80120d2 <forward_lite_conv2d_if32of32wf32+0x172>
 8012036:	b385      	cbz	r5, 801209a <forward_lite_conv2d_if32of32wf32+0x13a>
 8012038:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801203a:	2a00      	cmp	r2, #0
 801203c:	f000 80bf 	beq.w	80121be <forward_lite_conv2d_if32of32wf32+0x25e>
 8012040:	4659      	mov	r1, fp
 8012042:	4691      	mov	r9, r2
 8012044:	46d3      	mov	fp, sl
 8012046:	f8d7 802c 	ldr.w	r8, [r7, #44]	@ 0x2c
 801204a:	693e      	ldr	r6, [r7, #16]
 801204c:	2400      	movs	r4, #0
 801204e:	f8d7 a040 	ldr.w	sl, [r7, #64]	@ 0x40
 8012052:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012054:	3401      	adds	r4, #1
 8012056:	ecb9 0a01 	vldmia	r9!, {s0}
 801205a:	4640      	mov	r0, r8
 801205c:	9207      	str	r2, [sp, #28]
 801205e:	f108 0804 	add.w	r8, r8, #4
 8012062:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012064:	e9cd a205 	strd	sl, r2, [sp, #20]
 8012068:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801206a:	9204      	str	r2, [sp, #16]
 801206c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8012070:	9203      	str	r2, [sp, #12]
 8012072:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8012076:	9202      	str	r2, [sp, #8]
 8012078:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 801207c:	e9cd 5200 	strd	r5, r2, [sp]
 8012080:	4632      	mov	r2, r6
 8012082:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8012086:	64b9      	str	r1, [r7, #72]	@ 0x48
 8012088:	445e      	add	r6, fp
 801208a:	f7ff fe53 	bl	8011d34 <ai_conv2d_kernel_simple_opt_f32.constprop.0>
 801208e:	42a5      	cmp	r5, r4
 8012090:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8012092:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8012096:	d1dc      	bne.n	8012052 <forward_lite_conv2d_if32of32wf32+0xf2>
 8012098:	46da      	mov	sl, fp
 801209a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801209c:	69b8      	ldr	r0, [r7, #24]
 801209e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80120a0:	4401      	add	r1, r0
 80120a2:	6978      	ldr	r0, [r7, #20]
 80120a4:	3201      	adds	r2, #1
 80120a6:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80120a8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80120aa:	627a      	str	r2, [r7, #36]	@ 0x24
 80120ac:	4401      	add	r1, r0
 80120ae:	6339      	str	r1, [r7, #48]	@ 0x30
 80120b0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80120b2:	1a09      	subs	r1, r1, r0
 80120b4:	69f8      	ldr	r0, [r7, #28]
 80120b6:	6379      	str	r1, [r7, #52]	@ 0x34
 80120b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80120ba:	4401      	add	r1, r0
 80120bc:	62b9      	str	r1, [r7, #40]	@ 0x28
 80120be:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 80120c2:	4291      	cmp	r1, r2
 80120c4:	d19d      	bne.n	8012002 <forward_lite_conv2d_if32of32wf32+0xa2>
 80120c6:	375c      	adds	r7, #92	@ 0x5c
 80120c8:	46bd      	mov	sp, r7
 80120ca:	ecbd 8b02 	vpop	{d8}
 80120ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120d2:	466a      	mov	r2, sp
 80120d4:	ee08 2a90 	vmov	s17, r2
 80120d8:	68fa      	ldr	r2, [r7, #12]
 80120da:	ebad 0d02 	sub.w	sp, sp, r2
 80120de:	aa08      	add	r2, sp, #32
 80120e0:	2d00      	cmp	r5, #0
 80120e2:	d03d      	beq.n	8012160 <forward_lite_conv2d_if32of32wf32+0x200>
 80120e4:	6938      	ldr	r0, [r7, #16]
 80120e6:	4659      	mov	r1, fp
 80120e8:	68bc      	ldr	r4, [r7, #8]
 80120ea:	46ab      	mov	fp, r5
 80120ec:	f8d7 902c 	ldr.w	r9, [r7, #44]	@ 0x2c
 80120f0:	f04f 0800 	mov.w	r8, #0
 80120f4:	6bfe      	ldr	r6, [r7, #60]	@ 0x3c
 80120f6:	4605      	mov	r5, r0
 80120f8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80120fa:	b138      	cbz	r0, 801210c <forward_lite_conv2d_if32of32wf32+0x1ac>
 80120fc:	4628      	mov	r0, r5
 80120fe:	4694      	mov	ip, r2
 8012100:	f850 eb04 	ldr.w	lr, [r0], #4
 8012104:	42a0      	cmp	r0, r4
 8012106:	f84c eb04 	str.w	lr, [ip], #4
 801210a:	d1f9      	bne.n	8012100 <forward_lite_conv2d_if32of32wf32+0x1a0>
 801210c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 801210e:	f108 0801 	add.w	r8, r8, #1
 8012112:	b348      	cbz	r0, 8012168 <forward_lite_conv2d_if32of32wf32+0x208>
 8012114:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8012116:	4455      	add	r5, sl
 8012118:	ecb6 0a01 	vldmia	r6!, {s0}
 801211c:	4454      	add	r4, sl
 801211e:	9007      	str	r0, [sp, #28]
 8012120:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8012122:	9006      	str	r0, [sp, #24]
 8012124:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8012126:	9005      	str	r0, [sp, #20]
 8012128:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801212a:	9004      	str	r0, [sp, #16]
 801212c:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8012130:	9003      	str	r0, [sp, #12]
 8012132:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 8012136:	9002      	str	r0, [sp, #8]
 8012138:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 801213c:	e9cd b000 	strd	fp, r0, [sp]
 8012140:	4648      	mov	r0, r9
 8012142:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8012146:	f109 0904 	add.w	r9, r9, #4
 801214a:	e9c7 2111 	strd	r2, r1, [r7, #68]	@ 0x44
 801214e:	f7ff fdf1 	bl	8011d34 <ai_conv2d_kernel_simple_opt_f32.constprop.0>
 8012152:	45d8      	cmp	r8, fp
 8012154:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8012158:	e9d7 2111 	ldrd	r2, r1, [r7, #68]	@ 0x44
 801215c:	d1cc      	bne.n	80120f8 <forward_lite_conv2d_if32of32wf32+0x198>
 801215e:	465d      	mov	r5, fp
 8012160:	ee18 2a90 	vmov	r2, s17
 8012164:	4695      	mov	sp, r2
 8012166:	e798      	b.n	801209a <forward_lite_conv2d_if32of32wf32+0x13a>
 8012168:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801216a:	eeb0 0a48 	vmov.f32	s0, s16
 801216e:	4455      	add	r5, sl
 8012170:	4454      	add	r4, sl
 8012172:	9007      	str	r0, [sp, #28]
 8012174:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8012176:	9006      	str	r0, [sp, #24]
 8012178:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 801217a:	9005      	str	r0, [sp, #20]
 801217c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801217e:	9004      	str	r0, [sp, #16]
 8012180:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8012184:	9003      	str	r0, [sp, #12]
 8012186:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 801218a:	9002      	str	r0, [sp, #8]
 801218c:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8012190:	e9cd b000 	strd	fp, r0, [sp]
 8012194:	4648      	mov	r0, r9
 8012196:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801219a:	f109 0904 	add.w	r9, r9, #4
 801219e:	e9c7 2111 	strd	r2, r1, [r7, #68]	@ 0x44
 80121a2:	f7ff fdc7 	bl	8011d34 <ai_conv2d_kernel_simple_opt_f32.constprop.0>
 80121a6:	45c3      	cmp	fp, r8
 80121a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80121ac:	e9d7 2111 	ldrd	r2, r1, [r7, #68]	@ 0x44
 80121b0:	d1a2      	bne.n	80120f8 <forward_lite_conv2d_if32of32wf32+0x198>
 80121b2:	e7d4      	b.n	801215e <forward_lite_conv2d_if32of32wf32+0x1fe>
 80121b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80121b6:	f8d7 b004 	ldr.w	fp, [r7, #4]
 80121ba:	657a      	str	r2, [r7, #84]	@ 0x54
 80121bc:	e729      	b.n	8012012 <forward_lite_conv2d_if32of32wf32+0xb2>
 80121be:	4659      	mov	r1, fp
 80121c0:	f8d7 802c 	ldr.w	r8, [r7, #44]	@ 0x2c
 80121c4:	46d3      	mov	fp, sl
 80121c6:	693e      	ldr	r6, [r7, #16]
 80121c8:	4614      	mov	r4, r2
 80121ca:	f8d7 9054 	ldr.w	r9, [r7, #84]	@ 0x54
 80121ce:	f8d7 a040 	ldr.w	sl, [r7, #64]	@ 0x40
 80121d2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80121d4:	3401      	adds	r4, #1
 80121d6:	4640      	mov	r0, r8
 80121d8:	eeb0 0a48 	vmov.f32	s0, s16
 80121dc:	9207      	str	r2, [sp, #28]
 80121de:	f108 0804 	add.w	r8, r8, #4
 80121e2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80121e4:	f8cd 9010 	str.w	r9, [sp, #16]
 80121e8:	e9cd a205 	strd	sl, r2, [sp, #20]
 80121ec:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 80121f0:	9203      	str	r2, [sp, #12]
 80121f2:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80121f6:	9202      	str	r2, [sp, #8]
 80121f8:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80121fc:	e9cd 5200 	strd	r5, r2, [sp]
 8012200:	4632      	mov	r2, r6
 8012202:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8012206:	6579      	str	r1, [r7, #84]	@ 0x54
 8012208:	445e      	add	r6, fp
 801220a:	f7ff fd93 	bl	8011d34 <ai_conv2d_kernel_simple_opt_f32.constprop.0>
 801220e:	42a5      	cmp	r5, r4
 8012210:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8012212:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8012216:	d1dc      	bne.n	80121d2 <forward_lite_conv2d_if32of32wf32+0x272>
 8012218:	e73e      	b.n	8012098 <forward_lite_conv2d_if32of32wf32+0x138>
 801221a:	bf00      	nop
 801221c:	00000000 	.word	0x00000000

08012220 <forward_lite_dense_if32of32wf32>:
 8012220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012224:	ed2d 8b0c 	vpush	{d8-d13}
 8012228:	e9dd 6415 	ldrd	r6, r4, [sp, #84]	@ 0x54
 801222c:	eb00 0784 	add.w	r7, r0, r4, lsl #2
 8012230:	4287      	cmp	r7, r0
 8012232:	f240 8105 	bls.w	8012440 <forward_lite_dense_if32of32wf32+0x220>
 8012236:	f1a6 0810 	sub.w	r8, r6, #16
 801223a:	ea4f 0986 	mov.w	r9, r6, lsl #2
 801223e:	4605      	mov	r5, r0
 8012240:	f006 0b0f 	and.w	fp, r6, #15
 8012244:	ea4f 1818 	mov.w	r8, r8, lsr #4
 8012248:	f108 0801 	add.w	r8, r8, #1
 801224c:	ea4f 1a88 	mov.w	sl, r8, lsl #6
 8012250:	eb01 1888 	add.w	r8, r1, r8, lsl #6
 8012254:	2e0f      	cmp	r6, #15
 8012256:	ed9f 7a85 	vldr	s14, [pc, #532]	@ 801246c <forward_lite_dense_if32of32wf32+0x24c>
 801225a:	f240 8102 	bls.w	8012462 <forward_lite_dense_if32of32wf32+0x242>
 801225e:	f101 0c40 	add.w	ip, r1, #64	@ 0x40
 8012262:	f102 0440 	add.w	r4, r2, #64	@ 0x40
 8012266:	46b6      	mov	lr, r6
 8012268:	ed54 6a0f 	vldr	s13, [r4, #-60]	@ 0xffffffc4
 801226c:	f1ae 0e10 	sub.w	lr, lr, #16
 8012270:	ed5c 7a0f 	vldr	s15, [ip, #-60]	@ 0xffffffc4
 8012274:	3440      	adds	r4, #64	@ 0x40
 8012276:	ed5c 4a10 	vldr	s9, [ip, #-64]	@ 0xffffffc0
 801227a:	f1be 0f0f 	cmp.w	lr, #15
 801227e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012282:	ed14 5a20 	vldr	s10, [r4, #-128]	@ 0xffffff80
 8012286:	ed5c 5a0e 	vldr	s11, [ip, #-56]	@ 0xffffffc8
 801228a:	f10c 0c40 	add.w	ip, ip, #64	@ 0x40
 801228e:	ed14 6a1e 	vldr	s12, [r4, #-120]	@ 0xffffff88
 8012292:	eee4 7a85 	vfma.f32	s15, s9, s10
 8012296:	ed54 6a1d 	vldr	s13, [r4, #-116]	@ 0xffffff8c
 801229a:	ed1c da1d 	vldr	s26, [ip, #-116]	@ 0xffffff8c
 801229e:	ed5c ca1c 	vldr	s25, [ip, #-112]	@ 0xffffff90
 80122a2:	ed14 ca1c 	vldr	s24, [r4, #-112]	@ 0xffffff90
 80122a6:	ed5c ba1b 	vldr	s23, [ip, #-108]	@ 0xffffff94
 80122aa:	ed14 ba1b 	vldr	s22, [r4, #-108]	@ 0xffffff94
 80122ae:	eee5 7a86 	vfma.f32	s15, s11, s12
 80122b2:	ed5c aa1a 	vldr	s21, [ip, #-104]	@ 0xffffff98
 80122b6:	ed14 aa1a 	vldr	s20, [r4, #-104]	@ 0xffffff98
 80122ba:	ed5c 9a19 	vldr	s19, [ip, #-100]	@ 0xffffff9c
 80122be:	ed14 9a19 	vldr	s18, [r4, #-100]	@ 0xffffff9c
 80122c2:	ed5c 8a18 	vldr	s17, [ip, #-96]	@ 0xffffffa0
 80122c6:	ed14 8a18 	vldr	s16, [r4, #-96]	@ 0xffffffa0
 80122ca:	eeed 7a26 	vfma.f32	s15, s26, s13
 80122ce:	ed1c 0a17 	vldr	s0, [ip, #-92]	@ 0xffffffa4
 80122d2:	ed54 0a17 	vldr	s1, [r4, #-92]	@ 0xffffffa4
 80122d6:	ed1c 1a16 	vldr	s2, [ip, #-88]	@ 0xffffffa8
 80122da:	ed54 1a16 	vldr	s3, [r4, #-88]	@ 0xffffffa8
 80122de:	ed1c 2a15 	vldr	s4, [ip, #-84]	@ 0xffffffac
 80122e2:	ed54 2a15 	vldr	s5, [r4, #-84]	@ 0xffffffac
 80122e6:	eeec 7a8c 	vfma.f32	s15, s25, s24
 80122ea:	ed1c 3a14 	vldr	s6, [ip, #-80]	@ 0xffffffb0
 80122ee:	ed54 3a14 	vldr	s7, [r4, #-80]	@ 0xffffffb0
 80122f2:	ed1c 4a13 	vldr	s8, [ip, #-76]	@ 0xffffffb4
 80122f6:	ed54 4a13 	vldr	s9, [r4, #-76]	@ 0xffffffb4
 80122fa:	ed1c 5a12 	vldr	s10, [ip, #-72]	@ 0xffffffb8
 80122fe:	ed54 5a12 	vldr	s11, [r4, #-72]	@ 0xffffffb8
 8012302:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8012306:	ed1c 6a11 	vldr	s12, [ip, #-68]	@ 0xffffffbc
 801230a:	ed54 6a11 	vldr	s13, [r4, #-68]	@ 0xffffffbc
 801230e:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8012312:	eee9 7a89 	vfma.f32	s15, s19, s18
 8012316:	eee8 7a88 	vfma.f32	s15, s17, s16
 801231a:	eee0 7a20 	vfma.f32	s15, s0, s1
 801231e:	eee1 7a21 	vfma.f32	s15, s2, s3
 8012322:	eee2 7a22 	vfma.f32	s15, s4, s5
 8012326:	eee3 7a23 	vfma.f32	s15, s6, s7
 801232a:	eee4 7a24 	vfma.f32	s15, s8, s9
 801232e:	eee5 7a25 	vfma.f32	s15, s10, s11
 8012332:	eee6 7a26 	vfma.f32	s15, s12, s13
 8012336:	ee37 7a27 	vadd.f32	s14, s14, s15
 801233a:	d895      	bhi.n	8012268 <forward_lite_dense_if32of32wf32+0x48>
 801233c:	eb02 0e0a 	add.w	lr, r2, sl
 8012340:	465c      	mov	r4, fp
 8012342:	46c4      	mov	ip, r8
 8012344:	2c00      	cmp	r4, #0
 8012346:	d075      	beq.n	8012434 <forward_lite_dense_if32of32wf32+0x214>
 8012348:	eddc 6a00 	vldr	s13, [ip]
 801234c:	2c01      	cmp	r4, #1
 801234e:	edde 7a00 	vldr	s15, [lr]
 8012352:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012356:	d06d      	beq.n	8012434 <forward_lite_dense_if32of32wf32+0x214>
 8012358:	eddc 6a01 	vldr	s13, [ip, #4]
 801235c:	2c02      	cmp	r4, #2
 801235e:	edde 7a01 	vldr	s15, [lr, #4]
 8012362:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012366:	d065      	beq.n	8012434 <forward_lite_dense_if32of32wf32+0x214>
 8012368:	eddc 6a02 	vldr	s13, [ip, #8]
 801236c:	2c03      	cmp	r4, #3
 801236e:	edde 7a02 	vldr	s15, [lr, #8]
 8012372:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012376:	d05d      	beq.n	8012434 <forward_lite_dense_if32of32wf32+0x214>
 8012378:	eddc 6a03 	vldr	s13, [ip, #12]
 801237c:	2c04      	cmp	r4, #4
 801237e:	edde 7a03 	vldr	s15, [lr, #12]
 8012382:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012386:	d055      	beq.n	8012434 <forward_lite_dense_if32of32wf32+0x214>
 8012388:	eddc 6a04 	vldr	s13, [ip, #16]
 801238c:	2c05      	cmp	r4, #5
 801238e:	edde 7a04 	vldr	s15, [lr, #16]
 8012392:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012396:	d04d      	beq.n	8012434 <forward_lite_dense_if32of32wf32+0x214>
 8012398:	eddc 6a05 	vldr	s13, [ip, #20]
 801239c:	2c06      	cmp	r4, #6
 801239e:	edde 7a05 	vldr	s15, [lr, #20]
 80123a2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80123a6:	d045      	beq.n	8012434 <forward_lite_dense_if32of32wf32+0x214>
 80123a8:	eddc 6a06 	vldr	s13, [ip, #24]
 80123ac:	2c07      	cmp	r4, #7
 80123ae:	edde 7a06 	vldr	s15, [lr, #24]
 80123b2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80123b6:	d03d      	beq.n	8012434 <forward_lite_dense_if32of32wf32+0x214>
 80123b8:	eddc 6a07 	vldr	s13, [ip, #28]
 80123bc:	2c08      	cmp	r4, #8
 80123be:	edde 7a07 	vldr	s15, [lr, #28]
 80123c2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80123c6:	d035      	beq.n	8012434 <forward_lite_dense_if32of32wf32+0x214>
 80123c8:	eddc 6a08 	vldr	s13, [ip, #32]
 80123cc:	2c09      	cmp	r4, #9
 80123ce:	edde 7a08 	vldr	s15, [lr, #32]
 80123d2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80123d6:	d02d      	beq.n	8012434 <forward_lite_dense_if32of32wf32+0x214>
 80123d8:	eddc 6a09 	vldr	s13, [ip, #36]	@ 0x24
 80123dc:	2c0a      	cmp	r4, #10
 80123de:	edde 7a09 	vldr	s15, [lr, #36]	@ 0x24
 80123e2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80123e6:	d025      	beq.n	8012434 <forward_lite_dense_if32of32wf32+0x214>
 80123e8:	eddc 6a0a 	vldr	s13, [ip, #40]	@ 0x28
 80123ec:	2c0b      	cmp	r4, #11
 80123ee:	edde 7a0a 	vldr	s15, [lr, #40]	@ 0x28
 80123f2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80123f6:	d01d      	beq.n	8012434 <forward_lite_dense_if32of32wf32+0x214>
 80123f8:	eddc 6a0b 	vldr	s13, [ip, #44]	@ 0x2c
 80123fc:	2c0c      	cmp	r4, #12
 80123fe:	edde 7a0b 	vldr	s15, [lr, #44]	@ 0x2c
 8012402:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012406:	d015      	beq.n	8012434 <forward_lite_dense_if32of32wf32+0x214>
 8012408:	eddc 6a0c 	vldr	s13, [ip, #48]	@ 0x30
 801240c:	3c0d      	subs	r4, #13
 801240e:	edde 7a0c 	vldr	s15, [lr, #48]	@ 0x30
 8012412:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012416:	d00d      	beq.n	8012434 <forward_lite_dense_if32of32wf32+0x214>
 8012418:	eddc 6a0d 	vldr	s13, [ip, #52]	@ 0x34
 801241c:	2c01      	cmp	r4, #1
 801241e:	edde 7a0d 	vldr	s15, [lr, #52]	@ 0x34
 8012422:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012426:	d005      	beq.n	8012434 <forward_lite_dense_if32of32wf32+0x214>
 8012428:	edde 6a0e 	vldr	s13, [lr, #56]	@ 0x38
 801242c:	eddc 7a0e 	vldr	s15, [ip, #56]	@ 0x38
 8012430:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012434:	eca5 7a01 	vstmia	r5!, {s14}
 8012438:	42af      	cmp	r7, r5
 801243a:	444a      	add	r2, r9
 801243c:	f63f af0a 	bhi.w	8012254 <forward_lite_dense_if32of32wf32+0x34>
 8012440:	b15b      	cbz	r3, 801245a <forward_lite_dense_if32of32wf32+0x23a>
 8012442:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8012444:	b14a      	cbz	r2, 801245a <forward_lite_dense_if32of32wf32+0x23a>
 8012446:	edd0 7a00 	vldr	s15, [r0]
 801244a:	ecb3 7a01 	vldmia	r3!, {s14}
 801244e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012452:	ece0 7a01 	vstmia	r0!, {s15}
 8012456:	4287      	cmp	r7, r0
 8012458:	d1f5      	bne.n	8012446 <forward_lite_dense_if32of32wf32+0x226>
 801245a:	ecbd 8b0c 	vpop	{d8-d13}
 801245e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012462:	4634      	mov	r4, r6
 8012464:	4696      	mov	lr, r2
 8012466:	468c      	mov	ip, r1
 8012468:	e76c      	b.n	8012344 <forward_lite_dense_if32of32wf32+0x124>
 801246a:	bf00      	nop
 801246c:	00000000 	.word	0x00000000

08012470 <st_int8_copy>:
 8012470:	4288      	cmp	r0, r1
 8012472:	d010      	beq.n	8012496 <st_int8_copy+0x26>
 8012474:	b17a      	cbz	r2, 8012496 <st_int8_copy+0x26>
 8012476:	4288      	cmp	r0, r1
 8012478:	eb00 0302 	add.w	r3, r0, r2
 801247c:	d20c      	bcs.n	8012498 <st_int8_copy+0x28>
 801247e:	428b      	cmp	r3, r1
 8012480:	d90a      	bls.n	8012498 <st_int8_copy+0x28>
 8012482:	4283      	cmp	r3, r0
 8012484:	440a      	add	r2, r1
 8012486:	d906      	bls.n	8012496 <st_int8_copy+0x26>
 8012488:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 801248c:	4283      	cmp	r3, r0
 801248e:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8012492:	d1f9      	bne.n	8012488 <st_int8_copy+0x18>
 8012494:	4770      	bx	lr
 8012496:	4770      	bx	lr
 8012498:	078b      	lsls	r3, r1, #30
 801249a:	d102      	bne.n	80124a2 <st_int8_copy+0x32>
 801249c:	e008      	b.n	80124b0 <st_int8_copy+0x40>
 801249e:	2a00      	cmp	r2, #0
 80124a0:	d04d      	beq.n	801253e <st_int8_copy+0xce>
 80124a2:	f910 3b01 	ldrsb.w	r3, [r0], #1
 80124a6:	3a01      	subs	r2, #1
 80124a8:	f801 3b01 	strb.w	r3, [r1], #1
 80124ac:	078b      	lsls	r3, r1, #30
 80124ae:	d1f6      	bne.n	801249e <st_int8_copy+0x2e>
 80124b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80124b4:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 80124b8:	d05e      	beq.n	8012578 <st_int8_copy+0x108>
 80124ba:	ea40 0301 	orr.w	r3, r0, r1
 80124be:	075b      	lsls	r3, r3, #29
 80124c0:	d13e      	bne.n	8012540 <st_int8_copy+0xd0>
 80124c2:	f10e 33ff 	add.w	r3, lr, #4294967295
 80124c6:	2b01      	cmp	r3, #1
 80124c8:	d93a      	bls.n	8012540 <st_int8_copy+0xd0>
 80124ca:	f100 0310 	add.w	r3, r0, #16
 80124ce:	ea4f 140e 	mov.w	r4, lr, lsl #4
 80124d2:	f101 0c10 	add.w	ip, r1, #16
 80124d6:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 80124da:	3310      	adds	r3, #16
 80124dc:	f10c 0c10 	add.w	ip, ip, #16
 80124e0:	ed13 6b08 	vldr	d6, [r3, #-32]	@ 0xffffffe0
 80124e4:	ed13 7b06 	vldr	d7, [r3, #-24]	@ 0xffffffe8
 80124e8:	4573      	cmp	r3, lr
 80124ea:	ed0c 6b08 	vstr	d6, [ip, #-32]	@ 0xffffffe0
 80124ee:	ed0c 7b06 	vstr	d7, [ip, #-24]	@ 0xffffffe8
 80124f2:	d1f2      	bne.n	80124da <st_int8_copy+0x6a>
 80124f4:	f3c2 0381 	ubfx	r3, r2, #2, #2
 80124f8:	4421      	add	r1, r4
 80124fa:	4420      	add	r0, r4
 80124fc:	f002 0203 	and.w	r2, r2, #3
 8012500:	b16b      	cbz	r3, 801251e <st_int8_copy+0xae>
 8012502:	6804      	ldr	r4, [r0, #0]
 8012504:	600c      	str	r4, [r1, #0]
 8012506:	1e5c      	subs	r4, r3, #1
 8012508:	d005      	beq.n	8012516 <st_int8_copy+0xa6>
 801250a:	6845      	ldr	r5, [r0, #4]
 801250c:	2c01      	cmp	r4, #1
 801250e:	604d      	str	r5, [r1, #4]
 8012510:	d001      	beq.n	8012516 <st_int8_copy+0xa6>
 8012512:	6884      	ldr	r4, [r0, #8]
 8012514:	608c      	str	r4, [r1, #8]
 8012516:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801251a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801251e:	b162      	cbz	r2, 801253a <st_int8_copy+0xca>
 8012520:	f990 3000 	ldrsb.w	r3, [r0]
 8012524:	3a01      	subs	r2, #1
 8012526:	700b      	strb	r3, [r1, #0]
 8012528:	d007      	beq.n	801253a <st_int8_copy+0xca>
 801252a:	f990 3001 	ldrsb.w	r3, [r0, #1]
 801252e:	2a01      	cmp	r2, #1
 8012530:	704b      	strb	r3, [r1, #1]
 8012532:	d002      	beq.n	801253a <st_int8_copy+0xca>
 8012534:	f990 3002 	ldrsb.w	r3, [r0, #2]
 8012538:	708b      	strb	r3, [r1, #2]
 801253a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801253e:	4770      	bx	lr
 8012540:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8012544:	460b      	mov	r3, r1
 8012546:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 801254a:	4684      	mov	ip, r0
 801254c:	f8dc 8000 	ldr.w	r8, [ip]
 8012550:	3310      	adds	r3, #16
 8012552:	f8dc 7004 	ldr.w	r7, [ip, #4]
 8012556:	f10c 0c10 	add.w	ip, ip, #16
 801255a:	f85c 6c08 	ldr.w	r6, [ip, #-8]
 801255e:	f85c 5c04 	ldr.w	r5, [ip, #-4]
 8012562:	f843 8c10 	str.w	r8, [r3, #-16]
 8012566:	f843 7c0c 	str.w	r7, [r3, #-12]
 801256a:	f843 6c08 	str.w	r6, [r3, #-8]
 801256e:	f843 5c04 	str.w	r5, [r3, #-4]
 8012572:	459e      	cmp	lr, r3
 8012574:	d1ea      	bne.n	801254c <st_int8_copy+0xdc>
 8012576:	e7bd      	b.n	80124f4 <st_int8_copy+0x84>
 8012578:	0893      	lsrs	r3, r2, #2
 801257a:	f002 0203 	and.w	r2, r2, #3
 801257e:	e7bf      	b.n	8012500 <st_int8_copy+0x90>

08012580 <ai_array_to_buffer_fmt>:
 8012580:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8012584:	2b02      	cmp	r3, #2
 8012586:	d050      	beq.n	801262a <ai_array_to_buffer_fmt+0xaa>
 8012588:	f020 427e 	bic.w	r2, r0, #4261412864	@ 0xfe000000
 801258c:	4b29      	ldr	r3, [pc, #164]	@ (8012634 <ai_array_to_buffer_fmt+0xb4>)
 801258e:	429a      	cmp	r2, r3
 8012590:	d00b      	beq.n	80125aa <ai_array_to_buffer_fmt+0x2a>
 8012592:	dc1c      	bgt.n	80125ce <ai_array_to_buffer_fmt+0x4e>
 8012594:	4b28      	ldr	r3, [pc, #160]	@ (8012638 <ai_array_to_buffer_fmt+0xb8>)
 8012596:	429a      	cmp	r2, r3
 8012598:	d007      	beq.n	80125aa <ai_array_to_buffer_fmt+0x2a>
 801259a:	dd0b      	ble.n	80125b4 <ai_array_to_buffer_fmt+0x34>
 801259c:	4b27      	ldr	r3, [pc, #156]	@ (801263c <ai_array_to_buffer_fmt+0xbc>)
 801259e:	429a      	cmp	r2, r3
 80125a0:	d003      	beq.n	80125aa <ai_array_to_buffer_fmt+0x2a>
 80125a2:	f503 33fa 	add.w	r3, r3, #128000	@ 0x1f400
 80125a6:	429a      	cmp	r2, r3
 80125a8:	d131      	bne.n	801260e <ai_array_to_buffer_fmt+0x8e>
 80125aa:	4613      	mov	r3, r2
 80125ac:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 80125b0:	4318      	orrs	r0, r3
 80125b2:	4770      	bx	lr
 80125b4:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80125b8:	429a      	cmp	r2, r3
 80125ba:	d0f6      	beq.n	80125aa <ai_array_to_buffer_fmt+0x2a>
 80125bc:	dd2c      	ble.n	8012618 <ai_array_to_buffer_fmt+0x98>
 80125be:	4b20      	ldr	r3, [pc, #128]	@ (8012640 <ai_array_to_buffer_fmt+0xc0>)
 80125c0:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 80125c4:	429a      	cmp	r2, r3
 80125c6:	bf18      	it	ne
 80125c8:	2340      	movne	r3, #64	@ 0x40
 80125ca:	4318      	orrs	r0, r3
 80125cc:	4770      	bx	lr
 80125ce:	4b1d      	ldr	r3, [pc, #116]	@ (8012644 <ai_array_to_buffer_fmt+0xc4>)
 80125d0:	429a      	cmp	r2, r3
 80125d2:	d0ea      	beq.n	80125aa <ai_array_to_buffer_fmt+0x2a>
 80125d4:	dd0e      	ble.n	80125f4 <ai_array_to_buffer_fmt+0x74>
 80125d6:	4b1c      	ldr	r3, [pc, #112]	@ (8012648 <ai_array_to_buffer_fmt+0xc8>)
 80125d8:	429a      	cmp	r2, r3
 80125da:	d0e6      	beq.n	80125aa <ai_array_to_buffer_fmt+0x2a>
 80125dc:	f503 037e 	add.w	r3, r3, #16646144	@ 0xfe0000
 80125e0:	429a      	cmp	r2, r3
 80125e2:	d0e2      	beq.n	80125aa <ai_array_to_buffer_fmt+0x2a>
 80125e4:	4b19      	ldr	r3, [pc, #100]	@ (801264c <ai_array_to_buffer_fmt+0xcc>)
 80125e6:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 80125ea:	429a      	cmp	r2, r3
 80125ec:	bf18      	it	ne
 80125ee:	2340      	movne	r3, #64	@ 0x40
 80125f0:	4318      	orrs	r0, r3
 80125f2:	4770      	bx	lr
 80125f4:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80125f8:	429a      	cmp	r2, r3
 80125fa:	d0d6      	beq.n	80125aa <ai_array_to_buffer_fmt+0x2a>
 80125fc:	3307      	adds	r3, #7
 80125fe:	429a      	cmp	r2, r3
 8012600:	d0d3      	beq.n	80125aa <ai_array_to_buffer_fmt+0x2a>
 8012602:	f2a3 3387 	subw	r3, r3, #903	@ 0x387
 8012606:	429a      	cmp	r2, r3
 8012608:	bf18      	it	ne
 801260a:	2340      	movne	r3, #64	@ 0x40
 801260c:	e7ce      	b.n	80125ac <ai_array_to_buffer_fmt+0x2c>
 801260e:	4b10      	ldr	r3, [pc, #64]	@ (8012650 <ai_array_to_buffer_fmt+0xd0>)
 8012610:	429a      	cmp	r2, r3
 8012612:	bf18      	it	ne
 8012614:	2340      	movne	r3, #64	@ 0x40
 8012616:	e7c9      	b.n	80125ac <ai_array_to_buffer_fmt+0x2c>
 8012618:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 801261c:	429a      	cmp	r2, r3
 801261e:	d0c4      	beq.n	80125aa <ai_array_to_buffer_fmt+0x2a>
 8012620:	3380      	adds	r3, #128	@ 0x80
 8012622:	429a      	cmp	r2, r3
 8012624:	bf18      	it	ne
 8012626:	2340      	movne	r3, #64	@ 0x40
 8012628:	e7c0      	b.n	80125ac <ai_array_to_buffer_fmt+0x2c>
 801262a:	4b0a      	ldr	r3, [pc, #40]	@ (8012654 <ai_array_to_buffer_fmt+0xd4>)
 801262c:	4003      	ands	r3, r0
 801262e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8012632:	e7bb      	b.n	80125ac <ai_array_to_buffer_fmt+0x2c>
 8012634:	00840040 	.word	0x00840040
 8012638:	00040840 	.word	0x00040840
 801263c:	00041040 	.word	0x00041040
 8012640:	00040447 	.word	0x00040447
 8012644:	00840840 	.word	0x00840840
 8012648:	00841040 	.word	0x00841040
 801264c:	0084084f 	.word	0x0084084f
 8012650:	0004084f 	.word	0x0004084f
 8012654:	00803fff 	.word	0x00803fff

08012658 <ai_array_get_byte_size>:
 8012658:	b319      	cbz	r1, 80126a2 <ai_array_get_byte_size+0x4a>
 801265a:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 801265e:	f3c0 4243 	ubfx	r2, r0, #17, #4
 8012662:	f3c0 5c41 	ubfx	ip, r0, #21, #2
 8012666:	11c0      	asrs	r0, r0, #7
 8012668:	fb03 f101 	mul.w	r1, r3, r1
 801266c:	2a04      	cmp	r2, #4
 801266e:	f101 0107 	add.w	r1, r1, #7
 8012672:	f021 0107 	bic.w	r1, r1, #7
 8012676:	fa21 f10c 	lsr.w	r1, r1, ip
 801267a:	d00b      	beq.n	8012694 <ai_array_get_byte_size+0x3c>
 801267c:	2a08      	cmp	r2, #8
 801267e:	d002      	beq.n	8012686 <ai_array_get_byte_size+0x2e>
 8012680:	3107      	adds	r1, #7
 8012682:	08c8      	lsrs	r0, r1, #3
 8012684:	4770      	bx	lr
 8012686:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 801268a:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 801268e:	3107      	adds	r1, #7
 8012690:	08c8      	lsrs	r0, r1, #3
 8012692:	4770      	bx	lr
 8012694:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8012698:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 801269c:	3107      	adds	r1, #7
 801269e:	08c8      	lsrs	r0, r1, #3
 80126a0:	4770      	bx	lr
 80126a2:	4608      	mov	r0, r1
 80126a4:	4770      	bx	lr
 80126a6:	bf00      	nop

080126a8 <ai_array_get_data_byte_size>:
 80126a8:	b161      	cbz	r1, 80126c4 <ai_array_get_data_byte_size+0x1c>
 80126aa:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 80126ae:	f3c0 5241 	ubfx	r2, r0, #21, #2
 80126b2:	fb03 f101 	mul.w	r1, r3, r1
 80126b6:	1dc8      	adds	r0, r1, #7
 80126b8:	f020 0007 	bic.w	r0, r0, #7
 80126bc:	40d0      	lsrs	r0, r2
 80126be:	3007      	adds	r0, #7
 80126c0:	08c0      	lsrs	r0, r0, #3
 80126c2:	4770      	bx	lr
 80126c4:	4608      	mov	r0, r1
 80126c6:	4770      	bx	lr

080126c8 <ai_version_get>:
 80126c8:	0212      	lsls	r2, r2, #8
 80126ca:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80126ce:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 80126d2:	4770      	bx	lr

080126d4 <get_tensor_byte_size>:
 80126d4:	b430      	push	{r4, r5}
 80126d6:	6985      	ldr	r5, [r0, #24]
 80126d8:	68c4      	ldr	r4, [r0, #12]
 80126da:	6941      	ldr	r1, [r0, #20]
 80126dc:	4b06      	ldr	r3, [pc, #24]	@ (80126f8 <get_tensor_byte_size+0x24>)
 80126de:	6828      	ldr	r0, [r5, #0]
 80126e0:	4a06      	ldr	r2, [pc, #24]	@ (80126fc <get_tensor_byte_size+0x28>)
 80126e2:	4003      	ands	r3, r0
 80126e4:	68c9      	ldr	r1, [r1, #12]
 80126e6:	68e0      	ldr	r0, [r4, #12]
 80126e8:	4293      	cmp	r3, r2
 80126ea:	fb01 f000 	mul.w	r0, r1, r0
 80126ee:	d101      	bne.n	80126f4 <get_tensor_byte_size+0x20>
 80126f0:	3007      	adds	r0, #7
 80126f2:	08c0      	lsrs	r0, r0, #3
 80126f4:	bc30      	pop	{r4, r5}
 80126f6:	4770      	bx	lr
 80126f8:	017fffff 	.word	0x017fffff
 80126fc:	000400c0 	.word	0x000400c0

08012700 <malloc>:
 8012700:	4b02      	ldr	r3, [pc, #8]	@ (801270c <malloc+0xc>)
 8012702:	4601      	mov	r1, r0
 8012704:	6818      	ldr	r0, [r3, #0]
 8012706:	f000 b825 	b.w	8012754 <_malloc_r>
 801270a:	bf00      	nop
 801270c:	20001468 	.word	0x20001468

08012710 <sbrk_aligned>:
 8012710:	b570      	push	{r4, r5, r6, lr}
 8012712:	4e0f      	ldr	r6, [pc, #60]	@ (8012750 <sbrk_aligned+0x40>)
 8012714:	460c      	mov	r4, r1
 8012716:	6831      	ldr	r1, [r6, #0]
 8012718:	4605      	mov	r5, r0
 801271a:	b911      	cbnz	r1, 8012722 <sbrk_aligned+0x12>
 801271c:	f001 f92e 	bl	801397c <_sbrk_r>
 8012720:	6030      	str	r0, [r6, #0]
 8012722:	4621      	mov	r1, r4
 8012724:	4628      	mov	r0, r5
 8012726:	f001 f929 	bl	801397c <_sbrk_r>
 801272a:	1c43      	adds	r3, r0, #1
 801272c:	d103      	bne.n	8012736 <sbrk_aligned+0x26>
 801272e:	f04f 34ff 	mov.w	r4, #4294967295
 8012732:	4620      	mov	r0, r4
 8012734:	bd70      	pop	{r4, r5, r6, pc}
 8012736:	1cc4      	adds	r4, r0, #3
 8012738:	f024 0403 	bic.w	r4, r4, #3
 801273c:	42a0      	cmp	r0, r4
 801273e:	d0f8      	beq.n	8012732 <sbrk_aligned+0x22>
 8012740:	1a21      	subs	r1, r4, r0
 8012742:	4628      	mov	r0, r5
 8012744:	f001 f91a 	bl	801397c <_sbrk_r>
 8012748:	3001      	adds	r0, #1
 801274a:	d1f2      	bne.n	8012732 <sbrk_aligned+0x22>
 801274c:	e7ef      	b.n	801272e <sbrk_aligned+0x1e>
 801274e:	bf00      	nop
 8012750:	2000c668 	.word	0x2000c668

08012754 <_malloc_r>:
 8012754:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012758:	1ccd      	adds	r5, r1, #3
 801275a:	f025 0503 	bic.w	r5, r5, #3
 801275e:	3508      	adds	r5, #8
 8012760:	2d0c      	cmp	r5, #12
 8012762:	bf38      	it	cc
 8012764:	250c      	movcc	r5, #12
 8012766:	2d00      	cmp	r5, #0
 8012768:	4606      	mov	r6, r0
 801276a:	db01      	blt.n	8012770 <_malloc_r+0x1c>
 801276c:	42a9      	cmp	r1, r5
 801276e:	d904      	bls.n	801277a <_malloc_r+0x26>
 8012770:	230c      	movs	r3, #12
 8012772:	6033      	str	r3, [r6, #0]
 8012774:	2000      	movs	r0, #0
 8012776:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801277a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012850 <_malloc_r+0xfc>
 801277e:	f000 f869 	bl	8012854 <__malloc_lock>
 8012782:	f8d8 3000 	ldr.w	r3, [r8]
 8012786:	461c      	mov	r4, r3
 8012788:	bb44      	cbnz	r4, 80127dc <_malloc_r+0x88>
 801278a:	4629      	mov	r1, r5
 801278c:	4630      	mov	r0, r6
 801278e:	f7ff ffbf 	bl	8012710 <sbrk_aligned>
 8012792:	1c43      	adds	r3, r0, #1
 8012794:	4604      	mov	r4, r0
 8012796:	d158      	bne.n	801284a <_malloc_r+0xf6>
 8012798:	f8d8 4000 	ldr.w	r4, [r8]
 801279c:	4627      	mov	r7, r4
 801279e:	2f00      	cmp	r7, #0
 80127a0:	d143      	bne.n	801282a <_malloc_r+0xd6>
 80127a2:	2c00      	cmp	r4, #0
 80127a4:	d04b      	beq.n	801283e <_malloc_r+0xea>
 80127a6:	6823      	ldr	r3, [r4, #0]
 80127a8:	4639      	mov	r1, r7
 80127aa:	4630      	mov	r0, r6
 80127ac:	eb04 0903 	add.w	r9, r4, r3
 80127b0:	f001 f8e4 	bl	801397c <_sbrk_r>
 80127b4:	4581      	cmp	r9, r0
 80127b6:	d142      	bne.n	801283e <_malloc_r+0xea>
 80127b8:	6821      	ldr	r1, [r4, #0]
 80127ba:	1a6d      	subs	r5, r5, r1
 80127bc:	4629      	mov	r1, r5
 80127be:	4630      	mov	r0, r6
 80127c0:	f7ff ffa6 	bl	8012710 <sbrk_aligned>
 80127c4:	3001      	adds	r0, #1
 80127c6:	d03a      	beq.n	801283e <_malloc_r+0xea>
 80127c8:	6823      	ldr	r3, [r4, #0]
 80127ca:	442b      	add	r3, r5
 80127cc:	6023      	str	r3, [r4, #0]
 80127ce:	f8d8 3000 	ldr.w	r3, [r8]
 80127d2:	685a      	ldr	r2, [r3, #4]
 80127d4:	bb62      	cbnz	r2, 8012830 <_malloc_r+0xdc>
 80127d6:	f8c8 7000 	str.w	r7, [r8]
 80127da:	e00f      	b.n	80127fc <_malloc_r+0xa8>
 80127dc:	6822      	ldr	r2, [r4, #0]
 80127de:	1b52      	subs	r2, r2, r5
 80127e0:	d420      	bmi.n	8012824 <_malloc_r+0xd0>
 80127e2:	2a0b      	cmp	r2, #11
 80127e4:	d917      	bls.n	8012816 <_malloc_r+0xc2>
 80127e6:	1961      	adds	r1, r4, r5
 80127e8:	42a3      	cmp	r3, r4
 80127ea:	6025      	str	r5, [r4, #0]
 80127ec:	bf18      	it	ne
 80127ee:	6059      	strne	r1, [r3, #4]
 80127f0:	6863      	ldr	r3, [r4, #4]
 80127f2:	bf08      	it	eq
 80127f4:	f8c8 1000 	streq.w	r1, [r8]
 80127f8:	5162      	str	r2, [r4, r5]
 80127fa:	604b      	str	r3, [r1, #4]
 80127fc:	4630      	mov	r0, r6
 80127fe:	f000 f82f 	bl	8012860 <__malloc_unlock>
 8012802:	f104 000b 	add.w	r0, r4, #11
 8012806:	1d23      	adds	r3, r4, #4
 8012808:	f020 0007 	bic.w	r0, r0, #7
 801280c:	1ac2      	subs	r2, r0, r3
 801280e:	bf1c      	itt	ne
 8012810:	1a1b      	subne	r3, r3, r0
 8012812:	50a3      	strne	r3, [r4, r2]
 8012814:	e7af      	b.n	8012776 <_malloc_r+0x22>
 8012816:	6862      	ldr	r2, [r4, #4]
 8012818:	42a3      	cmp	r3, r4
 801281a:	bf0c      	ite	eq
 801281c:	f8c8 2000 	streq.w	r2, [r8]
 8012820:	605a      	strne	r2, [r3, #4]
 8012822:	e7eb      	b.n	80127fc <_malloc_r+0xa8>
 8012824:	4623      	mov	r3, r4
 8012826:	6864      	ldr	r4, [r4, #4]
 8012828:	e7ae      	b.n	8012788 <_malloc_r+0x34>
 801282a:	463c      	mov	r4, r7
 801282c:	687f      	ldr	r7, [r7, #4]
 801282e:	e7b6      	b.n	801279e <_malloc_r+0x4a>
 8012830:	461a      	mov	r2, r3
 8012832:	685b      	ldr	r3, [r3, #4]
 8012834:	42a3      	cmp	r3, r4
 8012836:	d1fb      	bne.n	8012830 <_malloc_r+0xdc>
 8012838:	2300      	movs	r3, #0
 801283a:	6053      	str	r3, [r2, #4]
 801283c:	e7de      	b.n	80127fc <_malloc_r+0xa8>
 801283e:	230c      	movs	r3, #12
 8012840:	6033      	str	r3, [r6, #0]
 8012842:	4630      	mov	r0, r6
 8012844:	f000 f80c 	bl	8012860 <__malloc_unlock>
 8012848:	e794      	b.n	8012774 <_malloc_r+0x20>
 801284a:	6005      	str	r5, [r0, #0]
 801284c:	e7d6      	b.n	80127fc <_malloc_r+0xa8>
 801284e:	bf00      	nop
 8012850:	2000c66c 	.word	0x2000c66c

08012854 <__malloc_lock>:
 8012854:	4801      	ldr	r0, [pc, #4]	@ (801285c <__malloc_lock+0x8>)
 8012856:	f001 b8de 	b.w	8013a16 <__retarget_lock_acquire_recursive>
 801285a:	bf00      	nop
 801285c:	2000c7b0 	.word	0x2000c7b0

08012860 <__malloc_unlock>:
 8012860:	4801      	ldr	r0, [pc, #4]	@ (8012868 <__malloc_unlock+0x8>)
 8012862:	f001 b8d9 	b.w	8013a18 <__retarget_lock_release_recursive>
 8012866:	bf00      	nop
 8012868:	2000c7b0 	.word	0x2000c7b0

0801286c <_realloc_r>:
 801286c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012870:	4680      	mov	r8, r0
 8012872:	4615      	mov	r5, r2
 8012874:	460c      	mov	r4, r1
 8012876:	b921      	cbnz	r1, 8012882 <_realloc_r+0x16>
 8012878:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801287c:	4611      	mov	r1, r2
 801287e:	f7ff bf69 	b.w	8012754 <_malloc_r>
 8012882:	b92a      	cbnz	r2, 8012890 <_realloc_r+0x24>
 8012884:	f001 ff50 	bl	8014728 <_free_r>
 8012888:	2400      	movs	r4, #0
 801288a:	4620      	mov	r0, r4
 801288c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012890:	f002 fc46 	bl	8015120 <_malloc_usable_size_r>
 8012894:	4285      	cmp	r5, r0
 8012896:	4606      	mov	r6, r0
 8012898:	d802      	bhi.n	80128a0 <_realloc_r+0x34>
 801289a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801289e:	d8f4      	bhi.n	801288a <_realloc_r+0x1e>
 80128a0:	4629      	mov	r1, r5
 80128a2:	4640      	mov	r0, r8
 80128a4:	f7ff ff56 	bl	8012754 <_malloc_r>
 80128a8:	4607      	mov	r7, r0
 80128aa:	2800      	cmp	r0, #0
 80128ac:	d0ec      	beq.n	8012888 <_realloc_r+0x1c>
 80128ae:	42b5      	cmp	r5, r6
 80128b0:	462a      	mov	r2, r5
 80128b2:	4621      	mov	r1, r4
 80128b4:	bf28      	it	cs
 80128b6:	4632      	movcs	r2, r6
 80128b8:	f001 f8b7 	bl	8013a2a <memcpy>
 80128bc:	4621      	mov	r1, r4
 80128be:	4640      	mov	r0, r8
 80128c0:	f001 ff32 	bl	8014728 <_free_r>
 80128c4:	463c      	mov	r4, r7
 80128c6:	e7e0      	b.n	801288a <_realloc_r+0x1e>

080128c8 <__cvt>:
 80128c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80128cc:	ec57 6b10 	vmov	r6, r7, d0
 80128d0:	2f00      	cmp	r7, #0
 80128d2:	460c      	mov	r4, r1
 80128d4:	4619      	mov	r1, r3
 80128d6:	463b      	mov	r3, r7
 80128d8:	bfbb      	ittet	lt
 80128da:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80128de:	461f      	movlt	r7, r3
 80128e0:	2300      	movge	r3, #0
 80128e2:	232d      	movlt	r3, #45	@ 0x2d
 80128e4:	700b      	strb	r3, [r1, #0]
 80128e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80128e8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80128ec:	4691      	mov	r9, r2
 80128ee:	f023 0820 	bic.w	r8, r3, #32
 80128f2:	bfbc      	itt	lt
 80128f4:	4632      	movlt	r2, r6
 80128f6:	4616      	movlt	r6, r2
 80128f8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80128fc:	d005      	beq.n	801290a <__cvt+0x42>
 80128fe:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8012902:	d100      	bne.n	8012906 <__cvt+0x3e>
 8012904:	3401      	adds	r4, #1
 8012906:	2102      	movs	r1, #2
 8012908:	e000      	b.n	801290c <__cvt+0x44>
 801290a:	2103      	movs	r1, #3
 801290c:	ab03      	add	r3, sp, #12
 801290e:	9301      	str	r3, [sp, #4]
 8012910:	ab02      	add	r3, sp, #8
 8012912:	9300      	str	r3, [sp, #0]
 8012914:	ec47 6b10 	vmov	d0, r6, r7
 8012918:	4653      	mov	r3, sl
 801291a:	4622      	mov	r2, r4
 801291c:	f001 f940 	bl	8013ba0 <_dtoa_r>
 8012920:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8012924:	4605      	mov	r5, r0
 8012926:	d119      	bne.n	801295c <__cvt+0x94>
 8012928:	f019 0f01 	tst.w	r9, #1
 801292c:	d00e      	beq.n	801294c <__cvt+0x84>
 801292e:	eb00 0904 	add.w	r9, r0, r4
 8012932:	2200      	movs	r2, #0
 8012934:	2300      	movs	r3, #0
 8012936:	4630      	mov	r0, r6
 8012938:	4639      	mov	r1, r7
 801293a:	f7ee f8f5 	bl	8000b28 <__aeabi_dcmpeq>
 801293e:	b108      	cbz	r0, 8012944 <__cvt+0x7c>
 8012940:	f8cd 900c 	str.w	r9, [sp, #12]
 8012944:	2230      	movs	r2, #48	@ 0x30
 8012946:	9b03      	ldr	r3, [sp, #12]
 8012948:	454b      	cmp	r3, r9
 801294a:	d31e      	bcc.n	801298a <__cvt+0xc2>
 801294c:	9b03      	ldr	r3, [sp, #12]
 801294e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012950:	1b5b      	subs	r3, r3, r5
 8012952:	4628      	mov	r0, r5
 8012954:	6013      	str	r3, [r2, #0]
 8012956:	b004      	add	sp, #16
 8012958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801295c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8012960:	eb00 0904 	add.w	r9, r0, r4
 8012964:	d1e5      	bne.n	8012932 <__cvt+0x6a>
 8012966:	7803      	ldrb	r3, [r0, #0]
 8012968:	2b30      	cmp	r3, #48	@ 0x30
 801296a:	d10a      	bne.n	8012982 <__cvt+0xba>
 801296c:	2200      	movs	r2, #0
 801296e:	2300      	movs	r3, #0
 8012970:	4630      	mov	r0, r6
 8012972:	4639      	mov	r1, r7
 8012974:	f7ee f8d8 	bl	8000b28 <__aeabi_dcmpeq>
 8012978:	b918      	cbnz	r0, 8012982 <__cvt+0xba>
 801297a:	f1c4 0401 	rsb	r4, r4, #1
 801297e:	f8ca 4000 	str.w	r4, [sl]
 8012982:	f8da 3000 	ldr.w	r3, [sl]
 8012986:	4499      	add	r9, r3
 8012988:	e7d3      	b.n	8012932 <__cvt+0x6a>
 801298a:	1c59      	adds	r1, r3, #1
 801298c:	9103      	str	r1, [sp, #12]
 801298e:	701a      	strb	r2, [r3, #0]
 8012990:	e7d9      	b.n	8012946 <__cvt+0x7e>

08012992 <__exponent>:
 8012992:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012994:	2900      	cmp	r1, #0
 8012996:	bfba      	itte	lt
 8012998:	4249      	neglt	r1, r1
 801299a:	232d      	movlt	r3, #45	@ 0x2d
 801299c:	232b      	movge	r3, #43	@ 0x2b
 801299e:	2909      	cmp	r1, #9
 80129a0:	7002      	strb	r2, [r0, #0]
 80129a2:	7043      	strb	r3, [r0, #1]
 80129a4:	dd29      	ble.n	80129fa <__exponent+0x68>
 80129a6:	f10d 0307 	add.w	r3, sp, #7
 80129aa:	461d      	mov	r5, r3
 80129ac:	270a      	movs	r7, #10
 80129ae:	461a      	mov	r2, r3
 80129b0:	fbb1 f6f7 	udiv	r6, r1, r7
 80129b4:	fb07 1416 	mls	r4, r7, r6, r1
 80129b8:	3430      	adds	r4, #48	@ 0x30
 80129ba:	f802 4c01 	strb.w	r4, [r2, #-1]
 80129be:	460c      	mov	r4, r1
 80129c0:	2c63      	cmp	r4, #99	@ 0x63
 80129c2:	f103 33ff 	add.w	r3, r3, #4294967295
 80129c6:	4631      	mov	r1, r6
 80129c8:	dcf1      	bgt.n	80129ae <__exponent+0x1c>
 80129ca:	3130      	adds	r1, #48	@ 0x30
 80129cc:	1e94      	subs	r4, r2, #2
 80129ce:	f803 1c01 	strb.w	r1, [r3, #-1]
 80129d2:	1c41      	adds	r1, r0, #1
 80129d4:	4623      	mov	r3, r4
 80129d6:	42ab      	cmp	r3, r5
 80129d8:	d30a      	bcc.n	80129f0 <__exponent+0x5e>
 80129da:	f10d 0309 	add.w	r3, sp, #9
 80129de:	1a9b      	subs	r3, r3, r2
 80129e0:	42ac      	cmp	r4, r5
 80129e2:	bf88      	it	hi
 80129e4:	2300      	movhi	r3, #0
 80129e6:	3302      	adds	r3, #2
 80129e8:	4403      	add	r3, r0
 80129ea:	1a18      	subs	r0, r3, r0
 80129ec:	b003      	add	sp, #12
 80129ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80129f0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80129f4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80129f8:	e7ed      	b.n	80129d6 <__exponent+0x44>
 80129fa:	2330      	movs	r3, #48	@ 0x30
 80129fc:	3130      	adds	r1, #48	@ 0x30
 80129fe:	7083      	strb	r3, [r0, #2]
 8012a00:	70c1      	strb	r1, [r0, #3]
 8012a02:	1d03      	adds	r3, r0, #4
 8012a04:	e7f1      	b.n	80129ea <__exponent+0x58>
	...

08012a08 <_printf_float>:
 8012a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a0c:	b08d      	sub	sp, #52	@ 0x34
 8012a0e:	460c      	mov	r4, r1
 8012a10:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8012a14:	4616      	mov	r6, r2
 8012a16:	461f      	mov	r7, r3
 8012a18:	4605      	mov	r5, r0
 8012a1a:	f000 ff77 	bl	801390c <_localeconv_r>
 8012a1e:	6803      	ldr	r3, [r0, #0]
 8012a20:	9304      	str	r3, [sp, #16]
 8012a22:	4618      	mov	r0, r3
 8012a24:	f7ed fc54 	bl	80002d0 <strlen>
 8012a28:	2300      	movs	r3, #0
 8012a2a:	930a      	str	r3, [sp, #40]	@ 0x28
 8012a2c:	f8d8 3000 	ldr.w	r3, [r8]
 8012a30:	9005      	str	r0, [sp, #20]
 8012a32:	3307      	adds	r3, #7
 8012a34:	f023 0307 	bic.w	r3, r3, #7
 8012a38:	f103 0208 	add.w	r2, r3, #8
 8012a3c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8012a40:	f8d4 b000 	ldr.w	fp, [r4]
 8012a44:	f8c8 2000 	str.w	r2, [r8]
 8012a48:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012a4c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8012a50:	9307      	str	r3, [sp, #28]
 8012a52:	f8cd 8018 	str.w	r8, [sp, #24]
 8012a56:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8012a5a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012a5e:	4b9c      	ldr	r3, [pc, #624]	@ (8012cd0 <_printf_float+0x2c8>)
 8012a60:	f04f 32ff 	mov.w	r2, #4294967295
 8012a64:	f7ee f892 	bl	8000b8c <__aeabi_dcmpun>
 8012a68:	bb70      	cbnz	r0, 8012ac8 <_printf_float+0xc0>
 8012a6a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012a6e:	4b98      	ldr	r3, [pc, #608]	@ (8012cd0 <_printf_float+0x2c8>)
 8012a70:	f04f 32ff 	mov.w	r2, #4294967295
 8012a74:	f7ee f86c 	bl	8000b50 <__aeabi_dcmple>
 8012a78:	bb30      	cbnz	r0, 8012ac8 <_printf_float+0xc0>
 8012a7a:	2200      	movs	r2, #0
 8012a7c:	2300      	movs	r3, #0
 8012a7e:	4640      	mov	r0, r8
 8012a80:	4649      	mov	r1, r9
 8012a82:	f7ee f85b 	bl	8000b3c <__aeabi_dcmplt>
 8012a86:	b110      	cbz	r0, 8012a8e <_printf_float+0x86>
 8012a88:	232d      	movs	r3, #45	@ 0x2d
 8012a8a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012a8e:	4a91      	ldr	r2, [pc, #580]	@ (8012cd4 <_printf_float+0x2cc>)
 8012a90:	4b91      	ldr	r3, [pc, #580]	@ (8012cd8 <_printf_float+0x2d0>)
 8012a92:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8012a96:	bf94      	ite	ls
 8012a98:	4690      	movls	r8, r2
 8012a9a:	4698      	movhi	r8, r3
 8012a9c:	2303      	movs	r3, #3
 8012a9e:	6123      	str	r3, [r4, #16]
 8012aa0:	f02b 0304 	bic.w	r3, fp, #4
 8012aa4:	6023      	str	r3, [r4, #0]
 8012aa6:	f04f 0900 	mov.w	r9, #0
 8012aaa:	9700      	str	r7, [sp, #0]
 8012aac:	4633      	mov	r3, r6
 8012aae:	aa0b      	add	r2, sp, #44	@ 0x2c
 8012ab0:	4621      	mov	r1, r4
 8012ab2:	4628      	mov	r0, r5
 8012ab4:	f000 f9d2 	bl	8012e5c <_printf_common>
 8012ab8:	3001      	adds	r0, #1
 8012aba:	f040 808d 	bne.w	8012bd8 <_printf_float+0x1d0>
 8012abe:	f04f 30ff 	mov.w	r0, #4294967295
 8012ac2:	b00d      	add	sp, #52	@ 0x34
 8012ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ac8:	4642      	mov	r2, r8
 8012aca:	464b      	mov	r3, r9
 8012acc:	4640      	mov	r0, r8
 8012ace:	4649      	mov	r1, r9
 8012ad0:	f7ee f85c 	bl	8000b8c <__aeabi_dcmpun>
 8012ad4:	b140      	cbz	r0, 8012ae8 <_printf_float+0xe0>
 8012ad6:	464b      	mov	r3, r9
 8012ad8:	2b00      	cmp	r3, #0
 8012ada:	bfbc      	itt	lt
 8012adc:	232d      	movlt	r3, #45	@ 0x2d
 8012ade:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8012ae2:	4a7e      	ldr	r2, [pc, #504]	@ (8012cdc <_printf_float+0x2d4>)
 8012ae4:	4b7e      	ldr	r3, [pc, #504]	@ (8012ce0 <_printf_float+0x2d8>)
 8012ae6:	e7d4      	b.n	8012a92 <_printf_float+0x8a>
 8012ae8:	6863      	ldr	r3, [r4, #4]
 8012aea:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8012aee:	9206      	str	r2, [sp, #24]
 8012af0:	1c5a      	adds	r2, r3, #1
 8012af2:	d13b      	bne.n	8012b6c <_printf_float+0x164>
 8012af4:	2306      	movs	r3, #6
 8012af6:	6063      	str	r3, [r4, #4]
 8012af8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8012afc:	2300      	movs	r3, #0
 8012afe:	6022      	str	r2, [r4, #0]
 8012b00:	9303      	str	r3, [sp, #12]
 8012b02:	ab0a      	add	r3, sp, #40	@ 0x28
 8012b04:	e9cd a301 	strd	sl, r3, [sp, #4]
 8012b08:	ab09      	add	r3, sp, #36	@ 0x24
 8012b0a:	9300      	str	r3, [sp, #0]
 8012b0c:	6861      	ldr	r1, [r4, #4]
 8012b0e:	ec49 8b10 	vmov	d0, r8, r9
 8012b12:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8012b16:	4628      	mov	r0, r5
 8012b18:	f7ff fed6 	bl	80128c8 <__cvt>
 8012b1c:	9b06      	ldr	r3, [sp, #24]
 8012b1e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012b20:	2b47      	cmp	r3, #71	@ 0x47
 8012b22:	4680      	mov	r8, r0
 8012b24:	d129      	bne.n	8012b7a <_printf_float+0x172>
 8012b26:	1cc8      	adds	r0, r1, #3
 8012b28:	db02      	blt.n	8012b30 <_printf_float+0x128>
 8012b2a:	6863      	ldr	r3, [r4, #4]
 8012b2c:	4299      	cmp	r1, r3
 8012b2e:	dd41      	ble.n	8012bb4 <_printf_float+0x1ac>
 8012b30:	f1aa 0a02 	sub.w	sl, sl, #2
 8012b34:	fa5f fa8a 	uxtb.w	sl, sl
 8012b38:	3901      	subs	r1, #1
 8012b3a:	4652      	mov	r2, sl
 8012b3c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8012b40:	9109      	str	r1, [sp, #36]	@ 0x24
 8012b42:	f7ff ff26 	bl	8012992 <__exponent>
 8012b46:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012b48:	1813      	adds	r3, r2, r0
 8012b4a:	2a01      	cmp	r2, #1
 8012b4c:	4681      	mov	r9, r0
 8012b4e:	6123      	str	r3, [r4, #16]
 8012b50:	dc02      	bgt.n	8012b58 <_printf_float+0x150>
 8012b52:	6822      	ldr	r2, [r4, #0]
 8012b54:	07d2      	lsls	r2, r2, #31
 8012b56:	d501      	bpl.n	8012b5c <_printf_float+0x154>
 8012b58:	3301      	adds	r3, #1
 8012b5a:	6123      	str	r3, [r4, #16]
 8012b5c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	d0a2      	beq.n	8012aaa <_printf_float+0xa2>
 8012b64:	232d      	movs	r3, #45	@ 0x2d
 8012b66:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012b6a:	e79e      	b.n	8012aaa <_printf_float+0xa2>
 8012b6c:	9a06      	ldr	r2, [sp, #24]
 8012b6e:	2a47      	cmp	r2, #71	@ 0x47
 8012b70:	d1c2      	bne.n	8012af8 <_printf_float+0xf0>
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	d1c0      	bne.n	8012af8 <_printf_float+0xf0>
 8012b76:	2301      	movs	r3, #1
 8012b78:	e7bd      	b.n	8012af6 <_printf_float+0xee>
 8012b7a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8012b7e:	d9db      	bls.n	8012b38 <_printf_float+0x130>
 8012b80:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8012b84:	d118      	bne.n	8012bb8 <_printf_float+0x1b0>
 8012b86:	2900      	cmp	r1, #0
 8012b88:	6863      	ldr	r3, [r4, #4]
 8012b8a:	dd0b      	ble.n	8012ba4 <_printf_float+0x19c>
 8012b8c:	6121      	str	r1, [r4, #16]
 8012b8e:	b913      	cbnz	r3, 8012b96 <_printf_float+0x18e>
 8012b90:	6822      	ldr	r2, [r4, #0]
 8012b92:	07d0      	lsls	r0, r2, #31
 8012b94:	d502      	bpl.n	8012b9c <_printf_float+0x194>
 8012b96:	3301      	adds	r3, #1
 8012b98:	440b      	add	r3, r1
 8012b9a:	6123      	str	r3, [r4, #16]
 8012b9c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8012b9e:	f04f 0900 	mov.w	r9, #0
 8012ba2:	e7db      	b.n	8012b5c <_printf_float+0x154>
 8012ba4:	b913      	cbnz	r3, 8012bac <_printf_float+0x1a4>
 8012ba6:	6822      	ldr	r2, [r4, #0]
 8012ba8:	07d2      	lsls	r2, r2, #31
 8012baa:	d501      	bpl.n	8012bb0 <_printf_float+0x1a8>
 8012bac:	3302      	adds	r3, #2
 8012bae:	e7f4      	b.n	8012b9a <_printf_float+0x192>
 8012bb0:	2301      	movs	r3, #1
 8012bb2:	e7f2      	b.n	8012b9a <_printf_float+0x192>
 8012bb4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8012bb8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012bba:	4299      	cmp	r1, r3
 8012bbc:	db05      	blt.n	8012bca <_printf_float+0x1c2>
 8012bbe:	6823      	ldr	r3, [r4, #0]
 8012bc0:	6121      	str	r1, [r4, #16]
 8012bc2:	07d8      	lsls	r0, r3, #31
 8012bc4:	d5ea      	bpl.n	8012b9c <_printf_float+0x194>
 8012bc6:	1c4b      	adds	r3, r1, #1
 8012bc8:	e7e7      	b.n	8012b9a <_printf_float+0x192>
 8012bca:	2900      	cmp	r1, #0
 8012bcc:	bfd4      	ite	le
 8012bce:	f1c1 0202 	rsble	r2, r1, #2
 8012bd2:	2201      	movgt	r2, #1
 8012bd4:	4413      	add	r3, r2
 8012bd6:	e7e0      	b.n	8012b9a <_printf_float+0x192>
 8012bd8:	6823      	ldr	r3, [r4, #0]
 8012bda:	055a      	lsls	r2, r3, #21
 8012bdc:	d407      	bmi.n	8012bee <_printf_float+0x1e6>
 8012bde:	6923      	ldr	r3, [r4, #16]
 8012be0:	4642      	mov	r2, r8
 8012be2:	4631      	mov	r1, r6
 8012be4:	4628      	mov	r0, r5
 8012be6:	47b8      	blx	r7
 8012be8:	3001      	adds	r0, #1
 8012bea:	d12b      	bne.n	8012c44 <_printf_float+0x23c>
 8012bec:	e767      	b.n	8012abe <_printf_float+0xb6>
 8012bee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8012bf2:	f240 80dd 	bls.w	8012db0 <_printf_float+0x3a8>
 8012bf6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8012bfa:	2200      	movs	r2, #0
 8012bfc:	2300      	movs	r3, #0
 8012bfe:	f7ed ff93 	bl	8000b28 <__aeabi_dcmpeq>
 8012c02:	2800      	cmp	r0, #0
 8012c04:	d033      	beq.n	8012c6e <_printf_float+0x266>
 8012c06:	4a37      	ldr	r2, [pc, #220]	@ (8012ce4 <_printf_float+0x2dc>)
 8012c08:	2301      	movs	r3, #1
 8012c0a:	4631      	mov	r1, r6
 8012c0c:	4628      	mov	r0, r5
 8012c0e:	47b8      	blx	r7
 8012c10:	3001      	adds	r0, #1
 8012c12:	f43f af54 	beq.w	8012abe <_printf_float+0xb6>
 8012c16:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8012c1a:	4543      	cmp	r3, r8
 8012c1c:	db02      	blt.n	8012c24 <_printf_float+0x21c>
 8012c1e:	6823      	ldr	r3, [r4, #0]
 8012c20:	07d8      	lsls	r0, r3, #31
 8012c22:	d50f      	bpl.n	8012c44 <_printf_float+0x23c>
 8012c24:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012c28:	4631      	mov	r1, r6
 8012c2a:	4628      	mov	r0, r5
 8012c2c:	47b8      	blx	r7
 8012c2e:	3001      	adds	r0, #1
 8012c30:	f43f af45 	beq.w	8012abe <_printf_float+0xb6>
 8012c34:	f04f 0900 	mov.w	r9, #0
 8012c38:	f108 38ff 	add.w	r8, r8, #4294967295
 8012c3c:	f104 0a1a 	add.w	sl, r4, #26
 8012c40:	45c8      	cmp	r8, r9
 8012c42:	dc09      	bgt.n	8012c58 <_printf_float+0x250>
 8012c44:	6823      	ldr	r3, [r4, #0]
 8012c46:	079b      	lsls	r3, r3, #30
 8012c48:	f100 8103 	bmi.w	8012e52 <_printf_float+0x44a>
 8012c4c:	68e0      	ldr	r0, [r4, #12]
 8012c4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012c50:	4298      	cmp	r0, r3
 8012c52:	bfb8      	it	lt
 8012c54:	4618      	movlt	r0, r3
 8012c56:	e734      	b.n	8012ac2 <_printf_float+0xba>
 8012c58:	2301      	movs	r3, #1
 8012c5a:	4652      	mov	r2, sl
 8012c5c:	4631      	mov	r1, r6
 8012c5e:	4628      	mov	r0, r5
 8012c60:	47b8      	blx	r7
 8012c62:	3001      	adds	r0, #1
 8012c64:	f43f af2b 	beq.w	8012abe <_printf_float+0xb6>
 8012c68:	f109 0901 	add.w	r9, r9, #1
 8012c6c:	e7e8      	b.n	8012c40 <_printf_float+0x238>
 8012c6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	dc39      	bgt.n	8012ce8 <_printf_float+0x2e0>
 8012c74:	4a1b      	ldr	r2, [pc, #108]	@ (8012ce4 <_printf_float+0x2dc>)
 8012c76:	2301      	movs	r3, #1
 8012c78:	4631      	mov	r1, r6
 8012c7a:	4628      	mov	r0, r5
 8012c7c:	47b8      	blx	r7
 8012c7e:	3001      	adds	r0, #1
 8012c80:	f43f af1d 	beq.w	8012abe <_printf_float+0xb6>
 8012c84:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8012c88:	ea59 0303 	orrs.w	r3, r9, r3
 8012c8c:	d102      	bne.n	8012c94 <_printf_float+0x28c>
 8012c8e:	6823      	ldr	r3, [r4, #0]
 8012c90:	07d9      	lsls	r1, r3, #31
 8012c92:	d5d7      	bpl.n	8012c44 <_printf_float+0x23c>
 8012c94:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012c98:	4631      	mov	r1, r6
 8012c9a:	4628      	mov	r0, r5
 8012c9c:	47b8      	blx	r7
 8012c9e:	3001      	adds	r0, #1
 8012ca0:	f43f af0d 	beq.w	8012abe <_printf_float+0xb6>
 8012ca4:	f04f 0a00 	mov.w	sl, #0
 8012ca8:	f104 0b1a 	add.w	fp, r4, #26
 8012cac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012cae:	425b      	negs	r3, r3
 8012cb0:	4553      	cmp	r3, sl
 8012cb2:	dc01      	bgt.n	8012cb8 <_printf_float+0x2b0>
 8012cb4:	464b      	mov	r3, r9
 8012cb6:	e793      	b.n	8012be0 <_printf_float+0x1d8>
 8012cb8:	2301      	movs	r3, #1
 8012cba:	465a      	mov	r2, fp
 8012cbc:	4631      	mov	r1, r6
 8012cbe:	4628      	mov	r0, r5
 8012cc0:	47b8      	blx	r7
 8012cc2:	3001      	adds	r0, #1
 8012cc4:	f43f aefb 	beq.w	8012abe <_printf_float+0xb6>
 8012cc8:	f10a 0a01 	add.w	sl, sl, #1
 8012ccc:	e7ee      	b.n	8012cac <_printf_float+0x2a4>
 8012cce:	bf00      	nop
 8012cd0:	7fefffff 	.word	0x7fefffff
 8012cd4:	0805d670 	.word	0x0805d670
 8012cd8:	0805d674 	.word	0x0805d674
 8012cdc:	0805d678 	.word	0x0805d678
 8012ce0:	0805d67c 	.word	0x0805d67c
 8012ce4:	0805daa0 	.word	0x0805daa0
 8012ce8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8012cea:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8012cee:	4553      	cmp	r3, sl
 8012cf0:	bfa8      	it	ge
 8012cf2:	4653      	movge	r3, sl
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	4699      	mov	r9, r3
 8012cf8:	dc36      	bgt.n	8012d68 <_printf_float+0x360>
 8012cfa:	f04f 0b00 	mov.w	fp, #0
 8012cfe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012d02:	f104 021a 	add.w	r2, r4, #26
 8012d06:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8012d08:	9306      	str	r3, [sp, #24]
 8012d0a:	eba3 0309 	sub.w	r3, r3, r9
 8012d0e:	455b      	cmp	r3, fp
 8012d10:	dc31      	bgt.n	8012d76 <_printf_float+0x36e>
 8012d12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012d14:	459a      	cmp	sl, r3
 8012d16:	dc3a      	bgt.n	8012d8e <_printf_float+0x386>
 8012d18:	6823      	ldr	r3, [r4, #0]
 8012d1a:	07da      	lsls	r2, r3, #31
 8012d1c:	d437      	bmi.n	8012d8e <_printf_float+0x386>
 8012d1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012d20:	ebaa 0903 	sub.w	r9, sl, r3
 8012d24:	9b06      	ldr	r3, [sp, #24]
 8012d26:	ebaa 0303 	sub.w	r3, sl, r3
 8012d2a:	4599      	cmp	r9, r3
 8012d2c:	bfa8      	it	ge
 8012d2e:	4699      	movge	r9, r3
 8012d30:	f1b9 0f00 	cmp.w	r9, #0
 8012d34:	dc33      	bgt.n	8012d9e <_printf_float+0x396>
 8012d36:	f04f 0800 	mov.w	r8, #0
 8012d3a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012d3e:	f104 0b1a 	add.w	fp, r4, #26
 8012d42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012d44:	ebaa 0303 	sub.w	r3, sl, r3
 8012d48:	eba3 0309 	sub.w	r3, r3, r9
 8012d4c:	4543      	cmp	r3, r8
 8012d4e:	f77f af79 	ble.w	8012c44 <_printf_float+0x23c>
 8012d52:	2301      	movs	r3, #1
 8012d54:	465a      	mov	r2, fp
 8012d56:	4631      	mov	r1, r6
 8012d58:	4628      	mov	r0, r5
 8012d5a:	47b8      	blx	r7
 8012d5c:	3001      	adds	r0, #1
 8012d5e:	f43f aeae 	beq.w	8012abe <_printf_float+0xb6>
 8012d62:	f108 0801 	add.w	r8, r8, #1
 8012d66:	e7ec      	b.n	8012d42 <_printf_float+0x33a>
 8012d68:	4642      	mov	r2, r8
 8012d6a:	4631      	mov	r1, r6
 8012d6c:	4628      	mov	r0, r5
 8012d6e:	47b8      	blx	r7
 8012d70:	3001      	adds	r0, #1
 8012d72:	d1c2      	bne.n	8012cfa <_printf_float+0x2f2>
 8012d74:	e6a3      	b.n	8012abe <_printf_float+0xb6>
 8012d76:	2301      	movs	r3, #1
 8012d78:	4631      	mov	r1, r6
 8012d7a:	4628      	mov	r0, r5
 8012d7c:	9206      	str	r2, [sp, #24]
 8012d7e:	47b8      	blx	r7
 8012d80:	3001      	adds	r0, #1
 8012d82:	f43f ae9c 	beq.w	8012abe <_printf_float+0xb6>
 8012d86:	9a06      	ldr	r2, [sp, #24]
 8012d88:	f10b 0b01 	add.w	fp, fp, #1
 8012d8c:	e7bb      	b.n	8012d06 <_printf_float+0x2fe>
 8012d8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012d92:	4631      	mov	r1, r6
 8012d94:	4628      	mov	r0, r5
 8012d96:	47b8      	blx	r7
 8012d98:	3001      	adds	r0, #1
 8012d9a:	d1c0      	bne.n	8012d1e <_printf_float+0x316>
 8012d9c:	e68f      	b.n	8012abe <_printf_float+0xb6>
 8012d9e:	9a06      	ldr	r2, [sp, #24]
 8012da0:	464b      	mov	r3, r9
 8012da2:	4442      	add	r2, r8
 8012da4:	4631      	mov	r1, r6
 8012da6:	4628      	mov	r0, r5
 8012da8:	47b8      	blx	r7
 8012daa:	3001      	adds	r0, #1
 8012dac:	d1c3      	bne.n	8012d36 <_printf_float+0x32e>
 8012dae:	e686      	b.n	8012abe <_printf_float+0xb6>
 8012db0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8012db4:	f1ba 0f01 	cmp.w	sl, #1
 8012db8:	dc01      	bgt.n	8012dbe <_printf_float+0x3b6>
 8012dba:	07db      	lsls	r3, r3, #31
 8012dbc:	d536      	bpl.n	8012e2c <_printf_float+0x424>
 8012dbe:	2301      	movs	r3, #1
 8012dc0:	4642      	mov	r2, r8
 8012dc2:	4631      	mov	r1, r6
 8012dc4:	4628      	mov	r0, r5
 8012dc6:	47b8      	blx	r7
 8012dc8:	3001      	adds	r0, #1
 8012dca:	f43f ae78 	beq.w	8012abe <_printf_float+0xb6>
 8012dce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012dd2:	4631      	mov	r1, r6
 8012dd4:	4628      	mov	r0, r5
 8012dd6:	47b8      	blx	r7
 8012dd8:	3001      	adds	r0, #1
 8012dda:	f43f ae70 	beq.w	8012abe <_printf_float+0xb6>
 8012dde:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8012de2:	2200      	movs	r2, #0
 8012de4:	2300      	movs	r3, #0
 8012de6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012dea:	f7ed fe9d 	bl	8000b28 <__aeabi_dcmpeq>
 8012dee:	b9c0      	cbnz	r0, 8012e22 <_printf_float+0x41a>
 8012df0:	4653      	mov	r3, sl
 8012df2:	f108 0201 	add.w	r2, r8, #1
 8012df6:	4631      	mov	r1, r6
 8012df8:	4628      	mov	r0, r5
 8012dfa:	47b8      	blx	r7
 8012dfc:	3001      	adds	r0, #1
 8012dfe:	d10c      	bne.n	8012e1a <_printf_float+0x412>
 8012e00:	e65d      	b.n	8012abe <_printf_float+0xb6>
 8012e02:	2301      	movs	r3, #1
 8012e04:	465a      	mov	r2, fp
 8012e06:	4631      	mov	r1, r6
 8012e08:	4628      	mov	r0, r5
 8012e0a:	47b8      	blx	r7
 8012e0c:	3001      	adds	r0, #1
 8012e0e:	f43f ae56 	beq.w	8012abe <_printf_float+0xb6>
 8012e12:	f108 0801 	add.w	r8, r8, #1
 8012e16:	45d0      	cmp	r8, sl
 8012e18:	dbf3      	blt.n	8012e02 <_printf_float+0x3fa>
 8012e1a:	464b      	mov	r3, r9
 8012e1c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8012e20:	e6df      	b.n	8012be2 <_printf_float+0x1da>
 8012e22:	f04f 0800 	mov.w	r8, #0
 8012e26:	f104 0b1a 	add.w	fp, r4, #26
 8012e2a:	e7f4      	b.n	8012e16 <_printf_float+0x40e>
 8012e2c:	2301      	movs	r3, #1
 8012e2e:	4642      	mov	r2, r8
 8012e30:	e7e1      	b.n	8012df6 <_printf_float+0x3ee>
 8012e32:	2301      	movs	r3, #1
 8012e34:	464a      	mov	r2, r9
 8012e36:	4631      	mov	r1, r6
 8012e38:	4628      	mov	r0, r5
 8012e3a:	47b8      	blx	r7
 8012e3c:	3001      	adds	r0, #1
 8012e3e:	f43f ae3e 	beq.w	8012abe <_printf_float+0xb6>
 8012e42:	f108 0801 	add.w	r8, r8, #1
 8012e46:	68e3      	ldr	r3, [r4, #12]
 8012e48:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012e4a:	1a5b      	subs	r3, r3, r1
 8012e4c:	4543      	cmp	r3, r8
 8012e4e:	dcf0      	bgt.n	8012e32 <_printf_float+0x42a>
 8012e50:	e6fc      	b.n	8012c4c <_printf_float+0x244>
 8012e52:	f04f 0800 	mov.w	r8, #0
 8012e56:	f104 0919 	add.w	r9, r4, #25
 8012e5a:	e7f4      	b.n	8012e46 <_printf_float+0x43e>

08012e5c <_printf_common>:
 8012e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012e60:	4616      	mov	r6, r2
 8012e62:	4698      	mov	r8, r3
 8012e64:	688a      	ldr	r2, [r1, #8]
 8012e66:	690b      	ldr	r3, [r1, #16]
 8012e68:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012e6c:	4293      	cmp	r3, r2
 8012e6e:	bfb8      	it	lt
 8012e70:	4613      	movlt	r3, r2
 8012e72:	6033      	str	r3, [r6, #0]
 8012e74:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012e78:	4607      	mov	r7, r0
 8012e7a:	460c      	mov	r4, r1
 8012e7c:	b10a      	cbz	r2, 8012e82 <_printf_common+0x26>
 8012e7e:	3301      	adds	r3, #1
 8012e80:	6033      	str	r3, [r6, #0]
 8012e82:	6823      	ldr	r3, [r4, #0]
 8012e84:	0699      	lsls	r1, r3, #26
 8012e86:	bf42      	ittt	mi
 8012e88:	6833      	ldrmi	r3, [r6, #0]
 8012e8a:	3302      	addmi	r3, #2
 8012e8c:	6033      	strmi	r3, [r6, #0]
 8012e8e:	6825      	ldr	r5, [r4, #0]
 8012e90:	f015 0506 	ands.w	r5, r5, #6
 8012e94:	d106      	bne.n	8012ea4 <_printf_common+0x48>
 8012e96:	f104 0a19 	add.w	sl, r4, #25
 8012e9a:	68e3      	ldr	r3, [r4, #12]
 8012e9c:	6832      	ldr	r2, [r6, #0]
 8012e9e:	1a9b      	subs	r3, r3, r2
 8012ea0:	42ab      	cmp	r3, r5
 8012ea2:	dc26      	bgt.n	8012ef2 <_printf_common+0x96>
 8012ea4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012ea8:	6822      	ldr	r2, [r4, #0]
 8012eaa:	3b00      	subs	r3, #0
 8012eac:	bf18      	it	ne
 8012eae:	2301      	movne	r3, #1
 8012eb0:	0692      	lsls	r2, r2, #26
 8012eb2:	d42b      	bmi.n	8012f0c <_printf_common+0xb0>
 8012eb4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012eb8:	4641      	mov	r1, r8
 8012eba:	4638      	mov	r0, r7
 8012ebc:	47c8      	blx	r9
 8012ebe:	3001      	adds	r0, #1
 8012ec0:	d01e      	beq.n	8012f00 <_printf_common+0xa4>
 8012ec2:	6823      	ldr	r3, [r4, #0]
 8012ec4:	6922      	ldr	r2, [r4, #16]
 8012ec6:	f003 0306 	and.w	r3, r3, #6
 8012eca:	2b04      	cmp	r3, #4
 8012ecc:	bf02      	ittt	eq
 8012ece:	68e5      	ldreq	r5, [r4, #12]
 8012ed0:	6833      	ldreq	r3, [r6, #0]
 8012ed2:	1aed      	subeq	r5, r5, r3
 8012ed4:	68a3      	ldr	r3, [r4, #8]
 8012ed6:	bf0c      	ite	eq
 8012ed8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012edc:	2500      	movne	r5, #0
 8012ede:	4293      	cmp	r3, r2
 8012ee0:	bfc4      	itt	gt
 8012ee2:	1a9b      	subgt	r3, r3, r2
 8012ee4:	18ed      	addgt	r5, r5, r3
 8012ee6:	2600      	movs	r6, #0
 8012ee8:	341a      	adds	r4, #26
 8012eea:	42b5      	cmp	r5, r6
 8012eec:	d11a      	bne.n	8012f24 <_printf_common+0xc8>
 8012eee:	2000      	movs	r0, #0
 8012ef0:	e008      	b.n	8012f04 <_printf_common+0xa8>
 8012ef2:	2301      	movs	r3, #1
 8012ef4:	4652      	mov	r2, sl
 8012ef6:	4641      	mov	r1, r8
 8012ef8:	4638      	mov	r0, r7
 8012efa:	47c8      	blx	r9
 8012efc:	3001      	adds	r0, #1
 8012efe:	d103      	bne.n	8012f08 <_printf_common+0xac>
 8012f00:	f04f 30ff 	mov.w	r0, #4294967295
 8012f04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f08:	3501      	adds	r5, #1
 8012f0a:	e7c6      	b.n	8012e9a <_printf_common+0x3e>
 8012f0c:	18e1      	adds	r1, r4, r3
 8012f0e:	1c5a      	adds	r2, r3, #1
 8012f10:	2030      	movs	r0, #48	@ 0x30
 8012f12:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8012f16:	4422      	add	r2, r4
 8012f18:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012f1c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012f20:	3302      	adds	r3, #2
 8012f22:	e7c7      	b.n	8012eb4 <_printf_common+0x58>
 8012f24:	2301      	movs	r3, #1
 8012f26:	4622      	mov	r2, r4
 8012f28:	4641      	mov	r1, r8
 8012f2a:	4638      	mov	r0, r7
 8012f2c:	47c8      	blx	r9
 8012f2e:	3001      	adds	r0, #1
 8012f30:	d0e6      	beq.n	8012f00 <_printf_common+0xa4>
 8012f32:	3601      	adds	r6, #1
 8012f34:	e7d9      	b.n	8012eea <_printf_common+0x8e>
	...

08012f38 <_printf_i>:
 8012f38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012f3c:	7e0f      	ldrb	r7, [r1, #24]
 8012f3e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012f40:	2f78      	cmp	r7, #120	@ 0x78
 8012f42:	4691      	mov	r9, r2
 8012f44:	4680      	mov	r8, r0
 8012f46:	460c      	mov	r4, r1
 8012f48:	469a      	mov	sl, r3
 8012f4a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8012f4e:	d807      	bhi.n	8012f60 <_printf_i+0x28>
 8012f50:	2f62      	cmp	r7, #98	@ 0x62
 8012f52:	d80a      	bhi.n	8012f6a <_printf_i+0x32>
 8012f54:	2f00      	cmp	r7, #0
 8012f56:	f000 80d2 	beq.w	80130fe <_printf_i+0x1c6>
 8012f5a:	2f58      	cmp	r7, #88	@ 0x58
 8012f5c:	f000 80b9 	beq.w	80130d2 <_printf_i+0x19a>
 8012f60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012f64:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012f68:	e03a      	b.n	8012fe0 <_printf_i+0xa8>
 8012f6a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8012f6e:	2b15      	cmp	r3, #21
 8012f70:	d8f6      	bhi.n	8012f60 <_printf_i+0x28>
 8012f72:	a101      	add	r1, pc, #4	@ (adr r1, 8012f78 <_printf_i+0x40>)
 8012f74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012f78:	08012fd1 	.word	0x08012fd1
 8012f7c:	08012fe5 	.word	0x08012fe5
 8012f80:	08012f61 	.word	0x08012f61
 8012f84:	08012f61 	.word	0x08012f61
 8012f88:	08012f61 	.word	0x08012f61
 8012f8c:	08012f61 	.word	0x08012f61
 8012f90:	08012fe5 	.word	0x08012fe5
 8012f94:	08012f61 	.word	0x08012f61
 8012f98:	08012f61 	.word	0x08012f61
 8012f9c:	08012f61 	.word	0x08012f61
 8012fa0:	08012f61 	.word	0x08012f61
 8012fa4:	080130e5 	.word	0x080130e5
 8012fa8:	0801300f 	.word	0x0801300f
 8012fac:	0801309f 	.word	0x0801309f
 8012fb0:	08012f61 	.word	0x08012f61
 8012fb4:	08012f61 	.word	0x08012f61
 8012fb8:	08013107 	.word	0x08013107
 8012fbc:	08012f61 	.word	0x08012f61
 8012fc0:	0801300f 	.word	0x0801300f
 8012fc4:	08012f61 	.word	0x08012f61
 8012fc8:	08012f61 	.word	0x08012f61
 8012fcc:	080130a7 	.word	0x080130a7
 8012fd0:	6833      	ldr	r3, [r6, #0]
 8012fd2:	1d1a      	adds	r2, r3, #4
 8012fd4:	681b      	ldr	r3, [r3, #0]
 8012fd6:	6032      	str	r2, [r6, #0]
 8012fd8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012fdc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012fe0:	2301      	movs	r3, #1
 8012fe2:	e09d      	b.n	8013120 <_printf_i+0x1e8>
 8012fe4:	6833      	ldr	r3, [r6, #0]
 8012fe6:	6820      	ldr	r0, [r4, #0]
 8012fe8:	1d19      	adds	r1, r3, #4
 8012fea:	6031      	str	r1, [r6, #0]
 8012fec:	0606      	lsls	r6, r0, #24
 8012fee:	d501      	bpl.n	8012ff4 <_printf_i+0xbc>
 8012ff0:	681d      	ldr	r5, [r3, #0]
 8012ff2:	e003      	b.n	8012ffc <_printf_i+0xc4>
 8012ff4:	0645      	lsls	r5, r0, #25
 8012ff6:	d5fb      	bpl.n	8012ff0 <_printf_i+0xb8>
 8012ff8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012ffc:	2d00      	cmp	r5, #0
 8012ffe:	da03      	bge.n	8013008 <_printf_i+0xd0>
 8013000:	232d      	movs	r3, #45	@ 0x2d
 8013002:	426d      	negs	r5, r5
 8013004:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013008:	4859      	ldr	r0, [pc, #356]	@ (8013170 <_printf_i+0x238>)
 801300a:	230a      	movs	r3, #10
 801300c:	e011      	b.n	8013032 <_printf_i+0xfa>
 801300e:	6821      	ldr	r1, [r4, #0]
 8013010:	6833      	ldr	r3, [r6, #0]
 8013012:	0608      	lsls	r0, r1, #24
 8013014:	f853 5b04 	ldr.w	r5, [r3], #4
 8013018:	d402      	bmi.n	8013020 <_printf_i+0xe8>
 801301a:	0649      	lsls	r1, r1, #25
 801301c:	bf48      	it	mi
 801301e:	b2ad      	uxthmi	r5, r5
 8013020:	2f6f      	cmp	r7, #111	@ 0x6f
 8013022:	4853      	ldr	r0, [pc, #332]	@ (8013170 <_printf_i+0x238>)
 8013024:	6033      	str	r3, [r6, #0]
 8013026:	bf14      	ite	ne
 8013028:	230a      	movne	r3, #10
 801302a:	2308      	moveq	r3, #8
 801302c:	2100      	movs	r1, #0
 801302e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8013032:	6866      	ldr	r6, [r4, #4]
 8013034:	60a6      	str	r6, [r4, #8]
 8013036:	2e00      	cmp	r6, #0
 8013038:	bfa2      	ittt	ge
 801303a:	6821      	ldrge	r1, [r4, #0]
 801303c:	f021 0104 	bicge.w	r1, r1, #4
 8013040:	6021      	strge	r1, [r4, #0]
 8013042:	b90d      	cbnz	r5, 8013048 <_printf_i+0x110>
 8013044:	2e00      	cmp	r6, #0
 8013046:	d04b      	beq.n	80130e0 <_printf_i+0x1a8>
 8013048:	4616      	mov	r6, r2
 801304a:	fbb5 f1f3 	udiv	r1, r5, r3
 801304e:	fb03 5711 	mls	r7, r3, r1, r5
 8013052:	5dc7      	ldrb	r7, [r0, r7]
 8013054:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013058:	462f      	mov	r7, r5
 801305a:	42bb      	cmp	r3, r7
 801305c:	460d      	mov	r5, r1
 801305e:	d9f4      	bls.n	801304a <_printf_i+0x112>
 8013060:	2b08      	cmp	r3, #8
 8013062:	d10b      	bne.n	801307c <_printf_i+0x144>
 8013064:	6823      	ldr	r3, [r4, #0]
 8013066:	07df      	lsls	r7, r3, #31
 8013068:	d508      	bpl.n	801307c <_printf_i+0x144>
 801306a:	6923      	ldr	r3, [r4, #16]
 801306c:	6861      	ldr	r1, [r4, #4]
 801306e:	4299      	cmp	r1, r3
 8013070:	bfde      	ittt	le
 8013072:	2330      	movle	r3, #48	@ 0x30
 8013074:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013078:	f106 36ff 	addle.w	r6, r6, #4294967295
 801307c:	1b92      	subs	r2, r2, r6
 801307e:	6122      	str	r2, [r4, #16]
 8013080:	f8cd a000 	str.w	sl, [sp]
 8013084:	464b      	mov	r3, r9
 8013086:	aa03      	add	r2, sp, #12
 8013088:	4621      	mov	r1, r4
 801308a:	4640      	mov	r0, r8
 801308c:	f7ff fee6 	bl	8012e5c <_printf_common>
 8013090:	3001      	adds	r0, #1
 8013092:	d14a      	bne.n	801312a <_printf_i+0x1f2>
 8013094:	f04f 30ff 	mov.w	r0, #4294967295
 8013098:	b004      	add	sp, #16
 801309a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801309e:	6823      	ldr	r3, [r4, #0]
 80130a0:	f043 0320 	orr.w	r3, r3, #32
 80130a4:	6023      	str	r3, [r4, #0]
 80130a6:	4833      	ldr	r0, [pc, #204]	@ (8013174 <_printf_i+0x23c>)
 80130a8:	2778      	movs	r7, #120	@ 0x78
 80130aa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80130ae:	6823      	ldr	r3, [r4, #0]
 80130b0:	6831      	ldr	r1, [r6, #0]
 80130b2:	061f      	lsls	r7, r3, #24
 80130b4:	f851 5b04 	ldr.w	r5, [r1], #4
 80130b8:	d402      	bmi.n	80130c0 <_printf_i+0x188>
 80130ba:	065f      	lsls	r7, r3, #25
 80130bc:	bf48      	it	mi
 80130be:	b2ad      	uxthmi	r5, r5
 80130c0:	6031      	str	r1, [r6, #0]
 80130c2:	07d9      	lsls	r1, r3, #31
 80130c4:	bf44      	itt	mi
 80130c6:	f043 0320 	orrmi.w	r3, r3, #32
 80130ca:	6023      	strmi	r3, [r4, #0]
 80130cc:	b11d      	cbz	r5, 80130d6 <_printf_i+0x19e>
 80130ce:	2310      	movs	r3, #16
 80130d0:	e7ac      	b.n	801302c <_printf_i+0xf4>
 80130d2:	4827      	ldr	r0, [pc, #156]	@ (8013170 <_printf_i+0x238>)
 80130d4:	e7e9      	b.n	80130aa <_printf_i+0x172>
 80130d6:	6823      	ldr	r3, [r4, #0]
 80130d8:	f023 0320 	bic.w	r3, r3, #32
 80130dc:	6023      	str	r3, [r4, #0]
 80130de:	e7f6      	b.n	80130ce <_printf_i+0x196>
 80130e0:	4616      	mov	r6, r2
 80130e2:	e7bd      	b.n	8013060 <_printf_i+0x128>
 80130e4:	6833      	ldr	r3, [r6, #0]
 80130e6:	6825      	ldr	r5, [r4, #0]
 80130e8:	6961      	ldr	r1, [r4, #20]
 80130ea:	1d18      	adds	r0, r3, #4
 80130ec:	6030      	str	r0, [r6, #0]
 80130ee:	062e      	lsls	r6, r5, #24
 80130f0:	681b      	ldr	r3, [r3, #0]
 80130f2:	d501      	bpl.n	80130f8 <_printf_i+0x1c0>
 80130f4:	6019      	str	r1, [r3, #0]
 80130f6:	e002      	b.n	80130fe <_printf_i+0x1c6>
 80130f8:	0668      	lsls	r0, r5, #25
 80130fa:	d5fb      	bpl.n	80130f4 <_printf_i+0x1bc>
 80130fc:	8019      	strh	r1, [r3, #0]
 80130fe:	2300      	movs	r3, #0
 8013100:	6123      	str	r3, [r4, #16]
 8013102:	4616      	mov	r6, r2
 8013104:	e7bc      	b.n	8013080 <_printf_i+0x148>
 8013106:	6833      	ldr	r3, [r6, #0]
 8013108:	1d1a      	adds	r2, r3, #4
 801310a:	6032      	str	r2, [r6, #0]
 801310c:	681e      	ldr	r6, [r3, #0]
 801310e:	6862      	ldr	r2, [r4, #4]
 8013110:	2100      	movs	r1, #0
 8013112:	4630      	mov	r0, r6
 8013114:	f7ed f88c 	bl	8000230 <memchr>
 8013118:	b108      	cbz	r0, 801311e <_printf_i+0x1e6>
 801311a:	1b80      	subs	r0, r0, r6
 801311c:	6060      	str	r0, [r4, #4]
 801311e:	6863      	ldr	r3, [r4, #4]
 8013120:	6123      	str	r3, [r4, #16]
 8013122:	2300      	movs	r3, #0
 8013124:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013128:	e7aa      	b.n	8013080 <_printf_i+0x148>
 801312a:	6923      	ldr	r3, [r4, #16]
 801312c:	4632      	mov	r2, r6
 801312e:	4649      	mov	r1, r9
 8013130:	4640      	mov	r0, r8
 8013132:	47d0      	blx	sl
 8013134:	3001      	adds	r0, #1
 8013136:	d0ad      	beq.n	8013094 <_printf_i+0x15c>
 8013138:	6823      	ldr	r3, [r4, #0]
 801313a:	079b      	lsls	r3, r3, #30
 801313c:	d413      	bmi.n	8013166 <_printf_i+0x22e>
 801313e:	68e0      	ldr	r0, [r4, #12]
 8013140:	9b03      	ldr	r3, [sp, #12]
 8013142:	4298      	cmp	r0, r3
 8013144:	bfb8      	it	lt
 8013146:	4618      	movlt	r0, r3
 8013148:	e7a6      	b.n	8013098 <_printf_i+0x160>
 801314a:	2301      	movs	r3, #1
 801314c:	4632      	mov	r2, r6
 801314e:	4649      	mov	r1, r9
 8013150:	4640      	mov	r0, r8
 8013152:	47d0      	blx	sl
 8013154:	3001      	adds	r0, #1
 8013156:	d09d      	beq.n	8013094 <_printf_i+0x15c>
 8013158:	3501      	adds	r5, #1
 801315a:	68e3      	ldr	r3, [r4, #12]
 801315c:	9903      	ldr	r1, [sp, #12]
 801315e:	1a5b      	subs	r3, r3, r1
 8013160:	42ab      	cmp	r3, r5
 8013162:	dcf2      	bgt.n	801314a <_printf_i+0x212>
 8013164:	e7eb      	b.n	801313e <_printf_i+0x206>
 8013166:	2500      	movs	r5, #0
 8013168:	f104 0619 	add.w	r6, r4, #25
 801316c:	e7f5      	b.n	801315a <_printf_i+0x222>
 801316e:	bf00      	nop
 8013170:	0805d680 	.word	0x0805d680
 8013174:	0805d691 	.word	0x0805d691

08013178 <_scanf_float>:
 8013178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801317c:	b087      	sub	sp, #28
 801317e:	4617      	mov	r7, r2
 8013180:	9303      	str	r3, [sp, #12]
 8013182:	688b      	ldr	r3, [r1, #8]
 8013184:	1e5a      	subs	r2, r3, #1
 8013186:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801318a:	bf81      	itttt	hi
 801318c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8013190:	eb03 0b05 	addhi.w	fp, r3, r5
 8013194:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8013198:	608b      	strhi	r3, [r1, #8]
 801319a:	680b      	ldr	r3, [r1, #0]
 801319c:	460a      	mov	r2, r1
 801319e:	f04f 0500 	mov.w	r5, #0
 80131a2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80131a6:	f842 3b1c 	str.w	r3, [r2], #28
 80131aa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80131ae:	4680      	mov	r8, r0
 80131b0:	460c      	mov	r4, r1
 80131b2:	bf98      	it	ls
 80131b4:	f04f 0b00 	movls.w	fp, #0
 80131b8:	9201      	str	r2, [sp, #4]
 80131ba:	4616      	mov	r6, r2
 80131bc:	46aa      	mov	sl, r5
 80131be:	46a9      	mov	r9, r5
 80131c0:	9502      	str	r5, [sp, #8]
 80131c2:	68a2      	ldr	r2, [r4, #8]
 80131c4:	b152      	cbz	r2, 80131dc <_scanf_float+0x64>
 80131c6:	683b      	ldr	r3, [r7, #0]
 80131c8:	781b      	ldrb	r3, [r3, #0]
 80131ca:	2b4e      	cmp	r3, #78	@ 0x4e
 80131cc:	d864      	bhi.n	8013298 <_scanf_float+0x120>
 80131ce:	2b40      	cmp	r3, #64	@ 0x40
 80131d0:	d83c      	bhi.n	801324c <_scanf_float+0xd4>
 80131d2:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80131d6:	b2c8      	uxtb	r0, r1
 80131d8:	280e      	cmp	r0, #14
 80131da:	d93a      	bls.n	8013252 <_scanf_float+0xda>
 80131dc:	f1b9 0f00 	cmp.w	r9, #0
 80131e0:	d003      	beq.n	80131ea <_scanf_float+0x72>
 80131e2:	6823      	ldr	r3, [r4, #0]
 80131e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80131e8:	6023      	str	r3, [r4, #0]
 80131ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80131ee:	f1ba 0f01 	cmp.w	sl, #1
 80131f2:	f200 8117 	bhi.w	8013424 <_scanf_float+0x2ac>
 80131f6:	9b01      	ldr	r3, [sp, #4]
 80131f8:	429e      	cmp	r6, r3
 80131fa:	f200 8108 	bhi.w	801340e <_scanf_float+0x296>
 80131fe:	2001      	movs	r0, #1
 8013200:	b007      	add	sp, #28
 8013202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013206:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 801320a:	2a0d      	cmp	r2, #13
 801320c:	d8e6      	bhi.n	80131dc <_scanf_float+0x64>
 801320e:	a101      	add	r1, pc, #4	@ (adr r1, 8013214 <_scanf_float+0x9c>)
 8013210:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8013214:	0801335b 	.word	0x0801335b
 8013218:	080131dd 	.word	0x080131dd
 801321c:	080131dd 	.word	0x080131dd
 8013220:	080131dd 	.word	0x080131dd
 8013224:	080133bb 	.word	0x080133bb
 8013228:	08013393 	.word	0x08013393
 801322c:	080131dd 	.word	0x080131dd
 8013230:	080131dd 	.word	0x080131dd
 8013234:	08013369 	.word	0x08013369
 8013238:	080131dd 	.word	0x080131dd
 801323c:	080131dd 	.word	0x080131dd
 8013240:	080131dd 	.word	0x080131dd
 8013244:	080131dd 	.word	0x080131dd
 8013248:	08013321 	.word	0x08013321
 801324c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8013250:	e7db      	b.n	801320a <_scanf_float+0x92>
 8013252:	290e      	cmp	r1, #14
 8013254:	d8c2      	bhi.n	80131dc <_scanf_float+0x64>
 8013256:	a001      	add	r0, pc, #4	@ (adr r0, 801325c <_scanf_float+0xe4>)
 8013258:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801325c:	08013311 	.word	0x08013311
 8013260:	080131dd 	.word	0x080131dd
 8013264:	08013311 	.word	0x08013311
 8013268:	080133a7 	.word	0x080133a7
 801326c:	080131dd 	.word	0x080131dd
 8013270:	080132b9 	.word	0x080132b9
 8013274:	080132f7 	.word	0x080132f7
 8013278:	080132f7 	.word	0x080132f7
 801327c:	080132f7 	.word	0x080132f7
 8013280:	080132f7 	.word	0x080132f7
 8013284:	080132f7 	.word	0x080132f7
 8013288:	080132f7 	.word	0x080132f7
 801328c:	080132f7 	.word	0x080132f7
 8013290:	080132f7 	.word	0x080132f7
 8013294:	080132f7 	.word	0x080132f7
 8013298:	2b6e      	cmp	r3, #110	@ 0x6e
 801329a:	d809      	bhi.n	80132b0 <_scanf_float+0x138>
 801329c:	2b60      	cmp	r3, #96	@ 0x60
 801329e:	d8b2      	bhi.n	8013206 <_scanf_float+0x8e>
 80132a0:	2b54      	cmp	r3, #84	@ 0x54
 80132a2:	d07b      	beq.n	801339c <_scanf_float+0x224>
 80132a4:	2b59      	cmp	r3, #89	@ 0x59
 80132a6:	d199      	bne.n	80131dc <_scanf_float+0x64>
 80132a8:	2d07      	cmp	r5, #7
 80132aa:	d197      	bne.n	80131dc <_scanf_float+0x64>
 80132ac:	2508      	movs	r5, #8
 80132ae:	e02c      	b.n	801330a <_scanf_float+0x192>
 80132b0:	2b74      	cmp	r3, #116	@ 0x74
 80132b2:	d073      	beq.n	801339c <_scanf_float+0x224>
 80132b4:	2b79      	cmp	r3, #121	@ 0x79
 80132b6:	e7f6      	b.n	80132a6 <_scanf_float+0x12e>
 80132b8:	6821      	ldr	r1, [r4, #0]
 80132ba:	05c8      	lsls	r0, r1, #23
 80132bc:	d51b      	bpl.n	80132f6 <_scanf_float+0x17e>
 80132be:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80132c2:	6021      	str	r1, [r4, #0]
 80132c4:	f109 0901 	add.w	r9, r9, #1
 80132c8:	f1bb 0f00 	cmp.w	fp, #0
 80132cc:	d003      	beq.n	80132d6 <_scanf_float+0x15e>
 80132ce:	3201      	adds	r2, #1
 80132d0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80132d4:	60a2      	str	r2, [r4, #8]
 80132d6:	68a3      	ldr	r3, [r4, #8]
 80132d8:	3b01      	subs	r3, #1
 80132da:	60a3      	str	r3, [r4, #8]
 80132dc:	6923      	ldr	r3, [r4, #16]
 80132de:	3301      	adds	r3, #1
 80132e0:	6123      	str	r3, [r4, #16]
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	3b01      	subs	r3, #1
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	607b      	str	r3, [r7, #4]
 80132ea:	f340 8087 	ble.w	80133fc <_scanf_float+0x284>
 80132ee:	683b      	ldr	r3, [r7, #0]
 80132f0:	3301      	adds	r3, #1
 80132f2:	603b      	str	r3, [r7, #0]
 80132f4:	e765      	b.n	80131c2 <_scanf_float+0x4a>
 80132f6:	eb1a 0105 	adds.w	r1, sl, r5
 80132fa:	f47f af6f 	bne.w	80131dc <_scanf_float+0x64>
 80132fe:	6822      	ldr	r2, [r4, #0]
 8013300:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8013304:	6022      	str	r2, [r4, #0]
 8013306:	460d      	mov	r5, r1
 8013308:	468a      	mov	sl, r1
 801330a:	f806 3b01 	strb.w	r3, [r6], #1
 801330e:	e7e2      	b.n	80132d6 <_scanf_float+0x15e>
 8013310:	6822      	ldr	r2, [r4, #0]
 8013312:	0610      	lsls	r0, r2, #24
 8013314:	f57f af62 	bpl.w	80131dc <_scanf_float+0x64>
 8013318:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801331c:	6022      	str	r2, [r4, #0]
 801331e:	e7f4      	b.n	801330a <_scanf_float+0x192>
 8013320:	f1ba 0f00 	cmp.w	sl, #0
 8013324:	d10e      	bne.n	8013344 <_scanf_float+0x1cc>
 8013326:	f1b9 0f00 	cmp.w	r9, #0
 801332a:	d10e      	bne.n	801334a <_scanf_float+0x1d2>
 801332c:	6822      	ldr	r2, [r4, #0]
 801332e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8013332:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8013336:	d108      	bne.n	801334a <_scanf_float+0x1d2>
 8013338:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801333c:	6022      	str	r2, [r4, #0]
 801333e:	f04f 0a01 	mov.w	sl, #1
 8013342:	e7e2      	b.n	801330a <_scanf_float+0x192>
 8013344:	f1ba 0f02 	cmp.w	sl, #2
 8013348:	d055      	beq.n	80133f6 <_scanf_float+0x27e>
 801334a:	2d01      	cmp	r5, #1
 801334c:	d002      	beq.n	8013354 <_scanf_float+0x1dc>
 801334e:	2d04      	cmp	r5, #4
 8013350:	f47f af44 	bne.w	80131dc <_scanf_float+0x64>
 8013354:	3501      	adds	r5, #1
 8013356:	b2ed      	uxtb	r5, r5
 8013358:	e7d7      	b.n	801330a <_scanf_float+0x192>
 801335a:	f1ba 0f01 	cmp.w	sl, #1
 801335e:	f47f af3d 	bne.w	80131dc <_scanf_float+0x64>
 8013362:	f04f 0a02 	mov.w	sl, #2
 8013366:	e7d0      	b.n	801330a <_scanf_float+0x192>
 8013368:	b97d      	cbnz	r5, 801338a <_scanf_float+0x212>
 801336a:	f1b9 0f00 	cmp.w	r9, #0
 801336e:	f47f af38 	bne.w	80131e2 <_scanf_float+0x6a>
 8013372:	6822      	ldr	r2, [r4, #0]
 8013374:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8013378:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801337c:	f040 8108 	bne.w	8013590 <_scanf_float+0x418>
 8013380:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8013384:	6022      	str	r2, [r4, #0]
 8013386:	2501      	movs	r5, #1
 8013388:	e7bf      	b.n	801330a <_scanf_float+0x192>
 801338a:	2d03      	cmp	r5, #3
 801338c:	d0e2      	beq.n	8013354 <_scanf_float+0x1dc>
 801338e:	2d05      	cmp	r5, #5
 8013390:	e7de      	b.n	8013350 <_scanf_float+0x1d8>
 8013392:	2d02      	cmp	r5, #2
 8013394:	f47f af22 	bne.w	80131dc <_scanf_float+0x64>
 8013398:	2503      	movs	r5, #3
 801339a:	e7b6      	b.n	801330a <_scanf_float+0x192>
 801339c:	2d06      	cmp	r5, #6
 801339e:	f47f af1d 	bne.w	80131dc <_scanf_float+0x64>
 80133a2:	2507      	movs	r5, #7
 80133a4:	e7b1      	b.n	801330a <_scanf_float+0x192>
 80133a6:	6822      	ldr	r2, [r4, #0]
 80133a8:	0591      	lsls	r1, r2, #22
 80133aa:	f57f af17 	bpl.w	80131dc <_scanf_float+0x64>
 80133ae:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80133b2:	6022      	str	r2, [r4, #0]
 80133b4:	f8cd 9008 	str.w	r9, [sp, #8]
 80133b8:	e7a7      	b.n	801330a <_scanf_float+0x192>
 80133ba:	6822      	ldr	r2, [r4, #0]
 80133bc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80133c0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80133c4:	d006      	beq.n	80133d4 <_scanf_float+0x25c>
 80133c6:	0550      	lsls	r0, r2, #21
 80133c8:	f57f af08 	bpl.w	80131dc <_scanf_float+0x64>
 80133cc:	f1b9 0f00 	cmp.w	r9, #0
 80133d0:	f000 80de 	beq.w	8013590 <_scanf_float+0x418>
 80133d4:	0591      	lsls	r1, r2, #22
 80133d6:	bf58      	it	pl
 80133d8:	9902      	ldrpl	r1, [sp, #8]
 80133da:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80133de:	bf58      	it	pl
 80133e0:	eba9 0101 	subpl.w	r1, r9, r1
 80133e4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80133e8:	bf58      	it	pl
 80133ea:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80133ee:	6022      	str	r2, [r4, #0]
 80133f0:	f04f 0900 	mov.w	r9, #0
 80133f4:	e789      	b.n	801330a <_scanf_float+0x192>
 80133f6:	f04f 0a03 	mov.w	sl, #3
 80133fa:	e786      	b.n	801330a <_scanf_float+0x192>
 80133fc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8013400:	4639      	mov	r1, r7
 8013402:	4640      	mov	r0, r8
 8013404:	4798      	blx	r3
 8013406:	2800      	cmp	r0, #0
 8013408:	f43f aedb 	beq.w	80131c2 <_scanf_float+0x4a>
 801340c:	e6e6      	b.n	80131dc <_scanf_float+0x64>
 801340e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8013412:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013416:	463a      	mov	r2, r7
 8013418:	4640      	mov	r0, r8
 801341a:	4798      	blx	r3
 801341c:	6923      	ldr	r3, [r4, #16]
 801341e:	3b01      	subs	r3, #1
 8013420:	6123      	str	r3, [r4, #16]
 8013422:	e6e8      	b.n	80131f6 <_scanf_float+0x7e>
 8013424:	1e6b      	subs	r3, r5, #1
 8013426:	2b06      	cmp	r3, #6
 8013428:	d824      	bhi.n	8013474 <_scanf_float+0x2fc>
 801342a:	2d02      	cmp	r5, #2
 801342c:	d836      	bhi.n	801349c <_scanf_float+0x324>
 801342e:	9b01      	ldr	r3, [sp, #4]
 8013430:	429e      	cmp	r6, r3
 8013432:	f67f aee4 	bls.w	80131fe <_scanf_float+0x86>
 8013436:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801343a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801343e:	463a      	mov	r2, r7
 8013440:	4640      	mov	r0, r8
 8013442:	4798      	blx	r3
 8013444:	6923      	ldr	r3, [r4, #16]
 8013446:	3b01      	subs	r3, #1
 8013448:	6123      	str	r3, [r4, #16]
 801344a:	e7f0      	b.n	801342e <_scanf_float+0x2b6>
 801344c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8013450:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8013454:	463a      	mov	r2, r7
 8013456:	4640      	mov	r0, r8
 8013458:	4798      	blx	r3
 801345a:	6923      	ldr	r3, [r4, #16]
 801345c:	3b01      	subs	r3, #1
 801345e:	6123      	str	r3, [r4, #16]
 8013460:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013464:	fa5f fa8a 	uxtb.w	sl, sl
 8013468:	f1ba 0f02 	cmp.w	sl, #2
 801346c:	d1ee      	bne.n	801344c <_scanf_float+0x2d4>
 801346e:	3d03      	subs	r5, #3
 8013470:	b2ed      	uxtb	r5, r5
 8013472:	1b76      	subs	r6, r6, r5
 8013474:	6823      	ldr	r3, [r4, #0]
 8013476:	05da      	lsls	r2, r3, #23
 8013478:	d530      	bpl.n	80134dc <_scanf_float+0x364>
 801347a:	055b      	lsls	r3, r3, #21
 801347c:	d511      	bpl.n	80134a2 <_scanf_float+0x32a>
 801347e:	9b01      	ldr	r3, [sp, #4]
 8013480:	429e      	cmp	r6, r3
 8013482:	f67f aebc 	bls.w	80131fe <_scanf_float+0x86>
 8013486:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801348a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801348e:	463a      	mov	r2, r7
 8013490:	4640      	mov	r0, r8
 8013492:	4798      	blx	r3
 8013494:	6923      	ldr	r3, [r4, #16]
 8013496:	3b01      	subs	r3, #1
 8013498:	6123      	str	r3, [r4, #16]
 801349a:	e7f0      	b.n	801347e <_scanf_float+0x306>
 801349c:	46aa      	mov	sl, r5
 801349e:	46b3      	mov	fp, r6
 80134a0:	e7de      	b.n	8013460 <_scanf_float+0x2e8>
 80134a2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80134a6:	6923      	ldr	r3, [r4, #16]
 80134a8:	2965      	cmp	r1, #101	@ 0x65
 80134aa:	f103 33ff 	add.w	r3, r3, #4294967295
 80134ae:	f106 35ff 	add.w	r5, r6, #4294967295
 80134b2:	6123      	str	r3, [r4, #16]
 80134b4:	d00c      	beq.n	80134d0 <_scanf_float+0x358>
 80134b6:	2945      	cmp	r1, #69	@ 0x45
 80134b8:	d00a      	beq.n	80134d0 <_scanf_float+0x358>
 80134ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80134be:	463a      	mov	r2, r7
 80134c0:	4640      	mov	r0, r8
 80134c2:	4798      	blx	r3
 80134c4:	6923      	ldr	r3, [r4, #16]
 80134c6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80134ca:	3b01      	subs	r3, #1
 80134cc:	1eb5      	subs	r5, r6, #2
 80134ce:	6123      	str	r3, [r4, #16]
 80134d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80134d4:	463a      	mov	r2, r7
 80134d6:	4640      	mov	r0, r8
 80134d8:	4798      	blx	r3
 80134da:	462e      	mov	r6, r5
 80134dc:	6822      	ldr	r2, [r4, #0]
 80134de:	f012 0210 	ands.w	r2, r2, #16
 80134e2:	d001      	beq.n	80134e8 <_scanf_float+0x370>
 80134e4:	2000      	movs	r0, #0
 80134e6:	e68b      	b.n	8013200 <_scanf_float+0x88>
 80134e8:	7032      	strb	r2, [r6, #0]
 80134ea:	6823      	ldr	r3, [r4, #0]
 80134ec:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80134f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80134f4:	d11c      	bne.n	8013530 <_scanf_float+0x3b8>
 80134f6:	9b02      	ldr	r3, [sp, #8]
 80134f8:	454b      	cmp	r3, r9
 80134fa:	eba3 0209 	sub.w	r2, r3, r9
 80134fe:	d123      	bne.n	8013548 <_scanf_float+0x3d0>
 8013500:	9901      	ldr	r1, [sp, #4]
 8013502:	2200      	movs	r2, #0
 8013504:	4640      	mov	r0, r8
 8013506:	f002 fc17 	bl	8015d38 <_strtod_r>
 801350a:	9b03      	ldr	r3, [sp, #12]
 801350c:	6821      	ldr	r1, [r4, #0]
 801350e:	681b      	ldr	r3, [r3, #0]
 8013510:	f011 0f02 	tst.w	r1, #2
 8013514:	ec57 6b10 	vmov	r6, r7, d0
 8013518:	f103 0204 	add.w	r2, r3, #4
 801351c:	d01f      	beq.n	801355e <_scanf_float+0x3e6>
 801351e:	9903      	ldr	r1, [sp, #12]
 8013520:	600a      	str	r2, [r1, #0]
 8013522:	681b      	ldr	r3, [r3, #0]
 8013524:	e9c3 6700 	strd	r6, r7, [r3]
 8013528:	68e3      	ldr	r3, [r4, #12]
 801352a:	3301      	adds	r3, #1
 801352c:	60e3      	str	r3, [r4, #12]
 801352e:	e7d9      	b.n	80134e4 <_scanf_float+0x36c>
 8013530:	9b04      	ldr	r3, [sp, #16]
 8013532:	2b00      	cmp	r3, #0
 8013534:	d0e4      	beq.n	8013500 <_scanf_float+0x388>
 8013536:	9905      	ldr	r1, [sp, #20]
 8013538:	230a      	movs	r3, #10
 801353a:	3101      	adds	r1, #1
 801353c:	4640      	mov	r0, r8
 801353e:	f002 fc7b 	bl	8015e38 <_strtol_r>
 8013542:	9b04      	ldr	r3, [sp, #16]
 8013544:	9e05      	ldr	r6, [sp, #20]
 8013546:	1ac2      	subs	r2, r0, r3
 8013548:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 801354c:	429e      	cmp	r6, r3
 801354e:	bf28      	it	cs
 8013550:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8013554:	4910      	ldr	r1, [pc, #64]	@ (8013598 <_scanf_float+0x420>)
 8013556:	4630      	mov	r0, r6
 8013558:	f000 f8e4 	bl	8013724 <siprintf>
 801355c:	e7d0      	b.n	8013500 <_scanf_float+0x388>
 801355e:	f011 0f04 	tst.w	r1, #4
 8013562:	9903      	ldr	r1, [sp, #12]
 8013564:	600a      	str	r2, [r1, #0]
 8013566:	d1dc      	bne.n	8013522 <_scanf_float+0x3aa>
 8013568:	681d      	ldr	r5, [r3, #0]
 801356a:	4632      	mov	r2, r6
 801356c:	463b      	mov	r3, r7
 801356e:	4630      	mov	r0, r6
 8013570:	4639      	mov	r1, r7
 8013572:	f7ed fb0b 	bl	8000b8c <__aeabi_dcmpun>
 8013576:	b128      	cbz	r0, 8013584 <_scanf_float+0x40c>
 8013578:	4808      	ldr	r0, [pc, #32]	@ (801359c <_scanf_float+0x424>)
 801357a:	f000 fa65 	bl	8013a48 <nanf>
 801357e:	ed85 0a00 	vstr	s0, [r5]
 8013582:	e7d1      	b.n	8013528 <_scanf_float+0x3b0>
 8013584:	4630      	mov	r0, r6
 8013586:	4639      	mov	r1, r7
 8013588:	f7ed fb5e 	bl	8000c48 <__aeabi_d2f>
 801358c:	6028      	str	r0, [r5, #0]
 801358e:	e7cb      	b.n	8013528 <_scanf_float+0x3b0>
 8013590:	f04f 0900 	mov.w	r9, #0
 8013594:	e629      	b.n	80131ea <_scanf_float+0x72>
 8013596:	bf00      	nop
 8013598:	0805d6a2 	.word	0x0805d6a2
 801359c:	0805d753 	.word	0x0805d753

080135a0 <std>:
 80135a0:	2300      	movs	r3, #0
 80135a2:	b510      	push	{r4, lr}
 80135a4:	4604      	mov	r4, r0
 80135a6:	e9c0 3300 	strd	r3, r3, [r0]
 80135aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80135ae:	6083      	str	r3, [r0, #8]
 80135b0:	8181      	strh	r1, [r0, #12]
 80135b2:	6643      	str	r3, [r0, #100]	@ 0x64
 80135b4:	81c2      	strh	r2, [r0, #14]
 80135b6:	6183      	str	r3, [r0, #24]
 80135b8:	4619      	mov	r1, r3
 80135ba:	2208      	movs	r2, #8
 80135bc:	305c      	adds	r0, #92	@ 0x5c
 80135be:	f000 f940 	bl	8013842 <memset>
 80135c2:	4b0d      	ldr	r3, [pc, #52]	@ (80135f8 <std+0x58>)
 80135c4:	6263      	str	r3, [r4, #36]	@ 0x24
 80135c6:	4b0d      	ldr	r3, [pc, #52]	@ (80135fc <std+0x5c>)
 80135c8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80135ca:	4b0d      	ldr	r3, [pc, #52]	@ (8013600 <std+0x60>)
 80135cc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80135ce:	4b0d      	ldr	r3, [pc, #52]	@ (8013604 <std+0x64>)
 80135d0:	6323      	str	r3, [r4, #48]	@ 0x30
 80135d2:	4b0d      	ldr	r3, [pc, #52]	@ (8013608 <std+0x68>)
 80135d4:	6224      	str	r4, [r4, #32]
 80135d6:	429c      	cmp	r4, r3
 80135d8:	d006      	beq.n	80135e8 <std+0x48>
 80135da:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80135de:	4294      	cmp	r4, r2
 80135e0:	d002      	beq.n	80135e8 <std+0x48>
 80135e2:	33d0      	adds	r3, #208	@ 0xd0
 80135e4:	429c      	cmp	r4, r3
 80135e6:	d105      	bne.n	80135f4 <std+0x54>
 80135e8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80135ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80135f0:	f000 ba10 	b.w	8013a14 <__retarget_lock_init_recursive>
 80135f4:	bd10      	pop	{r4, pc}
 80135f6:	bf00      	nop
 80135f8:	080137b9 	.word	0x080137b9
 80135fc:	080137df 	.word	0x080137df
 8013600:	08013817 	.word	0x08013817
 8013604:	0801383b 	.word	0x0801383b
 8013608:	2000c670 	.word	0x2000c670

0801360c <stdio_exit_handler>:
 801360c:	4a02      	ldr	r2, [pc, #8]	@ (8013618 <stdio_exit_handler+0xc>)
 801360e:	4903      	ldr	r1, [pc, #12]	@ (801361c <stdio_exit_handler+0x10>)
 8013610:	4803      	ldr	r0, [pc, #12]	@ (8013620 <stdio_exit_handler+0x14>)
 8013612:	f000 b869 	b.w	80136e8 <_fwalk_sglue>
 8013616:	bf00      	nop
 8013618:	2000145c 	.word	0x2000145c
 801361c:	08016829 	.word	0x08016829
 8013620:	2000146c 	.word	0x2000146c

08013624 <cleanup_stdio>:
 8013624:	6841      	ldr	r1, [r0, #4]
 8013626:	4b0c      	ldr	r3, [pc, #48]	@ (8013658 <cleanup_stdio+0x34>)
 8013628:	4299      	cmp	r1, r3
 801362a:	b510      	push	{r4, lr}
 801362c:	4604      	mov	r4, r0
 801362e:	d001      	beq.n	8013634 <cleanup_stdio+0x10>
 8013630:	f003 f8fa 	bl	8016828 <_fflush_r>
 8013634:	68a1      	ldr	r1, [r4, #8]
 8013636:	4b09      	ldr	r3, [pc, #36]	@ (801365c <cleanup_stdio+0x38>)
 8013638:	4299      	cmp	r1, r3
 801363a:	d002      	beq.n	8013642 <cleanup_stdio+0x1e>
 801363c:	4620      	mov	r0, r4
 801363e:	f003 f8f3 	bl	8016828 <_fflush_r>
 8013642:	68e1      	ldr	r1, [r4, #12]
 8013644:	4b06      	ldr	r3, [pc, #24]	@ (8013660 <cleanup_stdio+0x3c>)
 8013646:	4299      	cmp	r1, r3
 8013648:	d004      	beq.n	8013654 <cleanup_stdio+0x30>
 801364a:	4620      	mov	r0, r4
 801364c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013650:	f003 b8ea 	b.w	8016828 <_fflush_r>
 8013654:	bd10      	pop	{r4, pc}
 8013656:	bf00      	nop
 8013658:	2000c670 	.word	0x2000c670
 801365c:	2000c6d8 	.word	0x2000c6d8
 8013660:	2000c740 	.word	0x2000c740

08013664 <global_stdio_init.part.0>:
 8013664:	b510      	push	{r4, lr}
 8013666:	4b0b      	ldr	r3, [pc, #44]	@ (8013694 <global_stdio_init.part.0+0x30>)
 8013668:	4c0b      	ldr	r4, [pc, #44]	@ (8013698 <global_stdio_init.part.0+0x34>)
 801366a:	4a0c      	ldr	r2, [pc, #48]	@ (801369c <global_stdio_init.part.0+0x38>)
 801366c:	601a      	str	r2, [r3, #0]
 801366e:	4620      	mov	r0, r4
 8013670:	2200      	movs	r2, #0
 8013672:	2104      	movs	r1, #4
 8013674:	f7ff ff94 	bl	80135a0 <std>
 8013678:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801367c:	2201      	movs	r2, #1
 801367e:	2109      	movs	r1, #9
 8013680:	f7ff ff8e 	bl	80135a0 <std>
 8013684:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8013688:	2202      	movs	r2, #2
 801368a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801368e:	2112      	movs	r1, #18
 8013690:	f7ff bf86 	b.w	80135a0 <std>
 8013694:	2000c7a8 	.word	0x2000c7a8
 8013698:	2000c670 	.word	0x2000c670
 801369c:	0801360d 	.word	0x0801360d

080136a0 <__sfp_lock_acquire>:
 80136a0:	4801      	ldr	r0, [pc, #4]	@ (80136a8 <__sfp_lock_acquire+0x8>)
 80136a2:	f000 b9b8 	b.w	8013a16 <__retarget_lock_acquire_recursive>
 80136a6:	bf00      	nop
 80136a8:	2000c7b1 	.word	0x2000c7b1

080136ac <__sfp_lock_release>:
 80136ac:	4801      	ldr	r0, [pc, #4]	@ (80136b4 <__sfp_lock_release+0x8>)
 80136ae:	f000 b9b3 	b.w	8013a18 <__retarget_lock_release_recursive>
 80136b2:	bf00      	nop
 80136b4:	2000c7b1 	.word	0x2000c7b1

080136b8 <__sinit>:
 80136b8:	b510      	push	{r4, lr}
 80136ba:	4604      	mov	r4, r0
 80136bc:	f7ff fff0 	bl	80136a0 <__sfp_lock_acquire>
 80136c0:	6a23      	ldr	r3, [r4, #32]
 80136c2:	b11b      	cbz	r3, 80136cc <__sinit+0x14>
 80136c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80136c8:	f7ff bff0 	b.w	80136ac <__sfp_lock_release>
 80136cc:	4b04      	ldr	r3, [pc, #16]	@ (80136e0 <__sinit+0x28>)
 80136ce:	6223      	str	r3, [r4, #32]
 80136d0:	4b04      	ldr	r3, [pc, #16]	@ (80136e4 <__sinit+0x2c>)
 80136d2:	681b      	ldr	r3, [r3, #0]
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	d1f5      	bne.n	80136c4 <__sinit+0xc>
 80136d8:	f7ff ffc4 	bl	8013664 <global_stdio_init.part.0>
 80136dc:	e7f2      	b.n	80136c4 <__sinit+0xc>
 80136de:	bf00      	nop
 80136e0:	08013625 	.word	0x08013625
 80136e4:	2000c7a8 	.word	0x2000c7a8

080136e8 <_fwalk_sglue>:
 80136e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80136ec:	4607      	mov	r7, r0
 80136ee:	4688      	mov	r8, r1
 80136f0:	4614      	mov	r4, r2
 80136f2:	2600      	movs	r6, #0
 80136f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80136f8:	f1b9 0901 	subs.w	r9, r9, #1
 80136fc:	d505      	bpl.n	801370a <_fwalk_sglue+0x22>
 80136fe:	6824      	ldr	r4, [r4, #0]
 8013700:	2c00      	cmp	r4, #0
 8013702:	d1f7      	bne.n	80136f4 <_fwalk_sglue+0xc>
 8013704:	4630      	mov	r0, r6
 8013706:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801370a:	89ab      	ldrh	r3, [r5, #12]
 801370c:	2b01      	cmp	r3, #1
 801370e:	d907      	bls.n	8013720 <_fwalk_sglue+0x38>
 8013710:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013714:	3301      	adds	r3, #1
 8013716:	d003      	beq.n	8013720 <_fwalk_sglue+0x38>
 8013718:	4629      	mov	r1, r5
 801371a:	4638      	mov	r0, r7
 801371c:	47c0      	blx	r8
 801371e:	4306      	orrs	r6, r0
 8013720:	3568      	adds	r5, #104	@ 0x68
 8013722:	e7e9      	b.n	80136f8 <_fwalk_sglue+0x10>

08013724 <siprintf>:
 8013724:	b40e      	push	{r1, r2, r3}
 8013726:	b500      	push	{lr}
 8013728:	b09c      	sub	sp, #112	@ 0x70
 801372a:	ab1d      	add	r3, sp, #116	@ 0x74
 801372c:	9002      	str	r0, [sp, #8]
 801372e:	9006      	str	r0, [sp, #24]
 8013730:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8013734:	4809      	ldr	r0, [pc, #36]	@ (801375c <siprintf+0x38>)
 8013736:	9107      	str	r1, [sp, #28]
 8013738:	9104      	str	r1, [sp, #16]
 801373a:	4909      	ldr	r1, [pc, #36]	@ (8013760 <siprintf+0x3c>)
 801373c:	f853 2b04 	ldr.w	r2, [r3], #4
 8013740:	9105      	str	r1, [sp, #20]
 8013742:	6800      	ldr	r0, [r0, #0]
 8013744:	9301      	str	r3, [sp, #4]
 8013746:	a902      	add	r1, sp, #8
 8013748:	f002 fbd4 	bl	8015ef4 <_svfiprintf_r>
 801374c:	9b02      	ldr	r3, [sp, #8]
 801374e:	2200      	movs	r2, #0
 8013750:	701a      	strb	r2, [r3, #0]
 8013752:	b01c      	add	sp, #112	@ 0x70
 8013754:	f85d eb04 	ldr.w	lr, [sp], #4
 8013758:	b003      	add	sp, #12
 801375a:	4770      	bx	lr
 801375c:	20001468 	.word	0x20001468
 8013760:	ffff0208 	.word	0xffff0208

08013764 <siscanf>:
 8013764:	b40e      	push	{r1, r2, r3}
 8013766:	b530      	push	{r4, r5, lr}
 8013768:	b09c      	sub	sp, #112	@ 0x70
 801376a:	ac1f      	add	r4, sp, #124	@ 0x7c
 801376c:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8013770:	f854 5b04 	ldr.w	r5, [r4], #4
 8013774:	f8ad 2014 	strh.w	r2, [sp, #20]
 8013778:	9002      	str	r0, [sp, #8]
 801377a:	9006      	str	r0, [sp, #24]
 801377c:	f7ec fda8 	bl	80002d0 <strlen>
 8013780:	4b0b      	ldr	r3, [pc, #44]	@ (80137b0 <siscanf+0x4c>)
 8013782:	9003      	str	r0, [sp, #12]
 8013784:	9007      	str	r0, [sp, #28]
 8013786:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013788:	480a      	ldr	r0, [pc, #40]	@ (80137b4 <siscanf+0x50>)
 801378a:	9401      	str	r4, [sp, #4]
 801378c:	2300      	movs	r3, #0
 801378e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8013790:	9314      	str	r3, [sp, #80]	@ 0x50
 8013792:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013796:	f8ad 3016 	strh.w	r3, [sp, #22]
 801379a:	462a      	mov	r2, r5
 801379c:	4623      	mov	r3, r4
 801379e:	a902      	add	r1, sp, #8
 80137a0:	6800      	ldr	r0, [r0, #0]
 80137a2:	f002 fcfb 	bl	801619c <__ssvfiscanf_r>
 80137a6:	b01c      	add	sp, #112	@ 0x70
 80137a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80137ac:	b003      	add	sp, #12
 80137ae:	4770      	bx	lr
 80137b0:	080137db 	.word	0x080137db
 80137b4:	20001468 	.word	0x20001468

080137b8 <__sread>:
 80137b8:	b510      	push	{r4, lr}
 80137ba:	460c      	mov	r4, r1
 80137bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80137c0:	f000 f8ca 	bl	8013958 <_read_r>
 80137c4:	2800      	cmp	r0, #0
 80137c6:	bfab      	itete	ge
 80137c8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80137ca:	89a3      	ldrhlt	r3, [r4, #12]
 80137cc:	181b      	addge	r3, r3, r0
 80137ce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80137d2:	bfac      	ite	ge
 80137d4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80137d6:	81a3      	strhlt	r3, [r4, #12]
 80137d8:	bd10      	pop	{r4, pc}

080137da <__seofread>:
 80137da:	2000      	movs	r0, #0
 80137dc:	4770      	bx	lr

080137de <__swrite>:
 80137de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80137e2:	461f      	mov	r7, r3
 80137e4:	898b      	ldrh	r3, [r1, #12]
 80137e6:	05db      	lsls	r3, r3, #23
 80137e8:	4605      	mov	r5, r0
 80137ea:	460c      	mov	r4, r1
 80137ec:	4616      	mov	r6, r2
 80137ee:	d505      	bpl.n	80137fc <__swrite+0x1e>
 80137f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80137f4:	2302      	movs	r3, #2
 80137f6:	2200      	movs	r2, #0
 80137f8:	f000 f89c 	bl	8013934 <_lseek_r>
 80137fc:	89a3      	ldrh	r3, [r4, #12]
 80137fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013802:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8013806:	81a3      	strh	r3, [r4, #12]
 8013808:	4632      	mov	r2, r6
 801380a:	463b      	mov	r3, r7
 801380c:	4628      	mov	r0, r5
 801380e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013812:	f000 b8c3 	b.w	801399c <_write_r>

08013816 <__sseek>:
 8013816:	b510      	push	{r4, lr}
 8013818:	460c      	mov	r4, r1
 801381a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801381e:	f000 f889 	bl	8013934 <_lseek_r>
 8013822:	1c43      	adds	r3, r0, #1
 8013824:	89a3      	ldrh	r3, [r4, #12]
 8013826:	bf15      	itete	ne
 8013828:	6560      	strne	r0, [r4, #84]	@ 0x54
 801382a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801382e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8013832:	81a3      	strheq	r3, [r4, #12]
 8013834:	bf18      	it	ne
 8013836:	81a3      	strhne	r3, [r4, #12]
 8013838:	bd10      	pop	{r4, pc}

0801383a <__sclose>:
 801383a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801383e:	f000 b869 	b.w	8013914 <_close_r>

08013842 <memset>:
 8013842:	4402      	add	r2, r0
 8013844:	4603      	mov	r3, r0
 8013846:	4293      	cmp	r3, r2
 8013848:	d100      	bne.n	801384c <memset+0xa>
 801384a:	4770      	bx	lr
 801384c:	f803 1b01 	strb.w	r1, [r3], #1
 8013850:	e7f9      	b.n	8013846 <memset+0x4>
	...

08013854 <strtok>:
 8013854:	4b16      	ldr	r3, [pc, #88]	@ (80138b0 <strtok+0x5c>)
 8013856:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801385a:	681f      	ldr	r7, [r3, #0]
 801385c:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 801385e:	4605      	mov	r5, r0
 8013860:	460e      	mov	r6, r1
 8013862:	b9ec      	cbnz	r4, 80138a0 <strtok+0x4c>
 8013864:	2050      	movs	r0, #80	@ 0x50
 8013866:	f7fe ff4b 	bl	8012700 <malloc>
 801386a:	4602      	mov	r2, r0
 801386c:	6478      	str	r0, [r7, #68]	@ 0x44
 801386e:	b920      	cbnz	r0, 801387a <strtok+0x26>
 8013870:	4b10      	ldr	r3, [pc, #64]	@ (80138b4 <strtok+0x60>)
 8013872:	4811      	ldr	r0, [pc, #68]	@ (80138b8 <strtok+0x64>)
 8013874:	215b      	movs	r1, #91	@ 0x5b
 8013876:	f000 f8ed 	bl	8013a54 <__assert_func>
 801387a:	e9c0 4400 	strd	r4, r4, [r0]
 801387e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8013882:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8013886:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 801388a:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 801388e:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8013892:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8013896:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 801389a:	6184      	str	r4, [r0, #24]
 801389c:	7704      	strb	r4, [r0, #28]
 801389e:	6244      	str	r4, [r0, #36]	@ 0x24
 80138a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80138a2:	4631      	mov	r1, r6
 80138a4:	4628      	mov	r0, r5
 80138a6:	2301      	movs	r3, #1
 80138a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80138ac:	f000 b806 	b.w	80138bc <__strtok_r>
 80138b0:	20001468 	.word	0x20001468
 80138b4:	0805d6a7 	.word	0x0805d6a7
 80138b8:	0805d6be 	.word	0x0805d6be

080138bc <__strtok_r>:
 80138bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80138be:	4604      	mov	r4, r0
 80138c0:	b908      	cbnz	r0, 80138c6 <__strtok_r+0xa>
 80138c2:	6814      	ldr	r4, [r2, #0]
 80138c4:	b144      	cbz	r4, 80138d8 <__strtok_r+0x1c>
 80138c6:	4620      	mov	r0, r4
 80138c8:	f814 5b01 	ldrb.w	r5, [r4], #1
 80138cc:	460f      	mov	r7, r1
 80138ce:	f817 6b01 	ldrb.w	r6, [r7], #1
 80138d2:	b91e      	cbnz	r6, 80138dc <__strtok_r+0x20>
 80138d4:	b965      	cbnz	r5, 80138f0 <__strtok_r+0x34>
 80138d6:	6015      	str	r5, [r2, #0]
 80138d8:	2000      	movs	r0, #0
 80138da:	e005      	b.n	80138e8 <__strtok_r+0x2c>
 80138dc:	42b5      	cmp	r5, r6
 80138de:	d1f6      	bne.n	80138ce <__strtok_r+0x12>
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	d1f0      	bne.n	80138c6 <__strtok_r+0xa>
 80138e4:	6014      	str	r4, [r2, #0]
 80138e6:	7003      	strb	r3, [r0, #0]
 80138e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80138ea:	461c      	mov	r4, r3
 80138ec:	e00c      	b.n	8013908 <__strtok_r+0x4c>
 80138ee:	b915      	cbnz	r5, 80138f6 <__strtok_r+0x3a>
 80138f0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80138f4:	460e      	mov	r6, r1
 80138f6:	f816 5b01 	ldrb.w	r5, [r6], #1
 80138fa:	42ab      	cmp	r3, r5
 80138fc:	d1f7      	bne.n	80138ee <__strtok_r+0x32>
 80138fe:	2b00      	cmp	r3, #0
 8013900:	d0f3      	beq.n	80138ea <__strtok_r+0x2e>
 8013902:	2300      	movs	r3, #0
 8013904:	f804 3c01 	strb.w	r3, [r4, #-1]
 8013908:	6014      	str	r4, [r2, #0]
 801390a:	e7ed      	b.n	80138e8 <__strtok_r+0x2c>

0801390c <_localeconv_r>:
 801390c:	4800      	ldr	r0, [pc, #0]	@ (8013910 <_localeconv_r+0x4>)
 801390e:	4770      	bx	lr
 8013910:	200015a8 	.word	0x200015a8

08013914 <_close_r>:
 8013914:	b538      	push	{r3, r4, r5, lr}
 8013916:	4d06      	ldr	r5, [pc, #24]	@ (8013930 <_close_r+0x1c>)
 8013918:	2300      	movs	r3, #0
 801391a:	4604      	mov	r4, r0
 801391c:	4608      	mov	r0, r1
 801391e:	602b      	str	r3, [r5, #0]
 8013920:	f004 fe70 	bl	8018604 <_close>
 8013924:	1c43      	adds	r3, r0, #1
 8013926:	d102      	bne.n	801392e <_close_r+0x1a>
 8013928:	682b      	ldr	r3, [r5, #0]
 801392a:	b103      	cbz	r3, 801392e <_close_r+0x1a>
 801392c:	6023      	str	r3, [r4, #0]
 801392e:	bd38      	pop	{r3, r4, r5, pc}
 8013930:	2000c7ac 	.word	0x2000c7ac

08013934 <_lseek_r>:
 8013934:	b538      	push	{r3, r4, r5, lr}
 8013936:	4d07      	ldr	r5, [pc, #28]	@ (8013954 <_lseek_r+0x20>)
 8013938:	4604      	mov	r4, r0
 801393a:	4608      	mov	r0, r1
 801393c:	4611      	mov	r1, r2
 801393e:	2200      	movs	r2, #0
 8013940:	602a      	str	r2, [r5, #0]
 8013942:	461a      	mov	r2, r3
 8013944:	f004 fe86 	bl	8018654 <_lseek>
 8013948:	1c43      	adds	r3, r0, #1
 801394a:	d102      	bne.n	8013952 <_lseek_r+0x1e>
 801394c:	682b      	ldr	r3, [r5, #0]
 801394e:	b103      	cbz	r3, 8013952 <_lseek_r+0x1e>
 8013950:	6023      	str	r3, [r4, #0]
 8013952:	bd38      	pop	{r3, r4, r5, pc}
 8013954:	2000c7ac 	.word	0x2000c7ac

08013958 <_read_r>:
 8013958:	b538      	push	{r3, r4, r5, lr}
 801395a:	4d07      	ldr	r5, [pc, #28]	@ (8013978 <_read_r+0x20>)
 801395c:	4604      	mov	r4, r0
 801395e:	4608      	mov	r0, r1
 8013960:	4611      	mov	r1, r2
 8013962:	2200      	movs	r2, #0
 8013964:	602a      	str	r2, [r5, #0]
 8013966:	461a      	mov	r2, r3
 8013968:	f004 fe7c 	bl	8018664 <_read>
 801396c:	1c43      	adds	r3, r0, #1
 801396e:	d102      	bne.n	8013976 <_read_r+0x1e>
 8013970:	682b      	ldr	r3, [r5, #0]
 8013972:	b103      	cbz	r3, 8013976 <_read_r+0x1e>
 8013974:	6023      	str	r3, [r4, #0]
 8013976:	bd38      	pop	{r3, r4, r5, pc}
 8013978:	2000c7ac 	.word	0x2000c7ac

0801397c <_sbrk_r>:
 801397c:	b538      	push	{r3, r4, r5, lr}
 801397e:	4d06      	ldr	r5, [pc, #24]	@ (8013998 <_sbrk_r+0x1c>)
 8013980:	2300      	movs	r3, #0
 8013982:	4604      	mov	r4, r0
 8013984:	4608      	mov	r0, r1
 8013986:	602b      	str	r3, [r5, #0]
 8013988:	f7f0 fcd2 	bl	8004330 <_sbrk>
 801398c:	1c43      	adds	r3, r0, #1
 801398e:	d102      	bne.n	8013996 <_sbrk_r+0x1a>
 8013990:	682b      	ldr	r3, [r5, #0]
 8013992:	b103      	cbz	r3, 8013996 <_sbrk_r+0x1a>
 8013994:	6023      	str	r3, [r4, #0]
 8013996:	bd38      	pop	{r3, r4, r5, pc}
 8013998:	2000c7ac 	.word	0x2000c7ac

0801399c <_write_r>:
 801399c:	b538      	push	{r3, r4, r5, lr}
 801399e:	4d07      	ldr	r5, [pc, #28]	@ (80139bc <_write_r+0x20>)
 80139a0:	4604      	mov	r4, r0
 80139a2:	4608      	mov	r0, r1
 80139a4:	4611      	mov	r1, r2
 80139a6:	2200      	movs	r2, #0
 80139a8:	602a      	str	r2, [r5, #0]
 80139aa:	461a      	mov	r2, r3
 80139ac:	f004 fe62 	bl	8018674 <_write>
 80139b0:	1c43      	adds	r3, r0, #1
 80139b2:	d102      	bne.n	80139ba <_write_r+0x1e>
 80139b4:	682b      	ldr	r3, [r5, #0]
 80139b6:	b103      	cbz	r3, 80139ba <_write_r+0x1e>
 80139b8:	6023      	str	r3, [r4, #0]
 80139ba:	bd38      	pop	{r3, r4, r5, pc}
 80139bc:	2000c7ac 	.word	0x2000c7ac

080139c0 <__errno>:
 80139c0:	4b01      	ldr	r3, [pc, #4]	@ (80139c8 <__errno+0x8>)
 80139c2:	6818      	ldr	r0, [r3, #0]
 80139c4:	4770      	bx	lr
 80139c6:	bf00      	nop
 80139c8:	20001468 	.word	0x20001468

080139cc <__libc_init_array>:
 80139cc:	b570      	push	{r4, r5, r6, lr}
 80139ce:	4d0d      	ldr	r5, [pc, #52]	@ (8013a04 <__libc_init_array+0x38>)
 80139d0:	4c0d      	ldr	r4, [pc, #52]	@ (8013a08 <__libc_init_array+0x3c>)
 80139d2:	1b64      	subs	r4, r4, r5
 80139d4:	10a4      	asrs	r4, r4, #2
 80139d6:	2600      	movs	r6, #0
 80139d8:	42a6      	cmp	r6, r4
 80139da:	d109      	bne.n	80139f0 <__libc_init_array+0x24>
 80139dc:	4d0b      	ldr	r5, [pc, #44]	@ (8013a0c <__libc_init_array+0x40>)
 80139de:	4c0c      	ldr	r4, [pc, #48]	@ (8013a10 <__libc_init_array+0x44>)
 80139e0:	f004 fe52 	bl	8018688 <_init>
 80139e4:	1b64      	subs	r4, r4, r5
 80139e6:	10a4      	asrs	r4, r4, #2
 80139e8:	2600      	movs	r6, #0
 80139ea:	42a6      	cmp	r6, r4
 80139ec:	d105      	bne.n	80139fa <__libc_init_array+0x2e>
 80139ee:	bd70      	pop	{r4, r5, r6, pc}
 80139f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80139f4:	4798      	blx	r3
 80139f6:	3601      	adds	r6, #1
 80139f8:	e7ee      	b.n	80139d8 <__libc_init_array+0xc>
 80139fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80139fe:	4798      	blx	r3
 8013a00:	3601      	adds	r6, #1
 8013a02:	e7f2      	b.n	80139ea <__libc_init_array+0x1e>
 8013a04:	0805db48 	.word	0x0805db48
 8013a08:	0805db48 	.word	0x0805db48
 8013a0c:	0805db48 	.word	0x0805db48
 8013a10:	0805db4c 	.word	0x0805db4c

08013a14 <__retarget_lock_init_recursive>:
 8013a14:	4770      	bx	lr

08013a16 <__retarget_lock_acquire_recursive>:
 8013a16:	4770      	bx	lr

08013a18 <__retarget_lock_release_recursive>:
 8013a18:	4770      	bx	lr

08013a1a <strcpy>:
 8013a1a:	4603      	mov	r3, r0
 8013a1c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013a20:	f803 2b01 	strb.w	r2, [r3], #1
 8013a24:	2a00      	cmp	r2, #0
 8013a26:	d1f9      	bne.n	8013a1c <strcpy+0x2>
 8013a28:	4770      	bx	lr

08013a2a <memcpy>:
 8013a2a:	440a      	add	r2, r1
 8013a2c:	4291      	cmp	r1, r2
 8013a2e:	f100 33ff 	add.w	r3, r0, #4294967295
 8013a32:	d100      	bne.n	8013a36 <memcpy+0xc>
 8013a34:	4770      	bx	lr
 8013a36:	b510      	push	{r4, lr}
 8013a38:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013a3c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013a40:	4291      	cmp	r1, r2
 8013a42:	d1f9      	bne.n	8013a38 <memcpy+0xe>
 8013a44:	bd10      	pop	{r4, pc}
	...

08013a48 <nanf>:
 8013a48:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8013a50 <nanf+0x8>
 8013a4c:	4770      	bx	lr
 8013a4e:	bf00      	nop
 8013a50:	7fc00000 	.word	0x7fc00000

08013a54 <__assert_func>:
 8013a54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013a56:	4614      	mov	r4, r2
 8013a58:	461a      	mov	r2, r3
 8013a5a:	4b09      	ldr	r3, [pc, #36]	@ (8013a80 <__assert_func+0x2c>)
 8013a5c:	681b      	ldr	r3, [r3, #0]
 8013a5e:	4605      	mov	r5, r0
 8013a60:	68d8      	ldr	r0, [r3, #12]
 8013a62:	b954      	cbnz	r4, 8013a7a <__assert_func+0x26>
 8013a64:	4b07      	ldr	r3, [pc, #28]	@ (8013a84 <__assert_func+0x30>)
 8013a66:	461c      	mov	r4, r3
 8013a68:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013a6c:	9100      	str	r1, [sp, #0]
 8013a6e:	462b      	mov	r3, r5
 8013a70:	4905      	ldr	r1, [pc, #20]	@ (8013a88 <__assert_func+0x34>)
 8013a72:	f002 ff01 	bl	8016878 <fiprintf>
 8013a76:	f002 ffbb 	bl	80169f0 <abort>
 8013a7a:	4b04      	ldr	r3, [pc, #16]	@ (8013a8c <__assert_func+0x38>)
 8013a7c:	e7f4      	b.n	8013a68 <__assert_func+0x14>
 8013a7e:	bf00      	nop
 8013a80:	20001468 	.word	0x20001468
 8013a84:	0805d753 	.word	0x0805d753
 8013a88:	0805d725 	.word	0x0805d725
 8013a8c:	0805d718 	.word	0x0805d718

08013a90 <quorem>:
 8013a90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a94:	6903      	ldr	r3, [r0, #16]
 8013a96:	690c      	ldr	r4, [r1, #16]
 8013a98:	42a3      	cmp	r3, r4
 8013a9a:	4607      	mov	r7, r0
 8013a9c:	db7e      	blt.n	8013b9c <quorem+0x10c>
 8013a9e:	3c01      	subs	r4, #1
 8013aa0:	f101 0814 	add.w	r8, r1, #20
 8013aa4:	00a3      	lsls	r3, r4, #2
 8013aa6:	f100 0514 	add.w	r5, r0, #20
 8013aaa:	9300      	str	r3, [sp, #0]
 8013aac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013ab0:	9301      	str	r3, [sp, #4]
 8013ab2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013ab6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013aba:	3301      	adds	r3, #1
 8013abc:	429a      	cmp	r2, r3
 8013abe:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013ac2:	fbb2 f6f3 	udiv	r6, r2, r3
 8013ac6:	d32e      	bcc.n	8013b26 <quorem+0x96>
 8013ac8:	f04f 0a00 	mov.w	sl, #0
 8013acc:	46c4      	mov	ip, r8
 8013ace:	46ae      	mov	lr, r5
 8013ad0:	46d3      	mov	fp, sl
 8013ad2:	f85c 3b04 	ldr.w	r3, [ip], #4
 8013ad6:	b298      	uxth	r0, r3
 8013ad8:	fb06 a000 	mla	r0, r6, r0, sl
 8013adc:	0c02      	lsrs	r2, r0, #16
 8013ade:	0c1b      	lsrs	r3, r3, #16
 8013ae0:	fb06 2303 	mla	r3, r6, r3, r2
 8013ae4:	f8de 2000 	ldr.w	r2, [lr]
 8013ae8:	b280      	uxth	r0, r0
 8013aea:	b292      	uxth	r2, r2
 8013aec:	1a12      	subs	r2, r2, r0
 8013aee:	445a      	add	r2, fp
 8013af0:	f8de 0000 	ldr.w	r0, [lr]
 8013af4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013af8:	b29b      	uxth	r3, r3
 8013afa:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8013afe:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8013b02:	b292      	uxth	r2, r2
 8013b04:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8013b08:	45e1      	cmp	r9, ip
 8013b0a:	f84e 2b04 	str.w	r2, [lr], #4
 8013b0e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8013b12:	d2de      	bcs.n	8013ad2 <quorem+0x42>
 8013b14:	9b00      	ldr	r3, [sp, #0]
 8013b16:	58eb      	ldr	r3, [r5, r3]
 8013b18:	b92b      	cbnz	r3, 8013b26 <quorem+0x96>
 8013b1a:	9b01      	ldr	r3, [sp, #4]
 8013b1c:	3b04      	subs	r3, #4
 8013b1e:	429d      	cmp	r5, r3
 8013b20:	461a      	mov	r2, r3
 8013b22:	d32f      	bcc.n	8013b84 <quorem+0xf4>
 8013b24:	613c      	str	r4, [r7, #16]
 8013b26:	4638      	mov	r0, r7
 8013b28:	f001 f90c 	bl	8014d44 <__mcmp>
 8013b2c:	2800      	cmp	r0, #0
 8013b2e:	db25      	blt.n	8013b7c <quorem+0xec>
 8013b30:	4629      	mov	r1, r5
 8013b32:	2000      	movs	r0, #0
 8013b34:	f858 2b04 	ldr.w	r2, [r8], #4
 8013b38:	f8d1 c000 	ldr.w	ip, [r1]
 8013b3c:	fa1f fe82 	uxth.w	lr, r2
 8013b40:	fa1f f38c 	uxth.w	r3, ip
 8013b44:	eba3 030e 	sub.w	r3, r3, lr
 8013b48:	4403      	add	r3, r0
 8013b4a:	0c12      	lsrs	r2, r2, #16
 8013b4c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8013b50:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8013b54:	b29b      	uxth	r3, r3
 8013b56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013b5a:	45c1      	cmp	r9, r8
 8013b5c:	f841 3b04 	str.w	r3, [r1], #4
 8013b60:	ea4f 4022 	mov.w	r0, r2, asr #16
 8013b64:	d2e6      	bcs.n	8013b34 <quorem+0xa4>
 8013b66:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013b6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013b6e:	b922      	cbnz	r2, 8013b7a <quorem+0xea>
 8013b70:	3b04      	subs	r3, #4
 8013b72:	429d      	cmp	r5, r3
 8013b74:	461a      	mov	r2, r3
 8013b76:	d30b      	bcc.n	8013b90 <quorem+0x100>
 8013b78:	613c      	str	r4, [r7, #16]
 8013b7a:	3601      	adds	r6, #1
 8013b7c:	4630      	mov	r0, r6
 8013b7e:	b003      	add	sp, #12
 8013b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b84:	6812      	ldr	r2, [r2, #0]
 8013b86:	3b04      	subs	r3, #4
 8013b88:	2a00      	cmp	r2, #0
 8013b8a:	d1cb      	bne.n	8013b24 <quorem+0x94>
 8013b8c:	3c01      	subs	r4, #1
 8013b8e:	e7c6      	b.n	8013b1e <quorem+0x8e>
 8013b90:	6812      	ldr	r2, [r2, #0]
 8013b92:	3b04      	subs	r3, #4
 8013b94:	2a00      	cmp	r2, #0
 8013b96:	d1ef      	bne.n	8013b78 <quorem+0xe8>
 8013b98:	3c01      	subs	r4, #1
 8013b9a:	e7ea      	b.n	8013b72 <quorem+0xe2>
 8013b9c:	2000      	movs	r0, #0
 8013b9e:	e7ee      	b.n	8013b7e <quorem+0xee>

08013ba0 <_dtoa_r>:
 8013ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ba4:	69c7      	ldr	r7, [r0, #28]
 8013ba6:	b099      	sub	sp, #100	@ 0x64
 8013ba8:	ed8d 0b02 	vstr	d0, [sp, #8]
 8013bac:	ec55 4b10 	vmov	r4, r5, d0
 8013bb0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8013bb2:	9109      	str	r1, [sp, #36]	@ 0x24
 8013bb4:	4683      	mov	fp, r0
 8013bb6:	920e      	str	r2, [sp, #56]	@ 0x38
 8013bb8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8013bba:	b97f      	cbnz	r7, 8013bdc <_dtoa_r+0x3c>
 8013bbc:	2010      	movs	r0, #16
 8013bbe:	f7fe fd9f 	bl	8012700 <malloc>
 8013bc2:	4602      	mov	r2, r0
 8013bc4:	f8cb 001c 	str.w	r0, [fp, #28]
 8013bc8:	b920      	cbnz	r0, 8013bd4 <_dtoa_r+0x34>
 8013bca:	4ba7      	ldr	r3, [pc, #668]	@ (8013e68 <_dtoa_r+0x2c8>)
 8013bcc:	21ef      	movs	r1, #239	@ 0xef
 8013bce:	48a7      	ldr	r0, [pc, #668]	@ (8013e6c <_dtoa_r+0x2cc>)
 8013bd0:	f7ff ff40 	bl	8013a54 <__assert_func>
 8013bd4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8013bd8:	6007      	str	r7, [r0, #0]
 8013bda:	60c7      	str	r7, [r0, #12]
 8013bdc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8013be0:	6819      	ldr	r1, [r3, #0]
 8013be2:	b159      	cbz	r1, 8013bfc <_dtoa_r+0x5c>
 8013be4:	685a      	ldr	r2, [r3, #4]
 8013be6:	604a      	str	r2, [r1, #4]
 8013be8:	2301      	movs	r3, #1
 8013bea:	4093      	lsls	r3, r2
 8013bec:	608b      	str	r3, [r1, #8]
 8013bee:	4658      	mov	r0, fp
 8013bf0:	f000 fe24 	bl	801483c <_Bfree>
 8013bf4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8013bf8:	2200      	movs	r2, #0
 8013bfa:	601a      	str	r2, [r3, #0]
 8013bfc:	1e2b      	subs	r3, r5, #0
 8013bfe:	bfb9      	ittee	lt
 8013c00:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8013c04:	9303      	strlt	r3, [sp, #12]
 8013c06:	2300      	movge	r3, #0
 8013c08:	6033      	strge	r3, [r6, #0]
 8013c0a:	9f03      	ldr	r7, [sp, #12]
 8013c0c:	4b98      	ldr	r3, [pc, #608]	@ (8013e70 <_dtoa_r+0x2d0>)
 8013c0e:	bfbc      	itt	lt
 8013c10:	2201      	movlt	r2, #1
 8013c12:	6032      	strlt	r2, [r6, #0]
 8013c14:	43bb      	bics	r3, r7
 8013c16:	d112      	bne.n	8013c3e <_dtoa_r+0x9e>
 8013c18:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8013c1a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8013c1e:	6013      	str	r3, [r2, #0]
 8013c20:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013c24:	4323      	orrs	r3, r4
 8013c26:	f000 854d 	beq.w	80146c4 <_dtoa_r+0xb24>
 8013c2a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8013c2c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8013e84 <_dtoa_r+0x2e4>
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	f000 854f 	beq.w	80146d4 <_dtoa_r+0xb34>
 8013c36:	f10a 0303 	add.w	r3, sl, #3
 8013c3a:	f000 bd49 	b.w	80146d0 <_dtoa_r+0xb30>
 8013c3e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013c42:	2200      	movs	r2, #0
 8013c44:	ec51 0b17 	vmov	r0, r1, d7
 8013c48:	2300      	movs	r3, #0
 8013c4a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8013c4e:	f7ec ff6b 	bl	8000b28 <__aeabi_dcmpeq>
 8013c52:	4680      	mov	r8, r0
 8013c54:	b158      	cbz	r0, 8013c6e <_dtoa_r+0xce>
 8013c56:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8013c58:	2301      	movs	r3, #1
 8013c5a:	6013      	str	r3, [r2, #0]
 8013c5c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8013c5e:	b113      	cbz	r3, 8013c66 <_dtoa_r+0xc6>
 8013c60:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8013c62:	4b84      	ldr	r3, [pc, #528]	@ (8013e74 <_dtoa_r+0x2d4>)
 8013c64:	6013      	str	r3, [r2, #0]
 8013c66:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8013e88 <_dtoa_r+0x2e8>
 8013c6a:	f000 bd33 	b.w	80146d4 <_dtoa_r+0xb34>
 8013c6e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8013c72:	aa16      	add	r2, sp, #88	@ 0x58
 8013c74:	a917      	add	r1, sp, #92	@ 0x5c
 8013c76:	4658      	mov	r0, fp
 8013c78:	f001 f984 	bl	8014f84 <__d2b>
 8013c7c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8013c80:	4681      	mov	r9, r0
 8013c82:	2e00      	cmp	r6, #0
 8013c84:	d077      	beq.n	8013d76 <_dtoa_r+0x1d6>
 8013c86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013c88:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8013c8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013c90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013c94:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8013c98:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8013c9c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8013ca0:	4619      	mov	r1, r3
 8013ca2:	2200      	movs	r2, #0
 8013ca4:	4b74      	ldr	r3, [pc, #464]	@ (8013e78 <_dtoa_r+0x2d8>)
 8013ca6:	f7ec fb1f 	bl	80002e8 <__aeabi_dsub>
 8013caa:	a369      	add	r3, pc, #420	@ (adr r3, 8013e50 <_dtoa_r+0x2b0>)
 8013cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cb0:	f7ec fcd2 	bl	8000658 <__aeabi_dmul>
 8013cb4:	a368      	add	r3, pc, #416	@ (adr r3, 8013e58 <_dtoa_r+0x2b8>)
 8013cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cba:	f7ec fb17 	bl	80002ec <__adddf3>
 8013cbe:	4604      	mov	r4, r0
 8013cc0:	4630      	mov	r0, r6
 8013cc2:	460d      	mov	r5, r1
 8013cc4:	f7ec fc5e 	bl	8000584 <__aeabi_i2d>
 8013cc8:	a365      	add	r3, pc, #404	@ (adr r3, 8013e60 <_dtoa_r+0x2c0>)
 8013cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cce:	f7ec fcc3 	bl	8000658 <__aeabi_dmul>
 8013cd2:	4602      	mov	r2, r0
 8013cd4:	460b      	mov	r3, r1
 8013cd6:	4620      	mov	r0, r4
 8013cd8:	4629      	mov	r1, r5
 8013cda:	f7ec fb07 	bl	80002ec <__adddf3>
 8013cde:	4604      	mov	r4, r0
 8013ce0:	460d      	mov	r5, r1
 8013ce2:	f7ec ff69 	bl	8000bb8 <__aeabi_d2iz>
 8013ce6:	2200      	movs	r2, #0
 8013ce8:	4607      	mov	r7, r0
 8013cea:	2300      	movs	r3, #0
 8013cec:	4620      	mov	r0, r4
 8013cee:	4629      	mov	r1, r5
 8013cf0:	f7ec ff24 	bl	8000b3c <__aeabi_dcmplt>
 8013cf4:	b140      	cbz	r0, 8013d08 <_dtoa_r+0x168>
 8013cf6:	4638      	mov	r0, r7
 8013cf8:	f7ec fc44 	bl	8000584 <__aeabi_i2d>
 8013cfc:	4622      	mov	r2, r4
 8013cfe:	462b      	mov	r3, r5
 8013d00:	f7ec ff12 	bl	8000b28 <__aeabi_dcmpeq>
 8013d04:	b900      	cbnz	r0, 8013d08 <_dtoa_r+0x168>
 8013d06:	3f01      	subs	r7, #1
 8013d08:	2f16      	cmp	r7, #22
 8013d0a:	d851      	bhi.n	8013db0 <_dtoa_r+0x210>
 8013d0c:	4b5b      	ldr	r3, [pc, #364]	@ (8013e7c <_dtoa_r+0x2dc>)
 8013d0e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8013d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013d1a:	f7ec ff0f 	bl	8000b3c <__aeabi_dcmplt>
 8013d1e:	2800      	cmp	r0, #0
 8013d20:	d048      	beq.n	8013db4 <_dtoa_r+0x214>
 8013d22:	3f01      	subs	r7, #1
 8013d24:	2300      	movs	r3, #0
 8013d26:	9312      	str	r3, [sp, #72]	@ 0x48
 8013d28:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8013d2a:	1b9b      	subs	r3, r3, r6
 8013d2c:	1e5a      	subs	r2, r3, #1
 8013d2e:	bf44      	itt	mi
 8013d30:	f1c3 0801 	rsbmi	r8, r3, #1
 8013d34:	2300      	movmi	r3, #0
 8013d36:	9208      	str	r2, [sp, #32]
 8013d38:	bf54      	ite	pl
 8013d3a:	f04f 0800 	movpl.w	r8, #0
 8013d3e:	9308      	strmi	r3, [sp, #32]
 8013d40:	2f00      	cmp	r7, #0
 8013d42:	db39      	blt.n	8013db8 <_dtoa_r+0x218>
 8013d44:	9b08      	ldr	r3, [sp, #32]
 8013d46:	970f      	str	r7, [sp, #60]	@ 0x3c
 8013d48:	443b      	add	r3, r7
 8013d4a:	9308      	str	r3, [sp, #32]
 8013d4c:	2300      	movs	r3, #0
 8013d4e:	930a      	str	r3, [sp, #40]	@ 0x28
 8013d50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013d52:	2b09      	cmp	r3, #9
 8013d54:	d864      	bhi.n	8013e20 <_dtoa_r+0x280>
 8013d56:	2b05      	cmp	r3, #5
 8013d58:	bfc4      	itt	gt
 8013d5a:	3b04      	subgt	r3, #4
 8013d5c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8013d5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013d60:	f1a3 0302 	sub.w	r3, r3, #2
 8013d64:	bfcc      	ite	gt
 8013d66:	2400      	movgt	r4, #0
 8013d68:	2401      	movle	r4, #1
 8013d6a:	2b03      	cmp	r3, #3
 8013d6c:	d863      	bhi.n	8013e36 <_dtoa_r+0x296>
 8013d6e:	e8df f003 	tbb	[pc, r3]
 8013d72:	372a      	.short	0x372a
 8013d74:	5535      	.short	0x5535
 8013d76:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8013d7a:	441e      	add	r6, r3
 8013d7c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8013d80:	2b20      	cmp	r3, #32
 8013d82:	bfc1      	itttt	gt
 8013d84:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8013d88:	409f      	lslgt	r7, r3
 8013d8a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8013d8e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8013d92:	bfd6      	itet	le
 8013d94:	f1c3 0320 	rsble	r3, r3, #32
 8013d98:	ea47 0003 	orrgt.w	r0, r7, r3
 8013d9c:	fa04 f003 	lslle.w	r0, r4, r3
 8013da0:	f7ec fbe0 	bl	8000564 <__aeabi_ui2d>
 8013da4:	2201      	movs	r2, #1
 8013da6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8013daa:	3e01      	subs	r6, #1
 8013dac:	9214      	str	r2, [sp, #80]	@ 0x50
 8013dae:	e777      	b.n	8013ca0 <_dtoa_r+0x100>
 8013db0:	2301      	movs	r3, #1
 8013db2:	e7b8      	b.n	8013d26 <_dtoa_r+0x186>
 8013db4:	9012      	str	r0, [sp, #72]	@ 0x48
 8013db6:	e7b7      	b.n	8013d28 <_dtoa_r+0x188>
 8013db8:	427b      	negs	r3, r7
 8013dba:	930a      	str	r3, [sp, #40]	@ 0x28
 8013dbc:	2300      	movs	r3, #0
 8013dbe:	eba8 0807 	sub.w	r8, r8, r7
 8013dc2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8013dc4:	e7c4      	b.n	8013d50 <_dtoa_r+0x1b0>
 8013dc6:	2300      	movs	r3, #0
 8013dc8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013dca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013dcc:	2b00      	cmp	r3, #0
 8013dce:	dc35      	bgt.n	8013e3c <_dtoa_r+0x29c>
 8013dd0:	2301      	movs	r3, #1
 8013dd2:	9300      	str	r3, [sp, #0]
 8013dd4:	9307      	str	r3, [sp, #28]
 8013dd6:	461a      	mov	r2, r3
 8013dd8:	920e      	str	r2, [sp, #56]	@ 0x38
 8013dda:	e00b      	b.n	8013df4 <_dtoa_r+0x254>
 8013ddc:	2301      	movs	r3, #1
 8013dde:	e7f3      	b.n	8013dc8 <_dtoa_r+0x228>
 8013de0:	2300      	movs	r3, #0
 8013de2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013de4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013de6:	18fb      	adds	r3, r7, r3
 8013de8:	9300      	str	r3, [sp, #0]
 8013dea:	3301      	adds	r3, #1
 8013dec:	2b01      	cmp	r3, #1
 8013dee:	9307      	str	r3, [sp, #28]
 8013df0:	bfb8      	it	lt
 8013df2:	2301      	movlt	r3, #1
 8013df4:	f8db 001c 	ldr.w	r0, [fp, #28]
 8013df8:	2100      	movs	r1, #0
 8013dfa:	2204      	movs	r2, #4
 8013dfc:	f102 0514 	add.w	r5, r2, #20
 8013e00:	429d      	cmp	r5, r3
 8013e02:	d91f      	bls.n	8013e44 <_dtoa_r+0x2a4>
 8013e04:	6041      	str	r1, [r0, #4]
 8013e06:	4658      	mov	r0, fp
 8013e08:	f000 fcd8 	bl	80147bc <_Balloc>
 8013e0c:	4682      	mov	sl, r0
 8013e0e:	2800      	cmp	r0, #0
 8013e10:	d13c      	bne.n	8013e8c <_dtoa_r+0x2ec>
 8013e12:	4b1b      	ldr	r3, [pc, #108]	@ (8013e80 <_dtoa_r+0x2e0>)
 8013e14:	4602      	mov	r2, r0
 8013e16:	f240 11af 	movw	r1, #431	@ 0x1af
 8013e1a:	e6d8      	b.n	8013bce <_dtoa_r+0x2e>
 8013e1c:	2301      	movs	r3, #1
 8013e1e:	e7e0      	b.n	8013de2 <_dtoa_r+0x242>
 8013e20:	2401      	movs	r4, #1
 8013e22:	2300      	movs	r3, #0
 8013e24:	9309      	str	r3, [sp, #36]	@ 0x24
 8013e26:	940b      	str	r4, [sp, #44]	@ 0x2c
 8013e28:	f04f 33ff 	mov.w	r3, #4294967295
 8013e2c:	9300      	str	r3, [sp, #0]
 8013e2e:	9307      	str	r3, [sp, #28]
 8013e30:	2200      	movs	r2, #0
 8013e32:	2312      	movs	r3, #18
 8013e34:	e7d0      	b.n	8013dd8 <_dtoa_r+0x238>
 8013e36:	2301      	movs	r3, #1
 8013e38:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013e3a:	e7f5      	b.n	8013e28 <_dtoa_r+0x288>
 8013e3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013e3e:	9300      	str	r3, [sp, #0]
 8013e40:	9307      	str	r3, [sp, #28]
 8013e42:	e7d7      	b.n	8013df4 <_dtoa_r+0x254>
 8013e44:	3101      	adds	r1, #1
 8013e46:	0052      	lsls	r2, r2, #1
 8013e48:	e7d8      	b.n	8013dfc <_dtoa_r+0x25c>
 8013e4a:	bf00      	nop
 8013e4c:	f3af 8000 	nop.w
 8013e50:	636f4361 	.word	0x636f4361
 8013e54:	3fd287a7 	.word	0x3fd287a7
 8013e58:	8b60c8b3 	.word	0x8b60c8b3
 8013e5c:	3fc68a28 	.word	0x3fc68a28
 8013e60:	509f79fb 	.word	0x509f79fb
 8013e64:	3fd34413 	.word	0x3fd34413
 8013e68:	0805d6a7 	.word	0x0805d6a7
 8013e6c:	0805d761 	.word	0x0805d761
 8013e70:	7ff00000 	.word	0x7ff00000
 8013e74:	0805daa1 	.word	0x0805daa1
 8013e78:	3ff80000 	.word	0x3ff80000
 8013e7c:	0805d858 	.word	0x0805d858
 8013e80:	0805d7b9 	.word	0x0805d7b9
 8013e84:	0805d75d 	.word	0x0805d75d
 8013e88:	0805daa0 	.word	0x0805daa0
 8013e8c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8013e90:	6018      	str	r0, [r3, #0]
 8013e92:	9b07      	ldr	r3, [sp, #28]
 8013e94:	2b0e      	cmp	r3, #14
 8013e96:	f200 80a4 	bhi.w	8013fe2 <_dtoa_r+0x442>
 8013e9a:	2c00      	cmp	r4, #0
 8013e9c:	f000 80a1 	beq.w	8013fe2 <_dtoa_r+0x442>
 8013ea0:	2f00      	cmp	r7, #0
 8013ea2:	dd33      	ble.n	8013f0c <_dtoa_r+0x36c>
 8013ea4:	4bad      	ldr	r3, [pc, #692]	@ (801415c <_dtoa_r+0x5bc>)
 8013ea6:	f007 020f 	and.w	r2, r7, #15
 8013eaa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013eae:	ed93 7b00 	vldr	d7, [r3]
 8013eb2:	05f8      	lsls	r0, r7, #23
 8013eb4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8013eb8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8013ebc:	d516      	bpl.n	8013eec <_dtoa_r+0x34c>
 8013ebe:	4ba8      	ldr	r3, [pc, #672]	@ (8014160 <_dtoa_r+0x5c0>)
 8013ec0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013ec4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013ec8:	f7ec fcf0 	bl	80008ac <__aeabi_ddiv>
 8013ecc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013ed0:	f004 040f 	and.w	r4, r4, #15
 8013ed4:	2603      	movs	r6, #3
 8013ed6:	4da2      	ldr	r5, [pc, #648]	@ (8014160 <_dtoa_r+0x5c0>)
 8013ed8:	b954      	cbnz	r4, 8013ef0 <_dtoa_r+0x350>
 8013eda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013ede:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013ee2:	f7ec fce3 	bl	80008ac <__aeabi_ddiv>
 8013ee6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013eea:	e028      	b.n	8013f3e <_dtoa_r+0x39e>
 8013eec:	2602      	movs	r6, #2
 8013eee:	e7f2      	b.n	8013ed6 <_dtoa_r+0x336>
 8013ef0:	07e1      	lsls	r1, r4, #31
 8013ef2:	d508      	bpl.n	8013f06 <_dtoa_r+0x366>
 8013ef4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013ef8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013efc:	f7ec fbac 	bl	8000658 <__aeabi_dmul>
 8013f00:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013f04:	3601      	adds	r6, #1
 8013f06:	1064      	asrs	r4, r4, #1
 8013f08:	3508      	adds	r5, #8
 8013f0a:	e7e5      	b.n	8013ed8 <_dtoa_r+0x338>
 8013f0c:	f000 80d2 	beq.w	80140b4 <_dtoa_r+0x514>
 8013f10:	427c      	negs	r4, r7
 8013f12:	4b92      	ldr	r3, [pc, #584]	@ (801415c <_dtoa_r+0x5bc>)
 8013f14:	4d92      	ldr	r5, [pc, #584]	@ (8014160 <_dtoa_r+0x5c0>)
 8013f16:	f004 020f 	and.w	r2, r4, #15
 8013f1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f22:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013f26:	f7ec fb97 	bl	8000658 <__aeabi_dmul>
 8013f2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013f2e:	1124      	asrs	r4, r4, #4
 8013f30:	2300      	movs	r3, #0
 8013f32:	2602      	movs	r6, #2
 8013f34:	2c00      	cmp	r4, #0
 8013f36:	f040 80b2 	bne.w	801409e <_dtoa_r+0x4fe>
 8013f3a:	2b00      	cmp	r3, #0
 8013f3c:	d1d3      	bne.n	8013ee6 <_dtoa_r+0x346>
 8013f3e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8013f40:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8013f44:	2b00      	cmp	r3, #0
 8013f46:	f000 80b7 	beq.w	80140b8 <_dtoa_r+0x518>
 8013f4a:	4b86      	ldr	r3, [pc, #536]	@ (8014164 <_dtoa_r+0x5c4>)
 8013f4c:	2200      	movs	r2, #0
 8013f4e:	4620      	mov	r0, r4
 8013f50:	4629      	mov	r1, r5
 8013f52:	f7ec fdf3 	bl	8000b3c <__aeabi_dcmplt>
 8013f56:	2800      	cmp	r0, #0
 8013f58:	f000 80ae 	beq.w	80140b8 <_dtoa_r+0x518>
 8013f5c:	9b07      	ldr	r3, [sp, #28]
 8013f5e:	2b00      	cmp	r3, #0
 8013f60:	f000 80aa 	beq.w	80140b8 <_dtoa_r+0x518>
 8013f64:	9b00      	ldr	r3, [sp, #0]
 8013f66:	2b00      	cmp	r3, #0
 8013f68:	dd37      	ble.n	8013fda <_dtoa_r+0x43a>
 8013f6a:	1e7b      	subs	r3, r7, #1
 8013f6c:	9304      	str	r3, [sp, #16]
 8013f6e:	4620      	mov	r0, r4
 8013f70:	4b7d      	ldr	r3, [pc, #500]	@ (8014168 <_dtoa_r+0x5c8>)
 8013f72:	2200      	movs	r2, #0
 8013f74:	4629      	mov	r1, r5
 8013f76:	f7ec fb6f 	bl	8000658 <__aeabi_dmul>
 8013f7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013f7e:	9c00      	ldr	r4, [sp, #0]
 8013f80:	3601      	adds	r6, #1
 8013f82:	4630      	mov	r0, r6
 8013f84:	f7ec fafe 	bl	8000584 <__aeabi_i2d>
 8013f88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013f8c:	f7ec fb64 	bl	8000658 <__aeabi_dmul>
 8013f90:	4b76      	ldr	r3, [pc, #472]	@ (801416c <_dtoa_r+0x5cc>)
 8013f92:	2200      	movs	r2, #0
 8013f94:	f7ec f9aa 	bl	80002ec <__adddf3>
 8013f98:	4605      	mov	r5, r0
 8013f9a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8013f9e:	2c00      	cmp	r4, #0
 8013fa0:	f040 808d 	bne.w	80140be <_dtoa_r+0x51e>
 8013fa4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013fa8:	4b71      	ldr	r3, [pc, #452]	@ (8014170 <_dtoa_r+0x5d0>)
 8013faa:	2200      	movs	r2, #0
 8013fac:	f7ec f99c 	bl	80002e8 <__aeabi_dsub>
 8013fb0:	4602      	mov	r2, r0
 8013fb2:	460b      	mov	r3, r1
 8013fb4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013fb8:	462a      	mov	r2, r5
 8013fba:	4633      	mov	r3, r6
 8013fbc:	f7ec fddc 	bl	8000b78 <__aeabi_dcmpgt>
 8013fc0:	2800      	cmp	r0, #0
 8013fc2:	f040 828b 	bne.w	80144dc <_dtoa_r+0x93c>
 8013fc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013fca:	462a      	mov	r2, r5
 8013fcc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8013fd0:	f7ec fdb4 	bl	8000b3c <__aeabi_dcmplt>
 8013fd4:	2800      	cmp	r0, #0
 8013fd6:	f040 8128 	bne.w	801422a <_dtoa_r+0x68a>
 8013fda:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8013fde:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8013fe2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8013fe4:	2b00      	cmp	r3, #0
 8013fe6:	f2c0 815a 	blt.w	801429e <_dtoa_r+0x6fe>
 8013fea:	2f0e      	cmp	r7, #14
 8013fec:	f300 8157 	bgt.w	801429e <_dtoa_r+0x6fe>
 8013ff0:	4b5a      	ldr	r3, [pc, #360]	@ (801415c <_dtoa_r+0x5bc>)
 8013ff2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8013ff6:	ed93 7b00 	vldr	d7, [r3]
 8013ffa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013ffc:	2b00      	cmp	r3, #0
 8013ffe:	ed8d 7b00 	vstr	d7, [sp]
 8014002:	da03      	bge.n	801400c <_dtoa_r+0x46c>
 8014004:	9b07      	ldr	r3, [sp, #28]
 8014006:	2b00      	cmp	r3, #0
 8014008:	f340 8101 	ble.w	801420e <_dtoa_r+0x66e>
 801400c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8014010:	4656      	mov	r6, sl
 8014012:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014016:	4620      	mov	r0, r4
 8014018:	4629      	mov	r1, r5
 801401a:	f7ec fc47 	bl	80008ac <__aeabi_ddiv>
 801401e:	f7ec fdcb 	bl	8000bb8 <__aeabi_d2iz>
 8014022:	4680      	mov	r8, r0
 8014024:	f7ec faae 	bl	8000584 <__aeabi_i2d>
 8014028:	e9dd 2300 	ldrd	r2, r3, [sp]
 801402c:	f7ec fb14 	bl	8000658 <__aeabi_dmul>
 8014030:	4602      	mov	r2, r0
 8014032:	460b      	mov	r3, r1
 8014034:	4620      	mov	r0, r4
 8014036:	4629      	mov	r1, r5
 8014038:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801403c:	f7ec f954 	bl	80002e8 <__aeabi_dsub>
 8014040:	f806 4b01 	strb.w	r4, [r6], #1
 8014044:	9d07      	ldr	r5, [sp, #28]
 8014046:	eba6 040a 	sub.w	r4, r6, sl
 801404a:	42a5      	cmp	r5, r4
 801404c:	4602      	mov	r2, r0
 801404e:	460b      	mov	r3, r1
 8014050:	f040 8117 	bne.w	8014282 <_dtoa_r+0x6e2>
 8014054:	f7ec f94a 	bl	80002ec <__adddf3>
 8014058:	e9dd 2300 	ldrd	r2, r3, [sp]
 801405c:	4604      	mov	r4, r0
 801405e:	460d      	mov	r5, r1
 8014060:	f7ec fd8a 	bl	8000b78 <__aeabi_dcmpgt>
 8014064:	2800      	cmp	r0, #0
 8014066:	f040 80f9 	bne.w	801425c <_dtoa_r+0x6bc>
 801406a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801406e:	4620      	mov	r0, r4
 8014070:	4629      	mov	r1, r5
 8014072:	f7ec fd59 	bl	8000b28 <__aeabi_dcmpeq>
 8014076:	b118      	cbz	r0, 8014080 <_dtoa_r+0x4e0>
 8014078:	f018 0f01 	tst.w	r8, #1
 801407c:	f040 80ee 	bne.w	801425c <_dtoa_r+0x6bc>
 8014080:	4649      	mov	r1, r9
 8014082:	4658      	mov	r0, fp
 8014084:	f000 fbda 	bl	801483c <_Bfree>
 8014088:	2300      	movs	r3, #0
 801408a:	7033      	strb	r3, [r6, #0]
 801408c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801408e:	3701      	adds	r7, #1
 8014090:	601f      	str	r7, [r3, #0]
 8014092:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8014094:	2b00      	cmp	r3, #0
 8014096:	f000 831d 	beq.w	80146d4 <_dtoa_r+0xb34>
 801409a:	601e      	str	r6, [r3, #0]
 801409c:	e31a      	b.n	80146d4 <_dtoa_r+0xb34>
 801409e:	07e2      	lsls	r2, r4, #31
 80140a0:	d505      	bpl.n	80140ae <_dtoa_r+0x50e>
 80140a2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80140a6:	f7ec fad7 	bl	8000658 <__aeabi_dmul>
 80140aa:	3601      	adds	r6, #1
 80140ac:	2301      	movs	r3, #1
 80140ae:	1064      	asrs	r4, r4, #1
 80140b0:	3508      	adds	r5, #8
 80140b2:	e73f      	b.n	8013f34 <_dtoa_r+0x394>
 80140b4:	2602      	movs	r6, #2
 80140b6:	e742      	b.n	8013f3e <_dtoa_r+0x39e>
 80140b8:	9c07      	ldr	r4, [sp, #28]
 80140ba:	9704      	str	r7, [sp, #16]
 80140bc:	e761      	b.n	8013f82 <_dtoa_r+0x3e2>
 80140be:	4b27      	ldr	r3, [pc, #156]	@ (801415c <_dtoa_r+0x5bc>)
 80140c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80140c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80140c6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80140ca:	4454      	add	r4, sl
 80140cc:	2900      	cmp	r1, #0
 80140ce:	d053      	beq.n	8014178 <_dtoa_r+0x5d8>
 80140d0:	4928      	ldr	r1, [pc, #160]	@ (8014174 <_dtoa_r+0x5d4>)
 80140d2:	2000      	movs	r0, #0
 80140d4:	f7ec fbea 	bl	80008ac <__aeabi_ddiv>
 80140d8:	4633      	mov	r3, r6
 80140da:	462a      	mov	r2, r5
 80140dc:	f7ec f904 	bl	80002e8 <__aeabi_dsub>
 80140e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80140e4:	4656      	mov	r6, sl
 80140e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80140ea:	f7ec fd65 	bl	8000bb8 <__aeabi_d2iz>
 80140ee:	4605      	mov	r5, r0
 80140f0:	f7ec fa48 	bl	8000584 <__aeabi_i2d>
 80140f4:	4602      	mov	r2, r0
 80140f6:	460b      	mov	r3, r1
 80140f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80140fc:	f7ec f8f4 	bl	80002e8 <__aeabi_dsub>
 8014100:	3530      	adds	r5, #48	@ 0x30
 8014102:	4602      	mov	r2, r0
 8014104:	460b      	mov	r3, r1
 8014106:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801410a:	f806 5b01 	strb.w	r5, [r6], #1
 801410e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8014112:	f7ec fd13 	bl	8000b3c <__aeabi_dcmplt>
 8014116:	2800      	cmp	r0, #0
 8014118:	d171      	bne.n	80141fe <_dtoa_r+0x65e>
 801411a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801411e:	4911      	ldr	r1, [pc, #68]	@ (8014164 <_dtoa_r+0x5c4>)
 8014120:	2000      	movs	r0, #0
 8014122:	f7ec f8e1 	bl	80002e8 <__aeabi_dsub>
 8014126:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801412a:	f7ec fd07 	bl	8000b3c <__aeabi_dcmplt>
 801412e:	2800      	cmp	r0, #0
 8014130:	f040 8095 	bne.w	801425e <_dtoa_r+0x6be>
 8014134:	42a6      	cmp	r6, r4
 8014136:	f43f af50 	beq.w	8013fda <_dtoa_r+0x43a>
 801413a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801413e:	4b0a      	ldr	r3, [pc, #40]	@ (8014168 <_dtoa_r+0x5c8>)
 8014140:	2200      	movs	r2, #0
 8014142:	f7ec fa89 	bl	8000658 <__aeabi_dmul>
 8014146:	4b08      	ldr	r3, [pc, #32]	@ (8014168 <_dtoa_r+0x5c8>)
 8014148:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801414c:	2200      	movs	r2, #0
 801414e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014152:	f7ec fa81 	bl	8000658 <__aeabi_dmul>
 8014156:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801415a:	e7c4      	b.n	80140e6 <_dtoa_r+0x546>
 801415c:	0805d858 	.word	0x0805d858
 8014160:	0805d830 	.word	0x0805d830
 8014164:	3ff00000 	.word	0x3ff00000
 8014168:	40240000 	.word	0x40240000
 801416c:	401c0000 	.word	0x401c0000
 8014170:	40140000 	.word	0x40140000
 8014174:	3fe00000 	.word	0x3fe00000
 8014178:	4631      	mov	r1, r6
 801417a:	4628      	mov	r0, r5
 801417c:	f7ec fa6c 	bl	8000658 <__aeabi_dmul>
 8014180:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8014184:	9415      	str	r4, [sp, #84]	@ 0x54
 8014186:	4656      	mov	r6, sl
 8014188:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801418c:	f7ec fd14 	bl	8000bb8 <__aeabi_d2iz>
 8014190:	4605      	mov	r5, r0
 8014192:	f7ec f9f7 	bl	8000584 <__aeabi_i2d>
 8014196:	4602      	mov	r2, r0
 8014198:	460b      	mov	r3, r1
 801419a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801419e:	f7ec f8a3 	bl	80002e8 <__aeabi_dsub>
 80141a2:	3530      	adds	r5, #48	@ 0x30
 80141a4:	f806 5b01 	strb.w	r5, [r6], #1
 80141a8:	4602      	mov	r2, r0
 80141aa:	460b      	mov	r3, r1
 80141ac:	42a6      	cmp	r6, r4
 80141ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80141b2:	f04f 0200 	mov.w	r2, #0
 80141b6:	d124      	bne.n	8014202 <_dtoa_r+0x662>
 80141b8:	4bac      	ldr	r3, [pc, #688]	@ (801446c <_dtoa_r+0x8cc>)
 80141ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80141be:	f7ec f895 	bl	80002ec <__adddf3>
 80141c2:	4602      	mov	r2, r0
 80141c4:	460b      	mov	r3, r1
 80141c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80141ca:	f7ec fcd5 	bl	8000b78 <__aeabi_dcmpgt>
 80141ce:	2800      	cmp	r0, #0
 80141d0:	d145      	bne.n	801425e <_dtoa_r+0x6be>
 80141d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80141d6:	49a5      	ldr	r1, [pc, #660]	@ (801446c <_dtoa_r+0x8cc>)
 80141d8:	2000      	movs	r0, #0
 80141da:	f7ec f885 	bl	80002e8 <__aeabi_dsub>
 80141de:	4602      	mov	r2, r0
 80141e0:	460b      	mov	r3, r1
 80141e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80141e6:	f7ec fca9 	bl	8000b3c <__aeabi_dcmplt>
 80141ea:	2800      	cmp	r0, #0
 80141ec:	f43f aef5 	beq.w	8013fda <_dtoa_r+0x43a>
 80141f0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80141f2:	1e73      	subs	r3, r6, #1
 80141f4:	9315      	str	r3, [sp, #84]	@ 0x54
 80141f6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80141fa:	2b30      	cmp	r3, #48	@ 0x30
 80141fc:	d0f8      	beq.n	80141f0 <_dtoa_r+0x650>
 80141fe:	9f04      	ldr	r7, [sp, #16]
 8014200:	e73e      	b.n	8014080 <_dtoa_r+0x4e0>
 8014202:	4b9b      	ldr	r3, [pc, #620]	@ (8014470 <_dtoa_r+0x8d0>)
 8014204:	f7ec fa28 	bl	8000658 <__aeabi_dmul>
 8014208:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801420c:	e7bc      	b.n	8014188 <_dtoa_r+0x5e8>
 801420e:	d10c      	bne.n	801422a <_dtoa_r+0x68a>
 8014210:	4b98      	ldr	r3, [pc, #608]	@ (8014474 <_dtoa_r+0x8d4>)
 8014212:	2200      	movs	r2, #0
 8014214:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014218:	f7ec fa1e 	bl	8000658 <__aeabi_dmul>
 801421c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014220:	f7ec fca0 	bl	8000b64 <__aeabi_dcmpge>
 8014224:	2800      	cmp	r0, #0
 8014226:	f000 8157 	beq.w	80144d8 <_dtoa_r+0x938>
 801422a:	2400      	movs	r4, #0
 801422c:	4625      	mov	r5, r4
 801422e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014230:	43db      	mvns	r3, r3
 8014232:	9304      	str	r3, [sp, #16]
 8014234:	4656      	mov	r6, sl
 8014236:	2700      	movs	r7, #0
 8014238:	4621      	mov	r1, r4
 801423a:	4658      	mov	r0, fp
 801423c:	f000 fafe 	bl	801483c <_Bfree>
 8014240:	2d00      	cmp	r5, #0
 8014242:	d0dc      	beq.n	80141fe <_dtoa_r+0x65e>
 8014244:	b12f      	cbz	r7, 8014252 <_dtoa_r+0x6b2>
 8014246:	42af      	cmp	r7, r5
 8014248:	d003      	beq.n	8014252 <_dtoa_r+0x6b2>
 801424a:	4639      	mov	r1, r7
 801424c:	4658      	mov	r0, fp
 801424e:	f000 faf5 	bl	801483c <_Bfree>
 8014252:	4629      	mov	r1, r5
 8014254:	4658      	mov	r0, fp
 8014256:	f000 faf1 	bl	801483c <_Bfree>
 801425a:	e7d0      	b.n	80141fe <_dtoa_r+0x65e>
 801425c:	9704      	str	r7, [sp, #16]
 801425e:	4633      	mov	r3, r6
 8014260:	461e      	mov	r6, r3
 8014262:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014266:	2a39      	cmp	r2, #57	@ 0x39
 8014268:	d107      	bne.n	801427a <_dtoa_r+0x6da>
 801426a:	459a      	cmp	sl, r3
 801426c:	d1f8      	bne.n	8014260 <_dtoa_r+0x6c0>
 801426e:	9a04      	ldr	r2, [sp, #16]
 8014270:	3201      	adds	r2, #1
 8014272:	9204      	str	r2, [sp, #16]
 8014274:	2230      	movs	r2, #48	@ 0x30
 8014276:	f88a 2000 	strb.w	r2, [sl]
 801427a:	781a      	ldrb	r2, [r3, #0]
 801427c:	3201      	adds	r2, #1
 801427e:	701a      	strb	r2, [r3, #0]
 8014280:	e7bd      	b.n	80141fe <_dtoa_r+0x65e>
 8014282:	4b7b      	ldr	r3, [pc, #492]	@ (8014470 <_dtoa_r+0x8d0>)
 8014284:	2200      	movs	r2, #0
 8014286:	f7ec f9e7 	bl	8000658 <__aeabi_dmul>
 801428a:	2200      	movs	r2, #0
 801428c:	2300      	movs	r3, #0
 801428e:	4604      	mov	r4, r0
 8014290:	460d      	mov	r5, r1
 8014292:	f7ec fc49 	bl	8000b28 <__aeabi_dcmpeq>
 8014296:	2800      	cmp	r0, #0
 8014298:	f43f aebb 	beq.w	8014012 <_dtoa_r+0x472>
 801429c:	e6f0      	b.n	8014080 <_dtoa_r+0x4e0>
 801429e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80142a0:	2a00      	cmp	r2, #0
 80142a2:	f000 80db 	beq.w	801445c <_dtoa_r+0x8bc>
 80142a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80142a8:	2a01      	cmp	r2, #1
 80142aa:	f300 80bf 	bgt.w	801442c <_dtoa_r+0x88c>
 80142ae:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80142b0:	2a00      	cmp	r2, #0
 80142b2:	f000 80b7 	beq.w	8014424 <_dtoa_r+0x884>
 80142b6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80142ba:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80142bc:	4646      	mov	r6, r8
 80142be:	9a08      	ldr	r2, [sp, #32]
 80142c0:	2101      	movs	r1, #1
 80142c2:	441a      	add	r2, r3
 80142c4:	4658      	mov	r0, fp
 80142c6:	4498      	add	r8, r3
 80142c8:	9208      	str	r2, [sp, #32]
 80142ca:	f000 fbb5 	bl	8014a38 <__i2b>
 80142ce:	4605      	mov	r5, r0
 80142d0:	b15e      	cbz	r6, 80142ea <_dtoa_r+0x74a>
 80142d2:	9b08      	ldr	r3, [sp, #32]
 80142d4:	2b00      	cmp	r3, #0
 80142d6:	dd08      	ble.n	80142ea <_dtoa_r+0x74a>
 80142d8:	42b3      	cmp	r3, r6
 80142da:	9a08      	ldr	r2, [sp, #32]
 80142dc:	bfa8      	it	ge
 80142de:	4633      	movge	r3, r6
 80142e0:	eba8 0803 	sub.w	r8, r8, r3
 80142e4:	1af6      	subs	r6, r6, r3
 80142e6:	1ad3      	subs	r3, r2, r3
 80142e8:	9308      	str	r3, [sp, #32]
 80142ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80142ec:	b1f3      	cbz	r3, 801432c <_dtoa_r+0x78c>
 80142ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80142f0:	2b00      	cmp	r3, #0
 80142f2:	f000 80b7 	beq.w	8014464 <_dtoa_r+0x8c4>
 80142f6:	b18c      	cbz	r4, 801431c <_dtoa_r+0x77c>
 80142f8:	4629      	mov	r1, r5
 80142fa:	4622      	mov	r2, r4
 80142fc:	4658      	mov	r0, fp
 80142fe:	f000 fc5b 	bl	8014bb8 <__pow5mult>
 8014302:	464a      	mov	r2, r9
 8014304:	4601      	mov	r1, r0
 8014306:	4605      	mov	r5, r0
 8014308:	4658      	mov	r0, fp
 801430a:	f000 fbab 	bl	8014a64 <__multiply>
 801430e:	4649      	mov	r1, r9
 8014310:	9004      	str	r0, [sp, #16]
 8014312:	4658      	mov	r0, fp
 8014314:	f000 fa92 	bl	801483c <_Bfree>
 8014318:	9b04      	ldr	r3, [sp, #16]
 801431a:	4699      	mov	r9, r3
 801431c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801431e:	1b1a      	subs	r2, r3, r4
 8014320:	d004      	beq.n	801432c <_dtoa_r+0x78c>
 8014322:	4649      	mov	r1, r9
 8014324:	4658      	mov	r0, fp
 8014326:	f000 fc47 	bl	8014bb8 <__pow5mult>
 801432a:	4681      	mov	r9, r0
 801432c:	2101      	movs	r1, #1
 801432e:	4658      	mov	r0, fp
 8014330:	f000 fb82 	bl	8014a38 <__i2b>
 8014334:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014336:	4604      	mov	r4, r0
 8014338:	2b00      	cmp	r3, #0
 801433a:	f000 81cf 	beq.w	80146dc <_dtoa_r+0xb3c>
 801433e:	461a      	mov	r2, r3
 8014340:	4601      	mov	r1, r0
 8014342:	4658      	mov	r0, fp
 8014344:	f000 fc38 	bl	8014bb8 <__pow5mult>
 8014348:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801434a:	2b01      	cmp	r3, #1
 801434c:	4604      	mov	r4, r0
 801434e:	f300 8095 	bgt.w	801447c <_dtoa_r+0x8dc>
 8014352:	9b02      	ldr	r3, [sp, #8]
 8014354:	2b00      	cmp	r3, #0
 8014356:	f040 8087 	bne.w	8014468 <_dtoa_r+0x8c8>
 801435a:	9b03      	ldr	r3, [sp, #12]
 801435c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014360:	2b00      	cmp	r3, #0
 8014362:	f040 8089 	bne.w	8014478 <_dtoa_r+0x8d8>
 8014366:	9b03      	ldr	r3, [sp, #12]
 8014368:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801436c:	0d1b      	lsrs	r3, r3, #20
 801436e:	051b      	lsls	r3, r3, #20
 8014370:	b12b      	cbz	r3, 801437e <_dtoa_r+0x7de>
 8014372:	9b08      	ldr	r3, [sp, #32]
 8014374:	3301      	adds	r3, #1
 8014376:	9308      	str	r3, [sp, #32]
 8014378:	f108 0801 	add.w	r8, r8, #1
 801437c:	2301      	movs	r3, #1
 801437e:	930a      	str	r3, [sp, #40]	@ 0x28
 8014380:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014382:	2b00      	cmp	r3, #0
 8014384:	f000 81b0 	beq.w	80146e8 <_dtoa_r+0xb48>
 8014388:	6923      	ldr	r3, [r4, #16]
 801438a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801438e:	6918      	ldr	r0, [r3, #16]
 8014390:	f000 fb06 	bl	80149a0 <__hi0bits>
 8014394:	f1c0 0020 	rsb	r0, r0, #32
 8014398:	9b08      	ldr	r3, [sp, #32]
 801439a:	4418      	add	r0, r3
 801439c:	f010 001f 	ands.w	r0, r0, #31
 80143a0:	d077      	beq.n	8014492 <_dtoa_r+0x8f2>
 80143a2:	f1c0 0320 	rsb	r3, r0, #32
 80143a6:	2b04      	cmp	r3, #4
 80143a8:	dd6b      	ble.n	8014482 <_dtoa_r+0x8e2>
 80143aa:	9b08      	ldr	r3, [sp, #32]
 80143ac:	f1c0 001c 	rsb	r0, r0, #28
 80143b0:	4403      	add	r3, r0
 80143b2:	4480      	add	r8, r0
 80143b4:	4406      	add	r6, r0
 80143b6:	9308      	str	r3, [sp, #32]
 80143b8:	f1b8 0f00 	cmp.w	r8, #0
 80143bc:	dd05      	ble.n	80143ca <_dtoa_r+0x82a>
 80143be:	4649      	mov	r1, r9
 80143c0:	4642      	mov	r2, r8
 80143c2:	4658      	mov	r0, fp
 80143c4:	f000 fc52 	bl	8014c6c <__lshift>
 80143c8:	4681      	mov	r9, r0
 80143ca:	9b08      	ldr	r3, [sp, #32]
 80143cc:	2b00      	cmp	r3, #0
 80143ce:	dd05      	ble.n	80143dc <_dtoa_r+0x83c>
 80143d0:	4621      	mov	r1, r4
 80143d2:	461a      	mov	r2, r3
 80143d4:	4658      	mov	r0, fp
 80143d6:	f000 fc49 	bl	8014c6c <__lshift>
 80143da:	4604      	mov	r4, r0
 80143dc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80143de:	2b00      	cmp	r3, #0
 80143e0:	d059      	beq.n	8014496 <_dtoa_r+0x8f6>
 80143e2:	4621      	mov	r1, r4
 80143e4:	4648      	mov	r0, r9
 80143e6:	f000 fcad 	bl	8014d44 <__mcmp>
 80143ea:	2800      	cmp	r0, #0
 80143ec:	da53      	bge.n	8014496 <_dtoa_r+0x8f6>
 80143ee:	1e7b      	subs	r3, r7, #1
 80143f0:	9304      	str	r3, [sp, #16]
 80143f2:	4649      	mov	r1, r9
 80143f4:	2300      	movs	r3, #0
 80143f6:	220a      	movs	r2, #10
 80143f8:	4658      	mov	r0, fp
 80143fa:	f000 fa41 	bl	8014880 <__multadd>
 80143fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014400:	4681      	mov	r9, r0
 8014402:	2b00      	cmp	r3, #0
 8014404:	f000 8172 	beq.w	80146ec <_dtoa_r+0xb4c>
 8014408:	2300      	movs	r3, #0
 801440a:	4629      	mov	r1, r5
 801440c:	220a      	movs	r2, #10
 801440e:	4658      	mov	r0, fp
 8014410:	f000 fa36 	bl	8014880 <__multadd>
 8014414:	9b00      	ldr	r3, [sp, #0]
 8014416:	2b00      	cmp	r3, #0
 8014418:	4605      	mov	r5, r0
 801441a:	dc67      	bgt.n	80144ec <_dtoa_r+0x94c>
 801441c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801441e:	2b02      	cmp	r3, #2
 8014420:	dc41      	bgt.n	80144a6 <_dtoa_r+0x906>
 8014422:	e063      	b.n	80144ec <_dtoa_r+0x94c>
 8014424:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8014426:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801442a:	e746      	b.n	80142ba <_dtoa_r+0x71a>
 801442c:	9b07      	ldr	r3, [sp, #28]
 801442e:	1e5c      	subs	r4, r3, #1
 8014430:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014432:	42a3      	cmp	r3, r4
 8014434:	bfbf      	itttt	lt
 8014436:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8014438:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801443a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801443c:	1ae3      	sublt	r3, r4, r3
 801443e:	bfb4      	ite	lt
 8014440:	18d2      	addlt	r2, r2, r3
 8014442:	1b1c      	subge	r4, r3, r4
 8014444:	9b07      	ldr	r3, [sp, #28]
 8014446:	bfbc      	itt	lt
 8014448:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801444a:	2400      	movlt	r4, #0
 801444c:	2b00      	cmp	r3, #0
 801444e:	bfb5      	itete	lt
 8014450:	eba8 0603 	sublt.w	r6, r8, r3
 8014454:	9b07      	ldrge	r3, [sp, #28]
 8014456:	2300      	movlt	r3, #0
 8014458:	4646      	movge	r6, r8
 801445a:	e730      	b.n	80142be <_dtoa_r+0x71e>
 801445c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801445e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8014460:	4646      	mov	r6, r8
 8014462:	e735      	b.n	80142d0 <_dtoa_r+0x730>
 8014464:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014466:	e75c      	b.n	8014322 <_dtoa_r+0x782>
 8014468:	2300      	movs	r3, #0
 801446a:	e788      	b.n	801437e <_dtoa_r+0x7de>
 801446c:	3fe00000 	.word	0x3fe00000
 8014470:	40240000 	.word	0x40240000
 8014474:	40140000 	.word	0x40140000
 8014478:	9b02      	ldr	r3, [sp, #8]
 801447a:	e780      	b.n	801437e <_dtoa_r+0x7de>
 801447c:	2300      	movs	r3, #0
 801447e:	930a      	str	r3, [sp, #40]	@ 0x28
 8014480:	e782      	b.n	8014388 <_dtoa_r+0x7e8>
 8014482:	d099      	beq.n	80143b8 <_dtoa_r+0x818>
 8014484:	9a08      	ldr	r2, [sp, #32]
 8014486:	331c      	adds	r3, #28
 8014488:	441a      	add	r2, r3
 801448a:	4498      	add	r8, r3
 801448c:	441e      	add	r6, r3
 801448e:	9208      	str	r2, [sp, #32]
 8014490:	e792      	b.n	80143b8 <_dtoa_r+0x818>
 8014492:	4603      	mov	r3, r0
 8014494:	e7f6      	b.n	8014484 <_dtoa_r+0x8e4>
 8014496:	9b07      	ldr	r3, [sp, #28]
 8014498:	9704      	str	r7, [sp, #16]
 801449a:	2b00      	cmp	r3, #0
 801449c:	dc20      	bgt.n	80144e0 <_dtoa_r+0x940>
 801449e:	9300      	str	r3, [sp, #0]
 80144a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80144a2:	2b02      	cmp	r3, #2
 80144a4:	dd1e      	ble.n	80144e4 <_dtoa_r+0x944>
 80144a6:	9b00      	ldr	r3, [sp, #0]
 80144a8:	2b00      	cmp	r3, #0
 80144aa:	f47f aec0 	bne.w	801422e <_dtoa_r+0x68e>
 80144ae:	4621      	mov	r1, r4
 80144b0:	2205      	movs	r2, #5
 80144b2:	4658      	mov	r0, fp
 80144b4:	f000 f9e4 	bl	8014880 <__multadd>
 80144b8:	4601      	mov	r1, r0
 80144ba:	4604      	mov	r4, r0
 80144bc:	4648      	mov	r0, r9
 80144be:	f000 fc41 	bl	8014d44 <__mcmp>
 80144c2:	2800      	cmp	r0, #0
 80144c4:	f77f aeb3 	ble.w	801422e <_dtoa_r+0x68e>
 80144c8:	4656      	mov	r6, sl
 80144ca:	2331      	movs	r3, #49	@ 0x31
 80144cc:	f806 3b01 	strb.w	r3, [r6], #1
 80144d0:	9b04      	ldr	r3, [sp, #16]
 80144d2:	3301      	adds	r3, #1
 80144d4:	9304      	str	r3, [sp, #16]
 80144d6:	e6ae      	b.n	8014236 <_dtoa_r+0x696>
 80144d8:	9c07      	ldr	r4, [sp, #28]
 80144da:	9704      	str	r7, [sp, #16]
 80144dc:	4625      	mov	r5, r4
 80144de:	e7f3      	b.n	80144c8 <_dtoa_r+0x928>
 80144e0:	9b07      	ldr	r3, [sp, #28]
 80144e2:	9300      	str	r3, [sp, #0]
 80144e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80144e6:	2b00      	cmp	r3, #0
 80144e8:	f000 8104 	beq.w	80146f4 <_dtoa_r+0xb54>
 80144ec:	2e00      	cmp	r6, #0
 80144ee:	dd05      	ble.n	80144fc <_dtoa_r+0x95c>
 80144f0:	4629      	mov	r1, r5
 80144f2:	4632      	mov	r2, r6
 80144f4:	4658      	mov	r0, fp
 80144f6:	f000 fbb9 	bl	8014c6c <__lshift>
 80144fa:	4605      	mov	r5, r0
 80144fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80144fe:	2b00      	cmp	r3, #0
 8014500:	d05a      	beq.n	80145b8 <_dtoa_r+0xa18>
 8014502:	6869      	ldr	r1, [r5, #4]
 8014504:	4658      	mov	r0, fp
 8014506:	f000 f959 	bl	80147bc <_Balloc>
 801450a:	4606      	mov	r6, r0
 801450c:	b928      	cbnz	r0, 801451a <_dtoa_r+0x97a>
 801450e:	4b84      	ldr	r3, [pc, #528]	@ (8014720 <_dtoa_r+0xb80>)
 8014510:	4602      	mov	r2, r0
 8014512:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8014516:	f7ff bb5a 	b.w	8013bce <_dtoa_r+0x2e>
 801451a:	692a      	ldr	r2, [r5, #16]
 801451c:	3202      	adds	r2, #2
 801451e:	0092      	lsls	r2, r2, #2
 8014520:	f105 010c 	add.w	r1, r5, #12
 8014524:	300c      	adds	r0, #12
 8014526:	f7ff fa80 	bl	8013a2a <memcpy>
 801452a:	2201      	movs	r2, #1
 801452c:	4631      	mov	r1, r6
 801452e:	4658      	mov	r0, fp
 8014530:	f000 fb9c 	bl	8014c6c <__lshift>
 8014534:	f10a 0301 	add.w	r3, sl, #1
 8014538:	9307      	str	r3, [sp, #28]
 801453a:	9b00      	ldr	r3, [sp, #0]
 801453c:	4453      	add	r3, sl
 801453e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014540:	9b02      	ldr	r3, [sp, #8]
 8014542:	f003 0301 	and.w	r3, r3, #1
 8014546:	462f      	mov	r7, r5
 8014548:	930a      	str	r3, [sp, #40]	@ 0x28
 801454a:	4605      	mov	r5, r0
 801454c:	9b07      	ldr	r3, [sp, #28]
 801454e:	4621      	mov	r1, r4
 8014550:	3b01      	subs	r3, #1
 8014552:	4648      	mov	r0, r9
 8014554:	9300      	str	r3, [sp, #0]
 8014556:	f7ff fa9b 	bl	8013a90 <quorem>
 801455a:	4639      	mov	r1, r7
 801455c:	9002      	str	r0, [sp, #8]
 801455e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8014562:	4648      	mov	r0, r9
 8014564:	f000 fbee 	bl	8014d44 <__mcmp>
 8014568:	462a      	mov	r2, r5
 801456a:	9008      	str	r0, [sp, #32]
 801456c:	4621      	mov	r1, r4
 801456e:	4658      	mov	r0, fp
 8014570:	f000 fc04 	bl	8014d7c <__mdiff>
 8014574:	68c2      	ldr	r2, [r0, #12]
 8014576:	4606      	mov	r6, r0
 8014578:	bb02      	cbnz	r2, 80145bc <_dtoa_r+0xa1c>
 801457a:	4601      	mov	r1, r0
 801457c:	4648      	mov	r0, r9
 801457e:	f000 fbe1 	bl	8014d44 <__mcmp>
 8014582:	4602      	mov	r2, r0
 8014584:	4631      	mov	r1, r6
 8014586:	4658      	mov	r0, fp
 8014588:	920e      	str	r2, [sp, #56]	@ 0x38
 801458a:	f000 f957 	bl	801483c <_Bfree>
 801458e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014590:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014592:	9e07      	ldr	r6, [sp, #28]
 8014594:	ea43 0102 	orr.w	r1, r3, r2
 8014598:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801459a:	4319      	orrs	r1, r3
 801459c:	d110      	bne.n	80145c0 <_dtoa_r+0xa20>
 801459e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80145a2:	d029      	beq.n	80145f8 <_dtoa_r+0xa58>
 80145a4:	9b08      	ldr	r3, [sp, #32]
 80145a6:	2b00      	cmp	r3, #0
 80145a8:	dd02      	ble.n	80145b0 <_dtoa_r+0xa10>
 80145aa:	9b02      	ldr	r3, [sp, #8]
 80145ac:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80145b0:	9b00      	ldr	r3, [sp, #0]
 80145b2:	f883 8000 	strb.w	r8, [r3]
 80145b6:	e63f      	b.n	8014238 <_dtoa_r+0x698>
 80145b8:	4628      	mov	r0, r5
 80145ba:	e7bb      	b.n	8014534 <_dtoa_r+0x994>
 80145bc:	2201      	movs	r2, #1
 80145be:	e7e1      	b.n	8014584 <_dtoa_r+0x9e4>
 80145c0:	9b08      	ldr	r3, [sp, #32]
 80145c2:	2b00      	cmp	r3, #0
 80145c4:	db04      	blt.n	80145d0 <_dtoa_r+0xa30>
 80145c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80145c8:	430b      	orrs	r3, r1
 80145ca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80145cc:	430b      	orrs	r3, r1
 80145ce:	d120      	bne.n	8014612 <_dtoa_r+0xa72>
 80145d0:	2a00      	cmp	r2, #0
 80145d2:	dded      	ble.n	80145b0 <_dtoa_r+0xa10>
 80145d4:	4649      	mov	r1, r9
 80145d6:	2201      	movs	r2, #1
 80145d8:	4658      	mov	r0, fp
 80145da:	f000 fb47 	bl	8014c6c <__lshift>
 80145de:	4621      	mov	r1, r4
 80145e0:	4681      	mov	r9, r0
 80145e2:	f000 fbaf 	bl	8014d44 <__mcmp>
 80145e6:	2800      	cmp	r0, #0
 80145e8:	dc03      	bgt.n	80145f2 <_dtoa_r+0xa52>
 80145ea:	d1e1      	bne.n	80145b0 <_dtoa_r+0xa10>
 80145ec:	f018 0f01 	tst.w	r8, #1
 80145f0:	d0de      	beq.n	80145b0 <_dtoa_r+0xa10>
 80145f2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80145f6:	d1d8      	bne.n	80145aa <_dtoa_r+0xa0a>
 80145f8:	9a00      	ldr	r2, [sp, #0]
 80145fa:	2339      	movs	r3, #57	@ 0x39
 80145fc:	7013      	strb	r3, [r2, #0]
 80145fe:	4633      	mov	r3, r6
 8014600:	461e      	mov	r6, r3
 8014602:	3b01      	subs	r3, #1
 8014604:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8014608:	2a39      	cmp	r2, #57	@ 0x39
 801460a:	d052      	beq.n	80146b2 <_dtoa_r+0xb12>
 801460c:	3201      	adds	r2, #1
 801460e:	701a      	strb	r2, [r3, #0]
 8014610:	e612      	b.n	8014238 <_dtoa_r+0x698>
 8014612:	2a00      	cmp	r2, #0
 8014614:	dd07      	ble.n	8014626 <_dtoa_r+0xa86>
 8014616:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801461a:	d0ed      	beq.n	80145f8 <_dtoa_r+0xa58>
 801461c:	9a00      	ldr	r2, [sp, #0]
 801461e:	f108 0301 	add.w	r3, r8, #1
 8014622:	7013      	strb	r3, [r2, #0]
 8014624:	e608      	b.n	8014238 <_dtoa_r+0x698>
 8014626:	9b07      	ldr	r3, [sp, #28]
 8014628:	9a07      	ldr	r2, [sp, #28]
 801462a:	f803 8c01 	strb.w	r8, [r3, #-1]
 801462e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014630:	4293      	cmp	r3, r2
 8014632:	d028      	beq.n	8014686 <_dtoa_r+0xae6>
 8014634:	4649      	mov	r1, r9
 8014636:	2300      	movs	r3, #0
 8014638:	220a      	movs	r2, #10
 801463a:	4658      	mov	r0, fp
 801463c:	f000 f920 	bl	8014880 <__multadd>
 8014640:	42af      	cmp	r7, r5
 8014642:	4681      	mov	r9, r0
 8014644:	f04f 0300 	mov.w	r3, #0
 8014648:	f04f 020a 	mov.w	r2, #10
 801464c:	4639      	mov	r1, r7
 801464e:	4658      	mov	r0, fp
 8014650:	d107      	bne.n	8014662 <_dtoa_r+0xac2>
 8014652:	f000 f915 	bl	8014880 <__multadd>
 8014656:	4607      	mov	r7, r0
 8014658:	4605      	mov	r5, r0
 801465a:	9b07      	ldr	r3, [sp, #28]
 801465c:	3301      	adds	r3, #1
 801465e:	9307      	str	r3, [sp, #28]
 8014660:	e774      	b.n	801454c <_dtoa_r+0x9ac>
 8014662:	f000 f90d 	bl	8014880 <__multadd>
 8014666:	4629      	mov	r1, r5
 8014668:	4607      	mov	r7, r0
 801466a:	2300      	movs	r3, #0
 801466c:	220a      	movs	r2, #10
 801466e:	4658      	mov	r0, fp
 8014670:	f000 f906 	bl	8014880 <__multadd>
 8014674:	4605      	mov	r5, r0
 8014676:	e7f0      	b.n	801465a <_dtoa_r+0xaba>
 8014678:	9b00      	ldr	r3, [sp, #0]
 801467a:	2b00      	cmp	r3, #0
 801467c:	bfcc      	ite	gt
 801467e:	461e      	movgt	r6, r3
 8014680:	2601      	movle	r6, #1
 8014682:	4456      	add	r6, sl
 8014684:	2700      	movs	r7, #0
 8014686:	4649      	mov	r1, r9
 8014688:	2201      	movs	r2, #1
 801468a:	4658      	mov	r0, fp
 801468c:	f000 faee 	bl	8014c6c <__lshift>
 8014690:	4621      	mov	r1, r4
 8014692:	4681      	mov	r9, r0
 8014694:	f000 fb56 	bl	8014d44 <__mcmp>
 8014698:	2800      	cmp	r0, #0
 801469a:	dcb0      	bgt.n	80145fe <_dtoa_r+0xa5e>
 801469c:	d102      	bne.n	80146a4 <_dtoa_r+0xb04>
 801469e:	f018 0f01 	tst.w	r8, #1
 80146a2:	d1ac      	bne.n	80145fe <_dtoa_r+0xa5e>
 80146a4:	4633      	mov	r3, r6
 80146a6:	461e      	mov	r6, r3
 80146a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80146ac:	2a30      	cmp	r2, #48	@ 0x30
 80146ae:	d0fa      	beq.n	80146a6 <_dtoa_r+0xb06>
 80146b0:	e5c2      	b.n	8014238 <_dtoa_r+0x698>
 80146b2:	459a      	cmp	sl, r3
 80146b4:	d1a4      	bne.n	8014600 <_dtoa_r+0xa60>
 80146b6:	9b04      	ldr	r3, [sp, #16]
 80146b8:	3301      	adds	r3, #1
 80146ba:	9304      	str	r3, [sp, #16]
 80146bc:	2331      	movs	r3, #49	@ 0x31
 80146be:	f88a 3000 	strb.w	r3, [sl]
 80146c2:	e5b9      	b.n	8014238 <_dtoa_r+0x698>
 80146c4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80146c6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8014724 <_dtoa_r+0xb84>
 80146ca:	b11b      	cbz	r3, 80146d4 <_dtoa_r+0xb34>
 80146cc:	f10a 0308 	add.w	r3, sl, #8
 80146d0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80146d2:	6013      	str	r3, [r2, #0]
 80146d4:	4650      	mov	r0, sl
 80146d6:	b019      	add	sp, #100	@ 0x64
 80146d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80146dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80146de:	2b01      	cmp	r3, #1
 80146e0:	f77f ae37 	ble.w	8014352 <_dtoa_r+0x7b2>
 80146e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80146e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80146e8:	2001      	movs	r0, #1
 80146ea:	e655      	b.n	8014398 <_dtoa_r+0x7f8>
 80146ec:	9b00      	ldr	r3, [sp, #0]
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	f77f aed6 	ble.w	80144a0 <_dtoa_r+0x900>
 80146f4:	4656      	mov	r6, sl
 80146f6:	4621      	mov	r1, r4
 80146f8:	4648      	mov	r0, r9
 80146fa:	f7ff f9c9 	bl	8013a90 <quorem>
 80146fe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8014702:	f806 8b01 	strb.w	r8, [r6], #1
 8014706:	9b00      	ldr	r3, [sp, #0]
 8014708:	eba6 020a 	sub.w	r2, r6, sl
 801470c:	4293      	cmp	r3, r2
 801470e:	ddb3      	ble.n	8014678 <_dtoa_r+0xad8>
 8014710:	4649      	mov	r1, r9
 8014712:	2300      	movs	r3, #0
 8014714:	220a      	movs	r2, #10
 8014716:	4658      	mov	r0, fp
 8014718:	f000 f8b2 	bl	8014880 <__multadd>
 801471c:	4681      	mov	r9, r0
 801471e:	e7ea      	b.n	80146f6 <_dtoa_r+0xb56>
 8014720:	0805d7b9 	.word	0x0805d7b9
 8014724:	0805d754 	.word	0x0805d754

08014728 <_free_r>:
 8014728:	b538      	push	{r3, r4, r5, lr}
 801472a:	4605      	mov	r5, r0
 801472c:	2900      	cmp	r1, #0
 801472e:	d041      	beq.n	80147b4 <_free_r+0x8c>
 8014730:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014734:	1f0c      	subs	r4, r1, #4
 8014736:	2b00      	cmp	r3, #0
 8014738:	bfb8      	it	lt
 801473a:	18e4      	addlt	r4, r4, r3
 801473c:	f7fe f88a 	bl	8012854 <__malloc_lock>
 8014740:	4a1d      	ldr	r2, [pc, #116]	@ (80147b8 <_free_r+0x90>)
 8014742:	6813      	ldr	r3, [r2, #0]
 8014744:	b933      	cbnz	r3, 8014754 <_free_r+0x2c>
 8014746:	6063      	str	r3, [r4, #4]
 8014748:	6014      	str	r4, [r2, #0]
 801474a:	4628      	mov	r0, r5
 801474c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014750:	f7fe b886 	b.w	8012860 <__malloc_unlock>
 8014754:	42a3      	cmp	r3, r4
 8014756:	d908      	bls.n	801476a <_free_r+0x42>
 8014758:	6820      	ldr	r0, [r4, #0]
 801475a:	1821      	adds	r1, r4, r0
 801475c:	428b      	cmp	r3, r1
 801475e:	bf01      	itttt	eq
 8014760:	6819      	ldreq	r1, [r3, #0]
 8014762:	685b      	ldreq	r3, [r3, #4]
 8014764:	1809      	addeq	r1, r1, r0
 8014766:	6021      	streq	r1, [r4, #0]
 8014768:	e7ed      	b.n	8014746 <_free_r+0x1e>
 801476a:	461a      	mov	r2, r3
 801476c:	685b      	ldr	r3, [r3, #4]
 801476e:	b10b      	cbz	r3, 8014774 <_free_r+0x4c>
 8014770:	42a3      	cmp	r3, r4
 8014772:	d9fa      	bls.n	801476a <_free_r+0x42>
 8014774:	6811      	ldr	r1, [r2, #0]
 8014776:	1850      	adds	r0, r2, r1
 8014778:	42a0      	cmp	r0, r4
 801477a:	d10b      	bne.n	8014794 <_free_r+0x6c>
 801477c:	6820      	ldr	r0, [r4, #0]
 801477e:	4401      	add	r1, r0
 8014780:	1850      	adds	r0, r2, r1
 8014782:	4283      	cmp	r3, r0
 8014784:	6011      	str	r1, [r2, #0]
 8014786:	d1e0      	bne.n	801474a <_free_r+0x22>
 8014788:	6818      	ldr	r0, [r3, #0]
 801478a:	685b      	ldr	r3, [r3, #4]
 801478c:	6053      	str	r3, [r2, #4]
 801478e:	4408      	add	r0, r1
 8014790:	6010      	str	r0, [r2, #0]
 8014792:	e7da      	b.n	801474a <_free_r+0x22>
 8014794:	d902      	bls.n	801479c <_free_r+0x74>
 8014796:	230c      	movs	r3, #12
 8014798:	602b      	str	r3, [r5, #0]
 801479a:	e7d6      	b.n	801474a <_free_r+0x22>
 801479c:	6820      	ldr	r0, [r4, #0]
 801479e:	1821      	adds	r1, r4, r0
 80147a0:	428b      	cmp	r3, r1
 80147a2:	bf04      	itt	eq
 80147a4:	6819      	ldreq	r1, [r3, #0]
 80147a6:	685b      	ldreq	r3, [r3, #4]
 80147a8:	6063      	str	r3, [r4, #4]
 80147aa:	bf04      	itt	eq
 80147ac:	1809      	addeq	r1, r1, r0
 80147ae:	6021      	streq	r1, [r4, #0]
 80147b0:	6054      	str	r4, [r2, #4]
 80147b2:	e7ca      	b.n	801474a <_free_r+0x22>
 80147b4:	bd38      	pop	{r3, r4, r5, pc}
 80147b6:	bf00      	nop
 80147b8:	2000c66c 	.word	0x2000c66c

080147bc <_Balloc>:
 80147bc:	b570      	push	{r4, r5, r6, lr}
 80147be:	69c6      	ldr	r6, [r0, #28]
 80147c0:	4604      	mov	r4, r0
 80147c2:	460d      	mov	r5, r1
 80147c4:	b976      	cbnz	r6, 80147e4 <_Balloc+0x28>
 80147c6:	2010      	movs	r0, #16
 80147c8:	f7fd ff9a 	bl	8012700 <malloc>
 80147cc:	4602      	mov	r2, r0
 80147ce:	61e0      	str	r0, [r4, #28]
 80147d0:	b920      	cbnz	r0, 80147dc <_Balloc+0x20>
 80147d2:	4b18      	ldr	r3, [pc, #96]	@ (8014834 <_Balloc+0x78>)
 80147d4:	4818      	ldr	r0, [pc, #96]	@ (8014838 <_Balloc+0x7c>)
 80147d6:	216b      	movs	r1, #107	@ 0x6b
 80147d8:	f7ff f93c 	bl	8013a54 <__assert_func>
 80147dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80147e0:	6006      	str	r6, [r0, #0]
 80147e2:	60c6      	str	r6, [r0, #12]
 80147e4:	69e6      	ldr	r6, [r4, #28]
 80147e6:	68f3      	ldr	r3, [r6, #12]
 80147e8:	b183      	cbz	r3, 801480c <_Balloc+0x50>
 80147ea:	69e3      	ldr	r3, [r4, #28]
 80147ec:	68db      	ldr	r3, [r3, #12]
 80147ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80147f2:	b9b8      	cbnz	r0, 8014824 <_Balloc+0x68>
 80147f4:	2101      	movs	r1, #1
 80147f6:	fa01 f605 	lsl.w	r6, r1, r5
 80147fa:	1d72      	adds	r2, r6, #5
 80147fc:	0092      	lsls	r2, r2, #2
 80147fe:	4620      	mov	r0, r4
 8014800:	f002 f8fd 	bl	80169fe <_calloc_r>
 8014804:	b160      	cbz	r0, 8014820 <_Balloc+0x64>
 8014806:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801480a:	e00e      	b.n	801482a <_Balloc+0x6e>
 801480c:	2221      	movs	r2, #33	@ 0x21
 801480e:	2104      	movs	r1, #4
 8014810:	4620      	mov	r0, r4
 8014812:	f002 f8f4 	bl	80169fe <_calloc_r>
 8014816:	69e3      	ldr	r3, [r4, #28]
 8014818:	60f0      	str	r0, [r6, #12]
 801481a:	68db      	ldr	r3, [r3, #12]
 801481c:	2b00      	cmp	r3, #0
 801481e:	d1e4      	bne.n	80147ea <_Balloc+0x2e>
 8014820:	2000      	movs	r0, #0
 8014822:	bd70      	pop	{r4, r5, r6, pc}
 8014824:	6802      	ldr	r2, [r0, #0]
 8014826:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801482a:	2300      	movs	r3, #0
 801482c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014830:	e7f7      	b.n	8014822 <_Balloc+0x66>
 8014832:	bf00      	nop
 8014834:	0805d6a7 	.word	0x0805d6a7
 8014838:	0805d7ca 	.word	0x0805d7ca

0801483c <_Bfree>:
 801483c:	b570      	push	{r4, r5, r6, lr}
 801483e:	69c6      	ldr	r6, [r0, #28]
 8014840:	4605      	mov	r5, r0
 8014842:	460c      	mov	r4, r1
 8014844:	b976      	cbnz	r6, 8014864 <_Bfree+0x28>
 8014846:	2010      	movs	r0, #16
 8014848:	f7fd ff5a 	bl	8012700 <malloc>
 801484c:	4602      	mov	r2, r0
 801484e:	61e8      	str	r0, [r5, #28]
 8014850:	b920      	cbnz	r0, 801485c <_Bfree+0x20>
 8014852:	4b09      	ldr	r3, [pc, #36]	@ (8014878 <_Bfree+0x3c>)
 8014854:	4809      	ldr	r0, [pc, #36]	@ (801487c <_Bfree+0x40>)
 8014856:	218f      	movs	r1, #143	@ 0x8f
 8014858:	f7ff f8fc 	bl	8013a54 <__assert_func>
 801485c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014860:	6006      	str	r6, [r0, #0]
 8014862:	60c6      	str	r6, [r0, #12]
 8014864:	b13c      	cbz	r4, 8014876 <_Bfree+0x3a>
 8014866:	69eb      	ldr	r3, [r5, #28]
 8014868:	6862      	ldr	r2, [r4, #4]
 801486a:	68db      	ldr	r3, [r3, #12]
 801486c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014870:	6021      	str	r1, [r4, #0]
 8014872:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8014876:	bd70      	pop	{r4, r5, r6, pc}
 8014878:	0805d6a7 	.word	0x0805d6a7
 801487c:	0805d7ca 	.word	0x0805d7ca

08014880 <__multadd>:
 8014880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014884:	690d      	ldr	r5, [r1, #16]
 8014886:	4607      	mov	r7, r0
 8014888:	460c      	mov	r4, r1
 801488a:	461e      	mov	r6, r3
 801488c:	f101 0c14 	add.w	ip, r1, #20
 8014890:	2000      	movs	r0, #0
 8014892:	f8dc 3000 	ldr.w	r3, [ip]
 8014896:	b299      	uxth	r1, r3
 8014898:	fb02 6101 	mla	r1, r2, r1, r6
 801489c:	0c1e      	lsrs	r6, r3, #16
 801489e:	0c0b      	lsrs	r3, r1, #16
 80148a0:	fb02 3306 	mla	r3, r2, r6, r3
 80148a4:	b289      	uxth	r1, r1
 80148a6:	3001      	adds	r0, #1
 80148a8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80148ac:	4285      	cmp	r5, r0
 80148ae:	f84c 1b04 	str.w	r1, [ip], #4
 80148b2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80148b6:	dcec      	bgt.n	8014892 <__multadd+0x12>
 80148b8:	b30e      	cbz	r6, 80148fe <__multadd+0x7e>
 80148ba:	68a3      	ldr	r3, [r4, #8]
 80148bc:	42ab      	cmp	r3, r5
 80148be:	dc19      	bgt.n	80148f4 <__multadd+0x74>
 80148c0:	6861      	ldr	r1, [r4, #4]
 80148c2:	4638      	mov	r0, r7
 80148c4:	3101      	adds	r1, #1
 80148c6:	f7ff ff79 	bl	80147bc <_Balloc>
 80148ca:	4680      	mov	r8, r0
 80148cc:	b928      	cbnz	r0, 80148da <__multadd+0x5a>
 80148ce:	4602      	mov	r2, r0
 80148d0:	4b0c      	ldr	r3, [pc, #48]	@ (8014904 <__multadd+0x84>)
 80148d2:	480d      	ldr	r0, [pc, #52]	@ (8014908 <__multadd+0x88>)
 80148d4:	21ba      	movs	r1, #186	@ 0xba
 80148d6:	f7ff f8bd 	bl	8013a54 <__assert_func>
 80148da:	6922      	ldr	r2, [r4, #16]
 80148dc:	3202      	adds	r2, #2
 80148de:	f104 010c 	add.w	r1, r4, #12
 80148e2:	0092      	lsls	r2, r2, #2
 80148e4:	300c      	adds	r0, #12
 80148e6:	f7ff f8a0 	bl	8013a2a <memcpy>
 80148ea:	4621      	mov	r1, r4
 80148ec:	4638      	mov	r0, r7
 80148ee:	f7ff ffa5 	bl	801483c <_Bfree>
 80148f2:	4644      	mov	r4, r8
 80148f4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80148f8:	3501      	adds	r5, #1
 80148fa:	615e      	str	r6, [r3, #20]
 80148fc:	6125      	str	r5, [r4, #16]
 80148fe:	4620      	mov	r0, r4
 8014900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014904:	0805d7b9 	.word	0x0805d7b9
 8014908:	0805d7ca 	.word	0x0805d7ca

0801490c <__s2b>:
 801490c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014910:	460c      	mov	r4, r1
 8014912:	4615      	mov	r5, r2
 8014914:	461f      	mov	r7, r3
 8014916:	2209      	movs	r2, #9
 8014918:	3308      	adds	r3, #8
 801491a:	4606      	mov	r6, r0
 801491c:	fb93 f3f2 	sdiv	r3, r3, r2
 8014920:	2100      	movs	r1, #0
 8014922:	2201      	movs	r2, #1
 8014924:	429a      	cmp	r2, r3
 8014926:	db09      	blt.n	801493c <__s2b+0x30>
 8014928:	4630      	mov	r0, r6
 801492a:	f7ff ff47 	bl	80147bc <_Balloc>
 801492e:	b940      	cbnz	r0, 8014942 <__s2b+0x36>
 8014930:	4602      	mov	r2, r0
 8014932:	4b19      	ldr	r3, [pc, #100]	@ (8014998 <__s2b+0x8c>)
 8014934:	4819      	ldr	r0, [pc, #100]	@ (801499c <__s2b+0x90>)
 8014936:	21d3      	movs	r1, #211	@ 0xd3
 8014938:	f7ff f88c 	bl	8013a54 <__assert_func>
 801493c:	0052      	lsls	r2, r2, #1
 801493e:	3101      	adds	r1, #1
 8014940:	e7f0      	b.n	8014924 <__s2b+0x18>
 8014942:	9b08      	ldr	r3, [sp, #32]
 8014944:	6143      	str	r3, [r0, #20]
 8014946:	2d09      	cmp	r5, #9
 8014948:	f04f 0301 	mov.w	r3, #1
 801494c:	6103      	str	r3, [r0, #16]
 801494e:	dd16      	ble.n	801497e <__s2b+0x72>
 8014950:	f104 0909 	add.w	r9, r4, #9
 8014954:	46c8      	mov	r8, r9
 8014956:	442c      	add	r4, r5
 8014958:	f818 3b01 	ldrb.w	r3, [r8], #1
 801495c:	4601      	mov	r1, r0
 801495e:	3b30      	subs	r3, #48	@ 0x30
 8014960:	220a      	movs	r2, #10
 8014962:	4630      	mov	r0, r6
 8014964:	f7ff ff8c 	bl	8014880 <__multadd>
 8014968:	45a0      	cmp	r8, r4
 801496a:	d1f5      	bne.n	8014958 <__s2b+0x4c>
 801496c:	f1a5 0408 	sub.w	r4, r5, #8
 8014970:	444c      	add	r4, r9
 8014972:	1b2d      	subs	r5, r5, r4
 8014974:	1963      	adds	r3, r4, r5
 8014976:	42bb      	cmp	r3, r7
 8014978:	db04      	blt.n	8014984 <__s2b+0x78>
 801497a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801497e:	340a      	adds	r4, #10
 8014980:	2509      	movs	r5, #9
 8014982:	e7f6      	b.n	8014972 <__s2b+0x66>
 8014984:	f814 3b01 	ldrb.w	r3, [r4], #1
 8014988:	4601      	mov	r1, r0
 801498a:	3b30      	subs	r3, #48	@ 0x30
 801498c:	220a      	movs	r2, #10
 801498e:	4630      	mov	r0, r6
 8014990:	f7ff ff76 	bl	8014880 <__multadd>
 8014994:	e7ee      	b.n	8014974 <__s2b+0x68>
 8014996:	bf00      	nop
 8014998:	0805d7b9 	.word	0x0805d7b9
 801499c:	0805d7ca 	.word	0x0805d7ca

080149a0 <__hi0bits>:
 80149a0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80149a4:	4603      	mov	r3, r0
 80149a6:	bf36      	itet	cc
 80149a8:	0403      	lslcc	r3, r0, #16
 80149aa:	2000      	movcs	r0, #0
 80149ac:	2010      	movcc	r0, #16
 80149ae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80149b2:	bf3c      	itt	cc
 80149b4:	021b      	lslcc	r3, r3, #8
 80149b6:	3008      	addcc	r0, #8
 80149b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80149bc:	bf3c      	itt	cc
 80149be:	011b      	lslcc	r3, r3, #4
 80149c0:	3004      	addcc	r0, #4
 80149c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80149c6:	bf3c      	itt	cc
 80149c8:	009b      	lslcc	r3, r3, #2
 80149ca:	3002      	addcc	r0, #2
 80149cc:	2b00      	cmp	r3, #0
 80149ce:	db05      	blt.n	80149dc <__hi0bits+0x3c>
 80149d0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80149d4:	f100 0001 	add.w	r0, r0, #1
 80149d8:	bf08      	it	eq
 80149da:	2020      	moveq	r0, #32
 80149dc:	4770      	bx	lr

080149de <__lo0bits>:
 80149de:	6803      	ldr	r3, [r0, #0]
 80149e0:	4602      	mov	r2, r0
 80149e2:	f013 0007 	ands.w	r0, r3, #7
 80149e6:	d00b      	beq.n	8014a00 <__lo0bits+0x22>
 80149e8:	07d9      	lsls	r1, r3, #31
 80149ea:	d421      	bmi.n	8014a30 <__lo0bits+0x52>
 80149ec:	0798      	lsls	r0, r3, #30
 80149ee:	bf49      	itett	mi
 80149f0:	085b      	lsrmi	r3, r3, #1
 80149f2:	089b      	lsrpl	r3, r3, #2
 80149f4:	2001      	movmi	r0, #1
 80149f6:	6013      	strmi	r3, [r2, #0]
 80149f8:	bf5c      	itt	pl
 80149fa:	6013      	strpl	r3, [r2, #0]
 80149fc:	2002      	movpl	r0, #2
 80149fe:	4770      	bx	lr
 8014a00:	b299      	uxth	r1, r3
 8014a02:	b909      	cbnz	r1, 8014a08 <__lo0bits+0x2a>
 8014a04:	0c1b      	lsrs	r3, r3, #16
 8014a06:	2010      	movs	r0, #16
 8014a08:	b2d9      	uxtb	r1, r3
 8014a0a:	b909      	cbnz	r1, 8014a10 <__lo0bits+0x32>
 8014a0c:	3008      	adds	r0, #8
 8014a0e:	0a1b      	lsrs	r3, r3, #8
 8014a10:	0719      	lsls	r1, r3, #28
 8014a12:	bf04      	itt	eq
 8014a14:	091b      	lsreq	r3, r3, #4
 8014a16:	3004      	addeq	r0, #4
 8014a18:	0799      	lsls	r1, r3, #30
 8014a1a:	bf04      	itt	eq
 8014a1c:	089b      	lsreq	r3, r3, #2
 8014a1e:	3002      	addeq	r0, #2
 8014a20:	07d9      	lsls	r1, r3, #31
 8014a22:	d403      	bmi.n	8014a2c <__lo0bits+0x4e>
 8014a24:	085b      	lsrs	r3, r3, #1
 8014a26:	f100 0001 	add.w	r0, r0, #1
 8014a2a:	d003      	beq.n	8014a34 <__lo0bits+0x56>
 8014a2c:	6013      	str	r3, [r2, #0]
 8014a2e:	4770      	bx	lr
 8014a30:	2000      	movs	r0, #0
 8014a32:	4770      	bx	lr
 8014a34:	2020      	movs	r0, #32
 8014a36:	4770      	bx	lr

08014a38 <__i2b>:
 8014a38:	b510      	push	{r4, lr}
 8014a3a:	460c      	mov	r4, r1
 8014a3c:	2101      	movs	r1, #1
 8014a3e:	f7ff febd 	bl	80147bc <_Balloc>
 8014a42:	4602      	mov	r2, r0
 8014a44:	b928      	cbnz	r0, 8014a52 <__i2b+0x1a>
 8014a46:	4b05      	ldr	r3, [pc, #20]	@ (8014a5c <__i2b+0x24>)
 8014a48:	4805      	ldr	r0, [pc, #20]	@ (8014a60 <__i2b+0x28>)
 8014a4a:	f240 1145 	movw	r1, #325	@ 0x145
 8014a4e:	f7ff f801 	bl	8013a54 <__assert_func>
 8014a52:	2301      	movs	r3, #1
 8014a54:	6144      	str	r4, [r0, #20]
 8014a56:	6103      	str	r3, [r0, #16]
 8014a58:	bd10      	pop	{r4, pc}
 8014a5a:	bf00      	nop
 8014a5c:	0805d7b9 	.word	0x0805d7b9
 8014a60:	0805d7ca 	.word	0x0805d7ca

08014a64 <__multiply>:
 8014a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a68:	4614      	mov	r4, r2
 8014a6a:	690a      	ldr	r2, [r1, #16]
 8014a6c:	6923      	ldr	r3, [r4, #16]
 8014a6e:	429a      	cmp	r2, r3
 8014a70:	bfa8      	it	ge
 8014a72:	4623      	movge	r3, r4
 8014a74:	460f      	mov	r7, r1
 8014a76:	bfa4      	itt	ge
 8014a78:	460c      	movge	r4, r1
 8014a7a:	461f      	movge	r7, r3
 8014a7c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8014a80:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8014a84:	68a3      	ldr	r3, [r4, #8]
 8014a86:	6861      	ldr	r1, [r4, #4]
 8014a88:	eb0a 0609 	add.w	r6, sl, r9
 8014a8c:	42b3      	cmp	r3, r6
 8014a8e:	b085      	sub	sp, #20
 8014a90:	bfb8      	it	lt
 8014a92:	3101      	addlt	r1, #1
 8014a94:	f7ff fe92 	bl	80147bc <_Balloc>
 8014a98:	b930      	cbnz	r0, 8014aa8 <__multiply+0x44>
 8014a9a:	4602      	mov	r2, r0
 8014a9c:	4b44      	ldr	r3, [pc, #272]	@ (8014bb0 <__multiply+0x14c>)
 8014a9e:	4845      	ldr	r0, [pc, #276]	@ (8014bb4 <__multiply+0x150>)
 8014aa0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8014aa4:	f7fe ffd6 	bl	8013a54 <__assert_func>
 8014aa8:	f100 0514 	add.w	r5, r0, #20
 8014aac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8014ab0:	462b      	mov	r3, r5
 8014ab2:	2200      	movs	r2, #0
 8014ab4:	4543      	cmp	r3, r8
 8014ab6:	d321      	bcc.n	8014afc <__multiply+0x98>
 8014ab8:	f107 0114 	add.w	r1, r7, #20
 8014abc:	f104 0214 	add.w	r2, r4, #20
 8014ac0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8014ac4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8014ac8:	9302      	str	r3, [sp, #8]
 8014aca:	1b13      	subs	r3, r2, r4
 8014acc:	3b15      	subs	r3, #21
 8014ace:	f023 0303 	bic.w	r3, r3, #3
 8014ad2:	3304      	adds	r3, #4
 8014ad4:	f104 0715 	add.w	r7, r4, #21
 8014ad8:	42ba      	cmp	r2, r7
 8014ada:	bf38      	it	cc
 8014adc:	2304      	movcc	r3, #4
 8014ade:	9301      	str	r3, [sp, #4]
 8014ae0:	9b02      	ldr	r3, [sp, #8]
 8014ae2:	9103      	str	r1, [sp, #12]
 8014ae4:	428b      	cmp	r3, r1
 8014ae6:	d80c      	bhi.n	8014b02 <__multiply+0x9e>
 8014ae8:	2e00      	cmp	r6, #0
 8014aea:	dd03      	ble.n	8014af4 <__multiply+0x90>
 8014aec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8014af0:	2b00      	cmp	r3, #0
 8014af2:	d05b      	beq.n	8014bac <__multiply+0x148>
 8014af4:	6106      	str	r6, [r0, #16]
 8014af6:	b005      	add	sp, #20
 8014af8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014afc:	f843 2b04 	str.w	r2, [r3], #4
 8014b00:	e7d8      	b.n	8014ab4 <__multiply+0x50>
 8014b02:	f8b1 a000 	ldrh.w	sl, [r1]
 8014b06:	f1ba 0f00 	cmp.w	sl, #0
 8014b0a:	d024      	beq.n	8014b56 <__multiply+0xf2>
 8014b0c:	f104 0e14 	add.w	lr, r4, #20
 8014b10:	46a9      	mov	r9, r5
 8014b12:	f04f 0c00 	mov.w	ip, #0
 8014b16:	f85e 7b04 	ldr.w	r7, [lr], #4
 8014b1a:	f8d9 3000 	ldr.w	r3, [r9]
 8014b1e:	fa1f fb87 	uxth.w	fp, r7
 8014b22:	b29b      	uxth	r3, r3
 8014b24:	fb0a 330b 	mla	r3, sl, fp, r3
 8014b28:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8014b2c:	f8d9 7000 	ldr.w	r7, [r9]
 8014b30:	4463      	add	r3, ip
 8014b32:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8014b36:	fb0a c70b 	mla	r7, sl, fp, ip
 8014b3a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8014b3e:	b29b      	uxth	r3, r3
 8014b40:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8014b44:	4572      	cmp	r2, lr
 8014b46:	f849 3b04 	str.w	r3, [r9], #4
 8014b4a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8014b4e:	d8e2      	bhi.n	8014b16 <__multiply+0xb2>
 8014b50:	9b01      	ldr	r3, [sp, #4]
 8014b52:	f845 c003 	str.w	ip, [r5, r3]
 8014b56:	9b03      	ldr	r3, [sp, #12]
 8014b58:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8014b5c:	3104      	adds	r1, #4
 8014b5e:	f1b9 0f00 	cmp.w	r9, #0
 8014b62:	d021      	beq.n	8014ba8 <__multiply+0x144>
 8014b64:	682b      	ldr	r3, [r5, #0]
 8014b66:	f104 0c14 	add.w	ip, r4, #20
 8014b6a:	46ae      	mov	lr, r5
 8014b6c:	f04f 0a00 	mov.w	sl, #0
 8014b70:	f8bc b000 	ldrh.w	fp, [ip]
 8014b74:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8014b78:	fb09 770b 	mla	r7, r9, fp, r7
 8014b7c:	4457      	add	r7, sl
 8014b7e:	b29b      	uxth	r3, r3
 8014b80:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8014b84:	f84e 3b04 	str.w	r3, [lr], #4
 8014b88:	f85c 3b04 	ldr.w	r3, [ip], #4
 8014b8c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014b90:	f8be 3000 	ldrh.w	r3, [lr]
 8014b94:	fb09 330a 	mla	r3, r9, sl, r3
 8014b98:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8014b9c:	4562      	cmp	r2, ip
 8014b9e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014ba2:	d8e5      	bhi.n	8014b70 <__multiply+0x10c>
 8014ba4:	9f01      	ldr	r7, [sp, #4]
 8014ba6:	51eb      	str	r3, [r5, r7]
 8014ba8:	3504      	adds	r5, #4
 8014baa:	e799      	b.n	8014ae0 <__multiply+0x7c>
 8014bac:	3e01      	subs	r6, #1
 8014bae:	e79b      	b.n	8014ae8 <__multiply+0x84>
 8014bb0:	0805d7b9 	.word	0x0805d7b9
 8014bb4:	0805d7ca 	.word	0x0805d7ca

08014bb8 <__pow5mult>:
 8014bb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014bbc:	4615      	mov	r5, r2
 8014bbe:	f012 0203 	ands.w	r2, r2, #3
 8014bc2:	4607      	mov	r7, r0
 8014bc4:	460e      	mov	r6, r1
 8014bc6:	d007      	beq.n	8014bd8 <__pow5mult+0x20>
 8014bc8:	4c25      	ldr	r4, [pc, #148]	@ (8014c60 <__pow5mult+0xa8>)
 8014bca:	3a01      	subs	r2, #1
 8014bcc:	2300      	movs	r3, #0
 8014bce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014bd2:	f7ff fe55 	bl	8014880 <__multadd>
 8014bd6:	4606      	mov	r6, r0
 8014bd8:	10ad      	asrs	r5, r5, #2
 8014bda:	d03d      	beq.n	8014c58 <__pow5mult+0xa0>
 8014bdc:	69fc      	ldr	r4, [r7, #28]
 8014bde:	b97c      	cbnz	r4, 8014c00 <__pow5mult+0x48>
 8014be0:	2010      	movs	r0, #16
 8014be2:	f7fd fd8d 	bl	8012700 <malloc>
 8014be6:	4602      	mov	r2, r0
 8014be8:	61f8      	str	r0, [r7, #28]
 8014bea:	b928      	cbnz	r0, 8014bf8 <__pow5mult+0x40>
 8014bec:	4b1d      	ldr	r3, [pc, #116]	@ (8014c64 <__pow5mult+0xac>)
 8014bee:	481e      	ldr	r0, [pc, #120]	@ (8014c68 <__pow5mult+0xb0>)
 8014bf0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8014bf4:	f7fe ff2e 	bl	8013a54 <__assert_func>
 8014bf8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014bfc:	6004      	str	r4, [r0, #0]
 8014bfe:	60c4      	str	r4, [r0, #12]
 8014c00:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8014c04:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014c08:	b94c      	cbnz	r4, 8014c1e <__pow5mult+0x66>
 8014c0a:	f240 2171 	movw	r1, #625	@ 0x271
 8014c0e:	4638      	mov	r0, r7
 8014c10:	f7ff ff12 	bl	8014a38 <__i2b>
 8014c14:	2300      	movs	r3, #0
 8014c16:	f8c8 0008 	str.w	r0, [r8, #8]
 8014c1a:	4604      	mov	r4, r0
 8014c1c:	6003      	str	r3, [r0, #0]
 8014c1e:	f04f 0900 	mov.w	r9, #0
 8014c22:	07eb      	lsls	r3, r5, #31
 8014c24:	d50a      	bpl.n	8014c3c <__pow5mult+0x84>
 8014c26:	4631      	mov	r1, r6
 8014c28:	4622      	mov	r2, r4
 8014c2a:	4638      	mov	r0, r7
 8014c2c:	f7ff ff1a 	bl	8014a64 <__multiply>
 8014c30:	4631      	mov	r1, r6
 8014c32:	4680      	mov	r8, r0
 8014c34:	4638      	mov	r0, r7
 8014c36:	f7ff fe01 	bl	801483c <_Bfree>
 8014c3a:	4646      	mov	r6, r8
 8014c3c:	106d      	asrs	r5, r5, #1
 8014c3e:	d00b      	beq.n	8014c58 <__pow5mult+0xa0>
 8014c40:	6820      	ldr	r0, [r4, #0]
 8014c42:	b938      	cbnz	r0, 8014c54 <__pow5mult+0x9c>
 8014c44:	4622      	mov	r2, r4
 8014c46:	4621      	mov	r1, r4
 8014c48:	4638      	mov	r0, r7
 8014c4a:	f7ff ff0b 	bl	8014a64 <__multiply>
 8014c4e:	6020      	str	r0, [r4, #0]
 8014c50:	f8c0 9000 	str.w	r9, [r0]
 8014c54:	4604      	mov	r4, r0
 8014c56:	e7e4      	b.n	8014c22 <__pow5mult+0x6a>
 8014c58:	4630      	mov	r0, r6
 8014c5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014c5e:	bf00      	nop
 8014c60:	0805d824 	.word	0x0805d824
 8014c64:	0805d6a7 	.word	0x0805d6a7
 8014c68:	0805d7ca 	.word	0x0805d7ca

08014c6c <__lshift>:
 8014c6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014c70:	460c      	mov	r4, r1
 8014c72:	6849      	ldr	r1, [r1, #4]
 8014c74:	6923      	ldr	r3, [r4, #16]
 8014c76:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8014c7a:	68a3      	ldr	r3, [r4, #8]
 8014c7c:	4607      	mov	r7, r0
 8014c7e:	4691      	mov	r9, r2
 8014c80:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014c84:	f108 0601 	add.w	r6, r8, #1
 8014c88:	42b3      	cmp	r3, r6
 8014c8a:	db0b      	blt.n	8014ca4 <__lshift+0x38>
 8014c8c:	4638      	mov	r0, r7
 8014c8e:	f7ff fd95 	bl	80147bc <_Balloc>
 8014c92:	4605      	mov	r5, r0
 8014c94:	b948      	cbnz	r0, 8014caa <__lshift+0x3e>
 8014c96:	4602      	mov	r2, r0
 8014c98:	4b28      	ldr	r3, [pc, #160]	@ (8014d3c <__lshift+0xd0>)
 8014c9a:	4829      	ldr	r0, [pc, #164]	@ (8014d40 <__lshift+0xd4>)
 8014c9c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8014ca0:	f7fe fed8 	bl	8013a54 <__assert_func>
 8014ca4:	3101      	adds	r1, #1
 8014ca6:	005b      	lsls	r3, r3, #1
 8014ca8:	e7ee      	b.n	8014c88 <__lshift+0x1c>
 8014caa:	2300      	movs	r3, #0
 8014cac:	f100 0114 	add.w	r1, r0, #20
 8014cb0:	f100 0210 	add.w	r2, r0, #16
 8014cb4:	4618      	mov	r0, r3
 8014cb6:	4553      	cmp	r3, sl
 8014cb8:	db33      	blt.n	8014d22 <__lshift+0xb6>
 8014cba:	6920      	ldr	r0, [r4, #16]
 8014cbc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014cc0:	f104 0314 	add.w	r3, r4, #20
 8014cc4:	f019 091f 	ands.w	r9, r9, #31
 8014cc8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014ccc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014cd0:	d02b      	beq.n	8014d2a <__lshift+0xbe>
 8014cd2:	f1c9 0e20 	rsb	lr, r9, #32
 8014cd6:	468a      	mov	sl, r1
 8014cd8:	2200      	movs	r2, #0
 8014cda:	6818      	ldr	r0, [r3, #0]
 8014cdc:	fa00 f009 	lsl.w	r0, r0, r9
 8014ce0:	4310      	orrs	r0, r2
 8014ce2:	f84a 0b04 	str.w	r0, [sl], #4
 8014ce6:	f853 2b04 	ldr.w	r2, [r3], #4
 8014cea:	459c      	cmp	ip, r3
 8014cec:	fa22 f20e 	lsr.w	r2, r2, lr
 8014cf0:	d8f3      	bhi.n	8014cda <__lshift+0x6e>
 8014cf2:	ebac 0304 	sub.w	r3, ip, r4
 8014cf6:	3b15      	subs	r3, #21
 8014cf8:	f023 0303 	bic.w	r3, r3, #3
 8014cfc:	3304      	adds	r3, #4
 8014cfe:	f104 0015 	add.w	r0, r4, #21
 8014d02:	4584      	cmp	ip, r0
 8014d04:	bf38      	it	cc
 8014d06:	2304      	movcc	r3, #4
 8014d08:	50ca      	str	r2, [r1, r3]
 8014d0a:	b10a      	cbz	r2, 8014d10 <__lshift+0xa4>
 8014d0c:	f108 0602 	add.w	r6, r8, #2
 8014d10:	3e01      	subs	r6, #1
 8014d12:	4638      	mov	r0, r7
 8014d14:	612e      	str	r6, [r5, #16]
 8014d16:	4621      	mov	r1, r4
 8014d18:	f7ff fd90 	bl	801483c <_Bfree>
 8014d1c:	4628      	mov	r0, r5
 8014d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014d22:	f842 0f04 	str.w	r0, [r2, #4]!
 8014d26:	3301      	adds	r3, #1
 8014d28:	e7c5      	b.n	8014cb6 <__lshift+0x4a>
 8014d2a:	3904      	subs	r1, #4
 8014d2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8014d30:	f841 2f04 	str.w	r2, [r1, #4]!
 8014d34:	459c      	cmp	ip, r3
 8014d36:	d8f9      	bhi.n	8014d2c <__lshift+0xc0>
 8014d38:	e7ea      	b.n	8014d10 <__lshift+0xa4>
 8014d3a:	bf00      	nop
 8014d3c:	0805d7b9 	.word	0x0805d7b9
 8014d40:	0805d7ca 	.word	0x0805d7ca

08014d44 <__mcmp>:
 8014d44:	690a      	ldr	r2, [r1, #16]
 8014d46:	4603      	mov	r3, r0
 8014d48:	6900      	ldr	r0, [r0, #16]
 8014d4a:	1a80      	subs	r0, r0, r2
 8014d4c:	b530      	push	{r4, r5, lr}
 8014d4e:	d10e      	bne.n	8014d6e <__mcmp+0x2a>
 8014d50:	3314      	adds	r3, #20
 8014d52:	3114      	adds	r1, #20
 8014d54:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8014d58:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8014d5c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8014d60:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8014d64:	4295      	cmp	r5, r2
 8014d66:	d003      	beq.n	8014d70 <__mcmp+0x2c>
 8014d68:	d205      	bcs.n	8014d76 <__mcmp+0x32>
 8014d6a:	f04f 30ff 	mov.w	r0, #4294967295
 8014d6e:	bd30      	pop	{r4, r5, pc}
 8014d70:	42a3      	cmp	r3, r4
 8014d72:	d3f3      	bcc.n	8014d5c <__mcmp+0x18>
 8014d74:	e7fb      	b.n	8014d6e <__mcmp+0x2a>
 8014d76:	2001      	movs	r0, #1
 8014d78:	e7f9      	b.n	8014d6e <__mcmp+0x2a>
	...

08014d7c <__mdiff>:
 8014d7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d80:	4689      	mov	r9, r1
 8014d82:	4606      	mov	r6, r0
 8014d84:	4611      	mov	r1, r2
 8014d86:	4648      	mov	r0, r9
 8014d88:	4614      	mov	r4, r2
 8014d8a:	f7ff ffdb 	bl	8014d44 <__mcmp>
 8014d8e:	1e05      	subs	r5, r0, #0
 8014d90:	d112      	bne.n	8014db8 <__mdiff+0x3c>
 8014d92:	4629      	mov	r1, r5
 8014d94:	4630      	mov	r0, r6
 8014d96:	f7ff fd11 	bl	80147bc <_Balloc>
 8014d9a:	4602      	mov	r2, r0
 8014d9c:	b928      	cbnz	r0, 8014daa <__mdiff+0x2e>
 8014d9e:	4b3f      	ldr	r3, [pc, #252]	@ (8014e9c <__mdiff+0x120>)
 8014da0:	f240 2137 	movw	r1, #567	@ 0x237
 8014da4:	483e      	ldr	r0, [pc, #248]	@ (8014ea0 <__mdiff+0x124>)
 8014da6:	f7fe fe55 	bl	8013a54 <__assert_func>
 8014daa:	2301      	movs	r3, #1
 8014dac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014db0:	4610      	mov	r0, r2
 8014db2:	b003      	add	sp, #12
 8014db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014db8:	bfbc      	itt	lt
 8014dba:	464b      	movlt	r3, r9
 8014dbc:	46a1      	movlt	r9, r4
 8014dbe:	4630      	mov	r0, r6
 8014dc0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8014dc4:	bfba      	itte	lt
 8014dc6:	461c      	movlt	r4, r3
 8014dc8:	2501      	movlt	r5, #1
 8014dca:	2500      	movge	r5, #0
 8014dcc:	f7ff fcf6 	bl	80147bc <_Balloc>
 8014dd0:	4602      	mov	r2, r0
 8014dd2:	b918      	cbnz	r0, 8014ddc <__mdiff+0x60>
 8014dd4:	4b31      	ldr	r3, [pc, #196]	@ (8014e9c <__mdiff+0x120>)
 8014dd6:	f240 2145 	movw	r1, #581	@ 0x245
 8014dda:	e7e3      	b.n	8014da4 <__mdiff+0x28>
 8014ddc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8014de0:	6926      	ldr	r6, [r4, #16]
 8014de2:	60c5      	str	r5, [r0, #12]
 8014de4:	f109 0310 	add.w	r3, r9, #16
 8014de8:	f109 0514 	add.w	r5, r9, #20
 8014dec:	f104 0e14 	add.w	lr, r4, #20
 8014df0:	f100 0b14 	add.w	fp, r0, #20
 8014df4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8014df8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8014dfc:	9301      	str	r3, [sp, #4]
 8014dfe:	46d9      	mov	r9, fp
 8014e00:	f04f 0c00 	mov.w	ip, #0
 8014e04:	9b01      	ldr	r3, [sp, #4]
 8014e06:	f85e 0b04 	ldr.w	r0, [lr], #4
 8014e0a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8014e0e:	9301      	str	r3, [sp, #4]
 8014e10:	fa1f f38a 	uxth.w	r3, sl
 8014e14:	4619      	mov	r1, r3
 8014e16:	b283      	uxth	r3, r0
 8014e18:	1acb      	subs	r3, r1, r3
 8014e1a:	0c00      	lsrs	r0, r0, #16
 8014e1c:	4463      	add	r3, ip
 8014e1e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8014e22:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8014e26:	b29b      	uxth	r3, r3
 8014e28:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8014e2c:	4576      	cmp	r6, lr
 8014e2e:	f849 3b04 	str.w	r3, [r9], #4
 8014e32:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8014e36:	d8e5      	bhi.n	8014e04 <__mdiff+0x88>
 8014e38:	1b33      	subs	r3, r6, r4
 8014e3a:	3b15      	subs	r3, #21
 8014e3c:	f023 0303 	bic.w	r3, r3, #3
 8014e40:	3415      	adds	r4, #21
 8014e42:	3304      	adds	r3, #4
 8014e44:	42a6      	cmp	r6, r4
 8014e46:	bf38      	it	cc
 8014e48:	2304      	movcc	r3, #4
 8014e4a:	441d      	add	r5, r3
 8014e4c:	445b      	add	r3, fp
 8014e4e:	461e      	mov	r6, r3
 8014e50:	462c      	mov	r4, r5
 8014e52:	4544      	cmp	r4, r8
 8014e54:	d30e      	bcc.n	8014e74 <__mdiff+0xf8>
 8014e56:	f108 0103 	add.w	r1, r8, #3
 8014e5a:	1b49      	subs	r1, r1, r5
 8014e5c:	f021 0103 	bic.w	r1, r1, #3
 8014e60:	3d03      	subs	r5, #3
 8014e62:	45a8      	cmp	r8, r5
 8014e64:	bf38      	it	cc
 8014e66:	2100      	movcc	r1, #0
 8014e68:	440b      	add	r3, r1
 8014e6a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014e6e:	b191      	cbz	r1, 8014e96 <__mdiff+0x11a>
 8014e70:	6117      	str	r7, [r2, #16]
 8014e72:	e79d      	b.n	8014db0 <__mdiff+0x34>
 8014e74:	f854 1b04 	ldr.w	r1, [r4], #4
 8014e78:	46e6      	mov	lr, ip
 8014e7a:	0c08      	lsrs	r0, r1, #16
 8014e7c:	fa1c fc81 	uxtah	ip, ip, r1
 8014e80:	4471      	add	r1, lr
 8014e82:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8014e86:	b289      	uxth	r1, r1
 8014e88:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8014e8c:	f846 1b04 	str.w	r1, [r6], #4
 8014e90:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8014e94:	e7dd      	b.n	8014e52 <__mdiff+0xd6>
 8014e96:	3f01      	subs	r7, #1
 8014e98:	e7e7      	b.n	8014e6a <__mdiff+0xee>
 8014e9a:	bf00      	nop
 8014e9c:	0805d7b9 	.word	0x0805d7b9
 8014ea0:	0805d7ca 	.word	0x0805d7ca

08014ea4 <__ulp>:
 8014ea4:	b082      	sub	sp, #8
 8014ea6:	ed8d 0b00 	vstr	d0, [sp]
 8014eaa:	9a01      	ldr	r2, [sp, #4]
 8014eac:	4b0f      	ldr	r3, [pc, #60]	@ (8014eec <__ulp+0x48>)
 8014eae:	4013      	ands	r3, r2
 8014eb0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8014eb4:	2b00      	cmp	r3, #0
 8014eb6:	dc08      	bgt.n	8014eca <__ulp+0x26>
 8014eb8:	425b      	negs	r3, r3
 8014eba:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8014ebe:	ea4f 5223 	mov.w	r2, r3, asr #20
 8014ec2:	da04      	bge.n	8014ece <__ulp+0x2a>
 8014ec4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8014ec8:	4113      	asrs	r3, r2
 8014eca:	2200      	movs	r2, #0
 8014ecc:	e008      	b.n	8014ee0 <__ulp+0x3c>
 8014ece:	f1a2 0314 	sub.w	r3, r2, #20
 8014ed2:	2b1e      	cmp	r3, #30
 8014ed4:	bfda      	itte	le
 8014ed6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8014eda:	40da      	lsrle	r2, r3
 8014edc:	2201      	movgt	r2, #1
 8014ede:	2300      	movs	r3, #0
 8014ee0:	4619      	mov	r1, r3
 8014ee2:	4610      	mov	r0, r2
 8014ee4:	ec41 0b10 	vmov	d0, r0, r1
 8014ee8:	b002      	add	sp, #8
 8014eea:	4770      	bx	lr
 8014eec:	7ff00000 	.word	0x7ff00000

08014ef0 <__b2d>:
 8014ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ef4:	6906      	ldr	r6, [r0, #16]
 8014ef6:	f100 0814 	add.w	r8, r0, #20
 8014efa:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8014efe:	1f37      	subs	r7, r6, #4
 8014f00:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8014f04:	4610      	mov	r0, r2
 8014f06:	f7ff fd4b 	bl	80149a0 <__hi0bits>
 8014f0a:	f1c0 0320 	rsb	r3, r0, #32
 8014f0e:	280a      	cmp	r0, #10
 8014f10:	600b      	str	r3, [r1, #0]
 8014f12:	491b      	ldr	r1, [pc, #108]	@ (8014f80 <__b2d+0x90>)
 8014f14:	dc15      	bgt.n	8014f42 <__b2d+0x52>
 8014f16:	f1c0 0c0b 	rsb	ip, r0, #11
 8014f1a:	fa22 f30c 	lsr.w	r3, r2, ip
 8014f1e:	45b8      	cmp	r8, r7
 8014f20:	ea43 0501 	orr.w	r5, r3, r1
 8014f24:	bf34      	ite	cc
 8014f26:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8014f2a:	2300      	movcs	r3, #0
 8014f2c:	3015      	adds	r0, #21
 8014f2e:	fa02 f000 	lsl.w	r0, r2, r0
 8014f32:	fa23 f30c 	lsr.w	r3, r3, ip
 8014f36:	4303      	orrs	r3, r0
 8014f38:	461c      	mov	r4, r3
 8014f3a:	ec45 4b10 	vmov	d0, r4, r5
 8014f3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f42:	45b8      	cmp	r8, r7
 8014f44:	bf3a      	itte	cc
 8014f46:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8014f4a:	f1a6 0708 	subcc.w	r7, r6, #8
 8014f4e:	2300      	movcs	r3, #0
 8014f50:	380b      	subs	r0, #11
 8014f52:	d012      	beq.n	8014f7a <__b2d+0x8a>
 8014f54:	f1c0 0120 	rsb	r1, r0, #32
 8014f58:	fa23 f401 	lsr.w	r4, r3, r1
 8014f5c:	4082      	lsls	r2, r0
 8014f5e:	4322      	orrs	r2, r4
 8014f60:	4547      	cmp	r7, r8
 8014f62:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8014f66:	bf8c      	ite	hi
 8014f68:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8014f6c:	2200      	movls	r2, #0
 8014f6e:	4083      	lsls	r3, r0
 8014f70:	40ca      	lsrs	r2, r1
 8014f72:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8014f76:	4313      	orrs	r3, r2
 8014f78:	e7de      	b.n	8014f38 <__b2d+0x48>
 8014f7a:	ea42 0501 	orr.w	r5, r2, r1
 8014f7e:	e7db      	b.n	8014f38 <__b2d+0x48>
 8014f80:	3ff00000 	.word	0x3ff00000

08014f84 <__d2b>:
 8014f84:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014f88:	460f      	mov	r7, r1
 8014f8a:	2101      	movs	r1, #1
 8014f8c:	ec59 8b10 	vmov	r8, r9, d0
 8014f90:	4616      	mov	r6, r2
 8014f92:	f7ff fc13 	bl	80147bc <_Balloc>
 8014f96:	4604      	mov	r4, r0
 8014f98:	b930      	cbnz	r0, 8014fa8 <__d2b+0x24>
 8014f9a:	4602      	mov	r2, r0
 8014f9c:	4b23      	ldr	r3, [pc, #140]	@ (801502c <__d2b+0xa8>)
 8014f9e:	4824      	ldr	r0, [pc, #144]	@ (8015030 <__d2b+0xac>)
 8014fa0:	f240 310f 	movw	r1, #783	@ 0x30f
 8014fa4:	f7fe fd56 	bl	8013a54 <__assert_func>
 8014fa8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8014fac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014fb0:	b10d      	cbz	r5, 8014fb6 <__d2b+0x32>
 8014fb2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8014fb6:	9301      	str	r3, [sp, #4]
 8014fb8:	f1b8 0300 	subs.w	r3, r8, #0
 8014fbc:	d023      	beq.n	8015006 <__d2b+0x82>
 8014fbe:	4668      	mov	r0, sp
 8014fc0:	9300      	str	r3, [sp, #0]
 8014fc2:	f7ff fd0c 	bl	80149de <__lo0bits>
 8014fc6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8014fca:	b1d0      	cbz	r0, 8015002 <__d2b+0x7e>
 8014fcc:	f1c0 0320 	rsb	r3, r0, #32
 8014fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8014fd4:	430b      	orrs	r3, r1
 8014fd6:	40c2      	lsrs	r2, r0
 8014fd8:	6163      	str	r3, [r4, #20]
 8014fda:	9201      	str	r2, [sp, #4]
 8014fdc:	9b01      	ldr	r3, [sp, #4]
 8014fde:	61a3      	str	r3, [r4, #24]
 8014fe0:	2b00      	cmp	r3, #0
 8014fe2:	bf0c      	ite	eq
 8014fe4:	2201      	moveq	r2, #1
 8014fe6:	2202      	movne	r2, #2
 8014fe8:	6122      	str	r2, [r4, #16]
 8014fea:	b1a5      	cbz	r5, 8015016 <__d2b+0x92>
 8014fec:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8014ff0:	4405      	add	r5, r0
 8014ff2:	603d      	str	r5, [r7, #0]
 8014ff4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8014ff8:	6030      	str	r0, [r6, #0]
 8014ffa:	4620      	mov	r0, r4
 8014ffc:	b003      	add	sp, #12
 8014ffe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015002:	6161      	str	r1, [r4, #20]
 8015004:	e7ea      	b.n	8014fdc <__d2b+0x58>
 8015006:	a801      	add	r0, sp, #4
 8015008:	f7ff fce9 	bl	80149de <__lo0bits>
 801500c:	9b01      	ldr	r3, [sp, #4]
 801500e:	6163      	str	r3, [r4, #20]
 8015010:	3020      	adds	r0, #32
 8015012:	2201      	movs	r2, #1
 8015014:	e7e8      	b.n	8014fe8 <__d2b+0x64>
 8015016:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801501a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801501e:	6038      	str	r0, [r7, #0]
 8015020:	6918      	ldr	r0, [r3, #16]
 8015022:	f7ff fcbd 	bl	80149a0 <__hi0bits>
 8015026:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801502a:	e7e5      	b.n	8014ff8 <__d2b+0x74>
 801502c:	0805d7b9 	.word	0x0805d7b9
 8015030:	0805d7ca 	.word	0x0805d7ca

08015034 <__ratio>:
 8015034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015038:	b085      	sub	sp, #20
 801503a:	e9cd 1000 	strd	r1, r0, [sp]
 801503e:	a902      	add	r1, sp, #8
 8015040:	f7ff ff56 	bl	8014ef0 <__b2d>
 8015044:	9800      	ldr	r0, [sp, #0]
 8015046:	a903      	add	r1, sp, #12
 8015048:	ec55 4b10 	vmov	r4, r5, d0
 801504c:	f7ff ff50 	bl	8014ef0 <__b2d>
 8015050:	9b01      	ldr	r3, [sp, #4]
 8015052:	6919      	ldr	r1, [r3, #16]
 8015054:	9b00      	ldr	r3, [sp, #0]
 8015056:	691b      	ldr	r3, [r3, #16]
 8015058:	1ac9      	subs	r1, r1, r3
 801505a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801505e:	1a9b      	subs	r3, r3, r2
 8015060:	ec5b ab10 	vmov	sl, fp, d0
 8015064:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8015068:	2b00      	cmp	r3, #0
 801506a:	bfce      	itee	gt
 801506c:	462a      	movgt	r2, r5
 801506e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8015072:	465a      	movle	r2, fp
 8015074:	462f      	mov	r7, r5
 8015076:	46d9      	mov	r9, fp
 8015078:	bfcc      	ite	gt
 801507a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801507e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8015082:	464b      	mov	r3, r9
 8015084:	4652      	mov	r2, sl
 8015086:	4620      	mov	r0, r4
 8015088:	4639      	mov	r1, r7
 801508a:	f7eb fc0f 	bl	80008ac <__aeabi_ddiv>
 801508e:	ec41 0b10 	vmov	d0, r0, r1
 8015092:	b005      	add	sp, #20
 8015094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015098 <__copybits>:
 8015098:	3901      	subs	r1, #1
 801509a:	b570      	push	{r4, r5, r6, lr}
 801509c:	1149      	asrs	r1, r1, #5
 801509e:	6914      	ldr	r4, [r2, #16]
 80150a0:	3101      	adds	r1, #1
 80150a2:	f102 0314 	add.w	r3, r2, #20
 80150a6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80150aa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80150ae:	1f05      	subs	r5, r0, #4
 80150b0:	42a3      	cmp	r3, r4
 80150b2:	d30c      	bcc.n	80150ce <__copybits+0x36>
 80150b4:	1aa3      	subs	r3, r4, r2
 80150b6:	3b11      	subs	r3, #17
 80150b8:	f023 0303 	bic.w	r3, r3, #3
 80150bc:	3211      	adds	r2, #17
 80150be:	42a2      	cmp	r2, r4
 80150c0:	bf88      	it	hi
 80150c2:	2300      	movhi	r3, #0
 80150c4:	4418      	add	r0, r3
 80150c6:	2300      	movs	r3, #0
 80150c8:	4288      	cmp	r0, r1
 80150ca:	d305      	bcc.n	80150d8 <__copybits+0x40>
 80150cc:	bd70      	pop	{r4, r5, r6, pc}
 80150ce:	f853 6b04 	ldr.w	r6, [r3], #4
 80150d2:	f845 6f04 	str.w	r6, [r5, #4]!
 80150d6:	e7eb      	b.n	80150b0 <__copybits+0x18>
 80150d8:	f840 3b04 	str.w	r3, [r0], #4
 80150dc:	e7f4      	b.n	80150c8 <__copybits+0x30>

080150de <__any_on>:
 80150de:	f100 0214 	add.w	r2, r0, #20
 80150e2:	6900      	ldr	r0, [r0, #16]
 80150e4:	114b      	asrs	r3, r1, #5
 80150e6:	4298      	cmp	r0, r3
 80150e8:	b510      	push	{r4, lr}
 80150ea:	db11      	blt.n	8015110 <__any_on+0x32>
 80150ec:	dd0a      	ble.n	8015104 <__any_on+0x26>
 80150ee:	f011 011f 	ands.w	r1, r1, #31
 80150f2:	d007      	beq.n	8015104 <__any_on+0x26>
 80150f4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80150f8:	fa24 f001 	lsr.w	r0, r4, r1
 80150fc:	fa00 f101 	lsl.w	r1, r0, r1
 8015100:	428c      	cmp	r4, r1
 8015102:	d10b      	bne.n	801511c <__any_on+0x3e>
 8015104:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015108:	4293      	cmp	r3, r2
 801510a:	d803      	bhi.n	8015114 <__any_on+0x36>
 801510c:	2000      	movs	r0, #0
 801510e:	bd10      	pop	{r4, pc}
 8015110:	4603      	mov	r3, r0
 8015112:	e7f7      	b.n	8015104 <__any_on+0x26>
 8015114:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8015118:	2900      	cmp	r1, #0
 801511a:	d0f5      	beq.n	8015108 <__any_on+0x2a>
 801511c:	2001      	movs	r0, #1
 801511e:	e7f6      	b.n	801510e <__any_on+0x30>

08015120 <_malloc_usable_size_r>:
 8015120:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015124:	1f18      	subs	r0, r3, #4
 8015126:	2b00      	cmp	r3, #0
 8015128:	bfbc      	itt	lt
 801512a:	580b      	ldrlt	r3, [r1, r0]
 801512c:	18c0      	addlt	r0, r0, r3
 801512e:	4770      	bx	lr

08015130 <sulp>:
 8015130:	b570      	push	{r4, r5, r6, lr}
 8015132:	4604      	mov	r4, r0
 8015134:	460d      	mov	r5, r1
 8015136:	ec45 4b10 	vmov	d0, r4, r5
 801513a:	4616      	mov	r6, r2
 801513c:	f7ff feb2 	bl	8014ea4 <__ulp>
 8015140:	ec51 0b10 	vmov	r0, r1, d0
 8015144:	b17e      	cbz	r6, 8015166 <sulp+0x36>
 8015146:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801514a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801514e:	2b00      	cmp	r3, #0
 8015150:	dd09      	ble.n	8015166 <sulp+0x36>
 8015152:	051b      	lsls	r3, r3, #20
 8015154:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8015158:	2400      	movs	r4, #0
 801515a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 801515e:	4622      	mov	r2, r4
 8015160:	462b      	mov	r3, r5
 8015162:	f7eb fa79 	bl	8000658 <__aeabi_dmul>
 8015166:	ec41 0b10 	vmov	d0, r0, r1
 801516a:	bd70      	pop	{r4, r5, r6, pc}
 801516c:	0000      	movs	r0, r0
	...

08015170 <_strtod_l>:
 8015170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015174:	b09f      	sub	sp, #124	@ 0x7c
 8015176:	460c      	mov	r4, r1
 8015178:	9217      	str	r2, [sp, #92]	@ 0x5c
 801517a:	2200      	movs	r2, #0
 801517c:	921a      	str	r2, [sp, #104]	@ 0x68
 801517e:	9005      	str	r0, [sp, #20]
 8015180:	f04f 0a00 	mov.w	sl, #0
 8015184:	f04f 0b00 	mov.w	fp, #0
 8015188:	460a      	mov	r2, r1
 801518a:	9219      	str	r2, [sp, #100]	@ 0x64
 801518c:	7811      	ldrb	r1, [r2, #0]
 801518e:	292b      	cmp	r1, #43	@ 0x2b
 8015190:	d04a      	beq.n	8015228 <_strtod_l+0xb8>
 8015192:	d838      	bhi.n	8015206 <_strtod_l+0x96>
 8015194:	290d      	cmp	r1, #13
 8015196:	d832      	bhi.n	80151fe <_strtod_l+0x8e>
 8015198:	2908      	cmp	r1, #8
 801519a:	d832      	bhi.n	8015202 <_strtod_l+0x92>
 801519c:	2900      	cmp	r1, #0
 801519e:	d03b      	beq.n	8015218 <_strtod_l+0xa8>
 80151a0:	2200      	movs	r2, #0
 80151a2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80151a4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80151a6:	782a      	ldrb	r2, [r5, #0]
 80151a8:	2a30      	cmp	r2, #48	@ 0x30
 80151aa:	f040 80b3 	bne.w	8015314 <_strtod_l+0x1a4>
 80151ae:	786a      	ldrb	r2, [r5, #1]
 80151b0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80151b4:	2a58      	cmp	r2, #88	@ 0x58
 80151b6:	d16e      	bne.n	8015296 <_strtod_l+0x126>
 80151b8:	9302      	str	r3, [sp, #8]
 80151ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80151bc:	9301      	str	r3, [sp, #4]
 80151be:	ab1a      	add	r3, sp, #104	@ 0x68
 80151c0:	9300      	str	r3, [sp, #0]
 80151c2:	4a8e      	ldr	r2, [pc, #568]	@ (80153fc <_strtod_l+0x28c>)
 80151c4:	9805      	ldr	r0, [sp, #20]
 80151c6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80151c8:	a919      	add	r1, sp, #100	@ 0x64
 80151ca:	f001 fc93 	bl	8016af4 <__gethex>
 80151ce:	f010 060f 	ands.w	r6, r0, #15
 80151d2:	4604      	mov	r4, r0
 80151d4:	d005      	beq.n	80151e2 <_strtod_l+0x72>
 80151d6:	2e06      	cmp	r6, #6
 80151d8:	d128      	bne.n	801522c <_strtod_l+0xbc>
 80151da:	3501      	adds	r5, #1
 80151dc:	2300      	movs	r3, #0
 80151de:	9519      	str	r5, [sp, #100]	@ 0x64
 80151e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80151e2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80151e4:	2b00      	cmp	r3, #0
 80151e6:	f040 858e 	bne.w	8015d06 <_strtod_l+0xb96>
 80151ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80151ec:	b1cb      	cbz	r3, 8015222 <_strtod_l+0xb2>
 80151ee:	4652      	mov	r2, sl
 80151f0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80151f4:	ec43 2b10 	vmov	d0, r2, r3
 80151f8:	b01f      	add	sp, #124	@ 0x7c
 80151fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80151fe:	2920      	cmp	r1, #32
 8015200:	d1ce      	bne.n	80151a0 <_strtod_l+0x30>
 8015202:	3201      	adds	r2, #1
 8015204:	e7c1      	b.n	801518a <_strtod_l+0x1a>
 8015206:	292d      	cmp	r1, #45	@ 0x2d
 8015208:	d1ca      	bne.n	80151a0 <_strtod_l+0x30>
 801520a:	2101      	movs	r1, #1
 801520c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801520e:	1c51      	adds	r1, r2, #1
 8015210:	9119      	str	r1, [sp, #100]	@ 0x64
 8015212:	7852      	ldrb	r2, [r2, #1]
 8015214:	2a00      	cmp	r2, #0
 8015216:	d1c5      	bne.n	80151a4 <_strtod_l+0x34>
 8015218:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801521a:	9419      	str	r4, [sp, #100]	@ 0x64
 801521c:	2b00      	cmp	r3, #0
 801521e:	f040 8570 	bne.w	8015d02 <_strtod_l+0xb92>
 8015222:	4652      	mov	r2, sl
 8015224:	465b      	mov	r3, fp
 8015226:	e7e5      	b.n	80151f4 <_strtod_l+0x84>
 8015228:	2100      	movs	r1, #0
 801522a:	e7ef      	b.n	801520c <_strtod_l+0x9c>
 801522c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801522e:	b13a      	cbz	r2, 8015240 <_strtod_l+0xd0>
 8015230:	2135      	movs	r1, #53	@ 0x35
 8015232:	a81c      	add	r0, sp, #112	@ 0x70
 8015234:	f7ff ff30 	bl	8015098 <__copybits>
 8015238:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801523a:	9805      	ldr	r0, [sp, #20]
 801523c:	f7ff fafe 	bl	801483c <_Bfree>
 8015240:	3e01      	subs	r6, #1
 8015242:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8015244:	2e04      	cmp	r6, #4
 8015246:	d806      	bhi.n	8015256 <_strtod_l+0xe6>
 8015248:	e8df f006 	tbb	[pc, r6]
 801524c:	201d0314 	.word	0x201d0314
 8015250:	14          	.byte	0x14
 8015251:	00          	.byte	0x00
 8015252:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8015256:	05e1      	lsls	r1, r4, #23
 8015258:	bf48      	it	mi
 801525a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 801525e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8015262:	0d1b      	lsrs	r3, r3, #20
 8015264:	051b      	lsls	r3, r3, #20
 8015266:	2b00      	cmp	r3, #0
 8015268:	d1bb      	bne.n	80151e2 <_strtod_l+0x72>
 801526a:	f7fe fba9 	bl	80139c0 <__errno>
 801526e:	2322      	movs	r3, #34	@ 0x22
 8015270:	6003      	str	r3, [r0, #0]
 8015272:	e7b6      	b.n	80151e2 <_strtod_l+0x72>
 8015274:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8015278:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801527c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8015280:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8015284:	e7e7      	b.n	8015256 <_strtod_l+0xe6>
 8015286:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8015404 <_strtod_l+0x294>
 801528a:	e7e4      	b.n	8015256 <_strtod_l+0xe6>
 801528c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8015290:	f04f 3aff 	mov.w	sl, #4294967295
 8015294:	e7df      	b.n	8015256 <_strtod_l+0xe6>
 8015296:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8015298:	1c5a      	adds	r2, r3, #1
 801529a:	9219      	str	r2, [sp, #100]	@ 0x64
 801529c:	785b      	ldrb	r3, [r3, #1]
 801529e:	2b30      	cmp	r3, #48	@ 0x30
 80152a0:	d0f9      	beq.n	8015296 <_strtod_l+0x126>
 80152a2:	2b00      	cmp	r3, #0
 80152a4:	d09d      	beq.n	80151e2 <_strtod_l+0x72>
 80152a6:	2301      	movs	r3, #1
 80152a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80152aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80152ac:	930c      	str	r3, [sp, #48]	@ 0x30
 80152ae:	2300      	movs	r3, #0
 80152b0:	9308      	str	r3, [sp, #32]
 80152b2:	930a      	str	r3, [sp, #40]	@ 0x28
 80152b4:	461f      	mov	r7, r3
 80152b6:	220a      	movs	r2, #10
 80152b8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80152ba:	7805      	ldrb	r5, [r0, #0]
 80152bc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80152c0:	b2d9      	uxtb	r1, r3
 80152c2:	2909      	cmp	r1, #9
 80152c4:	d928      	bls.n	8015318 <_strtod_l+0x1a8>
 80152c6:	494e      	ldr	r1, [pc, #312]	@ (8015400 <_strtod_l+0x290>)
 80152c8:	2201      	movs	r2, #1
 80152ca:	f001 fb74 	bl	80169b6 <strncmp>
 80152ce:	2800      	cmp	r0, #0
 80152d0:	d032      	beq.n	8015338 <_strtod_l+0x1c8>
 80152d2:	2000      	movs	r0, #0
 80152d4:	462a      	mov	r2, r5
 80152d6:	4681      	mov	r9, r0
 80152d8:	463d      	mov	r5, r7
 80152da:	4603      	mov	r3, r0
 80152dc:	2a65      	cmp	r2, #101	@ 0x65
 80152de:	d001      	beq.n	80152e4 <_strtod_l+0x174>
 80152e0:	2a45      	cmp	r2, #69	@ 0x45
 80152e2:	d114      	bne.n	801530e <_strtod_l+0x19e>
 80152e4:	b91d      	cbnz	r5, 80152ee <_strtod_l+0x17e>
 80152e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80152e8:	4302      	orrs	r2, r0
 80152ea:	d095      	beq.n	8015218 <_strtod_l+0xa8>
 80152ec:	2500      	movs	r5, #0
 80152ee:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80152f0:	1c62      	adds	r2, r4, #1
 80152f2:	9219      	str	r2, [sp, #100]	@ 0x64
 80152f4:	7862      	ldrb	r2, [r4, #1]
 80152f6:	2a2b      	cmp	r2, #43	@ 0x2b
 80152f8:	d077      	beq.n	80153ea <_strtod_l+0x27a>
 80152fa:	2a2d      	cmp	r2, #45	@ 0x2d
 80152fc:	d07b      	beq.n	80153f6 <_strtod_l+0x286>
 80152fe:	f04f 0c00 	mov.w	ip, #0
 8015302:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8015306:	2909      	cmp	r1, #9
 8015308:	f240 8082 	bls.w	8015410 <_strtod_l+0x2a0>
 801530c:	9419      	str	r4, [sp, #100]	@ 0x64
 801530e:	f04f 0800 	mov.w	r8, #0
 8015312:	e0a2      	b.n	801545a <_strtod_l+0x2ea>
 8015314:	2300      	movs	r3, #0
 8015316:	e7c7      	b.n	80152a8 <_strtod_l+0x138>
 8015318:	2f08      	cmp	r7, #8
 801531a:	bfd5      	itete	le
 801531c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 801531e:	9908      	ldrgt	r1, [sp, #32]
 8015320:	fb02 3301 	mlale	r3, r2, r1, r3
 8015324:	fb02 3301 	mlagt	r3, r2, r1, r3
 8015328:	f100 0001 	add.w	r0, r0, #1
 801532c:	bfd4      	ite	le
 801532e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8015330:	9308      	strgt	r3, [sp, #32]
 8015332:	3701      	adds	r7, #1
 8015334:	9019      	str	r0, [sp, #100]	@ 0x64
 8015336:	e7bf      	b.n	80152b8 <_strtod_l+0x148>
 8015338:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801533a:	1c5a      	adds	r2, r3, #1
 801533c:	9219      	str	r2, [sp, #100]	@ 0x64
 801533e:	785a      	ldrb	r2, [r3, #1]
 8015340:	b37f      	cbz	r7, 80153a2 <_strtod_l+0x232>
 8015342:	4681      	mov	r9, r0
 8015344:	463d      	mov	r5, r7
 8015346:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 801534a:	2b09      	cmp	r3, #9
 801534c:	d912      	bls.n	8015374 <_strtod_l+0x204>
 801534e:	2301      	movs	r3, #1
 8015350:	e7c4      	b.n	80152dc <_strtod_l+0x16c>
 8015352:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8015354:	1c5a      	adds	r2, r3, #1
 8015356:	9219      	str	r2, [sp, #100]	@ 0x64
 8015358:	785a      	ldrb	r2, [r3, #1]
 801535a:	3001      	adds	r0, #1
 801535c:	2a30      	cmp	r2, #48	@ 0x30
 801535e:	d0f8      	beq.n	8015352 <_strtod_l+0x1e2>
 8015360:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8015364:	2b08      	cmp	r3, #8
 8015366:	f200 84d3 	bhi.w	8015d10 <_strtod_l+0xba0>
 801536a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801536c:	930c      	str	r3, [sp, #48]	@ 0x30
 801536e:	4681      	mov	r9, r0
 8015370:	2000      	movs	r0, #0
 8015372:	4605      	mov	r5, r0
 8015374:	3a30      	subs	r2, #48	@ 0x30
 8015376:	f100 0301 	add.w	r3, r0, #1
 801537a:	d02a      	beq.n	80153d2 <_strtod_l+0x262>
 801537c:	4499      	add	r9, r3
 801537e:	eb00 0c05 	add.w	ip, r0, r5
 8015382:	462b      	mov	r3, r5
 8015384:	210a      	movs	r1, #10
 8015386:	4563      	cmp	r3, ip
 8015388:	d10d      	bne.n	80153a6 <_strtod_l+0x236>
 801538a:	1c69      	adds	r1, r5, #1
 801538c:	4401      	add	r1, r0
 801538e:	4428      	add	r0, r5
 8015390:	2808      	cmp	r0, #8
 8015392:	dc16      	bgt.n	80153c2 <_strtod_l+0x252>
 8015394:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8015396:	230a      	movs	r3, #10
 8015398:	fb03 2300 	mla	r3, r3, r0, r2
 801539c:	930a      	str	r3, [sp, #40]	@ 0x28
 801539e:	2300      	movs	r3, #0
 80153a0:	e018      	b.n	80153d4 <_strtod_l+0x264>
 80153a2:	4638      	mov	r0, r7
 80153a4:	e7da      	b.n	801535c <_strtod_l+0x1ec>
 80153a6:	2b08      	cmp	r3, #8
 80153a8:	f103 0301 	add.w	r3, r3, #1
 80153ac:	dc03      	bgt.n	80153b6 <_strtod_l+0x246>
 80153ae:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80153b0:	434e      	muls	r6, r1
 80153b2:	960a      	str	r6, [sp, #40]	@ 0x28
 80153b4:	e7e7      	b.n	8015386 <_strtod_l+0x216>
 80153b6:	2b10      	cmp	r3, #16
 80153b8:	bfde      	ittt	le
 80153ba:	9e08      	ldrle	r6, [sp, #32]
 80153bc:	434e      	mulle	r6, r1
 80153be:	9608      	strle	r6, [sp, #32]
 80153c0:	e7e1      	b.n	8015386 <_strtod_l+0x216>
 80153c2:	280f      	cmp	r0, #15
 80153c4:	dceb      	bgt.n	801539e <_strtod_l+0x22e>
 80153c6:	9808      	ldr	r0, [sp, #32]
 80153c8:	230a      	movs	r3, #10
 80153ca:	fb03 2300 	mla	r3, r3, r0, r2
 80153ce:	9308      	str	r3, [sp, #32]
 80153d0:	e7e5      	b.n	801539e <_strtod_l+0x22e>
 80153d2:	4629      	mov	r1, r5
 80153d4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80153d6:	1c50      	adds	r0, r2, #1
 80153d8:	9019      	str	r0, [sp, #100]	@ 0x64
 80153da:	7852      	ldrb	r2, [r2, #1]
 80153dc:	4618      	mov	r0, r3
 80153de:	460d      	mov	r5, r1
 80153e0:	e7b1      	b.n	8015346 <_strtod_l+0x1d6>
 80153e2:	f04f 0900 	mov.w	r9, #0
 80153e6:	2301      	movs	r3, #1
 80153e8:	e77d      	b.n	80152e6 <_strtod_l+0x176>
 80153ea:	f04f 0c00 	mov.w	ip, #0
 80153ee:	1ca2      	adds	r2, r4, #2
 80153f0:	9219      	str	r2, [sp, #100]	@ 0x64
 80153f2:	78a2      	ldrb	r2, [r4, #2]
 80153f4:	e785      	b.n	8015302 <_strtod_l+0x192>
 80153f6:	f04f 0c01 	mov.w	ip, #1
 80153fa:	e7f8      	b.n	80153ee <_strtod_l+0x27e>
 80153fc:	0805d938 	.word	0x0805d938
 8015400:	0805d920 	.word	0x0805d920
 8015404:	7ff00000 	.word	0x7ff00000
 8015408:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801540a:	1c51      	adds	r1, r2, #1
 801540c:	9119      	str	r1, [sp, #100]	@ 0x64
 801540e:	7852      	ldrb	r2, [r2, #1]
 8015410:	2a30      	cmp	r2, #48	@ 0x30
 8015412:	d0f9      	beq.n	8015408 <_strtod_l+0x298>
 8015414:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8015418:	2908      	cmp	r1, #8
 801541a:	f63f af78 	bhi.w	801530e <_strtod_l+0x19e>
 801541e:	3a30      	subs	r2, #48	@ 0x30
 8015420:	920e      	str	r2, [sp, #56]	@ 0x38
 8015422:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8015424:	920f      	str	r2, [sp, #60]	@ 0x3c
 8015426:	f04f 080a 	mov.w	r8, #10
 801542a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801542c:	1c56      	adds	r6, r2, #1
 801542e:	9619      	str	r6, [sp, #100]	@ 0x64
 8015430:	7852      	ldrb	r2, [r2, #1]
 8015432:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8015436:	f1be 0f09 	cmp.w	lr, #9
 801543a:	d939      	bls.n	80154b0 <_strtod_l+0x340>
 801543c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801543e:	1a76      	subs	r6, r6, r1
 8015440:	2e08      	cmp	r6, #8
 8015442:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8015446:	dc03      	bgt.n	8015450 <_strtod_l+0x2e0>
 8015448:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801544a:	4588      	cmp	r8, r1
 801544c:	bfa8      	it	ge
 801544e:	4688      	movge	r8, r1
 8015450:	f1bc 0f00 	cmp.w	ip, #0
 8015454:	d001      	beq.n	801545a <_strtod_l+0x2ea>
 8015456:	f1c8 0800 	rsb	r8, r8, #0
 801545a:	2d00      	cmp	r5, #0
 801545c:	d14e      	bne.n	80154fc <_strtod_l+0x38c>
 801545e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8015460:	4308      	orrs	r0, r1
 8015462:	f47f aebe 	bne.w	80151e2 <_strtod_l+0x72>
 8015466:	2b00      	cmp	r3, #0
 8015468:	f47f aed6 	bne.w	8015218 <_strtod_l+0xa8>
 801546c:	2a69      	cmp	r2, #105	@ 0x69
 801546e:	d028      	beq.n	80154c2 <_strtod_l+0x352>
 8015470:	dc25      	bgt.n	80154be <_strtod_l+0x34e>
 8015472:	2a49      	cmp	r2, #73	@ 0x49
 8015474:	d025      	beq.n	80154c2 <_strtod_l+0x352>
 8015476:	2a4e      	cmp	r2, #78	@ 0x4e
 8015478:	f47f aece 	bne.w	8015218 <_strtod_l+0xa8>
 801547c:	499b      	ldr	r1, [pc, #620]	@ (80156ec <_strtod_l+0x57c>)
 801547e:	a819      	add	r0, sp, #100	@ 0x64
 8015480:	f001 fd5a 	bl	8016f38 <__match>
 8015484:	2800      	cmp	r0, #0
 8015486:	f43f aec7 	beq.w	8015218 <_strtod_l+0xa8>
 801548a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801548c:	781b      	ldrb	r3, [r3, #0]
 801548e:	2b28      	cmp	r3, #40	@ 0x28
 8015490:	d12e      	bne.n	80154f0 <_strtod_l+0x380>
 8015492:	4997      	ldr	r1, [pc, #604]	@ (80156f0 <_strtod_l+0x580>)
 8015494:	aa1c      	add	r2, sp, #112	@ 0x70
 8015496:	a819      	add	r0, sp, #100	@ 0x64
 8015498:	f001 fd62 	bl	8016f60 <__hexnan>
 801549c:	2805      	cmp	r0, #5
 801549e:	d127      	bne.n	80154f0 <_strtod_l+0x380>
 80154a0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80154a2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80154a6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80154aa:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80154ae:	e698      	b.n	80151e2 <_strtod_l+0x72>
 80154b0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80154b2:	fb08 2101 	mla	r1, r8, r1, r2
 80154b6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80154ba:	920e      	str	r2, [sp, #56]	@ 0x38
 80154bc:	e7b5      	b.n	801542a <_strtod_l+0x2ba>
 80154be:	2a6e      	cmp	r2, #110	@ 0x6e
 80154c0:	e7da      	b.n	8015478 <_strtod_l+0x308>
 80154c2:	498c      	ldr	r1, [pc, #560]	@ (80156f4 <_strtod_l+0x584>)
 80154c4:	a819      	add	r0, sp, #100	@ 0x64
 80154c6:	f001 fd37 	bl	8016f38 <__match>
 80154ca:	2800      	cmp	r0, #0
 80154cc:	f43f aea4 	beq.w	8015218 <_strtod_l+0xa8>
 80154d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80154d2:	4989      	ldr	r1, [pc, #548]	@ (80156f8 <_strtod_l+0x588>)
 80154d4:	3b01      	subs	r3, #1
 80154d6:	a819      	add	r0, sp, #100	@ 0x64
 80154d8:	9319      	str	r3, [sp, #100]	@ 0x64
 80154da:	f001 fd2d 	bl	8016f38 <__match>
 80154de:	b910      	cbnz	r0, 80154e6 <_strtod_l+0x376>
 80154e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80154e2:	3301      	adds	r3, #1
 80154e4:	9319      	str	r3, [sp, #100]	@ 0x64
 80154e6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8015708 <_strtod_l+0x598>
 80154ea:	f04f 0a00 	mov.w	sl, #0
 80154ee:	e678      	b.n	80151e2 <_strtod_l+0x72>
 80154f0:	4882      	ldr	r0, [pc, #520]	@ (80156fc <_strtod_l+0x58c>)
 80154f2:	f001 fa75 	bl	80169e0 <nan>
 80154f6:	ec5b ab10 	vmov	sl, fp, d0
 80154fa:	e672      	b.n	80151e2 <_strtod_l+0x72>
 80154fc:	eba8 0309 	sub.w	r3, r8, r9
 8015500:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8015502:	9309      	str	r3, [sp, #36]	@ 0x24
 8015504:	2f00      	cmp	r7, #0
 8015506:	bf08      	it	eq
 8015508:	462f      	moveq	r7, r5
 801550a:	2d10      	cmp	r5, #16
 801550c:	462c      	mov	r4, r5
 801550e:	bfa8      	it	ge
 8015510:	2410      	movge	r4, #16
 8015512:	f7eb f827 	bl	8000564 <__aeabi_ui2d>
 8015516:	2d09      	cmp	r5, #9
 8015518:	4682      	mov	sl, r0
 801551a:	468b      	mov	fp, r1
 801551c:	dc13      	bgt.n	8015546 <_strtod_l+0x3d6>
 801551e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015520:	2b00      	cmp	r3, #0
 8015522:	f43f ae5e 	beq.w	80151e2 <_strtod_l+0x72>
 8015526:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015528:	dd78      	ble.n	801561c <_strtod_l+0x4ac>
 801552a:	2b16      	cmp	r3, #22
 801552c:	dc5f      	bgt.n	80155ee <_strtod_l+0x47e>
 801552e:	4974      	ldr	r1, [pc, #464]	@ (8015700 <_strtod_l+0x590>)
 8015530:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8015534:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015538:	4652      	mov	r2, sl
 801553a:	465b      	mov	r3, fp
 801553c:	f7eb f88c 	bl	8000658 <__aeabi_dmul>
 8015540:	4682      	mov	sl, r0
 8015542:	468b      	mov	fp, r1
 8015544:	e64d      	b.n	80151e2 <_strtod_l+0x72>
 8015546:	4b6e      	ldr	r3, [pc, #440]	@ (8015700 <_strtod_l+0x590>)
 8015548:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801554c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8015550:	f7eb f882 	bl	8000658 <__aeabi_dmul>
 8015554:	4682      	mov	sl, r0
 8015556:	9808      	ldr	r0, [sp, #32]
 8015558:	468b      	mov	fp, r1
 801555a:	f7eb f803 	bl	8000564 <__aeabi_ui2d>
 801555e:	4602      	mov	r2, r0
 8015560:	460b      	mov	r3, r1
 8015562:	4650      	mov	r0, sl
 8015564:	4659      	mov	r1, fp
 8015566:	f7ea fec1 	bl	80002ec <__adddf3>
 801556a:	2d0f      	cmp	r5, #15
 801556c:	4682      	mov	sl, r0
 801556e:	468b      	mov	fp, r1
 8015570:	ddd5      	ble.n	801551e <_strtod_l+0x3ae>
 8015572:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015574:	1b2c      	subs	r4, r5, r4
 8015576:	441c      	add	r4, r3
 8015578:	2c00      	cmp	r4, #0
 801557a:	f340 8096 	ble.w	80156aa <_strtod_l+0x53a>
 801557e:	f014 030f 	ands.w	r3, r4, #15
 8015582:	d00a      	beq.n	801559a <_strtod_l+0x42a>
 8015584:	495e      	ldr	r1, [pc, #376]	@ (8015700 <_strtod_l+0x590>)
 8015586:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801558a:	4652      	mov	r2, sl
 801558c:	465b      	mov	r3, fp
 801558e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015592:	f7eb f861 	bl	8000658 <__aeabi_dmul>
 8015596:	4682      	mov	sl, r0
 8015598:	468b      	mov	fp, r1
 801559a:	f034 040f 	bics.w	r4, r4, #15
 801559e:	d073      	beq.n	8015688 <_strtod_l+0x518>
 80155a0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80155a4:	dd48      	ble.n	8015638 <_strtod_l+0x4c8>
 80155a6:	2400      	movs	r4, #0
 80155a8:	46a0      	mov	r8, r4
 80155aa:	940a      	str	r4, [sp, #40]	@ 0x28
 80155ac:	46a1      	mov	r9, r4
 80155ae:	9a05      	ldr	r2, [sp, #20]
 80155b0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8015708 <_strtod_l+0x598>
 80155b4:	2322      	movs	r3, #34	@ 0x22
 80155b6:	6013      	str	r3, [r2, #0]
 80155b8:	f04f 0a00 	mov.w	sl, #0
 80155bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80155be:	2b00      	cmp	r3, #0
 80155c0:	f43f ae0f 	beq.w	80151e2 <_strtod_l+0x72>
 80155c4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80155c6:	9805      	ldr	r0, [sp, #20]
 80155c8:	f7ff f938 	bl	801483c <_Bfree>
 80155cc:	9805      	ldr	r0, [sp, #20]
 80155ce:	4649      	mov	r1, r9
 80155d0:	f7ff f934 	bl	801483c <_Bfree>
 80155d4:	9805      	ldr	r0, [sp, #20]
 80155d6:	4641      	mov	r1, r8
 80155d8:	f7ff f930 	bl	801483c <_Bfree>
 80155dc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80155de:	9805      	ldr	r0, [sp, #20]
 80155e0:	f7ff f92c 	bl	801483c <_Bfree>
 80155e4:	9805      	ldr	r0, [sp, #20]
 80155e6:	4621      	mov	r1, r4
 80155e8:	f7ff f928 	bl	801483c <_Bfree>
 80155ec:	e5f9      	b.n	80151e2 <_strtod_l+0x72>
 80155ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80155f0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80155f4:	4293      	cmp	r3, r2
 80155f6:	dbbc      	blt.n	8015572 <_strtod_l+0x402>
 80155f8:	4c41      	ldr	r4, [pc, #260]	@ (8015700 <_strtod_l+0x590>)
 80155fa:	f1c5 050f 	rsb	r5, r5, #15
 80155fe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8015602:	4652      	mov	r2, sl
 8015604:	465b      	mov	r3, fp
 8015606:	e9d1 0100 	ldrd	r0, r1, [r1]
 801560a:	f7eb f825 	bl	8000658 <__aeabi_dmul>
 801560e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015610:	1b5d      	subs	r5, r3, r5
 8015612:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8015616:	e9d4 2300 	ldrd	r2, r3, [r4]
 801561a:	e78f      	b.n	801553c <_strtod_l+0x3cc>
 801561c:	3316      	adds	r3, #22
 801561e:	dba8      	blt.n	8015572 <_strtod_l+0x402>
 8015620:	4b37      	ldr	r3, [pc, #220]	@ (8015700 <_strtod_l+0x590>)
 8015622:	eba9 0808 	sub.w	r8, r9, r8
 8015626:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 801562a:	e9d8 2300 	ldrd	r2, r3, [r8]
 801562e:	4650      	mov	r0, sl
 8015630:	4659      	mov	r1, fp
 8015632:	f7eb f93b 	bl	80008ac <__aeabi_ddiv>
 8015636:	e783      	b.n	8015540 <_strtod_l+0x3d0>
 8015638:	4b32      	ldr	r3, [pc, #200]	@ (8015704 <_strtod_l+0x594>)
 801563a:	9308      	str	r3, [sp, #32]
 801563c:	2300      	movs	r3, #0
 801563e:	1124      	asrs	r4, r4, #4
 8015640:	4650      	mov	r0, sl
 8015642:	4659      	mov	r1, fp
 8015644:	461e      	mov	r6, r3
 8015646:	2c01      	cmp	r4, #1
 8015648:	dc21      	bgt.n	801568e <_strtod_l+0x51e>
 801564a:	b10b      	cbz	r3, 8015650 <_strtod_l+0x4e0>
 801564c:	4682      	mov	sl, r0
 801564e:	468b      	mov	fp, r1
 8015650:	492c      	ldr	r1, [pc, #176]	@ (8015704 <_strtod_l+0x594>)
 8015652:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8015656:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 801565a:	4652      	mov	r2, sl
 801565c:	465b      	mov	r3, fp
 801565e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015662:	f7ea fff9 	bl	8000658 <__aeabi_dmul>
 8015666:	4b28      	ldr	r3, [pc, #160]	@ (8015708 <_strtod_l+0x598>)
 8015668:	460a      	mov	r2, r1
 801566a:	400b      	ands	r3, r1
 801566c:	4927      	ldr	r1, [pc, #156]	@ (801570c <_strtod_l+0x59c>)
 801566e:	428b      	cmp	r3, r1
 8015670:	4682      	mov	sl, r0
 8015672:	d898      	bhi.n	80155a6 <_strtod_l+0x436>
 8015674:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8015678:	428b      	cmp	r3, r1
 801567a:	bf86      	itte	hi
 801567c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8015710 <_strtod_l+0x5a0>
 8015680:	f04f 3aff 	movhi.w	sl, #4294967295
 8015684:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8015688:	2300      	movs	r3, #0
 801568a:	9308      	str	r3, [sp, #32]
 801568c:	e07a      	b.n	8015784 <_strtod_l+0x614>
 801568e:	07e2      	lsls	r2, r4, #31
 8015690:	d505      	bpl.n	801569e <_strtod_l+0x52e>
 8015692:	9b08      	ldr	r3, [sp, #32]
 8015694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015698:	f7ea ffde 	bl	8000658 <__aeabi_dmul>
 801569c:	2301      	movs	r3, #1
 801569e:	9a08      	ldr	r2, [sp, #32]
 80156a0:	3208      	adds	r2, #8
 80156a2:	3601      	adds	r6, #1
 80156a4:	1064      	asrs	r4, r4, #1
 80156a6:	9208      	str	r2, [sp, #32]
 80156a8:	e7cd      	b.n	8015646 <_strtod_l+0x4d6>
 80156aa:	d0ed      	beq.n	8015688 <_strtod_l+0x518>
 80156ac:	4264      	negs	r4, r4
 80156ae:	f014 020f 	ands.w	r2, r4, #15
 80156b2:	d00a      	beq.n	80156ca <_strtod_l+0x55a>
 80156b4:	4b12      	ldr	r3, [pc, #72]	@ (8015700 <_strtod_l+0x590>)
 80156b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80156ba:	4650      	mov	r0, sl
 80156bc:	4659      	mov	r1, fp
 80156be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156c2:	f7eb f8f3 	bl	80008ac <__aeabi_ddiv>
 80156c6:	4682      	mov	sl, r0
 80156c8:	468b      	mov	fp, r1
 80156ca:	1124      	asrs	r4, r4, #4
 80156cc:	d0dc      	beq.n	8015688 <_strtod_l+0x518>
 80156ce:	2c1f      	cmp	r4, #31
 80156d0:	dd20      	ble.n	8015714 <_strtod_l+0x5a4>
 80156d2:	2400      	movs	r4, #0
 80156d4:	46a0      	mov	r8, r4
 80156d6:	940a      	str	r4, [sp, #40]	@ 0x28
 80156d8:	46a1      	mov	r9, r4
 80156da:	9a05      	ldr	r2, [sp, #20]
 80156dc:	2322      	movs	r3, #34	@ 0x22
 80156de:	f04f 0a00 	mov.w	sl, #0
 80156e2:	f04f 0b00 	mov.w	fp, #0
 80156e6:	6013      	str	r3, [r2, #0]
 80156e8:	e768      	b.n	80155bc <_strtod_l+0x44c>
 80156ea:	bf00      	nop
 80156ec:	0805d67d 	.word	0x0805d67d
 80156f0:	0805d924 	.word	0x0805d924
 80156f4:	0805d675 	.word	0x0805d675
 80156f8:	0805d757 	.word	0x0805d757
 80156fc:	0805d753 	.word	0x0805d753
 8015700:	0805d858 	.word	0x0805d858
 8015704:	0805d830 	.word	0x0805d830
 8015708:	7ff00000 	.word	0x7ff00000
 801570c:	7ca00000 	.word	0x7ca00000
 8015710:	7fefffff 	.word	0x7fefffff
 8015714:	f014 0310 	ands.w	r3, r4, #16
 8015718:	bf18      	it	ne
 801571a:	236a      	movne	r3, #106	@ 0x6a
 801571c:	4ea9      	ldr	r6, [pc, #676]	@ (80159c4 <_strtod_l+0x854>)
 801571e:	9308      	str	r3, [sp, #32]
 8015720:	4650      	mov	r0, sl
 8015722:	4659      	mov	r1, fp
 8015724:	2300      	movs	r3, #0
 8015726:	07e2      	lsls	r2, r4, #31
 8015728:	d504      	bpl.n	8015734 <_strtod_l+0x5c4>
 801572a:	e9d6 2300 	ldrd	r2, r3, [r6]
 801572e:	f7ea ff93 	bl	8000658 <__aeabi_dmul>
 8015732:	2301      	movs	r3, #1
 8015734:	1064      	asrs	r4, r4, #1
 8015736:	f106 0608 	add.w	r6, r6, #8
 801573a:	d1f4      	bne.n	8015726 <_strtod_l+0x5b6>
 801573c:	b10b      	cbz	r3, 8015742 <_strtod_l+0x5d2>
 801573e:	4682      	mov	sl, r0
 8015740:	468b      	mov	fp, r1
 8015742:	9b08      	ldr	r3, [sp, #32]
 8015744:	b1b3      	cbz	r3, 8015774 <_strtod_l+0x604>
 8015746:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801574a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 801574e:	2b00      	cmp	r3, #0
 8015750:	4659      	mov	r1, fp
 8015752:	dd0f      	ble.n	8015774 <_strtod_l+0x604>
 8015754:	2b1f      	cmp	r3, #31
 8015756:	dd55      	ble.n	8015804 <_strtod_l+0x694>
 8015758:	2b34      	cmp	r3, #52	@ 0x34
 801575a:	bfde      	ittt	le
 801575c:	f04f 33ff 	movle.w	r3, #4294967295
 8015760:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8015764:	4093      	lslle	r3, r2
 8015766:	f04f 0a00 	mov.w	sl, #0
 801576a:	bfcc      	ite	gt
 801576c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8015770:	ea03 0b01 	andle.w	fp, r3, r1
 8015774:	2200      	movs	r2, #0
 8015776:	2300      	movs	r3, #0
 8015778:	4650      	mov	r0, sl
 801577a:	4659      	mov	r1, fp
 801577c:	f7eb f9d4 	bl	8000b28 <__aeabi_dcmpeq>
 8015780:	2800      	cmp	r0, #0
 8015782:	d1a6      	bne.n	80156d2 <_strtod_l+0x562>
 8015784:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015786:	9300      	str	r3, [sp, #0]
 8015788:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801578a:	9805      	ldr	r0, [sp, #20]
 801578c:	462b      	mov	r3, r5
 801578e:	463a      	mov	r2, r7
 8015790:	f7ff f8bc 	bl	801490c <__s2b>
 8015794:	900a      	str	r0, [sp, #40]	@ 0x28
 8015796:	2800      	cmp	r0, #0
 8015798:	f43f af05 	beq.w	80155a6 <_strtod_l+0x436>
 801579c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801579e:	2a00      	cmp	r2, #0
 80157a0:	eba9 0308 	sub.w	r3, r9, r8
 80157a4:	bfa8      	it	ge
 80157a6:	2300      	movge	r3, #0
 80157a8:	9312      	str	r3, [sp, #72]	@ 0x48
 80157aa:	2400      	movs	r4, #0
 80157ac:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80157b0:	9316      	str	r3, [sp, #88]	@ 0x58
 80157b2:	46a0      	mov	r8, r4
 80157b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80157b6:	9805      	ldr	r0, [sp, #20]
 80157b8:	6859      	ldr	r1, [r3, #4]
 80157ba:	f7fe ffff 	bl	80147bc <_Balloc>
 80157be:	4681      	mov	r9, r0
 80157c0:	2800      	cmp	r0, #0
 80157c2:	f43f aef4 	beq.w	80155ae <_strtod_l+0x43e>
 80157c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80157c8:	691a      	ldr	r2, [r3, #16]
 80157ca:	3202      	adds	r2, #2
 80157cc:	f103 010c 	add.w	r1, r3, #12
 80157d0:	0092      	lsls	r2, r2, #2
 80157d2:	300c      	adds	r0, #12
 80157d4:	f7fe f929 	bl	8013a2a <memcpy>
 80157d8:	ec4b ab10 	vmov	d0, sl, fp
 80157dc:	9805      	ldr	r0, [sp, #20]
 80157de:	aa1c      	add	r2, sp, #112	@ 0x70
 80157e0:	a91b      	add	r1, sp, #108	@ 0x6c
 80157e2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80157e6:	f7ff fbcd 	bl	8014f84 <__d2b>
 80157ea:	901a      	str	r0, [sp, #104]	@ 0x68
 80157ec:	2800      	cmp	r0, #0
 80157ee:	f43f aede 	beq.w	80155ae <_strtod_l+0x43e>
 80157f2:	9805      	ldr	r0, [sp, #20]
 80157f4:	2101      	movs	r1, #1
 80157f6:	f7ff f91f 	bl	8014a38 <__i2b>
 80157fa:	4680      	mov	r8, r0
 80157fc:	b948      	cbnz	r0, 8015812 <_strtod_l+0x6a2>
 80157fe:	f04f 0800 	mov.w	r8, #0
 8015802:	e6d4      	b.n	80155ae <_strtod_l+0x43e>
 8015804:	f04f 32ff 	mov.w	r2, #4294967295
 8015808:	fa02 f303 	lsl.w	r3, r2, r3
 801580c:	ea03 0a0a 	and.w	sl, r3, sl
 8015810:	e7b0      	b.n	8015774 <_strtod_l+0x604>
 8015812:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8015814:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8015816:	2d00      	cmp	r5, #0
 8015818:	bfab      	itete	ge
 801581a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 801581c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 801581e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8015820:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8015822:	bfac      	ite	ge
 8015824:	18ef      	addge	r7, r5, r3
 8015826:	1b5e      	sublt	r6, r3, r5
 8015828:	9b08      	ldr	r3, [sp, #32]
 801582a:	1aed      	subs	r5, r5, r3
 801582c:	4415      	add	r5, r2
 801582e:	4b66      	ldr	r3, [pc, #408]	@ (80159c8 <_strtod_l+0x858>)
 8015830:	3d01      	subs	r5, #1
 8015832:	429d      	cmp	r5, r3
 8015834:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8015838:	da50      	bge.n	80158dc <_strtod_l+0x76c>
 801583a:	1b5b      	subs	r3, r3, r5
 801583c:	2b1f      	cmp	r3, #31
 801583e:	eba2 0203 	sub.w	r2, r2, r3
 8015842:	f04f 0101 	mov.w	r1, #1
 8015846:	dc3d      	bgt.n	80158c4 <_strtod_l+0x754>
 8015848:	fa01 f303 	lsl.w	r3, r1, r3
 801584c:	9313      	str	r3, [sp, #76]	@ 0x4c
 801584e:	2300      	movs	r3, #0
 8015850:	9310      	str	r3, [sp, #64]	@ 0x40
 8015852:	18bd      	adds	r5, r7, r2
 8015854:	9b08      	ldr	r3, [sp, #32]
 8015856:	42af      	cmp	r7, r5
 8015858:	4416      	add	r6, r2
 801585a:	441e      	add	r6, r3
 801585c:	463b      	mov	r3, r7
 801585e:	bfa8      	it	ge
 8015860:	462b      	movge	r3, r5
 8015862:	42b3      	cmp	r3, r6
 8015864:	bfa8      	it	ge
 8015866:	4633      	movge	r3, r6
 8015868:	2b00      	cmp	r3, #0
 801586a:	bfc2      	ittt	gt
 801586c:	1aed      	subgt	r5, r5, r3
 801586e:	1af6      	subgt	r6, r6, r3
 8015870:	1aff      	subgt	r7, r7, r3
 8015872:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8015874:	2b00      	cmp	r3, #0
 8015876:	dd16      	ble.n	80158a6 <_strtod_l+0x736>
 8015878:	4641      	mov	r1, r8
 801587a:	9805      	ldr	r0, [sp, #20]
 801587c:	461a      	mov	r2, r3
 801587e:	f7ff f99b 	bl	8014bb8 <__pow5mult>
 8015882:	4680      	mov	r8, r0
 8015884:	2800      	cmp	r0, #0
 8015886:	d0ba      	beq.n	80157fe <_strtod_l+0x68e>
 8015888:	4601      	mov	r1, r0
 801588a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801588c:	9805      	ldr	r0, [sp, #20]
 801588e:	f7ff f8e9 	bl	8014a64 <__multiply>
 8015892:	900e      	str	r0, [sp, #56]	@ 0x38
 8015894:	2800      	cmp	r0, #0
 8015896:	f43f ae8a 	beq.w	80155ae <_strtod_l+0x43e>
 801589a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801589c:	9805      	ldr	r0, [sp, #20]
 801589e:	f7fe ffcd 	bl	801483c <_Bfree>
 80158a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80158a4:	931a      	str	r3, [sp, #104]	@ 0x68
 80158a6:	2d00      	cmp	r5, #0
 80158a8:	dc1d      	bgt.n	80158e6 <_strtod_l+0x776>
 80158aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80158ac:	2b00      	cmp	r3, #0
 80158ae:	dd23      	ble.n	80158f8 <_strtod_l+0x788>
 80158b0:	4649      	mov	r1, r9
 80158b2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80158b4:	9805      	ldr	r0, [sp, #20]
 80158b6:	f7ff f97f 	bl	8014bb8 <__pow5mult>
 80158ba:	4681      	mov	r9, r0
 80158bc:	b9e0      	cbnz	r0, 80158f8 <_strtod_l+0x788>
 80158be:	f04f 0900 	mov.w	r9, #0
 80158c2:	e674      	b.n	80155ae <_strtod_l+0x43e>
 80158c4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80158c8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80158cc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80158d0:	35e2      	adds	r5, #226	@ 0xe2
 80158d2:	fa01 f305 	lsl.w	r3, r1, r5
 80158d6:	9310      	str	r3, [sp, #64]	@ 0x40
 80158d8:	9113      	str	r1, [sp, #76]	@ 0x4c
 80158da:	e7ba      	b.n	8015852 <_strtod_l+0x6e2>
 80158dc:	2300      	movs	r3, #0
 80158de:	9310      	str	r3, [sp, #64]	@ 0x40
 80158e0:	2301      	movs	r3, #1
 80158e2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80158e4:	e7b5      	b.n	8015852 <_strtod_l+0x6e2>
 80158e6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80158e8:	9805      	ldr	r0, [sp, #20]
 80158ea:	462a      	mov	r2, r5
 80158ec:	f7ff f9be 	bl	8014c6c <__lshift>
 80158f0:	901a      	str	r0, [sp, #104]	@ 0x68
 80158f2:	2800      	cmp	r0, #0
 80158f4:	d1d9      	bne.n	80158aa <_strtod_l+0x73a>
 80158f6:	e65a      	b.n	80155ae <_strtod_l+0x43e>
 80158f8:	2e00      	cmp	r6, #0
 80158fa:	dd07      	ble.n	801590c <_strtod_l+0x79c>
 80158fc:	4649      	mov	r1, r9
 80158fe:	9805      	ldr	r0, [sp, #20]
 8015900:	4632      	mov	r2, r6
 8015902:	f7ff f9b3 	bl	8014c6c <__lshift>
 8015906:	4681      	mov	r9, r0
 8015908:	2800      	cmp	r0, #0
 801590a:	d0d8      	beq.n	80158be <_strtod_l+0x74e>
 801590c:	2f00      	cmp	r7, #0
 801590e:	dd08      	ble.n	8015922 <_strtod_l+0x7b2>
 8015910:	4641      	mov	r1, r8
 8015912:	9805      	ldr	r0, [sp, #20]
 8015914:	463a      	mov	r2, r7
 8015916:	f7ff f9a9 	bl	8014c6c <__lshift>
 801591a:	4680      	mov	r8, r0
 801591c:	2800      	cmp	r0, #0
 801591e:	f43f ae46 	beq.w	80155ae <_strtod_l+0x43e>
 8015922:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8015924:	9805      	ldr	r0, [sp, #20]
 8015926:	464a      	mov	r2, r9
 8015928:	f7ff fa28 	bl	8014d7c <__mdiff>
 801592c:	4604      	mov	r4, r0
 801592e:	2800      	cmp	r0, #0
 8015930:	f43f ae3d 	beq.w	80155ae <_strtod_l+0x43e>
 8015934:	68c3      	ldr	r3, [r0, #12]
 8015936:	930f      	str	r3, [sp, #60]	@ 0x3c
 8015938:	2300      	movs	r3, #0
 801593a:	60c3      	str	r3, [r0, #12]
 801593c:	4641      	mov	r1, r8
 801593e:	f7ff fa01 	bl	8014d44 <__mcmp>
 8015942:	2800      	cmp	r0, #0
 8015944:	da46      	bge.n	80159d4 <_strtod_l+0x864>
 8015946:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015948:	ea53 030a 	orrs.w	r3, r3, sl
 801594c:	d16c      	bne.n	8015a28 <_strtod_l+0x8b8>
 801594e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015952:	2b00      	cmp	r3, #0
 8015954:	d168      	bne.n	8015a28 <_strtod_l+0x8b8>
 8015956:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801595a:	0d1b      	lsrs	r3, r3, #20
 801595c:	051b      	lsls	r3, r3, #20
 801595e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8015962:	d961      	bls.n	8015a28 <_strtod_l+0x8b8>
 8015964:	6963      	ldr	r3, [r4, #20]
 8015966:	b913      	cbnz	r3, 801596e <_strtod_l+0x7fe>
 8015968:	6923      	ldr	r3, [r4, #16]
 801596a:	2b01      	cmp	r3, #1
 801596c:	dd5c      	ble.n	8015a28 <_strtod_l+0x8b8>
 801596e:	4621      	mov	r1, r4
 8015970:	2201      	movs	r2, #1
 8015972:	9805      	ldr	r0, [sp, #20]
 8015974:	f7ff f97a 	bl	8014c6c <__lshift>
 8015978:	4641      	mov	r1, r8
 801597a:	4604      	mov	r4, r0
 801597c:	f7ff f9e2 	bl	8014d44 <__mcmp>
 8015980:	2800      	cmp	r0, #0
 8015982:	dd51      	ble.n	8015a28 <_strtod_l+0x8b8>
 8015984:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8015988:	9a08      	ldr	r2, [sp, #32]
 801598a:	0d1b      	lsrs	r3, r3, #20
 801598c:	051b      	lsls	r3, r3, #20
 801598e:	2a00      	cmp	r2, #0
 8015990:	d06b      	beq.n	8015a6a <_strtod_l+0x8fa>
 8015992:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8015996:	d868      	bhi.n	8015a6a <_strtod_l+0x8fa>
 8015998:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 801599c:	f67f ae9d 	bls.w	80156da <_strtod_l+0x56a>
 80159a0:	4b0a      	ldr	r3, [pc, #40]	@ (80159cc <_strtod_l+0x85c>)
 80159a2:	4650      	mov	r0, sl
 80159a4:	4659      	mov	r1, fp
 80159a6:	2200      	movs	r2, #0
 80159a8:	f7ea fe56 	bl	8000658 <__aeabi_dmul>
 80159ac:	4b08      	ldr	r3, [pc, #32]	@ (80159d0 <_strtod_l+0x860>)
 80159ae:	400b      	ands	r3, r1
 80159b0:	4682      	mov	sl, r0
 80159b2:	468b      	mov	fp, r1
 80159b4:	2b00      	cmp	r3, #0
 80159b6:	f47f ae05 	bne.w	80155c4 <_strtod_l+0x454>
 80159ba:	9a05      	ldr	r2, [sp, #20]
 80159bc:	2322      	movs	r3, #34	@ 0x22
 80159be:	6013      	str	r3, [r2, #0]
 80159c0:	e600      	b.n	80155c4 <_strtod_l+0x454>
 80159c2:	bf00      	nop
 80159c4:	0805d950 	.word	0x0805d950
 80159c8:	fffffc02 	.word	0xfffffc02
 80159cc:	39500000 	.word	0x39500000
 80159d0:	7ff00000 	.word	0x7ff00000
 80159d4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80159d8:	d165      	bne.n	8015aa6 <_strtod_l+0x936>
 80159da:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80159dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80159e0:	b35a      	cbz	r2, 8015a3a <_strtod_l+0x8ca>
 80159e2:	4a9f      	ldr	r2, [pc, #636]	@ (8015c60 <_strtod_l+0xaf0>)
 80159e4:	4293      	cmp	r3, r2
 80159e6:	d12b      	bne.n	8015a40 <_strtod_l+0x8d0>
 80159e8:	9b08      	ldr	r3, [sp, #32]
 80159ea:	4651      	mov	r1, sl
 80159ec:	b303      	cbz	r3, 8015a30 <_strtod_l+0x8c0>
 80159ee:	4b9d      	ldr	r3, [pc, #628]	@ (8015c64 <_strtod_l+0xaf4>)
 80159f0:	465a      	mov	r2, fp
 80159f2:	4013      	ands	r3, r2
 80159f4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80159f8:	f04f 32ff 	mov.w	r2, #4294967295
 80159fc:	d81b      	bhi.n	8015a36 <_strtod_l+0x8c6>
 80159fe:	0d1b      	lsrs	r3, r3, #20
 8015a00:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8015a04:	fa02 f303 	lsl.w	r3, r2, r3
 8015a08:	4299      	cmp	r1, r3
 8015a0a:	d119      	bne.n	8015a40 <_strtod_l+0x8d0>
 8015a0c:	4b96      	ldr	r3, [pc, #600]	@ (8015c68 <_strtod_l+0xaf8>)
 8015a0e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015a10:	429a      	cmp	r2, r3
 8015a12:	d102      	bne.n	8015a1a <_strtod_l+0x8aa>
 8015a14:	3101      	adds	r1, #1
 8015a16:	f43f adca 	beq.w	80155ae <_strtod_l+0x43e>
 8015a1a:	4b92      	ldr	r3, [pc, #584]	@ (8015c64 <_strtod_l+0xaf4>)
 8015a1c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015a1e:	401a      	ands	r2, r3
 8015a20:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8015a24:	f04f 0a00 	mov.w	sl, #0
 8015a28:	9b08      	ldr	r3, [sp, #32]
 8015a2a:	2b00      	cmp	r3, #0
 8015a2c:	d1b8      	bne.n	80159a0 <_strtod_l+0x830>
 8015a2e:	e5c9      	b.n	80155c4 <_strtod_l+0x454>
 8015a30:	f04f 33ff 	mov.w	r3, #4294967295
 8015a34:	e7e8      	b.n	8015a08 <_strtod_l+0x898>
 8015a36:	4613      	mov	r3, r2
 8015a38:	e7e6      	b.n	8015a08 <_strtod_l+0x898>
 8015a3a:	ea53 030a 	orrs.w	r3, r3, sl
 8015a3e:	d0a1      	beq.n	8015984 <_strtod_l+0x814>
 8015a40:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015a42:	b1db      	cbz	r3, 8015a7c <_strtod_l+0x90c>
 8015a44:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015a46:	4213      	tst	r3, r2
 8015a48:	d0ee      	beq.n	8015a28 <_strtod_l+0x8b8>
 8015a4a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015a4c:	9a08      	ldr	r2, [sp, #32]
 8015a4e:	4650      	mov	r0, sl
 8015a50:	4659      	mov	r1, fp
 8015a52:	b1bb      	cbz	r3, 8015a84 <_strtod_l+0x914>
 8015a54:	f7ff fb6c 	bl	8015130 <sulp>
 8015a58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8015a5c:	ec53 2b10 	vmov	r2, r3, d0
 8015a60:	f7ea fc44 	bl	80002ec <__adddf3>
 8015a64:	4682      	mov	sl, r0
 8015a66:	468b      	mov	fp, r1
 8015a68:	e7de      	b.n	8015a28 <_strtod_l+0x8b8>
 8015a6a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8015a6e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8015a72:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8015a76:	f04f 3aff 	mov.w	sl, #4294967295
 8015a7a:	e7d5      	b.n	8015a28 <_strtod_l+0x8b8>
 8015a7c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8015a7e:	ea13 0f0a 	tst.w	r3, sl
 8015a82:	e7e1      	b.n	8015a48 <_strtod_l+0x8d8>
 8015a84:	f7ff fb54 	bl	8015130 <sulp>
 8015a88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8015a8c:	ec53 2b10 	vmov	r2, r3, d0
 8015a90:	f7ea fc2a 	bl	80002e8 <__aeabi_dsub>
 8015a94:	2200      	movs	r2, #0
 8015a96:	2300      	movs	r3, #0
 8015a98:	4682      	mov	sl, r0
 8015a9a:	468b      	mov	fp, r1
 8015a9c:	f7eb f844 	bl	8000b28 <__aeabi_dcmpeq>
 8015aa0:	2800      	cmp	r0, #0
 8015aa2:	d0c1      	beq.n	8015a28 <_strtod_l+0x8b8>
 8015aa4:	e619      	b.n	80156da <_strtod_l+0x56a>
 8015aa6:	4641      	mov	r1, r8
 8015aa8:	4620      	mov	r0, r4
 8015aaa:	f7ff fac3 	bl	8015034 <__ratio>
 8015aae:	ec57 6b10 	vmov	r6, r7, d0
 8015ab2:	2200      	movs	r2, #0
 8015ab4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8015ab8:	4630      	mov	r0, r6
 8015aba:	4639      	mov	r1, r7
 8015abc:	f7eb f848 	bl	8000b50 <__aeabi_dcmple>
 8015ac0:	2800      	cmp	r0, #0
 8015ac2:	d06f      	beq.n	8015ba4 <_strtod_l+0xa34>
 8015ac4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015ac6:	2b00      	cmp	r3, #0
 8015ac8:	d17a      	bne.n	8015bc0 <_strtod_l+0xa50>
 8015aca:	f1ba 0f00 	cmp.w	sl, #0
 8015ace:	d158      	bne.n	8015b82 <_strtod_l+0xa12>
 8015ad0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015ad2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015ad6:	2b00      	cmp	r3, #0
 8015ad8:	d15a      	bne.n	8015b90 <_strtod_l+0xa20>
 8015ada:	4b64      	ldr	r3, [pc, #400]	@ (8015c6c <_strtod_l+0xafc>)
 8015adc:	2200      	movs	r2, #0
 8015ade:	4630      	mov	r0, r6
 8015ae0:	4639      	mov	r1, r7
 8015ae2:	f7eb f82b 	bl	8000b3c <__aeabi_dcmplt>
 8015ae6:	2800      	cmp	r0, #0
 8015ae8:	d159      	bne.n	8015b9e <_strtod_l+0xa2e>
 8015aea:	4630      	mov	r0, r6
 8015aec:	4639      	mov	r1, r7
 8015aee:	4b60      	ldr	r3, [pc, #384]	@ (8015c70 <_strtod_l+0xb00>)
 8015af0:	2200      	movs	r2, #0
 8015af2:	f7ea fdb1 	bl	8000658 <__aeabi_dmul>
 8015af6:	4606      	mov	r6, r0
 8015af8:	460f      	mov	r7, r1
 8015afa:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8015afe:	9606      	str	r6, [sp, #24]
 8015b00:	9307      	str	r3, [sp, #28]
 8015b02:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015b06:	4d57      	ldr	r5, [pc, #348]	@ (8015c64 <_strtod_l+0xaf4>)
 8015b08:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8015b0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015b0e:	401d      	ands	r5, r3
 8015b10:	4b58      	ldr	r3, [pc, #352]	@ (8015c74 <_strtod_l+0xb04>)
 8015b12:	429d      	cmp	r5, r3
 8015b14:	f040 80b2 	bne.w	8015c7c <_strtod_l+0xb0c>
 8015b18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015b1a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8015b1e:	ec4b ab10 	vmov	d0, sl, fp
 8015b22:	f7ff f9bf 	bl	8014ea4 <__ulp>
 8015b26:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015b2a:	ec51 0b10 	vmov	r0, r1, d0
 8015b2e:	f7ea fd93 	bl	8000658 <__aeabi_dmul>
 8015b32:	4652      	mov	r2, sl
 8015b34:	465b      	mov	r3, fp
 8015b36:	f7ea fbd9 	bl	80002ec <__adddf3>
 8015b3a:	460b      	mov	r3, r1
 8015b3c:	4949      	ldr	r1, [pc, #292]	@ (8015c64 <_strtod_l+0xaf4>)
 8015b3e:	4a4e      	ldr	r2, [pc, #312]	@ (8015c78 <_strtod_l+0xb08>)
 8015b40:	4019      	ands	r1, r3
 8015b42:	4291      	cmp	r1, r2
 8015b44:	4682      	mov	sl, r0
 8015b46:	d942      	bls.n	8015bce <_strtod_l+0xa5e>
 8015b48:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8015b4a:	4b47      	ldr	r3, [pc, #284]	@ (8015c68 <_strtod_l+0xaf8>)
 8015b4c:	429a      	cmp	r2, r3
 8015b4e:	d103      	bne.n	8015b58 <_strtod_l+0x9e8>
 8015b50:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015b52:	3301      	adds	r3, #1
 8015b54:	f43f ad2b 	beq.w	80155ae <_strtod_l+0x43e>
 8015b58:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8015c68 <_strtod_l+0xaf8>
 8015b5c:	f04f 3aff 	mov.w	sl, #4294967295
 8015b60:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8015b62:	9805      	ldr	r0, [sp, #20]
 8015b64:	f7fe fe6a 	bl	801483c <_Bfree>
 8015b68:	9805      	ldr	r0, [sp, #20]
 8015b6a:	4649      	mov	r1, r9
 8015b6c:	f7fe fe66 	bl	801483c <_Bfree>
 8015b70:	9805      	ldr	r0, [sp, #20]
 8015b72:	4641      	mov	r1, r8
 8015b74:	f7fe fe62 	bl	801483c <_Bfree>
 8015b78:	9805      	ldr	r0, [sp, #20]
 8015b7a:	4621      	mov	r1, r4
 8015b7c:	f7fe fe5e 	bl	801483c <_Bfree>
 8015b80:	e618      	b.n	80157b4 <_strtod_l+0x644>
 8015b82:	f1ba 0f01 	cmp.w	sl, #1
 8015b86:	d103      	bne.n	8015b90 <_strtod_l+0xa20>
 8015b88:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015b8a:	2b00      	cmp	r3, #0
 8015b8c:	f43f ada5 	beq.w	80156da <_strtod_l+0x56a>
 8015b90:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8015c40 <_strtod_l+0xad0>
 8015b94:	4f35      	ldr	r7, [pc, #212]	@ (8015c6c <_strtod_l+0xafc>)
 8015b96:	ed8d 7b06 	vstr	d7, [sp, #24]
 8015b9a:	2600      	movs	r6, #0
 8015b9c:	e7b1      	b.n	8015b02 <_strtod_l+0x992>
 8015b9e:	4f34      	ldr	r7, [pc, #208]	@ (8015c70 <_strtod_l+0xb00>)
 8015ba0:	2600      	movs	r6, #0
 8015ba2:	e7aa      	b.n	8015afa <_strtod_l+0x98a>
 8015ba4:	4b32      	ldr	r3, [pc, #200]	@ (8015c70 <_strtod_l+0xb00>)
 8015ba6:	4630      	mov	r0, r6
 8015ba8:	4639      	mov	r1, r7
 8015baa:	2200      	movs	r2, #0
 8015bac:	f7ea fd54 	bl	8000658 <__aeabi_dmul>
 8015bb0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015bb2:	4606      	mov	r6, r0
 8015bb4:	460f      	mov	r7, r1
 8015bb6:	2b00      	cmp	r3, #0
 8015bb8:	d09f      	beq.n	8015afa <_strtod_l+0x98a>
 8015bba:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8015bbe:	e7a0      	b.n	8015b02 <_strtod_l+0x992>
 8015bc0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8015c48 <_strtod_l+0xad8>
 8015bc4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8015bc8:	ec57 6b17 	vmov	r6, r7, d7
 8015bcc:	e799      	b.n	8015b02 <_strtod_l+0x992>
 8015bce:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8015bd2:	9b08      	ldr	r3, [sp, #32]
 8015bd4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8015bd8:	2b00      	cmp	r3, #0
 8015bda:	d1c1      	bne.n	8015b60 <_strtod_l+0x9f0>
 8015bdc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8015be0:	0d1b      	lsrs	r3, r3, #20
 8015be2:	051b      	lsls	r3, r3, #20
 8015be4:	429d      	cmp	r5, r3
 8015be6:	d1bb      	bne.n	8015b60 <_strtod_l+0x9f0>
 8015be8:	4630      	mov	r0, r6
 8015bea:	4639      	mov	r1, r7
 8015bec:	f7eb f894 	bl	8000d18 <__aeabi_d2lz>
 8015bf0:	f7ea fd04 	bl	80005fc <__aeabi_l2d>
 8015bf4:	4602      	mov	r2, r0
 8015bf6:	460b      	mov	r3, r1
 8015bf8:	4630      	mov	r0, r6
 8015bfa:	4639      	mov	r1, r7
 8015bfc:	f7ea fb74 	bl	80002e8 <__aeabi_dsub>
 8015c00:	460b      	mov	r3, r1
 8015c02:	4602      	mov	r2, r0
 8015c04:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8015c08:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8015c0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015c0e:	ea46 060a 	orr.w	r6, r6, sl
 8015c12:	431e      	orrs	r6, r3
 8015c14:	d06f      	beq.n	8015cf6 <_strtod_l+0xb86>
 8015c16:	a30e      	add	r3, pc, #56	@ (adr r3, 8015c50 <_strtod_l+0xae0>)
 8015c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c1c:	f7ea ff8e 	bl	8000b3c <__aeabi_dcmplt>
 8015c20:	2800      	cmp	r0, #0
 8015c22:	f47f accf 	bne.w	80155c4 <_strtod_l+0x454>
 8015c26:	a30c      	add	r3, pc, #48	@ (adr r3, 8015c58 <_strtod_l+0xae8>)
 8015c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c2c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8015c30:	f7ea ffa2 	bl	8000b78 <__aeabi_dcmpgt>
 8015c34:	2800      	cmp	r0, #0
 8015c36:	d093      	beq.n	8015b60 <_strtod_l+0x9f0>
 8015c38:	e4c4      	b.n	80155c4 <_strtod_l+0x454>
 8015c3a:	bf00      	nop
 8015c3c:	f3af 8000 	nop.w
 8015c40:	00000000 	.word	0x00000000
 8015c44:	bff00000 	.word	0xbff00000
 8015c48:	00000000 	.word	0x00000000
 8015c4c:	3ff00000 	.word	0x3ff00000
 8015c50:	94a03595 	.word	0x94a03595
 8015c54:	3fdfffff 	.word	0x3fdfffff
 8015c58:	35afe535 	.word	0x35afe535
 8015c5c:	3fe00000 	.word	0x3fe00000
 8015c60:	000fffff 	.word	0x000fffff
 8015c64:	7ff00000 	.word	0x7ff00000
 8015c68:	7fefffff 	.word	0x7fefffff
 8015c6c:	3ff00000 	.word	0x3ff00000
 8015c70:	3fe00000 	.word	0x3fe00000
 8015c74:	7fe00000 	.word	0x7fe00000
 8015c78:	7c9fffff 	.word	0x7c9fffff
 8015c7c:	9b08      	ldr	r3, [sp, #32]
 8015c7e:	b323      	cbz	r3, 8015cca <_strtod_l+0xb5a>
 8015c80:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8015c84:	d821      	bhi.n	8015cca <_strtod_l+0xb5a>
 8015c86:	a328      	add	r3, pc, #160	@ (adr r3, 8015d28 <_strtod_l+0xbb8>)
 8015c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c8c:	4630      	mov	r0, r6
 8015c8e:	4639      	mov	r1, r7
 8015c90:	f7ea ff5e 	bl	8000b50 <__aeabi_dcmple>
 8015c94:	b1a0      	cbz	r0, 8015cc0 <_strtod_l+0xb50>
 8015c96:	4639      	mov	r1, r7
 8015c98:	4630      	mov	r0, r6
 8015c9a:	f7ea ffb5 	bl	8000c08 <__aeabi_d2uiz>
 8015c9e:	2801      	cmp	r0, #1
 8015ca0:	bf38      	it	cc
 8015ca2:	2001      	movcc	r0, #1
 8015ca4:	f7ea fc5e 	bl	8000564 <__aeabi_ui2d>
 8015ca8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015caa:	4606      	mov	r6, r0
 8015cac:	460f      	mov	r7, r1
 8015cae:	b9fb      	cbnz	r3, 8015cf0 <_strtod_l+0xb80>
 8015cb0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8015cb4:	9014      	str	r0, [sp, #80]	@ 0x50
 8015cb6:	9315      	str	r3, [sp, #84]	@ 0x54
 8015cb8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8015cbc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8015cc0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015cc2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8015cc6:	1b5b      	subs	r3, r3, r5
 8015cc8:	9311      	str	r3, [sp, #68]	@ 0x44
 8015cca:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8015cce:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8015cd2:	f7ff f8e7 	bl	8014ea4 <__ulp>
 8015cd6:	4650      	mov	r0, sl
 8015cd8:	ec53 2b10 	vmov	r2, r3, d0
 8015cdc:	4659      	mov	r1, fp
 8015cde:	f7ea fcbb 	bl	8000658 <__aeabi_dmul>
 8015ce2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8015ce6:	f7ea fb01 	bl	80002ec <__adddf3>
 8015cea:	4682      	mov	sl, r0
 8015cec:	468b      	mov	fp, r1
 8015cee:	e770      	b.n	8015bd2 <_strtod_l+0xa62>
 8015cf0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8015cf4:	e7e0      	b.n	8015cb8 <_strtod_l+0xb48>
 8015cf6:	a30e      	add	r3, pc, #56	@ (adr r3, 8015d30 <_strtod_l+0xbc0>)
 8015cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cfc:	f7ea ff1e 	bl	8000b3c <__aeabi_dcmplt>
 8015d00:	e798      	b.n	8015c34 <_strtod_l+0xac4>
 8015d02:	2300      	movs	r3, #0
 8015d04:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015d06:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8015d08:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8015d0a:	6013      	str	r3, [r2, #0]
 8015d0c:	f7ff ba6d 	b.w	80151ea <_strtod_l+0x7a>
 8015d10:	2a65      	cmp	r2, #101	@ 0x65
 8015d12:	f43f ab66 	beq.w	80153e2 <_strtod_l+0x272>
 8015d16:	2a45      	cmp	r2, #69	@ 0x45
 8015d18:	f43f ab63 	beq.w	80153e2 <_strtod_l+0x272>
 8015d1c:	2301      	movs	r3, #1
 8015d1e:	f7ff bb9e 	b.w	801545e <_strtod_l+0x2ee>
 8015d22:	bf00      	nop
 8015d24:	f3af 8000 	nop.w
 8015d28:	ffc00000 	.word	0xffc00000
 8015d2c:	41dfffff 	.word	0x41dfffff
 8015d30:	94a03595 	.word	0x94a03595
 8015d34:	3fcfffff 	.word	0x3fcfffff

08015d38 <_strtod_r>:
 8015d38:	4b01      	ldr	r3, [pc, #4]	@ (8015d40 <_strtod_r+0x8>)
 8015d3a:	f7ff ba19 	b.w	8015170 <_strtod_l>
 8015d3e:	bf00      	nop
 8015d40:	200014b8 	.word	0x200014b8

08015d44 <_strtol_l.constprop.0>:
 8015d44:	2b24      	cmp	r3, #36	@ 0x24
 8015d46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015d4a:	4686      	mov	lr, r0
 8015d4c:	4690      	mov	r8, r2
 8015d4e:	d801      	bhi.n	8015d54 <_strtol_l.constprop.0+0x10>
 8015d50:	2b01      	cmp	r3, #1
 8015d52:	d106      	bne.n	8015d62 <_strtol_l.constprop.0+0x1e>
 8015d54:	f7fd fe34 	bl	80139c0 <__errno>
 8015d58:	2316      	movs	r3, #22
 8015d5a:	6003      	str	r3, [r0, #0]
 8015d5c:	2000      	movs	r0, #0
 8015d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015d62:	4834      	ldr	r0, [pc, #208]	@ (8015e34 <_strtol_l.constprop.0+0xf0>)
 8015d64:	460d      	mov	r5, r1
 8015d66:	462a      	mov	r2, r5
 8015d68:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015d6c:	5d06      	ldrb	r6, [r0, r4]
 8015d6e:	f016 0608 	ands.w	r6, r6, #8
 8015d72:	d1f8      	bne.n	8015d66 <_strtol_l.constprop.0+0x22>
 8015d74:	2c2d      	cmp	r4, #45	@ 0x2d
 8015d76:	d12d      	bne.n	8015dd4 <_strtol_l.constprop.0+0x90>
 8015d78:	782c      	ldrb	r4, [r5, #0]
 8015d7a:	2601      	movs	r6, #1
 8015d7c:	1c95      	adds	r5, r2, #2
 8015d7e:	f033 0210 	bics.w	r2, r3, #16
 8015d82:	d109      	bne.n	8015d98 <_strtol_l.constprop.0+0x54>
 8015d84:	2c30      	cmp	r4, #48	@ 0x30
 8015d86:	d12a      	bne.n	8015dde <_strtol_l.constprop.0+0x9a>
 8015d88:	782a      	ldrb	r2, [r5, #0]
 8015d8a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8015d8e:	2a58      	cmp	r2, #88	@ 0x58
 8015d90:	d125      	bne.n	8015dde <_strtol_l.constprop.0+0x9a>
 8015d92:	786c      	ldrb	r4, [r5, #1]
 8015d94:	2310      	movs	r3, #16
 8015d96:	3502      	adds	r5, #2
 8015d98:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8015d9c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8015da0:	2200      	movs	r2, #0
 8015da2:	fbbc f9f3 	udiv	r9, ip, r3
 8015da6:	4610      	mov	r0, r2
 8015da8:	fb03 ca19 	mls	sl, r3, r9, ip
 8015dac:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8015db0:	2f09      	cmp	r7, #9
 8015db2:	d81b      	bhi.n	8015dec <_strtol_l.constprop.0+0xa8>
 8015db4:	463c      	mov	r4, r7
 8015db6:	42a3      	cmp	r3, r4
 8015db8:	dd27      	ble.n	8015e0a <_strtol_l.constprop.0+0xc6>
 8015dba:	1c57      	adds	r7, r2, #1
 8015dbc:	d007      	beq.n	8015dce <_strtol_l.constprop.0+0x8a>
 8015dbe:	4581      	cmp	r9, r0
 8015dc0:	d320      	bcc.n	8015e04 <_strtol_l.constprop.0+0xc0>
 8015dc2:	d101      	bne.n	8015dc8 <_strtol_l.constprop.0+0x84>
 8015dc4:	45a2      	cmp	sl, r4
 8015dc6:	db1d      	blt.n	8015e04 <_strtol_l.constprop.0+0xc0>
 8015dc8:	fb00 4003 	mla	r0, r0, r3, r4
 8015dcc:	2201      	movs	r2, #1
 8015dce:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015dd2:	e7eb      	b.n	8015dac <_strtol_l.constprop.0+0x68>
 8015dd4:	2c2b      	cmp	r4, #43	@ 0x2b
 8015dd6:	bf04      	itt	eq
 8015dd8:	782c      	ldrbeq	r4, [r5, #0]
 8015dda:	1c95      	addeq	r5, r2, #2
 8015ddc:	e7cf      	b.n	8015d7e <_strtol_l.constprop.0+0x3a>
 8015dde:	2b00      	cmp	r3, #0
 8015de0:	d1da      	bne.n	8015d98 <_strtol_l.constprop.0+0x54>
 8015de2:	2c30      	cmp	r4, #48	@ 0x30
 8015de4:	bf0c      	ite	eq
 8015de6:	2308      	moveq	r3, #8
 8015de8:	230a      	movne	r3, #10
 8015dea:	e7d5      	b.n	8015d98 <_strtol_l.constprop.0+0x54>
 8015dec:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8015df0:	2f19      	cmp	r7, #25
 8015df2:	d801      	bhi.n	8015df8 <_strtol_l.constprop.0+0xb4>
 8015df4:	3c37      	subs	r4, #55	@ 0x37
 8015df6:	e7de      	b.n	8015db6 <_strtol_l.constprop.0+0x72>
 8015df8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8015dfc:	2f19      	cmp	r7, #25
 8015dfe:	d804      	bhi.n	8015e0a <_strtol_l.constprop.0+0xc6>
 8015e00:	3c57      	subs	r4, #87	@ 0x57
 8015e02:	e7d8      	b.n	8015db6 <_strtol_l.constprop.0+0x72>
 8015e04:	f04f 32ff 	mov.w	r2, #4294967295
 8015e08:	e7e1      	b.n	8015dce <_strtol_l.constprop.0+0x8a>
 8015e0a:	1c53      	adds	r3, r2, #1
 8015e0c:	d108      	bne.n	8015e20 <_strtol_l.constprop.0+0xdc>
 8015e0e:	2322      	movs	r3, #34	@ 0x22
 8015e10:	f8ce 3000 	str.w	r3, [lr]
 8015e14:	4660      	mov	r0, ip
 8015e16:	f1b8 0f00 	cmp.w	r8, #0
 8015e1a:	d0a0      	beq.n	8015d5e <_strtol_l.constprop.0+0x1a>
 8015e1c:	1e69      	subs	r1, r5, #1
 8015e1e:	e006      	b.n	8015e2e <_strtol_l.constprop.0+0xea>
 8015e20:	b106      	cbz	r6, 8015e24 <_strtol_l.constprop.0+0xe0>
 8015e22:	4240      	negs	r0, r0
 8015e24:	f1b8 0f00 	cmp.w	r8, #0
 8015e28:	d099      	beq.n	8015d5e <_strtol_l.constprop.0+0x1a>
 8015e2a:	2a00      	cmp	r2, #0
 8015e2c:	d1f6      	bne.n	8015e1c <_strtol_l.constprop.0+0xd8>
 8015e2e:	f8c8 1000 	str.w	r1, [r8]
 8015e32:	e794      	b.n	8015d5e <_strtol_l.constprop.0+0x1a>
 8015e34:	0805d979 	.word	0x0805d979

08015e38 <_strtol_r>:
 8015e38:	f7ff bf84 	b.w	8015d44 <_strtol_l.constprop.0>

08015e3c <__ssputs_r>:
 8015e3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015e40:	688e      	ldr	r6, [r1, #8]
 8015e42:	461f      	mov	r7, r3
 8015e44:	42be      	cmp	r6, r7
 8015e46:	680b      	ldr	r3, [r1, #0]
 8015e48:	4682      	mov	sl, r0
 8015e4a:	460c      	mov	r4, r1
 8015e4c:	4690      	mov	r8, r2
 8015e4e:	d82d      	bhi.n	8015eac <__ssputs_r+0x70>
 8015e50:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015e54:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8015e58:	d026      	beq.n	8015ea8 <__ssputs_r+0x6c>
 8015e5a:	6965      	ldr	r5, [r4, #20]
 8015e5c:	6909      	ldr	r1, [r1, #16]
 8015e5e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015e62:	eba3 0901 	sub.w	r9, r3, r1
 8015e66:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015e6a:	1c7b      	adds	r3, r7, #1
 8015e6c:	444b      	add	r3, r9
 8015e6e:	106d      	asrs	r5, r5, #1
 8015e70:	429d      	cmp	r5, r3
 8015e72:	bf38      	it	cc
 8015e74:	461d      	movcc	r5, r3
 8015e76:	0553      	lsls	r3, r2, #21
 8015e78:	d527      	bpl.n	8015eca <__ssputs_r+0x8e>
 8015e7a:	4629      	mov	r1, r5
 8015e7c:	f7fc fc6a 	bl	8012754 <_malloc_r>
 8015e80:	4606      	mov	r6, r0
 8015e82:	b360      	cbz	r0, 8015ede <__ssputs_r+0xa2>
 8015e84:	6921      	ldr	r1, [r4, #16]
 8015e86:	464a      	mov	r2, r9
 8015e88:	f7fd fdcf 	bl	8013a2a <memcpy>
 8015e8c:	89a3      	ldrh	r3, [r4, #12]
 8015e8e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8015e92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015e96:	81a3      	strh	r3, [r4, #12]
 8015e98:	6126      	str	r6, [r4, #16]
 8015e9a:	6165      	str	r5, [r4, #20]
 8015e9c:	444e      	add	r6, r9
 8015e9e:	eba5 0509 	sub.w	r5, r5, r9
 8015ea2:	6026      	str	r6, [r4, #0]
 8015ea4:	60a5      	str	r5, [r4, #8]
 8015ea6:	463e      	mov	r6, r7
 8015ea8:	42be      	cmp	r6, r7
 8015eaa:	d900      	bls.n	8015eae <__ssputs_r+0x72>
 8015eac:	463e      	mov	r6, r7
 8015eae:	6820      	ldr	r0, [r4, #0]
 8015eb0:	4632      	mov	r2, r6
 8015eb2:	4641      	mov	r1, r8
 8015eb4:	f000 fd65 	bl	8016982 <memmove>
 8015eb8:	68a3      	ldr	r3, [r4, #8]
 8015eba:	1b9b      	subs	r3, r3, r6
 8015ebc:	60a3      	str	r3, [r4, #8]
 8015ebe:	6823      	ldr	r3, [r4, #0]
 8015ec0:	4433      	add	r3, r6
 8015ec2:	6023      	str	r3, [r4, #0]
 8015ec4:	2000      	movs	r0, #0
 8015ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015eca:	462a      	mov	r2, r5
 8015ecc:	f7fc fcce 	bl	801286c <_realloc_r>
 8015ed0:	4606      	mov	r6, r0
 8015ed2:	2800      	cmp	r0, #0
 8015ed4:	d1e0      	bne.n	8015e98 <__ssputs_r+0x5c>
 8015ed6:	6921      	ldr	r1, [r4, #16]
 8015ed8:	4650      	mov	r0, sl
 8015eda:	f7fe fc25 	bl	8014728 <_free_r>
 8015ede:	230c      	movs	r3, #12
 8015ee0:	f8ca 3000 	str.w	r3, [sl]
 8015ee4:	89a3      	ldrh	r3, [r4, #12]
 8015ee6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015eea:	81a3      	strh	r3, [r4, #12]
 8015eec:	f04f 30ff 	mov.w	r0, #4294967295
 8015ef0:	e7e9      	b.n	8015ec6 <__ssputs_r+0x8a>
	...

08015ef4 <_svfiprintf_r>:
 8015ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ef8:	4698      	mov	r8, r3
 8015efa:	898b      	ldrh	r3, [r1, #12]
 8015efc:	061b      	lsls	r3, r3, #24
 8015efe:	b09d      	sub	sp, #116	@ 0x74
 8015f00:	4607      	mov	r7, r0
 8015f02:	460d      	mov	r5, r1
 8015f04:	4614      	mov	r4, r2
 8015f06:	d510      	bpl.n	8015f2a <_svfiprintf_r+0x36>
 8015f08:	690b      	ldr	r3, [r1, #16]
 8015f0a:	b973      	cbnz	r3, 8015f2a <_svfiprintf_r+0x36>
 8015f0c:	2140      	movs	r1, #64	@ 0x40
 8015f0e:	f7fc fc21 	bl	8012754 <_malloc_r>
 8015f12:	6028      	str	r0, [r5, #0]
 8015f14:	6128      	str	r0, [r5, #16]
 8015f16:	b930      	cbnz	r0, 8015f26 <_svfiprintf_r+0x32>
 8015f18:	230c      	movs	r3, #12
 8015f1a:	603b      	str	r3, [r7, #0]
 8015f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8015f20:	b01d      	add	sp, #116	@ 0x74
 8015f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f26:	2340      	movs	r3, #64	@ 0x40
 8015f28:	616b      	str	r3, [r5, #20]
 8015f2a:	2300      	movs	r3, #0
 8015f2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8015f2e:	2320      	movs	r3, #32
 8015f30:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015f34:	f8cd 800c 	str.w	r8, [sp, #12]
 8015f38:	2330      	movs	r3, #48	@ 0x30
 8015f3a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80160d8 <_svfiprintf_r+0x1e4>
 8015f3e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015f42:	f04f 0901 	mov.w	r9, #1
 8015f46:	4623      	mov	r3, r4
 8015f48:	469a      	mov	sl, r3
 8015f4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015f4e:	b10a      	cbz	r2, 8015f54 <_svfiprintf_r+0x60>
 8015f50:	2a25      	cmp	r2, #37	@ 0x25
 8015f52:	d1f9      	bne.n	8015f48 <_svfiprintf_r+0x54>
 8015f54:	ebba 0b04 	subs.w	fp, sl, r4
 8015f58:	d00b      	beq.n	8015f72 <_svfiprintf_r+0x7e>
 8015f5a:	465b      	mov	r3, fp
 8015f5c:	4622      	mov	r2, r4
 8015f5e:	4629      	mov	r1, r5
 8015f60:	4638      	mov	r0, r7
 8015f62:	f7ff ff6b 	bl	8015e3c <__ssputs_r>
 8015f66:	3001      	adds	r0, #1
 8015f68:	f000 80a7 	beq.w	80160ba <_svfiprintf_r+0x1c6>
 8015f6c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015f6e:	445a      	add	r2, fp
 8015f70:	9209      	str	r2, [sp, #36]	@ 0x24
 8015f72:	f89a 3000 	ldrb.w	r3, [sl]
 8015f76:	2b00      	cmp	r3, #0
 8015f78:	f000 809f 	beq.w	80160ba <_svfiprintf_r+0x1c6>
 8015f7c:	2300      	movs	r3, #0
 8015f7e:	f04f 32ff 	mov.w	r2, #4294967295
 8015f82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015f86:	f10a 0a01 	add.w	sl, sl, #1
 8015f8a:	9304      	str	r3, [sp, #16]
 8015f8c:	9307      	str	r3, [sp, #28]
 8015f8e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015f92:	931a      	str	r3, [sp, #104]	@ 0x68
 8015f94:	4654      	mov	r4, sl
 8015f96:	2205      	movs	r2, #5
 8015f98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015f9c:	484e      	ldr	r0, [pc, #312]	@ (80160d8 <_svfiprintf_r+0x1e4>)
 8015f9e:	f7ea f947 	bl	8000230 <memchr>
 8015fa2:	9a04      	ldr	r2, [sp, #16]
 8015fa4:	b9d8      	cbnz	r0, 8015fde <_svfiprintf_r+0xea>
 8015fa6:	06d0      	lsls	r0, r2, #27
 8015fa8:	bf44      	itt	mi
 8015faa:	2320      	movmi	r3, #32
 8015fac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015fb0:	0711      	lsls	r1, r2, #28
 8015fb2:	bf44      	itt	mi
 8015fb4:	232b      	movmi	r3, #43	@ 0x2b
 8015fb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015fba:	f89a 3000 	ldrb.w	r3, [sl]
 8015fbe:	2b2a      	cmp	r3, #42	@ 0x2a
 8015fc0:	d015      	beq.n	8015fee <_svfiprintf_r+0xfa>
 8015fc2:	9a07      	ldr	r2, [sp, #28]
 8015fc4:	4654      	mov	r4, sl
 8015fc6:	2000      	movs	r0, #0
 8015fc8:	f04f 0c0a 	mov.w	ip, #10
 8015fcc:	4621      	mov	r1, r4
 8015fce:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015fd2:	3b30      	subs	r3, #48	@ 0x30
 8015fd4:	2b09      	cmp	r3, #9
 8015fd6:	d94b      	bls.n	8016070 <_svfiprintf_r+0x17c>
 8015fd8:	b1b0      	cbz	r0, 8016008 <_svfiprintf_r+0x114>
 8015fda:	9207      	str	r2, [sp, #28]
 8015fdc:	e014      	b.n	8016008 <_svfiprintf_r+0x114>
 8015fde:	eba0 0308 	sub.w	r3, r0, r8
 8015fe2:	fa09 f303 	lsl.w	r3, r9, r3
 8015fe6:	4313      	orrs	r3, r2
 8015fe8:	9304      	str	r3, [sp, #16]
 8015fea:	46a2      	mov	sl, r4
 8015fec:	e7d2      	b.n	8015f94 <_svfiprintf_r+0xa0>
 8015fee:	9b03      	ldr	r3, [sp, #12]
 8015ff0:	1d19      	adds	r1, r3, #4
 8015ff2:	681b      	ldr	r3, [r3, #0]
 8015ff4:	9103      	str	r1, [sp, #12]
 8015ff6:	2b00      	cmp	r3, #0
 8015ff8:	bfbb      	ittet	lt
 8015ffa:	425b      	neglt	r3, r3
 8015ffc:	f042 0202 	orrlt.w	r2, r2, #2
 8016000:	9307      	strge	r3, [sp, #28]
 8016002:	9307      	strlt	r3, [sp, #28]
 8016004:	bfb8      	it	lt
 8016006:	9204      	strlt	r2, [sp, #16]
 8016008:	7823      	ldrb	r3, [r4, #0]
 801600a:	2b2e      	cmp	r3, #46	@ 0x2e
 801600c:	d10a      	bne.n	8016024 <_svfiprintf_r+0x130>
 801600e:	7863      	ldrb	r3, [r4, #1]
 8016010:	2b2a      	cmp	r3, #42	@ 0x2a
 8016012:	d132      	bne.n	801607a <_svfiprintf_r+0x186>
 8016014:	9b03      	ldr	r3, [sp, #12]
 8016016:	1d1a      	adds	r2, r3, #4
 8016018:	681b      	ldr	r3, [r3, #0]
 801601a:	9203      	str	r2, [sp, #12]
 801601c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016020:	3402      	adds	r4, #2
 8016022:	9305      	str	r3, [sp, #20]
 8016024:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80160e8 <_svfiprintf_r+0x1f4>
 8016028:	7821      	ldrb	r1, [r4, #0]
 801602a:	2203      	movs	r2, #3
 801602c:	4650      	mov	r0, sl
 801602e:	f7ea f8ff 	bl	8000230 <memchr>
 8016032:	b138      	cbz	r0, 8016044 <_svfiprintf_r+0x150>
 8016034:	9b04      	ldr	r3, [sp, #16]
 8016036:	eba0 000a 	sub.w	r0, r0, sl
 801603a:	2240      	movs	r2, #64	@ 0x40
 801603c:	4082      	lsls	r2, r0
 801603e:	4313      	orrs	r3, r2
 8016040:	3401      	adds	r4, #1
 8016042:	9304      	str	r3, [sp, #16]
 8016044:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016048:	4824      	ldr	r0, [pc, #144]	@ (80160dc <_svfiprintf_r+0x1e8>)
 801604a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801604e:	2206      	movs	r2, #6
 8016050:	f7ea f8ee 	bl	8000230 <memchr>
 8016054:	2800      	cmp	r0, #0
 8016056:	d036      	beq.n	80160c6 <_svfiprintf_r+0x1d2>
 8016058:	4b21      	ldr	r3, [pc, #132]	@ (80160e0 <_svfiprintf_r+0x1ec>)
 801605a:	bb1b      	cbnz	r3, 80160a4 <_svfiprintf_r+0x1b0>
 801605c:	9b03      	ldr	r3, [sp, #12]
 801605e:	3307      	adds	r3, #7
 8016060:	f023 0307 	bic.w	r3, r3, #7
 8016064:	3308      	adds	r3, #8
 8016066:	9303      	str	r3, [sp, #12]
 8016068:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801606a:	4433      	add	r3, r6
 801606c:	9309      	str	r3, [sp, #36]	@ 0x24
 801606e:	e76a      	b.n	8015f46 <_svfiprintf_r+0x52>
 8016070:	fb0c 3202 	mla	r2, ip, r2, r3
 8016074:	460c      	mov	r4, r1
 8016076:	2001      	movs	r0, #1
 8016078:	e7a8      	b.n	8015fcc <_svfiprintf_r+0xd8>
 801607a:	2300      	movs	r3, #0
 801607c:	3401      	adds	r4, #1
 801607e:	9305      	str	r3, [sp, #20]
 8016080:	4619      	mov	r1, r3
 8016082:	f04f 0c0a 	mov.w	ip, #10
 8016086:	4620      	mov	r0, r4
 8016088:	f810 2b01 	ldrb.w	r2, [r0], #1
 801608c:	3a30      	subs	r2, #48	@ 0x30
 801608e:	2a09      	cmp	r2, #9
 8016090:	d903      	bls.n	801609a <_svfiprintf_r+0x1a6>
 8016092:	2b00      	cmp	r3, #0
 8016094:	d0c6      	beq.n	8016024 <_svfiprintf_r+0x130>
 8016096:	9105      	str	r1, [sp, #20]
 8016098:	e7c4      	b.n	8016024 <_svfiprintf_r+0x130>
 801609a:	fb0c 2101 	mla	r1, ip, r1, r2
 801609e:	4604      	mov	r4, r0
 80160a0:	2301      	movs	r3, #1
 80160a2:	e7f0      	b.n	8016086 <_svfiprintf_r+0x192>
 80160a4:	ab03      	add	r3, sp, #12
 80160a6:	9300      	str	r3, [sp, #0]
 80160a8:	462a      	mov	r2, r5
 80160aa:	4b0e      	ldr	r3, [pc, #56]	@ (80160e4 <_svfiprintf_r+0x1f0>)
 80160ac:	a904      	add	r1, sp, #16
 80160ae:	4638      	mov	r0, r7
 80160b0:	f7fc fcaa 	bl	8012a08 <_printf_float>
 80160b4:	1c42      	adds	r2, r0, #1
 80160b6:	4606      	mov	r6, r0
 80160b8:	d1d6      	bne.n	8016068 <_svfiprintf_r+0x174>
 80160ba:	89ab      	ldrh	r3, [r5, #12]
 80160bc:	065b      	lsls	r3, r3, #25
 80160be:	f53f af2d 	bmi.w	8015f1c <_svfiprintf_r+0x28>
 80160c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80160c4:	e72c      	b.n	8015f20 <_svfiprintf_r+0x2c>
 80160c6:	ab03      	add	r3, sp, #12
 80160c8:	9300      	str	r3, [sp, #0]
 80160ca:	462a      	mov	r2, r5
 80160cc:	4b05      	ldr	r3, [pc, #20]	@ (80160e4 <_svfiprintf_r+0x1f0>)
 80160ce:	a904      	add	r1, sp, #16
 80160d0:	4638      	mov	r0, r7
 80160d2:	f7fc ff31 	bl	8012f38 <_printf_i>
 80160d6:	e7ed      	b.n	80160b4 <_svfiprintf_r+0x1c0>
 80160d8:	0805da79 	.word	0x0805da79
 80160dc:	0805da83 	.word	0x0805da83
 80160e0:	08012a09 	.word	0x08012a09
 80160e4:	08015e3d 	.word	0x08015e3d
 80160e8:	0805da7f 	.word	0x0805da7f

080160ec <_sungetc_r>:
 80160ec:	b538      	push	{r3, r4, r5, lr}
 80160ee:	1c4b      	adds	r3, r1, #1
 80160f0:	4614      	mov	r4, r2
 80160f2:	d103      	bne.n	80160fc <_sungetc_r+0x10>
 80160f4:	f04f 35ff 	mov.w	r5, #4294967295
 80160f8:	4628      	mov	r0, r5
 80160fa:	bd38      	pop	{r3, r4, r5, pc}
 80160fc:	8993      	ldrh	r3, [r2, #12]
 80160fe:	f023 0320 	bic.w	r3, r3, #32
 8016102:	8193      	strh	r3, [r2, #12]
 8016104:	6853      	ldr	r3, [r2, #4]
 8016106:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8016108:	b2cd      	uxtb	r5, r1
 801610a:	b18a      	cbz	r2, 8016130 <_sungetc_r+0x44>
 801610c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 801610e:	429a      	cmp	r2, r3
 8016110:	dd08      	ble.n	8016124 <_sungetc_r+0x38>
 8016112:	6823      	ldr	r3, [r4, #0]
 8016114:	1e5a      	subs	r2, r3, #1
 8016116:	6022      	str	r2, [r4, #0]
 8016118:	f803 5c01 	strb.w	r5, [r3, #-1]
 801611c:	6863      	ldr	r3, [r4, #4]
 801611e:	3301      	adds	r3, #1
 8016120:	6063      	str	r3, [r4, #4]
 8016122:	e7e9      	b.n	80160f8 <_sungetc_r+0xc>
 8016124:	4621      	mov	r1, r4
 8016126:	f000 fbf2 	bl	801690e <__submore>
 801612a:	2800      	cmp	r0, #0
 801612c:	d0f1      	beq.n	8016112 <_sungetc_r+0x26>
 801612e:	e7e1      	b.n	80160f4 <_sungetc_r+0x8>
 8016130:	6921      	ldr	r1, [r4, #16]
 8016132:	6822      	ldr	r2, [r4, #0]
 8016134:	b141      	cbz	r1, 8016148 <_sungetc_r+0x5c>
 8016136:	4291      	cmp	r1, r2
 8016138:	d206      	bcs.n	8016148 <_sungetc_r+0x5c>
 801613a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 801613e:	42a9      	cmp	r1, r5
 8016140:	d102      	bne.n	8016148 <_sungetc_r+0x5c>
 8016142:	3a01      	subs	r2, #1
 8016144:	6022      	str	r2, [r4, #0]
 8016146:	e7ea      	b.n	801611e <_sungetc_r+0x32>
 8016148:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 801614c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016150:	6363      	str	r3, [r4, #52]	@ 0x34
 8016152:	2303      	movs	r3, #3
 8016154:	63a3      	str	r3, [r4, #56]	@ 0x38
 8016156:	4623      	mov	r3, r4
 8016158:	f803 5f46 	strb.w	r5, [r3, #70]!
 801615c:	6023      	str	r3, [r4, #0]
 801615e:	2301      	movs	r3, #1
 8016160:	e7de      	b.n	8016120 <_sungetc_r+0x34>

08016162 <__ssrefill_r>:
 8016162:	b510      	push	{r4, lr}
 8016164:	460c      	mov	r4, r1
 8016166:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8016168:	b169      	cbz	r1, 8016186 <__ssrefill_r+0x24>
 801616a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801616e:	4299      	cmp	r1, r3
 8016170:	d001      	beq.n	8016176 <__ssrefill_r+0x14>
 8016172:	f7fe fad9 	bl	8014728 <_free_r>
 8016176:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8016178:	6063      	str	r3, [r4, #4]
 801617a:	2000      	movs	r0, #0
 801617c:	6360      	str	r0, [r4, #52]	@ 0x34
 801617e:	b113      	cbz	r3, 8016186 <__ssrefill_r+0x24>
 8016180:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8016182:	6023      	str	r3, [r4, #0]
 8016184:	bd10      	pop	{r4, pc}
 8016186:	6923      	ldr	r3, [r4, #16]
 8016188:	6023      	str	r3, [r4, #0]
 801618a:	2300      	movs	r3, #0
 801618c:	6063      	str	r3, [r4, #4]
 801618e:	89a3      	ldrh	r3, [r4, #12]
 8016190:	f043 0320 	orr.w	r3, r3, #32
 8016194:	81a3      	strh	r3, [r4, #12]
 8016196:	f04f 30ff 	mov.w	r0, #4294967295
 801619a:	e7f3      	b.n	8016184 <__ssrefill_r+0x22>

0801619c <__ssvfiscanf_r>:
 801619c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80161a0:	460c      	mov	r4, r1
 80161a2:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 80161a6:	2100      	movs	r1, #0
 80161a8:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 80161ac:	49a5      	ldr	r1, [pc, #660]	@ (8016444 <__ssvfiscanf_r+0x2a8>)
 80161ae:	91a0      	str	r1, [sp, #640]	@ 0x280
 80161b0:	f10d 0804 	add.w	r8, sp, #4
 80161b4:	49a4      	ldr	r1, [pc, #656]	@ (8016448 <__ssvfiscanf_r+0x2ac>)
 80161b6:	4fa5      	ldr	r7, [pc, #660]	@ (801644c <__ssvfiscanf_r+0x2b0>)
 80161b8:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80161bc:	4606      	mov	r6, r0
 80161be:	91a1      	str	r1, [sp, #644]	@ 0x284
 80161c0:	9300      	str	r3, [sp, #0]
 80161c2:	7813      	ldrb	r3, [r2, #0]
 80161c4:	2b00      	cmp	r3, #0
 80161c6:	f000 8158 	beq.w	801647a <__ssvfiscanf_r+0x2de>
 80161ca:	5cf9      	ldrb	r1, [r7, r3]
 80161cc:	f011 0108 	ands.w	r1, r1, #8
 80161d0:	f102 0501 	add.w	r5, r2, #1
 80161d4:	d019      	beq.n	801620a <__ssvfiscanf_r+0x6e>
 80161d6:	6863      	ldr	r3, [r4, #4]
 80161d8:	2b00      	cmp	r3, #0
 80161da:	dd0f      	ble.n	80161fc <__ssvfiscanf_r+0x60>
 80161dc:	6823      	ldr	r3, [r4, #0]
 80161de:	781a      	ldrb	r2, [r3, #0]
 80161e0:	5cba      	ldrb	r2, [r7, r2]
 80161e2:	0712      	lsls	r2, r2, #28
 80161e4:	d401      	bmi.n	80161ea <__ssvfiscanf_r+0x4e>
 80161e6:	462a      	mov	r2, r5
 80161e8:	e7eb      	b.n	80161c2 <__ssvfiscanf_r+0x26>
 80161ea:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80161ec:	3201      	adds	r2, #1
 80161ee:	9245      	str	r2, [sp, #276]	@ 0x114
 80161f0:	6862      	ldr	r2, [r4, #4]
 80161f2:	3301      	adds	r3, #1
 80161f4:	3a01      	subs	r2, #1
 80161f6:	6062      	str	r2, [r4, #4]
 80161f8:	6023      	str	r3, [r4, #0]
 80161fa:	e7ec      	b.n	80161d6 <__ssvfiscanf_r+0x3a>
 80161fc:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80161fe:	4621      	mov	r1, r4
 8016200:	4630      	mov	r0, r6
 8016202:	4798      	blx	r3
 8016204:	2800      	cmp	r0, #0
 8016206:	d0e9      	beq.n	80161dc <__ssvfiscanf_r+0x40>
 8016208:	e7ed      	b.n	80161e6 <__ssvfiscanf_r+0x4a>
 801620a:	2b25      	cmp	r3, #37	@ 0x25
 801620c:	d012      	beq.n	8016234 <__ssvfiscanf_r+0x98>
 801620e:	4699      	mov	r9, r3
 8016210:	6863      	ldr	r3, [r4, #4]
 8016212:	2b00      	cmp	r3, #0
 8016214:	f340 8093 	ble.w	801633e <__ssvfiscanf_r+0x1a2>
 8016218:	6822      	ldr	r2, [r4, #0]
 801621a:	7813      	ldrb	r3, [r2, #0]
 801621c:	454b      	cmp	r3, r9
 801621e:	f040 812c 	bne.w	801647a <__ssvfiscanf_r+0x2de>
 8016222:	6863      	ldr	r3, [r4, #4]
 8016224:	3b01      	subs	r3, #1
 8016226:	6063      	str	r3, [r4, #4]
 8016228:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 801622a:	3201      	adds	r2, #1
 801622c:	3301      	adds	r3, #1
 801622e:	6022      	str	r2, [r4, #0]
 8016230:	9345      	str	r3, [sp, #276]	@ 0x114
 8016232:	e7d8      	b.n	80161e6 <__ssvfiscanf_r+0x4a>
 8016234:	9141      	str	r1, [sp, #260]	@ 0x104
 8016236:	9143      	str	r1, [sp, #268]	@ 0x10c
 8016238:	7853      	ldrb	r3, [r2, #1]
 801623a:	2b2a      	cmp	r3, #42	@ 0x2a
 801623c:	bf02      	ittt	eq
 801623e:	2310      	moveq	r3, #16
 8016240:	1c95      	addeq	r5, r2, #2
 8016242:	9341      	streq	r3, [sp, #260]	@ 0x104
 8016244:	220a      	movs	r2, #10
 8016246:	46a9      	mov	r9, r5
 8016248:	f819 1b01 	ldrb.w	r1, [r9], #1
 801624c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8016250:	2b09      	cmp	r3, #9
 8016252:	d91e      	bls.n	8016292 <__ssvfiscanf_r+0xf6>
 8016254:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8016450 <__ssvfiscanf_r+0x2b4>
 8016258:	2203      	movs	r2, #3
 801625a:	4650      	mov	r0, sl
 801625c:	f7e9 ffe8 	bl	8000230 <memchr>
 8016260:	b138      	cbz	r0, 8016272 <__ssvfiscanf_r+0xd6>
 8016262:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8016264:	eba0 000a 	sub.w	r0, r0, sl
 8016268:	2301      	movs	r3, #1
 801626a:	4083      	lsls	r3, r0
 801626c:	4313      	orrs	r3, r2
 801626e:	9341      	str	r3, [sp, #260]	@ 0x104
 8016270:	464d      	mov	r5, r9
 8016272:	f815 3b01 	ldrb.w	r3, [r5], #1
 8016276:	2b78      	cmp	r3, #120	@ 0x78
 8016278:	d806      	bhi.n	8016288 <__ssvfiscanf_r+0xec>
 801627a:	2b57      	cmp	r3, #87	@ 0x57
 801627c:	d810      	bhi.n	80162a0 <__ssvfiscanf_r+0x104>
 801627e:	2b25      	cmp	r3, #37	@ 0x25
 8016280:	d0c5      	beq.n	801620e <__ssvfiscanf_r+0x72>
 8016282:	d857      	bhi.n	8016334 <__ssvfiscanf_r+0x198>
 8016284:	2b00      	cmp	r3, #0
 8016286:	d065      	beq.n	8016354 <__ssvfiscanf_r+0x1b8>
 8016288:	2303      	movs	r3, #3
 801628a:	9347      	str	r3, [sp, #284]	@ 0x11c
 801628c:	230a      	movs	r3, #10
 801628e:	9342      	str	r3, [sp, #264]	@ 0x108
 8016290:	e078      	b.n	8016384 <__ssvfiscanf_r+0x1e8>
 8016292:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8016294:	fb02 1103 	mla	r1, r2, r3, r1
 8016298:	3930      	subs	r1, #48	@ 0x30
 801629a:	9143      	str	r1, [sp, #268]	@ 0x10c
 801629c:	464d      	mov	r5, r9
 801629e:	e7d2      	b.n	8016246 <__ssvfiscanf_r+0xaa>
 80162a0:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 80162a4:	2a20      	cmp	r2, #32
 80162a6:	d8ef      	bhi.n	8016288 <__ssvfiscanf_r+0xec>
 80162a8:	a101      	add	r1, pc, #4	@ (adr r1, 80162b0 <__ssvfiscanf_r+0x114>)
 80162aa:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80162ae:	bf00      	nop
 80162b0:	08016363 	.word	0x08016363
 80162b4:	08016289 	.word	0x08016289
 80162b8:	08016289 	.word	0x08016289
 80162bc:	080163bd 	.word	0x080163bd
 80162c0:	08016289 	.word	0x08016289
 80162c4:	08016289 	.word	0x08016289
 80162c8:	08016289 	.word	0x08016289
 80162cc:	08016289 	.word	0x08016289
 80162d0:	08016289 	.word	0x08016289
 80162d4:	08016289 	.word	0x08016289
 80162d8:	08016289 	.word	0x08016289
 80162dc:	080163d3 	.word	0x080163d3
 80162e0:	080163b9 	.word	0x080163b9
 80162e4:	0801633b 	.word	0x0801633b
 80162e8:	0801633b 	.word	0x0801633b
 80162ec:	0801633b 	.word	0x0801633b
 80162f0:	08016289 	.word	0x08016289
 80162f4:	08016375 	.word	0x08016375
 80162f8:	08016289 	.word	0x08016289
 80162fc:	08016289 	.word	0x08016289
 8016300:	08016289 	.word	0x08016289
 8016304:	08016289 	.word	0x08016289
 8016308:	080163e3 	.word	0x080163e3
 801630c:	0801637d 	.word	0x0801637d
 8016310:	0801635b 	.word	0x0801635b
 8016314:	08016289 	.word	0x08016289
 8016318:	08016289 	.word	0x08016289
 801631c:	080163df 	.word	0x080163df
 8016320:	08016289 	.word	0x08016289
 8016324:	080163b9 	.word	0x080163b9
 8016328:	08016289 	.word	0x08016289
 801632c:	08016289 	.word	0x08016289
 8016330:	08016363 	.word	0x08016363
 8016334:	3b45      	subs	r3, #69	@ 0x45
 8016336:	2b02      	cmp	r3, #2
 8016338:	d8a6      	bhi.n	8016288 <__ssvfiscanf_r+0xec>
 801633a:	2305      	movs	r3, #5
 801633c:	e021      	b.n	8016382 <__ssvfiscanf_r+0x1e6>
 801633e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8016340:	4621      	mov	r1, r4
 8016342:	4630      	mov	r0, r6
 8016344:	4798      	blx	r3
 8016346:	2800      	cmp	r0, #0
 8016348:	f43f af66 	beq.w	8016218 <__ssvfiscanf_r+0x7c>
 801634c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801634e:	2800      	cmp	r0, #0
 8016350:	f040 808b 	bne.w	801646a <__ssvfiscanf_r+0x2ce>
 8016354:	f04f 30ff 	mov.w	r0, #4294967295
 8016358:	e08b      	b.n	8016472 <__ssvfiscanf_r+0x2d6>
 801635a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801635c:	f042 0220 	orr.w	r2, r2, #32
 8016360:	9241      	str	r2, [sp, #260]	@ 0x104
 8016362:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8016364:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8016368:	9241      	str	r2, [sp, #260]	@ 0x104
 801636a:	2210      	movs	r2, #16
 801636c:	2b6e      	cmp	r3, #110	@ 0x6e
 801636e:	9242      	str	r2, [sp, #264]	@ 0x108
 8016370:	d902      	bls.n	8016378 <__ssvfiscanf_r+0x1dc>
 8016372:	e005      	b.n	8016380 <__ssvfiscanf_r+0x1e4>
 8016374:	2300      	movs	r3, #0
 8016376:	9342      	str	r3, [sp, #264]	@ 0x108
 8016378:	2303      	movs	r3, #3
 801637a:	e002      	b.n	8016382 <__ssvfiscanf_r+0x1e6>
 801637c:	2308      	movs	r3, #8
 801637e:	9342      	str	r3, [sp, #264]	@ 0x108
 8016380:	2304      	movs	r3, #4
 8016382:	9347      	str	r3, [sp, #284]	@ 0x11c
 8016384:	6863      	ldr	r3, [r4, #4]
 8016386:	2b00      	cmp	r3, #0
 8016388:	dd39      	ble.n	80163fe <__ssvfiscanf_r+0x262>
 801638a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801638c:	0659      	lsls	r1, r3, #25
 801638e:	d404      	bmi.n	801639a <__ssvfiscanf_r+0x1fe>
 8016390:	6823      	ldr	r3, [r4, #0]
 8016392:	781a      	ldrb	r2, [r3, #0]
 8016394:	5cba      	ldrb	r2, [r7, r2]
 8016396:	0712      	lsls	r2, r2, #28
 8016398:	d438      	bmi.n	801640c <__ssvfiscanf_r+0x270>
 801639a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 801639c:	2b02      	cmp	r3, #2
 801639e:	dc47      	bgt.n	8016430 <__ssvfiscanf_r+0x294>
 80163a0:	466b      	mov	r3, sp
 80163a2:	4622      	mov	r2, r4
 80163a4:	a941      	add	r1, sp, #260	@ 0x104
 80163a6:	4630      	mov	r0, r6
 80163a8:	f000 f86c 	bl	8016484 <_scanf_chars>
 80163ac:	2801      	cmp	r0, #1
 80163ae:	d064      	beq.n	801647a <__ssvfiscanf_r+0x2de>
 80163b0:	2802      	cmp	r0, #2
 80163b2:	f47f af18 	bne.w	80161e6 <__ssvfiscanf_r+0x4a>
 80163b6:	e7c9      	b.n	801634c <__ssvfiscanf_r+0x1b0>
 80163b8:	220a      	movs	r2, #10
 80163ba:	e7d7      	b.n	801636c <__ssvfiscanf_r+0x1d0>
 80163bc:	4629      	mov	r1, r5
 80163be:	4640      	mov	r0, r8
 80163c0:	f000 fa6c 	bl	801689c <__sccl>
 80163c4:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80163c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80163ca:	9341      	str	r3, [sp, #260]	@ 0x104
 80163cc:	4605      	mov	r5, r0
 80163ce:	2301      	movs	r3, #1
 80163d0:	e7d7      	b.n	8016382 <__ssvfiscanf_r+0x1e6>
 80163d2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80163d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80163d8:	9341      	str	r3, [sp, #260]	@ 0x104
 80163da:	2300      	movs	r3, #0
 80163dc:	e7d1      	b.n	8016382 <__ssvfiscanf_r+0x1e6>
 80163de:	2302      	movs	r3, #2
 80163e0:	e7cf      	b.n	8016382 <__ssvfiscanf_r+0x1e6>
 80163e2:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80163e4:	06c3      	lsls	r3, r0, #27
 80163e6:	f53f aefe 	bmi.w	80161e6 <__ssvfiscanf_r+0x4a>
 80163ea:	9b00      	ldr	r3, [sp, #0]
 80163ec:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80163ee:	1d19      	adds	r1, r3, #4
 80163f0:	9100      	str	r1, [sp, #0]
 80163f2:	681b      	ldr	r3, [r3, #0]
 80163f4:	07c0      	lsls	r0, r0, #31
 80163f6:	bf4c      	ite	mi
 80163f8:	801a      	strhmi	r2, [r3, #0]
 80163fa:	601a      	strpl	r2, [r3, #0]
 80163fc:	e6f3      	b.n	80161e6 <__ssvfiscanf_r+0x4a>
 80163fe:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8016400:	4621      	mov	r1, r4
 8016402:	4630      	mov	r0, r6
 8016404:	4798      	blx	r3
 8016406:	2800      	cmp	r0, #0
 8016408:	d0bf      	beq.n	801638a <__ssvfiscanf_r+0x1ee>
 801640a:	e79f      	b.n	801634c <__ssvfiscanf_r+0x1b0>
 801640c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801640e:	3201      	adds	r2, #1
 8016410:	9245      	str	r2, [sp, #276]	@ 0x114
 8016412:	6862      	ldr	r2, [r4, #4]
 8016414:	3a01      	subs	r2, #1
 8016416:	2a00      	cmp	r2, #0
 8016418:	6062      	str	r2, [r4, #4]
 801641a:	dd02      	ble.n	8016422 <__ssvfiscanf_r+0x286>
 801641c:	3301      	adds	r3, #1
 801641e:	6023      	str	r3, [r4, #0]
 8016420:	e7b6      	b.n	8016390 <__ssvfiscanf_r+0x1f4>
 8016422:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8016424:	4621      	mov	r1, r4
 8016426:	4630      	mov	r0, r6
 8016428:	4798      	blx	r3
 801642a:	2800      	cmp	r0, #0
 801642c:	d0b0      	beq.n	8016390 <__ssvfiscanf_r+0x1f4>
 801642e:	e78d      	b.n	801634c <__ssvfiscanf_r+0x1b0>
 8016430:	2b04      	cmp	r3, #4
 8016432:	dc0f      	bgt.n	8016454 <__ssvfiscanf_r+0x2b8>
 8016434:	466b      	mov	r3, sp
 8016436:	4622      	mov	r2, r4
 8016438:	a941      	add	r1, sp, #260	@ 0x104
 801643a:	4630      	mov	r0, r6
 801643c:	f000 f87c 	bl	8016538 <_scanf_i>
 8016440:	e7b4      	b.n	80163ac <__ssvfiscanf_r+0x210>
 8016442:	bf00      	nop
 8016444:	080160ed 	.word	0x080160ed
 8016448:	08016163 	.word	0x08016163
 801644c:	0805d979 	.word	0x0805d979
 8016450:	0805da7f 	.word	0x0805da7f
 8016454:	4b0a      	ldr	r3, [pc, #40]	@ (8016480 <__ssvfiscanf_r+0x2e4>)
 8016456:	2b00      	cmp	r3, #0
 8016458:	f43f aec5 	beq.w	80161e6 <__ssvfiscanf_r+0x4a>
 801645c:	466b      	mov	r3, sp
 801645e:	4622      	mov	r2, r4
 8016460:	a941      	add	r1, sp, #260	@ 0x104
 8016462:	4630      	mov	r0, r6
 8016464:	f7fc fe88 	bl	8013178 <_scanf_float>
 8016468:	e7a0      	b.n	80163ac <__ssvfiscanf_r+0x210>
 801646a:	89a3      	ldrh	r3, [r4, #12]
 801646c:	065b      	lsls	r3, r3, #25
 801646e:	f53f af71 	bmi.w	8016354 <__ssvfiscanf_r+0x1b8>
 8016472:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8016476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801647a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801647c:	e7f9      	b.n	8016472 <__ssvfiscanf_r+0x2d6>
 801647e:	bf00      	nop
 8016480:	08013179 	.word	0x08013179

08016484 <_scanf_chars>:
 8016484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016488:	4615      	mov	r5, r2
 801648a:	688a      	ldr	r2, [r1, #8]
 801648c:	4680      	mov	r8, r0
 801648e:	460c      	mov	r4, r1
 8016490:	b932      	cbnz	r2, 80164a0 <_scanf_chars+0x1c>
 8016492:	698a      	ldr	r2, [r1, #24]
 8016494:	2a00      	cmp	r2, #0
 8016496:	bf14      	ite	ne
 8016498:	f04f 32ff 	movne.w	r2, #4294967295
 801649c:	2201      	moveq	r2, #1
 801649e:	608a      	str	r2, [r1, #8]
 80164a0:	6822      	ldr	r2, [r4, #0]
 80164a2:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8016534 <_scanf_chars+0xb0>
 80164a6:	06d1      	lsls	r1, r2, #27
 80164a8:	bf5f      	itttt	pl
 80164aa:	681a      	ldrpl	r2, [r3, #0]
 80164ac:	1d11      	addpl	r1, r2, #4
 80164ae:	6019      	strpl	r1, [r3, #0]
 80164b0:	6816      	ldrpl	r6, [r2, #0]
 80164b2:	2700      	movs	r7, #0
 80164b4:	69a0      	ldr	r0, [r4, #24]
 80164b6:	b188      	cbz	r0, 80164dc <_scanf_chars+0x58>
 80164b8:	2801      	cmp	r0, #1
 80164ba:	d107      	bne.n	80164cc <_scanf_chars+0x48>
 80164bc:	682b      	ldr	r3, [r5, #0]
 80164be:	781a      	ldrb	r2, [r3, #0]
 80164c0:	6963      	ldr	r3, [r4, #20]
 80164c2:	5c9b      	ldrb	r3, [r3, r2]
 80164c4:	b953      	cbnz	r3, 80164dc <_scanf_chars+0x58>
 80164c6:	2f00      	cmp	r7, #0
 80164c8:	d031      	beq.n	801652e <_scanf_chars+0xaa>
 80164ca:	e022      	b.n	8016512 <_scanf_chars+0x8e>
 80164cc:	2802      	cmp	r0, #2
 80164ce:	d120      	bne.n	8016512 <_scanf_chars+0x8e>
 80164d0:	682b      	ldr	r3, [r5, #0]
 80164d2:	781b      	ldrb	r3, [r3, #0]
 80164d4:	f819 3003 	ldrb.w	r3, [r9, r3]
 80164d8:	071b      	lsls	r3, r3, #28
 80164da:	d41a      	bmi.n	8016512 <_scanf_chars+0x8e>
 80164dc:	6823      	ldr	r3, [r4, #0]
 80164de:	06da      	lsls	r2, r3, #27
 80164e0:	bf5e      	ittt	pl
 80164e2:	682b      	ldrpl	r3, [r5, #0]
 80164e4:	781b      	ldrbpl	r3, [r3, #0]
 80164e6:	f806 3b01 	strbpl.w	r3, [r6], #1
 80164ea:	682a      	ldr	r2, [r5, #0]
 80164ec:	686b      	ldr	r3, [r5, #4]
 80164ee:	3201      	adds	r2, #1
 80164f0:	602a      	str	r2, [r5, #0]
 80164f2:	68a2      	ldr	r2, [r4, #8]
 80164f4:	3b01      	subs	r3, #1
 80164f6:	3a01      	subs	r2, #1
 80164f8:	606b      	str	r3, [r5, #4]
 80164fa:	3701      	adds	r7, #1
 80164fc:	60a2      	str	r2, [r4, #8]
 80164fe:	b142      	cbz	r2, 8016512 <_scanf_chars+0x8e>
 8016500:	2b00      	cmp	r3, #0
 8016502:	dcd7      	bgt.n	80164b4 <_scanf_chars+0x30>
 8016504:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8016508:	4629      	mov	r1, r5
 801650a:	4640      	mov	r0, r8
 801650c:	4798      	blx	r3
 801650e:	2800      	cmp	r0, #0
 8016510:	d0d0      	beq.n	80164b4 <_scanf_chars+0x30>
 8016512:	6823      	ldr	r3, [r4, #0]
 8016514:	f013 0310 	ands.w	r3, r3, #16
 8016518:	d105      	bne.n	8016526 <_scanf_chars+0xa2>
 801651a:	68e2      	ldr	r2, [r4, #12]
 801651c:	3201      	adds	r2, #1
 801651e:	60e2      	str	r2, [r4, #12]
 8016520:	69a2      	ldr	r2, [r4, #24]
 8016522:	b102      	cbz	r2, 8016526 <_scanf_chars+0xa2>
 8016524:	7033      	strb	r3, [r6, #0]
 8016526:	6923      	ldr	r3, [r4, #16]
 8016528:	443b      	add	r3, r7
 801652a:	6123      	str	r3, [r4, #16]
 801652c:	2000      	movs	r0, #0
 801652e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016532:	bf00      	nop
 8016534:	0805d979 	.word	0x0805d979

08016538 <_scanf_i>:
 8016538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801653c:	4698      	mov	r8, r3
 801653e:	4b74      	ldr	r3, [pc, #464]	@ (8016710 <_scanf_i+0x1d8>)
 8016540:	460c      	mov	r4, r1
 8016542:	4682      	mov	sl, r0
 8016544:	4616      	mov	r6, r2
 8016546:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801654a:	b087      	sub	sp, #28
 801654c:	ab03      	add	r3, sp, #12
 801654e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8016552:	4b70      	ldr	r3, [pc, #448]	@ (8016714 <_scanf_i+0x1dc>)
 8016554:	69a1      	ldr	r1, [r4, #24]
 8016556:	4a70      	ldr	r2, [pc, #448]	@ (8016718 <_scanf_i+0x1e0>)
 8016558:	2903      	cmp	r1, #3
 801655a:	bf08      	it	eq
 801655c:	461a      	moveq	r2, r3
 801655e:	68a3      	ldr	r3, [r4, #8]
 8016560:	9201      	str	r2, [sp, #4]
 8016562:	1e5a      	subs	r2, r3, #1
 8016564:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8016568:	bf88      	it	hi
 801656a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801656e:	4627      	mov	r7, r4
 8016570:	bf82      	ittt	hi
 8016572:	eb03 0905 	addhi.w	r9, r3, r5
 8016576:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801657a:	60a3      	strhi	r3, [r4, #8]
 801657c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8016580:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8016584:	bf98      	it	ls
 8016586:	f04f 0900 	movls.w	r9, #0
 801658a:	6023      	str	r3, [r4, #0]
 801658c:	463d      	mov	r5, r7
 801658e:	f04f 0b00 	mov.w	fp, #0
 8016592:	6831      	ldr	r1, [r6, #0]
 8016594:	ab03      	add	r3, sp, #12
 8016596:	7809      	ldrb	r1, [r1, #0]
 8016598:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801659c:	2202      	movs	r2, #2
 801659e:	f7e9 fe47 	bl	8000230 <memchr>
 80165a2:	b328      	cbz	r0, 80165f0 <_scanf_i+0xb8>
 80165a4:	f1bb 0f01 	cmp.w	fp, #1
 80165a8:	d159      	bne.n	801665e <_scanf_i+0x126>
 80165aa:	6862      	ldr	r2, [r4, #4]
 80165ac:	b92a      	cbnz	r2, 80165ba <_scanf_i+0x82>
 80165ae:	6822      	ldr	r2, [r4, #0]
 80165b0:	2108      	movs	r1, #8
 80165b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80165b6:	6061      	str	r1, [r4, #4]
 80165b8:	6022      	str	r2, [r4, #0]
 80165ba:	6822      	ldr	r2, [r4, #0]
 80165bc:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 80165c0:	6022      	str	r2, [r4, #0]
 80165c2:	68a2      	ldr	r2, [r4, #8]
 80165c4:	1e51      	subs	r1, r2, #1
 80165c6:	60a1      	str	r1, [r4, #8]
 80165c8:	b192      	cbz	r2, 80165f0 <_scanf_i+0xb8>
 80165ca:	6832      	ldr	r2, [r6, #0]
 80165cc:	1c51      	adds	r1, r2, #1
 80165ce:	6031      	str	r1, [r6, #0]
 80165d0:	7812      	ldrb	r2, [r2, #0]
 80165d2:	f805 2b01 	strb.w	r2, [r5], #1
 80165d6:	6872      	ldr	r2, [r6, #4]
 80165d8:	3a01      	subs	r2, #1
 80165da:	2a00      	cmp	r2, #0
 80165dc:	6072      	str	r2, [r6, #4]
 80165de:	dc07      	bgt.n	80165f0 <_scanf_i+0xb8>
 80165e0:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 80165e4:	4631      	mov	r1, r6
 80165e6:	4650      	mov	r0, sl
 80165e8:	4790      	blx	r2
 80165ea:	2800      	cmp	r0, #0
 80165ec:	f040 8085 	bne.w	80166fa <_scanf_i+0x1c2>
 80165f0:	f10b 0b01 	add.w	fp, fp, #1
 80165f4:	f1bb 0f03 	cmp.w	fp, #3
 80165f8:	d1cb      	bne.n	8016592 <_scanf_i+0x5a>
 80165fa:	6863      	ldr	r3, [r4, #4]
 80165fc:	b90b      	cbnz	r3, 8016602 <_scanf_i+0xca>
 80165fe:	230a      	movs	r3, #10
 8016600:	6063      	str	r3, [r4, #4]
 8016602:	6863      	ldr	r3, [r4, #4]
 8016604:	4945      	ldr	r1, [pc, #276]	@ (801671c <_scanf_i+0x1e4>)
 8016606:	6960      	ldr	r0, [r4, #20]
 8016608:	1ac9      	subs	r1, r1, r3
 801660a:	f000 f947 	bl	801689c <__sccl>
 801660e:	f04f 0b00 	mov.w	fp, #0
 8016612:	68a3      	ldr	r3, [r4, #8]
 8016614:	6822      	ldr	r2, [r4, #0]
 8016616:	2b00      	cmp	r3, #0
 8016618:	d03d      	beq.n	8016696 <_scanf_i+0x15e>
 801661a:	6831      	ldr	r1, [r6, #0]
 801661c:	6960      	ldr	r0, [r4, #20]
 801661e:	f891 c000 	ldrb.w	ip, [r1]
 8016622:	f810 000c 	ldrb.w	r0, [r0, ip]
 8016626:	2800      	cmp	r0, #0
 8016628:	d035      	beq.n	8016696 <_scanf_i+0x15e>
 801662a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 801662e:	d124      	bne.n	801667a <_scanf_i+0x142>
 8016630:	0510      	lsls	r0, r2, #20
 8016632:	d522      	bpl.n	801667a <_scanf_i+0x142>
 8016634:	f10b 0b01 	add.w	fp, fp, #1
 8016638:	f1b9 0f00 	cmp.w	r9, #0
 801663c:	d003      	beq.n	8016646 <_scanf_i+0x10e>
 801663e:	3301      	adds	r3, #1
 8016640:	f109 39ff 	add.w	r9, r9, #4294967295
 8016644:	60a3      	str	r3, [r4, #8]
 8016646:	6873      	ldr	r3, [r6, #4]
 8016648:	3b01      	subs	r3, #1
 801664a:	2b00      	cmp	r3, #0
 801664c:	6073      	str	r3, [r6, #4]
 801664e:	dd1b      	ble.n	8016688 <_scanf_i+0x150>
 8016650:	6833      	ldr	r3, [r6, #0]
 8016652:	3301      	adds	r3, #1
 8016654:	6033      	str	r3, [r6, #0]
 8016656:	68a3      	ldr	r3, [r4, #8]
 8016658:	3b01      	subs	r3, #1
 801665a:	60a3      	str	r3, [r4, #8]
 801665c:	e7d9      	b.n	8016612 <_scanf_i+0xda>
 801665e:	f1bb 0f02 	cmp.w	fp, #2
 8016662:	d1ae      	bne.n	80165c2 <_scanf_i+0x8a>
 8016664:	6822      	ldr	r2, [r4, #0]
 8016666:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 801666a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 801666e:	d1bf      	bne.n	80165f0 <_scanf_i+0xb8>
 8016670:	2110      	movs	r1, #16
 8016672:	6061      	str	r1, [r4, #4]
 8016674:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8016678:	e7a2      	b.n	80165c0 <_scanf_i+0x88>
 801667a:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 801667e:	6022      	str	r2, [r4, #0]
 8016680:	780b      	ldrb	r3, [r1, #0]
 8016682:	f805 3b01 	strb.w	r3, [r5], #1
 8016686:	e7de      	b.n	8016646 <_scanf_i+0x10e>
 8016688:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801668c:	4631      	mov	r1, r6
 801668e:	4650      	mov	r0, sl
 8016690:	4798      	blx	r3
 8016692:	2800      	cmp	r0, #0
 8016694:	d0df      	beq.n	8016656 <_scanf_i+0x11e>
 8016696:	6823      	ldr	r3, [r4, #0]
 8016698:	05d9      	lsls	r1, r3, #23
 801669a:	d50d      	bpl.n	80166b8 <_scanf_i+0x180>
 801669c:	42bd      	cmp	r5, r7
 801669e:	d909      	bls.n	80166b4 <_scanf_i+0x17c>
 80166a0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80166a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80166a8:	4632      	mov	r2, r6
 80166aa:	4650      	mov	r0, sl
 80166ac:	4798      	blx	r3
 80166ae:	f105 39ff 	add.w	r9, r5, #4294967295
 80166b2:	464d      	mov	r5, r9
 80166b4:	42bd      	cmp	r5, r7
 80166b6:	d028      	beq.n	801670a <_scanf_i+0x1d2>
 80166b8:	6822      	ldr	r2, [r4, #0]
 80166ba:	f012 0210 	ands.w	r2, r2, #16
 80166be:	d113      	bne.n	80166e8 <_scanf_i+0x1b0>
 80166c0:	702a      	strb	r2, [r5, #0]
 80166c2:	6863      	ldr	r3, [r4, #4]
 80166c4:	9e01      	ldr	r6, [sp, #4]
 80166c6:	4639      	mov	r1, r7
 80166c8:	4650      	mov	r0, sl
 80166ca:	47b0      	blx	r6
 80166cc:	f8d8 3000 	ldr.w	r3, [r8]
 80166d0:	6821      	ldr	r1, [r4, #0]
 80166d2:	1d1a      	adds	r2, r3, #4
 80166d4:	f8c8 2000 	str.w	r2, [r8]
 80166d8:	f011 0f20 	tst.w	r1, #32
 80166dc:	681b      	ldr	r3, [r3, #0]
 80166de:	d00f      	beq.n	8016700 <_scanf_i+0x1c8>
 80166e0:	6018      	str	r0, [r3, #0]
 80166e2:	68e3      	ldr	r3, [r4, #12]
 80166e4:	3301      	adds	r3, #1
 80166e6:	60e3      	str	r3, [r4, #12]
 80166e8:	6923      	ldr	r3, [r4, #16]
 80166ea:	1bed      	subs	r5, r5, r7
 80166ec:	445d      	add	r5, fp
 80166ee:	442b      	add	r3, r5
 80166f0:	6123      	str	r3, [r4, #16]
 80166f2:	2000      	movs	r0, #0
 80166f4:	b007      	add	sp, #28
 80166f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80166fa:	f04f 0b00 	mov.w	fp, #0
 80166fe:	e7ca      	b.n	8016696 <_scanf_i+0x15e>
 8016700:	07ca      	lsls	r2, r1, #31
 8016702:	bf4c      	ite	mi
 8016704:	8018      	strhmi	r0, [r3, #0]
 8016706:	6018      	strpl	r0, [r3, #0]
 8016708:	e7eb      	b.n	80166e2 <_scanf_i+0x1aa>
 801670a:	2001      	movs	r0, #1
 801670c:	e7f2      	b.n	80166f4 <_scanf_i+0x1bc>
 801670e:	bf00      	nop
 8016710:	08018b90 	.word	0x08018b90
 8016714:	08015e39 	.word	0x08015e39
 8016718:	08017199 	.word	0x08017199
 801671c:	0805da9a 	.word	0x0805da9a

08016720 <__sflush_r>:
 8016720:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016728:	0716      	lsls	r6, r2, #28
 801672a:	4605      	mov	r5, r0
 801672c:	460c      	mov	r4, r1
 801672e:	d454      	bmi.n	80167da <__sflush_r+0xba>
 8016730:	684b      	ldr	r3, [r1, #4]
 8016732:	2b00      	cmp	r3, #0
 8016734:	dc02      	bgt.n	801673c <__sflush_r+0x1c>
 8016736:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8016738:	2b00      	cmp	r3, #0
 801673a:	dd48      	ble.n	80167ce <__sflush_r+0xae>
 801673c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801673e:	2e00      	cmp	r6, #0
 8016740:	d045      	beq.n	80167ce <__sflush_r+0xae>
 8016742:	2300      	movs	r3, #0
 8016744:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8016748:	682f      	ldr	r7, [r5, #0]
 801674a:	6a21      	ldr	r1, [r4, #32]
 801674c:	602b      	str	r3, [r5, #0]
 801674e:	d030      	beq.n	80167b2 <__sflush_r+0x92>
 8016750:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8016752:	89a3      	ldrh	r3, [r4, #12]
 8016754:	0759      	lsls	r1, r3, #29
 8016756:	d505      	bpl.n	8016764 <__sflush_r+0x44>
 8016758:	6863      	ldr	r3, [r4, #4]
 801675a:	1ad2      	subs	r2, r2, r3
 801675c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801675e:	b10b      	cbz	r3, 8016764 <__sflush_r+0x44>
 8016760:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8016762:	1ad2      	subs	r2, r2, r3
 8016764:	2300      	movs	r3, #0
 8016766:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016768:	6a21      	ldr	r1, [r4, #32]
 801676a:	4628      	mov	r0, r5
 801676c:	47b0      	blx	r6
 801676e:	1c43      	adds	r3, r0, #1
 8016770:	89a3      	ldrh	r3, [r4, #12]
 8016772:	d106      	bne.n	8016782 <__sflush_r+0x62>
 8016774:	6829      	ldr	r1, [r5, #0]
 8016776:	291d      	cmp	r1, #29
 8016778:	d82b      	bhi.n	80167d2 <__sflush_r+0xb2>
 801677a:	4a2a      	ldr	r2, [pc, #168]	@ (8016824 <__sflush_r+0x104>)
 801677c:	410a      	asrs	r2, r1
 801677e:	07d6      	lsls	r6, r2, #31
 8016780:	d427      	bmi.n	80167d2 <__sflush_r+0xb2>
 8016782:	2200      	movs	r2, #0
 8016784:	6062      	str	r2, [r4, #4]
 8016786:	04d9      	lsls	r1, r3, #19
 8016788:	6922      	ldr	r2, [r4, #16]
 801678a:	6022      	str	r2, [r4, #0]
 801678c:	d504      	bpl.n	8016798 <__sflush_r+0x78>
 801678e:	1c42      	adds	r2, r0, #1
 8016790:	d101      	bne.n	8016796 <__sflush_r+0x76>
 8016792:	682b      	ldr	r3, [r5, #0]
 8016794:	b903      	cbnz	r3, 8016798 <__sflush_r+0x78>
 8016796:	6560      	str	r0, [r4, #84]	@ 0x54
 8016798:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801679a:	602f      	str	r7, [r5, #0]
 801679c:	b1b9      	cbz	r1, 80167ce <__sflush_r+0xae>
 801679e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80167a2:	4299      	cmp	r1, r3
 80167a4:	d002      	beq.n	80167ac <__sflush_r+0x8c>
 80167a6:	4628      	mov	r0, r5
 80167a8:	f7fd ffbe 	bl	8014728 <_free_r>
 80167ac:	2300      	movs	r3, #0
 80167ae:	6363      	str	r3, [r4, #52]	@ 0x34
 80167b0:	e00d      	b.n	80167ce <__sflush_r+0xae>
 80167b2:	2301      	movs	r3, #1
 80167b4:	4628      	mov	r0, r5
 80167b6:	47b0      	blx	r6
 80167b8:	4602      	mov	r2, r0
 80167ba:	1c50      	adds	r0, r2, #1
 80167bc:	d1c9      	bne.n	8016752 <__sflush_r+0x32>
 80167be:	682b      	ldr	r3, [r5, #0]
 80167c0:	2b00      	cmp	r3, #0
 80167c2:	d0c6      	beq.n	8016752 <__sflush_r+0x32>
 80167c4:	2b1d      	cmp	r3, #29
 80167c6:	d001      	beq.n	80167cc <__sflush_r+0xac>
 80167c8:	2b16      	cmp	r3, #22
 80167ca:	d11e      	bne.n	801680a <__sflush_r+0xea>
 80167cc:	602f      	str	r7, [r5, #0]
 80167ce:	2000      	movs	r0, #0
 80167d0:	e022      	b.n	8016818 <__sflush_r+0xf8>
 80167d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80167d6:	b21b      	sxth	r3, r3
 80167d8:	e01b      	b.n	8016812 <__sflush_r+0xf2>
 80167da:	690f      	ldr	r7, [r1, #16]
 80167dc:	2f00      	cmp	r7, #0
 80167de:	d0f6      	beq.n	80167ce <__sflush_r+0xae>
 80167e0:	0793      	lsls	r3, r2, #30
 80167e2:	680e      	ldr	r6, [r1, #0]
 80167e4:	bf08      	it	eq
 80167e6:	694b      	ldreq	r3, [r1, #20]
 80167e8:	600f      	str	r7, [r1, #0]
 80167ea:	bf18      	it	ne
 80167ec:	2300      	movne	r3, #0
 80167ee:	eba6 0807 	sub.w	r8, r6, r7
 80167f2:	608b      	str	r3, [r1, #8]
 80167f4:	f1b8 0f00 	cmp.w	r8, #0
 80167f8:	dde9      	ble.n	80167ce <__sflush_r+0xae>
 80167fa:	6a21      	ldr	r1, [r4, #32]
 80167fc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80167fe:	4643      	mov	r3, r8
 8016800:	463a      	mov	r2, r7
 8016802:	4628      	mov	r0, r5
 8016804:	47b0      	blx	r6
 8016806:	2800      	cmp	r0, #0
 8016808:	dc08      	bgt.n	801681c <__sflush_r+0xfc>
 801680a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801680e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016812:	81a3      	strh	r3, [r4, #12]
 8016814:	f04f 30ff 	mov.w	r0, #4294967295
 8016818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801681c:	4407      	add	r7, r0
 801681e:	eba8 0800 	sub.w	r8, r8, r0
 8016822:	e7e7      	b.n	80167f4 <__sflush_r+0xd4>
 8016824:	dfbffffe 	.word	0xdfbffffe

08016828 <_fflush_r>:
 8016828:	b538      	push	{r3, r4, r5, lr}
 801682a:	690b      	ldr	r3, [r1, #16]
 801682c:	4605      	mov	r5, r0
 801682e:	460c      	mov	r4, r1
 8016830:	b913      	cbnz	r3, 8016838 <_fflush_r+0x10>
 8016832:	2500      	movs	r5, #0
 8016834:	4628      	mov	r0, r5
 8016836:	bd38      	pop	{r3, r4, r5, pc}
 8016838:	b118      	cbz	r0, 8016842 <_fflush_r+0x1a>
 801683a:	6a03      	ldr	r3, [r0, #32]
 801683c:	b90b      	cbnz	r3, 8016842 <_fflush_r+0x1a>
 801683e:	f7fc ff3b 	bl	80136b8 <__sinit>
 8016842:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016846:	2b00      	cmp	r3, #0
 8016848:	d0f3      	beq.n	8016832 <_fflush_r+0xa>
 801684a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801684c:	07d0      	lsls	r0, r2, #31
 801684e:	d404      	bmi.n	801685a <_fflush_r+0x32>
 8016850:	0599      	lsls	r1, r3, #22
 8016852:	d402      	bmi.n	801685a <_fflush_r+0x32>
 8016854:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016856:	f7fd f8de 	bl	8013a16 <__retarget_lock_acquire_recursive>
 801685a:	4628      	mov	r0, r5
 801685c:	4621      	mov	r1, r4
 801685e:	f7ff ff5f 	bl	8016720 <__sflush_r>
 8016862:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016864:	07da      	lsls	r2, r3, #31
 8016866:	4605      	mov	r5, r0
 8016868:	d4e4      	bmi.n	8016834 <_fflush_r+0xc>
 801686a:	89a3      	ldrh	r3, [r4, #12]
 801686c:	059b      	lsls	r3, r3, #22
 801686e:	d4e1      	bmi.n	8016834 <_fflush_r+0xc>
 8016870:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016872:	f7fd f8d1 	bl	8013a18 <__retarget_lock_release_recursive>
 8016876:	e7dd      	b.n	8016834 <_fflush_r+0xc>

08016878 <fiprintf>:
 8016878:	b40e      	push	{r1, r2, r3}
 801687a:	b503      	push	{r0, r1, lr}
 801687c:	4601      	mov	r1, r0
 801687e:	ab03      	add	r3, sp, #12
 8016880:	4805      	ldr	r0, [pc, #20]	@ (8016898 <fiprintf+0x20>)
 8016882:	f853 2b04 	ldr.w	r2, [r3], #4
 8016886:	6800      	ldr	r0, [r0, #0]
 8016888:	9301      	str	r3, [sp, #4]
 801688a:	f000 fcbd 	bl	8017208 <_vfiprintf_r>
 801688e:	b002      	add	sp, #8
 8016890:	f85d eb04 	ldr.w	lr, [sp], #4
 8016894:	b003      	add	sp, #12
 8016896:	4770      	bx	lr
 8016898:	20001468 	.word	0x20001468

0801689c <__sccl>:
 801689c:	b570      	push	{r4, r5, r6, lr}
 801689e:	780b      	ldrb	r3, [r1, #0]
 80168a0:	4604      	mov	r4, r0
 80168a2:	2b5e      	cmp	r3, #94	@ 0x5e
 80168a4:	bf0b      	itete	eq
 80168a6:	784b      	ldrbeq	r3, [r1, #1]
 80168a8:	1c4a      	addne	r2, r1, #1
 80168aa:	1c8a      	addeq	r2, r1, #2
 80168ac:	2100      	movne	r1, #0
 80168ae:	bf08      	it	eq
 80168b0:	2101      	moveq	r1, #1
 80168b2:	3801      	subs	r0, #1
 80168b4:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80168b8:	f800 1f01 	strb.w	r1, [r0, #1]!
 80168bc:	42a8      	cmp	r0, r5
 80168be:	d1fb      	bne.n	80168b8 <__sccl+0x1c>
 80168c0:	b90b      	cbnz	r3, 80168c6 <__sccl+0x2a>
 80168c2:	1e50      	subs	r0, r2, #1
 80168c4:	bd70      	pop	{r4, r5, r6, pc}
 80168c6:	f081 0101 	eor.w	r1, r1, #1
 80168ca:	54e1      	strb	r1, [r4, r3]
 80168cc:	4610      	mov	r0, r2
 80168ce:	4602      	mov	r2, r0
 80168d0:	f812 5b01 	ldrb.w	r5, [r2], #1
 80168d4:	2d2d      	cmp	r5, #45	@ 0x2d
 80168d6:	d005      	beq.n	80168e4 <__sccl+0x48>
 80168d8:	2d5d      	cmp	r5, #93	@ 0x5d
 80168da:	d016      	beq.n	801690a <__sccl+0x6e>
 80168dc:	2d00      	cmp	r5, #0
 80168de:	d0f1      	beq.n	80168c4 <__sccl+0x28>
 80168e0:	462b      	mov	r3, r5
 80168e2:	e7f2      	b.n	80168ca <__sccl+0x2e>
 80168e4:	7846      	ldrb	r6, [r0, #1]
 80168e6:	2e5d      	cmp	r6, #93	@ 0x5d
 80168e8:	d0fa      	beq.n	80168e0 <__sccl+0x44>
 80168ea:	42b3      	cmp	r3, r6
 80168ec:	dcf8      	bgt.n	80168e0 <__sccl+0x44>
 80168ee:	3002      	adds	r0, #2
 80168f0:	461a      	mov	r2, r3
 80168f2:	3201      	adds	r2, #1
 80168f4:	4296      	cmp	r6, r2
 80168f6:	54a1      	strb	r1, [r4, r2]
 80168f8:	dcfb      	bgt.n	80168f2 <__sccl+0x56>
 80168fa:	1af2      	subs	r2, r6, r3
 80168fc:	3a01      	subs	r2, #1
 80168fe:	1c5d      	adds	r5, r3, #1
 8016900:	42b3      	cmp	r3, r6
 8016902:	bfa8      	it	ge
 8016904:	2200      	movge	r2, #0
 8016906:	18ab      	adds	r3, r5, r2
 8016908:	e7e1      	b.n	80168ce <__sccl+0x32>
 801690a:	4610      	mov	r0, r2
 801690c:	e7da      	b.n	80168c4 <__sccl+0x28>

0801690e <__submore>:
 801690e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016912:	460c      	mov	r4, r1
 8016914:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8016916:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801691a:	4299      	cmp	r1, r3
 801691c:	d11d      	bne.n	801695a <__submore+0x4c>
 801691e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8016922:	f7fb ff17 	bl	8012754 <_malloc_r>
 8016926:	b918      	cbnz	r0, 8016930 <__submore+0x22>
 8016928:	f04f 30ff 	mov.w	r0, #4294967295
 801692c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016930:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8016934:	63a3      	str	r3, [r4, #56]	@ 0x38
 8016936:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 801693a:	6360      	str	r0, [r4, #52]	@ 0x34
 801693c:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8016940:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8016944:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8016948:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801694c:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8016950:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8016954:	6020      	str	r0, [r4, #0]
 8016956:	2000      	movs	r0, #0
 8016958:	e7e8      	b.n	801692c <__submore+0x1e>
 801695a:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 801695c:	0077      	lsls	r7, r6, #1
 801695e:	463a      	mov	r2, r7
 8016960:	f7fb ff84 	bl	801286c <_realloc_r>
 8016964:	4605      	mov	r5, r0
 8016966:	2800      	cmp	r0, #0
 8016968:	d0de      	beq.n	8016928 <__submore+0x1a>
 801696a:	eb00 0806 	add.w	r8, r0, r6
 801696e:	4601      	mov	r1, r0
 8016970:	4632      	mov	r2, r6
 8016972:	4640      	mov	r0, r8
 8016974:	f7fd f859 	bl	8013a2a <memcpy>
 8016978:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 801697c:	f8c4 8000 	str.w	r8, [r4]
 8016980:	e7e9      	b.n	8016956 <__submore+0x48>

08016982 <memmove>:
 8016982:	4288      	cmp	r0, r1
 8016984:	b510      	push	{r4, lr}
 8016986:	eb01 0402 	add.w	r4, r1, r2
 801698a:	d902      	bls.n	8016992 <memmove+0x10>
 801698c:	4284      	cmp	r4, r0
 801698e:	4623      	mov	r3, r4
 8016990:	d807      	bhi.n	80169a2 <memmove+0x20>
 8016992:	1e43      	subs	r3, r0, #1
 8016994:	42a1      	cmp	r1, r4
 8016996:	d008      	beq.n	80169aa <memmove+0x28>
 8016998:	f811 2b01 	ldrb.w	r2, [r1], #1
 801699c:	f803 2f01 	strb.w	r2, [r3, #1]!
 80169a0:	e7f8      	b.n	8016994 <memmove+0x12>
 80169a2:	4402      	add	r2, r0
 80169a4:	4601      	mov	r1, r0
 80169a6:	428a      	cmp	r2, r1
 80169a8:	d100      	bne.n	80169ac <memmove+0x2a>
 80169aa:	bd10      	pop	{r4, pc}
 80169ac:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80169b0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80169b4:	e7f7      	b.n	80169a6 <memmove+0x24>

080169b6 <strncmp>:
 80169b6:	b510      	push	{r4, lr}
 80169b8:	b16a      	cbz	r2, 80169d6 <strncmp+0x20>
 80169ba:	3901      	subs	r1, #1
 80169bc:	1884      	adds	r4, r0, r2
 80169be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80169c2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80169c6:	429a      	cmp	r2, r3
 80169c8:	d103      	bne.n	80169d2 <strncmp+0x1c>
 80169ca:	42a0      	cmp	r0, r4
 80169cc:	d001      	beq.n	80169d2 <strncmp+0x1c>
 80169ce:	2a00      	cmp	r2, #0
 80169d0:	d1f5      	bne.n	80169be <strncmp+0x8>
 80169d2:	1ad0      	subs	r0, r2, r3
 80169d4:	bd10      	pop	{r4, pc}
 80169d6:	4610      	mov	r0, r2
 80169d8:	e7fc      	b.n	80169d4 <strncmp+0x1e>
 80169da:	0000      	movs	r0, r0
 80169dc:	0000      	movs	r0, r0
	...

080169e0 <nan>:
 80169e0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80169e8 <nan+0x8>
 80169e4:	4770      	bx	lr
 80169e6:	bf00      	nop
 80169e8:	00000000 	.word	0x00000000
 80169ec:	7ff80000 	.word	0x7ff80000

080169f0 <abort>:
 80169f0:	b508      	push	{r3, lr}
 80169f2:	2006      	movs	r0, #6
 80169f4:	f000 fddc 	bl	80175b0 <raise>
 80169f8:	2001      	movs	r0, #1
 80169fa:	f001 fe43 	bl	8018684 <_exit>

080169fe <_calloc_r>:
 80169fe:	b570      	push	{r4, r5, r6, lr}
 8016a00:	fba1 5402 	umull	r5, r4, r1, r2
 8016a04:	b93c      	cbnz	r4, 8016a16 <_calloc_r+0x18>
 8016a06:	4629      	mov	r1, r5
 8016a08:	f7fb fea4 	bl	8012754 <_malloc_r>
 8016a0c:	4606      	mov	r6, r0
 8016a0e:	b928      	cbnz	r0, 8016a1c <_calloc_r+0x1e>
 8016a10:	2600      	movs	r6, #0
 8016a12:	4630      	mov	r0, r6
 8016a14:	bd70      	pop	{r4, r5, r6, pc}
 8016a16:	220c      	movs	r2, #12
 8016a18:	6002      	str	r2, [r0, #0]
 8016a1a:	e7f9      	b.n	8016a10 <_calloc_r+0x12>
 8016a1c:	462a      	mov	r2, r5
 8016a1e:	4621      	mov	r1, r4
 8016a20:	f7fc ff0f 	bl	8013842 <memset>
 8016a24:	e7f5      	b.n	8016a12 <_calloc_r+0x14>

08016a26 <rshift>:
 8016a26:	6903      	ldr	r3, [r0, #16]
 8016a28:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8016a2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016a30:	ea4f 1261 	mov.w	r2, r1, asr #5
 8016a34:	f100 0414 	add.w	r4, r0, #20
 8016a38:	dd45      	ble.n	8016ac6 <rshift+0xa0>
 8016a3a:	f011 011f 	ands.w	r1, r1, #31
 8016a3e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8016a42:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8016a46:	d10c      	bne.n	8016a62 <rshift+0x3c>
 8016a48:	f100 0710 	add.w	r7, r0, #16
 8016a4c:	4629      	mov	r1, r5
 8016a4e:	42b1      	cmp	r1, r6
 8016a50:	d334      	bcc.n	8016abc <rshift+0x96>
 8016a52:	1a9b      	subs	r3, r3, r2
 8016a54:	009b      	lsls	r3, r3, #2
 8016a56:	1eea      	subs	r2, r5, #3
 8016a58:	4296      	cmp	r6, r2
 8016a5a:	bf38      	it	cc
 8016a5c:	2300      	movcc	r3, #0
 8016a5e:	4423      	add	r3, r4
 8016a60:	e015      	b.n	8016a8e <rshift+0x68>
 8016a62:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8016a66:	f1c1 0820 	rsb	r8, r1, #32
 8016a6a:	40cf      	lsrs	r7, r1
 8016a6c:	f105 0e04 	add.w	lr, r5, #4
 8016a70:	46a1      	mov	r9, r4
 8016a72:	4576      	cmp	r6, lr
 8016a74:	46f4      	mov	ip, lr
 8016a76:	d815      	bhi.n	8016aa4 <rshift+0x7e>
 8016a78:	1a9a      	subs	r2, r3, r2
 8016a7a:	0092      	lsls	r2, r2, #2
 8016a7c:	3a04      	subs	r2, #4
 8016a7e:	3501      	adds	r5, #1
 8016a80:	42ae      	cmp	r6, r5
 8016a82:	bf38      	it	cc
 8016a84:	2200      	movcc	r2, #0
 8016a86:	18a3      	adds	r3, r4, r2
 8016a88:	50a7      	str	r7, [r4, r2]
 8016a8a:	b107      	cbz	r7, 8016a8e <rshift+0x68>
 8016a8c:	3304      	adds	r3, #4
 8016a8e:	1b1a      	subs	r2, r3, r4
 8016a90:	42a3      	cmp	r3, r4
 8016a92:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8016a96:	bf08      	it	eq
 8016a98:	2300      	moveq	r3, #0
 8016a9a:	6102      	str	r2, [r0, #16]
 8016a9c:	bf08      	it	eq
 8016a9e:	6143      	streq	r3, [r0, #20]
 8016aa0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016aa4:	f8dc c000 	ldr.w	ip, [ip]
 8016aa8:	fa0c fc08 	lsl.w	ip, ip, r8
 8016aac:	ea4c 0707 	orr.w	r7, ip, r7
 8016ab0:	f849 7b04 	str.w	r7, [r9], #4
 8016ab4:	f85e 7b04 	ldr.w	r7, [lr], #4
 8016ab8:	40cf      	lsrs	r7, r1
 8016aba:	e7da      	b.n	8016a72 <rshift+0x4c>
 8016abc:	f851 cb04 	ldr.w	ip, [r1], #4
 8016ac0:	f847 cf04 	str.w	ip, [r7, #4]!
 8016ac4:	e7c3      	b.n	8016a4e <rshift+0x28>
 8016ac6:	4623      	mov	r3, r4
 8016ac8:	e7e1      	b.n	8016a8e <rshift+0x68>

08016aca <__hexdig_fun>:
 8016aca:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8016ace:	2b09      	cmp	r3, #9
 8016ad0:	d802      	bhi.n	8016ad8 <__hexdig_fun+0xe>
 8016ad2:	3820      	subs	r0, #32
 8016ad4:	b2c0      	uxtb	r0, r0
 8016ad6:	4770      	bx	lr
 8016ad8:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8016adc:	2b05      	cmp	r3, #5
 8016ade:	d801      	bhi.n	8016ae4 <__hexdig_fun+0x1a>
 8016ae0:	3847      	subs	r0, #71	@ 0x47
 8016ae2:	e7f7      	b.n	8016ad4 <__hexdig_fun+0xa>
 8016ae4:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8016ae8:	2b05      	cmp	r3, #5
 8016aea:	d801      	bhi.n	8016af0 <__hexdig_fun+0x26>
 8016aec:	3827      	subs	r0, #39	@ 0x27
 8016aee:	e7f1      	b.n	8016ad4 <__hexdig_fun+0xa>
 8016af0:	2000      	movs	r0, #0
 8016af2:	4770      	bx	lr

08016af4 <__gethex>:
 8016af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016af8:	b085      	sub	sp, #20
 8016afa:	468a      	mov	sl, r1
 8016afc:	9302      	str	r3, [sp, #8]
 8016afe:	680b      	ldr	r3, [r1, #0]
 8016b00:	9001      	str	r0, [sp, #4]
 8016b02:	4690      	mov	r8, r2
 8016b04:	1c9c      	adds	r4, r3, #2
 8016b06:	46a1      	mov	r9, r4
 8016b08:	f814 0b01 	ldrb.w	r0, [r4], #1
 8016b0c:	2830      	cmp	r0, #48	@ 0x30
 8016b0e:	d0fa      	beq.n	8016b06 <__gethex+0x12>
 8016b10:	eba9 0303 	sub.w	r3, r9, r3
 8016b14:	f1a3 0b02 	sub.w	fp, r3, #2
 8016b18:	f7ff ffd7 	bl	8016aca <__hexdig_fun>
 8016b1c:	4605      	mov	r5, r0
 8016b1e:	2800      	cmp	r0, #0
 8016b20:	d168      	bne.n	8016bf4 <__gethex+0x100>
 8016b22:	49a0      	ldr	r1, [pc, #640]	@ (8016da4 <__gethex+0x2b0>)
 8016b24:	2201      	movs	r2, #1
 8016b26:	4648      	mov	r0, r9
 8016b28:	f7ff ff45 	bl	80169b6 <strncmp>
 8016b2c:	4607      	mov	r7, r0
 8016b2e:	2800      	cmp	r0, #0
 8016b30:	d167      	bne.n	8016c02 <__gethex+0x10e>
 8016b32:	f899 0001 	ldrb.w	r0, [r9, #1]
 8016b36:	4626      	mov	r6, r4
 8016b38:	f7ff ffc7 	bl	8016aca <__hexdig_fun>
 8016b3c:	2800      	cmp	r0, #0
 8016b3e:	d062      	beq.n	8016c06 <__gethex+0x112>
 8016b40:	4623      	mov	r3, r4
 8016b42:	7818      	ldrb	r0, [r3, #0]
 8016b44:	2830      	cmp	r0, #48	@ 0x30
 8016b46:	4699      	mov	r9, r3
 8016b48:	f103 0301 	add.w	r3, r3, #1
 8016b4c:	d0f9      	beq.n	8016b42 <__gethex+0x4e>
 8016b4e:	f7ff ffbc 	bl	8016aca <__hexdig_fun>
 8016b52:	fab0 f580 	clz	r5, r0
 8016b56:	096d      	lsrs	r5, r5, #5
 8016b58:	f04f 0b01 	mov.w	fp, #1
 8016b5c:	464a      	mov	r2, r9
 8016b5e:	4616      	mov	r6, r2
 8016b60:	3201      	adds	r2, #1
 8016b62:	7830      	ldrb	r0, [r6, #0]
 8016b64:	f7ff ffb1 	bl	8016aca <__hexdig_fun>
 8016b68:	2800      	cmp	r0, #0
 8016b6a:	d1f8      	bne.n	8016b5e <__gethex+0x6a>
 8016b6c:	498d      	ldr	r1, [pc, #564]	@ (8016da4 <__gethex+0x2b0>)
 8016b6e:	2201      	movs	r2, #1
 8016b70:	4630      	mov	r0, r6
 8016b72:	f7ff ff20 	bl	80169b6 <strncmp>
 8016b76:	2800      	cmp	r0, #0
 8016b78:	d13f      	bne.n	8016bfa <__gethex+0x106>
 8016b7a:	b944      	cbnz	r4, 8016b8e <__gethex+0x9a>
 8016b7c:	1c74      	adds	r4, r6, #1
 8016b7e:	4622      	mov	r2, r4
 8016b80:	4616      	mov	r6, r2
 8016b82:	3201      	adds	r2, #1
 8016b84:	7830      	ldrb	r0, [r6, #0]
 8016b86:	f7ff ffa0 	bl	8016aca <__hexdig_fun>
 8016b8a:	2800      	cmp	r0, #0
 8016b8c:	d1f8      	bne.n	8016b80 <__gethex+0x8c>
 8016b8e:	1ba4      	subs	r4, r4, r6
 8016b90:	00a7      	lsls	r7, r4, #2
 8016b92:	7833      	ldrb	r3, [r6, #0]
 8016b94:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8016b98:	2b50      	cmp	r3, #80	@ 0x50
 8016b9a:	d13e      	bne.n	8016c1a <__gethex+0x126>
 8016b9c:	7873      	ldrb	r3, [r6, #1]
 8016b9e:	2b2b      	cmp	r3, #43	@ 0x2b
 8016ba0:	d033      	beq.n	8016c0a <__gethex+0x116>
 8016ba2:	2b2d      	cmp	r3, #45	@ 0x2d
 8016ba4:	d034      	beq.n	8016c10 <__gethex+0x11c>
 8016ba6:	1c71      	adds	r1, r6, #1
 8016ba8:	2400      	movs	r4, #0
 8016baa:	7808      	ldrb	r0, [r1, #0]
 8016bac:	f7ff ff8d 	bl	8016aca <__hexdig_fun>
 8016bb0:	1e43      	subs	r3, r0, #1
 8016bb2:	b2db      	uxtb	r3, r3
 8016bb4:	2b18      	cmp	r3, #24
 8016bb6:	d830      	bhi.n	8016c1a <__gethex+0x126>
 8016bb8:	f1a0 0210 	sub.w	r2, r0, #16
 8016bbc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8016bc0:	f7ff ff83 	bl	8016aca <__hexdig_fun>
 8016bc4:	f100 3cff 	add.w	ip, r0, #4294967295
 8016bc8:	fa5f fc8c 	uxtb.w	ip, ip
 8016bcc:	f1bc 0f18 	cmp.w	ip, #24
 8016bd0:	f04f 030a 	mov.w	r3, #10
 8016bd4:	d91e      	bls.n	8016c14 <__gethex+0x120>
 8016bd6:	b104      	cbz	r4, 8016bda <__gethex+0xe6>
 8016bd8:	4252      	negs	r2, r2
 8016bda:	4417      	add	r7, r2
 8016bdc:	f8ca 1000 	str.w	r1, [sl]
 8016be0:	b1ed      	cbz	r5, 8016c1e <__gethex+0x12a>
 8016be2:	f1bb 0f00 	cmp.w	fp, #0
 8016be6:	bf0c      	ite	eq
 8016be8:	2506      	moveq	r5, #6
 8016bea:	2500      	movne	r5, #0
 8016bec:	4628      	mov	r0, r5
 8016bee:	b005      	add	sp, #20
 8016bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016bf4:	2500      	movs	r5, #0
 8016bf6:	462c      	mov	r4, r5
 8016bf8:	e7b0      	b.n	8016b5c <__gethex+0x68>
 8016bfa:	2c00      	cmp	r4, #0
 8016bfc:	d1c7      	bne.n	8016b8e <__gethex+0x9a>
 8016bfe:	4627      	mov	r7, r4
 8016c00:	e7c7      	b.n	8016b92 <__gethex+0x9e>
 8016c02:	464e      	mov	r6, r9
 8016c04:	462f      	mov	r7, r5
 8016c06:	2501      	movs	r5, #1
 8016c08:	e7c3      	b.n	8016b92 <__gethex+0x9e>
 8016c0a:	2400      	movs	r4, #0
 8016c0c:	1cb1      	adds	r1, r6, #2
 8016c0e:	e7cc      	b.n	8016baa <__gethex+0xb6>
 8016c10:	2401      	movs	r4, #1
 8016c12:	e7fb      	b.n	8016c0c <__gethex+0x118>
 8016c14:	fb03 0002 	mla	r0, r3, r2, r0
 8016c18:	e7ce      	b.n	8016bb8 <__gethex+0xc4>
 8016c1a:	4631      	mov	r1, r6
 8016c1c:	e7de      	b.n	8016bdc <__gethex+0xe8>
 8016c1e:	eba6 0309 	sub.w	r3, r6, r9
 8016c22:	3b01      	subs	r3, #1
 8016c24:	4629      	mov	r1, r5
 8016c26:	2b07      	cmp	r3, #7
 8016c28:	dc0a      	bgt.n	8016c40 <__gethex+0x14c>
 8016c2a:	9801      	ldr	r0, [sp, #4]
 8016c2c:	f7fd fdc6 	bl	80147bc <_Balloc>
 8016c30:	4604      	mov	r4, r0
 8016c32:	b940      	cbnz	r0, 8016c46 <__gethex+0x152>
 8016c34:	4b5c      	ldr	r3, [pc, #368]	@ (8016da8 <__gethex+0x2b4>)
 8016c36:	4602      	mov	r2, r0
 8016c38:	21e4      	movs	r1, #228	@ 0xe4
 8016c3a:	485c      	ldr	r0, [pc, #368]	@ (8016dac <__gethex+0x2b8>)
 8016c3c:	f7fc ff0a 	bl	8013a54 <__assert_func>
 8016c40:	3101      	adds	r1, #1
 8016c42:	105b      	asrs	r3, r3, #1
 8016c44:	e7ef      	b.n	8016c26 <__gethex+0x132>
 8016c46:	f100 0a14 	add.w	sl, r0, #20
 8016c4a:	2300      	movs	r3, #0
 8016c4c:	4655      	mov	r5, sl
 8016c4e:	469b      	mov	fp, r3
 8016c50:	45b1      	cmp	r9, r6
 8016c52:	d337      	bcc.n	8016cc4 <__gethex+0x1d0>
 8016c54:	f845 bb04 	str.w	fp, [r5], #4
 8016c58:	eba5 050a 	sub.w	r5, r5, sl
 8016c5c:	10ad      	asrs	r5, r5, #2
 8016c5e:	6125      	str	r5, [r4, #16]
 8016c60:	4658      	mov	r0, fp
 8016c62:	f7fd fe9d 	bl	80149a0 <__hi0bits>
 8016c66:	016d      	lsls	r5, r5, #5
 8016c68:	f8d8 6000 	ldr.w	r6, [r8]
 8016c6c:	1a2d      	subs	r5, r5, r0
 8016c6e:	42b5      	cmp	r5, r6
 8016c70:	dd54      	ble.n	8016d1c <__gethex+0x228>
 8016c72:	1bad      	subs	r5, r5, r6
 8016c74:	4629      	mov	r1, r5
 8016c76:	4620      	mov	r0, r4
 8016c78:	f7fe fa31 	bl	80150de <__any_on>
 8016c7c:	4681      	mov	r9, r0
 8016c7e:	b178      	cbz	r0, 8016ca0 <__gethex+0x1ac>
 8016c80:	1e6b      	subs	r3, r5, #1
 8016c82:	1159      	asrs	r1, r3, #5
 8016c84:	f003 021f 	and.w	r2, r3, #31
 8016c88:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8016c8c:	f04f 0901 	mov.w	r9, #1
 8016c90:	fa09 f202 	lsl.w	r2, r9, r2
 8016c94:	420a      	tst	r2, r1
 8016c96:	d003      	beq.n	8016ca0 <__gethex+0x1ac>
 8016c98:	454b      	cmp	r3, r9
 8016c9a:	dc36      	bgt.n	8016d0a <__gethex+0x216>
 8016c9c:	f04f 0902 	mov.w	r9, #2
 8016ca0:	4629      	mov	r1, r5
 8016ca2:	4620      	mov	r0, r4
 8016ca4:	f7ff febf 	bl	8016a26 <rshift>
 8016ca8:	442f      	add	r7, r5
 8016caa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016cae:	42bb      	cmp	r3, r7
 8016cb0:	da42      	bge.n	8016d38 <__gethex+0x244>
 8016cb2:	9801      	ldr	r0, [sp, #4]
 8016cb4:	4621      	mov	r1, r4
 8016cb6:	f7fd fdc1 	bl	801483c <_Bfree>
 8016cba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016cbc:	2300      	movs	r3, #0
 8016cbe:	6013      	str	r3, [r2, #0]
 8016cc0:	25a3      	movs	r5, #163	@ 0xa3
 8016cc2:	e793      	b.n	8016bec <__gethex+0xf8>
 8016cc4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8016cc8:	2a2e      	cmp	r2, #46	@ 0x2e
 8016cca:	d012      	beq.n	8016cf2 <__gethex+0x1fe>
 8016ccc:	2b20      	cmp	r3, #32
 8016cce:	d104      	bne.n	8016cda <__gethex+0x1e6>
 8016cd0:	f845 bb04 	str.w	fp, [r5], #4
 8016cd4:	f04f 0b00 	mov.w	fp, #0
 8016cd8:	465b      	mov	r3, fp
 8016cda:	7830      	ldrb	r0, [r6, #0]
 8016cdc:	9303      	str	r3, [sp, #12]
 8016cde:	f7ff fef4 	bl	8016aca <__hexdig_fun>
 8016ce2:	9b03      	ldr	r3, [sp, #12]
 8016ce4:	f000 000f 	and.w	r0, r0, #15
 8016ce8:	4098      	lsls	r0, r3
 8016cea:	ea4b 0b00 	orr.w	fp, fp, r0
 8016cee:	3304      	adds	r3, #4
 8016cf0:	e7ae      	b.n	8016c50 <__gethex+0x15c>
 8016cf2:	45b1      	cmp	r9, r6
 8016cf4:	d8ea      	bhi.n	8016ccc <__gethex+0x1d8>
 8016cf6:	492b      	ldr	r1, [pc, #172]	@ (8016da4 <__gethex+0x2b0>)
 8016cf8:	9303      	str	r3, [sp, #12]
 8016cfa:	2201      	movs	r2, #1
 8016cfc:	4630      	mov	r0, r6
 8016cfe:	f7ff fe5a 	bl	80169b6 <strncmp>
 8016d02:	9b03      	ldr	r3, [sp, #12]
 8016d04:	2800      	cmp	r0, #0
 8016d06:	d1e1      	bne.n	8016ccc <__gethex+0x1d8>
 8016d08:	e7a2      	b.n	8016c50 <__gethex+0x15c>
 8016d0a:	1ea9      	subs	r1, r5, #2
 8016d0c:	4620      	mov	r0, r4
 8016d0e:	f7fe f9e6 	bl	80150de <__any_on>
 8016d12:	2800      	cmp	r0, #0
 8016d14:	d0c2      	beq.n	8016c9c <__gethex+0x1a8>
 8016d16:	f04f 0903 	mov.w	r9, #3
 8016d1a:	e7c1      	b.n	8016ca0 <__gethex+0x1ac>
 8016d1c:	da09      	bge.n	8016d32 <__gethex+0x23e>
 8016d1e:	1b75      	subs	r5, r6, r5
 8016d20:	4621      	mov	r1, r4
 8016d22:	9801      	ldr	r0, [sp, #4]
 8016d24:	462a      	mov	r2, r5
 8016d26:	f7fd ffa1 	bl	8014c6c <__lshift>
 8016d2a:	1b7f      	subs	r7, r7, r5
 8016d2c:	4604      	mov	r4, r0
 8016d2e:	f100 0a14 	add.w	sl, r0, #20
 8016d32:	f04f 0900 	mov.w	r9, #0
 8016d36:	e7b8      	b.n	8016caa <__gethex+0x1b6>
 8016d38:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8016d3c:	42bd      	cmp	r5, r7
 8016d3e:	dd6f      	ble.n	8016e20 <__gethex+0x32c>
 8016d40:	1bed      	subs	r5, r5, r7
 8016d42:	42ae      	cmp	r6, r5
 8016d44:	dc34      	bgt.n	8016db0 <__gethex+0x2bc>
 8016d46:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016d4a:	2b02      	cmp	r3, #2
 8016d4c:	d022      	beq.n	8016d94 <__gethex+0x2a0>
 8016d4e:	2b03      	cmp	r3, #3
 8016d50:	d024      	beq.n	8016d9c <__gethex+0x2a8>
 8016d52:	2b01      	cmp	r3, #1
 8016d54:	d115      	bne.n	8016d82 <__gethex+0x28e>
 8016d56:	42ae      	cmp	r6, r5
 8016d58:	d113      	bne.n	8016d82 <__gethex+0x28e>
 8016d5a:	2e01      	cmp	r6, #1
 8016d5c:	d10b      	bne.n	8016d76 <__gethex+0x282>
 8016d5e:	9a02      	ldr	r2, [sp, #8]
 8016d60:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016d64:	6013      	str	r3, [r2, #0]
 8016d66:	2301      	movs	r3, #1
 8016d68:	6123      	str	r3, [r4, #16]
 8016d6a:	f8ca 3000 	str.w	r3, [sl]
 8016d6e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016d70:	2562      	movs	r5, #98	@ 0x62
 8016d72:	601c      	str	r4, [r3, #0]
 8016d74:	e73a      	b.n	8016bec <__gethex+0xf8>
 8016d76:	1e71      	subs	r1, r6, #1
 8016d78:	4620      	mov	r0, r4
 8016d7a:	f7fe f9b0 	bl	80150de <__any_on>
 8016d7e:	2800      	cmp	r0, #0
 8016d80:	d1ed      	bne.n	8016d5e <__gethex+0x26a>
 8016d82:	9801      	ldr	r0, [sp, #4]
 8016d84:	4621      	mov	r1, r4
 8016d86:	f7fd fd59 	bl	801483c <_Bfree>
 8016d8a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016d8c:	2300      	movs	r3, #0
 8016d8e:	6013      	str	r3, [r2, #0]
 8016d90:	2550      	movs	r5, #80	@ 0x50
 8016d92:	e72b      	b.n	8016bec <__gethex+0xf8>
 8016d94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016d96:	2b00      	cmp	r3, #0
 8016d98:	d1f3      	bne.n	8016d82 <__gethex+0x28e>
 8016d9a:	e7e0      	b.n	8016d5e <__gethex+0x26a>
 8016d9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016d9e:	2b00      	cmp	r3, #0
 8016da0:	d1dd      	bne.n	8016d5e <__gethex+0x26a>
 8016da2:	e7ee      	b.n	8016d82 <__gethex+0x28e>
 8016da4:	0805d920 	.word	0x0805d920
 8016da8:	0805d7b9 	.word	0x0805d7b9
 8016dac:	0805daad 	.word	0x0805daad
 8016db0:	1e6f      	subs	r7, r5, #1
 8016db2:	f1b9 0f00 	cmp.w	r9, #0
 8016db6:	d130      	bne.n	8016e1a <__gethex+0x326>
 8016db8:	b127      	cbz	r7, 8016dc4 <__gethex+0x2d0>
 8016dba:	4639      	mov	r1, r7
 8016dbc:	4620      	mov	r0, r4
 8016dbe:	f7fe f98e 	bl	80150de <__any_on>
 8016dc2:	4681      	mov	r9, r0
 8016dc4:	117a      	asrs	r2, r7, #5
 8016dc6:	2301      	movs	r3, #1
 8016dc8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8016dcc:	f007 071f 	and.w	r7, r7, #31
 8016dd0:	40bb      	lsls	r3, r7
 8016dd2:	4213      	tst	r3, r2
 8016dd4:	4629      	mov	r1, r5
 8016dd6:	4620      	mov	r0, r4
 8016dd8:	bf18      	it	ne
 8016dda:	f049 0902 	orrne.w	r9, r9, #2
 8016dde:	f7ff fe22 	bl	8016a26 <rshift>
 8016de2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8016de6:	1b76      	subs	r6, r6, r5
 8016de8:	2502      	movs	r5, #2
 8016dea:	f1b9 0f00 	cmp.w	r9, #0
 8016dee:	d047      	beq.n	8016e80 <__gethex+0x38c>
 8016df0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016df4:	2b02      	cmp	r3, #2
 8016df6:	d015      	beq.n	8016e24 <__gethex+0x330>
 8016df8:	2b03      	cmp	r3, #3
 8016dfa:	d017      	beq.n	8016e2c <__gethex+0x338>
 8016dfc:	2b01      	cmp	r3, #1
 8016dfe:	d109      	bne.n	8016e14 <__gethex+0x320>
 8016e00:	f019 0f02 	tst.w	r9, #2
 8016e04:	d006      	beq.n	8016e14 <__gethex+0x320>
 8016e06:	f8da 3000 	ldr.w	r3, [sl]
 8016e0a:	ea49 0903 	orr.w	r9, r9, r3
 8016e0e:	f019 0f01 	tst.w	r9, #1
 8016e12:	d10e      	bne.n	8016e32 <__gethex+0x33e>
 8016e14:	f045 0510 	orr.w	r5, r5, #16
 8016e18:	e032      	b.n	8016e80 <__gethex+0x38c>
 8016e1a:	f04f 0901 	mov.w	r9, #1
 8016e1e:	e7d1      	b.n	8016dc4 <__gethex+0x2d0>
 8016e20:	2501      	movs	r5, #1
 8016e22:	e7e2      	b.n	8016dea <__gethex+0x2f6>
 8016e24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016e26:	f1c3 0301 	rsb	r3, r3, #1
 8016e2a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8016e2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016e2e:	2b00      	cmp	r3, #0
 8016e30:	d0f0      	beq.n	8016e14 <__gethex+0x320>
 8016e32:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8016e36:	f104 0314 	add.w	r3, r4, #20
 8016e3a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8016e3e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8016e42:	f04f 0c00 	mov.w	ip, #0
 8016e46:	4618      	mov	r0, r3
 8016e48:	f853 2b04 	ldr.w	r2, [r3], #4
 8016e4c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8016e50:	d01b      	beq.n	8016e8a <__gethex+0x396>
 8016e52:	3201      	adds	r2, #1
 8016e54:	6002      	str	r2, [r0, #0]
 8016e56:	2d02      	cmp	r5, #2
 8016e58:	f104 0314 	add.w	r3, r4, #20
 8016e5c:	d13c      	bne.n	8016ed8 <__gethex+0x3e4>
 8016e5e:	f8d8 2000 	ldr.w	r2, [r8]
 8016e62:	3a01      	subs	r2, #1
 8016e64:	42b2      	cmp	r2, r6
 8016e66:	d109      	bne.n	8016e7c <__gethex+0x388>
 8016e68:	1171      	asrs	r1, r6, #5
 8016e6a:	2201      	movs	r2, #1
 8016e6c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016e70:	f006 061f 	and.w	r6, r6, #31
 8016e74:	fa02 f606 	lsl.w	r6, r2, r6
 8016e78:	421e      	tst	r6, r3
 8016e7a:	d13a      	bne.n	8016ef2 <__gethex+0x3fe>
 8016e7c:	f045 0520 	orr.w	r5, r5, #32
 8016e80:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016e82:	601c      	str	r4, [r3, #0]
 8016e84:	9b02      	ldr	r3, [sp, #8]
 8016e86:	601f      	str	r7, [r3, #0]
 8016e88:	e6b0      	b.n	8016bec <__gethex+0xf8>
 8016e8a:	4299      	cmp	r1, r3
 8016e8c:	f843 cc04 	str.w	ip, [r3, #-4]
 8016e90:	d8d9      	bhi.n	8016e46 <__gethex+0x352>
 8016e92:	68a3      	ldr	r3, [r4, #8]
 8016e94:	459b      	cmp	fp, r3
 8016e96:	db17      	blt.n	8016ec8 <__gethex+0x3d4>
 8016e98:	6861      	ldr	r1, [r4, #4]
 8016e9a:	9801      	ldr	r0, [sp, #4]
 8016e9c:	3101      	adds	r1, #1
 8016e9e:	f7fd fc8d 	bl	80147bc <_Balloc>
 8016ea2:	4681      	mov	r9, r0
 8016ea4:	b918      	cbnz	r0, 8016eae <__gethex+0x3ba>
 8016ea6:	4b1a      	ldr	r3, [pc, #104]	@ (8016f10 <__gethex+0x41c>)
 8016ea8:	4602      	mov	r2, r0
 8016eaa:	2184      	movs	r1, #132	@ 0x84
 8016eac:	e6c5      	b.n	8016c3a <__gethex+0x146>
 8016eae:	6922      	ldr	r2, [r4, #16]
 8016eb0:	3202      	adds	r2, #2
 8016eb2:	f104 010c 	add.w	r1, r4, #12
 8016eb6:	0092      	lsls	r2, r2, #2
 8016eb8:	300c      	adds	r0, #12
 8016eba:	f7fc fdb6 	bl	8013a2a <memcpy>
 8016ebe:	4621      	mov	r1, r4
 8016ec0:	9801      	ldr	r0, [sp, #4]
 8016ec2:	f7fd fcbb 	bl	801483c <_Bfree>
 8016ec6:	464c      	mov	r4, r9
 8016ec8:	6923      	ldr	r3, [r4, #16]
 8016eca:	1c5a      	adds	r2, r3, #1
 8016ecc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8016ed0:	6122      	str	r2, [r4, #16]
 8016ed2:	2201      	movs	r2, #1
 8016ed4:	615a      	str	r2, [r3, #20]
 8016ed6:	e7be      	b.n	8016e56 <__gethex+0x362>
 8016ed8:	6922      	ldr	r2, [r4, #16]
 8016eda:	455a      	cmp	r2, fp
 8016edc:	dd0b      	ble.n	8016ef6 <__gethex+0x402>
 8016ede:	2101      	movs	r1, #1
 8016ee0:	4620      	mov	r0, r4
 8016ee2:	f7ff fda0 	bl	8016a26 <rshift>
 8016ee6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016eea:	3701      	adds	r7, #1
 8016eec:	42bb      	cmp	r3, r7
 8016eee:	f6ff aee0 	blt.w	8016cb2 <__gethex+0x1be>
 8016ef2:	2501      	movs	r5, #1
 8016ef4:	e7c2      	b.n	8016e7c <__gethex+0x388>
 8016ef6:	f016 061f 	ands.w	r6, r6, #31
 8016efa:	d0fa      	beq.n	8016ef2 <__gethex+0x3fe>
 8016efc:	4453      	add	r3, sl
 8016efe:	f1c6 0620 	rsb	r6, r6, #32
 8016f02:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8016f06:	f7fd fd4b 	bl	80149a0 <__hi0bits>
 8016f0a:	42b0      	cmp	r0, r6
 8016f0c:	dbe7      	blt.n	8016ede <__gethex+0x3ea>
 8016f0e:	e7f0      	b.n	8016ef2 <__gethex+0x3fe>
 8016f10:	0805d7b9 	.word	0x0805d7b9

08016f14 <L_shift>:
 8016f14:	f1c2 0208 	rsb	r2, r2, #8
 8016f18:	0092      	lsls	r2, r2, #2
 8016f1a:	b570      	push	{r4, r5, r6, lr}
 8016f1c:	f1c2 0620 	rsb	r6, r2, #32
 8016f20:	6843      	ldr	r3, [r0, #4]
 8016f22:	6804      	ldr	r4, [r0, #0]
 8016f24:	fa03 f506 	lsl.w	r5, r3, r6
 8016f28:	432c      	orrs	r4, r5
 8016f2a:	40d3      	lsrs	r3, r2
 8016f2c:	6004      	str	r4, [r0, #0]
 8016f2e:	f840 3f04 	str.w	r3, [r0, #4]!
 8016f32:	4288      	cmp	r0, r1
 8016f34:	d3f4      	bcc.n	8016f20 <L_shift+0xc>
 8016f36:	bd70      	pop	{r4, r5, r6, pc}

08016f38 <__match>:
 8016f38:	b530      	push	{r4, r5, lr}
 8016f3a:	6803      	ldr	r3, [r0, #0]
 8016f3c:	3301      	adds	r3, #1
 8016f3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016f42:	b914      	cbnz	r4, 8016f4a <__match+0x12>
 8016f44:	6003      	str	r3, [r0, #0]
 8016f46:	2001      	movs	r0, #1
 8016f48:	bd30      	pop	{r4, r5, pc}
 8016f4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016f4e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8016f52:	2d19      	cmp	r5, #25
 8016f54:	bf98      	it	ls
 8016f56:	3220      	addls	r2, #32
 8016f58:	42a2      	cmp	r2, r4
 8016f5a:	d0f0      	beq.n	8016f3e <__match+0x6>
 8016f5c:	2000      	movs	r0, #0
 8016f5e:	e7f3      	b.n	8016f48 <__match+0x10>

08016f60 <__hexnan>:
 8016f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f64:	680b      	ldr	r3, [r1, #0]
 8016f66:	6801      	ldr	r1, [r0, #0]
 8016f68:	115e      	asrs	r6, r3, #5
 8016f6a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8016f6e:	f013 031f 	ands.w	r3, r3, #31
 8016f72:	b087      	sub	sp, #28
 8016f74:	bf18      	it	ne
 8016f76:	3604      	addne	r6, #4
 8016f78:	2500      	movs	r5, #0
 8016f7a:	1f37      	subs	r7, r6, #4
 8016f7c:	4682      	mov	sl, r0
 8016f7e:	4690      	mov	r8, r2
 8016f80:	9301      	str	r3, [sp, #4]
 8016f82:	f846 5c04 	str.w	r5, [r6, #-4]
 8016f86:	46b9      	mov	r9, r7
 8016f88:	463c      	mov	r4, r7
 8016f8a:	9502      	str	r5, [sp, #8]
 8016f8c:	46ab      	mov	fp, r5
 8016f8e:	784a      	ldrb	r2, [r1, #1]
 8016f90:	1c4b      	adds	r3, r1, #1
 8016f92:	9303      	str	r3, [sp, #12]
 8016f94:	b342      	cbz	r2, 8016fe8 <__hexnan+0x88>
 8016f96:	4610      	mov	r0, r2
 8016f98:	9105      	str	r1, [sp, #20]
 8016f9a:	9204      	str	r2, [sp, #16]
 8016f9c:	f7ff fd95 	bl	8016aca <__hexdig_fun>
 8016fa0:	2800      	cmp	r0, #0
 8016fa2:	d151      	bne.n	8017048 <__hexnan+0xe8>
 8016fa4:	9a04      	ldr	r2, [sp, #16]
 8016fa6:	9905      	ldr	r1, [sp, #20]
 8016fa8:	2a20      	cmp	r2, #32
 8016faa:	d818      	bhi.n	8016fde <__hexnan+0x7e>
 8016fac:	9b02      	ldr	r3, [sp, #8]
 8016fae:	459b      	cmp	fp, r3
 8016fb0:	dd13      	ble.n	8016fda <__hexnan+0x7a>
 8016fb2:	454c      	cmp	r4, r9
 8016fb4:	d206      	bcs.n	8016fc4 <__hexnan+0x64>
 8016fb6:	2d07      	cmp	r5, #7
 8016fb8:	dc04      	bgt.n	8016fc4 <__hexnan+0x64>
 8016fba:	462a      	mov	r2, r5
 8016fbc:	4649      	mov	r1, r9
 8016fbe:	4620      	mov	r0, r4
 8016fc0:	f7ff ffa8 	bl	8016f14 <L_shift>
 8016fc4:	4544      	cmp	r4, r8
 8016fc6:	d952      	bls.n	801706e <__hexnan+0x10e>
 8016fc8:	2300      	movs	r3, #0
 8016fca:	f1a4 0904 	sub.w	r9, r4, #4
 8016fce:	f844 3c04 	str.w	r3, [r4, #-4]
 8016fd2:	f8cd b008 	str.w	fp, [sp, #8]
 8016fd6:	464c      	mov	r4, r9
 8016fd8:	461d      	mov	r5, r3
 8016fda:	9903      	ldr	r1, [sp, #12]
 8016fdc:	e7d7      	b.n	8016f8e <__hexnan+0x2e>
 8016fde:	2a29      	cmp	r2, #41	@ 0x29
 8016fe0:	d157      	bne.n	8017092 <__hexnan+0x132>
 8016fe2:	3102      	adds	r1, #2
 8016fe4:	f8ca 1000 	str.w	r1, [sl]
 8016fe8:	f1bb 0f00 	cmp.w	fp, #0
 8016fec:	d051      	beq.n	8017092 <__hexnan+0x132>
 8016fee:	454c      	cmp	r4, r9
 8016ff0:	d206      	bcs.n	8017000 <__hexnan+0xa0>
 8016ff2:	2d07      	cmp	r5, #7
 8016ff4:	dc04      	bgt.n	8017000 <__hexnan+0xa0>
 8016ff6:	462a      	mov	r2, r5
 8016ff8:	4649      	mov	r1, r9
 8016ffa:	4620      	mov	r0, r4
 8016ffc:	f7ff ff8a 	bl	8016f14 <L_shift>
 8017000:	4544      	cmp	r4, r8
 8017002:	d936      	bls.n	8017072 <__hexnan+0x112>
 8017004:	f1a8 0204 	sub.w	r2, r8, #4
 8017008:	4623      	mov	r3, r4
 801700a:	f853 1b04 	ldr.w	r1, [r3], #4
 801700e:	f842 1f04 	str.w	r1, [r2, #4]!
 8017012:	429f      	cmp	r7, r3
 8017014:	d2f9      	bcs.n	801700a <__hexnan+0xaa>
 8017016:	1b3b      	subs	r3, r7, r4
 8017018:	f023 0303 	bic.w	r3, r3, #3
 801701c:	3304      	adds	r3, #4
 801701e:	3401      	adds	r4, #1
 8017020:	3e03      	subs	r6, #3
 8017022:	42b4      	cmp	r4, r6
 8017024:	bf88      	it	hi
 8017026:	2304      	movhi	r3, #4
 8017028:	4443      	add	r3, r8
 801702a:	2200      	movs	r2, #0
 801702c:	f843 2b04 	str.w	r2, [r3], #4
 8017030:	429f      	cmp	r7, r3
 8017032:	d2fb      	bcs.n	801702c <__hexnan+0xcc>
 8017034:	683b      	ldr	r3, [r7, #0]
 8017036:	b91b      	cbnz	r3, 8017040 <__hexnan+0xe0>
 8017038:	4547      	cmp	r7, r8
 801703a:	d128      	bne.n	801708e <__hexnan+0x12e>
 801703c:	2301      	movs	r3, #1
 801703e:	603b      	str	r3, [r7, #0]
 8017040:	2005      	movs	r0, #5
 8017042:	b007      	add	sp, #28
 8017044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017048:	3501      	adds	r5, #1
 801704a:	2d08      	cmp	r5, #8
 801704c:	f10b 0b01 	add.w	fp, fp, #1
 8017050:	dd06      	ble.n	8017060 <__hexnan+0x100>
 8017052:	4544      	cmp	r4, r8
 8017054:	d9c1      	bls.n	8016fda <__hexnan+0x7a>
 8017056:	2300      	movs	r3, #0
 8017058:	f844 3c04 	str.w	r3, [r4, #-4]
 801705c:	2501      	movs	r5, #1
 801705e:	3c04      	subs	r4, #4
 8017060:	6822      	ldr	r2, [r4, #0]
 8017062:	f000 000f 	and.w	r0, r0, #15
 8017066:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801706a:	6020      	str	r0, [r4, #0]
 801706c:	e7b5      	b.n	8016fda <__hexnan+0x7a>
 801706e:	2508      	movs	r5, #8
 8017070:	e7b3      	b.n	8016fda <__hexnan+0x7a>
 8017072:	9b01      	ldr	r3, [sp, #4]
 8017074:	2b00      	cmp	r3, #0
 8017076:	d0dd      	beq.n	8017034 <__hexnan+0xd4>
 8017078:	f1c3 0320 	rsb	r3, r3, #32
 801707c:	f04f 32ff 	mov.w	r2, #4294967295
 8017080:	40da      	lsrs	r2, r3
 8017082:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8017086:	4013      	ands	r3, r2
 8017088:	f846 3c04 	str.w	r3, [r6, #-4]
 801708c:	e7d2      	b.n	8017034 <__hexnan+0xd4>
 801708e:	3f04      	subs	r7, #4
 8017090:	e7d0      	b.n	8017034 <__hexnan+0xd4>
 8017092:	2004      	movs	r0, #4
 8017094:	e7d5      	b.n	8017042 <__hexnan+0xe2>

08017096 <__ascii_mbtowc>:
 8017096:	b082      	sub	sp, #8
 8017098:	b901      	cbnz	r1, 801709c <__ascii_mbtowc+0x6>
 801709a:	a901      	add	r1, sp, #4
 801709c:	b142      	cbz	r2, 80170b0 <__ascii_mbtowc+0x1a>
 801709e:	b14b      	cbz	r3, 80170b4 <__ascii_mbtowc+0x1e>
 80170a0:	7813      	ldrb	r3, [r2, #0]
 80170a2:	600b      	str	r3, [r1, #0]
 80170a4:	7812      	ldrb	r2, [r2, #0]
 80170a6:	1e10      	subs	r0, r2, #0
 80170a8:	bf18      	it	ne
 80170aa:	2001      	movne	r0, #1
 80170ac:	b002      	add	sp, #8
 80170ae:	4770      	bx	lr
 80170b0:	4610      	mov	r0, r2
 80170b2:	e7fb      	b.n	80170ac <__ascii_mbtowc+0x16>
 80170b4:	f06f 0001 	mvn.w	r0, #1
 80170b8:	e7f8      	b.n	80170ac <__ascii_mbtowc+0x16>
	...

080170bc <_strtoul_l.constprop.0>:
 80170bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80170c0:	4e34      	ldr	r6, [pc, #208]	@ (8017194 <_strtoul_l.constprop.0+0xd8>)
 80170c2:	4686      	mov	lr, r0
 80170c4:	460d      	mov	r5, r1
 80170c6:	4628      	mov	r0, r5
 80170c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80170cc:	5d37      	ldrb	r7, [r6, r4]
 80170ce:	f017 0708 	ands.w	r7, r7, #8
 80170d2:	d1f8      	bne.n	80170c6 <_strtoul_l.constprop.0+0xa>
 80170d4:	2c2d      	cmp	r4, #45	@ 0x2d
 80170d6:	d12f      	bne.n	8017138 <_strtoul_l.constprop.0+0x7c>
 80170d8:	782c      	ldrb	r4, [r5, #0]
 80170da:	2701      	movs	r7, #1
 80170dc:	1c85      	adds	r5, r0, #2
 80170de:	f033 0010 	bics.w	r0, r3, #16
 80170e2:	d109      	bne.n	80170f8 <_strtoul_l.constprop.0+0x3c>
 80170e4:	2c30      	cmp	r4, #48	@ 0x30
 80170e6:	d12c      	bne.n	8017142 <_strtoul_l.constprop.0+0x86>
 80170e8:	7828      	ldrb	r0, [r5, #0]
 80170ea:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80170ee:	2858      	cmp	r0, #88	@ 0x58
 80170f0:	d127      	bne.n	8017142 <_strtoul_l.constprop.0+0x86>
 80170f2:	786c      	ldrb	r4, [r5, #1]
 80170f4:	2310      	movs	r3, #16
 80170f6:	3502      	adds	r5, #2
 80170f8:	f04f 38ff 	mov.w	r8, #4294967295
 80170fc:	2600      	movs	r6, #0
 80170fe:	fbb8 f8f3 	udiv	r8, r8, r3
 8017102:	fb03 f908 	mul.w	r9, r3, r8
 8017106:	ea6f 0909 	mvn.w	r9, r9
 801710a:	4630      	mov	r0, r6
 801710c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8017110:	f1bc 0f09 	cmp.w	ip, #9
 8017114:	d81c      	bhi.n	8017150 <_strtoul_l.constprop.0+0x94>
 8017116:	4664      	mov	r4, ip
 8017118:	42a3      	cmp	r3, r4
 801711a:	dd2a      	ble.n	8017172 <_strtoul_l.constprop.0+0xb6>
 801711c:	f1b6 3fff 	cmp.w	r6, #4294967295
 8017120:	d007      	beq.n	8017132 <_strtoul_l.constprop.0+0x76>
 8017122:	4580      	cmp	r8, r0
 8017124:	d322      	bcc.n	801716c <_strtoul_l.constprop.0+0xb0>
 8017126:	d101      	bne.n	801712c <_strtoul_l.constprop.0+0x70>
 8017128:	45a1      	cmp	r9, r4
 801712a:	db1f      	blt.n	801716c <_strtoul_l.constprop.0+0xb0>
 801712c:	fb00 4003 	mla	r0, r0, r3, r4
 8017130:	2601      	movs	r6, #1
 8017132:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017136:	e7e9      	b.n	801710c <_strtoul_l.constprop.0+0x50>
 8017138:	2c2b      	cmp	r4, #43	@ 0x2b
 801713a:	bf04      	itt	eq
 801713c:	782c      	ldrbeq	r4, [r5, #0]
 801713e:	1c85      	addeq	r5, r0, #2
 8017140:	e7cd      	b.n	80170de <_strtoul_l.constprop.0+0x22>
 8017142:	2b00      	cmp	r3, #0
 8017144:	d1d8      	bne.n	80170f8 <_strtoul_l.constprop.0+0x3c>
 8017146:	2c30      	cmp	r4, #48	@ 0x30
 8017148:	bf0c      	ite	eq
 801714a:	2308      	moveq	r3, #8
 801714c:	230a      	movne	r3, #10
 801714e:	e7d3      	b.n	80170f8 <_strtoul_l.constprop.0+0x3c>
 8017150:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8017154:	f1bc 0f19 	cmp.w	ip, #25
 8017158:	d801      	bhi.n	801715e <_strtoul_l.constprop.0+0xa2>
 801715a:	3c37      	subs	r4, #55	@ 0x37
 801715c:	e7dc      	b.n	8017118 <_strtoul_l.constprop.0+0x5c>
 801715e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8017162:	f1bc 0f19 	cmp.w	ip, #25
 8017166:	d804      	bhi.n	8017172 <_strtoul_l.constprop.0+0xb6>
 8017168:	3c57      	subs	r4, #87	@ 0x57
 801716a:	e7d5      	b.n	8017118 <_strtoul_l.constprop.0+0x5c>
 801716c:	f04f 36ff 	mov.w	r6, #4294967295
 8017170:	e7df      	b.n	8017132 <_strtoul_l.constprop.0+0x76>
 8017172:	1c73      	adds	r3, r6, #1
 8017174:	d106      	bne.n	8017184 <_strtoul_l.constprop.0+0xc8>
 8017176:	2322      	movs	r3, #34	@ 0x22
 8017178:	f8ce 3000 	str.w	r3, [lr]
 801717c:	4630      	mov	r0, r6
 801717e:	b932      	cbnz	r2, 801718e <_strtoul_l.constprop.0+0xd2>
 8017180:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017184:	b107      	cbz	r7, 8017188 <_strtoul_l.constprop.0+0xcc>
 8017186:	4240      	negs	r0, r0
 8017188:	2a00      	cmp	r2, #0
 801718a:	d0f9      	beq.n	8017180 <_strtoul_l.constprop.0+0xc4>
 801718c:	b106      	cbz	r6, 8017190 <_strtoul_l.constprop.0+0xd4>
 801718e:	1e69      	subs	r1, r5, #1
 8017190:	6011      	str	r1, [r2, #0]
 8017192:	e7f5      	b.n	8017180 <_strtoul_l.constprop.0+0xc4>
 8017194:	0805d979 	.word	0x0805d979

08017198 <_strtoul_r>:
 8017198:	f7ff bf90 	b.w	80170bc <_strtoul_l.constprop.0>

0801719c <__ascii_wctomb>:
 801719c:	4603      	mov	r3, r0
 801719e:	4608      	mov	r0, r1
 80171a0:	b141      	cbz	r1, 80171b4 <__ascii_wctomb+0x18>
 80171a2:	2aff      	cmp	r2, #255	@ 0xff
 80171a4:	d904      	bls.n	80171b0 <__ascii_wctomb+0x14>
 80171a6:	228a      	movs	r2, #138	@ 0x8a
 80171a8:	601a      	str	r2, [r3, #0]
 80171aa:	f04f 30ff 	mov.w	r0, #4294967295
 80171ae:	4770      	bx	lr
 80171b0:	700a      	strb	r2, [r1, #0]
 80171b2:	2001      	movs	r0, #1
 80171b4:	4770      	bx	lr

080171b6 <__sfputc_r>:
 80171b6:	6893      	ldr	r3, [r2, #8]
 80171b8:	3b01      	subs	r3, #1
 80171ba:	2b00      	cmp	r3, #0
 80171bc:	b410      	push	{r4}
 80171be:	6093      	str	r3, [r2, #8]
 80171c0:	da08      	bge.n	80171d4 <__sfputc_r+0x1e>
 80171c2:	6994      	ldr	r4, [r2, #24]
 80171c4:	42a3      	cmp	r3, r4
 80171c6:	db01      	blt.n	80171cc <__sfputc_r+0x16>
 80171c8:	290a      	cmp	r1, #10
 80171ca:	d103      	bne.n	80171d4 <__sfputc_r+0x1e>
 80171cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80171d0:	f000 b932 	b.w	8017438 <__swbuf_r>
 80171d4:	6813      	ldr	r3, [r2, #0]
 80171d6:	1c58      	adds	r0, r3, #1
 80171d8:	6010      	str	r0, [r2, #0]
 80171da:	7019      	strb	r1, [r3, #0]
 80171dc:	4608      	mov	r0, r1
 80171de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80171e2:	4770      	bx	lr

080171e4 <__sfputs_r>:
 80171e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80171e6:	4606      	mov	r6, r0
 80171e8:	460f      	mov	r7, r1
 80171ea:	4614      	mov	r4, r2
 80171ec:	18d5      	adds	r5, r2, r3
 80171ee:	42ac      	cmp	r4, r5
 80171f0:	d101      	bne.n	80171f6 <__sfputs_r+0x12>
 80171f2:	2000      	movs	r0, #0
 80171f4:	e007      	b.n	8017206 <__sfputs_r+0x22>
 80171f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80171fa:	463a      	mov	r2, r7
 80171fc:	4630      	mov	r0, r6
 80171fe:	f7ff ffda 	bl	80171b6 <__sfputc_r>
 8017202:	1c43      	adds	r3, r0, #1
 8017204:	d1f3      	bne.n	80171ee <__sfputs_r+0xa>
 8017206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017208 <_vfiprintf_r>:
 8017208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801720c:	460d      	mov	r5, r1
 801720e:	b09d      	sub	sp, #116	@ 0x74
 8017210:	4614      	mov	r4, r2
 8017212:	4698      	mov	r8, r3
 8017214:	4606      	mov	r6, r0
 8017216:	b118      	cbz	r0, 8017220 <_vfiprintf_r+0x18>
 8017218:	6a03      	ldr	r3, [r0, #32]
 801721a:	b90b      	cbnz	r3, 8017220 <_vfiprintf_r+0x18>
 801721c:	f7fc fa4c 	bl	80136b8 <__sinit>
 8017220:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017222:	07d9      	lsls	r1, r3, #31
 8017224:	d405      	bmi.n	8017232 <_vfiprintf_r+0x2a>
 8017226:	89ab      	ldrh	r3, [r5, #12]
 8017228:	059a      	lsls	r2, r3, #22
 801722a:	d402      	bmi.n	8017232 <_vfiprintf_r+0x2a>
 801722c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801722e:	f7fc fbf2 	bl	8013a16 <__retarget_lock_acquire_recursive>
 8017232:	89ab      	ldrh	r3, [r5, #12]
 8017234:	071b      	lsls	r3, r3, #28
 8017236:	d501      	bpl.n	801723c <_vfiprintf_r+0x34>
 8017238:	692b      	ldr	r3, [r5, #16]
 801723a:	b99b      	cbnz	r3, 8017264 <_vfiprintf_r+0x5c>
 801723c:	4629      	mov	r1, r5
 801723e:	4630      	mov	r0, r6
 8017240:	f000 f938 	bl	80174b4 <__swsetup_r>
 8017244:	b170      	cbz	r0, 8017264 <_vfiprintf_r+0x5c>
 8017246:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017248:	07dc      	lsls	r4, r3, #31
 801724a:	d504      	bpl.n	8017256 <_vfiprintf_r+0x4e>
 801724c:	f04f 30ff 	mov.w	r0, #4294967295
 8017250:	b01d      	add	sp, #116	@ 0x74
 8017252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017256:	89ab      	ldrh	r3, [r5, #12]
 8017258:	0598      	lsls	r0, r3, #22
 801725a:	d4f7      	bmi.n	801724c <_vfiprintf_r+0x44>
 801725c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801725e:	f7fc fbdb 	bl	8013a18 <__retarget_lock_release_recursive>
 8017262:	e7f3      	b.n	801724c <_vfiprintf_r+0x44>
 8017264:	2300      	movs	r3, #0
 8017266:	9309      	str	r3, [sp, #36]	@ 0x24
 8017268:	2320      	movs	r3, #32
 801726a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801726e:	f8cd 800c 	str.w	r8, [sp, #12]
 8017272:	2330      	movs	r3, #48	@ 0x30
 8017274:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8017424 <_vfiprintf_r+0x21c>
 8017278:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801727c:	f04f 0901 	mov.w	r9, #1
 8017280:	4623      	mov	r3, r4
 8017282:	469a      	mov	sl, r3
 8017284:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017288:	b10a      	cbz	r2, 801728e <_vfiprintf_r+0x86>
 801728a:	2a25      	cmp	r2, #37	@ 0x25
 801728c:	d1f9      	bne.n	8017282 <_vfiprintf_r+0x7a>
 801728e:	ebba 0b04 	subs.w	fp, sl, r4
 8017292:	d00b      	beq.n	80172ac <_vfiprintf_r+0xa4>
 8017294:	465b      	mov	r3, fp
 8017296:	4622      	mov	r2, r4
 8017298:	4629      	mov	r1, r5
 801729a:	4630      	mov	r0, r6
 801729c:	f7ff ffa2 	bl	80171e4 <__sfputs_r>
 80172a0:	3001      	adds	r0, #1
 80172a2:	f000 80a7 	beq.w	80173f4 <_vfiprintf_r+0x1ec>
 80172a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80172a8:	445a      	add	r2, fp
 80172aa:	9209      	str	r2, [sp, #36]	@ 0x24
 80172ac:	f89a 3000 	ldrb.w	r3, [sl]
 80172b0:	2b00      	cmp	r3, #0
 80172b2:	f000 809f 	beq.w	80173f4 <_vfiprintf_r+0x1ec>
 80172b6:	2300      	movs	r3, #0
 80172b8:	f04f 32ff 	mov.w	r2, #4294967295
 80172bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80172c0:	f10a 0a01 	add.w	sl, sl, #1
 80172c4:	9304      	str	r3, [sp, #16]
 80172c6:	9307      	str	r3, [sp, #28]
 80172c8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80172cc:	931a      	str	r3, [sp, #104]	@ 0x68
 80172ce:	4654      	mov	r4, sl
 80172d0:	2205      	movs	r2, #5
 80172d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80172d6:	4853      	ldr	r0, [pc, #332]	@ (8017424 <_vfiprintf_r+0x21c>)
 80172d8:	f7e8 ffaa 	bl	8000230 <memchr>
 80172dc:	9a04      	ldr	r2, [sp, #16]
 80172de:	b9d8      	cbnz	r0, 8017318 <_vfiprintf_r+0x110>
 80172e0:	06d1      	lsls	r1, r2, #27
 80172e2:	bf44      	itt	mi
 80172e4:	2320      	movmi	r3, #32
 80172e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80172ea:	0713      	lsls	r3, r2, #28
 80172ec:	bf44      	itt	mi
 80172ee:	232b      	movmi	r3, #43	@ 0x2b
 80172f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80172f4:	f89a 3000 	ldrb.w	r3, [sl]
 80172f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80172fa:	d015      	beq.n	8017328 <_vfiprintf_r+0x120>
 80172fc:	9a07      	ldr	r2, [sp, #28]
 80172fe:	4654      	mov	r4, sl
 8017300:	2000      	movs	r0, #0
 8017302:	f04f 0c0a 	mov.w	ip, #10
 8017306:	4621      	mov	r1, r4
 8017308:	f811 3b01 	ldrb.w	r3, [r1], #1
 801730c:	3b30      	subs	r3, #48	@ 0x30
 801730e:	2b09      	cmp	r3, #9
 8017310:	d94b      	bls.n	80173aa <_vfiprintf_r+0x1a2>
 8017312:	b1b0      	cbz	r0, 8017342 <_vfiprintf_r+0x13a>
 8017314:	9207      	str	r2, [sp, #28]
 8017316:	e014      	b.n	8017342 <_vfiprintf_r+0x13a>
 8017318:	eba0 0308 	sub.w	r3, r0, r8
 801731c:	fa09 f303 	lsl.w	r3, r9, r3
 8017320:	4313      	orrs	r3, r2
 8017322:	9304      	str	r3, [sp, #16]
 8017324:	46a2      	mov	sl, r4
 8017326:	e7d2      	b.n	80172ce <_vfiprintf_r+0xc6>
 8017328:	9b03      	ldr	r3, [sp, #12]
 801732a:	1d19      	adds	r1, r3, #4
 801732c:	681b      	ldr	r3, [r3, #0]
 801732e:	9103      	str	r1, [sp, #12]
 8017330:	2b00      	cmp	r3, #0
 8017332:	bfbb      	ittet	lt
 8017334:	425b      	neglt	r3, r3
 8017336:	f042 0202 	orrlt.w	r2, r2, #2
 801733a:	9307      	strge	r3, [sp, #28]
 801733c:	9307      	strlt	r3, [sp, #28]
 801733e:	bfb8      	it	lt
 8017340:	9204      	strlt	r2, [sp, #16]
 8017342:	7823      	ldrb	r3, [r4, #0]
 8017344:	2b2e      	cmp	r3, #46	@ 0x2e
 8017346:	d10a      	bne.n	801735e <_vfiprintf_r+0x156>
 8017348:	7863      	ldrb	r3, [r4, #1]
 801734a:	2b2a      	cmp	r3, #42	@ 0x2a
 801734c:	d132      	bne.n	80173b4 <_vfiprintf_r+0x1ac>
 801734e:	9b03      	ldr	r3, [sp, #12]
 8017350:	1d1a      	adds	r2, r3, #4
 8017352:	681b      	ldr	r3, [r3, #0]
 8017354:	9203      	str	r2, [sp, #12]
 8017356:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801735a:	3402      	adds	r4, #2
 801735c:	9305      	str	r3, [sp, #20]
 801735e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8017434 <_vfiprintf_r+0x22c>
 8017362:	7821      	ldrb	r1, [r4, #0]
 8017364:	2203      	movs	r2, #3
 8017366:	4650      	mov	r0, sl
 8017368:	f7e8 ff62 	bl	8000230 <memchr>
 801736c:	b138      	cbz	r0, 801737e <_vfiprintf_r+0x176>
 801736e:	9b04      	ldr	r3, [sp, #16]
 8017370:	eba0 000a 	sub.w	r0, r0, sl
 8017374:	2240      	movs	r2, #64	@ 0x40
 8017376:	4082      	lsls	r2, r0
 8017378:	4313      	orrs	r3, r2
 801737a:	3401      	adds	r4, #1
 801737c:	9304      	str	r3, [sp, #16]
 801737e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017382:	4829      	ldr	r0, [pc, #164]	@ (8017428 <_vfiprintf_r+0x220>)
 8017384:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017388:	2206      	movs	r2, #6
 801738a:	f7e8 ff51 	bl	8000230 <memchr>
 801738e:	2800      	cmp	r0, #0
 8017390:	d03f      	beq.n	8017412 <_vfiprintf_r+0x20a>
 8017392:	4b26      	ldr	r3, [pc, #152]	@ (801742c <_vfiprintf_r+0x224>)
 8017394:	bb1b      	cbnz	r3, 80173de <_vfiprintf_r+0x1d6>
 8017396:	9b03      	ldr	r3, [sp, #12]
 8017398:	3307      	adds	r3, #7
 801739a:	f023 0307 	bic.w	r3, r3, #7
 801739e:	3308      	adds	r3, #8
 80173a0:	9303      	str	r3, [sp, #12]
 80173a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80173a4:	443b      	add	r3, r7
 80173a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80173a8:	e76a      	b.n	8017280 <_vfiprintf_r+0x78>
 80173aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80173ae:	460c      	mov	r4, r1
 80173b0:	2001      	movs	r0, #1
 80173b2:	e7a8      	b.n	8017306 <_vfiprintf_r+0xfe>
 80173b4:	2300      	movs	r3, #0
 80173b6:	3401      	adds	r4, #1
 80173b8:	9305      	str	r3, [sp, #20]
 80173ba:	4619      	mov	r1, r3
 80173bc:	f04f 0c0a 	mov.w	ip, #10
 80173c0:	4620      	mov	r0, r4
 80173c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80173c6:	3a30      	subs	r2, #48	@ 0x30
 80173c8:	2a09      	cmp	r2, #9
 80173ca:	d903      	bls.n	80173d4 <_vfiprintf_r+0x1cc>
 80173cc:	2b00      	cmp	r3, #0
 80173ce:	d0c6      	beq.n	801735e <_vfiprintf_r+0x156>
 80173d0:	9105      	str	r1, [sp, #20]
 80173d2:	e7c4      	b.n	801735e <_vfiprintf_r+0x156>
 80173d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80173d8:	4604      	mov	r4, r0
 80173da:	2301      	movs	r3, #1
 80173dc:	e7f0      	b.n	80173c0 <_vfiprintf_r+0x1b8>
 80173de:	ab03      	add	r3, sp, #12
 80173e0:	9300      	str	r3, [sp, #0]
 80173e2:	462a      	mov	r2, r5
 80173e4:	4b12      	ldr	r3, [pc, #72]	@ (8017430 <_vfiprintf_r+0x228>)
 80173e6:	a904      	add	r1, sp, #16
 80173e8:	4630      	mov	r0, r6
 80173ea:	f7fb fb0d 	bl	8012a08 <_printf_float>
 80173ee:	4607      	mov	r7, r0
 80173f0:	1c78      	adds	r0, r7, #1
 80173f2:	d1d6      	bne.n	80173a2 <_vfiprintf_r+0x19a>
 80173f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80173f6:	07d9      	lsls	r1, r3, #31
 80173f8:	d405      	bmi.n	8017406 <_vfiprintf_r+0x1fe>
 80173fa:	89ab      	ldrh	r3, [r5, #12]
 80173fc:	059a      	lsls	r2, r3, #22
 80173fe:	d402      	bmi.n	8017406 <_vfiprintf_r+0x1fe>
 8017400:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017402:	f7fc fb09 	bl	8013a18 <__retarget_lock_release_recursive>
 8017406:	89ab      	ldrh	r3, [r5, #12]
 8017408:	065b      	lsls	r3, r3, #25
 801740a:	f53f af1f 	bmi.w	801724c <_vfiprintf_r+0x44>
 801740e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017410:	e71e      	b.n	8017250 <_vfiprintf_r+0x48>
 8017412:	ab03      	add	r3, sp, #12
 8017414:	9300      	str	r3, [sp, #0]
 8017416:	462a      	mov	r2, r5
 8017418:	4b05      	ldr	r3, [pc, #20]	@ (8017430 <_vfiprintf_r+0x228>)
 801741a:	a904      	add	r1, sp, #16
 801741c:	4630      	mov	r0, r6
 801741e:	f7fb fd8b 	bl	8012f38 <_printf_i>
 8017422:	e7e4      	b.n	80173ee <_vfiprintf_r+0x1e6>
 8017424:	0805da79 	.word	0x0805da79
 8017428:	0805da83 	.word	0x0805da83
 801742c:	08012a09 	.word	0x08012a09
 8017430:	080171e5 	.word	0x080171e5
 8017434:	0805da7f 	.word	0x0805da7f

08017438 <__swbuf_r>:
 8017438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801743a:	460e      	mov	r6, r1
 801743c:	4614      	mov	r4, r2
 801743e:	4605      	mov	r5, r0
 8017440:	b118      	cbz	r0, 801744a <__swbuf_r+0x12>
 8017442:	6a03      	ldr	r3, [r0, #32]
 8017444:	b90b      	cbnz	r3, 801744a <__swbuf_r+0x12>
 8017446:	f7fc f937 	bl	80136b8 <__sinit>
 801744a:	69a3      	ldr	r3, [r4, #24]
 801744c:	60a3      	str	r3, [r4, #8]
 801744e:	89a3      	ldrh	r3, [r4, #12]
 8017450:	071a      	lsls	r2, r3, #28
 8017452:	d501      	bpl.n	8017458 <__swbuf_r+0x20>
 8017454:	6923      	ldr	r3, [r4, #16]
 8017456:	b943      	cbnz	r3, 801746a <__swbuf_r+0x32>
 8017458:	4621      	mov	r1, r4
 801745a:	4628      	mov	r0, r5
 801745c:	f000 f82a 	bl	80174b4 <__swsetup_r>
 8017460:	b118      	cbz	r0, 801746a <__swbuf_r+0x32>
 8017462:	f04f 37ff 	mov.w	r7, #4294967295
 8017466:	4638      	mov	r0, r7
 8017468:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801746a:	6823      	ldr	r3, [r4, #0]
 801746c:	6922      	ldr	r2, [r4, #16]
 801746e:	1a98      	subs	r0, r3, r2
 8017470:	6963      	ldr	r3, [r4, #20]
 8017472:	b2f6      	uxtb	r6, r6
 8017474:	4283      	cmp	r3, r0
 8017476:	4637      	mov	r7, r6
 8017478:	dc05      	bgt.n	8017486 <__swbuf_r+0x4e>
 801747a:	4621      	mov	r1, r4
 801747c:	4628      	mov	r0, r5
 801747e:	f7ff f9d3 	bl	8016828 <_fflush_r>
 8017482:	2800      	cmp	r0, #0
 8017484:	d1ed      	bne.n	8017462 <__swbuf_r+0x2a>
 8017486:	68a3      	ldr	r3, [r4, #8]
 8017488:	3b01      	subs	r3, #1
 801748a:	60a3      	str	r3, [r4, #8]
 801748c:	6823      	ldr	r3, [r4, #0]
 801748e:	1c5a      	adds	r2, r3, #1
 8017490:	6022      	str	r2, [r4, #0]
 8017492:	701e      	strb	r6, [r3, #0]
 8017494:	6962      	ldr	r2, [r4, #20]
 8017496:	1c43      	adds	r3, r0, #1
 8017498:	429a      	cmp	r2, r3
 801749a:	d004      	beq.n	80174a6 <__swbuf_r+0x6e>
 801749c:	89a3      	ldrh	r3, [r4, #12]
 801749e:	07db      	lsls	r3, r3, #31
 80174a0:	d5e1      	bpl.n	8017466 <__swbuf_r+0x2e>
 80174a2:	2e0a      	cmp	r6, #10
 80174a4:	d1df      	bne.n	8017466 <__swbuf_r+0x2e>
 80174a6:	4621      	mov	r1, r4
 80174a8:	4628      	mov	r0, r5
 80174aa:	f7ff f9bd 	bl	8016828 <_fflush_r>
 80174ae:	2800      	cmp	r0, #0
 80174b0:	d0d9      	beq.n	8017466 <__swbuf_r+0x2e>
 80174b2:	e7d6      	b.n	8017462 <__swbuf_r+0x2a>

080174b4 <__swsetup_r>:
 80174b4:	b538      	push	{r3, r4, r5, lr}
 80174b6:	4b29      	ldr	r3, [pc, #164]	@ (801755c <__swsetup_r+0xa8>)
 80174b8:	4605      	mov	r5, r0
 80174ba:	6818      	ldr	r0, [r3, #0]
 80174bc:	460c      	mov	r4, r1
 80174be:	b118      	cbz	r0, 80174c8 <__swsetup_r+0x14>
 80174c0:	6a03      	ldr	r3, [r0, #32]
 80174c2:	b90b      	cbnz	r3, 80174c8 <__swsetup_r+0x14>
 80174c4:	f7fc f8f8 	bl	80136b8 <__sinit>
 80174c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80174cc:	0719      	lsls	r1, r3, #28
 80174ce:	d422      	bmi.n	8017516 <__swsetup_r+0x62>
 80174d0:	06da      	lsls	r2, r3, #27
 80174d2:	d407      	bmi.n	80174e4 <__swsetup_r+0x30>
 80174d4:	2209      	movs	r2, #9
 80174d6:	602a      	str	r2, [r5, #0]
 80174d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80174dc:	81a3      	strh	r3, [r4, #12]
 80174de:	f04f 30ff 	mov.w	r0, #4294967295
 80174e2:	e033      	b.n	801754c <__swsetup_r+0x98>
 80174e4:	0758      	lsls	r0, r3, #29
 80174e6:	d512      	bpl.n	801750e <__swsetup_r+0x5a>
 80174e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80174ea:	b141      	cbz	r1, 80174fe <__swsetup_r+0x4a>
 80174ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80174f0:	4299      	cmp	r1, r3
 80174f2:	d002      	beq.n	80174fa <__swsetup_r+0x46>
 80174f4:	4628      	mov	r0, r5
 80174f6:	f7fd f917 	bl	8014728 <_free_r>
 80174fa:	2300      	movs	r3, #0
 80174fc:	6363      	str	r3, [r4, #52]	@ 0x34
 80174fe:	89a3      	ldrh	r3, [r4, #12]
 8017500:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8017504:	81a3      	strh	r3, [r4, #12]
 8017506:	2300      	movs	r3, #0
 8017508:	6063      	str	r3, [r4, #4]
 801750a:	6923      	ldr	r3, [r4, #16]
 801750c:	6023      	str	r3, [r4, #0]
 801750e:	89a3      	ldrh	r3, [r4, #12]
 8017510:	f043 0308 	orr.w	r3, r3, #8
 8017514:	81a3      	strh	r3, [r4, #12]
 8017516:	6923      	ldr	r3, [r4, #16]
 8017518:	b94b      	cbnz	r3, 801752e <__swsetup_r+0x7a>
 801751a:	89a3      	ldrh	r3, [r4, #12]
 801751c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8017520:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017524:	d003      	beq.n	801752e <__swsetup_r+0x7a>
 8017526:	4621      	mov	r1, r4
 8017528:	4628      	mov	r0, r5
 801752a:	f000 f883 	bl	8017634 <__smakebuf_r>
 801752e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017532:	f013 0201 	ands.w	r2, r3, #1
 8017536:	d00a      	beq.n	801754e <__swsetup_r+0x9a>
 8017538:	2200      	movs	r2, #0
 801753a:	60a2      	str	r2, [r4, #8]
 801753c:	6962      	ldr	r2, [r4, #20]
 801753e:	4252      	negs	r2, r2
 8017540:	61a2      	str	r2, [r4, #24]
 8017542:	6922      	ldr	r2, [r4, #16]
 8017544:	b942      	cbnz	r2, 8017558 <__swsetup_r+0xa4>
 8017546:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801754a:	d1c5      	bne.n	80174d8 <__swsetup_r+0x24>
 801754c:	bd38      	pop	{r3, r4, r5, pc}
 801754e:	0799      	lsls	r1, r3, #30
 8017550:	bf58      	it	pl
 8017552:	6962      	ldrpl	r2, [r4, #20]
 8017554:	60a2      	str	r2, [r4, #8]
 8017556:	e7f4      	b.n	8017542 <__swsetup_r+0x8e>
 8017558:	2000      	movs	r0, #0
 801755a:	e7f7      	b.n	801754c <__swsetup_r+0x98>
 801755c:	20001468 	.word	0x20001468

08017560 <_raise_r>:
 8017560:	291f      	cmp	r1, #31
 8017562:	b538      	push	{r3, r4, r5, lr}
 8017564:	4605      	mov	r5, r0
 8017566:	460c      	mov	r4, r1
 8017568:	d904      	bls.n	8017574 <_raise_r+0x14>
 801756a:	2316      	movs	r3, #22
 801756c:	6003      	str	r3, [r0, #0]
 801756e:	f04f 30ff 	mov.w	r0, #4294967295
 8017572:	bd38      	pop	{r3, r4, r5, pc}
 8017574:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8017576:	b112      	cbz	r2, 801757e <_raise_r+0x1e>
 8017578:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801757c:	b94b      	cbnz	r3, 8017592 <_raise_r+0x32>
 801757e:	4628      	mov	r0, r5
 8017580:	f000 f830 	bl	80175e4 <_getpid_r>
 8017584:	4622      	mov	r2, r4
 8017586:	4601      	mov	r1, r0
 8017588:	4628      	mov	r0, r5
 801758a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801758e:	f000 b817 	b.w	80175c0 <_kill_r>
 8017592:	2b01      	cmp	r3, #1
 8017594:	d00a      	beq.n	80175ac <_raise_r+0x4c>
 8017596:	1c59      	adds	r1, r3, #1
 8017598:	d103      	bne.n	80175a2 <_raise_r+0x42>
 801759a:	2316      	movs	r3, #22
 801759c:	6003      	str	r3, [r0, #0]
 801759e:	2001      	movs	r0, #1
 80175a0:	e7e7      	b.n	8017572 <_raise_r+0x12>
 80175a2:	2100      	movs	r1, #0
 80175a4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80175a8:	4620      	mov	r0, r4
 80175aa:	4798      	blx	r3
 80175ac:	2000      	movs	r0, #0
 80175ae:	e7e0      	b.n	8017572 <_raise_r+0x12>

080175b0 <raise>:
 80175b0:	4b02      	ldr	r3, [pc, #8]	@ (80175bc <raise+0xc>)
 80175b2:	4601      	mov	r1, r0
 80175b4:	6818      	ldr	r0, [r3, #0]
 80175b6:	f7ff bfd3 	b.w	8017560 <_raise_r>
 80175ba:	bf00      	nop
 80175bc:	20001468 	.word	0x20001468

080175c0 <_kill_r>:
 80175c0:	b538      	push	{r3, r4, r5, lr}
 80175c2:	4d07      	ldr	r5, [pc, #28]	@ (80175e0 <_kill_r+0x20>)
 80175c4:	2300      	movs	r3, #0
 80175c6:	4604      	mov	r4, r0
 80175c8:	4608      	mov	r0, r1
 80175ca:	4611      	mov	r1, r2
 80175cc:	602b      	str	r3, [r5, #0]
 80175ce:	f001 f839 	bl	8018644 <_kill>
 80175d2:	1c43      	adds	r3, r0, #1
 80175d4:	d102      	bne.n	80175dc <_kill_r+0x1c>
 80175d6:	682b      	ldr	r3, [r5, #0]
 80175d8:	b103      	cbz	r3, 80175dc <_kill_r+0x1c>
 80175da:	6023      	str	r3, [r4, #0]
 80175dc:	bd38      	pop	{r3, r4, r5, pc}
 80175de:	bf00      	nop
 80175e0:	2000c7ac 	.word	0x2000c7ac

080175e4 <_getpid_r>:
 80175e4:	f001 b81e 	b.w	8018624 <_getpid>

080175e8 <__swhatbuf_r>:
 80175e8:	b570      	push	{r4, r5, r6, lr}
 80175ea:	460c      	mov	r4, r1
 80175ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80175f0:	2900      	cmp	r1, #0
 80175f2:	b096      	sub	sp, #88	@ 0x58
 80175f4:	4615      	mov	r5, r2
 80175f6:	461e      	mov	r6, r3
 80175f8:	da0d      	bge.n	8017616 <__swhatbuf_r+0x2e>
 80175fa:	89a3      	ldrh	r3, [r4, #12]
 80175fc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8017600:	f04f 0100 	mov.w	r1, #0
 8017604:	bf14      	ite	ne
 8017606:	2340      	movne	r3, #64	@ 0x40
 8017608:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801760c:	2000      	movs	r0, #0
 801760e:	6031      	str	r1, [r6, #0]
 8017610:	602b      	str	r3, [r5, #0]
 8017612:	b016      	add	sp, #88	@ 0x58
 8017614:	bd70      	pop	{r4, r5, r6, pc}
 8017616:	466a      	mov	r2, sp
 8017618:	f000 f848 	bl	80176ac <_fstat_r>
 801761c:	2800      	cmp	r0, #0
 801761e:	dbec      	blt.n	80175fa <__swhatbuf_r+0x12>
 8017620:	9901      	ldr	r1, [sp, #4]
 8017622:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8017626:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801762a:	4259      	negs	r1, r3
 801762c:	4159      	adcs	r1, r3
 801762e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8017632:	e7eb      	b.n	801760c <__swhatbuf_r+0x24>

08017634 <__smakebuf_r>:
 8017634:	898b      	ldrh	r3, [r1, #12]
 8017636:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017638:	079d      	lsls	r5, r3, #30
 801763a:	4606      	mov	r6, r0
 801763c:	460c      	mov	r4, r1
 801763e:	d507      	bpl.n	8017650 <__smakebuf_r+0x1c>
 8017640:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8017644:	6023      	str	r3, [r4, #0]
 8017646:	6123      	str	r3, [r4, #16]
 8017648:	2301      	movs	r3, #1
 801764a:	6163      	str	r3, [r4, #20]
 801764c:	b003      	add	sp, #12
 801764e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017650:	ab01      	add	r3, sp, #4
 8017652:	466a      	mov	r2, sp
 8017654:	f7ff ffc8 	bl	80175e8 <__swhatbuf_r>
 8017658:	9f00      	ldr	r7, [sp, #0]
 801765a:	4605      	mov	r5, r0
 801765c:	4639      	mov	r1, r7
 801765e:	4630      	mov	r0, r6
 8017660:	f7fb f878 	bl	8012754 <_malloc_r>
 8017664:	b948      	cbnz	r0, 801767a <__smakebuf_r+0x46>
 8017666:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801766a:	059a      	lsls	r2, r3, #22
 801766c:	d4ee      	bmi.n	801764c <__smakebuf_r+0x18>
 801766e:	f023 0303 	bic.w	r3, r3, #3
 8017672:	f043 0302 	orr.w	r3, r3, #2
 8017676:	81a3      	strh	r3, [r4, #12]
 8017678:	e7e2      	b.n	8017640 <__smakebuf_r+0xc>
 801767a:	89a3      	ldrh	r3, [r4, #12]
 801767c:	6020      	str	r0, [r4, #0]
 801767e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017682:	81a3      	strh	r3, [r4, #12]
 8017684:	9b01      	ldr	r3, [sp, #4]
 8017686:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801768a:	b15b      	cbz	r3, 80176a4 <__smakebuf_r+0x70>
 801768c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017690:	4630      	mov	r0, r6
 8017692:	f000 f81d 	bl	80176d0 <_isatty_r>
 8017696:	b128      	cbz	r0, 80176a4 <__smakebuf_r+0x70>
 8017698:	89a3      	ldrh	r3, [r4, #12]
 801769a:	f023 0303 	bic.w	r3, r3, #3
 801769e:	f043 0301 	orr.w	r3, r3, #1
 80176a2:	81a3      	strh	r3, [r4, #12]
 80176a4:	89a3      	ldrh	r3, [r4, #12]
 80176a6:	431d      	orrs	r5, r3
 80176a8:	81a5      	strh	r5, [r4, #12]
 80176aa:	e7cf      	b.n	801764c <__smakebuf_r+0x18>

080176ac <_fstat_r>:
 80176ac:	b538      	push	{r3, r4, r5, lr}
 80176ae:	4d07      	ldr	r5, [pc, #28]	@ (80176cc <_fstat_r+0x20>)
 80176b0:	2300      	movs	r3, #0
 80176b2:	4604      	mov	r4, r0
 80176b4:	4608      	mov	r0, r1
 80176b6:	4611      	mov	r1, r2
 80176b8:	602b      	str	r3, [r5, #0]
 80176ba:	f000 ffab 	bl	8018614 <_fstat>
 80176be:	1c43      	adds	r3, r0, #1
 80176c0:	d102      	bne.n	80176c8 <_fstat_r+0x1c>
 80176c2:	682b      	ldr	r3, [r5, #0]
 80176c4:	b103      	cbz	r3, 80176c8 <_fstat_r+0x1c>
 80176c6:	6023      	str	r3, [r4, #0]
 80176c8:	bd38      	pop	{r3, r4, r5, pc}
 80176ca:	bf00      	nop
 80176cc:	2000c7ac 	.word	0x2000c7ac

080176d0 <_isatty_r>:
 80176d0:	b538      	push	{r3, r4, r5, lr}
 80176d2:	4d06      	ldr	r5, [pc, #24]	@ (80176ec <_isatty_r+0x1c>)
 80176d4:	2300      	movs	r3, #0
 80176d6:	4604      	mov	r4, r0
 80176d8:	4608      	mov	r0, r1
 80176da:	602b      	str	r3, [r5, #0]
 80176dc:	f000 ffaa 	bl	8018634 <_isatty>
 80176e0:	1c43      	adds	r3, r0, #1
 80176e2:	d102      	bne.n	80176ea <_isatty_r+0x1a>
 80176e4:	682b      	ldr	r3, [r5, #0]
 80176e6:	b103      	cbz	r3, 80176ea <_isatty_r+0x1a>
 80176e8:	6023      	str	r3, [r4, #0]
 80176ea:	bd38      	pop	{r3, r4, r5, pc}
 80176ec:	2000c7ac 	.word	0x2000c7ac

080176f0 <pow>:
 80176f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80176f2:	ed2d 8b02 	vpush	{d8}
 80176f6:	eeb0 8a40 	vmov.f32	s16, s0
 80176fa:	eef0 8a60 	vmov.f32	s17, s1
 80176fe:	ec55 4b11 	vmov	r4, r5, d1
 8017702:	f000 f9b5 	bl	8017a70 <__ieee754_pow>
 8017706:	4622      	mov	r2, r4
 8017708:	462b      	mov	r3, r5
 801770a:	4620      	mov	r0, r4
 801770c:	4629      	mov	r1, r5
 801770e:	ec57 6b10 	vmov	r6, r7, d0
 8017712:	f7e9 fa3b 	bl	8000b8c <__aeabi_dcmpun>
 8017716:	2800      	cmp	r0, #0
 8017718:	d13b      	bne.n	8017792 <pow+0xa2>
 801771a:	ec51 0b18 	vmov	r0, r1, d8
 801771e:	2200      	movs	r2, #0
 8017720:	2300      	movs	r3, #0
 8017722:	f7e9 fa01 	bl	8000b28 <__aeabi_dcmpeq>
 8017726:	b1b8      	cbz	r0, 8017758 <pow+0x68>
 8017728:	2200      	movs	r2, #0
 801772a:	2300      	movs	r3, #0
 801772c:	4620      	mov	r0, r4
 801772e:	4629      	mov	r1, r5
 8017730:	f7e9 f9fa 	bl	8000b28 <__aeabi_dcmpeq>
 8017734:	2800      	cmp	r0, #0
 8017736:	d146      	bne.n	80177c6 <pow+0xd6>
 8017738:	ec45 4b10 	vmov	d0, r4, r5
 801773c:	f000 f874 	bl	8017828 <finite>
 8017740:	b338      	cbz	r0, 8017792 <pow+0xa2>
 8017742:	2200      	movs	r2, #0
 8017744:	2300      	movs	r3, #0
 8017746:	4620      	mov	r0, r4
 8017748:	4629      	mov	r1, r5
 801774a:	f7e9 f9f7 	bl	8000b3c <__aeabi_dcmplt>
 801774e:	b300      	cbz	r0, 8017792 <pow+0xa2>
 8017750:	f7fc f936 	bl	80139c0 <__errno>
 8017754:	2322      	movs	r3, #34	@ 0x22
 8017756:	e01b      	b.n	8017790 <pow+0xa0>
 8017758:	ec47 6b10 	vmov	d0, r6, r7
 801775c:	f000 f864 	bl	8017828 <finite>
 8017760:	b9e0      	cbnz	r0, 801779c <pow+0xac>
 8017762:	eeb0 0a48 	vmov.f32	s0, s16
 8017766:	eef0 0a68 	vmov.f32	s1, s17
 801776a:	f000 f85d 	bl	8017828 <finite>
 801776e:	b1a8      	cbz	r0, 801779c <pow+0xac>
 8017770:	ec45 4b10 	vmov	d0, r4, r5
 8017774:	f000 f858 	bl	8017828 <finite>
 8017778:	b180      	cbz	r0, 801779c <pow+0xac>
 801777a:	4632      	mov	r2, r6
 801777c:	463b      	mov	r3, r7
 801777e:	4630      	mov	r0, r6
 8017780:	4639      	mov	r1, r7
 8017782:	f7e9 fa03 	bl	8000b8c <__aeabi_dcmpun>
 8017786:	2800      	cmp	r0, #0
 8017788:	d0e2      	beq.n	8017750 <pow+0x60>
 801778a:	f7fc f919 	bl	80139c0 <__errno>
 801778e:	2321      	movs	r3, #33	@ 0x21
 8017790:	6003      	str	r3, [r0, #0]
 8017792:	ecbd 8b02 	vpop	{d8}
 8017796:	ec47 6b10 	vmov	d0, r6, r7
 801779a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801779c:	2200      	movs	r2, #0
 801779e:	2300      	movs	r3, #0
 80177a0:	4630      	mov	r0, r6
 80177a2:	4639      	mov	r1, r7
 80177a4:	f7e9 f9c0 	bl	8000b28 <__aeabi_dcmpeq>
 80177a8:	2800      	cmp	r0, #0
 80177aa:	d0f2      	beq.n	8017792 <pow+0xa2>
 80177ac:	eeb0 0a48 	vmov.f32	s0, s16
 80177b0:	eef0 0a68 	vmov.f32	s1, s17
 80177b4:	f000 f838 	bl	8017828 <finite>
 80177b8:	2800      	cmp	r0, #0
 80177ba:	d0ea      	beq.n	8017792 <pow+0xa2>
 80177bc:	ec45 4b10 	vmov	d0, r4, r5
 80177c0:	f000 f832 	bl	8017828 <finite>
 80177c4:	e7c3      	b.n	801774e <pow+0x5e>
 80177c6:	4f01      	ldr	r7, [pc, #4]	@ (80177cc <pow+0xdc>)
 80177c8:	2600      	movs	r6, #0
 80177ca:	e7e2      	b.n	8017792 <pow+0xa2>
 80177cc:	3ff00000 	.word	0x3ff00000

080177d0 <sqrt>:
 80177d0:	b538      	push	{r3, r4, r5, lr}
 80177d2:	ed2d 8b02 	vpush	{d8}
 80177d6:	ec55 4b10 	vmov	r4, r5, d0
 80177da:	f000 f86d 	bl	80178b8 <__ieee754_sqrt>
 80177de:	4622      	mov	r2, r4
 80177e0:	462b      	mov	r3, r5
 80177e2:	4620      	mov	r0, r4
 80177e4:	4629      	mov	r1, r5
 80177e6:	eeb0 8a40 	vmov.f32	s16, s0
 80177ea:	eef0 8a60 	vmov.f32	s17, s1
 80177ee:	f7e9 f9cd 	bl	8000b8c <__aeabi_dcmpun>
 80177f2:	b990      	cbnz	r0, 801781a <sqrt+0x4a>
 80177f4:	2200      	movs	r2, #0
 80177f6:	2300      	movs	r3, #0
 80177f8:	4620      	mov	r0, r4
 80177fa:	4629      	mov	r1, r5
 80177fc:	f7e9 f99e 	bl	8000b3c <__aeabi_dcmplt>
 8017800:	b158      	cbz	r0, 801781a <sqrt+0x4a>
 8017802:	f7fc f8dd 	bl	80139c0 <__errno>
 8017806:	2321      	movs	r3, #33	@ 0x21
 8017808:	6003      	str	r3, [r0, #0]
 801780a:	2200      	movs	r2, #0
 801780c:	2300      	movs	r3, #0
 801780e:	4610      	mov	r0, r2
 8017810:	4619      	mov	r1, r3
 8017812:	f7e9 f84b 	bl	80008ac <__aeabi_ddiv>
 8017816:	ec41 0b18 	vmov	d8, r0, r1
 801781a:	eeb0 0a48 	vmov.f32	s0, s16
 801781e:	eef0 0a68 	vmov.f32	s1, s17
 8017822:	ecbd 8b02 	vpop	{d8}
 8017826:	bd38      	pop	{r3, r4, r5, pc}

08017828 <finite>:
 8017828:	b082      	sub	sp, #8
 801782a:	ed8d 0b00 	vstr	d0, [sp]
 801782e:	9801      	ldr	r0, [sp, #4]
 8017830:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8017834:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8017838:	0fc0      	lsrs	r0, r0, #31
 801783a:	b002      	add	sp, #8
 801783c:	4770      	bx	lr

0801783e <with_errno>:
 801783e:	b510      	push	{r4, lr}
 8017840:	ed2d 8b02 	vpush	{d8}
 8017844:	eeb0 8a40 	vmov.f32	s16, s0
 8017848:	eef0 8a60 	vmov.f32	s17, s1
 801784c:	4604      	mov	r4, r0
 801784e:	f7fc f8b7 	bl	80139c0 <__errno>
 8017852:	eeb0 0a48 	vmov.f32	s0, s16
 8017856:	eef0 0a68 	vmov.f32	s1, s17
 801785a:	ecbd 8b02 	vpop	{d8}
 801785e:	6004      	str	r4, [r0, #0]
 8017860:	bd10      	pop	{r4, pc}

08017862 <xflow>:
 8017862:	4603      	mov	r3, r0
 8017864:	b507      	push	{r0, r1, r2, lr}
 8017866:	ec51 0b10 	vmov	r0, r1, d0
 801786a:	b183      	cbz	r3, 801788e <xflow+0x2c>
 801786c:	4602      	mov	r2, r0
 801786e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8017872:	e9cd 2300 	strd	r2, r3, [sp]
 8017876:	e9dd 2300 	ldrd	r2, r3, [sp]
 801787a:	f7e8 feed 	bl	8000658 <__aeabi_dmul>
 801787e:	ec41 0b10 	vmov	d0, r0, r1
 8017882:	2022      	movs	r0, #34	@ 0x22
 8017884:	b003      	add	sp, #12
 8017886:	f85d eb04 	ldr.w	lr, [sp], #4
 801788a:	f7ff bfd8 	b.w	801783e <with_errno>
 801788e:	4602      	mov	r2, r0
 8017890:	460b      	mov	r3, r1
 8017892:	e7ee      	b.n	8017872 <xflow+0x10>
 8017894:	0000      	movs	r0, r0
	...

08017898 <__math_uflow>:
 8017898:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80178a0 <__math_uflow+0x8>
 801789c:	f7ff bfe1 	b.w	8017862 <xflow>
 80178a0:	00000000 	.word	0x00000000
 80178a4:	10000000 	.word	0x10000000

080178a8 <__math_oflow>:
 80178a8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80178b0 <__math_oflow+0x8>
 80178ac:	f7ff bfd9 	b.w	8017862 <xflow>
 80178b0:	00000000 	.word	0x00000000
 80178b4:	70000000 	.word	0x70000000

080178b8 <__ieee754_sqrt>:
 80178b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80178bc:	4a68      	ldr	r2, [pc, #416]	@ (8017a60 <__ieee754_sqrt+0x1a8>)
 80178be:	ec55 4b10 	vmov	r4, r5, d0
 80178c2:	43aa      	bics	r2, r5
 80178c4:	462b      	mov	r3, r5
 80178c6:	4621      	mov	r1, r4
 80178c8:	d110      	bne.n	80178ec <__ieee754_sqrt+0x34>
 80178ca:	4622      	mov	r2, r4
 80178cc:	4620      	mov	r0, r4
 80178ce:	4629      	mov	r1, r5
 80178d0:	f7e8 fec2 	bl	8000658 <__aeabi_dmul>
 80178d4:	4602      	mov	r2, r0
 80178d6:	460b      	mov	r3, r1
 80178d8:	4620      	mov	r0, r4
 80178da:	4629      	mov	r1, r5
 80178dc:	f7e8 fd06 	bl	80002ec <__adddf3>
 80178e0:	4604      	mov	r4, r0
 80178e2:	460d      	mov	r5, r1
 80178e4:	ec45 4b10 	vmov	d0, r4, r5
 80178e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80178ec:	2d00      	cmp	r5, #0
 80178ee:	dc0e      	bgt.n	801790e <__ieee754_sqrt+0x56>
 80178f0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80178f4:	4322      	orrs	r2, r4
 80178f6:	d0f5      	beq.n	80178e4 <__ieee754_sqrt+0x2c>
 80178f8:	b19d      	cbz	r5, 8017922 <__ieee754_sqrt+0x6a>
 80178fa:	4622      	mov	r2, r4
 80178fc:	4620      	mov	r0, r4
 80178fe:	4629      	mov	r1, r5
 8017900:	f7e8 fcf2 	bl	80002e8 <__aeabi_dsub>
 8017904:	4602      	mov	r2, r0
 8017906:	460b      	mov	r3, r1
 8017908:	f7e8 ffd0 	bl	80008ac <__aeabi_ddiv>
 801790c:	e7e8      	b.n	80178e0 <__ieee754_sqrt+0x28>
 801790e:	152a      	asrs	r2, r5, #20
 8017910:	d115      	bne.n	801793e <__ieee754_sqrt+0x86>
 8017912:	2000      	movs	r0, #0
 8017914:	e009      	b.n	801792a <__ieee754_sqrt+0x72>
 8017916:	0acb      	lsrs	r3, r1, #11
 8017918:	3a15      	subs	r2, #21
 801791a:	0549      	lsls	r1, r1, #21
 801791c:	2b00      	cmp	r3, #0
 801791e:	d0fa      	beq.n	8017916 <__ieee754_sqrt+0x5e>
 8017920:	e7f7      	b.n	8017912 <__ieee754_sqrt+0x5a>
 8017922:	462a      	mov	r2, r5
 8017924:	e7fa      	b.n	801791c <__ieee754_sqrt+0x64>
 8017926:	005b      	lsls	r3, r3, #1
 8017928:	3001      	adds	r0, #1
 801792a:	02dc      	lsls	r4, r3, #11
 801792c:	d5fb      	bpl.n	8017926 <__ieee754_sqrt+0x6e>
 801792e:	1e44      	subs	r4, r0, #1
 8017930:	1b12      	subs	r2, r2, r4
 8017932:	f1c0 0420 	rsb	r4, r0, #32
 8017936:	fa21 f404 	lsr.w	r4, r1, r4
 801793a:	4323      	orrs	r3, r4
 801793c:	4081      	lsls	r1, r0
 801793e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017942:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8017946:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801794a:	07d2      	lsls	r2, r2, #31
 801794c:	bf5c      	itt	pl
 801794e:	005b      	lslpl	r3, r3, #1
 8017950:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8017954:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8017958:	bf58      	it	pl
 801795a:	0049      	lslpl	r1, r1, #1
 801795c:	2600      	movs	r6, #0
 801795e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8017962:	106d      	asrs	r5, r5, #1
 8017964:	0049      	lsls	r1, r1, #1
 8017966:	2016      	movs	r0, #22
 8017968:	4632      	mov	r2, r6
 801796a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 801796e:	1917      	adds	r7, r2, r4
 8017970:	429f      	cmp	r7, r3
 8017972:	bfde      	ittt	le
 8017974:	193a      	addle	r2, r7, r4
 8017976:	1bdb      	suble	r3, r3, r7
 8017978:	1936      	addle	r6, r6, r4
 801797a:	0fcf      	lsrs	r7, r1, #31
 801797c:	3801      	subs	r0, #1
 801797e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8017982:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8017986:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801798a:	d1f0      	bne.n	801796e <__ieee754_sqrt+0xb6>
 801798c:	4604      	mov	r4, r0
 801798e:	2720      	movs	r7, #32
 8017990:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8017994:	429a      	cmp	r2, r3
 8017996:	eb00 0e0c 	add.w	lr, r0, ip
 801799a:	db02      	blt.n	80179a2 <__ieee754_sqrt+0xea>
 801799c:	d113      	bne.n	80179c6 <__ieee754_sqrt+0x10e>
 801799e:	458e      	cmp	lr, r1
 80179a0:	d811      	bhi.n	80179c6 <__ieee754_sqrt+0x10e>
 80179a2:	f1be 0f00 	cmp.w	lr, #0
 80179a6:	eb0e 000c 	add.w	r0, lr, ip
 80179aa:	da42      	bge.n	8017a32 <__ieee754_sqrt+0x17a>
 80179ac:	2800      	cmp	r0, #0
 80179ae:	db40      	blt.n	8017a32 <__ieee754_sqrt+0x17a>
 80179b0:	f102 0801 	add.w	r8, r2, #1
 80179b4:	1a9b      	subs	r3, r3, r2
 80179b6:	458e      	cmp	lr, r1
 80179b8:	bf88      	it	hi
 80179ba:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80179be:	eba1 010e 	sub.w	r1, r1, lr
 80179c2:	4464      	add	r4, ip
 80179c4:	4642      	mov	r2, r8
 80179c6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80179ca:	3f01      	subs	r7, #1
 80179cc:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80179d0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80179d4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80179d8:	d1dc      	bne.n	8017994 <__ieee754_sqrt+0xdc>
 80179da:	4319      	orrs	r1, r3
 80179dc:	d01b      	beq.n	8017a16 <__ieee754_sqrt+0x15e>
 80179de:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8017a64 <__ieee754_sqrt+0x1ac>
 80179e2:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8017a68 <__ieee754_sqrt+0x1b0>
 80179e6:	e9da 0100 	ldrd	r0, r1, [sl]
 80179ea:	e9db 2300 	ldrd	r2, r3, [fp]
 80179ee:	f7e8 fc7b 	bl	80002e8 <__aeabi_dsub>
 80179f2:	e9da 8900 	ldrd	r8, r9, [sl]
 80179f6:	4602      	mov	r2, r0
 80179f8:	460b      	mov	r3, r1
 80179fa:	4640      	mov	r0, r8
 80179fc:	4649      	mov	r1, r9
 80179fe:	f7e9 f8a7 	bl	8000b50 <__aeabi_dcmple>
 8017a02:	b140      	cbz	r0, 8017a16 <__ieee754_sqrt+0x15e>
 8017a04:	f1b4 3fff 	cmp.w	r4, #4294967295
 8017a08:	e9da 0100 	ldrd	r0, r1, [sl]
 8017a0c:	e9db 2300 	ldrd	r2, r3, [fp]
 8017a10:	d111      	bne.n	8017a36 <__ieee754_sqrt+0x17e>
 8017a12:	3601      	adds	r6, #1
 8017a14:	463c      	mov	r4, r7
 8017a16:	1072      	asrs	r2, r6, #1
 8017a18:	0863      	lsrs	r3, r4, #1
 8017a1a:	07f1      	lsls	r1, r6, #31
 8017a1c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8017a20:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8017a24:	bf48      	it	mi
 8017a26:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8017a2a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8017a2e:	4618      	mov	r0, r3
 8017a30:	e756      	b.n	80178e0 <__ieee754_sqrt+0x28>
 8017a32:	4690      	mov	r8, r2
 8017a34:	e7be      	b.n	80179b4 <__ieee754_sqrt+0xfc>
 8017a36:	f7e8 fc59 	bl	80002ec <__adddf3>
 8017a3a:	e9da 8900 	ldrd	r8, r9, [sl]
 8017a3e:	4602      	mov	r2, r0
 8017a40:	460b      	mov	r3, r1
 8017a42:	4640      	mov	r0, r8
 8017a44:	4649      	mov	r1, r9
 8017a46:	f7e9 f879 	bl	8000b3c <__aeabi_dcmplt>
 8017a4a:	b120      	cbz	r0, 8017a56 <__ieee754_sqrt+0x19e>
 8017a4c:	1ca0      	adds	r0, r4, #2
 8017a4e:	bf08      	it	eq
 8017a50:	3601      	addeq	r6, #1
 8017a52:	3402      	adds	r4, #2
 8017a54:	e7df      	b.n	8017a16 <__ieee754_sqrt+0x15e>
 8017a56:	1c63      	adds	r3, r4, #1
 8017a58:	f023 0401 	bic.w	r4, r3, #1
 8017a5c:	e7db      	b.n	8017a16 <__ieee754_sqrt+0x15e>
 8017a5e:	bf00      	nop
 8017a60:	7ff00000 	.word	0x7ff00000
 8017a64:	20001630 	.word	0x20001630
 8017a68:	20001628 	.word	0x20001628
 8017a6c:	00000000 	.word	0x00000000

08017a70 <__ieee754_pow>:
 8017a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a74:	b091      	sub	sp, #68	@ 0x44
 8017a76:	ed8d 1b00 	vstr	d1, [sp]
 8017a7a:	e9dd 1900 	ldrd	r1, r9, [sp]
 8017a7e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8017a82:	ea5a 0001 	orrs.w	r0, sl, r1
 8017a86:	ec57 6b10 	vmov	r6, r7, d0
 8017a8a:	d113      	bne.n	8017ab4 <__ieee754_pow+0x44>
 8017a8c:	19b3      	adds	r3, r6, r6
 8017a8e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8017a92:	4152      	adcs	r2, r2
 8017a94:	4298      	cmp	r0, r3
 8017a96:	4b98      	ldr	r3, [pc, #608]	@ (8017cf8 <__ieee754_pow+0x288>)
 8017a98:	4193      	sbcs	r3, r2
 8017a9a:	f080 84ea 	bcs.w	8018472 <__ieee754_pow+0xa02>
 8017a9e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017aa2:	4630      	mov	r0, r6
 8017aa4:	4639      	mov	r1, r7
 8017aa6:	f7e8 fc21 	bl	80002ec <__adddf3>
 8017aaa:	ec41 0b10 	vmov	d0, r0, r1
 8017aae:	b011      	add	sp, #68	@ 0x44
 8017ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ab4:	4a91      	ldr	r2, [pc, #580]	@ (8017cfc <__ieee754_pow+0x28c>)
 8017ab6:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8017aba:	4590      	cmp	r8, r2
 8017abc:	463d      	mov	r5, r7
 8017abe:	4633      	mov	r3, r6
 8017ac0:	d806      	bhi.n	8017ad0 <__ieee754_pow+0x60>
 8017ac2:	d101      	bne.n	8017ac8 <__ieee754_pow+0x58>
 8017ac4:	2e00      	cmp	r6, #0
 8017ac6:	d1ea      	bne.n	8017a9e <__ieee754_pow+0x2e>
 8017ac8:	4592      	cmp	sl, r2
 8017aca:	d801      	bhi.n	8017ad0 <__ieee754_pow+0x60>
 8017acc:	d10e      	bne.n	8017aec <__ieee754_pow+0x7c>
 8017ace:	b169      	cbz	r1, 8017aec <__ieee754_pow+0x7c>
 8017ad0:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8017ad4:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8017ad8:	431d      	orrs	r5, r3
 8017ada:	d1e0      	bne.n	8017a9e <__ieee754_pow+0x2e>
 8017adc:	e9dd 3200 	ldrd	r3, r2, [sp]
 8017ae0:	18db      	adds	r3, r3, r3
 8017ae2:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8017ae6:	4152      	adcs	r2, r2
 8017ae8:	429d      	cmp	r5, r3
 8017aea:	e7d4      	b.n	8017a96 <__ieee754_pow+0x26>
 8017aec:	2d00      	cmp	r5, #0
 8017aee:	46c3      	mov	fp, r8
 8017af0:	da3a      	bge.n	8017b68 <__ieee754_pow+0xf8>
 8017af2:	4a83      	ldr	r2, [pc, #524]	@ (8017d00 <__ieee754_pow+0x290>)
 8017af4:	4592      	cmp	sl, r2
 8017af6:	d84d      	bhi.n	8017b94 <__ieee754_pow+0x124>
 8017af8:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8017afc:	4592      	cmp	sl, r2
 8017afe:	f240 84c7 	bls.w	8018490 <__ieee754_pow+0xa20>
 8017b02:	ea4f 522a 	mov.w	r2, sl, asr #20
 8017b06:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8017b0a:	2a14      	cmp	r2, #20
 8017b0c:	dd0f      	ble.n	8017b2e <__ieee754_pow+0xbe>
 8017b0e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8017b12:	fa21 f402 	lsr.w	r4, r1, r2
 8017b16:	fa04 f202 	lsl.w	r2, r4, r2
 8017b1a:	428a      	cmp	r2, r1
 8017b1c:	f040 84b8 	bne.w	8018490 <__ieee754_pow+0xa20>
 8017b20:	f004 0401 	and.w	r4, r4, #1
 8017b24:	f1c4 0402 	rsb	r4, r4, #2
 8017b28:	2900      	cmp	r1, #0
 8017b2a:	d158      	bne.n	8017bde <__ieee754_pow+0x16e>
 8017b2c:	e00e      	b.n	8017b4c <__ieee754_pow+0xdc>
 8017b2e:	2900      	cmp	r1, #0
 8017b30:	d154      	bne.n	8017bdc <__ieee754_pow+0x16c>
 8017b32:	f1c2 0214 	rsb	r2, r2, #20
 8017b36:	fa4a f402 	asr.w	r4, sl, r2
 8017b3a:	fa04 f202 	lsl.w	r2, r4, r2
 8017b3e:	4552      	cmp	r2, sl
 8017b40:	f040 84a3 	bne.w	801848a <__ieee754_pow+0xa1a>
 8017b44:	f004 0401 	and.w	r4, r4, #1
 8017b48:	f1c4 0402 	rsb	r4, r4, #2
 8017b4c:	4a6d      	ldr	r2, [pc, #436]	@ (8017d04 <__ieee754_pow+0x294>)
 8017b4e:	4592      	cmp	sl, r2
 8017b50:	d12e      	bne.n	8017bb0 <__ieee754_pow+0x140>
 8017b52:	f1b9 0f00 	cmp.w	r9, #0
 8017b56:	f280 8494 	bge.w	8018482 <__ieee754_pow+0xa12>
 8017b5a:	496a      	ldr	r1, [pc, #424]	@ (8017d04 <__ieee754_pow+0x294>)
 8017b5c:	4632      	mov	r2, r6
 8017b5e:	463b      	mov	r3, r7
 8017b60:	2000      	movs	r0, #0
 8017b62:	f7e8 fea3 	bl	80008ac <__aeabi_ddiv>
 8017b66:	e7a0      	b.n	8017aaa <__ieee754_pow+0x3a>
 8017b68:	2400      	movs	r4, #0
 8017b6a:	bbc1      	cbnz	r1, 8017bde <__ieee754_pow+0x16e>
 8017b6c:	4a63      	ldr	r2, [pc, #396]	@ (8017cfc <__ieee754_pow+0x28c>)
 8017b6e:	4592      	cmp	sl, r2
 8017b70:	d1ec      	bne.n	8017b4c <__ieee754_pow+0xdc>
 8017b72:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8017b76:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8017b7a:	431a      	orrs	r2, r3
 8017b7c:	f000 8479 	beq.w	8018472 <__ieee754_pow+0xa02>
 8017b80:	4b61      	ldr	r3, [pc, #388]	@ (8017d08 <__ieee754_pow+0x298>)
 8017b82:	4598      	cmp	r8, r3
 8017b84:	d908      	bls.n	8017b98 <__ieee754_pow+0x128>
 8017b86:	f1b9 0f00 	cmp.w	r9, #0
 8017b8a:	f2c0 8476 	blt.w	801847a <__ieee754_pow+0xa0a>
 8017b8e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017b92:	e78a      	b.n	8017aaa <__ieee754_pow+0x3a>
 8017b94:	2402      	movs	r4, #2
 8017b96:	e7e8      	b.n	8017b6a <__ieee754_pow+0xfa>
 8017b98:	f1b9 0f00 	cmp.w	r9, #0
 8017b9c:	f04f 0000 	mov.w	r0, #0
 8017ba0:	f04f 0100 	mov.w	r1, #0
 8017ba4:	da81      	bge.n	8017aaa <__ieee754_pow+0x3a>
 8017ba6:	e9dd 0300 	ldrd	r0, r3, [sp]
 8017baa:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8017bae:	e77c      	b.n	8017aaa <__ieee754_pow+0x3a>
 8017bb0:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8017bb4:	d106      	bne.n	8017bc4 <__ieee754_pow+0x154>
 8017bb6:	4632      	mov	r2, r6
 8017bb8:	463b      	mov	r3, r7
 8017bba:	4630      	mov	r0, r6
 8017bbc:	4639      	mov	r1, r7
 8017bbe:	f7e8 fd4b 	bl	8000658 <__aeabi_dmul>
 8017bc2:	e772      	b.n	8017aaa <__ieee754_pow+0x3a>
 8017bc4:	4a51      	ldr	r2, [pc, #324]	@ (8017d0c <__ieee754_pow+0x29c>)
 8017bc6:	4591      	cmp	r9, r2
 8017bc8:	d109      	bne.n	8017bde <__ieee754_pow+0x16e>
 8017bca:	2d00      	cmp	r5, #0
 8017bcc:	db07      	blt.n	8017bde <__ieee754_pow+0x16e>
 8017bce:	ec47 6b10 	vmov	d0, r6, r7
 8017bd2:	b011      	add	sp, #68	@ 0x44
 8017bd4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017bd8:	f7ff be6e 	b.w	80178b8 <__ieee754_sqrt>
 8017bdc:	2400      	movs	r4, #0
 8017bde:	ec47 6b10 	vmov	d0, r6, r7
 8017be2:	9302      	str	r3, [sp, #8]
 8017be4:	f000 fc88 	bl	80184f8 <fabs>
 8017be8:	9b02      	ldr	r3, [sp, #8]
 8017bea:	ec51 0b10 	vmov	r0, r1, d0
 8017bee:	bb53      	cbnz	r3, 8017c46 <__ieee754_pow+0x1d6>
 8017bf0:	4b44      	ldr	r3, [pc, #272]	@ (8017d04 <__ieee754_pow+0x294>)
 8017bf2:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8017bf6:	429a      	cmp	r2, r3
 8017bf8:	d002      	beq.n	8017c00 <__ieee754_pow+0x190>
 8017bfa:	f1b8 0f00 	cmp.w	r8, #0
 8017bfe:	d122      	bne.n	8017c46 <__ieee754_pow+0x1d6>
 8017c00:	f1b9 0f00 	cmp.w	r9, #0
 8017c04:	da05      	bge.n	8017c12 <__ieee754_pow+0x1a2>
 8017c06:	4602      	mov	r2, r0
 8017c08:	460b      	mov	r3, r1
 8017c0a:	2000      	movs	r0, #0
 8017c0c:	493d      	ldr	r1, [pc, #244]	@ (8017d04 <__ieee754_pow+0x294>)
 8017c0e:	f7e8 fe4d 	bl	80008ac <__aeabi_ddiv>
 8017c12:	2d00      	cmp	r5, #0
 8017c14:	f6bf af49 	bge.w	8017aaa <__ieee754_pow+0x3a>
 8017c18:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8017c1c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8017c20:	ea58 0804 	orrs.w	r8, r8, r4
 8017c24:	d108      	bne.n	8017c38 <__ieee754_pow+0x1c8>
 8017c26:	4602      	mov	r2, r0
 8017c28:	460b      	mov	r3, r1
 8017c2a:	4610      	mov	r0, r2
 8017c2c:	4619      	mov	r1, r3
 8017c2e:	f7e8 fb5b 	bl	80002e8 <__aeabi_dsub>
 8017c32:	4602      	mov	r2, r0
 8017c34:	460b      	mov	r3, r1
 8017c36:	e794      	b.n	8017b62 <__ieee754_pow+0xf2>
 8017c38:	2c01      	cmp	r4, #1
 8017c3a:	f47f af36 	bne.w	8017aaa <__ieee754_pow+0x3a>
 8017c3e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8017c42:	4619      	mov	r1, r3
 8017c44:	e731      	b.n	8017aaa <__ieee754_pow+0x3a>
 8017c46:	0feb      	lsrs	r3, r5, #31
 8017c48:	3b01      	subs	r3, #1
 8017c4a:	ea53 0204 	orrs.w	r2, r3, r4
 8017c4e:	d102      	bne.n	8017c56 <__ieee754_pow+0x1e6>
 8017c50:	4632      	mov	r2, r6
 8017c52:	463b      	mov	r3, r7
 8017c54:	e7e9      	b.n	8017c2a <__ieee754_pow+0x1ba>
 8017c56:	3c01      	subs	r4, #1
 8017c58:	431c      	orrs	r4, r3
 8017c5a:	d016      	beq.n	8017c8a <__ieee754_pow+0x21a>
 8017c5c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8017ce8 <__ieee754_pow+0x278>
 8017c60:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8017c64:	ed8d 7b02 	vstr	d7, [sp, #8]
 8017c68:	f240 8112 	bls.w	8017e90 <__ieee754_pow+0x420>
 8017c6c:	4b28      	ldr	r3, [pc, #160]	@ (8017d10 <__ieee754_pow+0x2a0>)
 8017c6e:	459a      	cmp	sl, r3
 8017c70:	4b25      	ldr	r3, [pc, #148]	@ (8017d08 <__ieee754_pow+0x298>)
 8017c72:	d916      	bls.n	8017ca2 <__ieee754_pow+0x232>
 8017c74:	4598      	cmp	r8, r3
 8017c76:	d80b      	bhi.n	8017c90 <__ieee754_pow+0x220>
 8017c78:	f1b9 0f00 	cmp.w	r9, #0
 8017c7c:	da0b      	bge.n	8017c96 <__ieee754_pow+0x226>
 8017c7e:	2000      	movs	r0, #0
 8017c80:	b011      	add	sp, #68	@ 0x44
 8017c82:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c86:	f7ff be0f 	b.w	80178a8 <__math_oflow>
 8017c8a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8017cf0 <__ieee754_pow+0x280>
 8017c8e:	e7e7      	b.n	8017c60 <__ieee754_pow+0x1f0>
 8017c90:	f1b9 0f00 	cmp.w	r9, #0
 8017c94:	dcf3      	bgt.n	8017c7e <__ieee754_pow+0x20e>
 8017c96:	2000      	movs	r0, #0
 8017c98:	b011      	add	sp, #68	@ 0x44
 8017c9a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c9e:	f7ff bdfb 	b.w	8017898 <__math_uflow>
 8017ca2:	4598      	cmp	r8, r3
 8017ca4:	d20c      	bcs.n	8017cc0 <__ieee754_pow+0x250>
 8017ca6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017caa:	2200      	movs	r2, #0
 8017cac:	2300      	movs	r3, #0
 8017cae:	f7e8 ff45 	bl	8000b3c <__aeabi_dcmplt>
 8017cb2:	3800      	subs	r0, #0
 8017cb4:	bf18      	it	ne
 8017cb6:	2001      	movne	r0, #1
 8017cb8:	f1b9 0f00 	cmp.w	r9, #0
 8017cbc:	daec      	bge.n	8017c98 <__ieee754_pow+0x228>
 8017cbe:	e7df      	b.n	8017c80 <__ieee754_pow+0x210>
 8017cc0:	4b10      	ldr	r3, [pc, #64]	@ (8017d04 <__ieee754_pow+0x294>)
 8017cc2:	4598      	cmp	r8, r3
 8017cc4:	f04f 0200 	mov.w	r2, #0
 8017cc8:	d924      	bls.n	8017d14 <__ieee754_pow+0x2a4>
 8017cca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017cce:	2300      	movs	r3, #0
 8017cd0:	f7e8 ff34 	bl	8000b3c <__aeabi_dcmplt>
 8017cd4:	3800      	subs	r0, #0
 8017cd6:	bf18      	it	ne
 8017cd8:	2001      	movne	r0, #1
 8017cda:	f1b9 0f00 	cmp.w	r9, #0
 8017cde:	dccf      	bgt.n	8017c80 <__ieee754_pow+0x210>
 8017ce0:	e7da      	b.n	8017c98 <__ieee754_pow+0x228>
 8017ce2:	bf00      	nop
 8017ce4:	f3af 8000 	nop.w
 8017ce8:	00000000 	.word	0x00000000
 8017cec:	3ff00000 	.word	0x3ff00000
 8017cf0:	00000000 	.word	0x00000000
 8017cf4:	bff00000 	.word	0xbff00000
 8017cf8:	fff00000 	.word	0xfff00000
 8017cfc:	7ff00000 	.word	0x7ff00000
 8017d00:	433fffff 	.word	0x433fffff
 8017d04:	3ff00000 	.word	0x3ff00000
 8017d08:	3fefffff 	.word	0x3fefffff
 8017d0c:	3fe00000 	.word	0x3fe00000
 8017d10:	43f00000 	.word	0x43f00000
 8017d14:	4b5a      	ldr	r3, [pc, #360]	@ (8017e80 <__ieee754_pow+0x410>)
 8017d16:	f7e8 fae7 	bl	80002e8 <__aeabi_dsub>
 8017d1a:	a351      	add	r3, pc, #324	@ (adr r3, 8017e60 <__ieee754_pow+0x3f0>)
 8017d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d20:	4604      	mov	r4, r0
 8017d22:	460d      	mov	r5, r1
 8017d24:	f7e8 fc98 	bl	8000658 <__aeabi_dmul>
 8017d28:	a34f      	add	r3, pc, #316	@ (adr r3, 8017e68 <__ieee754_pow+0x3f8>)
 8017d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d2e:	4606      	mov	r6, r0
 8017d30:	460f      	mov	r7, r1
 8017d32:	4620      	mov	r0, r4
 8017d34:	4629      	mov	r1, r5
 8017d36:	f7e8 fc8f 	bl	8000658 <__aeabi_dmul>
 8017d3a:	4b52      	ldr	r3, [pc, #328]	@ (8017e84 <__ieee754_pow+0x414>)
 8017d3c:	4682      	mov	sl, r0
 8017d3e:	468b      	mov	fp, r1
 8017d40:	2200      	movs	r2, #0
 8017d42:	4620      	mov	r0, r4
 8017d44:	4629      	mov	r1, r5
 8017d46:	f7e8 fc87 	bl	8000658 <__aeabi_dmul>
 8017d4a:	4602      	mov	r2, r0
 8017d4c:	460b      	mov	r3, r1
 8017d4e:	a148      	add	r1, pc, #288	@ (adr r1, 8017e70 <__ieee754_pow+0x400>)
 8017d50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017d54:	f7e8 fac8 	bl	80002e8 <__aeabi_dsub>
 8017d58:	4622      	mov	r2, r4
 8017d5a:	462b      	mov	r3, r5
 8017d5c:	f7e8 fc7c 	bl	8000658 <__aeabi_dmul>
 8017d60:	4602      	mov	r2, r0
 8017d62:	460b      	mov	r3, r1
 8017d64:	2000      	movs	r0, #0
 8017d66:	4948      	ldr	r1, [pc, #288]	@ (8017e88 <__ieee754_pow+0x418>)
 8017d68:	f7e8 fabe 	bl	80002e8 <__aeabi_dsub>
 8017d6c:	4622      	mov	r2, r4
 8017d6e:	4680      	mov	r8, r0
 8017d70:	4689      	mov	r9, r1
 8017d72:	462b      	mov	r3, r5
 8017d74:	4620      	mov	r0, r4
 8017d76:	4629      	mov	r1, r5
 8017d78:	f7e8 fc6e 	bl	8000658 <__aeabi_dmul>
 8017d7c:	4602      	mov	r2, r0
 8017d7e:	460b      	mov	r3, r1
 8017d80:	4640      	mov	r0, r8
 8017d82:	4649      	mov	r1, r9
 8017d84:	f7e8 fc68 	bl	8000658 <__aeabi_dmul>
 8017d88:	a33b      	add	r3, pc, #236	@ (adr r3, 8017e78 <__ieee754_pow+0x408>)
 8017d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d8e:	f7e8 fc63 	bl	8000658 <__aeabi_dmul>
 8017d92:	4602      	mov	r2, r0
 8017d94:	460b      	mov	r3, r1
 8017d96:	4650      	mov	r0, sl
 8017d98:	4659      	mov	r1, fp
 8017d9a:	f7e8 faa5 	bl	80002e8 <__aeabi_dsub>
 8017d9e:	4602      	mov	r2, r0
 8017da0:	460b      	mov	r3, r1
 8017da2:	4680      	mov	r8, r0
 8017da4:	4689      	mov	r9, r1
 8017da6:	4630      	mov	r0, r6
 8017da8:	4639      	mov	r1, r7
 8017daa:	f7e8 fa9f 	bl	80002ec <__adddf3>
 8017dae:	2400      	movs	r4, #0
 8017db0:	4632      	mov	r2, r6
 8017db2:	463b      	mov	r3, r7
 8017db4:	4620      	mov	r0, r4
 8017db6:	460d      	mov	r5, r1
 8017db8:	f7e8 fa96 	bl	80002e8 <__aeabi_dsub>
 8017dbc:	4602      	mov	r2, r0
 8017dbe:	460b      	mov	r3, r1
 8017dc0:	4640      	mov	r0, r8
 8017dc2:	4649      	mov	r1, r9
 8017dc4:	f7e8 fa90 	bl	80002e8 <__aeabi_dsub>
 8017dc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017dcc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8017dd0:	2300      	movs	r3, #0
 8017dd2:	9304      	str	r3, [sp, #16]
 8017dd4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8017dd8:	4606      	mov	r6, r0
 8017dda:	460f      	mov	r7, r1
 8017ddc:	4652      	mov	r2, sl
 8017dde:	465b      	mov	r3, fp
 8017de0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017de4:	f7e8 fa80 	bl	80002e8 <__aeabi_dsub>
 8017de8:	4622      	mov	r2, r4
 8017dea:	462b      	mov	r3, r5
 8017dec:	f7e8 fc34 	bl	8000658 <__aeabi_dmul>
 8017df0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017df4:	4680      	mov	r8, r0
 8017df6:	4689      	mov	r9, r1
 8017df8:	4630      	mov	r0, r6
 8017dfa:	4639      	mov	r1, r7
 8017dfc:	f7e8 fc2c 	bl	8000658 <__aeabi_dmul>
 8017e00:	4602      	mov	r2, r0
 8017e02:	460b      	mov	r3, r1
 8017e04:	4640      	mov	r0, r8
 8017e06:	4649      	mov	r1, r9
 8017e08:	f7e8 fa70 	bl	80002ec <__adddf3>
 8017e0c:	4652      	mov	r2, sl
 8017e0e:	465b      	mov	r3, fp
 8017e10:	4606      	mov	r6, r0
 8017e12:	460f      	mov	r7, r1
 8017e14:	4620      	mov	r0, r4
 8017e16:	4629      	mov	r1, r5
 8017e18:	f7e8 fc1e 	bl	8000658 <__aeabi_dmul>
 8017e1c:	460b      	mov	r3, r1
 8017e1e:	4602      	mov	r2, r0
 8017e20:	4680      	mov	r8, r0
 8017e22:	4689      	mov	r9, r1
 8017e24:	4630      	mov	r0, r6
 8017e26:	4639      	mov	r1, r7
 8017e28:	f7e8 fa60 	bl	80002ec <__adddf3>
 8017e2c:	4b17      	ldr	r3, [pc, #92]	@ (8017e8c <__ieee754_pow+0x41c>)
 8017e2e:	4299      	cmp	r1, r3
 8017e30:	4604      	mov	r4, r0
 8017e32:	460d      	mov	r5, r1
 8017e34:	468a      	mov	sl, r1
 8017e36:	468b      	mov	fp, r1
 8017e38:	f340 82ef 	ble.w	801841a <__ieee754_pow+0x9aa>
 8017e3c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8017e40:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8017e44:	4303      	orrs	r3, r0
 8017e46:	f000 81e8 	beq.w	801821a <__ieee754_pow+0x7aa>
 8017e4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017e4e:	2200      	movs	r2, #0
 8017e50:	2300      	movs	r3, #0
 8017e52:	f7e8 fe73 	bl	8000b3c <__aeabi_dcmplt>
 8017e56:	3800      	subs	r0, #0
 8017e58:	bf18      	it	ne
 8017e5a:	2001      	movne	r0, #1
 8017e5c:	e710      	b.n	8017c80 <__ieee754_pow+0x210>
 8017e5e:	bf00      	nop
 8017e60:	60000000 	.word	0x60000000
 8017e64:	3ff71547 	.word	0x3ff71547
 8017e68:	f85ddf44 	.word	0xf85ddf44
 8017e6c:	3e54ae0b 	.word	0x3e54ae0b
 8017e70:	55555555 	.word	0x55555555
 8017e74:	3fd55555 	.word	0x3fd55555
 8017e78:	652b82fe 	.word	0x652b82fe
 8017e7c:	3ff71547 	.word	0x3ff71547
 8017e80:	3ff00000 	.word	0x3ff00000
 8017e84:	3fd00000 	.word	0x3fd00000
 8017e88:	3fe00000 	.word	0x3fe00000
 8017e8c:	408fffff 	.word	0x408fffff
 8017e90:	4bd5      	ldr	r3, [pc, #852]	@ (80181e8 <__ieee754_pow+0x778>)
 8017e92:	402b      	ands	r3, r5
 8017e94:	2200      	movs	r2, #0
 8017e96:	b92b      	cbnz	r3, 8017ea4 <__ieee754_pow+0x434>
 8017e98:	4bd4      	ldr	r3, [pc, #848]	@ (80181ec <__ieee754_pow+0x77c>)
 8017e9a:	f7e8 fbdd 	bl	8000658 <__aeabi_dmul>
 8017e9e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8017ea2:	468b      	mov	fp, r1
 8017ea4:	ea4f 532b 	mov.w	r3, fp, asr #20
 8017ea8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8017eac:	4413      	add	r3, r2
 8017eae:	930a      	str	r3, [sp, #40]	@ 0x28
 8017eb0:	4bcf      	ldr	r3, [pc, #828]	@ (80181f0 <__ieee754_pow+0x780>)
 8017eb2:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8017eb6:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8017eba:	459b      	cmp	fp, r3
 8017ebc:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8017ec0:	dd08      	ble.n	8017ed4 <__ieee754_pow+0x464>
 8017ec2:	4bcc      	ldr	r3, [pc, #816]	@ (80181f4 <__ieee754_pow+0x784>)
 8017ec4:	459b      	cmp	fp, r3
 8017ec6:	f340 81a5 	ble.w	8018214 <__ieee754_pow+0x7a4>
 8017eca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017ecc:	3301      	adds	r3, #1
 8017ece:	930a      	str	r3, [sp, #40]	@ 0x28
 8017ed0:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8017ed4:	f04f 0a00 	mov.w	sl, #0
 8017ed8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8017edc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8017ede:	4bc6      	ldr	r3, [pc, #792]	@ (80181f8 <__ieee754_pow+0x788>)
 8017ee0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8017ee4:	ed93 7b00 	vldr	d7, [r3]
 8017ee8:	4629      	mov	r1, r5
 8017eea:	ec53 2b17 	vmov	r2, r3, d7
 8017eee:	ed8d 7b06 	vstr	d7, [sp, #24]
 8017ef2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8017ef6:	f7e8 f9f7 	bl	80002e8 <__aeabi_dsub>
 8017efa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017efe:	4606      	mov	r6, r0
 8017f00:	460f      	mov	r7, r1
 8017f02:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017f06:	f7e8 f9f1 	bl	80002ec <__adddf3>
 8017f0a:	4602      	mov	r2, r0
 8017f0c:	460b      	mov	r3, r1
 8017f0e:	2000      	movs	r0, #0
 8017f10:	49ba      	ldr	r1, [pc, #744]	@ (80181fc <__ieee754_pow+0x78c>)
 8017f12:	f7e8 fccb 	bl	80008ac <__aeabi_ddiv>
 8017f16:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8017f1a:	4602      	mov	r2, r0
 8017f1c:	460b      	mov	r3, r1
 8017f1e:	4630      	mov	r0, r6
 8017f20:	4639      	mov	r1, r7
 8017f22:	f7e8 fb99 	bl	8000658 <__aeabi_dmul>
 8017f26:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8017f2a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8017f2e:	106d      	asrs	r5, r5, #1
 8017f30:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8017f34:	f04f 0b00 	mov.w	fp, #0
 8017f38:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8017f3c:	4661      	mov	r1, ip
 8017f3e:	2200      	movs	r2, #0
 8017f40:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8017f44:	4658      	mov	r0, fp
 8017f46:	46e1      	mov	r9, ip
 8017f48:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8017f4c:	4614      	mov	r4, r2
 8017f4e:	461d      	mov	r5, r3
 8017f50:	f7e8 fb82 	bl	8000658 <__aeabi_dmul>
 8017f54:	4602      	mov	r2, r0
 8017f56:	460b      	mov	r3, r1
 8017f58:	4630      	mov	r0, r6
 8017f5a:	4639      	mov	r1, r7
 8017f5c:	f7e8 f9c4 	bl	80002e8 <__aeabi_dsub>
 8017f60:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8017f64:	4606      	mov	r6, r0
 8017f66:	460f      	mov	r7, r1
 8017f68:	4620      	mov	r0, r4
 8017f6a:	4629      	mov	r1, r5
 8017f6c:	f7e8 f9bc 	bl	80002e8 <__aeabi_dsub>
 8017f70:	4602      	mov	r2, r0
 8017f72:	460b      	mov	r3, r1
 8017f74:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017f78:	f7e8 f9b6 	bl	80002e8 <__aeabi_dsub>
 8017f7c:	465a      	mov	r2, fp
 8017f7e:	464b      	mov	r3, r9
 8017f80:	f7e8 fb6a 	bl	8000658 <__aeabi_dmul>
 8017f84:	4602      	mov	r2, r0
 8017f86:	460b      	mov	r3, r1
 8017f88:	4630      	mov	r0, r6
 8017f8a:	4639      	mov	r1, r7
 8017f8c:	f7e8 f9ac 	bl	80002e8 <__aeabi_dsub>
 8017f90:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8017f94:	f7e8 fb60 	bl	8000658 <__aeabi_dmul>
 8017f98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017f9c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8017fa0:	4610      	mov	r0, r2
 8017fa2:	4619      	mov	r1, r3
 8017fa4:	f7e8 fb58 	bl	8000658 <__aeabi_dmul>
 8017fa8:	a37d      	add	r3, pc, #500	@ (adr r3, 80181a0 <__ieee754_pow+0x730>)
 8017faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017fae:	4604      	mov	r4, r0
 8017fb0:	460d      	mov	r5, r1
 8017fb2:	f7e8 fb51 	bl	8000658 <__aeabi_dmul>
 8017fb6:	a37c      	add	r3, pc, #496	@ (adr r3, 80181a8 <__ieee754_pow+0x738>)
 8017fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017fbc:	f7e8 f996 	bl	80002ec <__adddf3>
 8017fc0:	4622      	mov	r2, r4
 8017fc2:	462b      	mov	r3, r5
 8017fc4:	f7e8 fb48 	bl	8000658 <__aeabi_dmul>
 8017fc8:	a379      	add	r3, pc, #484	@ (adr r3, 80181b0 <__ieee754_pow+0x740>)
 8017fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017fce:	f7e8 f98d 	bl	80002ec <__adddf3>
 8017fd2:	4622      	mov	r2, r4
 8017fd4:	462b      	mov	r3, r5
 8017fd6:	f7e8 fb3f 	bl	8000658 <__aeabi_dmul>
 8017fda:	a377      	add	r3, pc, #476	@ (adr r3, 80181b8 <__ieee754_pow+0x748>)
 8017fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017fe0:	f7e8 f984 	bl	80002ec <__adddf3>
 8017fe4:	4622      	mov	r2, r4
 8017fe6:	462b      	mov	r3, r5
 8017fe8:	f7e8 fb36 	bl	8000658 <__aeabi_dmul>
 8017fec:	a374      	add	r3, pc, #464	@ (adr r3, 80181c0 <__ieee754_pow+0x750>)
 8017fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ff2:	f7e8 f97b 	bl	80002ec <__adddf3>
 8017ff6:	4622      	mov	r2, r4
 8017ff8:	462b      	mov	r3, r5
 8017ffa:	f7e8 fb2d 	bl	8000658 <__aeabi_dmul>
 8017ffe:	a372      	add	r3, pc, #456	@ (adr r3, 80181c8 <__ieee754_pow+0x758>)
 8018000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018004:	f7e8 f972 	bl	80002ec <__adddf3>
 8018008:	4622      	mov	r2, r4
 801800a:	4606      	mov	r6, r0
 801800c:	460f      	mov	r7, r1
 801800e:	462b      	mov	r3, r5
 8018010:	4620      	mov	r0, r4
 8018012:	4629      	mov	r1, r5
 8018014:	f7e8 fb20 	bl	8000658 <__aeabi_dmul>
 8018018:	4602      	mov	r2, r0
 801801a:	460b      	mov	r3, r1
 801801c:	4630      	mov	r0, r6
 801801e:	4639      	mov	r1, r7
 8018020:	f7e8 fb1a 	bl	8000658 <__aeabi_dmul>
 8018024:	465a      	mov	r2, fp
 8018026:	4604      	mov	r4, r0
 8018028:	460d      	mov	r5, r1
 801802a:	464b      	mov	r3, r9
 801802c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018030:	f7e8 f95c 	bl	80002ec <__adddf3>
 8018034:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8018038:	f7e8 fb0e 	bl	8000658 <__aeabi_dmul>
 801803c:	4622      	mov	r2, r4
 801803e:	462b      	mov	r3, r5
 8018040:	f7e8 f954 	bl	80002ec <__adddf3>
 8018044:	465a      	mov	r2, fp
 8018046:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801804a:	464b      	mov	r3, r9
 801804c:	4658      	mov	r0, fp
 801804e:	4649      	mov	r1, r9
 8018050:	f7e8 fb02 	bl	8000658 <__aeabi_dmul>
 8018054:	4b6a      	ldr	r3, [pc, #424]	@ (8018200 <__ieee754_pow+0x790>)
 8018056:	2200      	movs	r2, #0
 8018058:	4606      	mov	r6, r0
 801805a:	460f      	mov	r7, r1
 801805c:	f7e8 f946 	bl	80002ec <__adddf3>
 8018060:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8018064:	f7e8 f942 	bl	80002ec <__adddf3>
 8018068:	46d8      	mov	r8, fp
 801806a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 801806e:	460d      	mov	r5, r1
 8018070:	465a      	mov	r2, fp
 8018072:	460b      	mov	r3, r1
 8018074:	4640      	mov	r0, r8
 8018076:	4649      	mov	r1, r9
 8018078:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 801807c:	f7e8 faec 	bl	8000658 <__aeabi_dmul>
 8018080:	465c      	mov	r4, fp
 8018082:	4680      	mov	r8, r0
 8018084:	4689      	mov	r9, r1
 8018086:	4b5e      	ldr	r3, [pc, #376]	@ (8018200 <__ieee754_pow+0x790>)
 8018088:	2200      	movs	r2, #0
 801808a:	4620      	mov	r0, r4
 801808c:	4629      	mov	r1, r5
 801808e:	f7e8 f92b 	bl	80002e8 <__aeabi_dsub>
 8018092:	4632      	mov	r2, r6
 8018094:	463b      	mov	r3, r7
 8018096:	f7e8 f927 	bl	80002e8 <__aeabi_dsub>
 801809a:	4602      	mov	r2, r0
 801809c:	460b      	mov	r3, r1
 801809e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80180a2:	f7e8 f921 	bl	80002e8 <__aeabi_dsub>
 80180a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80180aa:	f7e8 fad5 	bl	8000658 <__aeabi_dmul>
 80180ae:	4622      	mov	r2, r4
 80180b0:	4606      	mov	r6, r0
 80180b2:	460f      	mov	r7, r1
 80180b4:	462b      	mov	r3, r5
 80180b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80180ba:	f7e8 facd 	bl	8000658 <__aeabi_dmul>
 80180be:	4602      	mov	r2, r0
 80180c0:	460b      	mov	r3, r1
 80180c2:	4630      	mov	r0, r6
 80180c4:	4639      	mov	r1, r7
 80180c6:	f7e8 f911 	bl	80002ec <__adddf3>
 80180ca:	4606      	mov	r6, r0
 80180cc:	460f      	mov	r7, r1
 80180ce:	4602      	mov	r2, r0
 80180d0:	460b      	mov	r3, r1
 80180d2:	4640      	mov	r0, r8
 80180d4:	4649      	mov	r1, r9
 80180d6:	f7e8 f909 	bl	80002ec <__adddf3>
 80180da:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 80180de:	a33c      	add	r3, pc, #240	@ (adr r3, 80181d0 <__ieee754_pow+0x760>)
 80180e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180e4:	4658      	mov	r0, fp
 80180e6:	e9cd bc08 	strd	fp, ip, [sp, #32]
 80180ea:	460d      	mov	r5, r1
 80180ec:	f7e8 fab4 	bl	8000658 <__aeabi_dmul>
 80180f0:	465c      	mov	r4, fp
 80180f2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80180f6:	4642      	mov	r2, r8
 80180f8:	464b      	mov	r3, r9
 80180fa:	4620      	mov	r0, r4
 80180fc:	4629      	mov	r1, r5
 80180fe:	f7e8 f8f3 	bl	80002e8 <__aeabi_dsub>
 8018102:	4602      	mov	r2, r0
 8018104:	460b      	mov	r3, r1
 8018106:	4630      	mov	r0, r6
 8018108:	4639      	mov	r1, r7
 801810a:	f7e8 f8ed 	bl	80002e8 <__aeabi_dsub>
 801810e:	a332      	add	r3, pc, #200	@ (adr r3, 80181d8 <__ieee754_pow+0x768>)
 8018110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018114:	f7e8 faa0 	bl	8000658 <__aeabi_dmul>
 8018118:	a331      	add	r3, pc, #196	@ (adr r3, 80181e0 <__ieee754_pow+0x770>)
 801811a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801811e:	4606      	mov	r6, r0
 8018120:	460f      	mov	r7, r1
 8018122:	4620      	mov	r0, r4
 8018124:	4629      	mov	r1, r5
 8018126:	f7e8 fa97 	bl	8000658 <__aeabi_dmul>
 801812a:	4602      	mov	r2, r0
 801812c:	460b      	mov	r3, r1
 801812e:	4630      	mov	r0, r6
 8018130:	4639      	mov	r1, r7
 8018132:	f7e8 f8db 	bl	80002ec <__adddf3>
 8018136:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8018138:	4b32      	ldr	r3, [pc, #200]	@ (8018204 <__ieee754_pow+0x794>)
 801813a:	4413      	add	r3, r2
 801813c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018140:	f7e8 f8d4 	bl	80002ec <__adddf3>
 8018144:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8018148:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801814a:	f7e8 fa1b 	bl	8000584 <__aeabi_i2d>
 801814e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8018150:	4b2d      	ldr	r3, [pc, #180]	@ (8018208 <__ieee754_pow+0x798>)
 8018152:	4413      	add	r3, r2
 8018154:	e9d3 8900 	ldrd	r8, r9, [r3]
 8018158:	4606      	mov	r6, r0
 801815a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801815e:	460f      	mov	r7, r1
 8018160:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018164:	f7e8 f8c2 	bl	80002ec <__adddf3>
 8018168:	4642      	mov	r2, r8
 801816a:	464b      	mov	r3, r9
 801816c:	f7e8 f8be 	bl	80002ec <__adddf3>
 8018170:	4632      	mov	r2, r6
 8018172:	463b      	mov	r3, r7
 8018174:	f7e8 f8ba 	bl	80002ec <__adddf3>
 8018178:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 801817c:	4632      	mov	r2, r6
 801817e:	463b      	mov	r3, r7
 8018180:	4658      	mov	r0, fp
 8018182:	460d      	mov	r5, r1
 8018184:	f7e8 f8b0 	bl	80002e8 <__aeabi_dsub>
 8018188:	4642      	mov	r2, r8
 801818a:	464b      	mov	r3, r9
 801818c:	f7e8 f8ac 	bl	80002e8 <__aeabi_dsub>
 8018190:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8018194:	f7e8 f8a8 	bl	80002e8 <__aeabi_dsub>
 8018198:	465c      	mov	r4, fp
 801819a:	4602      	mov	r2, r0
 801819c:	e036      	b.n	801820c <__ieee754_pow+0x79c>
 801819e:	bf00      	nop
 80181a0:	4a454eef 	.word	0x4a454eef
 80181a4:	3fca7e28 	.word	0x3fca7e28
 80181a8:	93c9db65 	.word	0x93c9db65
 80181ac:	3fcd864a 	.word	0x3fcd864a
 80181b0:	a91d4101 	.word	0xa91d4101
 80181b4:	3fd17460 	.word	0x3fd17460
 80181b8:	518f264d 	.word	0x518f264d
 80181bc:	3fd55555 	.word	0x3fd55555
 80181c0:	db6fabff 	.word	0xdb6fabff
 80181c4:	3fdb6db6 	.word	0x3fdb6db6
 80181c8:	33333303 	.word	0x33333303
 80181cc:	3fe33333 	.word	0x3fe33333
 80181d0:	e0000000 	.word	0xe0000000
 80181d4:	3feec709 	.word	0x3feec709
 80181d8:	dc3a03fd 	.word	0xdc3a03fd
 80181dc:	3feec709 	.word	0x3feec709
 80181e0:	145b01f5 	.word	0x145b01f5
 80181e4:	be3e2fe0 	.word	0xbe3e2fe0
 80181e8:	7ff00000 	.word	0x7ff00000
 80181ec:	43400000 	.word	0x43400000
 80181f0:	0003988e 	.word	0x0003988e
 80181f4:	000bb679 	.word	0x000bb679
 80181f8:	0805db30 	.word	0x0805db30
 80181fc:	3ff00000 	.word	0x3ff00000
 8018200:	40080000 	.word	0x40080000
 8018204:	0805db10 	.word	0x0805db10
 8018208:	0805db20 	.word	0x0805db20
 801820c:	460b      	mov	r3, r1
 801820e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8018212:	e5d7      	b.n	8017dc4 <__ieee754_pow+0x354>
 8018214:	f04f 0a01 	mov.w	sl, #1
 8018218:	e65e      	b.n	8017ed8 <__ieee754_pow+0x468>
 801821a:	a3b4      	add	r3, pc, #720	@ (adr r3, 80184ec <__ieee754_pow+0xa7c>)
 801821c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018220:	4630      	mov	r0, r6
 8018222:	4639      	mov	r1, r7
 8018224:	f7e8 f862 	bl	80002ec <__adddf3>
 8018228:	4642      	mov	r2, r8
 801822a:	e9cd 0100 	strd	r0, r1, [sp]
 801822e:	464b      	mov	r3, r9
 8018230:	4620      	mov	r0, r4
 8018232:	4629      	mov	r1, r5
 8018234:	f7e8 f858 	bl	80002e8 <__aeabi_dsub>
 8018238:	4602      	mov	r2, r0
 801823a:	460b      	mov	r3, r1
 801823c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018240:	f7e8 fc9a 	bl	8000b78 <__aeabi_dcmpgt>
 8018244:	2800      	cmp	r0, #0
 8018246:	f47f ae00 	bne.w	8017e4a <__ieee754_pow+0x3da>
 801824a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 801824e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8018252:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8018256:	fa43 fa0a 	asr.w	sl, r3, sl
 801825a:	44da      	add	sl, fp
 801825c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8018260:	489d      	ldr	r0, [pc, #628]	@ (80184d8 <__ieee754_pow+0xa68>)
 8018262:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8018266:	4108      	asrs	r0, r1
 8018268:	ea00 030a 	and.w	r3, r0, sl
 801826c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8018270:	f1c1 0114 	rsb	r1, r1, #20
 8018274:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8018278:	fa4a fa01 	asr.w	sl, sl, r1
 801827c:	f1bb 0f00 	cmp.w	fp, #0
 8018280:	4640      	mov	r0, r8
 8018282:	4649      	mov	r1, r9
 8018284:	f04f 0200 	mov.w	r2, #0
 8018288:	bfb8      	it	lt
 801828a:	f1ca 0a00 	rsblt	sl, sl, #0
 801828e:	f7e8 f82b 	bl	80002e8 <__aeabi_dsub>
 8018292:	4680      	mov	r8, r0
 8018294:	4689      	mov	r9, r1
 8018296:	4632      	mov	r2, r6
 8018298:	463b      	mov	r3, r7
 801829a:	4640      	mov	r0, r8
 801829c:	4649      	mov	r1, r9
 801829e:	f7e8 f825 	bl	80002ec <__adddf3>
 80182a2:	2400      	movs	r4, #0
 80182a4:	a37c      	add	r3, pc, #496	@ (adr r3, 8018498 <__ieee754_pow+0xa28>)
 80182a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80182aa:	4620      	mov	r0, r4
 80182ac:	460d      	mov	r5, r1
 80182ae:	f7e8 f9d3 	bl	8000658 <__aeabi_dmul>
 80182b2:	4642      	mov	r2, r8
 80182b4:	e9cd 0100 	strd	r0, r1, [sp]
 80182b8:	464b      	mov	r3, r9
 80182ba:	4620      	mov	r0, r4
 80182bc:	4629      	mov	r1, r5
 80182be:	f7e8 f813 	bl	80002e8 <__aeabi_dsub>
 80182c2:	4602      	mov	r2, r0
 80182c4:	460b      	mov	r3, r1
 80182c6:	4630      	mov	r0, r6
 80182c8:	4639      	mov	r1, r7
 80182ca:	f7e8 f80d 	bl	80002e8 <__aeabi_dsub>
 80182ce:	a374      	add	r3, pc, #464	@ (adr r3, 80184a0 <__ieee754_pow+0xa30>)
 80182d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80182d4:	f7e8 f9c0 	bl	8000658 <__aeabi_dmul>
 80182d8:	a373      	add	r3, pc, #460	@ (adr r3, 80184a8 <__ieee754_pow+0xa38>)
 80182da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80182de:	4680      	mov	r8, r0
 80182e0:	4689      	mov	r9, r1
 80182e2:	4620      	mov	r0, r4
 80182e4:	4629      	mov	r1, r5
 80182e6:	f7e8 f9b7 	bl	8000658 <__aeabi_dmul>
 80182ea:	4602      	mov	r2, r0
 80182ec:	460b      	mov	r3, r1
 80182ee:	4640      	mov	r0, r8
 80182f0:	4649      	mov	r1, r9
 80182f2:	f7e7 fffb 	bl	80002ec <__adddf3>
 80182f6:	4604      	mov	r4, r0
 80182f8:	460d      	mov	r5, r1
 80182fa:	4602      	mov	r2, r0
 80182fc:	460b      	mov	r3, r1
 80182fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018302:	f7e7 fff3 	bl	80002ec <__adddf3>
 8018306:	e9dd 2300 	ldrd	r2, r3, [sp]
 801830a:	4680      	mov	r8, r0
 801830c:	4689      	mov	r9, r1
 801830e:	f7e7 ffeb 	bl	80002e8 <__aeabi_dsub>
 8018312:	4602      	mov	r2, r0
 8018314:	460b      	mov	r3, r1
 8018316:	4620      	mov	r0, r4
 8018318:	4629      	mov	r1, r5
 801831a:	f7e7 ffe5 	bl	80002e8 <__aeabi_dsub>
 801831e:	4642      	mov	r2, r8
 8018320:	4606      	mov	r6, r0
 8018322:	460f      	mov	r7, r1
 8018324:	464b      	mov	r3, r9
 8018326:	4640      	mov	r0, r8
 8018328:	4649      	mov	r1, r9
 801832a:	f7e8 f995 	bl	8000658 <__aeabi_dmul>
 801832e:	a360      	add	r3, pc, #384	@ (adr r3, 80184b0 <__ieee754_pow+0xa40>)
 8018330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018334:	4604      	mov	r4, r0
 8018336:	460d      	mov	r5, r1
 8018338:	f7e8 f98e 	bl	8000658 <__aeabi_dmul>
 801833c:	a35e      	add	r3, pc, #376	@ (adr r3, 80184b8 <__ieee754_pow+0xa48>)
 801833e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018342:	f7e7 ffd1 	bl	80002e8 <__aeabi_dsub>
 8018346:	4622      	mov	r2, r4
 8018348:	462b      	mov	r3, r5
 801834a:	f7e8 f985 	bl	8000658 <__aeabi_dmul>
 801834e:	a35c      	add	r3, pc, #368	@ (adr r3, 80184c0 <__ieee754_pow+0xa50>)
 8018350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018354:	f7e7 ffca 	bl	80002ec <__adddf3>
 8018358:	4622      	mov	r2, r4
 801835a:	462b      	mov	r3, r5
 801835c:	f7e8 f97c 	bl	8000658 <__aeabi_dmul>
 8018360:	a359      	add	r3, pc, #356	@ (adr r3, 80184c8 <__ieee754_pow+0xa58>)
 8018362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018366:	f7e7 ffbf 	bl	80002e8 <__aeabi_dsub>
 801836a:	4622      	mov	r2, r4
 801836c:	462b      	mov	r3, r5
 801836e:	f7e8 f973 	bl	8000658 <__aeabi_dmul>
 8018372:	a357      	add	r3, pc, #348	@ (adr r3, 80184d0 <__ieee754_pow+0xa60>)
 8018374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018378:	f7e7 ffb8 	bl	80002ec <__adddf3>
 801837c:	4622      	mov	r2, r4
 801837e:	462b      	mov	r3, r5
 8018380:	f7e8 f96a 	bl	8000658 <__aeabi_dmul>
 8018384:	4602      	mov	r2, r0
 8018386:	460b      	mov	r3, r1
 8018388:	4640      	mov	r0, r8
 801838a:	4649      	mov	r1, r9
 801838c:	f7e7 ffac 	bl	80002e8 <__aeabi_dsub>
 8018390:	4604      	mov	r4, r0
 8018392:	460d      	mov	r5, r1
 8018394:	4602      	mov	r2, r0
 8018396:	460b      	mov	r3, r1
 8018398:	4640      	mov	r0, r8
 801839a:	4649      	mov	r1, r9
 801839c:	f7e8 f95c 	bl	8000658 <__aeabi_dmul>
 80183a0:	2200      	movs	r2, #0
 80183a2:	e9cd 0100 	strd	r0, r1, [sp]
 80183a6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80183aa:	4620      	mov	r0, r4
 80183ac:	4629      	mov	r1, r5
 80183ae:	f7e7 ff9b 	bl	80002e8 <__aeabi_dsub>
 80183b2:	4602      	mov	r2, r0
 80183b4:	460b      	mov	r3, r1
 80183b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80183ba:	f7e8 fa77 	bl	80008ac <__aeabi_ddiv>
 80183be:	4632      	mov	r2, r6
 80183c0:	4604      	mov	r4, r0
 80183c2:	460d      	mov	r5, r1
 80183c4:	463b      	mov	r3, r7
 80183c6:	4640      	mov	r0, r8
 80183c8:	4649      	mov	r1, r9
 80183ca:	f7e8 f945 	bl	8000658 <__aeabi_dmul>
 80183ce:	4632      	mov	r2, r6
 80183d0:	463b      	mov	r3, r7
 80183d2:	f7e7 ff8b 	bl	80002ec <__adddf3>
 80183d6:	4602      	mov	r2, r0
 80183d8:	460b      	mov	r3, r1
 80183da:	4620      	mov	r0, r4
 80183dc:	4629      	mov	r1, r5
 80183de:	f7e7 ff83 	bl	80002e8 <__aeabi_dsub>
 80183e2:	4642      	mov	r2, r8
 80183e4:	464b      	mov	r3, r9
 80183e6:	f7e7 ff7f 	bl	80002e8 <__aeabi_dsub>
 80183ea:	460b      	mov	r3, r1
 80183ec:	4602      	mov	r2, r0
 80183ee:	493b      	ldr	r1, [pc, #236]	@ (80184dc <__ieee754_pow+0xa6c>)
 80183f0:	2000      	movs	r0, #0
 80183f2:	f7e7 ff79 	bl	80002e8 <__aeabi_dsub>
 80183f6:	ec41 0b10 	vmov	d0, r0, r1
 80183fa:	ee10 3a90 	vmov	r3, s1
 80183fe:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8018402:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8018406:	da30      	bge.n	801846a <__ieee754_pow+0x9fa>
 8018408:	4650      	mov	r0, sl
 801840a:	f000 f87d 	bl	8018508 <scalbn>
 801840e:	ec51 0b10 	vmov	r0, r1, d0
 8018412:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018416:	f7ff bbd2 	b.w	8017bbe <__ieee754_pow+0x14e>
 801841a:	4c31      	ldr	r4, [pc, #196]	@ (80184e0 <__ieee754_pow+0xa70>)
 801841c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8018420:	42a3      	cmp	r3, r4
 8018422:	d91a      	bls.n	801845a <__ieee754_pow+0x9ea>
 8018424:	4b2f      	ldr	r3, [pc, #188]	@ (80184e4 <__ieee754_pow+0xa74>)
 8018426:	440b      	add	r3, r1
 8018428:	4303      	orrs	r3, r0
 801842a:	d009      	beq.n	8018440 <__ieee754_pow+0x9d0>
 801842c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018430:	2200      	movs	r2, #0
 8018432:	2300      	movs	r3, #0
 8018434:	f7e8 fb82 	bl	8000b3c <__aeabi_dcmplt>
 8018438:	3800      	subs	r0, #0
 801843a:	bf18      	it	ne
 801843c:	2001      	movne	r0, #1
 801843e:	e42b      	b.n	8017c98 <__ieee754_pow+0x228>
 8018440:	4642      	mov	r2, r8
 8018442:	464b      	mov	r3, r9
 8018444:	f7e7 ff50 	bl	80002e8 <__aeabi_dsub>
 8018448:	4632      	mov	r2, r6
 801844a:	463b      	mov	r3, r7
 801844c:	f7e8 fb8a 	bl	8000b64 <__aeabi_dcmpge>
 8018450:	2800      	cmp	r0, #0
 8018452:	d1eb      	bne.n	801842c <__ieee754_pow+0x9bc>
 8018454:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 80184f4 <__ieee754_pow+0xa84>
 8018458:	e6f7      	b.n	801824a <__ieee754_pow+0x7da>
 801845a:	469a      	mov	sl, r3
 801845c:	4b22      	ldr	r3, [pc, #136]	@ (80184e8 <__ieee754_pow+0xa78>)
 801845e:	459a      	cmp	sl, r3
 8018460:	f63f aef3 	bhi.w	801824a <__ieee754_pow+0x7da>
 8018464:	f8dd a010 	ldr.w	sl, [sp, #16]
 8018468:	e715      	b.n	8018296 <__ieee754_pow+0x826>
 801846a:	ec51 0b10 	vmov	r0, r1, d0
 801846e:	4619      	mov	r1, r3
 8018470:	e7cf      	b.n	8018412 <__ieee754_pow+0x9a2>
 8018472:	491a      	ldr	r1, [pc, #104]	@ (80184dc <__ieee754_pow+0xa6c>)
 8018474:	2000      	movs	r0, #0
 8018476:	f7ff bb18 	b.w	8017aaa <__ieee754_pow+0x3a>
 801847a:	2000      	movs	r0, #0
 801847c:	2100      	movs	r1, #0
 801847e:	f7ff bb14 	b.w	8017aaa <__ieee754_pow+0x3a>
 8018482:	4630      	mov	r0, r6
 8018484:	4639      	mov	r1, r7
 8018486:	f7ff bb10 	b.w	8017aaa <__ieee754_pow+0x3a>
 801848a:	460c      	mov	r4, r1
 801848c:	f7ff bb5e 	b.w	8017b4c <__ieee754_pow+0xdc>
 8018490:	2400      	movs	r4, #0
 8018492:	f7ff bb49 	b.w	8017b28 <__ieee754_pow+0xb8>
 8018496:	bf00      	nop
 8018498:	00000000 	.word	0x00000000
 801849c:	3fe62e43 	.word	0x3fe62e43
 80184a0:	fefa39ef 	.word	0xfefa39ef
 80184a4:	3fe62e42 	.word	0x3fe62e42
 80184a8:	0ca86c39 	.word	0x0ca86c39
 80184ac:	be205c61 	.word	0xbe205c61
 80184b0:	72bea4d0 	.word	0x72bea4d0
 80184b4:	3e663769 	.word	0x3e663769
 80184b8:	c5d26bf1 	.word	0xc5d26bf1
 80184bc:	3ebbbd41 	.word	0x3ebbbd41
 80184c0:	af25de2c 	.word	0xaf25de2c
 80184c4:	3f11566a 	.word	0x3f11566a
 80184c8:	16bebd93 	.word	0x16bebd93
 80184cc:	3f66c16c 	.word	0x3f66c16c
 80184d0:	5555553e 	.word	0x5555553e
 80184d4:	3fc55555 	.word	0x3fc55555
 80184d8:	fff00000 	.word	0xfff00000
 80184dc:	3ff00000 	.word	0x3ff00000
 80184e0:	4090cbff 	.word	0x4090cbff
 80184e4:	3f6f3400 	.word	0x3f6f3400
 80184e8:	3fe00000 	.word	0x3fe00000
 80184ec:	652b82fe 	.word	0x652b82fe
 80184f0:	3c971547 	.word	0x3c971547
 80184f4:	4090cc00 	.word	0x4090cc00

080184f8 <fabs>:
 80184f8:	ec51 0b10 	vmov	r0, r1, d0
 80184fc:	4602      	mov	r2, r0
 80184fe:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8018502:	ec43 2b10 	vmov	d0, r2, r3
 8018506:	4770      	bx	lr

08018508 <scalbn>:
 8018508:	b570      	push	{r4, r5, r6, lr}
 801850a:	ec55 4b10 	vmov	r4, r5, d0
 801850e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8018512:	4606      	mov	r6, r0
 8018514:	462b      	mov	r3, r5
 8018516:	b991      	cbnz	r1, 801853e <scalbn+0x36>
 8018518:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801851c:	4323      	orrs	r3, r4
 801851e:	d03d      	beq.n	801859c <scalbn+0x94>
 8018520:	4b35      	ldr	r3, [pc, #212]	@ (80185f8 <scalbn+0xf0>)
 8018522:	4620      	mov	r0, r4
 8018524:	4629      	mov	r1, r5
 8018526:	2200      	movs	r2, #0
 8018528:	f7e8 f896 	bl	8000658 <__aeabi_dmul>
 801852c:	4b33      	ldr	r3, [pc, #204]	@ (80185fc <scalbn+0xf4>)
 801852e:	429e      	cmp	r6, r3
 8018530:	4604      	mov	r4, r0
 8018532:	460d      	mov	r5, r1
 8018534:	da0f      	bge.n	8018556 <scalbn+0x4e>
 8018536:	a328      	add	r3, pc, #160	@ (adr r3, 80185d8 <scalbn+0xd0>)
 8018538:	e9d3 2300 	ldrd	r2, r3, [r3]
 801853c:	e01e      	b.n	801857c <scalbn+0x74>
 801853e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8018542:	4291      	cmp	r1, r2
 8018544:	d10b      	bne.n	801855e <scalbn+0x56>
 8018546:	4622      	mov	r2, r4
 8018548:	4620      	mov	r0, r4
 801854a:	4629      	mov	r1, r5
 801854c:	f7e7 fece 	bl	80002ec <__adddf3>
 8018550:	4604      	mov	r4, r0
 8018552:	460d      	mov	r5, r1
 8018554:	e022      	b.n	801859c <scalbn+0x94>
 8018556:	460b      	mov	r3, r1
 8018558:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801855c:	3936      	subs	r1, #54	@ 0x36
 801855e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8018562:	4296      	cmp	r6, r2
 8018564:	dd0d      	ble.n	8018582 <scalbn+0x7a>
 8018566:	2d00      	cmp	r5, #0
 8018568:	a11d      	add	r1, pc, #116	@ (adr r1, 80185e0 <scalbn+0xd8>)
 801856a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801856e:	da02      	bge.n	8018576 <scalbn+0x6e>
 8018570:	a11d      	add	r1, pc, #116	@ (adr r1, 80185e8 <scalbn+0xe0>)
 8018572:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018576:	a31a      	add	r3, pc, #104	@ (adr r3, 80185e0 <scalbn+0xd8>)
 8018578:	e9d3 2300 	ldrd	r2, r3, [r3]
 801857c:	f7e8 f86c 	bl	8000658 <__aeabi_dmul>
 8018580:	e7e6      	b.n	8018550 <scalbn+0x48>
 8018582:	1872      	adds	r2, r6, r1
 8018584:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8018588:	428a      	cmp	r2, r1
 801858a:	dcec      	bgt.n	8018566 <scalbn+0x5e>
 801858c:	2a00      	cmp	r2, #0
 801858e:	dd08      	ble.n	80185a2 <scalbn+0x9a>
 8018590:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8018594:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8018598:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801859c:	ec45 4b10 	vmov	d0, r4, r5
 80185a0:	bd70      	pop	{r4, r5, r6, pc}
 80185a2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80185a6:	da08      	bge.n	80185ba <scalbn+0xb2>
 80185a8:	2d00      	cmp	r5, #0
 80185aa:	a10b      	add	r1, pc, #44	@ (adr r1, 80185d8 <scalbn+0xd0>)
 80185ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80185b0:	dac1      	bge.n	8018536 <scalbn+0x2e>
 80185b2:	a10f      	add	r1, pc, #60	@ (adr r1, 80185f0 <scalbn+0xe8>)
 80185b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80185b8:	e7bd      	b.n	8018536 <scalbn+0x2e>
 80185ba:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80185be:	3236      	adds	r2, #54	@ 0x36
 80185c0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80185c4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80185c8:	4620      	mov	r0, r4
 80185ca:	4b0d      	ldr	r3, [pc, #52]	@ (8018600 <scalbn+0xf8>)
 80185cc:	4629      	mov	r1, r5
 80185ce:	2200      	movs	r2, #0
 80185d0:	e7d4      	b.n	801857c <scalbn+0x74>
 80185d2:	bf00      	nop
 80185d4:	f3af 8000 	nop.w
 80185d8:	c2f8f359 	.word	0xc2f8f359
 80185dc:	01a56e1f 	.word	0x01a56e1f
 80185e0:	8800759c 	.word	0x8800759c
 80185e4:	7e37e43c 	.word	0x7e37e43c
 80185e8:	8800759c 	.word	0x8800759c
 80185ec:	fe37e43c 	.word	0xfe37e43c
 80185f0:	c2f8f359 	.word	0xc2f8f359
 80185f4:	81a56e1f 	.word	0x81a56e1f
 80185f8:	43500000 	.word	0x43500000
 80185fc:	ffff3cb0 	.word	0xffff3cb0
 8018600:	3c900000 	.word	0x3c900000

08018604 <_close>:
 8018604:	4b02      	ldr	r3, [pc, #8]	@ (8018610 <_close+0xc>)
 8018606:	2258      	movs	r2, #88	@ 0x58
 8018608:	601a      	str	r2, [r3, #0]
 801860a:	f04f 30ff 	mov.w	r0, #4294967295
 801860e:	4770      	bx	lr
 8018610:	2000c7ac 	.word	0x2000c7ac

08018614 <_fstat>:
 8018614:	4b02      	ldr	r3, [pc, #8]	@ (8018620 <_fstat+0xc>)
 8018616:	2258      	movs	r2, #88	@ 0x58
 8018618:	601a      	str	r2, [r3, #0]
 801861a:	f04f 30ff 	mov.w	r0, #4294967295
 801861e:	4770      	bx	lr
 8018620:	2000c7ac 	.word	0x2000c7ac

08018624 <_getpid>:
 8018624:	4b02      	ldr	r3, [pc, #8]	@ (8018630 <_getpid+0xc>)
 8018626:	2258      	movs	r2, #88	@ 0x58
 8018628:	601a      	str	r2, [r3, #0]
 801862a:	f04f 30ff 	mov.w	r0, #4294967295
 801862e:	4770      	bx	lr
 8018630:	2000c7ac 	.word	0x2000c7ac

08018634 <_isatty>:
 8018634:	4b02      	ldr	r3, [pc, #8]	@ (8018640 <_isatty+0xc>)
 8018636:	2258      	movs	r2, #88	@ 0x58
 8018638:	601a      	str	r2, [r3, #0]
 801863a:	2000      	movs	r0, #0
 801863c:	4770      	bx	lr
 801863e:	bf00      	nop
 8018640:	2000c7ac 	.word	0x2000c7ac

08018644 <_kill>:
 8018644:	4b02      	ldr	r3, [pc, #8]	@ (8018650 <_kill+0xc>)
 8018646:	2258      	movs	r2, #88	@ 0x58
 8018648:	601a      	str	r2, [r3, #0]
 801864a:	f04f 30ff 	mov.w	r0, #4294967295
 801864e:	4770      	bx	lr
 8018650:	2000c7ac 	.word	0x2000c7ac

08018654 <_lseek>:
 8018654:	4b02      	ldr	r3, [pc, #8]	@ (8018660 <_lseek+0xc>)
 8018656:	2258      	movs	r2, #88	@ 0x58
 8018658:	601a      	str	r2, [r3, #0]
 801865a:	f04f 30ff 	mov.w	r0, #4294967295
 801865e:	4770      	bx	lr
 8018660:	2000c7ac 	.word	0x2000c7ac

08018664 <_read>:
 8018664:	4b02      	ldr	r3, [pc, #8]	@ (8018670 <_read+0xc>)
 8018666:	2258      	movs	r2, #88	@ 0x58
 8018668:	601a      	str	r2, [r3, #0]
 801866a:	f04f 30ff 	mov.w	r0, #4294967295
 801866e:	4770      	bx	lr
 8018670:	2000c7ac 	.word	0x2000c7ac

08018674 <_write>:
 8018674:	4b02      	ldr	r3, [pc, #8]	@ (8018680 <_write+0xc>)
 8018676:	2258      	movs	r2, #88	@ 0x58
 8018678:	601a      	str	r2, [r3, #0]
 801867a:	f04f 30ff 	mov.w	r0, #4294967295
 801867e:	4770      	bx	lr
 8018680:	2000c7ac 	.word	0x2000c7ac

08018684 <_exit>:
 8018684:	e7fe      	b.n	8018684 <_exit>
	...

08018688 <_init>:
 8018688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801868a:	bf00      	nop
 801868c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801868e:	bc08      	pop	{r3}
 8018690:	469e      	mov	lr, r3
 8018692:	4770      	bx	lr

08018694 <_fini>:
 8018694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018696:	bf00      	nop
 8018698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801869a:	bc08      	pop	{r3}
 801869c:	469e      	mov	lr, r3
 801869e:	4770      	bx	lr
