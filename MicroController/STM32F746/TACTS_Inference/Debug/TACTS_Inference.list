
TACTS_Inference.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018540  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000454c0  08018720  08018720  00019720  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0805dbe0  0805dbe0  00060608  2**0
                  CONTENTS
  4 .ARM          00000008  0805dbe0  0805dbe0  0005ebe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0805dbe8  0805dbe8  00060608  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0805dbe8  0805dbe8  0005ebe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0805dbec  0805dbec  0005ebec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001608  20000000  0805dbf0  0005f000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b1a4  20001620  0805f1f8  00060620  2**5
                  ALLOC
 10 ._user_heap_stack 00001004  2000c7c4  0805f1f8  000607c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00060608  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002577f  00000000  00000000  00060638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b7f  00000000  00000000  00085db7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001960  00000000  00000000  0008a938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013a2  00000000  00000000  0008c298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c349  00000000  00000000  0008d63a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024c4f  00000000  00000000  000b9983  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00106152  00000000  00000000  000de5d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000093  00000000  00000000  001e4724  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000084d0  00000000  00000000  001e47b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  001ecc88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20001620 	.word	0x20001620
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080186f8 	.word	0x080186f8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20001624 	.word	0x20001624
 800020c:	080186f8 	.word	0x080186f8

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b9a0 	b.w	8001040 <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f83c 	bl	8000d84 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_d2lz>:
 8000d18:	b538      	push	{r3, r4, r5, lr}
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	4604      	mov	r4, r0
 8000d20:	460d      	mov	r5, r1
 8000d22:	f7ff ff0b 	bl	8000b3c <__aeabi_dcmplt>
 8000d26:	b928      	cbnz	r0, 8000d34 <__aeabi_d2lz+0x1c>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	4629      	mov	r1, r5
 8000d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d30:	f000 b80a 	b.w	8000d48 <__aeabi_d2ulz>
 8000d34:	4620      	mov	r0, r4
 8000d36:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d3a:	f000 f805 	bl	8000d48 <__aeabi_d2ulz>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	bd38      	pop	{r3, r4, r5, pc}
 8000d46:	bf00      	nop

08000d48 <__aeabi_d2ulz>:
 8000d48:	b5d0      	push	{r4, r6, r7, lr}
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d7c <__aeabi_d2ulz+0x34>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4606      	mov	r6, r0
 8000d50:	460f      	mov	r7, r1
 8000d52:	f7ff fc81 	bl	8000658 <__aeabi_dmul>
 8000d56:	f7ff ff57 	bl	8000c08 <__aeabi_d2uiz>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	f7ff fc02 	bl	8000564 <__aeabi_ui2d>
 8000d60:	4b07      	ldr	r3, [pc, #28]	@ (8000d80 <__aeabi_d2ulz+0x38>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f7ff fc78 	bl	8000658 <__aeabi_dmul>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	4639      	mov	r1, r7
 8000d70:	f7ff faba 	bl	80002e8 <__aeabi_dsub>
 8000d74:	f7ff ff48 	bl	8000c08 <__aeabi_d2uiz>
 8000d78:	4621      	mov	r1, r4
 8000d7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d7c:	3df00000 	.word	0x3df00000
 8000d80:	41f00000 	.word	0x41f00000

08000d84 <__udivmoddi4>:
 8000d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d88:	9d08      	ldr	r5, [sp, #32]
 8000d8a:	460c      	mov	r4, r1
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d14e      	bne.n	8000e2e <__udivmoddi4+0xaa>
 8000d90:	4694      	mov	ip, r2
 8000d92:	458c      	cmp	ip, r1
 8000d94:	4686      	mov	lr, r0
 8000d96:	fab2 f282 	clz	r2, r2
 8000d9a:	d962      	bls.n	8000e62 <__udivmoddi4+0xde>
 8000d9c:	b14a      	cbz	r2, 8000db2 <__udivmoddi4+0x2e>
 8000d9e:	f1c2 0320 	rsb	r3, r2, #32
 8000da2:	4091      	lsls	r1, r2
 8000da4:	fa20 f303 	lsr.w	r3, r0, r3
 8000da8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dac:	4319      	orrs	r1, r3
 8000dae:	fa00 fe02 	lsl.w	lr, r0, r2
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f f68c 	uxth.w	r6, ip
 8000dba:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dc2:	fb07 1114 	mls	r1, r7, r4, r1
 8000dc6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dca:	fb04 f106 	mul.w	r1, r4, r6
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	d90a      	bls.n	8000de8 <__udivmoddi4+0x64>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dda:	f080 8112 	bcs.w	8001002 <__udivmoddi4+0x27e>
 8000dde:	4299      	cmp	r1, r3
 8000de0:	f240 810f 	bls.w	8001002 <__udivmoddi4+0x27e>
 8000de4:	3c02      	subs	r4, #2
 8000de6:	4463      	add	r3, ip
 8000de8:	1a59      	subs	r1, r3, r1
 8000dea:	fa1f f38e 	uxth.w	r3, lr
 8000dee:	fbb1 f0f7 	udiv	r0, r1, r7
 8000df2:	fb07 1110 	mls	r1, r7, r0, r1
 8000df6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dfa:	fb00 f606 	mul.w	r6, r0, r6
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	d90a      	bls.n	8000e18 <__udivmoddi4+0x94>
 8000e02:	eb1c 0303 	adds.w	r3, ip, r3
 8000e06:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e0a:	f080 80fc 	bcs.w	8001006 <__udivmoddi4+0x282>
 8000e0e:	429e      	cmp	r6, r3
 8000e10:	f240 80f9 	bls.w	8001006 <__udivmoddi4+0x282>
 8000e14:	4463      	add	r3, ip
 8000e16:	3802      	subs	r0, #2
 8000e18:	1b9b      	subs	r3, r3, r6
 8000e1a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e1e:	2100      	movs	r1, #0
 8000e20:	b11d      	cbz	r5, 8000e2a <__udivmoddi4+0xa6>
 8000e22:	40d3      	lsrs	r3, r2
 8000e24:	2200      	movs	r2, #0
 8000e26:	e9c5 3200 	strd	r3, r2, [r5]
 8000e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d905      	bls.n	8000e3e <__udivmoddi4+0xba>
 8000e32:	b10d      	cbz	r5, 8000e38 <__udivmoddi4+0xb4>
 8000e34:	e9c5 0100 	strd	r0, r1, [r5]
 8000e38:	2100      	movs	r1, #0
 8000e3a:	4608      	mov	r0, r1
 8000e3c:	e7f5      	b.n	8000e2a <__udivmoddi4+0xa6>
 8000e3e:	fab3 f183 	clz	r1, r3
 8000e42:	2900      	cmp	r1, #0
 8000e44:	d146      	bne.n	8000ed4 <__udivmoddi4+0x150>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d302      	bcc.n	8000e50 <__udivmoddi4+0xcc>
 8000e4a:	4290      	cmp	r0, r2
 8000e4c:	f0c0 80f0 	bcc.w	8001030 <__udivmoddi4+0x2ac>
 8000e50:	1a86      	subs	r6, r0, r2
 8000e52:	eb64 0303 	sbc.w	r3, r4, r3
 8000e56:	2001      	movs	r0, #1
 8000e58:	2d00      	cmp	r5, #0
 8000e5a:	d0e6      	beq.n	8000e2a <__udivmoddi4+0xa6>
 8000e5c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e60:	e7e3      	b.n	8000e2a <__udivmoddi4+0xa6>
 8000e62:	2a00      	cmp	r2, #0
 8000e64:	f040 8090 	bne.w	8000f88 <__udivmoddi4+0x204>
 8000e68:	eba1 040c 	sub.w	r4, r1, ip
 8000e6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e70:	fa1f f78c 	uxth.w	r7, ip
 8000e74:	2101      	movs	r1, #1
 8000e76:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e7a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e7e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e82:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e86:	fb07 f006 	mul.w	r0, r7, r6
 8000e8a:	4298      	cmp	r0, r3
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x11c>
 8000e8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e92:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e96:	d202      	bcs.n	8000e9e <__udivmoddi4+0x11a>
 8000e98:	4298      	cmp	r0, r3
 8000e9a:	f200 80cd 	bhi.w	8001038 <__udivmoddi4+0x2b4>
 8000e9e:	4626      	mov	r6, r4
 8000ea0:	1a1c      	subs	r4, r3, r0
 8000ea2:	fa1f f38e 	uxth.w	r3, lr
 8000ea6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000eaa:	fb08 4410 	mls	r4, r8, r0, r4
 8000eae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000eb2:	fb00 f707 	mul.w	r7, r0, r7
 8000eb6:	429f      	cmp	r7, r3
 8000eb8:	d908      	bls.n	8000ecc <__udivmoddi4+0x148>
 8000eba:	eb1c 0303 	adds.w	r3, ip, r3
 8000ebe:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ec2:	d202      	bcs.n	8000eca <__udivmoddi4+0x146>
 8000ec4:	429f      	cmp	r7, r3
 8000ec6:	f200 80b0 	bhi.w	800102a <__udivmoddi4+0x2a6>
 8000eca:	4620      	mov	r0, r4
 8000ecc:	1bdb      	subs	r3, r3, r7
 8000ece:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ed2:	e7a5      	b.n	8000e20 <__udivmoddi4+0x9c>
 8000ed4:	f1c1 0620 	rsb	r6, r1, #32
 8000ed8:	408b      	lsls	r3, r1
 8000eda:	fa22 f706 	lsr.w	r7, r2, r6
 8000ede:	431f      	orrs	r7, r3
 8000ee0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ee4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ee8:	ea43 030c 	orr.w	r3, r3, ip
 8000eec:	40f4      	lsrs	r4, r6
 8000eee:	fa00 f801 	lsl.w	r8, r0, r1
 8000ef2:	0c38      	lsrs	r0, r7, #16
 8000ef4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ef8:	fbb4 fef0 	udiv	lr, r4, r0
 8000efc:	fa1f fc87 	uxth.w	ip, r7
 8000f00:	fb00 441e 	mls	r4, r0, lr, r4
 8000f04:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f08:	fb0e f90c 	mul.w	r9, lr, ip
 8000f0c:	45a1      	cmp	r9, r4
 8000f0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f12:	d90a      	bls.n	8000f2a <__udivmoddi4+0x1a6>
 8000f14:	193c      	adds	r4, r7, r4
 8000f16:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f1a:	f080 8084 	bcs.w	8001026 <__udivmoddi4+0x2a2>
 8000f1e:	45a1      	cmp	r9, r4
 8000f20:	f240 8081 	bls.w	8001026 <__udivmoddi4+0x2a2>
 8000f24:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f28:	443c      	add	r4, r7
 8000f2a:	eba4 0409 	sub.w	r4, r4, r9
 8000f2e:	fa1f f983 	uxth.w	r9, r3
 8000f32:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f36:	fb00 4413 	mls	r4, r0, r3, r4
 8000f3a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f3e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f42:	45a4      	cmp	ip, r4
 8000f44:	d907      	bls.n	8000f56 <__udivmoddi4+0x1d2>
 8000f46:	193c      	adds	r4, r7, r4
 8000f48:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f4c:	d267      	bcs.n	800101e <__udivmoddi4+0x29a>
 8000f4e:	45a4      	cmp	ip, r4
 8000f50:	d965      	bls.n	800101e <__udivmoddi4+0x29a>
 8000f52:	3b02      	subs	r3, #2
 8000f54:	443c      	add	r4, r7
 8000f56:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f5a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f5e:	eba4 040c 	sub.w	r4, r4, ip
 8000f62:	429c      	cmp	r4, r3
 8000f64:	46ce      	mov	lr, r9
 8000f66:	469c      	mov	ip, r3
 8000f68:	d351      	bcc.n	800100e <__udivmoddi4+0x28a>
 8000f6a:	d04e      	beq.n	800100a <__udivmoddi4+0x286>
 8000f6c:	b155      	cbz	r5, 8000f84 <__udivmoddi4+0x200>
 8000f6e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f72:	eb64 040c 	sbc.w	r4, r4, ip
 8000f76:	fa04 f606 	lsl.w	r6, r4, r6
 8000f7a:	40cb      	lsrs	r3, r1
 8000f7c:	431e      	orrs	r6, r3
 8000f7e:	40cc      	lsrs	r4, r1
 8000f80:	e9c5 6400 	strd	r6, r4, [r5]
 8000f84:	2100      	movs	r1, #0
 8000f86:	e750      	b.n	8000e2a <__udivmoddi4+0xa6>
 8000f88:	f1c2 0320 	rsb	r3, r2, #32
 8000f8c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f90:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f94:	fa24 f303 	lsr.w	r3, r4, r3
 8000f98:	4094      	lsls	r4, r2
 8000f9a:	430c      	orrs	r4, r1
 8000f9c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000fa0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000fa4:	fa1f f78c 	uxth.w	r7, ip
 8000fa8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000fac:	fb08 3110 	mls	r1, r8, r0, r3
 8000fb0:	0c23      	lsrs	r3, r4, #16
 8000fb2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fb6:	fb00 f107 	mul.w	r1, r0, r7
 8000fba:	4299      	cmp	r1, r3
 8000fbc:	d908      	bls.n	8000fd0 <__udivmoddi4+0x24c>
 8000fbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000fc2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fc6:	d22c      	bcs.n	8001022 <__udivmoddi4+0x29e>
 8000fc8:	4299      	cmp	r1, r3
 8000fca:	d92a      	bls.n	8001022 <__udivmoddi4+0x29e>
 8000fcc:	3802      	subs	r0, #2
 8000fce:	4463      	add	r3, ip
 8000fd0:	1a5b      	subs	r3, r3, r1
 8000fd2:	b2a4      	uxth	r4, r4
 8000fd4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fd8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fdc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fe0:	fb01 f307 	mul.w	r3, r1, r7
 8000fe4:	42a3      	cmp	r3, r4
 8000fe6:	d908      	bls.n	8000ffa <__udivmoddi4+0x276>
 8000fe8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fec:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ff0:	d213      	bcs.n	800101a <__udivmoddi4+0x296>
 8000ff2:	42a3      	cmp	r3, r4
 8000ff4:	d911      	bls.n	800101a <__udivmoddi4+0x296>
 8000ff6:	3902      	subs	r1, #2
 8000ff8:	4464      	add	r4, ip
 8000ffa:	1ae4      	subs	r4, r4, r3
 8000ffc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001000:	e739      	b.n	8000e76 <__udivmoddi4+0xf2>
 8001002:	4604      	mov	r4, r0
 8001004:	e6f0      	b.n	8000de8 <__udivmoddi4+0x64>
 8001006:	4608      	mov	r0, r1
 8001008:	e706      	b.n	8000e18 <__udivmoddi4+0x94>
 800100a:	45c8      	cmp	r8, r9
 800100c:	d2ae      	bcs.n	8000f6c <__udivmoddi4+0x1e8>
 800100e:	ebb9 0e02 	subs.w	lr, r9, r2
 8001012:	eb63 0c07 	sbc.w	ip, r3, r7
 8001016:	3801      	subs	r0, #1
 8001018:	e7a8      	b.n	8000f6c <__udivmoddi4+0x1e8>
 800101a:	4631      	mov	r1, r6
 800101c:	e7ed      	b.n	8000ffa <__udivmoddi4+0x276>
 800101e:	4603      	mov	r3, r0
 8001020:	e799      	b.n	8000f56 <__udivmoddi4+0x1d2>
 8001022:	4630      	mov	r0, r6
 8001024:	e7d4      	b.n	8000fd0 <__udivmoddi4+0x24c>
 8001026:	46d6      	mov	lr, sl
 8001028:	e77f      	b.n	8000f2a <__udivmoddi4+0x1a6>
 800102a:	4463      	add	r3, ip
 800102c:	3802      	subs	r0, #2
 800102e:	e74d      	b.n	8000ecc <__udivmoddi4+0x148>
 8001030:	4606      	mov	r6, r0
 8001032:	4623      	mov	r3, r4
 8001034:	4608      	mov	r0, r1
 8001036:	e70f      	b.n	8000e58 <__udivmoddi4+0xd4>
 8001038:	3e02      	subs	r6, #2
 800103a:	4463      	add	r3, ip
 800103c:	e730      	b.n	8000ea0 <__udivmoddi4+0x11c>
 800103e:	bf00      	nop

08001040 <__aeabi_idiv0>:
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop

08001044 <aiInit>:
#endif

ai_buffer *ai_input;
ai_buffer *ai_output;

int aiInit(void) {
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
    ai_error err;
    const ai_handle acts[] = { activations };
 800104a:	4b17      	ldr	r3, [pc, #92]	@ (80010a8 <aiInit+0x64>)
 800104c:	603b      	str	r3, [r7, #0]
	#if  NUM_SENSOR == 24
    err = ai_twoline_create_and_init(&allLine, acts, NULL);
	#elif  NUM_SENSOR == 36
    err = ai_threeline_create_and_init(&allLine, acts, NULL);
	#elif  NUM_SENSOR == 48
    err = ai_fourline_create_and_init(&allLine, acts, NULL);
 800104e:	463b      	mov	r3, r7
 8001050:	2200      	movs	r2, #0
 8001052:	4619      	mov	r1, r3
 8001054:	4815      	ldr	r0, [pc, #84]	@ (80010ac <aiInit+0x68>)
 8001056:	f00e f9b9 	bl	800f3cc <ai_fourline_create_and_init>
 800105a:	4603      	mov	r3, r0
 800105c:	607b      	str	r3, [r7, #4]
	#endif
    if (err.type != AI_ERROR_NONE) {
 800105e:	793b      	ldrb	r3, [r7, #4]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d00a      	beq.n	800107a <aiInit+0x36>
        HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "aiInit Error \n"), 100);
 8001064:	4912      	ldr	r1, [pc, #72]	@ (80010b0 <aiInit+0x6c>)
 8001066:	4813      	ldr	r0, [pc, #76]	@ (80010b4 <aiInit+0x70>)
 8001068:	f012 fb94 	bl	8013794 <siprintf>
 800106c:	4603      	mov	r3, r0
 800106e:	b29a      	uxth	r2, r3
 8001070:	2364      	movs	r3, #100	@ 0x64
 8001072:	4910      	ldr	r1, [pc, #64]	@ (80010b4 <aiInit+0x70>)
 8001074:	4810      	ldr	r0, [pc, #64]	@ (80010b8 <aiInit+0x74>)
 8001076:	f007 fe17 	bl	8008ca8 <HAL_UART_Transmit>
    ai_output = ai_twoline_outputs_get(allLine, NULL);
#elif NUM_SENSOR == 36
    ai_input = ai_threeline_inputs_get(allLine, NULL);
    ai_output= ai_threeline_outputs_get(allLine, NULL);
#elif NUM_SENSOR == 48
    ai_input = ai_fourline_inputs_get(allLine, NULL);
 800107a:	4b0c      	ldr	r3, [pc, #48]	@ (80010ac <aiInit+0x68>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	2100      	movs	r1, #0
 8001080:	4618      	mov	r0, r3
 8001082:	f00e fa17 	bl	800f4b4 <ai_fourline_inputs_get>
 8001086:	4603      	mov	r3, r0
 8001088:	4a0c      	ldr	r2, [pc, #48]	@ (80010bc <aiInit+0x78>)
 800108a:	6013      	str	r3, [r2, #0]
    ai_output = ai_fourline_outputs_get(allLine, NULL);
 800108c:	4b07      	ldr	r3, [pc, #28]	@ (80010ac <aiInit+0x68>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2100      	movs	r1, #0
 8001092:	4618      	mov	r0, r3
 8001094:	f00e fa28 	bl	800f4e8 <ai_fourline_outputs_get>
 8001098:	4603      	mov	r3, r0
 800109a:	4a09      	ldr	r2, [pc, #36]	@ (80010c0 <aiInit+0x7c>)
 800109c:	6013      	str	r3, [r2, #0]
#else
    HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "Invalid NUM_SENSOR \n"), 100);
    return -1;
#endif
    return 0;
 800109e:	2300      	movs	r3, #0
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	20001640 	.word	0x20001640
 80010ac:	2000163c 	.word	0x2000163c
 80010b0:	08018720 	.word	0x08018720
 80010b4:	20007850 	.word	0x20007850
 80010b8:	200077c8 	.word	0x200077c8
 80010bc:	20002530 	.word	0x20002530
 80010c0:	20002534 	.word	0x20002534

080010c4 <aiRun>:


int aiRun(const ai_float *in_data, ai_float *out_data) {
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
    ai_i32 n_batch;

    // 1 - Update IO handlers with the data payload
    ai_input[0].data = AI_HANDLE_PTR(in_data);
 80010ce:	4b14      	ldr	r3, [pc, #80]	@ (8001120 <aiRun+0x5c>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	605a      	str	r2, [r3, #4]
    ai_output[0].data = AI_HANDLE_PTR(out_data);
 80010d6:	4b13      	ldr	r3, [pc, #76]	@ (8001124 <aiRun+0x60>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	683a      	ldr	r2, [r7, #0]
 80010dc:	605a      	str	r2, [r3, #4]
#if NUM_SENSOR == 24
    n_batch = ai_twoline_run(allLine, &ai_input[0], &ai_output[0]);
#elif NUM_SENSOR == 36
    n_batch = ai_threeline_run(allLine, &ai_input[0], &ai_output[0]);
#elif NUM_SENSOR == 48
    n_batch = ai_fourline_run(allLine, &ai_input[0], &ai_output[0]);
 80010de:	4b12      	ldr	r3, [pc, #72]	@ (8001128 <aiRun+0x64>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a0f      	ldr	r2, [pc, #60]	@ (8001120 <aiRun+0x5c>)
 80010e4:	6811      	ldr	r1, [r2, #0]
 80010e6:	4a0f      	ldr	r2, [pc, #60]	@ (8001124 <aiRun+0x60>)
 80010e8:	6812      	ldr	r2, [r2, #0]
 80010ea:	4618      	mov	r0, r3
 80010ec:	f00e fa52 	bl	800f594 <ai_fourline_run>
 80010f0:	60f8      	str	r0, [r7, #12]
#else
    HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "Invalid NUM_SENSOR \n"), 100);
    return -1;
#endif
    if (n_batch != 1) {
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d00d      	beq.n	8001114 <aiRun+0x50>
        HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "aiRun Error \n"), 100);
 80010f8:	490c      	ldr	r1, [pc, #48]	@ (800112c <aiRun+0x68>)
 80010fa:	480d      	ldr	r0, [pc, #52]	@ (8001130 <aiRun+0x6c>)
 80010fc:	f012 fb4a 	bl	8013794 <siprintf>
 8001100:	4603      	mov	r3, r0
 8001102:	b29a      	uxth	r2, r3
 8001104:	2364      	movs	r3, #100	@ 0x64
 8001106:	490a      	ldr	r1, [pc, #40]	@ (8001130 <aiRun+0x6c>)
 8001108:	480a      	ldr	r0, [pc, #40]	@ (8001134 <aiRun+0x70>)
 800110a:	f007 fdcd 	bl	8008ca8 <HAL_UART_Transmit>
        return -1;
 800110e:	f04f 33ff 	mov.w	r3, #4294967295
 8001112:	e000      	b.n	8001116 <aiRun+0x52>
    };
    return 0;
 8001114:	2300      	movs	r3, #0
}
 8001116:	4618      	mov	r0, r3
 8001118:	3710      	adds	r7, #16
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	20002530 	.word	0x20002530
 8001124:	20002534 	.word	0x20002534
 8001128:	2000163c 	.word	0x2000163c
 800112c:	08018730 	.word	0x08018730
 8001130:	20007850 	.word	0x20007850
 8001134:	200077c8 	.word	0x200077c8

08001138 <CalculateStats>:
float sensorValues[NUM_SENSOR][NUM_READINGS-throwSomenumber] = {0};
float sensorAverages[NUM_SENSOR] = {0};
float sensorStdDevs[NUM_SENSOR] = {0};
int readingCount[NUM_SENSOR] = {0};

void CalculateStats(int sensorIndex) {
 8001138:	b5b0      	push	{r4, r5, r7, lr}
 800113a:	b088      	sub	sp, #32
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
    float sum = 0;
 8001140:	f04f 0300 	mov.w	r3, #0
 8001144:	61fb      	str	r3, [r7, #28]
    float mean = 0;
 8001146:	f04f 0300 	mov.w	r3, #0
 800114a:	60fb      	str	r3, [r7, #12]
    float stdDevSum = 0;
 800114c:	f04f 0300 	mov.w	r3, #0
 8001150:	61bb      	str	r3, [r7, #24]
    int count = readingCount[sensorIndex];
 8001152:	4a49      	ldr	r2, [pc, #292]	@ (8001278 <CalculateStats+0x140>)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800115a:	60bb      	str	r3, [r7, #8]

    // 평균 계산
    for (int i = 0; i < count; i++) { sum += sensorValues[sensorIndex][i];}
 800115c:	2300      	movs	r3, #0
 800115e:	617b      	str	r3, [r7, #20]
 8001160:	e013      	b.n	800118a <CalculateStats+0x52>
 8001162:	4946      	ldr	r1, [pc, #280]	@ (800127c <CalculateStats+0x144>)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2264      	movs	r2, #100	@ 0x64
 8001168:	fb03 f202 	mul.w	r2, r3, r2
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	4413      	add	r3, r2
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	440b      	add	r3, r1
 8001174:	edd3 7a00 	vldr	s15, [r3]
 8001178:	ed97 7a07 	vldr	s14, [r7, #28]
 800117c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001180:	edc7 7a07 	vstr	s15, [r7, #28]
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	3301      	adds	r3, #1
 8001188:	617b      	str	r3, [r7, #20]
 800118a:	697a      	ldr	r2, [r7, #20]
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	429a      	cmp	r2, r3
 8001190:	dbe7      	blt.n	8001162 <CalculateStats+0x2a>
    mean = sum / count;
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	ee07 3a90 	vmov	s15, r3
 8001198:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800119c:	edd7 6a07 	vldr	s13, [r7, #28]
 80011a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011a4:	edc7 7a03 	vstr	s15, [r7, #12]
    sensorAverages[sensorIndex] = mean;
 80011a8:	4a35      	ldr	r2, [pc, #212]	@ (8001280 <CalculateStats+0x148>)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	4413      	add	r3, r2
 80011b0:	68fa      	ldr	r2, [r7, #12]
 80011b2:	601a      	str	r2, [r3, #0]
    // 표준편차 계산
    for (int i = 0; i < count; i++) { stdDevSum += pow(sensorValues[sensorIndex][i] - mean, 2);}
 80011b4:	2300      	movs	r3, #0
 80011b6:	613b      	str	r3, [r7, #16]
 80011b8:	e030      	b.n	800121c <CalculateStats+0xe4>
 80011ba:	4930      	ldr	r1, [pc, #192]	@ (800127c <CalculateStats+0x144>)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2264      	movs	r2, #100	@ 0x64
 80011c0:	fb03 f202 	mul.w	r2, r3, r2
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	4413      	add	r3, r2
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	440b      	add	r3, r1
 80011cc:	ed93 7a00 	vldr	s14, [r3]
 80011d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80011d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011d8:	ee17 0a90 	vmov	r0, s15
 80011dc:	f7ff f9e4 	bl	80005a8 <__aeabi_f2d>
 80011e0:	4602      	mov	r2, r0
 80011e2:	460b      	mov	r3, r1
 80011e4:	ed9f 1b22 	vldr	d1, [pc, #136]	@ 8001270 <CalculateStats+0x138>
 80011e8:	ec43 2b10 	vmov	d0, r2, r3
 80011ec:	f016 fab8 	bl	8017760 <pow>
 80011f0:	ec55 4b10 	vmov	r4, r5, d0
 80011f4:	69b8      	ldr	r0, [r7, #24]
 80011f6:	f7ff f9d7 	bl	80005a8 <__aeabi_f2d>
 80011fa:	4602      	mov	r2, r0
 80011fc:	460b      	mov	r3, r1
 80011fe:	4620      	mov	r0, r4
 8001200:	4629      	mov	r1, r5
 8001202:	f7ff f873 	bl	80002ec <__adddf3>
 8001206:	4602      	mov	r2, r0
 8001208:	460b      	mov	r3, r1
 800120a:	4610      	mov	r0, r2
 800120c:	4619      	mov	r1, r3
 800120e:	f7ff fd1b 	bl	8000c48 <__aeabi_d2f>
 8001212:	4603      	mov	r3, r0
 8001214:	61bb      	str	r3, [r7, #24]
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	3301      	adds	r3, #1
 800121a:	613b      	str	r3, [r7, #16]
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	429a      	cmp	r2, r3
 8001222:	dbca      	blt.n	80011ba <CalculateStats+0x82>
    sensorStdDevs[sensorIndex] = sqrt(stdDevSum / count);
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	ee07 3a90 	vmov	s15, r3
 800122a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800122e:	ed97 7a06 	vldr	s14, [r7, #24]
 8001232:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001236:	ee16 0a90 	vmov	r0, s13
 800123a:	f7ff f9b5 	bl	80005a8 <__aeabi_f2d>
 800123e:	4602      	mov	r2, r0
 8001240:	460b      	mov	r3, r1
 8001242:	ec43 2b10 	vmov	d0, r2, r3
 8001246:	f016 fafb 	bl	8017840 <sqrt>
 800124a:	ec53 2b10 	vmov	r2, r3, d0
 800124e:	4610      	mov	r0, r2
 8001250:	4619      	mov	r1, r3
 8001252:	f7ff fcf9 	bl	8000c48 <__aeabi_d2f>
 8001256:	4602      	mov	r2, r0
 8001258:	490a      	ldr	r1, [pc, #40]	@ (8001284 <CalculateStats+0x14c>)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	440b      	add	r3, r1
 8001260:	601a      	str	r2, [r3, #0]
}
 8001262:	bf00      	nop
 8001264:	3720      	adds	r7, #32
 8001266:	46bd      	mov	sp, r7
 8001268:	bdb0      	pop	{r4, r5, r7, pc}
 800126a:	bf00      	nop
 800126c:	f3af 8000 	nop.w
 8001270:	00000000 	.word	0x00000000
 8001274:	40000000 	.word	0x40000000
 8001278:	200071b8 	.word	0x200071b8
 800127c:	20002538 	.word	0x20002538
 8001280:	20007038 	.word	0x20007038
 8001284:	200070f8 	.word	0x200070f8

08001288 <TransmitStats>:

// 평균과 표준편차를 UART로 전송하는 함수
void TransmitStats() {
 8001288:	b5b0      	push	{r4, r5, r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af04      	add	r7, sp, #16
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "Sensor Avg Std\r\n"), 100);
 800128e:	4920      	ldr	r1, [pc, #128]	@ (8001310 <TransmitStats+0x88>)
 8001290:	4820      	ldr	r0, [pc, #128]	@ (8001314 <TransmitStats+0x8c>)
 8001292:	f012 fa7f 	bl	8013794 <siprintf>
 8001296:	4603      	mov	r3, r0
 8001298:	b29a      	uxth	r2, r3
 800129a:	2364      	movs	r3, #100	@ 0x64
 800129c:	491d      	ldr	r1, [pc, #116]	@ (8001314 <TransmitStats+0x8c>)
 800129e:	481e      	ldr	r0, [pc, #120]	@ (8001318 <TransmitStats+0x90>)
 80012a0:	f007 fd02 	bl	8008ca8 <HAL_UART_Transmit>
    for (int i = 0; i < NUM_SENSOR; i++) {
 80012a4:	2300      	movs	r3, #0
 80012a6:	607b      	str	r3, [r7, #4]
 80012a8:	e029      	b.n	80012fe <TransmitStats+0x76>
        CalculateStats(i); // 통계 계산
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f7ff ff44 	bl	8001138 <CalculateStats>
    	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "%d %.2f %.2f\r\n", i, sensorAverages[i], sensorStdDevs[i]), 100);
 80012b0:	4a1a      	ldr	r2, [pc, #104]	@ (800131c <TransmitStats+0x94>)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	4413      	add	r3, r2
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff f974 	bl	80005a8 <__aeabi_f2d>
 80012c0:	4604      	mov	r4, r0
 80012c2:	460d      	mov	r5, r1
 80012c4:	4a16      	ldr	r2, [pc, #88]	@ (8001320 <TransmitStats+0x98>)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	4413      	add	r3, r2
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff f96a 	bl	80005a8 <__aeabi_f2d>
 80012d4:	4602      	mov	r2, r0
 80012d6:	460b      	mov	r3, r1
 80012d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80012dc:	e9cd 4500 	strd	r4, r5, [sp]
 80012e0:	687a      	ldr	r2, [r7, #4]
 80012e2:	4910      	ldr	r1, [pc, #64]	@ (8001324 <TransmitStats+0x9c>)
 80012e4:	480b      	ldr	r0, [pc, #44]	@ (8001314 <TransmitStats+0x8c>)
 80012e6:	f012 fa55 	bl	8013794 <siprintf>
 80012ea:	4603      	mov	r3, r0
 80012ec:	b29a      	uxth	r2, r3
 80012ee:	2364      	movs	r3, #100	@ 0x64
 80012f0:	4908      	ldr	r1, [pc, #32]	@ (8001314 <TransmitStats+0x8c>)
 80012f2:	4809      	ldr	r0, [pc, #36]	@ (8001318 <TransmitStats+0x90>)
 80012f4:	f007 fcd8 	bl	8008ca8 <HAL_UART_Transmit>
    for (int i = 0; i < NUM_SENSOR; i++) {
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3301      	adds	r3, #1
 80012fc:	607b      	str	r3, [r7, #4]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2b2f      	cmp	r3, #47	@ 0x2f
 8001302:	ddd2      	ble.n	80012aa <TransmitStats+0x22>
    }
}
 8001304:	bf00      	nop
 8001306:	bf00      	nop
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bdb0      	pop	{r4, r5, r7, pc}
 800130e:	bf00      	nop
 8001310:	08018740 	.word	0x08018740
 8001314:	20007850 	.word	0x20007850
 8001318:	200077c8 	.word	0x200077c8
 800131c:	20007038 	.word	0x20007038
 8001320:	200070f8 	.word	0x200070f8
 8001324:	08018754 	.word	0x08018754

08001328 <ResetSensorData>:

void ResetSensorData() {
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
    // 모든 센서 값과 읽기 횟수를 0으로 설정
    for (int i = 0; i < NUM_SENSOR; i++) {
 800132e:	2300      	movs	r3, #0
 8001330:	607b      	str	r3, [r7, #4]
 8001332:	e014      	b.n	800135e <ResetSensorData+0x36>
        memset(sensorValues[i], 0, sizeof(sensorValues[i]));
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800133a:	fb02 f303 	mul.w	r3, r2, r3
 800133e:	4a0c      	ldr	r2, [pc, #48]	@ (8001370 <ResetSensorData+0x48>)
 8001340:	4413      	add	r3, r2
 8001342:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001346:	2100      	movs	r1, #0
 8001348:	4618      	mov	r0, r3
 800134a:	f012 fab2 	bl	80138b2 <memset>
        readingCount[i] = 0;
 800134e:	4a09      	ldr	r2, [pc, #36]	@ (8001374 <ResetSensorData+0x4c>)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2100      	movs	r1, #0
 8001354:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < NUM_SENSOR; i++) {
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	3301      	adds	r3, #1
 800135c:	607b      	str	r3, [r7, #4]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2b2f      	cmp	r3, #47	@ 0x2f
 8001362:	dde7      	ble.n	8001334 <ResetSensorData+0xc>
    }
}
 8001364:	bf00      	nop
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	20002538 	.word	0x20002538
 8001374:	200071b8 	.word	0x200071b8

08001378 <InitStats>:

void InitStats(){
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
	for(int i=0; i<NUM_SENSOR;i++){
 800137e:	2300      	movs	r3, #0
 8001380:	607b      	str	r3, [r7, #4]
 8001382:	e010      	b.n	80013a6 <InitStats+0x2e>
		sensorAverages[i] = 0;
 8001384:	4a0d      	ldr	r2, [pc, #52]	@ (80013bc <InitStats+0x44>)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	4413      	add	r3, r2
 800138c:	f04f 0200 	mov.w	r2, #0
 8001390:	601a      	str	r2, [r3, #0]
		sensorStdDevs[i] = 0;
 8001392:	4a0b      	ldr	r2, [pc, #44]	@ (80013c0 <InitStats+0x48>)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	4413      	add	r3, r2
 800139a:	f04f 0200 	mov.w	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
	for(int i=0; i<NUM_SENSOR;i++){
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	3301      	adds	r3, #1
 80013a4:	607b      	str	r3, [r7, #4]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2b2f      	cmp	r3, #47	@ 0x2f
 80013aa:	ddeb      	ble.n	8001384 <InitStats+0xc>
	}
}
 80013ac:	bf00      	nop
 80013ae:	bf00      	nop
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	20007038 	.word	0x20007038
 80013c0:	200070f8 	.word	0x200070f8

080013c4 <ProcessCommand>:

extern TIM_HandleTypeDef htim2;


void ProcessCommand(uint8_t *commandBuffer)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]

    if (command_in_progress) {
 80013cc:	4b61      	ldr	r3, [pc, #388]	@ (8001554 <ProcessCommand+0x190>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d006      	beq.n	80013e4 <ProcessCommand+0x20>
        HAL_UART_Transmit(&huart1, (uint8_t*)"Command is currently executing, please wait...\n", 48, 100);
 80013d6:	2364      	movs	r3, #100	@ 0x64
 80013d8:	2230      	movs	r2, #48	@ 0x30
 80013da:	495f      	ldr	r1, [pc, #380]	@ (8001558 <ProcessCommand+0x194>)
 80013dc:	485f      	ldr	r0, [pc, #380]	@ (800155c <ProcessCommand+0x198>)
 80013de:	f007 fc63 	bl	8008ca8 <HAL_UART_Transmit>
        return;
 80013e2:	e0b3      	b.n	800154c <ProcessCommand+0x188>
    }

    command_in_progress = 1; // 명령 실행 상태 설정
 80013e4:	4b5b      	ldr	r3, [pc, #364]	@ (8001554 <ProcessCommand+0x190>)
 80013e6:	2201      	movs	r2, #1
 80013e8:	701a      	strb	r2, [r3, #0]

    char *command = strtok((char*)commandBuffer, " "); // Command separation
 80013ea:	495d      	ldr	r1, [pc, #372]	@ (8001560 <ProcessCommand+0x19c>)
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f012 fa69 	bl	80138c4 <strtok>
 80013f2:	60f8      	str	r0, [r7, #12]
    char *argument = strtok(NULL, " "); // argument seperation
 80013f4:	495a      	ldr	r1, [pc, #360]	@ (8001560 <ProcessCommand+0x19c>)
 80013f6:	2000      	movs	r0, #0
 80013f8:	f012 fa64 	bl	80138c4 <strtok>
 80013fc:	60b8      	str	r0, [r7, #8]

    if (strcmp((char*)command, "echo") == 0) {HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "echo\n"), 100);}
 80013fe:	4959      	ldr	r1, [pc, #356]	@ (8001564 <ProcessCommand+0x1a0>)
 8001400:	68f8      	ldr	r0, [r7, #12]
 8001402:	f7fe ff05 	bl	8000210 <strcmp>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d10b      	bne.n	8001424 <ProcessCommand+0x60>
 800140c:	4956      	ldr	r1, [pc, #344]	@ (8001568 <ProcessCommand+0x1a4>)
 800140e:	4857      	ldr	r0, [pc, #348]	@ (800156c <ProcessCommand+0x1a8>)
 8001410:	f012 f9c0 	bl	8013794 <siprintf>
 8001414:	4603      	mov	r3, r0
 8001416:	b29a      	uxth	r2, r3
 8001418:	2364      	movs	r3, #100	@ 0x64
 800141a:	4954      	ldr	r1, [pc, #336]	@ (800156c <ProcessCommand+0x1a8>)
 800141c:	484f      	ldr	r0, [pc, #316]	@ (800155c <ProcessCommand+0x198>)
 800141e:	f007 fc43 	bl	8008ca8 <HAL_UART_Transmit>
 8001422:	e090      	b.n	8001546 <ProcessCommand+0x182>
    else if (strcmp((char*)command, "sensori2c") == 0) {SensorI2CCommand();} //sensori2c
 8001424:	4952      	ldr	r1, [pc, #328]	@ (8001570 <ProcessCommand+0x1ac>)
 8001426:	68f8      	ldr	r0, [r7, #12]
 8001428:	f7fe fef2 	bl	8000210 <strcmp>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d102      	bne.n	8001438 <ProcessCommand+0x74>
 8001432:	f000 f8b9 	bl	80015a8 <SensorI2CCommand>
 8001436:	e086      	b.n	8001546 <ProcessCommand+0x182>
    else if (strcmp((char*)command, "seti2c") == 0) {SetI2CCommand();} //seti2c
 8001438:	494e      	ldr	r1, [pc, #312]	@ (8001574 <ProcessCommand+0x1b0>)
 800143a:	68f8      	ldr	r0, [r7, #12]
 800143c:	f7fe fee8 	bl	8000210 <strcmp>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d102      	bne.n	800144c <ProcessCommand+0x88>
 8001446:	f000 f9a7 	bl	8001798 <SetI2CCommand>
 800144a:	e07c      	b.n	8001546 <ProcessCommand+0x182>
    else if (strcmp((char*)command, "rev") == 0) {RevCommand(argument);}
 800144c:	494a      	ldr	r1, [pc, #296]	@ (8001578 <ProcessCommand+0x1b4>)
 800144e:	68f8      	ldr	r0, [r7, #12]
 8001450:	f7fe fede 	bl	8000210 <strcmp>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d103      	bne.n	8001462 <ProcessCommand+0x9e>
 800145a:	68b8      	ldr	r0, [r7, #8]
 800145c:	f000 fb32 	bl	8001ac4 <RevCommand>
 8001460:	e071      	b.n	8001546 <ProcessCommand+0x182>
    else if (strcmp((char*)command, "lin") == 0) {LinCommand(argument);}
 8001462:	4946      	ldr	r1, [pc, #280]	@ (800157c <ProcessCommand+0x1b8>)
 8001464:	68f8      	ldr	r0, [r7, #12]
 8001466:	f7fe fed3 	bl	8000210 <strcmp>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d103      	bne.n	8001478 <ProcessCommand+0xb4>
 8001470:	68b8      	ldr	r0, [r7, #8]
 8001472:	f000 fb8b 	bl	8001b8c <LinCommand>
 8001476:	e066      	b.n	8001546 <ProcessCommand+0x182>
    else if (strcmp((char*)command, "servo") == 0) {ServoCommand(argument);}
 8001478:	4941      	ldr	r1, [pc, #260]	@ (8001580 <ProcessCommand+0x1bc>)
 800147a:	68f8      	ldr	r0, [r7, #12]
 800147c:	f7fe fec8 	bl	8000210 <strcmp>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d103      	bne.n	800148e <ProcessCommand+0xca>
 8001486:	68b8      	ldr	r0, [r7, #8]
 8001488:	f000 fbe6 	bl	8001c58 <ServoCommand>
 800148c:	e05b      	b.n	8001546 <ProcessCommand+0x182>
    else if (strcmp((char*)command, "servo2") == 0) {Servo2Command(argument);}
 800148e:	493d      	ldr	r1, [pc, #244]	@ (8001584 <ProcessCommand+0x1c0>)
 8001490:	68f8      	ldr	r0, [r7, #12]
 8001492:	f7fe febd 	bl	8000210 <strcmp>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d103      	bne.n	80014a4 <ProcessCommand+0xe0>
 800149c:	68b8      	ldr	r0, [r7, #8]
 800149e:	f000 fc43 	bl	8001d28 <Servo2Command>
 80014a2:	e050      	b.n	8001546 <ProcessCommand+0x182>
    else if (strcmp((char*)command, "avg") == 0) {AvgStdCommand();}
 80014a4:	4938      	ldr	r1, [pc, #224]	@ (8001588 <ProcessCommand+0x1c4>)
 80014a6:	68f8      	ldr	r0, [r7, #12]
 80014a8:	f7fe feb2 	bl	8000210 <strcmp>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d102      	bne.n	80014b8 <ProcessCommand+0xf4>
 80014b2:	f000 fc97 	bl	8001de4 <AvgStdCommand>
 80014b6:	e046      	b.n	8001546 <ProcessCommand+0x182>
    else if (strcmp((char*)command, "inferheati2c") == 0) {InferenceHeatI2CCommand();} //infercnni2c
 80014b8:	4934      	ldr	r1, [pc, #208]	@ (800158c <ProcessCommand+0x1c8>)
 80014ba:	68f8      	ldr	r0, [r7, #12]
 80014bc:	f7fe fea8 	bl	8000210 <strcmp>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d102      	bne.n	80014cc <ProcessCommand+0x108>
 80014c6:	f000 fd81 	bl	8001fcc <InferenceHeatI2CCommand>
 80014ca:	e03c      	b.n	8001546 <ProcessCommand+0x182>
    else if (strcmp((char*)command, "pointv") == 0) {PointingVertical();} // (0,20) -> (0,140)
 80014cc:	4930      	ldr	r1, [pc, #192]	@ (8001590 <ProcessCommand+0x1cc>)
 80014ce:	68f8      	ldr	r0, [r7, #12]
 80014d0:	f7fe fe9e 	bl	8000210 <strcmp>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d102      	bne.n	80014e0 <ProcessCommand+0x11c>
 80014da:	f001 f865 	bl	80025a8 <PointingVertical>
 80014de:	e032      	b.n	8001546 <ProcessCommand+0x182>
    else if (strcmp((char*)command, "pointr") == 0) {PointingRadial();} // (0,20) -> (0,140)
 80014e0:	492c      	ldr	r1, [pc, #176]	@ (8001594 <ProcessCommand+0x1d0>)
 80014e2:	68f8      	ldr	r0, [r7, #12]
 80014e4:	f7fe fe94 	bl	8000210 <strcmp>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d102      	bne.n	80014f4 <ProcessCommand+0x130>
 80014ee:	f001 fb9d 	bl	8002c2c <PointingRadial>
 80014f2:	e028      	b.n	8001546 <ProcessCommand+0x182>
    else if (strcmp((char*)command, "ini") == 0) {InitializaionCalibrationCommand();}
 80014f4:	4928      	ldr	r1, [pc, #160]	@ (8001598 <ProcessCommand+0x1d4>)
 80014f6:	68f8      	ldr	r0, [r7, #12]
 80014f8:	f7fe fe8a 	bl	8000210 <strcmp>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d102      	bne.n	8001508 <ProcessCommand+0x144>
 8001502:	f001 fbbb 	bl	8002c7c <InitializaionCalibrationCommand>
 8001506:	e01e      	b.n	8001546 <ProcessCommand+0x182>
    else if (strcmp((char*)command, "autoi2c") == 0) {AutoI2CCommand();}
 8001508:	4924      	ldr	r1, [pc, #144]	@ (800159c <ProcessCommand+0x1d8>)
 800150a:	68f8      	ldr	r0, [r7, #12]
 800150c:	f7fe fe80 	bl	8000210 <strcmp>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d102      	bne.n	800151c <ProcessCommand+0x158>
 8001516:	f001 fe01 	bl	800311c <AutoI2CCommand>
 800151a:	e014      	b.n	8001546 <ProcessCommand+0x182>
    else if (strcmp((char*)command, "loadcell") == 0) {LoadcellCommand();}
 800151c:	4920      	ldr	r1, [pc, #128]	@ (80015a0 <ProcessCommand+0x1dc>)
 800151e:	68f8      	ldr	r0, [r7, #12]
 8001520:	f7fe fe76 	bl	8000210 <strcmp>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d102      	bne.n	8001530 <ProcessCommand+0x16c>
 800152a:	f001 ff4b 	bl	80033c4 <LoadcellCommand>
 800152e:	e00a      	b.n	8001546 <ProcessCommand+0x182>
    else {HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "Please insert correct command\n"), 100);}
 8001530:	491c      	ldr	r1, [pc, #112]	@ (80015a4 <ProcessCommand+0x1e0>)
 8001532:	480e      	ldr	r0, [pc, #56]	@ (800156c <ProcessCommand+0x1a8>)
 8001534:	f012 f92e 	bl	8013794 <siprintf>
 8001538:	4603      	mov	r3, r0
 800153a:	b29a      	uxth	r2, r3
 800153c:	2364      	movs	r3, #100	@ 0x64
 800153e:	490b      	ldr	r1, [pc, #44]	@ (800156c <ProcessCommand+0x1a8>)
 8001540:	4806      	ldr	r0, [pc, #24]	@ (800155c <ProcessCommand+0x198>)
 8001542:	f007 fbb1 	bl	8008ca8 <HAL_UART_Transmit>

    command_in_progress = 0; // 명령 실행 완료 상태 해제
 8001546:	4b03      	ldr	r3, [pc, #12]	@ (8001554 <ProcessCommand+0x190>)
 8001548:	2200      	movs	r2, #0
 800154a:	701a      	strb	r2, [r3, #0]
}
 800154c:	3710      	adds	r7, #16
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	20007278 	.word	0x20007278
 8001558:	08018764 	.word	0x08018764
 800155c:	200077c8 	.word	0x200077c8
 8001560:	08018794 	.word	0x08018794
 8001564:	08018798 	.word	0x08018798
 8001568:	080187a0 	.word	0x080187a0
 800156c:	20007850 	.word	0x20007850
 8001570:	080187a8 	.word	0x080187a8
 8001574:	080187b4 	.word	0x080187b4
 8001578:	080187bc 	.word	0x080187bc
 800157c:	080187c0 	.word	0x080187c0
 8001580:	080187c4 	.word	0x080187c4
 8001584:	080187cc 	.word	0x080187cc
 8001588:	080187d4 	.word	0x080187d4
 800158c:	080187d8 	.word	0x080187d8
 8001590:	080187e8 	.word	0x080187e8
 8001594:	080187f0 	.word	0x080187f0
 8001598:	080187f8 	.word	0x080187f8
 800159c:	080187fc 	.word	0x080187fc
 80015a0:	08018804 	.word	0x08018804
 80015a4:	08018810 	.word	0x08018810

080015a8 <SensorI2CCommand>:


void SensorI2CCommand(){
 80015a8:	b590      	push	{r4, r7, lr}
 80015aa:	b089      	sub	sp, #36	@ 0x24
 80015ac:	af00      	add	r7, sp, #0
	ResetAllDevices();
 80015ae:	f003 f80f 	bl	80045d0 <ResetAllDevices>
	setOnAllDevices();
 80015b2:	f003 f889 	bl	80046c8 <setOnAllDevices>
	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "sensor test\r\n"), 100);
 80015b6:	496b      	ldr	r1, [pc, #428]	@ (8001764 <SensorI2CCommand+0x1bc>)
 80015b8:	486b      	ldr	r0, [pc, #428]	@ (8001768 <SensorI2CCommand+0x1c0>)
 80015ba:	f012 f8eb 	bl	8013794 <siprintf>
 80015be:	4603      	mov	r3, r0
 80015c0:	b29a      	uxth	r2, r3
 80015c2:	2364      	movs	r3, #100	@ 0x64
 80015c4:	4968      	ldr	r1, [pc, #416]	@ (8001768 <SensorI2CCommand+0x1c0>)
 80015c6:	4869      	ldr	r0, [pc, #420]	@ (800176c <SensorI2CCommand+0x1c4>)
 80015c8:	f007 fb6e 	bl	8008ca8 <HAL_UART_Transmit>
	uint32_t startTime = 0, endTime = 0, diffTime = 0;
 80015cc:	2300      	movs	r3, #0
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	2300      	movs	r3, #0
 80015d2:	60bb      	str	r3, [r7, #8]
 80015d4:	2300      	movs	r3, #0
 80015d6:	607b      	str	r3, [r7, #4]

    for(int count =0; count < NUM_READINGS; count++){
 80015d8:	2300      	movs	r3, #0
 80015da:	61fb      	str	r3, [r7, #28]
 80015dc:	e0b6      	b.n	800174c <SensorI2CCommand+0x1a4>
    	uint8_t sensorCount = 0;
 80015de:	2300      	movs	r3, #0
 80015e0:	76fb      	strb	r3, [r7, #27]
    	startTime = HAL_GetTick();
 80015e2:	f003 f915 	bl	8004810 <HAL_GetTick>
 80015e6:	60f8      	str	r0, [r7, #12]
		for (int i = 0; i < NUM_SENSOR; i++) {
 80015e8:	2300      	movs	r3, #0
 80015ea:	617b      	str	r3, [r7, #20]
 80015ec:	e054      	b.n	8001698 <SensorI2CCommand+0xf0>
			Dev = &vl53l0x_s[i];
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80015f4:	fb02 f303 	mul.w	r3, r2, r3
 80015f8:	4a5d      	ldr	r2, [pc, #372]	@ (8001770 <SensorI2CCommand+0x1c8>)
 80015fa:	4413      	add	r3, r2
 80015fc:	4a5d      	ldr	r2, [pc, #372]	@ (8001774 <SensorI2CCommand+0x1cc>)
 80015fe:	6013      	str	r3, [r2, #0]
			VL53L0X_PerformContinuousRangingMeasurement(Dev, &RangingData); // 1500us
 8001600:	4b5c      	ldr	r3, [pc, #368]	@ (8001774 <SensorI2CCommand+0x1cc>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	495c      	ldr	r1, [pc, #368]	@ (8001778 <SensorI2CCommand+0x1d0>)
 8001606:	4618      	mov	r0, r3
 8001608:	f00a f922 	bl	800b850 <VL53L0X_PerformContinuousRangingMeasurement>
			if (RangingData.RangeStatus == 0) {
 800160c:	4b5a      	ldr	r3, [pc, #360]	@ (8001778 <SensorI2CCommand+0x1d0>)
 800160e:	7e1b      	ldrb	r3, [r3, #24]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d13e      	bne.n	8001692 <SensorI2CCommand+0xea>
			  if (RangingData.RangeMilliMeter < 100) {
 8001614:	4b58      	ldr	r3, [pc, #352]	@ (8001778 <SensorI2CCommand+0x1d0>)
 8001616:	891b      	ldrh	r3, [r3, #8]
 8001618:	2b63      	cmp	r3, #99	@ 0x63
 800161a:	d83a      	bhi.n	8001692 <SensorI2CCommand+0xea>
				  filteredValue[i] = Kalman_Estimate(&filters[i], RangingData.RangeMilliMeter);
 800161c:	697a      	ldr	r2, [r7, #20]
 800161e:	4613      	mov	r3, r2
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	4413      	add	r3, r2
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	4a55      	ldr	r2, [pc, #340]	@ (800177c <SensorI2CCommand+0x1d4>)
 8001628:	4413      	add	r3, r2
 800162a:	4a53      	ldr	r2, [pc, #332]	@ (8001778 <SensorI2CCommand+0x1d0>)
 800162c:	8912      	ldrh	r2, [r2, #8]
 800162e:	ee07 2a90 	vmov	s15, r2
 8001632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001636:	eeb0 0a67 	vmov.f32	s0, s15
 800163a:	4618      	mov	r0, r3
 800163c:	f002 f818 	bl	8003670 <Kalman_Estimate>
 8001640:	eef0 7a40 	vmov.f32	s15, s0
 8001644:	4a4e      	ldr	r2, [pc, #312]	@ (8001780 <SensorI2CCommand+0x1d8>)
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	4413      	add	r3, r2
 800164c:	edc3 7a00 	vstr	s15, [r3]
				  //filteredValue[i] = RangingData.RangeMilliMeter;
				  sensorValues[i][readingCount[i]] = filteredValue[i];
 8001650:	4a4c      	ldr	r2, [pc, #304]	@ (8001784 <SensorI2CCommand+0x1dc>)
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001658:	4949      	ldr	r1, [pc, #292]	@ (8001780 <SensorI2CCommand+0x1d8>)
 800165a:	697a      	ldr	r2, [r7, #20]
 800165c:	0092      	lsls	r2, r2, #2
 800165e:	440a      	add	r2, r1
 8001660:	6812      	ldr	r2, [r2, #0]
 8001662:	4849      	ldr	r0, [pc, #292]	@ (8001788 <SensorI2CCommand+0x1e0>)
 8001664:	6979      	ldr	r1, [r7, #20]
 8001666:	2464      	movs	r4, #100	@ 0x64
 8001668:	fb04 f101 	mul.w	r1, r4, r1
 800166c:	440b      	add	r3, r1
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	4403      	add	r3, r0
 8001672:	601a      	str	r2, [r3, #0]
				  if(count>throwSomenumber){
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	2b14      	cmp	r3, #20
 8001678:	dd08      	ble.n	800168c <SensorI2CCommand+0xe4>
				  readingCount[i]++;}
 800167a:	4a42      	ldr	r2, [pc, #264]	@ (8001784 <SensorI2CCommand+0x1dc>)
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001682:	1c5a      	adds	r2, r3, #1
 8001684:	493f      	ldr	r1, [pc, #252]	@ (8001784 <SensorI2CCommand+0x1dc>)
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				  sensorCount++;
 800168c:	7efb      	ldrb	r3, [r7, #27]
 800168e:	3301      	adds	r3, #1
 8001690:	76fb      	strb	r3, [r7, #27]
		for (int i = 0; i < NUM_SENSOR; i++) {
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	3301      	adds	r3, #1
 8001696:	617b      	str	r3, [r7, #20]
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	2b2f      	cmp	r3, #47	@ 0x2f
 800169c:	dda7      	ble.n	80015ee <SensorI2CCommand+0x46>
				  //HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d ", RangingData.RangeStatus), 500);
				  // 1 : Sigma Fail | 2 : Signal Fail | 3 : Min Range Fail | 4 : Phase Fail | 5 : Hardware Fail | 255 : No update
			  }
		}
		do {
		    endTime = HAL_GetTick();
 800169e:	f003 f8b7 	bl	8004810 <HAL_GetTick>
 80016a2:	60b8      	str	r0, [r7, #8]
		    diffTime = endTime - startTime;
 80016a4:	68ba      	ldr	r2, [r7, #8]
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	607b      	str	r3, [r7, #4]
		} while (diffTime <= TIMBUDGET);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2b64      	cmp	r3, #100	@ 0x64
 80016b0:	d9f5      	bls.n	800169e <SensorI2CCommand+0xf6>
		#ifdef data
		for (int i = 0; i < NUM_SENSOR; i++) {
 80016b2:	2300      	movs	r3, #0
 80016b4:	613b      	str	r3, [r7, #16]
 80016b6:	e018      	b.n	80016ea <SensorI2CCommand+0x142>
			  HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.1f ", filteredValue[i]), 500);
 80016b8:	4a31      	ldr	r2, [pc, #196]	@ (8001780 <SensorI2CCommand+0x1d8>)
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	4413      	add	r3, r2
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7fe ff70 	bl	80005a8 <__aeabi_f2d>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	492f      	ldr	r1, [pc, #188]	@ (800178c <SensorI2CCommand+0x1e4>)
 80016ce:	4826      	ldr	r0, [pc, #152]	@ (8001768 <SensorI2CCommand+0x1c0>)
 80016d0:	f012 f860 	bl	8013794 <siprintf>
 80016d4:	4603      	mov	r3, r0
 80016d6:	b29a      	uxth	r2, r3
 80016d8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80016dc:	4922      	ldr	r1, [pc, #136]	@ (8001768 <SensorI2CCommand+0x1c0>)
 80016de:	4823      	ldr	r0, [pc, #140]	@ (800176c <SensorI2CCommand+0x1c4>)
 80016e0:	f007 fae2 	bl	8008ca8 <HAL_UART_Transmit>
		for (int i = 0; i < NUM_SENSOR; i++) {
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	3301      	adds	r3, #1
 80016e8:	613b      	str	r3, [r7, #16]
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	2b2f      	cmp	r3, #47	@ 0x2f
 80016ee:	dde3      	ble.n	80016b8 <SensorI2CCommand+0x110>
		  }
		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d ", NUM_READINGS), 100);
 80016f0:	2278      	movs	r2, #120	@ 0x78
 80016f2:	4927      	ldr	r1, [pc, #156]	@ (8001790 <SensorI2CCommand+0x1e8>)
 80016f4:	481c      	ldr	r0, [pc, #112]	@ (8001768 <SensorI2CCommand+0x1c0>)
 80016f6:	f012 f84d 	bl	8013794 <siprintf>
 80016fa:	4603      	mov	r3, r0
 80016fc:	b29a      	uxth	r2, r3
 80016fe:	2364      	movs	r3, #100	@ 0x64
 8001700:	4919      	ldr	r1, [pc, #100]	@ (8001768 <SensorI2CCommand+0x1c0>)
 8001702:	481a      	ldr	r0, [pc, #104]	@ (800176c <SensorI2CCommand+0x1c4>)
 8001704:	f007 fad0 	bl	8008ca8 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d ", sensorCount), 100);
 8001708:	7efb      	ldrb	r3, [r7, #27]
 800170a:	461a      	mov	r2, r3
 800170c:	4920      	ldr	r1, [pc, #128]	@ (8001790 <SensorI2CCommand+0x1e8>)
 800170e:	4816      	ldr	r0, [pc, #88]	@ (8001768 <SensorI2CCommand+0x1c0>)
 8001710:	f012 f840 	bl	8013794 <siprintf>
 8001714:	4603      	mov	r3, r0
 8001716:	b29a      	uxth	r2, r3
 8001718:	2364      	movs	r3, #100	@ 0x64
 800171a:	4913      	ldr	r1, [pc, #76]	@ (8001768 <SensorI2CCommand+0x1c0>)
 800171c:	4813      	ldr	r0, [pc, #76]	@ (800176c <SensorI2CCommand+0x1c4>)
 800171e:	f007 fac3 	bl	8008ca8 <HAL_UART_Transmit>

		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%lu\n", diffTime), 100);
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	491b      	ldr	r1, [pc, #108]	@ (8001794 <SensorI2CCommand+0x1ec>)
 8001726:	4810      	ldr	r0, [pc, #64]	@ (8001768 <SensorI2CCommand+0x1c0>)
 8001728:	f012 f834 	bl	8013794 <siprintf>
 800172c:	4603      	mov	r3, r0
 800172e:	b29a      	uxth	r2, r3
 8001730:	2364      	movs	r3, #100	@ 0x64
 8001732:	490d      	ldr	r1, [pc, #52]	@ (8001768 <SensorI2CCommand+0x1c0>)
 8001734:	480d      	ldr	r0, [pc, #52]	@ (800176c <SensorI2CCommand+0x1c4>)
 8001736:	f007 fab7 	bl	8008ca8 <HAL_UART_Transmit>
		#endif
		startTime = 0;
 800173a:	2300      	movs	r3, #0
 800173c:	60fb      	str	r3, [r7, #12]
		endTime = 0;
 800173e:	2300      	movs	r3, #0
 8001740:	60bb      	str	r3, [r7, #8]
		diffTime = 0;
 8001742:	2300      	movs	r3, #0
 8001744:	607b      	str	r3, [r7, #4]
    for(int count =0; count < NUM_READINGS; count++){
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	3301      	adds	r3, #1
 800174a:	61fb      	str	r3, [r7, #28]
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	2b77      	cmp	r3, #119	@ 0x77
 8001750:	f77f af45 	ble.w	80015de <SensorI2CCommand+0x36>
    }
    TransmitStats();
 8001754:	f7ff fd98 	bl	8001288 <TransmitStats>
    ResetSensorData();
 8001758:	f7ff fde6 	bl	8001328 <ResetSensorData>
}
 800175c:	bf00      	nop
 800175e:	3724      	adds	r7, #36	@ 0x24
 8001760:	46bd      	mov	sp, r7
 8001762:	bd90      	pop	{r4, r7, pc}
 8001764:	08018830 	.word	0x08018830
 8001768:	20007850 	.word	0x20007850
 800176c:	200077c8 	.word	0x200077c8
 8001770:	20007a70 	.word	0x20007a70
 8001774:	2000c570 	.word	0x2000c570
 8001778:	200078d4 	.word	0x200078d4
 800177c:	200072d4 	.word	0x200072d4
 8001780:	20007694 	.word	0x20007694
 8001784:	200071b8 	.word	0x200071b8
 8001788:	20002538 	.word	0x20002538
 800178c:	08018840 	.word	0x08018840
 8001790:	08018848 	.word	0x08018848
 8001794:	0801884c 	.word	0x0801884c

08001798 <SetI2CCommand>:

void SetI2CCommand(){
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "SetCommand\n\r"), 100);
 800179e:	49b3      	ldr	r1, [pc, #716]	@ (8001a6c <SetI2CCommand+0x2d4>)
 80017a0:	48b3      	ldr	r0, [pc, #716]	@ (8001a70 <SetI2CCommand+0x2d8>)
 80017a2:	f011 fff7 	bl	8013794 <siprintf>
 80017a6:	4603      	mov	r3, r0
 80017a8:	b29a      	uxth	r2, r3
 80017aa:	2364      	movs	r3, #100	@ 0x64
 80017ac:	49b0      	ldr	r1, [pc, #704]	@ (8001a70 <SetI2CCommand+0x2d8>)
 80017ae:	48b1      	ldr	r0, [pc, #708]	@ (8001a74 <SetI2CCommand+0x2dc>)
 80017b0:	f007 fa7a 	bl	8008ca8 <HAL_UART_Transmit>

	ResetAllDevices();
 80017b4:	f002 ff0c 	bl	80045d0 <ResetAllDevices>
	memset(vl53l0x_s, 0, sizeof(VL53L0X_Dev_t));
 80017b8:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80017bc:	2100      	movs	r1, #0
 80017be:	48ae      	ldr	r0, [pc, #696]	@ (8001a78 <SetI2CCommand+0x2e0>)
 80017c0:	f012 f877 	bl	80138b2 <memset>
  	for (int i = 0; i < NUM_SENSOR; i++) {
 80017c4:	2300      	movs	r3, #0
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	e145      	b.n	8001a56 <SetI2CCommand+0x2be>
  	    uint8_t q = i / 12;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	4aab      	ldr	r2, [pc, #684]	@ (8001a7c <SetI2CCommand+0x2e4>)
 80017ce:	fb82 1203 	smull	r1, r2, r2, r3
 80017d2:	1052      	asrs	r2, r2, #1
 80017d4:	17db      	asrs	r3, r3, #31
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	72fb      	strb	r3, [r7, #11]
  	    uint8_t r = i % 12;
 80017da:	68fa      	ldr	r2, [r7, #12]
 80017dc:	4ba7      	ldr	r3, [pc, #668]	@ (8001a7c <SetI2CCommand+0x2e4>)
 80017de:	fb83 1302 	smull	r1, r3, r3, r2
 80017e2:	1059      	asrs	r1, r3, #1
 80017e4:	17d3      	asrs	r3, r2, #31
 80017e6:	1ac9      	subs	r1, r1, r3
 80017e8:	460b      	mov	r3, r1
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	440b      	add	r3, r1
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	1ad1      	subs	r1, r2, r3
 80017f2:	460b      	mov	r3, r1
 80017f4:	72bb      	strb	r3, [r7, #10]
  	    uint8_t active_device = q * 2 + (r >= 8 ? 1 : 0);
 80017f6:	7afb      	ldrb	r3, [r7, #11]
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	7aba      	ldrb	r2, [r7, #10]
 80017fe:	2a07      	cmp	r2, #7
 8001800:	bf8c      	ite	hi
 8001802:	2201      	movhi	r2, #1
 8001804:	2200      	movls	r2, #0
 8001806:	b2d2      	uxtb	r2, r2
 8001808:	4413      	add	r3, r2
 800180a:	727b      	strb	r3, [r7, #9]
  	    uint8_t channel = (r >= 8) ? r - 8 : r;
 800180c:	7abb      	ldrb	r3, [r7, #10]
 800180e:	2b07      	cmp	r3, #7
 8001810:	d903      	bls.n	800181a <SetI2CCommand+0x82>
 8001812:	7abb      	ldrb	r3, [r7, #10]
 8001814:	3b08      	subs	r3, #8
 8001816:	b2db      	uxtb	r3, r3
 8001818:	e000      	b.n	800181c <SetI2CCommand+0x84>
 800181a:	7abb      	ldrb	r3, [r7, #10]
 800181c:	723b      	strb	r3, [r7, #8]

        ResetDevicesExcept(active_device);
 800181e:	7a7b      	ldrb	r3, [r7, #9]
 8001820:	4618      	mov	r0, r3
 8001822:	f002 feff 	bl	8004624 <ResetDevicesExcept>
        setActiveTcaChannel(active_device,channel);
 8001826:	7a3a      	ldrb	r2, [r7, #8]
 8001828:	7a7b      	ldrb	r3, [r7, #9]
 800182a:	4611      	mov	r1, r2
 800182c:	4618      	mov	r0, r3
 800182e:	f002 ff29 	bl	8004684 <setActiveTcaChannel>
  		Dev = &vl53l0x_s[i];
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001838:	fb02 f303 	mul.w	r3, r2, r3
 800183c:	4a8e      	ldr	r2, [pc, #568]	@ (8001a78 <SetI2CCommand+0x2e0>)
 800183e:	4413      	add	r3, r2
 8001840:	4a8f      	ldr	r2, [pc, #572]	@ (8001a80 <SetI2CCommand+0x2e8>)
 8001842:	6013      	str	r3, [r2, #0]
  		Dev->I2cHandle = &hi2c1;
 8001844:	4b8e      	ldr	r3, [pc, #568]	@ (8001a80 <SetI2CCommand+0x2e8>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a8e      	ldr	r2, [pc, #568]	@ (8001a84 <SetI2CCommand+0x2ec>)
 800184a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  		Dev->I2cDevAddr = VL53L0X_ADDR;
 800184e:	4b8c      	ldr	r3, [pc, #560]	@ (8001a80 <SetI2CCommand+0x2e8>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	2252      	movs	r2, #82	@ 0x52
 8001854:	f883 2160 	strb.w	r2, [r3, #352]	@ 0x160
  		Dev->comms_type = 1;
 8001858:	4b89      	ldr	r3, [pc, #548]	@ (8001a80 <SetI2CCommand+0x2e8>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2201      	movs	r2, #1
 800185e:	f883 2174 	strb.w	r2, [r3, #372]	@ 0x174
  		Dev->comms_speed_khz = 100;
 8001862:	4b87      	ldr	r3, [pc, #540]	@ (8001a80 <SetI2CCommand+0x2e8>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2264      	movs	r2, #100	@ 0x64
 8001868:	f8a3 2176 	strh.w	r2, [r3, #374]	@ 0x176
  		uint8_t newadd = 0x52 + 2*i;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	3329      	adds	r3, #41	@ 0x29
 8001870:	b2db      	uxtb	r3, r3
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	71fb      	strb	r3, [r7, #7]
  		VL53L0X_SetDeviceAddress(Dev, newadd);
 8001876:	4b82      	ldr	r3, [pc, #520]	@ (8001a80 <SetI2CCommand+0x2e8>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	79fa      	ldrb	r2, [r7, #7]
 800187c:	4611      	mov	r1, r2
 800187e:	4618      	mov	r0, r3
 8001880:	f008 fb06 	bl	8009e90 <VL53L0X_SetDeviceAddress>
  		Dev->I2cDevAddr = newadd;
 8001884:	4b7e      	ldr	r3, [pc, #504]	@ (8001a80 <SetI2CCommand+0x2e8>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	79fa      	ldrb	r2, [r7, #7]
 800188a:	f883 2160 	strb.w	r2, [r3, #352]	@ 0x160

  		VL53L0X_WaitDeviceBooted( Dev );
 800188e:	4b7c      	ldr	r3, [pc, #496]	@ (8001a80 <SetI2CCommand+0x2e8>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4618      	mov	r0, r3
 8001894:	f008 fdf8 	bl	800a488 <VL53L0X_WaitDeviceBooted>
  		VL53L0X_DataInit( Dev );
 8001898:	4b79      	ldr	r3, [pc, #484]	@ (8001a80 <SetI2CCommand+0x2e8>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4618      	mov	r0, r3
 800189e:	f008 fb0f 	bl	8009ec0 <VL53L0X_DataInit>
  		VL53L0X_StaticInit( Dev );
 80018a2:	4b77      	ldr	r3, [pc, #476]	@ (8001a80 <SetI2CCommand+0x2e8>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f008 fc6e 	bl	800a188 <VL53L0X_StaticInit>
  		VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 80018ac:	4b74      	ldr	r3, [pc, #464]	@ (8001a80 <SetI2CCommand+0x2e8>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2101      	movs	r1, #1
 80018b2:	4618      	mov	r0, r3
 80018b4:	f008 fe86 	bl	800a5c4 <VL53L0X_SetDeviceMode>

		VL53L0X_SetReferenceSpads(Dev, refSpadCountHost[i], isApertureSpadsHost[i]);
 80018b8:	4b71      	ldr	r3, [pc, #452]	@ (8001a80 <SetI2CCommand+0x2e8>)
 80018ba:	6818      	ldr	r0, [r3, #0]
 80018bc:	4a72      	ldr	r2, [pc, #456]	@ (8001a88 <SetI2CCommand+0x2f0>)
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80018c4:	4a71      	ldr	r2, [pc, #452]	@ (8001a8c <SetI2CCommand+0x2f4>)
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	4413      	add	r3, r2
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	461a      	mov	r2, r3
 80018ce:	f009 ff93 	bl	800b7f8 <VL53L0X_SetReferenceSpads>
  		VL53L0X_SetRefCalibration(Dev, VhvSettingsHost[i], PhaseCalHost[i]);
 80018d2:	4b6b      	ldr	r3, [pc, #428]	@ (8001a80 <SetI2CCommand+0x2e8>)
 80018d4:	6818      	ldr	r0, [r3, #0]
 80018d6:	4a6e      	ldr	r2, [pc, #440]	@ (8001a90 <SetI2CCommand+0x2f8>)
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	4413      	add	r3, r2
 80018dc:	7819      	ldrb	r1, [r3, #0]
 80018de:	4a6d      	ldr	r2, [pc, #436]	@ (8001a94 <SetI2CCommand+0x2fc>)
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	4413      	add	r3, r2
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	461a      	mov	r2, r3
 80018e8:	f009 f8e6 	bl	800aab8 <VL53L0X_SetRefCalibration>

  		VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 80018ec:	4b64      	ldr	r3, [pc, #400]	@ (8001a80 <SetI2CCommand+0x2e8>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2201      	movs	r2, #1
 80018f2:	2100      	movs	r1, #0
 80018f4:	4618      	mov	r0, r3
 80018f6:	f009 f8f7 	bl	800aae8 <VL53L0X_SetLimitCheckEnable>
  		VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 80018fa:	4b61      	ldr	r3, [pc, #388]	@ (8001a80 <SetI2CCommand+0x2e8>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2201      	movs	r2, #1
 8001900:	2101      	movs	r1, #1
 8001902:	4618      	mov	r0, r3
 8001904:	f009 f8f0 	bl	800aae8 <VL53L0X_SetLimitCheckEnable>
  		VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 8001908:	4b5d      	ldr	r3, [pc, #372]	@ (8001a80 <SetI2CCommand+0x2e8>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f641 1299 	movw	r2, #6553	@ 0x1999
 8001910:	2101      	movs	r1, #1
 8001912:	4618      	mov	r0, r3
 8001914:	f009 f998 	bl	800ac48 <VL53L0X_SetLimitCheckValue>
  		VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 8001918:	4b59      	ldr	r3, [pc, #356]	@ (8001a80 <SetI2CCommand+0x2e8>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 8001920:	2100      	movs	r1, #0
 8001922:	4618      	mov	r0, r3
 8001924:	f009 f990 	bl	800ac48 <VL53L0X_SetLimitCheckValue>
  		VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev, 100000);
 8001928:	4b55      	ldr	r3, [pc, #340]	@ (8001a80 <SetI2CCommand+0x2e8>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	495a      	ldr	r1, [pc, #360]	@ (8001a98 <SetI2CCommand+0x300>)
 800192e:	4618      	mov	r0, r3
 8001930:	f008 fea6 	bl	800a680 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
  		VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 8001934:	4b52      	ldr	r3, [pc, #328]	@ (8001a80 <SetI2CCommand+0x2e8>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2212      	movs	r2, #18
 800193a:	2100      	movs	r1, #0
 800193c:	4618      	mov	r0, r3
 800193e:	f008 fec5 	bl	800a6cc <VL53L0X_SetVcselPulsePeriod>
  		VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 8001942:	4b4f      	ldr	r3, [pc, #316]	@ (8001a80 <SetI2CCommand+0x2e8>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	220e      	movs	r2, #14
 8001948:	2101      	movs	r1, #1
 800194a:	4618      	mov	r0, r3
 800194c:	f008 febe 	bl	800a6cc <VL53L0X_SetVcselPulsePeriod>

		Kalman_Init(&filters[i], Q, R, P, 0);  // Q, R, P
 8001950:	68fa      	ldr	r2, [r7, #12]
 8001952:	4613      	mov	r3, r2
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	4413      	add	r3, r2
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	4a50      	ldr	r2, [pc, #320]	@ (8001a9c <SetI2CCommand+0x304>)
 800195c:	4413      	add	r3, r2
 800195e:	4a50      	ldr	r2, [pc, #320]	@ (8001aa0 <SetI2CCommand+0x308>)
 8001960:	edd2 7a00 	vldr	s15, [r2]
 8001964:	4a4f      	ldr	r2, [pc, #316]	@ (8001aa4 <SetI2CCommand+0x30c>)
 8001966:	ed92 7a00 	vldr	s14, [r2]
 800196a:	4a4f      	ldr	r2, [pc, #316]	@ (8001aa8 <SetI2CCommand+0x310>)
 800196c:	edd2 6a00 	vldr	s13, [r2]
 8001970:	eddf 1a4e 	vldr	s3, [pc, #312]	@ 8001aac <SetI2CCommand+0x314>
 8001974:	eeb0 1a66 	vmov.f32	s2, s13
 8001978:	eef0 0a47 	vmov.f32	s1, s14
 800197c:	eeb0 0a67 	vmov.f32	s0, s15
 8001980:	4618      	mov	r0, r3
 8001982:	f001 fe57 	bl	8003634 <Kalman_Init>

		#ifdef data
 		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%02d:(",i), 100);
 8001986:	68fa      	ldr	r2, [r7, #12]
 8001988:	4949      	ldr	r1, [pc, #292]	@ (8001ab0 <SetI2CCommand+0x318>)
 800198a:	4839      	ldr	r0, [pc, #228]	@ (8001a70 <SetI2CCommand+0x2d8>)
 800198c:	f011 ff02 	bl	8013794 <siprintf>
 8001990:	4603      	mov	r3, r0
 8001992:	b29a      	uxth	r2, r3
 8001994:	2364      	movs	r3, #100	@ 0x64
 8001996:	4936      	ldr	r1, [pc, #216]	@ (8001a70 <SetI2CCommand+0x2d8>)
 8001998:	4836      	ldr	r0, [pc, #216]	@ (8001a74 <SetI2CCommand+0x2dc>)
 800199a:	f007 f985 	bl	8008ca8 <HAL_UART_Transmit>
 		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%02lu ",refSpadCountHost[i]), 100);
 800199e:	4a3a      	ldr	r2, [pc, #232]	@ (8001a88 <SetI2CCommand+0x2f0>)
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019a6:	461a      	mov	r2, r3
 80019a8:	4942      	ldr	r1, [pc, #264]	@ (8001ab4 <SetI2CCommand+0x31c>)
 80019aa:	4831      	ldr	r0, [pc, #196]	@ (8001a70 <SetI2CCommand+0x2d8>)
 80019ac:	f011 fef2 	bl	8013794 <siprintf>
 80019b0:	4603      	mov	r3, r0
 80019b2:	b29a      	uxth	r2, r3
 80019b4:	2364      	movs	r3, #100	@ 0x64
 80019b6:	492e      	ldr	r1, [pc, #184]	@ (8001a70 <SetI2CCommand+0x2d8>)
 80019b8:	482e      	ldr	r0, [pc, #184]	@ (8001a74 <SetI2CCommand+0x2dc>)
 80019ba:	f007 f975 	bl	8008ca8 <HAL_UART_Transmit>
 		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%02d ",isApertureSpadsHost[i]), 100);
 80019be:	4a33      	ldr	r2, [pc, #204]	@ (8001a8c <SetI2CCommand+0x2f4>)
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	4413      	add	r3, r2
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	461a      	mov	r2, r3
 80019c8:	493b      	ldr	r1, [pc, #236]	@ (8001ab8 <SetI2CCommand+0x320>)
 80019ca:	4829      	ldr	r0, [pc, #164]	@ (8001a70 <SetI2CCommand+0x2d8>)
 80019cc:	f011 fee2 	bl	8013794 <siprintf>
 80019d0:	4603      	mov	r3, r0
 80019d2:	b29a      	uxth	r2, r3
 80019d4:	2364      	movs	r3, #100	@ 0x64
 80019d6:	4926      	ldr	r1, [pc, #152]	@ (8001a70 <SetI2CCommand+0x2d8>)
 80019d8:	4826      	ldr	r0, [pc, #152]	@ (8001a74 <SetI2CCommand+0x2dc>)
 80019da:	f007 f965 	bl	8008ca8 <HAL_UART_Transmit>
 		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%02d ",VhvSettingsHost[i]), 100);
 80019de:	4a2c      	ldr	r2, [pc, #176]	@ (8001a90 <SetI2CCommand+0x2f8>)
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	4413      	add	r3, r2
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	461a      	mov	r2, r3
 80019e8:	4933      	ldr	r1, [pc, #204]	@ (8001ab8 <SetI2CCommand+0x320>)
 80019ea:	4821      	ldr	r0, [pc, #132]	@ (8001a70 <SetI2CCommand+0x2d8>)
 80019ec:	f011 fed2 	bl	8013794 <siprintf>
 80019f0:	4603      	mov	r3, r0
 80019f2:	b29a      	uxth	r2, r3
 80019f4:	2364      	movs	r3, #100	@ 0x64
 80019f6:	491e      	ldr	r1, [pc, #120]	@ (8001a70 <SetI2CCommand+0x2d8>)
 80019f8:	481e      	ldr	r0, [pc, #120]	@ (8001a74 <SetI2CCommand+0x2dc>)
 80019fa:	f007 f955 	bl	8008ca8 <HAL_UART_Transmit>
 		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%02d) ",PhaseCalHost[i]), 100);
 80019fe:	4a25      	ldr	r2, [pc, #148]	@ (8001a94 <SetI2CCommand+0x2fc>)
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	4413      	add	r3, r2
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	461a      	mov	r2, r3
 8001a08:	492c      	ldr	r1, [pc, #176]	@ (8001abc <SetI2CCommand+0x324>)
 8001a0a:	4819      	ldr	r0, [pc, #100]	@ (8001a70 <SetI2CCommand+0x2d8>)
 8001a0c:	f011 fec2 	bl	8013794 <siprintf>
 8001a10:	4603      	mov	r3, r0
 8001a12:	b29a      	uxth	r2, r3
 8001a14:	2364      	movs	r3, #100	@ 0x64
 8001a16:	4916      	ldr	r1, [pc, #88]	@ (8001a70 <SetI2CCommand+0x2d8>)
 8001a18:	4816      	ldr	r0, [pc, #88]	@ (8001a74 <SetI2CCommand+0x2dc>)
 8001a1a:	f007 f945 	bl	8008ca8 <HAL_UART_Transmit>
 		if(i%12 ==11){HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "\n\r"), 100);}
 8001a1e:	68f9      	ldr	r1, [r7, #12]
 8001a20:	4b16      	ldr	r3, [pc, #88]	@ (8001a7c <SetI2CCommand+0x2e4>)
 8001a22:	fb83 2301 	smull	r2, r3, r3, r1
 8001a26:	105a      	asrs	r2, r3, #1
 8001a28:	17cb      	asrs	r3, r1, #31
 8001a2a:	1ad2      	subs	r2, r2, r3
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	4413      	add	r3, r2
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	1aca      	subs	r2, r1, r3
 8001a36:	2a0b      	cmp	r2, #11
 8001a38:	d10a      	bne.n	8001a50 <SetI2CCommand+0x2b8>
 8001a3a:	4921      	ldr	r1, [pc, #132]	@ (8001ac0 <SetI2CCommand+0x328>)
 8001a3c:	480c      	ldr	r0, [pc, #48]	@ (8001a70 <SetI2CCommand+0x2d8>)
 8001a3e:	f011 fea9 	bl	8013794 <siprintf>
 8001a42:	4603      	mov	r3, r0
 8001a44:	b29a      	uxth	r2, r3
 8001a46:	2364      	movs	r3, #100	@ 0x64
 8001a48:	4909      	ldr	r1, [pc, #36]	@ (8001a70 <SetI2CCommand+0x2d8>)
 8001a4a:	480a      	ldr	r0, [pc, #40]	@ (8001a74 <SetI2CCommand+0x2dc>)
 8001a4c:	f007 f92c 	bl	8008ca8 <HAL_UART_Transmit>
  	for (int i = 0; i < NUM_SENSOR; i++) {
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	3301      	adds	r3, #1
 8001a54:	60fb      	str	r3, [r7, #12]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2b2f      	cmp	r3, #47	@ 0x2f
 8001a5a:	f77f aeb6 	ble.w	80017ca <SetI2CCommand+0x32>
		#endif
  	}
  	InitStats();
 8001a5e:	f7ff fc8b 	bl	8001378 <InitStats>
}
 8001a62:	bf00      	nop
 8001a64:	3710      	adds	r7, #16
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	08018854 	.word	0x08018854
 8001a70:	20007850 	.word	0x20007850
 8001a74:	200077c8 	.word	0x200077c8
 8001a78:	20007a70 	.word	0x20007a70
 8001a7c:	2aaaaaab 	.word	0x2aaaaaab
 8001a80:	2000c570 	.word	0x2000c570
 8001a84:	20007280 	.word	0x20007280
 8001a88:	20000010 	.word	0x20000010
 8001a8c:	20007a40 	.word	0x20007a40
 8001a90:	200000d0 	.word	0x200000d0
 8001a94:	20000100 	.word	0x20000100
 8001a98:	000186a0 	.word	0x000186a0
 8001a9c:	200072d4 	.word	0x200072d4
 8001aa0:	20000000 	.word	0x20000000
 8001aa4:	20000004 	.word	0x20000004
 8001aa8:	20000008 	.word	0x20000008
 8001aac:	00000000 	.word	0x00000000
 8001ab0:	08018864 	.word	0x08018864
 8001ab4:	0801886c 	.word	0x0801886c
 8001ab8:	08018874 	.word	0x08018874
 8001abc:	0801887c 	.word	0x0801887c
 8001ac0:	08018884 	.word	0x08018884

08001ac4 <RevCommand>:

void RevCommand(char *arg){
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b086      	sub	sp, #24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
    int step_rev_angle;
    uint32_t startTime, endTime, elapsedTime;
    if(sscanf(arg, "%d", &step_rev_angle) == 1){
 8001acc:	f107 0308 	add.w	r3, r7, #8
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	4927      	ldr	r1, [pc, #156]	@ (8001b70 <RevCommand+0xac>)
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f011 fe7d 	bl	80137d4 <siscanf>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d134      	bne.n	8001b4a <RevCommand+0x86>
        startTime = HAL_GetTick();
 8001ae0:	f002 fe96 	bl	8004810 <HAL_GetTick>
 8001ae4:	6178      	str	r0, [r7, #20]
		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d deg revolution Start \n\r",step_rev_angle), 100);
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	461a      	mov	r2, r3
 8001aea:	4922      	ldr	r1, [pc, #136]	@ (8001b74 <RevCommand+0xb0>)
 8001aec:	4822      	ldr	r0, [pc, #136]	@ (8001b78 <RevCommand+0xb4>)
 8001aee:	f011 fe51 	bl	8013794 <siprintf>
 8001af2:	4603      	mov	r3, r0
 8001af4:	b29a      	uxth	r2, r3
 8001af6:	2364      	movs	r3, #100	@ 0x64
 8001af8:	491f      	ldr	r1, [pc, #124]	@ (8001b78 <RevCommand+0xb4>)
 8001afa:	4820      	ldr	r0, [pc, #128]	@ (8001b7c <RevCommand+0xb8>)
 8001afc:	f007 f8d4 	bl	8008ca8 <HAL_UART_Transmit>
        stepRev(step_rev_angle);
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f002 f8ac 	bl	8003c60 <stepRev>
		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d deg revolution End \n\r",step_rev_angle), 100);
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	491c      	ldr	r1, [pc, #112]	@ (8001b80 <RevCommand+0xbc>)
 8001b0e:	481a      	ldr	r0, [pc, #104]	@ (8001b78 <RevCommand+0xb4>)
 8001b10:	f011 fe40 	bl	8013794 <siprintf>
 8001b14:	4603      	mov	r3, r0
 8001b16:	b29a      	uxth	r2, r3
 8001b18:	2364      	movs	r3, #100	@ 0x64
 8001b1a:	4917      	ldr	r1, [pc, #92]	@ (8001b78 <RevCommand+0xb4>)
 8001b1c:	4817      	ldr	r0, [pc, #92]	@ (8001b7c <RevCommand+0xb8>)
 8001b1e:	f007 f8c3 	bl	8008ca8 <HAL_UART_Transmit>
		endTime = HAL_GetTick();
 8001b22:	f002 fe75 	bl	8004810 <HAL_GetTick>
 8001b26:	6138      	str	r0, [r7, #16]
		elapsedTime = endTime - startTime;
 8001b28:	693a      	ldr	r2, [r7, #16]
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	60fb      	str	r3, [r7, #12]
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "Elapsed Time: %lu ms\n\r", elapsedTime), 100);
 8001b30:	68fa      	ldr	r2, [r7, #12]
 8001b32:	4914      	ldr	r1, [pc, #80]	@ (8001b84 <RevCommand+0xc0>)
 8001b34:	4810      	ldr	r0, [pc, #64]	@ (8001b78 <RevCommand+0xb4>)
 8001b36:	f011 fe2d 	bl	8013794 <siprintf>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	b29a      	uxth	r2, r3
 8001b3e:	2364      	movs	r3, #100	@ 0x64
 8001b40:	490d      	ldr	r1, [pc, #52]	@ (8001b78 <RevCommand+0xb4>)
 8001b42:	480e      	ldr	r0, [pc, #56]	@ (8001b7c <RevCommand+0xb8>)
 8001b44:	f007 f8b0 	bl	8008ca8 <HAL_UART_Transmit>
 8001b48:	e00a      	b.n	8001b60 <RevCommand+0x9c>
    }else{
    	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "invalid data\r\n"), 100);
 8001b4a:	490f      	ldr	r1, [pc, #60]	@ (8001b88 <RevCommand+0xc4>)
 8001b4c:	480a      	ldr	r0, [pc, #40]	@ (8001b78 <RevCommand+0xb4>)
 8001b4e:	f011 fe21 	bl	8013794 <siprintf>
 8001b52:	4603      	mov	r3, r0
 8001b54:	b29a      	uxth	r2, r3
 8001b56:	2364      	movs	r3, #100	@ 0x64
 8001b58:	4907      	ldr	r1, [pc, #28]	@ (8001b78 <RevCommand+0xb4>)
 8001b5a:	4808      	ldr	r0, [pc, #32]	@ (8001b7c <RevCommand+0xb8>)
 8001b5c:	f007 f8a4 	bl	8008ca8 <HAL_UART_Transmit>
    }
    HAL_Delay(1000); // Delay for 1 second
 8001b60:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001b64:	f002 fe60 	bl	8004828 <HAL_Delay>
}
 8001b68:	bf00      	nop
 8001b6a:	3718      	adds	r7, #24
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	08018888 	.word	0x08018888
 8001b74:	0801888c 	.word	0x0801888c
 8001b78:	20007850 	.word	0x20007850
 8001b7c:	200077c8 	.word	0x200077c8
 8001b80:	080188a8 	.word	0x080188a8
 8001b84:	080188c4 	.word	0x080188c4
 8001b88:	080188dc 	.word	0x080188dc

08001b8c <LinCommand>:

void LinCommand(char *arg){
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b086      	sub	sp, #24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
    int step_lin_dist = 0;
 8001b94:	2300      	movs	r3, #0
 8001b96:	60bb      	str	r3, [r7, #8]
    uint32_t startTime, endTime, elapsedTime;
    if (sscanf(arg, "%d", &step_lin_dist) == 1) {
 8001b98:	f107 0308 	add.w	r3, r7, #8
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	4927      	ldr	r1, [pc, #156]	@ (8001c3c <LinCommand+0xb0>)
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f011 fe17 	bl	80137d4 <siscanf>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d134      	bne.n	8001c16 <LinCommand+0x8a>
        startTime = HAL_GetTick();
 8001bac:	f002 fe30 	bl	8004810 <HAL_GetTick>
 8001bb0:	6178      	str	r0, [r7, #20]
		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d mm lin Still moving \n\r",step_lin_dist), 100);
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	4922      	ldr	r1, [pc, #136]	@ (8001c40 <LinCommand+0xb4>)
 8001bb8:	4822      	ldr	r0, [pc, #136]	@ (8001c44 <LinCommand+0xb8>)
 8001bba:	f011 fdeb 	bl	8013794 <siprintf>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	b29a      	uxth	r2, r3
 8001bc2:	2364      	movs	r3, #100	@ 0x64
 8001bc4:	491f      	ldr	r1, [pc, #124]	@ (8001c44 <LinCommand+0xb8>)
 8001bc6:	4820      	ldr	r0, [pc, #128]	@ (8001c48 <LinCommand+0xbc>)
 8001bc8:	f007 f86e 	bl	8008ca8 <HAL_UART_Transmit>
        stepLin(step_lin_dist);
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f002 f8ae 	bl	8003d30 <stepLin>
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d mm lin End\n\r", step_lin_dist), 100);
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	491c      	ldr	r1, [pc, #112]	@ (8001c4c <LinCommand+0xc0>)
 8001bda:	481a      	ldr	r0, [pc, #104]	@ (8001c44 <LinCommand+0xb8>)
 8001bdc:	f011 fdda 	bl	8013794 <siprintf>
 8001be0:	4603      	mov	r3, r0
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	2364      	movs	r3, #100	@ 0x64
 8001be6:	4917      	ldr	r1, [pc, #92]	@ (8001c44 <LinCommand+0xb8>)
 8001be8:	4817      	ldr	r0, [pc, #92]	@ (8001c48 <LinCommand+0xbc>)
 8001bea:	f007 f85d 	bl	8008ca8 <HAL_UART_Transmit>
		endTime = HAL_GetTick();
 8001bee:	f002 fe0f 	bl	8004810 <HAL_GetTick>
 8001bf2:	6138      	str	r0, [r7, #16]
		elapsedTime = endTime - startTime;
 8001bf4:	693a      	ldr	r2, [r7, #16]
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	60fb      	str	r3, [r7, #12]
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "Elapsed Time: %lu ms\n\r", elapsedTime), 100);
 8001bfc:	68fa      	ldr	r2, [r7, #12]
 8001bfe:	4914      	ldr	r1, [pc, #80]	@ (8001c50 <LinCommand+0xc4>)
 8001c00:	4810      	ldr	r0, [pc, #64]	@ (8001c44 <LinCommand+0xb8>)
 8001c02:	f011 fdc7 	bl	8013794 <siprintf>
 8001c06:	4603      	mov	r3, r0
 8001c08:	b29a      	uxth	r2, r3
 8001c0a:	2364      	movs	r3, #100	@ 0x64
 8001c0c:	490d      	ldr	r1, [pc, #52]	@ (8001c44 <LinCommand+0xb8>)
 8001c0e:	480e      	ldr	r0, [pc, #56]	@ (8001c48 <LinCommand+0xbc>)
 8001c10:	f007 f84a 	bl	8008ca8 <HAL_UART_Transmit>
 8001c14:	e00a      	b.n	8001c2c <LinCommand+0xa0>
    } else {
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "invalid data\r\n"), 100);
 8001c16:	490f      	ldr	r1, [pc, #60]	@ (8001c54 <LinCommand+0xc8>)
 8001c18:	480a      	ldr	r0, [pc, #40]	@ (8001c44 <LinCommand+0xb8>)
 8001c1a:	f011 fdbb 	bl	8013794 <siprintf>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	b29a      	uxth	r2, r3
 8001c22:	2364      	movs	r3, #100	@ 0x64
 8001c24:	4907      	ldr	r1, [pc, #28]	@ (8001c44 <LinCommand+0xb8>)
 8001c26:	4808      	ldr	r0, [pc, #32]	@ (8001c48 <LinCommand+0xbc>)
 8001c28:	f007 f83e 	bl	8008ca8 <HAL_UART_Transmit>
    }
    HAL_Delay(1000); // Delay for 1 second
 8001c2c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c30:	f002 fdfa 	bl	8004828 <HAL_Delay>
}
 8001c34:	bf00      	nop
 8001c36:	3718      	adds	r7, #24
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	08018888 	.word	0x08018888
 8001c40:	080188ec 	.word	0x080188ec
 8001c44:	20007850 	.word	0x20007850
 8001c48:	200077c8 	.word	0x200077c8
 8001c4c:	08018908 	.word	0x08018908
 8001c50:	080188c4 	.word	0x080188c4
 8001c54:	080188dc 	.word	0x080188dc

08001c58 <ServoCommand>:

void ServoCommand(char *arg){
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
    float servo_angle_val = 0;
 8001c60:	f04f 0300 	mov.w	r3, #0
 8001c64:	60fb      	str	r3, [r7, #12]
    if(sscanf(arg, "%f", &servo_angle_val) == 1) {
 8001c66:	f107 030c 	add.w	r3, r7, #12
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	4927      	ldr	r1, [pc, #156]	@ (8001d0c <ServoCommand+0xb4>)
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f011 fdb0 	bl	80137d4 <siscanf>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d138      	bne.n	8001cec <ServoCommand+0x94>
    	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f servo Still moving \n\r", servo_angle_val), 100);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7fe fc93 	bl	80005a8 <__aeabi_f2d>
 8001c82:	4602      	mov	r2, r0
 8001c84:	460b      	mov	r3, r1
 8001c86:	4922      	ldr	r1, [pc, #136]	@ (8001d10 <ServoCommand+0xb8>)
 8001c88:	4822      	ldr	r0, [pc, #136]	@ (8001d14 <ServoCommand+0xbc>)
 8001c8a:	f011 fd83 	bl	8013794 <siprintf>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	b29a      	uxth	r2, r3
 8001c92:	2364      	movs	r3, #100	@ 0x64
 8001c94:	491f      	ldr	r1, [pc, #124]	@ (8001d14 <ServoCommand+0xbc>)
 8001c96:	4820      	ldr	r0, [pc, #128]	@ (8001d18 <ServoCommand+0xc0>)
 8001c98:	f007 f806 	bl	8008ca8 <HAL_UART_Transmit>
    	sayServoAngle(&htim2, TIM_CHANNEL_1, servo_angle_val);
 8001c9c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ca0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ca4:	edc7 7a00 	vstr	s15, [r7]
 8001ca8:	783b      	ldrb	r3, [r7, #0]
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	461a      	mov	r2, r3
 8001cae:	2100      	movs	r1, #0
 8001cb0:	481a      	ldr	r0, [pc, #104]	@ (8001d1c <ServoCommand+0xc4>)
 8001cb2:	f002 f925 	bl	8003f00 <sayServoAngle>
    	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f servo End \n\r", servo_angle_val), 100);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7fe fc75 	bl	80005a8 <__aeabi_f2d>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	4917      	ldr	r1, [pc, #92]	@ (8001d20 <ServoCommand+0xc8>)
 8001cc4:	4813      	ldr	r0, [pc, #76]	@ (8001d14 <ServoCommand+0xbc>)
 8001cc6:	f011 fd65 	bl	8013794 <siprintf>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	b29a      	uxth	r2, r3
 8001cce:	2364      	movs	r3, #100	@ 0x64
 8001cd0:	4910      	ldr	r1, [pc, #64]	@ (8001d14 <ServoCommand+0xbc>)
 8001cd2:	4811      	ldr	r0, [pc, #68]	@ (8001d18 <ServoCommand+0xc0>)
 8001cd4:	f006 ffe8 	bl	8008ca8 <HAL_UART_Transmit>
        HAL_Delay(2000); // Delay for 2 seconds
 8001cd8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001cdc:	f002 fda4 	bl	8004828 <HAL_Delay>
        sayServoAngle(&htim2, TIM_CHANNEL_1, 0); // return to servo origin
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	480d      	ldr	r0, [pc, #52]	@ (8001d1c <ServoCommand+0xc4>)
 8001ce6:	f002 f90b 	bl	8003f00 <sayServoAngle>
    }else{
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "invalid data\r\n"), 100);
    }
}
 8001cea:	e00a      	b.n	8001d02 <ServoCommand+0xaa>
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "invalid data\r\n"), 100);
 8001cec:	490d      	ldr	r1, [pc, #52]	@ (8001d24 <ServoCommand+0xcc>)
 8001cee:	4809      	ldr	r0, [pc, #36]	@ (8001d14 <ServoCommand+0xbc>)
 8001cf0:	f011 fd50 	bl	8013794 <siprintf>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	b29a      	uxth	r2, r3
 8001cf8:	2364      	movs	r3, #100	@ 0x64
 8001cfa:	4906      	ldr	r1, [pc, #24]	@ (8001d14 <ServoCommand+0xbc>)
 8001cfc:	4806      	ldr	r0, [pc, #24]	@ (8001d18 <ServoCommand+0xc0>)
 8001cfe:	f006 ffd3 	bl	8008ca8 <HAL_UART_Transmit>
}
 8001d02:	bf00      	nop
 8001d04:	3710      	adds	r7, #16
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	08018918 	.word	0x08018918
 8001d10:	0801891c 	.word	0x0801891c
 8001d14:	20007850 	.word	0x20007850
 8001d18:	200077c8 	.word	0x200077c8
 8001d1c:	20007778 	.word	0x20007778
 8001d20:	08018938 	.word	0x08018938
 8001d24:	080188dc 	.word	0x080188dc

08001d28 <Servo2Command>:

void Servo2Command(char *arg){
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
    float servo_angle_val = 0;
 8001d30:	f04f 0300 	mov.w	r3, #0
 8001d34:	60fb      	str	r3, [r7, #12]
    if(sscanf(arg, "%f", &servo_angle_val) == 1) {
 8001d36:	f107 030c 	add.w	r3, r7, #12
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	4922      	ldr	r1, [pc, #136]	@ (8001dc8 <Servo2Command+0xa0>)
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f011 fd48 	bl	80137d4 <siscanf>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d12f      	bne.n	8001daa <Servo2Command+0x82>
    	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f servo Still moving \n\r", servo_angle_val), 100);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7fe fc2b 	bl	80005a8 <__aeabi_f2d>
 8001d52:	4602      	mov	r2, r0
 8001d54:	460b      	mov	r3, r1
 8001d56:	491d      	ldr	r1, [pc, #116]	@ (8001dcc <Servo2Command+0xa4>)
 8001d58:	481d      	ldr	r0, [pc, #116]	@ (8001dd0 <Servo2Command+0xa8>)
 8001d5a:	f011 fd1b 	bl	8013794 <siprintf>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	b29a      	uxth	r2, r3
 8001d62:	2364      	movs	r3, #100	@ 0x64
 8001d64:	491a      	ldr	r1, [pc, #104]	@ (8001dd0 <Servo2Command+0xa8>)
 8001d66:	481b      	ldr	r0, [pc, #108]	@ (8001dd4 <Servo2Command+0xac>)
 8001d68:	f006 ff9e 	bl	8008ca8 <HAL_UART_Transmit>
    	sayServoAngle(&htim2, TIM_CHANNEL_1, servo_angle_val);
 8001d6c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d74:	edc7 7a00 	vstr	s15, [r7]
 8001d78:	783b      	ldrb	r3, [r7, #0]
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	2100      	movs	r1, #0
 8001d80:	4815      	ldr	r0, [pc, #84]	@ (8001dd8 <Servo2Command+0xb0>)
 8001d82:	f002 f8bd 	bl	8003f00 <sayServoAngle>
    	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f servo End \n\r", servo_angle_val), 100);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7fe fc0d 	bl	80005a8 <__aeabi_f2d>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	460b      	mov	r3, r1
 8001d92:	4912      	ldr	r1, [pc, #72]	@ (8001ddc <Servo2Command+0xb4>)
 8001d94:	480e      	ldr	r0, [pc, #56]	@ (8001dd0 <Servo2Command+0xa8>)
 8001d96:	f011 fcfd 	bl	8013794 <siprintf>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	b29a      	uxth	r2, r3
 8001d9e:	2364      	movs	r3, #100	@ 0x64
 8001da0:	490b      	ldr	r1, [pc, #44]	@ (8001dd0 <Servo2Command+0xa8>)
 8001da2:	480c      	ldr	r0, [pc, #48]	@ (8001dd4 <Servo2Command+0xac>)
 8001da4:	f006 ff80 	bl	8008ca8 <HAL_UART_Transmit>
    }else{
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "invalid data\r\n"), 100);
    }
}
 8001da8:	e00a      	b.n	8001dc0 <Servo2Command+0x98>
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "invalid data\r\n"), 100);
 8001daa:	490d      	ldr	r1, [pc, #52]	@ (8001de0 <Servo2Command+0xb8>)
 8001dac:	4808      	ldr	r0, [pc, #32]	@ (8001dd0 <Servo2Command+0xa8>)
 8001dae:	f011 fcf1 	bl	8013794 <siprintf>
 8001db2:	4603      	mov	r3, r0
 8001db4:	b29a      	uxth	r2, r3
 8001db6:	2364      	movs	r3, #100	@ 0x64
 8001db8:	4905      	ldr	r1, [pc, #20]	@ (8001dd0 <Servo2Command+0xa8>)
 8001dba:	4806      	ldr	r0, [pc, #24]	@ (8001dd4 <Servo2Command+0xac>)
 8001dbc:	f006 ff74 	bl	8008ca8 <HAL_UART_Transmit>
}
 8001dc0:	bf00      	nop
 8001dc2:	3710      	adds	r7, #16
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	08018918 	.word	0x08018918
 8001dcc:	0801891c 	.word	0x0801891c
 8001dd0:	20007850 	.word	0x20007850
 8001dd4:	200077c8 	.word	0x200077c8
 8001dd8:	20007778 	.word	0x20007778
 8001ddc:	08018938 	.word	0x08018938
 8001de0:	080188dc 	.word	0x080188dc

08001de4 <AvgStdCommand>:




void AvgStdCommand(){
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "Avg Std Force Z\n" ), 1000);
 8001dea:	496f      	ldr	r1, [pc, #444]	@ (8001fa8 <AvgStdCommand+0x1c4>)
 8001dec:	486f      	ldr	r0, [pc, #444]	@ (8001fac <AvgStdCommand+0x1c8>)
 8001dee:	f011 fcd1 	bl	8013794 <siprintf>
 8001df2:	4603      	mov	r3, r0
 8001df4:	b29a      	uxth	r2, r3
 8001df6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dfa:	496c      	ldr	r1, [pc, #432]	@ (8001fac <AvgStdCommand+0x1c8>)
 8001dfc:	486c      	ldr	r0, [pc, #432]	@ (8001fb0 <AvgStdCommand+0x1cc>)
 8001dfe:	f006 ff53 	bl	8008ca8 <HAL_UART_Transmit>
    for(int i = 0; i < sizeof(Xmean)/sizeof(Xmean[0]); i++) {
 8001e02:	2300      	movs	r3, #0
 8001e04:	607b      	str	r3, [r7, #4]
 8001e06:	e02e      	b.n	8001e66 <AvgStdCommand+0x82>
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", Xmean[i]), 1000);
 8001e08:	4a6a      	ldr	r2, [pc, #424]	@ (8001fb4 <AvgStdCommand+0x1d0>)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	4413      	add	r3, r2
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7fe fbc8 	bl	80005a8 <__aeabi_f2d>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	4966      	ldr	r1, [pc, #408]	@ (8001fb8 <AvgStdCommand+0x1d4>)
 8001e1e:	4863      	ldr	r0, [pc, #396]	@ (8001fac <AvgStdCommand+0x1c8>)
 8001e20:	f011 fcb8 	bl	8013794 <siprintf>
 8001e24:	4603      	mov	r3, r0
 8001e26:	b29a      	uxth	r2, r3
 8001e28:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e2c:	495f      	ldr	r1, [pc, #380]	@ (8001fac <AvgStdCommand+0x1c8>)
 8001e2e:	4860      	ldr	r0, [pc, #384]	@ (8001fb0 <AvgStdCommand+0x1cc>)
 8001e30:	f006 ff3a 	bl	8008ca8 <HAL_UART_Transmit>
        if(i%8==7){HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "\n"), 1000);}
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	425a      	negs	r2, r3
 8001e38:	f003 0307 	and.w	r3, r3, #7
 8001e3c:	f002 0207 	and.w	r2, r2, #7
 8001e40:	bf58      	it	pl
 8001e42:	4253      	negpl	r3, r2
 8001e44:	2b07      	cmp	r3, #7
 8001e46:	d10b      	bne.n	8001e60 <AvgStdCommand+0x7c>
 8001e48:	495c      	ldr	r1, [pc, #368]	@ (8001fbc <AvgStdCommand+0x1d8>)
 8001e4a:	4858      	ldr	r0, [pc, #352]	@ (8001fac <AvgStdCommand+0x1c8>)
 8001e4c:	f011 fca2 	bl	8013794 <siprintf>
 8001e50:	4603      	mov	r3, r0
 8001e52:	b29a      	uxth	r2, r3
 8001e54:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e58:	4954      	ldr	r1, [pc, #336]	@ (8001fac <AvgStdCommand+0x1c8>)
 8001e5a:	4855      	ldr	r0, [pc, #340]	@ (8001fb0 <AvgStdCommand+0x1cc>)
 8001e5c:	f006 ff24 	bl	8008ca8 <HAL_UART_Transmit>
    for(int i = 0; i < sizeof(Xmean)/sizeof(Xmean[0]); i++) {
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3301      	adds	r3, #1
 8001e64:	607b      	str	r3, [r7, #4]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2b2f      	cmp	r3, #47	@ 0x2f
 8001e6a:	d9cd      	bls.n	8001e08 <AvgStdCommand+0x24>
    }
    for(int i = 0; i < sizeof(Xstd)/sizeof(Xstd[0]); i++) {
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	603b      	str	r3, [r7, #0]
 8001e70:	e02e      	b.n	8001ed0 <AvgStdCommand+0xec>
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", Xstd[i]), 1000);
 8001e72:	4a53      	ldr	r2, [pc, #332]	@ (8001fc0 <AvgStdCommand+0x1dc>)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	4413      	add	r3, r2
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7fe fb93 	bl	80005a8 <__aeabi_f2d>
 8001e82:	4602      	mov	r2, r0
 8001e84:	460b      	mov	r3, r1
 8001e86:	494c      	ldr	r1, [pc, #304]	@ (8001fb8 <AvgStdCommand+0x1d4>)
 8001e88:	4848      	ldr	r0, [pc, #288]	@ (8001fac <AvgStdCommand+0x1c8>)
 8001e8a:	f011 fc83 	bl	8013794 <siprintf>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	b29a      	uxth	r2, r3
 8001e92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e96:	4945      	ldr	r1, [pc, #276]	@ (8001fac <AvgStdCommand+0x1c8>)
 8001e98:	4845      	ldr	r0, [pc, #276]	@ (8001fb0 <AvgStdCommand+0x1cc>)
 8001e9a:	f006 ff05 	bl	8008ca8 <HAL_UART_Transmit>
        if(i%8==7){HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "\n"), 1000);}
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	425a      	negs	r2, r3
 8001ea2:	f003 0307 	and.w	r3, r3, #7
 8001ea6:	f002 0207 	and.w	r2, r2, #7
 8001eaa:	bf58      	it	pl
 8001eac:	4253      	negpl	r3, r2
 8001eae:	2b07      	cmp	r3, #7
 8001eb0:	d10b      	bne.n	8001eca <AvgStdCommand+0xe6>
 8001eb2:	4942      	ldr	r1, [pc, #264]	@ (8001fbc <AvgStdCommand+0x1d8>)
 8001eb4:	483d      	ldr	r0, [pc, #244]	@ (8001fac <AvgStdCommand+0x1c8>)
 8001eb6:	f011 fc6d 	bl	8013794 <siprintf>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	b29a      	uxth	r2, r3
 8001ebe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ec2:	493a      	ldr	r1, [pc, #232]	@ (8001fac <AvgStdCommand+0x1c8>)
 8001ec4:	483a      	ldr	r0, [pc, #232]	@ (8001fb0 <AvgStdCommand+0x1cc>)
 8001ec6:	f006 feef 	bl	8008ca8 <HAL_UART_Transmit>
    for(int i = 0; i < sizeof(Xstd)/sizeof(Xstd[0]); i++) {
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	3301      	adds	r3, #1
 8001ece:	603b      	str	r3, [r7, #0]
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	2b2f      	cmp	r3, #47	@ 0x2f
 8001ed4:	d9cd      	bls.n	8001e72 <AvgStdCommand+0x8e>
    }
    HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", Fminmax[0]), 1000);
 8001ed6:	4b3b      	ldr	r3, [pc, #236]	@ (8001fc4 <AvgStdCommand+0x1e0>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7fe fb64 	bl	80005a8 <__aeabi_f2d>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	4934      	ldr	r1, [pc, #208]	@ (8001fb8 <AvgStdCommand+0x1d4>)
 8001ee6:	4831      	ldr	r0, [pc, #196]	@ (8001fac <AvgStdCommand+0x1c8>)
 8001ee8:	f011 fc54 	bl	8013794 <siprintf>
 8001eec:	4603      	mov	r3, r0
 8001eee:	b29a      	uxth	r2, r3
 8001ef0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ef4:	492d      	ldr	r1, [pc, #180]	@ (8001fac <AvgStdCommand+0x1c8>)
 8001ef6:	482e      	ldr	r0, [pc, #184]	@ (8001fb0 <AvgStdCommand+0x1cc>)
 8001ef8:	f006 fed6 	bl	8008ca8 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", Fminmax[1]), 1000);
 8001efc:	4b31      	ldr	r3, [pc, #196]	@ (8001fc4 <AvgStdCommand+0x1e0>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7fe fb51 	bl	80005a8 <__aeabi_f2d>
 8001f06:	4602      	mov	r2, r0
 8001f08:	460b      	mov	r3, r1
 8001f0a:	492b      	ldr	r1, [pc, #172]	@ (8001fb8 <AvgStdCommand+0x1d4>)
 8001f0c:	4827      	ldr	r0, [pc, #156]	@ (8001fac <AvgStdCommand+0x1c8>)
 8001f0e:	f011 fc41 	bl	8013794 <siprintf>
 8001f12:	4603      	mov	r3, r0
 8001f14:	b29a      	uxth	r2, r3
 8001f16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f1a:	4924      	ldr	r1, [pc, #144]	@ (8001fac <AvgStdCommand+0x1c8>)
 8001f1c:	4824      	ldr	r0, [pc, #144]	@ (8001fb0 <AvgStdCommand+0x1cc>)
 8001f1e:	f006 fec3 	bl	8008ca8 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "\n"), 1000);
 8001f22:	4926      	ldr	r1, [pc, #152]	@ (8001fbc <AvgStdCommand+0x1d8>)
 8001f24:	4821      	ldr	r0, [pc, #132]	@ (8001fac <AvgStdCommand+0x1c8>)
 8001f26:	f011 fc35 	bl	8013794 <siprintf>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	b29a      	uxth	r2, r3
 8001f2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f32:	491e      	ldr	r1, [pc, #120]	@ (8001fac <AvgStdCommand+0x1c8>)
 8001f34:	481e      	ldr	r0, [pc, #120]	@ (8001fb0 <AvgStdCommand+0x1cc>)
 8001f36:	f006 feb7 	bl	8008ca8 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", Zminmax[0]), 1000);
 8001f3a:	4b23      	ldr	r3, [pc, #140]	@ (8001fc8 <AvgStdCommand+0x1e4>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7fe fb32 	bl	80005a8 <__aeabi_f2d>
 8001f44:	4602      	mov	r2, r0
 8001f46:	460b      	mov	r3, r1
 8001f48:	491b      	ldr	r1, [pc, #108]	@ (8001fb8 <AvgStdCommand+0x1d4>)
 8001f4a:	4818      	ldr	r0, [pc, #96]	@ (8001fac <AvgStdCommand+0x1c8>)
 8001f4c:	f011 fc22 	bl	8013794 <siprintf>
 8001f50:	4603      	mov	r3, r0
 8001f52:	b29a      	uxth	r2, r3
 8001f54:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f58:	4914      	ldr	r1, [pc, #80]	@ (8001fac <AvgStdCommand+0x1c8>)
 8001f5a:	4815      	ldr	r0, [pc, #84]	@ (8001fb0 <AvgStdCommand+0x1cc>)
 8001f5c:	f006 fea4 	bl	8008ca8 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", Zminmax[1]), 1000);
 8001f60:	4b19      	ldr	r3, [pc, #100]	@ (8001fc8 <AvgStdCommand+0x1e4>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7fe fb1f 	bl	80005a8 <__aeabi_f2d>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	4912      	ldr	r1, [pc, #72]	@ (8001fb8 <AvgStdCommand+0x1d4>)
 8001f70:	480e      	ldr	r0, [pc, #56]	@ (8001fac <AvgStdCommand+0x1c8>)
 8001f72:	f011 fc0f 	bl	8013794 <siprintf>
 8001f76:	4603      	mov	r3, r0
 8001f78:	b29a      	uxth	r2, r3
 8001f7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f7e:	490b      	ldr	r1, [pc, #44]	@ (8001fac <AvgStdCommand+0x1c8>)
 8001f80:	480b      	ldr	r0, [pc, #44]	@ (8001fb0 <AvgStdCommand+0x1cc>)
 8001f82:	f006 fe91 	bl	8008ca8 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "\n"), 1000);
 8001f86:	490d      	ldr	r1, [pc, #52]	@ (8001fbc <AvgStdCommand+0x1d8>)
 8001f88:	4808      	ldr	r0, [pc, #32]	@ (8001fac <AvgStdCommand+0x1c8>)
 8001f8a:	f011 fc03 	bl	8013794 <siprintf>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	b29a      	uxth	r2, r3
 8001f92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f96:	4905      	ldr	r1, [pc, #20]	@ (8001fac <AvgStdCommand+0x1c8>)
 8001f98:	4805      	ldr	r0, [pc, #20]	@ (8001fb0 <AvgStdCommand+0x1cc>)
 8001f9a:	f006 fe85 	bl	8008ca8 <HAL_UART_Transmit>
}
 8001f9e:	bf00      	nop
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	0801894c 	.word	0x0801894c
 8001fac:	20007850 	.word	0x20007850
 8001fb0:	200077c8 	.word	0x200077c8
 8001fb4:	20000148 	.word	0x20000148
 8001fb8:	08018960 	.word	0x08018960
 8001fbc:	08018968 	.word	0x08018968
 8001fc0:	20000208 	.word	0x20000208
 8001fc4:	200002c8 	.word	0x200002c8
 8001fc8:	200002d0 	.word	0x200002d0

08001fcc <InferenceHeatI2CCommand>:


void InferenceHeatI2CCommand()
{
 8001fcc:	b5b0      	push	{r4, r5, r7, lr}
 8001fce:	b08c      	sub	sp, #48	@ 0x30
 8001fd0:	af00      	add	r7, sp, #0
	SetI2CCommand();
 8001fd2:	f7ff fbe1 	bl	8001798 <SetI2CCommand>
	SensorI2CCommand();
 8001fd6:	f7ff fae7 	bl	80015a8 <SensorI2CCommand>
	ResetAllDevices();
 8001fda:	f002 faf9 	bl	80045d0 <ResetAllDevices>
	setOnAllDevices();
 8001fde:	f002 fb73 	bl	80046c8 <setOnAllDevices>
    HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "sensor test\r\n"), 100);
 8001fe2:	490e      	ldr	r1, [pc, #56]	@ (800201c <InferenceHeatI2CCommand+0x50>)
 8001fe4:	480e      	ldr	r0, [pc, #56]	@ (8002020 <InferenceHeatI2CCommand+0x54>)
 8001fe6:	f011 fbd5 	bl	8013794 <siprintf>
 8001fea:	4603      	mov	r3, r0
 8001fec:	b29a      	uxth	r2, r3
 8001fee:	2364      	movs	r3, #100	@ 0x64
 8001ff0:	490b      	ldr	r1, [pc, #44]	@ (8002020 <InferenceHeatI2CCommand+0x54>)
 8001ff2:	480c      	ldr	r0, [pc, #48]	@ (8002024 <InferenceHeatI2CCommand+0x58>)
 8001ff4:	f006 fe58 	bl	8008ca8 <HAL_UART_Transmit>
    uint32_t startTime, endTime, diffTime;
    uint8_t isBelowMinusTwo = 0;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    for (int count =0; count <50000;count ++){
 8001ffe:	2300      	movs	r3, #0
 8002000:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002002:	e2a7      	b.n	8002554 <InferenceHeatI2CCommand+0x588>
    	uint8_t tofCount =0;
 8002004:	2300      	movs	r3, #0
 8002006:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        isBelowMinusTwo = 0; // -2보다 작은 값이 있는지 여부를 저장
 800200a:	2300      	movs	r3, #0
 800200c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    	startTime = HAL_GetTick();
 8002010:	f002 fbfe 	bl	8004810 <HAL_GetTick>
 8002014:	6178      	str	r0, [r7, #20]
        for (int i = 0; i < NUM_SENSOR; i++) {
 8002016:	2300      	movs	r3, #0
 8002018:	623b      	str	r3, [r7, #32]
 800201a:	e089      	b.n	8002130 <InferenceHeatI2CCommand+0x164>
 800201c:	08018830 	.word	0x08018830
 8002020:	20007850 	.word	0x20007850
 8002024:	200077c8 	.word	0x200077c8
            Dev = &vl53l0x_s[i];
 8002028:	6a3b      	ldr	r3, [r7, #32]
 800202a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800202e:	fb02 f303 	mul.w	r3, r2, r3
 8002032:	4a9d      	ldr	r2, [pc, #628]	@ (80022a8 <InferenceHeatI2CCommand+0x2dc>)
 8002034:	4413      	add	r3, r2
 8002036:	4a9d      	ldr	r2, [pc, #628]	@ (80022ac <InferenceHeatI2CCommand+0x2e0>)
 8002038:	6013      	str	r3, [r2, #0]
            VL53L0X_PerformContinuousRangingMeasurement(Dev, &RangingData); // 1500 uss
 800203a:	4b9c      	ldr	r3, [pc, #624]	@ (80022ac <InferenceHeatI2CCommand+0x2e0>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	499c      	ldr	r1, [pc, #624]	@ (80022b0 <InferenceHeatI2CCommand+0x2e4>)
 8002040:	4618      	mov	r0, r3
 8002042:	f009 fc05 	bl	800b850 <VL53L0X_PerformContinuousRangingMeasurement>
            if (RangingData.RangeStatus == 0) {
 8002046:	4b9a      	ldr	r3, [pc, #616]	@ (80022b0 <InferenceHeatI2CCommand+0x2e4>)
 8002048:	7e1b      	ldrb	r3, [r3, #24]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d16d      	bne.n	800212a <InferenceHeatI2CCommand+0x15e>
  			  if (RangingData.RangeMilliMeter < sensorAverages[i]+20) {
 800204e:	4b98      	ldr	r3, [pc, #608]	@ (80022b0 <InferenceHeatI2CCommand+0x2e4>)
 8002050:	891b      	ldrh	r3, [r3, #8]
 8002052:	ee07 3a90 	vmov	s15, r3
 8002056:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800205a:	4a96      	ldr	r2, [pc, #600]	@ (80022b4 <InferenceHeatI2CCommand+0x2e8>)
 800205c:	6a3b      	ldr	r3, [r7, #32]
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	4413      	add	r3, r2
 8002062:	edd3 7a00 	vldr	s15, [r3]
 8002066:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 800206a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800206e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002076:	d558      	bpl.n	800212a <InferenceHeatI2CCommand+0x15e>
            	filteredValue[i] = Kalman_Estimate(&filters[i], RangingData.RangeMilliMeter); // 500 us
 8002078:	6a3a      	ldr	r2, [r7, #32]
 800207a:	4613      	mov	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	4413      	add	r3, r2
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	4a8d      	ldr	r2, [pc, #564]	@ (80022b8 <InferenceHeatI2CCommand+0x2ec>)
 8002084:	4413      	add	r3, r2
 8002086:	4a8a      	ldr	r2, [pc, #552]	@ (80022b0 <InferenceHeatI2CCommand+0x2e4>)
 8002088:	8912      	ldrh	r2, [r2, #8]
 800208a:	ee07 2a90 	vmov	s15, r2
 800208e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002092:	eeb0 0a67 	vmov.f32	s0, s15
 8002096:	4618      	mov	r0, r3
 8002098:	f001 faea 	bl	8003670 <Kalman_Estimate>
 800209c:	eef0 7a40 	vmov.f32	s15, s0
 80020a0:	4a86      	ldr	r2, [pc, #536]	@ (80022bc <InferenceHeatI2CCommand+0x2f0>)
 80020a2:	6a3b      	ldr	r3, [r7, #32]
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	4413      	add	r3, r2
 80020a8:	edc3 7a00 	vstr	s15, [r3]
                filteredValue[i] -= sensorAverages[i];
 80020ac:	4a83      	ldr	r2, [pc, #524]	@ (80022bc <InferenceHeatI2CCommand+0x2f0>)
 80020ae:	6a3b      	ldr	r3, [r7, #32]
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	4413      	add	r3, r2
 80020b4:	ed93 7a00 	vldr	s14, [r3]
 80020b8:	4a7e      	ldr	r2, [pc, #504]	@ (80022b4 <InferenceHeatI2CCommand+0x2e8>)
 80020ba:	6a3b      	ldr	r3, [r7, #32]
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	4413      	add	r3, r2
 80020c0:	edd3 7a00 	vldr	s15, [r3]
 80020c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020c8:	4a7c      	ldr	r2, [pc, #496]	@ (80022bc <InferenceHeatI2CCommand+0x2f0>)
 80020ca:	6a3b      	ldr	r3, [r7, #32]
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	4413      	add	r3, r2
 80020d0:	edc3 7a00 	vstr	s15, [r3]
                //filteredValue[i] -= Xmean[i];
                filteredValue[i] /= Xstd[i];
 80020d4:	4a79      	ldr	r2, [pc, #484]	@ (80022bc <InferenceHeatI2CCommand+0x2f0>)
 80020d6:	6a3b      	ldr	r3, [r7, #32]
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	4413      	add	r3, r2
 80020dc:	edd3 6a00 	vldr	s13, [r3]
 80020e0:	4a77      	ldr	r2, [pc, #476]	@ (80022c0 <InferenceHeatI2CCommand+0x2f4>)
 80020e2:	6a3b      	ldr	r3, [r7, #32]
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	4413      	add	r3, r2
 80020e8:	ed93 7a00 	vldr	s14, [r3]
 80020ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020f0:	4a72      	ldr	r2, [pc, #456]	@ (80022bc <InferenceHeatI2CCommand+0x2f0>)
 80020f2:	6a3b      	ldr	r3, [r7, #32]
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	4413      	add	r3, r2
 80020f8:	edc3 7a00 	vstr	s15, [r3]
                tofCount++;
 80020fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002100:	3301      	adds	r3, #1
 8002102:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                if (filteredValue[i] < -2.0) {
 8002106:	4a6d      	ldr	r2, [pc, #436]	@ (80022bc <InferenceHeatI2CCommand+0x2f0>)
 8002108:	6a3b      	ldr	r3, [r7, #32]
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	4413      	add	r3, r2
 800210e:	edd3 7a00 	vldr	s15, [r3]
 8002112:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8002116:	eef4 7ac7 	vcmpe.f32	s15, s14
 800211a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800211e:	d504      	bpl.n	800212a <InferenceHeatI2CCommand+0x15e>
                	isBelowMinusTwo++;
 8002120:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002124:	3301      	adds	r3, #1
 8002126:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        for (int i = 0; i < NUM_SENSOR; i++) {
 800212a:	6a3b      	ldr	r3, [r7, #32]
 800212c:	3301      	adds	r3, #1
 800212e:	623b      	str	r3, [r7, #32]
 8002130:	6a3b      	ldr	r3, [r7, #32]
 8002132:	2b2f      	cmp	r3, #47	@ 0x2f
 8002134:	f77f af78 	ble.w	8002028 <InferenceHeatI2CCommand+0x5c>
                }
  			  }
            }
        }

        in_data[0] = filteredValue[0];
 8002138:	4b60      	ldr	r3, [pc, #384]	@ (80022bc <InferenceHeatI2CCommand+0x2f0>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a61      	ldr	r2, [pc, #388]	@ (80022c4 <InferenceHeatI2CCommand+0x2f8>)
 800213e:	6013      	str	r3, [r2, #0]
        in_data[1] = filteredValue[1];
 8002140:	4b5e      	ldr	r3, [pc, #376]	@ (80022bc <InferenceHeatI2CCommand+0x2f0>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	4a5f      	ldr	r2, [pc, #380]	@ (80022c4 <InferenceHeatI2CCommand+0x2f8>)
 8002146:	6053      	str	r3, [r2, #4]
        in_data[2] = filteredValue[2];
 8002148:	4b5c      	ldr	r3, [pc, #368]	@ (80022bc <InferenceHeatI2CCommand+0x2f0>)
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	4a5d      	ldr	r2, [pc, #372]	@ (80022c4 <InferenceHeatI2CCommand+0x2f8>)
 800214e:	6093      	str	r3, [r2, #8]
        in_data[3] = filteredValue[3];
 8002150:	4b5a      	ldr	r3, [pc, #360]	@ (80022bc <InferenceHeatI2CCommand+0x2f0>)
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	4a5b      	ldr	r2, [pc, #364]	@ (80022c4 <InferenceHeatI2CCommand+0x2f8>)
 8002156:	60d3      	str	r3, [r2, #12]
        in_data[4] = filteredValue[4];
 8002158:	4b58      	ldr	r3, [pc, #352]	@ (80022bc <InferenceHeatI2CCommand+0x2f0>)
 800215a:	691b      	ldr	r3, [r3, #16]
 800215c:	4a59      	ldr	r2, [pc, #356]	@ (80022c4 <InferenceHeatI2CCommand+0x2f8>)
 800215e:	6113      	str	r3, [r2, #16]
        in_data[5] = filteredValue[5];
 8002160:	4b56      	ldr	r3, [pc, #344]	@ (80022bc <InferenceHeatI2CCommand+0x2f0>)
 8002162:	695b      	ldr	r3, [r3, #20]
 8002164:	4a57      	ldr	r2, [pc, #348]	@ (80022c4 <InferenceHeatI2CCommand+0x2f8>)
 8002166:	6153      	str	r3, [r2, #20]
        in_data[6] = filteredValue[6];
 8002168:	4b54      	ldr	r3, [pc, #336]	@ (80022bc <InferenceHeatI2CCommand+0x2f0>)
 800216a:	699b      	ldr	r3, [r3, #24]
 800216c:	4a55      	ldr	r2, [pc, #340]	@ (80022c4 <InferenceHeatI2CCommand+0x2f8>)
 800216e:	6193      	str	r3, [r2, #24]
        in_data[7] = filteredValue[7];
 8002170:	4b52      	ldr	r3, [pc, #328]	@ (80022bc <InferenceHeatI2CCommand+0x2f0>)
 8002172:	69db      	ldr	r3, [r3, #28]
 8002174:	4a53      	ldr	r2, [pc, #332]	@ (80022c4 <InferenceHeatI2CCommand+0x2f8>)
 8002176:	61d3      	str	r3, [r2, #28]
        in_data[8] = filteredValue[8];
 8002178:	4b50      	ldr	r3, [pc, #320]	@ (80022bc <InferenceHeatI2CCommand+0x2f0>)
 800217a:	6a1b      	ldr	r3, [r3, #32]
 800217c:	4a51      	ldr	r2, [pc, #324]	@ (80022c4 <InferenceHeatI2CCommand+0x2f8>)
 800217e:	6213      	str	r3, [r2, #32]
        in_data[9] = filteredValue[9];
 8002180:	4b4e      	ldr	r3, [pc, #312]	@ (80022bc <InferenceHeatI2CCommand+0x2f0>)
 8002182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002184:	4a4f      	ldr	r2, [pc, #316]	@ (80022c4 <InferenceHeatI2CCommand+0x2f8>)
 8002186:	6253      	str	r3, [r2, #36]	@ 0x24
        in_data[10] = filteredValue[10];
 8002188:	4b4c      	ldr	r3, [pc, #304]	@ (80022bc <InferenceHeatI2CCommand+0x2f0>)
 800218a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800218c:	4a4d      	ldr	r2, [pc, #308]	@ (80022c4 <InferenceHeatI2CCommand+0x2f8>)
 800218e:	6293      	str	r3, [r2, #40]	@ 0x28
        in_data[11] = filteredValue[11];
 8002190:	4b4a      	ldr	r3, [pc, #296]	@ (80022bc <InferenceHeatI2CCommand+0x2f0>)
 8002192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002194:	4a4b      	ldr	r2, [pc, #300]	@ (80022c4 <InferenceHeatI2CCommand+0x2f8>)
 8002196:	62d3      	str	r3, [r2, #44]	@ 0x2c
        in_data[12] = filteredValue[0];
 8002198:	4b48      	ldr	r3, [pc, #288]	@ (80022bc <InferenceHeatI2CCommand+0x2f0>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a49      	ldr	r2, [pc, #292]	@ (80022c4 <InferenceHeatI2CCommand+0x2f8>)
 800219e:	6313      	str	r3, [r2, #48]	@ 0x30

        in_data[13] = filteredValue[12];
 80021a0:	4b46      	ldr	r3, [pc, #280]	@ (80022bc <InferenceHeatI2CCommand+0x2f0>)
 80021a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a4:	4a47      	ldr	r2, [pc, #284]	@ (80022c4 <InferenceHeatI2CCommand+0x2f8>)
 80021a6:	6353      	str	r3, [r2, #52]	@ 0x34
        in_data[14] = filteredValue[13];
 80021a8:	4b44      	ldr	r3, [pc, #272]	@ (80022bc <InferenceHeatI2CCommand+0x2f0>)
 80021aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021ac:	4a45      	ldr	r2, [pc, #276]	@ (80022c4 <InferenceHeatI2CCommand+0x2f8>)
 80021ae:	6393      	str	r3, [r2, #56]	@ 0x38
        in_data[15] = filteredValue[14];
 80021b0:	4b42      	ldr	r3, [pc, #264]	@ (80022bc <InferenceHeatI2CCommand+0x2f0>)
 80021b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021b4:	4a43      	ldr	r2, [pc, #268]	@ (80022c4 <InferenceHeatI2CCommand+0x2f8>)
 80021b6:	63d3      	str	r3, [r2, #60]	@ 0x3c
        in_data[16] = filteredValue[15];
 80021b8:	4b40      	ldr	r3, [pc, #256]	@ (80022bc <InferenceHeatI2CCommand+0x2f0>)
 80021ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021bc:	4a41      	ldr	r2, [pc, #260]	@ (80022c4 <InferenceHeatI2CCommand+0x2f8>)
 80021be:	6413      	str	r3, [r2, #64]	@ 0x40
        in_data[17] = filteredValue[16];
 80021c0:	4b3e      	ldr	r3, [pc, #248]	@ (80022bc <InferenceHeatI2CCommand+0x2f0>)
 80021c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c4:	4a3f      	ldr	r2, [pc, #252]	@ (80022c4 <InferenceHeatI2CCommand+0x2f8>)
 80021c6:	6453      	str	r3, [r2, #68]	@ 0x44
        in_data[18] = filteredValue[17];
 80021c8:	4b3c      	ldr	r3, [pc, #240]	@ (80022bc <InferenceHeatI2CCommand+0x2f0>)
 80021ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021cc:	4a3d      	ldr	r2, [pc, #244]	@ (80022c4 <InferenceHeatI2CCommand+0x2f8>)
 80021ce:	6493      	str	r3, [r2, #72]	@ 0x48
        in_data[19] = filteredValue[18];
 80021d0:	4b3a      	ldr	r3, [pc, #232]	@ (80022bc <InferenceHeatI2CCommand+0x2f0>)
 80021d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021d4:	4a3b      	ldr	r2, [pc, #236]	@ (80022c4 <InferenceHeatI2CCommand+0x2f8>)
 80021d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
        in_data[20] = filteredValue[19];
 80021d8:	4b38      	ldr	r3, [pc, #224]	@ (80022bc <InferenceHeatI2CCommand+0x2f0>)
 80021da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021dc:	4a39      	ldr	r2, [pc, #228]	@ (80022c4 <InferenceHeatI2CCommand+0x2f8>)
 80021de:	6513      	str	r3, [r2, #80]	@ 0x50
        in_data[21] = filteredValue[20];
 80021e0:	4b36      	ldr	r3, [pc, #216]	@ (80022bc <InferenceHeatI2CCommand+0x2f0>)
 80021e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021e4:	4a37      	ldr	r2, [pc, #220]	@ (80022c4 <InferenceHeatI2CCommand+0x2f8>)
 80021e6:	6553      	str	r3, [r2, #84]	@ 0x54
        in_data[22] = filteredValue[21];
 80021e8:	4b34      	ldr	r3, [pc, #208]	@ (80022bc <InferenceHeatI2CCommand+0x2f0>)
 80021ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021ec:	4a35      	ldr	r2, [pc, #212]	@ (80022c4 <InferenceHeatI2CCommand+0x2f8>)
 80021ee:	6593      	str	r3, [r2, #88]	@ 0x58
        in_data[23] = filteredValue[22];
 80021f0:	4b32      	ldr	r3, [pc, #200]	@ (80022bc <InferenceHeatI2CCommand+0x2f0>)
 80021f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021f4:	4a33      	ldr	r2, [pc, #204]	@ (80022c4 <InferenceHeatI2CCommand+0x2f8>)
 80021f6:	65d3      	str	r3, [r2, #92]	@ 0x5c
        in_data[24] = filteredValue[23];
 80021f8:	4b30      	ldr	r3, [pc, #192]	@ (80022bc <InferenceHeatI2CCommand+0x2f0>)
 80021fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021fc:	4a31      	ldr	r2, [pc, #196]	@ (80022c4 <InferenceHeatI2CCommand+0x2f8>)
 80021fe:	6613      	str	r3, [r2, #96]	@ 0x60
        in_data[25] = filteredValue[12];
 8002200:	4b2e      	ldr	r3, [pc, #184]	@ (80022bc <InferenceHeatI2CCommand+0x2f0>)
 8002202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002204:	4a2f      	ldr	r2, [pc, #188]	@ (80022c4 <InferenceHeatI2CCommand+0x2f8>)
 8002206:	6653      	str	r3, [r2, #100]	@ 0x64
		#if NUM_SENSOR >= 36
        in_data[26] = filteredValue[24];
 8002208:	4b2c      	ldr	r3, [pc, #176]	@ (80022bc <InferenceHeatI2CCommand+0x2f0>)
 800220a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800220c:	4a2d      	ldr	r2, [pc, #180]	@ (80022c4 <InferenceHeatI2CCommand+0x2f8>)
 800220e:	6693      	str	r3, [r2, #104]	@ 0x68
        in_data[27] = filteredValue[25];
 8002210:	4b2a      	ldr	r3, [pc, #168]	@ (80022bc <InferenceHeatI2CCommand+0x2f0>)
 8002212:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002214:	4a2b      	ldr	r2, [pc, #172]	@ (80022c4 <InferenceHeatI2CCommand+0x2f8>)
 8002216:	66d3      	str	r3, [r2, #108]	@ 0x6c
        in_data[28] = filteredValue[26];
 8002218:	4b28      	ldr	r3, [pc, #160]	@ (80022bc <InferenceHeatI2CCommand+0x2f0>)
 800221a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800221c:	4a29      	ldr	r2, [pc, #164]	@ (80022c4 <InferenceHeatI2CCommand+0x2f8>)
 800221e:	6713      	str	r3, [r2, #112]	@ 0x70
        in_data[29] = filteredValue[27];
 8002220:	4b26      	ldr	r3, [pc, #152]	@ (80022bc <InferenceHeatI2CCommand+0x2f0>)
 8002222:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002224:	4a27      	ldr	r2, [pc, #156]	@ (80022c4 <InferenceHeatI2CCommand+0x2f8>)
 8002226:	6753      	str	r3, [r2, #116]	@ 0x74
        in_data[30] = filteredValue[28];
 8002228:	4b24      	ldr	r3, [pc, #144]	@ (80022bc <InferenceHeatI2CCommand+0x2f0>)
 800222a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800222c:	4a25      	ldr	r2, [pc, #148]	@ (80022c4 <InferenceHeatI2CCommand+0x2f8>)
 800222e:	6793      	str	r3, [r2, #120]	@ 0x78
        in_data[31] = filteredValue[29];
 8002230:	4b22      	ldr	r3, [pc, #136]	@ (80022bc <InferenceHeatI2CCommand+0x2f0>)
 8002232:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002234:	4a23      	ldr	r2, [pc, #140]	@ (80022c4 <InferenceHeatI2CCommand+0x2f8>)
 8002236:	67d3      	str	r3, [r2, #124]	@ 0x7c
        in_data[32] = filteredValue[30];
 8002238:	4b20      	ldr	r3, [pc, #128]	@ (80022bc <InferenceHeatI2CCommand+0x2f0>)
 800223a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800223c:	4a21      	ldr	r2, [pc, #132]	@ (80022c4 <InferenceHeatI2CCommand+0x2f8>)
 800223e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
        in_data[33] = filteredValue[31];
 8002242:	4b1e      	ldr	r3, [pc, #120]	@ (80022bc <InferenceHeatI2CCommand+0x2f0>)
 8002244:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002246:	4a1f      	ldr	r2, [pc, #124]	@ (80022c4 <InferenceHeatI2CCommand+0x2f8>)
 8002248:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
        in_data[34] = filteredValue[32];
 800224c:	4b1b      	ldr	r3, [pc, #108]	@ (80022bc <InferenceHeatI2CCommand+0x2f0>)
 800224e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002252:	4a1c      	ldr	r2, [pc, #112]	@ (80022c4 <InferenceHeatI2CCommand+0x2f8>)
 8002254:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
        in_data[35] = filteredValue[33];
 8002258:	4b18      	ldr	r3, [pc, #96]	@ (80022bc <InferenceHeatI2CCommand+0x2f0>)
 800225a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800225e:	4a19      	ldr	r2, [pc, #100]	@ (80022c4 <InferenceHeatI2CCommand+0x2f8>)
 8002260:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
        in_data[36] = filteredValue[34];
 8002264:	4b15      	ldr	r3, [pc, #84]	@ (80022bc <InferenceHeatI2CCommand+0x2f0>)
 8002266:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800226a:	4a16      	ldr	r2, [pc, #88]	@ (80022c4 <InferenceHeatI2CCommand+0x2f8>)
 800226c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        in_data[37] = filteredValue[35];
 8002270:	4b12      	ldr	r3, [pc, #72]	@ (80022bc <InferenceHeatI2CCommand+0x2f0>)
 8002272:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002276:	4a13      	ldr	r2, [pc, #76]	@ (80022c4 <InferenceHeatI2CCommand+0x2f8>)
 8002278:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        in_data[38] = filteredValue[24];
 800227c:	4b0f      	ldr	r3, [pc, #60]	@ (80022bc <InferenceHeatI2CCommand+0x2f0>)
 800227e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002280:	4a10      	ldr	r2, [pc, #64]	@ (80022c4 <InferenceHeatI2CCommand+0x2f8>)
 8002282:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
		#endif
		#if NUM_SENSOR >= 48
		in_data[39] = filteredValue[36];
 8002286:	4b0d      	ldr	r3, [pc, #52]	@ (80022bc <InferenceHeatI2CCommand+0x2f0>)
 8002288:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800228c:	4a0d      	ldr	r2, [pc, #52]	@ (80022c4 <InferenceHeatI2CCommand+0x2f8>)
 800228e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
		in_data[40] = filteredValue[37];
 8002292:	4b0a      	ldr	r3, [pc, #40]	@ (80022bc <InferenceHeatI2CCommand+0x2f0>)
 8002294:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002298:	4a0a      	ldr	r2, [pc, #40]	@ (80022c4 <InferenceHeatI2CCommand+0x2f8>)
 800229a:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
		in_data[41] = filteredValue[38];
 800229e:	4b07      	ldr	r3, [pc, #28]	@ (80022bc <InferenceHeatI2CCommand+0x2f0>)
 80022a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80022a4:	e010      	b.n	80022c8 <InferenceHeatI2CCommand+0x2fc>
 80022a6:	bf00      	nop
 80022a8:	20007a70 	.word	0x20007a70
 80022ac:	2000c570 	.word	0x2000c570
 80022b0:	200078d4 	.word	0x200078d4
 80022b4:	20007038 	.word	0x20007038
 80022b8:	200072d4 	.word	0x200072d4
 80022bc:	20007694 	.word	0x20007694
 80022c0:	20000208 	.word	0x20000208
 80022c4:	20002440 	.word	0x20002440
 80022c8:	4aa8      	ldr	r2, [pc, #672]	@ (800256c <InferenceHeatI2CCommand+0x5a0>)
 80022ca:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
		in_data[42] = filteredValue[39];
 80022ce:	4ba8      	ldr	r3, [pc, #672]	@ (8002570 <InferenceHeatI2CCommand+0x5a4>)
 80022d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80022d4:	4aa5      	ldr	r2, [pc, #660]	@ (800256c <InferenceHeatI2CCommand+0x5a0>)
 80022d6:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
		in_data[43] = filteredValue[40];
 80022da:	4ba5      	ldr	r3, [pc, #660]	@ (8002570 <InferenceHeatI2CCommand+0x5a4>)
 80022dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80022e0:	4aa2      	ldr	r2, [pc, #648]	@ (800256c <InferenceHeatI2CCommand+0x5a0>)
 80022e2:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac
		in_data[44] = filteredValue[41];
 80022e6:	4ba2      	ldr	r3, [pc, #648]	@ (8002570 <InferenceHeatI2CCommand+0x5a4>)
 80022e8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80022ec:	4a9f      	ldr	r2, [pc, #636]	@ (800256c <InferenceHeatI2CCommand+0x5a0>)
 80022ee:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0
		in_data[45] = filteredValue[42];
 80022f2:	4b9f      	ldr	r3, [pc, #636]	@ (8002570 <InferenceHeatI2CCommand+0x5a4>)
 80022f4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80022f8:	4a9c      	ldr	r2, [pc, #624]	@ (800256c <InferenceHeatI2CCommand+0x5a0>)
 80022fa:	f8c2 30b4 	str.w	r3, [r2, #180]	@ 0xb4
		in_data[46] = filteredValue[43];
 80022fe:	4b9c      	ldr	r3, [pc, #624]	@ (8002570 <InferenceHeatI2CCommand+0x5a4>)
 8002300:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002304:	4a99      	ldr	r2, [pc, #612]	@ (800256c <InferenceHeatI2CCommand+0x5a0>)
 8002306:	f8c2 30b8 	str.w	r3, [r2, #184]	@ 0xb8
		in_data[47] = filteredValue[44];
 800230a:	4b99      	ldr	r3, [pc, #612]	@ (8002570 <InferenceHeatI2CCommand+0x5a4>)
 800230c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002310:	4a96      	ldr	r2, [pc, #600]	@ (800256c <InferenceHeatI2CCommand+0x5a0>)
 8002312:	f8c2 30bc 	str.w	r3, [r2, #188]	@ 0xbc
		in_data[48] = filteredValue[45];
 8002316:	4b96      	ldr	r3, [pc, #600]	@ (8002570 <InferenceHeatI2CCommand+0x5a4>)
 8002318:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800231c:	4a93      	ldr	r2, [pc, #588]	@ (800256c <InferenceHeatI2CCommand+0x5a0>)
 800231e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
		in_data[49] = filteredValue[46];
 8002322:	4b93      	ldr	r3, [pc, #588]	@ (8002570 <InferenceHeatI2CCommand+0x5a4>)
 8002324:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8002328:	4a90      	ldr	r2, [pc, #576]	@ (800256c <InferenceHeatI2CCommand+0x5a0>)
 800232a:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
		in_data[50] = filteredValue[47];
 800232e:	4b90      	ldr	r3, [pc, #576]	@ (8002570 <InferenceHeatI2CCommand+0x5a4>)
 8002330:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8002334:	4a8d      	ldr	r2, [pc, #564]	@ (800256c <InferenceHeatI2CCommand+0x5a0>)
 8002336:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
		in_data[51] = filteredValue[36];
 800233a:	4b8d      	ldr	r3, [pc, #564]	@ (8002570 <InferenceHeatI2CCommand+0x5a4>)
 800233c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002340:	4a8a      	ldr	r2, [pc, #552]	@ (800256c <InferenceHeatI2CCommand+0x5a0>)
 8002342:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
		#endif

		if(tofCount == NUM_SENSOR){
 8002346:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800234a:	2b30      	cmp	r3, #48	@ 0x30
 800234c:	f040 80ea 	bne.w	8002524 <InferenceHeatI2CCommand+0x558>
	        for(int i=0; i<NUM_SENSOR;i++){HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.1f ", filteredValue[i]), 100);}
 8002350:	2300      	movs	r3, #0
 8002352:	61fb      	str	r3, [r7, #28]
 8002354:	e017      	b.n	8002386 <InferenceHeatI2CCommand+0x3ba>
 8002356:	4a86      	ldr	r2, [pc, #536]	@ (8002570 <InferenceHeatI2CCommand+0x5a4>)
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	4413      	add	r3, r2
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4618      	mov	r0, r3
 8002362:	f7fe f921 	bl	80005a8 <__aeabi_f2d>
 8002366:	4602      	mov	r2, r0
 8002368:	460b      	mov	r3, r1
 800236a:	4982      	ldr	r1, [pc, #520]	@ (8002574 <InferenceHeatI2CCommand+0x5a8>)
 800236c:	4882      	ldr	r0, [pc, #520]	@ (8002578 <InferenceHeatI2CCommand+0x5ac>)
 800236e:	f011 fa11 	bl	8013794 <siprintf>
 8002372:	4603      	mov	r3, r0
 8002374:	b29a      	uxth	r2, r3
 8002376:	2364      	movs	r3, #100	@ 0x64
 8002378:	497f      	ldr	r1, [pc, #508]	@ (8002578 <InferenceHeatI2CCommand+0x5ac>)
 800237a:	4880      	ldr	r0, [pc, #512]	@ (800257c <InferenceHeatI2CCommand+0x5b0>)
 800237c:	f006 fc94 	bl	8008ca8 <HAL_UART_Transmit>
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	3301      	adds	r3, #1
 8002384:	61fb      	str	r3, [r7, #28]
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	2b2f      	cmp	r3, #47	@ 0x2f
 800238a:	dde4      	ble.n	8002356 <InferenceHeatI2CCommand+0x38a>

			aiRun(in_data,out_data);
 800238c:	497c      	ldr	r1, [pc, #496]	@ (8002580 <InferenceHeatI2CCommand+0x5b4>)
 800238e:	4877      	ldr	r0, [pc, #476]	@ (800256c <InferenceHeatI2CCommand+0x5a0>)
 8002390:	f7fe fe98 	bl	80010c4 <aiRun>
			float sqSum= out_data[2]*out_data[2] + out_data[3]*out_data[3];
 8002394:	4b7a      	ldr	r3, [pc, #488]	@ (8002580 <InferenceHeatI2CCommand+0x5b4>)
 8002396:	ed93 7a02 	vldr	s14, [r3, #8]
 800239a:	4b79      	ldr	r3, [pc, #484]	@ (8002580 <InferenceHeatI2CCommand+0x5b4>)
 800239c:	edd3 7a02 	vldr	s15, [r3, #8]
 80023a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023a4:	4b76      	ldr	r3, [pc, #472]	@ (8002580 <InferenceHeatI2CCommand+0x5b4>)
 80023a6:	edd3 6a03 	vldr	s13, [r3, #12]
 80023aa:	4b75      	ldr	r3, [pc, #468]	@ (8002580 <InferenceHeatI2CCommand+0x5b4>)
 80023ac:	edd3 7a03 	vldr	s15, [r3, #12]
 80023b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023b8:	edc7 7a04 	vstr	s15, [r7, #16]

		if (isBelowMinusTwo>0) {
 80023bc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	f000 80af 	beq.w	8002524 <InferenceHeatI2CCommand+0x558>
		    uint32_t timestamp = HAL_GetTick();
 80023c6:	f002 fa23 	bl	8004810 <HAL_GetTick>
 80023ca:	60f8      	str	r0, [r7, #12]
				out_data[0] = (out_data[0] + 1) * (Fminmax[1] - Fminmax[0]) / 2 + Fminmax[0];
 80023cc:	4b6c      	ldr	r3, [pc, #432]	@ (8002580 <InferenceHeatI2CCommand+0x5b4>)
 80023ce:	edd3 7a00 	vldr	s15, [r3]
 80023d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80023d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80023da:	4b6a      	ldr	r3, [pc, #424]	@ (8002584 <InferenceHeatI2CCommand+0x5b8>)
 80023dc:	edd3 6a01 	vldr	s13, [r3, #4]
 80023e0:	4b68      	ldr	r3, [pc, #416]	@ (8002584 <InferenceHeatI2CCommand+0x5b8>)
 80023e2:	edd3 7a00 	vldr	s15, [r3]
 80023e6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80023ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023ee:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80023f2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80023f6:	4b63      	ldr	r3, [pc, #396]	@ (8002584 <InferenceHeatI2CCommand+0x5b8>)
 80023f8:	edd3 7a00 	vldr	s15, [r3]
 80023fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002400:	4b5f      	ldr	r3, [pc, #380]	@ (8002580 <InferenceHeatI2CCommand+0x5b4>)
 8002402:	edc3 7a00 	vstr	s15, [r3]
				out_data[1] = (out_data[1] + 1) * (Zminmax[1] - Zminmax[0]) / 2 + Zminmax[0];
 8002406:	4b5e      	ldr	r3, [pc, #376]	@ (8002580 <InferenceHeatI2CCommand+0x5b4>)
 8002408:	edd3 7a01 	vldr	s15, [r3, #4]
 800240c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002410:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002414:	4b5c      	ldr	r3, [pc, #368]	@ (8002588 <InferenceHeatI2CCommand+0x5bc>)
 8002416:	edd3 6a01 	vldr	s13, [r3, #4]
 800241a:	4b5b      	ldr	r3, [pc, #364]	@ (8002588 <InferenceHeatI2CCommand+0x5bc>)
 800241c:	edd3 7a00 	vldr	s15, [r3]
 8002420:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002424:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002428:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800242c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002430:	4b55      	ldr	r3, [pc, #340]	@ (8002588 <InferenceHeatI2CCommand+0x5bc>)
 8002432:	edd3 7a00 	vldr	s15, [r3]
 8002436:	ee77 7a27 	vadd.f32	s15, s14, s15
 800243a:	4b51      	ldr	r3, [pc, #324]	@ (8002580 <InferenceHeatI2CCommand+0x5b4>)
 800243c:	edc3 7a01 	vstr	s15, [r3, #4]
				if(out_data[1] >=144){out_data[1]=144;}
 8002440:	4b4f      	ldr	r3, [pc, #316]	@ (8002580 <InferenceHeatI2CCommand+0x5b4>)
 8002442:	edd3 7a01 	vldr	s15, [r3, #4]
 8002446:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 800258c <InferenceHeatI2CCommand+0x5c0>
 800244a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800244e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002452:	db02      	blt.n	800245a <InferenceHeatI2CCommand+0x48e>
 8002454:	4b4a      	ldr	r3, [pc, #296]	@ (8002580 <InferenceHeatI2CCommand+0x5b4>)
 8002456:	4a4e      	ldr	r2, [pc, #312]	@ (8002590 <InferenceHeatI2CCommand+0x5c4>)
 8002458:	605a      	str	r2, [r3, #4]
				if(out_data[1] <=16){out_data[1]=16;}
 800245a:	4b49      	ldr	r3, [pc, #292]	@ (8002580 <InferenceHeatI2CCommand+0x5b4>)
 800245c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002460:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 8002464:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800246c:	d803      	bhi.n	8002476 <InferenceHeatI2CCommand+0x4aa>
 800246e:	4b44      	ldr	r3, [pc, #272]	@ (8002580 <InferenceHeatI2CCommand+0x5b4>)
 8002470:	f04f 4283 	mov.w	r2, #1098907648	@ 0x41800000
 8002474:	605a      	str	r2, [r3, #4]
				if(out_data[0]>=Fminmax[0]+0.5){
 8002476:	4b42      	ldr	r3, [pc, #264]	@ (8002580 <InferenceHeatI2CCommand+0x5b4>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4618      	mov	r0, r3
 800247c:	f7fe f894 	bl	80005a8 <__aeabi_f2d>
 8002480:	4604      	mov	r4, r0
 8002482:	460d      	mov	r5, r1
 8002484:	4b3f      	ldr	r3, [pc, #252]	@ (8002584 <InferenceHeatI2CCommand+0x5b8>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4618      	mov	r0, r3
 800248a:	f7fe f88d 	bl	80005a8 <__aeabi_f2d>
 800248e:	f04f 0200 	mov.w	r2, #0
 8002492:	4b40      	ldr	r3, [pc, #256]	@ (8002594 <InferenceHeatI2CCommand+0x5c8>)
 8002494:	f7fd ff2a 	bl	80002ec <__adddf3>
 8002498:	4602      	mov	r2, r0
 800249a:	460b      	mov	r3, r1
 800249c:	4620      	mov	r0, r4
 800249e:	4629      	mov	r1, r5
 80024a0:	f7fe fb60 	bl	8000b64 <__aeabi_dcmpge>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d03c      	beq.n	8002524 <InferenceHeatI2CCommand+0x558>
					for(int k=0; k<4;k++){
 80024aa:	2300      	movs	r3, #0
 80024ac:	61bb      	str	r3, [r7, #24]
 80024ae:	e018      	b.n	80024e2 <InferenceHeatI2CCommand+0x516>
						HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", out_data[k]), 1000);
 80024b0:	4a33      	ldr	r2, [pc, #204]	@ (8002580 <InferenceHeatI2CCommand+0x5b4>)
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	4413      	add	r3, r2
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7fe f874 	bl	80005a8 <__aeabi_f2d>
 80024c0:	4602      	mov	r2, r0
 80024c2:	460b      	mov	r3, r1
 80024c4:	4934      	ldr	r1, [pc, #208]	@ (8002598 <InferenceHeatI2CCommand+0x5cc>)
 80024c6:	482c      	ldr	r0, [pc, #176]	@ (8002578 <InferenceHeatI2CCommand+0x5ac>)
 80024c8:	f011 f964 	bl	8013794 <siprintf>
 80024cc:	4603      	mov	r3, r0
 80024ce:	b29a      	uxth	r2, r3
 80024d0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024d4:	4928      	ldr	r1, [pc, #160]	@ (8002578 <InferenceHeatI2CCommand+0x5ac>)
 80024d6:	4829      	ldr	r0, [pc, #164]	@ (800257c <InferenceHeatI2CCommand+0x5b0>)
 80024d8:	f006 fbe6 	bl	8008ca8 <HAL_UART_Transmit>
					for(int k=0; k<4;k++){
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	3301      	adds	r3, #1
 80024e0:	61bb      	str	r3, [r7, #24]
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	2b03      	cmp	r3, #3
 80024e6:	dde3      	ble.n	80024b0 <InferenceHeatI2CCommand+0x4e4>
					}
					HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", sqSum), 1000);
 80024e8:	6938      	ldr	r0, [r7, #16]
 80024ea:	f7fe f85d 	bl	80005a8 <__aeabi_f2d>
 80024ee:	4602      	mov	r2, r0
 80024f0:	460b      	mov	r3, r1
 80024f2:	4929      	ldr	r1, [pc, #164]	@ (8002598 <InferenceHeatI2CCommand+0x5cc>)
 80024f4:	4820      	ldr	r0, [pc, #128]	@ (8002578 <InferenceHeatI2CCommand+0x5ac>)
 80024f6:	f011 f94d 	bl	8013794 <siprintf>
 80024fa:	4603      	mov	r3, r0
 80024fc:	b29a      	uxth	r2, r3
 80024fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002502:	491d      	ldr	r1, [pc, #116]	@ (8002578 <InferenceHeatI2CCommand+0x5ac>)
 8002504:	481d      	ldr	r0, [pc, #116]	@ (800257c <InferenceHeatI2CCommand+0x5b0>)
 8002506:	f006 fbcf 	bl	8008ca8 <HAL_UART_Transmit>
				    HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%lu ", timestamp), 1000);
 800250a:	68fa      	ldr	r2, [r7, #12]
 800250c:	4923      	ldr	r1, [pc, #140]	@ (800259c <InferenceHeatI2CCommand+0x5d0>)
 800250e:	481a      	ldr	r0, [pc, #104]	@ (8002578 <InferenceHeatI2CCommand+0x5ac>)
 8002510:	f011 f940 	bl	8013794 <siprintf>
 8002514:	4603      	mov	r3, r0
 8002516:	b29a      	uxth	r2, r3
 8002518:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800251c:	4916      	ldr	r1, [pc, #88]	@ (8002578 <InferenceHeatI2CCommand+0x5ac>)
 800251e:	4817      	ldr	r0, [pc, #92]	@ (800257c <InferenceHeatI2CCommand+0x5b0>)
 8002520:	f006 fbc2 	bl	8008ca8 <HAL_UART_Transmit>
				}
		}

		}
		do{
			endTime = HAL_GetTick();
 8002524:	f002 f974 	bl	8004810 <HAL_GetTick>
 8002528:	60b8      	str	r0, [r7, #8]
			diffTime = endTime - startTime;
 800252a:	68ba      	ldr	r2, [r7, #8]
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	607b      	str	r3, [r7, #4]
		}while (diffTime <= TIMBUDGET);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2b64      	cmp	r3, #100	@ 0x64
 8002536:	d9f5      	bls.n	8002524 <InferenceHeatI2CCommand+0x558>
		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "\n"), 100);
 8002538:	4919      	ldr	r1, [pc, #100]	@ (80025a0 <InferenceHeatI2CCommand+0x5d4>)
 800253a:	480f      	ldr	r0, [pc, #60]	@ (8002578 <InferenceHeatI2CCommand+0x5ac>)
 800253c:	f011 f92a 	bl	8013794 <siprintf>
 8002540:	4603      	mov	r3, r0
 8002542:	b29a      	uxth	r2, r3
 8002544:	2364      	movs	r3, #100	@ 0x64
 8002546:	490c      	ldr	r1, [pc, #48]	@ (8002578 <InferenceHeatI2CCommand+0x5ac>)
 8002548:	480c      	ldr	r0, [pc, #48]	@ (800257c <InferenceHeatI2CCommand+0x5b0>)
 800254a:	f006 fbad 	bl	8008ca8 <HAL_UART_Transmit>
    for (int count =0; count <50000;count ++){
 800254e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002550:	3301      	adds	r3, #1
 8002552:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002556:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 800255a:	4293      	cmp	r3, r2
 800255c:	f77f ad52 	ble.w	8002004 <InferenceHeatI2CCommand+0x38>
		//HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d\r\n",isBelowMinusTwo), 100);
    }
}
 8002560:	bf00      	nop
 8002562:	bf00      	nop
 8002564:	3730      	adds	r7, #48	@ 0x30
 8002566:	46bd      	mov	sp, r7
 8002568:	bdb0      	pop	{r4, r5, r7, pc}
 800256a:	bf00      	nop
 800256c:	20002440 	.word	0x20002440
 8002570:	20007694 	.word	0x20007694
 8002574:	08018840 	.word	0x08018840
 8002578:	20007850 	.word	0x20007850
 800257c:	200077c8 	.word	0x200077c8
 8002580:	20002520 	.word	0x20002520
 8002584:	200002c8 	.word	0x200002c8
 8002588:	200002d0 	.word	0x200002d0
 800258c:	43100000 	.word	0x43100000
 8002590:	43100000 	.word	0x43100000
 8002594:	3fe00000 	.word	0x3fe00000
 8002598:	08018960 	.word	0x08018960
 800259c:	0801896c 	.word	0x0801896c
 80025a0:	08018968 	.word	0x08018968
 80025a4:	00000000 	.word	0x00000000

080025a8 <PointingVertical>:

void PointingVertical(){
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b08e      	sub	sp, #56	@ 0x38
 80025ac:	af00      	add	r7, sp, #0

	SetI2CCommand();
 80025ae:	f7ff f8f3 	bl	8001798 <SetI2CCommand>
	SensorI2CCommand();
 80025b2:	f7fe fff9 	bl	80015a8 <SensorI2CCommand>
	ResetAllDevices();
 80025b6:	f002 f80b 	bl	80045d0 <ResetAllDevices>
	setOnAllDevices();
 80025ba:	f002 f885 	bl	80046c8 <setOnAllDevices>


	for(int i = 0; i < 5; i++) {
 80025be:	2300      	movs	r3, #0
 80025c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80025c2:	e31a      	b.n	8002bfa <PointingVertical+0x652>

	    uint32_t ServoStartTime = HAL_GetTick(); // 시작 시간 기록
 80025c4:	f002 f924 	bl	8004810 <HAL_GetTick>
 80025c8:	61f8      	str	r0, [r7, #28]
	        servo_angle(&htim2, TIM_CHANNEL_1, 10);
 80025ca:	220a      	movs	r2, #10
 80025cc:	2100      	movs	r1, #0
 80025ce:	4808      	ldr	r0, [pc, #32]	@ (80025f0 <PointingVertical+0x48>)
 80025d0:	f001 fc0a 	bl	8003de8 <servo_angle>
	        HAL_Delay(1000);
 80025d4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80025d8:	f002 f926 	bl	8004828 <HAL_Delay>
		    while(HAL_GetTick() - ServoStartTime < 7000) {
 80025dc:	e2ef      	b.n	8002bbe <PointingVertical+0x616>
	        uint32_t startTime, endTime, diffTime;
	        uint8_t tofCount =0;
 80025de:	2300      	movs	r3, #0
 80025e0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			startTime = HAL_GetTick();
 80025e4:	f002 f914 	bl	8004810 <HAL_GetTick>
 80025e8:	61b8      	str	r0, [r7, #24]
			for (int i = 0; i < NUM_SENSOR; i++) {
 80025ea:	2300      	movs	r3, #0
 80025ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80025ee:	e073      	b.n	80026d8 <PointingVertical+0x130>
 80025f0:	20007778 	.word	0x20007778
				Dev = &vl53l0x_s[i];
 80025f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025f6:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80025fa:	fb02 f303 	mul.w	r3, r2, r3
 80025fe:	4a9b      	ldr	r2, [pc, #620]	@ (800286c <PointingVertical+0x2c4>)
 8002600:	4413      	add	r3, r2
 8002602:	4a9b      	ldr	r2, [pc, #620]	@ (8002870 <PointingVertical+0x2c8>)
 8002604:	6013      	str	r3, [r2, #0]
				VL53L0X_PerformContinuousRangingMeasurement(Dev, &RangingData); // 1500 uss
 8002606:	4b9a      	ldr	r3, [pc, #616]	@ (8002870 <PointingVertical+0x2c8>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	499a      	ldr	r1, [pc, #616]	@ (8002874 <PointingVertical+0x2cc>)
 800260c:	4618      	mov	r0, r3
 800260e:	f009 f91f 	bl	800b850 <VL53L0X_PerformContinuousRangingMeasurement>
				if (RangingData.RangeStatus == 0) {
 8002612:	4b98      	ldr	r3, [pc, #608]	@ (8002874 <PointingVertical+0x2cc>)
 8002614:	7e1b      	ldrb	r3, [r3, #24]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d15b      	bne.n	80026d2 <PointingVertical+0x12a>
				  if (RangingData.RangeMilliMeter < sensorAverages[i]+20) {
 800261a:	4b96      	ldr	r3, [pc, #600]	@ (8002874 <PointingVertical+0x2cc>)
 800261c:	891b      	ldrh	r3, [r3, #8]
 800261e:	ee07 3a90 	vmov	s15, r3
 8002622:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002626:	4a94      	ldr	r2, [pc, #592]	@ (8002878 <PointingVertical+0x2d0>)
 8002628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	4413      	add	r3, r2
 800262e:	edd3 7a00 	vldr	s15, [r3]
 8002632:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 8002636:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800263a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800263e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002642:	d546      	bpl.n	80026d2 <PointingVertical+0x12a>
					filteredValue[i] = Kalman_Estimate(&filters[i], RangingData.RangeMilliMeter); // 500 us
 8002644:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002646:	4613      	mov	r3, r2
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	4413      	add	r3, r2
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	4a8b      	ldr	r2, [pc, #556]	@ (800287c <PointingVertical+0x2d4>)
 8002650:	4413      	add	r3, r2
 8002652:	4a88      	ldr	r2, [pc, #544]	@ (8002874 <PointingVertical+0x2cc>)
 8002654:	8912      	ldrh	r2, [r2, #8]
 8002656:	ee07 2a90 	vmov	s15, r2
 800265a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800265e:	eeb0 0a67 	vmov.f32	s0, s15
 8002662:	4618      	mov	r0, r3
 8002664:	f001 f804 	bl	8003670 <Kalman_Estimate>
 8002668:	eef0 7a40 	vmov.f32	s15, s0
 800266c:	4a84      	ldr	r2, [pc, #528]	@ (8002880 <PointingVertical+0x2d8>)
 800266e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	4413      	add	r3, r2
 8002674:	edc3 7a00 	vstr	s15, [r3]
					filteredValue[i] -= sensorAverages[i];
 8002678:	4a81      	ldr	r2, [pc, #516]	@ (8002880 <PointingVertical+0x2d8>)
 800267a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	4413      	add	r3, r2
 8002680:	ed93 7a00 	vldr	s14, [r3]
 8002684:	4a7c      	ldr	r2, [pc, #496]	@ (8002878 <PointingVertical+0x2d0>)
 8002686:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	4413      	add	r3, r2
 800268c:	edd3 7a00 	vldr	s15, [r3]
 8002690:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002694:	4a7a      	ldr	r2, [pc, #488]	@ (8002880 <PointingVertical+0x2d8>)
 8002696:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	4413      	add	r3, r2
 800269c:	edc3 7a00 	vstr	s15, [r3]
					//filteredValue[i] -= Xmean[i];
					filteredValue[i] /= Xstd[i];
 80026a0:	4a77      	ldr	r2, [pc, #476]	@ (8002880 <PointingVertical+0x2d8>)
 80026a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	4413      	add	r3, r2
 80026a8:	edd3 6a00 	vldr	s13, [r3]
 80026ac:	4a75      	ldr	r2, [pc, #468]	@ (8002884 <PointingVertical+0x2dc>)
 80026ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	4413      	add	r3, r2
 80026b4:	ed93 7a00 	vldr	s14, [r3]
 80026b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026bc:	4a70      	ldr	r2, [pc, #448]	@ (8002880 <PointingVertical+0x2d8>)
 80026be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	4413      	add	r3, r2
 80026c4:	edc3 7a00 	vstr	s15, [r3]
					tofCount++;
 80026c8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80026cc:	3301      	adds	r3, #1
 80026ce:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			for (int i = 0; i < NUM_SENSOR; i++) {
 80026d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026d4:	3301      	adds	r3, #1
 80026d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80026d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026da:	2b2f      	cmp	r3, #47	@ 0x2f
 80026dc:	dd8a      	ble.n	80025f4 <PointingVertical+0x4c>
				  }
				}
			}

			in_data[0] = filteredValue[0];
 80026de:	4b68      	ldr	r3, [pc, #416]	@ (8002880 <PointingVertical+0x2d8>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a69      	ldr	r2, [pc, #420]	@ (8002888 <PointingVertical+0x2e0>)
 80026e4:	6013      	str	r3, [r2, #0]
			in_data[1] = filteredValue[1];
 80026e6:	4b66      	ldr	r3, [pc, #408]	@ (8002880 <PointingVertical+0x2d8>)
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	4a67      	ldr	r2, [pc, #412]	@ (8002888 <PointingVertical+0x2e0>)
 80026ec:	6053      	str	r3, [r2, #4]
			in_data[2] = filteredValue[2];
 80026ee:	4b64      	ldr	r3, [pc, #400]	@ (8002880 <PointingVertical+0x2d8>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	4a65      	ldr	r2, [pc, #404]	@ (8002888 <PointingVertical+0x2e0>)
 80026f4:	6093      	str	r3, [r2, #8]
			in_data[3] = filteredValue[3];
 80026f6:	4b62      	ldr	r3, [pc, #392]	@ (8002880 <PointingVertical+0x2d8>)
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	4a63      	ldr	r2, [pc, #396]	@ (8002888 <PointingVertical+0x2e0>)
 80026fc:	60d3      	str	r3, [r2, #12]
			in_data[4] = filteredValue[4];
 80026fe:	4b60      	ldr	r3, [pc, #384]	@ (8002880 <PointingVertical+0x2d8>)
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	4a61      	ldr	r2, [pc, #388]	@ (8002888 <PointingVertical+0x2e0>)
 8002704:	6113      	str	r3, [r2, #16]
			in_data[5] = filteredValue[5];
 8002706:	4b5e      	ldr	r3, [pc, #376]	@ (8002880 <PointingVertical+0x2d8>)
 8002708:	695b      	ldr	r3, [r3, #20]
 800270a:	4a5f      	ldr	r2, [pc, #380]	@ (8002888 <PointingVertical+0x2e0>)
 800270c:	6153      	str	r3, [r2, #20]
			in_data[6] = filteredValue[6];
 800270e:	4b5c      	ldr	r3, [pc, #368]	@ (8002880 <PointingVertical+0x2d8>)
 8002710:	699b      	ldr	r3, [r3, #24]
 8002712:	4a5d      	ldr	r2, [pc, #372]	@ (8002888 <PointingVertical+0x2e0>)
 8002714:	6193      	str	r3, [r2, #24]
			in_data[7] = filteredValue[7];
 8002716:	4b5a      	ldr	r3, [pc, #360]	@ (8002880 <PointingVertical+0x2d8>)
 8002718:	69db      	ldr	r3, [r3, #28]
 800271a:	4a5b      	ldr	r2, [pc, #364]	@ (8002888 <PointingVertical+0x2e0>)
 800271c:	61d3      	str	r3, [r2, #28]
			in_data[8] = filteredValue[8];
 800271e:	4b58      	ldr	r3, [pc, #352]	@ (8002880 <PointingVertical+0x2d8>)
 8002720:	6a1b      	ldr	r3, [r3, #32]
 8002722:	4a59      	ldr	r2, [pc, #356]	@ (8002888 <PointingVertical+0x2e0>)
 8002724:	6213      	str	r3, [r2, #32]
			in_data[9] = filteredValue[9];
 8002726:	4b56      	ldr	r3, [pc, #344]	@ (8002880 <PointingVertical+0x2d8>)
 8002728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800272a:	4a57      	ldr	r2, [pc, #348]	@ (8002888 <PointingVertical+0x2e0>)
 800272c:	6253      	str	r3, [r2, #36]	@ 0x24
			in_data[10] = filteredValue[10];
 800272e:	4b54      	ldr	r3, [pc, #336]	@ (8002880 <PointingVertical+0x2d8>)
 8002730:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002732:	4a55      	ldr	r2, [pc, #340]	@ (8002888 <PointingVertical+0x2e0>)
 8002734:	6293      	str	r3, [r2, #40]	@ 0x28
			in_data[11] = filteredValue[11];
 8002736:	4b52      	ldr	r3, [pc, #328]	@ (8002880 <PointingVertical+0x2d8>)
 8002738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800273a:	4a53      	ldr	r2, [pc, #332]	@ (8002888 <PointingVertical+0x2e0>)
 800273c:	62d3      	str	r3, [r2, #44]	@ 0x2c
			in_data[12] = filteredValue[0];
 800273e:	4b50      	ldr	r3, [pc, #320]	@ (8002880 <PointingVertical+0x2d8>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a51      	ldr	r2, [pc, #324]	@ (8002888 <PointingVertical+0x2e0>)
 8002744:	6313      	str	r3, [r2, #48]	@ 0x30

			in_data[13] = filteredValue[12];
 8002746:	4b4e      	ldr	r3, [pc, #312]	@ (8002880 <PointingVertical+0x2d8>)
 8002748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800274a:	4a4f      	ldr	r2, [pc, #316]	@ (8002888 <PointingVertical+0x2e0>)
 800274c:	6353      	str	r3, [r2, #52]	@ 0x34
			in_data[14] = filteredValue[13];
 800274e:	4b4c      	ldr	r3, [pc, #304]	@ (8002880 <PointingVertical+0x2d8>)
 8002750:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002752:	4a4d      	ldr	r2, [pc, #308]	@ (8002888 <PointingVertical+0x2e0>)
 8002754:	6393      	str	r3, [r2, #56]	@ 0x38
			in_data[15] = filteredValue[14];
 8002756:	4b4a      	ldr	r3, [pc, #296]	@ (8002880 <PointingVertical+0x2d8>)
 8002758:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800275a:	4a4b      	ldr	r2, [pc, #300]	@ (8002888 <PointingVertical+0x2e0>)
 800275c:	63d3      	str	r3, [r2, #60]	@ 0x3c
			in_data[16] = filteredValue[15];
 800275e:	4b48      	ldr	r3, [pc, #288]	@ (8002880 <PointingVertical+0x2d8>)
 8002760:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002762:	4a49      	ldr	r2, [pc, #292]	@ (8002888 <PointingVertical+0x2e0>)
 8002764:	6413      	str	r3, [r2, #64]	@ 0x40
			in_data[17] = filteredValue[16];
 8002766:	4b46      	ldr	r3, [pc, #280]	@ (8002880 <PointingVertical+0x2d8>)
 8002768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276a:	4a47      	ldr	r2, [pc, #284]	@ (8002888 <PointingVertical+0x2e0>)
 800276c:	6453      	str	r3, [r2, #68]	@ 0x44
			in_data[18] = filteredValue[17];
 800276e:	4b44      	ldr	r3, [pc, #272]	@ (8002880 <PointingVertical+0x2d8>)
 8002770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002772:	4a45      	ldr	r2, [pc, #276]	@ (8002888 <PointingVertical+0x2e0>)
 8002774:	6493      	str	r3, [r2, #72]	@ 0x48
			in_data[19] = filteredValue[18];
 8002776:	4b42      	ldr	r3, [pc, #264]	@ (8002880 <PointingVertical+0x2d8>)
 8002778:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800277a:	4a43      	ldr	r2, [pc, #268]	@ (8002888 <PointingVertical+0x2e0>)
 800277c:	64d3      	str	r3, [r2, #76]	@ 0x4c
			in_data[20] = filteredValue[19];
 800277e:	4b40      	ldr	r3, [pc, #256]	@ (8002880 <PointingVertical+0x2d8>)
 8002780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002782:	4a41      	ldr	r2, [pc, #260]	@ (8002888 <PointingVertical+0x2e0>)
 8002784:	6513      	str	r3, [r2, #80]	@ 0x50
			in_data[21] = filteredValue[20];
 8002786:	4b3e      	ldr	r3, [pc, #248]	@ (8002880 <PointingVertical+0x2d8>)
 8002788:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800278a:	4a3f      	ldr	r2, [pc, #252]	@ (8002888 <PointingVertical+0x2e0>)
 800278c:	6553      	str	r3, [r2, #84]	@ 0x54
			in_data[22] = filteredValue[21];
 800278e:	4b3c      	ldr	r3, [pc, #240]	@ (8002880 <PointingVertical+0x2d8>)
 8002790:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002792:	4a3d      	ldr	r2, [pc, #244]	@ (8002888 <PointingVertical+0x2e0>)
 8002794:	6593      	str	r3, [r2, #88]	@ 0x58
			in_data[23] = filteredValue[22];
 8002796:	4b3a      	ldr	r3, [pc, #232]	@ (8002880 <PointingVertical+0x2d8>)
 8002798:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800279a:	4a3b      	ldr	r2, [pc, #236]	@ (8002888 <PointingVertical+0x2e0>)
 800279c:	65d3      	str	r3, [r2, #92]	@ 0x5c
			in_data[24] = filteredValue[23];
 800279e:	4b38      	ldr	r3, [pc, #224]	@ (8002880 <PointingVertical+0x2d8>)
 80027a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027a2:	4a39      	ldr	r2, [pc, #228]	@ (8002888 <PointingVertical+0x2e0>)
 80027a4:	6613      	str	r3, [r2, #96]	@ 0x60
			in_data[25] = filteredValue[12];
 80027a6:	4b36      	ldr	r3, [pc, #216]	@ (8002880 <PointingVertical+0x2d8>)
 80027a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027aa:	4a37      	ldr	r2, [pc, #220]	@ (8002888 <PointingVertical+0x2e0>)
 80027ac:	6653      	str	r3, [r2, #100]	@ 0x64
			#if NUM_SENSOR >= 36
			in_data[26] = filteredValue[24];
 80027ae:	4b34      	ldr	r3, [pc, #208]	@ (8002880 <PointingVertical+0x2d8>)
 80027b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027b2:	4a35      	ldr	r2, [pc, #212]	@ (8002888 <PointingVertical+0x2e0>)
 80027b4:	6693      	str	r3, [r2, #104]	@ 0x68
			in_data[27] = filteredValue[25];
 80027b6:	4b32      	ldr	r3, [pc, #200]	@ (8002880 <PointingVertical+0x2d8>)
 80027b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80027ba:	4a33      	ldr	r2, [pc, #204]	@ (8002888 <PointingVertical+0x2e0>)
 80027bc:	66d3      	str	r3, [r2, #108]	@ 0x6c
			in_data[28] = filteredValue[26];
 80027be:	4b30      	ldr	r3, [pc, #192]	@ (8002880 <PointingVertical+0x2d8>)
 80027c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80027c2:	4a31      	ldr	r2, [pc, #196]	@ (8002888 <PointingVertical+0x2e0>)
 80027c4:	6713      	str	r3, [r2, #112]	@ 0x70
			in_data[29] = filteredValue[27];
 80027c6:	4b2e      	ldr	r3, [pc, #184]	@ (8002880 <PointingVertical+0x2d8>)
 80027c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027ca:	4a2f      	ldr	r2, [pc, #188]	@ (8002888 <PointingVertical+0x2e0>)
 80027cc:	6753      	str	r3, [r2, #116]	@ 0x74
			in_data[30] = filteredValue[28];
 80027ce:	4b2c      	ldr	r3, [pc, #176]	@ (8002880 <PointingVertical+0x2d8>)
 80027d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027d2:	4a2d      	ldr	r2, [pc, #180]	@ (8002888 <PointingVertical+0x2e0>)
 80027d4:	6793      	str	r3, [r2, #120]	@ 0x78
			in_data[31] = filteredValue[29];
 80027d6:	4b2a      	ldr	r3, [pc, #168]	@ (8002880 <PointingVertical+0x2d8>)
 80027d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027da:	4a2b      	ldr	r2, [pc, #172]	@ (8002888 <PointingVertical+0x2e0>)
 80027dc:	67d3      	str	r3, [r2, #124]	@ 0x7c
			in_data[32] = filteredValue[30];
 80027de:	4b28      	ldr	r3, [pc, #160]	@ (8002880 <PointingVertical+0x2d8>)
 80027e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80027e2:	4a29      	ldr	r2, [pc, #164]	@ (8002888 <PointingVertical+0x2e0>)
 80027e4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
			in_data[33] = filteredValue[31];
 80027e8:	4b25      	ldr	r3, [pc, #148]	@ (8002880 <PointingVertical+0x2d8>)
 80027ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80027ec:	4a26      	ldr	r2, [pc, #152]	@ (8002888 <PointingVertical+0x2e0>)
 80027ee:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
			in_data[34] = filteredValue[32];
 80027f2:	4b23      	ldr	r3, [pc, #140]	@ (8002880 <PointingVertical+0x2d8>)
 80027f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80027f8:	4a23      	ldr	r2, [pc, #140]	@ (8002888 <PointingVertical+0x2e0>)
 80027fa:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
			in_data[35] = filteredValue[33];
 80027fe:	4b20      	ldr	r3, [pc, #128]	@ (8002880 <PointingVertical+0x2d8>)
 8002800:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002804:	4a20      	ldr	r2, [pc, #128]	@ (8002888 <PointingVertical+0x2e0>)
 8002806:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
			in_data[36] = filteredValue[34];
 800280a:	4b1d      	ldr	r3, [pc, #116]	@ (8002880 <PointingVertical+0x2d8>)
 800280c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002810:	4a1d      	ldr	r2, [pc, #116]	@ (8002888 <PointingVertical+0x2e0>)
 8002812:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
			in_data[37] = filteredValue[35];
 8002816:	4b1a      	ldr	r3, [pc, #104]	@ (8002880 <PointingVertical+0x2d8>)
 8002818:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800281c:	4a1a      	ldr	r2, [pc, #104]	@ (8002888 <PointingVertical+0x2e0>)
 800281e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
			in_data[38] = filteredValue[24];
 8002822:	4b17      	ldr	r3, [pc, #92]	@ (8002880 <PointingVertical+0x2d8>)
 8002824:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002826:	4a18      	ldr	r2, [pc, #96]	@ (8002888 <PointingVertical+0x2e0>)
 8002828:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
			#endif
			#if NUM_SENSOR >= 48
			in_data[39] = filteredValue[36];
 800282c:	4b14      	ldr	r3, [pc, #80]	@ (8002880 <PointingVertical+0x2d8>)
 800282e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002832:	4a15      	ldr	r2, [pc, #84]	@ (8002888 <PointingVertical+0x2e0>)
 8002834:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
			in_data[40] = filteredValue[37];
 8002838:	4b11      	ldr	r3, [pc, #68]	@ (8002880 <PointingVertical+0x2d8>)
 800283a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800283e:	4a12      	ldr	r2, [pc, #72]	@ (8002888 <PointingVertical+0x2e0>)
 8002840:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
			in_data[41] = filteredValue[38];
 8002844:	4b0e      	ldr	r3, [pc, #56]	@ (8002880 <PointingVertical+0x2d8>)
 8002846:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800284a:	4a0f      	ldr	r2, [pc, #60]	@ (8002888 <PointingVertical+0x2e0>)
 800284c:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
			in_data[42] = filteredValue[39];
 8002850:	4b0b      	ldr	r3, [pc, #44]	@ (8002880 <PointingVertical+0x2d8>)
 8002852:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002856:	4a0c      	ldr	r2, [pc, #48]	@ (8002888 <PointingVertical+0x2e0>)
 8002858:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
			in_data[43] = filteredValue[40];
 800285c:	4b08      	ldr	r3, [pc, #32]	@ (8002880 <PointingVertical+0x2d8>)
 800285e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8002862:	4a09      	ldr	r2, [pc, #36]	@ (8002888 <PointingVertical+0x2e0>)
 8002864:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac
 8002868:	e010      	b.n	800288c <PointingVertical+0x2e4>
 800286a:	bf00      	nop
 800286c:	20007a70 	.word	0x20007a70
 8002870:	2000c570 	.word	0x2000c570
 8002874:	200078d4 	.word	0x200078d4
 8002878:	20007038 	.word	0x20007038
 800287c:	200072d4 	.word	0x200072d4
 8002880:	20007694 	.word	0x20007694
 8002884:	20000208 	.word	0x20000208
 8002888:	20002440 	.word	0x20002440
			in_data[44] = filteredValue[41];
 800288c:	4b92      	ldr	r3, [pc, #584]	@ (8002ad8 <PointingVertical+0x530>)
 800288e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002892:	4a92      	ldr	r2, [pc, #584]	@ (8002adc <PointingVertical+0x534>)
 8002894:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0
			in_data[45] = filteredValue[42];
 8002898:	4b8f      	ldr	r3, [pc, #572]	@ (8002ad8 <PointingVertical+0x530>)
 800289a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800289e:	4a8f      	ldr	r2, [pc, #572]	@ (8002adc <PointingVertical+0x534>)
 80028a0:	f8c2 30b4 	str.w	r3, [r2, #180]	@ 0xb4
			in_data[46] = filteredValue[43];
 80028a4:	4b8c      	ldr	r3, [pc, #560]	@ (8002ad8 <PointingVertical+0x530>)
 80028a6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80028aa:	4a8c      	ldr	r2, [pc, #560]	@ (8002adc <PointingVertical+0x534>)
 80028ac:	f8c2 30b8 	str.w	r3, [r2, #184]	@ 0xb8
			in_data[47] = filteredValue[44];
 80028b0:	4b89      	ldr	r3, [pc, #548]	@ (8002ad8 <PointingVertical+0x530>)
 80028b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80028b6:	4a89      	ldr	r2, [pc, #548]	@ (8002adc <PointingVertical+0x534>)
 80028b8:	f8c2 30bc 	str.w	r3, [r2, #188]	@ 0xbc
			in_data[48] = filteredValue[45];
 80028bc:	4b86      	ldr	r3, [pc, #536]	@ (8002ad8 <PointingVertical+0x530>)
 80028be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80028c2:	4a86      	ldr	r2, [pc, #536]	@ (8002adc <PointingVertical+0x534>)
 80028c4:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
			in_data[49] = filteredValue[46];
 80028c8:	4b83      	ldr	r3, [pc, #524]	@ (8002ad8 <PointingVertical+0x530>)
 80028ca:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80028ce:	4a83      	ldr	r2, [pc, #524]	@ (8002adc <PointingVertical+0x534>)
 80028d0:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
			in_data[50] = filteredValue[47];
 80028d4:	4b80      	ldr	r3, [pc, #512]	@ (8002ad8 <PointingVertical+0x530>)
 80028d6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80028da:	4a80      	ldr	r2, [pc, #512]	@ (8002adc <PointingVertical+0x534>)
 80028dc:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
			in_data[51] = filteredValue[36];
 80028e0:	4b7d      	ldr	r3, [pc, #500]	@ (8002ad8 <PointingVertical+0x530>)
 80028e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028e6:	4a7d      	ldr	r2, [pc, #500]	@ (8002adc <PointingVertical+0x534>)
 80028e8:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
			#endif

			if(tofCount == NUM_SENSOR){
 80028ec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80028f0:	2b30      	cmp	r3, #48	@ 0x30
 80028f2:	f040 814f 	bne.w	8002b94 <PointingVertical+0x5ec>
				for(int i=0; i<NUM_SENSOR;i++){HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.1f ", filteredValue[i]), 100);}
 80028f6:	2300      	movs	r3, #0
 80028f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80028fa:	e017      	b.n	800292c <PointingVertical+0x384>
 80028fc:	4a76      	ldr	r2, [pc, #472]	@ (8002ad8 <PointingVertical+0x530>)
 80028fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	4413      	add	r3, r2
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4618      	mov	r0, r3
 8002908:	f7fd fe4e 	bl	80005a8 <__aeabi_f2d>
 800290c:	4602      	mov	r2, r0
 800290e:	460b      	mov	r3, r1
 8002910:	4973      	ldr	r1, [pc, #460]	@ (8002ae0 <PointingVertical+0x538>)
 8002912:	4874      	ldr	r0, [pc, #464]	@ (8002ae4 <PointingVertical+0x53c>)
 8002914:	f010 ff3e 	bl	8013794 <siprintf>
 8002918:	4603      	mov	r3, r0
 800291a:	b29a      	uxth	r2, r3
 800291c:	2364      	movs	r3, #100	@ 0x64
 800291e:	4971      	ldr	r1, [pc, #452]	@ (8002ae4 <PointingVertical+0x53c>)
 8002920:	4871      	ldr	r0, [pc, #452]	@ (8002ae8 <PointingVertical+0x540>)
 8002922:	f006 f9c1 	bl	8008ca8 <HAL_UART_Transmit>
 8002926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002928:	3301      	adds	r3, #1
 800292a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800292c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800292e:	2b2f      	cmp	r3, #47	@ 0x2f
 8002930:	dde4      	ble.n	80028fc <PointingVertical+0x354>
				int a =0;
 8002932:	2300      	movs	r3, #0
 8002934:	617b      	str	r3, [r7, #20]
				aiRun(in_data,out_data);
 8002936:	496d      	ldr	r1, [pc, #436]	@ (8002aec <PointingVertical+0x544>)
 8002938:	4868      	ldr	r0, [pc, #416]	@ (8002adc <PointingVertical+0x534>)
 800293a:	f7fe fbc3 	bl	80010c4 <aiRun>
				float sqSum= out_data[2]*out_data[2] + out_data[3]*out_data[3];
 800293e:	4b6b      	ldr	r3, [pc, #428]	@ (8002aec <PointingVertical+0x544>)
 8002940:	ed93 7a02 	vldr	s14, [r3, #8]
 8002944:	4b69      	ldr	r3, [pc, #420]	@ (8002aec <PointingVertical+0x544>)
 8002946:	edd3 7a02 	vldr	s15, [r3, #8]
 800294a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800294e:	4b67      	ldr	r3, [pc, #412]	@ (8002aec <PointingVertical+0x544>)
 8002950:	edd3 6a03 	vldr	s13, [r3, #12]
 8002954:	4b65      	ldr	r3, [pc, #404]	@ (8002aec <PointingVertical+0x544>)
 8002956:	edd3 7a03 	vldr	s15, [r3, #12]
 800295a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800295e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002962:	edc7 7a04 	vstr	s15, [r7, #16]
				//float sqrange = 0.08;
				uint32_t timestamp = HAL_GetTick();
 8002966:	f001 ff53 	bl	8004810 <HAL_GetTick>
 800296a:	60f8      	str	r0, [r7, #12]
				if(sqSum>=0.97){
 800296c:	6938      	ldr	r0, [r7, #16]
 800296e:	f7fd fe1b 	bl	80005a8 <__aeabi_f2d>
 8002972:	a357      	add	r3, pc, #348	@ (adr r3, 8002ad0 <PointingVertical+0x528>)
 8002974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002978:	f7fe f8f4 	bl	8000b64 <__aeabi_dcmpge>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	f000 809f 	beq.w	8002ac2 <PointingVertical+0x51a>
					out_data[0] = (out_data[0] + 1) * (Fminmax[1] - Fminmax[0]) / 2 + Fminmax[0];
 8002984:	4b59      	ldr	r3, [pc, #356]	@ (8002aec <PointingVertical+0x544>)
 8002986:	edd3 7a00 	vldr	s15, [r3]
 800298a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800298e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002992:	4b57      	ldr	r3, [pc, #348]	@ (8002af0 <PointingVertical+0x548>)
 8002994:	edd3 6a01 	vldr	s13, [r3, #4]
 8002998:	4b55      	ldr	r3, [pc, #340]	@ (8002af0 <PointingVertical+0x548>)
 800299a:	edd3 7a00 	vldr	s15, [r3]
 800299e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80029a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029a6:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80029aa:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80029ae:	4b50      	ldr	r3, [pc, #320]	@ (8002af0 <PointingVertical+0x548>)
 80029b0:	edd3 7a00 	vldr	s15, [r3]
 80029b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029b8:	4b4c      	ldr	r3, [pc, #304]	@ (8002aec <PointingVertical+0x544>)
 80029ba:	edc3 7a00 	vstr	s15, [r3]
					out_data[1] = (out_data[1] + 1) * (Zminmax[1] - Zminmax[0]) / 2 + Zminmax[0];
 80029be:	4b4b      	ldr	r3, [pc, #300]	@ (8002aec <PointingVertical+0x544>)
 80029c0:	edd3 7a01 	vldr	s15, [r3, #4]
 80029c4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80029c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80029cc:	4b49      	ldr	r3, [pc, #292]	@ (8002af4 <PointingVertical+0x54c>)
 80029ce:	edd3 6a01 	vldr	s13, [r3, #4]
 80029d2:	4b48      	ldr	r3, [pc, #288]	@ (8002af4 <PointingVertical+0x54c>)
 80029d4:	edd3 7a00 	vldr	s15, [r3]
 80029d8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80029dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029e0:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80029e4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80029e8:	4b42      	ldr	r3, [pc, #264]	@ (8002af4 <PointingVertical+0x54c>)
 80029ea:	edd3 7a00 	vldr	s15, [r3]
 80029ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029f2:	4b3e      	ldr	r3, [pc, #248]	@ (8002aec <PointingVertical+0x544>)
 80029f4:	edc3 7a01 	vstr	s15, [r3, #4]
					if(out_data[1] >=144){out_data[1]=144;}
 80029f8:	4b3c      	ldr	r3, [pc, #240]	@ (8002aec <PointingVertical+0x544>)
 80029fa:	edd3 7a01 	vldr	s15, [r3, #4]
 80029fe:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8002af8 <PointingVertical+0x550>
 8002a02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a0a:	db02      	blt.n	8002a12 <PointingVertical+0x46a>
 8002a0c:	4b37      	ldr	r3, [pc, #220]	@ (8002aec <PointingVertical+0x544>)
 8002a0e:	4a3b      	ldr	r2, [pc, #236]	@ (8002afc <PointingVertical+0x554>)
 8002a10:	605a      	str	r2, [r3, #4]
					if(out_data[1] <=16){out_data[1]=16;}
 8002a12:	4b36      	ldr	r3, [pc, #216]	@ (8002aec <PointingVertical+0x544>)
 8002a14:	edd3 7a01 	vldr	s15, [r3, #4]
 8002a18:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 8002a1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a24:	d803      	bhi.n	8002a2e <PointingVertical+0x486>
 8002a26:	4b31      	ldr	r3, [pc, #196]	@ (8002aec <PointingVertical+0x544>)
 8002a28:	f04f 4283 	mov.w	r2, #1098907648	@ 0x41800000
 8002a2c:	605a      	str	r2, [r3, #4]
					if(out_data[0]>=Fminmax[0]){
 8002a2e:	4b2f      	ldr	r3, [pc, #188]	@ (8002aec <PointingVertical+0x544>)
 8002a30:	ed93 7a00 	vldr	s14, [r3]
 8002a34:	4b2e      	ldr	r3, [pc, #184]	@ (8002af0 <PointingVertical+0x548>)
 8002a36:	edd3 7a00 	vldr	s15, [r3]
 8002a3a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a42:	f2c0 80a7 	blt.w	8002b94 <PointingVertical+0x5ec>
						for(int k=0; k<4;k++){
 8002a46:	2300      	movs	r3, #0
 8002a48:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a4a:	e018      	b.n	8002a7e <PointingVertical+0x4d6>
							HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", out_data[k]), 1000);
 8002a4c:	4a27      	ldr	r2, [pc, #156]	@ (8002aec <PointingVertical+0x544>)
 8002a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	4413      	add	r3, r2
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7fd fda6 	bl	80005a8 <__aeabi_f2d>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	460b      	mov	r3, r1
 8002a60:	4927      	ldr	r1, [pc, #156]	@ (8002b00 <PointingVertical+0x558>)
 8002a62:	4820      	ldr	r0, [pc, #128]	@ (8002ae4 <PointingVertical+0x53c>)
 8002a64:	f010 fe96 	bl	8013794 <siprintf>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	b29a      	uxth	r2, r3
 8002a6c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a70:	491c      	ldr	r1, [pc, #112]	@ (8002ae4 <PointingVertical+0x53c>)
 8002a72:	481d      	ldr	r0, [pc, #116]	@ (8002ae8 <PointingVertical+0x540>)
 8002a74:	f006 f918 	bl	8008ca8 <HAL_UART_Transmit>
						for(int k=0; k<4;k++){
 8002a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a80:	2b03      	cmp	r3, #3
 8002a82:	dde3      	ble.n	8002a4c <PointingVertical+0x4a4>
						}
						HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", sqSum), 1000);
 8002a84:	6938      	ldr	r0, [r7, #16]
 8002a86:	f7fd fd8f 	bl	80005a8 <__aeabi_f2d>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	491c      	ldr	r1, [pc, #112]	@ (8002b00 <PointingVertical+0x558>)
 8002a90:	4814      	ldr	r0, [pc, #80]	@ (8002ae4 <PointingVertical+0x53c>)
 8002a92:	f010 fe7f 	bl	8013794 <siprintf>
 8002a96:	4603      	mov	r3, r0
 8002a98:	b29a      	uxth	r2, r3
 8002a9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a9e:	4911      	ldr	r1, [pc, #68]	@ (8002ae4 <PointingVertical+0x53c>)
 8002aa0:	4811      	ldr	r0, [pc, #68]	@ (8002ae8 <PointingVertical+0x540>)
 8002aa2:	f006 f901 	bl	8008ca8 <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%lu ", timestamp), 1000);
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	4916      	ldr	r1, [pc, #88]	@ (8002b04 <PointingVertical+0x55c>)
 8002aaa:	480e      	ldr	r0, [pc, #56]	@ (8002ae4 <PointingVertical+0x53c>)
 8002aac:	f010 fe72 	bl	8013794 <siprintf>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	b29a      	uxth	r2, r3
 8002ab4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ab8:	490a      	ldr	r1, [pc, #40]	@ (8002ae4 <PointingVertical+0x53c>)
 8002aba:	480b      	ldr	r0, [pc, #44]	@ (8002ae8 <PointingVertical+0x540>)
 8002abc:	f006 f8f4 	bl	8008ca8 <HAL_UART_Transmit>
 8002ac0:	e068      	b.n	8002b94 <PointingVertical+0x5ec>
						//HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "1"), 1000);
					}
				}else if(a==1){
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d165      	bne.n	8002b94 <PointingVertical+0x5ec>
					for(int k=0; k<4;k++){
 8002ac8:	2300      	movs	r3, #0
 8002aca:	623b      	str	r3, [r7, #32]
 8002acc:	e035      	b.n	8002b3a <PointingVertical+0x592>
 8002ace:	bf00      	nop
 8002ad0:	70a3d70a 	.word	0x70a3d70a
 8002ad4:	3fef0a3d 	.word	0x3fef0a3d
 8002ad8:	20007694 	.word	0x20007694
 8002adc:	20002440 	.word	0x20002440
 8002ae0:	08018840 	.word	0x08018840
 8002ae4:	20007850 	.word	0x20007850
 8002ae8:	200077c8 	.word	0x200077c8
 8002aec:	20002520 	.word	0x20002520
 8002af0:	200002c8 	.word	0x200002c8
 8002af4:	200002d0 	.word	0x200002d0
 8002af8:	43100000 	.word	0x43100000
 8002afc:	43100000 	.word	0x43100000
 8002b00:	08018960 	.word	0x08018960
 8002b04:	0801896c 	.word	0x0801896c
						HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", out_data[k]), 1000);
 8002b08:	4a40      	ldr	r2, [pc, #256]	@ (8002c0c <PointingVertical+0x664>)
 8002b0a:	6a3b      	ldr	r3, [r7, #32]
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	4413      	add	r3, r2
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7fd fd48 	bl	80005a8 <__aeabi_f2d>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	460b      	mov	r3, r1
 8002b1c:	493c      	ldr	r1, [pc, #240]	@ (8002c10 <PointingVertical+0x668>)
 8002b1e:	483d      	ldr	r0, [pc, #244]	@ (8002c14 <PointingVertical+0x66c>)
 8002b20:	f010 fe38 	bl	8013794 <siprintf>
 8002b24:	4603      	mov	r3, r0
 8002b26:	b29a      	uxth	r2, r3
 8002b28:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b2c:	4939      	ldr	r1, [pc, #228]	@ (8002c14 <PointingVertical+0x66c>)
 8002b2e:	483a      	ldr	r0, [pc, #232]	@ (8002c18 <PointingVertical+0x670>)
 8002b30:	f006 f8ba 	bl	8008ca8 <HAL_UART_Transmit>
					for(int k=0; k<4;k++){
 8002b34:	6a3b      	ldr	r3, [r7, #32]
 8002b36:	3301      	adds	r3, #1
 8002b38:	623b      	str	r3, [r7, #32]
 8002b3a:	6a3b      	ldr	r3, [r7, #32]
 8002b3c:	2b03      	cmp	r3, #3
 8002b3e:	dde3      	ble.n	8002b08 <PointingVertical+0x560>
					}
					HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", sqSum), 1000);
 8002b40:	6938      	ldr	r0, [r7, #16]
 8002b42:	f7fd fd31 	bl	80005a8 <__aeabi_f2d>
 8002b46:	4602      	mov	r2, r0
 8002b48:	460b      	mov	r3, r1
 8002b4a:	4931      	ldr	r1, [pc, #196]	@ (8002c10 <PointingVertical+0x668>)
 8002b4c:	4831      	ldr	r0, [pc, #196]	@ (8002c14 <PointingVertical+0x66c>)
 8002b4e:	f010 fe21 	bl	8013794 <siprintf>
 8002b52:	4603      	mov	r3, r0
 8002b54:	b29a      	uxth	r2, r3
 8002b56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b5a:	492e      	ldr	r1, [pc, #184]	@ (8002c14 <PointingVertical+0x66c>)
 8002b5c:	482e      	ldr	r0, [pc, #184]	@ (8002c18 <PointingVertical+0x670>)
 8002b5e:	f006 f8a3 	bl	8008ca8 <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%lu ", timestamp), 1000);
 8002b62:	68fa      	ldr	r2, [r7, #12]
 8002b64:	492d      	ldr	r1, [pc, #180]	@ (8002c1c <PointingVertical+0x674>)
 8002b66:	482b      	ldr	r0, [pc, #172]	@ (8002c14 <PointingVertical+0x66c>)
 8002b68:	f010 fe14 	bl	8013794 <siprintf>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	b29a      	uxth	r2, r3
 8002b70:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b74:	4927      	ldr	r1, [pc, #156]	@ (8002c14 <PointingVertical+0x66c>)
 8002b76:	4828      	ldr	r0, [pc, #160]	@ (8002c18 <PointingVertical+0x670>)
 8002b78:	f006 f896 	bl	8008ca8 <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "0"), 1000);
 8002b7c:	4928      	ldr	r1, [pc, #160]	@ (8002c20 <PointingVertical+0x678>)
 8002b7e:	4825      	ldr	r0, [pc, #148]	@ (8002c14 <PointingVertical+0x66c>)
 8002b80:	f010 fe08 	bl	8013794 <siprintf>
 8002b84:	4603      	mov	r3, r0
 8002b86:	b29a      	uxth	r2, r3
 8002b88:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b8c:	4921      	ldr	r1, [pc, #132]	@ (8002c14 <PointingVertical+0x66c>)
 8002b8e:	4822      	ldr	r0, [pc, #136]	@ (8002c18 <PointingVertical+0x670>)
 8002b90:	f006 f88a 	bl	8008ca8 <HAL_UART_Transmit>
				}
			}
			do{
				endTime = HAL_GetTick();
 8002b94:	f001 fe3c 	bl	8004810 <HAL_GetTick>
 8002b98:	60b8      	str	r0, [r7, #8]
				diffTime = endTime - startTime;
 8002b9a:	68ba      	ldr	r2, [r7, #8]
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	607b      	str	r3, [r7, #4]
			}while (diffTime <= TIMBUDGET);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2b64      	cmp	r3, #100	@ 0x64
 8002ba6:	d9f5      	bls.n	8002b94 <PointingVertical+0x5ec>
			HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "\n"), 100);
 8002ba8:	491e      	ldr	r1, [pc, #120]	@ (8002c24 <PointingVertical+0x67c>)
 8002baa:	481a      	ldr	r0, [pc, #104]	@ (8002c14 <PointingVertical+0x66c>)
 8002bac:	f010 fdf2 	bl	8013794 <siprintf>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	b29a      	uxth	r2, r3
 8002bb4:	2364      	movs	r3, #100	@ 0x64
 8002bb6:	4917      	ldr	r1, [pc, #92]	@ (8002c14 <PointingVertical+0x66c>)
 8002bb8:	4817      	ldr	r0, [pc, #92]	@ (8002c18 <PointingVertical+0x670>)
 8002bba:	f006 f875 	bl	8008ca8 <HAL_UART_Transmit>
		    while(HAL_GetTick() - ServoStartTime < 7000) {
 8002bbe:	f001 fe27 	bl	8004810 <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	f641 3257 	movw	r2, #6999	@ 0x1b57
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	f67f ad06 	bls.w	80025de <PointingVertical+0x36>
	    }
	    HAL_Delay(1000);
 8002bd2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002bd6:	f001 fe27 	bl	8004828 <HAL_Delay>

		servo_angle(&htim2, TIM_CHANNEL_1, 0);
 8002bda:	2200      	movs	r2, #0
 8002bdc:	2100      	movs	r1, #0
 8002bde:	4812      	ldr	r0, [pc, #72]	@ (8002c28 <PointingVertical+0x680>)
 8002be0:	f001 f902 	bl	8003de8 <servo_angle>
		HAL_Delay(1000);
 8002be4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002be8:	f001 fe1e 	bl	8004828 <HAL_Delay>
	    stepLin(-25);
 8002bec:	f06f 0018 	mvn.w	r0, #24
 8002bf0:	f001 f89e 	bl	8003d30 <stepLin>
	for(int i = 0; i < 5; i++) {
 8002bf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	637b      	str	r3, [r7, #52]	@ 0x34
 8002bfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bfc:	2b04      	cmp	r3, #4
 8002bfe:	f77f ace1 	ble.w	80025c4 <PointingVertical+0x1c>
	}
	//stepLin(130);

	// 30 55 80 110 130
}
 8002c02:	bf00      	nop
 8002c04:	bf00      	nop
 8002c06:	3738      	adds	r7, #56	@ 0x38
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	20002520 	.word	0x20002520
 8002c10:	08018960 	.word	0x08018960
 8002c14:	20007850 	.word	0x20007850
 8002c18:	200077c8 	.word	0x200077c8
 8002c1c:	0801896c 	.word	0x0801896c
 8002c20:	08018974 	.word	0x08018974
 8002c24:	08018968 	.word	0x08018968
 8002c28:	20007778 	.word	0x20007778

08002c2c <PointingRadial>:

void PointingRadial(){
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
	for(int i = 0; i < 7; i++) {
 8002c32:	2300      	movs	r3, #0
 8002c34:	607b      	str	r3, [r7, #4]
 8002c36:	e017      	b.n	8002c68 <PointingRadial+0x3c>
		servo_angle(&htim2, TIM_CHANNEL_1, 12); // poking 8
 8002c38:	220c      	movs	r2, #12
 8002c3a:	2100      	movs	r1, #0
 8002c3c:	480e      	ldr	r0, [pc, #56]	@ (8002c78 <PointingRadial+0x4c>)
 8002c3e:	f001 f8d3 	bl	8003de8 <servo_angle>
		HAL_Delay(5000);
 8002c42:	f241 3088 	movw	r0, #5000	@ 0x1388
 8002c46:	f001 fdef 	bl	8004828 <HAL_Delay>
		servo_angle(&htim2, TIM_CHANNEL_1, 0); // poking 8
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	2100      	movs	r1, #0
 8002c4e:	480a      	ldr	r0, [pc, #40]	@ (8002c78 <PointingRadial+0x4c>)
 8002c50:	f001 f8ca 	bl	8003de8 <servo_angle>
	    stepRev(15);
 8002c54:	200f      	movs	r0, #15
 8002c56:	f001 f803 	bl	8003c60 <stepRev>
		HAL_Delay(5000);
 8002c5a:	f241 3088 	movw	r0, #5000	@ 0x1388
 8002c5e:	f001 fde3 	bl	8004828 <HAL_Delay>
	for(int i = 0; i < 7; i++) {
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	3301      	adds	r3, #1
 8002c66:	607b      	str	r3, [r7, #4]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2b06      	cmp	r3, #6
 8002c6c:	dde4      	ble.n	8002c38 <PointingRadial+0xc>
	}

	// 0 15 30 45 60 75 90
}
 8002c6e:	bf00      	nop
 8002c70:	bf00      	nop
 8002c72:	3708      	adds	r7, #8
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	20007778 	.word	0x20007778

08002c7c <InitializaionCalibrationCommand>:
void InitializaionCalibrationCommand()
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b086      	sub	sp, #24
 8002c80:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "InitializationCommand\n\r"), 100);
 8002c82:	49b2      	ldr	r1, [pc, #712]	@ (8002f4c <InitializaionCalibrationCommand+0x2d0>)
 8002c84:	48b2      	ldr	r0, [pc, #712]	@ (8002f50 <InitializaionCalibrationCommand+0x2d4>)
 8002c86:	f010 fd85 	bl	8013794 <siprintf>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	b29a      	uxth	r2, r3
 8002c8e:	2364      	movs	r3, #100	@ 0x64
 8002c90:	49af      	ldr	r1, [pc, #700]	@ (8002f50 <InitializaionCalibrationCommand+0x2d4>)
 8002c92:	48b0      	ldr	r0, [pc, #704]	@ (8002f54 <InitializaionCalibrationCommand+0x2d8>)
 8002c94:	f006 f808 	bl	8008ca8 <HAL_UART_Transmit>

	ResetAllDevices();
 8002c98:	f001 fc9a 	bl	80045d0 <ResetAllDevices>
  	for (int i = 0; i < NUM_SENSOR; i++) {
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	617b      	str	r3, [r7, #20]
 8002ca0:	e10a      	b.n	8002eb8 <InitializaionCalibrationCommand+0x23c>
  	    uint8_t q = i / 12;
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	4aac      	ldr	r2, [pc, #688]	@ (8002f58 <InitializaionCalibrationCommand+0x2dc>)
 8002ca6:	fb82 1203 	smull	r1, r2, r2, r3
 8002caa:	1052      	asrs	r2, r2, #1
 8002cac:	17db      	asrs	r3, r3, #31
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	70fb      	strb	r3, [r7, #3]
  	    uint8_t r = i % 12;
 8002cb2:	697a      	ldr	r2, [r7, #20]
 8002cb4:	4ba8      	ldr	r3, [pc, #672]	@ (8002f58 <InitializaionCalibrationCommand+0x2dc>)
 8002cb6:	fb83 1302 	smull	r1, r3, r3, r2
 8002cba:	1059      	asrs	r1, r3, #1
 8002cbc:	17d3      	asrs	r3, r2, #31
 8002cbe:	1ac9      	subs	r1, r1, r3
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	005b      	lsls	r3, r3, #1
 8002cc4:	440b      	add	r3, r1
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	1ad1      	subs	r1, r2, r3
 8002cca:	460b      	mov	r3, r1
 8002ccc:	70bb      	strb	r3, [r7, #2]
  	    uint8_t active_device = q * 2 + (r >= 8 ? 1 : 0);
 8002cce:	78fb      	ldrb	r3, [r7, #3]
 8002cd0:	005b      	lsls	r3, r3, #1
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	78ba      	ldrb	r2, [r7, #2]
 8002cd6:	2a07      	cmp	r2, #7
 8002cd8:	bf8c      	ite	hi
 8002cda:	2201      	movhi	r2, #1
 8002cdc:	2200      	movls	r2, #0
 8002cde:	b2d2      	uxtb	r2, r2
 8002ce0:	4413      	add	r3, r2
 8002ce2:	707b      	strb	r3, [r7, #1]
  	    uint8_t channel = (r >= 8) ? r - 8 : r;
 8002ce4:	78bb      	ldrb	r3, [r7, #2]
 8002ce6:	2b07      	cmp	r3, #7
 8002ce8:	d903      	bls.n	8002cf2 <InitializaionCalibrationCommand+0x76>
 8002cea:	78bb      	ldrb	r3, [r7, #2]
 8002cec:	3b08      	subs	r3, #8
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	e000      	b.n	8002cf4 <InitializaionCalibrationCommand+0x78>
 8002cf2:	78bb      	ldrb	r3, [r7, #2]
 8002cf4:	703b      	strb	r3, [r7, #0]

        ResetDevicesExcept(active_device);
 8002cf6:	787b      	ldrb	r3, [r7, #1]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f001 fc93 	bl	8004624 <ResetDevicesExcept>
        setActiveTcaChannel(active_device,channel);
 8002cfe:	783a      	ldrb	r2, [r7, #0]
 8002d00:	787b      	ldrb	r3, [r7, #1]
 8002d02:	4611      	mov	r1, r2
 8002d04:	4618      	mov	r0, r3
 8002d06:	f001 fcbd 	bl	8004684 <setActiveTcaChannel>

  		Dev = &vl53l0x_s[i];
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8002d10:	fb02 f303 	mul.w	r3, r2, r3
 8002d14:	4a91      	ldr	r2, [pc, #580]	@ (8002f5c <InitializaionCalibrationCommand+0x2e0>)
 8002d16:	4413      	add	r3, r2
 8002d18:	4a91      	ldr	r2, [pc, #580]	@ (8002f60 <InitializaionCalibrationCommand+0x2e4>)
 8002d1a:	6013      	str	r3, [r2, #0]
  		Dev->I2cHandle = &hi2c1;
 8002d1c:	4b90      	ldr	r3, [pc, #576]	@ (8002f60 <InitializaionCalibrationCommand+0x2e4>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a90      	ldr	r2, [pc, #576]	@ (8002f64 <InitializaionCalibrationCommand+0x2e8>)
 8002d22:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  		Dev->I2cDevAddr = VL53L0X_ADDR;
 8002d26:	4b8e      	ldr	r3, [pc, #568]	@ (8002f60 <InitializaionCalibrationCommand+0x2e4>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2252      	movs	r2, #82	@ 0x52
 8002d2c:	f883 2160 	strb.w	r2, [r3, #352]	@ 0x160

  		VL53L0X_WaitDeviceBooted( Dev );
 8002d30:	4b8b      	ldr	r3, [pc, #556]	@ (8002f60 <InitializaionCalibrationCommand+0x2e4>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4618      	mov	r0, r3
 8002d36:	f007 fba7 	bl	800a488 <VL53L0X_WaitDeviceBooted>
  		VL53L0X_DataInit( Dev );
 8002d3a:	4b89      	ldr	r3, [pc, #548]	@ (8002f60 <InitializaionCalibrationCommand+0x2e4>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f007 f8be 	bl	8009ec0 <VL53L0X_DataInit>
  		VL53L0X_StaticInit( Dev );
 8002d44:	4b86      	ldr	r3, [pc, #536]	@ (8002f60 <InitializaionCalibrationCommand+0x2e4>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f007 fa1d 	bl	800a188 <VL53L0X_StaticInit>
  		VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 8002d4e:	4b84      	ldr	r3, [pc, #528]	@ (8002f60 <InitializaionCalibrationCommand+0x2e4>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2101      	movs	r1, #1
 8002d54:	4618      	mov	r0, r3
 8002d56:	f007 fc35 	bl	800a5c4 <VL53L0X_SetDeviceMode>

  		VL53L0X_PerformRefSpadManagement( Dev, &refSpadCount[i], &isApertureSpads[i]);
 8002d5a:	4b81      	ldr	r3, [pc, #516]	@ (8002f60 <InitializaionCalibrationCommand+0x2e4>)
 8002d5c:	6818      	ldr	r0, [r3, #0]
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	4a81      	ldr	r2, [pc, #516]	@ (8002f68 <InitializaionCalibrationCommand+0x2ec>)
 8002d64:	1899      	adds	r1, r3, r2
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	4a80      	ldr	r2, [pc, #512]	@ (8002f6c <InitializaionCalibrationCommand+0x2f0>)
 8002d6a:	4413      	add	r3, r2
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	f008 fd5a 	bl	800b826 <VL53L0X_PerformRefSpadManagement>
  		VL53L0X_PerformRefCalibration( Dev, &VhvSettings[i], &PhaseCal[i]);
 8002d72:	4b7b      	ldr	r3, [pc, #492]	@ (8002f60 <InitializaionCalibrationCommand+0x2e4>)
 8002d74:	6818      	ldr	r0, [r3, #0]
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	4a7d      	ldr	r2, [pc, #500]	@ (8002f70 <InitializaionCalibrationCommand+0x2f4>)
 8002d7a:	1899      	adds	r1, r3, r2
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	4a7d      	ldr	r2, [pc, #500]	@ (8002f74 <InitializaionCalibrationCommand+0x2f8>)
 8002d80:	4413      	add	r3, r2
 8002d82:	461a      	mov	r2, r3
 8002d84:	f008 f8b6 	bl	800aef4 <VL53L0X_PerformRefCalibration>

  		refSpadCountHost[i] = refSpadCount[i];
 8002d88:	4a77      	ldr	r2, [pc, #476]	@ (8002f68 <InitializaionCalibrationCommand+0x2ec>)
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002d90:	4979      	ldr	r1, [pc, #484]	@ (8002f78 <InitializaionCalibrationCommand+0x2fc>)
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  		isApertureSpadsHost[i] = isApertureSpads[i];
 8002d98:	4a74      	ldr	r2, [pc, #464]	@ (8002f6c <InitializaionCalibrationCommand+0x2f0>)
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	4413      	add	r3, r2
 8002d9e:	7819      	ldrb	r1, [r3, #0]
 8002da0:	4a76      	ldr	r2, [pc, #472]	@ (8002f7c <InitializaionCalibrationCommand+0x300>)
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	4413      	add	r3, r2
 8002da6:	460a      	mov	r2, r1
 8002da8:	701a      	strb	r2, [r3, #0]
  		VhvSettingsHost[i] = VhvSettings[i];
 8002daa:	4a71      	ldr	r2, [pc, #452]	@ (8002f70 <InitializaionCalibrationCommand+0x2f4>)
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	4413      	add	r3, r2
 8002db0:	7819      	ldrb	r1, [r3, #0]
 8002db2:	4a73      	ldr	r2, [pc, #460]	@ (8002f80 <InitializaionCalibrationCommand+0x304>)
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	4413      	add	r3, r2
 8002db8:	460a      	mov	r2, r1
 8002dba:	701a      	strb	r2, [r3, #0]
  		PhaseCalHost[i] = PhaseCal[i];
 8002dbc:	4a6d      	ldr	r2, [pc, #436]	@ (8002f74 <InitializaionCalibrationCommand+0x2f8>)
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	7819      	ldrb	r1, [r3, #0]
 8002dc4:	4a6f      	ldr	r2, [pc, #444]	@ (8002f84 <InitializaionCalibrationCommand+0x308>)
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	4413      	add	r3, r2
 8002dca:	460a      	mov	r2, r1
 8002dcc:	701a      	strb	r2, [r3, #0]

  		VL53L0X_SetLimitCheckEnable( Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 8002dce:	4b64      	ldr	r3, [pc, #400]	@ (8002f60 <InitializaionCalibrationCommand+0x2e4>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	2100      	movs	r1, #0
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f007 fe86 	bl	800aae8 <VL53L0X_SetLimitCheckEnable>
  		VL53L0X_SetLimitCheckEnable( Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 8002ddc:	4b60      	ldr	r3, [pc, #384]	@ (8002f60 <InitializaionCalibrationCommand+0x2e4>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2201      	movs	r2, #1
 8002de2:	2101      	movs	r1, #1
 8002de4:	4618      	mov	r0, r3
 8002de6:	f007 fe7f 	bl	800aae8 <VL53L0X_SetLimitCheckEnable>
  		VL53L0X_SetLimitCheckValue( Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 8002dea:	4b5d      	ldr	r3, [pc, #372]	@ (8002f60 <InitializaionCalibrationCommand+0x2e4>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f641 1299 	movw	r2, #6553	@ 0x1999
 8002df2:	2101      	movs	r1, #1
 8002df4:	4618      	mov	r0, r3
 8002df6:	f007 ff27 	bl	800ac48 <VL53L0X_SetLimitCheckValue>
  		VL53L0X_SetLimitCheckValue( Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 8002dfa:	4b59      	ldr	r3, [pc, #356]	@ (8002f60 <InitializaionCalibrationCommand+0x2e4>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 8002e02:	2100      	movs	r1, #0
 8002e04:	4618      	mov	r0, r3
 8002e06:	f007 ff1f 	bl	800ac48 <VL53L0X_SetLimitCheckValue>
  		VL53L0X_SetMeasurementTimingBudgetMicroSeconds( Dev, 100000);
 8002e0a:	4b55      	ldr	r3, [pc, #340]	@ (8002f60 <InitializaionCalibrationCommand+0x2e4>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	495e      	ldr	r1, [pc, #376]	@ (8002f88 <InitializaionCalibrationCommand+0x30c>)
 8002e10:	4618      	mov	r0, r3
 8002e12:	f007 fc35 	bl	800a680 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
  		VL53L0X_SetVcselPulsePeriod( Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 8002e16:	4b52      	ldr	r3, [pc, #328]	@ (8002f60 <InitializaionCalibrationCommand+0x2e4>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2212      	movs	r2, #18
 8002e1c:	2100      	movs	r1, #0
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f007 fc54 	bl	800a6cc <VL53L0X_SetVcselPulsePeriod>
  		VL53L0X_SetVcselPulsePeriod( Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 8002e24:	4b4e      	ldr	r3, [pc, #312]	@ (8002f60 <InitializaionCalibrationCommand+0x2e4>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	220e      	movs	r2, #14
 8002e2a:	2101      	movs	r1, #1
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f007 fc4d 	bl	800a6cc <VL53L0X_SetVcselPulsePeriod>

		Kalman_Init(&filters[i], Q, R, P, 0);  // Q, R, P
 8002e32:	697a      	ldr	r2, [r7, #20]
 8002e34:	4613      	mov	r3, r2
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	4413      	add	r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	4a53      	ldr	r2, [pc, #332]	@ (8002f8c <InitializaionCalibrationCommand+0x310>)
 8002e3e:	4413      	add	r3, r2
 8002e40:	4a53      	ldr	r2, [pc, #332]	@ (8002f90 <InitializaionCalibrationCommand+0x314>)
 8002e42:	edd2 7a00 	vldr	s15, [r2]
 8002e46:	4a53      	ldr	r2, [pc, #332]	@ (8002f94 <InitializaionCalibrationCommand+0x318>)
 8002e48:	ed92 7a00 	vldr	s14, [r2]
 8002e4c:	4a52      	ldr	r2, [pc, #328]	@ (8002f98 <InitializaionCalibrationCommand+0x31c>)
 8002e4e:	edd2 6a00 	vldr	s13, [r2]
 8002e52:	eddf 1a52 	vldr	s3, [pc, #328]	@ 8002f9c <InitializaionCalibrationCommand+0x320>
 8002e56:	eeb0 1a66 	vmov.f32	s2, s13
 8002e5a:	eef0 0a47 	vmov.f32	s1, s14
 8002e5e:	eeb0 0a67 	vmov.f32	s0, s15
 8002e62:	4618      	mov	r0, r3
 8002e64:	f000 fbe6 	bl	8003634 <Kalman_Init>

 		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%02d ",i), 100);
 8002e68:	697a      	ldr	r2, [r7, #20]
 8002e6a:	494d      	ldr	r1, [pc, #308]	@ (8002fa0 <InitializaionCalibrationCommand+0x324>)
 8002e6c:	4838      	ldr	r0, [pc, #224]	@ (8002f50 <InitializaionCalibrationCommand+0x2d4>)
 8002e6e:	f010 fc91 	bl	8013794 <siprintf>
 8002e72:	4603      	mov	r3, r0
 8002e74:	b29a      	uxth	r2, r3
 8002e76:	2364      	movs	r3, #100	@ 0x64
 8002e78:	4935      	ldr	r1, [pc, #212]	@ (8002f50 <InitializaionCalibrationCommand+0x2d4>)
 8002e7a:	4836      	ldr	r0, [pc, #216]	@ (8002f54 <InitializaionCalibrationCommand+0x2d8>)
 8002e7c:	f005 ff14 	bl	8008ca8 <HAL_UART_Transmit>
 		if(i%12 ==11){HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "\n\r"), 100);}
 8002e80:	6979      	ldr	r1, [r7, #20]
 8002e82:	4b35      	ldr	r3, [pc, #212]	@ (8002f58 <InitializaionCalibrationCommand+0x2dc>)
 8002e84:	fb83 2301 	smull	r2, r3, r3, r1
 8002e88:	105a      	asrs	r2, r3, #1
 8002e8a:	17cb      	asrs	r3, r1, #31
 8002e8c:	1ad2      	subs	r2, r2, r3
 8002e8e:	4613      	mov	r3, r2
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	4413      	add	r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	1aca      	subs	r2, r1, r3
 8002e98:	2a0b      	cmp	r2, #11
 8002e9a:	d10a      	bne.n	8002eb2 <InitializaionCalibrationCommand+0x236>
 8002e9c:	4941      	ldr	r1, [pc, #260]	@ (8002fa4 <InitializaionCalibrationCommand+0x328>)
 8002e9e:	482c      	ldr	r0, [pc, #176]	@ (8002f50 <InitializaionCalibrationCommand+0x2d4>)
 8002ea0:	f010 fc78 	bl	8013794 <siprintf>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	b29a      	uxth	r2, r3
 8002ea8:	2364      	movs	r3, #100	@ 0x64
 8002eaa:	4929      	ldr	r1, [pc, #164]	@ (8002f50 <InitializaionCalibrationCommand+0x2d4>)
 8002eac:	4829      	ldr	r0, [pc, #164]	@ (8002f54 <InitializaionCalibrationCommand+0x2d8>)
 8002eae:	f005 fefb 	bl	8008ca8 <HAL_UART_Transmit>
  	for (int i = 0; i < NUM_SENSOR; i++) {
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	617b      	str	r3, [r7, #20]
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	2b2f      	cmp	r3, #47	@ 0x2f
 8002ebc:	f77f aef1 	ble.w	8002ca2 <InitializaionCalibrationCommand+0x26>
  	}


	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "uint32_t refSpadCountHost[NUM_SENSOR]={"), 100);
 8002ec0:	4939      	ldr	r1, [pc, #228]	@ (8002fa8 <InitializaionCalibrationCommand+0x32c>)
 8002ec2:	4823      	ldr	r0, [pc, #140]	@ (8002f50 <InitializaionCalibrationCommand+0x2d4>)
 8002ec4:	f010 fc66 	bl	8013794 <siprintf>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	b29a      	uxth	r2, r3
 8002ecc:	2364      	movs	r3, #100	@ 0x64
 8002ece:	4920      	ldr	r1, [pc, #128]	@ (8002f50 <InitializaionCalibrationCommand+0x2d4>)
 8002ed0:	4820      	ldr	r0, [pc, #128]	@ (8002f54 <InitializaionCalibrationCommand+0x2d8>)
 8002ed2:	f005 fee9 	bl	8008ca8 <HAL_UART_Transmit>
	for (int i = 0; i < NUM_SENSOR; i++){
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	613b      	str	r3, [r7, #16]
 8002eda:	e026      	b.n	8002f2a <InitializaionCalibrationCommand+0x2ae>
		if(i < NUM_SENSOR - 1){
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	2b2e      	cmp	r3, #46	@ 0x2e
 8002ee0:	dc10      	bgt.n	8002f04 <InitializaionCalibrationCommand+0x288>
			HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%lu,",refSpadCount[i]), 100);
 8002ee2:	4a21      	ldr	r2, [pc, #132]	@ (8002f68 <InitializaionCalibrationCommand+0x2ec>)
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eea:	461a      	mov	r2, r3
 8002eec:	492f      	ldr	r1, [pc, #188]	@ (8002fac <InitializaionCalibrationCommand+0x330>)
 8002eee:	4818      	ldr	r0, [pc, #96]	@ (8002f50 <InitializaionCalibrationCommand+0x2d4>)
 8002ef0:	f010 fc50 	bl	8013794 <siprintf>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	b29a      	uxth	r2, r3
 8002ef8:	2364      	movs	r3, #100	@ 0x64
 8002efa:	4915      	ldr	r1, [pc, #84]	@ (8002f50 <InitializaionCalibrationCommand+0x2d4>)
 8002efc:	4815      	ldr	r0, [pc, #84]	@ (8002f54 <InitializaionCalibrationCommand+0x2d8>)
 8002efe:	f005 fed3 	bl	8008ca8 <HAL_UART_Transmit>
 8002f02:	e00f      	b.n	8002f24 <InitializaionCalibrationCommand+0x2a8>
		} else {
			HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%lu};\n",refSpadCount[i]), 100);
 8002f04:	4a18      	ldr	r2, [pc, #96]	@ (8002f68 <InitializaionCalibrationCommand+0x2ec>)
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	4928      	ldr	r1, [pc, #160]	@ (8002fb0 <InitializaionCalibrationCommand+0x334>)
 8002f10:	480f      	ldr	r0, [pc, #60]	@ (8002f50 <InitializaionCalibrationCommand+0x2d4>)
 8002f12:	f010 fc3f 	bl	8013794 <siprintf>
 8002f16:	4603      	mov	r3, r0
 8002f18:	b29a      	uxth	r2, r3
 8002f1a:	2364      	movs	r3, #100	@ 0x64
 8002f1c:	490c      	ldr	r1, [pc, #48]	@ (8002f50 <InitializaionCalibrationCommand+0x2d4>)
 8002f1e:	480d      	ldr	r0, [pc, #52]	@ (8002f54 <InitializaionCalibrationCommand+0x2d8>)
 8002f20:	f005 fec2 	bl	8008ca8 <HAL_UART_Transmit>
	for (int i = 0; i < NUM_SENSOR; i++){
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	3301      	adds	r3, #1
 8002f28:	613b      	str	r3, [r7, #16]
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	2b2f      	cmp	r3, #47	@ 0x2f
 8002f2e:	ddd5      	ble.n	8002edc <InitializaionCalibrationCommand+0x260>
		}
	}

	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "uint8_t isApertureSpadsHost[NUM_SENSOR]={"), 100);
 8002f30:	4920      	ldr	r1, [pc, #128]	@ (8002fb4 <InitializaionCalibrationCommand+0x338>)
 8002f32:	4807      	ldr	r0, [pc, #28]	@ (8002f50 <InitializaionCalibrationCommand+0x2d4>)
 8002f34:	f010 fc2e 	bl	8013794 <siprintf>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	b29a      	uxth	r2, r3
 8002f3c:	2364      	movs	r3, #100	@ 0x64
 8002f3e:	4904      	ldr	r1, [pc, #16]	@ (8002f50 <InitializaionCalibrationCommand+0x2d4>)
 8002f40:	4804      	ldr	r0, [pc, #16]	@ (8002f54 <InitializaionCalibrationCommand+0x2d8>)
 8002f42:	f005 feb1 	bl	8008ca8 <HAL_UART_Transmit>
	for (int i = 0; i < NUM_SENSOR; i++){
 8002f46:	2300      	movs	r3, #0
 8002f48:	60fb      	str	r3, [r7, #12]
 8002f4a:	e05c      	b.n	8003006 <InitializaionCalibrationCommand+0x38a>
 8002f4c:	08018978 	.word	0x08018978
 8002f50:	20007850 	.word	0x20007850
 8002f54:	200077c8 	.word	0x200077c8
 8002f58:	2aaaaaab 	.word	0x2aaaaaab
 8002f5c:	20007a70 	.word	0x20007a70
 8002f60:	2000c570 	.word	0x2000c570
 8002f64:	20007280 	.word	0x20007280
 8002f68:	200078f0 	.word	0x200078f0
 8002f6c:	200079b0 	.word	0x200079b0
 8002f70:	200079e0 	.word	0x200079e0
 8002f74:	20007a10 	.word	0x20007a10
 8002f78:	20000010 	.word	0x20000010
 8002f7c:	20007a40 	.word	0x20007a40
 8002f80:	200000d0 	.word	0x200000d0
 8002f84:	20000100 	.word	0x20000100
 8002f88:	000186a0 	.word	0x000186a0
 8002f8c:	200072d4 	.word	0x200072d4
 8002f90:	20000000 	.word	0x20000000
 8002f94:	20000004 	.word	0x20000004
 8002f98:	20000008 	.word	0x20000008
 8002f9c:	00000000 	.word	0x00000000
 8002fa0:	08018874 	.word	0x08018874
 8002fa4:	08018884 	.word	0x08018884
 8002fa8:	08018990 	.word	0x08018990
 8002fac:	080189b8 	.word	0x080189b8
 8002fb0:	080189c0 	.word	0x080189c0
 8002fb4:	080189c8 	.word	0x080189c8
		if(i < NUM_SENSOR - 1){
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2b2e      	cmp	r3, #46	@ 0x2e
 8002fbc:	dc10      	bgt.n	8002fe0 <InitializaionCalibrationCommand+0x364>
			HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d,",isApertureSpads[i]), 100);
 8002fbe:	4a4e      	ldr	r2, [pc, #312]	@ (80030f8 <InitializaionCalibrationCommand+0x47c>)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	494c      	ldr	r1, [pc, #304]	@ (80030fc <InitializaionCalibrationCommand+0x480>)
 8002fca:	484d      	ldr	r0, [pc, #308]	@ (8003100 <InitializaionCalibrationCommand+0x484>)
 8002fcc:	f010 fbe2 	bl	8013794 <siprintf>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	b29a      	uxth	r2, r3
 8002fd4:	2364      	movs	r3, #100	@ 0x64
 8002fd6:	494a      	ldr	r1, [pc, #296]	@ (8003100 <InitializaionCalibrationCommand+0x484>)
 8002fd8:	484a      	ldr	r0, [pc, #296]	@ (8003104 <InitializaionCalibrationCommand+0x488>)
 8002fda:	f005 fe65 	bl	8008ca8 <HAL_UART_Transmit>
 8002fde:	e00f      	b.n	8003000 <InitializaionCalibrationCommand+0x384>
		} else {
			HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d};\n",isApertureSpads[i]), 100);
 8002fe0:	4a45      	ldr	r2, [pc, #276]	@ (80030f8 <InitializaionCalibrationCommand+0x47c>)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	461a      	mov	r2, r3
 8002fea:	4947      	ldr	r1, [pc, #284]	@ (8003108 <InitializaionCalibrationCommand+0x48c>)
 8002fec:	4844      	ldr	r0, [pc, #272]	@ (8003100 <InitializaionCalibrationCommand+0x484>)
 8002fee:	f010 fbd1 	bl	8013794 <siprintf>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	b29a      	uxth	r2, r3
 8002ff6:	2364      	movs	r3, #100	@ 0x64
 8002ff8:	4941      	ldr	r1, [pc, #260]	@ (8003100 <InitializaionCalibrationCommand+0x484>)
 8002ffa:	4842      	ldr	r0, [pc, #264]	@ (8003104 <InitializaionCalibrationCommand+0x488>)
 8002ffc:	f005 fe54 	bl	8008ca8 <HAL_UART_Transmit>
	for (int i = 0; i < NUM_SENSOR; i++){
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	3301      	adds	r3, #1
 8003004:	60fb      	str	r3, [r7, #12]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2b2f      	cmp	r3, #47	@ 0x2f
 800300a:	ddd5      	ble.n	8002fb8 <InitializaionCalibrationCommand+0x33c>
		}
	}

	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "uint8_t VhvSettingsHost[NUM_SENSOR]={"), 100);
 800300c:	493f      	ldr	r1, [pc, #252]	@ (800310c <InitializaionCalibrationCommand+0x490>)
 800300e:	483c      	ldr	r0, [pc, #240]	@ (8003100 <InitializaionCalibrationCommand+0x484>)
 8003010:	f010 fbc0 	bl	8013794 <siprintf>
 8003014:	4603      	mov	r3, r0
 8003016:	b29a      	uxth	r2, r3
 8003018:	2364      	movs	r3, #100	@ 0x64
 800301a:	4939      	ldr	r1, [pc, #228]	@ (8003100 <InitializaionCalibrationCommand+0x484>)
 800301c:	4839      	ldr	r0, [pc, #228]	@ (8003104 <InitializaionCalibrationCommand+0x488>)
 800301e:	f005 fe43 	bl	8008ca8 <HAL_UART_Transmit>
	for (int i = 0; i < NUM_SENSOR; i++){
 8003022:	2300      	movs	r3, #0
 8003024:	60bb      	str	r3, [r7, #8]
 8003026:	e026      	b.n	8003076 <InitializaionCalibrationCommand+0x3fa>
		if(i < NUM_SENSOR - 1){
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	2b2e      	cmp	r3, #46	@ 0x2e
 800302c:	dc10      	bgt.n	8003050 <InitializaionCalibrationCommand+0x3d4>
			HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d,",VhvSettings[i]), 100);
 800302e:	4a38      	ldr	r2, [pc, #224]	@ (8003110 <InitializaionCalibrationCommand+0x494>)
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	4413      	add	r3, r2
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	461a      	mov	r2, r3
 8003038:	4930      	ldr	r1, [pc, #192]	@ (80030fc <InitializaionCalibrationCommand+0x480>)
 800303a:	4831      	ldr	r0, [pc, #196]	@ (8003100 <InitializaionCalibrationCommand+0x484>)
 800303c:	f010 fbaa 	bl	8013794 <siprintf>
 8003040:	4603      	mov	r3, r0
 8003042:	b29a      	uxth	r2, r3
 8003044:	2364      	movs	r3, #100	@ 0x64
 8003046:	492e      	ldr	r1, [pc, #184]	@ (8003100 <InitializaionCalibrationCommand+0x484>)
 8003048:	482e      	ldr	r0, [pc, #184]	@ (8003104 <InitializaionCalibrationCommand+0x488>)
 800304a:	f005 fe2d 	bl	8008ca8 <HAL_UART_Transmit>
 800304e:	e00f      	b.n	8003070 <InitializaionCalibrationCommand+0x3f4>
		} else {
			HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d};\n",VhvSettings[i]), 100);
 8003050:	4a2f      	ldr	r2, [pc, #188]	@ (8003110 <InitializaionCalibrationCommand+0x494>)
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	4413      	add	r3, r2
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	461a      	mov	r2, r3
 800305a:	492b      	ldr	r1, [pc, #172]	@ (8003108 <InitializaionCalibrationCommand+0x48c>)
 800305c:	4828      	ldr	r0, [pc, #160]	@ (8003100 <InitializaionCalibrationCommand+0x484>)
 800305e:	f010 fb99 	bl	8013794 <siprintf>
 8003062:	4603      	mov	r3, r0
 8003064:	b29a      	uxth	r2, r3
 8003066:	2364      	movs	r3, #100	@ 0x64
 8003068:	4925      	ldr	r1, [pc, #148]	@ (8003100 <InitializaionCalibrationCommand+0x484>)
 800306a:	4826      	ldr	r0, [pc, #152]	@ (8003104 <InitializaionCalibrationCommand+0x488>)
 800306c:	f005 fe1c 	bl	8008ca8 <HAL_UART_Transmit>
	for (int i = 0; i < NUM_SENSOR; i++){
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	3301      	adds	r3, #1
 8003074:	60bb      	str	r3, [r7, #8]
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	2b2f      	cmp	r3, #47	@ 0x2f
 800307a:	ddd5      	ble.n	8003028 <InitializaionCalibrationCommand+0x3ac>
		}
	}

	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "uint8_t PhaseCalHost[NUM_SENSOR]={"), 100);
 800307c:	4925      	ldr	r1, [pc, #148]	@ (8003114 <InitializaionCalibrationCommand+0x498>)
 800307e:	4820      	ldr	r0, [pc, #128]	@ (8003100 <InitializaionCalibrationCommand+0x484>)
 8003080:	f010 fb88 	bl	8013794 <siprintf>
 8003084:	4603      	mov	r3, r0
 8003086:	b29a      	uxth	r2, r3
 8003088:	2364      	movs	r3, #100	@ 0x64
 800308a:	491d      	ldr	r1, [pc, #116]	@ (8003100 <InitializaionCalibrationCommand+0x484>)
 800308c:	481d      	ldr	r0, [pc, #116]	@ (8003104 <InitializaionCalibrationCommand+0x488>)
 800308e:	f005 fe0b 	bl	8008ca8 <HAL_UART_Transmit>
	for (int i = 0; i < NUM_SENSOR; i++){
 8003092:	2300      	movs	r3, #0
 8003094:	607b      	str	r3, [r7, #4]
 8003096:	e026      	b.n	80030e6 <InitializaionCalibrationCommand+0x46a>
		if(i < NUM_SENSOR - 1){
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2b2e      	cmp	r3, #46	@ 0x2e
 800309c:	dc10      	bgt.n	80030c0 <InitializaionCalibrationCommand+0x444>
			HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d,",PhaseCal[i]), 100);
 800309e:	4a1e      	ldr	r2, [pc, #120]	@ (8003118 <InitializaionCalibrationCommand+0x49c>)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	4413      	add	r3, r2
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	461a      	mov	r2, r3
 80030a8:	4914      	ldr	r1, [pc, #80]	@ (80030fc <InitializaionCalibrationCommand+0x480>)
 80030aa:	4815      	ldr	r0, [pc, #84]	@ (8003100 <InitializaionCalibrationCommand+0x484>)
 80030ac:	f010 fb72 	bl	8013794 <siprintf>
 80030b0:	4603      	mov	r3, r0
 80030b2:	b29a      	uxth	r2, r3
 80030b4:	2364      	movs	r3, #100	@ 0x64
 80030b6:	4912      	ldr	r1, [pc, #72]	@ (8003100 <InitializaionCalibrationCommand+0x484>)
 80030b8:	4812      	ldr	r0, [pc, #72]	@ (8003104 <InitializaionCalibrationCommand+0x488>)
 80030ba:	f005 fdf5 	bl	8008ca8 <HAL_UART_Transmit>
 80030be:	e00f      	b.n	80030e0 <InitializaionCalibrationCommand+0x464>
		} else {
			HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d};\n",PhaseCal[i]), 100);
 80030c0:	4a15      	ldr	r2, [pc, #84]	@ (8003118 <InitializaionCalibrationCommand+0x49c>)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4413      	add	r3, r2
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	461a      	mov	r2, r3
 80030ca:	490f      	ldr	r1, [pc, #60]	@ (8003108 <InitializaionCalibrationCommand+0x48c>)
 80030cc:	480c      	ldr	r0, [pc, #48]	@ (8003100 <InitializaionCalibrationCommand+0x484>)
 80030ce:	f010 fb61 	bl	8013794 <siprintf>
 80030d2:	4603      	mov	r3, r0
 80030d4:	b29a      	uxth	r2, r3
 80030d6:	2364      	movs	r3, #100	@ 0x64
 80030d8:	4909      	ldr	r1, [pc, #36]	@ (8003100 <InitializaionCalibrationCommand+0x484>)
 80030da:	480a      	ldr	r0, [pc, #40]	@ (8003104 <InitializaionCalibrationCommand+0x488>)
 80030dc:	f005 fde4 	bl	8008ca8 <HAL_UART_Transmit>
	for (int i = 0; i < NUM_SENSOR; i++){
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	3301      	adds	r3, #1
 80030e4:	607b      	str	r3, [r7, #4]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2b2f      	cmp	r3, #47	@ 0x2f
 80030ea:	ddd5      	ble.n	8003098 <InitializaionCalibrationCommand+0x41c>
		}
	}
}
 80030ec:	bf00      	nop
 80030ee:	bf00      	nop
 80030f0:	3718      	adds	r7, #24
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	200079b0 	.word	0x200079b0
 80030fc:	080189f4 	.word	0x080189f4
 8003100:	20007850 	.word	0x20007850
 8003104:	200077c8 	.word	0x200077c8
 8003108:	080189f8 	.word	0x080189f8
 800310c:	08018a00 	.word	0x08018a00
 8003110:	200079e0 	.word	0x200079e0
 8003114:	08018a28 	.word	0x08018a28
 8003118:	20007a10 	.word	0x20007a10

0800311c <AutoI2CCommand>:

void AutoI2CCommand(){
 800311c:	b580      	push	{r7, lr}
 800311e:	b08c      	sub	sp, #48	@ 0x30
 8003120:	af02      	add	r7, sp, #8

    HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "Auto Command \r\n"), 100);
 8003122:	4998      	ldr	r1, [pc, #608]	@ (8003384 <AutoI2CCommand+0x268>)
 8003124:	4898      	ldr	r0, [pc, #608]	@ (8003388 <AutoI2CCommand+0x26c>)
 8003126:	f010 fb35 	bl	8013794 <siprintf>
 800312a:	4603      	mov	r3, r0
 800312c:	b29a      	uxth	r2, r3
 800312e:	2364      	movs	r3, #100	@ 0x64
 8003130:	4995      	ldr	r1, [pc, #596]	@ (8003388 <AutoI2CCommand+0x26c>)
 8003132:	4896      	ldr	r0, [pc, #600]	@ (800338c <AutoI2CCommand+0x270>)
 8003134:	f005 fdb8 	bl	8008ca8 <HAL_UART_Transmit>

    SetI2CCommand();
 8003138:	f7fe fb2e 	bl	8001798 <SetI2CCommand>
    SensorI2CCommand();
 800313c:	f7fe fa34 	bl	80015a8 <SensorI2CCommand>
    ResetAllDevices();
 8003140:	f001 fa46 	bl	80045d0 <ResetAllDevices>
    setOnAllDevices();
 8003144:	f001 fac0 	bl	80046c8 <setOnAllDevices>

    //float forceSensorZeroPoint = 0.0f;
    uint32_t startTime = 0, endTime = 0;
 8003148:	2300      	movs	r3, #0
 800314a:	60bb      	str	r3, [r7, #8]
 800314c:	2300      	movs	r3, #0
 800314e:	607b      	str	r3, [r7, #4]
    uint8_t diffTime = 0;
 8003150:	2300      	movs	r3, #0
 8003152:	70fb      	strb	r3, [r7, #3]

    setServoAngle(&htim2, TIM_CHANNEL_1, 0); // 초기 ?��?�� ?���?? ?��?��
 8003154:	2200      	movs	r2, #0
 8003156:	2100      	movs	r1, #0
 8003158:	488d      	ldr	r0, [pc, #564]	@ (8003390 <AutoI2CCommand+0x274>)
 800315a:	f000 fe8f 	bl	8003e7c <setServoAngle>

    for(int lin = 2; lin < 19; lin++){
 800315e:	2302      	movs	r3, #2
 8003160:	627b      	str	r3, [r7, #36]	@ 0x24
 8003162:	e105      	b.n	8003370 <AutoI2CCommand+0x254>
        for(int rev = 0; rev < 72; rev++){
 8003164:	2300      	movs	r3, #0
 8003166:	623b      	str	r3, [r7, #32]
 8003168:	e0f2      	b.n	8003350 <AutoI2CCommand+0x234>
            for(int r = 30; r <80; r+=10){
 800316a:	231e      	movs	r3, #30
 800316c:	61fb      	str	r3, [r7, #28]
 800316e:	e0e5      	b.n	800333c <AutoI2CCommand+0x220>
            	setServoAngle(&htim2, TIM_CHANNEL_1, r); // ?��?�� ?��?��
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	b2db      	uxtb	r3, r3
 8003174:	461a      	mov	r2, r3
 8003176:	2100      	movs	r1, #0
 8003178:	4885      	ldr	r0, [pc, #532]	@ (8003390 <AutoI2CCommand+0x274>)
 800317a:	f000 fe7f 	bl	8003e7c <setServoAngle>
                HAL_Delay((r-20)*6+100);
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	f1a3 0214 	sub.w	r2, r3, #20
 8003184:	4613      	mov	r3, r2
 8003186:	005b      	lsls	r3, r3, #1
 8003188:	4413      	add	r3, r2
 800318a:	005b      	lsls	r3, r3, #1
 800318c:	3364      	adds	r3, #100	@ 0x64
 800318e:	4618      	mov	r0, r3
 8003190:	f001 fb4a 	bl	8004828 <HAL_Delay>
                int tofHitCount = 0;
 8003194:	2300      	movs	r3, #0
 8003196:	61bb      	str	r3, [r7, #24]
                while(tofHitCount < 20){
 8003198:	e0b7      	b.n	800330a <AutoI2CCommand+0x1ee>
                    uint8_t tofcount = 0;
 800319a:	2300      	movs	r3, #0
 800319c:	75fb      	strb	r3, [r7, #23]
						Hx711Data = 0;

					}else{
						Hx711Data = Read_HX711() - forceSensorZeroPoint;
					}*/
                    Hx711Data = Read_HX711();
 800319e:	f000 f951 	bl	8003444 <Read_HX711>
 80031a2:	ee07 0a90 	vmov	s15, r0
 80031a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031aa:	4b7a      	ldr	r3, [pc, #488]	@ (8003394 <AutoI2CCommand+0x278>)
 80031ac:	edc3 7a00 	vstr	s15, [r3]



   					startTime = HAL_GetTick();
 80031b0:	f001 fb2e 	bl	8004810 <HAL_GetTick>
 80031b4:	60b8      	str	r0, [r7, #8]
   					for (int i = 0; i < NUM_SENSOR; i++) {
 80031b6:	2300      	movs	r3, #0
 80031b8:	613b      	str	r3, [r7, #16]
 80031ba:	e06e      	b.n	800329a <AutoI2CCommand+0x17e>
   						Dev = &vl53l0x_s[i];
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80031c2:	fb02 f303 	mul.w	r3, r2, r3
 80031c6:	4a74      	ldr	r2, [pc, #464]	@ (8003398 <AutoI2CCommand+0x27c>)
 80031c8:	4413      	add	r3, r2
 80031ca:	4a74      	ldr	r2, [pc, #464]	@ (800339c <AutoI2CCommand+0x280>)
 80031cc:	6013      	str	r3, [r2, #0]
   						VL53L0X_PerformContinuousRangingMeasurement(Dev, &RangingData); // 1500us
 80031ce:	4b73      	ldr	r3, [pc, #460]	@ (800339c <AutoI2CCommand+0x280>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4973      	ldr	r1, [pc, #460]	@ (80033a0 <AutoI2CCommand+0x284>)
 80031d4:	4618      	mov	r0, r3
 80031d6:	f008 fb3b 	bl	800b850 <VL53L0X_PerformContinuousRangingMeasurement>
   						if (RangingData.RangeStatus == 0) {
 80031da:	4b71      	ldr	r3, [pc, #452]	@ (80033a0 <AutoI2CCommand+0x284>)
 80031dc:	7e1b      	ldrb	r3, [r3, #24]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d134      	bne.n	800324c <AutoI2CCommand+0x130>
   						  if (RangingData.RangeMilliMeter < 100) {
 80031e2:	4b6f      	ldr	r3, [pc, #444]	@ (80033a0 <AutoI2CCommand+0x284>)
 80031e4:	891b      	ldrh	r3, [r3, #8]
 80031e6:	2b63      	cmp	r3, #99	@ 0x63
 80031e8:	d830      	bhi.n	800324c <AutoI2CCommand+0x130>
   							  filteredValue[i] = Kalman_Estimate(&filters[i], RangingData.RangeMilliMeter);
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	4613      	mov	r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	4413      	add	r3, r2
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	4a6b      	ldr	r2, [pc, #428]	@ (80033a4 <AutoI2CCommand+0x288>)
 80031f6:	4413      	add	r3, r2
 80031f8:	4a69      	ldr	r2, [pc, #420]	@ (80033a0 <AutoI2CCommand+0x284>)
 80031fa:	8912      	ldrh	r2, [r2, #8]
 80031fc:	ee07 2a90 	vmov	s15, r2
 8003200:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003204:	eeb0 0a67 	vmov.f32	s0, s15
 8003208:	4618      	mov	r0, r3
 800320a:	f000 fa31 	bl	8003670 <Kalman_Estimate>
 800320e:	eef0 7a40 	vmov.f32	s15, s0
 8003212:	4a65      	ldr	r2, [pc, #404]	@ (80033a8 <AutoI2CCommand+0x28c>)
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	4413      	add	r3, r2
 800321a:	edc3 7a00 	vstr	s15, [r3]
   							  filteredValue[i] -= sensorAverages[i];
 800321e:	4a62      	ldr	r2, [pc, #392]	@ (80033a8 <AutoI2CCommand+0x28c>)
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	4413      	add	r3, r2
 8003226:	ed93 7a00 	vldr	s14, [r3]
 800322a:	4a60      	ldr	r2, [pc, #384]	@ (80033ac <AutoI2CCommand+0x290>)
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	4413      	add	r3, r2
 8003232:	edd3 7a00 	vldr	s15, [r3]
 8003236:	ee77 7a67 	vsub.f32	s15, s14, s15
 800323a:	4a5b      	ldr	r2, [pc, #364]	@ (80033a8 <AutoI2CCommand+0x28c>)
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	4413      	add	r3, r2
 8003242:	edc3 7a00 	vstr	s15, [r3]
   							  //filteredValue /= Xstd[i];
   							  tofcount++;
 8003246:	7dfb      	ldrb	r3, [r7, #23]
 8003248:	3301      	adds	r3, #1
 800324a:	75fb      	strb	r3, [r7, #23]
   						  }
   						}
   						if(tofcount==NUM_SENSOR){
 800324c:	7dfb      	ldrb	r3, [r7, #23]
 800324e:	2b30      	cmp	r3, #48	@ 0x30
 8003250:	d120      	bne.n	8003294 <AutoI2CCommand+0x178>
   							for(int i = 0; i< NUM_SENSOR;i++){
 8003252:	2300      	movs	r3, #0
 8003254:	60fb      	str	r3, [r7, #12]
 8003256:	e017      	b.n	8003288 <AutoI2CCommand+0x16c>
   							  HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.1f ", filteredValue[i]), 100);
 8003258:	4a53      	ldr	r2, [pc, #332]	@ (80033a8 <AutoI2CCommand+0x28c>)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	4413      	add	r3, r2
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4618      	mov	r0, r3
 8003264:	f7fd f9a0 	bl	80005a8 <__aeabi_f2d>
 8003268:	4602      	mov	r2, r0
 800326a:	460b      	mov	r3, r1
 800326c:	4950      	ldr	r1, [pc, #320]	@ (80033b0 <AutoI2CCommand+0x294>)
 800326e:	4846      	ldr	r0, [pc, #280]	@ (8003388 <AutoI2CCommand+0x26c>)
 8003270:	f010 fa90 	bl	8013794 <siprintf>
 8003274:	4603      	mov	r3, r0
 8003276:	b29a      	uxth	r2, r3
 8003278:	2364      	movs	r3, #100	@ 0x64
 800327a:	4943      	ldr	r1, [pc, #268]	@ (8003388 <AutoI2CCommand+0x26c>)
 800327c:	4843      	ldr	r0, [pc, #268]	@ (800338c <AutoI2CCommand+0x270>)
 800327e:	f005 fd13 	bl	8008ca8 <HAL_UART_Transmit>
   							for(int i = 0; i< NUM_SENSOR;i++){
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	3301      	adds	r3, #1
 8003286:	60fb      	str	r3, [r7, #12]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2b2f      	cmp	r3, #47	@ 0x2f
 800328c:	dde4      	ble.n	8003258 <AutoI2CCommand+0x13c>
   							}
   	                        tofHitCount++;
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	3301      	adds	r3, #1
 8003292:	61bb      	str	r3, [r7, #24]
   					for (int i = 0; i < NUM_SENSOR; i++) {
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	3301      	adds	r3, #1
 8003298:	613b      	str	r3, [r7, #16]
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	2b2f      	cmp	r3, #47	@ 0x2f
 800329e:	dd8d      	ble.n	80031bc <AutoI2CCommand+0xa0>
   						}
   					}
   					do {
   					endTime = HAL_GetTick();
 80032a0:	f001 fab6 	bl	8004810 <HAL_GetTick>
 80032a4:	6078      	str	r0, [r7, #4]
   					diffTime = endTime - startTime;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	b2da      	uxtb	r2, r3
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	70fb      	strb	r3, [r7, #3]
   					} while (diffTime <= TIMBUDGET);
 80032b2:	78fb      	ldrb	r3, [r7, #3]
 80032b4:	2b64      	cmp	r3, #100	@ 0x64
 80032b6:	d9f3      	bls.n	80032a0 <AutoI2CCommand+0x184>

   					startTime = 0;
 80032b8:	2300      	movs	r3, #0
 80032ba:	60bb      	str	r3, [r7, #8]
   					endTime = 0;
 80032bc:	2300      	movs	r3, #0
 80032be:	607b      	str	r3, [r7, #4]
   					diffTime = 0;
 80032c0:	2300      	movs	r3, #0
 80032c2:	70fb      	strb	r3, [r7, #3]

   					//UART_SendWeight_N(Hx711Data,-1/1600.00f,0); // Send the weight data over UART
   					UART_SendWeight_N(Hx711Data,-1/1600.00f,97.4220); // Send the weight data over UART
 80032c4:	4b33      	ldr	r3, [pc, #204]	@ (8003394 <AutoI2CCommand+0x278>)
 80032c6:	edd3 7a00 	vldr	s15, [r3]
 80032ca:	ed9f 1a3a 	vldr	s2, [pc, #232]	@ 80033b4 <AutoI2CCommand+0x298>
 80032ce:	eddf 0a3a 	vldr	s1, [pc, #232]	@ 80033b8 <AutoI2CCommand+0x29c>
 80032d2:	eeb0 0a67 	vmov.f32	s0, s15
 80032d6:	f000 f903 	bl	80034e0 <UART_SendWeight_N>

   					HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, " %d %d %d\n", 8*lin, 5*rev, r), 100);
 80032da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032dc:	00d9      	lsls	r1, r3, #3
 80032de:	6a3a      	ldr	r2, [r7, #32]
 80032e0:	4613      	mov	r3, r2
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	441a      	add	r2, r3
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	9300      	str	r3, [sp, #0]
 80032ea:	4613      	mov	r3, r2
 80032ec:	460a      	mov	r2, r1
 80032ee:	4933      	ldr	r1, [pc, #204]	@ (80033bc <AutoI2CCommand+0x2a0>)
 80032f0:	4825      	ldr	r0, [pc, #148]	@ (8003388 <AutoI2CCommand+0x26c>)
 80032f2:	f010 fa4f 	bl	8013794 <siprintf>
 80032f6:	4603      	mov	r3, r0
 80032f8:	b29a      	uxth	r2, r3
 80032fa:	2364      	movs	r3, #100	@ 0x64
 80032fc:	4922      	ldr	r1, [pc, #136]	@ (8003388 <AutoI2CCommand+0x26c>)
 80032fe:	4823      	ldr	r0, [pc, #140]	@ (800338c <AutoI2CCommand+0x270>)
 8003300:	f005 fcd2 	bl	8008ca8 <HAL_UART_Transmit>

                    if (tofHitCount >= 20) {
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	2b13      	cmp	r3, #19
 8003308:	dc04      	bgt.n	8003314 <AutoI2CCommand+0x1f8>
                while(tofHitCount < 20){
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	2b13      	cmp	r3, #19
 800330e:	f77f af44 	ble.w	800319a <AutoI2CCommand+0x7e>
 8003312:	e000      	b.n	8003316 <AutoI2CCommand+0x1fa>
                        break;
 8003314:	bf00      	nop
                    }
                }
                setServoAngle(&htim2, TIM_CHANNEL_1, 20); // ?��?�� ?��치로 ?��?���??
 8003316:	2214      	movs	r2, #20
 8003318:	2100      	movs	r1, #0
 800331a:	481d      	ldr	r0, [pc, #116]	@ (8003390 <AutoI2CCommand+0x274>)
 800331c:	f000 fdae 	bl	8003e7c <setServoAngle>
                HAL_Delay((r-20)*6+100);
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	f1a3 0214 	sub.w	r2, r3, #20
 8003326:	4613      	mov	r3, r2
 8003328:	005b      	lsls	r3, r3, #1
 800332a:	4413      	add	r3, r2
 800332c:	005b      	lsls	r3, r3, #1
 800332e:	3364      	adds	r3, #100	@ 0x64
 8003330:	4618      	mov	r0, r3
 8003332:	f001 fa79 	bl	8004828 <HAL_Delay>
            for(int r = 30; r <80; r+=10){
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	330a      	adds	r3, #10
 800333a:	61fb      	str	r3, [r7, #28]
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	2b4f      	cmp	r3, #79	@ 0x4f
 8003340:	f77f af16 	ble.w	8003170 <AutoI2CCommand+0x54>

            }

            stepRev(5); // ?�� 바�?? ?��?��
 8003344:	2005      	movs	r0, #5
 8003346:	f000 fc8b 	bl	8003c60 <stepRev>
        for(int rev = 0; rev < 72; rev++){
 800334a:	6a3b      	ldr	r3, [r7, #32]
 800334c:	3301      	adds	r3, #1
 800334e:	623b      	str	r3, [r7, #32]
 8003350:	6a3b      	ldr	r3, [r7, #32]
 8003352:	2b47      	cmp	r3, #71	@ 0x47
 8003354:	f77f af09 	ble.w	800316a <AutoI2CCommand+0x4e>
        }
        HAL_Delay(200);
 8003358:	20c8      	movs	r0, #200	@ 0xc8
 800335a:	f001 fa65 	bl	8004828 <HAL_Delay>
        stepRev(-360); // ?��?���??
 800335e:	4818      	ldr	r0, [pc, #96]	@ (80033c0 <AutoI2CCommand+0x2a4>)
 8003360:	f000 fc7e 	bl	8003c60 <stepRev>
        stepLin(8); // ?��?�� ?��?��
 8003364:	2008      	movs	r0, #8
 8003366:	f000 fce3 	bl	8003d30 <stepLin>
    for(int lin = 2; lin < 19; lin++){
 800336a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800336c:	3301      	adds	r3, #1
 800336e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003372:	2b12      	cmp	r3, #18
 8003374:	f77f aef6 	ble.w	8003164 <AutoI2CCommand+0x48>
    }
    //stepLin(144); // 마�?�?? ?��치로 ?��?��
}
 8003378:	bf00      	nop
 800337a:	bf00      	nop
 800337c:	3728      	adds	r7, #40	@ 0x28
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	08018a4c 	.word	0x08018a4c
 8003388:	20007850 	.word	0x20007850
 800338c:	200077c8 	.word	0x200077c8
 8003390:	20007778 	.word	0x20007778
 8003394:	2000727c 	.word	0x2000727c
 8003398:	20007a70 	.word	0x20007a70
 800339c:	2000c570 	.word	0x2000c570
 80033a0:	200078d4 	.word	0x200078d4
 80033a4:	200072d4 	.word	0x200072d4
 80033a8:	20007694 	.word	0x20007694
 80033ac:	20007038 	.word	0x20007038
 80033b0:	08018840 	.word	0x08018840
 80033b4:	42c2d810 	.word	0x42c2d810
 80033b8:	ba23d70a 	.word	0xba23d70a
 80033bc:	08018a5c 	.word	0x08018a5c
 80033c0:	fffffe98 	.word	0xfffffe98

080033c4 <LoadcellCommand>:


void LoadcellCommand(){
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0

    uint32_t startTime = 0, endTime = 0;
 80033ca:	2300      	movs	r3, #0
 80033cc:	60fb      	str	r3, [r7, #12]
 80033ce:	2300      	movs	r3, #0
 80033d0:	60bb      	str	r3, [r7, #8]
    uint8_t diffTime = 0;
 80033d2:	2300      	movs	r3, #0
 80033d4:	71fb      	strb	r3, [r7, #7]
    float LoadcellData=0;
 80033d6:	f04f 0300 	mov.w	r3, #0
 80033da:	603b      	str	r3, [r7, #0]

	startTime = HAL_GetTick();
 80033dc:	f001 fa18 	bl	8004810 <HAL_GetTick>
 80033e0:	60f8      	str	r0, [r7, #12]
	do {
		LoadcellData = Read_HX711();
 80033e2:	f000 f82f 	bl	8003444 <Read_HX711>
 80033e6:	ee07 0a90 	vmov	s15, r0
 80033ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033ee:	edc7 7a00 	vstr	s15, [r7]
		UART_SendWeight_N(LoadcellData,-1/1600.00f,97.4220);
 80033f2:	ed9f 1a0f 	vldr	s2, [pc, #60]	@ 8003430 <LoadcellCommand+0x6c>
 80033f6:	eddf 0a0f 	vldr	s1, [pc, #60]	@ 8003434 <LoadcellCommand+0x70>
 80033fa:	ed97 0a00 	vldr	s0, [r7]
 80033fe:	f000 f86f 	bl	80034e0 <UART_SendWeight_N>
		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "\n"), 100);
 8003402:	490d      	ldr	r1, [pc, #52]	@ (8003438 <LoadcellCommand+0x74>)
 8003404:	480d      	ldr	r0, [pc, #52]	@ (800343c <LoadcellCommand+0x78>)
 8003406:	f010 f9c5 	bl	8013794 <siprintf>
 800340a:	4603      	mov	r3, r0
 800340c:	b29a      	uxth	r2, r3
 800340e:	2364      	movs	r3, #100	@ 0x64
 8003410:	490a      	ldr	r1, [pc, #40]	@ (800343c <LoadcellCommand+0x78>)
 8003412:	480b      	ldr	r0, [pc, #44]	@ (8003440 <LoadcellCommand+0x7c>)
 8003414:	f005 fc48 	bl	8008ca8 <HAL_UART_Transmit>

		endTime = HAL_GetTick();
 8003418:	f001 f9fa 	bl	8004810 <HAL_GetTick>
 800341c:	60b8      	str	r0, [r7, #8]
		diffTime = endTime - startTime;
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	b2da      	uxtb	r2, r3
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	b2db      	uxtb	r3, r3
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	71fb      	strb	r3, [r7, #7]
		LoadcellData = Read_HX711();
 800342a:	bf00      	nop
 800342c:	e7d9      	b.n	80033e2 <LoadcellCommand+0x1e>
 800342e:	bf00      	nop
 8003430:	42c2d810 	.word	0x42c2d810
 8003434:	ba23d70a 	.word	0xba23d70a
 8003438:	08018968 	.word	0x08018968
 800343c:	20007850 	.word	0x20007850
 8003440:	200077c8 	.word	0x200077c8

08003444 <Read_HX711>:
  // Set the SCK pin to low
  HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_RESET);
}

int32_t Read_HX711(void)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
  int32_t data = 0;
 800344a:	2300      	movs	r3, #0
 800344c:	607b      	str	r3, [r7, #4]

  // Wait until the DT pin goes low
  while (HAL_GPIO_ReadPin(HX711_DT_GPIO_Port, HX711_DT_Pin) == GPIO_PIN_SET);
 800344e:	bf00      	nop
 8003450:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003454:	4820      	ldr	r0, [pc, #128]	@ (80034d8 <Read_HX711+0x94>)
 8003456:	f001 fe53 	bl	8005100 <HAL_GPIO_ReadPin>
 800345a:	4603      	mov	r3, r0
 800345c:	2b01      	cmp	r3, #1
 800345e:	d0f7      	beq.n	8003450 <Read_HX711+0xc>

  // Read the 24-bit data
  for (int i = 0; i < 24; i++)
 8003460:	2300      	movs	r3, #0
 8003462:	603b      	str	r3, [r7, #0]
 8003464:	e020      	b.n	80034a8 <Read_HX711+0x64>
  {
    // Generate a clock pulse on SCK pin
    HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_SET);
 8003466:	2201      	movs	r2, #1
 8003468:	2102      	movs	r1, #2
 800346a:	481c      	ldr	r0, [pc, #112]	@ (80034dc <Read_HX711+0x98>)
 800346c:	f001 fe60 	bl	8005130 <HAL_GPIO_WritePin>
    DelayMicroseconds(1);
 8003470:	2001      	movs	r0, #1
 8003472:	f000 f88b 	bl	800358c <DelayMicroseconds>
    data = (data << 1);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	005b      	lsls	r3, r3, #1
 800347a:	607b      	str	r3, [r7, #4]
    if (HAL_GPIO_ReadPin(HX711_DT_GPIO_Port, HX711_DT_Pin) == GPIO_PIN_SET)
 800347c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003480:	4815      	ldr	r0, [pc, #84]	@ (80034d8 <Read_HX711+0x94>)
 8003482:	f001 fe3d 	bl	8005100 <HAL_GPIO_ReadPin>
 8003486:	4603      	mov	r3, r0
 8003488:	2b01      	cmp	r3, #1
 800348a:	d102      	bne.n	8003492 <Read_HX711+0x4e>
    {
      data++;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	3301      	adds	r3, #1
 8003490:	607b      	str	r3, [r7, #4]
    }
    HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_RESET);
 8003492:	2200      	movs	r2, #0
 8003494:	2102      	movs	r1, #2
 8003496:	4811      	ldr	r0, [pc, #68]	@ (80034dc <Read_HX711+0x98>)
 8003498:	f001 fe4a 	bl	8005130 <HAL_GPIO_WritePin>
    DelayMicroseconds(1);
 800349c:	2001      	movs	r0, #1
 800349e:	f000 f875 	bl	800358c <DelayMicroseconds>
  for (int i = 0; i < 24; i++)
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	3301      	adds	r3, #1
 80034a6:	603b      	str	r3, [r7, #0]
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	2b17      	cmp	r3, #23
 80034ac:	dddb      	ble.n	8003466 <Read_HX711+0x22>
  }

  // Generate an additional 25th pulse to set the HX711 back to idle mode
  HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_SET);
 80034ae:	2201      	movs	r2, #1
 80034b0:	2102      	movs	r1, #2
 80034b2:	480a      	ldr	r0, [pc, #40]	@ (80034dc <Read_HX711+0x98>)
 80034b4:	f001 fe3c 	bl	8005130 <HAL_GPIO_WritePin>
  DelayMicroseconds(1);
 80034b8:	2001      	movs	r0, #1
 80034ba:	f000 f867 	bl	800358c <DelayMicroseconds>
  HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_RESET);
 80034be:	2200      	movs	r2, #0
 80034c0:	2102      	movs	r1, #2
 80034c2:	4806      	ldr	r0, [pc, #24]	@ (80034dc <Read_HX711+0x98>)
 80034c4:	f001 fe34 	bl	8005130 <HAL_GPIO_WritePin>
  DelayMicroseconds(1);
 80034c8:	2001      	movs	r0, #1
 80034ca:	f000 f85f 	bl	800358c <DelayMicroseconds>


  // Return the 24-bit data
  return data;
 80034ce:	687b      	ldr	r3, [r7, #4]
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3708      	adds	r7, #8
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	40020400 	.word	0x40020400
 80034dc:	40022000 	.word	0x40022000

080034e0 <UART_SendWeight_N>:
#endif
  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, data, 1000);
}

void UART_SendWeight_N(float rawData,float loadcell_slope,float loadcell_bias)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b08e      	sub	sp, #56	@ 0x38
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	ed87 0a03 	vstr	s0, [r7, #12]
 80034ea:	edc7 0a02 	vstr	s1, [r7, #8]
 80034ee:	ed87 1a01 	vstr	s2, [r7, #4]
  float weight = loadcell_slope * rawData;
 80034f2:	ed97 7a02 	vldr	s14, [r7, #8]
 80034f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80034fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034fe:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
  weight *=9.8;
 8003502:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003504:	f7fd f850 	bl	80005a8 <__aeabi_f2d>
 8003508:	a31e      	add	r3, pc, #120	@ (adr r3, 8003584 <UART_SendWeight_N+0xa4>)
 800350a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800350e:	f7fd f8a3 	bl	8000658 <__aeabi_dmul>
 8003512:	4602      	mov	r2, r0
 8003514:	460b      	mov	r3, r1
 8003516:	4610      	mov	r0, r2
 8003518:	4619      	mov	r1, r3
 800351a:	f7fd fb95 	bl	8000c48 <__aeabi_d2f>
 800351e:	4603      	mov	r3, r0
 8003520:	637b      	str	r3, [r7, #52]	@ 0x34
  weight /=1000;
 8003522:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003526:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8003578 <UART_SendWeight_N+0x98>
 800352a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800352e:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
  weight += loadcell_bias;
 8003532:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003536:	edd7 7a01 	vldr	s15, [r7, #4]
 800353a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800353e:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
  char buffer[32];
  int len = sprintf(buffer, "%.4f", weight);
 8003542:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003544:	f7fd f830 	bl	80005a8 <__aeabi_f2d>
 8003548:	4602      	mov	r2, r0
 800354a:	460b      	mov	r3, r1
 800354c:	f107 0010 	add.w	r0, r7, #16
 8003550:	490a      	ldr	r1, [pc, #40]	@ (800357c <UART_SendWeight_N+0x9c>)
 8003552:	f010 f91f 	bl	8013794 <siprintf>
 8003556:	6338      	str	r0, [r7, #48]	@ 0x30

  // Send the buffer content via UART
  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, len, 1000);
 8003558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800355a:	b29a      	uxth	r2, r3
 800355c:	f107 0110 	add.w	r1, r7, #16
 8003560:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003564:	4806      	ldr	r0, [pc, #24]	@ (8003580 <UART_SendWeight_N+0xa0>)
 8003566:	f005 fb9f 	bl	8008ca8 <HAL_UART_Transmit>
}
 800356a:	bf00      	nop
 800356c:	3738      	adds	r7, #56	@ 0x38
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	f3af 8000 	nop.w
 8003578:	447a0000 	.word	0x447a0000
 800357c:	08018a70 	.word	0x08018a70
 8003580:	200077c8 	.word	0x200077c8
 8003584:	9999999a 	.word	0x9999999a
 8003588:	40239999 	.word	0x40239999

0800358c <DelayMicroseconds>:
  weight *=9.8;
  weight /=1000;
  return weight;
}
void DelayMicroseconds(uint32_t microseconds)
{
 800358c:	b480      	push	{r7}
 800358e:	b085      	sub	sp, #20
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  uint32_t ticks = microseconds;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	60fb      	str	r3, [r7, #12]
  while (ticks--)
 8003598:	e000      	b.n	800359c <DelayMicroseconds+0x10>
  {
    __NOP();
 800359a:	bf00      	nop
  while (ticks--)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	1e5a      	subs	r2, r3, #1
 80035a0:	60fa      	str	r2, [r7, #12]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d1f9      	bne.n	800359a <DelayMicroseconds+0xe>
  }
}
 80035a6:	bf00      	nop
 80035a8:	bf00      	nop
 80035aa:	3714      	adds	r7, #20
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;


void MX_I2C1_Init(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80035b8:	4b1b      	ldr	r3, [pc, #108]	@ (8003628 <MX_I2C1_Init+0x74>)
 80035ba:	4a1c      	ldr	r2, [pc, #112]	@ (800362c <MX_I2C1_Init+0x78>)
 80035bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6000030D;
 80035be:	4b1a      	ldr	r3, [pc, #104]	@ (8003628 <MX_I2C1_Init+0x74>)
 80035c0:	4a1b      	ldr	r2, [pc, #108]	@ (8003630 <MX_I2C1_Init+0x7c>)
 80035c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80035c4:	4b18      	ldr	r3, [pc, #96]	@ (8003628 <MX_I2C1_Init+0x74>)
 80035c6:	2200      	movs	r2, #0
 80035c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80035ca:	4b17      	ldr	r3, [pc, #92]	@ (8003628 <MX_I2C1_Init+0x74>)
 80035cc:	2201      	movs	r2, #1
 80035ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80035d0:	4b15      	ldr	r3, [pc, #84]	@ (8003628 <MX_I2C1_Init+0x74>)
 80035d2:	2200      	movs	r2, #0
 80035d4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80035d6:	4b14      	ldr	r3, [pc, #80]	@ (8003628 <MX_I2C1_Init+0x74>)
 80035d8:	2200      	movs	r2, #0
 80035da:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80035dc:	4b12      	ldr	r3, [pc, #72]	@ (8003628 <MX_I2C1_Init+0x74>)
 80035de:	2200      	movs	r2, #0
 80035e0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80035e2:	4b11      	ldr	r3, [pc, #68]	@ (8003628 <MX_I2C1_Init+0x74>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80035e8:	4b0f      	ldr	r3, [pc, #60]	@ (8003628 <MX_I2C1_Init+0x74>)
 80035ea:	2200      	movs	r2, #0
 80035ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80035ee:	480e      	ldr	r0, [pc, #56]	@ (8003628 <MX_I2C1_Init+0x74>)
 80035f0:	f001 fddc 	bl	80051ac <HAL_I2C_Init>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d001      	beq.n	80035fe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80035fa:	f000 fb1b 	bl	8003c34 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80035fe:	2100      	movs	r1, #0
 8003600:	4809      	ldr	r0, [pc, #36]	@ (8003628 <MX_I2C1_Init+0x74>)
 8003602:	f003 f815 	bl	8006630 <HAL_I2CEx_ConfigAnalogFilter>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d001      	beq.n	8003610 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800360c:	f000 fb12 	bl	8003c34 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003610:	2100      	movs	r1, #0
 8003612:	4805      	ldr	r0, [pc, #20]	@ (8003628 <MX_I2C1_Init+0x74>)
 8003614:	f003 f857 	bl	80066c6 <HAL_I2CEx_ConfigDigitalFilter>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d001      	beq.n	8003622 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800361e:	f000 fb09 	bl	8003c34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003622:	bf00      	nop
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	20007280 	.word	0x20007280
 800362c:	40005400 	.word	0x40005400
 8003630:	6000030d 	.word	0x6000030d

08003634 <Kalman_Init>:
float filteredValue[NUM_SENSOR]={0};
float Q = 0.001f; // Process noise covariance
float R = 0.03f;   // Measurement noise covariance
float P = 0.001f;

void Kalman_Init(KalmanFilter *kf, float Q, float R, float P, float initial_value) {
 8003634:	b480      	push	{r7}
 8003636:	b087      	sub	sp, #28
 8003638:	af00      	add	r7, sp, #0
 800363a:	6178      	str	r0, [r7, #20]
 800363c:	ed87 0a04 	vstr	s0, [r7, #16]
 8003640:	edc7 0a03 	vstr	s1, [r7, #12]
 8003644:	ed87 1a02 	vstr	s2, [r7, #8]
 8003648:	edc7 1a01 	vstr	s3, [r7, #4]
    kf->Q = Q;
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	693a      	ldr	r2, [r7, #16]
 8003650:	601a      	str	r2, [r3, #0]
    kf->R = R;
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	605a      	str	r2, [r3, #4]
    kf->P = P;
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	68ba      	ldr	r2, [r7, #8]
 800365c:	609a      	str	r2, [r3, #8]
    kf->X = initial_value;
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	60da      	str	r2, [r3, #12]
}
 8003664:	bf00      	nop
 8003666:	371c      	adds	r7, #28
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <Kalman_Estimate>:

float Kalman_Estimate(KalmanFilter *kf, float measurement) {
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	ed87 0a00 	vstr	s0, [r7]
    // Prediction step: Update the error covariance 'P'
    // This is adding process noise to our uncertainty in the estimated state.
    kf->P = kf->P + kf->Q;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	ed93 7a02 	vldr	s14, [r3, #8]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	edd3 7a00 	vldr	s15, [r3]
 8003688:	ee77 7a27 	vadd.f32	s15, s14, s15
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	edc3 7a02 	vstr	s15, [r3, #8]

    // Update step: Compute the Kalman Gain 'K'
    // Kalman Gain balances the ratio between the prediction and the new measurement
    kf->K = kf->P / (kf->P + kf->R);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	edd3 6a02 	vldr	s13, [r3, #8]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	ed93 7a02 	vldr	s14, [r3, #8]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	edd3 7a01 	vldr	s15, [r3, #4]
 80036a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80036a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	edc3 7a04 	vstr	s15, [r3, #16]

    // Update step: Update the state estimate 'X'
    // Here we adjust our state estimate based on the new measurement,
    // scaling the "innovation" by the Kalman Gain
    kf->X = kf->X + kf->K * (measurement - kf->X);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	ed93 7a03 	vldr	s14, [r3, #12]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	edd3 6a04 	vldr	s13, [r3, #16]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	edd3 7a03 	vldr	s15, [r3, #12]
 80036c4:	ed97 6a00 	vldr	s12, [r7]
 80036c8:	ee76 7a67 	vsub.f32	s15, s12, s15
 80036cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	edc3 7a03 	vstr	s15, [r3, #12]

    // Update step: Update the error covariance 'P'
    // We've used our observation, so we adjust our uncertainty accordingly
    kf->P = (1 - kf->K) * kf->P;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	edd3 7a04 	vldr	s15, [r3, #16]
 80036e0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80036e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	edd3 7a02 	vldr	s15, [r3, #8]
 80036ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	edc3 7a02 	vstr	s15, [r3, #8]

    // Return the updated state estimate
    return kf->X;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	ee07 3a90 	vmov	s15, r3
}
 8003700:	eeb0 0a67 	vmov.f32	s0, s15
 8003704:	370c      	adds	r7, #12
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
	...

08003710 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8003710:	b480      	push	{r7}
 8003712:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003714:	f3bf 8f4f 	dsb	sy
}
 8003718:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800371a:	f3bf 8f6f 	isb	sy
}
 800371e:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8003720:	4b0d      	ldr	r3, [pc, #52]	@ (8003758 <SCB_EnableICache+0x48>)
 8003722:	2200      	movs	r2, #0
 8003724:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8003728:	f3bf 8f4f 	dsb	sy
}
 800372c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800372e:	f3bf 8f6f 	isb	sy
}
 8003732:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8003734:	4b08      	ldr	r3, [pc, #32]	@ (8003758 <SCB_EnableICache+0x48>)
 8003736:	695b      	ldr	r3, [r3, #20]
 8003738:	4a07      	ldr	r2, [pc, #28]	@ (8003758 <SCB_EnableICache+0x48>)
 800373a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800373e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8003740:	f3bf 8f4f 	dsb	sy
}
 8003744:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003746:	f3bf 8f6f 	isb	sy
}
 800374a:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 800374c:	bf00      	nop
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	e000ed00 	.word	0xe000ed00

0800375c <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 800375c:	b480      	push	{r7}
 800375e:	b085      	sub	sp, #20
 8003760:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8003762:	4b1f      	ldr	r3, [pc, #124]	@ (80037e0 <SCB_EnableDCache+0x84>)
 8003764:	2200      	movs	r2, #0
 8003766:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800376a:	f3bf 8f4f 	dsb	sy
}
 800376e:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8003770:	4b1b      	ldr	r3, [pc, #108]	@ (80037e0 <SCB_EnableDCache+0x84>)
 8003772:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003776:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	0b5b      	lsrs	r3, r3, #13
 800377c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003780:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	08db      	lsrs	r3, r3, #3
 8003786:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800378a:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	015a      	lsls	r2, r3, #5
 8003790:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8003794:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8003796:	68ba      	ldr	r2, [r7, #8]
 8003798:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800379a:	4911      	ldr	r1, [pc, #68]	@ (80037e0 <SCB_EnableDCache+0x84>)
 800379c:	4313      	orrs	r3, r2
 800379e:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	1e5a      	subs	r2, r3, #1
 80037a6:	60ba      	str	r2, [r7, #8]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d1ef      	bne.n	800378c <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	1e5a      	subs	r2, r3, #1
 80037b0:	60fa      	str	r2, [r7, #12]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d1e5      	bne.n	8003782 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80037b6:	f3bf 8f4f 	dsb	sy
}
 80037ba:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80037bc:	4b08      	ldr	r3, [pc, #32]	@ (80037e0 <SCB_EnableDCache+0x84>)
 80037be:	695b      	ldr	r3, [r3, #20]
 80037c0:	4a07      	ldr	r2, [pc, #28]	@ (80037e0 <SCB_EnableDCache+0x84>)
 80037c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037c6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80037c8:	f3bf 8f4f 	dsb	sy
}
 80037cc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80037ce:	f3bf 8f6f 	isb	sy
}
 80037d2:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80037d4:	bf00      	nop
 80037d6:	3714      	adds	r7, #20
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr
 80037e0:	e000ed00 	.word	0xe000ed00

080037e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80037e8:	f7ff ff92 	bl	8003710 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80037ec:	f7ff ffb6 	bl	800375c <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80037f0:	f000 ffbd 	bl	800476e <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80037f4:	f000 f82c 	bl	8003850 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80037f8:	f000 f964 	bl	8003ac4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80037fc:	f000 fe18 	bl	8004430 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8003800:	f7ff fed8 	bl	80035b4 <MX_I2C1_Init>
  MX_CRC_Init();
 8003804:	f000 f8c4 	bl	8003990 <MX_CRC_Init>
  MX_TIM2_Init();
 8003808:	f000 f8e4 	bl	80039d4 <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800380c:	f000 f88c 	bl	8003928 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 8003810:	2100      	movs	r1, #0
 8003812:	480c      	ldr	r0, [pc, #48]	@ (8003844 <main+0x60>)
 8003814:	f004 f966 	bl	8007ae4 <HAL_TIM_PWM_Start>

  aiInit();
 8003818:	f7fd fc14 	bl	8001044 <aiInit>
  startMsg();
 800381c:	f000 fe6e 	bl	80044fc <startMsg>
  sayServoAngle(&htim2, TIM_CHANNEL_1, 0);
 8003820:	2200      	movs	r2, #0
 8003822:	2100      	movs	r1, #0
 8003824:	4807      	ldr	r0, [pc, #28]	@ (8003844 <main+0x60>)
 8003826:	f000 fb6b 	bl	8003f00 <sayServoAngle>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
#ifdef JH
	  if(ReceiveUartMessage(&huart1, rxMsg, sizeof(rxMsg)) == HAL_OK)
 800382a:	2241      	movs	r2, #65	@ 0x41
 800382c:	4906      	ldr	r1, [pc, #24]	@ (8003848 <main+0x64>)
 800382e:	4807      	ldr	r0, [pc, #28]	@ (800384c <main+0x68>)
 8003830:	f000 fe2e 	bl	8004490 <ReceiveUartMessage>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d1f7      	bne.n	800382a <main+0x46>
	  {
	      ProcessCommand(rxMsg);
 800383a:	4803      	ldr	r0, [pc, #12]	@ (8003848 <main+0x64>)
 800383c:	f7fd fdc2 	bl	80013c4 <ProcessCommand>
	  if(ReceiveUartMessage(&huart1, rxMsg, sizeof(rxMsg)) == HAL_OK)
 8003840:	e7f3      	b.n	800382a <main+0x46>
 8003842:	bf00      	nop
 8003844:	20007778 	.word	0x20007778
 8003848:	20007890 	.word	0x20007890
 800384c:	200077c8 	.word	0x200077c8

08003850 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b094      	sub	sp, #80	@ 0x50
 8003854:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003856:	f107 0320 	add.w	r3, r7, #32
 800385a:	2230      	movs	r2, #48	@ 0x30
 800385c:	2100      	movs	r1, #0
 800385e:	4618      	mov	r0, r3
 8003860:	f010 f827 	bl	80138b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003864:	f107 030c 	add.w	r3, r7, #12
 8003868:	2200      	movs	r2, #0
 800386a:	601a      	str	r2, [r3, #0]
 800386c:	605a      	str	r2, [r3, #4]
 800386e:	609a      	str	r2, [r3, #8]
 8003870:	60da      	str	r2, [r3, #12]
 8003872:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003874:	4b2a      	ldr	r3, [pc, #168]	@ (8003920 <SystemClock_Config+0xd0>)
 8003876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003878:	4a29      	ldr	r2, [pc, #164]	@ (8003920 <SystemClock_Config+0xd0>)
 800387a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800387e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003880:	4b27      	ldr	r3, [pc, #156]	@ (8003920 <SystemClock_Config+0xd0>)
 8003882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003884:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003888:	60bb      	str	r3, [r7, #8]
 800388a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800388c:	4b25      	ldr	r3, [pc, #148]	@ (8003924 <SystemClock_Config+0xd4>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a24      	ldr	r2, [pc, #144]	@ (8003924 <SystemClock_Config+0xd4>)
 8003892:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003896:	6013      	str	r3, [r2, #0]
 8003898:	4b22      	ldr	r3, [pc, #136]	@ (8003924 <SystemClock_Config+0xd4>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80038a0:	607b      	str	r3, [r7, #4]
 80038a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80038a4:	2302      	movs	r3, #2
 80038a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80038a8:	2301      	movs	r3, #1
 80038aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80038ac:	2310      	movs	r3, #16
 80038ae:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80038b0:	2302      	movs	r3, #2
 80038b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80038b4:	2300      	movs	r3, #0
 80038b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80038b8:	2308      	movs	r3, #8
 80038ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80038bc:	23d8      	movs	r3, #216	@ 0xd8
 80038be:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80038c0:	2302      	movs	r3, #2
 80038c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80038c4:	2302      	movs	r3, #2
 80038c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80038c8:	f107 0320 	add.w	r3, r7, #32
 80038cc:	4618      	mov	r0, r3
 80038ce:	f002 ff97 	bl	8006800 <HAL_RCC_OscConfig>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d001      	beq.n	80038dc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80038d8:	f000 f9ac 	bl	8003c34 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80038dc:	f002 ff40 	bl	8006760 <HAL_PWREx_EnableOverDrive>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d001      	beq.n	80038ea <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80038e6:	f000 f9a5 	bl	8003c34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80038ea:	230f      	movs	r3, #15
 80038ec:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80038ee:	2302      	movs	r3, #2
 80038f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80038f2:	2300      	movs	r3, #0
 80038f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80038f6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80038fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80038fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003900:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8003902:	f107 030c 	add.w	r3, r7, #12
 8003906:	2107      	movs	r1, #7
 8003908:	4618      	mov	r0, r3
 800390a:	f003 fa1d 	bl	8006d48 <HAL_RCC_ClockConfig>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d001      	beq.n	8003918 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8003914:	f000 f98e 	bl	8003c34 <Error_Handler>
  }
}
 8003918:	bf00      	nop
 800391a:	3750      	adds	r7, #80	@ 0x50
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}
 8003920:	40023800 	.word	0x40023800
 8003924:	40007000 	.word	0x40007000

08003928 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800392c:	2200      	movs	r2, #0
 800392e:	2100      	movs	r1, #0
 8003930:	2025      	movs	r0, #37	@ 0x25
 8003932:	f001 f878 	bl	8004a26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003936:	2025      	movs	r0, #37	@ 0x25
 8003938:	f001 f891 	bl	8004a5e <HAL_NVIC_EnableIRQ>
  /* I2C1_ER_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800393c:	2200      	movs	r2, #0
 800393e:	2100      	movs	r1, #0
 8003940:	2020      	movs	r0, #32
 8003942:	f001 f870 	bl	8004a26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003946:	2020      	movs	r0, #32
 8003948:	f001 f889 	bl	8004a5e <HAL_NVIC_EnableIRQ>
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800394c:	2200      	movs	r2, #0
 800394e:	2100      	movs	r1, #0
 8003950:	201f      	movs	r0, #31
 8003952:	f001 f868 	bl	8004a26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003956:	201f      	movs	r0, #31
 8003958:	f001 f881 	bl	8004a5e <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800395c:	2200      	movs	r2, #0
 800395e:	2100      	movs	r1, #0
 8003960:	2028      	movs	r0, #40	@ 0x28
 8003962:	f001 f860 	bl	8004a26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003966:	2028      	movs	r0, #40	@ 0x28
 8003968:	f001 f879 	bl	8004a5e <HAL_NVIC_EnableIRQ>
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800396c:	2200      	movs	r2, #0
 800396e:	2100      	movs	r1, #0
 8003970:	2017      	movs	r0, #23
 8003972:	f001 f858 	bl	8004a26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003976:	2017      	movs	r0, #23
 8003978:	f001 f871 	bl	8004a5e <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800397c:	2200      	movs	r2, #0
 800397e:	2100      	movs	r1, #0
 8003980:	201c      	movs	r0, #28
 8003982:	f001 f850 	bl	8004a26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003986:	201c      	movs	r0, #28
 8003988:	f001 f869 	bl	8004a5e <HAL_NVIC_EnableIRQ>
}
 800398c:	bf00      	nop
 800398e:	bd80      	pop	{r7, pc}

08003990 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8003994:	4b0d      	ldr	r3, [pc, #52]	@ (80039cc <MX_CRC_Init+0x3c>)
 8003996:	4a0e      	ldr	r2, [pc, #56]	@ (80039d0 <MX_CRC_Init+0x40>)
 8003998:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800399a:	4b0c      	ldr	r3, [pc, #48]	@ (80039cc <MX_CRC_Init+0x3c>)
 800399c:	2200      	movs	r2, #0
 800399e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80039a0:	4b0a      	ldr	r3, [pc, #40]	@ (80039cc <MX_CRC_Init+0x3c>)
 80039a2:	2200      	movs	r2, #0
 80039a4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80039a6:	4b09      	ldr	r3, [pc, #36]	@ (80039cc <MX_CRC_Init+0x3c>)
 80039a8:	2200      	movs	r2, #0
 80039aa:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80039ac:	4b07      	ldr	r3, [pc, #28]	@ (80039cc <MX_CRC_Init+0x3c>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80039b2:	4b06      	ldr	r3, [pc, #24]	@ (80039cc <MX_CRC_Init+0x3c>)
 80039b4:	2201      	movs	r2, #1
 80039b6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80039b8:	4804      	ldr	r0, [pc, #16]	@ (80039cc <MX_CRC_Init+0x3c>)
 80039ba:	f001 f86b 	bl	8004a94 <HAL_CRC_Init>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d001      	beq.n	80039c8 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80039c4:	f000 f936 	bl	8003c34 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80039c8:	bf00      	nop
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	20007754 	.word	0x20007754
 80039d0:	40023000 	.word	0x40023000

080039d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b08e      	sub	sp, #56	@ 0x38
 80039d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80039da:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80039de:	2200      	movs	r2, #0
 80039e0:	601a      	str	r2, [r3, #0]
 80039e2:	605a      	str	r2, [r3, #4]
 80039e4:	609a      	str	r2, [r3, #8]
 80039e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039e8:	f107 031c 	add.w	r3, r7, #28
 80039ec:	2200      	movs	r2, #0
 80039ee:	601a      	str	r2, [r3, #0]
 80039f0:	605a      	str	r2, [r3, #4]
 80039f2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80039f4:	463b      	mov	r3, r7
 80039f6:	2200      	movs	r2, #0
 80039f8:	601a      	str	r2, [r3, #0]
 80039fa:	605a      	str	r2, [r3, #4]
 80039fc:	609a      	str	r2, [r3, #8]
 80039fe:	60da      	str	r2, [r3, #12]
 8003a00:	611a      	str	r2, [r3, #16]
 8003a02:	615a      	str	r2, [r3, #20]
 8003a04:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003a06:	4b2e      	ldr	r3, [pc, #184]	@ (8003ac0 <MX_TIM2_Init+0xec>)
 8003a08:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003a0c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2160-1;
 8003a0e:	4b2c      	ldr	r3, [pc, #176]	@ (8003ac0 <MX_TIM2_Init+0xec>)
 8003a10:	f640 026f 	movw	r2, #2159	@ 0x86f
 8003a14:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a16:	4b2a      	ldr	r3, [pc, #168]	@ (8003ac0 <MX_TIM2_Init+0xec>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8003a1c:	4b28      	ldr	r3, [pc, #160]	@ (8003ac0 <MX_TIM2_Init+0xec>)
 8003a1e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003a22:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a24:	4b26      	ldr	r3, [pc, #152]	@ (8003ac0 <MX_TIM2_Init+0xec>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a2a:	4b25      	ldr	r3, [pc, #148]	@ (8003ac0 <MX_TIM2_Init+0xec>)
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003a30:	4823      	ldr	r0, [pc, #140]	@ (8003ac0 <MX_TIM2_Init+0xec>)
 8003a32:	f003 ff9f 	bl	8007974 <HAL_TIM_Base_Init>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d001      	beq.n	8003a40 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8003a3c:	f000 f8fa 	bl	8003c34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a40:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003a44:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003a46:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	481c      	ldr	r0, [pc, #112]	@ (8003ac0 <MX_TIM2_Init+0xec>)
 8003a4e:	f004 fb77 	bl	8008140 <HAL_TIM_ConfigClockSource>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d001      	beq.n	8003a5c <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8003a58:	f000 f8ec 	bl	8003c34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003a5c:	4818      	ldr	r0, [pc, #96]	@ (8003ac0 <MX_TIM2_Init+0xec>)
 8003a5e:	f003 ffe0 	bl	8007a22 <HAL_TIM_PWM_Init>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d001      	beq.n	8003a6c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8003a68:	f000 f8e4 	bl	8003c34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a70:	2300      	movs	r3, #0
 8003a72:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003a74:	f107 031c 	add.w	r3, r7, #28
 8003a78:	4619      	mov	r1, r3
 8003a7a:	4811      	ldr	r0, [pc, #68]	@ (8003ac0 <MX_TIM2_Init+0xec>)
 8003a7c:	f005 f81a 	bl	8008ab4 <HAL_TIMEx_MasterConfigSynchronization>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d001      	beq.n	8003a8a <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8003a86:	f000 f8d5 	bl	8003c34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a8a:	2360      	movs	r3, #96	@ 0x60
 8003a8c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a92:	2300      	movs	r3, #0
 8003a94:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a96:	2300      	movs	r3, #0
 8003a98:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003a9a:	463b      	mov	r3, r7
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	4619      	mov	r1, r3
 8003aa0:	4807      	ldr	r0, [pc, #28]	@ (8003ac0 <MX_TIM2_Init+0xec>)
 8003aa2:	f004 fa39 	bl	8007f18 <HAL_TIM_PWM_ConfigChannel>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d001      	beq.n	8003ab0 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8003aac:	f000 f8c2 	bl	8003c34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003ab0:	4803      	ldr	r0, [pc, #12]	@ (8003ac0 <MX_TIM2_Init+0xec>)
 8003ab2:	f000 fb4f 	bl	8004154 <HAL_TIM_MspPostInit>

}
 8003ab6:	bf00      	nop
 8003ab8:	3738      	adds	r7, #56	@ 0x38
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	20007778 	.word	0x20007778

08003ac4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b08a      	sub	sp, #40	@ 0x28
 8003ac8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003aca:	f107 0314 	add.w	r3, r7, #20
 8003ace:	2200      	movs	r2, #0
 8003ad0:	601a      	str	r2, [r3, #0]
 8003ad2:	605a      	str	r2, [r3, #4]
 8003ad4:	609a      	str	r2, [r3, #8]
 8003ad6:	60da      	str	r2, [r3, #12]
 8003ad8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ada:	4b51      	ldr	r3, [pc, #324]	@ (8003c20 <MX_GPIO_Init+0x15c>)
 8003adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ade:	4a50      	ldr	r2, [pc, #320]	@ (8003c20 <MX_GPIO_Init+0x15c>)
 8003ae0:	f043 0302 	orr.w	r3, r3, #2
 8003ae4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ae6:	4b4e      	ldr	r3, [pc, #312]	@ (8003c20 <MX_GPIO_Init+0x15c>)
 8003ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aea:	f003 0302 	and.w	r3, r3, #2
 8003aee:	613b      	str	r3, [r7, #16]
 8003af0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003af2:	4b4b      	ldr	r3, [pc, #300]	@ (8003c20 <MX_GPIO_Init+0x15c>)
 8003af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003af6:	4a4a      	ldr	r2, [pc, #296]	@ (8003c20 <MX_GPIO_Init+0x15c>)
 8003af8:	f043 0301 	orr.w	r3, r3, #1
 8003afc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003afe:	4b48      	ldr	r3, [pc, #288]	@ (8003c20 <MX_GPIO_Init+0x15c>)
 8003b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b02:	f003 0301 	and.w	r3, r3, #1
 8003b06:	60fb      	str	r3, [r7, #12]
 8003b08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8003b0a:	4b45      	ldr	r3, [pc, #276]	@ (8003c20 <MX_GPIO_Init+0x15c>)
 8003b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b0e:	4a44      	ldr	r2, [pc, #272]	@ (8003c20 <MX_GPIO_Init+0x15c>)
 8003b10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b14:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b16:	4b42      	ldr	r3, [pc, #264]	@ (8003c20 <MX_GPIO_Init+0x15c>)
 8003b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b1e:	60bb      	str	r3, [r7, #8]
 8003b20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003b22:	4b3f      	ldr	r3, [pc, #252]	@ (8003c20 <MX_GPIO_Init+0x15c>)
 8003b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b26:	4a3e      	ldr	r2, [pc, #248]	@ (8003c20 <MX_GPIO_Init+0x15c>)
 8003b28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b2e:	4b3c      	ldr	r3, [pc, #240]	@ (8003c20 <MX_GPIO_Init+0x15c>)
 8003b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b36:	607b      	str	r3, [r7, #4]
 8003b38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003b3a:	4b39      	ldr	r3, [pc, #228]	@ (8003c20 <MX_GPIO_Init+0x15c>)
 8003b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b3e:	4a38      	ldr	r2, [pc, #224]	@ (8003c20 <MX_GPIO_Init+0x15c>)
 8003b40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b44:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b46:	4b36      	ldr	r3, [pc, #216]	@ (8003c20 <MX_GPIO_Init+0x15c>)
 8003b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b4e:	603b      	str	r3, [r7, #0]
 8003b50:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8003b52:	2200      	movs	r2, #0
 8003b54:	2110      	movs	r1, #16
 8003b56:	4833      	ldr	r0, [pc, #204]	@ (8003c24 <MX_GPIO_Init+0x160>)
 8003b58:	f001 faea 	bl	8005130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0, GPIO_PIN_RESET);
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	210f      	movs	r1, #15
 8003b60:	4831      	ldr	r0, [pc, #196]	@ (8003c28 <MX_GPIO_Init+0x164>)
 8003b62:	f001 fae5 	bl	8005130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7|GPIO_PIN_6, GPIO_PIN_RESET);
 8003b66:	2200      	movs	r2, #0
 8003b68:	21c0      	movs	r1, #192	@ 0xc0
 8003b6a:	4830      	ldr	r0, [pc, #192]	@ (8003c2c <MX_GPIO_Init+0x168>)
 8003b6c:	f001 fae0 	bl	8005130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003b70:	2310      	movs	r3, #16
 8003b72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b74:	2301      	movs	r3, #1
 8003b76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b80:	f107 0314 	add.w	r3, r7, #20
 8003b84:	4619      	mov	r1, r3
 8003b86:	4827      	ldr	r0, [pc, #156]	@ (8003c24 <MX_GPIO_Init+0x160>)
 8003b88:	f001 f90e 	bl	8004da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI3 PI2 PI1 PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0;
 8003b8c:	230f      	movs	r3, #15
 8003b8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b90:	2301      	movs	r3, #1
 8003b92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b94:	2300      	movs	r3, #0
 8003b96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003b9c:	f107 0314 	add.w	r3, r7, #20
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	4821      	ldr	r0, [pc, #132]	@ (8003c28 <MX_GPIO_Init+0x164>)
 8003ba4:	f001 f900 	bl	8004da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003ba8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003bac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003bae:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003bb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bb8:	f107 0314 	add.w	r3, r7, #20
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	481c      	ldr	r0, [pc, #112]	@ (8003c30 <MX_GPIO_Init+0x16c>)
 8003bc0:	f001 f8f2 	bl	8004da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8003bc4:	23c0      	movs	r3, #192	@ 0xc0
 8003bc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003bd4:	f107 0314 	add.w	r3, r7, #20
 8003bd8:	4619      	mov	r1, r3
 8003bda:	4814      	ldr	r0, [pc, #80]	@ (8003c2c <MX_GPIO_Init+0x168>)
 8003bdc:	f001 f8e4 	bl	8004da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003be0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003be4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003be6:	2300      	movs	r3, #0
 8003be8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bea:	2300      	movs	r3, #0
 8003bec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bee:	f107 0314 	add.w	r3, r7, #20
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	480b      	ldr	r0, [pc, #44]	@ (8003c24 <MX_GPIO_Init+0x160>)
 8003bf6:	f001 f8d7 	bl	8004da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003bfa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003bfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003c00:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003c04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c06:	2300      	movs	r3, #0
 8003c08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c0a:	f107 0314 	add.w	r3, r7, #20
 8003c0e:	4619      	mov	r1, r3
 8003c10:	4804      	ldr	r0, [pc, #16]	@ (8003c24 <MX_GPIO_Init+0x160>)
 8003c12:	f001 f8c9 	bl	8004da8 <HAL_GPIO_Init>

}
 8003c16:	bf00      	nop
 8003c18:	3728      	adds	r7, #40	@ 0x28
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	40023800 	.word	0x40023800
 8003c24:	40020400 	.word	0x40020400
 8003c28:	40022000 	.word	0x40022000
 8003c2c:	40021800 	.word	0x40021800
 8003c30:	40020000 	.word	0x40020000

08003c34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003c38:	b672      	cpsid	i
}
 8003c3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "Error\n\r"), 100);
 8003c3c:	4905      	ldr	r1, [pc, #20]	@ (8003c54 <Error_Handler+0x20>)
 8003c3e:	4806      	ldr	r0, [pc, #24]	@ (8003c58 <Error_Handler+0x24>)
 8003c40:	f00f fda8 	bl	8013794 <siprintf>
 8003c44:	4603      	mov	r3, r0
 8003c46:	b29a      	uxth	r2, r3
 8003c48:	2364      	movs	r3, #100	@ 0x64
 8003c4a:	4903      	ldr	r1, [pc, #12]	@ (8003c58 <Error_Handler+0x24>)
 8003c4c:	4803      	ldr	r0, [pc, #12]	@ (8003c5c <Error_Handler+0x28>)
 8003c4e:	f005 f82b 	bl	8008ca8 <HAL_UART_Transmit>
 8003c52:	e7f3      	b.n	8003c3c <Error_Handler+0x8>
 8003c54:	08018a78 	.word	0x08018a78
 8003c58:	20007850 	.word	0x20007850
 8003c5c:	200077c8 	.word	0x200077c8

08003c60 <stepRev>:
#define GEAR 139

#define MIN_PULSE 50   // 1ms 펄스에 해당
#define MAX_PULSE 100  // 2ms 펄스에 해당

void stepRev(int ANG) {
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b086      	sub	sp, #24
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
	// ENA D2 PG7 GPIOG GPIO_PIN_6
	// CLK D3 PB4 GPIOB GPIO_PIN_4
	// DIR D4 PG7 GPIOG GPIO_PIN_7


  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);  // ENA
 8003c68:	2200      	movs	r2, #0
 8003c6a:	2140      	movs	r1, #64	@ 0x40
 8003c6c:	482d      	ldr	r0, [pc, #180]	@ (8003d24 <stepRev+0xc4>)
 8003c6e:	f001 fa5f 	bl	8005130 <HAL_GPIO_WritePin>

  if (ANG != 0) {
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d04c      	beq.n	8003d12 <stepRev+0xb2>
    int direction = (ANG > 0) ? 1 : -1;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	dd01      	ble.n	8003c82 <stepRev+0x22>
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e001      	b.n	8003c86 <stepRev+0x26>
 8003c82:	f04f 33ff 	mov.w	r3, #4294967295
 8003c86:	613b      	str	r3, [r7, #16]
    ANG *= direction;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	693a      	ldr	r2, [r7, #16]
 8003c8c:	fb02 f303 	mul.w	r3, r2, r3
 8003c90:	607b      	str	r3, [r7, #4]
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, direction == 1 ? GPIO_PIN_SET : GPIO_PIN_RESET); // DIR
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	bf0c      	ite	eq
 8003c98:	2301      	moveq	r3, #1
 8003c9a:	2300      	movne	r3, #0
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	2180      	movs	r1, #128	@ 0x80
 8003ca2:	4820      	ldr	r0, [pc, #128]	@ (8003d24 <stepRev+0xc4>)
 8003ca4:	f001 fa44 	bl	8005130 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET); // ENA
 8003ca8:	2200      	movs	r2, #0
 8003caa:	2140      	movs	r1, #64	@ 0x40
 8003cac:	481d      	ldr	r0, [pc, #116]	@ (8003d24 <stepRev+0xc4>)
 8003cae:	f001 fa3f 	bl	8005130 <HAL_GPIO_WritePin>
    uint32_t steps = PULSE * GEAR * ANG / 360.0;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f646 4298 	movw	r2, #27800	@ 0x6c98
 8003cb8:	fb02 f303 	mul.w	r3, r2, r3
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f7fc fc61 	bl	8000584 <__aeabi_i2d>
 8003cc2:	f04f 0200 	mov.w	r2, #0
 8003cc6:	4b18      	ldr	r3, [pc, #96]	@ (8003d28 <stepRev+0xc8>)
 8003cc8:	f7fc fdf0 	bl	80008ac <__aeabi_ddiv>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	460b      	mov	r3, r1
 8003cd0:	4610      	mov	r0, r2
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	f7fc ff98 	bl	8000c08 <__aeabi_d2uiz>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	60fb      	str	r3, [r7, #12]

    for (int i = 0; i < steps; i++) {
 8003cdc:	2300      	movs	r3, #0
 8003cde:	617b      	str	r3, [r7, #20]
 8003ce0:	e012      	b.n	8003d08 <stepRev+0xa8>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET); //CLK
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	2110      	movs	r1, #16
 8003ce6:	4811      	ldr	r0, [pc, #68]	@ (8003d2c <stepRev+0xcc>)
 8003ce8:	f001 fa22 	bl	8005130 <HAL_GPIO_WritePin>
      HAL_Delay(1); // 변경된 지연 함수 사용
 8003cec:	2001      	movs	r0, #1
 8003cee:	f000 fd9b 	bl	8004828 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); //CLK
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	2110      	movs	r1, #16
 8003cf6:	480d      	ldr	r0, [pc, #52]	@ (8003d2c <stepRev+0xcc>)
 8003cf8:	f001 fa1a 	bl	8005130 <HAL_GPIO_WritePin>
      HAL_Delay(1); // 변경된 지연 함수 사용
 8003cfc:	2001      	movs	r0, #1
 8003cfe:	f000 fd93 	bl	8004828 <HAL_Delay>
    for (int i = 0; i < steps; i++) {
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	3301      	adds	r3, #1
 8003d06:	617b      	str	r3, [r7, #20]
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	68fa      	ldr	r2, [r7, #12]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d8e8      	bhi.n	8003ce2 <stepRev+0x82>
  }
  else {
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET); // ENA
  }

}
 8003d10:	e004      	b.n	8003d1c <stepRev+0xbc>
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET); // ENA
 8003d12:	2200      	movs	r2, #0
 8003d14:	2140      	movs	r1, #64	@ 0x40
 8003d16:	4803      	ldr	r0, [pc, #12]	@ (8003d24 <stepRev+0xc4>)
 8003d18:	f001 fa0a 	bl	8005130 <HAL_GPIO_WritePin>
}
 8003d1c:	bf00      	nop
 8003d1e:	3718      	adds	r7, #24
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	40021800 	.word	0x40021800
 8003d28:	40768000 	.word	0x40768000
 8003d2c:	40020400 	.word	0x40020400

08003d30 <stepLin>:

void stepLin(int DIST) {
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b086      	sub	sp, #24
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]

	// ENA D5 PI0 GPIOI GPIO_PIN_0
	// CLK D8 PI2 GPIOI GPIO_PIN_2
	// DIR D7 PI3 GPIOI GPIO_PIN_3

  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_SET);  // ENA
 8003d38:	2201      	movs	r2, #1
 8003d3a:	2101      	movs	r1, #1
 8003d3c:	4829      	ldr	r0, [pc, #164]	@ (8003de4 <stepLin+0xb4>)
 8003d3e:	f001 f9f7 	bl	8005130 <HAL_GPIO_WritePin>

  if (DIST != 0) {
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d03e      	beq.n	8003dc6 <stepLin+0x96>
    int direction = (DIST > 0) ? 1 : -1;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	dd01      	ble.n	8003d52 <stepLin+0x22>
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e001      	b.n	8003d56 <stepLin+0x26>
 8003d52:	f04f 33ff 	mov.w	r3, #4294967295
 8003d56:	613b      	str	r3, [r7, #16]
    DIST *= direction;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	fb02 f303 	mul.w	r3, r2, r3
 8003d60:	607b      	str	r3, [r7, #4]
    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_3, direction == 1 ? GPIO_PIN_SET : GPIO_PIN_RESET); // DIR
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	bf0c      	ite	eq
 8003d68:	2301      	moveq	r3, #1
 8003d6a:	2300      	movne	r3, #0
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	461a      	mov	r2, r3
 8003d70:	2108      	movs	r1, #8
 8003d72:	481c      	ldr	r0, [pc, #112]	@ (8003de4 <stepLin+0xb4>)
 8003d74:	f001 f9dc 	bl	8005130 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_RESET);  // ENA
 8003d78:	2200      	movs	r2, #0
 8003d7a:	2101      	movs	r1, #1
 8003d7c:	4819      	ldr	r0, [pc, #100]	@ (8003de4 <stepLin+0xb4>)
 8003d7e:	f001 f9d7 	bl	8005130 <HAL_GPIO_WritePin>
    uint32_t steps = 25*DIST;
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	4613      	mov	r3, r2
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	4413      	add	r3, r2
 8003d8a:	009a      	lsls	r2, r3, #2
 8003d8c:	4413      	add	r3, r2
 8003d8e:	60fb      	str	r3, [r7, #12]
	//HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d\n ", steps), 1000);


    for (int i = 0; i < steps; i++) {
 8003d90:	2300      	movs	r3, #0
 8003d92:	617b      	str	r3, [r7, #20]
 8003d94:	e012      	b.n	8003dbc <stepLin+0x8c>
      HAL_GPIO_WritePin(GPIOI, GPIO_PIN_2, GPIO_PIN_SET); // CLK
 8003d96:	2201      	movs	r2, #1
 8003d98:	2104      	movs	r1, #4
 8003d9a:	4812      	ldr	r0, [pc, #72]	@ (8003de4 <stepLin+0xb4>)
 8003d9c:	f001 f9c8 	bl	8005130 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8003da0:	2001      	movs	r0, #1
 8003da2:	f000 fd41 	bl	8004828 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOI, GPIO_PIN_2, GPIO_PIN_RESET); // CLK
 8003da6:	2200      	movs	r2, #0
 8003da8:	2104      	movs	r1, #4
 8003daa:	480e      	ldr	r0, [pc, #56]	@ (8003de4 <stepLin+0xb4>)
 8003dac:	f001 f9c0 	bl	8005130 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8003db0:	2001      	movs	r0, #1
 8003db2:	f000 fd39 	bl	8004828 <HAL_Delay>
    for (int i = 0; i < steps; i++) {
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	3301      	adds	r3, #1
 8003dba:	617b      	str	r3, [r7, #20]
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	68fa      	ldr	r2, [r7, #12]
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d8e8      	bhi.n	8003d96 <stepLin+0x66>
 8003dc4:	e004      	b.n	8003dd0 <stepLin+0xa0>
    }
  }
  else {
    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_RESET);  // ENA
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	2101      	movs	r1, #1
 8003dca:	4806      	ldr	r0, [pc, #24]	@ (8003de4 <stepLin+0xb4>)
 8003dcc:	f001 f9b0 	bl	8005130 <HAL_GPIO_WritePin>
  }

  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_SET);  // ENA
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	2101      	movs	r1, #1
 8003dd4:	4803      	ldr	r0, [pc, #12]	@ (8003de4 <stepLin+0xb4>)
 8003dd6:	f001 f9ab 	bl	8005130 <HAL_GPIO_WritePin>

}
 8003dda:	bf00      	nop
 8003ddc:	3718      	adds	r7, #24
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	40022000 	.word	0x40022000

08003de8 <servo_angle>:

void servo_angle(TIM_HandleTypeDef *htim, uint32_t channel, int step) {
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b086      	sub	sp, #24
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	607a      	str	r2, [r7, #4]

	// 1 step is 0.8 mm

    int pulse_width = step; // 듀티 사이클 계산 (0도에서 180도까지)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	617b      	str	r3, [r7, #20]
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width); // 듀티 사이클 변경
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d104      	bne.n	8003e08 <servo_angle+0x20>
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	697a      	ldr	r2, [r7, #20]
 8003e04:	635a      	str	r2, [r3, #52]	@ 0x34
 8003e06:	e023      	b.n	8003e50 <servo_angle+0x68>
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	2b04      	cmp	r3, #4
 8003e0c:	d104      	bne.n	8003e18 <servo_angle+0x30>
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	6393      	str	r3, [r2, #56]	@ 0x38
 8003e16:	e01b      	b.n	8003e50 <servo_angle+0x68>
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	2b08      	cmp	r3, #8
 8003e1c:	d104      	bne.n	8003e28 <servo_angle+0x40>
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8003e26:	e013      	b.n	8003e50 <servo_angle+0x68>
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	2b0c      	cmp	r3, #12
 8003e2c:	d104      	bne.n	8003e38 <servo_angle+0x50>
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e36:	e00b      	b.n	8003e50 <servo_angle+0x68>
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	2b10      	cmp	r3, #16
 8003e3c:	d104      	bne.n	8003e48 <servo_angle+0x60>
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e46:	e003      	b.n	8003e50 <servo_angle+0x68>
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	65d3      	str	r3, [r2, #92]	@ 0x5c
    HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "pulse_width : %d \n\r", pulse_width), 100);
 8003e50:	697a      	ldr	r2, [r7, #20]
 8003e52:	4907      	ldr	r1, [pc, #28]	@ (8003e70 <servo_angle+0x88>)
 8003e54:	4807      	ldr	r0, [pc, #28]	@ (8003e74 <servo_angle+0x8c>)
 8003e56:	f00f fc9d 	bl	8013794 <siprintf>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	b29a      	uxth	r2, r3
 8003e5e:	2364      	movs	r3, #100	@ 0x64
 8003e60:	4904      	ldr	r1, [pc, #16]	@ (8003e74 <servo_angle+0x8c>)
 8003e62:	4805      	ldr	r0, [pc, #20]	@ (8003e78 <servo_angle+0x90>)
 8003e64:	f004 ff20 	bl	8008ca8 <HAL_UART_Transmit>

}
 8003e68:	bf00      	nop
 8003e6a:	3718      	adds	r7, #24
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	08018a80 	.word	0x08018a80
 8003e74:	20007850 	.word	0x20007850
 8003e78:	200077c8 	.word	0x200077c8

08003e7c <setServoAngle>:

void setServoAngle(TIM_HandleTypeDef *htim, uint32_t channel, uint8_t value) {
 8003e7c:	b480      	push	{r7}
 8003e7e:	b087      	sub	sp, #28
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	60b9      	str	r1, [r7, #8]
 8003e86:	4613      	mov	r3, r2
 8003e88:	71fb      	strb	r3, [r7, #7]
    uint16_t pulse_length;
    // 각도에 따른 펄스 길이 계산
    if(value<0){value = 0;}
    if(value>100){value = 100;}
 8003e8a:	79fb      	ldrb	r3, [r7, #7]
 8003e8c:	2b64      	cmp	r3, #100	@ 0x64
 8003e8e:	d901      	bls.n	8003e94 <setServoAngle+0x18>
 8003e90:	2364      	movs	r3, #100	@ 0x64
 8003e92:	71fb      	strb	r3, [r7, #7]
    pulse_length = value+22;
 8003e94:	79fb      	ldrb	r3, [r7, #7]
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	3316      	adds	r3, #22
 8003e9a:	82fb      	strh	r3, [r7, #22]
	__HAL_TIM_SET_COMPARE(htim, channel, pulse_length); // 듀티 사이클 변경
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d104      	bne.n	8003eac <setServoAngle+0x30>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	8afa      	ldrh	r2, [r7, #22]
 8003ea8:	635a      	str	r2, [r3, #52]	@ 0x34
    //HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "pulse_length : %2f \n\r", value*0.47), 100);

}
 8003eaa:	e023      	b.n	8003ef4 <setServoAngle+0x78>
	__HAL_TIM_SET_COMPARE(htim, channel, pulse_length); // 듀티 사이클 변경
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	2b04      	cmp	r3, #4
 8003eb0:	d104      	bne.n	8003ebc <setServoAngle+0x40>
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	8afb      	ldrh	r3, [r7, #22]
 8003eb8:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8003eba:	e01b      	b.n	8003ef4 <setServoAngle+0x78>
	__HAL_TIM_SET_COMPARE(htim, channel, pulse_length); // 듀티 사이클 변경
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	2b08      	cmp	r3, #8
 8003ec0:	d104      	bne.n	8003ecc <setServoAngle+0x50>
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	8afb      	ldrh	r3, [r7, #22]
 8003ec8:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8003eca:	e013      	b.n	8003ef4 <setServoAngle+0x78>
	__HAL_TIM_SET_COMPARE(htim, channel, pulse_length); // 듀티 사이클 변경
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	2b0c      	cmp	r3, #12
 8003ed0:	d104      	bne.n	8003edc <setServoAngle+0x60>
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	8afb      	ldrh	r3, [r7, #22]
 8003ed8:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8003eda:	e00b      	b.n	8003ef4 <setServoAngle+0x78>
	__HAL_TIM_SET_COMPARE(htim, channel, pulse_length); // 듀티 사이클 변경
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	2b10      	cmp	r3, #16
 8003ee0:	d104      	bne.n	8003eec <setServoAngle+0x70>
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	8afb      	ldrh	r3, [r7, #22]
 8003ee8:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8003eea:	e003      	b.n	8003ef4 <setServoAngle+0x78>
	__HAL_TIM_SET_COMPARE(htim, channel, pulse_length); // 듀티 사이클 변경
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	8afb      	ldrh	r3, [r7, #22]
 8003ef2:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 8003ef4:	bf00      	nop
 8003ef6:	371c      	adds	r7, #28
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <sayServoAngle>:
void sayServoAngle(TIM_HandleTypeDef *htim, uint32_t channel, uint8_t value) {
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b086      	sub	sp, #24
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	71fb      	strb	r3, [r7, #7]
    uint16_t pulse_length;
    // 각도에 따른 펄스 길이 계산
    if(value<0){value = 0;}
    if(value>100){value = 100;}
 8003f0e:	79fb      	ldrb	r3, [r7, #7]
 8003f10:	2b64      	cmp	r3, #100	@ 0x64
 8003f12:	d901      	bls.n	8003f18 <sayServoAngle+0x18>
 8003f14:	2364      	movs	r3, #100	@ 0x64
 8003f16:	71fb      	strb	r3, [r7, #7]
    pulse_length = value+22;
 8003f18:	79fb      	ldrb	r3, [r7, #7]
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	3316      	adds	r3, #22
 8003f1e:	82fb      	strh	r3, [r7, #22]
	__HAL_TIM_SET_COMPARE(htim, channel, pulse_length); // 듀티 사이클 변경
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d104      	bne.n	8003f30 <sayServoAngle+0x30>
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	8afa      	ldrh	r2, [r7, #22]
 8003f2c:	635a      	str	r2, [r3, #52]	@ 0x34
 8003f2e:	e023      	b.n	8003f78 <sayServoAngle+0x78>
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	2b04      	cmp	r3, #4
 8003f34:	d104      	bne.n	8003f40 <sayServoAngle+0x40>
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	8afb      	ldrh	r3, [r7, #22]
 8003f3c:	6393      	str	r3, [r2, #56]	@ 0x38
 8003f3e:	e01b      	b.n	8003f78 <sayServoAngle+0x78>
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	2b08      	cmp	r3, #8
 8003f44:	d104      	bne.n	8003f50 <sayServoAngle+0x50>
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	8afb      	ldrh	r3, [r7, #22]
 8003f4c:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8003f4e:	e013      	b.n	8003f78 <sayServoAngle+0x78>
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	2b0c      	cmp	r3, #12
 8003f54:	d104      	bne.n	8003f60 <sayServoAngle+0x60>
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	8afb      	ldrh	r3, [r7, #22]
 8003f5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f5e:	e00b      	b.n	8003f78 <sayServoAngle+0x78>
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	2b10      	cmp	r3, #16
 8003f64:	d104      	bne.n	8003f70 <sayServoAngle+0x70>
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	8afb      	ldrh	r3, [r7, #22]
 8003f6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f6e:	e003      	b.n	8003f78 <sayServoAngle+0x78>
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	8afb      	ldrh	r3, [r7, #22]
 8003f76:	65d3      	str	r3, [r2, #92]	@ 0x5c
    HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "pulse_length : %2f \n\r", value*0.47), 100);
 8003f78:	79fb      	ldrb	r3, [r7, #7]
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7fc fb02 	bl	8000584 <__aeabi_i2d>
 8003f80:	a30e      	add	r3, pc, #56	@ (adr r3, 8003fbc <sayServoAngle+0xbc>)
 8003f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f86:	f7fc fb67 	bl	8000658 <__aeabi_dmul>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	460b      	mov	r3, r1
 8003f8e:	4908      	ldr	r1, [pc, #32]	@ (8003fb0 <sayServoAngle+0xb0>)
 8003f90:	4808      	ldr	r0, [pc, #32]	@ (8003fb4 <sayServoAngle+0xb4>)
 8003f92:	f00f fbff 	bl	8013794 <siprintf>
 8003f96:	4603      	mov	r3, r0
 8003f98:	b29a      	uxth	r2, r3
 8003f9a:	2364      	movs	r3, #100	@ 0x64
 8003f9c:	4905      	ldr	r1, [pc, #20]	@ (8003fb4 <sayServoAngle+0xb4>)
 8003f9e:	4806      	ldr	r0, [pc, #24]	@ (8003fb8 <sayServoAngle+0xb8>)
 8003fa0:	f004 fe82 	bl	8008ca8 <HAL_UART_Transmit>

}
 8003fa4:	bf00      	nop
 8003fa6:	3718      	adds	r7, #24
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	f3af 8000 	nop.w
 8003fb0:	08018a94 	.word	0x08018a94
 8003fb4:	20007850 	.word	0x20007850
 8003fb8:	200077c8 	.word	0x200077c8
 8003fbc:	e147ae14 	.word	0xe147ae14
 8003fc0:	3fde147a 	.word	0x3fde147a

08003fc4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003fca:	4b12      	ldr	r3, [pc, #72]	@ (8004014 <HAL_MspInit+0x50>)
 8003fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fce:	4a11      	ldr	r2, [pc, #68]	@ (8004014 <HAL_MspInit+0x50>)
 8003fd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003fd6:	4b0f      	ldr	r3, [pc, #60]	@ (8004014 <HAL_MspInit+0x50>)
 8003fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fde:	607b      	str	r3, [r7, #4]
 8003fe0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fe2:	4b0c      	ldr	r3, [pc, #48]	@ (8004014 <HAL_MspInit+0x50>)
 8003fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fe6:	4a0b      	ldr	r2, [pc, #44]	@ (8004014 <HAL_MspInit+0x50>)
 8003fe8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003fec:	6453      	str	r3, [r2, #68]	@ 0x44
 8003fee:	4b09      	ldr	r3, [pc, #36]	@ (8004014 <HAL_MspInit+0x50>)
 8003ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ff2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ff6:	603b      	str	r3, [r7, #0]
 8003ff8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	2100      	movs	r1, #0
 8003ffe:	2005      	movs	r0, #5
 8004000:	f000 fd11 	bl	8004a26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8004004:	2005      	movs	r0, #5
 8004006:	f000 fd2a 	bl	8004a5e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800400a:	bf00      	nop
 800400c:	3708      	adds	r7, #8
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	40023800 	.word	0x40023800

08004018 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8004018:	b480      	push	{r7}
 800401a:	b085      	sub	sp, #20
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a0a      	ldr	r2, [pc, #40]	@ (8004050 <HAL_CRC_MspInit+0x38>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d10b      	bne.n	8004042 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800402a:	4b0a      	ldr	r3, [pc, #40]	@ (8004054 <HAL_CRC_MspInit+0x3c>)
 800402c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800402e:	4a09      	ldr	r2, [pc, #36]	@ (8004054 <HAL_CRC_MspInit+0x3c>)
 8004030:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004034:	6313      	str	r3, [r2, #48]	@ 0x30
 8004036:	4b07      	ldr	r3, [pc, #28]	@ (8004054 <HAL_CRC_MspInit+0x3c>)
 8004038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800403a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800403e:	60fb      	str	r3, [r7, #12]
 8004040:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8004042:	bf00      	nop
 8004044:	3714      	adds	r7, #20
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr
 800404e:	bf00      	nop
 8004050:	40023000 	.word	0x40023000
 8004054:	40023800 	.word	0x40023800

08004058 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b0aa      	sub	sp, #168	@ 0xa8
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004060:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8004064:	2200      	movs	r2, #0
 8004066:	601a      	str	r2, [r3, #0]
 8004068:	605a      	str	r2, [r3, #4]
 800406a:	609a      	str	r2, [r3, #8]
 800406c:	60da      	str	r2, [r3, #12]
 800406e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004070:	f107 0310 	add.w	r3, r7, #16
 8004074:	2284      	movs	r2, #132	@ 0x84
 8004076:	2100      	movs	r1, #0
 8004078:	4618      	mov	r0, r3
 800407a:	f00f fc1a 	bl	80138b2 <memset>
  if(hi2c->Instance==I2C1)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a22      	ldr	r2, [pc, #136]	@ (800410c <HAL_I2C_MspInit+0xb4>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d13c      	bne.n	8004102 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004088:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800408c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800408e:	2300      	movs	r3, #0
 8004090:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004092:	f107 0310 	add.w	r3, r7, #16
 8004096:	4618      	mov	r0, r3
 8004098:	f003 f87c 	bl	8007194 <HAL_RCCEx_PeriphCLKConfig>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d001      	beq.n	80040a6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80040a2:	f7ff fdc7 	bl	8003c34 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040a6:	4b1a      	ldr	r3, [pc, #104]	@ (8004110 <HAL_I2C_MspInit+0xb8>)
 80040a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040aa:	4a19      	ldr	r2, [pc, #100]	@ (8004110 <HAL_I2C_MspInit+0xb8>)
 80040ac:	f043 0302 	orr.w	r3, r3, #2
 80040b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80040b2:	4b17      	ldr	r3, [pc, #92]	@ (8004110 <HAL_I2C_MspInit+0xb8>)
 80040b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040b6:	f003 0302 	and.w	r3, r3, #2
 80040ba:	60fb      	str	r3, [r7, #12]
 80040bc:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80040be:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80040c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80040c6:	2312      	movs	r3, #18
 80040c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040cc:	2300      	movs	r3, #0
 80040ce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040d2:	2303      	movs	r3, #3
 80040d4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80040d8:	2304      	movs	r3, #4
 80040da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040de:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80040e2:	4619      	mov	r1, r3
 80040e4:	480b      	ldr	r0, [pc, #44]	@ (8004114 <HAL_I2C_MspInit+0xbc>)
 80040e6:	f000 fe5f 	bl	8004da8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80040ea:	4b09      	ldr	r3, [pc, #36]	@ (8004110 <HAL_I2C_MspInit+0xb8>)
 80040ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ee:	4a08      	ldr	r2, [pc, #32]	@ (8004110 <HAL_I2C_MspInit+0xb8>)
 80040f0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80040f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80040f6:	4b06      	ldr	r3, [pc, #24]	@ (8004110 <HAL_I2C_MspInit+0xb8>)
 80040f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80040fe:	60bb      	str	r3, [r7, #8]
 8004100:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004102:	bf00      	nop
 8004104:	37a8      	adds	r7, #168	@ 0xa8
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	40005400 	.word	0x40005400
 8004110:	40023800 	.word	0x40023800
 8004114:	40020400 	.word	0x40020400

08004118 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004118:	b480      	push	{r7}
 800411a:	b085      	sub	sp, #20
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004128:	d10b      	bne.n	8004142 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800412a:	4b09      	ldr	r3, [pc, #36]	@ (8004150 <HAL_TIM_Base_MspInit+0x38>)
 800412c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800412e:	4a08      	ldr	r2, [pc, #32]	@ (8004150 <HAL_TIM_Base_MspInit+0x38>)
 8004130:	f043 0301 	orr.w	r3, r3, #1
 8004134:	6413      	str	r3, [r2, #64]	@ 0x40
 8004136:	4b06      	ldr	r3, [pc, #24]	@ (8004150 <HAL_TIM_Base_MspInit+0x38>)
 8004138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800413a:	f003 0301 	and.w	r3, r3, #1
 800413e:	60fb      	str	r3, [r7, #12]
 8004140:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004142:	bf00      	nop
 8004144:	3714      	adds	r7, #20
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	40023800 	.word	0x40023800

08004154 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b088      	sub	sp, #32
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800415c:	f107 030c 	add.w	r3, r7, #12
 8004160:	2200      	movs	r2, #0
 8004162:	601a      	str	r2, [r3, #0]
 8004164:	605a      	str	r2, [r3, #4]
 8004166:	609a      	str	r2, [r3, #8]
 8004168:	60da      	str	r2, [r3, #12]
 800416a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004174:	d11c      	bne.n	80041b0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004176:	4b10      	ldr	r3, [pc, #64]	@ (80041b8 <HAL_TIM_MspPostInit+0x64>)
 8004178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800417a:	4a0f      	ldr	r2, [pc, #60]	@ (80041b8 <HAL_TIM_MspPostInit+0x64>)
 800417c:	f043 0301 	orr.w	r3, r3, #1
 8004180:	6313      	str	r3, [r2, #48]	@ 0x30
 8004182:	4b0d      	ldr	r3, [pc, #52]	@ (80041b8 <HAL_TIM_MspPostInit+0x64>)
 8004184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004186:	f003 0301 	and.w	r3, r3, #1
 800418a:	60bb      	str	r3, [r7, #8]
 800418c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800418e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004192:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004194:	2302      	movs	r3, #2
 8004196:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004198:	2300      	movs	r3, #0
 800419a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800419c:	2300      	movs	r3, #0
 800419e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80041a0:	2301      	movs	r3, #1
 80041a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041a4:	f107 030c 	add.w	r3, r7, #12
 80041a8:	4619      	mov	r1, r3
 80041aa:	4804      	ldr	r0, [pc, #16]	@ (80041bc <HAL_TIM_MspPostInit+0x68>)
 80041ac:	f000 fdfc 	bl	8004da8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80041b0:	bf00      	nop
 80041b2:	3720      	adds	r7, #32
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	40023800 	.word	0x40023800
 80041bc:	40020000 	.word	0x40020000

080041c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b0ac      	sub	sp, #176	@ 0xb0
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041c8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80041cc:	2200      	movs	r2, #0
 80041ce:	601a      	str	r2, [r3, #0]
 80041d0:	605a      	str	r2, [r3, #4]
 80041d2:	609a      	str	r2, [r3, #8]
 80041d4:	60da      	str	r2, [r3, #12]
 80041d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80041d8:	f107 0318 	add.w	r3, r7, #24
 80041dc:	2284      	movs	r2, #132	@ 0x84
 80041de:	2100      	movs	r1, #0
 80041e0:	4618      	mov	r0, r3
 80041e2:	f00f fb66 	bl	80138b2 <memset>
  if(huart->Instance==USART1)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a32      	ldr	r2, [pc, #200]	@ (80042b4 <HAL_UART_MspInit+0xf4>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d15c      	bne.n	80042aa <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80041f0:	2340      	movs	r3, #64	@ 0x40
 80041f2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80041f4:	2300      	movs	r3, #0
 80041f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80041f8:	f107 0318 	add.w	r3, r7, #24
 80041fc:	4618      	mov	r0, r3
 80041fe:	f002 ffc9 	bl	8007194 <HAL_RCCEx_PeriphCLKConfig>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d001      	beq.n	800420c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004208:	f7ff fd14 	bl	8003c34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800420c:	4b2a      	ldr	r3, [pc, #168]	@ (80042b8 <HAL_UART_MspInit+0xf8>)
 800420e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004210:	4a29      	ldr	r2, [pc, #164]	@ (80042b8 <HAL_UART_MspInit+0xf8>)
 8004212:	f043 0310 	orr.w	r3, r3, #16
 8004216:	6453      	str	r3, [r2, #68]	@ 0x44
 8004218:	4b27      	ldr	r3, [pc, #156]	@ (80042b8 <HAL_UART_MspInit+0xf8>)
 800421a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800421c:	f003 0310 	and.w	r3, r3, #16
 8004220:	617b      	str	r3, [r7, #20]
 8004222:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004224:	4b24      	ldr	r3, [pc, #144]	@ (80042b8 <HAL_UART_MspInit+0xf8>)
 8004226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004228:	4a23      	ldr	r2, [pc, #140]	@ (80042b8 <HAL_UART_MspInit+0xf8>)
 800422a:	f043 0302 	orr.w	r3, r3, #2
 800422e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004230:	4b21      	ldr	r3, [pc, #132]	@ (80042b8 <HAL_UART_MspInit+0xf8>)
 8004232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004234:	f003 0302 	and.w	r3, r3, #2
 8004238:	613b      	str	r3, [r7, #16]
 800423a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800423c:	4b1e      	ldr	r3, [pc, #120]	@ (80042b8 <HAL_UART_MspInit+0xf8>)
 800423e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004240:	4a1d      	ldr	r2, [pc, #116]	@ (80042b8 <HAL_UART_MspInit+0xf8>)
 8004242:	f043 0301 	orr.w	r3, r3, #1
 8004246:	6313      	str	r3, [r2, #48]	@ 0x30
 8004248:	4b1b      	ldr	r3, [pc, #108]	@ (80042b8 <HAL_UART_MspInit+0xf8>)
 800424a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800424c:	f003 0301 	and.w	r3, r3, #1
 8004250:	60fb      	str	r3, [r7, #12]
 8004252:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004254:	2380      	movs	r3, #128	@ 0x80
 8004256:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800425a:	2302      	movs	r3, #2
 800425c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004260:	2300      	movs	r3, #0
 8004262:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004266:	2303      	movs	r3, #3
 8004268:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800426c:	2307      	movs	r3, #7
 800426e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004272:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8004276:	4619      	mov	r1, r3
 8004278:	4810      	ldr	r0, [pc, #64]	@ (80042bc <HAL_UART_MspInit+0xfc>)
 800427a:	f000 fd95 	bl	8004da8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800427e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004282:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004286:	2302      	movs	r3, #2
 8004288:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800428c:	2300      	movs	r3, #0
 800428e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004292:	2303      	movs	r3, #3
 8004294:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004298:	2307      	movs	r3, #7
 800429a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800429e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80042a2:	4619      	mov	r1, r3
 80042a4:	4806      	ldr	r0, [pc, #24]	@ (80042c0 <HAL_UART_MspInit+0x100>)
 80042a6:	f000 fd7f 	bl	8004da8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80042aa:	bf00      	nop
 80042ac:	37b0      	adds	r7, #176	@ 0xb0
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	40011000 	.word	0x40011000
 80042b8:	40023800 	.word	0x40023800
 80042bc:	40020400 	.word	0x40020400
 80042c0:	40020000 	.word	0x40020000

080042c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80042c4:	b480      	push	{r7}
 80042c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80042c8:	bf00      	nop
 80042ca:	e7fd      	b.n	80042c8 <NMI_Handler+0x4>

080042cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80042cc:	b480      	push	{r7}
 80042ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80042d0:	bf00      	nop
 80042d2:	e7fd      	b.n	80042d0 <HardFault_Handler+0x4>

080042d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80042d4:	b480      	push	{r7}
 80042d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80042d8:	bf00      	nop
 80042da:	e7fd      	b.n	80042d8 <MemManage_Handler+0x4>

080042dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80042dc:	b480      	push	{r7}
 80042de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80042e0:	bf00      	nop
 80042e2:	e7fd      	b.n	80042e0 <BusFault_Handler+0x4>

080042e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80042e4:	b480      	push	{r7}
 80042e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80042e8:	bf00      	nop
 80042ea:	e7fd      	b.n	80042e8 <UsageFault_Handler+0x4>

080042ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80042ec:	b480      	push	{r7}
 80042ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80042f0:	bf00      	nop
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr

080042fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80042fa:	b480      	push	{r7}
 80042fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80042fe:	bf00      	nop
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004308:	b480      	push	{r7}
 800430a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800430c:	bf00      	nop
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr

08004316 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004316:	b580      	push	{r7, lr}
 8004318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800431a:	f000 fa65 	bl	80047e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800431e:	bf00      	nop
 8004320:	bd80      	pop	{r7, pc}

08004322 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8004322:	b480      	push	{r7}
 8004324:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8004326:	bf00      	nop
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8004334:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8004338:	f000 ff14 	bl	8005164 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800433c:	bf00      	nop
 800433e:	bd80      	pop	{r7, pc}

08004340 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004344:	4802      	ldr	r0, [pc, #8]	@ (8004350 <TIM2_IRQHandler+0x10>)
 8004346:	f003 fcc7 	bl	8007cd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800434a:	bf00      	nop
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	20007778 	.word	0x20007778

08004354 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004358:	4802      	ldr	r0, [pc, #8]	@ (8004364 <I2C1_EV_IRQHandler+0x10>)
 800435a:	f001 f9a1 	bl	80056a0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800435e:	bf00      	nop
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	20007280 	.word	0x20007280

08004368 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800436c:	4802      	ldr	r0, [pc, #8]	@ (8004378 <I2C1_ER_IRQHandler+0x10>)
 800436e:	f001 f9b1 	bl	80056d4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8004372:	bf00      	nop
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	20007280 	.word	0x20007280

0800437c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004380:	4802      	ldr	r0, [pc, #8]	@ (800438c <USART1_IRQHandler+0x10>)
 8004382:	f004 fdd9 	bl	8008f38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004386:	bf00      	nop
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	200077c8 	.word	0x200077c8

08004390 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8004394:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8004398:	f000 fee4 	bl	8005164 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800439c:	bf00      	nop
 800439e:	bd80      	pop	{r7, pc}

080043a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b086      	sub	sp, #24
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80043a8:	4a14      	ldr	r2, [pc, #80]	@ (80043fc <_sbrk+0x5c>)
 80043aa:	4b15      	ldr	r3, [pc, #84]	@ (8004400 <_sbrk+0x60>)
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80043b4:	4b13      	ldr	r3, [pc, #76]	@ (8004404 <_sbrk+0x64>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d102      	bne.n	80043c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80043bc:	4b11      	ldr	r3, [pc, #68]	@ (8004404 <_sbrk+0x64>)
 80043be:	4a12      	ldr	r2, [pc, #72]	@ (8004408 <_sbrk+0x68>)
 80043c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80043c2:	4b10      	ldr	r3, [pc, #64]	@ (8004404 <_sbrk+0x64>)
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4413      	add	r3, r2
 80043ca:	693a      	ldr	r2, [r7, #16]
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d207      	bcs.n	80043e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80043d0:	f00f fb2e 	bl	8013a30 <__errno>
 80043d4:	4603      	mov	r3, r0
 80043d6:	220c      	movs	r2, #12
 80043d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80043da:	f04f 33ff 	mov.w	r3, #4294967295
 80043de:	e009      	b.n	80043f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80043e0:	4b08      	ldr	r3, [pc, #32]	@ (8004404 <_sbrk+0x64>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80043e6:	4b07      	ldr	r3, [pc, #28]	@ (8004404 <_sbrk+0x64>)
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4413      	add	r3, r2
 80043ee:	4a05      	ldr	r2, [pc, #20]	@ (8004404 <_sbrk+0x64>)
 80043f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80043f2:	68fb      	ldr	r3, [r7, #12]
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3718      	adds	r7, #24
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	20050000 	.word	0x20050000
 8004400:	00000800 	.word	0x00000800
 8004404:	200077c4 	.word	0x200077c4
 8004408:	2000c7c8 	.word	0x2000c7c8

0800440c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800440c:	b480      	push	{r7}
 800440e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004410:	4b06      	ldr	r3, [pc, #24]	@ (800442c <SystemInit+0x20>)
 8004412:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004416:	4a05      	ldr	r2, [pc, #20]	@ (800442c <SystemInit+0x20>)
 8004418:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800441c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004420:	bf00      	nop
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
 800442a:	bf00      	nop
 800442c:	e000ed00 	.word	0xe000ed00

08004430 <MX_USART1_UART_Init>:
uint8_t txMsg[64];
uint8_t rxMsg[65];


void MX_USART1_UART_Init(void)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004434:	4b14      	ldr	r3, [pc, #80]	@ (8004488 <MX_USART1_UART_Init+0x58>)
 8004436:	4a15      	ldr	r2, [pc, #84]	@ (800448c <MX_USART1_UART_Init+0x5c>)
 8004438:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800443a:	4b13      	ldr	r3, [pc, #76]	@ (8004488 <MX_USART1_UART_Init+0x58>)
 800443c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004440:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004442:	4b11      	ldr	r3, [pc, #68]	@ (8004488 <MX_USART1_UART_Init+0x58>)
 8004444:	2200      	movs	r2, #0
 8004446:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004448:	4b0f      	ldr	r3, [pc, #60]	@ (8004488 <MX_USART1_UART_Init+0x58>)
 800444a:	2200      	movs	r2, #0
 800444c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800444e:	4b0e      	ldr	r3, [pc, #56]	@ (8004488 <MX_USART1_UART_Init+0x58>)
 8004450:	2200      	movs	r2, #0
 8004452:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004454:	4b0c      	ldr	r3, [pc, #48]	@ (8004488 <MX_USART1_UART_Init+0x58>)
 8004456:	220c      	movs	r2, #12
 8004458:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800445a:	4b0b      	ldr	r3, [pc, #44]	@ (8004488 <MX_USART1_UART_Init+0x58>)
 800445c:	2200      	movs	r2, #0
 800445e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004460:	4b09      	ldr	r3, [pc, #36]	@ (8004488 <MX_USART1_UART_Init+0x58>)
 8004462:	2200      	movs	r2, #0
 8004464:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004466:	4b08      	ldr	r3, [pc, #32]	@ (8004488 <MX_USART1_UART_Init+0x58>)
 8004468:	2200      	movs	r2, #0
 800446a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800446c:	4b06      	ldr	r3, [pc, #24]	@ (8004488 <MX_USART1_UART_Init+0x58>)
 800446e:	2200      	movs	r2, #0
 8004470:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004472:	4805      	ldr	r0, [pc, #20]	@ (8004488 <MX_USART1_UART_Init+0x58>)
 8004474:	f004 fbca 	bl	8008c0c <HAL_UART_Init>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d001      	beq.n	8004482 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800447e:	f7ff fbd9 	bl	8003c34 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004482:	bf00      	nop
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	200077c8 	.word	0x200077c8
 800448c:	40011000 	.word	0x40011000

08004490 <ReceiveUartMessage>:


HAL_StatusTypeDef ReceiveUartMessage(UART_HandleTypeDef *huart, uint8_t *buffer, uint16_t size)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b086      	sub	sp, #24
 8004494:	af00      	add	r7, sp, #0
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	4613      	mov	r3, r2
 800449c:	80fb      	strh	r3, [r7, #6]
    uint8_t receivedByte;
    uint16_t rxBufferIndex = 0;
 800449e:	2300      	movs	r3, #0
 80044a0:	82fb      	strh	r3, [r7, #22]
    while(1)
    {
        if(HAL_UART_Receive(huart, &receivedByte, 1, 1000) == HAL_OK)
 80044a2:	f107 0115 	add.w	r1, r7, #21
 80044a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80044aa:	2201      	movs	r2, #1
 80044ac:	68f8      	ldr	r0, [r7, #12]
 80044ae:	f004 fc7e 	bl	8008dae <HAL_UART_Receive>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d1f4      	bne.n	80044a2 <ReceiveUartMessage+0x12>
        {
            if(receivedByte == '\n') // 종료 문자 감지
 80044b8:	7d7b      	ldrb	r3, [r7, #21]
 80044ba:	2b0a      	cmp	r3, #10
 80044bc:	d106      	bne.n	80044cc <ReceiveUartMessage+0x3c>
            {
                buffer[rxBufferIndex] = '\0'; // 문자열의 끝을 표시
 80044be:	8afb      	ldrh	r3, [r7, #22]
 80044c0:	68ba      	ldr	r2, [r7, #8]
 80044c2:	4413      	add	r3, r2
 80044c4:	2200      	movs	r2, #0
 80044c6:	701a      	strb	r2, [r3, #0]
                return HAL_OK;
 80044c8:	2300      	movs	r3, #0
 80044ca:	e012      	b.n	80044f2 <ReceiveUartMessage+0x62>
            }
            else
            {
                buffer[rxBufferIndex] = receivedByte; // 문자 저장
 80044cc:	8afb      	ldrh	r3, [r7, #22]
 80044ce:	68ba      	ldr	r2, [r7, #8]
 80044d0:	4413      	add	r3, r2
 80044d2:	7d7a      	ldrb	r2, [r7, #21]
 80044d4:	701a      	strb	r2, [r3, #0]
                rxBufferIndex++;
 80044d6:	8afb      	ldrh	r3, [r7, #22]
 80044d8:	3301      	adds	r3, #1
 80044da:	82fb      	strh	r3, [r7, #22]
                if(rxBufferIndex >= size) // 버퍼 초과 방지
 80044dc:	8afa      	ldrh	r2, [r7, #22]
 80044de:	88fb      	ldrh	r3, [r7, #6]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d3de      	bcc.n	80044a2 <ReceiveUartMessage+0x12>
                {
                    buffer[rxBufferIndex - 1] = '\0'; // 문자열의 끝을 표시
 80044e4:	8afb      	ldrh	r3, [r7, #22]
 80044e6:	3b01      	subs	r3, #1
 80044e8:	68ba      	ldr	r2, [r7, #8]
 80044ea:	4413      	add	r3, r2
 80044ec:	2200      	movs	r2, #0
 80044ee:	701a      	strb	r2, [r3, #0]
                    return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
                }
            }
        }
    }
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3718      	adds	r7, #24
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
	...

080044fc <startMsg>:

void startMsg(){
 80044fc:	b580      	push	{r7, lr}
 80044fe:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "--------------------------------------------------------------\n"), 100);
 8004500:	492c      	ldr	r1, [pc, #176]	@ (80045b4 <startMsg+0xb8>)
 8004502:	482d      	ldr	r0, [pc, #180]	@ (80045b8 <startMsg+0xbc>)
 8004504:	f00f f946 	bl	8013794 <siprintf>
 8004508:	4603      	mov	r3, r0
 800450a:	b29a      	uxth	r2, r3
 800450c:	2364      	movs	r3, #100	@ 0x64
 800450e:	492a      	ldr	r1, [pc, #168]	@ (80045b8 <startMsg+0xbc>)
 8004510:	482a      	ldr	r0, [pc, #168]	@ (80045bc <startMsg+0xc0>)
 8004512:	f004 fbc9 	bl	8008ca8 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "--------------------------------------------------------------\n"), 100);
 8004516:	4927      	ldr	r1, [pc, #156]	@ (80045b4 <startMsg+0xb8>)
 8004518:	4827      	ldr	r0, [pc, #156]	@ (80045b8 <startMsg+0xbc>)
 800451a:	f00f f93b 	bl	8013794 <siprintf>
 800451e:	4603      	mov	r3, r0
 8004520:	b29a      	uxth	r2, r3
 8004522:	2364      	movs	r3, #100	@ 0x64
 8004524:	4924      	ldr	r1, [pc, #144]	@ (80045b8 <startMsg+0xbc>)
 8004526:	4825      	ldr	r0, [pc, #148]	@ (80045bc <startMsg+0xc0>)
 8004528:	f004 fbbe 	bl	8008ca8 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "----------- AI Inference for TACTS made by JaeHyeong----------\n"), 100);
 800452c:	4924      	ldr	r1, [pc, #144]	@ (80045c0 <startMsg+0xc4>)
 800452e:	4822      	ldr	r0, [pc, #136]	@ (80045b8 <startMsg+0xbc>)
 8004530:	f00f f930 	bl	8013794 <siprintf>
 8004534:	4603      	mov	r3, r0
 8004536:	b29a      	uxth	r2, r3
 8004538:	2364      	movs	r3, #100	@ 0x64
 800453a:	491f      	ldr	r1, [pc, #124]	@ (80045b8 <startMsg+0xbc>)
 800453c:	481f      	ldr	r0, [pc, #124]	@ (80045bc <startMsg+0xc0>)
 800453e:	f004 fbb3 	bl	8008ca8 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "----------------- 1 : TOF sensor array -----------------------\n"), 100);
 8004542:	4920      	ldr	r1, [pc, #128]	@ (80045c4 <startMsg+0xc8>)
 8004544:	481c      	ldr	r0, [pc, #112]	@ (80045b8 <startMsg+0xbc>)
 8004546:	f00f f925 	bl	8013794 <siprintf>
 800454a:	4603      	mov	r3, r0
 800454c:	b29a      	uxth	r2, r3
 800454e:	2364      	movs	r3, #100	@ 0x64
 8004550:	4919      	ldr	r1, [pc, #100]	@ (80045b8 <startMsg+0xbc>)
 8004552:	481a      	ldr	r0, [pc, #104]	@ (80045bc <startMsg+0xc0>)
 8004554:	f004 fba8 	bl	8008ca8 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "----------------- 2 : TOF sensor array and AI output ---------\n"), 100);
 8004558:	491b      	ldr	r1, [pc, #108]	@ (80045c8 <startMsg+0xcc>)
 800455a:	4817      	ldr	r0, [pc, #92]	@ (80045b8 <startMsg+0xbc>)
 800455c:	f00f f91a 	bl	8013794 <siprintf>
 8004560:	4603      	mov	r3, r0
 8004562:	b29a      	uxth	r2, r3
 8004564:	2364      	movs	r3, #100	@ 0x64
 8004566:	4914      	ldr	r1, [pc, #80]	@ (80045b8 <startMsg+0xbc>)
 8004568:	4814      	ldr	r0, [pc, #80]	@ (80045bc <startMsg+0xc0>)
 800456a:	f004 fb9d 	bl	8008ca8 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "----------------- 3 : TOF Avg Std Force Z --------------------\n"), 100);
 800456e:	4917      	ldr	r1, [pc, #92]	@ (80045cc <startMsg+0xd0>)
 8004570:	4811      	ldr	r0, [pc, #68]	@ (80045b8 <startMsg+0xbc>)
 8004572:	f00f f90f 	bl	8013794 <siprintf>
 8004576:	4603      	mov	r3, r0
 8004578:	b29a      	uxth	r2, r3
 800457a:	2364      	movs	r3, #100	@ 0x64
 800457c:	490e      	ldr	r1, [pc, #56]	@ (80045b8 <startMsg+0xbc>)
 800457e:	480f      	ldr	r0, [pc, #60]	@ (80045bc <startMsg+0xc0>)
 8004580:	f004 fb92 	bl	8008ca8 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "--------------------------------------------------------------\n"), 100);
 8004584:	490b      	ldr	r1, [pc, #44]	@ (80045b4 <startMsg+0xb8>)
 8004586:	480c      	ldr	r0, [pc, #48]	@ (80045b8 <startMsg+0xbc>)
 8004588:	f00f f904 	bl	8013794 <siprintf>
 800458c:	4603      	mov	r3, r0
 800458e:	b29a      	uxth	r2, r3
 8004590:	2364      	movs	r3, #100	@ 0x64
 8004592:	4909      	ldr	r1, [pc, #36]	@ (80045b8 <startMsg+0xbc>)
 8004594:	4809      	ldr	r0, [pc, #36]	@ (80045bc <startMsg+0xc0>)
 8004596:	f004 fb87 	bl	8008ca8 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "--------------------------------------------------------------\n"), 100);
 800459a:	4906      	ldr	r1, [pc, #24]	@ (80045b4 <startMsg+0xb8>)
 800459c:	4806      	ldr	r0, [pc, #24]	@ (80045b8 <startMsg+0xbc>)
 800459e:	f00f f8f9 	bl	8013794 <siprintf>
 80045a2:	4603      	mov	r3, r0
 80045a4:	b29a      	uxth	r2, r3
 80045a6:	2364      	movs	r3, #100	@ 0x64
 80045a8:	4903      	ldr	r1, [pc, #12]	@ (80045b8 <startMsg+0xbc>)
 80045aa:	4804      	ldr	r0, [pc, #16]	@ (80045bc <startMsg+0xc0>)
 80045ac:	f004 fb7c 	bl	8008ca8 <HAL_UART_Transmit>
}
 80045b0:	bf00      	nop
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	08018aac 	.word	0x08018aac
 80045b8:	20007850 	.word	0x20007850
 80045bc:	200077c8 	.word	0x200077c8
 80045c0:	08018aec 	.word	0x08018aec
 80045c4:	08018b2c 	.word	0x08018b2c
 80045c8:	08018b6c 	.word	0x08018b6c
 80045cc:	08018bac 	.word	0x08018bac

080045d0 <ResetAllDevices>:
    }
}
#endif


void ResetAllDevices() {
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af02      	add	r7, sp, #8
  for (int j = 0; j < tcaLength; ++j) {
 80045d6:	2300      	movs	r3, #0
 80045d8:	607b      	str	r3, [r7, #4]
 80045da:	e010      	b.n	80045fe <ResetAllDevices+0x2e>
	  HAL_I2C_Master_Transmit(&hi2c1, tca_addr[j] << 1, &tca_ch_reset, 1, 1000);
 80045dc:	4a0d      	ldr	r2, [pc, #52]	@ (8004614 <ResetAllDevices+0x44>)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4413      	add	r3, r2
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	005b      	lsls	r3, r3, #1
 80045e6:	b299      	uxth	r1, r3
 80045e8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80045ec:	9300      	str	r3, [sp, #0]
 80045ee:	2301      	movs	r3, #1
 80045f0:	4a09      	ldr	r2, [pc, #36]	@ (8004618 <ResetAllDevices+0x48>)
 80045f2:	480a      	ldr	r0, [pc, #40]	@ (800461c <ResetAllDevices+0x4c>)
 80045f4:	f000 fe6a 	bl	80052cc <HAL_I2C_Master_Transmit>
  for (int j = 0; j < tcaLength; ++j) {
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	3301      	adds	r3, #1
 80045fc:	607b      	str	r3, [r7, #4]
 80045fe:	4b08      	ldr	r3, [pc, #32]	@ (8004620 <ResetAllDevices+0x50>)
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	461a      	mov	r2, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4293      	cmp	r3, r2
 8004608:	dbe8      	blt.n	80045dc <ResetAllDevices+0xc>
  }
}
 800460a:	bf00      	nop
 800460c:	bf00      	nop
 800460e:	3708      	adds	r7, #8
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}
 8004614:	2000013c 	.word	0x2000013c
 8004618:	2000c574 	.word	0x2000c574
 800461c:	20007280 	.word	0x20007280
 8004620:	20000144 	.word	0x20000144

08004624 <ResetDevicesExcept>:

void ResetDevicesExcept(uint8_t active_device) {
 8004624:	b580      	push	{r7, lr}
 8004626:	b086      	sub	sp, #24
 8004628:	af02      	add	r7, sp, #8
 800462a:	4603      	mov	r3, r0
 800462c:	71fb      	strb	r3, [r7, #7]
    for (int j = 0; j < tcaLength; ++j) {
 800462e:	2300      	movs	r3, #0
 8004630:	60fb      	str	r3, [r7, #12]
 8004632:	e014      	b.n	800465e <ResetDevicesExcept+0x3a>
        if (j != active_device) {
 8004634:	79fb      	ldrb	r3, [r7, #7]
 8004636:	68fa      	ldr	r2, [r7, #12]
 8004638:	429a      	cmp	r2, r3
 800463a:	d00d      	beq.n	8004658 <ResetDevicesExcept+0x34>
            HAL_I2C_Master_Transmit(&hi2c1, tca_addr[j] << 1, &tca_ch_reset, 1, 1000);
 800463c:	4a0d      	ldr	r2, [pc, #52]	@ (8004674 <ResetDevicesExcept+0x50>)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	4413      	add	r3, r2
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	005b      	lsls	r3, r3, #1
 8004646:	b299      	uxth	r1, r3
 8004648:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800464c:	9300      	str	r3, [sp, #0]
 800464e:	2301      	movs	r3, #1
 8004650:	4a09      	ldr	r2, [pc, #36]	@ (8004678 <ResetDevicesExcept+0x54>)
 8004652:	480a      	ldr	r0, [pc, #40]	@ (800467c <ResetDevicesExcept+0x58>)
 8004654:	f000 fe3a 	bl	80052cc <HAL_I2C_Master_Transmit>
    for (int j = 0; j < tcaLength; ++j) {
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	3301      	adds	r3, #1
 800465c:	60fb      	str	r3, [r7, #12]
 800465e:	4b08      	ldr	r3, [pc, #32]	@ (8004680 <ResetDevicesExcept+0x5c>)
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	461a      	mov	r2, r3
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	4293      	cmp	r3, r2
 8004668:	dbe4      	blt.n	8004634 <ResetDevicesExcept+0x10>
        }
    }
}
 800466a:	bf00      	nop
 800466c:	bf00      	nop
 800466e:	3710      	adds	r7, #16
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}
 8004674:	2000013c 	.word	0x2000013c
 8004678:	2000c574 	.word	0x2000c574
 800467c:	20007280 	.word	0x20007280
 8004680:	20000144 	.word	0x20000144

08004684 <setActiveTcaChannel>:

void setActiveTcaChannel(uint8_t active_device, uint8_t channel){
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af02      	add	r7, sp, #8
 800468a:	4603      	mov	r3, r0
 800468c:	460a      	mov	r2, r1
 800468e:	71fb      	strb	r3, [r7, #7]
 8004690:	4613      	mov	r3, r2
 8004692:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(&hi2c1, tca_addr[active_device] << 1, &tca_ch[channel], 1, 1000);
 8004694:	79fb      	ldrb	r3, [r7, #7]
 8004696:	4a09      	ldr	r2, [pc, #36]	@ (80046bc <setActiveTcaChannel+0x38>)
 8004698:	5cd3      	ldrb	r3, [r2, r3]
 800469a:	005b      	lsls	r3, r3, #1
 800469c:	b299      	uxth	r1, r3
 800469e:	79bb      	ldrb	r3, [r7, #6]
 80046a0:	4a07      	ldr	r2, [pc, #28]	@ (80046c0 <setActiveTcaChannel+0x3c>)
 80046a2:	441a      	add	r2, r3
 80046a4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80046a8:	9300      	str	r3, [sp, #0]
 80046aa:	2301      	movs	r3, #1
 80046ac:	4805      	ldr	r0, [pc, #20]	@ (80046c4 <setActiveTcaChannel+0x40>)
 80046ae:	f000 fe0d 	bl	80052cc <HAL_I2C_Master_Transmit>
}
 80046b2:	bf00      	nop
 80046b4:	3708      	adds	r7, #8
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	2000013c 	.word	0x2000013c
 80046c0:	20000130 	.word	0x20000130
 80046c4:	20007280 	.word	0x20007280

080046c8 <setOnAllDevices>:

void setOnAllDevices(){
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af02      	add	r7, sp, #8
  for (int j = 0; j < tcaLength; ++j) {
 80046ce:	2300      	movs	r3, #0
 80046d0:	607b      	str	r3, [r7, #4]
 80046d2:	e010      	b.n	80046f6 <setOnAllDevices+0x2e>
	  HAL_I2C_Master_Transmit(&hi2c1, tca_addr[j] << 1, &tca_ch_all_on, 1, 1000);
 80046d4:	4a0d      	ldr	r2, [pc, #52]	@ (800470c <setOnAllDevices+0x44>)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4413      	add	r3, r2
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	005b      	lsls	r3, r3, #1
 80046de:	b299      	uxth	r1, r3
 80046e0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80046e4:	9300      	str	r3, [sp, #0]
 80046e6:	2301      	movs	r3, #1
 80046e8:	4a09      	ldr	r2, [pc, #36]	@ (8004710 <setOnAllDevices+0x48>)
 80046ea:	480a      	ldr	r0, [pc, #40]	@ (8004714 <setOnAllDevices+0x4c>)
 80046ec:	f000 fdee 	bl	80052cc <HAL_I2C_Master_Transmit>
  for (int j = 0; j < tcaLength; ++j) {
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	3301      	adds	r3, #1
 80046f4:	607b      	str	r3, [r7, #4]
 80046f6:	4b08      	ldr	r3, [pc, #32]	@ (8004718 <setOnAllDevices+0x50>)
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	461a      	mov	r2, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	4293      	cmp	r3, r2
 8004700:	dbe8      	blt.n	80046d4 <setOnAllDevices+0xc>
  }
}
 8004702:	bf00      	nop
 8004704:	bf00      	nop
 8004706:	3708      	adds	r7, #8
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}
 800470c:	2000013c 	.word	0x2000013c
 8004710:	20000138 	.word	0x20000138
 8004714:	20007280 	.word	0x20007280
 8004718:	20000144 	.word	0x20000144

0800471c <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack      /* set stack pointer */
 800471c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004754 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004720:	480d      	ldr	r0, [pc, #52]	@ (8004758 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004722:	490e      	ldr	r1, [pc, #56]	@ (800475c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004724:	4a0e      	ldr	r2, [pc, #56]	@ (8004760 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004726:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004728:	e002      	b.n	8004730 <LoopCopyDataInit>

0800472a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800472a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800472c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800472e:	3304      	adds	r3, #4

08004730 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004730:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004732:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004734:	d3f9      	bcc.n	800472a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004736:	4a0b      	ldr	r2, [pc, #44]	@ (8004764 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004738:	4c0b      	ldr	r4, [pc, #44]	@ (8004768 <LoopFillZerobss+0x26>)
  movs r3, #0
 800473a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800473c:	e001      	b.n	8004742 <LoopFillZerobss>

0800473e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800473e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004740:	3204      	adds	r2, #4

08004742 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004742:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004744:	d3fb      	bcc.n	800473e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004746:	f7ff fe61 	bl	800440c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800474a:	f00f f977 	bl	8013a3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800474e:	f7ff f849 	bl	80037e4 <main>
  bx  lr    
 8004752:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004754:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8004758:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800475c:	20001608 	.word	0x20001608
  ldr r2, =_sidata
 8004760:	0805dbf0 	.word	0x0805dbf0
  ldr r2, =_sbss
 8004764:	20001620 	.word	0x20001620
  ldr r4, =_ebss
 8004768:	2000c7c4 	.word	0x2000c7c4

0800476c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800476c:	e7fe      	b.n	800476c <ADC_IRQHandler>

0800476e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800476e:	b580      	push	{r7, lr}
 8004770:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004772:	2003      	movs	r0, #3
 8004774:	f000 f94c 	bl	8004a10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004778:	200f      	movs	r0, #15
 800477a:	f000 f805 	bl	8004788 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800477e:	f7ff fc21 	bl	8003fc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004782:	2300      	movs	r3, #0
}
 8004784:	4618      	mov	r0, r3
 8004786:	bd80      	pop	{r7, pc}

08004788 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b082      	sub	sp, #8
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004790:	4b12      	ldr	r3, [pc, #72]	@ (80047dc <HAL_InitTick+0x54>)
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	4b12      	ldr	r3, [pc, #72]	@ (80047e0 <HAL_InitTick+0x58>)
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	4619      	mov	r1, r3
 800479a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800479e:	fbb3 f3f1 	udiv	r3, r3, r1
 80047a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80047a6:	4618      	mov	r0, r3
 80047a8:	f000 f967 	bl	8004a7a <HAL_SYSTICK_Config>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d001      	beq.n	80047b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e00e      	b.n	80047d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2b0f      	cmp	r3, #15
 80047ba:	d80a      	bhi.n	80047d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80047bc:	2200      	movs	r2, #0
 80047be:	6879      	ldr	r1, [r7, #4]
 80047c0:	f04f 30ff 	mov.w	r0, #4294967295
 80047c4:	f000 f92f 	bl	8004a26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80047c8:	4a06      	ldr	r2, [pc, #24]	@ (80047e4 <HAL_InitTick+0x5c>)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80047ce:	2300      	movs	r3, #0
 80047d0:	e000      	b.n	80047d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3708      	adds	r7, #8
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	2000000c 	.word	0x2000000c
 80047e0:	200002dc 	.word	0x200002dc
 80047e4:	200002d8 	.word	0x200002d8

080047e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80047e8:	b480      	push	{r7}
 80047ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80047ec:	4b06      	ldr	r3, [pc, #24]	@ (8004808 <HAL_IncTick+0x20>)
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	461a      	mov	r2, r3
 80047f2:	4b06      	ldr	r3, [pc, #24]	@ (800480c <HAL_IncTick+0x24>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4413      	add	r3, r2
 80047f8:	4a04      	ldr	r2, [pc, #16]	@ (800480c <HAL_IncTick+0x24>)
 80047fa:	6013      	str	r3, [r2, #0]
}
 80047fc:	bf00      	nop
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop
 8004808:	200002dc 	.word	0x200002dc
 800480c:	2000c578 	.word	0x2000c578

08004810 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004810:	b480      	push	{r7}
 8004812:	af00      	add	r7, sp, #0
  return uwTick;
 8004814:	4b03      	ldr	r3, [pc, #12]	@ (8004824 <HAL_GetTick+0x14>)
 8004816:	681b      	ldr	r3, [r3, #0]
}
 8004818:	4618      	mov	r0, r3
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr
 8004822:	bf00      	nop
 8004824:	2000c578 	.word	0x2000c578

08004828 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004830:	f7ff ffee 	bl	8004810 <HAL_GetTick>
 8004834:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004840:	d005      	beq.n	800484e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004842:	4b0a      	ldr	r3, [pc, #40]	@ (800486c <HAL_Delay+0x44>)
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	461a      	mov	r2, r3
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	4413      	add	r3, r2
 800484c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800484e:	bf00      	nop
 8004850:	f7ff ffde 	bl	8004810 <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	68fa      	ldr	r2, [r7, #12]
 800485c:	429a      	cmp	r2, r3
 800485e:	d8f7      	bhi.n	8004850 <HAL_Delay+0x28>
  {
  }
}
 8004860:	bf00      	nop
 8004862:	bf00      	nop
 8004864:	3710      	adds	r7, #16
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	200002dc 	.word	0x200002dc

08004870 <__NVIC_SetPriorityGrouping>:
{
 8004870:	b480      	push	{r7}
 8004872:	b085      	sub	sp, #20
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f003 0307 	and.w	r3, r3, #7
 800487e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004880:	4b0b      	ldr	r3, [pc, #44]	@ (80048b0 <__NVIC_SetPriorityGrouping+0x40>)
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004886:	68ba      	ldr	r2, [r7, #8]
 8004888:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800488c:	4013      	ands	r3, r2
 800488e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004898:	4b06      	ldr	r3, [pc, #24]	@ (80048b4 <__NVIC_SetPriorityGrouping+0x44>)
 800489a:	4313      	orrs	r3, r2
 800489c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800489e:	4a04      	ldr	r2, [pc, #16]	@ (80048b0 <__NVIC_SetPriorityGrouping+0x40>)
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	60d3      	str	r3, [r2, #12]
}
 80048a4:	bf00      	nop
 80048a6:	3714      	adds	r7, #20
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr
 80048b0:	e000ed00 	.word	0xe000ed00
 80048b4:	05fa0000 	.word	0x05fa0000

080048b8 <__NVIC_GetPriorityGrouping>:
{
 80048b8:	b480      	push	{r7}
 80048ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80048bc:	4b04      	ldr	r3, [pc, #16]	@ (80048d0 <__NVIC_GetPriorityGrouping+0x18>)
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	0a1b      	lsrs	r3, r3, #8
 80048c2:	f003 0307 	and.w	r3, r3, #7
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr
 80048d0:	e000ed00 	.word	0xe000ed00

080048d4 <__NVIC_EnableIRQ>:
{
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	4603      	mov	r3, r0
 80048dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	db0b      	blt.n	80048fe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80048e6:	79fb      	ldrb	r3, [r7, #7]
 80048e8:	f003 021f 	and.w	r2, r3, #31
 80048ec:	4907      	ldr	r1, [pc, #28]	@ (800490c <__NVIC_EnableIRQ+0x38>)
 80048ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048f2:	095b      	lsrs	r3, r3, #5
 80048f4:	2001      	movs	r0, #1
 80048f6:	fa00 f202 	lsl.w	r2, r0, r2
 80048fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80048fe:	bf00      	nop
 8004900:	370c      	adds	r7, #12
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop
 800490c:	e000e100 	.word	0xe000e100

08004910 <__NVIC_SetPriority>:
{
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	4603      	mov	r3, r0
 8004918:	6039      	str	r1, [r7, #0]
 800491a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800491c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004920:	2b00      	cmp	r3, #0
 8004922:	db0a      	blt.n	800493a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	b2da      	uxtb	r2, r3
 8004928:	490c      	ldr	r1, [pc, #48]	@ (800495c <__NVIC_SetPriority+0x4c>)
 800492a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800492e:	0112      	lsls	r2, r2, #4
 8004930:	b2d2      	uxtb	r2, r2
 8004932:	440b      	add	r3, r1
 8004934:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004938:	e00a      	b.n	8004950 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	b2da      	uxtb	r2, r3
 800493e:	4908      	ldr	r1, [pc, #32]	@ (8004960 <__NVIC_SetPriority+0x50>)
 8004940:	79fb      	ldrb	r3, [r7, #7]
 8004942:	f003 030f 	and.w	r3, r3, #15
 8004946:	3b04      	subs	r3, #4
 8004948:	0112      	lsls	r2, r2, #4
 800494a:	b2d2      	uxtb	r2, r2
 800494c:	440b      	add	r3, r1
 800494e:	761a      	strb	r2, [r3, #24]
}
 8004950:	bf00      	nop
 8004952:	370c      	adds	r7, #12
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr
 800495c:	e000e100 	.word	0xe000e100
 8004960:	e000ed00 	.word	0xe000ed00

08004964 <NVIC_EncodePriority>:
{
 8004964:	b480      	push	{r7}
 8004966:	b089      	sub	sp, #36	@ 0x24
 8004968:	af00      	add	r7, sp, #0
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	60b9      	str	r1, [r7, #8]
 800496e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f003 0307 	and.w	r3, r3, #7
 8004976:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	f1c3 0307 	rsb	r3, r3, #7
 800497e:	2b04      	cmp	r3, #4
 8004980:	bf28      	it	cs
 8004982:	2304      	movcs	r3, #4
 8004984:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	3304      	adds	r3, #4
 800498a:	2b06      	cmp	r3, #6
 800498c:	d902      	bls.n	8004994 <NVIC_EncodePriority+0x30>
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	3b03      	subs	r3, #3
 8004992:	e000      	b.n	8004996 <NVIC_EncodePriority+0x32>
 8004994:	2300      	movs	r3, #0
 8004996:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004998:	f04f 32ff 	mov.w	r2, #4294967295
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	fa02 f303 	lsl.w	r3, r2, r3
 80049a2:	43da      	mvns	r2, r3
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	401a      	ands	r2, r3
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80049ac:	f04f 31ff 	mov.w	r1, #4294967295
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	fa01 f303 	lsl.w	r3, r1, r3
 80049b6:	43d9      	mvns	r1, r3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049bc:	4313      	orrs	r3, r2
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3724      	adds	r7, #36	@ 0x24
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr
	...

080049cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b082      	sub	sp, #8
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	3b01      	subs	r3, #1
 80049d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80049dc:	d301      	bcc.n	80049e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80049de:	2301      	movs	r3, #1
 80049e0:	e00f      	b.n	8004a02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80049e2:	4a0a      	ldr	r2, [pc, #40]	@ (8004a0c <SysTick_Config+0x40>)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	3b01      	subs	r3, #1
 80049e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80049ea:	210f      	movs	r1, #15
 80049ec:	f04f 30ff 	mov.w	r0, #4294967295
 80049f0:	f7ff ff8e 	bl	8004910 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80049f4:	4b05      	ldr	r3, [pc, #20]	@ (8004a0c <SysTick_Config+0x40>)
 80049f6:	2200      	movs	r2, #0
 80049f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80049fa:	4b04      	ldr	r3, [pc, #16]	@ (8004a0c <SysTick_Config+0x40>)
 80049fc:	2207      	movs	r2, #7
 80049fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3708      	adds	r7, #8
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	bf00      	nop
 8004a0c:	e000e010 	.word	0xe000e010

08004a10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b082      	sub	sp, #8
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f7ff ff29 	bl	8004870 <__NVIC_SetPriorityGrouping>
}
 8004a1e:	bf00      	nop
 8004a20:	3708      	adds	r7, #8
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}

08004a26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004a26:	b580      	push	{r7, lr}
 8004a28:	b086      	sub	sp, #24
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	60b9      	str	r1, [r7, #8]
 8004a30:	607a      	str	r2, [r7, #4]
 8004a32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004a34:	2300      	movs	r3, #0
 8004a36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004a38:	f7ff ff3e 	bl	80048b8 <__NVIC_GetPriorityGrouping>
 8004a3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	68b9      	ldr	r1, [r7, #8]
 8004a42:	6978      	ldr	r0, [r7, #20]
 8004a44:	f7ff ff8e 	bl	8004964 <NVIC_EncodePriority>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a4e:	4611      	mov	r1, r2
 8004a50:	4618      	mov	r0, r3
 8004a52:	f7ff ff5d 	bl	8004910 <__NVIC_SetPriority>
}
 8004a56:	bf00      	nop
 8004a58:	3718      	adds	r7, #24
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}

08004a5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a5e:	b580      	push	{r7, lr}
 8004a60:	b082      	sub	sp, #8
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	4603      	mov	r3, r0
 8004a66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f7ff ff31 	bl	80048d4 <__NVIC_EnableIRQ>
}
 8004a72:	bf00      	nop
 8004a74:	3708      	adds	r7, #8
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}

08004a7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004a7a:	b580      	push	{r7, lr}
 8004a7c:	b082      	sub	sp, #8
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f7ff ffa2 	bl	80049cc <SysTick_Config>
 8004a88:	4603      	mov	r3, r0
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3708      	adds	r7, #8
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
	...

08004a94 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b082      	sub	sp, #8
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d101      	bne.n	8004aa6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e054      	b.n	8004b50 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	7f5b      	ldrb	r3, [r3, #29]
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d105      	bne.n	8004abc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f7ff faae 	bl	8004018 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2202      	movs	r2, #2
 8004ac0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	791b      	ldrb	r3, [r3, #4]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d10c      	bne.n	8004ae4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a22      	ldr	r2, [pc, #136]	@ (8004b58 <HAL_CRC_Init+0xc4>)
 8004ad0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	689a      	ldr	r2, [r3, #8]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f022 0218 	bic.w	r2, r2, #24
 8004ae0:	609a      	str	r2, [r3, #8]
 8004ae2:	e00c      	b.n	8004afe <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6899      	ldr	r1, [r3, #8]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	461a      	mov	r2, r3
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f000 f834 	bl	8004b5c <HAL_CRCEx_Polynomial_Set>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d001      	beq.n	8004afe <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e028      	b.n	8004b50 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	795b      	ldrb	r3, [r3, #5]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d105      	bne.n	8004b12 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f04f 32ff 	mov.w	r2, #4294967295
 8004b0e:	611a      	str	r2, [r3, #16]
 8004b10:	e004      	b.n	8004b1c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	6912      	ldr	r2, [r2, #16]
 8004b1a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	695a      	ldr	r2, [r3, #20]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	430a      	orrs	r2, r1
 8004b30:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	699a      	ldr	r2, [r3, #24]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	430a      	orrs	r2, r1
 8004b46:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3708      	adds	r7, #8
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	04c11db7 	.word	0x04c11db7

08004b5c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b087      	sub	sp, #28
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	60b9      	str	r1, [r7, #8]
 8004b66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004b6c:	231f      	movs	r3, #31
 8004b6e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004b70:	bf00      	nop
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	1e5a      	subs	r2, r3, #1
 8004b76:	613a      	str	r2, [r7, #16]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d009      	beq.n	8004b90 <HAL_CRCEx_Polynomial_Set+0x34>
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	f003 031f 	and.w	r3, r3, #31
 8004b82:	68ba      	ldr	r2, [r7, #8]
 8004b84:	fa22 f303 	lsr.w	r3, r2, r3
 8004b88:	f003 0301 	and.w	r3, r3, #1
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d0f0      	beq.n	8004b72 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2b18      	cmp	r3, #24
 8004b94:	d846      	bhi.n	8004c24 <HAL_CRCEx_Polynomial_Set+0xc8>
 8004b96:	a201      	add	r2, pc, #4	@ (adr r2, 8004b9c <HAL_CRCEx_Polynomial_Set+0x40>)
 8004b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b9c:	08004c2b 	.word	0x08004c2b
 8004ba0:	08004c25 	.word	0x08004c25
 8004ba4:	08004c25 	.word	0x08004c25
 8004ba8:	08004c25 	.word	0x08004c25
 8004bac:	08004c25 	.word	0x08004c25
 8004bb0:	08004c25 	.word	0x08004c25
 8004bb4:	08004c25 	.word	0x08004c25
 8004bb8:	08004c25 	.word	0x08004c25
 8004bbc:	08004c19 	.word	0x08004c19
 8004bc0:	08004c25 	.word	0x08004c25
 8004bc4:	08004c25 	.word	0x08004c25
 8004bc8:	08004c25 	.word	0x08004c25
 8004bcc:	08004c25 	.word	0x08004c25
 8004bd0:	08004c25 	.word	0x08004c25
 8004bd4:	08004c25 	.word	0x08004c25
 8004bd8:	08004c25 	.word	0x08004c25
 8004bdc:	08004c0d 	.word	0x08004c0d
 8004be0:	08004c25 	.word	0x08004c25
 8004be4:	08004c25 	.word	0x08004c25
 8004be8:	08004c25 	.word	0x08004c25
 8004bec:	08004c25 	.word	0x08004c25
 8004bf0:	08004c25 	.word	0x08004c25
 8004bf4:	08004c25 	.word	0x08004c25
 8004bf8:	08004c25 	.word	0x08004c25
 8004bfc:	08004c01 	.word	0x08004c01
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	2b06      	cmp	r3, #6
 8004c04:	d913      	bls.n	8004c2e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004c0a:	e010      	b.n	8004c2e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	2b07      	cmp	r3, #7
 8004c10:	d90f      	bls.n	8004c32 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004c16:	e00c      	b.n	8004c32 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	2b0f      	cmp	r3, #15
 8004c1c:	d90b      	bls.n	8004c36 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004c22:	e008      	b.n	8004c36 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	75fb      	strb	r3, [r7, #23]
      break;
 8004c28:	e006      	b.n	8004c38 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004c2a:	bf00      	nop
 8004c2c:	e004      	b.n	8004c38 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004c2e:	bf00      	nop
 8004c30:	e002      	b.n	8004c38 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004c32:	bf00      	nop
 8004c34:	e000      	b.n	8004c38 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004c36:	bf00      	nop
  }
  if (status == HAL_OK)
 8004c38:	7dfb      	ldrb	r3, [r7, #23]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d10d      	bne.n	8004c5a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68ba      	ldr	r2, [r7, #8]
 8004c44:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	f023 0118 	bic.w	r1, r3, #24
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	430a      	orrs	r2, r1
 8004c58:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004c5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	371c      	adds	r7, #28
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c74:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004c76:	f7ff fdcb 	bl	8004810 <HAL_GetTick>
 8004c7a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	2b02      	cmp	r3, #2
 8004c86:	d008      	beq.n	8004c9a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2280      	movs	r2, #128	@ 0x80
 8004c8c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e052      	b.n	8004d40 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f022 0216 	bic.w	r2, r2, #22
 8004ca8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	695a      	ldr	r2, [r3, #20]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004cb8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d103      	bne.n	8004cca <HAL_DMA_Abort+0x62>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d007      	beq.n	8004cda <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f022 0208 	bic.w	r2, r2, #8
 8004cd8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f022 0201 	bic.w	r2, r2, #1
 8004ce8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004cea:	e013      	b.n	8004d14 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004cec:	f7ff fd90 	bl	8004810 <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	2b05      	cmp	r3, #5
 8004cf8:	d90c      	bls.n	8004d14 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2220      	movs	r2, #32
 8004cfe:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2203      	movs	r2, #3
 8004d04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8004d10:	2303      	movs	r3, #3
 8004d12:	e015      	b.n	8004d40 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0301 	and.w	r3, r3, #1
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d1e4      	bne.n	8004cec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d26:	223f      	movs	r2, #63	@ 0x3f
 8004d28:	409a      	lsls	r2, r3
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2201      	movs	r2, #1
 8004d32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8004d3e:	2300      	movs	r3, #0
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3710      	adds	r7, #16
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	2b02      	cmp	r3, #2
 8004d5a:	d004      	beq.n	8004d66 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2280      	movs	r2, #128	@ 0x80
 8004d60:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e00c      	b.n	8004d80 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2205      	movs	r2, #5
 8004d6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f022 0201 	bic.w	r2, r2, #1
 8004d7c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004d7e:	2300      	movs	r3, #0
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	370c      	adds	r7, #12
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr

08004d8c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004d9a:	b2db      	uxtb	r3, r3
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	370c      	adds	r7, #12
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr

08004da8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b089      	sub	sp, #36	@ 0x24
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004db2:	2300      	movs	r3, #0
 8004db4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004db6:	2300      	movs	r3, #0
 8004db8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	61fb      	str	r3, [r7, #28]
 8004dc6:	e175      	b.n	80050b4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004dc8:	2201      	movs	r2, #1
 8004dca:	69fb      	ldr	r3, [r7, #28]
 8004dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	697a      	ldr	r2, [r7, #20]
 8004dd8:	4013      	ands	r3, r2
 8004dda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004ddc:	693a      	ldr	r2, [r7, #16]
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	429a      	cmp	r2, r3
 8004de2:	f040 8164 	bne.w	80050ae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	f003 0303 	and.w	r3, r3, #3
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d005      	beq.n	8004dfe <HAL_GPIO_Init+0x56>
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	f003 0303 	and.w	r3, r3, #3
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d130      	bne.n	8004e60 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	005b      	lsls	r3, r3, #1
 8004e08:	2203      	movs	r2, #3
 8004e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0e:	43db      	mvns	r3, r3
 8004e10:	69ba      	ldr	r2, [r7, #24]
 8004e12:	4013      	ands	r3, r2
 8004e14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	68da      	ldr	r2, [r3, #12]
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	005b      	lsls	r3, r3, #1
 8004e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e22:	69ba      	ldr	r2, [r7, #24]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	69ba      	ldr	r2, [r7, #24]
 8004e2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004e34:	2201      	movs	r2, #1
 8004e36:	69fb      	ldr	r3, [r7, #28]
 8004e38:	fa02 f303 	lsl.w	r3, r2, r3
 8004e3c:	43db      	mvns	r3, r3
 8004e3e:	69ba      	ldr	r2, [r7, #24]
 8004e40:	4013      	ands	r3, r2
 8004e42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	091b      	lsrs	r3, r3, #4
 8004e4a:	f003 0201 	and.w	r2, r3, #1
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	fa02 f303 	lsl.w	r3, r2, r3
 8004e54:	69ba      	ldr	r2, [r7, #24]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	69ba      	ldr	r2, [r7, #24]
 8004e5e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	f003 0303 	and.w	r3, r3, #3
 8004e68:	2b03      	cmp	r3, #3
 8004e6a:	d017      	beq.n	8004e9c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	005b      	lsls	r3, r3, #1
 8004e76:	2203      	movs	r2, #3
 8004e78:	fa02 f303 	lsl.w	r3, r2, r3
 8004e7c:	43db      	mvns	r3, r3
 8004e7e:	69ba      	ldr	r2, [r7, #24]
 8004e80:	4013      	ands	r3, r2
 8004e82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	689a      	ldr	r2, [r3, #8]
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	005b      	lsls	r3, r3, #1
 8004e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e90:	69ba      	ldr	r2, [r7, #24]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	69ba      	ldr	r2, [r7, #24]
 8004e9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	f003 0303 	and.w	r3, r3, #3
 8004ea4:	2b02      	cmp	r3, #2
 8004ea6:	d123      	bne.n	8004ef0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004ea8:	69fb      	ldr	r3, [r7, #28]
 8004eaa:	08da      	lsrs	r2, r3, #3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	3208      	adds	r2, #8
 8004eb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	f003 0307 	and.w	r3, r3, #7
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	220f      	movs	r2, #15
 8004ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec4:	43db      	mvns	r3, r3
 8004ec6:	69ba      	ldr	r2, [r7, #24]
 8004ec8:	4013      	ands	r3, r2
 8004eca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	691a      	ldr	r2, [r3, #16]
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	f003 0307 	and.w	r3, r3, #7
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8004edc:	69ba      	ldr	r2, [r7, #24]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	08da      	lsrs	r2, r3, #3
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	3208      	adds	r2, #8
 8004eea:	69b9      	ldr	r1, [r7, #24]
 8004eec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004ef6:	69fb      	ldr	r3, [r7, #28]
 8004ef8:	005b      	lsls	r3, r3, #1
 8004efa:	2203      	movs	r2, #3
 8004efc:	fa02 f303 	lsl.w	r3, r2, r3
 8004f00:	43db      	mvns	r3, r3
 8004f02:	69ba      	ldr	r2, [r7, #24]
 8004f04:	4013      	ands	r3, r2
 8004f06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	f003 0203 	and.w	r2, r3, #3
 8004f10:	69fb      	ldr	r3, [r7, #28]
 8004f12:	005b      	lsls	r3, r3, #1
 8004f14:	fa02 f303 	lsl.w	r3, r2, r3
 8004f18:	69ba      	ldr	r2, [r7, #24]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	69ba      	ldr	r2, [r7, #24]
 8004f22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	f000 80be 	beq.w	80050ae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f32:	4b66      	ldr	r3, [pc, #408]	@ (80050cc <HAL_GPIO_Init+0x324>)
 8004f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f36:	4a65      	ldr	r2, [pc, #404]	@ (80050cc <HAL_GPIO_Init+0x324>)
 8004f38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004f3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8004f3e:	4b63      	ldr	r3, [pc, #396]	@ (80050cc <HAL_GPIO_Init+0x324>)
 8004f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f46:	60fb      	str	r3, [r7, #12]
 8004f48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004f4a:	4a61      	ldr	r2, [pc, #388]	@ (80050d0 <HAL_GPIO_Init+0x328>)
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	089b      	lsrs	r3, r3, #2
 8004f50:	3302      	adds	r3, #2
 8004f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004f58:	69fb      	ldr	r3, [r7, #28]
 8004f5a:	f003 0303 	and.w	r3, r3, #3
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	220f      	movs	r2, #15
 8004f62:	fa02 f303 	lsl.w	r3, r2, r3
 8004f66:	43db      	mvns	r3, r3
 8004f68:	69ba      	ldr	r2, [r7, #24]
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a58      	ldr	r2, [pc, #352]	@ (80050d4 <HAL_GPIO_Init+0x32c>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d037      	beq.n	8004fe6 <HAL_GPIO_Init+0x23e>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a57      	ldr	r2, [pc, #348]	@ (80050d8 <HAL_GPIO_Init+0x330>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d031      	beq.n	8004fe2 <HAL_GPIO_Init+0x23a>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4a56      	ldr	r2, [pc, #344]	@ (80050dc <HAL_GPIO_Init+0x334>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d02b      	beq.n	8004fde <HAL_GPIO_Init+0x236>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a55      	ldr	r2, [pc, #340]	@ (80050e0 <HAL_GPIO_Init+0x338>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d025      	beq.n	8004fda <HAL_GPIO_Init+0x232>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a54      	ldr	r2, [pc, #336]	@ (80050e4 <HAL_GPIO_Init+0x33c>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d01f      	beq.n	8004fd6 <HAL_GPIO_Init+0x22e>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a53      	ldr	r2, [pc, #332]	@ (80050e8 <HAL_GPIO_Init+0x340>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d019      	beq.n	8004fd2 <HAL_GPIO_Init+0x22a>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a52      	ldr	r2, [pc, #328]	@ (80050ec <HAL_GPIO_Init+0x344>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d013      	beq.n	8004fce <HAL_GPIO_Init+0x226>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a51      	ldr	r2, [pc, #324]	@ (80050f0 <HAL_GPIO_Init+0x348>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d00d      	beq.n	8004fca <HAL_GPIO_Init+0x222>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a50      	ldr	r2, [pc, #320]	@ (80050f4 <HAL_GPIO_Init+0x34c>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d007      	beq.n	8004fc6 <HAL_GPIO_Init+0x21e>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a4f      	ldr	r2, [pc, #316]	@ (80050f8 <HAL_GPIO_Init+0x350>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d101      	bne.n	8004fc2 <HAL_GPIO_Init+0x21a>
 8004fbe:	2309      	movs	r3, #9
 8004fc0:	e012      	b.n	8004fe8 <HAL_GPIO_Init+0x240>
 8004fc2:	230a      	movs	r3, #10
 8004fc4:	e010      	b.n	8004fe8 <HAL_GPIO_Init+0x240>
 8004fc6:	2308      	movs	r3, #8
 8004fc8:	e00e      	b.n	8004fe8 <HAL_GPIO_Init+0x240>
 8004fca:	2307      	movs	r3, #7
 8004fcc:	e00c      	b.n	8004fe8 <HAL_GPIO_Init+0x240>
 8004fce:	2306      	movs	r3, #6
 8004fd0:	e00a      	b.n	8004fe8 <HAL_GPIO_Init+0x240>
 8004fd2:	2305      	movs	r3, #5
 8004fd4:	e008      	b.n	8004fe8 <HAL_GPIO_Init+0x240>
 8004fd6:	2304      	movs	r3, #4
 8004fd8:	e006      	b.n	8004fe8 <HAL_GPIO_Init+0x240>
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e004      	b.n	8004fe8 <HAL_GPIO_Init+0x240>
 8004fde:	2302      	movs	r3, #2
 8004fe0:	e002      	b.n	8004fe8 <HAL_GPIO_Init+0x240>
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e000      	b.n	8004fe8 <HAL_GPIO_Init+0x240>
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	69fa      	ldr	r2, [r7, #28]
 8004fea:	f002 0203 	and.w	r2, r2, #3
 8004fee:	0092      	lsls	r2, r2, #2
 8004ff0:	4093      	lsls	r3, r2
 8004ff2:	69ba      	ldr	r2, [r7, #24]
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004ff8:	4935      	ldr	r1, [pc, #212]	@ (80050d0 <HAL_GPIO_Init+0x328>)
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	089b      	lsrs	r3, r3, #2
 8004ffe:	3302      	adds	r3, #2
 8005000:	69ba      	ldr	r2, [r7, #24]
 8005002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005006:	4b3d      	ldr	r3, [pc, #244]	@ (80050fc <HAL_GPIO_Init+0x354>)
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	43db      	mvns	r3, r3
 8005010:	69ba      	ldr	r2, [r7, #24]
 8005012:	4013      	ands	r3, r2
 8005014:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d003      	beq.n	800502a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005022:	69ba      	ldr	r2, [r7, #24]
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	4313      	orrs	r3, r2
 8005028:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800502a:	4a34      	ldr	r2, [pc, #208]	@ (80050fc <HAL_GPIO_Init+0x354>)
 800502c:	69bb      	ldr	r3, [r7, #24]
 800502e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005030:	4b32      	ldr	r3, [pc, #200]	@ (80050fc <HAL_GPIO_Init+0x354>)
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	43db      	mvns	r3, r3
 800503a:	69ba      	ldr	r2, [r7, #24]
 800503c:	4013      	ands	r3, r2
 800503e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005048:	2b00      	cmp	r3, #0
 800504a:	d003      	beq.n	8005054 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800504c:	69ba      	ldr	r2, [r7, #24]
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	4313      	orrs	r3, r2
 8005052:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005054:	4a29      	ldr	r2, [pc, #164]	@ (80050fc <HAL_GPIO_Init+0x354>)
 8005056:	69bb      	ldr	r3, [r7, #24]
 8005058:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800505a:	4b28      	ldr	r3, [pc, #160]	@ (80050fc <HAL_GPIO_Init+0x354>)
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	43db      	mvns	r3, r3
 8005064:	69ba      	ldr	r2, [r7, #24]
 8005066:	4013      	ands	r3, r2
 8005068:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005072:	2b00      	cmp	r3, #0
 8005074:	d003      	beq.n	800507e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005076:	69ba      	ldr	r2, [r7, #24]
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	4313      	orrs	r3, r2
 800507c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800507e:	4a1f      	ldr	r2, [pc, #124]	@ (80050fc <HAL_GPIO_Init+0x354>)
 8005080:	69bb      	ldr	r3, [r7, #24]
 8005082:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005084:	4b1d      	ldr	r3, [pc, #116]	@ (80050fc <HAL_GPIO_Init+0x354>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	43db      	mvns	r3, r3
 800508e:	69ba      	ldr	r2, [r7, #24]
 8005090:	4013      	ands	r3, r2
 8005092:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800509c:	2b00      	cmp	r3, #0
 800509e:	d003      	beq.n	80050a8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80050a0:	69ba      	ldr	r2, [r7, #24]
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80050a8:	4a14      	ldr	r2, [pc, #80]	@ (80050fc <HAL_GPIO_Init+0x354>)
 80050aa:	69bb      	ldr	r3, [r7, #24]
 80050ac:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	3301      	adds	r3, #1
 80050b2:	61fb      	str	r3, [r7, #28]
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	2b0f      	cmp	r3, #15
 80050b8:	f67f ae86 	bls.w	8004dc8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80050bc:	bf00      	nop
 80050be:	bf00      	nop
 80050c0:	3724      	adds	r7, #36	@ 0x24
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr
 80050ca:	bf00      	nop
 80050cc:	40023800 	.word	0x40023800
 80050d0:	40013800 	.word	0x40013800
 80050d4:	40020000 	.word	0x40020000
 80050d8:	40020400 	.word	0x40020400
 80050dc:	40020800 	.word	0x40020800
 80050e0:	40020c00 	.word	0x40020c00
 80050e4:	40021000 	.word	0x40021000
 80050e8:	40021400 	.word	0x40021400
 80050ec:	40021800 	.word	0x40021800
 80050f0:	40021c00 	.word	0x40021c00
 80050f4:	40022000 	.word	0x40022000
 80050f8:	40022400 	.word	0x40022400
 80050fc:	40013c00 	.word	0x40013c00

08005100 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005100:	b480      	push	{r7}
 8005102:	b085      	sub	sp, #20
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	460b      	mov	r3, r1
 800510a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	691a      	ldr	r2, [r3, #16]
 8005110:	887b      	ldrh	r3, [r7, #2]
 8005112:	4013      	ands	r3, r2
 8005114:	2b00      	cmp	r3, #0
 8005116:	d002      	beq.n	800511e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005118:	2301      	movs	r3, #1
 800511a:	73fb      	strb	r3, [r7, #15]
 800511c:	e001      	b.n	8005122 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800511e:	2300      	movs	r3, #0
 8005120:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005122:	7bfb      	ldrb	r3, [r7, #15]
}
 8005124:	4618      	mov	r0, r3
 8005126:	3714      	adds	r7, #20
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr

08005130 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005130:	b480      	push	{r7}
 8005132:	b083      	sub	sp, #12
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	460b      	mov	r3, r1
 800513a:	807b      	strh	r3, [r7, #2]
 800513c:	4613      	mov	r3, r2
 800513e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005140:	787b      	ldrb	r3, [r7, #1]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d003      	beq.n	800514e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005146:	887a      	ldrh	r2, [r7, #2]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800514c:	e003      	b.n	8005156 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800514e:	887b      	ldrh	r3, [r7, #2]
 8005150:	041a      	lsls	r2, r3, #16
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	619a      	str	r2, [r3, #24]
}
 8005156:	bf00      	nop
 8005158:	370c      	adds	r7, #12
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr
	...

08005164 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b082      	sub	sp, #8
 8005168:	af00      	add	r7, sp, #0
 800516a:	4603      	mov	r3, r0
 800516c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800516e:	4b08      	ldr	r3, [pc, #32]	@ (8005190 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005170:	695a      	ldr	r2, [r3, #20]
 8005172:	88fb      	ldrh	r3, [r7, #6]
 8005174:	4013      	ands	r3, r2
 8005176:	2b00      	cmp	r3, #0
 8005178:	d006      	beq.n	8005188 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800517a:	4a05      	ldr	r2, [pc, #20]	@ (8005190 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800517c:	88fb      	ldrh	r3, [r7, #6]
 800517e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005180:	88fb      	ldrh	r3, [r7, #6]
 8005182:	4618      	mov	r0, r3
 8005184:	f000 f806 	bl	8005194 <HAL_GPIO_EXTI_Callback>
  }
}
 8005188:	bf00      	nop
 800518a:	3708      	adds	r7, #8
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}
 8005190:	40013c00 	.word	0x40013c00

08005194 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005194:	b480      	push	{r7}
 8005196:	b083      	sub	sp, #12
 8005198:	af00      	add	r7, sp, #0
 800519a:	4603      	mov	r3, r0
 800519c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800519e:	bf00      	nop
 80051a0:	370c      	adds	r7, #12
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr
	...

080051ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b082      	sub	sp, #8
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d101      	bne.n	80051be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e07f      	b.n	80052be <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d106      	bne.n	80051d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f7fe ff40 	bl	8004058 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2224      	movs	r2, #36	@ 0x24
 80051dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f022 0201 	bic.w	r2, r2, #1
 80051ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	685a      	ldr	r2, [r3, #4]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80051fc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	689a      	ldr	r2, [r3, #8]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800520c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	2b01      	cmp	r3, #1
 8005214:	d107      	bne.n	8005226 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	689a      	ldr	r2, [r3, #8]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005222:	609a      	str	r2, [r3, #8]
 8005224:	e006      	b.n	8005234 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	689a      	ldr	r2, [r3, #8]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005232:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	2b02      	cmp	r3, #2
 800523a:	d104      	bne.n	8005246 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005244:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	6859      	ldr	r1, [r3, #4]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	4b1d      	ldr	r3, [pc, #116]	@ (80052c8 <HAL_I2C_Init+0x11c>)
 8005252:	430b      	orrs	r3, r1
 8005254:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	68da      	ldr	r2, [r3, #12]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005264:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	691a      	ldr	r2, [r3, #16]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	695b      	ldr	r3, [r3, #20]
 800526e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	699b      	ldr	r3, [r3, #24]
 8005276:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	430a      	orrs	r2, r1
 800527e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	69d9      	ldr	r1, [r3, #28]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6a1a      	ldr	r2, [r3, #32]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	430a      	orrs	r2, r1
 800528e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f042 0201 	orr.w	r2, r2, #1
 800529e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2220      	movs	r2, #32
 80052aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2200      	movs	r2, #0
 80052b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80052bc:	2300      	movs	r3, #0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3708      	adds	r7, #8
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	bf00      	nop
 80052c8:	02008000 	.word	0x02008000

080052cc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b088      	sub	sp, #32
 80052d0:	af02      	add	r7, sp, #8
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	607a      	str	r2, [r7, #4]
 80052d6:	461a      	mov	r2, r3
 80052d8:	460b      	mov	r3, r1
 80052da:	817b      	strh	r3, [r7, #10]
 80052dc:	4613      	mov	r3, r2
 80052de:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	2b20      	cmp	r3, #32
 80052ea:	f040 80da 	bne.w	80054a2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d101      	bne.n	80052fc <HAL_I2C_Master_Transmit+0x30>
 80052f8:	2302      	movs	r3, #2
 80052fa:	e0d3      	b.n	80054a4 <HAL_I2C_Master_Transmit+0x1d8>
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005304:	f7ff fa84 	bl	8004810 <HAL_GetTick>
 8005308:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	9300      	str	r3, [sp, #0]
 800530e:	2319      	movs	r3, #25
 8005310:	2201      	movs	r2, #1
 8005312:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005316:	68f8      	ldr	r0, [r7, #12]
 8005318:	f000 fee3 	bl	80060e2 <I2C_WaitOnFlagUntilTimeout>
 800531c:	4603      	mov	r3, r0
 800531e:	2b00      	cmp	r3, #0
 8005320:	d001      	beq.n	8005326 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e0be      	b.n	80054a4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2221      	movs	r2, #33	@ 0x21
 800532a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2210      	movs	r2, #16
 8005332:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2200      	movs	r2, #0
 800533a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	893a      	ldrh	r2, [r7, #8]
 8005346:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2200      	movs	r2, #0
 800534c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005352:	b29b      	uxth	r3, r3
 8005354:	2bff      	cmp	r3, #255	@ 0xff
 8005356:	d90e      	bls.n	8005376 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	22ff      	movs	r2, #255	@ 0xff
 800535c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005362:	b2da      	uxtb	r2, r3
 8005364:	8979      	ldrh	r1, [r7, #10]
 8005366:	4b51      	ldr	r3, [pc, #324]	@ (80054ac <HAL_I2C_Master_Transmit+0x1e0>)
 8005368:	9300      	str	r3, [sp, #0]
 800536a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800536e:	68f8      	ldr	r0, [r7, #12]
 8005370:	f001 f8ce 	bl	8006510 <I2C_TransferConfig>
 8005374:	e06c      	b.n	8005450 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800537a:	b29a      	uxth	r2, r3
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005384:	b2da      	uxtb	r2, r3
 8005386:	8979      	ldrh	r1, [r7, #10]
 8005388:	4b48      	ldr	r3, [pc, #288]	@ (80054ac <HAL_I2C_Master_Transmit+0x1e0>)
 800538a:	9300      	str	r3, [sp, #0]
 800538c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005390:	68f8      	ldr	r0, [r7, #12]
 8005392:	f001 f8bd 	bl	8006510 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005396:	e05b      	b.n	8005450 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005398:	697a      	ldr	r2, [r7, #20]
 800539a:	6a39      	ldr	r1, [r7, #32]
 800539c:	68f8      	ldr	r0, [r7, #12]
 800539e:	f000 fee0 	bl	8006162 <I2C_WaitOnTXISFlagUntilTimeout>
 80053a2:	4603      	mov	r3, r0
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d001      	beq.n	80053ac <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	e07b      	b.n	80054a4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053b0:	781a      	ldrb	r2, [r3, #0]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053bc:	1c5a      	adds	r2, r3, #1
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	3b01      	subs	r3, #1
 80053ca:	b29a      	uxth	r2, r3
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053d4:	3b01      	subs	r3, #1
 80053d6:	b29a      	uxth	r2, r3
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d034      	beq.n	8005450 <HAL_I2C_Master_Transmit+0x184>
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d130      	bne.n	8005450 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	9300      	str	r3, [sp, #0]
 80053f2:	6a3b      	ldr	r3, [r7, #32]
 80053f4:	2200      	movs	r2, #0
 80053f6:	2180      	movs	r1, #128	@ 0x80
 80053f8:	68f8      	ldr	r0, [r7, #12]
 80053fa:	f000 fe72 	bl	80060e2 <I2C_WaitOnFlagUntilTimeout>
 80053fe:	4603      	mov	r3, r0
 8005400:	2b00      	cmp	r3, #0
 8005402:	d001      	beq.n	8005408 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e04d      	b.n	80054a4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800540c:	b29b      	uxth	r3, r3
 800540e:	2bff      	cmp	r3, #255	@ 0xff
 8005410:	d90e      	bls.n	8005430 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	22ff      	movs	r2, #255	@ 0xff
 8005416:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800541c:	b2da      	uxtb	r2, r3
 800541e:	8979      	ldrh	r1, [r7, #10]
 8005420:	2300      	movs	r3, #0
 8005422:	9300      	str	r3, [sp, #0]
 8005424:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005428:	68f8      	ldr	r0, [r7, #12]
 800542a:	f001 f871 	bl	8006510 <I2C_TransferConfig>
 800542e:	e00f      	b.n	8005450 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005434:	b29a      	uxth	r2, r3
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800543e:	b2da      	uxtb	r2, r3
 8005440:	8979      	ldrh	r1, [r7, #10]
 8005442:	2300      	movs	r3, #0
 8005444:	9300      	str	r3, [sp, #0]
 8005446:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800544a:	68f8      	ldr	r0, [r7, #12]
 800544c:	f001 f860 	bl	8006510 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005454:	b29b      	uxth	r3, r3
 8005456:	2b00      	cmp	r3, #0
 8005458:	d19e      	bne.n	8005398 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800545a:	697a      	ldr	r2, [r7, #20]
 800545c:	6a39      	ldr	r1, [r7, #32]
 800545e:	68f8      	ldr	r0, [r7, #12]
 8005460:	f000 febf 	bl	80061e2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005464:	4603      	mov	r3, r0
 8005466:	2b00      	cmp	r3, #0
 8005468:	d001      	beq.n	800546e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e01a      	b.n	80054a4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	2220      	movs	r2, #32
 8005474:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	6859      	ldr	r1, [r3, #4]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	4b0b      	ldr	r3, [pc, #44]	@ (80054b0 <HAL_I2C_Master_Transmit+0x1e4>)
 8005482:	400b      	ands	r3, r1
 8005484:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2220      	movs	r2, #32
 800548a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2200      	movs	r2, #0
 8005492:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2200      	movs	r2, #0
 800549a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800549e:	2300      	movs	r3, #0
 80054a0:	e000      	b.n	80054a4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80054a2:	2302      	movs	r3, #2
  }
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3718      	adds	r7, #24
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}
 80054ac:	80002000 	.word	0x80002000
 80054b0:	fe00e800 	.word	0xfe00e800

080054b4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b088      	sub	sp, #32
 80054b8:	af02      	add	r7, sp, #8
 80054ba:	60f8      	str	r0, [r7, #12]
 80054bc:	607a      	str	r2, [r7, #4]
 80054be:	461a      	mov	r2, r3
 80054c0:	460b      	mov	r3, r1
 80054c2:	817b      	strh	r3, [r7, #10]
 80054c4:	4613      	mov	r3, r2
 80054c6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	2b20      	cmp	r3, #32
 80054d2:	f040 80db 	bne.w	800568c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d101      	bne.n	80054e4 <HAL_I2C_Master_Receive+0x30>
 80054e0:	2302      	movs	r3, #2
 80054e2:	e0d4      	b.n	800568e <HAL_I2C_Master_Receive+0x1da>
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80054ec:	f7ff f990 	bl	8004810 <HAL_GetTick>
 80054f0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	9300      	str	r3, [sp, #0]
 80054f6:	2319      	movs	r3, #25
 80054f8:	2201      	movs	r2, #1
 80054fa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80054fe:	68f8      	ldr	r0, [r7, #12]
 8005500:	f000 fdef 	bl	80060e2 <I2C_WaitOnFlagUntilTimeout>
 8005504:	4603      	mov	r3, r0
 8005506:	2b00      	cmp	r3, #0
 8005508:	d001      	beq.n	800550e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e0bf      	b.n	800568e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2222      	movs	r2, #34	@ 0x22
 8005512:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2210      	movs	r2, #16
 800551a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2200      	movs	r2, #0
 8005522:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	893a      	ldrh	r2, [r7, #8]
 800552e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2200      	movs	r2, #0
 8005534:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800553a:	b29b      	uxth	r3, r3
 800553c:	2bff      	cmp	r3, #255	@ 0xff
 800553e:	d90e      	bls.n	800555e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	22ff      	movs	r2, #255	@ 0xff
 8005544:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800554a:	b2da      	uxtb	r2, r3
 800554c:	8979      	ldrh	r1, [r7, #10]
 800554e:	4b52      	ldr	r3, [pc, #328]	@ (8005698 <HAL_I2C_Master_Receive+0x1e4>)
 8005550:	9300      	str	r3, [sp, #0]
 8005552:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005556:	68f8      	ldr	r0, [r7, #12]
 8005558:	f000 ffda 	bl	8006510 <I2C_TransferConfig>
 800555c:	e06d      	b.n	800563a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005562:	b29a      	uxth	r2, r3
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800556c:	b2da      	uxtb	r2, r3
 800556e:	8979      	ldrh	r1, [r7, #10]
 8005570:	4b49      	ldr	r3, [pc, #292]	@ (8005698 <HAL_I2C_Master_Receive+0x1e4>)
 8005572:	9300      	str	r3, [sp, #0]
 8005574:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005578:	68f8      	ldr	r0, [r7, #12]
 800557a:	f000 ffc9 	bl	8006510 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800557e:	e05c      	b.n	800563a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005580:	697a      	ldr	r2, [r7, #20]
 8005582:	6a39      	ldr	r1, [r7, #32]
 8005584:	68f8      	ldr	r0, [r7, #12]
 8005586:	f000 fe69 	bl	800625c <I2C_WaitOnRXNEFlagUntilTimeout>
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d001      	beq.n	8005594 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	e07c      	b.n	800568e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800559e:	b2d2      	uxtb	r2, r2
 80055a0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055a6:	1c5a      	adds	r2, r3, #1
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055b0:	3b01      	subs	r3, #1
 80055b2:	b29a      	uxth	r2, r3
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055bc:	b29b      	uxth	r3, r3
 80055be:	3b01      	subs	r3, #1
 80055c0:	b29a      	uxth	r2, r3
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d034      	beq.n	800563a <HAL_I2C_Master_Receive+0x186>
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d130      	bne.n	800563a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	9300      	str	r3, [sp, #0]
 80055dc:	6a3b      	ldr	r3, [r7, #32]
 80055de:	2200      	movs	r2, #0
 80055e0:	2180      	movs	r1, #128	@ 0x80
 80055e2:	68f8      	ldr	r0, [r7, #12]
 80055e4:	f000 fd7d 	bl	80060e2 <I2C_WaitOnFlagUntilTimeout>
 80055e8:	4603      	mov	r3, r0
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d001      	beq.n	80055f2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	e04d      	b.n	800568e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	2bff      	cmp	r3, #255	@ 0xff
 80055fa:	d90e      	bls.n	800561a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	22ff      	movs	r2, #255	@ 0xff
 8005600:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005606:	b2da      	uxtb	r2, r3
 8005608:	8979      	ldrh	r1, [r7, #10]
 800560a:	2300      	movs	r3, #0
 800560c:	9300      	str	r3, [sp, #0]
 800560e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005612:	68f8      	ldr	r0, [r7, #12]
 8005614:	f000 ff7c 	bl	8006510 <I2C_TransferConfig>
 8005618:	e00f      	b.n	800563a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800561e:	b29a      	uxth	r2, r3
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005628:	b2da      	uxtb	r2, r3
 800562a:	8979      	ldrh	r1, [r7, #10]
 800562c:	2300      	movs	r3, #0
 800562e:	9300      	str	r3, [sp, #0]
 8005630:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005634:	68f8      	ldr	r0, [r7, #12]
 8005636:	f000 ff6b 	bl	8006510 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800563e:	b29b      	uxth	r3, r3
 8005640:	2b00      	cmp	r3, #0
 8005642:	d19d      	bne.n	8005580 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005644:	697a      	ldr	r2, [r7, #20]
 8005646:	6a39      	ldr	r1, [r7, #32]
 8005648:	68f8      	ldr	r0, [r7, #12]
 800564a:	f000 fdca 	bl	80061e2 <I2C_WaitOnSTOPFlagUntilTimeout>
 800564e:	4603      	mov	r3, r0
 8005650:	2b00      	cmp	r3, #0
 8005652:	d001      	beq.n	8005658 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	e01a      	b.n	800568e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	2220      	movs	r2, #32
 800565e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	6859      	ldr	r1, [r3, #4]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	4b0c      	ldr	r3, [pc, #48]	@ (800569c <HAL_I2C_Master_Receive+0x1e8>)
 800566c:	400b      	ands	r3, r1
 800566e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2220      	movs	r2, #32
 8005674:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2200      	movs	r2, #0
 800567c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2200      	movs	r2, #0
 8005684:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005688:	2300      	movs	r3, #0
 800568a:	e000      	b.n	800568e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800568c:	2302      	movs	r3, #2
  }
}
 800568e:	4618      	mov	r0, r3
 8005690:	3718      	adds	r7, #24
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
 8005696:	bf00      	nop
 8005698:	80002400 	.word	0x80002400
 800569c:	fe00e800 	.word	0xfe00e800

080056a0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	699b      	ldr	r3, [r3, #24]
 80056ae:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d005      	beq.n	80056cc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056c4:	68ba      	ldr	r2, [r7, #8]
 80056c6:	68f9      	ldr	r1, [r7, #12]
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	4798      	blx	r3
  }
}
 80056cc:	bf00      	nop
 80056ce:	3710      	adds	r7, #16
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}

080056d4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b086      	sub	sp, #24
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	699b      	ldr	r3, [r3, #24]
 80056e2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d00f      	beq.n	8005716 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d00a      	beq.n	8005716 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005704:	f043 0201 	orr.w	r2, r3, #1
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005714:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800571c:	2b00      	cmp	r3, #0
 800571e:	d00f      	beq.n	8005740 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005726:	2b00      	cmp	r3, #0
 8005728:	d00a      	beq.n	8005740 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800572e:	f043 0208 	orr.w	r2, r3, #8
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800573e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005746:	2b00      	cmp	r3, #0
 8005748:	d00f      	beq.n	800576a <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005750:	2b00      	cmp	r3, #0
 8005752:	d00a      	beq.n	800576a <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005758:	f043 0202 	orr.w	r2, r3, #2
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005768:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800576e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f003 030b 	and.w	r3, r3, #11
 8005776:	2b00      	cmp	r3, #0
 8005778:	d003      	beq.n	8005782 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800577a:	68f9      	ldr	r1, [r7, #12]
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f000 fb77 	bl	8005e70 <I2C_ITError>
  }
}
 8005782:	bf00      	nop
 8005784:	3718      	adds	r7, #24
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}

0800578a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800578a:	b480      	push	{r7}
 800578c:	b083      	sub	sp, #12
 800578e:	af00      	add	r7, sp, #0
 8005790:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005792:	bf00      	nop
 8005794:	370c      	adds	r7, #12
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr

0800579e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800579e:	b480      	push	{r7}
 80057a0:	b083      	sub	sp, #12
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80057a6:	bf00      	nop
 80057a8:	370c      	adds	r7, #12
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr

080057b2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80057b2:	b480      	push	{r7}
 80057b4:	b083      	sub	sp, #12
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]
 80057ba:	460b      	mov	r3, r1
 80057bc:	70fb      	strb	r3, [r7, #3]
 80057be:	4613      	mov	r3, r2
 80057c0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80057c2:	bf00      	nop
 80057c4:	370c      	adds	r7, #12
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr

080057ce <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80057ce:	b480      	push	{r7}
 80057d0:	b083      	sub	sp, #12
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80057d6:	bf00      	nop
 80057d8:	370c      	adds	r7, #12
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr

080057e2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80057e2:	b480      	push	{r7}
 80057e4:	b083      	sub	sp, #12
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80057ea:	bf00      	nop
 80057ec:	370c      	adds	r7, #12
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr

080057f6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80057f6:	b480      	push	{r7}
 80057f8:	b083      	sub	sp, #12
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80057fe:	bf00      	nop
 8005800:	370c      	adds	r7, #12
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr

0800580a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800580a:	b580      	push	{r7, lr}
 800580c:	b086      	sub	sp, #24
 800580e:	af00      	add	r7, sp, #0
 8005810:	60f8      	str	r0, [r7, #12]
 8005812:	60b9      	str	r1, [r7, #8]
 8005814:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800581a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005826:	2b01      	cmp	r3, #1
 8005828:	d101      	bne.n	800582e <I2C_Slave_ISR_IT+0x24>
 800582a:	2302      	movs	r3, #2
 800582c:	e0e1      	b.n	80059f2 <I2C_Slave_ISR_IT+0x1e8>
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2201      	movs	r2, #1
 8005832:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	f003 0320 	and.w	r3, r3, #32
 800583c:	2b00      	cmp	r3, #0
 800583e:	d008      	beq.n	8005852 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005846:	2b00      	cmp	r3, #0
 8005848:	d003      	beq.n	8005852 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800584a:	6939      	ldr	r1, [r7, #16]
 800584c:	68f8      	ldr	r0, [r7, #12]
 800584e:	f000 f9b5 	bl	8005bbc <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	f003 0310 	and.w	r3, r3, #16
 8005858:	2b00      	cmp	r3, #0
 800585a:	d04b      	beq.n	80058f4 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005862:	2b00      	cmp	r3, #0
 8005864:	d046      	beq.n	80058f4 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800586a:	b29b      	uxth	r3, r3
 800586c:	2b00      	cmp	r3, #0
 800586e:	d128      	bne.n	80058c2 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005876:	b2db      	uxtb	r3, r3
 8005878:	2b28      	cmp	r3, #40	@ 0x28
 800587a:	d108      	bne.n	800588e <I2C_Slave_ISR_IT+0x84>
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005882:	d104      	bne.n	800588e <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005884:	6939      	ldr	r1, [r7, #16]
 8005886:	68f8      	ldr	r0, [r7, #12]
 8005888:	f000 fa9e 	bl	8005dc8 <I2C_ITListenCplt>
 800588c:	e031      	b.n	80058f2 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005894:	b2db      	uxtb	r3, r3
 8005896:	2b29      	cmp	r3, #41	@ 0x29
 8005898:	d10e      	bne.n	80058b8 <I2C_Slave_ISR_IT+0xae>
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80058a0:	d00a      	beq.n	80058b8 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	2210      	movs	r2, #16
 80058a8:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80058aa:	68f8      	ldr	r0, [r7, #12]
 80058ac:	f000 fbd7 	bl	800605e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80058b0:	68f8      	ldr	r0, [r7, #12]
 80058b2:	f000 f926 	bl	8005b02 <I2C_ITSlaveSeqCplt>
 80058b6:	e01c      	b.n	80058f2 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	2210      	movs	r2, #16
 80058be:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80058c0:	e08f      	b.n	80059e2 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	2210      	movs	r2, #16
 80058c8:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058ce:	f043 0204 	orr.w	r2, r3, #4
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d003      	beq.n	80058e4 <I2C_Slave_ISR_IT+0xda>
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80058e2:	d17e      	bne.n	80059e2 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058e8:	4619      	mov	r1, r3
 80058ea:	68f8      	ldr	r0, [r7, #12]
 80058ec:	f000 fac0 	bl	8005e70 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80058f0:	e077      	b.n	80059e2 <I2C_Slave_ISR_IT+0x1d8>
 80058f2:	e076      	b.n	80059e2 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	f003 0304 	and.w	r3, r3, #4
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d02f      	beq.n	800595e <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005904:	2b00      	cmp	r3, #0
 8005906:	d02a      	beq.n	800595e <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800590c:	b29b      	uxth	r3, r3
 800590e:	2b00      	cmp	r3, #0
 8005910:	d018      	beq.n	8005944 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800591c:	b2d2      	uxtb	r2, r2
 800591e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005924:	1c5a      	adds	r2, r3, #1
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800592e:	3b01      	subs	r3, #1
 8005930:	b29a      	uxth	r2, r3
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800593a:	b29b      	uxth	r3, r3
 800593c:	3b01      	subs	r3, #1
 800593e:	b29a      	uxth	r2, r3
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005948:	b29b      	uxth	r3, r3
 800594a:	2b00      	cmp	r3, #0
 800594c:	d14b      	bne.n	80059e6 <I2C_Slave_ISR_IT+0x1dc>
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005954:	d047      	beq.n	80059e6 <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8005956:	68f8      	ldr	r0, [r7, #12]
 8005958:	f000 f8d3 	bl	8005b02 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800595c:	e043      	b.n	80059e6 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	f003 0308 	and.w	r3, r3, #8
 8005964:	2b00      	cmp	r3, #0
 8005966:	d009      	beq.n	800597c <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800596e:	2b00      	cmp	r3, #0
 8005970:	d004      	beq.n	800597c <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8005972:	6939      	ldr	r1, [r7, #16]
 8005974:	68f8      	ldr	r0, [r7, #12]
 8005976:	f000 f840 	bl	80059fa <I2C_ITAddrCplt>
 800597a:	e035      	b.n	80059e8 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	f003 0302 	and.w	r3, r3, #2
 8005982:	2b00      	cmp	r3, #0
 8005984:	d030      	beq.n	80059e8 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800598c:	2b00      	cmp	r3, #0
 800598e:	d02b      	beq.n	80059e8 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005994:	b29b      	uxth	r3, r3
 8005996:	2b00      	cmp	r3, #0
 8005998:	d018      	beq.n	80059cc <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800599e:	781a      	ldrb	r2, [r3, #0]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059aa:	1c5a      	adds	r2, r3, #1
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	3b01      	subs	r3, #1
 80059b8:	b29a      	uxth	r2, r3
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059c2:	3b01      	subs	r3, #1
 80059c4:	b29a      	uxth	r2, r3
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	851a      	strh	r2, [r3, #40]	@ 0x28
 80059ca:	e00d      	b.n	80059e8 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80059d2:	d002      	beq.n	80059da <I2C_Slave_ISR_IT+0x1d0>
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d106      	bne.n	80059e8 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80059da:	68f8      	ldr	r0, [r7, #12]
 80059dc:	f000 f891 	bl	8005b02 <I2C_ITSlaveSeqCplt>
 80059e0:	e002      	b.n	80059e8 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 80059e2:	bf00      	nop
 80059e4:	e000      	b.n	80059e8 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 80059e6:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2200      	movs	r2, #0
 80059ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80059f0:	2300      	movs	r3, #0
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3718      	adds	r7, #24
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}

080059fa <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80059fa:	b580      	push	{r7, lr}
 80059fc:	b084      	sub	sp, #16
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	6078      	str	r0, [r7, #4]
 8005a02:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a0a:	b2db      	uxtb	r3, r3
 8005a0c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005a10:	2b28      	cmp	r3, #40	@ 0x28
 8005a12:	d16a      	bne.n	8005aea <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	699b      	ldr	r3, [r3, #24]
 8005a1a:	0c1b      	lsrs	r3, r3, #16
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	f003 0301 	and.w	r3, r3, #1
 8005a22:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	699b      	ldr	r3, [r3, #24]
 8005a2a:	0c1b      	lsrs	r3, r3, #16
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8005a32:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a40:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8005a4e:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	2b02      	cmp	r3, #2
 8005a56:	d138      	bne.n	8005aca <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8005a58:	897b      	ldrh	r3, [r7, #10]
 8005a5a:	09db      	lsrs	r3, r3, #7
 8005a5c:	b29a      	uxth	r2, r3
 8005a5e:	89bb      	ldrh	r3, [r7, #12]
 8005a60:	4053      	eors	r3, r2
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	f003 0306 	and.w	r3, r3, #6
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d11c      	bne.n	8005aa6 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8005a6c:	897b      	ldrh	r3, [r7, #10]
 8005a6e:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a74:	1c5a      	adds	r2, r3, #1
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a7e:	2b02      	cmp	r3, #2
 8005a80:	d13b      	bne.n	8005afa <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	2208      	movs	r2, #8
 8005a8e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005a98:	89ba      	ldrh	r2, [r7, #12]
 8005a9a:	7bfb      	ldrb	r3, [r7, #15]
 8005a9c:	4619      	mov	r1, r3
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f7ff fe87 	bl	80057b2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005aa4:	e029      	b.n	8005afa <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8005aa6:	893b      	ldrh	r3, [r7, #8]
 8005aa8:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005aaa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f000 fd60 	bl	8006574 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005abc:	89ba      	ldrh	r2, [r7, #12]
 8005abe:	7bfb      	ldrb	r3, [r7, #15]
 8005ac0:	4619      	mov	r1, r3
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f7ff fe75 	bl	80057b2 <HAL_I2C_AddrCallback>
}
 8005ac8:	e017      	b.n	8005afa <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005aca:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f000 fd50 	bl	8006574 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005adc:	89ba      	ldrh	r2, [r7, #12]
 8005ade:	7bfb      	ldrb	r3, [r7, #15]
 8005ae0:	4619      	mov	r1, r3
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f7ff fe65 	bl	80057b2 <HAL_I2C_AddrCallback>
}
 8005ae8:	e007      	b.n	8005afa <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	2208      	movs	r2, #8
 8005af0:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8005afa:	bf00      	nop
 8005afc:	3710      	adds	r7, #16
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}

08005b02 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005b02:	b580      	push	{r7, lr}
 8005b04:	b084      	sub	sp, #16
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2200      	movs	r2, #0
 8005b16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d008      	beq.n	8005b36 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005b32:	601a      	str	r2, [r3, #0]
 8005b34:	e00c      	b.n	8005b50 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d007      	beq.n	8005b50 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005b4e:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b56:	b2db      	uxtb	r3, r3
 8005b58:	2b29      	cmp	r3, #41	@ 0x29
 8005b5a:	d112      	bne.n	8005b82 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2228      	movs	r2, #40	@ 0x28
 8005b60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2221      	movs	r2, #33	@ 0x21
 8005b68:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005b6a:	2101      	movs	r1, #1
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f000 fd01 	bl	8006574 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f7ff fe05 	bl	800578a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005b80:	e017      	b.n	8005bb2 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b8c:	d111      	bne.n	8005bb2 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2228      	movs	r2, #40	@ 0x28
 8005b92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2222      	movs	r2, #34	@ 0x22
 8005b9a:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005b9c:	2102      	movs	r1, #2
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f000 fce8 	bl	8006574 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f7ff fdf6 	bl	800579e <HAL_I2C_SlaveRxCpltCallback>
}
 8005bb2:	bf00      	nop
 8005bb4:	3710      	adds	r7, #16
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
	...

08005bbc <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b086      	sub	sp, #24
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005bd8:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	2220      	movs	r2, #32
 8005be0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005be2:	7bfb      	ldrb	r3, [r7, #15]
 8005be4:	2b21      	cmp	r3, #33	@ 0x21
 8005be6:	d002      	beq.n	8005bee <I2C_ITSlaveCplt+0x32>
 8005be8:	7bfb      	ldrb	r3, [r7, #15]
 8005bea:	2b29      	cmp	r3, #41	@ 0x29
 8005bec:	d108      	bne.n	8005c00 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8005bee:	f248 0101 	movw	r1, #32769	@ 0x8001
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f000 fcbe 	bl	8006574 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2221      	movs	r2, #33	@ 0x21
 8005bfc:	631a      	str	r2, [r3, #48]	@ 0x30
 8005bfe:	e00d      	b.n	8005c1c <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005c00:	7bfb      	ldrb	r3, [r7, #15]
 8005c02:	2b22      	cmp	r3, #34	@ 0x22
 8005c04:	d002      	beq.n	8005c0c <I2C_ITSlaveCplt+0x50>
 8005c06:	7bfb      	ldrb	r3, [r7, #15]
 8005c08:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c0a:	d107      	bne.n	8005c1c <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8005c0c:	f248 0102 	movw	r1, #32770	@ 0x8002
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f000 fcaf 	bl	8006574 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2222      	movs	r2, #34	@ 0x22
 8005c1a:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	685a      	ldr	r2, [r3, #4]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005c2a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	6859      	ldr	r1, [r3, #4]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	4b62      	ldr	r3, [pc, #392]	@ (8005dc0 <I2C_ITSlaveCplt+0x204>)
 8005c38:	400b      	ands	r3, r1
 8005c3a:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f000 fa0e 	bl	800605e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d013      	beq.n	8005c74 <I2C_ITSlaveCplt+0xb8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005c5a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d01f      	beq.n	8005ca4 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	b29a      	uxth	r2, r3
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005c72:	e017      	b.n	8005ca4 <I2C_ITSlaveCplt+0xe8>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d012      	beq.n	8005ca4 <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005c8c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d006      	beq.n	8005ca4 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	b29a      	uxth	r2, r3
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	f003 0304 	and.w	r3, r3, #4
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d020      	beq.n	8005cf0 <I2C_ITSlaveCplt+0x134>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	f023 0304 	bic.w	r3, r3, #4
 8005cb4:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cc0:	b2d2      	uxtb	r2, r2
 8005cc2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cc8:	1c5a      	adds	r2, r3, #1
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d00c      	beq.n	8005cf0 <I2C_ITSlaveCplt+0x134>
    {
      hi2c->XferSize--;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cda:	3b01      	subs	r3, #1
 8005cdc:	b29a      	uxth	r2, r3
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	3b01      	subs	r3, #1
 8005cea:	b29a      	uxth	r2, r3
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d005      	beq.n	8005d06 <I2C_ITSlaveCplt+0x14a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cfe:	f043 0204 	orr.w	r2, r3, #4
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d010      	beq.n	8005d3e <I2C_ITSlaveCplt+0x182>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d20:	4619      	mov	r1, r3
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f000 f8a4 	bl	8005e70 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	2b28      	cmp	r3, #40	@ 0x28
 8005d32:	d141      	bne.n	8005db8 <I2C_ITSlaveCplt+0x1fc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8005d34:	6979      	ldr	r1, [r7, #20]
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f000 f846 	bl	8005dc8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005d3c:	e03c      	b.n	8005db8 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d42:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005d46:	d014      	beq.n	8005d72 <I2C_ITSlaveCplt+0x1b6>
    I2C_ITSlaveSeqCplt(hi2c);
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f7ff feda 	bl	8005b02 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4a1c      	ldr	r2, [pc, #112]	@ (8005dc4 <I2C_ITSlaveCplt+0x208>)
 8005d52:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2220      	movs	r2, #32
 8005d58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2200      	movs	r2, #0
 8005d66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f7ff fd2f 	bl	80057ce <HAL_I2C_ListenCpltCallback>
}
 8005d70:	e022      	b.n	8005db8 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	2b22      	cmp	r3, #34	@ 0x22
 8005d7c:	d10e      	bne.n	8005d9c <I2C_ITSlaveCplt+0x1e0>
    hi2c->State = HAL_I2C_STATE_READY;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2220      	movs	r2, #32
 8005d82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f7ff fd02 	bl	800579e <HAL_I2C_SlaveRxCpltCallback>
}
 8005d9a:	e00d      	b.n	8005db8 <I2C_ITSlaveCplt+0x1fc>
    hi2c->State = HAL_I2C_STATE_READY;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2220      	movs	r2, #32
 8005da0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2200      	movs	r2, #0
 8005dae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f7ff fce9 	bl	800578a <HAL_I2C_SlaveTxCpltCallback>
}
 8005db8:	bf00      	nop
 8005dba:	3718      	adds	r7, #24
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}
 8005dc0:	fe00e800 	.word	0xfe00e800
 8005dc4:	ffff0000 	.word	0xffff0000

08005dc8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b082      	sub	sp, #8
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
 8005dd0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4a25      	ldr	r2, [pc, #148]	@ (8005e6c <I2C_ITListenCplt+0xa4>)
 8005dd6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2220      	movs	r2, #32
 8005de2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2200      	movs	r2, #0
 8005dea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2200      	movs	r2, #0
 8005df2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	f003 0304 	and.w	r3, r3, #4
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d022      	beq.n	8005e44 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e08:	b2d2      	uxtb	r2, r2
 8005e0a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e10:	1c5a      	adds	r2, r3, #1
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d012      	beq.n	8005e44 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e22:	3b01      	subs	r3, #1
 8005e24:	b29a      	uxth	r2, r3
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	3b01      	subs	r3, #1
 8005e32:	b29a      	uxth	r2, r3
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e3c:	f043 0204 	orr.w	r2, r3, #4
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005e44:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f000 fb93 	bl	8006574 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	2210      	movs	r2, #16
 8005e54:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f7ff fcb5 	bl	80057ce <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8005e64:	bf00      	nop
 8005e66:	3708      	adds	r7, #8
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}
 8005e6c:	ffff0000 	.word	0xffff0000

08005e70 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b084      	sub	sp, #16
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2200      	movs	r2, #0
 8005e86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	4a5d      	ldr	r2, [pc, #372]	@ (8006004 <I2C_ITError+0x194>)
 8005e8e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2200      	movs	r2, #0
 8005e94:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	431a      	orrs	r2, r3
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8005ea2:	7bfb      	ldrb	r3, [r7, #15]
 8005ea4:	2b28      	cmp	r3, #40	@ 0x28
 8005ea6:	d005      	beq.n	8005eb4 <I2C_ITError+0x44>
 8005ea8:	7bfb      	ldrb	r3, [r7, #15]
 8005eaa:	2b29      	cmp	r3, #41	@ 0x29
 8005eac:	d002      	beq.n	8005eb4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8005eae:	7bfb      	ldrb	r3, [r7, #15]
 8005eb0:	2b2a      	cmp	r3, #42	@ 0x2a
 8005eb2:	d10b      	bne.n	8005ecc <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005eb4:	2103      	movs	r1, #3
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f000 fb5c 	bl	8006574 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2228      	movs	r2, #40	@ 0x28
 8005ec0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	4a50      	ldr	r2, [pc, #320]	@ (8006008 <I2C_ITError+0x198>)
 8005ec8:	635a      	str	r2, [r3, #52]	@ 0x34
 8005eca:	e011      	b.n	8005ef0 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005ecc:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f000 fb4f 	bl	8006574 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	2b60      	cmp	r3, #96	@ 0x60
 8005ee0:	d003      	beq.n	8005eea <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2220      	movs	r2, #32
 8005ee6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    }
    hi2c->XferISR       = NULL;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2200      	movs	r2, #0
 8005eee:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ef4:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d039      	beq.n	8005f72 <I2C_ITError+0x102>
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	2b11      	cmp	r3, #17
 8005f02:	d002      	beq.n	8005f0a <I2C_ITError+0x9a>
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	2b21      	cmp	r3, #33	@ 0x21
 8005f08:	d133      	bne.n	8005f72 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f14:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005f18:	d107      	bne.n	8005f2a <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005f28:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f7fe ff2c 	bl	8004d8c <HAL_DMA_GetState>
 8005f34:	4603      	mov	r3, r0
 8005f36:	2b01      	cmp	r3, #1
 8005f38:	d017      	beq.n	8005f6a <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f3e:	4a33      	ldr	r2, [pc, #204]	@ (800600c <I2C_ITError+0x19c>)
 8005f40:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f7fe fefa 	bl	8004d48 <HAL_DMA_Abort_IT>
 8005f54:	4603      	mov	r3, r0
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d04d      	beq.n	8005ff6 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005f64:	4610      	mov	r0, r2
 8005f66:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005f68:	e045      	b.n	8005ff6 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 f850 	bl	8006010 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005f70:	e041      	b.n	8005ff6 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d039      	beq.n	8005fee <I2C_ITError+0x17e>
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	2b12      	cmp	r3, #18
 8005f7e:	d002      	beq.n	8005f86 <I2C_ITError+0x116>
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	2b22      	cmp	r3, #34	@ 0x22
 8005f84:	d133      	bne.n	8005fee <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005f90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f94:	d107      	bne.n	8005fa6 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005fa4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005faa:	4618      	mov	r0, r3
 8005fac:	f7fe feee 	bl	8004d8c <HAL_DMA_GetState>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d017      	beq.n	8005fe6 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fba:	4a14      	ldr	r2, [pc, #80]	@ (800600c <I2C_ITError+0x19c>)
 8005fbc:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f7fe febc 	bl	8004d48 <HAL_DMA_Abort_IT>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d011      	beq.n	8005ffa <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005fe0:	4610      	mov	r0, r2
 8005fe2:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005fe4:	e009      	b.n	8005ffa <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 f812 	bl	8006010 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005fec:	e005      	b.n	8005ffa <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 f80e 	bl	8006010 <I2C_TreatErrorCallback>
  }
}
 8005ff4:	e002      	b.n	8005ffc <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005ff6:	bf00      	nop
 8005ff8:	e000      	b.n	8005ffc <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005ffa:	bf00      	nop
}
 8005ffc:	bf00      	nop
 8005ffe:	3710      	adds	r7, #16
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}
 8006004:	ffff0000 	.word	0xffff0000
 8006008:	0800580b 	.word	0x0800580b
 800600c:	080060a7 	.word	0x080060a7

08006010 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b082      	sub	sp, #8
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800601e:	b2db      	uxtb	r3, r3
 8006020:	2b60      	cmp	r3, #96	@ 0x60
 8006022:	d10e      	bne.n	8006042 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2220      	movs	r2, #32
 8006028:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2200      	movs	r2, #0
 8006030:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2200      	movs	r2, #0
 8006036:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f7ff fbdb 	bl	80057f6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006040:	e009      	b.n	8006056 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2200      	movs	r2, #0
 800604c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f7ff fbc6 	bl	80057e2 <HAL_I2C_ErrorCallback>
}
 8006056:	bf00      	nop
 8006058:	3708      	adds	r7, #8
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}

0800605e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800605e:	b480      	push	{r7}
 8006060:	b083      	sub	sp, #12
 8006062:	af00      	add	r7, sp, #0
 8006064:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	699b      	ldr	r3, [r3, #24]
 800606c:	f003 0302 	and.w	r3, r3, #2
 8006070:	2b02      	cmp	r3, #2
 8006072:	d103      	bne.n	800607c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2200      	movs	r2, #0
 800607a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	699b      	ldr	r3, [r3, #24]
 8006082:	f003 0301 	and.w	r3, r3, #1
 8006086:	2b01      	cmp	r3, #1
 8006088:	d007      	beq.n	800609a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	699a      	ldr	r2, [r3, #24]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f042 0201 	orr.w	r2, r2, #1
 8006098:	619a      	str	r2, [r3, #24]
  }
}
 800609a:	bf00      	nop
 800609c:	370c      	adds	r7, #12
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr

080060a6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80060a6:	b580      	push	{r7, lr}
 80060a8:	b084      	sub	sp, #16
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060b2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d003      	beq.n	80060c4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060c0:	2200      	movs	r2, #0
 80060c2:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d003      	beq.n	80060d4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060d0:	2200      	movs	r2, #0
 80060d2:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 80060d4:	68f8      	ldr	r0, [r7, #12]
 80060d6:	f7ff ff9b 	bl	8006010 <I2C_TreatErrorCallback>
}
 80060da:	bf00      	nop
 80060dc:	3710      	adds	r7, #16
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}

080060e2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80060e2:	b580      	push	{r7, lr}
 80060e4:	b084      	sub	sp, #16
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	60f8      	str	r0, [r7, #12]
 80060ea:	60b9      	str	r1, [r7, #8]
 80060ec:	603b      	str	r3, [r7, #0]
 80060ee:	4613      	mov	r3, r2
 80060f0:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80060f2:	e022      	b.n	800613a <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060fa:	d01e      	beq.n	800613a <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060fc:	f7fe fb88 	bl	8004810 <HAL_GetTick>
 8006100:	4602      	mov	r2, r0
 8006102:	69bb      	ldr	r3, [r7, #24]
 8006104:	1ad3      	subs	r3, r2, r3
 8006106:	683a      	ldr	r2, [r7, #0]
 8006108:	429a      	cmp	r2, r3
 800610a:	d302      	bcc.n	8006112 <I2C_WaitOnFlagUntilTimeout+0x30>
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d113      	bne.n	800613a <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006116:	f043 0220 	orr.w	r2, r3, #32
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2220      	movs	r2, #32
 8006122:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2200      	movs	r2, #0
 800612a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2200      	movs	r2, #0
 8006132:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	e00f      	b.n	800615a <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	699a      	ldr	r2, [r3, #24]
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	4013      	ands	r3, r2
 8006144:	68ba      	ldr	r2, [r7, #8]
 8006146:	429a      	cmp	r2, r3
 8006148:	bf0c      	ite	eq
 800614a:	2301      	moveq	r3, #1
 800614c:	2300      	movne	r3, #0
 800614e:	b2db      	uxtb	r3, r3
 8006150:	461a      	mov	r2, r3
 8006152:	79fb      	ldrb	r3, [r7, #7]
 8006154:	429a      	cmp	r2, r3
 8006156:	d0cd      	beq.n	80060f4 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006158:	2300      	movs	r3, #0
}
 800615a:	4618      	mov	r0, r3
 800615c:	3710      	adds	r7, #16
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}

08006162 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006162:	b580      	push	{r7, lr}
 8006164:	b084      	sub	sp, #16
 8006166:	af00      	add	r7, sp, #0
 8006168:	60f8      	str	r0, [r7, #12]
 800616a:	60b9      	str	r1, [r7, #8]
 800616c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800616e:	e02c      	b.n	80061ca <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006170:	687a      	ldr	r2, [r7, #4]
 8006172:	68b9      	ldr	r1, [r7, #8]
 8006174:	68f8      	ldr	r0, [r7, #12]
 8006176:	f000 f8eb 	bl	8006350 <I2C_IsErrorOccurred>
 800617a:	4603      	mov	r3, r0
 800617c:	2b00      	cmp	r3, #0
 800617e:	d001      	beq.n	8006184 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006180:	2301      	movs	r3, #1
 8006182:	e02a      	b.n	80061da <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800618a:	d01e      	beq.n	80061ca <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800618c:	f7fe fb40 	bl	8004810 <HAL_GetTick>
 8006190:	4602      	mov	r2, r0
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	1ad3      	subs	r3, r2, r3
 8006196:	68ba      	ldr	r2, [r7, #8]
 8006198:	429a      	cmp	r2, r3
 800619a:	d302      	bcc.n	80061a2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d113      	bne.n	80061ca <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061a6:	f043 0220 	orr.w	r2, r3, #32
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2220      	movs	r2, #32
 80061b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2200      	movs	r2, #0
 80061ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2200      	movs	r2, #0
 80061c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	e007      	b.n	80061da <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	699b      	ldr	r3, [r3, #24]
 80061d0:	f003 0302 	and.w	r3, r3, #2
 80061d4:	2b02      	cmp	r3, #2
 80061d6:	d1cb      	bne.n	8006170 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80061d8:	2300      	movs	r3, #0
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3710      	adds	r7, #16
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}

080061e2 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80061e2:	b580      	push	{r7, lr}
 80061e4:	b084      	sub	sp, #16
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	60f8      	str	r0, [r7, #12]
 80061ea:	60b9      	str	r1, [r7, #8]
 80061ec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80061ee:	e028      	b.n	8006242 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	68b9      	ldr	r1, [r7, #8]
 80061f4:	68f8      	ldr	r0, [r7, #12]
 80061f6:	f000 f8ab 	bl	8006350 <I2C_IsErrorOccurred>
 80061fa:	4603      	mov	r3, r0
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d001      	beq.n	8006204 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	e026      	b.n	8006252 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006204:	f7fe fb04 	bl	8004810 <HAL_GetTick>
 8006208:	4602      	mov	r2, r0
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	1ad3      	subs	r3, r2, r3
 800620e:	68ba      	ldr	r2, [r7, #8]
 8006210:	429a      	cmp	r2, r3
 8006212:	d302      	bcc.n	800621a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d113      	bne.n	8006242 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800621e:	f043 0220 	orr.w	r2, r3, #32
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2220      	movs	r2, #32
 800622a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2200      	movs	r2, #0
 8006232:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2200      	movs	r2, #0
 800623a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	e007      	b.n	8006252 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	699b      	ldr	r3, [r3, #24]
 8006248:	f003 0320 	and.w	r3, r3, #32
 800624c:	2b20      	cmp	r3, #32
 800624e:	d1cf      	bne.n	80061f0 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006250:	2300      	movs	r3, #0
}
 8006252:	4618      	mov	r0, r3
 8006254:	3710      	adds	r7, #16
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}
	...

0800625c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b084      	sub	sp, #16
 8006260:	af00      	add	r7, sp, #0
 8006262:	60f8      	str	r0, [r7, #12]
 8006264:	60b9      	str	r1, [r7, #8]
 8006266:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006268:	e064      	b.n	8006334 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800626a:	687a      	ldr	r2, [r7, #4]
 800626c:	68b9      	ldr	r1, [r7, #8]
 800626e:	68f8      	ldr	r0, [r7, #12]
 8006270:	f000 f86e 	bl	8006350 <I2C_IsErrorOccurred>
 8006274:	4603      	mov	r3, r0
 8006276:	2b00      	cmp	r3, #0
 8006278:	d001      	beq.n	800627e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	e062      	b.n	8006344 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	699b      	ldr	r3, [r3, #24]
 8006284:	f003 0320 	and.w	r3, r3, #32
 8006288:	2b20      	cmp	r3, #32
 800628a:	d138      	bne.n	80062fe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	699b      	ldr	r3, [r3, #24]
 8006292:	f003 0304 	and.w	r3, r3, #4
 8006296:	2b04      	cmp	r3, #4
 8006298:	d105      	bne.n	80062a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d001      	beq.n	80062a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80062a2:	2300      	movs	r3, #0
 80062a4:	e04e      	b.n	8006344 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	699b      	ldr	r3, [r3, #24]
 80062ac:	f003 0310 	and.w	r3, r3, #16
 80062b0:	2b10      	cmp	r3, #16
 80062b2:	d107      	bne.n	80062c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	2210      	movs	r2, #16
 80062ba:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2204      	movs	r2, #4
 80062c0:	645a      	str	r2, [r3, #68]	@ 0x44
 80062c2:	e002      	b.n	80062ca <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2200      	movs	r2, #0
 80062c8:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	2220      	movs	r2, #32
 80062d0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	6859      	ldr	r1, [r3, #4]
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	4b1b      	ldr	r3, [pc, #108]	@ (800634c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80062de:	400b      	ands	r3, r1
 80062e0:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2220      	movs	r2, #32
 80062e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2200      	movs	r2, #0
 80062ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2200      	movs	r2, #0
 80062f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80062fa:	2301      	movs	r3, #1
 80062fc:	e022      	b.n	8006344 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062fe:	f7fe fa87 	bl	8004810 <HAL_GetTick>
 8006302:	4602      	mov	r2, r0
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	1ad3      	subs	r3, r2, r3
 8006308:	68ba      	ldr	r2, [r7, #8]
 800630a:	429a      	cmp	r2, r3
 800630c:	d302      	bcc.n	8006314 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d10f      	bne.n	8006334 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006318:	f043 0220 	orr.w	r2, r3, #32
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2220      	movs	r2, #32
 8006324:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2200      	movs	r2, #0
 800632c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8006330:	2301      	movs	r3, #1
 8006332:	e007      	b.n	8006344 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	699b      	ldr	r3, [r3, #24]
 800633a:	f003 0304 	and.w	r3, r3, #4
 800633e:	2b04      	cmp	r3, #4
 8006340:	d193      	bne.n	800626a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006342:	2300      	movs	r3, #0
}
 8006344:	4618      	mov	r0, r3
 8006346:	3710      	adds	r7, #16
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}
 800634c:	fe00e800 	.word	0xfe00e800

08006350 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b08a      	sub	sp, #40	@ 0x28
 8006354:	af00      	add	r7, sp, #0
 8006356:	60f8      	str	r0, [r7, #12]
 8006358:	60b9      	str	r1, [r7, #8]
 800635a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800635c:	2300      	movs	r3, #0
 800635e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	699b      	ldr	r3, [r3, #24]
 8006368:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800636a:	2300      	movs	r3, #0
 800636c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006372:	69bb      	ldr	r3, [r7, #24]
 8006374:	f003 0310 	and.w	r3, r3, #16
 8006378:	2b00      	cmp	r3, #0
 800637a:	d068      	beq.n	800644e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2210      	movs	r2, #16
 8006382:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006384:	e049      	b.n	800641a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800638c:	d045      	beq.n	800641a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800638e:	f7fe fa3f 	bl	8004810 <HAL_GetTick>
 8006392:	4602      	mov	r2, r0
 8006394:	69fb      	ldr	r3, [r7, #28]
 8006396:	1ad3      	subs	r3, r2, r3
 8006398:	68ba      	ldr	r2, [r7, #8]
 800639a:	429a      	cmp	r2, r3
 800639c:	d302      	bcc.n	80063a4 <I2C_IsErrorOccurred+0x54>
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d13a      	bne.n	800641a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80063ae:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80063b6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	699b      	ldr	r3, [r3, #24]
 80063be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80063c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063c6:	d121      	bne.n	800640c <I2C_IsErrorOccurred+0xbc>
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80063ce:	d01d      	beq.n	800640c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80063d0:	7cfb      	ldrb	r3, [r7, #19]
 80063d2:	2b20      	cmp	r3, #32
 80063d4:	d01a      	beq.n	800640c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	685a      	ldr	r2, [r3, #4]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80063e4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80063e6:	f7fe fa13 	bl	8004810 <HAL_GetTick>
 80063ea:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80063ec:	e00e      	b.n	800640c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80063ee:	f7fe fa0f 	bl	8004810 <HAL_GetTick>
 80063f2:	4602      	mov	r2, r0
 80063f4:	69fb      	ldr	r3, [r7, #28]
 80063f6:	1ad3      	subs	r3, r2, r3
 80063f8:	2b19      	cmp	r3, #25
 80063fa:	d907      	bls.n	800640c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80063fc:	6a3b      	ldr	r3, [r7, #32]
 80063fe:	f043 0320 	orr.w	r3, r3, #32
 8006402:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800640a:	e006      	b.n	800641a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	699b      	ldr	r3, [r3, #24]
 8006412:	f003 0320 	and.w	r3, r3, #32
 8006416:	2b20      	cmp	r3, #32
 8006418:	d1e9      	bne.n	80063ee <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	699b      	ldr	r3, [r3, #24]
 8006420:	f003 0320 	and.w	r3, r3, #32
 8006424:	2b20      	cmp	r3, #32
 8006426:	d003      	beq.n	8006430 <I2C_IsErrorOccurred+0xe0>
 8006428:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800642c:	2b00      	cmp	r3, #0
 800642e:	d0aa      	beq.n	8006386 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006430:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006434:	2b00      	cmp	r3, #0
 8006436:	d103      	bne.n	8006440 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	2220      	movs	r2, #32
 800643e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006440:	6a3b      	ldr	r3, [r7, #32]
 8006442:	f043 0304 	orr.w	r3, r3, #4
 8006446:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	699b      	ldr	r3, [r3, #24]
 8006454:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006456:	69bb      	ldr	r3, [r7, #24]
 8006458:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800645c:	2b00      	cmp	r3, #0
 800645e:	d00b      	beq.n	8006478 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006460:	6a3b      	ldr	r3, [r7, #32]
 8006462:	f043 0301 	orr.w	r3, r3, #1
 8006466:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006470:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006478:	69bb      	ldr	r3, [r7, #24]
 800647a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800647e:	2b00      	cmp	r3, #0
 8006480:	d00b      	beq.n	800649a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006482:	6a3b      	ldr	r3, [r7, #32]
 8006484:	f043 0308 	orr.w	r3, r3, #8
 8006488:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006492:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006494:	2301      	movs	r3, #1
 8006496:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800649a:	69bb      	ldr	r3, [r7, #24]
 800649c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d00b      	beq.n	80064bc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80064a4:	6a3b      	ldr	r3, [r7, #32]
 80064a6:	f043 0302 	orr.w	r3, r3, #2
 80064aa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80064b4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80064bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d01c      	beq.n	80064fe <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80064c4:	68f8      	ldr	r0, [r7, #12]
 80064c6:	f7ff fdca 	bl	800605e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	6859      	ldr	r1, [r3, #4]
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	4b0d      	ldr	r3, [pc, #52]	@ (800650c <I2C_IsErrorOccurred+0x1bc>)
 80064d6:	400b      	ands	r3, r1
 80064d8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80064de:	6a3b      	ldr	r3, [r7, #32]
 80064e0:	431a      	orrs	r2, r3
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2220      	movs	r2, #32
 80064ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2200      	movs	r2, #0
 80064f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2200      	movs	r2, #0
 80064fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80064fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006502:	4618      	mov	r0, r3
 8006504:	3728      	adds	r7, #40	@ 0x28
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}
 800650a:	bf00      	nop
 800650c:	fe00e800 	.word	0xfe00e800

08006510 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006510:	b480      	push	{r7}
 8006512:	b087      	sub	sp, #28
 8006514:	af00      	add	r7, sp, #0
 8006516:	60f8      	str	r0, [r7, #12]
 8006518:	607b      	str	r3, [r7, #4]
 800651a:	460b      	mov	r3, r1
 800651c:	817b      	strh	r3, [r7, #10]
 800651e:	4613      	mov	r3, r2
 8006520:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006522:	897b      	ldrh	r3, [r7, #10]
 8006524:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006528:	7a7b      	ldrb	r3, [r7, #9]
 800652a:	041b      	lsls	r3, r3, #16
 800652c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006530:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006536:	6a3b      	ldr	r3, [r7, #32]
 8006538:	4313      	orrs	r3, r2
 800653a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800653e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	685a      	ldr	r2, [r3, #4]
 8006546:	6a3b      	ldr	r3, [r7, #32]
 8006548:	0d5b      	lsrs	r3, r3, #21
 800654a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800654e:	4b08      	ldr	r3, [pc, #32]	@ (8006570 <I2C_TransferConfig+0x60>)
 8006550:	430b      	orrs	r3, r1
 8006552:	43db      	mvns	r3, r3
 8006554:	ea02 0103 	and.w	r1, r2, r3
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	697a      	ldr	r2, [r7, #20]
 800655e:	430a      	orrs	r2, r1
 8006560:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006562:	bf00      	nop
 8006564:	371c      	adds	r7, #28
 8006566:	46bd      	mov	sp, r7
 8006568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656c:	4770      	bx	lr
 800656e:	bf00      	nop
 8006570:	03ff63ff 	.word	0x03ff63ff

08006574 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006574:	b480      	push	{r7}
 8006576:	b085      	sub	sp, #20
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	460b      	mov	r3, r1
 800657e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006580:	2300      	movs	r3, #0
 8006582:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006584:	887b      	ldrh	r3, [r7, #2]
 8006586:	f003 0301 	and.w	r3, r3, #1
 800658a:	2b00      	cmp	r3, #0
 800658c:	d00f      	beq.n	80065ae <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8006594:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800659c:	b2db      	uxtb	r3, r3
 800659e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80065a2:	2b28      	cmp	r3, #40	@ 0x28
 80065a4:	d003      	beq.n	80065ae <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80065ac:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80065ae:	887b      	ldrh	r3, [r7, #2]
 80065b0:	f003 0302 	and.w	r3, r3, #2
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d00f      	beq.n	80065d8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80065be:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065c6:	b2db      	uxtb	r3, r3
 80065c8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80065cc:	2b28      	cmp	r3, #40	@ 0x28
 80065ce:	d003      	beq.n	80065d8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80065d6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80065d8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	da03      	bge.n	80065e8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80065e6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80065e8:	887b      	ldrh	r3, [r7, #2]
 80065ea:	2b10      	cmp	r3, #16
 80065ec:	d103      	bne.n	80065f6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80065f4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80065f6:	887b      	ldrh	r3, [r7, #2]
 80065f8:	2b20      	cmp	r3, #32
 80065fa:	d103      	bne.n	8006604 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f043 0320 	orr.w	r3, r3, #32
 8006602:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006604:	887b      	ldrh	r3, [r7, #2]
 8006606:	2b40      	cmp	r3, #64	@ 0x40
 8006608:	d103      	bne.n	8006612 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006610:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	6819      	ldr	r1, [r3, #0]
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	43da      	mvns	r2, r3
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	400a      	ands	r2, r1
 8006622:	601a      	str	r2, [r3, #0]
}
 8006624:	bf00      	nop
 8006626:	3714      	adds	r7, #20
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr

08006630 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006630:	b480      	push	{r7}
 8006632:	b083      	sub	sp, #12
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006640:	b2db      	uxtb	r3, r3
 8006642:	2b20      	cmp	r3, #32
 8006644:	d138      	bne.n	80066b8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800664c:	2b01      	cmp	r3, #1
 800664e:	d101      	bne.n	8006654 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006650:	2302      	movs	r3, #2
 8006652:	e032      	b.n	80066ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2201      	movs	r2, #1
 8006658:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2224      	movs	r2, #36	@ 0x24
 8006660:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f022 0201 	bic.w	r2, r2, #1
 8006672:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006682:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	6819      	ldr	r1, [r3, #0]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	683a      	ldr	r2, [r7, #0]
 8006690:	430a      	orrs	r2, r1
 8006692:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f042 0201 	orr.w	r2, r2, #1
 80066a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2220      	movs	r2, #32
 80066a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80066b4:	2300      	movs	r3, #0
 80066b6:	e000      	b.n	80066ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80066b8:	2302      	movs	r3, #2
  }
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	370c      	adds	r7, #12
 80066be:	46bd      	mov	sp, r7
 80066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c4:	4770      	bx	lr

080066c6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80066c6:	b480      	push	{r7}
 80066c8:	b085      	sub	sp, #20
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	6078      	str	r0, [r7, #4]
 80066ce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066d6:	b2db      	uxtb	r3, r3
 80066d8:	2b20      	cmp	r3, #32
 80066da:	d139      	bne.n	8006750 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80066e2:	2b01      	cmp	r3, #1
 80066e4:	d101      	bne.n	80066ea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80066e6:	2302      	movs	r3, #2
 80066e8:	e033      	b.n	8006752 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2201      	movs	r2, #1
 80066ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2224      	movs	r2, #36	@ 0x24
 80066f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	681a      	ldr	r2, [r3, #0]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f022 0201 	bic.w	r2, r2, #1
 8006708:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006718:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	021b      	lsls	r3, r3, #8
 800671e:	68fa      	ldr	r2, [r7, #12]
 8006720:	4313      	orrs	r3, r2
 8006722:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	68fa      	ldr	r2, [r7, #12]
 800672a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	681a      	ldr	r2, [r3, #0]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f042 0201 	orr.w	r2, r2, #1
 800673a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2220      	movs	r2, #32
 8006740:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2200      	movs	r2, #0
 8006748:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800674c:	2300      	movs	r3, #0
 800674e:	e000      	b.n	8006752 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006750:	2302      	movs	r3, #2
  }
}
 8006752:	4618      	mov	r0, r3
 8006754:	3714      	adds	r7, #20
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr
	...

08006760 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b082      	sub	sp, #8
 8006764:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006766:	2300      	movs	r3, #0
 8006768:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800676a:	4b23      	ldr	r3, [pc, #140]	@ (80067f8 <HAL_PWREx_EnableOverDrive+0x98>)
 800676c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800676e:	4a22      	ldr	r2, [pc, #136]	@ (80067f8 <HAL_PWREx_EnableOverDrive+0x98>)
 8006770:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006774:	6413      	str	r3, [r2, #64]	@ 0x40
 8006776:	4b20      	ldr	r3, [pc, #128]	@ (80067f8 <HAL_PWREx_EnableOverDrive+0x98>)
 8006778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800677a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800677e:	603b      	str	r3, [r7, #0]
 8006780:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006782:	4b1e      	ldr	r3, [pc, #120]	@ (80067fc <HAL_PWREx_EnableOverDrive+0x9c>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a1d      	ldr	r2, [pc, #116]	@ (80067fc <HAL_PWREx_EnableOverDrive+0x9c>)
 8006788:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800678c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800678e:	f7fe f83f 	bl	8004810 <HAL_GetTick>
 8006792:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006794:	e009      	b.n	80067aa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006796:	f7fe f83b 	bl	8004810 <HAL_GetTick>
 800679a:	4602      	mov	r2, r0
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	1ad3      	subs	r3, r2, r3
 80067a0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80067a4:	d901      	bls.n	80067aa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80067a6:	2303      	movs	r3, #3
 80067a8:	e022      	b.n	80067f0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80067aa:	4b14      	ldr	r3, [pc, #80]	@ (80067fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80067b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067b6:	d1ee      	bne.n	8006796 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80067b8:	4b10      	ldr	r3, [pc, #64]	@ (80067fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a0f      	ldr	r2, [pc, #60]	@ (80067fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80067be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80067c2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80067c4:	f7fe f824 	bl	8004810 <HAL_GetTick>
 80067c8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80067ca:	e009      	b.n	80067e0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80067cc:	f7fe f820 	bl	8004810 <HAL_GetTick>
 80067d0:	4602      	mov	r2, r0
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	1ad3      	subs	r3, r2, r3
 80067d6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80067da:	d901      	bls.n	80067e0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80067dc:	2303      	movs	r3, #3
 80067de:	e007      	b.n	80067f0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80067e0:	4b06      	ldr	r3, [pc, #24]	@ (80067fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80067ec:	d1ee      	bne.n	80067cc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80067ee:	2300      	movs	r3, #0
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3708      	adds	r7, #8
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}
 80067f8:	40023800 	.word	0x40023800
 80067fc:	40007000 	.word	0x40007000

08006800 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b086      	sub	sp, #24
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006808:	2300      	movs	r3, #0
 800680a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d101      	bne.n	8006816 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	e291      	b.n	8006d3a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f003 0301 	and.w	r3, r3, #1
 800681e:	2b00      	cmp	r3, #0
 8006820:	f000 8087 	beq.w	8006932 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006824:	4b96      	ldr	r3, [pc, #600]	@ (8006a80 <HAL_RCC_OscConfig+0x280>)
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	f003 030c 	and.w	r3, r3, #12
 800682c:	2b04      	cmp	r3, #4
 800682e:	d00c      	beq.n	800684a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006830:	4b93      	ldr	r3, [pc, #588]	@ (8006a80 <HAL_RCC_OscConfig+0x280>)
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	f003 030c 	and.w	r3, r3, #12
 8006838:	2b08      	cmp	r3, #8
 800683a:	d112      	bne.n	8006862 <HAL_RCC_OscConfig+0x62>
 800683c:	4b90      	ldr	r3, [pc, #576]	@ (8006a80 <HAL_RCC_OscConfig+0x280>)
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006844:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006848:	d10b      	bne.n	8006862 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800684a:	4b8d      	ldr	r3, [pc, #564]	@ (8006a80 <HAL_RCC_OscConfig+0x280>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006852:	2b00      	cmp	r3, #0
 8006854:	d06c      	beq.n	8006930 <HAL_RCC_OscConfig+0x130>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d168      	bne.n	8006930 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	e26b      	b.n	8006d3a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800686a:	d106      	bne.n	800687a <HAL_RCC_OscConfig+0x7a>
 800686c:	4b84      	ldr	r3, [pc, #528]	@ (8006a80 <HAL_RCC_OscConfig+0x280>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a83      	ldr	r2, [pc, #524]	@ (8006a80 <HAL_RCC_OscConfig+0x280>)
 8006872:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006876:	6013      	str	r3, [r2, #0]
 8006878:	e02e      	b.n	80068d8 <HAL_RCC_OscConfig+0xd8>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d10c      	bne.n	800689c <HAL_RCC_OscConfig+0x9c>
 8006882:	4b7f      	ldr	r3, [pc, #508]	@ (8006a80 <HAL_RCC_OscConfig+0x280>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a7e      	ldr	r2, [pc, #504]	@ (8006a80 <HAL_RCC_OscConfig+0x280>)
 8006888:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800688c:	6013      	str	r3, [r2, #0]
 800688e:	4b7c      	ldr	r3, [pc, #496]	@ (8006a80 <HAL_RCC_OscConfig+0x280>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a7b      	ldr	r2, [pc, #492]	@ (8006a80 <HAL_RCC_OscConfig+0x280>)
 8006894:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006898:	6013      	str	r3, [r2, #0]
 800689a:	e01d      	b.n	80068d8 <HAL_RCC_OscConfig+0xd8>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80068a4:	d10c      	bne.n	80068c0 <HAL_RCC_OscConfig+0xc0>
 80068a6:	4b76      	ldr	r3, [pc, #472]	@ (8006a80 <HAL_RCC_OscConfig+0x280>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a75      	ldr	r2, [pc, #468]	@ (8006a80 <HAL_RCC_OscConfig+0x280>)
 80068ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80068b0:	6013      	str	r3, [r2, #0]
 80068b2:	4b73      	ldr	r3, [pc, #460]	@ (8006a80 <HAL_RCC_OscConfig+0x280>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a72      	ldr	r2, [pc, #456]	@ (8006a80 <HAL_RCC_OscConfig+0x280>)
 80068b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80068bc:	6013      	str	r3, [r2, #0]
 80068be:	e00b      	b.n	80068d8 <HAL_RCC_OscConfig+0xd8>
 80068c0:	4b6f      	ldr	r3, [pc, #444]	@ (8006a80 <HAL_RCC_OscConfig+0x280>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a6e      	ldr	r2, [pc, #440]	@ (8006a80 <HAL_RCC_OscConfig+0x280>)
 80068c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80068ca:	6013      	str	r3, [r2, #0]
 80068cc:	4b6c      	ldr	r3, [pc, #432]	@ (8006a80 <HAL_RCC_OscConfig+0x280>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a6b      	ldr	r2, [pc, #428]	@ (8006a80 <HAL_RCC_OscConfig+0x280>)
 80068d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80068d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d013      	beq.n	8006908 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068e0:	f7fd ff96 	bl	8004810 <HAL_GetTick>
 80068e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068e6:	e008      	b.n	80068fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068e8:	f7fd ff92 	bl	8004810 <HAL_GetTick>
 80068ec:	4602      	mov	r2, r0
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	1ad3      	subs	r3, r2, r3
 80068f2:	2b64      	cmp	r3, #100	@ 0x64
 80068f4:	d901      	bls.n	80068fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80068f6:	2303      	movs	r3, #3
 80068f8:	e21f      	b.n	8006d3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068fa:	4b61      	ldr	r3, [pc, #388]	@ (8006a80 <HAL_RCC_OscConfig+0x280>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006902:	2b00      	cmp	r3, #0
 8006904:	d0f0      	beq.n	80068e8 <HAL_RCC_OscConfig+0xe8>
 8006906:	e014      	b.n	8006932 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006908:	f7fd ff82 	bl	8004810 <HAL_GetTick>
 800690c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800690e:	e008      	b.n	8006922 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006910:	f7fd ff7e 	bl	8004810 <HAL_GetTick>
 8006914:	4602      	mov	r2, r0
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	1ad3      	subs	r3, r2, r3
 800691a:	2b64      	cmp	r3, #100	@ 0x64
 800691c:	d901      	bls.n	8006922 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800691e:	2303      	movs	r3, #3
 8006920:	e20b      	b.n	8006d3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006922:	4b57      	ldr	r3, [pc, #348]	@ (8006a80 <HAL_RCC_OscConfig+0x280>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800692a:	2b00      	cmp	r3, #0
 800692c:	d1f0      	bne.n	8006910 <HAL_RCC_OscConfig+0x110>
 800692e:	e000      	b.n	8006932 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006930:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f003 0302 	and.w	r3, r3, #2
 800693a:	2b00      	cmp	r3, #0
 800693c:	d069      	beq.n	8006a12 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800693e:	4b50      	ldr	r3, [pc, #320]	@ (8006a80 <HAL_RCC_OscConfig+0x280>)
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	f003 030c 	and.w	r3, r3, #12
 8006946:	2b00      	cmp	r3, #0
 8006948:	d00b      	beq.n	8006962 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800694a:	4b4d      	ldr	r3, [pc, #308]	@ (8006a80 <HAL_RCC_OscConfig+0x280>)
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	f003 030c 	and.w	r3, r3, #12
 8006952:	2b08      	cmp	r3, #8
 8006954:	d11c      	bne.n	8006990 <HAL_RCC_OscConfig+0x190>
 8006956:	4b4a      	ldr	r3, [pc, #296]	@ (8006a80 <HAL_RCC_OscConfig+0x280>)
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800695e:	2b00      	cmp	r3, #0
 8006960:	d116      	bne.n	8006990 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006962:	4b47      	ldr	r3, [pc, #284]	@ (8006a80 <HAL_RCC_OscConfig+0x280>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f003 0302 	and.w	r3, r3, #2
 800696a:	2b00      	cmp	r3, #0
 800696c:	d005      	beq.n	800697a <HAL_RCC_OscConfig+0x17a>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	68db      	ldr	r3, [r3, #12]
 8006972:	2b01      	cmp	r3, #1
 8006974:	d001      	beq.n	800697a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006976:	2301      	movs	r3, #1
 8006978:	e1df      	b.n	8006d3a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800697a:	4b41      	ldr	r3, [pc, #260]	@ (8006a80 <HAL_RCC_OscConfig+0x280>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	691b      	ldr	r3, [r3, #16]
 8006986:	00db      	lsls	r3, r3, #3
 8006988:	493d      	ldr	r1, [pc, #244]	@ (8006a80 <HAL_RCC_OscConfig+0x280>)
 800698a:	4313      	orrs	r3, r2
 800698c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800698e:	e040      	b.n	8006a12 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	68db      	ldr	r3, [r3, #12]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d023      	beq.n	80069e0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006998:	4b39      	ldr	r3, [pc, #228]	@ (8006a80 <HAL_RCC_OscConfig+0x280>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a38      	ldr	r2, [pc, #224]	@ (8006a80 <HAL_RCC_OscConfig+0x280>)
 800699e:	f043 0301 	orr.w	r3, r3, #1
 80069a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069a4:	f7fd ff34 	bl	8004810 <HAL_GetTick>
 80069a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069aa:	e008      	b.n	80069be <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80069ac:	f7fd ff30 	bl	8004810 <HAL_GetTick>
 80069b0:	4602      	mov	r2, r0
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	1ad3      	subs	r3, r2, r3
 80069b6:	2b02      	cmp	r3, #2
 80069b8:	d901      	bls.n	80069be <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80069ba:	2303      	movs	r3, #3
 80069bc:	e1bd      	b.n	8006d3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069be:	4b30      	ldr	r3, [pc, #192]	@ (8006a80 <HAL_RCC_OscConfig+0x280>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f003 0302 	and.w	r3, r3, #2
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d0f0      	beq.n	80069ac <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069ca:	4b2d      	ldr	r3, [pc, #180]	@ (8006a80 <HAL_RCC_OscConfig+0x280>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	691b      	ldr	r3, [r3, #16]
 80069d6:	00db      	lsls	r3, r3, #3
 80069d8:	4929      	ldr	r1, [pc, #164]	@ (8006a80 <HAL_RCC_OscConfig+0x280>)
 80069da:	4313      	orrs	r3, r2
 80069dc:	600b      	str	r3, [r1, #0]
 80069de:	e018      	b.n	8006a12 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80069e0:	4b27      	ldr	r3, [pc, #156]	@ (8006a80 <HAL_RCC_OscConfig+0x280>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a26      	ldr	r2, [pc, #152]	@ (8006a80 <HAL_RCC_OscConfig+0x280>)
 80069e6:	f023 0301 	bic.w	r3, r3, #1
 80069ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069ec:	f7fd ff10 	bl	8004810 <HAL_GetTick>
 80069f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069f2:	e008      	b.n	8006a06 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80069f4:	f7fd ff0c 	bl	8004810 <HAL_GetTick>
 80069f8:	4602      	mov	r2, r0
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	1ad3      	subs	r3, r2, r3
 80069fe:	2b02      	cmp	r3, #2
 8006a00:	d901      	bls.n	8006a06 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006a02:	2303      	movs	r3, #3
 8006a04:	e199      	b.n	8006d3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a06:	4b1e      	ldr	r3, [pc, #120]	@ (8006a80 <HAL_RCC_OscConfig+0x280>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f003 0302 	and.w	r3, r3, #2
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d1f0      	bne.n	80069f4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f003 0308 	and.w	r3, r3, #8
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d038      	beq.n	8006a90 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	695b      	ldr	r3, [r3, #20]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d019      	beq.n	8006a5a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006a26:	4b16      	ldr	r3, [pc, #88]	@ (8006a80 <HAL_RCC_OscConfig+0x280>)
 8006a28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a2a:	4a15      	ldr	r2, [pc, #84]	@ (8006a80 <HAL_RCC_OscConfig+0x280>)
 8006a2c:	f043 0301 	orr.w	r3, r3, #1
 8006a30:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a32:	f7fd feed 	bl	8004810 <HAL_GetTick>
 8006a36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a38:	e008      	b.n	8006a4c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a3a:	f7fd fee9 	bl	8004810 <HAL_GetTick>
 8006a3e:	4602      	mov	r2, r0
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	1ad3      	subs	r3, r2, r3
 8006a44:	2b02      	cmp	r3, #2
 8006a46:	d901      	bls.n	8006a4c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006a48:	2303      	movs	r3, #3
 8006a4a:	e176      	b.n	8006d3a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a4c:	4b0c      	ldr	r3, [pc, #48]	@ (8006a80 <HAL_RCC_OscConfig+0x280>)
 8006a4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a50:	f003 0302 	and.w	r3, r3, #2
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d0f0      	beq.n	8006a3a <HAL_RCC_OscConfig+0x23a>
 8006a58:	e01a      	b.n	8006a90 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a5a:	4b09      	ldr	r3, [pc, #36]	@ (8006a80 <HAL_RCC_OscConfig+0x280>)
 8006a5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a5e:	4a08      	ldr	r2, [pc, #32]	@ (8006a80 <HAL_RCC_OscConfig+0x280>)
 8006a60:	f023 0301 	bic.w	r3, r3, #1
 8006a64:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a66:	f7fd fed3 	bl	8004810 <HAL_GetTick>
 8006a6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a6c:	e00a      	b.n	8006a84 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a6e:	f7fd fecf 	bl	8004810 <HAL_GetTick>
 8006a72:	4602      	mov	r2, r0
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	1ad3      	subs	r3, r2, r3
 8006a78:	2b02      	cmp	r3, #2
 8006a7a:	d903      	bls.n	8006a84 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006a7c:	2303      	movs	r3, #3
 8006a7e:	e15c      	b.n	8006d3a <HAL_RCC_OscConfig+0x53a>
 8006a80:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a84:	4b91      	ldr	r3, [pc, #580]	@ (8006ccc <HAL_RCC_OscConfig+0x4cc>)
 8006a86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a88:	f003 0302 	and.w	r3, r3, #2
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d1ee      	bne.n	8006a6e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f003 0304 	and.w	r3, r3, #4
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	f000 80a4 	beq.w	8006be6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a9e:	4b8b      	ldr	r3, [pc, #556]	@ (8006ccc <HAL_RCC_OscConfig+0x4cc>)
 8006aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d10d      	bne.n	8006ac6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006aaa:	4b88      	ldr	r3, [pc, #544]	@ (8006ccc <HAL_RCC_OscConfig+0x4cc>)
 8006aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aae:	4a87      	ldr	r2, [pc, #540]	@ (8006ccc <HAL_RCC_OscConfig+0x4cc>)
 8006ab0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ab4:	6413      	str	r3, [r2, #64]	@ 0x40
 8006ab6:	4b85      	ldr	r3, [pc, #532]	@ (8006ccc <HAL_RCC_OscConfig+0x4cc>)
 8006ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006abe:	60bb      	str	r3, [r7, #8]
 8006ac0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006ac6:	4b82      	ldr	r3, [pc, #520]	@ (8006cd0 <HAL_RCC_OscConfig+0x4d0>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d118      	bne.n	8006b04 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006ad2:	4b7f      	ldr	r3, [pc, #508]	@ (8006cd0 <HAL_RCC_OscConfig+0x4d0>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a7e      	ldr	r2, [pc, #504]	@ (8006cd0 <HAL_RCC_OscConfig+0x4d0>)
 8006ad8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006adc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ade:	f7fd fe97 	bl	8004810 <HAL_GetTick>
 8006ae2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006ae4:	e008      	b.n	8006af8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ae6:	f7fd fe93 	bl	8004810 <HAL_GetTick>
 8006aea:	4602      	mov	r2, r0
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	1ad3      	subs	r3, r2, r3
 8006af0:	2b64      	cmp	r3, #100	@ 0x64
 8006af2:	d901      	bls.n	8006af8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006af4:	2303      	movs	r3, #3
 8006af6:	e120      	b.n	8006d3a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006af8:	4b75      	ldr	r3, [pc, #468]	@ (8006cd0 <HAL_RCC_OscConfig+0x4d0>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d0f0      	beq.n	8006ae6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	d106      	bne.n	8006b1a <HAL_RCC_OscConfig+0x31a>
 8006b0c:	4b6f      	ldr	r3, [pc, #444]	@ (8006ccc <HAL_RCC_OscConfig+0x4cc>)
 8006b0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b10:	4a6e      	ldr	r2, [pc, #440]	@ (8006ccc <HAL_RCC_OscConfig+0x4cc>)
 8006b12:	f043 0301 	orr.w	r3, r3, #1
 8006b16:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b18:	e02d      	b.n	8006b76 <HAL_RCC_OscConfig+0x376>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	689b      	ldr	r3, [r3, #8]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d10c      	bne.n	8006b3c <HAL_RCC_OscConfig+0x33c>
 8006b22:	4b6a      	ldr	r3, [pc, #424]	@ (8006ccc <HAL_RCC_OscConfig+0x4cc>)
 8006b24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b26:	4a69      	ldr	r2, [pc, #420]	@ (8006ccc <HAL_RCC_OscConfig+0x4cc>)
 8006b28:	f023 0301 	bic.w	r3, r3, #1
 8006b2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b2e:	4b67      	ldr	r3, [pc, #412]	@ (8006ccc <HAL_RCC_OscConfig+0x4cc>)
 8006b30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b32:	4a66      	ldr	r2, [pc, #408]	@ (8006ccc <HAL_RCC_OscConfig+0x4cc>)
 8006b34:	f023 0304 	bic.w	r3, r3, #4
 8006b38:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b3a:	e01c      	b.n	8006b76 <HAL_RCC_OscConfig+0x376>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	2b05      	cmp	r3, #5
 8006b42:	d10c      	bne.n	8006b5e <HAL_RCC_OscConfig+0x35e>
 8006b44:	4b61      	ldr	r3, [pc, #388]	@ (8006ccc <HAL_RCC_OscConfig+0x4cc>)
 8006b46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b48:	4a60      	ldr	r2, [pc, #384]	@ (8006ccc <HAL_RCC_OscConfig+0x4cc>)
 8006b4a:	f043 0304 	orr.w	r3, r3, #4
 8006b4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b50:	4b5e      	ldr	r3, [pc, #376]	@ (8006ccc <HAL_RCC_OscConfig+0x4cc>)
 8006b52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b54:	4a5d      	ldr	r2, [pc, #372]	@ (8006ccc <HAL_RCC_OscConfig+0x4cc>)
 8006b56:	f043 0301 	orr.w	r3, r3, #1
 8006b5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b5c:	e00b      	b.n	8006b76 <HAL_RCC_OscConfig+0x376>
 8006b5e:	4b5b      	ldr	r3, [pc, #364]	@ (8006ccc <HAL_RCC_OscConfig+0x4cc>)
 8006b60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b62:	4a5a      	ldr	r2, [pc, #360]	@ (8006ccc <HAL_RCC_OscConfig+0x4cc>)
 8006b64:	f023 0301 	bic.w	r3, r3, #1
 8006b68:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b6a:	4b58      	ldr	r3, [pc, #352]	@ (8006ccc <HAL_RCC_OscConfig+0x4cc>)
 8006b6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b6e:	4a57      	ldr	r2, [pc, #348]	@ (8006ccc <HAL_RCC_OscConfig+0x4cc>)
 8006b70:	f023 0304 	bic.w	r3, r3, #4
 8006b74:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d015      	beq.n	8006baa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b7e:	f7fd fe47 	bl	8004810 <HAL_GetTick>
 8006b82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b84:	e00a      	b.n	8006b9c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b86:	f7fd fe43 	bl	8004810 <HAL_GetTick>
 8006b8a:	4602      	mov	r2, r0
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	1ad3      	subs	r3, r2, r3
 8006b90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d901      	bls.n	8006b9c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006b98:	2303      	movs	r3, #3
 8006b9a:	e0ce      	b.n	8006d3a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b9c:	4b4b      	ldr	r3, [pc, #300]	@ (8006ccc <HAL_RCC_OscConfig+0x4cc>)
 8006b9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ba0:	f003 0302 	and.w	r3, r3, #2
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d0ee      	beq.n	8006b86 <HAL_RCC_OscConfig+0x386>
 8006ba8:	e014      	b.n	8006bd4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006baa:	f7fd fe31 	bl	8004810 <HAL_GetTick>
 8006bae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006bb0:	e00a      	b.n	8006bc8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bb2:	f7fd fe2d 	bl	8004810 <HAL_GetTick>
 8006bb6:	4602      	mov	r2, r0
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	1ad3      	subs	r3, r2, r3
 8006bbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d901      	bls.n	8006bc8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006bc4:	2303      	movs	r3, #3
 8006bc6:	e0b8      	b.n	8006d3a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006bc8:	4b40      	ldr	r3, [pc, #256]	@ (8006ccc <HAL_RCC_OscConfig+0x4cc>)
 8006bca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bcc:	f003 0302 	and.w	r3, r3, #2
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d1ee      	bne.n	8006bb2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006bd4:	7dfb      	ldrb	r3, [r7, #23]
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	d105      	bne.n	8006be6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006bda:	4b3c      	ldr	r3, [pc, #240]	@ (8006ccc <HAL_RCC_OscConfig+0x4cc>)
 8006bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bde:	4a3b      	ldr	r2, [pc, #236]	@ (8006ccc <HAL_RCC_OscConfig+0x4cc>)
 8006be0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006be4:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	699b      	ldr	r3, [r3, #24]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	f000 80a4 	beq.w	8006d38 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006bf0:	4b36      	ldr	r3, [pc, #216]	@ (8006ccc <HAL_RCC_OscConfig+0x4cc>)
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	f003 030c 	and.w	r3, r3, #12
 8006bf8:	2b08      	cmp	r3, #8
 8006bfa:	d06b      	beq.n	8006cd4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	699b      	ldr	r3, [r3, #24]
 8006c00:	2b02      	cmp	r3, #2
 8006c02:	d149      	bne.n	8006c98 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c04:	4b31      	ldr	r3, [pc, #196]	@ (8006ccc <HAL_RCC_OscConfig+0x4cc>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a30      	ldr	r2, [pc, #192]	@ (8006ccc <HAL_RCC_OscConfig+0x4cc>)
 8006c0a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006c0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c10:	f7fd fdfe 	bl	8004810 <HAL_GetTick>
 8006c14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c16:	e008      	b.n	8006c2a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c18:	f7fd fdfa 	bl	8004810 <HAL_GetTick>
 8006c1c:	4602      	mov	r2, r0
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	1ad3      	subs	r3, r2, r3
 8006c22:	2b02      	cmp	r3, #2
 8006c24:	d901      	bls.n	8006c2a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006c26:	2303      	movs	r3, #3
 8006c28:	e087      	b.n	8006d3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c2a:	4b28      	ldr	r3, [pc, #160]	@ (8006ccc <HAL_RCC_OscConfig+0x4cc>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d1f0      	bne.n	8006c18 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	69da      	ldr	r2, [r3, #28]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6a1b      	ldr	r3, [r3, #32]
 8006c3e:	431a      	orrs	r2, r3
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c44:	019b      	lsls	r3, r3, #6
 8006c46:	431a      	orrs	r2, r3
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c4c:	085b      	lsrs	r3, r3, #1
 8006c4e:	3b01      	subs	r3, #1
 8006c50:	041b      	lsls	r3, r3, #16
 8006c52:	431a      	orrs	r2, r3
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c58:	061b      	lsls	r3, r3, #24
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	4a1b      	ldr	r2, [pc, #108]	@ (8006ccc <HAL_RCC_OscConfig+0x4cc>)
 8006c5e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006c62:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c64:	4b19      	ldr	r3, [pc, #100]	@ (8006ccc <HAL_RCC_OscConfig+0x4cc>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a18      	ldr	r2, [pc, #96]	@ (8006ccc <HAL_RCC_OscConfig+0x4cc>)
 8006c6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006c6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c70:	f7fd fdce 	bl	8004810 <HAL_GetTick>
 8006c74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c76:	e008      	b.n	8006c8a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c78:	f7fd fdca 	bl	8004810 <HAL_GetTick>
 8006c7c:	4602      	mov	r2, r0
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	1ad3      	subs	r3, r2, r3
 8006c82:	2b02      	cmp	r3, #2
 8006c84:	d901      	bls.n	8006c8a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006c86:	2303      	movs	r3, #3
 8006c88:	e057      	b.n	8006d3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c8a:	4b10      	ldr	r3, [pc, #64]	@ (8006ccc <HAL_RCC_OscConfig+0x4cc>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d0f0      	beq.n	8006c78 <HAL_RCC_OscConfig+0x478>
 8006c96:	e04f      	b.n	8006d38 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c98:	4b0c      	ldr	r3, [pc, #48]	@ (8006ccc <HAL_RCC_OscConfig+0x4cc>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a0b      	ldr	r2, [pc, #44]	@ (8006ccc <HAL_RCC_OscConfig+0x4cc>)
 8006c9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006ca2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ca4:	f7fd fdb4 	bl	8004810 <HAL_GetTick>
 8006ca8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006caa:	e008      	b.n	8006cbe <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006cac:	f7fd fdb0 	bl	8004810 <HAL_GetTick>
 8006cb0:	4602      	mov	r2, r0
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	1ad3      	subs	r3, r2, r3
 8006cb6:	2b02      	cmp	r3, #2
 8006cb8:	d901      	bls.n	8006cbe <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8006cba:	2303      	movs	r3, #3
 8006cbc:	e03d      	b.n	8006d3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cbe:	4b03      	ldr	r3, [pc, #12]	@ (8006ccc <HAL_RCC_OscConfig+0x4cc>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d1f0      	bne.n	8006cac <HAL_RCC_OscConfig+0x4ac>
 8006cca:	e035      	b.n	8006d38 <HAL_RCC_OscConfig+0x538>
 8006ccc:	40023800 	.word	0x40023800
 8006cd0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006cd4:	4b1b      	ldr	r3, [pc, #108]	@ (8006d44 <HAL_RCC_OscConfig+0x544>)
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	699b      	ldr	r3, [r3, #24]
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d028      	beq.n	8006d34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d121      	bne.n	8006d34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cfa:	429a      	cmp	r2, r3
 8006cfc:	d11a      	bne.n	8006d34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006cfe:	68fa      	ldr	r2, [r7, #12]
 8006d00:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006d04:	4013      	ands	r3, r2
 8006d06:	687a      	ldr	r2, [r7, #4]
 8006d08:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006d0a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d111      	bne.n	8006d34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d1a:	085b      	lsrs	r3, r3, #1
 8006d1c:	3b01      	subs	r3, #1
 8006d1e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d107      	bne.n	8006d34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d2e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d001      	beq.n	8006d38 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006d34:	2301      	movs	r3, #1
 8006d36:	e000      	b.n	8006d3a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006d38:	2300      	movs	r3, #0
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3718      	adds	r7, #24
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}
 8006d42:	bf00      	nop
 8006d44:	40023800 	.word	0x40023800

08006d48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b084      	sub	sp, #16
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006d52:	2300      	movs	r3, #0
 8006d54:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d101      	bne.n	8006d60 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	e0d0      	b.n	8006f02 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006d60:	4b6a      	ldr	r3, [pc, #424]	@ (8006f0c <HAL_RCC_ClockConfig+0x1c4>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f003 030f 	and.w	r3, r3, #15
 8006d68:	683a      	ldr	r2, [r7, #0]
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	d910      	bls.n	8006d90 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d6e:	4b67      	ldr	r3, [pc, #412]	@ (8006f0c <HAL_RCC_ClockConfig+0x1c4>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f023 020f 	bic.w	r2, r3, #15
 8006d76:	4965      	ldr	r1, [pc, #404]	@ (8006f0c <HAL_RCC_ClockConfig+0x1c4>)
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d7e:	4b63      	ldr	r3, [pc, #396]	@ (8006f0c <HAL_RCC_ClockConfig+0x1c4>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f003 030f 	and.w	r3, r3, #15
 8006d86:	683a      	ldr	r2, [r7, #0]
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	d001      	beq.n	8006d90 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	e0b8      	b.n	8006f02 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f003 0302 	and.w	r3, r3, #2
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d020      	beq.n	8006dde <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f003 0304 	and.w	r3, r3, #4
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d005      	beq.n	8006db4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006da8:	4b59      	ldr	r3, [pc, #356]	@ (8006f10 <HAL_RCC_ClockConfig+0x1c8>)
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	4a58      	ldr	r2, [pc, #352]	@ (8006f10 <HAL_RCC_ClockConfig+0x1c8>)
 8006dae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006db2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f003 0308 	and.w	r3, r3, #8
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d005      	beq.n	8006dcc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006dc0:	4b53      	ldr	r3, [pc, #332]	@ (8006f10 <HAL_RCC_ClockConfig+0x1c8>)
 8006dc2:	689b      	ldr	r3, [r3, #8]
 8006dc4:	4a52      	ldr	r2, [pc, #328]	@ (8006f10 <HAL_RCC_ClockConfig+0x1c8>)
 8006dc6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006dca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006dcc:	4b50      	ldr	r3, [pc, #320]	@ (8006f10 <HAL_RCC_ClockConfig+0x1c8>)
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	689b      	ldr	r3, [r3, #8]
 8006dd8:	494d      	ldr	r1, [pc, #308]	@ (8006f10 <HAL_RCC_ClockConfig+0x1c8>)
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f003 0301 	and.w	r3, r3, #1
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d040      	beq.n	8006e6c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	2b01      	cmp	r3, #1
 8006df0:	d107      	bne.n	8006e02 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006df2:	4b47      	ldr	r3, [pc, #284]	@ (8006f10 <HAL_RCC_ClockConfig+0x1c8>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d115      	bne.n	8006e2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	e07f      	b.n	8006f02 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	2b02      	cmp	r3, #2
 8006e08:	d107      	bne.n	8006e1a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e0a:	4b41      	ldr	r3, [pc, #260]	@ (8006f10 <HAL_RCC_ClockConfig+0x1c8>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d109      	bne.n	8006e2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006e16:	2301      	movs	r3, #1
 8006e18:	e073      	b.n	8006f02 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e1a:	4b3d      	ldr	r3, [pc, #244]	@ (8006f10 <HAL_RCC_ClockConfig+0x1c8>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f003 0302 	and.w	r3, r3, #2
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d101      	bne.n	8006e2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006e26:	2301      	movs	r3, #1
 8006e28:	e06b      	b.n	8006f02 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006e2a:	4b39      	ldr	r3, [pc, #228]	@ (8006f10 <HAL_RCC_ClockConfig+0x1c8>)
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	f023 0203 	bic.w	r2, r3, #3
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	4936      	ldr	r1, [pc, #216]	@ (8006f10 <HAL_RCC_ClockConfig+0x1c8>)
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e3c:	f7fd fce8 	bl	8004810 <HAL_GetTick>
 8006e40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e42:	e00a      	b.n	8006e5a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e44:	f7fd fce4 	bl	8004810 <HAL_GetTick>
 8006e48:	4602      	mov	r2, r0
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	1ad3      	subs	r3, r2, r3
 8006e4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d901      	bls.n	8006e5a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006e56:	2303      	movs	r3, #3
 8006e58:	e053      	b.n	8006f02 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e5a:	4b2d      	ldr	r3, [pc, #180]	@ (8006f10 <HAL_RCC_ClockConfig+0x1c8>)
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	f003 020c 	and.w	r2, r3, #12
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	009b      	lsls	r3, r3, #2
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d1eb      	bne.n	8006e44 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006e6c:	4b27      	ldr	r3, [pc, #156]	@ (8006f0c <HAL_RCC_ClockConfig+0x1c4>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f003 030f 	and.w	r3, r3, #15
 8006e74:	683a      	ldr	r2, [r7, #0]
 8006e76:	429a      	cmp	r2, r3
 8006e78:	d210      	bcs.n	8006e9c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e7a:	4b24      	ldr	r3, [pc, #144]	@ (8006f0c <HAL_RCC_ClockConfig+0x1c4>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f023 020f 	bic.w	r2, r3, #15
 8006e82:	4922      	ldr	r1, [pc, #136]	@ (8006f0c <HAL_RCC_ClockConfig+0x1c4>)
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	4313      	orrs	r3, r2
 8006e88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e8a:	4b20      	ldr	r3, [pc, #128]	@ (8006f0c <HAL_RCC_ClockConfig+0x1c4>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f003 030f 	and.w	r3, r3, #15
 8006e92:	683a      	ldr	r2, [r7, #0]
 8006e94:	429a      	cmp	r2, r3
 8006e96:	d001      	beq.n	8006e9c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006e98:	2301      	movs	r3, #1
 8006e9a:	e032      	b.n	8006f02 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f003 0304 	and.w	r3, r3, #4
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d008      	beq.n	8006eba <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ea8:	4b19      	ldr	r3, [pc, #100]	@ (8006f10 <HAL_RCC_ClockConfig+0x1c8>)
 8006eaa:	689b      	ldr	r3, [r3, #8]
 8006eac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	68db      	ldr	r3, [r3, #12]
 8006eb4:	4916      	ldr	r1, [pc, #88]	@ (8006f10 <HAL_RCC_ClockConfig+0x1c8>)
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f003 0308 	and.w	r3, r3, #8
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d009      	beq.n	8006eda <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006ec6:	4b12      	ldr	r3, [pc, #72]	@ (8006f10 <HAL_RCC_ClockConfig+0x1c8>)
 8006ec8:	689b      	ldr	r3, [r3, #8]
 8006eca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	691b      	ldr	r3, [r3, #16]
 8006ed2:	00db      	lsls	r3, r3, #3
 8006ed4:	490e      	ldr	r1, [pc, #56]	@ (8006f10 <HAL_RCC_ClockConfig+0x1c8>)
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006eda:	f000 f821 	bl	8006f20 <HAL_RCC_GetSysClockFreq>
 8006ede:	4602      	mov	r2, r0
 8006ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8006f10 <HAL_RCC_ClockConfig+0x1c8>)
 8006ee2:	689b      	ldr	r3, [r3, #8]
 8006ee4:	091b      	lsrs	r3, r3, #4
 8006ee6:	f003 030f 	and.w	r3, r3, #15
 8006eea:	490a      	ldr	r1, [pc, #40]	@ (8006f14 <HAL_RCC_ClockConfig+0x1cc>)
 8006eec:	5ccb      	ldrb	r3, [r1, r3]
 8006eee:	fa22 f303 	lsr.w	r3, r2, r3
 8006ef2:	4a09      	ldr	r2, [pc, #36]	@ (8006f18 <HAL_RCC_ClockConfig+0x1d0>)
 8006ef4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006ef6:	4b09      	ldr	r3, [pc, #36]	@ (8006f1c <HAL_RCC_ClockConfig+0x1d4>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4618      	mov	r0, r3
 8006efc:	f7fd fc44 	bl	8004788 <HAL_InitTick>

  return HAL_OK;
 8006f00:	2300      	movs	r3, #0
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3710      	adds	r7, #16
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}
 8006f0a:	bf00      	nop
 8006f0c:	40023c00 	.word	0x40023c00
 8006f10:	40023800 	.word	0x40023800
 8006f14:	08018c28 	.word	0x08018c28
 8006f18:	2000000c 	.word	0x2000000c
 8006f1c:	200002d8 	.word	0x200002d8

08006f20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f24:	b094      	sub	sp, #80	@ 0x50
 8006f26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f30:	2300      	movs	r3, #0
 8006f32:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8006f34:	2300      	movs	r3, #0
 8006f36:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006f38:	4b79      	ldr	r3, [pc, #484]	@ (8007120 <HAL_RCC_GetSysClockFreq+0x200>)
 8006f3a:	689b      	ldr	r3, [r3, #8]
 8006f3c:	f003 030c 	and.w	r3, r3, #12
 8006f40:	2b08      	cmp	r3, #8
 8006f42:	d00d      	beq.n	8006f60 <HAL_RCC_GetSysClockFreq+0x40>
 8006f44:	2b08      	cmp	r3, #8
 8006f46:	f200 80e1 	bhi.w	800710c <HAL_RCC_GetSysClockFreq+0x1ec>
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d002      	beq.n	8006f54 <HAL_RCC_GetSysClockFreq+0x34>
 8006f4e:	2b04      	cmp	r3, #4
 8006f50:	d003      	beq.n	8006f5a <HAL_RCC_GetSysClockFreq+0x3a>
 8006f52:	e0db      	b.n	800710c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006f54:	4b73      	ldr	r3, [pc, #460]	@ (8007124 <HAL_RCC_GetSysClockFreq+0x204>)
 8006f56:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006f58:	e0db      	b.n	8007112 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006f5a:	4b73      	ldr	r3, [pc, #460]	@ (8007128 <HAL_RCC_GetSysClockFreq+0x208>)
 8006f5c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006f5e:	e0d8      	b.n	8007112 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006f60:	4b6f      	ldr	r3, [pc, #444]	@ (8007120 <HAL_RCC_GetSysClockFreq+0x200>)
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006f68:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006f6a:	4b6d      	ldr	r3, [pc, #436]	@ (8007120 <HAL_RCC_GetSysClockFreq+0x200>)
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d063      	beq.n	800703e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f76:	4b6a      	ldr	r3, [pc, #424]	@ (8007120 <HAL_RCC_GetSysClockFreq+0x200>)
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	099b      	lsrs	r3, r3, #6
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006f80:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006f82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f88:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f8e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006f92:	4622      	mov	r2, r4
 8006f94:	462b      	mov	r3, r5
 8006f96:	f04f 0000 	mov.w	r0, #0
 8006f9a:	f04f 0100 	mov.w	r1, #0
 8006f9e:	0159      	lsls	r1, r3, #5
 8006fa0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006fa4:	0150      	lsls	r0, r2, #5
 8006fa6:	4602      	mov	r2, r0
 8006fa8:	460b      	mov	r3, r1
 8006faa:	4621      	mov	r1, r4
 8006fac:	1a51      	subs	r1, r2, r1
 8006fae:	6139      	str	r1, [r7, #16]
 8006fb0:	4629      	mov	r1, r5
 8006fb2:	eb63 0301 	sbc.w	r3, r3, r1
 8006fb6:	617b      	str	r3, [r7, #20]
 8006fb8:	f04f 0200 	mov.w	r2, #0
 8006fbc:	f04f 0300 	mov.w	r3, #0
 8006fc0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006fc4:	4659      	mov	r1, fp
 8006fc6:	018b      	lsls	r3, r1, #6
 8006fc8:	4651      	mov	r1, sl
 8006fca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006fce:	4651      	mov	r1, sl
 8006fd0:	018a      	lsls	r2, r1, #6
 8006fd2:	4651      	mov	r1, sl
 8006fd4:	ebb2 0801 	subs.w	r8, r2, r1
 8006fd8:	4659      	mov	r1, fp
 8006fda:	eb63 0901 	sbc.w	r9, r3, r1
 8006fde:	f04f 0200 	mov.w	r2, #0
 8006fe2:	f04f 0300 	mov.w	r3, #0
 8006fe6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006fea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006fee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006ff2:	4690      	mov	r8, r2
 8006ff4:	4699      	mov	r9, r3
 8006ff6:	4623      	mov	r3, r4
 8006ff8:	eb18 0303 	adds.w	r3, r8, r3
 8006ffc:	60bb      	str	r3, [r7, #8]
 8006ffe:	462b      	mov	r3, r5
 8007000:	eb49 0303 	adc.w	r3, r9, r3
 8007004:	60fb      	str	r3, [r7, #12]
 8007006:	f04f 0200 	mov.w	r2, #0
 800700a:	f04f 0300 	mov.w	r3, #0
 800700e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007012:	4629      	mov	r1, r5
 8007014:	024b      	lsls	r3, r1, #9
 8007016:	4621      	mov	r1, r4
 8007018:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800701c:	4621      	mov	r1, r4
 800701e:	024a      	lsls	r2, r1, #9
 8007020:	4610      	mov	r0, r2
 8007022:	4619      	mov	r1, r3
 8007024:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007026:	2200      	movs	r2, #0
 8007028:	62bb      	str	r3, [r7, #40]	@ 0x28
 800702a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800702c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007030:	f7f9 fe5a 	bl	8000ce8 <__aeabi_uldivmod>
 8007034:	4602      	mov	r2, r0
 8007036:	460b      	mov	r3, r1
 8007038:	4613      	mov	r3, r2
 800703a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800703c:	e058      	b.n	80070f0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800703e:	4b38      	ldr	r3, [pc, #224]	@ (8007120 <HAL_RCC_GetSysClockFreq+0x200>)
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	099b      	lsrs	r3, r3, #6
 8007044:	2200      	movs	r2, #0
 8007046:	4618      	mov	r0, r3
 8007048:	4611      	mov	r1, r2
 800704a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800704e:	623b      	str	r3, [r7, #32]
 8007050:	2300      	movs	r3, #0
 8007052:	627b      	str	r3, [r7, #36]	@ 0x24
 8007054:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007058:	4642      	mov	r2, r8
 800705a:	464b      	mov	r3, r9
 800705c:	f04f 0000 	mov.w	r0, #0
 8007060:	f04f 0100 	mov.w	r1, #0
 8007064:	0159      	lsls	r1, r3, #5
 8007066:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800706a:	0150      	lsls	r0, r2, #5
 800706c:	4602      	mov	r2, r0
 800706e:	460b      	mov	r3, r1
 8007070:	4641      	mov	r1, r8
 8007072:	ebb2 0a01 	subs.w	sl, r2, r1
 8007076:	4649      	mov	r1, r9
 8007078:	eb63 0b01 	sbc.w	fp, r3, r1
 800707c:	f04f 0200 	mov.w	r2, #0
 8007080:	f04f 0300 	mov.w	r3, #0
 8007084:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007088:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800708c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007090:	ebb2 040a 	subs.w	r4, r2, sl
 8007094:	eb63 050b 	sbc.w	r5, r3, fp
 8007098:	f04f 0200 	mov.w	r2, #0
 800709c:	f04f 0300 	mov.w	r3, #0
 80070a0:	00eb      	lsls	r3, r5, #3
 80070a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80070a6:	00e2      	lsls	r2, r4, #3
 80070a8:	4614      	mov	r4, r2
 80070aa:	461d      	mov	r5, r3
 80070ac:	4643      	mov	r3, r8
 80070ae:	18e3      	adds	r3, r4, r3
 80070b0:	603b      	str	r3, [r7, #0]
 80070b2:	464b      	mov	r3, r9
 80070b4:	eb45 0303 	adc.w	r3, r5, r3
 80070b8:	607b      	str	r3, [r7, #4]
 80070ba:	f04f 0200 	mov.w	r2, #0
 80070be:	f04f 0300 	mov.w	r3, #0
 80070c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80070c6:	4629      	mov	r1, r5
 80070c8:	028b      	lsls	r3, r1, #10
 80070ca:	4621      	mov	r1, r4
 80070cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80070d0:	4621      	mov	r1, r4
 80070d2:	028a      	lsls	r2, r1, #10
 80070d4:	4610      	mov	r0, r2
 80070d6:	4619      	mov	r1, r3
 80070d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80070da:	2200      	movs	r2, #0
 80070dc:	61bb      	str	r3, [r7, #24]
 80070de:	61fa      	str	r2, [r7, #28]
 80070e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80070e4:	f7f9 fe00 	bl	8000ce8 <__aeabi_uldivmod>
 80070e8:	4602      	mov	r2, r0
 80070ea:	460b      	mov	r3, r1
 80070ec:	4613      	mov	r3, r2
 80070ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80070f0:	4b0b      	ldr	r3, [pc, #44]	@ (8007120 <HAL_RCC_GetSysClockFreq+0x200>)
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	0c1b      	lsrs	r3, r3, #16
 80070f6:	f003 0303 	and.w	r3, r3, #3
 80070fa:	3301      	adds	r3, #1
 80070fc:	005b      	lsls	r3, r3, #1
 80070fe:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8007100:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007102:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007104:	fbb2 f3f3 	udiv	r3, r2, r3
 8007108:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800710a:	e002      	b.n	8007112 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800710c:	4b05      	ldr	r3, [pc, #20]	@ (8007124 <HAL_RCC_GetSysClockFreq+0x204>)
 800710e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007110:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007112:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007114:	4618      	mov	r0, r3
 8007116:	3750      	adds	r7, #80	@ 0x50
 8007118:	46bd      	mov	sp, r7
 800711a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800711e:	bf00      	nop
 8007120:	40023800 	.word	0x40023800
 8007124:	00f42400 	.word	0x00f42400
 8007128:	007a1200 	.word	0x007a1200

0800712c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800712c:	b480      	push	{r7}
 800712e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007130:	4b03      	ldr	r3, [pc, #12]	@ (8007140 <HAL_RCC_GetHCLKFreq+0x14>)
 8007132:	681b      	ldr	r3, [r3, #0]
}
 8007134:	4618      	mov	r0, r3
 8007136:	46bd      	mov	sp, r7
 8007138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713c:	4770      	bx	lr
 800713e:	bf00      	nop
 8007140:	2000000c 	.word	0x2000000c

08007144 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007148:	f7ff fff0 	bl	800712c <HAL_RCC_GetHCLKFreq>
 800714c:	4602      	mov	r2, r0
 800714e:	4b05      	ldr	r3, [pc, #20]	@ (8007164 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007150:	689b      	ldr	r3, [r3, #8]
 8007152:	0a9b      	lsrs	r3, r3, #10
 8007154:	f003 0307 	and.w	r3, r3, #7
 8007158:	4903      	ldr	r1, [pc, #12]	@ (8007168 <HAL_RCC_GetPCLK1Freq+0x24>)
 800715a:	5ccb      	ldrb	r3, [r1, r3]
 800715c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007160:	4618      	mov	r0, r3
 8007162:	bd80      	pop	{r7, pc}
 8007164:	40023800 	.word	0x40023800
 8007168:	08018c38 	.word	0x08018c38

0800716c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007170:	f7ff ffdc 	bl	800712c <HAL_RCC_GetHCLKFreq>
 8007174:	4602      	mov	r2, r0
 8007176:	4b05      	ldr	r3, [pc, #20]	@ (800718c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007178:	689b      	ldr	r3, [r3, #8]
 800717a:	0b5b      	lsrs	r3, r3, #13
 800717c:	f003 0307 	and.w	r3, r3, #7
 8007180:	4903      	ldr	r1, [pc, #12]	@ (8007190 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007182:	5ccb      	ldrb	r3, [r1, r3]
 8007184:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007188:	4618      	mov	r0, r3
 800718a:	bd80      	pop	{r7, pc}
 800718c:	40023800 	.word	0x40023800
 8007190:	08018c38 	.word	0x08018c38

08007194 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b088      	sub	sp, #32
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800719c:	2300      	movs	r3, #0
 800719e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80071a0:	2300      	movs	r3, #0
 80071a2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80071a4:	2300      	movs	r3, #0
 80071a6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80071a8:	2300      	movs	r3, #0
 80071aa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80071ac:	2300      	movs	r3, #0
 80071ae:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f003 0301 	and.w	r3, r3, #1
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d012      	beq.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80071bc:	4b69      	ldr	r3, [pc, #420]	@ (8007364 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071be:	689b      	ldr	r3, [r3, #8]
 80071c0:	4a68      	ldr	r2, [pc, #416]	@ (8007364 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071c2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80071c6:	6093      	str	r3, [r2, #8]
 80071c8:	4b66      	ldr	r3, [pc, #408]	@ (8007364 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071ca:	689a      	ldr	r2, [r3, #8]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071d0:	4964      	ldr	r1, [pc, #400]	@ (8007364 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071d2:	4313      	orrs	r3, r2
 80071d4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d101      	bne.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80071de:	2301      	movs	r3, #1
 80071e0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d017      	beq.n	800721e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80071ee:	4b5d      	ldr	r3, [pc, #372]	@ (8007364 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80071f4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071fc:	4959      	ldr	r1, [pc, #356]	@ (8007364 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071fe:	4313      	orrs	r3, r2
 8007200:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007208:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800720c:	d101      	bne.n	8007212 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800720e:	2301      	movs	r3, #1
 8007210:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007216:	2b00      	cmp	r3, #0
 8007218:	d101      	bne.n	800721e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800721a:	2301      	movs	r3, #1
 800721c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007226:	2b00      	cmp	r3, #0
 8007228:	d017      	beq.n	800725a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800722a:	4b4e      	ldr	r3, [pc, #312]	@ (8007364 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800722c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007230:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007238:	494a      	ldr	r1, [pc, #296]	@ (8007364 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800723a:	4313      	orrs	r3, r2
 800723c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007244:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007248:	d101      	bne.n	800724e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800724a:	2301      	movs	r3, #1
 800724c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007252:	2b00      	cmp	r3, #0
 8007254:	d101      	bne.n	800725a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007256:	2301      	movs	r3, #1
 8007258:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007262:	2b00      	cmp	r3, #0
 8007264:	d001      	beq.n	800726a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007266:	2301      	movs	r3, #1
 8007268:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f003 0320 	and.w	r3, r3, #32
 8007272:	2b00      	cmp	r3, #0
 8007274:	f000 808b 	beq.w	800738e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007278:	4b3a      	ldr	r3, [pc, #232]	@ (8007364 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800727a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800727c:	4a39      	ldr	r2, [pc, #228]	@ (8007364 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800727e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007282:	6413      	str	r3, [r2, #64]	@ 0x40
 8007284:	4b37      	ldr	r3, [pc, #220]	@ (8007364 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007288:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800728c:	60bb      	str	r3, [r7, #8]
 800728e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007290:	4b35      	ldr	r3, [pc, #212]	@ (8007368 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a34      	ldr	r2, [pc, #208]	@ (8007368 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007296:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800729a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800729c:	f7fd fab8 	bl	8004810 <HAL_GetTick>
 80072a0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80072a2:	e008      	b.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072a4:	f7fd fab4 	bl	8004810 <HAL_GetTick>
 80072a8:	4602      	mov	r2, r0
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	1ad3      	subs	r3, r2, r3
 80072ae:	2b64      	cmp	r3, #100	@ 0x64
 80072b0:	d901      	bls.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80072b2:	2303      	movs	r3, #3
 80072b4:	e357      	b.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80072b6:	4b2c      	ldr	r3, [pc, #176]	@ (8007368 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d0f0      	beq.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80072c2:	4b28      	ldr	r3, [pc, #160]	@ (8007364 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80072ca:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d035      	beq.n	800733e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80072da:	693a      	ldr	r2, [r7, #16]
 80072dc:	429a      	cmp	r2, r3
 80072de:	d02e      	beq.n	800733e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80072e0:	4b20      	ldr	r3, [pc, #128]	@ (8007364 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80072e8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80072ea:	4b1e      	ldr	r3, [pc, #120]	@ (8007364 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072ee:	4a1d      	ldr	r2, [pc, #116]	@ (8007364 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80072f4:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80072f6:	4b1b      	ldr	r3, [pc, #108]	@ (8007364 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072fa:	4a1a      	ldr	r2, [pc, #104]	@ (8007364 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007300:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007302:	4a18      	ldr	r2, [pc, #96]	@ (8007364 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007308:	4b16      	ldr	r3, [pc, #88]	@ (8007364 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800730a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800730c:	f003 0301 	and.w	r3, r3, #1
 8007310:	2b01      	cmp	r3, #1
 8007312:	d114      	bne.n	800733e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007314:	f7fd fa7c 	bl	8004810 <HAL_GetTick>
 8007318:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800731a:	e00a      	b.n	8007332 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800731c:	f7fd fa78 	bl	8004810 <HAL_GetTick>
 8007320:	4602      	mov	r2, r0
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	1ad3      	subs	r3, r2, r3
 8007326:	f241 3288 	movw	r2, #5000	@ 0x1388
 800732a:	4293      	cmp	r3, r2
 800732c:	d901      	bls.n	8007332 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800732e:	2303      	movs	r3, #3
 8007330:	e319      	b.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007332:	4b0c      	ldr	r3, [pc, #48]	@ (8007364 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007334:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007336:	f003 0302 	and.w	r3, r3, #2
 800733a:	2b00      	cmp	r3, #0
 800733c:	d0ee      	beq.n	800731c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007342:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007346:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800734a:	d111      	bne.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800734c:	4b05      	ldr	r3, [pc, #20]	@ (8007364 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800734e:	689b      	ldr	r3, [r3, #8]
 8007350:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8007358:	4b04      	ldr	r3, [pc, #16]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800735a:	400b      	ands	r3, r1
 800735c:	4901      	ldr	r1, [pc, #4]	@ (8007364 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800735e:	4313      	orrs	r3, r2
 8007360:	608b      	str	r3, [r1, #8]
 8007362:	e00b      	b.n	800737c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007364:	40023800 	.word	0x40023800
 8007368:	40007000 	.word	0x40007000
 800736c:	0ffffcff 	.word	0x0ffffcff
 8007370:	4baa      	ldr	r3, [pc, #680]	@ (800761c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007372:	689b      	ldr	r3, [r3, #8]
 8007374:	4aa9      	ldr	r2, [pc, #676]	@ (800761c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007376:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800737a:	6093      	str	r3, [r2, #8]
 800737c:	4ba7      	ldr	r3, [pc, #668]	@ (800761c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800737e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007384:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007388:	49a4      	ldr	r1, [pc, #656]	@ (800761c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800738a:	4313      	orrs	r3, r2
 800738c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f003 0310 	and.w	r3, r3, #16
 8007396:	2b00      	cmp	r3, #0
 8007398:	d010      	beq.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800739a:	4ba0      	ldr	r3, [pc, #640]	@ (800761c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800739c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80073a0:	4a9e      	ldr	r2, [pc, #632]	@ (800761c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80073a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80073a6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80073aa:	4b9c      	ldr	r3, [pc, #624]	@ (800761c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80073ac:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073b4:	4999      	ldr	r1, [pc, #612]	@ (800761c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80073b6:	4313      	orrs	r3, r2
 80073b8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d00a      	beq.n	80073de <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80073c8:	4b94      	ldr	r3, [pc, #592]	@ (800761c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80073ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073ce:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80073d6:	4991      	ldr	r1, [pc, #580]	@ (800761c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80073d8:	4313      	orrs	r3, r2
 80073da:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d00a      	beq.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80073ea:	4b8c      	ldr	r3, [pc, #560]	@ (800761c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80073ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073f0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80073f8:	4988      	ldr	r1, [pc, #544]	@ (800761c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80073fa:	4313      	orrs	r3, r2
 80073fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007408:	2b00      	cmp	r3, #0
 800740a:	d00a      	beq.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800740c:	4b83      	ldr	r3, [pc, #524]	@ (800761c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800740e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007412:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800741a:	4980      	ldr	r1, [pc, #512]	@ (800761c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800741c:	4313      	orrs	r3, r2
 800741e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800742a:	2b00      	cmp	r3, #0
 800742c:	d00a      	beq.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800742e:	4b7b      	ldr	r3, [pc, #492]	@ (800761c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007430:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007434:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800743c:	4977      	ldr	r1, [pc, #476]	@ (800761c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800743e:	4313      	orrs	r3, r2
 8007440:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800744c:	2b00      	cmp	r3, #0
 800744e:	d00a      	beq.n	8007466 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007450:	4b72      	ldr	r3, [pc, #456]	@ (800761c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007452:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007456:	f023 0203 	bic.w	r2, r3, #3
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800745e:	496f      	ldr	r1, [pc, #444]	@ (800761c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007460:	4313      	orrs	r3, r2
 8007462:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800746e:	2b00      	cmp	r3, #0
 8007470:	d00a      	beq.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007472:	4b6a      	ldr	r3, [pc, #424]	@ (800761c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007474:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007478:	f023 020c 	bic.w	r2, r3, #12
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007480:	4966      	ldr	r1, [pc, #408]	@ (800761c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007482:	4313      	orrs	r3, r2
 8007484:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007490:	2b00      	cmp	r3, #0
 8007492:	d00a      	beq.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007494:	4b61      	ldr	r3, [pc, #388]	@ (800761c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007496:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800749a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074a2:	495e      	ldr	r1, [pc, #376]	@ (800761c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074a4:	4313      	orrs	r3, r2
 80074a6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d00a      	beq.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80074b6:	4b59      	ldr	r3, [pc, #356]	@ (800761c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074bc:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074c4:	4955      	ldr	r1, [pc, #340]	@ (800761c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074c6:	4313      	orrs	r3, r2
 80074c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d00a      	beq.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80074d8:	4b50      	ldr	r3, [pc, #320]	@ (800761c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074de:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074e6:	494d      	ldr	r1, [pc, #308]	@ (800761c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074e8:	4313      	orrs	r3, r2
 80074ea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d00a      	beq.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80074fa:	4b48      	ldr	r3, [pc, #288]	@ (800761c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007500:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007508:	4944      	ldr	r1, [pc, #272]	@ (800761c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800750a:	4313      	orrs	r3, r2
 800750c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007518:	2b00      	cmp	r3, #0
 800751a:	d00a      	beq.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800751c:	4b3f      	ldr	r3, [pc, #252]	@ (800761c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800751e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007522:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800752a:	493c      	ldr	r1, [pc, #240]	@ (800761c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800752c:	4313      	orrs	r3, r2
 800752e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800753a:	2b00      	cmp	r3, #0
 800753c:	d00a      	beq.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800753e:	4b37      	ldr	r3, [pc, #220]	@ (800761c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007540:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007544:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800754c:	4933      	ldr	r1, [pc, #204]	@ (800761c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800754e:	4313      	orrs	r3, r2
 8007550:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800755c:	2b00      	cmp	r3, #0
 800755e:	d00a      	beq.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007560:	4b2e      	ldr	r3, [pc, #184]	@ (800761c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007562:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007566:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800756e:	492b      	ldr	r1, [pc, #172]	@ (800761c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007570:	4313      	orrs	r3, r2
 8007572:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800757e:	2b00      	cmp	r3, #0
 8007580:	d011      	beq.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007582:	4b26      	ldr	r3, [pc, #152]	@ (800761c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007584:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007588:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007590:	4922      	ldr	r1, [pc, #136]	@ (800761c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007592:	4313      	orrs	r3, r2
 8007594:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800759c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80075a0:	d101      	bne.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80075a2:	2301      	movs	r3, #1
 80075a4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f003 0308 	and.w	r3, r3, #8
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d001      	beq.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80075b2:	2301      	movs	r3, #1
 80075b4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d00a      	beq.n	80075d8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80075c2:	4b16      	ldr	r3, [pc, #88]	@ (800761c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075c8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80075d0:	4912      	ldr	r1, [pc, #72]	@ (800761c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075d2:	4313      	orrs	r3, r2
 80075d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d00b      	beq.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80075e4:	4b0d      	ldr	r3, [pc, #52]	@ (800761c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075ea:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075f4:	4909      	ldr	r1, [pc, #36]	@ (800761c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075f6:	4313      	orrs	r3, r2
 80075f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80075fc:	69fb      	ldr	r3, [r7, #28]
 80075fe:	2b01      	cmp	r3, #1
 8007600:	d006      	beq.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800760a:	2b00      	cmp	r3, #0
 800760c:	f000 80d9 	beq.w	80077c2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007610:	4b02      	ldr	r3, [pc, #8]	@ (800761c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a01      	ldr	r2, [pc, #4]	@ (800761c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007616:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800761a:	e001      	b.n	8007620 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800761c:	40023800 	.word	0x40023800
 8007620:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007622:	f7fd f8f5 	bl	8004810 <HAL_GetTick>
 8007626:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007628:	e008      	b.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800762a:	f7fd f8f1 	bl	8004810 <HAL_GetTick>
 800762e:	4602      	mov	r2, r0
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	1ad3      	subs	r3, r2, r3
 8007634:	2b64      	cmp	r3, #100	@ 0x64
 8007636:	d901      	bls.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007638:	2303      	movs	r3, #3
 800763a:	e194      	b.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800763c:	4b6c      	ldr	r3, [pc, #432]	@ (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007644:	2b00      	cmp	r3, #0
 8007646:	d1f0      	bne.n	800762a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f003 0301 	and.w	r3, r3, #1
 8007650:	2b00      	cmp	r3, #0
 8007652:	d021      	beq.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007658:	2b00      	cmp	r3, #0
 800765a:	d11d      	bne.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800765c:	4b64      	ldr	r3, [pc, #400]	@ (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800765e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007662:	0c1b      	lsrs	r3, r3, #16
 8007664:	f003 0303 	and.w	r3, r3, #3
 8007668:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800766a:	4b61      	ldr	r3, [pc, #388]	@ (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800766c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007670:	0e1b      	lsrs	r3, r3, #24
 8007672:	f003 030f 	and.w	r3, r3, #15
 8007676:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	019a      	lsls	r2, r3, #6
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	041b      	lsls	r3, r3, #16
 8007682:	431a      	orrs	r2, r3
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	061b      	lsls	r3, r3, #24
 8007688:	431a      	orrs	r2, r3
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	689b      	ldr	r3, [r3, #8]
 800768e:	071b      	lsls	r3, r3, #28
 8007690:	4957      	ldr	r1, [pc, #348]	@ (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007692:	4313      	orrs	r3, r2
 8007694:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d004      	beq.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076a8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80076ac:	d00a      	beq.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d02e      	beq.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80076c2:	d129      	bne.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80076c4:	4b4a      	ldr	r3, [pc, #296]	@ (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80076c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80076ca:	0c1b      	lsrs	r3, r3, #16
 80076cc:	f003 0303 	and.w	r3, r3, #3
 80076d0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80076d2:	4b47      	ldr	r3, [pc, #284]	@ (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80076d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80076d8:	0f1b      	lsrs	r3, r3, #28
 80076da:	f003 0307 	and.w	r3, r3, #7
 80076de:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	019a      	lsls	r2, r3, #6
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	041b      	lsls	r3, r3, #16
 80076ea:	431a      	orrs	r2, r3
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	68db      	ldr	r3, [r3, #12]
 80076f0:	061b      	lsls	r3, r3, #24
 80076f2:	431a      	orrs	r2, r3
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	071b      	lsls	r3, r3, #28
 80076f8:	493d      	ldr	r1, [pc, #244]	@ (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80076fa:	4313      	orrs	r3, r2
 80076fc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007700:	4b3b      	ldr	r3, [pc, #236]	@ (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007702:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007706:	f023 021f 	bic.w	r2, r3, #31
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800770e:	3b01      	subs	r3, #1
 8007710:	4937      	ldr	r1, [pc, #220]	@ (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007712:	4313      	orrs	r3, r2
 8007714:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007720:	2b00      	cmp	r3, #0
 8007722:	d01d      	beq.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007724:	4b32      	ldr	r3, [pc, #200]	@ (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007726:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800772a:	0e1b      	lsrs	r3, r3, #24
 800772c:	f003 030f 	and.w	r3, r3, #15
 8007730:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007732:	4b2f      	ldr	r3, [pc, #188]	@ (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007734:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007738:	0f1b      	lsrs	r3, r3, #28
 800773a:	f003 0307 	and.w	r3, r3, #7
 800773e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	019a      	lsls	r2, r3, #6
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	691b      	ldr	r3, [r3, #16]
 800774a:	041b      	lsls	r3, r3, #16
 800774c:	431a      	orrs	r2, r3
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	061b      	lsls	r3, r3, #24
 8007752:	431a      	orrs	r2, r3
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	071b      	lsls	r3, r3, #28
 8007758:	4925      	ldr	r1, [pc, #148]	@ (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800775a:	4313      	orrs	r3, r2
 800775c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007768:	2b00      	cmp	r3, #0
 800776a:	d011      	beq.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	019a      	lsls	r2, r3, #6
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	691b      	ldr	r3, [r3, #16]
 8007776:	041b      	lsls	r3, r3, #16
 8007778:	431a      	orrs	r2, r3
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	68db      	ldr	r3, [r3, #12]
 800777e:	061b      	lsls	r3, r3, #24
 8007780:	431a      	orrs	r2, r3
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	689b      	ldr	r3, [r3, #8]
 8007786:	071b      	lsls	r3, r3, #28
 8007788:	4919      	ldr	r1, [pc, #100]	@ (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800778a:	4313      	orrs	r3, r2
 800778c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007790:	4b17      	ldr	r3, [pc, #92]	@ (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a16      	ldr	r2, [pc, #88]	@ (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007796:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800779a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800779c:	f7fd f838 	bl	8004810 <HAL_GetTick>
 80077a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80077a2:	e008      	b.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80077a4:	f7fd f834 	bl	8004810 <HAL_GetTick>
 80077a8:	4602      	mov	r2, r0
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	1ad3      	subs	r3, r2, r3
 80077ae:	2b64      	cmp	r3, #100	@ 0x64
 80077b0:	d901      	bls.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80077b2:	2303      	movs	r3, #3
 80077b4:	e0d7      	b.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80077b6:	4b0e      	ldr	r3, [pc, #56]	@ (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d0f0      	beq.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80077c2:	69bb      	ldr	r3, [r7, #24]
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	f040 80cd 	bne.w	8007964 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80077ca:	4b09      	ldr	r3, [pc, #36]	@ (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a08      	ldr	r2, [pc, #32]	@ (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80077d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80077d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077d6:	f7fd f81b 	bl	8004810 <HAL_GetTick>
 80077da:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80077dc:	e00a      	b.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80077de:	f7fd f817 	bl	8004810 <HAL_GetTick>
 80077e2:	4602      	mov	r2, r0
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	1ad3      	subs	r3, r2, r3
 80077e8:	2b64      	cmp	r3, #100	@ 0x64
 80077ea:	d903      	bls.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80077ec:	2303      	movs	r3, #3
 80077ee:	e0ba      	b.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80077f0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80077f4:	4b5e      	ldr	r3, [pc, #376]	@ (8007970 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80077fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007800:	d0ed      	beq.n	80077de <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800780a:	2b00      	cmp	r3, #0
 800780c:	d003      	beq.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007812:	2b00      	cmp	r3, #0
 8007814:	d009      	beq.n	800782a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800781e:	2b00      	cmp	r3, #0
 8007820:	d02e      	beq.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007826:	2b00      	cmp	r3, #0
 8007828:	d12a      	bne.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800782a:	4b51      	ldr	r3, [pc, #324]	@ (8007970 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800782c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007830:	0c1b      	lsrs	r3, r3, #16
 8007832:	f003 0303 	and.w	r3, r3, #3
 8007836:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007838:	4b4d      	ldr	r3, [pc, #308]	@ (8007970 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800783a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800783e:	0f1b      	lsrs	r3, r3, #28
 8007840:	f003 0307 	and.w	r3, r3, #7
 8007844:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	695b      	ldr	r3, [r3, #20]
 800784a:	019a      	lsls	r2, r3, #6
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	041b      	lsls	r3, r3, #16
 8007850:	431a      	orrs	r2, r3
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	699b      	ldr	r3, [r3, #24]
 8007856:	061b      	lsls	r3, r3, #24
 8007858:	431a      	orrs	r2, r3
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	071b      	lsls	r3, r3, #28
 800785e:	4944      	ldr	r1, [pc, #272]	@ (8007970 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007860:	4313      	orrs	r3, r2
 8007862:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007866:	4b42      	ldr	r3, [pc, #264]	@ (8007970 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007868:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800786c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007874:	3b01      	subs	r3, #1
 8007876:	021b      	lsls	r3, r3, #8
 8007878:	493d      	ldr	r1, [pc, #244]	@ (8007970 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800787a:	4313      	orrs	r3, r2
 800787c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007888:	2b00      	cmp	r3, #0
 800788a:	d022      	beq.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007890:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007894:	d11d      	bne.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007896:	4b36      	ldr	r3, [pc, #216]	@ (8007970 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007898:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800789c:	0e1b      	lsrs	r3, r3, #24
 800789e:	f003 030f 	and.w	r3, r3, #15
 80078a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80078a4:	4b32      	ldr	r3, [pc, #200]	@ (8007970 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80078a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078aa:	0f1b      	lsrs	r3, r3, #28
 80078ac:	f003 0307 	and.w	r3, r3, #7
 80078b0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	695b      	ldr	r3, [r3, #20]
 80078b6:	019a      	lsls	r2, r3, #6
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6a1b      	ldr	r3, [r3, #32]
 80078bc:	041b      	lsls	r3, r3, #16
 80078be:	431a      	orrs	r2, r3
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	061b      	lsls	r3, r3, #24
 80078c4:	431a      	orrs	r2, r3
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	071b      	lsls	r3, r3, #28
 80078ca:	4929      	ldr	r1, [pc, #164]	@ (8007970 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80078cc:	4313      	orrs	r3, r2
 80078ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f003 0308 	and.w	r3, r3, #8
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d028      	beq.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80078de:	4b24      	ldr	r3, [pc, #144]	@ (8007970 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80078e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078e4:	0e1b      	lsrs	r3, r3, #24
 80078e6:	f003 030f 	and.w	r3, r3, #15
 80078ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80078ec:	4b20      	ldr	r3, [pc, #128]	@ (8007970 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80078ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078f2:	0c1b      	lsrs	r3, r3, #16
 80078f4:	f003 0303 	and.w	r3, r3, #3
 80078f8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	695b      	ldr	r3, [r3, #20]
 80078fe:	019a      	lsls	r2, r3, #6
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	041b      	lsls	r3, r3, #16
 8007904:	431a      	orrs	r2, r3
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	061b      	lsls	r3, r3, #24
 800790a:	431a      	orrs	r2, r3
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	69db      	ldr	r3, [r3, #28]
 8007910:	071b      	lsls	r3, r3, #28
 8007912:	4917      	ldr	r1, [pc, #92]	@ (8007970 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007914:	4313      	orrs	r3, r2
 8007916:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800791a:	4b15      	ldr	r3, [pc, #84]	@ (8007970 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800791c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007920:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007928:	4911      	ldr	r1, [pc, #68]	@ (8007970 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800792a:	4313      	orrs	r3, r2
 800792c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007930:	4b0f      	ldr	r3, [pc, #60]	@ (8007970 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a0e      	ldr	r2, [pc, #56]	@ (8007970 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007936:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800793a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800793c:	f7fc ff68 	bl	8004810 <HAL_GetTick>
 8007940:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007942:	e008      	b.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007944:	f7fc ff64 	bl	8004810 <HAL_GetTick>
 8007948:	4602      	mov	r2, r0
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	1ad3      	subs	r3, r2, r3
 800794e:	2b64      	cmp	r3, #100	@ 0x64
 8007950:	d901      	bls.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007952:	2303      	movs	r3, #3
 8007954:	e007      	b.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007956:	4b06      	ldr	r3, [pc, #24]	@ (8007970 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800795e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007962:	d1ef      	bne.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8007964:	2300      	movs	r3, #0
}
 8007966:	4618      	mov	r0, r3
 8007968:	3720      	adds	r7, #32
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}
 800796e:	bf00      	nop
 8007970:	40023800 	.word	0x40023800

08007974 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b082      	sub	sp, #8
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d101      	bne.n	8007986 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007982:	2301      	movs	r3, #1
 8007984:	e049      	b.n	8007a1a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800798c:	b2db      	uxtb	r3, r3
 800798e:	2b00      	cmp	r3, #0
 8007990:	d106      	bne.n	80079a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2200      	movs	r2, #0
 8007996:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f7fc fbbc 	bl	8004118 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2202      	movs	r2, #2
 80079a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681a      	ldr	r2, [r3, #0]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	3304      	adds	r3, #4
 80079b0:	4619      	mov	r1, r3
 80079b2:	4610      	mov	r0, r2
 80079b4:	f000 fcc0 	bl	8008338 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2201      	movs	r2, #1
 80079bc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2201      	movs	r2, #1
 80079c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2201      	movs	r2, #1
 80079cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2201      	movs	r2, #1
 80079d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2201      	movs	r2, #1
 80079dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2201      	movs	r2, #1
 80079e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2201      	movs	r2, #1
 80079ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2201      	movs	r2, #1
 80079f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2201      	movs	r2, #1
 80079fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2201      	movs	r2, #1
 8007a04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2201      	movs	r2, #1
 8007a14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007a18:	2300      	movs	r3, #0
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3708      	adds	r7, #8
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}

08007a22 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007a22:	b580      	push	{r7, lr}
 8007a24:	b082      	sub	sp, #8
 8007a26:	af00      	add	r7, sp, #0
 8007a28:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d101      	bne.n	8007a34 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007a30:	2301      	movs	r3, #1
 8007a32:	e049      	b.n	8007ac8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a3a:	b2db      	uxtb	r3, r3
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d106      	bne.n	8007a4e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2200      	movs	r2, #0
 8007a44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f000 f841 	bl	8007ad0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2202      	movs	r2, #2
 8007a52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681a      	ldr	r2, [r3, #0]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	3304      	adds	r3, #4
 8007a5e:	4619      	mov	r1, r3
 8007a60:	4610      	mov	r0, r2
 8007a62:	f000 fc69 	bl	8008338 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2201      	movs	r2, #1
 8007a6a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2201      	movs	r2, #1
 8007a72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2201      	movs	r2, #1
 8007a7a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2201      	movs	r2, #1
 8007a82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2201      	movs	r2, #1
 8007a8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2201      	movs	r2, #1
 8007a92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2201      	movs	r2, #1
 8007a9a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2201      	movs	r2, #1
 8007aa2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2201      	movs	r2, #1
 8007aaa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2201      	movs	r2, #1
 8007aba:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007ac6:	2300      	movs	r3, #0
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3708      	adds	r7, #8
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}

08007ad0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b083      	sub	sp, #12
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007ad8:	bf00      	nop
 8007ada:	370c      	adds	r7, #12
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr

08007ae4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b084      	sub	sp, #16
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d109      	bne.n	8007b08 <HAL_TIM_PWM_Start+0x24>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007afa:	b2db      	uxtb	r3, r3
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	bf14      	ite	ne
 8007b00:	2301      	movne	r3, #1
 8007b02:	2300      	moveq	r3, #0
 8007b04:	b2db      	uxtb	r3, r3
 8007b06:	e03c      	b.n	8007b82 <HAL_TIM_PWM_Start+0x9e>
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	2b04      	cmp	r3, #4
 8007b0c:	d109      	bne.n	8007b22 <HAL_TIM_PWM_Start+0x3e>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007b14:	b2db      	uxtb	r3, r3
 8007b16:	2b01      	cmp	r3, #1
 8007b18:	bf14      	ite	ne
 8007b1a:	2301      	movne	r3, #1
 8007b1c:	2300      	moveq	r3, #0
 8007b1e:	b2db      	uxtb	r3, r3
 8007b20:	e02f      	b.n	8007b82 <HAL_TIM_PWM_Start+0x9e>
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	2b08      	cmp	r3, #8
 8007b26:	d109      	bne.n	8007b3c <HAL_TIM_PWM_Start+0x58>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007b2e:	b2db      	uxtb	r3, r3
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	bf14      	ite	ne
 8007b34:	2301      	movne	r3, #1
 8007b36:	2300      	moveq	r3, #0
 8007b38:	b2db      	uxtb	r3, r3
 8007b3a:	e022      	b.n	8007b82 <HAL_TIM_PWM_Start+0x9e>
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	2b0c      	cmp	r3, #12
 8007b40:	d109      	bne.n	8007b56 <HAL_TIM_PWM_Start+0x72>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b48:	b2db      	uxtb	r3, r3
 8007b4a:	2b01      	cmp	r3, #1
 8007b4c:	bf14      	ite	ne
 8007b4e:	2301      	movne	r3, #1
 8007b50:	2300      	moveq	r3, #0
 8007b52:	b2db      	uxtb	r3, r3
 8007b54:	e015      	b.n	8007b82 <HAL_TIM_PWM_Start+0x9e>
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	2b10      	cmp	r3, #16
 8007b5a:	d109      	bne.n	8007b70 <HAL_TIM_PWM_Start+0x8c>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007b62:	b2db      	uxtb	r3, r3
 8007b64:	2b01      	cmp	r3, #1
 8007b66:	bf14      	ite	ne
 8007b68:	2301      	movne	r3, #1
 8007b6a:	2300      	moveq	r3, #0
 8007b6c:	b2db      	uxtb	r3, r3
 8007b6e:	e008      	b.n	8007b82 <HAL_TIM_PWM_Start+0x9e>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007b76:	b2db      	uxtb	r3, r3
 8007b78:	2b01      	cmp	r3, #1
 8007b7a:	bf14      	ite	ne
 8007b7c:	2301      	movne	r3, #1
 8007b7e:	2300      	moveq	r3, #0
 8007b80:	b2db      	uxtb	r3, r3
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d001      	beq.n	8007b8a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007b86:	2301      	movs	r3, #1
 8007b88:	e092      	b.n	8007cb0 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d104      	bne.n	8007b9a <HAL_TIM_PWM_Start+0xb6>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2202      	movs	r2, #2
 8007b94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007b98:	e023      	b.n	8007be2 <HAL_TIM_PWM_Start+0xfe>
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	2b04      	cmp	r3, #4
 8007b9e:	d104      	bne.n	8007baa <HAL_TIM_PWM_Start+0xc6>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2202      	movs	r2, #2
 8007ba4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007ba8:	e01b      	b.n	8007be2 <HAL_TIM_PWM_Start+0xfe>
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	2b08      	cmp	r3, #8
 8007bae:	d104      	bne.n	8007bba <HAL_TIM_PWM_Start+0xd6>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2202      	movs	r2, #2
 8007bb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007bb8:	e013      	b.n	8007be2 <HAL_TIM_PWM_Start+0xfe>
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	2b0c      	cmp	r3, #12
 8007bbe:	d104      	bne.n	8007bca <HAL_TIM_PWM_Start+0xe6>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2202      	movs	r2, #2
 8007bc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007bc8:	e00b      	b.n	8007be2 <HAL_TIM_PWM_Start+0xfe>
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	2b10      	cmp	r3, #16
 8007bce:	d104      	bne.n	8007bda <HAL_TIM_PWM_Start+0xf6>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2202      	movs	r2, #2
 8007bd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007bd8:	e003      	b.n	8007be2 <HAL_TIM_PWM_Start+0xfe>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2202      	movs	r2, #2
 8007bde:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	2201      	movs	r2, #1
 8007be8:	6839      	ldr	r1, [r7, #0]
 8007bea:	4618      	mov	r0, r3
 8007bec:	f000 ff3c 	bl	8008a68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a30      	ldr	r2, [pc, #192]	@ (8007cb8 <HAL_TIM_PWM_Start+0x1d4>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d004      	beq.n	8007c04 <HAL_TIM_PWM_Start+0x120>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4a2f      	ldr	r2, [pc, #188]	@ (8007cbc <HAL_TIM_PWM_Start+0x1d8>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d101      	bne.n	8007c08 <HAL_TIM_PWM_Start+0x124>
 8007c04:	2301      	movs	r3, #1
 8007c06:	e000      	b.n	8007c0a <HAL_TIM_PWM_Start+0x126>
 8007c08:	2300      	movs	r3, #0
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d007      	beq.n	8007c1e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007c1c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4a25      	ldr	r2, [pc, #148]	@ (8007cb8 <HAL_TIM_PWM_Start+0x1d4>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d022      	beq.n	8007c6e <HAL_TIM_PWM_Start+0x18a>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c30:	d01d      	beq.n	8007c6e <HAL_TIM_PWM_Start+0x18a>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	4a22      	ldr	r2, [pc, #136]	@ (8007cc0 <HAL_TIM_PWM_Start+0x1dc>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d018      	beq.n	8007c6e <HAL_TIM_PWM_Start+0x18a>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4a20      	ldr	r2, [pc, #128]	@ (8007cc4 <HAL_TIM_PWM_Start+0x1e0>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d013      	beq.n	8007c6e <HAL_TIM_PWM_Start+0x18a>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4a1f      	ldr	r2, [pc, #124]	@ (8007cc8 <HAL_TIM_PWM_Start+0x1e4>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d00e      	beq.n	8007c6e <HAL_TIM_PWM_Start+0x18a>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4a19      	ldr	r2, [pc, #100]	@ (8007cbc <HAL_TIM_PWM_Start+0x1d8>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d009      	beq.n	8007c6e <HAL_TIM_PWM_Start+0x18a>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4a1b      	ldr	r2, [pc, #108]	@ (8007ccc <HAL_TIM_PWM_Start+0x1e8>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d004      	beq.n	8007c6e <HAL_TIM_PWM_Start+0x18a>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4a19      	ldr	r2, [pc, #100]	@ (8007cd0 <HAL_TIM_PWM_Start+0x1ec>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d115      	bne.n	8007c9a <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	689a      	ldr	r2, [r3, #8]
 8007c74:	4b17      	ldr	r3, [pc, #92]	@ (8007cd4 <HAL_TIM_PWM_Start+0x1f0>)
 8007c76:	4013      	ands	r3, r2
 8007c78:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2b06      	cmp	r3, #6
 8007c7e:	d015      	beq.n	8007cac <HAL_TIM_PWM_Start+0x1c8>
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c86:	d011      	beq.n	8007cac <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	681a      	ldr	r2, [r3, #0]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f042 0201 	orr.w	r2, r2, #1
 8007c96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c98:	e008      	b.n	8007cac <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	681a      	ldr	r2, [r3, #0]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f042 0201 	orr.w	r2, r2, #1
 8007ca8:	601a      	str	r2, [r3, #0]
 8007caa:	e000      	b.n	8007cae <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007cae:	2300      	movs	r3, #0
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3710      	adds	r7, #16
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}
 8007cb8:	40010000 	.word	0x40010000
 8007cbc:	40010400 	.word	0x40010400
 8007cc0:	40000400 	.word	0x40000400
 8007cc4:	40000800 	.word	0x40000800
 8007cc8:	40000c00 	.word	0x40000c00
 8007ccc:	40014000 	.word	0x40014000
 8007cd0:	40001800 	.word	0x40001800
 8007cd4:	00010007 	.word	0x00010007

08007cd8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b082      	sub	sp, #8
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	691b      	ldr	r3, [r3, #16]
 8007ce6:	f003 0302 	and.w	r3, r3, #2
 8007cea:	2b02      	cmp	r3, #2
 8007cec:	d122      	bne.n	8007d34 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	68db      	ldr	r3, [r3, #12]
 8007cf4:	f003 0302 	and.w	r3, r3, #2
 8007cf8:	2b02      	cmp	r3, #2
 8007cfa:	d11b      	bne.n	8007d34 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f06f 0202 	mvn.w	r2, #2
 8007d04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2201      	movs	r2, #1
 8007d0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	699b      	ldr	r3, [r3, #24]
 8007d12:	f003 0303 	and.w	r3, r3, #3
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d003      	beq.n	8007d22 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 faee 	bl	80082fc <HAL_TIM_IC_CaptureCallback>
 8007d20:	e005      	b.n	8007d2e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 fae0 	bl	80082e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f000 faf1 	bl	8008310 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2200      	movs	r2, #0
 8007d32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	691b      	ldr	r3, [r3, #16]
 8007d3a:	f003 0304 	and.w	r3, r3, #4
 8007d3e:	2b04      	cmp	r3, #4
 8007d40:	d122      	bne.n	8007d88 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	68db      	ldr	r3, [r3, #12]
 8007d48:	f003 0304 	and.w	r3, r3, #4
 8007d4c:	2b04      	cmp	r3, #4
 8007d4e:	d11b      	bne.n	8007d88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f06f 0204 	mvn.w	r2, #4
 8007d58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2202      	movs	r2, #2
 8007d5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	699b      	ldr	r3, [r3, #24]
 8007d66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d003      	beq.n	8007d76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f000 fac4 	bl	80082fc <HAL_TIM_IC_CaptureCallback>
 8007d74:	e005      	b.n	8007d82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f000 fab6 	bl	80082e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f000 fac7 	bl	8008310 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2200      	movs	r2, #0
 8007d86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	691b      	ldr	r3, [r3, #16]
 8007d8e:	f003 0308 	and.w	r3, r3, #8
 8007d92:	2b08      	cmp	r3, #8
 8007d94:	d122      	bne.n	8007ddc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	68db      	ldr	r3, [r3, #12]
 8007d9c:	f003 0308 	and.w	r3, r3, #8
 8007da0:	2b08      	cmp	r3, #8
 8007da2:	d11b      	bne.n	8007ddc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f06f 0208 	mvn.w	r2, #8
 8007dac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2204      	movs	r2, #4
 8007db2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	69db      	ldr	r3, [r3, #28]
 8007dba:	f003 0303 	and.w	r3, r3, #3
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d003      	beq.n	8007dca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f000 fa9a 	bl	80082fc <HAL_TIM_IC_CaptureCallback>
 8007dc8:	e005      	b.n	8007dd6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f000 fa8c 	bl	80082e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f000 fa9d 	bl	8008310 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	691b      	ldr	r3, [r3, #16]
 8007de2:	f003 0310 	and.w	r3, r3, #16
 8007de6:	2b10      	cmp	r3, #16
 8007de8:	d122      	bne.n	8007e30 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	68db      	ldr	r3, [r3, #12]
 8007df0:	f003 0310 	and.w	r3, r3, #16
 8007df4:	2b10      	cmp	r3, #16
 8007df6:	d11b      	bne.n	8007e30 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f06f 0210 	mvn.w	r2, #16
 8007e00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2208      	movs	r2, #8
 8007e06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	69db      	ldr	r3, [r3, #28]
 8007e0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d003      	beq.n	8007e1e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f000 fa70 	bl	80082fc <HAL_TIM_IC_CaptureCallback>
 8007e1c:	e005      	b.n	8007e2a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f000 fa62 	bl	80082e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f000 fa73 	bl	8008310 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	691b      	ldr	r3, [r3, #16]
 8007e36:	f003 0301 	and.w	r3, r3, #1
 8007e3a:	2b01      	cmp	r3, #1
 8007e3c:	d10e      	bne.n	8007e5c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	68db      	ldr	r3, [r3, #12]
 8007e44:	f003 0301 	and.w	r3, r3, #1
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	d107      	bne.n	8007e5c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f06f 0201 	mvn.w	r2, #1
 8007e54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f000 fa3c 	bl	80082d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	691b      	ldr	r3, [r3, #16]
 8007e62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e66:	2b80      	cmp	r3, #128	@ 0x80
 8007e68:	d10e      	bne.n	8007e88 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	68db      	ldr	r3, [r3, #12]
 8007e70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e74:	2b80      	cmp	r3, #128	@ 0x80
 8007e76:	d107      	bne.n	8007e88 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007e80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f000 feae 	bl	8008be4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	691b      	ldr	r3, [r3, #16]
 8007e8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e96:	d10e      	bne.n	8007eb6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	68db      	ldr	r3, [r3, #12]
 8007e9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ea2:	2b80      	cmp	r3, #128	@ 0x80
 8007ea4:	d107      	bne.n	8007eb6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007eae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f000 fea1 	bl	8008bf8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	691b      	ldr	r3, [r3, #16]
 8007ebc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ec0:	2b40      	cmp	r3, #64	@ 0x40
 8007ec2:	d10e      	bne.n	8007ee2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	68db      	ldr	r3, [r3, #12]
 8007eca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ece:	2b40      	cmp	r3, #64	@ 0x40
 8007ed0:	d107      	bne.n	8007ee2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007eda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f000 fa21 	bl	8008324 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	691b      	ldr	r3, [r3, #16]
 8007ee8:	f003 0320 	and.w	r3, r3, #32
 8007eec:	2b20      	cmp	r3, #32
 8007eee:	d10e      	bne.n	8007f0e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	68db      	ldr	r3, [r3, #12]
 8007ef6:	f003 0320 	and.w	r3, r3, #32
 8007efa:	2b20      	cmp	r3, #32
 8007efc:	d107      	bne.n	8007f0e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f06f 0220 	mvn.w	r2, #32
 8007f06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f000 fe61 	bl	8008bd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007f0e:	bf00      	nop
 8007f10:	3708      	adds	r7, #8
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}
	...

08007f18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b086      	sub	sp, #24
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	60f8      	str	r0, [r7, #12]
 8007f20:	60b9      	str	r1, [r7, #8]
 8007f22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f24:	2300      	movs	r3, #0
 8007f26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f2e:	2b01      	cmp	r3, #1
 8007f30:	d101      	bne.n	8007f36 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007f32:	2302      	movs	r3, #2
 8007f34:	e0ff      	b.n	8008136 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2201      	movs	r2, #1
 8007f3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2b14      	cmp	r3, #20
 8007f42:	f200 80f0 	bhi.w	8008126 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007f46:	a201      	add	r2, pc, #4	@ (adr r2, 8007f4c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f4c:	08007fa1 	.word	0x08007fa1
 8007f50:	08008127 	.word	0x08008127
 8007f54:	08008127 	.word	0x08008127
 8007f58:	08008127 	.word	0x08008127
 8007f5c:	08007fe1 	.word	0x08007fe1
 8007f60:	08008127 	.word	0x08008127
 8007f64:	08008127 	.word	0x08008127
 8007f68:	08008127 	.word	0x08008127
 8007f6c:	08008023 	.word	0x08008023
 8007f70:	08008127 	.word	0x08008127
 8007f74:	08008127 	.word	0x08008127
 8007f78:	08008127 	.word	0x08008127
 8007f7c:	08008063 	.word	0x08008063
 8007f80:	08008127 	.word	0x08008127
 8007f84:	08008127 	.word	0x08008127
 8007f88:	08008127 	.word	0x08008127
 8007f8c:	080080a5 	.word	0x080080a5
 8007f90:	08008127 	.word	0x08008127
 8007f94:	08008127 	.word	0x08008127
 8007f98:	08008127 	.word	0x08008127
 8007f9c:	080080e5 	.word	0x080080e5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	68b9      	ldr	r1, [r7, #8]
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f000 fa66 	bl	8008478 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	699a      	ldr	r2, [r3, #24]
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f042 0208 	orr.w	r2, r2, #8
 8007fba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	699a      	ldr	r2, [r3, #24]
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f022 0204 	bic.w	r2, r2, #4
 8007fca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	6999      	ldr	r1, [r3, #24]
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	691a      	ldr	r2, [r3, #16]
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	430a      	orrs	r2, r1
 8007fdc:	619a      	str	r2, [r3, #24]
      break;
 8007fde:	e0a5      	b.n	800812c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	68b9      	ldr	r1, [r7, #8]
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f000 fab8 	bl	800855c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	699a      	ldr	r2, [r3, #24]
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007ffa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	699a      	ldr	r2, [r3, #24]
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800800a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	6999      	ldr	r1, [r3, #24]
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	691b      	ldr	r3, [r3, #16]
 8008016:	021a      	lsls	r2, r3, #8
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	430a      	orrs	r2, r1
 800801e:	619a      	str	r2, [r3, #24]
      break;
 8008020:	e084      	b.n	800812c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	68b9      	ldr	r1, [r7, #8]
 8008028:	4618      	mov	r0, r3
 800802a:	f000 fb0f 	bl	800864c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	69da      	ldr	r2, [r3, #28]
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f042 0208 	orr.w	r2, r2, #8
 800803c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	69da      	ldr	r2, [r3, #28]
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f022 0204 	bic.w	r2, r2, #4
 800804c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	69d9      	ldr	r1, [r3, #28]
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	691a      	ldr	r2, [r3, #16]
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	430a      	orrs	r2, r1
 800805e:	61da      	str	r2, [r3, #28]
      break;
 8008060:	e064      	b.n	800812c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	68b9      	ldr	r1, [r7, #8]
 8008068:	4618      	mov	r0, r3
 800806a:	f000 fb65 	bl	8008738 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	69da      	ldr	r2, [r3, #28]
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800807c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	69da      	ldr	r2, [r3, #28]
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800808c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	69d9      	ldr	r1, [r3, #28]
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	691b      	ldr	r3, [r3, #16]
 8008098:	021a      	lsls	r2, r3, #8
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	430a      	orrs	r2, r1
 80080a0:	61da      	str	r2, [r3, #28]
      break;
 80080a2:	e043      	b.n	800812c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	68b9      	ldr	r1, [r7, #8]
 80080aa:	4618      	mov	r0, r3
 80080ac:	f000 fb9c 	bl	80087e8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f042 0208 	orr.w	r2, r2, #8
 80080be:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f022 0204 	bic.w	r2, r2, #4
 80080ce:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	691a      	ldr	r2, [r3, #16]
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	430a      	orrs	r2, r1
 80080e0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80080e2:	e023      	b.n	800812c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	68b9      	ldr	r1, [r7, #8]
 80080ea:	4618      	mov	r0, r3
 80080ec:	f000 fbce 	bl	800888c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80080fe:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800810e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	691b      	ldr	r3, [r3, #16]
 800811a:	021a      	lsls	r2, r3, #8
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	430a      	orrs	r2, r1
 8008122:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008124:	e002      	b.n	800812c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008126:	2301      	movs	r3, #1
 8008128:	75fb      	strb	r3, [r7, #23]
      break;
 800812a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	2200      	movs	r2, #0
 8008130:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008134:	7dfb      	ldrb	r3, [r7, #23]
}
 8008136:	4618      	mov	r0, r3
 8008138:	3718      	adds	r7, #24
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}
 800813e:	bf00      	nop

08008140 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b084      	sub	sp, #16
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800814a:	2300      	movs	r3, #0
 800814c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008154:	2b01      	cmp	r3, #1
 8008156:	d101      	bne.n	800815c <HAL_TIM_ConfigClockSource+0x1c>
 8008158:	2302      	movs	r3, #2
 800815a:	e0b4      	b.n	80082c6 <HAL_TIM_ConfigClockSource+0x186>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2201      	movs	r2, #1
 8008160:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2202      	movs	r2, #2
 8008168:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	689b      	ldr	r3, [r3, #8]
 8008172:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008174:	68ba      	ldr	r2, [r7, #8]
 8008176:	4b56      	ldr	r3, [pc, #344]	@ (80082d0 <HAL_TIM_ConfigClockSource+0x190>)
 8008178:	4013      	ands	r3, r2
 800817a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008182:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	68ba      	ldr	r2, [r7, #8]
 800818a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008194:	d03e      	beq.n	8008214 <HAL_TIM_ConfigClockSource+0xd4>
 8008196:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800819a:	f200 8087 	bhi.w	80082ac <HAL_TIM_ConfigClockSource+0x16c>
 800819e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081a2:	f000 8086 	beq.w	80082b2 <HAL_TIM_ConfigClockSource+0x172>
 80081a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081aa:	d87f      	bhi.n	80082ac <HAL_TIM_ConfigClockSource+0x16c>
 80081ac:	2b70      	cmp	r3, #112	@ 0x70
 80081ae:	d01a      	beq.n	80081e6 <HAL_TIM_ConfigClockSource+0xa6>
 80081b0:	2b70      	cmp	r3, #112	@ 0x70
 80081b2:	d87b      	bhi.n	80082ac <HAL_TIM_ConfigClockSource+0x16c>
 80081b4:	2b60      	cmp	r3, #96	@ 0x60
 80081b6:	d050      	beq.n	800825a <HAL_TIM_ConfigClockSource+0x11a>
 80081b8:	2b60      	cmp	r3, #96	@ 0x60
 80081ba:	d877      	bhi.n	80082ac <HAL_TIM_ConfigClockSource+0x16c>
 80081bc:	2b50      	cmp	r3, #80	@ 0x50
 80081be:	d03c      	beq.n	800823a <HAL_TIM_ConfigClockSource+0xfa>
 80081c0:	2b50      	cmp	r3, #80	@ 0x50
 80081c2:	d873      	bhi.n	80082ac <HAL_TIM_ConfigClockSource+0x16c>
 80081c4:	2b40      	cmp	r3, #64	@ 0x40
 80081c6:	d058      	beq.n	800827a <HAL_TIM_ConfigClockSource+0x13a>
 80081c8:	2b40      	cmp	r3, #64	@ 0x40
 80081ca:	d86f      	bhi.n	80082ac <HAL_TIM_ConfigClockSource+0x16c>
 80081cc:	2b30      	cmp	r3, #48	@ 0x30
 80081ce:	d064      	beq.n	800829a <HAL_TIM_ConfigClockSource+0x15a>
 80081d0:	2b30      	cmp	r3, #48	@ 0x30
 80081d2:	d86b      	bhi.n	80082ac <HAL_TIM_ConfigClockSource+0x16c>
 80081d4:	2b20      	cmp	r3, #32
 80081d6:	d060      	beq.n	800829a <HAL_TIM_ConfigClockSource+0x15a>
 80081d8:	2b20      	cmp	r3, #32
 80081da:	d867      	bhi.n	80082ac <HAL_TIM_ConfigClockSource+0x16c>
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d05c      	beq.n	800829a <HAL_TIM_ConfigClockSource+0x15a>
 80081e0:	2b10      	cmp	r3, #16
 80081e2:	d05a      	beq.n	800829a <HAL_TIM_ConfigClockSource+0x15a>
 80081e4:	e062      	b.n	80082ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80081f6:	f000 fc17 	bl	8008a28 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	689b      	ldr	r3, [r3, #8]
 8008200:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008208:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	68ba      	ldr	r2, [r7, #8]
 8008210:	609a      	str	r2, [r3, #8]
      break;
 8008212:	e04f      	b.n	80082b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008224:	f000 fc00 	bl	8008a28 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	689a      	ldr	r2, [r3, #8]
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008236:	609a      	str	r2, [r3, #8]
      break;
 8008238:	e03c      	b.n	80082b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008246:	461a      	mov	r2, r3
 8008248:	f000 fb74 	bl	8008934 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	2150      	movs	r1, #80	@ 0x50
 8008252:	4618      	mov	r0, r3
 8008254:	f000 fbcd 	bl	80089f2 <TIM_ITRx_SetConfig>
      break;
 8008258:	e02c      	b.n	80082b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008266:	461a      	mov	r2, r3
 8008268:	f000 fb93 	bl	8008992 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	2160      	movs	r1, #96	@ 0x60
 8008272:	4618      	mov	r0, r3
 8008274:	f000 fbbd 	bl	80089f2 <TIM_ITRx_SetConfig>
      break;
 8008278:	e01c      	b.n	80082b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008286:	461a      	mov	r2, r3
 8008288:	f000 fb54 	bl	8008934 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	2140      	movs	r1, #64	@ 0x40
 8008292:	4618      	mov	r0, r3
 8008294:	f000 fbad 	bl	80089f2 <TIM_ITRx_SetConfig>
      break;
 8008298:	e00c      	b.n	80082b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681a      	ldr	r2, [r3, #0]
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4619      	mov	r1, r3
 80082a4:	4610      	mov	r0, r2
 80082a6:	f000 fba4 	bl	80089f2 <TIM_ITRx_SetConfig>
      break;
 80082aa:	e003      	b.n	80082b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80082ac:	2301      	movs	r3, #1
 80082ae:	73fb      	strb	r3, [r7, #15]
      break;
 80082b0:	e000      	b.n	80082b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80082b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2201      	movs	r2, #1
 80082b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2200      	movs	r2, #0
 80082c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80082c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3710      	adds	r7, #16
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}
 80082ce:	bf00      	nop
 80082d0:	fffeff88 	.word	0xfffeff88

080082d4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b083      	sub	sp, #12
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80082dc:	bf00      	nop
 80082de:	370c      	adds	r7, #12
 80082e0:	46bd      	mov	sp, r7
 80082e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e6:	4770      	bx	lr

080082e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b083      	sub	sp, #12
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80082f0:	bf00      	nop
 80082f2:	370c      	adds	r7, #12
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr

080082fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b083      	sub	sp, #12
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008304:	bf00      	nop
 8008306:	370c      	adds	r7, #12
 8008308:	46bd      	mov	sp, r7
 800830a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830e:	4770      	bx	lr

08008310 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008310:	b480      	push	{r7}
 8008312:	b083      	sub	sp, #12
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008318:	bf00      	nop
 800831a:	370c      	adds	r7, #12
 800831c:	46bd      	mov	sp, r7
 800831e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008322:	4770      	bx	lr

08008324 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008324:	b480      	push	{r7}
 8008326:	b083      	sub	sp, #12
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800832c:	bf00      	nop
 800832e:	370c      	adds	r7, #12
 8008330:	46bd      	mov	sp, r7
 8008332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008336:	4770      	bx	lr

08008338 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008338:	b480      	push	{r7}
 800833a:	b085      	sub	sp, #20
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
 8008340:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	4a40      	ldr	r2, [pc, #256]	@ (800844c <TIM_Base_SetConfig+0x114>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d013      	beq.n	8008378 <TIM_Base_SetConfig+0x40>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008356:	d00f      	beq.n	8008378 <TIM_Base_SetConfig+0x40>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	4a3d      	ldr	r2, [pc, #244]	@ (8008450 <TIM_Base_SetConfig+0x118>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d00b      	beq.n	8008378 <TIM_Base_SetConfig+0x40>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	4a3c      	ldr	r2, [pc, #240]	@ (8008454 <TIM_Base_SetConfig+0x11c>)
 8008364:	4293      	cmp	r3, r2
 8008366:	d007      	beq.n	8008378 <TIM_Base_SetConfig+0x40>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	4a3b      	ldr	r2, [pc, #236]	@ (8008458 <TIM_Base_SetConfig+0x120>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d003      	beq.n	8008378 <TIM_Base_SetConfig+0x40>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	4a3a      	ldr	r2, [pc, #232]	@ (800845c <TIM_Base_SetConfig+0x124>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d108      	bne.n	800838a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800837e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	685b      	ldr	r3, [r3, #4]
 8008384:	68fa      	ldr	r2, [r7, #12]
 8008386:	4313      	orrs	r3, r2
 8008388:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	4a2f      	ldr	r2, [pc, #188]	@ (800844c <TIM_Base_SetConfig+0x114>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d02b      	beq.n	80083ea <TIM_Base_SetConfig+0xb2>
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008398:	d027      	beq.n	80083ea <TIM_Base_SetConfig+0xb2>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	4a2c      	ldr	r2, [pc, #176]	@ (8008450 <TIM_Base_SetConfig+0x118>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d023      	beq.n	80083ea <TIM_Base_SetConfig+0xb2>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	4a2b      	ldr	r2, [pc, #172]	@ (8008454 <TIM_Base_SetConfig+0x11c>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d01f      	beq.n	80083ea <TIM_Base_SetConfig+0xb2>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	4a2a      	ldr	r2, [pc, #168]	@ (8008458 <TIM_Base_SetConfig+0x120>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d01b      	beq.n	80083ea <TIM_Base_SetConfig+0xb2>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	4a29      	ldr	r2, [pc, #164]	@ (800845c <TIM_Base_SetConfig+0x124>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d017      	beq.n	80083ea <TIM_Base_SetConfig+0xb2>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	4a28      	ldr	r2, [pc, #160]	@ (8008460 <TIM_Base_SetConfig+0x128>)
 80083be:	4293      	cmp	r3, r2
 80083c0:	d013      	beq.n	80083ea <TIM_Base_SetConfig+0xb2>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	4a27      	ldr	r2, [pc, #156]	@ (8008464 <TIM_Base_SetConfig+0x12c>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d00f      	beq.n	80083ea <TIM_Base_SetConfig+0xb2>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	4a26      	ldr	r2, [pc, #152]	@ (8008468 <TIM_Base_SetConfig+0x130>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d00b      	beq.n	80083ea <TIM_Base_SetConfig+0xb2>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	4a25      	ldr	r2, [pc, #148]	@ (800846c <TIM_Base_SetConfig+0x134>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d007      	beq.n	80083ea <TIM_Base_SetConfig+0xb2>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	4a24      	ldr	r2, [pc, #144]	@ (8008470 <TIM_Base_SetConfig+0x138>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d003      	beq.n	80083ea <TIM_Base_SetConfig+0xb2>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	4a23      	ldr	r2, [pc, #140]	@ (8008474 <TIM_Base_SetConfig+0x13c>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d108      	bne.n	80083fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80083f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	68db      	ldr	r3, [r3, #12]
 80083f6:	68fa      	ldr	r2, [r7, #12]
 80083f8:	4313      	orrs	r3, r2
 80083fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	695b      	ldr	r3, [r3, #20]
 8008406:	4313      	orrs	r3, r2
 8008408:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	68fa      	ldr	r2, [r7, #12]
 800840e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	689a      	ldr	r2, [r3, #8]
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	681a      	ldr	r2, [r3, #0]
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	4a0a      	ldr	r2, [pc, #40]	@ (800844c <TIM_Base_SetConfig+0x114>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d003      	beq.n	8008430 <TIM_Base_SetConfig+0xf8>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	4a0c      	ldr	r2, [pc, #48]	@ (800845c <TIM_Base_SetConfig+0x124>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d103      	bne.n	8008438 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	691a      	ldr	r2, [r3, #16]
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2201      	movs	r2, #1
 800843c:	615a      	str	r2, [r3, #20]
}
 800843e:	bf00      	nop
 8008440:	3714      	adds	r7, #20
 8008442:	46bd      	mov	sp, r7
 8008444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008448:	4770      	bx	lr
 800844a:	bf00      	nop
 800844c:	40010000 	.word	0x40010000
 8008450:	40000400 	.word	0x40000400
 8008454:	40000800 	.word	0x40000800
 8008458:	40000c00 	.word	0x40000c00
 800845c:	40010400 	.word	0x40010400
 8008460:	40014000 	.word	0x40014000
 8008464:	40014400 	.word	0x40014400
 8008468:	40014800 	.word	0x40014800
 800846c:	40001800 	.word	0x40001800
 8008470:	40001c00 	.word	0x40001c00
 8008474:	40002000 	.word	0x40002000

08008478 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008478:	b480      	push	{r7}
 800847a:	b087      	sub	sp, #28
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
 8008480:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6a1b      	ldr	r3, [r3, #32]
 8008486:	f023 0201 	bic.w	r2, r3, #1
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6a1b      	ldr	r3, [r3, #32]
 8008492:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	685b      	ldr	r3, [r3, #4]
 8008498:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	699b      	ldr	r3, [r3, #24]
 800849e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80084a0:	68fa      	ldr	r2, [r7, #12]
 80084a2:	4b2b      	ldr	r3, [pc, #172]	@ (8008550 <TIM_OC1_SetConfig+0xd8>)
 80084a4:	4013      	ands	r3, r2
 80084a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	f023 0303 	bic.w	r3, r3, #3
 80084ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	68fa      	ldr	r2, [r7, #12]
 80084b6:	4313      	orrs	r3, r2
 80084b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80084ba:	697b      	ldr	r3, [r7, #20]
 80084bc:	f023 0302 	bic.w	r3, r3, #2
 80084c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	689b      	ldr	r3, [r3, #8]
 80084c6:	697a      	ldr	r2, [r7, #20]
 80084c8:	4313      	orrs	r3, r2
 80084ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	4a21      	ldr	r2, [pc, #132]	@ (8008554 <TIM_OC1_SetConfig+0xdc>)
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d003      	beq.n	80084dc <TIM_OC1_SetConfig+0x64>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	4a20      	ldr	r2, [pc, #128]	@ (8008558 <TIM_OC1_SetConfig+0xe0>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d10c      	bne.n	80084f6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80084dc:	697b      	ldr	r3, [r7, #20]
 80084de:	f023 0308 	bic.w	r3, r3, #8
 80084e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	68db      	ldr	r3, [r3, #12]
 80084e8:	697a      	ldr	r2, [r7, #20]
 80084ea:	4313      	orrs	r3, r2
 80084ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	f023 0304 	bic.w	r3, r3, #4
 80084f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	4a16      	ldr	r2, [pc, #88]	@ (8008554 <TIM_OC1_SetConfig+0xdc>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d003      	beq.n	8008506 <TIM_OC1_SetConfig+0x8e>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	4a15      	ldr	r2, [pc, #84]	@ (8008558 <TIM_OC1_SetConfig+0xe0>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d111      	bne.n	800852a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008506:	693b      	ldr	r3, [r7, #16]
 8008508:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800850c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008514:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	695b      	ldr	r3, [r3, #20]
 800851a:	693a      	ldr	r2, [r7, #16]
 800851c:	4313      	orrs	r3, r2
 800851e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	699b      	ldr	r3, [r3, #24]
 8008524:	693a      	ldr	r2, [r7, #16]
 8008526:	4313      	orrs	r3, r2
 8008528:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	693a      	ldr	r2, [r7, #16]
 800852e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	68fa      	ldr	r2, [r7, #12]
 8008534:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	685a      	ldr	r2, [r3, #4]
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	697a      	ldr	r2, [r7, #20]
 8008542:	621a      	str	r2, [r3, #32]
}
 8008544:	bf00      	nop
 8008546:	371c      	adds	r7, #28
 8008548:	46bd      	mov	sp, r7
 800854a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854e:	4770      	bx	lr
 8008550:	fffeff8f 	.word	0xfffeff8f
 8008554:	40010000 	.word	0x40010000
 8008558:	40010400 	.word	0x40010400

0800855c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800855c:	b480      	push	{r7}
 800855e:	b087      	sub	sp, #28
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
 8008564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6a1b      	ldr	r3, [r3, #32]
 800856a:	f023 0210 	bic.w	r2, r3, #16
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6a1b      	ldr	r3, [r3, #32]
 8008576:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	685b      	ldr	r3, [r3, #4]
 800857c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	699b      	ldr	r3, [r3, #24]
 8008582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008584:	68fa      	ldr	r2, [r7, #12]
 8008586:	4b2e      	ldr	r3, [pc, #184]	@ (8008640 <TIM_OC2_SetConfig+0xe4>)
 8008588:	4013      	ands	r3, r2
 800858a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008592:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	021b      	lsls	r3, r3, #8
 800859a:	68fa      	ldr	r2, [r7, #12]
 800859c:	4313      	orrs	r3, r2
 800859e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	f023 0320 	bic.w	r3, r3, #32
 80085a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	689b      	ldr	r3, [r3, #8]
 80085ac:	011b      	lsls	r3, r3, #4
 80085ae:	697a      	ldr	r2, [r7, #20]
 80085b0:	4313      	orrs	r3, r2
 80085b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	4a23      	ldr	r2, [pc, #140]	@ (8008644 <TIM_OC2_SetConfig+0xe8>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d003      	beq.n	80085c4 <TIM_OC2_SetConfig+0x68>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	4a22      	ldr	r2, [pc, #136]	@ (8008648 <TIM_OC2_SetConfig+0xec>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d10d      	bne.n	80085e0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80085ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	68db      	ldr	r3, [r3, #12]
 80085d0:	011b      	lsls	r3, r3, #4
 80085d2:	697a      	ldr	r2, [r7, #20]
 80085d4:	4313      	orrs	r3, r2
 80085d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80085d8:	697b      	ldr	r3, [r7, #20]
 80085da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80085de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	4a18      	ldr	r2, [pc, #96]	@ (8008644 <TIM_OC2_SetConfig+0xe8>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d003      	beq.n	80085f0 <TIM_OC2_SetConfig+0x94>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	4a17      	ldr	r2, [pc, #92]	@ (8008648 <TIM_OC2_SetConfig+0xec>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d113      	bne.n	8008618 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80085f0:	693b      	ldr	r3, [r7, #16]
 80085f2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80085f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80085f8:	693b      	ldr	r3, [r7, #16]
 80085fa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80085fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	695b      	ldr	r3, [r3, #20]
 8008604:	009b      	lsls	r3, r3, #2
 8008606:	693a      	ldr	r2, [r7, #16]
 8008608:	4313      	orrs	r3, r2
 800860a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	699b      	ldr	r3, [r3, #24]
 8008610:	009b      	lsls	r3, r3, #2
 8008612:	693a      	ldr	r2, [r7, #16]
 8008614:	4313      	orrs	r3, r2
 8008616:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	693a      	ldr	r2, [r7, #16]
 800861c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	68fa      	ldr	r2, [r7, #12]
 8008622:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	685a      	ldr	r2, [r3, #4]
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	697a      	ldr	r2, [r7, #20]
 8008630:	621a      	str	r2, [r3, #32]
}
 8008632:	bf00      	nop
 8008634:	371c      	adds	r7, #28
 8008636:	46bd      	mov	sp, r7
 8008638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863c:	4770      	bx	lr
 800863e:	bf00      	nop
 8008640:	feff8fff 	.word	0xfeff8fff
 8008644:	40010000 	.word	0x40010000
 8008648:	40010400 	.word	0x40010400

0800864c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800864c:	b480      	push	{r7}
 800864e:	b087      	sub	sp, #28
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
 8008654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6a1b      	ldr	r3, [r3, #32]
 800865a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6a1b      	ldr	r3, [r3, #32]
 8008666:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	69db      	ldr	r3, [r3, #28]
 8008672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008674:	68fa      	ldr	r2, [r7, #12]
 8008676:	4b2d      	ldr	r3, [pc, #180]	@ (800872c <TIM_OC3_SetConfig+0xe0>)
 8008678:	4013      	ands	r3, r2
 800867a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	f023 0303 	bic.w	r3, r3, #3
 8008682:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	68fa      	ldr	r2, [r7, #12]
 800868a:	4313      	orrs	r3, r2
 800868c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008694:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	689b      	ldr	r3, [r3, #8]
 800869a:	021b      	lsls	r3, r3, #8
 800869c:	697a      	ldr	r2, [r7, #20]
 800869e:	4313      	orrs	r3, r2
 80086a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	4a22      	ldr	r2, [pc, #136]	@ (8008730 <TIM_OC3_SetConfig+0xe4>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d003      	beq.n	80086b2 <TIM_OC3_SetConfig+0x66>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	4a21      	ldr	r2, [pc, #132]	@ (8008734 <TIM_OC3_SetConfig+0xe8>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d10d      	bne.n	80086ce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80086b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	68db      	ldr	r3, [r3, #12]
 80086be:	021b      	lsls	r3, r3, #8
 80086c0:	697a      	ldr	r2, [r7, #20]
 80086c2:	4313      	orrs	r3, r2
 80086c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80086cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	4a17      	ldr	r2, [pc, #92]	@ (8008730 <TIM_OC3_SetConfig+0xe4>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d003      	beq.n	80086de <TIM_OC3_SetConfig+0x92>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	4a16      	ldr	r2, [pc, #88]	@ (8008734 <TIM_OC3_SetConfig+0xe8>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	d113      	bne.n	8008706 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80086de:	693b      	ldr	r3, [r7, #16]
 80086e0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80086e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80086ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	695b      	ldr	r3, [r3, #20]
 80086f2:	011b      	lsls	r3, r3, #4
 80086f4:	693a      	ldr	r2, [r7, #16]
 80086f6:	4313      	orrs	r3, r2
 80086f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	699b      	ldr	r3, [r3, #24]
 80086fe:	011b      	lsls	r3, r3, #4
 8008700:	693a      	ldr	r2, [r7, #16]
 8008702:	4313      	orrs	r3, r2
 8008704:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	693a      	ldr	r2, [r7, #16]
 800870a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	68fa      	ldr	r2, [r7, #12]
 8008710:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	685a      	ldr	r2, [r3, #4]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	697a      	ldr	r2, [r7, #20]
 800871e:	621a      	str	r2, [r3, #32]
}
 8008720:	bf00      	nop
 8008722:	371c      	adds	r7, #28
 8008724:	46bd      	mov	sp, r7
 8008726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872a:	4770      	bx	lr
 800872c:	fffeff8f 	.word	0xfffeff8f
 8008730:	40010000 	.word	0x40010000
 8008734:	40010400 	.word	0x40010400

08008738 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008738:	b480      	push	{r7}
 800873a:	b087      	sub	sp, #28
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
 8008740:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6a1b      	ldr	r3, [r3, #32]
 8008746:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6a1b      	ldr	r3, [r3, #32]
 8008752:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	685b      	ldr	r3, [r3, #4]
 8008758:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	69db      	ldr	r3, [r3, #28]
 800875e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008760:	68fa      	ldr	r2, [r7, #12]
 8008762:	4b1e      	ldr	r3, [pc, #120]	@ (80087dc <TIM_OC4_SetConfig+0xa4>)
 8008764:	4013      	ands	r3, r2
 8008766:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800876e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	021b      	lsls	r3, r3, #8
 8008776:	68fa      	ldr	r2, [r7, #12]
 8008778:	4313      	orrs	r3, r2
 800877a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008782:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	689b      	ldr	r3, [r3, #8]
 8008788:	031b      	lsls	r3, r3, #12
 800878a:	693a      	ldr	r2, [r7, #16]
 800878c:	4313      	orrs	r3, r2
 800878e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	4a13      	ldr	r2, [pc, #76]	@ (80087e0 <TIM_OC4_SetConfig+0xa8>)
 8008794:	4293      	cmp	r3, r2
 8008796:	d003      	beq.n	80087a0 <TIM_OC4_SetConfig+0x68>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	4a12      	ldr	r2, [pc, #72]	@ (80087e4 <TIM_OC4_SetConfig+0xac>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d109      	bne.n	80087b4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80087a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	695b      	ldr	r3, [r3, #20]
 80087ac:	019b      	lsls	r3, r3, #6
 80087ae:	697a      	ldr	r2, [r7, #20]
 80087b0:	4313      	orrs	r3, r2
 80087b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	697a      	ldr	r2, [r7, #20]
 80087b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	68fa      	ldr	r2, [r7, #12]
 80087be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	685a      	ldr	r2, [r3, #4]
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	693a      	ldr	r2, [r7, #16]
 80087cc:	621a      	str	r2, [r3, #32]
}
 80087ce:	bf00      	nop
 80087d0:	371c      	adds	r7, #28
 80087d2:	46bd      	mov	sp, r7
 80087d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d8:	4770      	bx	lr
 80087da:	bf00      	nop
 80087dc:	feff8fff 	.word	0xfeff8fff
 80087e0:	40010000 	.word	0x40010000
 80087e4:	40010400 	.word	0x40010400

080087e8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80087e8:	b480      	push	{r7}
 80087ea:	b087      	sub	sp, #28
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
 80087f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6a1b      	ldr	r3, [r3, #32]
 80087f6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6a1b      	ldr	r3, [r3, #32]
 8008802:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	685b      	ldr	r3, [r3, #4]
 8008808:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800880e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008810:	68fa      	ldr	r2, [r7, #12]
 8008812:	4b1b      	ldr	r3, [pc, #108]	@ (8008880 <TIM_OC5_SetConfig+0x98>)
 8008814:	4013      	ands	r3, r2
 8008816:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	68fa      	ldr	r2, [r7, #12]
 800881e:	4313      	orrs	r3, r2
 8008820:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008822:	693b      	ldr	r3, [r7, #16]
 8008824:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008828:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	689b      	ldr	r3, [r3, #8]
 800882e:	041b      	lsls	r3, r3, #16
 8008830:	693a      	ldr	r2, [r7, #16]
 8008832:	4313      	orrs	r3, r2
 8008834:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	4a12      	ldr	r2, [pc, #72]	@ (8008884 <TIM_OC5_SetConfig+0x9c>)
 800883a:	4293      	cmp	r3, r2
 800883c:	d003      	beq.n	8008846 <TIM_OC5_SetConfig+0x5e>
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	4a11      	ldr	r2, [pc, #68]	@ (8008888 <TIM_OC5_SetConfig+0xa0>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d109      	bne.n	800885a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800884c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	695b      	ldr	r3, [r3, #20]
 8008852:	021b      	lsls	r3, r3, #8
 8008854:	697a      	ldr	r2, [r7, #20]
 8008856:	4313      	orrs	r3, r2
 8008858:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	697a      	ldr	r2, [r7, #20]
 800885e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	68fa      	ldr	r2, [r7, #12]
 8008864:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	685a      	ldr	r2, [r3, #4]
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	693a      	ldr	r2, [r7, #16]
 8008872:	621a      	str	r2, [r3, #32]
}
 8008874:	bf00      	nop
 8008876:	371c      	adds	r7, #28
 8008878:	46bd      	mov	sp, r7
 800887a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887e:	4770      	bx	lr
 8008880:	fffeff8f 	.word	0xfffeff8f
 8008884:	40010000 	.word	0x40010000
 8008888:	40010400 	.word	0x40010400

0800888c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800888c:	b480      	push	{r7}
 800888e:	b087      	sub	sp, #28
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
 8008894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6a1b      	ldr	r3, [r3, #32]
 800889a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6a1b      	ldr	r3, [r3, #32]
 80088a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	685b      	ldr	r3, [r3, #4]
 80088ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80088b4:	68fa      	ldr	r2, [r7, #12]
 80088b6:	4b1c      	ldr	r3, [pc, #112]	@ (8008928 <TIM_OC6_SetConfig+0x9c>)
 80088b8:	4013      	ands	r3, r2
 80088ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	021b      	lsls	r3, r3, #8
 80088c2:	68fa      	ldr	r2, [r7, #12]
 80088c4:	4313      	orrs	r3, r2
 80088c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80088c8:	693b      	ldr	r3, [r7, #16]
 80088ca:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80088ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	689b      	ldr	r3, [r3, #8]
 80088d4:	051b      	lsls	r3, r3, #20
 80088d6:	693a      	ldr	r2, [r7, #16]
 80088d8:	4313      	orrs	r3, r2
 80088da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	4a13      	ldr	r2, [pc, #76]	@ (800892c <TIM_OC6_SetConfig+0xa0>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d003      	beq.n	80088ec <TIM_OC6_SetConfig+0x60>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	4a12      	ldr	r2, [pc, #72]	@ (8008930 <TIM_OC6_SetConfig+0xa4>)
 80088e8:	4293      	cmp	r3, r2
 80088ea:	d109      	bne.n	8008900 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80088ec:	697b      	ldr	r3, [r7, #20]
 80088ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80088f2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	695b      	ldr	r3, [r3, #20]
 80088f8:	029b      	lsls	r3, r3, #10
 80088fa:	697a      	ldr	r2, [r7, #20]
 80088fc:	4313      	orrs	r3, r2
 80088fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	697a      	ldr	r2, [r7, #20]
 8008904:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	68fa      	ldr	r2, [r7, #12]
 800890a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	685a      	ldr	r2, [r3, #4]
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	693a      	ldr	r2, [r7, #16]
 8008918:	621a      	str	r2, [r3, #32]
}
 800891a:	bf00      	nop
 800891c:	371c      	adds	r7, #28
 800891e:	46bd      	mov	sp, r7
 8008920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008924:	4770      	bx	lr
 8008926:	bf00      	nop
 8008928:	feff8fff 	.word	0xfeff8fff
 800892c:	40010000 	.word	0x40010000
 8008930:	40010400 	.word	0x40010400

08008934 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008934:	b480      	push	{r7}
 8008936:	b087      	sub	sp, #28
 8008938:	af00      	add	r7, sp, #0
 800893a:	60f8      	str	r0, [r7, #12]
 800893c:	60b9      	str	r1, [r7, #8]
 800893e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	6a1b      	ldr	r3, [r3, #32]
 8008944:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	6a1b      	ldr	r3, [r3, #32]
 800894a:	f023 0201 	bic.w	r2, r3, #1
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	699b      	ldr	r3, [r3, #24]
 8008956:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008958:	693b      	ldr	r3, [r7, #16]
 800895a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800895e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	011b      	lsls	r3, r3, #4
 8008964:	693a      	ldr	r2, [r7, #16]
 8008966:	4313      	orrs	r3, r2
 8008968:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	f023 030a 	bic.w	r3, r3, #10
 8008970:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008972:	697a      	ldr	r2, [r7, #20]
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	4313      	orrs	r3, r2
 8008978:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	693a      	ldr	r2, [r7, #16]
 800897e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	697a      	ldr	r2, [r7, #20]
 8008984:	621a      	str	r2, [r3, #32]
}
 8008986:	bf00      	nop
 8008988:	371c      	adds	r7, #28
 800898a:	46bd      	mov	sp, r7
 800898c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008990:	4770      	bx	lr

08008992 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008992:	b480      	push	{r7}
 8008994:	b087      	sub	sp, #28
 8008996:	af00      	add	r7, sp, #0
 8008998:	60f8      	str	r0, [r7, #12]
 800899a:	60b9      	str	r1, [r7, #8]
 800899c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	6a1b      	ldr	r3, [r3, #32]
 80089a2:	f023 0210 	bic.w	r2, r3, #16
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	699b      	ldr	r3, [r3, #24]
 80089ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	6a1b      	ldr	r3, [r3, #32]
 80089b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80089bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	031b      	lsls	r3, r3, #12
 80089c2:	697a      	ldr	r2, [r7, #20]
 80089c4:	4313      	orrs	r3, r2
 80089c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80089c8:	693b      	ldr	r3, [r7, #16]
 80089ca:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80089ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	011b      	lsls	r3, r3, #4
 80089d4:	693a      	ldr	r2, [r7, #16]
 80089d6:	4313      	orrs	r3, r2
 80089d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	697a      	ldr	r2, [r7, #20]
 80089de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	693a      	ldr	r2, [r7, #16]
 80089e4:	621a      	str	r2, [r3, #32]
}
 80089e6:	bf00      	nop
 80089e8:	371c      	adds	r7, #28
 80089ea:	46bd      	mov	sp, r7
 80089ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f0:	4770      	bx	lr

080089f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80089f2:	b480      	push	{r7}
 80089f4:	b085      	sub	sp, #20
 80089f6:	af00      	add	r7, sp, #0
 80089f8:	6078      	str	r0, [r7, #4]
 80089fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	689b      	ldr	r3, [r3, #8]
 8008a00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008a0a:	683a      	ldr	r2, [r7, #0]
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	4313      	orrs	r3, r2
 8008a10:	f043 0307 	orr.w	r3, r3, #7
 8008a14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	68fa      	ldr	r2, [r7, #12]
 8008a1a:	609a      	str	r2, [r3, #8]
}
 8008a1c:	bf00      	nop
 8008a1e:	3714      	adds	r7, #20
 8008a20:	46bd      	mov	sp, r7
 8008a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a26:	4770      	bx	lr

08008a28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b087      	sub	sp, #28
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	60f8      	str	r0, [r7, #12]
 8008a30:	60b9      	str	r1, [r7, #8]
 8008a32:	607a      	str	r2, [r7, #4]
 8008a34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	689b      	ldr	r3, [r3, #8]
 8008a3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008a42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	021a      	lsls	r2, r3, #8
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	431a      	orrs	r2, r3
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	4313      	orrs	r3, r2
 8008a50:	697a      	ldr	r2, [r7, #20]
 8008a52:	4313      	orrs	r3, r2
 8008a54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	697a      	ldr	r2, [r7, #20]
 8008a5a:	609a      	str	r2, [r3, #8]
}
 8008a5c:	bf00      	nop
 8008a5e:	371c      	adds	r7, #28
 8008a60:	46bd      	mov	sp, r7
 8008a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a66:	4770      	bx	lr

08008a68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b087      	sub	sp, #28
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	60f8      	str	r0, [r7, #12]
 8008a70:	60b9      	str	r1, [r7, #8]
 8008a72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	f003 031f 	and.w	r3, r3, #31
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8008a80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	6a1a      	ldr	r2, [r3, #32]
 8008a86:	697b      	ldr	r3, [r7, #20]
 8008a88:	43db      	mvns	r3, r3
 8008a8a:	401a      	ands	r2, r3
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	6a1a      	ldr	r2, [r3, #32]
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	f003 031f 	and.w	r3, r3, #31
 8008a9a:	6879      	ldr	r1, [r7, #4]
 8008a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8008aa0:	431a      	orrs	r2, r3
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	621a      	str	r2, [r3, #32]
}
 8008aa6:	bf00      	nop
 8008aa8:	371c      	adds	r7, #28
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab0:	4770      	bx	lr
	...

08008ab4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b085      	sub	sp, #20
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
 8008abc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008ac4:	2b01      	cmp	r3, #1
 8008ac6:	d101      	bne.n	8008acc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008ac8:	2302      	movs	r3, #2
 8008aca:	e06d      	b.n	8008ba8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2201      	movs	r2, #1
 8008ad0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2202      	movs	r2, #2
 8008ad8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	685b      	ldr	r3, [r3, #4]
 8008ae2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	689b      	ldr	r3, [r3, #8]
 8008aea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	4a30      	ldr	r2, [pc, #192]	@ (8008bb4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d004      	beq.n	8008b00 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	4a2f      	ldr	r2, [pc, #188]	@ (8008bb8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d108      	bne.n	8008b12 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008b06:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	685b      	ldr	r3, [r3, #4]
 8008b0c:	68fa      	ldr	r2, [r7, #12]
 8008b0e:	4313      	orrs	r3, r2
 8008b10:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b18:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	68fa      	ldr	r2, [r7, #12]
 8008b20:	4313      	orrs	r3, r2
 8008b22:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	68fa      	ldr	r2, [r7, #12]
 8008b2a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4a20      	ldr	r2, [pc, #128]	@ (8008bb4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d022      	beq.n	8008b7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b3e:	d01d      	beq.n	8008b7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	4a1d      	ldr	r2, [pc, #116]	@ (8008bbc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d018      	beq.n	8008b7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	4a1c      	ldr	r2, [pc, #112]	@ (8008bc0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d013      	beq.n	8008b7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	4a1a      	ldr	r2, [pc, #104]	@ (8008bc4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d00e      	beq.n	8008b7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4a15      	ldr	r2, [pc, #84]	@ (8008bb8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d009      	beq.n	8008b7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	4a16      	ldr	r2, [pc, #88]	@ (8008bc8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d004      	beq.n	8008b7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	4a15      	ldr	r2, [pc, #84]	@ (8008bcc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d10c      	bne.n	8008b96 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008b82:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	689b      	ldr	r3, [r3, #8]
 8008b88:	68ba      	ldr	r2, [r7, #8]
 8008b8a:	4313      	orrs	r3, r2
 8008b8c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	68ba      	ldr	r2, [r7, #8]
 8008b94:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2201      	movs	r2, #1
 8008b9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008ba6:	2300      	movs	r3, #0
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	3714      	adds	r7, #20
 8008bac:	46bd      	mov	sp, r7
 8008bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb2:	4770      	bx	lr
 8008bb4:	40010000 	.word	0x40010000
 8008bb8:	40010400 	.word	0x40010400
 8008bbc:	40000400 	.word	0x40000400
 8008bc0:	40000800 	.word	0x40000800
 8008bc4:	40000c00 	.word	0x40000c00
 8008bc8:	40014000 	.word	0x40014000
 8008bcc:	40001800 	.word	0x40001800

08008bd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	b083      	sub	sp, #12
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008bd8:	bf00      	nop
 8008bda:	370c      	adds	r7, #12
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be2:	4770      	bx	lr

08008be4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008be4:	b480      	push	{r7}
 8008be6:	b083      	sub	sp, #12
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008bec:	bf00      	nop
 8008bee:	370c      	adds	r7, #12
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf6:	4770      	bx	lr

08008bf8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b083      	sub	sp, #12
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008c00:	bf00      	nop
 8008c02:	370c      	adds	r7, #12
 8008c04:	46bd      	mov	sp, r7
 8008c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0a:	4770      	bx	lr

08008c0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b082      	sub	sp, #8
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d101      	bne.n	8008c1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	e040      	b.n	8008ca0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d106      	bne.n	8008c34 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2200      	movs	r2, #0
 8008c2a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f7fb fac6 	bl	80041c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2224      	movs	r2, #36	@ 0x24
 8008c38:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	681a      	ldr	r2, [r3, #0]
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f022 0201 	bic.w	r2, r2, #1
 8008c48:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f000 fc66 	bl	800951c <UART_SetConfig>
 8008c50:	4603      	mov	r3, r0
 8008c52:	2b01      	cmp	r3, #1
 8008c54:	d101      	bne.n	8008c5a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008c56:	2301      	movs	r3, #1
 8008c58:	e022      	b.n	8008ca0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d002      	beq.n	8008c68 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f000 febe 	bl	80099e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	685a      	ldr	r2, [r3, #4]
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008c76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	689a      	ldr	r2, [r3, #8]
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008c86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	681a      	ldr	r2, [r3, #0]
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f042 0201 	orr.w	r2, r2, #1
 8008c96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f000 ff45 	bl	8009b28 <UART_CheckIdleState>
 8008c9e:	4603      	mov	r3, r0
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3708      	adds	r7, #8
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}

08008ca8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b08a      	sub	sp, #40	@ 0x28
 8008cac:	af02      	add	r7, sp, #8
 8008cae:	60f8      	str	r0, [r7, #12]
 8008cb0:	60b9      	str	r1, [r7, #8]
 8008cb2:	603b      	str	r3, [r7, #0]
 8008cb4:	4613      	mov	r3, r2
 8008cb6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008cbc:	2b20      	cmp	r3, #32
 8008cbe:	d171      	bne.n	8008da4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d002      	beq.n	8008ccc <HAL_UART_Transmit+0x24>
 8008cc6:	88fb      	ldrh	r3, [r7, #6]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d101      	bne.n	8008cd0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008ccc:	2301      	movs	r3, #1
 8008cce:	e06a      	b.n	8008da6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	2221      	movs	r2, #33	@ 0x21
 8008cdc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008cde:	f7fb fd97 	bl	8004810 <HAL_GetTick>
 8008ce2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	88fa      	ldrh	r2, [r7, #6]
 8008ce8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	88fa      	ldrh	r2, [r7, #6]
 8008cf0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	689b      	ldr	r3, [r3, #8]
 8008cf8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008cfc:	d108      	bne.n	8008d10 <HAL_UART_Transmit+0x68>
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	691b      	ldr	r3, [r3, #16]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d104      	bne.n	8008d10 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8008d06:	2300      	movs	r3, #0
 8008d08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	61bb      	str	r3, [r7, #24]
 8008d0e:	e003      	b.n	8008d18 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008d14:	2300      	movs	r3, #0
 8008d16:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008d18:	e02c      	b.n	8008d74 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	9300      	str	r3, [sp, #0]
 8008d1e:	697b      	ldr	r3, [r7, #20]
 8008d20:	2200      	movs	r2, #0
 8008d22:	2180      	movs	r1, #128	@ 0x80
 8008d24:	68f8      	ldr	r0, [r7, #12]
 8008d26:	f000 ff36 	bl	8009b96 <UART_WaitOnFlagUntilTimeout>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d001      	beq.n	8008d34 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8008d30:	2303      	movs	r3, #3
 8008d32:	e038      	b.n	8008da6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8008d34:	69fb      	ldr	r3, [r7, #28]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d10b      	bne.n	8008d52 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008d3a:	69bb      	ldr	r3, [r7, #24]
 8008d3c:	881b      	ldrh	r3, [r3, #0]
 8008d3e:	461a      	mov	r2, r3
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d48:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008d4a:	69bb      	ldr	r3, [r7, #24]
 8008d4c:	3302      	adds	r3, #2
 8008d4e:	61bb      	str	r3, [r7, #24]
 8008d50:	e007      	b.n	8008d62 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008d52:	69fb      	ldr	r3, [r7, #28]
 8008d54:	781a      	ldrb	r2, [r3, #0]
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008d5c:	69fb      	ldr	r3, [r7, #28]
 8008d5e:	3301      	adds	r3, #1
 8008d60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008d68:	b29b      	uxth	r3, r3
 8008d6a:	3b01      	subs	r3, #1
 8008d6c:	b29a      	uxth	r2, r3
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008d7a:	b29b      	uxth	r3, r3
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d1cc      	bne.n	8008d1a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	9300      	str	r3, [sp, #0]
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	2200      	movs	r2, #0
 8008d88:	2140      	movs	r1, #64	@ 0x40
 8008d8a:	68f8      	ldr	r0, [r7, #12]
 8008d8c:	f000 ff03 	bl	8009b96 <UART_WaitOnFlagUntilTimeout>
 8008d90:	4603      	mov	r3, r0
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d001      	beq.n	8008d9a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8008d96:	2303      	movs	r3, #3
 8008d98:	e005      	b.n	8008da6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	2220      	movs	r2, #32
 8008d9e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8008da0:	2300      	movs	r3, #0
 8008da2:	e000      	b.n	8008da6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8008da4:	2302      	movs	r3, #2
  }
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3720      	adds	r7, #32
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}

08008dae <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008dae:	b580      	push	{r7, lr}
 8008db0:	b08a      	sub	sp, #40	@ 0x28
 8008db2:	af02      	add	r7, sp, #8
 8008db4:	60f8      	str	r0, [r7, #12]
 8008db6:	60b9      	str	r1, [r7, #8]
 8008db8:	603b      	str	r3, [r7, #0]
 8008dba:	4613      	mov	r3, r2
 8008dbc:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008dc4:	2b20      	cmp	r3, #32
 8008dc6:	f040 80b1 	bne.w	8008f2c <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008dca:	68bb      	ldr	r3, [r7, #8]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d002      	beq.n	8008dd6 <HAL_UART_Receive+0x28>
 8008dd0:	88fb      	ldrh	r3, [r7, #6]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d101      	bne.n	8008dda <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	e0a9      	b.n	8008f2e <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	2200      	movs	r2, #0
 8008dde:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	2222      	movs	r2, #34	@ 0x22
 8008de6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	2200      	movs	r2, #0
 8008dee:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008df0:	f7fb fd0e 	bl	8004810 <HAL_GetTick>
 8008df4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	88fa      	ldrh	r2, [r7, #6]
 8008dfa:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	88fa      	ldrh	r2, [r7, #6]
 8008e02:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	689b      	ldr	r3, [r3, #8]
 8008e0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e0e:	d10e      	bne.n	8008e2e <HAL_UART_Receive+0x80>
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	691b      	ldr	r3, [r3, #16]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d105      	bne.n	8008e24 <HAL_UART_Receive+0x76>
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8008e1e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008e22:	e02d      	b.n	8008e80 <HAL_UART_Receive+0xd2>
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	22ff      	movs	r2, #255	@ 0xff
 8008e28:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008e2c:	e028      	b.n	8008e80 <HAL_UART_Receive+0xd2>
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	689b      	ldr	r3, [r3, #8]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d10d      	bne.n	8008e52 <HAL_UART_Receive+0xa4>
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	691b      	ldr	r3, [r3, #16]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d104      	bne.n	8008e48 <HAL_UART_Receive+0x9a>
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	22ff      	movs	r2, #255	@ 0xff
 8008e42:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008e46:	e01b      	b.n	8008e80 <HAL_UART_Receive+0xd2>
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	227f      	movs	r2, #127	@ 0x7f
 8008e4c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008e50:	e016      	b.n	8008e80 <HAL_UART_Receive+0xd2>
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	689b      	ldr	r3, [r3, #8]
 8008e56:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008e5a:	d10d      	bne.n	8008e78 <HAL_UART_Receive+0xca>
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	691b      	ldr	r3, [r3, #16]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d104      	bne.n	8008e6e <HAL_UART_Receive+0xc0>
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	227f      	movs	r2, #127	@ 0x7f
 8008e68:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008e6c:	e008      	b.n	8008e80 <HAL_UART_Receive+0xd2>
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	223f      	movs	r2, #63	@ 0x3f
 8008e72:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008e76:	e003      	b.n	8008e80 <HAL_UART_Receive+0xd2>
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008e86:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	689b      	ldr	r3, [r3, #8]
 8008e8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e90:	d108      	bne.n	8008ea4 <HAL_UART_Receive+0xf6>
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	691b      	ldr	r3, [r3, #16]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d104      	bne.n	8008ea4 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	61bb      	str	r3, [r7, #24]
 8008ea2:	e003      	b.n	8008eac <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8008ea4:	68bb      	ldr	r3, [r7, #8]
 8008ea6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8008eac:	e032      	b.n	8008f14 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	9300      	str	r3, [sp, #0]
 8008eb2:	697b      	ldr	r3, [r7, #20]
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	2120      	movs	r1, #32
 8008eb8:	68f8      	ldr	r0, [r7, #12]
 8008eba:	f000 fe6c 	bl	8009b96 <UART_WaitOnFlagUntilTimeout>
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d001      	beq.n	8008ec8 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8008ec4:	2303      	movs	r3, #3
 8008ec6:	e032      	b.n	8008f2e <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8008ec8:	69fb      	ldr	r3, [r7, #28]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d10c      	bne.n	8008ee8 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ed4:	b29a      	uxth	r2, r3
 8008ed6:	8a7b      	ldrh	r3, [r7, #18]
 8008ed8:	4013      	ands	r3, r2
 8008eda:	b29a      	uxth	r2, r3
 8008edc:	69bb      	ldr	r3, [r7, #24]
 8008ede:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008ee0:	69bb      	ldr	r3, [r7, #24]
 8008ee2:	3302      	adds	r3, #2
 8008ee4:	61bb      	str	r3, [r7, #24]
 8008ee6:	e00c      	b.n	8008f02 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008eee:	b2da      	uxtb	r2, r3
 8008ef0:	8a7b      	ldrh	r3, [r7, #18]
 8008ef2:	b2db      	uxtb	r3, r3
 8008ef4:	4013      	ands	r3, r2
 8008ef6:	b2da      	uxtb	r2, r3
 8008ef8:	69fb      	ldr	r3, [r7, #28]
 8008efa:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8008efc:	69fb      	ldr	r3, [r7, #28]
 8008efe:	3301      	adds	r3, #1
 8008f00:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008f08:	b29b      	uxth	r3, r3
 8008f0a:	3b01      	subs	r3, #1
 8008f0c:	b29a      	uxth	r2, r3
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008f1a:	b29b      	uxth	r3, r3
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d1c6      	bne.n	8008eae <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	2220      	movs	r2, #32
 8008f24:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8008f28:	2300      	movs	r3, #0
 8008f2a:	e000      	b.n	8008f2e <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8008f2c:	2302      	movs	r3, #2
  }
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3720      	adds	r7, #32
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}
	...

08008f38 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b0ba      	sub	sp, #232	@ 0xe8
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	69db      	ldr	r3, [r3, #28]
 8008f46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	689b      	ldr	r3, [r3, #8]
 8008f5a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008f5e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008f62:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008f66:	4013      	ands	r3, r2
 8008f68:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008f6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d115      	bne.n	8008fa0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008f74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f78:	f003 0320 	and.w	r3, r3, #32
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d00f      	beq.n	8008fa0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008f80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f84:	f003 0320 	and.w	r3, r3, #32
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d009      	beq.n	8008fa0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	f000 8297 	beq.w	80094c4 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	4798      	blx	r3
      }
      return;
 8008f9e:	e291      	b.n	80094c4 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008fa0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	f000 8117 	beq.w	80091d8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008faa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008fae:	f003 0301 	and.w	r3, r3, #1
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d106      	bne.n	8008fc4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008fb6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008fba:	4b85      	ldr	r3, [pc, #532]	@ (80091d0 <HAL_UART_IRQHandler+0x298>)
 8008fbc:	4013      	ands	r3, r2
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	f000 810a 	beq.w	80091d8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008fc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008fc8:	f003 0301 	and.w	r3, r3, #1
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d011      	beq.n	8008ff4 <HAL_UART_IRQHandler+0xbc>
 8008fd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008fd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d00b      	beq.n	8008ff4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	2201      	movs	r2, #1
 8008fe2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008fea:	f043 0201 	orr.w	r2, r3, #1
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008ff4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ff8:	f003 0302 	and.w	r3, r3, #2
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d011      	beq.n	8009024 <HAL_UART_IRQHandler+0xec>
 8009000:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009004:	f003 0301 	and.w	r3, r3, #1
 8009008:	2b00      	cmp	r3, #0
 800900a:	d00b      	beq.n	8009024 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	2202      	movs	r2, #2
 8009012:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800901a:	f043 0204 	orr.w	r2, r3, #4
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009024:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009028:	f003 0304 	and.w	r3, r3, #4
 800902c:	2b00      	cmp	r3, #0
 800902e:	d011      	beq.n	8009054 <HAL_UART_IRQHandler+0x11c>
 8009030:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009034:	f003 0301 	and.w	r3, r3, #1
 8009038:	2b00      	cmp	r3, #0
 800903a:	d00b      	beq.n	8009054 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	2204      	movs	r2, #4
 8009042:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800904a:	f043 0202 	orr.w	r2, r3, #2
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009054:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009058:	f003 0308 	and.w	r3, r3, #8
 800905c:	2b00      	cmp	r3, #0
 800905e:	d017      	beq.n	8009090 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009060:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009064:	f003 0320 	and.w	r3, r3, #32
 8009068:	2b00      	cmp	r3, #0
 800906a:	d105      	bne.n	8009078 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800906c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009070:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009074:	2b00      	cmp	r3, #0
 8009076:	d00b      	beq.n	8009090 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	2208      	movs	r2, #8
 800907e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009086:	f043 0208 	orr.w	r2, r3, #8
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009090:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009094:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009098:	2b00      	cmp	r3, #0
 800909a:	d012      	beq.n	80090c2 <HAL_UART_IRQHandler+0x18a>
 800909c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80090a0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d00c      	beq.n	80090c2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80090b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80090b8:	f043 0220 	orr.w	r2, r3, #32
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	f000 81fd 	beq.w	80094c8 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80090ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80090d2:	f003 0320 	and.w	r3, r3, #32
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d00d      	beq.n	80090f6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80090da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80090de:	f003 0320 	and.w	r3, r3, #32
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d007      	beq.n	80090f6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d003      	beq.n	80090f6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80090fc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	689b      	ldr	r3, [r3, #8]
 8009106:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800910a:	2b40      	cmp	r3, #64	@ 0x40
 800910c:	d005      	beq.n	800911a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800910e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009112:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009116:	2b00      	cmp	r3, #0
 8009118:	d04f      	beq.n	80091ba <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f000 fe01 	bl	8009d22 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	689b      	ldr	r3, [r3, #8]
 8009126:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800912a:	2b40      	cmp	r3, #64	@ 0x40
 800912c:	d141      	bne.n	80091b2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	3308      	adds	r3, #8
 8009134:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009138:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800913c:	e853 3f00 	ldrex	r3, [r3]
 8009140:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009144:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009148:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800914c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	3308      	adds	r3, #8
 8009156:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800915a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800915e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009162:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009166:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800916a:	e841 2300 	strex	r3, r2, [r1]
 800916e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009172:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009176:	2b00      	cmp	r3, #0
 8009178:	d1d9      	bne.n	800912e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800917e:	2b00      	cmp	r3, #0
 8009180:	d013      	beq.n	80091aa <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009186:	4a13      	ldr	r2, [pc, #76]	@ (80091d4 <HAL_UART_IRQHandler+0x29c>)
 8009188:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800918e:	4618      	mov	r0, r3
 8009190:	f7fb fdda 	bl	8004d48 <HAL_DMA_Abort_IT>
 8009194:	4603      	mov	r3, r0
 8009196:	2b00      	cmp	r3, #0
 8009198:	d017      	beq.n	80091ca <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800919e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091a0:	687a      	ldr	r2, [r7, #4]
 80091a2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80091a4:	4610      	mov	r0, r2
 80091a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091a8:	e00f      	b.n	80091ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f000 f9a0 	bl	80094f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091b0:	e00b      	b.n	80091ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f000 f99c 	bl	80094f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091b8:	e007      	b.n	80091ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f000 f998 	bl	80094f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2200      	movs	r2, #0
 80091c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80091c8:	e17e      	b.n	80094c8 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091ca:	bf00      	nop
    return;
 80091cc:	e17c      	b.n	80094c8 <HAL_UART_IRQHandler+0x590>
 80091ce:	bf00      	nop
 80091d0:	04000120 	.word	0x04000120
 80091d4:	08009deb 	.word	0x08009deb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80091dc:	2b01      	cmp	r3, #1
 80091de:	f040 814c 	bne.w	800947a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80091e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091e6:	f003 0310 	and.w	r3, r3, #16
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	f000 8145 	beq.w	800947a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80091f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80091f4:	f003 0310 	and.w	r3, r3, #16
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	f000 813e 	beq.w	800947a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	2210      	movs	r2, #16
 8009204:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	689b      	ldr	r3, [r3, #8]
 800920c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009210:	2b40      	cmp	r3, #64	@ 0x40
 8009212:	f040 80b6 	bne.w	8009382 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	685b      	ldr	r3, [r3, #4]
 800921e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009222:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009226:	2b00      	cmp	r3, #0
 8009228:	f000 8150 	beq.w	80094cc <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009232:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009236:	429a      	cmp	r2, r3
 8009238:	f080 8148 	bcs.w	80094cc <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009242:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800924a:	69db      	ldr	r3, [r3, #28]
 800924c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009250:	f000 8086 	beq.w	8009360 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800925c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009260:	e853 3f00 	ldrex	r3, [r3]
 8009264:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009268:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800926c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009270:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	461a      	mov	r2, r3
 800927a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800927e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009282:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009286:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800928a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800928e:	e841 2300 	strex	r3, r2, [r1]
 8009292:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009296:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800929a:	2b00      	cmp	r3, #0
 800929c:	d1da      	bne.n	8009254 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	3308      	adds	r3, #8
 80092a4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80092a8:	e853 3f00 	ldrex	r3, [r3]
 80092ac:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80092ae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80092b0:	f023 0301 	bic.w	r3, r3, #1
 80092b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	3308      	adds	r3, #8
 80092be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80092c2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80092c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092c8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80092ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80092ce:	e841 2300 	strex	r3, r2, [r1]
 80092d2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80092d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d1e1      	bne.n	800929e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	3308      	adds	r3, #8
 80092e0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80092e4:	e853 3f00 	ldrex	r3, [r3]
 80092e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80092ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80092ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80092f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	3308      	adds	r3, #8
 80092fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80092fe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009300:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009302:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009304:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009306:	e841 2300 	strex	r3, r2, [r1]
 800930a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800930c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800930e:	2b00      	cmp	r3, #0
 8009310:	d1e3      	bne.n	80092da <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2220      	movs	r2, #32
 8009316:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2200      	movs	r2, #0
 800931e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009326:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009328:	e853 3f00 	ldrex	r3, [r3]
 800932c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800932e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009330:	f023 0310 	bic.w	r3, r3, #16
 8009334:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	461a      	mov	r2, r3
 800933e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009342:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009344:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009346:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009348:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800934a:	e841 2300 	strex	r3, r2, [r1]
 800934e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009350:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009352:	2b00      	cmp	r3, #0
 8009354:	d1e4      	bne.n	8009320 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800935a:	4618      	mov	r0, r3
 800935c:	f7fb fc84 	bl	8004c68 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2202      	movs	r2, #2
 8009364:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009372:	b29b      	uxth	r3, r3
 8009374:	1ad3      	subs	r3, r2, r3
 8009376:	b29b      	uxth	r3, r3
 8009378:	4619      	mov	r1, r3
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f000 f8c2 	bl	8009504 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009380:	e0a4      	b.n	80094cc <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800938e:	b29b      	uxth	r3, r3
 8009390:	1ad3      	subs	r3, r2, r3
 8009392:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800939c:	b29b      	uxth	r3, r3
 800939e:	2b00      	cmp	r3, #0
 80093a0:	f000 8096 	beq.w	80094d0 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 80093a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	f000 8091 	beq.w	80094d0 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093b6:	e853 3f00 	ldrex	r3, [r3]
 80093ba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80093bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093be:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80093c2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	461a      	mov	r2, r3
 80093cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80093d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80093d2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80093d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80093d8:	e841 2300 	strex	r3, r2, [r1]
 80093dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80093de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d1e4      	bne.n	80093ae <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	3308      	adds	r3, #8
 80093ea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093ee:	e853 3f00 	ldrex	r3, [r3]
 80093f2:	623b      	str	r3, [r7, #32]
   return(result);
 80093f4:	6a3b      	ldr	r3, [r7, #32]
 80093f6:	f023 0301 	bic.w	r3, r3, #1
 80093fa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	3308      	adds	r3, #8
 8009404:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009408:	633a      	str	r2, [r7, #48]	@ 0x30
 800940a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800940c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800940e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009410:	e841 2300 	strex	r3, r2, [r1]
 8009414:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009418:	2b00      	cmp	r3, #0
 800941a:	d1e3      	bne.n	80093e4 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2220      	movs	r2, #32
 8009420:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2200      	movs	r2, #0
 8009428:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2200      	movs	r2, #0
 800942e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009436:	693b      	ldr	r3, [r7, #16]
 8009438:	e853 3f00 	ldrex	r3, [r3]
 800943c:	60fb      	str	r3, [r7, #12]
   return(result);
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	f023 0310 	bic.w	r3, r3, #16
 8009444:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	461a      	mov	r2, r3
 800944e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009452:	61fb      	str	r3, [r7, #28]
 8009454:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009456:	69b9      	ldr	r1, [r7, #24]
 8009458:	69fa      	ldr	r2, [r7, #28]
 800945a:	e841 2300 	strex	r3, r2, [r1]
 800945e:	617b      	str	r3, [r7, #20]
   return(result);
 8009460:	697b      	ldr	r3, [r7, #20]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d1e4      	bne.n	8009430 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2202      	movs	r2, #2
 800946a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800946c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009470:	4619      	mov	r1, r3
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f000 f846 	bl	8009504 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009478:	e02a      	b.n	80094d0 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800947a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800947e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009482:	2b00      	cmp	r3, #0
 8009484:	d00e      	beq.n	80094a4 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009486:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800948a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800948e:	2b00      	cmp	r3, #0
 8009490:	d008      	beq.n	80094a4 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009496:	2b00      	cmp	r3, #0
 8009498:	d01c      	beq.n	80094d4 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	4798      	blx	r3
    }
    return;
 80094a2:	e017      	b.n	80094d4 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80094a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d012      	beq.n	80094d6 <HAL_UART_IRQHandler+0x59e>
 80094b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80094b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d00c      	beq.n	80094d6 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	f000 fcaa 	bl	8009e16 <UART_EndTransmit_IT>
    return;
 80094c2:	e008      	b.n	80094d6 <HAL_UART_IRQHandler+0x59e>
      return;
 80094c4:	bf00      	nop
 80094c6:	e006      	b.n	80094d6 <HAL_UART_IRQHandler+0x59e>
    return;
 80094c8:	bf00      	nop
 80094ca:	e004      	b.n	80094d6 <HAL_UART_IRQHandler+0x59e>
      return;
 80094cc:	bf00      	nop
 80094ce:	e002      	b.n	80094d6 <HAL_UART_IRQHandler+0x59e>
      return;
 80094d0:	bf00      	nop
 80094d2:	e000      	b.n	80094d6 <HAL_UART_IRQHandler+0x59e>
    return;
 80094d4:	bf00      	nop
  }

}
 80094d6:	37e8      	adds	r7, #232	@ 0xe8
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}

080094dc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80094dc:	b480      	push	{r7}
 80094de:	b083      	sub	sp, #12
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80094e4:	bf00      	nop
 80094e6:	370c      	adds	r7, #12
 80094e8:	46bd      	mov	sp, r7
 80094ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ee:	4770      	bx	lr

080094f0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80094f0:	b480      	push	{r7}
 80094f2:	b083      	sub	sp, #12
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80094f8:	bf00      	nop
 80094fa:	370c      	adds	r7, #12
 80094fc:	46bd      	mov	sp, r7
 80094fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009502:	4770      	bx	lr

08009504 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009504:	b480      	push	{r7}
 8009506:	b083      	sub	sp, #12
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
 800950c:	460b      	mov	r3, r1
 800950e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009510:	bf00      	nop
 8009512:	370c      	adds	r7, #12
 8009514:	46bd      	mov	sp, r7
 8009516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951a:	4770      	bx	lr

0800951c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b088      	sub	sp, #32
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009524:	2300      	movs	r3, #0
 8009526:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	689a      	ldr	r2, [r3, #8]
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	691b      	ldr	r3, [r3, #16]
 8009530:	431a      	orrs	r2, r3
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	695b      	ldr	r3, [r3, #20]
 8009536:	431a      	orrs	r2, r3
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	69db      	ldr	r3, [r3, #28]
 800953c:	4313      	orrs	r3, r2
 800953e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	681a      	ldr	r2, [r3, #0]
 8009546:	4ba6      	ldr	r3, [pc, #664]	@ (80097e0 <UART_SetConfig+0x2c4>)
 8009548:	4013      	ands	r3, r2
 800954a:	687a      	ldr	r2, [r7, #4]
 800954c:	6812      	ldr	r2, [r2, #0]
 800954e:	6979      	ldr	r1, [r7, #20]
 8009550:	430b      	orrs	r3, r1
 8009552:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	685b      	ldr	r3, [r3, #4]
 800955a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	68da      	ldr	r2, [r3, #12]
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	430a      	orrs	r2, r1
 8009568:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	699b      	ldr	r3, [r3, #24]
 800956e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	6a1b      	ldr	r3, [r3, #32]
 8009574:	697a      	ldr	r2, [r7, #20]
 8009576:	4313      	orrs	r3, r2
 8009578:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	689b      	ldr	r3, [r3, #8]
 8009580:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	697a      	ldr	r2, [r7, #20]
 800958a:	430a      	orrs	r2, r1
 800958c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	4a94      	ldr	r2, [pc, #592]	@ (80097e4 <UART_SetConfig+0x2c8>)
 8009594:	4293      	cmp	r3, r2
 8009596:	d120      	bne.n	80095da <UART_SetConfig+0xbe>
 8009598:	4b93      	ldr	r3, [pc, #588]	@ (80097e8 <UART_SetConfig+0x2cc>)
 800959a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800959e:	f003 0303 	and.w	r3, r3, #3
 80095a2:	2b03      	cmp	r3, #3
 80095a4:	d816      	bhi.n	80095d4 <UART_SetConfig+0xb8>
 80095a6:	a201      	add	r2, pc, #4	@ (adr r2, 80095ac <UART_SetConfig+0x90>)
 80095a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095ac:	080095bd 	.word	0x080095bd
 80095b0:	080095c9 	.word	0x080095c9
 80095b4:	080095c3 	.word	0x080095c3
 80095b8:	080095cf 	.word	0x080095cf
 80095bc:	2301      	movs	r3, #1
 80095be:	77fb      	strb	r3, [r7, #31]
 80095c0:	e150      	b.n	8009864 <UART_SetConfig+0x348>
 80095c2:	2302      	movs	r3, #2
 80095c4:	77fb      	strb	r3, [r7, #31]
 80095c6:	e14d      	b.n	8009864 <UART_SetConfig+0x348>
 80095c8:	2304      	movs	r3, #4
 80095ca:	77fb      	strb	r3, [r7, #31]
 80095cc:	e14a      	b.n	8009864 <UART_SetConfig+0x348>
 80095ce:	2308      	movs	r3, #8
 80095d0:	77fb      	strb	r3, [r7, #31]
 80095d2:	e147      	b.n	8009864 <UART_SetConfig+0x348>
 80095d4:	2310      	movs	r3, #16
 80095d6:	77fb      	strb	r3, [r7, #31]
 80095d8:	e144      	b.n	8009864 <UART_SetConfig+0x348>
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	4a83      	ldr	r2, [pc, #524]	@ (80097ec <UART_SetConfig+0x2d0>)
 80095e0:	4293      	cmp	r3, r2
 80095e2:	d132      	bne.n	800964a <UART_SetConfig+0x12e>
 80095e4:	4b80      	ldr	r3, [pc, #512]	@ (80097e8 <UART_SetConfig+0x2cc>)
 80095e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095ea:	f003 030c 	and.w	r3, r3, #12
 80095ee:	2b0c      	cmp	r3, #12
 80095f0:	d828      	bhi.n	8009644 <UART_SetConfig+0x128>
 80095f2:	a201      	add	r2, pc, #4	@ (adr r2, 80095f8 <UART_SetConfig+0xdc>)
 80095f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095f8:	0800962d 	.word	0x0800962d
 80095fc:	08009645 	.word	0x08009645
 8009600:	08009645 	.word	0x08009645
 8009604:	08009645 	.word	0x08009645
 8009608:	08009639 	.word	0x08009639
 800960c:	08009645 	.word	0x08009645
 8009610:	08009645 	.word	0x08009645
 8009614:	08009645 	.word	0x08009645
 8009618:	08009633 	.word	0x08009633
 800961c:	08009645 	.word	0x08009645
 8009620:	08009645 	.word	0x08009645
 8009624:	08009645 	.word	0x08009645
 8009628:	0800963f 	.word	0x0800963f
 800962c:	2300      	movs	r3, #0
 800962e:	77fb      	strb	r3, [r7, #31]
 8009630:	e118      	b.n	8009864 <UART_SetConfig+0x348>
 8009632:	2302      	movs	r3, #2
 8009634:	77fb      	strb	r3, [r7, #31]
 8009636:	e115      	b.n	8009864 <UART_SetConfig+0x348>
 8009638:	2304      	movs	r3, #4
 800963a:	77fb      	strb	r3, [r7, #31]
 800963c:	e112      	b.n	8009864 <UART_SetConfig+0x348>
 800963e:	2308      	movs	r3, #8
 8009640:	77fb      	strb	r3, [r7, #31]
 8009642:	e10f      	b.n	8009864 <UART_SetConfig+0x348>
 8009644:	2310      	movs	r3, #16
 8009646:	77fb      	strb	r3, [r7, #31]
 8009648:	e10c      	b.n	8009864 <UART_SetConfig+0x348>
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	4a68      	ldr	r2, [pc, #416]	@ (80097f0 <UART_SetConfig+0x2d4>)
 8009650:	4293      	cmp	r3, r2
 8009652:	d120      	bne.n	8009696 <UART_SetConfig+0x17a>
 8009654:	4b64      	ldr	r3, [pc, #400]	@ (80097e8 <UART_SetConfig+0x2cc>)
 8009656:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800965a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800965e:	2b30      	cmp	r3, #48	@ 0x30
 8009660:	d013      	beq.n	800968a <UART_SetConfig+0x16e>
 8009662:	2b30      	cmp	r3, #48	@ 0x30
 8009664:	d814      	bhi.n	8009690 <UART_SetConfig+0x174>
 8009666:	2b20      	cmp	r3, #32
 8009668:	d009      	beq.n	800967e <UART_SetConfig+0x162>
 800966a:	2b20      	cmp	r3, #32
 800966c:	d810      	bhi.n	8009690 <UART_SetConfig+0x174>
 800966e:	2b00      	cmp	r3, #0
 8009670:	d002      	beq.n	8009678 <UART_SetConfig+0x15c>
 8009672:	2b10      	cmp	r3, #16
 8009674:	d006      	beq.n	8009684 <UART_SetConfig+0x168>
 8009676:	e00b      	b.n	8009690 <UART_SetConfig+0x174>
 8009678:	2300      	movs	r3, #0
 800967a:	77fb      	strb	r3, [r7, #31]
 800967c:	e0f2      	b.n	8009864 <UART_SetConfig+0x348>
 800967e:	2302      	movs	r3, #2
 8009680:	77fb      	strb	r3, [r7, #31]
 8009682:	e0ef      	b.n	8009864 <UART_SetConfig+0x348>
 8009684:	2304      	movs	r3, #4
 8009686:	77fb      	strb	r3, [r7, #31]
 8009688:	e0ec      	b.n	8009864 <UART_SetConfig+0x348>
 800968a:	2308      	movs	r3, #8
 800968c:	77fb      	strb	r3, [r7, #31]
 800968e:	e0e9      	b.n	8009864 <UART_SetConfig+0x348>
 8009690:	2310      	movs	r3, #16
 8009692:	77fb      	strb	r3, [r7, #31]
 8009694:	e0e6      	b.n	8009864 <UART_SetConfig+0x348>
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	4a56      	ldr	r2, [pc, #344]	@ (80097f4 <UART_SetConfig+0x2d8>)
 800969c:	4293      	cmp	r3, r2
 800969e:	d120      	bne.n	80096e2 <UART_SetConfig+0x1c6>
 80096a0:	4b51      	ldr	r3, [pc, #324]	@ (80097e8 <UART_SetConfig+0x2cc>)
 80096a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096a6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80096aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80096ac:	d013      	beq.n	80096d6 <UART_SetConfig+0x1ba>
 80096ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80096b0:	d814      	bhi.n	80096dc <UART_SetConfig+0x1c0>
 80096b2:	2b80      	cmp	r3, #128	@ 0x80
 80096b4:	d009      	beq.n	80096ca <UART_SetConfig+0x1ae>
 80096b6:	2b80      	cmp	r3, #128	@ 0x80
 80096b8:	d810      	bhi.n	80096dc <UART_SetConfig+0x1c0>
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d002      	beq.n	80096c4 <UART_SetConfig+0x1a8>
 80096be:	2b40      	cmp	r3, #64	@ 0x40
 80096c0:	d006      	beq.n	80096d0 <UART_SetConfig+0x1b4>
 80096c2:	e00b      	b.n	80096dc <UART_SetConfig+0x1c0>
 80096c4:	2300      	movs	r3, #0
 80096c6:	77fb      	strb	r3, [r7, #31]
 80096c8:	e0cc      	b.n	8009864 <UART_SetConfig+0x348>
 80096ca:	2302      	movs	r3, #2
 80096cc:	77fb      	strb	r3, [r7, #31]
 80096ce:	e0c9      	b.n	8009864 <UART_SetConfig+0x348>
 80096d0:	2304      	movs	r3, #4
 80096d2:	77fb      	strb	r3, [r7, #31]
 80096d4:	e0c6      	b.n	8009864 <UART_SetConfig+0x348>
 80096d6:	2308      	movs	r3, #8
 80096d8:	77fb      	strb	r3, [r7, #31]
 80096da:	e0c3      	b.n	8009864 <UART_SetConfig+0x348>
 80096dc:	2310      	movs	r3, #16
 80096de:	77fb      	strb	r3, [r7, #31]
 80096e0:	e0c0      	b.n	8009864 <UART_SetConfig+0x348>
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	4a44      	ldr	r2, [pc, #272]	@ (80097f8 <UART_SetConfig+0x2dc>)
 80096e8:	4293      	cmp	r3, r2
 80096ea:	d125      	bne.n	8009738 <UART_SetConfig+0x21c>
 80096ec:	4b3e      	ldr	r3, [pc, #248]	@ (80097e8 <UART_SetConfig+0x2cc>)
 80096ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80096f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80096fa:	d017      	beq.n	800972c <UART_SetConfig+0x210>
 80096fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009700:	d817      	bhi.n	8009732 <UART_SetConfig+0x216>
 8009702:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009706:	d00b      	beq.n	8009720 <UART_SetConfig+0x204>
 8009708:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800970c:	d811      	bhi.n	8009732 <UART_SetConfig+0x216>
 800970e:	2b00      	cmp	r3, #0
 8009710:	d003      	beq.n	800971a <UART_SetConfig+0x1fe>
 8009712:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009716:	d006      	beq.n	8009726 <UART_SetConfig+0x20a>
 8009718:	e00b      	b.n	8009732 <UART_SetConfig+0x216>
 800971a:	2300      	movs	r3, #0
 800971c:	77fb      	strb	r3, [r7, #31]
 800971e:	e0a1      	b.n	8009864 <UART_SetConfig+0x348>
 8009720:	2302      	movs	r3, #2
 8009722:	77fb      	strb	r3, [r7, #31]
 8009724:	e09e      	b.n	8009864 <UART_SetConfig+0x348>
 8009726:	2304      	movs	r3, #4
 8009728:	77fb      	strb	r3, [r7, #31]
 800972a:	e09b      	b.n	8009864 <UART_SetConfig+0x348>
 800972c:	2308      	movs	r3, #8
 800972e:	77fb      	strb	r3, [r7, #31]
 8009730:	e098      	b.n	8009864 <UART_SetConfig+0x348>
 8009732:	2310      	movs	r3, #16
 8009734:	77fb      	strb	r3, [r7, #31]
 8009736:	e095      	b.n	8009864 <UART_SetConfig+0x348>
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	4a2f      	ldr	r2, [pc, #188]	@ (80097fc <UART_SetConfig+0x2e0>)
 800973e:	4293      	cmp	r3, r2
 8009740:	d125      	bne.n	800978e <UART_SetConfig+0x272>
 8009742:	4b29      	ldr	r3, [pc, #164]	@ (80097e8 <UART_SetConfig+0x2cc>)
 8009744:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009748:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800974c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009750:	d017      	beq.n	8009782 <UART_SetConfig+0x266>
 8009752:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009756:	d817      	bhi.n	8009788 <UART_SetConfig+0x26c>
 8009758:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800975c:	d00b      	beq.n	8009776 <UART_SetConfig+0x25a>
 800975e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009762:	d811      	bhi.n	8009788 <UART_SetConfig+0x26c>
 8009764:	2b00      	cmp	r3, #0
 8009766:	d003      	beq.n	8009770 <UART_SetConfig+0x254>
 8009768:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800976c:	d006      	beq.n	800977c <UART_SetConfig+0x260>
 800976e:	e00b      	b.n	8009788 <UART_SetConfig+0x26c>
 8009770:	2301      	movs	r3, #1
 8009772:	77fb      	strb	r3, [r7, #31]
 8009774:	e076      	b.n	8009864 <UART_SetConfig+0x348>
 8009776:	2302      	movs	r3, #2
 8009778:	77fb      	strb	r3, [r7, #31]
 800977a:	e073      	b.n	8009864 <UART_SetConfig+0x348>
 800977c:	2304      	movs	r3, #4
 800977e:	77fb      	strb	r3, [r7, #31]
 8009780:	e070      	b.n	8009864 <UART_SetConfig+0x348>
 8009782:	2308      	movs	r3, #8
 8009784:	77fb      	strb	r3, [r7, #31]
 8009786:	e06d      	b.n	8009864 <UART_SetConfig+0x348>
 8009788:	2310      	movs	r3, #16
 800978a:	77fb      	strb	r3, [r7, #31]
 800978c:	e06a      	b.n	8009864 <UART_SetConfig+0x348>
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	4a1b      	ldr	r2, [pc, #108]	@ (8009800 <UART_SetConfig+0x2e4>)
 8009794:	4293      	cmp	r3, r2
 8009796:	d138      	bne.n	800980a <UART_SetConfig+0x2ee>
 8009798:	4b13      	ldr	r3, [pc, #76]	@ (80097e8 <UART_SetConfig+0x2cc>)
 800979a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800979e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80097a2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80097a6:	d017      	beq.n	80097d8 <UART_SetConfig+0x2bc>
 80097a8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80097ac:	d82a      	bhi.n	8009804 <UART_SetConfig+0x2e8>
 80097ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80097b2:	d00b      	beq.n	80097cc <UART_SetConfig+0x2b0>
 80097b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80097b8:	d824      	bhi.n	8009804 <UART_SetConfig+0x2e8>
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d003      	beq.n	80097c6 <UART_SetConfig+0x2aa>
 80097be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80097c2:	d006      	beq.n	80097d2 <UART_SetConfig+0x2b6>
 80097c4:	e01e      	b.n	8009804 <UART_SetConfig+0x2e8>
 80097c6:	2300      	movs	r3, #0
 80097c8:	77fb      	strb	r3, [r7, #31]
 80097ca:	e04b      	b.n	8009864 <UART_SetConfig+0x348>
 80097cc:	2302      	movs	r3, #2
 80097ce:	77fb      	strb	r3, [r7, #31]
 80097d0:	e048      	b.n	8009864 <UART_SetConfig+0x348>
 80097d2:	2304      	movs	r3, #4
 80097d4:	77fb      	strb	r3, [r7, #31]
 80097d6:	e045      	b.n	8009864 <UART_SetConfig+0x348>
 80097d8:	2308      	movs	r3, #8
 80097da:	77fb      	strb	r3, [r7, #31]
 80097dc:	e042      	b.n	8009864 <UART_SetConfig+0x348>
 80097de:	bf00      	nop
 80097e0:	efff69f3 	.word	0xefff69f3
 80097e4:	40011000 	.word	0x40011000
 80097e8:	40023800 	.word	0x40023800
 80097ec:	40004400 	.word	0x40004400
 80097f0:	40004800 	.word	0x40004800
 80097f4:	40004c00 	.word	0x40004c00
 80097f8:	40005000 	.word	0x40005000
 80097fc:	40011400 	.word	0x40011400
 8009800:	40007800 	.word	0x40007800
 8009804:	2310      	movs	r3, #16
 8009806:	77fb      	strb	r3, [r7, #31]
 8009808:	e02c      	b.n	8009864 <UART_SetConfig+0x348>
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	4a72      	ldr	r2, [pc, #456]	@ (80099d8 <UART_SetConfig+0x4bc>)
 8009810:	4293      	cmp	r3, r2
 8009812:	d125      	bne.n	8009860 <UART_SetConfig+0x344>
 8009814:	4b71      	ldr	r3, [pc, #452]	@ (80099dc <UART_SetConfig+0x4c0>)
 8009816:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800981a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800981e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009822:	d017      	beq.n	8009854 <UART_SetConfig+0x338>
 8009824:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009828:	d817      	bhi.n	800985a <UART_SetConfig+0x33e>
 800982a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800982e:	d00b      	beq.n	8009848 <UART_SetConfig+0x32c>
 8009830:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009834:	d811      	bhi.n	800985a <UART_SetConfig+0x33e>
 8009836:	2b00      	cmp	r3, #0
 8009838:	d003      	beq.n	8009842 <UART_SetConfig+0x326>
 800983a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800983e:	d006      	beq.n	800984e <UART_SetConfig+0x332>
 8009840:	e00b      	b.n	800985a <UART_SetConfig+0x33e>
 8009842:	2300      	movs	r3, #0
 8009844:	77fb      	strb	r3, [r7, #31]
 8009846:	e00d      	b.n	8009864 <UART_SetConfig+0x348>
 8009848:	2302      	movs	r3, #2
 800984a:	77fb      	strb	r3, [r7, #31]
 800984c:	e00a      	b.n	8009864 <UART_SetConfig+0x348>
 800984e:	2304      	movs	r3, #4
 8009850:	77fb      	strb	r3, [r7, #31]
 8009852:	e007      	b.n	8009864 <UART_SetConfig+0x348>
 8009854:	2308      	movs	r3, #8
 8009856:	77fb      	strb	r3, [r7, #31]
 8009858:	e004      	b.n	8009864 <UART_SetConfig+0x348>
 800985a:	2310      	movs	r3, #16
 800985c:	77fb      	strb	r3, [r7, #31]
 800985e:	e001      	b.n	8009864 <UART_SetConfig+0x348>
 8009860:	2310      	movs	r3, #16
 8009862:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	69db      	ldr	r3, [r3, #28]
 8009868:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800986c:	d15b      	bne.n	8009926 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800986e:	7ffb      	ldrb	r3, [r7, #31]
 8009870:	2b08      	cmp	r3, #8
 8009872:	d828      	bhi.n	80098c6 <UART_SetConfig+0x3aa>
 8009874:	a201      	add	r2, pc, #4	@ (adr r2, 800987c <UART_SetConfig+0x360>)
 8009876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800987a:	bf00      	nop
 800987c:	080098a1 	.word	0x080098a1
 8009880:	080098a9 	.word	0x080098a9
 8009884:	080098b1 	.word	0x080098b1
 8009888:	080098c7 	.word	0x080098c7
 800988c:	080098b7 	.word	0x080098b7
 8009890:	080098c7 	.word	0x080098c7
 8009894:	080098c7 	.word	0x080098c7
 8009898:	080098c7 	.word	0x080098c7
 800989c:	080098bf 	.word	0x080098bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80098a0:	f7fd fc50 	bl	8007144 <HAL_RCC_GetPCLK1Freq>
 80098a4:	61b8      	str	r0, [r7, #24]
        break;
 80098a6:	e013      	b.n	80098d0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80098a8:	f7fd fc60 	bl	800716c <HAL_RCC_GetPCLK2Freq>
 80098ac:	61b8      	str	r0, [r7, #24]
        break;
 80098ae:	e00f      	b.n	80098d0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80098b0:	4b4b      	ldr	r3, [pc, #300]	@ (80099e0 <UART_SetConfig+0x4c4>)
 80098b2:	61bb      	str	r3, [r7, #24]
        break;
 80098b4:	e00c      	b.n	80098d0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80098b6:	f7fd fb33 	bl	8006f20 <HAL_RCC_GetSysClockFreq>
 80098ba:	61b8      	str	r0, [r7, #24]
        break;
 80098bc:	e008      	b.n	80098d0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80098be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80098c2:	61bb      	str	r3, [r7, #24]
        break;
 80098c4:	e004      	b.n	80098d0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80098c6:	2300      	movs	r3, #0
 80098c8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80098ca:	2301      	movs	r3, #1
 80098cc:	77bb      	strb	r3, [r7, #30]
        break;
 80098ce:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80098d0:	69bb      	ldr	r3, [r7, #24]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d074      	beq.n	80099c0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80098d6:	69bb      	ldr	r3, [r7, #24]
 80098d8:	005a      	lsls	r2, r3, #1
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	685b      	ldr	r3, [r3, #4]
 80098de:	085b      	lsrs	r3, r3, #1
 80098e0:	441a      	add	r2, r3
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	685b      	ldr	r3, [r3, #4]
 80098e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80098ea:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80098ec:	693b      	ldr	r3, [r7, #16]
 80098ee:	2b0f      	cmp	r3, #15
 80098f0:	d916      	bls.n	8009920 <UART_SetConfig+0x404>
 80098f2:	693b      	ldr	r3, [r7, #16]
 80098f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80098f8:	d212      	bcs.n	8009920 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80098fa:	693b      	ldr	r3, [r7, #16]
 80098fc:	b29b      	uxth	r3, r3
 80098fe:	f023 030f 	bic.w	r3, r3, #15
 8009902:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009904:	693b      	ldr	r3, [r7, #16]
 8009906:	085b      	lsrs	r3, r3, #1
 8009908:	b29b      	uxth	r3, r3
 800990a:	f003 0307 	and.w	r3, r3, #7
 800990e:	b29a      	uxth	r2, r3
 8009910:	89fb      	ldrh	r3, [r7, #14]
 8009912:	4313      	orrs	r3, r2
 8009914:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	89fa      	ldrh	r2, [r7, #14]
 800991c:	60da      	str	r2, [r3, #12]
 800991e:	e04f      	b.n	80099c0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009920:	2301      	movs	r3, #1
 8009922:	77bb      	strb	r3, [r7, #30]
 8009924:	e04c      	b.n	80099c0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009926:	7ffb      	ldrb	r3, [r7, #31]
 8009928:	2b08      	cmp	r3, #8
 800992a:	d828      	bhi.n	800997e <UART_SetConfig+0x462>
 800992c:	a201      	add	r2, pc, #4	@ (adr r2, 8009934 <UART_SetConfig+0x418>)
 800992e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009932:	bf00      	nop
 8009934:	08009959 	.word	0x08009959
 8009938:	08009961 	.word	0x08009961
 800993c:	08009969 	.word	0x08009969
 8009940:	0800997f 	.word	0x0800997f
 8009944:	0800996f 	.word	0x0800996f
 8009948:	0800997f 	.word	0x0800997f
 800994c:	0800997f 	.word	0x0800997f
 8009950:	0800997f 	.word	0x0800997f
 8009954:	08009977 	.word	0x08009977
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009958:	f7fd fbf4 	bl	8007144 <HAL_RCC_GetPCLK1Freq>
 800995c:	61b8      	str	r0, [r7, #24]
        break;
 800995e:	e013      	b.n	8009988 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009960:	f7fd fc04 	bl	800716c <HAL_RCC_GetPCLK2Freq>
 8009964:	61b8      	str	r0, [r7, #24]
        break;
 8009966:	e00f      	b.n	8009988 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009968:	4b1d      	ldr	r3, [pc, #116]	@ (80099e0 <UART_SetConfig+0x4c4>)
 800996a:	61bb      	str	r3, [r7, #24]
        break;
 800996c:	e00c      	b.n	8009988 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800996e:	f7fd fad7 	bl	8006f20 <HAL_RCC_GetSysClockFreq>
 8009972:	61b8      	str	r0, [r7, #24]
        break;
 8009974:	e008      	b.n	8009988 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009976:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800997a:	61bb      	str	r3, [r7, #24]
        break;
 800997c:	e004      	b.n	8009988 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800997e:	2300      	movs	r3, #0
 8009980:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009982:	2301      	movs	r3, #1
 8009984:	77bb      	strb	r3, [r7, #30]
        break;
 8009986:	bf00      	nop
    }

    if (pclk != 0U)
 8009988:	69bb      	ldr	r3, [r7, #24]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d018      	beq.n	80099c0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	685b      	ldr	r3, [r3, #4]
 8009992:	085a      	lsrs	r2, r3, #1
 8009994:	69bb      	ldr	r3, [r7, #24]
 8009996:	441a      	add	r2, r3
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	685b      	ldr	r3, [r3, #4]
 800999c:	fbb2 f3f3 	udiv	r3, r2, r3
 80099a0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80099a2:	693b      	ldr	r3, [r7, #16]
 80099a4:	2b0f      	cmp	r3, #15
 80099a6:	d909      	bls.n	80099bc <UART_SetConfig+0x4a0>
 80099a8:	693b      	ldr	r3, [r7, #16]
 80099aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80099ae:	d205      	bcs.n	80099bc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80099b0:	693b      	ldr	r3, [r7, #16]
 80099b2:	b29a      	uxth	r2, r3
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	60da      	str	r2, [r3, #12]
 80099ba:	e001      	b.n	80099c0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80099bc:	2301      	movs	r3, #1
 80099be:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2200      	movs	r2, #0
 80099c4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2200      	movs	r2, #0
 80099ca:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80099cc:	7fbb      	ldrb	r3, [r7, #30]
}
 80099ce:	4618      	mov	r0, r3
 80099d0:	3720      	adds	r7, #32
 80099d2:	46bd      	mov	sp, r7
 80099d4:	bd80      	pop	{r7, pc}
 80099d6:	bf00      	nop
 80099d8:	40007c00 	.word	0x40007c00
 80099dc:	40023800 	.word	0x40023800
 80099e0:	00f42400 	.word	0x00f42400

080099e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80099e4:	b480      	push	{r7}
 80099e6:	b083      	sub	sp, #12
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099f0:	f003 0301 	and.w	r3, r3, #1
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d00a      	beq.n	8009a0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	685b      	ldr	r3, [r3, #4]
 80099fe:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	430a      	orrs	r2, r1
 8009a0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a12:	f003 0302 	and.w	r3, r3, #2
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d00a      	beq.n	8009a30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	685b      	ldr	r3, [r3, #4]
 8009a20:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	430a      	orrs	r2, r1
 8009a2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a34:	f003 0304 	and.w	r3, r3, #4
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d00a      	beq.n	8009a52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	685b      	ldr	r3, [r3, #4]
 8009a42:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	430a      	orrs	r2, r1
 8009a50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a56:	f003 0308 	and.w	r3, r3, #8
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d00a      	beq.n	8009a74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	685b      	ldr	r3, [r3, #4]
 8009a64:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	430a      	orrs	r2, r1
 8009a72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a78:	f003 0310 	and.w	r3, r3, #16
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d00a      	beq.n	8009a96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	689b      	ldr	r3, [r3, #8]
 8009a86:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	430a      	orrs	r2, r1
 8009a94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a9a:	f003 0320 	and.w	r3, r3, #32
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d00a      	beq.n	8009ab8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	689b      	ldr	r3, [r3, #8]
 8009aa8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	430a      	orrs	r2, r1
 8009ab6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009abc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d01a      	beq.n	8009afa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	685b      	ldr	r3, [r3, #4]
 8009aca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	430a      	orrs	r2, r1
 8009ad8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ade:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009ae2:	d10a      	bne.n	8009afa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	685b      	ldr	r3, [r3, #4]
 8009aea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	430a      	orrs	r2, r1
 8009af8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009afe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d00a      	beq.n	8009b1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	685b      	ldr	r3, [r3, #4]
 8009b0c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	430a      	orrs	r2, r1
 8009b1a:	605a      	str	r2, [r3, #4]
  }
}
 8009b1c:	bf00      	nop
 8009b1e:	370c      	adds	r7, #12
 8009b20:	46bd      	mov	sp, r7
 8009b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b26:	4770      	bx	lr

08009b28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b086      	sub	sp, #24
 8009b2c:	af02      	add	r7, sp, #8
 8009b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2200      	movs	r2, #0
 8009b34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009b38:	f7fa fe6a 	bl	8004810 <HAL_GetTick>
 8009b3c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f003 0308 	and.w	r3, r3, #8
 8009b48:	2b08      	cmp	r3, #8
 8009b4a:	d10e      	bne.n	8009b6a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009b4c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009b50:	9300      	str	r3, [sp, #0]
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	2200      	movs	r2, #0
 8009b56:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009b5a:	6878      	ldr	r0, [r7, #4]
 8009b5c:	f000 f81b 	bl	8009b96 <UART_WaitOnFlagUntilTimeout>
 8009b60:	4603      	mov	r3, r0
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d001      	beq.n	8009b6a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009b66:	2303      	movs	r3, #3
 8009b68:	e011      	b.n	8009b8e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2220      	movs	r2, #32
 8009b6e:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2220      	movs	r2, #32
 8009b74:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2200      	movs	r2, #0
 8009b82:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2200      	movs	r2, #0
 8009b88:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8009b8c:	2300      	movs	r3, #0
}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	3710      	adds	r7, #16
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}

08009b96 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009b96:	b580      	push	{r7, lr}
 8009b98:	b09c      	sub	sp, #112	@ 0x70
 8009b9a:	af00      	add	r7, sp, #0
 8009b9c:	60f8      	str	r0, [r7, #12]
 8009b9e:	60b9      	str	r1, [r7, #8]
 8009ba0:	603b      	str	r3, [r7, #0]
 8009ba2:	4613      	mov	r3, r2
 8009ba4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ba6:	e0a7      	b.n	8009cf8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009ba8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bae:	f000 80a3 	beq.w	8009cf8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009bb2:	f7fa fe2d 	bl	8004810 <HAL_GetTick>
 8009bb6:	4602      	mov	r2, r0
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	1ad3      	subs	r3, r2, r3
 8009bbc:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8009bbe:	429a      	cmp	r2, r3
 8009bc0:	d302      	bcc.n	8009bc8 <UART_WaitOnFlagUntilTimeout+0x32>
 8009bc2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d13f      	bne.n	8009c48 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009bd0:	e853 3f00 	ldrex	r3, [r3]
 8009bd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009bd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009bd8:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8009bdc:	667b      	str	r3, [r7, #100]	@ 0x64
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	461a      	mov	r2, r3
 8009be4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009be6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009be8:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bea:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009bec:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009bee:	e841 2300 	strex	r3, r2, [r1]
 8009bf2:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8009bf4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d1e6      	bne.n	8009bc8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	3308      	adds	r3, #8
 8009c00:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c04:	e853 3f00 	ldrex	r3, [r3]
 8009c08:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009c0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c0c:	f023 0301 	bic.w	r3, r3, #1
 8009c10:	663b      	str	r3, [r7, #96]	@ 0x60
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	3308      	adds	r3, #8
 8009c18:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009c1a:	64ba      	str	r2, [r7, #72]	@ 0x48
 8009c1c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c1e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009c20:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009c22:	e841 2300 	strex	r3, r2, [r1]
 8009c26:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009c28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d1e5      	bne.n	8009bfa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	2220      	movs	r2, #32
 8009c32:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	2220      	movs	r2, #32
 8009c38:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	2200      	movs	r2, #0
 8009c40:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 8009c44:	2303      	movs	r3, #3
 8009c46:	e068      	b.n	8009d1a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	f003 0304 	and.w	r3, r3, #4
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d050      	beq.n	8009cf8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	69db      	ldr	r3, [r3, #28]
 8009c5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009c60:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009c64:	d148      	bne.n	8009cf8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009c6e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c78:	e853 3f00 	ldrex	r3, [r3]
 8009c7c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c80:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8009c84:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	461a      	mov	r2, r3
 8009c8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009c8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c90:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c92:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009c94:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009c96:	e841 2300 	strex	r3, r2, [r1]
 8009c9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009c9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d1e6      	bne.n	8009c70 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	3308      	adds	r3, #8
 8009ca8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009caa:	697b      	ldr	r3, [r7, #20]
 8009cac:	e853 3f00 	ldrex	r3, [r3]
 8009cb0:	613b      	str	r3, [r7, #16]
   return(result);
 8009cb2:	693b      	ldr	r3, [r7, #16]
 8009cb4:	f023 0301 	bic.w	r3, r3, #1
 8009cb8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	3308      	adds	r3, #8
 8009cc0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009cc2:	623a      	str	r2, [r7, #32]
 8009cc4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cc6:	69f9      	ldr	r1, [r7, #28]
 8009cc8:	6a3a      	ldr	r2, [r7, #32]
 8009cca:	e841 2300 	strex	r3, r2, [r1]
 8009cce:	61bb      	str	r3, [r7, #24]
   return(result);
 8009cd0:	69bb      	ldr	r3, [r7, #24]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d1e5      	bne.n	8009ca2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	2220      	movs	r2, #32
 8009cda:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	2220      	movs	r2, #32
 8009ce0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	2220      	movs	r2, #32
 8009ce8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	2200      	movs	r2, #0
 8009cf0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8009cf4:	2303      	movs	r3, #3
 8009cf6:	e010      	b.n	8009d1a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	69da      	ldr	r2, [r3, #28]
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	4013      	ands	r3, r2
 8009d02:	68ba      	ldr	r2, [r7, #8]
 8009d04:	429a      	cmp	r2, r3
 8009d06:	bf0c      	ite	eq
 8009d08:	2301      	moveq	r3, #1
 8009d0a:	2300      	movne	r3, #0
 8009d0c:	b2db      	uxtb	r3, r3
 8009d0e:	461a      	mov	r2, r3
 8009d10:	79fb      	ldrb	r3, [r7, #7]
 8009d12:	429a      	cmp	r2, r3
 8009d14:	f43f af48 	beq.w	8009ba8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009d18:	2300      	movs	r3, #0
}
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	3770      	adds	r7, #112	@ 0x70
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd80      	pop	{r7, pc}

08009d22 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009d22:	b480      	push	{r7}
 8009d24:	b095      	sub	sp, #84	@ 0x54
 8009d26:	af00      	add	r7, sp, #0
 8009d28:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d32:	e853 3f00 	ldrex	r3, [r3]
 8009d36:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d3a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009d3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	461a      	mov	r2, r3
 8009d46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d48:	643b      	str	r3, [r7, #64]	@ 0x40
 8009d4a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d4c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009d4e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009d50:	e841 2300 	strex	r3, r2, [r1]
 8009d54:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009d56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d1e6      	bne.n	8009d2a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	3308      	adds	r3, #8
 8009d62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d64:	6a3b      	ldr	r3, [r7, #32]
 8009d66:	e853 3f00 	ldrex	r3, [r3]
 8009d6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8009d6c:	69fb      	ldr	r3, [r7, #28]
 8009d6e:	f023 0301 	bic.w	r3, r3, #1
 8009d72:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	3308      	adds	r3, #8
 8009d7a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009d7c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009d7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d80:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009d82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009d84:	e841 2300 	strex	r3, r2, [r1]
 8009d88:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d1e5      	bne.n	8009d5c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009d94:	2b01      	cmp	r3, #1
 8009d96:	d118      	bne.n	8009dca <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	e853 3f00 	ldrex	r3, [r3]
 8009da4:	60bb      	str	r3, [r7, #8]
   return(result);
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	f023 0310 	bic.w	r3, r3, #16
 8009dac:	647b      	str	r3, [r7, #68]	@ 0x44
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	461a      	mov	r2, r3
 8009db4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009db6:	61bb      	str	r3, [r7, #24]
 8009db8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dba:	6979      	ldr	r1, [r7, #20]
 8009dbc:	69ba      	ldr	r2, [r7, #24]
 8009dbe:	e841 2300 	strex	r3, r2, [r1]
 8009dc2:	613b      	str	r3, [r7, #16]
   return(result);
 8009dc4:	693b      	ldr	r3, [r7, #16]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d1e6      	bne.n	8009d98 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2220      	movs	r2, #32
 8009dce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2200      	movs	r2, #0
 8009ddc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8009dde:	bf00      	nop
 8009de0:	3754      	adds	r7, #84	@ 0x54
 8009de2:	46bd      	mov	sp, r7
 8009de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de8:	4770      	bx	lr

08009dea <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009dea:	b580      	push	{r7, lr}
 8009dec:	b084      	sub	sp, #16
 8009dee:	af00      	add	r7, sp, #0
 8009df0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009df6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	2200      	movs	r2, #0
 8009e04:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009e08:	68f8      	ldr	r0, [r7, #12]
 8009e0a:	f7ff fb71 	bl	80094f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009e0e:	bf00      	nop
 8009e10:	3710      	adds	r7, #16
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd80      	pop	{r7, pc}

08009e16 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009e16:	b580      	push	{r7, lr}
 8009e18:	b088      	sub	sp, #32
 8009e1a:	af00      	add	r7, sp, #0
 8009e1c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	e853 3f00 	ldrex	r3, [r3]
 8009e2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009e32:	61fb      	str	r3, [r7, #28]
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	461a      	mov	r2, r3
 8009e3a:	69fb      	ldr	r3, [r7, #28]
 8009e3c:	61bb      	str	r3, [r7, #24]
 8009e3e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e40:	6979      	ldr	r1, [r7, #20]
 8009e42:	69ba      	ldr	r2, [r7, #24]
 8009e44:	e841 2300 	strex	r3, r2, [r1]
 8009e48:	613b      	str	r3, [r7, #16]
   return(result);
 8009e4a:	693b      	ldr	r3, [r7, #16]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d1e6      	bne.n	8009e1e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2220      	movs	r2, #32
 8009e54:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	2200      	movs	r2, #0
 8009e5a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	f7ff fb3d 	bl	80094dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009e62:	bf00      	nop
 8009e64:	3720      	adds	r7, #32
 8009e66:	46bd      	mov	sp, r7
 8009e68:	bd80      	pop	{r7, pc}

08009e6a <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8009e6a:	b580      	push	{r7, lr}
 8009e6c:	b084      	sub	sp, #16
 8009e6e:	af00      	add	r7, sp, #0
 8009e70:	6078      	str	r0, [r7, #4]
 8009e72:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009e74:	2300      	movs	r3, #0
 8009e76:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8009e78:	6839      	ldr	r1, [r7, #0]
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f001 fd18 	bl	800b8b0 <VL53L0X_get_offset_calibration_data_micro_meter>
 8009e80:	4603      	mov	r3, r0
 8009e82:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8009e84:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009e88:	4618      	mov	r0, r3
 8009e8a:	3710      	adds	r7, #16
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	bd80      	pop	{r7, pc}

08009e90 <VL53L0X_SetDeviceAddress>:

/* End Group PAL General Functions */

/* Group PAL Init Functions */
VL53L0X_Error VL53L0X_SetDeviceAddress(VL53L0X_DEV Dev, uint8_t DeviceAddress)
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b084      	sub	sp, #16
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
 8009e98:	460b      	mov	r3, r1
 8009e9a:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_I2C_SLAVE_DEVICE_ADDRESS,
 8009ea0:	78fb      	ldrb	r3, [r7, #3]
 8009ea2:	085b      	lsrs	r3, r3, #1
 8009ea4:	b2db      	uxtb	r3, r3
 8009ea6:	461a      	mov	r2, r3
 8009ea8:	218a      	movs	r1, #138	@ 0x8a
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f004 ff32 	bl	800ed14 <VL53L0X_WrByte>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	73fb      	strb	r3, [r7, #15]
		DeviceAddress / 2);

	LOG_FUNCTION_END(Status);
	return Status;
 8009eb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009eb8:	4618      	mov	r0, r3
 8009eba:	3710      	adds	r7, #16
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bd80      	pop	{r7, pc}

08009ec0 <VL53L0X_DataInit>:

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8009ec0:	b5b0      	push	{r4, r5, r7, lr}
 8009ec2:	b096      	sub	sp, #88	@ 0x58
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009ec8:	2300      	movs	r3, #0
 8009eca:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8009ece:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d107      	bne.n	8009ee6 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	2188      	movs	r1, #136	@ 0x88
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	f004 ff1a 	bl	800ed14 <VL53L0X_WrByte>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	2200      	movs	r2, #0
 8009eea:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009ef4:	f8a3 2152 	strh.w	r2, [r3, #338]	@ 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8009efe:	f8a3 2154 	strh.w	r2, [r3, #340]	@ 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	4a9e      	ldr	r2, [pc, #632]	@ (800a180 <VL53L0X_DataInit+0x2c0>)
 8009f06:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	4a9d      	ldr	r2, [pc, #628]	@ (800a184 <VL53L0X_DataInit+0x2c4>)
 8009f0e:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2200      	movs	r2, #0
 8009f16:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8009f18:	f107 0310 	add.w	r3, r7, #16
 8009f1c:	4619      	mov	r1, r3
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	f000 fac0 	bl	800a4a4 <VL53L0X_GetDeviceParameters>
 8009f24:	4603      	mov	r3, r0
 8009f26:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8009f2a:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d112      	bne.n	8009f58 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8009f32:	2300      	movs	r3, #0
 8009f34:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8009f36:	2300      	movs	r3, #0
 8009f38:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	f103 0410 	add.w	r4, r3, #16
 8009f40:	f107 0510 	add.w	r5, r7, #16
 8009f44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009f46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009f48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009f4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009f4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009f4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009f50:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8009f54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2264      	movs	r2, #100	@ 0x64
 8009f5c:	f8a3 2134 	strh.w	r2, [r3, #308]	@ 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	f44f 7261 	mov.w	r2, #900	@ 0x384
 8009f66:	f8a3 2136 	strh.w	r2, [r3, #310]	@ 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8009f70:	f8a3 2138 	strh.w	r2, [r3, #312]	@ 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8009f7a:	f8a3 213c 	strh.w	r2, [r3, #316]	@ 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2201      	movs	r2, #1
 8009f82:	f883 2150 	strb.w	r2, [r3, #336]	@ 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8009f86:	2201      	movs	r2, #1
 8009f88:	2180      	movs	r1, #128	@ 0x80
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	f004 fec2 	bl	800ed14 <VL53L0X_WrByte>
 8009f90:	4603      	mov	r3, r0
 8009f92:	461a      	mov	r2, r3
 8009f94:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009f98:	4313      	orrs	r3, r2
 8009f9a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009f9e:	2201      	movs	r2, #1
 8009fa0:	21ff      	movs	r1, #255	@ 0xff
 8009fa2:	6878      	ldr	r0, [r7, #4]
 8009fa4:	f004 feb6 	bl	800ed14 <VL53L0X_WrByte>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	461a      	mov	r2, r3
 8009fac:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009fb0:	4313      	orrs	r3, r2
 8009fb2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	2100      	movs	r1, #0
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f004 feaa 	bl	800ed14 <VL53L0X_WrByte>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	461a      	mov	r2, r3
 8009fc4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009fc8:	4313      	orrs	r3, r2
 8009fca:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8009fce:	f107 030f 	add.w	r3, r7, #15
 8009fd2:	461a      	mov	r2, r3
 8009fd4:	2191      	movs	r1, #145	@ 0x91
 8009fd6:	6878      	ldr	r0, [r7, #4]
 8009fd8:	f004 ff1e 	bl	800ee18 <VL53L0X_RdByte>
 8009fdc:	4603      	mov	r3, r0
 8009fde:	461a      	mov	r2, r3
 8009fe0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009fe4:	4313      	orrs	r3, r2
 8009fe6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8009fea:	7bfa      	ldrb	r2, [r7, #15]
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	f883 213a 	strb.w	r2, [r3, #314]	@ 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8009ff2:	2201      	movs	r2, #1
 8009ff4:	2100      	movs	r1, #0
 8009ff6:	6878      	ldr	r0, [r7, #4]
 8009ff8:	f004 fe8c 	bl	800ed14 <VL53L0X_WrByte>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	461a      	mov	r2, r3
 800a000:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a004:	4313      	orrs	r3, r2
 800a006:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a00a:	2200      	movs	r2, #0
 800a00c:	21ff      	movs	r1, #255	@ 0xff
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f004 fe80 	bl	800ed14 <VL53L0X_WrByte>
 800a014:	4603      	mov	r3, r0
 800a016:	461a      	mov	r2, r3
 800a018:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a01c:	4313      	orrs	r3, r2
 800a01e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800a022:	2200      	movs	r2, #0
 800a024:	2180      	movs	r1, #128	@ 0x80
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f004 fe74 	bl	800ed14 <VL53L0X_WrByte>
 800a02c:	4603      	mov	r3, r0
 800a02e:	461a      	mov	r2, r3
 800a030:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a034:	4313      	orrs	r3, r2
 800a036:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800a03a:	2300      	movs	r3, #0
 800a03c:	653b      	str	r3, [r7, #80]	@ 0x50
 800a03e:	e014      	b.n	800a06a <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 800a040:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800a044:	2b00      	cmp	r3, #0
 800a046:	d114      	bne.n	800a072 <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 800a048:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a04a:	b29b      	uxth	r3, r3
 800a04c:	2201      	movs	r2, #1
 800a04e:	4619      	mov	r1, r3
 800a050:	6878      	ldr	r0, [r7, #4]
 800a052:	f000 fd49 	bl	800aae8 <VL53L0X_SetLimitCheckEnable>
 800a056:	4603      	mov	r3, r0
 800a058:	461a      	mov	r2, r3
 800a05a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a05e:	4313      	orrs	r3, r2
 800a060:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800a064:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a066:	3301      	adds	r3, #1
 800a068:	653b      	str	r3, [r7, #80]	@ 0x50
 800a06a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a06c:	2b05      	cmp	r3, #5
 800a06e:	dde7      	ble.n	800a040 <VL53L0X_DataInit+0x180>
 800a070:	e000      	b.n	800a074 <VL53L0X_DataInit+0x1b4>
		else
			break;
 800a072:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 800a074:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d107      	bne.n	800a08c <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800a07c:	2200      	movs	r2, #0
 800a07e:	2102      	movs	r1, #2
 800a080:	6878      	ldr	r0, [r7, #4]
 800a082:	f000 fd31 	bl	800aae8 <VL53L0X_SetLimitCheckEnable>
 800a086:	4603      	mov	r3, r0
 800a088:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800a08c:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800a090:	2b00      	cmp	r3, #0
 800a092:	d107      	bne.n	800a0a4 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800a094:	2200      	movs	r2, #0
 800a096:	2103      	movs	r1, #3
 800a098:	6878      	ldr	r0, [r7, #4]
 800a09a:	f000 fd25 	bl	800aae8 <VL53L0X_SetLimitCheckEnable>
 800a09e:	4603      	mov	r3, r0
 800a0a0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800a0a4:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d107      	bne.n	800a0bc <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	2104      	movs	r1, #4
 800a0b0:	6878      	ldr	r0, [r7, #4]
 800a0b2:	f000 fd19 	bl	800aae8 <VL53L0X_SetLimitCheckEnable>
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800a0bc:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d107      	bne.n	800a0d4 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	2105      	movs	r1, #5
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	f000 fd0d 	bl	800aae8 <VL53L0X_SetLimitCheckEnable>
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 800a0d4:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d108      	bne.n	800a0ee <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800a0dc:	f44f 1290 	mov.w	r2, #1179648	@ 0x120000
 800a0e0:	2100      	movs	r1, #0
 800a0e2:	6878      	ldr	r0, [r7, #4]
 800a0e4:	f000 fdb0 	bl	800ac48 <VL53L0X_SetLimitCheckValue>
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800a0ee:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d108      	bne.n	800a108 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800a0f6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800a0fa:	2101      	movs	r1, #1
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	f000 fda3 	bl	800ac48 <VL53L0X_SetLimitCheckValue>
 800a102:	4603      	mov	r3, r0
 800a104:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a108:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d108      	bne.n	800a122 <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800a110:	f44f 120c 	mov.w	r2, #2293760	@ 0x230000
 800a114:	2102      	movs	r1, #2
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	f000 fd96 	bl	800ac48 <VL53L0X_SetLimitCheckValue>
 800a11c:	4603      	mov	r3, r0
 800a11e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a122:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800a126:	2b00      	cmp	r3, #0
 800a128:	d107      	bne.n	800a13a <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800a12a:	2200      	movs	r2, #0
 800a12c:	2103      	movs	r1, #3
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f000 fd8a 	bl	800ac48 <VL53L0X_SetLimitCheckValue>
 800a134:	4603      	mov	r3, r0
 800a136:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a13a:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d10f      	bne.n	800a162 <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	22ff      	movs	r2, #255	@ 0xff
 800a146:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800a14a:	22ff      	movs	r2, #255	@ 0xff
 800a14c:	2101      	movs	r1, #1
 800a14e:	6878      	ldr	r0, [r7, #4]
 800a150:	f004 fde0 	bl	800ed14 <VL53L0X_WrByte>
 800a154:	4603      	mov	r3, r0
 800a156:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2201      	movs	r2, #1
 800a15e:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 800a162:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800a166:	2b00      	cmp	r3, #0
 800a168:	d103      	bne.n	800a172 <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2200      	movs	r2, #0
 800a16e:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 800a172:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
}
 800a176:	4618      	mov	r0, r3
 800a178:	3758      	adds	r7, #88	@ 0x58
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bdb0      	pop	{r4, r5, r7, pc}
 800a17e:	bf00      	nop
 800a180:	00016b85 	.word	0x00016b85
 800a184:	000970a4 	.word	0x000970a4

0800a188 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 800a188:	b5b0      	push	{r4, r5, r7, lr}
 800a18a:	b09e      	sub	sp, #120	@ 0x78
 800a18c:	af02      	add	r7, sp, #8
 800a18e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a190:	2300      	movs	r3, #0
 800a192:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 800a196:	f107 031c 	add.w	r3, r7, #28
 800a19a:	2240      	movs	r2, #64	@ 0x40
 800a19c:	2100      	movs	r1, #0
 800a19e:	4618      	mov	r0, r3
 800a1a0:	f009 fb87 	bl	80138b2 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	uint32_t count = 0;
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	663b      	str	r3, [r7, #96]	@ 0x60
	uint8_t isApertureSpads = 0;
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 800a1be:	2300      	movs	r3, #0
 800a1c0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 800a1c4:	2101      	movs	r1, #1
 800a1c6:	6878      	ldr	r0, [r7, #4]
 800a1c8:	f002 faec 	bl	800c7a4 <VL53L0X_get_info_from_device>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	f893 3113 	ldrb.w	r3, [r3, #275]	@ 0x113
 800a1d8:	663b      	str	r3, [r7, #96]	@ 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 800a1e0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 800a1e4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a1e8:	2b01      	cmp	r3, #1
 800a1ea:	d80d      	bhi.n	800a208 <VL53L0X_StaticInit+0x80>
 800a1ec:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a1f0:	2b01      	cmp	r3, #1
 800a1f2:	d102      	bne.n	800a1fa <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 800a1f4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a1f6:	2b20      	cmp	r3, #32
 800a1f8:	d806      	bhi.n	800a208 <VL53L0X_StaticInit+0x80>
 800a1fa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d10e      	bne.n	800a220 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 800a202:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a204:	2b0c      	cmp	r3, #12
 800a206:	d90b      	bls.n	800a220 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 800a208:	f107 0218 	add.w	r2, r7, #24
 800a20c:	f107 0314 	add.w	r3, r7, #20
 800a210:	4619      	mov	r1, r3
 800a212:	6878      	ldr	r0, [r7, #4]
 800a214:	f001 fd48 	bl	800bca8 <VL53L0X_perform_ref_spad_management>
 800a218:	4603      	mov	r3, r0
 800a21a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 800a21e:	e009      	b.n	800a234 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 800a220:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a224:	461a      	mov	r2, r3
 800a226:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800a228:	6878      	ldr	r0, [r7, #4]
 800a22a:	f001 ff49 	bl	800c0c0 <VL53L0X_set_reference_spads>
 800a22e:	4603      	mov	r3, r0
 800a230:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 800a234:	4b93      	ldr	r3, [pc, #588]	@ (800a484 <VL53L0X_StaticInit+0x2fc>)
 800a236:	66bb      	str	r3, [r7, #104]	@ 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 800a238:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d10f      	bne.n	800a260 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	f893 3150 	ldrb.w	r3, [r3, #336]	@ 0x150
 800a246:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 800a24a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d104      	bne.n	800a25c <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 800a258:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a25a:	e001      	b.n	800a260 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 800a25c:	4b89      	ldr	r3, [pc, #548]	@ (800a484 <VL53L0X_StaticInit+0x2fc>)
 800a25e:	66bb      	str	r3, [r7, #104]	@ 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 800a260:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800a264:	2b00      	cmp	r3, #0
 800a266:	d106      	bne.n	800a276 <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 800a268:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	f003 fe3c 	bl	800dee8 <VL53L0X_load_tuning_settings>
 800a270:	4603      	mov	r3, r0
 800a272:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 800a276:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d10a      	bne.n	800a294 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 800a27e:	2300      	movs	r3, #0
 800a280:	9300      	str	r3, [sp, #0]
 800a282:	2304      	movs	r3, #4
 800a284:	2200      	movs	r2, #0
 800a286:	2100      	movs	r1, #0
 800a288:	6878      	ldr	r0, [r7, #4]
 800a28a:	f001 f8fd 	bl	800b488 <VL53L0X_SetGpioConfig>
 800a28e:	4603      	mov	r3, r0
 800a290:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a294:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d121      	bne.n	800a2e0 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a29c:	2201      	movs	r2, #1
 800a29e:	21ff      	movs	r1, #255	@ 0xff
 800a2a0:	6878      	ldr	r0, [r7, #4]
 800a2a2:	f004 fd37 	bl	800ed14 <VL53L0X_WrByte>
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 800a2ac:	f107 031a 	add.w	r3, r7, #26
 800a2b0:	461a      	mov	r2, r3
 800a2b2:	2184      	movs	r1, #132	@ 0x84
 800a2b4:	6878      	ldr	r0, [r7, #4]
 800a2b6:	f004 fdd9 	bl	800ee6c <VL53L0X_RdWord>
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	461a      	mov	r2, r3
 800a2be:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800a2c2:	4313      	orrs	r3, r2
 800a2c4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	21ff      	movs	r1, #255	@ 0xff
 800a2cc:	6878      	ldr	r0, [r7, #4]
 800a2ce:	f004 fd21 	bl	800ed14 <VL53L0X_WrByte>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	461a      	mov	r2, r3
 800a2d6:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800a2da:	4313      	orrs	r3, r2
 800a2dc:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a2e0:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d104      	bne.n	800a2f2 <VL53L0X_StaticInit+0x16a>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 800a2e8:	8b7b      	ldrh	r3, [r7, #26]
 800a2ea:	011a      	lsls	r2, r3, #4
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 800a2f2:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d108      	bne.n	800a30c <VL53L0X_StaticInit+0x184>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800a2fa:	f107 031c 	add.w	r3, r7, #28
 800a2fe:	4619      	mov	r1, r3
 800a300:	6878      	ldr	r0, [r7, #4]
 800a302:	f000 f8cf 	bl	800a4a4 <VL53L0X_GetDeviceParameters>
 800a306:	4603      	mov	r3, r0
 800a308:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 800a30c:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800a310:	2b00      	cmp	r3, #0
 800a312:	d110      	bne.n	800a336 <VL53L0X_StaticInit+0x1ae>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 800a314:	f107 0319 	add.w	r3, r7, #25
 800a318:	4619      	mov	r1, r3
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	f000 f991 	bl	800a642 <VL53L0X_GetFractionEnable>
 800a320:	4603      	mov	r3, r0
 800a322:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 800a326:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d103      	bne.n	800a336 <VL53L0X_StaticInit+0x1ae>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 800a32e:	7e7a      	ldrb	r2, [r7, #25]
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 800a336:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d10e      	bne.n	800a35c <VL53L0X_StaticInit+0x1d4>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	f103 0410 	add.w	r4, r3, #16
 800a344:	f107 051c 	add.w	r5, r7, #28
 800a348:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a34a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a34c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a34e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a350:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a352:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a354:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800a358:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 800a35c:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800a360:	2b00      	cmp	r3, #0
 800a362:	d111      	bne.n	800a388 <VL53L0X_StaticInit+0x200>
		Status = VL53L0X_RdByte(Dev,
 800a364:	f107 0319 	add.w	r3, r7, #25
 800a368:	461a      	mov	r2, r3
 800a36a:	2101      	movs	r1, #1
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	f004 fd53 	bl	800ee18 <VL53L0X_RdByte>
 800a372:	4603      	mov	r3, r0
 800a374:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 800a378:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d103      	bne.n	800a388 <VL53L0X_StaticInit+0x200>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 800a380:	7e7a      	ldrb	r2, [r7, #25]
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 800a388:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d107      	bne.n	800a3a0 <VL53L0X_StaticInit+0x218>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800a390:	2200      	movs	r2, #0
 800a392:	2100      	movs	r1, #0
 800a394:	6878      	ldr	r0, [r7, #4]
 800a396:	f000 f9c9 	bl	800a72c <VL53L0X_SetSequenceStepEnable>
 800a39a:	4603      	mov	r3, r0
 800a39c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800a3a0:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d107      	bne.n	800a3b8 <VL53L0X_StaticInit+0x230>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	2102      	movs	r1, #2
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f000 f9bd 	bl	800a72c <VL53L0X_SetSequenceStepEnable>
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 800a3b8:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d103      	bne.n	800a3c8 <VL53L0X_StaticInit+0x240>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2203      	movs	r2, #3
 800a3c4:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800a3c8:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d109      	bne.n	800a3e4 <VL53L0X_StaticInit+0x25c>
		Status = VL53L0X_GetVcselPulsePeriod(
 800a3d0:	f107 0313 	add.w	r3, r7, #19
 800a3d4:	461a      	mov	r2, r3
 800a3d6:	2100      	movs	r1, #0
 800a3d8:	6878      	ldr	r0, [r7, #4]
 800a3da:	f000 f98f 	bl	800a6fc <VL53L0X_GetVcselPulsePeriod>
 800a3de:	4603      	mov	r3, r0
 800a3e0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a3e4:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d103      	bne.n	800a3f4 <VL53L0X_StaticInit+0x26c>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a3ec:	7cfa      	ldrb	r2, [r7, #19]
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800a3f4:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d109      	bne.n	800a410 <VL53L0X_StaticInit+0x288>
		Status = VL53L0X_GetVcselPulsePeriod(
 800a3fc:	f107 0313 	add.w	r3, r7, #19
 800a400:	461a      	mov	r2, r3
 800a402:	2101      	movs	r1, #1
 800a404:	6878      	ldr	r0, [r7, #4]
 800a406:	f000 f979 	bl	800a6fc <VL53L0X_GetVcselPulsePeriod>
 800a40a:	4603      	mov	r3, r0
 800a40c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a410:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800a414:	2b00      	cmp	r3, #0
 800a416:	d103      	bne.n	800a420 <VL53L0X_StaticInit+0x298>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a418:	7cfa      	ldrb	r2, [r7, #19]
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	f883 20e0 	strb.w	r2, [r3, #224]	@ 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800a420:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800a424:	2b00      	cmp	r3, #0
 800a426:	d109      	bne.n	800a43c <VL53L0X_StaticInit+0x2b4>
		Status = get_sequence_step_timeout(
 800a428:	f107 030c 	add.w	r3, r7, #12
 800a42c:	461a      	mov	r2, r3
 800a42e:	2103      	movs	r1, #3
 800a430:	6878      	ldr	r0, [r7, #4]
 800a432:	f002 ff37 	bl	800d2a4 <get_sequence_step_timeout>
 800a436:	4603      	mov	r3, r0
 800a438:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a43c:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800a440:	2b00      	cmp	r3, #0
 800a442:	d103      	bne.n	800a44c <VL53L0X_StaticInit+0x2c4>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a444:	68fa      	ldr	r2, [r7, #12]
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800a44c:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800a450:	2b00      	cmp	r3, #0
 800a452:	d109      	bne.n	800a468 <VL53L0X_StaticInit+0x2e0>
		Status = get_sequence_step_timeout(
 800a454:	f107 030c 	add.w	r3, r7, #12
 800a458:	461a      	mov	r2, r3
 800a45a:	2104      	movs	r1, #4
 800a45c:	6878      	ldr	r0, [r7, #4]
 800a45e:	f002 ff21 	bl	800d2a4 <get_sequence_step_timeout>
 800a462:	4603      	mov	r3, r0
 800a464:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a468:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d103      	bne.n	800a478 <VL53L0X_StaticInit+0x2f0>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a470:	68fa      	ldr	r2, [r7, #12]
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a478:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
}
 800a47c:	4618      	mov	r0, r3
 800a47e:	3770      	adds	r7, #112	@ 0x70
 800a480:	46bd      	mov	sp, r7
 800a482:	bdb0      	pop	{r4, r5, r7, pc}
 800a484:	200002e0 	.word	0x200002e0

0800a488 <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 800a488:	b480      	push	{r7}
 800a48a:	b085      	sub	sp, #20
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 800a490:	239d      	movs	r3, #157	@ 0x9d
 800a492:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 800a494:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a498:	4618      	mov	r0, r3
 800a49a:	3714      	adds	r7, #20
 800a49c:	46bd      	mov	sp, r7
 800a49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a2:	4770      	bx	lr

0800a4a4 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b084      	sub	sp, #16
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
 800a4ac:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	4619      	mov	r1, r3
 800a4b6:	6878      	ldr	r0, [r7, #4]
 800a4b8:	f000 f8b0 	bl	800a61c <VL53L0X_GetDeviceMode>
 800a4bc:	4603      	mov	r3, r0
 800a4be:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800a4c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d107      	bne.n	800a4d8 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	3308      	adds	r3, #8
 800a4cc:	4619      	mov	r1, r3
 800a4ce:	6878      	ldr	r0, [r7, #4]
 800a4d0:	f000 fa76 	bl	800a9c0 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 800a4d4:	4603      	mov	r3, r0
 800a4d6:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 800a4d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d102      	bne.n	800a4e6 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 800a4e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d107      	bne.n	800a4fe <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	3310      	adds	r3, #16
 800a4f2:	4619      	mov	r1, r3
 800a4f4:	6878      	ldr	r0, [r7, #4]
 800a4f6:	f000 faac 	bl	800aa52 <VL53L0X_GetXTalkCompensationRateMegaCps>
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 800a4fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d107      	bne.n	800a516 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	3314      	adds	r3, #20
 800a50a:	4619      	mov	r1, r3
 800a50c:	6878      	ldr	r0, [r7, #4]
 800a50e:	f7ff fcac 	bl	8009e6a <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 800a512:	4603      	mov	r3, r0
 800a514:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 800a516:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d134      	bne.n	800a588 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800a51e:	2300      	movs	r3, #0
 800a520:	60bb      	str	r3, [r7, #8]
 800a522:	e02a      	b.n	800a57a <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800a524:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d12a      	bne.n	800a582 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 800a52c:	68bb      	ldr	r3, [r7, #8]
 800a52e:	b299      	uxth	r1, r3
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	3308      	adds	r3, #8
 800a534:	009b      	lsls	r3, r3, #2
 800a536:	683a      	ldr	r2, [r7, #0]
 800a538:	4413      	add	r3, r2
 800a53a:	3304      	adds	r3, #4
 800a53c:	461a      	mov	r2, r3
 800a53e:	6878      	ldr	r0, [r7, #4]
 800a540:	f000 fbe4 	bl	800ad0c <VL53L0X_GetLimitCheckValue>
 800a544:	4603      	mov	r3, r0
 800a546:	461a      	mov	r2, r3
 800a548:	7bfb      	ldrb	r3, [r7, #15]
 800a54a:	4313      	orrs	r3, r2
 800a54c:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800a54e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d117      	bne.n	800a586 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 800a556:	68bb      	ldr	r3, [r7, #8]
 800a558:	b299      	uxth	r1, r3
 800a55a:	68bb      	ldr	r3, [r7, #8]
 800a55c:	3318      	adds	r3, #24
 800a55e:	683a      	ldr	r2, [r7, #0]
 800a560:	4413      	add	r3, r2
 800a562:	461a      	mov	r2, r3
 800a564:	6878      	ldr	r0, [r7, #4]
 800a566:	f000 fb4b 	bl	800ac00 <VL53L0X_GetLimitCheckEnable>
 800a56a:	4603      	mov	r3, r0
 800a56c:	461a      	mov	r2, r3
 800a56e:	7bfb      	ldrb	r3, [r7, #15]
 800a570:	4313      	orrs	r3, r2
 800a572:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800a574:	68bb      	ldr	r3, [r7, #8]
 800a576:	3301      	adds	r3, #1
 800a578:	60bb      	str	r3, [r7, #8]
 800a57a:	68bb      	ldr	r3, [r7, #8]
 800a57c:	2b05      	cmp	r3, #5
 800a57e:	ddd1      	ble.n	800a524 <VL53L0X_GetDeviceParameters+0x80>
 800a580:	e002      	b.n	800a588 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 800a582:	bf00      	nop
 800a584:	e000      	b.n	800a588 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 800a586:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a588:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d107      	bne.n	800a5a0 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 800a590:	683b      	ldr	r3, [r7, #0]
 800a592:	333c      	adds	r3, #60	@ 0x3c
 800a594:	4619      	mov	r1, r3
 800a596:	6878      	ldr	r0, [r7, #4]
 800a598:	f000 fc46 	bl	800ae28 <VL53L0X_GetWrapAroundCheckEnable>
 800a59c:	4603      	mov	r3, r0
 800a59e:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 800a5a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d107      	bne.n	800a5b8 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	3304      	adds	r3, #4
 800a5ac:	4619      	mov	r1, r3
 800a5ae:	6878      	ldr	r0, [r7, #4]
 800a5b0:	f000 f879 	bl	800a6a6 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 800a5b4:	4603      	mov	r3, r0
 800a5b6:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a5b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a5bc:	4618      	mov	r0, r3
 800a5be:	3710      	adds	r7, #16
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	bd80      	pop	{r7, pc}

0800a5c4 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 800a5c4:	b480      	push	{r7}
 800a5c6:	b085      	sub	sp, #20
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
 800a5cc:	460b      	mov	r3, r1
 800a5ce:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 800a5d4:	78fb      	ldrb	r3, [r7, #3]
 800a5d6:	2b15      	cmp	r3, #21
 800a5d8:	bf8c      	ite	hi
 800a5da:	2201      	movhi	r2, #1
 800a5dc:	2200      	movls	r2, #0
 800a5de:	b2d2      	uxtb	r2, r2
 800a5e0:	2a00      	cmp	r2, #0
 800a5e2:	d10f      	bne.n	800a604 <VL53L0X_SetDeviceMode+0x40>
 800a5e4:	4a0c      	ldr	r2, [pc, #48]	@ (800a618 <VL53L0X_SetDeviceMode+0x54>)
 800a5e6:	fa22 f303 	lsr.w	r3, r2, r3
 800a5ea:	f003 0301 	and.w	r3, r3, #1
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	bf14      	ite	ne
 800a5f2:	2301      	movne	r3, #1
 800a5f4:	2300      	moveq	r3, #0
 800a5f6:	b2db      	uxtb	r3, r3
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d003      	beq.n	800a604 <VL53L0X_SetDeviceMode+0x40>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	78fa      	ldrb	r2, [r7, #3]
 800a600:	741a      	strb	r2, [r3, #16]
		break;
 800a602:	e001      	b.n	800a608 <VL53L0X_SetDeviceMode+0x44>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800a604:	23f8      	movs	r3, #248	@ 0xf8
 800a606:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a608:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a60c:	4618      	mov	r0, r3
 800a60e:	3714      	adds	r7, #20
 800a610:	46bd      	mov	sp, r7
 800a612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a616:	4770      	bx	lr
 800a618:	0030000b 	.word	0x0030000b

0800a61c <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 800a61c:	b480      	push	{r7}
 800a61e:	b085      	sub	sp, #20
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
 800a624:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a626:	2300      	movs	r3, #0
 800a628:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	7c1a      	ldrb	r2, [r3, #16]
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800a632:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a636:	4618      	mov	r0, r3
 800a638:	3714      	adds	r7, #20
 800a63a:	46bd      	mov	sp, r7
 800a63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a640:	4770      	bx	lr

0800a642 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 800a642:	b580      	push	{r7, lr}
 800a644:	b084      	sub	sp, #16
 800a646:	af00      	add	r7, sp, #0
 800a648:	6078      	str	r0, [r7, #4]
 800a64a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a64c:	2300      	movs	r3, #0
 800a64e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 800a650:	683a      	ldr	r2, [r7, #0]
 800a652:	2109      	movs	r1, #9
 800a654:	6878      	ldr	r0, [r7, #4]
 800a656:	f004 fbdf 	bl	800ee18 <VL53L0X_RdByte>
 800a65a:	4603      	mov	r3, r0
 800a65c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800a65e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d106      	bne.n	800a674 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	781b      	ldrb	r3, [r3, #0]
 800a66a:	f003 0301 	and.w	r3, r3, #1
 800a66e:	b2da      	uxtb	r2, r3
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800a674:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a678:	4618      	mov	r0, r3
 800a67a:	3710      	adds	r7, #16
 800a67c:	46bd      	mov	sp, r7
 800a67e:	bd80      	pop	{r7, pc}

0800a680 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b084      	sub	sp, #16
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
 800a688:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a68a:	2300      	movs	r3, #0
 800a68c:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 800a68e:	6839      	ldr	r1, [r7, #0]
 800a690:	6878      	ldr	r0, [r7, #4]
 800a692:	f003 fa97 	bl	800dbc4 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 800a696:	4603      	mov	r3, r0
 800a698:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 800a69a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a69e:	4618      	mov	r0, r3
 800a6a0:	3710      	adds	r7, #16
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	bd80      	pop	{r7, pc}

0800a6a6 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800a6a6:	b580      	push	{r7, lr}
 800a6a8:	b084      	sub	sp, #16
 800a6aa:	af00      	add	r7, sp, #0
 800a6ac:	6078      	str	r0, [r7, #4]
 800a6ae:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 800a6b4:	6839      	ldr	r1, [r7, #0]
 800a6b6:	6878      	ldr	r0, [r7, #4]
 800a6b8:	f003 fb64 	bl	800dd84 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 800a6bc:	4603      	mov	r3, r0
 800a6be:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 800a6c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	3710      	adds	r7, #16
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	bd80      	pop	{r7, pc}

0800a6cc <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b084      	sub	sp, #16
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
 800a6d4:	460b      	mov	r3, r1
 800a6d6:	70fb      	strb	r3, [r7, #3]
 800a6d8:	4613      	mov	r3, r2
 800a6da:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a6dc:	2300      	movs	r3, #0
 800a6de:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 800a6e0:	78ba      	ldrb	r2, [r7, #2]
 800a6e2:	78fb      	ldrb	r3, [r7, #3]
 800a6e4:	4619      	mov	r1, r3
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	f002 ffae 	bl	800d648 <VL53L0X_set_vcsel_pulse_period>
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800a6f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	3710      	adds	r7, #16
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bd80      	pop	{r7, pc}

0800a6fc <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b086      	sub	sp, #24
 800a700:	af00      	add	r7, sp, #0
 800a702:	60f8      	str	r0, [r7, #12]
 800a704:	460b      	mov	r3, r1
 800a706:	607a      	str	r2, [r7, #4]
 800a708:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a70a:	2300      	movs	r3, #0
 800a70c:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 800a70e:	7afb      	ldrb	r3, [r7, #11]
 800a710:	687a      	ldr	r2, [r7, #4]
 800a712:	4619      	mov	r1, r3
 800a714:	68f8      	ldr	r0, [r7, #12]
 800a716:	f003 fa1e 	bl	800db56 <VL53L0X_get_vcsel_pulse_period>
 800a71a:	4603      	mov	r3, r0
 800a71c:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800a71e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a722:	4618      	mov	r0, r3
 800a724:	3718      	adds	r7, #24
 800a726:	46bd      	mov	sp, r7
 800a728:	bd80      	pop	{r7, pc}
	...

0800a72c <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b086      	sub	sp, #24
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
 800a734:	460b      	mov	r3, r1
 800a736:	70fb      	strb	r3, [r7, #3]
 800a738:	4613      	mov	r3, r2
 800a73a:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a73c:	2300      	movs	r3, #0
 800a73e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800a740:	2300      	movs	r3, #0
 800a742:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 800a744:	2300      	movs	r3, #0
 800a746:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800a748:	f107 030f 	add.w	r3, r7, #15
 800a74c:	461a      	mov	r2, r3
 800a74e:	2101      	movs	r1, #1
 800a750:	6878      	ldr	r0, [r7, #4]
 800a752:	f004 fb61 	bl	800ee18 <VL53L0X_RdByte>
 800a756:	4603      	mov	r3, r0
 800a758:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 800a75a:	7bfb      	ldrb	r3, [r7, #15]
 800a75c:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 800a75e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d159      	bne.n	800a81a <VL53L0X_SetSequenceStepEnable+0xee>
		if (SequenceStepEnabled == 1) {
 800a766:	78bb      	ldrb	r3, [r7, #2]
 800a768:	2b01      	cmp	r3, #1
 800a76a:	d12b      	bne.n	800a7c4 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 800a76c:	78fb      	ldrb	r3, [r7, #3]
 800a76e:	2b04      	cmp	r3, #4
 800a770:	d825      	bhi.n	800a7be <VL53L0X_SetSequenceStepEnable+0x92>
 800a772:	a201      	add	r2, pc, #4	@ (adr r2, 800a778 <VL53L0X_SetSequenceStepEnable+0x4c>)
 800a774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a778:	0800a78d 	.word	0x0800a78d
 800a77c:	0800a797 	.word	0x0800a797
 800a780:	0800a7a1 	.word	0x0800a7a1
 800a784:	0800a7ab 	.word	0x0800a7ab
 800a788:	0800a7b5 	.word	0x0800a7b5
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 800a78c:	7dbb      	ldrb	r3, [r7, #22]
 800a78e:	f043 0310 	orr.w	r3, r3, #16
 800a792:	75bb      	strb	r3, [r7, #22]
				break;
 800a794:	e041      	b.n	800a81a <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 800a796:	7dbb      	ldrb	r3, [r7, #22]
 800a798:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 800a79c:	75bb      	strb	r3, [r7, #22]
				break;
 800a79e:	e03c      	b.n	800a81a <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 800a7a0:	7dbb      	ldrb	r3, [r7, #22]
 800a7a2:	f043 0304 	orr.w	r3, r3, #4
 800a7a6:	75bb      	strb	r3, [r7, #22]
				break;
 800a7a8:	e037      	b.n	800a81a <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 800a7aa:	7dbb      	ldrb	r3, [r7, #22]
 800a7ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a7b0:	75bb      	strb	r3, [r7, #22]
				break;
 800a7b2:	e032      	b.n	800a81a <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 800a7b4:	7dbb      	ldrb	r3, [r7, #22]
 800a7b6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a7ba:	75bb      	strb	r3, [r7, #22]
				break;
 800a7bc:	e02d      	b.n	800a81a <VL53L0X_SetSequenceStepEnable+0xee>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a7be:	23fc      	movs	r3, #252	@ 0xfc
 800a7c0:	75fb      	strb	r3, [r7, #23]
 800a7c2:	e02a      	b.n	800a81a <VL53L0X_SetSequenceStepEnable+0xee>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 800a7c4:	78fb      	ldrb	r3, [r7, #3]
 800a7c6:	2b04      	cmp	r3, #4
 800a7c8:	d825      	bhi.n	800a816 <VL53L0X_SetSequenceStepEnable+0xea>
 800a7ca:	a201      	add	r2, pc, #4	@ (adr r2, 800a7d0 <VL53L0X_SetSequenceStepEnable+0xa4>)
 800a7cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7d0:	0800a7e5 	.word	0x0800a7e5
 800a7d4:	0800a7ef 	.word	0x0800a7ef
 800a7d8:	0800a7f9 	.word	0x0800a7f9
 800a7dc:	0800a803 	.word	0x0800a803
 800a7e0:	0800a80d 	.word	0x0800a80d
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 800a7e4:	7dbb      	ldrb	r3, [r7, #22]
 800a7e6:	f023 0310 	bic.w	r3, r3, #16
 800a7ea:	75bb      	strb	r3, [r7, #22]
				break;
 800a7ec:	e015      	b.n	800a81a <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 800a7ee:	7dbb      	ldrb	r3, [r7, #22]
 800a7f0:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 800a7f4:	75bb      	strb	r3, [r7, #22]
				break;
 800a7f6:	e010      	b.n	800a81a <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 800a7f8:	7dbb      	ldrb	r3, [r7, #22]
 800a7fa:	f023 0304 	bic.w	r3, r3, #4
 800a7fe:	75bb      	strb	r3, [r7, #22]
				break;
 800a800:	e00b      	b.n	800a81a <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 800a802:	7dbb      	ldrb	r3, [r7, #22]
 800a804:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a808:	75bb      	strb	r3, [r7, #22]
				break;
 800a80a:	e006      	b.n	800a81a <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 800a80c:	7dbb      	ldrb	r3, [r7, #22]
 800a80e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a812:	75bb      	strb	r3, [r7, #22]
				break;
 800a814:	e001      	b.n	800a81a <VL53L0X_SetSequenceStepEnable+0xee>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a816:	23fc      	movs	r3, #252	@ 0xfc
 800a818:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	if (SequenceConfigNew != SequenceConfig) {
 800a81a:	7bfb      	ldrb	r3, [r7, #15]
 800a81c:	7dba      	ldrb	r2, [r7, #22]
 800a81e:	429a      	cmp	r2, r3
 800a820:	d01e      	beq.n	800a860 <VL53L0X_SetSequenceStepEnable+0x134>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 800a822:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d107      	bne.n	800a83a <VL53L0X_SetSequenceStepEnable+0x10e>
			Status = VL53L0X_WrByte(Dev,
 800a82a:	7dbb      	ldrb	r3, [r7, #22]
 800a82c:	461a      	mov	r2, r3
 800a82e:	2101      	movs	r1, #1
 800a830:	6878      	ldr	r0, [r7, #4]
 800a832:	f004 fa6f 	bl	800ed14 <VL53L0X_WrByte>
 800a836:	4603      	mov	r3, r0
 800a838:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 800a83a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d103      	bne.n	800a84a <VL53L0X_SetSequenceStepEnable+0x11e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	7dba      	ldrb	r2, [r7, #22]
 800a846:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 800a84a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d106      	bne.n	800a860 <VL53L0X_SetSequenceStepEnable+0x134>
			VL53L0X_GETPARAMETERFIELD(Dev,
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	695b      	ldr	r3, [r3, #20]
 800a856:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800a858:	6939      	ldr	r1, [r7, #16]
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	f7ff ff10 	bl	800a680 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800a860:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a864:	4618      	mov	r0, r3
 800a866:	3718      	adds	r7, #24
 800a868:	46bd      	mov	sp, r7
 800a86a:	bd80      	pop	{r7, pc}

0800a86c <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 800a86c:	b480      	push	{r7}
 800a86e:	b087      	sub	sp, #28
 800a870:	af00      	add	r7, sp, #0
 800a872:	60f8      	str	r0, [r7, #12]
 800a874:	607b      	str	r3, [r7, #4]
 800a876:	460b      	mov	r3, r1
 800a878:	72fb      	strb	r3, [r7, #11]
 800a87a:	4613      	mov	r3, r2
 800a87c:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a87e:	2300      	movs	r3, #0
 800a880:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	2200      	movs	r2, #0
 800a886:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 800a888:	7afb      	ldrb	r3, [r7, #11]
 800a88a:	2b04      	cmp	r3, #4
 800a88c:	d836      	bhi.n	800a8fc <sequence_step_enabled+0x90>
 800a88e:	a201      	add	r2, pc, #4	@ (adr r2, 800a894 <sequence_step_enabled+0x28>)
 800a890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a894:	0800a8a9 	.word	0x0800a8a9
 800a898:	0800a8bb 	.word	0x0800a8bb
 800a89c:	0800a8cd 	.word	0x0800a8cd
 800a8a0:	0800a8df 	.word	0x0800a8df
 800a8a4:	0800a8f1 	.word	0x0800a8f1
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 800a8a8:	7abb      	ldrb	r3, [r7, #10]
 800a8aa:	111b      	asrs	r3, r3, #4
 800a8ac:	b2db      	uxtb	r3, r3
 800a8ae:	f003 0301 	and.w	r3, r3, #1
 800a8b2:	b2da      	uxtb	r2, r3
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	701a      	strb	r2, [r3, #0]
		break;
 800a8b8:	e022      	b.n	800a900 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 800a8ba:	7abb      	ldrb	r3, [r7, #10]
 800a8bc:	10db      	asrs	r3, r3, #3
 800a8be:	b2db      	uxtb	r3, r3
 800a8c0:	f003 0301 	and.w	r3, r3, #1
 800a8c4:	b2da      	uxtb	r2, r3
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	701a      	strb	r2, [r3, #0]
		break;
 800a8ca:	e019      	b.n	800a900 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 800a8cc:	7abb      	ldrb	r3, [r7, #10]
 800a8ce:	109b      	asrs	r3, r3, #2
 800a8d0:	b2db      	uxtb	r3, r3
 800a8d2:	f003 0301 	and.w	r3, r3, #1
 800a8d6:	b2da      	uxtb	r2, r3
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	701a      	strb	r2, [r3, #0]
		break;
 800a8dc:	e010      	b.n	800a900 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 800a8de:	7abb      	ldrb	r3, [r7, #10]
 800a8e0:	119b      	asrs	r3, r3, #6
 800a8e2:	b2db      	uxtb	r3, r3
 800a8e4:	f003 0301 	and.w	r3, r3, #1
 800a8e8:	b2da      	uxtb	r2, r3
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	701a      	strb	r2, [r3, #0]
		break;
 800a8ee:	e007      	b.n	800a900 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 800a8f0:	7abb      	ldrb	r3, [r7, #10]
 800a8f2:	09db      	lsrs	r3, r3, #7
 800a8f4:	b2da      	uxtb	r2, r3
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	701a      	strb	r2, [r3, #0]
		break;
 800a8fa:	e001      	b.n	800a900 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a8fc:	23fc      	movs	r3, #252	@ 0xfc
 800a8fe:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a900:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a904:	4618      	mov	r0, r3
 800a906:	371c      	adds	r7, #28
 800a908:	46bd      	mov	sp, r7
 800a90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90e:	4770      	bx	lr

0800a910 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b084      	sub	sp, #16
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
 800a918:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a91a:	2300      	movs	r3, #0
 800a91c:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 800a91e:	2300      	movs	r3, #0
 800a920:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800a922:	f107 030e 	add.w	r3, r7, #14
 800a926:	461a      	mov	r2, r3
 800a928:	2101      	movs	r1, #1
 800a92a:	6878      	ldr	r0, [r7, #4]
 800a92c:	f004 fa74 	bl	800ee18 <VL53L0X_RdByte>
 800a930:	4603      	mov	r3, r0
 800a932:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 800a934:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d107      	bne.n	800a94c <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 800a93c:	7bba      	ldrb	r2, [r7, #14]
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	2100      	movs	r1, #0
 800a942:	6878      	ldr	r0, [r7, #4]
 800a944:	f7ff ff92 	bl	800a86c <sequence_step_enabled>
 800a948:	4603      	mov	r3, r0
 800a94a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800a94c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d108      	bne.n	800a966 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 800a954:	7bba      	ldrb	r2, [r7, #14]
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	3302      	adds	r3, #2
 800a95a:	2101      	movs	r1, #1
 800a95c:	6878      	ldr	r0, [r7, #4]
 800a95e:	f7ff ff85 	bl	800a86c <sequence_step_enabled>
 800a962:	4603      	mov	r3, r0
 800a964:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800a966:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d108      	bne.n	800a980 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 800a96e:	7bba      	ldrb	r2, [r7, #14]
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	3301      	adds	r3, #1
 800a974:	2102      	movs	r1, #2
 800a976:	6878      	ldr	r0, [r7, #4]
 800a978:	f7ff ff78 	bl	800a86c <sequence_step_enabled>
 800a97c:	4603      	mov	r3, r0
 800a97e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800a980:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d108      	bne.n	800a99a <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 800a988:	7bba      	ldrb	r2, [r7, #14]
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	3303      	adds	r3, #3
 800a98e:	2103      	movs	r1, #3
 800a990:	6878      	ldr	r0, [r7, #4]
 800a992:	f7ff ff6b 	bl	800a86c <sequence_step_enabled>
 800a996:	4603      	mov	r3, r0
 800a998:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800a99a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d108      	bne.n	800a9b4 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 800a9a2:	7bba      	ldrb	r2, [r7, #14]
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	3304      	adds	r3, #4
 800a9a8:	2104      	movs	r1, #4
 800a9aa:	6878      	ldr	r0, [r7, #4]
 800a9ac:	f7ff ff5e 	bl	800a86c <sequence_step_enabled>
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a9b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	3710      	adds	r7, #16
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	bd80      	pop	{r7, pc}

0800a9c0 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b084      	sub	sp, #16
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
 800a9c8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 800a9ce:	f107 030c 	add.w	r3, r7, #12
 800a9d2:	461a      	mov	r2, r3
 800a9d4:	21f8      	movs	r1, #248	@ 0xf8
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	f004 fa48 	bl	800ee6c <VL53L0X_RdWord>
 800a9dc:	4603      	mov	r3, r0
 800a9de:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 800a9e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d108      	bne.n	800a9fa <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 800a9e8:	f107 0308 	add.w	r3, r7, #8
 800a9ec:	461a      	mov	r2, r3
 800a9ee:	2104      	movs	r1, #4
 800a9f0:	6878      	ldr	r0, [r7, #4]
 800a9f2:	f004 fa71 	bl	800eed8 <VL53L0X_RdDWord>
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a9fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d10c      	bne.n	800aa1c <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 800aa02:	89bb      	ldrh	r3, [r7, #12]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d005      	beq.n	800aa14 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 800aa08:	68bb      	ldr	r3, [r7, #8]
 800aa0a:	89ba      	ldrh	r2, [r7, #12]
 800aa0c:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 800aa10:	683b      	ldr	r3, [r7, #0]
 800aa12:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	681a      	ldr	r2, [r3, #0]
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800aa1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aa20:	4618      	mov	r0, r3
 800aa22:	3710      	adds	r7, #16
 800aa24:	46bd      	mov	sp, r7
 800aa26:	bd80      	pop	{r7, pc}

0800aa28 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 800aa28:	b480      	push	{r7}
 800aa2a:	b085      	sub	sp, #20
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
 800aa30:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aa32:	2300      	movs	r3, #0
 800aa34:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	7f1b      	ldrb	r3, [r3, #28]
 800aa3a:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	7bba      	ldrb	r2, [r7, #14]
 800aa40:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800aa42:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aa46:	4618      	mov	r0, r3
 800aa48:	3714      	adds	r7, #20
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa50:	4770      	bx	lr

0800aa52 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 800aa52:	b580      	push	{r7, lr}
 800aa54:	b086      	sub	sp, #24
 800aa56:	af00      	add	r7, sp, #0
 800aa58:	6078      	str	r0, [r7, #4]
 800aa5a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 800aa60:	f107 030e 	add.w	r3, r7, #14
 800aa64:	461a      	mov	r2, r3
 800aa66:	2120      	movs	r1, #32
 800aa68:	6878      	ldr	r0, [r7, #4]
 800aa6a:	f004 f9ff 	bl	800ee6c <VL53L0X_RdWord>
 800aa6e:	4603      	mov	r3, r0
 800aa70:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 800aa72:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d118      	bne.n	800aaac <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 800aa7a:	89fb      	ldrh	r3, [r7, #14]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d109      	bne.n	800aa94 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	6a1b      	ldr	r3, [r3, #32]
 800aa84:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	693a      	ldr	r2, [r7, #16]
 800aa8a:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2200      	movs	r2, #0
 800aa90:	771a      	strb	r2, [r3, #28]
 800aa92:	e00b      	b.n	800aaac <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 800aa94:	89fb      	ldrh	r3, [r7, #14]
 800aa96:	00db      	lsls	r3, r3, #3
 800aa98:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	693a      	ldr	r2, [r7, #16]
 800aa9e:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	693a      	ldr	r2, [r7, #16]
 800aaa4:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	2201      	movs	r2, #1
 800aaaa:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800aaac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aab0:	4618      	mov	r0, r3
 800aab2:	3718      	adds	r7, #24
 800aab4:	46bd      	mov	sp, r7
 800aab6:	bd80      	pop	{r7, pc}

0800aab8 <VL53L0X_SetRefCalibration>:

VL53L0X_Error VL53L0X_SetRefCalibration(VL53L0X_DEV Dev, uint8_t VhvSettings,
	uint8_t PhaseCal)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b084      	sub	sp, #16
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
 800aac0:	460b      	mov	r3, r1
 800aac2:	70fb      	strb	r3, [r7, #3]
 800aac4:	4613      	mov	r3, r2
 800aac6:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aac8:	2300      	movs	r3, #0
 800aaca:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_ref_calibration(Dev, VhvSettings, PhaseCal);
 800aacc:	78ba      	ldrb	r2, [r7, #2]
 800aace:	78fb      	ldrb	r3, [r7, #3]
 800aad0:	4619      	mov	r1, r3
 800aad2:	6878      	ldr	r0, [r7, #4]
 800aad4:	f001 fd76 	bl	800c5c4 <VL53L0X_set_ref_calibration>
 800aad8:	4603      	mov	r3, r0
 800aada:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800aadc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aae0:	4618      	mov	r0, r3
 800aae2:	3710      	adds	r7, #16
 800aae4:	46bd      	mov	sp, r7
 800aae6:	bd80      	pop	{r7, pc}

0800aae8 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b086      	sub	sp, #24
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
 800aaf0:	460b      	mov	r3, r1
 800aaf2:	807b      	strh	r3, [r7, #2]
 800aaf4:	4613      	mov	r3, r2
 800aaf6:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aaf8:	2300      	movs	r3, #0
 800aafa:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 800aafc:	2300      	movs	r3, #0
 800aafe:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 800ab00:	2300      	movs	r3, #0
 800ab02:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 800ab04:	2300      	movs	r3, #0
 800ab06:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800ab08:	887b      	ldrh	r3, [r7, #2]
 800ab0a:	2b05      	cmp	r3, #5
 800ab0c:	d902      	bls.n	800ab14 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ab0e:	23fc      	movs	r3, #252	@ 0xfc
 800ab10:	75fb      	strb	r3, [r7, #23]
 800ab12:	e05b      	b.n	800abcc <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 800ab14:	787b      	ldrb	r3, [r7, #1]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d106      	bne.n	800ab28 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 800ab1e:	2300      	movs	r3, #0
 800ab20:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 800ab22:	2301      	movs	r3, #1
 800ab24:	73bb      	strb	r3, [r7, #14]
 800ab26:	e00a      	b.n	800ab3e <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800ab28:	887b      	ldrh	r3, [r7, #2]
 800ab2a:	687a      	ldr	r2, [r7, #4]
 800ab2c:	330c      	adds	r3, #12
 800ab2e:	009b      	lsls	r3, r3, #2
 800ab30:	4413      	add	r3, r2
 800ab32:	685b      	ldr	r3, [r3, #4]
 800ab34:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 800ab36:	2300      	movs	r3, #0
 800ab38:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 800ab3a:	2301      	movs	r3, #1
 800ab3c:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 800ab3e:	887b      	ldrh	r3, [r7, #2]
 800ab40:	2b05      	cmp	r3, #5
 800ab42:	d841      	bhi.n	800abc8 <VL53L0X_SetLimitCheckEnable+0xe0>
 800ab44:	a201      	add	r2, pc, #4	@ (adr r2, 800ab4c <VL53L0X_SetLimitCheckEnable+0x64>)
 800ab46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab4a:	bf00      	nop
 800ab4c:	0800ab65 	.word	0x0800ab65
 800ab50:	0800ab6f 	.word	0x0800ab6f
 800ab54:	0800ab85 	.word	0x0800ab85
 800ab58:	0800ab8f 	.word	0x0800ab8f
 800ab5c:	0800ab99 	.word	0x0800ab99
 800ab60:	0800abb1 	.word	0x0800abb1

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	7bfa      	ldrb	r2, [r7, #15]
 800ab68:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 800ab6c:	e02e      	b.n	800abcc <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 800ab6e:	693b      	ldr	r3, [r7, #16]
 800ab70:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800ab72:	b29b      	uxth	r3, r3
 800ab74:	461a      	mov	r2, r3
 800ab76:	2144      	movs	r1, #68	@ 0x44
 800ab78:	6878      	ldr	r0, [r7, #4]
 800ab7a:	f004 f8ef 	bl	800ed5c <VL53L0X_WrWord>
 800ab7e:	4603      	mov	r3, r0
 800ab80:	75fb      	strb	r3, [r7, #23]

			break;
 800ab82:	e023      	b.n	800abcc <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	7bfa      	ldrb	r2, [r7, #15]
 800ab88:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 800ab8c:	e01e      	b.n	800abcc <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	7bfa      	ldrb	r2, [r7, #15]
 800ab92:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 800ab96:	e019      	b.n	800abcc <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 800ab98:	7bbb      	ldrb	r3, [r7, #14]
 800ab9a:	005b      	lsls	r3, r3, #1
 800ab9c:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800ab9e:	7b7b      	ldrb	r3, [r7, #13]
 800aba0:	22fe      	movs	r2, #254	@ 0xfe
 800aba2:	2160      	movs	r1, #96	@ 0x60
 800aba4:	6878      	ldr	r0, [r7, #4]
 800aba6:	f004 f903 	bl	800edb0 <VL53L0X_UpdateByte>
 800abaa:	4603      	mov	r3, r0
 800abac:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 800abae:	e00d      	b.n	800abcc <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 800abb0:	7bbb      	ldrb	r3, [r7, #14]
 800abb2:	011b      	lsls	r3, r3, #4
 800abb4:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800abb6:	7b7b      	ldrb	r3, [r7, #13]
 800abb8:	22ef      	movs	r2, #239	@ 0xef
 800abba:	2160      	movs	r1, #96	@ 0x60
 800abbc:	6878      	ldr	r0, [r7, #4]
 800abbe:	f004 f8f7 	bl	800edb0 <VL53L0X_UpdateByte>
 800abc2:	4603      	mov	r3, r0
 800abc4:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 800abc6:	e001      	b.n	800abcc <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800abc8:	23fc      	movs	r3, #252	@ 0xfc
 800abca:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800abcc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d10f      	bne.n	800abf4 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 800abd4:	787b      	ldrb	r3, [r7, #1]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d106      	bne.n	800abe8 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800abda:	887b      	ldrh	r3, [r7, #2]
 800abdc:	687a      	ldr	r2, [r7, #4]
 800abde:	4413      	add	r3, r2
 800abe0:	2200      	movs	r2, #0
 800abe2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 800abe6:	e005      	b.n	800abf4 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800abe8:	887b      	ldrh	r3, [r7, #2]
 800abea:	687a      	ldr	r2, [r7, #4]
 800abec:	4413      	add	r3, r2
 800abee:	2201      	movs	r2, #1
 800abf0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800abf4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800abf8:	4618      	mov	r0, r3
 800abfa:	3718      	adds	r7, #24
 800abfc:	46bd      	mov	sp, r7
 800abfe:	bd80      	pop	{r7, pc}

0800ac00 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 800ac00:	b480      	push	{r7}
 800ac02:	b087      	sub	sp, #28
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	60f8      	str	r0, [r7, #12]
 800ac08:	460b      	mov	r3, r1
 800ac0a:	607a      	str	r2, [r7, #4]
 800ac0c:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ac0e:	2300      	movs	r3, #0
 800ac10:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800ac12:	897b      	ldrh	r3, [r7, #10]
 800ac14:	2b05      	cmp	r3, #5
 800ac16:	d905      	bls.n	800ac24 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ac18:	23fc      	movs	r3, #252	@ 0xfc
 800ac1a:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	2200      	movs	r2, #0
 800ac20:	701a      	strb	r2, [r3, #0]
 800ac22:	e008      	b.n	800ac36 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800ac24:	897b      	ldrh	r3, [r7, #10]
 800ac26:	68fa      	ldr	r2, [r7, #12]
 800ac28:	4413      	add	r3, r2
 800ac2a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ac2e:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	7dba      	ldrb	r2, [r7, #22]
 800ac34:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ac36:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	371c      	adds	r7, #28
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac44:	4770      	bx	lr
	...

0800ac48 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b086      	sub	sp, #24
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	60f8      	str	r0, [r7, #12]
 800ac50:	460b      	mov	r3, r1
 800ac52:	607a      	str	r2, [r7, #4]
 800ac54:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ac56:	2300      	movs	r3, #0
 800ac58:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 800ac5a:	897b      	ldrh	r3, [r7, #10]
 800ac5c:	68fa      	ldr	r2, [r7, #12]
 800ac5e:	4413      	add	r3, r2
 800ac60:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ac64:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 800ac66:	7dbb      	ldrb	r3, [r7, #22]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d107      	bne.n	800ac7c <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800ac6c:	897b      	ldrh	r3, [r7, #10]
 800ac6e:	68fa      	ldr	r2, [r7, #12]
 800ac70:	330c      	adds	r3, #12
 800ac72:	009b      	lsls	r3, r3, #2
 800ac74:	4413      	add	r3, r2
 800ac76:	687a      	ldr	r2, [r7, #4]
 800ac78:	605a      	str	r2, [r3, #4]
 800ac7a:	e040      	b.n	800acfe <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 800ac7c:	897b      	ldrh	r3, [r7, #10]
 800ac7e:	2b05      	cmp	r3, #5
 800ac80:	d830      	bhi.n	800ace4 <VL53L0X_SetLimitCheckValue+0x9c>
 800ac82:	a201      	add	r2, pc, #4	@ (adr r2, 800ac88 <VL53L0X_SetLimitCheckValue+0x40>)
 800ac84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac88:	0800aca1 	.word	0x0800aca1
 800ac8c:	0800aca9 	.word	0x0800aca9
 800ac90:	0800acbf 	.word	0x0800acbf
 800ac94:	0800acc7 	.word	0x0800acc7
 800ac98:	0800accf 	.word	0x0800accf
 800ac9c:	0800accf 	.word	0x0800accf

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	687a      	ldr	r2, [r7, #4]
 800aca4:	635a      	str	r2, [r3, #52]	@ 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 800aca6:	e01f      	b.n	800ace8 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800acac:	b29b      	uxth	r3, r3
 800acae:	461a      	mov	r2, r3
 800acb0:	2144      	movs	r1, #68	@ 0x44
 800acb2:	68f8      	ldr	r0, [r7, #12]
 800acb4:	f004 f852 	bl	800ed5c <VL53L0X_WrWord>
 800acb8:	4603      	mov	r3, r0
 800acba:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800acbc:	e014      	b.n	800ace8 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	687a      	ldr	r2, [r7, #4]
 800acc2:	63da      	str	r2, [r3, #60]	@ 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 800acc4:	e010      	b.n	800ace8 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	687a      	ldr	r2, [r7, #4]
 800acca:	641a      	str	r2, [r3, #64]	@ 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 800accc:	e00c      	b.n	800ace8 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800acd2:	b29b      	uxth	r3, r3
 800acd4:	461a      	mov	r2, r3
 800acd6:	2164      	movs	r1, #100	@ 0x64
 800acd8:	68f8      	ldr	r0, [r7, #12]
 800acda:	f004 f83f 	bl	800ed5c <VL53L0X_WrWord>
 800acde:	4603      	mov	r3, r0
 800ace0:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800ace2:	e001      	b.n	800ace8 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ace4:	23fc      	movs	r3, #252	@ 0xfc
 800ace6:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 800ace8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d106      	bne.n	800acfe <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800acf0:	897b      	ldrh	r3, [r7, #10]
 800acf2:	68fa      	ldr	r2, [r7, #12]
 800acf4:	330c      	adds	r3, #12
 800acf6:	009b      	lsls	r3, r3, #2
 800acf8:	4413      	add	r3, r2
 800acfa:	687a      	ldr	r2, [r7, #4]
 800acfc:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800acfe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ad02:	4618      	mov	r0, r3
 800ad04:	3718      	adds	r7, #24
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd80      	pop	{r7, pc}
 800ad0a:	bf00      	nop

0800ad0c <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b088      	sub	sp, #32
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	60f8      	str	r0, [r7, #12]
 800ad14:	460b      	mov	r3, r1
 800ad16:	607a      	str	r2, [r7, #4]
 800ad18:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 800ad1e:	2300      	movs	r3, #0
 800ad20:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800ad22:	897b      	ldrh	r3, [r7, #10]
 800ad24:	2b05      	cmp	r3, #5
 800ad26:	d847      	bhi.n	800adb8 <VL53L0X_GetLimitCheckValue+0xac>
 800ad28:	a201      	add	r2, pc, #4	@ (adr r2, 800ad30 <VL53L0X_GetLimitCheckValue+0x24>)
 800ad2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad2e:	bf00      	nop
 800ad30:	0800ad49 	.word	0x0800ad49
 800ad34:	0800ad55 	.word	0x0800ad55
 800ad38:	0800ad7b 	.word	0x0800ad7b
 800ad3c:	0800ad87 	.word	0x0800ad87
 800ad40:	0800ad93 	.word	0x0800ad93
 800ad44:	0800ad93 	.word	0x0800ad93

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad4c:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 800ad4e:	2300      	movs	r3, #0
 800ad50:	77bb      	strb	r3, [r7, #30]
		break;
 800ad52:	e033      	b.n	800adbc <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800ad54:	f107 0316 	add.w	r3, r7, #22
 800ad58:	461a      	mov	r2, r3
 800ad5a:	2144      	movs	r1, #68	@ 0x44
 800ad5c:	68f8      	ldr	r0, [r7, #12]
 800ad5e:	f004 f885 	bl	800ee6c <VL53L0X_RdWord>
 800ad62:	4603      	mov	r3, r0
 800ad64:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800ad66:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d102      	bne.n	800ad74 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800ad6e:	8afb      	ldrh	r3, [r7, #22]
 800ad70:	025b      	lsls	r3, r3, #9
 800ad72:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 800ad74:	2301      	movs	r3, #1
 800ad76:	77bb      	strb	r3, [r7, #30]
		break;
 800ad78:	e020      	b.n	800adbc <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad7e:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 800ad80:	2300      	movs	r3, #0
 800ad82:	77bb      	strb	r3, [r7, #30]
		break;
 800ad84:	e01a      	b.n	800adbc <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad8a:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	77bb      	strb	r3, [r7, #30]
		break;
 800ad90:	e014      	b.n	800adbc <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800ad92:	f107 0316 	add.w	r3, r7, #22
 800ad96:	461a      	mov	r2, r3
 800ad98:	2164      	movs	r1, #100	@ 0x64
 800ad9a:	68f8      	ldr	r0, [r7, #12]
 800ad9c:	f004 f866 	bl	800ee6c <VL53L0X_RdWord>
 800ada0:	4603      	mov	r3, r0
 800ada2:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800ada4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d102      	bne.n	800adb2 <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800adac:	8afb      	ldrh	r3, [r7, #22]
 800adae:	025b      	lsls	r3, r3, #9
 800adb0:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 800adb2:	2300      	movs	r3, #0
 800adb4:	77bb      	strb	r3, [r7, #30]
		break;
 800adb6:	e001      	b.n	800adbc <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800adb8:	23fc      	movs	r3, #252	@ 0xfc
 800adba:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800adbc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d12a      	bne.n	800ae1a <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 800adc4:	7fbb      	ldrb	r3, [r7, #30]
 800adc6:	2b01      	cmp	r3, #1
 800adc8:	d124      	bne.n	800ae14 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 800adca:	69bb      	ldr	r3, [r7, #24]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d110      	bne.n	800adf2 <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 800add0:	897b      	ldrh	r3, [r7, #10]
 800add2:	68fa      	ldr	r2, [r7, #12]
 800add4:	330c      	adds	r3, #12
 800add6:	009b      	lsls	r3, r3, #2
 800add8:	4413      	add	r3, r2
 800adda:	685b      	ldr	r3, [r3, #4]
 800addc:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	69ba      	ldr	r2, [r7, #24]
 800ade2:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800ade4:	897b      	ldrh	r3, [r7, #10]
 800ade6:	68fa      	ldr	r2, [r7, #12]
 800ade8:	4413      	add	r3, r2
 800adea:	2200      	movs	r2, #0
 800adec:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 800adf0:	e013      	b.n	800ae1a <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	69ba      	ldr	r2, [r7, #24]
 800adf6:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800adf8:	897b      	ldrh	r3, [r7, #10]
 800adfa:	68fa      	ldr	r2, [r7, #12]
 800adfc:	330c      	adds	r3, #12
 800adfe:	009b      	lsls	r3, r3, #2
 800ae00:	4413      	add	r3, r2
 800ae02:	69ba      	ldr	r2, [r7, #24]
 800ae04:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800ae06:	897b      	ldrh	r3, [r7, #10]
 800ae08:	68fa      	ldr	r2, [r7, #12]
 800ae0a:	4413      	add	r3, r2
 800ae0c:	2201      	movs	r2, #1
 800ae0e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 800ae12:	e002      	b.n	800ae1a <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	69ba      	ldr	r2, [r7, #24]
 800ae18:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ae1a:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800ae1e:	4618      	mov	r0, r3
 800ae20:	3720      	adds	r7, #32
 800ae22:	46bd      	mov	sp, r7
 800ae24:	bd80      	pop	{r7, pc}
 800ae26:	bf00      	nop

0800ae28 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b084      	sub	sp, #16
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
 800ae30:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ae32:	2300      	movs	r3, #0
 800ae34:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 800ae36:	f107 030e 	add.w	r3, r7, #14
 800ae3a:	461a      	mov	r2, r3
 800ae3c:	2101      	movs	r1, #1
 800ae3e:	6878      	ldr	r0, [r7, #4]
 800ae40:	f003 ffea 	bl	800ee18 <VL53L0X_RdByte>
 800ae44:	4603      	mov	r3, r0
 800ae46:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 800ae48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d10e      	bne.n	800ae6e <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 800ae50:	7bba      	ldrb	r2, [r7, #14]
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
		if (data & (0x01 << 7))
 800ae58:	7bbb      	ldrb	r3, [r7, #14]
 800ae5a:	b25b      	sxtb	r3, r3
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	da03      	bge.n	800ae68 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 800ae60:	683b      	ldr	r3, [r7, #0]
 800ae62:	2201      	movs	r2, #1
 800ae64:	701a      	strb	r2, [r3, #0]
 800ae66:	e002      	b.n	800ae6e <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800ae6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d104      	bne.n	800ae80 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	781a      	ldrb	r2, [r3, #0]
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ae80:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ae84:	4618      	mov	r0, r3
 800ae86:	3710      	adds	r7, #16
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	bd80      	pop	{r7, pc}

0800ae8c <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b084      	sub	sp, #16
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ae94:	2300      	movs	r3, #0
 800ae96:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800ae98:	f107 030e 	add.w	r3, r7, #14
 800ae9c:	4619      	mov	r1, r3
 800ae9e:	6878      	ldr	r0, [r7, #4]
 800aea0:	f7ff fbbc 	bl	800a61c <VL53L0X_GetDeviceMode>
 800aea4:	4603      	mov	r3, r0
 800aea6:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800aea8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d107      	bne.n	800aec0 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800aeb0:	7bbb      	ldrb	r3, [r7, #14]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d104      	bne.n	800aec0 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 800aeb6:	6878      	ldr	r0, [r7, #4]
 800aeb8:	f000 f898 	bl	800afec <VL53L0X_StartMeasurement>
 800aebc:	4603      	mov	r3, r0
 800aebe:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800aec0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d104      	bne.n	800aed2 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	f001 fb9e 	bl	800c60a <VL53L0X_measurement_poll_for_completion>
 800aece:	4603      	mov	r3, r0
 800aed0:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800aed2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d106      	bne.n	800aee8 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800aeda:	7bbb      	ldrb	r3, [r7, #14]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d103      	bne.n	800aee8 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	2203      	movs	r2, #3
 800aee4:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 800aee8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aeec:	4618      	mov	r0, r3
 800aeee:	3710      	adds	r7, #16
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bd80      	pop	{r7, pc}

0800aef4 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b086      	sub	sp, #24
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	60f8      	str	r0, [r7, #12]
 800aefc:	60b9      	str	r1, [r7, #8]
 800aefe:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800af00:	2300      	movs	r3, #0
 800af02:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 800af04:	2301      	movs	r3, #1
 800af06:	687a      	ldr	r2, [r7, #4]
 800af08:	68b9      	ldr	r1, [r7, #8]
 800af0a:	68f8      	ldr	r0, [r7, #12]
 800af0c:	f001 fb1d 	bl	800c54a <VL53L0X_perform_ref_calibration>
 800af10:	4603      	mov	r3, r0
 800af12:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 800af14:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800af18:	4618      	mov	r0, r3
 800af1a:	3718      	adds	r7, #24
 800af1c:	46bd      	mov	sp, r7
 800af1e:	bd80      	pop	{r7, pc}

0800af20 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b086      	sub	sp, #24
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
 800af28:	460b      	mov	r3, r1
 800af2a:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800af2c:	2300      	movs	r3, #0
 800af2e:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	f893 30da 	ldrb.w	r3, [r3, #218]	@ 0xda
 800af36:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 800af38:	7dbb      	ldrb	r3, [r7, #22]
 800af3a:	2b01      	cmp	r3, #1
 800af3c:	d005      	beq.n	800af4a <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 800af3e:	7dbb      	ldrb	r3, [r7, #22]
 800af40:	2b02      	cmp	r3, #2
 800af42:	d002      	beq.n	800af4a <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 800af44:	7dbb      	ldrb	r3, [r7, #22]
 800af46:	2b03      	cmp	r3, #3
 800af48:	d147      	bne.n	800afda <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 800af4a:	f107 030c 	add.w	r3, r7, #12
 800af4e:	f107 0210 	add.w	r2, r7, #16
 800af52:	2101      	movs	r1, #1
 800af54:	6878      	ldr	r0, [r7, #4]
 800af56:	f000 fbb9 	bl	800b6cc <VL53L0X_GetInterruptThresholds>
 800af5a:	4603      	mov	r3, r0
 800af5c:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 800af5e:	693b      	ldr	r3, [r7, #16]
 800af60:	f5b3 0f7f 	cmp.w	r3, #16711680	@ 0xff0000
 800af64:	d803      	bhi.n	800af6e <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 800af66:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 800af68:	f5b3 0f7f 	cmp.w	r3, #16711680	@ 0xff0000
 800af6c:	d935      	bls.n	800afda <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 800af6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d131      	bne.n	800afda <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 800af76:	78fb      	ldrb	r3, [r7, #3]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d006      	beq.n	800af8a <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 800af7c:	491a      	ldr	r1, [pc, #104]	@ (800afe8 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 800af7e:	6878      	ldr	r0, [r7, #4]
 800af80:	f002 ffb2 	bl	800dee8 <VL53L0X_load_tuning_settings>
 800af84:	4603      	mov	r3, r0
 800af86:	75fb      	strb	r3, [r7, #23]
 800af88:	e027      	b.n	800afda <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 800af8a:	2204      	movs	r2, #4
 800af8c:	21ff      	movs	r1, #255	@ 0xff
 800af8e:	6878      	ldr	r0, [r7, #4]
 800af90:	f003 fec0 	bl	800ed14 <VL53L0X_WrByte>
 800af94:	4603      	mov	r3, r0
 800af96:	461a      	mov	r2, r3
 800af98:	7dfb      	ldrb	r3, [r7, #23]
 800af9a:	4313      	orrs	r3, r2
 800af9c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 800af9e:	2200      	movs	r2, #0
 800afa0:	2170      	movs	r1, #112	@ 0x70
 800afa2:	6878      	ldr	r0, [r7, #4]
 800afa4:	f003 feb6 	bl	800ed14 <VL53L0X_WrByte>
 800afa8:	4603      	mov	r3, r0
 800afaa:	461a      	mov	r2, r3
 800afac:	7dfb      	ldrb	r3, [r7, #23]
 800afae:	4313      	orrs	r3, r2
 800afb0:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800afb2:	2200      	movs	r2, #0
 800afb4:	21ff      	movs	r1, #255	@ 0xff
 800afb6:	6878      	ldr	r0, [r7, #4]
 800afb8:	f003 feac 	bl	800ed14 <VL53L0X_WrByte>
 800afbc:	4603      	mov	r3, r0
 800afbe:	461a      	mov	r2, r3
 800afc0:	7dfb      	ldrb	r3, [r7, #23]
 800afc2:	4313      	orrs	r3, r2
 800afc4:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800afc6:	2200      	movs	r2, #0
 800afc8:	2180      	movs	r1, #128	@ 0x80
 800afca:	6878      	ldr	r0, [r7, #4]
 800afcc:	f003 fea2 	bl	800ed14 <VL53L0X_WrByte>
 800afd0:	4603      	mov	r3, r0
 800afd2:	461a      	mov	r2, r3
 800afd4:	7dfb      	ldrb	r3, [r7, #23]
 800afd6:	4313      	orrs	r3, r2
 800afd8:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 800afda:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800afde:	4618      	mov	r0, r3
 800afe0:	3718      	adds	r7, #24
 800afe2:	46bd      	mov	sp, r7
 800afe4:	bd80      	pop	{r7, pc}
 800afe6:	bf00      	nop
 800afe8:	200003d4 	.word	0x200003d4

0800afec <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b086      	sub	sp, #24
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aff4:	2300      	movs	r3, #0
 800aff6:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 800aff8:	2301      	movs	r3, #1
 800affa:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800affc:	f107 030e 	add.w	r3, r7, #14
 800b000:	4619      	mov	r1, r3
 800b002:	6878      	ldr	r0, [r7, #4]
 800b004:	f7ff fb0a 	bl	800a61c <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 800b008:	2201      	movs	r2, #1
 800b00a:	2180      	movs	r1, #128	@ 0x80
 800b00c:	6878      	ldr	r0, [r7, #4]
 800b00e:	f003 fe81 	bl	800ed14 <VL53L0X_WrByte>
 800b012:	4603      	mov	r3, r0
 800b014:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b016:	2201      	movs	r2, #1
 800b018:	21ff      	movs	r1, #255	@ 0xff
 800b01a:	6878      	ldr	r0, [r7, #4]
 800b01c:	f003 fe7a 	bl	800ed14 <VL53L0X_WrByte>
 800b020:	4603      	mov	r3, r0
 800b022:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 800b024:	2200      	movs	r2, #0
 800b026:	2100      	movs	r1, #0
 800b028:	6878      	ldr	r0, [r7, #4]
 800b02a:	f003 fe73 	bl	800ed14 <VL53L0X_WrByte>
 800b02e:	4603      	mov	r3, r0
 800b030:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	f893 313a 	ldrb.w	r3, [r3, #314]	@ 0x13a
 800b038:	461a      	mov	r2, r3
 800b03a:	2191      	movs	r1, #145	@ 0x91
 800b03c:	6878      	ldr	r0, [r7, #4]
 800b03e:	f003 fe69 	bl	800ed14 <VL53L0X_WrByte>
 800b042:	4603      	mov	r3, r0
 800b044:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 800b046:	2201      	movs	r2, #1
 800b048:	2100      	movs	r1, #0
 800b04a:	6878      	ldr	r0, [r7, #4]
 800b04c:	f003 fe62 	bl	800ed14 <VL53L0X_WrByte>
 800b050:	4603      	mov	r3, r0
 800b052:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b054:	2200      	movs	r2, #0
 800b056:	21ff      	movs	r1, #255	@ 0xff
 800b058:	6878      	ldr	r0, [r7, #4]
 800b05a:	f003 fe5b 	bl	800ed14 <VL53L0X_WrByte>
 800b05e:	4603      	mov	r3, r0
 800b060:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 800b062:	2200      	movs	r2, #0
 800b064:	2180      	movs	r1, #128	@ 0x80
 800b066:	6878      	ldr	r0, [r7, #4]
 800b068:	f003 fe54 	bl	800ed14 <VL53L0X_WrByte>
 800b06c:	4603      	mov	r3, r0
 800b06e:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 800b070:	7bbb      	ldrb	r3, [r7, #14]
 800b072:	2b03      	cmp	r3, #3
 800b074:	d054      	beq.n	800b120 <VL53L0X_StartMeasurement+0x134>
 800b076:	2b03      	cmp	r3, #3
 800b078:	dc6c      	bgt.n	800b154 <VL53L0X_StartMeasurement+0x168>
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d002      	beq.n	800b084 <VL53L0X_StartMeasurement+0x98>
 800b07e:	2b01      	cmp	r3, #1
 800b080:	d034      	beq.n	800b0ec <VL53L0X_StartMeasurement+0x100>
 800b082:	e067      	b.n	800b154 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 800b084:	2201      	movs	r2, #1
 800b086:	2100      	movs	r1, #0
 800b088:	6878      	ldr	r0, [r7, #4]
 800b08a:	f003 fe43 	bl	800ed14 <VL53L0X_WrByte>
 800b08e:	4603      	mov	r3, r0
 800b090:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 800b092:	7bfb      	ldrb	r3, [r7, #15]
 800b094:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 800b096:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d15d      	bne.n	800b15a <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 800b09e:	2300      	movs	r3, #0
 800b0a0:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 800b0a2:	693b      	ldr	r3, [r7, #16]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d008      	beq.n	800b0ba <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 800b0a8:	f107 030d 	add.w	r3, r7, #13
 800b0ac:	461a      	mov	r2, r3
 800b0ae:	2100      	movs	r1, #0
 800b0b0:	6878      	ldr	r0, [r7, #4]
 800b0b2:	f003 feb1 	bl	800ee18 <VL53L0X_RdByte>
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 800b0ba:	693b      	ldr	r3, [r7, #16]
 800b0bc:	3301      	adds	r3, #1
 800b0be:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 800b0c0:	7b7a      	ldrb	r2, [r7, #13]
 800b0c2:	7bfb      	ldrb	r3, [r7, #15]
 800b0c4:	4013      	ands	r3, r2
 800b0c6:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800b0c8:	7bfa      	ldrb	r2, [r7, #15]
 800b0ca:	429a      	cmp	r2, r3
 800b0cc:	d107      	bne.n	800b0de <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 800b0ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d103      	bne.n	800b0de <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800b0d6:	693b      	ldr	r3, [r7, #16]
 800b0d8:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800b0dc:	d3e1      	bcc.n	800b0a2 <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800b0de:	693b      	ldr	r3, [r7, #16]
 800b0e0:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800b0e4:	d339      	bcc.n	800b15a <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 800b0e6:	23f9      	movs	r3, #249	@ 0xf9
 800b0e8:	75fb      	strb	r3, [r7, #23]

		}

		break;
 800b0ea:	e036      	b.n	800b15a <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800b0ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d105      	bne.n	800b100 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800b0f4:	2101      	movs	r1, #1
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	f7ff ff12 	bl	800af20 <VL53L0X_CheckAndLoadInterruptSettings>
 800b0fc:	4603      	mov	r3, r0
 800b0fe:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800b100:	2202      	movs	r2, #2
 800b102:	2100      	movs	r1, #0
 800b104:	6878      	ldr	r0, [r7, #4]
 800b106:	f003 fe05 	bl	800ed14 <VL53L0X_WrByte>
 800b10a:	4603      	mov	r3, r0
 800b10c:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 800b10e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d123      	bne.n	800b15e <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	2204      	movs	r2, #4
 800b11a:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
		}
		break;
 800b11e:	e01e      	b.n	800b15e <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800b120:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d105      	bne.n	800b134 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800b128:	2101      	movs	r1, #1
 800b12a:	6878      	ldr	r0, [r7, #4]
 800b12c:	f7ff fef8 	bl	800af20 <VL53L0X_CheckAndLoadInterruptSettings>
 800b130:	4603      	mov	r3, r0
 800b132:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800b134:	2204      	movs	r2, #4
 800b136:	2100      	movs	r1, #0
 800b138:	6878      	ldr	r0, [r7, #4]
 800b13a:	f003 fdeb 	bl	800ed14 <VL53L0X_WrByte>
 800b13e:	4603      	mov	r3, r0
 800b140:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 800b142:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d10b      	bne.n	800b162 <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	2204      	movs	r2, #4
 800b14e:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
		}
		break;
 800b152:	e006      	b.n	800b162 <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800b154:	23f8      	movs	r3, #248	@ 0xf8
 800b156:	75fb      	strb	r3, [r7, #23]
 800b158:	e004      	b.n	800b164 <VL53L0X_StartMeasurement+0x178>
		break;
 800b15a:	bf00      	nop
 800b15c:	e002      	b.n	800b164 <VL53L0X_StartMeasurement+0x178>
		break;
 800b15e:	bf00      	nop
 800b160:	e000      	b.n	800b164 <VL53L0X_StartMeasurement+0x178>
		break;
 800b162:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 800b164:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b168:	4618      	mov	r0, r3
 800b16a:	3718      	adds	r7, #24
 800b16c:	46bd      	mov	sp, r7
 800b16e:	bd80      	pop	{r7, pc}

0800b170 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b084      	sub	sp, #16
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
 800b178:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b17a:	2300      	movs	r3, #0
 800b17c:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	f893 30da 	ldrb.w	r3, [r3, #218]	@ 0xda
 800b184:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 800b186:	7bbb      	ldrb	r3, [r7, #14]
 800b188:	2b04      	cmp	r3, #4
 800b18a:	d112      	bne.n	800b1b2 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 800b18c:	f107 0308 	add.w	r3, r7, #8
 800b190:	4619      	mov	r1, r3
 800b192:	6878      	ldr	r0, [r7, #4]
 800b194:	f000 fb0e 	bl	800b7b4 <VL53L0X_GetInterruptMaskStatus>
 800b198:	4603      	mov	r3, r0
 800b19a:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 800b19c:	68bb      	ldr	r3, [r7, #8]
 800b19e:	2b04      	cmp	r3, #4
 800b1a0:	d103      	bne.n	800b1aa <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 800b1a2:	683b      	ldr	r3, [r7, #0]
 800b1a4:	2201      	movs	r2, #1
 800b1a6:	701a      	strb	r2, [r3, #0]
 800b1a8:	e01c      	b.n	800b1e4 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	701a      	strb	r2, [r3, #0]
 800b1b0:	e018      	b.n	800b1e4 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 800b1b2:	f107 030d 	add.w	r3, r7, #13
 800b1b6:	461a      	mov	r2, r3
 800b1b8:	2114      	movs	r1, #20
 800b1ba:	6878      	ldr	r0, [r7, #4]
 800b1bc:	f003 fe2c 	bl	800ee18 <VL53L0X_RdByte>
 800b1c0:	4603      	mov	r3, r0
 800b1c2:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 800b1c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d10b      	bne.n	800b1e4 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 800b1cc:	7b7b      	ldrb	r3, [r7, #13]
 800b1ce:	f003 0301 	and.w	r3, r3, #1
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d003      	beq.n	800b1de <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	2201      	movs	r2, #1
 800b1da:	701a      	strb	r2, [r3, #0]
 800b1dc:	e002      	b.n	800b1e4 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 800b1de:	683b      	ldr	r3, [r7, #0]
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b1e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	3710      	adds	r7, #16
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bd80      	pop	{r7, pc}

0800b1f0 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800b1f0:	b5b0      	push	{r4, r5, r7, lr}
 800b1f2:	b096      	sub	sp, #88	@ 0x58
 800b1f4:	af02      	add	r7, sp, #8
 800b1f6:	6078      	str	r0, [r7, #4]
 800b1f8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 800b200:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800b204:	230c      	movs	r3, #12
 800b206:	2114      	movs	r1, #20
 800b208:	6878      	ldr	r0, [r7, #4]
 800b20a:	f003 fd57 	bl	800ecbc <VL53L0X_ReadMulti>
 800b20e:	4603      	mov	r3, r0
 800b210:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 800b214:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 800b218:	2b00      	cmp	r3, #0
 800b21a:	f040 80c8 	bne.w	800b3ae <VL53L0X_GetRangingMeasurementData+0x1be>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 800b21e:	683b      	ldr	r3, [r7, #0]
 800b220:	2200      	movs	r2, #0
 800b222:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	2200      	movs	r2, #0
 800b228:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 800b22a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800b22e:	021b      	lsls	r3, r3, #8
 800b230:	b29b      	uxth	r3, r3
 800b232:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800b236:	4413      	add	r3, r2
 800b238:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 800b23c:	683b      	ldr	r3, [r7, #0]
 800b23e:	2200      	movs	r2, #0
 800b240:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 800b242:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b246:	021b      	lsls	r3, r3, #8
 800b248:	b29b      	uxth	r3, r3
 800b24a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800b24e:	4413      	add	r3, r2
 800b250:	b29b      	uxth	r3, r3
 800b252:	025b      	lsls	r3, r3, #9
 800b254:	647b      	str	r3, [r7, #68]	@ 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 800b256:	683b      	ldr	r3, [r7, #0]
 800b258:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b25a:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 800b25c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800b260:	021b      	lsls	r3, r3, #8
 800b262:	b29b      	uxth	r3, r3
 800b264:	f897 2031 	ldrb.w	r2, [r7, #49]	@ 0x31
 800b268:	4413      	add	r3, r2
 800b26a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 800b26e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800b272:	025a      	lsls	r2, r3, #9
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 800b278:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800b27c:	021b      	lsls	r3, r3, #8
 800b27e:	b29b      	uxth	r3, r3
 800b280:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800b284:	4413      	add	r3, r2
 800b286:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800b290:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 800b292:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b296:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	f8b3 3152 	ldrh.w	r3, [r3, #338]	@ 0x152
 800b2a0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 800b2a8:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 800b2ac:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800b2ae:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b2b2:	d046      	beq.n	800b342 <VL53L0X_GetRangingMeasurementData+0x152>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 800b2b4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800b2b6:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 800b2ba:	fb02 f303 	mul.w	r3, r2, r3
 800b2be:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800b2c2:	4a58      	ldr	r2, [pc, #352]	@ (800b424 <VL53L0X_GetRangingMeasurementData+0x234>)
 800b2c4:	fb82 1203 	smull	r1, r2, r2, r3
 800b2c8:	1192      	asrs	r2, r2, #6
 800b2ca:	17db      	asrs	r3, r3, #31
 800b2cc:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 800b2ce:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	6a1b      	ldr	r3, [r3, #32]
 800b2d6:	873b      	strh	r3, [r7, #56]	@ 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	7f1b      	ldrb	r3, [r3, #28]
 800b2dc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 800b2e0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d02c      	beq.n	800b342 <VL53L0X_GetRangingMeasurementData+0x152>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 800b2e8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800b2ea:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800b2ee:	fb02 f303 	mul.w	r3, r2, r3
 800b2f2:	121a      	asrs	r2, r3, #8
					<= 0) {
 800b2f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
				if ((SignalRate
 800b2f6:	429a      	cmp	r2, r3
 800b2f8:	d10d      	bne.n	800b316 <VL53L0X_GetRangingMeasurementData+0x126>
					if (RangeFractionalEnable)
 800b2fa:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d004      	beq.n	800b30c <VL53L0X_GetRangingMeasurementData+0x11c>
						XtalkRangeMilliMeter = 8888;
 800b302:	f242 23b8 	movw	r3, #8888	@ 0x22b8
 800b306:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800b30a:	e016      	b.n	800b33a <VL53L0X_GetRangingMeasurementData+0x14a>
					else
						XtalkRangeMilliMeter = 8888
 800b30c:	f648 23e0 	movw	r3, #35552	@ 0x8ae0
 800b310:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800b314:	e011      	b.n	800b33a <VL53L0X_GetRangingMeasurementData+0x14a>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 800b316:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800b31a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b31c:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 800b320:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800b322:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 800b326:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 800b32a:	121b      	asrs	r3, r3, #8
 800b32c:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 800b32e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b330:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 800b332:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 800b336:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 800b33a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800b33e:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
			}

		}

		if (RangeFractionalEnable) {
 800b342:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800b346:	2b00      	cmp	r3, #0
 800b348:	d00d      	beq.n	800b366 <VL53L0X_GetRangingMeasurementData+0x176>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 800b34a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800b34e:	089b      	lsrs	r3, r3, #2
 800b350:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 800b352:	683b      	ldr	r3, [r7, #0]
 800b354:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 800b356:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800b35a:	b2db      	uxtb	r3, r3
 800b35c:	019b      	lsls	r3, r3, #6
 800b35e:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 800b360:	683b      	ldr	r3, [r7, #0]
 800b362:	75da      	strb	r2, [r3, #23]
 800b364:	e006      	b.n	800b374 <VL53L0X_GetRangingMeasurementData+0x184>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 800b366:	683b      	ldr	r3, [r7, #0]
 800b368:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 800b36c:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 800b36e:	683b      	ldr	r3, [r7, #0]
 800b370:	2200      	movs	r2, #0
 800b372:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 800b374:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800b378:	f897 103f 	ldrb.w	r1, [r7, #63]	@ 0x3f
 800b37c:	f107 0336 	add.w	r3, r7, #54	@ 0x36
 800b380:	9301      	str	r3, [sp, #4]
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	9300      	str	r3, [sp, #0]
 800b386:	4613      	mov	r3, r2
 800b388:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b38a:	6878      	ldr	r0, [r7, #4]
 800b38c:	f003 fa4a 	bl	800e824 <VL53L0X_get_pal_range_status>
 800b390:	4603      	mov	r3, r0
 800b392:	461a      	mov	r2, r3
 800b394:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800b398:	4313      	orrs	r3, r2
 800b39a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 800b39e:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d103      	bne.n	800b3ae <VL53L0X_GetRangingMeasurementData+0x1be>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 800b3a6:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b3ae:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d12f      	bne.n	800b416 <VL53L0X_GetRangingMeasurementData+0x226>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	f107 040c 	add.w	r4, r7, #12
 800b3bc:	f103 0550 	add.w	r5, r3, #80	@ 0x50
 800b3c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b3c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b3c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b3c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 800b3cc:	683b      	ldr	r3, [r7, #0]
 800b3ce:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 800b3d0:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 800b3d2:	683b      	ldr	r3, [r7, #0]
 800b3d4:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 800b3d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 800b3da:	683b      	ldr	r3, [r7, #0]
 800b3dc:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 800b3de:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 800b3e0:	683b      	ldr	r3, [r7, #0]
 800b3e2:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 800b3e4:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 800b3e6:	683b      	ldr	r3, [r7, #0]
 800b3e8:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 800b3ea:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 800b3ec:	683b      	ldr	r3, [r7, #0]
 800b3ee:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 800b3f0:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 800b3f2:	683b      	ldr	r3, [r7, #0]
 800b3f4:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 800b3f6:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 800b3f8:	683b      	ldr	r3, [r7, #0]
 800b3fa:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 800b3fc:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	f103 0450 	add.w	r4, r3, #80	@ 0x50
 800b406:	f107 050c 	add.w	r5, r7, #12
 800b40a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b40c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b40e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b412:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b416:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
}
 800b41a:	4618      	mov	r0, r3
 800b41c:	3750      	adds	r7, #80	@ 0x50
 800b41e:	46bd      	mov	sp, r7
 800b420:	bdb0      	pop	{r4, r5, r7, pc}
 800b422:	bf00      	nop
 800b424:	10624dd3 	.word	0x10624dd3

0800b428 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b084      	sub	sp, #16
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
 800b430:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b432:	2300      	movs	r3, #0
 800b434:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 800b436:	2100      	movs	r1, #0
 800b438:	6878      	ldr	r0, [r7, #4]
 800b43a:	f7ff f8c3 	bl	800a5c4 <VL53L0X_SetDeviceMode>
 800b43e:	4603      	mov	r3, r0
 800b440:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800b442:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d104      	bne.n	800b454 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	f7ff fd1e 	bl	800ae8c <VL53L0X_PerformSingleMeasurement>
 800b450:	4603      	mov	r3, r0
 800b452:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800b454:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d105      	bne.n	800b468 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 800b45c:	6839      	ldr	r1, [r7, #0]
 800b45e:	6878      	ldr	r0, [r7, #4]
 800b460:	f7ff fec6 	bl	800b1f0 <VL53L0X_GetRangingMeasurementData>
 800b464:	4603      	mov	r3, r0
 800b466:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 800b468:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d105      	bne.n	800b47c <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800b470:	2100      	movs	r1, #0
 800b472:	6878      	ldr	r0, [r7, #4]
 800b474:	f000 f95e 	bl	800b734 <VL53L0X_ClearInterruptMask>
 800b478:	4603      	mov	r3, r0
 800b47a:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 800b47c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b480:	4618      	mov	r0, r3
 800b482:	3710      	adds	r7, #16
 800b484:	46bd      	mov	sp, r7
 800b486:	bd80      	pop	{r7, pc}

0800b488 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b084      	sub	sp, #16
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
 800b490:	4608      	mov	r0, r1
 800b492:	4611      	mov	r1, r2
 800b494:	461a      	mov	r2, r3
 800b496:	4603      	mov	r3, r0
 800b498:	70fb      	strb	r3, [r7, #3]
 800b49a:	460b      	mov	r3, r1
 800b49c:	70bb      	strb	r3, [r7, #2]
 800b49e:	4613      	mov	r3, r2
 800b4a0:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 800b4a6:	78fb      	ldrb	r3, [r7, #3]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d002      	beq.n	800b4b2 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 800b4ac:	23f6      	movs	r3, #246	@ 0xf6
 800b4ae:	73fb      	strb	r3, [r7, #15]
 800b4b0:	e105      	b.n	800b6be <VL53L0X_SetGpioConfig+0x236>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 800b4b2:	78bb      	ldrb	r3, [r7, #2]
 800b4b4:	2b14      	cmp	r3, #20
 800b4b6:	d110      	bne.n	800b4da <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800b4b8:	7e3b      	ldrb	r3, [r7, #24]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d102      	bne.n	800b4c4 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 800b4be:	2310      	movs	r3, #16
 800b4c0:	73bb      	strb	r3, [r7, #14]
 800b4c2:	e001      	b.n	800b4c8 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 800b4c4:	2301      	movs	r3, #1
 800b4c6:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 800b4c8:	7bbb      	ldrb	r3, [r7, #14]
 800b4ca:	461a      	mov	r2, r3
 800b4cc:	2184      	movs	r1, #132	@ 0x84
 800b4ce:	6878      	ldr	r0, [r7, #4]
 800b4d0:	f003 fc20 	bl	800ed14 <VL53L0X_WrByte>
 800b4d4:	4603      	mov	r3, r0
 800b4d6:	73fb      	strb	r3, [r7, #15]
 800b4d8:	e0f1      	b.n	800b6be <VL53L0X_SetGpioConfig+0x236>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 800b4da:	78bb      	ldrb	r3, [r7, #2]
 800b4dc:	2b15      	cmp	r3, #21
 800b4de:	f040 8097 	bne.w	800b610 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800b4e2:	2201      	movs	r2, #1
 800b4e4:	21ff      	movs	r1, #255	@ 0xff
 800b4e6:	6878      	ldr	r0, [r7, #4]
 800b4e8:	f003 fc14 	bl	800ed14 <VL53L0X_WrByte>
 800b4ec:	4603      	mov	r3, r0
 800b4ee:	461a      	mov	r2, r3
 800b4f0:	7bfb      	ldrb	r3, [r7, #15]
 800b4f2:	4313      	orrs	r3, r2
 800b4f4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	2100      	movs	r1, #0
 800b4fa:	6878      	ldr	r0, [r7, #4]
 800b4fc:	f003 fc0a 	bl	800ed14 <VL53L0X_WrByte>
 800b500:	4603      	mov	r3, r0
 800b502:	461a      	mov	r2, r3
 800b504:	7bfb      	ldrb	r3, [r7, #15]
 800b506:	4313      	orrs	r3, r2
 800b508:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800b50a:	2200      	movs	r2, #0
 800b50c:	21ff      	movs	r1, #255	@ 0xff
 800b50e:	6878      	ldr	r0, [r7, #4]
 800b510:	f003 fc00 	bl	800ed14 <VL53L0X_WrByte>
 800b514:	4603      	mov	r3, r0
 800b516:	461a      	mov	r2, r3
 800b518:	7bfb      	ldrb	r3, [r7, #15]
 800b51a:	4313      	orrs	r3, r2
 800b51c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800b51e:	2201      	movs	r2, #1
 800b520:	2180      	movs	r1, #128	@ 0x80
 800b522:	6878      	ldr	r0, [r7, #4]
 800b524:	f003 fbf6 	bl	800ed14 <VL53L0X_WrByte>
 800b528:	4603      	mov	r3, r0
 800b52a:	461a      	mov	r2, r3
 800b52c:	7bfb      	ldrb	r3, [r7, #15]
 800b52e:	4313      	orrs	r3, r2
 800b530:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 800b532:	2202      	movs	r2, #2
 800b534:	2185      	movs	r1, #133	@ 0x85
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	f003 fbec 	bl	800ed14 <VL53L0X_WrByte>
 800b53c:	4603      	mov	r3, r0
 800b53e:	461a      	mov	r2, r3
 800b540:	7bfb      	ldrb	r3, [r7, #15]
 800b542:	4313      	orrs	r3, r2
 800b544:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 800b546:	2204      	movs	r2, #4
 800b548:	21ff      	movs	r1, #255	@ 0xff
 800b54a:	6878      	ldr	r0, [r7, #4]
 800b54c:	f003 fbe2 	bl	800ed14 <VL53L0X_WrByte>
 800b550:	4603      	mov	r3, r0
 800b552:	461a      	mov	r2, r3
 800b554:	7bfb      	ldrb	r3, [r7, #15]
 800b556:	4313      	orrs	r3, r2
 800b558:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 800b55a:	2200      	movs	r2, #0
 800b55c:	21cd      	movs	r1, #205	@ 0xcd
 800b55e:	6878      	ldr	r0, [r7, #4]
 800b560:	f003 fbd8 	bl	800ed14 <VL53L0X_WrByte>
 800b564:	4603      	mov	r3, r0
 800b566:	461a      	mov	r2, r3
 800b568:	7bfb      	ldrb	r3, [r7, #15]
 800b56a:	4313      	orrs	r3, r2
 800b56c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 800b56e:	2211      	movs	r2, #17
 800b570:	21cc      	movs	r1, #204	@ 0xcc
 800b572:	6878      	ldr	r0, [r7, #4]
 800b574:	f003 fbce 	bl	800ed14 <VL53L0X_WrByte>
 800b578:	4603      	mov	r3, r0
 800b57a:	461a      	mov	r2, r3
 800b57c:	7bfb      	ldrb	r3, [r7, #15]
 800b57e:	4313      	orrs	r3, r2
 800b580:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 800b582:	2207      	movs	r2, #7
 800b584:	21ff      	movs	r1, #255	@ 0xff
 800b586:	6878      	ldr	r0, [r7, #4]
 800b588:	f003 fbc4 	bl	800ed14 <VL53L0X_WrByte>
 800b58c:	4603      	mov	r3, r0
 800b58e:	461a      	mov	r2, r3
 800b590:	7bfb      	ldrb	r3, [r7, #15]
 800b592:	4313      	orrs	r3, r2
 800b594:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 800b596:	2200      	movs	r2, #0
 800b598:	21be      	movs	r1, #190	@ 0xbe
 800b59a:	6878      	ldr	r0, [r7, #4]
 800b59c:	f003 fbba 	bl	800ed14 <VL53L0X_WrByte>
 800b5a0:	4603      	mov	r3, r0
 800b5a2:	461a      	mov	r2, r3
 800b5a4:	7bfb      	ldrb	r3, [r7, #15]
 800b5a6:	4313      	orrs	r3, r2
 800b5a8:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 800b5aa:	2206      	movs	r2, #6
 800b5ac:	21ff      	movs	r1, #255	@ 0xff
 800b5ae:	6878      	ldr	r0, [r7, #4]
 800b5b0:	f003 fbb0 	bl	800ed14 <VL53L0X_WrByte>
 800b5b4:	4603      	mov	r3, r0
 800b5b6:	461a      	mov	r2, r3
 800b5b8:	7bfb      	ldrb	r3, [r7, #15]
 800b5ba:	4313      	orrs	r3, r2
 800b5bc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 800b5be:	2209      	movs	r2, #9
 800b5c0:	21cc      	movs	r1, #204	@ 0xcc
 800b5c2:	6878      	ldr	r0, [r7, #4]
 800b5c4:	f003 fba6 	bl	800ed14 <VL53L0X_WrByte>
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	461a      	mov	r2, r3
 800b5cc:	7bfb      	ldrb	r3, [r7, #15]
 800b5ce:	4313      	orrs	r3, r2
 800b5d0:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	21ff      	movs	r1, #255	@ 0xff
 800b5d6:	6878      	ldr	r0, [r7, #4]
 800b5d8:	f003 fb9c 	bl	800ed14 <VL53L0X_WrByte>
 800b5dc:	4603      	mov	r3, r0
 800b5de:	461a      	mov	r2, r3
 800b5e0:	7bfb      	ldrb	r3, [r7, #15]
 800b5e2:	4313      	orrs	r3, r2
 800b5e4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800b5e6:	2201      	movs	r2, #1
 800b5e8:	21ff      	movs	r1, #255	@ 0xff
 800b5ea:	6878      	ldr	r0, [r7, #4]
 800b5ec:	f003 fb92 	bl	800ed14 <VL53L0X_WrByte>
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	461a      	mov	r2, r3
 800b5f4:	7bfb      	ldrb	r3, [r7, #15]
 800b5f6:	4313      	orrs	r3, r2
 800b5f8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	2100      	movs	r1, #0
 800b5fe:	6878      	ldr	r0, [r7, #4]
 800b600:	f003 fb88 	bl	800ed14 <VL53L0X_WrByte>
 800b604:	4603      	mov	r3, r0
 800b606:	461a      	mov	r2, r3
 800b608:	7bfb      	ldrb	r3, [r7, #15]
 800b60a:	4313      	orrs	r3, r2
 800b60c:	73fb      	strb	r3, [r7, #15]
 800b60e:	e056      	b.n	800b6be <VL53L0X_SetGpioConfig+0x236>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 800b610:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d120      	bne.n	800b65a <VL53L0X_SetGpioConfig+0x1d2>
			switch (Functionality) {
 800b618:	787b      	ldrb	r3, [r7, #1]
 800b61a:	2b04      	cmp	r3, #4
 800b61c:	d81b      	bhi.n	800b656 <VL53L0X_SetGpioConfig+0x1ce>
 800b61e:	a201      	add	r2, pc, #4	@ (adr r2, 800b624 <VL53L0X_SetGpioConfig+0x19c>)
 800b620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b624:	0800b639 	.word	0x0800b639
 800b628:	0800b63f 	.word	0x0800b63f
 800b62c:	0800b645 	.word	0x0800b645
 800b630:	0800b64b 	.word	0x0800b64b
 800b634:	0800b651 	.word	0x0800b651
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 800b638:	2300      	movs	r3, #0
 800b63a:	73bb      	strb	r3, [r7, #14]
				break;
 800b63c:	e00d      	b.n	800b65a <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 800b63e:	2301      	movs	r3, #1
 800b640:	73bb      	strb	r3, [r7, #14]
				break;
 800b642:	e00a      	b.n	800b65a <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 800b644:	2302      	movs	r3, #2
 800b646:	73bb      	strb	r3, [r7, #14]
				break;
 800b648:	e007      	b.n	800b65a <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 800b64a:	2303      	movs	r3, #3
 800b64c:	73bb      	strb	r3, [r7, #14]
				break;
 800b64e:	e004      	b.n	800b65a <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 800b650:	2304      	movs	r3, #4
 800b652:	73bb      	strb	r3, [r7, #14]
				break;
 800b654:	e001      	b.n	800b65a <VL53L0X_SetGpioConfig+0x1d2>
			default:
				Status =
 800b656:	23f5      	movs	r3, #245	@ 0xf5
 800b658:	73fb      	strb	r3, [r7, #15]
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}

		if (Status == VL53L0X_ERROR_NONE)
 800b65a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d107      	bne.n	800b672 <VL53L0X_SetGpioConfig+0x1ea>
			Status = VL53L0X_WrByte(Dev,
 800b662:	7bbb      	ldrb	r3, [r7, #14]
 800b664:	461a      	mov	r2, r3
 800b666:	210a      	movs	r1, #10
 800b668:	6878      	ldr	r0, [r7, #4]
 800b66a:	f003 fb53 	bl	800ed14 <VL53L0X_WrByte>
 800b66e:	4603      	mov	r3, r0
 800b670:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 800b672:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d10f      	bne.n	800b69a <VL53L0X_SetGpioConfig+0x212>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800b67a:	7e3b      	ldrb	r3, [r7, #24]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d102      	bne.n	800b686 <VL53L0X_SetGpioConfig+0x1fe>
				data = 0;
 800b680:	2300      	movs	r3, #0
 800b682:	73bb      	strb	r3, [r7, #14]
 800b684:	e001      	b.n	800b68a <VL53L0X_SetGpioConfig+0x202>
			else
				data = (uint8_t)(1 << 4);
 800b686:	2310      	movs	r3, #16
 800b688:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 800b68a:	7bbb      	ldrb	r3, [r7, #14]
 800b68c:	22ef      	movs	r2, #239	@ 0xef
 800b68e:	2184      	movs	r1, #132	@ 0x84
 800b690:	6878      	ldr	r0, [r7, #4]
 800b692:	f003 fb8d 	bl	800edb0 <VL53L0X_UpdateByte>
 800b696:	4603      	mov	r3, r0
 800b698:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 800b69a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d103      	bne.n	800b6aa <VL53L0X_SetGpioConfig+0x222>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	787a      	ldrb	r2, [r7, #1]
 800b6a6:	f883 20da 	strb.w	r2, [r3, #218]	@ 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 800b6aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d105      	bne.n	800b6be <VL53L0X_SetGpioConfig+0x236>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800b6b2:	2100      	movs	r1, #0
 800b6b4:	6878      	ldr	r0, [r7, #4]
 800b6b6:	f000 f83d 	bl	800b734 <VL53L0X_ClearInterruptMask>
 800b6ba:	4603      	mov	r3, r0
 800b6bc:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b6be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	3710      	adds	r7, #16
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	bd80      	pop	{r7, pc}
 800b6ca:	bf00      	nop

0800b6cc <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b086      	sub	sp, #24
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	60f8      	str	r0, [r7, #12]
 800b6d4:	607a      	str	r2, [r7, #4]
 800b6d6:	603b      	str	r3, [r7, #0]
 800b6d8:	460b      	mov	r3, r1
 800b6da:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b6dc:	2300      	movs	r3, #0
 800b6de:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 800b6e0:	f107 0314 	add.w	r3, r7, #20
 800b6e4:	461a      	mov	r2, r3
 800b6e6:	210e      	movs	r1, #14
 800b6e8:	68f8      	ldr	r0, [r7, #12]
 800b6ea:	f003 fbbf 	bl	800ee6c <VL53L0X_RdWord>
 800b6ee:	4603      	mov	r3, r0
 800b6f0:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800b6f2:	8abb      	ldrh	r3, [r7, #20]
 800b6f4:	045a      	lsls	r2, r3, #17
 800b6f6:	4b0e      	ldr	r3, [pc, #56]	@ (800b730 <VL53L0X_GetInterruptThresholds+0x64>)
 800b6f8:	4013      	ands	r3, r2
 800b6fa:	687a      	ldr	r2, [r7, #4]
 800b6fc:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 800b6fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d10e      	bne.n	800b724 <VL53L0X_GetInterruptThresholds+0x58>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 800b706:	f107 0314 	add.w	r3, r7, #20
 800b70a:	461a      	mov	r2, r3
 800b70c:	210c      	movs	r1, #12
 800b70e:	68f8      	ldr	r0, [r7, #12]
 800b710:	f003 fbac 	bl	800ee6c <VL53L0X_RdWord>
 800b714:	4603      	mov	r3, r0
 800b716:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800b718:	8abb      	ldrh	r3, [r7, #20]
 800b71a:	045a      	lsls	r2, r3, #17
 800b71c:	4b04      	ldr	r3, [pc, #16]	@ (800b730 <VL53L0X_GetInterruptThresholds+0x64>)
 800b71e:	4013      	ands	r3, r2
		*pThresholdHigh =
 800b720:	683a      	ldr	r2, [r7, #0]
 800b722:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b724:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b728:	4618      	mov	r0, r3
 800b72a:	3718      	adds	r7, #24
 800b72c:	46bd      	mov	sp, r7
 800b72e:	bd80      	pop	{r7, pc}
 800b730:	1ffe0000 	.word	0x1ffe0000

0800b734 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 800b734:	b580      	push	{r7, lr}
 800b736:	b084      	sub	sp, #16
 800b738:	af00      	add	r7, sp, #0
 800b73a:	6078      	str	r0, [r7, #4]
 800b73c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b73e:	2300      	movs	r3, #0
 800b740:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 800b742:	2300      	movs	r3, #0
 800b744:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 800b746:	2201      	movs	r2, #1
 800b748:	210b      	movs	r1, #11
 800b74a:	6878      	ldr	r0, [r7, #4]
 800b74c:	f003 fae2 	bl	800ed14 <VL53L0X_WrByte>
 800b750:	4603      	mov	r3, r0
 800b752:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 800b754:	2200      	movs	r2, #0
 800b756:	210b      	movs	r1, #11
 800b758:	6878      	ldr	r0, [r7, #4]
 800b75a:	f003 fadb 	bl	800ed14 <VL53L0X_WrByte>
 800b75e:	4603      	mov	r3, r0
 800b760:	461a      	mov	r2, r3
 800b762:	7bfb      	ldrb	r3, [r7, #15]
 800b764:	4313      	orrs	r3, r2
 800b766:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 800b768:	f107 030d 	add.w	r3, r7, #13
 800b76c:	461a      	mov	r2, r3
 800b76e:	2113      	movs	r1, #19
 800b770:	6878      	ldr	r0, [r7, #4]
 800b772:	f003 fb51 	bl	800ee18 <VL53L0X_RdByte>
 800b776:	4603      	mov	r3, r0
 800b778:	461a      	mov	r2, r3
 800b77a:	7bfb      	ldrb	r3, [r7, #15]
 800b77c:	4313      	orrs	r3, r2
 800b77e:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 800b780:	7bbb      	ldrb	r3, [r7, #14]
 800b782:	3301      	adds	r3, #1
 800b784:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 800b786:	7b7b      	ldrb	r3, [r7, #13]
 800b788:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d006      	beq.n	800b79e <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 800b790:	7bbb      	ldrb	r3, [r7, #14]
 800b792:	2b02      	cmp	r3, #2
 800b794:	d803      	bhi.n	800b79e <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 800b796:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d0d3      	beq.n	800b746 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 800b79e:	7bbb      	ldrb	r3, [r7, #14]
 800b7a0:	2b02      	cmp	r3, #2
 800b7a2:	d901      	bls.n	800b7a8 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 800b7a4:	23f4      	movs	r3, #244	@ 0xf4
 800b7a6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800b7a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	3710      	adds	r7, #16
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	bd80      	pop	{r7, pc}

0800b7b4 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b084      	sub	sp, #16
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
 800b7bc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b7be:	2300      	movs	r3, #0
 800b7c0:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 800b7c2:	f107 030e 	add.w	r3, r7, #14
 800b7c6:	461a      	mov	r2, r3
 800b7c8:	2113      	movs	r1, #19
 800b7ca:	6878      	ldr	r0, [r7, #4]
 800b7cc:	f003 fb24 	bl	800ee18 <VL53L0X_RdByte>
 800b7d0:	4603      	mov	r3, r0
 800b7d2:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 800b7d4:	7bbb      	ldrb	r3, [r7, #14]
 800b7d6:	f003 0207 	and.w	r2, r3, #7
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 800b7de:	7bbb      	ldrb	r3, [r7, #14]
 800b7e0:	f003 0318 	and.w	r3, r3, #24
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d001      	beq.n	800b7ec <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 800b7e8:	23fa      	movs	r3, #250	@ 0xfa
 800b7ea:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800b7ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	3710      	adds	r7, #16
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	bd80      	pop	{r7, pc}

0800b7f8 <VL53L0X_SetReferenceSpads>:
 * Internal functions
 *****************************************************************************/

VL53L0X_Error VL53L0X_SetReferenceSpads(VL53L0X_DEV Dev, uint32_t count,
	uint8_t isApertureSpads)
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b086      	sub	sp, #24
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	60f8      	str	r0, [r7, #12]
 800b800:	60b9      	str	r1, [r7, #8]
 800b802:	4613      	mov	r3, r2
 800b804:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b806:	2300      	movs	r3, #0
 800b808:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_reference_spads(Dev, count, isApertureSpads);
 800b80a:	79fb      	ldrb	r3, [r7, #7]
 800b80c:	461a      	mov	r2, r3
 800b80e:	68b9      	ldr	r1, [r7, #8]
 800b810:	68f8      	ldr	r0, [r7, #12]
 800b812:	f000 fc55 	bl	800c0c0 <VL53L0X_set_reference_spads>
 800b816:	4603      	mov	r3, r0
 800b818:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);

	return Status;
 800b81a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b81e:	4618      	mov	r0, r3
 800b820:	3718      	adds	r7, #24
 800b822:	46bd      	mov	sp, r7
 800b824:	bd80      	pop	{r7, pc}

0800b826 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 800b826:	b580      	push	{r7, lr}
 800b828:	b086      	sub	sp, #24
 800b82a:	af00      	add	r7, sp, #0
 800b82c:	60f8      	str	r0, [r7, #12]
 800b82e:	60b9      	str	r1, [r7, #8]
 800b830:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b832:	2300      	movs	r3, #0
 800b834:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 800b836:	687a      	ldr	r2, [r7, #4]
 800b838:	68b9      	ldr	r1, [r7, #8]
 800b83a:	68f8      	ldr	r0, [r7, #12]
 800b83c:	f000 fa34 	bl	800bca8 <VL53L0X_perform_ref_spad_management>
 800b840:	4603      	mov	r3, r0
 800b842:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 800b844:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b848:	4618      	mov	r0, r3
 800b84a:	3718      	adds	r7, #24
 800b84c:	46bd      	mov	sp, r7
 800b84e:	bd80      	pop	{r7, pc}

0800b850 <VL53L0X_PerformContinuousRangingMeasurement>:


VL53L0X_Error VL53L0X_PerformContinuousRangingMeasurement(VL53L0X_Dev_t *device, VL53L0X_RangingMeasurementData_t *ranging_data) {
 800b850:	b580      	push	{r7, lr}
 800b852:	b084      	sub	sp, #16
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
 800b858:	6039      	str	r1, [r7, #0]
    VL53L0X_Error status;

    // Set the device to high accuracy mode
    status = VL53L0X_SetDeviceMode(device, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 800b85a:	2101      	movs	r1, #1
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	f7fe feb1 	bl	800a5c4 <VL53L0X_SetDeviceMode>
 800b862:	4603      	mov	r3, r0
 800b864:	73fb      	strb	r3, [r7, #15]
    if (status != VL53L0X_ERROR_NONE) {
 800b866:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d002      	beq.n	800b874 <VL53L0X_PerformContinuousRangingMeasurement+0x24>
        return status;
 800b86e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b872:	e019      	b.n	800b8a8 <VL53L0X_PerformContinuousRangingMeasurement+0x58>
    }

    // Start continuous ranging measurement
    status = VL53L0X_StartMeasurement(device);
 800b874:	6878      	ldr	r0, [r7, #4]
 800b876:	f7ff fbb9 	bl	800afec <VL53L0X_StartMeasurement>
 800b87a:	4603      	mov	r3, r0
 800b87c:	73fb      	strb	r3, [r7, #15]
    if (status != VL53L0X_ERROR_NONE) {
 800b87e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d002      	beq.n	800b88c <VL53L0X_PerformContinuousRangingMeasurement+0x3c>
        return status;
 800b886:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b88a:	e00d      	b.n	800b8a8 <VL53L0X_PerformContinuousRangingMeasurement+0x58>
    }

    // Get ranging measurement data
    status = VL53L0X_GetRangingMeasurementData(device, ranging_data);
 800b88c:	6839      	ldr	r1, [r7, #0]
 800b88e:	6878      	ldr	r0, [r7, #4]
 800b890:	f7ff fcae 	bl	800b1f0 <VL53L0X_GetRangingMeasurementData>
 800b894:	4603      	mov	r3, r0
 800b896:	73fb      	strb	r3, [r7, #15]
    if (status != VL53L0X_ERROR_NONE) {
 800b898:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d002      	beq.n	800b8a6 <VL53L0X_PerformContinuousRangingMeasurement+0x56>
        return status;
 800b8a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b8a4:	e000      	b.n	800b8a8 <VL53L0X_PerformContinuousRangingMeasurement+0x58>
    }

    return VL53L0X_ERROR_NONE;
 800b8a6:	2300      	movs	r3, #0
}
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	3710      	adds	r7, #16
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	bd80      	pop	{r7, pc}

0800b8b0 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b084      	sub	sp, #16
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
 800b8b8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 800b8be:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800b8c2:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 800b8c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b8c8:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 800b8ca:	f107 0308 	add.w	r3, r7, #8
 800b8ce:	461a      	mov	r2, r3
 800b8d0:	2128      	movs	r1, #40	@ 0x28
 800b8d2:	6878      	ldr	r0, [r7, #4]
 800b8d4:	f003 faca 	bl	800ee6c <VL53L0X_RdWord>
 800b8d8:	4603      	mov	r3, r0
 800b8da:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 800b8dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d11e      	bne.n	800b922 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 800b8e4:	893b      	ldrh	r3, [r7, #8]
 800b8e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b8ea:	b29b      	uxth	r3, r3
 800b8ec:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 800b8ee:	893b      	ldrh	r3, [r7, #8]
 800b8f0:	461a      	mov	r2, r3
 800b8f2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b8f6:	429a      	cmp	r2, r3
 800b8f8:	dd0b      	ble.n	800b912 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 800b8fa:	893a      	ldrh	r2, [r7, #8]
 800b8fc:	897b      	ldrh	r3, [r7, #10]
 800b8fe:	1ad3      	subs	r3, r2, r3
 800b900:	b29b      	uxth	r3, r3
 800b902:	b21b      	sxth	r3, r3
 800b904:	461a      	mov	r2, r3
					* 250;
 800b906:	23fa      	movs	r3, #250	@ 0xfa
 800b908:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800b90c:	683b      	ldr	r3, [r7, #0]
 800b90e:	601a      	str	r2, [r3, #0]
 800b910:	e007      	b.n	800b922 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 800b912:	893b      	ldrh	r3, [r7, #8]
 800b914:	b21b      	sxth	r3, r3
 800b916:	461a      	mov	r2, r3
 800b918:	23fa      	movs	r3, #250	@ 0xfa
 800b91a:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800b91e:	683b      	ldr	r3, [r7, #0]
 800b920:	601a      	str	r2, [r3, #0]

	}

	return Status;
 800b922:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b926:	4618      	mov	r0, r3
 800b928:	3710      	adds	r7, #16
 800b92a:	46bd      	mov	sp, r7
 800b92c:	bd80      	pop	{r7, pc}

0800b92e <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 800b92e:	b480      	push	{r7}
 800b930:	b08b      	sub	sp, #44	@ 0x2c
 800b932:	af00      	add	r7, sp, #0
 800b934:	60f8      	str	r0, [r7, #12]
 800b936:	60b9      	str	r1, [r7, #8]
 800b938:	607a      	str	r2, [r7, #4]
 800b93a:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 800b93c:	2308      	movs	r3, #8
 800b93e:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 800b940:	2300      	movs	r3, #0
 800b942:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 800b944:	683b      	ldr	r3, [r7, #0]
 800b946:	f04f 32ff 	mov.w	r2, #4294967295
 800b94a:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 800b94c:	687a      	ldr	r2, [r7, #4]
 800b94e:	69bb      	ldr	r3, [r7, #24]
 800b950:	fbb2 f3f3 	udiv	r3, r2, r3
 800b954:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	69ba      	ldr	r2, [r7, #24]
 800b95a:	fbb3 f2f2 	udiv	r2, r3, r2
 800b95e:	69b9      	ldr	r1, [r7, #24]
 800b960:	fb01 f202 	mul.w	r2, r1, r2
 800b964:	1a9b      	subs	r3, r3, r2
 800b966:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800b968:	697b      	ldr	r3, [r7, #20]
 800b96a:	627b      	str	r3, [r7, #36]	@ 0x24
 800b96c:	e030      	b.n	800b9d0 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 800b96e:	2300      	movs	r3, #0
 800b970:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 800b972:	68fa      	ldr	r2, [r7, #12]
 800b974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b976:	4413      	add	r3, r2
 800b978:	781b      	ldrb	r3, [r3, #0]
 800b97a:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 800b97c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b97e:	697b      	ldr	r3, [r7, #20]
 800b980:	429a      	cmp	r2, r3
 800b982:	d11e      	bne.n	800b9c2 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 800b984:	7ffa      	ldrb	r2, [r7, #31]
 800b986:	693b      	ldr	r3, [r7, #16]
 800b988:	fa42 f303 	asr.w	r3, r2, r3
 800b98c:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 800b98e:	693b      	ldr	r3, [r7, #16]
 800b990:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 800b992:	e016      	b.n	800b9c2 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 800b994:	7ffb      	ldrb	r3, [r7, #31]
 800b996:	f003 0301 	and.w	r3, r3, #1
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d00b      	beq.n	800b9b6 <get_next_good_spad+0x88>
				success = 1;
 800b99e:	2301      	movs	r3, #1
 800b9a0:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 800b9a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9a4:	69ba      	ldr	r2, [r7, #24]
 800b9a6:	fb03 f202 	mul.w	r2, r3, r2
 800b9aa:	6a3b      	ldr	r3, [r7, #32]
 800b9ac:	4413      	add	r3, r2
 800b9ae:	461a      	mov	r2, r3
 800b9b0:	683b      	ldr	r3, [r7, #0]
 800b9b2:	601a      	str	r2, [r3, #0]
				break;
 800b9b4:	e009      	b.n	800b9ca <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 800b9b6:	7ffb      	ldrb	r3, [r7, #31]
 800b9b8:	085b      	lsrs	r3, r3, #1
 800b9ba:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 800b9bc:	6a3b      	ldr	r3, [r7, #32]
 800b9be:	3301      	adds	r3, #1
 800b9c0:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 800b9c2:	6a3a      	ldr	r2, [r7, #32]
 800b9c4:	69bb      	ldr	r3, [r7, #24]
 800b9c6:	429a      	cmp	r2, r3
 800b9c8:	d3e4      	bcc.n	800b994 <get_next_good_spad+0x66>
				coarseIndex++) {
 800b9ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9cc:	3301      	adds	r3, #1
 800b9ce:	627b      	str	r3, [r7, #36]	@ 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800b9d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b9d2:	68bb      	ldr	r3, [r7, #8]
 800b9d4:	429a      	cmp	r2, r3
 800b9d6:	d202      	bcs.n	800b9de <get_next_good_spad+0xb0>
 800b9d8:	7fbb      	ldrb	r3, [r7, #30]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d0c7      	beq.n	800b96e <get_next_good_spad+0x40>
		}
	}
}
 800b9de:	bf00      	nop
 800b9e0:	372c      	adds	r7, #44	@ 0x2c
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e8:	4770      	bx	lr
	...

0800b9ec <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 800b9ec:	b480      	push	{r7}
 800b9ee:	b085      	sub	sp, #20
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 800b9f4:	2301      	movs	r3, #1
 800b9f6:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	099b      	lsrs	r3, r3, #6
 800b9fc:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 800b9fe:	4a07      	ldr	r2, [pc, #28]	@ (800ba1c <is_aperture+0x30>)
 800ba00:	68bb      	ldr	r3, [r7, #8]
 800ba02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d101      	bne.n	800ba0e <is_aperture+0x22>
		isAperture = 0;
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 800ba0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba10:	4618      	mov	r0, r3
 800ba12:	3714      	adds	r7, #20
 800ba14:	46bd      	mov	sp, r7
 800ba16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1a:	4770      	bx	lr
 800ba1c:	2000058c 	.word	0x2000058c

0800ba20 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 800ba20:	b480      	push	{r7}
 800ba22:	b089      	sub	sp, #36	@ 0x24
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	60f8      	str	r0, [r7, #12]
 800ba28:	60b9      	str	r1, [r7, #8]
 800ba2a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 800ba30:	2308      	movs	r3, #8
 800ba32:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 800ba34:	687a      	ldr	r2, [r7, #4]
 800ba36:	69bb      	ldr	r3, [r7, #24]
 800ba38:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba3c:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	69ba      	ldr	r2, [r7, #24]
 800ba42:	fbb3 f2f2 	udiv	r2, r3, r2
 800ba46:	69b9      	ldr	r1, [r7, #24]
 800ba48:	fb01 f202 	mul.w	r2, r1, r2
 800ba4c:	1a9b      	subs	r3, r3, r2
 800ba4e:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 800ba50:	697a      	ldr	r2, [r7, #20]
 800ba52:	68bb      	ldr	r3, [r7, #8]
 800ba54:	429a      	cmp	r2, r3
 800ba56:	d302      	bcc.n	800ba5e <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 800ba58:	23ce      	movs	r3, #206	@ 0xce
 800ba5a:	77fb      	strb	r3, [r7, #31]
 800ba5c:	e010      	b.n	800ba80 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 800ba5e:	68fa      	ldr	r2, [r7, #12]
 800ba60:	697b      	ldr	r3, [r7, #20]
 800ba62:	4413      	add	r3, r2
 800ba64:	781b      	ldrb	r3, [r3, #0]
 800ba66:	b25a      	sxtb	r2, r3
 800ba68:	2101      	movs	r1, #1
 800ba6a:	693b      	ldr	r3, [r7, #16]
 800ba6c:	fa01 f303 	lsl.w	r3, r1, r3
 800ba70:	b25b      	sxtb	r3, r3
 800ba72:	4313      	orrs	r3, r2
 800ba74:	b259      	sxtb	r1, r3
 800ba76:	68fa      	ldr	r2, [r7, #12]
 800ba78:	697b      	ldr	r3, [r7, #20]
 800ba7a:	4413      	add	r3, r2
 800ba7c:	b2ca      	uxtb	r2, r1
 800ba7e:	701a      	strb	r2, [r3, #0]

	return status;
 800ba80:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ba84:	4618      	mov	r0, r3
 800ba86:	3724      	adds	r7, #36	@ 0x24
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8e:	4770      	bx	lr

0800ba90 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b084      	sub	sp, #16
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
 800ba98:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 800ba9a:	2306      	movs	r3, #6
 800ba9c:	683a      	ldr	r2, [r7, #0]
 800ba9e:	21b0      	movs	r1, #176	@ 0xb0
 800baa0:	6878      	ldr	r0, [r7, #4]
 800baa2:	f003 f8db 	bl	800ec5c <VL53L0X_WriteMulti>
 800baa6:	4603      	mov	r3, r0
 800baa8:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 800baaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800baae:	4618      	mov	r0, r3
 800bab0:	3710      	adds	r7, #16
 800bab2:	46bd      	mov	sp, r7
 800bab4:	bd80      	pop	{r7, pc}

0800bab6 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800bab6:	b580      	push	{r7, lr}
 800bab8:	b084      	sub	sp, #16
 800baba:	af00      	add	r7, sp, #0
 800babc:	6078      	str	r0, [r7, #4]
 800babe:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 800bac0:	2306      	movs	r3, #6
 800bac2:	683a      	ldr	r2, [r7, #0]
 800bac4:	21b0      	movs	r1, #176	@ 0xb0
 800bac6:	6878      	ldr	r0, [r7, #4]
 800bac8:	f003 f8f8 	bl	800ecbc <VL53L0X_ReadMulti>
 800bacc:	4603      	mov	r3, r0
 800bace:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 800bad0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bad4:	4618      	mov	r0, r3
 800bad6:	3710      	adds	r7, #16
 800bad8:	46bd      	mov	sp, r7
 800bada:	bd80      	pop	{r7, pc}

0800badc <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 800badc:	b580      	push	{r7, lr}
 800bade:	b08c      	sub	sp, #48	@ 0x30
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	60f8      	str	r0, [r7, #12]
 800bae4:	607a      	str	r2, [r7, #4]
 800bae6:	603b      	str	r3, [r7, #0]
 800bae8:	460b      	mov	r3, r1
 800baea:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800baec:	2300      	movs	r3, #0
 800baee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 800baf2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800baf4:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 800baf6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800baf8:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800bafa:	2300      	movs	r3, #0
 800bafc:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bafe:	e02b      	b.n	800bb58 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 800bb00:	f107 031c 	add.w	r3, r7, #28
 800bb04:	6a3a      	ldr	r2, [r7, #32]
 800bb06:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800bb08:	6878      	ldr	r0, [r7, #4]
 800bb0a:	f7ff ff10 	bl	800b92e <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 800bb0e:	69fb      	ldr	r3, [r7, #28]
 800bb10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb14:	d103      	bne.n	800bb1e <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800bb16:	23ce      	movs	r3, #206	@ 0xce
 800bb18:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			break;
 800bb1c:	e020      	b.n	800bb60 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 800bb1e:	69fb      	ldr	r3, [r7, #28]
 800bb20:	461a      	mov	r2, r3
 800bb22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb24:	4413      	add	r3, r2
 800bb26:	4618      	mov	r0, r3
 800bb28:	f7ff ff60 	bl	800b9ec <is_aperture>
 800bb2c:	4603      	mov	r3, r0
 800bb2e:	461a      	mov	r2, r3
 800bb30:	7afb      	ldrb	r3, [r7, #11]
 800bb32:	4293      	cmp	r3, r2
 800bb34:	d003      	beq.n	800bb3e <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800bb36:	23ce      	movs	r3, #206	@ 0xce
 800bb38:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			break;
 800bb3c:	e010      	b.n	800bb60 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 800bb3e:	69fb      	ldr	r3, [r7, #28]
 800bb40:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 800bb42:	6a3a      	ldr	r2, [r7, #32]
 800bb44:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800bb46:	6838      	ldr	r0, [r7, #0]
 800bb48:	f7ff ff6a 	bl	800ba20 <enable_spad_bit>
		currentSpad++;
 800bb4c:	6a3b      	ldr	r3, [r7, #32]
 800bb4e:	3301      	adds	r3, #1
 800bb50:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800bb52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb54:	3301      	adds	r3, #1
 800bb56:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bb58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bb5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bb5c:	429a      	cmp	r2, r3
 800bb5e:	d3cf      	bcc.n	800bb00 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 800bb60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bb62:	6a3a      	ldr	r2, [r7, #32]
 800bb64:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 800bb66:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d106      	bne.n	800bb7c <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 800bb6e:	6839      	ldr	r1, [r7, #0]
 800bb70:	68f8      	ldr	r0, [r7, #12]
 800bb72:	f7ff ff8d 	bl	800ba90 <set_ref_spad_map>
 800bb76:	4603      	mov	r3, r0
 800bb78:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 800bb7c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d121      	bne.n	800bbc8 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 800bb84:	f107 0314 	add.w	r3, r7, #20
 800bb88:	4619      	mov	r1, r3
 800bb8a:	68f8      	ldr	r0, [r7, #12]
 800bb8c:	f7ff ff93 	bl	800bab6 <get_ref_spad_map>
 800bb90:	4603      	mov	r3, r0
 800bb92:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

		i = 0;
 800bb96:	2300      	movs	r3, #0
 800bb98:	627b      	str	r3, [r7, #36]	@ 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 800bb9a:	e011      	b.n	800bbc0 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 800bb9c:	683a      	ldr	r2, [r7, #0]
 800bb9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bba0:	4413      	add	r3, r2
 800bba2:	781a      	ldrb	r2, [r3, #0]
 800bba4:	f107 0114 	add.w	r1, r7, #20
 800bba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbaa:	440b      	add	r3, r1
 800bbac:	781b      	ldrb	r3, [r3, #0]
 800bbae:	429a      	cmp	r2, r3
 800bbb0:	d003      	beq.n	800bbba <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 800bbb2:	23ce      	movs	r3, #206	@ 0xce
 800bbb4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				break;
 800bbb8:	e006      	b.n	800bbc8 <enable_ref_spads+0xec>
			}
			i++;
 800bbba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbbc:	3301      	adds	r3, #1
 800bbbe:	627b      	str	r3, [r7, #36]	@ 0x24
		while (i < size) {
 800bbc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bbc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbc4:	429a      	cmp	r2, r3
 800bbc6:	d3e9      	bcc.n	800bb9c <enable_ref_spads+0xc0>
		}
	}
	return status;
 800bbc8:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800bbcc:	4618      	mov	r0, r3
 800bbce:	3730      	adds	r7, #48	@ 0x30
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	bd80      	pop	{r7, pc}

0800bbd4 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b08a      	sub	sp, #40	@ 0x28
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
 800bbdc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800bbde:	2300      	movs	r3, #0
 800bbe0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800bbf0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 800bbf4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d107      	bne.n	800bc0c <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 800bbfc:	22c0      	movs	r2, #192	@ 0xc0
 800bbfe:	2101      	movs	r1, #1
 800bc00:	6878      	ldr	r0, [r7, #4]
 800bc02:	f003 f887 	bl	800ed14 <VL53L0X_WrByte>
 800bc06:	4603      	mov	r3, r0
 800bc08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 800bc0c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d108      	bne.n	800bc26 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 800bc14:	f107 0308 	add.w	r3, r7, #8
 800bc18:	4619      	mov	r1, r3
 800bc1a:	6878      	ldr	r0, [r7, #4]
 800bc1c:	f7ff fc04 	bl	800b428 <VL53L0X_PerformSingleRangingMeasurement>
 800bc20:	4603      	mov	r3, r0
 800bc22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 800bc26:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d107      	bne.n	800bc3e <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800bc2e:	2201      	movs	r2, #1
 800bc30:	21ff      	movs	r1, #255	@ 0xff
 800bc32:	6878      	ldr	r0, [r7, #4]
 800bc34:	f003 f86e 	bl	800ed14 <VL53L0X_WrByte>
 800bc38:	4603      	mov	r3, r0
 800bc3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (status == VL53L0X_ERROR_NONE)
 800bc3e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d107      	bne.n	800bc56 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 800bc46:	683a      	ldr	r2, [r7, #0]
 800bc48:	21b6      	movs	r1, #182	@ 0xb6
 800bc4a:	6878      	ldr	r0, [r7, #4]
 800bc4c:	f003 f90e 	bl	800ee6c <VL53L0X_RdWord>
 800bc50:	4603      	mov	r3, r0
 800bc52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 800bc56:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d107      	bne.n	800bc6e <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800bc5e:	2200      	movs	r2, #0
 800bc60:	21ff      	movs	r1, #255	@ 0xff
 800bc62:	6878      	ldr	r0, [r7, #4]
 800bc64:	f003 f856 	bl	800ed14 <VL53L0X_WrByte>
 800bc68:	4603      	mov	r3, r0
 800bc6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (status == VL53L0X_ERROR_NONE) {
 800bc6e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d112      	bne.n	800bc9c <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800bc76:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bc7a:	461a      	mov	r2, r3
 800bc7c:	2101      	movs	r1, #1
 800bc7e:	6878      	ldr	r0, [r7, #4]
 800bc80:	f003 f848 	bl	800ed14 <VL53L0X_WrByte>
 800bc84:	4603      	mov	r3, r0
 800bc86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 800bc8a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d104      	bne.n	800bc9c <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800bc98:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
	}

	return status;
 800bc9c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800bca0:	4618      	mov	r0, r3
 800bca2:	3728      	adds	r7, #40	@ 0x28
 800bca4:	46bd      	mov	sp, r7
 800bca6:	bd80      	pop	{r7, pc}

0800bca8 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 800bca8:	b590      	push	{r4, r7, lr}
 800bcaa:	b09d      	sub	sp, #116	@ 0x74
 800bcac:	af06      	add	r7, sp, #24
 800bcae:	60f8      	str	r0, [r7, #12]
 800bcb0:	60b9      	str	r1, [r7, #8]
 800bcb2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 800bcba:	23b4      	movs	r3, #180	@ 0xb4
 800bcbc:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
	uint32_t minimumSpadCount = 3;
 800bcc0:	2303      	movs	r3, #3
 800bcc2:	637b      	str	r3, [r7, #52]	@ 0x34
	uint32_t maxSpadCount = 44;
 800bcc4:	232c      	movs	r3, #44	@ 0x2c
 800bcc6:	633b      	str	r3, [r7, #48]	@ 0x30
	uint32_t currentSpadIndex = 0;
 800bcc8:	2300      	movs	r3, #0
 800bcca:	653b      	str	r3, [r7, #80]	@ 0x50
	uint32_t lastSpadIndex = 0;
 800bccc:	2300      	movs	r3, #0
 800bcce:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 800bcd4:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 800bcd8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 800bcda:	2300      	movs	r3, #0
 800bcdc:	64fb      	str	r3, [r7, #76]	@ 0x4c
	uint32_t index = 0;
 800bcde:	2300      	movs	r3, #0
 800bce0:	64bb      	str	r3, [r7, #72]	@ 0x48
	uint32_t spadArraySize = 6;
 800bce2:	2306      	movs	r3, #6
 800bce4:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t signalRateDiff = 0;
 800bce6:	2300      	movs	r3, #0
 800bce8:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t lastSignalRateDiff = 0;
 800bcea:	2300      	movs	r3, #0
 800bcec:	647b      	str	r3, [r7, #68]	@ 0x44
	uint8_t complete = 0;
 800bcee:	2300      	movs	r3, #0
 800bcf0:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
	uint8_t VhvSettings = 0;
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
	uint8_t	 isApertureSpads_int = 0;
 800bd00:	2300      	movs	r3, #0
 800bd02:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	f8b3 313c 	ldrh.w	r3, [r3, #316]	@ 0x13c
 800bd0c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 800bd0e:	2300      	movs	r3, #0
 800bd10:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bd12:	e009      	b.n	800bd28 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800bd14:	68fa      	ldr	r2, [r7, #12]
 800bd16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bd18:	4413      	add	r3, r2
 800bd1a:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800bd1e:	2200      	movs	r2, #0
 800bd20:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800bd22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bd24:	3301      	adds	r3, #1
 800bd26:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bd28:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bd2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd2c:	429a      	cmp	r2, r3
 800bd2e:	d3f1      	bcc.n	800bd14 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800bd30:	2201      	movs	r2, #1
 800bd32:	21ff      	movs	r1, #255	@ 0xff
 800bd34:	68f8      	ldr	r0, [r7, #12]
 800bd36:	f002 ffed 	bl	800ed14 <VL53L0X_WrByte>
 800bd3a:	4603      	mov	r3, r0
 800bd3c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800bd40:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d107      	bne.n	800bd58 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 800bd48:	2200      	movs	r2, #0
 800bd4a:	214f      	movs	r1, #79	@ 0x4f
 800bd4c:	68f8      	ldr	r0, [r7, #12]
 800bd4e:	f002 ffe1 	bl	800ed14 <VL53L0X_WrByte>
 800bd52:	4603      	mov	r3, r0
 800bd54:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800bd58:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d107      	bne.n	800bd70 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 800bd60:	222c      	movs	r2, #44	@ 0x2c
 800bd62:	214e      	movs	r1, #78	@ 0x4e
 800bd64:	68f8      	ldr	r0, [r7, #12]
 800bd66:	f002 ffd5 	bl	800ed14 <VL53L0X_WrByte>
 800bd6a:	4603      	mov	r3, r0
 800bd6c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800bd70:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d107      	bne.n	800bd88 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800bd78:	2200      	movs	r2, #0
 800bd7a:	21ff      	movs	r1, #255	@ 0xff
 800bd7c:	68f8      	ldr	r0, [r7, #12]
 800bd7e:	f002 ffc9 	bl	800ed14 <VL53L0X_WrByte>
 800bd82:	4603      	mov	r3, r0
 800bd84:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800bd88:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d109      	bne.n	800bda4 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 800bd90:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800bd94:	461a      	mov	r2, r3
 800bd96:	21b6      	movs	r1, #182	@ 0xb6
 800bd98:	68f8      	ldr	r0, [r7, #12]
 800bd9a:	f002 ffbb 	bl	800ed14 <VL53L0X_WrByte>
 800bd9e:	4603      	mov	r3, r0
 800bda0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 800bda4:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d107      	bne.n	800bdbc <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 800bdac:	2200      	movs	r2, #0
 800bdae:	2180      	movs	r1, #128	@ 0x80
 800bdb0:	68f8      	ldr	r0, [r7, #12]
 800bdb2:	f002 ffaf 	bl	800ed14 <VL53L0X_WrByte>
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 800bdbc:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d10a      	bne.n	800bdda <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 800bdc4:	f107 0210 	add.w	r2, r7, #16
 800bdc8:	f107 0111 	add.w	r1, r7, #17
 800bdcc:	2300      	movs	r3, #0
 800bdce:	68f8      	ldr	r0, [r7, #12]
 800bdd0:	f000 fbbb 	bl	800c54a <VL53L0X_perform_ref_calibration>
 800bdd4:	4603      	mov	r3, r0
 800bdd6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 800bdda:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d121      	bne.n	800be26 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 800bde2:	2300      	movs	r3, #0
 800bde4:	653b      	str	r3, [r7, #80]	@ 0x50
		lastSpadIndex = currentSpadIndex;
 800bde6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bde8:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 800bdea:	2300      	movs	r3, #0
 800bdec:	64fb      	str	r3, [r7, #76]	@ 0x4c
		Status = enable_ref_spads(Dev,
 800bdee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bdf0:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	f503 7095 	add.w	r0, r3, #298	@ 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	f503 7492 	add.w	r4, r3, #292	@ 0x124
		Status = enable_ref_spads(Dev,
 800bdfe:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800be02:	f107 0218 	add.w	r2, r7, #24
 800be06:	9204      	str	r2, [sp, #16]
 800be08:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800be0a:	9203      	str	r2, [sp, #12]
 800be0c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800be0e:	9202      	str	r2, [sp, #8]
 800be10:	9301      	str	r3, [sp, #4]
 800be12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be14:	9300      	str	r3, [sp, #0]
 800be16:	4623      	mov	r3, r4
 800be18:	4602      	mov	r2, r0
 800be1a:	68f8      	ldr	r0, [r7, #12]
 800be1c:	f7ff fe5e 	bl	800badc <enable_ref_spads>
 800be20:	4603      	mov	r3, r0
 800be22:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800be26:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d174      	bne.n	800bf18 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 800be2e:	69bb      	ldr	r3, [r7, #24]
 800be30:	653b      	str	r3, [r7, #80]	@ 0x50

		Status = perform_ref_signal_measurement(Dev,
 800be32:	f107 0312 	add.w	r3, r7, #18
 800be36:	4619      	mov	r1, r3
 800be38:	68f8      	ldr	r0, [r7, #12]
 800be3a:	f7ff fecb 	bl	800bbd4 <perform_ref_signal_measurement>
 800be3e:	4603      	mov	r3, r0
 800be40:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 800be44:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d161      	bne.n	800bf10 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 800be4c:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 800be4e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800be50:	429a      	cmp	r2, r3
 800be52:	d25d      	bcs.n	800bf10 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 800be54:	2300      	movs	r3, #0
 800be56:	64bb      	str	r3, [r7, #72]	@ 0x48
 800be58:	e009      	b.n	800be6e <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800be5a:	68fa      	ldr	r2, [r7, #12]
 800be5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800be5e:	4413      	add	r3, r2
 800be60:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800be64:	2200      	movs	r2, #0
 800be66:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 800be68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800be6a:	3301      	adds	r3, #1
 800be6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800be6e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800be70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be72:	429a      	cmp	r2, r3
 800be74:	d3f1      	bcc.n	800be5a <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 800be76:	e002      	b.n	800be7e <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 800be78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be7a:	3301      	adds	r3, #1
 800be7c:	653b      	str	r3, [r7, #80]	@ 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 800be7e:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 800be82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be84:	4413      	add	r3, r2
 800be86:	4618      	mov	r0, r3
 800be88:	f7ff fdb0 	bl	800b9ec <is_aperture>
 800be8c:	4603      	mov	r3, r0
				== 0) && (currentSpadIndex < maxSpadCount)) {
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d103      	bne.n	800be9a <VL53L0X_perform_ref_spad_management+0x1f2>
 800be92:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800be94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be96:	429a      	cmp	r2, r3
 800be98:	d3ee      	bcc.n	800be78 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 800be9a:	2301      	movs	r3, #1
 800be9c:	64fb      	str	r3, [r7, #76]	@ 0x4c

			Status = enable_ref_spads(Dev,
 800be9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bea0:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	f503 7095 	add.w	r0, r3, #298	@ 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	f503 7492 	add.w	r4, r3, #292	@ 0x124
			Status = enable_ref_spads(Dev,
 800beae:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800beb2:	f107 0218 	add.w	r2, r7, #24
 800beb6:	9204      	str	r2, [sp, #16]
 800beb8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800beba:	9203      	str	r2, [sp, #12]
 800bebc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bebe:	9202      	str	r2, [sp, #8]
 800bec0:	9301      	str	r3, [sp, #4]
 800bec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bec4:	9300      	str	r3, [sp, #0]
 800bec6:	4623      	mov	r3, r4
 800bec8:	4602      	mov	r2, r0
 800beca:	68f8      	ldr	r0, [r7, #12]
 800becc:	f7ff fe06 	bl	800badc <enable_ref_spads>
 800bed0:	4603      	mov	r3, r0
 800bed2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800bed6:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d11b      	bne.n	800bf16 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 800bede:	69bb      	ldr	r3, [r7, #24]
 800bee0:	653b      	str	r3, [r7, #80]	@ 0x50
				Status = perform_ref_signal_measurement(Dev,
 800bee2:	f107 0312 	add.w	r3, r7, #18
 800bee6:	4619      	mov	r1, r3
 800bee8:	68f8      	ldr	r0, [r7, #12]
 800beea:	f7ff fe73 	bl	800bbd4 <perform_ref_signal_measurement>
 800beee:	4603      	mov	r3, r0
 800bef0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 800bef4:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d10c      	bne.n	800bf16 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 800befc:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 800befe:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800bf00:	429a      	cmp	r2, r3
 800bf02:	d208      	bcs.n	800bf16 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 800bf04:	2301      	movs	r3, #1
 800bf06:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
					refSpadCount_int = minimumSpadCount;
 800bf0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 800bf0e:	e002      	b.n	800bf16 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 800bf10:	2300      	movs	r3, #0
 800bf12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bf14:	e000      	b.n	800bf18 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 800bf16:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800bf18:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	f040 80af 	bne.w	800c080 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 800bf22:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 800bf24:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800bf26:	429a      	cmp	r2, r3
 800bf28:	f240 80aa 	bls.w	800c080 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 800bf2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bf2e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
		refSpadCount_int	= minimumSpadCount;
 800bf32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf34:	63fb      	str	r3, [r7, #60]	@ 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	f503 7192 	add.w	r1, r3, #292	@ 0x124
 800bf3c:	f107 031c 	add.w	r3, r7, #28
 800bf40:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bf42:	4618      	mov	r0, r3
 800bf44:	f007 fda9 	bl	8013a9a <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 800bf48:	8a7b      	ldrh	r3, [r7, #18]
 800bf4a:	461a      	mov	r2, r3
 800bf4c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800bf4e:	1ad3      	subs	r3, r2, r3
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	bfb8      	it	lt
 800bf54:	425b      	neglt	r3, r3
 800bf56:	647b      	str	r3, [r7, #68]	@ 0x44
			targetRefRate);
		complete = 0;
 800bf58:	2300      	movs	r3, #0
 800bf5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

		while (!complete) {
 800bf5e:	e086      	b.n	800c06e <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	f503 7095 	add.w	r0, r3, #298	@ 0x12a
			get_next_good_spad(
 800bf66:	f107 0314 	add.w	r3, r7, #20
 800bf6a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bf6c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bf6e:	f7ff fcde 	bl	800b92e <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 800bf72:	697b      	ldr	r3, [r7, #20]
 800bf74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf78:	d103      	bne.n	800bf82 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 800bf7a:	23ce      	movs	r3, #206	@ 0xce
 800bf7c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
				break;
 800bf80:	e07e      	b.n	800c080 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 800bf82:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800bf86:	697a      	ldr	r2, [r7, #20]
 800bf88:	4413      	add	r3, r2
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	f7ff fd2e 	bl	800b9ec <is_aperture>
 800bf90:	4603      	mov	r3, r0
 800bf92:	461a      	mov	r2, r3
 800bf94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bf96:	4293      	cmp	r3, r2
 800bf98:	d003      	beq.n	800bfa2 <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 800bf9a:	2301      	movs	r3, #1
 800bf9c:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
				break;
 800bfa0:	e06e      	b.n	800c080 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 800bfa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bfa4:	3301      	adds	r3, #1
 800bfa6:	63fb      	str	r3, [r7, #60]	@ 0x3c

			currentSpadIndex = nextGoodSpad;
 800bfa8:	697b      	ldr	r3, [r7, #20]
 800bfaa:	653b      	str	r3, [r7, #80]	@ 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	f503 7392 	add.w	r3, r3, #292	@ 0x124
			Status = enable_spad_bit(
 800bfb2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bfb4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	f7ff fd32 	bl	800ba20 <enable_spad_bit>
 800bfbc:	4603      	mov	r3, r0
 800bfbe:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800bfc2:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d10c      	bne.n	800bfe4 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 800bfca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bfcc:	3301      	adds	r3, #1
 800bfce:	653b      	str	r3, [r7, #80]	@ 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	f503 7392 	add.w	r3, r3, #292	@ 0x124
				Status = set_ref_spad_map(Dev,
 800bfd6:	4619      	mov	r1, r3
 800bfd8:	68f8      	ldr	r0, [r7, #12]
 800bfda:	f7ff fd59 	bl	800ba90 <set_ref_spad_map>
 800bfde:	4603      	mov	r3, r0
 800bfe0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 800bfe4:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d146      	bne.n	800c07a <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 800bfec:	f107 0312 	add.w	r3, r7, #18
 800bff0:	4619      	mov	r1, r3
 800bff2:	68f8      	ldr	r0, [r7, #12]
 800bff4:	f7ff fdee 	bl	800bbd4 <perform_ref_signal_measurement>
 800bff8:	4603      	mov	r3, r0
 800bffa:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 800bffe:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800c002:	2b00      	cmp	r3, #0
 800c004:	d13b      	bne.n	800c07e <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 800c006:	8a7b      	ldrh	r3, [r7, #18]
 800c008:	461a      	mov	r2, r3
 800c00a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800c00c:	1ad3      	subs	r3, r2, r3
 800c00e:	2b00      	cmp	r3, #0
 800c010:	bfb8      	it	lt
 800c012:	425b      	neglt	r3, r3
 800c014:	627b      	str	r3, [r7, #36]	@ 0x24

			if (peakSignalRateRef > targetRefRate) {
 800c016:	8a7b      	ldrh	r3, [r7, #18]
 800c018:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800c01a:	429a      	cmp	r2, r3
 800c01c:	d21c      	bcs.n	800c058 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 800c01e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c020:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c022:	429a      	cmp	r2, r3
 800c024:	d914      	bls.n	800c050 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 800c026:	f107 031c 	add.w	r3, r7, #28
 800c02a:	4619      	mov	r1, r3
 800c02c:	68f8      	ldr	r0, [r7, #12]
 800c02e:	f7ff fd2f 	bl	800ba90 <set_ref_spad_map>
 800c032:	4603      	mov	r3, r0
 800c034:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	f503 7392 	add.w	r3, r3, #292	@ 0x124
					memcpy(
 800c03e:	f107 011c 	add.w	r1, r7, #28
 800c042:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c044:	4618      	mov	r0, r3
 800c046:	f007 fd28 	bl	8013a9a <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 800c04a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c04c:	3b01      	subs	r3, #1
 800c04e:	63fb      	str	r3, [r7, #60]	@ 0x3c
				}
				complete = 1;
 800c050:	2301      	movs	r3, #1
 800c052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c056:	e00a      	b.n	800c06e <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 800c058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c05a:	647b      	str	r3, [r7, #68]	@ 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	f503 7192 	add.w	r1, r3, #292	@ 0x124
				memcpy(lastSpadArray,
 800c062:	f107 031c 	add.w	r3, r7, #28
 800c066:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c068:	4618      	mov	r0, r3
 800c06a:	f007 fd16 	bl	8013a9a <memcpy>
		while (!complete) {
 800c06e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c072:	2b00      	cmp	r3, #0
 800c074:	f43f af74 	beq.w	800bf60 <VL53L0X_perform_ref_spad_management+0x2b8>
 800c078:	e002      	b.n	800c080 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800c07a:	bf00      	nop
 800c07c:	e000      	b.n	800c080 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800c07e:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800c080:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800c084:	2b00      	cmp	r3, #0
 800c086:	d115      	bne.n	800c0b4 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 800c088:	68bb      	ldr	r3, [r7, #8]
 800c08a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c08c:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 800c094:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	2201      	movs	r2, #1
 800c09a:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c09e:	68bb      	ldr	r3, [r7, #8]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	b2da      	uxtb	r2, r3
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	f883 2113 	strb.w	r2, [r3, #275]	@ 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	781a      	ldrb	r2, [r3, #0]
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 800c0b4:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
}
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	375c      	adds	r7, #92	@ 0x5c
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	bd90      	pop	{r4, r7, pc}

0800c0c0 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 800c0c0:	b590      	push	{r4, r7, lr}
 800c0c2:	b093      	sub	sp, #76	@ 0x4c
 800c0c4:	af06      	add	r7, sp, #24
 800c0c6:	60f8      	str	r0, [r7, #12]
 800c0c8:	60b9      	str	r1, [r7, #8]
 800c0ca:	4613      	mov	r3, r2
 800c0cc:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint32_t currentSpadIndex = 0;
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint8_t startSelect = 0xB4;
 800c0d8:	23b4      	movs	r3, #180	@ 0xb4
 800c0da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint32_t spadArraySize = 6;
 800c0de:	2306      	movs	r3, #6
 800c0e0:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 800c0e2:	232c      	movs	r3, #44	@ 0x2c
 800c0e4:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800c0e6:	2201      	movs	r2, #1
 800c0e8:	21ff      	movs	r1, #255	@ 0xff
 800c0ea:	68f8      	ldr	r0, [r7, #12]
 800c0ec:	f002 fe12 	bl	800ed14 <VL53L0X_WrByte>
 800c0f0:	4603      	mov	r3, r0
 800c0f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800c0f6:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d107      	bne.n	800c10e <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 800c0fe:	2200      	movs	r2, #0
 800c100:	214f      	movs	r1, #79	@ 0x4f
 800c102:	68f8      	ldr	r0, [r7, #12]
 800c104:	f002 fe06 	bl	800ed14 <VL53L0X_WrByte>
 800c108:	4603      	mov	r3, r0
 800c10a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800c10e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800c112:	2b00      	cmp	r3, #0
 800c114:	d107      	bne.n	800c126 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 800c116:	222c      	movs	r2, #44	@ 0x2c
 800c118:	214e      	movs	r1, #78	@ 0x4e
 800c11a:	68f8      	ldr	r0, [r7, #12]
 800c11c:	f002 fdfa 	bl	800ed14 <VL53L0X_WrByte>
 800c120:	4603      	mov	r3, r0
 800c122:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800c126:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d107      	bne.n	800c13e <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800c12e:	2200      	movs	r2, #0
 800c130:	21ff      	movs	r1, #255	@ 0xff
 800c132:	68f8      	ldr	r0, [r7, #12]
 800c134:	f002 fdee 	bl	800ed14 <VL53L0X_WrByte>
 800c138:	4603      	mov	r3, r0
 800c13a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800c13e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800c142:	2b00      	cmp	r3, #0
 800c144:	d109      	bne.n	800c15a <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 800c146:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800c14a:	461a      	mov	r2, r3
 800c14c:	21b6      	movs	r1, #182	@ 0xb6
 800c14e:	68f8      	ldr	r0, [r7, #12]
 800c150:	f002 fde0 	bl	800ed14 <VL53L0X_WrByte>
 800c154:	4603      	mov	r3, r0
 800c156:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 800c15a:	2300      	movs	r3, #0
 800c15c:	627b      	str	r3, [r7, #36]	@ 0x24
 800c15e:	e009      	b.n	800c174 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800c160:	68fa      	ldr	r2, [r7, #12]
 800c162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c164:	4413      	add	r3, r2
 800c166:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800c16a:	2200      	movs	r2, #0
 800c16c:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800c16e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c170:	3301      	adds	r3, #1
 800c172:	627b      	str	r3, [r7, #36]	@ 0x24
 800c174:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c176:	69fb      	ldr	r3, [r7, #28]
 800c178:	429a      	cmp	r2, r3
 800c17a:	d3f1      	bcc.n	800c160 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 800c17c:	79fb      	ldrb	r3, [r7, #7]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d011      	beq.n	800c1a6 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800c182:	e002      	b.n	800c18a <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 800c184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c186:	3301      	adds	r3, #1
 800c188:	62bb      	str	r3, [r7, #40]	@ 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800c18a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800c18e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c190:	4413      	add	r3, r2
 800c192:	4618      	mov	r0, r3
 800c194:	f7ff fc2a 	bl	800b9ec <is_aperture>
 800c198:	4603      	mov	r3, r0
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d103      	bne.n	800c1a6 <VL53L0X_set_reference_spads+0xe6>
 800c19e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c1a0:	69bb      	ldr	r3, [r7, #24]
 800c1a2:	429a      	cmp	r2, r3
 800c1a4:	d3ee      	bcc.n	800c184 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	f503 7095 	add.w	r0, r3, #298	@ 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	f503 7492 	add.w	r4, r3, #292	@ 0x124
	Status = enable_ref_spads(Dev,
 800c1b2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800c1b6:	79f9      	ldrb	r1, [r7, #7]
 800c1b8:	f107 0214 	add.w	r2, r7, #20
 800c1bc:	9204      	str	r2, [sp, #16]
 800c1be:	68ba      	ldr	r2, [r7, #8]
 800c1c0:	9203      	str	r2, [sp, #12]
 800c1c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c1c4:	9202      	str	r2, [sp, #8]
 800c1c6:	9301      	str	r3, [sp, #4]
 800c1c8:	69fb      	ldr	r3, [r7, #28]
 800c1ca:	9300      	str	r3, [sp, #0]
 800c1cc:	4623      	mov	r3, r4
 800c1ce:	4602      	mov	r2, r0
 800c1d0:	68f8      	ldr	r0, [r7, #12]
 800c1d2:	f7ff fc83 	bl	800badc <enable_ref_spads>
 800c1d6:	4603      	mov	r3, r0
 800c1d8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 800c1dc:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d10c      	bne.n	800c1fe <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	2201      	movs	r2, #1
 800c1e8:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c1ec:	68bb      	ldr	r3, [r7, #8]
 800c1ee:	b2da      	uxtb	r2, r3
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	f883 2113 	strb.w	r2, [r3, #275]	@ 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	79fa      	ldrb	r2, [r7, #7]
 800c1fa:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 800c1fe:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800c202:	4618      	mov	r0, r3
 800c204:	3734      	adds	r7, #52	@ 0x34
 800c206:	46bd      	mov	sp, r7
 800c208:	bd90      	pop	{r4, r7, pc}

0800c20a <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 800c20a:	b580      	push	{r7, lr}
 800c20c:	b084      	sub	sp, #16
 800c20e:	af00      	add	r7, sp, #0
 800c210:	6078      	str	r0, [r7, #4]
 800c212:	460b      	mov	r3, r1
 800c214:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c216:	2300      	movs	r3, #0
 800c218:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800c21a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d10a      	bne.n	800c238 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800c222:	78fb      	ldrb	r3, [r7, #3]
 800c224:	f043 0301 	orr.w	r3, r3, #1
 800c228:	b2db      	uxtb	r3, r3
 800c22a:	461a      	mov	r2, r3
 800c22c:	2100      	movs	r1, #0
 800c22e:	6878      	ldr	r0, [r7, #4]
 800c230:	f002 fd70 	bl	800ed14 <VL53L0X_WrByte>
 800c234:	4603      	mov	r3, r0
 800c236:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 800c238:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d104      	bne.n	800c24a <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800c240:	6878      	ldr	r0, [r7, #4]
 800c242:	f000 f9e2 	bl	800c60a <VL53L0X_measurement_poll_for_completion>
 800c246:	4603      	mov	r3, r0
 800c248:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800c24a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d105      	bne.n	800c25e <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800c252:	2100      	movs	r1, #0
 800c254:	6878      	ldr	r0, [r7, #4]
 800c256:	f7ff fa6d 	bl	800b734 <VL53L0X_ClearInterruptMask>
 800c25a:	4603      	mov	r3, r0
 800c25c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800c25e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d106      	bne.n	800c274 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 800c266:	2200      	movs	r2, #0
 800c268:	2100      	movs	r1, #0
 800c26a:	6878      	ldr	r0, [r7, #4]
 800c26c:	f002 fd52 	bl	800ed14 <VL53L0X_WrByte>
 800c270:	4603      	mov	r3, r0
 800c272:	73fb      	strb	r3, [r7, #15]

	return Status;
 800c274:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c278:	4618      	mov	r0, r3
 800c27a:	3710      	adds	r7, #16
 800c27c:	46bd      	mov	sp, r7
 800c27e:	bd80      	pop	{r7, pc}

0800c280 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 800c280:	b580      	push	{r7, lr}
 800c282:	b084      	sub	sp, #16
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
 800c288:	4608      	mov	r0, r1
 800c28a:	4611      	mov	r1, r2
 800c28c:	461a      	mov	r2, r3
 800c28e:	4603      	mov	r3, r0
 800c290:	70fb      	strb	r3, [r7, #3]
 800c292:	460b      	mov	r3, r1
 800c294:	70bb      	strb	r3, [r7, #2]
 800c296:	4613      	mov	r3, r2
 800c298:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c29a:	2300      	movs	r3, #0
 800c29c:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 800c29e:	2300      	movs	r3, #0
 800c2a0:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800c2a2:	2201      	movs	r2, #1
 800c2a4:	21ff      	movs	r1, #255	@ 0xff
 800c2a6:	6878      	ldr	r0, [r7, #4]
 800c2a8:	f002 fd34 	bl	800ed14 <VL53L0X_WrByte>
 800c2ac:	4603      	mov	r3, r0
 800c2ae:	461a      	mov	r2, r3
 800c2b0:	7bfb      	ldrb	r3, [r7, #15]
 800c2b2:	4313      	orrs	r3, r2
 800c2b4:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800c2b6:	2200      	movs	r2, #0
 800c2b8:	2100      	movs	r1, #0
 800c2ba:	6878      	ldr	r0, [r7, #4]
 800c2bc:	f002 fd2a 	bl	800ed14 <VL53L0X_WrByte>
 800c2c0:	4603      	mov	r3, r0
 800c2c2:	461a      	mov	r2, r3
 800c2c4:	7bfb      	ldrb	r3, [r7, #15]
 800c2c6:	4313      	orrs	r3, r2
 800c2c8:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	21ff      	movs	r1, #255	@ 0xff
 800c2ce:	6878      	ldr	r0, [r7, #4]
 800c2d0:	f002 fd20 	bl	800ed14 <VL53L0X_WrByte>
 800c2d4:	4603      	mov	r3, r0
 800c2d6:	461a      	mov	r2, r3
 800c2d8:	7bfb      	ldrb	r3, [r7, #15]
 800c2da:	4313      	orrs	r3, r2
 800c2dc:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 800c2de:	78fb      	ldrb	r3, [r7, #3]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d01e      	beq.n	800c322 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 800c2e4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d009      	beq.n	800c300 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 800c2ec:	69ba      	ldr	r2, [r7, #24]
 800c2ee:	21cb      	movs	r1, #203	@ 0xcb
 800c2f0:	6878      	ldr	r0, [r7, #4]
 800c2f2:	f002 fd91 	bl	800ee18 <VL53L0X_RdByte>
 800c2f6:	4603      	mov	r3, r0
 800c2f8:	461a      	mov	r2, r3
 800c2fa:	7bfb      	ldrb	r3, [r7, #15]
 800c2fc:	4313      	orrs	r3, r2
 800c2fe:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800c300:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800c304:	2b00      	cmp	r3, #0
 800c306:	d02a      	beq.n	800c35e <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 800c308:	f107 030e 	add.w	r3, r7, #14
 800c30c:	461a      	mov	r2, r3
 800c30e:	21ee      	movs	r1, #238	@ 0xee
 800c310:	6878      	ldr	r0, [r7, #4]
 800c312:	f002 fd81 	bl	800ee18 <VL53L0X_RdByte>
 800c316:	4603      	mov	r3, r0
 800c318:	461a      	mov	r2, r3
 800c31a:	7bfb      	ldrb	r3, [r7, #15]
 800c31c:	4313      	orrs	r3, r2
 800c31e:	73fb      	strb	r3, [r7, #15]
 800c320:	e01d      	b.n	800c35e <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 800c322:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d00a      	beq.n	800c340 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 800c32a:	78bb      	ldrb	r3, [r7, #2]
 800c32c:	461a      	mov	r2, r3
 800c32e:	21cb      	movs	r1, #203	@ 0xcb
 800c330:	6878      	ldr	r0, [r7, #4]
 800c332:	f002 fcef 	bl	800ed14 <VL53L0X_WrByte>
 800c336:	4603      	mov	r3, r0
 800c338:	461a      	mov	r2, r3
 800c33a:	7bfb      	ldrb	r3, [r7, #15]
 800c33c:	4313      	orrs	r3, r2
 800c33e:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800c340:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800c344:	2b00      	cmp	r3, #0
 800c346:	d00a      	beq.n	800c35e <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 800c348:	787b      	ldrb	r3, [r7, #1]
 800c34a:	2280      	movs	r2, #128	@ 0x80
 800c34c:	21ee      	movs	r1, #238	@ 0xee
 800c34e:	6878      	ldr	r0, [r7, #4]
 800c350:	f002 fd2e 	bl	800edb0 <VL53L0X_UpdateByte>
 800c354:	4603      	mov	r3, r0
 800c356:	461a      	mov	r2, r3
 800c358:	7bfb      	ldrb	r3, [r7, #15]
 800c35a:	4313      	orrs	r3, r2
 800c35c:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800c35e:	2201      	movs	r2, #1
 800c360:	21ff      	movs	r1, #255	@ 0xff
 800c362:	6878      	ldr	r0, [r7, #4]
 800c364:	f002 fcd6 	bl	800ed14 <VL53L0X_WrByte>
 800c368:	4603      	mov	r3, r0
 800c36a:	461a      	mov	r2, r3
 800c36c:	7bfb      	ldrb	r3, [r7, #15]
 800c36e:	4313      	orrs	r3, r2
 800c370:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800c372:	2201      	movs	r2, #1
 800c374:	2100      	movs	r1, #0
 800c376:	6878      	ldr	r0, [r7, #4]
 800c378:	f002 fccc 	bl	800ed14 <VL53L0X_WrByte>
 800c37c:	4603      	mov	r3, r0
 800c37e:	461a      	mov	r2, r3
 800c380:	7bfb      	ldrb	r3, [r7, #15]
 800c382:	4313      	orrs	r3, r2
 800c384:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800c386:	2200      	movs	r2, #0
 800c388:	21ff      	movs	r1, #255	@ 0xff
 800c38a:	6878      	ldr	r0, [r7, #4]
 800c38c:	f002 fcc2 	bl	800ed14 <VL53L0X_WrByte>
 800c390:	4603      	mov	r3, r0
 800c392:	461a      	mov	r2, r3
 800c394:	7bfb      	ldrb	r3, [r7, #15]
 800c396:	4313      	orrs	r3, r2
 800c398:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 800c39a:	7bbb      	ldrb	r3, [r7, #14]
 800c39c:	f023 0310 	bic.w	r3, r3, #16
 800c3a0:	b2da      	uxtb	r2, r3
 800c3a2:	69fb      	ldr	r3, [r7, #28]
 800c3a4:	701a      	strb	r2, [r3, #0]

	return Status;
 800c3a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	3710      	adds	r7, #16
 800c3ae:	46bd      	mov	sp, r7
 800c3b0:	bd80      	pop	{r7, pc}

0800c3b2 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800c3b2:	b580      	push	{r7, lr}
 800c3b4:	b08a      	sub	sp, #40	@ 0x28
 800c3b6:	af04      	add	r7, sp, #16
 800c3b8:	60f8      	str	r0, [r7, #12]
 800c3ba:	60b9      	str	r1, [r7, #8]
 800c3bc:	4611      	mov	r1, r2
 800c3be:	461a      	mov	r2, r3
 800c3c0:	460b      	mov	r3, r1
 800c3c2:	71fb      	strb	r3, [r7, #7]
 800c3c4:	4613      	mov	r3, r2
 800c3c6:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800c3cc:	2300      	movs	r3, #0
 800c3ce:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 800c3d8:	2300      	movs	r3, #0
 800c3da:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800c3dc:	79bb      	ldrb	r3, [r7, #6]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d003      	beq.n	800c3ea <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800c3e8:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 800c3ea:	2201      	movs	r2, #1
 800c3ec:	2101      	movs	r1, #1
 800c3ee:	68f8      	ldr	r0, [r7, #12]
 800c3f0:	f002 fc90 	bl	800ed14 <VL53L0X_WrByte>
 800c3f4:	4603      	mov	r3, r0
 800c3f6:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800c3f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d105      	bne.n	800c40c <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 800c400:	2140      	movs	r1, #64	@ 0x40
 800c402:	68f8      	ldr	r0, [r7, #12]
 800c404:	f7ff ff01 	bl	800c20a <VL53L0X_perform_single_ref_calibration>
 800c408:	4603      	mov	r3, r0
 800c40a:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800c40c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c410:	2b00      	cmp	r3, #0
 800c412:	d115      	bne.n	800c440 <VL53L0X_perform_vhv_calibration+0x8e>
 800c414:	79fb      	ldrb	r3, [r7, #7]
 800c416:	2b01      	cmp	r3, #1
 800c418:	d112      	bne.n	800c440 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800c41a:	7d39      	ldrb	r1, [r7, #20]
 800c41c:	7d7a      	ldrb	r2, [r7, #21]
 800c41e:	2300      	movs	r3, #0
 800c420:	9303      	str	r3, [sp, #12]
 800c422:	2301      	movs	r3, #1
 800c424:	9302      	str	r3, [sp, #8]
 800c426:	f107 0313 	add.w	r3, r7, #19
 800c42a:	9301      	str	r3, [sp, #4]
 800c42c:	68bb      	ldr	r3, [r7, #8]
 800c42e:	9300      	str	r3, [sp, #0]
 800c430:	460b      	mov	r3, r1
 800c432:	2101      	movs	r1, #1
 800c434:	68f8      	ldr	r0, [r7, #12]
 800c436:	f7ff ff23 	bl	800c280 <VL53L0X_ref_calibration_io>
 800c43a:	4603      	mov	r3, r0
 800c43c:	75fb      	strb	r3, [r7, #23]
 800c43e:	e002      	b.n	800c446 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 800c440:	68bb      	ldr	r3, [r7, #8]
 800c442:	2200      	movs	r2, #0
 800c444:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800c446:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d112      	bne.n	800c474 <VL53L0X_perform_vhv_calibration+0xc2>
 800c44e:	79bb      	ldrb	r3, [r7, #6]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d00f      	beq.n	800c474 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800c454:	7dbb      	ldrb	r3, [r7, #22]
 800c456:	461a      	mov	r2, r3
 800c458:	2101      	movs	r1, #1
 800c45a:	68f8      	ldr	r0, [r7, #12]
 800c45c:	f002 fc5a 	bl	800ed14 <VL53L0X_WrByte>
 800c460:	4603      	mov	r3, r0
 800c462:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800c464:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d103      	bne.n	800c474 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	7dba      	ldrb	r2, [r7, #22]
 800c470:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130

	}

	return Status;
 800c474:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c478:	4618      	mov	r0, r3
 800c47a:	3718      	adds	r7, #24
 800c47c:	46bd      	mov	sp, r7
 800c47e:	bd80      	pop	{r7, pc}

0800c480 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800c480:	b580      	push	{r7, lr}
 800c482:	b08a      	sub	sp, #40	@ 0x28
 800c484:	af04      	add	r7, sp, #16
 800c486:	60f8      	str	r0, [r7, #12]
 800c488:	60b9      	str	r1, [r7, #8]
 800c48a:	4611      	mov	r1, r2
 800c48c:	461a      	mov	r2, r3
 800c48e:	460b      	mov	r3, r1
 800c490:	71fb      	strb	r3, [r7, #7]
 800c492:	4613      	mov	r3, r2
 800c494:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c496:	2300      	movs	r3, #0
 800c498:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800c49a:	2300      	movs	r3, #0
 800c49c:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800c49e:	2300      	movs	r3, #0
 800c4a0:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800c4a6:	79bb      	ldrb	r3, [r7, #6]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d003      	beq.n	800c4b4 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800c4b2:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 800c4b4:	2202      	movs	r2, #2
 800c4b6:	2101      	movs	r1, #1
 800c4b8:	68f8      	ldr	r0, [r7, #12]
 800c4ba:	f002 fc2b 	bl	800ed14 <VL53L0X_WrByte>
 800c4be:	4603      	mov	r3, r0
 800c4c0:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800c4c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d105      	bne.n	800c4d6 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 800c4ca:	2100      	movs	r1, #0
 800c4cc:	68f8      	ldr	r0, [r7, #12]
 800c4ce:	f7ff fe9c 	bl	800c20a <VL53L0X_perform_single_ref_calibration>
 800c4d2:	4603      	mov	r3, r0
 800c4d4:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800c4d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d115      	bne.n	800c50a <VL53L0X_perform_phase_calibration+0x8a>
 800c4de:	79fb      	ldrb	r3, [r7, #7]
 800c4e0:	2b01      	cmp	r3, #1
 800c4e2:	d112      	bne.n	800c50a <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800c4e4:	7d39      	ldrb	r1, [r7, #20]
 800c4e6:	7d7a      	ldrb	r2, [r7, #21]
 800c4e8:	2301      	movs	r3, #1
 800c4ea:	9303      	str	r3, [sp, #12]
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	9302      	str	r3, [sp, #8]
 800c4f0:	68bb      	ldr	r3, [r7, #8]
 800c4f2:	9301      	str	r3, [sp, #4]
 800c4f4:	f107 0313 	add.w	r3, r7, #19
 800c4f8:	9300      	str	r3, [sp, #0]
 800c4fa:	460b      	mov	r3, r1
 800c4fc:	2101      	movs	r1, #1
 800c4fe:	68f8      	ldr	r0, [r7, #12]
 800c500:	f7ff febe 	bl	800c280 <VL53L0X_ref_calibration_io>
 800c504:	4603      	mov	r3, r0
 800c506:	75fb      	strb	r3, [r7, #23]
 800c508:	e002      	b.n	800c510 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 800c50a:	68bb      	ldr	r3, [r7, #8]
 800c50c:	2200      	movs	r2, #0
 800c50e:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800c510:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d112      	bne.n	800c53e <VL53L0X_perform_phase_calibration+0xbe>
 800c518:	79bb      	ldrb	r3, [r7, #6]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d00f      	beq.n	800c53e <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800c51e:	7dbb      	ldrb	r3, [r7, #22]
 800c520:	461a      	mov	r2, r3
 800c522:	2101      	movs	r1, #1
 800c524:	68f8      	ldr	r0, [r7, #12]
 800c526:	f002 fbf5 	bl	800ed14 <VL53L0X_WrByte>
 800c52a:	4603      	mov	r3, r0
 800c52c:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800c52e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c532:	2b00      	cmp	r3, #0
 800c534:	d103      	bne.n	800c53e <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	7dba      	ldrb	r2, [r7, #22]
 800c53a:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130

	}

	return Status;
 800c53e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c542:	4618      	mov	r0, r3
 800c544:	3718      	adds	r7, #24
 800c546:	46bd      	mov	sp, r7
 800c548:	bd80      	pop	{r7, pc}

0800c54a <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 800c54a:	b580      	push	{r7, lr}
 800c54c:	b086      	sub	sp, #24
 800c54e:	af00      	add	r7, sp, #0
 800c550:	60f8      	str	r0, [r7, #12]
 800c552:	60b9      	str	r1, [r7, #8]
 800c554:	607a      	str	r2, [r7, #4]
 800c556:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c558:	2300      	movs	r3, #0
 800c55a:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800c55c:	2300      	movs	r3, #0
 800c55e:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800c566:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 800c568:	78fa      	ldrb	r2, [r7, #3]
 800c56a:	2300      	movs	r3, #0
 800c56c:	68b9      	ldr	r1, [r7, #8]
 800c56e:	68f8      	ldr	r0, [r7, #12]
 800c570:	f7ff ff1f 	bl	800c3b2 <VL53L0X_perform_vhv_calibration>
 800c574:	4603      	mov	r3, r0
 800c576:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800c578:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d107      	bne.n	800c590 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 800c580:	78fa      	ldrb	r2, [r7, #3]
 800c582:	2300      	movs	r3, #0
 800c584:	6879      	ldr	r1, [r7, #4]
 800c586:	68f8      	ldr	r0, [r7, #12]
 800c588:	f7ff ff7a 	bl	800c480 <VL53L0X_perform_phase_calibration>
 800c58c:	4603      	mov	r3, r0
 800c58e:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 800c590:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d10f      	bne.n	800c5b8 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800c598:	7dbb      	ldrb	r3, [r7, #22]
 800c59a:	461a      	mov	r2, r3
 800c59c:	2101      	movs	r1, #1
 800c59e:	68f8      	ldr	r0, [r7, #12]
 800c5a0:	f002 fbb8 	bl	800ed14 <VL53L0X_WrByte>
 800c5a4:	4603      	mov	r3, r0
 800c5a6:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800c5a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d103      	bne.n	800c5b8 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	7dba      	ldrb	r2, [r7, #22]
 800c5b4:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130

	}

	return Status;
 800c5b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c5bc:	4618      	mov	r0, r3
 800c5be:	3718      	adds	r7, #24
 800c5c0:	46bd      	mov	sp, r7
 800c5c2:	bd80      	pop	{r7, pc}

0800c5c4 <VL53L0X_set_ref_calibration>:

VL53L0X_Error VL53L0X_set_ref_calibration(VL53L0X_DEV Dev,
		uint8_t VhvSettings, uint8_t PhaseCal)
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b088      	sub	sp, #32
 800c5c8:	af04      	add	r7, sp, #16
 800c5ca:	6078      	str	r0, [r7, #4]
 800c5cc:	460b      	mov	r3, r1
 800c5ce:	70fb      	strb	r3, [r7, #3]
 800c5d0:	4613      	mov	r3, r2
 800c5d2:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c5d4:	2300      	movs	r3, #0
 800c5d6:	73fb      	strb	r3, [r7, #15]
	uint8_t pVhvSettings;
	uint8_t pPhaseCal;

	Status = VL53L0X_ref_calibration_io(Dev, 0,
 800c5d8:	78b9      	ldrb	r1, [r7, #2]
 800c5da:	78fa      	ldrb	r2, [r7, #3]
 800c5dc:	2301      	movs	r3, #1
 800c5de:	9303      	str	r3, [sp, #12]
 800c5e0:	2301      	movs	r3, #1
 800c5e2:	9302      	str	r3, [sp, #8]
 800c5e4:	f107 030d 	add.w	r3, r7, #13
 800c5e8:	9301      	str	r3, [sp, #4]
 800c5ea:	f107 030e 	add.w	r3, r7, #14
 800c5ee:	9300      	str	r3, [sp, #0]
 800c5f0:	460b      	mov	r3, r1
 800c5f2:	2100      	movs	r1, #0
 800c5f4:	6878      	ldr	r0, [r7, #4]
 800c5f6:	f7ff fe43 	bl	800c280 <VL53L0X_ref_calibration_io>
 800c5fa:	4603      	mov	r3, r0
 800c5fc:	73fb      	strb	r3, [r7, #15]
		VhvSettings, PhaseCal,
		&pVhvSettings, &pPhaseCal,
		1, 1);

	return Status;
 800c5fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c602:	4618      	mov	r0, r3
 800c604:	3710      	adds	r7, #16
 800c606:	46bd      	mov	sp, r7
 800c608:	bd80      	pop	{r7, pc}

0800c60a <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 800c60a:	b580      	push	{r7, lr}
 800c60c:	b086      	sub	sp, #24
 800c60e:	af00      	add	r7, sp, #0
 800c610:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c612:	2300      	movs	r3, #0
 800c614:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 800c616:	2300      	movs	r3, #0
 800c618:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 800c61a:	2300      	movs	r3, #0
 800c61c:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800c61e:	f107 030f 	add.w	r3, r7, #15
 800c622:	4619      	mov	r1, r3
 800c624:	6878      	ldr	r0, [r7, #4]
 800c626:	f7fe fda3 	bl	800b170 <VL53L0X_GetMeasurementDataReady>
 800c62a:	4603      	mov	r3, r0
 800c62c:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 800c62e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d110      	bne.n	800c658 <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 800c636:	7bfb      	ldrb	r3, [r7, #15]
 800c638:	2b01      	cmp	r3, #1
 800c63a:	d00f      	beq.n	800c65c <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 800c63c:	693b      	ldr	r3, [r7, #16]
 800c63e:	3301      	adds	r3, #1
 800c640:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 800c642:	693b      	ldr	r3, [r7, #16]
 800c644:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800c648:	d302      	bcc.n	800c650 <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 800c64a:	23f9      	movs	r3, #249	@ 0xf9
 800c64c:	75fb      	strb	r3, [r7, #23]
			break;
 800c64e:	e006      	b.n	800c65e <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 800c650:	6878      	ldr	r0, [r7, #4]
 800c652:	f002 fc7d 	bl	800ef50 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800c656:	e7e2      	b.n	800c61e <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 800c658:	bf00      	nop
 800c65a:	e000      	b.n	800c65e <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 800c65c:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 800c65e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c662:	4618      	mov	r0, r3
 800c664:	3718      	adds	r7, #24
 800c666:	46bd      	mov	sp, r7
 800c668:	bd80      	pop	{r7, pc}

0800c66a <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800c66a:	b480      	push	{r7}
 800c66c:	b085      	sub	sp, #20
 800c66e:	af00      	add	r7, sp, #0
 800c670:	4603      	mov	r3, r0
 800c672:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800c674:	2300      	movs	r3, #0
 800c676:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800c678:	79fb      	ldrb	r3, [r7, #7]
 800c67a:	3301      	adds	r3, #1
 800c67c:	b2db      	uxtb	r3, r3
 800c67e:	005b      	lsls	r3, r3, #1
 800c680:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800c682:	7bfb      	ldrb	r3, [r7, #15]
}
 800c684:	4618      	mov	r0, r3
 800c686:	3714      	adds	r7, #20
 800c688:	46bd      	mov	sp, r7
 800c68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68e:	4770      	bx	lr

0800c690 <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 800c690:	b480      	push	{r7}
 800c692:	b085      	sub	sp, #20
 800c694:	af00      	add	r7, sp, #0
 800c696:	4603      	mov	r3, r0
 800c698:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 800c69a:	2300      	movs	r3, #0
 800c69c:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 800c69e:	79fb      	ldrb	r3, [r7, #7]
 800c6a0:	085b      	lsrs	r3, r3, #1
 800c6a2:	b2db      	uxtb	r3, r3
 800c6a4:	3b01      	subs	r3, #1
 800c6a6:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 800c6a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	3714      	adds	r7, #20
 800c6ae:	46bd      	mov	sp, r7
 800c6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b4:	4770      	bx	lr

0800c6b6 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 800c6b6:	b480      	push	{r7}
 800c6b8:	b085      	sub	sp, #20
 800c6ba:	af00      	add	r7, sp, #0
 800c6bc:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 800c6be:	2300      	movs	r3, #0
 800c6c0:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800c6c2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c6c6:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 800c6c8:	e002      	b.n	800c6d0 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 800c6ca:	68bb      	ldr	r3, [r7, #8]
 800c6cc:	089b      	lsrs	r3, r3, #2
 800c6ce:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800c6d0:	68ba      	ldr	r2, [r7, #8]
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	429a      	cmp	r2, r3
 800c6d6:	d8f8      	bhi.n	800c6ca <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 800c6d8:	e017      	b.n	800c70a <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 800c6da:	68fa      	ldr	r2, [r7, #12]
 800c6dc:	68bb      	ldr	r3, [r7, #8]
 800c6de:	4413      	add	r3, r2
 800c6e0:	687a      	ldr	r2, [r7, #4]
 800c6e2:	429a      	cmp	r2, r3
 800c6e4:	d30b      	bcc.n	800c6fe <VL53L0X_isqrt+0x48>
			num -= res + bit;
 800c6e6:	68fa      	ldr	r2, [r7, #12]
 800c6e8:	68bb      	ldr	r3, [r7, #8]
 800c6ea:	4413      	add	r3, r2
 800c6ec:	687a      	ldr	r2, [r7, #4]
 800c6ee:	1ad3      	subs	r3, r2, r3
 800c6f0:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	085b      	lsrs	r3, r3, #1
 800c6f6:	68ba      	ldr	r2, [r7, #8]
 800c6f8:	4413      	add	r3, r2
 800c6fa:	60fb      	str	r3, [r7, #12]
 800c6fc:	e002      	b.n	800c704 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	085b      	lsrs	r3, r3, #1
 800c702:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 800c704:	68bb      	ldr	r3, [r7, #8]
 800c706:	089b      	lsrs	r3, r3, #2
 800c708:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800c70a:	68bb      	ldr	r3, [r7, #8]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d1e4      	bne.n	800c6da <VL53L0X_isqrt+0x24>
	}

	return res;
 800c710:	68fb      	ldr	r3, [r7, #12]
}
 800c712:	4618      	mov	r0, r3
 800c714:	3714      	adds	r7, #20
 800c716:	46bd      	mov	sp, r7
 800c718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71c:	4770      	bx	lr

0800c71e <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 800c71e:	b580      	push	{r7, lr}
 800c720:	b086      	sub	sp, #24
 800c722:	af00      	add	r7, sp, #0
 800c724:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c726:	2300      	movs	r3, #0
 800c728:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 800c72a:	2200      	movs	r2, #0
 800c72c:	2183      	movs	r1, #131	@ 0x83
 800c72e:	6878      	ldr	r0, [r7, #4]
 800c730:	f002 faf0 	bl	800ed14 <VL53L0X_WrByte>
 800c734:	4603      	mov	r3, r0
 800c736:	461a      	mov	r2, r3
 800c738:	7dfb      	ldrb	r3, [r7, #23]
 800c73a:	4313      	orrs	r3, r2
 800c73c:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 800c73e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c742:	2b00      	cmp	r3, #0
 800c744:	d11e      	bne.n	800c784 <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 800c746:	2300      	movs	r3, #0
 800c748:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 800c74a:	f107 030f 	add.w	r3, r7, #15
 800c74e:	461a      	mov	r2, r3
 800c750:	2183      	movs	r1, #131	@ 0x83
 800c752:	6878      	ldr	r0, [r7, #4]
 800c754:	f002 fb60 	bl	800ee18 <VL53L0X_RdByte>
 800c758:	4603      	mov	r3, r0
 800c75a:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 800c75c:	7bfb      	ldrb	r3, [r7, #15]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d10a      	bne.n	800c778 <VL53L0X_device_read_strobe+0x5a>
 800c762:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d106      	bne.n	800c778 <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 800c76a:	693b      	ldr	r3, [r7, #16]
 800c76c:	3301      	adds	r3, #1
 800c76e:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800c770:	693b      	ldr	r3, [r7, #16]
 800c772:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800c776:	d3e8      	bcc.n	800c74a <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800c778:	693b      	ldr	r3, [r7, #16]
 800c77a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800c77e:	d301      	bcc.n	800c784 <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 800c780:	23f9      	movs	r3, #249	@ 0xf9
 800c782:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 800c784:	2201      	movs	r2, #1
 800c786:	2183      	movs	r1, #131	@ 0x83
 800c788:	6878      	ldr	r0, [r7, #4]
 800c78a:	f002 fac3 	bl	800ed14 <VL53L0X_WrByte>
 800c78e:	4603      	mov	r3, r0
 800c790:	461a      	mov	r2, r3
 800c792:	7dfb      	ldrb	r3, [r7, #23]
 800c794:	4313      	orrs	r3, r2
 800c796:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 800c798:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800c79c:	4618      	mov	r0, r3
 800c79e:	3718      	adds	r7, #24
 800c7a0:	46bd      	mov	sp, r7
 800c7a2:	bd80      	pop	{r7, pc}

0800c7a4 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	b098      	sub	sp, #96	@ 0x60
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
 800c7ac:	460b      	mov	r3, r1
 800c7ae:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c7b0:	2300      	movs	r3, #0
 800c7b2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	uint8_t ReferenceSpadType = 0;
 800c7bc:	2300      	movs	r3, #0
 800c7be:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
	uint32_t PartUIDUpper = 0;
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t PartUIDLower = 0;
 800c7c6:	2300      	movs	r3, #0
 800c7c8:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t OffsetFixed1104_mm = 0;
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	64bb      	str	r3, [r7, #72]	@ 0x48
	int16_t OffsetMicroMeters = 0;
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 800c7d4:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 800c7d8:	647b      	str	r3, [r7, #68]	@ 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 800c7da:	2300      	movs	r3, #0
 800c7dc:	657b      	str	r3, [r7, #84]	@ 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 800c7de:	2300      	movs	r3, #0
 800c7e0:	653b      	str	r3, [r7, #80]	@ 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	643b      	str	r3, [r7, #64]	@ 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800c7ec:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 800c7f0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c7f4:	2b07      	cmp	r3, #7
 800c7f6:	f000 8408 	beq.w	800d00a <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800c7fa:	2201      	movs	r2, #1
 800c7fc:	2180      	movs	r1, #128	@ 0x80
 800c7fe:	6878      	ldr	r0, [r7, #4]
 800c800:	f002 fa88 	bl	800ed14 <VL53L0X_WrByte>
 800c804:	4603      	mov	r3, r0
 800c806:	461a      	mov	r2, r3
 800c808:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c80c:	4313      	orrs	r3, r2
 800c80e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800c812:	2201      	movs	r2, #1
 800c814:	21ff      	movs	r1, #255	@ 0xff
 800c816:	6878      	ldr	r0, [r7, #4]
 800c818:	f002 fa7c 	bl	800ed14 <VL53L0X_WrByte>
 800c81c:	4603      	mov	r3, r0
 800c81e:	461a      	mov	r2, r3
 800c820:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c824:	4313      	orrs	r3, r2
 800c826:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800c82a:	2200      	movs	r2, #0
 800c82c:	2100      	movs	r1, #0
 800c82e:	6878      	ldr	r0, [r7, #4]
 800c830:	f002 fa70 	bl	800ed14 <VL53L0X_WrByte>
 800c834:	4603      	mov	r3, r0
 800c836:	461a      	mov	r2, r3
 800c838:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c83c:	4313      	orrs	r3, r2
 800c83e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800c842:	2206      	movs	r2, #6
 800c844:	21ff      	movs	r1, #255	@ 0xff
 800c846:	6878      	ldr	r0, [r7, #4]
 800c848:	f002 fa64 	bl	800ed14 <VL53L0X_WrByte>
 800c84c:	4603      	mov	r3, r0
 800c84e:	461a      	mov	r2, r3
 800c850:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c854:	4313      	orrs	r3, r2
 800c856:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800c85a:	f107 0337 	add.w	r3, r7, #55	@ 0x37
 800c85e:	461a      	mov	r2, r3
 800c860:	2183      	movs	r1, #131	@ 0x83
 800c862:	6878      	ldr	r0, [r7, #4]
 800c864:	f002 fad8 	bl	800ee18 <VL53L0X_RdByte>
 800c868:	4603      	mov	r3, r0
 800c86a:	461a      	mov	r2, r3
 800c86c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c870:	4313      	orrs	r3, r2
 800c872:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 800c876:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c87a:	f043 0304 	orr.w	r3, r3, #4
 800c87e:	b2db      	uxtb	r3, r3
 800c880:	461a      	mov	r2, r3
 800c882:	2183      	movs	r1, #131	@ 0x83
 800c884:	6878      	ldr	r0, [r7, #4]
 800c886:	f002 fa45 	bl	800ed14 <VL53L0X_WrByte>
 800c88a:	4603      	mov	r3, r0
 800c88c:	461a      	mov	r2, r3
 800c88e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c892:	4313      	orrs	r3, r2
 800c894:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 800c898:	2207      	movs	r2, #7
 800c89a:	21ff      	movs	r1, #255	@ 0xff
 800c89c:	6878      	ldr	r0, [r7, #4]
 800c89e:	f002 fa39 	bl	800ed14 <VL53L0X_WrByte>
 800c8a2:	4603      	mov	r3, r0
 800c8a4:	461a      	mov	r2, r3
 800c8a6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c8aa:	4313      	orrs	r3, r2
 800c8ac:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 800c8b0:	2201      	movs	r2, #1
 800c8b2:	2181      	movs	r1, #129	@ 0x81
 800c8b4:	6878      	ldr	r0, [r7, #4]
 800c8b6:	f002 fa2d 	bl	800ed14 <VL53L0X_WrByte>
 800c8ba:	4603      	mov	r3, r0
 800c8bc:	461a      	mov	r2, r3
 800c8be:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c8c2:	4313      	orrs	r3, r2
 800c8c4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 800c8c8:	6878      	ldr	r0, [r7, #4]
 800c8ca:	f002 fb41 	bl	800ef50 <VL53L0X_PollingDelay>
 800c8ce:	4603      	mov	r3, r0
 800c8d0:	461a      	mov	r2, r3
 800c8d2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c8d6:	4313      	orrs	r3, r2
 800c8d8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800c8dc:	2201      	movs	r2, #1
 800c8de:	2180      	movs	r1, #128	@ 0x80
 800c8e0:	6878      	ldr	r0, [r7, #4]
 800c8e2:	f002 fa17 	bl	800ed14 <VL53L0X_WrByte>
 800c8e6:	4603      	mov	r3, r0
 800c8e8:	461a      	mov	r2, r3
 800c8ea:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c8ee:	4313      	orrs	r3, r2
 800c8f0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		if (((option & 1) == 1) &&
 800c8f4:	78fb      	ldrb	r3, [r7, #3]
 800c8f6:	f003 0301 	and.w	r3, r3, #1
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	f000 8098 	beq.w	800ca30 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800c900:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c904:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800c908:	2b00      	cmp	r3, #0
 800c90a:	f040 8091 	bne.w	800ca30 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 800c90e:	226b      	movs	r2, #107	@ 0x6b
 800c910:	2194      	movs	r1, #148	@ 0x94
 800c912:	6878      	ldr	r0, [r7, #4]
 800c914:	f002 f9fe 	bl	800ed14 <VL53L0X_WrByte>
 800c918:	4603      	mov	r3, r0
 800c91a:	461a      	mov	r2, r3
 800c91c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c920:	4313      	orrs	r3, r2
 800c922:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c926:	6878      	ldr	r0, [r7, #4]
 800c928:	f7ff fef9 	bl	800c71e <VL53L0X_device_read_strobe>
 800c92c:	4603      	mov	r3, r0
 800c92e:	461a      	mov	r2, r3
 800c930:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c934:	4313      	orrs	r3, r2
 800c936:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800c93a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800c93e:	461a      	mov	r2, r3
 800c940:	2190      	movs	r1, #144	@ 0x90
 800c942:	6878      	ldr	r0, [r7, #4]
 800c944:	f002 fac8 	bl	800eed8 <VL53L0X_RdDWord>
 800c948:	4603      	mov	r3, r0
 800c94a:	461a      	mov	r2, r3
 800c94c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c950:	4313      	orrs	r3, r2
 800c952:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 800c956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c958:	0a1b      	lsrs	r3, r3, #8
 800c95a:	b2db      	uxtb	r3, r3
 800c95c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c960:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 800c964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c966:	0bdb      	lsrs	r3, r3, #15
 800c968:	b2db      	uxtb	r3, r3
 800c96a:	f003 0301 	and.w	r3, r3, #1
 800c96e:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 800c972:	2224      	movs	r2, #36	@ 0x24
 800c974:	2194      	movs	r1, #148	@ 0x94
 800c976:	6878      	ldr	r0, [r7, #4]
 800c978:	f002 f9cc 	bl	800ed14 <VL53L0X_WrByte>
 800c97c:	4603      	mov	r3, r0
 800c97e:	461a      	mov	r2, r3
 800c980:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c984:	4313      	orrs	r3, r2
 800c986:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c98a:	6878      	ldr	r0, [r7, #4]
 800c98c:	f7ff fec7 	bl	800c71e <VL53L0X_device_read_strobe>
 800c990:	4603      	mov	r3, r0
 800c992:	461a      	mov	r2, r3
 800c994:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c998:	4313      	orrs	r3, r2
 800c99a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800c99e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800c9a2:	461a      	mov	r2, r3
 800c9a4:	2190      	movs	r1, #144	@ 0x90
 800c9a6:	6878      	ldr	r0, [r7, #4]
 800c9a8:	f002 fa96 	bl	800eed8 <VL53L0X_RdDWord>
 800c9ac:	4603      	mov	r3, r0
 800c9ae:	461a      	mov	r2, r3
 800c9b0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c9b4:	4313      	orrs	r3, r2
 800c9b6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 800c9ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9bc:	0e1b      	lsrs	r3, r3, #24
 800c9be:	b2db      	uxtb	r3, r3
 800c9c0:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 800c9c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9c4:	0c1b      	lsrs	r3, r3, #16
 800c9c6:	b2db      	uxtb	r3, r3
 800c9c8:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 800c9ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9cc:	0a1b      	lsrs	r3, r3, #8
 800c9ce:	b2db      	uxtb	r3, r3
 800c9d0:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 800c9d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9d4:	b2db      	uxtb	r3, r3
 800c9d6:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 800c9d8:	2225      	movs	r2, #37	@ 0x25
 800c9da:	2194      	movs	r1, #148	@ 0x94
 800c9dc:	6878      	ldr	r0, [r7, #4]
 800c9de:	f002 f999 	bl	800ed14 <VL53L0X_WrByte>
 800c9e2:	4603      	mov	r3, r0
 800c9e4:	461a      	mov	r2, r3
 800c9e6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c9ea:	4313      	orrs	r3, r2
 800c9ec:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c9f0:	6878      	ldr	r0, [r7, #4]
 800c9f2:	f7ff fe94 	bl	800c71e <VL53L0X_device_read_strobe>
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	461a      	mov	r2, r3
 800c9fa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c9fe:	4313      	orrs	r3, r2
 800ca00:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800ca04:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800ca08:	461a      	mov	r2, r3
 800ca0a:	2190      	movs	r1, #144	@ 0x90
 800ca0c:	6878      	ldr	r0, [r7, #4]
 800ca0e:	f002 fa63 	bl	800eed8 <VL53L0X_RdDWord>
 800ca12:	4603      	mov	r3, r0
 800ca14:	461a      	mov	r2, r3
 800ca16:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ca1a:	4313      	orrs	r3, r2
 800ca1c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 800ca20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca22:	0e1b      	lsrs	r3, r3, #24
 800ca24:	b2db      	uxtb	r3, r3
 800ca26:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 800ca28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca2a:	0c1b      	lsrs	r3, r3, #16
 800ca2c:	b2db      	uxtb	r3, r3
 800ca2e:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 800ca30:	78fb      	ldrb	r3, [r7, #3]
 800ca32:	f003 0302 	and.w	r3, r3, #2
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	f000 8189 	beq.w	800cd4e <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800ca3c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ca40:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	f040 8182 	bne.w	800cd4e <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 800ca4a:	2202      	movs	r2, #2
 800ca4c:	2194      	movs	r1, #148	@ 0x94
 800ca4e:	6878      	ldr	r0, [r7, #4]
 800ca50:	f002 f960 	bl	800ed14 <VL53L0X_WrByte>
 800ca54:	4603      	mov	r3, r0
 800ca56:	461a      	mov	r2, r3
 800ca58:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ca5c:	4313      	orrs	r3, r2
 800ca5e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800ca62:	6878      	ldr	r0, [r7, #4]
 800ca64:	f7ff fe5b 	bl	800c71e <VL53L0X_device_read_strobe>
 800ca68:	4603      	mov	r3, r0
 800ca6a:	461a      	mov	r2, r3
 800ca6c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ca70:	4313      	orrs	r3, r2
 800ca72:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 800ca76:	f107 032f 	add.w	r3, r7, #47	@ 0x2f
 800ca7a:	461a      	mov	r2, r3
 800ca7c:	2190      	movs	r1, #144	@ 0x90
 800ca7e:	6878      	ldr	r0, [r7, #4]
 800ca80:	f002 f9ca 	bl	800ee18 <VL53L0X_RdByte>
 800ca84:	4603      	mov	r3, r0
 800ca86:	461a      	mov	r2, r3
 800ca88:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ca8c:	4313      	orrs	r3, r2
 800ca8e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800ca92:	227b      	movs	r2, #123	@ 0x7b
 800ca94:	2194      	movs	r1, #148	@ 0x94
 800ca96:	6878      	ldr	r0, [r7, #4]
 800ca98:	f002 f93c 	bl	800ed14 <VL53L0X_WrByte>
 800ca9c:	4603      	mov	r3, r0
 800ca9e:	461a      	mov	r2, r3
 800caa0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800caa4:	4313      	orrs	r3, r2
 800caa6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800caaa:	6878      	ldr	r0, [r7, #4]
 800caac:	f7ff fe37 	bl	800c71e <VL53L0X_device_read_strobe>
 800cab0:	4603      	mov	r3, r0
 800cab2:	461a      	mov	r2, r3
 800cab4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cab8:	4313      	orrs	r3, r2
 800caba:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 800cabe:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 800cac2:	461a      	mov	r2, r3
 800cac4:	2190      	movs	r1, #144	@ 0x90
 800cac6:	6878      	ldr	r0, [r7, #4]
 800cac8:	f002 f9a6 	bl	800ee18 <VL53L0X_RdByte>
 800cacc:	4603      	mov	r3, r0
 800cace:	461a      	mov	r2, r3
 800cad0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cad4:	4313      	orrs	r3, r2
 800cad6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 800cada:	2277      	movs	r2, #119	@ 0x77
 800cadc:	2194      	movs	r1, #148	@ 0x94
 800cade:	6878      	ldr	r0, [r7, #4]
 800cae0:	f002 f918 	bl	800ed14 <VL53L0X_WrByte>
 800cae4:	4603      	mov	r3, r0
 800cae6:	461a      	mov	r2, r3
 800cae8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800caec:	4313      	orrs	r3, r2
 800caee:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800caf2:	6878      	ldr	r0, [r7, #4]
 800caf4:	f7ff fe13 	bl	800c71e <VL53L0X_device_read_strobe>
 800caf8:	4603      	mov	r3, r0
 800cafa:	461a      	mov	r2, r3
 800cafc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cb00:	4313      	orrs	r3, r2
 800cb02:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800cb06:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800cb0a:	461a      	mov	r2, r3
 800cb0c:	2190      	movs	r1, #144	@ 0x90
 800cb0e:	6878      	ldr	r0, [r7, #4]
 800cb10:	f002 f9e2 	bl	800eed8 <VL53L0X_RdDWord>
 800cb14:	4603      	mov	r3, r0
 800cb16:	461a      	mov	r2, r3
 800cb18:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cb1c:	4313      	orrs	r3, r2
 800cb1e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 800cb22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb24:	0e5b      	lsrs	r3, r3, #25
 800cb26:	b2db      	uxtb	r3, r3
 800cb28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cb2c:	b2db      	uxtb	r3, r3
 800cb2e:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 800cb30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb32:	0c9b      	lsrs	r3, r3, #18
 800cb34:	b2db      	uxtb	r3, r3
 800cb36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cb3a:	b2db      	uxtb	r3, r3
 800cb3c:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 800cb3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb40:	0adb      	lsrs	r3, r3, #11
 800cb42:	b2db      	uxtb	r3, r3
 800cb44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cb48:	b2db      	uxtb	r3, r3
 800cb4a:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 800cb4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb4e:	091b      	lsrs	r3, r3, #4
 800cb50:	b2db      	uxtb	r3, r3
 800cb52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cb56:	b2db      	uxtb	r3, r3
 800cb58:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 800cb5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb5c:	b2db      	uxtb	r3, r3
 800cb5e:	00db      	lsls	r3, r3, #3
 800cb60:	b2db      	uxtb	r3, r3
 800cb62:	f003 0378 	and.w	r3, r3, #120	@ 0x78
 800cb66:	b2db      	uxtb	r3, r3
 800cb68:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 800cb6c:	2278      	movs	r2, #120	@ 0x78
 800cb6e:	2194      	movs	r1, #148	@ 0x94
 800cb70:	6878      	ldr	r0, [r7, #4]
 800cb72:	f002 f8cf 	bl	800ed14 <VL53L0X_WrByte>
 800cb76:	4603      	mov	r3, r0
 800cb78:	461a      	mov	r2, r3
 800cb7a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cb7e:	4313      	orrs	r3, r2
 800cb80:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800cb84:	6878      	ldr	r0, [r7, #4]
 800cb86:	f7ff fdca 	bl	800c71e <VL53L0X_device_read_strobe>
 800cb8a:	4603      	mov	r3, r0
 800cb8c:	461a      	mov	r2, r3
 800cb8e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cb92:	4313      	orrs	r3, r2
 800cb94:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800cb98:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800cb9c:	461a      	mov	r2, r3
 800cb9e:	2190      	movs	r1, #144	@ 0x90
 800cba0:	6878      	ldr	r0, [r7, #4]
 800cba2:	f002 f999 	bl	800eed8 <VL53L0X_RdDWord>
 800cba6:	4603      	mov	r3, r0
 800cba8:	461a      	mov	r2, r3
 800cbaa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cbae:	4313      	orrs	r3, r2
 800cbb0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 800cbb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbb6:	0f5b      	lsrs	r3, r3, #29
 800cbb8:	b2db      	uxtb	r3, r3
 800cbba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cbbe:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 800cbc0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cbc4:	4413      	add	r3, r2
 800cbc6:	b2db      	uxtb	r3, r3
 800cbc8:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 800cbca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbcc:	0d9b      	lsrs	r3, r3, #22
 800cbce:	b2db      	uxtb	r3, r3
 800cbd0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cbd4:	b2db      	uxtb	r3, r3
 800cbd6:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 800cbd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbda:	0bdb      	lsrs	r3, r3, #15
 800cbdc:	b2db      	uxtb	r3, r3
 800cbde:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cbe2:	b2db      	uxtb	r3, r3
 800cbe4:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 800cbe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbe8:	0a1b      	lsrs	r3, r3, #8
 800cbea:	b2db      	uxtb	r3, r3
 800cbec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cbf0:	b2db      	uxtb	r3, r3
 800cbf2:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 800cbf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbf6:	085b      	lsrs	r3, r3, #1
 800cbf8:	b2db      	uxtb	r3, r3
 800cbfa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cbfe:	b2db      	uxtb	r3, r3
 800cc00:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 800cc02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc04:	b2db      	uxtb	r3, r3
 800cc06:	019b      	lsls	r3, r3, #6
 800cc08:	b2db      	uxtb	r3, r3
 800cc0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc0e:	b2db      	uxtb	r3, r3
 800cc10:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 800cc14:	2279      	movs	r2, #121	@ 0x79
 800cc16:	2194      	movs	r1, #148	@ 0x94
 800cc18:	6878      	ldr	r0, [r7, #4]
 800cc1a:	f002 f87b 	bl	800ed14 <VL53L0X_WrByte>
 800cc1e:	4603      	mov	r3, r0
 800cc20:	461a      	mov	r2, r3
 800cc22:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cc26:	4313      	orrs	r3, r2
 800cc28:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800cc2c:	6878      	ldr	r0, [r7, #4]
 800cc2e:	f7ff fd76 	bl	800c71e <VL53L0X_device_read_strobe>
 800cc32:	4603      	mov	r3, r0
 800cc34:	461a      	mov	r2, r3
 800cc36:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cc3a:	4313      	orrs	r3, r2
 800cc3c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800cc40:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800cc44:	461a      	mov	r2, r3
 800cc46:	2190      	movs	r1, #144	@ 0x90
 800cc48:	6878      	ldr	r0, [r7, #4]
 800cc4a:	f002 f945 	bl	800eed8 <VL53L0X_RdDWord>
 800cc4e:	4603      	mov	r3, r0
 800cc50:	461a      	mov	r2, r3
 800cc52:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cc56:	4313      	orrs	r3, r2
 800cc58:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 800cc5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc5e:	0e9b      	lsrs	r3, r3, #26
 800cc60:	b2db      	uxtb	r3, r3
 800cc62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cc66:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 800cc68:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cc6c:	4413      	add	r3, r2
 800cc6e:	b2db      	uxtb	r3, r3
 800cc70:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 800cc72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc74:	0cdb      	lsrs	r3, r3, #19
 800cc76:	b2db      	uxtb	r3, r3
 800cc78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cc7c:	b2db      	uxtb	r3, r3
 800cc7e:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 800cc80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc82:	0b1b      	lsrs	r3, r3, #12
 800cc84:	b2db      	uxtb	r3, r3
 800cc86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cc8a:	b2db      	uxtb	r3, r3
 800cc8c:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 800cc8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc90:	095b      	lsrs	r3, r3, #5
 800cc92:	b2db      	uxtb	r3, r3
 800cc94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cc98:	b2db      	uxtb	r3, r3
 800cc9a:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800cc9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc9e:	b2db      	uxtb	r3, r3
 800cca0:	009b      	lsls	r3, r3, #2
 800cca2:	b2db      	uxtb	r3, r3
 800cca4:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 800cca8:	b2db      	uxtb	r3, r3
 800ccaa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 800ccae:	227a      	movs	r2, #122	@ 0x7a
 800ccb0:	2194      	movs	r1, #148	@ 0x94
 800ccb2:	6878      	ldr	r0, [r7, #4]
 800ccb4:	f002 f82e 	bl	800ed14 <VL53L0X_WrByte>
 800ccb8:	4603      	mov	r3, r0
 800ccba:	461a      	mov	r2, r3
 800ccbc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ccc0:	4313      	orrs	r3, r2
 800ccc2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800ccc6:	6878      	ldr	r0, [r7, #4]
 800ccc8:	f7ff fd29 	bl	800c71e <VL53L0X_device_read_strobe>
 800cccc:	4603      	mov	r3, r0
 800ccce:	461a      	mov	r2, r3
 800ccd0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ccd4:	4313      	orrs	r3, r2
 800ccd6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800ccda:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800ccde:	461a      	mov	r2, r3
 800cce0:	2190      	movs	r1, #144	@ 0x90
 800cce2:	6878      	ldr	r0, [r7, #4]
 800cce4:	f002 f8f8 	bl	800eed8 <VL53L0X_RdDWord>
 800cce8:	4603      	mov	r3, r0
 800ccea:	461a      	mov	r2, r3
 800ccec:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ccf0:	4313      	orrs	r3, r2
 800ccf2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 800ccf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccf8:	0f9b      	lsrs	r3, r3, #30
 800ccfa:	b2db      	uxtb	r3, r3
 800ccfc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cd00:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 800cd02:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cd06:	4413      	add	r3, r2
 800cd08:	b2db      	uxtb	r3, r3
 800cd0a:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 800cd0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd0e:	0ddb      	lsrs	r3, r3, #23
 800cd10:	b2db      	uxtb	r3, r3
 800cd12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cd16:	b2db      	uxtb	r3, r3
 800cd18:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 800cd1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd1c:	0c1b      	lsrs	r3, r3, #16
 800cd1e:	b2db      	uxtb	r3, r3
 800cd20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cd24:	b2db      	uxtb	r3, r3
 800cd26:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 800cd28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd2a:	0a5b      	lsrs	r3, r3, #9
 800cd2c:	b2db      	uxtb	r3, r3
 800cd2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cd32:	b2db      	uxtb	r3, r3
 800cd34:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 800cd38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd3a:	089b      	lsrs	r3, r3, #2
 800cd3c:	b2db      	uxtb	r3, r3
 800cd3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cd42:	b2db      	uxtb	r3, r3
 800cd44:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
			ProductId[18] = '\0';
 800cd48:	2300      	movs	r3, #0
 800cd4a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

		}

		if (((option & 4) == 4) &&
 800cd4e:	78fb      	ldrb	r3, [r7, #3]
 800cd50:	f003 0304 	and.w	r3, r3, #4
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	f000 80f1 	beq.w	800cf3c <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800cd5a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800cd5e:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	f040 80ea 	bne.w	800cf3c <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800cd68:	227b      	movs	r2, #123	@ 0x7b
 800cd6a:	2194      	movs	r1, #148	@ 0x94
 800cd6c:	6878      	ldr	r0, [r7, #4]
 800cd6e:	f001 ffd1 	bl	800ed14 <VL53L0X_WrByte>
 800cd72:	4603      	mov	r3, r0
 800cd74:	461a      	mov	r2, r3
 800cd76:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cd7a:	4313      	orrs	r3, r2
 800cd7c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800cd80:	6878      	ldr	r0, [r7, #4]
 800cd82:	f7ff fccc 	bl	800c71e <VL53L0X_device_read_strobe>
 800cd86:	4603      	mov	r3, r0
 800cd88:	461a      	mov	r2, r3
 800cd8a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cd8e:	4313      	orrs	r3, r2
 800cd90:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 800cd94:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800cd98:	461a      	mov	r2, r3
 800cd9a:	2190      	movs	r1, #144	@ 0x90
 800cd9c:	6878      	ldr	r0, [r7, #4]
 800cd9e:	f002 f89b 	bl	800eed8 <VL53L0X_RdDWord>
 800cda2:	4603      	mov	r3, r0
 800cda4:	461a      	mov	r2, r3
 800cda6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cdaa:	4313      	orrs	r3, r2
 800cdac:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 800cdb0:	227c      	movs	r2, #124	@ 0x7c
 800cdb2:	2194      	movs	r1, #148	@ 0x94
 800cdb4:	6878      	ldr	r0, [r7, #4]
 800cdb6:	f001 ffad 	bl	800ed14 <VL53L0X_WrByte>
 800cdba:	4603      	mov	r3, r0
 800cdbc:	461a      	mov	r2, r3
 800cdbe:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cdc2:	4313      	orrs	r3, r2
 800cdc4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800cdc8:	6878      	ldr	r0, [r7, #4]
 800cdca:	f7ff fca8 	bl	800c71e <VL53L0X_device_read_strobe>
 800cdce:	4603      	mov	r3, r0
 800cdd0:	461a      	mov	r2, r3
 800cdd2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cdd6:	4313      	orrs	r3, r2
 800cdd8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 800cddc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cde0:	461a      	mov	r2, r3
 800cde2:	2190      	movs	r1, #144	@ 0x90
 800cde4:	6878      	ldr	r0, [r7, #4]
 800cde6:	f002 f877 	bl	800eed8 <VL53L0X_RdDWord>
 800cdea:	4603      	mov	r3, r0
 800cdec:	461a      	mov	r2, r3
 800cdee:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cdf2:	4313      	orrs	r3, r2
 800cdf4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 800cdf8:	2273      	movs	r2, #115	@ 0x73
 800cdfa:	2194      	movs	r1, #148	@ 0x94
 800cdfc:	6878      	ldr	r0, [r7, #4]
 800cdfe:	f001 ff89 	bl	800ed14 <VL53L0X_WrByte>
 800ce02:	4603      	mov	r3, r0
 800ce04:	461a      	mov	r2, r3
 800ce06:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ce0a:	4313      	orrs	r3, r2
 800ce0c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800ce10:	6878      	ldr	r0, [r7, #4]
 800ce12:	f7ff fc84 	bl	800c71e <VL53L0X_device_read_strobe>
 800ce16:	4603      	mov	r3, r0
 800ce18:	461a      	mov	r2, r3
 800ce1a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ce1e:	4313      	orrs	r3, r2
 800ce20:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800ce24:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800ce28:	461a      	mov	r2, r3
 800ce2a:	2190      	movs	r1, #144	@ 0x90
 800ce2c:	6878      	ldr	r0, [r7, #4]
 800ce2e:	f002 f853 	bl	800eed8 <VL53L0X_RdDWord>
 800ce32:	4603      	mov	r3, r0
 800ce34:	461a      	mov	r2, r3
 800ce36:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ce3a:	4313      	orrs	r3, r2
 800ce3c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 800ce40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce42:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 800ce44:	b29b      	uxth	r3, r3
 800ce46:	653b      	str	r3, [r7, #80]	@ 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800ce48:	2274      	movs	r2, #116	@ 0x74
 800ce4a:	2194      	movs	r1, #148	@ 0x94
 800ce4c:	6878      	ldr	r0, [r7, #4]
 800ce4e:	f001 ff61 	bl	800ed14 <VL53L0X_WrByte>
 800ce52:	4603      	mov	r3, r0
 800ce54:	461a      	mov	r2, r3
 800ce56:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ce5a:	4313      	orrs	r3, r2
 800ce5c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800ce60:	6878      	ldr	r0, [r7, #4]
 800ce62:	f7ff fc5c 	bl	800c71e <VL53L0X_device_read_strobe>
 800ce66:	4603      	mov	r3, r0
 800ce68:	461a      	mov	r2, r3
 800ce6a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ce6e:	4313      	orrs	r3, r2
 800ce70:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800ce74:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800ce78:	461a      	mov	r2, r3
 800ce7a:	2190      	movs	r1, #144	@ 0x90
 800ce7c:	6878      	ldr	r0, [r7, #4]
 800ce7e:	f002 f82b 	bl	800eed8 <VL53L0X_RdDWord>
 800ce82:	4603      	mov	r3, r0
 800ce84:	461a      	mov	r2, r3
 800ce86:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ce8a:	4313      	orrs	r3, r2
 800ce8c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 800ce90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce92:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 800ce94:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ce96:	4313      	orrs	r3, r2
 800ce98:	653b      	str	r3, [r7, #80]	@ 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 800ce9a:	2275      	movs	r2, #117	@ 0x75
 800ce9c:	2194      	movs	r1, #148	@ 0x94
 800ce9e:	6878      	ldr	r0, [r7, #4]
 800cea0:	f001 ff38 	bl	800ed14 <VL53L0X_WrByte>
 800cea4:	4603      	mov	r3, r0
 800cea6:	461a      	mov	r2, r3
 800cea8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ceac:	4313      	orrs	r3, r2
 800ceae:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800ceb2:	6878      	ldr	r0, [r7, #4]
 800ceb4:	f7ff fc33 	bl	800c71e <VL53L0X_device_read_strobe>
 800ceb8:	4603      	mov	r3, r0
 800ceba:	461a      	mov	r2, r3
 800cebc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cec0:	4313      	orrs	r3, r2
 800cec2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800cec6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800ceca:	461a      	mov	r2, r3
 800cecc:	2190      	movs	r1, #144	@ 0x90
 800cece:	6878      	ldr	r0, [r7, #4]
 800ced0:	f002 f802 	bl	800eed8 <VL53L0X_RdDWord>
 800ced4:	4603      	mov	r3, r0
 800ced6:	461a      	mov	r2, r3
 800ced8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cedc:	4313      	orrs	r3, r2
 800cede:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 800cee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cee4:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 800cee6:	b29b      	uxth	r3, r3
 800cee8:	657b      	str	r3, [r7, #84]	@ 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 800ceea:	2276      	movs	r2, #118	@ 0x76
 800ceec:	2194      	movs	r1, #148	@ 0x94
 800ceee:	6878      	ldr	r0, [r7, #4]
 800cef0:	f001 ff10 	bl	800ed14 <VL53L0X_WrByte>
 800cef4:	4603      	mov	r3, r0
 800cef6:	461a      	mov	r2, r3
 800cef8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cefc:	4313      	orrs	r3, r2
 800cefe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800cf02:	6878      	ldr	r0, [r7, #4]
 800cf04:	f7ff fc0b 	bl	800c71e <VL53L0X_device_read_strobe>
 800cf08:	4603      	mov	r3, r0
 800cf0a:	461a      	mov	r2, r3
 800cf0c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cf10:	4313      	orrs	r3, r2
 800cf12:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800cf16:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800cf1a:	461a      	mov	r2, r3
 800cf1c:	2190      	movs	r1, #144	@ 0x90
 800cf1e:	6878      	ldr	r0, [r7, #4]
 800cf20:	f001 ffda 	bl	800eed8 <VL53L0X_RdDWord>
 800cf24:	4603      	mov	r3, r0
 800cf26:	461a      	mov	r2, r3
 800cf28:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cf2c:	4313      	orrs	r3, r2
 800cf2e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 800cf32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf34:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 800cf36:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800cf38:	4313      	orrs	r3, r2
 800cf3a:	657b      	str	r3, [r7, #84]	@ 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 800cf3c:	2200      	movs	r2, #0
 800cf3e:	2181      	movs	r1, #129	@ 0x81
 800cf40:	6878      	ldr	r0, [r7, #4]
 800cf42:	f001 fee7 	bl	800ed14 <VL53L0X_WrByte>
 800cf46:	4603      	mov	r3, r0
 800cf48:	461a      	mov	r2, r3
 800cf4a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cf4e:	4313      	orrs	r3, r2
 800cf50:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800cf54:	2206      	movs	r2, #6
 800cf56:	21ff      	movs	r1, #255	@ 0xff
 800cf58:	6878      	ldr	r0, [r7, #4]
 800cf5a:	f001 fedb 	bl	800ed14 <VL53L0X_WrByte>
 800cf5e:	4603      	mov	r3, r0
 800cf60:	461a      	mov	r2, r3
 800cf62:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cf66:	4313      	orrs	r3, r2
 800cf68:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800cf6c:	f107 0337 	add.w	r3, r7, #55	@ 0x37
 800cf70:	461a      	mov	r2, r3
 800cf72:	2183      	movs	r1, #131	@ 0x83
 800cf74:	6878      	ldr	r0, [r7, #4]
 800cf76:	f001 ff4f 	bl	800ee18 <VL53L0X_RdByte>
 800cf7a:	4603      	mov	r3, r0
 800cf7c:	461a      	mov	r2, r3
 800cf7e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cf82:	4313      	orrs	r3, r2
 800cf84:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 800cf88:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cf8c:	f023 0304 	bic.w	r3, r3, #4
 800cf90:	b2db      	uxtb	r3, r3
 800cf92:	461a      	mov	r2, r3
 800cf94:	2183      	movs	r1, #131	@ 0x83
 800cf96:	6878      	ldr	r0, [r7, #4]
 800cf98:	f001 febc 	bl	800ed14 <VL53L0X_WrByte>
 800cf9c:	4603      	mov	r3, r0
 800cf9e:	461a      	mov	r2, r3
 800cfa0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cfa4:	4313      	orrs	r3, r2
 800cfa6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800cfaa:	2201      	movs	r2, #1
 800cfac:	21ff      	movs	r1, #255	@ 0xff
 800cfae:	6878      	ldr	r0, [r7, #4]
 800cfb0:	f001 feb0 	bl	800ed14 <VL53L0X_WrByte>
 800cfb4:	4603      	mov	r3, r0
 800cfb6:	461a      	mov	r2, r3
 800cfb8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cfbc:	4313      	orrs	r3, r2
 800cfbe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800cfc2:	2201      	movs	r2, #1
 800cfc4:	2100      	movs	r1, #0
 800cfc6:	6878      	ldr	r0, [r7, #4]
 800cfc8:	f001 fea4 	bl	800ed14 <VL53L0X_WrByte>
 800cfcc:	4603      	mov	r3, r0
 800cfce:	461a      	mov	r2, r3
 800cfd0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cfd4:	4313      	orrs	r3, r2
 800cfd6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800cfda:	2200      	movs	r2, #0
 800cfdc:	21ff      	movs	r1, #255	@ 0xff
 800cfde:	6878      	ldr	r0, [r7, #4]
 800cfe0:	f001 fe98 	bl	800ed14 <VL53L0X_WrByte>
 800cfe4:	4603      	mov	r3, r0
 800cfe6:	461a      	mov	r2, r3
 800cfe8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cfec:	4313      	orrs	r3, r2
 800cfee:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800cff2:	2200      	movs	r2, #0
 800cff4:	2180      	movs	r1, #128	@ 0x80
 800cff6:	6878      	ldr	r0, [r7, #4]
 800cff8:	f001 fe8c 	bl	800ed14 <VL53L0X_WrByte>
 800cffc:	4603      	mov	r3, r0
 800cffe:	461a      	mov	r2, r3
 800d000:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d004:	4313      	orrs	r3, r2
 800d006:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800d00a:	f997 305f 	ldrsb.w	r3, [r7, #95]	@ 0x5f
 800d00e:	2b00      	cmp	r3, #0
 800d010:	f040 808f 	bne.w	800d132 <VL53L0X_get_info_from_device+0x98e>
 800d014:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d018:	2b07      	cmp	r3, #7
 800d01a:	f000 808a 	beq.w	800d132 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 800d01e:	78fb      	ldrb	r3, [r7, #3]
 800d020:	f003 0301 	and.w	r3, r3, #1
 800d024:	2b00      	cmp	r3, #0
 800d026:	d024      	beq.n	800d072 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800d028:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d02c:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800d030:	2b00      	cmp	r3, #0
 800d032:	d11e      	bne.n	800d072 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	f897 205e 	ldrb.w	r2, [r7, #94]	@ 0x5e
 800d03a:	f883 2113 	strb.w	r2, [r3, #275]	@ 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	f897 205d 	ldrb.w	r2, [r7, #93]	@ 0x5d
 800d044:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800d048:	2300      	movs	r3, #0
 800d04a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d04c:	e00e      	b.n	800d06c <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 800d04e:	f107 0208 	add.w	r2, r7, #8
 800d052:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d054:	4413      	add	r3, r2
 800d056:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 800d058:	687a      	ldr	r2, [r7, #4]
 800d05a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d05c:	4413      	add	r3, r2
 800d05e:	f503 7395 	add.w	r3, r3, #298	@ 0x12a
 800d062:	460a      	mov	r2, r1
 800d064:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800d066:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d068:	3301      	adds	r3, #1
 800d06a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d06c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d06e:	2b05      	cmp	r3, #5
 800d070:	dded      	ble.n	800d04e <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 800d072:	78fb      	ldrb	r3, [r7, #3]
 800d074:	f003 0302 	and.w	r3, r3, #2
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d018      	beq.n	800d0ae <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800d07c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d080:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800d084:	2b00      	cmp	r3, #0
 800d086:	d112      	bne.n	800d0ae <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d088:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	f883 20f1 	strb.w	r2, [r3, #241]	@ 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d092:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	f883 20f2 	strb.w	r2, [r3, #242]	@ 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	33f3      	adds	r3, #243	@ 0xf3
 800d0a0:	63bb      	str	r3, [r7, #56]	@ 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 800d0a2:	f107 0310 	add.w	r3, r7, #16
 800d0a6:	4619      	mov	r1, r3
 800d0a8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d0aa:	f006 fcee 	bl	8013a8a <strcpy>

		}

		if (((option & 4) == 4) &&
 800d0ae:	78fb      	ldrb	r3, [r7, #3]
 800d0b0:	f003 0304 	and.w	r3, r3, #4
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d030      	beq.n	800d11a <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800d0b8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d0bc:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d12a      	bne.n	800d11a <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d0c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d0cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 800d0d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d0d6:	025b      	lsls	r3, r3, #9
 800d0d8:	643b      	str	r3, [r7, #64]	@ 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d0de:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 800d0e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d011      	beq.n	800d112 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 800d0ee:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d0f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d0f2:	1ad3      	subs	r3, r2, r3
 800d0f4:	64bb      	str	r3, [r7, #72]	@ 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 800d0f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d0f8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800d0fc:	fb02 f303 	mul.w	r3, r2, r3
 800d100:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 800d102:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
					OffsetMicroMeters *= -1;
 800d106:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800d10a:	425b      	negs	r3, r3
 800d10c:	b29b      	uxth	r3, r3
 800d10e:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
			}

			PALDevDataSet(Dev,
 800d112:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	@ 0x5a
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 800d11a:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800d11e:	78fb      	ldrb	r3, [r7, #3]
 800d120:	4313      	orrs	r3, r2
 800d122:	b2db      	uxtb	r3, r3
 800d124:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 800d128:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800d132:	f997 305f 	ldrsb.w	r3, [r7, #95]	@ 0x5f
}
 800d136:	4618      	mov	r0, r3
 800d138:	3760      	adds	r7, #96	@ 0x60
 800d13a:	46bd      	mov	sp, r7
 800d13c:	bd80      	pop	{r7, pc}

0800d13e <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 800d13e:	b480      	push	{r7}
 800d140:	b087      	sub	sp, #28
 800d142:	af00      	add	r7, sp, #0
 800d144:	6078      	str	r0, [r7, #4]
 800d146:	460b      	mov	r3, r1
 800d148:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 800d14a:	f240 6277 	movw	r2, #1655	@ 0x677
 800d14e:	f04f 0300 	mov.w	r3, #0
 800d152:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 800d156:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 800d15a:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 800d15c:	78fb      	ldrb	r3, [r7, #3]
 800d15e:	68fa      	ldr	r2, [r7, #12]
 800d160:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 800d164:	693a      	ldr	r2, [r7, #16]
 800d166:	fb02 f303 	mul.w	r3, r2, r3
 800d16a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 800d16c:	68bb      	ldr	r3, [r7, #8]
}
 800d16e:	4618      	mov	r0, r3
 800d170:	371c      	adds	r7, #28
 800d172:	46bd      	mov	sp, r7
 800d174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d178:	4770      	bx	lr

0800d17a <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 800d17a:	b480      	push	{r7}
 800d17c:	b087      	sub	sp, #28
 800d17e:	af00      	add	r7, sp, #0
 800d180:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800d182:	2300      	movs	r3, #0
 800d184:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800d186:	2300      	movs	r3, #0
 800d188:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800d18a:	2300      	movs	r3, #0
 800d18c:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	2b00      	cmp	r3, #0
 800d192:	d015      	beq.n	800d1c0 <VL53L0X_encode_timeout+0x46>
		ls_byte = timeout_macro_clks - 1;
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	3b01      	subs	r3, #1
 800d198:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800d19a:	e005      	b.n	800d1a8 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800d19c:	693b      	ldr	r3, [r7, #16]
 800d19e:	085b      	lsrs	r3, r3, #1
 800d1a0:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800d1a2:	89fb      	ldrh	r3, [r7, #14]
 800d1a4:	3301      	adds	r3, #1
 800d1a6:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800d1a8:	693b      	ldr	r3, [r7, #16]
 800d1aa:	2bff      	cmp	r3, #255	@ 0xff
 800d1ac:	d8f6      	bhi.n	800d19c <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800d1ae:	89fb      	ldrh	r3, [r7, #14]
 800d1b0:	021b      	lsls	r3, r3, #8
 800d1b2:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800d1b4:	693b      	ldr	r3, [r7, #16]
 800d1b6:	b29b      	uxth	r3, r3
 800d1b8:	b2db      	uxtb	r3, r3
 800d1ba:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800d1bc:	4413      	add	r3, r2
 800d1be:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800d1c0:	8afb      	ldrh	r3, [r7, #22]

}
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	371c      	adds	r7, #28
 800d1c6:	46bd      	mov	sp, r7
 800d1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1cc:	4770      	bx	lr

0800d1ce <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 800d1ce:	b480      	push	{r7}
 800d1d0:	b085      	sub	sp, #20
 800d1d2:	af00      	add	r7, sp, #0
 800d1d4:	4603      	mov	r3, r0
 800d1d6:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800d1d8:	2300      	movs	r3, #0
 800d1da:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800d1dc:	88fb      	ldrh	r3, [r7, #6]
 800d1de:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800d1e0:	88fa      	ldrh	r2, [r7, #6]
 800d1e2:	0a12      	lsrs	r2, r2, #8
 800d1e4:	b292      	uxth	r2, r2
 800d1e6:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800d1e8:	3301      	adds	r3, #1
 800d1ea:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800d1ec:	68fb      	ldr	r3, [r7, #12]
}
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	3714      	adds	r7, #20
 800d1f2:	46bd      	mov	sp, r7
 800d1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f8:	4770      	bx	lr
	...

0800d1fc <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 800d1fc:	b580      	push	{r7, lr}
 800d1fe:	b088      	sub	sp, #32
 800d200:	af00      	add	r7, sp, #0
 800d202:	60f8      	str	r0, [r7, #12]
 800d204:	60b9      	str	r1, [r7, #8]
 800d206:	4613      	mov	r3, r2
 800d208:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800d20a:	2300      	movs	r3, #0
 800d20c:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800d20e:	79fb      	ldrb	r3, [r7, #7]
 800d210:	4619      	mov	r1, r3
 800d212:	68f8      	ldr	r0, [r7, #12]
 800d214:	f7ff ff93 	bl	800d13e <VL53L0X_calc_macro_period_ps>
 800d218:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800d21a:	69bb      	ldr	r3, [r7, #24]
 800d21c:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800d220:	4a0a      	ldr	r2, [pc, #40]	@ (800d24c <VL53L0X_calc_timeout_mclks+0x50>)
 800d222:	fba2 2303 	umull	r2, r3, r2, r3
 800d226:	099b      	lsrs	r3, r3, #6
 800d228:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 800d22a:	68bb      	ldr	r3, [r7, #8]
 800d22c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800d230:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 800d234:	697b      	ldr	r3, [r7, #20]
 800d236:	085b      	lsrs	r3, r3, #1
 800d238:	441a      	add	r2, r3
	timeout_period_mclks =
 800d23a:	697b      	ldr	r3, [r7, #20]
 800d23c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d240:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 800d242:	69fb      	ldr	r3, [r7, #28]
}
 800d244:	4618      	mov	r0, r3
 800d246:	3720      	adds	r7, #32
 800d248:	46bd      	mov	sp, r7
 800d24a:	bd80      	pop	{r7, pc}
 800d24c:	10624dd3 	.word	0x10624dd3

0800d250 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 800d250:	b580      	push	{r7, lr}
 800d252:	b086      	sub	sp, #24
 800d254:	af00      	add	r7, sp, #0
 800d256:	6078      	str	r0, [r7, #4]
 800d258:	460b      	mov	r3, r1
 800d25a:	807b      	strh	r3, [r7, #2]
 800d25c:	4613      	mov	r3, r2
 800d25e:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 800d260:	2300      	movs	r3, #0
 800d262:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800d264:	787b      	ldrb	r3, [r7, #1]
 800d266:	4619      	mov	r1, r3
 800d268:	6878      	ldr	r0, [r7, #4]
 800d26a:	f7ff ff68 	bl	800d13e <VL53L0X_calc_macro_period_ps>
 800d26e:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800d270:	693b      	ldr	r3, [r7, #16]
 800d272:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800d276:	4a0a      	ldr	r2, [pc, #40]	@ (800d2a0 <VL53L0X_calc_timeout_us+0x50>)
 800d278:	fba2 2303 	umull	r2, r3, r2, r3
 800d27c:	099b      	lsrs	r3, r3, #6
 800d27e:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 800d280:	887b      	ldrh	r3, [r7, #2]
 800d282:	68fa      	ldr	r2, [r7, #12]
 800d284:	fb02 f303 	mul.w	r3, r2, r3
 800d288:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
	actual_timeout_period_us =
 800d28c:	4a04      	ldr	r2, [pc, #16]	@ (800d2a0 <VL53L0X_calc_timeout_us+0x50>)
 800d28e:	fba2 2303 	umull	r2, r3, r2, r3
 800d292:	099b      	lsrs	r3, r3, #6
 800d294:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 800d296:	697b      	ldr	r3, [r7, #20]
}
 800d298:	4618      	mov	r0, r3
 800d29a:	3718      	adds	r7, #24
 800d29c:	46bd      	mov	sp, r7
 800d29e:	bd80      	pop	{r7, pc}
 800d2a0:	10624dd3 	.word	0x10624dd3

0800d2a4 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	b08c      	sub	sp, #48	@ 0x30
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	60f8      	str	r0, [r7, #12]
 800d2ac:	460b      	mov	r3, r1
 800d2ae:	607a      	str	r2, [r7, #4]
 800d2b0:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 800d2be:	2300      	movs	r3, #0
 800d2c0:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	84bb      	strh	r3, [r7, #36]	@ 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800d2ca:	7afb      	ldrb	r3, [r7, #11]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d005      	beq.n	800d2dc <get_sequence_step_timeout+0x38>
 800d2d0:	7afb      	ldrb	r3, [r7, #11]
 800d2d2:	2b01      	cmp	r3, #1
 800d2d4:	d002      	beq.n	800d2dc <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800d2d6:	7afb      	ldrb	r3, [r7, #11]
 800d2d8:	2b02      	cmp	r3, #2
 800d2da:	d127      	bne.n	800d32c <get_sequence_step_timeout+0x88>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800d2dc:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 800d2e0:	461a      	mov	r2, r3
 800d2e2:	2100      	movs	r1, #0
 800d2e4:	68f8      	ldr	r0, [r7, #12]
 800d2e6:	f7fd fa09 	bl	800a6fc <VL53L0X_GetVcselPulsePeriod>
 800d2ea:	4603      	mov	r3, r0
 800d2ec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 800d2f0:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d109      	bne.n	800d30c <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 800d2f8:	f107 0320 	add.w	r3, r7, #32
 800d2fc:	461a      	mov	r2, r3
 800d2fe:	2146      	movs	r1, #70	@ 0x46
 800d300:	68f8      	ldr	r0, [r7, #12]
 800d302:	f001 fd89 	bl	800ee18 <VL53L0X_RdByte>
 800d306:	4603      	mov	r3, r0
 800d308:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 800d30c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d310:	4618      	mov	r0, r3
 800d312:	f7ff ff5c 	bl	800d1ce <VL53L0X_decode_timeout>
 800d316:	4603      	mov	r3, r0
 800d318:	847b      	strh	r3, [r7, #34]	@ 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800d31a:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 800d31e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d320:	4619      	mov	r1, r3
 800d322:	68f8      	ldr	r0, [r7, #12]
 800d324:	f7ff ff94 	bl	800d250 <VL53L0X_calc_timeout_us>
 800d328:	62b8      	str	r0, [r7, #40]	@ 0x28
 800d32a:	e092      	b.n	800d452 <get_sequence_step_timeout+0x1ae>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800d32c:	7afb      	ldrb	r3, [r7, #11]
 800d32e:	2b03      	cmp	r3, #3
 800d330:	d135      	bne.n	800d39e <get_sequence_step_timeout+0xfa>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800d332:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 800d336:	461a      	mov	r2, r3
 800d338:	2100      	movs	r1, #0
 800d33a:	68f8      	ldr	r0, [r7, #12]
 800d33c:	f7fd f9de 	bl	800a6fc <VL53L0X_GetVcselPulsePeriod>
 800d340:	4603      	mov	r3, r0
 800d342:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800d346:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	f040 8081 	bne.w	800d452 <get_sequence_step_timeout+0x1ae>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800d350:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 800d354:	461a      	mov	r2, r3
 800d356:	2100      	movs	r1, #0
 800d358:	68f8      	ldr	r0, [r7, #12]
 800d35a:	f7fd f9cf 	bl	800a6fc <VL53L0X_GetVcselPulsePeriod>
 800d35e:	4603      	mov	r3, r0
 800d360:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 800d364:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d109      	bne.n	800d380 <get_sequence_step_timeout+0xdc>
				Status = VL53L0X_RdWord(Dev,
 800d36c:	f107 031e 	add.w	r3, r7, #30
 800d370:	461a      	mov	r2, r3
 800d372:	2151      	movs	r1, #81	@ 0x51
 800d374:	68f8      	ldr	r0, [r7, #12]
 800d376:	f001 fd79 	bl	800ee6c <VL53L0X_RdWord>
 800d37a:	4603      	mov	r3, r0
 800d37c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800d380:	8bfb      	ldrh	r3, [r7, #30]
 800d382:	4618      	mov	r0, r3
 800d384:	f7ff ff23 	bl	800d1ce <VL53L0X_decode_timeout>
 800d388:	4603      	mov	r3, r0
 800d38a:	84fb      	strh	r3, [r7, #38]	@ 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800d38c:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 800d390:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d392:	4619      	mov	r1, r3
 800d394:	68f8      	ldr	r0, [r7, #12]
 800d396:	f7ff ff5b 	bl	800d250 <VL53L0X_calc_timeout_us>
 800d39a:	62b8      	str	r0, [r7, #40]	@ 0x28
 800d39c:	e059      	b.n	800d452 <get_sequence_step_timeout+0x1ae>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800d39e:	7afb      	ldrb	r3, [r7, #11]
 800d3a0:	2b04      	cmp	r3, #4
 800d3a2:	d156      	bne.n	800d452 <get_sequence_step_timeout+0x1ae>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800d3a4:	f107 0314 	add.w	r3, r7, #20
 800d3a8:	4619      	mov	r1, r3
 800d3aa:	68f8      	ldr	r0, [r7, #12]
 800d3ac:	f7fd fab0 	bl	800a910 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 800d3b0:	2300      	movs	r3, #0
 800d3b2:	84fb      	strh	r3, [r7, #38]	@ 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 800d3b4:	7dfb      	ldrb	r3, [r7, #23]
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d01d      	beq.n	800d3f6 <get_sequence_step_timeout+0x152>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800d3ba:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 800d3be:	461a      	mov	r2, r3
 800d3c0:	2100      	movs	r1, #0
 800d3c2:	68f8      	ldr	r0, [r7, #12]
 800d3c4:	f7fd f99a 	bl	800a6fc <VL53L0X_GetVcselPulsePeriod>
 800d3c8:	4603      	mov	r3, r0
 800d3ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 800d3ce:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d10f      	bne.n	800d3f6 <get_sequence_step_timeout+0x152>
				Status = VL53L0X_RdWord(Dev,
 800d3d6:	f107 031e 	add.w	r3, r7, #30
 800d3da:	461a      	mov	r2, r3
 800d3dc:	2151      	movs	r1, #81	@ 0x51
 800d3de:	68f8      	ldr	r0, [r7, #12]
 800d3e0:	f001 fd44 	bl	800ee6c <VL53L0X_RdWord>
 800d3e4:	4603      	mov	r3, r0
 800d3e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800d3ea:	8bfb      	ldrh	r3, [r7, #30]
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	f7ff feee 	bl	800d1ce <VL53L0X_decode_timeout>
 800d3f2:	4603      	mov	r3, r0
 800d3f4:	84fb      	strh	r3, [r7, #38]	@ 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800d3f6:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d109      	bne.n	800d412 <get_sequence_step_timeout+0x16e>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800d3fe:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 800d402:	461a      	mov	r2, r3
 800d404:	2101      	movs	r1, #1
 800d406:	68f8      	ldr	r0, [r7, #12]
 800d408:	f7fd f978 	bl	800a6fc <VL53L0X_GetVcselPulsePeriod>
 800d40c:	4603      	mov	r3, r0
 800d40e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800d412:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800d416:	2b00      	cmp	r3, #0
 800d418:	d10f      	bne.n	800d43a <get_sequence_step_timeout+0x196>
			Status = VL53L0X_RdWord(Dev,
 800d41a:	f107 031c 	add.w	r3, r7, #28
 800d41e:	461a      	mov	r2, r3
 800d420:	2171      	movs	r1, #113	@ 0x71
 800d422:	68f8      	ldr	r0, [r7, #12]
 800d424:	f001 fd22 	bl	800ee6c <VL53L0X_RdWord>
 800d428:	4603      	mov	r3, r0
 800d42a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 800d42e:	8bbb      	ldrh	r3, [r7, #28]
 800d430:	4618      	mov	r0, r3
 800d432:	f7ff fecc 	bl	800d1ce <VL53L0X_decode_timeout>
 800d436:	4603      	mov	r3, r0
 800d438:	84bb      	strh	r3, [r7, #36]	@ 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 800d43a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d43c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d43e:	1ad3      	subs	r3, r2, r3
 800d440:	84bb      	strh	r3, [r7, #36]	@ 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800d442:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 800d446:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d448:	4619      	mov	r1, r3
 800d44a:	68f8      	ldr	r0, [r7, #12]
 800d44c:	f7ff ff00 	bl	800d250 <VL53L0X_calc_timeout_us>
 800d450:	62b8      	str	r0, [r7, #40]	@ 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d456:	601a      	str	r2, [r3, #0]

	return Status;
 800d458:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800d45c:	4618      	mov	r0, r3
 800d45e:	3730      	adds	r7, #48	@ 0x30
 800d460:	46bd      	mov	sp, r7
 800d462:	bd80      	pop	{r7, pc}

0800d464 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 800d464:	b580      	push	{r7, lr}
 800d466:	b08a      	sub	sp, #40	@ 0x28
 800d468:	af00      	add	r7, sp, #0
 800d46a:	60f8      	str	r0, [r7, #12]
 800d46c:	460b      	mov	r3, r1
 800d46e:	607a      	str	r2, [r7, #4]
 800d470:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d472:	2300      	movs	r3, #0
 800d474:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800d478:	7afb      	ldrb	r3, [r7, #11]
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d005      	beq.n	800d48a <set_sequence_step_timeout+0x26>
 800d47e:	7afb      	ldrb	r3, [r7, #11]
 800d480:	2b01      	cmp	r3, #1
 800d482:	d002      	beq.n	800d48a <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800d484:	7afb      	ldrb	r3, [r7, #11]
 800d486:	2b02      	cmp	r3, #2
 800d488:	d138      	bne.n	800d4fc <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800d48a:	f107 031b 	add.w	r3, r7, #27
 800d48e:	461a      	mov	r2, r3
 800d490:	2100      	movs	r1, #0
 800d492:	68f8      	ldr	r0, [r7, #12]
 800d494:	f7fd f932 	bl	800a6fc <VL53L0X_GetVcselPulsePeriod>
 800d498:	4603      	mov	r3, r0
 800d49a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 800d49e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d11a      	bne.n	800d4dc <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 800d4a6:	7efb      	ldrb	r3, [r7, #27]
 800d4a8:	461a      	mov	r2, r3
 800d4aa:	6879      	ldr	r1, [r7, #4]
 800d4ac:	68f8      	ldr	r0, [r7, #12]
 800d4ae:	f7ff fea5 	bl	800d1fc <VL53L0X_calc_timeout_mclks>
 800d4b2:	4603      	mov	r3, r0
 800d4b4:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 800d4b6:	8bbb      	ldrh	r3, [r7, #28]
 800d4b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d4bc:	d903      	bls.n	800d4c6 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 800d4be:	23ff      	movs	r3, #255	@ 0xff
 800d4c0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800d4c4:	e004      	b.n	800d4d0 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 800d4c6:	8bbb      	ldrh	r3, [r7, #28]
 800d4c8:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 800d4ca:	3b01      	subs	r3, #1
 800d4cc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d4d0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d4d4:	b29a      	uxth	r2, r3
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	f8a3 20d8 	strh.w	r2, [r3, #216]	@ 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800d4dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	f040 80ab 	bne.w	800d63c <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 800d4e6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d4ea:	461a      	mov	r2, r3
 800d4ec:	2146      	movs	r1, #70	@ 0x46
 800d4ee:	68f8      	ldr	r0, [r7, #12]
 800d4f0:	f001 fc10 	bl	800ed14 <VL53L0X_WrByte>
 800d4f4:	4603      	mov	r3, r0
 800d4f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 800d4fa:	e09f      	b.n	800d63c <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800d4fc:	7afb      	ldrb	r3, [r7, #11]
 800d4fe:	2b03      	cmp	r3, #3
 800d500:	d135      	bne.n	800d56e <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 800d502:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d506:	2b00      	cmp	r3, #0
 800d508:	d11b      	bne.n	800d542 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800d50a:	f107 031b 	add.w	r3, r7, #27
 800d50e:	461a      	mov	r2, r3
 800d510:	2100      	movs	r1, #0
 800d512:	68f8      	ldr	r0, [r7, #12]
 800d514:	f7fd f8f2 	bl	800a6fc <VL53L0X_GetVcselPulsePeriod>
 800d518:	4603      	mov	r3, r0
 800d51a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800d51e:	7efb      	ldrb	r3, [r7, #27]
 800d520:	461a      	mov	r2, r3
 800d522:	6879      	ldr	r1, [r7, #4]
 800d524:	68f8      	ldr	r0, [r7, #12]
 800d526:	f7ff fe69 	bl	800d1fc <VL53L0X_calc_timeout_mclks>
 800d52a:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 800d52c:	84bb      	strh	r3, [r7, #36]	@ 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 800d52e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d530:	4618      	mov	r0, r3
 800d532:	f7ff fe22 	bl	800d17a <VL53L0X_encode_timeout>
 800d536:	4603      	mov	r3, r0
 800d538:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d53a:	8b3a      	ldrh	r2, [r7, #24]
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	f8a3 20d8 	strh.w	r2, [r3, #216]	@ 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800d542:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d546:	2b00      	cmp	r3, #0
 800d548:	d108      	bne.n	800d55c <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 800d54a:	8b3b      	ldrh	r3, [r7, #24]
 800d54c:	461a      	mov	r2, r3
 800d54e:	2151      	movs	r1, #81	@ 0x51
 800d550:	68f8      	ldr	r0, [r7, #12]
 800d552:	f001 fc03 	bl	800ed5c <VL53L0X_WrWord>
 800d556:	4603      	mov	r3, r0
 800d558:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800d55c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d560:	2b00      	cmp	r3, #0
 800d562:	d16b      	bne.n	800d63c <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	687a      	ldr	r2, [r7, #4]
 800d568:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
 800d56c:	e066      	b.n	800d63c <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800d56e:	7afb      	ldrb	r3, [r7, #11]
 800d570:	2b04      	cmp	r3, #4
 800d572:	d160      	bne.n	800d636 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800d574:	f107 0310 	add.w	r3, r7, #16
 800d578:	4619      	mov	r1, r3
 800d57a:	68f8      	ldr	r0, [r7, #12]
 800d57c:	f7fd f9c8 	bl	800a910 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800d580:	2300      	movs	r3, #0
 800d582:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800d584:	7cfb      	ldrb	r3, [r7, #19]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d01d      	beq.n	800d5c6 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800d58a:	f107 031b 	add.w	r3, r7, #27
 800d58e:	461a      	mov	r2, r3
 800d590:	2100      	movs	r1, #0
 800d592:	68f8      	ldr	r0, [r7, #12]
 800d594:	f7fd f8b2 	bl	800a6fc <VL53L0X_GetVcselPulsePeriod>
 800d598:	4603      	mov	r3, r0
 800d59a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 800d59e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d10f      	bne.n	800d5c6 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 800d5a6:	f107 0318 	add.w	r3, r7, #24
 800d5aa:	461a      	mov	r2, r3
 800d5ac:	2151      	movs	r1, #81	@ 0x51
 800d5ae:	68f8      	ldr	r0, [r7, #12]
 800d5b0:	f001 fc5c 	bl	800ee6c <VL53L0X_RdWord>
 800d5b4:	4603      	mov	r3, r0
 800d5b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 800d5ba:	8b3b      	ldrh	r3, [r7, #24]
 800d5bc:	4618      	mov	r0, r3
 800d5be:	f7ff fe06 	bl	800d1ce <VL53L0X_decode_timeout>
 800d5c2:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800d5c4:	84bb      	strh	r3, [r7, #36]	@ 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800d5c6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d109      	bne.n	800d5e2 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800d5ce:	f107 031b 	add.w	r3, r7, #27
 800d5d2:	461a      	mov	r2, r3
 800d5d4:	2101      	movs	r1, #1
 800d5d6:	68f8      	ldr	r0, [r7, #12]
 800d5d8:	f7fd f890 	bl	800a6fc <VL53L0X_GetVcselPulsePeriod>
 800d5dc:	4603      	mov	r3, r0
 800d5de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800d5e2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d128      	bne.n	800d63c <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800d5ea:	7efb      	ldrb	r3, [r7, #27]
 800d5ec:	461a      	mov	r2, r3
 800d5ee:	6879      	ldr	r1, [r7, #4]
 800d5f0:	68f8      	ldr	r0, [r7, #12]
 800d5f2:	f7ff fe03 	bl	800d1fc <VL53L0X_calc_timeout_mclks>
 800d5f6:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800d5f8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d5fa:	6a3a      	ldr	r2, [r7, #32]
 800d5fc:	4413      	add	r3, r2
 800d5fe:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800d600:	6a38      	ldr	r0, [r7, #32]
 800d602:	f7ff fdba 	bl	800d17a <VL53L0X_encode_timeout>
 800d606:	4603      	mov	r3, r0
 800d608:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 800d60a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d108      	bne.n	800d624 <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800d612:	8bfb      	ldrh	r3, [r7, #30]
 800d614:	461a      	mov	r2, r3
 800d616:	2171      	movs	r1, #113	@ 0x71
 800d618:	68f8      	ldr	r0, [r7, #12]
 800d61a:	f001 fb9f 	bl	800ed5c <VL53L0X_WrWord>
 800d61e:	4603      	mov	r3, r0
 800d620:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800d624:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d107      	bne.n	800d63c <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	687a      	ldr	r2, [r7, #4]
 800d630:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
 800d634:	e002      	b.n	800d63c <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800d636:	23fc      	movs	r3, #252	@ 0xfc
 800d638:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	}
	return Status;
 800d63c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800d640:	4618      	mov	r0, r3
 800d642:	3728      	adds	r7, #40	@ 0x28
 800d644:	46bd      	mov	sp, r7
 800d646:	bd80      	pop	{r7, pc}

0800d648 <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800d648:	b580      	push	{r7, lr}
 800d64a:	b08a      	sub	sp, #40	@ 0x28
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	6078      	str	r0, [r7, #4]
 800d650:	460b      	mov	r3, r1
 800d652:	70fb      	strb	r3, [r7, #3]
 800d654:	4613      	mov	r3, r2
 800d656:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d658:	2300      	movs	r3, #0
 800d65a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 800d65e:	230c      	movs	r3, #12
 800d660:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 800d664:	2312      	movs	r3, #18
 800d666:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 800d66a:	2308      	movs	r3, #8
 800d66c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 800d670:	230e      	movs	r3, #14
 800d672:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 800d676:	2300      	movs	r3, #0
 800d678:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 800d67a:	78bb      	ldrb	r3, [r7, #2]
 800d67c:	f003 0301 	and.w	r3, r3, #1
 800d680:	b2db      	uxtb	r3, r3
 800d682:	2b00      	cmp	r3, #0
 800d684:	d003      	beq.n	800d68e <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800d686:	23fc      	movs	r3, #252	@ 0xfc
 800d688:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d68c:	e020      	b.n	800d6d0 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 800d68e:	78fb      	ldrb	r3, [r7, #3]
 800d690:	2b00      	cmp	r3, #0
 800d692:	d10d      	bne.n	800d6b0 <VL53L0X_set_vcsel_pulse_period+0x68>
 800d694:	78ba      	ldrb	r2, [r7, #2]
 800d696:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d69a:	429a      	cmp	r2, r3
 800d69c:	d304      	bcc.n	800d6a8 <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 800d69e:	78ba      	ldrb	r2, [r7, #2]
 800d6a0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800d6a4:	429a      	cmp	r2, r3
 800d6a6:	d903      	bls.n	800d6b0 <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800d6a8:	23fc      	movs	r3, #252	@ 0xfc
 800d6aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d6ae:	e00f      	b.n	800d6d0 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 800d6b0:	78fb      	ldrb	r3, [r7, #3]
 800d6b2:	2b01      	cmp	r3, #1
 800d6b4:	d10c      	bne.n	800d6d0 <VL53L0X_set_vcsel_pulse_period+0x88>
 800d6b6:	78ba      	ldrb	r2, [r7, #2]
 800d6b8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d6bc:	429a      	cmp	r2, r3
 800d6be:	d304      	bcc.n	800d6ca <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 800d6c0:	78ba      	ldrb	r2, [r7, #2]
 800d6c2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800d6c6:	429a      	cmp	r2, r3
 800d6c8:	d902      	bls.n	800d6d0 <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800d6ca:	23fc      	movs	r3, #252	@ 0xfc
 800d6cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 800d6d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d002      	beq.n	800d6de <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 800d6d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d6dc:	e237      	b.n	800db4e <VL53L0X_set_vcsel_pulse_period+0x506>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 800d6de:	78fb      	ldrb	r3, [r7, #3]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d150      	bne.n	800d786 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 800d6e4:	78bb      	ldrb	r3, [r7, #2]
 800d6e6:	2b0c      	cmp	r3, #12
 800d6e8:	d110      	bne.n	800d70c <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 800d6ea:	2218      	movs	r2, #24
 800d6ec:	2157      	movs	r1, #87	@ 0x57
 800d6ee:	6878      	ldr	r0, [r7, #4]
 800d6f0:	f001 fb10 	bl	800ed14 <VL53L0X_WrByte>
 800d6f4:	4603      	mov	r3, r0
 800d6f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 800d6fa:	2208      	movs	r2, #8
 800d6fc:	2156      	movs	r1, #86	@ 0x56
 800d6fe:	6878      	ldr	r0, [r7, #4]
 800d700:	f001 fb08 	bl	800ed14 <VL53L0X_WrByte>
 800d704:	4603      	mov	r3, r0
 800d706:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d70a:	e17f      	b.n	800da0c <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 800d70c:	78bb      	ldrb	r3, [r7, #2]
 800d70e:	2b0e      	cmp	r3, #14
 800d710:	d110      	bne.n	800d734 <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 800d712:	2230      	movs	r2, #48	@ 0x30
 800d714:	2157      	movs	r1, #87	@ 0x57
 800d716:	6878      	ldr	r0, [r7, #4]
 800d718:	f001 fafc 	bl	800ed14 <VL53L0X_WrByte>
 800d71c:	4603      	mov	r3, r0
 800d71e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 800d722:	2208      	movs	r2, #8
 800d724:	2156      	movs	r1, #86	@ 0x56
 800d726:	6878      	ldr	r0, [r7, #4]
 800d728:	f001 faf4 	bl	800ed14 <VL53L0X_WrByte>
 800d72c:	4603      	mov	r3, r0
 800d72e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d732:	e16b      	b.n	800da0c <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 800d734:	78bb      	ldrb	r3, [r7, #2]
 800d736:	2b10      	cmp	r3, #16
 800d738:	d110      	bne.n	800d75c <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 800d73a:	2240      	movs	r2, #64	@ 0x40
 800d73c:	2157      	movs	r1, #87	@ 0x57
 800d73e:	6878      	ldr	r0, [r7, #4]
 800d740:	f001 fae8 	bl	800ed14 <VL53L0X_WrByte>
 800d744:	4603      	mov	r3, r0
 800d746:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 800d74a:	2208      	movs	r2, #8
 800d74c:	2156      	movs	r1, #86	@ 0x56
 800d74e:	6878      	ldr	r0, [r7, #4]
 800d750:	f001 fae0 	bl	800ed14 <VL53L0X_WrByte>
 800d754:	4603      	mov	r3, r0
 800d756:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d75a:	e157      	b.n	800da0c <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 800d75c:	78bb      	ldrb	r3, [r7, #2]
 800d75e:	2b12      	cmp	r3, #18
 800d760:	f040 8154 	bne.w	800da0c <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800d764:	2250      	movs	r2, #80	@ 0x50
 800d766:	2157      	movs	r1, #87	@ 0x57
 800d768:	6878      	ldr	r0, [r7, #4]
 800d76a:	f001 fad3 	bl	800ed14 <VL53L0X_WrByte>
 800d76e:	4603      	mov	r3, r0
 800d770:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 800d774:	2208      	movs	r2, #8
 800d776:	2156      	movs	r1, #86	@ 0x56
 800d778:	6878      	ldr	r0, [r7, #4]
 800d77a:	f001 facb 	bl	800ed14 <VL53L0X_WrByte>
 800d77e:	4603      	mov	r3, r0
 800d780:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d784:	e142      	b.n	800da0c <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 800d786:	78fb      	ldrb	r3, [r7, #3]
 800d788:	2b01      	cmp	r3, #1
 800d78a:	f040 813f 	bne.w	800da0c <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 800d78e:	78bb      	ldrb	r3, [r7, #2]
 800d790:	2b08      	cmp	r3, #8
 800d792:	d14c      	bne.n	800d82e <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 800d794:	2210      	movs	r2, #16
 800d796:	2148      	movs	r1, #72	@ 0x48
 800d798:	6878      	ldr	r0, [r7, #4]
 800d79a:	f001 fabb 	bl	800ed14 <VL53L0X_WrByte>
 800d79e:	4603      	mov	r3, r0
 800d7a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 800d7a4:	2208      	movs	r2, #8
 800d7a6:	2147      	movs	r1, #71	@ 0x47
 800d7a8:	6878      	ldr	r0, [r7, #4]
 800d7aa:	f001 fab3 	bl	800ed14 <VL53L0X_WrByte>
 800d7ae:	4603      	mov	r3, r0
 800d7b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800d7b4:	2202      	movs	r2, #2
 800d7b6:	2132      	movs	r1, #50	@ 0x32
 800d7b8:	6878      	ldr	r0, [r7, #4]
 800d7ba:	f001 faab 	bl	800ed14 <VL53L0X_WrByte>
 800d7be:	4603      	mov	r3, r0
 800d7c0:	461a      	mov	r2, r3
 800d7c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d7c6:	4313      	orrs	r3, r2
 800d7c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 800d7cc:	220c      	movs	r2, #12
 800d7ce:	2130      	movs	r1, #48	@ 0x30
 800d7d0:	6878      	ldr	r0, [r7, #4]
 800d7d2:	f001 fa9f 	bl	800ed14 <VL53L0X_WrByte>
 800d7d6:	4603      	mov	r3, r0
 800d7d8:	461a      	mov	r2, r3
 800d7da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d7de:	4313      	orrs	r3, r2
 800d7e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800d7e4:	2201      	movs	r2, #1
 800d7e6:	21ff      	movs	r1, #255	@ 0xff
 800d7e8:	6878      	ldr	r0, [r7, #4]
 800d7ea:	f001 fa93 	bl	800ed14 <VL53L0X_WrByte>
 800d7ee:	4603      	mov	r3, r0
 800d7f0:	461a      	mov	r2, r3
 800d7f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d7f6:	4313      	orrs	r3, r2
 800d7f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Status |= VL53L0X_WrByte(Dev,
 800d7fc:	2230      	movs	r2, #48	@ 0x30
 800d7fe:	2130      	movs	r1, #48	@ 0x30
 800d800:	6878      	ldr	r0, [r7, #4]
 800d802:	f001 fa87 	bl	800ed14 <VL53L0X_WrByte>
 800d806:	4603      	mov	r3, r0
 800d808:	461a      	mov	r2, r3
 800d80a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d80e:	4313      	orrs	r3, r2
 800d810:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800d814:	2200      	movs	r2, #0
 800d816:	21ff      	movs	r1, #255	@ 0xff
 800d818:	6878      	ldr	r0, [r7, #4]
 800d81a:	f001 fa7b 	bl	800ed14 <VL53L0X_WrByte>
 800d81e:	4603      	mov	r3, r0
 800d820:	461a      	mov	r2, r3
 800d822:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d826:	4313      	orrs	r3, r2
 800d828:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d82c:	e0ee      	b.n	800da0c <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 800d82e:	78bb      	ldrb	r3, [r7, #2]
 800d830:	2b0a      	cmp	r3, #10
 800d832:	d14c      	bne.n	800d8ce <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 800d834:	2228      	movs	r2, #40	@ 0x28
 800d836:	2148      	movs	r1, #72	@ 0x48
 800d838:	6878      	ldr	r0, [r7, #4]
 800d83a:	f001 fa6b 	bl	800ed14 <VL53L0X_WrByte>
 800d83e:	4603      	mov	r3, r0
 800d840:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 800d844:	2208      	movs	r2, #8
 800d846:	2147      	movs	r1, #71	@ 0x47
 800d848:	6878      	ldr	r0, [r7, #4]
 800d84a:	f001 fa63 	bl	800ed14 <VL53L0X_WrByte>
 800d84e:	4603      	mov	r3, r0
 800d850:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800d854:	2203      	movs	r2, #3
 800d856:	2132      	movs	r1, #50	@ 0x32
 800d858:	6878      	ldr	r0, [r7, #4]
 800d85a:	f001 fa5b 	bl	800ed14 <VL53L0X_WrByte>
 800d85e:	4603      	mov	r3, r0
 800d860:	461a      	mov	r2, r3
 800d862:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d866:	4313      	orrs	r3, r2
 800d868:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800d86c:	2209      	movs	r2, #9
 800d86e:	2130      	movs	r1, #48	@ 0x30
 800d870:	6878      	ldr	r0, [r7, #4]
 800d872:	f001 fa4f 	bl	800ed14 <VL53L0X_WrByte>
 800d876:	4603      	mov	r3, r0
 800d878:	461a      	mov	r2, r3
 800d87a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d87e:	4313      	orrs	r3, r2
 800d880:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800d884:	2201      	movs	r2, #1
 800d886:	21ff      	movs	r1, #255	@ 0xff
 800d888:	6878      	ldr	r0, [r7, #4]
 800d88a:	f001 fa43 	bl	800ed14 <VL53L0X_WrByte>
 800d88e:	4603      	mov	r3, r0
 800d890:	461a      	mov	r2, r3
 800d892:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d896:	4313      	orrs	r3, r2
 800d898:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Status |= VL53L0X_WrByte(Dev,
 800d89c:	2220      	movs	r2, #32
 800d89e:	2130      	movs	r1, #48	@ 0x30
 800d8a0:	6878      	ldr	r0, [r7, #4]
 800d8a2:	f001 fa37 	bl	800ed14 <VL53L0X_WrByte>
 800d8a6:	4603      	mov	r3, r0
 800d8a8:	461a      	mov	r2, r3
 800d8aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d8ae:	4313      	orrs	r3, r2
 800d8b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800d8b4:	2200      	movs	r2, #0
 800d8b6:	21ff      	movs	r1, #255	@ 0xff
 800d8b8:	6878      	ldr	r0, [r7, #4]
 800d8ba:	f001 fa2b 	bl	800ed14 <VL53L0X_WrByte>
 800d8be:	4603      	mov	r3, r0
 800d8c0:	461a      	mov	r2, r3
 800d8c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d8c6:	4313      	orrs	r3, r2
 800d8c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d8cc:	e09e      	b.n	800da0c <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 800d8ce:	78bb      	ldrb	r3, [r7, #2]
 800d8d0:	2b0c      	cmp	r3, #12
 800d8d2:	d14c      	bne.n	800d96e <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 800d8d4:	2238      	movs	r2, #56	@ 0x38
 800d8d6:	2148      	movs	r1, #72	@ 0x48
 800d8d8:	6878      	ldr	r0, [r7, #4]
 800d8da:	f001 fa1b 	bl	800ed14 <VL53L0X_WrByte>
 800d8de:	4603      	mov	r3, r0
 800d8e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 800d8e4:	2208      	movs	r2, #8
 800d8e6:	2147      	movs	r1, #71	@ 0x47
 800d8e8:	6878      	ldr	r0, [r7, #4]
 800d8ea:	f001 fa13 	bl	800ed14 <VL53L0X_WrByte>
 800d8ee:	4603      	mov	r3, r0
 800d8f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800d8f4:	2203      	movs	r2, #3
 800d8f6:	2132      	movs	r1, #50	@ 0x32
 800d8f8:	6878      	ldr	r0, [r7, #4]
 800d8fa:	f001 fa0b 	bl	800ed14 <VL53L0X_WrByte>
 800d8fe:	4603      	mov	r3, r0
 800d900:	461a      	mov	r2, r3
 800d902:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d906:	4313      	orrs	r3, r2
 800d908:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800d90c:	2208      	movs	r2, #8
 800d90e:	2130      	movs	r1, #48	@ 0x30
 800d910:	6878      	ldr	r0, [r7, #4]
 800d912:	f001 f9ff 	bl	800ed14 <VL53L0X_WrByte>
 800d916:	4603      	mov	r3, r0
 800d918:	461a      	mov	r2, r3
 800d91a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d91e:	4313      	orrs	r3, r2
 800d920:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800d924:	2201      	movs	r2, #1
 800d926:	21ff      	movs	r1, #255	@ 0xff
 800d928:	6878      	ldr	r0, [r7, #4]
 800d92a:	f001 f9f3 	bl	800ed14 <VL53L0X_WrByte>
 800d92e:	4603      	mov	r3, r0
 800d930:	461a      	mov	r2, r3
 800d932:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d936:	4313      	orrs	r3, r2
 800d938:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Status |= VL53L0X_WrByte(Dev,
 800d93c:	2220      	movs	r2, #32
 800d93e:	2130      	movs	r1, #48	@ 0x30
 800d940:	6878      	ldr	r0, [r7, #4]
 800d942:	f001 f9e7 	bl	800ed14 <VL53L0X_WrByte>
 800d946:	4603      	mov	r3, r0
 800d948:	461a      	mov	r2, r3
 800d94a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d94e:	4313      	orrs	r3, r2
 800d950:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800d954:	2200      	movs	r2, #0
 800d956:	21ff      	movs	r1, #255	@ 0xff
 800d958:	6878      	ldr	r0, [r7, #4]
 800d95a:	f001 f9db 	bl	800ed14 <VL53L0X_WrByte>
 800d95e:	4603      	mov	r3, r0
 800d960:	461a      	mov	r2, r3
 800d962:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d966:	4313      	orrs	r3, r2
 800d968:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d96c:	e04e      	b.n	800da0c <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 800d96e:	78bb      	ldrb	r3, [r7, #2]
 800d970:	2b0e      	cmp	r3, #14
 800d972:	d14b      	bne.n	800da0c <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800d974:	2248      	movs	r2, #72	@ 0x48
 800d976:	2148      	movs	r1, #72	@ 0x48
 800d978:	6878      	ldr	r0, [r7, #4]
 800d97a:	f001 f9cb 	bl	800ed14 <VL53L0X_WrByte>
 800d97e:	4603      	mov	r3, r0
 800d980:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 800d984:	2208      	movs	r2, #8
 800d986:	2147      	movs	r1, #71	@ 0x47
 800d988:	6878      	ldr	r0, [r7, #4]
 800d98a:	f001 f9c3 	bl	800ed14 <VL53L0X_WrByte>
 800d98e:	4603      	mov	r3, r0
 800d990:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800d994:	2203      	movs	r2, #3
 800d996:	2132      	movs	r1, #50	@ 0x32
 800d998:	6878      	ldr	r0, [r7, #4]
 800d99a:	f001 f9bb 	bl	800ed14 <VL53L0X_WrByte>
 800d99e:	4603      	mov	r3, r0
 800d9a0:	461a      	mov	r2, r3
 800d9a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d9a6:	4313      	orrs	r3, r2
 800d9a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800d9ac:	2207      	movs	r2, #7
 800d9ae:	2130      	movs	r1, #48	@ 0x30
 800d9b0:	6878      	ldr	r0, [r7, #4]
 800d9b2:	f001 f9af 	bl	800ed14 <VL53L0X_WrByte>
 800d9b6:	4603      	mov	r3, r0
 800d9b8:	461a      	mov	r2, r3
 800d9ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d9be:	4313      	orrs	r3, r2
 800d9c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800d9c4:	2201      	movs	r2, #1
 800d9c6:	21ff      	movs	r1, #255	@ 0xff
 800d9c8:	6878      	ldr	r0, [r7, #4]
 800d9ca:	f001 f9a3 	bl	800ed14 <VL53L0X_WrByte>
 800d9ce:	4603      	mov	r3, r0
 800d9d0:	461a      	mov	r2, r3
 800d9d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d9d6:	4313      	orrs	r3, r2
 800d9d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Status |= VL53L0X_WrByte(Dev,
 800d9dc:	2220      	movs	r2, #32
 800d9de:	2130      	movs	r1, #48	@ 0x30
 800d9e0:	6878      	ldr	r0, [r7, #4]
 800d9e2:	f001 f997 	bl	800ed14 <VL53L0X_WrByte>
 800d9e6:	4603      	mov	r3, r0
 800d9e8:	461a      	mov	r2, r3
 800d9ea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d9ee:	4313      	orrs	r3, r2
 800d9f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800d9f4:	2200      	movs	r2, #0
 800d9f6:	21ff      	movs	r1, #255	@ 0xff
 800d9f8:	6878      	ldr	r0, [r7, #4]
 800d9fa:	f001 f98b 	bl	800ed14 <VL53L0X_WrByte>
 800d9fe:	4603      	mov	r3, r0
 800da00:	461a      	mov	r2, r3
 800da02:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800da06:	4313      	orrs	r3, r2
 800da08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 800da0c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800da10:	2b00      	cmp	r3, #0
 800da12:	d17e      	bne.n	800db12 <VL53L0X_set_vcsel_pulse_period+0x4ca>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 800da14:	78bb      	ldrb	r3, [r7, #2]
 800da16:	4618      	mov	r0, r3
 800da18:	f7fe fe3a 	bl	800c690 <VL53L0X_encode_vcsel_period>
 800da1c:	4603      	mov	r3, r0
 800da1e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 800da22:	78fb      	ldrb	r3, [r7, #3]
 800da24:	2b00      	cmp	r3, #0
 800da26:	d002      	beq.n	800da2e <VL53L0X_set_vcsel_pulse_period+0x3e6>
 800da28:	2b01      	cmp	r3, #1
 800da2a:	d045      	beq.n	800dab8 <VL53L0X_set_vcsel_pulse_period+0x470>
 800da2c:	e06e      	b.n	800db0c <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800da2e:	f107 0314 	add.w	r3, r7, #20
 800da32:	461a      	mov	r2, r3
 800da34:	2103      	movs	r1, #3
 800da36:	6878      	ldr	r0, [r7, #4]
 800da38:	f7ff fc34 	bl	800d2a4 <get_sequence_step_timeout>
 800da3c:	4603      	mov	r3, r0
 800da3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800da42:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800da46:	2b00      	cmp	r3, #0
 800da48:	d109      	bne.n	800da5e <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 800da4a:	f107 0310 	add.w	r3, r7, #16
 800da4e:	461a      	mov	r2, r3
 800da50:	2102      	movs	r1, #2
 800da52:	6878      	ldr	r0, [r7, #4]
 800da54:	f7ff fc26 	bl	800d2a4 <get_sequence_step_timeout>
 800da58:	4603      	mov	r3, r0
 800da5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800da5e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800da62:	2b00      	cmp	r3, #0
 800da64:	d109      	bne.n	800da7a <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 800da66:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800da6a:	461a      	mov	r2, r3
 800da6c:	2150      	movs	r1, #80	@ 0x50
 800da6e:	6878      	ldr	r0, [r7, #4]
 800da70:	f001 f950 	bl	800ed14 <VL53L0X_WrByte>
 800da74:	4603      	mov	r3, r0
 800da76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800da7a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d108      	bne.n	800da94 <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 800da82:	697b      	ldr	r3, [r7, #20]
 800da84:	461a      	mov	r2, r3
 800da86:	2103      	movs	r1, #3
 800da88:	6878      	ldr	r0, [r7, #4]
 800da8a:	f7ff fceb 	bl	800d464 <set_sequence_step_timeout>
 800da8e:	4603      	mov	r3, r0
 800da90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 800da94:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d108      	bne.n	800daae <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 800da9c:	693b      	ldr	r3, [r7, #16]
 800da9e:	461a      	mov	r2, r3
 800daa0:	2102      	movs	r1, #2
 800daa2:	6878      	ldr	r0, [r7, #4]
 800daa4:	f7ff fcde 	bl	800d464 <set_sequence_step_timeout>
 800daa8:	4603      	mov	r3, r0
 800daaa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	78ba      	ldrb	r2, [r7, #2]
 800dab2:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800dab6:	e02c      	b.n	800db12 <VL53L0X_set_vcsel_pulse_period+0x4ca>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800dab8:	f107 0318 	add.w	r3, r7, #24
 800dabc:	461a      	mov	r2, r3
 800dabe:	2104      	movs	r1, #4
 800dac0:	6878      	ldr	r0, [r7, #4]
 800dac2:	f7ff fbef 	bl	800d2a4 <get_sequence_step_timeout>
 800dac6:	4603      	mov	r3, r0
 800dac8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800dacc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d109      	bne.n	800dae8 <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 800dad4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800dad8:	461a      	mov	r2, r3
 800dada:	2170      	movs	r1, #112	@ 0x70
 800dadc:	6878      	ldr	r0, [r7, #4]
 800dade:	f001 f919 	bl	800ed14 <VL53L0X_WrByte>
 800dae2:	4603      	mov	r3, r0
 800dae4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800dae8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800daec:	2b00      	cmp	r3, #0
 800daee:	d108      	bne.n	800db02 <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 800daf0:	69bb      	ldr	r3, [r7, #24]
 800daf2:	461a      	mov	r2, r3
 800daf4:	2104      	movs	r1, #4
 800daf6:	6878      	ldr	r0, [r7, #4]
 800daf8:	f7ff fcb4 	bl	800d464 <set_sequence_step_timeout>
 800dafc:	4603      	mov	r3, r0
 800dafe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	78ba      	ldrb	r2, [r7, #2]
 800db06:	f883 20e0 	strb.w	r2, [r3, #224]	@ 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800db0a:	e002      	b.n	800db12 <VL53L0X_set_vcsel_pulse_period+0x4ca>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800db0c:	23fc      	movs	r3, #252	@ 0xfc
 800db0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		}
	}

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 800db12:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800db16:	2b00      	cmp	r3, #0
 800db18:	d109      	bne.n	800db2e <VL53L0X_set_vcsel_pulse_period+0x4e6>
		VL53L0X_GETPARAMETERFIELD(Dev,
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	695b      	ldr	r3, [r3, #20]
 800db1e:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800db20:	69f9      	ldr	r1, [r7, #28]
 800db22:	6878      	ldr	r0, [r7, #4]
 800db24:	f7fc fdac 	bl	800a680 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800db28:	4603      	mov	r3, r0
 800db2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 800db2e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800db32:	2b00      	cmp	r3, #0
 800db34:	d109      	bne.n	800db4a <VL53L0X_set_vcsel_pulse_period+0x502>
		Status = VL53L0X_perform_phase_calibration(
 800db36:	f107 010f 	add.w	r1, r7, #15
 800db3a:	2301      	movs	r3, #1
 800db3c:	2200      	movs	r2, #0
 800db3e:	6878      	ldr	r0, [r7, #4]
 800db40:	f7fe fc9e 	bl	800c480 <VL53L0X_perform_phase_calibration>
 800db44:	4603      	mov	r3, r0
 800db46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 800db4a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800db4e:	4618      	mov	r0, r3
 800db50:	3728      	adds	r7, #40	@ 0x28
 800db52:	46bd      	mov	sp, r7
 800db54:	bd80      	pop	{r7, pc}

0800db56 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800db56:	b580      	push	{r7, lr}
 800db58:	b086      	sub	sp, #24
 800db5a:	af00      	add	r7, sp, #0
 800db5c:	60f8      	str	r0, [r7, #12]
 800db5e:	460b      	mov	r3, r1
 800db60:	607a      	str	r2, [r7, #4]
 800db62:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800db64:	2300      	movs	r3, #0
 800db66:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800db68:	7afb      	ldrb	r3, [r7, #11]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d002      	beq.n	800db74 <VL53L0X_get_vcsel_pulse_period+0x1e>
 800db6e:	2b01      	cmp	r3, #1
 800db70:	d00a      	beq.n	800db88 <VL53L0X_get_vcsel_pulse_period+0x32>
 800db72:	e013      	b.n	800db9c <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800db74:	f107 0316 	add.w	r3, r7, #22
 800db78:	461a      	mov	r2, r3
 800db7a:	2150      	movs	r1, #80	@ 0x50
 800db7c:	68f8      	ldr	r0, [r7, #12]
 800db7e:	f001 f94b 	bl	800ee18 <VL53L0X_RdByte>
 800db82:	4603      	mov	r3, r0
 800db84:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800db86:	e00b      	b.n	800dba0 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800db88:	f107 0316 	add.w	r3, r7, #22
 800db8c:	461a      	mov	r2, r3
 800db8e:	2170      	movs	r1, #112	@ 0x70
 800db90:	68f8      	ldr	r0, [r7, #12]
 800db92:	f001 f941 	bl	800ee18 <VL53L0X_RdByte>
 800db96:	4603      	mov	r3, r0
 800db98:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800db9a:	e001      	b.n	800dba0 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800db9c:	23fc      	movs	r3, #252	@ 0xfc
 800db9e:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800dba0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d107      	bne.n	800dbb8 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800dba8:	7dbb      	ldrb	r3, [r7, #22]
 800dbaa:	4618      	mov	r0, r3
 800dbac:	f7fe fd5d 	bl	800c66a <VL53L0X_decode_vcsel_period>
 800dbb0:	4603      	mov	r3, r0
 800dbb2:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	701a      	strb	r2, [r3, #0]

	return Status;
 800dbb8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	3718      	adds	r7, #24
 800dbc0:	46bd      	mov	sp, r7
 800dbc2:	bd80      	pop	{r7, pc}

0800dbc4 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800dbc4:	b580      	push	{r7, lr}
 800dbc6:	b092      	sub	sp, #72	@ 0x48
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	6078      	str	r0, [r7, #4]
 800dbcc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800dbce:	2300      	movs	r3, #0
 800dbd0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800dbd4:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800dbd8:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800dbda:	f240 7376 	movw	r3, #1910	@ 0x776
 800dbde:	63fb      	str	r3, [r7, #60]	@ 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800dbe0:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800dbe4:	63bb      	str	r3, [r7, #56]	@ 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800dbe6:	f44f 7325 	mov.w	r3, #660	@ 0x294
 800dbea:	637b      	str	r3, [r7, #52]	@ 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 800dbec:	f240 234e 	movw	r3, #590	@ 0x24e
 800dbf0:	633b      	str	r3, [r7, #48]	@ 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 800dbf2:	f240 23b2 	movw	r3, #690	@ 0x2b2
 800dbf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800dbf8:	f44f 7325 	mov.w	r3, #660	@ 0x294
 800dbfc:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800dbfe:	f240 2326 	movw	r3, #550	@ 0x226
 800dc02:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800dc04:	2300      	movs	r3, #0
 800dc06:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 800dc08:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800dc0c:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 800dc0e:	2300      	movs	r3, #0
 800dc10:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 800dc12:	683a      	ldr	r2, [r7, #0]
 800dc14:	6a3b      	ldr	r3, [r7, #32]
 800dc16:	429a      	cmp	r2, r3
 800dc18:	d205      	bcs.n	800dc26 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800dc1a:	23fc      	movs	r3, #252	@ 0xfc
 800dc1c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		return Status;
 800dc20:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800dc24:	e0aa      	b.n	800dd7c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800dc26:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800dc28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc2a:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 800dc2c:	683a      	ldr	r2, [r7, #0]
 800dc2e:	1ad3      	subs	r3, r2, r3
 800dc30:	643b      	str	r3, [r7, #64]	@ 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800dc32:	f107 0314 	add.w	r3, r7, #20
 800dc36:	4619      	mov	r1, r3
 800dc38:	6878      	ldr	r0, [r7, #4]
 800dc3a:	f7fc fe69 	bl	800a910 <VL53L0X_GetSequenceStepEnables>
 800dc3e:	4603      	mov	r3, r0
 800dc40:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 800dc44:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d15b      	bne.n	800dd04 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 800dc4c:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d105      	bne.n	800dc5e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 800dc52:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d102      	bne.n	800dc5e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 800dc58:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d052      	beq.n	800dd04 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800dc5e:	f107 0310 	add.w	r3, r7, #16
 800dc62:	461a      	mov	r2, r3
 800dc64:	2102      	movs	r1, #2
 800dc66:	6878      	ldr	r0, [r7, #4]
 800dc68:	f7ff fb1c 	bl	800d2a4 <get_sequence_step_timeout>
 800dc6c:	4603      	mov	r3, r0
 800dc6e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800dc72:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d002      	beq.n	800dc80 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 800dc7a:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800dc7e:	e07d      	b.n	800dd7c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800dc80:	7d3b      	ldrb	r3, [r7, #20]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d00f      	beq.n	800dca6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800dc86:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800dc88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dc8a:	4413      	add	r3, r2
 800dc8c:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800dc8e:	69fa      	ldr	r2, [r7, #28]
 800dc90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dc92:	429a      	cmp	r2, r3
 800dc94:	d204      	bcs.n	800dca0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800dc96:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dc98:	69fb      	ldr	r3, [r7, #28]
 800dc9a:	1ad3      	subs	r3, r2, r3
 800dc9c:	643b      	str	r3, [r7, #64]	@ 0x40
 800dc9e:	e002      	b.n	800dca6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800dca0:	23fc      	movs	r3, #252	@ 0xfc
 800dca2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800dca6:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d002      	beq.n	800dcb4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800dcae:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800dcb2:	e063      	b.n	800dd7c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800dcb4:	7dbb      	ldrb	r3, [r7, #22]
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d011      	beq.n	800dcde <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800dcba:	693a      	ldr	r2, [r7, #16]
 800dcbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcbe:	4413      	add	r3, r2
 800dcc0:	005b      	lsls	r3, r3, #1
 800dcc2:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800dcc4:	69fa      	ldr	r2, [r7, #28]
 800dcc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dcc8:	429a      	cmp	r2, r3
 800dcca:	d204      	bcs.n	800dcd6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800dccc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dcce:	69fb      	ldr	r3, [r7, #28]
 800dcd0:	1ad3      	subs	r3, r2, r3
 800dcd2:	643b      	str	r3, [r7, #64]	@ 0x40
 800dcd4:	e016      	b.n	800dd04 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800dcd6:	23fc      	movs	r3, #252	@ 0xfc
 800dcd8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800dcdc:	e012      	b.n	800dd04 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800dcde:	7d7b      	ldrb	r3, [r7, #21]
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d00f      	beq.n	800dd04 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800dce4:	693b      	ldr	r3, [r7, #16]
 800dce6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dce8:	4413      	add	r3, r2
 800dcea:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800dcec:	69fa      	ldr	r2, [r7, #28]
 800dcee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dcf0:	429a      	cmp	r2, r3
 800dcf2:	d204      	bcs.n	800dcfe <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800dcf4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dcf6:	69fb      	ldr	r3, [r7, #28]
 800dcf8:	1ad3      	subs	r3, r2, r3
 800dcfa:	643b      	str	r3, [r7, #64]	@ 0x40
 800dcfc:	e002      	b.n	800dd04 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800dcfe:	23fc      	movs	r3, #252	@ 0xfc
 800dd00:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800dd04:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d002      	beq.n	800dd12 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 800dd0c:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800dd10:	e034      	b.n	800dd7c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800dd12:	7dfb      	ldrb	r3, [r7, #23]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d019      	beq.n	800dd4c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800dd18:	f107 030c 	add.w	r3, r7, #12
 800dd1c:	461a      	mov	r2, r3
 800dd1e:	2103      	movs	r1, #3
 800dd20:	6878      	ldr	r0, [r7, #4]
 800dd22:	f7ff fabf 	bl	800d2a4 <get_sequence_step_timeout>
 800dd26:	4603      	mov	r3, r0
 800dd28:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dd30:	4413      	add	r3, r2
 800dd32:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800dd34:	69fa      	ldr	r2, [r7, #28]
 800dd36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dd38:	429a      	cmp	r2, r3
 800dd3a:	d204      	bcs.n	800dd46 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800dd3c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dd3e:	69fb      	ldr	r3, [r7, #28]
 800dd40:	1ad3      	subs	r3, r2, r3
 800dd42:	643b      	str	r3, [r7, #64]	@ 0x40
 800dd44:	e002      	b.n	800dd4c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800dd46:	23fc      	movs	r3, #252	@ 0xfc
 800dd48:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800dd4c:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d111      	bne.n	800dd78 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800dd54:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d00e      	beq.n	800dd78 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 800dd5a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dd5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd5e:	1ad3      	subs	r3, r2, r3
 800dd60:	643b      	str	r3, [r7, #64]	@ 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800dd62:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dd64:	2104      	movs	r1, #4
 800dd66:	6878      	ldr	r0, [r7, #4]
 800dd68:	f7ff fb7c 	bl	800d464 <set_sequence_step_timeout>
 800dd6c:	4603      	mov	r3, r0
 800dd6e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	683a      	ldr	r2, [r7, #0]
 800dd76:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800dd78:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
}
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	3748      	adds	r7, #72	@ 0x48
 800dd80:	46bd      	mov	sp, r7
 800dd82:	bd80      	pop	{r7, pc}

0800dd84 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800dd84:	b580      	push	{r7, lr}
 800dd86:	b090      	sub	sp, #64	@ 0x40
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	6078      	str	r0, [r7, #4]
 800dd8c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800dd8e:	2300      	movs	r3, #0
 800dd90:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800dd94:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800dd98:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800dd9a:	f240 7376 	movw	r3, #1910	@ 0x776
 800dd9e:	63bb      	str	r3, [r7, #56]	@ 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800dda0:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800dda4:	637b      	str	r3, [r7, #52]	@ 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800dda6:	f44f 7325 	mov.w	r3, #660	@ 0x294
 800ddaa:	633b      	str	r3, [r7, #48]	@ 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800ddac:	f240 234e 	movw	r3, #590	@ 0x24e
 800ddb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800ddb2:	f240 23b2 	movw	r3, #690	@ 0x2b2
 800ddb6:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800ddb8:	f44f 7325 	mov.w	r3, #660	@ 0x294
 800ddbc:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800ddbe:	f240 2326 	movw	r3, #550	@ 0x226
 800ddc2:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800ddc4:	2300      	movs	r3, #0
 800ddc6:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800ddc8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ddca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ddcc:	441a      	add	r2, r3
 800ddce:	683b      	ldr	r3, [r7, #0]
 800ddd0:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800ddd2:	f107 0318 	add.w	r3, r7, #24
 800ddd6:	4619      	mov	r1, r3
 800ddd8:	6878      	ldr	r0, [r7, #4]
 800ddda:	f7fc fd99 	bl	800a910 <VL53L0X_GetSequenceStepEnables>
 800ddde:	4603      	mov	r3, r0
 800dde0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800dde4:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d002      	beq.n	800ddf2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800ddec:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800ddf0:	e075      	b.n	800dede <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800ddf2:	7e3b      	ldrb	r3, [r7, #24]
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d105      	bne.n	800de04 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800ddf8:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d102      	bne.n	800de04 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800ddfe:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800de00:	2b00      	cmp	r3, #0
 800de02:	d030      	beq.n	800de66 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800de04:	f107 0310 	add.w	r3, r7, #16
 800de08:	461a      	mov	r2, r3
 800de0a:	2102      	movs	r1, #2
 800de0c:	6878      	ldr	r0, [r7, #4]
 800de0e:	f7ff fa49 	bl	800d2a4 <get_sequence_step_timeout>
 800de12:	4603      	mov	r3, r0
 800de14:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800de18:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d122      	bne.n	800de66 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800de20:	7e3b      	ldrb	r3, [r7, #24]
 800de22:	2b00      	cmp	r3, #0
 800de24:	d007      	beq.n	800de36 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800de26:	683b      	ldr	r3, [r7, #0]
 800de28:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800de2a:	6939      	ldr	r1, [r7, #16]
 800de2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de2e:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800de30:	441a      	add	r2, r3
 800de32:	683b      	ldr	r3, [r7, #0]
 800de34:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800de36:	7ebb      	ldrb	r3, [r7, #26]
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d009      	beq.n	800de50 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800de3c:	683b      	ldr	r3, [r7, #0]
 800de3e:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800de40:	6939      	ldr	r1, [r7, #16]
 800de42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de44:	440b      	add	r3, r1
 800de46:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800de48:	441a      	add	r2, r3
 800de4a:	683b      	ldr	r3, [r7, #0]
 800de4c:	601a      	str	r2, [r3, #0]
 800de4e:	e00a      	b.n	800de66 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800de50:	7e7b      	ldrb	r3, [r7, #25]
 800de52:	2b00      	cmp	r3, #0
 800de54:	d007      	beq.n	800de66 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800de56:	683b      	ldr	r3, [r7, #0]
 800de58:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800de5a:	6939      	ldr	r1, [r7, #16]
 800de5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de5e:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800de60:	441a      	add	r2, r3
 800de62:	683b      	ldr	r3, [r7, #0]
 800de64:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800de66:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d114      	bne.n	800de98 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800de6e:	7efb      	ldrb	r3, [r7, #27]
 800de70:	2b00      	cmp	r3, #0
 800de72:	d011      	beq.n	800de98 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800de74:	f107 030c 	add.w	r3, r7, #12
 800de78:	461a      	mov	r2, r3
 800de7a:	2103      	movs	r1, #3
 800de7c:	6878      	ldr	r0, [r7, #4]
 800de7e:	f7ff fa11 	bl	800d2a4 <get_sequence_step_timeout>
 800de82:	4603      	mov	r3, r0
 800de84:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800de88:	683b      	ldr	r3, [r7, #0]
 800de8a:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800de8c:	68f9      	ldr	r1, [r7, #12]
 800de8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de90:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800de92:	441a      	add	r2, r3
 800de94:	683b      	ldr	r3, [r7, #0]
 800de96:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800de98:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d114      	bne.n	800deca <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800dea0:	7f3b      	ldrb	r3, [r7, #28]
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d011      	beq.n	800deca <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800dea6:	f107 0314 	add.w	r3, r7, #20
 800deaa:	461a      	mov	r2, r3
 800deac:	2104      	movs	r1, #4
 800deae:	6878      	ldr	r0, [r7, #4]
 800deb0:	f7ff f9f8 	bl	800d2a4 <get_sequence_step_timeout>
 800deb4:	4603      	mov	r3, r0
 800deb6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800deba:	683b      	ldr	r3, [r7, #0]
 800debc:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800debe:	6979      	ldr	r1, [r7, #20]
 800dec0:	6a3b      	ldr	r3, [r7, #32]
 800dec2:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800dec4:	441a      	add	r2, r3
 800dec6:	683b      	ldr	r3, [r7, #0]
 800dec8:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800deca:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d103      	bne.n	800deda <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800ded2:	683b      	ldr	r3, [r7, #0]
 800ded4:	681a      	ldr	r2, [r3, #0]
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800deda:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800dede:	4618      	mov	r0, r3
 800dee0:	3740      	adds	r7, #64	@ 0x40
 800dee2:	46bd      	mov	sp, r7
 800dee4:	bd80      	pop	{r7, pc}
	...

0800dee8 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800dee8:	b580      	push	{r7, lr}
 800deea:	b088      	sub	sp, #32
 800deec:	af00      	add	r7, sp, #0
 800deee:	6078      	str	r0, [r7, #4]
 800def0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800def2:	2300      	movs	r3, #0
 800def4:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800def6:	2300      	movs	r3, #0
 800def8:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800defa:	e0c6      	b.n	800e08a <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800defc:	697b      	ldr	r3, [r7, #20]
 800defe:	683a      	ldr	r2, [r7, #0]
 800df00:	4413      	add	r3, r2
 800df02:	781b      	ldrb	r3, [r3, #0]
 800df04:	74fb      	strb	r3, [r7, #19]
		Index++;
 800df06:	697b      	ldr	r3, [r7, #20]
 800df08:	3301      	adds	r3, #1
 800df0a:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 800df0c:	7cfb      	ldrb	r3, [r7, #19]
 800df0e:	2bff      	cmp	r3, #255	@ 0xff
 800df10:	f040 808d 	bne.w	800e02e <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800df14:	697b      	ldr	r3, [r7, #20]
 800df16:	683a      	ldr	r2, [r7, #0]
 800df18:	4413      	add	r3, r2
 800df1a:	781b      	ldrb	r3, [r3, #0]
 800df1c:	747b      	strb	r3, [r7, #17]
			Index++;
 800df1e:	697b      	ldr	r3, [r7, #20]
 800df20:	3301      	adds	r3, #1
 800df22:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800df24:	7c7b      	ldrb	r3, [r7, #17]
 800df26:	2b03      	cmp	r3, #3
 800df28:	d87e      	bhi.n	800e028 <VL53L0X_load_tuning_settings+0x140>
 800df2a:	a201      	add	r2, pc, #4	@ (adr r2, 800df30 <VL53L0X_load_tuning_settings+0x48>)
 800df2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df30:	0800df41 	.word	0x0800df41
 800df34:	0800df7b 	.word	0x0800df7b
 800df38:	0800dfb5 	.word	0x0800dfb5
 800df3c:	0800dfef 	.word	0x0800dfef
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800df40:	697b      	ldr	r3, [r7, #20]
 800df42:	683a      	ldr	r2, [r7, #0]
 800df44:	4413      	add	r3, r2
 800df46:	781b      	ldrb	r3, [r3, #0]
 800df48:	743b      	strb	r3, [r7, #16]
				Index++;
 800df4a:	697b      	ldr	r3, [r7, #20]
 800df4c:	3301      	adds	r3, #1
 800df4e:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800df50:	697b      	ldr	r3, [r7, #20]
 800df52:	683a      	ldr	r2, [r7, #0]
 800df54:	4413      	add	r3, r2
 800df56:	781b      	ldrb	r3, [r3, #0]
 800df58:	73fb      	strb	r3, [r7, #15]
				Index++;
 800df5a:	697b      	ldr	r3, [r7, #20]
 800df5c:	3301      	adds	r3, #1
 800df5e:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800df60:	7c3b      	ldrb	r3, [r7, #16]
 800df62:	b29b      	uxth	r3, r3
 800df64:	021b      	lsls	r3, r3, #8
 800df66:	b29a      	uxth	r2, r3
 800df68:	7bfb      	ldrb	r3, [r7, #15]
 800df6a:	b29b      	uxth	r3, r3
 800df6c:	4413      	add	r3, r2
 800df6e:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	89ba      	ldrh	r2, [r7, #12]
 800df74:	f8a3 2134 	strh.w	r2, [r3, #308]	@ 0x134
				break;
 800df78:	e087      	b.n	800e08a <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800df7a:	697b      	ldr	r3, [r7, #20]
 800df7c:	683a      	ldr	r2, [r7, #0]
 800df7e:	4413      	add	r3, r2
 800df80:	781b      	ldrb	r3, [r3, #0]
 800df82:	743b      	strb	r3, [r7, #16]
				Index++;
 800df84:	697b      	ldr	r3, [r7, #20]
 800df86:	3301      	adds	r3, #1
 800df88:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800df8a:	697b      	ldr	r3, [r7, #20]
 800df8c:	683a      	ldr	r2, [r7, #0]
 800df8e:	4413      	add	r3, r2
 800df90:	781b      	ldrb	r3, [r3, #0]
 800df92:	73fb      	strb	r3, [r7, #15]
				Index++;
 800df94:	697b      	ldr	r3, [r7, #20]
 800df96:	3301      	adds	r3, #1
 800df98:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800df9a:	7c3b      	ldrb	r3, [r7, #16]
 800df9c:	b29b      	uxth	r3, r3
 800df9e:	021b      	lsls	r3, r3, #8
 800dfa0:	b29a      	uxth	r2, r3
 800dfa2:	7bfb      	ldrb	r3, [r7, #15]
 800dfa4:	b29b      	uxth	r3, r3
 800dfa6:	4413      	add	r3, r2
 800dfa8:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	89ba      	ldrh	r2, [r7, #12]
 800dfae:	f8a3 2136 	strh.w	r2, [r3, #310]	@ 0x136
					Temp16);
				break;
 800dfb2:	e06a      	b.n	800e08a <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800dfb4:	697b      	ldr	r3, [r7, #20]
 800dfb6:	683a      	ldr	r2, [r7, #0]
 800dfb8:	4413      	add	r3, r2
 800dfba:	781b      	ldrb	r3, [r3, #0]
 800dfbc:	743b      	strb	r3, [r7, #16]
				Index++;
 800dfbe:	697b      	ldr	r3, [r7, #20]
 800dfc0:	3301      	adds	r3, #1
 800dfc2:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800dfc4:	697b      	ldr	r3, [r7, #20]
 800dfc6:	683a      	ldr	r2, [r7, #0]
 800dfc8:	4413      	add	r3, r2
 800dfca:	781b      	ldrb	r3, [r3, #0]
 800dfcc:	73fb      	strb	r3, [r7, #15]
				Index++;
 800dfce:	697b      	ldr	r3, [r7, #20]
 800dfd0:	3301      	adds	r3, #1
 800dfd2:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800dfd4:	7c3b      	ldrb	r3, [r7, #16]
 800dfd6:	b29b      	uxth	r3, r3
 800dfd8:	021b      	lsls	r3, r3, #8
 800dfda:	b29a      	uxth	r2, r3
 800dfdc:	7bfb      	ldrb	r3, [r7, #15]
 800dfde:	b29b      	uxth	r3, r3
 800dfe0:	4413      	add	r3, r2
 800dfe2:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	89ba      	ldrh	r2, [r7, #12]
 800dfe8:	f8a3 2138 	strh.w	r2, [r3, #312]	@ 0x138
				break;
 800dfec:	e04d      	b.n	800e08a <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800dfee:	697b      	ldr	r3, [r7, #20]
 800dff0:	683a      	ldr	r2, [r7, #0]
 800dff2:	4413      	add	r3, r2
 800dff4:	781b      	ldrb	r3, [r3, #0]
 800dff6:	743b      	strb	r3, [r7, #16]
				Index++;
 800dff8:	697b      	ldr	r3, [r7, #20]
 800dffa:	3301      	adds	r3, #1
 800dffc:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800dffe:	697b      	ldr	r3, [r7, #20]
 800e000:	683a      	ldr	r2, [r7, #0]
 800e002:	4413      	add	r3, r2
 800e004:	781b      	ldrb	r3, [r3, #0]
 800e006:	73fb      	strb	r3, [r7, #15]
				Index++;
 800e008:	697b      	ldr	r3, [r7, #20]
 800e00a:	3301      	adds	r3, #1
 800e00c:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800e00e:	7c3b      	ldrb	r3, [r7, #16]
 800e010:	b29b      	uxth	r3, r3
 800e012:	021b      	lsls	r3, r3, #8
 800e014:	b29a      	uxth	r2, r3
 800e016:	7bfb      	ldrb	r3, [r7, #15]
 800e018:	b29b      	uxth	r3, r3
 800e01a:	4413      	add	r3, r2
 800e01c:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	89ba      	ldrh	r2, [r7, #12]
 800e022:	f8a3 213c 	strh.w	r2, [r3, #316]	@ 0x13c
				break;
 800e026:	e030      	b.n	800e08a <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e028:	23fc      	movs	r3, #252	@ 0xfc
 800e02a:	77fb      	strb	r3, [r7, #31]
 800e02c:	e02d      	b.n	800e08a <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800e02e:	7cfb      	ldrb	r3, [r7, #19]
 800e030:	2b04      	cmp	r3, #4
 800e032:	d828      	bhi.n	800e086 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800e034:	697b      	ldr	r3, [r7, #20]
 800e036:	683a      	ldr	r2, [r7, #0]
 800e038:	4413      	add	r3, r2
 800e03a:	781b      	ldrb	r3, [r3, #0]
 800e03c:	74bb      	strb	r3, [r7, #18]
			Index++;
 800e03e:	697b      	ldr	r3, [r7, #20]
 800e040:	3301      	adds	r3, #1
 800e042:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800e044:	2300      	movs	r3, #0
 800e046:	61bb      	str	r3, [r7, #24]
 800e048:	e00f      	b.n	800e06a <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800e04a:	697b      	ldr	r3, [r7, #20]
 800e04c:	683a      	ldr	r2, [r7, #0]
 800e04e:	4413      	add	r3, r2
 800e050:	7819      	ldrb	r1, [r3, #0]
 800e052:	f107 0208 	add.w	r2, r7, #8
 800e056:	69bb      	ldr	r3, [r7, #24]
 800e058:	4413      	add	r3, r2
 800e05a:	460a      	mov	r2, r1
 800e05c:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800e05e:	697b      	ldr	r3, [r7, #20]
 800e060:	3301      	adds	r3, #1
 800e062:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800e064:	69bb      	ldr	r3, [r7, #24]
 800e066:	3301      	adds	r3, #1
 800e068:	61bb      	str	r3, [r7, #24]
 800e06a:	7cfb      	ldrb	r3, [r7, #19]
 800e06c:	69ba      	ldr	r2, [r7, #24]
 800e06e:	429a      	cmp	r2, r3
 800e070:	dbeb      	blt.n	800e04a <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800e072:	7cfb      	ldrb	r3, [r7, #19]
 800e074:	f107 0208 	add.w	r2, r7, #8
 800e078:	7cb9      	ldrb	r1, [r7, #18]
 800e07a:	6878      	ldr	r0, [r7, #4]
 800e07c:	f000 fdee 	bl	800ec5c <VL53L0X_WriteMulti>
 800e080:	4603      	mov	r3, r0
 800e082:	77fb      	strb	r3, [r7, #31]
 800e084:	e001      	b.n	800e08a <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e086:	23fc      	movs	r3, #252	@ 0xfc
 800e088:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800e08a:	697b      	ldr	r3, [r7, #20]
 800e08c:	683a      	ldr	r2, [r7, #0]
 800e08e:	4413      	add	r3, r2
 800e090:	781b      	ldrb	r3, [r3, #0]
 800e092:	2b00      	cmp	r3, #0
 800e094:	d004      	beq.n	800e0a0 <VL53L0X_load_tuning_settings+0x1b8>
 800e096:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	f43f af2e 	beq.w	800defc <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800e0a0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e0a4:	4618      	mov	r0, r3
 800e0a6:	3720      	adds	r7, #32
 800e0a8:	46bd      	mov	sp, r7
 800e0aa:	bd80      	pop	{r7, pc}

0800e0ac <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800e0ac:	b580      	push	{r7, lr}
 800e0ae:	b088      	sub	sp, #32
 800e0b0:	af00      	add	r7, sp, #0
 800e0b2:	60f8      	str	r0, [r7, #12]
 800e0b4:	60b9      	str	r1, [r7, #8]
 800e0b6:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	2200      	movs	r2, #0
 800e0c0:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800e0c2:	f107 0313 	add.w	r3, r7, #19
 800e0c6:	4619      	mov	r1, r3
 800e0c8:	68f8      	ldr	r0, [r7, #12]
 800e0ca:	f7fc fcad 	bl	800aa28 <VL53L0X_GetXTalkCompensationEnable>
 800e0ce:	4603      	mov	r3, r0
 800e0d0:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800e0d2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d111      	bne.n	800e0fe <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800e0da:	7cfb      	ldrb	r3, [r7, #19]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d00e      	beq.n	800e0fe <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	6a1b      	ldr	r3, [r3, #32]
 800e0e4:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800e0e6:	68bb      	ldr	r3, [r7, #8]
 800e0e8:	8a9b      	ldrh	r3, [r3, #20]
 800e0ea:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800e0ec:	69bb      	ldr	r3, [r7, #24]
 800e0ee:	fb02 f303 	mul.w	r3, r2, r3
 800e0f2:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800e0f4:	697b      	ldr	r3, [r7, #20]
 800e0f6:	3380      	adds	r3, #128	@ 0x80
 800e0f8:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800e0fe:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e102:	4618      	mov	r0, r3
 800e104:	3720      	adds	r7, #32
 800e106:	46bd      	mov	sp, r7
 800e108:	bd80      	pop	{r7, pc}

0800e10a <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800e10a:	b580      	push	{r7, lr}
 800e10c:	b086      	sub	sp, #24
 800e10e:	af00      	add	r7, sp, #0
 800e110:	60f8      	str	r0, [r7, #12]
 800e112:	60b9      	str	r1, [r7, #8]
 800e114:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e116:	2300      	movs	r3, #0
 800e118:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800e11a:	68bb      	ldr	r3, [r7, #8]
 800e11c:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800e122:	f107 0310 	add.w	r3, r7, #16
 800e126:	461a      	mov	r2, r3
 800e128:	68b9      	ldr	r1, [r7, #8]
 800e12a:	68f8      	ldr	r0, [r7, #12]
 800e12c:	f7ff ffbe 	bl	800e0ac <VL53L0X_get_total_xtalk_rate>
 800e130:	4603      	mov	r3, r0
 800e132:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800e134:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d105      	bne.n	800e148 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	681a      	ldr	r2, [r3, #0]
 800e140:	693b      	ldr	r3, [r7, #16]
 800e142:	441a      	add	r2, r3
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	601a      	str	r2, [r3, #0]

	return Status;
 800e148:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e14c:	4618      	mov	r0, r3
 800e14e:	3718      	adds	r7, #24
 800e150:	46bd      	mov	sp, r7
 800e152:	bd80      	pop	{r7, pc}

0800e154 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 800e154:	b580      	push	{r7, lr}
 800e156:	b09a      	sub	sp, #104	@ 0x68
 800e158:	af00      	add	r7, sp, #0
 800e15a:	60f8      	str	r0, [r7, #12]
 800e15c:	60b9      	str	r1, [r7, #8]
 800e15e:	607a      	str	r2, [r7, #4]
 800e160:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800e162:	2312      	movs	r3, #18
 800e164:	657b      	str	r3, [r7, #84]	@ 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800e166:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800e16a:	653b      	str	r3, [r7, #80]	@ 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800e16c:	2342      	movs	r3, #66	@ 0x42
 800e16e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800e170:	2306      	movs	r3, #6
 800e172:	64bb      	str	r3, [r7, #72]	@ 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 800e174:	2307      	movs	r3, #7
 800e176:	647b      	str	r3, [r7, #68]	@ 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e178:	2300      	movs	r3, #0
 800e17a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	f8b3 3154 	ldrh.w	r3, [r3, #340]	@ 0x154
	dmaxCalRange_mm =
 800e184:	63fb      	str	r3, [r7, #60]	@ 0x3c

	dmaxCalSignalRateRtn_mcps =
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 800e18c:	63bb      	str	r3, [r7, #56]	@ 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800e18e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e190:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e192:	fb02 f303 	mul.w	r3, r2, r3
 800e196:	637b      	str	r3, [r7, #52]	@ 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800e198:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e19a:	3380      	adds	r3, #128	@ 0x80
 800e19c:	0a1b      	lsrs	r3, r3, #8
 800e19e:	637b      	str	r3, [r7, #52]	@ 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800e1a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e1a2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e1a4:	fb02 f303 	mul.w	r3, r2, r3
 800e1a8:	637b      	str	r3, [r7, #52]	@ 0x34

	minSignalNeeded_p1 = 0;
 800e1aa:	2300      	movs	r3, #0
 800e1ac:	667b      	str	r3, [r7, #100]	@ 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d01a      	beq.n	800e1ea <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800e1b4:	68bb      	ldr	r3, [r7, #8]
 800e1b6:	029b      	lsls	r3, r3, #10
 800e1b8:	633b      	str	r3, [r7, #48]	@ 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800e1be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e1c0:	4413      	add	r3, r2
 800e1c2:	667b      	str	r3, [r7, #100]	@ 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800e1c4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800e1cc:	667b      	str	r3, [r7, #100]	@ 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800e1ce:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e1d0:	4613      	mov	r3, r2
 800e1d2:	005b      	lsls	r3, r3, #1
 800e1d4:	4413      	add	r3, r2
 800e1d6:	667b      	str	r3, [r7, #100]	@ 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800e1d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e1da:	fb03 f303 	mul.w	r3, r3, r3
 800e1de:	667b      	str	r3, [r7, #100]	@ 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800e1e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e1e2:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800e1e6:	0c1b      	lsrs	r3, r3, #16
 800e1e8:	667b      	str	r3, [r7, #100]	@ 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800e1ea:	683b      	ldr	r3, [r7, #0]
 800e1ec:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800e1ee:	fb02 f303 	mul.w	r3, r2, r3
 800e1f2:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800e1f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1f6:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800e1fa:	0c1b      	lsrs	r3, r3, #16
 800e1fc:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800e1fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e200:	fb03 f303 	mul.w	r3, r3, r3
 800e204:	62fb      	str	r3, [r7, #44]	@ 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800e206:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e208:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800e20c:	0c1b      	lsrs	r3, r3, #16
 800e20e:	62bb      	str	r3, [r7, #40]	@ 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800e210:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e212:	085a      	lsrs	r2, r3, #1
 800e214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e216:	441a      	add	r2, r3
 800e218:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e21a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e21e:	62bb      	str	r3, [r7, #40]	@ 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800e220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e222:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e224:	fb02 f303 	mul.w	r3, r2, r3
 800e228:	62bb      	str	r3, [r7, #40]	@ 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800e22a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e22c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e230:	d302      	bcc.n	800e238 <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 800e232:	4b54      	ldr	r3, [pc, #336]	@ (800e384 <VL53L0X_calc_dmax+0x230>)
 800e234:	663b      	str	r3, [r7, #96]	@ 0x60
 800e236:	e015      	b.n	800e264 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800e238:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e23a:	085a      	lsrs	r2, r3, #1
 800e23c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e23e:	441a      	add	r2, r3
 800e240:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e242:	fbb2 f3f3 	udiv	r3, r2, r3
 800e246:	677b      	str	r3, [r7, #116]	@ 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800e248:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e24a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e24c:	fb02 f303 	mul.w	r3, r2, r3
 800e250:	677b      	str	r3, [r7, #116]	@ 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800e252:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e254:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800e258:	0c1b      	lsrs	r3, r3, #16
 800e25a:	663b      	str	r3, [r7, #96]	@ 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800e25c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e25e:	fb03 f303 	mul.w	r3, r3, r3
 800e262:	663b      	str	r3, [r7, #96]	@ 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800e264:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e266:	039b      	lsls	r3, r3, #14
 800e268:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800e26c:	4a46      	ldr	r2, [pc, #280]	@ (800e388 <VL53L0X_calc_dmax+0x234>)
 800e26e:	fba2 2303 	umull	r2, r3, r2, r3
 800e272:	099b      	lsrs	r3, r3, #6
 800e274:	627b      	str	r3, [r7, #36]	@ 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800e276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e278:	fb03 f303 	mul.w	r3, r3, r3
 800e27c:	627b      	str	r3, [r7, #36]	@ 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800e27e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e280:	fb03 f303 	mul.w	r3, r3, r3
 800e284:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800e286:	6a3b      	ldr	r3, [r7, #32]
 800e288:	3308      	adds	r3, #8
 800e28a:	091b      	lsrs	r3, r3, #4
 800e28c:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800e28e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e290:	6a3b      	ldr	r3, [r7, #32]
 800e292:	1ad3      	subs	r3, r2, r3
 800e294:	627b      	str	r3, [r7, #36]	@ 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800e296:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e298:	4613      	mov	r3, r2
 800e29a:	005b      	lsls	r3, r3, #1
 800e29c:	4413      	add	r3, r2
 800e29e:	011b      	lsls	r3, r3, #4
 800e2a0:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800e2a2:	69fb      	ldr	r3, [r7, #28]
 800e2a4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e2a8:	0b9b      	lsrs	r3, r3, #14
 800e2aa:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800e2ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e2ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e2b0:	4413      	add	r3, r2
 800e2b2:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800e2b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e2b6:	085b      	lsrs	r3, r3, #1
 800e2b8:	69ba      	ldr	r2, [r7, #24]
 800e2ba:	4413      	add	r3, r2
 800e2bc:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800e2be:	69ba      	ldr	r2, [r7, #24]
 800e2c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e2c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800e2c6:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800e2c8:	69bb      	ldr	r3, [r7, #24]
 800e2ca:	039b      	lsls	r3, r3, #14
 800e2cc:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800e2ce:	69fb      	ldr	r3, [r7, #28]
 800e2d0:	085b      	lsrs	r3, r3, #1
 800e2d2:	69ba      	ldr	r2, [r7, #24]
 800e2d4:	4413      	add	r3, r2
 800e2d6:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800e2d8:	69ba      	ldr	r2, [r7, #24]
 800e2da:	69fb      	ldr	r3, [r7, #28]
 800e2dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800e2e0:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800e2e2:	69bb      	ldr	r3, [r7, #24]
 800e2e4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e2e6:	fb02 f303 	mul.w	r3, r2, r3
 800e2ea:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800e2ec:	69bb      	ldr	r3, [r7, #24]
 800e2ee:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800e2f2:	4a25      	ldr	r2, [pc, #148]	@ (800e388 <VL53L0X_calc_dmax+0x234>)
 800e2f4:	fba2 2303 	umull	r2, r3, r2, r3
 800e2f8:	099b      	lsrs	r3, r3, #6
 800e2fa:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800e2fc:	69bb      	ldr	r3, [r7, #24]
 800e2fe:	011b      	lsls	r3, r3, #4
 800e300:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800e302:	69bb      	ldr	r3, [r7, #24]
 800e304:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800e308:	4a1f      	ldr	r2, [pc, #124]	@ (800e388 <VL53L0X_calc_dmax+0x234>)
 800e30a:	fba2 2303 	umull	r2, r3, r2, r3
 800e30e:	099b      	lsrs	r3, r3, #6
 800e310:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800e312:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e314:	3380      	adds	r3, #128	@ 0x80
 800e316:	0a1b      	lsrs	r3, r3, #8
 800e318:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800e31a:	697b      	ldr	r3, [r7, #20]
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d008      	beq.n	800e332 <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800e320:	697b      	ldr	r3, [r7, #20]
 800e322:	085a      	lsrs	r2, r3, #1
 800e324:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e326:	441a      	add	r2, r3
 800e328:	697b      	ldr	r3, [r7, #20]
 800e32a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e32e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e330:	e001      	b.n	800e336 <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800e332:	2300      	movs	r3, #0
 800e334:	65bb      	str	r3, [r7, #88]	@ 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800e336:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800e338:	f7fe f9bd 	bl	800c6b6 <VL53L0X_isqrt>
 800e33c:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800e33e:	69bb      	ldr	r3, [r7, #24]
 800e340:	2b00      	cmp	r3, #0
 800e342:	d008      	beq.n	800e356 <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800e344:	69bb      	ldr	r3, [r7, #24]
 800e346:	085a      	lsrs	r2, r3, #1
 800e348:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e34a:	441a      	add	r2, r3
 800e34c:	69bb      	ldr	r3, [r7, #24]
 800e34e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e352:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e354:	e001      	b.n	800e35a <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800e356:	2300      	movs	r3, #0
 800e358:	65fb      	str	r3, [r7, #92]	@ 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800e35a:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800e35c:	f7fe f9ab 	bl	800c6b6 <VL53L0X_isqrt>
 800e360:	65f8      	str	r0, [r7, #92]	@ 0x5c

	*pdmax_mm = dmaxDark;
 800e362:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e364:	693a      	ldr	r2, [r7, #16]
 800e366:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800e368:	693a      	ldr	r2, [r7, #16]
 800e36a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e36c:	429a      	cmp	r2, r3
 800e36e:	d902      	bls.n	800e376 <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 800e370:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e372:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800e374:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800e376:	f997 3043 	ldrsb.w	r3, [r7, #67]	@ 0x43
}
 800e37a:	4618      	mov	r0, r3
 800e37c:	3768      	adds	r7, #104	@ 0x68
 800e37e:	46bd      	mov	sp, r7
 800e380:	bd80      	pop	{r7, pc}
 800e382:	bf00      	nop
 800e384:	fff00000 	.word	0xfff00000
 800e388:	10624dd3 	.word	0x10624dd3

0800e38c <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800e38c:	b580      	push	{r7, lr}
 800e38e:	b0b4      	sub	sp, #208	@ 0xd0
 800e390:	af04      	add	r7, sp, #16
 800e392:	60f8      	str	r0, [r7, #12]
 800e394:	60b9      	str	r1, [r7, #8]
 800e396:	607a      	str	r2, [r7, #4]
 800e398:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800e39a:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800e39e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800e3a2:	f44f 7316 	mov.w	r3, #600	@ 0x258
 800e3a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800e3aa:	f44f 13c8 	mov.w	r3, #1638400	@ 0x190000
 800e3ae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800e3b2:	f241 235c 	movw	r3, #4700	@ 0x125c
 800e3b6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800e3ba:	4b9e      	ldr	r3, [pc, #632]	@ (800e634 <VL53L0X_calc_sigma_estimate+0x2a8>)
 800e3bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800e3c0:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800e3c4:	67fb      	str	r3, [r7, #124]	@ 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800e3c6:	f04f 4270 	mov.w	r2, #4026531840	@ 0xf0000000
 800e3ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e3ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800e3d2:	67bb      	str	r3, [r7, #120]	@ 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800e3d4:	4b98      	ldr	r3, [pc, #608]	@ (800e638 <VL53L0X_calc_sigma_estimate+0x2ac>)
 800e3d6:	677b      	str	r3, [r7, #116]	@ 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800e3d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e3dc:	673b      	str	r3, [r7, #112]	@ 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800e3de:	f44f 1348 	mov.w	r3, #3276800	@ 0x320000
 800e3e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 800e3e4:	f240 6377 	movw	r3, #1655	@ 0x677
 800e3e8:	66bb      	str	r3, [r7, #104]	@ 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e3ea:	2300      	movs	r3, #0
 800e3ec:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	6a1b      	ldr	r3, [r3, #32]
 800e3f4:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800e3f6:	68bb      	ldr	r3, [r7, #8]
 800e3f8:	691b      	ldr	r3, [r3, #16]
 800e3fa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800e3fe:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800e402:	0c1b      	lsrs	r3, r3, #16
 800e404:	667b      	str	r3, [r7, #100]	@ 0x64

	correctedSignalRate_mcps =
 800e406:	68bb      	ldr	r3, [r7, #8]
 800e408:	68db      	ldr	r3, [r3, #12]
 800e40a:	663b      	str	r3, [r7, #96]	@ 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 800e40c:	f107 0310 	add.w	r3, r7, #16
 800e410:	461a      	mov	r2, r3
 800e412:	68b9      	ldr	r1, [r7, #8]
 800e414:	68f8      	ldr	r0, [r7, #12]
 800e416:	f7ff fe78 	bl	800e10a <VL53L0X_get_total_signal_rate>
 800e41a:	4603      	mov	r3, r0
 800e41c:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800e420:	f107 0314 	add.w	r3, r7, #20
 800e424:	461a      	mov	r2, r3
 800e426:	68b9      	ldr	r1, [r7, #8]
 800e428:	68f8      	ldr	r0, [r7, #12]
 800e42a:	f7ff fe3f 	bl	800e0ac <VL53L0X_get_total_xtalk_rate>
 800e42e:	4603      	mov	r3, r0
 800e430:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800e434:	693b      	ldr	r3, [r7, #16]
 800e436:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800e43a:	fb02 f303 	mul.w	r3, r2, r3
 800e43e:	65fb      	str	r3, [r7, #92]	@ 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800e440:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e442:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800e446:	0c1b      	lsrs	r3, r3, #16
 800e448:	65fb      	str	r3, [r7, #92]	@ 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800e44a:	697b      	ldr	r3, [r7, #20]
 800e44c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800e450:	fb02 f303 	mul.w	r3, r2, r3
 800e454:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800e458:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800e45c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e45e:	429a      	cmp	r2, r3
 800e460:	d902      	bls.n	800e468 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800e462:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e464:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800e468:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d168      	bne.n	800e542 <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800e476:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	f893 30e0 	ldrb.w	r3, [r3, #224]	@ 0xe0
 800e480:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800e484:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800e488:	461a      	mov	r2, r3
 800e48a:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 800e48e:	68f8      	ldr	r0, [r7, #12]
 800e490:	f7fe feb4 	bl	800d1fc <VL53L0X_calc_timeout_mclks>
 800e494:	6578      	str	r0, [r7, #84]	@ 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e49c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 800e4a6:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800e4aa:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 800e4ae:	461a      	mov	r2, r3
 800e4b0:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 800e4b4:	68f8      	ldr	r0, [r7, #12]
 800e4b6:	f7fe fea1 	bl	800d1fc <VL53L0X_calc_timeout_mclks>
 800e4ba:	64f8      	str	r0, [r7, #76]	@ 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800e4bc:	2303      	movs	r3, #3
 800e4be:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		if (finalRangeVcselPCLKS == 8)
 800e4c2:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800e4c6:	2b08      	cmp	r3, #8
 800e4c8:	d102      	bne.n	800e4d0 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 800e4ca:	2302      	movs	r3, #2
 800e4cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800e4d0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e4d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e4d4:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800e4d6:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800e4da:	fb02 f303 	mul.w	r3, r2, r3
 800e4de:	02db      	lsls	r3, r3, #11
 800e4e0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800e4e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800e4e8:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800e4ec:	4a53      	ldr	r2, [pc, #332]	@ (800e63c <VL53L0X_calc_sigma_estimate+0x2b0>)
 800e4ee:	fba2 2303 	umull	r2, r3, r2, r3
 800e4f2:	099b      	lsrs	r3, r3, #6
 800e4f4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 800e4f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800e4fc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800e4fe:	fb02 f303 	mul.w	r3, r2, r3
 800e502:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800e506:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800e50a:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800e50e:	4a4b      	ldr	r2, [pc, #300]	@ (800e63c <VL53L0X_calc_sigma_estimate+0x2b0>)
 800e510:	fba2 2303 	umull	r2, r3, r2, r3
 800e514:	099b      	lsrs	r3, r3, #6
 800e516:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800e51a:	693b      	ldr	r3, [r7, #16]
 800e51c:	3380      	adds	r3, #128	@ 0x80
 800e51e:	0a1b      	lsrs	r3, r3, #8
 800e520:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800e522:	693a      	ldr	r2, [r7, #16]
 800e524:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800e528:	fb02 f303 	mul.w	r3, r2, r3
 800e52c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800e530:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800e534:	3380      	adds	r3, #128	@ 0x80
 800e536:	0a1b      	lsrs	r3, r3, #8
 800e538:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800e53c:	693b      	ldr	r3, [r7, #16]
 800e53e:	021b      	lsls	r3, r3, #8
 800e540:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800e542:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 800e546:	2b00      	cmp	r3, #0
 800e548:	d002      	beq.n	800e550 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 800e54a:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 800e54e:	e15e      	b.n	800e80e <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 800e550:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e552:	2b00      	cmp	r3, #0
 800e554:	d10c      	bne.n	800e570 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800e55c:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800e564:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
		*pDmax_mm = 0;
 800e568:	683b      	ldr	r3, [r7, #0]
 800e56a:	2200      	movs	r2, #0
 800e56c:	601a      	str	r2, [r3, #0]
 800e56e:	e14c      	b.n	800e80a <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 800e570:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800e574:	2b00      	cmp	r3, #0
 800e576:	d102      	bne.n	800e57e <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 800e578:	2301      	movs	r3, #1
 800e57a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800e57e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800e582:	64bb      	str	r3, [r7, #72]	@ 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800e584:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e586:	041a      	lsls	r2, r3, #16
 800e588:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e58a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e58e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800e592:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800e596:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e598:	429a      	cmp	r2, r3
 800e59a:	d902      	bls.n	800e5a2 <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800e59c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e59e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800e5a2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800e5a6:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800e5aa:	fb02 f303 	mul.w	r3, r2, r3
 800e5ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800e5b2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800e5b6:	4613      	mov	r3, r2
 800e5b8:	005b      	lsls	r3, r3, #1
 800e5ba:	4413      	add	r3, r2
 800e5bc:	009b      	lsls	r3, r3, #2
 800e5be:	4618      	mov	r0, r3
 800e5c0:	f7fe f879 	bl	800c6b6 <VL53L0X_isqrt>
 800e5c4:	4603      	mov	r3, r0
 800e5c6:	005b      	lsls	r3, r3, #1
 800e5c8:	647b      	str	r3, [r7, #68]	@ 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800e5ca:	68bb      	ldr	r3, [r7, #8]
 800e5cc:	891b      	ldrh	r3, [r3, #8]
 800e5ce:	461a      	mov	r2, r3
 800e5d0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e5d2:	fb02 f303 	mul.w	r3, r2, r3
 800e5d6:	643b      	str	r3, [r7, #64]	@ 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800e5d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e5da:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800e5dc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e5e0:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800e5e2:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800e5e4:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800e5e8:	4a14      	ldr	r2, [pc, #80]	@ (800e63c <VL53L0X_calc_sigma_estimate+0x2b0>)
 800e5ea:	fba2 2303 	umull	r2, r3, r2, r3
 800e5ee:	099b      	lsrs	r3, r3, #6
 800e5f0:	63fb      	str	r3, [r7, #60]	@ 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800e5f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e5f4:	041b      	lsls	r3, r3, #16
 800e5f6:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800e5fa:	4a10      	ldr	r2, [pc, #64]	@ (800e63c <VL53L0X_calc_sigma_estimate+0x2b0>)
 800e5fc:	fba2 2303 	umull	r2, r3, r2, r3
 800e600:	099b      	lsrs	r3, r3, #6
 800e602:	63bb      	str	r3, [r7, #56]	@ 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800e604:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e606:	021b      	lsls	r3, r3, #8
 800e608:	63fb      	str	r3, [r7, #60]	@ 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800e60a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e60c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e60e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e612:	2b00      	cmp	r3, #0
 800e614:	bfb8      	it	lt
 800e616:	425b      	neglt	r3, r3
 800e618:	637b      	str	r3, [r7, #52]	@ 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800e61a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e61c:	021b      	lsls	r3, r3, #8
 800e61e:	637b      	str	r3, [r7, #52]	@ 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800e620:	68bb      	ldr	r3, [r7, #8]
 800e622:	7e1b      	ldrb	r3, [r3, #24]
 800e624:	2b00      	cmp	r3, #0
 800e626:	d00b      	beq.n	800e640 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 800e628:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800e62c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800e630:	e033      	b.n	800e69a <VL53L0X_calc_sigma_estimate+0x30e>
 800e632:	bf00      	nop
 800e634:	028f87ae 	.word	0x028f87ae
 800e638:	0006999a 	.word	0x0006999a
 800e63c:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800e640:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e642:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e646:	fbb2 f3f3 	udiv	r3, r2, r3
 800e64a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800e64e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e650:	f5c3 3280 	rsb	r2, r3, #65536	@ 0x10000
 800e654:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e658:	fb02 f303 	mul.w	r3, r2, r3
 800e65c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800e660:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800e664:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e666:	4413      	add	r3, r2
 800e668:	0c1b      	lsrs	r3, r3, #16
 800e66a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800e66e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e672:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800e676:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800e67a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e67e:	085b      	lsrs	r3, r3, #1
 800e680:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800e684:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e688:	fb03 f303 	mul.w	r3, r3, r3
 800e68c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800e690:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e694:	0b9b      	lsrs	r3, r3, #14
 800e696:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800e69a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e69e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e6a0:	fb02 f303 	mul.w	r3, r2, r3
 800e6a4:	633b      	str	r3, [r7, #48]	@ 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800e6a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6a8:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800e6ac:	0c1b      	lsrs	r3, r3, #16
 800e6ae:	633b      	str	r3, [r7, #48]	@ 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800e6b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6b2:	fb03 f303 	mul.w	r3, r3, r3
 800e6b6:	633b      	str	r3, [r7, #48]	@ 0x30

		sqr2 = sigmaEstimateP2;
 800e6b8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800e6bc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800e6be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6c0:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800e6c4:	0c1b      	lsrs	r3, r3, #16
 800e6c6:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800e6c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6ca:	fb03 f303 	mul.w	r3, r3, r3
 800e6ce:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800e6d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e6d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6d4:	4413      	add	r3, r2
 800e6d6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800e6d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e6da:	f7fd ffec 	bl	800c6b6 <VL53L0X_isqrt>
 800e6de:	6278      	str	r0, [r7, #36]	@ 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800e6e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6e2:	041b      	lsls	r3, r3, #16
 800e6e4:	627b      	str	r3, [r7, #36]	@ 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800e6e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6e8:	3332      	adds	r3, #50	@ 0x32
 800e6ea:	4a4b      	ldr	r2, [pc, #300]	@ (800e818 <VL53L0X_calc_sigma_estimate+0x48c>)
 800e6ec:	fba2 2303 	umull	r2, r3, r2, r3
 800e6f0:	095a      	lsrs	r2, r3, #5
 800e6f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e6f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800e6f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800e6fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e700:	f640 32b5 	movw	r2, #2997	@ 0xbb5
 800e704:	fb02 f303 	mul.w	r3, r2, r3
 800e708:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800e70c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800e710:	f241 3388 	movw	r3, #5000	@ 0x1388
 800e714:	4413      	add	r3, r2
 800e716:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
		sigmaEstRtn		 /= 10000;
 800e71a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e71e:	4a3f      	ldr	r2, [pc, #252]	@ (800e81c <VL53L0X_calc_sigma_estimate+0x490>)
 800e720:	fba2 2303 	umull	r2, r3, r2, r3
 800e724:	0b5b      	lsrs	r3, r3, #13
 800e726:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800e72a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800e72e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e730:	429a      	cmp	r2, r3
 800e732:	d902      	bls.n	800e73a <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800e734:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e736:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800e73a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800e73e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e742:	4413      	add	r3, r2
 800e744:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800e748:	4a35      	ldr	r2, [pc, #212]	@ (800e820 <VL53L0X_calc_sigma_estimate+0x494>)
 800e74a:	fba2 2303 	umull	r2, r3, r2, r3
 800e74e:	099b      	lsrs	r3, r3, #6
 800e750:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800e752:	6a3b      	ldr	r3, [r7, #32]
 800e754:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800e756:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800e75a:	441a      	add	r2, r3
 800e75c:	6a3b      	ldr	r3, [r7, #32]
 800e75e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e762:	4618      	mov	r0, r3
 800e764:	f7fd ffa7 	bl	800c6b6 <VL53L0X_isqrt>
 800e768:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800e76a:	69fb      	ldr	r3, [r7, #28]
 800e76c:	021b      	lsls	r3, r3, #8
 800e76e:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800e770:	69fb      	ldr	r3, [r7, #28]
 800e772:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800e776:	4a2a      	ldr	r2, [pc, #168]	@ (800e820 <VL53L0X_calc_sigma_estimate+0x494>)
 800e778:	fba2 2303 	umull	r2, r3, r2, r3
 800e77c:	099b      	lsrs	r3, r3, #6
 800e77e:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800e780:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e784:	fb03 f303 	mul.w	r3, r3, r3
 800e788:	633b      	str	r3, [r7, #48]	@ 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800e78a:	69fb      	ldr	r3, [r7, #28]
 800e78c:	fb03 f303 	mul.w	r3, r3, r3
 800e790:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800e792:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e796:	4413      	add	r3, r2
 800e798:	4618      	mov	r0, r3
 800e79a:	f7fd ff8c 	bl	800c6b6 <VL53L0X_isqrt>
 800e79e:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800e7a0:	69bb      	ldr	r3, [r7, #24]
 800e7a2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800e7a6:	fb02 f303 	mul.w	r3, r2, r3
 800e7aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800e7ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d009      	beq.n	800e7c8 <VL53L0X_calc_sigma_estimate+0x43c>
 800e7b4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d005      	beq.n	800e7c8 <VL53L0X_calc_sigma_estimate+0x43c>
 800e7bc:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800e7c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800e7c4:	429a      	cmp	r2, r3
 800e7c6:	d903      	bls.n	800e7d0 <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800e7c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800e7cc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800e7d6:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	681a      	ldr	r2, [r3, #0]
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
		Status = VL53L0X_calc_dmax(
 800e7e2:	6939      	ldr	r1, [r7, #16]
 800e7e4:	683b      	ldr	r3, [r7, #0]
 800e7e6:	9303      	str	r3, [sp, #12]
 800e7e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800e7ec:	9302      	str	r3, [sp, #8]
 800e7ee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800e7f2:	9301      	str	r3, [sp, #4]
 800e7f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e7f6:	9300      	str	r3, [sp, #0]
 800e7f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e7fc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e7fe:	68f8      	ldr	r0, [r7, #12]
 800e800:	f7ff fca8 	bl	800e154 <VL53L0X_calc_dmax>
 800e804:	4603      	mov	r3, r0
 800e806:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800e80a:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
}
 800e80e:	4618      	mov	r0, r3
 800e810:	37c0      	adds	r7, #192	@ 0xc0
 800e812:	46bd      	mov	sp, r7
 800e814:	bd80      	pop	{r7, pc}
 800e816:	bf00      	nop
 800e818:	51eb851f 	.word	0x51eb851f
 800e81c:	d1b71759 	.word	0xd1b71759
 800e820:	10624dd3 	.word	0x10624dd3

0800e824 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800e824:	b580      	push	{r7, lr}
 800e826:	b090      	sub	sp, #64	@ 0x40
 800e828:	af00      	add	r7, sp, #0
 800e82a:	60f8      	str	r0, [r7, #12]
 800e82c:	607a      	str	r2, [r7, #4]
 800e82e:	461a      	mov	r2, r3
 800e830:	460b      	mov	r3, r1
 800e832:	72fb      	strb	r3, [r7, #11]
 800e834:	4613      	mov	r3, r2
 800e836:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e838:	2300      	movs	r3, #0
 800e83a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800e83e:	2300      	movs	r3, #0
 800e840:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	uint8_t SignalRefClipflag = 0;
 800e844:	2300      	movs	r3, #0
 800e846:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800e84a:	2300      	movs	r3, #0
 800e84c:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800e850:	2300      	movs	r3, #0
 800e852:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800e856:	2300      	movs	r3, #0
 800e858:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800e85c:	2300      	movs	r3, #0
 800e85e:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800e862:	2300      	movs	r3, #0
 800e864:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800e868:	2300      	movs	r3, #0
 800e86a:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	uint16_t tmpWord = 0;
 800e86e:	2300      	movs	r3, #0
 800e870:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800e872:	2300      	movs	r3, #0
 800e874:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800e876:	7afb      	ldrb	r3, [r7, #11]
 800e878:	10db      	asrs	r3, r3, #3
 800e87a:	b2db      	uxtb	r3, r3
 800e87c:	f003 030f 	and.w	r3, r3, #15
 800e880:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800e884:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d017      	beq.n	800e8bc <VL53L0X_get_pal_range_status+0x98>
 800e88c:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800e890:	2b05      	cmp	r3, #5
 800e892:	d013      	beq.n	800e8bc <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800e894:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800e898:	2b07      	cmp	r3, #7
 800e89a:	d00f      	beq.n	800e8bc <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800e89c:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800e8a0:	2b0c      	cmp	r3, #12
 800e8a2:	d00b      	beq.n	800e8bc <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800e8a4:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800e8a8:	2b0d      	cmp	r3, #13
 800e8aa:	d007      	beq.n	800e8bc <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800e8ac:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800e8b0:	2b0e      	cmp	r3, #14
 800e8b2:	d003      	beq.n	800e8bc <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800e8b4:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800e8b8:	2b0f      	cmp	r3, #15
 800e8ba:	d103      	bne.n	800e8c4 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800e8bc:	2301      	movs	r3, #1
 800e8be:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 800e8c2:	e002      	b.n	800e8ca <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800e8c4:	2300      	movs	r3, #0
 800e8c6:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800e8ca:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d109      	bne.n	800e8e6 <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800e8d2:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800e8d6:	461a      	mov	r2, r3
 800e8d8:	2100      	movs	r1, #0
 800e8da:	68f8      	ldr	r0, [r7, #12]
 800e8dc:	f7fc f990 	bl	800ac00 <VL53L0X_GetLimitCheckEnable>
 800e8e0:	4603      	mov	r3, r0
 800e8e2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800e8e6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d02e      	beq.n	800e94c <VL53L0X_get_pal_range_status+0x128>
 800e8ee:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d12a      	bne.n	800e94c <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800e8f6:	f107 0310 	add.w	r3, r7, #16
 800e8fa:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800e8fe:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800e900:	68f8      	ldr	r0, [r7, #12]
 800e902:	f7ff fd43 	bl	800e38c <VL53L0X_calc_sigma_estimate>
 800e906:	4603      	mov	r3, r0
 800e908:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800e90c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800e910:	2b00      	cmp	r3, #0
 800e912:	d103      	bne.n	800e91c <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800e914:	693b      	ldr	r3, [r7, #16]
 800e916:	b29a      	uxth	r2, r3
 800e918:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e91a:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800e91c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800e920:	2b00      	cmp	r3, #0
 800e922:	d113      	bne.n	800e94c <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800e924:	f107 0320 	add.w	r3, r7, #32
 800e928:	461a      	mov	r2, r3
 800e92a:	2100      	movs	r1, #0
 800e92c:	68f8      	ldr	r0, [r7, #12]
 800e92e:	f7fc f9ed 	bl	800ad0c <VL53L0X_GetLimitCheckValue>
 800e932:	4603      	mov	r3, r0
 800e934:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800e938:	6a3b      	ldr	r3, [r7, #32]
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d006      	beq.n	800e94c <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800e93e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e940:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800e942:	429a      	cmp	r2, r3
 800e944:	d902      	bls.n	800e94c <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800e946:	2301      	movs	r3, #1
 800e948:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800e94c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800e950:	2b00      	cmp	r3, #0
 800e952:	d109      	bne.n	800e968 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800e954:	f107 0329 	add.w	r3, r7, #41	@ 0x29
 800e958:	461a      	mov	r2, r3
 800e95a:	2102      	movs	r1, #2
 800e95c:	68f8      	ldr	r0, [r7, #12]
 800e95e:	f7fc f94f 	bl	800ac00 <VL53L0X_GetLimitCheckEnable>
 800e962:	4603      	mov	r3, r0
 800e964:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800e968:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d044      	beq.n	800e9fa <VL53L0X_get_pal_range_status+0x1d6>
 800e970:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800e974:	2b00      	cmp	r3, #0
 800e976:	d140      	bne.n	800e9fa <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800e978:	f107 031c 	add.w	r3, r7, #28
 800e97c:	461a      	mov	r2, r3
 800e97e:	2102      	movs	r1, #2
 800e980:	68f8      	ldr	r0, [r7, #12]
 800e982:	f7fc f9c3 	bl	800ad0c <VL53L0X_GetLimitCheckValue>
 800e986:	4603      	mov	r3, r0
 800e988:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800e98c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800e990:	2b00      	cmp	r3, #0
 800e992:	d107      	bne.n	800e9a4 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800e994:	2201      	movs	r2, #1
 800e996:	21ff      	movs	r1, #255	@ 0xff
 800e998:	68f8      	ldr	r0, [r7, #12]
 800e99a:	f000 f9bb 	bl	800ed14 <VL53L0X_WrByte>
 800e99e:	4603      	mov	r3, r0
 800e9a0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800e9a4:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d109      	bne.n	800e9c0 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 800e9ac:	f107 0316 	add.w	r3, r7, #22
 800e9b0:	461a      	mov	r2, r3
 800e9b2:	21b6      	movs	r1, #182	@ 0xb6
 800e9b4:	68f8      	ldr	r0, [r7, #12]
 800e9b6:	f000 fa59 	bl	800ee6c <VL53L0X_RdWord>
 800e9ba:	4603      	mov	r3, r0
 800e9bc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800e9c0:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d107      	bne.n	800e9d8 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800e9c8:	2200      	movs	r2, #0
 800e9ca:	21ff      	movs	r1, #255	@ 0xff
 800e9cc:	68f8      	ldr	r0, [r7, #12]
 800e9ce:	f000 f9a1 	bl	800ed14 <VL53L0X_WrByte>
 800e9d2:	4603      	mov	r3, r0
 800e9d4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800e9d8:	8afb      	ldrh	r3, [r7, #22]
 800e9da:	025b      	lsls	r3, r3, #9
 800e9dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e9e2:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148

		if ((SignalRefClipValue > 0) &&
 800e9e6:	69fb      	ldr	r3, [r7, #28]
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d006      	beq.n	800e9fa <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800e9ec:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800e9ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e9f0:	429a      	cmp	r2, r3
 800e9f2:	d902      	bls.n	800e9fa <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800e9f4:	2301      	movs	r3, #1
 800e9f6:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800e9fa:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d109      	bne.n	800ea16 <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800ea02:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800ea06:	461a      	mov	r2, r3
 800ea08:	2103      	movs	r1, #3
 800ea0a:	68f8      	ldr	r0, [r7, #12]
 800ea0c:	f7fc f8f8 	bl	800ac00 <VL53L0X_GetLimitCheckEnable>
 800ea10:	4603      	mov	r3, r0
 800ea12:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800ea16:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d023      	beq.n	800ea66 <VL53L0X_get_pal_range_status+0x242>
 800ea1e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d11f      	bne.n	800ea66 <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800ea26:	893b      	ldrh	r3, [r7, #8]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d102      	bne.n	800ea32 <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800ea2c:	2300      	movs	r3, #0
 800ea2e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ea30:	e005      	b.n	800ea3e <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	021a      	lsls	r2, r3, #8
 800ea36:	893b      	ldrh	r3, [r7, #8]
 800ea38:	fbb2 f3f3 	udiv	r3, r2, r3
 800ea3c:	637b      	str	r3, [r7, #52]	@ 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800ea3e:	f107 0318 	add.w	r3, r7, #24
 800ea42:	461a      	mov	r2, r3
 800ea44:	2103      	movs	r1, #3
 800ea46:	68f8      	ldr	r0, [r7, #12]
 800ea48:	f7fc f960 	bl	800ad0c <VL53L0X_GetLimitCheckValue>
 800ea4c:	4603      	mov	r3, r0
 800ea4e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800ea52:	69bb      	ldr	r3, [r7, #24]
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d006      	beq.n	800ea66 <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800ea58:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800ea5a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ea5c:	429a      	cmp	r2, r3
 800ea5e:	d202      	bcs.n	800ea66 <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800ea60:	2301      	movs	r3, #1
 800ea62:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ea66:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d14a      	bne.n	800eb04 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800ea6e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800ea72:	2b01      	cmp	r3, #1
 800ea74:	d103      	bne.n	800ea7e <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800ea76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ea78:	22ff      	movs	r2, #255	@ 0xff
 800ea7a:	701a      	strb	r2, [r3, #0]
 800ea7c:	e042      	b.n	800eb04 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800ea7e:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800ea82:	2b01      	cmp	r3, #1
 800ea84:	d007      	beq.n	800ea96 <VL53L0X_get_pal_range_status+0x272>
 800ea86:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800ea8a:	2b02      	cmp	r3, #2
 800ea8c:	d003      	beq.n	800ea96 <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800ea8e:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800ea92:	2b03      	cmp	r3, #3
 800ea94:	d103      	bne.n	800ea9e <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800ea96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ea98:	2205      	movs	r2, #5
 800ea9a:	701a      	strb	r2, [r3, #0]
 800ea9c:	e032      	b.n	800eb04 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800ea9e:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800eaa2:	2b06      	cmp	r3, #6
 800eaa4:	d003      	beq.n	800eaae <VL53L0X_get_pal_range_status+0x28a>
 800eaa6:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800eaaa:	2b09      	cmp	r3, #9
 800eaac:	d103      	bne.n	800eab6 <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800eaae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eab0:	2204      	movs	r2, #4
 800eab2:	701a      	strb	r2, [r3, #0]
 800eab4:	e026      	b.n	800eb04 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800eab6:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800eaba:	2b08      	cmp	r3, #8
 800eabc:	d007      	beq.n	800eace <VL53L0X_get_pal_range_status+0x2aa>
 800eabe:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800eac2:	2b0a      	cmp	r3, #10
 800eac4:	d003      	beq.n	800eace <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800eac6:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800eaca:	2b01      	cmp	r3, #1
 800eacc:	d103      	bne.n	800ead6 <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800eace:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ead0:	2203      	movs	r2, #3
 800ead2:	701a      	strb	r2, [r3, #0]
 800ead4:	e016      	b.n	800eb04 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800ead6:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800eada:	2b04      	cmp	r3, #4
 800eadc:	d003      	beq.n	800eae6 <VL53L0X_get_pal_range_status+0x2c2>
 800eade:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800eae2:	2b01      	cmp	r3, #1
 800eae4:	d103      	bne.n	800eaee <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800eae6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eae8:	2202      	movs	r2, #2
 800eaea:	701a      	strb	r2, [r3, #0]
 800eaec:	e00a      	b.n	800eb04 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800eaee:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800eaf2:	2b01      	cmp	r3, #1
 800eaf4:	d103      	bne.n	800eafe <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800eaf6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eaf8:	2201      	movs	r2, #1
 800eafa:	701a      	strb	r2, [r3, #0]
 800eafc:	e002      	b.n	800eb04 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800eafe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eb00:	2200      	movs	r2, #0
 800eb02:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800eb04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eb06:	781b      	ldrb	r3, [r3, #0]
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d102      	bne.n	800eb12 <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800eb0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800eb0e:	2200      	movs	r2, #0
 800eb10:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800eb12:	f107 032a 	add.w	r3, r7, #42	@ 0x2a
 800eb16:	461a      	mov	r2, r3
 800eb18:	2101      	movs	r1, #1
 800eb1a:	68f8      	ldr	r0, [r7, #12]
 800eb1c:	f7fc f870 	bl	800ac00 <VL53L0X_GetLimitCheckEnable>
 800eb20:	4603      	mov	r3, r0
 800eb22:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800eb26:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d14f      	bne.n	800ebce <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800eb2e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d003      	beq.n	800eb3e <VL53L0X_get_pal_range_status+0x31a>
 800eb36:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800eb3a:	2b01      	cmp	r3, #1
 800eb3c:	d103      	bne.n	800eb46 <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800eb3e:	2301      	movs	r3, #1
 800eb40:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800eb44:	e002      	b.n	800eb4c <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800eb46:	2300      	movs	r3, #0
 800eb48:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800eb52:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800eb56:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800eb5a:	2b04      	cmp	r3, #4
 800eb5c:	d003      	beq.n	800eb66 <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800eb5e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d103      	bne.n	800eb6e <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800eb66:	2301      	movs	r3, #1
 800eb68:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800eb6c:	e002      	b.n	800eb74 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800eb6e:	2300      	movs	r3, #0
 800eb70:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800eb7a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800eb7e:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d003      	beq.n	800eb8e <VL53L0X_get_pal_range_status+0x36a>
 800eb86:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800eb8a:	2b01      	cmp	r3, #1
 800eb8c:	d103      	bne.n	800eb96 <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800eb8e:	2301      	movs	r3, #1
 800eb90:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800eb94:	e002      	b.n	800eb9c <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800eb96:	2300      	movs	r3, #0
 800eb98:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800eba2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800eba6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d003      	beq.n	800ebb6 <VL53L0X_get_pal_range_status+0x392>
 800ebae:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800ebb2:	2b01      	cmp	r3, #1
 800ebb4:	d103      	bne.n	800ebbe <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800ebb6:	2301      	movs	r3, #1
 800ebb8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800ebbc:	e002      	b.n	800ebc4 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800ebbe:	2300      	movs	r3, #0
 800ebc0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800ebca:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ebce:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f

}
 800ebd2:	4618      	mov	r0, r3
 800ebd4:	3740      	adds	r7, #64	@ 0x40
 800ebd6:	46bd      	mov	sp, r7
 800ebd8:	bd80      	pop	{r7, pc}

0800ebda <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800ebda:	b580      	push	{r7, lr}
 800ebdc:	b088      	sub	sp, #32
 800ebde:	af02      	add	r7, sp, #8
 800ebe0:	60f8      	str	r0, [r7, #12]
 800ebe2:	60b9      	str	r1, [r7, #8]
 800ebe4:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	330a      	adds	r3, #10
 800ebea:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	f8d3 015c 	ldr.w	r0, [r3, #348]	@ 0x15c
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 800ebf8:	4619      	mov	r1, r3
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	b29a      	uxth	r2, r3
 800ebfe:	697b      	ldr	r3, [r7, #20]
 800ec00:	9300      	str	r3, [sp, #0]
 800ec02:	4613      	mov	r3, r2
 800ec04:	68ba      	ldr	r2, [r7, #8]
 800ec06:	f7f6 fb61 	bl	80052cc <HAL_I2C_Master_Transmit>
 800ec0a:	4603      	mov	r3, r0
 800ec0c:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800ec0e:	693b      	ldr	r3, [r7, #16]
}
 800ec10:	4618      	mov	r0, r3
 800ec12:	3718      	adds	r7, #24
 800ec14:	46bd      	mov	sp, r7
 800ec16:	bd80      	pop	{r7, pc}

0800ec18 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800ec18:	b580      	push	{r7, lr}
 800ec1a:	b088      	sub	sp, #32
 800ec1c:	af02      	add	r7, sp, #8
 800ec1e:	60f8      	str	r0, [r7, #12]
 800ec20:	60b9      	str	r1, [r7, #8]
 800ec22:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	330a      	adds	r3, #10
 800ec28:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	f8d3 015c 	ldr.w	r0, [r3, #348]	@ 0x15c
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 800ec36:	f043 0301 	orr.w	r3, r3, #1
 800ec3a:	b2db      	uxtb	r3, r3
 800ec3c:	4619      	mov	r1, r3
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	b29a      	uxth	r2, r3
 800ec42:	697b      	ldr	r3, [r7, #20]
 800ec44:	9300      	str	r3, [sp, #0]
 800ec46:	4613      	mov	r3, r2
 800ec48:	68ba      	ldr	r2, [r7, #8]
 800ec4a:	f7f6 fc33 	bl	80054b4 <HAL_I2C_Master_Receive>
 800ec4e:	4603      	mov	r3, r0
 800ec50:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800ec52:	693b      	ldr	r3, [r7, #16]
}
 800ec54:	4618      	mov	r0, r3
 800ec56:	3718      	adds	r7, #24
 800ec58:	46bd      	mov	sp, r7
 800ec5a:	bd80      	pop	{r7, pc}

0800ec5c <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800ec5c:	b580      	push	{r7, lr}
 800ec5e:	b086      	sub	sp, #24
 800ec60:	af00      	add	r7, sp, #0
 800ec62:	60f8      	str	r0, [r7, #12]
 800ec64:	607a      	str	r2, [r7, #4]
 800ec66:	603b      	str	r3, [r7, #0]
 800ec68:	460b      	mov	r3, r1
 800ec6a:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ec6c:	2300      	movs	r3, #0
 800ec6e:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800ec70:	683b      	ldr	r3, [r7, #0]
 800ec72:	2b3f      	cmp	r3, #63	@ 0x3f
 800ec74:	d902      	bls.n	800ec7c <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800ec76:	f06f 0303 	mvn.w	r3, #3
 800ec7a:	e016      	b.n	800ecaa <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 800ec7c:	4a0d      	ldr	r2, [pc, #52]	@ (800ecb4 <VL53L0X_WriteMulti+0x58>)
 800ec7e:	7afb      	ldrb	r3, [r7, #11]
 800ec80:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800ec82:	683a      	ldr	r2, [r7, #0]
 800ec84:	6879      	ldr	r1, [r7, #4]
 800ec86:	480c      	ldr	r0, [pc, #48]	@ (800ecb8 <VL53L0X_WriteMulti+0x5c>)
 800ec88:	f004 ff07 	bl	8013a9a <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800ec8c:	683b      	ldr	r3, [r7, #0]
 800ec8e:	3301      	adds	r3, #1
 800ec90:	461a      	mov	r2, r3
 800ec92:	4908      	ldr	r1, [pc, #32]	@ (800ecb4 <VL53L0X_WriteMulti+0x58>)
 800ec94:	68f8      	ldr	r0, [r7, #12]
 800ec96:	f7ff ffa0 	bl	800ebda <_I2CWrite>
 800ec9a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ec9c:	693b      	ldr	r3, [r7, #16]
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d001      	beq.n	800eca6 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800eca2:	23ec      	movs	r3, #236	@ 0xec
 800eca4:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800eca6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ecaa:	4618      	mov	r0, r3
 800ecac:	3718      	adds	r7, #24
 800ecae:	46bd      	mov	sp, r7
 800ecb0:	bd80      	pop	{r7, pc}
 800ecb2:	bf00      	nop
 800ecb4:	2000c57c 	.word	0x2000c57c
 800ecb8:	2000c57d 	.word	0x2000c57d

0800ecbc <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800ecbc:	b580      	push	{r7, lr}
 800ecbe:	b086      	sub	sp, #24
 800ecc0:	af00      	add	r7, sp, #0
 800ecc2:	60f8      	str	r0, [r7, #12]
 800ecc4:	607a      	str	r2, [r7, #4]
 800ecc6:	603b      	str	r3, [r7, #0]
 800ecc8:	460b      	mov	r3, r1
 800ecca:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800eccc:	2300      	movs	r3, #0
 800ecce:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800ecd0:	f107 030b 	add.w	r3, r7, #11
 800ecd4:	2201      	movs	r2, #1
 800ecd6:	4619      	mov	r1, r3
 800ecd8:	68f8      	ldr	r0, [r7, #12]
 800ecda:	f7ff ff7e 	bl	800ebda <_I2CWrite>
 800ecde:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ece0:	693b      	ldr	r3, [r7, #16]
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d002      	beq.n	800ecec <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ece6:	23ec      	movs	r3, #236	@ 0xec
 800ece8:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ecea:	e00c      	b.n	800ed06 <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800ecec:	683a      	ldr	r2, [r7, #0]
 800ecee:	6879      	ldr	r1, [r7, #4]
 800ecf0:	68f8      	ldr	r0, [r7, #12]
 800ecf2:	f7ff ff91 	bl	800ec18 <_I2CRead>
 800ecf6:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ecf8:	693b      	ldr	r3, [r7, #16]
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d002      	beq.n	800ed04 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ecfe:	23ec      	movs	r3, #236	@ 0xec
 800ed00:	75fb      	strb	r3, [r7, #23]
 800ed02:	e000      	b.n	800ed06 <VL53L0X_ReadMulti+0x4a>
    }
done:
 800ed04:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800ed06:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ed0a:	4618      	mov	r0, r3
 800ed0c:	3718      	adds	r7, #24
 800ed0e:	46bd      	mov	sp, r7
 800ed10:	bd80      	pop	{r7, pc}
	...

0800ed14 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800ed14:	b580      	push	{r7, lr}
 800ed16:	b084      	sub	sp, #16
 800ed18:	af00      	add	r7, sp, #0
 800ed1a:	6078      	str	r0, [r7, #4]
 800ed1c:	460b      	mov	r3, r1
 800ed1e:	70fb      	strb	r3, [r7, #3]
 800ed20:	4613      	mov	r3, r2
 800ed22:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ed24:	2300      	movs	r3, #0
 800ed26:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800ed28:	4a0b      	ldr	r2, [pc, #44]	@ (800ed58 <VL53L0X_WrByte+0x44>)
 800ed2a:	78fb      	ldrb	r3, [r7, #3]
 800ed2c:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800ed2e:	4a0a      	ldr	r2, [pc, #40]	@ (800ed58 <VL53L0X_WrByte+0x44>)
 800ed30:	78bb      	ldrb	r3, [r7, #2]
 800ed32:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800ed34:	2202      	movs	r2, #2
 800ed36:	4908      	ldr	r1, [pc, #32]	@ (800ed58 <VL53L0X_WrByte+0x44>)
 800ed38:	6878      	ldr	r0, [r7, #4]
 800ed3a:	f7ff ff4e 	bl	800ebda <_I2CWrite>
 800ed3e:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800ed40:	68bb      	ldr	r3, [r7, #8]
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d001      	beq.n	800ed4a <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ed46:	23ec      	movs	r3, #236	@ 0xec
 800ed48:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800ed4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ed4e:	4618      	mov	r0, r3
 800ed50:	3710      	adds	r7, #16
 800ed52:	46bd      	mov	sp, r7
 800ed54:	bd80      	pop	{r7, pc}
 800ed56:	bf00      	nop
 800ed58:	2000c57c 	.word	0x2000c57c

0800ed5c <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800ed5c:	b580      	push	{r7, lr}
 800ed5e:	b084      	sub	sp, #16
 800ed60:	af00      	add	r7, sp, #0
 800ed62:	6078      	str	r0, [r7, #4]
 800ed64:	460b      	mov	r3, r1
 800ed66:	70fb      	strb	r3, [r7, #3]
 800ed68:	4613      	mov	r3, r2
 800ed6a:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ed6c:	2300      	movs	r3, #0
 800ed6e:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800ed70:	4a0e      	ldr	r2, [pc, #56]	@ (800edac <VL53L0X_WrWord+0x50>)
 800ed72:	78fb      	ldrb	r3, [r7, #3]
 800ed74:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800ed76:	883b      	ldrh	r3, [r7, #0]
 800ed78:	0a1b      	lsrs	r3, r3, #8
 800ed7a:	b29b      	uxth	r3, r3
 800ed7c:	b2da      	uxtb	r2, r3
 800ed7e:	4b0b      	ldr	r3, [pc, #44]	@ (800edac <VL53L0X_WrWord+0x50>)
 800ed80:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800ed82:	883b      	ldrh	r3, [r7, #0]
 800ed84:	b2da      	uxtb	r2, r3
 800ed86:	4b09      	ldr	r3, [pc, #36]	@ (800edac <VL53L0X_WrWord+0x50>)
 800ed88:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800ed8a:	2203      	movs	r2, #3
 800ed8c:	4907      	ldr	r1, [pc, #28]	@ (800edac <VL53L0X_WrWord+0x50>)
 800ed8e:	6878      	ldr	r0, [r7, #4]
 800ed90:	f7ff ff23 	bl	800ebda <_I2CWrite>
 800ed94:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800ed96:	68bb      	ldr	r3, [r7, #8]
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d001      	beq.n	800eda0 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ed9c:	23ec      	movs	r3, #236	@ 0xec
 800ed9e:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800eda0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800eda4:	4618      	mov	r0, r3
 800eda6:	3710      	adds	r7, #16
 800eda8:	46bd      	mov	sp, r7
 800edaa:	bd80      	pop	{r7, pc}
 800edac:	2000c57c 	.word	0x2000c57c

0800edb0 <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800edb0:	b580      	push	{r7, lr}
 800edb2:	b084      	sub	sp, #16
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	6078      	str	r0, [r7, #4]
 800edb8:	4608      	mov	r0, r1
 800edba:	4611      	mov	r1, r2
 800edbc:	461a      	mov	r2, r3
 800edbe:	4603      	mov	r3, r0
 800edc0:	70fb      	strb	r3, [r7, #3]
 800edc2:	460b      	mov	r3, r1
 800edc4:	70bb      	strb	r3, [r7, #2]
 800edc6:	4613      	mov	r3, r2
 800edc8:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800edca:	2300      	movs	r3, #0
 800edcc:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800edce:	f107 020e 	add.w	r2, r7, #14
 800edd2:	78fb      	ldrb	r3, [r7, #3]
 800edd4:	4619      	mov	r1, r3
 800edd6:	6878      	ldr	r0, [r7, #4]
 800edd8:	f000 f81e 	bl	800ee18 <VL53L0X_RdByte>
 800eddc:	4603      	mov	r3, r0
 800edde:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 800ede0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d110      	bne.n	800ee0a <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 800ede8:	7bba      	ldrb	r2, [r7, #14]
 800edea:	78bb      	ldrb	r3, [r7, #2]
 800edec:	4013      	ands	r3, r2
 800edee:	b2da      	uxtb	r2, r3
 800edf0:	787b      	ldrb	r3, [r7, #1]
 800edf2:	4313      	orrs	r3, r2
 800edf4:	b2db      	uxtb	r3, r3
 800edf6:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800edf8:	7bba      	ldrb	r2, [r7, #14]
 800edfa:	78fb      	ldrb	r3, [r7, #3]
 800edfc:	4619      	mov	r1, r3
 800edfe:	6878      	ldr	r0, [r7, #4]
 800ee00:	f7ff ff88 	bl	800ed14 <VL53L0X_WrByte>
 800ee04:	4603      	mov	r3, r0
 800ee06:	73fb      	strb	r3, [r7, #15]
 800ee08:	e000      	b.n	800ee0c <VL53L0X_UpdateByte+0x5c>
        goto done;
 800ee0a:	bf00      	nop
done:
    return Status;
 800ee0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ee10:	4618      	mov	r0, r3
 800ee12:	3710      	adds	r7, #16
 800ee14:	46bd      	mov	sp, r7
 800ee16:	bd80      	pop	{r7, pc}

0800ee18 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800ee18:	b580      	push	{r7, lr}
 800ee1a:	b086      	sub	sp, #24
 800ee1c:	af00      	add	r7, sp, #0
 800ee1e:	60f8      	str	r0, [r7, #12]
 800ee20:	460b      	mov	r3, r1
 800ee22:	607a      	str	r2, [r7, #4]
 800ee24:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ee26:	2300      	movs	r3, #0
 800ee28:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800ee2a:	f107 030b 	add.w	r3, r7, #11
 800ee2e:	2201      	movs	r2, #1
 800ee30:	4619      	mov	r1, r3
 800ee32:	68f8      	ldr	r0, [r7, #12]
 800ee34:	f7ff fed1 	bl	800ebda <_I2CWrite>
 800ee38:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800ee3a:	693b      	ldr	r3, [r7, #16]
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d002      	beq.n	800ee46 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ee40:	23ec      	movs	r3, #236	@ 0xec
 800ee42:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ee44:	e00c      	b.n	800ee60 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 800ee46:	2201      	movs	r2, #1
 800ee48:	6879      	ldr	r1, [r7, #4]
 800ee4a:	68f8      	ldr	r0, [r7, #12]
 800ee4c:	f7ff fee4 	bl	800ec18 <_I2CRead>
 800ee50:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ee52:	693b      	ldr	r3, [r7, #16]
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d002      	beq.n	800ee5e <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ee58:	23ec      	movs	r3, #236	@ 0xec
 800ee5a:	75fb      	strb	r3, [r7, #23]
 800ee5c:	e000      	b.n	800ee60 <VL53L0X_RdByte+0x48>
    }
done:
 800ee5e:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800ee60:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ee64:	4618      	mov	r0, r3
 800ee66:	3718      	adds	r7, #24
 800ee68:	46bd      	mov	sp, r7
 800ee6a:	bd80      	pop	{r7, pc}

0800ee6c <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800ee6c:	b580      	push	{r7, lr}
 800ee6e:	b086      	sub	sp, #24
 800ee70:	af00      	add	r7, sp, #0
 800ee72:	60f8      	str	r0, [r7, #12]
 800ee74:	460b      	mov	r3, r1
 800ee76:	607a      	str	r2, [r7, #4]
 800ee78:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ee7a:	2300      	movs	r3, #0
 800ee7c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800ee7e:	f107 030b 	add.w	r3, r7, #11
 800ee82:	2201      	movs	r2, #1
 800ee84:	4619      	mov	r1, r3
 800ee86:	68f8      	ldr	r0, [r7, #12]
 800ee88:	f7ff fea7 	bl	800ebda <_I2CWrite>
 800ee8c:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800ee8e:	693b      	ldr	r3, [r7, #16]
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d002      	beq.n	800ee9a <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ee94:	23ec      	movs	r3, #236	@ 0xec
 800ee96:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ee98:	e015      	b.n	800eec6 <VL53L0X_RdWord+0x5a>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800ee9a:	2202      	movs	r2, #2
 800ee9c:	490d      	ldr	r1, [pc, #52]	@ (800eed4 <VL53L0X_RdWord+0x68>)
 800ee9e:	68f8      	ldr	r0, [r7, #12]
 800eea0:	f7ff feba 	bl	800ec18 <_I2CRead>
 800eea4:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800eea6:	693b      	ldr	r3, [r7, #16]
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d002      	beq.n	800eeb2 <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800eeac:	23ec      	movs	r3, #236	@ 0xec
 800eeae:	75fb      	strb	r3, [r7, #23]
        goto done;
 800eeb0:	e009      	b.n	800eec6 <VL53L0X_RdWord+0x5a>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800eeb2:	4b08      	ldr	r3, [pc, #32]	@ (800eed4 <VL53L0X_RdWord+0x68>)
 800eeb4:	781b      	ldrb	r3, [r3, #0]
 800eeb6:	021b      	lsls	r3, r3, #8
 800eeb8:	b29b      	uxth	r3, r3
 800eeba:	4a06      	ldr	r2, [pc, #24]	@ (800eed4 <VL53L0X_RdWord+0x68>)
 800eebc:	7852      	ldrb	r2, [r2, #1]
 800eebe:	4413      	add	r3, r2
 800eec0:	b29a      	uxth	r2, r3
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 800eec6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800eeca:	4618      	mov	r0, r3
 800eecc:	3718      	adds	r7, #24
 800eece:	46bd      	mov	sp, r7
 800eed0:	bd80      	pop	{r7, pc}
 800eed2:	bf00      	nop
 800eed4:	2000c57c 	.word	0x2000c57c

0800eed8 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 800eed8:	b580      	push	{r7, lr}
 800eeda:	b086      	sub	sp, #24
 800eedc:	af00      	add	r7, sp, #0
 800eede:	60f8      	str	r0, [r7, #12]
 800eee0:	460b      	mov	r3, r1
 800eee2:	607a      	str	r2, [r7, #4]
 800eee4:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800eee6:	2300      	movs	r3, #0
 800eee8:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800eeea:	f107 030b 	add.w	r3, r7, #11
 800eeee:	2201      	movs	r2, #1
 800eef0:	4619      	mov	r1, r3
 800eef2:	68f8      	ldr	r0, [r7, #12]
 800eef4:	f7ff fe71 	bl	800ebda <_I2CWrite>
 800eef8:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800eefa:	693b      	ldr	r3, [r7, #16]
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d002      	beq.n	800ef06 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ef00:	23ec      	movs	r3, #236	@ 0xec
 800ef02:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ef04:	e01b      	b.n	800ef3e <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800ef06:	2204      	movs	r2, #4
 800ef08:	4910      	ldr	r1, [pc, #64]	@ (800ef4c <VL53L0X_RdDWord+0x74>)
 800ef0a:	68f8      	ldr	r0, [r7, #12]
 800ef0c:	f7ff fe84 	bl	800ec18 <_I2CRead>
 800ef10:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ef12:	693b      	ldr	r3, [r7, #16]
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d002      	beq.n	800ef1e <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ef18:	23ec      	movs	r3, #236	@ 0xec
 800ef1a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ef1c:	e00f      	b.n	800ef3e <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800ef1e:	4b0b      	ldr	r3, [pc, #44]	@ (800ef4c <VL53L0X_RdDWord+0x74>)
 800ef20:	781b      	ldrb	r3, [r3, #0]
 800ef22:	061a      	lsls	r2, r3, #24
 800ef24:	4b09      	ldr	r3, [pc, #36]	@ (800ef4c <VL53L0X_RdDWord+0x74>)
 800ef26:	785b      	ldrb	r3, [r3, #1]
 800ef28:	041b      	lsls	r3, r3, #16
 800ef2a:	441a      	add	r2, r3
 800ef2c:	4b07      	ldr	r3, [pc, #28]	@ (800ef4c <VL53L0X_RdDWord+0x74>)
 800ef2e:	789b      	ldrb	r3, [r3, #2]
 800ef30:	021b      	lsls	r3, r3, #8
 800ef32:	4413      	add	r3, r2
 800ef34:	4a05      	ldr	r2, [pc, #20]	@ (800ef4c <VL53L0X_RdDWord+0x74>)
 800ef36:	78d2      	ldrb	r2, [r2, #3]
 800ef38:	441a      	add	r2, r3
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 800ef3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ef42:	4618      	mov	r0, r3
 800ef44:	3718      	adds	r7, #24
 800ef46:	46bd      	mov	sp, r7
 800ef48:	bd80      	pop	{r7, pc}
 800ef4a:	bf00      	nop
 800ef4c:	2000c57c 	.word	0x2000c57c

0800ef50 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 800ef50:	b580      	push	{r7, lr}
 800ef52:	b084      	sub	sp, #16
 800ef54:	af00      	add	r7, sp, #0
 800ef56:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800ef58:	2300      	movs	r3, #0
 800ef5a:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800ef5c:	2002      	movs	r0, #2
 800ef5e:	f7f5 fc63 	bl	8004828 <HAL_Delay>
    return status;
 800ef62:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ef66:	4618      	mov	r0, r3
 800ef68:	3710      	adds	r7, #16
 800ef6a:	46bd      	mov	sp, r7
 800ef6c:	bd80      	pop	{r7, pc}
	...

0800ef70 <fourline_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool fourline_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 800ef70:	b580      	push	{r7, lr}
 800ef72:	b082      	sub	sp, #8
 800ef74:	af00      	add	r7, sp, #0
 800ef76:	6078      	str	r0, [r7, #4]
 800ef78:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_fourline_activations_map, 1, params)) {
 800ef7a:	683a      	ldr	r2, [r7, #0]
 800ef7c:	2101      	movs	r1, #1
 800ef7e:	4850      	ldr	r0, [pc, #320]	@ (800f0c0 <fourline_configure_activations+0x150>)
 800ef80:	f000 fbea 	bl	800f758 <ai_platform_get_activations_map>
 800ef84:	4603      	mov	r3, r0
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	f000 8090 	beq.w	800f0ac <fourline_configure_activations+0x13c>
    /* Updating activations (byte) offsets */
    
    input_0_output_array.data = AI_PTR(g_fourline_activations_map[0] + 48);
 800ef8c:	4b4c      	ldr	r3, [pc, #304]	@ (800f0c0 <fourline_configure_activations+0x150>)
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	3330      	adds	r3, #48	@ 0x30
 800ef92:	4a4c      	ldr	r2, [pc, #304]	@ (800f0c4 <fourline_configure_activations+0x154>)
 800ef94:	6093      	str	r3, [r2, #8]
    input_0_output_array.data_start = AI_PTR(g_fourline_activations_map[0] + 48);
 800ef96:	4b4a      	ldr	r3, [pc, #296]	@ (800f0c0 <fourline_configure_activations+0x150>)
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	3330      	adds	r3, #48	@ 0x30
 800ef9c:	4a49      	ldr	r2, [pc, #292]	@ (800f0c4 <fourline_configure_activations+0x154>)
 800ef9e:	60d3      	str	r3, [r2, #12]
    
    conv2d_9_conv2d_output_array.data = AI_PTR(g_fourline_activations_map[0] + 256);
 800efa0:	4b47      	ldr	r3, [pc, #284]	@ (800f0c0 <fourline_configure_activations+0x150>)
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800efa8:	4a47      	ldr	r2, [pc, #284]	@ (800f0c8 <fourline_configure_activations+0x158>)
 800efaa:	6093      	str	r3, [r2, #8]
    conv2d_9_conv2d_output_array.data_start = AI_PTR(g_fourline_activations_map[0] + 256);
 800efac:	4b44      	ldr	r3, [pc, #272]	@ (800f0c0 <fourline_configure_activations+0x150>)
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800efb4:	4a44      	ldr	r2, [pc, #272]	@ (800f0c8 <fourline_configure_activations+0x158>)
 800efb6:	60d3      	str	r3, [r2, #12]
    
    conv2d_9_output_array.data = AI_PTR(g_fourline_activations_map[0] + 256);
 800efb8:	4b41      	ldr	r3, [pc, #260]	@ (800f0c0 <fourline_configure_activations+0x150>)
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800efc0:	4a42      	ldr	r2, [pc, #264]	@ (800f0cc <fourline_configure_activations+0x15c>)
 800efc2:	6093      	str	r3, [r2, #8]
    conv2d_9_output_array.data_start = AI_PTR(g_fourline_activations_map[0] + 256);
 800efc4:	4b3e      	ldr	r3, [pc, #248]	@ (800f0c0 <fourline_configure_activations+0x150>)
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800efcc:	4a3f      	ldr	r2, [pc, #252]	@ (800f0cc <fourline_configure_activations+0x15c>)
 800efce:	60d3      	str	r3, [r2, #12]
    
    dense_54_dense_output_array.data = AI_PTR(g_fourline_activations_map[0] + 0);
 800efd0:	4b3b      	ldr	r3, [pc, #236]	@ (800f0c0 <fourline_configure_activations+0x150>)
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	4a3e      	ldr	r2, [pc, #248]	@ (800f0d0 <fourline_configure_activations+0x160>)
 800efd6:	6093      	str	r3, [r2, #8]
    dense_54_dense_output_array.data_start = AI_PTR(g_fourline_activations_map[0] + 0);
 800efd8:	4b39      	ldr	r3, [pc, #228]	@ (800f0c0 <fourline_configure_activations+0x150>)
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	4a3c      	ldr	r2, [pc, #240]	@ (800f0d0 <fourline_configure_activations+0x160>)
 800efde:	60d3      	str	r3, [r2, #12]
    
    dense_54_output_array.data = AI_PTR(g_fourline_activations_map[0] + 256);
 800efe0:	4b37      	ldr	r3, [pc, #220]	@ (800f0c0 <fourline_configure_activations+0x150>)
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800efe8:	4a3a      	ldr	r2, [pc, #232]	@ (800f0d4 <fourline_configure_activations+0x164>)
 800efea:	6093      	str	r3, [r2, #8]
    dense_54_output_array.data_start = AI_PTR(g_fourline_activations_map[0] + 256);
 800efec:	4b34      	ldr	r3, [pc, #208]	@ (800f0c0 <fourline_configure_activations+0x150>)
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800eff4:	4a37      	ldr	r2, [pc, #220]	@ (800f0d4 <fourline_configure_activations+0x164>)
 800eff6:	60d3      	str	r3, [r2, #12]
    
    dense_55_dense_output_array.data = AI_PTR(g_fourline_activations_map[0] + 0);
 800eff8:	4b31      	ldr	r3, [pc, #196]	@ (800f0c0 <fourline_configure_activations+0x150>)
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	4a36      	ldr	r2, [pc, #216]	@ (800f0d8 <fourline_configure_activations+0x168>)
 800effe:	6093      	str	r3, [r2, #8]
    dense_55_dense_output_array.data_start = AI_PTR(g_fourline_activations_map[0] + 0);
 800f000:	4b2f      	ldr	r3, [pc, #188]	@ (800f0c0 <fourline_configure_activations+0x150>)
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	4a34      	ldr	r2, [pc, #208]	@ (800f0d8 <fourline_configure_activations+0x168>)
 800f006:	60d3      	str	r3, [r2, #12]
    
    dense_55_output_array.data = AI_PTR(g_fourline_activations_map[0] + 256);
 800f008:	4b2d      	ldr	r3, [pc, #180]	@ (800f0c0 <fourline_configure_activations+0x150>)
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800f010:	4a32      	ldr	r2, [pc, #200]	@ (800f0dc <fourline_configure_activations+0x16c>)
 800f012:	6093      	str	r3, [r2, #8]
    dense_55_output_array.data_start = AI_PTR(g_fourline_activations_map[0] + 256);
 800f014:	4b2a      	ldr	r3, [pc, #168]	@ (800f0c0 <fourline_configure_activations+0x150>)
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800f01c:	4a2f      	ldr	r2, [pc, #188]	@ (800f0dc <fourline_configure_activations+0x16c>)
 800f01e:	60d3      	str	r3, [r2, #12]
    
    dense_56_dense_output_array.data = AI_PTR(g_fourline_activations_map[0] + 0);
 800f020:	4b27      	ldr	r3, [pc, #156]	@ (800f0c0 <fourline_configure_activations+0x150>)
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	4a2e      	ldr	r2, [pc, #184]	@ (800f0e0 <fourline_configure_activations+0x170>)
 800f026:	6093      	str	r3, [r2, #8]
    dense_56_dense_output_array.data_start = AI_PTR(g_fourline_activations_map[0] + 0);
 800f028:	4b25      	ldr	r3, [pc, #148]	@ (800f0c0 <fourline_configure_activations+0x150>)
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	4a2c      	ldr	r2, [pc, #176]	@ (800f0e0 <fourline_configure_activations+0x170>)
 800f02e:	60d3      	str	r3, [r2, #12]
    
    dense_56_output_array.data = AI_PTR(g_fourline_activations_map[0] + 256);
 800f030:	4b23      	ldr	r3, [pc, #140]	@ (800f0c0 <fourline_configure_activations+0x150>)
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800f038:	4a2a      	ldr	r2, [pc, #168]	@ (800f0e4 <fourline_configure_activations+0x174>)
 800f03a:	6093      	str	r3, [r2, #8]
    dense_56_output_array.data_start = AI_PTR(g_fourline_activations_map[0] + 256);
 800f03c:	4b20      	ldr	r3, [pc, #128]	@ (800f0c0 <fourline_configure_activations+0x150>)
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800f044:	4a27      	ldr	r2, [pc, #156]	@ (800f0e4 <fourline_configure_activations+0x174>)
 800f046:	60d3      	str	r3, [r2, #12]
    
    dense_57_dense_output_array.data = AI_PTR(g_fourline_activations_map[0] + 0);
 800f048:	4b1d      	ldr	r3, [pc, #116]	@ (800f0c0 <fourline_configure_activations+0x150>)
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	4a26      	ldr	r2, [pc, #152]	@ (800f0e8 <fourline_configure_activations+0x178>)
 800f04e:	6093      	str	r3, [r2, #8]
    dense_57_dense_output_array.data_start = AI_PTR(g_fourline_activations_map[0] + 0);
 800f050:	4b1b      	ldr	r3, [pc, #108]	@ (800f0c0 <fourline_configure_activations+0x150>)
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	4a24      	ldr	r2, [pc, #144]	@ (800f0e8 <fourline_configure_activations+0x178>)
 800f056:	60d3      	str	r3, [r2, #12]
    
    dense_57_output_array.data = AI_PTR(g_fourline_activations_map[0] + 256);
 800f058:	4b19      	ldr	r3, [pc, #100]	@ (800f0c0 <fourline_configure_activations+0x150>)
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800f060:	4a22      	ldr	r2, [pc, #136]	@ (800f0ec <fourline_configure_activations+0x17c>)
 800f062:	6093      	str	r3, [r2, #8]
    dense_57_output_array.data_start = AI_PTR(g_fourline_activations_map[0] + 256);
 800f064:	4b16      	ldr	r3, [pc, #88]	@ (800f0c0 <fourline_configure_activations+0x150>)
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800f06c:	4a1f      	ldr	r2, [pc, #124]	@ (800f0ec <fourline_configure_activations+0x17c>)
 800f06e:	60d3      	str	r3, [r2, #12]
    
    dense_58_dense_output_array.data = AI_PTR(g_fourline_activations_map[0] + 0);
 800f070:	4b13      	ldr	r3, [pc, #76]	@ (800f0c0 <fourline_configure_activations+0x150>)
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	4a1e      	ldr	r2, [pc, #120]	@ (800f0f0 <fourline_configure_activations+0x180>)
 800f076:	6093      	str	r3, [r2, #8]
    dense_58_dense_output_array.data_start = AI_PTR(g_fourline_activations_map[0] + 0);
 800f078:	4b11      	ldr	r3, [pc, #68]	@ (800f0c0 <fourline_configure_activations+0x150>)
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	4a1c      	ldr	r2, [pc, #112]	@ (800f0f0 <fourline_configure_activations+0x180>)
 800f07e:	60d3      	str	r3, [r2, #12]
    
    dense_58_output_array.data = AI_PTR(g_fourline_activations_map[0] + 256);
 800f080:	4b0f      	ldr	r3, [pc, #60]	@ (800f0c0 <fourline_configure_activations+0x150>)
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800f088:	4a1a      	ldr	r2, [pc, #104]	@ (800f0f4 <fourline_configure_activations+0x184>)
 800f08a:	6093      	str	r3, [r2, #8]
    dense_58_output_array.data_start = AI_PTR(g_fourline_activations_map[0] + 256);
 800f08c:	4b0c      	ldr	r3, [pc, #48]	@ (800f0c0 <fourline_configure_activations+0x150>)
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800f094:	4a17      	ldr	r2, [pc, #92]	@ (800f0f4 <fourline_configure_activations+0x184>)
 800f096:	60d3      	str	r3, [r2, #12]
    
    dense_59_dense_output_array.data = AI_PTR(g_fourline_activations_map[0] + 0);
 800f098:	4b09      	ldr	r3, [pc, #36]	@ (800f0c0 <fourline_configure_activations+0x150>)
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	4a16      	ldr	r2, [pc, #88]	@ (800f0f8 <fourline_configure_activations+0x188>)
 800f09e:	6093      	str	r3, [r2, #8]
    dense_59_dense_output_array.data_start = AI_PTR(g_fourline_activations_map[0] + 0);
 800f0a0:	4b07      	ldr	r3, [pc, #28]	@ (800f0c0 <fourline_configure_activations+0x150>)
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	4a14      	ldr	r2, [pc, #80]	@ (800f0f8 <fourline_configure_activations+0x188>)
 800f0a6:	60d3      	str	r3, [r2, #12]
    
    return true;
 800f0a8:	2301      	movs	r3, #1
 800f0aa:	e005      	b.n	800f0b8 <fourline_configure_activations+0x148>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 800f0ac:	2213      	movs	r2, #19
 800f0ae:	2130      	movs	r1, #48	@ 0x30
 800f0b0:	6878      	ldr	r0, [r7, #4]
 800f0b2:	f000 fccf 	bl	800fa54 <ai_platform_network_set_error>
  return false;
 800f0b6:	2300      	movs	r3, #0
}
 800f0b8:	4618      	mov	r0, r3
 800f0ba:	3708      	adds	r7, #8
 800f0bc:	46bd      	mov	sp, r7
 800f0be:	bd80      	pop	{r7, pc}
 800f0c0:	2000c5bc 	.word	0x2000c5bc
 800f0c4:	2000066c 	.word	0x2000066c
 800f0c8:	2000067c 	.word	0x2000067c
 800f0cc:	2000068c 	.word	0x2000068c
 800f0d0:	2000069c 	.word	0x2000069c
 800f0d4:	200006ac 	.word	0x200006ac
 800f0d8:	200006bc 	.word	0x200006bc
 800f0dc:	200006cc 	.word	0x200006cc
 800f0e0:	200006dc 	.word	0x200006dc
 800f0e4:	200006ec 	.word	0x200006ec
 800f0e8:	200006fc 	.word	0x200006fc
 800f0ec:	2000070c 	.word	0x2000070c
 800f0f0:	2000071c 	.word	0x2000071c
 800f0f4:	2000072c 	.word	0x2000072c
 800f0f8:	2000073c 	.word	0x2000073c

0800f0fc <fourline_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool fourline_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 800f0fc:	b580      	push	{r7, lr}
 800f0fe:	b082      	sub	sp, #8
 800f100:	af00      	add	r7, sp, #0
 800f102:	6078      	str	r0, [r7, #4]
 800f104:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_fourline_weights_map, 1, params)) {
 800f106:	683a      	ldr	r2, [r7, #0]
 800f108:	2101      	movs	r1, #1
 800f10a:	4884      	ldr	r0, [pc, #528]	@ (800f31c <fourline_configure_weights+0x220>)
 800f10c:	f000 facc 	bl	800f6a8 <ai_platform_get_weights_map>
 800f110:	4603      	mov	r3, r0
 800f112:	2b00      	cmp	r3, #0
 800f114:	f000 80f8 	beq.w	800f308 <fourline_configure_weights+0x20c>
    /* Updating weights (byte) offsets */
    
    conv2d_9_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 800f118:	4b81      	ldr	r3, [pc, #516]	@ (800f320 <fourline_configure_weights+0x224>)
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f120:	4a7f      	ldr	r2, [pc, #508]	@ (800f320 <fourline_configure_weights+0x224>)
 800f122:	6013      	str	r3, [r2, #0]
    conv2d_9_conv2d_bias_array.data = AI_PTR(g_fourline_weights_map[0] + 0);
 800f124:	4b7d      	ldr	r3, [pc, #500]	@ (800f31c <fourline_configure_weights+0x220>)
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	4a7d      	ldr	r2, [pc, #500]	@ (800f320 <fourline_configure_weights+0x224>)
 800f12a:	6093      	str	r3, [r2, #8]
    conv2d_9_conv2d_bias_array.data_start = AI_PTR(g_fourline_weights_map[0] + 0);
 800f12c:	4b7b      	ldr	r3, [pc, #492]	@ (800f31c <fourline_configure_weights+0x220>)
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	4a7b      	ldr	r2, [pc, #492]	@ (800f320 <fourline_configure_weights+0x224>)
 800f132:	60d3      	str	r3, [r2, #12]
    
    dense_54_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800f134:	4b7b      	ldr	r3, [pc, #492]	@ (800f324 <fourline_configure_weights+0x228>)
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f13c:	4a79      	ldr	r2, [pc, #484]	@ (800f324 <fourline_configure_weights+0x228>)
 800f13e:	6013      	str	r3, [r2, #0]
    dense_54_dense_weights_array.data = AI_PTR(g_fourline_weights_map[0] + 64);
 800f140:	4b76      	ldr	r3, [pc, #472]	@ (800f31c <fourline_configure_weights+0x220>)
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	3340      	adds	r3, #64	@ 0x40
 800f146:	4a77      	ldr	r2, [pc, #476]	@ (800f324 <fourline_configure_weights+0x228>)
 800f148:	6093      	str	r3, [r2, #8]
    dense_54_dense_weights_array.data_start = AI_PTR(g_fourline_weights_map[0] + 64);
 800f14a:	4b74      	ldr	r3, [pc, #464]	@ (800f31c <fourline_configure_weights+0x220>)
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	3340      	adds	r3, #64	@ 0x40
 800f150:	4a74      	ldr	r2, [pc, #464]	@ (800f324 <fourline_configure_weights+0x228>)
 800f152:	60d3      	str	r3, [r2, #12]
    
    dense_54_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800f154:	4b74      	ldr	r3, [pc, #464]	@ (800f328 <fourline_configure_weights+0x22c>)
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f15c:	4a72      	ldr	r2, [pc, #456]	@ (800f328 <fourline_configure_weights+0x22c>)
 800f15e:	6013      	str	r3, [r2, #0]
    dense_54_dense_bias_array.data = AI_PTR(g_fourline_weights_map[0] + 213056);
 800f160:	4b6e      	ldr	r3, [pc, #440]	@ (800f31c <fourline_configure_weights+0x220>)
 800f162:	681a      	ldr	r2, [r3, #0]
 800f164:	4b71      	ldr	r3, [pc, #452]	@ (800f32c <fourline_configure_weights+0x230>)
 800f166:	4413      	add	r3, r2
 800f168:	4a6f      	ldr	r2, [pc, #444]	@ (800f328 <fourline_configure_weights+0x22c>)
 800f16a:	6093      	str	r3, [r2, #8]
    dense_54_dense_bias_array.data_start = AI_PTR(g_fourline_weights_map[0] + 213056);
 800f16c:	4b6b      	ldr	r3, [pc, #428]	@ (800f31c <fourline_configure_weights+0x220>)
 800f16e:	681a      	ldr	r2, [r3, #0]
 800f170:	4b6e      	ldr	r3, [pc, #440]	@ (800f32c <fourline_configure_weights+0x230>)
 800f172:	4413      	add	r3, r2
 800f174:	4a6c      	ldr	r2, [pc, #432]	@ (800f328 <fourline_configure_weights+0x22c>)
 800f176:	60d3      	str	r3, [r2, #12]
    
    dense_55_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800f178:	4b6d      	ldr	r3, [pc, #436]	@ (800f330 <fourline_configure_weights+0x234>)
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f180:	4a6b      	ldr	r2, [pc, #428]	@ (800f330 <fourline_configure_weights+0x234>)
 800f182:	6013      	str	r3, [r2, #0]
    dense_55_dense_weights_array.data = AI_PTR(g_fourline_weights_map[0] + 213312);
 800f184:	4b65      	ldr	r3, [pc, #404]	@ (800f31c <fourline_configure_weights+0x220>)
 800f186:	681a      	ldr	r2, [r3, #0]
 800f188:	4b6a      	ldr	r3, [pc, #424]	@ (800f334 <fourline_configure_weights+0x238>)
 800f18a:	4413      	add	r3, r2
 800f18c:	4a68      	ldr	r2, [pc, #416]	@ (800f330 <fourline_configure_weights+0x234>)
 800f18e:	6093      	str	r3, [r2, #8]
    dense_55_dense_weights_array.data_start = AI_PTR(g_fourline_weights_map[0] + 213312);
 800f190:	4b62      	ldr	r3, [pc, #392]	@ (800f31c <fourline_configure_weights+0x220>)
 800f192:	681a      	ldr	r2, [r3, #0]
 800f194:	4b67      	ldr	r3, [pc, #412]	@ (800f334 <fourline_configure_weights+0x238>)
 800f196:	4413      	add	r3, r2
 800f198:	4a65      	ldr	r2, [pc, #404]	@ (800f330 <fourline_configure_weights+0x234>)
 800f19a:	60d3      	str	r3, [r2, #12]
    
    dense_55_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800f19c:	4b66      	ldr	r3, [pc, #408]	@ (800f338 <fourline_configure_weights+0x23c>)
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f1a4:	4a64      	ldr	r2, [pc, #400]	@ (800f338 <fourline_configure_weights+0x23c>)
 800f1a6:	6013      	str	r3, [r2, #0]
    dense_55_dense_bias_array.data = AI_PTR(g_fourline_weights_map[0] + 229696);
 800f1a8:	4b5c      	ldr	r3, [pc, #368]	@ (800f31c <fourline_configure_weights+0x220>)
 800f1aa:	681a      	ldr	r2, [r3, #0]
 800f1ac:	4b63      	ldr	r3, [pc, #396]	@ (800f33c <fourline_configure_weights+0x240>)
 800f1ae:	4413      	add	r3, r2
 800f1b0:	4a61      	ldr	r2, [pc, #388]	@ (800f338 <fourline_configure_weights+0x23c>)
 800f1b2:	6093      	str	r3, [r2, #8]
    dense_55_dense_bias_array.data_start = AI_PTR(g_fourline_weights_map[0] + 229696);
 800f1b4:	4b59      	ldr	r3, [pc, #356]	@ (800f31c <fourline_configure_weights+0x220>)
 800f1b6:	681a      	ldr	r2, [r3, #0]
 800f1b8:	4b60      	ldr	r3, [pc, #384]	@ (800f33c <fourline_configure_weights+0x240>)
 800f1ba:	4413      	add	r3, r2
 800f1bc:	4a5e      	ldr	r2, [pc, #376]	@ (800f338 <fourline_configure_weights+0x23c>)
 800f1be:	60d3      	str	r3, [r2, #12]
    
    dense_56_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800f1c0:	4b5f      	ldr	r3, [pc, #380]	@ (800f340 <fourline_configure_weights+0x244>)
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f1c8:	4a5d      	ldr	r2, [pc, #372]	@ (800f340 <fourline_configure_weights+0x244>)
 800f1ca:	6013      	str	r3, [r2, #0]
    dense_56_dense_weights_array.data = AI_PTR(g_fourline_weights_map[0] + 229952);
 800f1cc:	4b53      	ldr	r3, [pc, #332]	@ (800f31c <fourline_configure_weights+0x220>)
 800f1ce:	681a      	ldr	r2, [r3, #0]
 800f1d0:	4b5c      	ldr	r3, [pc, #368]	@ (800f344 <fourline_configure_weights+0x248>)
 800f1d2:	4413      	add	r3, r2
 800f1d4:	4a5a      	ldr	r2, [pc, #360]	@ (800f340 <fourline_configure_weights+0x244>)
 800f1d6:	6093      	str	r3, [r2, #8]
    dense_56_dense_weights_array.data_start = AI_PTR(g_fourline_weights_map[0] + 229952);
 800f1d8:	4b50      	ldr	r3, [pc, #320]	@ (800f31c <fourline_configure_weights+0x220>)
 800f1da:	681a      	ldr	r2, [r3, #0]
 800f1dc:	4b59      	ldr	r3, [pc, #356]	@ (800f344 <fourline_configure_weights+0x248>)
 800f1de:	4413      	add	r3, r2
 800f1e0:	4a57      	ldr	r2, [pc, #348]	@ (800f340 <fourline_configure_weights+0x244>)
 800f1e2:	60d3      	str	r3, [r2, #12]
    
    dense_56_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800f1e4:	4b58      	ldr	r3, [pc, #352]	@ (800f348 <fourline_configure_weights+0x24c>)
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f1ec:	4a56      	ldr	r2, [pc, #344]	@ (800f348 <fourline_configure_weights+0x24c>)
 800f1ee:	6013      	str	r3, [r2, #0]
    dense_56_dense_bias_array.data = AI_PTR(g_fourline_weights_map[0] + 246336);
 800f1f0:	4b4a      	ldr	r3, [pc, #296]	@ (800f31c <fourline_configure_weights+0x220>)
 800f1f2:	681a      	ldr	r2, [r3, #0]
 800f1f4:	4b55      	ldr	r3, [pc, #340]	@ (800f34c <fourline_configure_weights+0x250>)
 800f1f6:	4413      	add	r3, r2
 800f1f8:	4a53      	ldr	r2, [pc, #332]	@ (800f348 <fourline_configure_weights+0x24c>)
 800f1fa:	6093      	str	r3, [r2, #8]
    dense_56_dense_bias_array.data_start = AI_PTR(g_fourline_weights_map[0] + 246336);
 800f1fc:	4b47      	ldr	r3, [pc, #284]	@ (800f31c <fourline_configure_weights+0x220>)
 800f1fe:	681a      	ldr	r2, [r3, #0]
 800f200:	4b52      	ldr	r3, [pc, #328]	@ (800f34c <fourline_configure_weights+0x250>)
 800f202:	4413      	add	r3, r2
 800f204:	4a50      	ldr	r2, [pc, #320]	@ (800f348 <fourline_configure_weights+0x24c>)
 800f206:	60d3      	str	r3, [r2, #12]
    
    dense_57_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800f208:	4b51      	ldr	r3, [pc, #324]	@ (800f350 <fourline_configure_weights+0x254>)
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f210:	4a4f      	ldr	r2, [pc, #316]	@ (800f350 <fourline_configure_weights+0x254>)
 800f212:	6013      	str	r3, [r2, #0]
    dense_57_dense_weights_array.data = AI_PTR(g_fourline_weights_map[0] + 246592);
 800f214:	4b41      	ldr	r3, [pc, #260]	@ (800f31c <fourline_configure_weights+0x220>)
 800f216:	681a      	ldr	r2, [r3, #0]
 800f218:	4b4e      	ldr	r3, [pc, #312]	@ (800f354 <fourline_configure_weights+0x258>)
 800f21a:	4413      	add	r3, r2
 800f21c:	4a4c      	ldr	r2, [pc, #304]	@ (800f350 <fourline_configure_weights+0x254>)
 800f21e:	6093      	str	r3, [r2, #8]
    dense_57_dense_weights_array.data_start = AI_PTR(g_fourline_weights_map[0] + 246592);
 800f220:	4b3e      	ldr	r3, [pc, #248]	@ (800f31c <fourline_configure_weights+0x220>)
 800f222:	681a      	ldr	r2, [r3, #0]
 800f224:	4b4b      	ldr	r3, [pc, #300]	@ (800f354 <fourline_configure_weights+0x258>)
 800f226:	4413      	add	r3, r2
 800f228:	4a49      	ldr	r2, [pc, #292]	@ (800f350 <fourline_configure_weights+0x254>)
 800f22a:	60d3      	str	r3, [r2, #12]
    
    dense_57_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800f22c:	4b4a      	ldr	r3, [pc, #296]	@ (800f358 <fourline_configure_weights+0x25c>)
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f234:	4a48      	ldr	r2, [pc, #288]	@ (800f358 <fourline_configure_weights+0x25c>)
 800f236:	6013      	str	r3, [r2, #0]
    dense_57_dense_bias_array.data = AI_PTR(g_fourline_weights_map[0] + 262976);
 800f238:	4b38      	ldr	r3, [pc, #224]	@ (800f31c <fourline_configure_weights+0x220>)
 800f23a:	681a      	ldr	r2, [r3, #0]
 800f23c:	4b47      	ldr	r3, [pc, #284]	@ (800f35c <fourline_configure_weights+0x260>)
 800f23e:	4413      	add	r3, r2
 800f240:	4a45      	ldr	r2, [pc, #276]	@ (800f358 <fourline_configure_weights+0x25c>)
 800f242:	6093      	str	r3, [r2, #8]
    dense_57_dense_bias_array.data_start = AI_PTR(g_fourline_weights_map[0] + 262976);
 800f244:	4b35      	ldr	r3, [pc, #212]	@ (800f31c <fourline_configure_weights+0x220>)
 800f246:	681a      	ldr	r2, [r3, #0]
 800f248:	4b44      	ldr	r3, [pc, #272]	@ (800f35c <fourline_configure_weights+0x260>)
 800f24a:	4413      	add	r3, r2
 800f24c:	4a42      	ldr	r2, [pc, #264]	@ (800f358 <fourline_configure_weights+0x25c>)
 800f24e:	60d3      	str	r3, [r2, #12]
    
    dense_58_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800f250:	4b43      	ldr	r3, [pc, #268]	@ (800f360 <fourline_configure_weights+0x264>)
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f258:	4a41      	ldr	r2, [pc, #260]	@ (800f360 <fourline_configure_weights+0x264>)
 800f25a:	6013      	str	r3, [r2, #0]
    dense_58_dense_weights_array.data = AI_PTR(g_fourline_weights_map[0] + 263232);
 800f25c:	4b2f      	ldr	r3, [pc, #188]	@ (800f31c <fourline_configure_weights+0x220>)
 800f25e:	681a      	ldr	r2, [r3, #0]
 800f260:	4b40      	ldr	r3, [pc, #256]	@ (800f364 <fourline_configure_weights+0x268>)
 800f262:	4413      	add	r3, r2
 800f264:	4a3e      	ldr	r2, [pc, #248]	@ (800f360 <fourline_configure_weights+0x264>)
 800f266:	6093      	str	r3, [r2, #8]
    dense_58_dense_weights_array.data_start = AI_PTR(g_fourline_weights_map[0] + 263232);
 800f268:	4b2c      	ldr	r3, [pc, #176]	@ (800f31c <fourline_configure_weights+0x220>)
 800f26a:	681a      	ldr	r2, [r3, #0]
 800f26c:	4b3d      	ldr	r3, [pc, #244]	@ (800f364 <fourline_configure_weights+0x268>)
 800f26e:	4413      	add	r3, r2
 800f270:	4a3b      	ldr	r2, [pc, #236]	@ (800f360 <fourline_configure_weights+0x264>)
 800f272:	60d3      	str	r3, [r2, #12]
    
    dense_58_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800f274:	4b3c      	ldr	r3, [pc, #240]	@ (800f368 <fourline_configure_weights+0x26c>)
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f27c:	4a3a      	ldr	r2, [pc, #232]	@ (800f368 <fourline_configure_weights+0x26c>)
 800f27e:	6013      	str	r3, [r2, #0]
    dense_58_dense_bias_array.data = AI_PTR(g_fourline_weights_map[0] + 279616);
 800f280:	4b26      	ldr	r3, [pc, #152]	@ (800f31c <fourline_configure_weights+0x220>)
 800f282:	681a      	ldr	r2, [r3, #0]
 800f284:	4b39      	ldr	r3, [pc, #228]	@ (800f36c <fourline_configure_weights+0x270>)
 800f286:	4413      	add	r3, r2
 800f288:	4a37      	ldr	r2, [pc, #220]	@ (800f368 <fourline_configure_weights+0x26c>)
 800f28a:	6093      	str	r3, [r2, #8]
    dense_58_dense_bias_array.data_start = AI_PTR(g_fourline_weights_map[0] + 279616);
 800f28c:	4b23      	ldr	r3, [pc, #140]	@ (800f31c <fourline_configure_weights+0x220>)
 800f28e:	681a      	ldr	r2, [r3, #0]
 800f290:	4b36      	ldr	r3, [pc, #216]	@ (800f36c <fourline_configure_weights+0x270>)
 800f292:	4413      	add	r3, r2
 800f294:	4a34      	ldr	r2, [pc, #208]	@ (800f368 <fourline_configure_weights+0x26c>)
 800f296:	60d3      	str	r3, [r2, #12]
    
    dense_59_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800f298:	4b35      	ldr	r3, [pc, #212]	@ (800f370 <fourline_configure_weights+0x274>)
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f2a0:	4a33      	ldr	r2, [pc, #204]	@ (800f370 <fourline_configure_weights+0x274>)
 800f2a2:	6013      	str	r3, [r2, #0]
    dense_59_dense_weights_array.data = AI_PTR(g_fourline_weights_map[0] + 279872);
 800f2a4:	4b1d      	ldr	r3, [pc, #116]	@ (800f31c <fourline_configure_weights+0x220>)
 800f2a6:	681a      	ldr	r2, [r3, #0]
 800f2a8:	4b32      	ldr	r3, [pc, #200]	@ (800f374 <fourline_configure_weights+0x278>)
 800f2aa:	4413      	add	r3, r2
 800f2ac:	4a30      	ldr	r2, [pc, #192]	@ (800f370 <fourline_configure_weights+0x274>)
 800f2ae:	6093      	str	r3, [r2, #8]
    dense_59_dense_weights_array.data_start = AI_PTR(g_fourline_weights_map[0] + 279872);
 800f2b0:	4b1a      	ldr	r3, [pc, #104]	@ (800f31c <fourline_configure_weights+0x220>)
 800f2b2:	681a      	ldr	r2, [r3, #0]
 800f2b4:	4b2f      	ldr	r3, [pc, #188]	@ (800f374 <fourline_configure_weights+0x278>)
 800f2b6:	4413      	add	r3, r2
 800f2b8:	4a2d      	ldr	r2, [pc, #180]	@ (800f370 <fourline_configure_weights+0x274>)
 800f2ba:	60d3      	str	r3, [r2, #12]
    
    dense_59_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800f2bc:	4b2e      	ldr	r3, [pc, #184]	@ (800f378 <fourline_configure_weights+0x27c>)
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f2c4:	4a2c      	ldr	r2, [pc, #176]	@ (800f378 <fourline_configure_weights+0x27c>)
 800f2c6:	6013      	str	r3, [r2, #0]
    dense_59_dense_bias_array.data = AI_PTR(g_fourline_weights_map[0] + 280896);
 800f2c8:	4b14      	ldr	r3, [pc, #80]	@ (800f31c <fourline_configure_weights+0x220>)
 800f2ca:	681a      	ldr	r2, [r3, #0]
 800f2cc:	4b2b      	ldr	r3, [pc, #172]	@ (800f37c <fourline_configure_weights+0x280>)
 800f2ce:	4413      	add	r3, r2
 800f2d0:	4a29      	ldr	r2, [pc, #164]	@ (800f378 <fourline_configure_weights+0x27c>)
 800f2d2:	6093      	str	r3, [r2, #8]
    dense_59_dense_bias_array.data_start = AI_PTR(g_fourline_weights_map[0] + 280896);
 800f2d4:	4b11      	ldr	r3, [pc, #68]	@ (800f31c <fourline_configure_weights+0x220>)
 800f2d6:	681a      	ldr	r2, [r3, #0]
 800f2d8:	4b28      	ldr	r3, [pc, #160]	@ (800f37c <fourline_configure_weights+0x280>)
 800f2da:	4413      	add	r3, r2
 800f2dc:	4a26      	ldr	r2, [pc, #152]	@ (800f378 <fourline_configure_weights+0x27c>)
 800f2de:	60d3      	str	r3, [r2, #12]
    
    conv2d_9_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 800f2e0:	4b27      	ldr	r3, [pc, #156]	@ (800f380 <fourline_configure_weights+0x284>)
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f2e8:	4a25      	ldr	r2, [pc, #148]	@ (800f380 <fourline_configure_weights+0x284>)
 800f2ea:	6013      	str	r3, [r2, #0]
    conv2d_9_conv2d_weights_array.data = AI_PTR(g_fourline_weights_map[0] + 280912);
 800f2ec:	4b0b      	ldr	r3, [pc, #44]	@ (800f31c <fourline_configure_weights+0x220>)
 800f2ee:	681a      	ldr	r2, [r3, #0]
 800f2f0:	4b24      	ldr	r3, [pc, #144]	@ (800f384 <fourline_configure_weights+0x288>)
 800f2f2:	4413      	add	r3, r2
 800f2f4:	4a22      	ldr	r2, [pc, #136]	@ (800f380 <fourline_configure_weights+0x284>)
 800f2f6:	6093      	str	r3, [r2, #8]
    conv2d_9_conv2d_weights_array.data_start = AI_PTR(g_fourline_weights_map[0] + 280912);
 800f2f8:	4b08      	ldr	r3, [pc, #32]	@ (800f31c <fourline_configure_weights+0x220>)
 800f2fa:	681a      	ldr	r2, [r3, #0]
 800f2fc:	4b21      	ldr	r3, [pc, #132]	@ (800f384 <fourline_configure_weights+0x288>)
 800f2fe:	4413      	add	r3, r2
 800f300:	4a1f      	ldr	r2, [pc, #124]	@ (800f380 <fourline_configure_weights+0x284>)
 800f302:	60d3      	str	r3, [r2, #12]
    
    return true;
 800f304:	2301      	movs	r3, #1
 800f306:	e005      	b.n	800f314 <fourline_configure_weights+0x218>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 800f308:	2212      	movs	r2, #18
 800f30a:	2130      	movs	r1, #48	@ 0x30
 800f30c:	6878      	ldr	r0, [r7, #4]
 800f30e:	f000 fba1 	bl	800fa54 <ai_platform_network_set_error>
  return false;
 800f312:	2300      	movs	r3, #0
}
 800f314:	4618      	mov	r0, r3
 800f316:	3708      	adds	r7, #8
 800f318:	46bd      	mov	sp, r7
 800f31a:	bd80      	pop	{r7, pc}
 800f31c:	2000c5c0 	.word	0x2000c5c0
 800f320:	2000059c 	.word	0x2000059c
 800f324:	200005ac 	.word	0x200005ac
 800f328:	200005bc 	.word	0x200005bc
 800f32c:	00034040 	.word	0x00034040
 800f330:	200005cc 	.word	0x200005cc
 800f334:	00034140 	.word	0x00034140
 800f338:	200005dc 	.word	0x200005dc
 800f33c:	00038140 	.word	0x00038140
 800f340:	200005ec 	.word	0x200005ec
 800f344:	00038240 	.word	0x00038240
 800f348:	200005fc 	.word	0x200005fc
 800f34c:	0003c240 	.word	0x0003c240
 800f350:	2000060c 	.word	0x2000060c
 800f354:	0003c340 	.word	0x0003c340
 800f358:	2000061c 	.word	0x2000061c
 800f35c:	00040340 	.word	0x00040340
 800f360:	2000062c 	.word	0x2000062c
 800f364:	00040440 	.word	0x00040440
 800f368:	2000063c 	.word	0x2000063c
 800f36c:	00044440 	.word	0x00044440
 800f370:	2000064c 	.word	0x2000064c
 800f374:	00044540 	.word	0x00044540
 800f378:	2000065c 	.word	0x2000065c
 800f37c:	00044940 	.word	0x00044940
 800f380:	2000074c 	.word	0x2000074c
 800f384:	00044950 	.word	0x00044950

0800f388 <ai_fourline_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_fourline_get_error(ai_handle network)
{
 800f388:	b580      	push	{r7, lr}
 800f38a:	b082      	sub	sp, #8
 800f38c:	af00      	add	r7, sp, #0
 800f38e:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 800f390:	6878      	ldr	r0, [r7, #4]
 800f392:	f000 fa53 	bl	800f83c <ai_platform_network_get_error>
 800f396:	4603      	mov	r3, r0
}
 800f398:	4618      	mov	r0, r3
 800f39a:	3708      	adds	r7, #8
 800f39c:	46bd      	mov	sp, r7
 800f39e:	bd80      	pop	{r7, pc}

0800f3a0 <ai_fourline_create>:

AI_API_ENTRY
ai_error ai_fourline_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800f3a0:	b580      	push	{r7, lr}
 800f3a2:	b084      	sub	sp, #16
 800f3a4:	af02      	add	r7, sp, #8
 800f3a6:	6078      	str	r0, [r7, #4]
 800f3a8:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800f3aa:	2300      	movs	r3, #0
 800f3ac:	9301      	str	r3, [sp, #4]
 800f3ae:	2305      	movs	r3, #5
 800f3b0:	9300      	str	r3, [sp, #0]
 800f3b2:	2301      	movs	r3, #1
 800f3b4:	4a04      	ldr	r2, [pc, #16]	@ (800f3c8 <ai_fourline_create+0x28>)
 800f3b6:	6839      	ldr	r1, [r7, #0]
 800f3b8:	6878      	ldr	r0, [r7, #4]
 800f3ba:	f000 fe65 	bl	8010088 <ai_platform_network_create>
 800f3be:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800f3c0:	4618      	mov	r0, r3
 800f3c2:	3708      	adds	r7, #8
 800f3c4:	46bd      	mov	sp, r7
 800f3c6:	bd80      	pop	{r7, pc}
 800f3c8:	20001388 	.word	0x20001388

0800f3cc <ai_fourline_create_and_init>:

AI_API_ENTRY
ai_error ai_fourline_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 800f3cc:	b580      	push	{r7, lr}
 800f3ce:	b096      	sub	sp, #88	@ 0x58
 800f3d0:	af00      	add	r7, sp, #0
 800f3d2:	60f8      	str	r0, [r7, #12]
 800f3d4:	60b9      	str	r1, [r7, #8]
 800f3d6:	607a      	str	r2, [r7, #4]
    ai_error err;
    ai_network_params params;

    err = ai_fourline_create(network, AI_FOURLINE_DATA_CONFIG);
 800f3d8:	2100      	movs	r1, #0
 800f3da:	68f8      	ldr	r0, [r7, #12]
 800f3dc:	f7ff ffe0 	bl	800f3a0 <ai_fourline_create>
 800f3e0:	4603      	mov	r3, r0
 800f3e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (err.type != AI_ERROR_NONE)
 800f3e4:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d001      	beq.n	800f3f0 <ai_fourline_create_and_init+0x24>
        return err;
 800f3ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f3ee:	e05d      	b.n	800f4ac <ai_fourline_create_and_init+0xe0>
    if (ai_fourline_data_params_get(&params) != true) {
 800f3f0:	f107 0314 	add.w	r3, r7, #20
 800f3f4:	4618      	mov	r0, r3
 800f3f6:	f000 f8dd 	bl	800f5b4 <ai_fourline_data_params_get>
 800f3fa:	4603      	mov	r3, r0
 800f3fc:	f083 0301 	eor.w	r3, r3, #1
 800f400:	b2db      	uxtb	r3, r3
 800f402:	2b00      	cmp	r3, #0
 800f404:	d008      	beq.n	800f418 <ai_fourline_create_and_init+0x4c>
        err = ai_fourline_get_error(*network);
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	4618      	mov	r0, r3
 800f40c:	f7ff ffbc 	bl	800f388 <ai_fourline_get_error>
 800f410:	4603      	mov	r3, r0
 800f412:	64fb      	str	r3, [r7, #76]	@ 0x4c
        return err;
 800f414:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f416:	e049      	b.n	800f4ac <ai_fourline_create_and_init+0xe0>
    }
#if defined(AI_FOURLINE_DATA_ACTIVATIONS_COUNT)
    if (activations) {
 800f418:	68bb      	ldr	r3, [r7, #8]
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d016      	beq.n	800f44c <ai_fourline_create_and_init+0x80>
        /* set the addresses of the activations buffers */
        for (int idx=0;idx<params.map_activations.size;idx++)
 800f41e:	2300      	movs	r3, #0
 800f420:	657b      	str	r3, [r7, #84]	@ 0x54
 800f422:	e00e      	b.n	800f442 <ai_fourline_create_and_init+0x76>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 800f424:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f426:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f428:	009b      	lsls	r3, r3, #2
 800f42a:	68ba      	ldr	r2, [r7, #8]
 800f42c:	4413      	add	r3, r2
 800f42e:	681a      	ldr	r2, [r3, #0]
 800f430:	f107 0314 	add.w	r3, r7, #20
 800f434:	330c      	adds	r3, #12
 800f436:	4618      	mov	r0, r3
 800f438:	f000 f922 	bl	800f680 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 800f43c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f43e:	3301      	adds	r3, #1
 800f440:	657b      	str	r3, [r7, #84]	@ 0x54
 800f442:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f444:	461a      	mov	r2, r3
 800f446:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f448:	4293      	cmp	r3, r2
 800f44a:	dbeb      	blt.n	800f424 <ai_fourline_create_and_init+0x58>
    }
#endif
#if defined(AI_FOURLINE_DATA_WEIGHTS_COUNT)
    if (weights) {
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d016      	beq.n	800f480 <ai_fourline_create_and_init+0xb4>
        /* set the addresses of the weight buffers */
        for (int idx=0;idx<params.map_weights.size;idx++)
 800f452:	2300      	movs	r3, #0
 800f454:	653b      	str	r3, [r7, #80]	@ 0x50
 800f456:	e00e      	b.n	800f476 <ai_fourline_create_and_init+0xaa>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 800f458:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800f45a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f45c:	009b      	lsls	r3, r3, #2
 800f45e:	687a      	ldr	r2, [r7, #4]
 800f460:	4413      	add	r3, r2
 800f462:	681a      	ldr	r2, [r3, #0]
 800f464:	f107 0314 	add.w	r3, r7, #20
 800f468:	3304      	adds	r3, #4
 800f46a:	4618      	mov	r0, r3
 800f46c:	f000 f908 	bl	800f680 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 800f470:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f472:	3301      	adds	r3, #1
 800f474:	653b      	str	r3, [r7, #80]	@ 0x50
 800f476:	8b7b      	ldrh	r3, [r7, #26]
 800f478:	461a      	mov	r2, r3
 800f47a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f47c:	4293      	cmp	r3, r2
 800f47e:	dbeb      	blt.n	800f458 <ai_fourline_create_and_init+0x8c>
    }
#endif
    if (ai_fourline_init(*network, &params) != true) {
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	f107 0214 	add.w	r2, r7, #20
 800f488:	4611      	mov	r1, r2
 800f48a:	4618      	mov	r0, r3
 800f48c:	f000 f846 	bl	800f51c <ai_fourline_init>
 800f490:	4603      	mov	r3, r0
 800f492:	f083 0301 	eor.w	r3, r3, #1
 800f496:	b2db      	uxtb	r3, r3
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d006      	beq.n	800f4aa <ai_fourline_create_and_init+0xde>
        err = ai_fourline_get_error(*network);
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	4618      	mov	r0, r3
 800f4a2:	f7ff ff71 	bl	800f388 <ai_fourline_get_error>
 800f4a6:	4603      	mov	r3, r0
 800f4a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
    return err;
 800f4aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800f4ac:	4618      	mov	r0, r3
 800f4ae:	3758      	adds	r7, #88	@ 0x58
 800f4b0:	46bd      	mov	sp, r7
 800f4b2:	bd80      	pop	{r7, pc}

0800f4b4 <ai_fourline_inputs_get>:

AI_API_ENTRY
ai_buffer* ai_fourline_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800f4b4:	b580      	push	{r7, lr}
 800f4b6:	b082      	sub	sp, #8
 800f4b8:	af00      	add	r7, sp, #0
 800f4ba:	6078      	str	r0, [r7, #4]
 800f4bc:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d104      	bne.n	800f4ce <ai_fourline_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800f4c4:	4b06      	ldr	r3, [pc, #24]	@ (800f4e0 <ai_fourline_inputs_get+0x2c>)
 800f4c6:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	4a06      	ldr	r2, [pc, #24]	@ (800f4e4 <ai_fourline_inputs_get+0x30>)
 800f4cc:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 800f4ce:	6839      	ldr	r1, [r7, #0]
 800f4d0:	6878      	ldr	r0, [r7, #4]
 800f4d2:	f000 fac5 	bl	800fa60 <ai_platform_inputs_get>
 800f4d6:	4603      	mov	r3, r0
}
 800f4d8:	4618      	mov	r0, r3
 800f4da:	3708      	adds	r7, #8
 800f4dc:	46bd      	mov	sp, r7
 800f4de:	bd80      	pop	{r7, pc}
 800f4e0:	20001388 	.word	0x20001388
 800f4e4:	a1c00100 	.word	0xa1c00100

0800f4e8 <ai_fourline_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_fourline_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800f4e8:	b580      	push	{r7, lr}
 800f4ea:	b082      	sub	sp, #8
 800f4ec:	af00      	add	r7, sp, #0
 800f4ee:	6078      	str	r0, [r7, #4]
 800f4f0:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d104      	bne.n	800f502 <ai_fourline_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800f4f8:	4b06      	ldr	r3, [pc, #24]	@ (800f514 <ai_fourline_outputs_get+0x2c>)
 800f4fa:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	4a06      	ldr	r2, [pc, #24]	@ (800f518 <ai_fourline_outputs_get+0x30>)
 800f500:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 800f502:	6839      	ldr	r1, [r7, #0]
 800f504:	6878      	ldr	r0, [r7, #4]
 800f506:	f000 fc37 	bl	800fd78 <ai_platform_outputs_get>
 800f50a:	4603      	mov	r3, r0
}
 800f50c:	4618      	mov	r0, r3
 800f50e:	3708      	adds	r7, #8
 800f510:	46bd      	mov	sp, r7
 800f512:	bd80      	pop	{r7, pc}
 800f514:	20001388 	.word	0x20001388
 800f518:	a1c00100 	.word	0xa1c00100

0800f51c <ai_fourline_init>:
}

AI_API_ENTRY
ai_bool ai_fourline_init(
  ai_handle network, const ai_network_params* params)
{
 800f51c:	b580      	push	{r7, lr}
 800f51e:	b084      	sub	sp, #16
 800f520:	af00      	add	r7, sp, #0
 800f522:	6078      	str	r0, [r7, #4]
 800f524:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 800f526:	6839      	ldr	r1, [r7, #0]
 800f528:	6878      	ldr	r0, [r7, #4]
 800f52a:	f000 ff87 	bl	801043c <ai_platform_network_init>
 800f52e:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	2b00      	cmp	r3, #0
 800f534:	d101      	bne.n	800f53a <ai_fourline_init+0x1e>
 800f536:	2300      	movs	r3, #0
 800f538:	e028      	b.n	800f58c <ai_fourline_init+0x70>

  ai_bool ok = true;
 800f53a:	2301      	movs	r3, #1
 800f53c:	72fb      	strb	r3, [r7, #11]
  ok &= fourline_configure_weights(net_ctx, params);
 800f53e:	6839      	ldr	r1, [r7, #0]
 800f540:	68f8      	ldr	r0, [r7, #12]
 800f542:	f7ff fddb 	bl	800f0fc <fourline_configure_weights>
 800f546:	4603      	mov	r3, r0
 800f548:	461a      	mov	r2, r3
 800f54a:	7afb      	ldrb	r3, [r7, #11]
 800f54c:	4013      	ands	r3, r2
 800f54e:	2b00      	cmp	r3, #0
 800f550:	bf14      	ite	ne
 800f552:	2301      	movne	r3, #1
 800f554:	2300      	moveq	r3, #0
 800f556:	72fb      	strb	r3, [r7, #11]
  ok &= fourline_configure_activations(net_ctx, params);
 800f558:	6839      	ldr	r1, [r7, #0]
 800f55a:	68f8      	ldr	r0, [r7, #12]
 800f55c:	f7ff fd08 	bl	800ef70 <fourline_configure_activations>
 800f560:	4603      	mov	r3, r0
 800f562:	461a      	mov	r2, r3
 800f564:	7afb      	ldrb	r3, [r7, #11]
 800f566:	4013      	ands	r3, r2
 800f568:	2b00      	cmp	r3, #0
 800f56a:	bf14      	ite	ne
 800f56c:	2301      	movne	r3, #1
 800f56e:	2300      	moveq	r3, #0
 800f570:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 800f572:	6878      	ldr	r0, [r7, #4]
 800f574:	f001 f8fe 	bl	8010774 <ai_platform_network_post_init>
 800f578:	4603      	mov	r3, r0
 800f57a:	461a      	mov	r2, r3
 800f57c:	7afb      	ldrb	r3, [r7, #11]
 800f57e:	4013      	ands	r3, r2
 800f580:	2b00      	cmp	r3, #0
 800f582:	bf14      	ite	ne
 800f584:	2301      	movne	r3, #1
 800f586:	2300      	moveq	r3, #0
 800f588:	72fb      	strb	r3, [r7, #11]

  return ok;
 800f58a:	7afb      	ldrb	r3, [r7, #11]
}
 800f58c:	4618      	mov	r0, r3
 800f58e:	3710      	adds	r7, #16
 800f590:	46bd      	mov	sp, r7
 800f592:	bd80      	pop	{r7, pc}

0800f594 <ai_fourline_run>:


AI_API_ENTRY
ai_i32 ai_fourline_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 800f594:	b580      	push	{r7, lr}
 800f596:	b084      	sub	sp, #16
 800f598:	af00      	add	r7, sp, #0
 800f59a:	60f8      	str	r0, [r7, #12]
 800f59c:	60b9      	str	r1, [r7, #8]
 800f59e:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 800f5a0:	687a      	ldr	r2, [r7, #4]
 800f5a2:	68b9      	ldr	r1, [r7, #8]
 800f5a4:	68f8      	ldr	r0, [r7, #12]
 800f5a6:	f001 fa0f 	bl	80109c8 <ai_platform_network_process>
 800f5aa:	4603      	mov	r3, r0
}
 800f5ac:	4618      	mov	r0, r3
 800f5ae:	3710      	adds	r7, #16
 800f5b0:	46bd      	mov	sp, r7
 800f5b2:	bd80      	pop	{r7, pc}

0800f5b4 <ai_fourline_data_params_get>:
 * @ingroup fourline_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_fourline_data_params_get(ai_network_params* params)
{
 800f5b4:	b580      	push	{r7, lr}
 800f5b6:	b086      	sub	sp, #24
 800f5b8:	af00      	add	r7, sp, #0
 800f5ba:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d101      	bne.n	800f5c6 <ai_fourline_data_params_get+0x12>
 800f5c2:	2300      	movs	r3, #0
 800f5c4:	e016      	b.n	800f5f4 <ai_fourline_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 800f5c6:	4a0d      	ldr	r2, [pc, #52]	@ (800f5fc <ai_fourline_data_params_get+0x48>)
 800f5c8:	f107 0310 	add.w	r3, r7, #16
 800f5cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f5d0:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_FOURLINE_DATA_ACTIVATIONS_COUNT, g_fourline_data_map_activations);
  
  const ai_buffer_array map_weights = 
 800f5d4:	4a0a      	ldr	r2, [pc, #40]	@ (800f600 <ai_fourline_data_params_get+0x4c>)
 800f5d6:	f107 0308 	add.w	r3, r7, #8
 800f5da:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f5de:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_FOURLINE_DATA_WEIGHTS_COUNT, g_fourline_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 800f5e2:	f107 0210 	add.w	r2, r7, #16
 800f5e6:	f107 0308 	add.w	r3, r7, #8
 800f5ea:	4619      	mov	r1, r3
 800f5ec:	6878      	ldr	r0, [r7, #4]
 800f5ee:	f000 f90b 	bl	800f808 <ai_platform_bind_network_params>
 800f5f2:	4603      	mov	r3, r0
}
 800f5f4:	4618      	mov	r0, r3
 800f5f6:	3718      	adds	r7, #24
 800f5f8:	46bd      	mov	sp, r7
 800f5fa:	bd80      	pop	{r7, pc}
 800f5fc:	08018c0c 	.word	0x08018c0c
 800f600:	08018c14 	.word	0x08018c14

0800f604 <ai_buffer_get_size>:
 800f604:	b368      	cbz	r0, 800f662 <ai_buffer_get_size+0x5e>
 800f606:	4b17      	ldr	r3, [pc, #92]	@ (800f664 <ai_buffer_get_size+0x60>)
 800f608:	4a17      	ldr	r2, [pc, #92]	@ (800f668 <ai_buffer_get_size+0x64>)
 800f60a:	b410      	push	{r4}
 800f60c:	6804      	ldr	r4, [r0, #0]
 800f60e:	4023      	ands	r3, r4
 800f610:	4293      	cmp	r3, r2
 800f612:	d123      	bne.n	800f65c <ai_buffer_get_size+0x58>
 800f614:	b311      	cbz	r1, 800f65c <ai_buffer_get_size+0x58>
 800f616:	6984      	ldr	r4, [r0, #24]
 800f618:	6862      	ldr	r2, [r4, #4]
 800f61a:	321f      	adds	r2, #31
 800f61c:	f022 021f 	bic.w	r2, r2, #31
 800f620:	7d03      	ldrb	r3, [r0, #20]
 800f622:	6941      	ldr	r1, [r0, #20]
 800f624:	f1a3 0301 	sub.w	r3, r3, #1
 800f628:	f3c1 2017 	ubfx	r0, r1, #8, #24
 800f62c:	fab3 f383 	clz	r3, r3
 800f630:	095b      	lsrs	r3, r3, #5
 800f632:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 800f636:	da0c      	bge.n	800f652 <ai_buffer_get_size+0x4e>
 800f638:	2b01      	cmp	r3, #1
 800f63a:	d103      	bne.n	800f644 <ai_buffer_get_size+0x40>
 800f63c:	2802      	cmp	r0, #2
 800f63e:	f04f 0302 	mov.w	r3, #2
 800f642:	d006      	beq.n	800f652 <ai_buffer_get_size+0x4e>
 800f644:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800f648:	3301      	adds	r3, #1
 800f64a:	4298      	cmp	r0, r3
 800f64c:	fb01 f202 	mul.w	r2, r1, r2
 800f650:	d1f2      	bne.n	800f638 <ai_buffer_get_size+0x34>
 800f652:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 800f656:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f65a:	4770      	bx	lr
 800f65c:	6984      	ldr	r4, [r0, #24]
 800f65e:	6862      	ldr	r2, [r4, #4]
 800f660:	e7de      	b.n	800f620 <ai_buffer_get_size+0x1c>
 800f662:	4770      	bx	lr
 800f664:	017fffff 	.word	0x017fffff
 800f668:	000400c0 	.word	0x000400c0

0800f66c <ai_buffer_array_sane>:
 800f66c:	b138      	cbz	r0, 800f67e <ai_buffer_array_sane+0x12>
 800f66e:	6843      	ldr	r3, [r0, #4]
 800f670:	b123      	cbz	r3, 800f67c <ai_buffer_array_sane+0x10>
 800f672:	8840      	ldrh	r0, [r0, #2]
 800f674:	3800      	subs	r0, #0
 800f676:	bf18      	it	ne
 800f678:	2001      	movne	r0, #1
 800f67a:	4770      	bx	lr
 800f67c:	4618      	mov	r0, r3
 800f67e:	4770      	bx	lr

0800f680 <ai_buffer_array_item_set_address>:
 800f680:	b150      	cbz	r0, 800f698 <ai_buffer_array_item_set_address+0x18>
 800f682:	6843      	ldr	r3, [r0, #4]
 800f684:	b14b      	cbz	r3, 800f69a <ai_buffer_array_item_set_address+0x1a>
 800f686:	8840      	ldrh	r0, [r0, #2]
 800f688:	b900      	cbnz	r0, 800f68c <ai_buffer_array_item_set_address+0xc>
 800f68a:	4770      	bx	lr
 800f68c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800f690:	2001      	movs	r0, #1
 800f692:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800f696:	604a      	str	r2, [r1, #4]
 800f698:	4770      	bx	lr
 800f69a:	4618      	mov	r0, r3
 800f69c:	4770      	bx	lr
 800f69e:	bf00      	nop

0800f6a0 <_ai_platform_acquire_crc>:
 800f6a0:	2001      	movs	r0, #1
 800f6a2:	4770      	bx	lr

0800f6a4 <_ai_platform_release_crc>:
 800f6a4:	4770      	bx	lr
 800f6a6:	bf00      	nop

0800f6a8 <ai_platform_get_weights_map>:
 800f6a8:	2900      	cmp	r1, #0
 800f6aa:	bf18      	it	ne
 800f6ac:	2800      	cmpne	r0, #0
 800f6ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6b0:	bf0c      	ite	eq
 800f6b2:	2401      	moveq	r4, #1
 800f6b4:	2400      	movne	r4, #0
 800f6b6:	2a00      	cmp	r2, #0
 800f6b8:	bf08      	it	eq
 800f6ba:	f044 0401 	orreq.w	r4, r4, #1
 800f6be:	b114      	cbz	r4, 800f6c6 <ai_platform_get_weights_map+0x1e>
 800f6c0:	2400      	movs	r4, #0
 800f6c2:	4620      	mov	r0, r4
 800f6c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f6c6:	4616      	mov	r6, r2
 800f6c8:	4b22      	ldr	r3, [pc, #136]	@ (800f754 <ai_platform_get_weights_map+0xac>)
 800f6ca:	6812      	ldr	r2, [r2, #0]
 800f6cc:	4605      	mov	r5, r0
 800f6ce:	460f      	mov	r7, r1
 800f6d0:	429a      	cmp	r2, r3
 800f6d2:	d022      	beq.n	800f71a <ai_platform_get_weights_map+0x72>
 800f6d4:	6870      	ldr	r0, [r6, #4]
 800f6d6:	2800      	cmp	r0, #0
 800f6d8:	d0f2      	beq.n	800f6c0 <ai_platform_get_weights_map+0x18>
 800f6da:	6806      	ldr	r6, [r0, #0]
 800f6dc:	429e      	cmp	r6, r3
 800f6de:	d006      	beq.n	800f6ee <ai_platform_get_weights_map+0x46>
 800f6e0:	f1a1 0401 	sub.w	r4, r1, #1
 800f6e4:	6028      	str	r0, [r5, #0]
 800f6e6:	fab4 f484 	clz	r4, r4
 800f6ea:	0964      	lsrs	r4, r4, #5
 800f6ec:	e7e9      	b.n	800f6c2 <ai_platform_get_weights_map+0x1a>
 800f6ee:	3d04      	subs	r5, #4
 800f6f0:	4602      	mov	r2, r0
 800f6f2:	4621      	mov	r1, r4
 800f6f4:	e000      	b.n	800f6f8 <ai_platform_get_weights_map+0x50>
 800f6f6:	4619      	mov	r1, r3
 800f6f8:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800f6fc:	42b3      	cmp	r3, r6
 800f6fe:	d025      	beq.n	800f74c <ai_platform_get_weights_map+0xa4>
 800f700:	f845 3f04 	str.w	r3, [r5, #4]!
 800f704:	1c4b      	adds	r3, r1, #1
 800f706:	429f      	cmp	r7, r3
 800f708:	d8f5      	bhi.n	800f6f6 <ai_platform_get_weights_map+0x4e>
 800f70a:	d1da      	bne.n	800f6c2 <ai_platform_get_weights_map+0x1a>
 800f70c:	3102      	adds	r1, #2
 800f70e:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800f712:	42b3      	cmp	r3, r6
 800f714:	d1d5      	bne.n	800f6c2 <ai_platform_get_weights_map+0x1a>
 800f716:	2401      	movs	r4, #1
 800f718:	e7d3      	b.n	800f6c2 <ai_platform_get_weights_map+0x1a>
 800f71a:	1d30      	adds	r0, r6, #4
 800f71c:	f7ff ffa6 	bl	800f66c <ai_buffer_array_sane>
 800f720:	2800      	cmp	r0, #0
 800f722:	d0cd      	beq.n	800f6c0 <ai_platform_get_weights_map+0x18>
 800f724:	88f3      	ldrh	r3, [r6, #6]
 800f726:	429f      	cmp	r7, r3
 800f728:	d1ca      	bne.n	800f6c0 <ai_platform_get_weights_map+0x18>
 800f72a:	3d04      	subs	r5, #4
 800f72c:	4622      	mov	r2, r4
 800f72e:	68b3      	ldr	r3, [r6, #8]
 800f730:	4423      	add	r3, r4
 800f732:	341c      	adds	r4, #28
 800f734:	685b      	ldr	r3, [r3, #4]
 800f736:	b123      	cbz	r3, 800f742 <ai_platform_get_weights_map+0x9a>
 800f738:	3201      	adds	r2, #1
 800f73a:	f845 3f04 	str.w	r3, [r5, #4]!
 800f73e:	4297      	cmp	r7, r2
 800f740:	d8f5      	bhi.n	800f72e <ai_platform_get_weights_map+0x86>
 800f742:	1abc      	subs	r4, r7, r2
 800f744:	fab4 f484 	clz	r4, r4
 800f748:	0964      	lsrs	r4, r4, #5
 800f74a:	e7ba      	b.n	800f6c2 <ai_platform_get_weights_map+0x1a>
 800f74c:	428f      	cmp	r7, r1
 800f74e:	d1b8      	bne.n	800f6c2 <ai_platform_get_weights_map+0x1a>
 800f750:	e7e1      	b.n	800f716 <ai_platform_get_weights_map+0x6e>
 800f752:	bf00      	nop
 800f754:	a1facade 	.word	0xa1facade

0800f758 <ai_platform_get_activations_map>:
 800f758:	2900      	cmp	r1, #0
 800f75a:	bf18      	it	ne
 800f75c:	2800      	cmpne	r0, #0
 800f75e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f760:	bf0c      	ite	eq
 800f762:	2401      	moveq	r4, #1
 800f764:	2400      	movne	r4, #0
 800f766:	2a00      	cmp	r2, #0
 800f768:	bf08      	it	eq
 800f76a:	f044 0401 	orreq.w	r4, r4, #1
 800f76e:	b114      	cbz	r4, 800f776 <ai_platform_get_activations_map+0x1e>
 800f770:	2400      	movs	r4, #0
 800f772:	4620      	mov	r0, r4
 800f774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f776:	4616      	mov	r6, r2
 800f778:	4b22      	ldr	r3, [pc, #136]	@ (800f804 <ai_platform_get_activations_map+0xac>)
 800f77a:	6812      	ldr	r2, [r2, #0]
 800f77c:	4605      	mov	r5, r0
 800f77e:	460f      	mov	r7, r1
 800f780:	429a      	cmp	r2, r3
 800f782:	d022      	beq.n	800f7ca <ai_platform_get_activations_map+0x72>
 800f784:	6a30      	ldr	r0, [r6, #32]
 800f786:	2800      	cmp	r0, #0
 800f788:	d0f2      	beq.n	800f770 <ai_platform_get_activations_map+0x18>
 800f78a:	6806      	ldr	r6, [r0, #0]
 800f78c:	429e      	cmp	r6, r3
 800f78e:	d006      	beq.n	800f79e <ai_platform_get_activations_map+0x46>
 800f790:	f1a1 0401 	sub.w	r4, r1, #1
 800f794:	6028      	str	r0, [r5, #0]
 800f796:	fab4 f484 	clz	r4, r4
 800f79a:	0964      	lsrs	r4, r4, #5
 800f79c:	e7e9      	b.n	800f772 <ai_platform_get_activations_map+0x1a>
 800f79e:	3d04      	subs	r5, #4
 800f7a0:	4602      	mov	r2, r0
 800f7a2:	4621      	mov	r1, r4
 800f7a4:	e000      	b.n	800f7a8 <ai_platform_get_activations_map+0x50>
 800f7a6:	4619      	mov	r1, r3
 800f7a8:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800f7ac:	42b3      	cmp	r3, r6
 800f7ae:	d026      	beq.n	800f7fe <ai_platform_get_activations_map+0xa6>
 800f7b0:	f845 3f04 	str.w	r3, [r5, #4]!
 800f7b4:	1c4b      	adds	r3, r1, #1
 800f7b6:	429f      	cmp	r7, r3
 800f7b8:	d8f5      	bhi.n	800f7a6 <ai_platform_get_activations_map+0x4e>
 800f7ba:	d1da      	bne.n	800f772 <ai_platform_get_activations_map+0x1a>
 800f7bc:	3102      	adds	r1, #2
 800f7be:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800f7c2:	42b3      	cmp	r3, r6
 800f7c4:	d1d5      	bne.n	800f772 <ai_platform_get_activations_map+0x1a>
 800f7c6:	2401      	movs	r4, #1
 800f7c8:	e7d3      	b.n	800f772 <ai_platform_get_activations_map+0x1a>
 800f7ca:	f106 000c 	add.w	r0, r6, #12
 800f7ce:	f7ff ff4d 	bl	800f66c <ai_buffer_array_sane>
 800f7d2:	2800      	cmp	r0, #0
 800f7d4:	d0cc      	beq.n	800f770 <ai_platform_get_activations_map+0x18>
 800f7d6:	89f3      	ldrh	r3, [r6, #14]
 800f7d8:	429f      	cmp	r7, r3
 800f7da:	d1c9      	bne.n	800f770 <ai_platform_get_activations_map+0x18>
 800f7dc:	3d04      	subs	r5, #4
 800f7de:	4622      	mov	r2, r4
 800f7e0:	6933      	ldr	r3, [r6, #16]
 800f7e2:	4423      	add	r3, r4
 800f7e4:	341c      	adds	r4, #28
 800f7e6:	685b      	ldr	r3, [r3, #4]
 800f7e8:	b123      	cbz	r3, 800f7f4 <ai_platform_get_activations_map+0x9c>
 800f7ea:	3201      	adds	r2, #1
 800f7ec:	f845 3f04 	str.w	r3, [r5, #4]!
 800f7f0:	4297      	cmp	r7, r2
 800f7f2:	d8f5      	bhi.n	800f7e0 <ai_platform_get_activations_map+0x88>
 800f7f4:	1abc      	subs	r4, r7, r2
 800f7f6:	fab4 f484 	clz	r4, r4
 800f7fa:	0964      	lsrs	r4, r4, #5
 800f7fc:	e7b9      	b.n	800f772 <ai_platform_get_activations_map+0x1a>
 800f7fe:	428f      	cmp	r7, r1
 800f800:	d1b7      	bne.n	800f772 <ai_platform_get_activations_map+0x1a>
 800f802:	e7e0      	b.n	800f7c6 <ai_platform_get_activations_map+0x6e>
 800f804:	a1facade 	.word	0xa1facade

0800f808 <ai_platform_bind_network_params>:
 800f808:	2a00      	cmp	r2, #0
 800f80a:	bf18      	it	ne
 800f80c:	2900      	cmpne	r1, #0
 800f80e:	d010      	beq.n	800f832 <ai_platform_bind_network_params+0x2a>
 800f810:	b178      	cbz	r0, 800f832 <ai_platform_bind_network_params+0x2a>
 800f812:	4603      	mov	r3, r0
 800f814:	4808      	ldr	r0, [pc, #32]	@ (800f838 <ai_platform_bind_network_params+0x30>)
 800f816:	f103 0c0c 	add.w	ip, r3, #12
 800f81a:	f843 0b04 	str.w	r0, [r3], #4
 800f81e:	c903      	ldmia	r1, {r0, r1}
 800f820:	e883 0003 	stmia.w	r3, {r0, r1}
 800f824:	2301      	movs	r3, #1
 800f826:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f82a:	e88c 0003 	stmia.w	ip, {r0, r1}
 800f82e:	4618      	mov	r0, r3
 800f830:	4770      	bx	lr
 800f832:	2300      	movs	r3, #0
 800f834:	4618      	mov	r0, r3
 800f836:	4770      	bx	lr
 800f838:	a1facade 	.word	0xa1facade

0800f83c <ai_platform_network_get_error>:
 800f83c:	b510      	push	{r4, lr}
 800f83e:	2800      	cmp	r0, #0
 800f840:	d03f      	beq.n	800f8c2 <ai_platform_network_get_error+0x86>
 800f842:	4b7d      	ldr	r3, [pc, #500]	@ (800fa38 <ai_platform_network_get_error+0x1fc>)
 800f844:	4604      	mov	r4, r0
 800f846:	6802      	ldr	r2, [r0, #0]
 800f848:	429a      	cmp	r2, r3
 800f84a:	d13a      	bne.n	800f8c2 <ai_platform_network_get_error+0x86>
 800f84c:	f7ff ff28 	bl	800f6a0 <_ai_platform_acquire_crc>
 800f850:	4b7a      	ldr	r3, [pc, #488]	@ (800fa3c <ai_platform_network_get_error+0x200>)
 800f852:	f46f 628a 	mvn.w	r2, #1104	@ 0x450
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f85c:	189a      	adds	r2, r3, r2
 800f85e:	2a01      	cmp	r2, #1
 800f860:	f240 8086 	bls.w	800f970 <ai_platform_network_get_error+0x134>
 800f864:	f240 4249 	movw	r2, #1097	@ 0x449
 800f868:	4293      	cmp	r3, r2
 800f86a:	f000 8081 	beq.w	800f970 <ai_platform_network_get_error+0x134>
 800f86e:	4a74      	ldr	r2, [pc, #464]	@ (800fa40 <ai_platform_network_get_error+0x204>)
 800f870:	6813      	ldr	r3, [r2, #0]
 800f872:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f876:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 800f87a:	f000 8087 	beq.w	800f98c <ai_platform_network_get_error+0x150>
 800f87e:	6813      	ldr	r3, [r2, #0]
 800f880:	f240 4183 	movw	r1, #1155	@ 0x483
 800f884:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f888:	428b      	cmp	r3, r1
 800f88a:	f000 80a9 	beq.w	800f9e0 <ai_platform_network_get_error+0x1a4>
 800f88e:	6813      	ldr	r3, [r2, #0]
 800f890:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f894:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 800f898:	f000 80c0 	beq.w	800fa1c <ai_platform_network_get_error+0x1e0>
 800f89c:	6813      	ldr	r3, [r2, #0]
 800f89e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	f040 8082 	bne.w	800f9ac <ai_platform_network_get_error+0x170>
 800f8a8:	4a66      	ldr	r2, [pc, #408]	@ (800fa44 <ai_platform_network_get_error+0x208>)
 800f8aa:	2301      	movs	r3, #1
 800f8ac:	6093      	str	r3, [r2, #8]
 800f8ae:	6893      	ldr	r3, [r2, #8]
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d1fc      	bne.n	800f8ae <ai_platform_network_get_error+0x72>
 800f8b4:	4964      	ldr	r1, [pc, #400]	@ (800fa48 <ai_platform_network_get_error+0x20c>)
 800f8b6:	4b65      	ldr	r3, [pc, #404]	@ (800fa4c <ai_platform_network_get_error+0x210>)
 800f8b8:	6011      	str	r1, [r2, #0]
 800f8ba:	6812      	ldr	r2, [r2, #0]
 800f8bc:	429a      	cmp	r2, r3
 800f8be:	d075      	beq.n	800f9ac <ai_platform_network_get_error+0x170>
 800f8c0:	e7fe      	b.n	800f8c0 <ai_platform_network_get_error+0x84>
 800f8c2:	f7ff feed 	bl	800f6a0 <_ai_platform_acquire_crc>
 800f8c6:	4b5d      	ldr	r3, [pc, #372]	@ (800fa3c <ai_platform_network_get_error+0x200>)
 800f8c8:	f46f 618a 	mvn.w	r1, #1104	@ 0x450
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f8d2:	185a      	adds	r2, r3, r1
 800f8d4:	2a01      	cmp	r2, #1
 800f8d6:	d929      	bls.n	800f92c <ai_platform_network_get_error+0xf0>
 800f8d8:	f240 4249 	movw	r2, #1097	@ 0x449
 800f8dc:	4293      	cmp	r3, r2
 800f8de:	d025      	beq.n	800f92c <ai_platform_network_get_error+0xf0>
 800f8e0:	4a57      	ldr	r2, [pc, #348]	@ (800fa40 <ai_platform_network_get_error+0x204>)
 800f8e2:	6813      	ldr	r3, [r2, #0]
 800f8e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f8e8:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 800f8ec:	d02b      	beq.n	800f946 <ai_platform_network_get_error+0x10a>
 800f8ee:	6813      	ldr	r3, [r2, #0]
 800f8f0:	f240 4183 	movw	r1, #1155	@ 0x483
 800f8f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f8f8:	428b      	cmp	r3, r1
 800f8fa:	d060      	beq.n	800f9be <ai_platform_network_get_error+0x182>
 800f8fc:	6813      	ldr	r3, [r2, #0]
 800f8fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f902:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 800f906:	d07c      	beq.n	800fa02 <ai_platform_network_get_error+0x1c6>
 800f908:	6813      	ldr	r3, [r2, #0]
 800f90a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d129      	bne.n	800f966 <ai_platform_network_get_error+0x12a>
 800f912:	4a4c      	ldr	r2, [pc, #304]	@ (800fa44 <ai_platform_network_get_error+0x208>)
 800f914:	2301      	movs	r3, #1
 800f916:	6093      	str	r3, [r2, #8]
 800f918:	6893      	ldr	r3, [r2, #8]
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d1fc      	bne.n	800f918 <ai_platform_network_get_error+0xdc>
 800f91e:	494a      	ldr	r1, [pc, #296]	@ (800fa48 <ai_platform_network_get_error+0x20c>)
 800f920:	4b4a      	ldr	r3, [pc, #296]	@ (800fa4c <ai_platform_network_get_error+0x210>)
 800f922:	6011      	str	r1, [r2, #0]
 800f924:	6812      	ldr	r2, [r2, #0]
 800f926:	429a      	cmp	r2, r3
 800f928:	d01d      	beq.n	800f966 <ai_platform_network_get_error+0x12a>
 800f92a:	e7fe      	b.n	800f92a <ai_platform_network_get_error+0xee>
 800f92c:	4a45      	ldr	r2, [pc, #276]	@ (800fa44 <ai_platform_network_get_error+0x208>)
 800f92e:	2301      	movs	r3, #1
 800f930:	6093      	str	r3, [r2, #8]
 800f932:	6893      	ldr	r3, [r2, #8]
 800f934:	2b00      	cmp	r3, #0
 800f936:	d1fc      	bne.n	800f932 <ai_platform_network_get_error+0xf6>
 800f938:	4943      	ldr	r1, [pc, #268]	@ (800fa48 <ai_platform_network_get_error+0x20c>)
 800f93a:	4b44      	ldr	r3, [pc, #272]	@ (800fa4c <ai_platform_network_get_error+0x210>)
 800f93c:	6011      	str	r1, [r2, #0]
 800f93e:	6812      	ldr	r2, [r2, #0]
 800f940:	429a      	cmp	r2, r3
 800f942:	d010      	beq.n	800f966 <ai_platform_network_get_error+0x12a>
 800f944:	e7fe      	b.n	800f944 <ai_platform_network_get_error+0x108>
 800f946:	4a42      	ldr	r2, [pc, #264]	@ (800fa50 <ai_platform_network_get_error+0x214>)
 800f948:	2301      	movs	r3, #1
 800f94a:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 800f94e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 800f952:	2b00      	cmp	r3, #0
 800f954:	d1fb      	bne.n	800f94e <ai_platform_network_get_error+0x112>
 800f956:	493c      	ldr	r1, [pc, #240]	@ (800fa48 <ai_platform_network_get_error+0x20c>)
 800f958:	4b3c      	ldr	r3, [pc, #240]	@ (800fa4c <ai_platform_network_get_error+0x210>)
 800f95a:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 800f95e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 800f962:	429a      	cmp	r2, r3
 800f964:	d111      	bne.n	800f98a <ai_platform_network_get_error+0x14e>
 800f966:	f7ff fe9d 	bl	800f6a4 <_ai_platform_release_crc>
 800f96a:	f241 0010 	movw	r0, #4112	@ 0x1010
 800f96e:	bd10      	pop	{r4, pc}
 800f970:	4a34      	ldr	r2, [pc, #208]	@ (800fa44 <ai_platform_network_get_error+0x208>)
 800f972:	2301      	movs	r3, #1
 800f974:	6093      	str	r3, [r2, #8]
 800f976:	6893      	ldr	r3, [r2, #8]
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d1fc      	bne.n	800f976 <ai_platform_network_get_error+0x13a>
 800f97c:	4932      	ldr	r1, [pc, #200]	@ (800fa48 <ai_platform_network_get_error+0x20c>)
 800f97e:	4b33      	ldr	r3, [pc, #204]	@ (800fa4c <ai_platform_network_get_error+0x210>)
 800f980:	6011      	str	r1, [r2, #0]
 800f982:	6812      	ldr	r2, [r2, #0]
 800f984:	429a      	cmp	r2, r3
 800f986:	d011      	beq.n	800f9ac <ai_platform_network_get_error+0x170>
 800f988:	e7fe      	b.n	800f988 <ai_platform_network_get_error+0x14c>
 800f98a:	e7fe      	b.n	800f98a <ai_platform_network_get_error+0x14e>
 800f98c:	4a30      	ldr	r2, [pc, #192]	@ (800fa50 <ai_platform_network_get_error+0x214>)
 800f98e:	2301      	movs	r3, #1
 800f990:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 800f994:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d1fb      	bne.n	800f994 <ai_platform_network_get_error+0x158>
 800f99c:	492a      	ldr	r1, [pc, #168]	@ (800fa48 <ai_platform_network_get_error+0x20c>)
 800f99e:	4b2b      	ldr	r3, [pc, #172]	@ (800fa4c <ai_platform_network_get_error+0x210>)
 800f9a0:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 800f9a4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 800f9a8:	429a      	cmp	r2, r3
 800f9aa:	d107      	bne.n	800f9bc <ai_platform_network_get_error+0x180>
 800f9ac:	f7ff fe7a 	bl	800f6a4 <_ai_platform_release_crc>
 800f9b0:	f104 0010 	add.w	r0, r4, #16
 800f9b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f9b8:	f001 bae4 	b.w	8010f84 <core_get_error>
 800f9bc:	e7fe      	b.n	800f9bc <ai_platform_network_get_error+0x180>
 800f9be:	4a24      	ldr	r2, [pc, #144]	@ (800fa50 <ai_platform_network_get_error+0x214>)
 800f9c0:	2301      	movs	r3, #1
 800f9c2:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 800f9c6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d1fb      	bne.n	800f9c6 <ai_platform_network_get_error+0x18a>
 800f9ce:	491e      	ldr	r1, [pc, #120]	@ (800fa48 <ai_platform_network_get_error+0x20c>)
 800f9d0:	4b1e      	ldr	r3, [pc, #120]	@ (800fa4c <ai_platform_network_get_error+0x210>)
 800f9d2:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 800f9d6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 800f9da:	429a      	cmp	r2, r3
 800f9dc:	d0c3      	beq.n	800f966 <ai_platform_network_get_error+0x12a>
 800f9de:	e7fe      	b.n	800f9de <ai_platform_network_get_error+0x1a2>
 800f9e0:	4a1b      	ldr	r2, [pc, #108]	@ (800fa50 <ai_platform_network_get_error+0x214>)
 800f9e2:	2301      	movs	r3, #1
 800f9e4:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 800f9e8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d1fb      	bne.n	800f9e8 <ai_platform_network_get_error+0x1ac>
 800f9f0:	4915      	ldr	r1, [pc, #84]	@ (800fa48 <ai_platform_network_get_error+0x20c>)
 800f9f2:	4b16      	ldr	r3, [pc, #88]	@ (800fa4c <ai_platform_network_get_error+0x210>)
 800f9f4:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 800f9f8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 800f9fc:	429a      	cmp	r2, r3
 800f9fe:	d0d5      	beq.n	800f9ac <ai_platform_network_get_error+0x170>
 800fa00:	e7fe      	b.n	800fa00 <ai_platform_network_get_error+0x1c4>
 800fa02:	4a10      	ldr	r2, [pc, #64]	@ (800fa44 <ai_platform_network_get_error+0x208>)
 800fa04:	2301      	movs	r3, #1
 800fa06:	6093      	str	r3, [r2, #8]
 800fa08:	6893      	ldr	r3, [r2, #8]
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d1fc      	bne.n	800fa08 <ai_platform_network_get_error+0x1cc>
 800fa0e:	490e      	ldr	r1, [pc, #56]	@ (800fa48 <ai_platform_network_get_error+0x20c>)
 800fa10:	4b0e      	ldr	r3, [pc, #56]	@ (800fa4c <ai_platform_network_get_error+0x210>)
 800fa12:	6011      	str	r1, [r2, #0]
 800fa14:	6812      	ldr	r2, [r2, #0]
 800fa16:	429a      	cmp	r2, r3
 800fa18:	d0a5      	beq.n	800f966 <ai_platform_network_get_error+0x12a>
 800fa1a:	e7fe      	b.n	800fa1a <ai_platform_network_get_error+0x1de>
 800fa1c:	4a09      	ldr	r2, [pc, #36]	@ (800fa44 <ai_platform_network_get_error+0x208>)
 800fa1e:	2301      	movs	r3, #1
 800fa20:	6093      	str	r3, [r2, #8]
 800fa22:	6893      	ldr	r3, [r2, #8]
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d1fc      	bne.n	800fa22 <ai_platform_network_get_error+0x1e6>
 800fa28:	4907      	ldr	r1, [pc, #28]	@ (800fa48 <ai_platform_network_get_error+0x20c>)
 800fa2a:	4b08      	ldr	r3, [pc, #32]	@ (800fa4c <ai_platform_network_get_error+0x210>)
 800fa2c:	6011      	str	r1, [r2, #0]
 800fa2e:	6812      	ldr	r2, [r2, #0]
 800fa30:	429a      	cmp	r2, r3
 800fa32:	d0bb      	beq.n	800f9ac <ai_platform_network_get_error+0x170>
 800fa34:	e7fe      	b.n	800fa34 <ai_platform_network_get_error+0x1f8>
 800fa36:	bf00      	nop
 800fa38:	a1c00100 	.word	0xa1c00100
 800fa3c:	e0042000 	.word	0xe0042000
 800fa40:	5c001000 	.word	0x5c001000
 800fa44:	40023000 	.word	0x40023000
 800fa48:	f407a5c2 	.word	0xf407a5c2
 800fa4c:	b5e8b5cd 	.word	0xb5e8b5cd
 800fa50:	58024000 	.word	0x58024000

0800fa54 <ai_platform_network_set_error>:
 800fa54:	b110      	cbz	r0, 800fa5c <ai_platform_network_set_error+0x8>
 800fa56:	3010      	adds	r0, #16
 800fa58:	f001 ba9a 	b.w	8010f90 <core_set_error>
 800fa5c:	4770      	bx	lr
 800fa5e:	bf00      	nop

0800fa60 <ai_platform_inputs_get>:
 800fa60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa64:	b085      	sub	sp, #20
 800fa66:	9102      	str	r1, [sp, #8]
 800fa68:	2800      	cmp	r0, #0
 800fa6a:	f000 8093 	beq.w	800fb94 <ai_platform_inputs_get+0x134>
 800fa6e:	4baa      	ldr	r3, [pc, #680]	@ (800fd18 <ai_platform_inputs_get+0x2b8>)
 800fa70:	4681      	mov	r9, r0
 800fa72:	6802      	ldr	r2, [r0, #0]
 800fa74:	429a      	cmp	r2, r3
 800fa76:	f040 808d 	bne.w	800fb94 <ai_platform_inputs_get+0x134>
 800fa7a:	f7ff fe11 	bl	800f6a0 <_ai_platform_acquire_crc>
 800fa7e:	4ba7      	ldr	r3, [pc, #668]	@ (800fd1c <ai_platform_inputs_get+0x2bc>)
 800fa80:	f46f 628a 	mvn.w	r2, #1104	@ 0x450
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fa8a:	189a      	adds	r2, r3, r2
 800fa8c:	2a01      	cmp	r2, #1
 800fa8e:	f240 80da 	bls.w	800fc46 <ai_platform_inputs_get+0x1e6>
 800fa92:	f240 4249 	movw	r2, #1097	@ 0x449
 800fa96:	4293      	cmp	r3, r2
 800fa98:	f000 80d5 	beq.w	800fc46 <ai_platform_inputs_get+0x1e6>
 800fa9c:	4aa0      	ldr	r2, [pc, #640]	@ (800fd20 <ai_platform_inputs_get+0x2c0>)
 800fa9e:	6813      	ldr	r3, [r2, #0]
 800faa0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800faa4:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 800faa8:	f000 80dc 	beq.w	800fc64 <ai_platform_inputs_get+0x204>
 800faac:	6813      	ldr	r3, [r2, #0]
 800faae:	f240 4183 	movw	r1, #1155	@ 0x483
 800fab2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fab6:	428b      	cmp	r3, r1
 800fab8:	f000 810e 	beq.w	800fcd8 <ai_platform_inputs_get+0x278>
 800fabc:	6813      	ldr	r3, [r2, #0]
 800fabe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fac2:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 800fac6:	f000 8143 	beq.w	800fd50 <ai_platform_inputs_get+0x2f0>
 800faca:	6813      	ldr	r3, [r2, #0]
 800facc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	f000 8113 	beq.w	800fcfc <ai_platform_inputs_get+0x29c>
 800fad6:	f7ff fde5 	bl	800f6a4 <_ai_platform_release_crc>
 800fada:	f8b9 302c 	ldrh.w	r3, [r9, #44]	@ 0x2c
 800fade:	2b00      	cmp	r3, #0
 800fae0:	f000 80d2 	beq.w	800fc88 <ai_platform_inputs_get+0x228>
 800fae4:	f8d9 a030 	ldr.w	sl, [r9, #48]	@ 0x30
 800fae8:	f1ba 0f00 	cmp.w	sl, #0
 800faec:	f000 80cc 	beq.w	800fc88 <ai_platform_inputs_get+0x228>
 800faf0:	2100      	movs	r1, #0
 800faf2:	f8cd 900c 	str.w	r9, [sp, #12]
 800faf6:	460d      	mov	r5, r1
 800faf8:	4689      	mov	r9, r1
 800fafa:	e016      	b.n	800fb2a <ai_platform_inputs_get+0xca>
 800fafc:	9a01      	ldr	r2, [sp, #4]
 800fafe:	2301      	movs	r3, #1
 800fb00:	f848 3002 	str.w	r3, [r8, r2]
 800fb04:	69b2      	ldr	r2, [r6, #24]
 800fb06:	f04f 0301 	mov.w	r3, #1
 800fb0a:	6856      	ldr	r6, [r2, #4]
 800fb0c:	3501      	adds	r5, #1
 800fb0e:	f109 091c 	add.w	r9, r9, #28
 800fb12:	7523      	strb	r3, [r4, #20]
 800fb14:	2300      	movs	r3, #0
 800fb16:	6962      	ldr	r2, [r4, #20]
 800fb18:	60a7      	str	r7, [r4, #8]
 800fb1a:	f36b 221f 	bfi	r2, fp, #8, #24
 800fb1e:	6126      	str	r6, [r4, #16]
 800fb20:	61a1      	str	r1, [r4, #24]
 800fb22:	60e3      	str	r3, [r4, #12]
 800fb24:	6162      	str	r2, [r4, #20]
 800fb26:	e9c4 0c00 	strd	r0, ip, [r4]
 800fb2a:	f8ba 3000 	ldrh.w	r3, [sl]
 800fb2e:	b2ac      	uxth	r4, r5
 800fb30:	42ab      	cmp	r3, r5
 800fb32:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 800fb36:	9301      	str	r3, [sp, #4]
 800fb38:	f240 80b5 	bls.w	800fca6 <ai_platform_inputs_get+0x246>
 800fb3c:	f8da 3004 	ldr.w	r3, [sl, #4]
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	f000 80b0 	beq.w	800fca6 <ai_platform_inputs_get+0x246>
 800fb46:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800fb4a:	2e00      	cmp	r6, #0
 800fb4c:	f000 80ab 	beq.w	800fca6 <ai_platform_inputs_get+0x246>
 800fb50:	f8da 3008 	ldr.w	r3, [sl, #8]
 800fb54:	69b2      	ldr	r2, [r6, #24]
 800fb56:	68f1      	ldr	r1, [r6, #12]
 800fb58:	6810      	ldr	r0, [r2, #0]
 800fb5a:	9100      	str	r1, [sp, #0]
 800fb5c:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 800fb60:	68b3      	ldr	r3, [r6, #8]
 800fb62:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 800fb66:	444c      	add	r4, r9
 800fb68:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 800fb6c:	f002 fd40 	bl	80125f0 <ai_array_to_buffer_fmt>
 800fb70:	69b2      	ldr	r2, [r6, #24]
 800fb72:	9900      	ldr	r1, [sp, #0]
 800fb74:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800fb78:	2f00      	cmp	r7, #0
 800fb7a:	d0c4      	beq.n	800fb06 <ai_platform_inputs_get+0xa6>
 800fb7c:	2200      	movs	r2, #0
 800fb7e:	f848 2035 	str.w	r2, [r8, r5, lsl #3]
 800fb82:	6832      	ldr	r2, [r6, #0]
 800fb84:	607a      	str	r2, [r7, #4]
 800fb86:	b112      	cbz	r2, 800fb8e <ai_platform_inputs_get+0x12e>
 800fb88:	8852      	ldrh	r2, [r2, #2]
 800fb8a:	2a00      	cmp	r2, #0
 800fb8c:	d1b6      	bne.n	800fafc <ai_platform_inputs_get+0x9c>
 800fb8e:	69b2      	ldr	r2, [r6, #24]
 800fb90:	2700      	movs	r7, #0
 800fb92:	e7b8      	b.n	800fb06 <ai_platform_inputs_get+0xa6>
 800fb94:	f7ff fd84 	bl	800f6a0 <_ai_platform_acquire_crc>
 800fb98:	4b60      	ldr	r3, [pc, #384]	@ (800fd1c <ai_platform_inputs_get+0x2bc>)
 800fb9a:	f46f 618a 	mvn.w	r1, #1104	@ 0x450
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fba4:	185a      	adds	r2, r3, r1
 800fba6:	2a01      	cmp	r2, #1
 800fba8:	d92a      	bls.n	800fc00 <ai_platform_inputs_get+0x1a0>
 800fbaa:	f240 4249 	movw	r2, #1097	@ 0x449
 800fbae:	4293      	cmp	r3, r2
 800fbb0:	d026      	beq.n	800fc00 <ai_platform_inputs_get+0x1a0>
 800fbb2:	4a5b      	ldr	r2, [pc, #364]	@ (800fd20 <ai_platform_inputs_get+0x2c0>)
 800fbb4:	6813      	ldr	r3, [r2, #0]
 800fbb6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fbba:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 800fbbe:	d02c      	beq.n	800fc1a <ai_platform_inputs_get+0x1ba>
 800fbc0:	6813      	ldr	r3, [r2, #0]
 800fbc2:	f240 4183 	movw	r1, #1155	@ 0x483
 800fbc6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fbca:	428b      	cmp	r3, r1
 800fbcc:	d073      	beq.n	800fcb6 <ai_platform_inputs_get+0x256>
 800fbce:	6813      	ldr	r3, [r2, #0]
 800fbd0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fbd4:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 800fbd8:	f000 80ac 	beq.w	800fd34 <ai_platform_inputs_get+0x2d4>
 800fbdc:	6813      	ldr	r3, [r2, #0]
 800fbde:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d129      	bne.n	800fc3a <ai_platform_inputs_get+0x1da>
 800fbe6:	4a4f      	ldr	r2, [pc, #316]	@ (800fd24 <ai_platform_inputs_get+0x2c4>)
 800fbe8:	2301      	movs	r3, #1
 800fbea:	6093      	str	r3, [r2, #8]
 800fbec:	6893      	ldr	r3, [r2, #8]
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d1fc      	bne.n	800fbec <ai_platform_inputs_get+0x18c>
 800fbf2:	494d      	ldr	r1, [pc, #308]	@ (800fd28 <ai_platform_inputs_get+0x2c8>)
 800fbf4:	4b4d      	ldr	r3, [pc, #308]	@ (800fd2c <ai_platform_inputs_get+0x2cc>)
 800fbf6:	6011      	str	r1, [r2, #0]
 800fbf8:	6812      	ldr	r2, [r2, #0]
 800fbfa:	429a      	cmp	r2, r3
 800fbfc:	d01d      	beq.n	800fc3a <ai_platform_inputs_get+0x1da>
 800fbfe:	e7fe      	b.n	800fbfe <ai_platform_inputs_get+0x19e>
 800fc00:	4a48      	ldr	r2, [pc, #288]	@ (800fd24 <ai_platform_inputs_get+0x2c4>)
 800fc02:	2301      	movs	r3, #1
 800fc04:	6093      	str	r3, [r2, #8]
 800fc06:	6893      	ldr	r3, [r2, #8]
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d1fc      	bne.n	800fc06 <ai_platform_inputs_get+0x1a6>
 800fc0c:	4946      	ldr	r1, [pc, #280]	@ (800fd28 <ai_platform_inputs_get+0x2c8>)
 800fc0e:	4b47      	ldr	r3, [pc, #284]	@ (800fd2c <ai_platform_inputs_get+0x2cc>)
 800fc10:	6011      	str	r1, [r2, #0]
 800fc12:	6812      	ldr	r2, [r2, #0]
 800fc14:	429a      	cmp	r2, r3
 800fc16:	d010      	beq.n	800fc3a <ai_platform_inputs_get+0x1da>
 800fc18:	e7fe      	b.n	800fc18 <ai_platform_inputs_get+0x1b8>
 800fc1a:	4a45      	ldr	r2, [pc, #276]	@ (800fd30 <ai_platform_inputs_get+0x2d0>)
 800fc1c:	2301      	movs	r3, #1
 800fc1e:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 800fc22:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d1fb      	bne.n	800fc22 <ai_platform_inputs_get+0x1c2>
 800fc2a:	493f      	ldr	r1, [pc, #252]	@ (800fd28 <ai_platform_inputs_get+0x2c8>)
 800fc2c:	4b3f      	ldr	r3, [pc, #252]	@ (800fd2c <ai_platform_inputs_get+0x2cc>)
 800fc2e:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 800fc32:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 800fc36:	429a      	cmp	r2, r3
 800fc38:	d113      	bne.n	800fc62 <ai_platform_inputs_get+0x202>
 800fc3a:	f7ff fd33 	bl	800f6a4 <_ai_platform_release_crc>
 800fc3e:	2000      	movs	r0, #0
 800fc40:	b005      	add	sp, #20
 800fc42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc46:	4a37      	ldr	r2, [pc, #220]	@ (800fd24 <ai_platform_inputs_get+0x2c4>)
 800fc48:	2301      	movs	r3, #1
 800fc4a:	6093      	str	r3, [r2, #8]
 800fc4c:	6893      	ldr	r3, [r2, #8]
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d1fc      	bne.n	800fc4c <ai_platform_inputs_get+0x1ec>
 800fc52:	4b35      	ldr	r3, [pc, #212]	@ (800fd28 <ai_platform_inputs_get+0x2c8>)
 800fc54:	6013      	str	r3, [r2, #0]
 800fc56:	4b35      	ldr	r3, [pc, #212]	@ (800fd2c <ai_platform_inputs_get+0x2cc>)
 800fc58:	6812      	ldr	r2, [r2, #0]
 800fc5a:	429a      	cmp	r2, r3
 800fc5c:	f43f af3b 	beq.w	800fad6 <ai_platform_inputs_get+0x76>
 800fc60:	e7fe      	b.n	800fc60 <ai_platform_inputs_get+0x200>
 800fc62:	e7fe      	b.n	800fc62 <ai_platform_inputs_get+0x202>
 800fc64:	4a32      	ldr	r2, [pc, #200]	@ (800fd30 <ai_platform_inputs_get+0x2d0>)
 800fc66:	2301      	movs	r3, #1
 800fc68:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 800fc6c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d1fb      	bne.n	800fc6c <ai_platform_inputs_get+0x20c>
 800fc74:	4b2c      	ldr	r3, [pc, #176]	@ (800fd28 <ai_platform_inputs_get+0x2c8>)
 800fc76:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 800fc7a:	4b2c      	ldr	r3, [pc, #176]	@ (800fd2c <ai_platform_inputs_get+0x2cc>)
 800fc7c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 800fc80:	429a      	cmp	r2, r3
 800fc82:	f43f af28 	beq.w	800fad6 <ai_platform_inputs_get+0x76>
 800fc86:	e7fe      	b.n	800fc86 <ai_platform_inputs_get+0x226>
 800fc88:	2400      	movs	r4, #0
 800fc8a:	2218      	movs	r2, #24
 800fc8c:	2111      	movs	r1, #17
 800fc8e:	f109 0010 	add.w	r0, r9, #16
 800fc92:	f001 f97d 	bl	8010f90 <core_set_error>
 800fc96:	4620      	mov	r0, r4
 800fc98:	9b02      	ldr	r3, [sp, #8]
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d0d0      	beq.n	800fc40 <ai_platform_inputs_get+0x1e0>
 800fc9e:	801c      	strh	r4, [r3, #0]
 800fca0:	b005      	add	sp, #20
 800fca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fca6:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800fcaa:	2c00      	cmp	r4, #0
 800fcac:	d0ec      	beq.n	800fc88 <ai_platform_inputs_get+0x228>
 800fcae:	f8da 3008 	ldr.w	r3, [sl, #8]
 800fcb2:	6858      	ldr	r0, [r3, #4]
 800fcb4:	e7f0      	b.n	800fc98 <ai_platform_inputs_get+0x238>
 800fcb6:	4a1e      	ldr	r2, [pc, #120]	@ (800fd30 <ai_platform_inputs_get+0x2d0>)
 800fcb8:	2301      	movs	r3, #1
 800fcba:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 800fcbe:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d1fb      	bne.n	800fcbe <ai_platform_inputs_get+0x25e>
 800fcc6:	4918      	ldr	r1, [pc, #96]	@ (800fd28 <ai_platform_inputs_get+0x2c8>)
 800fcc8:	4b18      	ldr	r3, [pc, #96]	@ (800fd2c <ai_platform_inputs_get+0x2cc>)
 800fcca:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 800fcce:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 800fcd2:	429a      	cmp	r2, r3
 800fcd4:	d0b1      	beq.n	800fc3a <ai_platform_inputs_get+0x1da>
 800fcd6:	e7fe      	b.n	800fcd6 <ai_platform_inputs_get+0x276>
 800fcd8:	4a15      	ldr	r2, [pc, #84]	@ (800fd30 <ai_platform_inputs_get+0x2d0>)
 800fcda:	2301      	movs	r3, #1
 800fcdc:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 800fce0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d1fb      	bne.n	800fce0 <ai_platform_inputs_get+0x280>
 800fce8:	4b0f      	ldr	r3, [pc, #60]	@ (800fd28 <ai_platform_inputs_get+0x2c8>)
 800fcea:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 800fcee:	4b0f      	ldr	r3, [pc, #60]	@ (800fd2c <ai_platform_inputs_get+0x2cc>)
 800fcf0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 800fcf4:	429a      	cmp	r2, r3
 800fcf6:	f43f aeee 	beq.w	800fad6 <ai_platform_inputs_get+0x76>
 800fcfa:	e7fe      	b.n	800fcfa <ai_platform_inputs_get+0x29a>
 800fcfc:	4a09      	ldr	r2, [pc, #36]	@ (800fd24 <ai_platform_inputs_get+0x2c4>)
 800fcfe:	2301      	movs	r3, #1
 800fd00:	6093      	str	r3, [r2, #8]
 800fd02:	6893      	ldr	r3, [r2, #8]
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d1fc      	bne.n	800fd02 <ai_platform_inputs_get+0x2a2>
 800fd08:	4b07      	ldr	r3, [pc, #28]	@ (800fd28 <ai_platform_inputs_get+0x2c8>)
 800fd0a:	6013      	str	r3, [r2, #0]
 800fd0c:	4b07      	ldr	r3, [pc, #28]	@ (800fd2c <ai_platform_inputs_get+0x2cc>)
 800fd0e:	6812      	ldr	r2, [r2, #0]
 800fd10:	429a      	cmp	r2, r3
 800fd12:	f43f aee0 	beq.w	800fad6 <ai_platform_inputs_get+0x76>
 800fd16:	e7fe      	b.n	800fd16 <ai_platform_inputs_get+0x2b6>
 800fd18:	a1c00100 	.word	0xa1c00100
 800fd1c:	e0042000 	.word	0xe0042000
 800fd20:	5c001000 	.word	0x5c001000
 800fd24:	40023000 	.word	0x40023000
 800fd28:	f407a5c2 	.word	0xf407a5c2
 800fd2c:	b5e8b5cd 	.word	0xb5e8b5cd
 800fd30:	58024000 	.word	0x58024000
 800fd34:	4a0d      	ldr	r2, [pc, #52]	@ (800fd6c <ai_platform_inputs_get+0x30c>)
 800fd36:	2301      	movs	r3, #1
 800fd38:	6093      	str	r3, [r2, #8]
 800fd3a:	6893      	ldr	r3, [r2, #8]
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d1fc      	bne.n	800fd3a <ai_platform_inputs_get+0x2da>
 800fd40:	490b      	ldr	r1, [pc, #44]	@ (800fd70 <ai_platform_inputs_get+0x310>)
 800fd42:	4b0c      	ldr	r3, [pc, #48]	@ (800fd74 <ai_platform_inputs_get+0x314>)
 800fd44:	6011      	str	r1, [r2, #0]
 800fd46:	6812      	ldr	r2, [r2, #0]
 800fd48:	429a      	cmp	r2, r3
 800fd4a:	f43f af76 	beq.w	800fc3a <ai_platform_inputs_get+0x1da>
 800fd4e:	e7fe      	b.n	800fd4e <ai_platform_inputs_get+0x2ee>
 800fd50:	4a06      	ldr	r2, [pc, #24]	@ (800fd6c <ai_platform_inputs_get+0x30c>)
 800fd52:	2301      	movs	r3, #1
 800fd54:	6093      	str	r3, [r2, #8]
 800fd56:	6893      	ldr	r3, [r2, #8]
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d1fc      	bne.n	800fd56 <ai_platform_inputs_get+0x2f6>
 800fd5c:	4b04      	ldr	r3, [pc, #16]	@ (800fd70 <ai_platform_inputs_get+0x310>)
 800fd5e:	6013      	str	r3, [r2, #0]
 800fd60:	4b04      	ldr	r3, [pc, #16]	@ (800fd74 <ai_platform_inputs_get+0x314>)
 800fd62:	6812      	ldr	r2, [r2, #0]
 800fd64:	429a      	cmp	r2, r3
 800fd66:	f43f aeb6 	beq.w	800fad6 <ai_platform_inputs_get+0x76>
 800fd6a:	e7fe      	b.n	800fd6a <ai_platform_inputs_get+0x30a>
 800fd6c:	40023000 	.word	0x40023000
 800fd70:	f407a5c2 	.word	0xf407a5c2
 800fd74:	b5e8b5cd 	.word	0xb5e8b5cd

0800fd78 <ai_platform_outputs_get>:
 800fd78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd7c:	b085      	sub	sp, #20
 800fd7e:	9102      	str	r1, [sp, #8]
 800fd80:	2800      	cmp	r0, #0
 800fd82:	f000 808f 	beq.w	800fea4 <ai_platform_outputs_get+0x12c>
 800fd86:	4ba8      	ldr	r3, [pc, #672]	@ (8010028 <ai_platform_outputs_get+0x2b0>)
 800fd88:	4681      	mov	r9, r0
 800fd8a:	6802      	ldr	r2, [r0, #0]
 800fd8c:	429a      	cmp	r2, r3
 800fd8e:	f040 8089 	bne.w	800fea4 <ai_platform_outputs_get+0x12c>
 800fd92:	f7ff fc85 	bl	800f6a0 <_ai_platform_acquire_crc>
 800fd96:	4ba5      	ldr	r3, [pc, #660]	@ (801002c <ai_platform_outputs_get+0x2b4>)
 800fd98:	f46f 628a 	mvn.w	r2, #1104	@ 0x450
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fda2:	189a      	adds	r2, r3, r2
 800fda4:	2a01      	cmp	r2, #1
 800fda6:	f240 80d6 	bls.w	800ff56 <ai_platform_outputs_get+0x1de>
 800fdaa:	f240 4249 	movw	r2, #1097	@ 0x449
 800fdae:	4293      	cmp	r3, r2
 800fdb0:	f000 80d1 	beq.w	800ff56 <ai_platform_outputs_get+0x1de>
 800fdb4:	4a9e      	ldr	r2, [pc, #632]	@ (8010030 <ai_platform_outputs_get+0x2b8>)
 800fdb6:	6813      	ldr	r3, [r2, #0]
 800fdb8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fdbc:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 800fdc0:	f000 80d8 	beq.w	800ff74 <ai_platform_outputs_get+0x1fc>
 800fdc4:	6813      	ldr	r3, [r2, #0]
 800fdc6:	f240 4183 	movw	r1, #1155	@ 0x483
 800fdca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fdce:	428b      	cmp	r3, r1
 800fdd0:	f000 8109 	beq.w	800ffe6 <ai_platform_outputs_get+0x26e>
 800fdd4:	6813      	ldr	r3, [r2, #0]
 800fdd6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fdda:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 800fdde:	f000 813f 	beq.w	8010060 <ai_platform_outputs_get+0x2e8>
 800fde2:	6813      	ldr	r3, [r2, #0]
 800fde4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	f000 810e 	beq.w	801000a <ai_platform_outputs_get+0x292>
 800fdee:	f7ff fc59 	bl	800f6a4 <_ai_platform_release_crc>
 800fdf2:	f8b9 302c 	ldrh.w	r3, [r9, #44]	@ 0x2c
 800fdf6:	2b01      	cmp	r3, #1
 800fdf8:	f240 80db 	bls.w	800ffb2 <ai_platform_outputs_get+0x23a>
 800fdfc:	2100      	movs	r1, #0
 800fdfe:	f8d9 a030 	ldr.w	sl, [r9, #48]	@ 0x30
 800fe02:	f8cd 900c 	str.w	r9, [sp, #12]
 800fe06:	460d      	mov	r5, r1
 800fe08:	4689      	mov	r9, r1
 800fe0a:	e016      	b.n	800fe3a <ai_platform_outputs_get+0xc2>
 800fe0c:	9a01      	ldr	r2, [sp, #4]
 800fe0e:	2301      	movs	r3, #1
 800fe10:	f848 3002 	str.w	r3, [r8, r2]
 800fe14:	69b2      	ldr	r2, [r6, #24]
 800fe16:	f04f 0301 	mov.w	r3, #1
 800fe1a:	6856      	ldr	r6, [r2, #4]
 800fe1c:	3501      	adds	r5, #1
 800fe1e:	f109 091c 	add.w	r9, r9, #28
 800fe22:	7523      	strb	r3, [r4, #20]
 800fe24:	2300      	movs	r3, #0
 800fe26:	6962      	ldr	r2, [r4, #20]
 800fe28:	60a7      	str	r7, [r4, #8]
 800fe2a:	f36b 221f 	bfi	r2, fp, #8, #24
 800fe2e:	6126      	str	r6, [r4, #16]
 800fe30:	61a1      	str	r1, [r4, #24]
 800fe32:	60e3      	str	r3, [r4, #12]
 800fe34:	6162      	str	r2, [r4, #20]
 800fe36:	e9c4 0c00 	strd	r0, ip, [r4]
 800fe3a:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800fe3e:	b2ac      	uxth	r4, r5
 800fe40:	42ab      	cmp	r3, r5
 800fe42:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 800fe46:	9301      	str	r3, [sp, #4]
 800fe48:	f240 80a6 	bls.w	800ff98 <ai_platform_outputs_get+0x220>
 800fe4c:	f8da 3010 	ldr.w	r3, [sl, #16]
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	f000 80a1 	beq.w	800ff98 <ai_platform_outputs_get+0x220>
 800fe56:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800fe5a:	2e00      	cmp	r6, #0
 800fe5c:	f000 809c 	beq.w	800ff98 <ai_platform_outputs_get+0x220>
 800fe60:	f8da 3014 	ldr.w	r3, [sl, #20]
 800fe64:	69b2      	ldr	r2, [r6, #24]
 800fe66:	68f1      	ldr	r1, [r6, #12]
 800fe68:	6810      	ldr	r0, [r2, #0]
 800fe6a:	9100      	str	r1, [sp, #0]
 800fe6c:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 800fe70:	68b3      	ldr	r3, [r6, #8]
 800fe72:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 800fe76:	444c      	add	r4, r9
 800fe78:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 800fe7c:	f002 fbb8 	bl	80125f0 <ai_array_to_buffer_fmt>
 800fe80:	69b2      	ldr	r2, [r6, #24]
 800fe82:	9900      	ldr	r1, [sp, #0]
 800fe84:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800fe88:	2f00      	cmp	r7, #0
 800fe8a:	d0c4      	beq.n	800fe16 <ai_platform_outputs_get+0x9e>
 800fe8c:	2200      	movs	r2, #0
 800fe8e:	f848 2035 	str.w	r2, [r8, r5, lsl #3]
 800fe92:	6832      	ldr	r2, [r6, #0]
 800fe94:	607a      	str	r2, [r7, #4]
 800fe96:	b112      	cbz	r2, 800fe9e <ai_platform_outputs_get+0x126>
 800fe98:	8852      	ldrh	r2, [r2, #2]
 800fe9a:	2a00      	cmp	r2, #0
 800fe9c:	d1b6      	bne.n	800fe0c <ai_platform_outputs_get+0x94>
 800fe9e:	69b2      	ldr	r2, [r6, #24]
 800fea0:	2700      	movs	r7, #0
 800fea2:	e7b8      	b.n	800fe16 <ai_platform_outputs_get+0x9e>
 800fea4:	f7ff fbfc 	bl	800f6a0 <_ai_platform_acquire_crc>
 800fea8:	4b60      	ldr	r3, [pc, #384]	@ (801002c <ai_platform_outputs_get+0x2b4>)
 800feaa:	f46f 618a 	mvn.w	r1, #1104	@ 0x450
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800feb4:	185a      	adds	r2, r3, r1
 800feb6:	2a01      	cmp	r2, #1
 800feb8:	d92a      	bls.n	800ff10 <ai_platform_outputs_get+0x198>
 800feba:	f240 4249 	movw	r2, #1097	@ 0x449
 800febe:	4293      	cmp	r3, r2
 800fec0:	d026      	beq.n	800ff10 <ai_platform_outputs_get+0x198>
 800fec2:	4a5b      	ldr	r2, [pc, #364]	@ (8010030 <ai_platform_outputs_get+0x2b8>)
 800fec4:	6813      	ldr	r3, [r2, #0]
 800fec6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800feca:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 800fece:	d02c      	beq.n	800ff2a <ai_platform_outputs_get+0x1b2>
 800fed0:	6813      	ldr	r3, [r2, #0]
 800fed2:	f240 4183 	movw	r1, #1155	@ 0x483
 800fed6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800feda:	428b      	cmp	r3, r1
 800fedc:	d072      	beq.n	800ffc4 <ai_platform_outputs_get+0x24c>
 800fede:	6813      	ldr	r3, [r2, #0]
 800fee0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fee4:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 800fee8:	f000 80ac 	beq.w	8010044 <ai_platform_outputs_get+0x2cc>
 800feec:	6813      	ldr	r3, [r2, #0]
 800feee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d129      	bne.n	800ff4a <ai_platform_outputs_get+0x1d2>
 800fef6:	4a4f      	ldr	r2, [pc, #316]	@ (8010034 <ai_platform_outputs_get+0x2bc>)
 800fef8:	2301      	movs	r3, #1
 800fefa:	6093      	str	r3, [r2, #8]
 800fefc:	6893      	ldr	r3, [r2, #8]
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d1fc      	bne.n	800fefc <ai_platform_outputs_get+0x184>
 800ff02:	494d      	ldr	r1, [pc, #308]	@ (8010038 <ai_platform_outputs_get+0x2c0>)
 800ff04:	4b4d      	ldr	r3, [pc, #308]	@ (801003c <ai_platform_outputs_get+0x2c4>)
 800ff06:	6011      	str	r1, [r2, #0]
 800ff08:	6812      	ldr	r2, [r2, #0]
 800ff0a:	429a      	cmp	r2, r3
 800ff0c:	d01d      	beq.n	800ff4a <ai_platform_outputs_get+0x1d2>
 800ff0e:	e7fe      	b.n	800ff0e <ai_platform_outputs_get+0x196>
 800ff10:	4a48      	ldr	r2, [pc, #288]	@ (8010034 <ai_platform_outputs_get+0x2bc>)
 800ff12:	2301      	movs	r3, #1
 800ff14:	6093      	str	r3, [r2, #8]
 800ff16:	6893      	ldr	r3, [r2, #8]
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d1fc      	bne.n	800ff16 <ai_platform_outputs_get+0x19e>
 800ff1c:	4946      	ldr	r1, [pc, #280]	@ (8010038 <ai_platform_outputs_get+0x2c0>)
 800ff1e:	4b47      	ldr	r3, [pc, #284]	@ (801003c <ai_platform_outputs_get+0x2c4>)
 800ff20:	6011      	str	r1, [r2, #0]
 800ff22:	6812      	ldr	r2, [r2, #0]
 800ff24:	429a      	cmp	r2, r3
 800ff26:	d010      	beq.n	800ff4a <ai_platform_outputs_get+0x1d2>
 800ff28:	e7fe      	b.n	800ff28 <ai_platform_outputs_get+0x1b0>
 800ff2a:	4a45      	ldr	r2, [pc, #276]	@ (8010040 <ai_platform_outputs_get+0x2c8>)
 800ff2c:	2301      	movs	r3, #1
 800ff2e:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 800ff32:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d1fb      	bne.n	800ff32 <ai_platform_outputs_get+0x1ba>
 800ff3a:	493f      	ldr	r1, [pc, #252]	@ (8010038 <ai_platform_outputs_get+0x2c0>)
 800ff3c:	4b3f      	ldr	r3, [pc, #252]	@ (801003c <ai_platform_outputs_get+0x2c4>)
 800ff3e:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 800ff42:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 800ff46:	429a      	cmp	r2, r3
 800ff48:	d113      	bne.n	800ff72 <ai_platform_outputs_get+0x1fa>
 800ff4a:	f7ff fbab 	bl	800f6a4 <_ai_platform_release_crc>
 800ff4e:	2000      	movs	r0, #0
 800ff50:	b005      	add	sp, #20
 800ff52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff56:	4a37      	ldr	r2, [pc, #220]	@ (8010034 <ai_platform_outputs_get+0x2bc>)
 800ff58:	2301      	movs	r3, #1
 800ff5a:	6093      	str	r3, [r2, #8]
 800ff5c:	6893      	ldr	r3, [r2, #8]
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d1fc      	bne.n	800ff5c <ai_platform_outputs_get+0x1e4>
 800ff62:	4b35      	ldr	r3, [pc, #212]	@ (8010038 <ai_platform_outputs_get+0x2c0>)
 800ff64:	6013      	str	r3, [r2, #0]
 800ff66:	4b35      	ldr	r3, [pc, #212]	@ (801003c <ai_platform_outputs_get+0x2c4>)
 800ff68:	6812      	ldr	r2, [r2, #0]
 800ff6a:	429a      	cmp	r2, r3
 800ff6c:	f43f af3f 	beq.w	800fdee <ai_platform_outputs_get+0x76>
 800ff70:	e7fe      	b.n	800ff70 <ai_platform_outputs_get+0x1f8>
 800ff72:	e7fe      	b.n	800ff72 <ai_platform_outputs_get+0x1fa>
 800ff74:	4a32      	ldr	r2, [pc, #200]	@ (8010040 <ai_platform_outputs_get+0x2c8>)
 800ff76:	2301      	movs	r3, #1
 800ff78:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 800ff7c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d1fb      	bne.n	800ff7c <ai_platform_outputs_get+0x204>
 800ff84:	4b2c      	ldr	r3, [pc, #176]	@ (8010038 <ai_platform_outputs_get+0x2c0>)
 800ff86:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 800ff8a:	4b2c      	ldr	r3, [pc, #176]	@ (801003c <ai_platform_outputs_get+0x2c4>)
 800ff8c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 800ff90:	429a      	cmp	r2, r3
 800ff92:	f43f af2c 	beq.w	800fdee <ai_platform_outputs_get+0x76>
 800ff96:	e7fe      	b.n	800ff96 <ai_platform_outputs_get+0x21e>
 800ff98:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800ff9c:	b14c      	cbz	r4, 800ffb2 <ai_platform_outputs_get+0x23a>
 800ff9e:	f8da 3014 	ldr.w	r3, [sl, #20]
 800ffa2:	6858      	ldr	r0, [r3, #4]
 800ffa4:	9b02      	ldr	r3, [sp, #8]
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d0d2      	beq.n	800ff50 <ai_platform_outputs_get+0x1d8>
 800ffaa:	801c      	strh	r4, [r3, #0]
 800ffac:	b005      	add	sp, #20
 800ffae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffb2:	2400      	movs	r4, #0
 800ffb4:	2218      	movs	r2, #24
 800ffb6:	2111      	movs	r1, #17
 800ffb8:	f109 0010 	add.w	r0, r9, #16
 800ffbc:	f000 ffe8 	bl	8010f90 <core_set_error>
 800ffc0:	4620      	mov	r0, r4
 800ffc2:	e7ef      	b.n	800ffa4 <ai_platform_outputs_get+0x22c>
 800ffc4:	4a1e      	ldr	r2, [pc, #120]	@ (8010040 <ai_platform_outputs_get+0x2c8>)
 800ffc6:	2301      	movs	r3, #1
 800ffc8:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 800ffcc:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d1fb      	bne.n	800ffcc <ai_platform_outputs_get+0x254>
 800ffd4:	4918      	ldr	r1, [pc, #96]	@ (8010038 <ai_platform_outputs_get+0x2c0>)
 800ffd6:	4b19      	ldr	r3, [pc, #100]	@ (801003c <ai_platform_outputs_get+0x2c4>)
 800ffd8:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 800ffdc:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 800ffe0:	429a      	cmp	r2, r3
 800ffe2:	d0b2      	beq.n	800ff4a <ai_platform_outputs_get+0x1d2>
 800ffe4:	e7fe      	b.n	800ffe4 <ai_platform_outputs_get+0x26c>
 800ffe6:	4a16      	ldr	r2, [pc, #88]	@ (8010040 <ai_platform_outputs_get+0x2c8>)
 800ffe8:	2301      	movs	r3, #1
 800ffea:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 800ffee:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d1fb      	bne.n	800ffee <ai_platform_outputs_get+0x276>
 800fff6:	4b10      	ldr	r3, [pc, #64]	@ (8010038 <ai_platform_outputs_get+0x2c0>)
 800fff8:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 800fffc:	4b0f      	ldr	r3, [pc, #60]	@ (801003c <ai_platform_outputs_get+0x2c4>)
 800fffe:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8010002:	429a      	cmp	r2, r3
 8010004:	f43f aef3 	beq.w	800fdee <ai_platform_outputs_get+0x76>
 8010008:	e7fe      	b.n	8010008 <ai_platform_outputs_get+0x290>
 801000a:	4a0a      	ldr	r2, [pc, #40]	@ (8010034 <ai_platform_outputs_get+0x2bc>)
 801000c:	2301      	movs	r3, #1
 801000e:	6093      	str	r3, [r2, #8]
 8010010:	6893      	ldr	r3, [r2, #8]
 8010012:	2b00      	cmp	r3, #0
 8010014:	d1fc      	bne.n	8010010 <ai_platform_outputs_get+0x298>
 8010016:	4b08      	ldr	r3, [pc, #32]	@ (8010038 <ai_platform_outputs_get+0x2c0>)
 8010018:	6013      	str	r3, [r2, #0]
 801001a:	4b08      	ldr	r3, [pc, #32]	@ (801003c <ai_platform_outputs_get+0x2c4>)
 801001c:	6812      	ldr	r2, [r2, #0]
 801001e:	429a      	cmp	r2, r3
 8010020:	f43f aee5 	beq.w	800fdee <ai_platform_outputs_get+0x76>
 8010024:	e7fe      	b.n	8010024 <ai_platform_outputs_get+0x2ac>
 8010026:	bf00      	nop
 8010028:	a1c00100 	.word	0xa1c00100
 801002c:	e0042000 	.word	0xe0042000
 8010030:	5c001000 	.word	0x5c001000
 8010034:	40023000 	.word	0x40023000
 8010038:	f407a5c2 	.word	0xf407a5c2
 801003c:	b5e8b5cd 	.word	0xb5e8b5cd
 8010040:	58024000 	.word	0x58024000
 8010044:	4a0d      	ldr	r2, [pc, #52]	@ (801007c <ai_platform_outputs_get+0x304>)
 8010046:	2301      	movs	r3, #1
 8010048:	6093      	str	r3, [r2, #8]
 801004a:	6893      	ldr	r3, [r2, #8]
 801004c:	2b00      	cmp	r3, #0
 801004e:	d1fc      	bne.n	801004a <ai_platform_outputs_get+0x2d2>
 8010050:	490b      	ldr	r1, [pc, #44]	@ (8010080 <ai_platform_outputs_get+0x308>)
 8010052:	4b0c      	ldr	r3, [pc, #48]	@ (8010084 <ai_platform_outputs_get+0x30c>)
 8010054:	6011      	str	r1, [r2, #0]
 8010056:	6812      	ldr	r2, [r2, #0]
 8010058:	429a      	cmp	r2, r3
 801005a:	f43f af76 	beq.w	800ff4a <ai_platform_outputs_get+0x1d2>
 801005e:	e7fe      	b.n	801005e <ai_platform_outputs_get+0x2e6>
 8010060:	4a06      	ldr	r2, [pc, #24]	@ (801007c <ai_platform_outputs_get+0x304>)
 8010062:	2301      	movs	r3, #1
 8010064:	6093      	str	r3, [r2, #8]
 8010066:	6893      	ldr	r3, [r2, #8]
 8010068:	2b00      	cmp	r3, #0
 801006a:	d1fc      	bne.n	8010066 <ai_platform_outputs_get+0x2ee>
 801006c:	4b04      	ldr	r3, [pc, #16]	@ (8010080 <ai_platform_outputs_get+0x308>)
 801006e:	6013      	str	r3, [r2, #0]
 8010070:	4b04      	ldr	r3, [pc, #16]	@ (8010084 <ai_platform_outputs_get+0x30c>)
 8010072:	6812      	ldr	r2, [r2, #0]
 8010074:	429a      	cmp	r2, r3
 8010076:	f43f aeba 	beq.w	800fdee <ai_platform_outputs_get+0x76>
 801007a:	e7fe      	b.n	801007a <ai_platform_outputs_get+0x302>
 801007c:	40023000 	.word	0x40023000
 8010080:	f407a5c2 	.word	0xf407a5c2
 8010084:	b5e8b5cd 	.word	0xb5e8b5cd

08010088 <ai_platform_network_create>:
 8010088:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801008c:	b083      	sub	sp, #12
 801008e:	4604      	mov	r4, r0
 8010090:	4615      	mov	r5, r2
 8010092:	461e      	mov	r6, r3
 8010094:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 8010098:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 801009c:	f7ff fb00 	bl	800f6a0 <_ai_platform_acquire_crc>
 80100a0:	2800      	cmp	r0, #0
 80100a2:	f000 80bd 	beq.w	8010220 <ai_platform_network_create+0x198>
 80100a6:	4ba5      	ldr	r3, [pc, #660]	@ (801033c <ai_platform_network_create+0x2b4>)
 80100a8:	f46f 6c8a 	mvn.w	ip, #1104	@ 0x450
 80100ac:	4601      	mov	r1, r0
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80100b4:	eb03 020c 	add.w	r2, r3, ip
 80100b8:	2a01      	cmp	r2, #1
 80100ba:	f240 80a8 	bls.w	801020e <ai_platform_network_create+0x186>
 80100be:	f240 4249 	movw	r2, #1097	@ 0x449
 80100c2:	4293      	cmp	r3, r2
 80100c4:	f000 80a3 	beq.w	801020e <ai_platform_network_create+0x186>
 80100c8:	4a9d      	ldr	r2, [pc, #628]	@ (8010340 <ai_platform_network_create+0x2b8>)
 80100ca:	6813      	ldr	r3, [r2, #0]
 80100cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80100d0:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 80100d4:	f000 80b9 	beq.w	801024a <ai_platform_network_create+0x1c2>
 80100d8:	6813      	ldr	r3, [r2, #0]
 80100da:	f240 4c83 	movw	ip, #1155	@ 0x483
 80100de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80100e2:	4563      	cmp	r3, ip
 80100e4:	f000 80a1 	beq.w	801022a <ai_platform_network_create+0x1a2>
 80100e8:	6813      	ldr	r3, [r2, #0]
 80100ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80100ee:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 80100f2:	f000 8153 	beq.w	801039c <ai_platform_network_create+0x314>
 80100f6:	6813      	ldr	r3, [r2, #0]
 80100f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	f040 808d 	bne.w	801021c <ai_platform_network_create+0x194>
 8010102:	4a90      	ldr	r2, [pc, #576]	@ (8010344 <ai_platform_network_create+0x2bc>)
 8010104:	2318      	movs	r3, #24
 8010106:	6093      	str	r3, [r2, #8]
 8010108:	6893      	ldr	r3, [r2, #8]
 801010a:	2b18      	cmp	r3, #24
 801010c:	f040 8086 	bne.w	801021c <ai_platform_network_create+0x194>
 8010110:	2301      	movs	r3, #1
 8010112:	6093      	str	r3, [r2, #8]
 8010114:	6893      	ldr	r3, [r2, #8]
 8010116:	2b00      	cmp	r3, #0
 8010118:	d1fc      	bne.n	8010114 <ai_platform_network_create+0x8c>
 801011a:	4608      	mov	r0, r1
 801011c:	f7ff fac2 	bl	800f6a4 <_ai_platform_release_crc>
 8010120:	f7ff fabe 	bl	800f6a0 <_ai_platform_acquire_crc>
 8010124:	4b85      	ldr	r3, [pc, #532]	@ (801033c <ai_platform_network_create+0x2b4>)
 8010126:	f46f 628a 	mvn.w	r2, #1104	@ 0x450
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010130:	189a      	adds	r2, r3, r2
 8010132:	2a01      	cmp	r2, #1
 8010134:	f240 809f 	bls.w	8010276 <ai_platform_network_create+0x1ee>
 8010138:	f240 4249 	movw	r2, #1097	@ 0x449
 801013c:	4293      	cmp	r3, r2
 801013e:	f000 809a 	beq.w	8010276 <ai_platform_network_create+0x1ee>
 8010142:	4a7f      	ldr	r2, [pc, #508]	@ (8010340 <ai_platform_network_create+0x2b8>)
 8010144:	6813      	ldr	r3, [r2, #0]
 8010146:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801014a:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 801014e:	f000 80a0 	beq.w	8010292 <ai_platform_network_create+0x20a>
 8010152:	6813      	ldr	r3, [r2, #0]
 8010154:	f240 4183 	movw	r1, #1155	@ 0x483
 8010158:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801015c:	428b      	cmp	r3, r1
 801015e:	f000 80bf 	beq.w	80102e0 <ai_platform_network_create+0x258>
 8010162:	6813      	ldr	r3, [r2, #0]
 8010164:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010168:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 801016c:	f000 8123 	beq.w	80103b6 <ai_platform_network_create+0x32e>
 8010170:	6813      	ldr	r3, [r2, #0]
 8010172:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010176:	2b00      	cmp	r3, #0
 8010178:	f000 80c4 	beq.w	8010304 <ai_platform_network_create+0x27c>
 801017c:	f7ff fa92 	bl	800f6a4 <_ai_platform_release_crc>
 8010180:	2c00      	cmp	r4, #0
 8010182:	f000 80aa 	beq.w	80102da <ai_platform_network_create+0x252>
 8010186:	4b70      	ldr	r3, [pc, #448]	@ (8010348 <ai_platform_network_create+0x2c0>)
 8010188:	602b      	str	r3, [r5, #0]
 801018a:	6025      	str	r5, [r4, #0]
 801018c:	f000 fef8 	bl	8010f80 <core_init>
 8010190:	2800      	cmp	r0, #0
 8010192:	f000 8090 	beq.w	80102b6 <ai_platform_network_create+0x22e>
 8010196:	f7ff fa83 	bl	800f6a0 <_ai_platform_acquire_crc>
 801019a:	4b68      	ldr	r3, [pc, #416]	@ (801033c <ai_platform_network_create+0x2b4>)
 801019c:	f46f 618a 	mvn.w	r1, #1104	@ 0x450
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80101a6:	185a      	adds	r2, r3, r1
 80101a8:	2a01      	cmp	r2, #1
 80101aa:	f240 80b9 	bls.w	8010320 <ai_platform_network_create+0x298>
 80101ae:	f240 4249 	movw	r2, #1097	@ 0x449
 80101b2:	4293      	cmp	r3, r2
 80101b4:	f000 80b4 	beq.w	8010320 <ai_platform_network_create+0x298>
 80101b8:	4a61      	ldr	r2, [pc, #388]	@ (8010340 <ai_platform_network_create+0x2b8>)
 80101ba:	6813      	ldr	r3, [r2, #0]
 80101bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80101c0:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 80101c4:	f000 80c8 	beq.w	8010358 <ai_platform_network_create+0x2d0>
 80101c8:	6813      	ldr	r3, [r2, #0]
 80101ca:	f240 4183 	movw	r1, #1155	@ 0x483
 80101ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80101d2:	428b      	cmp	r3, r1
 80101d4:	f000 8107 	beq.w	80103e6 <ai_platform_network_create+0x35e>
 80101d8:	6813      	ldr	r3, [r2, #0]
 80101da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80101de:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 80101e2:	f000 8111 	beq.w	8010408 <ai_platform_network_create+0x380>
 80101e6:	6813      	ldr	r3, [r2, #0]
 80101e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	f040 80c3 	bne.w	8010378 <ai_platform_network_create+0x2f0>
 80101f2:	4b54      	ldr	r3, [pc, #336]	@ (8010344 <ai_platform_network_create+0x2bc>)
 80101f4:	2201      	movs	r2, #1
 80101f6:	609a      	str	r2, [r3, #8]
 80101f8:	689a      	ldr	r2, [r3, #8]
 80101fa:	2a00      	cmp	r2, #0
 80101fc:	d1fc      	bne.n	80101f8 <ai_platform_network_create+0x170>
 80101fe:	4a53      	ldr	r2, [pc, #332]	@ (801034c <ai_platform_network_create+0x2c4>)
 8010200:	601a      	str	r2, [r3, #0]
 8010202:	681a      	ldr	r2, [r3, #0]
 8010204:	4b52      	ldr	r3, [pc, #328]	@ (8010350 <ai_platform_network_create+0x2c8>)
 8010206:	429a      	cmp	r2, r3
 8010208:	f000 80b6 	beq.w	8010378 <ai_platform_network_create+0x2f0>
 801020c:	e7fe      	b.n	801020c <ai_platform_network_create+0x184>
 801020e:	4b4d      	ldr	r3, [pc, #308]	@ (8010344 <ai_platform_network_create+0x2bc>)
 8010210:	2218      	movs	r2, #24
 8010212:	609a      	str	r2, [r3, #8]
 8010214:	689a      	ldr	r2, [r3, #8]
 8010216:	2a18      	cmp	r2, #24
 8010218:	d027      	beq.n	801026a <ai_platform_network_create+0x1e2>
 801021a:	4608      	mov	r0, r1
 801021c:	f7ff fa42 	bl	800f6a4 <_ai_platform_release_crc>
 8010220:	f244 1033 	movw	r0, #16691	@ 0x4133
 8010224:	b003      	add	sp, #12
 8010226:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801022a:	4a4a      	ldr	r2, [pc, #296]	@ (8010354 <ai_platform_network_create+0x2cc>)
 801022c:	2318      	movs	r3, #24
 801022e:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8010232:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8010236:	2b18      	cmp	r3, #24
 8010238:	d1f0      	bne.n	801021c <ai_platform_network_create+0x194>
 801023a:	2301      	movs	r3, #1
 801023c:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8010240:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8010244:	2b00      	cmp	r3, #0
 8010246:	d1fb      	bne.n	8010240 <ai_platform_network_create+0x1b8>
 8010248:	e767      	b.n	801011a <ai_platform_network_create+0x92>
 801024a:	4a42      	ldr	r2, [pc, #264]	@ (8010354 <ai_platform_network_create+0x2cc>)
 801024c:	2318      	movs	r3, #24
 801024e:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8010252:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8010256:	2b18      	cmp	r3, #24
 8010258:	d1e0      	bne.n	801021c <ai_platform_network_create+0x194>
 801025a:	2301      	movs	r3, #1
 801025c:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8010260:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8010264:	2b00      	cmp	r3, #0
 8010266:	d1fb      	bne.n	8010260 <ai_platform_network_create+0x1d8>
 8010268:	e757      	b.n	801011a <ai_platform_network_create+0x92>
 801026a:	2201      	movs	r2, #1
 801026c:	609a      	str	r2, [r3, #8]
 801026e:	689a      	ldr	r2, [r3, #8]
 8010270:	2a00      	cmp	r2, #0
 8010272:	d1fc      	bne.n	801026e <ai_platform_network_create+0x1e6>
 8010274:	e751      	b.n	801011a <ai_platform_network_create+0x92>
 8010276:	4a33      	ldr	r2, [pc, #204]	@ (8010344 <ai_platform_network_create+0x2bc>)
 8010278:	2301      	movs	r3, #1
 801027a:	6093      	str	r3, [r2, #8]
 801027c:	6891      	ldr	r1, [r2, #8]
 801027e:	2900      	cmp	r1, #0
 8010280:	d1fc      	bne.n	801027c <ai_platform_network_create+0x1f4>
 8010282:	4b32      	ldr	r3, [pc, #200]	@ (801034c <ai_platform_network_create+0x2c4>)
 8010284:	6013      	str	r3, [r2, #0]
 8010286:	4b32      	ldr	r3, [pc, #200]	@ (8010350 <ai_platform_network_create+0x2c8>)
 8010288:	6812      	ldr	r2, [r2, #0]
 801028a:	429a      	cmp	r2, r3
 801028c:	f43f af76 	beq.w	801017c <ai_platform_network_create+0xf4>
 8010290:	e7fe      	b.n	8010290 <ai_platform_network_create+0x208>
 8010292:	4a30      	ldr	r2, [pc, #192]	@ (8010354 <ai_platform_network_create+0x2cc>)
 8010294:	2301      	movs	r3, #1
 8010296:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 801029a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d1fb      	bne.n	801029a <ai_platform_network_create+0x212>
 80102a2:	4b2a      	ldr	r3, [pc, #168]	@ (801034c <ai_platform_network_create+0x2c4>)
 80102a4:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 80102a8:	4b29      	ldr	r3, [pc, #164]	@ (8010350 <ai_platform_network_create+0x2c8>)
 80102aa:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 80102ae:	429a      	cmp	r2, r3
 80102b0:	f43f af64 	beq.w	801017c <ai_platform_network_create+0xf4>
 80102b4:	e7fe      	b.n	80102b4 <ai_platform_network_create+0x22c>
 80102b6:	f04f 0930 	mov.w	r9, #48	@ 0x30
 80102ba:	2300      	movs	r3, #0
 80102bc:	6023      	str	r3, [r4, #0]
 80102be:	2410      	movs	r4, #16
 80102c0:	4642      	mov	r2, r8
 80102c2:	4639      	mov	r1, r7
 80102c4:	4630      	mov	r0, r6
 80102c6:	f002 fa37 	bl	8012738 <ai_version_get>
 80102ca:	4603      	mov	r3, r0
 80102cc:	2000      	movs	r0, #0
 80102ce:	64ab      	str	r3, [r5, #72]	@ 0x48
 80102d0:	f369 0007 	bfi	r0, r9, #0, #8
 80102d4:	f364 201f 	bfi	r0, r4, #8, #24
 80102d8:	e7a4      	b.n	8010224 <ai_platform_network_create+0x19c>
 80102da:	f241 0010 	movw	r0, #4112	@ 0x1010
 80102de:	e7a1      	b.n	8010224 <ai_platform_network_create+0x19c>
 80102e0:	4a1c      	ldr	r2, [pc, #112]	@ (8010354 <ai_platform_network_create+0x2cc>)
 80102e2:	2301      	movs	r3, #1
 80102e4:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 80102e8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d1fb      	bne.n	80102e8 <ai_platform_network_create+0x260>
 80102f0:	4b16      	ldr	r3, [pc, #88]	@ (801034c <ai_platform_network_create+0x2c4>)
 80102f2:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 80102f6:	4b16      	ldr	r3, [pc, #88]	@ (8010350 <ai_platform_network_create+0x2c8>)
 80102f8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 80102fc:	429a      	cmp	r2, r3
 80102fe:	f43f af3d 	beq.w	801017c <ai_platform_network_create+0xf4>
 8010302:	e7fe      	b.n	8010302 <ai_platform_network_create+0x27a>
 8010304:	4a0f      	ldr	r2, [pc, #60]	@ (8010344 <ai_platform_network_create+0x2bc>)
 8010306:	2301      	movs	r3, #1
 8010308:	6093      	str	r3, [r2, #8]
 801030a:	6893      	ldr	r3, [r2, #8]
 801030c:	2b00      	cmp	r3, #0
 801030e:	d1fc      	bne.n	801030a <ai_platform_network_create+0x282>
 8010310:	4b0e      	ldr	r3, [pc, #56]	@ (801034c <ai_platform_network_create+0x2c4>)
 8010312:	6013      	str	r3, [r2, #0]
 8010314:	4b0e      	ldr	r3, [pc, #56]	@ (8010350 <ai_platform_network_create+0x2c8>)
 8010316:	6812      	ldr	r2, [r2, #0]
 8010318:	429a      	cmp	r2, r3
 801031a:	f43f af2f 	beq.w	801017c <ai_platform_network_create+0xf4>
 801031e:	e7fe      	b.n	801031e <ai_platform_network_create+0x296>
 8010320:	4a08      	ldr	r2, [pc, #32]	@ (8010344 <ai_platform_network_create+0x2bc>)
 8010322:	2301      	movs	r3, #1
 8010324:	6093      	str	r3, [r2, #8]
 8010326:	6893      	ldr	r3, [r2, #8]
 8010328:	2b00      	cmp	r3, #0
 801032a:	d1fc      	bne.n	8010326 <ai_platform_network_create+0x29e>
 801032c:	4b07      	ldr	r3, [pc, #28]	@ (801034c <ai_platform_network_create+0x2c4>)
 801032e:	6013      	str	r3, [r2, #0]
 8010330:	4b07      	ldr	r3, [pc, #28]	@ (8010350 <ai_platform_network_create+0x2c8>)
 8010332:	6812      	ldr	r2, [r2, #0]
 8010334:	429a      	cmp	r2, r3
 8010336:	d01f      	beq.n	8010378 <ai_platform_network_create+0x2f0>
 8010338:	e7fe      	b.n	8010338 <ai_platform_network_create+0x2b0>
 801033a:	bf00      	nop
 801033c:	e0042000 	.word	0xe0042000
 8010340:	5c001000 	.word	0x5c001000
 8010344:	40023000 	.word	0x40023000
 8010348:	a1c00100 	.word	0xa1c00100
 801034c:	f407a5c2 	.word	0xf407a5c2
 8010350:	b5e8b5cd 	.word	0xb5e8b5cd
 8010354:	58024000 	.word	0x58024000
 8010358:	4a33      	ldr	r2, [pc, #204]	@ (8010428 <ai_platform_network_create+0x3a0>)
 801035a:	2301      	movs	r3, #1
 801035c:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8010360:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8010364:	2b00      	cmp	r3, #0
 8010366:	d1fb      	bne.n	8010360 <ai_platform_network_create+0x2d8>
 8010368:	4b30      	ldr	r3, [pc, #192]	@ (801042c <ai_platform_network_create+0x3a4>)
 801036a:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 801036e:	4b30      	ldr	r3, [pc, #192]	@ (8010430 <ai_platform_network_create+0x3a8>)
 8010370:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8010374:	429a      	cmp	r2, r3
 8010376:	d12c      	bne.n	80103d2 <ai_platform_network_create+0x34a>
 8010378:	f7ff f994 	bl	800f6a4 <_ai_platform_release_crc>
 801037c:	2200      	movs	r2, #0
 801037e:	4639      	mov	r1, r7
 8010380:	4630      	mov	r0, r6
 8010382:	f002 f9d9 	bl	8012738 <ai_version_get>
 8010386:	4681      	mov	r9, r0
 8010388:	2200      	movs	r2, #0
 801038a:	2105      	movs	r1, #5
 801038c:	2001      	movs	r0, #1
 801038e:	f002 f9d3 	bl	8012738 <ai_version_get>
 8010392:	4581      	cmp	r9, r0
 8010394:	d01e      	beq.n	80103d4 <ai_platform_network_create+0x34c>
 8010396:	f04f 0901 	mov.w	r9, #1
 801039a:	e78e      	b.n	80102ba <ai_platform_network_create+0x232>
 801039c:	4b25      	ldr	r3, [pc, #148]	@ (8010434 <ai_platform_network_create+0x3ac>)
 801039e:	2218      	movs	r2, #24
 80103a0:	609a      	str	r2, [r3, #8]
 80103a2:	689a      	ldr	r2, [r3, #8]
 80103a4:	2a18      	cmp	r2, #24
 80103a6:	f47f af39 	bne.w	801021c <ai_platform_network_create+0x194>
 80103aa:	2201      	movs	r2, #1
 80103ac:	609a      	str	r2, [r3, #8]
 80103ae:	689a      	ldr	r2, [r3, #8]
 80103b0:	2a00      	cmp	r2, #0
 80103b2:	d1fc      	bne.n	80103ae <ai_platform_network_create+0x326>
 80103b4:	e6b1      	b.n	801011a <ai_platform_network_create+0x92>
 80103b6:	4a1f      	ldr	r2, [pc, #124]	@ (8010434 <ai_platform_network_create+0x3ac>)
 80103b8:	2301      	movs	r3, #1
 80103ba:	6093      	str	r3, [r2, #8]
 80103bc:	6893      	ldr	r3, [r2, #8]
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d1fc      	bne.n	80103bc <ai_platform_network_create+0x334>
 80103c2:	4b1a      	ldr	r3, [pc, #104]	@ (801042c <ai_platform_network_create+0x3a4>)
 80103c4:	6013      	str	r3, [r2, #0]
 80103c6:	4b1a      	ldr	r3, [pc, #104]	@ (8010430 <ai_platform_network_create+0x3a8>)
 80103c8:	6812      	ldr	r2, [r2, #0]
 80103ca:	429a      	cmp	r2, r3
 80103cc:	f43f aed6 	beq.w	801017c <ai_platform_network_create+0xf4>
 80103d0:	e7fe      	b.n	80103d0 <ai_platform_network_create+0x348>
 80103d2:	e7fe      	b.n	80103d2 <ai_platform_network_create+0x34a>
 80103d4:	4b18      	ldr	r3, [pc, #96]	@ (8010438 <ai_platform_network_create+0x3b0>)
 80103d6:	a801      	add	r0, sp, #4
 80103d8:	9301      	str	r3, [sp, #4]
 80103da:	f000 fde5 	bl	8010fa8 <ai_check_custom_types>
 80103de:	b300      	cbz	r0, 8010422 <ai_platform_network_create+0x39a>
 80103e0:	2400      	movs	r4, #0
 80103e2:	46a1      	mov	r9, r4
 80103e4:	e76c      	b.n	80102c0 <ai_platform_network_create+0x238>
 80103e6:	4b10      	ldr	r3, [pc, #64]	@ (8010428 <ai_platform_network_create+0x3a0>)
 80103e8:	2201      	movs	r2, #1
 80103ea:	f8c3 2c08 	str.w	r2, [r3, #3080]	@ 0xc08
 80103ee:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	@ 0xc08
 80103f2:	2a00      	cmp	r2, #0
 80103f4:	d1fb      	bne.n	80103ee <ai_platform_network_create+0x366>
 80103f6:	4a0d      	ldr	r2, [pc, #52]	@ (801042c <ai_platform_network_create+0x3a4>)
 80103f8:	f8c3 2c00 	str.w	r2, [r3, #3072]	@ 0xc00
 80103fc:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	@ 0xc00
 8010400:	4b0b      	ldr	r3, [pc, #44]	@ (8010430 <ai_platform_network_create+0x3a8>)
 8010402:	429a      	cmp	r2, r3
 8010404:	d0b8      	beq.n	8010378 <ai_platform_network_create+0x2f0>
 8010406:	e7fe      	b.n	8010406 <ai_platform_network_create+0x37e>
 8010408:	4b0a      	ldr	r3, [pc, #40]	@ (8010434 <ai_platform_network_create+0x3ac>)
 801040a:	2201      	movs	r2, #1
 801040c:	609a      	str	r2, [r3, #8]
 801040e:	689a      	ldr	r2, [r3, #8]
 8010410:	2a00      	cmp	r2, #0
 8010412:	d1fc      	bne.n	801040e <ai_platform_network_create+0x386>
 8010414:	4a05      	ldr	r2, [pc, #20]	@ (801042c <ai_platform_network_create+0x3a4>)
 8010416:	601a      	str	r2, [r3, #0]
 8010418:	681a      	ldr	r2, [r3, #0]
 801041a:	4b05      	ldr	r3, [pc, #20]	@ (8010430 <ai_platform_network_create+0x3a8>)
 801041c:	429a      	cmp	r2, r3
 801041e:	d0ab      	beq.n	8010378 <ai_platform_network_create+0x2f0>
 8010420:	e7fe      	b.n	8010420 <ai_platform_network_create+0x398>
 8010422:	f04f 0902 	mov.w	r9, #2
 8010426:	e748      	b.n	80102ba <ai_platform_network_create+0x232>
 8010428:	58024000 	.word	0x58024000
 801042c:	f407a5c2 	.word	0xf407a5c2
 8010430:	b5e8b5cd 	.word	0xb5e8b5cd
 8010434:	40023000 	.word	0x40023000
 8010438:	84048403 	.word	0x84048403

0801043c <ai_platform_network_init>:
 801043c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010440:	2800      	cmp	r0, #0
 8010442:	d052      	beq.n	80104ea <ai_platform_network_init+0xae>
 8010444:	4bab      	ldr	r3, [pc, #684]	@ (80106f4 <ai_platform_network_init+0x2b8>)
 8010446:	4604      	mov	r4, r0
 8010448:	6802      	ldr	r2, [r0, #0]
 801044a:	429a      	cmp	r2, r3
 801044c:	d14d      	bne.n	80104ea <ai_platform_network_init+0xae>
 801044e:	460d      	mov	r5, r1
 8010450:	f7ff f926 	bl	800f6a0 <_ai_platform_acquire_crc>
 8010454:	4ba8      	ldr	r3, [pc, #672]	@ (80106f8 <ai_platform_network_init+0x2bc>)
 8010456:	f46f 628a 	mvn.w	r2, #1104	@ 0x450
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010460:	189a      	adds	r2, r3, r2
 8010462:	2a01      	cmp	r2, #1
 8010464:	f240 809b 	bls.w	801059e <ai_platform_network_init+0x162>
 8010468:	f240 4249 	movw	r2, #1097	@ 0x449
 801046c:	4293      	cmp	r3, r2
 801046e:	f000 8096 	beq.w	801059e <ai_platform_network_init+0x162>
 8010472:	4aa2      	ldr	r2, [pc, #648]	@ (80106fc <ai_platform_network_init+0x2c0>)
 8010474:	6813      	ldr	r3, [r2, #0]
 8010476:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801047a:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 801047e:	f000 809d 	beq.w	80105bc <ai_platform_network_init+0x180>
 8010482:	6813      	ldr	r3, [r2, #0]
 8010484:	f240 4183 	movw	r1, #1155	@ 0x483
 8010488:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801048c:	428b      	cmp	r3, r1
 801048e:	f000 80e4 	beq.w	801065a <ai_platform_network_init+0x21e>
 8010492:	6813      	ldr	r3, [r2, #0]
 8010494:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010498:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 801049c:	f000 811b 	beq.w	80106d6 <ai_platform_network_init+0x29a>
 80104a0:	6813      	ldr	r3, [r2, #0]
 80104a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	f000 80f9 	beq.w	801069e <ai_platform_network_init+0x262>
 80104ac:	f7ff f8fa 	bl	800f6a4 <_ai_platform_release_crc>
 80104b0:	2d00      	cmp	r5, #0
 80104b2:	f000 8147 	beq.w	8010744 <ai_platform_network_init+0x308>
 80104b6:	4b92      	ldr	r3, [pc, #584]	@ (8010700 <ai_platform_network_init+0x2c4>)
 80104b8:	682a      	ldr	r2, [r5, #0]
 80104ba:	429a      	cmp	r2, r3
 80104bc:	f040 8090 	bne.w	80105e0 <ai_platform_network_init+0x1a4>
 80104c0:	692b      	ldr	r3, [r5, #16]
 80104c2:	89ae      	ldrh	r6, [r5, #12]
 80104c4:	f8b5 c00e 	ldrh.w	ip, [r5, #14]
 80104c8:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
 80104cc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80104ce:	e9c4 1207 	strd	r1, r2, [r4, #28]
 80104d2:	2303      	movs	r3, #3
 80104d4:	84a6      	strh	r6, [r4, #36]	@ 0x24
 80104d6:	4626      	mov	r6, r4
 80104d8:	4620      	mov	r0, r4
 80104da:	f8a4 c026 	strh.w	ip, [r4, #38]	@ 0x26
 80104de:	60e3      	str	r3, [r4, #12]
 80104e0:	f000 fd8a 	bl	8010ff8 <ai_layers_init_all>
 80104e4:	4630      	mov	r0, r6
 80104e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80104ea:	f7ff f8d9 	bl	800f6a0 <_ai_platform_acquire_crc>
 80104ee:	4b82      	ldr	r3, [pc, #520]	@ (80106f8 <ai_platform_network_init+0x2bc>)
 80104f0:	f46f 618a 	mvn.w	r1, #1104	@ 0x450
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80104fa:	185a      	adds	r2, r3, r1
 80104fc:	2a01      	cmp	r2, #1
 80104fe:	d92b      	bls.n	8010558 <ai_platform_network_init+0x11c>
 8010500:	f240 4249 	movw	r2, #1097	@ 0x449
 8010504:	4293      	cmp	r3, r2
 8010506:	d027      	beq.n	8010558 <ai_platform_network_init+0x11c>
 8010508:	4a7c      	ldr	r2, [pc, #496]	@ (80106fc <ai_platform_network_init+0x2c0>)
 801050a:	6813      	ldr	r3, [r2, #0]
 801050c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010510:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8010514:	d02d      	beq.n	8010572 <ai_platform_network_init+0x136>
 8010516:	6813      	ldr	r3, [r2, #0]
 8010518:	f240 4183 	movw	r1, #1155	@ 0x483
 801051c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010520:	428b      	cmp	r3, r1
 8010522:	f000 8089 	beq.w	8010638 <ai_platform_network_init+0x1fc>
 8010526:	6813      	ldr	r3, [r2, #0]
 8010528:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801052c:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8010530:	f000 80c3 	beq.w	80106ba <ai_platform_network_init+0x27e>
 8010534:	6813      	ldr	r3, [r2, #0]
 8010536:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801053a:	2b00      	cmp	r3, #0
 801053c:	d129      	bne.n	8010592 <ai_platform_network_init+0x156>
 801053e:	4a71      	ldr	r2, [pc, #452]	@ (8010704 <ai_platform_network_init+0x2c8>)
 8010540:	2301      	movs	r3, #1
 8010542:	6093      	str	r3, [r2, #8]
 8010544:	6893      	ldr	r3, [r2, #8]
 8010546:	2b00      	cmp	r3, #0
 8010548:	d1fc      	bne.n	8010544 <ai_platform_network_init+0x108>
 801054a:	496f      	ldr	r1, [pc, #444]	@ (8010708 <ai_platform_network_init+0x2cc>)
 801054c:	4b6f      	ldr	r3, [pc, #444]	@ (801070c <ai_platform_network_init+0x2d0>)
 801054e:	6011      	str	r1, [r2, #0]
 8010550:	6812      	ldr	r2, [r2, #0]
 8010552:	429a      	cmp	r2, r3
 8010554:	d01d      	beq.n	8010592 <ai_platform_network_init+0x156>
 8010556:	e7fe      	b.n	8010556 <ai_platform_network_init+0x11a>
 8010558:	4a6a      	ldr	r2, [pc, #424]	@ (8010704 <ai_platform_network_init+0x2c8>)
 801055a:	2301      	movs	r3, #1
 801055c:	6093      	str	r3, [r2, #8]
 801055e:	6893      	ldr	r3, [r2, #8]
 8010560:	2b00      	cmp	r3, #0
 8010562:	d1fc      	bne.n	801055e <ai_platform_network_init+0x122>
 8010564:	4968      	ldr	r1, [pc, #416]	@ (8010708 <ai_platform_network_init+0x2cc>)
 8010566:	4b69      	ldr	r3, [pc, #420]	@ (801070c <ai_platform_network_init+0x2d0>)
 8010568:	6011      	str	r1, [r2, #0]
 801056a:	6812      	ldr	r2, [r2, #0]
 801056c:	429a      	cmp	r2, r3
 801056e:	d010      	beq.n	8010592 <ai_platform_network_init+0x156>
 8010570:	e7fe      	b.n	8010570 <ai_platform_network_init+0x134>
 8010572:	4a67      	ldr	r2, [pc, #412]	@ (8010710 <ai_platform_network_init+0x2d4>)
 8010574:	2301      	movs	r3, #1
 8010576:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 801057a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 801057e:	2b00      	cmp	r3, #0
 8010580:	d1fb      	bne.n	801057a <ai_platform_network_init+0x13e>
 8010582:	4961      	ldr	r1, [pc, #388]	@ (8010708 <ai_platform_network_init+0x2cc>)
 8010584:	4b61      	ldr	r3, [pc, #388]	@ (801070c <ai_platform_network_init+0x2d0>)
 8010586:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 801058a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 801058e:	429a      	cmp	r2, r3
 8010590:	d113      	bne.n	80105ba <ai_platform_network_init+0x17e>
 8010592:	2600      	movs	r6, #0
 8010594:	f7ff f886 	bl	800f6a4 <_ai_platform_release_crc>
 8010598:	4630      	mov	r0, r6
 801059a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801059e:	4a59      	ldr	r2, [pc, #356]	@ (8010704 <ai_platform_network_init+0x2c8>)
 80105a0:	2301      	movs	r3, #1
 80105a2:	6093      	str	r3, [r2, #8]
 80105a4:	6893      	ldr	r3, [r2, #8]
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d1fc      	bne.n	80105a4 <ai_platform_network_init+0x168>
 80105aa:	4b57      	ldr	r3, [pc, #348]	@ (8010708 <ai_platform_network_init+0x2cc>)
 80105ac:	6013      	str	r3, [r2, #0]
 80105ae:	4b57      	ldr	r3, [pc, #348]	@ (801070c <ai_platform_network_init+0x2d0>)
 80105b0:	6812      	ldr	r2, [r2, #0]
 80105b2:	429a      	cmp	r2, r3
 80105b4:	f43f af7a 	beq.w	80104ac <ai_platform_network_init+0x70>
 80105b8:	e7fe      	b.n	80105b8 <ai_platform_network_init+0x17c>
 80105ba:	e7fe      	b.n	80105ba <ai_platform_network_init+0x17e>
 80105bc:	4a54      	ldr	r2, [pc, #336]	@ (8010710 <ai_platform_network_init+0x2d4>)
 80105be:	2301      	movs	r3, #1
 80105c0:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 80105c4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d1fb      	bne.n	80105c4 <ai_platform_network_init+0x188>
 80105cc:	4b4e      	ldr	r3, [pc, #312]	@ (8010708 <ai_platform_network_init+0x2cc>)
 80105ce:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 80105d2:	4b4e      	ldr	r3, [pc, #312]	@ (801070c <ai_platform_network_init+0x2d0>)
 80105d4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 80105d8:	429a      	cmp	r2, r3
 80105da:	f43f af67 	beq.w	80104ac <ai_platform_network_init+0x70>
 80105de:	e7fe      	b.n	80105de <ai_platform_network_init+0x1a2>
 80105e0:	2101      	movs	r1, #1
 80105e2:	4628      	mov	r0, r5
 80105e4:	f105 081c 	add.w	r8, r5, #28
 80105e8:	686e      	ldr	r6, [r5, #4]
 80105ea:	f7ff f80b 	bl	800f604 <ai_buffer_get_size>
 80105ee:	4607      	mov	r7, r0
 80105f0:	2101      	movs	r1, #1
 80105f2:	4640      	mov	r0, r8
 80105f4:	f8d5 9020 	ldr.w	r9, [r5, #32]
 80105f8:	f7ff f804 	bl	800f604 <ai_buffer_get_size>
 80105fc:	2f00      	cmp	r7, #0
 80105fe:	d13e      	bne.n	801067e <ai_platform_network_init+0x242>
 8010600:	2800      	cmp	r0, #0
 8010602:	f000 808e 	beq.w	8010722 <ai_platform_network_init+0x2e6>
 8010606:	f1b9 0f00 	cmp.w	r9, #0
 801060a:	f000 8094 	beq.w	8010736 <ai_platform_network_init+0x2fa>
 801060e:	f04f 0c01 	mov.w	ip, #1
 8010612:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8010614:	2600      	movs	r6, #0
 8010616:	83e7      	strh	r7, [r4, #30]
 8010618:	4563      	cmp	r3, ip
 801061a:	83a6      	strh	r6, [r4, #28]
 801061c:	d37a      	bcc.n	8010714 <ai_platform_network_init+0x2d8>
 801061e:	f1bc 0f00 	cmp.w	ip, #0
 8010622:	f000 809c 	beq.w	801075e <ai_platform_network_init+0x322>
 8010626:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 8010628:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 801062c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801062e:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8010632:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8010636:	e74c      	b.n	80104d2 <ai_platform_network_init+0x96>
 8010638:	4a35      	ldr	r2, [pc, #212]	@ (8010710 <ai_platform_network_init+0x2d4>)
 801063a:	2301      	movs	r3, #1
 801063c:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8010640:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8010644:	2b00      	cmp	r3, #0
 8010646:	d1fb      	bne.n	8010640 <ai_platform_network_init+0x204>
 8010648:	492f      	ldr	r1, [pc, #188]	@ (8010708 <ai_platform_network_init+0x2cc>)
 801064a:	4b30      	ldr	r3, [pc, #192]	@ (801070c <ai_platform_network_init+0x2d0>)
 801064c:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 8010650:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8010654:	429a      	cmp	r2, r3
 8010656:	d09c      	beq.n	8010592 <ai_platform_network_init+0x156>
 8010658:	e7fe      	b.n	8010658 <ai_platform_network_init+0x21c>
 801065a:	4a2d      	ldr	r2, [pc, #180]	@ (8010710 <ai_platform_network_init+0x2d4>)
 801065c:	2301      	movs	r3, #1
 801065e:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8010662:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8010666:	2b00      	cmp	r3, #0
 8010668:	d1fb      	bne.n	8010662 <ai_platform_network_init+0x226>
 801066a:	4b27      	ldr	r3, [pc, #156]	@ (8010708 <ai_platform_network_init+0x2cc>)
 801066c:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 8010670:	4b26      	ldr	r3, [pc, #152]	@ (801070c <ai_platform_network_init+0x2d0>)
 8010672:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8010676:	429a      	cmp	r2, r3
 8010678:	f43f af18 	beq.w	80104ac <ai_platform_network_init+0x70>
 801067c:	e7fe      	b.n	801067c <ai_platform_network_init+0x240>
 801067e:	2800      	cmp	r0, #0
 8010680:	d153      	bne.n	801072a <ai_platform_network_init+0x2ee>
 8010682:	4680      	mov	r8, r0
 8010684:	4684      	mov	ip, r0
 8010686:	2e00      	cmp	r6, #0
 8010688:	d063      	beq.n	8010752 <ai_platform_network_init+0x316>
 801068a:	8be6      	ldrh	r6, [r4, #30]
 801068c:	2e00      	cmp	r6, #0
 801068e:	d168      	bne.n	8010762 <ai_platform_network_init+0x326>
 8010690:	2212      	movs	r2, #18
 8010692:	2116      	movs	r1, #22
 8010694:	f104 0010 	add.w	r0, r4, #16
 8010698:	f000 fc7a 	bl	8010f90 <core_set_error>
 801069c:	e77c      	b.n	8010598 <ai_platform_network_init+0x15c>
 801069e:	4a19      	ldr	r2, [pc, #100]	@ (8010704 <ai_platform_network_init+0x2c8>)
 80106a0:	2301      	movs	r3, #1
 80106a2:	6093      	str	r3, [r2, #8]
 80106a4:	6893      	ldr	r3, [r2, #8]
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d1fc      	bne.n	80106a4 <ai_platform_network_init+0x268>
 80106aa:	4b17      	ldr	r3, [pc, #92]	@ (8010708 <ai_platform_network_init+0x2cc>)
 80106ac:	6013      	str	r3, [r2, #0]
 80106ae:	4b17      	ldr	r3, [pc, #92]	@ (801070c <ai_platform_network_init+0x2d0>)
 80106b0:	6812      	ldr	r2, [r2, #0]
 80106b2:	429a      	cmp	r2, r3
 80106b4:	f43f aefa 	beq.w	80104ac <ai_platform_network_init+0x70>
 80106b8:	e7fe      	b.n	80106b8 <ai_platform_network_init+0x27c>
 80106ba:	4a12      	ldr	r2, [pc, #72]	@ (8010704 <ai_platform_network_init+0x2c8>)
 80106bc:	2301      	movs	r3, #1
 80106be:	6093      	str	r3, [r2, #8]
 80106c0:	6893      	ldr	r3, [r2, #8]
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d1fc      	bne.n	80106c0 <ai_platform_network_init+0x284>
 80106c6:	4910      	ldr	r1, [pc, #64]	@ (8010708 <ai_platform_network_init+0x2cc>)
 80106c8:	4b10      	ldr	r3, [pc, #64]	@ (801070c <ai_platform_network_init+0x2d0>)
 80106ca:	6011      	str	r1, [r2, #0]
 80106cc:	6812      	ldr	r2, [r2, #0]
 80106ce:	429a      	cmp	r2, r3
 80106d0:	f43f af5f 	beq.w	8010592 <ai_platform_network_init+0x156>
 80106d4:	e7fe      	b.n	80106d4 <ai_platform_network_init+0x298>
 80106d6:	4a0b      	ldr	r2, [pc, #44]	@ (8010704 <ai_platform_network_init+0x2c8>)
 80106d8:	2301      	movs	r3, #1
 80106da:	6093      	str	r3, [r2, #8]
 80106dc:	6893      	ldr	r3, [r2, #8]
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d1fc      	bne.n	80106dc <ai_platform_network_init+0x2a0>
 80106e2:	4b09      	ldr	r3, [pc, #36]	@ (8010708 <ai_platform_network_init+0x2cc>)
 80106e4:	6013      	str	r3, [r2, #0]
 80106e6:	4b09      	ldr	r3, [pc, #36]	@ (801070c <ai_platform_network_init+0x2d0>)
 80106e8:	6812      	ldr	r2, [r2, #0]
 80106ea:	429a      	cmp	r2, r3
 80106ec:	f43f aede 	beq.w	80104ac <ai_platform_network_init+0x70>
 80106f0:	e7fe      	b.n	80106f0 <ai_platform_network_init+0x2b4>
 80106f2:	bf00      	nop
 80106f4:	a1c00100 	.word	0xa1c00100
 80106f8:	e0042000 	.word	0xe0042000
 80106fc:	5c001000 	.word	0x5c001000
 8010700:	a1facade 	.word	0xa1facade
 8010704:	40023000 	.word	0x40023000
 8010708:	f407a5c2 	.word	0xf407a5c2
 801070c:	b5e8b5cd 	.word	0xb5e8b5cd
 8010710:	58024000 	.word	0x58024000
 8010714:	2213      	movs	r2, #19
 8010716:	2116      	movs	r1, #22
 8010718:	f104 0010 	add.w	r0, r4, #16
 801071c:	f000 fc38 	bl	8010f90 <core_set_error>
 8010720:	e73a      	b.n	8010598 <ai_platform_network_init+0x15c>
 8010722:	4607      	mov	r7, r0
 8010724:	4680      	mov	r8, r0
 8010726:	4684      	mov	ip, r0
 8010728:	e773      	b.n	8010612 <ai_platform_network_init+0x1d6>
 801072a:	f1b9 0f00 	cmp.w	r9, #0
 801072e:	d002      	beq.n	8010736 <ai_platform_network_init+0x2fa>
 8010730:	f04f 0c01 	mov.w	ip, #1
 8010734:	e7a7      	b.n	8010686 <ai_platform_network_init+0x24a>
 8010736:	2110      	movs	r1, #16
 8010738:	2213      	movs	r2, #19
 801073a:	2600      	movs	r6, #0
 801073c:	1860      	adds	r0, r4, r1
 801073e:	f000 fc27 	bl	8010f90 <core_set_error>
 8010742:	e729      	b.n	8010598 <ai_platform_network_init+0x15c>
 8010744:	2110      	movs	r1, #16
 8010746:	2211      	movs	r2, #17
 8010748:	462e      	mov	r6, r5
 801074a:	1860      	adds	r0, r4, r1
 801074c:	f000 fc20 	bl	8010f90 <core_set_error>
 8010750:	e722      	b.n	8010598 <ai_platform_network_init+0x15c>
 8010752:	2110      	movs	r1, #16
 8010754:	2212      	movs	r2, #18
 8010756:	1860      	adds	r0, r4, r1
 8010758:	f000 fc1a 	bl	8010f90 <core_set_error>
 801075c:	e71c      	b.n	8010598 <ai_platform_network_init+0x15c>
 801075e:	4666      	mov	r6, ip
 8010760:	e6b7      	b.n	80104d2 <ai_platform_network_init+0x96>
 8010762:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010764:	6a26      	ldr	r6, [r4, #32]
 8010766:	2701      	movs	r7, #1
 8010768:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801076a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801076e:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8010772:	e74e      	b.n	8010612 <ai_platform_network_init+0x1d6>

08010774 <ai_platform_network_post_init>:
 8010774:	b538      	push	{r3, r4, r5, lr}
 8010776:	2800      	cmp	r0, #0
 8010778:	d04e      	beq.n	8010818 <ai_platform_network_post_init+0xa4>
 801077a:	4b8c      	ldr	r3, [pc, #560]	@ (80109ac <ai_platform_network_post_init+0x238>)
 801077c:	4604      	mov	r4, r0
 801077e:	6802      	ldr	r2, [r0, #0]
 8010780:	429a      	cmp	r2, r3
 8010782:	d149      	bne.n	8010818 <ai_platform_network_post_init+0xa4>
 8010784:	f7fe ff8c 	bl	800f6a0 <_ai_platform_acquire_crc>
 8010788:	4b89      	ldr	r3, [pc, #548]	@ (80109b0 <ai_platform_network_post_init+0x23c>)
 801078a:	f46f 628a 	mvn.w	r2, #1104	@ 0x450
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010794:	189a      	adds	r2, r3, r2
 8010796:	2a01      	cmp	r2, #1
 8010798:	f240 8095 	bls.w	80108c6 <ai_platform_network_post_init+0x152>
 801079c:	f240 4249 	movw	r2, #1097	@ 0x449
 80107a0:	4293      	cmp	r3, r2
 80107a2:	f000 8090 	beq.w	80108c6 <ai_platform_network_post_init+0x152>
 80107a6:	4a83      	ldr	r2, [pc, #524]	@ (80109b4 <ai_platform_network_post_init+0x240>)
 80107a8:	6813      	ldr	r3, [r2, #0]
 80107aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80107ae:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 80107b2:	f000 8096 	beq.w	80108e2 <ai_platform_network_post_init+0x16e>
 80107b6:	6813      	ldr	r3, [r2, #0]
 80107b8:	f240 4183 	movw	r1, #1155	@ 0x483
 80107bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80107c0:	428b      	cmp	r3, r1
 80107c2:	f000 80b8 	beq.w	8010936 <ai_platform_network_post_init+0x1c2>
 80107c6:	6813      	ldr	r3, [r2, #0]
 80107c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80107cc:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 80107d0:	f000 80de 	beq.w	8010990 <ai_platform_network_post_init+0x21c>
 80107d4:	6813      	ldr	r3, [r2, #0]
 80107d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80107da:	2b00      	cmp	r3, #0
 80107dc:	f000 80bd 	beq.w	801095a <ai_platform_network_post_init+0x1e6>
 80107e0:	f7fe ff60 	bl	800f6a4 <_ai_platform_release_crc>
 80107e4:	68e3      	ldr	r3, [r4, #12]
 80107e6:	f013 0502 	ands.w	r5, r3, #2
 80107ea:	f000 808c 	beq.w	8010906 <ai_platform_network_post_init+0x192>
 80107ee:	4620      	mov	r0, r4
 80107f0:	f000 fc10 	bl	8011014 <ai_layers_post_init_all>
 80107f4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80107f6:	b16b      	cbz	r3, 8010814 <ai_platform_network_post_init+0xa0>
 80107f8:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 80107fa:	e007      	b.n	801080c <ai_platform_network_post_init+0x98>
 80107fc:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	@ 0x3c
 8010800:	4798      	blx	r3
 8010802:	692b      	ldr	r3, [r5, #16]
 8010804:	b133      	cbz	r3, 8010814 <ai_platform_network_post_init+0xa0>
 8010806:	42ab      	cmp	r3, r5
 8010808:	461d      	mov	r5, r3
 801080a:	d003      	beq.n	8010814 <ai_platform_network_post_init+0xa0>
 801080c:	4629      	mov	r1, r5
 801080e:	2000      	movs	r0, #0
 8010810:	2d00      	cmp	r5, #0
 8010812:	d1f3      	bne.n	80107fc <ai_platform_network_post_init+0x88>
 8010814:	2001      	movs	r0, #1
 8010816:	bd38      	pop	{r3, r4, r5, pc}
 8010818:	f7fe ff42 	bl	800f6a0 <_ai_platform_acquire_crc>
 801081c:	4b64      	ldr	r3, [pc, #400]	@ (80109b0 <ai_platform_network_post_init+0x23c>)
 801081e:	f46f 618a 	mvn.w	r1, #1104	@ 0x450
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010828:	185a      	adds	r2, r3, r1
 801082a:	2a01      	cmp	r2, #1
 801082c:	d92a      	bls.n	8010884 <ai_platform_network_post_init+0x110>
 801082e:	f240 4249 	movw	r2, #1097	@ 0x449
 8010832:	4293      	cmp	r3, r2
 8010834:	d026      	beq.n	8010884 <ai_platform_network_post_init+0x110>
 8010836:	4a5f      	ldr	r2, [pc, #380]	@ (80109b4 <ai_platform_network_post_init+0x240>)
 8010838:	6813      	ldr	r3, [r2, #0]
 801083a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801083e:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8010842:	d02c      	beq.n	801089e <ai_platform_network_post_init+0x12a>
 8010844:	6813      	ldr	r3, [r2, #0]
 8010846:	f240 4183 	movw	r1, #1155	@ 0x483
 801084a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801084e:	428b      	cmp	r3, r1
 8010850:	d060      	beq.n	8010914 <ai_platform_network_post_init+0x1a0>
 8010852:	6813      	ldr	r3, [r2, #0]
 8010854:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010858:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 801085c:	f000 808b 	beq.w	8010976 <ai_platform_network_post_init+0x202>
 8010860:	6813      	ldr	r3, [r2, #0]
 8010862:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010866:	2b00      	cmp	r3, #0
 8010868:	d129      	bne.n	80108be <ai_platform_network_post_init+0x14a>
 801086a:	4a53      	ldr	r2, [pc, #332]	@ (80109b8 <ai_platform_network_post_init+0x244>)
 801086c:	2301      	movs	r3, #1
 801086e:	6093      	str	r3, [r2, #8]
 8010870:	6893      	ldr	r3, [r2, #8]
 8010872:	2b00      	cmp	r3, #0
 8010874:	d1fc      	bne.n	8010870 <ai_platform_network_post_init+0xfc>
 8010876:	4951      	ldr	r1, [pc, #324]	@ (80109bc <ai_platform_network_post_init+0x248>)
 8010878:	4b51      	ldr	r3, [pc, #324]	@ (80109c0 <ai_platform_network_post_init+0x24c>)
 801087a:	6011      	str	r1, [r2, #0]
 801087c:	6812      	ldr	r2, [r2, #0]
 801087e:	429a      	cmp	r2, r3
 8010880:	d01d      	beq.n	80108be <ai_platform_network_post_init+0x14a>
 8010882:	e7fe      	b.n	8010882 <ai_platform_network_post_init+0x10e>
 8010884:	4a4c      	ldr	r2, [pc, #304]	@ (80109b8 <ai_platform_network_post_init+0x244>)
 8010886:	2301      	movs	r3, #1
 8010888:	6093      	str	r3, [r2, #8]
 801088a:	6893      	ldr	r3, [r2, #8]
 801088c:	2b00      	cmp	r3, #0
 801088e:	d1fc      	bne.n	801088a <ai_platform_network_post_init+0x116>
 8010890:	494a      	ldr	r1, [pc, #296]	@ (80109bc <ai_platform_network_post_init+0x248>)
 8010892:	4b4b      	ldr	r3, [pc, #300]	@ (80109c0 <ai_platform_network_post_init+0x24c>)
 8010894:	6011      	str	r1, [r2, #0]
 8010896:	6812      	ldr	r2, [r2, #0]
 8010898:	429a      	cmp	r2, r3
 801089a:	d010      	beq.n	80108be <ai_platform_network_post_init+0x14a>
 801089c:	e7fe      	b.n	801089c <ai_platform_network_post_init+0x128>
 801089e:	4a49      	ldr	r2, [pc, #292]	@ (80109c4 <ai_platform_network_post_init+0x250>)
 80108a0:	2301      	movs	r3, #1
 80108a2:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 80108a6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d1fb      	bne.n	80108a6 <ai_platform_network_post_init+0x132>
 80108ae:	4943      	ldr	r1, [pc, #268]	@ (80109bc <ai_platform_network_post_init+0x248>)
 80108b0:	4b43      	ldr	r3, [pc, #268]	@ (80109c0 <ai_platform_network_post_init+0x24c>)
 80108b2:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 80108b6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 80108ba:	429a      	cmp	r2, r3
 80108bc:	d110      	bne.n	80108e0 <ai_platform_network_post_init+0x16c>
 80108be:	f7fe fef1 	bl	800f6a4 <_ai_platform_release_crc>
 80108c2:	2000      	movs	r0, #0
 80108c4:	bd38      	pop	{r3, r4, r5, pc}
 80108c6:	4a3c      	ldr	r2, [pc, #240]	@ (80109b8 <ai_platform_network_post_init+0x244>)
 80108c8:	2301      	movs	r3, #1
 80108ca:	6093      	str	r3, [r2, #8]
 80108cc:	6893      	ldr	r3, [r2, #8]
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d1fc      	bne.n	80108cc <ai_platform_network_post_init+0x158>
 80108d2:	493a      	ldr	r1, [pc, #232]	@ (80109bc <ai_platform_network_post_init+0x248>)
 80108d4:	4b3a      	ldr	r3, [pc, #232]	@ (80109c0 <ai_platform_network_post_init+0x24c>)
 80108d6:	6011      	str	r1, [r2, #0]
 80108d8:	6812      	ldr	r2, [r2, #0]
 80108da:	429a      	cmp	r2, r3
 80108dc:	d080      	beq.n	80107e0 <ai_platform_network_post_init+0x6c>
 80108de:	e7fe      	b.n	80108de <ai_platform_network_post_init+0x16a>
 80108e0:	e7fe      	b.n	80108e0 <ai_platform_network_post_init+0x16c>
 80108e2:	4a38      	ldr	r2, [pc, #224]	@ (80109c4 <ai_platform_network_post_init+0x250>)
 80108e4:	2301      	movs	r3, #1
 80108e6:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 80108ea:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d1fb      	bne.n	80108ea <ai_platform_network_post_init+0x176>
 80108f2:	4932      	ldr	r1, [pc, #200]	@ (80109bc <ai_platform_network_post_init+0x248>)
 80108f4:	4b32      	ldr	r3, [pc, #200]	@ (80109c0 <ai_platform_network_post_init+0x24c>)
 80108f6:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 80108fa:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 80108fe:	429a      	cmp	r2, r3
 8010900:	f43f af6e 	beq.w	80107e0 <ai_platform_network_post_init+0x6c>
 8010904:	e7fe      	b.n	8010904 <ai_platform_network_post_init+0x190>
 8010906:	2210      	movs	r2, #16
 8010908:	2111      	movs	r1, #17
 801090a:	18a0      	adds	r0, r4, r2
 801090c:	f000 fb40 	bl	8010f90 <core_set_error>
 8010910:	4628      	mov	r0, r5
 8010912:	bd38      	pop	{r3, r4, r5, pc}
 8010914:	4a2b      	ldr	r2, [pc, #172]	@ (80109c4 <ai_platform_network_post_init+0x250>)
 8010916:	2301      	movs	r3, #1
 8010918:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 801091c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8010920:	2b00      	cmp	r3, #0
 8010922:	d1fb      	bne.n	801091c <ai_platform_network_post_init+0x1a8>
 8010924:	4925      	ldr	r1, [pc, #148]	@ (80109bc <ai_platform_network_post_init+0x248>)
 8010926:	4b26      	ldr	r3, [pc, #152]	@ (80109c0 <ai_platform_network_post_init+0x24c>)
 8010928:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 801092c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8010930:	429a      	cmp	r2, r3
 8010932:	d0c4      	beq.n	80108be <ai_platform_network_post_init+0x14a>
 8010934:	e7fe      	b.n	8010934 <ai_platform_network_post_init+0x1c0>
 8010936:	4a23      	ldr	r2, [pc, #140]	@ (80109c4 <ai_platform_network_post_init+0x250>)
 8010938:	2301      	movs	r3, #1
 801093a:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 801093e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8010942:	2b00      	cmp	r3, #0
 8010944:	d1fb      	bne.n	801093e <ai_platform_network_post_init+0x1ca>
 8010946:	491d      	ldr	r1, [pc, #116]	@ (80109bc <ai_platform_network_post_init+0x248>)
 8010948:	4b1d      	ldr	r3, [pc, #116]	@ (80109c0 <ai_platform_network_post_init+0x24c>)
 801094a:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 801094e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8010952:	429a      	cmp	r2, r3
 8010954:	f43f af44 	beq.w	80107e0 <ai_platform_network_post_init+0x6c>
 8010958:	e7fe      	b.n	8010958 <ai_platform_network_post_init+0x1e4>
 801095a:	4a17      	ldr	r2, [pc, #92]	@ (80109b8 <ai_platform_network_post_init+0x244>)
 801095c:	2301      	movs	r3, #1
 801095e:	6093      	str	r3, [r2, #8]
 8010960:	6893      	ldr	r3, [r2, #8]
 8010962:	2b00      	cmp	r3, #0
 8010964:	d1fc      	bne.n	8010960 <ai_platform_network_post_init+0x1ec>
 8010966:	4915      	ldr	r1, [pc, #84]	@ (80109bc <ai_platform_network_post_init+0x248>)
 8010968:	4b15      	ldr	r3, [pc, #84]	@ (80109c0 <ai_platform_network_post_init+0x24c>)
 801096a:	6011      	str	r1, [r2, #0]
 801096c:	6812      	ldr	r2, [r2, #0]
 801096e:	429a      	cmp	r2, r3
 8010970:	f43f af36 	beq.w	80107e0 <ai_platform_network_post_init+0x6c>
 8010974:	e7fe      	b.n	8010974 <ai_platform_network_post_init+0x200>
 8010976:	4a10      	ldr	r2, [pc, #64]	@ (80109b8 <ai_platform_network_post_init+0x244>)
 8010978:	2301      	movs	r3, #1
 801097a:	6093      	str	r3, [r2, #8]
 801097c:	6893      	ldr	r3, [r2, #8]
 801097e:	2b00      	cmp	r3, #0
 8010980:	d1fc      	bne.n	801097c <ai_platform_network_post_init+0x208>
 8010982:	490e      	ldr	r1, [pc, #56]	@ (80109bc <ai_platform_network_post_init+0x248>)
 8010984:	4b0e      	ldr	r3, [pc, #56]	@ (80109c0 <ai_platform_network_post_init+0x24c>)
 8010986:	6011      	str	r1, [r2, #0]
 8010988:	6812      	ldr	r2, [r2, #0]
 801098a:	429a      	cmp	r2, r3
 801098c:	d097      	beq.n	80108be <ai_platform_network_post_init+0x14a>
 801098e:	e7fe      	b.n	801098e <ai_platform_network_post_init+0x21a>
 8010990:	4a09      	ldr	r2, [pc, #36]	@ (80109b8 <ai_platform_network_post_init+0x244>)
 8010992:	2301      	movs	r3, #1
 8010994:	6093      	str	r3, [r2, #8]
 8010996:	6893      	ldr	r3, [r2, #8]
 8010998:	2b00      	cmp	r3, #0
 801099a:	d1fc      	bne.n	8010996 <ai_platform_network_post_init+0x222>
 801099c:	4907      	ldr	r1, [pc, #28]	@ (80109bc <ai_platform_network_post_init+0x248>)
 801099e:	4b08      	ldr	r3, [pc, #32]	@ (80109c0 <ai_platform_network_post_init+0x24c>)
 80109a0:	6011      	str	r1, [r2, #0]
 80109a2:	6812      	ldr	r2, [r2, #0]
 80109a4:	429a      	cmp	r2, r3
 80109a6:	f43f af1b 	beq.w	80107e0 <ai_platform_network_post_init+0x6c>
 80109aa:	e7fe      	b.n	80109aa <ai_platform_network_post_init+0x236>
 80109ac:	a1c00100 	.word	0xa1c00100
 80109b0:	e0042000 	.word	0xe0042000
 80109b4:	5c001000 	.word	0x5c001000
 80109b8:	40023000 	.word	0x40023000
 80109bc:	f407a5c2 	.word	0xf407a5c2
 80109c0:	b5e8b5cd 	.word	0xb5e8b5cd
 80109c4:	58024000 	.word	0x58024000

080109c8 <ai_platform_network_process>:
 80109c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109cc:	b085      	sub	sp, #20
 80109ce:	460e      	mov	r6, r1
 80109d0:	4605      	mov	r5, r0
 80109d2:	9201      	str	r2, [sp, #4]
 80109d4:	b120      	cbz	r0, 80109e0 <ai_platform_network_process+0x18>
 80109d6:	4b24      	ldr	r3, [pc, #144]	@ (8010a68 <ai_platform_network_process+0xa0>)
 80109d8:	6802      	ldr	r2, [r0, #0]
 80109da:	429a      	cmp	r2, r3
 80109dc:	bf18      	it	ne
 80109de:	2500      	movne	r5, #0
 80109e0:	f7fe fe5e 	bl	800f6a0 <_ai_platform_acquire_crc>
 80109e4:	4b21      	ldr	r3, [pc, #132]	@ (8010a6c <ai_platform_network_process+0xa4>)
 80109e6:	f46f 618a 	mvn.w	r1, #1104	@ 0x450
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80109f0:	185a      	adds	r2, r3, r1
 80109f2:	2a01      	cmp	r2, #1
 80109f4:	d92b      	bls.n	8010a4e <ai_platform_network_process+0x86>
 80109f6:	f240 4249 	movw	r2, #1097	@ 0x449
 80109fa:	4293      	cmp	r3, r2
 80109fc:	d027      	beq.n	8010a4e <ai_platform_network_process+0x86>
 80109fe:	4a1c      	ldr	r2, [pc, #112]	@ (8010a70 <ai_platform_network_process+0xa8>)
 8010a00:	6813      	ldr	r3, [r2, #0]
 8010a02:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010a06:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8010a0a:	d039      	beq.n	8010a80 <ai_platform_network_process+0xb8>
 8010a0c:	6813      	ldr	r3, [r2, #0]
 8010a0e:	f240 4183 	movw	r1, #1155	@ 0x483
 8010a12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010a16:	428b      	cmp	r3, r1
 8010a18:	f000 819c 	beq.w	8010d54 <ai_platform_network_process+0x38c>
 8010a1c:	6813      	ldr	r3, [r2, #0]
 8010a1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010a22:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8010a26:	f000 8179 	beq.w	8010d1c <ai_platform_network_process+0x354>
 8010a2a:	6813      	ldr	r3, [r2, #0]
 8010a2c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d136      	bne.n	8010aa2 <ai_platform_network_process+0xda>
 8010a34:	4a0f      	ldr	r2, [pc, #60]	@ (8010a74 <ai_platform_network_process+0xac>)
 8010a36:	2301      	movs	r3, #1
 8010a38:	6093      	str	r3, [r2, #8]
 8010a3a:	6893      	ldr	r3, [r2, #8]
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d1fc      	bne.n	8010a3a <ai_platform_network_process+0x72>
 8010a40:	4b0d      	ldr	r3, [pc, #52]	@ (8010a78 <ai_platform_network_process+0xb0>)
 8010a42:	6013      	str	r3, [r2, #0]
 8010a44:	4b0d      	ldr	r3, [pc, #52]	@ (8010a7c <ai_platform_network_process+0xb4>)
 8010a46:	6812      	ldr	r2, [r2, #0]
 8010a48:	429a      	cmp	r2, r3
 8010a4a:	d02a      	beq.n	8010aa2 <ai_platform_network_process+0xda>
 8010a4c:	e7fe      	b.n	8010a4c <ai_platform_network_process+0x84>
 8010a4e:	4a09      	ldr	r2, [pc, #36]	@ (8010a74 <ai_platform_network_process+0xac>)
 8010a50:	2301      	movs	r3, #1
 8010a52:	6093      	str	r3, [r2, #8]
 8010a54:	6893      	ldr	r3, [r2, #8]
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d1fc      	bne.n	8010a54 <ai_platform_network_process+0x8c>
 8010a5a:	4b07      	ldr	r3, [pc, #28]	@ (8010a78 <ai_platform_network_process+0xb0>)
 8010a5c:	6013      	str	r3, [r2, #0]
 8010a5e:	4b07      	ldr	r3, [pc, #28]	@ (8010a7c <ai_platform_network_process+0xb4>)
 8010a60:	6812      	ldr	r2, [r2, #0]
 8010a62:	429a      	cmp	r2, r3
 8010a64:	d01d      	beq.n	8010aa2 <ai_platform_network_process+0xda>
 8010a66:	e7fe      	b.n	8010a66 <ai_platform_network_process+0x9e>
 8010a68:	a1c00100 	.word	0xa1c00100
 8010a6c:	e0042000 	.word	0xe0042000
 8010a70:	5c001000 	.word	0x5c001000
 8010a74:	40023000 	.word	0x40023000
 8010a78:	f407a5c2 	.word	0xf407a5c2
 8010a7c:	b5e8b5cd 	.word	0xb5e8b5cd
 8010a80:	4ab0      	ldr	r2, [pc, #704]	@ (8010d44 <ai_platform_network_process+0x37c>)
 8010a82:	2301      	movs	r3, #1
 8010a84:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8010a88:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d1fb      	bne.n	8010a88 <ai_platform_network_process+0xc0>
 8010a90:	4bad      	ldr	r3, [pc, #692]	@ (8010d48 <ai_platform_network_process+0x380>)
 8010a92:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 8010a96:	4bad      	ldr	r3, [pc, #692]	@ (8010d4c <ai_platform_network_process+0x384>)
 8010a98:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8010a9c:	429a      	cmp	r2, r3
 8010a9e:	f040 812b 	bne.w	8010cf8 <ai_platform_network_process+0x330>
 8010aa2:	f7fe fdff 	bl	800f6a4 <_ai_platform_release_crc>
 8010aa6:	2d00      	cmp	r5, #0
 8010aa8:	f000 8172 	beq.w	8010d90 <ai_platform_network_process+0x3c8>
 8010aac:	8dab      	ldrh	r3, [r5, #44]	@ 0x2c
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	f000 8123 	beq.w	8010cfa <ai_platform_network_process+0x332>
 8010ab4:	68eb      	ldr	r3, [r5, #12]
 8010ab6:	2200      	movs	r2, #0
 8010ab8:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 8010abc:	f003 0303 	and.w	r3, r3, #3
 8010ac0:	616a      	str	r2, [r5, #20]
 8010ac2:	2b03      	cmp	r3, #3
 8010ac4:	f040 811f 	bne.w	8010d06 <ai_platform_network_process+0x33e>
 8010ac8:	2e00      	cmp	r6, #0
 8010aca:	f000 8156 	beq.w	8010d7a <ai_platform_network_process+0x3b2>
 8010ace:	fab8 f788 	clz	r7, r8
 8010ad2:	097f      	lsrs	r7, r7, #5
 8010ad4:	f1b8 0f00 	cmp.w	r8, #0
 8010ad8:	f000 814f 	beq.w	8010d7a <ai_platform_network_process+0x3b2>
 8010adc:	f8b8 3000 	ldrh.w	r3, [r8]
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	f000 814a 	beq.w	8010d7a <ai_platform_network_process+0x3b2>
 8010ae6:	69b3      	ldr	r3, [r6, #24]
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	e9cd 3502 	strd	r3, r5, [sp, #8]
 8010aee:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d072      	beq.n	8010bdc <ai_platform_network_process+0x214>
 8010af6:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8010afa:	2c00      	cmp	r4, #0
 8010afc:	d06e      	beq.n	8010bdc <ai_platform_network_process+0x214>
 8010afe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010b02:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8010b06:	f8d3 a000 	ldr.w	sl, [r3]
 8010b0a:	eb1a 1907 	adds.w	r9, sl, r7, lsl #4
 8010b0e:	f000 8133 	beq.w	8010d78 <ai_platform_network_process+0x3b0>
 8010b12:	69a3      	ldr	r3, [r4, #24]
 8010b14:	2101      	movs	r1, #1
 8010b16:	4630      	mov	r0, r6
 8010b18:	685d      	ldr	r5, [r3, #4]
 8010b1a:	f7fe fd73 	bl	800f604 <ai_buffer_get_size>
 8010b1e:	4285      	cmp	r5, r0
 8010b20:	f0c0 8138 	bcc.w	8010d94 <ai_platform_network_process+0x3cc>
 8010b24:	68e0      	ldr	r0, [r4, #12]
 8010b26:	69b1      	ldr	r1, [r6, #24]
 8010b28:	68c2      	ldr	r2, [r0, #12]
 8010b2a:	68cb      	ldr	r3, [r1, #12]
 8010b2c:	429a      	cmp	r2, r3
 8010b2e:	f040 8131 	bne.w	8010d94 <ai_platform_network_process+0x3cc>
 8010b32:	6882      	ldr	r2, [r0, #8]
 8010b34:	688b      	ldr	r3, [r1, #8]
 8010b36:	429a      	cmp	r2, r3
 8010b38:	f040 812c 	bne.w	8010d94 <ai_platform_network_process+0x3cc>
 8010b3c:	6842      	ldr	r2, [r0, #4]
 8010b3e:	684b      	ldr	r3, [r1, #4]
 8010b40:	429a      	cmp	r2, r3
 8010b42:	f040 8127 	bne.w	8010d94 <ai_platform_network_process+0x3cc>
 8010b46:	69a3      	ldr	r3, [r4, #24]
 8010b48:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010b4c:	f001 fde4 	bl	8012718 <ai_array_get_data_byte_size>
 8010b50:	4605      	mov	r5, r0
 8010b52:	4620      	mov	r0, r4
 8010b54:	f001 fdf6 	bl	8012744 <get_tensor_byte_size>
 8010b58:	4285      	cmp	r5, r0
 8010b5a:	f0c0 811b 	bcc.w	8010d94 <ai_platform_network_process+0x3cc>
 8010b5e:	69a3      	ldr	r3, [r4, #24]
 8010b60:	6818      	ldr	r0, [r3, #0]
 8010b62:	f001 fd45 	bl	80125f0 <ai_array_to_buffer_fmt>
 8010b66:	6833      	ldr	r3, [r6, #0]
 8010b68:	4058      	eors	r0, r3
 8010b6a:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 8010b6e:	f040 81c8 	bne.w	8010f02 <ai_platform_network_process+0x53a>
 8010b72:	6873      	ldr	r3, [r6, #4]
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	f000 81bb 	beq.w	8010ef0 <ai_platform_network_process+0x528>
 8010b7a:	69b3      	ldr	r3, [r6, #24]
 8010b7c:	681b      	ldr	r3, [r3, #0]
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	f000 81c8 	beq.w	8010f14 <ai_platform_network_process+0x54c>
 8010b84:	9a02      	ldr	r2, [sp, #8]
 8010b86:	4620      	mov	r0, r4
 8010b88:	3701      	adds	r7, #1
 8010b8a:	361c      	adds	r6, #28
 8010b8c:	429a      	cmp	r2, r3
 8010b8e:	bf38      	it	cc
 8010b90:	461a      	movcc	r2, r3
 8010b92:	9202      	str	r2, [sp, #8]
 8010b94:	f001 fdd6 	bl	8012744 <get_tensor_byte_size>
 8010b98:	f8c9 0008 	str.w	r0, [r9, #8]
 8010b9c:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8010ba0:	681b      	ldr	r3, [r3, #0]
 8010ba2:	fb00 f303 	mul.w	r3, r0, r3
 8010ba6:	f8c9 300c 	str.w	r3, [r9, #12]
 8010baa:	f856 1c18 	ldr.w	r1, [r6, #-24]
 8010bae:	440b      	add	r3, r1
 8010bb0:	f8c9 1004 	str.w	r1, [r9, #4]
 8010bb4:	f84a 300b 	str.w	r3, [sl, fp]
 8010bb8:	69a0      	ldr	r0, [r4, #24]
 8010bba:	6803      	ldr	r3, [r0, #0]
 8010bbc:	009a      	lsls	r2, r3, #2
 8010bbe:	f100 80bb 	bmi.w	8010d38 <ai_platform_network_process+0x370>
 8010bc2:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8010bc6:	1a9b      	subs	r3, r3, r2
 8010bc8:	4419      	add	r1, r3
 8010bca:	6081      	str	r1, [r0, #8]
 8010bcc:	69a3      	ldr	r3, [r4, #24]
 8010bce:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8010bd2:	60da      	str	r2, [r3, #12]
 8010bd4:	f8b8 3000 	ldrh.w	r3, [r8]
 8010bd8:	42bb      	cmp	r3, r7
 8010bda:	d888      	bhi.n	8010aee <ai_platform_network_process+0x126>
 8010bdc:	9d03      	ldr	r5, [sp, #12]
 8010bde:	9b01      	ldr	r3, [sp, #4]
 8010be0:	8daa      	ldrh	r2, [r5, #44]	@ 0x2c
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	f000 819f 	beq.w	8010f26 <ai_platform_network_process+0x55e>
 8010be8:	2a01      	cmp	r2, #1
 8010bea:	f240 8179 	bls.w	8010ee0 <ai_platform_network_process+0x518>
 8010bee:	f8d5 9030 	ldr.w	r9, [r5, #48]	@ 0x30
 8010bf2:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	f000 8172 	beq.w	8010ee0 <ai_platform_network_process+0x518>
 8010bfc:	9e01      	ldr	r6, [sp, #4]
 8010bfe:	2700      	movs	r7, #0
 8010c00:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	f000 80d3 	beq.w	8010db0 <ai_platform_network_process+0x3e8>
 8010c0a:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8010c0e:	2c00      	cmp	r4, #0
 8010c10:	f000 80ce 	beq.w	8010db0 <ai_platform_network_process+0x3e8>
 8010c14:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8010c18:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8010c1c:	f8d3 8000 	ldr.w	r8, [r3]
 8010c20:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 8010c24:	f000 819d 	beq.w	8010f62 <ai_platform_network_process+0x59a>
 8010c28:	69a3      	ldr	r3, [r4, #24]
 8010c2a:	2101      	movs	r1, #1
 8010c2c:	4630      	mov	r0, r6
 8010c2e:	685b      	ldr	r3, [r3, #4]
 8010c30:	9301      	str	r3, [sp, #4]
 8010c32:	f7fe fce7 	bl	800f604 <ai_buffer_get_size>
 8010c36:	9b01      	ldr	r3, [sp, #4]
 8010c38:	4283      	cmp	r3, r0
 8010c3a:	f0c0 8151 	bcc.w	8010ee0 <ai_platform_network_process+0x518>
 8010c3e:	68e0      	ldr	r0, [r4, #12]
 8010c40:	69b1      	ldr	r1, [r6, #24]
 8010c42:	68c2      	ldr	r2, [r0, #12]
 8010c44:	68cb      	ldr	r3, [r1, #12]
 8010c46:	429a      	cmp	r2, r3
 8010c48:	f040 814a 	bne.w	8010ee0 <ai_platform_network_process+0x518>
 8010c4c:	6882      	ldr	r2, [r0, #8]
 8010c4e:	688b      	ldr	r3, [r1, #8]
 8010c50:	429a      	cmp	r2, r3
 8010c52:	f040 8145 	bne.w	8010ee0 <ai_platform_network_process+0x518>
 8010c56:	6842      	ldr	r2, [r0, #4]
 8010c58:	684b      	ldr	r3, [r1, #4]
 8010c5a:	429a      	cmp	r2, r3
 8010c5c:	f040 8140 	bne.w	8010ee0 <ai_platform_network_process+0x518>
 8010c60:	69a3      	ldr	r3, [r4, #24]
 8010c62:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010c66:	f001 fd57 	bl	8012718 <ai_array_get_data_byte_size>
 8010c6a:	9001      	str	r0, [sp, #4]
 8010c6c:	4620      	mov	r0, r4
 8010c6e:	f001 fd69 	bl	8012744 <get_tensor_byte_size>
 8010c72:	9b01      	ldr	r3, [sp, #4]
 8010c74:	4283      	cmp	r3, r0
 8010c76:	f0c0 8133 	bcc.w	8010ee0 <ai_platform_network_process+0x518>
 8010c7a:	69a3      	ldr	r3, [r4, #24]
 8010c7c:	6818      	ldr	r0, [r3, #0]
 8010c7e:	f001 fcb7 	bl	80125f0 <ai_array_to_buffer_fmt>
 8010c82:	6833      	ldr	r3, [r6, #0]
 8010c84:	4058      	eors	r0, r3
 8010c86:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 8010c8a:	f040 815a 	bne.w	8010f42 <ai_platform_network_process+0x57a>
 8010c8e:	6873      	ldr	r3, [r6, #4]
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	f000 814e 	beq.w	8010f32 <ai_platform_network_process+0x56a>
 8010c96:	69b3      	ldr	r3, [r6, #24]
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	f000 8159 	beq.w	8010f52 <ai_platform_network_process+0x58a>
 8010ca0:	9a02      	ldr	r2, [sp, #8]
 8010ca2:	4620      	mov	r0, r4
 8010ca4:	3701      	adds	r7, #1
 8010ca6:	361c      	adds	r6, #28
 8010ca8:	429a      	cmp	r2, r3
 8010caa:	bf38      	it	cc
 8010cac:	461a      	movcc	r2, r3
 8010cae:	9202      	str	r2, [sp, #8]
 8010cb0:	f001 fd48 	bl	8012744 <get_tensor_byte_size>
 8010cb4:	f8ca 0008 	str.w	r0, [sl, #8]
 8010cb8:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8010cbc:	681b      	ldr	r3, [r3, #0]
 8010cbe:	fb00 f303 	mul.w	r3, r0, r3
 8010cc2:	f8ca 300c 	str.w	r3, [sl, #12]
 8010cc6:	f856 1c18 	ldr.w	r1, [r6, #-24]
 8010cca:	440b      	add	r3, r1
 8010ccc:	f8ca 1004 	str.w	r1, [sl, #4]
 8010cd0:	f848 300b 	str.w	r3, [r8, fp]
 8010cd4:	69a0      	ldr	r0, [r4, #24]
 8010cd6:	6803      	ldr	r3, [r0, #0]
 8010cd8:	009b      	lsls	r3, r3, #2
 8010cda:	d464      	bmi.n	8010da6 <ai_platform_network_process+0x3de>
 8010cdc:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8010ce0:	1a9b      	subs	r3, r3, r2
 8010ce2:	4419      	add	r1, r3
 8010ce4:	6081      	str	r1, [r0, #8]
 8010ce6:	69a3      	ldr	r3, [r4, #24]
 8010ce8:	f8da 2004 	ldr.w	r2, [sl, #4]
 8010cec:	60da      	str	r2, [r3, #12]
 8010cee:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8010cf2:	429f      	cmp	r7, r3
 8010cf4:	d384      	bcc.n	8010c00 <ai_platform_network_process+0x238>
 8010cf6:	e05b      	b.n	8010db0 <ai_platform_network_process+0x3e8>
 8010cf8:	e7fe      	b.n	8010cf8 <ai_platform_network_process+0x330>
 8010cfa:	68ea      	ldr	r2, [r5, #12]
 8010cfc:	616b      	str	r3, [r5, #20]
 8010cfe:	f002 0203 	and.w	r2, r2, #3
 8010d02:	2a03      	cmp	r2, #3
 8010d04:	d039      	beq.n	8010d7a <ai_platform_network_process+0x3b2>
 8010d06:	2230      	movs	r2, #48	@ 0x30
 8010d08:	2111      	movs	r1, #17
 8010d0a:	f105 0010 	add.w	r0, r5, #16
 8010d0e:	2400      	movs	r4, #0
 8010d10:	f000 f93e 	bl	8010f90 <core_set_error>
 8010d14:	4620      	mov	r0, r4
 8010d16:	b005      	add	sp, #20
 8010d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d1c:	4a0c      	ldr	r2, [pc, #48]	@ (8010d50 <ai_platform_network_process+0x388>)
 8010d1e:	2301      	movs	r3, #1
 8010d20:	6093      	str	r3, [r2, #8]
 8010d22:	6893      	ldr	r3, [r2, #8]
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d1fc      	bne.n	8010d22 <ai_platform_network_process+0x35a>
 8010d28:	4b07      	ldr	r3, [pc, #28]	@ (8010d48 <ai_platform_network_process+0x380>)
 8010d2a:	6013      	str	r3, [r2, #0]
 8010d2c:	4b07      	ldr	r3, [pc, #28]	@ (8010d4c <ai_platform_network_process+0x384>)
 8010d2e:	6812      	ldr	r2, [r2, #0]
 8010d30:	429a      	cmp	r2, r3
 8010d32:	f43f aeb6 	beq.w	8010aa2 <ai_platform_network_process+0xda>
 8010d36:	e7fe      	b.n	8010d36 <ai_platform_network_process+0x36e>
 8010d38:	f8b8 3000 	ldrh.w	r3, [r8]
 8010d3c:	429f      	cmp	r7, r3
 8010d3e:	f4ff aed6 	bcc.w	8010aee <ai_platform_network_process+0x126>
 8010d42:	e74b      	b.n	8010bdc <ai_platform_network_process+0x214>
 8010d44:	58024000 	.word	0x58024000
 8010d48:	f407a5c2 	.word	0xf407a5c2
 8010d4c:	b5e8b5cd 	.word	0xb5e8b5cd
 8010d50:	40023000 	.word	0x40023000
 8010d54:	4a87      	ldr	r2, [pc, #540]	@ (8010f74 <ai_platform_network_process+0x5ac>)
 8010d56:	2301      	movs	r3, #1
 8010d58:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8010d5c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d1fb      	bne.n	8010d5c <ai_platform_network_process+0x394>
 8010d64:	4b84      	ldr	r3, [pc, #528]	@ (8010f78 <ai_platform_network_process+0x5b0>)
 8010d66:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 8010d6a:	4b84      	ldr	r3, [pc, #528]	@ (8010f7c <ai_platform_network_process+0x5b4>)
 8010d6c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8010d70:	429a      	cmp	r2, r3
 8010d72:	f43f ae96 	beq.w	8010aa2 <ai_platform_network_process+0xda>
 8010d76:	e7fe      	b.n	8010d76 <ai_platform_network_process+0x3ae>
 8010d78:	9d03      	ldr	r5, [sp, #12]
 8010d7a:	2400      	movs	r4, #0
 8010d7c:	2217      	movs	r2, #23
 8010d7e:	2112      	movs	r1, #18
 8010d80:	f105 0010 	add.w	r0, r5, #16
 8010d84:	f000 f904 	bl	8010f90 <core_set_error>
 8010d88:	4620      	mov	r0, r4
 8010d8a:	b005      	add	sp, #20
 8010d8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d90:	462c      	mov	r4, r5
 8010d92:	e7bf      	b.n	8010d14 <ai_platform_network_process+0x34c>
 8010d94:	9d03      	ldr	r5, [sp, #12]
 8010d96:	2218      	movs	r2, #24
 8010d98:	2112      	movs	r1, #18
 8010d9a:	2400      	movs	r4, #0
 8010d9c:	f105 0010 	add.w	r0, r5, #16
 8010da0:	f000 f8f6 	bl	8010f90 <core_set_error>
 8010da4:	e7b6      	b.n	8010d14 <ai_platform_network_process+0x34c>
 8010da6:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8010daa:	429f      	cmp	r7, r3
 8010dac:	f4ff af28 	bcc.w	8010c00 <ai_platform_network_process+0x238>
 8010db0:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8010db4:	8daa      	ldrh	r2, [r5, #44]	@ 0x2c
 8010db6:	82ab      	strh	r3, [r5, #20]
 8010db8:	2a00      	cmp	r2, #0
 8010dba:	f040 808b 	bne.w	8010ed4 <ai_platform_network_process+0x50c>
 8010dbe:	4616      	mov	r6, r2
 8010dc0:	4617      	mov	r7, r2
 8010dc2:	8aec      	ldrh	r4, [r5, #22]
 8010dc4:	429c      	cmp	r4, r3
 8010dc6:	d2a5      	bcs.n	8010d14 <ai_platform_network_process+0x34c>
 8010dc8:	46ab      	mov	fp, r5
 8010dca:	2e00      	cmp	r6, #0
 8010dcc:	d030      	beq.n	8010e30 <ai_platform_network_process+0x468>
 8010dce:	f04f 0800 	mov.w	r8, #0
 8010dd2:	e014      	b.n	8010dfe <ai_platform_network_process+0x436>
 8010dd4:	6882      	ldr	r2, [r0, #8]
 8010dd6:	68c5      	ldr	r5, [r0, #12]
 8010dd8:	6863      	ldr	r3, [r4, #4]
 8010dda:	1b52      	subs	r2, r2, r5
 8010ddc:	4413      	add	r3, r2
 8010dde:	6083      	str	r3, [r0, #8]
 8010de0:	698b      	ldr	r3, [r1, #24]
 8010de2:	6862      	ldr	r2, [r4, #4]
 8010de4:	60da      	str	r2, [r3, #12]
 8010de6:	f859 200a 	ldr.w	r2, [r9, sl]
 8010dea:	f108 0801 	add.w	r8, r8, #1
 8010dee:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8010df2:	440b      	add	r3, r1
 8010df4:	4293      	cmp	r3, r2
 8010df6:	d301      	bcc.n	8010dfc <ai_platform_network_process+0x434>
 8010df8:	68e3      	ldr	r3, [r4, #12]
 8010dfa:	1ad3      	subs	r3, r2, r3
 8010dfc:	6063      	str	r3, [r4, #4]
 8010dfe:	8833      	ldrh	r3, [r6, #0]
 8010e00:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8010e04:	4543      	cmp	r3, r8
 8010e06:	d913      	bls.n	8010e30 <ai_platform_network_process+0x468>
 8010e08:	6873      	ldr	r3, [r6, #4]
 8010e0a:	b18b      	cbz	r3, 8010e30 <ai_platform_network_process+0x468>
 8010e0c:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8010e10:	b171      	cbz	r1, 8010e30 <ai_platform_network_process+0x468>
 8010e12:	6988      	ldr	r0, [r1, #24]
 8010e14:	68b2      	ldr	r2, [r6, #8]
 8010e16:	6803      	ldr	r3, [r0, #0]
 8010e18:	f8d2 9000 	ldr.w	r9, [r2]
 8010e1c:	009d      	lsls	r5, r3, #2
 8010e1e:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8010e22:	d5d7      	bpl.n	8010dd4 <ai_platform_network_process+0x40c>
 8010e24:	6881      	ldr	r1, [r0, #8]
 8010e26:	68a2      	ldr	r2, [r4, #8]
 8010e28:	6860      	ldr	r0, [r4, #4]
 8010e2a:	f001 fb59 	bl	80124e0 <st_int8_copy>
 8010e2e:	e7da      	b.n	8010de6 <ai_platform_network_process+0x41e>
 8010e30:	4658      	mov	r0, fp
 8010e32:	f000 f903 	bl	801103c <ai_layers_forward_all>
 8010e36:	2f00      	cmp	r7, #0
 8010e38:	d03d      	beq.n	8010eb6 <ai_platform_network_process+0x4ee>
 8010e3a:	2400      	movs	r4, #0
 8010e3c:	e016      	b.n	8010e6c <ai_platform_network_process+0x4a4>
 8010e3e:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8010e42:	f859 100a 	ldr.w	r1, [r9, sl]
 8010e46:	4413      	add	r3, r2
 8010e48:	428b      	cmp	r3, r1
 8010e4a:	d302      	bcc.n	8010e52 <ai_platform_network_process+0x48a>
 8010e4c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010e50:	1acb      	subs	r3, r1, r3
 8010e52:	f8c8 3004 	str.w	r3, [r8, #4]
 8010e56:	6981      	ldr	r1, [r0, #24]
 8010e58:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8010e5c:	1b52      	subs	r2, r2, r5
 8010e5e:	4413      	add	r3, r2
 8010e60:	608b      	str	r3, [r1, #8]
 8010e62:	6983      	ldr	r3, [r0, #24]
 8010e64:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8010e68:	60da      	str	r2, [r3, #12]
 8010e6a:	3401      	adds	r4, #1
 8010e6c:	883b      	ldrh	r3, [r7, #0]
 8010e6e:	42a3      	cmp	r3, r4
 8010e70:	d921      	bls.n	8010eb6 <ai_platform_network_process+0x4ee>
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	b1fb      	cbz	r3, 8010eb6 <ai_platform_network_process+0x4ee>
 8010e76:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8010e7a:	b1e0      	cbz	r0, 8010eb6 <ai_platform_network_process+0x4ee>
 8010e7c:	68ba      	ldr	r2, [r7, #8]
 8010e7e:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8010e82:	6983      	ldr	r3, [r0, #24]
 8010e84:	f8d2 9000 	ldr.w	r9, [r2]
 8010e88:	681a      	ldr	r2, [r3, #0]
 8010e8a:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8010e8e:	0092      	lsls	r2, r2, #2
 8010e90:	d5d5      	bpl.n	8010e3e <ai_platform_network_process+0x476>
 8010e92:	6898      	ldr	r0, [r3, #8]
 8010e94:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 8010e98:	f001 fb22 	bl	80124e0 <st_int8_copy>
 8010e9c:	f859 200a 	ldr.w	r2, [r9, sl]
 8010ea0:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8010ea4:	440b      	add	r3, r1
 8010ea6:	4293      	cmp	r3, r2
 8010ea8:	d302      	bcc.n	8010eb0 <ai_platform_network_process+0x4e8>
 8010eaa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010eae:	1ad3      	subs	r3, r2, r3
 8010eb0:	f8c8 3004 	str.w	r3, [r8, #4]
 8010eb4:	e7d9      	b.n	8010e6a <ai_platform_network_process+0x4a2>
 8010eb6:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 8010eba:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 8010ebe:	3401      	adds	r4, #1
 8010ec0:	b2a4      	uxth	r4, r4
 8010ec2:	42a3      	cmp	r3, r4
 8010ec4:	f8ab 4016 	strh.w	r4, [fp, #22]
 8010ec8:	f63f af7f 	bhi.w	8010dca <ai_platform_network_process+0x402>
 8010ecc:	4620      	mov	r0, r4
 8010ece:	b005      	add	sp, #20
 8010ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ed4:	2a01      	cmp	r2, #1
 8010ed6:	6b2e      	ldr	r6, [r5, #48]	@ 0x30
 8010ed8:	d029      	beq.n	8010f2e <ai_platform_network_process+0x566>
 8010eda:	f106 070c 	add.w	r7, r6, #12
 8010ede:	e770      	b.n	8010dc2 <ai_platform_network_process+0x3fa>
 8010ee0:	2218      	movs	r2, #24
 8010ee2:	2113      	movs	r1, #19
 8010ee4:	f105 0010 	add.w	r0, r5, #16
 8010ee8:	2400      	movs	r4, #0
 8010eea:	f000 f851 	bl	8010f90 <core_set_error>
 8010eee:	e711      	b.n	8010d14 <ai_platform_network_process+0x34c>
 8010ef0:	9d03      	ldr	r5, [sp, #12]
 8010ef2:	4604      	mov	r4, r0
 8010ef4:	2217      	movs	r2, #23
 8010ef6:	2112      	movs	r1, #18
 8010ef8:	f105 0010 	add.w	r0, r5, #16
 8010efc:	f000 f848 	bl	8010f90 <core_set_error>
 8010f00:	e708      	b.n	8010d14 <ai_platform_network_process+0x34c>
 8010f02:	9d03      	ldr	r5, [sp, #12]
 8010f04:	2219      	movs	r2, #25
 8010f06:	2112      	movs	r1, #18
 8010f08:	2400      	movs	r4, #0
 8010f0a:	f105 0010 	add.w	r0, r5, #16
 8010f0e:	f000 f83f 	bl	8010f90 <core_set_error>
 8010f12:	e6ff      	b.n	8010d14 <ai_platform_network_process+0x34c>
 8010f14:	9d03      	ldr	r5, [sp, #12]
 8010f16:	4604      	mov	r4, r0
 8010f18:	2221      	movs	r2, #33	@ 0x21
 8010f1a:	2112      	movs	r1, #18
 8010f1c:	f105 0010 	add.w	r0, r5, #16
 8010f20:	f000 f836 	bl	8010f90 <core_set_error>
 8010f24:	e6f6      	b.n	8010d14 <ai_platform_network_process+0x34c>
 8010f26:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8010f2a:	82ab      	strh	r3, [r5, #20]
 8010f2c:	e744      	b.n	8010db8 <ai_platform_network_process+0x3f0>
 8010f2e:	2700      	movs	r7, #0
 8010f30:	e747      	b.n	8010dc2 <ai_platform_network_process+0x3fa>
 8010f32:	4604      	mov	r4, r0
 8010f34:	2217      	movs	r2, #23
 8010f36:	2113      	movs	r1, #19
 8010f38:	f105 0010 	add.w	r0, r5, #16
 8010f3c:	f000 f828 	bl	8010f90 <core_set_error>
 8010f40:	e6e8      	b.n	8010d14 <ai_platform_network_process+0x34c>
 8010f42:	2219      	movs	r2, #25
 8010f44:	2113      	movs	r1, #19
 8010f46:	f105 0010 	add.w	r0, r5, #16
 8010f4a:	2400      	movs	r4, #0
 8010f4c:	f000 f820 	bl	8010f90 <core_set_error>
 8010f50:	e6e0      	b.n	8010d14 <ai_platform_network_process+0x34c>
 8010f52:	4604      	mov	r4, r0
 8010f54:	2221      	movs	r2, #33	@ 0x21
 8010f56:	2113      	movs	r1, #19
 8010f58:	f105 0010 	add.w	r0, r5, #16
 8010f5c:	f000 f818 	bl	8010f90 <core_set_error>
 8010f60:	e6d8      	b.n	8010d14 <ai_platform_network_process+0x34c>
 8010f62:	2217      	movs	r2, #23
 8010f64:	2113      	movs	r1, #19
 8010f66:	f105 0010 	add.w	r0, r5, #16
 8010f6a:	4654      	mov	r4, sl
 8010f6c:	f000 f810 	bl	8010f90 <core_set_error>
 8010f70:	e6d0      	b.n	8010d14 <ai_platform_network_process+0x34c>
 8010f72:	bf00      	nop
 8010f74:	58024000 	.word	0x58024000
 8010f78:	f407a5c2 	.word	0xf407a5c2
 8010f7c:	b5e8b5cd 	.word	0xb5e8b5cd

08010f80 <core_init>:
 8010f80:	2001      	movs	r0, #1
 8010f82:	4770      	bx	lr

08010f84 <core_get_error>:
 8010f84:	4603      	mov	r3, r0
 8010f86:	2200      	movs	r2, #0
 8010f88:	6800      	ldr	r0, [r0, #0]
 8010f8a:	601a      	str	r2, [r3, #0]
 8010f8c:	4770      	bx	lr
 8010f8e:	bf00      	nop

08010f90 <core_set_error>:
 8010f90:	4603      	mov	r3, r0
 8010f92:	7800      	ldrb	r0, [r0, #0]
 8010f94:	b108      	cbz	r0, 8010f9a <core_set_error+0xa>
 8010f96:	2000      	movs	r0, #0
 8010f98:	4770      	bx	lr
 8010f9a:	7019      	strb	r1, [r3, #0]
 8010f9c:	2001      	movs	r0, #1
 8010f9e:	6819      	ldr	r1, [r3, #0]
 8010fa0:	f362 211f 	bfi	r1, r2, #8, #24
 8010fa4:	6019      	str	r1, [r3, #0]
 8010fa6:	4770      	bx	lr

08010fa8 <ai_check_custom_types>:
 8010fa8:	b082      	sub	sp, #8
 8010faa:	4b12      	ldr	r3, [pc, #72]	@ (8010ff4 <ai_check_custom_types+0x4c>)
 8010fac:	9301      	str	r3, [sp, #4]
 8010fae:	b118      	cbz	r0, 8010fb8 <ai_check_custom_types+0x10>
 8010fb0:	7803      	ldrb	r3, [r0, #0]
 8010fb2:	2b03      	cmp	r3, #3
 8010fb4:	d002      	beq.n	8010fbc <ai_check_custom_types+0x14>
 8010fb6:	2000      	movs	r0, #0
 8010fb8:	b002      	add	sp, #8
 8010fba:	4770      	bx	lr
 8010fbc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010fc0:	4293      	cmp	r3, r2
 8010fc2:	d004      	beq.n	8010fce <ai_check_custom_types+0x26>
 8010fc4:	2001      	movs	r0, #1
 8010fc6:	f080 0001 	eor.w	r0, r0, #1
 8010fca:	b002      	add	sp, #8
 8010fcc:	4770      	bx	lr
 8010fce:	7842      	ldrb	r2, [r0, #1]
 8010fd0:	3001      	adds	r0, #1
 8010fd2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010fd6:	429a      	cmp	r2, r3
 8010fd8:	d1f4      	bne.n	8010fc4 <ai_check_custom_types+0x1c>
 8010fda:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8010fde:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010fe2:	429a      	cmp	r2, r3
 8010fe4:	d1ee      	bne.n	8010fc4 <ai_check_custom_types+0x1c>
 8010fe6:	7842      	ldrb	r2, [r0, #1]
 8010fe8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010fec:	429a      	cmp	r2, r3
 8010fee:	d1e9      	bne.n	8010fc4 <ai_check_custom_types+0x1c>
 8010ff0:	2000      	movs	r0, #0
 8010ff2:	e7e8      	b.n	8010fc6 <ai_check_custom_types+0x1e>
 8010ff4:	84048403 	.word	0x84048403

08010ff8 <ai_layers_init_all>:
 8010ff8:	2100      	movs	r1, #0
 8010ffa:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8010ffc:	b13b      	cbz	r3, 801100e <ai_layers_init_all+0x16>
 8010ffe:	691a      	ldr	r2, [r3, #16]
 8011000:	3101      	adds	r1, #1
 8011002:	60d8      	str	r0, [r3, #12]
 8011004:	429a      	cmp	r2, r3
 8011006:	4613      	mov	r3, r2
 8011008:	d001      	beq.n	801100e <ai_layers_init_all+0x16>
 801100a:	2a00      	cmp	r2, #0
 801100c:	d1f6      	bne.n	8010ffc <ai_layers_init_all+0x4>
 801100e:	4608      	mov	r0, r1
 8011010:	4770      	bx	lr
 8011012:	bf00      	nop

08011014 <ai_layers_post_init_all>:
 8011014:	b538      	push	{r3, r4, r5, lr}
 8011016:	2500      	movs	r5, #0
 8011018:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 801101a:	b16c      	cbz	r4, 8011038 <ai_layers_post_init_all+0x24>
 801101c:	6863      	ldr	r3, [r4, #4]
 801101e:	07db      	lsls	r3, r3, #31
 8011020:	d504      	bpl.n	801102c <ai_layers_post_init_all+0x18>
 8011022:	6a23      	ldr	r3, [r4, #32]
 8011024:	4620      	mov	r0, r4
 8011026:	b10b      	cbz	r3, 801102c <ai_layers_post_init_all+0x18>
 8011028:	3501      	adds	r5, #1
 801102a:	4798      	blx	r3
 801102c:	6923      	ldr	r3, [r4, #16]
 801102e:	42a3      	cmp	r3, r4
 8011030:	461c      	mov	r4, r3
 8011032:	d001      	beq.n	8011038 <ai_layers_post_init_all+0x24>
 8011034:	2b00      	cmp	r3, #0
 8011036:	d1f0      	bne.n	801101a <ai_layers_post_init_all+0x6>
 8011038:	4628      	mov	r0, r5
 801103a:	bd38      	pop	{r3, r4, r5, pc}

0801103c <ai_layers_forward_all>:
 801103c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011040:	f8d0 803c 	ldr.w	r8, [r0, #60]	@ 0x3c
 8011044:	4604      	mov	r4, r0
 8011046:	f1b8 0f00 	cmp.w	r8, #0
 801104a:	d02a      	beq.n	80110a2 <ai_layers_forward_all+0x66>
 801104c:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 801104e:	6381      	str	r1, [r0, #56]	@ 0x38
 8011050:	b319      	cbz	r1, 801109a <ai_layers_forward_all+0x5e>
 8011052:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8011054:	2001      	movs	r0, #1
 8011056:	47c0      	blx	r8
 8011058:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 801105a:	b1f6      	cbz	r6, 801109a <ai_layers_forward_all+0x5e>
 801105c:	2700      	movs	r7, #0
 801105e:	4631      	mov	r1, r6
 8011060:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8011062:	2002      	movs	r0, #2
 8011064:	47c0      	blx	r8
 8011066:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 8011068:	4628      	mov	r0, r5
 801106a:	696b      	ldr	r3, [r5, #20]
 801106c:	4798      	blx	r3
 801106e:	692e      	ldr	r6, [r5, #16]
 8011070:	2003      	movs	r0, #3
 8011072:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8011074:	42b5      	cmp	r5, r6
 8011076:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8011078:	d007      	beq.n	801108a <ai_layers_forward_all+0x4e>
 801107a:	47c0      	blx	r8
 801107c:	3701      	adds	r7, #1
 801107e:	63a6      	str	r6, [r4, #56]	@ 0x38
 8011080:	2e00      	cmp	r6, #0
 8011082:	d1ec      	bne.n	801105e <ai_layers_forward_all+0x22>
 8011084:	4638      	mov	r0, r7
 8011086:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801108a:	2003      	movs	r0, #3
 801108c:	3701      	adds	r7, #1
 801108e:	47c0      	blx	r8
 8011090:	2300      	movs	r3, #0
 8011092:	4638      	mov	r0, r7
 8011094:	63a3      	str	r3, [r4, #56]	@ 0x38
 8011096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801109a:	2700      	movs	r7, #0
 801109c:	4638      	mov	r0, r7
 801109e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110a2:	6b45      	ldr	r5, [r0, #52]	@ 0x34
 80110a4:	6385      	str	r5, [r0, #56]	@ 0x38
 80110a6:	2d00      	cmp	r5, #0
 80110a8:	d0f7      	beq.n	801109a <ai_layers_forward_all+0x5e>
 80110aa:	4647      	mov	r7, r8
 80110ac:	696b      	ldr	r3, [r5, #20]
 80110ae:	4628      	mov	r0, r5
 80110b0:	4798      	blx	r3
 80110b2:	462b      	mov	r3, r5
 80110b4:	692d      	ldr	r5, [r5, #16]
 80110b6:	429d      	cmp	r5, r3
 80110b8:	d004      	beq.n	80110c4 <ai_layers_forward_all+0x88>
 80110ba:	3701      	adds	r7, #1
 80110bc:	63a5      	str	r5, [r4, #56]	@ 0x38
 80110be:	2d00      	cmp	r5, #0
 80110c0:	d1f4      	bne.n	80110ac <ai_layers_forward_all+0x70>
 80110c2:	e7df      	b.n	8011084 <ai_layers_forward_all+0x48>
 80110c4:	2300      	movs	r3, #0
 80110c6:	3701      	adds	r7, #1
 80110c8:	63a3      	str	r3, [r4, #56]	@ 0x38
 80110ca:	e7db      	b.n	8011084 <ai_layers_forward_all+0x48>

080110cc <ai_dict_decompress_f32>:
 80110cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80110d0:	9d08      	ldr	r5, [sp, #32]
 80110d2:	2b04      	cmp	r3, #4
 80110d4:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80110d8:	d00e      	beq.n	80110f8 <ai_dict_decompress_f32+0x2c>
 80110da:	2b08      	cmp	r3, #8
 80110dc:	d10a      	bne.n	80110f4 <ai_dict_decompress_f32+0x28>
 80110de:	42a8      	cmp	r0, r5
 80110e0:	d208      	bcs.n	80110f4 <ai_dict_decompress_f32+0x28>
 80110e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80110e6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80110ea:	681b      	ldr	r3, [r3, #0]
 80110ec:	f840 3b04 	str.w	r3, [r0], #4
 80110f0:	4285      	cmp	r5, r0
 80110f2:	d8f6      	bhi.n	80110e2 <ai_dict_decompress_f32+0x16>
 80110f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80110f8:	9b07      	ldr	r3, [sp, #28]
 80110fa:	085e      	lsrs	r6, r3, #1
 80110fc:	f003 0701 	and.w	r7, r3, #1
 8011100:	ea4f 09c6 	mov.w	r9, r6, lsl #3
 8011104:	f106 38ff 	add.w	r8, r6, #4294967295
 8011108:	42a8      	cmp	r0, r5
 801110a:	d2f3      	bcs.n	80110f4 <ai_dict_decompress_f32+0x28>
 801110c:	b33e      	cbz	r6, 801115e <ai_dict_decompress_f32+0x92>
 801110e:	f100 0e08 	add.w	lr, r0, #8
 8011112:	f101 3cff 	add.w	ip, r1, #4294967295
 8011116:	eb01 0408 	add.w	r4, r1, r8
 801111a:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 801111e:	f10e 0e08 	add.w	lr, lr, #8
 8011122:	091b      	lsrs	r3, r3, #4
 8011124:	4564      	cmp	r4, ip
 8011126:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801112a:	681b      	ldr	r3, [r3, #0]
 801112c:	f84e 3c10 	str.w	r3, [lr, #-16]
 8011130:	f89c 3000 	ldrb.w	r3, [ip]
 8011134:	f003 030f 	and.w	r3, r3, #15
 8011138:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801113c:	681b      	ldr	r3, [r3, #0]
 801113e:	f84e 3c0c 	str.w	r3, [lr, #-12]
 8011142:	d1ea      	bne.n	801111a <ai_dict_decompress_f32+0x4e>
 8011144:	4431      	add	r1, r6
 8011146:	4448      	add	r0, r9
 8011148:	2f00      	cmp	r7, #0
 801114a:	d0dd      	beq.n	8011108 <ai_dict_decompress_f32+0x3c>
 801114c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011150:	091b      	lsrs	r3, r3, #4
 8011152:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011156:	681b      	ldr	r3, [r3, #0]
 8011158:	f840 3b04 	str.w	r3, [r0], #4
 801115c:	e7d4      	b.n	8011108 <ai_dict_decompress_f32+0x3c>
 801115e:	2f00      	cmp	r7, #0
 8011160:	d1f4      	bne.n	801114c <ai_dict_decompress_f32+0x80>
 8011162:	42a8      	cmp	r0, r5
 8011164:	d3fd      	bcc.n	8011162 <ai_dict_decompress_f32+0x96>
 8011166:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801116a:	bf00      	nop

0801116c <forward_conv2d_if32of32wf32>:
 801116c:	6982      	ldr	r2, [r0, #24]
 801116e:	8813      	ldrh	r3, [r2, #0]
 8011170:	2b00      	cmp	r3, #0
 8011172:	f000 8092 	beq.w	801129a <forward_conv2d_if32of32wf32+0x12e>
 8011176:	f8d2 c004 	ldr.w	ip, [r2, #4]
 801117a:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801117e:	b102      	cbz	r2, 8011182 <forward_conv2d_if32of32wf32+0x16>
 8011180:	6812      	ldr	r2, [r2, #0]
 8011182:	2b01      	cmp	r3, #1
 8011184:	f000 80b3 	beq.w	80112ee <forward_conv2d_if32of32wf32+0x182>
 8011188:	f8dc 1010 	ldr.w	r1, [ip, #16]
 801118c:	b101      	cbz	r1, 8011190 <forward_conv2d_if32of32wf32+0x24>
 801118e:	6809      	ldr	r1, [r1, #0]
 8011190:	2b02      	cmp	r3, #2
 8011192:	f000 8084 	beq.w	801129e <forward_conv2d_if32of32wf32+0x132>
 8011196:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801119a:	f8dc 601c 	ldr.w	r6, [ip, #28]
 801119e:	b0a1      	sub	sp, #132	@ 0x84
 80111a0:	2e00      	cmp	r6, #0
 80111a2:	f000 809d 	beq.w	80112e0 <forward_conv2d_if32of32wf32+0x174>
 80111a6:	f8bc 5018 	ldrh.w	r5, [ip, #24]
 80111aa:	6834      	ldr	r4, [r6, #0]
 80111ac:	2d01      	cmp	r5, #1
 80111ae:	f240 8099 	bls.w	80112e4 <forward_conv2d_if32of32wf32+0x178>
 80111b2:	6876      	ldr	r6, [r6, #4]
 80111b4:	f8d2 800c 	ldr.w	r8, [r2, #12]
 80111b8:	f8d1 900c 	ldr.w	r9, [r1, #12]
 80111bc:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80111c0:	6992      	ldr	r2, [r2, #24]
 80111c2:	9713      	str	r7, [sp, #76]	@ 0x4c
 80111c4:	f8d9 7004 	ldr.w	r7, [r9, #4]
 80111c8:	f8d0 e03c 	ldr.w	lr, [r0, #60]	@ 0x3c
 80111cc:	9714      	str	r7, [sp, #80]	@ 0x50
 80111ce:	f8d9 700c 	ldr.w	r7, [r9, #12]
 80111d2:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 80111d6:	9715      	str	r7, [sp, #84]	@ 0x54
 80111d8:	f8d9 7008 	ldr.w	r7, [r9, #8]
 80111dc:	f8d2 b008 	ldr.w	fp, [r2, #8]
 80111e0:	9716      	str	r7, [sp, #88]	@ 0x58
 80111e2:	f8d8 700c 	ldr.w	r7, [r8, #12]
 80111e6:	69a2      	ldr	r2, [r4, #24]
 80111e8:	9717      	str	r7, [sp, #92]	@ 0x5c
 80111ea:	f8d8 7008 	ldr.w	r7, [r8, #8]
 80111ee:	9718      	str	r7, [sp, #96]	@ 0x60
 80111f0:	8d07      	ldrh	r7, [r0, #40]	@ 0x28
 80111f2:	e9d0 540c 	ldrd	r5, r4, [r0, #48]	@ 0x30
 80111f6:	9719      	str	r7, [sp, #100]	@ 0x64
 80111f8:	8d87      	ldrh	r7, [r0, #44]	@ 0x2c
 80111fa:	69c0      	ldr	r0, [r0, #28]
 80111fc:	971a      	str	r7, [sp, #104]	@ 0x68
 80111fe:	901f      	str	r0, [sp, #124]	@ 0x7c
 8011200:	f8be 0000 	ldrh.w	r0, [lr]
 8011204:	901b      	str	r0, [sp, #108]	@ 0x6c
 8011206:	f8be 0004 	ldrh.w	r0, [lr, #4]
 801120a:	901c      	str	r0, [sp, #112]	@ 0x70
 801120c:	b2a8      	uxth	r0, r5
 801120e:	901d      	str	r0, [sp, #116]	@ 0x74
 8011210:	b2a0      	uxth	r0, r4
 8011212:	901e      	str	r0, [sp, #120]	@ 0x78
 8011214:	f8d2 9008 	ldr.w	r9, [r2, #8]
 8011218:	e9da 7801 	ldrd	r7, r8, [sl, #4]
 801121c:	b10e      	cbz	r6, 8011222 <forward_conv2d_if32of32wf32+0xb6>
 801121e:	69b0      	ldr	r0, [r6, #24]
 8011220:	6886      	ldr	r6, [r0, #8]
 8011222:	b2a4      	uxth	r4, r4
 8011224:	6989      	ldr	r1, [r1, #24]
 8011226:	f108 30ff 	add.w	r0, r8, #4294967295
 801122a:	b2ad      	uxth	r5, r5
 801122c:	3c01      	subs	r4, #1
 801122e:	f8d1 a008 	ldr.w	sl, [r1, #8]
 8011232:	3d01      	subs	r5, #1
 8011234:	6811      	ldr	r1, [r2, #0]
 8011236:	fb00 8404 	mla	r4, r0, r4, r8
 801123a:	1e78      	subs	r0, r7, #1
 801123c:	fb00 7505 	mla	r5, r0, r5, r7
 8011240:	f3c1 4043 	ubfx	r0, r1, #17, #4
 8011244:	2804      	cmp	r0, #4
 8011246:	d02d      	beq.n	80112a4 <forward_conv2d_if32of32wf32+0x138>
 8011248:	2808      	cmp	r0, #8
 801124a:	d02b      	beq.n	80112a4 <forward_conv2d_if32of32wf32+0x138>
 801124c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801124e:	464a      	mov	r2, r9
 8011250:	940c      	str	r4, [sp, #48]	@ 0x30
 8011252:	4651      	mov	r1, sl
 8011254:	9c1e      	ldr	r4, [sp, #120]	@ 0x78
 8011256:	4658      	mov	r0, fp
 8011258:	9706      	str	r7, [sp, #24]
 801125a:	940f      	str	r4, [sp, #60]	@ 0x3c
 801125c:	e9cd 530d 	strd	r5, r3, [sp, #52]	@ 0x34
 8011260:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8011262:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011264:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011266:	930a      	str	r3, [sp, #40]	@ 0x28
 8011268:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801126a:	9309      	str	r3, [sp, #36]	@ 0x24
 801126c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801126e:	e9cd 8307 	strd	r8, r3, [sp, #28]
 8011272:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8011274:	9305      	str	r3, [sp, #20]
 8011276:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8011278:	9304      	str	r3, [sp, #16]
 801127a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801127c:	9303      	str	r3, [sp, #12]
 801127e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8011280:	9302      	str	r3, [sp, #8]
 8011282:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8011284:	9301      	str	r3, [sp, #4]
 8011286:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011288:	9300      	str	r3, [sp, #0]
 801128a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801128c:	9310      	str	r3, [sp, #64]	@ 0x40
 801128e:	4633      	mov	r3, r6
 8011290:	f000 fe9e 	bl	8011fd0 <forward_lite_conv2d_if32of32wf32>
 8011294:	b021      	add	sp, #132	@ 0x84
 8011296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801129a:	685b      	ldr	r3, [r3, #4]
 801129c:	deff      	udf	#255	@ 0xff
 801129e:	2300      	movs	r3, #0
 80112a0:	685b      	ldr	r3, [r3, #4]
 80112a2:	deff      	udf	#255	@ 0xff
 80112a4:	68d2      	ldr	r2, [r2, #12]
 80112a6:	2a00      	cmp	r2, #0
 80112a8:	d0d0      	beq.n	801124c <forward_conv2d_if32of32wf32+0xe0>
 80112aa:	2b03      	cmp	r3, #3
 80112ac:	d022      	beq.n	80112f4 <forward_conv2d_if32of32wf32+0x188>
 80112ae:	f8dc 3028 	ldr.w	r3, [ip, #40]	@ 0x28
 80112b2:	b1cb      	cbz	r3, 80112e8 <forward_conv2d_if32of32wf32+0x17c>
 80112b4:	681b      	ldr	r3, [r3, #0]
 80112b6:	b1bb      	cbz	r3, 80112e8 <forward_conv2d_if32of32wf32+0x17c>
 80112b8:	f8d3 c018 	ldr.w	ip, [r3, #24]
 80112bc:	f3c1 13c6 	ubfx	r3, r1, #7, #7
 80112c0:	f3c1 5141 	ubfx	r1, r1, #21, #2
 80112c4:	410b      	asrs	r3, r1
 80112c6:	e9dc 1001 	ldrd	r1, r0, [ip, #4]
 80112ca:	b29b      	uxth	r3, r3
 80112cc:	9101      	str	r1, [sp, #4]
 80112ce:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80112d0:	9100      	str	r1, [sp, #0]
 80112d2:	4649      	mov	r1, r9
 80112d4:	2800      	cmp	r0, #0
 80112d6:	bf18      	it	ne
 80112d8:	4681      	movne	r9, r0
 80112da:	f7ff fef7 	bl	80110cc <ai_dict_decompress_f32>
 80112de:	e7b5      	b.n	801124c <forward_conv2d_if32of32wf32+0xe0>
 80112e0:	4634      	mov	r4, r6
 80112e2:	e767      	b.n	80111b4 <forward_conv2d_if32of32wf32+0x48>
 80112e4:	2600      	movs	r6, #0
 80112e6:	e765      	b.n	80111b4 <forward_conv2d_if32of32wf32+0x48>
 80112e8:	2300      	movs	r3, #0
 80112ea:	699b      	ldr	r3, [r3, #24]
 80112ec:	deff      	udf	#255	@ 0xff
 80112ee:	2300      	movs	r3, #0
 80112f0:	685b      	ldr	r3, [r3, #4]
 80112f2:	deff      	udf	#255	@ 0xff
 80112f4:	2300      	movs	r3, #0
 80112f6:	685b      	ldr	r3, [r3, #4]
 80112f8:	deff      	udf	#255	@ 0xff
 80112fa:	bf00      	nop

080112fc <forward_dense>:
 80112fc:	6983      	ldr	r3, [r0, #24]
 80112fe:	881a      	ldrh	r2, [r3, #0]
 8011300:	2a00      	cmp	r2, #0
 8011302:	f000 80f0 	beq.w	80114e6 <forward_dense+0x1ea>
 8011306:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801130a:	ed2d 8b02 	vpush	{d8}
 801130e:	6858      	ldr	r0, [r3, #4]
 8011310:	b09b      	sub	sp, #108	@ 0x6c
 8011312:	6845      	ldr	r5, [r0, #4]
 8011314:	b105      	cbz	r5, 8011318 <forward_dense+0x1c>
 8011316:	682d      	ldr	r5, [r5, #0]
 8011318:	2a01      	cmp	r2, #1
 801131a:	f000 840a 	beq.w	8011b32 <forward_dense+0x836>
 801131e:	6906      	ldr	r6, [r0, #16]
 8011320:	b106      	cbz	r6, 8011324 <forward_dense+0x28>
 8011322:	6836      	ldr	r6, [r6, #0]
 8011324:	2a02      	cmp	r2, #2
 8011326:	f000 80e0 	beq.w	80114ea <forward_dense+0x1ee>
 801132a:	69c3      	ldr	r3, [r0, #28]
 801132c:	930d      	str	r3, [sp, #52]	@ 0x34
 801132e:	2b00      	cmp	r3, #0
 8011330:	f000 83f1 	beq.w	8011b16 <forward_dense+0x81a>
 8011334:	4619      	mov	r1, r3
 8011336:	8b03      	ldrh	r3, [r0, #24]
 8011338:	6809      	ldr	r1, [r1, #0]
 801133a:	2b01      	cmp	r3, #1
 801133c:	910f      	str	r1, [sp, #60]	@ 0x3c
 801133e:	f240 83ec 	bls.w	8011b1a <forward_dense+0x81e>
 8011342:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011344:	685b      	ldr	r3, [r3, #4]
 8011346:	930d      	str	r3, [sp, #52]	@ 0x34
 8011348:	460b      	mov	r3, r1
 801134a:	f8d3 8018 	ldr.w	r8, [r3, #24]
 801134e:	2a03      	cmp	r2, #3
 8011350:	68eb      	ldr	r3, [r5, #12]
 8011352:	68f7      	ldr	r7, [r6, #12]
 8011354:	685b      	ldr	r3, [r3, #4]
 8011356:	687c      	ldr	r4, [r7, #4]
 8011358:	9317      	str	r3, [sp, #92]	@ 0x5c
 801135a:	f8d8 3000 	ldr.w	r3, [r8]
 801135e:	4621      	mov	r1, r4
 8011360:	9419      	str	r4, [sp, #100]	@ 0x64
 8011362:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 8011366:	f3c3 5c41 	ubfx	ip, r3, #21, #2
 801136a:	e9d7 4702 	ldrd	r4, r7, [r7, #8]
 801136e:	fb01 f404 	mul.w	r4, r1, r4
 8011372:	fa4e f10c 	asr.w	r1, lr, ip
 8011376:	9116      	str	r1, [sp, #88]	@ 0x58
 8011378:	f000 83d8 	beq.w	8011b2c <forward_dense+0x830>
 801137c:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 801137e:	f3c3 4343 	ubfx	r3, r3, #17, #4
 8011382:	2a00      	cmp	r2, #0
 8011384:	f000 83c2 	beq.w	8011b0c <forward_dense+0x810>
 8011388:	6812      	ldr	r2, [r2, #0]
 801138a:	2a00      	cmp	r2, #0
 801138c:	f000 83be 	beq.w	8011b0c <forward_dense+0x810>
 8011390:	2b04      	cmp	r3, #4
 8011392:	f8d2 9018 	ldr.w	r9, [r2, #24]
 8011396:	f000 83a8 	beq.w	8011aea <forward_dense+0x7ee>
 801139a:	2b08      	cmp	r3, #8
 801139c:	f000 83a5 	beq.w	8011aea <forward_dense+0x7ee>
 80113a0:	f04f 0a00 	mov.w	sl, #0
 80113a4:	69ab      	ldr	r3, [r5, #24]
 80113a6:	fb07 f404 	mul.w	r4, r7, r4
 80113aa:	69b2      	ldr	r2, [r6, #24]
 80113ac:	f8d3 9008 	ldr.w	r9, [r3, #8]
 80113b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80113b2:	6892      	ldr	r2, [r2, #8]
 80113b4:	695b      	ldr	r3, [r3, #20]
 80113b6:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 80113ba:	9206      	str	r2, [sp, #24]
 80113bc:	685b      	ldr	r3, [r3, #4]
 80113be:	428a      	cmp	r2, r1
 80113c0:	9110      	str	r1, [sp, #64]	@ 0x40
 80113c2:	9304      	str	r3, [sp, #16]
 80113c4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80113c6:	ea4f 0083 	mov.w	r0, r3, lsl #2
 80113ca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80113ce:	900e      	str	r0, [sp, #56]	@ 0x38
 80113d0:	9303      	str	r3, [sp, #12]
 80113d2:	f080 8380 	bcs.w	8011ad6 <forward_dense+0x7da>
 80113d6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80113d8:	4654      	mov	r4, sl
 80113da:	4bb9      	ldr	r3, [pc, #740]	@ (80116c0 <forward_dense+0x3c4>)
 80113dc:	46ca      	mov	sl, r9
 80113de:	08d0      	lsrs	r0, r2, #3
 80113e0:	ed9f 8ab8 	vldr	s16, [pc, #736]	@ 80116c4 <forward_dense+0x3c8>
 80113e4:	4413      	add	r3, r2
 80113e6:	9009      	str	r0, [sp, #36]	@ 0x24
 80113e8:	0099      	lsls	r1, r3, #2
 80113ea:	f022 0301 	bic.w	r3, r2, #1
 80113ee:	f002 0201 	and.w	r2, r2, #1
 80113f2:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 80113f6:	9118      	str	r1, [sp, #96]	@ 0x60
 80113f8:	920a      	str	r2, [sp, #40]	@ 0x28
 80113fa:	eb09 1240 	add.w	r2, r9, r0, lsl #5
 80113fe:	9305      	str	r3, [sp, #20]
 8011400:	f101 0320 	add.w	r3, r1, #32
 8011404:	9207      	str	r2, [sp, #28]
 8011406:	9311      	str	r3, [sp, #68]	@ 0x44
 8011408:	444b      	add	r3, r9
 801140a:	469b      	mov	fp, r3
 801140c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801140e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011410:	699b      	ldr	r3, [r3, #24]
 8011412:	689a      	ldr	r2, [r3, #8]
 8011414:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011416:	b10b      	cbz	r3, 801141c <forward_dense+0x120>
 8011418:	699b      	ldr	r3, [r3, #24]
 801141a:	689b      	ldr	r3, [r3, #8]
 801141c:	2c00      	cmp	r4, #0
 801141e:	f000 834b 	beq.w	8011ab8 <forward_dense+0x7bc>
 8011422:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8011424:	2904      	cmp	r1, #4
 8011426:	f000 826a 	beq.w	80118fe <forward_dense+0x602>
 801142a:	9903      	ldr	r1, [sp, #12]
 801142c:	9806      	ldr	r0, [sp, #24]
 801142e:	4281      	cmp	r1, r0
 8011430:	f240 8356 	bls.w	8011ae0 <forward_dense+0x7e4>
 8011434:	4686      	mov	lr, r0
 8011436:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8011438:	eb00 090a 	add.w	r9, r0, sl
 801143c:	0941      	lsrs	r1, r0, #5
 801143e:	f10a 0004 	add.w	r0, sl, #4
 8011442:	f8cd 9020 	str.w	r9, [sp, #32]
 8011446:	9012      	str	r0, [sp, #72]	@ 0x48
 8011448:	1c48      	adds	r0, r1, #1
 801144a:	00c9      	lsls	r1, r1, #3
 801144c:	3110      	adds	r1, #16
 801144e:	9115      	str	r1, [sp, #84]	@ 0x54
 8011450:	00c1      	lsls	r1, r0, #3
 8011452:	9113      	str	r1, [sp, #76]	@ 0x4c
 8011454:	eb0a 1140 	add.w	r1, sl, r0, lsl #5
 8011458:	9114      	str	r1, [sp, #80]	@ 0x50
 801145a:	f1a9 0104 	sub.w	r1, r9, #4
 801145e:	f8dd 905c 	ldr.w	r9, [sp, #92]	@ 0x5c
 8011462:	910c      	str	r1, [sp, #48]	@ 0x30
 8011464:	2b00      	cmp	r3, #0
 8011466:	f000 8128 	beq.w	80116ba <forward_dense+0x3be>
 801146a:	ecb3 5a01 	vldmia	r3!, {s10}
 801146e:	f1b9 0f07 	cmp.w	r9, #7
 8011472:	d83d      	bhi.n	80114f0 <forward_dense+0x1f4>
 8011474:	45da      	cmp	sl, fp
 8011476:	d211      	bcs.n	801149c <forward_dense+0x1a0>
 8011478:	eddf 7a92 	vldr	s15, [pc, #584]	@ 80116c4 <forward_dense+0x3c8>
 801147c:	4650      	mov	r0, sl
 801147e:	4615      	mov	r5, r2
 8011480:	f815 1b01 	ldrb.w	r1, [r5], #1
 8011484:	ecb0 7a01 	vldmia	r0!, {s14}
 8011488:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801148c:	4558      	cmp	r0, fp
 801148e:	edd1 6a00 	vldr	s13, [r1]
 8011492:	eee6 7a87 	vfma.f32	s15, s13, s14
 8011496:	d3f3      	bcc.n	8011480 <forward_dense+0x184>
 8011498:	ee35 5a27 	vadd.f32	s10, s10, s15
 801149c:	9904      	ldr	r1, [sp, #16]
 801149e:	ecae 5a01 	vstmia	lr!, {s10}
 80114a2:	440a      	add	r2, r1
 80114a4:	9903      	ldr	r1, [sp, #12]
 80114a6:	458e      	cmp	lr, r1
 80114a8:	d3dc      	bcc.n	8011464 <forward_dense+0x168>
 80114aa:	9a06      	ldr	r2, [sp, #24]
 80114ac:	1a8b      	subs	r3, r1, r2
 80114ae:	3b01      	subs	r3, #1
 80114b0:	f023 0303 	bic.w	r3, r3, #3
 80114b4:	3304      	adds	r3, #4
 80114b6:	18d3      	adds	r3, r2, r3
 80114b8:	4619      	mov	r1, r3
 80114ba:	9306      	str	r3, [sp, #24]
 80114bc:	9b03      	ldr	r3, [sp, #12]
 80114be:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80114c0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80114c2:	4413      	add	r3, r2
 80114c4:	9a07      	ldr	r2, [sp, #28]
 80114c6:	4281      	cmp	r1, r0
 80114c8:	9303      	str	r3, [sp, #12]
 80114ca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80114cc:	441a      	add	r2, r3
 80114ce:	449b      	add	fp, r3
 80114d0:	9207      	str	r2, [sp, #28]
 80114d2:	9a05      	ldr	r2, [sp, #20]
 80114d4:	441a      	add	r2, r3
 80114d6:	9205      	str	r2, [sp, #20]
 80114d8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80114da:	4692      	mov	sl, r2
 80114dc:	f080 82fb 	bcs.w	8011ad6 <forward_dense+0x7da>
 80114e0:	441a      	add	r2, r3
 80114e2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80114e4:	e793      	b.n	801140e <forward_dense+0x112>
 80114e6:	6853      	ldr	r3, [r2, #4]
 80114e8:	deff      	udf	#255	@ 0xff
 80114ea:	2300      	movs	r3, #0
 80114ec:	685b      	ldr	r3, [r3, #4]
 80114ee:	deff      	udf	#255	@ 0xff
 80114f0:	f002 0103 	and.w	r1, r2, #3
 80114f4:	2902      	cmp	r1, #2
 80114f6:	f000 81e6 	beq.w	80118c6 <forward_dense+0x5ca>
 80114fa:	2903      	cmp	r1, #3
 80114fc:	f000 80e4 	beq.w	80116c8 <forward_dense+0x3cc>
 8011500:	2901      	cmp	r1, #1
 8011502:	f000 81ef 	beq.w	80118e4 <forward_dense+0x5e8>
 8011506:	9908      	ldr	r1, [sp, #32]
 8011508:	ed9f 7a6e 	vldr	s14, [pc, #440]	@ 80116c4 <forward_dense+0x3c8>
 801150c:	458a      	cmp	sl, r1
 801150e:	f200 82e9 	bhi.w	8011ae4 <forward_dense+0x7e8>
 8011512:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8011514:	f102 0108 	add.w	r1, r2, #8
 8011518:	f10a 0020 	add.w	r0, sl, #32
 801151c:	18ae      	adds	r6, r5, r2
 801151e:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 8011522:	3108      	adds	r1, #8
 8011524:	ed50 2a07 	vldr	s5, [r0, #-28]	@ 0xffffffe4
 8011528:	3020      	adds	r0, #32
 801152a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 801152e:	ed10 3a10 	vldr	s6, [r0, #-64]	@ 0xffffffc0
 8011532:	ed50 3a0e 	vldr	s7, [r0, #-56]	@ 0xffffffc8
 8011536:	edd5 7a00 	vldr	s15, [r5]
 801153a:	f811 5c10 	ldrb.w	r5, [r1, #-16]
 801153e:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8011542:	ed10 4a0d 	vldr	s8, [r0, #-52]	@ 0xffffffcc
 8011546:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 801154a:	ed50 4a0c 	vldr	s9, [r0, #-48]	@ 0xffffffd0
 801154e:	ed50 5a0b 	vldr	s11, [r0, #-44]	@ 0xffffffd4
 8011552:	edd5 2a00 	vldr	s5, [r5]
 8011556:	f811 5c0e 	ldrb.w	r5, [r1, #-14]
 801155a:	eee2 7a83 	vfma.f32	s15, s5, s6
 801155e:	ed10 6a0a 	vldr	s12, [r0, #-40]	@ 0xffffffd8
 8011562:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8011566:	ed50 6a09 	vldr	s13, [r0, #-36]	@ 0xffffffdc
 801156a:	ed95 3a00 	vldr	s6, [r5]
 801156e:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 8011572:	eee3 7a23 	vfma.f32	s15, s6, s7
 8011576:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 801157a:	edd5 3a00 	vldr	s7, [r5]
 801157e:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 8011582:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8011586:	eee3 7a84 	vfma.f32	s15, s7, s8
 801158a:	ed95 4a00 	vldr	s8, [r5]
 801158e:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 8011592:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8011596:	eee4 7a24 	vfma.f32	s15, s8, s9
 801159a:	edd5 4a00 	vldr	s9, [r5]
 801159e:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 80115a2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80115a6:	eee4 7aa5 	vfma.f32	s15, s9, s11
 80115aa:	edd5 5a00 	vldr	s11, [r5]
 80115ae:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 80115b2:	428e      	cmp	r6, r1
 80115b4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80115b8:	eee5 7a86 	vfma.f32	s15, s11, s12
 80115bc:	ed95 6a00 	vldr	s12, [r5]
 80115c0:	eee6 7a26 	vfma.f32	s15, s12, s13
 80115c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80115c8:	d1a9      	bne.n	801151e <forward_dense+0x222>
 80115ca:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80115cc:	1850      	adds	r0, r2, r1
 80115ce:	9914      	ldr	r1, [sp, #80]	@ 0x50
 80115d0:	4559      	cmp	r1, fp
 80115d2:	d26f      	bcs.n	80116b4 <forward_dense+0x3b8>
 80115d4:	7805      	ldrb	r5, [r0, #0]
 80115d6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80115da:	edd5 7a00 	vldr	s15, [r5]
 80115de:	460d      	mov	r5, r1
 80115e0:	ecf5 6a01 	vldmia	r5!, {s13}
 80115e4:	45ab      	cmp	fp, r5
 80115e6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80115ea:	d963      	bls.n	80116b4 <forward_dense+0x3b8>
 80115ec:	7845      	ldrb	r5, [r0, #1]
 80115ee:	edd1 6a01 	vldr	s13, [r1, #4]
 80115f2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80115f6:	edd5 7a00 	vldr	s15, [r5]
 80115fa:	f101 0508 	add.w	r5, r1, #8
 80115fe:	45ab      	cmp	fp, r5
 8011600:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011604:	d956      	bls.n	80116b4 <forward_dense+0x3b8>
 8011606:	7885      	ldrb	r5, [r0, #2]
 8011608:	edd1 6a02 	vldr	s13, [r1, #8]
 801160c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8011610:	edd5 7a00 	vldr	s15, [r5]
 8011614:	f101 050c 	add.w	r5, r1, #12
 8011618:	45ab      	cmp	fp, r5
 801161a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801161e:	d949      	bls.n	80116b4 <forward_dense+0x3b8>
 8011620:	78c5      	ldrb	r5, [r0, #3]
 8011622:	edd1 6a03 	vldr	s13, [r1, #12]
 8011626:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 801162a:	edd5 7a00 	vldr	s15, [r5]
 801162e:	f101 0510 	add.w	r5, r1, #16
 8011632:	45ab      	cmp	fp, r5
 8011634:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011638:	d93c      	bls.n	80116b4 <forward_dense+0x3b8>
 801163a:	7905      	ldrb	r5, [r0, #4]
 801163c:	edd1 6a04 	vldr	s13, [r1, #16]
 8011640:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8011644:	edd5 7a00 	vldr	s15, [r5]
 8011648:	f101 0514 	add.w	r5, r1, #20
 801164c:	45ab      	cmp	fp, r5
 801164e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011652:	d92f      	bls.n	80116b4 <forward_dense+0x3b8>
 8011654:	7945      	ldrb	r5, [r0, #5]
 8011656:	edd1 6a05 	vldr	s13, [r1, #20]
 801165a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 801165e:	edd5 7a00 	vldr	s15, [r5]
 8011662:	f101 0518 	add.w	r5, r1, #24
 8011666:	45ab      	cmp	fp, r5
 8011668:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801166c:	d922      	bls.n	80116b4 <forward_dense+0x3b8>
 801166e:	7985      	ldrb	r5, [r0, #6]
 8011670:	edd1 6a06 	vldr	s13, [r1, #24]
 8011674:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8011678:	edd5 7a00 	vldr	s15, [r5]
 801167c:	f101 051c 	add.w	r5, r1, #28
 8011680:	45ab      	cmp	fp, r5
 8011682:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011686:	d915      	bls.n	80116b4 <forward_dense+0x3b8>
 8011688:	79c5      	ldrb	r5, [r0, #7]
 801168a:	edd1 6a07 	vldr	s13, [r1, #28]
 801168e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8011692:	edd5 7a00 	vldr	s15, [r5]
 8011696:	f101 0520 	add.w	r5, r1, #32
 801169a:	45ab      	cmp	fp, r5
 801169c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80116a0:	d908      	bls.n	80116b4 <forward_dense+0x3b8>
 80116a2:	edd1 7a08 	vldr	s15, [r1, #32]
 80116a6:	7a01      	ldrb	r1, [r0, #8]
 80116a8:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80116ac:	edd1 6a00 	vldr	s13, [r1]
 80116b0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80116b4:	ee35 5a07 	vadd.f32	s10, s10, s14
 80116b8:	e6f0      	b.n	801149c <forward_dense+0x1a0>
 80116ba:	ed9f 5a02 	vldr	s10, [pc, #8]	@ 80116c4 <forward_dense+0x3c8>
 80116be:	e6d6      	b.n	801146e <forward_dense+0x172>
 80116c0:	3ffffff8 	.word	0x3ffffff8
 80116c4:	00000000 	.word	0x00000000
 80116c8:	eeb0 7a48 	vmov.f32	s14, s16
 80116cc:	4650      	mov	r0, sl
 80116ce:	4611      	mov	r1, r2
 80116d0:	468c      	mov	ip, r1
 80116d2:	4606      	mov	r6, r0
 80116d4:	f81c 5b01 	ldrb.w	r5, [ip], #1
 80116d8:	ecf6 7a01 	vldmia	r6!, {s15}
 80116dc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80116e0:	edd5 6a00 	vldr	s13, [r5]
 80116e4:	9d08      	ldr	r5, [sp, #32]
 80116e6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80116ea:	42ae      	cmp	r6, r5
 80116ec:	d866      	bhi.n	80117bc <forward_dense+0x4c0>
 80116ee:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80116f0:	f101 0711 	add.w	r7, r1, #17
 80116f4:	3109      	adds	r1, #9
 80116f6:	eba5 0800 	sub.w	r8, r5, r0
 80116fa:	3024      	adds	r0, #36	@ 0x24
 80116fc:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8011700:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 8011704:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 8011708:	3108      	adds	r1, #8
 801170a:	ed50 2a07 	vldr	s5, [r0, #-28]	@ 0xffffffe4
 801170e:	3020      	adds	r0, #32
 8011710:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8011714:	ed10 3a10 	vldr	s6, [r0, #-64]	@ 0xffffffc0
 8011718:	ed50 3a0e 	vldr	s7, [r0, #-56]	@ 0xffffffc8
 801171c:	edd5 7a00 	vldr	s15, [r5]
 8011720:	f811 5c10 	ldrb.w	r5, [r1, #-16]
 8011724:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8011728:	ed10 4a0d 	vldr	s8, [r0, #-52]	@ 0xffffffcc
 801172c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8011730:	ed50 4a0c 	vldr	s9, [r0, #-48]	@ 0xffffffd0
 8011734:	ed50 5a0b 	vldr	s11, [r0, #-44]	@ 0xffffffd4
 8011738:	edd5 2a00 	vldr	s5, [r5]
 801173c:	f811 5c0e 	ldrb.w	r5, [r1, #-14]
 8011740:	eee2 7a83 	vfma.f32	s15, s5, s6
 8011744:	ed10 6a0a 	vldr	s12, [r0, #-40]	@ 0xffffffd8
 8011748:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 801174c:	ed50 6a09 	vldr	s13, [r0, #-36]	@ 0xffffffdc
 8011750:	ed95 3a00 	vldr	s6, [r5]
 8011754:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 8011758:	eee3 7a23 	vfma.f32	s15, s6, s7
 801175c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8011760:	edd5 3a00 	vldr	s7, [r5]
 8011764:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 8011768:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 801176c:	eee3 7a84 	vfma.f32	s15, s7, s8
 8011770:	ed95 4a00 	vldr	s8, [r5]
 8011774:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 8011778:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 801177c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8011780:	edd5 4a00 	vldr	s9, [r5]
 8011784:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 8011788:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 801178c:	eee4 7aa5 	vfma.f32	s15, s9, s11
 8011790:	edd5 5a00 	vldr	s11, [r5]
 8011794:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 8011798:	428f      	cmp	r7, r1
 801179a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 801179e:	eee5 7a86 	vfma.f32	s15, s11, s12
 80117a2:	ed95 6a00 	vldr	s12, [r5]
 80117a6:	eee6 7a26 	vfma.f32	s15, s12, s13
 80117aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80117ae:	d1a9      	bne.n	8011704 <forward_dense+0x408>
 80117b0:	f108 0801 	add.w	r8, r8, #1
 80117b4:	eb0c 0cc8 	add.w	ip, ip, r8, lsl #3
 80117b8:	eb06 1648 	add.w	r6, r6, r8, lsl #5
 80117bc:	455e      	cmp	r6, fp
 80117be:	f4bf af79 	bcs.w	80116b4 <forward_dense+0x3b8>
 80117c2:	f89c 1000 	ldrb.w	r1, [ip]
 80117c6:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80117ca:	edd1 7a00 	vldr	s15, [r1]
 80117ce:	4631      	mov	r1, r6
 80117d0:	ecf1 6a01 	vldmia	r1!, {s13}
 80117d4:	458b      	cmp	fp, r1
 80117d6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80117da:	f67f af6b 	bls.w	80116b4 <forward_dense+0x3b8>
 80117de:	f89c 1001 	ldrb.w	r1, [ip, #1]
 80117e2:	edd6 6a01 	vldr	s13, [r6, #4]
 80117e6:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80117ea:	edd1 7a00 	vldr	s15, [r1]
 80117ee:	f106 0108 	add.w	r1, r6, #8
 80117f2:	458b      	cmp	fp, r1
 80117f4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80117f8:	f67f af5c 	bls.w	80116b4 <forward_dense+0x3b8>
 80117fc:	f89c 1002 	ldrb.w	r1, [ip, #2]
 8011800:	edd6 6a02 	vldr	s13, [r6, #8]
 8011804:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8011808:	edd1 7a00 	vldr	s15, [r1]
 801180c:	f106 010c 	add.w	r1, r6, #12
 8011810:	458b      	cmp	fp, r1
 8011812:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011816:	f67f af4d 	bls.w	80116b4 <forward_dense+0x3b8>
 801181a:	f89c 1003 	ldrb.w	r1, [ip, #3]
 801181e:	edd6 6a03 	vldr	s13, [r6, #12]
 8011822:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8011826:	edd1 7a00 	vldr	s15, [r1]
 801182a:	f106 0110 	add.w	r1, r6, #16
 801182e:	458b      	cmp	fp, r1
 8011830:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011834:	f67f af3e 	bls.w	80116b4 <forward_dense+0x3b8>
 8011838:	f89c 1004 	ldrb.w	r1, [ip, #4]
 801183c:	edd6 6a04 	vldr	s13, [r6, #16]
 8011840:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8011844:	edd1 7a00 	vldr	s15, [r1]
 8011848:	f106 0114 	add.w	r1, r6, #20
 801184c:	458b      	cmp	fp, r1
 801184e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011852:	f67f af2f 	bls.w	80116b4 <forward_dense+0x3b8>
 8011856:	f89c 1005 	ldrb.w	r1, [ip, #5]
 801185a:	edd6 6a05 	vldr	s13, [r6, #20]
 801185e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8011862:	edd1 7a00 	vldr	s15, [r1]
 8011866:	f106 0118 	add.w	r1, r6, #24
 801186a:	458b      	cmp	fp, r1
 801186c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011870:	f67f af20 	bls.w	80116b4 <forward_dense+0x3b8>
 8011874:	f89c 1006 	ldrb.w	r1, [ip, #6]
 8011878:	edd6 6a06 	vldr	s13, [r6, #24]
 801187c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8011880:	edd1 7a00 	vldr	s15, [r1]
 8011884:	f106 011c 	add.w	r1, r6, #28
 8011888:	458b      	cmp	fp, r1
 801188a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801188e:	f67f af11 	bls.w	80116b4 <forward_dense+0x3b8>
 8011892:	f89c 1007 	ldrb.w	r1, [ip, #7]
 8011896:	edd6 6a07 	vldr	s13, [r6, #28]
 801189a:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801189e:	edd1 7a00 	vldr	s15, [r1]
 80118a2:	f106 0120 	add.w	r1, r6, #32
 80118a6:	458b      	cmp	fp, r1
 80118a8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80118ac:	f67f af02 	bls.w	80116b4 <forward_dense+0x3b8>
 80118b0:	f89c 1008 	ldrb.w	r1, [ip, #8]
 80118b4:	edd6 7a08 	vldr	s15, [r6, #32]
 80118b8:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80118bc:	edd1 6a00 	vldr	s13, [r1]
 80118c0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80118c4:	e6f6      	b.n	80116b4 <forward_dense+0x3b8>
 80118c6:	eeb0 7a48 	vmov.f32	s14, s16
 80118ca:	4650      	mov	r0, sl
 80118cc:	4611      	mov	r1, r2
 80118ce:	f811 5b01 	ldrb.w	r5, [r1], #1
 80118d2:	ecf0 7a01 	vldmia	r0!, {s15}
 80118d6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80118da:	edd5 6a00 	vldr	s13, [r5]
 80118de:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80118e2:	e6f5      	b.n	80116d0 <forward_dense+0x3d4>
 80118e4:	4611      	mov	r1, r2
 80118e6:	edda 7a00 	vldr	s15, [sl]
 80118ea:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80118ec:	f811 5b01 	ldrb.w	r5, [r1], #1
 80118f0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80118f4:	ed95 7a00 	vldr	s14, [r5]
 80118f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80118fc:	e7e7      	b.n	80118ce <forward_dense+0x5d2>
 80118fe:	9803      	ldr	r0, [sp, #12]
 8011900:	9906      	ldr	r1, [sp, #24]
 8011902:	4288      	cmp	r0, r1
 8011904:	f67f adda 	bls.w	80114bc <forward_dense+0x1c0>
 8011908:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801190a:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 801190e:	468b      	mov	fp, r1
 8011910:	f100 0c01 	add.w	ip, r0, #1
 8011914:	9805      	ldr	r0, [sp, #20]
 8011916:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 801191a:	3801      	subs	r0, #1
 801191c:	9008      	str	r0, [sp, #32]
 801191e:	2b00      	cmp	r3, #0
 8011920:	f000 80bf 	beq.w	8011aa2 <forward_dense+0x7a6>
 8011924:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011926:	ecf3 2a01 	vldmia	r3!, {s5}
 801192a:	ed1f 7a9a 	vldr	s14, [pc, #-616]	@ 80116c4 <forward_dense+0x3c8>
 801192e:	2900      	cmp	r1, #0
 8011930:	f000 80bf 	beq.w	8011ab2 <forward_dense+0x7b6>
 8011934:	1d10      	adds	r0, r2, #4
 8011936:	f10a 0120 	add.w	r1, sl, #32
 801193a:	f810 7c04 	ldrb.w	r7, [r0, #-4]
 801193e:	3004      	adds	r0, #4
 8011940:	ed11 2a07 	vldr	s4, [r1, #-28]	@ 0xffffffe4
 8011944:	3120      	adds	r1, #32
 8011946:	f007 0e0f 	and.w	lr, r7, #15
 801194a:	093f      	lsrs	r7, r7, #4
 801194c:	f810 6c07 	ldrb.w	r6, [r0, #-7]
 8011950:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
 8011954:	ed11 4a10 	vldr	s8, [r1, #-64]	@ 0xffffffc0
 8011958:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 801195c:	ed51 3a0e 	vldr	s7, [r1, #-56]	@ 0xffffffc8
 8011960:	edde 7a00 	vldr	s15, [lr]
 8011964:	ed97 3a00 	vldr	s6, [r7]
 8011968:	0937      	lsrs	r7, r6, #4
 801196a:	ee67 7a82 	vmul.f32	s15, s15, s4
 801196e:	f006 060f 	and.w	r6, r6, #15
 8011972:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8011976:	f810 5c06 	ldrb.w	r5, [r0, #-6]
 801197a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 801197e:	ed11 5a0d 	vldr	s10, [r1, #-52]	@ 0xffffffcc
 8011982:	eee3 7a04 	vfma.f32	s15, s6, s8
 8011986:	ed97 3a00 	vldr	s6, [r7]
 801198a:	ed96 4a00 	vldr	s8, [r6]
 801198e:	092e      	lsrs	r6, r5, #4
 8011990:	ed51 4a0c 	vldr	s9, [r1, #-48]	@ 0xffffffd0
 8011994:	f005 050f 	and.w	r5, r5, #15
 8011998:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 801199c:	ed11 6a0b 	vldr	s12, [r1, #-44]	@ 0xffffffd4
 80119a0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80119a4:	ed51 5a0a 	vldr	s11, [r1, #-40]	@ 0xffffffd8
 80119a8:	ed51 6a09 	vldr	s13, [r1, #-36]	@ 0xffffffdc
 80119ac:	eee3 7a23 	vfma.f32	s15, s6, s7
 80119b0:	eee4 7a05 	vfma.f32	s15, s8, s10
 80119b4:	ed96 4a00 	vldr	s8, [r6]
 80119b8:	ed95 5a00 	vldr	s10, [r5]
 80119bc:	f810 5c05 	ldrb.w	r5, [r0, #-5]
 80119c0:	4560      	cmp	r0, ip
 80119c2:	ea4f 1615 	mov.w	r6, r5, lsr #4
 80119c6:	f005 050f 	and.w	r5, r5, #15
 80119ca:	eee4 7a24 	vfma.f32	s15, s8, s9
 80119ce:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80119d2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80119d6:	eee5 7a06 	vfma.f32	s15, s10, s12
 80119da:	ed96 5a00 	vldr	s10, [r6]
 80119de:	ed95 6a00 	vldr	s12, [r5]
 80119e2:	eee5 7a25 	vfma.f32	s15, s10, s11
 80119e6:	eee6 7a26 	vfma.f32	s15, s12, s13
 80119ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80119ee:	d1a4      	bne.n	801193a <forward_dense+0x63e>
 80119f0:	f1ac 0804 	sub.w	r8, ip, #4
 80119f4:	f8dd e01c 	ldr.w	lr, [sp, #28]
 80119f8:	9905      	ldr	r1, [sp, #20]
 80119fa:	458e      	cmp	lr, r1
 80119fc:	d229      	bcs.n	8011a52 <forward_dense+0x756>
 80119fe:	9908      	ldr	r1, [sp, #32]
 8011a00:	f10e 0008 	add.w	r0, lr, #8
 8011a04:	f108 36ff 	add.w	r6, r8, #4294967295
 8011a08:	eba1 070e 	sub.w	r7, r1, lr
 8011a0c:	ea4f 09d7 	mov.w	r9, r7, lsr #3
 8011a10:	eb08 07d7 	add.w	r7, r8, r7, lsr #3
 8011a14:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011a18:	3008      	adds	r0, #8
 8011a1a:	ed50 5a03 	vldr	s11, [r0, #-12]
 8011a1e:	f001 050f 	and.w	r5, r1, #15
 8011a22:	0909      	lsrs	r1, r1, #4
 8011a24:	ed50 6a04 	vldr	s13, [r0, #-16]
 8011a28:	42b7      	cmp	r7, r6
 8011a2a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8011a2e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8011a32:	edd5 7a00 	vldr	s15, [r5]
 8011a36:	ed91 6a00 	vldr	s12, [r1]
 8011a3a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8011a3e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8011a42:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011a46:	d1e5      	bne.n	8011a14 <forward_dense+0x718>
 8011a48:	f109 0901 	add.w	r9, r9, #1
 8011a4c:	44c8      	add	r8, r9
 8011a4e:	eb0e 0ec9 	add.w	lr, lr, r9, lsl #3
 8011a52:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011a54:	b1c1      	cbz	r1, 8011a88 <forward_dense+0x78c>
 8011a56:	f898 1000 	ldrb.w	r1, [r8]
 8011a5a:	edde 7a00 	vldr	s15, [lr]
 8011a5e:	0909      	lsrs	r1, r1, #4
 8011a60:	9804      	ldr	r0, [sp, #16]
 8011a62:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8011a66:	4402      	add	r2, r0
 8011a68:	4484      	add	ip, r0
 8011a6a:	edd1 6a00 	vldr	s13, [r1]
 8011a6e:	9903      	ldr	r1, [sp, #12]
 8011a70:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011a74:	ee72 2a87 	vadd.f32	s5, s5, s14
 8011a78:	eceb 2a01 	vstmia	fp!, {s5}
 8011a7c:	4559      	cmp	r1, fp
 8011a7e:	f63f af4e 	bhi.w	801191e <forward_dense+0x622>
 8011a82:	f8dd b030 	ldr.w	fp, [sp, #48]	@ 0x30
 8011a86:	e510      	b.n	80114aa <forward_dense+0x1ae>
 8011a88:	9904      	ldr	r1, [sp, #16]
 8011a8a:	ee32 7a87 	vadd.f32	s14, s5, s14
 8011a8e:	440a      	add	r2, r1
 8011a90:	448c      	add	ip, r1
 8011a92:	9903      	ldr	r1, [sp, #12]
 8011a94:	ecab 7a01 	vstmia	fp!, {s14}
 8011a98:	458b      	cmp	fp, r1
 8011a9a:	d2f2      	bcs.n	8011a82 <forward_dense+0x786>
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	f47f af41 	bne.w	8011924 <forward_dense+0x628>
 8011aa2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011aa4:	eef0 2a48 	vmov.f32	s5, s16
 8011aa8:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8011b38 <forward_dense+0x83c>
 8011aac:	2900      	cmp	r1, #0
 8011aae:	f47f af41 	bne.w	8011934 <forward_dense+0x638>
 8011ab2:	46d6      	mov	lr, sl
 8011ab4:	4690      	mov	r8, r2
 8011ab6:	e79f      	b.n	80119f8 <forward_dense+0x6fc>
 8011ab8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8011aba:	4651      	mov	r1, sl
 8011abc:	9d06      	ldr	r5, [sp, #24]
 8011abe:	9001      	str	r0, [sp, #4]
 8011ac0:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8011ac2:	9000      	str	r0, [sp, #0]
 8011ac4:	4628      	mov	r0, r5
 8011ac6:	f000 fbe3 	bl	8012290 <forward_lite_dense_if32of32wf32>
 8011aca:	462b      	mov	r3, r5
 8011acc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011ace:	4413      	add	r3, r2
 8011ad0:	4619      	mov	r1, r3
 8011ad2:	9306      	str	r3, [sp, #24]
 8011ad4:	e4f2      	b.n	80114bc <forward_dense+0x1c0>
 8011ad6:	b01b      	add	sp, #108	@ 0x6c
 8011ad8:	ecbd 8b02 	vpop	{d8}
 8011adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ae0:	4601      	mov	r1, r0
 8011ae2:	e4eb      	b.n	80114bc <forward_dense+0x1c0>
 8011ae4:	4651      	mov	r1, sl
 8011ae6:	4610      	mov	r0, r2
 8011ae8:	e572      	b.n	80115d0 <forward_dense+0x2d4>
 8011aea:	f8d8 800c 	ldr.w	r8, [r8, #12]
 8011aee:	f1b9 0f00 	cmp.w	r9, #0
 8011af2:	d016      	beq.n	8011b22 <forward_dense+0x826>
 8011af4:	e9d9 0100 	ldrd	r0, r1, [r9]
 8011af8:	f000 fde6 	bl	80126c8 <ai_array_get_byte_size>
 8011afc:	f8d9 a00c 	ldr.w	sl, [r9, #12]
 8011b00:	4602      	mov	r2, r0
 8011b02:	4640      	mov	r0, r8
 8011b04:	4651      	mov	r1, sl
 8011b06:	f000 fceb 	bl	80124e0 <st_int8_copy>
 8011b0a:	e44b      	b.n	80113a4 <forward_dense+0xa8>
 8011b0c:	2b04      	cmp	r3, #4
 8011b0e:	d00a      	beq.n	8011b26 <forward_dense+0x82a>
 8011b10:	f04f 0900 	mov.w	r9, #0
 8011b14:	e441      	b.n	801139a <forward_dense+0x9e>
 8011b16:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011b18:	e417      	b.n	801134a <forward_dense+0x4e>
 8011b1a:	2300      	movs	r3, #0
 8011b1c:	930d      	str	r3, [sp, #52]	@ 0x34
 8011b1e:	460b      	mov	r3, r1
 8011b20:	e413      	b.n	801134a <forward_dense+0x4e>
 8011b22:	46c2      	mov	sl, r8
 8011b24:	e43e      	b.n	80113a4 <forward_dense+0xa8>
 8011b26:	f8d8 a00c 	ldr.w	sl, [r8, #12]
 8011b2a:	e43b      	b.n	80113a4 <forward_dense+0xa8>
 8011b2c:	2300      	movs	r3, #0
 8011b2e:	685b      	ldr	r3, [r3, #4]
 8011b30:	deff      	udf	#255	@ 0xff
 8011b32:	2300      	movs	r3, #0
 8011b34:	685b      	ldr	r3, [r3, #4]
 8011b36:	deff      	udf	#255	@ 0xff
 8011b38:	00000000 	.word	0x00000000

08011b3c <forward_relu>:
 8011b3c:	6982      	ldr	r2, [r0, #24]
 8011b3e:	8813      	ldrh	r3, [r2, #0]
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d05b      	beq.n	8011bfc <forward_relu+0xc0>
 8011b44:	6851      	ldr	r1, [r2, #4]
 8011b46:	684a      	ldr	r2, [r1, #4]
 8011b48:	b102      	cbz	r2, 8011b4c <forward_relu+0x10>
 8011b4a:	6812      	ldr	r2, [r2, #0]
 8011b4c:	2b01      	cmp	r3, #1
 8011b4e:	f000 8123 	beq.w	8011d98 <forward_relu+0x25c>
 8011b52:	b470      	push	{r4, r5, r6}
 8011b54:	690b      	ldr	r3, [r1, #16]
 8011b56:	b103      	cbz	r3, 8011b5a <forward_relu+0x1e>
 8011b58:	681b      	ldr	r3, [r3, #0]
 8011b5a:	69c6      	ldr	r6, [r0, #28]
 8011b5c:	2e00      	cmp	r6, #0
 8011b5e:	f000 809e 	beq.w	8011c9e <forward_relu+0x162>
 8011b62:	6871      	ldr	r1, [r6, #4]
 8011b64:	6998      	ldr	r0, [r3, #24]
 8011b66:	2901      	cmp	r1, #1
 8011b68:	f000 80c3 	beq.w	8011cf2 <forward_relu+0x1b6>
 8011b6c:	6893      	ldr	r3, [r2, #8]
 8011b6e:	6991      	ldr	r1, [r2, #24]
 8011b70:	0a1b      	lsrs	r3, r3, #8
 8011b72:	6880      	ldr	r0, [r0, #8]
 8011b74:	688d      	ldr	r5, [r1, #8]
 8011b76:	f000 80f2 	beq.w	8011d5e <forward_relu+0x222>
 8011b7a:	68d4      	ldr	r4, [r2, #12]
 8011b7c:	2201      	movs	r2, #1
 8011b7e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011b82:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011b86:	42a3      	cmp	r3, r4
 8011b88:	fb01 f202 	mul.w	r2, r1, r2
 8011b8c:	d1f9      	bne.n	8011b82 <forward_relu+0x46>
 8011b8e:	68b3      	ldr	r3, [r6, #8]
 8011b90:	ed93 7a02 	vldr	s14, [r3, #8]
 8011b94:	edd3 6a00 	vldr	s13, [r3]
 8011b98:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8011b9c:	ed93 6a01 	vldr	s12, [r3, #4]
 8011ba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ba4:	d42c      	bmi.n	8011c00 <forward_relu+0xc4>
 8011ba6:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8011baa:	4413      	add	r3, r2
 8011bac:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 8011bb0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8011bb4:	4295      	cmp	r5, r2
 8011bb6:	d81f      	bhi.n	8011bf8 <forward_relu+0xbc>
 8011bb8:	3204      	adds	r2, #4
 8011bba:	1d01      	adds	r1, r0, #4
 8011bbc:	e00d      	b.n	8011bda <forward_relu+0x9e>
 8011bbe:	eef4 6ae7 	vcmpe.f32	s13, s15
 8011bc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bc6:	db03      	blt.n	8011bd0 <forward_relu+0x94>
 8011bc8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011bcc:	ee67 7a86 	vmul.f32	s15, s15, s12
 8011bd0:	3b08      	subs	r3, #8
 8011bd2:	ed61 7a01 	vstmdb	r1!, {s15}
 8011bd6:	429d      	cmp	r5, r3
 8011bd8:	d80e      	bhi.n	8011bf8 <forward_relu+0xbc>
 8011bda:	4613      	mov	r3, r2
 8011bdc:	ed72 7a01 	vldmdb	r2!, {s15}
 8011be0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011be8:	d9e9      	bls.n	8011bbe <forward_relu+0x82>
 8011bea:	3b08      	subs	r3, #8
 8011bec:	eef0 7a47 	vmov.f32	s15, s14
 8011bf0:	429d      	cmp	r5, r3
 8011bf2:	ed61 7a01 	vstmdb	r1!, {s15}
 8011bf6:	d9f0      	bls.n	8011bda <forward_relu+0x9e>
 8011bf8:	bc70      	pop	{r4, r5, r6}
 8011bfa:	4770      	bx	lr
 8011bfc:	685b      	ldr	r3, [r3, #4]
 8011bfe:	deff      	udf	#255	@ 0xff
 8011c00:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8011c04:	f06f 4140 	mvn.w	r1, #3221225472	@ 0xc0000000
 8011c08:	4411      	add	r1, r2
 8011c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c0e:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8011c12:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8011c16:	d11f      	bne.n	8011c58 <forward_relu+0x11c>
 8011c18:	429d      	cmp	r5, r3
 8011c1a:	d8ed      	bhi.n	8011bf8 <forward_relu+0xbc>
 8011c1c:	1b5d      	subs	r5, r3, r5
 8011c1e:	1d1a      	adds	r2, r3, #4
 8011c20:	1d01      	adds	r1, r0, #4
 8011c22:	2000      	movs	r0, #0
 8011c24:	f025 0503 	bic.w	r5, r5, #3
 8011c28:	1b5b      	subs	r3, r3, r5
 8011c2a:	ed72 7a01 	vldmdb	r2!, {s15}
 8011c2e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c36:	dc0a      	bgt.n	8011c4e <forward_relu+0x112>
 8011c38:	429a      	cmp	r2, r3
 8011c3a:	f841 0d04 	str.w	r0, [r1, #-4]!
 8011c3e:	d0db      	beq.n	8011bf8 <forward_relu+0xbc>
 8011c40:	ed72 7a01 	vldmdb	r2!, {s15}
 8011c44:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c4c:	ddf4      	ble.n	8011c38 <forward_relu+0xfc>
 8011c4e:	429a      	cmp	r2, r3
 8011c50:	ed61 7a01 	vstmdb	r1!, {s15}
 8011c54:	d1e9      	bne.n	8011c2a <forward_relu+0xee>
 8011c56:	e7cf      	b.n	8011bf8 <forward_relu+0xbc>
 8011c58:	429d      	cmp	r5, r3
 8011c5a:	d8cd      	bhi.n	8011bf8 <forward_relu+0xbc>
 8011c5c:	1b5d      	subs	r5, r3, r5
 8011c5e:	1d1a      	adds	r2, r3, #4
 8011c60:	1d01      	adds	r1, r0, #4
 8011c62:	f025 0503 	bic.w	r5, r5, #3
 8011c66:	1b5b      	subs	r3, r3, r5
 8011c68:	ed72 7a01 	vldmdb	r2!, {s15}
 8011c6c:	eef4 6ae7 	vcmpe.f32	s13, s15
 8011c70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c74:	db0e      	blt.n	8011c94 <forward_relu+0x158>
 8011c76:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011c7a:	4293      	cmp	r3, r2
 8011c7c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8011c80:	ed61 7a01 	vstmdb	r1!, {s15}
 8011c84:	d0b8      	beq.n	8011bf8 <forward_relu+0xbc>
 8011c86:	ed72 7a01 	vldmdb	r2!, {s15}
 8011c8a:	eef4 6ae7 	vcmpe.f32	s13, s15
 8011c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c92:	daf0      	bge.n	8011c76 <forward_relu+0x13a>
 8011c94:	4293      	cmp	r3, r2
 8011c96:	ed61 7a01 	vstmdb	r1!, {s15}
 8011c9a:	d1e5      	bne.n	8011c68 <forward_relu+0x12c>
 8011c9c:	e7ac      	b.n	8011bf8 <forward_relu+0xbc>
 8011c9e:	6999      	ldr	r1, [r3, #24]
 8011ca0:	6893      	ldr	r3, [r2, #8]
 8011ca2:	6990      	ldr	r0, [r2, #24]
 8011ca4:	0a1b      	lsrs	r3, r3, #8
 8011ca6:	6889      	ldr	r1, [r1, #8]
 8011ca8:	6884      	ldr	r4, [r0, #8]
 8011caa:	d06e      	beq.n	8011d8a <forward_relu+0x24e>
 8011cac:	68d5      	ldr	r5, [r2, #12]
 8011cae:	2201      	movs	r2, #1
 8011cb0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8011cb4:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 8011cb8:	429d      	cmp	r5, r3
 8011cba:	fb00 f202 	mul.w	r2, r0, r2
 8011cbe:	d1f9      	bne.n	8011cb4 <forward_relu+0x178>
 8011cc0:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8011cc4:	4413      	add	r3, r2
 8011cc6:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8011cca:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8011cce:	4294      	cmp	r4, r2
 8011cd0:	d892      	bhi.n	8011bf8 <forward_relu+0xbc>
 8011cd2:	3204      	adds	r2, #4
 8011cd4:	3104      	adds	r1, #4
 8011cd6:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8011da0 <forward_relu+0x264>
 8011cda:	4613      	mov	r3, r2
 8011cdc:	ed72 7a01 	vldmdb	r2!, {s15}
 8011ce0:	3b08      	subs	r3, #8
 8011ce2:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8011ce6:	ed61 7a01 	vstmdb	r1!, {s15}
 8011cea:	429c      	cmp	r4, r3
 8011cec:	d9f5      	bls.n	8011cda <forward_relu+0x19e>
 8011cee:	bc70      	pop	{r4, r5, r6}
 8011cf0:	4770      	bx	lr
 8011cf2:	6993      	ldr	r3, [r2, #24]
 8011cf4:	6880      	ldr	r0, [r0, #8]
 8011cf6:	689c      	ldr	r4, [r3, #8]
 8011cf8:	6893      	ldr	r3, [r2, #8]
 8011cfa:	0a1b      	lsrs	r3, r3, #8
 8011cfc:	d047      	beq.n	8011d8e <forward_relu+0x252>
 8011cfe:	68d5      	ldr	r5, [r2, #12]
 8011d00:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8011d04:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8011d08:	42ab      	cmp	r3, r5
 8011d0a:	fb02 f101 	mul.w	r1, r2, r1
 8011d0e:	d1f9      	bne.n	8011d04 <forward_relu+0x1c8>
 8011d10:	f06f 4240 	mvn.w	r2, #3221225472	@ 0xc0000000
 8011d14:	68b3      	ldr	r3, [r6, #8]
 8011d16:	440a      	add	r2, r1
 8011d18:	ed93 7a00 	vldr	s14, [r3]
 8011d1c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011d20:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8011d24:	429c      	cmp	r4, r3
 8011d26:	f63f af67 	bhi.w	8011bf8 <forward_relu+0xbc>
 8011d2a:	1d02      	adds	r2, r0, #4
 8011d2c:	3304      	adds	r3, #4
 8011d2e:	2000      	movs	r0, #0
 8011d30:	ed53 7a01 	vldr	s15, [r3, #-4]
 8011d34:	1f19      	subs	r1, r3, #4
 8011d36:	3b08      	subs	r3, #8
 8011d38:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011d3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d40:	d406      	bmi.n	8011d50 <forward_relu+0x214>
 8011d42:	429c      	cmp	r4, r3
 8011d44:	f842 0d04 	str.w	r0, [r2, #-4]!
 8011d48:	f63f af56 	bhi.w	8011bf8 <forward_relu+0xbc>
 8011d4c:	460b      	mov	r3, r1
 8011d4e:	e7ef      	b.n	8011d30 <forward_relu+0x1f4>
 8011d50:	429c      	cmp	r4, r3
 8011d52:	ed62 7a01 	vstmdb	r2!, {s15}
 8011d56:	f63f af4f 	bhi.w	8011bf8 <forward_relu+0xbc>
 8011d5a:	460b      	mov	r3, r1
 8011d5c:	e7e8      	b.n	8011d30 <forward_relu+0x1f4>
 8011d5e:	68b3      	ldr	r3, [r6, #8]
 8011d60:	ed93 7a02 	vldr	s14, [r3, #8]
 8011d64:	edd3 6a00 	vldr	s13, [r3]
 8011d68:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8011d6c:	ed93 6a01 	vldr	s12, [r3, #4]
 8011d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d74:	d401      	bmi.n	8011d7a <forward_relu+0x23e>
 8011d76:	462a      	mov	r2, r5
 8011d78:	e71e      	b.n	8011bb8 <forward_relu+0x7c>
 8011d7a:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8011d7e:	462b      	mov	r3, r5
 8011d80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d84:	f47f af6a 	bne.w	8011c5c <forward_relu+0x120>
 8011d88:	e748      	b.n	8011c1c <forward_relu+0xe0>
 8011d8a:	4622      	mov	r2, r4
 8011d8c:	e7a1      	b.n	8011cd2 <forward_relu+0x196>
 8011d8e:	68b2      	ldr	r2, [r6, #8]
 8011d90:	4623      	mov	r3, r4
 8011d92:	ed92 7a00 	vldr	s14, [r2]
 8011d96:	e7c8      	b.n	8011d2a <forward_relu+0x1ee>
 8011d98:	2300      	movs	r3, #0
 8011d9a:	685b      	ldr	r3, [r3, #4]
 8011d9c:	deff      	udf	#255	@ 0xff
 8011d9e:	bf00      	nop
 8011da0:	00000000 	.word	0x00000000

08011da4 <ai_conv2d_kernel_simple_opt_f32.constprop.0>:
 8011da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011da8:	ed2d 8b0c 	vpush	{d8-d13}
 8011dac:	b08d      	sub	sp, #52	@ 0x34
 8011dae:	461d      	mov	r5, r3
 8011db0:	9003      	str	r0, [sp, #12]
 8011db2:	9207      	str	r2, [sp, #28]
 8011db4:	9c24      	ldr	r4, [sp, #144]	@ 0x90
 8011db6:	9308      	str	r3, [sp, #32]
 8011db8:	f8dd b09c 	ldr.w	fp, [sp, #156]	@ 0x9c
 8011dbc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8011dbe:	910b      	str	r1, [sp, #44]	@ 0x2c
 8011dc0:	e9dd 0225 	ldrd	r0, r2, [sp, #148]	@ 0x94
 8011dc4:	fb00 f002 	mul.w	r0, r0, r2
 8011dc8:	9004      	str	r0, [sp, #16]
 8011dca:	f8bd 00a4 	ldrh.w	r0, [sp, #164]	@ 0xa4
 8011dce:	9009      	str	r0, [sp, #36]	@ 0x24
 8011dd0:	2c00      	cmp	r4, #0
 8011dd2:	f000 80ed 	beq.w	8011fb0 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x20c>
 8011dd6:	009c      	lsls	r4, r3, #2
 8011dd8:	fb00 f305 	mul.w	r3, r0, r5
 8011ddc:	009b      	lsls	r3, r3, #2
 8011dde:	9405      	str	r4, [sp, #20]
 8011de0:	9306      	str	r3, [sp, #24]
 8011de2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8011de4:	fb03 f305 	mul.w	r3, r3, r5
 8011de8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8011dec:	9301      	str	r3, [sp, #4]
 8011dee:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8011df0:	425b      	negs	r3, r3
 8011df2:	9300      	str	r3, [sp, #0]
 8011df4:	2300      	movs	r3, #0
 8011df6:	9302      	str	r3, [sp, #8]
 8011df8:	00ab      	lsls	r3, r5, #2
 8011dfa:	930a      	str	r3, [sp, #40]	@ 0x28
 8011dfc:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	f2c0 80dd 	blt.w	8011fbe <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x21a>
 8011e04:	9e01      	ldr	r6, [sp, #4]
 8011e06:	2000      	movs	r0, #0
 8011e08:	9d04      	ldr	r5, [sp, #16]
 8011e0a:	9b07      	ldr	r3, [sp, #28]
 8011e0c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011e0e:	9900      	ldr	r1, [sp, #0]
 8011e10:	fb05 3502 	mla	r5, r5, r2, r3
 8011e14:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011e16:	440b      	add	r3, r1
 8011e18:	9925      	ldr	r1, [sp, #148]	@ 0x94
 8011e1a:	428b      	cmp	r3, r1
 8011e1c:	bf94      	ite	ls
 8011e1e:	ebc0 0003 	rsbls	r0, r0, r3
 8011e22:	ebc0 0001 	rsbhi	r0, r0, r1
 8011e26:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011e28:	f1bb 0f00 	cmp.w	fp, #0
 8011e2c:	eba3 0a00 	sub.w	sl, r3, r0
 8011e30:	9b08      	ldr	r3, [sp, #32]
 8011e32:	eba1 0900 	sub.w	r9, r1, r0
 8011e36:	fb03 f000 	mul.w	r0, r3, r0
 8011e3a:	f340 80c6 	ble.w	8011fca <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x226>
 8011e3e:	f020 040f 	bic.w	r4, r0, #15
 8011e42:	eeb0 7a40 	vmov.f32	s14, s0
 8011e46:	fb02 fa0a 	mul.w	sl, r2, sl
 8011e4a:	f04f 0c00 	mov.w	ip, #0
 8011e4e:	f104 38ff 	add.w	r8, r4, #4294967295
 8011e52:	fb02 f909 	mul.w	r9, r2, r9
 8011e56:	ea4f 1818 	mov.w	r8, r8, lsr #4
 8011e5a:	f108 0801 	add.w	r8, r8, #1
 8011e5e:	ea4f 1e88 	mov.w	lr, r8, lsl #6
 8011e62:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8011e66:	2c00      	cmp	r4, #0
 8011e68:	f340 80a7 	ble.w	8011fba <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x216>
 8011e6c:	f106 0240 	add.w	r2, r6, #64	@ 0x40
 8011e70:	f105 0340 	add.w	r3, r5, #64	@ 0x40
 8011e74:	2100      	movs	r1, #0
 8011e76:	ed53 6a0f 	vldr	s13, [r3, #-60]	@ 0xffffffc4
 8011e7a:	3110      	adds	r1, #16
 8011e7c:	ed52 7a0f 	vldr	s15, [r2, #-60]	@ 0xffffffc4
 8011e80:	3340      	adds	r3, #64	@ 0x40
 8011e82:	ed52 4a10 	vldr	s9, [r2, #-64]	@ 0xffffffc0
 8011e86:	42a1      	cmp	r1, r4
 8011e88:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011e8c:	ed13 5a20 	vldr	s10, [r3, #-128]	@ 0xffffff80
 8011e90:	ed52 5a0e 	vldr	s11, [r2, #-56]	@ 0xffffffc8
 8011e94:	f102 0240 	add.w	r2, r2, #64	@ 0x40
 8011e98:	ed13 6a1e 	vldr	s12, [r3, #-120]	@ 0xffffff88
 8011e9c:	eee4 7a85 	vfma.f32	s15, s9, s10
 8011ea0:	ed53 6a1d 	vldr	s13, [r3, #-116]	@ 0xffffff8c
 8011ea4:	ed52 da1d 	vldr	s27, [r2, #-116]	@ 0xffffff8c
 8011ea8:	ed12 da1c 	vldr	s26, [r2, #-112]	@ 0xffffff90
 8011eac:	ed53 ca1c 	vldr	s25, [r3, #-112]	@ 0xffffff90
 8011eb0:	ed12 ca1b 	vldr	s24, [r2, #-108]	@ 0xffffff94
 8011eb4:	ed53 ba1b 	vldr	s23, [r3, #-108]	@ 0xffffff94
 8011eb8:	eee5 7a86 	vfma.f32	s15, s11, s12
 8011ebc:	ed12 ba1a 	vldr	s22, [r2, #-104]	@ 0xffffff98
 8011ec0:	ed53 aa1a 	vldr	s21, [r3, #-104]	@ 0xffffff98
 8011ec4:	ed12 aa19 	vldr	s20, [r2, #-100]	@ 0xffffff9c
 8011ec8:	ed53 9a19 	vldr	s19, [r3, #-100]	@ 0xffffff9c
 8011ecc:	ed12 9a18 	vldr	s18, [r2, #-96]	@ 0xffffffa0
 8011ed0:	ed53 8a18 	vldr	s17, [r3, #-96]	@ 0xffffffa0
 8011ed4:	eeed 7aa6 	vfma.f32	s15, s27, s13
 8011ed8:	ed12 8a17 	vldr	s16, [r2, #-92]	@ 0xffffffa4
 8011edc:	ed53 0a17 	vldr	s1, [r3, #-92]	@ 0xffffffa4
 8011ee0:	ed12 1a16 	vldr	s2, [r2, #-88]	@ 0xffffffa8
 8011ee4:	ed53 1a16 	vldr	s3, [r3, #-88]	@ 0xffffffa8
 8011ee8:	ed12 2a15 	vldr	s4, [r2, #-84]	@ 0xffffffac
 8011eec:	ed53 2a15 	vldr	s5, [r3, #-84]	@ 0xffffffac
 8011ef0:	eeed 7a2c 	vfma.f32	s15, s26, s25
 8011ef4:	ed12 3a14 	vldr	s6, [r2, #-80]	@ 0xffffffb0
 8011ef8:	ed53 3a14 	vldr	s7, [r3, #-80]	@ 0xffffffb0
 8011efc:	ed12 4a13 	vldr	s8, [r2, #-76]	@ 0xffffffb4
 8011f00:	ed53 4a13 	vldr	s9, [r3, #-76]	@ 0xffffffb4
 8011f04:	ed12 5a12 	vldr	s10, [r2, #-72]	@ 0xffffffb8
 8011f08:	ed53 5a12 	vldr	s11, [r3, #-72]	@ 0xffffffb8
 8011f0c:	eeec 7a2b 	vfma.f32	s15, s24, s23
 8011f10:	ed12 6a11 	vldr	s12, [r2, #-68]	@ 0xffffffbc
 8011f14:	ed53 6a11 	vldr	s13, [r3, #-68]	@ 0xffffffbc
 8011f18:	eeeb 7a2a 	vfma.f32	s15, s22, s21
 8011f1c:	eeea 7a29 	vfma.f32	s15, s20, s19
 8011f20:	eee9 7a28 	vfma.f32	s15, s18, s17
 8011f24:	eee8 7a20 	vfma.f32	s15, s16, s1
 8011f28:	eee1 7a21 	vfma.f32	s15, s2, s3
 8011f2c:	eee2 7a22 	vfma.f32	s15, s4, s5
 8011f30:	eee3 7a23 	vfma.f32	s15, s6, s7
 8011f34:	eee4 7a24 	vfma.f32	s15, s8, s9
 8011f38:	eee5 7a25 	vfma.f32	s15, s10, s11
 8011f3c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8011f40:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011f44:	db97      	blt.n	8011e76 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0xd2>
 8011f46:	4476      	add	r6, lr
 8011f48:	4475      	add	r5, lr
 8011f4a:	4647      	mov	r7, r8
 8011f4c:	42b8      	cmp	r0, r7
 8011f4e:	dd10      	ble.n	8011f72 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1ce>
 8011f50:	463b      	mov	r3, r7
 8011f52:	4631      	mov	r1, r6
 8011f54:	462a      	mov	r2, r5
 8011f56:	3301      	adds	r3, #1
 8011f58:	ecf2 6a01 	vldmia	r2!, {s13}
 8011f5c:	ecf1 7a01 	vldmia	r1!, {s15}
 8011f60:	4298      	cmp	r0, r3
 8011f62:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011f66:	d1f6      	bne.n	8011f56 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1b2>
 8011f68:	1bc7      	subs	r7, r0, r7
 8011f6a:	eb05 0587 	add.w	r5, r5, r7, lsl #2
 8011f6e:	eb06 0687 	add.w	r6, r6, r7, lsl #2
 8011f72:	f10c 0c01 	add.w	ip, ip, #1
 8011f76:	4456      	add	r6, sl
 8011f78:	444d      	add	r5, r9
 8011f7a:	45dc      	cmp	ip, fp
 8011f7c:	f47f af73 	bne.w	8011e66 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0xc2>
 8011f80:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8011f82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011f84:	9a03      	ldr	r2, [sp, #12]
 8011f86:	4401      	add	r1, r0
 8011f88:	9b02      	ldr	r3, [sp, #8]
 8011f8a:	ed82 7a00 	vstr	s14, [r2]
 8011f8e:	9128      	str	r1, [sp, #160]	@ 0xa0
 8011f90:	3301      	adds	r3, #1
 8011f92:	9905      	ldr	r1, [sp, #20]
 8011f94:	9302      	str	r3, [sp, #8]
 8011f96:	440a      	add	r2, r1
 8011f98:	9906      	ldr	r1, [sp, #24]
 8011f9a:	9203      	str	r2, [sp, #12]
 8011f9c:	9a00      	ldr	r2, [sp, #0]
 8011f9e:	1a12      	subs	r2, r2, r0
 8011fa0:	9200      	str	r2, [sp, #0]
 8011fa2:	9a01      	ldr	r2, [sp, #4]
 8011fa4:	440a      	add	r2, r1
 8011fa6:	9201      	str	r2, [sp, #4]
 8011fa8:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8011faa:	4293      	cmp	r3, r2
 8011fac:	f47f af26 	bne.w	8011dfc <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x58>
 8011fb0:	b00d      	add	sp, #52	@ 0x34
 8011fb2:	ecbd 8b0c 	vpop	{d8-d13}
 8011fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fba:	2700      	movs	r7, #0
 8011fbc:	e7c6      	b.n	8011f4c <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1a8>
 8011fbe:	9a00      	ldr	r2, [sp, #0]
 8011fc0:	9b04      	ldr	r3, [sp, #16]
 8011fc2:	4610      	mov	r0, r2
 8011fc4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8011fc6:	189d      	adds	r5, r3, r2
 8011fc8:	e71f      	b.n	8011e0a <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x66>
 8011fca:	eeb0 7a40 	vmov.f32	s14, s0
 8011fce:	e7d7      	b.n	8011f80 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1dc>

08011fd0 <forward_lite_conv2d_if32of32wf32>:
 8011fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fd4:	ed2d 8b02 	vpush	{d8}
 8011fd8:	b09f      	sub	sp, #124	@ 0x7c
 8011fda:	4686      	mov	lr, r0
 8011fdc:	4694      	mov	ip, r2
 8011fde:	af08      	add	r7, sp, #32
 8011fe0:	f8b7 40b0 	ldrh.w	r4, [r7, #176]	@ 0xb0
 8011fe4:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8011fe6:	f8b7 10ac 	ldrh.w	r1, [r7, #172]	@ 0xac
 8011fea:	f8b7 50b4 	ldrh.w	r5, [r7, #180]	@ 0xb4
 8011fee:	424e      	negs	r6, r1
 8011ff0:	64fc      	str	r4, [r7, #76]	@ 0x4c
 8011ff2:	f8d7 409c 	ldr.w	r4, [r7, #156]	@ 0x9c
 8011ff6:	6078      	str	r0, [r7, #4]
 8011ff8:	613a      	str	r2, [r7, #16]
 8011ffa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011ffc:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8012000:	f8b7 00a8 	ldrh.w	r0, [r7, #168]	@ 0xa8
 8012004:	617d      	str	r5, [r7, #20]
 8012006:	633e      	str	r6, [r7, #48]	@ 0x30
 8012008:	e9d7 3a22 	ldrd	r3, sl, [r7, #136]	@ 0x88
 801200c:	2c00      	cmp	r4, #0
 801200e:	f000 8092 	beq.w	8012136 <forward_lite_conv2d_if32of32wf32+0x166>
 8012012:	f8d7 40a0 	ldr.w	r4, [r7, #160]	@ 0xa0
 8012016:	6379      	str	r1, [r7, #52]	@ 0x34
 8012018:	fb04 f202 	mul.w	r2, r4, r2
 801201c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8012020:	4244      	negs	r4, r0
 8012022:	ed9f 8a9a 	vldr	s16, [pc, #616]	@ 801228c <forward_lite_conv2d_if32of32wf32+0x2bc>
 8012026:	653c      	str	r4, [r7, #80]	@ 0x50
 8012028:	fb03 f402 	mul.w	r4, r3, r2
 801202c:	fb03 f201 	mul.w	r2, r3, r1
 8012030:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8012034:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8012038:	63bc      	str	r4, [r7, #56]	@ 0x38
 801203a:	fb01 f10a 	mul.w	r1, r1, sl
 801203e:	0089      	lsls	r1, r1, #2
 8012040:	61b9      	str	r1, [r7, #24]
 8012042:	fb05 f102 	mul.w	r1, r5, r2
 8012046:	4655      	mov	r5, sl
 8012048:	fb06 f202 	mul.w	r2, r6, r2
 801204c:	46da      	mov	sl, fp
 801204e:	0089      	lsls	r1, r1, #2
 8012050:	61f9      	str	r1, [r7, #28]
 8012052:	eb0e 0182 	add.w	r1, lr, r2, lsl #2
 8012056:	f10b 0207 	add.w	r2, fp, #7
 801205a:	62b9      	str	r1, [r7, #40]	@ 0x28
 801205c:	f022 0107 	bic.w	r1, r2, #7
 8012060:	eb0c 0284 	add.w	r2, ip, r4, lsl #2
 8012064:	60f9      	str	r1, [r7, #12]
 8012066:	f10c 4178 	add.w	r1, ip, #4160749568	@ 0xf8000000
 801206a:	60ba      	str	r2, [r7, #8]
 801206c:	2200      	movs	r2, #0
 801206e:	6239      	str	r1, [r7, #32]
 8012070:	627a      	str	r2, [r7, #36]	@ 0x24
 8012072:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012074:	2a00      	cmp	r2, #0
 8012076:	f2c0 80d5 	blt.w	8012224 <forward_lite_conv2d_if32of32wf32+0x254>
 801207a:	2200      	movs	r2, #0
 801207c:	f8d7 b028 	ldr.w	fp, [r7, #40]	@ 0x28
 8012080:	657a      	str	r2, [r7, #84]	@ 0x54
 8012082:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8012084:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8012088:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 801208c:	440a      	add	r2, r1
 801208e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8012090:	4282      	cmp	r2, r0
 8012092:	bf94      	ite	ls
 8012094:	ebc1 0102 	rsbls	r1, r1, r2
 8012098:	ebc1 0100 	rsbhi	r1, r1, r0
 801209c:	6a3a      	ldr	r2, [r7, #32]
 801209e:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 80120a2:	6439      	str	r1, [r7, #64]	@ 0x40
 80120a4:	d24d      	bcs.n	8012142 <forward_lite_conv2d_if32of32wf32+0x172>
 80120a6:	b385      	cbz	r5, 801210a <forward_lite_conv2d_if32of32wf32+0x13a>
 80120a8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80120aa:	2a00      	cmp	r2, #0
 80120ac:	f000 80bf 	beq.w	801222e <forward_lite_conv2d_if32of32wf32+0x25e>
 80120b0:	4659      	mov	r1, fp
 80120b2:	4691      	mov	r9, r2
 80120b4:	46d3      	mov	fp, sl
 80120b6:	f8d7 802c 	ldr.w	r8, [r7, #44]	@ 0x2c
 80120ba:	693e      	ldr	r6, [r7, #16]
 80120bc:	2400      	movs	r4, #0
 80120be:	f8d7 a040 	ldr.w	sl, [r7, #64]	@ 0x40
 80120c2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80120c4:	3401      	adds	r4, #1
 80120c6:	ecb9 0a01 	vldmia	r9!, {s0}
 80120ca:	4640      	mov	r0, r8
 80120cc:	9207      	str	r2, [sp, #28]
 80120ce:	f108 0804 	add.w	r8, r8, #4
 80120d2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80120d4:	e9cd a205 	strd	sl, r2, [sp, #20]
 80120d8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80120da:	9204      	str	r2, [sp, #16]
 80120dc:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 80120e0:	9203      	str	r2, [sp, #12]
 80120e2:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80120e6:	9202      	str	r2, [sp, #8]
 80120e8:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80120ec:	e9cd 5200 	strd	r5, r2, [sp]
 80120f0:	4632      	mov	r2, r6
 80120f2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80120f6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80120f8:	445e      	add	r6, fp
 80120fa:	f7ff fe53 	bl	8011da4 <ai_conv2d_kernel_simple_opt_f32.constprop.0>
 80120fe:	42a5      	cmp	r5, r4
 8012100:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8012102:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8012106:	d1dc      	bne.n	80120c2 <forward_lite_conv2d_if32of32wf32+0xf2>
 8012108:	46da      	mov	sl, fp
 801210a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801210c:	69b8      	ldr	r0, [r7, #24]
 801210e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012110:	4401      	add	r1, r0
 8012112:	6978      	ldr	r0, [r7, #20]
 8012114:	3201      	adds	r2, #1
 8012116:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8012118:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801211a:	627a      	str	r2, [r7, #36]	@ 0x24
 801211c:	4401      	add	r1, r0
 801211e:	6339      	str	r1, [r7, #48]	@ 0x30
 8012120:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8012122:	1a09      	subs	r1, r1, r0
 8012124:	69f8      	ldr	r0, [r7, #28]
 8012126:	6379      	str	r1, [r7, #52]	@ 0x34
 8012128:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801212a:	4401      	add	r1, r0
 801212c:	62b9      	str	r1, [r7, #40]	@ 0x28
 801212e:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8012132:	4291      	cmp	r1, r2
 8012134:	d19d      	bne.n	8012072 <forward_lite_conv2d_if32of32wf32+0xa2>
 8012136:	375c      	adds	r7, #92	@ 0x5c
 8012138:	46bd      	mov	sp, r7
 801213a:	ecbd 8b02 	vpop	{d8}
 801213e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012142:	466a      	mov	r2, sp
 8012144:	ee08 2a90 	vmov	s17, r2
 8012148:	68fa      	ldr	r2, [r7, #12]
 801214a:	ebad 0d02 	sub.w	sp, sp, r2
 801214e:	aa08      	add	r2, sp, #32
 8012150:	2d00      	cmp	r5, #0
 8012152:	d03d      	beq.n	80121d0 <forward_lite_conv2d_if32of32wf32+0x200>
 8012154:	6938      	ldr	r0, [r7, #16]
 8012156:	4659      	mov	r1, fp
 8012158:	68bc      	ldr	r4, [r7, #8]
 801215a:	46ab      	mov	fp, r5
 801215c:	f8d7 902c 	ldr.w	r9, [r7, #44]	@ 0x2c
 8012160:	f04f 0800 	mov.w	r8, #0
 8012164:	6bfe      	ldr	r6, [r7, #60]	@ 0x3c
 8012166:	4605      	mov	r5, r0
 8012168:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801216a:	b138      	cbz	r0, 801217c <forward_lite_conv2d_if32of32wf32+0x1ac>
 801216c:	4628      	mov	r0, r5
 801216e:	4694      	mov	ip, r2
 8012170:	f850 eb04 	ldr.w	lr, [r0], #4
 8012174:	42a0      	cmp	r0, r4
 8012176:	f84c eb04 	str.w	lr, [ip], #4
 801217a:	d1f9      	bne.n	8012170 <forward_lite_conv2d_if32of32wf32+0x1a0>
 801217c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 801217e:	f108 0801 	add.w	r8, r8, #1
 8012182:	b348      	cbz	r0, 80121d8 <forward_lite_conv2d_if32of32wf32+0x208>
 8012184:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8012186:	4455      	add	r5, sl
 8012188:	ecb6 0a01 	vldmia	r6!, {s0}
 801218c:	4454      	add	r4, sl
 801218e:	9007      	str	r0, [sp, #28]
 8012190:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8012192:	9006      	str	r0, [sp, #24]
 8012194:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8012196:	9005      	str	r0, [sp, #20]
 8012198:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801219a:	9004      	str	r0, [sp, #16]
 801219c:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 80121a0:	9003      	str	r0, [sp, #12]
 80121a2:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 80121a6:	9002      	str	r0, [sp, #8]
 80121a8:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 80121ac:	e9cd b000 	strd	fp, r0, [sp]
 80121b0:	4648      	mov	r0, r9
 80121b2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80121b6:	f109 0904 	add.w	r9, r9, #4
 80121ba:	e9c7 2111 	strd	r2, r1, [r7, #68]	@ 0x44
 80121be:	f7ff fdf1 	bl	8011da4 <ai_conv2d_kernel_simple_opt_f32.constprop.0>
 80121c2:	45d8      	cmp	r8, fp
 80121c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80121c8:	e9d7 2111 	ldrd	r2, r1, [r7, #68]	@ 0x44
 80121cc:	d1cc      	bne.n	8012168 <forward_lite_conv2d_if32of32wf32+0x198>
 80121ce:	465d      	mov	r5, fp
 80121d0:	ee18 2a90 	vmov	r2, s17
 80121d4:	4695      	mov	sp, r2
 80121d6:	e798      	b.n	801210a <forward_lite_conv2d_if32of32wf32+0x13a>
 80121d8:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80121da:	eeb0 0a48 	vmov.f32	s0, s16
 80121de:	4455      	add	r5, sl
 80121e0:	4454      	add	r4, sl
 80121e2:	9007      	str	r0, [sp, #28]
 80121e4:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80121e6:	9006      	str	r0, [sp, #24]
 80121e8:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80121ea:	9005      	str	r0, [sp, #20]
 80121ec:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80121ee:	9004      	str	r0, [sp, #16]
 80121f0:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 80121f4:	9003      	str	r0, [sp, #12]
 80121f6:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 80121fa:	9002      	str	r0, [sp, #8]
 80121fc:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8012200:	e9cd b000 	strd	fp, r0, [sp]
 8012204:	4648      	mov	r0, r9
 8012206:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801220a:	f109 0904 	add.w	r9, r9, #4
 801220e:	e9c7 2111 	strd	r2, r1, [r7, #68]	@ 0x44
 8012212:	f7ff fdc7 	bl	8011da4 <ai_conv2d_kernel_simple_opt_f32.constprop.0>
 8012216:	45c3      	cmp	fp, r8
 8012218:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801221c:	e9d7 2111 	ldrd	r2, r1, [r7, #68]	@ 0x44
 8012220:	d1a2      	bne.n	8012168 <forward_lite_conv2d_if32of32wf32+0x198>
 8012222:	e7d4      	b.n	80121ce <forward_lite_conv2d_if32of32wf32+0x1fe>
 8012224:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012226:	f8d7 b004 	ldr.w	fp, [r7, #4]
 801222a:	657a      	str	r2, [r7, #84]	@ 0x54
 801222c:	e729      	b.n	8012082 <forward_lite_conv2d_if32of32wf32+0xb2>
 801222e:	4659      	mov	r1, fp
 8012230:	f8d7 802c 	ldr.w	r8, [r7, #44]	@ 0x2c
 8012234:	46d3      	mov	fp, sl
 8012236:	693e      	ldr	r6, [r7, #16]
 8012238:	4614      	mov	r4, r2
 801223a:	f8d7 9054 	ldr.w	r9, [r7, #84]	@ 0x54
 801223e:	f8d7 a040 	ldr.w	sl, [r7, #64]	@ 0x40
 8012242:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012244:	3401      	adds	r4, #1
 8012246:	4640      	mov	r0, r8
 8012248:	eeb0 0a48 	vmov.f32	s0, s16
 801224c:	9207      	str	r2, [sp, #28]
 801224e:	f108 0804 	add.w	r8, r8, #4
 8012252:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012254:	f8cd 9010 	str.w	r9, [sp, #16]
 8012258:	e9cd a205 	strd	sl, r2, [sp, #20]
 801225c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8012260:	9203      	str	r2, [sp, #12]
 8012262:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8012266:	9202      	str	r2, [sp, #8]
 8012268:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 801226c:	e9cd 5200 	strd	r5, r2, [sp]
 8012270:	4632      	mov	r2, r6
 8012272:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8012276:	6579      	str	r1, [r7, #84]	@ 0x54
 8012278:	445e      	add	r6, fp
 801227a:	f7ff fd93 	bl	8011da4 <ai_conv2d_kernel_simple_opt_f32.constprop.0>
 801227e:	42a5      	cmp	r5, r4
 8012280:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8012282:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8012286:	d1dc      	bne.n	8012242 <forward_lite_conv2d_if32of32wf32+0x272>
 8012288:	e73e      	b.n	8012108 <forward_lite_conv2d_if32of32wf32+0x138>
 801228a:	bf00      	nop
 801228c:	00000000 	.word	0x00000000

08012290 <forward_lite_dense_if32of32wf32>:
 8012290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012294:	ed2d 8b0c 	vpush	{d8-d13}
 8012298:	e9dd 6415 	ldrd	r6, r4, [sp, #84]	@ 0x54
 801229c:	eb00 0784 	add.w	r7, r0, r4, lsl #2
 80122a0:	4287      	cmp	r7, r0
 80122a2:	f240 8105 	bls.w	80124b0 <forward_lite_dense_if32of32wf32+0x220>
 80122a6:	f1a6 0810 	sub.w	r8, r6, #16
 80122aa:	ea4f 0986 	mov.w	r9, r6, lsl #2
 80122ae:	4605      	mov	r5, r0
 80122b0:	f006 0b0f 	and.w	fp, r6, #15
 80122b4:	ea4f 1818 	mov.w	r8, r8, lsr #4
 80122b8:	f108 0801 	add.w	r8, r8, #1
 80122bc:	ea4f 1a88 	mov.w	sl, r8, lsl #6
 80122c0:	eb01 1888 	add.w	r8, r1, r8, lsl #6
 80122c4:	2e0f      	cmp	r6, #15
 80122c6:	ed9f 7a85 	vldr	s14, [pc, #532]	@ 80124dc <forward_lite_dense_if32of32wf32+0x24c>
 80122ca:	f240 8102 	bls.w	80124d2 <forward_lite_dense_if32of32wf32+0x242>
 80122ce:	f101 0c40 	add.w	ip, r1, #64	@ 0x40
 80122d2:	f102 0440 	add.w	r4, r2, #64	@ 0x40
 80122d6:	46b6      	mov	lr, r6
 80122d8:	ed54 6a0f 	vldr	s13, [r4, #-60]	@ 0xffffffc4
 80122dc:	f1ae 0e10 	sub.w	lr, lr, #16
 80122e0:	ed5c 7a0f 	vldr	s15, [ip, #-60]	@ 0xffffffc4
 80122e4:	3440      	adds	r4, #64	@ 0x40
 80122e6:	ed5c 4a10 	vldr	s9, [ip, #-64]	@ 0xffffffc0
 80122ea:	f1be 0f0f 	cmp.w	lr, #15
 80122ee:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80122f2:	ed14 5a20 	vldr	s10, [r4, #-128]	@ 0xffffff80
 80122f6:	ed5c 5a0e 	vldr	s11, [ip, #-56]	@ 0xffffffc8
 80122fa:	f10c 0c40 	add.w	ip, ip, #64	@ 0x40
 80122fe:	ed14 6a1e 	vldr	s12, [r4, #-120]	@ 0xffffff88
 8012302:	eee4 7a85 	vfma.f32	s15, s9, s10
 8012306:	ed54 6a1d 	vldr	s13, [r4, #-116]	@ 0xffffff8c
 801230a:	ed1c da1d 	vldr	s26, [ip, #-116]	@ 0xffffff8c
 801230e:	ed5c ca1c 	vldr	s25, [ip, #-112]	@ 0xffffff90
 8012312:	ed14 ca1c 	vldr	s24, [r4, #-112]	@ 0xffffff90
 8012316:	ed5c ba1b 	vldr	s23, [ip, #-108]	@ 0xffffff94
 801231a:	ed14 ba1b 	vldr	s22, [r4, #-108]	@ 0xffffff94
 801231e:	eee5 7a86 	vfma.f32	s15, s11, s12
 8012322:	ed5c aa1a 	vldr	s21, [ip, #-104]	@ 0xffffff98
 8012326:	ed14 aa1a 	vldr	s20, [r4, #-104]	@ 0xffffff98
 801232a:	ed5c 9a19 	vldr	s19, [ip, #-100]	@ 0xffffff9c
 801232e:	ed14 9a19 	vldr	s18, [r4, #-100]	@ 0xffffff9c
 8012332:	ed5c 8a18 	vldr	s17, [ip, #-96]	@ 0xffffffa0
 8012336:	ed14 8a18 	vldr	s16, [r4, #-96]	@ 0xffffffa0
 801233a:	eeed 7a26 	vfma.f32	s15, s26, s13
 801233e:	ed1c 0a17 	vldr	s0, [ip, #-92]	@ 0xffffffa4
 8012342:	ed54 0a17 	vldr	s1, [r4, #-92]	@ 0xffffffa4
 8012346:	ed1c 1a16 	vldr	s2, [ip, #-88]	@ 0xffffffa8
 801234a:	ed54 1a16 	vldr	s3, [r4, #-88]	@ 0xffffffa8
 801234e:	ed1c 2a15 	vldr	s4, [ip, #-84]	@ 0xffffffac
 8012352:	ed54 2a15 	vldr	s5, [r4, #-84]	@ 0xffffffac
 8012356:	eeec 7a8c 	vfma.f32	s15, s25, s24
 801235a:	ed1c 3a14 	vldr	s6, [ip, #-80]	@ 0xffffffb0
 801235e:	ed54 3a14 	vldr	s7, [r4, #-80]	@ 0xffffffb0
 8012362:	ed1c 4a13 	vldr	s8, [ip, #-76]	@ 0xffffffb4
 8012366:	ed54 4a13 	vldr	s9, [r4, #-76]	@ 0xffffffb4
 801236a:	ed1c 5a12 	vldr	s10, [ip, #-72]	@ 0xffffffb8
 801236e:	ed54 5a12 	vldr	s11, [r4, #-72]	@ 0xffffffb8
 8012372:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8012376:	ed1c 6a11 	vldr	s12, [ip, #-68]	@ 0xffffffbc
 801237a:	ed54 6a11 	vldr	s13, [r4, #-68]	@ 0xffffffbc
 801237e:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8012382:	eee9 7a89 	vfma.f32	s15, s19, s18
 8012386:	eee8 7a88 	vfma.f32	s15, s17, s16
 801238a:	eee0 7a20 	vfma.f32	s15, s0, s1
 801238e:	eee1 7a21 	vfma.f32	s15, s2, s3
 8012392:	eee2 7a22 	vfma.f32	s15, s4, s5
 8012396:	eee3 7a23 	vfma.f32	s15, s6, s7
 801239a:	eee4 7a24 	vfma.f32	s15, s8, s9
 801239e:	eee5 7a25 	vfma.f32	s15, s10, s11
 80123a2:	eee6 7a26 	vfma.f32	s15, s12, s13
 80123a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80123aa:	d895      	bhi.n	80122d8 <forward_lite_dense_if32of32wf32+0x48>
 80123ac:	eb02 0e0a 	add.w	lr, r2, sl
 80123b0:	465c      	mov	r4, fp
 80123b2:	46c4      	mov	ip, r8
 80123b4:	2c00      	cmp	r4, #0
 80123b6:	d075      	beq.n	80124a4 <forward_lite_dense_if32of32wf32+0x214>
 80123b8:	eddc 6a00 	vldr	s13, [ip]
 80123bc:	2c01      	cmp	r4, #1
 80123be:	edde 7a00 	vldr	s15, [lr]
 80123c2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80123c6:	d06d      	beq.n	80124a4 <forward_lite_dense_if32of32wf32+0x214>
 80123c8:	eddc 6a01 	vldr	s13, [ip, #4]
 80123cc:	2c02      	cmp	r4, #2
 80123ce:	edde 7a01 	vldr	s15, [lr, #4]
 80123d2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80123d6:	d065      	beq.n	80124a4 <forward_lite_dense_if32of32wf32+0x214>
 80123d8:	eddc 6a02 	vldr	s13, [ip, #8]
 80123dc:	2c03      	cmp	r4, #3
 80123de:	edde 7a02 	vldr	s15, [lr, #8]
 80123e2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80123e6:	d05d      	beq.n	80124a4 <forward_lite_dense_if32of32wf32+0x214>
 80123e8:	eddc 6a03 	vldr	s13, [ip, #12]
 80123ec:	2c04      	cmp	r4, #4
 80123ee:	edde 7a03 	vldr	s15, [lr, #12]
 80123f2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80123f6:	d055      	beq.n	80124a4 <forward_lite_dense_if32of32wf32+0x214>
 80123f8:	eddc 6a04 	vldr	s13, [ip, #16]
 80123fc:	2c05      	cmp	r4, #5
 80123fe:	edde 7a04 	vldr	s15, [lr, #16]
 8012402:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012406:	d04d      	beq.n	80124a4 <forward_lite_dense_if32of32wf32+0x214>
 8012408:	eddc 6a05 	vldr	s13, [ip, #20]
 801240c:	2c06      	cmp	r4, #6
 801240e:	edde 7a05 	vldr	s15, [lr, #20]
 8012412:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012416:	d045      	beq.n	80124a4 <forward_lite_dense_if32of32wf32+0x214>
 8012418:	eddc 6a06 	vldr	s13, [ip, #24]
 801241c:	2c07      	cmp	r4, #7
 801241e:	edde 7a06 	vldr	s15, [lr, #24]
 8012422:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012426:	d03d      	beq.n	80124a4 <forward_lite_dense_if32of32wf32+0x214>
 8012428:	eddc 6a07 	vldr	s13, [ip, #28]
 801242c:	2c08      	cmp	r4, #8
 801242e:	edde 7a07 	vldr	s15, [lr, #28]
 8012432:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012436:	d035      	beq.n	80124a4 <forward_lite_dense_if32of32wf32+0x214>
 8012438:	eddc 6a08 	vldr	s13, [ip, #32]
 801243c:	2c09      	cmp	r4, #9
 801243e:	edde 7a08 	vldr	s15, [lr, #32]
 8012442:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012446:	d02d      	beq.n	80124a4 <forward_lite_dense_if32of32wf32+0x214>
 8012448:	eddc 6a09 	vldr	s13, [ip, #36]	@ 0x24
 801244c:	2c0a      	cmp	r4, #10
 801244e:	edde 7a09 	vldr	s15, [lr, #36]	@ 0x24
 8012452:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012456:	d025      	beq.n	80124a4 <forward_lite_dense_if32of32wf32+0x214>
 8012458:	eddc 6a0a 	vldr	s13, [ip, #40]	@ 0x28
 801245c:	2c0b      	cmp	r4, #11
 801245e:	edde 7a0a 	vldr	s15, [lr, #40]	@ 0x28
 8012462:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012466:	d01d      	beq.n	80124a4 <forward_lite_dense_if32of32wf32+0x214>
 8012468:	eddc 6a0b 	vldr	s13, [ip, #44]	@ 0x2c
 801246c:	2c0c      	cmp	r4, #12
 801246e:	edde 7a0b 	vldr	s15, [lr, #44]	@ 0x2c
 8012472:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012476:	d015      	beq.n	80124a4 <forward_lite_dense_if32of32wf32+0x214>
 8012478:	eddc 6a0c 	vldr	s13, [ip, #48]	@ 0x30
 801247c:	3c0d      	subs	r4, #13
 801247e:	edde 7a0c 	vldr	s15, [lr, #48]	@ 0x30
 8012482:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012486:	d00d      	beq.n	80124a4 <forward_lite_dense_if32of32wf32+0x214>
 8012488:	eddc 6a0d 	vldr	s13, [ip, #52]	@ 0x34
 801248c:	2c01      	cmp	r4, #1
 801248e:	edde 7a0d 	vldr	s15, [lr, #52]	@ 0x34
 8012492:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012496:	d005      	beq.n	80124a4 <forward_lite_dense_if32of32wf32+0x214>
 8012498:	edde 6a0e 	vldr	s13, [lr, #56]	@ 0x38
 801249c:	eddc 7a0e 	vldr	s15, [ip, #56]	@ 0x38
 80124a0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80124a4:	eca5 7a01 	vstmia	r5!, {s14}
 80124a8:	42af      	cmp	r7, r5
 80124aa:	444a      	add	r2, r9
 80124ac:	f63f af0a 	bhi.w	80122c4 <forward_lite_dense_if32of32wf32+0x34>
 80124b0:	b15b      	cbz	r3, 80124ca <forward_lite_dense_if32of32wf32+0x23a>
 80124b2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80124b4:	b14a      	cbz	r2, 80124ca <forward_lite_dense_if32of32wf32+0x23a>
 80124b6:	edd0 7a00 	vldr	s15, [r0]
 80124ba:	ecb3 7a01 	vldmia	r3!, {s14}
 80124be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80124c2:	ece0 7a01 	vstmia	r0!, {s15}
 80124c6:	4287      	cmp	r7, r0
 80124c8:	d1f5      	bne.n	80124b6 <forward_lite_dense_if32of32wf32+0x226>
 80124ca:	ecbd 8b0c 	vpop	{d8-d13}
 80124ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124d2:	4634      	mov	r4, r6
 80124d4:	4696      	mov	lr, r2
 80124d6:	468c      	mov	ip, r1
 80124d8:	e76c      	b.n	80123b4 <forward_lite_dense_if32of32wf32+0x124>
 80124da:	bf00      	nop
 80124dc:	00000000 	.word	0x00000000

080124e0 <st_int8_copy>:
 80124e0:	4288      	cmp	r0, r1
 80124e2:	d010      	beq.n	8012506 <st_int8_copy+0x26>
 80124e4:	b17a      	cbz	r2, 8012506 <st_int8_copy+0x26>
 80124e6:	4288      	cmp	r0, r1
 80124e8:	eb00 0302 	add.w	r3, r0, r2
 80124ec:	d20c      	bcs.n	8012508 <st_int8_copy+0x28>
 80124ee:	428b      	cmp	r3, r1
 80124f0:	d90a      	bls.n	8012508 <st_int8_copy+0x28>
 80124f2:	4283      	cmp	r3, r0
 80124f4:	440a      	add	r2, r1
 80124f6:	d906      	bls.n	8012506 <st_int8_copy+0x26>
 80124f8:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 80124fc:	4283      	cmp	r3, r0
 80124fe:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8012502:	d1f9      	bne.n	80124f8 <st_int8_copy+0x18>
 8012504:	4770      	bx	lr
 8012506:	4770      	bx	lr
 8012508:	078b      	lsls	r3, r1, #30
 801250a:	d102      	bne.n	8012512 <st_int8_copy+0x32>
 801250c:	e008      	b.n	8012520 <st_int8_copy+0x40>
 801250e:	2a00      	cmp	r2, #0
 8012510:	d04d      	beq.n	80125ae <st_int8_copy+0xce>
 8012512:	f910 3b01 	ldrsb.w	r3, [r0], #1
 8012516:	3a01      	subs	r2, #1
 8012518:	f801 3b01 	strb.w	r3, [r1], #1
 801251c:	078b      	lsls	r3, r1, #30
 801251e:	d1f6      	bne.n	801250e <st_int8_copy+0x2e>
 8012520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012524:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 8012528:	d05e      	beq.n	80125e8 <st_int8_copy+0x108>
 801252a:	ea40 0301 	orr.w	r3, r0, r1
 801252e:	075b      	lsls	r3, r3, #29
 8012530:	d13e      	bne.n	80125b0 <st_int8_copy+0xd0>
 8012532:	f10e 33ff 	add.w	r3, lr, #4294967295
 8012536:	2b01      	cmp	r3, #1
 8012538:	d93a      	bls.n	80125b0 <st_int8_copy+0xd0>
 801253a:	f100 0310 	add.w	r3, r0, #16
 801253e:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8012542:	f101 0c10 	add.w	ip, r1, #16
 8012546:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 801254a:	3310      	adds	r3, #16
 801254c:	f10c 0c10 	add.w	ip, ip, #16
 8012550:	ed13 6b08 	vldr	d6, [r3, #-32]	@ 0xffffffe0
 8012554:	ed13 7b06 	vldr	d7, [r3, #-24]	@ 0xffffffe8
 8012558:	4573      	cmp	r3, lr
 801255a:	ed0c 6b08 	vstr	d6, [ip, #-32]	@ 0xffffffe0
 801255e:	ed0c 7b06 	vstr	d7, [ip, #-24]	@ 0xffffffe8
 8012562:	d1f2      	bne.n	801254a <st_int8_copy+0x6a>
 8012564:	f3c2 0381 	ubfx	r3, r2, #2, #2
 8012568:	4421      	add	r1, r4
 801256a:	4420      	add	r0, r4
 801256c:	f002 0203 	and.w	r2, r2, #3
 8012570:	b16b      	cbz	r3, 801258e <st_int8_copy+0xae>
 8012572:	6804      	ldr	r4, [r0, #0]
 8012574:	600c      	str	r4, [r1, #0]
 8012576:	1e5c      	subs	r4, r3, #1
 8012578:	d005      	beq.n	8012586 <st_int8_copy+0xa6>
 801257a:	6845      	ldr	r5, [r0, #4]
 801257c:	2c01      	cmp	r4, #1
 801257e:	604d      	str	r5, [r1, #4]
 8012580:	d001      	beq.n	8012586 <st_int8_copy+0xa6>
 8012582:	6884      	ldr	r4, [r0, #8]
 8012584:	608c      	str	r4, [r1, #8]
 8012586:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801258a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801258e:	b162      	cbz	r2, 80125aa <st_int8_copy+0xca>
 8012590:	f990 3000 	ldrsb.w	r3, [r0]
 8012594:	3a01      	subs	r2, #1
 8012596:	700b      	strb	r3, [r1, #0]
 8012598:	d007      	beq.n	80125aa <st_int8_copy+0xca>
 801259a:	f990 3001 	ldrsb.w	r3, [r0, #1]
 801259e:	2a01      	cmp	r2, #1
 80125a0:	704b      	strb	r3, [r1, #1]
 80125a2:	d002      	beq.n	80125aa <st_int8_copy+0xca>
 80125a4:	f990 3002 	ldrsb.w	r3, [r0, #2]
 80125a8:	708b      	strb	r3, [r1, #2]
 80125aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125ae:	4770      	bx	lr
 80125b0:	ea4f 140e 	mov.w	r4, lr, lsl #4
 80125b4:	460b      	mov	r3, r1
 80125b6:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 80125ba:	4684      	mov	ip, r0
 80125bc:	f8dc 8000 	ldr.w	r8, [ip]
 80125c0:	3310      	adds	r3, #16
 80125c2:	f8dc 7004 	ldr.w	r7, [ip, #4]
 80125c6:	f10c 0c10 	add.w	ip, ip, #16
 80125ca:	f85c 6c08 	ldr.w	r6, [ip, #-8]
 80125ce:	f85c 5c04 	ldr.w	r5, [ip, #-4]
 80125d2:	f843 8c10 	str.w	r8, [r3, #-16]
 80125d6:	f843 7c0c 	str.w	r7, [r3, #-12]
 80125da:	f843 6c08 	str.w	r6, [r3, #-8]
 80125de:	f843 5c04 	str.w	r5, [r3, #-4]
 80125e2:	459e      	cmp	lr, r3
 80125e4:	d1ea      	bne.n	80125bc <st_int8_copy+0xdc>
 80125e6:	e7bd      	b.n	8012564 <st_int8_copy+0x84>
 80125e8:	0893      	lsrs	r3, r2, #2
 80125ea:	f002 0203 	and.w	r2, r2, #3
 80125ee:	e7bf      	b.n	8012570 <st_int8_copy+0x90>

080125f0 <ai_array_to_buffer_fmt>:
 80125f0:	f3c0 4343 	ubfx	r3, r0, #17, #4
 80125f4:	2b02      	cmp	r3, #2
 80125f6:	d050      	beq.n	801269a <ai_array_to_buffer_fmt+0xaa>
 80125f8:	f020 427e 	bic.w	r2, r0, #4261412864	@ 0xfe000000
 80125fc:	4b29      	ldr	r3, [pc, #164]	@ (80126a4 <ai_array_to_buffer_fmt+0xb4>)
 80125fe:	429a      	cmp	r2, r3
 8012600:	d00b      	beq.n	801261a <ai_array_to_buffer_fmt+0x2a>
 8012602:	dc1c      	bgt.n	801263e <ai_array_to_buffer_fmt+0x4e>
 8012604:	4b28      	ldr	r3, [pc, #160]	@ (80126a8 <ai_array_to_buffer_fmt+0xb8>)
 8012606:	429a      	cmp	r2, r3
 8012608:	d007      	beq.n	801261a <ai_array_to_buffer_fmt+0x2a>
 801260a:	dd0b      	ble.n	8012624 <ai_array_to_buffer_fmt+0x34>
 801260c:	4b27      	ldr	r3, [pc, #156]	@ (80126ac <ai_array_to_buffer_fmt+0xbc>)
 801260e:	429a      	cmp	r2, r3
 8012610:	d003      	beq.n	801261a <ai_array_to_buffer_fmt+0x2a>
 8012612:	f503 33fa 	add.w	r3, r3, #128000	@ 0x1f400
 8012616:	429a      	cmp	r2, r3
 8012618:	d131      	bne.n	801267e <ai_array_to_buffer_fmt+0x8e>
 801261a:	4613      	mov	r3, r2
 801261c:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8012620:	4318      	orrs	r0, r3
 8012622:	4770      	bx	lr
 8012624:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8012628:	429a      	cmp	r2, r3
 801262a:	d0f6      	beq.n	801261a <ai_array_to_buffer_fmt+0x2a>
 801262c:	dd2c      	ble.n	8012688 <ai_array_to_buffer_fmt+0x98>
 801262e:	4b20      	ldr	r3, [pc, #128]	@ (80126b0 <ai_array_to_buffer_fmt+0xc0>)
 8012630:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8012634:	429a      	cmp	r2, r3
 8012636:	bf18      	it	ne
 8012638:	2340      	movne	r3, #64	@ 0x40
 801263a:	4318      	orrs	r0, r3
 801263c:	4770      	bx	lr
 801263e:	4b1d      	ldr	r3, [pc, #116]	@ (80126b4 <ai_array_to_buffer_fmt+0xc4>)
 8012640:	429a      	cmp	r2, r3
 8012642:	d0ea      	beq.n	801261a <ai_array_to_buffer_fmt+0x2a>
 8012644:	dd0e      	ble.n	8012664 <ai_array_to_buffer_fmt+0x74>
 8012646:	4b1c      	ldr	r3, [pc, #112]	@ (80126b8 <ai_array_to_buffer_fmt+0xc8>)
 8012648:	429a      	cmp	r2, r3
 801264a:	d0e6      	beq.n	801261a <ai_array_to_buffer_fmt+0x2a>
 801264c:	f503 037e 	add.w	r3, r3, #16646144	@ 0xfe0000
 8012650:	429a      	cmp	r2, r3
 8012652:	d0e2      	beq.n	801261a <ai_array_to_buffer_fmt+0x2a>
 8012654:	4b19      	ldr	r3, [pc, #100]	@ (80126bc <ai_array_to_buffer_fmt+0xcc>)
 8012656:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 801265a:	429a      	cmp	r2, r3
 801265c:	bf18      	it	ne
 801265e:	2340      	movne	r3, #64	@ 0x40
 8012660:	4318      	orrs	r0, r3
 8012662:	4770      	bx	lr
 8012664:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8012668:	429a      	cmp	r2, r3
 801266a:	d0d6      	beq.n	801261a <ai_array_to_buffer_fmt+0x2a>
 801266c:	3307      	adds	r3, #7
 801266e:	429a      	cmp	r2, r3
 8012670:	d0d3      	beq.n	801261a <ai_array_to_buffer_fmt+0x2a>
 8012672:	f2a3 3387 	subw	r3, r3, #903	@ 0x387
 8012676:	429a      	cmp	r2, r3
 8012678:	bf18      	it	ne
 801267a:	2340      	movne	r3, #64	@ 0x40
 801267c:	e7ce      	b.n	801261c <ai_array_to_buffer_fmt+0x2c>
 801267e:	4b10      	ldr	r3, [pc, #64]	@ (80126c0 <ai_array_to_buffer_fmt+0xd0>)
 8012680:	429a      	cmp	r2, r3
 8012682:	bf18      	it	ne
 8012684:	2340      	movne	r3, #64	@ 0x40
 8012686:	e7c9      	b.n	801261c <ai_array_to_buffer_fmt+0x2c>
 8012688:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 801268c:	429a      	cmp	r2, r3
 801268e:	d0c4      	beq.n	801261a <ai_array_to_buffer_fmt+0x2a>
 8012690:	3380      	adds	r3, #128	@ 0x80
 8012692:	429a      	cmp	r2, r3
 8012694:	bf18      	it	ne
 8012696:	2340      	movne	r3, #64	@ 0x40
 8012698:	e7c0      	b.n	801261c <ai_array_to_buffer_fmt+0x2c>
 801269a:	4b0a      	ldr	r3, [pc, #40]	@ (80126c4 <ai_array_to_buffer_fmt+0xd4>)
 801269c:	4003      	ands	r3, r0
 801269e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80126a2:	e7bb      	b.n	801261c <ai_array_to_buffer_fmt+0x2c>
 80126a4:	00840040 	.word	0x00840040
 80126a8:	00040840 	.word	0x00040840
 80126ac:	00041040 	.word	0x00041040
 80126b0:	00040447 	.word	0x00040447
 80126b4:	00840840 	.word	0x00840840
 80126b8:	00841040 	.word	0x00841040
 80126bc:	0084084f 	.word	0x0084084f
 80126c0:	0004084f 	.word	0x0004084f
 80126c4:	00803fff 	.word	0x00803fff

080126c8 <ai_array_get_byte_size>:
 80126c8:	b319      	cbz	r1, 8012712 <ai_array_get_byte_size+0x4a>
 80126ca:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 80126ce:	f3c0 4243 	ubfx	r2, r0, #17, #4
 80126d2:	f3c0 5c41 	ubfx	ip, r0, #21, #2
 80126d6:	11c0      	asrs	r0, r0, #7
 80126d8:	fb03 f101 	mul.w	r1, r3, r1
 80126dc:	2a04      	cmp	r2, #4
 80126de:	f101 0107 	add.w	r1, r1, #7
 80126e2:	f021 0107 	bic.w	r1, r1, #7
 80126e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80126ea:	d00b      	beq.n	8012704 <ai_array_get_byte_size+0x3c>
 80126ec:	2a08      	cmp	r2, #8
 80126ee:	d002      	beq.n	80126f6 <ai_array_get_byte_size+0x2e>
 80126f0:	3107      	adds	r1, #7
 80126f2:	08c8      	lsrs	r0, r1, #3
 80126f4:	4770      	bx	lr
 80126f6:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 80126fa:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 80126fe:	3107      	adds	r1, #7
 8012700:	08c8      	lsrs	r0, r1, #3
 8012702:	4770      	bx	lr
 8012704:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8012708:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 801270c:	3107      	adds	r1, #7
 801270e:	08c8      	lsrs	r0, r1, #3
 8012710:	4770      	bx	lr
 8012712:	4608      	mov	r0, r1
 8012714:	4770      	bx	lr
 8012716:	bf00      	nop

08012718 <ai_array_get_data_byte_size>:
 8012718:	b161      	cbz	r1, 8012734 <ai_array_get_data_byte_size+0x1c>
 801271a:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 801271e:	f3c0 5241 	ubfx	r2, r0, #21, #2
 8012722:	fb03 f101 	mul.w	r1, r3, r1
 8012726:	1dc8      	adds	r0, r1, #7
 8012728:	f020 0007 	bic.w	r0, r0, #7
 801272c:	40d0      	lsrs	r0, r2
 801272e:	3007      	adds	r0, #7
 8012730:	08c0      	lsrs	r0, r0, #3
 8012732:	4770      	bx	lr
 8012734:	4608      	mov	r0, r1
 8012736:	4770      	bx	lr

08012738 <ai_version_get>:
 8012738:	0212      	lsls	r2, r2, #8
 801273a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 801273e:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8012742:	4770      	bx	lr

08012744 <get_tensor_byte_size>:
 8012744:	b430      	push	{r4, r5}
 8012746:	6985      	ldr	r5, [r0, #24]
 8012748:	68c4      	ldr	r4, [r0, #12]
 801274a:	6941      	ldr	r1, [r0, #20]
 801274c:	4b06      	ldr	r3, [pc, #24]	@ (8012768 <get_tensor_byte_size+0x24>)
 801274e:	6828      	ldr	r0, [r5, #0]
 8012750:	4a06      	ldr	r2, [pc, #24]	@ (801276c <get_tensor_byte_size+0x28>)
 8012752:	4003      	ands	r3, r0
 8012754:	68c9      	ldr	r1, [r1, #12]
 8012756:	68e0      	ldr	r0, [r4, #12]
 8012758:	4293      	cmp	r3, r2
 801275a:	fb01 f000 	mul.w	r0, r1, r0
 801275e:	d101      	bne.n	8012764 <get_tensor_byte_size+0x20>
 8012760:	3007      	adds	r0, #7
 8012762:	08c0      	lsrs	r0, r0, #3
 8012764:	bc30      	pop	{r4, r5}
 8012766:	4770      	bx	lr
 8012768:	017fffff 	.word	0x017fffff
 801276c:	000400c0 	.word	0x000400c0

08012770 <malloc>:
 8012770:	4b02      	ldr	r3, [pc, #8]	@ (801277c <malloc+0xc>)
 8012772:	4601      	mov	r1, r0
 8012774:	6818      	ldr	r0, [r3, #0]
 8012776:	f000 b825 	b.w	80127c4 <_malloc_r>
 801277a:	bf00      	nop
 801277c:	20001438 	.word	0x20001438

08012780 <sbrk_aligned>:
 8012780:	b570      	push	{r4, r5, r6, lr}
 8012782:	4e0f      	ldr	r6, [pc, #60]	@ (80127c0 <sbrk_aligned+0x40>)
 8012784:	460c      	mov	r4, r1
 8012786:	6831      	ldr	r1, [r6, #0]
 8012788:	4605      	mov	r5, r0
 801278a:	b911      	cbnz	r1, 8012792 <sbrk_aligned+0x12>
 801278c:	f001 f92e 	bl	80139ec <_sbrk_r>
 8012790:	6030      	str	r0, [r6, #0]
 8012792:	4621      	mov	r1, r4
 8012794:	4628      	mov	r0, r5
 8012796:	f001 f929 	bl	80139ec <_sbrk_r>
 801279a:	1c43      	adds	r3, r0, #1
 801279c:	d103      	bne.n	80127a6 <sbrk_aligned+0x26>
 801279e:	f04f 34ff 	mov.w	r4, #4294967295
 80127a2:	4620      	mov	r0, r4
 80127a4:	bd70      	pop	{r4, r5, r6, pc}
 80127a6:	1cc4      	adds	r4, r0, #3
 80127a8:	f024 0403 	bic.w	r4, r4, #3
 80127ac:	42a0      	cmp	r0, r4
 80127ae:	d0f8      	beq.n	80127a2 <sbrk_aligned+0x22>
 80127b0:	1a21      	subs	r1, r4, r0
 80127b2:	4628      	mov	r0, r5
 80127b4:	f001 f91a 	bl	80139ec <_sbrk_r>
 80127b8:	3001      	adds	r0, #1
 80127ba:	d1f2      	bne.n	80127a2 <sbrk_aligned+0x22>
 80127bc:	e7ef      	b.n	801279e <sbrk_aligned+0x1e>
 80127be:	bf00      	nop
 80127c0:	2000c678 	.word	0x2000c678

080127c4 <_malloc_r>:
 80127c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80127c8:	1ccd      	adds	r5, r1, #3
 80127ca:	f025 0503 	bic.w	r5, r5, #3
 80127ce:	3508      	adds	r5, #8
 80127d0:	2d0c      	cmp	r5, #12
 80127d2:	bf38      	it	cc
 80127d4:	250c      	movcc	r5, #12
 80127d6:	2d00      	cmp	r5, #0
 80127d8:	4606      	mov	r6, r0
 80127da:	db01      	blt.n	80127e0 <_malloc_r+0x1c>
 80127dc:	42a9      	cmp	r1, r5
 80127de:	d904      	bls.n	80127ea <_malloc_r+0x26>
 80127e0:	230c      	movs	r3, #12
 80127e2:	6033      	str	r3, [r6, #0]
 80127e4:	2000      	movs	r0, #0
 80127e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80127ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80128c0 <_malloc_r+0xfc>
 80127ee:	f000 f869 	bl	80128c4 <__malloc_lock>
 80127f2:	f8d8 3000 	ldr.w	r3, [r8]
 80127f6:	461c      	mov	r4, r3
 80127f8:	bb44      	cbnz	r4, 801284c <_malloc_r+0x88>
 80127fa:	4629      	mov	r1, r5
 80127fc:	4630      	mov	r0, r6
 80127fe:	f7ff ffbf 	bl	8012780 <sbrk_aligned>
 8012802:	1c43      	adds	r3, r0, #1
 8012804:	4604      	mov	r4, r0
 8012806:	d158      	bne.n	80128ba <_malloc_r+0xf6>
 8012808:	f8d8 4000 	ldr.w	r4, [r8]
 801280c:	4627      	mov	r7, r4
 801280e:	2f00      	cmp	r7, #0
 8012810:	d143      	bne.n	801289a <_malloc_r+0xd6>
 8012812:	2c00      	cmp	r4, #0
 8012814:	d04b      	beq.n	80128ae <_malloc_r+0xea>
 8012816:	6823      	ldr	r3, [r4, #0]
 8012818:	4639      	mov	r1, r7
 801281a:	4630      	mov	r0, r6
 801281c:	eb04 0903 	add.w	r9, r4, r3
 8012820:	f001 f8e4 	bl	80139ec <_sbrk_r>
 8012824:	4581      	cmp	r9, r0
 8012826:	d142      	bne.n	80128ae <_malloc_r+0xea>
 8012828:	6821      	ldr	r1, [r4, #0]
 801282a:	1a6d      	subs	r5, r5, r1
 801282c:	4629      	mov	r1, r5
 801282e:	4630      	mov	r0, r6
 8012830:	f7ff ffa6 	bl	8012780 <sbrk_aligned>
 8012834:	3001      	adds	r0, #1
 8012836:	d03a      	beq.n	80128ae <_malloc_r+0xea>
 8012838:	6823      	ldr	r3, [r4, #0]
 801283a:	442b      	add	r3, r5
 801283c:	6023      	str	r3, [r4, #0]
 801283e:	f8d8 3000 	ldr.w	r3, [r8]
 8012842:	685a      	ldr	r2, [r3, #4]
 8012844:	bb62      	cbnz	r2, 80128a0 <_malloc_r+0xdc>
 8012846:	f8c8 7000 	str.w	r7, [r8]
 801284a:	e00f      	b.n	801286c <_malloc_r+0xa8>
 801284c:	6822      	ldr	r2, [r4, #0]
 801284e:	1b52      	subs	r2, r2, r5
 8012850:	d420      	bmi.n	8012894 <_malloc_r+0xd0>
 8012852:	2a0b      	cmp	r2, #11
 8012854:	d917      	bls.n	8012886 <_malloc_r+0xc2>
 8012856:	1961      	adds	r1, r4, r5
 8012858:	42a3      	cmp	r3, r4
 801285a:	6025      	str	r5, [r4, #0]
 801285c:	bf18      	it	ne
 801285e:	6059      	strne	r1, [r3, #4]
 8012860:	6863      	ldr	r3, [r4, #4]
 8012862:	bf08      	it	eq
 8012864:	f8c8 1000 	streq.w	r1, [r8]
 8012868:	5162      	str	r2, [r4, r5]
 801286a:	604b      	str	r3, [r1, #4]
 801286c:	4630      	mov	r0, r6
 801286e:	f000 f82f 	bl	80128d0 <__malloc_unlock>
 8012872:	f104 000b 	add.w	r0, r4, #11
 8012876:	1d23      	adds	r3, r4, #4
 8012878:	f020 0007 	bic.w	r0, r0, #7
 801287c:	1ac2      	subs	r2, r0, r3
 801287e:	bf1c      	itt	ne
 8012880:	1a1b      	subne	r3, r3, r0
 8012882:	50a3      	strne	r3, [r4, r2]
 8012884:	e7af      	b.n	80127e6 <_malloc_r+0x22>
 8012886:	6862      	ldr	r2, [r4, #4]
 8012888:	42a3      	cmp	r3, r4
 801288a:	bf0c      	ite	eq
 801288c:	f8c8 2000 	streq.w	r2, [r8]
 8012890:	605a      	strne	r2, [r3, #4]
 8012892:	e7eb      	b.n	801286c <_malloc_r+0xa8>
 8012894:	4623      	mov	r3, r4
 8012896:	6864      	ldr	r4, [r4, #4]
 8012898:	e7ae      	b.n	80127f8 <_malloc_r+0x34>
 801289a:	463c      	mov	r4, r7
 801289c:	687f      	ldr	r7, [r7, #4]
 801289e:	e7b6      	b.n	801280e <_malloc_r+0x4a>
 80128a0:	461a      	mov	r2, r3
 80128a2:	685b      	ldr	r3, [r3, #4]
 80128a4:	42a3      	cmp	r3, r4
 80128a6:	d1fb      	bne.n	80128a0 <_malloc_r+0xdc>
 80128a8:	2300      	movs	r3, #0
 80128aa:	6053      	str	r3, [r2, #4]
 80128ac:	e7de      	b.n	801286c <_malloc_r+0xa8>
 80128ae:	230c      	movs	r3, #12
 80128b0:	6033      	str	r3, [r6, #0]
 80128b2:	4630      	mov	r0, r6
 80128b4:	f000 f80c 	bl	80128d0 <__malloc_unlock>
 80128b8:	e794      	b.n	80127e4 <_malloc_r+0x20>
 80128ba:	6005      	str	r5, [r0, #0]
 80128bc:	e7d6      	b.n	801286c <_malloc_r+0xa8>
 80128be:	bf00      	nop
 80128c0:	2000c67c 	.word	0x2000c67c

080128c4 <__malloc_lock>:
 80128c4:	4801      	ldr	r0, [pc, #4]	@ (80128cc <__malloc_lock+0x8>)
 80128c6:	f001 b8de 	b.w	8013a86 <__retarget_lock_acquire_recursive>
 80128ca:	bf00      	nop
 80128cc:	2000c7c0 	.word	0x2000c7c0

080128d0 <__malloc_unlock>:
 80128d0:	4801      	ldr	r0, [pc, #4]	@ (80128d8 <__malloc_unlock+0x8>)
 80128d2:	f001 b8d9 	b.w	8013a88 <__retarget_lock_release_recursive>
 80128d6:	bf00      	nop
 80128d8:	2000c7c0 	.word	0x2000c7c0

080128dc <_realloc_r>:
 80128dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80128e0:	4680      	mov	r8, r0
 80128e2:	4615      	mov	r5, r2
 80128e4:	460c      	mov	r4, r1
 80128e6:	b921      	cbnz	r1, 80128f2 <_realloc_r+0x16>
 80128e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80128ec:	4611      	mov	r1, r2
 80128ee:	f7ff bf69 	b.w	80127c4 <_malloc_r>
 80128f2:	b92a      	cbnz	r2, 8012900 <_realloc_r+0x24>
 80128f4:	f001 ff50 	bl	8014798 <_free_r>
 80128f8:	2400      	movs	r4, #0
 80128fa:	4620      	mov	r0, r4
 80128fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012900:	f002 fc46 	bl	8015190 <_malloc_usable_size_r>
 8012904:	4285      	cmp	r5, r0
 8012906:	4606      	mov	r6, r0
 8012908:	d802      	bhi.n	8012910 <_realloc_r+0x34>
 801290a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801290e:	d8f4      	bhi.n	80128fa <_realloc_r+0x1e>
 8012910:	4629      	mov	r1, r5
 8012912:	4640      	mov	r0, r8
 8012914:	f7ff ff56 	bl	80127c4 <_malloc_r>
 8012918:	4607      	mov	r7, r0
 801291a:	2800      	cmp	r0, #0
 801291c:	d0ec      	beq.n	80128f8 <_realloc_r+0x1c>
 801291e:	42b5      	cmp	r5, r6
 8012920:	462a      	mov	r2, r5
 8012922:	4621      	mov	r1, r4
 8012924:	bf28      	it	cs
 8012926:	4632      	movcs	r2, r6
 8012928:	f001 f8b7 	bl	8013a9a <memcpy>
 801292c:	4621      	mov	r1, r4
 801292e:	4640      	mov	r0, r8
 8012930:	f001 ff32 	bl	8014798 <_free_r>
 8012934:	463c      	mov	r4, r7
 8012936:	e7e0      	b.n	80128fa <_realloc_r+0x1e>

08012938 <__cvt>:
 8012938:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801293c:	ec57 6b10 	vmov	r6, r7, d0
 8012940:	2f00      	cmp	r7, #0
 8012942:	460c      	mov	r4, r1
 8012944:	4619      	mov	r1, r3
 8012946:	463b      	mov	r3, r7
 8012948:	bfbb      	ittet	lt
 801294a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801294e:	461f      	movlt	r7, r3
 8012950:	2300      	movge	r3, #0
 8012952:	232d      	movlt	r3, #45	@ 0x2d
 8012954:	700b      	strb	r3, [r1, #0]
 8012956:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012958:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801295c:	4691      	mov	r9, r2
 801295e:	f023 0820 	bic.w	r8, r3, #32
 8012962:	bfbc      	itt	lt
 8012964:	4632      	movlt	r2, r6
 8012966:	4616      	movlt	r6, r2
 8012968:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801296c:	d005      	beq.n	801297a <__cvt+0x42>
 801296e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8012972:	d100      	bne.n	8012976 <__cvt+0x3e>
 8012974:	3401      	adds	r4, #1
 8012976:	2102      	movs	r1, #2
 8012978:	e000      	b.n	801297c <__cvt+0x44>
 801297a:	2103      	movs	r1, #3
 801297c:	ab03      	add	r3, sp, #12
 801297e:	9301      	str	r3, [sp, #4]
 8012980:	ab02      	add	r3, sp, #8
 8012982:	9300      	str	r3, [sp, #0]
 8012984:	ec47 6b10 	vmov	d0, r6, r7
 8012988:	4653      	mov	r3, sl
 801298a:	4622      	mov	r2, r4
 801298c:	f001 f940 	bl	8013c10 <_dtoa_r>
 8012990:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8012994:	4605      	mov	r5, r0
 8012996:	d119      	bne.n	80129cc <__cvt+0x94>
 8012998:	f019 0f01 	tst.w	r9, #1
 801299c:	d00e      	beq.n	80129bc <__cvt+0x84>
 801299e:	eb00 0904 	add.w	r9, r0, r4
 80129a2:	2200      	movs	r2, #0
 80129a4:	2300      	movs	r3, #0
 80129a6:	4630      	mov	r0, r6
 80129a8:	4639      	mov	r1, r7
 80129aa:	f7ee f8bd 	bl	8000b28 <__aeabi_dcmpeq>
 80129ae:	b108      	cbz	r0, 80129b4 <__cvt+0x7c>
 80129b0:	f8cd 900c 	str.w	r9, [sp, #12]
 80129b4:	2230      	movs	r2, #48	@ 0x30
 80129b6:	9b03      	ldr	r3, [sp, #12]
 80129b8:	454b      	cmp	r3, r9
 80129ba:	d31e      	bcc.n	80129fa <__cvt+0xc2>
 80129bc:	9b03      	ldr	r3, [sp, #12]
 80129be:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80129c0:	1b5b      	subs	r3, r3, r5
 80129c2:	4628      	mov	r0, r5
 80129c4:	6013      	str	r3, [r2, #0]
 80129c6:	b004      	add	sp, #16
 80129c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80129cc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80129d0:	eb00 0904 	add.w	r9, r0, r4
 80129d4:	d1e5      	bne.n	80129a2 <__cvt+0x6a>
 80129d6:	7803      	ldrb	r3, [r0, #0]
 80129d8:	2b30      	cmp	r3, #48	@ 0x30
 80129da:	d10a      	bne.n	80129f2 <__cvt+0xba>
 80129dc:	2200      	movs	r2, #0
 80129de:	2300      	movs	r3, #0
 80129e0:	4630      	mov	r0, r6
 80129e2:	4639      	mov	r1, r7
 80129e4:	f7ee f8a0 	bl	8000b28 <__aeabi_dcmpeq>
 80129e8:	b918      	cbnz	r0, 80129f2 <__cvt+0xba>
 80129ea:	f1c4 0401 	rsb	r4, r4, #1
 80129ee:	f8ca 4000 	str.w	r4, [sl]
 80129f2:	f8da 3000 	ldr.w	r3, [sl]
 80129f6:	4499      	add	r9, r3
 80129f8:	e7d3      	b.n	80129a2 <__cvt+0x6a>
 80129fa:	1c59      	adds	r1, r3, #1
 80129fc:	9103      	str	r1, [sp, #12]
 80129fe:	701a      	strb	r2, [r3, #0]
 8012a00:	e7d9      	b.n	80129b6 <__cvt+0x7e>

08012a02 <__exponent>:
 8012a02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012a04:	2900      	cmp	r1, #0
 8012a06:	bfba      	itte	lt
 8012a08:	4249      	neglt	r1, r1
 8012a0a:	232d      	movlt	r3, #45	@ 0x2d
 8012a0c:	232b      	movge	r3, #43	@ 0x2b
 8012a0e:	2909      	cmp	r1, #9
 8012a10:	7002      	strb	r2, [r0, #0]
 8012a12:	7043      	strb	r3, [r0, #1]
 8012a14:	dd29      	ble.n	8012a6a <__exponent+0x68>
 8012a16:	f10d 0307 	add.w	r3, sp, #7
 8012a1a:	461d      	mov	r5, r3
 8012a1c:	270a      	movs	r7, #10
 8012a1e:	461a      	mov	r2, r3
 8012a20:	fbb1 f6f7 	udiv	r6, r1, r7
 8012a24:	fb07 1416 	mls	r4, r7, r6, r1
 8012a28:	3430      	adds	r4, #48	@ 0x30
 8012a2a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8012a2e:	460c      	mov	r4, r1
 8012a30:	2c63      	cmp	r4, #99	@ 0x63
 8012a32:	f103 33ff 	add.w	r3, r3, #4294967295
 8012a36:	4631      	mov	r1, r6
 8012a38:	dcf1      	bgt.n	8012a1e <__exponent+0x1c>
 8012a3a:	3130      	adds	r1, #48	@ 0x30
 8012a3c:	1e94      	subs	r4, r2, #2
 8012a3e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8012a42:	1c41      	adds	r1, r0, #1
 8012a44:	4623      	mov	r3, r4
 8012a46:	42ab      	cmp	r3, r5
 8012a48:	d30a      	bcc.n	8012a60 <__exponent+0x5e>
 8012a4a:	f10d 0309 	add.w	r3, sp, #9
 8012a4e:	1a9b      	subs	r3, r3, r2
 8012a50:	42ac      	cmp	r4, r5
 8012a52:	bf88      	it	hi
 8012a54:	2300      	movhi	r3, #0
 8012a56:	3302      	adds	r3, #2
 8012a58:	4403      	add	r3, r0
 8012a5a:	1a18      	subs	r0, r3, r0
 8012a5c:	b003      	add	sp, #12
 8012a5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012a60:	f813 6b01 	ldrb.w	r6, [r3], #1
 8012a64:	f801 6f01 	strb.w	r6, [r1, #1]!
 8012a68:	e7ed      	b.n	8012a46 <__exponent+0x44>
 8012a6a:	2330      	movs	r3, #48	@ 0x30
 8012a6c:	3130      	adds	r1, #48	@ 0x30
 8012a6e:	7083      	strb	r3, [r0, #2]
 8012a70:	70c1      	strb	r1, [r0, #3]
 8012a72:	1d03      	adds	r3, r0, #4
 8012a74:	e7f1      	b.n	8012a5a <__exponent+0x58>
	...

08012a78 <_printf_float>:
 8012a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a7c:	b08d      	sub	sp, #52	@ 0x34
 8012a7e:	460c      	mov	r4, r1
 8012a80:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8012a84:	4616      	mov	r6, r2
 8012a86:	461f      	mov	r7, r3
 8012a88:	4605      	mov	r5, r0
 8012a8a:	f000 ff77 	bl	801397c <_localeconv_r>
 8012a8e:	6803      	ldr	r3, [r0, #0]
 8012a90:	9304      	str	r3, [sp, #16]
 8012a92:	4618      	mov	r0, r3
 8012a94:	f7ed fc1c 	bl	80002d0 <strlen>
 8012a98:	2300      	movs	r3, #0
 8012a9a:	930a      	str	r3, [sp, #40]	@ 0x28
 8012a9c:	f8d8 3000 	ldr.w	r3, [r8]
 8012aa0:	9005      	str	r0, [sp, #20]
 8012aa2:	3307      	adds	r3, #7
 8012aa4:	f023 0307 	bic.w	r3, r3, #7
 8012aa8:	f103 0208 	add.w	r2, r3, #8
 8012aac:	f894 a018 	ldrb.w	sl, [r4, #24]
 8012ab0:	f8d4 b000 	ldr.w	fp, [r4]
 8012ab4:	f8c8 2000 	str.w	r2, [r8]
 8012ab8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012abc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8012ac0:	9307      	str	r3, [sp, #28]
 8012ac2:	f8cd 8018 	str.w	r8, [sp, #24]
 8012ac6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8012aca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012ace:	4b9c      	ldr	r3, [pc, #624]	@ (8012d40 <_printf_float+0x2c8>)
 8012ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8012ad4:	f7ee f85a 	bl	8000b8c <__aeabi_dcmpun>
 8012ad8:	bb70      	cbnz	r0, 8012b38 <_printf_float+0xc0>
 8012ada:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012ade:	4b98      	ldr	r3, [pc, #608]	@ (8012d40 <_printf_float+0x2c8>)
 8012ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8012ae4:	f7ee f834 	bl	8000b50 <__aeabi_dcmple>
 8012ae8:	bb30      	cbnz	r0, 8012b38 <_printf_float+0xc0>
 8012aea:	2200      	movs	r2, #0
 8012aec:	2300      	movs	r3, #0
 8012aee:	4640      	mov	r0, r8
 8012af0:	4649      	mov	r1, r9
 8012af2:	f7ee f823 	bl	8000b3c <__aeabi_dcmplt>
 8012af6:	b110      	cbz	r0, 8012afe <_printf_float+0x86>
 8012af8:	232d      	movs	r3, #45	@ 0x2d
 8012afa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012afe:	4a91      	ldr	r2, [pc, #580]	@ (8012d44 <_printf_float+0x2cc>)
 8012b00:	4b91      	ldr	r3, [pc, #580]	@ (8012d48 <_printf_float+0x2d0>)
 8012b02:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8012b06:	bf94      	ite	ls
 8012b08:	4690      	movls	r8, r2
 8012b0a:	4698      	movhi	r8, r3
 8012b0c:	2303      	movs	r3, #3
 8012b0e:	6123      	str	r3, [r4, #16]
 8012b10:	f02b 0304 	bic.w	r3, fp, #4
 8012b14:	6023      	str	r3, [r4, #0]
 8012b16:	f04f 0900 	mov.w	r9, #0
 8012b1a:	9700      	str	r7, [sp, #0]
 8012b1c:	4633      	mov	r3, r6
 8012b1e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8012b20:	4621      	mov	r1, r4
 8012b22:	4628      	mov	r0, r5
 8012b24:	f000 f9d2 	bl	8012ecc <_printf_common>
 8012b28:	3001      	adds	r0, #1
 8012b2a:	f040 808d 	bne.w	8012c48 <_printf_float+0x1d0>
 8012b2e:	f04f 30ff 	mov.w	r0, #4294967295
 8012b32:	b00d      	add	sp, #52	@ 0x34
 8012b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b38:	4642      	mov	r2, r8
 8012b3a:	464b      	mov	r3, r9
 8012b3c:	4640      	mov	r0, r8
 8012b3e:	4649      	mov	r1, r9
 8012b40:	f7ee f824 	bl	8000b8c <__aeabi_dcmpun>
 8012b44:	b140      	cbz	r0, 8012b58 <_printf_float+0xe0>
 8012b46:	464b      	mov	r3, r9
 8012b48:	2b00      	cmp	r3, #0
 8012b4a:	bfbc      	itt	lt
 8012b4c:	232d      	movlt	r3, #45	@ 0x2d
 8012b4e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8012b52:	4a7e      	ldr	r2, [pc, #504]	@ (8012d4c <_printf_float+0x2d4>)
 8012b54:	4b7e      	ldr	r3, [pc, #504]	@ (8012d50 <_printf_float+0x2d8>)
 8012b56:	e7d4      	b.n	8012b02 <_printf_float+0x8a>
 8012b58:	6863      	ldr	r3, [r4, #4]
 8012b5a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8012b5e:	9206      	str	r2, [sp, #24]
 8012b60:	1c5a      	adds	r2, r3, #1
 8012b62:	d13b      	bne.n	8012bdc <_printf_float+0x164>
 8012b64:	2306      	movs	r3, #6
 8012b66:	6063      	str	r3, [r4, #4]
 8012b68:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8012b6c:	2300      	movs	r3, #0
 8012b6e:	6022      	str	r2, [r4, #0]
 8012b70:	9303      	str	r3, [sp, #12]
 8012b72:	ab0a      	add	r3, sp, #40	@ 0x28
 8012b74:	e9cd a301 	strd	sl, r3, [sp, #4]
 8012b78:	ab09      	add	r3, sp, #36	@ 0x24
 8012b7a:	9300      	str	r3, [sp, #0]
 8012b7c:	6861      	ldr	r1, [r4, #4]
 8012b7e:	ec49 8b10 	vmov	d0, r8, r9
 8012b82:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8012b86:	4628      	mov	r0, r5
 8012b88:	f7ff fed6 	bl	8012938 <__cvt>
 8012b8c:	9b06      	ldr	r3, [sp, #24]
 8012b8e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012b90:	2b47      	cmp	r3, #71	@ 0x47
 8012b92:	4680      	mov	r8, r0
 8012b94:	d129      	bne.n	8012bea <_printf_float+0x172>
 8012b96:	1cc8      	adds	r0, r1, #3
 8012b98:	db02      	blt.n	8012ba0 <_printf_float+0x128>
 8012b9a:	6863      	ldr	r3, [r4, #4]
 8012b9c:	4299      	cmp	r1, r3
 8012b9e:	dd41      	ble.n	8012c24 <_printf_float+0x1ac>
 8012ba0:	f1aa 0a02 	sub.w	sl, sl, #2
 8012ba4:	fa5f fa8a 	uxtb.w	sl, sl
 8012ba8:	3901      	subs	r1, #1
 8012baa:	4652      	mov	r2, sl
 8012bac:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8012bb0:	9109      	str	r1, [sp, #36]	@ 0x24
 8012bb2:	f7ff ff26 	bl	8012a02 <__exponent>
 8012bb6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012bb8:	1813      	adds	r3, r2, r0
 8012bba:	2a01      	cmp	r2, #1
 8012bbc:	4681      	mov	r9, r0
 8012bbe:	6123      	str	r3, [r4, #16]
 8012bc0:	dc02      	bgt.n	8012bc8 <_printf_float+0x150>
 8012bc2:	6822      	ldr	r2, [r4, #0]
 8012bc4:	07d2      	lsls	r2, r2, #31
 8012bc6:	d501      	bpl.n	8012bcc <_printf_float+0x154>
 8012bc8:	3301      	adds	r3, #1
 8012bca:	6123      	str	r3, [r4, #16]
 8012bcc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	d0a2      	beq.n	8012b1a <_printf_float+0xa2>
 8012bd4:	232d      	movs	r3, #45	@ 0x2d
 8012bd6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012bda:	e79e      	b.n	8012b1a <_printf_float+0xa2>
 8012bdc:	9a06      	ldr	r2, [sp, #24]
 8012bde:	2a47      	cmp	r2, #71	@ 0x47
 8012be0:	d1c2      	bne.n	8012b68 <_printf_float+0xf0>
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	d1c0      	bne.n	8012b68 <_printf_float+0xf0>
 8012be6:	2301      	movs	r3, #1
 8012be8:	e7bd      	b.n	8012b66 <_printf_float+0xee>
 8012bea:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8012bee:	d9db      	bls.n	8012ba8 <_printf_float+0x130>
 8012bf0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8012bf4:	d118      	bne.n	8012c28 <_printf_float+0x1b0>
 8012bf6:	2900      	cmp	r1, #0
 8012bf8:	6863      	ldr	r3, [r4, #4]
 8012bfa:	dd0b      	ble.n	8012c14 <_printf_float+0x19c>
 8012bfc:	6121      	str	r1, [r4, #16]
 8012bfe:	b913      	cbnz	r3, 8012c06 <_printf_float+0x18e>
 8012c00:	6822      	ldr	r2, [r4, #0]
 8012c02:	07d0      	lsls	r0, r2, #31
 8012c04:	d502      	bpl.n	8012c0c <_printf_float+0x194>
 8012c06:	3301      	adds	r3, #1
 8012c08:	440b      	add	r3, r1
 8012c0a:	6123      	str	r3, [r4, #16]
 8012c0c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8012c0e:	f04f 0900 	mov.w	r9, #0
 8012c12:	e7db      	b.n	8012bcc <_printf_float+0x154>
 8012c14:	b913      	cbnz	r3, 8012c1c <_printf_float+0x1a4>
 8012c16:	6822      	ldr	r2, [r4, #0]
 8012c18:	07d2      	lsls	r2, r2, #31
 8012c1a:	d501      	bpl.n	8012c20 <_printf_float+0x1a8>
 8012c1c:	3302      	adds	r3, #2
 8012c1e:	e7f4      	b.n	8012c0a <_printf_float+0x192>
 8012c20:	2301      	movs	r3, #1
 8012c22:	e7f2      	b.n	8012c0a <_printf_float+0x192>
 8012c24:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8012c28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012c2a:	4299      	cmp	r1, r3
 8012c2c:	db05      	blt.n	8012c3a <_printf_float+0x1c2>
 8012c2e:	6823      	ldr	r3, [r4, #0]
 8012c30:	6121      	str	r1, [r4, #16]
 8012c32:	07d8      	lsls	r0, r3, #31
 8012c34:	d5ea      	bpl.n	8012c0c <_printf_float+0x194>
 8012c36:	1c4b      	adds	r3, r1, #1
 8012c38:	e7e7      	b.n	8012c0a <_printf_float+0x192>
 8012c3a:	2900      	cmp	r1, #0
 8012c3c:	bfd4      	ite	le
 8012c3e:	f1c1 0202 	rsble	r2, r1, #2
 8012c42:	2201      	movgt	r2, #1
 8012c44:	4413      	add	r3, r2
 8012c46:	e7e0      	b.n	8012c0a <_printf_float+0x192>
 8012c48:	6823      	ldr	r3, [r4, #0]
 8012c4a:	055a      	lsls	r2, r3, #21
 8012c4c:	d407      	bmi.n	8012c5e <_printf_float+0x1e6>
 8012c4e:	6923      	ldr	r3, [r4, #16]
 8012c50:	4642      	mov	r2, r8
 8012c52:	4631      	mov	r1, r6
 8012c54:	4628      	mov	r0, r5
 8012c56:	47b8      	blx	r7
 8012c58:	3001      	adds	r0, #1
 8012c5a:	d12b      	bne.n	8012cb4 <_printf_float+0x23c>
 8012c5c:	e767      	b.n	8012b2e <_printf_float+0xb6>
 8012c5e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8012c62:	f240 80dd 	bls.w	8012e20 <_printf_float+0x3a8>
 8012c66:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8012c6a:	2200      	movs	r2, #0
 8012c6c:	2300      	movs	r3, #0
 8012c6e:	f7ed ff5b 	bl	8000b28 <__aeabi_dcmpeq>
 8012c72:	2800      	cmp	r0, #0
 8012c74:	d033      	beq.n	8012cde <_printf_float+0x266>
 8012c76:	4a37      	ldr	r2, [pc, #220]	@ (8012d54 <_printf_float+0x2dc>)
 8012c78:	2301      	movs	r3, #1
 8012c7a:	4631      	mov	r1, r6
 8012c7c:	4628      	mov	r0, r5
 8012c7e:	47b8      	blx	r7
 8012c80:	3001      	adds	r0, #1
 8012c82:	f43f af54 	beq.w	8012b2e <_printf_float+0xb6>
 8012c86:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8012c8a:	4543      	cmp	r3, r8
 8012c8c:	db02      	blt.n	8012c94 <_printf_float+0x21c>
 8012c8e:	6823      	ldr	r3, [r4, #0]
 8012c90:	07d8      	lsls	r0, r3, #31
 8012c92:	d50f      	bpl.n	8012cb4 <_printf_float+0x23c>
 8012c94:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012c98:	4631      	mov	r1, r6
 8012c9a:	4628      	mov	r0, r5
 8012c9c:	47b8      	blx	r7
 8012c9e:	3001      	adds	r0, #1
 8012ca0:	f43f af45 	beq.w	8012b2e <_printf_float+0xb6>
 8012ca4:	f04f 0900 	mov.w	r9, #0
 8012ca8:	f108 38ff 	add.w	r8, r8, #4294967295
 8012cac:	f104 0a1a 	add.w	sl, r4, #26
 8012cb0:	45c8      	cmp	r8, r9
 8012cb2:	dc09      	bgt.n	8012cc8 <_printf_float+0x250>
 8012cb4:	6823      	ldr	r3, [r4, #0]
 8012cb6:	079b      	lsls	r3, r3, #30
 8012cb8:	f100 8103 	bmi.w	8012ec2 <_printf_float+0x44a>
 8012cbc:	68e0      	ldr	r0, [r4, #12]
 8012cbe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012cc0:	4298      	cmp	r0, r3
 8012cc2:	bfb8      	it	lt
 8012cc4:	4618      	movlt	r0, r3
 8012cc6:	e734      	b.n	8012b32 <_printf_float+0xba>
 8012cc8:	2301      	movs	r3, #1
 8012cca:	4652      	mov	r2, sl
 8012ccc:	4631      	mov	r1, r6
 8012cce:	4628      	mov	r0, r5
 8012cd0:	47b8      	blx	r7
 8012cd2:	3001      	adds	r0, #1
 8012cd4:	f43f af2b 	beq.w	8012b2e <_printf_float+0xb6>
 8012cd8:	f109 0901 	add.w	r9, r9, #1
 8012cdc:	e7e8      	b.n	8012cb0 <_printf_float+0x238>
 8012cde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	dc39      	bgt.n	8012d58 <_printf_float+0x2e0>
 8012ce4:	4a1b      	ldr	r2, [pc, #108]	@ (8012d54 <_printf_float+0x2dc>)
 8012ce6:	2301      	movs	r3, #1
 8012ce8:	4631      	mov	r1, r6
 8012cea:	4628      	mov	r0, r5
 8012cec:	47b8      	blx	r7
 8012cee:	3001      	adds	r0, #1
 8012cf0:	f43f af1d 	beq.w	8012b2e <_printf_float+0xb6>
 8012cf4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8012cf8:	ea59 0303 	orrs.w	r3, r9, r3
 8012cfc:	d102      	bne.n	8012d04 <_printf_float+0x28c>
 8012cfe:	6823      	ldr	r3, [r4, #0]
 8012d00:	07d9      	lsls	r1, r3, #31
 8012d02:	d5d7      	bpl.n	8012cb4 <_printf_float+0x23c>
 8012d04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012d08:	4631      	mov	r1, r6
 8012d0a:	4628      	mov	r0, r5
 8012d0c:	47b8      	blx	r7
 8012d0e:	3001      	adds	r0, #1
 8012d10:	f43f af0d 	beq.w	8012b2e <_printf_float+0xb6>
 8012d14:	f04f 0a00 	mov.w	sl, #0
 8012d18:	f104 0b1a 	add.w	fp, r4, #26
 8012d1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012d1e:	425b      	negs	r3, r3
 8012d20:	4553      	cmp	r3, sl
 8012d22:	dc01      	bgt.n	8012d28 <_printf_float+0x2b0>
 8012d24:	464b      	mov	r3, r9
 8012d26:	e793      	b.n	8012c50 <_printf_float+0x1d8>
 8012d28:	2301      	movs	r3, #1
 8012d2a:	465a      	mov	r2, fp
 8012d2c:	4631      	mov	r1, r6
 8012d2e:	4628      	mov	r0, r5
 8012d30:	47b8      	blx	r7
 8012d32:	3001      	adds	r0, #1
 8012d34:	f43f aefb 	beq.w	8012b2e <_printf_float+0xb6>
 8012d38:	f10a 0a01 	add.w	sl, sl, #1
 8012d3c:	e7ee      	b.n	8012d1c <_printf_float+0x2a4>
 8012d3e:	bf00      	nop
 8012d40:	7fefffff 	.word	0x7fefffff
 8012d44:	0805d710 	.word	0x0805d710
 8012d48:	0805d714 	.word	0x0805d714
 8012d4c:	0805d718 	.word	0x0805d718
 8012d50:	0805d71c 	.word	0x0805d71c
 8012d54:	0805db40 	.word	0x0805db40
 8012d58:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8012d5a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8012d5e:	4553      	cmp	r3, sl
 8012d60:	bfa8      	it	ge
 8012d62:	4653      	movge	r3, sl
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	4699      	mov	r9, r3
 8012d68:	dc36      	bgt.n	8012dd8 <_printf_float+0x360>
 8012d6a:	f04f 0b00 	mov.w	fp, #0
 8012d6e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012d72:	f104 021a 	add.w	r2, r4, #26
 8012d76:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8012d78:	9306      	str	r3, [sp, #24]
 8012d7a:	eba3 0309 	sub.w	r3, r3, r9
 8012d7e:	455b      	cmp	r3, fp
 8012d80:	dc31      	bgt.n	8012de6 <_printf_float+0x36e>
 8012d82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012d84:	459a      	cmp	sl, r3
 8012d86:	dc3a      	bgt.n	8012dfe <_printf_float+0x386>
 8012d88:	6823      	ldr	r3, [r4, #0]
 8012d8a:	07da      	lsls	r2, r3, #31
 8012d8c:	d437      	bmi.n	8012dfe <_printf_float+0x386>
 8012d8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012d90:	ebaa 0903 	sub.w	r9, sl, r3
 8012d94:	9b06      	ldr	r3, [sp, #24]
 8012d96:	ebaa 0303 	sub.w	r3, sl, r3
 8012d9a:	4599      	cmp	r9, r3
 8012d9c:	bfa8      	it	ge
 8012d9e:	4699      	movge	r9, r3
 8012da0:	f1b9 0f00 	cmp.w	r9, #0
 8012da4:	dc33      	bgt.n	8012e0e <_printf_float+0x396>
 8012da6:	f04f 0800 	mov.w	r8, #0
 8012daa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012dae:	f104 0b1a 	add.w	fp, r4, #26
 8012db2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012db4:	ebaa 0303 	sub.w	r3, sl, r3
 8012db8:	eba3 0309 	sub.w	r3, r3, r9
 8012dbc:	4543      	cmp	r3, r8
 8012dbe:	f77f af79 	ble.w	8012cb4 <_printf_float+0x23c>
 8012dc2:	2301      	movs	r3, #1
 8012dc4:	465a      	mov	r2, fp
 8012dc6:	4631      	mov	r1, r6
 8012dc8:	4628      	mov	r0, r5
 8012dca:	47b8      	blx	r7
 8012dcc:	3001      	adds	r0, #1
 8012dce:	f43f aeae 	beq.w	8012b2e <_printf_float+0xb6>
 8012dd2:	f108 0801 	add.w	r8, r8, #1
 8012dd6:	e7ec      	b.n	8012db2 <_printf_float+0x33a>
 8012dd8:	4642      	mov	r2, r8
 8012dda:	4631      	mov	r1, r6
 8012ddc:	4628      	mov	r0, r5
 8012dde:	47b8      	blx	r7
 8012de0:	3001      	adds	r0, #1
 8012de2:	d1c2      	bne.n	8012d6a <_printf_float+0x2f2>
 8012de4:	e6a3      	b.n	8012b2e <_printf_float+0xb6>
 8012de6:	2301      	movs	r3, #1
 8012de8:	4631      	mov	r1, r6
 8012dea:	4628      	mov	r0, r5
 8012dec:	9206      	str	r2, [sp, #24]
 8012dee:	47b8      	blx	r7
 8012df0:	3001      	adds	r0, #1
 8012df2:	f43f ae9c 	beq.w	8012b2e <_printf_float+0xb6>
 8012df6:	9a06      	ldr	r2, [sp, #24]
 8012df8:	f10b 0b01 	add.w	fp, fp, #1
 8012dfc:	e7bb      	b.n	8012d76 <_printf_float+0x2fe>
 8012dfe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012e02:	4631      	mov	r1, r6
 8012e04:	4628      	mov	r0, r5
 8012e06:	47b8      	blx	r7
 8012e08:	3001      	adds	r0, #1
 8012e0a:	d1c0      	bne.n	8012d8e <_printf_float+0x316>
 8012e0c:	e68f      	b.n	8012b2e <_printf_float+0xb6>
 8012e0e:	9a06      	ldr	r2, [sp, #24]
 8012e10:	464b      	mov	r3, r9
 8012e12:	4442      	add	r2, r8
 8012e14:	4631      	mov	r1, r6
 8012e16:	4628      	mov	r0, r5
 8012e18:	47b8      	blx	r7
 8012e1a:	3001      	adds	r0, #1
 8012e1c:	d1c3      	bne.n	8012da6 <_printf_float+0x32e>
 8012e1e:	e686      	b.n	8012b2e <_printf_float+0xb6>
 8012e20:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8012e24:	f1ba 0f01 	cmp.w	sl, #1
 8012e28:	dc01      	bgt.n	8012e2e <_printf_float+0x3b6>
 8012e2a:	07db      	lsls	r3, r3, #31
 8012e2c:	d536      	bpl.n	8012e9c <_printf_float+0x424>
 8012e2e:	2301      	movs	r3, #1
 8012e30:	4642      	mov	r2, r8
 8012e32:	4631      	mov	r1, r6
 8012e34:	4628      	mov	r0, r5
 8012e36:	47b8      	blx	r7
 8012e38:	3001      	adds	r0, #1
 8012e3a:	f43f ae78 	beq.w	8012b2e <_printf_float+0xb6>
 8012e3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012e42:	4631      	mov	r1, r6
 8012e44:	4628      	mov	r0, r5
 8012e46:	47b8      	blx	r7
 8012e48:	3001      	adds	r0, #1
 8012e4a:	f43f ae70 	beq.w	8012b2e <_printf_float+0xb6>
 8012e4e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8012e52:	2200      	movs	r2, #0
 8012e54:	2300      	movs	r3, #0
 8012e56:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012e5a:	f7ed fe65 	bl	8000b28 <__aeabi_dcmpeq>
 8012e5e:	b9c0      	cbnz	r0, 8012e92 <_printf_float+0x41a>
 8012e60:	4653      	mov	r3, sl
 8012e62:	f108 0201 	add.w	r2, r8, #1
 8012e66:	4631      	mov	r1, r6
 8012e68:	4628      	mov	r0, r5
 8012e6a:	47b8      	blx	r7
 8012e6c:	3001      	adds	r0, #1
 8012e6e:	d10c      	bne.n	8012e8a <_printf_float+0x412>
 8012e70:	e65d      	b.n	8012b2e <_printf_float+0xb6>
 8012e72:	2301      	movs	r3, #1
 8012e74:	465a      	mov	r2, fp
 8012e76:	4631      	mov	r1, r6
 8012e78:	4628      	mov	r0, r5
 8012e7a:	47b8      	blx	r7
 8012e7c:	3001      	adds	r0, #1
 8012e7e:	f43f ae56 	beq.w	8012b2e <_printf_float+0xb6>
 8012e82:	f108 0801 	add.w	r8, r8, #1
 8012e86:	45d0      	cmp	r8, sl
 8012e88:	dbf3      	blt.n	8012e72 <_printf_float+0x3fa>
 8012e8a:	464b      	mov	r3, r9
 8012e8c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8012e90:	e6df      	b.n	8012c52 <_printf_float+0x1da>
 8012e92:	f04f 0800 	mov.w	r8, #0
 8012e96:	f104 0b1a 	add.w	fp, r4, #26
 8012e9a:	e7f4      	b.n	8012e86 <_printf_float+0x40e>
 8012e9c:	2301      	movs	r3, #1
 8012e9e:	4642      	mov	r2, r8
 8012ea0:	e7e1      	b.n	8012e66 <_printf_float+0x3ee>
 8012ea2:	2301      	movs	r3, #1
 8012ea4:	464a      	mov	r2, r9
 8012ea6:	4631      	mov	r1, r6
 8012ea8:	4628      	mov	r0, r5
 8012eaa:	47b8      	blx	r7
 8012eac:	3001      	adds	r0, #1
 8012eae:	f43f ae3e 	beq.w	8012b2e <_printf_float+0xb6>
 8012eb2:	f108 0801 	add.w	r8, r8, #1
 8012eb6:	68e3      	ldr	r3, [r4, #12]
 8012eb8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012eba:	1a5b      	subs	r3, r3, r1
 8012ebc:	4543      	cmp	r3, r8
 8012ebe:	dcf0      	bgt.n	8012ea2 <_printf_float+0x42a>
 8012ec0:	e6fc      	b.n	8012cbc <_printf_float+0x244>
 8012ec2:	f04f 0800 	mov.w	r8, #0
 8012ec6:	f104 0919 	add.w	r9, r4, #25
 8012eca:	e7f4      	b.n	8012eb6 <_printf_float+0x43e>

08012ecc <_printf_common>:
 8012ecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012ed0:	4616      	mov	r6, r2
 8012ed2:	4698      	mov	r8, r3
 8012ed4:	688a      	ldr	r2, [r1, #8]
 8012ed6:	690b      	ldr	r3, [r1, #16]
 8012ed8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012edc:	4293      	cmp	r3, r2
 8012ede:	bfb8      	it	lt
 8012ee0:	4613      	movlt	r3, r2
 8012ee2:	6033      	str	r3, [r6, #0]
 8012ee4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012ee8:	4607      	mov	r7, r0
 8012eea:	460c      	mov	r4, r1
 8012eec:	b10a      	cbz	r2, 8012ef2 <_printf_common+0x26>
 8012eee:	3301      	adds	r3, #1
 8012ef0:	6033      	str	r3, [r6, #0]
 8012ef2:	6823      	ldr	r3, [r4, #0]
 8012ef4:	0699      	lsls	r1, r3, #26
 8012ef6:	bf42      	ittt	mi
 8012ef8:	6833      	ldrmi	r3, [r6, #0]
 8012efa:	3302      	addmi	r3, #2
 8012efc:	6033      	strmi	r3, [r6, #0]
 8012efe:	6825      	ldr	r5, [r4, #0]
 8012f00:	f015 0506 	ands.w	r5, r5, #6
 8012f04:	d106      	bne.n	8012f14 <_printf_common+0x48>
 8012f06:	f104 0a19 	add.w	sl, r4, #25
 8012f0a:	68e3      	ldr	r3, [r4, #12]
 8012f0c:	6832      	ldr	r2, [r6, #0]
 8012f0e:	1a9b      	subs	r3, r3, r2
 8012f10:	42ab      	cmp	r3, r5
 8012f12:	dc26      	bgt.n	8012f62 <_printf_common+0x96>
 8012f14:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012f18:	6822      	ldr	r2, [r4, #0]
 8012f1a:	3b00      	subs	r3, #0
 8012f1c:	bf18      	it	ne
 8012f1e:	2301      	movne	r3, #1
 8012f20:	0692      	lsls	r2, r2, #26
 8012f22:	d42b      	bmi.n	8012f7c <_printf_common+0xb0>
 8012f24:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012f28:	4641      	mov	r1, r8
 8012f2a:	4638      	mov	r0, r7
 8012f2c:	47c8      	blx	r9
 8012f2e:	3001      	adds	r0, #1
 8012f30:	d01e      	beq.n	8012f70 <_printf_common+0xa4>
 8012f32:	6823      	ldr	r3, [r4, #0]
 8012f34:	6922      	ldr	r2, [r4, #16]
 8012f36:	f003 0306 	and.w	r3, r3, #6
 8012f3a:	2b04      	cmp	r3, #4
 8012f3c:	bf02      	ittt	eq
 8012f3e:	68e5      	ldreq	r5, [r4, #12]
 8012f40:	6833      	ldreq	r3, [r6, #0]
 8012f42:	1aed      	subeq	r5, r5, r3
 8012f44:	68a3      	ldr	r3, [r4, #8]
 8012f46:	bf0c      	ite	eq
 8012f48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012f4c:	2500      	movne	r5, #0
 8012f4e:	4293      	cmp	r3, r2
 8012f50:	bfc4      	itt	gt
 8012f52:	1a9b      	subgt	r3, r3, r2
 8012f54:	18ed      	addgt	r5, r5, r3
 8012f56:	2600      	movs	r6, #0
 8012f58:	341a      	adds	r4, #26
 8012f5a:	42b5      	cmp	r5, r6
 8012f5c:	d11a      	bne.n	8012f94 <_printf_common+0xc8>
 8012f5e:	2000      	movs	r0, #0
 8012f60:	e008      	b.n	8012f74 <_printf_common+0xa8>
 8012f62:	2301      	movs	r3, #1
 8012f64:	4652      	mov	r2, sl
 8012f66:	4641      	mov	r1, r8
 8012f68:	4638      	mov	r0, r7
 8012f6a:	47c8      	blx	r9
 8012f6c:	3001      	adds	r0, #1
 8012f6e:	d103      	bne.n	8012f78 <_printf_common+0xac>
 8012f70:	f04f 30ff 	mov.w	r0, #4294967295
 8012f74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f78:	3501      	adds	r5, #1
 8012f7a:	e7c6      	b.n	8012f0a <_printf_common+0x3e>
 8012f7c:	18e1      	adds	r1, r4, r3
 8012f7e:	1c5a      	adds	r2, r3, #1
 8012f80:	2030      	movs	r0, #48	@ 0x30
 8012f82:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8012f86:	4422      	add	r2, r4
 8012f88:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012f8c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012f90:	3302      	adds	r3, #2
 8012f92:	e7c7      	b.n	8012f24 <_printf_common+0x58>
 8012f94:	2301      	movs	r3, #1
 8012f96:	4622      	mov	r2, r4
 8012f98:	4641      	mov	r1, r8
 8012f9a:	4638      	mov	r0, r7
 8012f9c:	47c8      	blx	r9
 8012f9e:	3001      	adds	r0, #1
 8012fa0:	d0e6      	beq.n	8012f70 <_printf_common+0xa4>
 8012fa2:	3601      	adds	r6, #1
 8012fa4:	e7d9      	b.n	8012f5a <_printf_common+0x8e>
	...

08012fa8 <_printf_i>:
 8012fa8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012fac:	7e0f      	ldrb	r7, [r1, #24]
 8012fae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012fb0:	2f78      	cmp	r7, #120	@ 0x78
 8012fb2:	4691      	mov	r9, r2
 8012fb4:	4680      	mov	r8, r0
 8012fb6:	460c      	mov	r4, r1
 8012fb8:	469a      	mov	sl, r3
 8012fba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8012fbe:	d807      	bhi.n	8012fd0 <_printf_i+0x28>
 8012fc0:	2f62      	cmp	r7, #98	@ 0x62
 8012fc2:	d80a      	bhi.n	8012fda <_printf_i+0x32>
 8012fc4:	2f00      	cmp	r7, #0
 8012fc6:	f000 80d2 	beq.w	801316e <_printf_i+0x1c6>
 8012fca:	2f58      	cmp	r7, #88	@ 0x58
 8012fcc:	f000 80b9 	beq.w	8013142 <_printf_i+0x19a>
 8012fd0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012fd4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012fd8:	e03a      	b.n	8013050 <_printf_i+0xa8>
 8012fda:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8012fde:	2b15      	cmp	r3, #21
 8012fe0:	d8f6      	bhi.n	8012fd0 <_printf_i+0x28>
 8012fe2:	a101      	add	r1, pc, #4	@ (adr r1, 8012fe8 <_printf_i+0x40>)
 8012fe4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012fe8:	08013041 	.word	0x08013041
 8012fec:	08013055 	.word	0x08013055
 8012ff0:	08012fd1 	.word	0x08012fd1
 8012ff4:	08012fd1 	.word	0x08012fd1
 8012ff8:	08012fd1 	.word	0x08012fd1
 8012ffc:	08012fd1 	.word	0x08012fd1
 8013000:	08013055 	.word	0x08013055
 8013004:	08012fd1 	.word	0x08012fd1
 8013008:	08012fd1 	.word	0x08012fd1
 801300c:	08012fd1 	.word	0x08012fd1
 8013010:	08012fd1 	.word	0x08012fd1
 8013014:	08013155 	.word	0x08013155
 8013018:	0801307f 	.word	0x0801307f
 801301c:	0801310f 	.word	0x0801310f
 8013020:	08012fd1 	.word	0x08012fd1
 8013024:	08012fd1 	.word	0x08012fd1
 8013028:	08013177 	.word	0x08013177
 801302c:	08012fd1 	.word	0x08012fd1
 8013030:	0801307f 	.word	0x0801307f
 8013034:	08012fd1 	.word	0x08012fd1
 8013038:	08012fd1 	.word	0x08012fd1
 801303c:	08013117 	.word	0x08013117
 8013040:	6833      	ldr	r3, [r6, #0]
 8013042:	1d1a      	adds	r2, r3, #4
 8013044:	681b      	ldr	r3, [r3, #0]
 8013046:	6032      	str	r2, [r6, #0]
 8013048:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801304c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8013050:	2301      	movs	r3, #1
 8013052:	e09d      	b.n	8013190 <_printf_i+0x1e8>
 8013054:	6833      	ldr	r3, [r6, #0]
 8013056:	6820      	ldr	r0, [r4, #0]
 8013058:	1d19      	adds	r1, r3, #4
 801305a:	6031      	str	r1, [r6, #0]
 801305c:	0606      	lsls	r6, r0, #24
 801305e:	d501      	bpl.n	8013064 <_printf_i+0xbc>
 8013060:	681d      	ldr	r5, [r3, #0]
 8013062:	e003      	b.n	801306c <_printf_i+0xc4>
 8013064:	0645      	lsls	r5, r0, #25
 8013066:	d5fb      	bpl.n	8013060 <_printf_i+0xb8>
 8013068:	f9b3 5000 	ldrsh.w	r5, [r3]
 801306c:	2d00      	cmp	r5, #0
 801306e:	da03      	bge.n	8013078 <_printf_i+0xd0>
 8013070:	232d      	movs	r3, #45	@ 0x2d
 8013072:	426d      	negs	r5, r5
 8013074:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013078:	4859      	ldr	r0, [pc, #356]	@ (80131e0 <_printf_i+0x238>)
 801307a:	230a      	movs	r3, #10
 801307c:	e011      	b.n	80130a2 <_printf_i+0xfa>
 801307e:	6821      	ldr	r1, [r4, #0]
 8013080:	6833      	ldr	r3, [r6, #0]
 8013082:	0608      	lsls	r0, r1, #24
 8013084:	f853 5b04 	ldr.w	r5, [r3], #4
 8013088:	d402      	bmi.n	8013090 <_printf_i+0xe8>
 801308a:	0649      	lsls	r1, r1, #25
 801308c:	bf48      	it	mi
 801308e:	b2ad      	uxthmi	r5, r5
 8013090:	2f6f      	cmp	r7, #111	@ 0x6f
 8013092:	4853      	ldr	r0, [pc, #332]	@ (80131e0 <_printf_i+0x238>)
 8013094:	6033      	str	r3, [r6, #0]
 8013096:	bf14      	ite	ne
 8013098:	230a      	movne	r3, #10
 801309a:	2308      	moveq	r3, #8
 801309c:	2100      	movs	r1, #0
 801309e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80130a2:	6866      	ldr	r6, [r4, #4]
 80130a4:	60a6      	str	r6, [r4, #8]
 80130a6:	2e00      	cmp	r6, #0
 80130a8:	bfa2      	ittt	ge
 80130aa:	6821      	ldrge	r1, [r4, #0]
 80130ac:	f021 0104 	bicge.w	r1, r1, #4
 80130b0:	6021      	strge	r1, [r4, #0]
 80130b2:	b90d      	cbnz	r5, 80130b8 <_printf_i+0x110>
 80130b4:	2e00      	cmp	r6, #0
 80130b6:	d04b      	beq.n	8013150 <_printf_i+0x1a8>
 80130b8:	4616      	mov	r6, r2
 80130ba:	fbb5 f1f3 	udiv	r1, r5, r3
 80130be:	fb03 5711 	mls	r7, r3, r1, r5
 80130c2:	5dc7      	ldrb	r7, [r0, r7]
 80130c4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80130c8:	462f      	mov	r7, r5
 80130ca:	42bb      	cmp	r3, r7
 80130cc:	460d      	mov	r5, r1
 80130ce:	d9f4      	bls.n	80130ba <_printf_i+0x112>
 80130d0:	2b08      	cmp	r3, #8
 80130d2:	d10b      	bne.n	80130ec <_printf_i+0x144>
 80130d4:	6823      	ldr	r3, [r4, #0]
 80130d6:	07df      	lsls	r7, r3, #31
 80130d8:	d508      	bpl.n	80130ec <_printf_i+0x144>
 80130da:	6923      	ldr	r3, [r4, #16]
 80130dc:	6861      	ldr	r1, [r4, #4]
 80130de:	4299      	cmp	r1, r3
 80130e0:	bfde      	ittt	le
 80130e2:	2330      	movle	r3, #48	@ 0x30
 80130e4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80130e8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80130ec:	1b92      	subs	r2, r2, r6
 80130ee:	6122      	str	r2, [r4, #16]
 80130f0:	f8cd a000 	str.w	sl, [sp]
 80130f4:	464b      	mov	r3, r9
 80130f6:	aa03      	add	r2, sp, #12
 80130f8:	4621      	mov	r1, r4
 80130fa:	4640      	mov	r0, r8
 80130fc:	f7ff fee6 	bl	8012ecc <_printf_common>
 8013100:	3001      	adds	r0, #1
 8013102:	d14a      	bne.n	801319a <_printf_i+0x1f2>
 8013104:	f04f 30ff 	mov.w	r0, #4294967295
 8013108:	b004      	add	sp, #16
 801310a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801310e:	6823      	ldr	r3, [r4, #0]
 8013110:	f043 0320 	orr.w	r3, r3, #32
 8013114:	6023      	str	r3, [r4, #0]
 8013116:	4833      	ldr	r0, [pc, #204]	@ (80131e4 <_printf_i+0x23c>)
 8013118:	2778      	movs	r7, #120	@ 0x78
 801311a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801311e:	6823      	ldr	r3, [r4, #0]
 8013120:	6831      	ldr	r1, [r6, #0]
 8013122:	061f      	lsls	r7, r3, #24
 8013124:	f851 5b04 	ldr.w	r5, [r1], #4
 8013128:	d402      	bmi.n	8013130 <_printf_i+0x188>
 801312a:	065f      	lsls	r7, r3, #25
 801312c:	bf48      	it	mi
 801312e:	b2ad      	uxthmi	r5, r5
 8013130:	6031      	str	r1, [r6, #0]
 8013132:	07d9      	lsls	r1, r3, #31
 8013134:	bf44      	itt	mi
 8013136:	f043 0320 	orrmi.w	r3, r3, #32
 801313a:	6023      	strmi	r3, [r4, #0]
 801313c:	b11d      	cbz	r5, 8013146 <_printf_i+0x19e>
 801313e:	2310      	movs	r3, #16
 8013140:	e7ac      	b.n	801309c <_printf_i+0xf4>
 8013142:	4827      	ldr	r0, [pc, #156]	@ (80131e0 <_printf_i+0x238>)
 8013144:	e7e9      	b.n	801311a <_printf_i+0x172>
 8013146:	6823      	ldr	r3, [r4, #0]
 8013148:	f023 0320 	bic.w	r3, r3, #32
 801314c:	6023      	str	r3, [r4, #0]
 801314e:	e7f6      	b.n	801313e <_printf_i+0x196>
 8013150:	4616      	mov	r6, r2
 8013152:	e7bd      	b.n	80130d0 <_printf_i+0x128>
 8013154:	6833      	ldr	r3, [r6, #0]
 8013156:	6825      	ldr	r5, [r4, #0]
 8013158:	6961      	ldr	r1, [r4, #20]
 801315a:	1d18      	adds	r0, r3, #4
 801315c:	6030      	str	r0, [r6, #0]
 801315e:	062e      	lsls	r6, r5, #24
 8013160:	681b      	ldr	r3, [r3, #0]
 8013162:	d501      	bpl.n	8013168 <_printf_i+0x1c0>
 8013164:	6019      	str	r1, [r3, #0]
 8013166:	e002      	b.n	801316e <_printf_i+0x1c6>
 8013168:	0668      	lsls	r0, r5, #25
 801316a:	d5fb      	bpl.n	8013164 <_printf_i+0x1bc>
 801316c:	8019      	strh	r1, [r3, #0]
 801316e:	2300      	movs	r3, #0
 8013170:	6123      	str	r3, [r4, #16]
 8013172:	4616      	mov	r6, r2
 8013174:	e7bc      	b.n	80130f0 <_printf_i+0x148>
 8013176:	6833      	ldr	r3, [r6, #0]
 8013178:	1d1a      	adds	r2, r3, #4
 801317a:	6032      	str	r2, [r6, #0]
 801317c:	681e      	ldr	r6, [r3, #0]
 801317e:	6862      	ldr	r2, [r4, #4]
 8013180:	2100      	movs	r1, #0
 8013182:	4630      	mov	r0, r6
 8013184:	f7ed f854 	bl	8000230 <memchr>
 8013188:	b108      	cbz	r0, 801318e <_printf_i+0x1e6>
 801318a:	1b80      	subs	r0, r0, r6
 801318c:	6060      	str	r0, [r4, #4]
 801318e:	6863      	ldr	r3, [r4, #4]
 8013190:	6123      	str	r3, [r4, #16]
 8013192:	2300      	movs	r3, #0
 8013194:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013198:	e7aa      	b.n	80130f0 <_printf_i+0x148>
 801319a:	6923      	ldr	r3, [r4, #16]
 801319c:	4632      	mov	r2, r6
 801319e:	4649      	mov	r1, r9
 80131a0:	4640      	mov	r0, r8
 80131a2:	47d0      	blx	sl
 80131a4:	3001      	adds	r0, #1
 80131a6:	d0ad      	beq.n	8013104 <_printf_i+0x15c>
 80131a8:	6823      	ldr	r3, [r4, #0]
 80131aa:	079b      	lsls	r3, r3, #30
 80131ac:	d413      	bmi.n	80131d6 <_printf_i+0x22e>
 80131ae:	68e0      	ldr	r0, [r4, #12]
 80131b0:	9b03      	ldr	r3, [sp, #12]
 80131b2:	4298      	cmp	r0, r3
 80131b4:	bfb8      	it	lt
 80131b6:	4618      	movlt	r0, r3
 80131b8:	e7a6      	b.n	8013108 <_printf_i+0x160>
 80131ba:	2301      	movs	r3, #1
 80131bc:	4632      	mov	r2, r6
 80131be:	4649      	mov	r1, r9
 80131c0:	4640      	mov	r0, r8
 80131c2:	47d0      	blx	sl
 80131c4:	3001      	adds	r0, #1
 80131c6:	d09d      	beq.n	8013104 <_printf_i+0x15c>
 80131c8:	3501      	adds	r5, #1
 80131ca:	68e3      	ldr	r3, [r4, #12]
 80131cc:	9903      	ldr	r1, [sp, #12]
 80131ce:	1a5b      	subs	r3, r3, r1
 80131d0:	42ab      	cmp	r3, r5
 80131d2:	dcf2      	bgt.n	80131ba <_printf_i+0x212>
 80131d4:	e7eb      	b.n	80131ae <_printf_i+0x206>
 80131d6:	2500      	movs	r5, #0
 80131d8:	f104 0619 	add.w	r6, r4, #25
 80131dc:	e7f5      	b.n	80131ca <_printf_i+0x222>
 80131de:	bf00      	nop
 80131e0:	0805d720 	.word	0x0805d720
 80131e4:	0805d731 	.word	0x0805d731

080131e8 <_scanf_float>:
 80131e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131ec:	b087      	sub	sp, #28
 80131ee:	4617      	mov	r7, r2
 80131f0:	9303      	str	r3, [sp, #12]
 80131f2:	688b      	ldr	r3, [r1, #8]
 80131f4:	1e5a      	subs	r2, r3, #1
 80131f6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80131fa:	bf81      	itttt	hi
 80131fc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8013200:	eb03 0b05 	addhi.w	fp, r3, r5
 8013204:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8013208:	608b      	strhi	r3, [r1, #8]
 801320a:	680b      	ldr	r3, [r1, #0]
 801320c:	460a      	mov	r2, r1
 801320e:	f04f 0500 	mov.w	r5, #0
 8013212:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8013216:	f842 3b1c 	str.w	r3, [r2], #28
 801321a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801321e:	4680      	mov	r8, r0
 8013220:	460c      	mov	r4, r1
 8013222:	bf98      	it	ls
 8013224:	f04f 0b00 	movls.w	fp, #0
 8013228:	9201      	str	r2, [sp, #4]
 801322a:	4616      	mov	r6, r2
 801322c:	46aa      	mov	sl, r5
 801322e:	46a9      	mov	r9, r5
 8013230:	9502      	str	r5, [sp, #8]
 8013232:	68a2      	ldr	r2, [r4, #8]
 8013234:	b152      	cbz	r2, 801324c <_scanf_float+0x64>
 8013236:	683b      	ldr	r3, [r7, #0]
 8013238:	781b      	ldrb	r3, [r3, #0]
 801323a:	2b4e      	cmp	r3, #78	@ 0x4e
 801323c:	d864      	bhi.n	8013308 <_scanf_float+0x120>
 801323e:	2b40      	cmp	r3, #64	@ 0x40
 8013240:	d83c      	bhi.n	80132bc <_scanf_float+0xd4>
 8013242:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8013246:	b2c8      	uxtb	r0, r1
 8013248:	280e      	cmp	r0, #14
 801324a:	d93a      	bls.n	80132c2 <_scanf_float+0xda>
 801324c:	f1b9 0f00 	cmp.w	r9, #0
 8013250:	d003      	beq.n	801325a <_scanf_float+0x72>
 8013252:	6823      	ldr	r3, [r4, #0]
 8013254:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8013258:	6023      	str	r3, [r4, #0]
 801325a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801325e:	f1ba 0f01 	cmp.w	sl, #1
 8013262:	f200 8117 	bhi.w	8013494 <_scanf_float+0x2ac>
 8013266:	9b01      	ldr	r3, [sp, #4]
 8013268:	429e      	cmp	r6, r3
 801326a:	f200 8108 	bhi.w	801347e <_scanf_float+0x296>
 801326e:	2001      	movs	r0, #1
 8013270:	b007      	add	sp, #28
 8013272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013276:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 801327a:	2a0d      	cmp	r2, #13
 801327c:	d8e6      	bhi.n	801324c <_scanf_float+0x64>
 801327e:	a101      	add	r1, pc, #4	@ (adr r1, 8013284 <_scanf_float+0x9c>)
 8013280:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8013284:	080133cb 	.word	0x080133cb
 8013288:	0801324d 	.word	0x0801324d
 801328c:	0801324d 	.word	0x0801324d
 8013290:	0801324d 	.word	0x0801324d
 8013294:	0801342b 	.word	0x0801342b
 8013298:	08013403 	.word	0x08013403
 801329c:	0801324d 	.word	0x0801324d
 80132a0:	0801324d 	.word	0x0801324d
 80132a4:	080133d9 	.word	0x080133d9
 80132a8:	0801324d 	.word	0x0801324d
 80132ac:	0801324d 	.word	0x0801324d
 80132b0:	0801324d 	.word	0x0801324d
 80132b4:	0801324d 	.word	0x0801324d
 80132b8:	08013391 	.word	0x08013391
 80132bc:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80132c0:	e7db      	b.n	801327a <_scanf_float+0x92>
 80132c2:	290e      	cmp	r1, #14
 80132c4:	d8c2      	bhi.n	801324c <_scanf_float+0x64>
 80132c6:	a001      	add	r0, pc, #4	@ (adr r0, 80132cc <_scanf_float+0xe4>)
 80132c8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80132cc:	08013381 	.word	0x08013381
 80132d0:	0801324d 	.word	0x0801324d
 80132d4:	08013381 	.word	0x08013381
 80132d8:	08013417 	.word	0x08013417
 80132dc:	0801324d 	.word	0x0801324d
 80132e0:	08013329 	.word	0x08013329
 80132e4:	08013367 	.word	0x08013367
 80132e8:	08013367 	.word	0x08013367
 80132ec:	08013367 	.word	0x08013367
 80132f0:	08013367 	.word	0x08013367
 80132f4:	08013367 	.word	0x08013367
 80132f8:	08013367 	.word	0x08013367
 80132fc:	08013367 	.word	0x08013367
 8013300:	08013367 	.word	0x08013367
 8013304:	08013367 	.word	0x08013367
 8013308:	2b6e      	cmp	r3, #110	@ 0x6e
 801330a:	d809      	bhi.n	8013320 <_scanf_float+0x138>
 801330c:	2b60      	cmp	r3, #96	@ 0x60
 801330e:	d8b2      	bhi.n	8013276 <_scanf_float+0x8e>
 8013310:	2b54      	cmp	r3, #84	@ 0x54
 8013312:	d07b      	beq.n	801340c <_scanf_float+0x224>
 8013314:	2b59      	cmp	r3, #89	@ 0x59
 8013316:	d199      	bne.n	801324c <_scanf_float+0x64>
 8013318:	2d07      	cmp	r5, #7
 801331a:	d197      	bne.n	801324c <_scanf_float+0x64>
 801331c:	2508      	movs	r5, #8
 801331e:	e02c      	b.n	801337a <_scanf_float+0x192>
 8013320:	2b74      	cmp	r3, #116	@ 0x74
 8013322:	d073      	beq.n	801340c <_scanf_float+0x224>
 8013324:	2b79      	cmp	r3, #121	@ 0x79
 8013326:	e7f6      	b.n	8013316 <_scanf_float+0x12e>
 8013328:	6821      	ldr	r1, [r4, #0]
 801332a:	05c8      	lsls	r0, r1, #23
 801332c:	d51b      	bpl.n	8013366 <_scanf_float+0x17e>
 801332e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8013332:	6021      	str	r1, [r4, #0]
 8013334:	f109 0901 	add.w	r9, r9, #1
 8013338:	f1bb 0f00 	cmp.w	fp, #0
 801333c:	d003      	beq.n	8013346 <_scanf_float+0x15e>
 801333e:	3201      	adds	r2, #1
 8013340:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013344:	60a2      	str	r2, [r4, #8]
 8013346:	68a3      	ldr	r3, [r4, #8]
 8013348:	3b01      	subs	r3, #1
 801334a:	60a3      	str	r3, [r4, #8]
 801334c:	6923      	ldr	r3, [r4, #16]
 801334e:	3301      	adds	r3, #1
 8013350:	6123      	str	r3, [r4, #16]
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	3b01      	subs	r3, #1
 8013356:	2b00      	cmp	r3, #0
 8013358:	607b      	str	r3, [r7, #4]
 801335a:	f340 8087 	ble.w	801346c <_scanf_float+0x284>
 801335e:	683b      	ldr	r3, [r7, #0]
 8013360:	3301      	adds	r3, #1
 8013362:	603b      	str	r3, [r7, #0]
 8013364:	e765      	b.n	8013232 <_scanf_float+0x4a>
 8013366:	eb1a 0105 	adds.w	r1, sl, r5
 801336a:	f47f af6f 	bne.w	801324c <_scanf_float+0x64>
 801336e:	6822      	ldr	r2, [r4, #0]
 8013370:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8013374:	6022      	str	r2, [r4, #0]
 8013376:	460d      	mov	r5, r1
 8013378:	468a      	mov	sl, r1
 801337a:	f806 3b01 	strb.w	r3, [r6], #1
 801337e:	e7e2      	b.n	8013346 <_scanf_float+0x15e>
 8013380:	6822      	ldr	r2, [r4, #0]
 8013382:	0610      	lsls	r0, r2, #24
 8013384:	f57f af62 	bpl.w	801324c <_scanf_float+0x64>
 8013388:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801338c:	6022      	str	r2, [r4, #0]
 801338e:	e7f4      	b.n	801337a <_scanf_float+0x192>
 8013390:	f1ba 0f00 	cmp.w	sl, #0
 8013394:	d10e      	bne.n	80133b4 <_scanf_float+0x1cc>
 8013396:	f1b9 0f00 	cmp.w	r9, #0
 801339a:	d10e      	bne.n	80133ba <_scanf_float+0x1d2>
 801339c:	6822      	ldr	r2, [r4, #0]
 801339e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80133a2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80133a6:	d108      	bne.n	80133ba <_scanf_float+0x1d2>
 80133a8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80133ac:	6022      	str	r2, [r4, #0]
 80133ae:	f04f 0a01 	mov.w	sl, #1
 80133b2:	e7e2      	b.n	801337a <_scanf_float+0x192>
 80133b4:	f1ba 0f02 	cmp.w	sl, #2
 80133b8:	d055      	beq.n	8013466 <_scanf_float+0x27e>
 80133ba:	2d01      	cmp	r5, #1
 80133bc:	d002      	beq.n	80133c4 <_scanf_float+0x1dc>
 80133be:	2d04      	cmp	r5, #4
 80133c0:	f47f af44 	bne.w	801324c <_scanf_float+0x64>
 80133c4:	3501      	adds	r5, #1
 80133c6:	b2ed      	uxtb	r5, r5
 80133c8:	e7d7      	b.n	801337a <_scanf_float+0x192>
 80133ca:	f1ba 0f01 	cmp.w	sl, #1
 80133ce:	f47f af3d 	bne.w	801324c <_scanf_float+0x64>
 80133d2:	f04f 0a02 	mov.w	sl, #2
 80133d6:	e7d0      	b.n	801337a <_scanf_float+0x192>
 80133d8:	b97d      	cbnz	r5, 80133fa <_scanf_float+0x212>
 80133da:	f1b9 0f00 	cmp.w	r9, #0
 80133de:	f47f af38 	bne.w	8013252 <_scanf_float+0x6a>
 80133e2:	6822      	ldr	r2, [r4, #0]
 80133e4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80133e8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80133ec:	f040 8108 	bne.w	8013600 <_scanf_float+0x418>
 80133f0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80133f4:	6022      	str	r2, [r4, #0]
 80133f6:	2501      	movs	r5, #1
 80133f8:	e7bf      	b.n	801337a <_scanf_float+0x192>
 80133fa:	2d03      	cmp	r5, #3
 80133fc:	d0e2      	beq.n	80133c4 <_scanf_float+0x1dc>
 80133fe:	2d05      	cmp	r5, #5
 8013400:	e7de      	b.n	80133c0 <_scanf_float+0x1d8>
 8013402:	2d02      	cmp	r5, #2
 8013404:	f47f af22 	bne.w	801324c <_scanf_float+0x64>
 8013408:	2503      	movs	r5, #3
 801340a:	e7b6      	b.n	801337a <_scanf_float+0x192>
 801340c:	2d06      	cmp	r5, #6
 801340e:	f47f af1d 	bne.w	801324c <_scanf_float+0x64>
 8013412:	2507      	movs	r5, #7
 8013414:	e7b1      	b.n	801337a <_scanf_float+0x192>
 8013416:	6822      	ldr	r2, [r4, #0]
 8013418:	0591      	lsls	r1, r2, #22
 801341a:	f57f af17 	bpl.w	801324c <_scanf_float+0x64>
 801341e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8013422:	6022      	str	r2, [r4, #0]
 8013424:	f8cd 9008 	str.w	r9, [sp, #8]
 8013428:	e7a7      	b.n	801337a <_scanf_float+0x192>
 801342a:	6822      	ldr	r2, [r4, #0]
 801342c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8013430:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8013434:	d006      	beq.n	8013444 <_scanf_float+0x25c>
 8013436:	0550      	lsls	r0, r2, #21
 8013438:	f57f af08 	bpl.w	801324c <_scanf_float+0x64>
 801343c:	f1b9 0f00 	cmp.w	r9, #0
 8013440:	f000 80de 	beq.w	8013600 <_scanf_float+0x418>
 8013444:	0591      	lsls	r1, r2, #22
 8013446:	bf58      	it	pl
 8013448:	9902      	ldrpl	r1, [sp, #8]
 801344a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801344e:	bf58      	it	pl
 8013450:	eba9 0101 	subpl.w	r1, r9, r1
 8013454:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8013458:	bf58      	it	pl
 801345a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801345e:	6022      	str	r2, [r4, #0]
 8013460:	f04f 0900 	mov.w	r9, #0
 8013464:	e789      	b.n	801337a <_scanf_float+0x192>
 8013466:	f04f 0a03 	mov.w	sl, #3
 801346a:	e786      	b.n	801337a <_scanf_float+0x192>
 801346c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8013470:	4639      	mov	r1, r7
 8013472:	4640      	mov	r0, r8
 8013474:	4798      	blx	r3
 8013476:	2800      	cmp	r0, #0
 8013478:	f43f aedb 	beq.w	8013232 <_scanf_float+0x4a>
 801347c:	e6e6      	b.n	801324c <_scanf_float+0x64>
 801347e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8013482:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013486:	463a      	mov	r2, r7
 8013488:	4640      	mov	r0, r8
 801348a:	4798      	blx	r3
 801348c:	6923      	ldr	r3, [r4, #16]
 801348e:	3b01      	subs	r3, #1
 8013490:	6123      	str	r3, [r4, #16]
 8013492:	e6e8      	b.n	8013266 <_scanf_float+0x7e>
 8013494:	1e6b      	subs	r3, r5, #1
 8013496:	2b06      	cmp	r3, #6
 8013498:	d824      	bhi.n	80134e4 <_scanf_float+0x2fc>
 801349a:	2d02      	cmp	r5, #2
 801349c:	d836      	bhi.n	801350c <_scanf_float+0x324>
 801349e:	9b01      	ldr	r3, [sp, #4]
 80134a0:	429e      	cmp	r6, r3
 80134a2:	f67f aee4 	bls.w	801326e <_scanf_float+0x86>
 80134a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80134aa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80134ae:	463a      	mov	r2, r7
 80134b0:	4640      	mov	r0, r8
 80134b2:	4798      	blx	r3
 80134b4:	6923      	ldr	r3, [r4, #16]
 80134b6:	3b01      	subs	r3, #1
 80134b8:	6123      	str	r3, [r4, #16]
 80134ba:	e7f0      	b.n	801349e <_scanf_float+0x2b6>
 80134bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80134c0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80134c4:	463a      	mov	r2, r7
 80134c6:	4640      	mov	r0, r8
 80134c8:	4798      	blx	r3
 80134ca:	6923      	ldr	r3, [r4, #16]
 80134cc:	3b01      	subs	r3, #1
 80134ce:	6123      	str	r3, [r4, #16]
 80134d0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80134d4:	fa5f fa8a 	uxtb.w	sl, sl
 80134d8:	f1ba 0f02 	cmp.w	sl, #2
 80134dc:	d1ee      	bne.n	80134bc <_scanf_float+0x2d4>
 80134de:	3d03      	subs	r5, #3
 80134e0:	b2ed      	uxtb	r5, r5
 80134e2:	1b76      	subs	r6, r6, r5
 80134e4:	6823      	ldr	r3, [r4, #0]
 80134e6:	05da      	lsls	r2, r3, #23
 80134e8:	d530      	bpl.n	801354c <_scanf_float+0x364>
 80134ea:	055b      	lsls	r3, r3, #21
 80134ec:	d511      	bpl.n	8013512 <_scanf_float+0x32a>
 80134ee:	9b01      	ldr	r3, [sp, #4]
 80134f0:	429e      	cmp	r6, r3
 80134f2:	f67f aebc 	bls.w	801326e <_scanf_float+0x86>
 80134f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80134fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80134fe:	463a      	mov	r2, r7
 8013500:	4640      	mov	r0, r8
 8013502:	4798      	blx	r3
 8013504:	6923      	ldr	r3, [r4, #16]
 8013506:	3b01      	subs	r3, #1
 8013508:	6123      	str	r3, [r4, #16]
 801350a:	e7f0      	b.n	80134ee <_scanf_float+0x306>
 801350c:	46aa      	mov	sl, r5
 801350e:	46b3      	mov	fp, r6
 8013510:	e7de      	b.n	80134d0 <_scanf_float+0x2e8>
 8013512:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8013516:	6923      	ldr	r3, [r4, #16]
 8013518:	2965      	cmp	r1, #101	@ 0x65
 801351a:	f103 33ff 	add.w	r3, r3, #4294967295
 801351e:	f106 35ff 	add.w	r5, r6, #4294967295
 8013522:	6123      	str	r3, [r4, #16]
 8013524:	d00c      	beq.n	8013540 <_scanf_float+0x358>
 8013526:	2945      	cmp	r1, #69	@ 0x45
 8013528:	d00a      	beq.n	8013540 <_scanf_float+0x358>
 801352a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801352e:	463a      	mov	r2, r7
 8013530:	4640      	mov	r0, r8
 8013532:	4798      	blx	r3
 8013534:	6923      	ldr	r3, [r4, #16]
 8013536:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801353a:	3b01      	subs	r3, #1
 801353c:	1eb5      	subs	r5, r6, #2
 801353e:	6123      	str	r3, [r4, #16]
 8013540:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8013544:	463a      	mov	r2, r7
 8013546:	4640      	mov	r0, r8
 8013548:	4798      	blx	r3
 801354a:	462e      	mov	r6, r5
 801354c:	6822      	ldr	r2, [r4, #0]
 801354e:	f012 0210 	ands.w	r2, r2, #16
 8013552:	d001      	beq.n	8013558 <_scanf_float+0x370>
 8013554:	2000      	movs	r0, #0
 8013556:	e68b      	b.n	8013270 <_scanf_float+0x88>
 8013558:	7032      	strb	r2, [r6, #0]
 801355a:	6823      	ldr	r3, [r4, #0]
 801355c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8013560:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8013564:	d11c      	bne.n	80135a0 <_scanf_float+0x3b8>
 8013566:	9b02      	ldr	r3, [sp, #8]
 8013568:	454b      	cmp	r3, r9
 801356a:	eba3 0209 	sub.w	r2, r3, r9
 801356e:	d123      	bne.n	80135b8 <_scanf_float+0x3d0>
 8013570:	9901      	ldr	r1, [sp, #4]
 8013572:	2200      	movs	r2, #0
 8013574:	4640      	mov	r0, r8
 8013576:	f002 fc17 	bl	8015da8 <_strtod_r>
 801357a:	9b03      	ldr	r3, [sp, #12]
 801357c:	6821      	ldr	r1, [r4, #0]
 801357e:	681b      	ldr	r3, [r3, #0]
 8013580:	f011 0f02 	tst.w	r1, #2
 8013584:	ec57 6b10 	vmov	r6, r7, d0
 8013588:	f103 0204 	add.w	r2, r3, #4
 801358c:	d01f      	beq.n	80135ce <_scanf_float+0x3e6>
 801358e:	9903      	ldr	r1, [sp, #12]
 8013590:	600a      	str	r2, [r1, #0]
 8013592:	681b      	ldr	r3, [r3, #0]
 8013594:	e9c3 6700 	strd	r6, r7, [r3]
 8013598:	68e3      	ldr	r3, [r4, #12]
 801359a:	3301      	adds	r3, #1
 801359c:	60e3      	str	r3, [r4, #12]
 801359e:	e7d9      	b.n	8013554 <_scanf_float+0x36c>
 80135a0:	9b04      	ldr	r3, [sp, #16]
 80135a2:	2b00      	cmp	r3, #0
 80135a4:	d0e4      	beq.n	8013570 <_scanf_float+0x388>
 80135a6:	9905      	ldr	r1, [sp, #20]
 80135a8:	230a      	movs	r3, #10
 80135aa:	3101      	adds	r1, #1
 80135ac:	4640      	mov	r0, r8
 80135ae:	f002 fc7b 	bl	8015ea8 <_strtol_r>
 80135b2:	9b04      	ldr	r3, [sp, #16]
 80135b4:	9e05      	ldr	r6, [sp, #20]
 80135b6:	1ac2      	subs	r2, r0, r3
 80135b8:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80135bc:	429e      	cmp	r6, r3
 80135be:	bf28      	it	cs
 80135c0:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80135c4:	4910      	ldr	r1, [pc, #64]	@ (8013608 <_scanf_float+0x420>)
 80135c6:	4630      	mov	r0, r6
 80135c8:	f000 f8e4 	bl	8013794 <siprintf>
 80135cc:	e7d0      	b.n	8013570 <_scanf_float+0x388>
 80135ce:	f011 0f04 	tst.w	r1, #4
 80135d2:	9903      	ldr	r1, [sp, #12]
 80135d4:	600a      	str	r2, [r1, #0]
 80135d6:	d1dc      	bne.n	8013592 <_scanf_float+0x3aa>
 80135d8:	681d      	ldr	r5, [r3, #0]
 80135da:	4632      	mov	r2, r6
 80135dc:	463b      	mov	r3, r7
 80135de:	4630      	mov	r0, r6
 80135e0:	4639      	mov	r1, r7
 80135e2:	f7ed fad3 	bl	8000b8c <__aeabi_dcmpun>
 80135e6:	b128      	cbz	r0, 80135f4 <_scanf_float+0x40c>
 80135e8:	4808      	ldr	r0, [pc, #32]	@ (801360c <_scanf_float+0x424>)
 80135ea:	f000 fa65 	bl	8013ab8 <nanf>
 80135ee:	ed85 0a00 	vstr	s0, [r5]
 80135f2:	e7d1      	b.n	8013598 <_scanf_float+0x3b0>
 80135f4:	4630      	mov	r0, r6
 80135f6:	4639      	mov	r1, r7
 80135f8:	f7ed fb26 	bl	8000c48 <__aeabi_d2f>
 80135fc:	6028      	str	r0, [r5, #0]
 80135fe:	e7cb      	b.n	8013598 <_scanf_float+0x3b0>
 8013600:	f04f 0900 	mov.w	r9, #0
 8013604:	e629      	b.n	801325a <_scanf_float+0x72>
 8013606:	bf00      	nop
 8013608:	0805d742 	.word	0x0805d742
 801360c:	0805d7f3 	.word	0x0805d7f3

08013610 <std>:
 8013610:	2300      	movs	r3, #0
 8013612:	b510      	push	{r4, lr}
 8013614:	4604      	mov	r4, r0
 8013616:	e9c0 3300 	strd	r3, r3, [r0]
 801361a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801361e:	6083      	str	r3, [r0, #8]
 8013620:	8181      	strh	r1, [r0, #12]
 8013622:	6643      	str	r3, [r0, #100]	@ 0x64
 8013624:	81c2      	strh	r2, [r0, #14]
 8013626:	6183      	str	r3, [r0, #24]
 8013628:	4619      	mov	r1, r3
 801362a:	2208      	movs	r2, #8
 801362c:	305c      	adds	r0, #92	@ 0x5c
 801362e:	f000 f940 	bl	80138b2 <memset>
 8013632:	4b0d      	ldr	r3, [pc, #52]	@ (8013668 <std+0x58>)
 8013634:	6263      	str	r3, [r4, #36]	@ 0x24
 8013636:	4b0d      	ldr	r3, [pc, #52]	@ (801366c <std+0x5c>)
 8013638:	62a3      	str	r3, [r4, #40]	@ 0x28
 801363a:	4b0d      	ldr	r3, [pc, #52]	@ (8013670 <std+0x60>)
 801363c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801363e:	4b0d      	ldr	r3, [pc, #52]	@ (8013674 <std+0x64>)
 8013640:	6323      	str	r3, [r4, #48]	@ 0x30
 8013642:	4b0d      	ldr	r3, [pc, #52]	@ (8013678 <std+0x68>)
 8013644:	6224      	str	r4, [r4, #32]
 8013646:	429c      	cmp	r4, r3
 8013648:	d006      	beq.n	8013658 <std+0x48>
 801364a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801364e:	4294      	cmp	r4, r2
 8013650:	d002      	beq.n	8013658 <std+0x48>
 8013652:	33d0      	adds	r3, #208	@ 0xd0
 8013654:	429c      	cmp	r4, r3
 8013656:	d105      	bne.n	8013664 <std+0x54>
 8013658:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801365c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013660:	f000 ba10 	b.w	8013a84 <__retarget_lock_init_recursive>
 8013664:	bd10      	pop	{r4, pc}
 8013666:	bf00      	nop
 8013668:	08013829 	.word	0x08013829
 801366c:	0801384f 	.word	0x0801384f
 8013670:	08013887 	.word	0x08013887
 8013674:	080138ab 	.word	0x080138ab
 8013678:	2000c680 	.word	0x2000c680

0801367c <stdio_exit_handler>:
 801367c:	4a02      	ldr	r2, [pc, #8]	@ (8013688 <stdio_exit_handler+0xc>)
 801367e:	4903      	ldr	r1, [pc, #12]	@ (801368c <stdio_exit_handler+0x10>)
 8013680:	4803      	ldr	r0, [pc, #12]	@ (8013690 <stdio_exit_handler+0x14>)
 8013682:	f000 b869 	b.w	8013758 <_fwalk_sglue>
 8013686:	bf00      	nop
 8013688:	2000142c 	.word	0x2000142c
 801368c:	08016899 	.word	0x08016899
 8013690:	2000143c 	.word	0x2000143c

08013694 <cleanup_stdio>:
 8013694:	6841      	ldr	r1, [r0, #4]
 8013696:	4b0c      	ldr	r3, [pc, #48]	@ (80136c8 <cleanup_stdio+0x34>)
 8013698:	4299      	cmp	r1, r3
 801369a:	b510      	push	{r4, lr}
 801369c:	4604      	mov	r4, r0
 801369e:	d001      	beq.n	80136a4 <cleanup_stdio+0x10>
 80136a0:	f003 f8fa 	bl	8016898 <_fflush_r>
 80136a4:	68a1      	ldr	r1, [r4, #8]
 80136a6:	4b09      	ldr	r3, [pc, #36]	@ (80136cc <cleanup_stdio+0x38>)
 80136a8:	4299      	cmp	r1, r3
 80136aa:	d002      	beq.n	80136b2 <cleanup_stdio+0x1e>
 80136ac:	4620      	mov	r0, r4
 80136ae:	f003 f8f3 	bl	8016898 <_fflush_r>
 80136b2:	68e1      	ldr	r1, [r4, #12]
 80136b4:	4b06      	ldr	r3, [pc, #24]	@ (80136d0 <cleanup_stdio+0x3c>)
 80136b6:	4299      	cmp	r1, r3
 80136b8:	d004      	beq.n	80136c4 <cleanup_stdio+0x30>
 80136ba:	4620      	mov	r0, r4
 80136bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80136c0:	f003 b8ea 	b.w	8016898 <_fflush_r>
 80136c4:	bd10      	pop	{r4, pc}
 80136c6:	bf00      	nop
 80136c8:	2000c680 	.word	0x2000c680
 80136cc:	2000c6e8 	.word	0x2000c6e8
 80136d0:	2000c750 	.word	0x2000c750

080136d4 <global_stdio_init.part.0>:
 80136d4:	b510      	push	{r4, lr}
 80136d6:	4b0b      	ldr	r3, [pc, #44]	@ (8013704 <global_stdio_init.part.0+0x30>)
 80136d8:	4c0b      	ldr	r4, [pc, #44]	@ (8013708 <global_stdio_init.part.0+0x34>)
 80136da:	4a0c      	ldr	r2, [pc, #48]	@ (801370c <global_stdio_init.part.0+0x38>)
 80136dc:	601a      	str	r2, [r3, #0]
 80136de:	4620      	mov	r0, r4
 80136e0:	2200      	movs	r2, #0
 80136e2:	2104      	movs	r1, #4
 80136e4:	f7ff ff94 	bl	8013610 <std>
 80136e8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80136ec:	2201      	movs	r2, #1
 80136ee:	2109      	movs	r1, #9
 80136f0:	f7ff ff8e 	bl	8013610 <std>
 80136f4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80136f8:	2202      	movs	r2, #2
 80136fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80136fe:	2112      	movs	r1, #18
 8013700:	f7ff bf86 	b.w	8013610 <std>
 8013704:	2000c7b8 	.word	0x2000c7b8
 8013708:	2000c680 	.word	0x2000c680
 801370c:	0801367d 	.word	0x0801367d

08013710 <__sfp_lock_acquire>:
 8013710:	4801      	ldr	r0, [pc, #4]	@ (8013718 <__sfp_lock_acquire+0x8>)
 8013712:	f000 b9b8 	b.w	8013a86 <__retarget_lock_acquire_recursive>
 8013716:	bf00      	nop
 8013718:	2000c7c1 	.word	0x2000c7c1

0801371c <__sfp_lock_release>:
 801371c:	4801      	ldr	r0, [pc, #4]	@ (8013724 <__sfp_lock_release+0x8>)
 801371e:	f000 b9b3 	b.w	8013a88 <__retarget_lock_release_recursive>
 8013722:	bf00      	nop
 8013724:	2000c7c1 	.word	0x2000c7c1

08013728 <__sinit>:
 8013728:	b510      	push	{r4, lr}
 801372a:	4604      	mov	r4, r0
 801372c:	f7ff fff0 	bl	8013710 <__sfp_lock_acquire>
 8013730:	6a23      	ldr	r3, [r4, #32]
 8013732:	b11b      	cbz	r3, 801373c <__sinit+0x14>
 8013734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013738:	f7ff bff0 	b.w	801371c <__sfp_lock_release>
 801373c:	4b04      	ldr	r3, [pc, #16]	@ (8013750 <__sinit+0x28>)
 801373e:	6223      	str	r3, [r4, #32]
 8013740:	4b04      	ldr	r3, [pc, #16]	@ (8013754 <__sinit+0x2c>)
 8013742:	681b      	ldr	r3, [r3, #0]
 8013744:	2b00      	cmp	r3, #0
 8013746:	d1f5      	bne.n	8013734 <__sinit+0xc>
 8013748:	f7ff ffc4 	bl	80136d4 <global_stdio_init.part.0>
 801374c:	e7f2      	b.n	8013734 <__sinit+0xc>
 801374e:	bf00      	nop
 8013750:	08013695 	.word	0x08013695
 8013754:	2000c7b8 	.word	0x2000c7b8

08013758 <_fwalk_sglue>:
 8013758:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801375c:	4607      	mov	r7, r0
 801375e:	4688      	mov	r8, r1
 8013760:	4614      	mov	r4, r2
 8013762:	2600      	movs	r6, #0
 8013764:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013768:	f1b9 0901 	subs.w	r9, r9, #1
 801376c:	d505      	bpl.n	801377a <_fwalk_sglue+0x22>
 801376e:	6824      	ldr	r4, [r4, #0]
 8013770:	2c00      	cmp	r4, #0
 8013772:	d1f7      	bne.n	8013764 <_fwalk_sglue+0xc>
 8013774:	4630      	mov	r0, r6
 8013776:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801377a:	89ab      	ldrh	r3, [r5, #12]
 801377c:	2b01      	cmp	r3, #1
 801377e:	d907      	bls.n	8013790 <_fwalk_sglue+0x38>
 8013780:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013784:	3301      	adds	r3, #1
 8013786:	d003      	beq.n	8013790 <_fwalk_sglue+0x38>
 8013788:	4629      	mov	r1, r5
 801378a:	4638      	mov	r0, r7
 801378c:	47c0      	blx	r8
 801378e:	4306      	orrs	r6, r0
 8013790:	3568      	adds	r5, #104	@ 0x68
 8013792:	e7e9      	b.n	8013768 <_fwalk_sglue+0x10>

08013794 <siprintf>:
 8013794:	b40e      	push	{r1, r2, r3}
 8013796:	b500      	push	{lr}
 8013798:	b09c      	sub	sp, #112	@ 0x70
 801379a:	ab1d      	add	r3, sp, #116	@ 0x74
 801379c:	9002      	str	r0, [sp, #8]
 801379e:	9006      	str	r0, [sp, #24]
 80137a0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80137a4:	4809      	ldr	r0, [pc, #36]	@ (80137cc <siprintf+0x38>)
 80137a6:	9107      	str	r1, [sp, #28]
 80137a8:	9104      	str	r1, [sp, #16]
 80137aa:	4909      	ldr	r1, [pc, #36]	@ (80137d0 <siprintf+0x3c>)
 80137ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80137b0:	9105      	str	r1, [sp, #20]
 80137b2:	6800      	ldr	r0, [r0, #0]
 80137b4:	9301      	str	r3, [sp, #4]
 80137b6:	a902      	add	r1, sp, #8
 80137b8:	f002 fbd4 	bl	8015f64 <_svfiprintf_r>
 80137bc:	9b02      	ldr	r3, [sp, #8]
 80137be:	2200      	movs	r2, #0
 80137c0:	701a      	strb	r2, [r3, #0]
 80137c2:	b01c      	add	sp, #112	@ 0x70
 80137c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80137c8:	b003      	add	sp, #12
 80137ca:	4770      	bx	lr
 80137cc:	20001438 	.word	0x20001438
 80137d0:	ffff0208 	.word	0xffff0208

080137d4 <siscanf>:
 80137d4:	b40e      	push	{r1, r2, r3}
 80137d6:	b530      	push	{r4, r5, lr}
 80137d8:	b09c      	sub	sp, #112	@ 0x70
 80137da:	ac1f      	add	r4, sp, #124	@ 0x7c
 80137dc:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80137e0:	f854 5b04 	ldr.w	r5, [r4], #4
 80137e4:	f8ad 2014 	strh.w	r2, [sp, #20]
 80137e8:	9002      	str	r0, [sp, #8]
 80137ea:	9006      	str	r0, [sp, #24]
 80137ec:	f7ec fd70 	bl	80002d0 <strlen>
 80137f0:	4b0b      	ldr	r3, [pc, #44]	@ (8013820 <siscanf+0x4c>)
 80137f2:	9003      	str	r0, [sp, #12]
 80137f4:	9007      	str	r0, [sp, #28]
 80137f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80137f8:	480a      	ldr	r0, [pc, #40]	@ (8013824 <siscanf+0x50>)
 80137fa:	9401      	str	r4, [sp, #4]
 80137fc:	2300      	movs	r3, #0
 80137fe:	930f      	str	r3, [sp, #60]	@ 0x3c
 8013800:	9314      	str	r3, [sp, #80]	@ 0x50
 8013802:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013806:	f8ad 3016 	strh.w	r3, [sp, #22]
 801380a:	462a      	mov	r2, r5
 801380c:	4623      	mov	r3, r4
 801380e:	a902      	add	r1, sp, #8
 8013810:	6800      	ldr	r0, [r0, #0]
 8013812:	f002 fcfb 	bl	801620c <__ssvfiscanf_r>
 8013816:	b01c      	add	sp, #112	@ 0x70
 8013818:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801381c:	b003      	add	sp, #12
 801381e:	4770      	bx	lr
 8013820:	0801384b 	.word	0x0801384b
 8013824:	20001438 	.word	0x20001438

08013828 <__sread>:
 8013828:	b510      	push	{r4, lr}
 801382a:	460c      	mov	r4, r1
 801382c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013830:	f000 f8ca 	bl	80139c8 <_read_r>
 8013834:	2800      	cmp	r0, #0
 8013836:	bfab      	itete	ge
 8013838:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801383a:	89a3      	ldrhlt	r3, [r4, #12]
 801383c:	181b      	addge	r3, r3, r0
 801383e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8013842:	bfac      	ite	ge
 8013844:	6563      	strge	r3, [r4, #84]	@ 0x54
 8013846:	81a3      	strhlt	r3, [r4, #12]
 8013848:	bd10      	pop	{r4, pc}

0801384a <__seofread>:
 801384a:	2000      	movs	r0, #0
 801384c:	4770      	bx	lr

0801384e <__swrite>:
 801384e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013852:	461f      	mov	r7, r3
 8013854:	898b      	ldrh	r3, [r1, #12]
 8013856:	05db      	lsls	r3, r3, #23
 8013858:	4605      	mov	r5, r0
 801385a:	460c      	mov	r4, r1
 801385c:	4616      	mov	r6, r2
 801385e:	d505      	bpl.n	801386c <__swrite+0x1e>
 8013860:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013864:	2302      	movs	r3, #2
 8013866:	2200      	movs	r2, #0
 8013868:	f000 f89c 	bl	80139a4 <_lseek_r>
 801386c:	89a3      	ldrh	r3, [r4, #12]
 801386e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013872:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8013876:	81a3      	strh	r3, [r4, #12]
 8013878:	4632      	mov	r2, r6
 801387a:	463b      	mov	r3, r7
 801387c:	4628      	mov	r0, r5
 801387e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013882:	f000 b8c3 	b.w	8013a0c <_write_r>

08013886 <__sseek>:
 8013886:	b510      	push	{r4, lr}
 8013888:	460c      	mov	r4, r1
 801388a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801388e:	f000 f889 	bl	80139a4 <_lseek_r>
 8013892:	1c43      	adds	r3, r0, #1
 8013894:	89a3      	ldrh	r3, [r4, #12]
 8013896:	bf15      	itete	ne
 8013898:	6560      	strne	r0, [r4, #84]	@ 0x54
 801389a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801389e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80138a2:	81a3      	strheq	r3, [r4, #12]
 80138a4:	bf18      	it	ne
 80138a6:	81a3      	strhne	r3, [r4, #12]
 80138a8:	bd10      	pop	{r4, pc}

080138aa <__sclose>:
 80138aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80138ae:	f000 b869 	b.w	8013984 <_close_r>

080138b2 <memset>:
 80138b2:	4402      	add	r2, r0
 80138b4:	4603      	mov	r3, r0
 80138b6:	4293      	cmp	r3, r2
 80138b8:	d100      	bne.n	80138bc <memset+0xa>
 80138ba:	4770      	bx	lr
 80138bc:	f803 1b01 	strb.w	r1, [r3], #1
 80138c0:	e7f9      	b.n	80138b6 <memset+0x4>
	...

080138c4 <strtok>:
 80138c4:	4b16      	ldr	r3, [pc, #88]	@ (8013920 <strtok+0x5c>)
 80138c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80138ca:	681f      	ldr	r7, [r3, #0]
 80138cc:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80138ce:	4605      	mov	r5, r0
 80138d0:	460e      	mov	r6, r1
 80138d2:	b9ec      	cbnz	r4, 8013910 <strtok+0x4c>
 80138d4:	2050      	movs	r0, #80	@ 0x50
 80138d6:	f7fe ff4b 	bl	8012770 <malloc>
 80138da:	4602      	mov	r2, r0
 80138dc:	6478      	str	r0, [r7, #68]	@ 0x44
 80138de:	b920      	cbnz	r0, 80138ea <strtok+0x26>
 80138e0:	4b10      	ldr	r3, [pc, #64]	@ (8013924 <strtok+0x60>)
 80138e2:	4811      	ldr	r0, [pc, #68]	@ (8013928 <strtok+0x64>)
 80138e4:	215b      	movs	r1, #91	@ 0x5b
 80138e6:	f000 f8ed 	bl	8013ac4 <__assert_func>
 80138ea:	e9c0 4400 	strd	r4, r4, [r0]
 80138ee:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80138f2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80138f6:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 80138fa:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 80138fe:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8013902:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8013906:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 801390a:	6184      	str	r4, [r0, #24]
 801390c:	7704      	strb	r4, [r0, #28]
 801390e:	6244      	str	r4, [r0, #36]	@ 0x24
 8013910:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013912:	4631      	mov	r1, r6
 8013914:	4628      	mov	r0, r5
 8013916:	2301      	movs	r3, #1
 8013918:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801391c:	f000 b806 	b.w	801392c <__strtok_r>
 8013920:	20001438 	.word	0x20001438
 8013924:	0805d747 	.word	0x0805d747
 8013928:	0805d75e 	.word	0x0805d75e

0801392c <__strtok_r>:
 801392c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801392e:	4604      	mov	r4, r0
 8013930:	b908      	cbnz	r0, 8013936 <__strtok_r+0xa>
 8013932:	6814      	ldr	r4, [r2, #0]
 8013934:	b144      	cbz	r4, 8013948 <__strtok_r+0x1c>
 8013936:	4620      	mov	r0, r4
 8013938:	f814 5b01 	ldrb.w	r5, [r4], #1
 801393c:	460f      	mov	r7, r1
 801393e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8013942:	b91e      	cbnz	r6, 801394c <__strtok_r+0x20>
 8013944:	b965      	cbnz	r5, 8013960 <__strtok_r+0x34>
 8013946:	6015      	str	r5, [r2, #0]
 8013948:	2000      	movs	r0, #0
 801394a:	e005      	b.n	8013958 <__strtok_r+0x2c>
 801394c:	42b5      	cmp	r5, r6
 801394e:	d1f6      	bne.n	801393e <__strtok_r+0x12>
 8013950:	2b00      	cmp	r3, #0
 8013952:	d1f0      	bne.n	8013936 <__strtok_r+0xa>
 8013954:	6014      	str	r4, [r2, #0]
 8013956:	7003      	strb	r3, [r0, #0]
 8013958:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801395a:	461c      	mov	r4, r3
 801395c:	e00c      	b.n	8013978 <__strtok_r+0x4c>
 801395e:	b915      	cbnz	r5, 8013966 <__strtok_r+0x3a>
 8013960:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013964:	460e      	mov	r6, r1
 8013966:	f816 5b01 	ldrb.w	r5, [r6], #1
 801396a:	42ab      	cmp	r3, r5
 801396c:	d1f7      	bne.n	801395e <__strtok_r+0x32>
 801396e:	2b00      	cmp	r3, #0
 8013970:	d0f3      	beq.n	801395a <__strtok_r+0x2e>
 8013972:	2300      	movs	r3, #0
 8013974:	f804 3c01 	strb.w	r3, [r4, #-1]
 8013978:	6014      	str	r4, [r2, #0]
 801397a:	e7ed      	b.n	8013958 <__strtok_r+0x2c>

0801397c <_localeconv_r>:
 801397c:	4800      	ldr	r0, [pc, #0]	@ (8013980 <_localeconv_r+0x4>)
 801397e:	4770      	bx	lr
 8013980:	20001578 	.word	0x20001578

08013984 <_close_r>:
 8013984:	b538      	push	{r3, r4, r5, lr}
 8013986:	4d06      	ldr	r5, [pc, #24]	@ (80139a0 <_close_r+0x1c>)
 8013988:	2300      	movs	r3, #0
 801398a:	4604      	mov	r4, r0
 801398c:	4608      	mov	r0, r1
 801398e:	602b      	str	r3, [r5, #0]
 8013990:	f004 fe70 	bl	8018674 <_close>
 8013994:	1c43      	adds	r3, r0, #1
 8013996:	d102      	bne.n	801399e <_close_r+0x1a>
 8013998:	682b      	ldr	r3, [r5, #0]
 801399a:	b103      	cbz	r3, 801399e <_close_r+0x1a>
 801399c:	6023      	str	r3, [r4, #0]
 801399e:	bd38      	pop	{r3, r4, r5, pc}
 80139a0:	2000c7bc 	.word	0x2000c7bc

080139a4 <_lseek_r>:
 80139a4:	b538      	push	{r3, r4, r5, lr}
 80139a6:	4d07      	ldr	r5, [pc, #28]	@ (80139c4 <_lseek_r+0x20>)
 80139a8:	4604      	mov	r4, r0
 80139aa:	4608      	mov	r0, r1
 80139ac:	4611      	mov	r1, r2
 80139ae:	2200      	movs	r2, #0
 80139b0:	602a      	str	r2, [r5, #0]
 80139b2:	461a      	mov	r2, r3
 80139b4:	f004 fe86 	bl	80186c4 <_lseek>
 80139b8:	1c43      	adds	r3, r0, #1
 80139ba:	d102      	bne.n	80139c2 <_lseek_r+0x1e>
 80139bc:	682b      	ldr	r3, [r5, #0]
 80139be:	b103      	cbz	r3, 80139c2 <_lseek_r+0x1e>
 80139c0:	6023      	str	r3, [r4, #0]
 80139c2:	bd38      	pop	{r3, r4, r5, pc}
 80139c4:	2000c7bc 	.word	0x2000c7bc

080139c8 <_read_r>:
 80139c8:	b538      	push	{r3, r4, r5, lr}
 80139ca:	4d07      	ldr	r5, [pc, #28]	@ (80139e8 <_read_r+0x20>)
 80139cc:	4604      	mov	r4, r0
 80139ce:	4608      	mov	r0, r1
 80139d0:	4611      	mov	r1, r2
 80139d2:	2200      	movs	r2, #0
 80139d4:	602a      	str	r2, [r5, #0]
 80139d6:	461a      	mov	r2, r3
 80139d8:	f004 fe7c 	bl	80186d4 <_read>
 80139dc:	1c43      	adds	r3, r0, #1
 80139de:	d102      	bne.n	80139e6 <_read_r+0x1e>
 80139e0:	682b      	ldr	r3, [r5, #0]
 80139e2:	b103      	cbz	r3, 80139e6 <_read_r+0x1e>
 80139e4:	6023      	str	r3, [r4, #0]
 80139e6:	bd38      	pop	{r3, r4, r5, pc}
 80139e8:	2000c7bc 	.word	0x2000c7bc

080139ec <_sbrk_r>:
 80139ec:	b538      	push	{r3, r4, r5, lr}
 80139ee:	4d06      	ldr	r5, [pc, #24]	@ (8013a08 <_sbrk_r+0x1c>)
 80139f0:	2300      	movs	r3, #0
 80139f2:	4604      	mov	r4, r0
 80139f4:	4608      	mov	r0, r1
 80139f6:	602b      	str	r3, [r5, #0]
 80139f8:	f7f0 fcd2 	bl	80043a0 <_sbrk>
 80139fc:	1c43      	adds	r3, r0, #1
 80139fe:	d102      	bne.n	8013a06 <_sbrk_r+0x1a>
 8013a00:	682b      	ldr	r3, [r5, #0]
 8013a02:	b103      	cbz	r3, 8013a06 <_sbrk_r+0x1a>
 8013a04:	6023      	str	r3, [r4, #0]
 8013a06:	bd38      	pop	{r3, r4, r5, pc}
 8013a08:	2000c7bc 	.word	0x2000c7bc

08013a0c <_write_r>:
 8013a0c:	b538      	push	{r3, r4, r5, lr}
 8013a0e:	4d07      	ldr	r5, [pc, #28]	@ (8013a2c <_write_r+0x20>)
 8013a10:	4604      	mov	r4, r0
 8013a12:	4608      	mov	r0, r1
 8013a14:	4611      	mov	r1, r2
 8013a16:	2200      	movs	r2, #0
 8013a18:	602a      	str	r2, [r5, #0]
 8013a1a:	461a      	mov	r2, r3
 8013a1c:	f004 fe62 	bl	80186e4 <_write>
 8013a20:	1c43      	adds	r3, r0, #1
 8013a22:	d102      	bne.n	8013a2a <_write_r+0x1e>
 8013a24:	682b      	ldr	r3, [r5, #0]
 8013a26:	b103      	cbz	r3, 8013a2a <_write_r+0x1e>
 8013a28:	6023      	str	r3, [r4, #0]
 8013a2a:	bd38      	pop	{r3, r4, r5, pc}
 8013a2c:	2000c7bc 	.word	0x2000c7bc

08013a30 <__errno>:
 8013a30:	4b01      	ldr	r3, [pc, #4]	@ (8013a38 <__errno+0x8>)
 8013a32:	6818      	ldr	r0, [r3, #0]
 8013a34:	4770      	bx	lr
 8013a36:	bf00      	nop
 8013a38:	20001438 	.word	0x20001438

08013a3c <__libc_init_array>:
 8013a3c:	b570      	push	{r4, r5, r6, lr}
 8013a3e:	4d0d      	ldr	r5, [pc, #52]	@ (8013a74 <__libc_init_array+0x38>)
 8013a40:	4c0d      	ldr	r4, [pc, #52]	@ (8013a78 <__libc_init_array+0x3c>)
 8013a42:	1b64      	subs	r4, r4, r5
 8013a44:	10a4      	asrs	r4, r4, #2
 8013a46:	2600      	movs	r6, #0
 8013a48:	42a6      	cmp	r6, r4
 8013a4a:	d109      	bne.n	8013a60 <__libc_init_array+0x24>
 8013a4c:	4d0b      	ldr	r5, [pc, #44]	@ (8013a7c <__libc_init_array+0x40>)
 8013a4e:	4c0c      	ldr	r4, [pc, #48]	@ (8013a80 <__libc_init_array+0x44>)
 8013a50:	f004 fe52 	bl	80186f8 <_init>
 8013a54:	1b64      	subs	r4, r4, r5
 8013a56:	10a4      	asrs	r4, r4, #2
 8013a58:	2600      	movs	r6, #0
 8013a5a:	42a6      	cmp	r6, r4
 8013a5c:	d105      	bne.n	8013a6a <__libc_init_array+0x2e>
 8013a5e:	bd70      	pop	{r4, r5, r6, pc}
 8013a60:	f855 3b04 	ldr.w	r3, [r5], #4
 8013a64:	4798      	blx	r3
 8013a66:	3601      	adds	r6, #1
 8013a68:	e7ee      	b.n	8013a48 <__libc_init_array+0xc>
 8013a6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8013a6e:	4798      	blx	r3
 8013a70:	3601      	adds	r6, #1
 8013a72:	e7f2      	b.n	8013a5a <__libc_init_array+0x1e>
 8013a74:	0805dbe8 	.word	0x0805dbe8
 8013a78:	0805dbe8 	.word	0x0805dbe8
 8013a7c:	0805dbe8 	.word	0x0805dbe8
 8013a80:	0805dbec 	.word	0x0805dbec

08013a84 <__retarget_lock_init_recursive>:
 8013a84:	4770      	bx	lr

08013a86 <__retarget_lock_acquire_recursive>:
 8013a86:	4770      	bx	lr

08013a88 <__retarget_lock_release_recursive>:
 8013a88:	4770      	bx	lr

08013a8a <strcpy>:
 8013a8a:	4603      	mov	r3, r0
 8013a8c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013a90:	f803 2b01 	strb.w	r2, [r3], #1
 8013a94:	2a00      	cmp	r2, #0
 8013a96:	d1f9      	bne.n	8013a8c <strcpy+0x2>
 8013a98:	4770      	bx	lr

08013a9a <memcpy>:
 8013a9a:	440a      	add	r2, r1
 8013a9c:	4291      	cmp	r1, r2
 8013a9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8013aa2:	d100      	bne.n	8013aa6 <memcpy+0xc>
 8013aa4:	4770      	bx	lr
 8013aa6:	b510      	push	{r4, lr}
 8013aa8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013aac:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013ab0:	4291      	cmp	r1, r2
 8013ab2:	d1f9      	bne.n	8013aa8 <memcpy+0xe>
 8013ab4:	bd10      	pop	{r4, pc}
	...

08013ab8 <nanf>:
 8013ab8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8013ac0 <nanf+0x8>
 8013abc:	4770      	bx	lr
 8013abe:	bf00      	nop
 8013ac0:	7fc00000 	.word	0x7fc00000

08013ac4 <__assert_func>:
 8013ac4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013ac6:	4614      	mov	r4, r2
 8013ac8:	461a      	mov	r2, r3
 8013aca:	4b09      	ldr	r3, [pc, #36]	@ (8013af0 <__assert_func+0x2c>)
 8013acc:	681b      	ldr	r3, [r3, #0]
 8013ace:	4605      	mov	r5, r0
 8013ad0:	68d8      	ldr	r0, [r3, #12]
 8013ad2:	b954      	cbnz	r4, 8013aea <__assert_func+0x26>
 8013ad4:	4b07      	ldr	r3, [pc, #28]	@ (8013af4 <__assert_func+0x30>)
 8013ad6:	461c      	mov	r4, r3
 8013ad8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013adc:	9100      	str	r1, [sp, #0]
 8013ade:	462b      	mov	r3, r5
 8013ae0:	4905      	ldr	r1, [pc, #20]	@ (8013af8 <__assert_func+0x34>)
 8013ae2:	f002 ff01 	bl	80168e8 <fiprintf>
 8013ae6:	f002 ffbb 	bl	8016a60 <abort>
 8013aea:	4b04      	ldr	r3, [pc, #16]	@ (8013afc <__assert_func+0x38>)
 8013aec:	e7f4      	b.n	8013ad8 <__assert_func+0x14>
 8013aee:	bf00      	nop
 8013af0:	20001438 	.word	0x20001438
 8013af4:	0805d7f3 	.word	0x0805d7f3
 8013af8:	0805d7c5 	.word	0x0805d7c5
 8013afc:	0805d7b8 	.word	0x0805d7b8

08013b00 <quorem>:
 8013b00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b04:	6903      	ldr	r3, [r0, #16]
 8013b06:	690c      	ldr	r4, [r1, #16]
 8013b08:	42a3      	cmp	r3, r4
 8013b0a:	4607      	mov	r7, r0
 8013b0c:	db7e      	blt.n	8013c0c <quorem+0x10c>
 8013b0e:	3c01      	subs	r4, #1
 8013b10:	f101 0814 	add.w	r8, r1, #20
 8013b14:	00a3      	lsls	r3, r4, #2
 8013b16:	f100 0514 	add.w	r5, r0, #20
 8013b1a:	9300      	str	r3, [sp, #0]
 8013b1c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013b20:	9301      	str	r3, [sp, #4]
 8013b22:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013b26:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013b2a:	3301      	adds	r3, #1
 8013b2c:	429a      	cmp	r2, r3
 8013b2e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013b32:	fbb2 f6f3 	udiv	r6, r2, r3
 8013b36:	d32e      	bcc.n	8013b96 <quorem+0x96>
 8013b38:	f04f 0a00 	mov.w	sl, #0
 8013b3c:	46c4      	mov	ip, r8
 8013b3e:	46ae      	mov	lr, r5
 8013b40:	46d3      	mov	fp, sl
 8013b42:	f85c 3b04 	ldr.w	r3, [ip], #4
 8013b46:	b298      	uxth	r0, r3
 8013b48:	fb06 a000 	mla	r0, r6, r0, sl
 8013b4c:	0c02      	lsrs	r2, r0, #16
 8013b4e:	0c1b      	lsrs	r3, r3, #16
 8013b50:	fb06 2303 	mla	r3, r6, r3, r2
 8013b54:	f8de 2000 	ldr.w	r2, [lr]
 8013b58:	b280      	uxth	r0, r0
 8013b5a:	b292      	uxth	r2, r2
 8013b5c:	1a12      	subs	r2, r2, r0
 8013b5e:	445a      	add	r2, fp
 8013b60:	f8de 0000 	ldr.w	r0, [lr]
 8013b64:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013b68:	b29b      	uxth	r3, r3
 8013b6a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8013b6e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8013b72:	b292      	uxth	r2, r2
 8013b74:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8013b78:	45e1      	cmp	r9, ip
 8013b7a:	f84e 2b04 	str.w	r2, [lr], #4
 8013b7e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8013b82:	d2de      	bcs.n	8013b42 <quorem+0x42>
 8013b84:	9b00      	ldr	r3, [sp, #0]
 8013b86:	58eb      	ldr	r3, [r5, r3]
 8013b88:	b92b      	cbnz	r3, 8013b96 <quorem+0x96>
 8013b8a:	9b01      	ldr	r3, [sp, #4]
 8013b8c:	3b04      	subs	r3, #4
 8013b8e:	429d      	cmp	r5, r3
 8013b90:	461a      	mov	r2, r3
 8013b92:	d32f      	bcc.n	8013bf4 <quorem+0xf4>
 8013b94:	613c      	str	r4, [r7, #16]
 8013b96:	4638      	mov	r0, r7
 8013b98:	f001 f90c 	bl	8014db4 <__mcmp>
 8013b9c:	2800      	cmp	r0, #0
 8013b9e:	db25      	blt.n	8013bec <quorem+0xec>
 8013ba0:	4629      	mov	r1, r5
 8013ba2:	2000      	movs	r0, #0
 8013ba4:	f858 2b04 	ldr.w	r2, [r8], #4
 8013ba8:	f8d1 c000 	ldr.w	ip, [r1]
 8013bac:	fa1f fe82 	uxth.w	lr, r2
 8013bb0:	fa1f f38c 	uxth.w	r3, ip
 8013bb4:	eba3 030e 	sub.w	r3, r3, lr
 8013bb8:	4403      	add	r3, r0
 8013bba:	0c12      	lsrs	r2, r2, #16
 8013bbc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8013bc0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8013bc4:	b29b      	uxth	r3, r3
 8013bc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013bca:	45c1      	cmp	r9, r8
 8013bcc:	f841 3b04 	str.w	r3, [r1], #4
 8013bd0:	ea4f 4022 	mov.w	r0, r2, asr #16
 8013bd4:	d2e6      	bcs.n	8013ba4 <quorem+0xa4>
 8013bd6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013bda:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013bde:	b922      	cbnz	r2, 8013bea <quorem+0xea>
 8013be0:	3b04      	subs	r3, #4
 8013be2:	429d      	cmp	r5, r3
 8013be4:	461a      	mov	r2, r3
 8013be6:	d30b      	bcc.n	8013c00 <quorem+0x100>
 8013be8:	613c      	str	r4, [r7, #16]
 8013bea:	3601      	adds	r6, #1
 8013bec:	4630      	mov	r0, r6
 8013bee:	b003      	add	sp, #12
 8013bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013bf4:	6812      	ldr	r2, [r2, #0]
 8013bf6:	3b04      	subs	r3, #4
 8013bf8:	2a00      	cmp	r2, #0
 8013bfa:	d1cb      	bne.n	8013b94 <quorem+0x94>
 8013bfc:	3c01      	subs	r4, #1
 8013bfe:	e7c6      	b.n	8013b8e <quorem+0x8e>
 8013c00:	6812      	ldr	r2, [r2, #0]
 8013c02:	3b04      	subs	r3, #4
 8013c04:	2a00      	cmp	r2, #0
 8013c06:	d1ef      	bne.n	8013be8 <quorem+0xe8>
 8013c08:	3c01      	subs	r4, #1
 8013c0a:	e7ea      	b.n	8013be2 <quorem+0xe2>
 8013c0c:	2000      	movs	r0, #0
 8013c0e:	e7ee      	b.n	8013bee <quorem+0xee>

08013c10 <_dtoa_r>:
 8013c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c14:	69c7      	ldr	r7, [r0, #28]
 8013c16:	b099      	sub	sp, #100	@ 0x64
 8013c18:	ed8d 0b02 	vstr	d0, [sp, #8]
 8013c1c:	ec55 4b10 	vmov	r4, r5, d0
 8013c20:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8013c22:	9109      	str	r1, [sp, #36]	@ 0x24
 8013c24:	4683      	mov	fp, r0
 8013c26:	920e      	str	r2, [sp, #56]	@ 0x38
 8013c28:	9313      	str	r3, [sp, #76]	@ 0x4c
 8013c2a:	b97f      	cbnz	r7, 8013c4c <_dtoa_r+0x3c>
 8013c2c:	2010      	movs	r0, #16
 8013c2e:	f7fe fd9f 	bl	8012770 <malloc>
 8013c32:	4602      	mov	r2, r0
 8013c34:	f8cb 001c 	str.w	r0, [fp, #28]
 8013c38:	b920      	cbnz	r0, 8013c44 <_dtoa_r+0x34>
 8013c3a:	4ba7      	ldr	r3, [pc, #668]	@ (8013ed8 <_dtoa_r+0x2c8>)
 8013c3c:	21ef      	movs	r1, #239	@ 0xef
 8013c3e:	48a7      	ldr	r0, [pc, #668]	@ (8013edc <_dtoa_r+0x2cc>)
 8013c40:	f7ff ff40 	bl	8013ac4 <__assert_func>
 8013c44:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8013c48:	6007      	str	r7, [r0, #0]
 8013c4a:	60c7      	str	r7, [r0, #12]
 8013c4c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8013c50:	6819      	ldr	r1, [r3, #0]
 8013c52:	b159      	cbz	r1, 8013c6c <_dtoa_r+0x5c>
 8013c54:	685a      	ldr	r2, [r3, #4]
 8013c56:	604a      	str	r2, [r1, #4]
 8013c58:	2301      	movs	r3, #1
 8013c5a:	4093      	lsls	r3, r2
 8013c5c:	608b      	str	r3, [r1, #8]
 8013c5e:	4658      	mov	r0, fp
 8013c60:	f000 fe24 	bl	80148ac <_Bfree>
 8013c64:	f8db 301c 	ldr.w	r3, [fp, #28]
 8013c68:	2200      	movs	r2, #0
 8013c6a:	601a      	str	r2, [r3, #0]
 8013c6c:	1e2b      	subs	r3, r5, #0
 8013c6e:	bfb9      	ittee	lt
 8013c70:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8013c74:	9303      	strlt	r3, [sp, #12]
 8013c76:	2300      	movge	r3, #0
 8013c78:	6033      	strge	r3, [r6, #0]
 8013c7a:	9f03      	ldr	r7, [sp, #12]
 8013c7c:	4b98      	ldr	r3, [pc, #608]	@ (8013ee0 <_dtoa_r+0x2d0>)
 8013c7e:	bfbc      	itt	lt
 8013c80:	2201      	movlt	r2, #1
 8013c82:	6032      	strlt	r2, [r6, #0]
 8013c84:	43bb      	bics	r3, r7
 8013c86:	d112      	bne.n	8013cae <_dtoa_r+0x9e>
 8013c88:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8013c8a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8013c8e:	6013      	str	r3, [r2, #0]
 8013c90:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013c94:	4323      	orrs	r3, r4
 8013c96:	f000 854d 	beq.w	8014734 <_dtoa_r+0xb24>
 8013c9a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8013c9c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8013ef4 <_dtoa_r+0x2e4>
 8013ca0:	2b00      	cmp	r3, #0
 8013ca2:	f000 854f 	beq.w	8014744 <_dtoa_r+0xb34>
 8013ca6:	f10a 0303 	add.w	r3, sl, #3
 8013caa:	f000 bd49 	b.w	8014740 <_dtoa_r+0xb30>
 8013cae:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013cb2:	2200      	movs	r2, #0
 8013cb4:	ec51 0b17 	vmov	r0, r1, d7
 8013cb8:	2300      	movs	r3, #0
 8013cba:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8013cbe:	f7ec ff33 	bl	8000b28 <__aeabi_dcmpeq>
 8013cc2:	4680      	mov	r8, r0
 8013cc4:	b158      	cbz	r0, 8013cde <_dtoa_r+0xce>
 8013cc6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8013cc8:	2301      	movs	r3, #1
 8013cca:	6013      	str	r3, [r2, #0]
 8013ccc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8013cce:	b113      	cbz	r3, 8013cd6 <_dtoa_r+0xc6>
 8013cd0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8013cd2:	4b84      	ldr	r3, [pc, #528]	@ (8013ee4 <_dtoa_r+0x2d4>)
 8013cd4:	6013      	str	r3, [r2, #0]
 8013cd6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8013ef8 <_dtoa_r+0x2e8>
 8013cda:	f000 bd33 	b.w	8014744 <_dtoa_r+0xb34>
 8013cde:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8013ce2:	aa16      	add	r2, sp, #88	@ 0x58
 8013ce4:	a917      	add	r1, sp, #92	@ 0x5c
 8013ce6:	4658      	mov	r0, fp
 8013ce8:	f001 f984 	bl	8014ff4 <__d2b>
 8013cec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8013cf0:	4681      	mov	r9, r0
 8013cf2:	2e00      	cmp	r6, #0
 8013cf4:	d077      	beq.n	8013de6 <_dtoa_r+0x1d6>
 8013cf6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013cf8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8013cfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013d00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013d04:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8013d08:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8013d0c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8013d10:	4619      	mov	r1, r3
 8013d12:	2200      	movs	r2, #0
 8013d14:	4b74      	ldr	r3, [pc, #464]	@ (8013ee8 <_dtoa_r+0x2d8>)
 8013d16:	f7ec fae7 	bl	80002e8 <__aeabi_dsub>
 8013d1a:	a369      	add	r3, pc, #420	@ (adr r3, 8013ec0 <_dtoa_r+0x2b0>)
 8013d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d20:	f7ec fc9a 	bl	8000658 <__aeabi_dmul>
 8013d24:	a368      	add	r3, pc, #416	@ (adr r3, 8013ec8 <_dtoa_r+0x2b8>)
 8013d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d2a:	f7ec fadf 	bl	80002ec <__adddf3>
 8013d2e:	4604      	mov	r4, r0
 8013d30:	4630      	mov	r0, r6
 8013d32:	460d      	mov	r5, r1
 8013d34:	f7ec fc26 	bl	8000584 <__aeabi_i2d>
 8013d38:	a365      	add	r3, pc, #404	@ (adr r3, 8013ed0 <_dtoa_r+0x2c0>)
 8013d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d3e:	f7ec fc8b 	bl	8000658 <__aeabi_dmul>
 8013d42:	4602      	mov	r2, r0
 8013d44:	460b      	mov	r3, r1
 8013d46:	4620      	mov	r0, r4
 8013d48:	4629      	mov	r1, r5
 8013d4a:	f7ec facf 	bl	80002ec <__adddf3>
 8013d4e:	4604      	mov	r4, r0
 8013d50:	460d      	mov	r5, r1
 8013d52:	f7ec ff31 	bl	8000bb8 <__aeabi_d2iz>
 8013d56:	2200      	movs	r2, #0
 8013d58:	4607      	mov	r7, r0
 8013d5a:	2300      	movs	r3, #0
 8013d5c:	4620      	mov	r0, r4
 8013d5e:	4629      	mov	r1, r5
 8013d60:	f7ec feec 	bl	8000b3c <__aeabi_dcmplt>
 8013d64:	b140      	cbz	r0, 8013d78 <_dtoa_r+0x168>
 8013d66:	4638      	mov	r0, r7
 8013d68:	f7ec fc0c 	bl	8000584 <__aeabi_i2d>
 8013d6c:	4622      	mov	r2, r4
 8013d6e:	462b      	mov	r3, r5
 8013d70:	f7ec feda 	bl	8000b28 <__aeabi_dcmpeq>
 8013d74:	b900      	cbnz	r0, 8013d78 <_dtoa_r+0x168>
 8013d76:	3f01      	subs	r7, #1
 8013d78:	2f16      	cmp	r7, #22
 8013d7a:	d851      	bhi.n	8013e20 <_dtoa_r+0x210>
 8013d7c:	4b5b      	ldr	r3, [pc, #364]	@ (8013eec <_dtoa_r+0x2dc>)
 8013d7e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8013d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d86:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013d8a:	f7ec fed7 	bl	8000b3c <__aeabi_dcmplt>
 8013d8e:	2800      	cmp	r0, #0
 8013d90:	d048      	beq.n	8013e24 <_dtoa_r+0x214>
 8013d92:	3f01      	subs	r7, #1
 8013d94:	2300      	movs	r3, #0
 8013d96:	9312      	str	r3, [sp, #72]	@ 0x48
 8013d98:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8013d9a:	1b9b      	subs	r3, r3, r6
 8013d9c:	1e5a      	subs	r2, r3, #1
 8013d9e:	bf44      	itt	mi
 8013da0:	f1c3 0801 	rsbmi	r8, r3, #1
 8013da4:	2300      	movmi	r3, #0
 8013da6:	9208      	str	r2, [sp, #32]
 8013da8:	bf54      	ite	pl
 8013daa:	f04f 0800 	movpl.w	r8, #0
 8013dae:	9308      	strmi	r3, [sp, #32]
 8013db0:	2f00      	cmp	r7, #0
 8013db2:	db39      	blt.n	8013e28 <_dtoa_r+0x218>
 8013db4:	9b08      	ldr	r3, [sp, #32]
 8013db6:	970f      	str	r7, [sp, #60]	@ 0x3c
 8013db8:	443b      	add	r3, r7
 8013dba:	9308      	str	r3, [sp, #32]
 8013dbc:	2300      	movs	r3, #0
 8013dbe:	930a      	str	r3, [sp, #40]	@ 0x28
 8013dc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013dc2:	2b09      	cmp	r3, #9
 8013dc4:	d864      	bhi.n	8013e90 <_dtoa_r+0x280>
 8013dc6:	2b05      	cmp	r3, #5
 8013dc8:	bfc4      	itt	gt
 8013dca:	3b04      	subgt	r3, #4
 8013dcc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8013dce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013dd0:	f1a3 0302 	sub.w	r3, r3, #2
 8013dd4:	bfcc      	ite	gt
 8013dd6:	2400      	movgt	r4, #0
 8013dd8:	2401      	movle	r4, #1
 8013dda:	2b03      	cmp	r3, #3
 8013ddc:	d863      	bhi.n	8013ea6 <_dtoa_r+0x296>
 8013dde:	e8df f003 	tbb	[pc, r3]
 8013de2:	372a      	.short	0x372a
 8013de4:	5535      	.short	0x5535
 8013de6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8013dea:	441e      	add	r6, r3
 8013dec:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8013df0:	2b20      	cmp	r3, #32
 8013df2:	bfc1      	itttt	gt
 8013df4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8013df8:	409f      	lslgt	r7, r3
 8013dfa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8013dfe:	fa24 f303 	lsrgt.w	r3, r4, r3
 8013e02:	bfd6      	itet	le
 8013e04:	f1c3 0320 	rsble	r3, r3, #32
 8013e08:	ea47 0003 	orrgt.w	r0, r7, r3
 8013e0c:	fa04 f003 	lslle.w	r0, r4, r3
 8013e10:	f7ec fba8 	bl	8000564 <__aeabi_ui2d>
 8013e14:	2201      	movs	r2, #1
 8013e16:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8013e1a:	3e01      	subs	r6, #1
 8013e1c:	9214      	str	r2, [sp, #80]	@ 0x50
 8013e1e:	e777      	b.n	8013d10 <_dtoa_r+0x100>
 8013e20:	2301      	movs	r3, #1
 8013e22:	e7b8      	b.n	8013d96 <_dtoa_r+0x186>
 8013e24:	9012      	str	r0, [sp, #72]	@ 0x48
 8013e26:	e7b7      	b.n	8013d98 <_dtoa_r+0x188>
 8013e28:	427b      	negs	r3, r7
 8013e2a:	930a      	str	r3, [sp, #40]	@ 0x28
 8013e2c:	2300      	movs	r3, #0
 8013e2e:	eba8 0807 	sub.w	r8, r8, r7
 8013e32:	930f      	str	r3, [sp, #60]	@ 0x3c
 8013e34:	e7c4      	b.n	8013dc0 <_dtoa_r+0x1b0>
 8013e36:	2300      	movs	r3, #0
 8013e38:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013e3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013e3c:	2b00      	cmp	r3, #0
 8013e3e:	dc35      	bgt.n	8013eac <_dtoa_r+0x29c>
 8013e40:	2301      	movs	r3, #1
 8013e42:	9300      	str	r3, [sp, #0]
 8013e44:	9307      	str	r3, [sp, #28]
 8013e46:	461a      	mov	r2, r3
 8013e48:	920e      	str	r2, [sp, #56]	@ 0x38
 8013e4a:	e00b      	b.n	8013e64 <_dtoa_r+0x254>
 8013e4c:	2301      	movs	r3, #1
 8013e4e:	e7f3      	b.n	8013e38 <_dtoa_r+0x228>
 8013e50:	2300      	movs	r3, #0
 8013e52:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013e54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013e56:	18fb      	adds	r3, r7, r3
 8013e58:	9300      	str	r3, [sp, #0]
 8013e5a:	3301      	adds	r3, #1
 8013e5c:	2b01      	cmp	r3, #1
 8013e5e:	9307      	str	r3, [sp, #28]
 8013e60:	bfb8      	it	lt
 8013e62:	2301      	movlt	r3, #1
 8013e64:	f8db 001c 	ldr.w	r0, [fp, #28]
 8013e68:	2100      	movs	r1, #0
 8013e6a:	2204      	movs	r2, #4
 8013e6c:	f102 0514 	add.w	r5, r2, #20
 8013e70:	429d      	cmp	r5, r3
 8013e72:	d91f      	bls.n	8013eb4 <_dtoa_r+0x2a4>
 8013e74:	6041      	str	r1, [r0, #4]
 8013e76:	4658      	mov	r0, fp
 8013e78:	f000 fcd8 	bl	801482c <_Balloc>
 8013e7c:	4682      	mov	sl, r0
 8013e7e:	2800      	cmp	r0, #0
 8013e80:	d13c      	bne.n	8013efc <_dtoa_r+0x2ec>
 8013e82:	4b1b      	ldr	r3, [pc, #108]	@ (8013ef0 <_dtoa_r+0x2e0>)
 8013e84:	4602      	mov	r2, r0
 8013e86:	f240 11af 	movw	r1, #431	@ 0x1af
 8013e8a:	e6d8      	b.n	8013c3e <_dtoa_r+0x2e>
 8013e8c:	2301      	movs	r3, #1
 8013e8e:	e7e0      	b.n	8013e52 <_dtoa_r+0x242>
 8013e90:	2401      	movs	r4, #1
 8013e92:	2300      	movs	r3, #0
 8013e94:	9309      	str	r3, [sp, #36]	@ 0x24
 8013e96:	940b      	str	r4, [sp, #44]	@ 0x2c
 8013e98:	f04f 33ff 	mov.w	r3, #4294967295
 8013e9c:	9300      	str	r3, [sp, #0]
 8013e9e:	9307      	str	r3, [sp, #28]
 8013ea0:	2200      	movs	r2, #0
 8013ea2:	2312      	movs	r3, #18
 8013ea4:	e7d0      	b.n	8013e48 <_dtoa_r+0x238>
 8013ea6:	2301      	movs	r3, #1
 8013ea8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013eaa:	e7f5      	b.n	8013e98 <_dtoa_r+0x288>
 8013eac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013eae:	9300      	str	r3, [sp, #0]
 8013eb0:	9307      	str	r3, [sp, #28]
 8013eb2:	e7d7      	b.n	8013e64 <_dtoa_r+0x254>
 8013eb4:	3101      	adds	r1, #1
 8013eb6:	0052      	lsls	r2, r2, #1
 8013eb8:	e7d8      	b.n	8013e6c <_dtoa_r+0x25c>
 8013eba:	bf00      	nop
 8013ebc:	f3af 8000 	nop.w
 8013ec0:	636f4361 	.word	0x636f4361
 8013ec4:	3fd287a7 	.word	0x3fd287a7
 8013ec8:	8b60c8b3 	.word	0x8b60c8b3
 8013ecc:	3fc68a28 	.word	0x3fc68a28
 8013ed0:	509f79fb 	.word	0x509f79fb
 8013ed4:	3fd34413 	.word	0x3fd34413
 8013ed8:	0805d747 	.word	0x0805d747
 8013edc:	0805d801 	.word	0x0805d801
 8013ee0:	7ff00000 	.word	0x7ff00000
 8013ee4:	0805db41 	.word	0x0805db41
 8013ee8:	3ff80000 	.word	0x3ff80000
 8013eec:	0805d8f8 	.word	0x0805d8f8
 8013ef0:	0805d859 	.word	0x0805d859
 8013ef4:	0805d7fd 	.word	0x0805d7fd
 8013ef8:	0805db40 	.word	0x0805db40
 8013efc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8013f00:	6018      	str	r0, [r3, #0]
 8013f02:	9b07      	ldr	r3, [sp, #28]
 8013f04:	2b0e      	cmp	r3, #14
 8013f06:	f200 80a4 	bhi.w	8014052 <_dtoa_r+0x442>
 8013f0a:	2c00      	cmp	r4, #0
 8013f0c:	f000 80a1 	beq.w	8014052 <_dtoa_r+0x442>
 8013f10:	2f00      	cmp	r7, #0
 8013f12:	dd33      	ble.n	8013f7c <_dtoa_r+0x36c>
 8013f14:	4bad      	ldr	r3, [pc, #692]	@ (80141cc <_dtoa_r+0x5bc>)
 8013f16:	f007 020f 	and.w	r2, r7, #15
 8013f1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013f1e:	ed93 7b00 	vldr	d7, [r3]
 8013f22:	05f8      	lsls	r0, r7, #23
 8013f24:	ed8d 7b04 	vstr	d7, [sp, #16]
 8013f28:	ea4f 1427 	mov.w	r4, r7, asr #4
 8013f2c:	d516      	bpl.n	8013f5c <_dtoa_r+0x34c>
 8013f2e:	4ba8      	ldr	r3, [pc, #672]	@ (80141d0 <_dtoa_r+0x5c0>)
 8013f30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013f34:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013f38:	f7ec fcb8 	bl	80008ac <__aeabi_ddiv>
 8013f3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013f40:	f004 040f 	and.w	r4, r4, #15
 8013f44:	2603      	movs	r6, #3
 8013f46:	4da2      	ldr	r5, [pc, #648]	@ (80141d0 <_dtoa_r+0x5c0>)
 8013f48:	b954      	cbnz	r4, 8013f60 <_dtoa_r+0x350>
 8013f4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013f4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013f52:	f7ec fcab 	bl	80008ac <__aeabi_ddiv>
 8013f56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013f5a:	e028      	b.n	8013fae <_dtoa_r+0x39e>
 8013f5c:	2602      	movs	r6, #2
 8013f5e:	e7f2      	b.n	8013f46 <_dtoa_r+0x336>
 8013f60:	07e1      	lsls	r1, r4, #31
 8013f62:	d508      	bpl.n	8013f76 <_dtoa_r+0x366>
 8013f64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013f68:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013f6c:	f7ec fb74 	bl	8000658 <__aeabi_dmul>
 8013f70:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013f74:	3601      	adds	r6, #1
 8013f76:	1064      	asrs	r4, r4, #1
 8013f78:	3508      	adds	r5, #8
 8013f7a:	e7e5      	b.n	8013f48 <_dtoa_r+0x338>
 8013f7c:	f000 80d2 	beq.w	8014124 <_dtoa_r+0x514>
 8013f80:	427c      	negs	r4, r7
 8013f82:	4b92      	ldr	r3, [pc, #584]	@ (80141cc <_dtoa_r+0x5bc>)
 8013f84:	4d92      	ldr	r5, [pc, #584]	@ (80141d0 <_dtoa_r+0x5c0>)
 8013f86:	f004 020f 	and.w	r2, r4, #15
 8013f8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f92:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013f96:	f7ec fb5f 	bl	8000658 <__aeabi_dmul>
 8013f9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013f9e:	1124      	asrs	r4, r4, #4
 8013fa0:	2300      	movs	r3, #0
 8013fa2:	2602      	movs	r6, #2
 8013fa4:	2c00      	cmp	r4, #0
 8013fa6:	f040 80b2 	bne.w	801410e <_dtoa_r+0x4fe>
 8013faa:	2b00      	cmp	r3, #0
 8013fac:	d1d3      	bne.n	8013f56 <_dtoa_r+0x346>
 8013fae:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8013fb0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8013fb4:	2b00      	cmp	r3, #0
 8013fb6:	f000 80b7 	beq.w	8014128 <_dtoa_r+0x518>
 8013fba:	4b86      	ldr	r3, [pc, #536]	@ (80141d4 <_dtoa_r+0x5c4>)
 8013fbc:	2200      	movs	r2, #0
 8013fbe:	4620      	mov	r0, r4
 8013fc0:	4629      	mov	r1, r5
 8013fc2:	f7ec fdbb 	bl	8000b3c <__aeabi_dcmplt>
 8013fc6:	2800      	cmp	r0, #0
 8013fc8:	f000 80ae 	beq.w	8014128 <_dtoa_r+0x518>
 8013fcc:	9b07      	ldr	r3, [sp, #28]
 8013fce:	2b00      	cmp	r3, #0
 8013fd0:	f000 80aa 	beq.w	8014128 <_dtoa_r+0x518>
 8013fd4:	9b00      	ldr	r3, [sp, #0]
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	dd37      	ble.n	801404a <_dtoa_r+0x43a>
 8013fda:	1e7b      	subs	r3, r7, #1
 8013fdc:	9304      	str	r3, [sp, #16]
 8013fde:	4620      	mov	r0, r4
 8013fe0:	4b7d      	ldr	r3, [pc, #500]	@ (80141d8 <_dtoa_r+0x5c8>)
 8013fe2:	2200      	movs	r2, #0
 8013fe4:	4629      	mov	r1, r5
 8013fe6:	f7ec fb37 	bl	8000658 <__aeabi_dmul>
 8013fea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013fee:	9c00      	ldr	r4, [sp, #0]
 8013ff0:	3601      	adds	r6, #1
 8013ff2:	4630      	mov	r0, r6
 8013ff4:	f7ec fac6 	bl	8000584 <__aeabi_i2d>
 8013ff8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013ffc:	f7ec fb2c 	bl	8000658 <__aeabi_dmul>
 8014000:	4b76      	ldr	r3, [pc, #472]	@ (80141dc <_dtoa_r+0x5cc>)
 8014002:	2200      	movs	r2, #0
 8014004:	f7ec f972 	bl	80002ec <__adddf3>
 8014008:	4605      	mov	r5, r0
 801400a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801400e:	2c00      	cmp	r4, #0
 8014010:	f040 808d 	bne.w	801412e <_dtoa_r+0x51e>
 8014014:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014018:	4b71      	ldr	r3, [pc, #452]	@ (80141e0 <_dtoa_r+0x5d0>)
 801401a:	2200      	movs	r2, #0
 801401c:	f7ec f964 	bl	80002e8 <__aeabi_dsub>
 8014020:	4602      	mov	r2, r0
 8014022:	460b      	mov	r3, r1
 8014024:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8014028:	462a      	mov	r2, r5
 801402a:	4633      	mov	r3, r6
 801402c:	f7ec fda4 	bl	8000b78 <__aeabi_dcmpgt>
 8014030:	2800      	cmp	r0, #0
 8014032:	f040 828b 	bne.w	801454c <_dtoa_r+0x93c>
 8014036:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801403a:	462a      	mov	r2, r5
 801403c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8014040:	f7ec fd7c 	bl	8000b3c <__aeabi_dcmplt>
 8014044:	2800      	cmp	r0, #0
 8014046:	f040 8128 	bne.w	801429a <_dtoa_r+0x68a>
 801404a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801404e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8014052:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8014054:	2b00      	cmp	r3, #0
 8014056:	f2c0 815a 	blt.w	801430e <_dtoa_r+0x6fe>
 801405a:	2f0e      	cmp	r7, #14
 801405c:	f300 8157 	bgt.w	801430e <_dtoa_r+0x6fe>
 8014060:	4b5a      	ldr	r3, [pc, #360]	@ (80141cc <_dtoa_r+0x5bc>)
 8014062:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8014066:	ed93 7b00 	vldr	d7, [r3]
 801406a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801406c:	2b00      	cmp	r3, #0
 801406e:	ed8d 7b00 	vstr	d7, [sp]
 8014072:	da03      	bge.n	801407c <_dtoa_r+0x46c>
 8014074:	9b07      	ldr	r3, [sp, #28]
 8014076:	2b00      	cmp	r3, #0
 8014078:	f340 8101 	ble.w	801427e <_dtoa_r+0x66e>
 801407c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8014080:	4656      	mov	r6, sl
 8014082:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014086:	4620      	mov	r0, r4
 8014088:	4629      	mov	r1, r5
 801408a:	f7ec fc0f 	bl	80008ac <__aeabi_ddiv>
 801408e:	f7ec fd93 	bl	8000bb8 <__aeabi_d2iz>
 8014092:	4680      	mov	r8, r0
 8014094:	f7ec fa76 	bl	8000584 <__aeabi_i2d>
 8014098:	e9dd 2300 	ldrd	r2, r3, [sp]
 801409c:	f7ec fadc 	bl	8000658 <__aeabi_dmul>
 80140a0:	4602      	mov	r2, r0
 80140a2:	460b      	mov	r3, r1
 80140a4:	4620      	mov	r0, r4
 80140a6:	4629      	mov	r1, r5
 80140a8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80140ac:	f7ec f91c 	bl	80002e8 <__aeabi_dsub>
 80140b0:	f806 4b01 	strb.w	r4, [r6], #1
 80140b4:	9d07      	ldr	r5, [sp, #28]
 80140b6:	eba6 040a 	sub.w	r4, r6, sl
 80140ba:	42a5      	cmp	r5, r4
 80140bc:	4602      	mov	r2, r0
 80140be:	460b      	mov	r3, r1
 80140c0:	f040 8117 	bne.w	80142f2 <_dtoa_r+0x6e2>
 80140c4:	f7ec f912 	bl	80002ec <__adddf3>
 80140c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80140cc:	4604      	mov	r4, r0
 80140ce:	460d      	mov	r5, r1
 80140d0:	f7ec fd52 	bl	8000b78 <__aeabi_dcmpgt>
 80140d4:	2800      	cmp	r0, #0
 80140d6:	f040 80f9 	bne.w	80142cc <_dtoa_r+0x6bc>
 80140da:	e9dd 2300 	ldrd	r2, r3, [sp]
 80140de:	4620      	mov	r0, r4
 80140e0:	4629      	mov	r1, r5
 80140e2:	f7ec fd21 	bl	8000b28 <__aeabi_dcmpeq>
 80140e6:	b118      	cbz	r0, 80140f0 <_dtoa_r+0x4e0>
 80140e8:	f018 0f01 	tst.w	r8, #1
 80140ec:	f040 80ee 	bne.w	80142cc <_dtoa_r+0x6bc>
 80140f0:	4649      	mov	r1, r9
 80140f2:	4658      	mov	r0, fp
 80140f4:	f000 fbda 	bl	80148ac <_Bfree>
 80140f8:	2300      	movs	r3, #0
 80140fa:	7033      	strb	r3, [r6, #0]
 80140fc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80140fe:	3701      	adds	r7, #1
 8014100:	601f      	str	r7, [r3, #0]
 8014102:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8014104:	2b00      	cmp	r3, #0
 8014106:	f000 831d 	beq.w	8014744 <_dtoa_r+0xb34>
 801410a:	601e      	str	r6, [r3, #0]
 801410c:	e31a      	b.n	8014744 <_dtoa_r+0xb34>
 801410e:	07e2      	lsls	r2, r4, #31
 8014110:	d505      	bpl.n	801411e <_dtoa_r+0x50e>
 8014112:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014116:	f7ec fa9f 	bl	8000658 <__aeabi_dmul>
 801411a:	3601      	adds	r6, #1
 801411c:	2301      	movs	r3, #1
 801411e:	1064      	asrs	r4, r4, #1
 8014120:	3508      	adds	r5, #8
 8014122:	e73f      	b.n	8013fa4 <_dtoa_r+0x394>
 8014124:	2602      	movs	r6, #2
 8014126:	e742      	b.n	8013fae <_dtoa_r+0x39e>
 8014128:	9c07      	ldr	r4, [sp, #28]
 801412a:	9704      	str	r7, [sp, #16]
 801412c:	e761      	b.n	8013ff2 <_dtoa_r+0x3e2>
 801412e:	4b27      	ldr	r3, [pc, #156]	@ (80141cc <_dtoa_r+0x5bc>)
 8014130:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8014132:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8014136:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801413a:	4454      	add	r4, sl
 801413c:	2900      	cmp	r1, #0
 801413e:	d053      	beq.n	80141e8 <_dtoa_r+0x5d8>
 8014140:	4928      	ldr	r1, [pc, #160]	@ (80141e4 <_dtoa_r+0x5d4>)
 8014142:	2000      	movs	r0, #0
 8014144:	f7ec fbb2 	bl	80008ac <__aeabi_ddiv>
 8014148:	4633      	mov	r3, r6
 801414a:	462a      	mov	r2, r5
 801414c:	f7ec f8cc 	bl	80002e8 <__aeabi_dsub>
 8014150:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8014154:	4656      	mov	r6, sl
 8014156:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801415a:	f7ec fd2d 	bl	8000bb8 <__aeabi_d2iz>
 801415e:	4605      	mov	r5, r0
 8014160:	f7ec fa10 	bl	8000584 <__aeabi_i2d>
 8014164:	4602      	mov	r2, r0
 8014166:	460b      	mov	r3, r1
 8014168:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801416c:	f7ec f8bc 	bl	80002e8 <__aeabi_dsub>
 8014170:	3530      	adds	r5, #48	@ 0x30
 8014172:	4602      	mov	r2, r0
 8014174:	460b      	mov	r3, r1
 8014176:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801417a:	f806 5b01 	strb.w	r5, [r6], #1
 801417e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8014182:	f7ec fcdb 	bl	8000b3c <__aeabi_dcmplt>
 8014186:	2800      	cmp	r0, #0
 8014188:	d171      	bne.n	801426e <_dtoa_r+0x65e>
 801418a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801418e:	4911      	ldr	r1, [pc, #68]	@ (80141d4 <_dtoa_r+0x5c4>)
 8014190:	2000      	movs	r0, #0
 8014192:	f7ec f8a9 	bl	80002e8 <__aeabi_dsub>
 8014196:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801419a:	f7ec fccf 	bl	8000b3c <__aeabi_dcmplt>
 801419e:	2800      	cmp	r0, #0
 80141a0:	f040 8095 	bne.w	80142ce <_dtoa_r+0x6be>
 80141a4:	42a6      	cmp	r6, r4
 80141a6:	f43f af50 	beq.w	801404a <_dtoa_r+0x43a>
 80141aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80141ae:	4b0a      	ldr	r3, [pc, #40]	@ (80141d8 <_dtoa_r+0x5c8>)
 80141b0:	2200      	movs	r2, #0
 80141b2:	f7ec fa51 	bl	8000658 <__aeabi_dmul>
 80141b6:	4b08      	ldr	r3, [pc, #32]	@ (80141d8 <_dtoa_r+0x5c8>)
 80141b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80141bc:	2200      	movs	r2, #0
 80141be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80141c2:	f7ec fa49 	bl	8000658 <__aeabi_dmul>
 80141c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80141ca:	e7c4      	b.n	8014156 <_dtoa_r+0x546>
 80141cc:	0805d8f8 	.word	0x0805d8f8
 80141d0:	0805d8d0 	.word	0x0805d8d0
 80141d4:	3ff00000 	.word	0x3ff00000
 80141d8:	40240000 	.word	0x40240000
 80141dc:	401c0000 	.word	0x401c0000
 80141e0:	40140000 	.word	0x40140000
 80141e4:	3fe00000 	.word	0x3fe00000
 80141e8:	4631      	mov	r1, r6
 80141ea:	4628      	mov	r0, r5
 80141ec:	f7ec fa34 	bl	8000658 <__aeabi_dmul>
 80141f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80141f4:	9415      	str	r4, [sp, #84]	@ 0x54
 80141f6:	4656      	mov	r6, sl
 80141f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80141fc:	f7ec fcdc 	bl	8000bb8 <__aeabi_d2iz>
 8014200:	4605      	mov	r5, r0
 8014202:	f7ec f9bf 	bl	8000584 <__aeabi_i2d>
 8014206:	4602      	mov	r2, r0
 8014208:	460b      	mov	r3, r1
 801420a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801420e:	f7ec f86b 	bl	80002e8 <__aeabi_dsub>
 8014212:	3530      	adds	r5, #48	@ 0x30
 8014214:	f806 5b01 	strb.w	r5, [r6], #1
 8014218:	4602      	mov	r2, r0
 801421a:	460b      	mov	r3, r1
 801421c:	42a6      	cmp	r6, r4
 801421e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8014222:	f04f 0200 	mov.w	r2, #0
 8014226:	d124      	bne.n	8014272 <_dtoa_r+0x662>
 8014228:	4bac      	ldr	r3, [pc, #688]	@ (80144dc <_dtoa_r+0x8cc>)
 801422a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801422e:	f7ec f85d 	bl	80002ec <__adddf3>
 8014232:	4602      	mov	r2, r0
 8014234:	460b      	mov	r3, r1
 8014236:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801423a:	f7ec fc9d 	bl	8000b78 <__aeabi_dcmpgt>
 801423e:	2800      	cmp	r0, #0
 8014240:	d145      	bne.n	80142ce <_dtoa_r+0x6be>
 8014242:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8014246:	49a5      	ldr	r1, [pc, #660]	@ (80144dc <_dtoa_r+0x8cc>)
 8014248:	2000      	movs	r0, #0
 801424a:	f7ec f84d 	bl	80002e8 <__aeabi_dsub>
 801424e:	4602      	mov	r2, r0
 8014250:	460b      	mov	r3, r1
 8014252:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014256:	f7ec fc71 	bl	8000b3c <__aeabi_dcmplt>
 801425a:	2800      	cmp	r0, #0
 801425c:	f43f aef5 	beq.w	801404a <_dtoa_r+0x43a>
 8014260:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8014262:	1e73      	subs	r3, r6, #1
 8014264:	9315      	str	r3, [sp, #84]	@ 0x54
 8014266:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801426a:	2b30      	cmp	r3, #48	@ 0x30
 801426c:	d0f8      	beq.n	8014260 <_dtoa_r+0x650>
 801426e:	9f04      	ldr	r7, [sp, #16]
 8014270:	e73e      	b.n	80140f0 <_dtoa_r+0x4e0>
 8014272:	4b9b      	ldr	r3, [pc, #620]	@ (80144e0 <_dtoa_r+0x8d0>)
 8014274:	f7ec f9f0 	bl	8000658 <__aeabi_dmul>
 8014278:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801427c:	e7bc      	b.n	80141f8 <_dtoa_r+0x5e8>
 801427e:	d10c      	bne.n	801429a <_dtoa_r+0x68a>
 8014280:	4b98      	ldr	r3, [pc, #608]	@ (80144e4 <_dtoa_r+0x8d4>)
 8014282:	2200      	movs	r2, #0
 8014284:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014288:	f7ec f9e6 	bl	8000658 <__aeabi_dmul>
 801428c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014290:	f7ec fc68 	bl	8000b64 <__aeabi_dcmpge>
 8014294:	2800      	cmp	r0, #0
 8014296:	f000 8157 	beq.w	8014548 <_dtoa_r+0x938>
 801429a:	2400      	movs	r4, #0
 801429c:	4625      	mov	r5, r4
 801429e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80142a0:	43db      	mvns	r3, r3
 80142a2:	9304      	str	r3, [sp, #16]
 80142a4:	4656      	mov	r6, sl
 80142a6:	2700      	movs	r7, #0
 80142a8:	4621      	mov	r1, r4
 80142aa:	4658      	mov	r0, fp
 80142ac:	f000 fafe 	bl	80148ac <_Bfree>
 80142b0:	2d00      	cmp	r5, #0
 80142b2:	d0dc      	beq.n	801426e <_dtoa_r+0x65e>
 80142b4:	b12f      	cbz	r7, 80142c2 <_dtoa_r+0x6b2>
 80142b6:	42af      	cmp	r7, r5
 80142b8:	d003      	beq.n	80142c2 <_dtoa_r+0x6b2>
 80142ba:	4639      	mov	r1, r7
 80142bc:	4658      	mov	r0, fp
 80142be:	f000 faf5 	bl	80148ac <_Bfree>
 80142c2:	4629      	mov	r1, r5
 80142c4:	4658      	mov	r0, fp
 80142c6:	f000 faf1 	bl	80148ac <_Bfree>
 80142ca:	e7d0      	b.n	801426e <_dtoa_r+0x65e>
 80142cc:	9704      	str	r7, [sp, #16]
 80142ce:	4633      	mov	r3, r6
 80142d0:	461e      	mov	r6, r3
 80142d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80142d6:	2a39      	cmp	r2, #57	@ 0x39
 80142d8:	d107      	bne.n	80142ea <_dtoa_r+0x6da>
 80142da:	459a      	cmp	sl, r3
 80142dc:	d1f8      	bne.n	80142d0 <_dtoa_r+0x6c0>
 80142de:	9a04      	ldr	r2, [sp, #16]
 80142e0:	3201      	adds	r2, #1
 80142e2:	9204      	str	r2, [sp, #16]
 80142e4:	2230      	movs	r2, #48	@ 0x30
 80142e6:	f88a 2000 	strb.w	r2, [sl]
 80142ea:	781a      	ldrb	r2, [r3, #0]
 80142ec:	3201      	adds	r2, #1
 80142ee:	701a      	strb	r2, [r3, #0]
 80142f0:	e7bd      	b.n	801426e <_dtoa_r+0x65e>
 80142f2:	4b7b      	ldr	r3, [pc, #492]	@ (80144e0 <_dtoa_r+0x8d0>)
 80142f4:	2200      	movs	r2, #0
 80142f6:	f7ec f9af 	bl	8000658 <__aeabi_dmul>
 80142fa:	2200      	movs	r2, #0
 80142fc:	2300      	movs	r3, #0
 80142fe:	4604      	mov	r4, r0
 8014300:	460d      	mov	r5, r1
 8014302:	f7ec fc11 	bl	8000b28 <__aeabi_dcmpeq>
 8014306:	2800      	cmp	r0, #0
 8014308:	f43f aebb 	beq.w	8014082 <_dtoa_r+0x472>
 801430c:	e6f0      	b.n	80140f0 <_dtoa_r+0x4e0>
 801430e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8014310:	2a00      	cmp	r2, #0
 8014312:	f000 80db 	beq.w	80144cc <_dtoa_r+0x8bc>
 8014316:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014318:	2a01      	cmp	r2, #1
 801431a:	f300 80bf 	bgt.w	801449c <_dtoa_r+0x88c>
 801431e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8014320:	2a00      	cmp	r2, #0
 8014322:	f000 80b7 	beq.w	8014494 <_dtoa_r+0x884>
 8014326:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801432a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801432c:	4646      	mov	r6, r8
 801432e:	9a08      	ldr	r2, [sp, #32]
 8014330:	2101      	movs	r1, #1
 8014332:	441a      	add	r2, r3
 8014334:	4658      	mov	r0, fp
 8014336:	4498      	add	r8, r3
 8014338:	9208      	str	r2, [sp, #32]
 801433a:	f000 fbb5 	bl	8014aa8 <__i2b>
 801433e:	4605      	mov	r5, r0
 8014340:	b15e      	cbz	r6, 801435a <_dtoa_r+0x74a>
 8014342:	9b08      	ldr	r3, [sp, #32]
 8014344:	2b00      	cmp	r3, #0
 8014346:	dd08      	ble.n	801435a <_dtoa_r+0x74a>
 8014348:	42b3      	cmp	r3, r6
 801434a:	9a08      	ldr	r2, [sp, #32]
 801434c:	bfa8      	it	ge
 801434e:	4633      	movge	r3, r6
 8014350:	eba8 0803 	sub.w	r8, r8, r3
 8014354:	1af6      	subs	r6, r6, r3
 8014356:	1ad3      	subs	r3, r2, r3
 8014358:	9308      	str	r3, [sp, #32]
 801435a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801435c:	b1f3      	cbz	r3, 801439c <_dtoa_r+0x78c>
 801435e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014360:	2b00      	cmp	r3, #0
 8014362:	f000 80b7 	beq.w	80144d4 <_dtoa_r+0x8c4>
 8014366:	b18c      	cbz	r4, 801438c <_dtoa_r+0x77c>
 8014368:	4629      	mov	r1, r5
 801436a:	4622      	mov	r2, r4
 801436c:	4658      	mov	r0, fp
 801436e:	f000 fc5b 	bl	8014c28 <__pow5mult>
 8014372:	464a      	mov	r2, r9
 8014374:	4601      	mov	r1, r0
 8014376:	4605      	mov	r5, r0
 8014378:	4658      	mov	r0, fp
 801437a:	f000 fbab 	bl	8014ad4 <__multiply>
 801437e:	4649      	mov	r1, r9
 8014380:	9004      	str	r0, [sp, #16]
 8014382:	4658      	mov	r0, fp
 8014384:	f000 fa92 	bl	80148ac <_Bfree>
 8014388:	9b04      	ldr	r3, [sp, #16]
 801438a:	4699      	mov	r9, r3
 801438c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801438e:	1b1a      	subs	r2, r3, r4
 8014390:	d004      	beq.n	801439c <_dtoa_r+0x78c>
 8014392:	4649      	mov	r1, r9
 8014394:	4658      	mov	r0, fp
 8014396:	f000 fc47 	bl	8014c28 <__pow5mult>
 801439a:	4681      	mov	r9, r0
 801439c:	2101      	movs	r1, #1
 801439e:	4658      	mov	r0, fp
 80143a0:	f000 fb82 	bl	8014aa8 <__i2b>
 80143a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80143a6:	4604      	mov	r4, r0
 80143a8:	2b00      	cmp	r3, #0
 80143aa:	f000 81cf 	beq.w	801474c <_dtoa_r+0xb3c>
 80143ae:	461a      	mov	r2, r3
 80143b0:	4601      	mov	r1, r0
 80143b2:	4658      	mov	r0, fp
 80143b4:	f000 fc38 	bl	8014c28 <__pow5mult>
 80143b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80143ba:	2b01      	cmp	r3, #1
 80143bc:	4604      	mov	r4, r0
 80143be:	f300 8095 	bgt.w	80144ec <_dtoa_r+0x8dc>
 80143c2:	9b02      	ldr	r3, [sp, #8]
 80143c4:	2b00      	cmp	r3, #0
 80143c6:	f040 8087 	bne.w	80144d8 <_dtoa_r+0x8c8>
 80143ca:	9b03      	ldr	r3, [sp, #12]
 80143cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80143d0:	2b00      	cmp	r3, #0
 80143d2:	f040 8089 	bne.w	80144e8 <_dtoa_r+0x8d8>
 80143d6:	9b03      	ldr	r3, [sp, #12]
 80143d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80143dc:	0d1b      	lsrs	r3, r3, #20
 80143de:	051b      	lsls	r3, r3, #20
 80143e0:	b12b      	cbz	r3, 80143ee <_dtoa_r+0x7de>
 80143e2:	9b08      	ldr	r3, [sp, #32]
 80143e4:	3301      	adds	r3, #1
 80143e6:	9308      	str	r3, [sp, #32]
 80143e8:	f108 0801 	add.w	r8, r8, #1
 80143ec:	2301      	movs	r3, #1
 80143ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80143f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80143f2:	2b00      	cmp	r3, #0
 80143f4:	f000 81b0 	beq.w	8014758 <_dtoa_r+0xb48>
 80143f8:	6923      	ldr	r3, [r4, #16]
 80143fa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80143fe:	6918      	ldr	r0, [r3, #16]
 8014400:	f000 fb06 	bl	8014a10 <__hi0bits>
 8014404:	f1c0 0020 	rsb	r0, r0, #32
 8014408:	9b08      	ldr	r3, [sp, #32]
 801440a:	4418      	add	r0, r3
 801440c:	f010 001f 	ands.w	r0, r0, #31
 8014410:	d077      	beq.n	8014502 <_dtoa_r+0x8f2>
 8014412:	f1c0 0320 	rsb	r3, r0, #32
 8014416:	2b04      	cmp	r3, #4
 8014418:	dd6b      	ble.n	80144f2 <_dtoa_r+0x8e2>
 801441a:	9b08      	ldr	r3, [sp, #32]
 801441c:	f1c0 001c 	rsb	r0, r0, #28
 8014420:	4403      	add	r3, r0
 8014422:	4480      	add	r8, r0
 8014424:	4406      	add	r6, r0
 8014426:	9308      	str	r3, [sp, #32]
 8014428:	f1b8 0f00 	cmp.w	r8, #0
 801442c:	dd05      	ble.n	801443a <_dtoa_r+0x82a>
 801442e:	4649      	mov	r1, r9
 8014430:	4642      	mov	r2, r8
 8014432:	4658      	mov	r0, fp
 8014434:	f000 fc52 	bl	8014cdc <__lshift>
 8014438:	4681      	mov	r9, r0
 801443a:	9b08      	ldr	r3, [sp, #32]
 801443c:	2b00      	cmp	r3, #0
 801443e:	dd05      	ble.n	801444c <_dtoa_r+0x83c>
 8014440:	4621      	mov	r1, r4
 8014442:	461a      	mov	r2, r3
 8014444:	4658      	mov	r0, fp
 8014446:	f000 fc49 	bl	8014cdc <__lshift>
 801444a:	4604      	mov	r4, r0
 801444c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801444e:	2b00      	cmp	r3, #0
 8014450:	d059      	beq.n	8014506 <_dtoa_r+0x8f6>
 8014452:	4621      	mov	r1, r4
 8014454:	4648      	mov	r0, r9
 8014456:	f000 fcad 	bl	8014db4 <__mcmp>
 801445a:	2800      	cmp	r0, #0
 801445c:	da53      	bge.n	8014506 <_dtoa_r+0x8f6>
 801445e:	1e7b      	subs	r3, r7, #1
 8014460:	9304      	str	r3, [sp, #16]
 8014462:	4649      	mov	r1, r9
 8014464:	2300      	movs	r3, #0
 8014466:	220a      	movs	r2, #10
 8014468:	4658      	mov	r0, fp
 801446a:	f000 fa41 	bl	80148f0 <__multadd>
 801446e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014470:	4681      	mov	r9, r0
 8014472:	2b00      	cmp	r3, #0
 8014474:	f000 8172 	beq.w	801475c <_dtoa_r+0xb4c>
 8014478:	2300      	movs	r3, #0
 801447a:	4629      	mov	r1, r5
 801447c:	220a      	movs	r2, #10
 801447e:	4658      	mov	r0, fp
 8014480:	f000 fa36 	bl	80148f0 <__multadd>
 8014484:	9b00      	ldr	r3, [sp, #0]
 8014486:	2b00      	cmp	r3, #0
 8014488:	4605      	mov	r5, r0
 801448a:	dc67      	bgt.n	801455c <_dtoa_r+0x94c>
 801448c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801448e:	2b02      	cmp	r3, #2
 8014490:	dc41      	bgt.n	8014516 <_dtoa_r+0x906>
 8014492:	e063      	b.n	801455c <_dtoa_r+0x94c>
 8014494:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8014496:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801449a:	e746      	b.n	801432a <_dtoa_r+0x71a>
 801449c:	9b07      	ldr	r3, [sp, #28]
 801449e:	1e5c      	subs	r4, r3, #1
 80144a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80144a2:	42a3      	cmp	r3, r4
 80144a4:	bfbf      	itttt	lt
 80144a6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80144a8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80144aa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80144ac:	1ae3      	sublt	r3, r4, r3
 80144ae:	bfb4      	ite	lt
 80144b0:	18d2      	addlt	r2, r2, r3
 80144b2:	1b1c      	subge	r4, r3, r4
 80144b4:	9b07      	ldr	r3, [sp, #28]
 80144b6:	bfbc      	itt	lt
 80144b8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80144ba:	2400      	movlt	r4, #0
 80144bc:	2b00      	cmp	r3, #0
 80144be:	bfb5      	itete	lt
 80144c0:	eba8 0603 	sublt.w	r6, r8, r3
 80144c4:	9b07      	ldrge	r3, [sp, #28]
 80144c6:	2300      	movlt	r3, #0
 80144c8:	4646      	movge	r6, r8
 80144ca:	e730      	b.n	801432e <_dtoa_r+0x71e>
 80144cc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80144ce:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80144d0:	4646      	mov	r6, r8
 80144d2:	e735      	b.n	8014340 <_dtoa_r+0x730>
 80144d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80144d6:	e75c      	b.n	8014392 <_dtoa_r+0x782>
 80144d8:	2300      	movs	r3, #0
 80144da:	e788      	b.n	80143ee <_dtoa_r+0x7de>
 80144dc:	3fe00000 	.word	0x3fe00000
 80144e0:	40240000 	.word	0x40240000
 80144e4:	40140000 	.word	0x40140000
 80144e8:	9b02      	ldr	r3, [sp, #8]
 80144ea:	e780      	b.n	80143ee <_dtoa_r+0x7de>
 80144ec:	2300      	movs	r3, #0
 80144ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80144f0:	e782      	b.n	80143f8 <_dtoa_r+0x7e8>
 80144f2:	d099      	beq.n	8014428 <_dtoa_r+0x818>
 80144f4:	9a08      	ldr	r2, [sp, #32]
 80144f6:	331c      	adds	r3, #28
 80144f8:	441a      	add	r2, r3
 80144fa:	4498      	add	r8, r3
 80144fc:	441e      	add	r6, r3
 80144fe:	9208      	str	r2, [sp, #32]
 8014500:	e792      	b.n	8014428 <_dtoa_r+0x818>
 8014502:	4603      	mov	r3, r0
 8014504:	e7f6      	b.n	80144f4 <_dtoa_r+0x8e4>
 8014506:	9b07      	ldr	r3, [sp, #28]
 8014508:	9704      	str	r7, [sp, #16]
 801450a:	2b00      	cmp	r3, #0
 801450c:	dc20      	bgt.n	8014550 <_dtoa_r+0x940>
 801450e:	9300      	str	r3, [sp, #0]
 8014510:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014512:	2b02      	cmp	r3, #2
 8014514:	dd1e      	ble.n	8014554 <_dtoa_r+0x944>
 8014516:	9b00      	ldr	r3, [sp, #0]
 8014518:	2b00      	cmp	r3, #0
 801451a:	f47f aec0 	bne.w	801429e <_dtoa_r+0x68e>
 801451e:	4621      	mov	r1, r4
 8014520:	2205      	movs	r2, #5
 8014522:	4658      	mov	r0, fp
 8014524:	f000 f9e4 	bl	80148f0 <__multadd>
 8014528:	4601      	mov	r1, r0
 801452a:	4604      	mov	r4, r0
 801452c:	4648      	mov	r0, r9
 801452e:	f000 fc41 	bl	8014db4 <__mcmp>
 8014532:	2800      	cmp	r0, #0
 8014534:	f77f aeb3 	ble.w	801429e <_dtoa_r+0x68e>
 8014538:	4656      	mov	r6, sl
 801453a:	2331      	movs	r3, #49	@ 0x31
 801453c:	f806 3b01 	strb.w	r3, [r6], #1
 8014540:	9b04      	ldr	r3, [sp, #16]
 8014542:	3301      	adds	r3, #1
 8014544:	9304      	str	r3, [sp, #16]
 8014546:	e6ae      	b.n	80142a6 <_dtoa_r+0x696>
 8014548:	9c07      	ldr	r4, [sp, #28]
 801454a:	9704      	str	r7, [sp, #16]
 801454c:	4625      	mov	r5, r4
 801454e:	e7f3      	b.n	8014538 <_dtoa_r+0x928>
 8014550:	9b07      	ldr	r3, [sp, #28]
 8014552:	9300      	str	r3, [sp, #0]
 8014554:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014556:	2b00      	cmp	r3, #0
 8014558:	f000 8104 	beq.w	8014764 <_dtoa_r+0xb54>
 801455c:	2e00      	cmp	r6, #0
 801455e:	dd05      	ble.n	801456c <_dtoa_r+0x95c>
 8014560:	4629      	mov	r1, r5
 8014562:	4632      	mov	r2, r6
 8014564:	4658      	mov	r0, fp
 8014566:	f000 fbb9 	bl	8014cdc <__lshift>
 801456a:	4605      	mov	r5, r0
 801456c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801456e:	2b00      	cmp	r3, #0
 8014570:	d05a      	beq.n	8014628 <_dtoa_r+0xa18>
 8014572:	6869      	ldr	r1, [r5, #4]
 8014574:	4658      	mov	r0, fp
 8014576:	f000 f959 	bl	801482c <_Balloc>
 801457a:	4606      	mov	r6, r0
 801457c:	b928      	cbnz	r0, 801458a <_dtoa_r+0x97a>
 801457e:	4b84      	ldr	r3, [pc, #528]	@ (8014790 <_dtoa_r+0xb80>)
 8014580:	4602      	mov	r2, r0
 8014582:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8014586:	f7ff bb5a 	b.w	8013c3e <_dtoa_r+0x2e>
 801458a:	692a      	ldr	r2, [r5, #16]
 801458c:	3202      	adds	r2, #2
 801458e:	0092      	lsls	r2, r2, #2
 8014590:	f105 010c 	add.w	r1, r5, #12
 8014594:	300c      	adds	r0, #12
 8014596:	f7ff fa80 	bl	8013a9a <memcpy>
 801459a:	2201      	movs	r2, #1
 801459c:	4631      	mov	r1, r6
 801459e:	4658      	mov	r0, fp
 80145a0:	f000 fb9c 	bl	8014cdc <__lshift>
 80145a4:	f10a 0301 	add.w	r3, sl, #1
 80145a8:	9307      	str	r3, [sp, #28]
 80145aa:	9b00      	ldr	r3, [sp, #0]
 80145ac:	4453      	add	r3, sl
 80145ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 80145b0:	9b02      	ldr	r3, [sp, #8]
 80145b2:	f003 0301 	and.w	r3, r3, #1
 80145b6:	462f      	mov	r7, r5
 80145b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80145ba:	4605      	mov	r5, r0
 80145bc:	9b07      	ldr	r3, [sp, #28]
 80145be:	4621      	mov	r1, r4
 80145c0:	3b01      	subs	r3, #1
 80145c2:	4648      	mov	r0, r9
 80145c4:	9300      	str	r3, [sp, #0]
 80145c6:	f7ff fa9b 	bl	8013b00 <quorem>
 80145ca:	4639      	mov	r1, r7
 80145cc:	9002      	str	r0, [sp, #8]
 80145ce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80145d2:	4648      	mov	r0, r9
 80145d4:	f000 fbee 	bl	8014db4 <__mcmp>
 80145d8:	462a      	mov	r2, r5
 80145da:	9008      	str	r0, [sp, #32]
 80145dc:	4621      	mov	r1, r4
 80145de:	4658      	mov	r0, fp
 80145e0:	f000 fc04 	bl	8014dec <__mdiff>
 80145e4:	68c2      	ldr	r2, [r0, #12]
 80145e6:	4606      	mov	r6, r0
 80145e8:	bb02      	cbnz	r2, 801462c <_dtoa_r+0xa1c>
 80145ea:	4601      	mov	r1, r0
 80145ec:	4648      	mov	r0, r9
 80145ee:	f000 fbe1 	bl	8014db4 <__mcmp>
 80145f2:	4602      	mov	r2, r0
 80145f4:	4631      	mov	r1, r6
 80145f6:	4658      	mov	r0, fp
 80145f8:	920e      	str	r2, [sp, #56]	@ 0x38
 80145fa:	f000 f957 	bl	80148ac <_Bfree>
 80145fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014600:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014602:	9e07      	ldr	r6, [sp, #28]
 8014604:	ea43 0102 	orr.w	r1, r3, r2
 8014608:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801460a:	4319      	orrs	r1, r3
 801460c:	d110      	bne.n	8014630 <_dtoa_r+0xa20>
 801460e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8014612:	d029      	beq.n	8014668 <_dtoa_r+0xa58>
 8014614:	9b08      	ldr	r3, [sp, #32]
 8014616:	2b00      	cmp	r3, #0
 8014618:	dd02      	ble.n	8014620 <_dtoa_r+0xa10>
 801461a:	9b02      	ldr	r3, [sp, #8]
 801461c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8014620:	9b00      	ldr	r3, [sp, #0]
 8014622:	f883 8000 	strb.w	r8, [r3]
 8014626:	e63f      	b.n	80142a8 <_dtoa_r+0x698>
 8014628:	4628      	mov	r0, r5
 801462a:	e7bb      	b.n	80145a4 <_dtoa_r+0x994>
 801462c:	2201      	movs	r2, #1
 801462e:	e7e1      	b.n	80145f4 <_dtoa_r+0x9e4>
 8014630:	9b08      	ldr	r3, [sp, #32]
 8014632:	2b00      	cmp	r3, #0
 8014634:	db04      	blt.n	8014640 <_dtoa_r+0xa30>
 8014636:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8014638:	430b      	orrs	r3, r1
 801463a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801463c:	430b      	orrs	r3, r1
 801463e:	d120      	bne.n	8014682 <_dtoa_r+0xa72>
 8014640:	2a00      	cmp	r2, #0
 8014642:	dded      	ble.n	8014620 <_dtoa_r+0xa10>
 8014644:	4649      	mov	r1, r9
 8014646:	2201      	movs	r2, #1
 8014648:	4658      	mov	r0, fp
 801464a:	f000 fb47 	bl	8014cdc <__lshift>
 801464e:	4621      	mov	r1, r4
 8014650:	4681      	mov	r9, r0
 8014652:	f000 fbaf 	bl	8014db4 <__mcmp>
 8014656:	2800      	cmp	r0, #0
 8014658:	dc03      	bgt.n	8014662 <_dtoa_r+0xa52>
 801465a:	d1e1      	bne.n	8014620 <_dtoa_r+0xa10>
 801465c:	f018 0f01 	tst.w	r8, #1
 8014660:	d0de      	beq.n	8014620 <_dtoa_r+0xa10>
 8014662:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8014666:	d1d8      	bne.n	801461a <_dtoa_r+0xa0a>
 8014668:	9a00      	ldr	r2, [sp, #0]
 801466a:	2339      	movs	r3, #57	@ 0x39
 801466c:	7013      	strb	r3, [r2, #0]
 801466e:	4633      	mov	r3, r6
 8014670:	461e      	mov	r6, r3
 8014672:	3b01      	subs	r3, #1
 8014674:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8014678:	2a39      	cmp	r2, #57	@ 0x39
 801467a:	d052      	beq.n	8014722 <_dtoa_r+0xb12>
 801467c:	3201      	adds	r2, #1
 801467e:	701a      	strb	r2, [r3, #0]
 8014680:	e612      	b.n	80142a8 <_dtoa_r+0x698>
 8014682:	2a00      	cmp	r2, #0
 8014684:	dd07      	ble.n	8014696 <_dtoa_r+0xa86>
 8014686:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801468a:	d0ed      	beq.n	8014668 <_dtoa_r+0xa58>
 801468c:	9a00      	ldr	r2, [sp, #0]
 801468e:	f108 0301 	add.w	r3, r8, #1
 8014692:	7013      	strb	r3, [r2, #0]
 8014694:	e608      	b.n	80142a8 <_dtoa_r+0x698>
 8014696:	9b07      	ldr	r3, [sp, #28]
 8014698:	9a07      	ldr	r2, [sp, #28]
 801469a:	f803 8c01 	strb.w	r8, [r3, #-1]
 801469e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80146a0:	4293      	cmp	r3, r2
 80146a2:	d028      	beq.n	80146f6 <_dtoa_r+0xae6>
 80146a4:	4649      	mov	r1, r9
 80146a6:	2300      	movs	r3, #0
 80146a8:	220a      	movs	r2, #10
 80146aa:	4658      	mov	r0, fp
 80146ac:	f000 f920 	bl	80148f0 <__multadd>
 80146b0:	42af      	cmp	r7, r5
 80146b2:	4681      	mov	r9, r0
 80146b4:	f04f 0300 	mov.w	r3, #0
 80146b8:	f04f 020a 	mov.w	r2, #10
 80146bc:	4639      	mov	r1, r7
 80146be:	4658      	mov	r0, fp
 80146c0:	d107      	bne.n	80146d2 <_dtoa_r+0xac2>
 80146c2:	f000 f915 	bl	80148f0 <__multadd>
 80146c6:	4607      	mov	r7, r0
 80146c8:	4605      	mov	r5, r0
 80146ca:	9b07      	ldr	r3, [sp, #28]
 80146cc:	3301      	adds	r3, #1
 80146ce:	9307      	str	r3, [sp, #28]
 80146d0:	e774      	b.n	80145bc <_dtoa_r+0x9ac>
 80146d2:	f000 f90d 	bl	80148f0 <__multadd>
 80146d6:	4629      	mov	r1, r5
 80146d8:	4607      	mov	r7, r0
 80146da:	2300      	movs	r3, #0
 80146dc:	220a      	movs	r2, #10
 80146de:	4658      	mov	r0, fp
 80146e0:	f000 f906 	bl	80148f0 <__multadd>
 80146e4:	4605      	mov	r5, r0
 80146e6:	e7f0      	b.n	80146ca <_dtoa_r+0xaba>
 80146e8:	9b00      	ldr	r3, [sp, #0]
 80146ea:	2b00      	cmp	r3, #0
 80146ec:	bfcc      	ite	gt
 80146ee:	461e      	movgt	r6, r3
 80146f0:	2601      	movle	r6, #1
 80146f2:	4456      	add	r6, sl
 80146f4:	2700      	movs	r7, #0
 80146f6:	4649      	mov	r1, r9
 80146f8:	2201      	movs	r2, #1
 80146fa:	4658      	mov	r0, fp
 80146fc:	f000 faee 	bl	8014cdc <__lshift>
 8014700:	4621      	mov	r1, r4
 8014702:	4681      	mov	r9, r0
 8014704:	f000 fb56 	bl	8014db4 <__mcmp>
 8014708:	2800      	cmp	r0, #0
 801470a:	dcb0      	bgt.n	801466e <_dtoa_r+0xa5e>
 801470c:	d102      	bne.n	8014714 <_dtoa_r+0xb04>
 801470e:	f018 0f01 	tst.w	r8, #1
 8014712:	d1ac      	bne.n	801466e <_dtoa_r+0xa5e>
 8014714:	4633      	mov	r3, r6
 8014716:	461e      	mov	r6, r3
 8014718:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801471c:	2a30      	cmp	r2, #48	@ 0x30
 801471e:	d0fa      	beq.n	8014716 <_dtoa_r+0xb06>
 8014720:	e5c2      	b.n	80142a8 <_dtoa_r+0x698>
 8014722:	459a      	cmp	sl, r3
 8014724:	d1a4      	bne.n	8014670 <_dtoa_r+0xa60>
 8014726:	9b04      	ldr	r3, [sp, #16]
 8014728:	3301      	adds	r3, #1
 801472a:	9304      	str	r3, [sp, #16]
 801472c:	2331      	movs	r3, #49	@ 0x31
 801472e:	f88a 3000 	strb.w	r3, [sl]
 8014732:	e5b9      	b.n	80142a8 <_dtoa_r+0x698>
 8014734:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8014736:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8014794 <_dtoa_r+0xb84>
 801473a:	b11b      	cbz	r3, 8014744 <_dtoa_r+0xb34>
 801473c:	f10a 0308 	add.w	r3, sl, #8
 8014740:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8014742:	6013      	str	r3, [r2, #0]
 8014744:	4650      	mov	r0, sl
 8014746:	b019      	add	sp, #100	@ 0x64
 8014748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801474c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801474e:	2b01      	cmp	r3, #1
 8014750:	f77f ae37 	ble.w	80143c2 <_dtoa_r+0x7b2>
 8014754:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014756:	930a      	str	r3, [sp, #40]	@ 0x28
 8014758:	2001      	movs	r0, #1
 801475a:	e655      	b.n	8014408 <_dtoa_r+0x7f8>
 801475c:	9b00      	ldr	r3, [sp, #0]
 801475e:	2b00      	cmp	r3, #0
 8014760:	f77f aed6 	ble.w	8014510 <_dtoa_r+0x900>
 8014764:	4656      	mov	r6, sl
 8014766:	4621      	mov	r1, r4
 8014768:	4648      	mov	r0, r9
 801476a:	f7ff f9c9 	bl	8013b00 <quorem>
 801476e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8014772:	f806 8b01 	strb.w	r8, [r6], #1
 8014776:	9b00      	ldr	r3, [sp, #0]
 8014778:	eba6 020a 	sub.w	r2, r6, sl
 801477c:	4293      	cmp	r3, r2
 801477e:	ddb3      	ble.n	80146e8 <_dtoa_r+0xad8>
 8014780:	4649      	mov	r1, r9
 8014782:	2300      	movs	r3, #0
 8014784:	220a      	movs	r2, #10
 8014786:	4658      	mov	r0, fp
 8014788:	f000 f8b2 	bl	80148f0 <__multadd>
 801478c:	4681      	mov	r9, r0
 801478e:	e7ea      	b.n	8014766 <_dtoa_r+0xb56>
 8014790:	0805d859 	.word	0x0805d859
 8014794:	0805d7f4 	.word	0x0805d7f4

08014798 <_free_r>:
 8014798:	b538      	push	{r3, r4, r5, lr}
 801479a:	4605      	mov	r5, r0
 801479c:	2900      	cmp	r1, #0
 801479e:	d041      	beq.n	8014824 <_free_r+0x8c>
 80147a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80147a4:	1f0c      	subs	r4, r1, #4
 80147a6:	2b00      	cmp	r3, #0
 80147a8:	bfb8      	it	lt
 80147aa:	18e4      	addlt	r4, r4, r3
 80147ac:	f7fe f88a 	bl	80128c4 <__malloc_lock>
 80147b0:	4a1d      	ldr	r2, [pc, #116]	@ (8014828 <_free_r+0x90>)
 80147b2:	6813      	ldr	r3, [r2, #0]
 80147b4:	b933      	cbnz	r3, 80147c4 <_free_r+0x2c>
 80147b6:	6063      	str	r3, [r4, #4]
 80147b8:	6014      	str	r4, [r2, #0]
 80147ba:	4628      	mov	r0, r5
 80147bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80147c0:	f7fe b886 	b.w	80128d0 <__malloc_unlock>
 80147c4:	42a3      	cmp	r3, r4
 80147c6:	d908      	bls.n	80147da <_free_r+0x42>
 80147c8:	6820      	ldr	r0, [r4, #0]
 80147ca:	1821      	adds	r1, r4, r0
 80147cc:	428b      	cmp	r3, r1
 80147ce:	bf01      	itttt	eq
 80147d0:	6819      	ldreq	r1, [r3, #0]
 80147d2:	685b      	ldreq	r3, [r3, #4]
 80147d4:	1809      	addeq	r1, r1, r0
 80147d6:	6021      	streq	r1, [r4, #0]
 80147d8:	e7ed      	b.n	80147b6 <_free_r+0x1e>
 80147da:	461a      	mov	r2, r3
 80147dc:	685b      	ldr	r3, [r3, #4]
 80147de:	b10b      	cbz	r3, 80147e4 <_free_r+0x4c>
 80147e0:	42a3      	cmp	r3, r4
 80147e2:	d9fa      	bls.n	80147da <_free_r+0x42>
 80147e4:	6811      	ldr	r1, [r2, #0]
 80147e6:	1850      	adds	r0, r2, r1
 80147e8:	42a0      	cmp	r0, r4
 80147ea:	d10b      	bne.n	8014804 <_free_r+0x6c>
 80147ec:	6820      	ldr	r0, [r4, #0]
 80147ee:	4401      	add	r1, r0
 80147f0:	1850      	adds	r0, r2, r1
 80147f2:	4283      	cmp	r3, r0
 80147f4:	6011      	str	r1, [r2, #0]
 80147f6:	d1e0      	bne.n	80147ba <_free_r+0x22>
 80147f8:	6818      	ldr	r0, [r3, #0]
 80147fa:	685b      	ldr	r3, [r3, #4]
 80147fc:	6053      	str	r3, [r2, #4]
 80147fe:	4408      	add	r0, r1
 8014800:	6010      	str	r0, [r2, #0]
 8014802:	e7da      	b.n	80147ba <_free_r+0x22>
 8014804:	d902      	bls.n	801480c <_free_r+0x74>
 8014806:	230c      	movs	r3, #12
 8014808:	602b      	str	r3, [r5, #0]
 801480a:	e7d6      	b.n	80147ba <_free_r+0x22>
 801480c:	6820      	ldr	r0, [r4, #0]
 801480e:	1821      	adds	r1, r4, r0
 8014810:	428b      	cmp	r3, r1
 8014812:	bf04      	itt	eq
 8014814:	6819      	ldreq	r1, [r3, #0]
 8014816:	685b      	ldreq	r3, [r3, #4]
 8014818:	6063      	str	r3, [r4, #4]
 801481a:	bf04      	itt	eq
 801481c:	1809      	addeq	r1, r1, r0
 801481e:	6021      	streq	r1, [r4, #0]
 8014820:	6054      	str	r4, [r2, #4]
 8014822:	e7ca      	b.n	80147ba <_free_r+0x22>
 8014824:	bd38      	pop	{r3, r4, r5, pc}
 8014826:	bf00      	nop
 8014828:	2000c67c 	.word	0x2000c67c

0801482c <_Balloc>:
 801482c:	b570      	push	{r4, r5, r6, lr}
 801482e:	69c6      	ldr	r6, [r0, #28]
 8014830:	4604      	mov	r4, r0
 8014832:	460d      	mov	r5, r1
 8014834:	b976      	cbnz	r6, 8014854 <_Balloc+0x28>
 8014836:	2010      	movs	r0, #16
 8014838:	f7fd ff9a 	bl	8012770 <malloc>
 801483c:	4602      	mov	r2, r0
 801483e:	61e0      	str	r0, [r4, #28]
 8014840:	b920      	cbnz	r0, 801484c <_Balloc+0x20>
 8014842:	4b18      	ldr	r3, [pc, #96]	@ (80148a4 <_Balloc+0x78>)
 8014844:	4818      	ldr	r0, [pc, #96]	@ (80148a8 <_Balloc+0x7c>)
 8014846:	216b      	movs	r1, #107	@ 0x6b
 8014848:	f7ff f93c 	bl	8013ac4 <__assert_func>
 801484c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014850:	6006      	str	r6, [r0, #0]
 8014852:	60c6      	str	r6, [r0, #12]
 8014854:	69e6      	ldr	r6, [r4, #28]
 8014856:	68f3      	ldr	r3, [r6, #12]
 8014858:	b183      	cbz	r3, 801487c <_Balloc+0x50>
 801485a:	69e3      	ldr	r3, [r4, #28]
 801485c:	68db      	ldr	r3, [r3, #12]
 801485e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014862:	b9b8      	cbnz	r0, 8014894 <_Balloc+0x68>
 8014864:	2101      	movs	r1, #1
 8014866:	fa01 f605 	lsl.w	r6, r1, r5
 801486a:	1d72      	adds	r2, r6, #5
 801486c:	0092      	lsls	r2, r2, #2
 801486e:	4620      	mov	r0, r4
 8014870:	f002 f8fd 	bl	8016a6e <_calloc_r>
 8014874:	b160      	cbz	r0, 8014890 <_Balloc+0x64>
 8014876:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801487a:	e00e      	b.n	801489a <_Balloc+0x6e>
 801487c:	2221      	movs	r2, #33	@ 0x21
 801487e:	2104      	movs	r1, #4
 8014880:	4620      	mov	r0, r4
 8014882:	f002 f8f4 	bl	8016a6e <_calloc_r>
 8014886:	69e3      	ldr	r3, [r4, #28]
 8014888:	60f0      	str	r0, [r6, #12]
 801488a:	68db      	ldr	r3, [r3, #12]
 801488c:	2b00      	cmp	r3, #0
 801488e:	d1e4      	bne.n	801485a <_Balloc+0x2e>
 8014890:	2000      	movs	r0, #0
 8014892:	bd70      	pop	{r4, r5, r6, pc}
 8014894:	6802      	ldr	r2, [r0, #0]
 8014896:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801489a:	2300      	movs	r3, #0
 801489c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80148a0:	e7f7      	b.n	8014892 <_Balloc+0x66>
 80148a2:	bf00      	nop
 80148a4:	0805d747 	.word	0x0805d747
 80148a8:	0805d86a 	.word	0x0805d86a

080148ac <_Bfree>:
 80148ac:	b570      	push	{r4, r5, r6, lr}
 80148ae:	69c6      	ldr	r6, [r0, #28]
 80148b0:	4605      	mov	r5, r0
 80148b2:	460c      	mov	r4, r1
 80148b4:	b976      	cbnz	r6, 80148d4 <_Bfree+0x28>
 80148b6:	2010      	movs	r0, #16
 80148b8:	f7fd ff5a 	bl	8012770 <malloc>
 80148bc:	4602      	mov	r2, r0
 80148be:	61e8      	str	r0, [r5, #28]
 80148c0:	b920      	cbnz	r0, 80148cc <_Bfree+0x20>
 80148c2:	4b09      	ldr	r3, [pc, #36]	@ (80148e8 <_Bfree+0x3c>)
 80148c4:	4809      	ldr	r0, [pc, #36]	@ (80148ec <_Bfree+0x40>)
 80148c6:	218f      	movs	r1, #143	@ 0x8f
 80148c8:	f7ff f8fc 	bl	8013ac4 <__assert_func>
 80148cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80148d0:	6006      	str	r6, [r0, #0]
 80148d2:	60c6      	str	r6, [r0, #12]
 80148d4:	b13c      	cbz	r4, 80148e6 <_Bfree+0x3a>
 80148d6:	69eb      	ldr	r3, [r5, #28]
 80148d8:	6862      	ldr	r2, [r4, #4]
 80148da:	68db      	ldr	r3, [r3, #12]
 80148dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80148e0:	6021      	str	r1, [r4, #0]
 80148e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80148e6:	bd70      	pop	{r4, r5, r6, pc}
 80148e8:	0805d747 	.word	0x0805d747
 80148ec:	0805d86a 	.word	0x0805d86a

080148f0 <__multadd>:
 80148f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80148f4:	690d      	ldr	r5, [r1, #16]
 80148f6:	4607      	mov	r7, r0
 80148f8:	460c      	mov	r4, r1
 80148fa:	461e      	mov	r6, r3
 80148fc:	f101 0c14 	add.w	ip, r1, #20
 8014900:	2000      	movs	r0, #0
 8014902:	f8dc 3000 	ldr.w	r3, [ip]
 8014906:	b299      	uxth	r1, r3
 8014908:	fb02 6101 	mla	r1, r2, r1, r6
 801490c:	0c1e      	lsrs	r6, r3, #16
 801490e:	0c0b      	lsrs	r3, r1, #16
 8014910:	fb02 3306 	mla	r3, r2, r6, r3
 8014914:	b289      	uxth	r1, r1
 8014916:	3001      	adds	r0, #1
 8014918:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801491c:	4285      	cmp	r5, r0
 801491e:	f84c 1b04 	str.w	r1, [ip], #4
 8014922:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8014926:	dcec      	bgt.n	8014902 <__multadd+0x12>
 8014928:	b30e      	cbz	r6, 801496e <__multadd+0x7e>
 801492a:	68a3      	ldr	r3, [r4, #8]
 801492c:	42ab      	cmp	r3, r5
 801492e:	dc19      	bgt.n	8014964 <__multadd+0x74>
 8014930:	6861      	ldr	r1, [r4, #4]
 8014932:	4638      	mov	r0, r7
 8014934:	3101      	adds	r1, #1
 8014936:	f7ff ff79 	bl	801482c <_Balloc>
 801493a:	4680      	mov	r8, r0
 801493c:	b928      	cbnz	r0, 801494a <__multadd+0x5a>
 801493e:	4602      	mov	r2, r0
 8014940:	4b0c      	ldr	r3, [pc, #48]	@ (8014974 <__multadd+0x84>)
 8014942:	480d      	ldr	r0, [pc, #52]	@ (8014978 <__multadd+0x88>)
 8014944:	21ba      	movs	r1, #186	@ 0xba
 8014946:	f7ff f8bd 	bl	8013ac4 <__assert_func>
 801494a:	6922      	ldr	r2, [r4, #16]
 801494c:	3202      	adds	r2, #2
 801494e:	f104 010c 	add.w	r1, r4, #12
 8014952:	0092      	lsls	r2, r2, #2
 8014954:	300c      	adds	r0, #12
 8014956:	f7ff f8a0 	bl	8013a9a <memcpy>
 801495a:	4621      	mov	r1, r4
 801495c:	4638      	mov	r0, r7
 801495e:	f7ff ffa5 	bl	80148ac <_Bfree>
 8014962:	4644      	mov	r4, r8
 8014964:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8014968:	3501      	adds	r5, #1
 801496a:	615e      	str	r6, [r3, #20]
 801496c:	6125      	str	r5, [r4, #16]
 801496e:	4620      	mov	r0, r4
 8014970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014974:	0805d859 	.word	0x0805d859
 8014978:	0805d86a 	.word	0x0805d86a

0801497c <__s2b>:
 801497c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014980:	460c      	mov	r4, r1
 8014982:	4615      	mov	r5, r2
 8014984:	461f      	mov	r7, r3
 8014986:	2209      	movs	r2, #9
 8014988:	3308      	adds	r3, #8
 801498a:	4606      	mov	r6, r0
 801498c:	fb93 f3f2 	sdiv	r3, r3, r2
 8014990:	2100      	movs	r1, #0
 8014992:	2201      	movs	r2, #1
 8014994:	429a      	cmp	r2, r3
 8014996:	db09      	blt.n	80149ac <__s2b+0x30>
 8014998:	4630      	mov	r0, r6
 801499a:	f7ff ff47 	bl	801482c <_Balloc>
 801499e:	b940      	cbnz	r0, 80149b2 <__s2b+0x36>
 80149a0:	4602      	mov	r2, r0
 80149a2:	4b19      	ldr	r3, [pc, #100]	@ (8014a08 <__s2b+0x8c>)
 80149a4:	4819      	ldr	r0, [pc, #100]	@ (8014a0c <__s2b+0x90>)
 80149a6:	21d3      	movs	r1, #211	@ 0xd3
 80149a8:	f7ff f88c 	bl	8013ac4 <__assert_func>
 80149ac:	0052      	lsls	r2, r2, #1
 80149ae:	3101      	adds	r1, #1
 80149b0:	e7f0      	b.n	8014994 <__s2b+0x18>
 80149b2:	9b08      	ldr	r3, [sp, #32]
 80149b4:	6143      	str	r3, [r0, #20]
 80149b6:	2d09      	cmp	r5, #9
 80149b8:	f04f 0301 	mov.w	r3, #1
 80149bc:	6103      	str	r3, [r0, #16]
 80149be:	dd16      	ble.n	80149ee <__s2b+0x72>
 80149c0:	f104 0909 	add.w	r9, r4, #9
 80149c4:	46c8      	mov	r8, r9
 80149c6:	442c      	add	r4, r5
 80149c8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80149cc:	4601      	mov	r1, r0
 80149ce:	3b30      	subs	r3, #48	@ 0x30
 80149d0:	220a      	movs	r2, #10
 80149d2:	4630      	mov	r0, r6
 80149d4:	f7ff ff8c 	bl	80148f0 <__multadd>
 80149d8:	45a0      	cmp	r8, r4
 80149da:	d1f5      	bne.n	80149c8 <__s2b+0x4c>
 80149dc:	f1a5 0408 	sub.w	r4, r5, #8
 80149e0:	444c      	add	r4, r9
 80149e2:	1b2d      	subs	r5, r5, r4
 80149e4:	1963      	adds	r3, r4, r5
 80149e6:	42bb      	cmp	r3, r7
 80149e8:	db04      	blt.n	80149f4 <__s2b+0x78>
 80149ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80149ee:	340a      	adds	r4, #10
 80149f0:	2509      	movs	r5, #9
 80149f2:	e7f6      	b.n	80149e2 <__s2b+0x66>
 80149f4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80149f8:	4601      	mov	r1, r0
 80149fa:	3b30      	subs	r3, #48	@ 0x30
 80149fc:	220a      	movs	r2, #10
 80149fe:	4630      	mov	r0, r6
 8014a00:	f7ff ff76 	bl	80148f0 <__multadd>
 8014a04:	e7ee      	b.n	80149e4 <__s2b+0x68>
 8014a06:	bf00      	nop
 8014a08:	0805d859 	.word	0x0805d859
 8014a0c:	0805d86a 	.word	0x0805d86a

08014a10 <__hi0bits>:
 8014a10:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8014a14:	4603      	mov	r3, r0
 8014a16:	bf36      	itet	cc
 8014a18:	0403      	lslcc	r3, r0, #16
 8014a1a:	2000      	movcs	r0, #0
 8014a1c:	2010      	movcc	r0, #16
 8014a1e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8014a22:	bf3c      	itt	cc
 8014a24:	021b      	lslcc	r3, r3, #8
 8014a26:	3008      	addcc	r0, #8
 8014a28:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8014a2c:	bf3c      	itt	cc
 8014a2e:	011b      	lslcc	r3, r3, #4
 8014a30:	3004      	addcc	r0, #4
 8014a32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8014a36:	bf3c      	itt	cc
 8014a38:	009b      	lslcc	r3, r3, #2
 8014a3a:	3002      	addcc	r0, #2
 8014a3c:	2b00      	cmp	r3, #0
 8014a3e:	db05      	blt.n	8014a4c <__hi0bits+0x3c>
 8014a40:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8014a44:	f100 0001 	add.w	r0, r0, #1
 8014a48:	bf08      	it	eq
 8014a4a:	2020      	moveq	r0, #32
 8014a4c:	4770      	bx	lr

08014a4e <__lo0bits>:
 8014a4e:	6803      	ldr	r3, [r0, #0]
 8014a50:	4602      	mov	r2, r0
 8014a52:	f013 0007 	ands.w	r0, r3, #7
 8014a56:	d00b      	beq.n	8014a70 <__lo0bits+0x22>
 8014a58:	07d9      	lsls	r1, r3, #31
 8014a5a:	d421      	bmi.n	8014aa0 <__lo0bits+0x52>
 8014a5c:	0798      	lsls	r0, r3, #30
 8014a5e:	bf49      	itett	mi
 8014a60:	085b      	lsrmi	r3, r3, #1
 8014a62:	089b      	lsrpl	r3, r3, #2
 8014a64:	2001      	movmi	r0, #1
 8014a66:	6013      	strmi	r3, [r2, #0]
 8014a68:	bf5c      	itt	pl
 8014a6a:	6013      	strpl	r3, [r2, #0]
 8014a6c:	2002      	movpl	r0, #2
 8014a6e:	4770      	bx	lr
 8014a70:	b299      	uxth	r1, r3
 8014a72:	b909      	cbnz	r1, 8014a78 <__lo0bits+0x2a>
 8014a74:	0c1b      	lsrs	r3, r3, #16
 8014a76:	2010      	movs	r0, #16
 8014a78:	b2d9      	uxtb	r1, r3
 8014a7a:	b909      	cbnz	r1, 8014a80 <__lo0bits+0x32>
 8014a7c:	3008      	adds	r0, #8
 8014a7e:	0a1b      	lsrs	r3, r3, #8
 8014a80:	0719      	lsls	r1, r3, #28
 8014a82:	bf04      	itt	eq
 8014a84:	091b      	lsreq	r3, r3, #4
 8014a86:	3004      	addeq	r0, #4
 8014a88:	0799      	lsls	r1, r3, #30
 8014a8a:	bf04      	itt	eq
 8014a8c:	089b      	lsreq	r3, r3, #2
 8014a8e:	3002      	addeq	r0, #2
 8014a90:	07d9      	lsls	r1, r3, #31
 8014a92:	d403      	bmi.n	8014a9c <__lo0bits+0x4e>
 8014a94:	085b      	lsrs	r3, r3, #1
 8014a96:	f100 0001 	add.w	r0, r0, #1
 8014a9a:	d003      	beq.n	8014aa4 <__lo0bits+0x56>
 8014a9c:	6013      	str	r3, [r2, #0]
 8014a9e:	4770      	bx	lr
 8014aa0:	2000      	movs	r0, #0
 8014aa2:	4770      	bx	lr
 8014aa4:	2020      	movs	r0, #32
 8014aa6:	4770      	bx	lr

08014aa8 <__i2b>:
 8014aa8:	b510      	push	{r4, lr}
 8014aaa:	460c      	mov	r4, r1
 8014aac:	2101      	movs	r1, #1
 8014aae:	f7ff febd 	bl	801482c <_Balloc>
 8014ab2:	4602      	mov	r2, r0
 8014ab4:	b928      	cbnz	r0, 8014ac2 <__i2b+0x1a>
 8014ab6:	4b05      	ldr	r3, [pc, #20]	@ (8014acc <__i2b+0x24>)
 8014ab8:	4805      	ldr	r0, [pc, #20]	@ (8014ad0 <__i2b+0x28>)
 8014aba:	f240 1145 	movw	r1, #325	@ 0x145
 8014abe:	f7ff f801 	bl	8013ac4 <__assert_func>
 8014ac2:	2301      	movs	r3, #1
 8014ac4:	6144      	str	r4, [r0, #20]
 8014ac6:	6103      	str	r3, [r0, #16]
 8014ac8:	bd10      	pop	{r4, pc}
 8014aca:	bf00      	nop
 8014acc:	0805d859 	.word	0x0805d859
 8014ad0:	0805d86a 	.word	0x0805d86a

08014ad4 <__multiply>:
 8014ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ad8:	4614      	mov	r4, r2
 8014ada:	690a      	ldr	r2, [r1, #16]
 8014adc:	6923      	ldr	r3, [r4, #16]
 8014ade:	429a      	cmp	r2, r3
 8014ae0:	bfa8      	it	ge
 8014ae2:	4623      	movge	r3, r4
 8014ae4:	460f      	mov	r7, r1
 8014ae6:	bfa4      	itt	ge
 8014ae8:	460c      	movge	r4, r1
 8014aea:	461f      	movge	r7, r3
 8014aec:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8014af0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8014af4:	68a3      	ldr	r3, [r4, #8]
 8014af6:	6861      	ldr	r1, [r4, #4]
 8014af8:	eb0a 0609 	add.w	r6, sl, r9
 8014afc:	42b3      	cmp	r3, r6
 8014afe:	b085      	sub	sp, #20
 8014b00:	bfb8      	it	lt
 8014b02:	3101      	addlt	r1, #1
 8014b04:	f7ff fe92 	bl	801482c <_Balloc>
 8014b08:	b930      	cbnz	r0, 8014b18 <__multiply+0x44>
 8014b0a:	4602      	mov	r2, r0
 8014b0c:	4b44      	ldr	r3, [pc, #272]	@ (8014c20 <__multiply+0x14c>)
 8014b0e:	4845      	ldr	r0, [pc, #276]	@ (8014c24 <__multiply+0x150>)
 8014b10:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8014b14:	f7fe ffd6 	bl	8013ac4 <__assert_func>
 8014b18:	f100 0514 	add.w	r5, r0, #20
 8014b1c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8014b20:	462b      	mov	r3, r5
 8014b22:	2200      	movs	r2, #0
 8014b24:	4543      	cmp	r3, r8
 8014b26:	d321      	bcc.n	8014b6c <__multiply+0x98>
 8014b28:	f107 0114 	add.w	r1, r7, #20
 8014b2c:	f104 0214 	add.w	r2, r4, #20
 8014b30:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8014b34:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8014b38:	9302      	str	r3, [sp, #8]
 8014b3a:	1b13      	subs	r3, r2, r4
 8014b3c:	3b15      	subs	r3, #21
 8014b3e:	f023 0303 	bic.w	r3, r3, #3
 8014b42:	3304      	adds	r3, #4
 8014b44:	f104 0715 	add.w	r7, r4, #21
 8014b48:	42ba      	cmp	r2, r7
 8014b4a:	bf38      	it	cc
 8014b4c:	2304      	movcc	r3, #4
 8014b4e:	9301      	str	r3, [sp, #4]
 8014b50:	9b02      	ldr	r3, [sp, #8]
 8014b52:	9103      	str	r1, [sp, #12]
 8014b54:	428b      	cmp	r3, r1
 8014b56:	d80c      	bhi.n	8014b72 <__multiply+0x9e>
 8014b58:	2e00      	cmp	r6, #0
 8014b5a:	dd03      	ble.n	8014b64 <__multiply+0x90>
 8014b5c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8014b60:	2b00      	cmp	r3, #0
 8014b62:	d05b      	beq.n	8014c1c <__multiply+0x148>
 8014b64:	6106      	str	r6, [r0, #16]
 8014b66:	b005      	add	sp, #20
 8014b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b6c:	f843 2b04 	str.w	r2, [r3], #4
 8014b70:	e7d8      	b.n	8014b24 <__multiply+0x50>
 8014b72:	f8b1 a000 	ldrh.w	sl, [r1]
 8014b76:	f1ba 0f00 	cmp.w	sl, #0
 8014b7a:	d024      	beq.n	8014bc6 <__multiply+0xf2>
 8014b7c:	f104 0e14 	add.w	lr, r4, #20
 8014b80:	46a9      	mov	r9, r5
 8014b82:	f04f 0c00 	mov.w	ip, #0
 8014b86:	f85e 7b04 	ldr.w	r7, [lr], #4
 8014b8a:	f8d9 3000 	ldr.w	r3, [r9]
 8014b8e:	fa1f fb87 	uxth.w	fp, r7
 8014b92:	b29b      	uxth	r3, r3
 8014b94:	fb0a 330b 	mla	r3, sl, fp, r3
 8014b98:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8014b9c:	f8d9 7000 	ldr.w	r7, [r9]
 8014ba0:	4463      	add	r3, ip
 8014ba2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8014ba6:	fb0a c70b 	mla	r7, sl, fp, ip
 8014baa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8014bae:	b29b      	uxth	r3, r3
 8014bb0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8014bb4:	4572      	cmp	r2, lr
 8014bb6:	f849 3b04 	str.w	r3, [r9], #4
 8014bba:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8014bbe:	d8e2      	bhi.n	8014b86 <__multiply+0xb2>
 8014bc0:	9b01      	ldr	r3, [sp, #4]
 8014bc2:	f845 c003 	str.w	ip, [r5, r3]
 8014bc6:	9b03      	ldr	r3, [sp, #12]
 8014bc8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8014bcc:	3104      	adds	r1, #4
 8014bce:	f1b9 0f00 	cmp.w	r9, #0
 8014bd2:	d021      	beq.n	8014c18 <__multiply+0x144>
 8014bd4:	682b      	ldr	r3, [r5, #0]
 8014bd6:	f104 0c14 	add.w	ip, r4, #20
 8014bda:	46ae      	mov	lr, r5
 8014bdc:	f04f 0a00 	mov.w	sl, #0
 8014be0:	f8bc b000 	ldrh.w	fp, [ip]
 8014be4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8014be8:	fb09 770b 	mla	r7, r9, fp, r7
 8014bec:	4457      	add	r7, sl
 8014bee:	b29b      	uxth	r3, r3
 8014bf0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8014bf4:	f84e 3b04 	str.w	r3, [lr], #4
 8014bf8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8014bfc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014c00:	f8be 3000 	ldrh.w	r3, [lr]
 8014c04:	fb09 330a 	mla	r3, r9, sl, r3
 8014c08:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8014c0c:	4562      	cmp	r2, ip
 8014c0e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014c12:	d8e5      	bhi.n	8014be0 <__multiply+0x10c>
 8014c14:	9f01      	ldr	r7, [sp, #4]
 8014c16:	51eb      	str	r3, [r5, r7]
 8014c18:	3504      	adds	r5, #4
 8014c1a:	e799      	b.n	8014b50 <__multiply+0x7c>
 8014c1c:	3e01      	subs	r6, #1
 8014c1e:	e79b      	b.n	8014b58 <__multiply+0x84>
 8014c20:	0805d859 	.word	0x0805d859
 8014c24:	0805d86a 	.word	0x0805d86a

08014c28 <__pow5mult>:
 8014c28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014c2c:	4615      	mov	r5, r2
 8014c2e:	f012 0203 	ands.w	r2, r2, #3
 8014c32:	4607      	mov	r7, r0
 8014c34:	460e      	mov	r6, r1
 8014c36:	d007      	beq.n	8014c48 <__pow5mult+0x20>
 8014c38:	4c25      	ldr	r4, [pc, #148]	@ (8014cd0 <__pow5mult+0xa8>)
 8014c3a:	3a01      	subs	r2, #1
 8014c3c:	2300      	movs	r3, #0
 8014c3e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014c42:	f7ff fe55 	bl	80148f0 <__multadd>
 8014c46:	4606      	mov	r6, r0
 8014c48:	10ad      	asrs	r5, r5, #2
 8014c4a:	d03d      	beq.n	8014cc8 <__pow5mult+0xa0>
 8014c4c:	69fc      	ldr	r4, [r7, #28]
 8014c4e:	b97c      	cbnz	r4, 8014c70 <__pow5mult+0x48>
 8014c50:	2010      	movs	r0, #16
 8014c52:	f7fd fd8d 	bl	8012770 <malloc>
 8014c56:	4602      	mov	r2, r0
 8014c58:	61f8      	str	r0, [r7, #28]
 8014c5a:	b928      	cbnz	r0, 8014c68 <__pow5mult+0x40>
 8014c5c:	4b1d      	ldr	r3, [pc, #116]	@ (8014cd4 <__pow5mult+0xac>)
 8014c5e:	481e      	ldr	r0, [pc, #120]	@ (8014cd8 <__pow5mult+0xb0>)
 8014c60:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8014c64:	f7fe ff2e 	bl	8013ac4 <__assert_func>
 8014c68:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014c6c:	6004      	str	r4, [r0, #0]
 8014c6e:	60c4      	str	r4, [r0, #12]
 8014c70:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8014c74:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014c78:	b94c      	cbnz	r4, 8014c8e <__pow5mult+0x66>
 8014c7a:	f240 2171 	movw	r1, #625	@ 0x271
 8014c7e:	4638      	mov	r0, r7
 8014c80:	f7ff ff12 	bl	8014aa8 <__i2b>
 8014c84:	2300      	movs	r3, #0
 8014c86:	f8c8 0008 	str.w	r0, [r8, #8]
 8014c8a:	4604      	mov	r4, r0
 8014c8c:	6003      	str	r3, [r0, #0]
 8014c8e:	f04f 0900 	mov.w	r9, #0
 8014c92:	07eb      	lsls	r3, r5, #31
 8014c94:	d50a      	bpl.n	8014cac <__pow5mult+0x84>
 8014c96:	4631      	mov	r1, r6
 8014c98:	4622      	mov	r2, r4
 8014c9a:	4638      	mov	r0, r7
 8014c9c:	f7ff ff1a 	bl	8014ad4 <__multiply>
 8014ca0:	4631      	mov	r1, r6
 8014ca2:	4680      	mov	r8, r0
 8014ca4:	4638      	mov	r0, r7
 8014ca6:	f7ff fe01 	bl	80148ac <_Bfree>
 8014caa:	4646      	mov	r6, r8
 8014cac:	106d      	asrs	r5, r5, #1
 8014cae:	d00b      	beq.n	8014cc8 <__pow5mult+0xa0>
 8014cb0:	6820      	ldr	r0, [r4, #0]
 8014cb2:	b938      	cbnz	r0, 8014cc4 <__pow5mult+0x9c>
 8014cb4:	4622      	mov	r2, r4
 8014cb6:	4621      	mov	r1, r4
 8014cb8:	4638      	mov	r0, r7
 8014cba:	f7ff ff0b 	bl	8014ad4 <__multiply>
 8014cbe:	6020      	str	r0, [r4, #0]
 8014cc0:	f8c0 9000 	str.w	r9, [r0]
 8014cc4:	4604      	mov	r4, r0
 8014cc6:	e7e4      	b.n	8014c92 <__pow5mult+0x6a>
 8014cc8:	4630      	mov	r0, r6
 8014cca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014cce:	bf00      	nop
 8014cd0:	0805d8c4 	.word	0x0805d8c4
 8014cd4:	0805d747 	.word	0x0805d747
 8014cd8:	0805d86a 	.word	0x0805d86a

08014cdc <__lshift>:
 8014cdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014ce0:	460c      	mov	r4, r1
 8014ce2:	6849      	ldr	r1, [r1, #4]
 8014ce4:	6923      	ldr	r3, [r4, #16]
 8014ce6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8014cea:	68a3      	ldr	r3, [r4, #8]
 8014cec:	4607      	mov	r7, r0
 8014cee:	4691      	mov	r9, r2
 8014cf0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014cf4:	f108 0601 	add.w	r6, r8, #1
 8014cf8:	42b3      	cmp	r3, r6
 8014cfa:	db0b      	blt.n	8014d14 <__lshift+0x38>
 8014cfc:	4638      	mov	r0, r7
 8014cfe:	f7ff fd95 	bl	801482c <_Balloc>
 8014d02:	4605      	mov	r5, r0
 8014d04:	b948      	cbnz	r0, 8014d1a <__lshift+0x3e>
 8014d06:	4602      	mov	r2, r0
 8014d08:	4b28      	ldr	r3, [pc, #160]	@ (8014dac <__lshift+0xd0>)
 8014d0a:	4829      	ldr	r0, [pc, #164]	@ (8014db0 <__lshift+0xd4>)
 8014d0c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8014d10:	f7fe fed8 	bl	8013ac4 <__assert_func>
 8014d14:	3101      	adds	r1, #1
 8014d16:	005b      	lsls	r3, r3, #1
 8014d18:	e7ee      	b.n	8014cf8 <__lshift+0x1c>
 8014d1a:	2300      	movs	r3, #0
 8014d1c:	f100 0114 	add.w	r1, r0, #20
 8014d20:	f100 0210 	add.w	r2, r0, #16
 8014d24:	4618      	mov	r0, r3
 8014d26:	4553      	cmp	r3, sl
 8014d28:	db33      	blt.n	8014d92 <__lshift+0xb6>
 8014d2a:	6920      	ldr	r0, [r4, #16]
 8014d2c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014d30:	f104 0314 	add.w	r3, r4, #20
 8014d34:	f019 091f 	ands.w	r9, r9, #31
 8014d38:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014d3c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014d40:	d02b      	beq.n	8014d9a <__lshift+0xbe>
 8014d42:	f1c9 0e20 	rsb	lr, r9, #32
 8014d46:	468a      	mov	sl, r1
 8014d48:	2200      	movs	r2, #0
 8014d4a:	6818      	ldr	r0, [r3, #0]
 8014d4c:	fa00 f009 	lsl.w	r0, r0, r9
 8014d50:	4310      	orrs	r0, r2
 8014d52:	f84a 0b04 	str.w	r0, [sl], #4
 8014d56:	f853 2b04 	ldr.w	r2, [r3], #4
 8014d5a:	459c      	cmp	ip, r3
 8014d5c:	fa22 f20e 	lsr.w	r2, r2, lr
 8014d60:	d8f3      	bhi.n	8014d4a <__lshift+0x6e>
 8014d62:	ebac 0304 	sub.w	r3, ip, r4
 8014d66:	3b15      	subs	r3, #21
 8014d68:	f023 0303 	bic.w	r3, r3, #3
 8014d6c:	3304      	adds	r3, #4
 8014d6e:	f104 0015 	add.w	r0, r4, #21
 8014d72:	4584      	cmp	ip, r0
 8014d74:	bf38      	it	cc
 8014d76:	2304      	movcc	r3, #4
 8014d78:	50ca      	str	r2, [r1, r3]
 8014d7a:	b10a      	cbz	r2, 8014d80 <__lshift+0xa4>
 8014d7c:	f108 0602 	add.w	r6, r8, #2
 8014d80:	3e01      	subs	r6, #1
 8014d82:	4638      	mov	r0, r7
 8014d84:	612e      	str	r6, [r5, #16]
 8014d86:	4621      	mov	r1, r4
 8014d88:	f7ff fd90 	bl	80148ac <_Bfree>
 8014d8c:	4628      	mov	r0, r5
 8014d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014d92:	f842 0f04 	str.w	r0, [r2, #4]!
 8014d96:	3301      	adds	r3, #1
 8014d98:	e7c5      	b.n	8014d26 <__lshift+0x4a>
 8014d9a:	3904      	subs	r1, #4
 8014d9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8014da0:	f841 2f04 	str.w	r2, [r1, #4]!
 8014da4:	459c      	cmp	ip, r3
 8014da6:	d8f9      	bhi.n	8014d9c <__lshift+0xc0>
 8014da8:	e7ea      	b.n	8014d80 <__lshift+0xa4>
 8014daa:	bf00      	nop
 8014dac:	0805d859 	.word	0x0805d859
 8014db0:	0805d86a 	.word	0x0805d86a

08014db4 <__mcmp>:
 8014db4:	690a      	ldr	r2, [r1, #16]
 8014db6:	4603      	mov	r3, r0
 8014db8:	6900      	ldr	r0, [r0, #16]
 8014dba:	1a80      	subs	r0, r0, r2
 8014dbc:	b530      	push	{r4, r5, lr}
 8014dbe:	d10e      	bne.n	8014dde <__mcmp+0x2a>
 8014dc0:	3314      	adds	r3, #20
 8014dc2:	3114      	adds	r1, #20
 8014dc4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8014dc8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8014dcc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8014dd0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8014dd4:	4295      	cmp	r5, r2
 8014dd6:	d003      	beq.n	8014de0 <__mcmp+0x2c>
 8014dd8:	d205      	bcs.n	8014de6 <__mcmp+0x32>
 8014dda:	f04f 30ff 	mov.w	r0, #4294967295
 8014dde:	bd30      	pop	{r4, r5, pc}
 8014de0:	42a3      	cmp	r3, r4
 8014de2:	d3f3      	bcc.n	8014dcc <__mcmp+0x18>
 8014de4:	e7fb      	b.n	8014dde <__mcmp+0x2a>
 8014de6:	2001      	movs	r0, #1
 8014de8:	e7f9      	b.n	8014dde <__mcmp+0x2a>
	...

08014dec <__mdiff>:
 8014dec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014df0:	4689      	mov	r9, r1
 8014df2:	4606      	mov	r6, r0
 8014df4:	4611      	mov	r1, r2
 8014df6:	4648      	mov	r0, r9
 8014df8:	4614      	mov	r4, r2
 8014dfa:	f7ff ffdb 	bl	8014db4 <__mcmp>
 8014dfe:	1e05      	subs	r5, r0, #0
 8014e00:	d112      	bne.n	8014e28 <__mdiff+0x3c>
 8014e02:	4629      	mov	r1, r5
 8014e04:	4630      	mov	r0, r6
 8014e06:	f7ff fd11 	bl	801482c <_Balloc>
 8014e0a:	4602      	mov	r2, r0
 8014e0c:	b928      	cbnz	r0, 8014e1a <__mdiff+0x2e>
 8014e0e:	4b3f      	ldr	r3, [pc, #252]	@ (8014f0c <__mdiff+0x120>)
 8014e10:	f240 2137 	movw	r1, #567	@ 0x237
 8014e14:	483e      	ldr	r0, [pc, #248]	@ (8014f10 <__mdiff+0x124>)
 8014e16:	f7fe fe55 	bl	8013ac4 <__assert_func>
 8014e1a:	2301      	movs	r3, #1
 8014e1c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014e20:	4610      	mov	r0, r2
 8014e22:	b003      	add	sp, #12
 8014e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e28:	bfbc      	itt	lt
 8014e2a:	464b      	movlt	r3, r9
 8014e2c:	46a1      	movlt	r9, r4
 8014e2e:	4630      	mov	r0, r6
 8014e30:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8014e34:	bfba      	itte	lt
 8014e36:	461c      	movlt	r4, r3
 8014e38:	2501      	movlt	r5, #1
 8014e3a:	2500      	movge	r5, #0
 8014e3c:	f7ff fcf6 	bl	801482c <_Balloc>
 8014e40:	4602      	mov	r2, r0
 8014e42:	b918      	cbnz	r0, 8014e4c <__mdiff+0x60>
 8014e44:	4b31      	ldr	r3, [pc, #196]	@ (8014f0c <__mdiff+0x120>)
 8014e46:	f240 2145 	movw	r1, #581	@ 0x245
 8014e4a:	e7e3      	b.n	8014e14 <__mdiff+0x28>
 8014e4c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8014e50:	6926      	ldr	r6, [r4, #16]
 8014e52:	60c5      	str	r5, [r0, #12]
 8014e54:	f109 0310 	add.w	r3, r9, #16
 8014e58:	f109 0514 	add.w	r5, r9, #20
 8014e5c:	f104 0e14 	add.w	lr, r4, #20
 8014e60:	f100 0b14 	add.w	fp, r0, #20
 8014e64:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8014e68:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8014e6c:	9301      	str	r3, [sp, #4]
 8014e6e:	46d9      	mov	r9, fp
 8014e70:	f04f 0c00 	mov.w	ip, #0
 8014e74:	9b01      	ldr	r3, [sp, #4]
 8014e76:	f85e 0b04 	ldr.w	r0, [lr], #4
 8014e7a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8014e7e:	9301      	str	r3, [sp, #4]
 8014e80:	fa1f f38a 	uxth.w	r3, sl
 8014e84:	4619      	mov	r1, r3
 8014e86:	b283      	uxth	r3, r0
 8014e88:	1acb      	subs	r3, r1, r3
 8014e8a:	0c00      	lsrs	r0, r0, #16
 8014e8c:	4463      	add	r3, ip
 8014e8e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8014e92:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8014e96:	b29b      	uxth	r3, r3
 8014e98:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8014e9c:	4576      	cmp	r6, lr
 8014e9e:	f849 3b04 	str.w	r3, [r9], #4
 8014ea2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8014ea6:	d8e5      	bhi.n	8014e74 <__mdiff+0x88>
 8014ea8:	1b33      	subs	r3, r6, r4
 8014eaa:	3b15      	subs	r3, #21
 8014eac:	f023 0303 	bic.w	r3, r3, #3
 8014eb0:	3415      	adds	r4, #21
 8014eb2:	3304      	adds	r3, #4
 8014eb4:	42a6      	cmp	r6, r4
 8014eb6:	bf38      	it	cc
 8014eb8:	2304      	movcc	r3, #4
 8014eba:	441d      	add	r5, r3
 8014ebc:	445b      	add	r3, fp
 8014ebe:	461e      	mov	r6, r3
 8014ec0:	462c      	mov	r4, r5
 8014ec2:	4544      	cmp	r4, r8
 8014ec4:	d30e      	bcc.n	8014ee4 <__mdiff+0xf8>
 8014ec6:	f108 0103 	add.w	r1, r8, #3
 8014eca:	1b49      	subs	r1, r1, r5
 8014ecc:	f021 0103 	bic.w	r1, r1, #3
 8014ed0:	3d03      	subs	r5, #3
 8014ed2:	45a8      	cmp	r8, r5
 8014ed4:	bf38      	it	cc
 8014ed6:	2100      	movcc	r1, #0
 8014ed8:	440b      	add	r3, r1
 8014eda:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014ede:	b191      	cbz	r1, 8014f06 <__mdiff+0x11a>
 8014ee0:	6117      	str	r7, [r2, #16]
 8014ee2:	e79d      	b.n	8014e20 <__mdiff+0x34>
 8014ee4:	f854 1b04 	ldr.w	r1, [r4], #4
 8014ee8:	46e6      	mov	lr, ip
 8014eea:	0c08      	lsrs	r0, r1, #16
 8014eec:	fa1c fc81 	uxtah	ip, ip, r1
 8014ef0:	4471      	add	r1, lr
 8014ef2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8014ef6:	b289      	uxth	r1, r1
 8014ef8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8014efc:	f846 1b04 	str.w	r1, [r6], #4
 8014f00:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8014f04:	e7dd      	b.n	8014ec2 <__mdiff+0xd6>
 8014f06:	3f01      	subs	r7, #1
 8014f08:	e7e7      	b.n	8014eda <__mdiff+0xee>
 8014f0a:	bf00      	nop
 8014f0c:	0805d859 	.word	0x0805d859
 8014f10:	0805d86a 	.word	0x0805d86a

08014f14 <__ulp>:
 8014f14:	b082      	sub	sp, #8
 8014f16:	ed8d 0b00 	vstr	d0, [sp]
 8014f1a:	9a01      	ldr	r2, [sp, #4]
 8014f1c:	4b0f      	ldr	r3, [pc, #60]	@ (8014f5c <__ulp+0x48>)
 8014f1e:	4013      	ands	r3, r2
 8014f20:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8014f24:	2b00      	cmp	r3, #0
 8014f26:	dc08      	bgt.n	8014f3a <__ulp+0x26>
 8014f28:	425b      	negs	r3, r3
 8014f2a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8014f2e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8014f32:	da04      	bge.n	8014f3e <__ulp+0x2a>
 8014f34:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8014f38:	4113      	asrs	r3, r2
 8014f3a:	2200      	movs	r2, #0
 8014f3c:	e008      	b.n	8014f50 <__ulp+0x3c>
 8014f3e:	f1a2 0314 	sub.w	r3, r2, #20
 8014f42:	2b1e      	cmp	r3, #30
 8014f44:	bfda      	itte	le
 8014f46:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8014f4a:	40da      	lsrle	r2, r3
 8014f4c:	2201      	movgt	r2, #1
 8014f4e:	2300      	movs	r3, #0
 8014f50:	4619      	mov	r1, r3
 8014f52:	4610      	mov	r0, r2
 8014f54:	ec41 0b10 	vmov	d0, r0, r1
 8014f58:	b002      	add	sp, #8
 8014f5a:	4770      	bx	lr
 8014f5c:	7ff00000 	.word	0x7ff00000

08014f60 <__b2d>:
 8014f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f64:	6906      	ldr	r6, [r0, #16]
 8014f66:	f100 0814 	add.w	r8, r0, #20
 8014f6a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8014f6e:	1f37      	subs	r7, r6, #4
 8014f70:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8014f74:	4610      	mov	r0, r2
 8014f76:	f7ff fd4b 	bl	8014a10 <__hi0bits>
 8014f7a:	f1c0 0320 	rsb	r3, r0, #32
 8014f7e:	280a      	cmp	r0, #10
 8014f80:	600b      	str	r3, [r1, #0]
 8014f82:	491b      	ldr	r1, [pc, #108]	@ (8014ff0 <__b2d+0x90>)
 8014f84:	dc15      	bgt.n	8014fb2 <__b2d+0x52>
 8014f86:	f1c0 0c0b 	rsb	ip, r0, #11
 8014f8a:	fa22 f30c 	lsr.w	r3, r2, ip
 8014f8e:	45b8      	cmp	r8, r7
 8014f90:	ea43 0501 	orr.w	r5, r3, r1
 8014f94:	bf34      	ite	cc
 8014f96:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8014f9a:	2300      	movcs	r3, #0
 8014f9c:	3015      	adds	r0, #21
 8014f9e:	fa02 f000 	lsl.w	r0, r2, r0
 8014fa2:	fa23 f30c 	lsr.w	r3, r3, ip
 8014fa6:	4303      	orrs	r3, r0
 8014fa8:	461c      	mov	r4, r3
 8014faa:	ec45 4b10 	vmov	d0, r4, r5
 8014fae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014fb2:	45b8      	cmp	r8, r7
 8014fb4:	bf3a      	itte	cc
 8014fb6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8014fba:	f1a6 0708 	subcc.w	r7, r6, #8
 8014fbe:	2300      	movcs	r3, #0
 8014fc0:	380b      	subs	r0, #11
 8014fc2:	d012      	beq.n	8014fea <__b2d+0x8a>
 8014fc4:	f1c0 0120 	rsb	r1, r0, #32
 8014fc8:	fa23 f401 	lsr.w	r4, r3, r1
 8014fcc:	4082      	lsls	r2, r0
 8014fce:	4322      	orrs	r2, r4
 8014fd0:	4547      	cmp	r7, r8
 8014fd2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8014fd6:	bf8c      	ite	hi
 8014fd8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8014fdc:	2200      	movls	r2, #0
 8014fde:	4083      	lsls	r3, r0
 8014fe0:	40ca      	lsrs	r2, r1
 8014fe2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8014fe6:	4313      	orrs	r3, r2
 8014fe8:	e7de      	b.n	8014fa8 <__b2d+0x48>
 8014fea:	ea42 0501 	orr.w	r5, r2, r1
 8014fee:	e7db      	b.n	8014fa8 <__b2d+0x48>
 8014ff0:	3ff00000 	.word	0x3ff00000

08014ff4 <__d2b>:
 8014ff4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014ff8:	460f      	mov	r7, r1
 8014ffa:	2101      	movs	r1, #1
 8014ffc:	ec59 8b10 	vmov	r8, r9, d0
 8015000:	4616      	mov	r6, r2
 8015002:	f7ff fc13 	bl	801482c <_Balloc>
 8015006:	4604      	mov	r4, r0
 8015008:	b930      	cbnz	r0, 8015018 <__d2b+0x24>
 801500a:	4602      	mov	r2, r0
 801500c:	4b23      	ldr	r3, [pc, #140]	@ (801509c <__d2b+0xa8>)
 801500e:	4824      	ldr	r0, [pc, #144]	@ (80150a0 <__d2b+0xac>)
 8015010:	f240 310f 	movw	r1, #783	@ 0x30f
 8015014:	f7fe fd56 	bl	8013ac4 <__assert_func>
 8015018:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801501c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015020:	b10d      	cbz	r5, 8015026 <__d2b+0x32>
 8015022:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8015026:	9301      	str	r3, [sp, #4]
 8015028:	f1b8 0300 	subs.w	r3, r8, #0
 801502c:	d023      	beq.n	8015076 <__d2b+0x82>
 801502e:	4668      	mov	r0, sp
 8015030:	9300      	str	r3, [sp, #0]
 8015032:	f7ff fd0c 	bl	8014a4e <__lo0bits>
 8015036:	e9dd 1200 	ldrd	r1, r2, [sp]
 801503a:	b1d0      	cbz	r0, 8015072 <__d2b+0x7e>
 801503c:	f1c0 0320 	rsb	r3, r0, #32
 8015040:	fa02 f303 	lsl.w	r3, r2, r3
 8015044:	430b      	orrs	r3, r1
 8015046:	40c2      	lsrs	r2, r0
 8015048:	6163      	str	r3, [r4, #20]
 801504a:	9201      	str	r2, [sp, #4]
 801504c:	9b01      	ldr	r3, [sp, #4]
 801504e:	61a3      	str	r3, [r4, #24]
 8015050:	2b00      	cmp	r3, #0
 8015052:	bf0c      	ite	eq
 8015054:	2201      	moveq	r2, #1
 8015056:	2202      	movne	r2, #2
 8015058:	6122      	str	r2, [r4, #16]
 801505a:	b1a5      	cbz	r5, 8015086 <__d2b+0x92>
 801505c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8015060:	4405      	add	r5, r0
 8015062:	603d      	str	r5, [r7, #0]
 8015064:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8015068:	6030      	str	r0, [r6, #0]
 801506a:	4620      	mov	r0, r4
 801506c:	b003      	add	sp, #12
 801506e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015072:	6161      	str	r1, [r4, #20]
 8015074:	e7ea      	b.n	801504c <__d2b+0x58>
 8015076:	a801      	add	r0, sp, #4
 8015078:	f7ff fce9 	bl	8014a4e <__lo0bits>
 801507c:	9b01      	ldr	r3, [sp, #4]
 801507e:	6163      	str	r3, [r4, #20]
 8015080:	3020      	adds	r0, #32
 8015082:	2201      	movs	r2, #1
 8015084:	e7e8      	b.n	8015058 <__d2b+0x64>
 8015086:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801508a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801508e:	6038      	str	r0, [r7, #0]
 8015090:	6918      	ldr	r0, [r3, #16]
 8015092:	f7ff fcbd 	bl	8014a10 <__hi0bits>
 8015096:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801509a:	e7e5      	b.n	8015068 <__d2b+0x74>
 801509c:	0805d859 	.word	0x0805d859
 80150a0:	0805d86a 	.word	0x0805d86a

080150a4 <__ratio>:
 80150a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150a8:	b085      	sub	sp, #20
 80150aa:	e9cd 1000 	strd	r1, r0, [sp]
 80150ae:	a902      	add	r1, sp, #8
 80150b0:	f7ff ff56 	bl	8014f60 <__b2d>
 80150b4:	9800      	ldr	r0, [sp, #0]
 80150b6:	a903      	add	r1, sp, #12
 80150b8:	ec55 4b10 	vmov	r4, r5, d0
 80150bc:	f7ff ff50 	bl	8014f60 <__b2d>
 80150c0:	9b01      	ldr	r3, [sp, #4]
 80150c2:	6919      	ldr	r1, [r3, #16]
 80150c4:	9b00      	ldr	r3, [sp, #0]
 80150c6:	691b      	ldr	r3, [r3, #16]
 80150c8:	1ac9      	subs	r1, r1, r3
 80150ca:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80150ce:	1a9b      	subs	r3, r3, r2
 80150d0:	ec5b ab10 	vmov	sl, fp, d0
 80150d4:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80150d8:	2b00      	cmp	r3, #0
 80150da:	bfce      	itee	gt
 80150dc:	462a      	movgt	r2, r5
 80150de:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80150e2:	465a      	movle	r2, fp
 80150e4:	462f      	mov	r7, r5
 80150e6:	46d9      	mov	r9, fp
 80150e8:	bfcc      	ite	gt
 80150ea:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80150ee:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80150f2:	464b      	mov	r3, r9
 80150f4:	4652      	mov	r2, sl
 80150f6:	4620      	mov	r0, r4
 80150f8:	4639      	mov	r1, r7
 80150fa:	f7eb fbd7 	bl	80008ac <__aeabi_ddiv>
 80150fe:	ec41 0b10 	vmov	d0, r0, r1
 8015102:	b005      	add	sp, #20
 8015104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015108 <__copybits>:
 8015108:	3901      	subs	r1, #1
 801510a:	b570      	push	{r4, r5, r6, lr}
 801510c:	1149      	asrs	r1, r1, #5
 801510e:	6914      	ldr	r4, [r2, #16]
 8015110:	3101      	adds	r1, #1
 8015112:	f102 0314 	add.w	r3, r2, #20
 8015116:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801511a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801511e:	1f05      	subs	r5, r0, #4
 8015120:	42a3      	cmp	r3, r4
 8015122:	d30c      	bcc.n	801513e <__copybits+0x36>
 8015124:	1aa3      	subs	r3, r4, r2
 8015126:	3b11      	subs	r3, #17
 8015128:	f023 0303 	bic.w	r3, r3, #3
 801512c:	3211      	adds	r2, #17
 801512e:	42a2      	cmp	r2, r4
 8015130:	bf88      	it	hi
 8015132:	2300      	movhi	r3, #0
 8015134:	4418      	add	r0, r3
 8015136:	2300      	movs	r3, #0
 8015138:	4288      	cmp	r0, r1
 801513a:	d305      	bcc.n	8015148 <__copybits+0x40>
 801513c:	bd70      	pop	{r4, r5, r6, pc}
 801513e:	f853 6b04 	ldr.w	r6, [r3], #4
 8015142:	f845 6f04 	str.w	r6, [r5, #4]!
 8015146:	e7eb      	b.n	8015120 <__copybits+0x18>
 8015148:	f840 3b04 	str.w	r3, [r0], #4
 801514c:	e7f4      	b.n	8015138 <__copybits+0x30>

0801514e <__any_on>:
 801514e:	f100 0214 	add.w	r2, r0, #20
 8015152:	6900      	ldr	r0, [r0, #16]
 8015154:	114b      	asrs	r3, r1, #5
 8015156:	4298      	cmp	r0, r3
 8015158:	b510      	push	{r4, lr}
 801515a:	db11      	blt.n	8015180 <__any_on+0x32>
 801515c:	dd0a      	ble.n	8015174 <__any_on+0x26>
 801515e:	f011 011f 	ands.w	r1, r1, #31
 8015162:	d007      	beq.n	8015174 <__any_on+0x26>
 8015164:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8015168:	fa24 f001 	lsr.w	r0, r4, r1
 801516c:	fa00 f101 	lsl.w	r1, r0, r1
 8015170:	428c      	cmp	r4, r1
 8015172:	d10b      	bne.n	801518c <__any_on+0x3e>
 8015174:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015178:	4293      	cmp	r3, r2
 801517a:	d803      	bhi.n	8015184 <__any_on+0x36>
 801517c:	2000      	movs	r0, #0
 801517e:	bd10      	pop	{r4, pc}
 8015180:	4603      	mov	r3, r0
 8015182:	e7f7      	b.n	8015174 <__any_on+0x26>
 8015184:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8015188:	2900      	cmp	r1, #0
 801518a:	d0f5      	beq.n	8015178 <__any_on+0x2a>
 801518c:	2001      	movs	r0, #1
 801518e:	e7f6      	b.n	801517e <__any_on+0x30>

08015190 <_malloc_usable_size_r>:
 8015190:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015194:	1f18      	subs	r0, r3, #4
 8015196:	2b00      	cmp	r3, #0
 8015198:	bfbc      	itt	lt
 801519a:	580b      	ldrlt	r3, [r1, r0]
 801519c:	18c0      	addlt	r0, r0, r3
 801519e:	4770      	bx	lr

080151a0 <sulp>:
 80151a0:	b570      	push	{r4, r5, r6, lr}
 80151a2:	4604      	mov	r4, r0
 80151a4:	460d      	mov	r5, r1
 80151a6:	ec45 4b10 	vmov	d0, r4, r5
 80151aa:	4616      	mov	r6, r2
 80151ac:	f7ff feb2 	bl	8014f14 <__ulp>
 80151b0:	ec51 0b10 	vmov	r0, r1, d0
 80151b4:	b17e      	cbz	r6, 80151d6 <sulp+0x36>
 80151b6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80151ba:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80151be:	2b00      	cmp	r3, #0
 80151c0:	dd09      	ble.n	80151d6 <sulp+0x36>
 80151c2:	051b      	lsls	r3, r3, #20
 80151c4:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80151c8:	2400      	movs	r4, #0
 80151ca:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80151ce:	4622      	mov	r2, r4
 80151d0:	462b      	mov	r3, r5
 80151d2:	f7eb fa41 	bl	8000658 <__aeabi_dmul>
 80151d6:	ec41 0b10 	vmov	d0, r0, r1
 80151da:	bd70      	pop	{r4, r5, r6, pc}
 80151dc:	0000      	movs	r0, r0
	...

080151e0 <_strtod_l>:
 80151e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151e4:	b09f      	sub	sp, #124	@ 0x7c
 80151e6:	460c      	mov	r4, r1
 80151e8:	9217      	str	r2, [sp, #92]	@ 0x5c
 80151ea:	2200      	movs	r2, #0
 80151ec:	921a      	str	r2, [sp, #104]	@ 0x68
 80151ee:	9005      	str	r0, [sp, #20]
 80151f0:	f04f 0a00 	mov.w	sl, #0
 80151f4:	f04f 0b00 	mov.w	fp, #0
 80151f8:	460a      	mov	r2, r1
 80151fa:	9219      	str	r2, [sp, #100]	@ 0x64
 80151fc:	7811      	ldrb	r1, [r2, #0]
 80151fe:	292b      	cmp	r1, #43	@ 0x2b
 8015200:	d04a      	beq.n	8015298 <_strtod_l+0xb8>
 8015202:	d838      	bhi.n	8015276 <_strtod_l+0x96>
 8015204:	290d      	cmp	r1, #13
 8015206:	d832      	bhi.n	801526e <_strtod_l+0x8e>
 8015208:	2908      	cmp	r1, #8
 801520a:	d832      	bhi.n	8015272 <_strtod_l+0x92>
 801520c:	2900      	cmp	r1, #0
 801520e:	d03b      	beq.n	8015288 <_strtod_l+0xa8>
 8015210:	2200      	movs	r2, #0
 8015212:	920b      	str	r2, [sp, #44]	@ 0x2c
 8015214:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8015216:	782a      	ldrb	r2, [r5, #0]
 8015218:	2a30      	cmp	r2, #48	@ 0x30
 801521a:	f040 80b3 	bne.w	8015384 <_strtod_l+0x1a4>
 801521e:	786a      	ldrb	r2, [r5, #1]
 8015220:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8015224:	2a58      	cmp	r2, #88	@ 0x58
 8015226:	d16e      	bne.n	8015306 <_strtod_l+0x126>
 8015228:	9302      	str	r3, [sp, #8]
 801522a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801522c:	9301      	str	r3, [sp, #4]
 801522e:	ab1a      	add	r3, sp, #104	@ 0x68
 8015230:	9300      	str	r3, [sp, #0]
 8015232:	4a8e      	ldr	r2, [pc, #568]	@ (801546c <_strtod_l+0x28c>)
 8015234:	9805      	ldr	r0, [sp, #20]
 8015236:	ab1b      	add	r3, sp, #108	@ 0x6c
 8015238:	a919      	add	r1, sp, #100	@ 0x64
 801523a:	f001 fc93 	bl	8016b64 <__gethex>
 801523e:	f010 060f 	ands.w	r6, r0, #15
 8015242:	4604      	mov	r4, r0
 8015244:	d005      	beq.n	8015252 <_strtod_l+0x72>
 8015246:	2e06      	cmp	r6, #6
 8015248:	d128      	bne.n	801529c <_strtod_l+0xbc>
 801524a:	3501      	adds	r5, #1
 801524c:	2300      	movs	r3, #0
 801524e:	9519      	str	r5, [sp, #100]	@ 0x64
 8015250:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015252:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8015254:	2b00      	cmp	r3, #0
 8015256:	f040 858e 	bne.w	8015d76 <_strtod_l+0xb96>
 801525a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801525c:	b1cb      	cbz	r3, 8015292 <_strtod_l+0xb2>
 801525e:	4652      	mov	r2, sl
 8015260:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8015264:	ec43 2b10 	vmov	d0, r2, r3
 8015268:	b01f      	add	sp, #124	@ 0x7c
 801526a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801526e:	2920      	cmp	r1, #32
 8015270:	d1ce      	bne.n	8015210 <_strtod_l+0x30>
 8015272:	3201      	adds	r2, #1
 8015274:	e7c1      	b.n	80151fa <_strtod_l+0x1a>
 8015276:	292d      	cmp	r1, #45	@ 0x2d
 8015278:	d1ca      	bne.n	8015210 <_strtod_l+0x30>
 801527a:	2101      	movs	r1, #1
 801527c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801527e:	1c51      	adds	r1, r2, #1
 8015280:	9119      	str	r1, [sp, #100]	@ 0x64
 8015282:	7852      	ldrb	r2, [r2, #1]
 8015284:	2a00      	cmp	r2, #0
 8015286:	d1c5      	bne.n	8015214 <_strtod_l+0x34>
 8015288:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801528a:	9419      	str	r4, [sp, #100]	@ 0x64
 801528c:	2b00      	cmp	r3, #0
 801528e:	f040 8570 	bne.w	8015d72 <_strtod_l+0xb92>
 8015292:	4652      	mov	r2, sl
 8015294:	465b      	mov	r3, fp
 8015296:	e7e5      	b.n	8015264 <_strtod_l+0x84>
 8015298:	2100      	movs	r1, #0
 801529a:	e7ef      	b.n	801527c <_strtod_l+0x9c>
 801529c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801529e:	b13a      	cbz	r2, 80152b0 <_strtod_l+0xd0>
 80152a0:	2135      	movs	r1, #53	@ 0x35
 80152a2:	a81c      	add	r0, sp, #112	@ 0x70
 80152a4:	f7ff ff30 	bl	8015108 <__copybits>
 80152a8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80152aa:	9805      	ldr	r0, [sp, #20]
 80152ac:	f7ff fafe 	bl	80148ac <_Bfree>
 80152b0:	3e01      	subs	r6, #1
 80152b2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80152b4:	2e04      	cmp	r6, #4
 80152b6:	d806      	bhi.n	80152c6 <_strtod_l+0xe6>
 80152b8:	e8df f006 	tbb	[pc, r6]
 80152bc:	201d0314 	.word	0x201d0314
 80152c0:	14          	.byte	0x14
 80152c1:	00          	.byte	0x00
 80152c2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80152c6:	05e1      	lsls	r1, r4, #23
 80152c8:	bf48      	it	mi
 80152ca:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80152ce:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80152d2:	0d1b      	lsrs	r3, r3, #20
 80152d4:	051b      	lsls	r3, r3, #20
 80152d6:	2b00      	cmp	r3, #0
 80152d8:	d1bb      	bne.n	8015252 <_strtod_l+0x72>
 80152da:	f7fe fba9 	bl	8013a30 <__errno>
 80152de:	2322      	movs	r3, #34	@ 0x22
 80152e0:	6003      	str	r3, [r0, #0]
 80152e2:	e7b6      	b.n	8015252 <_strtod_l+0x72>
 80152e4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80152e8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80152ec:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80152f0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80152f4:	e7e7      	b.n	80152c6 <_strtod_l+0xe6>
 80152f6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8015474 <_strtod_l+0x294>
 80152fa:	e7e4      	b.n	80152c6 <_strtod_l+0xe6>
 80152fc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8015300:	f04f 3aff 	mov.w	sl, #4294967295
 8015304:	e7df      	b.n	80152c6 <_strtod_l+0xe6>
 8015306:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8015308:	1c5a      	adds	r2, r3, #1
 801530a:	9219      	str	r2, [sp, #100]	@ 0x64
 801530c:	785b      	ldrb	r3, [r3, #1]
 801530e:	2b30      	cmp	r3, #48	@ 0x30
 8015310:	d0f9      	beq.n	8015306 <_strtod_l+0x126>
 8015312:	2b00      	cmp	r3, #0
 8015314:	d09d      	beq.n	8015252 <_strtod_l+0x72>
 8015316:	2301      	movs	r3, #1
 8015318:	9309      	str	r3, [sp, #36]	@ 0x24
 801531a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801531c:	930c      	str	r3, [sp, #48]	@ 0x30
 801531e:	2300      	movs	r3, #0
 8015320:	9308      	str	r3, [sp, #32]
 8015322:	930a      	str	r3, [sp, #40]	@ 0x28
 8015324:	461f      	mov	r7, r3
 8015326:	220a      	movs	r2, #10
 8015328:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801532a:	7805      	ldrb	r5, [r0, #0]
 801532c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8015330:	b2d9      	uxtb	r1, r3
 8015332:	2909      	cmp	r1, #9
 8015334:	d928      	bls.n	8015388 <_strtod_l+0x1a8>
 8015336:	494e      	ldr	r1, [pc, #312]	@ (8015470 <_strtod_l+0x290>)
 8015338:	2201      	movs	r2, #1
 801533a:	f001 fb74 	bl	8016a26 <strncmp>
 801533e:	2800      	cmp	r0, #0
 8015340:	d032      	beq.n	80153a8 <_strtod_l+0x1c8>
 8015342:	2000      	movs	r0, #0
 8015344:	462a      	mov	r2, r5
 8015346:	4681      	mov	r9, r0
 8015348:	463d      	mov	r5, r7
 801534a:	4603      	mov	r3, r0
 801534c:	2a65      	cmp	r2, #101	@ 0x65
 801534e:	d001      	beq.n	8015354 <_strtod_l+0x174>
 8015350:	2a45      	cmp	r2, #69	@ 0x45
 8015352:	d114      	bne.n	801537e <_strtod_l+0x19e>
 8015354:	b91d      	cbnz	r5, 801535e <_strtod_l+0x17e>
 8015356:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015358:	4302      	orrs	r2, r0
 801535a:	d095      	beq.n	8015288 <_strtod_l+0xa8>
 801535c:	2500      	movs	r5, #0
 801535e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8015360:	1c62      	adds	r2, r4, #1
 8015362:	9219      	str	r2, [sp, #100]	@ 0x64
 8015364:	7862      	ldrb	r2, [r4, #1]
 8015366:	2a2b      	cmp	r2, #43	@ 0x2b
 8015368:	d077      	beq.n	801545a <_strtod_l+0x27a>
 801536a:	2a2d      	cmp	r2, #45	@ 0x2d
 801536c:	d07b      	beq.n	8015466 <_strtod_l+0x286>
 801536e:	f04f 0c00 	mov.w	ip, #0
 8015372:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8015376:	2909      	cmp	r1, #9
 8015378:	f240 8082 	bls.w	8015480 <_strtod_l+0x2a0>
 801537c:	9419      	str	r4, [sp, #100]	@ 0x64
 801537e:	f04f 0800 	mov.w	r8, #0
 8015382:	e0a2      	b.n	80154ca <_strtod_l+0x2ea>
 8015384:	2300      	movs	r3, #0
 8015386:	e7c7      	b.n	8015318 <_strtod_l+0x138>
 8015388:	2f08      	cmp	r7, #8
 801538a:	bfd5      	itete	le
 801538c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 801538e:	9908      	ldrgt	r1, [sp, #32]
 8015390:	fb02 3301 	mlale	r3, r2, r1, r3
 8015394:	fb02 3301 	mlagt	r3, r2, r1, r3
 8015398:	f100 0001 	add.w	r0, r0, #1
 801539c:	bfd4      	ite	le
 801539e:	930a      	strle	r3, [sp, #40]	@ 0x28
 80153a0:	9308      	strgt	r3, [sp, #32]
 80153a2:	3701      	adds	r7, #1
 80153a4:	9019      	str	r0, [sp, #100]	@ 0x64
 80153a6:	e7bf      	b.n	8015328 <_strtod_l+0x148>
 80153a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80153aa:	1c5a      	adds	r2, r3, #1
 80153ac:	9219      	str	r2, [sp, #100]	@ 0x64
 80153ae:	785a      	ldrb	r2, [r3, #1]
 80153b0:	b37f      	cbz	r7, 8015412 <_strtod_l+0x232>
 80153b2:	4681      	mov	r9, r0
 80153b4:	463d      	mov	r5, r7
 80153b6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80153ba:	2b09      	cmp	r3, #9
 80153bc:	d912      	bls.n	80153e4 <_strtod_l+0x204>
 80153be:	2301      	movs	r3, #1
 80153c0:	e7c4      	b.n	801534c <_strtod_l+0x16c>
 80153c2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80153c4:	1c5a      	adds	r2, r3, #1
 80153c6:	9219      	str	r2, [sp, #100]	@ 0x64
 80153c8:	785a      	ldrb	r2, [r3, #1]
 80153ca:	3001      	adds	r0, #1
 80153cc:	2a30      	cmp	r2, #48	@ 0x30
 80153ce:	d0f8      	beq.n	80153c2 <_strtod_l+0x1e2>
 80153d0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80153d4:	2b08      	cmp	r3, #8
 80153d6:	f200 84d3 	bhi.w	8015d80 <_strtod_l+0xba0>
 80153da:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80153dc:	930c      	str	r3, [sp, #48]	@ 0x30
 80153de:	4681      	mov	r9, r0
 80153e0:	2000      	movs	r0, #0
 80153e2:	4605      	mov	r5, r0
 80153e4:	3a30      	subs	r2, #48	@ 0x30
 80153e6:	f100 0301 	add.w	r3, r0, #1
 80153ea:	d02a      	beq.n	8015442 <_strtod_l+0x262>
 80153ec:	4499      	add	r9, r3
 80153ee:	eb00 0c05 	add.w	ip, r0, r5
 80153f2:	462b      	mov	r3, r5
 80153f4:	210a      	movs	r1, #10
 80153f6:	4563      	cmp	r3, ip
 80153f8:	d10d      	bne.n	8015416 <_strtod_l+0x236>
 80153fa:	1c69      	adds	r1, r5, #1
 80153fc:	4401      	add	r1, r0
 80153fe:	4428      	add	r0, r5
 8015400:	2808      	cmp	r0, #8
 8015402:	dc16      	bgt.n	8015432 <_strtod_l+0x252>
 8015404:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8015406:	230a      	movs	r3, #10
 8015408:	fb03 2300 	mla	r3, r3, r0, r2
 801540c:	930a      	str	r3, [sp, #40]	@ 0x28
 801540e:	2300      	movs	r3, #0
 8015410:	e018      	b.n	8015444 <_strtod_l+0x264>
 8015412:	4638      	mov	r0, r7
 8015414:	e7da      	b.n	80153cc <_strtod_l+0x1ec>
 8015416:	2b08      	cmp	r3, #8
 8015418:	f103 0301 	add.w	r3, r3, #1
 801541c:	dc03      	bgt.n	8015426 <_strtod_l+0x246>
 801541e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8015420:	434e      	muls	r6, r1
 8015422:	960a      	str	r6, [sp, #40]	@ 0x28
 8015424:	e7e7      	b.n	80153f6 <_strtod_l+0x216>
 8015426:	2b10      	cmp	r3, #16
 8015428:	bfde      	ittt	le
 801542a:	9e08      	ldrle	r6, [sp, #32]
 801542c:	434e      	mulle	r6, r1
 801542e:	9608      	strle	r6, [sp, #32]
 8015430:	e7e1      	b.n	80153f6 <_strtod_l+0x216>
 8015432:	280f      	cmp	r0, #15
 8015434:	dceb      	bgt.n	801540e <_strtod_l+0x22e>
 8015436:	9808      	ldr	r0, [sp, #32]
 8015438:	230a      	movs	r3, #10
 801543a:	fb03 2300 	mla	r3, r3, r0, r2
 801543e:	9308      	str	r3, [sp, #32]
 8015440:	e7e5      	b.n	801540e <_strtod_l+0x22e>
 8015442:	4629      	mov	r1, r5
 8015444:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8015446:	1c50      	adds	r0, r2, #1
 8015448:	9019      	str	r0, [sp, #100]	@ 0x64
 801544a:	7852      	ldrb	r2, [r2, #1]
 801544c:	4618      	mov	r0, r3
 801544e:	460d      	mov	r5, r1
 8015450:	e7b1      	b.n	80153b6 <_strtod_l+0x1d6>
 8015452:	f04f 0900 	mov.w	r9, #0
 8015456:	2301      	movs	r3, #1
 8015458:	e77d      	b.n	8015356 <_strtod_l+0x176>
 801545a:	f04f 0c00 	mov.w	ip, #0
 801545e:	1ca2      	adds	r2, r4, #2
 8015460:	9219      	str	r2, [sp, #100]	@ 0x64
 8015462:	78a2      	ldrb	r2, [r4, #2]
 8015464:	e785      	b.n	8015372 <_strtod_l+0x192>
 8015466:	f04f 0c01 	mov.w	ip, #1
 801546a:	e7f8      	b.n	801545e <_strtod_l+0x27e>
 801546c:	0805d9d8 	.word	0x0805d9d8
 8015470:	0805d9c0 	.word	0x0805d9c0
 8015474:	7ff00000 	.word	0x7ff00000
 8015478:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801547a:	1c51      	adds	r1, r2, #1
 801547c:	9119      	str	r1, [sp, #100]	@ 0x64
 801547e:	7852      	ldrb	r2, [r2, #1]
 8015480:	2a30      	cmp	r2, #48	@ 0x30
 8015482:	d0f9      	beq.n	8015478 <_strtod_l+0x298>
 8015484:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8015488:	2908      	cmp	r1, #8
 801548a:	f63f af78 	bhi.w	801537e <_strtod_l+0x19e>
 801548e:	3a30      	subs	r2, #48	@ 0x30
 8015490:	920e      	str	r2, [sp, #56]	@ 0x38
 8015492:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8015494:	920f      	str	r2, [sp, #60]	@ 0x3c
 8015496:	f04f 080a 	mov.w	r8, #10
 801549a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801549c:	1c56      	adds	r6, r2, #1
 801549e:	9619      	str	r6, [sp, #100]	@ 0x64
 80154a0:	7852      	ldrb	r2, [r2, #1]
 80154a2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80154a6:	f1be 0f09 	cmp.w	lr, #9
 80154aa:	d939      	bls.n	8015520 <_strtod_l+0x340>
 80154ac:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80154ae:	1a76      	subs	r6, r6, r1
 80154b0:	2e08      	cmp	r6, #8
 80154b2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80154b6:	dc03      	bgt.n	80154c0 <_strtod_l+0x2e0>
 80154b8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80154ba:	4588      	cmp	r8, r1
 80154bc:	bfa8      	it	ge
 80154be:	4688      	movge	r8, r1
 80154c0:	f1bc 0f00 	cmp.w	ip, #0
 80154c4:	d001      	beq.n	80154ca <_strtod_l+0x2ea>
 80154c6:	f1c8 0800 	rsb	r8, r8, #0
 80154ca:	2d00      	cmp	r5, #0
 80154cc:	d14e      	bne.n	801556c <_strtod_l+0x38c>
 80154ce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80154d0:	4308      	orrs	r0, r1
 80154d2:	f47f aebe 	bne.w	8015252 <_strtod_l+0x72>
 80154d6:	2b00      	cmp	r3, #0
 80154d8:	f47f aed6 	bne.w	8015288 <_strtod_l+0xa8>
 80154dc:	2a69      	cmp	r2, #105	@ 0x69
 80154de:	d028      	beq.n	8015532 <_strtod_l+0x352>
 80154e0:	dc25      	bgt.n	801552e <_strtod_l+0x34e>
 80154e2:	2a49      	cmp	r2, #73	@ 0x49
 80154e4:	d025      	beq.n	8015532 <_strtod_l+0x352>
 80154e6:	2a4e      	cmp	r2, #78	@ 0x4e
 80154e8:	f47f aece 	bne.w	8015288 <_strtod_l+0xa8>
 80154ec:	499b      	ldr	r1, [pc, #620]	@ (801575c <_strtod_l+0x57c>)
 80154ee:	a819      	add	r0, sp, #100	@ 0x64
 80154f0:	f001 fd5a 	bl	8016fa8 <__match>
 80154f4:	2800      	cmp	r0, #0
 80154f6:	f43f aec7 	beq.w	8015288 <_strtod_l+0xa8>
 80154fa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80154fc:	781b      	ldrb	r3, [r3, #0]
 80154fe:	2b28      	cmp	r3, #40	@ 0x28
 8015500:	d12e      	bne.n	8015560 <_strtod_l+0x380>
 8015502:	4997      	ldr	r1, [pc, #604]	@ (8015760 <_strtod_l+0x580>)
 8015504:	aa1c      	add	r2, sp, #112	@ 0x70
 8015506:	a819      	add	r0, sp, #100	@ 0x64
 8015508:	f001 fd62 	bl	8016fd0 <__hexnan>
 801550c:	2805      	cmp	r0, #5
 801550e:	d127      	bne.n	8015560 <_strtod_l+0x380>
 8015510:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8015512:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8015516:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 801551a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 801551e:	e698      	b.n	8015252 <_strtod_l+0x72>
 8015520:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8015522:	fb08 2101 	mla	r1, r8, r1, r2
 8015526:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 801552a:	920e      	str	r2, [sp, #56]	@ 0x38
 801552c:	e7b5      	b.n	801549a <_strtod_l+0x2ba>
 801552e:	2a6e      	cmp	r2, #110	@ 0x6e
 8015530:	e7da      	b.n	80154e8 <_strtod_l+0x308>
 8015532:	498c      	ldr	r1, [pc, #560]	@ (8015764 <_strtod_l+0x584>)
 8015534:	a819      	add	r0, sp, #100	@ 0x64
 8015536:	f001 fd37 	bl	8016fa8 <__match>
 801553a:	2800      	cmp	r0, #0
 801553c:	f43f aea4 	beq.w	8015288 <_strtod_l+0xa8>
 8015540:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8015542:	4989      	ldr	r1, [pc, #548]	@ (8015768 <_strtod_l+0x588>)
 8015544:	3b01      	subs	r3, #1
 8015546:	a819      	add	r0, sp, #100	@ 0x64
 8015548:	9319      	str	r3, [sp, #100]	@ 0x64
 801554a:	f001 fd2d 	bl	8016fa8 <__match>
 801554e:	b910      	cbnz	r0, 8015556 <_strtod_l+0x376>
 8015550:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8015552:	3301      	adds	r3, #1
 8015554:	9319      	str	r3, [sp, #100]	@ 0x64
 8015556:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8015778 <_strtod_l+0x598>
 801555a:	f04f 0a00 	mov.w	sl, #0
 801555e:	e678      	b.n	8015252 <_strtod_l+0x72>
 8015560:	4882      	ldr	r0, [pc, #520]	@ (801576c <_strtod_l+0x58c>)
 8015562:	f001 fa75 	bl	8016a50 <nan>
 8015566:	ec5b ab10 	vmov	sl, fp, d0
 801556a:	e672      	b.n	8015252 <_strtod_l+0x72>
 801556c:	eba8 0309 	sub.w	r3, r8, r9
 8015570:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8015572:	9309      	str	r3, [sp, #36]	@ 0x24
 8015574:	2f00      	cmp	r7, #0
 8015576:	bf08      	it	eq
 8015578:	462f      	moveq	r7, r5
 801557a:	2d10      	cmp	r5, #16
 801557c:	462c      	mov	r4, r5
 801557e:	bfa8      	it	ge
 8015580:	2410      	movge	r4, #16
 8015582:	f7ea ffef 	bl	8000564 <__aeabi_ui2d>
 8015586:	2d09      	cmp	r5, #9
 8015588:	4682      	mov	sl, r0
 801558a:	468b      	mov	fp, r1
 801558c:	dc13      	bgt.n	80155b6 <_strtod_l+0x3d6>
 801558e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015590:	2b00      	cmp	r3, #0
 8015592:	f43f ae5e 	beq.w	8015252 <_strtod_l+0x72>
 8015596:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015598:	dd78      	ble.n	801568c <_strtod_l+0x4ac>
 801559a:	2b16      	cmp	r3, #22
 801559c:	dc5f      	bgt.n	801565e <_strtod_l+0x47e>
 801559e:	4974      	ldr	r1, [pc, #464]	@ (8015770 <_strtod_l+0x590>)
 80155a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80155a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80155a8:	4652      	mov	r2, sl
 80155aa:	465b      	mov	r3, fp
 80155ac:	f7eb f854 	bl	8000658 <__aeabi_dmul>
 80155b0:	4682      	mov	sl, r0
 80155b2:	468b      	mov	fp, r1
 80155b4:	e64d      	b.n	8015252 <_strtod_l+0x72>
 80155b6:	4b6e      	ldr	r3, [pc, #440]	@ (8015770 <_strtod_l+0x590>)
 80155b8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80155bc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80155c0:	f7eb f84a 	bl	8000658 <__aeabi_dmul>
 80155c4:	4682      	mov	sl, r0
 80155c6:	9808      	ldr	r0, [sp, #32]
 80155c8:	468b      	mov	fp, r1
 80155ca:	f7ea ffcb 	bl	8000564 <__aeabi_ui2d>
 80155ce:	4602      	mov	r2, r0
 80155d0:	460b      	mov	r3, r1
 80155d2:	4650      	mov	r0, sl
 80155d4:	4659      	mov	r1, fp
 80155d6:	f7ea fe89 	bl	80002ec <__adddf3>
 80155da:	2d0f      	cmp	r5, #15
 80155dc:	4682      	mov	sl, r0
 80155de:	468b      	mov	fp, r1
 80155e0:	ddd5      	ble.n	801558e <_strtod_l+0x3ae>
 80155e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80155e4:	1b2c      	subs	r4, r5, r4
 80155e6:	441c      	add	r4, r3
 80155e8:	2c00      	cmp	r4, #0
 80155ea:	f340 8096 	ble.w	801571a <_strtod_l+0x53a>
 80155ee:	f014 030f 	ands.w	r3, r4, #15
 80155f2:	d00a      	beq.n	801560a <_strtod_l+0x42a>
 80155f4:	495e      	ldr	r1, [pc, #376]	@ (8015770 <_strtod_l+0x590>)
 80155f6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80155fa:	4652      	mov	r2, sl
 80155fc:	465b      	mov	r3, fp
 80155fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015602:	f7eb f829 	bl	8000658 <__aeabi_dmul>
 8015606:	4682      	mov	sl, r0
 8015608:	468b      	mov	fp, r1
 801560a:	f034 040f 	bics.w	r4, r4, #15
 801560e:	d073      	beq.n	80156f8 <_strtod_l+0x518>
 8015610:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8015614:	dd48      	ble.n	80156a8 <_strtod_l+0x4c8>
 8015616:	2400      	movs	r4, #0
 8015618:	46a0      	mov	r8, r4
 801561a:	940a      	str	r4, [sp, #40]	@ 0x28
 801561c:	46a1      	mov	r9, r4
 801561e:	9a05      	ldr	r2, [sp, #20]
 8015620:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8015778 <_strtod_l+0x598>
 8015624:	2322      	movs	r3, #34	@ 0x22
 8015626:	6013      	str	r3, [r2, #0]
 8015628:	f04f 0a00 	mov.w	sl, #0
 801562c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801562e:	2b00      	cmp	r3, #0
 8015630:	f43f ae0f 	beq.w	8015252 <_strtod_l+0x72>
 8015634:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8015636:	9805      	ldr	r0, [sp, #20]
 8015638:	f7ff f938 	bl	80148ac <_Bfree>
 801563c:	9805      	ldr	r0, [sp, #20]
 801563e:	4649      	mov	r1, r9
 8015640:	f7ff f934 	bl	80148ac <_Bfree>
 8015644:	9805      	ldr	r0, [sp, #20]
 8015646:	4641      	mov	r1, r8
 8015648:	f7ff f930 	bl	80148ac <_Bfree>
 801564c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801564e:	9805      	ldr	r0, [sp, #20]
 8015650:	f7ff f92c 	bl	80148ac <_Bfree>
 8015654:	9805      	ldr	r0, [sp, #20]
 8015656:	4621      	mov	r1, r4
 8015658:	f7ff f928 	bl	80148ac <_Bfree>
 801565c:	e5f9      	b.n	8015252 <_strtod_l+0x72>
 801565e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015660:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8015664:	4293      	cmp	r3, r2
 8015666:	dbbc      	blt.n	80155e2 <_strtod_l+0x402>
 8015668:	4c41      	ldr	r4, [pc, #260]	@ (8015770 <_strtod_l+0x590>)
 801566a:	f1c5 050f 	rsb	r5, r5, #15
 801566e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8015672:	4652      	mov	r2, sl
 8015674:	465b      	mov	r3, fp
 8015676:	e9d1 0100 	ldrd	r0, r1, [r1]
 801567a:	f7ea ffed 	bl	8000658 <__aeabi_dmul>
 801567e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015680:	1b5d      	subs	r5, r3, r5
 8015682:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8015686:	e9d4 2300 	ldrd	r2, r3, [r4]
 801568a:	e78f      	b.n	80155ac <_strtod_l+0x3cc>
 801568c:	3316      	adds	r3, #22
 801568e:	dba8      	blt.n	80155e2 <_strtod_l+0x402>
 8015690:	4b37      	ldr	r3, [pc, #220]	@ (8015770 <_strtod_l+0x590>)
 8015692:	eba9 0808 	sub.w	r8, r9, r8
 8015696:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 801569a:	e9d8 2300 	ldrd	r2, r3, [r8]
 801569e:	4650      	mov	r0, sl
 80156a0:	4659      	mov	r1, fp
 80156a2:	f7eb f903 	bl	80008ac <__aeabi_ddiv>
 80156a6:	e783      	b.n	80155b0 <_strtod_l+0x3d0>
 80156a8:	4b32      	ldr	r3, [pc, #200]	@ (8015774 <_strtod_l+0x594>)
 80156aa:	9308      	str	r3, [sp, #32]
 80156ac:	2300      	movs	r3, #0
 80156ae:	1124      	asrs	r4, r4, #4
 80156b0:	4650      	mov	r0, sl
 80156b2:	4659      	mov	r1, fp
 80156b4:	461e      	mov	r6, r3
 80156b6:	2c01      	cmp	r4, #1
 80156b8:	dc21      	bgt.n	80156fe <_strtod_l+0x51e>
 80156ba:	b10b      	cbz	r3, 80156c0 <_strtod_l+0x4e0>
 80156bc:	4682      	mov	sl, r0
 80156be:	468b      	mov	fp, r1
 80156c0:	492c      	ldr	r1, [pc, #176]	@ (8015774 <_strtod_l+0x594>)
 80156c2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80156c6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80156ca:	4652      	mov	r2, sl
 80156cc:	465b      	mov	r3, fp
 80156ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80156d2:	f7ea ffc1 	bl	8000658 <__aeabi_dmul>
 80156d6:	4b28      	ldr	r3, [pc, #160]	@ (8015778 <_strtod_l+0x598>)
 80156d8:	460a      	mov	r2, r1
 80156da:	400b      	ands	r3, r1
 80156dc:	4927      	ldr	r1, [pc, #156]	@ (801577c <_strtod_l+0x59c>)
 80156de:	428b      	cmp	r3, r1
 80156e0:	4682      	mov	sl, r0
 80156e2:	d898      	bhi.n	8015616 <_strtod_l+0x436>
 80156e4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80156e8:	428b      	cmp	r3, r1
 80156ea:	bf86      	itte	hi
 80156ec:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8015780 <_strtod_l+0x5a0>
 80156f0:	f04f 3aff 	movhi.w	sl, #4294967295
 80156f4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80156f8:	2300      	movs	r3, #0
 80156fa:	9308      	str	r3, [sp, #32]
 80156fc:	e07a      	b.n	80157f4 <_strtod_l+0x614>
 80156fe:	07e2      	lsls	r2, r4, #31
 8015700:	d505      	bpl.n	801570e <_strtod_l+0x52e>
 8015702:	9b08      	ldr	r3, [sp, #32]
 8015704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015708:	f7ea ffa6 	bl	8000658 <__aeabi_dmul>
 801570c:	2301      	movs	r3, #1
 801570e:	9a08      	ldr	r2, [sp, #32]
 8015710:	3208      	adds	r2, #8
 8015712:	3601      	adds	r6, #1
 8015714:	1064      	asrs	r4, r4, #1
 8015716:	9208      	str	r2, [sp, #32]
 8015718:	e7cd      	b.n	80156b6 <_strtod_l+0x4d6>
 801571a:	d0ed      	beq.n	80156f8 <_strtod_l+0x518>
 801571c:	4264      	negs	r4, r4
 801571e:	f014 020f 	ands.w	r2, r4, #15
 8015722:	d00a      	beq.n	801573a <_strtod_l+0x55a>
 8015724:	4b12      	ldr	r3, [pc, #72]	@ (8015770 <_strtod_l+0x590>)
 8015726:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801572a:	4650      	mov	r0, sl
 801572c:	4659      	mov	r1, fp
 801572e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015732:	f7eb f8bb 	bl	80008ac <__aeabi_ddiv>
 8015736:	4682      	mov	sl, r0
 8015738:	468b      	mov	fp, r1
 801573a:	1124      	asrs	r4, r4, #4
 801573c:	d0dc      	beq.n	80156f8 <_strtod_l+0x518>
 801573e:	2c1f      	cmp	r4, #31
 8015740:	dd20      	ble.n	8015784 <_strtod_l+0x5a4>
 8015742:	2400      	movs	r4, #0
 8015744:	46a0      	mov	r8, r4
 8015746:	940a      	str	r4, [sp, #40]	@ 0x28
 8015748:	46a1      	mov	r9, r4
 801574a:	9a05      	ldr	r2, [sp, #20]
 801574c:	2322      	movs	r3, #34	@ 0x22
 801574e:	f04f 0a00 	mov.w	sl, #0
 8015752:	f04f 0b00 	mov.w	fp, #0
 8015756:	6013      	str	r3, [r2, #0]
 8015758:	e768      	b.n	801562c <_strtod_l+0x44c>
 801575a:	bf00      	nop
 801575c:	0805d71d 	.word	0x0805d71d
 8015760:	0805d9c4 	.word	0x0805d9c4
 8015764:	0805d715 	.word	0x0805d715
 8015768:	0805d7f7 	.word	0x0805d7f7
 801576c:	0805d7f3 	.word	0x0805d7f3
 8015770:	0805d8f8 	.word	0x0805d8f8
 8015774:	0805d8d0 	.word	0x0805d8d0
 8015778:	7ff00000 	.word	0x7ff00000
 801577c:	7ca00000 	.word	0x7ca00000
 8015780:	7fefffff 	.word	0x7fefffff
 8015784:	f014 0310 	ands.w	r3, r4, #16
 8015788:	bf18      	it	ne
 801578a:	236a      	movne	r3, #106	@ 0x6a
 801578c:	4ea9      	ldr	r6, [pc, #676]	@ (8015a34 <_strtod_l+0x854>)
 801578e:	9308      	str	r3, [sp, #32]
 8015790:	4650      	mov	r0, sl
 8015792:	4659      	mov	r1, fp
 8015794:	2300      	movs	r3, #0
 8015796:	07e2      	lsls	r2, r4, #31
 8015798:	d504      	bpl.n	80157a4 <_strtod_l+0x5c4>
 801579a:	e9d6 2300 	ldrd	r2, r3, [r6]
 801579e:	f7ea ff5b 	bl	8000658 <__aeabi_dmul>
 80157a2:	2301      	movs	r3, #1
 80157a4:	1064      	asrs	r4, r4, #1
 80157a6:	f106 0608 	add.w	r6, r6, #8
 80157aa:	d1f4      	bne.n	8015796 <_strtod_l+0x5b6>
 80157ac:	b10b      	cbz	r3, 80157b2 <_strtod_l+0x5d2>
 80157ae:	4682      	mov	sl, r0
 80157b0:	468b      	mov	fp, r1
 80157b2:	9b08      	ldr	r3, [sp, #32]
 80157b4:	b1b3      	cbz	r3, 80157e4 <_strtod_l+0x604>
 80157b6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80157ba:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80157be:	2b00      	cmp	r3, #0
 80157c0:	4659      	mov	r1, fp
 80157c2:	dd0f      	ble.n	80157e4 <_strtod_l+0x604>
 80157c4:	2b1f      	cmp	r3, #31
 80157c6:	dd55      	ble.n	8015874 <_strtod_l+0x694>
 80157c8:	2b34      	cmp	r3, #52	@ 0x34
 80157ca:	bfde      	ittt	le
 80157cc:	f04f 33ff 	movle.w	r3, #4294967295
 80157d0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80157d4:	4093      	lslle	r3, r2
 80157d6:	f04f 0a00 	mov.w	sl, #0
 80157da:	bfcc      	ite	gt
 80157dc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80157e0:	ea03 0b01 	andle.w	fp, r3, r1
 80157e4:	2200      	movs	r2, #0
 80157e6:	2300      	movs	r3, #0
 80157e8:	4650      	mov	r0, sl
 80157ea:	4659      	mov	r1, fp
 80157ec:	f7eb f99c 	bl	8000b28 <__aeabi_dcmpeq>
 80157f0:	2800      	cmp	r0, #0
 80157f2:	d1a6      	bne.n	8015742 <_strtod_l+0x562>
 80157f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80157f6:	9300      	str	r3, [sp, #0]
 80157f8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80157fa:	9805      	ldr	r0, [sp, #20]
 80157fc:	462b      	mov	r3, r5
 80157fe:	463a      	mov	r2, r7
 8015800:	f7ff f8bc 	bl	801497c <__s2b>
 8015804:	900a      	str	r0, [sp, #40]	@ 0x28
 8015806:	2800      	cmp	r0, #0
 8015808:	f43f af05 	beq.w	8015616 <_strtod_l+0x436>
 801580c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801580e:	2a00      	cmp	r2, #0
 8015810:	eba9 0308 	sub.w	r3, r9, r8
 8015814:	bfa8      	it	ge
 8015816:	2300      	movge	r3, #0
 8015818:	9312      	str	r3, [sp, #72]	@ 0x48
 801581a:	2400      	movs	r4, #0
 801581c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8015820:	9316      	str	r3, [sp, #88]	@ 0x58
 8015822:	46a0      	mov	r8, r4
 8015824:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015826:	9805      	ldr	r0, [sp, #20]
 8015828:	6859      	ldr	r1, [r3, #4]
 801582a:	f7fe ffff 	bl	801482c <_Balloc>
 801582e:	4681      	mov	r9, r0
 8015830:	2800      	cmp	r0, #0
 8015832:	f43f aef4 	beq.w	801561e <_strtod_l+0x43e>
 8015836:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015838:	691a      	ldr	r2, [r3, #16]
 801583a:	3202      	adds	r2, #2
 801583c:	f103 010c 	add.w	r1, r3, #12
 8015840:	0092      	lsls	r2, r2, #2
 8015842:	300c      	adds	r0, #12
 8015844:	f7fe f929 	bl	8013a9a <memcpy>
 8015848:	ec4b ab10 	vmov	d0, sl, fp
 801584c:	9805      	ldr	r0, [sp, #20]
 801584e:	aa1c      	add	r2, sp, #112	@ 0x70
 8015850:	a91b      	add	r1, sp, #108	@ 0x6c
 8015852:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8015856:	f7ff fbcd 	bl	8014ff4 <__d2b>
 801585a:	901a      	str	r0, [sp, #104]	@ 0x68
 801585c:	2800      	cmp	r0, #0
 801585e:	f43f aede 	beq.w	801561e <_strtod_l+0x43e>
 8015862:	9805      	ldr	r0, [sp, #20]
 8015864:	2101      	movs	r1, #1
 8015866:	f7ff f91f 	bl	8014aa8 <__i2b>
 801586a:	4680      	mov	r8, r0
 801586c:	b948      	cbnz	r0, 8015882 <_strtod_l+0x6a2>
 801586e:	f04f 0800 	mov.w	r8, #0
 8015872:	e6d4      	b.n	801561e <_strtod_l+0x43e>
 8015874:	f04f 32ff 	mov.w	r2, #4294967295
 8015878:	fa02 f303 	lsl.w	r3, r2, r3
 801587c:	ea03 0a0a 	and.w	sl, r3, sl
 8015880:	e7b0      	b.n	80157e4 <_strtod_l+0x604>
 8015882:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8015884:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8015886:	2d00      	cmp	r5, #0
 8015888:	bfab      	itete	ge
 801588a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 801588c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 801588e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8015890:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8015892:	bfac      	ite	ge
 8015894:	18ef      	addge	r7, r5, r3
 8015896:	1b5e      	sublt	r6, r3, r5
 8015898:	9b08      	ldr	r3, [sp, #32]
 801589a:	1aed      	subs	r5, r5, r3
 801589c:	4415      	add	r5, r2
 801589e:	4b66      	ldr	r3, [pc, #408]	@ (8015a38 <_strtod_l+0x858>)
 80158a0:	3d01      	subs	r5, #1
 80158a2:	429d      	cmp	r5, r3
 80158a4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80158a8:	da50      	bge.n	801594c <_strtod_l+0x76c>
 80158aa:	1b5b      	subs	r3, r3, r5
 80158ac:	2b1f      	cmp	r3, #31
 80158ae:	eba2 0203 	sub.w	r2, r2, r3
 80158b2:	f04f 0101 	mov.w	r1, #1
 80158b6:	dc3d      	bgt.n	8015934 <_strtod_l+0x754>
 80158b8:	fa01 f303 	lsl.w	r3, r1, r3
 80158bc:	9313      	str	r3, [sp, #76]	@ 0x4c
 80158be:	2300      	movs	r3, #0
 80158c0:	9310      	str	r3, [sp, #64]	@ 0x40
 80158c2:	18bd      	adds	r5, r7, r2
 80158c4:	9b08      	ldr	r3, [sp, #32]
 80158c6:	42af      	cmp	r7, r5
 80158c8:	4416      	add	r6, r2
 80158ca:	441e      	add	r6, r3
 80158cc:	463b      	mov	r3, r7
 80158ce:	bfa8      	it	ge
 80158d0:	462b      	movge	r3, r5
 80158d2:	42b3      	cmp	r3, r6
 80158d4:	bfa8      	it	ge
 80158d6:	4633      	movge	r3, r6
 80158d8:	2b00      	cmp	r3, #0
 80158da:	bfc2      	ittt	gt
 80158dc:	1aed      	subgt	r5, r5, r3
 80158de:	1af6      	subgt	r6, r6, r3
 80158e0:	1aff      	subgt	r7, r7, r3
 80158e2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80158e4:	2b00      	cmp	r3, #0
 80158e6:	dd16      	ble.n	8015916 <_strtod_l+0x736>
 80158e8:	4641      	mov	r1, r8
 80158ea:	9805      	ldr	r0, [sp, #20]
 80158ec:	461a      	mov	r2, r3
 80158ee:	f7ff f99b 	bl	8014c28 <__pow5mult>
 80158f2:	4680      	mov	r8, r0
 80158f4:	2800      	cmp	r0, #0
 80158f6:	d0ba      	beq.n	801586e <_strtod_l+0x68e>
 80158f8:	4601      	mov	r1, r0
 80158fa:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80158fc:	9805      	ldr	r0, [sp, #20]
 80158fe:	f7ff f8e9 	bl	8014ad4 <__multiply>
 8015902:	900e      	str	r0, [sp, #56]	@ 0x38
 8015904:	2800      	cmp	r0, #0
 8015906:	f43f ae8a 	beq.w	801561e <_strtod_l+0x43e>
 801590a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801590c:	9805      	ldr	r0, [sp, #20]
 801590e:	f7fe ffcd 	bl	80148ac <_Bfree>
 8015912:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015914:	931a      	str	r3, [sp, #104]	@ 0x68
 8015916:	2d00      	cmp	r5, #0
 8015918:	dc1d      	bgt.n	8015956 <_strtod_l+0x776>
 801591a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801591c:	2b00      	cmp	r3, #0
 801591e:	dd23      	ble.n	8015968 <_strtod_l+0x788>
 8015920:	4649      	mov	r1, r9
 8015922:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8015924:	9805      	ldr	r0, [sp, #20]
 8015926:	f7ff f97f 	bl	8014c28 <__pow5mult>
 801592a:	4681      	mov	r9, r0
 801592c:	b9e0      	cbnz	r0, 8015968 <_strtod_l+0x788>
 801592e:	f04f 0900 	mov.w	r9, #0
 8015932:	e674      	b.n	801561e <_strtod_l+0x43e>
 8015934:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8015938:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 801593c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8015940:	35e2      	adds	r5, #226	@ 0xe2
 8015942:	fa01 f305 	lsl.w	r3, r1, r5
 8015946:	9310      	str	r3, [sp, #64]	@ 0x40
 8015948:	9113      	str	r1, [sp, #76]	@ 0x4c
 801594a:	e7ba      	b.n	80158c2 <_strtod_l+0x6e2>
 801594c:	2300      	movs	r3, #0
 801594e:	9310      	str	r3, [sp, #64]	@ 0x40
 8015950:	2301      	movs	r3, #1
 8015952:	9313      	str	r3, [sp, #76]	@ 0x4c
 8015954:	e7b5      	b.n	80158c2 <_strtod_l+0x6e2>
 8015956:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8015958:	9805      	ldr	r0, [sp, #20]
 801595a:	462a      	mov	r2, r5
 801595c:	f7ff f9be 	bl	8014cdc <__lshift>
 8015960:	901a      	str	r0, [sp, #104]	@ 0x68
 8015962:	2800      	cmp	r0, #0
 8015964:	d1d9      	bne.n	801591a <_strtod_l+0x73a>
 8015966:	e65a      	b.n	801561e <_strtod_l+0x43e>
 8015968:	2e00      	cmp	r6, #0
 801596a:	dd07      	ble.n	801597c <_strtod_l+0x79c>
 801596c:	4649      	mov	r1, r9
 801596e:	9805      	ldr	r0, [sp, #20]
 8015970:	4632      	mov	r2, r6
 8015972:	f7ff f9b3 	bl	8014cdc <__lshift>
 8015976:	4681      	mov	r9, r0
 8015978:	2800      	cmp	r0, #0
 801597a:	d0d8      	beq.n	801592e <_strtod_l+0x74e>
 801597c:	2f00      	cmp	r7, #0
 801597e:	dd08      	ble.n	8015992 <_strtod_l+0x7b2>
 8015980:	4641      	mov	r1, r8
 8015982:	9805      	ldr	r0, [sp, #20]
 8015984:	463a      	mov	r2, r7
 8015986:	f7ff f9a9 	bl	8014cdc <__lshift>
 801598a:	4680      	mov	r8, r0
 801598c:	2800      	cmp	r0, #0
 801598e:	f43f ae46 	beq.w	801561e <_strtod_l+0x43e>
 8015992:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8015994:	9805      	ldr	r0, [sp, #20]
 8015996:	464a      	mov	r2, r9
 8015998:	f7ff fa28 	bl	8014dec <__mdiff>
 801599c:	4604      	mov	r4, r0
 801599e:	2800      	cmp	r0, #0
 80159a0:	f43f ae3d 	beq.w	801561e <_strtod_l+0x43e>
 80159a4:	68c3      	ldr	r3, [r0, #12]
 80159a6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80159a8:	2300      	movs	r3, #0
 80159aa:	60c3      	str	r3, [r0, #12]
 80159ac:	4641      	mov	r1, r8
 80159ae:	f7ff fa01 	bl	8014db4 <__mcmp>
 80159b2:	2800      	cmp	r0, #0
 80159b4:	da46      	bge.n	8015a44 <_strtod_l+0x864>
 80159b6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80159b8:	ea53 030a 	orrs.w	r3, r3, sl
 80159bc:	d16c      	bne.n	8015a98 <_strtod_l+0x8b8>
 80159be:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80159c2:	2b00      	cmp	r3, #0
 80159c4:	d168      	bne.n	8015a98 <_strtod_l+0x8b8>
 80159c6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80159ca:	0d1b      	lsrs	r3, r3, #20
 80159cc:	051b      	lsls	r3, r3, #20
 80159ce:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80159d2:	d961      	bls.n	8015a98 <_strtod_l+0x8b8>
 80159d4:	6963      	ldr	r3, [r4, #20]
 80159d6:	b913      	cbnz	r3, 80159de <_strtod_l+0x7fe>
 80159d8:	6923      	ldr	r3, [r4, #16]
 80159da:	2b01      	cmp	r3, #1
 80159dc:	dd5c      	ble.n	8015a98 <_strtod_l+0x8b8>
 80159de:	4621      	mov	r1, r4
 80159e0:	2201      	movs	r2, #1
 80159e2:	9805      	ldr	r0, [sp, #20]
 80159e4:	f7ff f97a 	bl	8014cdc <__lshift>
 80159e8:	4641      	mov	r1, r8
 80159ea:	4604      	mov	r4, r0
 80159ec:	f7ff f9e2 	bl	8014db4 <__mcmp>
 80159f0:	2800      	cmp	r0, #0
 80159f2:	dd51      	ble.n	8015a98 <_strtod_l+0x8b8>
 80159f4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80159f8:	9a08      	ldr	r2, [sp, #32]
 80159fa:	0d1b      	lsrs	r3, r3, #20
 80159fc:	051b      	lsls	r3, r3, #20
 80159fe:	2a00      	cmp	r2, #0
 8015a00:	d06b      	beq.n	8015ada <_strtod_l+0x8fa>
 8015a02:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8015a06:	d868      	bhi.n	8015ada <_strtod_l+0x8fa>
 8015a08:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8015a0c:	f67f ae9d 	bls.w	801574a <_strtod_l+0x56a>
 8015a10:	4b0a      	ldr	r3, [pc, #40]	@ (8015a3c <_strtod_l+0x85c>)
 8015a12:	4650      	mov	r0, sl
 8015a14:	4659      	mov	r1, fp
 8015a16:	2200      	movs	r2, #0
 8015a18:	f7ea fe1e 	bl	8000658 <__aeabi_dmul>
 8015a1c:	4b08      	ldr	r3, [pc, #32]	@ (8015a40 <_strtod_l+0x860>)
 8015a1e:	400b      	ands	r3, r1
 8015a20:	4682      	mov	sl, r0
 8015a22:	468b      	mov	fp, r1
 8015a24:	2b00      	cmp	r3, #0
 8015a26:	f47f ae05 	bne.w	8015634 <_strtod_l+0x454>
 8015a2a:	9a05      	ldr	r2, [sp, #20]
 8015a2c:	2322      	movs	r3, #34	@ 0x22
 8015a2e:	6013      	str	r3, [r2, #0]
 8015a30:	e600      	b.n	8015634 <_strtod_l+0x454>
 8015a32:	bf00      	nop
 8015a34:	0805d9f0 	.word	0x0805d9f0
 8015a38:	fffffc02 	.word	0xfffffc02
 8015a3c:	39500000 	.word	0x39500000
 8015a40:	7ff00000 	.word	0x7ff00000
 8015a44:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8015a48:	d165      	bne.n	8015b16 <_strtod_l+0x936>
 8015a4a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8015a4c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015a50:	b35a      	cbz	r2, 8015aaa <_strtod_l+0x8ca>
 8015a52:	4a9f      	ldr	r2, [pc, #636]	@ (8015cd0 <_strtod_l+0xaf0>)
 8015a54:	4293      	cmp	r3, r2
 8015a56:	d12b      	bne.n	8015ab0 <_strtod_l+0x8d0>
 8015a58:	9b08      	ldr	r3, [sp, #32]
 8015a5a:	4651      	mov	r1, sl
 8015a5c:	b303      	cbz	r3, 8015aa0 <_strtod_l+0x8c0>
 8015a5e:	4b9d      	ldr	r3, [pc, #628]	@ (8015cd4 <_strtod_l+0xaf4>)
 8015a60:	465a      	mov	r2, fp
 8015a62:	4013      	ands	r3, r2
 8015a64:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8015a68:	f04f 32ff 	mov.w	r2, #4294967295
 8015a6c:	d81b      	bhi.n	8015aa6 <_strtod_l+0x8c6>
 8015a6e:	0d1b      	lsrs	r3, r3, #20
 8015a70:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8015a74:	fa02 f303 	lsl.w	r3, r2, r3
 8015a78:	4299      	cmp	r1, r3
 8015a7a:	d119      	bne.n	8015ab0 <_strtod_l+0x8d0>
 8015a7c:	4b96      	ldr	r3, [pc, #600]	@ (8015cd8 <_strtod_l+0xaf8>)
 8015a7e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015a80:	429a      	cmp	r2, r3
 8015a82:	d102      	bne.n	8015a8a <_strtod_l+0x8aa>
 8015a84:	3101      	adds	r1, #1
 8015a86:	f43f adca 	beq.w	801561e <_strtod_l+0x43e>
 8015a8a:	4b92      	ldr	r3, [pc, #584]	@ (8015cd4 <_strtod_l+0xaf4>)
 8015a8c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015a8e:	401a      	ands	r2, r3
 8015a90:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8015a94:	f04f 0a00 	mov.w	sl, #0
 8015a98:	9b08      	ldr	r3, [sp, #32]
 8015a9a:	2b00      	cmp	r3, #0
 8015a9c:	d1b8      	bne.n	8015a10 <_strtod_l+0x830>
 8015a9e:	e5c9      	b.n	8015634 <_strtod_l+0x454>
 8015aa0:	f04f 33ff 	mov.w	r3, #4294967295
 8015aa4:	e7e8      	b.n	8015a78 <_strtod_l+0x898>
 8015aa6:	4613      	mov	r3, r2
 8015aa8:	e7e6      	b.n	8015a78 <_strtod_l+0x898>
 8015aaa:	ea53 030a 	orrs.w	r3, r3, sl
 8015aae:	d0a1      	beq.n	80159f4 <_strtod_l+0x814>
 8015ab0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015ab2:	b1db      	cbz	r3, 8015aec <_strtod_l+0x90c>
 8015ab4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015ab6:	4213      	tst	r3, r2
 8015ab8:	d0ee      	beq.n	8015a98 <_strtod_l+0x8b8>
 8015aba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015abc:	9a08      	ldr	r2, [sp, #32]
 8015abe:	4650      	mov	r0, sl
 8015ac0:	4659      	mov	r1, fp
 8015ac2:	b1bb      	cbz	r3, 8015af4 <_strtod_l+0x914>
 8015ac4:	f7ff fb6c 	bl	80151a0 <sulp>
 8015ac8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8015acc:	ec53 2b10 	vmov	r2, r3, d0
 8015ad0:	f7ea fc0c 	bl	80002ec <__adddf3>
 8015ad4:	4682      	mov	sl, r0
 8015ad6:	468b      	mov	fp, r1
 8015ad8:	e7de      	b.n	8015a98 <_strtod_l+0x8b8>
 8015ada:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8015ade:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8015ae2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8015ae6:	f04f 3aff 	mov.w	sl, #4294967295
 8015aea:	e7d5      	b.n	8015a98 <_strtod_l+0x8b8>
 8015aec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8015aee:	ea13 0f0a 	tst.w	r3, sl
 8015af2:	e7e1      	b.n	8015ab8 <_strtod_l+0x8d8>
 8015af4:	f7ff fb54 	bl	80151a0 <sulp>
 8015af8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8015afc:	ec53 2b10 	vmov	r2, r3, d0
 8015b00:	f7ea fbf2 	bl	80002e8 <__aeabi_dsub>
 8015b04:	2200      	movs	r2, #0
 8015b06:	2300      	movs	r3, #0
 8015b08:	4682      	mov	sl, r0
 8015b0a:	468b      	mov	fp, r1
 8015b0c:	f7eb f80c 	bl	8000b28 <__aeabi_dcmpeq>
 8015b10:	2800      	cmp	r0, #0
 8015b12:	d0c1      	beq.n	8015a98 <_strtod_l+0x8b8>
 8015b14:	e619      	b.n	801574a <_strtod_l+0x56a>
 8015b16:	4641      	mov	r1, r8
 8015b18:	4620      	mov	r0, r4
 8015b1a:	f7ff fac3 	bl	80150a4 <__ratio>
 8015b1e:	ec57 6b10 	vmov	r6, r7, d0
 8015b22:	2200      	movs	r2, #0
 8015b24:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8015b28:	4630      	mov	r0, r6
 8015b2a:	4639      	mov	r1, r7
 8015b2c:	f7eb f810 	bl	8000b50 <__aeabi_dcmple>
 8015b30:	2800      	cmp	r0, #0
 8015b32:	d06f      	beq.n	8015c14 <_strtod_l+0xa34>
 8015b34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015b36:	2b00      	cmp	r3, #0
 8015b38:	d17a      	bne.n	8015c30 <_strtod_l+0xa50>
 8015b3a:	f1ba 0f00 	cmp.w	sl, #0
 8015b3e:	d158      	bne.n	8015bf2 <_strtod_l+0xa12>
 8015b40:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015b42:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015b46:	2b00      	cmp	r3, #0
 8015b48:	d15a      	bne.n	8015c00 <_strtod_l+0xa20>
 8015b4a:	4b64      	ldr	r3, [pc, #400]	@ (8015cdc <_strtod_l+0xafc>)
 8015b4c:	2200      	movs	r2, #0
 8015b4e:	4630      	mov	r0, r6
 8015b50:	4639      	mov	r1, r7
 8015b52:	f7ea fff3 	bl	8000b3c <__aeabi_dcmplt>
 8015b56:	2800      	cmp	r0, #0
 8015b58:	d159      	bne.n	8015c0e <_strtod_l+0xa2e>
 8015b5a:	4630      	mov	r0, r6
 8015b5c:	4639      	mov	r1, r7
 8015b5e:	4b60      	ldr	r3, [pc, #384]	@ (8015ce0 <_strtod_l+0xb00>)
 8015b60:	2200      	movs	r2, #0
 8015b62:	f7ea fd79 	bl	8000658 <__aeabi_dmul>
 8015b66:	4606      	mov	r6, r0
 8015b68:	460f      	mov	r7, r1
 8015b6a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8015b6e:	9606      	str	r6, [sp, #24]
 8015b70:	9307      	str	r3, [sp, #28]
 8015b72:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015b76:	4d57      	ldr	r5, [pc, #348]	@ (8015cd4 <_strtod_l+0xaf4>)
 8015b78:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8015b7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015b7e:	401d      	ands	r5, r3
 8015b80:	4b58      	ldr	r3, [pc, #352]	@ (8015ce4 <_strtod_l+0xb04>)
 8015b82:	429d      	cmp	r5, r3
 8015b84:	f040 80b2 	bne.w	8015cec <_strtod_l+0xb0c>
 8015b88:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015b8a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8015b8e:	ec4b ab10 	vmov	d0, sl, fp
 8015b92:	f7ff f9bf 	bl	8014f14 <__ulp>
 8015b96:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015b9a:	ec51 0b10 	vmov	r0, r1, d0
 8015b9e:	f7ea fd5b 	bl	8000658 <__aeabi_dmul>
 8015ba2:	4652      	mov	r2, sl
 8015ba4:	465b      	mov	r3, fp
 8015ba6:	f7ea fba1 	bl	80002ec <__adddf3>
 8015baa:	460b      	mov	r3, r1
 8015bac:	4949      	ldr	r1, [pc, #292]	@ (8015cd4 <_strtod_l+0xaf4>)
 8015bae:	4a4e      	ldr	r2, [pc, #312]	@ (8015ce8 <_strtod_l+0xb08>)
 8015bb0:	4019      	ands	r1, r3
 8015bb2:	4291      	cmp	r1, r2
 8015bb4:	4682      	mov	sl, r0
 8015bb6:	d942      	bls.n	8015c3e <_strtod_l+0xa5e>
 8015bb8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8015bba:	4b47      	ldr	r3, [pc, #284]	@ (8015cd8 <_strtod_l+0xaf8>)
 8015bbc:	429a      	cmp	r2, r3
 8015bbe:	d103      	bne.n	8015bc8 <_strtod_l+0x9e8>
 8015bc0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015bc2:	3301      	adds	r3, #1
 8015bc4:	f43f ad2b 	beq.w	801561e <_strtod_l+0x43e>
 8015bc8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8015cd8 <_strtod_l+0xaf8>
 8015bcc:	f04f 3aff 	mov.w	sl, #4294967295
 8015bd0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8015bd2:	9805      	ldr	r0, [sp, #20]
 8015bd4:	f7fe fe6a 	bl	80148ac <_Bfree>
 8015bd8:	9805      	ldr	r0, [sp, #20]
 8015bda:	4649      	mov	r1, r9
 8015bdc:	f7fe fe66 	bl	80148ac <_Bfree>
 8015be0:	9805      	ldr	r0, [sp, #20]
 8015be2:	4641      	mov	r1, r8
 8015be4:	f7fe fe62 	bl	80148ac <_Bfree>
 8015be8:	9805      	ldr	r0, [sp, #20]
 8015bea:	4621      	mov	r1, r4
 8015bec:	f7fe fe5e 	bl	80148ac <_Bfree>
 8015bf0:	e618      	b.n	8015824 <_strtod_l+0x644>
 8015bf2:	f1ba 0f01 	cmp.w	sl, #1
 8015bf6:	d103      	bne.n	8015c00 <_strtod_l+0xa20>
 8015bf8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015bfa:	2b00      	cmp	r3, #0
 8015bfc:	f43f ada5 	beq.w	801574a <_strtod_l+0x56a>
 8015c00:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8015cb0 <_strtod_l+0xad0>
 8015c04:	4f35      	ldr	r7, [pc, #212]	@ (8015cdc <_strtod_l+0xafc>)
 8015c06:	ed8d 7b06 	vstr	d7, [sp, #24]
 8015c0a:	2600      	movs	r6, #0
 8015c0c:	e7b1      	b.n	8015b72 <_strtod_l+0x992>
 8015c0e:	4f34      	ldr	r7, [pc, #208]	@ (8015ce0 <_strtod_l+0xb00>)
 8015c10:	2600      	movs	r6, #0
 8015c12:	e7aa      	b.n	8015b6a <_strtod_l+0x98a>
 8015c14:	4b32      	ldr	r3, [pc, #200]	@ (8015ce0 <_strtod_l+0xb00>)
 8015c16:	4630      	mov	r0, r6
 8015c18:	4639      	mov	r1, r7
 8015c1a:	2200      	movs	r2, #0
 8015c1c:	f7ea fd1c 	bl	8000658 <__aeabi_dmul>
 8015c20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015c22:	4606      	mov	r6, r0
 8015c24:	460f      	mov	r7, r1
 8015c26:	2b00      	cmp	r3, #0
 8015c28:	d09f      	beq.n	8015b6a <_strtod_l+0x98a>
 8015c2a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8015c2e:	e7a0      	b.n	8015b72 <_strtod_l+0x992>
 8015c30:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8015cb8 <_strtod_l+0xad8>
 8015c34:	ed8d 7b06 	vstr	d7, [sp, #24]
 8015c38:	ec57 6b17 	vmov	r6, r7, d7
 8015c3c:	e799      	b.n	8015b72 <_strtod_l+0x992>
 8015c3e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8015c42:	9b08      	ldr	r3, [sp, #32]
 8015c44:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8015c48:	2b00      	cmp	r3, #0
 8015c4a:	d1c1      	bne.n	8015bd0 <_strtod_l+0x9f0>
 8015c4c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8015c50:	0d1b      	lsrs	r3, r3, #20
 8015c52:	051b      	lsls	r3, r3, #20
 8015c54:	429d      	cmp	r5, r3
 8015c56:	d1bb      	bne.n	8015bd0 <_strtod_l+0x9f0>
 8015c58:	4630      	mov	r0, r6
 8015c5a:	4639      	mov	r1, r7
 8015c5c:	f7eb f85c 	bl	8000d18 <__aeabi_d2lz>
 8015c60:	f7ea fccc 	bl	80005fc <__aeabi_l2d>
 8015c64:	4602      	mov	r2, r0
 8015c66:	460b      	mov	r3, r1
 8015c68:	4630      	mov	r0, r6
 8015c6a:	4639      	mov	r1, r7
 8015c6c:	f7ea fb3c 	bl	80002e8 <__aeabi_dsub>
 8015c70:	460b      	mov	r3, r1
 8015c72:	4602      	mov	r2, r0
 8015c74:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8015c78:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8015c7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015c7e:	ea46 060a 	orr.w	r6, r6, sl
 8015c82:	431e      	orrs	r6, r3
 8015c84:	d06f      	beq.n	8015d66 <_strtod_l+0xb86>
 8015c86:	a30e      	add	r3, pc, #56	@ (adr r3, 8015cc0 <_strtod_l+0xae0>)
 8015c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c8c:	f7ea ff56 	bl	8000b3c <__aeabi_dcmplt>
 8015c90:	2800      	cmp	r0, #0
 8015c92:	f47f accf 	bne.w	8015634 <_strtod_l+0x454>
 8015c96:	a30c      	add	r3, pc, #48	@ (adr r3, 8015cc8 <_strtod_l+0xae8>)
 8015c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c9c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8015ca0:	f7ea ff6a 	bl	8000b78 <__aeabi_dcmpgt>
 8015ca4:	2800      	cmp	r0, #0
 8015ca6:	d093      	beq.n	8015bd0 <_strtod_l+0x9f0>
 8015ca8:	e4c4      	b.n	8015634 <_strtod_l+0x454>
 8015caa:	bf00      	nop
 8015cac:	f3af 8000 	nop.w
 8015cb0:	00000000 	.word	0x00000000
 8015cb4:	bff00000 	.word	0xbff00000
 8015cb8:	00000000 	.word	0x00000000
 8015cbc:	3ff00000 	.word	0x3ff00000
 8015cc0:	94a03595 	.word	0x94a03595
 8015cc4:	3fdfffff 	.word	0x3fdfffff
 8015cc8:	35afe535 	.word	0x35afe535
 8015ccc:	3fe00000 	.word	0x3fe00000
 8015cd0:	000fffff 	.word	0x000fffff
 8015cd4:	7ff00000 	.word	0x7ff00000
 8015cd8:	7fefffff 	.word	0x7fefffff
 8015cdc:	3ff00000 	.word	0x3ff00000
 8015ce0:	3fe00000 	.word	0x3fe00000
 8015ce4:	7fe00000 	.word	0x7fe00000
 8015ce8:	7c9fffff 	.word	0x7c9fffff
 8015cec:	9b08      	ldr	r3, [sp, #32]
 8015cee:	b323      	cbz	r3, 8015d3a <_strtod_l+0xb5a>
 8015cf0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8015cf4:	d821      	bhi.n	8015d3a <_strtod_l+0xb5a>
 8015cf6:	a328      	add	r3, pc, #160	@ (adr r3, 8015d98 <_strtod_l+0xbb8>)
 8015cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cfc:	4630      	mov	r0, r6
 8015cfe:	4639      	mov	r1, r7
 8015d00:	f7ea ff26 	bl	8000b50 <__aeabi_dcmple>
 8015d04:	b1a0      	cbz	r0, 8015d30 <_strtod_l+0xb50>
 8015d06:	4639      	mov	r1, r7
 8015d08:	4630      	mov	r0, r6
 8015d0a:	f7ea ff7d 	bl	8000c08 <__aeabi_d2uiz>
 8015d0e:	2801      	cmp	r0, #1
 8015d10:	bf38      	it	cc
 8015d12:	2001      	movcc	r0, #1
 8015d14:	f7ea fc26 	bl	8000564 <__aeabi_ui2d>
 8015d18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015d1a:	4606      	mov	r6, r0
 8015d1c:	460f      	mov	r7, r1
 8015d1e:	b9fb      	cbnz	r3, 8015d60 <_strtod_l+0xb80>
 8015d20:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8015d24:	9014      	str	r0, [sp, #80]	@ 0x50
 8015d26:	9315      	str	r3, [sp, #84]	@ 0x54
 8015d28:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8015d2c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8015d30:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015d32:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8015d36:	1b5b      	subs	r3, r3, r5
 8015d38:	9311      	str	r3, [sp, #68]	@ 0x44
 8015d3a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8015d3e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8015d42:	f7ff f8e7 	bl	8014f14 <__ulp>
 8015d46:	4650      	mov	r0, sl
 8015d48:	ec53 2b10 	vmov	r2, r3, d0
 8015d4c:	4659      	mov	r1, fp
 8015d4e:	f7ea fc83 	bl	8000658 <__aeabi_dmul>
 8015d52:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8015d56:	f7ea fac9 	bl	80002ec <__adddf3>
 8015d5a:	4682      	mov	sl, r0
 8015d5c:	468b      	mov	fp, r1
 8015d5e:	e770      	b.n	8015c42 <_strtod_l+0xa62>
 8015d60:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8015d64:	e7e0      	b.n	8015d28 <_strtod_l+0xb48>
 8015d66:	a30e      	add	r3, pc, #56	@ (adr r3, 8015da0 <_strtod_l+0xbc0>)
 8015d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d6c:	f7ea fee6 	bl	8000b3c <__aeabi_dcmplt>
 8015d70:	e798      	b.n	8015ca4 <_strtod_l+0xac4>
 8015d72:	2300      	movs	r3, #0
 8015d74:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015d76:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8015d78:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8015d7a:	6013      	str	r3, [r2, #0]
 8015d7c:	f7ff ba6d 	b.w	801525a <_strtod_l+0x7a>
 8015d80:	2a65      	cmp	r2, #101	@ 0x65
 8015d82:	f43f ab66 	beq.w	8015452 <_strtod_l+0x272>
 8015d86:	2a45      	cmp	r2, #69	@ 0x45
 8015d88:	f43f ab63 	beq.w	8015452 <_strtod_l+0x272>
 8015d8c:	2301      	movs	r3, #1
 8015d8e:	f7ff bb9e 	b.w	80154ce <_strtod_l+0x2ee>
 8015d92:	bf00      	nop
 8015d94:	f3af 8000 	nop.w
 8015d98:	ffc00000 	.word	0xffc00000
 8015d9c:	41dfffff 	.word	0x41dfffff
 8015da0:	94a03595 	.word	0x94a03595
 8015da4:	3fcfffff 	.word	0x3fcfffff

08015da8 <_strtod_r>:
 8015da8:	4b01      	ldr	r3, [pc, #4]	@ (8015db0 <_strtod_r+0x8>)
 8015daa:	f7ff ba19 	b.w	80151e0 <_strtod_l>
 8015dae:	bf00      	nop
 8015db0:	20001488 	.word	0x20001488

08015db4 <_strtol_l.constprop.0>:
 8015db4:	2b24      	cmp	r3, #36	@ 0x24
 8015db6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015dba:	4686      	mov	lr, r0
 8015dbc:	4690      	mov	r8, r2
 8015dbe:	d801      	bhi.n	8015dc4 <_strtol_l.constprop.0+0x10>
 8015dc0:	2b01      	cmp	r3, #1
 8015dc2:	d106      	bne.n	8015dd2 <_strtol_l.constprop.0+0x1e>
 8015dc4:	f7fd fe34 	bl	8013a30 <__errno>
 8015dc8:	2316      	movs	r3, #22
 8015dca:	6003      	str	r3, [r0, #0]
 8015dcc:	2000      	movs	r0, #0
 8015dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015dd2:	4834      	ldr	r0, [pc, #208]	@ (8015ea4 <_strtol_l.constprop.0+0xf0>)
 8015dd4:	460d      	mov	r5, r1
 8015dd6:	462a      	mov	r2, r5
 8015dd8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015ddc:	5d06      	ldrb	r6, [r0, r4]
 8015dde:	f016 0608 	ands.w	r6, r6, #8
 8015de2:	d1f8      	bne.n	8015dd6 <_strtol_l.constprop.0+0x22>
 8015de4:	2c2d      	cmp	r4, #45	@ 0x2d
 8015de6:	d12d      	bne.n	8015e44 <_strtol_l.constprop.0+0x90>
 8015de8:	782c      	ldrb	r4, [r5, #0]
 8015dea:	2601      	movs	r6, #1
 8015dec:	1c95      	adds	r5, r2, #2
 8015dee:	f033 0210 	bics.w	r2, r3, #16
 8015df2:	d109      	bne.n	8015e08 <_strtol_l.constprop.0+0x54>
 8015df4:	2c30      	cmp	r4, #48	@ 0x30
 8015df6:	d12a      	bne.n	8015e4e <_strtol_l.constprop.0+0x9a>
 8015df8:	782a      	ldrb	r2, [r5, #0]
 8015dfa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8015dfe:	2a58      	cmp	r2, #88	@ 0x58
 8015e00:	d125      	bne.n	8015e4e <_strtol_l.constprop.0+0x9a>
 8015e02:	786c      	ldrb	r4, [r5, #1]
 8015e04:	2310      	movs	r3, #16
 8015e06:	3502      	adds	r5, #2
 8015e08:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8015e0c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8015e10:	2200      	movs	r2, #0
 8015e12:	fbbc f9f3 	udiv	r9, ip, r3
 8015e16:	4610      	mov	r0, r2
 8015e18:	fb03 ca19 	mls	sl, r3, r9, ip
 8015e1c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8015e20:	2f09      	cmp	r7, #9
 8015e22:	d81b      	bhi.n	8015e5c <_strtol_l.constprop.0+0xa8>
 8015e24:	463c      	mov	r4, r7
 8015e26:	42a3      	cmp	r3, r4
 8015e28:	dd27      	ble.n	8015e7a <_strtol_l.constprop.0+0xc6>
 8015e2a:	1c57      	adds	r7, r2, #1
 8015e2c:	d007      	beq.n	8015e3e <_strtol_l.constprop.0+0x8a>
 8015e2e:	4581      	cmp	r9, r0
 8015e30:	d320      	bcc.n	8015e74 <_strtol_l.constprop.0+0xc0>
 8015e32:	d101      	bne.n	8015e38 <_strtol_l.constprop.0+0x84>
 8015e34:	45a2      	cmp	sl, r4
 8015e36:	db1d      	blt.n	8015e74 <_strtol_l.constprop.0+0xc0>
 8015e38:	fb00 4003 	mla	r0, r0, r3, r4
 8015e3c:	2201      	movs	r2, #1
 8015e3e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015e42:	e7eb      	b.n	8015e1c <_strtol_l.constprop.0+0x68>
 8015e44:	2c2b      	cmp	r4, #43	@ 0x2b
 8015e46:	bf04      	itt	eq
 8015e48:	782c      	ldrbeq	r4, [r5, #0]
 8015e4a:	1c95      	addeq	r5, r2, #2
 8015e4c:	e7cf      	b.n	8015dee <_strtol_l.constprop.0+0x3a>
 8015e4e:	2b00      	cmp	r3, #0
 8015e50:	d1da      	bne.n	8015e08 <_strtol_l.constprop.0+0x54>
 8015e52:	2c30      	cmp	r4, #48	@ 0x30
 8015e54:	bf0c      	ite	eq
 8015e56:	2308      	moveq	r3, #8
 8015e58:	230a      	movne	r3, #10
 8015e5a:	e7d5      	b.n	8015e08 <_strtol_l.constprop.0+0x54>
 8015e5c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8015e60:	2f19      	cmp	r7, #25
 8015e62:	d801      	bhi.n	8015e68 <_strtol_l.constprop.0+0xb4>
 8015e64:	3c37      	subs	r4, #55	@ 0x37
 8015e66:	e7de      	b.n	8015e26 <_strtol_l.constprop.0+0x72>
 8015e68:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8015e6c:	2f19      	cmp	r7, #25
 8015e6e:	d804      	bhi.n	8015e7a <_strtol_l.constprop.0+0xc6>
 8015e70:	3c57      	subs	r4, #87	@ 0x57
 8015e72:	e7d8      	b.n	8015e26 <_strtol_l.constprop.0+0x72>
 8015e74:	f04f 32ff 	mov.w	r2, #4294967295
 8015e78:	e7e1      	b.n	8015e3e <_strtol_l.constprop.0+0x8a>
 8015e7a:	1c53      	adds	r3, r2, #1
 8015e7c:	d108      	bne.n	8015e90 <_strtol_l.constprop.0+0xdc>
 8015e7e:	2322      	movs	r3, #34	@ 0x22
 8015e80:	f8ce 3000 	str.w	r3, [lr]
 8015e84:	4660      	mov	r0, ip
 8015e86:	f1b8 0f00 	cmp.w	r8, #0
 8015e8a:	d0a0      	beq.n	8015dce <_strtol_l.constprop.0+0x1a>
 8015e8c:	1e69      	subs	r1, r5, #1
 8015e8e:	e006      	b.n	8015e9e <_strtol_l.constprop.0+0xea>
 8015e90:	b106      	cbz	r6, 8015e94 <_strtol_l.constprop.0+0xe0>
 8015e92:	4240      	negs	r0, r0
 8015e94:	f1b8 0f00 	cmp.w	r8, #0
 8015e98:	d099      	beq.n	8015dce <_strtol_l.constprop.0+0x1a>
 8015e9a:	2a00      	cmp	r2, #0
 8015e9c:	d1f6      	bne.n	8015e8c <_strtol_l.constprop.0+0xd8>
 8015e9e:	f8c8 1000 	str.w	r1, [r8]
 8015ea2:	e794      	b.n	8015dce <_strtol_l.constprop.0+0x1a>
 8015ea4:	0805da19 	.word	0x0805da19

08015ea8 <_strtol_r>:
 8015ea8:	f7ff bf84 	b.w	8015db4 <_strtol_l.constprop.0>

08015eac <__ssputs_r>:
 8015eac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015eb0:	688e      	ldr	r6, [r1, #8]
 8015eb2:	461f      	mov	r7, r3
 8015eb4:	42be      	cmp	r6, r7
 8015eb6:	680b      	ldr	r3, [r1, #0]
 8015eb8:	4682      	mov	sl, r0
 8015eba:	460c      	mov	r4, r1
 8015ebc:	4690      	mov	r8, r2
 8015ebe:	d82d      	bhi.n	8015f1c <__ssputs_r+0x70>
 8015ec0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015ec4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8015ec8:	d026      	beq.n	8015f18 <__ssputs_r+0x6c>
 8015eca:	6965      	ldr	r5, [r4, #20]
 8015ecc:	6909      	ldr	r1, [r1, #16]
 8015ece:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015ed2:	eba3 0901 	sub.w	r9, r3, r1
 8015ed6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015eda:	1c7b      	adds	r3, r7, #1
 8015edc:	444b      	add	r3, r9
 8015ede:	106d      	asrs	r5, r5, #1
 8015ee0:	429d      	cmp	r5, r3
 8015ee2:	bf38      	it	cc
 8015ee4:	461d      	movcc	r5, r3
 8015ee6:	0553      	lsls	r3, r2, #21
 8015ee8:	d527      	bpl.n	8015f3a <__ssputs_r+0x8e>
 8015eea:	4629      	mov	r1, r5
 8015eec:	f7fc fc6a 	bl	80127c4 <_malloc_r>
 8015ef0:	4606      	mov	r6, r0
 8015ef2:	b360      	cbz	r0, 8015f4e <__ssputs_r+0xa2>
 8015ef4:	6921      	ldr	r1, [r4, #16]
 8015ef6:	464a      	mov	r2, r9
 8015ef8:	f7fd fdcf 	bl	8013a9a <memcpy>
 8015efc:	89a3      	ldrh	r3, [r4, #12]
 8015efe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8015f02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015f06:	81a3      	strh	r3, [r4, #12]
 8015f08:	6126      	str	r6, [r4, #16]
 8015f0a:	6165      	str	r5, [r4, #20]
 8015f0c:	444e      	add	r6, r9
 8015f0e:	eba5 0509 	sub.w	r5, r5, r9
 8015f12:	6026      	str	r6, [r4, #0]
 8015f14:	60a5      	str	r5, [r4, #8]
 8015f16:	463e      	mov	r6, r7
 8015f18:	42be      	cmp	r6, r7
 8015f1a:	d900      	bls.n	8015f1e <__ssputs_r+0x72>
 8015f1c:	463e      	mov	r6, r7
 8015f1e:	6820      	ldr	r0, [r4, #0]
 8015f20:	4632      	mov	r2, r6
 8015f22:	4641      	mov	r1, r8
 8015f24:	f000 fd65 	bl	80169f2 <memmove>
 8015f28:	68a3      	ldr	r3, [r4, #8]
 8015f2a:	1b9b      	subs	r3, r3, r6
 8015f2c:	60a3      	str	r3, [r4, #8]
 8015f2e:	6823      	ldr	r3, [r4, #0]
 8015f30:	4433      	add	r3, r6
 8015f32:	6023      	str	r3, [r4, #0]
 8015f34:	2000      	movs	r0, #0
 8015f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015f3a:	462a      	mov	r2, r5
 8015f3c:	f7fc fcce 	bl	80128dc <_realloc_r>
 8015f40:	4606      	mov	r6, r0
 8015f42:	2800      	cmp	r0, #0
 8015f44:	d1e0      	bne.n	8015f08 <__ssputs_r+0x5c>
 8015f46:	6921      	ldr	r1, [r4, #16]
 8015f48:	4650      	mov	r0, sl
 8015f4a:	f7fe fc25 	bl	8014798 <_free_r>
 8015f4e:	230c      	movs	r3, #12
 8015f50:	f8ca 3000 	str.w	r3, [sl]
 8015f54:	89a3      	ldrh	r3, [r4, #12]
 8015f56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015f5a:	81a3      	strh	r3, [r4, #12]
 8015f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8015f60:	e7e9      	b.n	8015f36 <__ssputs_r+0x8a>
	...

08015f64 <_svfiprintf_r>:
 8015f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f68:	4698      	mov	r8, r3
 8015f6a:	898b      	ldrh	r3, [r1, #12]
 8015f6c:	061b      	lsls	r3, r3, #24
 8015f6e:	b09d      	sub	sp, #116	@ 0x74
 8015f70:	4607      	mov	r7, r0
 8015f72:	460d      	mov	r5, r1
 8015f74:	4614      	mov	r4, r2
 8015f76:	d510      	bpl.n	8015f9a <_svfiprintf_r+0x36>
 8015f78:	690b      	ldr	r3, [r1, #16]
 8015f7a:	b973      	cbnz	r3, 8015f9a <_svfiprintf_r+0x36>
 8015f7c:	2140      	movs	r1, #64	@ 0x40
 8015f7e:	f7fc fc21 	bl	80127c4 <_malloc_r>
 8015f82:	6028      	str	r0, [r5, #0]
 8015f84:	6128      	str	r0, [r5, #16]
 8015f86:	b930      	cbnz	r0, 8015f96 <_svfiprintf_r+0x32>
 8015f88:	230c      	movs	r3, #12
 8015f8a:	603b      	str	r3, [r7, #0]
 8015f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8015f90:	b01d      	add	sp, #116	@ 0x74
 8015f92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f96:	2340      	movs	r3, #64	@ 0x40
 8015f98:	616b      	str	r3, [r5, #20]
 8015f9a:	2300      	movs	r3, #0
 8015f9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8015f9e:	2320      	movs	r3, #32
 8015fa0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015fa4:	f8cd 800c 	str.w	r8, [sp, #12]
 8015fa8:	2330      	movs	r3, #48	@ 0x30
 8015faa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8016148 <_svfiprintf_r+0x1e4>
 8015fae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015fb2:	f04f 0901 	mov.w	r9, #1
 8015fb6:	4623      	mov	r3, r4
 8015fb8:	469a      	mov	sl, r3
 8015fba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015fbe:	b10a      	cbz	r2, 8015fc4 <_svfiprintf_r+0x60>
 8015fc0:	2a25      	cmp	r2, #37	@ 0x25
 8015fc2:	d1f9      	bne.n	8015fb8 <_svfiprintf_r+0x54>
 8015fc4:	ebba 0b04 	subs.w	fp, sl, r4
 8015fc8:	d00b      	beq.n	8015fe2 <_svfiprintf_r+0x7e>
 8015fca:	465b      	mov	r3, fp
 8015fcc:	4622      	mov	r2, r4
 8015fce:	4629      	mov	r1, r5
 8015fd0:	4638      	mov	r0, r7
 8015fd2:	f7ff ff6b 	bl	8015eac <__ssputs_r>
 8015fd6:	3001      	adds	r0, #1
 8015fd8:	f000 80a7 	beq.w	801612a <_svfiprintf_r+0x1c6>
 8015fdc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015fde:	445a      	add	r2, fp
 8015fe0:	9209      	str	r2, [sp, #36]	@ 0x24
 8015fe2:	f89a 3000 	ldrb.w	r3, [sl]
 8015fe6:	2b00      	cmp	r3, #0
 8015fe8:	f000 809f 	beq.w	801612a <_svfiprintf_r+0x1c6>
 8015fec:	2300      	movs	r3, #0
 8015fee:	f04f 32ff 	mov.w	r2, #4294967295
 8015ff2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015ff6:	f10a 0a01 	add.w	sl, sl, #1
 8015ffa:	9304      	str	r3, [sp, #16]
 8015ffc:	9307      	str	r3, [sp, #28]
 8015ffe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8016002:	931a      	str	r3, [sp, #104]	@ 0x68
 8016004:	4654      	mov	r4, sl
 8016006:	2205      	movs	r2, #5
 8016008:	f814 1b01 	ldrb.w	r1, [r4], #1
 801600c:	484e      	ldr	r0, [pc, #312]	@ (8016148 <_svfiprintf_r+0x1e4>)
 801600e:	f7ea f90f 	bl	8000230 <memchr>
 8016012:	9a04      	ldr	r2, [sp, #16]
 8016014:	b9d8      	cbnz	r0, 801604e <_svfiprintf_r+0xea>
 8016016:	06d0      	lsls	r0, r2, #27
 8016018:	bf44      	itt	mi
 801601a:	2320      	movmi	r3, #32
 801601c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016020:	0711      	lsls	r1, r2, #28
 8016022:	bf44      	itt	mi
 8016024:	232b      	movmi	r3, #43	@ 0x2b
 8016026:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801602a:	f89a 3000 	ldrb.w	r3, [sl]
 801602e:	2b2a      	cmp	r3, #42	@ 0x2a
 8016030:	d015      	beq.n	801605e <_svfiprintf_r+0xfa>
 8016032:	9a07      	ldr	r2, [sp, #28]
 8016034:	4654      	mov	r4, sl
 8016036:	2000      	movs	r0, #0
 8016038:	f04f 0c0a 	mov.w	ip, #10
 801603c:	4621      	mov	r1, r4
 801603e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016042:	3b30      	subs	r3, #48	@ 0x30
 8016044:	2b09      	cmp	r3, #9
 8016046:	d94b      	bls.n	80160e0 <_svfiprintf_r+0x17c>
 8016048:	b1b0      	cbz	r0, 8016078 <_svfiprintf_r+0x114>
 801604a:	9207      	str	r2, [sp, #28]
 801604c:	e014      	b.n	8016078 <_svfiprintf_r+0x114>
 801604e:	eba0 0308 	sub.w	r3, r0, r8
 8016052:	fa09 f303 	lsl.w	r3, r9, r3
 8016056:	4313      	orrs	r3, r2
 8016058:	9304      	str	r3, [sp, #16]
 801605a:	46a2      	mov	sl, r4
 801605c:	e7d2      	b.n	8016004 <_svfiprintf_r+0xa0>
 801605e:	9b03      	ldr	r3, [sp, #12]
 8016060:	1d19      	adds	r1, r3, #4
 8016062:	681b      	ldr	r3, [r3, #0]
 8016064:	9103      	str	r1, [sp, #12]
 8016066:	2b00      	cmp	r3, #0
 8016068:	bfbb      	ittet	lt
 801606a:	425b      	neglt	r3, r3
 801606c:	f042 0202 	orrlt.w	r2, r2, #2
 8016070:	9307      	strge	r3, [sp, #28]
 8016072:	9307      	strlt	r3, [sp, #28]
 8016074:	bfb8      	it	lt
 8016076:	9204      	strlt	r2, [sp, #16]
 8016078:	7823      	ldrb	r3, [r4, #0]
 801607a:	2b2e      	cmp	r3, #46	@ 0x2e
 801607c:	d10a      	bne.n	8016094 <_svfiprintf_r+0x130>
 801607e:	7863      	ldrb	r3, [r4, #1]
 8016080:	2b2a      	cmp	r3, #42	@ 0x2a
 8016082:	d132      	bne.n	80160ea <_svfiprintf_r+0x186>
 8016084:	9b03      	ldr	r3, [sp, #12]
 8016086:	1d1a      	adds	r2, r3, #4
 8016088:	681b      	ldr	r3, [r3, #0]
 801608a:	9203      	str	r2, [sp, #12]
 801608c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016090:	3402      	adds	r4, #2
 8016092:	9305      	str	r3, [sp, #20]
 8016094:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8016158 <_svfiprintf_r+0x1f4>
 8016098:	7821      	ldrb	r1, [r4, #0]
 801609a:	2203      	movs	r2, #3
 801609c:	4650      	mov	r0, sl
 801609e:	f7ea f8c7 	bl	8000230 <memchr>
 80160a2:	b138      	cbz	r0, 80160b4 <_svfiprintf_r+0x150>
 80160a4:	9b04      	ldr	r3, [sp, #16]
 80160a6:	eba0 000a 	sub.w	r0, r0, sl
 80160aa:	2240      	movs	r2, #64	@ 0x40
 80160ac:	4082      	lsls	r2, r0
 80160ae:	4313      	orrs	r3, r2
 80160b0:	3401      	adds	r4, #1
 80160b2:	9304      	str	r3, [sp, #16]
 80160b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80160b8:	4824      	ldr	r0, [pc, #144]	@ (801614c <_svfiprintf_r+0x1e8>)
 80160ba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80160be:	2206      	movs	r2, #6
 80160c0:	f7ea f8b6 	bl	8000230 <memchr>
 80160c4:	2800      	cmp	r0, #0
 80160c6:	d036      	beq.n	8016136 <_svfiprintf_r+0x1d2>
 80160c8:	4b21      	ldr	r3, [pc, #132]	@ (8016150 <_svfiprintf_r+0x1ec>)
 80160ca:	bb1b      	cbnz	r3, 8016114 <_svfiprintf_r+0x1b0>
 80160cc:	9b03      	ldr	r3, [sp, #12]
 80160ce:	3307      	adds	r3, #7
 80160d0:	f023 0307 	bic.w	r3, r3, #7
 80160d4:	3308      	adds	r3, #8
 80160d6:	9303      	str	r3, [sp, #12]
 80160d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80160da:	4433      	add	r3, r6
 80160dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80160de:	e76a      	b.n	8015fb6 <_svfiprintf_r+0x52>
 80160e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80160e4:	460c      	mov	r4, r1
 80160e6:	2001      	movs	r0, #1
 80160e8:	e7a8      	b.n	801603c <_svfiprintf_r+0xd8>
 80160ea:	2300      	movs	r3, #0
 80160ec:	3401      	adds	r4, #1
 80160ee:	9305      	str	r3, [sp, #20]
 80160f0:	4619      	mov	r1, r3
 80160f2:	f04f 0c0a 	mov.w	ip, #10
 80160f6:	4620      	mov	r0, r4
 80160f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80160fc:	3a30      	subs	r2, #48	@ 0x30
 80160fe:	2a09      	cmp	r2, #9
 8016100:	d903      	bls.n	801610a <_svfiprintf_r+0x1a6>
 8016102:	2b00      	cmp	r3, #0
 8016104:	d0c6      	beq.n	8016094 <_svfiprintf_r+0x130>
 8016106:	9105      	str	r1, [sp, #20]
 8016108:	e7c4      	b.n	8016094 <_svfiprintf_r+0x130>
 801610a:	fb0c 2101 	mla	r1, ip, r1, r2
 801610e:	4604      	mov	r4, r0
 8016110:	2301      	movs	r3, #1
 8016112:	e7f0      	b.n	80160f6 <_svfiprintf_r+0x192>
 8016114:	ab03      	add	r3, sp, #12
 8016116:	9300      	str	r3, [sp, #0]
 8016118:	462a      	mov	r2, r5
 801611a:	4b0e      	ldr	r3, [pc, #56]	@ (8016154 <_svfiprintf_r+0x1f0>)
 801611c:	a904      	add	r1, sp, #16
 801611e:	4638      	mov	r0, r7
 8016120:	f7fc fcaa 	bl	8012a78 <_printf_float>
 8016124:	1c42      	adds	r2, r0, #1
 8016126:	4606      	mov	r6, r0
 8016128:	d1d6      	bne.n	80160d8 <_svfiprintf_r+0x174>
 801612a:	89ab      	ldrh	r3, [r5, #12]
 801612c:	065b      	lsls	r3, r3, #25
 801612e:	f53f af2d 	bmi.w	8015f8c <_svfiprintf_r+0x28>
 8016132:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016134:	e72c      	b.n	8015f90 <_svfiprintf_r+0x2c>
 8016136:	ab03      	add	r3, sp, #12
 8016138:	9300      	str	r3, [sp, #0]
 801613a:	462a      	mov	r2, r5
 801613c:	4b05      	ldr	r3, [pc, #20]	@ (8016154 <_svfiprintf_r+0x1f0>)
 801613e:	a904      	add	r1, sp, #16
 8016140:	4638      	mov	r0, r7
 8016142:	f7fc ff31 	bl	8012fa8 <_printf_i>
 8016146:	e7ed      	b.n	8016124 <_svfiprintf_r+0x1c0>
 8016148:	0805db19 	.word	0x0805db19
 801614c:	0805db23 	.word	0x0805db23
 8016150:	08012a79 	.word	0x08012a79
 8016154:	08015ead 	.word	0x08015ead
 8016158:	0805db1f 	.word	0x0805db1f

0801615c <_sungetc_r>:
 801615c:	b538      	push	{r3, r4, r5, lr}
 801615e:	1c4b      	adds	r3, r1, #1
 8016160:	4614      	mov	r4, r2
 8016162:	d103      	bne.n	801616c <_sungetc_r+0x10>
 8016164:	f04f 35ff 	mov.w	r5, #4294967295
 8016168:	4628      	mov	r0, r5
 801616a:	bd38      	pop	{r3, r4, r5, pc}
 801616c:	8993      	ldrh	r3, [r2, #12]
 801616e:	f023 0320 	bic.w	r3, r3, #32
 8016172:	8193      	strh	r3, [r2, #12]
 8016174:	6853      	ldr	r3, [r2, #4]
 8016176:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8016178:	b2cd      	uxtb	r5, r1
 801617a:	b18a      	cbz	r2, 80161a0 <_sungetc_r+0x44>
 801617c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 801617e:	429a      	cmp	r2, r3
 8016180:	dd08      	ble.n	8016194 <_sungetc_r+0x38>
 8016182:	6823      	ldr	r3, [r4, #0]
 8016184:	1e5a      	subs	r2, r3, #1
 8016186:	6022      	str	r2, [r4, #0]
 8016188:	f803 5c01 	strb.w	r5, [r3, #-1]
 801618c:	6863      	ldr	r3, [r4, #4]
 801618e:	3301      	adds	r3, #1
 8016190:	6063      	str	r3, [r4, #4]
 8016192:	e7e9      	b.n	8016168 <_sungetc_r+0xc>
 8016194:	4621      	mov	r1, r4
 8016196:	f000 fbf2 	bl	801697e <__submore>
 801619a:	2800      	cmp	r0, #0
 801619c:	d0f1      	beq.n	8016182 <_sungetc_r+0x26>
 801619e:	e7e1      	b.n	8016164 <_sungetc_r+0x8>
 80161a0:	6921      	ldr	r1, [r4, #16]
 80161a2:	6822      	ldr	r2, [r4, #0]
 80161a4:	b141      	cbz	r1, 80161b8 <_sungetc_r+0x5c>
 80161a6:	4291      	cmp	r1, r2
 80161a8:	d206      	bcs.n	80161b8 <_sungetc_r+0x5c>
 80161aa:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80161ae:	42a9      	cmp	r1, r5
 80161b0:	d102      	bne.n	80161b8 <_sungetc_r+0x5c>
 80161b2:	3a01      	subs	r2, #1
 80161b4:	6022      	str	r2, [r4, #0]
 80161b6:	e7ea      	b.n	801618e <_sungetc_r+0x32>
 80161b8:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 80161bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80161c0:	6363      	str	r3, [r4, #52]	@ 0x34
 80161c2:	2303      	movs	r3, #3
 80161c4:	63a3      	str	r3, [r4, #56]	@ 0x38
 80161c6:	4623      	mov	r3, r4
 80161c8:	f803 5f46 	strb.w	r5, [r3, #70]!
 80161cc:	6023      	str	r3, [r4, #0]
 80161ce:	2301      	movs	r3, #1
 80161d0:	e7de      	b.n	8016190 <_sungetc_r+0x34>

080161d2 <__ssrefill_r>:
 80161d2:	b510      	push	{r4, lr}
 80161d4:	460c      	mov	r4, r1
 80161d6:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80161d8:	b169      	cbz	r1, 80161f6 <__ssrefill_r+0x24>
 80161da:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80161de:	4299      	cmp	r1, r3
 80161e0:	d001      	beq.n	80161e6 <__ssrefill_r+0x14>
 80161e2:	f7fe fad9 	bl	8014798 <_free_r>
 80161e6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80161e8:	6063      	str	r3, [r4, #4]
 80161ea:	2000      	movs	r0, #0
 80161ec:	6360      	str	r0, [r4, #52]	@ 0x34
 80161ee:	b113      	cbz	r3, 80161f6 <__ssrefill_r+0x24>
 80161f0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80161f2:	6023      	str	r3, [r4, #0]
 80161f4:	bd10      	pop	{r4, pc}
 80161f6:	6923      	ldr	r3, [r4, #16]
 80161f8:	6023      	str	r3, [r4, #0]
 80161fa:	2300      	movs	r3, #0
 80161fc:	6063      	str	r3, [r4, #4]
 80161fe:	89a3      	ldrh	r3, [r4, #12]
 8016200:	f043 0320 	orr.w	r3, r3, #32
 8016204:	81a3      	strh	r3, [r4, #12]
 8016206:	f04f 30ff 	mov.w	r0, #4294967295
 801620a:	e7f3      	b.n	80161f4 <__ssrefill_r+0x22>

0801620c <__ssvfiscanf_r>:
 801620c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016210:	460c      	mov	r4, r1
 8016212:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8016216:	2100      	movs	r1, #0
 8016218:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 801621c:	49a5      	ldr	r1, [pc, #660]	@ (80164b4 <__ssvfiscanf_r+0x2a8>)
 801621e:	91a0      	str	r1, [sp, #640]	@ 0x280
 8016220:	f10d 0804 	add.w	r8, sp, #4
 8016224:	49a4      	ldr	r1, [pc, #656]	@ (80164b8 <__ssvfiscanf_r+0x2ac>)
 8016226:	4fa5      	ldr	r7, [pc, #660]	@ (80164bc <__ssvfiscanf_r+0x2b0>)
 8016228:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 801622c:	4606      	mov	r6, r0
 801622e:	91a1      	str	r1, [sp, #644]	@ 0x284
 8016230:	9300      	str	r3, [sp, #0]
 8016232:	7813      	ldrb	r3, [r2, #0]
 8016234:	2b00      	cmp	r3, #0
 8016236:	f000 8158 	beq.w	80164ea <__ssvfiscanf_r+0x2de>
 801623a:	5cf9      	ldrb	r1, [r7, r3]
 801623c:	f011 0108 	ands.w	r1, r1, #8
 8016240:	f102 0501 	add.w	r5, r2, #1
 8016244:	d019      	beq.n	801627a <__ssvfiscanf_r+0x6e>
 8016246:	6863      	ldr	r3, [r4, #4]
 8016248:	2b00      	cmp	r3, #0
 801624a:	dd0f      	ble.n	801626c <__ssvfiscanf_r+0x60>
 801624c:	6823      	ldr	r3, [r4, #0]
 801624e:	781a      	ldrb	r2, [r3, #0]
 8016250:	5cba      	ldrb	r2, [r7, r2]
 8016252:	0712      	lsls	r2, r2, #28
 8016254:	d401      	bmi.n	801625a <__ssvfiscanf_r+0x4e>
 8016256:	462a      	mov	r2, r5
 8016258:	e7eb      	b.n	8016232 <__ssvfiscanf_r+0x26>
 801625a:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801625c:	3201      	adds	r2, #1
 801625e:	9245      	str	r2, [sp, #276]	@ 0x114
 8016260:	6862      	ldr	r2, [r4, #4]
 8016262:	3301      	adds	r3, #1
 8016264:	3a01      	subs	r2, #1
 8016266:	6062      	str	r2, [r4, #4]
 8016268:	6023      	str	r3, [r4, #0]
 801626a:	e7ec      	b.n	8016246 <__ssvfiscanf_r+0x3a>
 801626c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801626e:	4621      	mov	r1, r4
 8016270:	4630      	mov	r0, r6
 8016272:	4798      	blx	r3
 8016274:	2800      	cmp	r0, #0
 8016276:	d0e9      	beq.n	801624c <__ssvfiscanf_r+0x40>
 8016278:	e7ed      	b.n	8016256 <__ssvfiscanf_r+0x4a>
 801627a:	2b25      	cmp	r3, #37	@ 0x25
 801627c:	d012      	beq.n	80162a4 <__ssvfiscanf_r+0x98>
 801627e:	4699      	mov	r9, r3
 8016280:	6863      	ldr	r3, [r4, #4]
 8016282:	2b00      	cmp	r3, #0
 8016284:	f340 8093 	ble.w	80163ae <__ssvfiscanf_r+0x1a2>
 8016288:	6822      	ldr	r2, [r4, #0]
 801628a:	7813      	ldrb	r3, [r2, #0]
 801628c:	454b      	cmp	r3, r9
 801628e:	f040 812c 	bne.w	80164ea <__ssvfiscanf_r+0x2de>
 8016292:	6863      	ldr	r3, [r4, #4]
 8016294:	3b01      	subs	r3, #1
 8016296:	6063      	str	r3, [r4, #4]
 8016298:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 801629a:	3201      	adds	r2, #1
 801629c:	3301      	adds	r3, #1
 801629e:	6022      	str	r2, [r4, #0]
 80162a0:	9345      	str	r3, [sp, #276]	@ 0x114
 80162a2:	e7d8      	b.n	8016256 <__ssvfiscanf_r+0x4a>
 80162a4:	9141      	str	r1, [sp, #260]	@ 0x104
 80162a6:	9143      	str	r1, [sp, #268]	@ 0x10c
 80162a8:	7853      	ldrb	r3, [r2, #1]
 80162aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80162ac:	bf02      	ittt	eq
 80162ae:	2310      	moveq	r3, #16
 80162b0:	1c95      	addeq	r5, r2, #2
 80162b2:	9341      	streq	r3, [sp, #260]	@ 0x104
 80162b4:	220a      	movs	r2, #10
 80162b6:	46a9      	mov	r9, r5
 80162b8:	f819 1b01 	ldrb.w	r1, [r9], #1
 80162bc:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80162c0:	2b09      	cmp	r3, #9
 80162c2:	d91e      	bls.n	8016302 <__ssvfiscanf_r+0xf6>
 80162c4:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 80164c0 <__ssvfiscanf_r+0x2b4>
 80162c8:	2203      	movs	r2, #3
 80162ca:	4650      	mov	r0, sl
 80162cc:	f7e9 ffb0 	bl	8000230 <memchr>
 80162d0:	b138      	cbz	r0, 80162e2 <__ssvfiscanf_r+0xd6>
 80162d2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80162d4:	eba0 000a 	sub.w	r0, r0, sl
 80162d8:	2301      	movs	r3, #1
 80162da:	4083      	lsls	r3, r0
 80162dc:	4313      	orrs	r3, r2
 80162de:	9341      	str	r3, [sp, #260]	@ 0x104
 80162e0:	464d      	mov	r5, r9
 80162e2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80162e6:	2b78      	cmp	r3, #120	@ 0x78
 80162e8:	d806      	bhi.n	80162f8 <__ssvfiscanf_r+0xec>
 80162ea:	2b57      	cmp	r3, #87	@ 0x57
 80162ec:	d810      	bhi.n	8016310 <__ssvfiscanf_r+0x104>
 80162ee:	2b25      	cmp	r3, #37	@ 0x25
 80162f0:	d0c5      	beq.n	801627e <__ssvfiscanf_r+0x72>
 80162f2:	d857      	bhi.n	80163a4 <__ssvfiscanf_r+0x198>
 80162f4:	2b00      	cmp	r3, #0
 80162f6:	d065      	beq.n	80163c4 <__ssvfiscanf_r+0x1b8>
 80162f8:	2303      	movs	r3, #3
 80162fa:	9347      	str	r3, [sp, #284]	@ 0x11c
 80162fc:	230a      	movs	r3, #10
 80162fe:	9342      	str	r3, [sp, #264]	@ 0x108
 8016300:	e078      	b.n	80163f4 <__ssvfiscanf_r+0x1e8>
 8016302:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8016304:	fb02 1103 	mla	r1, r2, r3, r1
 8016308:	3930      	subs	r1, #48	@ 0x30
 801630a:	9143      	str	r1, [sp, #268]	@ 0x10c
 801630c:	464d      	mov	r5, r9
 801630e:	e7d2      	b.n	80162b6 <__ssvfiscanf_r+0xaa>
 8016310:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8016314:	2a20      	cmp	r2, #32
 8016316:	d8ef      	bhi.n	80162f8 <__ssvfiscanf_r+0xec>
 8016318:	a101      	add	r1, pc, #4	@ (adr r1, 8016320 <__ssvfiscanf_r+0x114>)
 801631a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801631e:	bf00      	nop
 8016320:	080163d3 	.word	0x080163d3
 8016324:	080162f9 	.word	0x080162f9
 8016328:	080162f9 	.word	0x080162f9
 801632c:	0801642d 	.word	0x0801642d
 8016330:	080162f9 	.word	0x080162f9
 8016334:	080162f9 	.word	0x080162f9
 8016338:	080162f9 	.word	0x080162f9
 801633c:	080162f9 	.word	0x080162f9
 8016340:	080162f9 	.word	0x080162f9
 8016344:	080162f9 	.word	0x080162f9
 8016348:	080162f9 	.word	0x080162f9
 801634c:	08016443 	.word	0x08016443
 8016350:	08016429 	.word	0x08016429
 8016354:	080163ab 	.word	0x080163ab
 8016358:	080163ab 	.word	0x080163ab
 801635c:	080163ab 	.word	0x080163ab
 8016360:	080162f9 	.word	0x080162f9
 8016364:	080163e5 	.word	0x080163e5
 8016368:	080162f9 	.word	0x080162f9
 801636c:	080162f9 	.word	0x080162f9
 8016370:	080162f9 	.word	0x080162f9
 8016374:	080162f9 	.word	0x080162f9
 8016378:	08016453 	.word	0x08016453
 801637c:	080163ed 	.word	0x080163ed
 8016380:	080163cb 	.word	0x080163cb
 8016384:	080162f9 	.word	0x080162f9
 8016388:	080162f9 	.word	0x080162f9
 801638c:	0801644f 	.word	0x0801644f
 8016390:	080162f9 	.word	0x080162f9
 8016394:	08016429 	.word	0x08016429
 8016398:	080162f9 	.word	0x080162f9
 801639c:	080162f9 	.word	0x080162f9
 80163a0:	080163d3 	.word	0x080163d3
 80163a4:	3b45      	subs	r3, #69	@ 0x45
 80163a6:	2b02      	cmp	r3, #2
 80163a8:	d8a6      	bhi.n	80162f8 <__ssvfiscanf_r+0xec>
 80163aa:	2305      	movs	r3, #5
 80163ac:	e021      	b.n	80163f2 <__ssvfiscanf_r+0x1e6>
 80163ae:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80163b0:	4621      	mov	r1, r4
 80163b2:	4630      	mov	r0, r6
 80163b4:	4798      	blx	r3
 80163b6:	2800      	cmp	r0, #0
 80163b8:	f43f af66 	beq.w	8016288 <__ssvfiscanf_r+0x7c>
 80163bc:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80163be:	2800      	cmp	r0, #0
 80163c0:	f040 808b 	bne.w	80164da <__ssvfiscanf_r+0x2ce>
 80163c4:	f04f 30ff 	mov.w	r0, #4294967295
 80163c8:	e08b      	b.n	80164e2 <__ssvfiscanf_r+0x2d6>
 80163ca:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80163cc:	f042 0220 	orr.w	r2, r2, #32
 80163d0:	9241      	str	r2, [sp, #260]	@ 0x104
 80163d2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80163d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80163d8:	9241      	str	r2, [sp, #260]	@ 0x104
 80163da:	2210      	movs	r2, #16
 80163dc:	2b6e      	cmp	r3, #110	@ 0x6e
 80163de:	9242      	str	r2, [sp, #264]	@ 0x108
 80163e0:	d902      	bls.n	80163e8 <__ssvfiscanf_r+0x1dc>
 80163e2:	e005      	b.n	80163f0 <__ssvfiscanf_r+0x1e4>
 80163e4:	2300      	movs	r3, #0
 80163e6:	9342      	str	r3, [sp, #264]	@ 0x108
 80163e8:	2303      	movs	r3, #3
 80163ea:	e002      	b.n	80163f2 <__ssvfiscanf_r+0x1e6>
 80163ec:	2308      	movs	r3, #8
 80163ee:	9342      	str	r3, [sp, #264]	@ 0x108
 80163f0:	2304      	movs	r3, #4
 80163f2:	9347      	str	r3, [sp, #284]	@ 0x11c
 80163f4:	6863      	ldr	r3, [r4, #4]
 80163f6:	2b00      	cmp	r3, #0
 80163f8:	dd39      	ble.n	801646e <__ssvfiscanf_r+0x262>
 80163fa:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80163fc:	0659      	lsls	r1, r3, #25
 80163fe:	d404      	bmi.n	801640a <__ssvfiscanf_r+0x1fe>
 8016400:	6823      	ldr	r3, [r4, #0]
 8016402:	781a      	ldrb	r2, [r3, #0]
 8016404:	5cba      	ldrb	r2, [r7, r2]
 8016406:	0712      	lsls	r2, r2, #28
 8016408:	d438      	bmi.n	801647c <__ssvfiscanf_r+0x270>
 801640a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 801640c:	2b02      	cmp	r3, #2
 801640e:	dc47      	bgt.n	80164a0 <__ssvfiscanf_r+0x294>
 8016410:	466b      	mov	r3, sp
 8016412:	4622      	mov	r2, r4
 8016414:	a941      	add	r1, sp, #260	@ 0x104
 8016416:	4630      	mov	r0, r6
 8016418:	f000 f86c 	bl	80164f4 <_scanf_chars>
 801641c:	2801      	cmp	r0, #1
 801641e:	d064      	beq.n	80164ea <__ssvfiscanf_r+0x2de>
 8016420:	2802      	cmp	r0, #2
 8016422:	f47f af18 	bne.w	8016256 <__ssvfiscanf_r+0x4a>
 8016426:	e7c9      	b.n	80163bc <__ssvfiscanf_r+0x1b0>
 8016428:	220a      	movs	r2, #10
 801642a:	e7d7      	b.n	80163dc <__ssvfiscanf_r+0x1d0>
 801642c:	4629      	mov	r1, r5
 801642e:	4640      	mov	r0, r8
 8016430:	f000 fa6c 	bl	801690c <__sccl>
 8016434:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8016436:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801643a:	9341      	str	r3, [sp, #260]	@ 0x104
 801643c:	4605      	mov	r5, r0
 801643e:	2301      	movs	r3, #1
 8016440:	e7d7      	b.n	80163f2 <__ssvfiscanf_r+0x1e6>
 8016442:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8016444:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016448:	9341      	str	r3, [sp, #260]	@ 0x104
 801644a:	2300      	movs	r3, #0
 801644c:	e7d1      	b.n	80163f2 <__ssvfiscanf_r+0x1e6>
 801644e:	2302      	movs	r3, #2
 8016450:	e7cf      	b.n	80163f2 <__ssvfiscanf_r+0x1e6>
 8016452:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8016454:	06c3      	lsls	r3, r0, #27
 8016456:	f53f aefe 	bmi.w	8016256 <__ssvfiscanf_r+0x4a>
 801645a:	9b00      	ldr	r3, [sp, #0]
 801645c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801645e:	1d19      	adds	r1, r3, #4
 8016460:	9100      	str	r1, [sp, #0]
 8016462:	681b      	ldr	r3, [r3, #0]
 8016464:	07c0      	lsls	r0, r0, #31
 8016466:	bf4c      	ite	mi
 8016468:	801a      	strhmi	r2, [r3, #0]
 801646a:	601a      	strpl	r2, [r3, #0]
 801646c:	e6f3      	b.n	8016256 <__ssvfiscanf_r+0x4a>
 801646e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8016470:	4621      	mov	r1, r4
 8016472:	4630      	mov	r0, r6
 8016474:	4798      	blx	r3
 8016476:	2800      	cmp	r0, #0
 8016478:	d0bf      	beq.n	80163fa <__ssvfiscanf_r+0x1ee>
 801647a:	e79f      	b.n	80163bc <__ssvfiscanf_r+0x1b0>
 801647c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801647e:	3201      	adds	r2, #1
 8016480:	9245      	str	r2, [sp, #276]	@ 0x114
 8016482:	6862      	ldr	r2, [r4, #4]
 8016484:	3a01      	subs	r2, #1
 8016486:	2a00      	cmp	r2, #0
 8016488:	6062      	str	r2, [r4, #4]
 801648a:	dd02      	ble.n	8016492 <__ssvfiscanf_r+0x286>
 801648c:	3301      	adds	r3, #1
 801648e:	6023      	str	r3, [r4, #0]
 8016490:	e7b6      	b.n	8016400 <__ssvfiscanf_r+0x1f4>
 8016492:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8016494:	4621      	mov	r1, r4
 8016496:	4630      	mov	r0, r6
 8016498:	4798      	blx	r3
 801649a:	2800      	cmp	r0, #0
 801649c:	d0b0      	beq.n	8016400 <__ssvfiscanf_r+0x1f4>
 801649e:	e78d      	b.n	80163bc <__ssvfiscanf_r+0x1b0>
 80164a0:	2b04      	cmp	r3, #4
 80164a2:	dc0f      	bgt.n	80164c4 <__ssvfiscanf_r+0x2b8>
 80164a4:	466b      	mov	r3, sp
 80164a6:	4622      	mov	r2, r4
 80164a8:	a941      	add	r1, sp, #260	@ 0x104
 80164aa:	4630      	mov	r0, r6
 80164ac:	f000 f87c 	bl	80165a8 <_scanf_i>
 80164b0:	e7b4      	b.n	801641c <__ssvfiscanf_r+0x210>
 80164b2:	bf00      	nop
 80164b4:	0801615d 	.word	0x0801615d
 80164b8:	080161d3 	.word	0x080161d3
 80164bc:	0805da19 	.word	0x0805da19
 80164c0:	0805db1f 	.word	0x0805db1f
 80164c4:	4b0a      	ldr	r3, [pc, #40]	@ (80164f0 <__ssvfiscanf_r+0x2e4>)
 80164c6:	2b00      	cmp	r3, #0
 80164c8:	f43f aec5 	beq.w	8016256 <__ssvfiscanf_r+0x4a>
 80164cc:	466b      	mov	r3, sp
 80164ce:	4622      	mov	r2, r4
 80164d0:	a941      	add	r1, sp, #260	@ 0x104
 80164d2:	4630      	mov	r0, r6
 80164d4:	f7fc fe88 	bl	80131e8 <_scanf_float>
 80164d8:	e7a0      	b.n	801641c <__ssvfiscanf_r+0x210>
 80164da:	89a3      	ldrh	r3, [r4, #12]
 80164dc:	065b      	lsls	r3, r3, #25
 80164de:	f53f af71 	bmi.w	80163c4 <__ssvfiscanf_r+0x1b8>
 80164e2:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 80164e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80164ea:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80164ec:	e7f9      	b.n	80164e2 <__ssvfiscanf_r+0x2d6>
 80164ee:	bf00      	nop
 80164f0:	080131e9 	.word	0x080131e9

080164f4 <_scanf_chars>:
 80164f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80164f8:	4615      	mov	r5, r2
 80164fa:	688a      	ldr	r2, [r1, #8]
 80164fc:	4680      	mov	r8, r0
 80164fe:	460c      	mov	r4, r1
 8016500:	b932      	cbnz	r2, 8016510 <_scanf_chars+0x1c>
 8016502:	698a      	ldr	r2, [r1, #24]
 8016504:	2a00      	cmp	r2, #0
 8016506:	bf14      	ite	ne
 8016508:	f04f 32ff 	movne.w	r2, #4294967295
 801650c:	2201      	moveq	r2, #1
 801650e:	608a      	str	r2, [r1, #8]
 8016510:	6822      	ldr	r2, [r4, #0]
 8016512:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 80165a4 <_scanf_chars+0xb0>
 8016516:	06d1      	lsls	r1, r2, #27
 8016518:	bf5f      	itttt	pl
 801651a:	681a      	ldrpl	r2, [r3, #0]
 801651c:	1d11      	addpl	r1, r2, #4
 801651e:	6019      	strpl	r1, [r3, #0]
 8016520:	6816      	ldrpl	r6, [r2, #0]
 8016522:	2700      	movs	r7, #0
 8016524:	69a0      	ldr	r0, [r4, #24]
 8016526:	b188      	cbz	r0, 801654c <_scanf_chars+0x58>
 8016528:	2801      	cmp	r0, #1
 801652a:	d107      	bne.n	801653c <_scanf_chars+0x48>
 801652c:	682b      	ldr	r3, [r5, #0]
 801652e:	781a      	ldrb	r2, [r3, #0]
 8016530:	6963      	ldr	r3, [r4, #20]
 8016532:	5c9b      	ldrb	r3, [r3, r2]
 8016534:	b953      	cbnz	r3, 801654c <_scanf_chars+0x58>
 8016536:	2f00      	cmp	r7, #0
 8016538:	d031      	beq.n	801659e <_scanf_chars+0xaa>
 801653a:	e022      	b.n	8016582 <_scanf_chars+0x8e>
 801653c:	2802      	cmp	r0, #2
 801653e:	d120      	bne.n	8016582 <_scanf_chars+0x8e>
 8016540:	682b      	ldr	r3, [r5, #0]
 8016542:	781b      	ldrb	r3, [r3, #0]
 8016544:	f819 3003 	ldrb.w	r3, [r9, r3]
 8016548:	071b      	lsls	r3, r3, #28
 801654a:	d41a      	bmi.n	8016582 <_scanf_chars+0x8e>
 801654c:	6823      	ldr	r3, [r4, #0]
 801654e:	06da      	lsls	r2, r3, #27
 8016550:	bf5e      	ittt	pl
 8016552:	682b      	ldrpl	r3, [r5, #0]
 8016554:	781b      	ldrbpl	r3, [r3, #0]
 8016556:	f806 3b01 	strbpl.w	r3, [r6], #1
 801655a:	682a      	ldr	r2, [r5, #0]
 801655c:	686b      	ldr	r3, [r5, #4]
 801655e:	3201      	adds	r2, #1
 8016560:	602a      	str	r2, [r5, #0]
 8016562:	68a2      	ldr	r2, [r4, #8]
 8016564:	3b01      	subs	r3, #1
 8016566:	3a01      	subs	r2, #1
 8016568:	606b      	str	r3, [r5, #4]
 801656a:	3701      	adds	r7, #1
 801656c:	60a2      	str	r2, [r4, #8]
 801656e:	b142      	cbz	r2, 8016582 <_scanf_chars+0x8e>
 8016570:	2b00      	cmp	r3, #0
 8016572:	dcd7      	bgt.n	8016524 <_scanf_chars+0x30>
 8016574:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8016578:	4629      	mov	r1, r5
 801657a:	4640      	mov	r0, r8
 801657c:	4798      	blx	r3
 801657e:	2800      	cmp	r0, #0
 8016580:	d0d0      	beq.n	8016524 <_scanf_chars+0x30>
 8016582:	6823      	ldr	r3, [r4, #0]
 8016584:	f013 0310 	ands.w	r3, r3, #16
 8016588:	d105      	bne.n	8016596 <_scanf_chars+0xa2>
 801658a:	68e2      	ldr	r2, [r4, #12]
 801658c:	3201      	adds	r2, #1
 801658e:	60e2      	str	r2, [r4, #12]
 8016590:	69a2      	ldr	r2, [r4, #24]
 8016592:	b102      	cbz	r2, 8016596 <_scanf_chars+0xa2>
 8016594:	7033      	strb	r3, [r6, #0]
 8016596:	6923      	ldr	r3, [r4, #16]
 8016598:	443b      	add	r3, r7
 801659a:	6123      	str	r3, [r4, #16]
 801659c:	2000      	movs	r0, #0
 801659e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80165a2:	bf00      	nop
 80165a4:	0805da19 	.word	0x0805da19

080165a8 <_scanf_i>:
 80165a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165ac:	4698      	mov	r8, r3
 80165ae:	4b74      	ldr	r3, [pc, #464]	@ (8016780 <_scanf_i+0x1d8>)
 80165b0:	460c      	mov	r4, r1
 80165b2:	4682      	mov	sl, r0
 80165b4:	4616      	mov	r6, r2
 80165b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80165ba:	b087      	sub	sp, #28
 80165bc:	ab03      	add	r3, sp, #12
 80165be:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80165c2:	4b70      	ldr	r3, [pc, #448]	@ (8016784 <_scanf_i+0x1dc>)
 80165c4:	69a1      	ldr	r1, [r4, #24]
 80165c6:	4a70      	ldr	r2, [pc, #448]	@ (8016788 <_scanf_i+0x1e0>)
 80165c8:	2903      	cmp	r1, #3
 80165ca:	bf08      	it	eq
 80165cc:	461a      	moveq	r2, r3
 80165ce:	68a3      	ldr	r3, [r4, #8]
 80165d0:	9201      	str	r2, [sp, #4]
 80165d2:	1e5a      	subs	r2, r3, #1
 80165d4:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80165d8:	bf88      	it	hi
 80165da:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80165de:	4627      	mov	r7, r4
 80165e0:	bf82      	ittt	hi
 80165e2:	eb03 0905 	addhi.w	r9, r3, r5
 80165e6:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80165ea:	60a3      	strhi	r3, [r4, #8]
 80165ec:	f857 3b1c 	ldr.w	r3, [r7], #28
 80165f0:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 80165f4:	bf98      	it	ls
 80165f6:	f04f 0900 	movls.w	r9, #0
 80165fa:	6023      	str	r3, [r4, #0]
 80165fc:	463d      	mov	r5, r7
 80165fe:	f04f 0b00 	mov.w	fp, #0
 8016602:	6831      	ldr	r1, [r6, #0]
 8016604:	ab03      	add	r3, sp, #12
 8016606:	7809      	ldrb	r1, [r1, #0]
 8016608:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801660c:	2202      	movs	r2, #2
 801660e:	f7e9 fe0f 	bl	8000230 <memchr>
 8016612:	b328      	cbz	r0, 8016660 <_scanf_i+0xb8>
 8016614:	f1bb 0f01 	cmp.w	fp, #1
 8016618:	d159      	bne.n	80166ce <_scanf_i+0x126>
 801661a:	6862      	ldr	r2, [r4, #4]
 801661c:	b92a      	cbnz	r2, 801662a <_scanf_i+0x82>
 801661e:	6822      	ldr	r2, [r4, #0]
 8016620:	2108      	movs	r1, #8
 8016622:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8016626:	6061      	str	r1, [r4, #4]
 8016628:	6022      	str	r2, [r4, #0]
 801662a:	6822      	ldr	r2, [r4, #0]
 801662c:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8016630:	6022      	str	r2, [r4, #0]
 8016632:	68a2      	ldr	r2, [r4, #8]
 8016634:	1e51      	subs	r1, r2, #1
 8016636:	60a1      	str	r1, [r4, #8]
 8016638:	b192      	cbz	r2, 8016660 <_scanf_i+0xb8>
 801663a:	6832      	ldr	r2, [r6, #0]
 801663c:	1c51      	adds	r1, r2, #1
 801663e:	6031      	str	r1, [r6, #0]
 8016640:	7812      	ldrb	r2, [r2, #0]
 8016642:	f805 2b01 	strb.w	r2, [r5], #1
 8016646:	6872      	ldr	r2, [r6, #4]
 8016648:	3a01      	subs	r2, #1
 801664a:	2a00      	cmp	r2, #0
 801664c:	6072      	str	r2, [r6, #4]
 801664e:	dc07      	bgt.n	8016660 <_scanf_i+0xb8>
 8016650:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8016654:	4631      	mov	r1, r6
 8016656:	4650      	mov	r0, sl
 8016658:	4790      	blx	r2
 801665a:	2800      	cmp	r0, #0
 801665c:	f040 8085 	bne.w	801676a <_scanf_i+0x1c2>
 8016660:	f10b 0b01 	add.w	fp, fp, #1
 8016664:	f1bb 0f03 	cmp.w	fp, #3
 8016668:	d1cb      	bne.n	8016602 <_scanf_i+0x5a>
 801666a:	6863      	ldr	r3, [r4, #4]
 801666c:	b90b      	cbnz	r3, 8016672 <_scanf_i+0xca>
 801666e:	230a      	movs	r3, #10
 8016670:	6063      	str	r3, [r4, #4]
 8016672:	6863      	ldr	r3, [r4, #4]
 8016674:	4945      	ldr	r1, [pc, #276]	@ (801678c <_scanf_i+0x1e4>)
 8016676:	6960      	ldr	r0, [r4, #20]
 8016678:	1ac9      	subs	r1, r1, r3
 801667a:	f000 f947 	bl	801690c <__sccl>
 801667e:	f04f 0b00 	mov.w	fp, #0
 8016682:	68a3      	ldr	r3, [r4, #8]
 8016684:	6822      	ldr	r2, [r4, #0]
 8016686:	2b00      	cmp	r3, #0
 8016688:	d03d      	beq.n	8016706 <_scanf_i+0x15e>
 801668a:	6831      	ldr	r1, [r6, #0]
 801668c:	6960      	ldr	r0, [r4, #20]
 801668e:	f891 c000 	ldrb.w	ip, [r1]
 8016692:	f810 000c 	ldrb.w	r0, [r0, ip]
 8016696:	2800      	cmp	r0, #0
 8016698:	d035      	beq.n	8016706 <_scanf_i+0x15e>
 801669a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 801669e:	d124      	bne.n	80166ea <_scanf_i+0x142>
 80166a0:	0510      	lsls	r0, r2, #20
 80166a2:	d522      	bpl.n	80166ea <_scanf_i+0x142>
 80166a4:	f10b 0b01 	add.w	fp, fp, #1
 80166a8:	f1b9 0f00 	cmp.w	r9, #0
 80166ac:	d003      	beq.n	80166b6 <_scanf_i+0x10e>
 80166ae:	3301      	adds	r3, #1
 80166b0:	f109 39ff 	add.w	r9, r9, #4294967295
 80166b4:	60a3      	str	r3, [r4, #8]
 80166b6:	6873      	ldr	r3, [r6, #4]
 80166b8:	3b01      	subs	r3, #1
 80166ba:	2b00      	cmp	r3, #0
 80166bc:	6073      	str	r3, [r6, #4]
 80166be:	dd1b      	ble.n	80166f8 <_scanf_i+0x150>
 80166c0:	6833      	ldr	r3, [r6, #0]
 80166c2:	3301      	adds	r3, #1
 80166c4:	6033      	str	r3, [r6, #0]
 80166c6:	68a3      	ldr	r3, [r4, #8]
 80166c8:	3b01      	subs	r3, #1
 80166ca:	60a3      	str	r3, [r4, #8]
 80166cc:	e7d9      	b.n	8016682 <_scanf_i+0xda>
 80166ce:	f1bb 0f02 	cmp.w	fp, #2
 80166d2:	d1ae      	bne.n	8016632 <_scanf_i+0x8a>
 80166d4:	6822      	ldr	r2, [r4, #0]
 80166d6:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80166da:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80166de:	d1bf      	bne.n	8016660 <_scanf_i+0xb8>
 80166e0:	2110      	movs	r1, #16
 80166e2:	6061      	str	r1, [r4, #4]
 80166e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80166e8:	e7a2      	b.n	8016630 <_scanf_i+0x88>
 80166ea:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 80166ee:	6022      	str	r2, [r4, #0]
 80166f0:	780b      	ldrb	r3, [r1, #0]
 80166f2:	f805 3b01 	strb.w	r3, [r5], #1
 80166f6:	e7de      	b.n	80166b6 <_scanf_i+0x10e>
 80166f8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80166fc:	4631      	mov	r1, r6
 80166fe:	4650      	mov	r0, sl
 8016700:	4798      	blx	r3
 8016702:	2800      	cmp	r0, #0
 8016704:	d0df      	beq.n	80166c6 <_scanf_i+0x11e>
 8016706:	6823      	ldr	r3, [r4, #0]
 8016708:	05d9      	lsls	r1, r3, #23
 801670a:	d50d      	bpl.n	8016728 <_scanf_i+0x180>
 801670c:	42bd      	cmp	r5, r7
 801670e:	d909      	bls.n	8016724 <_scanf_i+0x17c>
 8016710:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8016714:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8016718:	4632      	mov	r2, r6
 801671a:	4650      	mov	r0, sl
 801671c:	4798      	blx	r3
 801671e:	f105 39ff 	add.w	r9, r5, #4294967295
 8016722:	464d      	mov	r5, r9
 8016724:	42bd      	cmp	r5, r7
 8016726:	d028      	beq.n	801677a <_scanf_i+0x1d2>
 8016728:	6822      	ldr	r2, [r4, #0]
 801672a:	f012 0210 	ands.w	r2, r2, #16
 801672e:	d113      	bne.n	8016758 <_scanf_i+0x1b0>
 8016730:	702a      	strb	r2, [r5, #0]
 8016732:	6863      	ldr	r3, [r4, #4]
 8016734:	9e01      	ldr	r6, [sp, #4]
 8016736:	4639      	mov	r1, r7
 8016738:	4650      	mov	r0, sl
 801673a:	47b0      	blx	r6
 801673c:	f8d8 3000 	ldr.w	r3, [r8]
 8016740:	6821      	ldr	r1, [r4, #0]
 8016742:	1d1a      	adds	r2, r3, #4
 8016744:	f8c8 2000 	str.w	r2, [r8]
 8016748:	f011 0f20 	tst.w	r1, #32
 801674c:	681b      	ldr	r3, [r3, #0]
 801674e:	d00f      	beq.n	8016770 <_scanf_i+0x1c8>
 8016750:	6018      	str	r0, [r3, #0]
 8016752:	68e3      	ldr	r3, [r4, #12]
 8016754:	3301      	adds	r3, #1
 8016756:	60e3      	str	r3, [r4, #12]
 8016758:	6923      	ldr	r3, [r4, #16]
 801675a:	1bed      	subs	r5, r5, r7
 801675c:	445d      	add	r5, fp
 801675e:	442b      	add	r3, r5
 8016760:	6123      	str	r3, [r4, #16]
 8016762:	2000      	movs	r0, #0
 8016764:	b007      	add	sp, #28
 8016766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801676a:	f04f 0b00 	mov.w	fp, #0
 801676e:	e7ca      	b.n	8016706 <_scanf_i+0x15e>
 8016770:	07ca      	lsls	r2, r1, #31
 8016772:	bf4c      	ite	mi
 8016774:	8018      	strhmi	r0, [r3, #0]
 8016776:	6018      	strpl	r0, [r3, #0]
 8016778:	e7eb      	b.n	8016752 <_scanf_i+0x1aa>
 801677a:	2001      	movs	r0, #1
 801677c:	e7f2      	b.n	8016764 <_scanf_i+0x1bc>
 801677e:	bf00      	nop
 8016780:	08018c1c 	.word	0x08018c1c
 8016784:	08015ea9 	.word	0x08015ea9
 8016788:	08017209 	.word	0x08017209
 801678c:	0805db3a 	.word	0x0805db3a

08016790 <__sflush_r>:
 8016790:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016798:	0716      	lsls	r6, r2, #28
 801679a:	4605      	mov	r5, r0
 801679c:	460c      	mov	r4, r1
 801679e:	d454      	bmi.n	801684a <__sflush_r+0xba>
 80167a0:	684b      	ldr	r3, [r1, #4]
 80167a2:	2b00      	cmp	r3, #0
 80167a4:	dc02      	bgt.n	80167ac <__sflush_r+0x1c>
 80167a6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80167a8:	2b00      	cmp	r3, #0
 80167aa:	dd48      	ble.n	801683e <__sflush_r+0xae>
 80167ac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80167ae:	2e00      	cmp	r6, #0
 80167b0:	d045      	beq.n	801683e <__sflush_r+0xae>
 80167b2:	2300      	movs	r3, #0
 80167b4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80167b8:	682f      	ldr	r7, [r5, #0]
 80167ba:	6a21      	ldr	r1, [r4, #32]
 80167bc:	602b      	str	r3, [r5, #0]
 80167be:	d030      	beq.n	8016822 <__sflush_r+0x92>
 80167c0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80167c2:	89a3      	ldrh	r3, [r4, #12]
 80167c4:	0759      	lsls	r1, r3, #29
 80167c6:	d505      	bpl.n	80167d4 <__sflush_r+0x44>
 80167c8:	6863      	ldr	r3, [r4, #4]
 80167ca:	1ad2      	subs	r2, r2, r3
 80167cc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80167ce:	b10b      	cbz	r3, 80167d4 <__sflush_r+0x44>
 80167d0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80167d2:	1ad2      	subs	r2, r2, r3
 80167d4:	2300      	movs	r3, #0
 80167d6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80167d8:	6a21      	ldr	r1, [r4, #32]
 80167da:	4628      	mov	r0, r5
 80167dc:	47b0      	blx	r6
 80167de:	1c43      	adds	r3, r0, #1
 80167e0:	89a3      	ldrh	r3, [r4, #12]
 80167e2:	d106      	bne.n	80167f2 <__sflush_r+0x62>
 80167e4:	6829      	ldr	r1, [r5, #0]
 80167e6:	291d      	cmp	r1, #29
 80167e8:	d82b      	bhi.n	8016842 <__sflush_r+0xb2>
 80167ea:	4a2a      	ldr	r2, [pc, #168]	@ (8016894 <__sflush_r+0x104>)
 80167ec:	410a      	asrs	r2, r1
 80167ee:	07d6      	lsls	r6, r2, #31
 80167f0:	d427      	bmi.n	8016842 <__sflush_r+0xb2>
 80167f2:	2200      	movs	r2, #0
 80167f4:	6062      	str	r2, [r4, #4]
 80167f6:	04d9      	lsls	r1, r3, #19
 80167f8:	6922      	ldr	r2, [r4, #16]
 80167fa:	6022      	str	r2, [r4, #0]
 80167fc:	d504      	bpl.n	8016808 <__sflush_r+0x78>
 80167fe:	1c42      	adds	r2, r0, #1
 8016800:	d101      	bne.n	8016806 <__sflush_r+0x76>
 8016802:	682b      	ldr	r3, [r5, #0]
 8016804:	b903      	cbnz	r3, 8016808 <__sflush_r+0x78>
 8016806:	6560      	str	r0, [r4, #84]	@ 0x54
 8016808:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801680a:	602f      	str	r7, [r5, #0]
 801680c:	b1b9      	cbz	r1, 801683e <__sflush_r+0xae>
 801680e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016812:	4299      	cmp	r1, r3
 8016814:	d002      	beq.n	801681c <__sflush_r+0x8c>
 8016816:	4628      	mov	r0, r5
 8016818:	f7fd ffbe 	bl	8014798 <_free_r>
 801681c:	2300      	movs	r3, #0
 801681e:	6363      	str	r3, [r4, #52]	@ 0x34
 8016820:	e00d      	b.n	801683e <__sflush_r+0xae>
 8016822:	2301      	movs	r3, #1
 8016824:	4628      	mov	r0, r5
 8016826:	47b0      	blx	r6
 8016828:	4602      	mov	r2, r0
 801682a:	1c50      	adds	r0, r2, #1
 801682c:	d1c9      	bne.n	80167c2 <__sflush_r+0x32>
 801682e:	682b      	ldr	r3, [r5, #0]
 8016830:	2b00      	cmp	r3, #0
 8016832:	d0c6      	beq.n	80167c2 <__sflush_r+0x32>
 8016834:	2b1d      	cmp	r3, #29
 8016836:	d001      	beq.n	801683c <__sflush_r+0xac>
 8016838:	2b16      	cmp	r3, #22
 801683a:	d11e      	bne.n	801687a <__sflush_r+0xea>
 801683c:	602f      	str	r7, [r5, #0]
 801683e:	2000      	movs	r0, #0
 8016840:	e022      	b.n	8016888 <__sflush_r+0xf8>
 8016842:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016846:	b21b      	sxth	r3, r3
 8016848:	e01b      	b.n	8016882 <__sflush_r+0xf2>
 801684a:	690f      	ldr	r7, [r1, #16]
 801684c:	2f00      	cmp	r7, #0
 801684e:	d0f6      	beq.n	801683e <__sflush_r+0xae>
 8016850:	0793      	lsls	r3, r2, #30
 8016852:	680e      	ldr	r6, [r1, #0]
 8016854:	bf08      	it	eq
 8016856:	694b      	ldreq	r3, [r1, #20]
 8016858:	600f      	str	r7, [r1, #0]
 801685a:	bf18      	it	ne
 801685c:	2300      	movne	r3, #0
 801685e:	eba6 0807 	sub.w	r8, r6, r7
 8016862:	608b      	str	r3, [r1, #8]
 8016864:	f1b8 0f00 	cmp.w	r8, #0
 8016868:	dde9      	ble.n	801683e <__sflush_r+0xae>
 801686a:	6a21      	ldr	r1, [r4, #32]
 801686c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801686e:	4643      	mov	r3, r8
 8016870:	463a      	mov	r2, r7
 8016872:	4628      	mov	r0, r5
 8016874:	47b0      	blx	r6
 8016876:	2800      	cmp	r0, #0
 8016878:	dc08      	bgt.n	801688c <__sflush_r+0xfc>
 801687a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801687e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016882:	81a3      	strh	r3, [r4, #12]
 8016884:	f04f 30ff 	mov.w	r0, #4294967295
 8016888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801688c:	4407      	add	r7, r0
 801688e:	eba8 0800 	sub.w	r8, r8, r0
 8016892:	e7e7      	b.n	8016864 <__sflush_r+0xd4>
 8016894:	dfbffffe 	.word	0xdfbffffe

08016898 <_fflush_r>:
 8016898:	b538      	push	{r3, r4, r5, lr}
 801689a:	690b      	ldr	r3, [r1, #16]
 801689c:	4605      	mov	r5, r0
 801689e:	460c      	mov	r4, r1
 80168a0:	b913      	cbnz	r3, 80168a8 <_fflush_r+0x10>
 80168a2:	2500      	movs	r5, #0
 80168a4:	4628      	mov	r0, r5
 80168a6:	bd38      	pop	{r3, r4, r5, pc}
 80168a8:	b118      	cbz	r0, 80168b2 <_fflush_r+0x1a>
 80168aa:	6a03      	ldr	r3, [r0, #32]
 80168ac:	b90b      	cbnz	r3, 80168b2 <_fflush_r+0x1a>
 80168ae:	f7fc ff3b 	bl	8013728 <__sinit>
 80168b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80168b6:	2b00      	cmp	r3, #0
 80168b8:	d0f3      	beq.n	80168a2 <_fflush_r+0xa>
 80168ba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80168bc:	07d0      	lsls	r0, r2, #31
 80168be:	d404      	bmi.n	80168ca <_fflush_r+0x32>
 80168c0:	0599      	lsls	r1, r3, #22
 80168c2:	d402      	bmi.n	80168ca <_fflush_r+0x32>
 80168c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80168c6:	f7fd f8de 	bl	8013a86 <__retarget_lock_acquire_recursive>
 80168ca:	4628      	mov	r0, r5
 80168cc:	4621      	mov	r1, r4
 80168ce:	f7ff ff5f 	bl	8016790 <__sflush_r>
 80168d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80168d4:	07da      	lsls	r2, r3, #31
 80168d6:	4605      	mov	r5, r0
 80168d8:	d4e4      	bmi.n	80168a4 <_fflush_r+0xc>
 80168da:	89a3      	ldrh	r3, [r4, #12]
 80168dc:	059b      	lsls	r3, r3, #22
 80168de:	d4e1      	bmi.n	80168a4 <_fflush_r+0xc>
 80168e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80168e2:	f7fd f8d1 	bl	8013a88 <__retarget_lock_release_recursive>
 80168e6:	e7dd      	b.n	80168a4 <_fflush_r+0xc>

080168e8 <fiprintf>:
 80168e8:	b40e      	push	{r1, r2, r3}
 80168ea:	b503      	push	{r0, r1, lr}
 80168ec:	4601      	mov	r1, r0
 80168ee:	ab03      	add	r3, sp, #12
 80168f0:	4805      	ldr	r0, [pc, #20]	@ (8016908 <fiprintf+0x20>)
 80168f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80168f6:	6800      	ldr	r0, [r0, #0]
 80168f8:	9301      	str	r3, [sp, #4]
 80168fa:	f000 fcbd 	bl	8017278 <_vfiprintf_r>
 80168fe:	b002      	add	sp, #8
 8016900:	f85d eb04 	ldr.w	lr, [sp], #4
 8016904:	b003      	add	sp, #12
 8016906:	4770      	bx	lr
 8016908:	20001438 	.word	0x20001438

0801690c <__sccl>:
 801690c:	b570      	push	{r4, r5, r6, lr}
 801690e:	780b      	ldrb	r3, [r1, #0]
 8016910:	4604      	mov	r4, r0
 8016912:	2b5e      	cmp	r3, #94	@ 0x5e
 8016914:	bf0b      	itete	eq
 8016916:	784b      	ldrbeq	r3, [r1, #1]
 8016918:	1c4a      	addne	r2, r1, #1
 801691a:	1c8a      	addeq	r2, r1, #2
 801691c:	2100      	movne	r1, #0
 801691e:	bf08      	it	eq
 8016920:	2101      	moveq	r1, #1
 8016922:	3801      	subs	r0, #1
 8016924:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8016928:	f800 1f01 	strb.w	r1, [r0, #1]!
 801692c:	42a8      	cmp	r0, r5
 801692e:	d1fb      	bne.n	8016928 <__sccl+0x1c>
 8016930:	b90b      	cbnz	r3, 8016936 <__sccl+0x2a>
 8016932:	1e50      	subs	r0, r2, #1
 8016934:	bd70      	pop	{r4, r5, r6, pc}
 8016936:	f081 0101 	eor.w	r1, r1, #1
 801693a:	54e1      	strb	r1, [r4, r3]
 801693c:	4610      	mov	r0, r2
 801693e:	4602      	mov	r2, r0
 8016940:	f812 5b01 	ldrb.w	r5, [r2], #1
 8016944:	2d2d      	cmp	r5, #45	@ 0x2d
 8016946:	d005      	beq.n	8016954 <__sccl+0x48>
 8016948:	2d5d      	cmp	r5, #93	@ 0x5d
 801694a:	d016      	beq.n	801697a <__sccl+0x6e>
 801694c:	2d00      	cmp	r5, #0
 801694e:	d0f1      	beq.n	8016934 <__sccl+0x28>
 8016950:	462b      	mov	r3, r5
 8016952:	e7f2      	b.n	801693a <__sccl+0x2e>
 8016954:	7846      	ldrb	r6, [r0, #1]
 8016956:	2e5d      	cmp	r6, #93	@ 0x5d
 8016958:	d0fa      	beq.n	8016950 <__sccl+0x44>
 801695a:	42b3      	cmp	r3, r6
 801695c:	dcf8      	bgt.n	8016950 <__sccl+0x44>
 801695e:	3002      	adds	r0, #2
 8016960:	461a      	mov	r2, r3
 8016962:	3201      	adds	r2, #1
 8016964:	4296      	cmp	r6, r2
 8016966:	54a1      	strb	r1, [r4, r2]
 8016968:	dcfb      	bgt.n	8016962 <__sccl+0x56>
 801696a:	1af2      	subs	r2, r6, r3
 801696c:	3a01      	subs	r2, #1
 801696e:	1c5d      	adds	r5, r3, #1
 8016970:	42b3      	cmp	r3, r6
 8016972:	bfa8      	it	ge
 8016974:	2200      	movge	r2, #0
 8016976:	18ab      	adds	r3, r5, r2
 8016978:	e7e1      	b.n	801693e <__sccl+0x32>
 801697a:	4610      	mov	r0, r2
 801697c:	e7da      	b.n	8016934 <__sccl+0x28>

0801697e <__submore>:
 801697e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016982:	460c      	mov	r4, r1
 8016984:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8016986:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801698a:	4299      	cmp	r1, r3
 801698c:	d11d      	bne.n	80169ca <__submore+0x4c>
 801698e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8016992:	f7fb ff17 	bl	80127c4 <_malloc_r>
 8016996:	b918      	cbnz	r0, 80169a0 <__submore+0x22>
 8016998:	f04f 30ff 	mov.w	r0, #4294967295
 801699c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80169a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80169a4:	63a3      	str	r3, [r4, #56]	@ 0x38
 80169a6:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 80169aa:	6360      	str	r0, [r4, #52]	@ 0x34
 80169ac:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80169b0:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80169b4:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 80169b8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80169bc:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 80169c0:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80169c4:	6020      	str	r0, [r4, #0]
 80169c6:	2000      	movs	r0, #0
 80169c8:	e7e8      	b.n	801699c <__submore+0x1e>
 80169ca:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80169cc:	0077      	lsls	r7, r6, #1
 80169ce:	463a      	mov	r2, r7
 80169d0:	f7fb ff84 	bl	80128dc <_realloc_r>
 80169d4:	4605      	mov	r5, r0
 80169d6:	2800      	cmp	r0, #0
 80169d8:	d0de      	beq.n	8016998 <__submore+0x1a>
 80169da:	eb00 0806 	add.w	r8, r0, r6
 80169de:	4601      	mov	r1, r0
 80169e0:	4632      	mov	r2, r6
 80169e2:	4640      	mov	r0, r8
 80169e4:	f7fd f859 	bl	8013a9a <memcpy>
 80169e8:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80169ec:	f8c4 8000 	str.w	r8, [r4]
 80169f0:	e7e9      	b.n	80169c6 <__submore+0x48>

080169f2 <memmove>:
 80169f2:	4288      	cmp	r0, r1
 80169f4:	b510      	push	{r4, lr}
 80169f6:	eb01 0402 	add.w	r4, r1, r2
 80169fa:	d902      	bls.n	8016a02 <memmove+0x10>
 80169fc:	4284      	cmp	r4, r0
 80169fe:	4623      	mov	r3, r4
 8016a00:	d807      	bhi.n	8016a12 <memmove+0x20>
 8016a02:	1e43      	subs	r3, r0, #1
 8016a04:	42a1      	cmp	r1, r4
 8016a06:	d008      	beq.n	8016a1a <memmove+0x28>
 8016a08:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016a0c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016a10:	e7f8      	b.n	8016a04 <memmove+0x12>
 8016a12:	4402      	add	r2, r0
 8016a14:	4601      	mov	r1, r0
 8016a16:	428a      	cmp	r2, r1
 8016a18:	d100      	bne.n	8016a1c <memmove+0x2a>
 8016a1a:	bd10      	pop	{r4, pc}
 8016a1c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016a20:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016a24:	e7f7      	b.n	8016a16 <memmove+0x24>

08016a26 <strncmp>:
 8016a26:	b510      	push	{r4, lr}
 8016a28:	b16a      	cbz	r2, 8016a46 <strncmp+0x20>
 8016a2a:	3901      	subs	r1, #1
 8016a2c:	1884      	adds	r4, r0, r2
 8016a2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016a32:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8016a36:	429a      	cmp	r2, r3
 8016a38:	d103      	bne.n	8016a42 <strncmp+0x1c>
 8016a3a:	42a0      	cmp	r0, r4
 8016a3c:	d001      	beq.n	8016a42 <strncmp+0x1c>
 8016a3e:	2a00      	cmp	r2, #0
 8016a40:	d1f5      	bne.n	8016a2e <strncmp+0x8>
 8016a42:	1ad0      	subs	r0, r2, r3
 8016a44:	bd10      	pop	{r4, pc}
 8016a46:	4610      	mov	r0, r2
 8016a48:	e7fc      	b.n	8016a44 <strncmp+0x1e>
 8016a4a:	0000      	movs	r0, r0
 8016a4c:	0000      	movs	r0, r0
	...

08016a50 <nan>:
 8016a50:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8016a58 <nan+0x8>
 8016a54:	4770      	bx	lr
 8016a56:	bf00      	nop
 8016a58:	00000000 	.word	0x00000000
 8016a5c:	7ff80000 	.word	0x7ff80000

08016a60 <abort>:
 8016a60:	b508      	push	{r3, lr}
 8016a62:	2006      	movs	r0, #6
 8016a64:	f000 fddc 	bl	8017620 <raise>
 8016a68:	2001      	movs	r0, #1
 8016a6a:	f001 fe43 	bl	80186f4 <_exit>

08016a6e <_calloc_r>:
 8016a6e:	b570      	push	{r4, r5, r6, lr}
 8016a70:	fba1 5402 	umull	r5, r4, r1, r2
 8016a74:	b93c      	cbnz	r4, 8016a86 <_calloc_r+0x18>
 8016a76:	4629      	mov	r1, r5
 8016a78:	f7fb fea4 	bl	80127c4 <_malloc_r>
 8016a7c:	4606      	mov	r6, r0
 8016a7e:	b928      	cbnz	r0, 8016a8c <_calloc_r+0x1e>
 8016a80:	2600      	movs	r6, #0
 8016a82:	4630      	mov	r0, r6
 8016a84:	bd70      	pop	{r4, r5, r6, pc}
 8016a86:	220c      	movs	r2, #12
 8016a88:	6002      	str	r2, [r0, #0]
 8016a8a:	e7f9      	b.n	8016a80 <_calloc_r+0x12>
 8016a8c:	462a      	mov	r2, r5
 8016a8e:	4621      	mov	r1, r4
 8016a90:	f7fc ff0f 	bl	80138b2 <memset>
 8016a94:	e7f5      	b.n	8016a82 <_calloc_r+0x14>

08016a96 <rshift>:
 8016a96:	6903      	ldr	r3, [r0, #16]
 8016a98:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8016a9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016aa0:	ea4f 1261 	mov.w	r2, r1, asr #5
 8016aa4:	f100 0414 	add.w	r4, r0, #20
 8016aa8:	dd45      	ble.n	8016b36 <rshift+0xa0>
 8016aaa:	f011 011f 	ands.w	r1, r1, #31
 8016aae:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8016ab2:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8016ab6:	d10c      	bne.n	8016ad2 <rshift+0x3c>
 8016ab8:	f100 0710 	add.w	r7, r0, #16
 8016abc:	4629      	mov	r1, r5
 8016abe:	42b1      	cmp	r1, r6
 8016ac0:	d334      	bcc.n	8016b2c <rshift+0x96>
 8016ac2:	1a9b      	subs	r3, r3, r2
 8016ac4:	009b      	lsls	r3, r3, #2
 8016ac6:	1eea      	subs	r2, r5, #3
 8016ac8:	4296      	cmp	r6, r2
 8016aca:	bf38      	it	cc
 8016acc:	2300      	movcc	r3, #0
 8016ace:	4423      	add	r3, r4
 8016ad0:	e015      	b.n	8016afe <rshift+0x68>
 8016ad2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8016ad6:	f1c1 0820 	rsb	r8, r1, #32
 8016ada:	40cf      	lsrs	r7, r1
 8016adc:	f105 0e04 	add.w	lr, r5, #4
 8016ae0:	46a1      	mov	r9, r4
 8016ae2:	4576      	cmp	r6, lr
 8016ae4:	46f4      	mov	ip, lr
 8016ae6:	d815      	bhi.n	8016b14 <rshift+0x7e>
 8016ae8:	1a9a      	subs	r2, r3, r2
 8016aea:	0092      	lsls	r2, r2, #2
 8016aec:	3a04      	subs	r2, #4
 8016aee:	3501      	adds	r5, #1
 8016af0:	42ae      	cmp	r6, r5
 8016af2:	bf38      	it	cc
 8016af4:	2200      	movcc	r2, #0
 8016af6:	18a3      	adds	r3, r4, r2
 8016af8:	50a7      	str	r7, [r4, r2]
 8016afa:	b107      	cbz	r7, 8016afe <rshift+0x68>
 8016afc:	3304      	adds	r3, #4
 8016afe:	1b1a      	subs	r2, r3, r4
 8016b00:	42a3      	cmp	r3, r4
 8016b02:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8016b06:	bf08      	it	eq
 8016b08:	2300      	moveq	r3, #0
 8016b0a:	6102      	str	r2, [r0, #16]
 8016b0c:	bf08      	it	eq
 8016b0e:	6143      	streq	r3, [r0, #20]
 8016b10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016b14:	f8dc c000 	ldr.w	ip, [ip]
 8016b18:	fa0c fc08 	lsl.w	ip, ip, r8
 8016b1c:	ea4c 0707 	orr.w	r7, ip, r7
 8016b20:	f849 7b04 	str.w	r7, [r9], #4
 8016b24:	f85e 7b04 	ldr.w	r7, [lr], #4
 8016b28:	40cf      	lsrs	r7, r1
 8016b2a:	e7da      	b.n	8016ae2 <rshift+0x4c>
 8016b2c:	f851 cb04 	ldr.w	ip, [r1], #4
 8016b30:	f847 cf04 	str.w	ip, [r7, #4]!
 8016b34:	e7c3      	b.n	8016abe <rshift+0x28>
 8016b36:	4623      	mov	r3, r4
 8016b38:	e7e1      	b.n	8016afe <rshift+0x68>

08016b3a <__hexdig_fun>:
 8016b3a:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8016b3e:	2b09      	cmp	r3, #9
 8016b40:	d802      	bhi.n	8016b48 <__hexdig_fun+0xe>
 8016b42:	3820      	subs	r0, #32
 8016b44:	b2c0      	uxtb	r0, r0
 8016b46:	4770      	bx	lr
 8016b48:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8016b4c:	2b05      	cmp	r3, #5
 8016b4e:	d801      	bhi.n	8016b54 <__hexdig_fun+0x1a>
 8016b50:	3847      	subs	r0, #71	@ 0x47
 8016b52:	e7f7      	b.n	8016b44 <__hexdig_fun+0xa>
 8016b54:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8016b58:	2b05      	cmp	r3, #5
 8016b5a:	d801      	bhi.n	8016b60 <__hexdig_fun+0x26>
 8016b5c:	3827      	subs	r0, #39	@ 0x27
 8016b5e:	e7f1      	b.n	8016b44 <__hexdig_fun+0xa>
 8016b60:	2000      	movs	r0, #0
 8016b62:	4770      	bx	lr

08016b64 <__gethex>:
 8016b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b68:	b085      	sub	sp, #20
 8016b6a:	468a      	mov	sl, r1
 8016b6c:	9302      	str	r3, [sp, #8]
 8016b6e:	680b      	ldr	r3, [r1, #0]
 8016b70:	9001      	str	r0, [sp, #4]
 8016b72:	4690      	mov	r8, r2
 8016b74:	1c9c      	adds	r4, r3, #2
 8016b76:	46a1      	mov	r9, r4
 8016b78:	f814 0b01 	ldrb.w	r0, [r4], #1
 8016b7c:	2830      	cmp	r0, #48	@ 0x30
 8016b7e:	d0fa      	beq.n	8016b76 <__gethex+0x12>
 8016b80:	eba9 0303 	sub.w	r3, r9, r3
 8016b84:	f1a3 0b02 	sub.w	fp, r3, #2
 8016b88:	f7ff ffd7 	bl	8016b3a <__hexdig_fun>
 8016b8c:	4605      	mov	r5, r0
 8016b8e:	2800      	cmp	r0, #0
 8016b90:	d168      	bne.n	8016c64 <__gethex+0x100>
 8016b92:	49a0      	ldr	r1, [pc, #640]	@ (8016e14 <__gethex+0x2b0>)
 8016b94:	2201      	movs	r2, #1
 8016b96:	4648      	mov	r0, r9
 8016b98:	f7ff ff45 	bl	8016a26 <strncmp>
 8016b9c:	4607      	mov	r7, r0
 8016b9e:	2800      	cmp	r0, #0
 8016ba0:	d167      	bne.n	8016c72 <__gethex+0x10e>
 8016ba2:	f899 0001 	ldrb.w	r0, [r9, #1]
 8016ba6:	4626      	mov	r6, r4
 8016ba8:	f7ff ffc7 	bl	8016b3a <__hexdig_fun>
 8016bac:	2800      	cmp	r0, #0
 8016bae:	d062      	beq.n	8016c76 <__gethex+0x112>
 8016bb0:	4623      	mov	r3, r4
 8016bb2:	7818      	ldrb	r0, [r3, #0]
 8016bb4:	2830      	cmp	r0, #48	@ 0x30
 8016bb6:	4699      	mov	r9, r3
 8016bb8:	f103 0301 	add.w	r3, r3, #1
 8016bbc:	d0f9      	beq.n	8016bb2 <__gethex+0x4e>
 8016bbe:	f7ff ffbc 	bl	8016b3a <__hexdig_fun>
 8016bc2:	fab0 f580 	clz	r5, r0
 8016bc6:	096d      	lsrs	r5, r5, #5
 8016bc8:	f04f 0b01 	mov.w	fp, #1
 8016bcc:	464a      	mov	r2, r9
 8016bce:	4616      	mov	r6, r2
 8016bd0:	3201      	adds	r2, #1
 8016bd2:	7830      	ldrb	r0, [r6, #0]
 8016bd4:	f7ff ffb1 	bl	8016b3a <__hexdig_fun>
 8016bd8:	2800      	cmp	r0, #0
 8016bda:	d1f8      	bne.n	8016bce <__gethex+0x6a>
 8016bdc:	498d      	ldr	r1, [pc, #564]	@ (8016e14 <__gethex+0x2b0>)
 8016bde:	2201      	movs	r2, #1
 8016be0:	4630      	mov	r0, r6
 8016be2:	f7ff ff20 	bl	8016a26 <strncmp>
 8016be6:	2800      	cmp	r0, #0
 8016be8:	d13f      	bne.n	8016c6a <__gethex+0x106>
 8016bea:	b944      	cbnz	r4, 8016bfe <__gethex+0x9a>
 8016bec:	1c74      	adds	r4, r6, #1
 8016bee:	4622      	mov	r2, r4
 8016bf0:	4616      	mov	r6, r2
 8016bf2:	3201      	adds	r2, #1
 8016bf4:	7830      	ldrb	r0, [r6, #0]
 8016bf6:	f7ff ffa0 	bl	8016b3a <__hexdig_fun>
 8016bfa:	2800      	cmp	r0, #0
 8016bfc:	d1f8      	bne.n	8016bf0 <__gethex+0x8c>
 8016bfe:	1ba4      	subs	r4, r4, r6
 8016c00:	00a7      	lsls	r7, r4, #2
 8016c02:	7833      	ldrb	r3, [r6, #0]
 8016c04:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8016c08:	2b50      	cmp	r3, #80	@ 0x50
 8016c0a:	d13e      	bne.n	8016c8a <__gethex+0x126>
 8016c0c:	7873      	ldrb	r3, [r6, #1]
 8016c0e:	2b2b      	cmp	r3, #43	@ 0x2b
 8016c10:	d033      	beq.n	8016c7a <__gethex+0x116>
 8016c12:	2b2d      	cmp	r3, #45	@ 0x2d
 8016c14:	d034      	beq.n	8016c80 <__gethex+0x11c>
 8016c16:	1c71      	adds	r1, r6, #1
 8016c18:	2400      	movs	r4, #0
 8016c1a:	7808      	ldrb	r0, [r1, #0]
 8016c1c:	f7ff ff8d 	bl	8016b3a <__hexdig_fun>
 8016c20:	1e43      	subs	r3, r0, #1
 8016c22:	b2db      	uxtb	r3, r3
 8016c24:	2b18      	cmp	r3, #24
 8016c26:	d830      	bhi.n	8016c8a <__gethex+0x126>
 8016c28:	f1a0 0210 	sub.w	r2, r0, #16
 8016c2c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8016c30:	f7ff ff83 	bl	8016b3a <__hexdig_fun>
 8016c34:	f100 3cff 	add.w	ip, r0, #4294967295
 8016c38:	fa5f fc8c 	uxtb.w	ip, ip
 8016c3c:	f1bc 0f18 	cmp.w	ip, #24
 8016c40:	f04f 030a 	mov.w	r3, #10
 8016c44:	d91e      	bls.n	8016c84 <__gethex+0x120>
 8016c46:	b104      	cbz	r4, 8016c4a <__gethex+0xe6>
 8016c48:	4252      	negs	r2, r2
 8016c4a:	4417      	add	r7, r2
 8016c4c:	f8ca 1000 	str.w	r1, [sl]
 8016c50:	b1ed      	cbz	r5, 8016c8e <__gethex+0x12a>
 8016c52:	f1bb 0f00 	cmp.w	fp, #0
 8016c56:	bf0c      	ite	eq
 8016c58:	2506      	moveq	r5, #6
 8016c5a:	2500      	movne	r5, #0
 8016c5c:	4628      	mov	r0, r5
 8016c5e:	b005      	add	sp, #20
 8016c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c64:	2500      	movs	r5, #0
 8016c66:	462c      	mov	r4, r5
 8016c68:	e7b0      	b.n	8016bcc <__gethex+0x68>
 8016c6a:	2c00      	cmp	r4, #0
 8016c6c:	d1c7      	bne.n	8016bfe <__gethex+0x9a>
 8016c6e:	4627      	mov	r7, r4
 8016c70:	e7c7      	b.n	8016c02 <__gethex+0x9e>
 8016c72:	464e      	mov	r6, r9
 8016c74:	462f      	mov	r7, r5
 8016c76:	2501      	movs	r5, #1
 8016c78:	e7c3      	b.n	8016c02 <__gethex+0x9e>
 8016c7a:	2400      	movs	r4, #0
 8016c7c:	1cb1      	adds	r1, r6, #2
 8016c7e:	e7cc      	b.n	8016c1a <__gethex+0xb6>
 8016c80:	2401      	movs	r4, #1
 8016c82:	e7fb      	b.n	8016c7c <__gethex+0x118>
 8016c84:	fb03 0002 	mla	r0, r3, r2, r0
 8016c88:	e7ce      	b.n	8016c28 <__gethex+0xc4>
 8016c8a:	4631      	mov	r1, r6
 8016c8c:	e7de      	b.n	8016c4c <__gethex+0xe8>
 8016c8e:	eba6 0309 	sub.w	r3, r6, r9
 8016c92:	3b01      	subs	r3, #1
 8016c94:	4629      	mov	r1, r5
 8016c96:	2b07      	cmp	r3, #7
 8016c98:	dc0a      	bgt.n	8016cb0 <__gethex+0x14c>
 8016c9a:	9801      	ldr	r0, [sp, #4]
 8016c9c:	f7fd fdc6 	bl	801482c <_Balloc>
 8016ca0:	4604      	mov	r4, r0
 8016ca2:	b940      	cbnz	r0, 8016cb6 <__gethex+0x152>
 8016ca4:	4b5c      	ldr	r3, [pc, #368]	@ (8016e18 <__gethex+0x2b4>)
 8016ca6:	4602      	mov	r2, r0
 8016ca8:	21e4      	movs	r1, #228	@ 0xe4
 8016caa:	485c      	ldr	r0, [pc, #368]	@ (8016e1c <__gethex+0x2b8>)
 8016cac:	f7fc ff0a 	bl	8013ac4 <__assert_func>
 8016cb0:	3101      	adds	r1, #1
 8016cb2:	105b      	asrs	r3, r3, #1
 8016cb4:	e7ef      	b.n	8016c96 <__gethex+0x132>
 8016cb6:	f100 0a14 	add.w	sl, r0, #20
 8016cba:	2300      	movs	r3, #0
 8016cbc:	4655      	mov	r5, sl
 8016cbe:	469b      	mov	fp, r3
 8016cc0:	45b1      	cmp	r9, r6
 8016cc2:	d337      	bcc.n	8016d34 <__gethex+0x1d0>
 8016cc4:	f845 bb04 	str.w	fp, [r5], #4
 8016cc8:	eba5 050a 	sub.w	r5, r5, sl
 8016ccc:	10ad      	asrs	r5, r5, #2
 8016cce:	6125      	str	r5, [r4, #16]
 8016cd0:	4658      	mov	r0, fp
 8016cd2:	f7fd fe9d 	bl	8014a10 <__hi0bits>
 8016cd6:	016d      	lsls	r5, r5, #5
 8016cd8:	f8d8 6000 	ldr.w	r6, [r8]
 8016cdc:	1a2d      	subs	r5, r5, r0
 8016cde:	42b5      	cmp	r5, r6
 8016ce0:	dd54      	ble.n	8016d8c <__gethex+0x228>
 8016ce2:	1bad      	subs	r5, r5, r6
 8016ce4:	4629      	mov	r1, r5
 8016ce6:	4620      	mov	r0, r4
 8016ce8:	f7fe fa31 	bl	801514e <__any_on>
 8016cec:	4681      	mov	r9, r0
 8016cee:	b178      	cbz	r0, 8016d10 <__gethex+0x1ac>
 8016cf0:	1e6b      	subs	r3, r5, #1
 8016cf2:	1159      	asrs	r1, r3, #5
 8016cf4:	f003 021f 	and.w	r2, r3, #31
 8016cf8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8016cfc:	f04f 0901 	mov.w	r9, #1
 8016d00:	fa09 f202 	lsl.w	r2, r9, r2
 8016d04:	420a      	tst	r2, r1
 8016d06:	d003      	beq.n	8016d10 <__gethex+0x1ac>
 8016d08:	454b      	cmp	r3, r9
 8016d0a:	dc36      	bgt.n	8016d7a <__gethex+0x216>
 8016d0c:	f04f 0902 	mov.w	r9, #2
 8016d10:	4629      	mov	r1, r5
 8016d12:	4620      	mov	r0, r4
 8016d14:	f7ff febf 	bl	8016a96 <rshift>
 8016d18:	442f      	add	r7, r5
 8016d1a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016d1e:	42bb      	cmp	r3, r7
 8016d20:	da42      	bge.n	8016da8 <__gethex+0x244>
 8016d22:	9801      	ldr	r0, [sp, #4]
 8016d24:	4621      	mov	r1, r4
 8016d26:	f7fd fdc1 	bl	80148ac <_Bfree>
 8016d2a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016d2c:	2300      	movs	r3, #0
 8016d2e:	6013      	str	r3, [r2, #0]
 8016d30:	25a3      	movs	r5, #163	@ 0xa3
 8016d32:	e793      	b.n	8016c5c <__gethex+0xf8>
 8016d34:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8016d38:	2a2e      	cmp	r2, #46	@ 0x2e
 8016d3a:	d012      	beq.n	8016d62 <__gethex+0x1fe>
 8016d3c:	2b20      	cmp	r3, #32
 8016d3e:	d104      	bne.n	8016d4a <__gethex+0x1e6>
 8016d40:	f845 bb04 	str.w	fp, [r5], #4
 8016d44:	f04f 0b00 	mov.w	fp, #0
 8016d48:	465b      	mov	r3, fp
 8016d4a:	7830      	ldrb	r0, [r6, #0]
 8016d4c:	9303      	str	r3, [sp, #12]
 8016d4e:	f7ff fef4 	bl	8016b3a <__hexdig_fun>
 8016d52:	9b03      	ldr	r3, [sp, #12]
 8016d54:	f000 000f 	and.w	r0, r0, #15
 8016d58:	4098      	lsls	r0, r3
 8016d5a:	ea4b 0b00 	orr.w	fp, fp, r0
 8016d5e:	3304      	adds	r3, #4
 8016d60:	e7ae      	b.n	8016cc0 <__gethex+0x15c>
 8016d62:	45b1      	cmp	r9, r6
 8016d64:	d8ea      	bhi.n	8016d3c <__gethex+0x1d8>
 8016d66:	492b      	ldr	r1, [pc, #172]	@ (8016e14 <__gethex+0x2b0>)
 8016d68:	9303      	str	r3, [sp, #12]
 8016d6a:	2201      	movs	r2, #1
 8016d6c:	4630      	mov	r0, r6
 8016d6e:	f7ff fe5a 	bl	8016a26 <strncmp>
 8016d72:	9b03      	ldr	r3, [sp, #12]
 8016d74:	2800      	cmp	r0, #0
 8016d76:	d1e1      	bne.n	8016d3c <__gethex+0x1d8>
 8016d78:	e7a2      	b.n	8016cc0 <__gethex+0x15c>
 8016d7a:	1ea9      	subs	r1, r5, #2
 8016d7c:	4620      	mov	r0, r4
 8016d7e:	f7fe f9e6 	bl	801514e <__any_on>
 8016d82:	2800      	cmp	r0, #0
 8016d84:	d0c2      	beq.n	8016d0c <__gethex+0x1a8>
 8016d86:	f04f 0903 	mov.w	r9, #3
 8016d8a:	e7c1      	b.n	8016d10 <__gethex+0x1ac>
 8016d8c:	da09      	bge.n	8016da2 <__gethex+0x23e>
 8016d8e:	1b75      	subs	r5, r6, r5
 8016d90:	4621      	mov	r1, r4
 8016d92:	9801      	ldr	r0, [sp, #4]
 8016d94:	462a      	mov	r2, r5
 8016d96:	f7fd ffa1 	bl	8014cdc <__lshift>
 8016d9a:	1b7f      	subs	r7, r7, r5
 8016d9c:	4604      	mov	r4, r0
 8016d9e:	f100 0a14 	add.w	sl, r0, #20
 8016da2:	f04f 0900 	mov.w	r9, #0
 8016da6:	e7b8      	b.n	8016d1a <__gethex+0x1b6>
 8016da8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8016dac:	42bd      	cmp	r5, r7
 8016dae:	dd6f      	ble.n	8016e90 <__gethex+0x32c>
 8016db0:	1bed      	subs	r5, r5, r7
 8016db2:	42ae      	cmp	r6, r5
 8016db4:	dc34      	bgt.n	8016e20 <__gethex+0x2bc>
 8016db6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016dba:	2b02      	cmp	r3, #2
 8016dbc:	d022      	beq.n	8016e04 <__gethex+0x2a0>
 8016dbe:	2b03      	cmp	r3, #3
 8016dc0:	d024      	beq.n	8016e0c <__gethex+0x2a8>
 8016dc2:	2b01      	cmp	r3, #1
 8016dc4:	d115      	bne.n	8016df2 <__gethex+0x28e>
 8016dc6:	42ae      	cmp	r6, r5
 8016dc8:	d113      	bne.n	8016df2 <__gethex+0x28e>
 8016dca:	2e01      	cmp	r6, #1
 8016dcc:	d10b      	bne.n	8016de6 <__gethex+0x282>
 8016dce:	9a02      	ldr	r2, [sp, #8]
 8016dd0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016dd4:	6013      	str	r3, [r2, #0]
 8016dd6:	2301      	movs	r3, #1
 8016dd8:	6123      	str	r3, [r4, #16]
 8016dda:	f8ca 3000 	str.w	r3, [sl]
 8016dde:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016de0:	2562      	movs	r5, #98	@ 0x62
 8016de2:	601c      	str	r4, [r3, #0]
 8016de4:	e73a      	b.n	8016c5c <__gethex+0xf8>
 8016de6:	1e71      	subs	r1, r6, #1
 8016de8:	4620      	mov	r0, r4
 8016dea:	f7fe f9b0 	bl	801514e <__any_on>
 8016dee:	2800      	cmp	r0, #0
 8016df0:	d1ed      	bne.n	8016dce <__gethex+0x26a>
 8016df2:	9801      	ldr	r0, [sp, #4]
 8016df4:	4621      	mov	r1, r4
 8016df6:	f7fd fd59 	bl	80148ac <_Bfree>
 8016dfa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016dfc:	2300      	movs	r3, #0
 8016dfe:	6013      	str	r3, [r2, #0]
 8016e00:	2550      	movs	r5, #80	@ 0x50
 8016e02:	e72b      	b.n	8016c5c <__gethex+0xf8>
 8016e04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016e06:	2b00      	cmp	r3, #0
 8016e08:	d1f3      	bne.n	8016df2 <__gethex+0x28e>
 8016e0a:	e7e0      	b.n	8016dce <__gethex+0x26a>
 8016e0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016e0e:	2b00      	cmp	r3, #0
 8016e10:	d1dd      	bne.n	8016dce <__gethex+0x26a>
 8016e12:	e7ee      	b.n	8016df2 <__gethex+0x28e>
 8016e14:	0805d9c0 	.word	0x0805d9c0
 8016e18:	0805d859 	.word	0x0805d859
 8016e1c:	0805db4d 	.word	0x0805db4d
 8016e20:	1e6f      	subs	r7, r5, #1
 8016e22:	f1b9 0f00 	cmp.w	r9, #0
 8016e26:	d130      	bne.n	8016e8a <__gethex+0x326>
 8016e28:	b127      	cbz	r7, 8016e34 <__gethex+0x2d0>
 8016e2a:	4639      	mov	r1, r7
 8016e2c:	4620      	mov	r0, r4
 8016e2e:	f7fe f98e 	bl	801514e <__any_on>
 8016e32:	4681      	mov	r9, r0
 8016e34:	117a      	asrs	r2, r7, #5
 8016e36:	2301      	movs	r3, #1
 8016e38:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8016e3c:	f007 071f 	and.w	r7, r7, #31
 8016e40:	40bb      	lsls	r3, r7
 8016e42:	4213      	tst	r3, r2
 8016e44:	4629      	mov	r1, r5
 8016e46:	4620      	mov	r0, r4
 8016e48:	bf18      	it	ne
 8016e4a:	f049 0902 	orrne.w	r9, r9, #2
 8016e4e:	f7ff fe22 	bl	8016a96 <rshift>
 8016e52:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8016e56:	1b76      	subs	r6, r6, r5
 8016e58:	2502      	movs	r5, #2
 8016e5a:	f1b9 0f00 	cmp.w	r9, #0
 8016e5e:	d047      	beq.n	8016ef0 <__gethex+0x38c>
 8016e60:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016e64:	2b02      	cmp	r3, #2
 8016e66:	d015      	beq.n	8016e94 <__gethex+0x330>
 8016e68:	2b03      	cmp	r3, #3
 8016e6a:	d017      	beq.n	8016e9c <__gethex+0x338>
 8016e6c:	2b01      	cmp	r3, #1
 8016e6e:	d109      	bne.n	8016e84 <__gethex+0x320>
 8016e70:	f019 0f02 	tst.w	r9, #2
 8016e74:	d006      	beq.n	8016e84 <__gethex+0x320>
 8016e76:	f8da 3000 	ldr.w	r3, [sl]
 8016e7a:	ea49 0903 	orr.w	r9, r9, r3
 8016e7e:	f019 0f01 	tst.w	r9, #1
 8016e82:	d10e      	bne.n	8016ea2 <__gethex+0x33e>
 8016e84:	f045 0510 	orr.w	r5, r5, #16
 8016e88:	e032      	b.n	8016ef0 <__gethex+0x38c>
 8016e8a:	f04f 0901 	mov.w	r9, #1
 8016e8e:	e7d1      	b.n	8016e34 <__gethex+0x2d0>
 8016e90:	2501      	movs	r5, #1
 8016e92:	e7e2      	b.n	8016e5a <__gethex+0x2f6>
 8016e94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016e96:	f1c3 0301 	rsb	r3, r3, #1
 8016e9a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8016e9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016e9e:	2b00      	cmp	r3, #0
 8016ea0:	d0f0      	beq.n	8016e84 <__gethex+0x320>
 8016ea2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8016ea6:	f104 0314 	add.w	r3, r4, #20
 8016eaa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8016eae:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8016eb2:	f04f 0c00 	mov.w	ip, #0
 8016eb6:	4618      	mov	r0, r3
 8016eb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8016ebc:	f1b2 3fff 	cmp.w	r2, #4294967295
 8016ec0:	d01b      	beq.n	8016efa <__gethex+0x396>
 8016ec2:	3201      	adds	r2, #1
 8016ec4:	6002      	str	r2, [r0, #0]
 8016ec6:	2d02      	cmp	r5, #2
 8016ec8:	f104 0314 	add.w	r3, r4, #20
 8016ecc:	d13c      	bne.n	8016f48 <__gethex+0x3e4>
 8016ece:	f8d8 2000 	ldr.w	r2, [r8]
 8016ed2:	3a01      	subs	r2, #1
 8016ed4:	42b2      	cmp	r2, r6
 8016ed6:	d109      	bne.n	8016eec <__gethex+0x388>
 8016ed8:	1171      	asrs	r1, r6, #5
 8016eda:	2201      	movs	r2, #1
 8016edc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016ee0:	f006 061f 	and.w	r6, r6, #31
 8016ee4:	fa02 f606 	lsl.w	r6, r2, r6
 8016ee8:	421e      	tst	r6, r3
 8016eea:	d13a      	bne.n	8016f62 <__gethex+0x3fe>
 8016eec:	f045 0520 	orr.w	r5, r5, #32
 8016ef0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016ef2:	601c      	str	r4, [r3, #0]
 8016ef4:	9b02      	ldr	r3, [sp, #8]
 8016ef6:	601f      	str	r7, [r3, #0]
 8016ef8:	e6b0      	b.n	8016c5c <__gethex+0xf8>
 8016efa:	4299      	cmp	r1, r3
 8016efc:	f843 cc04 	str.w	ip, [r3, #-4]
 8016f00:	d8d9      	bhi.n	8016eb6 <__gethex+0x352>
 8016f02:	68a3      	ldr	r3, [r4, #8]
 8016f04:	459b      	cmp	fp, r3
 8016f06:	db17      	blt.n	8016f38 <__gethex+0x3d4>
 8016f08:	6861      	ldr	r1, [r4, #4]
 8016f0a:	9801      	ldr	r0, [sp, #4]
 8016f0c:	3101      	adds	r1, #1
 8016f0e:	f7fd fc8d 	bl	801482c <_Balloc>
 8016f12:	4681      	mov	r9, r0
 8016f14:	b918      	cbnz	r0, 8016f1e <__gethex+0x3ba>
 8016f16:	4b1a      	ldr	r3, [pc, #104]	@ (8016f80 <__gethex+0x41c>)
 8016f18:	4602      	mov	r2, r0
 8016f1a:	2184      	movs	r1, #132	@ 0x84
 8016f1c:	e6c5      	b.n	8016caa <__gethex+0x146>
 8016f1e:	6922      	ldr	r2, [r4, #16]
 8016f20:	3202      	adds	r2, #2
 8016f22:	f104 010c 	add.w	r1, r4, #12
 8016f26:	0092      	lsls	r2, r2, #2
 8016f28:	300c      	adds	r0, #12
 8016f2a:	f7fc fdb6 	bl	8013a9a <memcpy>
 8016f2e:	4621      	mov	r1, r4
 8016f30:	9801      	ldr	r0, [sp, #4]
 8016f32:	f7fd fcbb 	bl	80148ac <_Bfree>
 8016f36:	464c      	mov	r4, r9
 8016f38:	6923      	ldr	r3, [r4, #16]
 8016f3a:	1c5a      	adds	r2, r3, #1
 8016f3c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8016f40:	6122      	str	r2, [r4, #16]
 8016f42:	2201      	movs	r2, #1
 8016f44:	615a      	str	r2, [r3, #20]
 8016f46:	e7be      	b.n	8016ec6 <__gethex+0x362>
 8016f48:	6922      	ldr	r2, [r4, #16]
 8016f4a:	455a      	cmp	r2, fp
 8016f4c:	dd0b      	ble.n	8016f66 <__gethex+0x402>
 8016f4e:	2101      	movs	r1, #1
 8016f50:	4620      	mov	r0, r4
 8016f52:	f7ff fda0 	bl	8016a96 <rshift>
 8016f56:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016f5a:	3701      	adds	r7, #1
 8016f5c:	42bb      	cmp	r3, r7
 8016f5e:	f6ff aee0 	blt.w	8016d22 <__gethex+0x1be>
 8016f62:	2501      	movs	r5, #1
 8016f64:	e7c2      	b.n	8016eec <__gethex+0x388>
 8016f66:	f016 061f 	ands.w	r6, r6, #31
 8016f6a:	d0fa      	beq.n	8016f62 <__gethex+0x3fe>
 8016f6c:	4453      	add	r3, sl
 8016f6e:	f1c6 0620 	rsb	r6, r6, #32
 8016f72:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8016f76:	f7fd fd4b 	bl	8014a10 <__hi0bits>
 8016f7a:	42b0      	cmp	r0, r6
 8016f7c:	dbe7      	blt.n	8016f4e <__gethex+0x3ea>
 8016f7e:	e7f0      	b.n	8016f62 <__gethex+0x3fe>
 8016f80:	0805d859 	.word	0x0805d859

08016f84 <L_shift>:
 8016f84:	f1c2 0208 	rsb	r2, r2, #8
 8016f88:	0092      	lsls	r2, r2, #2
 8016f8a:	b570      	push	{r4, r5, r6, lr}
 8016f8c:	f1c2 0620 	rsb	r6, r2, #32
 8016f90:	6843      	ldr	r3, [r0, #4]
 8016f92:	6804      	ldr	r4, [r0, #0]
 8016f94:	fa03 f506 	lsl.w	r5, r3, r6
 8016f98:	432c      	orrs	r4, r5
 8016f9a:	40d3      	lsrs	r3, r2
 8016f9c:	6004      	str	r4, [r0, #0]
 8016f9e:	f840 3f04 	str.w	r3, [r0, #4]!
 8016fa2:	4288      	cmp	r0, r1
 8016fa4:	d3f4      	bcc.n	8016f90 <L_shift+0xc>
 8016fa6:	bd70      	pop	{r4, r5, r6, pc}

08016fa8 <__match>:
 8016fa8:	b530      	push	{r4, r5, lr}
 8016faa:	6803      	ldr	r3, [r0, #0]
 8016fac:	3301      	adds	r3, #1
 8016fae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016fb2:	b914      	cbnz	r4, 8016fba <__match+0x12>
 8016fb4:	6003      	str	r3, [r0, #0]
 8016fb6:	2001      	movs	r0, #1
 8016fb8:	bd30      	pop	{r4, r5, pc}
 8016fba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016fbe:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8016fc2:	2d19      	cmp	r5, #25
 8016fc4:	bf98      	it	ls
 8016fc6:	3220      	addls	r2, #32
 8016fc8:	42a2      	cmp	r2, r4
 8016fca:	d0f0      	beq.n	8016fae <__match+0x6>
 8016fcc:	2000      	movs	r0, #0
 8016fce:	e7f3      	b.n	8016fb8 <__match+0x10>

08016fd0 <__hexnan>:
 8016fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016fd4:	680b      	ldr	r3, [r1, #0]
 8016fd6:	6801      	ldr	r1, [r0, #0]
 8016fd8:	115e      	asrs	r6, r3, #5
 8016fda:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8016fde:	f013 031f 	ands.w	r3, r3, #31
 8016fe2:	b087      	sub	sp, #28
 8016fe4:	bf18      	it	ne
 8016fe6:	3604      	addne	r6, #4
 8016fe8:	2500      	movs	r5, #0
 8016fea:	1f37      	subs	r7, r6, #4
 8016fec:	4682      	mov	sl, r0
 8016fee:	4690      	mov	r8, r2
 8016ff0:	9301      	str	r3, [sp, #4]
 8016ff2:	f846 5c04 	str.w	r5, [r6, #-4]
 8016ff6:	46b9      	mov	r9, r7
 8016ff8:	463c      	mov	r4, r7
 8016ffa:	9502      	str	r5, [sp, #8]
 8016ffc:	46ab      	mov	fp, r5
 8016ffe:	784a      	ldrb	r2, [r1, #1]
 8017000:	1c4b      	adds	r3, r1, #1
 8017002:	9303      	str	r3, [sp, #12]
 8017004:	b342      	cbz	r2, 8017058 <__hexnan+0x88>
 8017006:	4610      	mov	r0, r2
 8017008:	9105      	str	r1, [sp, #20]
 801700a:	9204      	str	r2, [sp, #16]
 801700c:	f7ff fd95 	bl	8016b3a <__hexdig_fun>
 8017010:	2800      	cmp	r0, #0
 8017012:	d151      	bne.n	80170b8 <__hexnan+0xe8>
 8017014:	9a04      	ldr	r2, [sp, #16]
 8017016:	9905      	ldr	r1, [sp, #20]
 8017018:	2a20      	cmp	r2, #32
 801701a:	d818      	bhi.n	801704e <__hexnan+0x7e>
 801701c:	9b02      	ldr	r3, [sp, #8]
 801701e:	459b      	cmp	fp, r3
 8017020:	dd13      	ble.n	801704a <__hexnan+0x7a>
 8017022:	454c      	cmp	r4, r9
 8017024:	d206      	bcs.n	8017034 <__hexnan+0x64>
 8017026:	2d07      	cmp	r5, #7
 8017028:	dc04      	bgt.n	8017034 <__hexnan+0x64>
 801702a:	462a      	mov	r2, r5
 801702c:	4649      	mov	r1, r9
 801702e:	4620      	mov	r0, r4
 8017030:	f7ff ffa8 	bl	8016f84 <L_shift>
 8017034:	4544      	cmp	r4, r8
 8017036:	d952      	bls.n	80170de <__hexnan+0x10e>
 8017038:	2300      	movs	r3, #0
 801703a:	f1a4 0904 	sub.w	r9, r4, #4
 801703e:	f844 3c04 	str.w	r3, [r4, #-4]
 8017042:	f8cd b008 	str.w	fp, [sp, #8]
 8017046:	464c      	mov	r4, r9
 8017048:	461d      	mov	r5, r3
 801704a:	9903      	ldr	r1, [sp, #12]
 801704c:	e7d7      	b.n	8016ffe <__hexnan+0x2e>
 801704e:	2a29      	cmp	r2, #41	@ 0x29
 8017050:	d157      	bne.n	8017102 <__hexnan+0x132>
 8017052:	3102      	adds	r1, #2
 8017054:	f8ca 1000 	str.w	r1, [sl]
 8017058:	f1bb 0f00 	cmp.w	fp, #0
 801705c:	d051      	beq.n	8017102 <__hexnan+0x132>
 801705e:	454c      	cmp	r4, r9
 8017060:	d206      	bcs.n	8017070 <__hexnan+0xa0>
 8017062:	2d07      	cmp	r5, #7
 8017064:	dc04      	bgt.n	8017070 <__hexnan+0xa0>
 8017066:	462a      	mov	r2, r5
 8017068:	4649      	mov	r1, r9
 801706a:	4620      	mov	r0, r4
 801706c:	f7ff ff8a 	bl	8016f84 <L_shift>
 8017070:	4544      	cmp	r4, r8
 8017072:	d936      	bls.n	80170e2 <__hexnan+0x112>
 8017074:	f1a8 0204 	sub.w	r2, r8, #4
 8017078:	4623      	mov	r3, r4
 801707a:	f853 1b04 	ldr.w	r1, [r3], #4
 801707e:	f842 1f04 	str.w	r1, [r2, #4]!
 8017082:	429f      	cmp	r7, r3
 8017084:	d2f9      	bcs.n	801707a <__hexnan+0xaa>
 8017086:	1b3b      	subs	r3, r7, r4
 8017088:	f023 0303 	bic.w	r3, r3, #3
 801708c:	3304      	adds	r3, #4
 801708e:	3401      	adds	r4, #1
 8017090:	3e03      	subs	r6, #3
 8017092:	42b4      	cmp	r4, r6
 8017094:	bf88      	it	hi
 8017096:	2304      	movhi	r3, #4
 8017098:	4443      	add	r3, r8
 801709a:	2200      	movs	r2, #0
 801709c:	f843 2b04 	str.w	r2, [r3], #4
 80170a0:	429f      	cmp	r7, r3
 80170a2:	d2fb      	bcs.n	801709c <__hexnan+0xcc>
 80170a4:	683b      	ldr	r3, [r7, #0]
 80170a6:	b91b      	cbnz	r3, 80170b0 <__hexnan+0xe0>
 80170a8:	4547      	cmp	r7, r8
 80170aa:	d128      	bne.n	80170fe <__hexnan+0x12e>
 80170ac:	2301      	movs	r3, #1
 80170ae:	603b      	str	r3, [r7, #0]
 80170b0:	2005      	movs	r0, #5
 80170b2:	b007      	add	sp, #28
 80170b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80170b8:	3501      	adds	r5, #1
 80170ba:	2d08      	cmp	r5, #8
 80170bc:	f10b 0b01 	add.w	fp, fp, #1
 80170c0:	dd06      	ble.n	80170d0 <__hexnan+0x100>
 80170c2:	4544      	cmp	r4, r8
 80170c4:	d9c1      	bls.n	801704a <__hexnan+0x7a>
 80170c6:	2300      	movs	r3, #0
 80170c8:	f844 3c04 	str.w	r3, [r4, #-4]
 80170cc:	2501      	movs	r5, #1
 80170ce:	3c04      	subs	r4, #4
 80170d0:	6822      	ldr	r2, [r4, #0]
 80170d2:	f000 000f 	and.w	r0, r0, #15
 80170d6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80170da:	6020      	str	r0, [r4, #0]
 80170dc:	e7b5      	b.n	801704a <__hexnan+0x7a>
 80170de:	2508      	movs	r5, #8
 80170e0:	e7b3      	b.n	801704a <__hexnan+0x7a>
 80170e2:	9b01      	ldr	r3, [sp, #4]
 80170e4:	2b00      	cmp	r3, #0
 80170e6:	d0dd      	beq.n	80170a4 <__hexnan+0xd4>
 80170e8:	f1c3 0320 	rsb	r3, r3, #32
 80170ec:	f04f 32ff 	mov.w	r2, #4294967295
 80170f0:	40da      	lsrs	r2, r3
 80170f2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80170f6:	4013      	ands	r3, r2
 80170f8:	f846 3c04 	str.w	r3, [r6, #-4]
 80170fc:	e7d2      	b.n	80170a4 <__hexnan+0xd4>
 80170fe:	3f04      	subs	r7, #4
 8017100:	e7d0      	b.n	80170a4 <__hexnan+0xd4>
 8017102:	2004      	movs	r0, #4
 8017104:	e7d5      	b.n	80170b2 <__hexnan+0xe2>

08017106 <__ascii_mbtowc>:
 8017106:	b082      	sub	sp, #8
 8017108:	b901      	cbnz	r1, 801710c <__ascii_mbtowc+0x6>
 801710a:	a901      	add	r1, sp, #4
 801710c:	b142      	cbz	r2, 8017120 <__ascii_mbtowc+0x1a>
 801710e:	b14b      	cbz	r3, 8017124 <__ascii_mbtowc+0x1e>
 8017110:	7813      	ldrb	r3, [r2, #0]
 8017112:	600b      	str	r3, [r1, #0]
 8017114:	7812      	ldrb	r2, [r2, #0]
 8017116:	1e10      	subs	r0, r2, #0
 8017118:	bf18      	it	ne
 801711a:	2001      	movne	r0, #1
 801711c:	b002      	add	sp, #8
 801711e:	4770      	bx	lr
 8017120:	4610      	mov	r0, r2
 8017122:	e7fb      	b.n	801711c <__ascii_mbtowc+0x16>
 8017124:	f06f 0001 	mvn.w	r0, #1
 8017128:	e7f8      	b.n	801711c <__ascii_mbtowc+0x16>
	...

0801712c <_strtoul_l.constprop.0>:
 801712c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017130:	4e34      	ldr	r6, [pc, #208]	@ (8017204 <_strtoul_l.constprop.0+0xd8>)
 8017132:	4686      	mov	lr, r0
 8017134:	460d      	mov	r5, r1
 8017136:	4628      	mov	r0, r5
 8017138:	f815 4b01 	ldrb.w	r4, [r5], #1
 801713c:	5d37      	ldrb	r7, [r6, r4]
 801713e:	f017 0708 	ands.w	r7, r7, #8
 8017142:	d1f8      	bne.n	8017136 <_strtoul_l.constprop.0+0xa>
 8017144:	2c2d      	cmp	r4, #45	@ 0x2d
 8017146:	d12f      	bne.n	80171a8 <_strtoul_l.constprop.0+0x7c>
 8017148:	782c      	ldrb	r4, [r5, #0]
 801714a:	2701      	movs	r7, #1
 801714c:	1c85      	adds	r5, r0, #2
 801714e:	f033 0010 	bics.w	r0, r3, #16
 8017152:	d109      	bne.n	8017168 <_strtoul_l.constprop.0+0x3c>
 8017154:	2c30      	cmp	r4, #48	@ 0x30
 8017156:	d12c      	bne.n	80171b2 <_strtoul_l.constprop.0+0x86>
 8017158:	7828      	ldrb	r0, [r5, #0]
 801715a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801715e:	2858      	cmp	r0, #88	@ 0x58
 8017160:	d127      	bne.n	80171b2 <_strtoul_l.constprop.0+0x86>
 8017162:	786c      	ldrb	r4, [r5, #1]
 8017164:	2310      	movs	r3, #16
 8017166:	3502      	adds	r5, #2
 8017168:	f04f 38ff 	mov.w	r8, #4294967295
 801716c:	2600      	movs	r6, #0
 801716e:	fbb8 f8f3 	udiv	r8, r8, r3
 8017172:	fb03 f908 	mul.w	r9, r3, r8
 8017176:	ea6f 0909 	mvn.w	r9, r9
 801717a:	4630      	mov	r0, r6
 801717c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8017180:	f1bc 0f09 	cmp.w	ip, #9
 8017184:	d81c      	bhi.n	80171c0 <_strtoul_l.constprop.0+0x94>
 8017186:	4664      	mov	r4, ip
 8017188:	42a3      	cmp	r3, r4
 801718a:	dd2a      	ble.n	80171e2 <_strtoul_l.constprop.0+0xb6>
 801718c:	f1b6 3fff 	cmp.w	r6, #4294967295
 8017190:	d007      	beq.n	80171a2 <_strtoul_l.constprop.0+0x76>
 8017192:	4580      	cmp	r8, r0
 8017194:	d322      	bcc.n	80171dc <_strtoul_l.constprop.0+0xb0>
 8017196:	d101      	bne.n	801719c <_strtoul_l.constprop.0+0x70>
 8017198:	45a1      	cmp	r9, r4
 801719a:	db1f      	blt.n	80171dc <_strtoul_l.constprop.0+0xb0>
 801719c:	fb00 4003 	mla	r0, r0, r3, r4
 80171a0:	2601      	movs	r6, #1
 80171a2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80171a6:	e7e9      	b.n	801717c <_strtoul_l.constprop.0+0x50>
 80171a8:	2c2b      	cmp	r4, #43	@ 0x2b
 80171aa:	bf04      	itt	eq
 80171ac:	782c      	ldrbeq	r4, [r5, #0]
 80171ae:	1c85      	addeq	r5, r0, #2
 80171b0:	e7cd      	b.n	801714e <_strtoul_l.constprop.0+0x22>
 80171b2:	2b00      	cmp	r3, #0
 80171b4:	d1d8      	bne.n	8017168 <_strtoul_l.constprop.0+0x3c>
 80171b6:	2c30      	cmp	r4, #48	@ 0x30
 80171b8:	bf0c      	ite	eq
 80171ba:	2308      	moveq	r3, #8
 80171bc:	230a      	movne	r3, #10
 80171be:	e7d3      	b.n	8017168 <_strtoul_l.constprop.0+0x3c>
 80171c0:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80171c4:	f1bc 0f19 	cmp.w	ip, #25
 80171c8:	d801      	bhi.n	80171ce <_strtoul_l.constprop.0+0xa2>
 80171ca:	3c37      	subs	r4, #55	@ 0x37
 80171cc:	e7dc      	b.n	8017188 <_strtoul_l.constprop.0+0x5c>
 80171ce:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80171d2:	f1bc 0f19 	cmp.w	ip, #25
 80171d6:	d804      	bhi.n	80171e2 <_strtoul_l.constprop.0+0xb6>
 80171d8:	3c57      	subs	r4, #87	@ 0x57
 80171da:	e7d5      	b.n	8017188 <_strtoul_l.constprop.0+0x5c>
 80171dc:	f04f 36ff 	mov.w	r6, #4294967295
 80171e0:	e7df      	b.n	80171a2 <_strtoul_l.constprop.0+0x76>
 80171e2:	1c73      	adds	r3, r6, #1
 80171e4:	d106      	bne.n	80171f4 <_strtoul_l.constprop.0+0xc8>
 80171e6:	2322      	movs	r3, #34	@ 0x22
 80171e8:	f8ce 3000 	str.w	r3, [lr]
 80171ec:	4630      	mov	r0, r6
 80171ee:	b932      	cbnz	r2, 80171fe <_strtoul_l.constprop.0+0xd2>
 80171f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80171f4:	b107      	cbz	r7, 80171f8 <_strtoul_l.constprop.0+0xcc>
 80171f6:	4240      	negs	r0, r0
 80171f8:	2a00      	cmp	r2, #0
 80171fa:	d0f9      	beq.n	80171f0 <_strtoul_l.constprop.0+0xc4>
 80171fc:	b106      	cbz	r6, 8017200 <_strtoul_l.constprop.0+0xd4>
 80171fe:	1e69      	subs	r1, r5, #1
 8017200:	6011      	str	r1, [r2, #0]
 8017202:	e7f5      	b.n	80171f0 <_strtoul_l.constprop.0+0xc4>
 8017204:	0805da19 	.word	0x0805da19

08017208 <_strtoul_r>:
 8017208:	f7ff bf90 	b.w	801712c <_strtoul_l.constprop.0>

0801720c <__ascii_wctomb>:
 801720c:	4603      	mov	r3, r0
 801720e:	4608      	mov	r0, r1
 8017210:	b141      	cbz	r1, 8017224 <__ascii_wctomb+0x18>
 8017212:	2aff      	cmp	r2, #255	@ 0xff
 8017214:	d904      	bls.n	8017220 <__ascii_wctomb+0x14>
 8017216:	228a      	movs	r2, #138	@ 0x8a
 8017218:	601a      	str	r2, [r3, #0]
 801721a:	f04f 30ff 	mov.w	r0, #4294967295
 801721e:	4770      	bx	lr
 8017220:	700a      	strb	r2, [r1, #0]
 8017222:	2001      	movs	r0, #1
 8017224:	4770      	bx	lr

08017226 <__sfputc_r>:
 8017226:	6893      	ldr	r3, [r2, #8]
 8017228:	3b01      	subs	r3, #1
 801722a:	2b00      	cmp	r3, #0
 801722c:	b410      	push	{r4}
 801722e:	6093      	str	r3, [r2, #8]
 8017230:	da08      	bge.n	8017244 <__sfputc_r+0x1e>
 8017232:	6994      	ldr	r4, [r2, #24]
 8017234:	42a3      	cmp	r3, r4
 8017236:	db01      	blt.n	801723c <__sfputc_r+0x16>
 8017238:	290a      	cmp	r1, #10
 801723a:	d103      	bne.n	8017244 <__sfputc_r+0x1e>
 801723c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017240:	f000 b932 	b.w	80174a8 <__swbuf_r>
 8017244:	6813      	ldr	r3, [r2, #0]
 8017246:	1c58      	adds	r0, r3, #1
 8017248:	6010      	str	r0, [r2, #0]
 801724a:	7019      	strb	r1, [r3, #0]
 801724c:	4608      	mov	r0, r1
 801724e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017252:	4770      	bx	lr

08017254 <__sfputs_r>:
 8017254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017256:	4606      	mov	r6, r0
 8017258:	460f      	mov	r7, r1
 801725a:	4614      	mov	r4, r2
 801725c:	18d5      	adds	r5, r2, r3
 801725e:	42ac      	cmp	r4, r5
 8017260:	d101      	bne.n	8017266 <__sfputs_r+0x12>
 8017262:	2000      	movs	r0, #0
 8017264:	e007      	b.n	8017276 <__sfputs_r+0x22>
 8017266:	f814 1b01 	ldrb.w	r1, [r4], #1
 801726a:	463a      	mov	r2, r7
 801726c:	4630      	mov	r0, r6
 801726e:	f7ff ffda 	bl	8017226 <__sfputc_r>
 8017272:	1c43      	adds	r3, r0, #1
 8017274:	d1f3      	bne.n	801725e <__sfputs_r+0xa>
 8017276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017278 <_vfiprintf_r>:
 8017278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801727c:	460d      	mov	r5, r1
 801727e:	b09d      	sub	sp, #116	@ 0x74
 8017280:	4614      	mov	r4, r2
 8017282:	4698      	mov	r8, r3
 8017284:	4606      	mov	r6, r0
 8017286:	b118      	cbz	r0, 8017290 <_vfiprintf_r+0x18>
 8017288:	6a03      	ldr	r3, [r0, #32]
 801728a:	b90b      	cbnz	r3, 8017290 <_vfiprintf_r+0x18>
 801728c:	f7fc fa4c 	bl	8013728 <__sinit>
 8017290:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017292:	07d9      	lsls	r1, r3, #31
 8017294:	d405      	bmi.n	80172a2 <_vfiprintf_r+0x2a>
 8017296:	89ab      	ldrh	r3, [r5, #12]
 8017298:	059a      	lsls	r2, r3, #22
 801729a:	d402      	bmi.n	80172a2 <_vfiprintf_r+0x2a>
 801729c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801729e:	f7fc fbf2 	bl	8013a86 <__retarget_lock_acquire_recursive>
 80172a2:	89ab      	ldrh	r3, [r5, #12]
 80172a4:	071b      	lsls	r3, r3, #28
 80172a6:	d501      	bpl.n	80172ac <_vfiprintf_r+0x34>
 80172a8:	692b      	ldr	r3, [r5, #16]
 80172aa:	b99b      	cbnz	r3, 80172d4 <_vfiprintf_r+0x5c>
 80172ac:	4629      	mov	r1, r5
 80172ae:	4630      	mov	r0, r6
 80172b0:	f000 f938 	bl	8017524 <__swsetup_r>
 80172b4:	b170      	cbz	r0, 80172d4 <_vfiprintf_r+0x5c>
 80172b6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80172b8:	07dc      	lsls	r4, r3, #31
 80172ba:	d504      	bpl.n	80172c6 <_vfiprintf_r+0x4e>
 80172bc:	f04f 30ff 	mov.w	r0, #4294967295
 80172c0:	b01d      	add	sp, #116	@ 0x74
 80172c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80172c6:	89ab      	ldrh	r3, [r5, #12]
 80172c8:	0598      	lsls	r0, r3, #22
 80172ca:	d4f7      	bmi.n	80172bc <_vfiprintf_r+0x44>
 80172cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80172ce:	f7fc fbdb 	bl	8013a88 <__retarget_lock_release_recursive>
 80172d2:	e7f3      	b.n	80172bc <_vfiprintf_r+0x44>
 80172d4:	2300      	movs	r3, #0
 80172d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80172d8:	2320      	movs	r3, #32
 80172da:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80172de:	f8cd 800c 	str.w	r8, [sp, #12]
 80172e2:	2330      	movs	r3, #48	@ 0x30
 80172e4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8017494 <_vfiprintf_r+0x21c>
 80172e8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80172ec:	f04f 0901 	mov.w	r9, #1
 80172f0:	4623      	mov	r3, r4
 80172f2:	469a      	mov	sl, r3
 80172f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80172f8:	b10a      	cbz	r2, 80172fe <_vfiprintf_r+0x86>
 80172fa:	2a25      	cmp	r2, #37	@ 0x25
 80172fc:	d1f9      	bne.n	80172f2 <_vfiprintf_r+0x7a>
 80172fe:	ebba 0b04 	subs.w	fp, sl, r4
 8017302:	d00b      	beq.n	801731c <_vfiprintf_r+0xa4>
 8017304:	465b      	mov	r3, fp
 8017306:	4622      	mov	r2, r4
 8017308:	4629      	mov	r1, r5
 801730a:	4630      	mov	r0, r6
 801730c:	f7ff ffa2 	bl	8017254 <__sfputs_r>
 8017310:	3001      	adds	r0, #1
 8017312:	f000 80a7 	beq.w	8017464 <_vfiprintf_r+0x1ec>
 8017316:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017318:	445a      	add	r2, fp
 801731a:	9209      	str	r2, [sp, #36]	@ 0x24
 801731c:	f89a 3000 	ldrb.w	r3, [sl]
 8017320:	2b00      	cmp	r3, #0
 8017322:	f000 809f 	beq.w	8017464 <_vfiprintf_r+0x1ec>
 8017326:	2300      	movs	r3, #0
 8017328:	f04f 32ff 	mov.w	r2, #4294967295
 801732c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017330:	f10a 0a01 	add.w	sl, sl, #1
 8017334:	9304      	str	r3, [sp, #16]
 8017336:	9307      	str	r3, [sp, #28]
 8017338:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801733c:	931a      	str	r3, [sp, #104]	@ 0x68
 801733e:	4654      	mov	r4, sl
 8017340:	2205      	movs	r2, #5
 8017342:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017346:	4853      	ldr	r0, [pc, #332]	@ (8017494 <_vfiprintf_r+0x21c>)
 8017348:	f7e8 ff72 	bl	8000230 <memchr>
 801734c:	9a04      	ldr	r2, [sp, #16]
 801734e:	b9d8      	cbnz	r0, 8017388 <_vfiprintf_r+0x110>
 8017350:	06d1      	lsls	r1, r2, #27
 8017352:	bf44      	itt	mi
 8017354:	2320      	movmi	r3, #32
 8017356:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801735a:	0713      	lsls	r3, r2, #28
 801735c:	bf44      	itt	mi
 801735e:	232b      	movmi	r3, #43	@ 0x2b
 8017360:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017364:	f89a 3000 	ldrb.w	r3, [sl]
 8017368:	2b2a      	cmp	r3, #42	@ 0x2a
 801736a:	d015      	beq.n	8017398 <_vfiprintf_r+0x120>
 801736c:	9a07      	ldr	r2, [sp, #28]
 801736e:	4654      	mov	r4, sl
 8017370:	2000      	movs	r0, #0
 8017372:	f04f 0c0a 	mov.w	ip, #10
 8017376:	4621      	mov	r1, r4
 8017378:	f811 3b01 	ldrb.w	r3, [r1], #1
 801737c:	3b30      	subs	r3, #48	@ 0x30
 801737e:	2b09      	cmp	r3, #9
 8017380:	d94b      	bls.n	801741a <_vfiprintf_r+0x1a2>
 8017382:	b1b0      	cbz	r0, 80173b2 <_vfiprintf_r+0x13a>
 8017384:	9207      	str	r2, [sp, #28]
 8017386:	e014      	b.n	80173b2 <_vfiprintf_r+0x13a>
 8017388:	eba0 0308 	sub.w	r3, r0, r8
 801738c:	fa09 f303 	lsl.w	r3, r9, r3
 8017390:	4313      	orrs	r3, r2
 8017392:	9304      	str	r3, [sp, #16]
 8017394:	46a2      	mov	sl, r4
 8017396:	e7d2      	b.n	801733e <_vfiprintf_r+0xc6>
 8017398:	9b03      	ldr	r3, [sp, #12]
 801739a:	1d19      	adds	r1, r3, #4
 801739c:	681b      	ldr	r3, [r3, #0]
 801739e:	9103      	str	r1, [sp, #12]
 80173a0:	2b00      	cmp	r3, #0
 80173a2:	bfbb      	ittet	lt
 80173a4:	425b      	neglt	r3, r3
 80173a6:	f042 0202 	orrlt.w	r2, r2, #2
 80173aa:	9307      	strge	r3, [sp, #28]
 80173ac:	9307      	strlt	r3, [sp, #28]
 80173ae:	bfb8      	it	lt
 80173b0:	9204      	strlt	r2, [sp, #16]
 80173b2:	7823      	ldrb	r3, [r4, #0]
 80173b4:	2b2e      	cmp	r3, #46	@ 0x2e
 80173b6:	d10a      	bne.n	80173ce <_vfiprintf_r+0x156>
 80173b8:	7863      	ldrb	r3, [r4, #1]
 80173ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80173bc:	d132      	bne.n	8017424 <_vfiprintf_r+0x1ac>
 80173be:	9b03      	ldr	r3, [sp, #12]
 80173c0:	1d1a      	adds	r2, r3, #4
 80173c2:	681b      	ldr	r3, [r3, #0]
 80173c4:	9203      	str	r2, [sp, #12]
 80173c6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80173ca:	3402      	adds	r4, #2
 80173cc:	9305      	str	r3, [sp, #20]
 80173ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80174a4 <_vfiprintf_r+0x22c>
 80173d2:	7821      	ldrb	r1, [r4, #0]
 80173d4:	2203      	movs	r2, #3
 80173d6:	4650      	mov	r0, sl
 80173d8:	f7e8 ff2a 	bl	8000230 <memchr>
 80173dc:	b138      	cbz	r0, 80173ee <_vfiprintf_r+0x176>
 80173de:	9b04      	ldr	r3, [sp, #16]
 80173e0:	eba0 000a 	sub.w	r0, r0, sl
 80173e4:	2240      	movs	r2, #64	@ 0x40
 80173e6:	4082      	lsls	r2, r0
 80173e8:	4313      	orrs	r3, r2
 80173ea:	3401      	adds	r4, #1
 80173ec:	9304      	str	r3, [sp, #16]
 80173ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80173f2:	4829      	ldr	r0, [pc, #164]	@ (8017498 <_vfiprintf_r+0x220>)
 80173f4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80173f8:	2206      	movs	r2, #6
 80173fa:	f7e8 ff19 	bl	8000230 <memchr>
 80173fe:	2800      	cmp	r0, #0
 8017400:	d03f      	beq.n	8017482 <_vfiprintf_r+0x20a>
 8017402:	4b26      	ldr	r3, [pc, #152]	@ (801749c <_vfiprintf_r+0x224>)
 8017404:	bb1b      	cbnz	r3, 801744e <_vfiprintf_r+0x1d6>
 8017406:	9b03      	ldr	r3, [sp, #12]
 8017408:	3307      	adds	r3, #7
 801740a:	f023 0307 	bic.w	r3, r3, #7
 801740e:	3308      	adds	r3, #8
 8017410:	9303      	str	r3, [sp, #12]
 8017412:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017414:	443b      	add	r3, r7
 8017416:	9309      	str	r3, [sp, #36]	@ 0x24
 8017418:	e76a      	b.n	80172f0 <_vfiprintf_r+0x78>
 801741a:	fb0c 3202 	mla	r2, ip, r2, r3
 801741e:	460c      	mov	r4, r1
 8017420:	2001      	movs	r0, #1
 8017422:	e7a8      	b.n	8017376 <_vfiprintf_r+0xfe>
 8017424:	2300      	movs	r3, #0
 8017426:	3401      	adds	r4, #1
 8017428:	9305      	str	r3, [sp, #20]
 801742a:	4619      	mov	r1, r3
 801742c:	f04f 0c0a 	mov.w	ip, #10
 8017430:	4620      	mov	r0, r4
 8017432:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017436:	3a30      	subs	r2, #48	@ 0x30
 8017438:	2a09      	cmp	r2, #9
 801743a:	d903      	bls.n	8017444 <_vfiprintf_r+0x1cc>
 801743c:	2b00      	cmp	r3, #0
 801743e:	d0c6      	beq.n	80173ce <_vfiprintf_r+0x156>
 8017440:	9105      	str	r1, [sp, #20]
 8017442:	e7c4      	b.n	80173ce <_vfiprintf_r+0x156>
 8017444:	fb0c 2101 	mla	r1, ip, r1, r2
 8017448:	4604      	mov	r4, r0
 801744a:	2301      	movs	r3, #1
 801744c:	e7f0      	b.n	8017430 <_vfiprintf_r+0x1b8>
 801744e:	ab03      	add	r3, sp, #12
 8017450:	9300      	str	r3, [sp, #0]
 8017452:	462a      	mov	r2, r5
 8017454:	4b12      	ldr	r3, [pc, #72]	@ (80174a0 <_vfiprintf_r+0x228>)
 8017456:	a904      	add	r1, sp, #16
 8017458:	4630      	mov	r0, r6
 801745a:	f7fb fb0d 	bl	8012a78 <_printf_float>
 801745e:	4607      	mov	r7, r0
 8017460:	1c78      	adds	r0, r7, #1
 8017462:	d1d6      	bne.n	8017412 <_vfiprintf_r+0x19a>
 8017464:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017466:	07d9      	lsls	r1, r3, #31
 8017468:	d405      	bmi.n	8017476 <_vfiprintf_r+0x1fe>
 801746a:	89ab      	ldrh	r3, [r5, #12]
 801746c:	059a      	lsls	r2, r3, #22
 801746e:	d402      	bmi.n	8017476 <_vfiprintf_r+0x1fe>
 8017470:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017472:	f7fc fb09 	bl	8013a88 <__retarget_lock_release_recursive>
 8017476:	89ab      	ldrh	r3, [r5, #12]
 8017478:	065b      	lsls	r3, r3, #25
 801747a:	f53f af1f 	bmi.w	80172bc <_vfiprintf_r+0x44>
 801747e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017480:	e71e      	b.n	80172c0 <_vfiprintf_r+0x48>
 8017482:	ab03      	add	r3, sp, #12
 8017484:	9300      	str	r3, [sp, #0]
 8017486:	462a      	mov	r2, r5
 8017488:	4b05      	ldr	r3, [pc, #20]	@ (80174a0 <_vfiprintf_r+0x228>)
 801748a:	a904      	add	r1, sp, #16
 801748c:	4630      	mov	r0, r6
 801748e:	f7fb fd8b 	bl	8012fa8 <_printf_i>
 8017492:	e7e4      	b.n	801745e <_vfiprintf_r+0x1e6>
 8017494:	0805db19 	.word	0x0805db19
 8017498:	0805db23 	.word	0x0805db23
 801749c:	08012a79 	.word	0x08012a79
 80174a0:	08017255 	.word	0x08017255
 80174a4:	0805db1f 	.word	0x0805db1f

080174a8 <__swbuf_r>:
 80174a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80174aa:	460e      	mov	r6, r1
 80174ac:	4614      	mov	r4, r2
 80174ae:	4605      	mov	r5, r0
 80174b0:	b118      	cbz	r0, 80174ba <__swbuf_r+0x12>
 80174b2:	6a03      	ldr	r3, [r0, #32]
 80174b4:	b90b      	cbnz	r3, 80174ba <__swbuf_r+0x12>
 80174b6:	f7fc f937 	bl	8013728 <__sinit>
 80174ba:	69a3      	ldr	r3, [r4, #24]
 80174bc:	60a3      	str	r3, [r4, #8]
 80174be:	89a3      	ldrh	r3, [r4, #12]
 80174c0:	071a      	lsls	r2, r3, #28
 80174c2:	d501      	bpl.n	80174c8 <__swbuf_r+0x20>
 80174c4:	6923      	ldr	r3, [r4, #16]
 80174c6:	b943      	cbnz	r3, 80174da <__swbuf_r+0x32>
 80174c8:	4621      	mov	r1, r4
 80174ca:	4628      	mov	r0, r5
 80174cc:	f000 f82a 	bl	8017524 <__swsetup_r>
 80174d0:	b118      	cbz	r0, 80174da <__swbuf_r+0x32>
 80174d2:	f04f 37ff 	mov.w	r7, #4294967295
 80174d6:	4638      	mov	r0, r7
 80174d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80174da:	6823      	ldr	r3, [r4, #0]
 80174dc:	6922      	ldr	r2, [r4, #16]
 80174de:	1a98      	subs	r0, r3, r2
 80174e0:	6963      	ldr	r3, [r4, #20]
 80174e2:	b2f6      	uxtb	r6, r6
 80174e4:	4283      	cmp	r3, r0
 80174e6:	4637      	mov	r7, r6
 80174e8:	dc05      	bgt.n	80174f6 <__swbuf_r+0x4e>
 80174ea:	4621      	mov	r1, r4
 80174ec:	4628      	mov	r0, r5
 80174ee:	f7ff f9d3 	bl	8016898 <_fflush_r>
 80174f2:	2800      	cmp	r0, #0
 80174f4:	d1ed      	bne.n	80174d2 <__swbuf_r+0x2a>
 80174f6:	68a3      	ldr	r3, [r4, #8]
 80174f8:	3b01      	subs	r3, #1
 80174fa:	60a3      	str	r3, [r4, #8]
 80174fc:	6823      	ldr	r3, [r4, #0]
 80174fe:	1c5a      	adds	r2, r3, #1
 8017500:	6022      	str	r2, [r4, #0]
 8017502:	701e      	strb	r6, [r3, #0]
 8017504:	6962      	ldr	r2, [r4, #20]
 8017506:	1c43      	adds	r3, r0, #1
 8017508:	429a      	cmp	r2, r3
 801750a:	d004      	beq.n	8017516 <__swbuf_r+0x6e>
 801750c:	89a3      	ldrh	r3, [r4, #12]
 801750e:	07db      	lsls	r3, r3, #31
 8017510:	d5e1      	bpl.n	80174d6 <__swbuf_r+0x2e>
 8017512:	2e0a      	cmp	r6, #10
 8017514:	d1df      	bne.n	80174d6 <__swbuf_r+0x2e>
 8017516:	4621      	mov	r1, r4
 8017518:	4628      	mov	r0, r5
 801751a:	f7ff f9bd 	bl	8016898 <_fflush_r>
 801751e:	2800      	cmp	r0, #0
 8017520:	d0d9      	beq.n	80174d6 <__swbuf_r+0x2e>
 8017522:	e7d6      	b.n	80174d2 <__swbuf_r+0x2a>

08017524 <__swsetup_r>:
 8017524:	b538      	push	{r3, r4, r5, lr}
 8017526:	4b29      	ldr	r3, [pc, #164]	@ (80175cc <__swsetup_r+0xa8>)
 8017528:	4605      	mov	r5, r0
 801752a:	6818      	ldr	r0, [r3, #0]
 801752c:	460c      	mov	r4, r1
 801752e:	b118      	cbz	r0, 8017538 <__swsetup_r+0x14>
 8017530:	6a03      	ldr	r3, [r0, #32]
 8017532:	b90b      	cbnz	r3, 8017538 <__swsetup_r+0x14>
 8017534:	f7fc f8f8 	bl	8013728 <__sinit>
 8017538:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801753c:	0719      	lsls	r1, r3, #28
 801753e:	d422      	bmi.n	8017586 <__swsetup_r+0x62>
 8017540:	06da      	lsls	r2, r3, #27
 8017542:	d407      	bmi.n	8017554 <__swsetup_r+0x30>
 8017544:	2209      	movs	r2, #9
 8017546:	602a      	str	r2, [r5, #0]
 8017548:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801754c:	81a3      	strh	r3, [r4, #12]
 801754e:	f04f 30ff 	mov.w	r0, #4294967295
 8017552:	e033      	b.n	80175bc <__swsetup_r+0x98>
 8017554:	0758      	lsls	r0, r3, #29
 8017556:	d512      	bpl.n	801757e <__swsetup_r+0x5a>
 8017558:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801755a:	b141      	cbz	r1, 801756e <__swsetup_r+0x4a>
 801755c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017560:	4299      	cmp	r1, r3
 8017562:	d002      	beq.n	801756a <__swsetup_r+0x46>
 8017564:	4628      	mov	r0, r5
 8017566:	f7fd f917 	bl	8014798 <_free_r>
 801756a:	2300      	movs	r3, #0
 801756c:	6363      	str	r3, [r4, #52]	@ 0x34
 801756e:	89a3      	ldrh	r3, [r4, #12]
 8017570:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8017574:	81a3      	strh	r3, [r4, #12]
 8017576:	2300      	movs	r3, #0
 8017578:	6063      	str	r3, [r4, #4]
 801757a:	6923      	ldr	r3, [r4, #16]
 801757c:	6023      	str	r3, [r4, #0]
 801757e:	89a3      	ldrh	r3, [r4, #12]
 8017580:	f043 0308 	orr.w	r3, r3, #8
 8017584:	81a3      	strh	r3, [r4, #12]
 8017586:	6923      	ldr	r3, [r4, #16]
 8017588:	b94b      	cbnz	r3, 801759e <__swsetup_r+0x7a>
 801758a:	89a3      	ldrh	r3, [r4, #12]
 801758c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8017590:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017594:	d003      	beq.n	801759e <__swsetup_r+0x7a>
 8017596:	4621      	mov	r1, r4
 8017598:	4628      	mov	r0, r5
 801759a:	f000 f883 	bl	80176a4 <__smakebuf_r>
 801759e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80175a2:	f013 0201 	ands.w	r2, r3, #1
 80175a6:	d00a      	beq.n	80175be <__swsetup_r+0x9a>
 80175a8:	2200      	movs	r2, #0
 80175aa:	60a2      	str	r2, [r4, #8]
 80175ac:	6962      	ldr	r2, [r4, #20]
 80175ae:	4252      	negs	r2, r2
 80175b0:	61a2      	str	r2, [r4, #24]
 80175b2:	6922      	ldr	r2, [r4, #16]
 80175b4:	b942      	cbnz	r2, 80175c8 <__swsetup_r+0xa4>
 80175b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80175ba:	d1c5      	bne.n	8017548 <__swsetup_r+0x24>
 80175bc:	bd38      	pop	{r3, r4, r5, pc}
 80175be:	0799      	lsls	r1, r3, #30
 80175c0:	bf58      	it	pl
 80175c2:	6962      	ldrpl	r2, [r4, #20]
 80175c4:	60a2      	str	r2, [r4, #8]
 80175c6:	e7f4      	b.n	80175b2 <__swsetup_r+0x8e>
 80175c8:	2000      	movs	r0, #0
 80175ca:	e7f7      	b.n	80175bc <__swsetup_r+0x98>
 80175cc:	20001438 	.word	0x20001438

080175d0 <_raise_r>:
 80175d0:	291f      	cmp	r1, #31
 80175d2:	b538      	push	{r3, r4, r5, lr}
 80175d4:	4605      	mov	r5, r0
 80175d6:	460c      	mov	r4, r1
 80175d8:	d904      	bls.n	80175e4 <_raise_r+0x14>
 80175da:	2316      	movs	r3, #22
 80175dc:	6003      	str	r3, [r0, #0]
 80175de:	f04f 30ff 	mov.w	r0, #4294967295
 80175e2:	bd38      	pop	{r3, r4, r5, pc}
 80175e4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80175e6:	b112      	cbz	r2, 80175ee <_raise_r+0x1e>
 80175e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80175ec:	b94b      	cbnz	r3, 8017602 <_raise_r+0x32>
 80175ee:	4628      	mov	r0, r5
 80175f0:	f000 f830 	bl	8017654 <_getpid_r>
 80175f4:	4622      	mov	r2, r4
 80175f6:	4601      	mov	r1, r0
 80175f8:	4628      	mov	r0, r5
 80175fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80175fe:	f000 b817 	b.w	8017630 <_kill_r>
 8017602:	2b01      	cmp	r3, #1
 8017604:	d00a      	beq.n	801761c <_raise_r+0x4c>
 8017606:	1c59      	adds	r1, r3, #1
 8017608:	d103      	bne.n	8017612 <_raise_r+0x42>
 801760a:	2316      	movs	r3, #22
 801760c:	6003      	str	r3, [r0, #0]
 801760e:	2001      	movs	r0, #1
 8017610:	e7e7      	b.n	80175e2 <_raise_r+0x12>
 8017612:	2100      	movs	r1, #0
 8017614:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8017618:	4620      	mov	r0, r4
 801761a:	4798      	blx	r3
 801761c:	2000      	movs	r0, #0
 801761e:	e7e0      	b.n	80175e2 <_raise_r+0x12>

08017620 <raise>:
 8017620:	4b02      	ldr	r3, [pc, #8]	@ (801762c <raise+0xc>)
 8017622:	4601      	mov	r1, r0
 8017624:	6818      	ldr	r0, [r3, #0]
 8017626:	f7ff bfd3 	b.w	80175d0 <_raise_r>
 801762a:	bf00      	nop
 801762c:	20001438 	.word	0x20001438

08017630 <_kill_r>:
 8017630:	b538      	push	{r3, r4, r5, lr}
 8017632:	4d07      	ldr	r5, [pc, #28]	@ (8017650 <_kill_r+0x20>)
 8017634:	2300      	movs	r3, #0
 8017636:	4604      	mov	r4, r0
 8017638:	4608      	mov	r0, r1
 801763a:	4611      	mov	r1, r2
 801763c:	602b      	str	r3, [r5, #0]
 801763e:	f001 f839 	bl	80186b4 <_kill>
 8017642:	1c43      	adds	r3, r0, #1
 8017644:	d102      	bne.n	801764c <_kill_r+0x1c>
 8017646:	682b      	ldr	r3, [r5, #0]
 8017648:	b103      	cbz	r3, 801764c <_kill_r+0x1c>
 801764a:	6023      	str	r3, [r4, #0]
 801764c:	bd38      	pop	{r3, r4, r5, pc}
 801764e:	bf00      	nop
 8017650:	2000c7bc 	.word	0x2000c7bc

08017654 <_getpid_r>:
 8017654:	f001 b81e 	b.w	8018694 <_getpid>

08017658 <__swhatbuf_r>:
 8017658:	b570      	push	{r4, r5, r6, lr}
 801765a:	460c      	mov	r4, r1
 801765c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017660:	2900      	cmp	r1, #0
 8017662:	b096      	sub	sp, #88	@ 0x58
 8017664:	4615      	mov	r5, r2
 8017666:	461e      	mov	r6, r3
 8017668:	da0d      	bge.n	8017686 <__swhatbuf_r+0x2e>
 801766a:	89a3      	ldrh	r3, [r4, #12]
 801766c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8017670:	f04f 0100 	mov.w	r1, #0
 8017674:	bf14      	ite	ne
 8017676:	2340      	movne	r3, #64	@ 0x40
 8017678:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801767c:	2000      	movs	r0, #0
 801767e:	6031      	str	r1, [r6, #0]
 8017680:	602b      	str	r3, [r5, #0]
 8017682:	b016      	add	sp, #88	@ 0x58
 8017684:	bd70      	pop	{r4, r5, r6, pc}
 8017686:	466a      	mov	r2, sp
 8017688:	f000 f848 	bl	801771c <_fstat_r>
 801768c:	2800      	cmp	r0, #0
 801768e:	dbec      	blt.n	801766a <__swhatbuf_r+0x12>
 8017690:	9901      	ldr	r1, [sp, #4]
 8017692:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8017696:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801769a:	4259      	negs	r1, r3
 801769c:	4159      	adcs	r1, r3
 801769e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80176a2:	e7eb      	b.n	801767c <__swhatbuf_r+0x24>

080176a4 <__smakebuf_r>:
 80176a4:	898b      	ldrh	r3, [r1, #12]
 80176a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80176a8:	079d      	lsls	r5, r3, #30
 80176aa:	4606      	mov	r6, r0
 80176ac:	460c      	mov	r4, r1
 80176ae:	d507      	bpl.n	80176c0 <__smakebuf_r+0x1c>
 80176b0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80176b4:	6023      	str	r3, [r4, #0]
 80176b6:	6123      	str	r3, [r4, #16]
 80176b8:	2301      	movs	r3, #1
 80176ba:	6163      	str	r3, [r4, #20]
 80176bc:	b003      	add	sp, #12
 80176be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80176c0:	ab01      	add	r3, sp, #4
 80176c2:	466a      	mov	r2, sp
 80176c4:	f7ff ffc8 	bl	8017658 <__swhatbuf_r>
 80176c8:	9f00      	ldr	r7, [sp, #0]
 80176ca:	4605      	mov	r5, r0
 80176cc:	4639      	mov	r1, r7
 80176ce:	4630      	mov	r0, r6
 80176d0:	f7fb f878 	bl	80127c4 <_malloc_r>
 80176d4:	b948      	cbnz	r0, 80176ea <__smakebuf_r+0x46>
 80176d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80176da:	059a      	lsls	r2, r3, #22
 80176dc:	d4ee      	bmi.n	80176bc <__smakebuf_r+0x18>
 80176de:	f023 0303 	bic.w	r3, r3, #3
 80176e2:	f043 0302 	orr.w	r3, r3, #2
 80176e6:	81a3      	strh	r3, [r4, #12]
 80176e8:	e7e2      	b.n	80176b0 <__smakebuf_r+0xc>
 80176ea:	89a3      	ldrh	r3, [r4, #12]
 80176ec:	6020      	str	r0, [r4, #0]
 80176ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80176f2:	81a3      	strh	r3, [r4, #12]
 80176f4:	9b01      	ldr	r3, [sp, #4]
 80176f6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80176fa:	b15b      	cbz	r3, 8017714 <__smakebuf_r+0x70>
 80176fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017700:	4630      	mov	r0, r6
 8017702:	f000 f81d 	bl	8017740 <_isatty_r>
 8017706:	b128      	cbz	r0, 8017714 <__smakebuf_r+0x70>
 8017708:	89a3      	ldrh	r3, [r4, #12]
 801770a:	f023 0303 	bic.w	r3, r3, #3
 801770e:	f043 0301 	orr.w	r3, r3, #1
 8017712:	81a3      	strh	r3, [r4, #12]
 8017714:	89a3      	ldrh	r3, [r4, #12]
 8017716:	431d      	orrs	r5, r3
 8017718:	81a5      	strh	r5, [r4, #12]
 801771a:	e7cf      	b.n	80176bc <__smakebuf_r+0x18>

0801771c <_fstat_r>:
 801771c:	b538      	push	{r3, r4, r5, lr}
 801771e:	4d07      	ldr	r5, [pc, #28]	@ (801773c <_fstat_r+0x20>)
 8017720:	2300      	movs	r3, #0
 8017722:	4604      	mov	r4, r0
 8017724:	4608      	mov	r0, r1
 8017726:	4611      	mov	r1, r2
 8017728:	602b      	str	r3, [r5, #0]
 801772a:	f000 ffab 	bl	8018684 <_fstat>
 801772e:	1c43      	adds	r3, r0, #1
 8017730:	d102      	bne.n	8017738 <_fstat_r+0x1c>
 8017732:	682b      	ldr	r3, [r5, #0]
 8017734:	b103      	cbz	r3, 8017738 <_fstat_r+0x1c>
 8017736:	6023      	str	r3, [r4, #0]
 8017738:	bd38      	pop	{r3, r4, r5, pc}
 801773a:	bf00      	nop
 801773c:	2000c7bc 	.word	0x2000c7bc

08017740 <_isatty_r>:
 8017740:	b538      	push	{r3, r4, r5, lr}
 8017742:	4d06      	ldr	r5, [pc, #24]	@ (801775c <_isatty_r+0x1c>)
 8017744:	2300      	movs	r3, #0
 8017746:	4604      	mov	r4, r0
 8017748:	4608      	mov	r0, r1
 801774a:	602b      	str	r3, [r5, #0]
 801774c:	f000 ffaa 	bl	80186a4 <_isatty>
 8017750:	1c43      	adds	r3, r0, #1
 8017752:	d102      	bne.n	801775a <_isatty_r+0x1a>
 8017754:	682b      	ldr	r3, [r5, #0]
 8017756:	b103      	cbz	r3, 801775a <_isatty_r+0x1a>
 8017758:	6023      	str	r3, [r4, #0]
 801775a:	bd38      	pop	{r3, r4, r5, pc}
 801775c:	2000c7bc 	.word	0x2000c7bc

08017760 <pow>:
 8017760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017762:	ed2d 8b02 	vpush	{d8}
 8017766:	eeb0 8a40 	vmov.f32	s16, s0
 801776a:	eef0 8a60 	vmov.f32	s17, s1
 801776e:	ec55 4b11 	vmov	r4, r5, d1
 8017772:	f000 f9b5 	bl	8017ae0 <__ieee754_pow>
 8017776:	4622      	mov	r2, r4
 8017778:	462b      	mov	r3, r5
 801777a:	4620      	mov	r0, r4
 801777c:	4629      	mov	r1, r5
 801777e:	ec57 6b10 	vmov	r6, r7, d0
 8017782:	f7e9 fa03 	bl	8000b8c <__aeabi_dcmpun>
 8017786:	2800      	cmp	r0, #0
 8017788:	d13b      	bne.n	8017802 <pow+0xa2>
 801778a:	ec51 0b18 	vmov	r0, r1, d8
 801778e:	2200      	movs	r2, #0
 8017790:	2300      	movs	r3, #0
 8017792:	f7e9 f9c9 	bl	8000b28 <__aeabi_dcmpeq>
 8017796:	b1b8      	cbz	r0, 80177c8 <pow+0x68>
 8017798:	2200      	movs	r2, #0
 801779a:	2300      	movs	r3, #0
 801779c:	4620      	mov	r0, r4
 801779e:	4629      	mov	r1, r5
 80177a0:	f7e9 f9c2 	bl	8000b28 <__aeabi_dcmpeq>
 80177a4:	2800      	cmp	r0, #0
 80177a6:	d146      	bne.n	8017836 <pow+0xd6>
 80177a8:	ec45 4b10 	vmov	d0, r4, r5
 80177ac:	f000 f874 	bl	8017898 <finite>
 80177b0:	b338      	cbz	r0, 8017802 <pow+0xa2>
 80177b2:	2200      	movs	r2, #0
 80177b4:	2300      	movs	r3, #0
 80177b6:	4620      	mov	r0, r4
 80177b8:	4629      	mov	r1, r5
 80177ba:	f7e9 f9bf 	bl	8000b3c <__aeabi_dcmplt>
 80177be:	b300      	cbz	r0, 8017802 <pow+0xa2>
 80177c0:	f7fc f936 	bl	8013a30 <__errno>
 80177c4:	2322      	movs	r3, #34	@ 0x22
 80177c6:	e01b      	b.n	8017800 <pow+0xa0>
 80177c8:	ec47 6b10 	vmov	d0, r6, r7
 80177cc:	f000 f864 	bl	8017898 <finite>
 80177d0:	b9e0      	cbnz	r0, 801780c <pow+0xac>
 80177d2:	eeb0 0a48 	vmov.f32	s0, s16
 80177d6:	eef0 0a68 	vmov.f32	s1, s17
 80177da:	f000 f85d 	bl	8017898 <finite>
 80177de:	b1a8      	cbz	r0, 801780c <pow+0xac>
 80177e0:	ec45 4b10 	vmov	d0, r4, r5
 80177e4:	f000 f858 	bl	8017898 <finite>
 80177e8:	b180      	cbz	r0, 801780c <pow+0xac>
 80177ea:	4632      	mov	r2, r6
 80177ec:	463b      	mov	r3, r7
 80177ee:	4630      	mov	r0, r6
 80177f0:	4639      	mov	r1, r7
 80177f2:	f7e9 f9cb 	bl	8000b8c <__aeabi_dcmpun>
 80177f6:	2800      	cmp	r0, #0
 80177f8:	d0e2      	beq.n	80177c0 <pow+0x60>
 80177fa:	f7fc f919 	bl	8013a30 <__errno>
 80177fe:	2321      	movs	r3, #33	@ 0x21
 8017800:	6003      	str	r3, [r0, #0]
 8017802:	ecbd 8b02 	vpop	{d8}
 8017806:	ec47 6b10 	vmov	d0, r6, r7
 801780a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801780c:	2200      	movs	r2, #0
 801780e:	2300      	movs	r3, #0
 8017810:	4630      	mov	r0, r6
 8017812:	4639      	mov	r1, r7
 8017814:	f7e9 f988 	bl	8000b28 <__aeabi_dcmpeq>
 8017818:	2800      	cmp	r0, #0
 801781a:	d0f2      	beq.n	8017802 <pow+0xa2>
 801781c:	eeb0 0a48 	vmov.f32	s0, s16
 8017820:	eef0 0a68 	vmov.f32	s1, s17
 8017824:	f000 f838 	bl	8017898 <finite>
 8017828:	2800      	cmp	r0, #0
 801782a:	d0ea      	beq.n	8017802 <pow+0xa2>
 801782c:	ec45 4b10 	vmov	d0, r4, r5
 8017830:	f000 f832 	bl	8017898 <finite>
 8017834:	e7c3      	b.n	80177be <pow+0x5e>
 8017836:	4f01      	ldr	r7, [pc, #4]	@ (801783c <pow+0xdc>)
 8017838:	2600      	movs	r6, #0
 801783a:	e7e2      	b.n	8017802 <pow+0xa2>
 801783c:	3ff00000 	.word	0x3ff00000

08017840 <sqrt>:
 8017840:	b538      	push	{r3, r4, r5, lr}
 8017842:	ed2d 8b02 	vpush	{d8}
 8017846:	ec55 4b10 	vmov	r4, r5, d0
 801784a:	f000 f86d 	bl	8017928 <__ieee754_sqrt>
 801784e:	4622      	mov	r2, r4
 8017850:	462b      	mov	r3, r5
 8017852:	4620      	mov	r0, r4
 8017854:	4629      	mov	r1, r5
 8017856:	eeb0 8a40 	vmov.f32	s16, s0
 801785a:	eef0 8a60 	vmov.f32	s17, s1
 801785e:	f7e9 f995 	bl	8000b8c <__aeabi_dcmpun>
 8017862:	b990      	cbnz	r0, 801788a <sqrt+0x4a>
 8017864:	2200      	movs	r2, #0
 8017866:	2300      	movs	r3, #0
 8017868:	4620      	mov	r0, r4
 801786a:	4629      	mov	r1, r5
 801786c:	f7e9 f966 	bl	8000b3c <__aeabi_dcmplt>
 8017870:	b158      	cbz	r0, 801788a <sqrt+0x4a>
 8017872:	f7fc f8dd 	bl	8013a30 <__errno>
 8017876:	2321      	movs	r3, #33	@ 0x21
 8017878:	6003      	str	r3, [r0, #0]
 801787a:	2200      	movs	r2, #0
 801787c:	2300      	movs	r3, #0
 801787e:	4610      	mov	r0, r2
 8017880:	4619      	mov	r1, r3
 8017882:	f7e9 f813 	bl	80008ac <__aeabi_ddiv>
 8017886:	ec41 0b18 	vmov	d8, r0, r1
 801788a:	eeb0 0a48 	vmov.f32	s0, s16
 801788e:	eef0 0a68 	vmov.f32	s1, s17
 8017892:	ecbd 8b02 	vpop	{d8}
 8017896:	bd38      	pop	{r3, r4, r5, pc}

08017898 <finite>:
 8017898:	b082      	sub	sp, #8
 801789a:	ed8d 0b00 	vstr	d0, [sp]
 801789e:	9801      	ldr	r0, [sp, #4]
 80178a0:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 80178a4:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80178a8:	0fc0      	lsrs	r0, r0, #31
 80178aa:	b002      	add	sp, #8
 80178ac:	4770      	bx	lr

080178ae <with_errno>:
 80178ae:	b510      	push	{r4, lr}
 80178b0:	ed2d 8b02 	vpush	{d8}
 80178b4:	eeb0 8a40 	vmov.f32	s16, s0
 80178b8:	eef0 8a60 	vmov.f32	s17, s1
 80178bc:	4604      	mov	r4, r0
 80178be:	f7fc f8b7 	bl	8013a30 <__errno>
 80178c2:	eeb0 0a48 	vmov.f32	s0, s16
 80178c6:	eef0 0a68 	vmov.f32	s1, s17
 80178ca:	ecbd 8b02 	vpop	{d8}
 80178ce:	6004      	str	r4, [r0, #0]
 80178d0:	bd10      	pop	{r4, pc}

080178d2 <xflow>:
 80178d2:	4603      	mov	r3, r0
 80178d4:	b507      	push	{r0, r1, r2, lr}
 80178d6:	ec51 0b10 	vmov	r0, r1, d0
 80178da:	b183      	cbz	r3, 80178fe <xflow+0x2c>
 80178dc:	4602      	mov	r2, r0
 80178de:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80178e2:	e9cd 2300 	strd	r2, r3, [sp]
 80178e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80178ea:	f7e8 feb5 	bl	8000658 <__aeabi_dmul>
 80178ee:	ec41 0b10 	vmov	d0, r0, r1
 80178f2:	2022      	movs	r0, #34	@ 0x22
 80178f4:	b003      	add	sp, #12
 80178f6:	f85d eb04 	ldr.w	lr, [sp], #4
 80178fa:	f7ff bfd8 	b.w	80178ae <with_errno>
 80178fe:	4602      	mov	r2, r0
 8017900:	460b      	mov	r3, r1
 8017902:	e7ee      	b.n	80178e2 <xflow+0x10>
 8017904:	0000      	movs	r0, r0
	...

08017908 <__math_uflow>:
 8017908:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8017910 <__math_uflow+0x8>
 801790c:	f7ff bfe1 	b.w	80178d2 <xflow>
 8017910:	00000000 	.word	0x00000000
 8017914:	10000000 	.word	0x10000000

08017918 <__math_oflow>:
 8017918:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8017920 <__math_oflow+0x8>
 801791c:	f7ff bfd9 	b.w	80178d2 <xflow>
 8017920:	00000000 	.word	0x00000000
 8017924:	70000000 	.word	0x70000000

08017928 <__ieee754_sqrt>:
 8017928:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801792c:	4a68      	ldr	r2, [pc, #416]	@ (8017ad0 <__ieee754_sqrt+0x1a8>)
 801792e:	ec55 4b10 	vmov	r4, r5, d0
 8017932:	43aa      	bics	r2, r5
 8017934:	462b      	mov	r3, r5
 8017936:	4621      	mov	r1, r4
 8017938:	d110      	bne.n	801795c <__ieee754_sqrt+0x34>
 801793a:	4622      	mov	r2, r4
 801793c:	4620      	mov	r0, r4
 801793e:	4629      	mov	r1, r5
 8017940:	f7e8 fe8a 	bl	8000658 <__aeabi_dmul>
 8017944:	4602      	mov	r2, r0
 8017946:	460b      	mov	r3, r1
 8017948:	4620      	mov	r0, r4
 801794a:	4629      	mov	r1, r5
 801794c:	f7e8 fcce 	bl	80002ec <__adddf3>
 8017950:	4604      	mov	r4, r0
 8017952:	460d      	mov	r5, r1
 8017954:	ec45 4b10 	vmov	d0, r4, r5
 8017958:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801795c:	2d00      	cmp	r5, #0
 801795e:	dc0e      	bgt.n	801797e <__ieee754_sqrt+0x56>
 8017960:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8017964:	4322      	orrs	r2, r4
 8017966:	d0f5      	beq.n	8017954 <__ieee754_sqrt+0x2c>
 8017968:	b19d      	cbz	r5, 8017992 <__ieee754_sqrt+0x6a>
 801796a:	4622      	mov	r2, r4
 801796c:	4620      	mov	r0, r4
 801796e:	4629      	mov	r1, r5
 8017970:	f7e8 fcba 	bl	80002e8 <__aeabi_dsub>
 8017974:	4602      	mov	r2, r0
 8017976:	460b      	mov	r3, r1
 8017978:	f7e8 ff98 	bl	80008ac <__aeabi_ddiv>
 801797c:	e7e8      	b.n	8017950 <__ieee754_sqrt+0x28>
 801797e:	152a      	asrs	r2, r5, #20
 8017980:	d115      	bne.n	80179ae <__ieee754_sqrt+0x86>
 8017982:	2000      	movs	r0, #0
 8017984:	e009      	b.n	801799a <__ieee754_sqrt+0x72>
 8017986:	0acb      	lsrs	r3, r1, #11
 8017988:	3a15      	subs	r2, #21
 801798a:	0549      	lsls	r1, r1, #21
 801798c:	2b00      	cmp	r3, #0
 801798e:	d0fa      	beq.n	8017986 <__ieee754_sqrt+0x5e>
 8017990:	e7f7      	b.n	8017982 <__ieee754_sqrt+0x5a>
 8017992:	462a      	mov	r2, r5
 8017994:	e7fa      	b.n	801798c <__ieee754_sqrt+0x64>
 8017996:	005b      	lsls	r3, r3, #1
 8017998:	3001      	adds	r0, #1
 801799a:	02dc      	lsls	r4, r3, #11
 801799c:	d5fb      	bpl.n	8017996 <__ieee754_sqrt+0x6e>
 801799e:	1e44      	subs	r4, r0, #1
 80179a0:	1b12      	subs	r2, r2, r4
 80179a2:	f1c0 0420 	rsb	r4, r0, #32
 80179a6:	fa21 f404 	lsr.w	r4, r1, r4
 80179aa:	4323      	orrs	r3, r4
 80179ac:	4081      	lsls	r1, r0
 80179ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80179b2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 80179b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80179ba:	07d2      	lsls	r2, r2, #31
 80179bc:	bf5c      	itt	pl
 80179be:	005b      	lslpl	r3, r3, #1
 80179c0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80179c4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80179c8:	bf58      	it	pl
 80179ca:	0049      	lslpl	r1, r1, #1
 80179cc:	2600      	movs	r6, #0
 80179ce:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80179d2:	106d      	asrs	r5, r5, #1
 80179d4:	0049      	lsls	r1, r1, #1
 80179d6:	2016      	movs	r0, #22
 80179d8:	4632      	mov	r2, r6
 80179da:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80179de:	1917      	adds	r7, r2, r4
 80179e0:	429f      	cmp	r7, r3
 80179e2:	bfde      	ittt	le
 80179e4:	193a      	addle	r2, r7, r4
 80179e6:	1bdb      	suble	r3, r3, r7
 80179e8:	1936      	addle	r6, r6, r4
 80179ea:	0fcf      	lsrs	r7, r1, #31
 80179ec:	3801      	subs	r0, #1
 80179ee:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80179f2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80179f6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80179fa:	d1f0      	bne.n	80179de <__ieee754_sqrt+0xb6>
 80179fc:	4604      	mov	r4, r0
 80179fe:	2720      	movs	r7, #32
 8017a00:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8017a04:	429a      	cmp	r2, r3
 8017a06:	eb00 0e0c 	add.w	lr, r0, ip
 8017a0a:	db02      	blt.n	8017a12 <__ieee754_sqrt+0xea>
 8017a0c:	d113      	bne.n	8017a36 <__ieee754_sqrt+0x10e>
 8017a0e:	458e      	cmp	lr, r1
 8017a10:	d811      	bhi.n	8017a36 <__ieee754_sqrt+0x10e>
 8017a12:	f1be 0f00 	cmp.w	lr, #0
 8017a16:	eb0e 000c 	add.w	r0, lr, ip
 8017a1a:	da42      	bge.n	8017aa2 <__ieee754_sqrt+0x17a>
 8017a1c:	2800      	cmp	r0, #0
 8017a1e:	db40      	blt.n	8017aa2 <__ieee754_sqrt+0x17a>
 8017a20:	f102 0801 	add.w	r8, r2, #1
 8017a24:	1a9b      	subs	r3, r3, r2
 8017a26:	458e      	cmp	lr, r1
 8017a28:	bf88      	it	hi
 8017a2a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8017a2e:	eba1 010e 	sub.w	r1, r1, lr
 8017a32:	4464      	add	r4, ip
 8017a34:	4642      	mov	r2, r8
 8017a36:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8017a3a:	3f01      	subs	r7, #1
 8017a3c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8017a40:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8017a44:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8017a48:	d1dc      	bne.n	8017a04 <__ieee754_sqrt+0xdc>
 8017a4a:	4319      	orrs	r1, r3
 8017a4c:	d01b      	beq.n	8017a86 <__ieee754_sqrt+0x15e>
 8017a4e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8017ad4 <__ieee754_sqrt+0x1ac>
 8017a52:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8017ad8 <__ieee754_sqrt+0x1b0>
 8017a56:	e9da 0100 	ldrd	r0, r1, [sl]
 8017a5a:	e9db 2300 	ldrd	r2, r3, [fp]
 8017a5e:	f7e8 fc43 	bl	80002e8 <__aeabi_dsub>
 8017a62:	e9da 8900 	ldrd	r8, r9, [sl]
 8017a66:	4602      	mov	r2, r0
 8017a68:	460b      	mov	r3, r1
 8017a6a:	4640      	mov	r0, r8
 8017a6c:	4649      	mov	r1, r9
 8017a6e:	f7e9 f86f 	bl	8000b50 <__aeabi_dcmple>
 8017a72:	b140      	cbz	r0, 8017a86 <__ieee754_sqrt+0x15e>
 8017a74:	f1b4 3fff 	cmp.w	r4, #4294967295
 8017a78:	e9da 0100 	ldrd	r0, r1, [sl]
 8017a7c:	e9db 2300 	ldrd	r2, r3, [fp]
 8017a80:	d111      	bne.n	8017aa6 <__ieee754_sqrt+0x17e>
 8017a82:	3601      	adds	r6, #1
 8017a84:	463c      	mov	r4, r7
 8017a86:	1072      	asrs	r2, r6, #1
 8017a88:	0863      	lsrs	r3, r4, #1
 8017a8a:	07f1      	lsls	r1, r6, #31
 8017a8c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8017a90:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8017a94:	bf48      	it	mi
 8017a96:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8017a9a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8017a9e:	4618      	mov	r0, r3
 8017aa0:	e756      	b.n	8017950 <__ieee754_sqrt+0x28>
 8017aa2:	4690      	mov	r8, r2
 8017aa4:	e7be      	b.n	8017a24 <__ieee754_sqrt+0xfc>
 8017aa6:	f7e8 fc21 	bl	80002ec <__adddf3>
 8017aaa:	e9da 8900 	ldrd	r8, r9, [sl]
 8017aae:	4602      	mov	r2, r0
 8017ab0:	460b      	mov	r3, r1
 8017ab2:	4640      	mov	r0, r8
 8017ab4:	4649      	mov	r1, r9
 8017ab6:	f7e9 f841 	bl	8000b3c <__aeabi_dcmplt>
 8017aba:	b120      	cbz	r0, 8017ac6 <__ieee754_sqrt+0x19e>
 8017abc:	1ca0      	adds	r0, r4, #2
 8017abe:	bf08      	it	eq
 8017ac0:	3601      	addeq	r6, #1
 8017ac2:	3402      	adds	r4, #2
 8017ac4:	e7df      	b.n	8017a86 <__ieee754_sqrt+0x15e>
 8017ac6:	1c63      	adds	r3, r4, #1
 8017ac8:	f023 0401 	bic.w	r4, r3, #1
 8017acc:	e7db      	b.n	8017a86 <__ieee754_sqrt+0x15e>
 8017ace:	bf00      	nop
 8017ad0:	7ff00000 	.word	0x7ff00000
 8017ad4:	20001600 	.word	0x20001600
 8017ad8:	200015f8 	.word	0x200015f8
 8017adc:	00000000 	.word	0x00000000

08017ae0 <__ieee754_pow>:
 8017ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ae4:	b091      	sub	sp, #68	@ 0x44
 8017ae6:	ed8d 1b00 	vstr	d1, [sp]
 8017aea:	e9dd 1900 	ldrd	r1, r9, [sp]
 8017aee:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8017af2:	ea5a 0001 	orrs.w	r0, sl, r1
 8017af6:	ec57 6b10 	vmov	r6, r7, d0
 8017afa:	d113      	bne.n	8017b24 <__ieee754_pow+0x44>
 8017afc:	19b3      	adds	r3, r6, r6
 8017afe:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8017b02:	4152      	adcs	r2, r2
 8017b04:	4298      	cmp	r0, r3
 8017b06:	4b98      	ldr	r3, [pc, #608]	@ (8017d68 <__ieee754_pow+0x288>)
 8017b08:	4193      	sbcs	r3, r2
 8017b0a:	f080 84ea 	bcs.w	80184e2 <__ieee754_pow+0xa02>
 8017b0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017b12:	4630      	mov	r0, r6
 8017b14:	4639      	mov	r1, r7
 8017b16:	f7e8 fbe9 	bl	80002ec <__adddf3>
 8017b1a:	ec41 0b10 	vmov	d0, r0, r1
 8017b1e:	b011      	add	sp, #68	@ 0x44
 8017b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b24:	4a91      	ldr	r2, [pc, #580]	@ (8017d6c <__ieee754_pow+0x28c>)
 8017b26:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8017b2a:	4590      	cmp	r8, r2
 8017b2c:	463d      	mov	r5, r7
 8017b2e:	4633      	mov	r3, r6
 8017b30:	d806      	bhi.n	8017b40 <__ieee754_pow+0x60>
 8017b32:	d101      	bne.n	8017b38 <__ieee754_pow+0x58>
 8017b34:	2e00      	cmp	r6, #0
 8017b36:	d1ea      	bne.n	8017b0e <__ieee754_pow+0x2e>
 8017b38:	4592      	cmp	sl, r2
 8017b3a:	d801      	bhi.n	8017b40 <__ieee754_pow+0x60>
 8017b3c:	d10e      	bne.n	8017b5c <__ieee754_pow+0x7c>
 8017b3e:	b169      	cbz	r1, 8017b5c <__ieee754_pow+0x7c>
 8017b40:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8017b44:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8017b48:	431d      	orrs	r5, r3
 8017b4a:	d1e0      	bne.n	8017b0e <__ieee754_pow+0x2e>
 8017b4c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8017b50:	18db      	adds	r3, r3, r3
 8017b52:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8017b56:	4152      	adcs	r2, r2
 8017b58:	429d      	cmp	r5, r3
 8017b5a:	e7d4      	b.n	8017b06 <__ieee754_pow+0x26>
 8017b5c:	2d00      	cmp	r5, #0
 8017b5e:	46c3      	mov	fp, r8
 8017b60:	da3a      	bge.n	8017bd8 <__ieee754_pow+0xf8>
 8017b62:	4a83      	ldr	r2, [pc, #524]	@ (8017d70 <__ieee754_pow+0x290>)
 8017b64:	4592      	cmp	sl, r2
 8017b66:	d84d      	bhi.n	8017c04 <__ieee754_pow+0x124>
 8017b68:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8017b6c:	4592      	cmp	sl, r2
 8017b6e:	f240 84c7 	bls.w	8018500 <__ieee754_pow+0xa20>
 8017b72:	ea4f 522a 	mov.w	r2, sl, asr #20
 8017b76:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8017b7a:	2a14      	cmp	r2, #20
 8017b7c:	dd0f      	ble.n	8017b9e <__ieee754_pow+0xbe>
 8017b7e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8017b82:	fa21 f402 	lsr.w	r4, r1, r2
 8017b86:	fa04 f202 	lsl.w	r2, r4, r2
 8017b8a:	428a      	cmp	r2, r1
 8017b8c:	f040 84b8 	bne.w	8018500 <__ieee754_pow+0xa20>
 8017b90:	f004 0401 	and.w	r4, r4, #1
 8017b94:	f1c4 0402 	rsb	r4, r4, #2
 8017b98:	2900      	cmp	r1, #0
 8017b9a:	d158      	bne.n	8017c4e <__ieee754_pow+0x16e>
 8017b9c:	e00e      	b.n	8017bbc <__ieee754_pow+0xdc>
 8017b9e:	2900      	cmp	r1, #0
 8017ba0:	d154      	bne.n	8017c4c <__ieee754_pow+0x16c>
 8017ba2:	f1c2 0214 	rsb	r2, r2, #20
 8017ba6:	fa4a f402 	asr.w	r4, sl, r2
 8017baa:	fa04 f202 	lsl.w	r2, r4, r2
 8017bae:	4552      	cmp	r2, sl
 8017bb0:	f040 84a3 	bne.w	80184fa <__ieee754_pow+0xa1a>
 8017bb4:	f004 0401 	and.w	r4, r4, #1
 8017bb8:	f1c4 0402 	rsb	r4, r4, #2
 8017bbc:	4a6d      	ldr	r2, [pc, #436]	@ (8017d74 <__ieee754_pow+0x294>)
 8017bbe:	4592      	cmp	sl, r2
 8017bc0:	d12e      	bne.n	8017c20 <__ieee754_pow+0x140>
 8017bc2:	f1b9 0f00 	cmp.w	r9, #0
 8017bc6:	f280 8494 	bge.w	80184f2 <__ieee754_pow+0xa12>
 8017bca:	496a      	ldr	r1, [pc, #424]	@ (8017d74 <__ieee754_pow+0x294>)
 8017bcc:	4632      	mov	r2, r6
 8017bce:	463b      	mov	r3, r7
 8017bd0:	2000      	movs	r0, #0
 8017bd2:	f7e8 fe6b 	bl	80008ac <__aeabi_ddiv>
 8017bd6:	e7a0      	b.n	8017b1a <__ieee754_pow+0x3a>
 8017bd8:	2400      	movs	r4, #0
 8017bda:	bbc1      	cbnz	r1, 8017c4e <__ieee754_pow+0x16e>
 8017bdc:	4a63      	ldr	r2, [pc, #396]	@ (8017d6c <__ieee754_pow+0x28c>)
 8017bde:	4592      	cmp	sl, r2
 8017be0:	d1ec      	bne.n	8017bbc <__ieee754_pow+0xdc>
 8017be2:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8017be6:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8017bea:	431a      	orrs	r2, r3
 8017bec:	f000 8479 	beq.w	80184e2 <__ieee754_pow+0xa02>
 8017bf0:	4b61      	ldr	r3, [pc, #388]	@ (8017d78 <__ieee754_pow+0x298>)
 8017bf2:	4598      	cmp	r8, r3
 8017bf4:	d908      	bls.n	8017c08 <__ieee754_pow+0x128>
 8017bf6:	f1b9 0f00 	cmp.w	r9, #0
 8017bfa:	f2c0 8476 	blt.w	80184ea <__ieee754_pow+0xa0a>
 8017bfe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017c02:	e78a      	b.n	8017b1a <__ieee754_pow+0x3a>
 8017c04:	2402      	movs	r4, #2
 8017c06:	e7e8      	b.n	8017bda <__ieee754_pow+0xfa>
 8017c08:	f1b9 0f00 	cmp.w	r9, #0
 8017c0c:	f04f 0000 	mov.w	r0, #0
 8017c10:	f04f 0100 	mov.w	r1, #0
 8017c14:	da81      	bge.n	8017b1a <__ieee754_pow+0x3a>
 8017c16:	e9dd 0300 	ldrd	r0, r3, [sp]
 8017c1a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8017c1e:	e77c      	b.n	8017b1a <__ieee754_pow+0x3a>
 8017c20:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8017c24:	d106      	bne.n	8017c34 <__ieee754_pow+0x154>
 8017c26:	4632      	mov	r2, r6
 8017c28:	463b      	mov	r3, r7
 8017c2a:	4630      	mov	r0, r6
 8017c2c:	4639      	mov	r1, r7
 8017c2e:	f7e8 fd13 	bl	8000658 <__aeabi_dmul>
 8017c32:	e772      	b.n	8017b1a <__ieee754_pow+0x3a>
 8017c34:	4a51      	ldr	r2, [pc, #324]	@ (8017d7c <__ieee754_pow+0x29c>)
 8017c36:	4591      	cmp	r9, r2
 8017c38:	d109      	bne.n	8017c4e <__ieee754_pow+0x16e>
 8017c3a:	2d00      	cmp	r5, #0
 8017c3c:	db07      	blt.n	8017c4e <__ieee754_pow+0x16e>
 8017c3e:	ec47 6b10 	vmov	d0, r6, r7
 8017c42:	b011      	add	sp, #68	@ 0x44
 8017c44:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c48:	f7ff be6e 	b.w	8017928 <__ieee754_sqrt>
 8017c4c:	2400      	movs	r4, #0
 8017c4e:	ec47 6b10 	vmov	d0, r6, r7
 8017c52:	9302      	str	r3, [sp, #8]
 8017c54:	f000 fc88 	bl	8018568 <fabs>
 8017c58:	9b02      	ldr	r3, [sp, #8]
 8017c5a:	ec51 0b10 	vmov	r0, r1, d0
 8017c5e:	bb53      	cbnz	r3, 8017cb6 <__ieee754_pow+0x1d6>
 8017c60:	4b44      	ldr	r3, [pc, #272]	@ (8017d74 <__ieee754_pow+0x294>)
 8017c62:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8017c66:	429a      	cmp	r2, r3
 8017c68:	d002      	beq.n	8017c70 <__ieee754_pow+0x190>
 8017c6a:	f1b8 0f00 	cmp.w	r8, #0
 8017c6e:	d122      	bne.n	8017cb6 <__ieee754_pow+0x1d6>
 8017c70:	f1b9 0f00 	cmp.w	r9, #0
 8017c74:	da05      	bge.n	8017c82 <__ieee754_pow+0x1a2>
 8017c76:	4602      	mov	r2, r0
 8017c78:	460b      	mov	r3, r1
 8017c7a:	2000      	movs	r0, #0
 8017c7c:	493d      	ldr	r1, [pc, #244]	@ (8017d74 <__ieee754_pow+0x294>)
 8017c7e:	f7e8 fe15 	bl	80008ac <__aeabi_ddiv>
 8017c82:	2d00      	cmp	r5, #0
 8017c84:	f6bf af49 	bge.w	8017b1a <__ieee754_pow+0x3a>
 8017c88:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8017c8c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8017c90:	ea58 0804 	orrs.w	r8, r8, r4
 8017c94:	d108      	bne.n	8017ca8 <__ieee754_pow+0x1c8>
 8017c96:	4602      	mov	r2, r0
 8017c98:	460b      	mov	r3, r1
 8017c9a:	4610      	mov	r0, r2
 8017c9c:	4619      	mov	r1, r3
 8017c9e:	f7e8 fb23 	bl	80002e8 <__aeabi_dsub>
 8017ca2:	4602      	mov	r2, r0
 8017ca4:	460b      	mov	r3, r1
 8017ca6:	e794      	b.n	8017bd2 <__ieee754_pow+0xf2>
 8017ca8:	2c01      	cmp	r4, #1
 8017caa:	f47f af36 	bne.w	8017b1a <__ieee754_pow+0x3a>
 8017cae:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8017cb2:	4619      	mov	r1, r3
 8017cb4:	e731      	b.n	8017b1a <__ieee754_pow+0x3a>
 8017cb6:	0feb      	lsrs	r3, r5, #31
 8017cb8:	3b01      	subs	r3, #1
 8017cba:	ea53 0204 	orrs.w	r2, r3, r4
 8017cbe:	d102      	bne.n	8017cc6 <__ieee754_pow+0x1e6>
 8017cc0:	4632      	mov	r2, r6
 8017cc2:	463b      	mov	r3, r7
 8017cc4:	e7e9      	b.n	8017c9a <__ieee754_pow+0x1ba>
 8017cc6:	3c01      	subs	r4, #1
 8017cc8:	431c      	orrs	r4, r3
 8017cca:	d016      	beq.n	8017cfa <__ieee754_pow+0x21a>
 8017ccc:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8017d58 <__ieee754_pow+0x278>
 8017cd0:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8017cd4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8017cd8:	f240 8112 	bls.w	8017f00 <__ieee754_pow+0x420>
 8017cdc:	4b28      	ldr	r3, [pc, #160]	@ (8017d80 <__ieee754_pow+0x2a0>)
 8017cde:	459a      	cmp	sl, r3
 8017ce0:	4b25      	ldr	r3, [pc, #148]	@ (8017d78 <__ieee754_pow+0x298>)
 8017ce2:	d916      	bls.n	8017d12 <__ieee754_pow+0x232>
 8017ce4:	4598      	cmp	r8, r3
 8017ce6:	d80b      	bhi.n	8017d00 <__ieee754_pow+0x220>
 8017ce8:	f1b9 0f00 	cmp.w	r9, #0
 8017cec:	da0b      	bge.n	8017d06 <__ieee754_pow+0x226>
 8017cee:	2000      	movs	r0, #0
 8017cf0:	b011      	add	sp, #68	@ 0x44
 8017cf2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017cf6:	f7ff be0f 	b.w	8017918 <__math_oflow>
 8017cfa:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8017d60 <__ieee754_pow+0x280>
 8017cfe:	e7e7      	b.n	8017cd0 <__ieee754_pow+0x1f0>
 8017d00:	f1b9 0f00 	cmp.w	r9, #0
 8017d04:	dcf3      	bgt.n	8017cee <__ieee754_pow+0x20e>
 8017d06:	2000      	movs	r0, #0
 8017d08:	b011      	add	sp, #68	@ 0x44
 8017d0a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d0e:	f7ff bdfb 	b.w	8017908 <__math_uflow>
 8017d12:	4598      	cmp	r8, r3
 8017d14:	d20c      	bcs.n	8017d30 <__ieee754_pow+0x250>
 8017d16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017d1a:	2200      	movs	r2, #0
 8017d1c:	2300      	movs	r3, #0
 8017d1e:	f7e8 ff0d 	bl	8000b3c <__aeabi_dcmplt>
 8017d22:	3800      	subs	r0, #0
 8017d24:	bf18      	it	ne
 8017d26:	2001      	movne	r0, #1
 8017d28:	f1b9 0f00 	cmp.w	r9, #0
 8017d2c:	daec      	bge.n	8017d08 <__ieee754_pow+0x228>
 8017d2e:	e7df      	b.n	8017cf0 <__ieee754_pow+0x210>
 8017d30:	4b10      	ldr	r3, [pc, #64]	@ (8017d74 <__ieee754_pow+0x294>)
 8017d32:	4598      	cmp	r8, r3
 8017d34:	f04f 0200 	mov.w	r2, #0
 8017d38:	d924      	bls.n	8017d84 <__ieee754_pow+0x2a4>
 8017d3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017d3e:	2300      	movs	r3, #0
 8017d40:	f7e8 fefc 	bl	8000b3c <__aeabi_dcmplt>
 8017d44:	3800      	subs	r0, #0
 8017d46:	bf18      	it	ne
 8017d48:	2001      	movne	r0, #1
 8017d4a:	f1b9 0f00 	cmp.w	r9, #0
 8017d4e:	dccf      	bgt.n	8017cf0 <__ieee754_pow+0x210>
 8017d50:	e7da      	b.n	8017d08 <__ieee754_pow+0x228>
 8017d52:	bf00      	nop
 8017d54:	f3af 8000 	nop.w
 8017d58:	00000000 	.word	0x00000000
 8017d5c:	3ff00000 	.word	0x3ff00000
 8017d60:	00000000 	.word	0x00000000
 8017d64:	bff00000 	.word	0xbff00000
 8017d68:	fff00000 	.word	0xfff00000
 8017d6c:	7ff00000 	.word	0x7ff00000
 8017d70:	433fffff 	.word	0x433fffff
 8017d74:	3ff00000 	.word	0x3ff00000
 8017d78:	3fefffff 	.word	0x3fefffff
 8017d7c:	3fe00000 	.word	0x3fe00000
 8017d80:	43f00000 	.word	0x43f00000
 8017d84:	4b5a      	ldr	r3, [pc, #360]	@ (8017ef0 <__ieee754_pow+0x410>)
 8017d86:	f7e8 faaf 	bl	80002e8 <__aeabi_dsub>
 8017d8a:	a351      	add	r3, pc, #324	@ (adr r3, 8017ed0 <__ieee754_pow+0x3f0>)
 8017d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d90:	4604      	mov	r4, r0
 8017d92:	460d      	mov	r5, r1
 8017d94:	f7e8 fc60 	bl	8000658 <__aeabi_dmul>
 8017d98:	a34f      	add	r3, pc, #316	@ (adr r3, 8017ed8 <__ieee754_pow+0x3f8>)
 8017d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d9e:	4606      	mov	r6, r0
 8017da0:	460f      	mov	r7, r1
 8017da2:	4620      	mov	r0, r4
 8017da4:	4629      	mov	r1, r5
 8017da6:	f7e8 fc57 	bl	8000658 <__aeabi_dmul>
 8017daa:	4b52      	ldr	r3, [pc, #328]	@ (8017ef4 <__ieee754_pow+0x414>)
 8017dac:	4682      	mov	sl, r0
 8017dae:	468b      	mov	fp, r1
 8017db0:	2200      	movs	r2, #0
 8017db2:	4620      	mov	r0, r4
 8017db4:	4629      	mov	r1, r5
 8017db6:	f7e8 fc4f 	bl	8000658 <__aeabi_dmul>
 8017dba:	4602      	mov	r2, r0
 8017dbc:	460b      	mov	r3, r1
 8017dbe:	a148      	add	r1, pc, #288	@ (adr r1, 8017ee0 <__ieee754_pow+0x400>)
 8017dc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017dc4:	f7e8 fa90 	bl	80002e8 <__aeabi_dsub>
 8017dc8:	4622      	mov	r2, r4
 8017dca:	462b      	mov	r3, r5
 8017dcc:	f7e8 fc44 	bl	8000658 <__aeabi_dmul>
 8017dd0:	4602      	mov	r2, r0
 8017dd2:	460b      	mov	r3, r1
 8017dd4:	2000      	movs	r0, #0
 8017dd6:	4948      	ldr	r1, [pc, #288]	@ (8017ef8 <__ieee754_pow+0x418>)
 8017dd8:	f7e8 fa86 	bl	80002e8 <__aeabi_dsub>
 8017ddc:	4622      	mov	r2, r4
 8017dde:	4680      	mov	r8, r0
 8017de0:	4689      	mov	r9, r1
 8017de2:	462b      	mov	r3, r5
 8017de4:	4620      	mov	r0, r4
 8017de6:	4629      	mov	r1, r5
 8017de8:	f7e8 fc36 	bl	8000658 <__aeabi_dmul>
 8017dec:	4602      	mov	r2, r0
 8017dee:	460b      	mov	r3, r1
 8017df0:	4640      	mov	r0, r8
 8017df2:	4649      	mov	r1, r9
 8017df4:	f7e8 fc30 	bl	8000658 <__aeabi_dmul>
 8017df8:	a33b      	add	r3, pc, #236	@ (adr r3, 8017ee8 <__ieee754_pow+0x408>)
 8017dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017dfe:	f7e8 fc2b 	bl	8000658 <__aeabi_dmul>
 8017e02:	4602      	mov	r2, r0
 8017e04:	460b      	mov	r3, r1
 8017e06:	4650      	mov	r0, sl
 8017e08:	4659      	mov	r1, fp
 8017e0a:	f7e8 fa6d 	bl	80002e8 <__aeabi_dsub>
 8017e0e:	4602      	mov	r2, r0
 8017e10:	460b      	mov	r3, r1
 8017e12:	4680      	mov	r8, r0
 8017e14:	4689      	mov	r9, r1
 8017e16:	4630      	mov	r0, r6
 8017e18:	4639      	mov	r1, r7
 8017e1a:	f7e8 fa67 	bl	80002ec <__adddf3>
 8017e1e:	2400      	movs	r4, #0
 8017e20:	4632      	mov	r2, r6
 8017e22:	463b      	mov	r3, r7
 8017e24:	4620      	mov	r0, r4
 8017e26:	460d      	mov	r5, r1
 8017e28:	f7e8 fa5e 	bl	80002e8 <__aeabi_dsub>
 8017e2c:	4602      	mov	r2, r0
 8017e2e:	460b      	mov	r3, r1
 8017e30:	4640      	mov	r0, r8
 8017e32:	4649      	mov	r1, r9
 8017e34:	f7e8 fa58 	bl	80002e8 <__aeabi_dsub>
 8017e38:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017e3c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8017e40:	2300      	movs	r3, #0
 8017e42:	9304      	str	r3, [sp, #16]
 8017e44:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8017e48:	4606      	mov	r6, r0
 8017e4a:	460f      	mov	r7, r1
 8017e4c:	4652      	mov	r2, sl
 8017e4e:	465b      	mov	r3, fp
 8017e50:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017e54:	f7e8 fa48 	bl	80002e8 <__aeabi_dsub>
 8017e58:	4622      	mov	r2, r4
 8017e5a:	462b      	mov	r3, r5
 8017e5c:	f7e8 fbfc 	bl	8000658 <__aeabi_dmul>
 8017e60:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017e64:	4680      	mov	r8, r0
 8017e66:	4689      	mov	r9, r1
 8017e68:	4630      	mov	r0, r6
 8017e6a:	4639      	mov	r1, r7
 8017e6c:	f7e8 fbf4 	bl	8000658 <__aeabi_dmul>
 8017e70:	4602      	mov	r2, r0
 8017e72:	460b      	mov	r3, r1
 8017e74:	4640      	mov	r0, r8
 8017e76:	4649      	mov	r1, r9
 8017e78:	f7e8 fa38 	bl	80002ec <__adddf3>
 8017e7c:	4652      	mov	r2, sl
 8017e7e:	465b      	mov	r3, fp
 8017e80:	4606      	mov	r6, r0
 8017e82:	460f      	mov	r7, r1
 8017e84:	4620      	mov	r0, r4
 8017e86:	4629      	mov	r1, r5
 8017e88:	f7e8 fbe6 	bl	8000658 <__aeabi_dmul>
 8017e8c:	460b      	mov	r3, r1
 8017e8e:	4602      	mov	r2, r0
 8017e90:	4680      	mov	r8, r0
 8017e92:	4689      	mov	r9, r1
 8017e94:	4630      	mov	r0, r6
 8017e96:	4639      	mov	r1, r7
 8017e98:	f7e8 fa28 	bl	80002ec <__adddf3>
 8017e9c:	4b17      	ldr	r3, [pc, #92]	@ (8017efc <__ieee754_pow+0x41c>)
 8017e9e:	4299      	cmp	r1, r3
 8017ea0:	4604      	mov	r4, r0
 8017ea2:	460d      	mov	r5, r1
 8017ea4:	468a      	mov	sl, r1
 8017ea6:	468b      	mov	fp, r1
 8017ea8:	f340 82ef 	ble.w	801848a <__ieee754_pow+0x9aa>
 8017eac:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8017eb0:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8017eb4:	4303      	orrs	r3, r0
 8017eb6:	f000 81e8 	beq.w	801828a <__ieee754_pow+0x7aa>
 8017eba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017ebe:	2200      	movs	r2, #0
 8017ec0:	2300      	movs	r3, #0
 8017ec2:	f7e8 fe3b 	bl	8000b3c <__aeabi_dcmplt>
 8017ec6:	3800      	subs	r0, #0
 8017ec8:	bf18      	it	ne
 8017eca:	2001      	movne	r0, #1
 8017ecc:	e710      	b.n	8017cf0 <__ieee754_pow+0x210>
 8017ece:	bf00      	nop
 8017ed0:	60000000 	.word	0x60000000
 8017ed4:	3ff71547 	.word	0x3ff71547
 8017ed8:	f85ddf44 	.word	0xf85ddf44
 8017edc:	3e54ae0b 	.word	0x3e54ae0b
 8017ee0:	55555555 	.word	0x55555555
 8017ee4:	3fd55555 	.word	0x3fd55555
 8017ee8:	652b82fe 	.word	0x652b82fe
 8017eec:	3ff71547 	.word	0x3ff71547
 8017ef0:	3ff00000 	.word	0x3ff00000
 8017ef4:	3fd00000 	.word	0x3fd00000
 8017ef8:	3fe00000 	.word	0x3fe00000
 8017efc:	408fffff 	.word	0x408fffff
 8017f00:	4bd5      	ldr	r3, [pc, #852]	@ (8018258 <__ieee754_pow+0x778>)
 8017f02:	402b      	ands	r3, r5
 8017f04:	2200      	movs	r2, #0
 8017f06:	b92b      	cbnz	r3, 8017f14 <__ieee754_pow+0x434>
 8017f08:	4bd4      	ldr	r3, [pc, #848]	@ (801825c <__ieee754_pow+0x77c>)
 8017f0a:	f7e8 fba5 	bl	8000658 <__aeabi_dmul>
 8017f0e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8017f12:	468b      	mov	fp, r1
 8017f14:	ea4f 532b 	mov.w	r3, fp, asr #20
 8017f18:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8017f1c:	4413      	add	r3, r2
 8017f1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8017f20:	4bcf      	ldr	r3, [pc, #828]	@ (8018260 <__ieee754_pow+0x780>)
 8017f22:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8017f26:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8017f2a:	459b      	cmp	fp, r3
 8017f2c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8017f30:	dd08      	ble.n	8017f44 <__ieee754_pow+0x464>
 8017f32:	4bcc      	ldr	r3, [pc, #816]	@ (8018264 <__ieee754_pow+0x784>)
 8017f34:	459b      	cmp	fp, r3
 8017f36:	f340 81a5 	ble.w	8018284 <__ieee754_pow+0x7a4>
 8017f3a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017f3c:	3301      	adds	r3, #1
 8017f3e:	930a      	str	r3, [sp, #40]	@ 0x28
 8017f40:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8017f44:	f04f 0a00 	mov.w	sl, #0
 8017f48:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8017f4c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8017f4e:	4bc6      	ldr	r3, [pc, #792]	@ (8018268 <__ieee754_pow+0x788>)
 8017f50:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8017f54:	ed93 7b00 	vldr	d7, [r3]
 8017f58:	4629      	mov	r1, r5
 8017f5a:	ec53 2b17 	vmov	r2, r3, d7
 8017f5e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8017f62:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8017f66:	f7e8 f9bf 	bl	80002e8 <__aeabi_dsub>
 8017f6a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017f6e:	4606      	mov	r6, r0
 8017f70:	460f      	mov	r7, r1
 8017f72:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017f76:	f7e8 f9b9 	bl	80002ec <__adddf3>
 8017f7a:	4602      	mov	r2, r0
 8017f7c:	460b      	mov	r3, r1
 8017f7e:	2000      	movs	r0, #0
 8017f80:	49ba      	ldr	r1, [pc, #744]	@ (801826c <__ieee754_pow+0x78c>)
 8017f82:	f7e8 fc93 	bl	80008ac <__aeabi_ddiv>
 8017f86:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8017f8a:	4602      	mov	r2, r0
 8017f8c:	460b      	mov	r3, r1
 8017f8e:	4630      	mov	r0, r6
 8017f90:	4639      	mov	r1, r7
 8017f92:	f7e8 fb61 	bl	8000658 <__aeabi_dmul>
 8017f96:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8017f9a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8017f9e:	106d      	asrs	r5, r5, #1
 8017fa0:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8017fa4:	f04f 0b00 	mov.w	fp, #0
 8017fa8:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8017fac:	4661      	mov	r1, ip
 8017fae:	2200      	movs	r2, #0
 8017fb0:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8017fb4:	4658      	mov	r0, fp
 8017fb6:	46e1      	mov	r9, ip
 8017fb8:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8017fbc:	4614      	mov	r4, r2
 8017fbe:	461d      	mov	r5, r3
 8017fc0:	f7e8 fb4a 	bl	8000658 <__aeabi_dmul>
 8017fc4:	4602      	mov	r2, r0
 8017fc6:	460b      	mov	r3, r1
 8017fc8:	4630      	mov	r0, r6
 8017fca:	4639      	mov	r1, r7
 8017fcc:	f7e8 f98c 	bl	80002e8 <__aeabi_dsub>
 8017fd0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8017fd4:	4606      	mov	r6, r0
 8017fd6:	460f      	mov	r7, r1
 8017fd8:	4620      	mov	r0, r4
 8017fda:	4629      	mov	r1, r5
 8017fdc:	f7e8 f984 	bl	80002e8 <__aeabi_dsub>
 8017fe0:	4602      	mov	r2, r0
 8017fe2:	460b      	mov	r3, r1
 8017fe4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017fe8:	f7e8 f97e 	bl	80002e8 <__aeabi_dsub>
 8017fec:	465a      	mov	r2, fp
 8017fee:	464b      	mov	r3, r9
 8017ff0:	f7e8 fb32 	bl	8000658 <__aeabi_dmul>
 8017ff4:	4602      	mov	r2, r0
 8017ff6:	460b      	mov	r3, r1
 8017ff8:	4630      	mov	r0, r6
 8017ffa:	4639      	mov	r1, r7
 8017ffc:	f7e8 f974 	bl	80002e8 <__aeabi_dsub>
 8018000:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8018004:	f7e8 fb28 	bl	8000658 <__aeabi_dmul>
 8018008:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801800c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8018010:	4610      	mov	r0, r2
 8018012:	4619      	mov	r1, r3
 8018014:	f7e8 fb20 	bl	8000658 <__aeabi_dmul>
 8018018:	a37d      	add	r3, pc, #500	@ (adr r3, 8018210 <__ieee754_pow+0x730>)
 801801a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801801e:	4604      	mov	r4, r0
 8018020:	460d      	mov	r5, r1
 8018022:	f7e8 fb19 	bl	8000658 <__aeabi_dmul>
 8018026:	a37c      	add	r3, pc, #496	@ (adr r3, 8018218 <__ieee754_pow+0x738>)
 8018028:	e9d3 2300 	ldrd	r2, r3, [r3]
 801802c:	f7e8 f95e 	bl	80002ec <__adddf3>
 8018030:	4622      	mov	r2, r4
 8018032:	462b      	mov	r3, r5
 8018034:	f7e8 fb10 	bl	8000658 <__aeabi_dmul>
 8018038:	a379      	add	r3, pc, #484	@ (adr r3, 8018220 <__ieee754_pow+0x740>)
 801803a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801803e:	f7e8 f955 	bl	80002ec <__adddf3>
 8018042:	4622      	mov	r2, r4
 8018044:	462b      	mov	r3, r5
 8018046:	f7e8 fb07 	bl	8000658 <__aeabi_dmul>
 801804a:	a377      	add	r3, pc, #476	@ (adr r3, 8018228 <__ieee754_pow+0x748>)
 801804c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018050:	f7e8 f94c 	bl	80002ec <__adddf3>
 8018054:	4622      	mov	r2, r4
 8018056:	462b      	mov	r3, r5
 8018058:	f7e8 fafe 	bl	8000658 <__aeabi_dmul>
 801805c:	a374      	add	r3, pc, #464	@ (adr r3, 8018230 <__ieee754_pow+0x750>)
 801805e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018062:	f7e8 f943 	bl	80002ec <__adddf3>
 8018066:	4622      	mov	r2, r4
 8018068:	462b      	mov	r3, r5
 801806a:	f7e8 faf5 	bl	8000658 <__aeabi_dmul>
 801806e:	a372      	add	r3, pc, #456	@ (adr r3, 8018238 <__ieee754_pow+0x758>)
 8018070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018074:	f7e8 f93a 	bl	80002ec <__adddf3>
 8018078:	4622      	mov	r2, r4
 801807a:	4606      	mov	r6, r0
 801807c:	460f      	mov	r7, r1
 801807e:	462b      	mov	r3, r5
 8018080:	4620      	mov	r0, r4
 8018082:	4629      	mov	r1, r5
 8018084:	f7e8 fae8 	bl	8000658 <__aeabi_dmul>
 8018088:	4602      	mov	r2, r0
 801808a:	460b      	mov	r3, r1
 801808c:	4630      	mov	r0, r6
 801808e:	4639      	mov	r1, r7
 8018090:	f7e8 fae2 	bl	8000658 <__aeabi_dmul>
 8018094:	465a      	mov	r2, fp
 8018096:	4604      	mov	r4, r0
 8018098:	460d      	mov	r5, r1
 801809a:	464b      	mov	r3, r9
 801809c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80180a0:	f7e8 f924 	bl	80002ec <__adddf3>
 80180a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80180a8:	f7e8 fad6 	bl	8000658 <__aeabi_dmul>
 80180ac:	4622      	mov	r2, r4
 80180ae:	462b      	mov	r3, r5
 80180b0:	f7e8 f91c 	bl	80002ec <__adddf3>
 80180b4:	465a      	mov	r2, fp
 80180b6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80180ba:	464b      	mov	r3, r9
 80180bc:	4658      	mov	r0, fp
 80180be:	4649      	mov	r1, r9
 80180c0:	f7e8 faca 	bl	8000658 <__aeabi_dmul>
 80180c4:	4b6a      	ldr	r3, [pc, #424]	@ (8018270 <__ieee754_pow+0x790>)
 80180c6:	2200      	movs	r2, #0
 80180c8:	4606      	mov	r6, r0
 80180ca:	460f      	mov	r7, r1
 80180cc:	f7e8 f90e 	bl	80002ec <__adddf3>
 80180d0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80180d4:	f7e8 f90a 	bl	80002ec <__adddf3>
 80180d8:	46d8      	mov	r8, fp
 80180da:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 80180de:	460d      	mov	r5, r1
 80180e0:	465a      	mov	r2, fp
 80180e2:	460b      	mov	r3, r1
 80180e4:	4640      	mov	r0, r8
 80180e6:	4649      	mov	r1, r9
 80180e8:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 80180ec:	f7e8 fab4 	bl	8000658 <__aeabi_dmul>
 80180f0:	465c      	mov	r4, fp
 80180f2:	4680      	mov	r8, r0
 80180f4:	4689      	mov	r9, r1
 80180f6:	4b5e      	ldr	r3, [pc, #376]	@ (8018270 <__ieee754_pow+0x790>)
 80180f8:	2200      	movs	r2, #0
 80180fa:	4620      	mov	r0, r4
 80180fc:	4629      	mov	r1, r5
 80180fe:	f7e8 f8f3 	bl	80002e8 <__aeabi_dsub>
 8018102:	4632      	mov	r2, r6
 8018104:	463b      	mov	r3, r7
 8018106:	f7e8 f8ef 	bl	80002e8 <__aeabi_dsub>
 801810a:	4602      	mov	r2, r0
 801810c:	460b      	mov	r3, r1
 801810e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8018112:	f7e8 f8e9 	bl	80002e8 <__aeabi_dsub>
 8018116:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801811a:	f7e8 fa9d 	bl	8000658 <__aeabi_dmul>
 801811e:	4622      	mov	r2, r4
 8018120:	4606      	mov	r6, r0
 8018122:	460f      	mov	r7, r1
 8018124:	462b      	mov	r3, r5
 8018126:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801812a:	f7e8 fa95 	bl	8000658 <__aeabi_dmul>
 801812e:	4602      	mov	r2, r0
 8018130:	460b      	mov	r3, r1
 8018132:	4630      	mov	r0, r6
 8018134:	4639      	mov	r1, r7
 8018136:	f7e8 f8d9 	bl	80002ec <__adddf3>
 801813a:	4606      	mov	r6, r0
 801813c:	460f      	mov	r7, r1
 801813e:	4602      	mov	r2, r0
 8018140:	460b      	mov	r3, r1
 8018142:	4640      	mov	r0, r8
 8018144:	4649      	mov	r1, r9
 8018146:	f7e8 f8d1 	bl	80002ec <__adddf3>
 801814a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 801814e:	a33c      	add	r3, pc, #240	@ (adr r3, 8018240 <__ieee754_pow+0x760>)
 8018150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018154:	4658      	mov	r0, fp
 8018156:	e9cd bc08 	strd	fp, ip, [sp, #32]
 801815a:	460d      	mov	r5, r1
 801815c:	f7e8 fa7c 	bl	8000658 <__aeabi_dmul>
 8018160:	465c      	mov	r4, fp
 8018162:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018166:	4642      	mov	r2, r8
 8018168:	464b      	mov	r3, r9
 801816a:	4620      	mov	r0, r4
 801816c:	4629      	mov	r1, r5
 801816e:	f7e8 f8bb 	bl	80002e8 <__aeabi_dsub>
 8018172:	4602      	mov	r2, r0
 8018174:	460b      	mov	r3, r1
 8018176:	4630      	mov	r0, r6
 8018178:	4639      	mov	r1, r7
 801817a:	f7e8 f8b5 	bl	80002e8 <__aeabi_dsub>
 801817e:	a332      	add	r3, pc, #200	@ (adr r3, 8018248 <__ieee754_pow+0x768>)
 8018180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018184:	f7e8 fa68 	bl	8000658 <__aeabi_dmul>
 8018188:	a331      	add	r3, pc, #196	@ (adr r3, 8018250 <__ieee754_pow+0x770>)
 801818a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801818e:	4606      	mov	r6, r0
 8018190:	460f      	mov	r7, r1
 8018192:	4620      	mov	r0, r4
 8018194:	4629      	mov	r1, r5
 8018196:	f7e8 fa5f 	bl	8000658 <__aeabi_dmul>
 801819a:	4602      	mov	r2, r0
 801819c:	460b      	mov	r3, r1
 801819e:	4630      	mov	r0, r6
 80181a0:	4639      	mov	r1, r7
 80181a2:	f7e8 f8a3 	bl	80002ec <__adddf3>
 80181a6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80181a8:	4b32      	ldr	r3, [pc, #200]	@ (8018274 <__ieee754_pow+0x794>)
 80181aa:	4413      	add	r3, r2
 80181ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80181b0:	f7e8 f89c 	bl	80002ec <__adddf3>
 80181b4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80181b8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80181ba:	f7e8 f9e3 	bl	8000584 <__aeabi_i2d>
 80181be:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80181c0:	4b2d      	ldr	r3, [pc, #180]	@ (8018278 <__ieee754_pow+0x798>)
 80181c2:	4413      	add	r3, r2
 80181c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80181c8:	4606      	mov	r6, r0
 80181ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80181ce:	460f      	mov	r7, r1
 80181d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80181d4:	f7e8 f88a 	bl	80002ec <__adddf3>
 80181d8:	4642      	mov	r2, r8
 80181da:	464b      	mov	r3, r9
 80181dc:	f7e8 f886 	bl	80002ec <__adddf3>
 80181e0:	4632      	mov	r2, r6
 80181e2:	463b      	mov	r3, r7
 80181e4:	f7e8 f882 	bl	80002ec <__adddf3>
 80181e8:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 80181ec:	4632      	mov	r2, r6
 80181ee:	463b      	mov	r3, r7
 80181f0:	4658      	mov	r0, fp
 80181f2:	460d      	mov	r5, r1
 80181f4:	f7e8 f878 	bl	80002e8 <__aeabi_dsub>
 80181f8:	4642      	mov	r2, r8
 80181fa:	464b      	mov	r3, r9
 80181fc:	f7e8 f874 	bl	80002e8 <__aeabi_dsub>
 8018200:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8018204:	f7e8 f870 	bl	80002e8 <__aeabi_dsub>
 8018208:	465c      	mov	r4, fp
 801820a:	4602      	mov	r2, r0
 801820c:	e036      	b.n	801827c <__ieee754_pow+0x79c>
 801820e:	bf00      	nop
 8018210:	4a454eef 	.word	0x4a454eef
 8018214:	3fca7e28 	.word	0x3fca7e28
 8018218:	93c9db65 	.word	0x93c9db65
 801821c:	3fcd864a 	.word	0x3fcd864a
 8018220:	a91d4101 	.word	0xa91d4101
 8018224:	3fd17460 	.word	0x3fd17460
 8018228:	518f264d 	.word	0x518f264d
 801822c:	3fd55555 	.word	0x3fd55555
 8018230:	db6fabff 	.word	0xdb6fabff
 8018234:	3fdb6db6 	.word	0x3fdb6db6
 8018238:	33333303 	.word	0x33333303
 801823c:	3fe33333 	.word	0x3fe33333
 8018240:	e0000000 	.word	0xe0000000
 8018244:	3feec709 	.word	0x3feec709
 8018248:	dc3a03fd 	.word	0xdc3a03fd
 801824c:	3feec709 	.word	0x3feec709
 8018250:	145b01f5 	.word	0x145b01f5
 8018254:	be3e2fe0 	.word	0xbe3e2fe0
 8018258:	7ff00000 	.word	0x7ff00000
 801825c:	43400000 	.word	0x43400000
 8018260:	0003988e 	.word	0x0003988e
 8018264:	000bb679 	.word	0x000bb679
 8018268:	0805dbd0 	.word	0x0805dbd0
 801826c:	3ff00000 	.word	0x3ff00000
 8018270:	40080000 	.word	0x40080000
 8018274:	0805dbb0 	.word	0x0805dbb0
 8018278:	0805dbc0 	.word	0x0805dbc0
 801827c:	460b      	mov	r3, r1
 801827e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8018282:	e5d7      	b.n	8017e34 <__ieee754_pow+0x354>
 8018284:	f04f 0a01 	mov.w	sl, #1
 8018288:	e65e      	b.n	8017f48 <__ieee754_pow+0x468>
 801828a:	a3b4      	add	r3, pc, #720	@ (adr r3, 801855c <__ieee754_pow+0xa7c>)
 801828c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018290:	4630      	mov	r0, r6
 8018292:	4639      	mov	r1, r7
 8018294:	f7e8 f82a 	bl	80002ec <__adddf3>
 8018298:	4642      	mov	r2, r8
 801829a:	e9cd 0100 	strd	r0, r1, [sp]
 801829e:	464b      	mov	r3, r9
 80182a0:	4620      	mov	r0, r4
 80182a2:	4629      	mov	r1, r5
 80182a4:	f7e8 f820 	bl	80002e8 <__aeabi_dsub>
 80182a8:	4602      	mov	r2, r0
 80182aa:	460b      	mov	r3, r1
 80182ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80182b0:	f7e8 fc62 	bl	8000b78 <__aeabi_dcmpgt>
 80182b4:	2800      	cmp	r0, #0
 80182b6:	f47f ae00 	bne.w	8017eba <__ieee754_pow+0x3da>
 80182ba:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 80182be:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80182c2:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 80182c6:	fa43 fa0a 	asr.w	sl, r3, sl
 80182ca:	44da      	add	sl, fp
 80182cc:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80182d0:	489d      	ldr	r0, [pc, #628]	@ (8018548 <__ieee754_pow+0xa68>)
 80182d2:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80182d6:	4108      	asrs	r0, r1
 80182d8:	ea00 030a 	and.w	r3, r0, sl
 80182dc:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80182e0:	f1c1 0114 	rsb	r1, r1, #20
 80182e4:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 80182e8:	fa4a fa01 	asr.w	sl, sl, r1
 80182ec:	f1bb 0f00 	cmp.w	fp, #0
 80182f0:	4640      	mov	r0, r8
 80182f2:	4649      	mov	r1, r9
 80182f4:	f04f 0200 	mov.w	r2, #0
 80182f8:	bfb8      	it	lt
 80182fa:	f1ca 0a00 	rsblt	sl, sl, #0
 80182fe:	f7e7 fff3 	bl	80002e8 <__aeabi_dsub>
 8018302:	4680      	mov	r8, r0
 8018304:	4689      	mov	r9, r1
 8018306:	4632      	mov	r2, r6
 8018308:	463b      	mov	r3, r7
 801830a:	4640      	mov	r0, r8
 801830c:	4649      	mov	r1, r9
 801830e:	f7e7 ffed 	bl	80002ec <__adddf3>
 8018312:	2400      	movs	r4, #0
 8018314:	a37c      	add	r3, pc, #496	@ (adr r3, 8018508 <__ieee754_pow+0xa28>)
 8018316:	e9d3 2300 	ldrd	r2, r3, [r3]
 801831a:	4620      	mov	r0, r4
 801831c:	460d      	mov	r5, r1
 801831e:	f7e8 f99b 	bl	8000658 <__aeabi_dmul>
 8018322:	4642      	mov	r2, r8
 8018324:	e9cd 0100 	strd	r0, r1, [sp]
 8018328:	464b      	mov	r3, r9
 801832a:	4620      	mov	r0, r4
 801832c:	4629      	mov	r1, r5
 801832e:	f7e7 ffdb 	bl	80002e8 <__aeabi_dsub>
 8018332:	4602      	mov	r2, r0
 8018334:	460b      	mov	r3, r1
 8018336:	4630      	mov	r0, r6
 8018338:	4639      	mov	r1, r7
 801833a:	f7e7 ffd5 	bl	80002e8 <__aeabi_dsub>
 801833e:	a374      	add	r3, pc, #464	@ (adr r3, 8018510 <__ieee754_pow+0xa30>)
 8018340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018344:	f7e8 f988 	bl	8000658 <__aeabi_dmul>
 8018348:	a373      	add	r3, pc, #460	@ (adr r3, 8018518 <__ieee754_pow+0xa38>)
 801834a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801834e:	4680      	mov	r8, r0
 8018350:	4689      	mov	r9, r1
 8018352:	4620      	mov	r0, r4
 8018354:	4629      	mov	r1, r5
 8018356:	f7e8 f97f 	bl	8000658 <__aeabi_dmul>
 801835a:	4602      	mov	r2, r0
 801835c:	460b      	mov	r3, r1
 801835e:	4640      	mov	r0, r8
 8018360:	4649      	mov	r1, r9
 8018362:	f7e7 ffc3 	bl	80002ec <__adddf3>
 8018366:	4604      	mov	r4, r0
 8018368:	460d      	mov	r5, r1
 801836a:	4602      	mov	r2, r0
 801836c:	460b      	mov	r3, r1
 801836e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018372:	f7e7 ffbb 	bl	80002ec <__adddf3>
 8018376:	e9dd 2300 	ldrd	r2, r3, [sp]
 801837a:	4680      	mov	r8, r0
 801837c:	4689      	mov	r9, r1
 801837e:	f7e7 ffb3 	bl	80002e8 <__aeabi_dsub>
 8018382:	4602      	mov	r2, r0
 8018384:	460b      	mov	r3, r1
 8018386:	4620      	mov	r0, r4
 8018388:	4629      	mov	r1, r5
 801838a:	f7e7 ffad 	bl	80002e8 <__aeabi_dsub>
 801838e:	4642      	mov	r2, r8
 8018390:	4606      	mov	r6, r0
 8018392:	460f      	mov	r7, r1
 8018394:	464b      	mov	r3, r9
 8018396:	4640      	mov	r0, r8
 8018398:	4649      	mov	r1, r9
 801839a:	f7e8 f95d 	bl	8000658 <__aeabi_dmul>
 801839e:	a360      	add	r3, pc, #384	@ (adr r3, 8018520 <__ieee754_pow+0xa40>)
 80183a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80183a4:	4604      	mov	r4, r0
 80183a6:	460d      	mov	r5, r1
 80183a8:	f7e8 f956 	bl	8000658 <__aeabi_dmul>
 80183ac:	a35e      	add	r3, pc, #376	@ (adr r3, 8018528 <__ieee754_pow+0xa48>)
 80183ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80183b2:	f7e7 ff99 	bl	80002e8 <__aeabi_dsub>
 80183b6:	4622      	mov	r2, r4
 80183b8:	462b      	mov	r3, r5
 80183ba:	f7e8 f94d 	bl	8000658 <__aeabi_dmul>
 80183be:	a35c      	add	r3, pc, #368	@ (adr r3, 8018530 <__ieee754_pow+0xa50>)
 80183c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80183c4:	f7e7 ff92 	bl	80002ec <__adddf3>
 80183c8:	4622      	mov	r2, r4
 80183ca:	462b      	mov	r3, r5
 80183cc:	f7e8 f944 	bl	8000658 <__aeabi_dmul>
 80183d0:	a359      	add	r3, pc, #356	@ (adr r3, 8018538 <__ieee754_pow+0xa58>)
 80183d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80183d6:	f7e7 ff87 	bl	80002e8 <__aeabi_dsub>
 80183da:	4622      	mov	r2, r4
 80183dc:	462b      	mov	r3, r5
 80183de:	f7e8 f93b 	bl	8000658 <__aeabi_dmul>
 80183e2:	a357      	add	r3, pc, #348	@ (adr r3, 8018540 <__ieee754_pow+0xa60>)
 80183e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80183e8:	f7e7 ff80 	bl	80002ec <__adddf3>
 80183ec:	4622      	mov	r2, r4
 80183ee:	462b      	mov	r3, r5
 80183f0:	f7e8 f932 	bl	8000658 <__aeabi_dmul>
 80183f4:	4602      	mov	r2, r0
 80183f6:	460b      	mov	r3, r1
 80183f8:	4640      	mov	r0, r8
 80183fa:	4649      	mov	r1, r9
 80183fc:	f7e7 ff74 	bl	80002e8 <__aeabi_dsub>
 8018400:	4604      	mov	r4, r0
 8018402:	460d      	mov	r5, r1
 8018404:	4602      	mov	r2, r0
 8018406:	460b      	mov	r3, r1
 8018408:	4640      	mov	r0, r8
 801840a:	4649      	mov	r1, r9
 801840c:	f7e8 f924 	bl	8000658 <__aeabi_dmul>
 8018410:	2200      	movs	r2, #0
 8018412:	e9cd 0100 	strd	r0, r1, [sp]
 8018416:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801841a:	4620      	mov	r0, r4
 801841c:	4629      	mov	r1, r5
 801841e:	f7e7 ff63 	bl	80002e8 <__aeabi_dsub>
 8018422:	4602      	mov	r2, r0
 8018424:	460b      	mov	r3, r1
 8018426:	e9dd 0100 	ldrd	r0, r1, [sp]
 801842a:	f7e8 fa3f 	bl	80008ac <__aeabi_ddiv>
 801842e:	4632      	mov	r2, r6
 8018430:	4604      	mov	r4, r0
 8018432:	460d      	mov	r5, r1
 8018434:	463b      	mov	r3, r7
 8018436:	4640      	mov	r0, r8
 8018438:	4649      	mov	r1, r9
 801843a:	f7e8 f90d 	bl	8000658 <__aeabi_dmul>
 801843e:	4632      	mov	r2, r6
 8018440:	463b      	mov	r3, r7
 8018442:	f7e7 ff53 	bl	80002ec <__adddf3>
 8018446:	4602      	mov	r2, r0
 8018448:	460b      	mov	r3, r1
 801844a:	4620      	mov	r0, r4
 801844c:	4629      	mov	r1, r5
 801844e:	f7e7 ff4b 	bl	80002e8 <__aeabi_dsub>
 8018452:	4642      	mov	r2, r8
 8018454:	464b      	mov	r3, r9
 8018456:	f7e7 ff47 	bl	80002e8 <__aeabi_dsub>
 801845a:	460b      	mov	r3, r1
 801845c:	4602      	mov	r2, r0
 801845e:	493b      	ldr	r1, [pc, #236]	@ (801854c <__ieee754_pow+0xa6c>)
 8018460:	2000      	movs	r0, #0
 8018462:	f7e7 ff41 	bl	80002e8 <__aeabi_dsub>
 8018466:	ec41 0b10 	vmov	d0, r0, r1
 801846a:	ee10 3a90 	vmov	r3, s1
 801846e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8018472:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8018476:	da30      	bge.n	80184da <__ieee754_pow+0x9fa>
 8018478:	4650      	mov	r0, sl
 801847a:	f000 f87d 	bl	8018578 <scalbn>
 801847e:	ec51 0b10 	vmov	r0, r1, d0
 8018482:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018486:	f7ff bbd2 	b.w	8017c2e <__ieee754_pow+0x14e>
 801848a:	4c31      	ldr	r4, [pc, #196]	@ (8018550 <__ieee754_pow+0xa70>)
 801848c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8018490:	42a3      	cmp	r3, r4
 8018492:	d91a      	bls.n	80184ca <__ieee754_pow+0x9ea>
 8018494:	4b2f      	ldr	r3, [pc, #188]	@ (8018554 <__ieee754_pow+0xa74>)
 8018496:	440b      	add	r3, r1
 8018498:	4303      	orrs	r3, r0
 801849a:	d009      	beq.n	80184b0 <__ieee754_pow+0x9d0>
 801849c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80184a0:	2200      	movs	r2, #0
 80184a2:	2300      	movs	r3, #0
 80184a4:	f7e8 fb4a 	bl	8000b3c <__aeabi_dcmplt>
 80184a8:	3800      	subs	r0, #0
 80184aa:	bf18      	it	ne
 80184ac:	2001      	movne	r0, #1
 80184ae:	e42b      	b.n	8017d08 <__ieee754_pow+0x228>
 80184b0:	4642      	mov	r2, r8
 80184b2:	464b      	mov	r3, r9
 80184b4:	f7e7 ff18 	bl	80002e8 <__aeabi_dsub>
 80184b8:	4632      	mov	r2, r6
 80184ba:	463b      	mov	r3, r7
 80184bc:	f7e8 fb52 	bl	8000b64 <__aeabi_dcmpge>
 80184c0:	2800      	cmp	r0, #0
 80184c2:	d1eb      	bne.n	801849c <__ieee754_pow+0x9bc>
 80184c4:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8018564 <__ieee754_pow+0xa84>
 80184c8:	e6f7      	b.n	80182ba <__ieee754_pow+0x7da>
 80184ca:	469a      	mov	sl, r3
 80184cc:	4b22      	ldr	r3, [pc, #136]	@ (8018558 <__ieee754_pow+0xa78>)
 80184ce:	459a      	cmp	sl, r3
 80184d0:	f63f aef3 	bhi.w	80182ba <__ieee754_pow+0x7da>
 80184d4:	f8dd a010 	ldr.w	sl, [sp, #16]
 80184d8:	e715      	b.n	8018306 <__ieee754_pow+0x826>
 80184da:	ec51 0b10 	vmov	r0, r1, d0
 80184de:	4619      	mov	r1, r3
 80184e0:	e7cf      	b.n	8018482 <__ieee754_pow+0x9a2>
 80184e2:	491a      	ldr	r1, [pc, #104]	@ (801854c <__ieee754_pow+0xa6c>)
 80184e4:	2000      	movs	r0, #0
 80184e6:	f7ff bb18 	b.w	8017b1a <__ieee754_pow+0x3a>
 80184ea:	2000      	movs	r0, #0
 80184ec:	2100      	movs	r1, #0
 80184ee:	f7ff bb14 	b.w	8017b1a <__ieee754_pow+0x3a>
 80184f2:	4630      	mov	r0, r6
 80184f4:	4639      	mov	r1, r7
 80184f6:	f7ff bb10 	b.w	8017b1a <__ieee754_pow+0x3a>
 80184fa:	460c      	mov	r4, r1
 80184fc:	f7ff bb5e 	b.w	8017bbc <__ieee754_pow+0xdc>
 8018500:	2400      	movs	r4, #0
 8018502:	f7ff bb49 	b.w	8017b98 <__ieee754_pow+0xb8>
 8018506:	bf00      	nop
 8018508:	00000000 	.word	0x00000000
 801850c:	3fe62e43 	.word	0x3fe62e43
 8018510:	fefa39ef 	.word	0xfefa39ef
 8018514:	3fe62e42 	.word	0x3fe62e42
 8018518:	0ca86c39 	.word	0x0ca86c39
 801851c:	be205c61 	.word	0xbe205c61
 8018520:	72bea4d0 	.word	0x72bea4d0
 8018524:	3e663769 	.word	0x3e663769
 8018528:	c5d26bf1 	.word	0xc5d26bf1
 801852c:	3ebbbd41 	.word	0x3ebbbd41
 8018530:	af25de2c 	.word	0xaf25de2c
 8018534:	3f11566a 	.word	0x3f11566a
 8018538:	16bebd93 	.word	0x16bebd93
 801853c:	3f66c16c 	.word	0x3f66c16c
 8018540:	5555553e 	.word	0x5555553e
 8018544:	3fc55555 	.word	0x3fc55555
 8018548:	fff00000 	.word	0xfff00000
 801854c:	3ff00000 	.word	0x3ff00000
 8018550:	4090cbff 	.word	0x4090cbff
 8018554:	3f6f3400 	.word	0x3f6f3400
 8018558:	3fe00000 	.word	0x3fe00000
 801855c:	652b82fe 	.word	0x652b82fe
 8018560:	3c971547 	.word	0x3c971547
 8018564:	4090cc00 	.word	0x4090cc00

08018568 <fabs>:
 8018568:	ec51 0b10 	vmov	r0, r1, d0
 801856c:	4602      	mov	r2, r0
 801856e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8018572:	ec43 2b10 	vmov	d0, r2, r3
 8018576:	4770      	bx	lr

08018578 <scalbn>:
 8018578:	b570      	push	{r4, r5, r6, lr}
 801857a:	ec55 4b10 	vmov	r4, r5, d0
 801857e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8018582:	4606      	mov	r6, r0
 8018584:	462b      	mov	r3, r5
 8018586:	b991      	cbnz	r1, 80185ae <scalbn+0x36>
 8018588:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801858c:	4323      	orrs	r3, r4
 801858e:	d03d      	beq.n	801860c <scalbn+0x94>
 8018590:	4b35      	ldr	r3, [pc, #212]	@ (8018668 <scalbn+0xf0>)
 8018592:	4620      	mov	r0, r4
 8018594:	4629      	mov	r1, r5
 8018596:	2200      	movs	r2, #0
 8018598:	f7e8 f85e 	bl	8000658 <__aeabi_dmul>
 801859c:	4b33      	ldr	r3, [pc, #204]	@ (801866c <scalbn+0xf4>)
 801859e:	429e      	cmp	r6, r3
 80185a0:	4604      	mov	r4, r0
 80185a2:	460d      	mov	r5, r1
 80185a4:	da0f      	bge.n	80185c6 <scalbn+0x4e>
 80185a6:	a328      	add	r3, pc, #160	@ (adr r3, 8018648 <scalbn+0xd0>)
 80185a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80185ac:	e01e      	b.n	80185ec <scalbn+0x74>
 80185ae:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80185b2:	4291      	cmp	r1, r2
 80185b4:	d10b      	bne.n	80185ce <scalbn+0x56>
 80185b6:	4622      	mov	r2, r4
 80185b8:	4620      	mov	r0, r4
 80185ba:	4629      	mov	r1, r5
 80185bc:	f7e7 fe96 	bl	80002ec <__adddf3>
 80185c0:	4604      	mov	r4, r0
 80185c2:	460d      	mov	r5, r1
 80185c4:	e022      	b.n	801860c <scalbn+0x94>
 80185c6:	460b      	mov	r3, r1
 80185c8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80185cc:	3936      	subs	r1, #54	@ 0x36
 80185ce:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80185d2:	4296      	cmp	r6, r2
 80185d4:	dd0d      	ble.n	80185f2 <scalbn+0x7a>
 80185d6:	2d00      	cmp	r5, #0
 80185d8:	a11d      	add	r1, pc, #116	@ (adr r1, 8018650 <scalbn+0xd8>)
 80185da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80185de:	da02      	bge.n	80185e6 <scalbn+0x6e>
 80185e0:	a11d      	add	r1, pc, #116	@ (adr r1, 8018658 <scalbn+0xe0>)
 80185e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80185e6:	a31a      	add	r3, pc, #104	@ (adr r3, 8018650 <scalbn+0xd8>)
 80185e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80185ec:	f7e8 f834 	bl	8000658 <__aeabi_dmul>
 80185f0:	e7e6      	b.n	80185c0 <scalbn+0x48>
 80185f2:	1872      	adds	r2, r6, r1
 80185f4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80185f8:	428a      	cmp	r2, r1
 80185fa:	dcec      	bgt.n	80185d6 <scalbn+0x5e>
 80185fc:	2a00      	cmp	r2, #0
 80185fe:	dd08      	ble.n	8018612 <scalbn+0x9a>
 8018600:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8018604:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8018608:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801860c:	ec45 4b10 	vmov	d0, r4, r5
 8018610:	bd70      	pop	{r4, r5, r6, pc}
 8018612:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8018616:	da08      	bge.n	801862a <scalbn+0xb2>
 8018618:	2d00      	cmp	r5, #0
 801861a:	a10b      	add	r1, pc, #44	@ (adr r1, 8018648 <scalbn+0xd0>)
 801861c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018620:	dac1      	bge.n	80185a6 <scalbn+0x2e>
 8018622:	a10f      	add	r1, pc, #60	@ (adr r1, 8018660 <scalbn+0xe8>)
 8018624:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018628:	e7bd      	b.n	80185a6 <scalbn+0x2e>
 801862a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801862e:	3236      	adds	r2, #54	@ 0x36
 8018630:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8018634:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8018638:	4620      	mov	r0, r4
 801863a:	4b0d      	ldr	r3, [pc, #52]	@ (8018670 <scalbn+0xf8>)
 801863c:	4629      	mov	r1, r5
 801863e:	2200      	movs	r2, #0
 8018640:	e7d4      	b.n	80185ec <scalbn+0x74>
 8018642:	bf00      	nop
 8018644:	f3af 8000 	nop.w
 8018648:	c2f8f359 	.word	0xc2f8f359
 801864c:	01a56e1f 	.word	0x01a56e1f
 8018650:	8800759c 	.word	0x8800759c
 8018654:	7e37e43c 	.word	0x7e37e43c
 8018658:	8800759c 	.word	0x8800759c
 801865c:	fe37e43c 	.word	0xfe37e43c
 8018660:	c2f8f359 	.word	0xc2f8f359
 8018664:	81a56e1f 	.word	0x81a56e1f
 8018668:	43500000 	.word	0x43500000
 801866c:	ffff3cb0 	.word	0xffff3cb0
 8018670:	3c900000 	.word	0x3c900000

08018674 <_close>:
 8018674:	4b02      	ldr	r3, [pc, #8]	@ (8018680 <_close+0xc>)
 8018676:	2258      	movs	r2, #88	@ 0x58
 8018678:	601a      	str	r2, [r3, #0]
 801867a:	f04f 30ff 	mov.w	r0, #4294967295
 801867e:	4770      	bx	lr
 8018680:	2000c7bc 	.word	0x2000c7bc

08018684 <_fstat>:
 8018684:	4b02      	ldr	r3, [pc, #8]	@ (8018690 <_fstat+0xc>)
 8018686:	2258      	movs	r2, #88	@ 0x58
 8018688:	601a      	str	r2, [r3, #0]
 801868a:	f04f 30ff 	mov.w	r0, #4294967295
 801868e:	4770      	bx	lr
 8018690:	2000c7bc 	.word	0x2000c7bc

08018694 <_getpid>:
 8018694:	4b02      	ldr	r3, [pc, #8]	@ (80186a0 <_getpid+0xc>)
 8018696:	2258      	movs	r2, #88	@ 0x58
 8018698:	601a      	str	r2, [r3, #0]
 801869a:	f04f 30ff 	mov.w	r0, #4294967295
 801869e:	4770      	bx	lr
 80186a0:	2000c7bc 	.word	0x2000c7bc

080186a4 <_isatty>:
 80186a4:	4b02      	ldr	r3, [pc, #8]	@ (80186b0 <_isatty+0xc>)
 80186a6:	2258      	movs	r2, #88	@ 0x58
 80186a8:	601a      	str	r2, [r3, #0]
 80186aa:	2000      	movs	r0, #0
 80186ac:	4770      	bx	lr
 80186ae:	bf00      	nop
 80186b0:	2000c7bc 	.word	0x2000c7bc

080186b4 <_kill>:
 80186b4:	4b02      	ldr	r3, [pc, #8]	@ (80186c0 <_kill+0xc>)
 80186b6:	2258      	movs	r2, #88	@ 0x58
 80186b8:	601a      	str	r2, [r3, #0]
 80186ba:	f04f 30ff 	mov.w	r0, #4294967295
 80186be:	4770      	bx	lr
 80186c0:	2000c7bc 	.word	0x2000c7bc

080186c4 <_lseek>:
 80186c4:	4b02      	ldr	r3, [pc, #8]	@ (80186d0 <_lseek+0xc>)
 80186c6:	2258      	movs	r2, #88	@ 0x58
 80186c8:	601a      	str	r2, [r3, #0]
 80186ca:	f04f 30ff 	mov.w	r0, #4294967295
 80186ce:	4770      	bx	lr
 80186d0:	2000c7bc 	.word	0x2000c7bc

080186d4 <_read>:
 80186d4:	4b02      	ldr	r3, [pc, #8]	@ (80186e0 <_read+0xc>)
 80186d6:	2258      	movs	r2, #88	@ 0x58
 80186d8:	601a      	str	r2, [r3, #0]
 80186da:	f04f 30ff 	mov.w	r0, #4294967295
 80186de:	4770      	bx	lr
 80186e0:	2000c7bc 	.word	0x2000c7bc

080186e4 <_write>:
 80186e4:	4b02      	ldr	r3, [pc, #8]	@ (80186f0 <_write+0xc>)
 80186e6:	2258      	movs	r2, #88	@ 0x58
 80186e8:	601a      	str	r2, [r3, #0]
 80186ea:	f04f 30ff 	mov.w	r0, #4294967295
 80186ee:	4770      	bx	lr
 80186f0:	2000c7bc 	.word	0x2000c7bc

080186f4 <_exit>:
 80186f4:	e7fe      	b.n	80186f4 <_exit>
	...

080186f8 <_init>:
 80186f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80186fa:	bf00      	nop
 80186fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80186fe:	bc08      	pop	{r3}
 8018700:	469e      	mov	lr, r3
 8018702:	4770      	bx	lr

08018704 <_fini>:
 8018704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018706:	bf00      	nop
 8018708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801870a:	bc08      	pop	{r3}
 801870c:	469e      	mov	lr, r3
 801870e:	4770      	bx	lr
