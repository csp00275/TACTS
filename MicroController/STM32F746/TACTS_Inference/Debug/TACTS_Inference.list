
TACTS_Inference.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018740  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00045518  08018920  08018920  00028920  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0805de38  0805de38  00071630  2**0
                  CONTENTS
  4 .ARM          00000008  0805de38  0805de38  0006de38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0805de40  0805de40  00071630  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0805de40  0805de40  0006de40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0805de44  0805de44  0006de44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001630  20000000  0805de48  00070000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b038  20001640  0805f478  00071640  2**5
                  ALLOC
 10 ._user_heap_stack 00001000  2000c678  0805f478  0007c678  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00071630  2**0
                  CONTENTS, READONLY
 12 .debug_info   000273b1  00000000  00000000  00071660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004929  00000000  00000000  00098a11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001950  00000000  00000000  0009d340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001758  00000000  00000000  0009ec90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cb18  00000000  00000000  000a03e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023de2  00000000  00000000  000ccf00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00106626  00000000  00000000  000f0ce2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001f7308  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000852c  00000000  00000000  001f7358  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  001ff884  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  001ff950  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20001640 	.word	0x20001640
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080188f8 	.word	0x080188f8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20001644 	.word	0x20001644
 800020c:	080188f8 	.word	0x080188f8

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b9aa 	b.w	8001054 <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f83c 	bl	8000d84 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_d2lz>:
 8000d18:	b538      	push	{r3, r4, r5, lr}
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	4604      	mov	r4, r0
 8000d20:	460d      	mov	r5, r1
 8000d22:	f7ff ff0b 	bl	8000b3c <__aeabi_dcmplt>
 8000d26:	b928      	cbnz	r0, 8000d34 <__aeabi_d2lz+0x1c>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	4629      	mov	r1, r5
 8000d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d30:	f000 b80a 	b.w	8000d48 <__aeabi_d2ulz>
 8000d34:	4620      	mov	r0, r4
 8000d36:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d3a:	f000 f805 	bl	8000d48 <__aeabi_d2ulz>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	bd38      	pop	{r3, r4, r5, pc}
 8000d46:	bf00      	nop

08000d48 <__aeabi_d2ulz>:
 8000d48:	b5d0      	push	{r4, r6, r7, lr}
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <__aeabi_d2ulz+0x34>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4606      	mov	r6, r0
 8000d50:	460f      	mov	r7, r1
 8000d52:	f7ff fc81 	bl	8000658 <__aeabi_dmul>
 8000d56:	f7ff ff57 	bl	8000c08 <__aeabi_d2uiz>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	f7ff fc02 	bl	8000564 <__aeabi_ui2d>
 8000d60:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <__aeabi_d2ulz+0x38>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f7ff fc78 	bl	8000658 <__aeabi_dmul>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	4639      	mov	r1, r7
 8000d70:	f7ff faba 	bl	80002e8 <__aeabi_dsub>
 8000d74:	f7ff ff48 	bl	8000c08 <__aeabi_d2uiz>
 8000d78:	4621      	mov	r1, r4
 8000d7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d7c:	3df00000 	.word	0x3df00000
 8000d80:	41f00000 	.word	0x41f00000

08000d84 <__udivmoddi4>:
 8000d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d88:	9d08      	ldr	r5, [sp, #32]
 8000d8a:	4604      	mov	r4, r0
 8000d8c:	468e      	mov	lr, r1
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d14d      	bne.n	8000e2e <__udivmoddi4+0xaa>
 8000d92:	428a      	cmp	r2, r1
 8000d94:	4694      	mov	ip, r2
 8000d96:	d969      	bls.n	8000e6c <__udivmoddi4+0xe8>
 8000d98:	fab2 f282 	clz	r2, r2
 8000d9c:	b152      	cbz	r2, 8000db4 <__udivmoddi4+0x30>
 8000d9e:	fa01 f302 	lsl.w	r3, r1, r2
 8000da2:	f1c2 0120 	rsb	r1, r2, #32
 8000da6:	fa20 f101 	lsr.w	r1, r0, r1
 8000daa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dae:	ea41 0e03 	orr.w	lr, r1, r3
 8000db2:	4094      	lsls	r4, r2
 8000db4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db8:	0c21      	lsrs	r1, r4, #16
 8000dba:	fbbe f6f8 	udiv	r6, lr, r8
 8000dbe:	fa1f f78c 	uxth.w	r7, ip
 8000dc2:	fb08 e316 	mls	r3, r8, r6, lr
 8000dc6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dca:	fb06 f107 	mul.w	r1, r6, r7
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	d90a      	bls.n	8000de8 <__udivmoddi4+0x64>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dda:	f080 811f 	bcs.w	800101c <__udivmoddi4+0x298>
 8000dde:	4299      	cmp	r1, r3
 8000de0:	f240 811c 	bls.w	800101c <__udivmoddi4+0x298>
 8000de4:	3e02      	subs	r6, #2
 8000de6:	4463      	add	r3, ip
 8000de8:	1a5b      	subs	r3, r3, r1
 8000dea:	b2a4      	uxth	r4, r4
 8000dec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000df0:	fb08 3310 	mls	r3, r8, r0, r3
 8000df4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000df8:	fb00 f707 	mul.w	r7, r0, r7
 8000dfc:	42a7      	cmp	r7, r4
 8000dfe:	d90a      	bls.n	8000e16 <__udivmoddi4+0x92>
 8000e00:	eb1c 0404 	adds.w	r4, ip, r4
 8000e04:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e08:	f080 810a 	bcs.w	8001020 <__udivmoddi4+0x29c>
 8000e0c:	42a7      	cmp	r7, r4
 8000e0e:	f240 8107 	bls.w	8001020 <__udivmoddi4+0x29c>
 8000e12:	4464      	add	r4, ip
 8000e14:	3802      	subs	r0, #2
 8000e16:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e1a:	1be4      	subs	r4, r4, r7
 8000e1c:	2600      	movs	r6, #0
 8000e1e:	b11d      	cbz	r5, 8000e28 <__udivmoddi4+0xa4>
 8000e20:	40d4      	lsrs	r4, r2
 8000e22:	2300      	movs	r3, #0
 8000e24:	e9c5 4300 	strd	r4, r3, [r5]
 8000e28:	4631      	mov	r1, r6
 8000e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d909      	bls.n	8000e46 <__udivmoddi4+0xc2>
 8000e32:	2d00      	cmp	r5, #0
 8000e34:	f000 80ef 	beq.w	8001016 <__udivmoddi4+0x292>
 8000e38:	2600      	movs	r6, #0
 8000e3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e3e:	4630      	mov	r0, r6
 8000e40:	4631      	mov	r1, r6
 8000e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e46:	fab3 f683 	clz	r6, r3
 8000e4a:	2e00      	cmp	r6, #0
 8000e4c:	d14a      	bne.n	8000ee4 <__udivmoddi4+0x160>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d302      	bcc.n	8000e58 <__udivmoddi4+0xd4>
 8000e52:	4282      	cmp	r2, r0
 8000e54:	f200 80f9 	bhi.w	800104a <__udivmoddi4+0x2c6>
 8000e58:	1a84      	subs	r4, r0, r2
 8000e5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e5e:	2001      	movs	r0, #1
 8000e60:	469e      	mov	lr, r3
 8000e62:	2d00      	cmp	r5, #0
 8000e64:	d0e0      	beq.n	8000e28 <__udivmoddi4+0xa4>
 8000e66:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e6a:	e7dd      	b.n	8000e28 <__udivmoddi4+0xa4>
 8000e6c:	b902      	cbnz	r2, 8000e70 <__udivmoddi4+0xec>
 8000e6e:	deff      	udf	#255	; 0xff
 8000e70:	fab2 f282 	clz	r2, r2
 8000e74:	2a00      	cmp	r2, #0
 8000e76:	f040 8092 	bne.w	8000f9e <__udivmoddi4+0x21a>
 8000e7a:	eba1 010c 	sub.w	r1, r1, ip
 8000e7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e82:	fa1f fe8c 	uxth.w	lr, ip
 8000e86:	2601      	movs	r6, #1
 8000e88:	0c20      	lsrs	r0, r4, #16
 8000e8a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e8e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e92:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e96:	fb0e f003 	mul.w	r0, lr, r3
 8000e9a:	4288      	cmp	r0, r1
 8000e9c:	d908      	bls.n	8000eb0 <__udivmoddi4+0x12c>
 8000e9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ea6:	d202      	bcs.n	8000eae <__udivmoddi4+0x12a>
 8000ea8:	4288      	cmp	r0, r1
 8000eaa:	f200 80cb 	bhi.w	8001044 <__udivmoddi4+0x2c0>
 8000eae:	4643      	mov	r3, r8
 8000eb0:	1a09      	subs	r1, r1, r0
 8000eb2:	b2a4      	uxth	r4, r4
 8000eb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb8:	fb07 1110 	mls	r1, r7, r0, r1
 8000ebc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ec0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ec4:	45a6      	cmp	lr, r4
 8000ec6:	d908      	bls.n	8000eda <__udivmoddi4+0x156>
 8000ec8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ecc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ed0:	d202      	bcs.n	8000ed8 <__udivmoddi4+0x154>
 8000ed2:	45a6      	cmp	lr, r4
 8000ed4:	f200 80bb 	bhi.w	800104e <__udivmoddi4+0x2ca>
 8000ed8:	4608      	mov	r0, r1
 8000eda:	eba4 040e 	sub.w	r4, r4, lr
 8000ede:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ee2:	e79c      	b.n	8000e1e <__udivmoddi4+0x9a>
 8000ee4:	f1c6 0720 	rsb	r7, r6, #32
 8000ee8:	40b3      	lsls	r3, r6
 8000eea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ef2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ef6:	fa01 f306 	lsl.w	r3, r1, r6
 8000efa:	431c      	orrs	r4, r3
 8000efc:	40f9      	lsrs	r1, r7
 8000efe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f02:	fa00 f306 	lsl.w	r3, r0, r6
 8000f06:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f0a:	0c20      	lsrs	r0, r4, #16
 8000f0c:	fa1f fe8c 	uxth.w	lr, ip
 8000f10:	fb09 1118 	mls	r1, r9, r8, r1
 8000f14:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f18:	fb08 f00e 	mul.w	r0, r8, lr
 8000f1c:	4288      	cmp	r0, r1
 8000f1e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f22:	d90b      	bls.n	8000f3c <__udivmoddi4+0x1b8>
 8000f24:	eb1c 0101 	adds.w	r1, ip, r1
 8000f28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f2c:	f080 8088 	bcs.w	8001040 <__udivmoddi4+0x2bc>
 8000f30:	4288      	cmp	r0, r1
 8000f32:	f240 8085 	bls.w	8001040 <__udivmoddi4+0x2bc>
 8000f36:	f1a8 0802 	sub.w	r8, r8, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	1a09      	subs	r1, r1, r0
 8000f3e:	b2a4      	uxth	r4, r4
 8000f40:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f44:	fb09 1110 	mls	r1, r9, r0, r1
 8000f48:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f50:	458e      	cmp	lr, r1
 8000f52:	d908      	bls.n	8000f66 <__udivmoddi4+0x1e2>
 8000f54:	eb1c 0101 	adds.w	r1, ip, r1
 8000f58:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f5c:	d26c      	bcs.n	8001038 <__udivmoddi4+0x2b4>
 8000f5e:	458e      	cmp	lr, r1
 8000f60:	d96a      	bls.n	8001038 <__udivmoddi4+0x2b4>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4461      	add	r1, ip
 8000f66:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f6a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f6e:	eba1 010e 	sub.w	r1, r1, lr
 8000f72:	42a1      	cmp	r1, r4
 8000f74:	46c8      	mov	r8, r9
 8000f76:	46a6      	mov	lr, r4
 8000f78:	d356      	bcc.n	8001028 <__udivmoddi4+0x2a4>
 8000f7a:	d053      	beq.n	8001024 <__udivmoddi4+0x2a0>
 8000f7c:	b15d      	cbz	r5, 8000f96 <__udivmoddi4+0x212>
 8000f7e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f82:	eb61 010e 	sbc.w	r1, r1, lr
 8000f86:	fa01 f707 	lsl.w	r7, r1, r7
 8000f8a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f8e:	40f1      	lsrs	r1, r6
 8000f90:	431f      	orrs	r7, r3
 8000f92:	e9c5 7100 	strd	r7, r1, [r5]
 8000f96:	2600      	movs	r6, #0
 8000f98:	4631      	mov	r1, r6
 8000f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f9e:	f1c2 0320 	rsb	r3, r2, #32
 8000fa2:	40d8      	lsrs	r0, r3
 8000fa4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fa8:	fa21 f303 	lsr.w	r3, r1, r3
 8000fac:	4091      	lsls	r1, r2
 8000fae:	4301      	orrs	r1, r0
 8000fb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fb4:	fa1f fe8c 	uxth.w	lr, ip
 8000fb8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fbc:	fb07 3610 	mls	r6, r7, r0, r3
 8000fc0:	0c0b      	lsrs	r3, r1, #16
 8000fc2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fc6:	fb00 f60e 	mul.w	r6, r0, lr
 8000fca:	429e      	cmp	r6, r3
 8000fcc:	fa04 f402 	lsl.w	r4, r4, r2
 8000fd0:	d908      	bls.n	8000fe4 <__udivmoddi4+0x260>
 8000fd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fd6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fda:	d22f      	bcs.n	800103c <__udivmoddi4+0x2b8>
 8000fdc:	429e      	cmp	r6, r3
 8000fde:	d92d      	bls.n	800103c <__udivmoddi4+0x2b8>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	4463      	add	r3, ip
 8000fe4:	1b9b      	subs	r3, r3, r6
 8000fe6:	b289      	uxth	r1, r1
 8000fe8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fec:	fb07 3316 	mls	r3, r7, r6, r3
 8000ff0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ff4:	fb06 f30e 	mul.w	r3, r6, lr
 8000ff8:	428b      	cmp	r3, r1
 8000ffa:	d908      	bls.n	800100e <__udivmoddi4+0x28a>
 8000ffc:	eb1c 0101 	adds.w	r1, ip, r1
 8001000:	f106 38ff 	add.w	r8, r6, #4294967295
 8001004:	d216      	bcs.n	8001034 <__udivmoddi4+0x2b0>
 8001006:	428b      	cmp	r3, r1
 8001008:	d914      	bls.n	8001034 <__udivmoddi4+0x2b0>
 800100a:	3e02      	subs	r6, #2
 800100c:	4461      	add	r1, ip
 800100e:	1ac9      	subs	r1, r1, r3
 8001010:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001014:	e738      	b.n	8000e88 <__udivmoddi4+0x104>
 8001016:	462e      	mov	r6, r5
 8001018:	4628      	mov	r0, r5
 800101a:	e705      	b.n	8000e28 <__udivmoddi4+0xa4>
 800101c:	4606      	mov	r6, r0
 800101e:	e6e3      	b.n	8000de8 <__udivmoddi4+0x64>
 8001020:	4618      	mov	r0, r3
 8001022:	e6f8      	b.n	8000e16 <__udivmoddi4+0x92>
 8001024:	454b      	cmp	r3, r9
 8001026:	d2a9      	bcs.n	8000f7c <__udivmoddi4+0x1f8>
 8001028:	ebb9 0802 	subs.w	r8, r9, r2
 800102c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001030:	3801      	subs	r0, #1
 8001032:	e7a3      	b.n	8000f7c <__udivmoddi4+0x1f8>
 8001034:	4646      	mov	r6, r8
 8001036:	e7ea      	b.n	800100e <__udivmoddi4+0x28a>
 8001038:	4620      	mov	r0, r4
 800103a:	e794      	b.n	8000f66 <__udivmoddi4+0x1e2>
 800103c:	4640      	mov	r0, r8
 800103e:	e7d1      	b.n	8000fe4 <__udivmoddi4+0x260>
 8001040:	46d0      	mov	r8, sl
 8001042:	e77b      	b.n	8000f3c <__udivmoddi4+0x1b8>
 8001044:	3b02      	subs	r3, #2
 8001046:	4461      	add	r1, ip
 8001048:	e732      	b.n	8000eb0 <__udivmoddi4+0x12c>
 800104a:	4630      	mov	r0, r6
 800104c:	e709      	b.n	8000e62 <__udivmoddi4+0xde>
 800104e:	4464      	add	r4, ip
 8001050:	3802      	subs	r0, #2
 8001052:	e742      	b.n	8000eda <__udivmoddi4+0x156>

08001054 <__aeabi_idiv0>:
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop

08001058 <aiInit>:
#endif

ai_buffer *ai_input;
ai_buffer *ai_output;

int aiInit(void) {
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
    ai_error err;
    const ai_handle acts[] = { activations };
 800105e:	4b17      	ldr	r3, [pc, #92]	; (80010bc <aiInit+0x64>)
 8001060:	603b      	str	r3, [r7, #0]
	#if  NUM_SENSOR == 24
    err = ai_twoline_create_and_init(&allLine, acts, NULL);
	#elif  NUM_SENSOR == 36
    err = ai_threeline_create_and_init(&allLine, acts, NULL);
	#elif  NUM_SENSOR == 48
    err = ai_fourline_create_and_init(&allLine, acts, NULL);
 8001062:	463b      	mov	r3, r7
 8001064:	2200      	movs	r2, #0
 8001066:	4619      	mov	r1, r3
 8001068:	4815      	ldr	r0, [pc, #84]	; (80010c0 <aiInit+0x68>)
 800106a:	f00e f9ab 	bl	800f3c4 <ai_fourline_create_and_init>
 800106e:	4603      	mov	r3, r0
 8001070:	607b      	str	r3, [r7, #4]
	#endif
    if (err.type != AI_ERROR_NONE) {
 8001072:	793b      	ldrb	r3, [r7, #4]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d00a      	beq.n	800108e <aiInit+0x36>
        HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "aiInit Error \n"), 100);
 8001078:	4912      	ldr	r1, [pc, #72]	; (80010c4 <aiInit+0x6c>)
 800107a:	4813      	ldr	r0, [pc, #76]	; (80010c8 <aiInit+0x70>)
 800107c:	f012 fb2c 	bl	80136d8 <siprintf>
 8001080:	4603      	mov	r3, r0
 8001082:	b29a      	uxth	r2, r3
 8001084:	2364      	movs	r3, #100	; 0x64
 8001086:	4910      	ldr	r1, [pc, #64]	; (80010c8 <aiInit+0x70>)
 8001088:	4810      	ldr	r0, [pc, #64]	; (80010cc <aiInit+0x74>)
 800108a:	f007 fdf3 	bl	8008c74 <HAL_UART_Transmit>
    ai_output = ai_twoline_outputs_get(allLine, NULL);
#elif NUM_SENSOR == 36
    ai_input = ai_threeline_inputs_get(allLine, NULL);
    ai_output= ai_threeline_outputs_get(allLine, NULL);
#elif NUM_SENSOR == 48
    ai_input = ai_fourline_inputs_get(allLine, NULL);
 800108e:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <aiInit+0x68>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	2100      	movs	r1, #0
 8001094:	4618      	mov	r0, r3
 8001096:	f00e fa09 	bl	800f4ac <ai_fourline_inputs_get>
 800109a:	4603      	mov	r3, r0
 800109c:	4a0c      	ldr	r2, [pc, #48]	; (80010d0 <aiInit+0x78>)
 800109e:	6013      	str	r3, [r2, #0]
    ai_output = ai_fourline_outputs_get(allLine, NULL);
 80010a0:	4b07      	ldr	r3, [pc, #28]	; (80010c0 <aiInit+0x68>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2100      	movs	r1, #0
 80010a6:	4618      	mov	r0, r3
 80010a8:	f00e fa1a 	bl	800f4e0 <ai_fourline_outputs_get>
 80010ac:	4603      	mov	r3, r0
 80010ae:	4a09      	ldr	r2, [pc, #36]	; (80010d4 <aiInit+0x7c>)
 80010b0:	6013      	str	r3, [r2, #0]
#else
    HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "Invalid NUM_SENSOR \n"), 100);
    return -1;
#endif
    return 0;
 80010b2:	2300      	movs	r3, #0
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20001660 	.word	0x20001660
 80010c0:	2000165c 	.word	0x2000165c
 80010c4:	08018920 	.word	0x08018920
 80010c8:	20007870 	.word	0x20007870
 80010cc:	200077e8 	.word	0x200077e8
 80010d0:	20002550 	.word	0x20002550
 80010d4:	20002554 	.word	0x20002554

080010d8 <aiRun>:


int aiRun(const ai_float *in_data, ai_float *out_data) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]
    ai_i32 n_batch;

    // 1 - Update IO handlers with the data payload
    ai_input[0].data = AI_HANDLE_PTR(in_data);
 80010e2:	4b14      	ldr	r3, [pc, #80]	; (8001134 <aiRun+0x5c>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	687a      	ldr	r2, [r7, #4]
 80010e8:	605a      	str	r2, [r3, #4]
    ai_output[0].data = AI_HANDLE_PTR(out_data);
 80010ea:	4b13      	ldr	r3, [pc, #76]	; (8001138 <aiRun+0x60>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	683a      	ldr	r2, [r7, #0]
 80010f0:	605a      	str	r2, [r3, #4]
#if NUM_SENSOR == 24
    n_batch = ai_twoline_run(allLine, &ai_input[0], &ai_output[0]);
#elif NUM_SENSOR == 36
    n_batch = ai_threeline_run(allLine, &ai_input[0], &ai_output[0]);
#elif NUM_SENSOR == 48
    n_batch = ai_fourline_run(allLine, &ai_input[0], &ai_output[0]);
 80010f2:	4b12      	ldr	r3, [pc, #72]	; (800113c <aiRun+0x64>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a0f      	ldr	r2, [pc, #60]	; (8001134 <aiRun+0x5c>)
 80010f8:	6811      	ldr	r1, [r2, #0]
 80010fa:	4a0f      	ldr	r2, [pc, #60]	; (8001138 <aiRun+0x60>)
 80010fc:	6812      	ldr	r2, [r2, #0]
 80010fe:	4618      	mov	r0, r3
 8001100:	f00e fa44 	bl	800f58c <ai_fourline_run>
 8001104:	60f8      	str	r0, [r7, #12]
#else
    HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "Invalid NUM_SENSOR \n"), 100);
    return -1;
#endif
    if (n_batch != 1) {
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	2b01      	cmp	r3, #1
 800110a:	d00d      	beq.n	8001128 <aiRun+0x50>
        HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "aiRun Error \n"), 100);
 800110c:	490c      	ldr	r1, [pc, #48]	; (8001140 <aiRun+0x68>)
 800110e:	480d      	ldr	r0, [pc, #52]	; (8001144 <aiRun+0x6c>)
 8001110:	f012 fae2 	bl	80136d8 <siprintf>
 8001114:	4603      	mov	r3, r0
 8001116:	b29a      	uxth	r2, r3
 8001118:	2364      	movs	r3, #100	; 0x64
 800111a:	490a      	ldr	r1, [pc, #40]	; (8001144 <aiRun+0x6c>)
 800111c:	480a      	ldr	r0, [pc, #40]	; (8001148 <aiRun+0x70>)
 800111e:	f007 fda9 	bl	8008c74 <HAL_UART_Transmit>
        return -1;
 8001122:	f04f 33ff 	mov.w	r3, #4294967295
 8001126:	e000      	b.n	800112a <aiRun+0x52>
    };
    return 0;
 8001128:	2300      	movs	r3, #0
}
 800112a:	4618      	mov	r0, r3
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20002550 	.word	0x20002550
 8001138:	20002554 	.word	0x20002554
 800113c:	2000165c 	.word	0x2000165c
 8001140:	08018930 	.word	0x08018930
 8001144:	20007870 	.word	0x20007870
 8001148:	200077e8 	.word	0x200077e8
 800114c:	00000000 	.word	0x00000000

08001150 <CalculateStats>:
float sensorValues[NUM_SENSOR][NUM_READINGS-throwSomenumber] = {0};
float sensorAverages[NUM_SENSOR] = {0};
float sensorStdDevs[NUM_SENSOR] = {0};
int readingCount[NUM_SENSOR] = {0};

void CalculateStats(int sensorIndex) {
 8001150:	b5b0      	push	{r4, r5, r7, lr}
 8001152:	b088      	sub	sp, #32
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
    float sum = 0;
 8001158:	f04f 0300 	mov.w	r3, #0
 800115c:	61fb      	str	r3, [r7, #28]
    float mean = 0;
 800115e:	f04f 0300 	mov.w	r3, #0
 8001162:	60fb      	str	r3, [r7, #12]
    float stdDevSum = 0;
 8001164:	f04f 0300 	mov.w	r3, #0
 8001168:	61bb      	str	r3, [r7, #24]
    int count = readingCount[sensorIndex];
 800116a:	4a49      	ldr	r2, [pc, #292]	; (8001290 <CalculateStats+0x140>)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001172:	60bb      	str	r3, [r7, #8]

    // 평균 계산
    for (int i = 0; i < count; i++) { sum += sensorValues[sensorIndex][i];}
 8001174:	2300      	movs	r3, #0
 8001176:	617b      	str	r3, [r7, #20]
 8001178:	e013      	b.n	80011a2 <CalculateStats+0x52>
 800117a:	4946      	ldr	r1, [pc, #280]	; (8001294 <CalculateStats+0x144>)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2264      	movs	r2, #100	; 0x64
 8001180:	fb03 f202 	mul.w	r2, r3, r2
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	4413      	add	r3, r2
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	440b      	add	r3, r1
 800118c:	edd3 7a00 	vldr	s15, [r3]
 8001190:	ed97 7a07 	vldr	s14, [r7, #28]
 8001194:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001198:	edc7 7a07 	vstr	s15, [r7, #28]
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	3301      	adds	r3, #1
 80011a0:	617b      	str	r3, [r7, #20]
 80011a2:	697a      	ldr	r2, [r7, #20]
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	429a      	cmp	r2, r3
 80011a8:	dbe7      	blt.n	800117a <CalculateStats+0x2a>
    mean = sum / count;
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	ee07 3a90 	vmov	s15, r3
 80011b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80011b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011bc:	edc7 7a03 	vstr	s15, [r7, #12]
    sensorAverages[sensorIndex] = mean;
 80011c0:	4a35      	ldr	r2, [pc, #212]	; (8001298 <CalculateStats+0x148>)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	4413      	add	r3, r2
 80011c8:	68fa      	ldr	r2, [r7, #12]
 80011ca:	601a      	str	r2, [r3, #0]
    // 표준편차 계산
    for (int i = 0; i < count; i++) { stdDevSum += pow(sensorValues[sensorIndex][i] - mean, 2);}
 80011cc:	2300      	movs	r3, #0
 80011ce:	613b      	str	r3, [r7, #16]
 80011d0:	e030      	b.n	8001234 <CalculateStats+0xe4>
 80011d2:	4930      	ldr	r1, [pc, #192]	; (8001294 <CalculateStats+0x144>)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2264      	movs	r2, #100	; 0x64
 80011d8:	fb03 f202 	mul.w	r2, r3, r2
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	4413      	add	r3, r2
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	440b      	add	r3, r1
 80011e4:	ed93 7a00 	vldr	s14, [r3]
 80011e8:	edd7 7a03 	vldr	s15, [r7, #12]
 80011ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011f0:	ee17 0a90 	vmov	r0, s15
 80011f4:	f7ff f9d8 	bl	80005a8 <__aeabi_f2d>
 80011f8:	4602      	mov	r2, r0
 80011fa:	460b      	mov	r3, r1
 80011fc:	ed9f 1b22 	vldr	d1, [pc, #136]	; 8001288 <CalculateStats+0x138>
 8001200:	ec43 2b10 	vmov	d0, r2, r3
 8001204:	f016 fbf0 	bl	80179e8 <pow>
 8001208:	ec55 4b10 	vmov	r4, r5, d0
 800120c:	69b8      	ldr	r0, [r7, #24]
 800120e:	f7ff f9cb 	bl	80005a8 <__aeabi_f2d>
 8001212:	4602      	mov	r2, r0
 8001214:	460b      	mov	r3, r1
 8001216:	4620      	mov	r0, r4
 8001218:	4629      	mov	r1, r5
 800121a:	f7ff f867 	bl	80002ec <__adddf3>
 800121e:	4602      	mov	r2, r0
 8001220:	460b      	mov	r3, r1
 8001222:	4610      	mov	r0, r2
 8001224:	4619      	mov	r1, r3
 8001226:	f7ff fd0f 	bl	8000c48 <__aeabi_d2f>
 800122a:	4603      	mov	r3, r0
 800122c:	61bb      	str	r3, [r7, #24]
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	3301      	adds	r3, #1
 8001232:	613b      	str	r3, [r7, #16]
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	429a      	cmp	r2, r3
 800123a:	dbca      	blt.n	80011d2 <CalculateStats+0x82>
    sensorStdDevs[sensorIndex] = sqrt(stdDevSum / count);
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	ee07 3a90 	vmov	s15, r3
 8001242:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001246:	ed97 7a06 	vldr	s14, [r7, #24]
 800124a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800124e:	ee16 0a90 	vmov	r0, s13
 8001252:	f7ff f9a9 	bl	80005a8 <__aeabi_f2d>
 8001256:	4602      	mov	r2, r0
 8001258:	460b      	mov	r3, r1
 800125a:	ec43 2b10 	vmov	d0, r2, r3
 800125e:	f016 fc33 	bl	8017ac8 <sqrt>
 8001262:	ec53 2b10 	vmov	r2, r3, d0
 8001266:	4610      	mov	r0, r2
 8001268:	4619      	mov	r1, r3
 800126a:	f7ff fced 	bl	8000c48 <__aeabi_d2f>
 800126e:	4602      	mov	r2, r0
 8001270:	490a      	ldr	r1, [pc, #40]	; (800129c <CalculateStats+0x14c>)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	440b      	add	r3, r1
 8001278:	601a      	str	r2, [r3, #0]
}
 800127a:	bf00      	nop
 800127c:	3720      	adds	r7, #32
 800127e:	46bd      	mov	sp, r7
 8001280:	bdb0      	pop	{r4, r5, r7, pc}
 8001282:	bf00      	nop
 8001284:	f3af 8000 	nop.w
 8001288:	00000000 	.word	0x00000000
 800128c:	40000000 	.word	0x40000000
 8001290:	200071d8 	.word	0x200071d8
 8001294:	20002558 	.word	0x20002558
 8001298:	20007058 	.word	0x20007058
 800129c:	20007118 	.word	0x20007118

080012a0 <TransmitStats>:

// 평균과 표준편차를 UART로 전송하는 함수
void TransmitStats() {
 80012a0:	b5b0      	push	{r4, r5, r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af04      	add	r7, sp, #16
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "Sensor Avg Std\r\n"), 100);
 80012a6:	4920      	ldr	r1, [pc, #128]	; (8001328 <TransmitStats+0x88>)
 80012a8:	4820      	ldr	r0, [pc, #128]	; (800132c <TransmitStats+0x8c>)
 80012aa:	f012 fa15 	bl	80136d8 <siprintf>
 80012ae:	4603      	mov	r3, r0
 80012b0:	b29a      	uxth	r2, r3
 80012b2:	2364      	movs	r3, #100	; 0x64
 80012b4:	491d      	ldr	r1, [pc, #116]	; (800132c <TransmitStats+0x8c>)
 80012b6:	481e      	ldr	r0, [pc, #120]	; (8001330 <TransmitStats+0x90>)
 80012b8:	f007 fcdc 	bl	8008c74 <HAL_UART_Transmit>
    for (int i = 0; i < NUM_SENSOR; i++) {
 80012bc:	2300      	movs	r3, #0
 80012be:	607b      	str	r3, [r7, #4]
 80012c0:	e029      	b.n	8001316 <TransmitStats+0x76>
        CalculateStats(i); // 통계 계산
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f7ff ff44 	bl	8001150 <CalculateStats>
    	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "%d %.2f %.2f\r\n", i, sensorAverages[i], sensorStdDevs[i]), 100);
 80012c8:	4a1a      	ldr	r2, [pc, #104]	; (8001334 <TransmitStats+0x94>)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	4413      	add	r3, r2
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff f968 	bl	80005a8 <__aeabi_f2d>
 80012d8:	4604      	mov	r4, r0
 80012da:	460d      	mov	r5, r1
 80012dc:	4a16      	ldr	r2, [pc, #88]	; (8001338 <TransmitStats+0x98>)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	4413      	add	r3, r2
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff f95e 	bl	80005a8 <__aeabi_f2d>
 80012ec:	4602      	mov	r2, r0
 80012ee:	460b      	mov	r3, r1
 80012f0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80012f4:	e9cd 4500 	strd	r4, r5, [sp]
 80012f8:	687a      	ldr	r2, [r7, #4]
 80012fa:	4910      	ldr	r1, [pc, #64]	; (800133c <TransmitStats+0x9c>)
 80012fc:	480b      	ldr	r0, [pc, #44]	; (800132c <TransmitStats+0x8c>)
 80012fe:	f012 f9eb 	bl	80136d8 <siprintf>
 8001302:	4603      	mov	r3, r0
 8001304:	b29a      	uxth	r2, r3
 8001306:	2364      	movs	r3, #100	; 0x64
 8001308:	4908      	ldr	r1, [pc, #32]	; (800132c <TransmitStats+0x8c>)
 800130a:	4809      	ldr	r0, [pc, #36]	; (8001330 <TransmitStats+0x90>)
 800130c:	f007 fcb2 	bl	8008c74 <HAL_UART_Transmit>
    for (int i = 0; i < NUM_SENSOR; i++) {
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	3301      	adds	r3, #1
 8001314:	607b      	str	r3, [r7, #4]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2b2f      	cmp	r3, #47	; 0x2f
 800131a:	ddd2      	ble.n	80012c2 <TransmitStats+0x22>
    }
}
 800131c:	bf00      	nop
 800131e:	bf00      	nop
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bdb0      	pop	{r4, r5, r7, pc}
 8001326:	bf00      	nop
 8001328:	08018940 	.word	0x08018940
 800132c:	20007870 	.word	0x20007870
 8001330:	200077e8 	.word	0x200077e8
 8001334:	20007058 	.word	0x20007058
 8001338:	20007118 	.word	0x20007118
 800133c:	08018954 	.word	0x08018954

08001340 <ResetSensorData>:

void ResetSensorData() {
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
    // 모든 센서 값과 읽기 횟수를 0으로 설정
    for (int i = 0; i < NUM_SENSOR; i++) {
 8001346:	2300      	movs	r3, #0
 8001348:	607b      	str	r3, [r7, #4]
 800134a:	e014      	b.n	8001376 <ResetSensorData+0x36>
        memset(sensorValues[i], 0, sizeof(sensorValues[i]));
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001352:	fb02 f303 	mul.w	r3, r2, r3
 8001356:	4a0c      	ldr	r2, [pc, #48]	; (8001388 <ResetSensorData+0x48>)
 8001358:	4413      	add	r3, r2
 800135a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800135e:	2100      	movs	r1, #0
 8001360:	4618      	mov	r0, r3
 8001362:	f011 fa41 	bl	80127e8 <memset>
        readingCount[i] = 0;
 8001366:	4a09      	ldr	r2, [pc, #36]	; (800138c <ResetSensorData+0x4c>)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2100      	movs	r1, #0
 800136c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < NUM_SENSOR; i++) {
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	3301      	adds	r3, #1
 8001374:	607b      	str	r3, [r7, #4]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2b2f      	cmp	r3, #47	; 0x2f
 800137a:	dde7      	ble.n	800134c <ResetSensorData+0xc>
    }
}
 800137c:	bf00      	nop
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20002558 	.word	0x20002558
 800138c:	200071d8 	.word	0x200071d8

08001390 <InitStats>:

void InitStats(){
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
	for(int i; i<NUM_SENSOR;i++){
 8001396:	e010      	b.n	80013ba <InitStats+0x2a>
		sensorAverages[i] = 0;
 8001398:	4a0d      	ldr	r2, [pc, #52]	; (80013d0 <InitStats+0x40>)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	4413      	add	r3, r2
 80013a0:	f04f 0200 	mov.w	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
		sensorStdDevs[i] = 0;
 80013a6:	4a0b      	ldr	r2, [pc, #44]	; (80013d4 <InitStats+0x44>)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	4413      	add	r3, r2
 80013ae:	f04f 0200 	mov.w	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
	for(int i; i<NUM_SENSOR;i++){
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	3301      	adds	r3, #1
 80013b8:	607b      	str	r3, [r7, #4]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2b2f      	cmp	r3, #47	; 0x2f
 80013be:	ddeb      	ble.n	8001398 <InitStats+0x8>
	}
}
 80013c0:	bf00      	nop
 80013c2:	bf00      	nop
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	20007058 	.word	0x20007058
 80013d4:	20007118 	.word	0x20007118

080013d8 <ProcessCommand>:

extern TIM_HandleTypeDef htim2;


void ProcessCommand(uint8_t *commandBuffer)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]

    if (command_in_progress) {
 80013e0:	4b5c      	ldr	r3, [pc, #368]	; (8001554 <ProcessCommand+0x17c>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d006      	beq.n	80013f8 <ProcessCommand+0x20>
        HAL_UART_Transmit(&huart1, (uint8_t*)"Command is currently executing, please wait...\n", 48, 100);
 80013ea:	2364      	movs	r3, #100	; 0x64
 80013ec:	2230      	movs	r2, #48	; 0x30
 80013ee:	495a      	ldr	r1, [pc, #360]	; (8001558 <ProcessCommand+0x180>)
 80013f0:	485a      	ldr	r0, [pc, #360]	; (800155c <ProcessCommand+0x184>)
 80013f2:	f007 fc3f 	bl	8008c74 <HAL_UART_Transmit>
        return;
 80013f6:	e0a9      	b.n	800154c <ProcessCommand+0x174>
    }

    command_in_progress = 1; // 명령 실행 상태 설정
 80013f8:	4b56      	ldr	r3, [pc, #344]	; (8001554 <ProcessCommand+0x17c>)
 80013fa:	2201      	movs	r2, #1
 80013fc:	701a      	strb	r2, [r3, #0]

    char *command = strtok((char*)commandBuffer, " "); // Command separation
 80013fe:	4958      	ldr	r1, [pc, #352]	; (8001560 <ProcessCommand+0x188>)
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	f013 f82d 	bl	8014460 <strtok>
 8001406:	60f8      	str	r0, [r7, #12]
    char *argument = strtok(NULL, " "); // argument seperation
 8001408:	4955      	ldr	r1, [pc, #340]	; (8001560 <ProcessCommand+0x188>)
 800140a:	2000      	movs	r0, #0
 800140c:	f013 f828 	bl	8014460 <strtok>
 8001410:	60b8      	str	r0, [r7, #8]

    if (strcmp((char*)command, "echo") == 0) {HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "echo\n"), 100);}
 8001412:	4954      	ldr	r1, [pc, #336]	; (8001564 <ProcessCommand+0x18c>)
 8001414:	68f8      	ldr	r0, [r7, #12]
 8001416:	f7fe fefb 	bl	8000210 <strcmp>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d10b      	bne.n	8001438 <ProcessCommand+0x60>
 8001420:	4951      	ldr	r1, [pc, #324]	; (8001568 <ProcessCommand+0x190>)
 8001422:	4852      	ldr	r0, [pc, #328]	; (800156c <ProcessCommand+0x194>)
 8001424:	f012 f958 	bl	80136d8 <siprintf>
 8001428:	4603      	mov	r3, r0
 800142a:	b29a      	uxth	r2, r3
 800142c:	2364      	movs	r3, #100	; 0x64
 800142e:	494f      	ldr	r1, [pc, #316]	; (800156c <ProcessCommand+0x194>)
 8001430:	484a      	ldr	r0, [pc, #296]	; (800155c <ProcessCommand+0x184>)
 8001432:	f007 fc1f 	bl	8008c74 <HAL_UART_Transmit>
 8001436:	e086      	b.n	8001546 <ProcessCommand+0x16e>
    else if (strcmp((char*)command, "sensori2c") == 0) {SensorI2CCommand();} //sensori2c
 8001438:	494d      	ldr	r1, [pc, #308]	; (8001570 <ProcessCommand+0x198>)
 800143a:	68f8      	ldr	r0, [r7, #12]
 800143c:	f7fe fee8 	bl	8000210 <strcmp>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d102      	bne.n	800144c <ProcessCommand+0x74>
 8001446:	f000 f8ad 	bl	80015a4 <SensorI2CCommand>
 800144a:	e07c      	b.n	8001546 <ProcessCommand+0x16e>
    else if (strcmp((char*)command, "seti2c") == 0) {SetI2CCommand();} //seti2c
 800144c:	4949      	ldr	r1, [pc, #292]	; (8001574 <ProcessCommand+0x19c>)
 800144e:	68f8      	ldr	r0, [r7, #12]
 8001450:	f7fe fede 	bl	8000210 <strcmp>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d102      	bne.n	8001460 <ProcessCommand+0x88>
 800145a:	f000 f99b 	bl	8001794 <SetI2CCommand>
 800145e:	e072      	b.n	8001546 <ProcessCommand+0x16e>
    else if (strcmp((char*)command, "rev") == 0) {RevCommand(argument);}
 8001460:	4945      	ldr	r1, [pc, #276]	; (8001578 <ProcessCommand+0x1a0>)
 8001462:	68f8      	ldr	r0, [r7, #12]
 8001464:	f7fe fed4 	bl	8000210 <strcmp>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d103      	bne.n	8001476 <ProcessCommand+0x9e>
 800146e:	68b8      	ldr	r0, [r7, #8]
 8001470:	f000 fb26 	bl	8001ac0 <RevCommand>
 8001474:	e067      	b.n	8001546 <ProcessCommand+0x16e>
    else if (strcmp((char*)command, "lin") == 0) {LinCommand(argument);}
 8001476:	4941      	ldr	r1, [pc, #260]	; (800157c <ProcessCommand+0x1a4>)
 8001478:	68f8      	ldr	r0, [r7, #12]
 800147a:	f7fe fec9 	bl	8000210 <strcmp>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d103      	bne.n	800148c <ProcessCommand+0xb4>
 8001484:	68b8      	ldr	r0, [r7, #8]
 8001486:	f000 fb7f 	bl	8001b88 <LinCommand>
 800148a:	e05c      	b.n	8001546 <ProcessCommand+0x16e>
    else if (strcmp((char*)command, "servo") == 0) {ServoCommand(argument);}
 800148c:	493c      	ldr	r1, [pc, #240]	; (8001580 <ProcessCommand+0x1a8>)
 800148e:	68f8      	ldr	r0, [r7, #12]
 8001490:	f7fe febe 	bl	8000210 <strcmp>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d103      	bne.n	80014a2 <ProcessCommand+0xca>
 800149a:	68b8      	ldr	r0, [r7, #8]
 800149c:	f000 fbda 	bl	8001c54 <ServoCommand>
 80014a0:	e051      	b.n	8001546 <ProcessCommand+0x16e>
    else if (strcmp((char*)command, "servo2") == 0) {Servo2Command(argument);}
 80014a2:	4938      	ldr	r1, [pc, #224]	; (8001584 <ProcessCommand+0x1ac>)
 80014a4:	68f8      	ldr	r0, [r7, #12]
 80014a6:	f7fe feb3 	bl	8000210 <strcmp>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d103      	bne.n	80014b8 <ProcessCommand+0xe0>
 80014b0:	68b8      	ldr	r0, [r7, #8]
 80014b2:	f000 fc37 	bl	8001d24 <Servo2Command>
 80014b6:	e046      	b.n	8001546 <ProcessCommand+0x16e>
    else if (strcmp((char*)command, "avg") == 0) {AvgStdCommand();}
 80014b8:	4933      	ldr	r1, [pc, #204]	; (8001588 <ProcessCommand+0x1b0>)
 80014ba:	68f8      	ldr	r0, [r7, #12]
 80014bc:	f7fe fea8 	bl	8000210 <strcmp>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d102      	bne.n	80014cc <ProcessCommand+0xf4>
 80014c6:	f000 fc8b 	bl	8001de0 <AvgStdCommand>
 80014ca:	e03c      	b.n	8001546 <ProcessCommand+0x16e>
    else if (strcmp((char*)command, "inferheati2c") == 0) {InferenceHeatI2CCommand();} //infercnni2c
 80014cc:	492f      	ldr	r1, [pc, #188]	; (800158c <ProcessCommand+0x1b4>)
 80014ce:	68f8      	ldr	r0, [r7, #12]
 80014d0:	f7fe fe9e 	bl	8000210 <strcmp>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d102      	bne.n	80014e0 <ProcessCommand+0x108>
 80014da:	f000 fd75 	bl	8001fc8 <InferenceHeatI2CCommand>
 80014de:	e032      	b.n	8001546 <ProcessCommand+0x16e>
    else if (strcmp((char*)command, "pointv") == 0) {PointingVertical();} // (0,20) -> (0,140)
 80014e0:	492b      	ldr	r1, [pc, #172]	; (8001590 <ProcessCommand+0x1b8>)
 80014e2:	68f8      	ldr	r0, [r7, #12]
 80014e4:	f7fe fe94 	bl	8000210 <strcmp>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d102      	bne.n	80014f4 <ProcessCommand+0x11c>
 80014ee:	f001 f897 	bl	8002620 <PointingVertical>
 80014f2:	e028      	b.n	8001546 <ProcessCommand+0x16e>
    else if (strcmp((char*)command, "pointr") == 0) {PointingRadial();} // (0,20) -> (0,140)
 80014f4:	4927      	ldr	r1, [pc, #156]	; (8001594 <ProcessCommand+0x1bc>)
 80014f6:	68f8      	ldr	r0, [r7, #12]
 80014f8:	f7fe fe8a 	bl	8000210 <strcmp>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d102      	bne.n	8001508 <ProcessCommand+0x130>
 8001502:	f001 fbcf 	bl	8002ca4 <PointingRadial>
 8001506:	e01e      	b.n	8001546 <ProcessCommand+0x16e>
    else if (strcmp((char*)command, "ini") == 0) {InitializaionCalibrationCommand();}
 8001508:	4923      	ldr	r1, [pc, #140]	; (8001598 <ProcessCommand+0x1c0>)
 800150a:	68f8      	ldr	r0, [r7, #12]
 800150c:	f7fe fe80 	bl	8000210 <strcmp>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d102      	bne.n	800151c <ProcessCommand+0x144>
 8001516:	f001 fbed 	bl	8002cf4 <InitializaionCalibrationCommand>
 800151a:	e014      	b.n	8001546 <ProcessCommand+0x16e>
    else if (strcmp((char*)command, "autoi2c") == 0) {AutoI2CCommand();}
 800151c:	491f      	ldr	r1, [pc, #124]	; (800159c <ProcessCommand+0x1c4>)
 800151e:	68f8      	ldr	r0, [r7, #12]
 8001520:	f7fe fe76 	bl	8000210 <strcmp>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d102      	bne.n	8001530 <ProcessCommand+0x158>
 800152a:	f001 fe33 	bl	8003194 <AutoI2CCommand>
 800152e:	e00a      	b.n	8001546 <ProcessCommand+0x16e>
    else {HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "Please insert correct command\n"), 100);}
 8001530:	491b      	ldr	r1, [pc, #108]	; (80015a0 <ProcessCommand+0x1c8>)
 8001532:	480e      	ldr	r0, [pc, #56]	; (800156c <ProcessCommand+0x194>)
 8001534:	f012 f8d0 	bl	80136d8 <siprintf>
 8001538:	4603      	mov	r3, r0
 800153a:	b29a      	uxth	r2, r3
 800153c:	2364      	movs	r3, #100	; 0x64
 800153e:	490b      	ldr	r1, [pc, #44]	; (800156c <ProcessCommand+0x194>)
 8001540:	4806      	ldr	r0, [pc, #24]	; (800155c <ProcessCommand+0x184>)
 8001542:	f007 fb97 	bl	8008c74 <HAL_UART_Transmit>

    command_in_progress = 0; // 명령 실행 완료 상태 해제
 8001546:	4b03      	ldr	r3, [pc, #12]	; (8001554 <ProcessCommand+0x17c>)
 8001548:	2200      	movs	r2, #0
 800154a:	701a      	strb	r2, [r3, #0]
}
 800154c:	3710      	adds	r7, #16
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	20007298 	.word	0x20007298
 8001558:	08018964 	.word	0x08018964
 800155c:	200077e8 	.word	0x200077e8
 8001560:	08018994 	.word	0x08018994
 8001564:	08018998 	.word	0x08018998
 8001568:	080189a0 	.word	0x080189a0
 800156c:	20007870 	.word	0x20007870
 8001570:	080189a8 	.word	0x080189a8
 8001574:	080189b4 	.word	0x080189b4
 8001578:	080189bc 	.word	0x080189bc
 800157c:	080189c0 	.word	0x080189c0
 8001580:	080189c4 	.word	0x080189c4
 8001584:	080189cc 	.word	0x080189cc
 8001588:	080189d4 	.word	0x080189d4
 800158c:	080189d8 	.word	0x080189d8
 8001590:	080189e8 	.word	0x080189e8
 8001594:	080189f0 	.word	0x080189f0
 8001598:	080189f8 	.word	0x080189f8
 800159c:	080189fc 	.word	0x080189fc
 80015a0:	08018a04 	.word	0x08018a04

080015a4 <SensorI2CCommand>:


void SensorI2CCommand(){
 80015a4:	b590      	push	{r4, r7, lr}
 80015a6:	b089      	sub	sp, #36	; 0x24
 80015a8:	af00      	add	r7, sp, #0
	ResetAllDevices();
 80015aa:	f002 ffd9 	bl	8004560 <ResetAllDevices>
	setOnAllDevices();
 80015ae:	f003 f857 	bl	8004660 <setOnAllDevices>
	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "sensor test\r\n"), 100);
 80015b2:	496b      	ldr	r1, [pc, #428]	; (8001760 <SensorI2CCommand+0x1bc>)
 80015b4:	486b      	ldr	r0, [pc, #428]	; (8001764 <SensorI2CCommand+0x1c0>)
 80015b6:	f012 f88f 	bl	80136d8 <siprintf>
 80015ba:	4603      	mov	r3, r0
 80015bc:	b29a      	uxth	r2, r3
 80015be:	2364      	movs	r3, #100	; 0x64
 80015c0:	4968      	ldr	r1, [pc, #416]	; (8001764 <SensorI2CCommand+0x1c0>)
 80015c2:	4869      	ldr	r0, [pc, #420]	; (8001768 <SensorI2CCommand+0x1c4>)
 80015c4:	f007 fb56 	bl	8008c74 <HAL_UART_Transmit>
	uint32_t startTime = 0, endTime = 0, diffTime = 0;
 80015c8:	2300      	movs	r3, #0
 80015ca:	60fb      	str	r3, [r7, #12]
 80015cc:	2300      	movs	r3, #0
 80015ce:	60bb      	str	r3, [r7, #8]
 80015d0:	2300      	movs	r3, #0
 80015d2:	607b      	str	r3, [r7, #4]

    for(int count =0; count < NUM_READINGS; count++){
 80015d4:	2300      	movs	r3, #0
 80015d6:	61fb      	str	r3, [r7, #28]
 80015d8:	e0b6      	b.n	8001748 <SensorI2CCommand+0x1a4>
    	uint8_t sensorCount = 0;
 80015da:	2300      	movs	r3, #0
 80015dc:	76fb      	strb	r3, [r7, #27]
    	startTime = HAL_GetTick();
 80015de:	f003 f8e5 	bl	80047ac <HAL_GetTick>
 80015e2:	60f8      	str	r0, [r7, #12]
		for (int i = 0; i < NUM_SENSOR; i++) {
 80015e4:	2300      	movs	r3, #0
 80015e6:	617b      	str	r3, [r7, #20]
 80015e8:	e054      	b.n	8001694 <SensorI2CCommand+0xf0>
			Dev = &vl53l0x_s[i];
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80015f0:	fb02 f303 	mul.w	r3, r2, r3
 80015f4:	4a5d      	ldr	r2, [pc, #372]	; (800176c <SensorI2CCommand+0x1c8>)
 80015f6:	4413      	add	r3, r2
 80015f8:	4a5d      	ldr	r2, [pc, #372]	; (8001770 <SensorI2CCommand+0x1cc>)
 80015fa:	6013      	str	r3, [r2, #0]
			VL53L0X_PerformContinuousRangingMeasurement(Dev, &RangingData); // 1500us
 80015fc:	4b5c      	ldr	r3, [pc, #368]	; (8001770 <SensorI2CCommand+0x1cc>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	495c      	ldr	r1, [pc, #368]	; (8001774 <SensorI2CCommand+0x1d0>)
 8001602:	4618      	mov	r0, r3
 8001604:	f00a f91a 	bl	800b83c <VL53L0X_PerformContinuousRangingMeasurement>
			if (RangingData.RangeStatus == 0) {
 8001608:	4b5a      	ldr	r3, [pc, #360]	; (8001774 <SensorI2CCommand+0x1d0>)
 800160a:	7e1b      	ldrb	r3, [r3, #24]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d13e      	bne.n	800168e <SensorI2CCommand+0xea>
			  if (RangingData.RangeMilliMeter < 100) {
 8001610:	4b58      	ldr	r3, [pc, #352]	; (8001774 <SensorI2CCommand+0x1d0>)
 8001612:	891b      	ldrh	r3, [r3, #8]
 8001614:	2b63      	cmp	r3, #99	; 0x63
 8001616:	d83a      	bhi.n	800168e <SensorI2CCommand+0xea>
				  filteredValue[i] = Kalman_Estimate(&filters[i], RangingData.RangeMilliMeter);
 8001618:	697a      	ldr	r2, [r7, #20]
 800161a:	4613      	mov	r3, r2
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	4413      	add	r3, r2
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	4a55      	ldr	r2, [pc, #340]	; (8001778 <SensorI2CCommand+0x1d4>)
 8001624:	4413      	add	r3, r2
 8001626:	4a53      	ldr	r2, [pc, #332]	; (8001774 <SensorI2CCommand+0x1d0>)
 8001628:	8912      	ldrh	r2, [r2, #8]
 800162a:	ee07 2a90 	vmov	s15, r2
 800162e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001632:	eeb0 0a67 	vmov.f32	s0, s15
 8001636:	4618      	mov	r0, r3
 8001638:	f002 f826 	bl	8003688 <Kalman_Estimate>
 800163c:	eef0 7a40 	vmov.f32	s15, s0
 8001640:	4a4e      	ldr	r2, [pc, #312]	; (800177c <SensorI2CCommand+0x1d8>)
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	4413      	add	r3, r2
 8001648:	edc3 7a00 	vstr	s15, [r3]
				  //filteredValue[i] = RangingData.RangeMilliMeter;
				  sensorValues[i][readingCount[i]] = filteredValue[i];
 800164c:	4a4c      	ldr	r2, [pc, #304]	; (8001780 <SensorI2CCommand+0x1dc>)
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001654:	4949      	ldr	r1, [pc, #292]	; (800177c <SensorI2CCommand+0x1d8>)
 8001656:	697a      	ldr	r2, [r7, #20]
 8001658:	0092      	lsls	r2, r2, #2
 800165a:	440a      	add	r2, r1
 800165c:	6812      	ldr	r2, [r2, #0]
 800165e:	4849      	ldr	r0, [pc, #292]	; (8001784 <SensorI2CCommand+0x1e0>)
 8001660:	6979      	ldr	r1, [r7, #20]
 8001662:	2464      	movs	r4, #100	; 0x64
 8001664:	fb04 f101 	mul.w	r1, r4, r1
 8001668:	440b      	add	r3, r1
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	4403      	add	r3, r0
 800166e:	601a      	str	r2, [r3, #0]
				  if(count>throwSomenumber){
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	2b14      	cmp	r3, #20
 8001674:	dd08      	ble.n	8001688 <SensorI2CCommand+0xe4>
				  readingCount[i]++;}
 8001676:	4a42      	ldr	r2, [pc, #264]	; (8001780 <SensorI2CCommand+0x1dc>)
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800167e:	1c5a      	adds	r2, r3, #1
 8001680:	493f      	ldr	r1, [pc, #252]	; (8001780 <SensorI2CCommand+0x1dc>)
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				  sensorCount++;
 8001688:	7efb      	ldrb	r3, [r7, #27]
 800168a:	3301      	adds	r3, #1
 800168c:	76fb      	strb	r3, [r7, #27]
		for (int i = 0; i < NUM_SENSOR; i++) {
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	3301      	adds	r3, #1
 8001692:	617b      	str	r3, [r7, #20]
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	2b2f      	cmp	r3, #47	; 0x2f
 8001698:	dda7      	ble.n	80015ea <SensorI2CCommand+0x46>
				  //HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d ", RangingData.RangeStatus), 500);
				  // 1 : Sigma Fail | 2 : Signal Fail | 3 : Min Range Fail | 4 : Phase Fail | 5 : Hardware Fail | 255 : No update
			  }
		}
		do {
		    endTime = HAL_GetTick();
 800169a:	f003 f887 	bl	80047ac <HAL_GetTick>
 800169e:	60b8      	str	r0, [r7, #8]
		    diffTime = endTime - startTime;
 80016a0:	68ba      	ldr	r2, [r7, #8]
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	607b      	str	r3, [r7, #4]
		} while (diffTime <= TIMBUDGET);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2b64      	cmp	r3, #100	; 0x64
 80016ac:	d9f5      	bls.n	800169a <SensorI2CCommand+0xf6>
		#ifdef data
		for (int i = 0; i < NUM_SENSOR; i++) {
 80016ae:	2300      	movs	r3, #0
 80016b0:	613b      	str	r3, [r7, #16]
 80016b2:	e018      	b.n	80016e6 <SensorI2CCommand+0x142>
			  HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.1f ", filteredValue[i]), 500);
 80016b4:	4a31      	ldr	r2, [pc, #196]	; (800177c <SensorI2CCommand+0x1d8>)
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	4413      	add	r3, r2
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4618      	mov	r0, r3
 80016c0:	f7fe ff72 	bl	80005a8 <__aeabi_f2d>
 80016c4:	4602      	mov	r2, r0
 80016c6:	460b      	mov	r3, r1
 80016c8:	492f      	ldr	r1, [pc, #188]	; (8001788 <SensorI2CCommand+0x1e4>)
 80016ca:	4826      	ldr	r0, [pc, #152]	; (8001764 <SensorI2CCommand+0x1c0>)
 80016cc:	f012 f804 	bl	80136d8 <siprintf>
 80016d0:	4603      	mov	r3, r0
 80016d2:	b29a      	uxth	r2, r3
 80016d4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80016d8:	4922      	ldr	r1, [pc, #136]	; (8001764 <SensorI2CCommand+0x1c0>)
 80016da:	4823      	ldr	r0, [pc, #140]	; (8001768 <SensorI2CCommand+0x1c4>)
 80016dc:	f007 faca 	bl	8008c74 <HAL_UART_Transmit>
		for (int i = 0; i < NUM_SENSOR; i++) {
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	3301      	adds	r3, #1
 80016e4:	613b      	str	r3, [r7, #16]
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	2b2f      	cmp	r3, #47	; 0x2f
 80016ea:	dde3      	ble.n	80016b4 <SensorI2CCommand+0x110>
		  }
		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d ", NUM_READINGS), 100);
 80016ec:	2278      	movs	r2, #120	; 0x78
 80016ee:	4927      	ldr	r1, [pc, #156]	; (800178c <SensorI2CCommand+0x1e8>)
 80016f0:	481c      	ldr	r0, [pc, #112]	; (8001764 <SensorI2CCommand+0x1c0>)
 80016f2:	f011 fff1 	bl	80136d8 <siprintf>
 80016f6:	4603      	mov	r3, r0
 80016f8:	b29a      	uxth	r2, r3
 80016fa:	2364      	movs	r3, #100	; 0x64
 80016fc:	4919      	ldr	r1, [pc, #100]	; (8001764 <SensorI2CCommand+0x1c0>)
 80016fe:	481a      	ldr	r0, [pc, #104]	; (8001768 <SensorI2CCommand+0x1c4>)
 8001700:	f007 fab8 	bl	8008c74 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d ", sensorCount), 100);
 8001704:	7efb      	ldrb	r3, [r7, #27]
 8001706:	461a      	mov	r2, r3
 8001708:	4920      	ldr	r1, [pc, #128]	; (800178c <SensorI2CCommand+0x1e8>)
 800170a:	4816      	ldr	r0, [pc, #88]	; (8001764 <SensorI2CCommand+0x1c0>)
 800170c:	f011 ffe4 	bl	80136d8 <siprintf>
 8001710:	4603      	mov	r3, r0
 8001712:	b29a      	uxth	r2, r3
 8001714:	2364      	movs	r3, #100	; 0x64
 8001716:	4913      	ldr	r1, [pc, #76]	; (8001764 <SensorI2CCommand+0x1c0>)
 8001718:	4813      	ldr	r0, [pc, #76]	; (8001768 <SensorI2CCommand+0x1c4>)
 800171a:	f007 faab 	bl	8008c74 <HAL_UART_Transmit>

		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%lu\n", diffTime), 100);
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	491b      	ldr	r1, [pc, #108]	; (8001790 <SensorI2CCommand+0x1ec>)
 8001722:	4810      	ldr	r0, [pc, #64]	; (8001764 <SensorI2CCommand+0x1c0>)
 8001724:	f011 ffd8 	bl	80136d8 <siprintf>
 8001728:	4603      	mov	r3, r0
 800172a:	b29a      	uxth	r2, r3
 800172c:	2364      	movs	r3, #100	; 0x64
 800172e:	490d      	ldr	r1, [pc, #52]	; (8001764 <SensorI2CCommand+0x1c0>)
 8001730:	480d      	ldr	r0, [pc, #52]	; (8001768 <SensorI2CCommand+0x1c4>)
 8001732:	f007 fa9f 	bl	8008c74 <HAL_UART_Transmit>
		#endif
		startTime = 0;
 8001736:	2300      	movs	r3, #0
 8001738:	60fb      	str	r3, [r7, #12]
		endTime = 0;
 800173a:	2300      	movs	r3, #0
 800173c:	60bb      	str	r3, [r7, #8]
		diffTime = 0;
 800173e:	2300      	movs	r3, #0
 8001740:	607b      	str	r3, [r7, #4]
    for(int count =0; count < NUM_READINGS; count++){
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	3301      	adds	r3, #1
 8001746:	61fb      	str	r3, [r7, #28]
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	2b77      	cmp	r3, #119	; 0x77
 800174c:	f77f af45 	ble.w	80015da <SensorI2CCommand+0x36>
    }
    TransmitStats();
 8001750:	f7ff fda6 	bl	80012a0 <TransmitStats>
    ResetSensorData();
 8001754:	f7ff fdf4 	bl	8001340 <ResetSensorData>
}
 8001758:	bf00      	nop
 800175a:	3724      	adds	r7, #36	; 0x24
 800175c:	46bd      	mov	sp, r7
 800175e:	bd90      	pop	{r4, r7, pc}
 8001760:	08018a24 	.word	0x08018a24
 8001764:	20007870 	.word	0x20007870
 8001768:	200077e8 	.word	0x200077e8
 800176c:	20007a60 	.word	0x20007a60
 8001770:	2000c560 	.word	0x2000c560
 8001774:	200078f4 	.word	0x200078f4
 8001778:	200072f4 	.word	0x200072f4
 800177c:	200076b4 	.word	0x200076b4
 8001780:	200071d8 	.word	0x200071d8
 8001784:	20002558 	.word	0x20002558
 8001788:	08018a34 	.word	0x08018a34
 800178c:	08018a3c 	.word	0x08018a3c
 8001790:	08018a40 	.word	0x08018a40

08001794 <SetI2CCommand>:

void SetI2CCommand(){
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "SetCommand\n\r"), 100);
 800179a:	49b3      	ldr	r1, [pc, #716]	; (8001a68 <SetI2CCommand+0x2d4>)
 800179c:	48b3      	ldr	r0, [pc, #716]	; (8001a6c <SetI2CCommand+0x2d8>)
 800179e:	f011 ff9b 	bl	80136d8 <siprintf>
 80017a2:	4603      	mov	r3, r0
 80017a4:	b29a      	uxth	r2, r3
 80017a6:	2364      	movs	r3, #100	; 0x64
 80017a8:	49b0      	ldr	r1, [pc, #704]	; (8001a6c <SetI2CCommand+0x2d8>)
 80017aa:	48b1      	ldr	r0, [pc, #708]	; (8001a70 <SetI2CCommand+0x2dc>)
 80017ac:	f007 fa62 	bl	8008c74 <HAL_UART_Transmit>

	ResetAllDevices();
 80017b0:	f002 fed6 	bl	8004560 <ResetAllDevices>
	memset(vl53l0x_s, 0, sizeof(VL53L0X_Dev_t));
 80017b4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80017b8:	2100      	movs	r1, #0
 80017ba:	48ae      	ldr	r0, [pc, #696]	; (8001a74 <SetI2CCommand+0x2e0>)
 80017bc:	f011 f814 	bl	80127e8 <memset>
  	for (int i = 0; i < NUM_SENSOR; i++) {
 80017c0:	2300      	movs	r3, #0
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	e145      	b.n	8001a52 <SetI2CCommand+0x2be>
  	    uint8_t q = i / 12;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	4aab      	ldr	r2, [pc, #684]	; (8001a78 <SetI2CCommand+0x2e4>)
 80017ca:	fb82 1203 	smull	r1, r2, r2, r3
 80017ce:	1052      	asrs	r2, r2, #1
 80017d0:	17db      	asrs	r3, r3, #31
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	72fb      	strb	r3, [r7, #11]
  	    uint8_t r = i % 12;
 80017d6:	68fa      	ldr	r2, [r7, #12]
 80017d8:	4ba7      	ldr	r3, [pc, #668]	; (8001a78 <SetI2CCommand+0x2e4>)
 80017da:	fb83 1302 	smull	r1, r3, r3, r2
 80017de:	1059      	asrs	r1, r3, #1
 80017e0:	17d3      	asrs	r3, r2, #31
 80017e2:	1ac9      	subs	r1, r1, r3
 80017e4:	460b      	mov	r3, r1
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	440b      	add	r3, r1
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	1ad1      	subs	r1, r2, r3
 80017ee:	460b      	mov	r3, r1
 80017f0:	72bb      	strb	r3, [r7, #10]
  	    uint8_t active_device = q * 2 + (r >= 8 ? 1 : 0);
 80017f2:	7afb      	ldrb	r3, [r7, #11]
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	7aba      	ldrb	r2, [r7, #10]
 80017fa:	2a07      	cmp	r2, #7
 80017fc:	bf8c      	ite	hi
 80017fe:	2201      	movhi	r2, #1
 8001800:	2200      	movls	r2, #0
 8001802:	b2d2      	uxtb	r2, r2
 8001804:	4413      	add	r3, r2
 8001806:	727b      	strb	r3, [r7, #9]
  	    uint8_t channel = (r >= 8) ? r - 8 : r;
 8001808:	7abb      	ldrb	r3, [r7, #10]
 800180a:	2b07      	cmp	r3, #7
 800180c:	d903      	bls.n	8001816 <SetI2CCommand+0x82>
 800180e:	7abb      	ldrb	r3, [r7, #10]
 8001810:	3b08      	subs	r3, #8
 8001812:	b2db      	uxtb	r3, r3
 8001814:	e000      	b.n	8001818 <SetI2CCommand+0x84>
 8001816:	7abb      	ldrb	r3, [r7, #10]
 8001818:	723b      	strb	r3, [r7, #8]

        ResetDevicesExcept(active_device);
 800181a:	7a7b      	ldrb	r3, [r7, #9]
 800181c:	4618      	mov	r0, r3
 800181e:	f002 fecb 	bl	80045b8 <ResetDevicesExcept>
        setActiveTcaChannel(active_device,channel);
 8001822:	7a3a      	ldrb	r2, [r7, #8]
 8001824:	7a7b      	ldrb	r3, [r7, #9]
 8001826:	4611      	mov	r1, r2
 8001828:	4618      	mov	r0, r3
 800182a:	f002 fef7 	bl	800461c <setActiveTcaChannel>
  		Dev = &vl53l0x_s[i];
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001834:	fb02 f303 	mul.w	r3, r2, r3
 8001838:	4a8e      	ldr	r2, [pc, #568]	; (8001a74 <SetI2CCommand+0x2e0>)
 800183a:	4413      	add	r3, r2
 800183c:	4a8f      	ldr	r2, [pc, #572]	; (8001a7c <SetI2CCommand+0x2e8>)
 800183e:	6013      	str	r3, [r2, #0]
  		Dev->I2cHandle = &hi2c1;
 8001840:	4b8e      	ldr	r3, [pc, #568]	; (8001a7c <SetI2CCommand+0x2e8>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a8e      	ldr	r2, [pc, #568]	; (8001a80 <SetI2CCommand+0x2ec>)
 8001846:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  		Dev->I2cDevAddr = VL53L0X_ADDR;
 800184a:	4b8c      	ldr	r3, [pc, #560]	; (8001a7c <SetI2CCommand+0x2e8>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2252      	movs	r2, #82	; 0x52
 8001850:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
  		Dev->comms_type = 1;
 8001854:	4b89      	ldr	r3, [pc, #548]	; (8001a7c <SetI2CCommand+0x2e8>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2201      	movs	r2, #1
 800185a:	f883 2174 	strb.w	r2, [r3, #372]	; 0x174
  		Dev->comms_speed_khz = 100;
 800185e:	4b87      	ldr	r3, [pc, #540]	; (8001a7c <SetI2CCommand+0x2e8>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	2264      	movs	r2, #100	; 0x64
 8001864:	f8a3 2176 	strh.w	r2, [r3, #374]	; 0x176
  		uint8_t newadd = 0x52 + 2*i;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	3329      	adds	r3, #41	; 0x29
 800186c:	b2db      	uxtb	r3, r3
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	71fb      	strb	r3, [r7, #7]
  		VL53L0X_SetDeviceAddress(Dev, newadd);
 8001872:	4b82      	ldr	r3, [pc, #520]	; (8001a7c <SetI2CCommand+0x2e8>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	79fa      	ldrb	r2, [r7, #7]
 8001878:	4611      	mov	r1, r2
 800187a:	4618      	mov	r0, r3
 800187c:	f008 faee 	bl	8009e5c <VL53L0X_SetDeviceAddress>
  		Dev->I2cDevAddr = newadd;
 8001880:	4b7e      	ldr	r3, [pc, #504]	; (8001a7c <SetI2CCommand+0x2e8>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	79fa      	ldrb	r2, [r7, #7]
 8001886:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

  		VL53L0X_WaitDeviceBooted( Dev );
 800188a:	4b7c      	ldr	r3, [pc, #496]	; (8001a7c <SetI2CCommand+0x2e8>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4618      	mov	r0, r3
 8001890:	f008 fde2 	bl	800a458 <VL53L0X_WaitDeviceBooted>
  		VL53L0X_DataInit( Dev );
 8001894:	4b79      	ldr	r3, [pc, #484]	; (8001a7c <SetI2CCommand+0x2e8>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4618      	mov	r0, r3
 800189a:	f008 faf7 	bl	8009e8c <VL53L0X_DataInit>
  		VL53L0X_StaticInit( Dev );
 800189e:	4b77      	ldr	r3, [pc, #476]	; (8001a7c <SetI2CCommand+0x2e8>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f008 fc56 	bl	800a154 <VL53L0X_StaticInit>
  		VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 80018a8:	4b74      	ldr	r3, [pc, #464]	; (8001a7c <SetI2CCommand+0x2e8>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2101      	movs	r1, #1
 80018ae:	4618      	mov	r0, r3
 80018b0:	f008 fe70 	bl	800a594 <VL53L0X_SetDeviceMode>

		VL53L0X_SetReferenceSpads(Dev, refSpadCountHost[i], isApertureSpadsHost[i]);
 80018b4:	4b71      	ldr	r3, [pc, #452]	; (8001a7c <SetI2CCommand+0x2e8>)
 80018b6:	6818      	ldr	r0, [r3, #0]
 80018b8:	4a72      	ldr	r2, [pc, #456]	; (8001a84 <SetI2CCommand+0x2f0>)
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80018c0:	4a71      	ldr	r2, [pc, #452]	; (8001a88 <SetI2CCommand+0x2f4>)
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	4413      	add	r3, r2
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	461a      	mov	r2, r3
 80018ca:	f009 ff8b 	bl	800b7e4 <VL53L0X_SetReferenceSpads>
  		VL53L0X_SetRefCalibration(Dev, VhvSettingsHost[i], PhaseCalHost[i]);
 80018ce:	4b6b      	ldr	r3, [pc, #428]	; (8001a7c <SetI2CCommand+0x2e8>)
 80018d0:	6818      	ldr	r0, [r3, #0]
 80018d2:	4a6e      	ldr	r2, [pc, #440]	; (8001a8c <SetI2CCommand+0x2f8>)
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	4413      	add	r3, r2
 80018d8:	7819      	ldrb	r1, [r3, #0]
 80018da:	4a6d      	ldr	r2, [pc, #436]	; (8001a90 <SetI2CCommand+0x2fc>)
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	4413      	add	r3, r2
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	461a      	mov	r2, r3
 80018e4:	f009 f8d2 	bl	800aa8c <VL53L0X_SetRefCalibration>

  		VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 80018e8:	4b64      	ldr	r3, [pc, #400]	; (8001a7c <SetI2CCommand+0x2e8>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2201      	movs	r2, #1
 80018ee:	2100      	movs	r1, #0
 80018f0:	4618      	mov	r0, r3
 80018f2:	f009 f8e3 	bl	800aabc <VL53L0X_SetLimitCheckEnable>
  		VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 80018f6:	4b61      	ldr	r3, [pc, #388]	; (8001a7c <SetI2CCommand+0x2e8>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2201      	movs	r2, #1
 80018fc:	2101      	movs	r1, #1
 80018fe:	4618      	mov	r0, r3
 8001900:	f009 f8dc 	bl	800aabc <VL53L0X_SetLimitCheckEnable>
  		VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 8001904:	4b5d      	ldr	r3, [pc, #372]	; (8001a7c <SetI2CCommand+0x2e8>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f641 1299 	movw	r2, #6553	; 0x1999
 800190c:	2101      	movs	r1, #1
 800190e:	4618      	mov	r0, r3
 8001910:	f009 f984 	bl	800ac1c <VL53L0X_SetLimitCheckValue>
  		VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 8001914:	4b59      	ldr	r3, [pc, #356]	; (8001a7c <SetI2CCommand+0x2e8>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800191c:	2100      	movs	r1, #0
 800191e:	4618      	mov	r0, r3
 8001920:	f009 f97c 	bl	800ac1c <VL53L0X_SetLimitCheckValue>
  		VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev, 100000);
 8001924:	4b55      	ldr	r3, [pc, #340]	; (8001a7c <SetI2CCommand+0x2e8>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	495a      	ldr	r1, [pc, #360]	; (8001a94 <SetI2CCommand+0x300>)
 800192a:	4618      	mov	r0, r3
 800192c:	f008 fe90 	bl	800a650 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
  		VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 8001930:	4b52      	ldr	r3, [pc, #328]	; (8001a7c <SetI2CCommand+0x2e8>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2212      	movs	r2, #18
 8001936:	2100      	movs	r1, #0
 8001938:	4618      	mov	r0, r3
 800193a:	f008 feaf 	bl	800a69c <VL53L0X_SetVcselPulsePeriod>
  		VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 800193e:	4b4f      	ldr	r3, [pc, #316]	; (8001a7c <SetI2CCommand+0x2e8>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	220e      	movs	r2, #14
 8001944:	2101      	movs	r1, #1
 8001946:	4618      	mov	r0, r3
 8001948:	f008 fea8 	bl	800a69c <VL53L0X_SetVcselPulsePeriod>

		Kalman_Init(&filters[i], Q, R, P, 0);  // Q, R, P
 800194c:	68fa      	ldr	r2, [r7, #12]
 800194e:	4613      	mov	r3, r2
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	4413      	add	r3, r2
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	4a50      	ldr	r2, [pc, #320]	; (8001a98 <SetI2CCommand+0x304>)
 8001958:	4413      	add	r3, r2
 800195a:	4a50      	ldr	r2, [pc, #320]	; (8001a9c <SetI2CCommand+0x308>)
 800195c:	edd2 7a00 	vldr	s15, [r2]
 8001960:	4a4f      	ldr	r2, [pc, #316]	; (8001aa0 <SetI2CCommand+0x30c>)
 8001962:	ed92 7a00 	vldr	s14, [r2]
 8001966:	4a4f      	ldr	r2, [pc, #316]	; (8001aa4 <SetI2CCommand+0x310>)
 8001968:	edd2 6a00 	vldr	s13, [r2]
 800196c:	eddf 1a4e 	vldr	s3, [pc, #312]	; 8001aa8 <SetI2CCommand+0x314>
 8001970:	eeb0 1a66 	vmov.f32	s2, s13
 8001974:	eef0 0a47 	vmov.f32	s1, s14
 8001978:	eeb0 0a67 	vmov.f32	s0, s15
 800197c:	4618      	mov	r0, r3
 800197e:	f001 fe65 	bl	800364c <Kalman_Init>

		#ifdef data
 		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%02d:(",i), 100);
 8001982:	68fa      	ldr	r2, [r7, #12]
 8001984:	4949      	ldr	r1, [pc, #292]	; (8001aac <SetI2CCommand+0x318>)
 8001986:	4839      	ldr	r0, [pc, #228]	; (8001a6c <SetI2CCommand+0x2d8>)
 8001988:	f011 fea6 	bl	80136d8 <siprintf>
 800198c:	4603      	mov	r3, r0
 800198e:	b29a      	uxth	r2, r3
 8001990:	2364      	movs	r3, #100	; 0x64
 8001992:	4936      	ldr	r1, [pc, #216]	; (8001a6c <SetI2CCommand+0x2d8>)
 8001994:	4836      	ldr	r0, [pc, #216]	; (8001a70 <SetI2CCommand+0x2dc>)
 8001996:	f007 f96d 	bl	8008c74 <HAL_UART_Transmit>
 		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%02lu ",refSpadCountHost[i]), 100);
 800199a:	4a3a      	ldr	r2, [pc, #232]	; (8001a84 <SetI2CCommand+0x2f0>)
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019a2:	461a      	mov	r2, r3
 80019a4:	4942      	ldr	r1, [pc, #264]	; (8001ab0 <SetI2CCommand+0x31c>)
 80019a6:	4831      	ldr	r0, [pc, #196]	; (8001a6c <SetI2CCommand+0x2d8>)
 80019a8:	f011 fe96 	bl	80136d8 <siprintf>
 80019ac:	4603      	mov	r3, r0
 80019ae:	b29a      	uxth	r2, r3
 80019b0:	2364      	movs	r3, #100	; 0x64
 80019b2:	492e      	ldr	r1, [pc, #184]	; (8001a6c <SetI2CCommand+0x2d8>)
 80019b4:	482e      	ldr	r0, [pc, #184]	; (8001a70 <SetI2CCommand+0x2dc>)
 80019b6:	f007 f95d 	bl	8008c74 <HAL_UART_Transmit>
 		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%02d ",isApertureSpadsHost[i]), 100);
 80019ba:	4a33      	ldr	r2, [pc, #204]	; (8001a88 <SetI2CCommand+0x2f4>)
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	4413      	add	r3, r2
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	461a      	mov	r2, r3
 80019c4:	493b      	ldr	r1, [pc, #236]	; (8001ab4 <SetI2CCommand+0x320>)
 80019c6:	4829      	ldr	r0, [pc, #164]	; (8001a6c <SetI2CCommand+0x2d8>)
 80019c8:	f011 fe86 	bl	80136d8 <siprintf>
 80019cc:	4603      	mov	r3, r0
 80019ce:	b29a      	uxth	r2, r3
 80019d0:	2364      	movs	r3, #100	; 0x64
 80019d2:	4926      	ldr	r1, [pc, #152]	; (8001a6c <SetI2CCommand+0x2d8>)
 80019d4:	4826      	ldr	r0, [pc, #152]	; (8001a70 <SetI2CCommand+0x2dc>)
 80019d6:	f007 f94d 	bl	8008c74 <HAL_UART_Transmit>
 		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%02d ",VhvSettingsHost[i]), 100);
 80019da:	4a2c      	ldr	r2, [pc, #176]	; (8001a8c <SetI2CCommand+0x2f8>)
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	4413      	add	r3, r2
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	461a      	mov	r2, r3
 80019e4:	4933      	ldr	r1, [pc, #204]	; (8001ab4 <SetI2CCommand+0x320>)
 80019e6:	4821      	ldr	r0, [pc, #132]	; (8001a6c <SetI2CCommand+0x2d8>)
 80019e8:	f011 fe76 	bl	80136d8 <siprintf>
 80019ec:	4603      	mov	r3, r0
 80019ee:	b29a      	uxth	r2, r3
 80019f0:	2364      	movs	r3, #100	; 0x64
 80019f2:	491e      	ldr	r1, [pc, #120]	; (8001a6c <SetI2CCommand+0x2d8>)
 80019f4:	481e      	ldr	r0, [pc, #120]	; (8001a70 <SetI2CCommand+0x2dc>)
 80019f6:	f007 f93d 	bl	8008c74 <HAL_UART_Transmit>
 		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%02d) ",PhaseCalHost[i]), 100);
 80019fa:	4a25      	ldr	r2, [pc, #148]	; (8001a90 <SetI2CCommand+0x2fc>)
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	4413      	add	r3, r2
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	461a      	mov	r2, r3
 8001a04:	492c      	ldr	r1, [pc, #176]	; (8001ab8 <SetI2CCommand+0x324>)
 8001a06:	4819      	ldr	r0, [pc, #100]	; (8001a6c <SetI2CCommand+0x2d8>)
 8001a08:	f011 fe66 	bl	80136d8 <siprintf>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	b29a      	uxth	r2, r3
 8001a10:	2364      	movs	r3, #100	; 0x64
 8001a12:	4916      	ldr	r1, [pc, #88]	; (8001a6c <SetI2CCommand+0x2d8>)
 8001a14:	4816      	ldr	r0, [pc, #88]	; (8001a70 <SetI2CCommand+0x2dc>)
 8001a16:	f007 f92d 	bl	8008c74 <HAL_UART_Transmit>
 		if(i%12 ==11){HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "\n\r"), 100);}
 8001a1a:	68f9      	ldr	r1, [r7, #12]
 8001a1c:	4b16      	ldr	r3, [pc, #88]	; (8001a78 <SetI2CCommand+0x2e4>)
 8001a1e:	fb83 2301 	smull	r2, r3, r3, r1
 8001a22:	105a      	asrs	r2, r3, #1
 8001a24:	17cb      	asrs	r3, r1, #31
 8001a26:	1ad2      	subs	r2, r2, r3
 8001a28:	4613      	mov	r3, r2
 8001a2a:	005b      	lsls	r3, r3, #1
 8001a2c:	4413      	add	r3, r2
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	1aca      	subs	r2, r1, r3
 8001a32:	2a0b      	cmp	r2, #11
 8001a34:	d10a      	bne.n	8001a4c <SetI2CCommand+0x2b8>
 8001a36:	4921      	ldr	r1, [pc, #132]	; (8001abc <SetI2CCommand+0x328>)
 8001a38:	480c      	ldr	r0, [pc, #48]	; (8001a6c <SetI2CCommand+0x2d8>)
 8001a3a:	f011 fe4d 	bl	80136d8 <siprintf>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	b29a      	uxth	r2, r3
 8001a42:	2364      	movs	r3, #100	; 0x64
 8001a44:	4909      	ldr	r1, [pc, #36]	; (8001a6c <SetI2CCommand+0x2d8>)
 8001a46:	480a      	ldr	r0, [pc, #40]	; (8001a70 <SetI2CCommand+0x2dc>)
 8001a48:	f007 f914 	bl	8008c74 <HAL_UART_Transmit>
  	for (int i = 0; i < NUM_SENSOR; i++) {
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	60fb      	str	r3, [r7, #12]
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2b2f      	cmp	r3, #47	; 0x2f
 8001a56:	f77f aeb6 	ble.w	80017c6 <SetI2CCommand+0x32>
		#endif
  	}
  	InitStats();
 8001a5a:	f7ff fc99 	bl	8001390 <InitStats>
}
 8001a5e:	bf00      	nop
 8001a60:	3710      	adds	r7, #16
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	08018a48 	.word	0x08018a48
 8001a6c:	20007870 	.word	0x20007870
 8001a70:	200077e8 	.word	0x200077e8
 8001a74:	20007a60 	.word	0x20007a60
 8001a78:	2aaaaaab 	.word	0x2aaaaaab
 8001a7c:	2000c560 	.word	0x2000c560
 8001a80:	200072a0 	.word	0x200072a0
 8001a84:	20000010 	.word	0x20000010
 8001a88:	200000d0 	.word	0x200000d0
 8001a8c:	20000100 	.word	0x20000100
 8001a90:	20000130 	.word	0x20000130
 8001a94:	000186a0 	.word	0x000186a0
 8001a98:	200072f4 	.word	0x200072f4
 8001a9c:	20000000 	.word	0x20000000
 8001aa0:	20000004 	.word	0x20000004
 8001aa4:	20000008 	.word	0x20000008
 8001aa8:	00000000 	.word	0x00000000
 8001aac:	08018a58 	.word	0x08018a58
 8001ab0:	08018a60 	.word	0x08018a60
 8001ab4:	08018a68 	.word	0x08018a68
 8001ab8:	08018a70 	.word	0x08018a70
 8001abc:	08018a78 	.word	0x08018a78

08001ac0 <RevCommand>:

void RevCommand(char *arg){
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b086      	sub	sp, #24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
    int step_rev_angle;
    uint32_t startTime, endTime, elapsedTime;
    if(sscanf(arg, "%d", &step_rev_angle) == 1){
 8001ac8:	f107 0308 	add.w	r3, r7, #8
 8001acc:	461a      	mov	r2, r3
 8001ace:	4927      	ldr	r1, [pc, #156]	; (8001b6c <RevCommand+0xac>)
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f011 fe21 	bl	8013718 <siscanf>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d134      	bne.n	8001b46 <RevCommand+0x86>
        startTime = HAL_GetTick();
 8001adc:	f002 fe66 	bl	80047ac <HAL_GetTick>
 8001ae0:	6178      	str	r0, [r7, #20]
		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d deg revolution Start \n\r",step_rev_angle), 100);
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	4922      	ldr	r1, [pc, #136]	; (8001b70 <RevCommand+0xb0>)
 8001ae8:	4822      	ldr	r0, [pc, #136]	; (8001b74 <RevCommand+0xb4>)
 8001aea:	f011 fdf5 	bl	80136d8 <siprintf>
 8001aee:	4603      	mov	r3, r0
 8001af0:	b29a      	uxth	r2, r3
 8001af2:	2364      	movs	r3, #100	; 0x64
 8001af4:	491f      	ldr	r1, [pc, #124]	; (8001b74 <RevCommand+0xb4>)
 8001af6:	4820      	ldr	r0, [pc, #128]	; (8001b78 <RevCommand+0xb8>)
 8001af8:	f007 f8bc 	bl	8008c74 <HAL_UART_Transmit>
        stepRev(step_rev_angle);
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f002 f8ba 	bl	8003c78 <stepRev>
		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d deg revolution End \n\r",step_rev_angle), 100);
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	461a      	mov	r2, r3
 8001b08:	491c      	ldr	r1, [pc, #112]	; (8001b7c <RevCommand+0xbc>)
 8001b0a:	481a      	ldr	r0, [pc, #104]	; (8001b74 <RevCommand+0xb4>)
 8001b0c:	f011 fde4 	bl	80136d8 <siprintf>
 8001b10:	4603      	mov	r3, r0
 8001b12:	b29a      	uxth	r2, r3
 8001b14:	2364      	movs	r3, #100	; 0x64
 8001b16:	4917      	ldr	r1, [pc, #92]	; (8001b74 <RevCommand+0xb4>)
 8001b18:	4817      	ldr	r0, [pc, #92]	; (8001b78 <RevCommand+0xb8>)
 8001b1a:	f007 f8ab 	bl	8008c74 <HAL_UART_Transmit>
		endTime = HAL_GetTick();
 8001b1e:	f002 fe45 	bl	80047ac <HAL_GetTick>
 8001b22:	6138      	str	r0, [r7, #16]
		elapsedTime = endTime - startTime;
 8001b24:	693a      	ldr	r2, [r7, #16]
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	60fb      	str	r3, [r7, #12]
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "Elapsed Time: %lu ms\n\r", elapsedTime), 100);
 8001b2c:	68fa      	ldr	r2, [r7, #12]
 8001b2e:	4914      	ldr	r1, [pc, #80]	; (8001b80 <RevCommand+0xc0>)
 8001b30:	4810      	ldr	r0, [pc, #64]	; (8001b74 <RevCommand+0xb4>)
 8001b32:	f011 fdd1 	bl	80136d8 <siprintf>
 8001b36:	4603      	mov	r3, r0
 8001b38:	b29a      	uxth	r2, r3
 8001b3a:	2364      	movs	r3, #100	; 0x64
 8001b3c:	490d      	ldr	r1, [pc, #52]	; (8001b74 <RevCommand+0xb4>)
 8001b3e:	480e      	ldr	r0, [pc, #56]	; (8001b78 <RevCommand+0xb8>)
 8001b40:	f007 f898 	bl	8008c74 <HAL_UART_Transmit>
 8001b44:	e00a      	b.n	8001b5c <RevCommand+0x9c>
    }else{
    	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "invalid data\r\n"), 100);
 8001b46:	490f      	ldr	r1, [pc, #60]	; (8001b84 <RevCommand+0xc4>)
 8001b48:	480a      	ldr	r0, [pc, #40]	; (8001b74 <RevCommand+0xb4>)
 8001b4a:	f011 fdc5 	bl	80136d8 <siprintf>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	b29a      	uxth	r2, r3
 8001b52:	2364      	movs	r3, #100	; 0x64
 8001b54:	4907      	ldr	r1, [pc, #28]	; (8001b74 <RevCommand+0xb4>)
 8001b56:	4808      	ldr	r0, [pc, #32]	; (8001b78 <RevCommand+0xb8>)
 8001b58:	f007 f88c 	bl	8008c74 <HAL_UART_Transmit>
    }
    HAL_Delay(1000); // Delay for 1 second
 8001b5c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b60:	f002 fe30 	bl	80047c4 <HAL_Delay>
}
 8001b64:	bf00      	nop
 8001b66:	3718      	adds	r7, #24
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	08018a7c 	.word	0x08018a7c
 8001b70:	08018a80 	.word	0x08018a80
 8001b74:	20007870 	.word	0x20007870
 8001b78:	200077e8 	.word	0x200077e8
 8001b7c:	08018a9c 	.word	0x08018a9c
 8001b80:	08018ab8 	.word	0x08018ab8
 8001b84:	08018ad0 	.word	0x08018ad0

08001b88 <LinCommand>:

void LinCommand(char *arg){
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b086      	sub	sp, #24
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
    int step_lin_dist = 0;
 8001b90:	2300      	movs	r3, #0
 8001b92:	60bb      	str	r3, [r7, #8]
    uint32_t startTime, endTime, elapsedTime;
    if (sscanf(arg, "%d", &step_lin_dist) == 1) {
 8001b94:	f107 0308 	add.w	r3, r7, #8
 8001b98:	461a      	mov	r2, r3
 8001b9a:	4927      	ldr	r1, [pc, #156]	; (8001c38 <LinCommand+0xb0>)
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f011 fdbb 	bl	8013718 <siscanf>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d134      	bne.n	8001c12 <LinCommand+0x8a>
        startTime = HAL_GetTick();
 8001ba8:	f002 fe00 	bl	80047ac <HAL_GetTick>
 8001bac:	6178      	str	r0, [r7, #20]
		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d mm lin Still moving \n\r",step_lin_dist), 100);
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	4922      	ldr	r1, [pc, #136]	; (8001c3c <LinCommand+0xb4>)
 8001bb4:	4822      	ldr	r0, [pc, #136]	; (8001c40 <LinCommand+0xb8>)
 8001bb6:	f011 fd8f 	bl	80136d8 <siprintf>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	b29a      	uxth	r2, r3
 8001bbe:	2364      	movs	r3, #100	; 0x64
 8001bc0:	491f      	ldr	r1, [pc, #124]	; (8001c40 <LinCommand+0xb8>)
 8001bc2:	4820      	ldr	r0, [pc, #128]	; (8001c44 <LinCommand+0xbc>)
 8001bc4:	f007 f856 	bl	8008c74 <HAL_UART_Transmit>
        stepLin(step_lin_dist);
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f002 f8bc 	bl	8003d48 <stepLin>
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d mm lin End\n\r", step_lin_dist), 100);
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	491c      	ldr	r1, [pc, #112]	; (8001c48 <LinCommand+0xc0>)
 8001bd6:	481a      	ldr	r0, [pc, #104]	; (8001c40 <LinCommand+0xb8>)
 8001bd8:	f011 fd7e 	bl	80136d8 <siprintf>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	b29a      	uxth	r2, r3
 8001be0:	2364      	movs	r3, #100	; 0x64
 8001be2:	4917      	ldr	r1, [pc, #92]	; (8001c40 <LinCommand+0xb8>)
 8001be4:	4817      	ldr	r0, [pc, #92]	; (8001c44 <LinCommand+0xbc>)
 8001be6:	f007 f845 	bl	8008c74 <HAL_UART_Transmit>
		endTime = HAL_GetTick();
 8001bea:	f002 fddf 	bl	80047ac <HAL_GetTick>
 8001bee:	6138      	str	r0, [r7, #16]
		elapsedTime = endTime - startTime;
 8001bf0:	693a      	ldr	r2, [r7, #16]
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	60fb      	str	r3, [r7, #12]
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "Elapsed Time: %lu ms\n\r", elapsedTime), 100);
 8001bf8:	68fa      	ldr	r2, [r7, #12]
 8001bfa:	4914      	ldr	r1, [pc, #80]	; (8001c4c <LinCommand+0xc4>)
 8001bfc:	4810      	ldr	r0, [pc, #64]	; (8001c40 <LinCommand+0xb8>)
 8001bfe:	f011 fd6b 	bl	80136d8 <siprintf>
 8001c02:	4603      	mov	r3, r0
 8001c04:	b29a      	uxth	r2, r3
 8001c06:	2364      	movs	r3, #100	; 0x64
 8001c08:	490d      	ldr	r1, [pc, #52]	; (8001c40 <LinCommand+0xb8>)
 8001c0a:	480e      	ldr	r0, [pc, #56]	; (8001c44 <LinCommand+0xbc>)
 8001c0c:	f007 f832 	bl	8008c74 <HAL_UART_Transmit>
 8001c10:	e00a      	b.n	8001c28 <LinCommand+0xa0>
    } else {
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "invalid data\r\n"), 100);
 8001c12:	490f      	ldr	r1, [pc, #60]	; (8001c50 <LinCommand+0xc8>)
 8001c14:	480a      	ldr	r0, [pc, #40]	; (8001c40 <LinCommand+0xb8>)
 8001c16:	f011 fd5f 	bl	80136d8 <siprintf>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	b29a      	uxth	r2, r3
 8001c1e:	2364      	movs	r3, #100	; 0x64
 8001c20:	4907      	ldr	r1, [pc, #28]	; (8001c40 <LinCommand+0xb8>)
 8001c22:	4808      	ldr	r0, [pc, #32]	; (8001c44 <LinCommand+0xbc>)
 8001c24:	f007 f826 	bl	8008c74 <HAL_UART_Transmit>
    }
    HAL_Delay(1000); // Delay for 1 second
 8001c28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c2c:	f002 fdca 	bl	80047c4 <HAL_Delay>
}
 8001c30:	bf00      	nop
 8001c32:	3718      	adds	r7, #24
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	08018a7c 	.word	0x08018a7c
 8001c3c:	08018ae0 	.word	0x08018ae0
 8001c40:	20007870 	.word	0x20007870
 8001c44:	200077e8 	.word	0x200077e8
 8001c48:	08018afc 	.word	0x08018afc
 8001c4c:	08018ab8 	.word	0x08018ab8
 8001c50:	08018ad0 	.word	0x08018ad0

08001c54 <ServoCommand>:

void ServoCommand(char *arg){
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
    float servo_angle_val = 0;
 8001c5c:	f04f 0300 	mov.w	r3, #0
 8001c60:	60fb      	str	r3, [r7, #12]
    if(sscanf(arg, "%f", &servo_angle_val) == 1) {
 8001c62:	f107 030c 	add.w	r3, r7, #12
 8001c66:	461a      	mov	r2, r3
 8001c68:	4927      	ldr	r1, [pc, #156]	; (8001d08 <ServoCommand+0xb4>)
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f011 fd54 	bl	8013718 <siscanf>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d138      	bne.n	8001ce8 <ServoCommand+0x94>
    	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f servo Still moving \n\r", servo_angle_val), 100);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7fe fc95 	bl	80005a8 <__aeabi_f2d>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	460b      	mov	r3, r1
 8001c82:	4922      	ldr	r1, [pc, #136]	; (8001d0c <ServoCommand+0xb8>)
 8001c84:	4822      	ldr	r0, [pc, #136]	; (8001d10 <ServoCommand+0xbc>)
 8001c86:	f011 fd27 	bl	80136d8 <siprintf>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	b29a      	uxth	r2, r3
 8001c8e:	2364      	movs	r3, #100	; 0x64
 8001c90:	491f      	ldr	r1, [pc, #124]	; (8001d10 <ServoCommand+0xbc>)
 8001c92:	4820      	ldr	r0, [pc, #128]	; (8001d14 <ServoCommand+0xc0>)
 8001c94:	f006 ffee 	bl	8008c74 <HAL_UART_Transmit>
    	setServoAngle(&htim2, TIM_CHANNEL_1, servo_angle_val);
 8001c98:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ca0:	edc7 7a00 	vstr	s15, [r7]
 8001ca4:	783b      	ldrb	r3, [r7, #0]
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	461a      	mov	r2, r3
 8001caa:	2100      	movs	r1, #0
 8001cac:	481a      	ldr	r0, [pc, #104]	; (8001d18 <ServoCommand+0xc4>)
 8001cae:	f002 f8f3 	bl	8003e98 <setServoAngle>
    	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f servo End \n\r", servo_angle_val), 100);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7fe fc77 	bl	80005a8 <__aeabi_f2d>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	4917      	ldr	r1, [pc, #92]	; (8001d1c <ServoCommand+0xc8>)
 8001cc0:	4813      	ldr	r0, [pc, #76]	; (8001d10 <ServoCommand+0xbc>)
 8001cc2:	f011 fd09 	bl	80136d8 <siprintf>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	b29a      	uxth	r2, r3
 8001cca:	2364      	movs	r3, #100	; 0x64
 8001ccc:	4910      	ldr	r1, [pc, #64]	; (8001d10 <ServoCommand+0xbc>)
 8001cce:	4811      	ldr	r0, [pc, #68]	; (8001d14 <ServoCommand+0xc0>)
 8001cd0:	f006 ffd0 	bl	8008c74 <HAL_UART_Transmit>
        HAL_Delay(2000); // Delay for 2 seconds
 8001cd4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001cd8:	f002 fd74 	bl	80047c4 <HAL_Delay>
        setServoAngle(&htim2, TIM_CHANNEL_1, 0); // return to servo origin
 8001cdc:	2200      	movs	r2, #0
 8001cde:	2100      	movs	r1, #0
 8001ce0:	480d      	ldr	r0, [pc, #52]	; (8001d18 <ServoCommand+0xc4>)
 8001ce2:	f002 f8d9 	bl	8003e98 <setServoAngle>
    }else{
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "invalid data\r\n"), 100);
    }
}
 8001ce6:	e00a      	b.n	8001cfe <ServoCommand+0xaa>
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "invalid data\r\n"), 100);
 8001ce8:	490d      	ldr	r1, [pc, #52]	; (8001d20 <ServoCommand+0xcc>)
 8001cea:	4809      	ldr	r0, [pc, #36]	; (8001d10 <ServoCommand+0xbc>)
 8001cec:	f011 fcf4 	bl	80136d8 <siprintf>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	2364      	movs	r3, #100	; 0x64
 8001cf6:	4906      	ldr	r1, [pc, #24]	; (8001d10 <ServoCommand+0xbc>)
 8001cf8:	4806      	ldr	r0, [pc, #24]	; (8001d14 <ServoCommand+0xc0>)
 8001cfa:	f006 ffbb 	bl	8008c74 <HAL_UART_Transmit>
}
 8001cfe:	bf00      	nop
 8001d00:	3710      	adds	r7, #16
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	08018b0c 	.word	0x08018b0c
 8001d0c:	08018b10 	.word	0x08018b10
 8001d10:	20007870 	.word	0x20007870
 8001d14:	200077e8 	.word	0x200077e8
 8001d18:	20007798 	.word	0x20007798
 8001d1c:	08018b2c 	.word	0x08018b2c
 8001d20:	08018ad0 	.word	0x08018ad0

08001d24 <Servo2Command>:

void Servo2Command(char *arg){
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
    float servo_angle_val = 0;
 8001d2c:	f04f 0300 	mov.w	r3, #0
 8001d30:	60fb      	str	r3, [r7, #12]
    if(sscanf(arg, "%f", &servo_angle_val) == 1) {
 8001d32:	f107 030c 	add.w	r3, r7, #12
 8001d36:	461a      	mov	r2, r3
 8001d38:	4922      	ldr	r1, [pc, #136]	; (8001dc4 <Servo2Command+0xa0>)
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f011 fcec 	bl	8013718 <siscanf>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d12f      	bne.n	8001da6 <Servo2Command+0x82>
    	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f servo Still moving \n\r", servo_angle_val), 100);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7fe fc2d 	bl	80005a8 <__aeabi_f2d>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	460b      	mov	r3, r1
 8001d52:	491d      	ldr	r1, [pc, #116]	; (8001dc8 <Servo2Command+0xa4>)
 8001d54:	481d      	ldr	r0, [pc, #116]	; (8001dcc <Servo2Command+0xa8>)
 8001d56:	f011 fcbf 	bl	80136d8 <siprintf>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	b29a      	uxth	r2, r3
 8001d5e:	2364      	movs	r3, #100	; 0x64
 8001d60:	491a      	ldr	r1, [pc, #104]	; (8001dcc <Servo2Command+0xa8>)
 8001d62:	481b      	ldr	r0, [pc, #108]	; (8001dd0 <Servo2Command+0xac>)
 8001d64:	f006 ff86 	bl	8008c74 <HAL_UART_Transmit>
    	setServoAngle(&htim2, TIM_CHANNEL_1, servo_angle_val);
 8001d68:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d70:	edc7 7a00 	vstr	s15, [r7]
 8001d74:	783b      	ldrb	r3, [r7, #0]
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	461a      	mov	r2, r3
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	4815      	ldr	r0, [pc, #84]	; (8001dd4 <Servo2Command+0xb0>)
 8001d7e:	f002 f88b 	bl	8003e98 <setServoAngle>
    	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f servo End \n\r", servo_angle_val), 100);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7fe fc0f 	bl	80005a8 <__aeabi_f2d>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	4912      	ldr	r1, [pc, #72]	; (8001dd8 <Servo2Command+0xb4>)
 8001d90:	480e      	ldr	r0, [pc, #56]	; (8001dcc <Servo2Command+0xa8>)
 8001d92:	f011 fca1 	bl	80136d8 <siprintf>
 8001d96:	4603      	mov	r3, r0
 8001d98:	b29a      	uxth	r2, r3
 8001d9a:	2364      	movs	r3, #100	; 0x64
 8001d9c:	490b      	ldr	r1, [pc, #44]	; (8001dcc <Servo2Command+0xa8>)
 8001d9e:	480c      	ldr	r0, [pc, #48]	; (8001dd0 <Servo2Command+0xac>)
 8001da0:	f006 ff68 	bl	8008c74 <HAL_UART_Transmit>
    }else{
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "invalid data\r\n"), 100);
    }
}
 8001da4:	e00a      	b.n	8001dbc <Servo2Command+0x98>
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "invalid data\r\n"), 100);
 8001da6:	490d      	ldr	r1, [pc, #52]	; (8001ddc <Servo2Command+0xb8>)
 8001da8:	4808      	ldr	r0, [pc, #32]	; (8001dcc <Servo2Command+0xa8>)
 8001daa:	f011 fc95 	bl	80136d8 <siprintf>
 8001dae:	4603      	mov	r3, r0
 8001db0:	b29a      	uxth	r2, r3
 8001db2:	2364      	movs	r3, #100	; 0x64
 8001db4:	4905      	ldr	r1, [pc, #20]	; (8001dcc <Servo2Command+0xa8>)
 8001db6:	4806      	ldr	r0, [pc, #24]	; (8001dd0 <Servo2Command+0xac>)
 8001db8:	f006 ff5c 	bl	8008c74 <HAL_UART_Transmit>
}
 8001dbc:	bf00      	nop
 8001dbe:	3710      	adds	r7, #16
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	08018b0c 	.word	0x08018b0c
 8001dc8:	08018b10 	.word	0x08018b10
 8001dcc:	20007870 	.word	0x20007870
 8001dd0:	200077e8 	.word	0x200077e8
 8001dd4:	20007798 	.word	0x20007798
 8001dd8:	08018b2c 	.word	0x08018b2c
 8001ddc:	08018ad0 	.word	0x08018ad0

08001de0 <AvgStdCommand>:




void AvgStdCommand(){
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "Avg Std Force Z\n" ), 1000);
 8001de6:	496f      	ldr	r1, [pc, #444]	; (8001fa4 <AvgStdCommand+0x1c4>)
 8001de8:	486f      	ldr	r0, [pc, #444]	; (8001fa8 <AvgStdCommand+0x1c8>)
 8001dea:	f011 fc75 	bl	80136d8 <siprintf>
 8001dee:	4603      	mov	r3, r0
 8001df0:	b29a      	uxth	r2, r3
 8001df2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001df6:	496c      	ldr	r1, [pc, #432]	; (8001fa8 <AvgStdCommand+0x1c8>)
 8001df8:	486c      	ldr	r0, [pc, #432]	; (8001fac <AvgStdCommand+0x1cc>)
 8001dfa:	f006 ff3b 	bl	8008c74 <HAL_UART_Transmit>
    for(int i = 0; i < sizeof(Xmean)/sizeof(Xmean[0]); i++) {
 8001dfe:	2300      	movs	r3, #0
 8001e00:	607b      	str	r3, [r7, #4]
 8001e02:	e02e      	b.n	8001e62 <AvgStdCommand+0x82>
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", Xmean[i]), 1000);
 8001e04:	4a6a      	ldr	r2, [pc, #424]	; (8001fb0 <AvgStdCommand+0x1d0>)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	4413      	add	r3, r2
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7fe fbca 	bl	80005a8 <__aeabi_f2d>
 8001e14:	4602      	mov	r2, r0
 8001e16:	460b      	mov	r3, r1
 8001e18:	4966      	ldr	r1, [pc, #408]	; (8001fb4 <AvgStdCommand+0x1d4>)
 8001e1a:	4863      	ldr	r0, [pc, #396]	; (8001fa8 <AvgStdCommand+0x1c8>)
 8001e1c:	f011 fc5c 	bl	80136d8 <siprintf>
 8001e20:	4603      	mov	r3, r0
 8001e22:	b29a      	uxth	r2, r3
 8001e24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e28:	495f      	ldr	r1, [pc, #380]	; (8001fa8 <AvgStdCommand+0x1c8>)
 8001e2a:	4860      	ldr	r0, [pc, #384]	; (8001fac <AvgStdCommand+0x1cc>)
 8001e2c:	f006 ff22 	bl	8008c74 <HAL_UART_Transmit>
        if(i%8==7){HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "\n"), 1000);}
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	425a      	negs	r2, r3
 8001e34:	f003 0307 	and.w	r3, r3, #7
 8001e38:	f002 0207 	and.w	r2, r2, #7
 8001e3c:	bf58      	it	pl
 8001e3e:	4253      	negpl	r3, r2
 8001e40:	2b07      	cmp	r3, #7
 8001e42:	d10b      	bne.n	8001e5c <AvgStdCommand+0x7c>
 8001e44:	495c      	ldr	r1, [pc, #368]	; (8001fb8 <AvgStdCommand+0x1d8>)
 8001e46:	4858      	ldr	r0, [pc, #352]	; (8001fa8 <AvgStdCommand+0x1c8>)
 8001e48:	f011 fc46 	bl	80136d8 <siprintf>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	b29a      	uxth	r2, r3
 8001e50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e54:	4954      	ldr	r1, [pc, #336]	; (8001fa8 <AvgStdCommand+0x1c8>)
 8001e56:	4855      	ldr	r0, [pc, #340]	; (8001fac <AvgStdCommand+0x1cc>)
 8001e58:	f006 ff0c 	bl	8008c74 <HAL_UART_Transmit>
    for(int i = 0; i < sizeof(Xmean)/sizeof(Xmean[0]); i++) {
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	3301      	adds	r3, #1
 8001e60:	607b      	str	r3, [r7, #4]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2b2f      	cmp	r3, #47	; 0x2f
 8001e66:	d9cd      	bls.n	8001e04 <AvgStdCommand+0x24>
    }
    for(int i = 0; i < sizeof(Xstd)/sizeof(Xstd[0]); i++) {
 8001e68:	2300      	movs	r3, #0
 8001e6a:	603b      	str	r3, [r7, #0]
 8001e6c:	e02e      	b.n	8001ecc <AvgStdCommand+0xec>
        HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", Xstd[i]), 1000);
 8001e6e:	4a53      	ldr	r2, [pc, #332]	; (8001fbc <AvgStdCommand+0x1dc>)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	4413      	add	r3, r2
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7fe fb95 	bl	80005a8 <__aeabi_f2d>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	460b      	mov	r3, r1
 8001e82:	494c      	ldr	r1, [pc, #304]	; (8001fb4 <AvgStdCommand+0x1d4>)
 8001e84:	4848      	ldr	r0, [pc, #288]	; (8001fa8 <AvgStdCommand+0x1c8>)
 8001e86:	f011 fc27 	bl	80136d8 <siprintf>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	b29a      	uxth	r2, r3
 8001e8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e92:	4945      	ldr	r1, [pc, #276]	; (8001fa8 <AvgStdCommand+0x1c8>)
 8001e94:	4845      	ldr	r0, [pc, #276]	; (8001fac <AvgStdCommand+0x1cc>)
 8001e96:	f006 feed 	bl	8008c74 <HAL_UART_Transmit>
        if(i%8==7){HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "\n"), 1000);}
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	425a      	negs	r2, r3
 8001e9e:	f003 0307 	and.w	r3, r3, #7
 8001ea2:	f002 0207 	and.w	r2, r2, #7
 8001ea6:	bf58      	it	pl
 8001ea8:	4253      	negpl	r3, r2
 8001eaa:	2b07      	cmp	r3, #7
 8001eac:	d10b      	bne.n	8001ec6 <AvgStdCommand+0xe6>
 8001eae:	4942      	ldr	r1, [pc, #264]	; (8001fb8 <AvgStdCommand+0x1d8>)
 8001eb0:	483d      	ldr	r0, [pc, #244]	; (8001fa8 <AvgStdCommand+0x1c8>)
 8001eb2:	f011 fc11 	bl	80136d8 <siprintf>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	b29a      	uxth	r2, r3
 8001eba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ebe:	493a      	ldr	r1, [pc, #232]	; (8001fa8 <AvgStdCommand+0x1c8>)
 8001ec0:	483a      	ldr	r0, [pc, #232]	; (8001fac <AvgStdCommand+0x1cc>)
 8001ec2:	f006 fed7 	bl	8008c74 <HAL_UART_Transmit>
    for(int i = 0; i < sizeof(Xstd)/sizeof(Xstd[0]); i++) {
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	3301      	adds	r3, #1
 8001eca:	603b      	str	r3, [r7, #0]
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	2b2f      	cmp	r3, #47	; 0x2f
 8001ed0:	d9cd      	bls.n	8001e6e <AvgStdCommand+0x8e>
    }
    HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", Fminmax[0]), 1000);
 8001ed2:	4b3b      	ldr	r3, [pc, #236]	; (8001fc0 <AvgStdCommand+0x1e0>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7fe fb66 	bl	80005a8 <__aeabi_f2d>
 8001edc:	4602      	mov	r2, r0
 8001ede:	460b      	mov	r3, r1
 8001ee0:	4934      	ldr	r1, [pc, #208]	; (8001fb4 <AvgStdCommand+0x1d4>)
 8001ee2:	4831      	ldr	r0, [pc, #196]	; (8001fa8 <AvgStdCommand+0x1c8>)
 8001ee4:	f011 fbf8 	bl	80136d8 <siprintf>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	b29a      	uxth	r2, r3
 8001eec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ef0:	492d      	ldr	r1, [pc, #180]	; (8001fa8 <AvgStdCommand+0x1c8>)
 8001ef2:	482e      	ldr	r0, [pc, #184]	; (8001fac <AvgStdCommand+0x1cc>)
 8001ef4:	f006 febe 	bl	8008c74 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", Fminmax[1]), 1000);
 8001ef8:	4b31      	ldr	r3, [pc, #196]	; (8001fc0 <AvgStdCommand+0x1e0>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7fe fb53 	bl	80005a8 <__aeabi_f2d>
 8001f02:	4602      	mov	r2, r0
 8001f04:	460b      	mov	r3, r1
 8001f06:	492b      	ldr	r1, [pc, #172]	; (8001fb4 <AvgStdCommand+0x1d4>)
 8001f08:	4827      	ldr	r0, [pc, #156]	; (8001fa8 <AvgStdCommand+0x1c8>)
 8001f0a:	f011 fbe5 	bl	80136d8 <siprintf>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	b29a      	uxth	r2, r3
 8001f12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f16:	4924      	ldr	r1, [pc, #144]	; (8001fa8 <AvgStdCommand+0x1c8>)
 8001f18:	4824      	ldr	r0, [pc, #144]	; (8001fac <AvgStdCommand+0x1cc>)
 8001f1a:	f006 feab 	bl	8008c74 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "\n"), 1000);
 8001f1e:	4926      	ldr	r1, [pc, #152]	; (8001fb8 <AvgStdCommand+0x1d8>)
 8001f20:	4821      	ldr	r0, [pc, #132]	; (8001fa8 <AvgStdCommand+0x1c8>)
 8001f22:	f011 fbd9 	bl	80136d8 <siprintf>
 8001f26:	4603      	mov	r3, r0
 8001f28:	b29a      	uxth	r2, r3
 8001f2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f2e:	491e      	ldr	r1, [pc, #120]	; (8001fa8 <AvgStdCommand+0x1c8>)
 8001f30:	481e      	ldr	r0, [pc, #120]	; (8001fac <AvgStdCommand+0x1cc>)
 8001f32:	f006 fe9f 	bl	8008c74 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", Zminmax[0]), 1000);
 8001f36:	4b23      	ldr	r3, [pc, #140]	; (8001fc4 <AvgStdCommand+0x1e4>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7fe fb34 	bl	80005a8 <__aeabi_f2d>
 8001f40:	4602      	mov	r2, r0
 8001f42:	460b      	mov	r3, r1
 8001f44:	491b      	ldr	r1, [pc, #108]	; (8001fb4 <AvgStdCommand+0x1d4>)
 8001f46:	4818      	ldr	r0, [pc, #96]	; (8001fa8 <AvgStdCommand+0x1c8>)
 8001f48:	f011 fbc6 	bl	80136d8 <siprintf>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	b29a      	uxth	r2, r3
 8001f50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f54:	4914      	ldr	r1, [pc, #80]	; (8001fa8 <AvgStdCommand+0x1c8>)
 8001f56:	4815      	ldr	r0, [pc, #84]	; (8001fac <AvgStdCommand+0x1cc>)
 8001f58:	f006 fe8c 	bl	8008c74 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", Zminmax[1]), 1000);
 8001f5c:	4b19      	ldr	r3, [pc, #100]	; (8001fc4 <AvgStdCommand+0x1e4>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7fe fb21 	bl	80005a8 <__aeabi_f2d>
 8001f66:	4602      	mov	r2, r0
 8001f68:	460b      	mov	r3, r1
 8001f6a:	4912      	ldr	r1, [pc, #72]	; (8001fb4 <AvgStdCommand+0x1d4>)
 8001f6c:	480e      	ldr	r0, [pc, #56]	; (8001fa8 <AvgStdCommand+0x1c8>)
 8001f6e:	f011 fbb3 	bl	80136d8 <siprintf>
 8001f72:	4603      	mov	r3, r0
 8001f74:	b29a      	uxth	r2, r3
 8001f76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f7a:	490b      	ldr	r1, [pc, #44]	; (8001fa8 <AvgStdCommand+0x1c8>)
 8001f7c:	480b      	ldr	r0, [pc, #44]	; (8001fac <AvgStdCommand+0x1cc>)
 8001f7e:	f006 fe79 	bl	8008c74 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "\n"), 1000);
 8001f82:	490d      	ldr	r1, [pc, #52]	; (8001fb8 <AvgStdCommand+0x1d8>)
 8001f84:	4808      	ldr	r0, [pc, #32]	; (8001fa8 <AvgStdCommand+0x1c8>)
 8001f86:	f011 fba7 	bl	80136d8 <siprintf>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	b29a      	uxth	r2, r3
 8001f8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f92:	4905      	ldr	r1, [pc, #20]	; (8001fa8 <AvgStdCommand+0x1c8>)
 8001f94:	4805      	ldr	r0, [pc, #20]	; (8001fac <AvgStdCommand+0x1cc>)
 8001f96:	f006 fe6d 	bl	8008c74 <HAL_UART_Transmit>
}
 8001f9a:	bf00      	nop
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	08018b40 	.word	0x08018b40
 8001fa8:	20007870 	.word	0x20007870
 8001fac:	200077e8 	.word	0x200077e8
 8001fb0:	20000178 	.word	0x20000178
 8001fb4:	08018b54 	.word	0x08018b54
 8001fb8:	08018b5c 	.word	0x08018b5c
 8001fbc:	20000238 	.word	0x20000238
 8001fc0:	200002f8 	.word	0x200002f8
 8001fc4:	20000300 	.word	0x20000300

08001fc8 <InferenceHeatI2CCommand>:


void InferenceHeatI2CCommand()
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b08c      	sub	sp, #48	; 0x30
 8001fcc:	af00      	add	r7, sp, #0
	SetI2CCommand();
 8001fce:	f7ff fbe1 	bl	8001794 <SetI2CCommand>
	SensorI2CCommand();
 8001fd2:	f7ff fae7 	bl	80015a4 <SensorI2CCommand>
	ResetAllDevices();
 8001fd6:	f002 fac3 	bl	8004560 <ResetAllDevices>
	setOnAllDevices();
 8001fda:	f002 fb41 	bl	8004660 <setOnAllDevices>
    HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "sensor test\r\n"), 100);
 8001fde:	490b      	ldr	r1, [pc, #44]	; (800200c <InferenceHeatI2CCommand+0x44>)
 8001fe0:	480b      	ldr	r0, [pc, #44]	; (8002010 <InferenceHeatI2CCommand+0x48>)
 8001fe2:	f011 fb79 	bl	80136d8 <siprintf>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	b29a      	uxth	r2, r3
 8001fea:	2364      	movs	r3, #100	; 0x64
 8001fec:	4908      	ldr	r1, [pc, #32]	; (8002010 <InferenceHeatI2CCommand+0x48>)
 8001fee:	4809      	ldr	r0, [pc, #36]	; (8002014 <InferenceHeatI2CCommand+0x4c>)
 8001ff0:	f006 fe40 	bl	8008c74 <HAL_UART_Transmit>
    uint32_t startTime, endTime, diffTime;
    for (int count =0; count <50000;count ++){
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ff8:	e2f8      	b.n	80025ec <InferenceHeatI2CCommand+0x624>
    	uint8_t tofCount =0;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    	startTime = HAL_GetTick();
 8002000:	f002 fbd4 	bl	80047ac <HAL_GetTick>
 8002004:	6178      	str	r0, [r7, #20]
        for (int i = 0; i < NUM_SENSOR; i++) {
 8002006:	2300      	movs	r3, #0
 8002008:	627b      	str	r3, [r7, #36]	; 0x24
 800200a:	e077      	b.n	80020fc <InferenceHeatI2CCommand+0x134>
 800200c:	08018a24 	.word	0x08018a24
 8002010:	20007870 	.word	0x20007870
 8002014:	200077e8 	.word	0x200077e8
            Dev = &vl53l0x_s[i];
 8002018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800201e:	fb02 f303 	mul.w	r3, r2, r3
 8002022:	4a9b      	ldr	r2, [pc, #620]	; (8002290 <InferenceHeatI2CCommand+0x2c8>)
 8002024:	4413      	add	r3, r2
 8002026:	4a9b      	ldr	r2, [pc, #620]	; (8002294 <InferenceHeatI2CCommand+0x2cc>)
 8002028:	6013      	str	r3, [r2, #0]
            VL53L0X_PerformContinuousRangingMeasurement(Dev, &RangingData); // 1500 uss
 800202a:	4b9a      	ldr	r3, [pc, #616]	; (8002294 <InferenceHeatI2CCommand+0x2cc>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	499a      	ldr	r1, [pc, #616]	; (8002298 <InferenceHeatI2CCommand+0x2d0>)
 8002030:	4618      	mov	r0, r3
 8002032:	f009 fc03 	bl	800b83c <VL53L0X_PerformContinuousRangingMeasurement>
            if (RangingData.RangeStatus == 0) {
 8002036:	4b98      	ldr	r3, [pc, #608]	; (8002298 <InferenceHeatI2CCommand+0x2d0>)
 8002038:	7e1b      	ldrb	r3, [r3, #24]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d15b      	bne.n	80020f6 <InferenceHeatI2CCommand+0x12e>
  			  if (RangingData.RangeMilliMeter < sensorAverages[i]+20) {
 800203e:	4b96      	ldr	r3, [pc, #600]	; (8002298 <InferenceHeatI2CCommand+0x2d0>)
 8002040:	891b      	ldrh	r3, [r3, #8]
 8002042:	ee07 3a90 	vmov	s15, r3
 8002046:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800204a:	4a94      	ldr	r2, [pc, #592]	; (800229c <InferenceHeatI2CCommand+0x2d4>)
 800204c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	4413      	add	r3, r2
 8002052:	edd3 7a00 	vldr	s15, [r3]
 8002056:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 800205a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800205e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002066:	d546      	bpl.n	80020f6 <InferenceHeatI2CCommand+0x12e>
            	filteredValue[i] = Kalman_Estimate(&filters[i], RangingData.RangeMilliMeter); // 500 us
 8002068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800206a:	4613      	mov	r3, r2
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	4413      	add	r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	4a8b      	ldr	r2, [pc, #556]	; (80022a0 <InferenceHeatI2CCommand+0x2d8>)
 8002074:	4413      	add	r3, r2
 8002076:	4a88      	ldr	r2, [pc, #544]	; (8002298 <InferenceHeatI2CCommand+0x2d0>)
 8002078:	8912      	ldrh	r2, [r2, #8]
 800207a:	ee07 2a90 	vmov	s15, r2
 800207e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002082:	eeb0 0a67 	vmov.f32	s0, s15
 8002086:	4618      	mov	r0, r3
 8002088:	f001 fafe 	bl	8003688 <Kalman_Estimate>
 800208c:	eef0 7a40 	vmov.f32	s15, s0
 8002090:	4a84      	ldr	r2, [pc, #528]	; (80022a4 <InferenceHeatI2CCommand+0x2dc>)
 8002092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	4413      	add	r3, r2
 8002098:	edc3 7a00 	vstr	s15, [r3]
                filteredValue[i] -= sensorAverages[i];
 800209c:	4a81      	ldr	r2, [pc, #516]	; (80022a4 <InferenceHeatI2CCommand+0x2dc>)
 800209e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	4413      	add	r3, r2
 80020a4:	ed93 7a00 	vldr	s14, [r3]
 80020a8:	4a7c      	ldr	r2, [pc, #496]	; (800229c <InferenceHeatI2CCommand+0x2d4>)
 80020aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	4413      	add	r3, r2
 80020b0:	edd3 7a00 	vldr	s15, [r3]
 80020b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020b8:	4a7a      	ldr	r2, [pc, #488]	; (80022a4 <InferenceHeatI2CCommand+0x2dc>)
 80020ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	4413      	add	r3, r2
 80020c0:	edc3 7a00 	vstr	s15, [r3]
                //filteredValue[i] -= Xmean[i];
                filteredValue[i] /= Xstd[i];
 80020c4:	4a77      	ldr	r2, [pc, #476]	; (80022a4 <InferenceHeatI2CCommand+0x2dc>)
 80020c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	4413      	add	r3, r2
 80020cc:	edd3 6a00 	vldr	s13, [r3]
 80020d0:	4a75      	ldr	r2, [pc, #468]	; (80022a8 <InferenceHeatI2CCommand+0x2e0>)
 80020d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	4413      	add	r3, r2
 80020d8:	ed93 7a00 	vldr	s14, [r3]
 80020dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020e0:	4a70      	ldr	r2, [pc, #448]	; (80022a4 <InferenceHeatI2CCommand+0x2dc>)
 80020e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	4413      	add	r3, r2
 80020e8:	edc3 7a00 	vstr	s15, [r3]
                tofCount++;
 80020ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80020f0:	3301      	adds	r3, #1
 80020f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        for (int i = 0; i < NUM_SENSOR; i++) {
 80020f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f8:	3301      	adds	r3, #1
 80020fa:	627b      	str	r3, [r7, #36]	; 0x24
 80020fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fe:	2b2f      	cmp	r3, #47	; 0x2f
 8002100:	dd8a      	ble.n	8002018 <InferenceHeatI2CCommand+0x50>
  			  }
            }
        }

        in_data[0] = filteredValue[0];
 8002102:	4b68      	ldr	r3, [pc, #416]	; (80022a4 <InferenceHeatI2CCommand+0x2dc>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a69      	ldr	r2, [pc, #420]	; (80022ac <InferenceHeatI2CCommand+0x2e4>)
 8002108:	6013      	str	r3, [r2, #0]
        in_data[1] = filteredValue[1];
 800210a:	4b66      	ldr	r3, [pc, #408]	; (80022a4 <InferenceHeatI2CCommand+0x2dc>)
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	4a67      	ldr	r2, [pc, #412]	; (80022ac <InferenceHeatI2CCommand+0x2e4>)
 8002110:	6053      	str	r3, [r2, #4]
        in_data[2] = filteredValue[2];
 8002112:	4b64      	ldr	r3, [pc, #400]	; (80022a4 <InferenceHeatI2CCommand+0x2dc>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	4a65      	ldr	r2, [pc, #404]	; (80022ac <InferenceHeatI2CCommand+0x2e4>)
 8002118:	6093      	str	r3, [r2, #8]
        in_data[3] = filteredValue[3];
 800211a:	4b62      	ldr	r3, [pc, #392]	; (80022a4 <InferenceHeatI2CCommand+0x2dc>)
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	4a63      	ldr	r2, [pc, #396]	; (80022ac <InferenceHeatI2CCommand+0x2e4>)
 8002120:	60d3      	str	r3, [r2, #12]
        in_data[4] = filteredValue[4];
 8002122:	4b60      	ldr	r3, [pc, #384]	; (80022a4 <InferenceHeatI2CCommand+0x2dc>)
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	4a61      	ldr	r2, [pc, #388]	; (80022ac <InferenceHeatI2CCommand+0x2e4>)
 8002128:	6113      	str	r3, [r2, #16]
        in_data[5] = filteredValue[5];
 800212a:	4b5e      	ldr	r3, [pc, #376]	; (80022a4 <InferenceHeatI2CCommand+0x2dc>)
 800212c:	695b      	ldr	r3, [r3, #20]
 800212e:	4a5f      	ldr	r2, [pc, #380]	; (80022ac <InferenceHeatI2CCommand+0x2e4>)
 8002130:	6153      	str	r3, [r2, #20]
        in_data[6] = filteredValue[6];
 8002132:	4b5c      	ldr	r3, [pc, #368]	; (80022a4 <InferenceHeatI2CCommand+0x2dc>)
 8002134:	699b      	ldr	r3, [r3, #24]
 8002136:	4a5d      	ldr	r2, [pc, #372]	; (80022ac <InferenceHeatI2CCommand+0x2e4>)
 8002138:	6193      	str	r3, [r2, #24]
        in_data[7] = filteredValue[7];
 800213a:	4b5a      	ldr	r3, [pc, #360]	; (80022a4 <InferenceHeatI2CCommand+0x2dc>)
 800213c:	69db      	ldr	r3, [r3, #28]
 800213e:	4a5b      	ldr	r2, [pc, #364]	; (80022ac <InferenceHeatI2CCommand+0x2e4>)
 8002140:	61d3      	str	r3, [r2, #28]
        in_data[8] = filteredValue[8];
 8002142:	4b58      	ldr	r3, [pc, #352]	; (80022a4 <InferenceHeatI2CCommand+0x2dc>)
 8002144:	6a1b      	ldr	r3, [r3, #32]
 8002146:	4a59      	ldr	r2, [pc, #356]	; (80022ac <InferenceHeatI2CCommand+0x2e4>)
 8002148:	6213      	str	r3, [r2, #32]
        in_data[9] = filteredValue[9];
 800214a:	4b56      	ldr	r3, [pc, #344]	; (80022a4 <InferenceHeatI2CCommand+0x2dc>)
 800214c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214e:	4a57      	ldr	r2, [pc, #348]	; (80022ac <InferenceHeatI2CCommand+0x2e4>)
 8002150:	6253      	str	r3, [r2, #36]	; 0x24
        in_data[10] = filteredValue[10];
 8002152:	4b54      	ldr	r3, [pc, #336]	; (80022a4 <InferenceHeatI2CCommand+0x2dc>)
 8002154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002156:	4a55      	ldr	r2, [pc, #340]	; (80022ac <InferenceHeatI2CCommand+0x2e4>)
 8002158:	6293      	str	r3, [r2, #40]	; 0x28
        in_data[11] = filteredValue[11];
 800215a:	4b52      	ldr	r3, [pc, #328]	; (80022a4 <InferenceHeatI2CCommand+0x2dc>)
 800215c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800215e:	4a53      	ldr	r2, [pc, #332]	; (80022ac <InferenceHeatI2CCommand+0x2e4>)
 8002160:	62d3      	str	r3, [r2, #44]	; 0x2c
        in_data[12] = filteredValue[0];
 8002162:	4b50      	ldr	r3, [pc, #320]	; (80022a4 <InferenceHeatI2CCommand+0x2dc>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a51      	ldr	r2, [pc, #324]	; (80022ac <InferenceHeatI2CCommand+0x2e4>)
 8002168:	6313      	str	r3, [r2, #48]	; 0x30

        in_data[13] = filteredValue[12];
 800216a:	4b4e      	ldr	r3, [pc, #312]	; (80022a4 <InferenceHeatI2CCommand+0x2dc>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216e:	4a4f      	ldr	r2, [pc, #316]	; (80022ac <InferenceHeatI2CCommand+0x2e4>)
 8002170:	6353      	str	r3, [r2, #52]	; 0x34
        in_data[14] = filteredValue[13];
 8002172:	4b4c      	ldr	r3, [pc, #304]	; (80022a4 <InferenceHeatI2CCommand+0x2dc>)
 8002174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002176:	4a4d      	ldr	r2, [pc, #308]	; (80022ac <InferenceHeatI2CCommand+0x2e4>)
 8002178:	6393      	str	r3, [r2, #56]	; 0x38
        in_data[15] = filteredValue[14];
 800217a:	4b4a      	ldr	r3, [pc, #296]	; (80022a4 <InferenceHeatI2CCommand+0x2dc>)
 800217c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800217e:	4a4b      	ldr	r2, [pc, #300]	; (80022ac <InferenceHeatI2CCommand+0x2e4>)
 8002180:	63d3      	str	r3, [r2, #60]	; 0x3c
        in_data[16] = filteredValue[15];
 8002182:	4b48      	ldr	r3, [pc, #288]	; (80022a4 <InferenceHeatI2CCommand+0x2dc>)
 8002184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002186:	4a49      	ldr	r2, [pc, #292]	; (80022ac <InferenceHeatI2CCommand+0x2e4>)
 8002188:	6413      	str	r3, [r2, #64]	; 0x40
        in_data[17] = filteredValue[16];
 800218a:	4b46      	ldr	r3, [pc, #280]	; (80022a4 <InferenceHeatI2CCommand+0x2dc>)
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	4a47      	ldr	r2, [pc, #284]	; (80022ac <InferenceHeatI2CCommand+0x2e4>)
 8002190:	6453      	str	r3, [r2, #68]	; 0x44
        in_data[18] = filteredValue[17];
 8002192:	4b44      	ldr	r3, [pc, #272]	; (80022a4 <InferenceHeatI2CCommand+0x2dc>)
 8002194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002196:	4a45      	ldr	r2, [pc, #276]	; (80022ac <InferenceHeatI2CCommand+0x2e4>)
 8002198:	6493      	str	r3, [r2, #72]	; 0x48
        in_data[19] = filteredValue[18];
 800219a:	4b42      	ldr	r3, [pc, #264]	; (80022a4 <InferenceHeatI2CCommand+0x2dc>)
 800219c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800219e:	4a43      	ldr	r2, [pc, #268]	; (80022ac <InferenceHeatI2CCommand+0x2e4>)
 80021a0:	64d3      	str	r3, [r2, #76]	; 0x4c
        in_data[20] = filteredValue[19];
 80021a2:	4b40      	ldr	r3, [pc, #256]	; (80022a4 <InferenceHeatI2CCommand+0x2dc>)
 80021a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021a6:	4a41      	ldr	r2, [pc, #260]	; (80022ac <InferenceHeatI2CCommand+0x2e4>)
 80021a8:	6513      	str	r3, [r2, #80]	; 0x50
        in_data[21] = filteredValue[20];
 80021aa:	4b3e      	ldr	r3, [pc, #248]	; (80022a4 <InferenceHeatI2CCommand+0x2dc>)
 80021ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021ae:	4a3f      	ldr	r2, [pc, #252]	; (80022ac <InferenceHeatI2CCommand+0x2e4>)
 80021b0:	6553      	str	r3, [r2, #84]	; 0x54
        in_data[22] = filteredValue[21];
 80021b2:	4b3c      	ldr	r3, [pc, #240]	; (80022a4 <InferenceHeatI2CCommand+0x2dc>)
 80021b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021b6:	4a3d      	ldr	r2, [pc, #244]	; (80022ac <InferenceHeatI2CCommand+0x2e4>)
 80021b8:	6593      	str	r3, [r2, #88]	; 0x58
        in_data[23] = filteredValue[22];
 80021ba:	4b3a      	ldr	r3, [pc, #232]	; (80022a4 <InferenceHeatI2CCommand+0x2dc>)
 80021bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021be:	4a3b      	ldr	r2, [pc, #236]	; (80022ac <InferenceHeatI2CCommand+0x2e4>)
 80021c0:	65d3      	str	r3, [r2, #92]	; 0x5c
        in_data[24] = filteredValue[23];
 80021c2:	4b38      	ldr	r3, [pc, #224]	; (80022a4 <InferenceHeatI2CCommand+0x2dc>)
 80021c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021c6:	4a39      	ldr	r2, [pc, #228]	; (80022ac <InferenceHeatI2CCommand+0x2e4>)
 80021c8:	6613      	str	r3, [r2, #96]	; 0x60
        in_data[25] = filteredValue[12];
 80021ca:	4b36      	ldr	r3, [pc, #216]	; (80022a4 <InferenceHeatI2CCommand+0x2dc>)
 80021cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ce:	4a37      	ldr	r2, [pc, #220]	; (80022ac <InferenceHeatI2CCommand+0x2e4>)
 80021d0:	6653      	str	r3, [r2, #100]	; 0x64
		#if NUM_SENSOR >= 36
        in_data[26] = filteredValue[24];
 80021d2:	4b34      	ldr	r3, [pc, #208]	; (80022a4 <InferenceHeatI2CCommand+0x2dc>)
 80021d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021d6:	4a35      	ldr	r2, [pc, #212]	; (80022ac <InferenceHeatI2CCommand+0x2e4>)
 80021d8:	6693      	str	r3, [r2, #104]	; 0x68
        in_data[27] = filteredValue[25];
 80021da:	4b32      	ldr	r3, [pc, #200]	; (80022a4 <InferenceHeatI2CCommand+0x2dc>)
 80021dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021de:	4a33      	ldr	r2, [pc, #204]	; (80022ac <InferenceHeatI2CCommand+0x2e4>)
 80021e0:	66d3      	str	r3, [r2, #108]	; 0x6c
        in_data[28] = filteredValue[26];
 80021e2:	4b30      	ldr	r3, [pc, #192]	; (80022a4 <InferenceHeatI2CCommand+0x2dc>)
 80021e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80021e6:	4a31      	ldr	r2, [pc, #196]	; (80022ac <InferenceHeatI2CCommand+0x2e4>)
 80021e8:	6713      	str	r3, [r2, #112]	; 0x70
        in_data[29] = filteredValue[27];
 80021ea:	4b2e      	ldr	r3, [pc, #184]	; (80022a4 <InferenceHeatI2CCommand+0x2dc>)
 80021ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021ee:	4a2f      	ldr	r2, [pc, #188]	; (80022ac <InferenceHeatI2CCommand+0x2e4>)
 80021f0:	6753      	str	r3, [r2, #116]	; 0x74
        in_data[30] = filteredValue[28];
 80021f2:	4b2c      	ldr	r3, [pc, #176]	; (80022a4 <InferenceHeatI2CCommand+0x2dc>)
 80021f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f6:	4a2d      	ldr	r2, [pc, #180]	; (80022ac <InferenceHeatI2CCommand+0x2e4>)
 80021f8:	6793      	str	r3, [r2, #120]	; 0x78
        in_data[31] = filteredValue[29];
 80021fa:	4b2a      	ldr	r3, [pc, #168]	; (80022a4 <InferenceHeatI2CCommand+0x2dc>)
 80021fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021fe:	4a2b      	ldr	r2, [pc, #172]	; (80022ac <InferenceHeatI2CCommand+0x2e4>)
 8002200:	67d3      	str	r3, [r2, #124]	; 0x7c
        in_data[32] = filteredValue[30];
 8002202:	4b28      	ldr	r3, [pc, #160]	; (80022a4 <InferenceHeatI2CCommand+0x2dc>)
 8002204:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002206:	4a29      	ldr	r2, [pc, #164]	; (80022ac <InferenceHeatI2CCommand+0x2e4>)
 8002208:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
        in_data[33] = filteredValue[31];
 800220c:	4b25      	ldr	r3, [pc, #148]	; (80022a4 <InferenceHeatI2CCommand+0x2dc>)
 800220e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002210:	4a26      	ldr	r2, [pc, #152]	; (80022ac <InferenceHeatI2CCommand+0x2e4>)
 8002212:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
        in_data[34] = filteredValue[32];
 8002216:	4b23      	ldr	r3, [pc, #140]	; (80022a4 <InferenceHeatI2CCommand+0x2dc>)
 8002218:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800221c:	4a23      	ldr	r2, [pc, #140]	; (80022ac <InferenceHeatI2CCommand+0x2e4>)
 800221e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
        in_data[35] = filteredValue[33];
 8002222:	4b20      	ldr	r3, [pc, #128]	; (80022a4 <InferenceHeatI2CCommand+0x2dc>)
 8002224:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002228:	4a20      	ldr	r2, [pc, #128]	; (80022ac <InferenceHeatI2CCommand+0x2e4>)
 800222a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
        in_data[36] = filteredValue[34];
 800222e:	4b1d      	ldr	r3, [pc, #116]	; (80022a4 <InferenceHeatI2CCommand+0x2dc>)
 8002230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002234:	4a1d      	ldr	r2, [pc, #116]	; (80022ac <InferenceHeatI2CCommand+0x2e4>)
 8002236:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        in_data[37] = filteredValue[35];
 800223a:	4b1a      	ldr	r3, [pc, #104]	; (80022a4 <InferenceHeatI2CCommand+0x2dc>)
 800223c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002240:	4a1a      	ldr	r2, [pc, #104]	; (80022ac <InferenceHeatI2CCommand+0x2e4>)
 8002242:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        in_data[38] = filteredValue[24];
 8002246:	4b17      	ldr	r3, [pc, #92]	; (80022a4 <InferenceHeatI2CCommand+0x2dc>)
 8002248:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800224a:	4a18      	ldr	r2, [pc, #96]	; (80022ac <InferenceHeatI2CCommand+0x2e4>)
 800224c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
		#endif
		#if NUM_SENSOR >= 48
		in_data[39] = filteredValue[36];
 8002250:	4b14      	ldr	r3, [pc, #80]	; (80022a4 <InferenceHeatI2CCommand+0x2dc>)
 8002252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002256:	4a15      	ldr	r2, [pc, #84]	; (80022ac <InferenceHeatI2CCommand+0x2e4>)
 8002258:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		in_data[40] = filteredValue[37];
 800225c:	4b11      	ldr	r3, [pc, #68]	; (80022a4 <InferenceHeatI2CCommand+0x2dc>)
 800225e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002262:	4a12      	ldr	r2, [pc, #72]	; (80022ac <InferenceHeatI2CCommand+0x2e4>)
 8002264:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
		in_data[41] = filteredValue[38];
 8002268:	4b0e      	ldr	r3, [pc, #56]	; (80022a4 <InferenceHeatI2CCommand+0x2dc>)
 800226a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800226e:	4a0f      	ldr	r2, [pc, #60]	; (80022ac <InferenceHeatI2CCommand+0x2e4>)
 8002270:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
		in_data[42] = filteredValue[39];
 8002274:	4b0b      	ldr	r3, [pc, #44]	; (80022a4 <InferenceHeatI2CCommand+0x2dc>)
 8002276:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800227a:	4a0c      	ldr	r2, [pc, #48]	; (80022ac <InferenceHeatI2CCommand+0x2e4>)
 800227c:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
		in_data[43] = filteredValue[40];
 8002280:	4b08      	ldr	r3, [pc, #32]	; (80022a4 <InferenceHeatI2CCommand+0x2dc>)
 8002282:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002286:	4a09      	ldr	r2, [pc, #36]	; (80022ac <InferenceHeatI2CCommand+0x2e4>)
 8002288:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
 800228c:	e010      	b.n	80022b0 <InferenceHeatI2CCommand+0x2e8>
 800228e:	bf00      	nop
 8002290:	20007a60 	.word	0x20007a60
 8002294:	2000c560 	.word	0x2000c560
 8002298:	200078f4 	.word	0x200078f4
 800229c:	20007058 	.word	0x20007058
 80022a0:	200072f4 	.word	0x200072f4
 80022a4:	200076b4 	.word	0x200076b4
 80022a8:	20000238 	.word	0x20000238
 80022ac:	20002460 	.word	0x20002460
		in_data[44] = filteredValue[41];
 80022b0:	4b93      	ldr	r3, [pc, #588]	; (8002500 <InferenceHeatI2CCommand+0x538>)
 80022b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80022b6:	4a93      	ldr	r2, [pc, #588]	; (8002504 <InferenceHeatI2CCommand+0x53c>)
 80022b8:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
		in_data[45] = filteredValue[42];
 80022bc:	4b90      	ldr	r3, [pc, #576]	; (8002500 <InferenceHeatI2CCommand+0x538>)
 80022be:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80022c2:	4a90      	ldr	r2, [pc, #576]	; (8002504 <InferenceHeatI2CCommand+0x53c>)
 80022c4:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
		in_data[46] = filteredValue[43];
 80022c8:	4b8d      	ldr	r3, [pc, #564]	; (8002500 <InferenceHeatI2CCommand+0x538>)
 80022ca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80022ce:	4a8d      	ldr	r2, [pc, #564]	; (8002504 <InferenceHeatI2CCommand+0x53c>)
 80022d0:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
		in_data[47] = filteredValue[44];
 80022d4:	4b8a      	ldr	r3, [pc, #552]	; (8002500 <InferenceHeatI2CCommand+0x538>)
 80022d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80022da:	4a8a      	ldr	r2, [pc, #552]	; (8002504 <InferenceHeatI2CCommand+0x53c>)
 80022dc:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
		in_data[48] = filteredValue[45];
 80022e0:	4b87      	ldr	r3, [pc, #540]	; (8002500 <InferenceHeatI2CCommand+0x538>)
 80022e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80022e6:	4a87      	ldr	r2, [pc, #540]	; (8002504 <InferenceHeatI2CCommand+0x53c>)
 80022e8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
		in_data[49] = filteredValue[46];
 80022ec:	4b84      	ldr	r3, [pc, #528]	; (8002500 <InferenceHeatI2CCommand+0x538>)
 80022ee:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80022f2:	4a84      	ldr	r2, [pc, #528]	; (8002504 <InferenceHeatI2CCommand+0x53c>)
 80022f4:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
		in_data[50] = filteredValue[47];
 80022f8:	4b81      	ldr	r3, [pc, #516]	; (8002500 <InferenceHeatI2CCommand+0x538>)
 80022fa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80022fe:	4a81      	ldr	r2, [pc, #516]	; (8002504 <InferenceHeatI2CCommand+0x53c>)
 8002300:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
		in_data[51] = filteredValue[36];
 8002304:	4b7e      	ldr	r3, [pc, #504]	; (8002500 <InferenceHeatI2CCommand+0x538>)
 8002306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800230a:	4a7e      	ldr	r2, [pc, #504]	; (8002504 <InferenceHeatI2CCommand+0x53c>)
 800230c:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
		#endif

		if(tofCount == NUM_SENSOR){
 8002310:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002314:	2b30      	cmp	r3, #48	; 0x30
 8002316:	f040 8151 	bne.w	80025bc <InferenceHeatI2CCommand+0x5f4>
	        for(int i=0; i<NUM_SENSOR;i++){HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.1f ", filteredValue[i]), 100);}
 800231a:	2300      	movs	r3, #0
 800231c:	623b      	str	r3, [r7, #32]
 800231e:	e017      	b.n	8002350 <InferenceHeatI2CCommand+0x388>
 8002320:	4a77      	ldr	r2, [pc, #476]	; (8002500 <InferenceHeatI2CCommand+0x538>)
 8002322:	6a3b      	ldr	r3, [r7, #32]
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	4413      	add	r3, r2
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4618      	mov	r0, r3
 800232c:	f7fe f93c 	bl	80005a8 <__aeabi_f2d>
 8002330:	4602      	mov	r2, r0
 8002332:	460b      	mov	r3, r1
 8002334:	4974      	ldr	r1, [pc, #464]	; (8002508 <InferenceHeatI2CCommand+0x540>)
 8002336:	4875      	ldr	r0, [pc, #468]	; (800250c <InferenceHeatI2CCommand+0x544>)
 8002338:	f011 f9ce 	bl	80136d8 <siprintf>
 800233c:	4603      	mov	r3, r0
 800233e:	b29a      	uxth	r2, r3
 8002340:	2364      	movs	r3, #100	; 0x64
 8002342:	4972      	ldr	r1, [pc, #456]	; (800250c <InferenceHeatI2CCommand+0x544>)
 8002344:	4872      	ldr	r0, [pc, #456]	; (8002510 <InferenceHeatI2CCommand+0x548>)
 8002346:	f006 fc95 	bl	8008c74 <HAL_UART_Transmit>
 800234a:	6a3b      	ldr	r3, [r7, #32]
 800234c:	3301      	adds	r3, #1
 800234e:	623b      	str	r3, [r7, #32]
 8002350:	6a3b      	ldr	r3, [r7, #32]
 8002352:	2b2f      	cmp	r3, #47	; 0x2f
 8002354:	dde4      	ble.n	8002320 <InferenceHeatI2CCommand+0x358>
	        int a =0;
 8002356:	2300      	movs	r3, #0
 8002358:	613b      	str	r3, [r7, #16]
			aiRun(in_data,out_data);
 800235a:	496e      	ldr	r1, [pc, #440]	; (8002514 <InferenceHeatI2CCommand+0x54c>)
 800235c:	4869      	ldr	r0, [pc, #420]	; (8002504 <InferenceHeatI2CCommand+0x53c>)
 800235e:	f7fe febb 	bl	80010d8 <aiRun>
			float sqSum= out_data[2]*out_data[2] + out_data[3]*out_data[3];
 8002362:	4b6c      	ldr	r3, [pc, #432]	; (8002514 <InferenceHeatI2CCommand+0x54c>)
 8002364:	ed93 7a02 	vldr	s14, [r3, #8]
 8002368:	4b6a      	ldr	r3, [pc, #424]	; (8002514 <InferenceHeatI2CCommand+0x54c>)
 800236a:	edd3 7a02 	vldr	s15, [r3, #8]
 800236e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002372:	4b68      	ldr	r3, [pc, #416]	; (8002514 <InferenceHeatI2CCommand+0x54c>)
 8002374:	edd3 6a03 	vldr	s13, [r3, #12]
 8002378:	4b66      	ldr	r3, [pc, #408]	; (8002514 <InferenceHeatI2CCommand+0x54c>)
 800237a:	edd3 7a03 	vldr	s15, [r3, #12]
 800237e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002382:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002386:	edc7 7a03 	vstr	s15, [r7, #12]
			//float sqrange = 0.08;
		    uint32_t timestamp = HAL_GetTick();
 800238a:	f002 fa0f 	bl	80047ac <HAL_GetTick>
 800238e:	60b8      	str	r0, [r7, #8]
			if(sqSum>=0.97){
 8002390:	68f8      	ldr	r0, [r7, #12]
 8002392:	f7fe f909 	bl	80005a8 <__aeabi_f2d>
 8002396:	a358      	add	r3, pc, #352	; (adr r3, 80024f8 <InferenceHeatI2CCommand+0x530>)
 8002398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800239c:	f7fe fbe2 	bl	8000b64 <__aeabi_dcmpge>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	f000 809f 	beq.w	80024e6 <InferenceHeatI2CCommand+0x51e>
				out_data[0] = (out_data[0] + 1) * (Fminmax[1] - Fminmax[0]) / 2 + Fminmax[0];
 80023a8:	4b5a      	ldr	r3, [pc, #360]	; (8002514 <InferenceHeatI2CCommand+0x54c>)
 80023aa:	edd3 7a00 	vldr	s15, [r3]
 80023ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80023b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80023b6:	4b58      	ldr	r3, [pc, #352]	; (8002518 <InferenceHeatI2CCommand+0x550>)
 80023b8:	edd3 6a01 	vldr	s13, [r3, #4]
 80023bc:	4b56      	ldr	r3, [pc, #344]	; (8002518 <InferenceHeatI2CCommand+0x550>)
 80023be:	edd3 7a00 	vldr	s15, [r3]
 80023c2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80023c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023ca:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80023ce:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80023d2:	4b51      	ldr	r3, [pc, #324]	; (8002518 <InferenceHeatI2CCommand+0x550>)
 80023d4:	edd3 7a00 	vldr	s15, [r3]
 80023d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023dc:	4b4d      	ldr	r3, [pc, #308]	; (8002514 <InferenceHeatI2CCommand+0x54c>)
 80023de:	edc3 7a00 	vstr	s15, [r3]
				out_data[1] = (out_data[1] + 1) * (Zminmax[1] - Zminmax[0]) / 2 + Zminmax[0];
 80023e2:	4b4c      	ldr	r3, [pc, #304]	; (8002514 <InferenceHeatI2CCommand+0x54c>)
 80023e4:	edd3 7a01 	vldr	s15, [r3, #4]
 80023e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80023ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 80023f0:	4b4a      	ldr	r3, [pc, #296]	; (800251c <InferenceHeatI2CCommand+0x554>)
 80023f2:	edd3 6a01 	vldr	s13, [r3, #4]
 80023f6:	4b49      	ldr	r3, [pc, #292]	; (800251c <InferenceHeatI2CCommand+0x554>)
 80023f8:	edd3 7a00 	vldr	s15, [r3]
 80023fc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002400:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002404:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002408:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800240c:	4b43      	ldr	r3, [pc, #268]	; (800251c <InferenceHeatI2CCommand+0x554>)
 800240e:	edd3 7a00 	vldr	s15, [r3]
 8002412:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002416:	4b3f      	ldr	r3, [pc, #252]	; (8002514 <InferenceHeatI2CCommand+0x54c>)
 8002418:	edc3 7a01 	vstr	s15, [r3, #4]
				if(out_data[1] >=144){out_data[1]=144;}
 800241c:	4b3d      	ldr	r3, [pc, #244]	; (8002514 <InferenceHeatI2CCommand+0x54c>)
 800241e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002422:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8002520 <InferenceHeatI2CCommand+0x558>
 8002426:	eef4 7ac7 	vcmpe.f32	s15, s14
 800242a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800242e:	db02      	blt.n	8002436 <InferenceHeatI2CCommand+0x46e>
 8002430:	4b38      	ldr	r3, [pc, #224]	; (8002514 <InferenceHeatI2CCommand+0x54c>)
 8002432:	4a3c      	ldr	r2, [pc, #240]	; (8002524 <InferenceHeatI2CCommand+0x55c>)
 8002434:	605a      	str	r2, [r3, #4]
				if(out_data[1] <=16){out_data[1]=16;}
 8002436:	4b37      	ldr	r3, [pc, #220]	; (8002514 <InferenceHeatI2CCommand+0x54c>)
 8002438:	edd3 7a01 	vldr	s15, [r3, #4]
 800243c:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8002440:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002448:	d803      	bhi.n	8002452 <InferenceHeatI2CCommand+0x48a>
 800244a:	4b32      	ldr	r3, [pc, #200]	; (8002514 <InferenceHeatI2CCommand+0x54c>)
 800244c:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 8002450:	605a      	str	r2, [r3, #4]
				if(out_data[0]>=Fminmax[0]){
 8002452:	4b30      	ldr	r3, [pc, #192]	; (8002514 <InferenceHeatI2CCommand+0x54c>)
 8002454:	ed93 7a00 	vldr	s14, [r3]
 8002458:	4b2f      	ldr	r3, [pc, #188]	; (8002518 <InferenceHeatI2CCommand+0x550>)
 800245a:	edd3 7a00 	vldr	s15, [r3]
 800245e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002466:	f2c0 80a9 	blt.w	80025bc <InferenceHeatI2CCommand+0x5f4>
					for(int k=0; k<4;k++){
 800246a:	2300      	movs	r3, #0
 800246c:	61fb      	str	r3, [r7, #28]
 800246e:	e018      	b.n	80024a2 <InferenceHeatI2CCommand+0x4da>
						HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", out_data[k]), 1000);
 8002470:	4a28      	ldr	r2, [pc, #160]	; (8002514 <InferenceHeatI2CCommand+0x54c>)
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	4413      	add	r3, r2
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4618      	mov	r0, r3
 800247c:	f7fe f894 	bl	80005a8 <__aeabi_f2d>
 8002480:	4602      	mov	r2, r0
 8002482:	460b      	mov	r3, r1
 8002484:	4928      	ldr	r1, [pc, #160]	; (8002528 <InferenceHeatI2CCommand+0x560>)
 8002486:	4821      	ldr	r0, [pc, #132]	; (800250c <InferenceHeatI2CCommand+0x544>)
 8002488:	f011 f926 	bl	80136d8 <siprintf>
 800248c:	4603      	mov	r3, r0
 800248e:	b29a      	uxth	r2, r3
 8002490:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002494:	491d      	ldr	r1, [pc, #116]	; (800250c <InferenceHeatI2CCommand+0x544>)
 8002496:	481e      	ldr	r0, [pc, #120]	; (8002510 <InferenceHeatI2CCommand+0x548>)
 8002498:	f006 fbec 	bl	8008c74 <HAL_UART_Transmit>
					for(int k=0; k<4;k++){
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	3301      	adds	r3, #1
 80024a0:	61fb      	str	r3, [r7, #28]
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	2b03      	cmp	r3, #3
 80024a6:	dde3      	ble.n	8002470 <InferenceHeatI2CCommand+0x4a8>
					}
					HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", sqSum), 1000);
 80024a8:	68f8      	ldr	r0, [r7, #12]
 80024aa:	f7fe f87d 	bl	80005a8 <__aeabi_f2d>
 80024ae:	4602      	mov	r2, r0
 80024b0:	460b      	mov	r3, r1
 80024b2:	491d      	ldr	r1, [pc, #116]	; (8002528 <InferenceHeatI2CCommand+0x560>)
 80024b4:	4815      	ldr	r0, [pc, #84]	; (800250c <InferenceHeatI2CCommand+0x544>)
 80024b6:	f011 f90f 	bl	80136d8 <siprintf>
 80024ba:	4603      	mov	r3, r0
 80024bc:	b29a      	uxth	r2, r3
 80024be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024c2:	4912      	ldr	r1, [pc, #72]	; (800250c <InferenceHeatI2CCommand+0x544>)
 80024c4:	4812      	ldr	r0, [pc, #72]	; (8002510 <InferenceHeatI2CCommand+0x548>)
 80024c6:	f006 fbd5 	bl	8008c74 <HAL_UART_Transmit>
				    HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%lu ", timestamp), 1000);
 80024ca:	68ba      	ldr	r2, [r7, #8]
 80024cc:	4917      	ldr	r1, [pc, #92]	; (800252c <InferenceHeatI2CCommand+0x564>)
 80024ce:	480f      	ldr	r0, [pc, #60]	; (800250c <InferenceHeatI2CCommand+0x544>)
 80024d0:	f011 f902 	bl	80136d8 <siprintf>
 80024d4:	4603      	mov	r3, r0
 80024d6:	b29a      	uxth	r2, r3
 80024d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024dc:	490b      	ldr	r1, [pc, #44]	; (800250c <InferenceHeatI2CCommand+0x544>)
 80024de:	480c      	ldr	r0, [pc, #48]	; (8002510 <InferenceHeatI2CCommand+0x548>)
 80024e0:	f006 fbc8 	bl	8008c74 <HAL_UART_Transmit>
 80024e4:	e06a      	b.n	80025bc <InferenceHeatI2CCommand+0x5f4>
				    //HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "1"), 1000);
				}
			}else if(a==1){
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d167      	bne.n	80025bc <InferenceHeatI2CCommand+0x5f4>
				for(int k=0; k<4;k++){
 80024ec:	2300      	movs	r3, #0
 80024ee:	61bb      	str	r3, [r7, #24]
 80024f0:	e037      	b.n	8002562 <InferenceHeatI2CCommand+0x59a>
 80024f2:	bf00      	nop
 80024f4:	f3af 8000 	nop.w
 80024f8:	70a3d70a 	.word	0x70a3d70a
 80024fc:	3fef0a3d 	.word	0x3fef0a3d
 8002500:	200076b4 	.word	0x200076b4
 8002504:	20002460 	.word	0x20002460
 8002508:	08018a34 	.word	0x08018a34
 800250c:	20007870 	.word	0x20007870
 8002510:	200077e8 	.word	0x200077e8
 8002514:	20002540 	.word	0x20002540
 8002518:	200002f8 	.word	0x200002f8
 800251c:	20000300 	.word	0x20000300
 8002520:	43100000 	.word	0x43100000
 8002524:	43100000 	.word	0x43100000
 8002528:	08018b54 	.word	0x08018b54
 800252c:	08018b60 	.word	0x08018b60
					HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", out_data[k]), 1000);
 8002530:	4a34      	ldr	r2, [pc, #208]	; (8002604 <InferenceHeatI2CCommand+0x63c>)
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	4413      	add	r3, r2
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4618      	mov	r0, r3
 800253c:	f7fe f834 	bl	80005a8 <__aeabi_f2d>
 8002540:	4602      	mov	r2, r0
 8002542:	460b      	mov	r3, r1
 8002544:	4930      	ldr	r1, [pc, #192]	; (8002608 <InferenceHeatI2CCommand+0x640>)
 8002546:	4831      	ldr	r0, [pc, #196]	; (800260c <InferenceHeatI2CCommand+0x644>)
 8002548:	f011 f8c6 	bl	80136d8 <siprintf>
 800254c:	4603      	mov	r3, r0
 800254e:	b29a      	uxth	r2, r3
 8002550:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002554:	492d      	ldr	r1, [pc, #180]	; (800260c <InferenceHeatI2CCommand+0x644>)
 8002556:	482e      	ldr	r0, [pc, #184]	; (8002610 <InferenceHeatI2CCommand+0x648>)
 8002558:	f006 fb8c 	bl	8008c74 <HAL_UART_Transmit>
				for(int k=0; k<4;k++){
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	3301      	adds	r3, #1
 8002560:	61bb      	str	r3, [r7, #24]
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	2b03      	cmp	r3, #3
 8002566:	dde3      	ble.n	8002530 <InferenceHeatI2CCommand+0x568>
				}
				HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", sqSum), 1000);
 8002568:	68f8      	ldr	r0, [r7, #12]
 800256a:	f7fe f81d 	bl	80005a8 <__aeabi_f2d>
 800256e:	4602      	mov	r2, r0
 8002570:	460b      	mov	r3, r1
 8002572:	4925      	ldr	r1, [pc, #148]	; (8002608 <InferenceHeatI2CCommand+0x640>)
 8002574:	4825      	ldr	r0, [pc, #148]	; (800260c <InferenceHeatI2CCommand+0x644>)
 8002576:	f011 f8af 	bl	80136d8 <siprintf>
 800257a:	4603      	mov	r3, r0
 800257c:	b29a      	uxth	r2, r3
 800257e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002582:	4922      	ldr	r1, [pc, #136]	; (800260c <InferenceHeatI2CCommand+0x644>)
 8002584:	4822      	ldr	r0, [pc, #136]	; (8002610 <InferenceHeatI2CCommand+0x648>)
 8002586:	f006 fb75 	bl	8008c74 <HAL_UART_Transmit>
			    HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%lu ", timestamp), 1000);
 800258a:	68ba      	ldr	r2, [r7, #8]
 800258c:	4921      	ldr	r1, [pc, #132]	; (8002614 <InferenceHeatI2CCommand+0x64c>)
 800258e:	481f      	ldr	r0, [pc, #124]	; (800260c <InferenceHeatI2CCommand+0x644>)
 8002590:	f011 f8a2 	bl	80136d8 <siprintf>
 8002594:	4603      	mov	r3, r0
 8002596:	b29a      	uxth	r2, r3
 8002598:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800259c:	491b      	ldr	r1, [pc, #108]	; (800260c <InferenceHeatI2CCommand+0x644>)
 800259e:	481c      	ldr	r0, [pc, #112]	; (8002610 <InferenceHeatI2CCommand+0x648>)
 80025a0:	f006 fb68 	bl	8008c74 <HAL_UART_Transmit>
			    HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "0"), 1000);
 80025a4:	491c      	ldr	r1, [pc, #112]	; (8002618 <InferenceHeatI2CCommand+0x650>)
 80025a6:	4819      	ldr	r0, [pc, #100]	; (800260c <InferenceHeatI2CCommand+0x644>)
 80025a8:	f011 f896 	bl	80136d8 <siprintf>
 80025ac:	4603      	mov	r3, r0
 80025ae:	b29a      	uxth	r2, r3
 80025b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025b4:	4915      	ldr	r1, [pc, #84]	; (800260c <InferenceHeatI2CCommand+0x644>)
 80025b6:	4816      	ldr	r0, [pc, #88]	; (8002610 <InferenceHeatI2CCommand+0x648>)
 80025b8:	f006 fb5c 	bl	8008c74 <HAL_UART_Transmit>
			}
		}
		do{
			endTime = HAL_GetTick();
 80025bc:	f002 f8f6 	bl	80047ac <HAL_GetTick>
 80025c0:	6078      	str	r0, [r7, #4]
			diffTime = endTime - startTime;
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	603b      	str	r3, [r7, #0]
		}while (diffTime <= TIMBUDGET);
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	2b64      	cmp	r3, #100	; 0x64
 80025ce:	d9f5      	bls.n	80025bc <InferenceHeatI2CCommand+0x5f4>
		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "\n"), 100);
 80025d0:	4912      	ldr	r1, [pc, #72]	; (800261c <InferenceHeatI2CCommand+0x654>)
 80025d2:	480e      	ldr	r0, [pc, #56]	; (800260c <InferenceHeatI2CCommand+0x644>)
 80025d4:	f011 f880 	bl	80136d8 <siprintf>
 80025d8:	4603      	mov	r3, r0
 80025da:	b29a      	uxth	r2, r3
 80025dc:	2364      	movs	r3, #100	; 0x64
 80025de:	490b      	ldr	r1, [pc, #44]	; (800260c <InferenceHeatI2CCommand+0x644>)
 80025e0:	480b      	ldr	r0, [pc, #44]	; (8002610 <InferenceHeatI2CCommand+0x648>)
 80025e2:	f006 fb47 	bl	8008c74 <HAL_UART_Transmit>
    for (int count =0; count <50000;count ++){
 80025e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e8:	3301      	adds	r3, #1
 80025ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ee:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80025f2:	4293      	cmp	r3, r2
 80025f4:	f77f ad01 	ble.w	8001ffa <InferenceHeatI2CCommand+0x32>
    }
}
 80025f8:	bf00      	nop
 80025fa:	bf00      	nop
 80025fc:	3730      	adds	r7, #48	; 0x30
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	20002540 	.word	0x20002540
 8002608:	08018b54 	.word	0x08018b54
 800260c:	20007870 	.word	0x20007870
 8002610:	200077e8 	.word	0x200077e8
 8002614:	08018b60 	.word	0x08018b60
 8002618:	08018b68 	.word	0x08018b68
 800261c:	08018b5c 	.word	0x08018b5c

08002620 <PointingVertical>:

void PointingVertical(){
 8002620:	b580      	push	{r7, lr}
 8002622:	b08e      	sub	sp, #56	; 0x38
 8002624:	af00      	add	r7, sp, #0

	SetI2CCommand();
 8002626:	f7ff f8b5 	bl	8001794 <SetI2CCommand>
	SensorI2CCommand();
 800262a:	f7fe ffbb 	bl	80015a4 <SensorI2CCommand>
	ResetAllDevices();
 800262e:	f001 ff97 	bl	8004560 <ResetAllDevices>
	setOnAllDevices();
 8002632:	f002 f815 	bl	8004660 <setOnAllDevices>


	for(int i = 0; i < 5; i++) {
 8002636:	2300      	movs	r3, #0
 8002638:	637b      	str	r3, [r7, #52]	; 0x34
 800263a:	e31a      	b.n	8002c72 <PointingVertical+0x652>

	    uint32_t ServoStartTime = HAL_GetTick(); // 시작 시간 기록
 800263c:	f002 f8b6 	bl	80047ac <HAL_GetTick>
 8002640:	61f8      	str	r0, [r7, #28]
	        servo_angle(&htim2, TIM_CHANNEL_1, 10);
 8002642:	220a      	movs	r2, #10
 8002644:	2100      	movs	r1, #0
 8002646:	4808      	ldr	r0, [pc, #32]	; (8002668 <PointingVertical+0x48>)
 8002648:	f001 fbda 	bl	8003e00 <servo_angle>
	        HAL_Delay(1000);
 800264c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002650:	f002 f8b8 	bl	80047c4 <HAL_Delay>
		    while(HAL_GetTick() - ServoStartTime < 7000) {
 8002654:	e2ef      	b.n	8002c36 <PointingVertical+0x616>
	        uint32_t startTime, endTime, diffTime;
	        uint8_t tofCount =0;
 8002656:	2300      	movs	r3, #0
 8002658:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			startTime = HAL_GetTick();
 800265c:	f002 f8a6 	bl	80047ac <HAL_GetTick>
 8002660:	61b8      	str	r0, [r7, #24]
			for (int i = 0; i < NUM_SENSOR; i++) {
 8002662:	2300      	movs	r3, #0
 8002664:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002666:	e073      	b.n	8002750 <PointingVertical+0x130>
 8002668:	20007798 	.word	0x20007798
				Dev = &vl53l0x_s[i];
 800266c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800266e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002672:	fb02 f303 	mul.w	r3, r2, r3
 8002676:	4a9b      	ldr	r2, [pc, #620]	; (80028e4 <PointingVertical+0x2c4>)
 8002678:	4413      	add	r3, r2
 800267a:	4a9b      	ldr	r2, [pc, #620]	; (80028e8 <PointingVertical+0x2c8>)
 800267c:	6013      	str	r3, [r2, #0]
				VL53L0X_PerformContinuousRangingMeasurement(Dev, &RangingData); // 1500 uss
 800267e:	4b9a      	ldr	r3, [pc, #616]	; (80028e8 <PointingVertical+0x2c8>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	499a      	ldr	r1, [pc, #616]	; (80028ec <PointingVertical+0x2cc>)
 8002684:	4618      	mov	r0, r3
 8002686:	f009 f8d9 	bl	800b83c <VL53L0X_PerformContinuousRangingMeasurement>
				if (RangingData.RangeStatus == 0) {
 800268a:	4b98      	ldr	r3, [pc, #608]	; (80028ec <PointingVertical+0x2cc>)
 800268c:	7e1b      	ldrb	r3, [r3, #24]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d15b      	bne.n	800274a <PointingVertical+0x12a>
				  if (RangingData.RangeMilliMeter < sensorAverages[i]+20) {
 8002692:	4b96      	ldr	r3, [pc, #600]	; (80028ec <PointingVertical+0x2cc>)
 8002694:	891b      	ldrh	r3, [r3, #8]
 8002696:	ee07 3a90 	vmov	s15, r3
 800269a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800269e:	4a94      	ldr	r2, [pc, #592]	; (80028f0 <PointingVertical+0x2d0>)
 80026a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	4413      	add	r3, r2
 80026a6:	edd3 7a00 	vldr	s15, [r3]
 80026aa:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 80026ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80026b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026ba:	d546      	bpl.n	800274a <PointingVertical+0x12a>
					filteredValue[i] = Kalman_Estimate(&filters[i], RangingData.RangeMilliMeter); // 500 us
 80026bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026be:	4613      	mov	r3, r2
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	4413      	add	r3, r2
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	4a8b      	ldr	r2, [pc, #556]	; (80028f4 <PointingVertical+0x2d4>)
 80026c8:	4413      	add	r3, r2
 80026ca:	4a88      	ldr	r2, [pc, #544]	; (80028ec <PointingVertical+0x2cc>)
 80026cc:	8912      	ldrh	r2, [r2, #8]
 80026ce:	ee07 2a90 	vmov	s15, r2
 80026d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026d6:	eeb0 0a67 	vmov.f32	s0, s15
 80026da:	4618      	mov	r0, r3
 80026dc:	f000 ffd4 	bl	8003688 <Kalman_Estimate>
 80026e0:	eef0 7a40 	vmov.f32	s15, s0
 80026e4:	4a84      	ldr	r2, [pc, #528]	; (80028f8 <PointingVertical+0x2d8>)
 80026e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	4413      	add	r3, r2
 80026ec:	edc3 7a00 	vstr	s15, [r3]
					filteredValue[i] -= sensorAverages[i];
 80026f0:	4a81      	ldr	r2, [pc, #516]	; (80028f8 <PointingVertical+0x2d8>)
 80026f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	4413      	add	r3, r2
 80026f8:	ed93 7a00 	vldr	s14, [r3]
 80026fc:	4a7c      	ldr	r2, [pc, #496]	; (80028f0 <PointingVertical+0x2d0>)
 80026fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	4413      	add	r3, r2
 8002704:	edd3 7a00 	vldr	s15, [r3]
 8002708:	ee77 7a67 	vsub.f32	s15, s14, s15
 800270c:	4a7a      	ldr	r2, [pc, #488]	; (80028f8 <PointingVertical+0x2d8>)
 800270e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	4413      	add	r3, r2
 8002714:	edc3 7a00 	vstr	s15, [r3]
					//filteredValue[i] -= Xmean[i];
					filteredValue[i] /= Xstd[i];
 8002718:	4a77      	ldr	r2, [pc, #476]	; (80028f8 <PointingVertical+0x2d8>)
 800271a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	4413      	add	r3, r2
 8002720:	edd3 6a00 	vldr	s13, [r3]
 8002724:	4a75      	ldr	r2, [pc, #468]	; (80028fc <PointingVertical+0x2dc>)
 8002726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	4413      	add	r3, r2
 800272c:	ed93 7a00 	vldr	s14, [r3]
 8002730:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002734:	4a70      	ldr	r2, [pc, #448]	; (80028f8 <PointingVertical+0x2d8>)
 8002736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	4413      	add	r3, r2
 800273c:	edc3 7a00 	vstr	s15, [r3]
					tofCount++;
 8002740:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002744:	3301      	adds	r3, #1
 8002746:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			for (int i = 0; i < NUM_SENSOR; i++) {
 800274a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800274c:	3301      	adds	r3, #1
 800274e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002752:	2b2f      	cmp	r3, #47	; 0x2f
 8002754:	dd8a      	ble.n	800266c <PointingVertical+0x4c>
				  }
				}
			}

			in_data[0] = filteredValue[0];
 8002756:	4b68      	ldr	r3, [pc, #416]	; (80028f8 <PointingVertical+0x2d8>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a69      	ldr	r2, [pc, #420]	; (8002900 <PointingVertical+0x2e0>)
 800275c:	6013      	str	r3, [r2, #0]
			in_data[1] = filteredValue[1];
 800275e:	4b66      	ldr	r3, [pc, #408]	; (80028f8 <PointingVertical+0x2d8>)
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	4a67      	ldr	r2, [pc, #412]	; (8002900 <PointingVertical+0x2e0>)
 8002764:	6053      	str	r3, [r2, #4]
			in_data[2] = filteredValue[2];
 8002766:	4b64      	ldr	r3, [pc, #400]	; (80028f8 <PointingVertical+0x2d8>)
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	4a65      	ldr	r2, [pc, #404]	; (8002900 <PointingVertical+0x2e0>)
 800276c:	6093      	str	r3, [r2, #8]
			in_data[3] = filteredValue[3];
 800276e:	4b62      	ldr	r3, [pc, #392]	; (80028f8 <PointingVertical+0x2d8>)
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	4a63      	ldr	r2, [pc, #396]	; (8002900 <PointingVertical+0x2e0>)
 8002774:	60d3      	str	r3, [r2, #12]
			in_data[4] = filteredValue[4];
 8002776:	4b60      	ldr	r3, [pc, #384]	; (80028f8 <PointingVertical+0x2d8>)
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	4a61      	ldr	r2, [pc, #388]	; (8002900 <PointingVertical+0x2e0>)
 800277c:	6113      	str	r3, [r2, #16]
			in_data[5] = filteredValue[5];
 800277e:	4b5e      	ldr	r3, [pc, #376]	; (80028f8 <PointingVertical+0x2d8>)
 8002780:	695b      	ldr	r3, [r3, #20]
 8002782:	4a5f      	ldr	r2, [pc, #380]	; (8002900 <PointingVertical+0x2e0>)
 8002784:	6153      	str	r3, [r2, #20]
			in_data[6] = filteredValue[6];
 8002786:	4b5c      	ldr	r3, [pc, #368]	; (80028f8 <PointingVertical+0x2d8>)
 8002788:	699b      	ldr	r3, [r3, #24]
 800278a:	4a5d      	ldr	r2, [pc, #372]	; (8002900 <PointingVertical+0x2e0>)
 800278c:	6193      	str	r3, [r2, #24]
			in_data[7] = filteredValue[7];
 800278e:	4b5a      	ldr	r3, [pc, #360]	; (80028f8 <PointingVertical+0x2d8>)
 8002790:	69db      	ldr	r3, [r3, #28]
 8002792:	4a5b      	ldr	r2, [pc, #364]	; (8002900 <PointingVertical+0x2e0>)
 8002794:	61d3      	str	r3, [r2, #28]
			in_data[8] = filteredValue[8];
 8002796:	4b58      	ldr	r3, [pc, #352]	; (80028f8 <PointingVertical+0x2d8>)
 8002798:	6a1b      	ldr	r3, [r3, #32]
 800279a:	4a59      	ldr	r2, [pc, #356]	; (8002900 <PointingVertical+0x2e0>)
 800279c:	6213      	str	r3, [r2, #32]
			in_data[9] = filteredValue[9];
 800279e:	4b56      	ldr	r3, [pc, #344]	; (80028f8 <PointingVertical+0x2d8>)
 80027a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a2:	4a57      	ldr	r2, [pc, #348]	; (8002900 <PointingVertical+0x2e0>)
 80027a4:	6253      	str	r3, [r2, #36]	; 0x24
			in_data[10] = filteredValue[10];
 80027a6:	4b54      	ldr	r3, [pc, #336]	; (80028f8 <PointingVertical+0x2d8>)
 80027a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027aa:	4a55      	ldr	r2, [pc, #340]	; (8002900 <PointingVertical+0x2e0>)
 80027ac:	6293      	str	r3, [r2, #40]	; 0x28
			in_data[11] = filteredValue[11];
 80027ae:	4b52      	ldr	r3, [pc, #328]	; (80028f8 <PointingVertical+0x2d8>)
 80027b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b2:	4a53      	ldr	r2, [pc, #332]	; (8002900 <PointingVertical+0x2e0>)
 80027b4:	62d3      	str	r3, [r2, #44]	; 0x2c
			in_data[12] = filteredValue[0];
 80027b6:	4b50      	ldr	r3, [pc, #320]	; (80028f8 <PointingVertical+0x2d8>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a51      	ldr	r2, [pc, #324]	; (8002900 <PointingVertical+0x2e0>)
 80027bc:	6313      	str	r3, [r2, #48]	; 0x30

			in_data[13] = filteredValue[12];
 80027be:	4b4e      	ldr	r3, [pc, #312]	; (80028f8 <PointingVertical+0x2d8>)
 80027c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c2:	4a4f      	ldr	r2, [pc, #316]	; (8002900 <PointingVertical+0x2e0>)
 80027c4:	6353      	str	r3, [r2, #52]	; 0x34
			in_data[14] = filteredValue[13];
 80027c6:	4b4c      	ldr	r3, [pc, #304]	; (80028f8 <PointingVertical+0x2d8>)
 80027c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ca:	4a4d      	ldr	r2, [pc, #308]	; (8002900 <PointingVertical+0x2e0>)
 80027cc:	6393      	str	r3, [r2, #56]	; 0x38
			in_data[15] = filteredValue[14];
 80027ce:	4b4a      	ldr	r3, [pc, #296]	; (80028f8 <PointingVertical+0x2d8>)
 80027d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d2:	4a4b      	ldr	r2, [pc, #300]	; (8002900 <PointingVertical+0x2e0>)
 80027d4:	63d3      	str	r3, [r2, #60]	; 0x3c
			in_data[16] = filteredValue[15];
 80027d6:	4b48      	ldr	r3, [pc, #288]	; (80028f8 <PointingVertical+0x2d8>)
 80027d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027da:	4a49      	ldr	r2, [pc, #292]	; (8002900 <PointingVertical+0x2e0>)
 80027dc:	6413      	str	r3, [r2, #64]	; 0x40
			in_data[17] = filteredValue[16];
 80027de:	4b46      	ldr	r3, [pc, #280]	; (80028f8 <PointingVertical+0x2d8>)
 80027e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e2:	4a47      	ldr	r2, [pc, #284]	; (8002900 <PointingVertical+0x2e0>)
 80027e4:	6453      	str	r3, [r2, #68]	; 0x44
			in_data[18] = filteredValue[17];
 80027e6:	4b44      	ldr	r3, [pc, #272]	; (80028f8 <PointingVertical+0x2d8>)
 80027e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ea:	4a45      	ldr	r2, [pc, #276]	; (8002900 <PointingVertical+0x2e0>)
 80027ec:	6493      	str	r3, [r2, #72]	; 0x48
			in_data[19] = filteredValue[18];
 80027ee:	4b42      	ldr	r3, [pc, #264]	; (80028f8 <PointingVertical+0x2d8>)
 80027f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027f2:	4a43      	ldr	r2, [pc, #268]	; (8002900 <PointingVertical+0x2e0>)
 80027f4:	64d3      	str	r3, [r2, #76]	; 0x4c
			in_data[20] = filteredValue[19];
 80027f6:	4b40      	ldr	r3, [pc, #256]	; (80028f8 <PointingVertical+0x2d8>)
 80027f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027fa:	4a41      	ldr	r2, [pc, #260]	; (8002900 <PointingVertical+0x2e0>)
 80027fc:	6513      	str	r3, [r2, #80]	; 0x50
			in_data[21] = filteredValue[20];
 80027fe:	4b3e      	ldr	r3, [pc, #248]	; (80028f8 <PointingVertical+0x2d8>)
 8002800:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002802:	4a3f      	ldr	r2, [pc, #252]	; (8002900 <PointingVertical+0x2e0>)
 8002804:	6553      	str	r3, [r2, #84]	; 0x54
			in_data[22] = filteredValue[21];
 8002806:	4b3c      	ldr	r3, [pc, #240]	; (80028f8 <PointingVertical+0x2d8>)
 8002808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800280a:	4a3d      	ldr	r2, [pc, #244]	; (8002900 <PointingVertical+0x2e0>)
 800280c:	6593      	str	r3, [r2, #88]	; 0x58
			in_data[23] = filteredValue[22];
 800280e:	4b3a      	ldr	r3, [pc, #232]	; (80028f8 <PointingVertical+0x2d8>)
 8002810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002812:	4a3b      	ldr	r2, [pc, #236]	; (8002900 <PointingVertical+0x2e0>)
 8002814:	65d3      	str	r3, [r2, #92]	; 0x5c
			in_data[24] = filteredValue[23];
 8002816:	4b38      	ldr	r3, [pc, #224]	; (80028f8 <PointingVertical+0x2d8>)
 8002818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800281a:	4a39      	ldr	r2, [pc, #228]	; (8002900 <PointingVertical+0x2e0>)
 800281c:	6613      	str	r3, [r2, #96]	; 0x60
			in_data[25] = filteredValue[12];
 800281e:	4b36      	ldr	r3, [pc, #216]	; (80028f8 <PointingVertical+0x2d8>)
 8002820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002822:	4a37      	ldr	r2, [pc, #220]	; (8002900 <PointingVertical+0x2e0>)
 8002824:	6653      	str	r3, [r2, #100]	; 0x64
			#if NUM_SENSOR >= 36
			in_data[26] = filteredValue[24];
 8002826:	4b34      	ldr	r3, [pc, #208]	; (80028f8 <PointingVertical+0x2d8>)
 8002828:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800282a:	4a35      	ldr	r2, [pc, #212]	; (8002900 <PointingVertical+0x2e0>)
 800282c:	6693      	str	r3, [r2, #104]	; 0x68
			in_data[27] = filteredValue[25];
 800282e:	4b32      	ldr	r3, [pc, #200]	; (80028f8 <PointingVertical+0x2d8>)
 8002830:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002832:	4a33      	ldr	r2, [pc, #204]	; (8002900 <PointingVertical+0x2e0>)
 8002834:	66d3      	str	r3, [r2, #108]	; 0x6c
			in_data[28] = filteredValue[26];
 8002836:	4b30      	ldr	r3, [pc, #192]	; (80028f8 <PointingVertical+0x2d8>)
 8002838:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800283a:	4a31      	ldr	r2, [pc, #196]	; (8002900 <PointingVertical+0x2e0>)
 800283c:	6713      	str	r3, [r2, #112]	; 0x70
			in_data[29] = filteredValue[27];
 800283e:	4b2e      	ldr	r3, [pc, #184]	; (80028f8 <PointingVertical+0x2d8>)
 8002840:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002842:	4a2f      	ldr	r2, [pc, #188]	; (8002900 <PointingVertical+0x2e0>)
 8002844:	6753      	str	r3, [r2, #116]	; 0x74
			in_data[30] = filteredValue[28];
 8002846:	4b2c      	ldr	r3, [pc, #176]	; (80028f8 <PointingVertical+0x2d8>)
 8002848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800284a:	4a2d      	ldr	r2, [pc, #180]	; (8002900 <PointingVertical+0x2e0>)
 800284c:	6793      	str	r3, [r2, #120]	; 0x78
			in_data[31] = filteredValue[29];
 800284e:	4b2a      	ldr	r3, [pc, #168]	; (80028f8 <PointingVertical+0x2d8>)
 8002850:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002852:	4a2b      	ldr	r2, [pc, #172]	; (8002900 <PointingVertical+0x2e0>)
 8002854:	67d3      	str	r3, [r2, #124]	; 0x7c
			in_data[32] = filteredValue[30];
 8002856:	4b28      	ldr	r3, [pc, #160]	; (80028f8 <PointingVertical+0x2d8>)
 8002858:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800285a:	4a29      	ldr	r2, [pc, #164]	; (8002900 <PointingVertical+0x2e0>)
 800285c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
			in_data[33] = filteredValue[31];
 8002860:	4b25      	ldr	r3, [pc, #148]	; (80028f8 <PointingVertical+0x2d8>)
 8002862:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002864:	4a26      	ldr	r2, [pc, #152]	; (8002900 <PointingVertical+0x2e0>)
 8002866:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
			in_data[34] = filteredValue[32];
 800286a:	4b23      	ldr	r3, [pc, #140]	; (80028f8 <PointingVertical+0x2d8>)
 800286c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002870:	4a23      	ldr	r2, [pc, #140]	; (8002900 <PointingVertical+0x2e0>)
 8002872:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
			in_data[35] = filteredValue[33];
 8002876:	4b20      	ldr	r3, [pc, #128]	; (80028f8 <PointingVertical+0x2d8>)
 8002878:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800287c:	4a20      	ldr	r2, [pc, #128]	; (8002900 <PointingVertical+0x2e0>)
 800287e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
			in_data[36] = filteredValue[34];
 8002882:	4b1d      	ldr	r3, [pc, #116]	; (80028f8 <PointingVertical+0x2d8>)
 8002884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002888:	4a1d      	ldr	r2, [pc, #116]	; (8002900 <PointingVertical+0x2e0>)
 800288a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
			in_data[37] = filteredValue[35];
 800288e:	4b1a      	ldr	r3, [pc, #104]	; (80028f8 <PointingVertical+0x2d8>)
 8002890:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002894:	4a1a      	ldr	r2, [pc, #104]	; (8002900 <PointingVertical+0x2e0>)
 8002896:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
			in_data[38] = filteredValue[24];
 800289a:	4b17      	ldr	r3, [pc, #92]	; (80028f8 <PointingVertical+0x2d8>)
 800289c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800289e:	4a18      	ldr	r2, [pc, #96]	; (8002900 <PointingVertical+0x2e0>)
 80028a0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
			#endif
			#if NUM_SENSOR >= 48
			in_data[39] = filteredValue[36];
 80028a4:	4b14      	ldr	r3, [pc, #80]	; (80028f8 <PointingVertical+0x2d8>)
 80028a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028aa:	4a15      	ldr	r2, [pc, #84]	; (8002900 <PointingVertical+0x2e0>)
 80028ac:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
			in_data[40] = filteredValue[37];
 80028b0:	4b11      	ldr	r3, [pc, #68]	; (80028f8 <PointingVertical+0x2d8>)
 80028b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028b6:	4a12      	ldr	r2, [pc, #72]	; (8002900 <PointingVertical+0x2e0>)
 80028b8:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
			in_data[41] = filteredValue[38];
 80028bc:	4b0e      	ldr	r3, [pc, #56]	; (80028f8 <PointingVertical+0x2d8>)
 80028be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80028c2:	4a0f      	ldr	r2, [pc, #60]	; (8002900 <PointingVertical+0x2e0>)
 80028c4:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
			in_data[42] = filteredValue[39];
 80028c8:	4b0b      	ldr	r3, [pc, #44]	; (80028f8 <PointingVertical+0x2d8>)
 80028ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80028ce:	4a0c      	ldr	r2, [pc, #48]	; (8002900 <PointingVertical+0x2e0>)
 80028d0:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
			in_data[43] = filteredValue[40];
 80028d4:	4b08      	ldr	r3, [pc, #32]	; (80028f8 <PointingVertical+0x2d8>)
 80028d6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80028da:	4a09      	ldr	r2, [pc, #36]	; (8002900 <PointingVertical+0x2e0>)
 80028dc:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
 80028e0:	e010      	b.n	8002904 <PointingVertical+0x2e4>
 80028e2:	bf00      	nop
 80028e4:	20007a60 	.word	0x20007a60
 80028e8:	2000c560 	.word	0x2000c560
 80028ec:	200078f4 	.word	0x200078f4
 80028f0:	20007058 	.word	0x20007058
 80028f4:	200072f4 	.word	0x200072f4
 80028f8:	200076b4 	.word	0x200076b4
 80028fc:	20000238 	.word	0x20000238
 8002900:	20002460 	.word	0x20002460
			in_data[44] = filteredValue[41];
 8002904:	4b92      	ldr	r3, [pc, #584]	; (8002b50 <PointingVertical+0x530>)
 8002906:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800290a:	4a92      	ldr	r2, [pc, #584]	; (8002b54 <PointingVertical+0x534>)
 800290c:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
			in_data[45] = filteredValue[42];
 8002910:	4b8f      	ldr	r3, [pc, #572]	; (8002b50 <PointingVertical+0x530>)
 8002912:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002916:	4a8f      	ldr	r2, [pc, #572]	; (8002b54 <PointingVertical+0x534>)
 8002918:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
			in_data[46] = filteredValue[43];
 800291c:	4b8c      	ldr	r3, [pc, #560]	; (8002b50 <PointingVertical+0x530>)
 800291e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002922:	4a8c      	ldr	r2, [pc, #560]	; (8002b54 <PointingVertical+0x534>)
 8002924:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
			in_data[47] = filteredValue[44];
 8002928:	4b89      	ldr	r3, [pc, #548]	; (8002b50 <PointingVertical+0x530>)
 800292a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800292e:	4a89      	ldr	r2, [pc, #548]	; (8002b54 <PointingVertical+0x534>)
 8002930:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
			in_data[48] = filteredValue[45];
 8002934:	4b86      	ldr	r3, [pc, #536]	; (8002b50 <PointingVertical+0x530>)
 8002936:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800293a:	4a86      	ldr	r2, [pc, #536]	; (8002b54 <PointingVertical+0x534>)
 800293c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
			in_data[49] = filteredValue[46];
 8002940:	4b83      	ldr	r3, [pc, #524]	; (8002b50 <PointingVertical+0x530>)
 8002942:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002946:	4a83      	ldr	r2, [pc, #524]	; (8002b54 <PointingVertical+0x534>)
 8002948:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
			in_data[50] = filteredValue[47];
 800294c:	4b80      	ldr	r3, [pc, #512]	; (8002b50 <PointingVertical+0x530>)
 800294e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002952:	4a80      	ldr	r2, [pc, #512]	; (8002b54 <PointingVertical+0x534>)
 8002954:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
			in_data[51] = filteredValue[36];
 8002958:	4b7d      	ldr	r3, [pc, #500]	; (8002b50 <PointingVertical+0x530>)
 800295a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800295e:	4a7d      	ldr	r2, [pc, #500]	; (8002b54 <PointingVertical+0x534>)
 8002960:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
			#endif

			if(tofCount == NUM_SENSOR){
 8002964:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002968:	2b30      	cmp	r3, #48	; 0x30
 800296a:	f040 814f 	bne.w	8002c0c <PointingVertical+0x5ec>
				for(int i=0; i<NUM_SENSOR;i++){HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.1f ", filteredValue[i]), 100);}
 800296e:	2300      	movs	r3, #0
 8002970:	62bb      	str	r3, [r7, #40]	; 0x28
 8002972:	e017      	b.n	80029a4 <PointingVertical+0x384>
 8002974:	4a76      	ldr	r2, [pc, #472]	; (8002b50 <PointingVertical+0x530>)
 8002976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	4413      	add	r3, r2
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4618      	mov	r0, r3
 8002980:	f7fd fe12 	bl	80005a8 <__aeabi_f2d>
 8002984:	4602      	mov	r2, r0
 8002986:	460b      	mov	r3, r1
 8002988:	4973      	ldr	r1, [pc, #460]	; (8002b58 <PointingVertical+0x538>)
 800298a:	4874      	ldr	r0, [pc, #464]	; (8002b5c <PointingVertical+0x53c>)
 800298c:	f010 fea4 	bl	80136d8 <siprintf>
 8002990:	4603      	mov	r3, r0
 8002992:	b29a      	uxth	r2, r3
 8002994:	2364      	movs	r3, #100	; 0x64
 8002996:	4971      	ldr	r1, [pc, #452]	; (8002b5c <PointingVertical+0x53c>)
 8002998:	4871      	ldr	r0, [pc, #452]	; (8002b60 <PointingVertical+0x540>)
 800299a:	f006 f96b 	bl	8008c74 <HAL_UART_Transmit>
 800299e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029a0:	3301      	adds	r3, #1
 80029a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80029a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029a6:	2b2f      	cmp	r3, #47	; 0x2f
 80029a8:	dde4      	ble.n	8002974 <PointingVertical+0x354>
				int a =0;
 80029aa:	2300      	movs	r3, #0
 80029ac:	617b      	str	r3, [r7, #20]
				aiRun(in_data,out_data);
 80029ae:	496d      	ldr	r1, [pc, #436]	; (8002b64 <PointingVertical+0x544>)
 80029b0:	4868      	ldr	r0, [pc, #416]	; (8002b54 <PointingVertical+0x534>)
 80029b2:	f7fe fb91 	bl	80010d8 <aiRun>
				float sqSum= out_data[2]*out_data[2] + out_data[3]*out_data[3];
 80029b6:	4b6b      	ldr	r3, [pc, #428]	; (8002b64 <PointingVertical+0x544>)
 80029b8:	ed93 7a02 	vldr	s14, [r3, #8]
 80029bc:	4b69      	ldr	r3, [pc, #420]	; (8002b64 <PointingVertical+0x544>)
 80029be:	edd3 7a02 	vldr	s15, [r3, #8]
 80029c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029c6:	4b67      	ldr	r3, [pc, #412]	; (8002b64 <PointingVertical+0x544>)
 80029c8:	edd3 6a03 	vldr	s13, [r3, #12]
 80029cc:	4b65      	ldr	r3, [pc, #404]	; (8002b64 <PointingVertical+0x544>)
 80029ce:	edd3 7a03 	vldr	s15, [r3, #12]
 80029d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029da:	edc7 7a04 	vstr	s15, [r7, #16]
				//float sqrange = 0.08;
				uint32_t timestamp = HAL_GetTick();
 80029de:	f001 fee5 	bl	80047ac <HAL_GetTick>
 80029e2:	60f8      	str	r0, [r7, #12]
				if(sqSum>=0.97){
 80029e4:	6938      	ldr	r0, [r7, #16]
 80029e6:	f7fd fddf 	bl	80005a8 <__aeabi_f2d>
 80029ea:	a357      	add	r3, pc, #348	; (adr r3, 8002b48 <PointingVertical+0x528>)
 80029ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029f0:	f7fe f8b8 	bl	8000b64 <__aeabi_dcmpge>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	f000 809f 	beq.w	8002b3a <PointingVertical+0x51a>
					out_data[0] = (out_data[0] + 1) * (Fminmax[1] - Fminmax[0]) / 2 + Fminmax[0];
 80029fc:	4b59      	ldr	r3, [pc, #356]	; (8002b64 <PointingVertical+0x544>)
 80029fe:	edd3 7a00 	vldr	s15, [r3]
 8002a02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002a06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002a0a:	4b57      	ldr	r3, [pc, #348]	; (8002b68 <PointingVertical+0x548>)
 8002a0c:	edd3 6a01 	vldr	s13, [r3, #4]
 8002a10:	4b55      	ldr	r3, [pc, #340]	; (8002b68 <PointingVertical+0x548>)
 8002a12:	edd3 7a00 	vldr	s15, [r3]
 8002a16:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a1e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002a22:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002a26:	4b50      	ldr	r3, [pc, #320]	; (8002b68 <PointingVertical+0x548>)
 8002a28:	edd3 7a00 	vldr	s15, [r3]
 8002a2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a30:	4b4c      	ldr	r3, [pc, #304]	; (8002b64 <PointingVertical+0x544>)
 8002a32:	edc3 7a00 	vstr	s15, [r3]
					out_data[1] = (out_data[1] + 1) * (Zminmax[1] - Zminmax[0]) / 2 + Zminmax[0];
 8002a36:	4b4b      	ldr	r3, [pc, #300]	; (8002b64 <PointingVertical+0x544>)
 8002a38:	edd3 7a01 	vldr	s15, [r3, #4]
 8002a3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002a40:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002a44:	4b49      	ldr	r3, [pc, #292]	; (8002b6c <PointingVertical+0x54c>)
 8002a46:	edd3 6a01 	vldr	s13, [r3, #4]
 8002a4a:	4b48      	ldr	r3, [pc, #288]	; (8002b6c <PointingVertical+0x54c>)
 8002a4c:	edd3 7a00 	vldr	s15, [r3]
 8002a50:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002a54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a58:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002a5c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002a60:	4b42      	ldr	r3, [pc, #264]	; (8002b6c <PointingVertical+0x54c>)
 8002a62:	edd3 7a00 	vldr	s15, [r3]
 8002a66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a6a:	4b3e      	ldr	r3, [pc, #248]	; (8002b64 <PointingVertical+0x544>)
 8002a6c:	edc3 7a01 	vstr	s15, [r3, #4]
					if(out_data[1] >=144){out_data[1]=144;}
 8002a70:	4b3c      	ldr	r3, [pc, #240]	; (8002b64 <PointingVertical+0x544>)
 8002a72:	edd3 7a01 	vldr	s15, [r3, #4]
 8002a76:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8002b70 <PointingVertical+0x550>
 8002a7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a82:	db02      	blt.n	8002a8a <PointingVertical+0x46a>
 8002a84:	4b37      	ldr	r3, [pc, #220]	; (8002b64 <PointingVertical+0x544>)
 8002a86:	4a3b      	ldr	r2, [pc, #236]	; (8002b74 <PointingVertical+0x554>)
 8002a88:	605a      	str	r2, [r3, #4]
					if(out_data[1] <=16){out_data[1]=16;}
 8002a8a:	4b36      	ldr	r3, [pc, #216]	; (8002b64 <PointingVertical+0x544>)
 8002a8c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002a90:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8002a94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a9c:	d803      	bhi.n	8002aa6 <PointingVertical+0x486>
 8002a9e:	4b31      	ldr	r3, [pc, #196]	; (8002b64 <PointingVertical+0x544>)
 8002aa0:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 8002aa4:	605a      	str	r2, [r3, #4]
					if(out_data[0]>=Fminmax[0]){
 8002aa6:	4b2f      	ldr	r3, [pc, #188]	; (8002b64 <PointingVertical+0x544>)
 8002aa8:	ed93 7a00 	vldr	s14, [r3]
 8002aac:	4b2e      	ldr	r3, [pc, #184]	; (8002b68 <PointingVertical+0x548>)
 8002aae:	edd3 7a00 	vldr	s15, [r3]
 8002ab2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aba:	f2c0 80a7 	blt.w	8002c0c <PointingVertical+0x5ec>
						for(int k=0; k<4;k++){
 8002abe:	2300      	movs	r3, #0
 8002ac0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ac2:	e018      	b.n	8002af6 <PointingVertical+0x4d6>
							HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", out_data[k]), 1000);
 8002ac4:	4a27      	ldr	r2, [pc, #156]	; (8002b64 <PointingVertical+0x544>)
 8002ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	4413      	add	r3, r2
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7fd fd6a 	bl	80005a8 <__aeabi_f2d>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	4927      	ldr	r1, [pc, #156]	; (8002b78 <PointingVertical+0x558>)
 8002ada:	4820      	ldr	r0, [pc, #128]	; (8002b5c <PointingVertical+0x53c>)
 8002adc:	f010 fdfc 	bl	80136d8 <siprintf>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	b29a      	uxth	r2, r3
 8002ae4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ae8:	491c      	ldr	r1, [pc, #112]	; (8002b5c <PointingVertical+0x53c>)
 8002aea:	481d      	ldr	r0, [pc, #116]	; (8002b60 <PointingVertical+0x540>)
 8002aec:	f006 f8c2 	bl	8008c74 <HAL_UART_Transmit>
						for(int k=0; k<4;k++){
 8002af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af2:	3301      	adds	r3, #1
 8002af4:	627b      	str	r3, [r7, #36]	; 0x24
 8002af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af8:	2b03      	cmp	r3, #3
 8002afa:	dde3      	ble.n	8002ac4 <PointingVertical+0x4a4>
						}
						HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", sqSum), 1000);
 8002afc:	6938      	ldr	r0, [r7, #16]
 8002afe:	f7fd fd53 	bl	80005a8 <__aeabi_f2d>
 8002b02:	4602      	mov	r2, r0
 8002b04:	460b      	mov	r3, r1
 8002b06:	491c      	ldr	r1, [pc, #112]	; (8002b78 <PointingVertical+0x558>)
 8002b08:	4814      	ldr	r0, [pc, #80]	; (8002b5c <PointingVertical+0x53c>)
 8002b0a:	f010 fde5 	bl	80136d8 <siprintf>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	b29a      	uxth	r2, r3
 8002b12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b16:	4911      	ldr	r1, [pc, #68]	; (8002b5c <PointingVertical+0x53c>)
 8002b18:	4811      	ldr	r0, [pc, #68]	; (8002b60 <PointingVertical+0x540>)
 8002b1a:	f006 f8ab 	bl	8008c74 <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%lu ", timestamp), 1000);
 8002b1e:	68fa      	ldr	r2, [r7, #12]
 8002b20:	4916      	ldr	r1, [pc, #88]	; (8002b7c <PointingVertical+0x55c>)
 8002b22:	480e      	ldr	r0, [pc, #56]	; (8002b5c <PointingVertical+0x53c>)
 8002b24:	f010 fdd8 	bl	80136d8 <siprintf>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	b29a      	uxth	r2, r3
 8002b2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b30:	490a      	ldr	r1, [pc, #40]	; (8002b5c <PointingVertical+0x53c>)
 8002b32:	480b      	ldr	r0, [pc, #44]	; (8002b60 <PointingVertical+0x540>)
 8002b34:	f006 f89e 	bl	8008c74 <HAL_UART_Transmit>
 8002b38:	e068      	b.n	8002c0c <PointingVertical+0x5ec>
						//HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "1"), 1000);
					}
				}else if(a==1){
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d165      	bne.n	8002c0c <PointingVertical+0x5ec>
					for(int k=0; k<4;k++){
 8002b40:	2300      	movs	r3, #0
 8002b42:	623b      	str	r3, [r7, #32]
 8002b44:	e035      	b.n	8002bb2 <PointingVertical+0x592>
 8002b46:	bf00      	nop
 8002b48:	70a3d70a 	.word	0x70a3d70a
 8002b4c:	3fef0a3d 	.word	0x3fef0a3d
 8002b50:	200076b4 	.word	0x200076b4
 8002b54:	20002460 	.word	0x20002460
 8002b58:	08018a34 	.word	0x08018a34
 8002b5c:	20007870 	.word	0x20007870
 8002b60:	200077e8 	.word	0x200077e8
 8002b64:	20002540 	.word	0x20002540
 8002b68:	200002f8 	.word	0x200002f8
 8002b6c:	20000300 	.word	0x20000300
 8002b70:	43100000 	.word	0x43100000
 8002b74:	43100000 	.word	0x43100000
 8002b78:	08018b54 	.word	0x08018b54
 8002b7c:	08018b60 	.word	0x08018b60
						HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", out_data[k]), 1000);
 8002b80:	4a40      	ldr	r2, [pc, #256]	; (8002c84 <PointingVertical+0x664>)
 8002b82:	6a3b      	ldr	r3, [r7, #32]
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	4413      	add	r3, r2
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7fd fd0c 	bl	80005a8 <__aeabi_f2d>
 8002b90:	4602      	mov	r2, r0
 8002b92:	460b      	mov	r3, r1
 8002b94:	493c      	ldr	r1, [pc, #240]	; (8002c88 <PointingVertical+0x668>)
 8002b96:	483d      	ldr	r0, [pc, #244]	; (8002c8c <PointingVertical+0x66c>)
 8002b98:	f010 fd9e 	bl	80136d8 <siprintf>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	b29a      	uxth	r2, r3
 8002ba0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ba4:	4939      	ldr	r1, [pc, #228]	; (8002c8c <PointingVertical+0x66c>)
 8002ba6:	483a      	ldr	r0, [pc, #232]	; (8002c90 <PointingVertical+0x670>)
 8002ba8:	f006 f864 	bl	8008c74 <HAL_UART_Transmit>
					for(int k=0; k<4;k++){
 8002bac:	6a3b      	ldr	r3, [r7, #32]
 8002bae:	3301      	adds	r3, #1
 8002bb0:	623b      	str	r3, [r7, #32]
 8002bb2:	6a3b      	ldr	r3, [r7, #32]
 8002bb4:	2b03      	cmp	r3, #3
 8002bb6:	dde3      	ble.n	8002b80 <PointingVertical+0x560>
					}
					HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.2f ", sqSum), 1000);
 8002bb8:	6938      	ldr	r0, [r7, #16]
 8002bba:	f7fd fcf5 	bl	80005a8 <__aeabi_f2d>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	4931      	ldr	r1, [pc, #196]	; (8002c88 <PointingVertical+0x668>)
 8002bc4:	4831      	ldr	r0, [pc, #196]	; (8002c8c <PointingVertical+0x66c>)
 8002bc6:	f010 fd87 	bl	80136d8 <siprintf>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	b29a      	uxth	r2, r3
 8002bce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bd2:	492e      	ldr	r1, [pc, #184]	; (8002c8c <PointingVertical+0x66c>)
 8002bd4:	482e      	ldr	r0, [pc, #184]	; (8002c90 <PointingVertical+0x670>)
 8002bd6:	f006 f84d 	bl	8008c74 <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%lu ", timestamp), 1000);
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	492d      	ldr	r1, [pc, #180]	; (8002c94 <PointingVertical+0x674>)
 8002bde:	482b      	ldr	r0, [pc, #172]	; (8002c8c <PointingVertical+0x66c>)
 8002be0:	f010 fd7a 	bl	80136d8 <siprintf>
 8002be4:	4603      	mov	r3, r0
 8002be6:	b29a      	uxth	r2, r3
 8002be8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bec:	4927      	ldr	r1, [pc, #156]	; (8002c8c <PointingVertical+0x66c>)
 8002bee:	4828      	ldr	r0, [pc, #160]	; (8002c90 <PointingVertical+0x670>)
 8002bf0:	f006 f840 	bl	8008c74 <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "0"), 1000);
 8002bf4:	4928      	ldr	r1, [pc, #160]	; (8002c98 <PointingVertical+0x678>)
 8002bf6:	4825      	ldr	r0, [pc, #148]	; (8002c8c <PointingVertical+0x66c>)
 8002bf8:	f010 fd6e 	bl	80136d8 <siprintf>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	b29a      	uxth	r2, r3
 8002c00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c04:	4921      	ldr	r1, [pc, #132]	; (8002c8c <PointingVertical+0x66c>)
 8002c06:	4822      	ldr	r0, [pc, #136]	; (8002c90 <PointingVertical+0x670>)
 8002c08:	f006 f834 	bl	8008c74 <HAL_UART_Transmit>
				}
			}
			do{
				endTime = HAL_GetTick();
 8002c0c:	f001 fdce 	bl	80047ac <HAL_GetTick>
 8002c10:	60b8      	str	r0, [r7, #8]
				diffTime = endTime - startTime;
 8002c12:	68ba      	ldr	r2, [r7, #8]
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	607b      	str	r3, [r7, #4]
			}while (diffTime <= TIMBUDGET);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2b64      	cmp	r3, #100	; 0x64
 8002c1e:	d9f5      	bls.n	8002c0c <PointingVertical+0x5ec>
			HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "\n"), 100);
 8002c20:	491e      	ldr	r1, [pc, #120]	; (8002c9c <PointingVertical+0x67c>)
 8002c22:	481a      	ldr	r0, [pc, #104]	; (8002c8c <PointingVertical+0x66c>)
 8002c24:	f010 fd58 	bl	80136d8 <siprintf>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	b29a      	uxth	r2, r3
 8002c2c:	2364      	movs	r3, #100	; 0x64
 8002c2e:	4917      	ldr	r1, [pc, #92]	; (8002c8c <PointingVertical+0x66c>)
 8002c30:	4817      	ldr	r0, [pc, #92]	; (8002c90 <PointingVertical+0x670>)
 8002c32:	f006 f81f 	bl	8008c74 <HAL_UART_Transmit>
		    while(HAL_GetTick() - ServoStartTime < 7000) {
 8002c36:	f001 fdb9 	bl	80047ac <HAL_GetTick>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	f641 3257 	movw	r2, #6999	; 0x1b57
 8002c44:	4293      	cmp	r3, r2
 8002c46:	f67f ad06 	bls.w	8002656 <PointingVertical+0x36>
	    }
	    HAL_Delay(1000);
 8002c4a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c4e:	f001 fdb9 	bl	80047c4 <HAL_Delay>

		servo_angle(&htim2, TIM_CHANNEL_1, 0);
 8002c52:	2200      	movs	r2, #0
 8002c54:	2100      	movs	r1, #0
 8002c56:	4812      	ldr	r0, [pc, #72]	; (8002ca0 <PointingVertical+0x680>)
 8002c58:	f001 f8d2 	bl	8003e00 <servo_angle>
		HAL_Delay(1000);
 8002c5c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c60:	f001 fdb0 	bl	80047c4 <HAL_Delay>
	    stepLin(-25);
 8002c64:	f06f 0018 	mvn.w	r0, #24
 8002c68:	f001 f86e 	bl	8003d48 <stepLin>
	for(int i = 0; i < 5; i++) {
 8002c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c6e:	3301      	adds	r3, #1
 8002c70:	637b      	str	r3, [r7, #52]	; 0x34
 8002c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c74:	2b04      	cmp	r3, #4
 8002c76:	f77f ace1 	ble.w	800263c <PointingVertical+0x1c>
	}
	//stepLin(130);

	// 30 55 80 110 130
}
 8002c7a:	bf00      	nop
 8002c7c:	bf00      	nop
 8002c7e:	3738      	adds	r7, #56	; 0x38
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	20002540 	.word	0x20002540
 8002c88:	08018b54 	.word	0x08018b54
 8002c8c:	20007870 	.word	0x20007870
 8002c90:	200077e8 	.word	0x200077e8
 8002c94:	08018b60 	.word	0x08018b60
 8002c98:	08018b68 	.word	0x08018b68
 8002c9c:	08018b5c 	.word	0x08018b5c
 8002ca0:	20007798 	.word	0x20007798

08002ca4 <PointingRadial>:

void PointingRadial(){
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
	for(int i = 0; i < 7; i++) {
 8002caa:	2300      	movs	r3, #0
 8002cac:	607b      	str	r3, [r7, #4]
 8002cae:	e017      	b.n	8002ce0 <PointingRadial+0x3c>
		servo_angle(&htim2, TIM_CHANNEL_1, 12); // poking 8
 8002cb0:	220c      	movs	r2, #12
 8002cb2:	2100      	movs	r1, #0
 8002cb4:	480e      	ldr	r0, [pc, #56]	; (8002cf0 <PointingRadial+0x4c>)
 8002cb6:	f001 f8a3 	bl	8003e00 <servo_angle>
		HAL_Delay(5000);
 8002cba:	f241 3088 	movw	r0, #5000	; 0x1388
 8002cbe:	f001 fd81 	bl	80047c4 <HAL_Delay>
		servo_angle(&htim2, TIM_CHANNEL_1, 0); // poking 8
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	2100      	movs	r1, #0
 8002cc6:	480a      	ldr	r0, [pc, #40]	; (8002cf0 <PointingRadial+0x4c>)
 8002cc8:	f001 f89a 	bl	8003e00 <servo_angle>
	    stepRev(15);
 8002ccc:	200f      	movs	r0, #15
 8002cce:	f000 ffd3 	bl	8003c78 <stepRev>
		HAL_Delay(5000);
 8002cd2:	f241 3088 	movw	r0, #5000	; 0x1388
 8002cd6:	f001 fd75 	bl	80047c4 <HAL_Delay>
	for(int i = 0; i < 7; i++) {
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	3301      	adds	r3, #1
 8002cde:	607b      	str	r3, [r7, #4]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2b06      	cmp	r3, #6
 8002ce4:	dde4      	ble.n	8002cb0 <PointingRadial+0xc>
	}

	// 0 15 30 45 60 75 90
}
 8002ce6:	bf00      	nop
 8002ce8:	bf00      	nop
 8002cea:	3708      	adds	r7, #8
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	20007798 	.word	0x20007798

08002cf4 <InitializaionCalibrationCommand>:
void InitializaionCalibrationCommand()
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b086      	sub	sp, #24
 8002cf8:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "InitializationCommand\n\r"), 100);
 8002cfa:	49b2      	ldr	r1, [pc, #712]	; (8002fc4 <InitializaionCalibrationCommand+0x2d0>)
 8002cfc:	48b2      	ldr	r0, [pc, #712]	; (8002fc8 <InitializaionCalibrationCommand+0x2d4>)
 8002cfe:	f010 fceb 	bl	80136d8 <siprintf>
 8002d02:	4603      	mov	r3, r0
 8002d04:	b29a      	uxth	r2, r3
 8002d06:	2364      	movs	r3, #100	; 0x64
 8002d08:	49af      	ldr	r1, [pc, #700]	; (8002fc8 <InitializaionCalibrationCommand+0x2d4>)
 8002d0a:	48b0      	ldr	r0, [pc, #704]	; (8002fcc <InitializaionCalibrationCommand+0x2d8>)
 8002d0c:	f005 ffb2 	bl	8008c74 <HAL_UART_Transmit>

	ResetAllDevices();
 8002d10:	f001 fc26 	bl	8004560 <ResetAllDevices>
  	for (int i = 0; i < NUM_SENSOR; i++) {
 8002d14:	2300      	movs	r3, #0
 8002d16:	617b      	str	r3, [r7, #20]
 8002d18:	e10a      	b.n	8002f30 <InitializaionCalibrationCommand+0x23c>
  	    uint8_t q = i / 12;
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	4aac      	ldr	r2, [pc, #688]	; (8002fd0 <InitializaionCalibrationCommand+0x2dc>)
 8002d1e:	fb82 1203 	smull	r1, r2, r2, r3
 8002d22:	1052      	asrs	r2, r2, #1
 8002d24:	17db      	asrs	r3, r3, #31
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	70fb      	strb	r3, [r7, #3]
  	    uint8_t r = i % 12;
 8002d2a:	697a      	ldr	r2, [r7, #20]
 8002d2c:	4ba8      	ldr	r3, [pc, #672]	; (8002fd0 <InitializaionCalibrationCommand+0x2dc>)
 8002d2e:	fb83 1302 	smull	r1, r3, r3, r2
 8002d32:	1059      	asrs	r1, r3, #1
 8002d34:	17d3      	asrs	r3, r2, #31
 8002d36:	1ac9      	subs	r1, r1, r3
 8002d38:	460b      	mov	r3, r1
 8002d3a:	005b      	lsls	r3, r3, #1
 8002d3c:	440b      	add	r3, r1
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	1ad1      	subs	r1, r2, r3
 8002d42:	460b      	mov	r3, r1
 8002d44:	70bb      	strb	r3, [r7, #2]
  	    uint8_t active_device = q * 2 + (r >= 8 ? 1 : 0);
 8002d46:	78fb      	ldrb	r3, [r7, #3]
 8002d48:	005b      	lsls	r3, r3, #1
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	78ba      	ldrb	r2, [r7, #2]
 8002d4e:	2a07      	cmp	r2, #7
 8002d50:	bf8c      	ite	hi
 8002d52:	2201      	movhi	r2, #1
 8002d54:	2200      	movls	r2, #0
 8002d56:	b2d2      	uxtb	r2, r2
 8002d58:	4413      	add	r3, r2
 8002d5a:	707b      	strb	r3, [r7, #1]
  	    uint8_t channel = (r >= 8) ? r - 8 : r;
 8002d5c:	78bb      	ldrb	r3, [r7, #2]
 8002d5e:	2b07      	cmp	r3, #7
 8002d60:	d903      	bls.n	8002d6a <InitializaionCalibrationCommand+0x76>
 8002d62:	78bb      	ldrb	r3, [r7, #2]
 8002d64:	3b08      	subs	r3, #8
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	e000      	b.n	8002d6c <InitializaionCalibrationCommand+0x78>
 8002d6a:	78bb      	ldrb	r3, [r7, #2]
 8002d6c:	703b      	strb	r3, [r7, #0]

        ResetDevicesExcept(active_device);
 8002d6e:	787b      	ldrb	r3, [r7, #1]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f001 fc21 	bl	80045b8 <ResetDevicesExcept>
        setActiveTcaChannel(active_device,channel);
 8002d76:	783a      	ldrb	r2, [r7, #0]
 8002d78:	787b      	ldrb	r3, [r7, #1]
 8002d7a:	4611      	mov	r1, r2
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f001 fc4d 	bl	800461c <setActiveTcaChannel>

  		Dev = &vl53l0x_s[i];
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002d88:	fb02 f303 	mul.w	r3, r2, r3
 8002d8c:	4a91      	ldr	r2, [pc, #580]	; (8002fd4 <InitializaionCalibrationCommand+0x2e0>)
 8002d8e:	4413      	add	r3, r2
 8002d90:	4a91      	ldr	r2, [pc, #580]	; (8002fd8 <InitializaionCalibrationCommand+0x2e4>)
 8002d92:	6013      	str	r3, [r2, #0]
  		Dev->I2cHandle = &hi2c1;
 8002d94:	4b90      	ldr	r3, [pc, #576]	; (8002fd8 <InitializaionCalibrationCommand+0x2e4>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a90      	ldr	r2, [pc, #576]	; (8002fdc <InitializaionCalibrationCommand+0x2e8>)
 8002d9a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  		Dev->I2cDevAddr = VL53L0X_ADDR;
 8002d9e:	4b8e      	ldr	r3, [pc, #568]	; (8002fd8 <InitializaionCalibrationCommand+0x2e4>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2252      	movs	r2, #82	; 0x52
 8002da4:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

  		VL53L0X_WaitDeviceBooted( Dev );
 8002da8:	4b8b      	ldr	r3, [pc, #556]	; (8002fd8 <InitializaionCalibrationCommand+0x2e4>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4618      	mov	r0, r3
 8002dae:	f007 fb53 	bl	800a458 <VL53L0X_WaitDeviceBooted>
  		VL53L0X_DataInit( Dev );
 8002db2:	4b89      	ldr	r3, [pc, #548]	; (8002fd8 <InitializaionCalibrationCommand+0x2e4>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f007 f868 	bl	8009e8c <VL53L0X_DataInit>
  		VL53L0X_StaticInit( Dev );
 8002dbc:	4b86      	ldr	r3, [pc, #536]	; (8002fd8 <InitializaionCalibrationCommand+0x2e4>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f007 f9c7 	bl	800a154 <VL53L0X_StaticInit>
  		VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 8002dc6:	4b84      	ldr	r3, [pc, #528]	; (8002fd8 <InitializaionCalibrationCommand+0x2e4>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2101      	movs	r1, #1
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f007 fbe1 	bl	800a594 <VL53L0X_SetDeviceMode>

  		VL53L0X_PerformRefSpadManagement( Dev, &refSpadCount[i], &isApertureSpads[i]);
 8002dd2:	4b81      	ldr	r3, [pc, #516]	; (8002fd8 <InitializaionCalibrationCommand+0x2e4>)
 8002dd4:	6818      	ldr	r0, [r3, #0]
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	4a81      	ldr	r2, [pc, #516]	; (8002fe0 <InitializaionCalibrationCommand+0x2ec>)
 8002ddc:	1899      	adds	r1, r3, r2
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	4a80      	ldr	r2, [pc, #512]	; (8002fe4 <InitializaionCalibrationCommand+0x2f0>)
 8002de2:	4413      	add	r3, r2
 8002de4:	461a      	mov	r2, r3
 8002de6:	f008 fd14 	bl	800b812 <VL53L0X_PerformRefSpadManagement>
  		VL53L0X_PerformRefCalibration( Dev, &VhvSettings[i], &PhaseCal[i]);
 8002dea:	4b7b      	ldr	r3, [pc, #492]	; (8002fd8 <InitializaionCalibrationCommand+0x2e4>)
 8002dec:	6818      	ldr	r0, [r3, #0]
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	4a7d      	ldr	r2, [pc, #500]	; (8002fe8 <InitializaionCalibrationCommand+0x2f4>)
 8002df2:	1899      	adds	r1, r3, r2
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	4a7d      	ldr	r2, [pc, #500]	; (8002fec <InitializaionCalibrationCommand+0x2f8>)
 8002df8:	4413      	add	r3, r2
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	f008 f864 	bl	800aec8 <VL53L0X_PerformRefCalibration>

  		refSpadCountHost[i] = refSpadCount[i];
 8002e00:	4a77      	ldr	r2, [pc, #476]	; (8002fe0 <InitializaionCalibrationCommand+0x2ec>)
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002e08:	4979      	ldr	r1, [pc, #484]	; (8002ff0 <InitializaionCalibrationCommand+0x2fc>)
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  		isApertureSpadsHost[i] = isApertureSpads[i];
 8002e10:	4a74      	ldr	r2, [pc, #464]	; (8002fe4 <InitializaionCalibrationCommand+0x2f0>)
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	4413      	add	r3, r2
 8002e16:	7819      	ldrb	r1, [r3, #0]
 8002e18:	4a76      	ldr	r2, [pc, #472]	; (8002ff4 <InitializaionCalibrationCommand+0x300>)
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	460a      	mov	r2, r1
 8002e20:	701a      	strb	r2, [r3, #0]
  		VhvSettingsHost[i] = VhvSettings[i];
 8002e22:	4a71      	ldr	r2, [pc, #452]	; (8002fe8 <InitializaionCalibrationCommand+0x2f4>)
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	4413      	add	r3, r2
 8002e28:	7819      	ldrb	r1, [r3, #0]
 8002e2a:	4a73      	ldr	r2, [pc, #460]	; (8002ff8 <InitializaionCalibrationCommand+0x304>)
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	4413      	add	r3, r2
 8002e30:	460a      	mov	r2, r1
 8002e32:	701a      	strb	r2, [r3, #0]
  		PhaseCalHost[i] = PhaseCal[i];
 8002e34:	4a6d      	ldr	r2, [pc, #436]	; (8002fec <InitializaionCalibrationCommand+0x2f8>)
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	4413      	add	r3, r2
 8002e3a:	7819      	ldrb	r1, [r3, #0]
 8002e3c:	4a6f      	ldr	r2, [pc, #444]	; (8002ffc <InitializaionCalibrationCommand+0x308>)
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	4413      	add	r3, r2
 8002e42:	460a      	mov	r2, r1
 8002e44:	701a      	strb	r2, [r3, #0]

  		VL53L0X_SetLimitCheckEnable( Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 8002e46:	4b64      	ldr	r3, [pc, #400]	; (8002fd8 <InitializaionCalibrationCommand+0x2e4>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	2100      	movs	r1, #0
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f007 fe34 	bl	800aabc <VL53L0X_SetLimitCheckEnable>
  		VL53L0X_SetLimitCheckEnable( Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 8002e54:	4b60      	ldr	r3, [pc, #384]	; (8002fd8 <InitializaionCalibrationCommand+0x2e4>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2201      	movs	r2, #1
 8002e5a:	2101      	movs	r1, #1
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f007 fe2d 	bl	800aabc <VL53L0X_SetLimitCheckEnable>
  		VL53L0X_SetLimitCheckValue( Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 8002e62:	4b5d      	ldr	r3, [pc, #372]	; (8002fd8 <InitializaionCalibrationCommand+0x2e4>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f641 1299 	movw	r2, #6553	; 0x1999
 8002e6a:	2101      	movs	r1, #1
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f007 fed5 	bl	800ac1c <VL53L0X_SetLimitCheckValue>
  		VL53L0X_SetLimitCheckValue( Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 8002e72:	4b59      	ldr	r3, [pc, #356]	; (8002fd8 <InitializaionCalibrationCommand+0x2e4>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002e7a:	2100      	movs	r1, #0
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f007 fecd 	bl	800ac1c <VL53L0X_SetLimitCheckValue>
  		VL53L0X_SetMeasurementTimingBudgetMicroSeconds( Dev, 100000);
 8002e82:	4b55      	ldr	r3, [pc, #340]	; (8002fd8 <InitializaionCalibrationCommand+0x2e4>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	495e      	ldr	r1, [pc, #376]	; (8003000 <InitializaionCalibrationCommand+0x30c>)
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f007 fbe1 	bl	800a650 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
  		VL53L0X_SetVcselPulsePeriod( Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 8002e8e:	4b52      	ldr	r3, [pc, #328]	; (8002fd8 <InitializaionCalibrationCommand+0x2e4>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2212      	movs	r2, #18
 8002e94:	2100      	movs	r1, #0
 8002e96:	4618      	mov	r0, r3
 8002e98:	f007 fc00 	bl	800a69c <VL53L0X_SetVcselPulsePeriod>
  		VL53L0X_SetVcselPulsePeriod( Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 8002e9c:	4b4e      	ldr	r3, [pc, #312]	; (8002fd8 <InitializaionCalibrationCommand+0x2e4>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	220e      	movs	r2, #14
 8002ea2:	2101      	movs	r1, #1
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f007 fbf9 	bl	800a69c <VL53L0X_SetVcselPulsePeriod>

		Kalman_Init(&filters[i], Q, R, P, 0);  // Q, R, P
 8002eaa:	697a      	ldr	r2, [r7, #20]
 8002eac:	4613      	mov	r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	4413      	add	r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	4a53      	ldr	r2, [pc, #332]	; (8003004 <InitializaionCalibrationCommand+0x310>)
 8002eb6:	4413      	add	r3, r2
 8002eb8:	4a53      	ldr	r2, [pc, #332]	; (8003008 <InitializaionCalibrationCommand+0x314>)
 8002eba:	edd2 7a00 	vldr	s15, [r2]
 8002ebe:	4a53      	ldr	r2, [pc, #332]	; (800300c <InitializaionCalibrationCommand+0x318>)
 8002ec0:	ed92 7a00 	vldr	s14, [r2]
 8002ec4:	4a52      	ldr	r2, [pc, #328]	; (8003010 <InitializaionCalibrationCommand+0x31c>)
 8002ec6:	edd2 6a00 	vldr	s13, [r2]
 8002eca:	eddf 1a52 	vldr	s3, [pc, #328]	; 8003014 <InitializaionCalibrationCommand+0x320>
 8002ece:	eeb0 1a66 	vmov.f32	s2, s13
 8002ed2:	eef0 0a47 	vmov.f32	s1, s14
 8002ed6:	eeb0 0a67 	vmov.f32	s0, s15
 8002eda:	4618      	mov	r0, r3
 8002edc:	f000 fbb6 	bl	800364c <Kalman_Init>

 		HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%02d ",i), 100);
 8002ee0:	697a      	ldr	r2, [r7, #20]
 8002ee2:	494d      	ldr	r1, [pc, #308]	; (8003018 <InitializaionCalibrationCommand+0x324>)
 8002ee4:	4838      	ldr	r0, [pc, #224]	; (8002fc8 <InitializaionCalibrationCommand+0x2d4>)
 8002ee6:	f010 fbf7 	bl	80136d8 <siprintf>
 8002eea:	4603      	mov	r3, r0
 8002eec:	b29a      	uxth	r2, r3
 8002eee:	2364      	movs	r3, #100	; 0x64
 8002ef0:	4935      	ldr	r1, [pc, #212]	; (8002fc8 <InitializaionCalibrationCommand+0x2d4>)
 8002ef2:	4836      	ldr	r0, [pc, #216]	; (8002fcc <InitializaionCalibrationCommand+0x2d8>)
 8002ef4:	f005 febe 	bl	8008c74 <HAL_UART_Transmit>
 		if(i%12 ==11){HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "\n\r"), 100);}
 8002ef8:	6979      	ldr	r1, [r7, #20]
 8002efa:	4b35      	ldr	r3, [pc, #212]	; (8002fd0 <InitializaionCalibrationCommand+0x2dc>)
 8002efc:	fb83 2301 	smull	r2, r3, r3, r1
 8002f00:	105a      	asrs	r2, r3, #1
 8002f02:	17cb      	asrs	r3, r1, #31
 8002f04:	1ad2      	subs	r2, r2, r3
 8002f06:	4613      	mov	r3, r2
 8002f08:	005b      	lsls	r3, r3, #1
 8002f0a:	4413      	add	r3, r2
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	1aca      	subs	r2, r1, r3
 8002f10:	2a0b      	cmp	r2, #11
 8002f12:	d10a      	bne.n	8002f2a <InitializaionCalibrationCommand+0x236>
 8002f14:	4941      	ldr	r1, [pc, #260]	; (800301c <InitializaionCalibrationCommand+0x328>)
 8002f16:	482c      	ldr	r0, [pc, #176]	; (8002fc8 <InitializaionCalibrationCommand+0x2d4>)
 8002f18:	f010 fbde 	bl	80136d8 <siprintf>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	b29a      	uxth	r2, r3
 8002f20:	2364      	movs	r3, #100	; 0x64
 8002f22:	4929      	ldr	r1, [pc, #164]	; (8002fc8 <InitializaionCalibrationCommand+0x2d4>)
 8002f24:	4829      	ldr	r0, [pc, #164]	; (8002fcc <InitializaionCalibrationCommand+0x2d8>)
 8002f26:	f005 fea5 	bl	8008c74 <HAL_UART_Transmit>
  	for (int i = 0; i < NUM_SENSOR; i++) {
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	617b      	str	r3, [r7, #20]
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	2b2f      	cmp	r3, #47	; 0x2f
 8002f34:	f77f aef1 	ble.w	8002d1a <InitializaionCalibrationCommand+0x26>
  	}


	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "uint32_t refSpadCountHost[NUM_SENSOR]={"), 100);
 8002f38:	4939      	ldr	r1, [pc, #228]	; (8003020 <InitializaionCalibrationCommand+0x32c>)
 8002f3a:	4823      	ldr	r0, [pc, #140]	; (8002fc8 <InitializaionCalibrationCommand+0x2d4>)
 8002f3c:	f010 fbcc 	bl	80136d8 <siprintf>
 8002f40:	4603      	mov	r3, r0
 8002f42:	b29a      	uxth	r2, r3
 8002f44:	2364      	movs	r3, #100	; 0x64
 8002f46:	4920      	ldr	r1, [pc, #128]	; (8002fc8 <InitializaionCalibrationCommand+0x2d4>)
 8002f48:	4820      	ldr	r0, [pc, #128]	; (8002fcc <InitializaionCalibrationCommand+0x2d8>)
 8002f4a:	f005 fe93 	bl	8008c74 <HAL_UART_Transmit>
	for (int i = 0; i < NUM_SENSOR; i++){
 8002f4e:	2300      	movs	r3, #0
 8002f50:	613b      	str	r3, [r7, #16]
 8002f52:	e026      	b.n	8002fa2 <InitializaionCalibrationCommand+0x2ae>
		if(i < NUM_SENSOR - 1){
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	2b2e      	cmp	r3, #46	; 0x2e
 8002f58:	dc10      	bgt.n	8002f7c <InitializaionCalibrationCommand+0x288>
			HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%lu,",refSpadCount[i]), 100);
 8002f5a:	4a21      	ldr	r2, [pc, #132]	; (8002fe0 <InitializaionCalibrationCommand+0x2ec>)
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f62:	461a      	mov	r2, r3
 8002f64:	492f      	ldr	r1, [pc, #188]	; (8003024 <InitializaionCalibrationCommand+0x330>)
 8002f66:	4818      	ldr	r0, [pc, #96]	; (8002fc8 <InitializaionCalibrationCommand+0x2d4>)
 8002f68:	f010 fbb6 	bl	80136d8 <siprintf>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	b29a      	uxth	r2, r3
 8002f70:	2364      	movs	r3, #100	; 0x64
 8002f72:	4915      	ldr	r1, [pc, #84]	; (8002fc8 <InitializaionCalibrationCommand+0x2d4>)
 8002f74:	4815      	ldr	r0, [pc, #84]	; (8002fcc <InitializaionCalibrationCommand+0x2d8>)
 8002f76:	f005 fe7d 	bl	8008c74 <HAL_UART_Transmit>
 8002f7a:	e00f      	b.n	8002f9c <InitializaionCalibrationCommand+0x2a8>
		} else {
			HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%lu};\n",refSpadCount[i]), 100);
 8002f7c:	4a18      	ldr	r2, [pc, #96]	; (8002fe0 <InitializaionCalibrationCommand+0x2ec>)
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f84:	461a      	mov	r2, r3
 8002f86:	4928      	ldr	r1, [pc, #160]	; (8003028 <InitializaionCalibrationCommand+0x334>)
 8002f88:	480f      	ldr	r0, [pc, #60]	; (8002fc8 <InitializaionCalibrationCommand+0x2d4>)
 8002f8a:	f010 fba5 	bl	80136d8 <siprintf>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	b29a      	uxth	r2, r3
 8002f92:	2364      	movs	r3, #100	; 0x64
 8002f94:	490c      	ldr	r1, [pc, #48]	; (8002fc8 <InitializaionCalibrationCommand+0x2d4>)
 8002f96:	480d      	ldr	r0, [pc, #52]	; (8002fcc <InitializaionCalibrationCommand+0x2d8>)
 8002f98:	f005 fe6c 	bl	8008c74 <HAL_UART_Transmit>
	for (int i = 0; i < NUM_SENSOR; i++){
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	613b      	str	r3, [r7, #16]
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	2b2f      	cmp	r3, #47	; 0x2f
 8002fa6:	ddd5      	ble.n	8002f54 <InitializaionCalibrationCommand+0x260>
		}
	}

	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "uint8_t isApertureSpadsHost[NUM_SENSOR]={"), 100);
 8002fa8:	4920      	ldr	r1, [pc, #128]	; (800302c <InitializaionCalibrationCommand+0x338>)
 8002faa:	4807      	ldr	r0, [pc, #28]	; (8002fc8 <InitializaionCalibrationCommand+0x2d4>)
 8002fac:	f010 fb94 	bl	80136d8 <siprintf>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	b29a      	uxth	r2, r3
 8002fb4:	2364      	movs	r3, #100	; 0x64
 8002fb6:	4904      	ldr	r1, [pc, #16]	; (8002fc8 <InitializaionCalibrationCommand+0x2d4>)
 8002fb8:	4804      	ldr	r0, [pc, #16]	; (8002fcc <InitializaionCalibrationCommand+0x2d8>)
 8002fba:	f005 fe5b 	bl	8008c74 <HAL_UART_Transmit>
	for (int i = 0; i < NUM_SENSOR; i++){
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	60fb      	str	r3, [r7, #12]
 8002fc2:	e05c      	b.n	800307e <InitializaionCalibrationCommand+0x38a>
 8002fc4:	08018b6c 	.word	0x08018b6c
 8002fc8:	20007870 	.word	0x20007870
 8002fcc:	200077e8 	.word	0x200077e8
 8002fd0:	2aaaaaab 	.word	0x2aaaaaab
 8002fd4:	20007a60 	.word	0x20007a60
 8002fd8:	2000c560 	.word	0x2000c560
 8002fdc:	200072a0 	.word	0x200072a0
 8002fe0:	20007910 	.word	0x20007910
 8002fe4:	200079d0 	.word	0x200079d0
 8002fe8:	20007a00 	.word	0x20007a00
 8002fec:	20007a30 	.word	0x20007a30
 8002ff0:	20000010 	.word	0x20000010
 8002ff4:	200000d0 	.word	0x200000d0
 8002ff8:	20000100 	.word	0x20000100
 8002ffc:	20000130 	.word	0x20000130
 8003000:	000186a0 	.word	0x000186a0
 8003004:	200072f4 	.word	0x200072f4
 8003008:	20000000 	.word	0x20000000
 800300c:	20000004 	.word	0x20000004
 8003010:	20000008 	.word	0x20000008
 8003014:	00000000 	.word	0x00000000
 8003018:	08018a68 	.word	0x08018a68
 800301c:	08018a78 	.word	0x08018a78
 8003020:	08018b84 	.word	0x08018b84
 8003024:	08018bac 	.word	0x08018bac
 8003028:	08018bb4 	.word	0x08018bb4
 800302c:	08018bbc 	.word	0x08018bbc
		if(i < NUM_SENSOR - 1){
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2b2e      	cmp	r3, #46	; 0x2e
 8003034:	dc10      	bgt.n	8003058 <InitializaionCalibrationCommand+0x364>
			HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d,",isApertureSpads[i]), 100);
 8003036:	4a4e      	ldr	r2, [pc, #312]	; (8003170 <InitializaionCalibrationCommand+0x47c>)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	4413      	add	r3, r2
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	461a      	mov	r2, r3
 8003040:	494c      	ldr	r1, [pc, #304]	; (8003174 <InitializaionCalibrationCommand+0x480>)
 8003042:	484d      	ldr	r0, [pc, #308]	; (8003178 <InitializaionCalibrationCommand+0x484>)
 8003044:	f010 fb48 	bl	80136d8 <siprintf>
 8003048:	4603      	mov	r3, r0
 800304a:	b29a      	uxth	r2, r3
 800304c:	2364      	movs	r3, #100	; 0x64
 800304e:	494a      	ldr	r1, [pc, #296]	; (8003178 <InitializaionCalibrationCommand+0x484>)
 8003050:	484a      	ldr	r0, [pc, #296]	; (800317c <InitializaionCalibrationCommand+0x488>)
 8003052:	f005 fe0f 	bl	8008c74 <HAL_UART_Transmit>
 8003056:	e00f      	b.n	8003078 <InitializaionCalibrationCommand+0x384>
		} else {
			HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d};\n",isApertureSpads[i]), 100);
 8003058:	4a45      	ldr	r2, [pc, #276]	; (8003170 <InitializaionCalibrationCommand+0x47c>)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	4413      	add	r3, r2
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	461a      	mov	r2, r3
 8003062:	4947      	ldr	r1, [pc, #284]	; (8003180 <InitializaionCalibrationCommand+0x48c>)
 8003064:	4844      	ldr	r0, [pc, #272]	; (8003178 <InitializaionCalibrationCommand+0x484>)
 8003066:	f010 fb37 	bl	80136d8 <siprintf>
 800306a:	4603      	mov	r3, r0
 800306c:	b29a      	uxth	r2, r3
 800306e:	2364      	movs	r3, #100	; 0x64
 8003070:	4941      	ldr	r1, [pc, #260]	; (8003178 <InitializaionCalibrationCommand+0x484>)
 8003072:	4842      	ldr	r0, [pc, #264]	; (800317c <InitializaionCalibrationCommand+0x488>)
 8003074:	f005 fdfe 	bl	8008c74 <HAL_UART_Transmit>
	for (int i = 0; i < NUM_SENSOR; i++){
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	3301      	adds	r3, #1
 800307c:	60fb      	str	r3, [r7, #12]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2b2f      	cmp	r3, #47	; 0x2f
 8003082:	ddd5      	ble.n	8003030 <InitializaionCalibrationCommand+0x33c>
		}
	}

	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "uint8_t VhvSettingsHost[NUM_SENSOR]={"), 100);
 8003084:	493f      	ldr	r1, [pc, #252]	; (8003184 <InitializaionCalibrationCommand+0x490>)
 8003086:	483c      	ldr	r0, [pc, #240]	; (8003178 <InitializaionCalibrationCommand+0x484>)
 8003088:	f010 fb26 	bl	80136d8 <siprintf>
 800308c:	4603      	mov	r3, r0
 800308e:	b29a      	uxth	r2, r3
 8003090:	2364      	movs	r3, #100	; 0x64
 8003092:	4939      	ldr	r1, [pc, #228]	; (8003178 <InitializaionCalibrationCommand+0x484>)
 8003094:	4839      	ldr	r0, [pc, #228]	; (800317c <InitializaionCalibrationCommand+0x488>)
 8003096:	f005 fded 	bl	8008c74 <HAL_UART_Transmit>
	for (int i = 0; i < NUM_SENSOR; i++){
 800309a:	2300      	movs	r3, #0
 800309c:	60bb      	str	r3, [r7, #8]
 800309e:	e026      	b.n	80030ee <InitializaionCalibrationCommand+0x3fa>
		if(i < NUM_SENSOR - 1){
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	2b2e      	cmp	r3, #46	; 0x2e
 80030a4:	dc10      	bgt.n	80030c8 <InitializaionCalibrationCommand+0x3d4>
			HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d,",VhvSettings[i]), 100);
 80030a6:	4a38      	ldr	r2, [pc, #224]	; (8003188 <InitializaionCalibrationCommand+0x494>)
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	4413      	add	r3, r2
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	461a      	mov	r2, r3
 80030b0:	4930      	ldr	r1, [pc, #192]	; (8003174 <InitializaionCalibrationCommand+0x480>)
 80030b2:	4831      	ldr	r0, [pc, #196]	; (8003178 <InitializaionCalibrationCommand+0x484>)
 80030b4:	f010 fb10 	bl	80136d8 <siprintf>
 80030b8:	4603      	mov	r3, r0
 80030ba:	b29a      	uxth	r2, r3
 80030bc:	2364      	movs	r3, #100	; 0x64
 80030be:	492e      	ldr	r1, [pc, #184]	; (8003178 <InitializaionCalibrationCommand+0x484>)
 80030c0:	482e      	ldr	r0, [pc, #184]	; (800317c <InitializaionCalibrationCommand+0x488>)
 80030c2:	f005 fdd7 	bl	8008c74 <HAL_UART_Transmit>
 80030c6:	e00f      	b.n	80030e8 <InitializaionCalibrationCommand+0x3f4>
		} else {
			HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d};\n",VhvSettings[i]), 100);
 80030c8:	4a2f      	ldr	r2, [pc, #188]	; (8003188 <InitializaionCalibrationCommand+0x494>)
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	4413      	add	r3, r2
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	461a      	mov	r2, r3
 80030d2:	492b      	ldr	r1, [pc, #172]	; (8003180 <InitializaionCalibrationCommand+0x48c>)
 80030d4:	4828      	ldr	r0, [pc, #160]	; (8003178 <InitializaionCalibrationCommand+0x484>)
 80030d6:	f010 faff 	bl	80136d8 <siprintf>
 80030da:	4603      	mov	r3, r0
 80030dc:	b29a      	uxth	r2, r3
 80030de:	2364      	movs	r3, #100	; 0x64
 80030e0:	4925      	ldr	r1, [pc, #148]	; (8003178 <InitializaionCalibrationCommand+0x484>)
 80030e2:	4826      	ldr	r0, [pc, #152]	; (800317c <InitializaionCalibrationCommand+0x488>)
 80030e4:	f005 fdc6 	bl	8008c74 <HAL_UART_Transmit>
	for (int i = 0; i < NUM_SENSOR; i++){
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	3301      	adds	r3, #1
 80030ec:	60bb      	str	r3, [r7, #8]
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	2b2f      	cmp	r3, #47	; 0x2f
 80030f2:	ddd5      	ble.n	80030a0 <InitializaionCalibrationCommand+0x3ac>
		}
	}

	HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "uint8_t PhaseCalHost[NUM_SENSOR]={"), 100);
 80030f4:	4925      	ldr	r1, [pc, #148]	; (800318c <InitializaionCalibrationCommand+0x498>)
 80030f6:	4820      	ldr	r0, [pc, #128]	; (8003178 <InitializaionCalibrationCommand+0x484>)
 80030f8:	f010 faee 	bl	80136d8 <siprintf>
 80030fc:	4603      	mov	r3, r0
 80030fe:	b29a      	uxth	r2, r3
 8003100:	2364      	movs	r3, #100	; 0x64
 8003102:	491d      	ldr	r1, [pc, #116]	; (8003178 <InitializaionCalibrationCommand+0x484>)
 8003104:	481d      	ldr	r0, [pc, #116]	; (800317c <InitializaionCalibrationCommand+0x488>)
 8003106:	f005 fdb5 	bl	8008c74 <HAL_UART_Transmit>
	for (int i = 0; i < NUM_SENSOR; i++){
 800310a:	2300      	movs	r3, #0
 800310c:	607b      	str	r3, [r7, #4]
 800310e:	e026      	b.n	800315e <InitializaionCalibrationCommand+0x46a>
		if(i < NUM_SENSOR - 1){
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2b2e      	cmp	r3, #46	; 0x2e
 8003114:	dc10      	bgt.n	8003138 <InitializaionCalibrationCommand+0x444>
			HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d,",PhaseCal[i]), 100);
 8003116:	4a1e      	ldr	r2, [pc, #120]	; (8003190 <InitializaionCalibrationCommand+0x49c>)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	4413      	add	r3, r2
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	461a      	mov	r2, r3
 8003120:	4914      	ldr	r1, [pc, #80]	; (8003174 <InitializaionCalibrationCommand+0x480>)
 8003122:	4815      	ldr	r0, [pc, #84]	; (8003178 <InitializaionCalibrationCommand+0x484>)
 8003124:	f010 fad8 	bl	80136d8 <siprintf>
 8003128:	4603      	mov	r3, r0
 800312a:	b29a      	uxth	r2, r3
 800312c:	2364      	movs	r3, #100	; 0x64
 800312e:	4912      	ldr	r1, [pc, #72]	; (8003178 <InitializaionCalibrationCommand+0x484>)
 8003130:	4812      	ldr	r0, [pc, #72]	; (800317c <InitializaionCalibrationCommand+0x488>)
 8003132:	f005 fd9f 	bl	8008c74 <HAL_UART_Transmit>
 8003136:	e00f      	b.n	8003158 <InitializaionCalibrationCommand+0x464>
		} else {
			HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d};\n",PhaseCal[i]), 100);
 8003138:	4a15      	ldr	r2, [pc, #84]	; (8003190 <InitializaionCalibrationCommand+0x49c>)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4413      	add	r3, r2
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	461a      	mov	r2, r3
 8003142:	490f      	ldr	r1, [pc, #60]	; (8003180 <InitializaionCalibrationCommand+0x48c>)
 8003144:	480c      	ldr	r0, [pc, #48]	; (8003178 <InitializaionCalibrationCommand+0x484>)
 8003146:	f010 fac7 	bl	80136d8 <siprintf>
 800314a:	4603      	mov	r3, r0
 800314c:	b29a      	uxth	r2, r3
 800314e:	2364      	movs	r3, #100	; 0x64
 8003150:	4909      	ldr	r1, [pc, #36]	; (8003178 <InitializaionCalibrationCommand+0x484>)
 8003152:	480a      	ldr	r0, [pc, #40]	; (800317c <InitializaionCalibrationCommand+0x488>)
 8003154:	f005 fd8e 	bl	8008c74 <HAL_UART_Transmit>
	for (int i = 0; i < NUM_SENSOR; i++){
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	3301      	adds	r3, #1
 800315c:	607b      	str	r3, [r7, #4]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2b2f      	cmp	r3, #47	; 0x2f
 8003162:	ddd5      	ble.n	8003110 <InitializaionCalibrationCommand+0x41c>
		}
	}
}
 8003164:	bf00      	nop
 8003166:	bf00      	nop
 8003168:	3718      	adds	r7, #24
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	200079d0 	.word	0x200079d0
 8003174:	08018be8 	.word	0x08018be8
 8003178:	20007870 	.word	0x20007870
 800317c:	200077e8 	.word	0x200077e8
 8003180:	08018bec 	.word	0x08018bec
 8003184:	08018bf4 	.word	0x08018bf4
 8003188:	20007a00 	.word	0x20007a00
 800318c:	08018c1c 	.word	0x08018c1c
 8003190:	20007a30 	.word	0x20007a30

08003194 <AutoI2CCommand>:

void AutoI2CCommand(){
 8003194:	b580      	push	{r7, lr}
 8003196:	b08e      	sub	sp, #56	; 0x38
 8003198:	af02      	add	r7, sp, #8

    HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "Auto Command \r\n"), 100);
 800319a:	49a1      	ldr	r1, [pc, #644]	; (8003420 <AutoI2CCommand+0x28c>)
 800319c:	48a1      	ldr	r0, [pc, #644]	; (8003424 <AutoI2CCommand+0x290>)
 800319e:	f010 fa9b 	bl	80136d8 <siprintf>
 80031a2:	4603      	mov	r3, r0
 80031a4:	b29a      	uxth	r2, r3
 80031a6:	2364      	movs	r3, #100	; 0x64
 80031a8:	499e      	ldr	r1, [pc, #632]	; (8003424 <AutoI2CCommand+0x290>)
 80031aa:	489f      	ldr	r0, [pc, #636]	; (8003428 <AutoI2CCommand+0x294>)
 80031ac:	f005 fd62 	bl	8008c74 <HAL_UART_Transmit>

    SetI2CCommand();
 80031b0:	f7fe faf0 	bl	8001794 <SetI2CCommand>
    SensorI2CCommand();
 80031b4:	f7fe f9f6 	bl	80015a4 <SensorI2CCommand>
    ResetAllDevices();
 80031b8:	f001 f9d2 	bl	8004560 <ResetAllDevices>
    setOnAllDevices();
 80031bc:	f001 fa50 	bl	8004660 <setOnAllDevices>

    float forceSensorZeroPoint = 0.0f;
 80031c0:	f04f 0300 	mov.w	r3, #0
 80031c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint32_t startTime = 0, endTime = 0;
 80031c6:	2300      	movs	r3, #0
 80031c8:	60fb      	str	r3, [r7, #12]
 80031ca:	2300      	movs	r3, #0
 80031cc:	60bb      	str	r3, [r7, #8]
    uint8_t diffTime = 0;
 80031ce:	2300      	movs	r3, #0
 80031d0:	71fb      	strb	r3, [r7, #7]

    setServoAngle(&htim2, TIM_CHANNEL_1, 0); // 초기 ?��?�� ?���?? ?��?��
 80031d2:	2200      	movs	r2, #0
 80031d4:	2100      	movs	r1, #0
 80031d6:	4895      	ldr	r0, [pc, #596]	; (800342c <AutoI2CCommand+0x298>)
 80031d8:	f000 fe5e 	bl	8003e98 <setServoAngle>

    for(int lin = 2; lin < 19; lin++){
 80031dc:	2302      	movs	r3, #2
 80031de:	62bb      	str	r3, [r7, #40]	; 0x28
 80031e0:	e114      	b.n	800340c <AutoI2CCommand+0x278>
        for(int rev = 0; rev < 72; rev++){
 80031e2:	2300      	movs	r3, #0
 80031e4:	627b      	str	r3, [r7, #36]	; 0x24
 80031e6:	e0ff      	b.n	80033e8 <AutoI2CCommand+0x254>
            for(int r = 0; r <20; r+=10){
 80031e8:	2300      	movs	r3, #0
 80031ea:	623b      	str	r3, [r7, #32]
 80031ec:	e0f2      	b.n	80033d4 <AutoI2CCommand+0x240>
            	setServoAngle(&htim2, TIM_CHANNEL_1, r); // ?��?�� ?��?��
 80031ee:	6a3b      	ldr	r3, [r7, #32]
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	461a      	mov	r2, r3
 80031f4:	2100      	movs	r1, #0
 80031f6:	488d      	ldr	r0, [pc, #564]	; (800342c <AutoI2CCommand+0x298>)
 80031f8:	f000 fe4e 	bl	8003e98 <setServoAngle>
                HAL_Delay(200);
 80031fc:	20c8      	movs	r0, #200	; 0xc8
 80031fe:	f001 fae1 	bl	80047c4 <HAL_Delay>
                int tofHitCount = 0;
 8003202:	2300      	movs	r3, #0
 8003204:	61fb      	str	r3, [r7, #28]
                while(tofHitCount < 20){
 8003206:	e0d4      	b.n	80033b2 <AutoI2CCommand+0x21e>
                    uint8_t tofcount = 0;
 8003208:	2300      	movs	r3, #0
 800320a:	76fb      	strb	r3, [r7, #27]
					if(lin ==2 && rev ==0 && r == 1){
 800320c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800320e:	2b02      	cmp	r3, #2
 8003210:	d112      	bne.n	8003238 <AutoI2CCommand+0xa4>
 8003212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003214:	2b00      	cmp	r3, #0
 8003216:	d10f      	bne.n	8003238 <AutoI2CCommand+0xa4>
 8003218:	6a3b      	ldr	r3, [r7, #32]
 800321a:	2b01      	cmp	r3, #1
 800321c:	d10c      	bne.n	8003238 <AutoI2CCommand+0xa4>
						forceSensorZeroPoint = Read_HX711();
 800321e:	f000 f91f 	bl	8003460 <Read_HX711>
 8003222:	ee07 0a90 	vmov	s15, r0
 8003226:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800322a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
						Hx711Data = 0;
 800322e:	4b80      	ldr	r3, [pc, #512]	; (8003430 <AutoI2CCommand+0x29c>)
 8003230:	f04f 0200 	mov.w	r2, #0
 8003234:	601a      	str	r2, [r3, #0]
 8003236:	e00c      	b.n	8003252 <AutoI2CCommand+0xbe>
					}else{
						Hx711Data = Read_HX711() - forceSensorZeroPoint;
 8003238:	f000 f912 	bl	8003460 <Read_HX711>
 800323c:	ee07 0a90 	vmov	s15, r0
 8003240:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003244:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003248:	ee77 7a67 	vsub.f32	s15, s14, s15
 800324c:	4b78      	ldr	r3, [pc, #480]	; (8003430 <AutoI2CCommand+0x29c>)
 800324e:	edc3 7a00 	vstr	s15, [r3]
					}
   					startTime = HAL_GetTick();
 8003252:	f001 faab 	bl	80047ac <HAL_GetTick>
 8003256:	60f8      	str	r0, [r7, #12]
   					for (int i = 0; i < NUM_SENSOR; i++) {
 8003258:	2300      	movs	r3, #0
 800325a:	617b      	str	r3, [r7, #20]
 800325c:	e06f      	b.n	800333e <AutoI2CCommand+0x1aa>
   						Dev = &vl53l0x_s[i];
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8003264:	fb02 f303 	mul.w	r3, r2, r3
 8003268:	4a72      	ldr	r2, [pc, #456]	; (8003434 <AutoI2CCommand+0x2a0>)
 800326a:	4413      	add	r3, r2
 800326c:	4a72      	ldr	r2, [pc, #456]	; (8003438 <AutoI2CCommand+0x2a4>)
 800326e:	6013      	str	r3, [r2, #0]
   						VL53L0X_PerformContinuousRangingMeasurement(Dev, &RangingData); // 1500us
 8003270:	4b71      	ldr	r3, [pc, #452]	; (8003438 <AutoI2CCommand+0x2a4>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4971      	ldr	r1, [pc, #452]	; (800343c <AutoI2CCommand+0x2a8>)
 8003276:	4618      	mov	r0, r3
 8003278:	f008 fae0 	bl	800b83c <VL53L0X_PerformContinuousRangingMeasurement>
   						if (RangingData.RangeStatus == 0) {
 800327c:	4b6f      	ldr	r3, [pc, #444]	; (800343c <AutoI2CCommand+0x2a8>)
 800327e:	7e1b      	ldrb	r3, [r3, #24]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d134      	bne.n	80032ee <AutoI2CCommand+0x15a>
   						  if (RangingData.RangeMilliMeter < 100) {
 8003284:	4b6d      	ldr	r3, [pc, #436]	; (800343c <AutoI2CCommand+0x2a8>)
 8003286:	891b      	ldrh	r3, [r3, #8]
 8003288:	2b63      	cmp	r3, #99	; 0x63
 800328a:	d830      	bhi.n	80032ee <AutoI2CCommand+0x15a>
   							  filteredValue[i] = Kalman_Estimate(&filters[i], RangingData.RangeMilliMeter);
 800328c:	697a      	ldr	r2, [r7, #20]
 800328e:	4613      	mov	r3, r2
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	4413      	add	r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	4a6a      	ldr	r2, [pc, #424]	; (8003440 <AutoI2CCommand+0x2ac>)
 8003298:	4413      	add	r3, r2
 800329a:	4a68      	ldr	r2, [pc, #416]	; (800343c <AutoI2CCommand+0x2a8>)
 800329c:	8912      	ldrh	r2, [r2, #8]
 800329e:	ee07 2a90 	vmov	s15, r2
 80032a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032a6:	eeb0 0a67 	vmov.f32	s0, s15
 80032aa:	4618      	mov	r0, r3
 80032ac:	f000 f9ec 	bl	8003688 <Kalman_Estimate>
 80032b0:	eef0 7a40 	vmov.f32	s15, s0
 80032b4:	4a63      	ldr	r2, [pc, #396]	; (8003444 <AutoI2CCommand+0x2b0>)
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	4413      	add	r3, r2
 80032bc:	edc3 7a00 	vstr	s15, [r3]
   							  filteredValue[i] -= sensorAverages[i];
 80032c0:	4a60      	ldr	r2, [pc, #384]	; (8003444 <AutoI2CCommand+0x2b0>)
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	4413      	add	r3, r2
 80032c8:	ed93 7a00 	vldr	s14, [r3]
 80032cc:	4a5e      	ldr	r2, [pc, #376]	; (8003448 <AutoI2CCommand+0x2b4>)
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	4413      	add	r3, r2
 80032d4:	edd3 7a00 	vldr	s15, [r3]
 80032d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032dc:	4a59      	ldr	r2, [pc, #356]	; (8003444 <AutoI2CCommand+0x2b0>)
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	4413      	add	r3, r2
 80032e4:	edc3 7a00 	vstr	s15, [r3]
   							  //filteredValue /= Xstd[i];
   							  tofcount++;
 80032e8:	7efb      	ldrb	r3, [r7, #27]
 80032ea:	3301      	adds	r3, #1
 80032ec:	76fb      	strb	r3, [r7, #27]
   						  }
   						}
   						if(tofcount==NUM_SENSOR){
 80032ee:	7efb      	ldrb	r3, [r7, #27]
 80032f0:	2b30      	cmp	r3, #48	; 0x30
 80032f2:	d121      	bne.n	8003338 <AutoI2CCommand+0x1a4>
   							for(int i = 0; i< NUM_SENSOR;i++){
 80032f4:	2300      	movs	r3, #0
 80032f6:	613b      	str	r3, [r7, #16]
 80032f8:	e018      	b.n	800332c <AutoI2CCommand+0x198>
   							  HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%.1f ", filteredValue[i]), 500);
 80032fa:	4a52      	ldr	r2, [pc, #328]	; (8003444 <AutoI2CCommand+0x2b0>)
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	4413      	add	r3, r2
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4618      	mov	r0, r3
 8003306:	f7fd f94f 	bl	80005a8 <__aeabi_f2d>
 800330a:	4602      	mov	r2, r0
 800330c:	460b      	mov	r3, r1
 800330e:	494f      	ldr	r1, [pc, #316]	; (800344c <AutoI2CCommand+0x2b8>)
 8003310:	4844      	ldr	r0, [pc, #272]	; (8003424 <AutoI2CCommand+0x290>)
 8003312:	f010 f9e1 	bl	80136d8 <siprintf>
 8003316:	4603      	mov	r3, r0
 8003318:	b29a      	uxth	r2, r3
 800331a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800331e:	4941      	ldr	r1, [pc, #260]	; (8003424 <AutoI2CCommand+0x290>)
 8003320:	4841      	ldr	r0, [pc, #260]	; (8003428 <AutoI2CCommand+0x294>)
 8003322:	f005 fca7 	bl	8008c74 <HAL_UART_Transmit>
   							for(int i = 0; i< NUM_SENSOR;i++){
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	3301      	adds	r3, #1
 800332a:	613b      	str	r3, [r7, #16]
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	2b2f      	cmp	r3, #47	; 0x2f
 8003330:	dde3      	ble.n	80032fa <AutoI2CCommand+0x166>
   							}
   	                        tofHitCount++;
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	3301      	adds	r3, #1
 8003336:	61fb      	str	r3, [r7, #28]
   					for (int i = 0; i < NUM_SENSOR; i++) {
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	3301      	adds	r3, #1
 800333c:	617b      	str	r3, [r7, #20]
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	2b2f      	cmp	r3, #47	; 0x2f
 8003342:	dd8c      	ble.n	800325e <AutoI2CCommand+0xca>
   						}
   					}
   					do {
   					endTime = HAL_GetTick();
 8003344:	f001 fa32 	bl	80047ac <HAL_GetTick>
 8003348:	60b8      	str	r0, [r7, #8]
   					diffTime = endTime - startTime;
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	b2da      	uxtb	r2, r3
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	b2db      	uxtb	r3, r3
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	71fb      	strb	r3, [r7, #7]
   					} while (diffTime <= TIMBUDGET);
 8003356:	79fb      	ldrb	r3, [r7, #7]
 8003358:	2b64      	cmp	r3, #100	; 0x64
 800335a:	d9f3      	bls.n	8003344 <AutoI2CCommand+0x1b0>

   					startTime = 0;
 800335c:	2300      	movs	r3, #0
 800335e:	60fb      	str	r3, [r7, #12]
   					endTime = 0;
 8003360:	2300      	movs	r3, #0
 8003362:	60bb      	str	r3, [r7, #8]
   					diffTime = 0;
 8003364:	2300      	movs	r3, #0
 8003366:	71fb      	strb	r3, [r7, #7]

   					UART_SendWeight_N(Hx711Data,-1/1600.00f,0); // Send the weight data over UART
 8003368:	4b31      	ldr	r3, [pc, #196]	; (8003430 <AutoI2CCommand+0x29c>)
 800336a:	edd3 7a00 	vldr	s15, [r3]
 800336e:	ed9f 1a38 	vldr	s2, [pc, #224]	; 8003450 <AutoI2CCommand+0x2bc>
 8003372:	eddf 0a38 	vldr	s1, [pc, #224]	; 8003454 <AutoI2CCommand+0x2c0>
 8003376:	eeb0 0a67 	vmov.f32	s0, s15
 800337a:	f000 f8c1 	bl	8003500 <UART_SendWeight_N>
   					HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, " %d %d %d\n", 8*lin, 5*rev, 2*r), 500);
 800337e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003380:	00d9      	lsls	r1, r3, #3
 8003382:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003384:	4613      	mov	r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	441a      	add	r2, r3
 800338a:	6a3b      	ldr	r3, [r7, #32]
 800338c:	005b      	lsls	r3, r3, #1
 800338e:	9300      	str	r3, [sp, #0]
 8003390:	4613      	mov	r3, r2
 8003392:	460a      	mov	r2, r1
 8003394:	4930      	ldr	r1, [pc, #192]	; (8003458 <AutoI2CCommand+0x2c4>)
 8003396:	4823      	ldr	r0, [pc, #140]	; (8003424 <AutoI2CCommand+0x290>)
 8003398:	f010 f99e 	bl	80136d8 <siprintf>
 800339c:	4603      	mov	r3, r0
 800339e:	b29a      	uxth	r2, r3
 80033a0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80033a4:	491f      	ldr	r1, [pc, #124]	; (8003424 <AutoI2CCommand+0x290>)
 80033a6:	4820      	ldr	r0, [pc, #128]	; (8003428 <AutoI2CCommand+0x294>)
 80033a8:	f005 fc64 	bl	8008c74 <HAL_UART_Transmit>

                    if (tofHitCount >= 20) {
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	2b13      	cmp	r3, #19
 80033b0:	dc04      	bgt.n	80033bc <AutoI2CCommand+0x228>
                while(tofHitCount < 20){
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	2b13      	cmp	r3, #19
 80033b6:	f77f af27 	ble.w	8003208 <AutoI2CCommand+0x74>
 80033ba:	e000      	b.n	80033be <AutoI2CCommand+0x22a>
                        break;
 80033bc:	bf00      	nop
                    }
                }
                setServoAngle(&htim2, TIM_CHANNEL_1, 0); // ?��?�� ?��치로 ?��?���??
 80033be:	2200      	movs	r2, #0
 80033c0:	2100      	movs	r1, #0
 80033c2:	481a      	ldr	r0, [pc, #104]	; (800342c <AutoI2CCommand+0x298>)
 80033c4:	f000 fd68 	bl	8003e98 <setServoAngle>
                HAL_Delay(200);
 80033c8:	20c8      	movs	r0, #200	; 0xc8
 80033ca:	f001 f9fb 	bl	80047c4 <HAL_Delay>
            for(int r = 0; r <20; r+=10){
 80033ce:	6a3b      	ldr	r3, [r7, #32]
 80033d0:	330a      	adds	r3, #10
 80033d2:	623b      	str	r3, [r7, #32]
 80033d4:	6a3b      	ldr	r3, [r7, #32]
 80033d6:	2b13      	cmp	r3, #19
 80033d8:	f77f af09 	ble.w	80031ee <AutoI2CCommand+0x5a>
            }

            stepRev(5); // ?�� 바�?? ?��?��
 80033dc:	2005      	movs	r0, #5
 80033de:	f000 fc4b 	bl	8003c78 <stepRev>
        for(int rev = 0; rev < 72; rev++){
 80033e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e4:	3301      	adds	r3, #1
 80033e6:	627b      	str	r3, [r7, #36]	; 0x24
 80033e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ea:	2b47      	cmp	r3, #71	; 0x47
 80033ec:	f77f aefc 	ble.w	80031e8 <AutoI2CCommand+0x54>
        }
        HAL_Delay(300);
 80033f0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80033f4:	f001 f9e6 	bl	80047c4 <HAL_Delay>
        stepRev(-360); // ?��?���??
 80033f8:	4818      	ldr	r0, [pc, #96]	; (800345c <AutoI2CCommand+0x2c8>)
 80033fa:	f000 fc3d 	bl	8003c78 <stepRev>
        stepLin(-8); // ?��?�� ?��?��
 80033fe:	f06f 0007 	mvn.w	r0, #7
 8003402:	f000 fca1 	bl	8003d48 <stepLin>
    for(int lin = 2; lin < 19; lin++){
 8003406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003408:	3301      	adds	r3, #1
 800340a:	62bb      	str	r3, [r7, #40]	; 0x28
 800340c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800340e:	2b12      	cmp	r3, #18
 8003410:	f77f aee7 	ble.w	80031e2 <AutoI2CCommand+0x4e>
    }
    //stepLin(144); // 마�?�?? ?��치로 ?��?��
}
 8003414:	bf00      	nop
 8003416:	bf00      	nop
 8003418:	3730      	adds	r7, #48	; 0x30
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	08018c40 	.word	0x08018c40
 8003424:	20007870 	.word	0x20007870
 8003428:	200077e8 	.word	0x200077e8
 800342c:	20007798 	.word	0x20007798
 8003430:	2000729c 	.word	0x2000729c
 8003434:	20007a60 	.word	0x20007a60
 8003438:	2000c560 	.word	0x2000c560
 800343c:	200078f4 	.word	0x200078f4
 8003440:	200072f4 	.word	0x200072f4
 8003444:	200076b4 	.word	0x200076b4
 8003448:	20007058 	.word	0x20007058
 800344c:	08018a34 	.word	0x08018a34
 8003450:	00000000 	.word	0x00000000
 8003454:	ba23d70a 	.word	0xba23d70a
 8003458:	08018c50 	.word	0x08018c50
 800345c:	fffffe98 	.word	0xfffffe98

08003460 <Read_HX711>:
  // Set the SCK pin to low
  HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_RESET);
}

int32_t Read_HX711(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
  int32_t data = 0;
 8003466:	2300      	movs	r3, #0
 8003468:	607b      	str	r3, [r7, #4]

  // Wait until the DT pin goes low
  while (HAL_GPIO_ReadPin(HX711_DT_GPIO_Port, HX711_DT_Pin) == GPIO_PIN_SET);
 800346a:	bf00      	nop
 800346c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003470:	4820      	ldr	r0, [pc, #128]	; (80034f4 <Read_HX711+0x94>)
 8003472:	f001 fe13 	bl	800509c <HAL_GPIO_ReadPin>
 8003476:	4603      	mov	r3, r0
 8003478:	2b01      	cmp	r3, #1
 800347a:	d0f7      	beq.n	800346c <Read_HX711+0xc>

  // Read the 24-bit data
  for (int i = 0; i < 24; i++)
 800347c:	2300      	movs	r3, #0
 800347e:	603b      	str	r3, [r7, #0]
 8003480:	e020      	b.n	80034c4 <Read_HX711+0x64>
  {
    // Generate a clock pulse on SCK pin
    HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_SET);
 8003482:	2201      	movs	r2, #1
 8003484:	2102      	movs	r1, #2
 8003486:	481c      	ldr	r0, [pc, #112]	; (80034f8 <Read_HX711+0x98>)
 8003488:	f001 fe20 	bl	80050cc <HAL_GPIO_WritePin>
    DelayMicroseconds(1);
 800348c:	2001      	movs	r0, #1
 800348e:	f000 f889 	bl	80035a4 <DelayMicroseconds>
    data = (data << 1);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	005b      	lsls	r3, r3, #1
 8003496:	607b      	str	r3, [r7, #4]
    if (HAL_GPIO_ReadPin(HX711_DT_GPIO_Port, HX711_DT_Pin) == GPIO_PIN_SET)
 8003498:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800349c:	4815      	ldr	r0, [pc, #84]	; (80034f4 <Read_HX711+0x94>)
 800349e:	f001 fdfd 	bl	800509c <HAL_GPIO_ReadPin>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d102      	bne.n	80034ae <Read_HX711+0x4e>
    {
      data++;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	3301      	adds	r3, #1
 80034ac:	607b      	str	r3, [r7, #4]
    }
    HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_RESET);
 80034ae:	2200      	movs	r2, #0
 80034b0:	2102      	movs	r1, #2
 80034b2:	4811      	ldr	r0, [pc, #68]	; (80034f8 <Read_HX711+0x98>)
 80034b4:	f001 fe0a 	bl	80050cc <HAL_GPIO_WritePin>
    DelayMicroseconds(1);
 80034b8:	2001      	movs	r0, #1
 80034ba:	f000 f873 	bl	80035a4 <DelayMicroseconds>
  for (int i = 0; i < 24; i++)
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	3301      	adds	r3, #1
 80034c2:	603b      	str	r3, [r7, #0]
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	2b17      	cmp	r3, #23
 80034c8:	dddb      	ble.n	8003482 <Read_HX711+0x22>
  }

  // Generate an additional 25th pulse to set the HX711 back to idle mode
  HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_SET);
 80034ca:	2201      	movs	r2, #1
 80034cc:	2102      	movs	r1, #2
 80034ce:	480a      	ldr	r0, [pc, #40]	; (80034f8 <Read_HX711+0x98>)
 80034d0:	f001 fdfc 	bl	80050cc <HAL_GPIO_WritePin>
  DelayMicroseconds(1);
 80034d4:	2001      	movs	r0, #1
 80034d6:	f000 f865 	bl	80035a4 <DelayMicroseconds>
  HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_RESET);
 80034da:	2200      	movs	r2, #0
 80034dc:	2102      	movs	r1, #2
 80034de:	4806      	ldr	r0, [pc, #24]	; (80034f8 <Read_HX711+0x98>)
 80034e0:	f001 fdf4 	bl	80050cc <HAL_GPIO_WritePin>
  DelayMicroseconds(1);
 80034e4:	2001      	movs	r0, #1
 80034e6:	f000 f85d 	bl	80035a4 <DelayMicroseconds>


  // Return the 24-bit data
  return data;
 80034ea:	687b      	ldr	r3, [r7, #4]
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3708      	adds	r7, #8
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	40020400 	.word	0x40020400
 80034f8:	40022000 	.word	0x40022000
 80034fc:	00000000 	.word	0x00000000

08003500 <UART_SendWeight_N>:
#endif
  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, data, 1000);
}

void UART_SendWeight_N(float rawData,float loadcell_slope,float loadcell_bias)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b08e      	sub	sp, #56	; 0x38
 8003504:	af00      	add	r7, sp, #0
 8003506:	ed87 0a03 	vstr	s0, [r7, #12]
 800350a:	edc7 0a02 	vstr	s1, [r7, #8]
 800350e:	ed87 1a01 	vstr	s2, [r7, #4]
  float weight = loadcell_slope * rawData  + loadcell_bias;
 8003512:	ed97 7a02 	vldr	s14, [r7, #8]
 8003516:	edd7 7a03 	vldr	s15, [r7, #12]
 800351a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800351e:	ed97 7a01 	vldr	s14, [r7, #4]
 8003522:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003526:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
  weight *=9.8;
 800352a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800352c:	f7fd f83c 	bl	80005a8 <__aeabi_f2d>
 8003530:	a31a      	add	r3, pc, #104	; (adr r3, 800359c <UART_SendWeight_N+0x9c>)
 8003532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003536:	f7fd f88f 	bl	8000658 <__aeabi_dmul>
 800353a:	4602      	mov	r2, r0
 800353c:	460b      	mov	r3, r1
 800353e:	4610      	mov	r0, r2
 8003540:	4619      	mov	r1, r3
 8003542:	f7fd fb81 	bl	8000c48 <__aeabi_d2f>
 8003546:	4603      	mov	r3, r0
 8003548:	637b      	str	r3, [r7, #52]	; 0x34
  weight /=1000;
 800354a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800354e:	eddf 6a10 	vldr	s13, [pc, #64]	; 8003590 <UART_SendWeight_N+0x90>
 8003552:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003556:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
  char buffer[32];
  int len = sprintf(buffer, "%.4f", weight);
 800355a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800355c:	f7fd f824 	bl	80005a8 <__aeabi_f2d>
 8003560:	4602      	mov	r2, r0
 8003562:	460b      	mov	r3, r1
 8003564:	f107 0010 	add.w	r0, r7, #16
 8003568:	490a      	ldr	r1, [pc, #40]	; (8003594 <UART_SendWeight_N+0x94>)
 800356a:	f010 f8b5 	bl	80136d8 <siprintf>
 800356e:	6338      	str	r0, [r7, #48]	; 0x30

  // Send the buffer content via UART
  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, len, 1000);
 8003570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003572:	b29a      	uxth	r2, r3
 8003574:	f107 0110 	add.w	r1, r7, #16
 8003578:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800357c:	4806      	ldr	r0, [pc, #24]	; (8003598 <UART_SendWeight_N+0x98>)
 800357e:	f005 fb79 	bl	8008c74 <HAL_UART_Transmit>
}
 8003582:	bf00      	nop
 8003584:	3738      	adds	r7, #56	; 0x38
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	f3af 8000 	nop.w
 8003590:	447a0000 	.word	0x447a0000
 8003594:	08018c64 	.word	0x08018c64
 8003598:	200077e8 	.word	0x200077e8
 800359c:	9999999a 	.word	0x9999999a
 80035a0:	40239999 	.word	0x40239999

080035a4 <DelayMicroseconds>:
  weight *=9.8;
  weight /=1000;
  return weight;
}
void DelayMicroseconds(uint32_t microseconds)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b085      	sub	sp, #20
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  uint32_t ticks = microseconds;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	60fb      	str	r3, [r7, #12]
  while (ticks--)
 80035b0:	e000      	b.n	80035b4 <DelayMicroseconds+0x10>
  {
    __NOP();
 80035b2:	bf00      	nop
  while (ticks--)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	1e5a      	subs	r2, r3, #1
 80035b8:	60fa      	str	r2, [r7, #12]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1f9      	bne.n	80035b2 <DelayMicroseconds+0xe>
  }
}
 80035be:	bf00      	nop
 80035c0:	bf00      	nop
 80035c2:	3714      	adds	r7, #20
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr

080035cc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;


void MX_I2C1_Init(void)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80035d0:	4b1b      	ldr	r3, [pc, #108]	; (8003640 <MX_I2C1_Init+0x74>)
 80035d2:	4a1c      	ldr	r2, [pc, #112]	; (8003644 <MX_I2C1_Init+0x78>)
 80035d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6000030D;
 80035d6:	4b1a      	ldr	r3, [pc, #104]	; (8003640 <MX_I2C1_Init+0x74>)
 80035d8:	4a1b      	ldr	r2, [pc, #108]	; (8003648 <MX_I2C1_Init+0x7c>)
 80035da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80035dc:	4b18      	ldr	r3, [pc, #96]	; (8003640 <MX_I2C1_Init+0x74>)
 80035de:	2200      	movs	r2, #0
 80035e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80035e2:	4b17      	ldr	r3, [pc, #92]	; (8003640 <MX_I2C1_Init+0x74>)
 80035e4:	2201      	movs	r2, #1
 80035e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80035e8:	4b15      	ldr	r3, [pc, #84]	; (8003640 <MX_I2C1_Init+0x74>)
 80035ea:	2200      	movs	r2, #0
 80035ec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80035ee:	4b14      	ldr	r3, [pc, #80]	; (8003640 <MX_I2C1_Init+0x74>)
 80035f0:	2200      	movs	r2, #0
 80035f2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80035f4:	4b12      	ldr	r3, [pc, #72]	; (8003640 <MX_I2C1_Init+0x74>)
 80035f6:	2200      	movs	r2, #0
 80035f8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80035fa:	4b11      	ldr	r3, [pc, #68]	; (8003640 <MX_I2C1_Init+0x74>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003600:	4b0f      	ldr	r3, [pc, #60]	; (8003640 <MX_I2C1_Init+0x74>)
 8003602:	2200      	movs	r2, #0
 8003604:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003606:	480e      	ldr	r0, [pc, #56]	; (8003640 <MX_I2C1_Init+0x74>)
 8003608:	f001 fd9e 	bl	8005148 <HAL_I2C_Init>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d001      	beq.n	8003616 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003612:	f000 fb1b 	bl	8003c4c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003616:	2100      	movs	r1, #0
 8003618:	4809      	ldr	r0, [pc, #36]	; (8003640 <MX_I2C1_Init+0x74>)
 800361a:	f002 ffef 	bl	80065fc <HAL_I2CEx_ConfigAnalogFilter>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d001      	beq.n	8003628 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003624:	f000 fb12 	bl	8003c4c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003628:	2100      	movs	r1, #0
 800362a:	4805      	ldr	r0, [pc, #20]	; (8003640 <MX_I2C1_Init+0x74>)
 800362c:	f003 f831 	bl	8006692 <HAL_I2CEx_ConfigDigitalFilter>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d001      	beq.n	800363a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003636:	f000 fb09 	bl	8003c4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800363a:	bf00      	nop
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	200072a0 	.word	0x200072a0
 8003644:	40005400 	.word	0x40005400
 8003648:	6000030d 	.word	0x6000030d

0800364c <Kalman_Init>:
float filteredValue[NUM_SENSOR]={0};
float Q = 0.001f; // Process noise covariance
float R = 0.03f;   // Measurement noise covariance
float P = 0.001f;

void Kalman_Init(KalmanFilter *kf, float Q, float R, float P, float initial_value) {
 800364c:	b480      	push	{r7}
 800364e:	b087      	sub	sp, #28
 8003650:	af00      	add	r7, sp, #0
 8003652:	6178      	str	r0, [r7, #20]
 8003654:	ed87 0a04 	vstr	s0, [r7, #16]
 8003658:	edc7 0a03 	vstr	s1, [r7, #12]
 800365c:	ed87 1a02 	vstr	s2, [r7, #8]
 8003660:	edc7 1a01 	vstr	s3, [r7, #4]
    kf->Q = Q;
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	693a      	ldr	r2, [r7, #16]
 8003668:	601a      	str	r2, [r3, #0]
    kf->R = R;
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	68fa      	ldr	r2, [r7, #12]
 800366e:	605a      	str	r2, [r3, #4]
    kf->P = P;
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	68ba      	ldr	r2, [r7, #8]
 8003674:	609a      	str	r2, [r3, #8]
    kf->X = initial_value;
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	60da      	str	r2, [r3, #12]
}
 800367c:	bf00      	nop
 800367e:	371c      	adds	r7, #28
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr

08003688 <Kalman_Estimate>:

float Kalman_Estimate(KalmanFilter *kf, float measurement) {
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	ed87 0a00 	vstr	s0, [r7]
    // Prediction step: Update the error covariance 'P'
    // This is adding process noise to our uncertainty in the estimated state.
    kf->P = kf->P + kf->Q;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	ed93 7a02 	vldr	s14, [r3, #8]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	edd3 7a00 	vldr	s15, [r3]
 80036a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	edc3 7a02 	vstr	s15, [r3, #8]

    // Update step: Compute the Kalman Gain 'K'
    // Kalman Gain balances the ratio between the prediction and the new measurement
    kf->K = kf->P / (kf->P + kf->R);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	edd3 6a02 	vldr	s13, [r3, #8]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	ed93 7a02 	vldr	s14, [r3, #8]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	edd3 7a01 	vldr	s15, [r3, #4]
 80036bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80036c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	edc3 7a04 	vstr	s15, [r3, #16]

    // Update step: Update the state estimate 'X'
    // Here we adjust our state estimate based on the new measurement,
    // scaling the "innovation" by the Kalman Gain
    kf->X = kf->X + kf->K * (measurement - kf->X);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	ed93 7a03 	vldr	s14, [r3, #12]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	edd3 6a04 	vldr	s13, [r3, #16]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	edd3 7a03 	vldr	s15, [r3, #12]
 80036dc:	ed97 6a00 	vldr	s12, [r7]
 80036e0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80036e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	edc3 7a03 	vstr	s15, [r3, #12]

    // Update step: Update the error covariance 'P'
    // We've used our observation, so we adjust our uncertainty accordingly
    kf->P = (1 - kf->K) * kf->P;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	edd3 7a04 	vldr	s15, [r3, #16]
 80036f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80036fc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	edd3 7a02 	vldr	s15, [r3, #8]
 8003706:	ee67 7a27 	vmul.f32	s15, s14, s15
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	edc3 7a02 	vstr	s15, [r3, #8]

    // Return the updated state estimate
    return kf->X;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	ee07 3a90 	vmov	s15, r3
}
 8003718:	eeb0 0a67 	vmov.f32	s0, s15
 800371c:	370c      	adds	r7, #12
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
	...

08003728 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8003728:	b480      	push	{r7}
 800372a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800372c:	f3bf 8f4f 	dsb	sy
}
 8003730:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003732:	f3bf 8f6f 	isb	sy
}
 8003736:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8003738:	4b0d      	ldr	r3, [pc, #52]	; (8003770 <SCB_EnableICache+0x48>)
 800373a:	2200      	movs	r2, #0
 800373c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8003740:	f3bf 8f4f 	dsb	sy
}
 8003744:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003746:	f3bf 8f6f 	isb	sy
}
 800374a:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800374c:	4b08      	ldr	r3, [pc, #32]	; (8003770 <SCB_EnableICache+0x48>)
 800374e:	695b      	ldr	r3, [r3, #20]
 8003750:	4a07      	ldr	r2, [pc, #28]	; (8003770 <SCB_EnableICache+0x48>)
 8003752:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003756:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8003758:	f3bf 8f4f 	dsb	sy
}
 800375c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800375e:	f3bf 8f6f 	isb	sy
}
 8003762:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8003764:	bf00      	nop
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	e000ed00 	.word	0xe000ed00

08003774 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8003774:	b480      	push	{r7}
 8003776:	b085      	sub	sp, #20
 8003778:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800377a:	4b1f      	ldr	r3, [pc, #124]	; (80037f8 <SCB_EnableDCache+0x84>)
 800377c:	2200      	movs	r2, #0
 800377e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003782:	f3bf 8f4f 	dsb	sy
}
 8003786:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8003788:	4b1b      	ldr	r3, [pc, #108]	; (80037f8 <SCB_EnableDCache+0x84>)
 800378a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800378e:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	0b5b      	lsrs	r3, r3, #13
 8003794:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003798:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	08db      	lsrs	r3, r3, #3
 800379e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037a2:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	015a      	lsls	r2, r3, #5
 80037a8:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80037ac:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80037ae:	68ba      	ldr	r2, [r7, #8]
 80037b0:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80037b2:	4911      	ldr	r1, [pc, #68]	; (80037f8 <SCB_EnableDCache+0x84>)
 80037b4:	4313      	orrs	r3, r2
 80037b6:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	1e5a      	subs	r2, r3, #1
 80037be:	60ba      	str	r2, [r7, #8]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d1ef      	bne.n	80037a4 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	1e5a      	subs	r2, r3, #1
 80037c8:	60fa      	str	r2, [r7, #12]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d1e5      	bne.n	800379a <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80037ce:	f3bf 8f4f 	dsb	sy
}
 80037d2:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80037d4:	4b08      	ldr	r3, [pc, #32]	; (80037f8 <SCB_EnableDCache+0x84>)
 80037d6:	695b      	ldr	r3, [r3, #20]
 80037d8:	4a07      	ldr	r2, [pc, #28]	; (80037f8 <SCB_EnableDCache+0x84>)
 80037da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037de:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80037e0:	f3bf 8f4f 	dsb	sy
}
 80037e4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80037e6:	f3bf 8f6f 	isb	sy
}
 80037ea:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80037ec:	bf00      	nop
 80037ee:	3714      	adds	r7, #20
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr
 80037f8:	e000ed00 	.word	0xe000ed00

080037fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8003800:	f7ff ff92 	bl	8003728 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8003804:	f7ff ffb6 	bl	8003774 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003808:	f000 ff7f 	bl	800470a <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800380c:	f000 f82c 	bl	8003868 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003810:	f000 f964 	bl	8003adc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8003814:	f000 fdd4 	bl	80043c0 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8003818:	f7ff fed8 	bl	80035cc <MX_I2C1_Init>
  MX_CRC_Init();
 800381c:	f000 f8c4 	bl	80039a8 <MX_CRC_Init>
  MX_TIM2_Init();
 8003820:	f000 f8e4 	bl	80039ec <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8003824:	f000 f88c 	bl	8003940 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 8003828:	2100      	movs	r1, #0
 800382a:	480c      	ldr	r0, [pc, #48]	; (800385c <main+0x60>)
 800382c:	f004 f940 	bl	8007ab0 <HAL_TIM_PWM_Start>

  aiInit();
 8003830:	f7fd fc12 	bl	8001058 <aiInit>
  startMsg();
 8003834:	f000 fe2a 	bl	800448c <startMsg>
  servo_angle(&htim2, TIM_CHANNEL_1, 0);
 8003838:	2200      	movs	r2, #0
 800383a:	2100      	movs	r1, #0
 800383c:	4807      	ldr	r0, [pc, #28]	; (800385c <main+0x60>)
 800383e:	f000 fadf 	bl	8003e00 <servo_angle>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
#ifdef JH
	  if(ReceiveUartMessage(&huart1, rxMsg, sizeof(rxMsg)) == HAL_OK)
 8003842:	2241      	movs	r2, #65	; 0x41
 8003844:	4906      	ldr	r1, [pc, #24]	; (8003860 <main+0x64>)
 8003846:	4807      	ldr	r0, [pc, #28]	; (8003864 <main+0x68>)
 8003848:	f000 fdea 	bl	8004420 <ReceiveUartMessage>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d1f7      	bne.n	8003842 <main+0x46>
	  {
	      ProcessCommand(rxMsg);
 8003852:	4803      	ldr	r0, [pc, #12]	; (8003860 <main+0x64>)
 8003854:	f7fd fdc0 	bl	80013d8 <ProcessCommand>
	  if(ReceiveUartMessage(&huart1, rxMsg, sizeof(rxMsg)) == HAL_OK)
 8003858:	e7f3      	b.n	8003842 <main+0x46>
 800385a:	bf00      	nop
 800385c:	20007798 	.word	0x20007798
 8003860:	200078b0 	.word	0x200078b0
 8003864:	200077e8 	.word	0x200077e8

08003868 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b094      	sub	sp, #80	; 0x50
 800386c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800386e:	f107 0320 	add.w	r3, r7, #32
 8003872:	2230      	movs	r2, #48	; 0x30
 8003874:	2100      	movs	r1, #0
 8003876:	4618      	mov	r0, r3
 8003878:	f00e ffb6 	bl	80127e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800387c:	f107 030c 	add.w	r3, r7, #12
 8003880:	2200      	movs	r2, #0
 8003882:	601a      	str	r2, [r3, #0]
 8003884:	605a      	str	r2, [r3, #4]
 8003886:	609a      	str	r2, [r3, #8]
 8003888:	60da      	str	r2, [r3, #12]
 800388a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800388c:	4b2a      	ldr	r3, [pc, #168]	; (8003938 <SystemClock_Config+0xd0>)
 800388e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003890:	4a29      	ldr	r2, [pc, #164]	; (8003938 <SystemClock_Config+0xd0>)
 8003892:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003896:	6413      	str	r3, [r2, #64]	; 0x40
 8003898:	4b27      	ldr	r3, [pc, #156]	; (8003938 <SystemClock_Config+0xd0>)
 800389a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038a0:	60bb      	str	r3, [r7, #8]
 80038a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80038a4:	4b25      	ldr	r3, [pc, #148]	; (800393c <SystemClock_Config+0xd4>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a24      	ldr	r2, [pc, #144]	; (800393c <SystemClock_Config+0xd4>)
 80038aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80038ae:	6013      	str	r3, [r2, #0]
 80038b0:	4b22      	ldr	r3, [pc, #136]	; (800393c <SystemClock_Config+0xd4>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80038b8:	607b      	str	r3, [r7, #4]
 80038ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80038bc:	2302      	movs	r3, #2
 80038be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80038c0:	2301      	movs	r3, #1
 80038c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80038c4:	2310      	movs	r3, #16
 80038c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80038c8:	2302      	movs	r3, #2
 80038ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80038cc:	2300      	movs	r3, #0
 80038ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80038d0:	2308      	movs	r3, #8
 80038d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80038d4:	23d8      	movs	r3, #216	; 0xd8
 80038d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80038d8:	2302      	movs	r3, #2
 80038da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80038dc:	2302      	movs	r3, #2
 80038de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80038e0:	f107 0320 	add.w	r3, r7, #32
 80038e4:	4618      	mov	r0, r3
 80038e6:	f002 ff71 	bl	80067cc <HAL_RCC_OscConfig>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d001      	beq.n	80038f4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80038f0:	f000 f9ac 	bl	8003c4c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80038f4:	f002 ff1a 	bl	800672c <HAL_PWREx_EnableOverDrive>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d001      	beq.n	8003902 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80038fe:	f000 f9a5 	bl	8003c4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003902:	230f      	movs	r3, #15
 8003904:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003906:	2302      	movs	r3, #2
 8003908:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800390a:	2300      	movs	r3, #0
 800390c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800390e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003912:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003914:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003918:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800391a:	f107 030c 	add.w	r3, r7, #12
 800391e:	2107      	movs	r1, #7
 8003920:	4618      	mov	r0, r3
 8003922:	f003 f9f7 	bl	8006d14 <HAL_RCC_ClockConfig>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d001      	beq.n	8003930 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800392c:	f000 f98e 	bl	8003c4c <Error_Handler>
  }
}
 8003930:	bf00      	nop
 8003932:	3750      	adds	r7, #80	; 0x50
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	40023800 	.word	0x40023800
 800393c:	40007000 	.word	0x40007000

08003940 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003944:	2200      	movs	r2, #0
 8003946:	2100      	movs	r1, #0
 8003948:	2025      	movs	r0, #37	; 0x25
 800394a:	f001 f83a 	bl	80049c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 800394e:	2025      	movs	r0, #37	; 0x25
 8003950:	f001 f853 	bl	80049fa <HAL_NVIC_EnableIRQ>
  /* I2C1_ER_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8003954:	2200      	movs	r2, #0
 8003956:	2100      	movs	r1, #0
 8003958:	2020      	movs	r0, #32
 800395a:	f001 f832 	bl	80049c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800395e:	2020      	movs	r0, #32
 8003960:	f001 f84b 	bl	80049fa <HAL_NVIC_EnableIRQ>
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003964:	2200      	movs	r2, #0
 8003966:	2100      	movs	r1, #0
 8003968:	201f      	movs	r0, #31
 800396a:	f001 f82a 	bl	80049c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800396e:	201f      	movs	r0, #31
 8003970:	f001 f843 	bl	80049fa <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003974:	2200      	movs	r2, #0
 8003976:	2100      	movs	r1, #0
 8003978:	2028      	movs	r0, #40	; 0x28
 800397a:	f001 f822 	bl	80049c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800397e:	2028      	movs	r0, #40	; 0x28
 8003980:	f001 f83b 	bl	80049fa <HAL_NVIC_EnableIRQ>
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003984:	2200      	movs	r2, #0
 8003986:	2100      	movs	r1, #0
 8003988:	2017      	movs	r0, #23
 800398a:	f001 f81a 	bl	80049c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800398e:	2017      	movs	r0, #23
 8003990:	f001 f833 	bl	80049fa <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003994:	2200      	movs	r2, #0
 8003996:	2100      	movs	r1, #0
 8003998:	201c      	movs	r0, #28
 800399a:	f001 f812 	bl	80049c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800399e:	201c      	movs	r0, #28
 80039a0:	f001 f82b 	bl	80049fa <HAL_NVIC_EnableIRQ>
}
 80039a4:	bf00      	nop
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80039ac:	4b0d      	ldr	r3, [pc, #52]	; (80039e4 <MX_CRC_Init+0x3c>)
 80039ae:	4a0e      	ldr	r2, [pc, #56]	; (80039e8 <MX_CRC_Init+0x40>)
 80039b0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80039b2:	4b0c      	ldr	r3, [pc, #48]	; (80039e4 <MX_CRC_Init+0x3c>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80039b8:	4b0a      	ldr	r3, [pc, #40]	; (80039e4 <MX_CRC_Init+0x3c>)
 80039ba:	2200      	movs	r2, #0
 80039bc:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80039be:	4b09      	ldr	r3, [pc, #36]	; (80039e4 <MX_CRC_Init+0x3c>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80039c4:	4b07      	ldr	r3, [pc, #28]	; (80039e4 <MX_CRC_Init+0x3c>)
 80039c6:	2200      	movs	r2, #0
 80039c8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80039ca:	4b06      	ldr	r3, [pc, #24]	; (80039e4 <MX_CRC_Init+0x3c>)
 80039cc:	2201      	movs	r2, #1
 80039ce:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80039d0:	4804      	ldr	r0, [pc, #16]	; (80039e4 <MX_CRC_Init+0x3c>)
 80039d2:	f001 f82d 	bl	8004a30 <HAL_CRC_Init>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d001      	beq.n	80039e0 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80039dc:	f000 f936 	bl	8003c4c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80039e0:	bf00      	nop
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	20007774 	.word	0x20007774
 80039e8:	40023000 	.word	0x40023000

080039ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b08e      	sub	sp, #56	; 0x38
 80039f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80039f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80039f6:	2200      	movs	r2, #0
 80039f8:	601a      	str	r2, [r3, #0]
 80039fa:	605a      	str	r2, [r3, #4]
 80039fc:	609a      	str	r2, [r3, #8]
 80039fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a00:	f107 031c 	add.w	r3, r7, #28
 8003a04:	2200      	movs	r2, #0
 8003a06:	601a      	str	r2, [r3, #0]
 8003a08:	605a      	str	r2, [r3, #4]
 8003a0a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003a0c:	463b      	mov	r3, r7
 8003a0e:	2200      	movs	r2, #0
 8003a10:	601a      	str	r2, [r3, #0]
 8003a12:	605a      	str	r2, [r3, #4]
 8003a14:	609a      	str	r2, [r3, #8]
 8003a16:	60da      	str	r2, [r3, #12]
 8003a18:	611a      	str	r2, [r3, #16]
 8003a1a:	615a      	str	r2, [r3, #20]
 8003a1c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003a1e:	4b2e      	ldr	r3, [pc, #184]	; (8003ad8 <MX_TIM2_Init+0xec>)
 8003a20:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003a24:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2200-1;
 8003a26:	4b2c      	ldr	r3, [pc, #176]	; (8003ad8 <MX_TIM2_Init+0xec>)
 8003a28:	f640 0297 	movw	r2, #2199	; 0x897
 8003a2c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a2e:	4b2a      	ldr	r3, [pc, #168]	; (8003ad8 <MX_TIM2_Init+0xec>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8003a34:	4b28      	ldr	r3, [pc, #160]	; (8003ad8 <MX_TIM2_Init+0xec>)
 8003a36:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003a3a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a3c:	4b26      	ldr	r3, [pc, #152]	; (8003ad8 <MX_TIM2_Init+0xec>)
 8003a3e:	2200      	movs	r2, #0
 8003a40:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a42:	4b25      	ldr	r3, [pc, #148]	; (8003ad8 <MX_TIM2_Init+0xec>)
 8003a44:	2200      	movs	r2, #0
 8003a46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003a48:	4823      	ldr	r0, [pc, #140]	; (8003ad8 <MX_TIM2_Init+0xec>)
 8003a4a:	f003 ff79 	bl	8007940 <HAL_TIM_Base_Init>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d001      	beq.n	8003a58 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8003a54:	f000 f8fa 	bl	8003c4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a5c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003a5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a62:	4619      	mov	r1, r3
 8003a64:	481c      	ldr	r0, [pc, #112]	; (8003ad8 <MX_TIM2_Init+0xec>)
 8003a66:	f004 fb51 	bl	800810c <HAL_TIM_ConfigClockSource>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d001      	beq.n	8003a74 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8003a70:	f000 f8ec 	bl	8003c4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003a74:	4818      	ldr	r0, [pc, #96]	; (8003ad8 <MX_TIM2_Init+0xec>)
 8003a76:	f003 ffba 	bl	80079ee <HAL_TIM_PWM_Init>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d001      	beq.n	8003a84 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8003a80:	f000 f8e4 	bl	8003c4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a84:	2300      	movs	r3, #0
 8003a86:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003a8c:	f107 031c 	add.w	r3, r7, #28
 8003a90:	4619      	mov	r1, r3
 8003a92:	4811      	ldr	r0, [pc, #68]	; (8003ad8 <MX_TIM2_Init+0xec>)
 8003a94:	f004 fff4 	bl	8008a80 <HAL_TIMEx_MasterConfigSynchronization>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d001      	beq.n	8003aa2 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8003a9e:	f000 f8d5 	bl	8003c4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003aa2:	2360      	movs	r3, #96	; 0x60
 8003aa4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003ab2:	463b      	mov	r3, r7
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	4807      	ldr	r0, [pc, #28]	; (8003ad8 <MX_TIM2_Init+0xec>)
 8003aba:	f004 fa13 	bl	8007ee4 <HAL_TIM_PWM_ConfigChannel>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d001      	beq.n	8003ac8 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8003ac4:	f000 f8c2 	bl	8003c4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003ac8:	4803      	ldr	r0, [pc, #12]	; (8003ad8 <MX_TIM2_Init+0xec>)
 8003aca:	f000 fb0f 	bl	80040ec <HAL_TIM_MspPostInit>

}
 8003ace:	bf00      	nop
 8003ad0:	3738      	adds	r7, #56	; 0x38
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	20007798 	.word	0x20007798

08003adc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b08a      	sub	sp, #40	; 0x28
 8003ae0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ae2:	f107 0314 	add.w	r3, r7, #20
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	601a      	str	r2, [r3, #0]
 8003aea:	605a      	str	r2, [r3, #4]
 8003aec:	609a      	str	r2, [r3, #8]
 8003aee:	60da      	str	r2, [r3, #12]
 8003af0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003af2:	4b51      	ldr	r3, [pc, #324]	; (8003c38 <MX_GPIO_Init+0x15c>)
 8003af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af6:	4a50      	ldr	r2, [pc, #320]	; (8003c38 <MX_GPIO_Init+0x15c>)
 8003af8:	f043 0302 	orr.w	r3, r3, #2
 8003afc:	6313      	str	r3, [r2, #48]	; 0x30
 8003afe:	4b4e      	ldr	r3, [pc, #312]	; (8003c38 <MX_GPIO_Init+0x15c>)
 8003b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	613b      	str	r3, [r7, #16]
 8003b08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b0a:	4b4b      	ldr	r3, [pc, #300]	; (8003c38 <MX_GPIO_Init+0x15c>)
 8003b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0e:	4a4a      	ldr	r2, [pc, #296]	; (8003c38 <MX_GPIO_Init+0x15c>)
 8003b10:	f043 0301 	orr.w	r3, r3, #1
 8003b14:	6313      	str	r3, [r2, #48]	; 0x30
 8003b16:	4b48      	ldr	r3, [pc, #288]	; (8003c38 <MX_GPIO_Init+0x15c>)
 8003b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1a:	f003 0301 	and.w	r3, r3, #1
 8003b1e:	60fb      	str	r3, [r7, #12]
 8003b20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8003b22:	4b45      	ldr	r3, [pc, #276]	; (8003c38 <MX_GPIO_Init+0x15c>)
 8003b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b26:	4a44      	ldr	r2, [pc, #272]	; (8003c38 <MX_GPIO_Init+0x15c>)
 8003b28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b2e:	4b42      	ldr	r3, [pc, #264]	; (8003c38 <MX_GPIO_Init+0x15c>)
 8003b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b36:	60bb      	str	r3, [r7, #8]
 8003b38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003b3a:	4b3f      	ldr	r3, [pc, #252]	; (8003c38 <MX_GPIO_Init+0x15c>)
 8003b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3e:	4a3e      	ldr	r2, [pc, #248]	; (8003c38 <MX_GPIO_Init+0x15c>)
 8003b40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b44:	6313      	str	r3, [r2, #48]	; 0x30
 8003b46:	4b3c      	ldr	r3, [pc, #240]	; (8003c38 <MX_GPIO_Init+0x15c>)
 8003b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b4e:	607b      	str	r3, [r7, #4]
 8003b50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003b52:	4b39      	ldr	r3, [pc, #228]	; (8003c38 <MX_GPIO_Init+0x15c>)
 8003b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b56:	4a38      	ldr	r2, [pc, #224]	; (8003c38 <MX_GPIO_Init+0x15c>)
 8003b58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b5e:	4b36      	ldr	r3, [pc, #216]	; (8003c38 <MX_GPIO_Init+0x15c>)
 8003b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b66:	603b      	str	r3, [r7, #0]
 8003b68:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	2110      	movs	r1, #16
 8003b6e:	4833      	ldr	r0, [pc, #204]	; (8003c3c <MX_GPIO_Init+0x160>)
 8003b70:	f001 faac 	bl	80050cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0, GPIO_PIN_RESET);
 8003b74:	2200      	movs	r2, #0
 8003b76:	210f      	movs	r1, #15
 8003b78:	4831      	ldr	r0, [pc, #196]	; (8003c40 <MX_GPIO_Init+0x164>)
 8003b7a:	f001 faa7 	bl	80050cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7|GPIO_PIN_6, GPIO_PIN_RESET);
 8003b7e:	2200      	movs	r2, #0
 8003b80:	21c0      	movs	r1, #192	; 0xc0
 8003b82:	4830      	ldr	r0, [pc, #192]	; (8003c44 <MX_GPIO_Init+0x168>)
 8003b84:	f001 faa2 	bl	80050cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003b88:	2310      	movs	r3, #16
 8003b8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b90:	2300      	movs	r3, #0
 8003b92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b94:	2300      	movs	r3, #0
 8003b96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b98:	f107 0314 	add.w	r3, r7, #20
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	4827      	ldr	r0, [pc, #156]	; (8003c3c <MX_GPIO_Init+0x160>)
 8003ba0:	f001 f8d0 	bl	8004d44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI3 PI2 PI1 PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0;
 8003ba4:	230f      	movs	r3, #15
 8003ba6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bac:	2300      	movs	r3, #0
 8003bae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003bb4:	f107 0314 	add.w	r3, r7, #20
 8003bb8:	4619      	mov	r1, r3
 8003bba:	4821      	ldr	r0, [pc, #132]	; (8003c40 <MX_GPIO_Init+0x164>)
 8003bbc:	f001 f8c2 	bl	8004d44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003bc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003bc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003bc6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003bca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bd0:	f107 0314 	add.w	r3, r7, #20
 8003bd4:	4619      	mov	r1, r3
 8003bd6:	481c      	ldr	r0, [pc, #112]	; (8003c48 <MX_GPIO_Init+0x16c>)
 8003bd8:	f001 f8b4 	bl	8004d44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8003bdc:	23c0      	movs	r3, #192	; 0xc0
 8003bde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003be0:	2301      	movs	r3, #1
 8003be2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003be4:	2300      	movs	r3, #0
 8003be6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003be8:	2300      	movs	r3, #0
 8003bea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003bec:	f107 0314 	add.w	r3, r7, #20
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	4814      	ldr	r0, [pc, #80]	; (8003c44 <MX_GPIO_Init+0x168>)
 8003bf4:	f001 f8a6 	bl	8004d44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003bf8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003bfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c02:	2300      	movs	r3, #0
 8003c04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c06:	f107 0314 	add.w	r3, r7, #20
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	480b      	ldr	r0, [pc, #44]	; (8003c3c <MX_GPIO_Init+0x160>)
 8003c0e:	f001 f899 	bl	8004d44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003c12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003c18:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003c1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c22:	f107 0314 	add.w	r3, r7, #20
 8003c26:	4619      	mov	r1, r3
 8003c28:	4804      	ldr	r0, [pc, #16]	; (8003c3c <MX_GPIO_Init+0x160>)
 8003c2a:	f001 f88b 	bl	8004d44 <HAL_GPIO_Init>

}
 8003c2e:	bf00      	nop
 8003c30:	3728      	adds	r7, #40	; 0x28
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	40023800 	.word	0x40023800
 8003c3c:	40020400 	.word	0x40020400
 8003c40:	40022000 	.word	0x40022000
 8003c44:	40021800 	.word	0x40021800
 8003c48:	40020000 	.word	0x40020000

08003c4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003c50:	b672      	cpsid	i
}
 8003c52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "Error\n\r"), 100);
 8003c54:	4905      	ldr	r1, [pc, #20]	; (8003c6c <Error_Handler+0x20>)
 8003c56:	4806      	ldr	r0, [pc, #24]	; (8003c70 <Error_Handler+0x24>)
 8003c58:	f00f fd3e 	bl	80136d8 <siprintf>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	b29a      	uxth	r2, r3
 8003c60:	2364      	movs	r3, #100	; 0x64
 8003c62:	4903      	ldr	r1, [pc, #12]	; (8003c70 <Error_Handler+0x24>)
 8003c64:	4803      	ldr	r0, [pc, #12]	; (8003c74 <Error_Handler+0x28>)
 8003c66:	f005 f805 	bl	8008c74 <HAL_UART_Transmit>
 8003c6a:	e7f3      	b.n	8003c54 <Error_Handler+0x8>
 8003c6c:	08018c6c 	.word	0x08018c6c
 8003c70:	20007870 	.word	0x20007870
 8003c74:	200077e8 	.word	0x200077e8

08003c78 <stepRev>:
#define GEAR 139

#define MIN_PULSE 50   // 1ms 펄스에 해당
#define MAX_PULSE 100  // 2ms 펄스에 해당

void stepRev(int ANG) {
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b086      	sub	sp, #24
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
	// ENA D2 PG7 GPIOG GPIO_PIN_6
	// CLK D3 PB4 GPIOB GPIO_PIN_4
	// DIR D4 PG7 GPIOG GPIO_PIN_7


  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);  // ENA
 8003c80:	2200      	movs	r2, #0
 8003c82:	2140      	movs	r1, #64	; 0x40
 8003c84:	482d      	ldr	r0, [pc, #180]	; (8003d3c <stepRev+0xc4>)
 8003c86:	f001 fa21 	bl	80050cc <HAL_GPIO_WritePin>

  if (ANG != 0) {
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d04c      	beq.n	8003d2a <stepRev+0xb2>
    int direction = (ANG > 0) ? 1 : -1;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	dd01      	ble.n	8003c9a <stepRev+0x22>
 8003c96:	2301      	movs	r3, #1
 8003c98:	e001      	b.n	8003c9e <stepRev+0x26>
 8003c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c9e:	613b      	str	r3, [r7, #16]
    ANG *= direction;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	693a      	ldr	r2, [r7, #16]
 8003ca4:	fb02 f303 	mul.w	r3, r2, r3
 8003ca8:	607b      	str	r3, [r7, #4]
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, direction == 1 ? GPIO_PIN_SET : GPIO_PIN_RESET); // DIR
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	bf0c      	ite	eq
 8003cb0:	2301      	moveq	r3, #1
 8003cb2:	2300      	movne	r3, #0
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	2180      	movs	r1, #128	; 0x80
 8003cba:	4820      	ldr	r0, [pc, #128]	; (8003d3c <stepRev+0xc4>)
 8003cbc:	f001 fa06 	bl	80050cc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET); // ENA
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	2140      	movs	r1, #64	; 0x40
 8003cc4:	481d      	ldr	r0, [pc, #116]	; (8003d3c <stepRev+0xc4>)
 8003cc6:	f001 fa01 	bl	80050cc <HAL_GPIO_WritePin>
    uint32_t steps = PULSE * GEAR * ANG / 360.0;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f646 4298 	movw	r2, #27800	; 0x6c98
 8003cd0:	fb02 f303 	mul.w	r3, r2, r3
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f7fc fc55 	bl	8000584 <__aeabi_i2d>
 8003cda:	f04f 0200 	mov.w	r2, #0
 8003cde:	4b18      	ldr	r3, [pc, #96]	; (8003d40 <stepRev+0xc8>)
 8003ce0:	f7fc fde4 	bl	80008ac <__aeabi_ddiv>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	4610      	mov	r0, r2
 8003cea:	4619      	mov	r1, r3
 8003cec:	f7fc ff8c 	bl	8000c08 <__aeabi_d2uiz>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	60fb      	str	r3, [r7, #12]

    for (int i = 0; i < steps; i++) {
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	617b      	str	r3, [r7, #20]
 8003cf8:	e012      	b.n	8003d20 <stepRev+0xa8>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET); //CLK
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	2110      	movs	r1, #16
 8003cfe:	4811      	ldr	r0, [pc, #68]	; (8003d44 <stepRev+0xcc>)
 8003d00:	f001 f9e4 	bl	80050cc <HAL_GPIO_WritePin>
      HAL_Delay(1); // 변경된 지연 함수 사용
 8003d04:	2001      	movs	r0, #1
 8003d06:	f000 fd5d 	bl	80047c4 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); //CLK
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	2110      	movs	r1, #16
 8003d0e:	480d      	ldr	r0, [pc, #52]	; (8003d44 <stepRev+0xcc>)
 8003d10:	f001 f9dc 	bl	80050cc <HAL_GPIO_WritePin>
      HAL_Delay(1); // 변경된 지연 함수 사용
 8003d14:	2001      	movs	r0, #1
 8003d16:	f000 fd55 	bl	80047c4 <HAL_Delay>
    for (int i = 0; i < steps; i++) {
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	3301      	adds	r3, #1
 8003d1e:	617b      	str	r3, [r7, #20]
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	68fa      	ldr	r2, [r7, #12]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d8e8      	bhi.n	8003cfa <stepRev+0x82>
  }
  else {
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET); // ENA
  }

}
 8003d28:	e004      	b.n	8003d34 <stepRev+0xbc>
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET); // ENA
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	2140      	movs	r1, #64	; 0x40
 8003d2e:	4803      	ldr	r0, [pc, #12]	; (8003d3c <stepRev+0xc4>)
 8003d30:	f001 f9cc 	bl	80050cc <HAL_GPIO_WritePin>
}
 8003d34:	bf00      	nop
 8003d36:	3718      	adds	r7, #24
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	40021800 	.word	0x40021800
 8003d40:	40768000 	.word	0x40768000
 8003d44:	40020400 	.word	0x40020400

08003d48 <stepLin>:

void stepLin(int DIST) {
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b086      	sub	sp, #24
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]

	// ENA D5 PI0 GPIOI GPIO_PIN_0
	// CLK D8 PI2 GPIOI GPIO_PIN_2
	// DIR D7 PI3 GPIOI GPIO_PIN_3

  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_SET);  // ENA
 8003d50:	2201      	movs	r2, #1
 8003d52:	2101      	movs	r1, #1
 8003d54:	4829      	ldr	r0, [pc, #164]	; (8003dfc <stepLin+0xb4>)
 8003d56:	f001 f9b9 	bl	80050cc <HAL_GPIO_WritePin>

  if (DIST != 0) {
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d03e      	beq.n	8003dde <stepLin+0x96>
    int direction = (DIST > 0) ? 1 : -1;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	dd01      	ble.n	8003d6a <stepLin+0x22>
 8003d66:	2301      	movs	r3, #1
 8003d68:	e001      	b.n	8003d6e <stepLin+0x26>
 8003d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d6e:	613b      	str	r3, [r7, #16]
    DIST *= direction;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	693a      	ldr	r2, [r7, #16]
 8003d74:	fb02 f303 	mul.w	r3, r2, r3
 8003d78:	607b      	str	r3, [r7, #4]
    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_3, direction == 1 ? GPIO_PIN_SET : GPIO_PIN_RESET); // DIR
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	bf0c      	ite	eq
 8003d80:	2301      	moveq	r3, #1
 8003d82:	2300      	movne	r3, #0
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	461a      	mov	r2, r3
 8003d88:	2108      	movs	r1, #8
 8003d8a:	481c      	ldr	r0, [pc, #112]	; (8003dfc <stepLin+0xb4>)
 8003d8c:	f001 f99e 	bl	80050cc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_RESET);  // ENA
 8003d90:	2200      	movs	r2, #0
 8003d92:	2101      	movs	r1, #1
 8003d94:	4819      	ldr	r0, [pc, #100]	; (8003dfc <stepLin+0xb4>)
 8003d96:	f001 f999 	bl	80050cc <HAL_GPIO_WritePin>
    uint32_t steps = 25*DIST;
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	4413      	add	r3, r2
 8003da2:	009a      	lsls	r2, r3, #2
 8003da4:	4413      	add	r3, r2
 8003da6:	60fb      	str	r3, [r7, #12]
	//HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "%d\n ", steps), 1000);


    for (int i = 0; i < steps; i++) {
 8003da8:	2300      	movs	r3, #0
 8003daa:	617b      	str	r3, [r7, #20]
 8003dac:	e012      	b.n	8003dd4 <stepLin+0x8c>
      HAL_GPIO_WritePin(GPIOI, GPIO_PIN_2, GPIO_PIN_SET); // CLK
 8003dae:	2201      	movs	r2, #1
 8003db0:	2104      	movs	r1, #4
 8003db2:	4812      	ldr	r0, [pc, #72]	; (8003dfc <stepLin+0xb4>)
 8003db4:	f001 f98a 	bl	80050cc <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8003db8:	2001      	movs	r0, #1
 8003dba:	f000 fd03 	bl	80047c4 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOI, GPIO_PIN_2, GPIO_PIN_RESET); // CLK
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	2104      	movs	r1, #4
 8003dc2:	480e      	ldr	r0, [pc, #56]	; (8003dfc <stepLin+0xb4>)
 8003dc4:	f001 f982 	bl	80050cc <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8003dc8:	2001      	movs	r0, #1
 8003dca:	f000 fcfb 	bl	80047c4 <HAL_Delay>
    for (int i = 0; i < steps; i++) {
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	617b      	str	r3, [r7, #20]
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	68fa      	ldr	r2, [r7, #12]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d8e8      	bhi.n	8003dae <stepLin+0x66>
 8003ddc:	e004      	b.n	8003de8 <stepLin+0xa0>
    }
  }
  else {
    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_RESET);  // ENA
 8003dde:	2200      	movs	r2, #0
 8003de0:	2101      	movs	r1, #1
 8003de2:	4806      	ldr	r0, [pc, #24]	; (8003dfc <stepLin+0xb4>)
 8003de4:	f001 f972 	bl	80050cc <HAL_GPIO_WritePin>
  }

  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_SET);  // ENA
 8003de8:	2201      	movs	r2, #1
 8003dea:	2101      	movs	r1, #1
 8003dec:	4803      	ldr	r0, [pc, #12]	; (8003dfc <stepLin+0xb4>)
 8003dee:	f001 f96d 	bl	80050cc <HAL_GPIO_WritePin>

}
 8003df2:	bf00      	nop
 8003df4:	3718      	adds	r7, #24
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	40022000 	.word	0x40022000

08003e00 <servo_angle>:

void servo_angle(TIM_HandleTypeDef *htim, uint32_t channel, int step) {
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b086      	sub	sp, #24
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	607a      	str	r2, [r7, #4]

	// 1 step is 0.8 mm

    int pulse_width = step; // 듀티 사이클 계산 (0도에서 180도까지)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	617b      	str	r3, [r7, #20]
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width); // 듀티 사이클 변경
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d104      	bne.n	8003e20 <servo_angle+0x20>
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	697a      	ldr	r2, [r7, #20]
 8003e1c:	635a      	str	r2, [r3, #52]	; 0x34
 8003e1e:	e023      	b.n	8003e68 <servo_angle+0x68>
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	2b04      	cmp	r3, #4
 8003e24:	d104      	bne.n	8003e30 <servo_angle+0x30>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	6393      	str	r3, [r2, #56]	; 0x38
 8003e2e:	e01b      	b.n	8003e68 <servo_angle+0x68>
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	2b08      	cmp	r3, #8
 8003e34:	d104      	bne.n	8003e40 <servo_angle+0x40>
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	63d3      	str	r3, [r2, #60]	; 0x3c
 8003e3e:	e013      	b.n	8003e68 <servo_angle+0x68>
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	2b0c      	cmp	r3, #12
 8003e44:	d104      	bne.n	8003e50 <servo_angle+0x50>
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	6413      	str	r3, [r2, #64]	; 0x40
 8003e4e:	e00b      	b.n	8003e68 <servo_angle+0x68>
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	2b10      	cmp	r3, #16
 8003e54:	d104      	bne.n	8003e60 <servo_angle+0x60>
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	6593      	str	r3, [r2, #88]	; 0x58
 8003e5e:	e003      	b.n	8003e68 <servo_angle+0x68>
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	65d3      	str	r3, [r2, #92]	; 0x5c
    HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "pulse_width : %d \n\r", pulse_width), 100);
 8003e68:	697a      	ldr	r2, [r7, #20]
 8003e6a:	4907      	ldr	r1, [pc, #28]	; (8003e88 <servo_angle+0x88>)
 8003e6c:	4807      	ldr	r0, [pc, #28]	; (8003e8c <servo_angle+0x8c>)
 8003e6e:	f00f fc33 	bl	80136d8 <siprintf>
 8003e72:	4603      	mov	r3, r0
 8003e74:	b29a      	uxth	r2, r3
 8003e76:	2364      	movs	r3, #100	; 0x64
 8003e78:	4904      	ldr	r1, [pc, #16]	; (8003e8c <servo_angle+0x8c>)
 8003e7a:	4805      	ldr	r0, [pc, #20]	; (8003e90 <servo_angle+0x90>)
 8003e7c:	f004 fefa 	bl	8008c74 <HAL_UART_Transmit>

}
 8003e80:	bf00      	nop
 8003e82:	3718      	adds	r7, #24
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	08018c74 	.word	0x08018c74
 8003e8c:	20007870 	.word	0x20007870
 8003e90:	200077e8 	.word	0x200077e8
 8003e94:	00000000 	.word	0x00000000

08003e98 <setServoAngle>:

void setServoAngle(TIM_HandleTypeDef *htim, uint32_t channel, uint8_t value) {
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b086      	sub	sp, #24
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	60b9      	str	r1, [r7, #8]
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	71fb      	strb	r3, [r7, #7]
    uint16_t pulse_length;
    // 각도에 따른 펄스 길이 계산
    if(value<0){value = 0;}
    if(value>180){value = 180;}
 8003ea6:	79fb      	ldrb	r3, [r7, #7]
 8003ea8:	2bb4      	cmp	r3, #180	; 0xb4
 8003eaa:	d901      	bls.n	8003eb0 <setServoAngle+0x18>
 8003eac:	23b4      	movs	r3, #180	; 0xb4
 8003eae:	71fb      	strb	r3, [r7, #7]
    pulse_length = value+22;
 8003eb0:	79fb      	ldrb	r3, [r7, #7]
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	3316      	adds	r3, #22
 8003eb6:	82fb      	strh	r3, [r7, #22]
	__HAL_TIM_SET_COMPARE(htim, channel, pulse_length); // 듀티 사이클 변경
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d104      	bne.n	8003ec8 <setServoAngle+0x30>
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	8afa      	ldrh	r2, [r7, #22]
 8003ec4:	635a      	str	r2, [r3, #52]	; 0x34
 8003ec6:	e023      	b.n	8003f10 <setServoAngle+0x78>
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	2b04      	cmp	r3, #4
 8003ecc:	d104      	bne.n	8003ed8 <setServoAngle+0x40>
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	8afb      	ldrh	r3, [r7, #22]
 8003ed4:	6393      	str	r3, [r2, #56]	; 0x38
 8003ed6:	e01b      	b.n	8003f10 <setServoAngle+0x78>
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	2b08      	cmp	r3, #8
 8003edc:	d104      	bne.n	8003ee8 <setServoAngle+0x50>
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	8afb      	ldrh	r3, [r7, #22]
 8003ee4:	63d3      	str	r3, [r2, #60]	; 0x3c
 8003ee6:	e013      	b.n	8003f10 <setServoAngle+0x78>
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	2b0c      	cmp	r3, #12
 8003eec:	d104      	bne.n	8003ef8 <setServoAngle+0x60>
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	8afb      	ldrh	r3, [r7, #22]
 8003ef4:	6413      	str	r3, [r2, #64]	; 0x40
 8003ef6:	e00b      	b.n	8003f10 <setServoAngle+0x78>
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	2b10      	cmp	r3, #16
 8003efc:	d104      	bne.n	8003f08 <setServoAngle+0x70>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	8afb      	ldrh	r3, [r7, #22]
 8003f04:	6593      	str	r3, [r2, #88]	; 0x58
 8003f06:	e003      	b.n	8003f10 <setServoAngle+0x78>
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	8afb      	ldrh	r3, [r7, #22]
 8003f0e:	65d3      	str	r3, [r2, #92]	; 0x5c
    HAL_UART_Transmit(&huart1, (uint8_t*)txMsg, sprintf((char*)txMsg, "pulse_length : %2f \n\r", value*0.94), 100);
 8003f10:	79fb      	ldrb	r3, [r7, #7]
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7fc fb36 	bl	8000584 <__aeabi_i2d>
 8003f18:	a30e      	add	r3, pc, #56	; (adr r3, 8003f54 <setServoAngle+0xbc>)
 8003f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f1e:	f7fc fb9b 	bl	8000658 <__aeabi_dmul>
 8003f22:	4602      	mov	r2, r0
 8003f24:	460b      	mov	r3, r1
 8003f26:	4908      	ldr	r1, [pc, #32]	; (8003f48 <setServoAngle+0xb0>)
 8003f28:	4808      	ldr	r0, [pc, #32]	; (8003f4c <setServoAngle+0xb4>)
 8003f2a:	f00f fbd5 	bl	80136d8 <siprintf>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	b29a      	uxth	r2, r3
 8003f32:	2364      	movs	r3, #100	; 0x64
 8003f34:	4905      	ldr	r1, [pc, #20]	; (8003f4c <setServoAngle+0xb4>)
 8003f36:	4806      	ldr	r0, [pc, #24]	; (8003f50 <setServoAngle+0xb8>)
 8003f38:	f004 fe9c 	bl	8008c74 <HAL_UART_Transmit>

}
 8003f3c:	bf00      	nop
 8003f3e:	3718      	adds	r7, #24
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	f3af 8000 	nop.w
 8003f48:	08018c88 	.word	0x08018c88
 8003f4c:	20007870 	.word	0x20007870
 8003f50:	200077e8 	.word	0x200077e8
 8003f54:	e147ae14 	.word	0xe147ae14
 8003f58:	3fee147a 	.word	0x3fee147a

08003f5c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003f62:	4b12      	ldr	r3, [pc, #72]	; (8003fac <HAL_MspInit+0x50>)
 8003f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f66:	4a11      	ldr	r2, [pc, #68]	; (8003fac <HAL_MspInit+0x50>)
 8003f68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f6c:	6413      	str	r3, [r2, #64]	; 0x40
 8003f6e:	4b0f      	ldr	r3, [pc, #60]	; (8003fac <HAL_MspInit+0x50>)
 8003f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f76:	607b      	str	r3, [r7, #4]
 8003f78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f7a:	4b0c      	ldr	r3, [pc, #48]	; (8003fac <HAL_MspInit+0x50>)
 8003f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f7e:	4a0b      	ldr	r2, [pc, #44]	; (8003fac <HAL_MspInit+0x50>)
 8003f80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f84:	6453      	str	r3, [r2, #68]	; 0x44
 8003f86:	4b09      	ldr	r3, [pc, #36]	; (8003fac <HAL_MspInit+0x50>)
 8003f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f8e:	603b      	str	r3, [r7, #0]
 8003f90:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8003f92:	2200      	movs	r2, #0
 8003f94:	2100      	movs	r1, #0
 8003f96:	2005      	movs	r0, #5
 8003f98:	f000 fd13 	bl	80049c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8003f9c:	2005      	movs	r0, #5
 8003f9e:	f000 fd2c 	bl	80049fa <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003fa2:	bf00      	nop
 8003fa4:	3708      	adds	r7, #8
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	40023800 	.word	0x40023800

08003fb0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b085      	sub	sp, #20
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a0a      	ldr	r2, [pc, #40]	; (8003fe8 <HAL_CRC_MspInit+0x38>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d10b      	bne.n	8003fda <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8003fc2:	4b0a      	ldr	r3, [pc, #40]	; (8003fec <HAL_CRC_MspInit+0x3c>)
 8003fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc6:	4a09      	ldr	r2, [pc, #36]	; (8003fec <HAL_CRC_MspInit+0x3c>)
 8003fc8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8003fce:	4b07      	ldr	r3, [pc, #28]	; (8003fec <HAL_CRC_MspInit+0x3c>)
 8003fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fd6:	60fb      	str	r3, [r7, #12]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8003fda:	bf00      	nop
 8003fdc:	3714      	adds	r7, #20
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr
 8003fe6:	bf00      	nop
 8003fe8:	40023000 	.word	0x40023000
 8003fec:	40023800 	.word	0x40023800

08003ff0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b0aa      	sub	sp, #168	; 0xa8
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ff8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	601a      	str	r2, [r3, #0]
 8004000:	605a      	str	r2, [r3, #4]
 8004002:	609a      	str	r2, [r3, #8]
 8004004:	60da      	str	r2, [r3, #12]
 8004006:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004008:	f107 0310 	add.w	r3, r7, #16
 800400c:	2284      	movs	r2, #132	; 0x84
 800400e:	2100      	movs	r1, #0
 8004010:	4618      	mov	r0, r3
 8004012:	f00e fbe9 	bl	80127e8 <memset>
  if(hi2c->Instance==I2C1)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a22      	ldr	r2, [pc, #136]	; (80040a4 <HAL_I2C_MspInit+0xb4>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d13c      	bne.n	800409a <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004020:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004024:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004026:	2300      	movs	r3, #0
 8004028:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800402a:	f107 0310 	add.w	r3, r7, #16
 800402e:	4618      	mov	r0, r3
 8004030:	f003 f896 	bl	8007160 <HAL_RCCEx_PeriphCLKConfig>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d001      	beq.n	800403e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800403a:	f7ff fe07 	bl	8003c4c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800403e:	4b1a      	ldr	r3, [pc, #104]	; (80040a8 <HAL_I2C_MspInit+0xb8>)
 8004040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004042:	4a19      	ldr	r2, [pc, #100]	; (80040a8 <HAL_I2C_MspInit+0xb8>)
 8004044:	f043 0302 	orr.w	r3, r3, #2
 8004048:	6313      	str	r3, [r2, #48]	; 0x30
 800404a:	4b17      	ldr	r3, [pc, #92]	; (80040a8 <HAL_I2C_MspInit+0xb8>)
 800404c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404e:	f003 0302 	and.w	r3, r3, #2
 8004052:	60fb      	str	r3, [r7, #12]
 8004054:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004056:	f44f 7340 	mov.w	r3, #768	; 0x300
 800405a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800405e:	2312      	movs	r3, #18
 8004060:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004064:	2300      	movs	r3, #0
 8004066:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800406a:	2303      	movs	r3, #3
 800406c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004070:	2304      	movs	r3, #4
 8004072:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004076:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800407a:	4619      	mov	r1, r3
 800407c:	480b      	ldr	r0, [pc, #44]	; (80040ac <HAL_I2C_MspInit+0xbc>)
 800407e:	f000 fe61 	bl	8004d44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004082:	4b09      	ldr	r3, [pc, #36]	; (80040a8 <HAL_I2C_MspInit+0xb8>)
 8004084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004086:	4a08      	ldr	r2, [pc, #32]	; (80040a8 <HAL_I2C_MspInit+0xb8>)
 8004088:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800408c:	6413      	str	r3, [r2, #64]	; 0x40
 800408e:	4b06      	ldr	r3, [pc, #24]	; (80040a8 <HAL_I2C_MspInit+0xb8>)
 8004090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004092:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004096:	60bb      	str	r3, [r7, #8]
 8004098:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800409a:	bf00      	nop
 800409c:	37a8      	adds	r7, #168	; 0xa8
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	40005400 	.word	0x40005400
 80040a8:	40023800 	.word	0x40023800
 80040ac:	40020400 	.word	0x40020400

080040b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b085      	sub	sp, #20
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040c0:	d10b      	bne.n	80040da <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80040c2:	4b09      	ldr	r3, [pc, #36]	; (80040e8 <HAL_TIM_Base_MspInit+0x38>)
 80040c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c6:	4a08      	ldr	r2, [pc, #32]	; (80040e8 <HAL_TIM_Base_MspInit+0x38>)
 80040c8:	f043 0301 	orr.w	r3, r3, #1
 80040cc:	6413      	str	r3, [r2, #64]	; 0x40
 80040ce:	4b06      	ldr	r3, [pc, #24]	; (80040e8 <HAL_TIM_Base_MspInit+0x38>)
 80040d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d2:	f003 0301 	and.w	r3, r3, #1
 80040d6:	60fb      	str	r3, [r7, #12]
 80040d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80040da:	bf00      	nop
 80040dc:	3714      	adds	r7, #20
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	40023800 	.word	0x40023800

080040ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b088      	sub	sp, #32
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040f4:	f107 030c 	add.w	r3, r7, #12
 80040f8:	2200      	movs	r2, #0
 80040fa:	601a      	str	r2, [r3, #0]
 80040fc:	605a      	str	r2, [r3, #4]
 80040fe:	609a      	str	r2, [r3, #8]
 8004100:	60da      	str	r2, [r3, #12]
 8004102:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800410c:	d11c      	bne.n	8004148 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800410e:	4b10      	ldr	r3, [pc, #64]	; (8004150 <HAL_TIM_MspPostInit+0x64>)
 8004110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004112:	4a0f      	ldr	r2, [pc, #60]	; (8004150 <HAL_TIM_MspPostInit+0x64>)
 8004114:	f043 0301 	orr.w	r3, r3, #1
 8004118:	6313      	str	r3, [r2, #48]	; 0x30
 800411a:	4b0d      	ldr	r3, [pc, #52]	; (8004150 <HAL_TIM_MspPostInit+0x64>)
 800411c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800411e:	f003 0301 	and.w	r3, r3, #1
 8004122:	60bb      	str	r3, [r7, #8]
 8004124:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004126:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800412a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800412c:	2302      	movs	r3, #2
 800412e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004130:	2300      	movs	r3, #0
 8004132:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004134:	2300      	movs	r3, #0
 8004136:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004138:	2301      	movs	r3, #1
 800413a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800413c:	f107 030c 	add.w	r3, r7, #12
 8004140:	4619      	mov	r1, r3
 8004142:	4804      	ldr	r0, [pc, #16]	; (8004154 <HAL_TIM_MspPostInit+0x68>)
 8004144:	f000 fdfe 	bl	8004d44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8004148:	bf00      	nop
 800414a:	3720      	adds	r7, #32
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	40023800 	.word	0x40023800
 8004154:	40020000 	.word	0x40020000

08004158 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b0ac      	sub	sp, #176	; 0xb0
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004160:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004164:	2200      	movs	r2, #0
 8004166:	601a      	str	r2, [r3, #0]
 8004168:	605a      	str	r2, [r3, #4]
 800416a:	609a      	str	r2, [r3, #8]
 800416c:	60da      	str	r2, [r3, #12]
 800416e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004170:	f107 0318 	add.w	r3, r7, #24
 8004174:	2284      	movs	r2, #132	; 0x84
 8004176:	2100      	movs	r1, #0
 8004178:	4618      	mov	r0, r3
 800417a:	f00e fb35 	bl	80127e8 <memset>
  if(huart->Instance==USART1)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a32      	ldr	r2, [pc, #200]	; (800424c <HAL_UART_MspInit+0xf4>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d15c      	bne.n	8004242 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004188:	2340      	movs	r3, #64	; 0x40
 800418a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800418c:	2300      	movs	r3, #0
 800418e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004190:	f107 0318 	add.w	r3, r7, #24
 8004194:	4618      	mov	r0, r3
 8004196:	f002 ffe3 	bl	8007160 <HAL_RCCEx_PeriphCLKConfig>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d001      	beq.n	80041a4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80041a0:	f7ff fd54 	bl	8003c4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80041a4:	4b2a      	ldr	r3, [pc, #168]	; (8004250 <HAL_UART_MspInit+0xf8>)
 80041a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041a8:	4a29      	ldr	r2, [pc, #164]	; (8004250 <HAL_UART_MspInit+0xf8>)
 80041aa:	f043 0310 	orr.w	r3, r3, #16
 80041ae:	6453      	str	r3, [r2, #68]	; 0x44
 80041b0:	4b27      	ldr	r3, [pc, #156]	; (8004250 <HAL_UART_MspInit+0xf8>)
 80041b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b4:	f003 0310 	and.w	r3, r3, #16
 80041b8:	617b      	str	r3, [r7, #20]
 80041ba:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041bc:	4b24      	ldr	r3, [pc, #144]	; (8004250 <HAL_UART_MspInit+0xf8>)
 80041be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c0:	4a23      	ldr	r2, [pc, #140]	; (8004250 <HAL_UART_MspInit+0xf8>)
 80041c2:	f043 0302 	orr.w	r3, r3, #2
 80041c6:	6313      	str	r3, [r2, #48]	; 0x30
 80041c8:	4b21      	ldr	r3, [pc, #132]	; (8004250 <HAL_UART_MspInit+0xf8>)
 80041ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041cc:	f003 0302 	and.w	r3, r3, #2
 80041d0:	613b      	str	r3, [r7, #16]
 80041d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041d4:	4b1e      	ldr	r3, [pc, #120]	; (8004250 <HAL_UART_MspInit+0xf8>)
 80041d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d8:	4a1d      	ldr	r2, [pc, #116]	; (8004250 <HAL_UART_MspInit+0xf8>)
 80041da:	f043 0301 	orr.w	r3, r3, #1
 80041de:	6313      	str	r3, [r2, #48]	; 0x30
 80041e0:	4b1b      	ldr	r3, [pc, #108]	; (8004250 <HAL_UART_MspInit+0xf8>)
 80041e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e4:	f003 0301 	and.w	r3, r3, #1
 80041e8:	60fb      	str	r3, [r7, #12]
 80041ea:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80041ec:	2380      	movs	r3, #128	; 0x80
 80041ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041f2:	2302      	movs	r3, #2
 80041f4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041f8:	2300      	movs	r3, #0
 80041fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041fe:	2303      	movs	r3, #3
 8004200:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004204:	2307      	movs	r3, #7
 8004206:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800420a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800420e:	4619      	mov	r1, r3
 8004210:	4810      	ldr	r0, [pc, #64]	; (8004254 <HAL_UART_MspInit+0xfc>)
 8004212:	f000 fd97 	bl	8004d44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004216:	f44f 7300 	mov.w	r3, #512	; 0x200
 800421a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800421e:	2302      	movs	r3, #2
 8004220:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004224:	2300      	movs	r3, #0
 8004226:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800422a:	2303      	movs	r3, #3
 800422c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004230:	2307      	movs	r3, #7
 8004232:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004236:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800423a:	4619      	mov	r1, r3
 800423c:	4806      	ldr	r0, [pc, #24]	; (8004258 <HAL_UART_MspInit+0x100>)
 800423e:	f000 fd81 	bl	8004d44 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004242:	bf00      	nop
 8004244:	37b0      	adds	r7, #176	; 0xb0
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	40011000 	.word	0x40011000
 8004250:	40023800 	.word	0x40023800
 8004254:	40020400 	.word	0x40020400
 8004258:	40020000 	.word	0x40020000

0800425c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800425c:	b480      	push	{r7}
 800425e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004260:	e7fe      	b.n	8004260 <NMI_Handler+0x4>

08004262 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004262:	b480      	push	{r7}
 8004264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004266:	e7fe      	b.n	8004266 <HardFault_Handler+0x4>

08004268 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004268:	b480      	push	{r7}
 800426a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800426c:	e7fe      	b.n	800426c <MemManage_Handler+0x4>

0800426e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800426e:	b480      	push	{r7}
 8004270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004272:	e7fe      	b.n	8004272 <BusFault_Handler+0x4>

08004274 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004274:	b480      	push	{r7}
 8004276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004278:	e7fe      	b.n	8004278 <UsageFault_Handler+0x4>

0800427a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800427a:	b480      	push	{r7}
 800427c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800427e:	bf00      	nop
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr

08004288 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004288:	b480      	push	{r7}
 800428a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800428c:	bf00      	nop
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr

08004296 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004296:	b480      	push	{r7}
 8004298:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800429a:	bf00      	nop
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr

080042a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80042a8:	f000 fa6c 	bl	8004784 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80042ac:	bf00      	nop
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80042b0:	b480      	push	{r7}
 80042b2:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80042b4:	bf00      	nop
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr

080042be <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80042be:	b580      	push	{r7, lr}
 80042c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80042c2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80042c6:	f000 ff1b 	bl	8005100 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80042ca:	bf00      	nop
 80042cc:	bd80      	pop	{r7, pc}
	...

080042d0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80042d4:	4802      	ldr	r0, [pc, #8]	; (80042e0 <TIM2_IRQHandler+0x10>)
 80042d6:	f003 fce5 	bl	8007ca4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80042da:	bf00      	nop
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	20007798 	.word	0x20007798

080042e4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80042e8:	4802      	ldr	r0, [pc, #8]	; (80042f4 <I2C1_EV_IRQHandler+0x10>)
 80042ea:	f001 f9a7 	bl	800563c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80042ee:	bf00      	nop
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	200072a0 	.word	0x200072a0

080042f8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80042fc:	4802      	ldr	r0, [pc, #8]	; (8004308 <I2C1_ER_IRQHandler+0x10>)
 80042fe:	f001 f9b7 	bl	8005670 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8004302:	bf00      	nop
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	200072a0 	.word	0x200072a0

0800430c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004310:	4802      	ldr	r0, [pc, #8]	; (800431c <USART1_IRQHandler+0x10>)
 8004312:	f004 fdf7 	bl	8008f04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004316:	bf00      	nop
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	200077e8 	.word	0x200077e8

08004320 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8004324:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004328:	f000 feea 	bl	8005100 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800432c:	bf00      	nop
 800432e:	bd80      	pop	{r7, pc}

08004330 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b086      	sub	sp, #24
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004338:	4a14      	ldr	r2, [pc, #80]	; (800438c <_sbrk+0x5c>)
 800433a:	4b15      	ldr	r3, [pc, #84]	; (8004390 <_sbrk+0x60>)
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004344:	4b13      	ldr	r3, [pc, #76]	; (8004394 <_sbrk+0x64>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d102      	bne.n	8004352 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800434c:	4b11      	ldr	r3, [pc, #68]	; (8004394 <_sbrk+0x64>)
 800434e:	4a12      	ldr	r2, [pc, #72]	; (8004398 <_sbrk+0x68>)
 8004350:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004352:	4b10      	ldr	r3, [pc, #64]	; (8004394 <_sbrk+0x64>)
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4413      	add	r3, r2
 800435a:	693a      	ldr	r2, [r7, #16]
 800435c:	429a      	cmp	r2, r3
 800435e:	d207      	bcs.n	8004370 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004360:	f00e fa02 	bl	8012768 <__errno>
 8004364:	4603      	mov	r3, r0
 8004366:	220c      	movs	r2, #12
 8004368:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800436a:	f04f 33ff 	mov.w	r3, #4294967295
 800436e:	e009      	b.n	8004384 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004370:	4b08      	ldr	r3, [pc, #32]	; (8004394 <_sbrk+0x64>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004376:	4b07      	ldr	r3, [pc, #28]	; (8004394 <_sbrk+0x64>)
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4413      	add	r3, r2
 800437e:	4a05      	ldr	r2, [pc, #20]	; (8004394 <_sbrk+0x64>)
 8004380:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004382:	68fb      	ldr	r3, [r7, #12]
}
 8004384:	4618      	mov	r0, r3
 8004386:	3718      	adds	r7, #24
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}
 800438c:	20050000 	.word	0x20050000
 8004390:	00000800 	.word	0x00000800
 8004394:	200077e4 	.word	0x200077e4
 8004398:	2000c678 	.word	0x2000c678

0800439c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800439c:	b480      	push	{r7}
 800439e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80043a0:	4b06      	ldr	r3, [pc, #24]	; (80043bc <SystemInit+0x20>)
 80043a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043a6:	4a05      	ldr	r2, [pc, #20]	; (80043bc <SystemInit+0x20>)
 80043a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80043ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80043b0:	bf00      	nop
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr
 80043ba:	bf00      	nop
 80043bc:	e000ed00 	.word	0xe000ed00

080043c0 <MX_USART1_UART_Init>:
uint8_t txMsg[64];
uint8_t rxMsg[65];


void MX_USART1_UART_Init(void)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80043c4:	4b14      	ldr	r3, [pc, #80]	; (8004418 <MX_USART1_UART_Init+0x58>)
 80043c6:	4a15      	ldr	r2, [pc, #84]	; (800441c <MX_USART1_UART_Init+0x5c>)
 80043c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80043ca:	4b13      	ldr	r3, [pc, #76]	; (8004418 <MX_USART1_UART_Init+0x58>)
 80043cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80043d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80043d2:	4b11      	ldr	r3, [pc, #68]	; (8004418 <MX_USART1_UART_Init+0x58>)
 80043d4:	2200      	movs	r2, #0
 80043d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80043d8:	4b0f      	ldr	r3, [pc, #60]	; (8004418 <MX_USART1_UART_Init+0x58>)
 80043da:	2200      	movs	r2, #0
 80043dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80043de:	4b0e      	ldr	r3, [pc, #56]	; (8004418 <MX_USART1_UART_Init+0x58>)
 80043e0:	2200      	movs	r2, #0
 80043e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80043e4:	4b0c      	ldr	r3, [pc, #48]	; (8004418 <MX_USART1_UART_Init+0x58>)
 80043e6:	220c      	movs	r2, #12
 80043e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80043ea:	4b0b      	ldr	r3, [pc, #44]	; (8004418 <MX_USART1_UART_Init+0x58>)
 80043ec:	2200      	movs	r2, #0
 80043ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80043f0:	4b09      	ldr	r3, [pc, #36]	; (8004418 <MX_USART1_UART_Init+0x58>)
 80043f2:	2200      	movs	r2, #0
 80043f4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80043f6:	4b08      	ldr	r3, [pc, #32]	; (8004418 <MX_USART1_UART_Init+0x58>)
 80043f8:	2200      	movs	r2, #0
 80043fa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80043fc:	4b06      	ldr	r3, [pc, #24]	; (8004418 <MX_USART1_UART_Init+0x58>)
 80043fe:	2200      	movs	r2, #0
 8004400:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004402:	4805      	ldr	r0, [pc, #20]	; (8004418 <MX_USART1_UART_Init+0x58>)
 8004404:	f004 fbe8 	bl	8008bd8 <HAL_UART_Init>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d001      	beq.n	8004412 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800440e:	f7ff fc1d 	bl	8003c4c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004412:	bf00      	nop
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	200077e8 	.word	0x200077e8
 800441c:	40011000 	.word	0x40011000

08004420 <ReceiveUartMessage>:


HAL_StatusTypeDef ReceiveUartMessage(UART_HandleTypeDef *huart, uint8_t *buffer, uint16_t size)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b086      	sub	sp, #24
 8004424:	af00      	add	r7, sp, #0
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	60b9      	str	r1, [r7, #8]
 800442a:	4613      	mov	r3, r2
 800442c:	80fb      	strh	r3, [r7, #6]
    uint8_t receivedByte;
    uint16_t rxBufferIndex = 0;
 800442e:	2300      	movs	r3, #0
 8004430:	82fb      	strh	r3, [r7, #22]
    while(1)
    {
        if(HAL_UART_Receive(huart, &receivedByte, 1, 1000) == HAL_OK)
 8004432:	f107 0115 	add.w	r1, r7, #21
 8004436:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800443a:	2201      	movs	r2, #1
 800443c:	68f8      	ldr	r0, [r7, #12]
 800443e:	f004 fc9c 	bl	8008d7a <HAL_UART_Receive>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d1f4      	bne.n	8004432 <ReceiveUartMessage+0x12>
        {
            if(receivedByte == '\n') // 종료 문자 감지
 8004448:	7d7b      	ldrb	r3, [r7, #21]
 800444a:	2b0a      	cmp	r3, #10
 800444c:	d106      	bne.n	800445c <ReceiveUartMessage+0x3c>
            {
                buffer[rxBufferIndex] = '\0'; // 문자열의 끝을 표시
 800444e:	8afb      	ldrh	r3, [r7, #22]
 8004450:	68ba      	ldr	r2, [r7, #8]
 8004452:	4413      	add	r3, r2
 8004454:	2200      	movs	r2, #0
 8004456:	701a      	strb	r2, [r3, #0]
                return HAL_OK;
 8004458:	2300      	movs	r3, #0
 800445a:	e012      	b.n	8004482 <ReceiveUartMessage+0x62>
            }
            else
            {
                buffer[rxBufferIndex] = receivedByte; // 문자 저장
 800445c:	8afb      	ldrh	r3, [r7, #22]
 800445e:	68ba      	ldr	r2, [r7, #8]
 8004460:	4413      	add	r3, r2
 8004462:	7d7a      	ldrb	r2, [r7, #21]
 8004464:	701a      	strb	r2, [r3, #0]
                rxBufferIndex++;
 8004466:	8afb      	ldrh	r3, [r7, #22]
 8004468:	3301      	adds	r3, #1
 800446a:	82fb      	strh	r3, [r7, #22]
                if(rxBufferIndex >= size) // 버퍼 초과 방지
 800446c:	8afa      	ldrh	r2, [r7, #22]
 800446e:	88fb      	ldrh	r3, [r7, #6]
 8004470:	429a      	cmp	r2, r3
 8004472:	d3de      	bcc.n	8004432 <ReceiveUartMessage+0x12>
                {
                    buffer[rxBufferIndex - 1] = '\0'; // 문자열의 끝을 표시
 8004474:	8afb      	ldrh	r3, [r7, #22]
 8004476:	3b01      	subs	r3, #1
 8004478:	68ba      	ldr	r2, [r7, #8]
 800447a:	4413      	add	r3, r2
 800447c:	2200      	movs	r2, #0
 800447e:	701a      	strb	r2, [r3, #0]
                    return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
                }
            }
        }
    }
}
 8004482:	4618      	mov	r0, r3
 8004484:	3718      	adds	r7, #24
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
	...

0800448c <startMsg>:

void startMsg(){
 800448c:	b580      	push	{r7, lr}
 800448e:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "--------------------------------------------------------------\n"), 100);
 8004490:	492c      	ldr	r1, [pc, #176]	; (8004544 <startMsg+0xb8>)
 8004492:	482d      	ldr	r0, [pc, #180]	; (8004548 <startMsg+0xbc>)
 8004494:	f00f f920 	bl	80136d8 <siprintf>
 8004498:	4603      	mov	r3, r0
 800449a:	b29a      	uxth	r2, r3
 800449c:	2364      	movs	r3, #100	; 0x64
 800449e:	492a      	ldr	r1, [pc, #168]	; (8004548 <startMsg+0xbc>)
 80044a0:	482a      	ldr	r0, [pc, #168]	; (800454c <startMsg+0xc0>)
 80044a2:	f004 fbe7 	bl	8008c74 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "--------------------------------------------------------------\n"), 100);
 80044a6:	4927      	ldr	r1, [pc, #156]	; (8004544 <startMsg+0xb8>)
 80044a8:	4827      	ldr	r0, [pc, #156]	; (8004548 <startMsg+0xbc>)
 80044aa:	f00f f915 	bl	80136d8 <siprintf>
 80044ae:	4603      	mov	r3, r0
 80044b0:	b29a      	uxth	r2, r3
 80044b2:	2364      	movs	r3, #100	; 0x64
 80044b4:	4924      	ldr	r1, [pc, #144]	; (8004548 <startMsg+0xbc>)
 80044b6:	4825      	ldr	r0, [pc, #148]	; (800454c <startMsg+0xc0>)
 80044b8:	f004 fbdc 	bl	8008c74 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "----------- AI Inference for TACTS made by JaeHyeong----------\n"), 100);
 80044bc:	4924      	ldr	r1, [pc, #144]	; (8004550 <startMsg+0xc4>)
 80044be:	4822      	ldr	r0, [pc, #136]	; (8004548 <startMsg+0xbc>)
 80044c0:	f00f f90a 	bl	80136d8 <siprintf>
 80044c4:	4603      	mov	r3, r0
 80044c6:	b29a      	uxth	r2, r3
 80044c8:	2364      	movs	r3, #100	; 0x64
 80044ca:	491f      	ldr	r1, [pc, #124]	; (8004548 <startMsg+0xbc>)
 80044cc:	481f      	ldr	r0, [pc, #124]	; (800454c <startMsg+0xc0>)
 80044ce:	f004 fbd1 	bl	8008c74 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "----------------- 1 : TOF sensor array -----------------------\n"), 100);
 80044d2:	4920      	ldr	r1, [pc, #128]	; (8004554 <startMsg+0xc8>)
 80044d4:	481c      	ldr	r0, [pc, #112]	; (8004548 <startMsg+0xbc>)
 80044d6:	f00f f8ff 	bl	80136d8 <siprintf>
 80044da:	4603      	mov	r3, r0
 80044dc:	b29a      	uxth	r2, r3
 80044de:	2364      	movs	r3, #100	; 0x64
 80044e0:	4919      	ldr	r1, [pc, #100]	; (8004548 <startMsg+0xbc>)
 80044e2:	481a      	ldr	r0, [pc, #104]	; (800454c <startMsg+0xc0>)
 80044e4:	f004 fbc6 	bl	8008c74 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "----------------- 2 : TOF sensor array and AI output ---------\n"), 100);
 80044e8:	491b      	ldr	r1, [pc, #108]	; (8004558 <startMsg+0xcc>)
 80044ea:	4817      	ldr	r0, [pc, #92]	; (8004548 <startMsg+0xbc>)
 80044ec:	f00f f8f4 	bl	80136d8 <siprintf>
 80044f0:	4603      	mov	r3, r0
 80044f2:	b29a      	uxth	r2, r3
 80044f4:	2364      	movs	r3, #100	; 0x64
 80044f6:	4914      	ldr	r1, [pc, #80]	; (8004548 <startMsg+0xbc>)
 80044f8:	4814      	ldr	r0, [pc, #80]	; (800454c <startMsg+0xc0>)
 80044fa:	f004 fbbb 	bl	8008c74 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "----------------- 3 : TOF Avg Std Force Z --------------------\n"), 100);
 80044fe:	4917      	ldr	r1, [pc, #92]	; (800455c <startMsg+0xd0>)
 8004500:	4811      	ldr	r0, [pc, #68]	; (8004548 <startMsg+0xbc>)
 8004502:	f00f f8e9 	bl	80136d8 <siprintf>
 8004506:	4603      	mov	r3, r0
 8004508:	b29a      	uxth	r2, r3
 800450a:	2364      	movs	r3, #100	; 0x64
 800450c:	490e      	ldr	r1, [pc, #56]	; (8004548 <startMsg+0xbc>)
 800450e:	480f      	ldr	r0, [pc, #60]	; (800454c <startMsg+0xc0>)
 8004510:	f004 fbb0 	bl	8008c74 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "--------------------------------------------------------------\n"), 100);
 8004514:	490b      	ldr	r1, [pc, #44]	; (8004544 <startMsg+0xb8>)
 8004516:	480c      	ldr	r0, [pc, #48]	; (8004548 <startMsg+0xbc>)
 8004518:	f00f f8de 	bl	80136d8 <siprintf>
 800451c:	4603      	mov	r3, r0
 800451e:	b29a      	uxth	r2, r3
 8004520:	2364      	movs	r3, #100	; 0x64
 8004522:	4909      	ldr	r1, [pc, #36]	; (8004548 <startMsg+0xbc>)
 8004524:	4809      	ldr	r0, [pc, #36]	; (800454c <startMsg+0xc0>)
 8004526:	f004 fba5 	bl	8008c74 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, txMsg, sprintf((char*)txMsg, "--------------------------------------------------------------\n"), 100);
 800452a:	4906      	ldr	r1, [pc, #24]	; (8004544 <startMsg+0xb8>)
 800452c:	4806      	ldr	r0, [pc, #24]	; (8004548 <startMsg+0xbc>)
 800452e:	f00f f8d3 	bl	80136d8 <siprintf>
 8004532:	4603      	mov	r3, r0
 8004534:	b29a      	uxth	r2, r3
 8004536:	2364      	movs	r3, #100	; 0x64
 8004538:	4903      	ldr	r1, [pc, #12]	; (8004548 <startMsg+0xbc>)
 800453a:	4804      	ldr	r0, [pc, #16]	; (800454c <startMsg+0xc0>)
 800453c:	f004 fb9a 	bl	8008c74 <HAL_UART_Transmit>
}
 8004540:	bf00      	nop
 8004542:	bd80      	pop	{r7, pc}
 8004544:	08018ca0 	.word	0x08018ca0
 8004548:	20007870 	.word	0x20007870
 800454c:	200077e8 	.word	0x200077e8
 8004550:	08018ce0 	.word	0x08018ce0
 8004554:	08018d20 	.word	0x08018d20
 8004558:	08018d60 	.word	0x08018d60
 800455c:	08018da0 	.word	0x08018da0

08004560 <ResetAllDevices>:
    }
}
#endif


void ResetAllDevices() {
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af02      	add	r7, sp, #8
  for (int j = 0; j < tcaLength; ++j) {
 8004566:	2300      	movs	r3, #0
 8004568:	607b      	str	r3, [r7, #4]
 800456a:	e011      	b.n	8004590 <ResetAllDevices+0x30>
	  HAL_I2C_Master_Transmit(&hi2c1, tca_addr[j] << 1, &tca_ch_reset, 1, 1000);
 800456c:	4a0e      	ldr	r2, [pc, #56]	; (80045a8 <ResetAllDevices+0x48>)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4413      	add	r3, r2
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	b29b      	uxth	r3, r3
 8004576:	005b      	lsls	r3, r3, #1
 8004578:	b299      	uxth	r1, r3
 800457a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800457e:	9300      	str	r3, [sp, #0]
 8004580:	2301      	movs	r3, #1
 8004582:	4a0a      	ldr	r2, [pc, #40]	; (80045ac <ResetAllDevices+0x4c>)
 8004584:	480a      	ldr	r0, [pc, #40]	; (80045b0 <ResetAllDevices+0x50>)
 8004586:	f000 fe6f 	bl	8005268 <HAL_I2C_Master_Transmit>
  for (int j = 0; j < tcaLength; ++j) {
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	3301      	adds	r3, #1
 800458e:	607b      	str	r3, [r7, #4]
 8004590:	4b08      	ldr	r3, [pc, #32]	; (80045b4 <ResetAllDevices+0x54>)
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	461a      	mov	r2, r3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4293      	cmp	r3, r2
 800459a:	dbe7      	blt.n	800456c <ResetAllDevices+0xc>
  }
}
 800459c:	bf00      	nop
 800459e:	bf00      	nop
 80045a0:	3708      	adds	r7, #8
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	2000016c 	.word	0x2000016c
 80045ac:	2000c564 	.word	0x2000c564
 80045b0:	200072a0 	.word	0x200072a0
 80045b4:	20000174 	.word	0x20000174

080045b8 <ResetDevicesExcept>:

void ResetDevicesExcept(uint8_t active_device) {
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b086      	sub	sp, #24
 80045bc:	af02      	add	r7, sp, #8
 80045be:	4603      	mov	r3, r0
 80045c0:	71fb      	strb	r3, [r7, #7]
    for (int j = 0; j < tcaLength; ++j) {
 80045c2:	2300      	movs	r3, #0
 80045c4:	60fb      	str	r3, [r7, #12]
 80045c6:	e015      	b.n	80045f4 <ResetDevicesExcept+0x3c>
        if (j != active_device) {
 80045c8:	79fb      	ldrb	r3, [r7, #7]
 80045ca:	68fa      	ldr	r2, [r7, #12]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d00e      	beq.n	80045ee <ResetDevicesExcept+0x36>
            HAL_I2C_Master_Transmit(&hi2c1, tca_addr[j] << 1, &tca_ch_reset, 1, 1000);
 80045d0:	4a0e      	ldr	r2, [pc, #56]	; (800460c <ResetDevicesExcept+0x54>)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	4413      	add	r3, r2
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	b29b      	uxth	r3, r3
 80045da:	005b      	lsls	r3, r3, #1
 80045dc:	b299      	uxth	r1, r3
 80045de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80045e2:	9300      	str	r3, [sp, #0]
 80045e4:	2301      	movs	r3, #1
 80045e6:	4a0a      	ldr	r2, [pc, #40]	; (8004610 <ResetDevicesExcept+0x58>)
 80045e8:	480a      	ldr	r0, [pc, #40]	; (8004614 <ResetDevicesExcept+0x5c>)
 80045ea:	f000 fe3d 	bl	8005268 <HAL_I2C_Master_Transmit>
    for (int j = 0; j < tcaLength; ++j) {
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	3301      	adds	r3, #1
 80045f2:	60fb      	str	r3, [r7, #12]
 80045f4:	4b08      	ldr	r3, [pc, #32]	; (8004618 <ResetDevicesExcept+0x60>)
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	461a      	mov	r2, r3
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	4293      	cmp	r3, r2
 80045fe:	dbe3      	blt.n	80045c8 <ResetDevicesExcept+0x10>
        }
    }
}
 8004600:	bf00      	nop
 8004602:	bf00      	nop
 8004604:	3710      	adds	r7, #16
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	2000016c 	.word	0x2000016c
 8004610:	2000c564 	.word	0x2000c564
 8004614:	200072a0 	.word	0x200072a0
 8004618:	20000174 	.word	0x20000174

0800461c <setActiveTcaChannel>:

void setActiveTcaChannel(uint8_t active_device, uint8_t channel){
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af02      	add	r7, sp, #8
 8004622:	4603      	mov	r3, r0
 8004624:	460a      	mov	r2, r1
 8004626:	71fb      	strb	r3, [r7, #7]
 8004628:	4613      	mov	r3, r2
 800462a:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(&hi2c1, tca_addr[active_device] << 1, &tca_ch[channel], 1, 1000);
 800462c:	79fb      	ldrb	r3, [r7, #7]
 800462e:	4a09      	ldr	r2, [pc, #36]	; (8004654 <setActiveTcaChannel+0x38>)
 8004630:	5cd3      	ldrb	r3, [r2, r3]
 8004632:	b29b      	uxth	r3, r3
 8004634:	005b      	lsls	r3, r3, #1
 8004636:	b299      	uxth	r1, r3
 8004638:	79bb      	ldrb	r3, [r7, #6]
 800463a:	4a07      	ldr	r2, [pc, #28]	; (8004658 <setActiveTcaChannel+0x3c>)
 800463c:	441a      	add	r2, r3
 800463e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004642:	9300      	str	r3, [sp, #0]
 8004644:	2301      	movs	r3, #1
 8004646:	4805      	ldr	r0, [pc, #20]	; (800465c <setActiveTcaChannel+0x40>)
 8004648:	f000 fe0e 	bl	8005268 <HAL_I2C_Master_Transmit>
}
 800464c:	bf00      	nop
 800464e:	3708      	adds	r7, #8
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}
 8004654:	2000016c 	.word	0x2000016c
 8004658:	20000160 	.word	0x20000160
 800465c:	200072a0 	.word	0x200072a0

08004660 <setOnAllDevices>:

void setOnAllDevices(){
 8004660:	b580      	push	{r7, lr}
 8004662:	b084      	sub	sp, #16
 8004664:	af02      	add	r7, sp, #8
  for (int j = 0; j < tcaLength; ++j) {
 8004666:	2300      	movs	r3, #0
 8004668:	607b      	str	r3, [r7, #4]
 800466a:	e011      	b.n	8004690 <setOnAllDevices+0x30>
	  HAL_I2C_Master_Transmit(&hi2c1, tca_addr[j] << 1, &tca_ch_all_on, 1, 1000);
 800466c:	4a0e      	ldr	r2, [pc, #56]	; (80046a8 <setOnAllDevices+0x48>)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4413      	add	r3, r2
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	b29b      	uxth	r3, r3
 8004676:	005b      	lsls	r3, r3, #1
 8004678:	b299      	uxth	r1, r3
 800467a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800467e:	9300      	str	r3, [sp, #0]
 8004680:	2301      	movs	r3, #1
 8004682:	4a0a      	ldr	r2, [pc, #40]	; (80046ac <setOnAllDevices+0x4c>)
 8004684:	480a      	ldr	r0, [pc, #40]	; (80046b0 <setOnAllDevices+0x50>)
 8004686:	f000 fdef 	bl	8005268 <HAL_I2C_Master_Transmit>
  for (int j = 0; j < tcaLength; ++j) {
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	3301      	adds	r3, #1
 800468e:	607b      	str	r3, [r7, #4]
 8004690:	4b08      	ldr	r3, [pc, #32]	; (80046b4 <setOnAllDevices+0x54>)
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	461a      	mov	r2, r3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4293      	cmp	r3, r2
 800469a:	dbe7      	blt.n	800466c <setOnAllDevices+0xc>
  }


}
 800469c:	bf00      	nop
 800469e:	bf00      	nop
 80046a0:	3708      	adds	r7, #8
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	2000016c 	.word	0x2000016c
 80046ac:	20000168 	.word	0x20000168
 80046b0:	200072a0 	.word	0x200072a0
 80046b4:	20000174 	.word	0x20000174

080046b8 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack      /* set stack pointer */
 80046b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80046f0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80046bc:	480d      	ldr	r0, [pc, #52]	; (80046f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80046be:	490e      	ldr	r1, [pc, #56]	; (80046f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80046c0:	4a0e      	ldr	r2, [pc, #56]	; (80046fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80046c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80046c4:	e002      	b.n	80046cc <LoopCopyDataInit>

080046c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80046c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80046c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80046ca:	3304      	adds	r3, #4

080046cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80046cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80046ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80046d0:	d3f9      	bcc.n	80046c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80046d2:	4a0b      	ldr	r2, [pc, #44]	; (8004700 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80046d4:	4c0b      	ldr	r4, [pc, #44]	; (8004704 <LoopFillZerobss+0x26>)
  movs r3, #0
 80046d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80046d8:	e001      	b.n	80046de <LoopFillZerobss>

080046da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80046da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80046dc:	3204      	adds	r2, #4

080046de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80046de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80046e0:	d3fb      	bcc.n	80046da <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80046e2:	f7ff fe5b 	bl	800439c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80046e6:	f00e f845 	bl	8012774 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80046ea:	f7ff f887 	bl	80037fc <main>
  bx  lr    
 80046ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80046f0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80046f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80046f8:	20001630 	.word	0x20001630
  ldr r2, =_sidata
 80046fc:	0805de48 	.word	0x0805de48
  ldr r2, =_sbss
 8004700:	20001640 	.word	0x20001640
  ldr r4, =_ebss
 8004704:	2000c678 	.word	0x2000c678

08004708 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004708:	e7fe      	b.n	8004708 <ADC_IRQHandler>

0800470a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800470a:	b580      	push	{r7, lr}
 800470c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800470e:	2003      	movs	r0, #3
 8004710:	f000 f94c 	bl	80049ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004714:	200f      	movs	r0, #15
 8004716:	f000 f805 	bl	8004724 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800471a:	f7ff fc1f 	bl	8003f5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800471e:	2300      	movs	r3, #0
}
 8004720:	4618      	mov	r0, r3
 8004722:	bd80      	pop	{r7, pc}

08004724 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800472c:	4b12      	ldr	r3, [pc, #72]	; (8004778 <HAL_InitTick+0x54>)
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	4b12      	ldr	r3, [pc, #72]	; (800477c <HAL_InitTick+0x58>)
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	4619      	mov	r1, r3
 8004736:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800473a:	fbb3 f3f1 	udiv	r3, r3, r1
 800473e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004742:	4618      	mov	r0, r3
 8004744:	f000 f967 	bl	8004a16 <HAL_SYSTICK_Config>
 8004748:	4603      	mov	r3, r0
 800474a:	2b00      	cmp	r3, #0
 800474c:	d001      	beq.n	8004752 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e00e      	b.n	8004770 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2b0f      	cmp	r3, #15
 8004756:	d80a      	bhi.n	800476e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004758:	2200      	movs	r2, #0
 800475a:	6879      	ldr	r1, [r7, #4]
 800475c:	f04f 30ff 	mov.w	r0, #4294967295
 8004760:	f000 f92f 	bl	80049c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004764:	4a06      	ldr	r2, [pc, #24]	; (8004780 <HAL_InitTick+0x5c>)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800476a:	2300      	movs	r3, #0
 800476c:	e000      	b.n	8004770 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
}
 8004770:	4618      	mov	r0, r3
 8004772:	3708      	adds	r7, #8
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}
 8004778:	2000000c 	.word	0x2000000c
 800477c:	2000030c 	.word	0x2000030c
 8004780:	20000308 	.word	0x20000308

08004784 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004784:	b480      	push	{r7}
 8004786:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004788:	4b06      	ldr	r3, [pc, #24]	; (80047a4 <HAL_IncTick+0x20>)
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	461a      	mov	r2, r3
 800478e:	4b06      	ldr	r3, [pc, #24]	; (80047a8 <HAL_IncTick+0x24>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4413      	add	r3, r2
 8004794:	4a04      	ldr	r2, [pc, #16]	; (80047a8 <HAL_IncTick+0x24>)
 8004796:	6013      	str	r3, [r2, #0]
}
 8004798:	bf00      	nop
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop
 80047a4:	2000030c 	.word	0x2000030c
 80047a8:	2000c568 	.word	0x2000c568

080047ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80047ac:	b480      	push	{r7}
 80047ae:	af00      	add	r7, sp, #0
  return uwTick;
 80047b0:	4b03      	ldr	r3, [pc, #12]	; (80047c0 <HAL_GetTick+0x14>)
 80047b2:	681b      	ldr	r3, [r3, #0]
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop
 80047c0:	2000c568 	.word	0x2000c568

080047c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80047cc:	f7ff ffee 	bl	80047ac <HAL_GetTick>
 80047d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047dc:	d005      	beq.n	80047ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80047de:	4b0a      	ldr	r3, [pc, #40]	; (8004808 <HAL_Delay+0x44>)
 80047e0:	781b      	ldrb	r3, [r3, #0]
 80047e2:	461a      	mov	r2, r3
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	4413      	add	r3, r2
 80047e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80047ea:	bf00      	nop
 80047ec:	f7ff ffde 	bl	80047ac <HAL_GetTick>
 80047f0:	4602      	mov	r2, r0
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	68fa      	ldr	r2, [r7, #12]
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d8f7      	bhi.n	80047ec <HAL_Delay+0x28>
  {
  }
}
 80047fc:	bf00      	nop
 80047fe:	bf00      	nop
 8004800:	3710      	adds	r7, #16
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	2000030c 	.word	0x2000030c

0800480c <__NVIC_SetPriorityGrouping>:
{
 800480c:	b480      	push	{r7}
 800480e:	b085      	sub	sp, #20
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f003 0307 	and.w	r3, r3, #7
 800481a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800481c:	4b0b      	ldr	r3, [pc, #44]	; (800484c <__NVIC_SetPriorityGrouping+0x40>)
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004822:	68ba      	ldr	r2, [r7, #8]
 8004824:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004828:	4013      	ands	r3, r2
 800482a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004834:	4b06      	ldr	r3, [pc, #24]	; (8004850 <__NVIC_SetPriorityGrouping+0x44>)
 8004836:	4313      	orrs	r3, r2
 8004838:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800483a:	4a04      	ldr	r2, [pc, #16]	; (800484c <__NVIC_SetPriorityGrouping+0x40>)
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	60d3      	str	r3, [r2, #12]
}
 8004840:	bf00      	nop
 8004842:	3714      	adds	r7, #20
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr
 800484c:	e000ed00 	.word	0xe000ed00
 8004850:	05fa0000 	.word	0x05fa0000

08004854 <__NVIC_GetPriorityGrouping>:
{
 8004854:	b480      	push	{r7}
 8004856:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004858:	4b04      	ldr	r3, [pc, #16]	; (800486c <__NVIC_GetPriorityGrouping+0x18>)
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	0a1b      	lsrs	r3, r3, #8
 800485e:	f003 0307 	and.w	r3, r3, #7
}
 8004862:	4618      	mov	r0, r3
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr
 800486c:	e000ed00 	.word	0xe000ed00

08004870 <__NVIC_EnableIRQ>:
{
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
 8004876:	4603      	mov	r3, r0
 8004878:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800487a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800487e:	2b00      	cmp	r3, #0
 8004880:	db0b      	blt.n	800489a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004882:	79fb      	ldrb	r3, [r7, #7]
 8004884:	f003 021f 	and.w	r2, r3, #31
 8004888:	4907      	ldr	r1, [pc, #28]	; (80048a8 <__NVIC_EnableIRQ+0x38>)
 800488a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800488e:	095b      	lsrs	r3, r3, #5
 8004890:	2001      	movs	r0, #1
 8004892:	fa00 f202 	lsl.w	r2, r0, r2
 8004896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800489a:	bf00      	nop
 800489c:	370c      	adds	r7, #12
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr
 80048a6:	bf00      	nop
 80048a8:	e000e100 	.word	0xe000e100

080048ac <__NVIC_SetPriority>:
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	4603      	mov	r3, r0
 80048b4:	6039      	str	r1, [r7, #0]
 80048b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	db0a      	blt.n	80048d6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	b2da      	uxtb	r2, r3
 80048c4:	490c      	ldr	r1, [pc, #48]	; (80048f8 <__NVIC_SetPriority+0x4c>)
 80048c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048ca:	0112      	lsls	r2, r2, #4
 80048cc:	b2d2      	uxtb	r2, r2
 80048ce:	440b      	add	r3, r1
 80048d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80048d4:	e00a      	b.n	80048ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	b2da      	uxtb	r2, r3
 80048da:	4908      	ldr	r1, [pc, #32]	; (80048fc <__NVIC_SetPriority+0x50>)
 80048dc:	79fb      	ldrb	r3, [r7, #7]
 80048de:	f003 030f 	and.w	r3, r3, #15
 80048e2:	3b04      	subs	r3, #4
 80048e4:	0112      	lsls	r2, r2, #4
 80048e6:	b2d2      	uxtb	r2, r2
 80048e8:	440b      	add	r3, r1
 80048ea:	761a      	strb	r2, [r3, #24]
}
 80048ec:	bf00      	nop
 80048ee:	370c      	adds	r7, #12
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr
 80048f8:	e000e100 	.word	0xe000e100
 80048fc:	e000ed00 	.word	0xe000ed00

08004900 <NVIC_EncodePriority>:
{
 8004900:	b480      	push	{r7}
 8004902:	b089      	sub	sp, #36	; 0x24
 8004904:	af00      	add	r7, sp, #0
 8004906:	60f8      	str	r0, [r7, #12]
 8004908:	60b9      	str	r1, [r7, #8]
 800490a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f003 0307 	and.w	r3, r3, #7
 8004912:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	f1c3 0307 	rsb	r3, r3, #7
 800491a:	2b04      	cmp	r3, #4
 800491c:	bf28      	it	cs
 800491e:	2304      	movcs	r3, #4
 8004920:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	3304      	adds	r3, #4
 8004926:	2b06      	cmp	r3, #6
 8004928:	d902      	bls.n	8004930 <NVIC_EncodePriority+0x30>
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	3b03      	subs	r3, #3
 800492e:	e000      	b.n	8004932 <NVIC_EncodePriority+0x32>
 8004930:	2300      	movs	r3, #0
 8004932:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004934:	f04f 32ff 	mov.w	r2, #4294967295
 8004938:	69bb      	ldr	r3, [r7, #24]
 800493a:	fa02 f303 	lsl.w	r3, r2, r3
 800493e:	43da      	mvns	r2, r3
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	401a      	ands	r2, r3
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004948:	f04f 31ff 	mov.w	r1, #4294967295
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	fa01 f303 	lsl.w	r3, r1, r3
 8004952:	43d9      	mvns	r1, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004958:	4313      	orrs	r3, r2
}
 800495a:	4618      	mov	r0, r3
 800495c:	3724      	adds	r7, #36	; 0x24
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr
	...

08004968 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	3b01      	subs	r3, #1
 8004974:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004978:	d301      	bcc.n	800497e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800497a:	2301      	movs	r3, #1
 800497c:	e00f      	b.n	800499e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800497e:	4a0a      	ldr	r2, [pc, #40]	; (80049a8 <SysTick_Config+0x40>)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	3b01      	subs	r3, #1
 8004984:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004986:	210f      	movs	r1, #15
 8004988:	f04f 30ff 	mov.w	r0, #4294967295
 800498c:	f7ff ff8e 	bl	80048ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004990:	4b05      	ldr	r3, [pc, #20]	; (80049a8 <SysTick_Config+0x40>)
 8004992:	2200      	movs	r2, #0
 8004994:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004996:	4b04      	ldr	r3, [pc, #16]	; (80049a8 <SysTick_Config+0x40>)
 8004998:	2207      	movs	r2, #7
 800499a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3708      	adds	r7, #8
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	e000e010 	.word	0xe000e010

080049ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b082      	sub	sp, #8
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f7ff ff29 	bl	800480c <__NVIC_SetPriorityGrouping>
}
 80049ba:	bf00      	nop
 80049bc:	3708      	adds	r7, #8
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}

080049c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80049c2:	b580      	push	{r7, lr}
 80049c4:	b086      	sub	sp, #24
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	4603      	mov	r3, r0
 80049ca:	60b9      	str	r1, [r7, #8]
 80049cc:	607a      	str	r2, [r7, #4]
 80049ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80049d0:	2300      	movs	r3, #0
 80049d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80049d4:	f7ff ff3e 	bl	8004854 <__NVIC_GetPriorityGrouping>
 80049d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	68b9      	ldr	r1, [r7, #8]
 80049de:	6978      	ldr	r0, [r7, #20]
 80049e0:	f7ff ff8e 	bl	8004900 <NVIC_EncodePriority>
 80049e4:	4602      	mov	r2, r0
 80049e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049ea:	4611      	mov	r1, r2
 80049ec:	4618      	mov	r0, r3
 80049ee:	f7ff ff5d 	bl	80048ac <__NVIC_SetPriority>
}
 80049f2:	bf00      	nop
 80049f4:	3718      	adds	r7, #24
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}

080049fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049fa:	b580      	push	{r7, lr}
 80049fc:	b082      	sub	sp, #8
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	4603      	mov	r3, r0
 8004a02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f7ff ff31 	bl	8004870 <__NVIC_EnableIRQ>
}
 8004a0e:	bf00      	nop
 8004a10:	3708      	adds	r7, #8
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}

08004a16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004a16:	b580      	push	{r7, lr}
 8004a18:	b082      	sub	sp, #8
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f7ff ffa2 	bl	8004968 <SysTick_Config>
 8004a24:	4603      	mov	r3, r0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3708      	adds	r7, #8
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
	...

08004a30 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d101      	bne.n	8004a42 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e054      	b.n	8004aec <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	7f5b      	ldrb	r3, [r3, #29]
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d105      	bne.n	8004a58 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f7ff faac 	bl	8003fb0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2202      	movs	r2, #2
 8004a5c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	791b      	ldrb	r3, [r3, #4]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d10c      	bne.n	8004a80 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a22      	ldr	r2, [pc, #136]	; (8004af4 <HAL_CRC_Init+0xc4>)
 8004a6c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	689a      	ldr	r2, [r3, #8]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f022 0218 	bic.w	r2, r2, #24
 8004a7c:	609a      	str	r2, [r3, #8]
 8004a7e:	e00c      	b.n	8004a9a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6899      	ldr	r1, [r3, #8]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	461a      	mov	r2, r3
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 f834 	bl	8004af8 <HAL_CRCEx_Polynomial_Set>
 8004a90:	4603      	mov	r3, r0
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d001      	beq.n	8004a9a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e028      	b.n	8004aec <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	795b      	ldrb	r3, [r3, #5]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d105      	bne.n	8004aae <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f04f 32ff 	mov.w	r2, #4294967295
 8004aaa:	611a      	str	r2, [r3, #16]
 8004aac:	e004      	b.n	8004ab8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	6912      	ldr	r2, [r2, #16]
 8004ab6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	695a      	ldr	r2, [r3, #20]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	430a      	orrs	r2, r1
 8004acc:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	699a      	ldr	r2, [r3, #24]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	430a      	orrs	r2, r1
 8004ae2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004aea:	2300      	movs	r3, #0
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3708      	adds	r7, #8
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}
 8004af4:	04c11db7 	.word	0x04c11db7

08004af8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b087      	sub	sp, #28
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	60b9      	str	r1, [r7, #8]
 8004b02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b04:	2300      	movs	r3, #0
 8004b06:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004b08:	231f      	movs	r3, #31
 8004b0a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004b0c:	bf00      	nop
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	1e5a      	subs	r2, r3, #1
 8004b12:	613a      	str	r2, [r7, #16]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d009      	beq.n	8004b2c <HAL_CRCEx_Polynomial_Set+0x34>
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	f003 031f 	and.w	r3, r3, #31
 8004b1e:	68ba      	ldr	r2, [r7, #8]
 8004b20:	fa22 f303 	lsr.w	r3, r2, r3
 8004b24:	f003 0301 	and.w	r3, r3, #1
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d0f0      	beq.n	8004b0e <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2b18      	cmp	r3, #24
 8004b30:	d846      	bhi.n	8004bc0 <HAL_CRCEx_Polynomial_Set+0xc8>
 8004b32:	a201      	add	r2, pc, #4	; (adr r2, 8004b38 <HAL_CRCEx_Polynomial_Set+0x40>)
 8004b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b38:	08004bc7 	.word	0x08004bc7
 8004b3c:	08004bc1 	.word	0x08004bc1
 8004b40:	08004bc1 	.word	0x08004bc1
 8004b44:	08004bc1 	.word	0x08004bc1
 8004b48:	08004bc1 	.word	0x08004bc1
 8004b4c:	08004bc1 	.word	0x08004bc1
 8004b50:	08004bc1 	.word	0x08004bc1
 8004b54:	08004bc1 	.word	0x08004bc1
 8004b58:	08004bb5 	.word	0x08004bb5
 8004b5c:	08004bc1 	.word	0x08004bc1
 8004b60:	08004bc1 	.word	0x08004bc1
 8004b64:	08004bc1 	.word	0x08004bc1
 8004b68:	08004bc1 	.word	0x08004bc1
 8004b6c:	08004bc1 	.word	0x08004bc1
 8004b70:	08004bc1 	.word	0x08004bc1
 8004b74:	08004bc1 	.word	0x08004bc1
 8004b78:	08004ba9 	.word	0x08004ba9
 8004b7c:	08004bc1 	.word	0x08004bc1
 8004b80:	08004bc1 	.word	0x08004bc1
 8004b84:	08004bc1 	.word	0x08004bc1
 8004b88:	08004bc1 	.word	0x08004bc1
 8004b8c:	08004bc1 	.word	0x08004bc1
 8004b90:	08004bc1 	.word	0x08004bc1
 8004b94:	08004bc1 	.word	0x08004bc1
 8004b98:	08004b9d 	.word	0x08004b9d
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	2b06      	cmp	r3, #6
 8004ba0:	d913      	bls.n	8004bca <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004ba6:	e010      	b.n	8004bca <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	2b07      	cmp	r3, #7
 8004bac:	d90f      	bls.n	8004bce <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004bb2:	e00c      	b.n	8004bce <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	2b0f      	cmp	r3, #15
 8004bb8:	d90b      	bls.n	8004bd2 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004bbe:	e008      	b.n	8004bd2 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	75fb      	strb	r3, [r7, #23]
      break;
 8004bc4:	e006      	b.n	8004bd4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004bc6:	bf00      	nop
 8004bc8:	e004      	b.n	8004bd4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004bca:	bf00      	nop
 8004bcc:	e002      	b.n	8004bd4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004bce:	bf00      	nop
 8004bd0:	e000      	b.n	8004bd4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004bd2:	bf00      	nop
  }
  if (status == HAL_OK)
 8004bd4:	7dfb      	ldrb	r3, [r7, #23]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d10d      	bne.n	8004bf6 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68ba      	ldr	r2, [r7, #8]
 8004be0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	f023 0118 	bic.w	r1, r3, #24
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	430a      	orrs	r2, r1
 8004bf4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004bf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	371c      	adds	r7, #28
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr

08004c04 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c10:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004c12:	f7ff fdcb 	bl	80047ac <HAL_GetTick>
 8004c16:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	d008      	beq.n	8004c36 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2280      	movs	r2, #128	; 0x80
 8004c28:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e052      	b.n	8004cdc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f022 0216 	bic.w	r2, r2, #22
 8004c44:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	695a      	ldr	r2, [r3, #20]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c54:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d103      	bne.n	8004c66 <HAL_DMA_Abort+0x62>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d007      	beq.n	8004c76 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f022 0208 	bic.w	r2, r2, #8
 8004c74:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f022 0201 	bic.w	r2, r2, #1
 8004c84:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c86:	e013      	b.n	8004cb0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004c88:	f7ff fd90 	bl	80047ac <HAL_GetTick>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	2b05      	cmp	r3, #5
 8004c94:	d90c      	bls.n	8004cb0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2220      	movs	r2, #32
 8004c9a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2203      	movs	r2, #3
 8004ca0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8004cac:	2303      	movs	r3, #3
 8004cae:	e015      	b.n	8004cdc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 0301 	and.w	r3, r3, #1
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d1e4      	bne.n	8004c88 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cc2:	223f      	movs	r2, #63	; 0x3f
 8004cc4:	409a      	lsls	r2, r3
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2201      	movs	r2, #1
 8004cce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8004cda:	2300      	movs	r3, #0
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3710      	adds	r7, #16
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}

08004ce4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b083      	sub	sp, #12
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	2b02      	cmp	r3, #2
 8004cf6:	d004      	beq.n	8004d02 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2280      	movs	r2, #128	; 0x80
 8004cfc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e00c      	b.n	8004d1c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2205      	movs	r2, #5
 8004d06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f022 0201 	bic.w	r2, r2, #1
 8004d18:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004d1a:	2300      	movs	r3, #0
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	370c      	adds	r7, #12
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr

08004d28 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d36:	b2db      	uxtb	r3, r3
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	370c      	adds	r7, #12
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b089      	sub	sp, #36	; 0x24
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004d52:	2300      	movs	r3, #0
 8004d54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004d56:	2300      	movs	r3, #0
 8004d58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004d5e:	2300      	movs	r3, #0
 8004d60:	61fb      	str	r3, [r7, #28]
 8004d62:	e175      	b.n	8005050 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004d64:	2201      	movs	r2, #1
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	697a      	ldr	r2, [r7, #20]
 8004d74:	4013      	ands	r3, r2
 8004d76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004d78:	693a      	ldr	r2, [r7, #16]
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	f040 8164 	bne.w	800504a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	f003 0303 	and.w	r3, r3, #3
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d005      	beq.n	8004d9a <HAL_GPIO_Init+0x56>
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	f003 0303 	and.w	r3, r3, #3
 8004d96:	2b02      	cmp	r3, #2
 8004d98:	d130      	bne.n	8004dfc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	005b      	lsls	r3, r3, #1
 8004da4:	2203      	movs	r2, #3
 8004da6:	fa02 f303 	lsl.w	r3, r2, r3
 8004daa:	43db      	mvns	r3, r3
 8004dac:	69ba      	ldr	r2, [r7, #24]
 8004dae:	4013      	ands	r3, r2
 8004db0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	68da      	ldr	r2, [r3, #12]
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	005b      	lsls	r3, r3, #1
 8004dba:	fa02 f303 	lsl.w	r3, r2, r3
 8004dbe:	69ba      	ldr	r2, [r7, #24]
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	69ba      	ldr	r2, [r7, #24]
 8004dc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd8:	43db      	mvns	r3, r3
 8004dda:	69ba      	ldr	r2, [r7, #24]
 8004ddc:	4013      	ands	r3, r2
 8004dde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	091b      	lsrs	r3, r3, #4
 8004de6:	f003 0201 	and.w	r2, r3, #1
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	fa02 f303 	lsl.w	r3, r2, r3
 8004df0:	69ba      	ldr	r2, [r7, #24]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	69ba      	ldr	r2, [r7, #24]
 8004dfa:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	f003 0303 	and.w	r3, r3, #3
 8004e04:	2b03      	cmp	r3, #3
 8004e06:	d017      	beq.n	8004e38 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	005b      	lsls	r3, r3, #1
 8004e12:	2203      	movs	r2, #3
 8004e14:	fa02 f303 	lsl.w	r3, r2, r3
 8004e18:	43db      	mvns	r3, r3
 8004e1a:	69ba      	ldr	r2, [r7, #24]
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	689a      	ldr	r2, [r3, #8]
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	005b      	lsls	r3, r3, #1
 8004e28:	fa02 f303 	lsl.w	r3, r2, r3
 8004e2c:	69ba      	ldr	r2, [r7, #24]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	69ba      	ldr	r2, [r7, #24]
 8004e36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	f003 0303 	and.w	r3, r3, #3
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	d123      	bne.n	8004e8c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	08da      	lsrs	r2, r3, #3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	3208      	adds	r2, #8
 8004e4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	f003 0307 	and.w	r3, r3, #7
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	220f      	movs	r2, #15
 8004e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e60:	43db      	mvns	r3, r3
 8004e62:	69ba      	ldr	r2, [r7, #24]
 8004e64:	4013      	ands	r3, r2
 8004e66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	691a      	ldr	r2, [r3, #16]
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	f003 0307 	and.w	r3, r3, #7
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	fa02 f303 	lsl.w	r3, r2, r3
 8004e78:	69ba      	ldr	r2, [r7, #24]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004e7e:	69fb      	ldr	r3, [r7, #28]
 8004e80:	08da      	lsrs	r2, r3, #3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	3208      	adds	r2, #8
 8004e86:	69b9      	ldr	r1, [r7, #24]
 8004e88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	005b      	lsls	r3, r3, #1
 8004e96:	2203      	movs	r2, #3
 8004e98:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9c:	43db      	mvns	r3, r3
 8004e9e:	69ba      	ldr	r2, [r7, #24]
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	f003 0203 	and.w	r2, r3, #3
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	005b      	lsls	r3, r3, #1
 8004eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb4:	69ba      	ldr	r2, [r7, #24]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	69ba      	ldr	r2, [r7, #24]
 8004ebe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	f000 80be 	beq.w	800504a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ece:	4b66      	ldr	r3, [pc, #408]	; (8005068 <HAL_GPIO_Init+0x324>)
 8004ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ed2:	4a65      	ldr	r2, [pc, #404]	; (8005068 <HAL_GPIO_Init+0x324>)
 8004ed4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ed8:	6453      	str	r3, [r2, #68]	; 0x44
 8004eda:	4b63      	ldr	r3, [pc, #396]	; (8005068 <HAL_GPIO_Init+0x324>)
 8004edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ede:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ee2:	60fb      	str	r3, [r7, #12]
 8004ee4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004ee6:	4a61      	ldr	r2, [pc, #388]	; (800506c <HAL_GPIO_Init+0x328>)
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	089b      	lsrs	r3, r3, #2
 8004eec:	3302      	adds	r3, #2
 8004eee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	f003 0303 	and.w	r3, r3, #3
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	220f      	movs	r2, #15
 8004efe:	fa02 f303 	lsl.w	r3, r2, r3
 8004f02:	43db      	mvns	r3, r3
 8004f04:	69ba      	ldr	r2, [r7, #24]
 8004f06:	4013      	ands	r3, r2
 8004f08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4a58      	ldr	r2, [pc, #352]	; (8005070 <HAL_GPIO_Init+0x32c>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d037      	beq.n	8004f82 <HAL_GPIO_Init+0x23e>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4a57      	ldr	r2, [pc, #348]	; (8005074 <HAL_GPIO_Init+0x330>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d031      	beq.n	8004f7e <HAL_GPIO_Init+0x23a>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4a56      	ldr	r2, [pc, #344]	; (8005078 <HAL_GPIO_Init+0x334>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d02b      	beq.n	8004f7a <HAL_GPIO_Init+0x236>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4a55      	ldr	r2, [pc, #340]	; (800507c <HAL_GPIO_Init+0x338>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d025      	beq.n	8004f76 <HAL_GPIO_Init+0x232>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4a54      	ldr	r2, [pc, #336]	; (8005080 <HAL_GPIO_Init+0x33c>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d01f      	beq.n	8004f72 <HAL_GPIO_Init+0x22e>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a53      	ldr	r2, [pc, #332]	; (8005084 <HAL_GPIO_Init+0x340>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d019      	beq.n	8004f6e <HAL_GPIO_Init+0x22a>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a52      	ldr	r2, [pc, #328]	; (8005088 <HAL_GPIO_Init+0x344>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d013      	beq.n	8004f6a <HAL_GPIO_Init+0x226>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a51      	ldr	r2, [pc, #324]	; (800508c <HAL_GPIO_Init+0x348>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d00d      	beq.n	8004f66 <HAL_GPIO_Init+0x222>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a50      	ldr	r2, [pc, #320]	; (8005090 <HAL_GPIO_Init+0x34c>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d007      	beq.n	8004f62 <HAL_GPIO_Init+0x21e>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a4f      	ldr	r2, [pc, #316]	; (8005094 <HAL_GPIO_Init+0x350>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d101      	bne.n	8004f5e <HAL_GPIO_Init+0x21a>
 8004f5a:	2309      	movs	r3, #9
 8004f5c:	e012      	b.n	8004f84 <HAL_GPIO_Init+0x240>
 8004f5e:	230a      	movs	r3, #10
 8004f60:	e010      	b.n	8004f84 <HAL_GPIO_Init+0x240>
 8004f62:	2308      	movs	r3, #8
 8004f64:	e00e      	b.n	8004f84 <HAL_GPIO_Init+0x240>
 8004f66:	2307      	movs	r3, #7
 8004f68:	e00c      	b.n	8004f84 <HAL_GPIO_Init+0x240>
 8004f6a:	2306      	movs	r3, #6
 8004f6c:	e00a      	b.n	8004f84 <HAL_GPIO_Init+0x240>
 8004f6e:	2305      	movs	r3, #5
 8004f70:	e008      	b.n	8004f84 <HAL_GPIO_Init+0x240>
 8004f72:	2304      	movs	r3, #4
 8004f74:	e006      	b.n	8004f84 <HAL_GPIO_Init+0x240>
 8004f76:	2303      	movs	r3, #3
 8004f78:	e004      	b.n	8004f84 <HAL_GPIO_Init+0x240>
 8004f7a:	2302      	movs	r3, #2
 8004f7c:	e002      	b.n	8004f84 <HAL_GPIO_Init+0x240>
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e000      	b.n	8004f84 <HAL_GPIO_Init+0x240>
 8004f82:	2300      	movs	r3, #0
 8004f84:	69fa      	ldr	r2, [r7, #28]
 8004f86:	f002 0203 	and.w	r2, r2, #3
 8004f8a:	0092      	lsls	r2, r2, #2
 8004f8c:	4093      	lsls	r3, r2
 8004f8e:	69ba      	ldr	r2, [r7, #24]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004f94:	4935      	ldr	r1, [pc, #212]	; (800506c <HAL_GPIO_Init+0x328>)
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	089b      	lsrs	r3, r3, #2
 8004f9a:	3302      	adds	r3, #2
 8004f9c:	69ba      	ldr	r2, [r7, #24]
 8004f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004fa2:	4b3d      	ldr	r3, [pc, #244]	; (8005098 <HAL_GPIO_Init+0x354>)
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	43db      	mvns	r3, r3
 8004fac:	69ba      	ldr	r2, [r7, #24]
 8004fae:	4013      	ands	r3, r2
 8004fb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d003      	beq.n	8004fc6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004fbe:	69ba      	ldr	r2, [r7, #24]
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004fc6:	4a34      	ldr	r2, [pc, #208]	; (8005098 <HAL_GPIO_Init+0x354>)
 8004fc8:	69bb      	ldr	r3, [r7, #24]
 8004fca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004fcc:	4b32      	ldr	r3, [pc, #200]	; (8005098 <HAL_GPIO_Init+0x354>)
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	43db      	mvns	r3, r3
 8004fd6:	69ba      	ldr	r2, [r7, #24]
 8004fd8:	4013      	ands	r3, r2
 8004fda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d003      	beq.n	8004ff0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004fe8:	69ba      	ldr	r2, [r7, #24]
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004ff0:	4a29      	ldr	r2, [pc, #164]	; (8005098 <HAL_GPIO_Init+0x354>)
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004ff6:	4b28      	ldr	r3, [pc, #160]	; (8005098 <HAL_GPIO_Init+0x354>)
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	43db      	mvns	r3, r3
 8005000:	69ba      	ldr	r2, [r7, #24]
 8005002:	4013      	ands	r3, r2
 8005004:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800500e:	2b00      	cmp	r3, #0
 8005010:	d003      	beq.n	800501a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005012:	69ba      	ldr	r2, [r7, #24]
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	4313      	orrs	r3, r2
 8005018:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800501a:	4a1f      	ldr	r2, [pc, #124]	; (8005098 <HAL_GPIO_Init+0x354>)
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005020:	4b1d      	ldr	r3, [pc, #116]	; (8005098 <HAL_GPIO_Init+0x354>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	43db      	mvns	r3, r3
 800502a:	69ba      	ldr	r2, [r7, #24]
 800502c:	4013      	ands	r3, r2
 800502e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005038:	2b00      	cmp	r3, #0
 800503a:	d003      	beq.n	8005044 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800503c:	69ba      	ldr	r2, [r7, #24]
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	4313      	orrs	r3, r2
 8005042:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005044:	4a14      	ldr	r2, [pc, #80]	; (8005098 <HAL_GPIO_Init+0x354>)
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	3301      	adds	r3, #1
 800504e:	61fb      	str	r3, [r7, #28]
 8005050:	69fb      	ldr	r3, [r7, #28]
 8005052:	2b0f      	cmp	r3, #15
 8005054:	f67f ae86 	bls.w	8004d64 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005058:	bf00      	nop
 800505a:	bf00      	nop
 800505c:	3724      	adds	r7, #36	; 0x24
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr
 8005066:	bf00      	nop
 8005068:	40023800 	.word	0x40023800
 800506c:	40013800 	.word	0x40013800
 8005070:	40020000 	.word	0x40020000
 8005074:	40020400 	.word	0x40020400
 8005078:	40020800 	.word	0x40020800
 800507c:	40020c00 	.word	0x40020c00
 8005080:	40021000 	.word	0x40021000
 8005084:	40021400 	.word	0x40021400
 8005088:	40021800 	.word	0x40021800
 800508c:	40021c00 	.word	0x40021c00
 8005090:	40022000 	.word	0x40022000
 8005094:	40022400 	.word	0x40022400
 8005098:	40013c00 	.word	0x40013c00

0800509c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800509c:	b480      	push	{r7}
 800509e:	b085      	sub	sp, #20
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	460b      	mov	r3, r1
 80050a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	691a      	ldr	r2, [r3, #16]
 80050ac:	887b      	ldrh	r3, [r7, #2]
 80050ae:	4013      	ands	r3, r2
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d002      	beq.n	80050ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80050b4:	2301      	movs	r3, #1
 80050b6:	73fb      	strb	r3, [r7, #15]
 80050b8:	e001      	b.n	80050be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80050ba:	2300      	movs	r3, #0
 80050bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80050be:	7bfb      	ldrb	r3, [r7, #15]
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3714      	adds	r7, #20
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr

080050cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	460b      	mov	r3, r1
 80050d6:	807b      	strh	r3, [r7, #2]
 80050d8:	4613      	mov	r3, r2
 80050da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80050dc:	787b      	ldrb	r3, [r7, #1]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d003      	beq.n	80050ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80050e2:	887a      	ldrh	r2, [r7, #2]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80050e8:	e003      	b.n	80050f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80050ea:	887b      	ldrh	r3, [r7, #2]
 80050ec:	041a      	lsls	r2, r3, #16
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	619a      	str	r2, [r3, #24]
}
 80050f2:	bf00      	nop
 80050f4:	370c      	adds	r7, #12
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr
	...

08005100 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b082      	sub	sp, #8
 8005104:	af00      	add	r7, sp, #0
 8005106:	4603      	mov	r3, r0
 8005108:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800510a:	4b08      	ldr	r3, [pc, #32]	; (800512c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800510c:	695a      	ldr	r2, [r3, #20]
 800510e:	88fb      	ldrh	r3, [r7, #6]
 8005110:	4013      	ands	r3, r2
 8005112:	2b00      	cmp	r3, #0
 8005114:	d006      	beq.n	8005124 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005116:	4a05      	ldr	r2, [pc, #20]	; (800512c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005118:	88fb      	ldrh	r3, [r7, #6]
 800511a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800511c:	88fb      	ldrh	r3, [r7, #6]
 800511e:	4618      	mov	r0, r3
 8005120:	f000 f806 	bl	8005130 <HAL_GPIO_EXTI_Callback>
  }
}
 8005124:	bf00      	nop
 8005126:	3708      	adds	r7, #8
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}
 800512c:	40013c00 	.word	0x40013c00

08005130 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005130:	b480      	push	{r7}
 8005132:	b083      	sub	sp, #12
 8005134:	af00      	add	r7, sp, #0
 8005136:	4603      	mov	r3, r0
 8005138:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800513a:	bf00      	nop
 800513c:	370c      	adds	r7, #12
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr
	...

08005148 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b082      	sub	sp, #8
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d101      	bne.n	800515a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	e07f      	b.n	800525a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005160:	b2db      	uxtb	r3, r3
 8005162:	2b00      	cmp	r3, #0
 8005164:	d106      	bne.n	8005174 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f7fe ff3e 	bl	8003ff0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2224      	movs	r2, #36	; 0x24
 8005178:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f022 0201 	bic.w	r2, r2, #1
 800518a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	685a      	ldr	r2, [r3, #4]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005198:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	689a      	ldr	r2, [r3, #8]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80051a8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d107      	bne.n	80051c2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	689a      	ldr	r2, [r3, #8]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80051be:	609a      	str	r2, [r3, #8]
 80051c0:	e006      	b.n	80051d0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	689a      	ldr	r2, [r3, #8]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80051ce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	2b02      	cmp	r3, #2
 80051d6:	d104      	bne.n	80051e2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80051e0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	6859      	ldr	r1, [r3, #4]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	4b1d      	ldr	r3, [pc, #116]	; (8005264 <HAL_I2C_Init+0x11c>)
 80051ee:	430b      	orrs	r3, r1
 80051f0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	68da      	ldr	r2, [r3, #12]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005200:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	691a      	ldr	r2, [r3, #16]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	695b      	ldr	r3, [r3, #20]
 800520a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	430a      	orrs	r2, r1
 800521a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	69d9      	ldr	r1, [r3, #28]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6a1a      	ldr	r2, [r3, #32]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	430a      	orrs	r2, r1
 800522a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f042 0201 	orr.w	r2, r2, #1
 800523a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2220      	movs	r2, #32
 8005246:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005258:	2300      	movs	r3, #0
}
 800525a:	4618      	mov	r0, r3
 800525c:	3708      	adds	r7, #8
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	02008000 	.word	0x02008000

08005268 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b088      	sub	sp, #32
 800526c:	af02      	add	r7, sp, #8
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	607a      	str	r2, [r7, #4]
 8005272:	461a      	mov	r2, r3
 8005274:	460b      	mov	r3, r1
 8005276:	817b      	strh	r3, [r7, #10]
 8005278:	4613      	mov	r3, r2
 800527a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005282:	b2db      	uxtb	r3, r3
 8005284:	2b20      	cmp	r3, #32
 8005286:	f040 80da 	bne.w	800543e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005290:	2b01      	cmp	r3, #1
 8005292:	d101      	bne.n	8005298 <HAL_I2C_Master_Transmit+0x30>
 8005294:	2302      	movs	r3, #2
 8005296:	e0d3      	b.n	8005440 <HAL_I2C_Master_Transmit+0x1d8>
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80052a0:	f7ff fa84 	bl	80047ac <HAL_GetTick>
 80052a4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	9300      	str	r3, [sp, #0]
 80052aa:	2319      	movs	r3, #25
 80052ac:	2201      	movs	r2, #1
 80052ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80052b2:	68f8      	ldr	r0, [r7, #12]
 80052b4:	f000 fefb 	bl	80060ae <I2C_WaitOnFlagUntilTimeout>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d001      	beq.n	80052c2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e0be      	b.n	8005440 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2221      	movs	r2, #33	; 0x21
 80052c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2210      	movs	r2, #16
 80052ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2200      	movs	r2, #0
 80052d6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	893a      	ldrh	r2, [r7, #8]
 80052e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2200      	movs	r2, #0
 80052e8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	2bff      	cmp	r3, #255	; 0xff
 80052f2:	d90e      	bls.n	8005312 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	22ff      	movs	r2, #255	; 0xff
 80052f8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052fe:	b2da      	uxtb	r2, r3
 8005300:	8979      	ldrh	r1, [r7, #10]
 8005302:	4b51      	ldr	r3, [pc, #324]	; (8005448 <HAL_I2C_Master_Transmit+0x1e0>)
 8005304:	9300      	str	r3, [sp, #0]
 8005306:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800530a:	68f8      	ldr	r0, [r7, #12]
 800530c:	f001 f8e6 	bl	80064dc <I2C_TransferConfig>
 8005310:	e06c      	b.n	80053ec <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005316:	b29a      	uxth	r2, r3
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005320:	b2da      	uxtb	r2, r3
 8005322:	8979      	ldrh	r1, [r7, #10]
 8005324:	4b48      	ldr	r3, [pc, #288]	; (8005448 <HAL_I2C_Master_Transmit+0x1e0>)
 8005326:	9300      	str	r3, [sp, #0]
 8005328:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800532c:	68f8      	ldr	r0, [r7, #12]
 800532e:	f001 f8d5 	bl	80064dc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005332:	e05b      	b.n	80053ec <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005334:	697a      	ldr	r2, [r7, #20]
 8005336:	6a39      	ldr	r1, [r7, #32]
 8005338:	68f8      	ldr	r0, [r7, #12]
 800533a:	f000 fef8 	bl	800612e <I2C_WaitOnTXISFlagUntilTimeout>
 800533e:	4603      	mov	r3, r0
 8005340:	2b00      	cmp	r3, #0
 8005342:	d001      	beq.n	8005348 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	e07b      	b.n	8005440 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534c:	781a      	ldrb	r2, [r3, #0]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005358:	1c5a      	adds	r2, r3, #1
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005362:	b29b      	uxth	r3, r3
 8005364:	3b01      	subs	r3, #1
 8005366:	b29a      	uxth	r2, r3
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005370:	3b01      	subs	r3, #1
 8005372:	b29a      	uxth	r2, r3
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800537c:	b29b      	uxth	r3, r3
 800537e:	2b00      	cmp	r3, #0
 8005380:	d034      	beq.n	80053ec <HAL_I2C_Master_Transmit+0x184>
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005386:	2b00      	cmp	r3, #0
 8005388:	d130      	bne.n	80053ec <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	9300      	str	r3, [sp, #0]
 800538e:	6a3b      	ldr	r3, [r7, #32]
 8005390:	2200      	movs	r2, #0
 8005392:	2180      	movs	r1, #128	; 0x80
 8005394:	68f8      	ldr	r0, [r7, #12]
 8005396:	f000 fe8a 	bl	80060ae <I2C_WaitOnFlagUntilTimeout>
 800539a:	4603      	mov	r3, r0
 800539c:	2b00      	cmp	r3, #0
 800539e:	d001      	beq.n	80053a4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	e04d      	b.n	8005440 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	2bff      	cmp	r3, #255	; 0xff
 80053ac:	d90e      	bls.n	80053cc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	22ff      	movs	r2, #255	; 0xff
 80053b2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053b8:	b2da      	uxtb	r2, r3
 80053ba:	8979      	ldrh	r1, [r7, #10]
 80053bc:	2300      	movs	r3, #0
 80053be:	9300      	str	r3, [sp, #0]
 80053c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80053c4:	68f8      	ldr	r0, [r7, #12]
 80053c6:	f001 f889 	bl	80064dc <I2C_TransferConfig>
 80053ca:	e00f      	b.n	80053ec <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053d0:	b29a      	uxth	r2, r3
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053da:	b2da      	uxtb	r2, r3
 80053dc:	8979      	ldrh	r1, [r7, #10]
 80053de:	2300      	movs	r3, #0
 80053e0:	9300      	str	r3, [sp, #0]
 80053e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80053e6:	68f8      	ldr	r0, [r7, #12]
 80053e8:	f001 f878 	bl	80064dc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d19e      	bne.n	8005334 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053f6:	697a      	ldr	r2, [r7, #20]
 80053f8:	6a39      	ldr	r1, [r7, #32]
 80053fa:	68f8      	ldr	r0, [r7, #12]
 80053fc:	f000 fed7 	bl	80061ae <I2C_WaitOnSTOPFlagUntilTimeout>
 8005400:	4603      	mov	r3, r0
 8005402:	2b00      	cmp	r3, #0
 8005404:	d001      	beq.n	800540a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e01a      	b.n	8005440 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	2220      	movs	r2, #32
 8005410:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	6859      	ldr	r1, [r3, #4]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	4b0b      	ldr	r3, [pc, #44]	; (800544c <HAL_I2C_Master_Transmit+0x1e4>)
 800541e:	400b      	ands	r3, r1
 8005420:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2220      	movs	r2, #32
 8005426:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2200      	movs	r2, #0
 800542e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2200      	movs	r2, #0
 8005436:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800543a:	2300      	movs	r3, #0
 800543c:	e000      	b.n	8005440 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800543e:	2302      	movs	r3, #2
  }
}
 8005440:	4618      	mov	r0, r3
 8005442:	3718      	adds	r7, #24
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}
 8005448:	80002000 	.word	0x80002000
 800544c:	fe00e800 	.word	0xfe00e800

08005450 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b088      	sub	sp, #32
 8005454:	af02      	add	r7, sp, #8
 8005456:	60f8      	str	r0, [r7, #12]
 8005458:	607a      	str	r2, [r7, #4]
 800545a:	461a      	mov	r2, r3
 800545c:	460b      	mov	r3, r1
 800545e:	817b      	strh	r3, [r7, #10]
 8005460:	4613      	mov	r3, r2
 8005462:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800546a:	b2db      	uxtb	r3, r3
 800546c:	2b20      	cmp	r3, #32
 800546e:	f040 80db 	bne.w	8005628 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005478:	2b01      	cmp	r3, #1
 800547a:	d101      	bne.n	8005480 <HAL_I2C_Master_Receive+0x30>
 800547c:	2302      	movs	r3, #2
 800547e:	e0d4      	b.n	800562a <HAL_I2C_Master_Receive+0x1da>
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005488:	f7ff f990 	bl	80047ac <HAL_GetTick>
 800548c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	9300      	str	r3, [sp, #0]
 8005492:	2319      	movs	r3, #25
 8005494:	2201      	movs	r2, #1
 8005496:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800549a:	68f8      	ldr	r0, [r7, #12]
 800549c:	f000 fe07 	bl	80060ae <I2C_WaitOnFlagUntilTimeout>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d001      	beq.n	80054aa <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e0bf      	b.n	800562a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2222      	movs	r2, #34	; 0x22
 80054ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2210      	movs	r2, #16
 80054b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2200      	movs	r2, #0
 80054be:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	893a      	ldrh	r2, [r7, #8]
 80054ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2200      	movs	r2, #0
 80054d0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	2bff      	cmp	r3, #255	; 0xff
 80054da:	d90e      	bls.n	80054fa <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	22ff      	movs	r2, #255	; 0xff
 80054e0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054e6:	b2da      	uxtb	r2, r3
 80054e8:	8979      	ldrh	r1, [r7, #10]
 80054ea:	4b52      	ldr	r3, [pc, #328]	; (8005634 <HAL_I2C_Master_Receive+0x1e4>)
 80054ec:	9300      	str	r3, [sp, #0]
 80054ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80054f2:	68f8      	ldr	r0, [r7, #12]
 80054f4:	f000 fff2 	bl	80064dc <I2C_TransferConfig>
 80054f8:	e06d      	b.n	80055d6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054fe:	b29a      	uxth	r2, r3
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005508:	b2da      	uxtb	r2, r3
 800550a:	8979      	ldrh	r1, [r7, #10]
 800550c:	4b49      	ldr	r3, [pc, #292]	; (8005634 <HAL_I2C_Master_Receive+0x1e4>)
 800550e:	9300      	str	r3, [sp, #0]
 8005510:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005514:	68f8      	ldr	r0, [r7, #12]
 8005516:	f000 ffe1 	bl	80064dc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800551a:	e05c      	b.n	80055d6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800551c:	697a      	ldr	r2, [r7, #20]
 800551e:	6a39      	ldr	r1, [r7, #32]
 8005520:	68f8      	ldr	r0, [r7, #12]
 8005522:	f000 fe81 	bl	8006228 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005526:	4603      	mov	r3, r0
 8005528:	2b00      	cmp	r3, #0
 800552a:	d001      	beq.n	8005530 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	e07c      	b.n	800562a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553a:	b2d2      	uxtb	r2, r2
 800553c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005542:	1c5a      	adds	r2, r3, #1
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800554c:	3b01      	subs	r3, #1
 800554e:	b29a      	uxth	r2, r3
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005558:	b29b      	uxth	r3, r3
 800555a:	3b01      	subs	r3, #1
 800555c:	b29a      	uxth	r2, r3
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005566:	b29b      	uxth	r3, r3
 8005568:	2b00      	cmp	r3, #0
 800556a:	d034      	beq.n	80055d6 <HAL_I2C_Master_Receive+0x186>
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005570:	2b00      	cmp	r3, #0
 8005572:	d130      	bne.n	80055d6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	9300      	str	r3, [sp, #0]
 8005578:	6a3b      	ldr	r3, [r7, #32]
 800557a:	2200      	movs	r2, #0
 800557c:	2180      	movs	r1, #128	; 0x80
 800557e:	68f8      	ldr	r0, [r7, #12]
 8005580:	f000 fd95 	bl	80060ae <I2C_WaitOnFlagUntilTimeout>
 8005584:	4603      	mov	r3, r0
 8005586:	2b00      	cmp	r3, #0
 8005588:	d001      	beq.n	800558e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	e04d      	b.n	800562a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005592:	b29b      	uxth	r3, r3
 8005594:	2bff      	cmp	r3, #255	; 0xff
 8005596:	d90e      	bls.n	80055b6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	22ff      	movs	r2, #255	; 0xff
 800559c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055a2:	b2da      	uxtb	r2, r3
 80055a4:	8979      	ldrh	r1, [r7, #10]
 80055a6:	2300      	movs	r3, #0
 80055a8:	9300      	str	r3, [sp, #0]
 80055aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80055ae:	68f8      	ldr	r0, [r7, #12]
 80055b0:	f000 ff94 	bl	80064dc <I2C_TransferConfig>
 80055b4:	e00f      	b.n	80055d6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055ba:	b29a      	uxth	r2, r3
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055c4:	b2da      	uxtb	r2, r3
 80055c6:	8979      	ldrh	r1, [r7, #10]
 80055c8:	2300      	movs	r3, #0
 80055ca:	9300      	str	r3, [sp, #0]
 80055cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80055d0:	68f8      	ldr	r0, [r7, #12]
 80055d2:	f000 ff83 	bl	80064dc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055da:	b29b      	uxth	r3, r3
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d19d      	bne.n	800551c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055e0:	697a      	ldr	r2, [r7, #20]
 80055e2:	6a39      	ldr	r1, [r7, #32]
 80055e4:	68f8      	ldr	r0, [r7, #12]
 80055e6:	f000 fde2 	bl	80061ae <I2C_WaitOnSTOPFlagUntilTimeout>
 80055ea:	4603      	mov	r3, r0
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d001      	beq.n	80055f4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	e01a      	b.n	800562a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	2220      	movs	r2, #32
 80055fa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	6859      	ldr	r1, [r3, #4]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	4b0c      	ldr	r3, [pc, #48]	; (8005638 <HAL_I2C_Master_Receive+0x1e8>)
 8005608:	400b      	ands	r3, r1
 800560a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2220      	movs	r2, #32
 8005610:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2200      	movs	r2, #0
 8005618:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2200      	movs	r2, #0
 8005620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005624:	2300      	movs	r3, #0
 8005626:	e000      	b.n	800562a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005628:	2302      	movs	r3, #2
  }
}
 800562a:	4618      	mov	r0, r3
 800562c:	3718      	adds	r7, #24
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}
 8005632:	bf00      	nop
 8005634:	80002400 	.word	0x80002400
 8005638:	fe00e800 	.word	0xfe00e800

0800563c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b084      	sub	sp, #16
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	699b      	ldr	r3, [r3, #24]
 800564a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005658:	2b00      	cmp	r3, #0
 800565a:	d005      	beq.n	8005668 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005660:	68ba      	ldr	r2, [r7, #8]
 8005662:	68f9      	ldr	r1, [r7, #12]
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	4798      	blx	r3
  }
}
 8005668:	bf00      	nop
 800566a:	3710      	adds	r7, #16
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}

08005670 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b086      	sub	sp, #24
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	699b      	ldr	r3, [r3, #24]
 800567e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	0a1b      	lsrs	r3, r3, #8
 800568c:	f003 0301 	and.w	r3, r3, #1
 8005690:	2b00      	cmp	r3, #0
 8005692:	d010      	beq.n	80056b6 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	09db      	lsrs	r3, r3, #7
 8005698:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800569c:	2b00      	cmp	r3, #0
 800569e:	d00a      	beq.n	80056b6 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056a4:	f043 0201 	orr.w	r2, r3, #1
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056b4:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	0a9b      	lsrs	r3, r3, #10
 80056ba:	f003 0301 	and.w	r3, r3, #1
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d010      	beq.n	80056e4 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	09db      	lsrs	r3, r3, #7
 80056c6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d00a      	beq.n	80056e4 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056d2:	f043 0208 	orr.w	r2, r3, #8
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80056e2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	0a5b      	lsrs	r3, r3, #9
 80056e8:	f003 0301 	and.w	r3, r3, #1
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d010      	beq.n	8005712 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	09db      	lsrs	r3, r3, #7
 80056f4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d00a      	beq.n	8005712 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005700:	f043 0202 	orr.w	r2, r3, #2
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005710:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005716:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f003 030b 	and.w	r3, r3, #11
 800571e:	2b00      	cmp	r3, #0
 8005720:	d003      	beq.n	800572a <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8005722:	68f9      	ldr	r1, [r7, #12]
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f000 fb89 	bl	8005e3c <I2C_ITError>
  }
}
 800572a:	bf00      	nop
 800572c:	3718      	adds	r7, #24
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}

08005732 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005732:	b480      	push	{r7}
 8005734:	b083      	sub	sp, #12
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800573a:	bf00      	nop
 800573c:	370c      	adds	r7, #12
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr

08005746 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005746:	b480      	push	{r7}
 8005748:	b083      	sub	sp, #12
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800574e:	bf00      	nop
 8005750:	370c      	adds	r7, #12
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr

0800575a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800575a:	b480      	push	{r7}
 800575c:	b083      	sub	sp, #12
 800575e:	af00      	add	r7, sp, #0
 8005760:	6078      	str	r0, [r7, #4]
 8005762:	460b      	mov	r3, r1
 8005764:	70fb      	strb	r3, [r7, #3]
 8005766:	4613      	mov	r3, r2
 8005768:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800576a:	bf00      	nop
 800576c:	370c      	adds	r7, #12
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr

08005776 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005776:	b480      	push	{r7}
 8005778:	b083      	sub	sp, #12
 800577a:	af00      	add	r7, sp, #0
 800577c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800577e:	bf00      	nop
 8005780:	370c      	adds	r7, #12
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr

0800578a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800578a:	b480      	push	{r7}
 800578c:	b083      	sub	sp, #12
 800578e:	af00      	add	r7, sp, #0
 8005790:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005792:	bf00      	nop
 8005794:	370c      	adds	r7, #12
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr

0800579e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800579e:	b480      	push	{r7}
 80057a0:	b083      	sub	sp, #12
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80057a6:	bf00      	nop
 80057a8:	370c      	adds	r7, #12
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr

080057b2 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80057b2:	b580      	push	{r7, lr}
 80057b4:	b086      	sub	sp, #24
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	60f8      	str	r0, [r7, #12]
 80057ba:	60b9      	str	r1, [r7, #8]
 80057bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d101      	bne.n	80057d6 <I2C_Slave_ISR_IT+0x24>
 80057d2:	2302      	movs	r3, #2
 80057d4:	e0ec      	b.n	80059b0 <I2C_Slave_ISR_IT+0x1fe>
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2201      	movs	r2, #1
 80057da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	095b      	lsrs	r3, r3, #5
 80057e2:	f003 0301 	and.w	r3, r3, #1
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d009      	beq.n	80057fe <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	095b      	lsrs	r3, r3, #5
 80057ee:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d003      	beq.n	80057fe <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80057f6:	6939      	ldr	r1, [r7, #16]
 80057f8:	68f8      	ldr	r0, [r7, #12]
 80057fa:	f000 f9bf 	bl	8005b7c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	091b      	lsrs	r3, r3, #4
 8005802:	f003 0301 	and.w	r3, r3, #1
 8005806:	2b00      	cmp	r3, #0
 8005808:	d04d      	beq.n	80058a6 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	091b      	lsrs	r3, r3, #4
 800580e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005812:	2b00      	cmp	r3, #0
 8005814:	d047      	beq.n	80058a6 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800581a:	b29b      	uxth	r3, r3
 800581c:	2b00      	cmp	r3, #0
 800581e:	d128      	bne.n	8005872 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005826:	b2db      	uxtb	r3, r3
 8005828:	2b28      	cmp	r3, #40	; 0x28
 800582a:	d108      	bne.n	800583e <I2C_Slave_ISR_IT+0x8c>
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005832:	d104      	bne.n	800583e <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005834:	6939      	ldr	r1, [r7, #16]
 8005836:	68f8      	ldr	r0, [r7, #12]
 8005838:	f000 faaa 	bl	8005d90 <I2C_ITListenCplt>
 800583c:	e032      	b.n	80058a4 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005844:	b2db      	uxtb	r3, r3
 8005846:	2b29      	cmp	r3, #41	; 0x29
 8005848:	d10e      	bne.n	8005868 <I2C_Slave_ISR_IT+0xb6>
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005850:	d00a      	beq.n	8005868 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	2210      	movs	r2, #16
 8005858:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800585a:	68f8      	ldr	r0, [r7, #12]
 800585c:	f000 fbe5 	bl	800602a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005860:	68f8      	ldr	r0, [r7, #12]
 8005862:	f000 f92d 	bl	8005ac0 <I2C_ITSlaveSeqCplt>
 8005866:	e01d      	b.n	80058a4 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	2210      	movs	r2, #16
 800586e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8005870:	e096      	b.n	80059a0 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	2210      	movs	r2, #16
 8005878:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800587e:	f043 0204 	orr.w	r2, r3, #4
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d004      	beq.n	8005896 <I2C_Slave_ISR_IT+0xe4>
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005892:	f040 8085 	bne.w	80059a0 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800589a:	4619      	mov	r1, r3
 800589c:	68f8      	ldr	r0, [r7, #12]
 800589e:	f000 facd 	bl	8005e3c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80058a2:	e07d      	b.n	80059a0 <I2C_Slave_ISR_IT+0x1ee>
 80058a4:	e07c      	b.n	80059a0 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	089b      	lsrs	r3, r3, #2
 80058aa:	f003 0301 	and.w	r3, r3, #1
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d030      	beq.n	8005914 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	089b      	lsrs	r3, r3, #2
 80058b6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d02a      	beq.n	8005914 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d018      	beq.n	80058fa <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d2:	b2d2      	uxtb	r2, r2
 80058d4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058da:	1c5a      	adds	r2, r3, #1
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058e4:	3b01      	subs	r3, #1
 80058e6:	b29a      	uxth	r2, r3
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	3b01      	subs	r3, #1
 80058f4:	b29a      	uxth	r2, r3
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058fe:	b29b      	uxth	r3, r3
 8005900:	2b00      	cmp	r3, #0
 8005902:	d14f      	bne.n	80059a4 <I2C_Slave_ISR_IT+0x1f2>
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800590a:	d04b      	beq.n	80059a4 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800590c:	68f8      	ldr	r0, [r7, #12]
 800590e:	f000 f8d7 	bl	8005ac0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005912:	e047      	b.n	80059a4 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	08db      	lsrs	r3, r3, #3
 8005918:	f003 0301 	and.w	r3, r3, #1
 800591c:	2b00      	cmp	r3, #0
 800591e:	d00a      	beq.n	8005936 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	08db      	lsrs	r3, r3, #3
 8005924:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005928:	2b00      	cmp	r3, #0
 800592a:	d004      	beq.n	8005936 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800592c:	6939      	ldr	r1, [r7, #16]
 800592e:	68f8      	ldr	r0, [r7, #12]
 8005930:	f000 f842 	bl	80059b8 <I2C_ITAddrCplt>
 8005934:	e037      	b.n	80059a6 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	085b      	lsrs	r3, r3, #1
 800593a:	f003 0301 	and.w	r3, r3, #1
 800593e:	2b00      	cmp	r3, #0
 8005940:	d031      	beq.n	80059a6 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	085b      	lsrs	r3, r3, #1
 8005946:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800594a:	2b00      	cmp	r3, #0
 800594c:	d02b      	beq.n	80059a6 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005952:	b29b      	uxth	r3, r3
 8005954:	2b00      	cmp	r3, #0
 8005956:	d018      	beq.n	800598a <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595c:	781a      	ldrb	r2, [r3, #0]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005968:	1c5a      	adds	r2, r3, #1
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005972:	b29b      	uxth	r3, r3
 8005974:	3b01      	subs	r3, #1
 8005976:	b29a      	uxth	r2, r3
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005980:	3b01      	subs	r3, #1
 8005982:	b29a      	uxth	r2, r3
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	851a      	strh	r2, [r3, #40]	; 0x28
 8005988:	e00d      	b.n	80059a6 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005990:	d002      	beq.n	8005998 <I2C_Slave_ISR_IT+0x1e6>
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d106      	bne.n	80059a6 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005998:	68f8      	ldr	r0, [r7, #12]
 800599a:	f000 f891 	bl	8005ac0 <I2C_ITSlaveSeqCplt>
 800599e:	e002      	b.n	80059a6 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 80059a0:	bf00      	nop
 80059a2:	e000      	b.n	80059a6 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 80059a4:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2200      	movs	r2, #0
 80059aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80059ae:	2300      	movs	r3, #0
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3718      	adds	r7, #24
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b084      	sub	sp, #16
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80059ce:	2b28      	cmp	r3, #40	; 0x28
 80059d0:	d16a      	bne.n	8005aa8 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	699b      	ldr	r3, [r3, #24]
 80059d8:	0c1b      	lsrs	r3, r3, #16
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	f003 0301 	and.w	r3, r3, #1
 80059e0:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	699b      	ldr	r3, [r3, #24]
 80059e8:	0c1b      	lsrs	r3, r3, #16
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80059f0:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80059fe:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005a0c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	2b02      	cmp	r3, #2
 8005a14:	d138      	bne.n	8005a88 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8005a16:	897b      	ldrh	r3, [r7, #10]
 8005a18:	09db      	lsrs	r3, r3, #7
 8005a1a:	b29a      	uxth	r2, r3
 8005a1c:	89bb      	ldrh	r3, [r7, #12]
 8005a1e:	4053      	eors	r3, r2
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	f003 0306 	and.w	r3, r3, #6
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d11c      	bne.n	8005a64 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8005a2a:	897b      	ldrh	r3, [r7, #10]
 8005a2c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a32:	1c5a      	adds	r2, r3, #1
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a3c:	2b02      	cmp	r3, #2
 8005a3e:	d13b      	bne.n	8005ab8 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2200      	movs	r2, #0
 8005a44:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	2208      	movs	r2, #8
 8005a4c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005a56:	89ba      	ldrh	r2, [r7, #12]
 8005a58:	7bfb      	ldrb	r3, [r7, #15]
 8005a5a:	4619      	mov	r1, r3
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f7ff fe7c 	bl	800575a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005a62:	e029      	b.n	8005ab8 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8005a64:	893b      	ldrh	r3, [r7, #8]
 8005a66:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005a68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f000 fd67 	bl	8006540 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005a7a:	89ba      	ldrh	r2, [r7, #12]
 8005a7c:	7bfb      	ldrb	r3, [r7, #15]
 8005a7e:	4619      	mov	r1, r3
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f7ff fe6a 	bl	800575a <HAL_I2C_AddrCallback>
}
 8005a86:	e017      	b.n	8005ab8 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005a88:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f000 fd57 	bl	8006540 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005a9a:	89ba      	ldrh	r2, [r7, #12]
 8005a9c:	7bfb      	ldrb	r3, [r7, #15]
 8005a9e:	4619      	mov	r1, r3
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f7ff fe5a 	bl	800575a <HAL_I2C_AddrCallback>
}
 8005aa6:	e007      	b.n	8005ab8 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	2208      	movs	r2, #8
 8005aae:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8005ab8:	bf00      	nop
 8005aba:	3710      	adds	r7, #16
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}

08005ac0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b084      	sub	sp, #16
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	0b9b      	lsrs	r3, r3, #14
 8005adc:	f003 0301 	and.w	r3, r3, #1
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d008      	beq.n	8005af6 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005af2:	601a      	str	r2, [r3, #0]
 8005af4:	e00d      	b.n	8005b12 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	0bdb      	lsrs	r3, r3, #15
 8005afa:	f003 0301 	and.w	r3, r3, #1
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d007      	beq.n	8005b12 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005b10:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	2b29      	cmp	r3, #41	; 0x29
 8005b1c:	d112      	bne.n	8005b44 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2228      	movs	r2, #40	; 0x28
 8005b22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2221      	movs	r2, #33	; 0x21
 8005b2a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005b2c:	2101      	movs	r1, #1
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f000 fd06 	bl	8006540 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f7ff fdf8 	bl	8005732 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005b42:	e017      	b.n	8005b74 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b4a:	b2db      	uxtb	r3, r3
 8005b4c:	2b2a      	cmp	r3, #42	; 0x2a
 8005b4e:	d111      	bne.n	8005b74 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2228      	movs	r2, #40	; 0x28
 8005b54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2222      	movs	r2, #34	; 0x22
 8005b5c:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005b5e:	2102      	movs	r1, #2
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f000 fced 	bl	8006540 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f7ff fde9 	bl	8005746 <HAL_I2C_SlaveRxCpltCallback>
}
 8005b74:	bf00      	nop
 8005b76:	3710      	adds	r7, #16
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}

08005b7c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b086      	sub	sp, #24
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b98:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	2220      	movs	r2, #32
 8005ba0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005ba2:	7bfb      	ldrb	r3, [r7, #15]
 8005ba4:	2b21      	cmp	r3, #33	; 0x21
 8005ba6:	d002      	beq.n	8005bae <I2C_ITSlaveCplt+0x32>
 8005ba8:	7bfb      	ldrb	r3, [r7, #15]
 8005baa:	2b29      	cmp	r3, #41	; 0x29
 8005bac:	d108      	bne.n	8005bc0 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8005bae:	f248 0101 	movw	r1, #32769	; 0x8001
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 fcc4 	bl	8006540 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2221      	movs	r2, #33	; 0x21
 8005bbc:	631a      	str	r2, [r3, #48]	; 0x30
 8005bbe:	e00d      	b.n	8005bdc <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005bc0:	7bfb      	ldrb	r3, [r7, #15]
 8005bc2:	2b22      	cmp	r3, #34	; 0x22
 8005bc4:	d002      	beq.n	8005bcc <I2C_ITSlaveCplt+0x50>
 8005bc6:	7bfb      	ldrb	r3, [r7, #15]
 8005bc8:	2b2a      	cmp	r3, #42	; 0x2a
 8005bca:	d107      	bne.n	8005bdc <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8005bcc:	f248 0102 	movw	r1, #32770	; 0x8002
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f000 fcb5 	bl	8006540 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2222      	movs	r2, #34	; 0x22
 8005bda:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	685a      	ldr	r2, [r3, #4]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005bea:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	6859      	ldr	r1, [r3, #4]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	4b64      	ldr	r3, [pc, #400]	; (8005d88 <I2C_ITSlaveCplt+0x20c>)
 8005bf8:	400b      	ands	r3, r1
 8005bfa:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f000 fa14 	bl	800602a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	0b9b      	lsrs	r3, r3, #14
 8005c06:	f003 0301 	and.w	r3, r3, #1
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d013      	beq.n	8005c36 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005c1c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d020      	beq.n	8005c68 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	b29a      	uxth	r2, r3
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005c34:	e018      	b.n	8005c68 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	0bdb      	lsrs	r3, r3, #15
 8005c3a:	f003 0301 	and.w	r3, r3, #1
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d012      	beq.n	8005c68 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005c50:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d006      	beq.n	8005c68 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	b29a      	uxth	r2, r3
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	089b      	lsrs	r3, r3, #2
 8005c6c:	f003 0301 	and.w	r3, r3, #1
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d020      	beq.n	8005cb6 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	f023 0304 	bic.w	r3, r3, #4
 8005c7a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c86:	b2d2      	uxtb	r2, r2
 8005c88:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8e:	1c5a      	adds	r2, r3, #1
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d00c      	beq.n	8005cb6 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ca0:	3b01      	subs	r3, #1
 8005ca2:	b29a      	uxth	r2, r3
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	3b01      	subs	r3, #1
 8005cb0:	b29a      	uxth	r2, r3
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d005      	beq.n	8005ccc <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cc4:	f043 0204 	orr.w	r2, r3, #4
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d010      	beq.n	8005d04 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ce6:	4619      	mov	r1, r3
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f000 f8a7 	bl	8005e3c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	2b28      	cmp	r3, #40	; 0x28
 8005cf8:	d141      	bne.n	8005d7e <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8005cfa:	6979      	ldr	r1, [r7, #20]
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f000 f847 	bl	8005d90 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005d02:	e03c      	b.n	8005d7e <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d08:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005d0c:	d014      	beq.n	8005d38 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f7ff fed6 	bl	8005ac0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4a1d      	ldr	r2, [pc, #116]	; (8005d8c <I2C_ITSlaveCplt+0x210>)
 8005d18:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2220      	movs	r2, #32
 8005d1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f7ff fd20 	bl	8005776 <HAL_I2C_ListenCpltCallback>
}
 8005d36:	e022      	b.n	8005d7e <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	2b22      	cmp	r3, #34	; 0x22
 8005d42:	d10e      	bne.n	8005d62 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2220      	movs	r2, #32
 8005d48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2200      	movs	r2, #0
 8005d56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f7ff fcf3 	bl	8005746 <HAL_I2C_SlaveRxCpltCallback>
}
 8005d60:	e00d      	b.n	8005d7e <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2220      	movs	r2, #32
 8005d66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f7ff fcda 	bl	8005732 <HAL_I2C_SlaveTxCpltCallback>
}
 8005d7e:	bf00      	nop
 8005d80:	3718      	adds	r7, #24
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	bf00      	nop
 8005d88:	fe00e800 	.word	0xfe00e800
 8005d8c:	ffff0000 	.word	0xffff0000

08005d90 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b082      	sub	sp, #8
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
 8005d98:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4a26      	ldr	r2, [pc, #152]	; (8005e38 <I2C_ITListenCplt+0xa8>)
 8005d9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2220      	movs	r2, #32
 8005daa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2200      	movs	r2, #0
 8005dba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	089b      	lsrs	r3, r3, #2
 8005dc0:	f003 0301 	and.w	r3, r3, #1
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d022      	beq.n	8005e0e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd2:	b2d2      	uxtb	r2, r2
 8005dd4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dda:	1c5a      	adds	r2, r3, #1
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d012      	beq.n	8005e0e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dec:	3b01      	subs	r3, #1
 8005dee:	b29a      	uxth	r2, r3
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	3b01      	subs	r3, #1
 8005dfc:	b29a      	uxth	r2, r3
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e06:	f043 0204 	orr.w	r2, r3, #4
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005e0e:	f248 0103 	movw	r1, #32771	; 0x8003
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f000 fb94 	bl	8006540 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	2210      	movs	r2, #16
 8005e1e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2200      	movs	r2, #0
 8005e24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f7ff fca4 	bl	8005776 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8005e2e:	bf00      	nop
 8005e30:	3708      	adds	r7, #8
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	bf00      	nop
 8005e38:	ffff0000 	.word	0xffff0000

08005e3c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b084      	sub	sp, #16
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e4c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2200      	movs	r2, #0
 8005e52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4a5d      	ldr	r2, [pc, #372]	; (8005fd0 <I2C_ITError+0x194>)
 8005e5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	431a      	orrs	r2, r3
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8005e6e:	7bfb      	ldrb	r3, [r7, #15]
 8005e70:	2b28      	cmp	r3, #40	; 0x28
 8005e72:	d005      	beq.n	8005e80 <I2C_ITError+0x44>
 8005e74:	7bfb      	ldrb	r3, [r7, #15]
 8005e76:	2b29      	cmp	r3, #41	; 0x29
 8005e78:	d002      	beq.n	8005e80 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8005e7a:	7bfb      	ldrb	r3, [r7, #15]
 8005e7c:	2b2a      	cmp	r3, #42	; 0x2a
 8005e7e:	d10b      	bne.n	8005e98 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005e80:	2103      	movs	r1, #3
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f000 fb5c 	bl	8006540 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2228      	movs	r2, #40	; 0x28
 8005e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	4a50      	ldr	r2, [pc, #320]	; (8005fd4 <I2C_ITError+0x198>)
 8005e94:	635a      	str	r2, [r3, #52]	; 0x34
 8005e96:	e011      	b.n	8005ebc <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005e98:	f248 0103 	movw	r1, #32771	; 0x8003
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f000 fb4f 	bl	8006540 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	2b60      	cmp	r3, #96	; 0x60
 8005eac:	d003      	beq.n	8005eb6 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2220      	movs	r2, #32
 8005eb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ec0:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d039      	beq.n	8005f3e <I2C_ITError+0x102>
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	2b11      	cmp	r3, #17
 8005ece:	d002      	beq.n	8005ed6 <I2C_ITError+0x9a>
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	2b21      	cmp	r3, #33	; 0x21
 8005ed4:	d133      	bne.n	8005f3e <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ee0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ee4:	d107      	bne.n	8005ef6 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005ef4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005efa:	4618      	mov	r0, r3
 8005efc:	f7fe ff14 	bl	8004d28 <HAL_DMA_GetState>
 8005f00:	4603      	mov	r3, r0
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d017      	beq.n	8005f36 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f0a:	4a33      	ldr	r2, [pc, #204]	; (8005fd8 <I2C_ITError+0x19c>)
 8005f0c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f7fe fee2 	bl	8004ce4 <HAL_DMA_Abort_IT>
 8005f20:	4603      	mov	r3, r0
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d04d      	beq.n	8005fc2 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f2c:	687a      	ldr	r2, [r7, #4]
 8005f2e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005f30:	4610      	mov	r0, r2
 8005f32:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005f34:	e045      	b.n	8005fc2 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 f850 	bl	8005fdc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005f3c:	e041      	b.n	8005fc2 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d039      	beq.n	8005fba <I2C_ITError+0x17e>
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	2b12      	cmp	r3, #18
 8005f4a:	d002      	beq.n	8005f52 <I2C_ITError+0x116>
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	2b22      	cmp	r3, #34	; 0x22
 8005f50:	d133      	bne.n	8005fba <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f60:	d107      	bne.n	8005f72 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005f70:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f76:	4618      	mov	r0, r3
 8005f78:	f7fe fed6 	bl	8004d28 <HAL_DMA_GetState>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d017      	beq.n	8005fb2 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f86:	4a14      	ldr	r2, [pc, #80]	; (8005fd8 <I2C_ITError+0x19c>)
 8005f88:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f96:	4618      	mov	r0, r3
 8005f98:	f7fe fea4 	bl	8004ce4 <HAL_DMA_Abort_IT>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d011      	beq.n	8005fc6 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005fac:	4610      	mov	r0, r2
 8005fae:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005fb0:	e009      	b.n	8005fc6 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 f812 	bl	8005fdc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005fb8:	e005      	b.n	8005fc6 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 f80e 	bl	8005fdc <I2C_TreatErrorCallback>
  }
}
 8005fc0:	e002      	b.n	8005fc8 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005fc2:	bf00      	nop
 8005fc4:	e000      	b.n	8005fc8 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005fc6:	bf00      	nop
}
 8005fc8:	bf00      	nop
 8005fca:	3710      	adds	r7, #16
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}
 8005fd0:	ffff0000 	.word	0xffff0000
 8005fd4:	080057b3 	.word	0x080057b3
 8005fd8:	08006073 	.word	0x08006073

08005fdc <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b082      	sub	sp, #8
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	2b60      	cmp	r3, #96	; 0x60
 8005fee:	d10e      	bne.n	800600e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2220      	movs	r2, #32
 8005ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2200      	movs	r2, #0
 8006002:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f7ff fbc9 	bl	800579e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800600c:	e009      	b.n	8006022 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2200      	movs	r2, #0
 8006018:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f7ff fbb4 	bl	800578a <HAL_I2C_ErrorCallback>
}
 8006022:	bf00      	nop
 8006024:	3708      	adds	r7, #8
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}

0800602a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800602a:	b480      	push	{r7}
 800602c:	b083      	sub	sp, #12
 800602e:	af00      	add	r7, sp, #0
 8006030:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	699b      	ldr	r3, [r3, #24]
 8006038:	f003 0302 	and.w	r3, r3, #2
 800603c:	2b02      	cmp	r3, #2
 800603e:	d103      	bne.n	8006048 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	2200      	movs	r2, #0
 8006046:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	699b      	ldr	r3, [r3, #24]
 800604e:	f003 0301 	and.w	r3, r3, #1
 8006052:	2b01      	cmp	r3, #1
 8006054:	d007      	beq.n	8006066 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	699a      	ldr	r2, [r3, #24]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f042 0201 	orr.w	r2, r2, #1
 8006064:	619a      	str	r2, [r3, #24]
  }
}
 8006066:	bf00      	nop
 8006068:	370c      	adds	r7, #12
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr

08006072 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006072:	b580      	push	{r7, lr}
 8006074:	b084      	sub	sp, #16
 8006076:	af00      	add	r7, sp, #0
 8006078:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800607e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006084:	2b00      	cmp	r3, #0
 8006086:	d003      	beq.n	8006090 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800608c:	2200      	movs	r2, #0
 800608e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006094:	2b00      	cmp	r3, #0
 8006096:	d003      	beq.n	80060a0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800609c:	2200      	movs	r2, #0
 800609e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 80060a0:	68f8      	ldr	r0, [r7, #12]
 80060a2:	f7ff ff9b 	bl	8005fdc <I2C_TreatErrorCallback>
}
 80060a6:	bf00      	nop
 80060a8:	3710      	adds	r7, #16
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}

080060ae <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80060ae:	b580      	push	{r7, lr}
 80060b0:	b084      	sub	sp, #16
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	60f8      	str	r0, [r7, #12]
 80060b6:	60b9      	str	r1, [r7, #8]
 80060b8:	603b      	str	r3, [r7, #0]
 80060ba:	4613      	mov	r3, r2
 80060bc:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80060be:	e022      	b.n	8006106 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060c6:	d01e      	beq.n	8006106 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060c8:	f7fe fb70 	bl	80047ac <HAL_GetTick>
 80060cc:	4602      	mov	r2, r0
 80060ce:	69bb      	ldr	r3, [r7, #24]
 80060d0:	1ad3      	subs	r3, r2, r3
 80060d2:	683a      	ldr	r2, [r7, #0]
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d302      	bcc.n	80060de <I2C_WaitOnFlagUntilTimeout+0x30>
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d113      	bne.n	8006106 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060e2:	f043 0220 	orr.w	r2, r3, #32
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2220      	movs	r2, #32
 80060ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2200      	movs	r2, #0
 80060f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2200      	movs	r2, #0
 80060fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	e00f      	b.n	8006126 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	699a      	ldr	r2, [r3, #24]
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	4013      	ands	r3, r2
 8006110:	68ba      	ldr	r2, [r7, #8]
 8006112:	429a      	cmp	r2, r3
 8006114:	bf0c      	ite	eq
 8006116:	2301      	moveq	r3, #1
 8006118:	2300      	movne	r3, #0
 800611a:	b2db      	uxtb	r3, r3
 800611c:	461a      	mov	r2, r3
 800611e:	79fb      	ldrb	r3, [r7, #7]
 8006120:	429a      	cmp	r2, r3
 8006122:	d0cd      	beq.n	80060c0 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006124:	2300      	movs	r3, #0
}
 8006126:	4618      	mov	r0, r3
 8006128:	3710      	adds	r7, #16
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}

0800612e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800612e:	b580      	push	{r7, lr}
 8006130:	b084      	sub	sp, #16
 8006132:	af00      	add	r7, sp, #0
 8006134:	60f8      	str	r0, [r7, #12]
 8006136:	60b9      	str	r1, [r7, #8]
 8006138:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800613a:	e02c      	b.n	8006196 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800613c:	687a      	ldr	r2, [r7, #4]
 800613e:	68b9      	ldr	r1, [r7, #8]
 8006140:	68f8      	ldr	r0, [r7, #12]
 8006142:	f000 f8eb 	bl	800631c <I2C_IsErrorOccurred>
 8006146:	4603      	mov	r3, r0
 8006148:	2b00      	cmp	r3, #0
 800614a:	d001      	beq.n	8006150 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800614c:	2301      	movs	r3, #1
 800614e:	e02a      	b.n	80061a6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006156:	d01e      	beq.n	8006196 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006158:	f7fe fb28 	bl	80047ac <HAL_GetTick>
 800615c:	4602      	mov	r2, r0
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	1ad3      	subs	r3, r2, r3
 8006162:	68ba      	ldr	r2, [r7, #8]
 8006164:	429a      	cmp	r2, r3
 8006166:	d302      	bcc.n	800616e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d113      	bne.n	8006196 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006172:	f043 0220 	orr.w	r2, r3, #32
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2220      	movs	r2, #32
 800617e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2200      	movs	r2, #0
 8006186:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2200      	movs	r2, #0
 800618e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e007      	b.n	80061a6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	699b      	ldr	r3, [r3, #24]
 800619c:	f003 0302 	and.w	r3, r3, #2
 80061a0:	2b02      	cmp	r3, #2
 80061a2:	d1cb      	bne.n	800613c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80061a4:	2300      	movs	r3, #0
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3710      	adds	r7, #16
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}

080061ae <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80061ae:	b580      	push	{r7, lr}
 80061b0:	b084      	sub	sp, #16
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	60f8      	str	r0, [r7, #12]
 80061b6:	60b9      	str	r1, [r7, #8]
 80061b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80061ba:	e028      	b.n	800620e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	68b9      	ldr	r1, [r7, #8]
 80061c0:	68f8      	ldr	r0, [r7, #12]
 80061c2:	f000 f8ab 	bl	800631c <I2C_IsErrorOccurred>
 80061c6:	4603      	mov	r3, r0
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d001      	beq.n	80061d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	e026      	b.n	800621e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061d0:	f7fe faec 	bl	80047ac <HAL_GetTick>
 80061d4:	4602      	mov	r2, r0
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	1ad3      	subs	r3, r2, r3
 80061da:	68ba      	ldr	r2, [r7, #8]
 80061dc:	429a      	cmp	r2, r3
 80061de:	d302      	bcc.n	80061e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d113      	bne.n	800620e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061ea:	f043 0220 	orr.w	r2, r3, #32
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2220      	movs	r2, #32
 80061f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2200      	movs	r2, #0
 80061fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2200      	movs	r2, #0
 8006206:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	e007      	b.n	800621e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	699b      	ldr	r3, [r3, #24]
 8006214:	f003 0320 	and.w	r3, r3, #32
 8006218:	2b20      	cmp	r3, #32
 800621a:	d1cf      	bne.n	80061bc <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800621c:	2300      	movs	r3, #0
}
 800621e:	4618      	mov	r0, r3
 8006220:	3710      	adds	r7, #16
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
	...

08006228 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b084      	sub	sp, #16
 800622c:	af00      	add	r7, sp, #0
 800622e:	60f8      	str	r0, [r7, #12]
 8006230:	60b9      	str	r1, [r7, #8]
 8006232:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006234:	e064      	b.n	8006300 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006236:	687a      	ldr	r2, [r7, #4]
 8006238:	68b9      	ldr	r1, [r7, #8]
 800623a:	68f8      	ldr	r0, [r7, #12]
 800623c:	f000 f86e 	bl	800631c <I2C_IsErrorOccurred>
 8006240:	4603      	mov	r3, r0
 8006242:	2b00      	cmp	r3, #0
 8006244:	d001      	beq.n	800624a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	e062      	b.n	8006310 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	699b      	ldr	r3, [r3, #24]
 8006250:	f003 0320 	and.w	r3, r3, #32
 8006254:	2b20      	cmp	r3, #32
 8006256:	d138      	bne.n	80062ca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	699b      	ldr	r3, [r3, #24]
 800625e:	f003 0304 	and.w	r3, r3, #4
 8006262:	2b04      	cmp	r3, #4
 8006264:	d105      	bne.n	8006272 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800626a:	2b00      	cmp	r3, #0
 800626c:	d001      	beq.n	8006272 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800626e:	2300      	movs	r3, #0
 8006270:	e04e      	b.n	8006310 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	699b      	ldr	r3, [r3, #24]
 8006278:	f003 0310 	and.w	r3, r3, #16
 800627c:	2b10      	cmp	r3, #16
 800627e:	d107      	bne.n	8006290 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	2210      	movs	r2, #16
 8006286:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2204      	movs	r2, #4
 800628c:	645a      	str	r2, [r3, #68]	; 0x44
 800628e:	e002      	b.n	8006296 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2200      	movs	r2, #0
 8006294:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	2220      	movs	r2, #32
 800629c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	6859      	ldr	r1, [r3, #4]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	4b1b      	ldr	r3, [pc, #108]	; (8006318 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80062aa:	400b      	ands	r3, r1
 80062ac:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2220      	movs	r2, #32
 80062b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2200      	movs	r2, #0
 80062ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2200      	movs	r2, #0
 80062c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	e022      	b.n	8006310 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062ca:	f7fe fa6f 	bl	80047ac <HAL_GetTick>
 80062ce:	4602      	mov	r2, r0
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	1ad3      	subs	r3, r2, r3
 80062d4:	68ba      	ldr	r2, [r7, #8]
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d302      	bcc.n	80062e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d10f      	bne.n	8006300 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062e4:	f043 0220 	orr.w	r2, r3, #32
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2220      	movs	r2, #32
 80062f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2200      	movs	r2, #0
 80062f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	e007      	b.n	8006310 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	699b      	ldr	r3, [r3, #24]
 8006306:	f003 0304 	and.w	r3, r3, #4
 800630a:	2b04      	cmp	r3, #4
 800630c:	d193      	bne.n	8006236 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800630e:	2300      	movs	r3, #0
}
 8006310:	4618      	mov	r0, r3
 8006312:	3710      	adds	r7, #16
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}
 8006318:	fe00e800 	.word	0xfe00e800

0800631c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b08a      	sub	sp, #40	; 0x28
 8006320:	af00      	add	r7, sp, #0
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	60b9      	str	r1, [r7, #8]
 8006326:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006328:	2300      	movs	r3, #0
 800632a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	699b      	ldr	r3, [r3, #24]
 8006334:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006336:	2300      	movs	r3, #0
 8006338:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800633e:	69bb      	ldr	r3, [r7, #24]
 8006340:	f003 0310 	and.w	r3, r3, #16
 8006344:	2b00      	cmp	r3, #0
 8006346:	d068      	beq.n	800641a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	2210      	movs	r2, #16
 800634e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006350:	e049      	b.n	80063e6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006358:	d045      	beq.n	80063e6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800635a:	f7fe fa27 	bl	80047ac <HAL_GetTick>
 800635e:	4602      	mov	r2, r0
 8006360:	69fb      	ldr	r3, [r7, #28]
 8006362:	1ad3      	subs	r3, r2, r3
 8006364:	68ba      	ldr	r2, [r7, #8]
 8006366:	429a      	cmp	r2, r3
 8006368:	d302      	bcc.n	8006370 <I2C_IsErrorOccurred+0x54>
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d13a      	bne.n	80063e6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800637a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006382:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	699b      	ldr	r3, [r3, #24]
 800638a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800638e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006392:	d121      	bne.n	80063d8 <I2C_IsErrorOccurred+0xbc>
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800639a:	d01d      	beq.n	80063d8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800639c:	7cfb      	ldrb	r3, [r7, #19]
 800639e:	2b20      	cmp	r3, #32
 80063a0:	d01a      	beq.n	80063d8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	685a      	ldr	r2, [r3, #4]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80063b0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80063b2:	f7fe f9fb 	bl	80047ac <HAL_GetTick>
 80063b6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80063b8:	e00e      	b.n	80063d8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80063ba:	f7fe f9f7 	bl	80047ac <HAL_GetTick>
 80063be:	4602      	mov	r2, r0
 80063c0:	69fb      	ldr	r3, [r7, #28]
 80063c2:	1ad3      	subs	r3, r2, r3
 80063c4:	2b19      	cmp	r3, #25
 80063c6:	d907      	bls.n	80063d8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80063c8:	6a3b      	ldr	r3, [r7, #32]
 80063ca:	f043 0320 	orr.w	r3, r3, #32
 80063ce:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80063d6:	e006      	b.n	80063e6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	699b      	ldr	r3, [r3, #24]
 80063de:	f003 0320 	and.w	r3, r3, #32
 80063e2:	2b20      	cmp	r3, #32
 80063e4:	d1e9      	bne.n	80063ba <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	699b      	ldr	r3, [r3, #24]
 80063ec:	f003 0320 	and.w	r3, r3, #32
 80063f0:	2b20      	cmp	r3, #32
 80063f2:	d003      	beq.n	80063fc <I2C_IsErrorOccurred+0xe0>
 80063f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d0aa      	beq.n	8006352 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80063fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006400:	2b00      	cmp	r3, #0
 8006402:	d103      	bne.n	800640c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	2220      	movs	r2, #32
 800640a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800640c:	6a3b      	ldr	r3, [r7, #32]
 800640e:	f043 0304 	orr.w	r3, r3, #4
 8006412:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006414:	2301      	movs	r3, #1
 8006416:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	699b      	ldr	r3, [r3, #24]
 8006420:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006422:	69bb      	ldr	r3, [r7, #24]
 8006424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006428:	2b00      	cmp	r3, #0
 800642a:	d00b      	beq.n	8006444 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800642c:	6a3b      	ldr	r3, [r7, #32]
 800642e:	f043 0301 	orr.w	r3, r3, #1
 8006432:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f44f 7280 	mov.w	r2, #256	; 0x100
 800643c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800643e:	2301      	movs	r3, #1
 8006440:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006444:	69bb      	ldr	r3, [r7, #24]
 8006446:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800644a:	2b00      	cmp	r3, #0
 800644c:	d00b      	beq.n	8006466 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800644e:	6a3b      	ldr	r3, [r7, #32]
 8006450:	f043 0308 	orr.w	r3, r3, #8
 8006454:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800645e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006460:	2301      	movs	r3, #1
 8006462:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006466:	69bb      	ldr	r3, [r7, #24]
 8006468:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800646c:	2b00      	cmp	r3, #0
 800646e:	d00b      	beq.n	8006488 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006470:	6a3b      	ldr	r3, [r7, #32]
 8006472:	f043 0302 	orr.w	r3, r3, #2
 8006476:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006480:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006488:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800648c:	2b00      	cmp	r3, #0
 800648e:	d01c      	beq.n	80064ca <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006490:	68f8      	ldr	r0, [r7, #12]
 8006492:	f7ff fdca 	bl	800602a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	6859      	ldr	r1, [r3, #4]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	4b0d      	ldr	r3, [pc, #52]	; (80064d8 <I2C_IsErrorOccurred+0x1bc>)
 80064a2:	400b      	ands	r3, r1
 80064a4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064aa:	6a3b      	ldr	r3, [r7, #32]
 80064ac:	431a      	orrs	r2, r3
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2220      	movs	r2, #32
 80064b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2200      	movs	r2, #0
 80064be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2200      	movs	r2, #0
 80064c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80064ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3728      	adds	r7, #40	; 0x28
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}
 80064d6:	bf00      	nop
 80064d8:	fe00e800 	.word	0xfe00e800

080064dc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80064dc:	b480      	push	{r7}
 80064de:	b087      	sub	sp, #28
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	60f8      	str	r0, [r7, #12]
 80064e4:	607b      	str	r3, [r7, #4]
 80064e6:	460b      	mov	r3, r1
 80064e8:	817b      	strh	r3, [r7, #10]
 80064ea:	4613      	mov	r3, r2
 80064ec:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80064ee:	897b      	ldrh	r3, [r7, #10]
 80064f0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80064f4:	7a7b      	ldrb	r3, [r7, #9]
 80064f6:	041b      	lsls	r3, r3, #16
 80064f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80064fc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006502:	6a3b      	ldr	r3, [r7, #32]
 8006504:	4313      	orrs	r3, r2
 8006506:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800650a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	685a      	ldr	r2, [r3, #4]
 8006512:	6a3b      	ldr	r3, [r7, #32]
 8006514:	0d5b      	lsrs	r3, r3, #21
 8006516:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800651a:	4b08      	ldr	r3, [pc, #32]	; (800653c <I2C_TransferConfig+0x60>)
 800651c:	430b      	orrs	r3, r1
 800651e:	43db      	mvns	r3, r3
 8006520:	ea02 0103 	and.w	r1, r2, r3
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	697a      	ldr	r2, [r7, #20]
 800652a:	430a      	orrs	r2, r1
 800652c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800652e:	bf00      	nop
 8006530:	371c      	adds	r7, #28
 8006532:	46bd      	mov	sp, r7
 8006534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006538:	4770      	bx	lr
 800653a:	bf00      	nop
 800653c:	03ff63ff 	.word	0x03ff63ff

08006540 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006540:	b480      	push	{r7}
 8006542:	b085      	sub	sp, #20
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	460b      	mov	r3, r1
 800654a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800654c:	2300      	movs	r3, #0
 800654e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006550:	887b      	ldrh	r3, [r7, #2]
 8006552:	f003 0301 	and.w	r3, r3, #1
 8006556:	2b00      	cmp	r3, #0
 8006558:	d00f      	beq.n	800657a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8006560:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006568:	b2db      	uxtb	r3, r3
 800656a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800656e:	2b28      	cmp	r3, #40	; 0x28
 8006570:	d003      	beq.n	800657a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8006578:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800657a:	887b      	ldrh	r3, [r7, #2]
 800657c:	f003 0302 	and.w	r3, r3, #2
 8006580:	2b00      	cmp	r3, #0
 8006582:	d00f      	beq.n	80065a4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800658a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006592:	b2db      	uxtb	r3, r3
 8006594:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006598:	2b28      	cmp	r3, #40	; 0x28
 800659a:	d003      	beq.n	80065a4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80065a2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80065a4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	da03      	bge.n	80065b4 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80065b2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80065b4:	887b      	ldrh	r3, [r7, #2]
 80065b6:	2b10      	cmp	r3, #16
 80065b8:	d103      	bne.n	80065c2 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80065c0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80065c2:	887b      	ldrh	r3, [r7, #2]
 80065c4:	2b20      	cmp	r3, #32
 80065c6:	d103      	bne.n	80065d0 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f043 0320 	orr.w	r3, r3, #32
 80065ce:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80065d0:	887b      	ldrh	r3, [r7, #2]
 80065d2:	2b40      	cmp	r3, #64	; 0x40
 80065d4:	d103      	bne.n	80065de <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065dc:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	6819      	ldr	r1, [r3, #0]
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	43da      	mvns	r2, r3
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	400a      	ands	r2, r1
 80065ee:	601a      	str	r2, [r3, #0]
}
 80065f0:	bf00      	nop
 80065f2:	3714      	adds	r7, #20
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr

080065fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b083      	sub	sp, #12
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800660c:	b2db      	uxtb	r3, r3
 800660e:	2b20      	cmp	r3, #32
 8006610:	d138      	bne.n	8006684 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006618:	2b01      	cmp	r3, #1
 800661a:	d101      	bne.n	8006620 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800661c:	2302      	movs	r3, #2
 800661e:	e032      	b.n	8006686 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2201      	movs	r2, #1
 8006624:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2224      	movs	r2, #36	; 0x24
 800662c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f022 0201 	bic.w	r2, r2, #1
 800663e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800664e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	6819      	ldr	r1, [r3, #0]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	683a      	ldr	r2, [r7, #0]
 800665c:	430a      	orrs	r2, r1
 800665e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f042 0201 	orr.w	r2, r2, #1
 800666e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2220      	movs	r2, #32
 8006674:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006680:	2300      	movs	r3, #0
 8006682:	e000      	b.n	8006686 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006684:	2302      	movs	r3, #2
  }
}
 8006686:	4618      	mov	r0, r3
 8006688:	370c      	adds	r7, #12
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr

08006692 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006692:	b480      	push	{r7}
 8006694:	b085      	sub	sp, #20
 8006696:	af00      	add	r7, sp, #0
 8006698:	6078      	str	r0, [r7, #4]
 800669a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066a2:	b2db      	uxtb	r3, r3
 80066a4:	2b20      	cmp	r3, #32
 80066a6:	d139      	bne.n	800671c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	d101      	bne.n	80066b6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80066b2:	2302      	movs	r3, #2
 80066b4:	e033      	b.n	800671e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2201      	movs	r2, #1
 80066ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2224      	movs	r2, #36	; 0x24
 80066c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f022 0201 	bic.w	r2, r2, #1
 80066d4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80066e4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	021b      	lsls	r3, r3, #8
 80066ea:	68fa      	ldr	r2, [r7, #12]
 80066ec:	4313      	orrs	r3, r2
 80066ee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	68fa      	ldr	r2, [r7, #12]
 80066f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f042 0201 	orr.w	r2, r2, #1
 8006706:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2220      	movs	r2, #32
 800670c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2200      	movs	r2, #0
 8006714:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006718:	2300      	movs	r3, #0
 800671a:	e000      	b.n	800671e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800671c:	2302      	movs	r3, #2
  }
}
 800671e:	4618      	mov	r0, r3
 8006720:	3714      	adds	r7, #20
 8006722:	46bd      	mov	sp, r7
 8006724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006728:	4770      	bx	lr
	...

0800672c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b082      	sub	sp, #8
 8006730:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006732:	2300      	movs	r3, #0
 8006734:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006736:	4b23      	ldr	r3, [pc, #140]	; (80067c4 <HAL_PWREx_EnableOverDrive+0x98>)
 8006738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800673a:	4a22      	ldr	r2, [pc, #136]	; (80067c4 <HAL_PWREx_EnableOverDrive+0x98>)
 800673c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006740:	6413      	str	r3, [r2, #64]	; 0x40
 8006742:	4b20      	ldr	r3, [pc, #128]	; (80067c4 <HAL_PWREx_EnableOverDrive+0x98>)
 8006744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800674a:	603b      	str	r3, [r7, #0]
 800674c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800674e:	4b1e      	ldr	r3, [pc, #120]	; (80067c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a1d      	ldr	r2, [pc, #116]	; (80067c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006758:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800675a:	f7fe f827 	bl	80047ac <HAL_GetTick>
 800675e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006760:	e009      	b.n	8006776 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006762:	f7fe f823 	bl	80047ac <HAL_GetTick>
 8006766:	4602      	mov	r2, r0
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	1ad3      	subs	r3, r2, r3
 800676c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006770:	d901      	bls.n	8006776 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006772:	2303      	movs	r3, #3
 8006774:	e022      	b.n	80067bc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006776:	4b14      	ldr	r3, [pc, #80]	; (80067c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800677e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006782:	d1ee      	bne.n	8006762 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006784:	4b10      	ldr	r3, [pc, #64]	; (80067c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a0f      	ldr	r2, [pc, #60]	; (80067c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800678a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800678e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006790:	f7fe f80c 	bl	80047ac <HAL_GetTick>
 8006794:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006796:	e009      	b.n	80067ac <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006798:	f7fe f808 	bl	80047ac <HAL_GetTick>
 800679c:	4602      	mov	r2, r0
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	1ad3      	subs	r3, r2, r3
 80067a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80067a6:	d901      	bls.n	80067ac <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80067a8:	2303      	movs	r3, #3
 80067aa:	e007      	b.n	80067bc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80067ac:	4b06      	ldr	r3, [pc, #24]	; (80067c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80067b8:	d1ee      	bne.n	8006798 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80067ba:	2300      	movs	r3, #0
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3708      	adds	r7, #8
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}
 80067c4:	40023800 	.word	0x40023800
 80067c8:	40007000 	.word	0x40007000

080067cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b086      	sub	sp, #24
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80067d4:	2300      	movs	r3, #0
 80067d6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d101      	bne.n	80067e2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	e291      	b.n	8006d06 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f003 0301 	and.w	r3, r3, #1
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	f000 8087 	beq.w	80068fe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80067f0:	4b96      	ldr	r3, [pc, #600]	; (8006a4c <HAL_RCC_OscConfig+0x280>)
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	f003 030c 	and.w	r3, r3, #12
 80067f8:	2b04      	cmp	r3, #4
 80067fa:	d00c      	beq.n	8006816 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80067fc:	4b93      	ldr	r3, [pc, #588]	; (8006a4c <HAL_RCC_OscConfig+0x280>)
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	f003 030c 	and.w	r3, r3, #12
 8006804:	2b08      	cmp	r3, #8
 8006806:	d112      	bne.n	800682e <HAL_RCC_OscConfig+0x62>
 8006808:	4b90      	ldr	r3, [pc, #576]	; (8006a4c <HAL_RCC_OscConfig+0x280>)
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006810:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006814:	d10b      	bne.n	800682e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006816:	4b8d      	ldr	r3, [pc, #564]	; (8006a4c <HAL_RCC_OscConfig+0x280>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800681e:	2b00      	cmp	r3, #0
 8006820:	d06c      	beq.n	80068fc <HAL_RCC_OscConfig+0x130>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d168      	bne.n	80068fc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800682a:	2301      	movs	r3, #1
 800682c:	e26b      	b.n	8006d06 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006836:	d106      	bne.n	8006846 <HAL_RCC_OscConfig+0x7a>
 8006838:	4b84      	ldr	r3, [pc, #528]	; (8006a4c <HAL_RCC_OscConfig+0x280>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a83      	ldr	r2, [pc, #524]	; (8006a4c <HAL_RCC_OscConfig+0x280>)
 800683e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006842:	6013      	str	r3, [r2, #0]
 8006844:	e02e      	b.n	80068a4 <HAL_RCC_OscConfig+0xd8>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d10c      	bne.n	8006868 <HAL_RCC_OscConfig+0x9c>
 800684e:	4b7f      	ldr	r3, [pc, #508]	; (8006a4c <HAL_RCC_OscConfig+0x280>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a7e      	ldr	r2, [pc, #504]	; (8006a4c <HAL_RCC_OscConfig+0x280>)
 8006854:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006858:	6013      	str	r3, [r2, #0]
 800685a:	4b7c      	ldr	r3, [pc, #496]	; (8006a4c <HAL_RCC_OscConfig+0x280>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a7b      	ldr	r2, [pc, #492]	; (8006a4c <HAL_RCC_OscConfig+0x280>)
 8006860:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006864:	6013      	str	r3, [r2, #0]
 8006866:	e01d      	b.n	80068a4 <HAL_RCC_OscConfig+0xd8>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006870:	d10c      	bne.n	800688c <HAL_RCC_OscConfig+0xc0>
 8006872:	4b76      	ldr	r3, [pc, #472]	; (8006a4c <HAL_RCC_OscConfig+0x280>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a75      	ldr	r2, [pc, #468]	; (8006a4c <HAL_RCC_OscConfig+0x280>)
 8006878:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800687c:	6013      	str	r3, [r2, #0]
 800687e:	4b73      	ldr	r3, [pc, #460]	; (8006a4c <HAL_RCC_OscConfig+0x280>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a72      	ldr	r2, [pc, #456]	; (8006a4c <HAL_RCC_OscConfig+0x280>)
 8006884:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006888:	6013      	str	r3, [r2, #0]
 800688a:	e00b      	b.n	80068a4 <HAL_RCC_OscConfig+0xd8>
 800688c:	4b6f      	ldr	r3, [pc, #444]	; (8006a4c <HAL_RCC_OscConfig+0x280>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a6e      	ldr	r2, [pc, #440]	; (8006a4c <HAL_RCC_OscConfig+0x280>)
 8006892:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006896:	6013      	str	r3, [r2, #0]
 8006898:	4b6c      	ldr	r3, [pc, #432]	; (8006a4c <HAL_RCC_OscConfig+0x280>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a6b      	ldr	r2, [pc, #428]	; (8006a4c <HAL_RCC_OscConfig+0x280>)
 800689e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80068a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d013      	beq.n	80068d4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068ac:	f7fd ff7e 	bl	80047ac <HAL_GetTick>
 80068b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068b2:	e008      	b.n	80068c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068b4:	f7fd ff7a 	bl	80047ac <HAL_GetTick>
 80068b8:	4602      	mov	r2, r0
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	1ad3      	subs	r3, r2, r3
 80068be:	2b64      	cmp	r3, #100	; 0x64
 80068c0:	d901      	bls.n	80068c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80068c2:	2303      	movs	r3, #3
 80068c4:	e21f      	b.n	8006d06 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068c6:	4b61      	ldr	r3, [pc, #388]	; (8006a4c <HAL_RCC_OscConfig+0x280>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d0f0      	beq.n	80068b4 <HAL_RCC_OscConfig+0xe8>
 80068d2:	e014      	b.n	80068fe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068d4:	f7fd ff6a 	bl	80047ac <HAL_GetTick>
 80068d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068da:	e008      	b.n	80068ee <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068dc:	f7fd ff66 	bl	80047ac <HAL_GetTick>
 80068e0:	4602      	mov	r2, r0
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	1ad3      	subs	r3, r2, r3
 80068e6:	2b64      	cmp	r3, #100	; 0x64
 80068e8:	d901      	bls.n	80068ee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80068ea:	2303      	movs	r3, #3
 80068ec:	e20b      	b.n	8006d06 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068ee:	4b57      	ldr	r3, [pc, #348]	; (8006a4c <HAL_RCC_OscConfig+0x280>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d1f0      	bne.n	80068dc <HAL_RCC_OscConfig+0x110>
 80068fa:	e000      	b.n	80068fe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f003 0302 	and.w	r3, r3, #2
 8006906:	2b00      	cmp	r3, #0
 8006908:	d069      	beq.n	80069de <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800690a:	4b50      	ldr	r3, [pc, #320]	; (8006a4c <HAL_RCC_OscConfig+0x280>)
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	f003 030c 	and.w	r3, r3, #12
 8006912:	2b00      	cmp	r3, #0
 8006914:	d00b      	beq.n	800692e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006916:	4b4d      	ldr	r3, [pc, #308]	; (8006a4c <HAL_RCC_OscConfig+0x280>)
 8006918:	689b      	ldr	r3, [r3, #8]
 800691a:	f003 030c 	and.w	r3, r3, #12
 800691e:	2b08      	cmp	r3, #8
 8006920:	d11c      	bne.n	800695c <HAL_RCC_OscConfig+0x190>
 8006922:	4b4a      	ldr	r3, [pc, #296]	; (8006a4c <HAL_RCC_OscConfig+0x280>)
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800692a:	2b00      	cmp	r3, #0
 800692c:	d116      	bne.n	800695c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800692e:	4b47      	ldr	r3, [pc, #284]	; (8006a4c <HAL_RCC_OscConfig+0x280>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f003 0302 	and.w	r3, r3, #2
 8006936:	2b00      	cmp	r3, #0
 8006938:	d005      	beq.n	8006946 <HAL_RCC_OscConfig+0x17a>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	68db      	ldr	r3, [r3, #12]
 800693e:	2b01      	cmp	r3, #1
 8006940:	d001      	beq.n	8006946 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	e1df      	b.n	8006d06 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006946:	4b41      	ldr	r3, [pc, #260]	; (8006a4c <HAL_RCC_OscConfig+0x280>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	691b      	ldr	r3, [r3, #16]
 8006952:	00db      	lsls	r3, r3, #3
 8006954:	493d      	ldr	r1, [pc, #244]	; (8006a4c <HAL_RCC_OscConfig+0x280>)
 8006956:	4313      	orrs	r3, r2
 8006958:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800695a:	e040      	b.n	80069de <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	68db      	ldr	r3, [r3, #12]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d023      	beq.n	80069ac <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006964:	4b39      	ldr	r3, [pc, #228]	; (8006a4c <HAL_RCC_OscConfig+0x280>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a38      	ldr	r2, [pc, #224]	; (8006a4c <HAL_RCC_OscConfig+0x280>)
 800696a:	f043 0301 	orr.w	r3, r3, #1
 800696e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006970:	f7fd ff1c 	bl	80047ac <HAL_GetTick>
 8006974:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006976:	e008      	b.n	800698a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006978:	f7fd ff18 	bl	80047ac <HAL_GetTick>
 800697c:	4602      	mov	r2, r0
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	1ad3      	subs	r3, r2, r3
 8006982:	2b02      	cmp	r3, #2
 8006984:	d901      	bls.n	800698a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006986:	2303      	movs	r3, #3
 8006988:	e1bd      	b.n	8006d06 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800698a:	4b30      	ldr	r3, [pc, #192]	; (8006a4c <HAL_RCC_OscConfig+0x280>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f003 0302 	and.w	r3, r3, #2
 8006992:	2b00      	cmp	r3, #0
 8006994:	d0f0      	beq.n	8006978 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006996:	4b2d      	ldr	r3, [pc, #180]	; (8006a4c <HAL_RCC_OscConfig+0x280>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	00db      	lsls	r3, r3, #3
 80069a4:	4929      	ldr	r1, [pc, #164]	; (8006a4c <HAL_RCC_OscConfig+0x280>)
 80069a6:	4313      	orrs	r3, r2
 80069a8:	600b      	str	r3, [r1, #0]
 80069aa:	e018      	b.n	80069de <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80069ac:	4b27      	ldr	r3, [pc, #156]	; (8006a4c <HAL_RCC_OscConfig+0x280>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a26      	ldr	r2, [pc, #152]	; (8006a4c <HAL_RCC_OscConfig+0x280>)
 80069b2:	f023 0301 	bic.w	r3, r3, #1
 80069b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069b8:	f7fd fef8 	bl	80047ac <HAL_GetTick>
 80069bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069be:	e008      	b.n	80069d2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80069c0:	f7fd fef4 	bl	80047ac <HAL_GetTick>
 80069c4:	4602      	mov	r2, r0
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	1ad3      	subs	r3, r2, r3
 80069ca:	2b02      	cmp	r3, #2
 80069cc:	d901      	bls.n	80069d2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80069ce:	2303      	movs	r3, #3
 80069d0:	e199      	b.n	8006d06 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069d2:	4b1e      	ldr	r3, [pc, #120]	; (8006a4c <HAL_RCC_OscConfig+0x280>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f003 0302 	and.w	r3, r3, #2
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d1f0      	bne.n	80069c0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f003 0308 	and.w	r3, r3, #8
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d038      	beq.n	8006a5c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	695b      	ldr	r3, [r3, #20]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d019      	beq.n	8006a26 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80069f2:	4b16      	ldr	r3, [pc, #88]	; (8006a4c <HAL_RCC_OscConfig+0x280>)
 80069f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069f6:	4a15      	ldr	r2, [pc, #84]	; (8006a4c <HAL_RCC_OscConfig+0x280>)
 80069f8:	f043 0301 	orr.w	r3, r3, #1
 80069fc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069fe:	f7fd fed5 	bl	80047ac <HAL_GetTick>
 8006a02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a04:	e008      	b.n	8006a18 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a06:	f7fd fed1 	bl	80047ac <HAL_GetTick>
 8006a0a:	4602      	mov	r2, r0
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	1ad3      	subs	r3, r2, r3
 8006a10:	2b02      	cmp	r3, #2
 8006a12:	d901      	bls.n	8006a18 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006a14:	2303      	movs	r3, #3
 8006a16:	e176      	b.n	8006d06 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a18:	4b0c      	ldr	r3, [pc, #48]	; (8006a4c <HAL_RCC_OscConfig+0x280>)
 8006a1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a1c:	f003 0302 	and.w	r3, r3, #2
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d0f0      	beq.n	8006a06 <HAL_RCC_OscConfig+0x23a>
 8006a24:	e01a      	b.n	8006a5c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a26:	4b09      	ldr	r3, [pc, #36]	; (8006a4c <HAL_RCC_OscConfig+0x280>)
 8006a28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a2a:	4a08      	ldr	r2, [pc, #32]	; (8006a4c <HAL_RCC_OscConfig+0x280>)
 8006a2c:	f023 0301 	bic.w	r3, r3, #1
 8006a30:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a32:	f7fd febb 	bl	80047ac <HAL_GetTick>
 8006a36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a38:	e00a      	b.n	8006a50 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a3a:	f7fd feb7 	bl	80047ac <HAL_GetTick>
 8006a3e:	4602      	mov	r2, r0
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	1ad3      	subs	r3, r2, r3
 8006a44:	2b02      	cmp	r3, #2
 8006a46:	d903      	bls.n	8006a50 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006a48:	2303      	movs	r3, #3
 8006a4a:	e15c      	b.n	8006d06 <HAL_RCC_OscConfig+0x53a>
 8006a4c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a50:	4b91      	ldr	r3, [pc, #580]	; (8006c98 <HAL_RCC_OscConfig+0x4cc>)
 8006a52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a54:	f003 0302 	and.w	r3, r3, #2
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d1ee      	bne.n	8006a3a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f003 0304 	and.w	r3, r3, #4
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	f000 80a4 	beq.w	8006bb2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a6a:	4b8b      	ldr	r3, [pc, #556]	; (8006c98 <HAL_RCC_OscConfig+0x4cc>)
 8006a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d10d      	bne.n	8006a92 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a76:	4b88      	ldr	r3, [pc, #544]	; (8006c98 <HAL_RCC_OscConfig+0x4cc>)
 8006a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a7a:	4a87      	ldr	r2, [pc, #540]	; (8006c98 <HAL_RCC_OscConfig+0x4cc>)
 8006a7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a80:	6413      	str	r3, [r2, #64]	; 0x40
 8006a82:	4b85      	ldr	r3, [pc, #532]	; (8006c98 <HAL_RCC_OscConfig+0x4cc>)
 8006a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a8a:	60bb      	str	r3, [r7, #8]
 8006a8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a92:	4b82      	ldr	r3, [pc, #520]	; (8006c9c <HAL_RCC_OscConfig+0x4d0>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d118      	bne.n	8006ad0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006a9e:	4b7f      	ldr	r3, [pc, #508]	; (8006c9c <HAL_RCC_OscConfig+0x4d0>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a7e      	ldr	r2, [pc, #504]	; (8006c9c <HAL_RCC_OscConfig+0x4d0>)
 8006aa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006aa8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006aaa:	f7fd fe7f 	bl	80047ac <HAL_GetTick>
 8006aae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006ab0:	e008      	b.n	8006ac4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ab2:	f7fd fe7b 	bl	80047ac <HAL_GetTick>
 8006ab6:	4602      	mov	r2, r0
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	1ad3      	subs	r3, r2, r3
 8006abc:	2b64      	cmp	r3, #100	; 0x64
 8006abe:	d901      	bls.n	8006ac4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006ac0:	2303      	movs	r3, #3
 8006ac2:	e120      	b.n	8006d06 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006ac4:	4b75      	ldr	r3, [pc, #468]	; (8006c9c <HAL_RCC_OscConfig+0x4d0>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d0f0      	beq.n	8006ab2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	2b01      	cmp	r3, #1
 8006ad6:	d106      	bne.n	8006ae6 <HAL_RCC_OscConfig+0x31a>
 8006ad8:	4b6f      	ldr	r3, [pc, #444]	; (8006c98 <HAL_RCC_OscConfig+0x4cc>)
 8006ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006adc:	4a6e      	ldr	r2, [pc, #440]	; (8006c98 <HAL_RCC_OscConfig+0x4cc>)
 8006ade:	f043 0301 	orr.w	r3, r3, #1
 8006ae2:	6713      	str	r3, [r2, #112]	; 0x70
 8006ae4:	e02d      	b.n	8006b42 <HAL_RCC_OscConfig+0x376>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	689b      	ldr	r3, [r3, #8]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d10c      	bne.n	8006b08 <HAL_RCC_OscConfig+0x33c>
 8006aee:	4b6a      	ldr	r3, [pc, #424]	; (8006c98 <HAL_RCC_OscConfig+0x4cc>)
 8006af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006af2:	4a69      	ldr	r2, [pc, #420]	; (8006c98 <HAL_RCC_OscConfig+0x4cc>)
 8006af4:	f023 0301 	bic.w	r3, r3, #1
 8006af8:	6713      	str	r3, [r2, #112]	; 0x70
 8006afa:	4b67      	ldr	r3, [pc, #412]	; (8006c98 <HAL_RCC_OscConfig+0x4cc>)
 8006afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006afe:	4a66      	ldr	r2, [pc, #408]	; (8006c98 <HAL_RCC_OscConfig+0x4cc>)
 8006b00:	f023 0304 	bic.w	r3, r3, #4
 8006b04:	6713      	str	r3, [r2, #112]	; 0x70
 8006b06:	e01c      	b.n	8006b42 <HAL_RCC_OscConfig+0x376>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	2b05      	cmp	r3, #5
 8006b0e:	d10c      	bne.n	8006b2a <HAL_RCC_OscConfig+0x35e>
 8006b10:	4b61      	ldr	r3, [pc, #388]	; (8006c98 <HAL_RCC_OscConfig+0x4cc>)
 8006b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b14:	4a60      	ldr	r2, [pc, #384]	; (8006c98 <HAL_RCC_OscConfig+0x4cc>)
 8006b16:	f043 0304 	orr.w	r3, r3, #4
 8006b1a:	6713      	str	r3, [r2, #112]	; 0x70
 8006b1c:	4b5e      	ldr	r3, [pc, #376]	; (8006c98 <HAL_RCC_OscConfig+0x4cc>)
 8006b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b20:	4a5d      	ldr	r2, [pc, #372]	; (8006c98 <HAL_RCC_OscConfig+0x4cc>)
 8006b22:	f043 0301 	orr.w	r3, r3, #1
 8006b26:	6713      	str	r3, [r2, #112]	; 0x70
 8006b28:	e00b      	b.n	8006b42 <HAL_RCC_OscConfig+0x376>
 8006b2a:	4b5b      	ldr	r3, [pc, #364]	; (8006c98 <HAL_RCC_OscConfig+0x4cc>)
 8006b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b2e:	4a5a      	ldr	r2, [pc, #360]	; (8006c98 <HAL_RCC_OscConfig+0x4cc>)
 8006b30:	f023 0301 	bic.w	r3, r3, #1
 8006b34:	6713      	str	r3, [r2, #112]	; 0x70
 8006b36:	4b58      	ldr	r3, [pc, #352]	; (8006c98 <HAL_RCC_OscConfig+0x4cc>)
 8006b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b3a:	4a57      	ldr	r2, [pc, #348]	; (8006c98 <HAL_RCC_OscConfig+0x4cc>)
 8006b3c:	f023 0304 	bic.w	r3, r3, #4
 8006b40:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	689b      	ldr	r3, [r3, #8]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d015      	beq.n	8006b76 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b4a:	f7fd fe2f 	bl	80047ac <HAL_GetTick>
 8006b4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b50:	e00a      	b.n	8006b68 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b52:	f7fd fe2b 	bl	80047ac <HAL_GetTick>
 8006b56:	4602      	mov	r2, r0
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	1ad3      	subs	r3, r2, r3
 8006b5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d901      	bls.n	8006b68 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006b64:	2303      	movs	r3, #3
 8006b66:	e0ce      	b.n	8006d06 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b68:	4b4b      	ldr	r3, [pc, #300]	; (8006c98 <HAL_RCC_OscConfig+0x4cc>)
 8006b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b6c:	f003 0302 	and.w	r3, r3, #2
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d0ee      	beq.n	8006b52 <HAL_RCC_OscConfig+0x386>
 8006b74:	e014      	b.n	8006ba0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b76:	f7fd fe19 	bl	80047ac <HAL_GetTick>
 8006b7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b7c:	e00a      	b.n	8006b94 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b7e:	f7fd fe15 	bl	80047ac <HAL_GetTick>
 8006b82:	4602      	mov	r2, r0
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	1ad3      	subs	r3, r2, r3
 8006b88:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d901      	bls.n	8006b94 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006b90:	2303      	movs	r3, #3
 8006b92:	e0b8      	b.n	8006d06 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b94:	4b40      	ldr	r3, [pc, #256]	; (8006c98 <HAL_RCC_OscConfig+0x4cc>)
 8006b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b98:	f003 0302 	and.w	r3, r3, #2
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d1ee      	bne.n	8006b7e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006ba0:	7dfb      	ldrb	r3, [r7, #23]
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	d105      	bne.n	8006bb2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ba6:	4b3c      	ldr	r3, [pc, #240]	; (8006c98 <HAL_RCC_OscConfig+0x4cc>)
 8006ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006baa:	4a3b      	ldr	r2, [pc, #236]	; (8006c98 <HAL_RCC_OscConfig+0x4cc>)
 8006bac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006bb0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	699b      	ldr	r3, [r3, #24]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	f000 80a4 	beq.w	8006d04 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006bbc:	4b36      	ldr	r3, [pc, #216]	; (8006c98 <HAL_RCC_OscConfig+0x4cc>)
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	f003 030c 	and.w	r3, r3, #12
 8006bc4:	2b08      	cmp	r3, #8
 8006bc6:	d06b      	beq.n	8006ca0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	699b      	ldr	r3, [r3, #24]
 8006bcc:	2b02      	cmp	r3, #2
 8006bce:	d149      	bne.n	8006c64 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bd0:	4b31      	ldr	r3, [pc, #196]	; (8006c98 <HAL_RCC_OscConfig+0x4cc>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a30      	ldr	r2, [pc, #192]	; (8006c98 <HAL_RCC_OscConfig+0x4cc>)
 8006bd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006bda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bdc:	f7fd fde6 	bl	80047ac <HAL_GetTick>
 8006be0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006be2:	e008      	b.n	8006bf6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006be4:	f7fd fde2 	bl	80047ac <HAL_GetTick>
 8006be8:	4602      	mov	r2, r0
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	1ad3      	subs	r3, r2, r3
 8006bee:	2b02      	cmp	r3, #2
 8006bf0:	d901      	bls.n	8006bf6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006bf2:	2303      	movs	r3, #3
 8006bf4:	e087      	b.n	8006d06 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bf6:	4b28      	ldr	r3, [pc, #160]	; (8006c98 <HAL_RCC_OscConfig+0x4cc>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d1f0      	bne.n	8006be4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	69da      	ldr	r2, [r3, #28]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6a1b      	ldr	r3, [r3, #32]
 8006c0a:	431a      	orrs	r2, r3
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c10:	019b      	lsls	r3, r3, #6
 8006c12:	431a      	orrs	r2, r3
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c18:	085b      	lsrs	r3, r3, #1
 8006c1a:	3b01      	subs	r3, #1
 8006c1c:	041b      	lsls	r3, r3, #16
 8006c1e:	431a      	orrs	r2, r3
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c24:	061b      	lsls	r3, r3, #24
 8006c26:	4313      	orrs	r3, r2
 8006c28:	4a1b      	ldr	r2, [pc, #108]	; (8006c98 <HAL_RCC_OscConfig+0x4cc>)
 8006c2a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006c2e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c30:	4b19      	ldr	r3, [pc, #100]	; (8006c98 <HAL_RCC_OscConfig+0x4cc>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a18      	ldr	r2, [pc, #96]	; (8006c98 <HAL_RCC_OscConfig+0x4cc>)
 8006c36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006c3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c3c:	f7fd fdb6 	bl	80047ac <HAL_GetTick>
 8006c40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c42:	e008      	b.n	8006c56 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c44:	f7fd fdb2 	bl	80047ac <HAL_GetTick>
 8006c48:	4602      	mov	r2, r0
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	1ad3      	subs	r3, r2, r3
 8006c4e:	2b02      	cmp	r3, #2
 8006c50:	d901      	bls.n	8006c56 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006c52:	2303      	movs	r3, #3
 8006c54:	e057      	b.n	8006d06 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c56:	4b10      	ldr	r3, [pc, #64]	; (8006c98 <HAL_RCC_OscConfig+0x4cc>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d0f0      	beq.n	8006c44 <HAL_RCC_OscConfig+0x478>
 8006c62:	e04f      	b.n	8006d04 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c64:	4b0c      	ldr	r3, [pc, #48]	; (8006c98 <HAL_RCC_OscConfig+0x4cc>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a0b      	ldr	r2, [pc, #44]	; (8006c98 <HAL_RCC_OscConfig+0x4cc>)
 8006c6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c70:	f7fd fd9c 	bl	80047ac <HAL_GetTick>
 8006c74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c76:	e008      	b.n	8006c8a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c78:	f7fd fd98 	bl	80047ac <HAL_GetTick>
 8006c7c:	4602      	mov	r2, r0
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	1ad3      	subs	r3, r2, r3
 8006c82:	2b02      	cmp	r3, #2
 8006c84:	d901      	bls.n	8006c8a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8006c86:	2303      	movs	r3, #3
 8006c88:	e03d      	b.n	8006d06 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c8a:	4b03      	ldr	r3, [pc, #12]	; (8006c98 <HAL_RCC_OscConfig+0x4cc>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d1f0      	bne.n	8006c78 <HAL_RCC_OscConfig+0x4ac>
 8006c96:	e035      	b.n	8006d04 <HAL_RCC_OscConfig+0x538>
 8006c98:	40023800 	.word	0x40023800
 8006c9c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006ca0:	4b1b      	ldr	r3, [pc, #108]	; (8006d10 <HAL_RCC_OscConfig+0x544>)
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	699b      	ldr	r3, [r3, #24]
 8006caa:	2b01      	cmp	r3, #1
 8006cac:	d028      	beq.n	8006d00 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d121      	bne.n	8006d00 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d11a      	bne.n	8006d00 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006cca:	68fa      	ldr	r2, [r7, #12]
 8006ccc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006cd0:	4013      	ands	r3, r2
 8006cd2:	687a      	ldr	r2, [r7, #4]
 8006cd4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006cd6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d111      	bne.n	8006d00 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ce6:	085b      	lsrs	r3, r3, #1
 8006ce8:	3b01      	subs	r3, #1
 8006cea:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d107      	bne.n	8006d00 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cfa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d001      	beq.n	8006d04 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006d00:	2301      	movs	r3, #1
 8006d02:	e000      	b.n	8006d06 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006d04:	2300      	movs	r3, #0
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3718      	adds	r7, #24
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}
 8006d0e:	bf00      	nop
 8006d10:	40023800 	.word	0x40023800

08006d14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b084      	sub	sp, #16
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d101      	bne.n	8006d2c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	e0d0      	b.n	8006ece <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006d2c:	4b6a      	ldr	r3, [pc, #424]	; (8006ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f003 030f 	and.w	r3, r3, #15
 8006d34:	683a      	ldr	r2, [r7, #0]
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d910      	bls.n	8006d5c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d3a:	4b67      	ldr	r3, [pc, #412]	; (8006ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f023 020f 	bic.w	r2, r3, #15
 8006d42:	4965      	ldr	r1, [pc, #404]	; (8006ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d4a:	4b63      	ldr	r3, [pc, #396]	; (8006ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f003 030f 	and.w	r3, r3, #15
 8006d52:	683a      	ldr	r2, [r7, #0]
 8006d54:	429a      	cmp	r2, r3
 8006d56:	d001      	beq.n	8006d5c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006d58:	2301      	movs	r3, #1
 8006d5a:	e0b8      	b.n	8006ece <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f003 0302 	and.w	r3, r3, #2
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d020      	beq.n	8006daa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f003 0304 	and.w	r3, r3, #4
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d005      	beq.n	8006d80 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006d74:	4b59      	ldr	r3, [pc, #356]	; (8006edc <HAL_RCC_ClockConfig+0x1c8>)
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	4a58      	ldr	r2, [pc, #352]	; (8006edc <HAL_RCC_ClockConfig+0x1c8>)
 8006d7a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006d7e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f003 0308 	and.w	r3, r3, #8
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d005      	beq.n	8006d98 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006d8c:	4b53      	ldr	r3, [pc, #332]	; (8006edc <HAL_RCC_ClockConfig+0x1c8>)
 8006d8e:	689b      	ldr	r3, [r3, #8]
 8006d90:	4a52      	ldr	r2, [pc, #328]	; (8006edc <HAL_RCC_ClockConfig+0x1c8>)
 8006d92:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006d96:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d98:	4b50      	ldr	r3, [pc, #320]	; (8006edc <HAL_RCC_ClockConfig+0x1c8>)
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	494d      	ldr	r1, [pc, #308]	; (8006edc <HAL_RCC_ClockConfig+0x1c8>)
 8006da6:	4313      	orrs	r3, r2
 8006da8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f003 0301 	and.w	r3, r3, #1
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d040      	beq.n	8006e38 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	d107      	bne.n	8006dce <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006dbe:	4b47      	ldr	r3, [pc, #284]	; (8006edc <HAL_RCC_ClockConfig+0x1c8>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d115      	bne.n	8006df6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	e07f      	b.n	8006ece <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	2b02      	cmp	r3, #2
 8006dd4:	d107      	bne.n	8006de6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006dd6:	4b41      	ldr	r3, [pc, #260]	; (8006edc <HAL_RCC_ClockConfig+0x1c8>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d109      	bne.n	8006df6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006de2:	2301      	movs	r3, #1
 8006de4:	e073      	b.n	8006ece <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006de6:	4b3d      	ldr	r3, [pc, #244]	; (8006edc <HAL_RCC_ClockConfig+0x1c8>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f003 0302 	and.w	r3, r3, #2
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d101      	bne.n	8006df6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006df2:	2301      	movs	r3, #1
 8006df4:	e06b      	b.n	8006ece <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006df6:	4b39      	ldr	r3, [pc, #228]	; (8006edc <HAL_RCC_ClockConfig+0x1c8>)
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	f023 0203 	bic.w	r2, r3, #3
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	4936      	ldr	r1, [pc, #216]	; (8006edc <HAL_RCC_ClockConfig+0x1c8>)
 8006e04:	4313      	orrs	r3, r2
 8006e06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e08:	f7fd fcd0 	bl	80047ac <HAL_GetTick>
 8006e0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e0e:	e00a      	b.n	8006e26 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e10:	f7fd fccc 	bl	80047ac <HAL_GetTick>
 8006e14:	4602      	mov	r2, r0
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	1ad3      	subs	r3, r2, r3
 8006e1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d901      	bls.n	8006e26 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006e22:	2303      	movs	r3, #3
 8006e24:	e053      	b.n	8006ece <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e26:	4b2d      	ldr	r3, [pc, #180]	; (8006edc <HAL_RCC_ClockConfig+0x1c8>)
 8006e28:	689b      	ldr	r3, [r3, #8]
 8006e2a:	f003 020c 	and.w	r2, r3, #12
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	009b      	lsls	r3, r3, #2
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d1eb      	bne.n	8006e10 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006e38:	4b27      	ldr	r3, [pc, #156]	; (8006ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f003 030f 	and.w	r3, r3, #15
 8006e40:	683a      	ldr	r2, [r7, #0]
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d210      	bcs.n	8006e68 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e46:	4b24      	ldr	r3, [pc, #144]	; (8006ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f023 020f 	bic.w	r2, r3, #15
 8006e4e:	4922      	ldr	r1, [pc, #136]	; (8006ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	4313      	orrs	r3, r2
 8006e54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e56:	4b20      	ldr	r3, [pc, #128]	; (8006ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f003 030f 	and.w	r3, r3, #15
 8006e5e:	683a      	ldr	r2, [r7, #0]
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d001      	beq.n	8006e68 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006e64:	2301      	movs	r3, #1
 8006e66:	e032      	b.n	8006ece <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f003 0304 	and.w	r3, r3, #4
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d008      	beq.n	8006e86 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e74:	4b19      	ldr	r3, [pc, #100]	; (8006edc <HAL_RCC_ClockConfig+0x1c8>)
 8006e76:	689b      	ldr	r3, [r3, #8]
 8006e78:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	68db      	ldr	r3, [r3, #12]
 8006e80:	4916      	ldr	r1, [pc, #88]	; (8006edc <HAL_RCC_ClockConfig+0x1c8>)
 8006e82:	4313      	orrs	r3, r2
 8006e84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f003 0308 	and.w	r3, r3, #8
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d009      	beq.n	8006ea6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006e92:	4b12      	ldr	r3, [pc, #72]	; (8006edc <HAL_RCC_ClockConfig+0x1c8>)
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	691b      	ldr	r3, [r3, #16]
 8006e9e:	00db      	lsls	r3, r3, #3
 8006ea0:	490e      	ldr	r1, [pc, #56]	; (8006edc <HAL_RCC_ClockConfig+0x1c8>)
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006ea6:	f000 f821 	bl	8006eec <HAL_RCC_GetSysClockFreq>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	4b0b      	ldr	r3, [pc, #44]	; (8006edc <HAL_RCC_ClockConfig+0x1c8>)
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	091b      	lsrs	r3, r3, #4
 8006eb2:	f003 030f 	and.w	r3, r3, #15
 8006eb6:	490a      	ldr	r1, [pc, #40]	; (8006ee0 <HAL_RCC_ClockConfig+0x1cc>)
 8006eb8:	5ccb      	ldrb	r3, [r1, r3]
 8006eba:	fa22 f303 	lsr.w	r3, r2, r3
 8006ebe:	4a09      	ldr	r2, [pc, #36]	; (8006ee4 <HAL_RCC_ClockConfig+0x1d0>)
 8006ec0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006ec2:	4b09      	ldr	r3, [pc, #36]	; (8006ee8 <HAL_RCC_ClockConfig+0x1d4>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f7fd fc2c 	bl	8004724 <HAL_InitTick>

  return HAL_OK;
 8006ecc:	2300      	movs	r3, #0
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3710      	adds	r7, #16
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
 8006ed6:	bf00      	nop
 8006ed8:	40023c00 	.word	0x40023c00
 8006edc:	40023800 	.word	0x40023800
 8006ee0:	08018e1c 	.word	0x08018e1c
 8006ee4:	2000000c 	.word	0x2000000c
 8006ee8:	20000308 	.word	0x20000308

08006eec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006eec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ef0:	b094      	sub	sp, #80	; 0x50
 8006ef2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	647b      	str	r3, [r7, #68]	; 0x44
 8006ef8:	2300      	movs	r3, #0
 8006efa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006efc:	2300      	movs	r3, #0
 8006efe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8006f00:	2300      	movs	r3, #0
 8006f02:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006f04:	4b79      	ldr	r3, [pc, #484]	; (80070ec <HAL_RCC_GetSysClockFreq+0x200>)
 8006f06:	689b      	ldr	r3, [r3, #8]
 8006f08:	f003 030c 	and.w	r3, r3, #12
 8006f0c:	2b08      	cmp	r3, #8
 8006f0e:	d00d      	beq.n	8006f2c <HAL_RCC_GetSysClockFreq+0x40>
 8006f10:	2b08      	cmp	r3, #8
 8006f12:	f200 80e1 	bhi.w	80070d8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d002      	beq.n	8006f20 <HAL_RCC_GetSysClockFreq+0x34>
 8006f1a:	2b04      	cmp	r3, #4
 8006f1c:	d003      	beq.n	8006f26 <HAL_RCC_GetSysClockFreq+0x3a>
 8006f1e:	e0db      	b.n	80070d8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006f20:	4b73      	ldr	r3, [pc, #460]	; (80070f0 <HAL_RCC_GetSysClockFreq+0x204>)
 8006f22:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006f24:	e0db      	b.n	80070de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006f26:	4b73      	ldr	r3, [pc, #460]	; (80070f4 <HAL_RCC_GetSysClockFreq+0x208>)
 8006f28:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006f2a:	e0d8      	b.n	80070de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006f2c:	4b6f      	ldr	r3, [pc, #444]	; (80070ec <HAL_RCC_GetSysClockFreq+0x200>)
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f34:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006f36:	4b6d      	ldr	r3, [pc, #436]	; (80070ec <HAL_RCC_GetSysClockFreq+0x200>)
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d063      	beq.n	800700a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f42:	4b6a      	ldr	r3, [pc, #424]	; (80070ec <HAL_RCC_GetSysClockFreq+0x200>)
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	099b      	lsrs	r3, r3, #6
 8006f48:	2200      	movs	r2, #0
 8006f4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f4c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f54:	633b      	str	r3, [r7, #48]	; 0x30
 8006f56:	2300      	movs	r3, #0
 8006f58:	637b      	str	r3, [r7, #52]	; 0x34
 8006f5a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006f5e:	4622      	mov	r2, r4
 8006f60:	462b      	mov	r3, r5
 8006f62:	f04f 0000 	mov.w	r0, #0
 8006f66:	f04f 0100 	mov.w	r1, #0
 8006f6a:	0159      	lsls	r1, r3, #5
 8006f6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006f70:	0150      	lsls	r0, r2, #5
 8006f72:	4602      	mov	r2, r0
 8006f74:	460b      	mov	r3, r1
 8006f76:	4621      	mov	r1, r4
 8006f78:	1a51      	subs	r1, r2, r1
 8006f7a:	6139      	str	r1, [r7, #16]
 8006f7c:	4629      	mov	r1, r5
 8006f7e:	eb63 0301 	sbc.w	r3, r3, r1
 8006f82:	617b      	str	r3, [r7, #20]
 8006f84:	f04f 0200 	mov.w	r2, #0
 8006f88:	f04f 0300 	mov.w	r3, #0
 8006f8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006f90:	4659      	mov	r1, fp
 8006f92:	018b      	lsls	r3, r1, #6
 8006f94:	4651      	mov	r1, sl
 8006f96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006f9a:	4651      	mov	r1, sl
 8006f9c:	018a      	lsls	r2, r1, #6
 8006f9e:	4651      	mov	r1, sl
 8006fa0:	ebb2 0801 	subs.w	r8, r2, r1
 8006fa4:	4659      	mov	r1, fp
 8006fa6:	eb63 0901 	sbc.w	r9, r3, r1
 8006faa:	f04f 0200 	mov.w	r2, #0
 8006fae:	f04f 0300 	mov.w	r3, #0
 8006fb2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006fb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006fba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006fbe:	4690      	mov	r8, r2
 8006fc0:	4699      	mov	r9, r3
 8006fc2:	4623      	mov	r3, r4
 8006fc4:	eb18 0303 	adds.w	r3, r8, r3
 8006fc8:	60bb      	str	r3, [r7, #8]
 8006fca:	462b      	mov	r3, r5
 8006fcc:	eb49 0303 	adc.w	r3, r9, r3
 8006fd0:	60fb      	str	r3, [r7, #12]
 8006fd2:	f04f 0200 	mov.w	r2, #0
 8006fd6:	f04f 0300 	mov.w	r3, #0
 8006fda:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006fde:	4629      	mov	r1, r5
 8006fe0:	024b      	lsls	r3, r1, #9
 8006fe2:	4621      	mov	r1, r4
 8006fe4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006fe8:	4621      	mov	r1, r4
 8006fea:	024a      	lsls	r2, r1, #9
 8006fec:	4610      	mov	r0, r2
 8006fee:	4619      	mov	r1, r3
 8006ff0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ff6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ff8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006ffc:	f7f9 fe74 	bl	8000ce8 <__aeabi_uldivmod>
 8007000:	4602      	mov	r2, r0
 8007002:	460b      	mov	r3, r1
 8007004:	4613      	mov	r3, r2
 8007006:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007008:	e058      	b.n	80070bc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800700a:	4b38      	ldr	r3, [pc, #224]	; (80070ec <HAL_RCC_GetSysClockFreq+0x200>)
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	099b      	lsrs	r3, r3, #6
 8007010:	2200      	movs	r2, #0
 8007012:	4618      	mov	r0, r3
 8007014:	4611      	mov	r1, r2
 8007016:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800701a:	623b      	str	r3, [r7, #32]
 800701c:	2300      	movs	r3, #0
 800701e:	627b      	str	r3, [r7, #36]	; 0x24
 8007020:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007024:	4642      	mov	r2, r8
 8007026:	464b      	mov	r3, r9
 8007028:	f04f 0000 	mov.w	r0, #0
 800702c:	f04f 0100 	mov.w	r1, #0
 8007030:	0159      	lsls	r1, r3, #5
 8007032:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007036:	0150      	lsls	r0, r2, #5
 8007038:	4602      	mov	r2, r0
 800703a:	460b      	mov	r3, r1
 800703c:	4641      	mov	r1, r8
 800703e:	ebb2 0a01 	subs.w	sl, r2, r1
 8007042:	4649      	mov	r1, r9
 8007044:	eb63 0b01 	sbc.w	fp, r3, r1
 8007048:	f04f 0200 	mov.w	r2, #0
 800704c:	f04f 0300 	mov.w	r3, #0
 8007050:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007054:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007058:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800705c:	ebb2 040a 	subs.w	r4, r2, sl
 8007060:	eb63 050b 	sbc.w	r5, r3, fp
 8007064:	f04f 0200 	mov.w	r2, #0
 8007068:	f04f 0300 	mov.w	r3, #0
 800706c:	00eb      	lsls	r3, r5, #3
 800706e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007072:	00e2      	lsls	r2, r4, #3
 8007074:	4614      	mov	r4, r2
 8007076:	461d      	mov	r5, r3
 8007078:	4643      	mov	r3, r8
 800707a:	18e3      	adds	r3, r4, r3
 800707c:	603b      	str	r3, [r7, #0]
 800707e:	464b      	mov	r3, r9
 8007080:	eb45 0303 	adc.w	r3, r5, r3
 8007084:	607b      	str	r3, [r7, #4]
 8007086:	f04f 0200 	mov.w	r2, #0
 800708a:	f04f 0300 	mov.w	r3, #0
 800708e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007092:	4629      	mov	r1, r5
 8007094:	028b      	lsls	r3, r1, #10
 8007096:	4621      	mov	r1, r4
 8007098:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800709c:	4621      	mov	r1, r4
 800709e:	028a      	lsls	r2, r1, #10
 80070a0:	4610      	mov	r0, r2
 80070a2:	4619      	mov	r1, r3
 80070a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070a6:	2200      	movs	r2, #0
 80070a8:	61bb      	str	r3, [r7, #24]
 80070aa:	61fa      	str	r2, [r7, #28]
 80070ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80070b0:	f7f9 fe1a 	bl	8000ce8 <__aeabi_uldivmod>
 80070b4:	4602      	mov	r2, r0
 80070b6:	460b      	mov	r3, r1
 80070b8:	4613      	mov	r3, r2
 80070ba:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80070bc:	4b0b      	ldr	r3, [pc, #44]	; (80070ec <HAL_RCC_GetSysClockFreq+0x200>)
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	0c1b      	lsrs	r3, r3, #16
 80070c2:	f003 0303 	and.w	r3, r3, #3
 80070c6:	3301      	adds	r3, #1
 80070c8:	005b      	lsls	r3, r3, #1
 80070ca:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80070cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80070ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80070d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80070d6:	e002      	b.n	80070de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80070d8:	4b05      	ldr	r3, [pc, #20]	; (80070f0 <HAL_RCC_GetSysClockFreq+0x204>)
 80070da:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80070dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80070de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	3750      	adds	r7, #80	; 0x50
 80070e4:	46bd      	mov	sp, r7
 80070e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070ea:	bf00      	nop
 80070ec:	40023800 	.word	0x40023800
 80070f0:	00f42400 	.word	0x00f42400
 80070f4:	007a1200 	.word	0x007a1200

080070f8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80070f8:	b480      	push	{r7}
 80070fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80070fc:	4b03      	ldr	r3, [pc, #12]	; (800710c <HAL_RCC_GetHCLKFreq+0x14>)
 80070fe:	681b      	ldr	r3, [r3, #0]
}
 8007100:	4618      	mov	r0, r3
 8007102:	46bd      	mov	sp, r7
 8007104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007108:	4770      	bx	lr
 800710a:	bf00      	nop
 800710c:	2000000c 	.word	0x2000000c

08007110 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007114:	f7ff fff0 	bl	80070f8 <HAL_RCC_GetHCLKFreq>
 8007118:	4602      	mov	r2, r0
 800711a:	4b05      	ldr	r3, [pc, #20]	; (8007130 <HAL_RCC_GetPCLK1Freq+0x20>)
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	0a9b      	lsrs	r3, r3, #10
 8007120:	f003 0307 	and.w	r3, r3, #7
 8007124:	4903      	ldr	r1, [pc, #12]	; (8007134 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007126:	5ccb      	ldrb	r3, [r1, r3]
 8007128:	fa22 f303 	lsr.w	r3, r2, r3
}
 800712c:	4618      	mov	r0, r3
 800712e:	bd80      	pop	{r7, pc}
 8007130:	40023800 	.word	0x40023800
 8007134:	08018e2c 	.word	0x08018e2c

08007138 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800713c:	f7ff ffdc 	bl	80070f8 <HAL_RCC_GetHCLKFreq>
 8007140:	4602      	mov	r2, r0
 8007142:	4b05      	ldr	r3, [pc, #20]	; (8007158 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007144:	689b      	ldr	r3, [r3, #8]
 8007146:	0b5b      	lsrs	r3, r3, #13
 8007148:	f003 0307 	and.w	r3, r3, #7
 800714c:	4903      	ldr	r1, [pc, #12]	; (800715c <HAL_RCC_GetPCLK2Freq+0x24>)
 800714e:	5ccb      	ldrb	r3, [r1, r3]
 8007150:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007154:	4618      	mov	r0, r3
 8007156:	bd80      	pop	{r7, pc}
 8007158:	40023800 	.word	0x40023800
 800715c:	08018e2c 	.word	0x08018e2c

08007160 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b088      	sub	sp, #32
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007168:	2300      	movs	r3, #0
 800716a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800716c:	2300      	movs	r3, #0
 800716e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007170:	2300      	movs	r3, #0
 8007172:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007174:	2300      	movs	r3, #0
 8007176:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007178:	2300      	movs	r3, #0
 800717a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f003 0301 	and.w	r3, r3, #1
 8007184:	2b00      	cmp	r3, #0
 8007186:	d012      	beq.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007188:	4b69      	ldr	r3, [pc, #420]	; (8007330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800718a:	689b      	ldr	r3, [r3, #8]
 800718c:	4a68      	ldr	r2, [pc, #416]	; (8007330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800718e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007192:	6093      	str	r3, [r2, #8]
 8007194:	4b66      	ldr	r3, [pc, #408]	; (8007330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007196:	689a      	ldr	r2, [r3, #8]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800719c:	4964      	ldr	r1, [pc, #400]	; (8007330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800719e:	4313      	orrs	r3, r2
 80071a0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d101      	bne.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80071aa:	2301      	movs	r3, #1
 80071ac:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d017      	beq.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80071ba:	4b5d      	ldr	r3, [pc, #372]	; (8007330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071c8:	4959      	ldr	r1, [pc, #356]	; (8007330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071ca:	4313      	orrs	r3, r2
 80071cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071d8:	d101      	bne.n	80071de <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80071da:	2301      	movs	r3, #1
 80071dc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d101      	bne.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80071e6:	2301      	movs	r3, #1
 80071e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d017      	beq.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80071f6:	4b4e      	ldr	r3, [pc, #312]	; (8007330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071fc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007204:	494a      	ldr	r1, [pc, #296]	; (8007330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007206:	4313      	orrs	r3, r2
 8007208:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007210:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007214:	d101      	bne.n	800721a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007216:	2301      	movs	r3, #1
 8007218:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800721e:	2b00      	cmp	r3, #0
 8007220:	d101      	bne.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007222:	2301      	movs	r3, #1
 8007224:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800722e:	2b00      	cmp	r3, #0
 8007230:	d001      	beq.n	8007236 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007232:	2301      	movs	r3, #1
 8007234:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f003 0320 	and.w	r3, r3, #32
 800723e:	2b00      	cmp	r3, #0
 8007240:	f000 808b 	beq.w	800735a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007244:	4b3a      	ldr	r3, [pc, #232]	; (8007330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007248:	4a39      	ldr	r2, [pc, #228]	; (8007330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800724a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800724e:	6413      	str	r3, [r2, #64]	; 0x40
 8007250:	4b37      	ldr	r3, [pc, #220]	; (8007330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007254:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007258:	60bb      	str	r3, [r7, #8]
 800725a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800725c:	4b35      	ldr	r3, [pc, #212]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a34      	ldr	r2, [pc, #208]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007262:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007266:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007268:	f7fd faa0 	bl	80047ac <HAL_GetTick>
 800726c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800726e:	e008      	b.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007270:	f7fd fa9c 	bl	80047ac <HAL_GetTick>
 8007274:	4602      	mov	r2, r0
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	1ad3      	subs	r3, r2, r3
 800727a:	2b64      	cmp	r3, #100	; 0x64
 800727c:	d901      	bls.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800727e:	2303      	movs	r3, #3
 8007280:	e357      	b.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007282:	4b2c      	ldr	r3, [pc, #176]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800728a:	2b00      	cmp	r3, #0
 800728c:	d0f0      	beq.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800728e:	4b28      	ldr	r3, [pc, #160]	; (8007330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007292:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007296:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d035      	beq.n	800730a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072a6:	693a      	ldr	r2, [r7, #16]
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d02e      	beq.n	800730a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80072ac:	4b20      	ldr	r3, [pc, #128]	; (8007330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072b4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80072b6:	4b1e      	ldr	r3, [pc, #120]	; (8007330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ba:	4a1d      	ldr	r2, [pc, #116]	; (8007330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072c0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80072c2:	4b1b      	ldr	r3, [pc, #108]	; (8007330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072c6:	4a1a      	ldr	r2, [pc, #104]	; (8007330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072cc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80072ce:	4a18      	ldr	r2, [pc, #96]	; (8007330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80072d4:	4b16      	ldr	r3, [pc, #88]	; (8007330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072d8:	f003 0301 	and.w	r3, r3, #1
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d114      	bne.n	800730a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072e0:	f7fd fa64 	bl	80047ac <HAL_GetTick>
 80072e4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072e6:	e00a      	b.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80072e8:	f7fd fa60 	bl	80047ac <HAL_GetTick>
 80072ec:	4602      	mov	r2, r0
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	1ad3      	subs	r3, r2, r3
 80072f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d901      	bls.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80072fa:	2303      	movs	r3, #3
 80072fc:	e319      	b.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072fe:	4b0c      	ldr	r3, [pc, #48]	; (8007330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007302:	f003 0302 	and.w	r3, r3, #2
 8007306:	2b00      	cmp	r3, #0
 8007308:	d0ee      	beq.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800730e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007312:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007316:	d111      	bne.n	800733c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007318:	4b05      	ldr	r3, [pc, #20]	; (8007330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800731a:	689b      	ldr	r3, [r3, #8]
 800731c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007324:	4b04      	ldr	r3, [pc, #16]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007326:	400b      	ands	r3, r1
 8007328:	4901      	ldr	r1, [pc, #4]	; (8007330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800732a:	4313      	orrs	r3, r2
 800732c:	608b      	str	r3, [r1, #8]
 800732e:	e00b      	b.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007330:	40023800 	.word	0x40023800
 8007334:	40007000 	.word	0x40007000
 8007338:	0ffffcff 	.word	0x0ffffcff
 800733c:	4baa      	ldr	r3, [pc, #680]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800733e:	689b      	ldr	r3, [r3, #8]
 8007340:	4aa9      	ldr	r2, [pc, #676]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007342:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007346:	6093      	str	r3, [r2, #8]
 8007348:	4ba7      	ldr	r3, [pc, #668]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800734a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007350:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007354:	49a4      	ldr	r1, [pc, #656]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007356:	4313      	orrs	r3, r2
 8007358:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f003 0310 	and.w	r3, r3, #16
 8007362:	2b00      	cmp	r3, #0
 8007364:	d010      	beq.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007366:	4ba0      	ldr	r3, [pc, #640]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007368:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800736c:	4a9e      	ldr	r2, [pc, #632]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800736e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007372:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8007376:	4b9c      	ldr	r3, [pc, #624]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007378:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007380:	4999      	ldr	r1, [pc, #612]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007382:	4313      	orrs	r3, r2
 8007384:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007390:	2b00      	cmp	r3, #0
 8007392:	d00a      	beq.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007394:	4b94      	ldr	r3, [pc, #592]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800739a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073a2:	4991      	ldr	r1, [pc, #580]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80073a4:	4313      	orrs	r3, r2
 80073a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d00a      	beq.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80073b6:	4b8c      	ldr	r3, [pc, #560]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80073b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80073c4:	4988      	ldr	r1, [pc, #544]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80073c6:	4313      	orrs	r3, r2
 80073c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d00a      	beq.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80073d8:	4b83      	ldr	r3, [pc, #524]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80073da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073e6:	4980      	ldr	r1, [pc, #512]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80073e8:	4313      	orrs	r3, r2
 80073ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d00a      	beq.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80073fa:	4b7b      	ldr	r3, [pc, #492]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80073fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007400:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007408:	4977      	ldr	r1, [pc, #476]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800740a:	4313      	orrs	r3, r2
 800740c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007418:	2b00      	cmp	r3, #0
 800741a:	d00a      	beq.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800741c:	4b72      	ldr	r3, [pc, #456]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800741e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007422:	f023 0203 	bic.w	r2, r3, #3
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800742a:	496f      	ldr	r1, [pc, #444]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800742c:	4313      	orrs	r3, r2
 800742e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800743a:	2b00      	cmp	r3, #0
 800743c:	d00a      	beq.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800743e:	4b6a      	ldr	r3, [pc, #424]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007444:	f023 020c 	bic.w	r2, r3, #12
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800744c:	4966      	ldr	r1, [pc, #408]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800744e:	4313      	orrs	r3, r2
 8007450:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800745c:	2b00      	cmp	r3, #0
 800745e:	d00a      	beq.n	8007476 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007460:	4b61      	ldr	r3, [pc, #388]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007466:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800746e:	495e      	ldr	r1, [pc, #376]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007470:	4313      	orrs	r3, r2
 8007472:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800747e:	2b00      	cmp	r3, #0
 8007480:	d00a      	beq.n	8007498 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007482:	4b59      	ldr	r3, [pc, #356]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007488:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007490:	4955      	ldr	r1, [pc, #340]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007492:	4313      	orrs	r3, r2
 8007494:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d00a      	beq.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80074a4:	4b50      	ldr	r3, [pc, #320]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074b2:	494d      	ldr	r1, [pc, #308]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074b4:	4313      	orrs	r3, r2
 80074b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d00a      	beq.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80074c6:	4b48      	ldr	r3, [pc, #288]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074cc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074d4:	4944      	ldr	r1, [pc, #272]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074d6:	4313      	orrs	r3, r2
 80074d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d00a      	beq.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80074e8:	4b3f      	ldr	r3, [pc, #252]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074ee:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074f6:	493c      	ldr	r1, [pc, #240]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074f8:	4313      	orrs	r3, r2
 80074fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007506:	2b00      	cmp	r3, #0
 8007508:	d00a      	beq.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800750a:	4b37      	ldr	r3, [pc, #220]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800750c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007510:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007518:	4933      	ldr	r1, [pc, #204]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800751a:	4313      	orrs	r3, r2
 800751c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007528:	2b00      	cmp	r3, #0
 800752a:	d00a      	beq.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800752c:	4b2e      	ldr	r3, [pc, #184]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800752e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007532:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800753a:	492b      	ldr	r1, [pc, #172]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800753c:	4313      	orrs	r3, r2
 800753e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800754a:	2b00      	cmp	r3, #0
 800754c:	d011      	beq.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800754e:	4b26      	ldr	r3, [pc, #152]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007550:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007554:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800755c:	4922      	ldr	r1, [pc, #136]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800755e:	4313      	orrs	r3, r2
 8007560:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007568:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800756c:	d101      	bne.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800756e:	2301      	movs	r3, #1
 8007570:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f003 0308 	and.w	r3, r3, #8
 800757a:	2b00      	cmp	r3, #0
 800757c:	d001      	beq.n	8007582 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800757e:	2301      	movs	r3, #1
 8007580:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800758a:	2b00      	cmp	r3, #0
 800758c:	d00a      	beq.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800758e:	4b16      	ldr	r3, [pc, #88]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007590:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007594:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800759c:	4912      	ldr	r1, [pc, #72]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800759e:	4313      	orrs	r3, r2
 80075a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d00b      	beq.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80075b0:	4b0d      	ldr	r3, [pc, #52]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075b6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075c0:	4909      	ldr	r1, [pc, #36]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075c2:	4313      	orrs	r3, r2
 80075c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80075c8:	69fb      	ldr	r3, [r7, #28]
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d006      	beq.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	f000 80d9 	beq.w	800778e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80075dc:	4b02      	ldr	r3, [pc, #8]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a01      	ldr	r2, [pc, #4]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80075e6:	e001      	b.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80075e8:	40023800 	.word	0x40023800
 80075ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075ee:	f7fd f8dd 	bl	80047ac <HAL_GetTick>
 80075f2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80075f4:	e008      	b.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80075f6:	f7fd f8d9 	bl	80047ac <HAL_GetTick>
 80075fa:	4602      	mov	r2, r0
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	1ad3      	subs	r3, r2, r3
 8007600:	2b64      	cmp	r3, #100	; 0x64
 8007602:	d901      	bls.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007604:	2303      	movs	r3, #3
 8007606:	e194      	b.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007608:	4b6c      	ldr	r3, [pc, #432]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007610:	2b00      	cmp	r3, #0
 8007612:	d1f0      	bne.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f003 0301 	and.w	r3, r3, #1
 800761c:	2b00      	cmp	r3, #0
 800761e:	d021      	beq.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007624:	2b00      	cmp	r3, #0
 8007626:	d11d      	bne.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007628:	4b64      	ldr	r3, [pc, #400]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800762a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800762e:	0c1b      	lsrs	r3, r3, #16
 8007630:	f003 0303 	and.w	r3, r3, #3
 8007634:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007636:	4b61      	ldr	r3, [pc, #388]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007638:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800763c:	0e1b      	lsrs	r3, r3, #24
 800763e:	f003 030f 	and.w	r3, r3, #15
 8007642:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	019a      	lsls	r2, r3, #6
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	041b      	lsls	r3, r3, #16
 800764e:	431a      	orrs	r2, r3
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	061b      	lsls	r3, r3, #24
 8007654:	431a      	orrs	r2, r3
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	689b      	ldr	r3, [r3, #8]
 800765a:	071b      	lsls	r3, r3, #28
 800765c:	4957      	ldr	r1, [pc, #348]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800765e:	4313      	orrs	r3, r2
 8007660:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800766c:	2b00      	cmp	r3, #0
 800766e:	d004      	beq.n	800767a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007674:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007678:	d00a      	beq.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007682:	2b00      	cmp	r3, #0
 8007684:	d02e      	beq.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800768a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800768e:	d129      	bne.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007690:	4b4a      	ldr	r3, [pc, #296]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007692:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007696:	0c1b      	lsrs	r3, r3, #16
 8007698:	f003 0303 	and.w	r3, r3, #3
 800769c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800769e:	4b47      	ldr	r3, [pc, #284]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80076a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076a4:	0f1b      	lsrs	r3, r3, #28
 80076a6:	f003 0307 	and.w	r3, r3, #7
 80076aa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	019a      	lsls	r2, r3, #6
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	041b      	lsls	r3, r3, #16
 80076b6:	431a      	orrs	r2, r3
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	68db      	ldr	r3, [r3, #12]
 80076bc:	061b      	lsls	r3, r3, #24
 80076be:	431a      	orrs	r2, r3
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	071b      	lsls	r3, r3, #28
 80076c4:	493d      	ldr	r1, [pc, #244]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80076c6:	4313      	orrs	r3, r2
 80076c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80076cc:	4b3b      	ldr	r3, [pc, #236]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80076ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076d2:	f023 021f 	bic.w	r2, r3, #31
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076da:	3b01      	subs	r3, #1
 80076dc:	4937      	ldr	r1, [pc, #220]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80076de:	4313      	orrs	r3, r2
 80076e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d01d      	beq.n	800772c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80076f0:	4b32      	ldr	r3, [pc, #200]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80076f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076f6:	0e1b      	lsrs	r3, r3, #24
 80076f8:	f003 030f 	and.w	r3, r3, #15
 80076fc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80076fe:	4b2f      	ldr	r3, [pc, #188]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007700:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007704:	0f1b      	lsrs	r3, r3, #28
 8007706:	f003 0307 	and.w	r3, r3, #7
 800770a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	019a      	lsls	r2, r3, #6
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	691b      	ldr	r3, [r3, #16]
 8007716:	041b      	lsls	r3, r3, #16
 8007718:	431a      	orrs	r2, r3
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	061b      	lsls	r3, r3, #24
 800771e:	431a      	orrs	r2, r3
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	071b      	lsls	r3, r3, #28
 8007724:	4925      	ldr	r1, [pc, #148]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007726:	4313      	orrs	r3, r2
 8007728:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007734:	2b00      	cmp	r3, #0
 8007736:	d011      	beq.n	800775c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	019a      	lsls	r2, r3, #6
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	691b      	ldr	r3, [r3, #16]
 8007742:	041b      	lsls	r3, r3, #16
 8007744:	431a      	orrs	r2, r3
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	68db      	ldr	r3, [r3, #12]
 800774a:	061b      	lsls	r3, r3, #24
 800774c:	431a      	orrs	r2, r3
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	689b      	ldr	r3, [r3, #8]
 8007752:	071b      	lsls	r3, r3, #28
 8007754:	4919      	ldr	r1, [pc, #100]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007756:	4313      	orrs	r3, r2
 8007758:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800775c:	4b17      	ldr	r3, [pc, #92]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a16      	ldr	r2, [pc, #88]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007762:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007766:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007768:	f7fd f820 	bl	80047ac <HAL_GetTick>
 800776c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800776e:	e008      	b.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007770:	f7fd f81c 	bl	80047ac <HAL_GetTick>
 8007774:	4602      	mov	r2, r0
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	1ad3      	subs	r3, r2, r3
 800777a:	2b64      	cmp	r3, #100	; 0x64
 800777c:	d901      	bls.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800777e:	2303      	movs	r3, #3
 8007780:	e0d7      	b.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007782:	4b0e      	ldr	r3, [pc, #56]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800778a:	2b00      	cmp	r3, #0
 800778c:	d0f0      	beq.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800778e:	69bb      	ldr	r3, [r7, #24]
 8007790:	2b01      	cmp	r3, #1
 8007792:	f040 80cd 	bne.w	8007930 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007796:	4b09      	ldr	r3, [pc, #36]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a08      	ldr	r2, [pc, #32]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800779c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80077a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077a2:	f7fd f803 	bl	80047ac <HAL_GetTick>
 80077a6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80077a8:	e00a      	b.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80077aa:	f7fc ffff 	bl	80047ac <HAL_GetTick>
 80077ae:	4602      	mov	r2, r0
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	1ad3      	subs	r3, r2, r3
 80077b4:	2b64      	cmp	r3, #100	; 0x64
 80077b6:	d903      	bls.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80077b8:	2303      	movs	r3, #3
 80077ba:	e0ba      	b.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80077bc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80077c0:	4b5e      	ldr	r3, [pc, #376]	; (800793c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80077c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80077cc:	d0ed      	beq.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d003      	beq.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d009      	beq.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d02e      	beq.n	800784c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d12a      	bne.n	800784c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80077f6:	4b51      	ldr	r3, [pc, #324]	; (800793c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80077f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077fc:	0c1b      	lsrs	r3, r3, #16
 80077fe:	f003 0303 	and.w	r3, r3, #3
 8007802:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007804:	4b4d      	ldr	r3, [pc, #308]	; (800793c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800780a:	0f1b      	lsrs	r3, r3, #28
 800780c:	f003 0307 	and.w	r3, r3, #7
 8007810:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	695b      	ldr	r3, [r3, #20]
 8007816:	019a      	lsls	r2, r3, #6
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	041b      	lsls	r3, r3, #16
 800781c:	431a      	orrs	r2, r3
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	699b      	ldr	r3, [r3, #24]
 8007822:	061b      	lsls	r3, r3, #24
 8007824:	431a      	orrs	r2, r3
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	071b      	lsls	r3, r3, #28
 800782a:	4944      	ldr	r1, [pc, #272]	; (800793c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800782c:	4313      	orrs	r3, r2
 800782e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007832:	4b42      	ldr	r3, [pc, #264]	; (800793c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007834:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007838:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007840:	3b01      	subs	r3, #1
 8007842:	021b      	lsls	r3, r3, #8
 8007844:	493d      	ldr	r1, [pc, #244]	; (800793c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007846:	4313      	orrs	r3, r2
 8007848:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007854:	2b00      	cmp	r3, #0
 8007856:	d022      	beq.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800785c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007860:	d11d      	bne.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007862:	4b36      	ldr	r3, [pc, #216]	; (800793c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007868:	0e1b      	lsrs	r3, r3, #24
 800786a:	f003 030f 	and.w	r3, r3, #15
 800786e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007870:	4b32      	ldr	r3, [pc, #200]	; (800793c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007876:	0f1b      	lsrs	r3, r3, #28
 8007878:	f003 0307 	and.w	r3, r3, #7
 800787c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	695b      	ldr	r3, [r3, #20]
 8007882:	019a      	lsls	r2, r3, #6
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6a1b      	ldr	r3, [r3, #32]
 8007888:	041b      	lsls	r3, r3, #16
 800788a:	431a      	orrs	r2, r3
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	061b      	lsls	r3, r3, #24
 8007890:	431a      	orrs	r2, r3
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	071b      	lsls	r3, r3, #28
 8007896:	4929      	ldr	r1, [pc, #164]	; (800793c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007898:	4313      	orrs	r3, r2
 800789a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f003 0308 	and.w	r3, r3, #8
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d028      	beq.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80078aa:	4b24      	ldr	r3, [pc, #144]	; (800793c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80078ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078b0:	0e1b      	lsrs	r3, r3, #24
 80078b2:	f003 030f 	and.w	r3, r3, #15
 80078b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80078b8:	4b20      	ldr	r3, [pc, #128]	; (800793c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80078ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078be:	0c1b      	lsrs	r3, r3, #16
 80078c0:	f003 0303 	and.w	r3, r3, #3
 80078c4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	695b      	ldr	r3, [r3, #20]
 80078ca:	019a      	lsls	r2, r3, #6
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	041b      	lsls	r3, r3, #16
 80078d0:	431a      	orrs	r2, r3
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	061b      	lsls	r3, r3, #24
 80078d6:	431a      	orrs	r2, r3
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	69db      	ldr	r3, [r3, #28]
 80078dc:	071b      	lsls	r3, r3, #28
 80078de:	4917      	ldr	r1, [pc, #92]	; (800793c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80078e0:	4313      	orrs	r3, r2
 80078e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80078e6:	4b15      	ldr	r3, [pc, #84]	; (800793c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80078e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078f4:	4911      	ldr	r1, [pc, #68]	; (800793c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80078f6:	4313      	orrs	r3, r2
 80078f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80078fc:	4b0f      	ldr	r3, [pc, #60]	; (800793c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a0e      	ldr	r2, [pc, #56]	; (800793c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007902:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007906:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007908:	f7fc ff50 	bl	80047ac <HAL_GetTick>
 800790c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800790e:	e008      	b.n	8007922 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007910:	f7fc ff4c 	bl	80047ac <HAL_GetTick>
 8007914:	4602      	mov	r2, r0
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	1ad3      	subs	r3, r2, r3
 800791a:	2b64      	cmp	r3, #100	; 0x64
 800791c:	d901      	bls.n	8007922 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800791e:	2303      	movs	r3, #3
 8007920:	e007      	b.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007922:	4b06      	ldr	r3, [pc, #24]	; (800793c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800792a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800792e:	d1ef      	bne.n	8007910 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8007930:	2300      	movs	r3, #0
}
 8007932:	4618      	mov	r0, r3
 8007934:	3720      	adds	r7, #32
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}
 800793a:	bf00      	nop
 800793c:	40023800 	.word	0x40023800

08007940 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b082      	sub	sp, #8
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d101      	bne.n	8007952 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800794e:	2301      	movs	r3, #1
 8007950:	e049      	b.n	80079e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007958:	b2db      	uxtb	r3, r3
 800795a:	2b00      	cmp	r3, #0
 800795c:	d106      	bne.n	800796c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2200      	movs	r2, #0
 8007962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f7fc fba2 	bl	80040b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2202      	movs	r2, #2
 8007970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681a      	ldr	r2, [r3, #0]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	3304      	adds	r3, #4
 800797c:	4619      	mov	r1, r3
 800797e:	4610      	mov	r0, r2
 8007980:	f000 fcc0 	bl	8008304 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2201      	movs	r2, #1
 8007988:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2201      	movs	r2, #1
 8007990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2201      	movs	r2, #1
 8007998:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2201      	movs	r2, #1
 80079a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2201      	movs	r2, #1
 80079a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2201      	movs	r2, #1
 80079b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2201      	movs	r2, #1
 80079b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2201      	movs	r2, #1
 80079c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2201      	movs	r2, #1
 80079c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2201      	movs	r2, #1
 80079d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2201      	movs	r2, #1
 80079d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2201      	movs	r2, #1
 80079e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80079e4:	2300      	movs	r3, #0
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3708      	adds	r7, #8
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}

080079ee <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80079ee:	b580      	push	{r7, lr}
 80079f0:	b082      	sub	sp, #8
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d101      	bne.n	8007a00 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80079fc:	2301      	movs	r3, #1
 80079fe:	e049      	b.n	8007a94 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a06:	b2db      	uxtb	r3, r3
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d106      	bne.n	8007a1a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f000 f841 	bl	8007a9c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2202      	movs	r2, #2
 8007a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681a      	ldr	r2, [r3, #0]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	3304      	adds	r3, #4
 8007a2a:	4619      	mov	r1, r3
 8007a2c:	4610      	mov	r0, r2
 8007a2e:	f000 fc69 	bl	8008304 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2201      	movs	r2, #1
 8007a36:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2201      	movs	r2, #1
 8007a3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2201      	movs	r2, #1
 8007a46:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2201      	movs	r2, #1
 8007a4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2201      	movs	r2, #1
 8007a56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2201      	movs	r2, #1
 8007a66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2201      	movs	r2, #1
 8007a6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2201      	movs	r2, #1
 8007a76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2201      	movs	r2, #1
 8007a7e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2201      	movs	r2, #1
 8007a86:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2201      	movs	r2, #1
 8007a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007a92:	2300      	movs	r3, #0
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3708      	adds	r7, #8
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}

08007a9c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b083      	sub	sp, #12
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007aa4:	bf00      	nop
 8007aa6:	370c      	adds	r7, #12
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aae:	4770      	bx	lr

08007ab0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b084      	sub	sp, #16
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d109      	bne.n	8007ad4 <HAL_TIM_PWM_Start+0x24>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007ac6:	b2db      	uxtb	r3, r3
 8007ac8:	2b01      	cmp	r3, #1
 8007aca:	bf14      	ite	ne
 8007acc:	2301      	movne	r3, #1
 8007ace:	2300      	moveq	r3, #0
 8007ad0:	b2db      	uxtb	r3, r3
 8007ad2:	e03c      	b.n	8007b4e <HAL_TIM_PWM_Start+0x9e>
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	2b04      	cmp	r3, #4
 8007ad8:	d109      	bne.n	8007aee <HAL_TIM_PWM_Start+0x3e>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007ae0:	b2db      	uxtb	r3, r3
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	bf14      	ite	ne
 8007ae6:	2301      	movne	r3, #1
 8007ae8:	2300      	moveq	r3, #0
 8007aea:	b2db      	uxtb	r3, r3
 8007aec:	e02f      	b.n	8007b4e <HAL_TIM_PWM_Start+0x9e>
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	2b08      	cmp	r3, #8
 8007af2:	d109      	bne.n	8007b08 <HAL_TIM_PWM_Start+0x58>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007afa:	b2db      	uxtb	r3, r3
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	bf14      	ite	ne
 8007b00:	2301      	movne	r3, #1
 8007b02:	2300      	moveq	r3, #0
 8007b04:	b2db      	uxtb	r3, r3
 8007b06:	e022      	b.n	8007b4e <HAL_TIM_PWM_Start+0x9e>
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	2b0c      	cmp	r3, #12
 8007b0c:	d109      	bne.n	8007b22 <HAL_TIM_PWM_Start+0x72>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b14:	b2db      	uxtb	r3, r3
 8007b16:	2b01      	cmp	r3, #1
 8007b18:	bf14      	ite	ne
 8007b1a:	2301      	movne	r3, #1
 8007b1c:	2300      	moveq	r3, #0
 8007b1e:	b2db      	uxtb	r3, r3
 8007b20:	e015      	b.n	8007b4e <HAL_TIM_PWM_Start+0x9e>
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	2b10      	cmp	r3, #16
 8007b26:	d109      	bne.n	8007b3c <HAL_TIM_PWM_Start+0x8c>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007b2e:	b2db      	uxtb	r3, r3
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	bf14      	ite	ne
 8007b34:	2301      	movne	r3, #1
 8007b36:	2300      	moveq	r3, #0
 8007b38:	b2db      	uxtb	r3, r3
 8007b3a:	e008      	b.n	8007b4e <HAL_TIM_PWM_Start+0x9e>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007b42:	b2db      	uxtb	r3, r3
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	bf14      	ite	ne
 8007b48:	2301      	movne	r3, #1
 8007b4a:	2300      	moveq	r3, #0
 8007b4c:	b2db      	uxtb	r3, r3
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d001      	beq.n	8007b56 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007b52:	2301      	movs	r3, #1
 8007b54:	e092      	b.n	8007c7c <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d104      	bne.n	8007b66 <HAL_TIM_PWM_Start+0xb6>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2202      	movs	r2, #2
 8007b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b64:	e023      	b.n	8007bae <HAL_TIM_PWM_Start+0xfe>
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	2b04      	cmp	r3, #4
 8007b6a:	d104      	bne.n	8007b76 <HAL_TIM_PWM_Start+0xc6>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2202      	movs	r2, #2
 8007b70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b74:	e01b      	b.n	8007bae <HAL_TIM_PWM_Start+0xfe>
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	2b08      	cmp	r3, #8
 8007b7a:	d104      	bne.n	8007b86 <HAL_TIM_PWM_Start+0xd6>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2202      	movs	r2, #2
 8007b80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b84:	e013      	b.n	8007bae <HAL_TIM_PWM_Start+0xfe>
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	2b0c      	cmp	r3, #12
 8007b8a:	d104      	bne.n	8007b96 <HAL_TIM_PWM_Start+0xe6>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2202      	movs	r2, #2
 8007b90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007b94:	e00b      	b.n	8007bae <HAL_TIM_PWM_Start+0xfe>
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	2b10      	cmp	r3, #16
 8007b9a:	d104      	bne.n	8007ba6 <HAL_TIM_PWM_Start+0xf6>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2202      	movs	r2, #2
 8007ba0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ba4:	e003      	b.n	8007bae <HAL_TIM_PWM_Start+0xfe>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2202      	movs	r2, #2
 8007baa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	6839      	ldr	r1, [r7, #0]
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f000 ff3c 	bl	8008a34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a30      	ldr	r2, [pc, #192]	; (8007c84 <HAL_TIM_PWM_Start+0x1d4>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d004      	beq.n	8007bd0 <HAL_TIM_PWM_Start+0x120>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a2f      	ldr	r2, [pc, #188]	; (8007c88 <HAL_TIM_PWM_Start+0x1d8>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d101      	bne.n	8007bd4 <HAL_TIM_PWM_Start+0x124>
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	e000      	b.n	8007bd6 <HAL_TIM_PWM_Start+0x126>
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d007      	beq.n	8007bea <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007be8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4a25      	ldr	r2, [pc, #148]	; (8007c84 <HAL_TIM_PWM_Start+0x1d4>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d022      	beq.n	8007c3a <HAL_TIM_PWM_Start+0x18a>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bfc:	d01d      	beq.n	8007c3a <HAL_TIM_PWM_Start+0x18a>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4a22      	ldr	r2, [pc, #136]	; (8007c8c <HAL_TIM_PWM_Start+0x1dc>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d018      	beq.n	8007c3a <HAL_TIM_PWM_Start+0x18a>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4a20      	ldr	r2, [pc, #128]	; (8007c90 <HAL_TIM_PWM_Start+0x1e0>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d013      	beq.n	8007c3a <HAL_TIM_PWM_Start+0x18a>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4a1f      	ldr	r2, [pc, #124]	; (8007c94 <HAL_TIM_PWM_Start+0x1e4>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d00e      	beq.n	8007c3a <HAL_TIM_PWM_Start+0x18a>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a19      	ldr	r2, [pc, #100]	; (8007c88 <HAL_TIM_PWM_Start+0x1d8>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d009      	beq.n	8007c3a <HAL_TIM_PWM_Start+0x18a>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4a1b      	ldr	r2, [pc, #108]	; (8007c98 <HAL_TIM_PWM_Start+0x1e8>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d004      	beq.n	8007c3a <HAL_TIM_PWM_Start+0x18a>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4a19      	ldr	r2, [pc, #100]	; (8007c9c <HAL_TIM_PWM_Start+0x1ec>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d115      	bne.n	8007c66 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	689a      	ldr	r2, [r3, #8]
 8007c40:	4b17      	ldr	r3, [pc, #92]	; (8007ca0 <HAL_TIM_PWM_Start+0x1f0>)
 8007c42:	4013      	ands	r3, r2
 8007c44:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2b06      	cmp	r3, #6
 8007c4a:	d015      	beq.n	8007c78 <HAL_TIM_PWM_Start+0x1c8>
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c52:	d011      	beq.n	8007c78 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	681a      	ldr	r2, [r3, #0]
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f042 0201 	orr.w	r2, r2, #1
 8007c62:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c64:	e008      	b.n	8007c78 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	681a      	ldr	r2, [r3, #0]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f042 0201 	orr.w	r2, r2, #1
 8007c74:	601a      	str	r2, [r3, #0]
 8007c76:	e000      	b.n	8007c7a <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c78:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007c7a:	2300      	movs	r3, #0
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3710      	adds	r7, #16
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}
 8007c84:	40010000 	.word	0x40010000
 8007c88:	40010400 	.word	0x40010400
 8007c8c:	40000400 	.word	0x40000400
 8007c90:	40000800 	.word	0x40000800
 8007c94:	40000c00 	.word	0x40000c00
 8007c98:	40014000 	.word	0x40014000
 8007c9c:	40001800 	.word	0x40001800
 8007ca0:	00010007 	.word	0x00010007

08007ca4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b082      	sub	sp, #8
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	691b      	ldr	r3, [r3, #16]
 8007cb2:	f003 0302 	and.w	r3, r3, #2
 8007cb6:	2b02      	cmp	r3, #2
 8007cb8:	d122      	bne.n	8007d00 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	68db      	ldr	r3, [r3, #12]
 8007cc0:	f003 0302 	and.w	r3, r3, #2
 8007cc4:	2b02      	cmp	r3, #2
 8007cc6:	d11b      	bne.n	8007d00 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f06f 0202 	mvn.w	r2, #2
 8007cd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2201      	movs	r2, #1
 8007cd6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	699b      	ldr	r3, [r3, #24]
 8007cde:	f003 0303 	and.w	r3, r3, #3
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d003      	beq.n	8007cee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f000 faee 	bl	80082c8 <HAL_TIM_IC_CaptureCallback>
 8007cec:	e005      	b.n	8007cfa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f000 fae0 	bl	80082b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f000 faf1 	bl	80082dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	691b      	ldr	r3, [r3, #16]
 8007d06:	f003 0304 	and.w	r3, r3, #4
 8007d0a:	2b04      	cmp	r3, #4
 8007d0c:	d122      	bne.n	8007d54 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	68db      	ldr	r3, [r3, #12]
 8007d14:	f003 0304 	and.w	r3, r3, #4
 8007d18:	2b04      	cmp	r3, #4
 8007d1a:	d11b      	bne.n	8007d54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f06f 0204 	mvn.w	r2, #4
 8007d24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2202      	movs	r2, #2
 8007d2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	699b      	ldr	r3, [r3, #24]
 8007d32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d003      	beq.n	8007d42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f000 fac4 	bl	80082c8 <HAL_TIM_IC_CaptureCallback>
 8007d40:	e005      	b.n	8007d4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 fab6 	bl	80082b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f000 fac7 	bl	80082dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2200      	movs	r2, #0
 8007d52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	691b      	ldr	r3, [r3, #16]
 8007d5a:	f003 0308 	and.w	r3, r3, #8
 8007d5e:	2b08      	cmp	r3, #8
 8007d60:	d122      	bne.n	8007da8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	68db      	ldr	r3, [r3, #12]
 8007d68:	f003 0308 	and.w	r3, r3, #8
 8007d6c:	2b08      	cmp	r3, #8
 8007d6e:	d11b      	bne.n	8007da8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f06f 0208 	mvn.w	r2, #8
 8007d78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2204      	movs	r2, #4
 8007d7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	69db      	ldr	r3, [r3, #28]
 8007d86:	f003 0303 	and.w	r3, r3, #3
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d003      	beq.n	8007d96 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f000 fa9a 	bl	80082c8 <HAL_TIM_IC_CaptureCallback>
 8007d94:	e005      	b.n	8007da2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f000 fa8c 	bl	80082b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f000 fa9d 	bl	80082dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2200      	movs	r2, #0
 8007da6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	691b      	ldr	r3, [r3, #16]
 8007dae:	f003 0310 	and.w	r3, r3, #16
 8007db2:	2b10      	cmp	r3, #16
 8007db4:	d122      	bne.n	8007dfc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	68db      	ldr	r3, [r3, #12]
 8007dbc:	f003 0310 	and.w	r3, r3, #16
 8007dc0:	2b10      	cmp	r3, #16
 8007dc2:	d11b      	bne.n	8007dfc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f06f 0210 	mvn.w	r2, #16
 8007dcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2208      	movs	r2, #8
 8007dd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	69db      	ldr	r3, [r3, #28]
 8007dda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d003      	beq.n	8007dea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f000 fa70 	bl	80082c8 <HAL_TIM_IC_CaptureCallback>
 8007de8:	e005      	b.n	8007df6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f000 fa62 	bl	80082b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f000 fa73 	bl	80082dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	691b      	ldr	r3, [r3, #16]
 8007e02:	f003 0301 	and.w	r3, r3, #1
 8007e06:	2b01      	cmp	r3, #1
 8007e08:	d10e      	bne.n	8007e28 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	68db      	ldr	r3, [r3, #12]
 8007e10:	f003 0301 	and.w	r3, r3, #1
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	d107      	bne.n	8007e28 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f06f 0201 	mvn.w	r2, #1
 8007e20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f000 fa3c 	bl	80082a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	691b      	ldr	r3, [r3, #16]
 8007e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e32:	2b80      	cmp	r3, #128	; 0x80
 8007e34:	d10e      	bne.n	8007e54 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	68db      	ldr	r3, [r3, #12]
 8007e3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e40:	2b80      	cmp	r3, #128	; 0x80
 8007e42:	d107      	bne.n	8007e54 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007e4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f000 feae 	bl	8008bb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	691b      	ldr	r3, [r3, #16]
 8007e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e62:	d10e      	bne.n	8007e82 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	68db      	ldr	r3, [r3, #12]
 8007e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e6e:	2b80      	cmp	r3, #128	; 0x80
 8007e70:	d107      	bne.n	8007e82 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007e7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f000 fea1 	bl	8008bc4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	691b      	ldr	r3, [r3, #16]
 8007e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e8c:	2b40      	cmp	r3, #64	; 0x40
 8007e8e:	d10e      	bne.n	8007eae <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	68db      	ldr	r3, [r3, #12]
 8007e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e9a:	2b40      	cmp	r3, #64	; 0x40
 8007e9c:	d107      	bne.n	8007eae <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007ea6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f000 fa21 	bl	80082f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	691b      	ldr	r3, [r3, #16]
 8007eb4:	f003 0320 	and.w	r3, r3, #32
 8007eb8:	2b20      	cmp	r3, #32
 8007eba:	d10e      	bne.n	8007eda <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	68db      	ldr	r3, [r3, #12]
 8007ec2:	f003 0320 	and.w	r3, r3, #32
 8007ec6:	2b20      	cmp	r3, #32
 8007ec8:	d107      	bne.n	8007eda <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f06f 0220 	mvn.w	r2, #32
 8007ed2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f000 fe61 	bl	8008b9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007eda:	bf00      	nop
 8007edc:	3708      	adds	r7, #8
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}
	...

08007ee4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b086      	sub	sp, #24
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	60f8      	str	r0, [r7, #12]
 8007eec:	60b9      	str	r1, [r7, #8]
 8007eee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007efa:	2b01      	cmp	r3, #1
 8007efc:	d101      	bne.n	8007f02 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007efe:	2302      	movs	r3, #2
 8007f00:	e0ff      	b.n	8008102 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2201      	movs	r2, #1
 8007f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2b14      	cmp	r3, #20
 8007f0e:	f200 80f0 	bhi.w	80080f2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007f12:	a201      	add	r2, pc, #4	; (adr r2, 8007f18 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f18:	08007f6d 	.word	0x08007f6d
 8007f1c:	080080f3 	.word	0x080080f3
 8007f20:	080080f3 	.word	0x080080f3
 8007f24:	080080f3 	.word	0x080080f3
 8007f28:	08007fad 	.word	0x08007fad
 8007f2c:	080080f3 	.word	0x080080f3
 8007f30:	080080f3 	.word	0x080080f3
 8007f34:	080080f3 	.word	0x080080f3
 8007f38:	08007fef 	.word	0x08007fef
 8007f3c:	080080f3 	.word	0x080080f3
 8007f40:	080080f3 	.word	0x080080f3
 8007f44:	080080f3 	.word	0x080080f3
 8007f48:	0800802f 	.word	0x0800802f
 8007f4c:	080080f3 	.word	0x080080f3
 8007f50:	080080f3 	.word	0x080080f3
 8007f54:	080080f3 	.word	0x080080f3
 8007f58:	08008071 	.word	0x08008071
 8007f5c:	080080f3 	.word	0x080080f3
 8007f60:	080080f3 	.word	0x080080f3
 8007f64:	080080f3 	.word	0x080080f3
 8007f68:	080080b1 	.word	0x080080b1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	68b9      	ldr	r1, [r7, #8]
 8007f72:	4618      	mov	r0, r3
 8007f74:	f000 fa66 	bl	8008444 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	699a      	ldr	r2, [r3, #24]
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f042 0208 	orr.w	r2, r2, #8
 8007f86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	699a      	ldr	r2, [r3, #24]
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f022 0204 	bic.w	r2, r2, #4
 8007f96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	6999      	ldr	r1, [r3, #24]
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	691a      	ldr	r2, [r3, #16]
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	430a      	orrs	r2, r1
 8007fa8:	619a      	str	r2, [r3, #24]
      break;
 8007faa:	e0a5      	b.n	80080f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	68b9      	ldr	r1, [r7, #8]
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f000 fab8 	bl	8008528 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	699a      	ldr	r2, [r3, #24]
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007fc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	699a      	ldr	r2, [r3, #24]
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007fd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	6999      	ldr	r1, [r3, #24]
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	691b      	ldr	r3, [r3, #16]
 8007fe2:	021a      	lsls	r2, r3, #8
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	430a      	orrs	r2, r1
 8007fea:	619a      	str	r2, [r3, #24]
      break;
 8007fec:	e084      	b.n	80080f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	68b9      	ldr	r1, [r7, #8]
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f000 fb0f 	bl	8008618 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	69da      	ldr	r2, [r3, #28]
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f042 0208 	orr.w	r2, r2, #8
 8008008:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	69da      	ldr	r2, [r3, #28]
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f022 0204 	bic.w	r2, r2, #4
 8008018:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	69d9      	ldr	r1, [r3, #28]
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	691a      	ldr	r2, [r3, #16]
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	430a      	orrs	r2, r1
 800802a:	61da      	str	r2, [r3, #28]
      break;
 800802c:	e064      	b.n	80080f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	68b9      	ldr	r1, [r7, #8]
 8008034:	4618      	mov	r0, r3
 8008036:	f000 fb65 	bl	8008704 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	69da      	ldr	r2, [r3, #28]
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008048:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	69da      	ldr	r2, [r3, #28]
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008058:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	69d9      	ldr	r1, [r3, #28]
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	691b      	ldr	r3, [r3, #16]
 8008064:	021a      	lsls	r2, r3, #8
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	430a      	orrs	r2, r1
 800806c:	61da      	str	r2, [r3, #28]
      break;
 800806e:	e043      	b.n	80080f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	68b9      	ldr	r1, [r7, #8]
 8008076:	4618      	mov	r0, r3
 8008078:	f000 fb9c 	bl	80087b4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f042 0208 	orr.w	r2, r2, #8
 800808a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f022 0204 	bic.w	r2, r2, #4
 800809a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	691a      	ldr	r2, [r3, #16]
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	430a      	orrs	r2, r1
 80080ac:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80080ae:	e023      	b.n	80080f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	68b9      	ldr	r1, [r7, #8]
 80080b6:	4618      	mov	r0, r3
 80080b8:	f000 fbce 	bl	8008858 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80080ca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80080da:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	691b      	ldr	r3, [r3, #16]
 80080e6:	021a      	lsls	r2, r3, #8
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	430a      	orrs	r2, r1
 80080ee:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80080f0:	e002      	b.n	80080f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80080f2:	2301      	movs	r3, #1
 80080f4:	75fb      	strb	r3, [r7, #23]
      break;
 80080f6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	2200      	movs	r2, #0
 80080fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008100:	7dfb      	ldrb	r3, [r7, #23]
}
 8008102:	4618      	mov	r0, r3
 8008104:	3718      	adds	r7, #24
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}
 800810a:	bf00      	nop

0800810c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b084      	sub	sp, #16
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008116:	2300      	movs	r3, #0
 8008118:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008120:	2b01      	cmp	r3, #1
 8008122:	d101      	bne.n	8008128 <HAL_TIM_ConfigClockSource+0x1c>
 8008124:	2302      	movs	r3, #2
 8008126:	e0b4      	b.n	8008292 <HAL_TIM_ConfigClockSource+0x186>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2201      	movs	r2, #1
 800812c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2202      	movs	r2, #2
 8008134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	689b      	ldr	r3, [r3, #8]
 800813e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008140:	68ba      	ldr	r2, [r7, #8]
 8008142:	4b56      	ldr	r3, [pc, #344]	; (800829c <HAL_TIM_ConfigClockSource+0x190>)
 8008144:	4013      	ands	r3, r2
 8008146:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800814e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	68ba      	ldr	r2, [r7, #8]
 8008156:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008160:	d03e      	beq.n	80081e0 <HAL_TIM_ConfigClockSource+0xd4>
 8008162:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008166:	f200 8087 	bhi.w	8008278 <HAL_TIM_ConfigClockSource+0x16c>
 800816a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800816e:	f000 8086 	beq.w	800827e <HAL_TIM_ConfigClockSource+0x172>
 8008172:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008176:	d87f      	bhi.n	8008278 <HAL_TIM_ConfigClockSource+0x16c>
 8008178:	2b70      	cmp	r3, #112	; 0x70
 800817a:	d01a      	beq.n	80081b2 <HAL_TIM_ConfigClockSource+0xa6>
 800817c:	2b70      	cmp	r3, #112	; 0x70
 800817e:	d87b      	bhi.n	8008278 <HAL_TIM_ConfigClockSource+0x16c>
 8008180:	2b60      	cmp	r3, #96	; 0x60
 8008182:	d050      	beq.n	8008226 <HAL_TIM_ConfigClockSource+0x11a>
 8008184:	2b60      	cmp	r3, #96	; 0x60
 8008186:	d877      	bhi.n	8008278 <HAL_TIM_ConfigClockSource+0x16c>
 8008188:	2b50      	cmp	r3, #80	; 0x50
 800818a:	d03c      	beq.n	8008206 <HAL_TIM_ConfigClockSource+0xfa>
 800818c:	2b50      	cmp	r3, #80	; 0x50
 800818e:	d873      	bhi.n	8008278 <HAL_TIM_ConfigClockSource+0x16c>
 8008190:	2b40      	cmp	r3, #64	; 0x40
 8008192:	d058      	beq.n	8008246 <HAL_TIM_ConfigClockSource+0x13a>
 8008194:	2b40      	cmp	r3, #64	; 0x40
 8008196:	d86f      	bhi.n	8008278 <HAL_TIM_ConfigClockSource+0x16c>
 8008198:	2b30      	cmp	r3, #48	; 0x30
 800819a:	d064      	beq.n	8008266 <HAL_TIM_ConfigClockSource+0x15a>
 800819c:	2b30      	cmp	r3, #48	; 0x30
 800819e:	d86b      	bhi.n	8008278 <HAL_TIM_ConfigClockSource+0x16c>
 80081a0:	2b20      	cmp	r3, #32
 80081a2:	d060      	beq.n	8008266 <HAL_TIM_ConfigClockSource+0x15a>
 80081a4:	2b20      	cmp	r3, #32
 80081a6:	d867      	bhi.n	8008278 <HAL_TIM_ConfigClockSource+0x16c>
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d05c      	beq.n	8008266 <HAL_TIM_ConfigClockSource+0x15a>
 80081ac:	2b10      	cmp	r3, #16
 80081ae:	d05a      	beq.n	8008266 <HAL_TIM_ConfigClockSource+0x15a>
 80081b0:	e062      	b.n	8008278 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6818      	ldr	r0, [r3, #0]
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	6899      	ldr	r1, [r3, #8]
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	685a      	ldr	r2, [r3, #4]
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	68db      	ldr	r3, [r3, #12]
 80081c2:	f000 fc17 	bl	80089f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	689b      	ldr	r3, [r3, #8]
 80081cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80081d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	68ba      	ldr	r2, [r7, #8]
 80081dc:	609a      	str	r2, [r3, #8]
      break;
 80081de:	e04f      	b.n	8008280 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6818      	ldr	r0, [r3, #0]
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	6899      	ldr	r1, [r3, #8]
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	685a      	ldr	r2, [r3, #4]
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	68db      	ldr	r3, [r3, #12]
 80081f0:	f000 fc00 	bl	80089f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	689a      	ldr	r2, [r3, #8]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008202:	609a      	str	r2, [r3, #8]
      break;
 8008204:	e03c      	b.n	8008280 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6818      	ldr	r0, [r3, #0]
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	6859      	ldr	r1, [r3, #4]
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	68db      	ldr	r3, [r3, #12]
 8008212:	461a      	mov	r2, r3
 8008214:	f000 fb74 	bl	8008900 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	2150      	movs	r1, #80	; 0x50
 800821e:	4618      	mov	r0, r3
 8008220:	f000 fbcd 	bl	80089be <TIM_ITRx_SetConfig>
      break;
 8008224:	e02c      	b.n	8008280 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6818      	ldr	r0, [r3, #0]
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	6859      	ldr	r1, [r3, #4]
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	68db      	ldr	r3, [r3, #12]
 8008232:	461a      	mov	r2, r3
 8008234:	f000 fb93 	bl	800895e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	2160      	movs	r1, #96	; 0x60
 800823e:	4618      	mov	r0, r3
 8008240:	f000 fbbd 	bl	80089be <TIM_ITRx_SetConfig>
      break;
 8008244:	e01c      	b.n	8008280 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6818      	ldr	r0, [r3, #0]
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	6859      	ldr	r1, [r3, #4]
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	68db      	ldr	r3, [r3, #12]
 8008252:	461a      	mov	r2, r3
 8008254:	f000 fb54 	bl	8008900 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	2140      	movs	r1, #64	; 0x40
 800825e:	4618      	mov	r0, r3
 8008260:	f000 fbad 	bl	80089be <TIM_ITRx_SetConfig>
      break;
 8008264:	e00c      	b.n	8008280 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681a      	ldr	r2, [r3, #0]
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4619      	mov	r1, r3
 8008270:	4610      	mov	r0, r2
 8008272:	f000 fba4 	bl	80089be <TIM_ITRx_SetConfig>
      break;
 8008276:	e003      	b.n	8008280 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008278:	2301      	movs	r3, #1
 800827a:	73fb      	strb	r3, [r7, #15]
      break;
 800827c:	e000      	b.n	8008280 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800827e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2201      	movs	r2, #1
 8008284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2200      	movs	r2, #0
 800828c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008290:	7bfb      	ldrb	r3, [r7, #15]
}
 8008292:	4618      	mov	r0, r3
 8008294:	3710      	adds	r7, #16
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}
 800829a:	bf00      	nop
 800829c:	fffeff88 	.word	0xfffeff88

080082a0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80082a0:	b480      	push	{r7}
 80082a2:	b083      	sub	sp, #12
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80082a8:	bf00      	nop
 80082aa:	370c      	adds	r7, #12
 80082ac:	46bd      	mov	sp, r7
 80082ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b2:	4770      	bx	lr

080082b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b083      	sub	sp, #12
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80082bc:	bf00      	nop
 80082be:	370c      	adds	r7, #12
 80082c0:	46bd      	mov	sp, r7
 80082c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c6:	4770      	bx	lr

080082c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b083      	sub	sp, #12
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80082d0:	bf00      	nop
 80082d2:	370c      	adds	r7, #12
 80082d4:	46bd      	mov	sp, r7
 80082d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082da:	4770      	bx	lr

080082dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80082dc:	b480      	push	{r7}
 80082de:	b083      	sub	sp, #12
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80082e4:	bf00      	nop
 80082e6:	370c      	adds	r7, #12
 80082e8:	46bd      	mov	sp, r7
 80082ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ee:	4770      	bx	lr

080082f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b083      	sub	sp, #12
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80082f8:	bf00      	nop
 80082fa:	370c      	adds	r7, #12
 80082fc:	46bd      	mov	sp, r7
 80082fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008302:	4770      	bx	lr

08008304 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008304:	b480      	push	{r7}
 8008306:	b085      	sub	sp, #20
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
 800830c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	4a40      	ldr	r2, [pc, #256]	; (8008418 <TIM_Base_SetConfig+0x114>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d013      	beq.n	8008344 <TIM_Base_SetConfig+0x40>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008322:	d00f      	beq.n	8008344 <TIM_Base_SetConfig+0x40>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	4a3d      	ldr	r2, [pc, #244]	; (800841c <TIM_Base_SetConfig+0x118>)
 8008328:	4293      	cmp	r3, r2
 800832a:	d00b      	beq.n	8008344 <TIM_Base_SetConfig+0x40>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	4a3c      	ldr	r2, [pc, #240]	; (8008420 <TIM_Base_SetConfig+0x11c>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d007      	beq.n	8008344 <TIM_Base_SetConfig+0x40>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	4a3b      	ldr	r2, [pc, #236]	; (8008424 <TIM_Base_SetConfig+0x120>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d003      	beq.n	8008344 <TIM_Base_SetConfig+0x40>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	4a3a      	ldr	r2, [pc, #232]	; (8008428 <TIM_Base_SetConfig+0x124>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d108      	bne.n	8008356 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800834a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	685b      	ldr	r3, [r3, #4]
 8008350:	68fa      	ldr	r2, [r7, #12]
 8008352:	4313      	orrs	r3, r2
 8008354:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	4a2f      	ldr	r2, [pc, #188]	; (8008418 <TIM_Base_SetConfig+0x114>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d02b      	beq.n	80083b6 <TIM_Base_SetConfig+0xb2>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008364:	d027      	beq.n	80083b6 <TIM_Base_SetConfig+0xb2>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	4a2c      	ldr	r2, [pc, #176]	; (800841c <TIM_Base_SetConfig+0x118>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d023      	beq.n	80083b6 <TIM_Base_SetConfig+0xb2>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	4a2b      	ldr	r2, [pc, #172]	; (8008420 <TIM_Base_SetConfig+0x11c>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d01f      	beq.n	80083b6 <TIM_Base_SetConfig+0xb2>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	4a2a      	ldr	r2, [pc, #168]	; (8008424 <TIM_Base_SetConfig+0x120>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d01b      	beq.n	80083b6 <TIM_Base_SetConfig+0xb2>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	4a29      	ldr	r2, [pc, #164]	; (8008428 <TIM_Base_SetConfig+0x124>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d017      	beq.n	80083b6 <TIM_Base_SetConfig+0xb2>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	4a28      	ldr	r2, [pc, #160]	; (800842c <TIM_Base_SetConfig+0x128>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d013      	beq.n	80083b6 <TIM_Base_SetConfig+0xb2>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	4a27      	ldr	r2, [pc, #156]	; (8008430 <TIM_Base_SetConfig+0x12c>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d00f      	beq.n	80083b6 <TIM_Base_SetConfig+0xb2>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	4a26      	ldr	r2, [pc, #152]	; (8008434 <TIM_Base_SetConfig+0x130>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d00b      	beq.n	80083b6 <TIM_Base_SetConfig+0xb2>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	4a25      	ldr	r2, [pc, #148]	; (8008438 <TIM_Base_SetConfig+0x134>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d007      	beq.n	80083b6 <TIM_Base_SetConfig+0xb2>
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	4a24      	ldr	r2, [pc, #144]	; (800843c <TIM_Base_SetConfig+0x138>)
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d003      	beq.n	80083b6 <TIM_Base_SetConfig+0xb2>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	4a23      	ldr	r2, [pc, #140]	; (8008440 <TIM_Base_SetConfig+0x13c>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d108      	bne.n	80083c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	68db      	ldr	r3, [r3, #12]
 80083c2:	68fa      	ldr	r2, [r7, #12]
 80083c4:	4313      	orrs	r3, r2
 80083c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	695b      	ldr	r3, [r3, #20]
 80083d2:	4313      	orrs	r3, r2
 80083d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	68fa      	ldr	r2, [r7, #12]
 80083da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	689a      	ldr	r2, [r3, #8]
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	681a      	ldr	r2, [r3, #0]
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	4a0a      	ldr	r2, [pc, #40]	; (8008418 <TIM_Base_SetConfig+0x114>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d003      	beq.n	80083fc <TIM_Base_SetConfig+0xf8>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	4a0c      	ldr	r2, [pc, #48]	; (8008428 <TIM_Base_SetConfig+0x124>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d103      	bne.n	8008404 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	691a      	ldr	r2, [r3, #16]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2201      	movs	r2, #1
 8008408:	615a      	str	r2, [r3, #20]
}
 800840a:	bf00      	nop
 800840c:	3714      	adds	r7, #20
 800840e:	46bd      	mov	sp, r7
 8008410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008414:	4770      	bx	lr
 8008416:	bf00      	nop
 8008418:	40010000 	.word	0x40010000
 800841c:	40000400 	.word	0x40000400
 8008420:	40000800 	.word	0x40000800
 8008424:	40000c00 	.word	0x40000c00
 8008428:	40010400 	.word	0x40010400
 800842c:	40014000 	.word	0x40014000
 8008430:	40014400 	.word	0x40014400
 8008434:	40014800 	.word	0x40014800
 8008438:	40001800 	.word	0x40001800
 800843c:	40001c00 	.word	0x40001c00
 8008440:	40002000 	.word	0x40002000

08008444 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008444:	b480      	push	{r7}
 8008446:	b087      	sub	sp, #28
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
 800844c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6a1b      	ldr	r3, [r3, #32]
 8008452:	f023 0201 	bic.w	r2, r3, #1
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6a1b      	ldr	r3, [r3, #32]
 800845e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	699b      	ldr	r3, [r3, #24]
 800846a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800846c:	68fa      	ldr	r2, [r7, #12]
 800846e:	4b2b      	ldr	r3, [pc, #172]	; (800851c <TIM_OC1_SetConfig+0xd8>)
 8008470:	4013      	ands	r3, r2
 8008472:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	f023 0303 	bic.w	r3, r3, #3
 800847a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	68fa      	ldr	r2, [r7, #12]
 8008482:	4313      	orrs	r3, r2
 8008484:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	f023 0302 	bic.w	r3, r3, #2
 800848c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	689b      	ldr	r3, [r3, #8]
 8008492:	697a      	ldr	r2, [r7, #20]
 8008494:	4313      	orrs	r3, r2
 8008496:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	4a21      	ldr	r2, [pc, #132]	; (8008520 <TIM_OC1_SetConfig+0xdc>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d003      	beq.n	80084a8 <TIM_OC1_SetConfig+0x64>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	4a20      	ldr	r2, [pc, #128]	; (8008524 <TIM_OC1_SetConfig+0xe0>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d10c      	bne.n	80084c2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80084a8:	697b      	ldr	r3, [r7, #20]
 80084aa:	f023 0308 	bic.w	r3, r3, #8
 80084ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	68db      	ldr	r3, [r3, #12]
 80084b4:	697a      	ldr	r2, [r7, #20]
 80084b6:	4313      	orrs	r3, r2
 80084b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80084ba:	697b      	ldr	r3, [r7, #20]
 80084bc:	f023 0304 	bic.w	r3, r3, #4
 80084c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	4a16      	ldr	r2, [pc, #88]	; (8008520 <TIM_OC1_SetConfig+0xdc>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d003      	beq.n	80084d2 <TIM_OC1_SetConfig+0x8e>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	4a15      	ldr	r2, [pc, #84]	; (8008524 <TIM_OC1_SetConfig+0xe0>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d111      	bne.n	80084f6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80084d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80084e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	695b      	ldr	r3, [r3, #20]
 80084e6:	693a      	ldr	r2, [r7, #16]
 80084e8:	4313      	orrs	r3, r2
 80084ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	699b      	ldr	r3, [r3, #24]
 80084f0:	693a      	ldr	r2, [r7, #16]
 80084f2:	4313      	orrs	r3, r2
 80084f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	693a      	ldr	r2, [r7, #16]
 80084fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	68fa      	ldr	r2, [r7, #12]
 8008500:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	685a      	ldr	r2, [r3, #4]
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	697a      	ldr	r2, [r7, #20]
 800850e:	621a      	str	r2, [r3, #32]
}
 8008510:	bf00      	nop
 8008512:	371c      	adds	r7, #28
 8008514:	46bd      	mov	sp, r7
 8008516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851a:	4770      	bx	lr
 800851c:	fffeff8f 	.word	0xfffeff8f
 8008520:	40010000 	.word	0x40010000
 8008524:	40010400 	.word	0x40010400

08008528 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008528:	b480      	push	{r7}
 800852a:	b087      	sub	sp, #28
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6a1b      	ldr	r3, [r3, #32]
 8008536:	f023 0210 	bic.w	r2, r3, #16
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6a1b      	ldr	r3, [r3, #32]
 8008542:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	699b      	ldr	r3, [r3, #24]
 800854e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008550:	68fa      	ldr	r2, [r7, #12]
 8008552:	4b2e      	ldr	r3, [pc, #184]	; (800860c <TIM_OC2_SetConfig+0xe4>)
 8008554:	4013      	ands	r3, r2
 8008556:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800855e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	021b      	lsls	r3, r3, #8
 8008566:	68fa      	ldr	r2, [r7, #12]
 8008568:	4313      	orrs	r3, r2
 800856a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800856c:	697b      	ldr	r3, [r7, #20]
 800856e:	f023 0320 	bic.w	r3, r3, #32
 8008572:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	689b      	ldr	r3, [r3, #8]
 8008578:	011b      	lsls	r3, r3, #4
 800857a:	697a      	ldr	r2, [r7, #20]
 800857c:	4313      	orrs	r3, r2
 800857e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	4a23      	ldr	r2, [pc, #140]	; (8008610 <TIM_OC2_SetConfig+0xe8>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d003      	beq.n	8008590 <TIM_OC2_SetConfig+0x68>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	4a22      	ldr	r2, [pc, #136]	; (8008614 <TIM_OC2_SetConfig+0xec>)
 800858c:	4293      	cmp	r3, r2
 800858e:	d10d      	bne.n	80085ac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008590:	697b      	ldr	r3, [r7, #20]
 8008592:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008596:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	68db      	ldr	r3, [r3, #12]
 800859c:	011b      	lsls	r3, r3, #4
 800859e:	697a      	ldr	r2, [r7, #20]
 80085a0:	4313      	orrs	r3, r2
 80085a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	4a18      	ldr	r2, [pc, #96]	; (8008610 <TIM_OC2_SetConfig+0xe8>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d003      	beq.n	80085bc <TIM_OC2_SetConfig+0x94>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	4a17      	ldr	r2, [pc, #92]	; (8008614 <TIM_OC2_SetConfig+0xec>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d113      	bne.n	80085e4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80085bc:	693b      	ldr	r3, [r7, #16]
 80085be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80085c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80085c4:	693b      	ldr	r3, [r7, #16]
 80085c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80085ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	695b      	ldr	r3, [r3, #20]
 80085d0:	009b      	lsls	r3, r3, #2
 80085d2:	693a      	ldr	r2, [r7, #16]
 80085d4:	4313      	orrs	r3, r2
 80085d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	699b      	ldr	r3, [r3, #24]
 80085dc:	009b      	lsls	r3, r3, #2
 80085de:	693a      	ldr	r2, [r7, #16]
 80085e0:	4313      	orrs	r3, r2
 80085e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	693a      	ldr	r2, [r7, #16]
 80085e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	68fa      	ldr	r2, [r7, #12]
 80085ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	685a      	ldr	r2, [r3, #4]
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	697a      	ldr	r2, [r7, #20]
 80085fc:	621a      	str	r2, [r3, #32]
}
 80085fe:	bf00      	nop
 8008600:	371c      	adds	r7, #28
 8008602:	46bd      	mov	sp, r7
 8008604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008608:	4770      	bx	lr
 800860a:	bf00      	nop
 800860c:	feff8fff 	.word	0xfeff8fff
 8008610:	40010000 	.word	0x40010000
 8008614:	40010400 	.word	0x40010400

08008618 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008618:	b480      	push	{r7}
 800861a:	b087      	sub	sp, #28
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
 8008620:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6a1b      	ldr	r3, [r3, #32]
 8008626:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6a1b      	ldr	r3, [r3, #32]
 8008632:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	685b      	ldr	r3, [r3, #4]
 8008638:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	69db      	ldr	r3, [r3, #28]
 800863e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008640:	68fa      	ldr	r2, [r7, #12]
 8008642:	4b2d      	ldr	r3, [pc, #180]	; (80086f8 <TIM_OC3_SetConfig+0xe0>)
 8008644:	4013      	ands	r3, r2
 8008646:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	f023 0303 	bic.w	r3, r3, #3
 800864e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	68fa      	ldr	r2, [r7, #12]
 8008656:	4313      	orrs	r3, r2
 8008658:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008660:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	689b      	ldr	r3, [r3, #8]
 8008666:	021b      	lsls	r3, r3, #8
 8008668:	697a      	ldr	r2, [r7, #20]
 800866a:	4313      	orrs	r3, r2
 800866c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	4a22      	ldr	r2, [pc, #136]	; (80086fc <TIM_OC3_SetConfig+0xe4>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d003      	beq.n	800867e <TIM_OC3_SetConfig+0x66>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	4a21      	ldr	r2, [pc, #132]	; (8008700 <TIM_OC3_SetConfig+0xe8>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d10d      	bne.n	800869a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008684:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	68db      	ldr	r3, [r3, #12]
 800868a:	021b      	lsls	r3, r3, #8
 800868c:	697a      	ldr	r2, [r7, #20]
 800868e:	4313      	orrs	r3, r2
 8008690:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008698:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	4a17      	ldr	r2, [pc, #92]	; (80086fc <TIM_OC3_SetConfig+0xe4>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	d003      	beq.n	80086aa <TIM_OC3_SetConfig+0x92>
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	4a16      	ldr	r2, [pc, #88]	; (8008700 <TIM_OC3_SetConfig+0xe8>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d113      	bne.n	80086d2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80086aa:	693b      	ldr	r3, [r7, #16]
 80086ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80086b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80086b2:	693b      	ldr	r3, [r7, #16]
 80086b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80086b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	695b      	ldr	r3, [r3, #20]
 80086be:	011b      	lsls	r3, r3, #4
 80086c0:	693a      	ldr	r2, [r7, #16]
 80086c2:	4313      	orrs	r3, r2
 80086c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	699b      	ldr	r3, [r3, #24]
 80086ca:	011b      	lsls	r3, r3, #4
 80086cc:	693a      	ldr	r2, [r7, #16]
 80086ce:	4313      	orrs	r3, r2
 80086d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	693a      	ldr	r2, [r7, #16]
 80086d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	68fa      	ldr	r2, [r7, #12]
 80086dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	685a      	ldr	r2, [r3, #4]
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	697a      	ldr	r2, [r7, #20]
 80086ea:	621a      	str	r2, [r3, #32]
}
 80086ec:	bf00      	nop
 80086ee:	371c      	adds	r7, #28
 80086f0:	46bd      	mov	sp, r7
 80086f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f6:	4770      	bx	lr
 80086f8:	fffeff8f 	.word	0xfffeff8f
 80086fc:	40010000 	.word	0x40010000
 8008700:	40010400 	.word	0x40010400

08008704 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008704:	b480      	push	{r7}
 8008706:	b087      	sub	sp, #28
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
 800870c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6a1b      	ldr	r3, [r3, #32]
 8008712:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6a1b      	ldr	r3, [r3, #32]
 800871e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	69db      	ldr	r3, [r3, #28]
 800872a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800872c:	68fa      	ldr	r2, [r7, #12]
 800872e:	4b1e      	ldr	r3, [pc, #120]	; (80087a8 <TIM_OC4_SetConfig+0xa4>)
 8008730:	4013      	ands	r3, r2
 8008732:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800873a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	021b      	lsls	r3, r3, #8
 8008742:	68fa      	ldr	r2, [r7, #12]
 8008744:	4313      	orrs	r3, r2
 8008746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008748:	693b      	ldr	r3, [r7, #16]
 800874a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800874e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	689b      	ldr	r3, [r3, #8]
 8008754:	031b      	lsls	r3, r3, #12
 8008756:	693a      	ldr	r2, [r7, #16]
 8008758:	4313      	orrs	r3, r2
 800875a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	4a13      	ldr	r2, [pc, #76]	; (80087ac <TIM_OC4_SetConfig+0xa8>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d003      	beq.n	800876c <TIM_OC4_SetConfig+0x68>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	4a12      	ldr	r2, [pc, #72]	; (80087b0 <TIM_OC4_SetConfig+0xac>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d109      	bne.n	8008780 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800876c:	697b      	ldr	r3, [r7, #20]
 800876e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008772:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	695b      	ldr	r3, [r3, #20]
 8008778:	019b      	lsls	r3, r3, #6
 800877a:	697a      	ldr	r2, [r7, #20]
 800877c:	4313      	orrs	r3, r2
 800877e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	697a      	ldr	r2, [r7, #20]
 8008784:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	68fa      	ldr	r2, [r7, #12]
 800878a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	685a      	ldr	r2, [r3, #4]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	693a      	ldr	r2, [r7, #16]
 8008798:	621a      	str	r2, [r3, #32]
}
 800879a:	bf00      	nop
 800879c:	371c      	adds	r7, #28
 800879e:	46bd      	mov	sp, r7
 80087a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a4:	4770      	bx	lr
 80087a6:	bf00      	nop
 80087a8:	feff8fff 	.word	0xfeff8fff
 80087ac:	40010000 	.word	0x40010000
 80087b0:	40010400 	.word	0x40010400

080087b4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80087b4:	b480      	push	{r7}
 80087b6:	b087      	sub	sp, #28
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
 80087bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6a1b      	ldr	r3, [r3, #32]
 80087c2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6a1b      	ldr	r3, [r3, #32]
 80087ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	685b      	ldr	r3, [r3, #4]
 80087d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80087dc:	68fa      	ldr	r2, [r7, #12]
 80087de:	4b1b      	ldr	r3, [pc, #108]	; (800884c <TIM_OC5_SetConfig+0x98>)
 80087e0:	4013      	ands	r3, r2
 80087e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	68fa      	ldr	r2, [r7, #12]
 80087ea:	4313      	orrs	r3, r2
 80087ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80087ee:	693b      	ldr	r3, [r7, #16]
 80087f0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80087f4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	689b      	ldr	r3, [r3, #8]
 80087fa:	041b      	lsls	r3, r3, #16
 80087fc:	693a      	ldr	r2, [r7, #16]
 80087fe:	4313      	orrs	r3, r2
 8008800:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	4a12      	ldr	r2, [pc, #72]	; (8008850 <TIM_OC5_SetConfig+0x9c>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d003      	beq.n	8008812 <TIM_OC5_SetConfig+0x5e>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	4a11      	ldr	r2, [pc, #68]	; (8008854 <TIM_OC5_SetConfig+0xa0>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d109      	bne.n	8008826 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008818:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	695b      	ldr	r3, [r3, #20]
 800881e:	021b      	lsls	r3, r3, #8
 8008820:	697a      	ldr	r2, [r7, #20]
 8008822:	4313      	orrs	r3, r2
 8008824:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	697a      	ldr	r2, [r7, #20]
 800882a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	68fa      	ldr	r2, [r7, #12]
 8008830:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	685a      	ldr	r2, [r3, #4]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	693a      	ldr	r2, [r7, #16]
 800883e:	621a      	str	r2, [r3, #32]
}
 8008840:	bf00      	nop
 8008842:	371c      	adds	r7, #28
 8008844:	46bd      	mov	sp, r7
 8008846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884a:	4770      	bx	lr
 800884c:	fffeff8f 	.word	0xfffeff8f
 8008850:	40010000 	.word	0x40010000
 8008854:	40010400 	.word	0x40010400

08008858 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008858:	b480      	push	{r7}
 800885a:	b087      	sub	sp, #28
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
 8008860:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6a1b      	ldr	r3, [r3, #32]
 8008866:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6a1b      	ldr	r3, [r3, #32]
 8008872:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	685b      	ldr	r3, [r3, #4]
 8008878:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800887e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008880:	68fa      	ldr	r2, [r7, #12]
 8008882:	4b1c      	ldr	r3, [pc, #112]	; (80088f4 <TIM_OC6_SetConfig+0x9c>)
 8008884:	4013      	ands	r3, r2
 8008886:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	021b      	lsls	r3, r3, #8
 800888e:	68fa      	ldr	r2, [r7, #12]
 8008890:	4313      	orrs	r3, r2
 8008892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008894:	693b      	ldr	r3, [r7, #16]
 8008896:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800889a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	689b      	ldr	r3, [r3, #8]
 80088a0:	051b      	lsls	r3, r3, #20
 80088a2:	693a      	ldr	r2, [r7, #16]
 80088a4:	4313      	orrs	r3, r2
 80088a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	4a13      	ldr	r2, [pc, #76]	; (80088f8 <TIM_OC6_SetConfig+0xa0>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d003      	beq.n	80088b8 <TIM_OC6_SetConfig+0x60>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	4a12      	ldr	r2, [pc, #72]	; (80088fc <TIM_OC6_SetConfig+0xa4>)
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d109      	bne.n	80088cc <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80088be:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	695b      	ldr	r3, [r3, #20]
 80088c4:	029b      	lsls	r3, r3, #10
 80088c6:	697a      	ldr	r2, [r7, #20]
 80088c8:	4313      	orrs	r3, r2
 80088ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	697a      	ldr	r2, [r7, #20]
 80088d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	68fa      	ldr	r2, [r7, #12]
 80088d6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	685a      	ldr	r2, [r3, #4]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	693a      	ldr	r2, [r7, #16]
 80088e4:	621a      	str	r2, [r3, #32]
}
 80088e6:	bf00      	nop
 80088e8:	371c      	adds	r7, #28
 80088ea:	46bd      	mov	sp, r7
 80088ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f0:	4770      	bx	lr
 80088f2:	bf00      	nop
 80088f4:	feff8fff 	.word	0xfeff8fff
 80088f8:	40010000 	.word	0x40010000
 80088fc:	40010400 	.word	0x40010400

08008900 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008900:	b480      	push	{r7}
 8008902:	b087      	sub	sp, #28
 8008904:	af00      	add	r7, sp, #0
 8008906:	60f8      	str	r0, [r7, #12]
 8008908:	60b9      	str	r1, [r7, #8]
 800890a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	6a1b      	ldr	r3, [r3, #32]
 8008910:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	6a1b      	ldr	r3, [r3, #32]
 8008916:	f023 0201 	bic.w	r2, r3, #1
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	699b      	ldr	r3, [r3, #24]
 8008922:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008924:	693b      	ldr	r3, [r7, #16]
 8008926:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800892a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	011b      	lsls	r3, r3, #4
 8008930:	693a      	ldr	r2, [r7, #16]
 8008932:	4313      	orrs	r3, r2
 8008934:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	f023 030a 	bic.w	r3, r3, #10
 800893c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800893e:	697a      	ldr	r2, [r7, #20]
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	4313      	orrs	r3, r2
 8008944:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	693a      	ldr	r2, [r7, #16]
 800894a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	697a      	ldr	r2, [r7, #20]
 8008950:	621a      	str	r2, [r3, #32]
}
 8008952:	bf00      	nop
 8008954:	371c      	adds	r7, #28
 8008956:	46bd      	mov	sp, r7
 8008958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895c:	4770      	bx	lr

0800895e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800895e:	b480      	push	{r7}
 8008960:	b087      	sub	sp, #28
 8008962:	af00      	add	r7, sp, #0
 8008964:	60f8      	str	r0, [r7, #12]
 8008966:	60b9      	str	r1, [r7, #8]
 8008968:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	6a1b      	ldr	r3, [r3, #32]
 800896e:	f023 0210 	bic.w	r2, r3, #16
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	699b      	ldr	r3, [r3, #24]
 800897a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	6a1b      	ldr	r3, [r3, #32]
 8008980:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008982:	697b      	ldr	r3, [r7, #20]
 8008984:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008988:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	031b      	lsls	r3, r3, #12
 800898e:	697a      	ldr	r2, [r7, #20]
 8008990:	4313      	orrs	r3, r2
 8008992:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008994:	693b      	ldr	r3, [r7, #16]
 8008996:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800899a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	011b      	lsls	r3, r3, #4
 80089a0:	693a      	ldr	r2, [r7, #16]
 80089a2:	4313      	orrs	r3, r2
 80089a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	697a      	ldr	r2, [r7, #20]
 80089aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	693a      	ldr	r2, [r7, #16]
 80089b0:	621a      	str	r2, [r3, #32]
}
 80089b2:	bf00      	nop
 80089b4:	371c      	adds	r7, #28
 80089b6:	46bd      	mov	sp, r7
 80089b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089bc:	4770      	bx	lr

080089be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80089be:	b480      	push	{r7}
 80089c0:	b085      	sub	sp, #20
 80089c2:	af00      	add	r7, sp, #0
 80089c4:	6078      	str	r0, [r7, #4]
 80089c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	689b      	ldr	r3, [r3, #8]
 80089cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80089d6:	683a      	ldr	r2, [r7, #0]
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	4313      	orrs	r3, r2
 80089dc:	f043 0307 	orr.w	r3, r3, #7
 80089e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	68fa      	ldr	r2, [r7, #12]
 80089e6:	609a      	str	r2, [r3, #8]
}
 80089e8:	bf00      	nop
 80089ea:	3714      	adds	r7, #20
 80089ec:	46bd      	mov	sp, r7
 80089ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f2:	4770      	bx	lr

080089f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80089f4:	b480      	push	{r7}
 80089f6:	b087      	sub	sp, #28
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	60f8      	str	r0, [r7, #12]
 80089fc:	60b9      	str	r1, [r7, #8]
 80089fe:	607a      	str	r2, [r7, #4]
 8008a00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	689b      	ldr	r3, [r3, #8]
 8008a06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a08:	697b      	ldr	r3, [r7, #20]
 8008a0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008a0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	021a      	lsls	r2, r3, #8
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	431a      	orrs	r2, r3
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	4313      	orrs	r3, r2
 8008a1c:	697a      	ldr	r2, [r7, #20]
 8008a1e:	4313      	orrs	r3, r2
 8008a20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	697a      	ldr	r2, [r7, #20]
 8008a26:	609a      	str	r2, [r3, #8]
}
 8008a28:	bf00      	nop
 8008a2a:	371c      	adds	r7, #28
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a32:	4770      	bx	lr

08008a34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008a34:	b480      	push	{r7}
 8008a36:	b087      	sub	sp, #28
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	60f8      	str	r0, [r7, #12]
 8008a3c:	60b9      	str	r1, [r7, #8]
 8008a3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	f003 031f 	and.w	r3, r3, #31
 8008a46:	2201      	movs	r2, #1
 8008a48:	fa02 f303 	lsl.w	r3, r2, r3
 8008a4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	6a1a      	ldr	r2, [r3, #32]
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	43db      	mvns	r3, r3
 8008a56:	401a      	ands	r2, r3
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	6a1a      	ldr	r2, [r3, #32]
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	f003 031f 	and.w	r3, r3, #31
 8008a66:	6879      	ldr	r1, [r7, #4]
 8008a68:	fa01 f303 	lsl.w	r3, r1, r3
 8008a6c:	431a      	orrs	r2, r3
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	621a      	str	r2, [r3, #32]
}
 8008a72:	bf00      	nop
 8008a74:	371c      	adds	r7, #28
 8008a76:	46bd      	mov	sp, r7
 8008a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7c:	4770      	bx	lr
	...

08008a80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008a80:	b480      	push	{r7}
 8008a82:	b085      	sub	sp, #20
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
 8008a88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a90:	2b01      	cmp	r3, #1
 8008a92:	d101      	bne.n	8008a98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008a94:	2302      	movs	r3, #2
 8008a96:	e06d      	b.n	8008b74 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2201      	movs	r2, #1
 8008a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2202      	movs	r2, #2
 8008aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	685b      	ldr	r3, [r3, #4]
 8008aae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	689b      	ldr	r3, [r3, #8]
 8008ab6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4a30      	ldr	r2, [pc, #192]	; (8008b80 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d004      	beq.n	8008acc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	4a2f      	ldr	r2, [pc, #188]	; (8008b84 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d108      	bne.n	8008ade <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008ad2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	685b      	ldr	r3, [r3, #4]
 8008ad8:	68fa      	ldr	r2, [r7, #12]
 8008ada:	4313      	orrs	r3, r2
 8008adc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ae4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	68fa      	ldr	r2, [r7, #12]
 8008aec:	4313      	orrs	r3, r2
 8008aee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	68fa      	ldr	r2, [r7, #12]
 8008af6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	4a20      	ldr	r2, [pc, #128]	; (8008b80 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d022      	beq.n	8008b48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b0a:	d01d      	beq.n	8008b48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	4a1d      	ldr	r2, [pc, #116]	; (8008b88 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d018      	beq.n	8008b48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	4a1c      	ldr	r2, [pc, #112]	; (8008b8c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d013      	beq.n	8008b48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	4a1a      	ldr	r2, [pc, #104]	; (8008b90 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d00e      	beq.n	8008b48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	4a15      	ldr	r2, [pc, #84]	; (8008b84 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d009      	beq.n	8008b48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4a16      	ldr	r2, [pc, #88]	; (8008b94 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d004      	beq.n	8008b48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	4a15      	ldr	r2, [pc, #84]	; (8008b98 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d10c      	bne.n	8008b62 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b4e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	689b      	ldr	r3, [r3, #8]
 8008b54:	68ba      	ldr	r2, [r7, #8]
 8008b56:	4313      	orrs	r3, r2
 8008b58:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	68ba      	ldr	r2, [r7, #8]
 8008b60:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2201      	movs	r2, #1
 8008b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008b72:	2300      	movs	r3, #0
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	3714      	adds	r7, #20
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7e:	4770      	bx	lr
 8008b80:	40010000 	.word	0x40010000
 8008b84:	40010400 	.word	0x40010400
 8008b88:	40000400 	.word	0x40000400
 8008b8c:	40000800 	.word	0x40000800
 8008b90:	40000c00 	.word	0x40000c00
 8008b94:	40014000 	.word	0x40014000
 8008b98:	40001800 	.word	0x40001800

08008b9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b083      	sub	sp, #12
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008ba4:	bf00      	nop
 8008ba6:	370c      	adds	r7, #12
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr

08008bb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b083      	sub	sp, #12
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008bb8:	bf00      	nop
 8008bba:	370c      	adds	r7, #12
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc2:	4770      	bx	lr

08008bc4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b083      	sub	sp, #12
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008bcc:	bf00      	nop
 8008bce:	370c      	adds	r7, #12
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd6:	4770      	bx	lr

08008bd8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b082      	sub	sp, #8
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d101      	bne.n	8008bea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008be6:	2301      	movs	r3, #1
 8008be8:	e040      	b.n	8008c6c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d106      	bne.n	8008c00 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f7fb faac 	bl	8004158 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2224      	movs	r2, #36	; 0x24
 8008c04:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	681a      	ldr	r2, [r3, #0]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f022 0201 	bic.w	r2, r2, #1
 8008c14:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f000 fc66 	bl	80094e8 <UART_SetConfig>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	2b01      	cmp	r3, #1
 8008c20:	d101      	bne.n	8008c26 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008c22:	2301      	movs	r3, #1
 8008c24:	e022      	b.n	8008c6c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d002      	beq.n	8008c34 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f000 febe 	bl	80099b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	685a      	ldr	r2, [r3, #4]
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008c42:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	689a      	ldr	r2, [r3, #8]
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008c52:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	681a      	ldr	r2, [r3, #0]
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f042 0201 	orr.w	r2, r2, #1
 8008c62:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f000 ff45 	bl	8009af4 <UART_CheckIdleState>
 8008c6a:	4603      	mov	r3, r0
}
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	3708      	adds	r7, #8
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}

08008c74 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b08a      	sub	sp, #40	; 0x28
 8008c78:	af02      	add	r7, sp, #8
 8008c7a:	60f8      	str	r0, [r7, #12]
 8008c7c:	60b9      	str	r1, [r7, #8]
 8008c7e:	603b      	str	r3, [r7, #0]
 8008c80:	4613      	mov	r3, r2
 8008c82:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008c88:	2b20      	cmp	r3, #32
 8008c8a:	d171      	bne.n	8008d70 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d002      	beq.n	8008c98 <HAL_UART_Transmit+0x24>
 8008c92:	88fb      	ldrh	r3, [r7, #6]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d101      	bne.n	8008c9c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008c98:	2301      	movs	r3, #1
 8008c9a:	e06a      	b.n	8008d72 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	2221      	movs	r2, #33	; 0x21
 8008ca8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008caa:	f7fb fd7f 	bl	80047ac <HAL_GetTick>
 8008cae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	88fa      	ldrh	r2, [r7, #6]
 8008cb4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	88fa      	ldrh	r2, [r7, #6]
 8008cbc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	689b      	ldr	r3, [r3, #8]
 8008cc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cc8:	d108      	bne.n	8008cdc <HAL_UART_Transmit+0x68>
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	691b      	ldr	r3, [r3, #16]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d104      	bne.n	8008cdc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	61bb      	str	r3, [r7, #24]
 8008cda:	e003      	b.n	8008ce4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008ce4:	e02c      	b.n	8008d40 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	9300      	str	r3, [sp, #0]
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	2200      	movs	r2, #0
 8008cee:	2180      	movs	r1, #128	; 0x80
 8008cf0:	68f8      	ldr	r0, [r7, #12]
 8008cf2:	f000 ff36 	bl	8009b62 <UART_WaitOnFlagUntilTimeout>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d001      	beq.n	8008d00 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8008cfc:	2303      	movs	r3, #3
 8008cfe:	e038      	b.n	8008d72 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8008d00:	69fb      	ldr	r3, [r7, #28]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d10b      	bne.n	8008d1e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008d06:	69bb      	ldr	r3, [r7, #24]
 8008d08:	881b      	ldrh	r3, [r3, #0]
 8008d0a:	461a      	mov	r2, r3
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d14:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008d16:	69bb      	ldr	r3, [r7, #24]
 8008d18:	3302      	adds	r3, #2
 8008d1a:	61bb      	str	r3, [r7, #24]
 8008d1c:	e007      	b.n	8008d2e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008d1e:	69fb      	ldr	r3, [r7, #28]
 8008d20:	781a      	ldrb	r2, [r3, #0]
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008d28:	69fb      	ldr	r3, [r7, #28]
 8008d2a:	3301      	adds	r3, #1
 8008d2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008d34:	b29b      	uxth	r3, r3
 8008d36:	3b01      	subs	r3, #1
 8008d38:	b29a      	uxth	r2, r3
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008d46:	b29b      	uxth	r3, r3
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d1cc      	bne.n	8008ce6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	9300      	str	r3, [sp, #0]
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	2200      	movs	r2, #0
 8008d54:	2140      	movs	r1, #64	; 0x40
 8008d56:	68f8      	ldr	r0, [r7, #12]
 8008d58:	f000 ff03 	bl	8009b62 <UART_WaitOnFlagUntilTimeout>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d001      	beq.n	8008d66 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8008d62:	2303      	movs	r3, #3
 8008d64:	e005      	b.n	8008d72 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	2220      	movs	r2, #32
 8008d6a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	e000      	b.n	8008d72 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8008d70:	2302      	movs	r3, #2
  }
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3720      	adds	r7, #32
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}

08008d7a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d7a:	b580      	push	{r7, lr}
 8008d7c:	b08a      	sub	sp, #40	; 0x28
 8008d7e:	af02      	add	r7, sp, #8
 8008d80:	60f8      	str	r0, [r7, #12]
 8008d82:	60b9      	str	r1, [r7, #8]
 8008d84:	603b      	str	r3, [r7, #0]
 8008d86:	4613      	mov	r3, r2
 8008d88:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d90:	2b20      	cmp	r3, #32
 8008d92:	f040 80b1 	bne.w	8008ef8 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d002      	beq.n	8008da2 <HAL_UART_Receive+0x28>
 8008d9c:	88fb      	ldrh	r3, [r7, #6]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d101      	bne.n	8008da6 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8008da2:	2301      	movs	r3, #1
 8008da4:	e0a9      	b.n	8008efa <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	2200      	movs	r2, #0
 8008daa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	2222      	movs	r2, #34	; 0x22
 8008db2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	2200      	movs	r2, #0
 8008dba:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008dbc:	f7fb fcf6 	bl	80047ac <HAL_GetTick>
 8008dc0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	88fa      	ldrh	r2, [r7, #6]
 8008dc6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	88fa      	ldrh	r2, [r7, #6]
 8008dce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	689b      	ldr	r3, [r3, #8]
 8008dd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008dda:	d10e      	bne.n	8008dfa <HAL_UART_Receive+0x80>
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	691b      	ldr	r3, [r3, #16]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d105      	bne.n	8008df0 <HAL_UART_Receive+0x76>
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008dea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008dee:	e02d      	b.n	8008e4c <HAL_UART_Receive+0xd2>
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	22ff      	movs	r2, #255	; 0xff
 8008df4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008df8:	e028      	b.n	8008e4c <HAL_UART_Receive+0xd2>
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	689b      	ldr	r3, [r3, #8]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d10d      	bne.n	8008e1e <HAL_UART_Receive+0xa4>
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	691b      	ldr	r3, [r3, #16]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d104      	bne.n	8008e14 <HAL_UART_Receive+0x9a>
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	22ff      	movs	r2, #255	; 0xff
 8008e0e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008e12:	e01b      	b.n	8008e4c <HAL_UART_Receive+0xd2>
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	227f      	movs	r2, #127	; 0x7f
 8008e18:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008e1c:	e016      	b.n	8008e4c <HAL_UART_Receive+0xd2>
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	689b      	ldr	r3, [r3, #8]
 8008e22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008e26:	d10d      	bne.n	8008e44 <HAL_UART_Receive+0xca>
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	691b      	ldr	r3, [r3, #16]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d104      	bne.n	8008e3a <HAL_UART_Receive+0xc0>
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	227f      	movs	r2, #127	; 0x7f
 8008e34:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008e38:	e008      	b.n	8008e4c <HAL_UART_Receive+0xd2>
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	223f      	movs	r2, #63	; 0x3f
 8008e3e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008e42:	e003      	b.n	8008e4c <HAL_UART_Receive+0xd2>
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	2200      	movs	r2, #0
 8008e48:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008e52:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	689b      	ldr	r3, [r3, #8]
 8008e58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e5c:	d108      	bne.n	8008e70 <HAL_UART_Receive+0xf6>
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	691b      	ldr	r3, [r3, #16]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d104      	bne.n	8008e70 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8008e66:	2300      	movs	r3, #0
 8008e68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	61bb      	str	r3, [r7, #24]
 8008e6e:	e003      	b.n	8008e78 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008e74:	2300      	movs	r3, #0
 8008e76:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8008e78:	e032      	b.n	8008ee0 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	9300      	str	r3, [sp, #0]
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	2200      	movs	r2, #0
 8008e82:	2120      	movs	r1, #32
 8008e84:	68f8      	ldr	r0, [r7, #12]
 8008e86:	f000 fe6c 	bl	8009b62 <UART_WaitOnFlagUntilTimeout>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d001      	beq.n	8008e94 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8008e90:	2303      	movs	r3, #3
 8008e92:	e032      	b.n	8008efa <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8008e94:	69fb      	ldr	r3, [r7, #28]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d10c      	bne.n	8008eb4 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ea0:	b29a      	uxth	r2, r3
 8008ea2:	8a7b      	ldrh	r3, [r7, #18]
 8008ea4:	4013      	ands	r3, r2
 8008ea6:	b29a      	uxth	r2, r3
 8008ea8:	69bb      	ldr	r3, [r7, #24]
 8008eaa:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008eac:	69bb      	ldr	r3, [r7, #24]
 8008eae:	3302      	adds	r3, #2
 8008eb0:	61bb      	str	r3, [r7, #24]
 8008eb2:	e00c      	b.n	8008ece <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eba:	b2da      	uxtb	r2, r3
 8008ebc:	8a7b      	ldrh	r3, [r7, #18]
 8008ebe:	b2db      	uxtb	r3, r3
 8008ec0:	4013      	ands	r3, r2
 8008ec2:	b2da      	uxtb	r2, r3
 8008ec4:	69fb      	ldr	r3, [r7, #28]
 8008ec6:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8008ec8:	69fb      	ldr	r3, [r7, #28]
 8008eca:	3301      	adds	r3, #1
 8008ecc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008ed4:	b29b      	uxth	r3, r3
 8008ed6:	3b01      	subs	r3, #1
 8008ed8:	b29a      	uxth	r2, r3
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008ee6:	b29b      	uxth	r3, r3
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d1c6      	bne.n	8008e7a <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	2220      	movs	r2, #32
 8008ef0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	e000      	b.n	8008efa <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8008ef8:	2302      	movs	r3, #2
  }
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	3720      	adds	r7, #32
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}
	...

08008f04 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b0ba      	sub	sp, #232	; 0xe8
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	69db      	ldr	r3, [r3, #28]
 8008f12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	689b      	ldr	r3, [r3, #8]
 8008f26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008f2a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008f2e:	f640 030f 	movw	r3, #2063	; 0x80f
 8008f32:	4013      	ands	r3, r2
 8008f34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008f38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d115      	bne.n	8008f6c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008f40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f44:	f003 0320 	and.w	r3, r3, #32
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d00f      	beq.n	8008f6c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008f4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f50:	f003 0320 	and.w	r3, r3, #32
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d009      	beq.n	8008f6c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	f000 8297 	beq.w	8009490 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	4798      	blx	r3
      }
      return;
 8008f6a:	e291      	b.n	8009490 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008f6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	f000 8117 	beq.w	80091a4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008f76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008f7a:	f003 0301 	and.w	r3, r3, #1
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d106      	bne.n	8008f90 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008f82:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008f86:	4b85      	ldr	r3, [pc, #532]	; (800919c <HAL_UART_IRQHandler+0x298>)
 8008f88:	4013      	ands	r3, r2
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	f000 810a 	beq.w	80091a4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008f90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f94:	f003 0301 	and.w	r3, r3, #1
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d011      	beq.n	8008fc0 <HAL_UART_IRQHandler+0xbc>
 8008f9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d00b      	beq.n	8008fc0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	2201      	movs	r2, #1
 8008fae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008fb6:	f043 0201 	orr.w	r2, r3, #1
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008fc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fc4:	f003 0302 	and.w	r3, r3, #2
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d011      	beq.n	8008ff0 <HAL_UART_IRQHandler+0xec>
 8008fcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008fd0:	f003 0301 	and.w	r3, r3, #1
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d00b      	beq.n	8008ff0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	2202      	movs	r2, #2
 8008fde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008fe6:	f043 0204 	orr.w	r2, r3, #4
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008ff0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ff4:	f003 0304 	and.w	r3, r3, #4
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d011      	beq.n	8009020 <HAL_UART_IRQHandler+0x11c>
 8008ffc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009000:	f003 0301 	and.w	r3, r3, #1
 8009004:	2b00      	cmp	r3, #0
 8009006:	d00b      	beq.n	8009020 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	2204      	movs	r2, #4
 800900e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009016:	f043 0202 	orr.w	r2, r3, #2
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009020:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009024:	f003 0308 	and.w	r3, r3, #8
 8009028:	2b00      	cmp	r3, #0
 800902a:	d017      	beq.n	800905c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800902c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009030:	f003 0320 	and.w	r3, r3, #32
 8009034:	2b00      	cmp	r3, #0
 8009036:	d105      	bne.n	8009044 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009038:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800903c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009040:	2b00      	cmp	r3, #0
 8009042:	d00b      	beq.n	800905c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	2208      	movs	r2, #8
 800904a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009052:	f043 0208 	orr.w	r2, r3, #8
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800905c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009060:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009064:	2b00      	cmp	r3, #0
 8009066:	d012      	beq.n	800908e <HAL_UART_IRQHandler+0x18a>
 8009068:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800906c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009070:	2b00      	cmp	r3, #0
 8009072:	d00c      	beq.n	800908e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800907c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009084:	f043 0220 	orr.w	r2, r3, #32
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009094:	2b00      	cmp	r3, #0
 8009096:	f000 81fd 	beq.w	8009494 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800909a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800909e:	f003 0320 	and.w	r3, r3, #32
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d00d      	beq.n	80090c2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80090a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80090aa:	f003 0320 	and.w	r3, r3, #32
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d007      	beq.n	80090c2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d003      	beq.n	80090c2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	689b      	ldr	r3, [r3, #8]
 80090d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090d6:	2b40      	cmp	r3, #64	; 0x40
 80090d8:	d005      	beq.n	80090e6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80090da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80090de:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d04f      	beq.n	8009186 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f000 fe01 	bl	8009cee <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	689b      	ldr	r3, [r3, #8]
 80090f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090f6:	2b40      	cmp	r3, #64	; 0x40
 80090f8:	d141      	bne.n	800917e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	3308      	adds	r3, #8
 8009100:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009104:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009108:	e853 3f00 	ldrex	r3, [r3]
 800910c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009110:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009114:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009118:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	3308      	adds	r3, #8
 8009122:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009126:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800912a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800912e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009132:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009136:	e841 2300 	strex	r3, r2, [r1]
 800913a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800913e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009142:	2b00      	cmp	r3, #0
 8009144:	d1d9      	bne.n	80090fa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800914a:	2b00      	cmp	r3, #0
 800914c:	d013      	beq.n	8009176 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009152:	4a13      	ldr	r2, [pc, #76]	; (80091a0 <HAL_UART_IRQHandler+0x29c>)
 8009154:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800915a:	4618      	mov	r0, r3
 800915c:	f7fb fdc2 	bl	8004ce4 <HAL_DMA_Abort_IT>
 8009160:	4603      	mov	r3, r0
 8009162:	2b00      	cmp	r3, #0
 8009164:	d017      	beq.n	8009196 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800916a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800916c:	687a      	ldr	r2, [r7, #4]
 800916e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009170:	4610      	mov	r0, r2
 8009172:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009174:	e00f      	b.n	8009196 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f000 f9a0 	bl	80094bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800917c:	e00b      	b.n	8009196 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f000 f99c 	bl	80094bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009184:	e007      	b.n	8009196 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f000 f998 	bl	80094bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2200      	movs	r2, #0
 8009190:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8009194:	e17e      	b.n	8009494 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009196:	bf00      	nop
    return;
 8009198:	e17c      	b.n	8009494 <HAL_UART_IRQHandler+0x590>
 800919a:	bf00      	nop
 800919c:	04000120 	.word	0x04000120
 80091a0:	08009db7 	.word	0x08009db7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80091a8:	2b01      	cmp	r3, #1
 80091aa:	f040 814c 	bne.w	8009446 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80091ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091b2:	f003 0310 	and.w	r3, r3, #16
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	f000 8145 	beq.w	8009446 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80091bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80091c0:	f003 0310 	and.w	r3, r3, #16
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	f000 813e 	beq.w	8009446 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	2210      	movs	r2, #16
 80091d0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	689b      	ldr	r3, [r3, #8]
 80091d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091dc:	2b40      	cmp	r3, #64	; 0x40
 80091de:	f040 80b6 	bne.w	800934e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	685b      	ldr	r3, [r3, #4]
 80091ea:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80091ee:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	f000 8150 	beq.w	8009498 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80091fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009202:	429a      	cmp	r2, r3
 8009204:	f080 8148 	bcs.w	8009498 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800920e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009216:	69db      	ldr	r3, [r3, #28]
 8009218:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800921c:	f000 8086 	beq.w	800932c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009228:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800922c:	e853 3f00 	ldrex	r3, [r3]
 8009230:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009234:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009238:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800923c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	461a      	mov	r2, r3
 8009246:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800924a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800924e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009252:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009256:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800925a:	e841 2300 	strex	r3, r2, [r1]
 800925e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009262:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009266:	2b00      	cmp	r3, #0
 8009268:	d1da      	bne.n	8009220 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	3308      	adds	r3, #8
 8009270:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009272:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009274:	e853 3f00 	ldrex	r3, [r3]
 8009278:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800927a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800927c:	f023 0301 	bic.w	r3, r3, #1
 8009280:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	3308      	adds	r3, #8
 800928a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800928e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009292:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009294:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009296:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800929a:	e841 2300 	strex	r3, r2, [r1]
 800929e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80092a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d1e1      	bne.n	800926a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	3308      	adds	r3, #8
 80092ac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80092b0:	e853 3f00 	ldrex	r3, [r3]
 80092b4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80092b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80092b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80092bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	3308      	adds	r3, #8
 80092c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80092ca:	66fa      	str	r2, [r7, #108]	; 0x6c
 80092cc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80092d0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80092d2:	e841 2300 	strex	r3, r2, [r1]
 80092d6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80092d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d1e3      	bne.n	80092a6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2220      	movs	r2, #32
 80092e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2200      	movs	r2, #0
 80092ea:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092f4:	e853 3f00 	ldrex	r3, [r3]
 80092f8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80092fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092fc:	f023 0310 	bic.w	r3, r3, #16
 8009300:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	461a      	mov	r2, r3
 800930a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800930e:	65bb      	str	r3, [r7, #88]	; 0x58
 8009310:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009312:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009314:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009316:	e841 2300 	strex	r3, r2, [r1]
 800931a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800931c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800931e:	2b00      	cmp	r3, #0
 8009320:	d1e4      	bne.n	80092ec <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009326:	4618      	mov	r0, r3
 8009328:	f7fb fc6c 	bl	8004c04 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2202      	movs	r2, #2
 8009330:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800933e:	b29b      	uxth	r3, r3
 8009340:	1ad3      	subs	r3, r2, r3
 8009342:	b29b      	uxth	r3, r3
 8009344:	4619      	mov	r1, r3
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f000 f8c2 	bl	80094d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800934c:	e0a4      	b.n	8009498 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800935a:	b29b      	uxth	r3, r3
 800935c:	1ad3      	subs	r3, r2, r3
 800935e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009368:	b29b      	uxth	r3, r3
 800936a:	2b00      	cmp	r3, #0
 800936c:	f000 8096 	beq.w	800949c <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8009370:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009374:	2b00      	cmp	r3, #0
 8009376:	f000 8091 	beq.w	800949c <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009382:	e853 3f00 	ldrex	r3, [r3]
 8009386:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800938a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800938e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	461a      	mov	r2, r3
 8009398:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800939c:	647b      	str	r3, [r7, #68]	; 0x44
 800939e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093a0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80093a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80093a4:	e841 2300 	strex	r3, r2, [r1]
 80093a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80093aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d1e4      	bne.n	800937a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	3308      	adds	r3, #8
 80093b6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ba:	e853 3f00 	ldrex	r3, [r3]
 80093be:	623b      	str	r3, [r7, #32]
   return(result);
 80093c0:	6a3b      	ldr	r3, [r7, #32]
 80093c2:	f023 0301 	bic.w	r3, r3, #1
 80093c6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	3308      	adds	r3, #8
 80093d0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80093d4:	633a      	str	r2, [r7, #48]	; 0x30
 80093d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80093da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093dc:	e841 2300 	strex	r3, r2, [r1]
 80093e0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80093e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d1e3      	bne.n	80093b0 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2220      	movs	r2, #32
 80093ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2200      	movs	r2, #0
 80093f4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2200      	movs	r2, #0
 80093fa:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009402:	693b      	ldr	r3, [r7, #16]
 8009404:	e853 3f00 	ldrex	r3, [r3]
 8009408:	60fb      	str	r3, [r7, #12]
   return(result);
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	f023 0310 	bic.w	r3, r3, #16
 8009410:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	461a      	mov	r2, r3
 800941a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800941e:	61fb      	str	r3, [r7, #28]
 8009420:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009422:	69b9      	ldr	r1, [r7, #24]
 8009424:	69fa      	ldr	r2, [r7, #28]
 8009426:	e841 2300 	strex	r3, r2, [r1]
 800942a:	617b      	str	r3, [r7, #20]
   return(result);
 800942c:	697b      	ldr	r3, [r7, #20]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d1e4      	bne.n	80093fc <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2202      	movs	r2, #2
 8009436:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009438:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800943c:	4619      	mov	r1, r3
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f000 f846 	bl	80094d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009444:	e02a      	b.n	800949c <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009446:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800944a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800944e:	2b00      	cmp	r3, #0
 8009450:	d00e      	beq.n	8009470 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009452:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800945a:	2b00      	cmp	r3, #0
 800945c:	d008      	beq.n	8009470 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009462:	2b00      	cmp	r3, #0
 8009464:	d01c      	beq.n	80094a0 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	4798      	blx	r3
    }
    return;
 800946e:	e017      	b.n	80094a0 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009470:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009478:	2b00      	cmp	r3, #0
 800947a:	d012      	beq.n	80094a2 <HAL_UART_IRQHandler+0x59e>
 800947c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009484:	2b00      	cmp	r3, #0
 8009486:	d00c      	beq.n	80094a2 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	f000 fcaa 	bl	8009de2 <UART_EndTransmit_IT>
    return;
 800948e:	e008      	b.n	80094a2 <HAL_UART_IRQHandler+0x59e>
      return;
 8009490:	bf00      	nop
 8009492:	e006      	b.n	80094a2 <HAL_UART_IRQHandler+0x59e>
    return;
 8009494:	bf00      	nop
 8009496:	e004      	b.n	80094a2 <HAL_UART_IRQHandler+0x59e>
      return;
 8009498:	bf00      	nop
 800949a:	e002      	b.n	80094a2 <HAL_UART_IRQHandler+0x59e>
      return;
 800949c:	bf00      	nop
 800949e:	e000      	b.n	80094a2 <HAL_UART_IRQHandler+0x59e>
    return;
 80094a0:	bf00      	nop
  }

}
 80094a2:	37e8      	adds	r7, #232	; 0xe8
 80094a4:	46bd      	mov	sp, r7
 80094a6:	bd80      	pop	{r7, pc}

080094a8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80094a8:	b480      	push	{r7}
 80094aa:	b083      	sub	sp, #12
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80094b0:	bf00      	nop
 80094b2:	370c      	adds	r7, #12
 80094b4:	46bd      	mov	sp, r7
 80094b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ba:	4770      	bx	lr

080094bc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80094bc:	b480      	push	{r7}
 80094be:	b083      	sub	sp, #12
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80094c4:	bf00      	nop
 80094c6:	370c      	adds	r7, #12
 80094c8:	46bd      	mov	sp, r7
 80094ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ce:	4770      	bx	lr

080094d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80094d0:	b480      	push	{r7}
 80094d2:	b083      	sub	sp, #12
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
 80094d8:	460b      	mov	r3, r1
 80094da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80094dc:	bf00      	nop
 80094de:	370c      	adds	r7, #12
 80094e0:	46bd      	mov	sp, r7
 80094e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e6:	4770      	bx	lr

080094e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b088      	sub	sp, #32
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80094f0:	2300      	movs	r3, #0
 80094f2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	689a      	ldr	r2, [r3, #8]
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	691b      	ldr	r3, [r3, #16]
 80094fc:	431a      	orrs	r2, r3
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	695b      	ldr	r3, [r3, #20]
 8009502:	431a      	orrs	r2, r3
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	69db      	ldr	r3, [r3, #28]
 8009508:	4313      	orrs	r3, r2
 800950a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	681a      	ldr	r2, [r3, #0]
 8009512:	4ba6      	ldr	r3, [pc, #664]	; (80097ac <UART_SetConfig+0x2c4>)
 8009514:	4013      	ands	r3, r2
 8009516:	687a      	ldr	r2, [r7, #4]
 8009518:	6812      	ldr	r2, [r2, #0]
 800951a:	6979      	ldr	r1, [r7, #20]
 800951c:	430b      	orrs	r3, r1
 800951e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	685b      	ldr	r3, [r3, #4]
 8009526:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	68da      	ldr	r2, [r3, #12]
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	430a      	orrs	r2, r1
 8009534:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	699b      	ldr	r3, [r3, #24]
 800953a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	6a1b      	ldr	r3, [r3, #32]
 8009540:	697a      	ldr	r2, [r7, #20]
 8009542:	4313      	orrs	r3, r2
 8009544:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	689b      	ldr	r3, [r3, #8]
 800954c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	697a      	ldr	r2, [r7, #20]
 8009556:	430a      	orrs	r2, r1
 8009558:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	4a94      	ldr	r2, [pc, #592]	; (80097b0 <UART_SetConfig+0x2c8>)
 8009560:	4293      	cmp	r3, r2
 8009562:	d120      	bne.n	80095a6 <UART_SetConfig+0xbe>
 8009564:	4b93      	ldr	r3, [pc, #588]	; (80097b4 <UART_SetConfig+0x2cc>)
 8009566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800956a:	f003 0303 	and.w	r3, r3, #3
 800956e:	2b03      	cmp	r3, #3
 8009570:	d816      	bhi.n	80095a0 <UART_SetConfig+0xb8>
 8009572:	a201      	add	r2, pc, #4	; (adr r2, 8009578 <UART_SetConfig+0x90>)
 8009574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009578:	08009589 	.word	0x08009589
 800957c:	08009595 	.word	0x08009595
 8009580:	0800958f 	.word	0x0800958f
 8009584:	0800959b 	.word	0x0800959b
 8009588:	2301      	movs	r3, #1
 800958a:	77fb      	strb	r3, [r7, #31]
 800958c:	e150      	b.n	8009830 <UART_SetConfig+0x348>
 800958e:	2302      	movs	r3, #2
 8009590:	77fb      	strb	r3, [r7, #31]
 8009592:	e14d      	b.n	8009830 <UART_SetConfig+0x348>
 8009594:	2304      	movs	r3, #4
 8009596:	77fb      	strb	r3, [r7, #31]
 8009598:	e14a      	b.n	8009830 <UART_SetConfig+0x348>
 800959a:	2308      	movs	r3, #8
 800959c:	77fb      	strb	r3, [r7, #31]
 800959e:	e147      	b.n	8009830 <UART_SetConfig+0x348>
 80095a0:	2310      	movs	r3, #16
 80095a2:	77fb      	strb	r3, [r7, #31]
 80095a4:	e144      	b.n	8009830 <UART_SetConfig+0x348>
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	4a83      	ldr	r2, [pc, #524]	; (80097b8 <UART_SetConfig+0x2d0>)
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d132      	bne.n	8009616 <UART_SetConfig+0x12e>
 80095b0:	4b80      	ldr	r3, [pc, #512]	; (80097b4 <UART_SetConfig+0x2cc>)
 80095b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095b6:	f003 030c 	and.w	r3, r3, #12
 80095ba:	2b0c      	cmp	r3, #12
 80095bc:	d828      	bhi.n	8009610 <UART_SetConfig+0x128>
 80095be:	a201      	add	r2, pc, #4	; (adr r2, 80095c4 <UART_SetConfig+0xdc>)
 80095c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095c4:	080095f9 	.word	0x080095f9
 80095c8:	08009611 	.word	0x08009611
 80095cc:	08009611 	.word	0x08009611
 80095d0:	08009611 	.word	0x08009611
 80095d4:	08009605 	.word	0x08009605
 80095d8:	08009611 	.word	0x08009611
 80095dc:	08009611 	.word	0x08009611
 80095e0:	08009611 	.word	0x08009611
 80095e4:	080095ff 	.word	0x080095ff
 80095e8:	08009611 	.word	0x08009611
 80095ec:	08009611 	.word	0x08009611
 80095f0:	08009611 	.word	0x08009611
 80095f4:	0800960b 	.word	0x0800960b
 80095f8:	2300      	movs	r3, #0
 80095fa:	77fb      	strb	r3, [r7, #31]
 80095fc:	e118      	b.n	8009830 <UART_SetConfig+0x348>
 80095fe:	2302      	movs	r3, #2
 8009600:	77fb      	strb	r3, [r7, #31]
 8009602:	e115      	b.n	8009830 <UART_SetConfig+0x348>
 8009604:	2304      	movs	r3, #4
 8009606:	77fb      	strb	r3, [r7, #31]
 8009608:	e112      	b.n	8009830 <UART_SetConfig+0x348>
 800960a:	2308      	movs	r3, #8
 800960c:	77fb      	strb	r3, [r7, #31]
 800960e:	e10f      	b.n	8009830 <UART_SetConfig+0x348>
 8009610:	2310      	movs	r3, #16
 8009612:	77fb      	strb	r3, [r7, #31]
 8009614:	e10c      	b.n	8009830 <UART_SetConfig+0x348>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	4a68      	ldr	r2, [pc, #416]	; (80097bc <UART_SetConfig+0x2d4>)
 800961c:	4293      	cmp	r3, r2
 800961e:	d120      	bne.n	8009662 <UART_SetConfig+0x17a>
 8009620:	4b64      	ldr	r3, [pc, #400]	; (80097b4 <UART_SetConfig+0x2cc>)
 8009622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009626:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800962a:	2b30      	cmp	r3, #48	; 0x30
 800962c:	d013      	beq.n	8009656 <UART_SetConfig+0x16e>
 800962e:	2b30      	cmp	r3, #48	; 0x30
 8009630:	d814      	bhi.n	800965c <UART_SetConfig+0x174>
 8009632:	2b20      	cmp	r3, #32
 8009634:	d009      	beq.n	800964a <UART_SetConfig+0x162>
 8009636:	2b20      	cmp	r3, #32
 8009638:	d810      	bhi.n	800965c <UART_SetConfig+0x174>
 800963a:	2b00      	cmp	r3, #0
 800963c:	d002      	beq.n	8009644 <UART_SetConfig+0x15c>
 800963e:	2b10      	cmp	r3, #16
 8009640:	d006      	beq.n	8009650 <UART_SetConfig+0x168>
 8009642:	e00b      	b.n	800965c <UART_SetConfig+0x174>
 8009644:	2300      	movs	r3, #0
 8009646:	77fb      	strb	r3, [r7, #31]
 8009648:	e0f2      	b.n	8009830 <UART_SetConfig+0x348>
 800964a:	2302      	movs	r3, #2
 800964c:	77fb      	strb	r3, [r7, #31]
 800964e:	e0ef      	b.n	8009830 <UART_SetConfig+0x348>
 8009650:	2304      	movs	r3, #4
 8009652:	77fb      	strb	r3, [r7, #31]
 8009654:	e0ec      	b.n	8009830 <UART_SetConfig+0x348>
 8009656:	2308      	movs	r3, #8
 8009658:	77fb      	strb	r3, [r7, #31]
 800965a:	e0e9      	b.n	8009830 <UART_SetConfig+0x348>
 800965c:	2310      	movs	r3, #16
 800965e:	77fb      	strb	r3, [r7, #31]
 8009660:	e0e6      	b.n	8009830 <UART_SetConfig+0x348>
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	4a56      	ldr	r2, [pc, #344]	; (80097c0 <UART_SetConfig+0x2d8>)
 8009668:	4293      	cmp	r3, r2
 800966a:	d120      	bne.n	80096ae <UART_SetConfig+0x1c6>
 800966c:	4b51      	ldr	r3, [pc, #324]	; (80097b4 <UART_SetConfig+0x2cc>)
 800966e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009672:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009676:	2bc0      	cmp	r3, #192	; 0xc0
 8009678:	d013      	beq.n	80096a2 <UART_SetConfig+0x1ba>
 800967a:	2bc0      	cmp	r3, #192	; 0xc0
 800967c:	d814      	bhi.n	80096a8 <UART_SetConfig+0x1c0>
 800967e:	2b80      	cmp	r3, #128	; 0x80
 8009680:	d009      	beq.n	8009696 <UART_SetConfig+0x1ae>
 8009682:	2b80      	cmp	r3, #128	; 0x80
 8009684:	d810      	bhi.n	80096a8 <UART_SetConfig+0x1c0>
 8009686:	2b00      	cmp	r3, #0
 8009688:	d002      	beq.n	8009690 <UART_SetConfig+0x1a8>
 800968a:	2b40      	cmp	r3, #64	; 0x40
 800968c:	d006      	beq.n	800969c <UART_SetConfig+0x1b4>
 800968e:	e00b      	b.n	80096a8 <UART_SetConfig+0x1c0>
 8009690:	2300      	movs	r3, #0
 8009692:	77fb      	strb	r3, [r7, #31]
 8009694:	e0cc      	b.n	8009830 <UART_SetConfig+0x348>
 8009696:	2302      	movs	r3, #2
 8009698:	77fb      	strb	r3, [r7, #31]
 800969a:	e0c9      	b.n	8009830 <UART_SetConfig+0x348>
 800969c:	2304      	movs	r3, #4
 800969e:	77fb      	strb	r3, [r7, #31]
 80096a0:	e0c6      	b.n	8009830 <UART_SetConfig+0x348>
 80096a2:	2308      	movs	r3, #8
 80096a4:	77fb      	strb	r3, [r7, #31]
 80096a6:	e0c3      	b.n	8009830 <UART_SetConfig+0x348>
 80096a8:	2310      	movs	r3, #16
 80096aa:	77fb      	strb	r3, [r7, #31]
 80096ac:	e0c0      	b.n	8009830 <UART_SetConfig+0x348>
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	4a44      	ldr	r2, [pc, #272]	; (80097c4 <UART_SetConfig+0x2dc>)
 80096b4:	4293      	cmp	r3, r2
 80096b6:	d125      	bne.n	8009704 <UART_SetConfig+0x21c>
 80096b8:	4b3e      	ldr	r3, [pc, #248]	; (80097b4 <UART_SetConfig+0x2cc>)
 80096ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80096c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80096c6:	d017      	beq.n	80096f8 <UART_SetConfig+0x210>
 80096c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80096cc:	d817      	bhi.n	80096fe <UART_SetConfig+0x216>
 80096ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80096d2:	d00b      	beq.n	80096ec <UART_SetConfig+0x204>
 80096d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80096d8:	d811      	bhi.n	80096fe <UART_SetConfig+0x216>
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d003      	beq.n	80096e6 <UART_SetConfig+0x1fe>
 80096de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096e2:	d006      	beq.n	80096f2 <UART_SetConfig+0x20a>
 80096e4:	e00b      	b.n	80096fe <UART_SetConfig+0x216>
 80096e6:	2300      	movs	r3, #0
 80096e8:	77fb      	strb	r3, [r7, #31]
 80096ea:	e0a1      	b.n	8009830 <UART_SetConfig+0x348>
 80096ec:	2302      	movs	r3, #2
 80096ee:	77fb      	strb	r3, [r7, #31]
 80096f0:	e09e      	b.n	8009830 <UART_SetConfig+0x348>
 80096f2:	2304      	movs	r3, #4
 80096f4:	77fb      	strb	r3, [r7, #31]
 80096f6:	e09b      	b.n	8009830 <UART_SetConfig+0x348>
 80096f8:	2308      	movs	r3, #8
 80096fa:	77fb      	strb	r3, [r7, #31]
 80096fc:	e098      	b.n	8009830 <UART_SetConfig+0x348>
 80096fe:	2310      	movs	r3, #16
 8009700:	77fb      	strb	r3, [r7, #31]
 8009702:	e095      	b.n	8009830 <UART_SetConfig+0x348>
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	4a2f      	ldr	r2, [pc, #188]	; (80097c8 <UART_SetConfig+0x2e0>)
 800970a:	4293      	cmp	r3, r2
 800970c:	d125      	bne.n	800975a <UART_SetConfig+0x272>
 800970e:	4b29      	ldr	r3, [pc, #164]	; (80097b4 <UART_SetConfig+0x2cc>)
 8009710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009714:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009718:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800971c:	d017      	beq.n	800974e <UART_SetConfig+0x266>
 800971e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009722:	d817      	bhi.n	8009754 <UART_SetConfig+0x26c>
 8009724:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009728:	d00b      	beq.n	8009742 <UART_SetConfig+0x25a>
 800972a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800972e:	d811      	bhi.n	8009754 <UART_SetConfig+0x26c>
 8009730:	2b00      	cmp	r3, #0
 8009732:	d003      	beq.n	800973c <UART_SetConfig+0x254>
 8009734:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009738:	d006      	beq.n	8009748 <UART_SetConfig+0x260>
 800973a:	e00b      	b.n	8009754 <UART_SetConfig+0x26c>
 800973c:	2301      	movs	r3, #1
 800973e:	77fb      	strb	r3, [r7, #31]
 8009740:	e076      	b.n	8009830 <UART_SetConfig+0x348>
 8009742:	2302      	movs	r3, #2
 8009744:	77fb      	strb	r3, [r7, #31]
 8009746:	e073      	b.n	8009830 <UART_SetConfig+0x348>
 8009748:	2304      	movs	r3, #4
 800974a:	77fb      	strb	r3, [r7, #31]
 800974c:	e070      	b.n	8009830 <UART_SetConfig+0x348>
 800974e:	2308      	movs	r3, #8
 8009750:	77fb      	strb	r3, [r7, #31]
 8009752:	e06d      	b.n	8009830 <UART_SetConfig+0x348>
 8009754:	2310      	movs	r3, #16
 8009756:	77fb      	strb	r3, [r7, #31]
 8009758:	e06a      	b.n	8009830 <UART_SetConfig+0x348>
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	4a1b      	ldr	r2, [pc, #108]	; (80097cc <UART_SetConfig+0x2e4>)
 8009760:	4293      	cmp	r3, r2
 8009762:	d138      	bne.n	80097d6 <UART_SetConfig+0x2ee>
 8009764:	4b13      	ldr	r3, [pc, #76]	; (80097b4 <UART_SetConfig+0x2cc>)
 8009766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800976a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800976e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009772:	d017      	beq.n	80097a4 <UART_SetConfig+0x2bc>
 8009774:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009778:	d82a      	bhi.n	80097d0 <UART_SetConfig+0x2e8>
 800977a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800977e:	d00b      	beq.n	8009798 <UART_SetConfig+0x2b0>
 8009780:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009784:	d824      	bhi.n	80097d0 <UART_SetConfig+0x2e8>
 8009786:	2b00      	cmp	r3, #0
 8009788:	d003      	beq.n	8009792 <UART_SetConfig+0x2aa>
 800978a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800978e:	d006      	beq.n	800979e <UART_SetConfig+0x2b6>
 8009790:	e01e      	b.n	80097d0 <UART_SetConfig+0x2e8>
 8009792:	2300      	movs	r3, #0
 8009794:	77fb      	strb	r3, [r7, #31]
 8009796:	e04b      	b.n	8009830 <UART_SetConfig+0x348>
 8009798:	2302      	movs	r3, #2
 800979a:	77fb      	strb	r3, [r7, #31]
 800979c:	e048      	b.n	8009830 <UART_SetConfig+0x348>
 800979e:	2304      	movs	r3, #4
 80097a0:	77fb      	strb	r3, [r7, #31]
 80097a2:	e045      	b.n	8009830 <UART_SetConfig+0x348>
 80097a4:	2308      	movs	r3, #8
 80097a6:	77fb      	strb	r3, [r7, #31]
 80097a8:	e042      	b.n	8009830 <UART_SetConfig+0x348>
 80097aa:	bf00      	nop
 80097ac:	efff69f3 	.word	0xefff69f3
 80097b0:	40011000 	.word	0x40011000
 80097b4:	40023800 	.word	0x40023800
 80097b8:	40004400 	.word	0x40004400
 80097bc:	40004800 	.word	0x40004800
 80097c0:	40004c00 	.word	0x40004c00
 80097c4:	40005000 	.word	0x40005000
 80097c8:	40011400 	.word	0x40011400
 80097cc:	40007800 	.word	0x40007800
 80097d0:	2310      	movs	r3, #16
 80097d2:	77fb      	strb	r3, [r7, #31]
 80097d4:	e02c      	b.n	8009830 <UART_SetConfig+0x348>
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	4a72      	ldr	r2, [pc, #456]	; (80099a4 <UART_SetConfig+0x4bc>)
 80097dc:	4293      	cmp	r3, r2
 80097de:	d125      	bne.n	800982c <UART_SetConfig+0x344>
 80097e0:	4b71      	ldr	r3, [pc, #452]	; (80099a8 <UART_SetConfig+0x4c0>)
 80097e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097e6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80097ea:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80097ee:	d017      	beq.n	8009820 <UART_SetConfig+0x338>
 80097f0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80097f4:	d817      	bhi.n	8009826 <UART_SetConfig+0x33e>
 80097f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80097fa:	d00b      	beq.n	8009814 <UART_SetConfig+0x32c>
 80097fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009800:	d811      	bhi.n	8009826 <UART_SetConfig+0x33e>
 8009802:	2b00      	cmp	r3, #0
 8009804:	d003      	beq.n	800980e <UART_SetConfig+0x326>
 8009806:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800980a:	d006      	beq.n	800981a <UART_SetConfig+0x332>
 800980c:	e00b      	b.n	8009826 <UART_SetConfig+0x33e>
 800980e:	2300      	movs	r3, #0
 8009810:	77fb      	strb	r3, [r7, #31]
 8009812:	e00d      	b.n	8009830 <UART_SetConfig+0x348>
 8009814:	2302      	movs	r3, #2
 8009816:	77fb      	strb	r3, [r7, #31]
 8009818:	e00a      	b.n	8009830 <UART_SetConfig+0x348>
 800981a:	2304      	movs	r3, #4
 800981c:	77fb      	strb	r3, [r7, #31]
 800981e:	e007      	b.n	8009830 <UART_SetConfig+0x348>
 8009820:	2308      	movs	r3, #8
 8009822:	77fb      	strb	r3, [r7, #31]
 8009824:	e004      	b.n	8009830 <UART_SetConfig+0x348>
 8009826:	2310      	movs	r3, #16
 8009828:	77fb      	strb	r3, [r7, #31]
 800982a:	e001      	b.n	8009830 <UART_SetConfig+0x348>
 800982c:	2310      	movs	r3, #16
 800982e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	69db      	ldr	r3, [r3, #28]
 8009834:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009838:	d15b      	bne.n	80098f2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800983a:	7ffb      	ldrb	r3, [r7, #31]
 800983c:	2b08      	cmp	r3, #8
 800983e:	d828      	bhi.n	8009892 <UART_SetConfig+0x3aa>
 8009840:	a201      	add	r2, pc, #4	; (adr r2, 8009848 <UART_SetConfig+0x360>)
 8009842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009846:	bf00      	nop
 8009848:	0800986d 	.word	0x0800986d
 800984c:	08009875 	.word	0x08009875
 8009850:	0800987d 	.word	0x0800987d
 8009854:	08009893 	.word	0x08009893
 8009858:	08009883 	.word	0x08009883
 800985c:	08009893 	.word	0x08009893
 8009860:	08009893 	.word	0x08009893
 8009864:	08009893 	.word	0x08009893
 8009868:	0800988b 	.word	0x0800988b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800986c:	f7fd fc50 	bl	8007110 <HAL_RCC_GetPCLK1Freq>
 8009870:	61b8      	str	r0, [r7, #24]
        break;
 8009872:	e013      	b.n	800989c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009874:	f7fd fc60 	bl	8007138 <HAL_RCC_GetPCLK2Freq>
 8009878:	61b8      	str	r0, [r7, #24]
        break;
 800987a:	e00f      	b.n	800989c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800987c:	4b4b      	ldr	r3, [pc, #300]	; (80099ac <UART_SetConfig+0x4c4>)
 800987e:	61bb      	str	r3, [r7, #24]
        break;
 8009880:	e00c      	b.n	800989c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009882:	f7fd fb33 	bl	8006eec <HAL_RCC_GetSysClockFreq>
 8009886:	61b8      	str	r0, [r7, #24]
        break;
 8009888:	e008      	b.n	800989c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800988a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800988e:	61bb      	str	r3, [r7, #24]
        break;
 8009890:	e004      	b.n	800989c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8009892:	2300      	movs	r3, #0
 8009894:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009896:	2301      	movs	r3, #1
 8009898:	77bb      	strb	r3, [r7, #30]
        break;
 800989a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800989c:	69bb      	ldr	r3, [r7, #24]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d074      	beq.n	800998c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80098a2:	69bb      	ldr	r3, [r7, #24]
 80098a4:	005a      	lsls	r2, r3, #1
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	685b      	ldr	r3, [r3, #4]
 80098aa:	085b      	lsrs	r3, r3, #1
 80098ac:	441a      	add	r2, r3
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	685b      	ldr	r3, [r3, #4]
 80098b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80098b6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80098b8:	693b      	ldr	r3, [r7, #16]
 80098ba:	2b0f      	cmp	r3, #15
 80098bc:	d916      	bls.n	80098ec <UART_SetConfig+0x404>
 80098be:	693b      	ldr	r3, [r7, #16]
 80098c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80098c4:	d212      	bcs.n	80098ec <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80098c6:	693b      	ldr	r3, [r7, #16]
 80098c8:	b29b      	uxth	r3, r3
 80098ca:	f023 030f 	bic.w	r3, r3, #15
 80098ce:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80098d0:	693b      	ldr	r3, [r7, #16]
 80098d2:	085b      	lsrs	r3, r3, #1
 80098d4:	b29b      	uxth	r3, r3
 80098d6:	f003 0307 	and.w	r3, r3, #7
 80098da:	b29a      	uxth	r2, r3
 80098dc:	89fb      	ldrh	r3, [r7, #14]
 80098de:	4313      	orrs	r3, r2
 80098e0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	89fa      	ldrh	r2, [r7, #14]
 80098e8:	60da      	str	r2, [r3, #12]
 80098ea:	e04f      	b.n	800998c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80098ec:	2301      	movs	r3, #1
 80098ee:	77bb      	strb	r3, [r7, #30]
 80098f0:	e04c      	b.n	800998c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80098f2:	7ffb      	ldrb	r3, [r7, #31]
 80098f4:	2b08      	cmp	r3, #8
 80098f6:	d828      	bhi.n	800994a <UART_SetConfig+0x462>
 80098f8:	a201      	add	r2, pc, #4	; (adr r2, 8009900 <UART_SetConfig+0x418>)
 80098fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098fe:	bf00      	nop
 8009900:	08009925 	.word	0x08009925
 8009904:	0800992d 	.word	0x0800992d
 8009908:	08009935 	.word	0x08009935
 800990c:	0800994b 	.word	0x0800994b
 8009910:	0800993b 	.word	0x0800993b
 8009914:	0800994b 	.word	0x0800994b
 8009918:	0800994b 	.word	0x0800994b
 800991c:	0800994b 	.word	0x0800994b
 8009920:	08009943 	.word	0x08009943
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009924:	f7fd fbf4 	bl	8007110 <HAL_RCC_GetPCLK1Freq>
 8009928:	61b8      	str	r0, [r7, #24]
        break;
 800992a:	e013      	b.n	8009954 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800992c:	f7fd fc04 	bl	8007138 <HAL_RCC_GetPCLK2Freq>
 8009930:	61b8      	str	r0, [r7, #24]
        break;
 8009932:	e00f      	b.n	8009954 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009934:	4b1d      	ldr	r3, [pc, #116]	; (80099ac <UART_SetConfig+0x4c4>)
 8009936:	61bb      	str	r3, [r7, #24]
        break;
 8009938:	e00c      	b.n	8009954 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800993a:	f7fd fad7 	bl	8006eec <HAL_RCC_GetSysClockFreq>
 800993e:	61b8      	str	r0, [r7, #24]
        break;
 8009940:	e008      	b.n	8009954 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009942:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009946:	61bb      	str	r3, [r7, #24]
        break;
 8009948:	e004      	b.n	8009954 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800994a:	2300      	movs	r3, #0
 800994c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800994e:	2301      	movs	r3, #1
 8009950:	77bb      	strb	r3, [r7, #30]
        break;
 8009952:	bf00      	nop
    }

    if (pclk != 0U)
 8009954:	69bb      	ldr	r3, [r7, #24]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d018      	beq.n	800998c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	685b      	ldr	r3, [r3, #4]
 800995e:	085a      	lsrs	r2, r3, #1
 8009960:	69bb      	ldr	r3, [r7, #24]
 8009962:	441a      	add	r2, r3
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	685b      	ldr	r3, [r3, #4]
 8009968:	fbb2 f3f3 	udiv	r3, r2, r3
 800996c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800996e:	693b      	ldr	r3, [r7, #16]
 8009970:	2b0f      	cmp	r3, #15
 8009972:	d909      	bls.n	8009988 <UART_SetConfig+0x4a0>
 8009974:	693b      	ldr	r3, [r7, #16]
 8009976:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800997a:	d205      	bcs.n	8009988 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800997c:	693b      	ldr	r3, [r7, #16]
 800997e:	b29a      	uxth	r2, r3
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	60da      	str	r2, [r3, #12]
 8009986:	e001      	b.n	800998c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009988:	2301      	movs	r3, #1
 800998a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2200      	movs	r2, #0
 8009990:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2200      	movs	r2, #0
 8009996:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8009998:	7fbb      	ldrb	r3, [r7, #30]
}
 800999a:	4618      	mov	r0, r3
 800999c:	3720      	adds	r7, #32
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}
 80099a2:	bf00      	nop
 80099a4:	40007c00 	.word	0x40007c00
 80099a8:	40023800 	.word	0x40023800
 80099ac:	00f42400 	.word	0x00f42400

080099b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80099b0:	b480      	push	{r7}
 80099b2:	b083      	sub	sp, #12
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099bc:	f003 0301 	and.w	r3, r3, #1
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d00a      	beq.n	80099da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	685b      	ldr	r3, [r3, #4]
 80099ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	430a      	orrs	r2, r1
 80099d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099de:	f003 0302 	and.w	r3, r3, #2
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d00a      	beq.n	80099fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	685b      	ldr	r3, [r3, #4]
 80099ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	430a      	orrs	r2, r1
 80099fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a00:	f003 0304 	and.w	r3, r3, #4
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d00a      	beq.n	8009a1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	685b      	ldr	r3, [r3, #4]
 8009a0e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	430a      	orrs	r2, r1
 8009a1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a22:	f003 0308 	and.w	r3, r3, #8
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d00a      	beq.n	8009a40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	685b      	ldr	r3, [r3, #4]
 8009a30:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	430a      	orrs	r2, r1
 8009a3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a44:	f003 0310 	and.w	r3, r3, #16
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d00a      	beq.n	8009a62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	689b      	ldr	r3, [r3, #8]
 8009a52:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	430a      	orrs	r2, r1
 8009a60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a66:	f003 0320 	and.w	r3, r3, #32
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d00a      	beq.n	8009a84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	689b      	ldr	r3, [r3, #8]
 8009a74:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	430a      	orrs	r2, r1
 8009a82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d01a      	beq.n	8009ac6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	685b      	ldr	r3, [r3, #4]
 8009a96:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	430a      	orrs	r2, r1
 8009aa4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aaa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009aae:	d10a      	bne.n	8009ac6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	685b      	ldr	r3, [r3, #4]
 8009ab6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	430a      	orrs	r2, r1
 8009ac4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d00a      	beq.n	8009ae8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	685b      	ldr	r3, [r3, #4]
 8009ad8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	430a      	orrs	r2, r1
 8009ae6:	605a      	str	r2, [r3, #4]
  }
}
 8009ae8:	bf00      	nop
 8009aea:	370c      	adds	r7, #12
 8009aec:	46bd      	mov	sp, r7
 8009aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af2:	4770      	bx	lr

08009af4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b086      	sub	sp, #24
 8009af8:	af02      	add	r7, sp, #8
 8009afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2200      	movs	r2, #0
 8009b00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009b04:	f7fa fe52 	bl	80047ac <HAL_GetTick>
 8009b08:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f003 0308 	and.w	r3, r3, #8
 8009b14:	2b08      	cmp	r3, #8
 8009b16:	d10e      	bne.n	8009b36 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009b18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009b1c:	9300      	str	r3, [sp, #0]
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	2200      	movs	r2, #0
 8009b22:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f000 f81b 	bl	8009b62 <UART_WaitOnFlagUntilTimeout>
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d001      	beq.n	8009b36 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009b32:	2303      	movs	r3, #3
 8009b34:	e011      	b.n	8009b5a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2220      	movs	r2, #32
 8009b3a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2220      	movs	r2, #32
 8009b40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2200      	movs	r2, #0
 8009b48:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2200      	movs	r2, #0
 8009b54:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8009b58:	2300      	movs	r3, #0
}
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	3710      	adds	r7, #16
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}

08009b62 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009b62:	b580      	push	{r7, lr}
 8009b64:	b09c      	sub	sp, #112	; 0x70
 8009b66:	af00      	add	r7, sp, #0
 8009b68:	60f8      	str	r0, [r7, #12]
 8009b6a:	60b9      	str	r1, [r7, #8]
 8009b6c:	603b      	str	r3, [r7, #0]
 8009b6e:	4613      	mov	r3, r2
 8009b70:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b72:	e0a7      	b.n	8009cc4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b7a:	f000 80a3 	beq.w	8009cc4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b7e:	f7fa fe15 	bl	80047ac <HAL_GetTick>
 8009b82:	4602      	mov	r2, r0
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	1ad3      	subs	r3, r2, r3
 8009b88:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009b8a:	429a      	cmp	r2, r3
 8009b8c:	d302      	bcc.n	8009b94 <UART_WaitOnFlagUntilTimeout+0x32>
 8009b8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d13f      	bne.n	8009c14 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b9c:	e853 3f00 	ldrex	r3, [r3]
 8009ba0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009ba2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ba4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009ba8:	667b      	str	r3, [r7, #100]	; 0x64
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	461a      	mov	r2, r3
 8009bb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009bb2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009bb4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bb6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009bb8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009bba:	e841 2300 	strex	r3, r2, [r1]
 8009bbe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009bc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d1e6      	bne.n	8009b94 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	3308      	adds	r3, #8
 8009bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bd0:	e853 3f00 	ldrex	r3, [r3]
 8009bd4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bd8:	f023 0301 	bic.w	r3, r3, #1
 8009bdc:	663b      	str	r3, [r7, #96]	; 0x60
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	3308      	adds	r3, #8
 8009be4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009be6:	64ba      	str	r2, [r7, #72]	; 0x48
 8009be8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009bec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009bee:	e841 2300 	strex	r3, r2, [r1]
 8009bf2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009bf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d1e5      	bne.n	8009bc6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	2220      	movs	r2, #32
 8009bfe:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	2220      	movs	r2, #32
 8009c04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8009c10:	2303      	movs	r3, #3
 8009c12:	e068      	b.n	8009ce6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	f003 0304 	and.w	r3, r3, #4
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d050      	beq.n	8009cc4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	69db      	ldr	r3, [r3, #28]
 8009c28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009c2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009c30:	d148      	bne.n	8009cc4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009c3a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c44:	e853 3f00 	ldrex	r3, [r3]
 8009c48:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c4c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009c50:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	461a      	mov	r2, r3
 8009c58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c5a:	637b      	str	r3, [r7, #52]	; 0x34
 8009c5c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c5e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009c60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009c62:	e841 2300 	strex	r3, r2, [r1]
 8009c66:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d1e6      	bne.n	8009c3c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	3308      	adds	r3, #8
 8009c74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c76:	697b      	ldr	r3, [r7, #20]
 8009c78:	e853 3f00 	ldrex	r3, [r3]
 8009c7c:	613b      	str	r3, [r7, #16]
   return(result);
 8009c7e:	693b      	ldr	r3, [r7, #16]
 8009c80:	f023 0301 	bic.w	r3, r3, #1
 8009c84:	66bb      	str	r3, [r7, #104]	; 0x68
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	3308      	adds	r3, #8
 8009c8c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009c8e:	623a      	str	r2, [r7, #32]
 8009c90:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c92:	69f9      	ldr	r1, [r7, #28]
 8009c94:	6a3a      	ldr	r2, [r7, #32]
 8009c96:	e841 2300 	strex	r3, r2, [r1]
 8009c9a:	61bb      	str	r3, [r7, #24]
   return(result);
 8009c9c:	69bb      	ldr	r3, [r7, #24]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d1e5      	bne.n	8009c6e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	2220      	movs	r2, #32
 8009ca6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	2220      	movs	r2, #32
 8009cac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	2220      	movs	r2, #32
 8009cb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	2200      	movs	r2, #0
 8009cbc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8009cc0:	2303      	movs	r3, #3
 8009cc2:	e010      	b.n	8009ce6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	69da      	ldr	r2, [r3, #28]
 8009cca:	68bb      	ldr	r3, [r7, #8]
 8009ccc:	4013      	ands	r3, r2
 8009cce:	68ba      	ldr	r2, [r7, #8]
 8009cd0:	429a      	cmp	r2, r3
 8009cd2:	bf0c      	ite	eq
 8009cd4:	2301      	moveq	r3, #1
 8009cd6:	2300      	movne	r3, #0
 8009cd8:	b2db      	uxtb	r3, r3
 8009cda:	461a      	mov	r2, r3
 8009cdc:	79fb      	ldrb	r3, [r7, #7]
 8009cde:	429a      	cmp	r2, r3
 8009ce0:	f43f af48 	beq.w	8009b74 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009ce4:	2300      	movs	r3, #0
}
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	3770      	adds	r7, #112	; 0x70
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}

08009cee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009cee:	b480      	push	{r7}
 8009cf0:	b095      	sub	sp, #84	; 0x54
 8009cf2:	af00      	add	r7, sp, #0
 8009cf4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cfe:	e853 3f00 	ldrex	r3, [r3]
 8009d02:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d06:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009d0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	461a      	mov	r2, r3
 8009d12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d14:	643b      	str	r3, [r7, #64]	; 0x40
 8009d16:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d18:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009d1a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009d1c:	e841 2300 	strex	r3, r2, [r1]
 8009d20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d1e6      	bne.n	8009cf6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	3308      	adds	r3, #8
 8009d2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d30:	6a3b      	ldr	r3, [r7, #32]
 8009d32:	e853 3f00 	ldrex	r3, [r3]
 8009d36:	61fb      	str	r3, [r7, #28]
   return(result);
 8009d38:	69fb      	ldr	r3, [r7, #28]
 8009d3a:	f023 0301 	bic.w	r3, r3, #1
 8009d3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	3308      	adds	r3, #8
 8009d46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009d48:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009d4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009d4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d50:	e841 2300 	strex	r3, r2, [r1]
 8009d54:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d1e5      	bne.n	8009d28 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d60:	2b01      	cmp	r3, #1
 8009d62:	d118      	bne.n	8009d96 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	e853 3f00 	ldrex	r3, [r3]
 8009d70:	60bb      	str	r3, [r7, #8]
   return(result);
 8009d72:	68bb      	ldr	r3, [r7, #8]
 8009d74:	f023 0310 	bic.w	r3, r3, #16
 8009d78:	647b      	str	r3, [r7, #68]	; 0x44
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	461a      	mov	r2, r3
 8009d80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d82:	61bb      	str	r3, [r7, #24]
 8009d84:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d86:	6979      	ldr	r1, [r7, #20]
 8009d88:	69ba      	ldr	r2, [r7, #24]
 8009d8a:	e841 2300 	strex	r3, r2, [r1]
 8009d8e:	613b      	str	r3, [r7, #16]
   return(result);
 8009d90:	693b      	ldr	r3, [r7, #16]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d1e6      	bne.n	8009d64 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2220      	movs	r2, #32
 8009d9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2200      	movs	r2, #0
 8009da2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2200      	movs	r2, #0
 8009da8:	669a      	str	r2, [r3, #104]	; 0x68
}
 8009daa:	bf00      	nop
 8009dac:	3754      	adds	r7, #84	; 0x54
 8009dae:	46bd      	mov	sp, r7
 8009db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db4:	4770      	bx	lr

08009db6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009db6:	b580      	push	{r7, lr}
 8009db8:	b084      	sub	sp, #16
 8009dba:	af00      	add	r7, sp, #0
 8009dbc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dc2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	2200      	movs	r2, #0
 8009dd0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009dd4:	68f8      	ldr	r0, [r7, #12]
 8009dd6:	f7ff fb71 	bl	80094bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009dda:	bf00      	nop
 8009ddc:	3710      	adds	r7, #16
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bd80      	pop	{r7, pc}

08009de2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009de2:	b580      	push	{r7, lr}
 8009de4:	b088      	sub	sp, #32
 8009de6:	af00      	add	r7, sp, #0
 8009de8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	e853 3f00 	ldrex	r3, [r3]
 8009df6:	60bb      	str	r3, [r7, #8]
   return(result);
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009dfe:	61fb      	str	r3, [r7, #28]
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	461a      	mov	r2, r3
 8009e06:	69fb      	ldr	r3, [r7, #28]
 8009e08:	61bb      	str	r3, [r7, #24]
 8009e0a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e0c:	6979      	ldr	r1, [r7, #20]
 8009e0e:	69ba      	ldr	r2, [r7, #24]
 8009e10:	e841 2300 	strex	r3, r2, [r1]
 8009e14:	613b      	str	r3, [r7, #16]
   return(result);
 8009e16:	693b      	ldr	r3, [r7, #16]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d1e6      	bne.n	8009dea <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2220      	movs	r2, #32
 8009e20:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2200      	movs	r2, #0
 8009e26:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009e28:	6878      	ldr	r0, [r7, #4]
 8009e2a:	f7ff fb3d 	bl	80094a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009e2e:	bf00      	nop
 8009e30:	3720      	adds	r7, #32
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd80      	pop	{r7, pc}

08009e36 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8009e36:	b580      	push	{r7, lr}
 8009e38:	b084      	sub	sp, #16
 8009e3a:	af00      	add	r7, sp, #0
 8009e3c:	6078      	str	r0, [r7, #4]
 8009e3e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009e40:	2300      	movs	r3, #0
 8009e42:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8009e44:	6839      	ldr	r1, [r7, #0]
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	f001 fd28 	bl	800b89c <VL53L0X_get_offset_calibration_data_micro_meter>
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8009e50:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009e54:	4618      	mov	r0, r3
 8009e56:	3710      	adds	r7, #16
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bd80      	pop	{r7, pc}

08009e5c <VL53L0X_SetDeviceAddress>:

/* End Group PAL General Functions */

/* Group PAL Init Functions */
VL53L0X_Error VL53L0X_SetDeviceAddress(VL53L0X_DEV Dev, uint8_t DeviceAddress)
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b084      	sub	sp, #16
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
 8009e64:	460b      	mov	r3, r1
 8009e66:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009e68:	2300      	movs	r3, #0
 8009e6a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_I2C_SLAVE_DEVICE_ADDRESS,
 8009e6c:	78fb      	ldrb	r3, [r7, #3]
 8009e6e:	085b      	lsrs	r3, r3, #1
 8009e70:	b2db      	uxtb	r3, r3
 8009e72:	461a      	mov	r2, r3
 8009e74:	218a      	movs	r1, #138	; 0x8a
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f004 ff46 	bl	800ed08 <VL53L0X_WrByte>
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	73fb      	strb	r3, [r7, #15]
		DeviceAddress / 2);

	LOG_FUNCTION_END(Status);
	return Status;
 8009e80:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009e84:	4618      	mov	r0, r3
 8009e86:	3710      	adds	r7, #16
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bd80      	pop	{r7, pc}

08009e8c <VL53L0X_DataInit>:

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8009e8c:	b5b0      	push	{r4, r5, r7, lr}
 8009e8e:	b096      	sub	sp, #88	; 0x58
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009e94:	2300      	movs	r3, #0
 8009e96:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8009e9a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d107      	bne.n	8009eb2 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	2188      	movs	r1, #136	; 0x88
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f004 ff2e 	bl	800ed08 <VL53L0X_WrByte>
 8009eac:	4603      	mov	r3, r0
 8009eae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009ec0:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009eca:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	4a9e      	ldr	r2, [pc, #632]	; (800a14c <VL53L0X_DataInit+0x2c0>)
 8009ed2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	4a9d      	ldr	r2, [pc, #628]	; (800a150 <VL53L0X_DataInit+0x2c4>)
 8009eda:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8009ee4:	f107 0310 	add.w	r3, r7, #16
 8009ee8:	4619      	mov	r1, r3
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	f000 fac2 	bl	800a474 <VL53L0X_GetDeviceParameters>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8009ef6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d112      	bne.n	8009f24 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8009efe:	2300      	movs	r3, #0
 8009f00:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8009f02:	2300      	movs	r3, #0
 8009f04:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	f103 0410 	add.w	r4, r3, #16
 8009f0c:	f107 0510 	add.w	r5, r7, #16
 8009f10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009f12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009f14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009f16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009f18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009f1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009f1c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8009f20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2264      	movs	r2, #100	; 0x64
 8009f28:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f44f 7261 	mov.w	r2, #900	; 0x384
 8009f32:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8009f3c:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8009f46:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	2201      	movs	r2, #1
 8009f4e:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8009f52:	2201      	movs	r2, #1
 8009f54:	2180      	movs	r1, #128	; 0x80
 8009f56:	6878      	ldr	r0, [r7, #4]
 8009f58:	f004 fed6 	bl	800ed08 <VL53L0X_WrByte>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	461a      	mov	r2, r3
 8009f60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009f64:	4313      	orrs	r3, r2
 8009f66:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009f6a:	2201      	movs	r2, #1
 8009f6c:	21ff      	movs	r1, #255	; 0xff
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f004 feca 	bl	800ed08 <VL53L0X_WrByte>
 8009f74:	4603      	mov	r3, r0
 8009f76:	461a      	mov	r2, r3
 8009f78:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009f7c:	4313      	orrs	r3, r2
 8009f7e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8009f82:	2200      	movs	r2, #0
 8009f84:	2100      	movs	r1, #0
 8009f86:	6878      	ldr	r0, [r7, #4]
 8009f88:	f004 febe 	bl	800ed08 <VL53L0X_WrByte>
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	461a      	mov	r2, r3
 8009f90:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009f94:	4313      	orrs	r3, r2
 8009f96:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8009f9a:	f107 030f 	add.w	r3, r7, #15
 8009f9e:	461a      	mov	r2, r3
 8009fa0:	2191      	movs	r1, #145	; 0x91
 8009fa2:	6878      	ldr	r0, [r7, #4]
 8009fa4:	f004 ff32 	bl	800ee0c <VL53L0X_RdByte>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	461a      	mov	r2, r3
 8009fac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009fb0:	4313      	orrs	r3, r2
 8009fb2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8009fb6:	7bfa      	ldrb	r2, [r7, #15]
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8009fbe:	2201      	movs	r2, #1
 8009fc0:	2100      	movs	r1, #0
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f004 fea0 	bl	800ed08 <VL53L0X_WrByte>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	461a      	mov	r2, r3
 8009fcc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009fd0:	4313      	orrs	r3, r2
 8009fd2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	21ff      	movs	r1, #255	; 0xff
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	f004 fe94 	bl	800ed08 <VL53L0X_WrByte>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	461a      	mov	r2, r3
 8009fe4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009fe8:	4313      	orrs	r3, r2
 8009fea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8009fee:	2200      	movs	r2, #0
 8009ff0:	2180      	movs	r1, #128	; 0x80
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	f004 fe88 	bl	800ed08 <VL53L0X_WrByte>
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	461a      	mov	r2, r3
 8009ffc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a000:	4313      	orrs	r3, r2
 800a002:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800a006:	2300      	movs	r3, #0
 800a008:	653b      	str	r3, [r7, #80]	; 0x50
 800a00a:	e014      	b.n	800a036 <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 800a00c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a010:	2b00      	cmp	r3, #0
 800a012:	d114      	bne.n	800a03e <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 800a014:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a016:	b29b      	uxth	r3, r3
 800a018:	2201      	movs	r2, #1
 800a01a:	4619      	mov	r1, r3
 800a01c:	6878      	ldr	r0, [r7, #4]
 800a01e:	f000 fd4d 	bl	800aabc <VL53L0X_SetLimitCheckEnable>
 800a022:	4603      	mov	r3, r0
 800a024:	461a      	mov	r2, r3
 800a026:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a02a:	4313      	orrs	r3, r2
 800a02c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800a030:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a032:	3301      	adds	r3, #1
 800a034:	653b      	str	r3, [r7, #80]	; 0x50
 800a036:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a038:	2b05      	cmp	r3, #5
 800a03a:	dde7      	ble.n	800a00c <VL53L0X_DataInit+0x180>
 800a03c:	e000      	b.n	800a040 <VL53L0X_DataInit+0x1b4>
		else
			break;
 800a03e:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 800a040:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a044:	2b00      	cmp	r3, #0
 800a046:	d107      	bne.n	800a058 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800a048:	2200      	movs	r2, #0
 800a04a:	2102      	movs	r1, #2
 800a04c:	6878      	ldr	r0, [r7, #4]
 800a04e:	f000 fd35 	bl	800aabc <VL53L0X_SetLimitCheckEnable>
 800a052:	4603      	mov	r3, r0
 800a054:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800a058:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d107      	bne.n	800a070 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800a060:	2200      	movs	r2, #0
 800a062:	2103      	movs	r1, #3
 800a064:	6878      	ldr	r0, [r7, #4]
 800a066:	f000 fd29 	bl	800aabc <VL53L0X_SetLimitCheckEnable>
 800a06a:	4603      	mov	r3, r0
 800a06c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800a070:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a074:	2b00      	cmp	r3, #0
 800a076:	d107      	bne.n	800a088 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800a078:	2200      	movs	r2, #0
 800a07a:	2104      	movs	r1, #4
 800a07c:	6878      	ldr	r0, [r7, #4]
 800a07e:	f000 fd1d 	bl	800aabc <VL53L0X_SetLimitCheckEnable>
 800a082:	4603      	mov	r3, r0
 800a084:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800a088:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d107      	bne.n	800a0a0 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800a090:	2200      	movs	r2, #0
 800a092:	2105      	movs	r1, #5
 800a094:	6878      	ldr	r0, [r7, #4]
 800a096:	f000 fd11 	bl	800aabc <VL53L0X_SetLimitCheckEnable>
 800a09a:	4603      	mov	r3, r0
 800a09c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 800a0a0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d108      	bne.n	800a0ba <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800a0a8:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 800a0ac:	2100      	movs	r1, #0
 800a0ae:	6878      	ldr	r0, [r7, #4]
 800a0b0:	f000 fdb4 	bl	800ac1c <VL53L0X_SetLimitCheckValue>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800a0ba:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d108      	bne.n	800a0d4 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800a0c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a0c6:	2101      	movs	r1, #1
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	f000 fda7 	bl	800ac1c <VL53L0X_SetLimitCheckValue>
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a0d4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d108      	bne.n	800a0ee <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800a0dc:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 800a0e0:	2102      	movs	r1, #2
 800a0e2:	6878      	ldr	r0, [r7, #4]
 800a0e4:	f000 fd9a 	bl	800ac1c <VL53L0X_SetLimitCheckValue>
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a0ee:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d107      	bne.n	800a106 <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	2103      	movs	r1, #3
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	f000 fd8e 	bl	800ac1c <VL53L0X_SetLimitCheckValue>
 800a100:	4603      	mov	r3, r0
 800a102:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a106:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d10f      	bne.n	800a12e <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	22ff      	movs	r2, #255	; 0xff
 800a112:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800a116:	22ff      	movs	r2, #255	; 0xff
 800a118:	2101      	movs	r1, #1
 800a11a:	6878      	ldr	r0, [r7, #4]
 800a11c:	f004 fdf4 	bl	800ed08 <VL53L0X_WrByte>
 800a120:	4603      	mov	r3, r0
 800a122:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	2201      	movs	r2, #1
 800a12a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 800a12e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a132:	2b00      	cmp	r3, #0
 800a134:	d103      	bne.n	800a13e <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	2200      	movs	r2, #0
 800a13a:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 800a13e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800a142:	4618      	mov	r0, r3
 800a144:	3758      	adds	r7, #88	; 0x58
 800a146:	46bd      	mov	sp, r7
 800a148:	bdb0      	pop	{r4, r5, r7, pc}
 800a14a:	bf00      	nop
 800a14c:	00016b85 	.word	0x00016b85
 800a150:	000970a4 	.word	0x000970a4

0800a154 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 800a154:	b5b0      	push	{r4, r5, r7, lr}
 800a156:	b09e      	sub	sp, #120	; 0x78
 800a158:	af02      	add	r7, sp, #8
 800a15a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a15c:	2300      	movs	r3, #0
 800a15e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 800a162:	f107 031c 	add.w	r3, r7, #28
 800a166:	2240      	movs	r2, #64	; 0x40
 800a168:	2100      	movs	r1, #0
 800a16a:	4618      	mov	r0, r3
 800a16c:	f008 fb3c 	bl	80127e8 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 800a170:	2300      	movs	r3, #0
 800a172:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 800a174:	2300      	movs	r3, #0
 800a176:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 800a178:	2300      	movs	r3, #0
 800a17a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 800a17e:	2300      	movs	r3, #0
 800a180:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 800a182:	2300      	movs	r3, #0
 800a184:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 800a186:	2300      	movs	r3, #0
 800a188:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 800a18a:	2300      	movs	r3, #0
 800a18c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 800a190:	2101      	movs	r1, #1
 800a192:	6878      	ldr	r0, [r7, #4]
 800a194:	f002 fafc 	bl	800c790 <VL53L0X_get_info_from_device>
 800a198:	4603      	mov	r3, r0
 800a19a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 800a1a4:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 800a1ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 800a1b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a1b4:	2b01      	cmp	r3, #1
 800a1b6:	d80d      	bhi.n	800a1d4 <VL53L0X_StaticInit+0x80>
 800a1b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a1bc:	2b01      	cmp	r3, #1
 800a1be:	d102      	bne.n	800a1c6 <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 800a1c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a1c2:	2b20      	cmp	r3, #32
 800a1c4:	d806      	bhi.n	800a1d4 <VL53L0X_StaticInit+0x80>
 800a1c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d10e      	bne.n	800a1ec <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 800a1ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a1d0:	2b0c      	cmp	r3, #12
 800a1d2:	d90b      	bls.n	800a1ec <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 800a1d4:	f107 0218 	add.w	r2, r7, #24
 800a1d8:	f107 0314 	add.w	r3, r7, #20
 800a1dc:	4619      	mov	r1, r3
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	f001 fd58 	bl	800bc94 <VL53L0X_perform_ref_spad_management>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800a1ea:	e009      	b.n	800a200 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 800a1ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a1f0:	461a      	mov	r2, r3
 800a1f2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800a1f4:	6878      	ldr	r0, [r7, #4]
 800a1f6:	f001 ff59 	bl	800c0ac <VL53L0X_set_reference_spads>
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 800a200:	4b94      	ldr	r3, [pc, #592]	; (800a454 <VL53L0X_StaticInit+0x300>)
 800a202:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 800a204:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d10f      	bne.n	800a22c <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 800a212:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 800a216:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d104      	bne.n	800a228 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800a224:	66bb      	str	r3, [r7, #104]	; 0x68
 800a226:	e001      	b.n	800a22c <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 800a228:	4b8a      	ldr	r3, [pc, #552]	; (800a454 <VL53L0X_StaticInit+0x300>)
 800a22a:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 800a22c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a230:	2b00      	cmp	r3, #0
 800a232:	d106      	bne.n	800a242 <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 800a234:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a236:	6878      	ldr	r0, [r7, #4]
 800a238:	f003 fe50 	bl	800dedc <VL53L0X_load_tuning_settings>
 800a23c:	4603      	mov	r3, r0
 800a23e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 800a242:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a246:	2b00      	cmp	r3, #0
 800a248:	d10a      	bne.n	800a260 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 800a24a:	2300      	movs	r3, #0
 800a24c:	9300      	str	r3, [sp, #0]
 800a24e:	2304      	movs	r3, #4
 800a250:	2200      	movs	r2, #0
 800a252:	2100      	movs	r1, #0
 800a254:	6878      	ldr	r0, [r7, #4]
 800a256:	f001 f909 	bl	800b46c <VL53L0X_SetGpioConfig>
 800a25a:	4603      	mov	r3, r0
 800a25c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a260:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a264:	2b00      	cmp	r3, #0
 800a266:	d121      	bne.n	800a2ac <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a268:	2201      	movs	r2, #1
 800a26a:	21ff      	movs	r1, #255	; 0xff
 800a26c:	6878      	ldr	r0, [r7, #4]
 800a26e:	f004 fd4b 	bl	800ed08 <VL53L0X_WrByte>
 800a272:	4603      	mov	r3, r0
 800a274:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 800a278:	f107 031a 	add.w	r3, r7, #26
 800a27c:	461a      	mov	r2, r3
 800a27e:	2184      	movs	r1, #132	; 0x84
 800a280:	6878      	ldr	r0, [r7, #4]
 800a282:	f004 fded 	bl	800ee60 <VL53L0X_RdWord>
 800a286:	4603      	mov	r3, r0
 800a288:	461a      	mov	r2, r3
 800a28a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800a28e:	4313      	orrs	r3, r2
 800a290:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a294:	2200      	movs	r2, #0
 800a296:	21ff      	movs	r1, #255	; 0xff
 800a298:	6878      	ldr	r0, [r7, #4]
 800a29a:	f004 fd35 	bl	800ed08 <VL53L0X_WrByte>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	461a      	mov	r2, r3
 800a2a2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800a2a6:	4313      	orrs	r3, r2
 800a2a8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a2ac:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d105      	bne.n	800a2c0 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 800a2b4:	8b7b      	ldrh	r3, [r7, #26]
 800a2b6:	011b      	lsls	r3, r3, #4
 800a2b8:	461a      	mov	r2, r3
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 800a2c0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d108      	bne.n	800a2da <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800a2c8:	f107 031c 	add.w	r3, r7, #28
 800a2cc:	4619      	mov	r1, r3
 800a2ce:	6878      	ldr	r0, [r7, #4]
 800a2d0:	f000 f8d0 	bl	800a474 <VL53L0X_GetDeviceParameters>
 800a2d4:	4603      	mov	r3, r0
 800a2d6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 800a2da:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d110      	bne.n	800a304 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 800a2e2:	f107 0319 	add.w	r3, r7, #25
 800a2e6:	4619      	mov	r1, r3
 800a2e8:	6878      	ldr	r0, [r7, #4]
 800a2ea:	f000 f992 	bl	800a612 <VL53L0X_GetFractionEnable>
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 800a2f4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d103      	bne.n	800a304 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 800a2fc:	7e7a      	ldrb	r2, [r7, #25]
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 800a304:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d10e      	bne.n	800a32a <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	f103 0410 	add.w	r4, r3, #16
 800a312:	f107 051c 	add.w	r5, r7, #28
 800a316:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a318:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a31a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a31c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a31e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a320:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a322:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800a326:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 800a32a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d111      	bne.n	800a356 <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 800a332:	f107 0319 	add.w	r3, r7, #25
 800a336:	461a      	mov	r2, r3
 800a338:	2101      	movs	r1, #1
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	f004 fd66 	bl	800ee0c <VL53L0X_RdByte>
 800a340:	4603      	mov	r3, r0
 800a342:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 800a346:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d103      	bne.n	800a356 <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 800a34e:	7e7a      	ldrb	r2, [r7, #25]
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 800a356:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d107      	bne.n	800a36e <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800a35e:	2200      	movs	r2, #0
 800a360:	2100      	movs	r1, #0
 800a362:	6878      	ldr	r0, [r7, #4]
 800a364:	f000 f9ca 	bl	800a6fc <VL53L0X_SetSequenceStepEnable>
 800a368:	4603      	mov	r3, r0
 800a36a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800a36e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a372:	2b00      	cmp	r3, #0
 800a374:	d107      	bne.n	800a386 <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800a376:	2200      	movs	r2, #0
 800a378:	2102      	movs	r1, #2
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	f000 f9be 	bl	800a6fc <VL53L0X_SetSequenceStepEnable>
 800a380:	4603      	mov	r3, r0
 800a382:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 800a386:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d103      	bne.n	800a396 <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	2203      	movs	r2, #3
 800a392:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800a396:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d109      	bne.n	800a3b2 <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 800a39e:	f107 0313 	add.w	r3, r7, #19
 800a3a2:	461a      	mov	r2, r3
 800a3a4:	2100      	movs	r1, #0
 800a3a6:	6878      	ldr	r0, [r7, #4]
 800a3a8:	f000 f990 	bl	800a6cc <VL53L0X_GetVcselPulsePeriod>
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a3b2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d103      	bne.n	800a3c2 <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a3ba:	7cfa      	ldrb	r2, [r7, #19]
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800a3c2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d109      	bne.n	800a3de <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 800a3ca:	f107 0313 	add.w	r3, r7, #19
 800a3ce:	461a      	mov	r2, r3
 800a3d0:	2101      	movs	r1, #1
 800a3d2:	6878      	ldr	r0, [r7, #4]
 800a3d4:	f000 f97a 	bl	800a6cc <VL53L0X_GetVcselPulsePeriod>
 800a3d8:	4603      	mov	r3, r0
 800a3da:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a3de:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d103      	bne.n	800a3ee <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a3e6:	7cfa      	ldrb	r2, [r7, #19]
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800a3ee:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d109      	bne.n	800a40a <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 800a3f6:	f107 030c 	add.w	r3, r7, #12
 800a3fa:	461a      	mov	r2, r3
 800a3fc:	2103      	movs	r1, #3
 800a3fe:	6878      	ldr	r0, [r7, #4]
 800a400:	f002 ff48 	bl	800d294 <get_sequence_step_timeout>
 800a404:	4603      	mov	r3, r0
 800a406:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a40a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d103      	bne.n	800a41a <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a412:	68fa      	ldr	r2, [r7, #12]
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800a41a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d109      	bne.n	800a436 <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 800a422:	f107 030c 	add.w	r3, r7, #12
 800a426:	461a      	mov	r2, r3
 800a428:	2104      	movs	r1, #4
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	f002 ff32 	bl	800d294 <get_sequence_step_timeout>
 800a430:	4603      	mov	r3, r0
 800a432:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a436:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d103      	bne.n	800a446 <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a43e:	68fa      	ldr	r2, [r7, #12]
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a446:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 800a44a:	4618      	mov	r0, r3
 800a44c:	3770      	adds	r7, #112	; 0x70
 800a44e:	46bd      	mov	sp, r7
 800a450:	bdb0      	pop	{r4, r5, r7, pc}
 800a452:	bf00      	nop
 800a454:	20000310 	.word	0x20000310

0800a458 <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 800a458:	b480      	push	{r7}
 800a45a:	b085      	sub	sp, #20
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 800a460:	239d      	movs	r3, #157	; 0x9d
 800a462:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 800a464:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a468:	4618      	mov	r0, r3
 800a46a:	3714      	adds	r7, #20
 800a46c:	46bd      	mov	sp, r7
 800a46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a472:	4770      	bx	lr

0800a474 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b084      	sub	sp, #16
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
 800a47c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a47e:	2300      	movs	r3, #0
 800a480:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	4619      	mov	r1, r3
 800a486:	6878      	ldr	r0, [r7, #4]
 800a488:	f000 f8b0 	bl	800a5ec <VL53L0X_GetDeviceMode>
 800a48c:	4603      	mov	r3, r0
 800a48e:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800a490:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d107      	bne.n	800a4a8 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	3308      	adds	r3, #8
 800a49c:	4619      	mov	r1, r3
 800a49e:	6878      	ldr	r0, [r7, #4]
 800a4a0:	f000 fa78 	bl	800a994 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 800a4a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d102      	bne.n	800a4b6 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 800a4b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d107      	bne.n	800a4ce <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	3310      	adds	r3, #16
 800a4c2:	4619      	mov	r1, r3
 800a4c4:	6878      	ldr	r0, [r7, #4]
 800a4c6:	f000 faae 	bl	800aa26 <VL53L0X_GetXTalkCompensationRateMegaCps>
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 800a4ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d107      	bne.n	800a4e6 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	3314      	adds	r3, #20
 800a4da:	4619      	mov	r1, r3
 800a4dc:	6878      	ldr	r0, [r7, #4]
 800a4de:	f7ff fcaa 	bl	8009e36 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 800a4e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d134      	bne.n	800a558 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	60bb      	str	r3, [r7, #8]
 800a4f2:	e02a      	b.n	800a54a <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800a4f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d12a      	bne.n	800a552 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 800a4fc:	68bb      	ldr	r3, [r7, #8]
 800a4fe:	b299      	uxth	r1, r3
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	3308      	adds	r3, #8
 800a504:	009b      	lsls	r3, r3, #2
 800a506:	683a      	ldr	r2, [r7, #0]
 800a508:	4413      	add	r3, r2
 800a50a:	3304      	adds	r3, #4
 800a50c:	461a      	mov	r2, r3
 800a50e:	6878      	ldr	r0, [r7, #4]
 800a510:	f000 fbe6 	bl	800ace0 <VL53L0X_GetLimitCheckValue>
 800a514:	4603      	mov	r3, r0
 800a516:	461a      	mov	r2, r3
 800a518:	7bfb      	ldrb	r3, [r7, #15]
 800a51a:	4313      	orrs	r3, r2
 800a51c:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800a51e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d117      	bne.n	800a556 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 800a526:	68bb      	ldr	r3, [r7, #8]
 800a528:	b299      	uxth	r1, r3
 800a52a:	68bb      	ldr	r3, [r7, #8]
 800a52c:	3318      	adds	r3, #24
 800a52e:	683a      	ldr	r2, [r7, #0]
 800a530:	4413      	add	r3, r2
 800a532:	461a      	mov	r2, r3
 800a534:	6878      	ldr	r0, [r7, #4]
 800a536:	f000 fb4d 	bl	800abd4 <VL53L0X_GetLimitCheckEnable>
 800a53a:	4603      	mov	r3, r0
 800a53c:	461a      	mov	r2, r3
 800a53e:	7bfb      	ldrb	r3, [r7, #15]
 800a540:	4313      	orrs	r3, r2
 800a542:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800a544:	68bb      	ldr	r3, [r7, #8]
 800a546:	3301      	adds	r3, #1
 800a548:	60bb      	str	r3, [r7, #8]
 800a54a:	68bb      	ldr	r3, [r7, #8]
 800a54c:	2b05      	cmp	r3, #5
 800a54e:	ddd1      	ble.n	800a4f4 <VL53L0X_GetDeviceParameters+0x80>
 800a550:	e002      	b.n	800a558 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 800a552:	bf00      	nop
 800a554:	e000      	b.n	800a558 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 800a556:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a558:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d107      	bne.n	800a570 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	333c      	adds	r3, #60	; 0x3c
 800a564:	4619      	mov	r1, r3
 800a566:	6878      	ldr	r0, [r7, #4]
 800a568:	f000 fc48 	bl	800adfc <VL53L0X_GetWrapAroundCheckEnable>
 800a56c:	4603      	mov	r3, r0
 800a56e:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 800a570:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d107      	bne.n	800a588 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	3304      	adds	r3, #4
 800a57c:	4619      	mov	r1, r3
 800a57e:	6878      	ldr	r0, [r7, #4]
 800a580:	f000 f879 	bl	800a676 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 800a584:	4603      	mov	r3, r0
 800a586:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a588:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a58c:	4618      	mov	r0, r3
 800a58e:	3710      	adds	r7, #16
 800a590:	46bd      	mov	sp, r7
 800a592:	bd80      	pop	{r7, pc}

0800a594 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 800a594:	b480      	push	{r7}
 800a596:	b085      	sub	sp, #20
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
 800a59c:	460b      	mov	r3, r1
 800a59e:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 800a5a4:	78fb      	ldrb	r3, [r7, #3]
 800a5a6:	2b15      	cmp	r3, #21
 800a5a8:	bf8c      	ite	hi
 800a5aa:	2201      	movhi	r2, #1
 800a5ac:	2200      	movls	r2, #0
 800a5ae:	b2d2      	uxtb	r2, r2
 800a5b0:	2a00      	cmp	r2, #0
 800a5b2:	d10e      	bne.n	800a5d2 <VL53L0X_SetDeviceMode+0x3e>
 800a5b4:	2201      	movs	r2, #1
 800a5b6:	409a      	lsls	r2, r3
 800a5b8:	4b0b      	ldr	r3, [pc, #44]	; (800a5e8 <VL53L0X_SetDeviceMode+0x54>)
 800a5ba:	4013      	ands	r3, r2
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	bf14      	ite	ne
 800a5c0:	2301      	movne	r3, #1
 800a5c2:	2300      	moveq	r3, #0
 800a5c4:	b2db      	uxtb	r3, r3
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d003      	beq.n	800a5d2 <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	78fa      	ldrb	r2, [r7, #3]
 800a5ce:	741a      	strb	r2, [r3, #16]
		break;
 800a5d0:	e001      	b.n	800a5d6 <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800a5d2:	23f8      	movs	r3, #248	; 0xf8
 800a5d4:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a5d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a5da:	4618      	mov	r0, r3
 800a5dc:	3714      	adds	r7, #20
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e4:	4770      	bx	lr
 800a5e6:	bf00      	nop
 800a5e8:	0030000b 	.word	0x0030000b

0800a5ec <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	b085      	sub	sp, #20
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
 800a5f4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	7c1a      	ldrb	r2, [r3, #16]
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800a602:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a606:	4618      	mov	r0, r3
 800a608:	3714      	adds	r7, #20
 800a60a:	46bd      	mov	sp, r7
 800a60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a610:	4770      	bx	lr

0800a612 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 800a612:	b580      	push	{r7, lr}
 800a614:	b084      	sub	sp, #16
 800a616:	af00      	add	r7, sp, #0
 800a618:	6078      	str	r0, [r7, #4]
 800a61a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a61c:	2300      	movs	r3, #0
 800a61e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 800a620:	683a      	ldr	r2, [r7, #0]
 800a622:	2109      	movs	r1, #9
 800a624:	6878      	ldr	r0, [r7, #4]
 800a626:	f004 fbf1 	bl	800ee0c <VL53L0X_RdByte>
 800a62a:	4603      	mov	r3, r0
 800a62c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800a62e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d106      	bne.n	800a644 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	781b      	ldrb	r3, [r3, #0]
 800a63a:	f003 0301 	and.w	r3, r3, #1
 800a63e:	b2da      	uxtb	r2, r3
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800a644:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a648:	4618      	mov	r0, r3
 800a64a:	3710      	adds	r7, #16
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bd80      	pop	{r7, pc}

0800a650 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b084      	sub	sp, #16
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
 800a658:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a65a:	2300      	movs	r3, #0
 800a65c:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 800a65e:	6839      	ldr	r1, [r7, #0]
 800a660:	6878      	ldr	r0, [r7, #4]
 800a662:	f003 faaa 	bl	800dbba <VL53L0X_set_measurement_timing_budget_micro_seconds>
 800a666:	4603      	mov	r3, r0
 800a668:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 800a66a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a66e:	4618      	mov	r0, r3
 800a670:	3710      	adds	r7, #16
 800a672:	46bd      	mov	sp, r7
 800a674:	bd80      	pop	{r7, pc}

0800a676 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800a676:	b580      	push	{r7, lr}
 800a678:	b084      	sub	sp, #16
 800a67a:	af00      	add	r7, sp, #0
 800a67c:	6078      	str	r0, [r7, #4]
 800a67e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a680:	2300      	movs	r3, #0
 800a682:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 800a684:	6839      	ldr	r1, [r7, #0]
 800a686:	6878      	ldr	r0, [r7, #4]
 800a688:	f003 fb77 	bl	800dd7a <VL53L0X_get_measurement_timing_budget_micro_seconds>
 800a68c:	4603      	mov	r3, r0
 800a68e:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 800a690:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a694:	4618      	mov	r0, r3
 800a696:	3710      	adds	r7, #16
 800a698:	46bd      	mov	sp, r7
 800a69a:	bd80      	pop	{r7, pc}

0800a69c <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b084      	sub	sp, #16
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
 800a6a4:	460b      	mov	r3, r1
 800a6a6:	70fb      	strb	r3, [r7, #3]
 800a6a8:	4613      	mov	r3, r2
 800a6aa:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 800a6b0:	78ba      	ldrb	r2, [r7, #2]
 800a6b2:	78fb      	ldrb	r3, [r7, #3]
 800a6b4:	4619      	mov	r1, r3
 800a6b6:	6878      	ldr	r0, [r7, #4]
 800a6b8:	f002 ffbf 	bl	800d63a <VL53L0X_set_vcsel_pulse_period>
 800a6bc:	4603      	mov	r3, r0
 800a6be:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800a6c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	3710      	adds	r7, #16
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	bd80      	pop	{r7, pc}

0800a6cc <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b086      	sub	sp, #24
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	60f8      	str	r0, [r7, #12]
 800a6d4:	460b      	mov	r3, r1
 800a6d6:	607a      	str	r2, [r7, #4]
 800a6d8:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a6da:	2300      	movs	r3, #0
 800a6dc:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 800a6de:	7afb      	ldrb	r3, [r7, #11]
 800a6e0:	687a      	ldr	r2, [r7, #4]
 800a6e2:	4619      	mov	r1, r3
 800a6e4:	68f8      	ldr	r0, [r7, #12]
 800a6e6:	f003 fa31 	bl	800db4c <VL53L0X_get_vcsel_pulse_period>
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800a6ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	3718      	adds	r7, #24
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bd80      	pop	{r7, pc}
	...

0800a6fc <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b086      	sub	sp, #24
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
 800a704:	460b      	mov	r3, r1
 800a706:	70fb      	strb	r3, [r7, #3]
 800a708:	4613      	mov	r3, r2
 800a70a:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a70c:	2300      	movs	r3, #0
 800a70e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800a710:	2300      	movs	r3, #0
 800a712:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 800a714:	2300      	movs	r3, #0
 800a716:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800a718:	f107 030f 	add.w	r3, r7, #15
 800a71c:	461a      	mov	r2, r3
 800a71e:	2101      	movs	r1, #1
 800a720:	6878      	ldr	r0, [r7, #4]
 800a722:	f004 fb73 	bl	800ee0c <VL53L0X_RdByte>
 800a726:	4603      	mov	r3, r0
 800a728:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 800a72a:	7bfb      	ldrb	r3, [r7, #15]
 800a72c:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 800a72e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d15a      	bne.n	800a7ec <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 800a736:	78bb      	ldrb	r3, [r7, #2]
 800a738:	2b01      	cmp	r3, #1
 800a73a:	d12b      	bne.n	800a794 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 800a73c:	78fb      	ldrb	r3, [r7, #3]
 800a73e:	2b04      	cmp	r3, #4
 800a740:	d825      	bhi.n	800a78e <VL53L0X_SetSequenceStepEnable+0x92>
 800a742:	a201      	add	r2, pc, #4	; (adr r2, 800a748 <VL53L0X_SetSequenceStepEnable+0x4c>)
 800a744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a748:	0800a75d 	.word	0x0800a75d
 800a74c:	0800a767 	.word	0x0800a767
 800a750:	0800a771 	.word	0x0800a771
 800a754:	0800a77b 	.word	0x0800a77b
 800a758:	0800a785 	.word	0x0800a785
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 800a75c:	7dbb      	ldrb	r3, [r7, #22]
 800a75e:	f043 0310 	orr.w	r3, r3, #16
 800a762:	75bb      	strb	r3, [r7, #22]
				break;
 800a764:	e043      	b.n	800a7ee <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 800a766:	7dbb      	ldrb	r3, [r7, #22]
 800a768:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 800a76c:	75bb      	strb	r3, [r7, #22]
				break;
 800a76e:	e03e      	b.n	800a7ee <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 800a770:	7dbb      	ldrb	r3, [r7, #22]
 800a772:	f043 0304 	orr.w	r3, r3, #4
 800a776:	75bb      	strb	r3, [r7, #22]
				break;
 800a778:	e039      	b.n	800a7ee <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 800a77a:	7dbb      	ldrb	r3, [r7, #22]
 800a77c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a780:	75bb      	strb	r3, [r7, #22]
				break;
 800a782:	e034      	b.n	800a7ee <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 800a784:	7dbb      	ldrb	r3, [r7, #22]
 800a786:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a78a:	75bb      	strb	r3, [r7, #22]
				break;
 800a78c:	e02f      	b.n	800a7ee <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a78e:	23fc      	movs	r3, #252	; 0xfc
 800a790:	75fb      	strb	r3, [r7, #23]
 800a792:	e02c      	b.n	800a7ee <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 800a794:	78fb      	ldrb	r3, [r7, #3]
 800a796:	2b04      	cmp	r3, #4
 800a798:	d825      	bhi.n	800a7e6 <VL53L0X_SetSequenceStepEnable+0xea>
 800a79a:	a201      	add	r2, pc, #4	; (adr r2, 800a7a0 <VL53L0X_SetSequenceStepEnable+0xa4>)
 800a79c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7a0:	0800a7b5 	.word	0x0800a7b5
 800a7a4:	0800a7bf 	.word	0x0800a7bf
 800a7a8:	0800a7c9 	.word	0x0800a7c9
 800a7ac:	0800a7d3 	.word	0x0800a7d3
 800a7b0:	0800a7dd 	.word	0x0800a7dd
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 800a7b4:	7dbb      	ldrb	r3, [r7, #22]
 800a7b6:	f023 0310 	bic.w	r3, r3, #16
 800a7ba:	75bb      	strb	r3, [r7, #22]
				break;
 800a7bc:	e017      	b.n	800a7ee <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 800a7be:	7dbb      	ldrb	r3, [r7, #22]
 800a7c0:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 800a7c4:	75bb      	strb	r3, [r7, #22]
				break;
 800a7c6:	e012      	b.n	800a7ee <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 800a7c8:	7dbb      	ldrb	r3, [r7, #22]
 800a7ca:	f023 0304 	bic.w	r3, r3, #4
 800a7ce:	75bb      	strb	r3, [r7, #22]
				break;
 800a7d0:	e00d      	b.n	800a7ee <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 800a7d2:	7dbb      	ldrb	r3, [r7, #22]
 800a7d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a7d8:	75bb      	strb	r3, [r7, #22]
				break;
 800a7da:	e008      	b.n	800a7ee <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 800a7dc:	7dbb      	ldrb	r3, [r7, #22]
 800a7de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a7e2:	75bb      	strb	r3, [r7, #22]
				break;
 800a7e4:	e003      	b.n	800a7ee <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a7e6:	23fc      	movs	r3, #252	; 0xfc
 800a7e8:	75fb      	strb	r3, [r7, #23]
 800a7ea:	e000      	b.n	800a7ee <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 800a7ec:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 800a7ee:	7bfb      	ldrb	r3, [r7, #15]
 800a7f0:	7dba      	ldrb	r2, [r7, #22]
 800a7f2:	429a      	cmp	r2, r3
 800a7f4:	d01e      	beq.n	800a834 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 800a7f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d107      	bne.n	800a80e <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 800a7fe:	7dbb      	ldrb	r3, [r7, #22]
 800a800:	461a      	mov	r2, r3
 800a802:	2101      	movs	r1, #1
 800a804:	6878      	ldr	r0, [r7, #4]
 800a806:	f004 fa7f 	bl	800ed08 <VL53L0X_WrByte>
 800a80a:	4603      	mov	r3, r0
 800a80c:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 800a80e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d103      	bne.n	800a81e <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	7dba      	ldrb	r2, [r7, #22]
 800a81a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 800a81e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d106      	bne.n	800a834 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	695b      	ldr	r3, [r3, #20]
 800a82a:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800a82c:	6939      	ldr	r1, [r7, #16]
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	f7ff ff0e 	bl	800a650 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800a834:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a838:	4618      	mov	r0, r3
 800a83a:	3718      	adds	r7, #24
 800a83c:	46bd      	mov	sp, r7
 800a83e:	bd80      	pop	{r7, pc}

0800a840 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 800a840:	b480      	push	{r7}
 800a842:	b087      	sub	sp, #28
 800a844:	af00      	add	r7, sp, #0
 800a846:	60f8      	str	r0, [r7, #12]
 800a848:	607b      	str	r3, [r7, #4]
 800a84a:	460b      	mov	r3, r1
 800a84c:	72fb      	strb	r3, [r7, #11]
 800a84e:	4613      	mov	r3, r2
 800a850:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a852:	2300      	movs	r3, #0
 800a854:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	2200      	movs	r2, #0
 800a85a:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 800a85c:	7afb      	ldrb	r3, [r7, #11]
 800a85e:	2b04      	cmp	r3, #4
 800a860:	d836      	bhi.n	800a8d0 <sequence_step_enabled+0x90>
 800a862:	a201      	add	r2, pc, #4	; (adr r2, 800a868 <sequence_step_enabled+0x28>)
 800a864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a868:	0800a87d 	.word	0x0800a87d
 800a86c:	0800a88f 	.word	0x0800a88f
 800a870:	0800a8a1 	.word	0x0800a8a1
 800a874:	0800a8b3 	.word	0x0800a8b3
 800a878:	0800a8c5 	.word	0x0800a8c5
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 800a87c:	7abb      	ldrb	r3, [r7, #10]
 800a87e:	111b      	asrs	r3, r3, #4
 800a880:	b2db      	uxtb	r3, r3
 800a882:	f003 0301 	and.w	r3, r3, #1
 800a886:	b2da      	uxtb	r2, r3
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	701a      	strb	r2, [r3, #0]
		break;
 800a88c:	e022      	b.n	800a8d4 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 800a88e:	7abb      	ldrb	r3, [r7, #10]
 800a890:	10db      	asrs	r3, r3, #3
 800a892:	b2db      	uxtb	r3, r3
 800a894:	f003 0301 	and.w	r3, r3, #1
 800a898:	b2da      	uxtb	r2, r3
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	701a      	strb	r2, [r3, #0]
		break;
 800a89e:	e019      	b.n	800a8d4 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 800a8a0:	7abb      	ldrb	r3, [r7, #10]
 800a8a2:	109b      	asrs	r3, r3, #2
 800a8a4:	b2db      	uxtb	r3, r3
 800a8a6:	f003 0301 	and.w	r3, r3, #1
 800a8aa:	b2da      	uxtb	r2, r3
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	701a      	strb	r2, [r3, #0]
		break;
 800a8b0:	e010      	b.n	800a8d4 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 800a8b2:	7abb      	ldrb	r3, [r7, #10]
 800a8b4:	119b      	asrs	r3, r3, #6
 800a8b6:	b2db      	uxtb	r3, r3
 800a8b8:	f003 0301 	and.w	r3, r3, #1
 800a8bc:	b2da      	uxtb	r2, r3
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	701a      	strb	r2, [r3, #0]
		break;
 800a8c2:	e007      	b.n	800a8d4 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 800a8c4:	7abb      	ldrb	r3, [r7, #10]
 800a8c6:	09db      	lsrs	r3, r3, #7
 800a8c8:	b2da      	uxtb	r2, r3
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	701a      	strb	r2, [r3, #0]
		break;
 800a8ce:	e001      	b.n	800a8d4 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a8d0:	23fc      	movs	r3, #252	; 0xfc
 800a8d2:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a8d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a8d8:	4618      	mov	r0, r3
 800a8da:	371c      	adds	r7, #28
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e2:	4770      	bx	lr

0800a8e4 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b084      	sub	sp, #16
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
 800a8ec:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800a8f6:	f107 030e 	add.w	r3, r7, #14
 800a8fa:	461a      	mov	r2, r3
 800a8fc:	2101      	movs	r1, #1
 800a8fe:	6878      	ldr	r0, [r7, #4]
 800a900:	f004 fa84 	bl	800ee0c <VL53L0X_RdByte>
 800a904:	4603      	mov	r3, r0
 800a906:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 800a908:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d107      	bne.n	800a920 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 800a910:	7bba      	ldrb	r2, [r7, #14]
 800a912:	683b      	ldr	r3, [r7, #0]
 800a914:	2100      	movs	r1, #0
 800a916:	6878      	ldr	r0, [r7, #4]
 800a918:	f7ff ff92 	bl	800a840 <sequence_step_enabled>
 800a91c:	4603      	mov	r3, r0
 800a91e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800a920:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d108      	bne.n	800a93a <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 800a928:	7bba      	ldrb	r2, [r7, #14]
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	3302      	adds	r3, #2
 800a92e:	2101      	movs	r1, #1
 800a930:	6878      	ldr	r0, [r7, #4]
 800a932:	f7ff ff85 	bl	800a840 <sequence_step_enabled>
 800a936:	4603      	mov	r3, r0
 800a938:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800a93a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d108      	bne.n	800a954 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 800a942:	7bba      	ldrb	r2, [r7, #14]
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	3301      	adds	r3, #1
 800a948:	2102      	movs	r1, #2
 800a94a:	6878      	ldr	r0, [r7, #4]
 800a94c:	f7ff ff78 	bl	800a840 <sequence_step_enabled>
 800a950:	4603      	mov	r3, r0
 800a952:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800a954:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d108      	bne.n	800a96e <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 800a95c:	7bba      	ldrb	r2, [r7, #14]
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	3303      	adds	r3, #3
 800a962:	2103      	movs	r1, #3
 800a964:	6878      	ldr	r0, [r7, #4]
 800a966:	f7ff ff6b 	bl	800a840 <sequence_step_enabled>
 800a96a:	4603      	mov	r3, r0
 800a96c:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800a96e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d108      	bne.n	800a988 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 800a976:	7bba      	ldrb	r2, [r7, #14]
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	3304      	adds	r3, #4
 800a97c:	2104      	movs	r1, #4
 800a97e:	6878      	ldr	r0, [r7, #4]
 800a980:	f7ff ff5e 	bl	800a840 <sequence_step_enabled>
 800a984:	4603      	mov	r3, r0
 800a986:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a988:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a98c:	4618      	mov	r0, r3
 800a98e:	3710      	adds	r7, #16
 800a990:	46bd      	mov	sp, r7
 800a992:	bd80      	pop	{r7, pc}

0800a994 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b084      	sub	sp, #16
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
 800a99c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a99e:	2300      	movs	r3, #0
 800a9a0:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 800a9a2:	f107 030c 	add.w	r3, r7, #12
 800a9a6:	461a      	mov	r2, r3
 800a9a8:	21f8      	movs	r1, #248	; 0xf8
 800a9aa:	6878      	ldr	r0, [r7, #4]
 800a9ac:	f004 fa58 	bl	800ee60 <VL53L0X_RdWord>
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 800a9b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d108      	bne.n	800a9ce <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 800a9bc:	f107 0308 	add.w	r3, r7, #8
 800a9c0:	461a      	mov	r2, r3
 800a9c2:	2104      	movs	r1, #4
 800a9c4:	6878      	ldr	r0, [r7, #4]
 800a9c6:	f004 fa83 	bl	800eed0 <VL53L0X_RdDWord>
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a9ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d10c      	bne.n	800a9f0 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 800a9d6:	89bb      	ldrh	r3, [r7, #12]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d005      	beq.n	800a9e8 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 800a9dc:	68bb      	ldr	r3, [r7, #8]
 800a9de:	89ba      	ldrh	r2, [r7, #12]
 800a9e0:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	681a      	ldr	r2, [r3, #0]
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a9f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	3710      	adds	r7, #16
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	bd80      	pop	{r7, pc}

0800a9fc <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 800a9fc:	b480      	push	{r7}
 800a9fe:	b085      	sub	sp, #20
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
 800aa04:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aa06:	2300      	movs	r3, #0
 800aa08:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	7f1b      	ldrb	r3, [r3, #28]
 800aa0e:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 800aa10:	683b      	ldr	r3, [r7, #0]
 800aa12:	7bba      	ldrb	r2, [r7, #14]
 800aa14:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800aa16:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	3714      	adds	r7, #20
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa24:	4770      	bx	lr

0800aa26 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 800aa26:	b580      	push	{r7, lr}
 800aa28:	b086      	sub	sp, #24
 800aa2a:	af00      	add	r7, sp, #0
 800aa2c:	6078      	str	r0, [r7, #4]
 800aa2e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aa30:	2300      	movs	r3, #0
 800aa32:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 800aa34:	f107 030e 	add.w	r3, r7, #14
 800aa38:	461a      	mov	r2, r3
 800aa3a:	2120      	movs	r1, #32
 800aa3c:	6878      	ldr	r0, [r7, #4]
 800aa3e:	f004 fa0f 	bl	800ee60 <VL53L0X_RdWord>
 800aa42:	4603      	mov	r3, r0
 800aa44:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 800aa46:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d118      	bne.n	800aa80 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 800aa4e:	89fb      	ldrh	r3, [r7, #14]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d109      	bne.n	800aa68 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	6a1b      	ldr	r3, [r3, #32]
 800aa58:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800aa5a:	683b      	ldr	r3, [r7, #0]
 800aa5c:	693a      	ldr	r2, [r7, #16]
 800aa5e:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2200      	movs	r2, #0
 800aa64:	771a      	strb	r2, [r3, #28]
 800aa66:	e00b      	b.n	800aa80 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 800aa68:	89fb      	ldrh	r3, [r7, #14]
 800aa6a:	00db      	lsls	r3, r3, #3
 800aa6c:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800aa6e:	683b      	ldr	r3, [r7, #0]
 800aa70:	693a      	ldr	r2, [r7, #16]
 800aa72:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	693a      	ldr	r2, [r7, #16]
 800aa78:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	2201      	movs	r2, #1
 800aa7e:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800aa80:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aa84:	4618      	mov	r0, r3
 800aa86:	3718      	adds	r7, #24
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	bd80      	pop	{r7, pc}

0800aa8c <VL53L0X_SetRefCalibration>:

VL53L0X_Error VL53L0X_SetRefCalibration(VL53L0X_DEV Dev, uint8_t VhvSettings,
	uint8_t PhaseCal)
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b084      	sub	sp, #16
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
 800aa94:	460b      	mov	r3, r1
 800aa96:	70fb      	strb	r3, [r7, #3]
 800aa98:	4613      	mov	r3, r2
 800aa9a:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_ref_calibration(Dev, VhvSettings, PhaseCal);
 800aaa0:	78ba      	ldrb	r2, [r7, #2]
 800aaa2:	78fb      	ldrb	r3, [r7, #3]
 800aaa4:	4619      	mov	r1, r3
 800aaa6:	6878      	ldr	r0, [r7, #4]
 800aaa8:	f001 fd82 	bl	800c5b0 <VL53L0X_set_ref_calibration>
 800aaac:	4603      	mov	r3, r0
 800aaae:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800aab0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aab4:	4618      	mov	r0, r3
 800aab6:	3710      	adds	r7, #16
 800aab8:	46bd      	mov	sp, r7
 800aaba:	bd80      	pop	{r7, pc}

0800aabc <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b086      	sub	sp, #24
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
 800aac4:	460b      	mov	r3, r1
 800aac6:	807b      	strh	r3, [r7, #2]
 800aac8:	4613      	mov	r3, r2
 800aaca:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aacc:	2300      	movs	r3, #0
 800aace:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 800aad0:	2300      	movs	r3, #0
 800aad2:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 800aad4:	2300      	movs	r3, #0
 800aad6:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 800aad8:	2300      	movs	r3, #0
 800aada:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800aadc:	887b      	ldrh	r3, [r7, #2]
 800aade:	2b05      	cmp	r3, #5
 800aae0:	d902      	bls.n	800aae8 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800aae2:	23fc      	movs	r3, #252	; 0xfc
 800aae4:	75fb      	strb	r3, [r7, #23]
 800aae6:	e05b      	b.n	800aba0 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 800aae8:	787b      	ldrb	r3, [r7, #1]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d106      	bne.n	800aafc <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 800aaee:	2300      	movs	r3, #0
 800aaf0:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 800aaf6:	2301      	movs	r3, #1
 800aaf8:	73bb      	strb	r3, [r7, #14]
 800aafa:	e00a      	b.n	800ab12 <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800aafc:	887b      	ldrh	r3, [r7, #2]
 800aafe:	687a      	ldr	r2, [r7, #4]
 800ab00:	330c      	adds	r3, #12
 800ab02:	009b      	lsls	r3, r3, #2
 800ab04:	4413      	add	r3, r2
 800ab06:	685b      	ldr	r3, [r3, #4]
 800ab08:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 800ab0e:	2301      	movs	r3, #1
 800ab10:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 800ab12:	887b      	ldrh	r3, [r7, #2]
 800ab14:	2b05      	cmp	r3, #5
 800ab16:	d841      	bhi.n	800ab9c <VL53L0X_SetLimitCheckEnable+0xe0>
 800ab18:	a201      	add	r2, pc, #4	; (adr r2, 800ab20 <VL53L0X_SetLimitCheckEnable+0x64>)
 800ab1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab1e:	bf00      	nop
 800ab20:	0800ab39 	.word	0x0800ab39
 800ab24:	0800ab43 	.word	0x0800ab43
 800ab28:	0800ab59 	.word	0x0800ab59
 800ab2c:	0800ab63 	.word	0x0800ab63
 800ab30:	0800ab6d 	.word	0x0800ab6d
 800ab34:	0800ab85 	.word	0x0800ab85

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	7bfa      	ldrb	r2, [r7, #15]
 800ab3c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 800ab40:	e02e      	b.n	800aba0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 800ab42:	693b      	ldr	r3, [r7, #16]
 800ab44:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800ab46:	b29b      	uxth	r3, r3
 800ab48:	461a      	mov	r2, r3
 800ab4a:	2144      	movs	r1, #68	; 0x44
 800ab4c:	6878      	ldr	r0, [r7, #4]
 800ab4e:	f004 f8ff 	bl	800ed50 <VL53L0X_WrWord>
 800ab52:	4603      	mov	r3, r0
 800ab54:	75fb      	strb	r3, [r7, #23]

			break;
 800ab56:	e023      	b.n	800aba0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	7bfa      	ldrb	r2, [r7, #15]
 800ab5c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 800ab60:	e01e      	b.n	800aba0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	7bfa      	ldrb	r2, [r7, #15]
 800ab66:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 800ab6a:	e019      	b.n	800aba0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 800ab6c:	7bbb      	ldrb	r3, [r7, #14]
 800ab6e:	005b      	lsls	r3, r3, #1
 800ab70:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800ab72:	7b7b      	ldrb	r3, [r7, #13]
 800ab74:	22fe      	movs	r2, #254	; 0xfe
 800ab76:	2160      	movs	r1, #96	; 0x60
 800ab78:	6878      	ldr	r0, [r7, #4]
 800ab7a:	f004 f913 	bl	800eda4 <VL53L0X_UpdateByte>
 800ab7e:	4603      	mov	r3, r0
 800ab80:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 800ab82:	e00d      	b.n	800aba0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 800ab84:	7bbb      	ldrb	r3, [r7, #14]
 800ab86:	011b      	lsls	r3, r3, #4
 800ab88:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800ab8a:	7b7b      	ldrb	r3, [r7, #13]
 800ab8c:	22ef      	movs	r2, #239	; 0xef
 800ab8e:	2160      	movs	r1, #96	; 0x60
 800ab90:	6878      	ldr	r0, [r7, #4]
 800ab92:	f004 f907 	bl	800eda4 <VL53L0X_UpdateByte>
 800ab96:	4603      	mov	r3, r0
 800ab98:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 800ab9a:	e001      	b.n	800aba0 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ab9c:	23fc      	movs	r3, #252	; 0xfc
 800ab9e:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800aba0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d10f      	bne.n	800abc8 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 800aba8:	787b      	ldrb	r3, [r7, #1]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d106      	bne.n	800abbc <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800abae:	887b      	ldrh	r3, [r7, #2]
 800abb0:	687a      	ldr	r2, [r7, #4]
 800abb2:	4413      	add	r3, r2
 800abb4:	2200      	movs	r2, #0
 800abb6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800abba:	e005      	b.n	800abc8 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800abbc:	887b      	ldrh	r3, [r7, #2]
 800abbe:	687a      	ldr	r2, [r7, #4]
 800abc0:	4413      	add	r3, r2
 800abc2:	2201      	movs	r2, #1
 800abc4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800abc8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800abcc:	4618      	mov	r0, r3
 800abce:	3718      	adds	r7, #24
 800abd0:	46bd      	mov	sp, r7
 800abd2:	bd80      	pop	{r7, pc}

0800abd4 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 800abd4:	b480      	push	{r7}
 800abd6:	b087      	sub	sp, #28
 800abd8:	af00      	add	r7, sp, #0
 800abda:	60f8      	str	r0, [r7, #12]
 800abdc:	460b      	mov	r3, r1
 800abde:	607a      	str	r2, [r7, #4]
 800abe0:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800abe2:	2300      	movs	r3, #0
 800abe4:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800abe6:	897b      	ldrh	r3, [r7, #10]
 800abe8:	2b05      	cmp	r3, #5
 800abea:	d905      	bls.n	800abf8 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800abec:	23fc      	movs	r3, #252	; 0xfc
 800abee:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2200      	movs	r2, #0
 800abf4:	701a      	strb	r2, [r3, #0]
 800abf6:	e008      	b.n	800ac0a <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800abf8:	897b      	ldrh	r3, [r7, #10]
 800abfa:	68fa      	ldr	r2, [r7, #12]
 800abfc:	4413      	add	r3, r2
 800abfe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac02:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	7dba      	ldrb	r2, [r7, #22]
 800ac08:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ac0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ac0e:	4618      	mov	r0, r3
 800ac10:	371c      	adds	r7, #28
 800ac12:	46bd      	mov	sp, r7
 800ac14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac18:	4770      	bx	lr
	...

0800ac1c <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b086      	sub	sp, #24
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	60f8      	str	r0, [r7, #12]
 800ac24:	460b      	mov	r3, r1
 800ac26:	607a      	str	r2, [r7, #4]
 800ac28:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 800ac2e:	897b      	ldrh	r3, [r7, #10]
 800ac30:	68fa      	ldr	r2, [r7, #12]
 800ac32:	4413      	add	r3, r2
 800ac34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac38:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 800ac3a:	7dbb      	ldrb	r3, [r7, #22]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d107      	bne.n	800ac50 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800ac40:	897b      	ldrh	r3, [r7, #10]
 800ac42:	68fa      	ldr	r2, [r7, #12]
 800ac44:	330c      	adds	r3, #12
 800ac46:	009b      	lsls	r3, r3, #2
 800ac48:	4413      	add	r3, r2
 800ac4a:	687a      	ldr	r2, [r7, #4]
 800ac4c:	605a      	str	r2, [r3, #4]
 800ac4e:	e040      	b.n	800acd2 <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 800ac50:	897b      	ldrh	r3, [r7, #10]
 800ac52:	2b05      	cmp	r3, #5
 800ac54:	d830      	bhi.n	800acb8 <VL53L0X_SetLimitCheckValue+0x9c>
 800ac56:	a201      	add	r2, pc, #4	; (adr r2, 800ac5c <VL53L0X_SetLimitCheckValue+0x40>)
 800ac58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac5c:	0800ac75 	.word	0x0800ac75
 800ac60:	0800ac7d 	.word	0x0800ac7d
 800ac64:	0800ac93 	.word	0x0800ac93
 800ac68:	0800ac9b 	.word	0x0800ac9b
 800ac6c:	0800aca3 	.word	0x0800aca3
 800ac70:	0800aca3 	.word	0x0800aca3

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	687a      	ldr	r2, [r7, #4]
 800ac78:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 800ac7a:	e01f      	b.n	800acbc <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800ac80:	b29b      	uxth	r3, r3
 800ac82:	461a      	mov	r2, r3
 800ac84:	2144      	movs	r1, #68	; 0x44
 800ac86:	68f8      	ldr	r0, [r7, #12]
 800ac88:	f004 f862 	bl	800ed50 <VL53L0X_WrWord>
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800ac90:	e014      	b.n	800acbc <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	687a      	ldr	r2, [r7, #4]
 800ac96:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 800ac98:	e010      	b.n	800acbc <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	687a      	ldr	r2, [r7, #4]
 800ac9e:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 800aca0:	e00c      	b.n	800acbc <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800aca6:	b29b      	uxth	r3, r3
 800aca8:	461a      	mov	r2, r3
 800acaa:	2164      	movs	r1, #100	; 0x64
 800acac:	68f8      	ldr	r0, [r7, #12]
 800acae:	f004 f84f 	bl	800ed50 <VL53L0X_WrWord>
 800acb2:	4603      	mov	r3, r0
 800acb4:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800acb6:	e001      	b.n	800acbc <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800acb8:	23fc      	movs	r3, #252	; 0xfc
 800acba:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 800acbc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d106      	bne.n	800acd2 <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800acc4:	897b      	ldrh	r3, [r7, #10]
 800acc6:	68fa      	ldr	r2, [r7, #12]
 800acc8:	330c      	adds	r3, #12
 800acca:	009b      	lsls	r3, r3, #2
 800accc:	4413      	add	r3, r2
 800acce:	687a      	ldr	r2, [r7, #4]
 800acd0:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800acd2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800acd6:	4618      	mov	r0, r3
 800acd8:	3718      	adds	r7, #24
 800acda:	46bd      	mov	sp, r7
 800acdc:	bd80      	pop	{r7, pc}
 800acde:	bf00      	nop

0800ace0 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b088      	sub	sp, #32
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	60f8      	str	r0, [r7, #12]
 800ace8:	460b      	mov	r3, r1
 800acea:	607a      	str	r2, [r7, #4]
 800acec:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800acee:	2300      	movs	r3, #0
 800acf0:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 800acf2:	2300      	movs	r3, #0
 800acf4:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800acf6:	897b      	ldrh	r3, [r7, #10]
 800acf8:	2b05      	cmp	r3, #5
 800acfa:	d847      	bhi.n	800ad8c <VL53L0X_GetLimitCheckValue+0xac>
 800acfc:	a201      	add	r2, pc, #4	; (adr r2, 800ad04 <VL53L0X_GetLimitCheckValue+0x24>)
 800acfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad02:	bf00      	nop
 800ad04:	0800ad1d 	.word	0x0800ad1d
 800ad08:	0800ad29 	.word	0x0800ad29
 800ad0c:	0800ad4f 	.word	0x0800ad4f
 800ad10:	0800ad5b 	.word	0x0800ad5b
 800ad14:	0800ad67 	.word	0x0800ad67
 800ad18:	0800ad67 	.word	0x0800ad67

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad20:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 800ad22:	2300      	movs	r3, #0
 800ad24:	77bb      	strb	r3, [r7, #30]
		break;
 800ad26:	e033      	b.n	800ad90 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800ad28:	f107 0316 	add.w	r3, r7, #22
 800ad2c:	461a      	mov	r2, r3
 800ad2e:	2144      	movs	r1, #68	; 0x44
 800ad30:	68f8      	ldr	r0, [r7, #12]
 800ad32:	f004 f895 	bl	800ee60 <VL53L0X_RdWord>
 800ad36:	4603      	mov	r3, r0
 800ad38:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800ad3a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d102      	bne.n	800ad48 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800ad42:	8afb      	ldrh	r3, [r7, #22]
 800ad44:	025b      	lsls	r3, r3, #9
 800ad46:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 800ad48:	2301      	movs	r3, #1
 800ad4a:	77bb      	strb	r3, [r7, #30]
		break;
 800ad4c:	e020      	b.n	800ad90 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad52:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 800ad54:	2300      	movs	r3, #0
 800ad56:	77bb      	strb	r3, [r7, #30]
		break;
 800ad58:	e01a      	b.n	800ad90 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad5e:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 800ad60:	2300      	movs	r3, #0
 800ad62:	77bb      	strb	r3, [r7, #30]
		break;
 800ad64:	e014      	b.n	800ad90 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800ad66:	f107 0316 	add.w	r3, r7, #22
 800ad6a:	461a      	mov	r2, r3
 800ad6c:	2164      	movs	r1, #100	; 0x64
 800ad6e:	68f8      	ldr	r0, [r7, #12]
 800ad70:	f004 f876 	bl	800ee60 <VL53L0X_RdWord>
 800ad74:	4603      	mov	r3, r0
 800ad76:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800ad78:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d102      	bne.n	800ad86 <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800ad80:	8afb      	ldrh	r3, [r7, #22]
 800ad82:	025b      	lsls	r3, r3, #9
 800ad84:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 800ad86:	2300      	movs	r3, #0
 800ad88:	77bb      	strb	r3, [r7, #30]
		break;
 800ad8a:	e001      	b.n	800ad90 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ad8c:	23fc      	movs	r3, #252	; 0xfc
 800ad8e:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ad90:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d12a      	bne.n	800adee <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 800ad98:	7fbb      	ldrb	r3, [r7, #30]
 800ad9a:	2b01      	cmp	r3, #1
 800ad9c:	d124      	bne.n	800ade8 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 800ad9e:	69bb      	ldr	r3, [r7, #24]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d110      	bne.n	800adc6 <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 800ada4:	897b      	ldrh	r3, [r7, #10]
 800ada6:	68fa      	ldr	r2, [r7, #12]
 800ada8:	330c      	adds	r3, #12
 800adaa:	009b      	lsls	r3, r3, #2
 800adac:	4413      	add	r3, r2
 800adae:	685b      	ldr	r3, [r3, #4]
 800adb0:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	69ba      	ldr	r2, [r7, #24]
 800adb6:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800adb8:	897b      	ldrh	r3, [r7, #10]
 800adba:	68fa      	ldr	r2, [r7, #12]
 800adbc:	4413      	add	r3, r2
 800adbe:	2200      	movs	r2, #0
 800adc0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800adc4:	e013      	b.n	800adee <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	69ba      	ldr	r2, [r7, #24]
 800adca:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800adcc:	897b      	ldrh	r3, [r7, #10]
 800adce:	68fa      	ldr	r2, [r7, #12]
 800add0:	330c      	adds	r3, #12
 800add2:	009b      	lsls	r3, r3, #2
 800add4:	4413      	add	r3, r2
 800add6:	69ba      	ldr	r2, [r7, #24]
 800add8:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800adda:	897b      	ldrh	r3, [r7, #10]
 800addc:	68fa      	ldr	r2, [r7, #12]
 800adde:	4413      	add	r3, r2
 800ade0:	2201      	movs	r2, #1
 800ade2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800ade6:	e002      	b.n	800adee <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	69ba      	ldr	r2, [r7, #24]
 800adec:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800adee:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800adf2:	4618      	mov	r0, r3
 800adf4:	3720      	adds	r7, #32
 800adf6:	46bd      	mov	sp, r7
 800adf8:	bd80      	pop	{r7, pc}
 800adfa:	bf00      	nop

0800adfc <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b084      	sub	sp, #16
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
 800ae04:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ae06:	2300      	movs	r3, #0
 800ae08:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 800ae0a:	f107 030e 	add.w	r3, r7, #14
 800ae0e:	461a      	mov	r2, r3
 800ae10:	2101      	movs	r1, #1
 800ae12:	6878      	ldr	r0, [r7, #4]
 800ae14:	f003 fffa 	bl	800ee0c <VL53L0X_RdByte>
 800ae18:	4603      	mov	r3, r0
 800ae1a:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 800ae1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d10e      	bne.n	800ae42 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 800ae24:	7bba      	ldrb	r2, [r7, #14]
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 800ae2c:	7bbb      	ldrb	r3, [r7, #14]
 800ae2e:	b25b      	sxtb	r3, r3
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	da03      	bge.n	800ae3c <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	2201      	movs	r2, #1
 800ae38:	701a      	strb	r2, [r3, #0]
 800ae3a:	e002      	b.n	800ae42 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 800ae3c:	683b      	ldr	r3, [r7, #0]
 800ae3e:	2200      	movs	r2, #0
 800ae40:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800ae42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d104      	bne.n	800ae54 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	781a      	ldrb	r2, [r3, #0]
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ae54:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ae58:	4618      	mov	r0, r3
 800ae5a:	3710      	adds	r7, #16
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	bd80      	pop	{r7, pc}

0800ae60 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b084      	sub	sp, #16
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ae68:	2300      	movs	r3, #0
 800ae6a:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800ae6c:	f107 030e 	add.w	r3, r7, #14
 800ae70:	4619      	mov	r1, r3
 800ae72:	6878      	ldr	r0, [r7, #4]
 800ae74:	f7ff fbba 	bl	800a5ec <VL53L0X_GetDeviceMode>
 800ae78:	4603      	mov	r3, r0
 800ae7a:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800ae7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d107      	bne.n	800ae94 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800ae84:	7bbb      	ldrb	r3, [r7, #14]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d104      	bne.n	800ae94 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 800ae8a:	6878      	ldr	r0, [r7, #4]
 800ae8c:	f000 f898 	bl	800afc0 <VL53L0X_StartMeasurement>
 800ae90:	4603      	mov	r3, r0
 800ae92:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800ae94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d104      	bne.n	800aea6 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800ae9c:	6878      	ldr	r0, [r7, #4]
 800ae9e:	f001 fbaa 	bl	800c5f6 <VL53L0X_measurement_poll_for_completion>
 800aea2:	4603      	mov	r3, r0
 800aea4:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800aea6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d106      	bne.n	800aebc <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800aeae:	7bbb      	ldrb	r3, [r7, #14]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d103      	bne.n	800aebc <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2203      	movs	r2, #3
 800aeb8:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 800aebc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aec0:	4618      	mov	r0, r3
 800aec2:	3710      	adds	r7, #16
 800aec4:	46bd      	mov	sp, r7
 800aec6:	bd80      	pop	{r7, pc}

0800aec8 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b086      	sub	sp, #24
 800aecc:	af00      	add	r7, sp, #0
 800aece:	60f8      	str	r0, [r7, #12]
 800aed0:	60b9      	str	r1, [r7, #8]
 800aed2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aed4:	2300      	movs	r3, #0
 800aed6:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 800aed8:	2301      	movs	r3, #1
 800aeda:	687a      	ldr	r2, [r7, #4]
 800aedc:	68b9      	ldr	r1, [r7, #8]
 800aede:	68f8      	ldr	r0, [r7, #12]
 800aee0:	f001 fb29 	bl	800c536 <VL53L0X_perform_ref_calibration>
 800aee4:	4603      	mov	r3, r0
 800aee6:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 800aee8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aeec:	4618      	mov	r0, r3
 800aeee:	3718      	adds	r7, #24
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bd80      	pop	{r7, pc}

0800aef4 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b086      	sub	sp, #24
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
 800aefc:	460b      	mov	r3, r1
 800aefe:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800af00:	2300      	movs	r3, #0
 800af02:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800af0a:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 800af0c:	7dbb      	ldrb	r3, [r7, #22]
 800af0e:	2b01      	cmp	r3, #1
 800af10:	d005      	beq.n	800af1e <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 800af12:	7dbb      	ldrb	r3, [r7, #22]
 800af14:	2b02      	cmp	r3, #2
 800af16:	d002      	beq.n	800af1e <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 800af18:	7dbb      	ldrb	r3, [r7, #22]
 800af1a:	2b03      	cmp	r3, #3
 800af1c:	d147      	bne.n	800afae <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 800af1e:	f107 030c 	add.w	r3, r7, #12
 800af22:	f107 0210 	add.w	r2, r7, #16
 800af26:	2101      	movs	r1, #1
 800af28:	6878      	ldr	r0, [r7, #4]
 800af2a:	f000 fbc3 	bl	800b6b4 <VL53L0X_GetInterruptThresholds>
 800af2e:	4603      	mov	r3, r0
 800af30:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 800af32:	693b      	ldr	r3, [r7, #16]
 800af34:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 800af38:	d803      	bhi.n	800af42 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 800af3a:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 800af3c:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 800af40:	d935      	bls.n	800afae <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 800af42:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d131      	bne.n	800afae <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 800af4a:	78fb      	ldrb	r3, [r7, #3]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d006      	beq.n	800af5e <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 800af50:	491a      	ldr	r1, [pc, #104]	; (800afbc <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 800af52:	6878      	ldr	r0, [r7, #4]
 800af54:	f002 ffc2 	bl	800dedc <VL53L0X_load_tuning_settings>
 800af58:	4603      	mov	r3, r0
 800af5a:	75fb      	strb	r3, [r7, #23]
 800af5c:	e027      	b.n	800afae <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 800af5e:	2204      	movs	r2, #4
 800af60:	21ff      	movs	r1, #255	; 0xff
 800af62:	6878      	ldr	r0, [r7, #4]
 800af64:	f003 fed0 	bl	800ed08 <VL53L0X_WrByte>
 800af68:	4603      	mov	r3, r0
 800af6a:	461a      	mov	r2, r3
 800af6c:	7dfb      	ldrb	r3, [r7, #23]
 800af6e:	4313      	orrs	r3, r2
 800af70:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 800af72:	2200      	movs	r2, #0
 800af74:	2170      	movs	r1, #112	; 0x70
 800af76:	6878      	ldr	r0, [r7, #4]
 800af78:	f003 fec6 	bl	800ed08 <VL53L0X_WrByte>
 800af7c:	4603      	mov	r3, r0
 800af7e:	461a      	mov	r2, r3
 800af80:	7dfb      	ldrb	r3, [r7, #23]
 800af82:	4313      	orrs	r3, r2
 800af84:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800af86:	2200      	movs	r2, #0
 800af88:	21ff      	movs	r1, #255	; 0xff
 800af8a:	6878      	ldr	r0, [r7, #4]
 800af8c:	f003 febc 	bl	800ed08 <VL53L0X_WrByte>
 800af90:	4603      	mov	r3, r0
 800af92:	461a      	mov	r2, r3
 800af94:	7dfb      	ldrb	r3, [r7, #23]
 800af96:	4313      	orrs	r3, r2
 800af98:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800af9a:	2200      	movs	r2, #0
 800af9c:	2180      	movs	r1, #128	; 0x80
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	f003 feb2 	bl	800ed08 <VL53L0X_WrByte>
 800afa4:	4603      	mov	r3, r0
 800afa6:	461a      	mov	r2, r3
 800afa8:	7dfb      	ldrb	r3, [r7, #23]
 800afaa:	4313      	orrs	r3, r2
 800afac:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 800afae:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800afb2:	4618      	mov	r0, r3
 800afb4:	3718      	adds	r7, #24
 800afb6:	46bd      	mov	sp, r7
 800afb8:	bd80      	pop	{r7, pc}
 800afba:	bf00      	nop
 800afbc:	20000404 	.word	0x20000404

0800afc0 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b086      	sub	sp, #24
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800afc8:	2300      	movs	r3, #0
 800afca:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 800afcc:	2301      	movs	r3, #1
 800afce:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800afd0:	f107 030e 	add.w	r3, r7, #14
 800afd4:	4619      	mov	r1, r3
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	f7ff fb08 	bl	800a5ec <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 800afdc:	2201      	movs	r2, #1
 800afde:	2180      	movs	r1, #128	; 0x80
 800afe0:	6878      	ldr	r0, [r7, #4]
 800afe2:	f003 fe91 	bl	800ed08 <VL53L0X_WrByte>
 800afe6:	4603      	mov	r3, r0
 800afe8:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800afea:	2201      	movs	r2, #1
 800afec:	21ff      	movs	r1, #255	; 0xff
 800afee:	6878      	ldr	r0, [r7, #4]
 800aff0:	f003 fe8a 	bl	800ed08 <VL53L0X_WrByte>
 800aff4:	4603      	mov	r3, r0
 800aff6:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 800aff8:	2200      	movs	r2, #0
 800affa:	2100      	movs	r1, #0
 800affc:	6878      	ldr	r0, [r7, #4]
 800affe:	f003 fe83 	bl	800ed08 <VL53L0X_WrByte>
 800b002:	4603      	mov	r3, r0
 800b004:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 800b00c:	461a      	mov	r2, r3
 800b00e:	2191      	movs	r1, #145	; 0x91
 800b010:	6878      	ldr	r0, [r7, #4]
 800b012:	f003 fe79 	bl	800ed08 <VL53L0X_WrByte>
 800b016:	4603      	mov	r3, r0
 800b018:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 800b01a:	2201      	movs	r2, #1
 800b01c:	2100      	movs	r1, #0
 800b01e:	6878      	ldr	r0, [r7, #4]
 800b020:	f003 fe72 	bl	800ed08 <VL53L0X_WrByte>
 800b024:	4603      	mov	r3, r0
 800b026:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b028:	2200      	movs	r2, #0
 800b02a:	21ff      	movs	r1, #255	; 0xff
 800b02c:	6878      	ldr	r0, [r7, #4]
 800b02e:	f003 fe6b 	bl	800ed08 <VL53L0X_WrByte>
 800b032:	4603      	mov	r3, r0
 800b034:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 800b036:	2200      	movs	r2, #0
 800b038:	2180      	movs	r1, #128	; 0x80
 800b03a:	6878      	ldr	r0, [r7, #4]
 800b03c:	f003 fe64 	bl	800ed08 <VL53L0X_WrByte>
 800b040:	4603      	mov	r3, r0
 800b042:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 800b044:	7bbb      	ldrb	r3, [r7, #14]
 800b046:	2b03      	cmp	r3, #3
 800b048:	d054      	beq.n	800b0f4 <VL53L0X_StartMeasurement+0x134>
 800b04a:	2b03      	cmp	r3, #3
 800b04c:	dc6c      	bgt.n	800b128 <VL53L0X_StartMeasurement+0x168>
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d002      	beq.n	800b058 <VL53L0X_StartMeasurement+0x98>
 800b052:	2b01      	cmp	r3, #1
 800b054:	d034      	beq.n	800b0c0 <VL53L0X_StartMeasurement+0x100>
 800b056:	e067      	b.n	800b128 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 800b058:	2201      	movs	r2, #1
 800b05a:	2100      	movs	r1, #0
 800b05c:	6878      	ldr	r0, [r7, #4]
 800b05e:	f003 fe53 	bl	800ed08 <VL53L0X_WrByte>
 800b062:	4603      	mov	r3, r0
 800b064:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 800b066:	7bfb      	ldrb	r3, [r7, #15]
 800b068:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 800b06a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d15d      	bne.n	800b12e <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 800b072:	2300      	movs	r3, #0
 800b074:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 800b076:	693b      	ldr	r3, [r7, #16]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d008      	beq.n	800b08e <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 800b07c:	f107 030d 	add.w	r3, r7, #13
 800b080:	461a      	mov	r2, r3
 800b082:	2100      	movs	r1, #0
 800b084:	6878      	ldr	r0, [r7, #4]
 800b086:	f003 fec1 	bl	800ee0c <VL53L0X_RdByte>
 800b08a:	4603      	mov	r3, r0
 800b08c:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 800b08e:	693b      	ldr	r3, [r7, #16]
 800b090:	3301      	adds	r3, #1
 800b092:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 800b094:	7b7a      	ldrb	r2, [r7, #13]
 800b096:	7bfb      	ldrb	r3, [r7, #15]
 800b098:	4013      	ands	r3, r2
 800b09a:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800b09c:	7bfa      	ldrb	r2, [r7, #15]
 800b09e:	429a      	cmp	r2, r3
 800b0a0:	d107      	bne.n	800b0b2 <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 800b0a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d103      	bne.n	800b0b2 <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800b0aa:	693b      	ldr	r3, [r7, #16]
 800b0ac:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800b0b0:	d3e1      	bcc.n	800b076 <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800b0b2:	693b      	ldr	r3, [r7, #16]
 800b0b4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800b0b8:	d339      	bcc.n	800b12e <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 800b0ba:	23f9      	movs	r3, #249	; 0xf9
 800b0bc:	75fb      	strb	r3, [r7, #23]

		}

		break;
 800b0be:	e036      	b.n	800b12e <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800b0c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d105      	bne.n	800b0d4 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800b0c8:	2101      	movs	r1, #1
 800b0ca:	6878      	ldr	r0, [r7, #4]
 800b0cc:	f7ff ff12 	bl	800aef4 <VL53L0X_CheckAndLoadInterruptSettings>
 800b0d0:	4603      	mov	r3, r0
 800b0d2:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800b0d4:	2202      	movs	r2, #2
 800b0d6:	2100      	movs	r1, #0
 800b0d8:	6878      	ldr	r0, [r7, #4]
 800b0da:	f003 fe15 	bl	800ed08 <VL53L0X_WrByte>
 800b0de:	4603      	mov	r3, r0
 800b0e0:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 800b0e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d123      	bne.n	800b132 <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	2204      	movs	r2, #4
 800b0ee:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 800b0f2:	e01e      	b.n	800b132 <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800b0f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d105      	bne.n	800b108 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800b0fc:	2101      	movs	r1, #1
 800b0fe:	6878      	ldr	r0, [r7, #4]
 800b100:	f7ff fef8 	bl	800aef4 <VL53L0X_CheckAndLoadInterruptSettings>
 800b104:	4603      	mov	r3, r0
 800b106:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800b108:	2204      	movs	r2, #4
 800b10a:	2100      	movs	r1, #0
 800b10c:	6878      	ldr	r0, [r7, #4]
 800b10e:	f003 fdfb 	bl	800ed08 <VL53L0X_WrByte>
 800b112:	4603      	mov	r3, r0
 800b114:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 800b116:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d10b      	bne.n	800b136 <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	2204      	movs	r2, #4
 800b122:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 800b126:	e006      	b.n	800b136 <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800b128:	23f8      	movs	r3, #248	; 0xf8
 800b12a:	75fb      	strb	r3, [r7, #23]
 800b12c:	e004      	b.n	800b138 <VL53L0X_StartMeasurement+0x178>
		break;
 800b12e:	bf00      	nop
 800b130:	e002      	b.n	800b138 <VL53L0X_StartMeasurement+0x178>
		break;
 800b132:	bf00      	nop
 800b134:	e000      	b.n	800b138 <VL53L0X_StartMeasurement+0x178>
		break;
 800b136:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 800b138:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b13c:	4618      	mov	r0, r3
 800b13e:	3718      	adds	r7, #24
 800b140:	46bd      	mov	sp, r7
 800b142:	bd80      	pop	{r7, pc}

0800b144 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 800b144:	b580      	push	{r7, lr}
 800b146:	b084      	sub	sp, #16
 800b148:	af00      	add	r7, sp, #0
 800b14a:	6078      	str	r0, [r7, #4]
 800b14c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b14e:	2300      	movs	r3, #0
 800b150:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800b158:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 800b15a:	7bbb      	ldrb	r3, [r7, #14]
 800b15c:	2b04      	cmp	r3, #4
 800b15e:	d112      	bne.n	800b186 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 800b160:	f107 0308 	add.w	r3, r7, #8
 800b164:	4619      	mov	r1, r3
 800b166:	6878      	ldr	r0, [r7, #4]
 800b168:	f000 fb1a 	bl	800b7a0 <VL53L0X_GetInterruptMaskStatus>
 800b16c:	4603      	mov	r3, r0
 800b16e:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 800b170:	68bb      	ldr	r3, [r7, #8]
 800b172:	2b04      	cmp	r3, #4
 800b174:	d103      	bne.n	800b17e <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 800b176:	683b      	ldr	r3, [r7, #0]
 800b178:	2201      	movs	r2, #1
 800b17a:	701a      	strb	r2, [r3, #0]
 800b17c:	e01c      	b.n	800b1b8 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	2200      	movs	r2, #0
 800b182:	701a      	strb	r2, [r3, #0]
 800b184:	e018      	b.n	800b1b8 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 800b186:	f107 030d 	add.w	r3, r7, #13
 800b18a:	461a      	mov	r2, r3
 800b18c:	2114      	movs	r1, #20
 800b18e:	6878      	ldr	r0, [r7, #4]
 800b190:	f003 fe3c 	bl	800ee0c <VL53L0X_RdByte>
 800b194:	4603      	mov	r3, r0
 800b196:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 800b198:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d10b      	bne.n	800b1b8 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 800b1a0:	7b7b      	ldrb	r3, [r7, #13]
 800b1a2:	f003 0301 	and.w	r3, r3, #1
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d003      	beq.n	800b1b2 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	2201      	movs	r2, #1
 800b1ae:	701a      	strb	r2, [r3, #0]
 800b1b0:	e002      	b.n	800b1b8 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 800b1b2:	683b      	ldr	r3, [r7, #0]
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b1b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b1bc:	4618      	mov	r0, r3
 800b1be:	3710      	adds	r7, #16
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	bd80      	pop	{r7, pc}

0800b1c4 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800b1c4:	b5b0      	push	{r4, r5, r7, lr}
 800b1c6:	b096      	sub	sp, #88	; 0x58
 800b1c8:	af02      	add	r7, sp, #8
 800b1ca:	6078      	str	r0, [r7, #4]
 800b1cc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 800b1d4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800b1d8:	230c      	movs	r3, #12
 800b1da:	2114      	movs	r1, #20
 800b1dc:	6878      	ldr	r0, [r7, #4]
 800b1de:	f003 fd67 	bl	800ecb0 <VL53L0X_ReadMulti>
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 800b1e8:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	f040 80d1 	bne.w	800b394 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 800b1f2:	683b      	ldr	r3, [r7, #0]
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 800b1fe:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b202:	b29b      	uxth	r3, r3
 800b204:	021b      	lsls	r3, r3, #8
 800b206:	b29a      	uxth	r2, r3
 800b208:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b20c:	b29b      	uxth	r3, r3
 800b20e:	4413      	add	r3, r2
 800b210:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 800b214:	683b      	ldr	r3, [r7, #0]
 800b216:	2200      	movs	r2, #0
 800b218:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 800b21a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b21e:	b29b      	uxth	r3, r3
 800b220:	021b      	lsls	r3, r3, #8
 800b222:	b29a      	uxth	r2, r3
 800b224:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b228:	b29b      	uxth	r3, r3
 800b22a:	4413      	add	r3, r2
 800b22c:	b29b      	uxth	r3, r3
 800b22e:	025b      	lsls	r3, r3, #9
 800b230:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 800b232:	683b      	ldr	r3, [r7, #0]
 800b234:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b236:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 800b238:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800b23c:	b29b      	uxth	r3, r3
 800b23e:	021b      	lsls	r3, r3, #8
 800b240:	b29a      	uxth	r2, r3
 800b242:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800b246:	b29b      	uxth	r3, r3
 800b248:	4413      	add	r3, r2
 800b24a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 800b24e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b252:	025b      	lsls	r3, r3, #9
 800b254:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 800b256:	683b      	ldr	r3, [r7, #0]
 800b258:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 800b25a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800b25e:	b29b      	uxth	r3, r3
 800b260:	021b      	lsls	r3, r3, #8
 800b262:	b29a      	uxth	r2, r3
 800b264:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b268:	b29b      	uxth	r3, r3
 800b26a:	4413      	add	r3, r2
 800b26c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 800b270:	683b      	ldr	r3, [r7, #0]
 800b272:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800b276:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 800b278:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b27c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 800b286:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 800b28e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 800b292:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b294:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b298:	d046      	beq.n	800b328 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 800b29a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b29c:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800b2a0:	fb02 f303 	mul.w	r3, r2, r3
 800b2a4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b2a8:	4a57      	ldr	r2, [pc, #348]	; (800b408 <VL53L0X_GetRangingMeasurementData+0x244>)
 800b2aa:	fb82 1203 	smull	r1, r2, r2, r3
 800b2ae:	1192      	asrs	r2, r2, #6
 800b2b0:	17db      	asrs	r3, r3, #31
 800b2b2:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 800b2b4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	6a1b      	ldr	r3, [r3, #32]
 800b2bc:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	7f1b      	ldrb	r3, [r3, #28]
 800b2c2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 800b2c6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d02c      	beq.n	800b328 <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 800b2ce:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800b2d0:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800b2d4:	fb02 f303 	mul.w	r3, r2, r3
 800b2d8:	121a      	asrs	r2, r3, #8
					<= 0) {
 800b2da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 800b2dc:	429a      	cmp	r2, r3
 800b2de:	d10d      	bne.n	800b2fc <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 800b2e0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d004      	beq.n	800b2f2 <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 800b2e8:	f242 23b8 	movw	r3, #8888	; 0x22b8
 800b2ec:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800b2f0:	e016      	b.n	800b320 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 800b2f2:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 800b2f6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800b2fa:	e011      	b.n	800b320 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 800b2fc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800b300:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b302:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 800b306:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800b308:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 800b30c:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 800b310:	121b      	asrs	r3, r3, #8
 800b312:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 800b314:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b316:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 800b318:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 800b31c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 800b320:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800b324:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 800b328:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d00d      	beq.n	800b34c <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 800b330:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800b334:	089b      	lsrs	r3, r3, #2
 800b336:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 800b338:	683b      	ldr	r3, [r7, #0]
 800b33a:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 800b33c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800b340:	b2db      	uxtb	r3, r3
 800b342:	019b      	lsls	r3, r3, #6
 800b344:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 800b346:	683b      	ldr	r3, [r7, #0]
 800b348:	75da      	strb	r2, [r3, #23]
 800b34a:	e006      	b.n	800b35a <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 800b34c:	683b      	ldr	r3, [r7, #0]
 800b34e:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800b352:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 800b354:	683b      	ldr	r3, [r7, #0]
 800b356:	2200      	movs	r2, #0
 800b358:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 800b35a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800b35e:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800b362:	f107 0336 	add.w	r3, r7, #54	; 0x36
 800b366:	9301      	str	r3, [sp, #4]
 800b368:	683b      	ldr	r3, [r7, #0]
 800b36a:	9300      	str	r3, [sp, #0]
 800b36c:	4613      	mov	r3, r2
 800b36e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b370:	6878      	ldr	r0, [r7, #4]
 800b372:	f003 fa51 	bl	800e818 <VL53L0X_get_pal_range_status>
 800b376:	4603      	mov	r3, r0
 800b378:	461a      	mov	r2, r3
 800b37a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b37e:	4313      	orrs	r3, r2
 800b380:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 800b384:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d103      	bne.n	800b394 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 800b38c:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800b390:	683b      	ldr	r3, [r7, #0]
 800b392:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b394:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d12f      	bne.n	800b3fc <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	f107 040c 	add.w	r4, r7, #12
 800b3a2:	f103 0550 	add.w	r5, r3, #80	; 0x50
 800b3a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b3a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b3aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b3ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 800b3b2:	683b      	ldr	r3, [r7, #0]
 800b3b4:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 800b3b6:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 800b3b8:	683b      	ldr	r3, [r7, #0]
 800b3ba:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 800b3bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 800b3c0:	683b      	ldr	r3, [r7, #0]
 800b3c2:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 800b3c4:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 800b3ca:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 800b3cc:	683b      	ldr	r3, [r7, #0]
 800b3ce:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 800b3d0:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 800b3d2:	683b      	ldr	r3, [r7, #0]
 800b3d4:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 800b3d6:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 800b3d8:	683b      	ldr	r3, [r7, #0]
 800b3da:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 800b3dc:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 800b3de:	683b      	ldr	r3, [r7, #0]
 800b3e0:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 800b3e2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	f103 0450 	add.w	r4, r3, #80	; 0x50
 800b3ec:	f107 050c 	add.w	r5, r7, #12
 800b3f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b3f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b3f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b3f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b3fc:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 800b400:	4618      	mov	r0, r3
 800b402:	3750      	adds	r7, #80	; 0x50
 800b404:	46bd      	mov	sp, r7
 800b406:	bdb0      	pop	{r4, r5, r7, pc}
 800b408:	10624dd3 	.word	0x10624dd3

0800b40c <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b084      	sub	sp, #16
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
 800b414:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b416:	2300      	movs	r3, #0
 800b418:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 800b41a:	2100      	movs	r1, #0
 800b41c:	6878      	ldr	r0, [r7, #4]
 800b41e:	f7ff f8b9 	bl	800a594 <VL53L0X_SetDeviceMode>
 800b422:	4603      	mov	r3, r0
 800b424:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800b426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d104      	bne.n	800b438 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 800b42e:	6878      	ldr	r0, [r7, #4]
 800b430:	f7ff fd16 	bl	800ae60 <VL53L0X_PerformSingleMeasurement>
 800b434:	4603      	mov	r3, r0
 800b436:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800b438:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d105      	bne.n	800b44c <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 800b440:	6839      	ldr	r1, [r7, #0]
 800b442:	6878      	ldr	r0, [r7, #4]
 800b444:	f7ff febe 	bl	800b1c4 <VL53L0X_GetRangingMeasurementData>
 800b448:	4603      	mov	r3, r0
 800b44a:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 800b44c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d105      	bne.n	800b460 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800b454:	2100      	movs	r1, #0
 800b456:	6878      	ldr	r0, [r7, #4]
 800b458:	f000 f962 	bl	800b720 <VL53L0X_ClearInterruptMask>
 800b45c:	4603      	mov	r3, r0
 800b45e:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 800b460:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b464:	4618      	mov	r0, r3
 800b466:	3710      	adds	r7, #16
 800b468:	46bd      	mov	sp, r7
 800b46a:	bd80      	pop	{r7, pc}

0800b46c <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b084      	sub	sp, #16
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
 800b474:	4608      	mov	r0, r1
 800b476:	4611      	mov	r1, r2
 800b478:	461a      	mov	r2, r3
 800b47a:	4603      	mov	r3, r0
 800b47c:	70fb      	strb	r3, [r7, #3]
 800b47e:	460b      	mov	r3, r1
 800b480:	70bb      	strb	r3, [r7, #2]
 800b482:	4613      	mov	r3, r2
 800b484:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b486:	2300      	movs	r3, #0
 800b488:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 800b48a:	78fb      	ldrb	r3, [r7, #3]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d002      	beq.n	800b496 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 800b490:	23f6      	movs	r3, #246	; 0xf6
 800b492:	73fb      	strb	r3, [r7, #15]
 800b494:	e107      	b.n	800b6a6 <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 800b496:	78bb      	ldrb	r3, [r7, #2]
 800b498:	2b14      	cmp	r3, #20
 800b49a:	d110      	bne.n	800b4be <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800b49c:	7e3b      	ldrb	r3, [r7, #24]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d102      	bne.n	800b4a8 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 800b4a2:	2310      	movs	r3, #16
 800b4a4:	73bb      	strb	r3, [r7, #14]
 800b4a6:	e001      	b.n	800b4ac <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 800b4a8:	2301      	movs	r3, #1
 800b4aa:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 800b4ac:	7bbb      	ldrb	r3, [r7, #14]
 800b4ae:	461a      	mov	r2, r3
 800b4b0:	2184      	movs	r1, #132	; 0x84
 800b4b2:	6878      	ldr	r0, [r7, #4]
 800b4b4:	f003 fc28 	bl	800ed08 <VL53L0X_WrByte>
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	73fb      	strb	r3, [r7, #15]
 800b4bc:	e0f3      	b.n	800b6a6 <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 800b4be:	78bb      	ldrb	r3, [r7, #2]
 800b4c0:	2b15      	cmp	r3, #21
 800b4c2:	f040 8097 	bne.w	800b5f4 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800b4c6:	2201      	movs	r2, #1
 800b4c8:	21ff      	movs	r1, #255	; 0xff
 800b4ca:	6878      	ldr	r0, [r7, #4]
 800b4cc:	f003 fc1c 	bl	800ed08 <VL53L0X_WrByte>
 800b4d0:	4603      	mov	r3, r0
 800b4d2:	461a      	mov	r2, r3
 800b4d4:	7bfb      	ldrb	r3, [r7, #15]
 800b4d6:	4313      	orrs	r3, r2
 800b4d8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800b4da:	2200      	movs	r2, #0
 800b4dc:	2100      	movs	r1, #0
 800b4de:	6878      	ldr	r0, [r7, #4]
 800b4e0:	f003 fc12 	bl	800ed08 <VL53L0X_WrByte>
 800b4e4:	4603      	mov	r3, r0
 800b4e6:	461a      	mov	r2, r3
 800b4e8:	7bfb      	ldrb	r3, [r7, #15]
 800b4ea:	4313      	orrs	r3, r2
 800b4ec:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	21ff      	movs	r1, #255	; 0xff
 800b4f2:	6878      	ldr	r0, [r7, #4]
 800b4f4:	f003 fc08 	bl	800ed08 <VL53L0X_WrByte>
 800b4f8:	4603      	mov	r3, r0
 800b4fa:	461a      	mov	r2, r3
 800b4fc:	7bfb      	ldrb	r3, [r7, #15]
 800b4fe:	4313      	orrs	r3, r2
 800b500:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800b502:	2201      	movs	r2, #1
 800b504:	2180      	movs	r1, #128	; 0x80
 800b506:	6878      	ldr	r0, [r7, #4]
 800b508:	f003 fbfe 	bl	800ed08 <VL53L0X_WrByte>
 800b50c:	4603      	mov	r3, r0
 800b50e:	461a      	mov	r2, r3
 800b510:	7bfb      	ldrb	r3, [r7, #15]
 800b512:	4313      	orrs	r3, r2
 800b514:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 800b516:	2202      	movs	r2, #2
 800b518:	2185      	movs	r1, #133	; 0x85
 800b51a:	6878      	ldr	r0, [r7, #4]
 800b51c:	f003 fbf4 	bl	800ed08 <VL53L0X_WrByte>
 800b520:	4603      	mov	r3, r0
 800b522:	461a      	mov	r2, r3
 800b524:	7bfb      	ldrb	r3, [r7, #15]
 800b526:	4313      	orrs	r3, r2
 800b528:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 800b52a:	2204      	movs	r2, #4
 800b52c:	21ff      	movs	r1, #255	; 0xff
 800b52e:	6878      	ldr	r0, [r7, #4]
 800b530:	f003 fbea 	bl	800ed08 <VL53L0X_WrByte>
 800b534:	4603      	mov	r3, r0
 800b536:	461a      	mov	r2, r3
 800b538:	7bfb      	ldrb	r3, [r7, #15]
 800b53a:	4313      	orrs	r3, r2
 800b53c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 800b53e:	2200      	movs	r2, #0
 800b540:	21cd      	movs	r1, #205	; 0xcd
 800b542:	6878      	ldr	r0, [r7, #4]
 800b544:	f003 fbe0 	bl	800ed08 <VL53L0X_WrByte>
 800b548:	4603      	mov	r3, r0
 800b54a:	461a      	mov	r2, r3
 800b54c:	7bfb      	ldrb	r3, [r7, #15]
 800b54e:	4313      	orrs	r3, r2
 800b550:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 800b552:	2211      	movs	r2, #17
 800b554:	21cc      	movs	r1, #204	; 0xcc
 800b556:	6878      	ldr	r0, [r7, #4]
 800b558:	f003 fbd6 	bl	800ed08 <VL53L0X_WrByte>
 800b55c:	4603      	mov	r3, r0
 800b55e:	461a      	mov	r2, r3
 800b560:	7bfb      	ldrb	r3, [r7, #15]
 800b562:	4313      	orrs	r3, r2
 800b564:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 800b566:	2207      	movs	r2, #7
 800b568:	21ff      	movs	r1, #255	; 0xff
 800b56a:	6878      	ldr	r0, [r7, #4]
 800b56c:	f003 fbcc 	bl	800ed08 <VL53L0X_WrByte>
 800b570:	4603      	mov	r3, r0
 800b572:	461a      	mov	r2, r3
 800b574:	7bfb      	ldrb	r3, [r7, #15]
 800b576:	4313      	orrs	r3, r2
 800b578:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 800b57a:	2200      	movs	r2, #0
 800b57c:	21be      	movs	r1, #190	; 0xbe
 800b57e:	6878      	ldr	r0, [r7, #4]
 800b580:	f003 fbc2 	bl	800ed08 <VL53L0X_WrByte>
 800b584:	4603      	mov	r3, r0
 800b586:	461a      	mov	r2, r3
 800b588:	7bfb      	ldrb	r3, [r7, #15]
 800b58a:	4313      	orrs	r3, r2
 800b58c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 800b58e:	2206      	movs	r2, #6
 800b590:	21ff      	movs	r1, #255	; 0xff
 800b592:	6878      	ldr	r0, [r7, #4]
 800b594:	f003 fbb8 	bl	800ed08 <VL53L0X_WrByte>
 800b598:	4603      	mov	r3, r0
 800b59a:	461a      	mov	r2, r3
 800b59c:	7bfb      	ldrb	r3, [r7, #15]
 800b59e:	4313      	orrs	r3, r2
 800b5a0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 800b5a2:	2209      	movs	r2, #9
 800b5a4:	21cc      	movs	r1, #204	; 0xcc
 800b5a6:	6878      	ldr	r0, [r7, #4]
 800b5a8:	f003 fbae 	bl	800ed08 <VL53L0X_WrByte>
 800b5ac:	4603      	mov	r3, r0
 800b5ae:	461a      	mov	r2, r3
 800b5b0:	7bfb      	ldrb	r3, [r7, #15]
 800b5b2:	4313      	orrs	r3, r2
 800b5b4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	21ff      	movs	r1, #255	; 0xff
 800b5ba:	6878      	ldr	r0, [r7, #4]
 800b5bc:	f003 fba4 	bl	800ed08 <VL53L0X_WrByte>
 800b5c0:	4603      	mov	r3, r0
 800b5c2:	461a      	mov	r2, r3
 800b5c4:	7bfb      	ldrb	r3, [r7, #15]
 800b5c6:	4313      	orrs	r3, r2
 800b5c8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800b5ca:	2201      	movs	r2, #1
 800b5cc:	21ff      	movs	r1, #255	; 0xff
 800b5ce:	6878      	ldr	r0, [r7, #4]
 800b5d0:	f003 fb9a 	bl	800ed08 <VL53L0X_WrByte>
 800b5d4:	4603      	mov	r3, r0
 800b5d6:	461a      	mov	r2, r3
 800b5d8:	7bfb      	ldrb	r3, [r7, #15]
 800b5da:	4313      	orrs	r3, r2
 800b5dc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800b5de:	2200      	movs	r2, #0
 800b5e0:	2100      	movs	r1, #0
 800b5e2:	6878      	ldr	r0, [r7, #4]
 800b5e4:	f003 fb90 	bl	800ed08 <VL53L0X_WrByte>
 800b5e8:	4603      	mov	r3, r0
 800b5ea:	461a      	mov	r2, r3
 800b5ec:	7bfb      	ldrb	r3, [r7, #15]
 800b5ee:	4313      	orrs	r3, r2
 800b5f0:	73fb      	strb	r3, [r7, #15]
 800b5f2:	e058      	b.n	800b6a6 <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 800b5f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d121      	bne.n	800b640 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 800b5fc:	787b      	ldrb	r3, [r7, #1]
 800b5fe:	2b04      	cmp	r3, #4
 800b600:	d81b      	bhi.n	800b63a <VL53L0X_SetGpioConfig+0x1ce>
 800b602:	a201      	add	r2, pc, #4	; (adr r2, 800b608 <VL53L0X_SetGpioConfig+0x19c>)
 800b604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b608:	0800b61d 	.word	0x0800b61d
 800b60c:	0800b623 	.word	0x0800b623
 800b610:	0800b629 	.word	0x0800b629
 800b614:	0800b62f 	.word	0x0800b62f
 800b618:	0800b635 	.word	0x0800b635
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 800b61c:	2300      	movs	r3, #0
 800b61e:	73bb      	strb	r3, [r7, #14]
				break;
 800b620:	e00f      	b.n	800b642 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 800b622:	2301      	movs	r3, #1
 800b624:	73bb      	strb	r3, [r7, #14]
				break;
 800b626:	e00c      	b.n	800b642 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 800b628:	2302      	movs	r3, #2
 800b62a:	73bb      	strb	r3, [r7, #14]
				break;
 800b62c:	e009      	b.n	800b642 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 800b62e:	2303      	movs	r3, #3
 800b630:	73bb      	strb	r3, [r7, #14]
				break;
 800b632:	e006      	b.n	800b642 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 800b634:	2304      	movs	r3, #4
 800b636:	73bb      	strb	r3, [r7, #14]
				break;
 800b638:	e003      	b.n	800b642 <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 800b63a:	23f5      	movs	r3, #245	; 0xf5
 800b63c:	73fb      	strb	r3, [r7, #15]
 800b63e:	e000      	b.n	800b642 <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 800b640:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 800b642:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d107      	bne.n	800b65a <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 800b64a:	7bbb      	ldrb	r3, [r7, #14]
 800b64c:	461a      	mov	r2, r3
 800b64e:	210a      	movs	r1, #10
 800b650:	6878      	ldr	r0, [r7, #4]
 800b652:	f003 fb59 	bl	800ed08 <VL53L0X_WrByte>
 800b656:	4603      	mov	r3, r0
 800b658:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 800b65a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d10f      	bne.n	800b682 <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800b662:	7e3b      	ldrb	r3, [r7, #24]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d102      	bne.n	800b66e <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 800b668:	2300      	movs	r3, #0
 800b66a:	73bb      	strb	r3, [r7, #14]
 800b66c:	e001      	b.n	800b672 <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 800b66e:	2310      	movs	r3, #16
 800b670:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 800b672:	7bbb      	ldrb	r3, [r7, #14]
 800b674:	22ef      	movs	r2, #239	; 0xef
 800b676:	2184      	movs	r1, #132	; 0x84
 800b678:	6878      	ldr	r0, [r7, #4]
 800b67a:	f003 fb93 	bl	800eda4 <VL53L0X_UpdateByte>
 800b67e:	4603      	mov	r3, r0
 800b680:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 800b682:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d103      	bne.n	800b692 <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	787a      	ldrb	r2, [r7, #1]
 800b68e:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 800b692:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d105      	bne.n	800b6a6 <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800b69a:	2100      	movs	r1, #0
 800b69c:	6878      	ldr	r0, [r7, #4]
 800b69e:	f000 f83f 	bl	800b720 <VL53L0X_ClearInterruptMask>
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b6a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	3710      	adds	r7, #16
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bd80      	pop	{r7, pc}
 800b6b2:	bf00      	nop

0800b6b4 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b086      	sub	sp, #24
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	60f8      	str	r0, [r7, #12]
 800b6bc:	607a      	str	r2, [r7, #4]
 800b6be:	603b      	str	r3, [r7, #0]
 800b6c0:	460b      	mov	r3, r1
 800b6c2:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 800b6c8:	f107 0314 	add.w	r3, r7, #20
 800b6cc:	461a      	mov	r2, r3
 800b6ce:	210e      	movs	r1, #14
 800b6d0:	68f8      	ldr	r0, [r7, #12]
 800b6d2:	f003 fbc5 	bl	800ee60 <VL53L0X_RdWord>
 800b6d6:	4603      	mov	r3, r0
 800b6d8:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800b6da:	8abb      	ldrh	r3, [r7, #20]
 800b6dc:	045b      	lsls	r3, r3, #17
 800b6de:	461a      	mov	r2, r3
 800b6e0:	4b0e      	ldr	r3, [pc, #56]	; (800b71c <VL53L0X_GetInterruptThresholds+0x68>)
 800b6e2:	4013      	ands	r3, r2
 800b6e4:	687a      	ldr	r2, [r7, #4]
 800b6e6:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 800b6e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d10f      	bne.n	800b710 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 800b6f0:	f107 0314 	add.w	r3, r7, #20
 800b6f4:	461a      	mov	r2, r3
 800b6f6:	210c      	movs	r1, #12
 800b6f8:	68f8      	ldr	r0, [r7, #12]
 800b6fa:	f003 fbb1 	bl	800ee60 <VL53L0X_RdWord>
 800b6fe:	4603      	mov	r3, r0
 800b700:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800b702:	8abb      	ldrh	r3, [r7, #20]
 800b704:	045b      	lsls	r3, r3, #17
 800b706:	461a      	mov	r2, r3
 800b708:	4b04      	ldr	r3, [pc, #16]	; (800b71c <VL53L0X_GetInterruptThresholds+0x68>)
 800b70a:	4013      	ands	r3, r2
		*pThresholdHigh =
 800b70c:	683a      	ldr	r2, [r7, #0]
 800b70e:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b710:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b714:	4618      	mov	r0, r3
 800b716:	3718      	adds	r7, #24
 800b718:	46bd      	mov	sp, r7
 800b71a:	bd80      	pop	{r7, pc}
 800b71c:	1ffe0000 	.word	0x1ffe0000

0800b720 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b084      	sub	sp, #16
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
 800b728:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b72a:	2300      	movs	r3, #0
 800b72c:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 800b72e:	2300      	movs	r3, #0
 800b730:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 800b732:	2201      	movs	r2, #1
 800b734:	210b      	movs	r1, #11
 800b736:	6878      	ldr	r0, [r7, #4]
 800b738:	f003 fae6 	bl	800ed08 <VL53L0X_WrByte>
 800b73c:	4603      	mov	r3, r0
 800b73e:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 800b740:	2200      	movs	r2, #0
 800b742:	210b      	movs	r1, #11
 800b744:	6878      	ldr	r0, [r7, #4]
 800b746:	f003 fadf 	bl	800ed08 <VL53L0X_WrByte>
 800b74a:	4603      	mov	r3, r0
 800b74c:	461a      	mov	r2, r3
 800b74e:	7bfb      	ldrb	r3, [r7, #15]
 800b750:	4313      	orrs	r3, r2
 800b752:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 800b754:	f107 030d 	add.w	r3, r7, #13
 800b758:	461a      	mov	r2, r3
 800b75a:	2113      	movs	r1, #19
 800b75c:	6878      	ldr	r0, [r7, #4]
 800b75e:	f003 fb55 	bl	800ee0c <VL53L0X_RdByte>
 800b762:	4603      	mov	r3, r0
 800b764:	461a      	mov	r2, r3
 800b766:	7bfb      	ldrb	r3, [r7, #15]
 800b768:	4313      	orrs	r3, r2
 800b76a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 800b76c:	7bbb      	ldrb	r3, [r7, #14]
 800b76e:	3301      	adds	r3, #1
 800b770:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 800b772:	7b7b      	ldrb	r3, [r7, #13]
 800b774:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d006      	beq.n	800b78a <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 800b77c:	7bbb      	ldrb	r3, [r7, #14]
 800b77e:	2b02      	cmp	r3, #2
 800b780:	d803      	bhi.n	800b78a <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 800b782:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d0d3      	beq.n	800b732 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 800b78a:	7bbb      	ldrb	r3, [r7, #14]
 800b78c:	2b02      	cmp	r3, #2
 800b78e:	d901      	bls.n	800b794 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 800b790:	23f4      	movs	r3, #244	; 0xf4
 800b792:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800b794:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b798:	4618      	mov	r0, r3
 800b79a:	3710      	adds	r7, #16
 800b79c:	46bd      	mov	sp, r7
 800b79e:	bd80      	pop	{r7, pc}

0800b7a0 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b084      	sub	sp, #16
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
 800b7a8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 800b7ae:	f107 030e 	add.w	r3, r7, #14
 800b7b2:	461a      	mov	r2, r3
 800b7b4:	2113      	movs	r1, #19
 800b7b6:	6878      	ldr	r0, [r7, #4]
 800b7b8:	f003 fb28 	bl	800ee0c <VL53L0X_RdByte>
 800b7bc:	4603      	mov	r3, r0
 800b7be:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 800b7c0:	7bbb      	ldrb	r3, [r7, #14]
 800b7c2:	f003 0207 	and.w	r2, r3, #7
 800b7c6:	683b      	ldr	r3, [r7, #0]
 800b7c8:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 800b7ca:	7bbb      	ldrb	r3, [r7, #14]
 800b7cc:	f003 0318 	and.w	r3, r3, #24
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d001      	beq.n	800b7d8 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 800b7d4:	23fa      	movs	r3, #250	; 0xfa
 800b7d6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800b7d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b7dc:	4618      	mov	r0, r3
 800b7de:	3710      	adds	r7, #16
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	bd80      	pop	{r7, pc}

0800b7e4 <VL53L0X_SetReferenceSpads>:
 * Internal functions
 *****************************************************************************/

VL53L0X_Error VL53L0X_SetReferenceSpads(VL53L0X_DEV Dev, uint32_t count,
	uint8_t isApertureSpads)
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b086      	sub	sp, #24
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	60f8      	str	r0, [r7, #12]
 800b7ec:	60b9      	str	r1, [r7, #8]
 800b7ee:	4613      	mov	r3, r2
 800b7f0:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_reference_spads(Dev, count, isApertureSpads);
 800b7f6:	79fb      	ldrb	r3, [r7, #7]
 800b7f8:	461a      	mov	r2, r3
 800b7fa:	68b9      	ldr	r1, [r7, #8]
 800b7fc:	68f8      	ldr	r0, [r7, #12]
 800b7fe:	f000 fc55 	bl	800c0ac <VL53L0X_set_reference_spads>
 800b802:	4603      	mov	r3, r0
 800b804:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);

	return Status;
 800b806:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b80a:	4618      	mov	r0, r3
 800b80c:	3718      	adds	r7, #24
 800b80e:	46bd      	mov	sp, r7
 800b810:	bd80      	pop	{r7, pc}

0800b812 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 800b812:	b580      	push	{r7, lr}
 800b814:	b086      	sub	sp, #24
 800b816:	af00      	add	r7, sp, #0
 800b818:	60f8      	str	r0, [r7, #12]
 800b81a:	60b9      	str	r1, [r7, #8]
 800b81c:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b81e:	2300      	movs	r3, #0
 800b820:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 800b822:	687a      	ldr	r2, [r7, #4]
 800b824:	68b9      	ldr	r1, [r7, #8]
 800b826:	68f8      	ldr	r0, [r7, #12]
 800b828:	f000 fa34 	bl	800bc94 <VL53L0X_perform_ref_spad_management>
 800b82c:	4603      	mov	r3, r0
 800b82e:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 800b830:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b834:	4618      	mov	r0, r3
 800b836:	3718      	adds	r7, #24
 800b838:	46bd      	mov	sp, r7
 800b83a:	bd80      	pop	{r7, pc}

0800b83c <VL53L0X_PerformContinuousRangingMeasurement>:


VL53L0X_Error VL53L0X_PerformContinuousRangingMeasurement(VL53L0X_Dev_t *device, VL53L0X_RangingMeasurementData_t *ranging_data) {
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b084      	sub	sp, #16
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
 800b844:	6039      	str	r1, [r7, #0]
    VL53L0X_Error status;

    // Set the device to high accuracy mode
    status = VL53L0X_SetDeviceMode(device, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 800b846:	2101      	movs	r1, #1
 800b848:	6878      	ldr	r0, [r7, #4]
 800b84a:	f7fe fea3 	bl	800a594 <VL53L0X_SetDeviceMode>
 800b84e:	4603      	mov	r3, r0
 800b850:	73fb      	strb	r3, [r7, #15]
    if (status != VL53L0X_ERROR_NONE) {
 800b852:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d002      	beq.n	800b860 <VL53L0X_PerformContinuousRangingMeasurement+0x24>
        return status;
 800b85a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b85e:	e019      	b.n	800b894 <VL53L0X_PerformContinuousRangingMeasurement+0x58>
    }

    // Start continuous ranging measurement
    status = VL53L0X_StartMeasurement(device);
 800b860:	6878      	ldr	r0, [r7, #4]
 800b862:	f7ff fbad 	bl	800afc0 <VL53L0X_StartMeasurement>
 800b866:	4603      	mov	r3, r0
 800b868:	73fb      	strb	r3, [r7, #15]
    if (status != VL53L0X_ERROR_NONE) {
 800b86a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d002      	beq.n	800b878 <VL53L0X_PerformContinuousRangingMeasurement+0x3c>
        return status;
 800b872:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b876:	e00d      	b.n	800b894 <VL53L0X_PerformContinuousRangingMeasurement+0x58>
    }

    // Get ranging measurement data
    status = VL53L0X_GetRangingMeasurementData(device, ranging_data);
 800b878:	6839      	ldr	r1, [r7, #0]
 800b87a:	6878      	ldr	r0, [r7, #4]
 800b87c:	f7ff fca2 	bl	800b1c4 <VL53L0X_GetRangingMeasurementData>
 800b880:	4603      	mov	r3, r0
 800b882:	73fb      	strb	r3, [r7, #15]
    if (status != VL53L0X_ERROR_NONE) {
 800b884:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d002      	beq.n	800b892 <VL53L0X_PerformContinuousRangingMeasurement+0x56>
        return status;
 800b88c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b890:	e000      	b.n	800b894 <VL53L0X_PerformContinuousRangingMeasurement+0x58>
    }

    return VL53L0X_ERROR_NONE;
 800b892:	2300      	movs	r3, #0
}
 800b894:	4618      	mov	r0, r3
 800b896:	3710      	adds	r7, #16
 800b898:	46bd      	mov	sp, r7
 800b89a:	bd80      	pop	{r7, pc}

0800b89c <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b084      	sub	sp, #16
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
 800b8a4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 800b8aa:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800b8ae:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 800b8b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b8b4:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 800b8b6:	f107 0308 	add.w	r3, r7, #8
 800b8ba:	461a      	mov	r2, r3
 800b8bc:	2128      	movs	r1, #40	; 0x28
 800b8be:	6878      	ldr	r0, [r7, #4]
 800b8c0:	f003 face 	bl	800ee60 <VL53L0X_RdWord>
 800b8c4:	4603      	mov	r3, r0
 800b8c6:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 800b8c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d11e      	bne.n	800b90e <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 800b8d0:	893b      	ldrh	r3, [r7, #8]
 800b8d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b8d6:	b29b      	uxth	r3, r3
 800b8d8:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 800b8da:	893b      	ldrh	r3, [r7, #8]
 800b8dc:	461a      	mov	r2, r3
 800b8de:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b8e2:	429a      	cmp	r2, r3
 800b8e4:	dd0b      	ble.n	800b8fe <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 800b8e6:	893a      	ldrh	r2, [r7, #8]
 800b8e8:	897b      	ldrh	r3, [r7, #10]
 800b8ea:	1ad3      	subs	r3, r2, r3
 800b8ec:	b29b      	uxth	r3, r3
 800b8ee:	b21b      	sxth	r3, r3
 800b8f0:	461a      	mov	r2, r3
					* 250;
 800b8f2:	23fa      	movs	r3, #250	; 0xfa
 800b8f4:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	601a      	str	r2, [r3, #0]
 800b8fc:	e007      	b.n	800b90e <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 800b8fe:	893b      	ldrh	r3, [r7, #8]
 800b900:	b21b      	sxth	r3, r3
 800b902:	461a      	mov	r2, r3
 800b904:	23fa      	movs	r3, #250	; 0xfa
 800b906:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800b90a:	683b      	ldr	r3, [r7, #0]
 800b90c:	601a      	str	r2, [r3, #0]

	}

	return Status;
 800b90e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b912:	4618      	mov	r0, r3
 800b914:	3710      	adds	r7, #16
 800b916:	46bd      	mov	sp, r7
 800b918:	bd80      	pop	{r7, pc}

0800b91a <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 800b91a:	b480      	push	{r7}
 800b91c:	b08b      	sub	sp, #44	; 0x2c
 800b91e:	af00      	add	r7, sp, #0
 800b920:	60f8      	str	r0, [r7, #12]
 800b922:	60b9      	str	r1, [r7, #8]
 800b924:	607a      	str	r2, [r7, #4]
 800b926:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 800b928:	2308      	movs	r3, #8
 800b92a:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 800b92c:	2300      	movs	r3, #0
 800b92e:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 800b930:	683b      	ldr	r3, [r7, #0]
 800b932:	f04f 32ff 	mov.w	r2, #4294967295
 800b936:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 800b938:	687a      	ldr	r2, [r7, #4]
 800b93a:	69bb      	ldr	r3, [r7, #24]
 800b93c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b940:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	69ba      	ldr	r2, [r7, #24]
 800b946:	fbb3 f2f2 	udiv	r2, r3, r2
 800b94a:	69b9      	ldr	r1, [r7, #24]
 800b94c:	fb01 f202 	mul.w	r2, r1, r2
 800b950:	1a9b      	subs	r3, r3, r2
 800b952:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800b954:	697b      	ldr	r3, [r7, #20]
 800b956:	627b      	str	r3, [r7, #36]	; 0x24
 800b958:	e030      	b.n	800b9bc <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 800b95a:	2300      	movs	r3, #0
 800b95c:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 800b95e:	68fa      	ldr	r2, [r7, #12]
 800b960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b962:	4413      	add	r3, r2
 800b964:	781b      	ldrb	r3, [r3, #0]
 800b966:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 800b968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b96a:	697b      	ldr	r3, [r7, #20]
 800b96c:	429a      	cmp	r2, r3
 800b96e:	d11e      	bne.n	800b9ae <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 800b970:	7ffa      	ldrb	r2, [r7, #31]
 800b972:	693b      	ldr	r3, [r7, #16]
 800b974:	fa42 f303 	asr.w	r3, r2, r3
 800b978:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 800b97a:	693b      	ldr	r3, [r7, #16]
 800b97c:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 800b97e:	e016      	b.n	800b9ae <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 800b980:	7ffb      	ldrb	r3, [r7, #31]
 800b982:	f003 0301 	and.w	r3, r3, #1
 800b986:	2b00      	cmp	r3, #0
 800b988:	d00b      	beq.n	800b9a2 <get_next_good_spad+0x88>
				success = 1;
 800b98a:	2301      	movs	r3, #1
 800b98c:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 800b98e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b990:	69ba      	ldr	r2, [r7, #24]
 800b992:	fb03 f202 	mul.w	r2, r3, r2
 800b996:	6a3b      	ldr	r3, [r7, #32]
 800b998:	4413      	add	r3, r2
 800b99a:	461a      	mov	r2, r3
 800b99c:	683b      	ldr	r3, [r7, #0]
 800b99e:	601a      	str	r2, [r3, #0]
				break;
 800b9a0:	e009      	b.n	800b9b6 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 800b9a2:	7ffb      	ldrb	r3, [r7, #31]
 800b9a4:	085b      	lsrs	r3, r3, #1
 800b9a6:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 800b9a8:	6a3b      	ldr	r3, [r7, #32]
 800b9aa:	3301      	adds	r3, #1
 800b9ac:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 800b9ae:	6a3a      	ldr	r2, [r7, #32]
 800b9b0:	69bb      	ldr	r3, [r7, #24]
 800b9b2:	429a      	cmp	r2, r3
 800b9b4:	d3e4      	bcc.n	800b980 <get_next_good_spad+0x66>
				coarseIndex++) {
 800b9b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9b8:	3301      	adds	r3, #1
 800b9ba:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800b9bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9be:	68bb      	ldr	r3, [r7, #8]
 800b9c0:	429a      	cmp	r2, r3
 800b9c2:	d202      	bcs.n	800b9ca <get_next_good_spad+0xb0>
 800b9c4:	7fbb      	ldrb	r3, [r7, #30]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d0c7      	beq.n	800b95a <get_next_good_spad+0x40>
		}
	}
}
 800b9ca:	bf00      	nop
 800b9cc:	372c      	adds	r7, #44	; 0x2c
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d4:	4770      	bx	lr
	...

0800b9d8 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 800b9d8:	b480      	push	{r7}
 800b9da:	b085      	sub	sp, #20
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 800b9e0:	2301      	movs	r3, #1
 800b9e2:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	099b      	lsrs	r3, r3, #6
 800b9e8:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 800b9ea:	4a07      	ldr	r2, [pc, #28]	; (800ba08 <is_aperture+0x30>)
 800b9ec:	68bb      	ldr	r3, [r7, #8]
 800b9ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d101      	bne.n	800b9fa <is_aperture+0x22>
		isAperture = 0;
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 800b9fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	3714      	adds	r7, #20
 800ba00:	46bd      	mov	sp, r7
 800ba02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba06:	4770      	bx	lr
 800ba08:	200005bc 	.word	0x200005bc

0800ba0c <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 800ba0c:	b480      	push	{r7}
 800ba0e:	b089      	sub	sp, #36	; 0x24
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	60f8      	str	r0, [r7, #12]
 800ba14:	60b9      	str	r1, [r7, #8]
 800ba16:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800ba18:	2300      	movs	r3, #0
 800ba1a:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 800ba1c:	2308      	movs	r3, #8
 800ba1e:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 800ba20:	687a      	ldr	r2, [r7, #4]
 800ba22:	69bb      	ldr	r3, [r7, #24]
 800ba24:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba28:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	69ba      	ldr	r2, [r7, #24]
 800ba2e:	fbb3 f2f2 	udiv	r2, r3, r2
 800ba32:	69b9      	ldr	r1, [r7, #24]
 800ba34:	fb01 f202 	mul.w	r2, r1, r2
 800ba38:	1a9b      	subs	r3, r3, r2
 800ba3a:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 800ba3c:	697a      	ldr	r2, [r7, #20]
 800ba3e:	68bb      	ldr	r3, [r7, #8]
 800ba40:	429a      	cmp	r2, r3
 800ba42:	d302      	bcc.n	800ba4a <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 800ba44:	23ce      	movs	r3, #206	; 0xce
 800ba46:	77fb      	strb	r3, [r7, #31]
 800ba48:	e010      	b.n	800ba6c <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 800ba4a:	68fa      	ldr	r2, [r7, #12]
 800ba4c:	697b      	ldr	r3, [r7, #20]
 800ba4e:	4413      	add	r3, r2
 800ba50:	781b      	ldrb	r3, [r3, #0]
 800ba52:	b25a      	sxtb	r2, r3
 800ba54:	2101      	movs	r1, #1
 800ba56:	693b      	ldr	r3, [r7, #16]
 800ba58:	fa01 f303 	lsl.w	r3, r1, r3
 800ba5c:	b25b      	sxtb	r3, r3
 800ba5e:	4313      	orrs	r3, r2
 800ba60:	b259      	sxtb	r1, r3
 800ba62:	68fa      	ldr	r2, [r7, #12]
 800ba64:	697b      	ldr	r3, [r7, #20]
 800ba66:	4413      	add	r3, r2
 800ba68:	b2ca      	uxtb	r2, r1
 800ba6a:	701a      	strb	r2, [r3, #0]

	return status;
 800ba6c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ba70:	4618      	mov	r0, r3
 800ba72:	3724      	adds	r7, #36	; 0x24
 800ba74:	46bd      	mov	sp, r7
 800ba76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7a:	4770      	bx	lr

0800ba7c <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b084      	sub	sp, #16
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
 800ba84:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 800ba86:	2306      	movs	r3, #6
 800ba88:	683a      	ldr	r2, [r7, #0]
 800ba8a:	21b0      	movs	r1, #176	; 0xb0
 800ba8c:	6878      	ldr	r0, [r7, #4]
 800ba8e:	f003 f8df 	bl	800ec50 <VL53L0X_WriteMulti>
 800ba92:	4603      	mov	r3, r0
 800ba94:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 800ba96:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	3710      	adds	r7, #16
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	bd80      	pop	{r7, pc}

0800baa2 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800baa2:	b580      	push	{r7, lr}
 800baa4:	b084      	sub	sp, #16
 800baa6:	af00      	add	r7, sp, #0
 800baa8:	6078      	str	r0, [r7, #4]
 800baaa:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 800baac:	2306      	movs	r3, #6
 800baae:	683a      	ldr	r2, [r7, #0]
 800bab0:	21b0      	movs	r1, #176	; 0xb0
 800bab2:	6878      	ldr	r0, [r7, #4]
 800bab4:	f003 f8fc 	bl	800ecb0 <VL53L0X_ReadMulti>
 800bab8:	4603      	mov	r3, r0
 800baba:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 800babc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bac0:	4618      	mov	r0, r3
 800bac2:	3710      	adds	r7, #16
 800bac4:	46bd      	mov	sp, r7
 800bac6:	bd80      	pop	{r7, pc}

0800bac8 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b08c      	sub	sp, #48	; 0x30
 800bacc:	af00      	add	r7, sp, #0
 800bace:	60f8      	str	r0, [r7, #12]
 800bad0:	607a      	str	r2, [r7, #4]
 800bad2:	603b      	str	r3, [r7, #0]
 800bad4:	460b      	mov	r3, r1
 800bad6:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800bad8:	2300      	movs	r3, #0
 800bada:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 800bade:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bae0:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 800bae2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bae4:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800bae6:	2300      	movs	r3, #0
 800bae8:	62bb      	str	r3, [r7, #40]	; 0x28
 800baea:	e02b      	b.n	800bb44 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 800baec:	f107 031c 	add.w	r3, r7, #28
 800baf0:	6a3a      	ldr	r2, [r7, #32]
 800baf2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800baf4:	6878      	ldr	r0, [r7, #4]
 800baf6:	f7ff ff10 	bl	800b91a <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 800bafa:	69fb      	ldr	r3, [r7, #28]
 800bafc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb00:	d103      	bne.n	800bb0a <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800bb02:	23ce      	movs	r3, #206	; 0xce
 800bb04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800bb08:	e020      	b.n	800bb4c <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 800bb0a:	69fb      	ldr	r3, [r7, #28]
 800bb0c:	461a      	mov	r2, r3
 800bb0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb10:	4413      	add	r3, r2
 800bb12:	4618      	mov	r0, r3
 800bb14:	f7ff ff60 	bl	800b9d8 <is_aperture>
 800bb18:	4603      	mov	r3, r0
 800bb1a:	461a      	mov	r2, r3
 800bb1c:	7afb      	ldrb	r3, [r7, #11]
 800bb1e:	4293      	cmp	r3, r2
 800bb20:	d003      	beq.n	800bb2a <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800bb22:	23ce      	movs	r3, #206	; 0xce
 800bb24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800bb28:	e010      	b.n	800bb4c <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 800bb2a:	69fb      	ldr	r3, [r7, #28]
 800bb2c:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 800bb2e:	6a3a      	ldr	r2, [r7, #32]
 800bb30:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bb32:	6838      	ldr	r0, [r7, #0]
 800bb34:	f7ff ff6a 	bl	800ba0c <enable_spad_bit>
		currentSpad++;
 800bb38:	6a3b      	ldr	r3, [r7, #32]
 800bb3a:	3301      	adds	r3, #1
 800bb3c:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800bb3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb40:	3301      	adds	r3, #1
 800bb42:	62bb      	str	r3, [r7, #40]	; 0x28
 800bb44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bb46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bb48:	429a      	cmp	r2, r3
 800bb4a:	d3cf      	bcc.n	800baec <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 800bb4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bb4e:	6a3a      	ldr	r2, [r7, #32]
 800bb50:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 800bb52:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d106      	bne.n	800bb68 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 800bb5a:	6839      	ldr	r1, [r7, #0]
 800bb5c:	68f8      	ldr	r0, [r7, #12]
 800bb5e:	f7ff ff8d 	bl	800ba7c <set_ref_spad_map>
 800bb62:	4603      	mov	r3, r0
 800bb64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 800bb68:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d121      	bne.n	800bbb4 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 800bb70:	f107 0314 	add.w	r3, r7, #20
 800bb74:	4619      	mov	r1, r3
 800bb76:	68f8      	ldr	r0, [r7, #12]
 800bb78:	f7ff ff93 	bl	800baa2 <get_ref_spad_map>
 800bb7c:	4603      	mov	r3, r0
 800bb7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 800bb82:	2300      	movs	r3, #0
 800bb84:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 800bb86:	e011      	b.n	800bbac <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 800bb88:	683a      	ldr	r2, [r7, #0]
 800bb8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb8c:	4413      	add	r3, r2
 800bb8e:	781a      	ldrb	r2, [r3, #0]
 800bb90:	f107 0114 	add.w	r1, r7, #20
 800bb94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb96:	440b      	add	r3, r1
 800bb98:	781b      	ldrb	r3, [r3, #0]
 800bb9a:	429a      	cmp	r2, r3
 800bb9c:	d003      	beq.n	800bba6 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 800bb9e:	23ce      	movs	r3, #206	; 0xce
 800bba0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 800bba4:	e006      	b.n	800bbb4 <enable_ref_spads+0xec>
			}
			i++;
 800bba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bba8:	3301      	adds	r3, #1
 800bbaa:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 800bbac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bbae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbb0:	429a      	cmp	r2, r3
 800bbb2:	d3e9      	bcc.n	800bb88 <enable_ref_spads+0xc0>
		}
	}
	return status;
 800bbb4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800bbb8:	4618      	mov	r0, r3
 800bbba:	3730      	adds	r7, #48	; 0x30
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	bd80      	pop	{r7, pc}

0800bbc0 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b08a      	sub	sp, #40	; 0x28
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
 800bbc8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800bbca:	2300      	movs	r3, #0
 800bbcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800bbdc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 800bbe0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d107      	bne.n	800bbf8 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 800bbe8:	22c0      	movs	r2, #192	; 0xc0
 800bbea:	2101      	movs	r1, #1
 800bbec:	6878      	ldr	r0, [r7, #4]
 800bbee:	f003 f88b 	bl	800ed08 <VL53L0X_WrByte>
 800bbf2:	4603      	mov	r3, r0
 800bbf4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 800bbf8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d108      	bne.n	800bc12 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 800bc00:	f107 0308 	add.w	r3, r7, #8
 800bc04:	4619      	mov	r1, r3
 800bc06:	6878      	ldr	r0, [r7, #4]
 800bc08:	f7ff fc00 	bl	800b40c <VL53L0X_PerformSingleRangingMeasurement>
 800bc0c:	4603      	mov	r3, r0
 800bc0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 800bc12:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d107      	bne.n	800bc2a <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800bc1a:	2201      	movs	r2, #1
 800bc1c:	21ff      	movs	r1, #255	; 0xff
 800bc1e:	6878      	ldr	r0, [r7, #4]
 800bc20:	f003 f872 	bl	800ed08 <VL53L0X_WrByte>
 800bc24:	4603      	mov	r3, r0
 800bc26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 800bc2a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d107      	bne.n	800bc42 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 800bc32:	683a      	ldr	r2, [r7, #0]
 800bc34:	21b6      	movs	r1, #182	; 0xb6
 800bc36:	6878      	ldr	r0, [r7, #4]
 800bc38:	f003 f912 	bl	800ee60 <VL53L0X_RdWord>
 800bc3c:	4603      	mov	r3, r0
 800bc3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 800bc42:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d107      	bne.n	800bc5a <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	21ff      	movs	r1, #255	; 0xff
 800bc4e:	6878      	ldr	r0, [r7, #4]
 800bc50:	f003 f85a 	bl	800ed08 <VL53L0X_WrByte>
 800bc54:	4603      	mov	r3, r0
 800bc56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 800bc5a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d112      	bne.n	800bc88 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800bc62:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bc66:	461a      	mov	r2, r3
 800bc68:	2101      	movs	r1, #1
 800bc6a:	6878      	ldr	r0, [r7, #4]
 800bc6c:	f003 f84c 	bl	800ed08 <VL53L0X_WrByte>
 800bc70:	4603      	mov	r3, r0
 800bc72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 800bc76:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d104      	bne.n	800bc88 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800bc84:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 800bc88:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	3728      	adds	r7, #40	; 0x28
 800bc90:	46bd      	mov	sp, r7
 800bc92:	bd80      	pop	{r7, pc}

0800bc94 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 800bc94:	b590      	push	{r4, r7, lr}
 800bc96:	b09d      	sub	sp, #116	; 0x74
 800bc98:	af06      	add	r7, sp, #24
 800bc9a:	60f8      	str	r0, [r7, #12]
 800bc9c:	60b9      	str	r1, [r7, #8]
 800bc9e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bca0:	2300      	movs	r3, #0
 800bca2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 800bca6:	23b4      	movs	r3, #180	; 0xb4
 800bca8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 800bcac:	2303      	movs	r3, #3
 800bcae:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 800bcb0:	232c      	movs	r3, #44	; 0x2c
 800bcb2:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 800bcb8:	2300      	movs	r3, #0
 800bcba:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 800bcc0:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800bcc4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 800bcca:	2300      	movs	r3, #0
 800bccc:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 800bcce:	2306      	movs	r3, #6
 800bcd0:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 800bcda:	2300      	movs	r3, #0
 800bcdc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 800bce0:	2300      	movs	r3, #0
 800bce2:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 800bce4:	2300      	movs	r3, #0
 800bce6:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 800bce8:	2300      	movs	r3, #0
 800bcea:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 800bcec:	2300      	movs	r3, #0
 800bcee:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 800bcf8:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	64bb      	str	r3, [r7, #72]	; 0x48
 800bcfe:	e009      	b.n	800bd14 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800bd00:	68fa      	ldr	r2, [r7, #12]
 800bd02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd04:	4413      	add	r3, r2
 800bd06:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800bd0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd10:	3301      	adds	r3, #1
 800bd12:	64bb      	str	r3, [r7, #72]	; 0x48
 800bd14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bd16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd18:	429a      	cmp	r2, r3
 800bd1a:	d3f1      	bcc.n	800bd00 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800bd1c:	2201      	movs	r2, #1
 800bd1e:	21ff      	movs	r1, #255	; 0xff
 800bd20:	68f8      	ldr	r0, [r7, #12]
 800bd22:	f002 fff1 	bl	800ed08 <VL53L0X_WrByte>
 800bd26:	4603      	mov	r3, r0
 800bd28:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800bd2c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d107      	bne.n	800bd44 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 800bd34:	2200      	movs	r2, #0
 800bd36:	214f      	movs	r1, #79	; 0x4f
 800bd38:	68f8      	ldr	r0, [r7, #12]
 800bd3a:	f002 ffe5 	bl	800ed08 <VL53L0X_WrByte>
 800bd3e:	4603      	mov	r3, r0
 800bd40:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800bd44:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d107      	bne.n	800bd5c <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 800bd4c:	222c      	movs	r2, #44	; 0x2c
 800bd4e:	214e      	movs	r1, #78	; 0x4e
 800bd50:	68f8      	ldr	r0, [r7, #12]
 800bd52:	f002 ffd9 	bl	800ed08 <VL53L0X_WrByte>
 800bd56:	4603      	mov	r3, r0
 800bd58:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800bd5c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d107      	bne.n	800bd74 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800bd64:	2200      	movs	r2, #0
 800bd66:	21ff      	movs	r1, #255	; 0xff
 800bd68:	68f8      	ldr	r0, [r7, #12]
 800bd6a:	f002 ffcd 	bl	800ed08 <VL53L0X_WrByte>
 800bd6e:	4603      	mov	r3, r0
 800bd70:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800bd74:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d109      	bne.n	800bd90 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 800bd7c:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800bd80:	461a      	mov	r2, r3
 800bd82:	21b6      	movs	r1, #182	; 0xb6
 800bd84:	68f8      	ldr	r0, [r7, #12]
 800bd86:	f002 ffbf 	bl	800ed08 <VL53L0X_WrByte>
 800bd8a:	4603      	mov	r3, r0
 800bd8c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 800bd90:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d107      	bne.n	800bda8 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 800bd98:	2200      	movs	r2, #0
 800bd9a:	2180      	movs	r1, #128	; 0x80
 800bd9c:	68f8      	ldr	r0, [r7, #12]
 800bd9e:	f002 ffb3 	bl	800ed08 <VL53L0X_WrByte>
 800bda2:	4603      	mov	r3, r0
 800bda4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 800bda8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d10a      	bne.n	800bdc6 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 800bdb0:	f107 0210 	add.w	r2, r7, #16
 800bdb4:	f107 0111 	add.w	r1, r7, #17
 800bdb8:	2300      	movs	r3, #0
 800bdba:	68f8      	ldr	r0, [r7, #12]
 800bdbc:	f000 fbbb 	bl	800c536 <VL53L0X_perform_ref_calibration>
 800bdc0:	4603      	mov	r3, r0
 800bdc2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 800bdc6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d121      	bne.n	800be12 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 800bdce:	2300      	movs	r3, #0
 800bdd0:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 800bdd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bdd4:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 800bdda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bddc:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 800bdea:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800bdee:	f107 0218 	add.w	r2, r7, #24
 800bdf2:	9204      	str	r2, [sp, #16]
 800bdf4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bdf6:	9203      	str	r2, [sp, #12]
 800bdf8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bdfa:	9202      	str	r2, [sp, #8]
 800bdfc:	9301      	str	r3, [sp, #4]
 800bdfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be00:	9300      	str	r3, [sp, #0]
 800be02:	4623      	mov	r3, r4
 800be04:	4602      	mov	r2, r0
 800be06:	68f8      	ldr	r0, [r7, #12]
 800be08:	f7ff fe5e 	bl	800bac8 <enable_ref_spads>
 800be0c:	4603      	mov	r3, r0
 800be0e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800be12:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800be16:	2b00      	cmp	r3, #0
 800be18:	d174      	bne.n	800bf04 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 800be1a:	69bb      	ldr	r3, [r7, #24]
 800be1c:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 800be1e:	f107 0312 	add.w	r3, r7, #18
 800be22:	4619      	mov	r1, r3
 800be24:	68f8      	ldr	r0, [r7, #12]
 800be26:	f7ff fecb 	bl	800bbc0 <perform_ref_signal_measurement>
 800be2a:	4603      	mov	r3, r0
 800be2c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 800be30:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800be34:	2b00      	cmp	r3, #0
 800be36:	d161      	bne.n	800befc <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 800be38:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 800be3a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800be3c:	429a      	cmp	r2, r3
 800be3e:	d25d      	bcs.n	800befc <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 800be40:	2300      	movs	r3, #0
 800be42:	64bb      	str	r3, [r7, #72]	; 0x48
 800be44:	e009      	b.n	800be5a <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800be46:	68fa      	ldr	r2, [r7, #12]
 800be48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be4a:	4413      	add	r3, r2
 800be4c:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800be50:	2200      	movs	r2, #0
 800be52:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 800be54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be56:	3301      	adds	r3, #1
 800be58:	64bb      	str	r3, [r7, #72]	; 0x48
 800be5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800be5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be5e:	429a      	cmp	r2, r3
 800be60:	d3f1      	bcc.n	800be46 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 800be62:	e002      	b.n	800be6a <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 800be64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be66:	3301      	adds	r3, #1
 800be68:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 800be6a:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 800be6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be70:	4413      	add	r3, r2
 800be72:	4618      	mov	r0, r3
 800be74:	f7ff fdb0 	bl	800b9d8 <is_aperture>
 800be78:	4603      	mov	r3, r0
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d103      	bne.n	800be86 <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 800be7e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800be80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be82:	429a      	cmp	r2, r3
 800be84:	d3ee      	bcc.n	800be64 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 800be86:	2301      	movs	r3, #1
 800be88:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 800be8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be8c:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 800be9a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800be9e:	f107 0218 	add.w	r2, r7, #24
 800bea2:	9204      	str	r2, [sp, #16]
 800bea4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bea6:	9203      	str	r2, [sp, #12]
 800bea8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800beaa:	9202      	str	r2, [sp, #8]
 800beac:	9301      	str	r3, [sp, #4]
 800beae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beb0:	9300      	str	r3, [sp, #0]
 800beb2:	4623      	mov	r3, r4
 800beb4:	4602      	mov	r2, r0
 800beb6:	68f8      	ldr	r0, [r7, #12]
 800beb8:	f7ff fe06 	bl	800bac8 <enable_ref_spads>
 800bebc:	4603      	mov	r3, r0
 800bebe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800bec2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d11b      	bne.n	800bf02 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 800beca:	69bb      	ldr	r3, [r7, #24]
 800becc:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 800bece:	f107 0312 	add.w	r3, r7, #18
 800bed2:	4619      	mov	r1, r3
 800bed4:	68f8      	ldr	r0, [r7, #12]
 800bed6:	f7ff fe73 	bl	800bbc0 <perform_ref_signal_measurement>
 800beda:	4603      	mov	r3, r0
 800bedc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 800bee0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d10c      	bne.n	800bf02 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 800bee8:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 800beea:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800beec:	429a      	cmp	r2, r3
 800beee:	d208      	bcs.n	800bf02 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 800bef0:	2301      	movs	r3, #1
 800bef2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 800bef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bef8:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 800befa:	e002      	b.n	800bf02 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 800befc:	2300      	movs	r3, #0
 800befe:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bf00:	e000      	b.n	800bf04 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 800bf02:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800bf04:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	f040 80af 	bne.w	800c06c <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 800bf0e:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 800bf10:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bf12:	429a      	cmp	r2, r3
 800bf14:	f240 80aa 	bls.w	800c06c <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 800bf18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 800bf1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf20:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	f503 7192 	add.w	r1, r3, #292	; 0x124
 800bf28:	f107 031c 	add.w	r3, r7, #28
 800bf2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bf2e:	4618      	mov	r0, r3
 800bf30:	f006 fc4c 	bl	80127cc <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 800bf34:	8a7b      	ldrh	r3, [r7, #18]
 800bf36:	461a      	mov	r2, r3
 800bf38:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bf3a:	1ad3      	subs	r3, r2, r3
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	bfb8      	it	lt
 800bf40:	425b      	neglt	r3, r3
 800bf42:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 800bf44:	2300      	movs	r3, #0
 800bf46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 800bf4a:	e086      	b.n	800c05a <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 800bf52:	f107 0314 	add.w	r3, r7, #20
 800bf56:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bf58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bf5a:	f7ff fcde 	bl	800b91a <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 800bf5e:	697b      	ldr	r3, [r7, #20]
 800bf60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf64:	d103      	bne.n	800bf6e <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 800bf66:	23ce      	movs	r3, #206	; 0xce
 800bf68:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 800bf6c:	e07e      	b.n	800c06c <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 800bf6e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800bf72:	697a      	ldr	r2, [r7, #20]
 800bf74:	4413      	add	r3, r2
 800bf76:	4618      	mov	r0, r3
 800bf78:	f7ff fd2e 	bl	800b9d8 <is_aperture>
 800bf7c:	4603      	mov	r3, r0
 800bf7e:	461a      	mov	r2, r3
 800bf80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf82:	4293      	cmp	r3, r2
 800bf84:	d003      	beq.n	800bf8e <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 800bf86:	2301      	movs	r3, #1
 800bf88:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 800bf8c:	e06e      	b.n	800c06c <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 800bf8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf90:	3301      	adds	r3, #1
 800bf92:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 800bf94:	697b      	ldr	r3, [r7, #20]
 800bf96:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 800bf9e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bfa0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	f7ff fd32 	bl	800ba0c <enable_spad_bit>
 800bfa8:	4603      	mov	r3, r0
 800bfaa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800bfae:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d10c      	bne.n	800bfd0 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 800bfb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bfb8:	3301      	adds	r3, #1
 800bfba:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 800bfc2:	4619      	mov	r1, r3
 800bfc4:	68f8      	ldr	r0, [r7, #12]
 800bfc6:	f7ff fd59 	bl	800ba7c <set_ref_spad_map>
 800bfca:	4603      	mov	r3, r0
 800bfcc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 800bfd0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d146      	bne.n	800c066 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 800bfd8:	f107 0312 	add.w	r3, r7, #18
 800bfdc:	4619      	mov	r1, r3
 800bfde:	68f8      	ldr	r0, [r7, #12]
 800bfe0:	f7ff fdee 	bl	800bbc0 <perform_ref_signal_measurement>
 800bfe4:	4603      	mov	r3, r0
 800bfe6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 800bfea:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d13b      	bne.n	800c06a <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 800bff2:	8a7b      	ldrh	r3, [r7, #18]
 800bff4:	461a      	mov	r2, r3
 800bff6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bff8:	1ad3      	subs	r3, r2, r3
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	bfb8      	it	lt
 800bffe:	425b      	neglt	r3, r3
 800c000:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 800c002:	8a7b      	ldrh	r3, [r7, #18]
 800c004:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c006:	429a      	cmp	r2, r3
 800c008:	d21c      	bcs.n	800c044 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 800c00a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c00c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c00e:	429a      	cmp	r2, r3
 800c010:	d914      	bls.n	800c03c <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 800c012:	f107 031c 	add.w	r3, r7, #28
 800c016:	4619      	mov	r1, r3
 800c018:	68f8      	ldr	r0, [r7, #12]
 800c01a:	f7ff fd2f 	bl	800ba7c <set_ref_spad_map>
 800c01e:	4603      	mov	r3, r0
 800c020:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 800c02a:	f107 011c 	add.w	r1, r7, #28
 800c02e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c030:	4618      	mov	r0, r3
 800c032:	f006 fbcb 	bl	80127cc <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 800c036:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c038:	3b01      	subs	r3, #1
 800c03a:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 800c03c:	2301      	movs	r3, #1
 800c03e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c042:	e00a      	b.n	800c05a <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 800c044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c046:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 800c04e:	f107 031c 	add.w	r3, r7, #28
 800c052:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c054:	4618      	mov	r0, r3
 800c056:	f006 fbb9 	bl	80127cc <memcpy>
		while (!complete) {
 800c05a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c05e:	2b00      	cmp	r3, #0
 800c060:	f43f af74 	beq.w	800bf4c <VL53L0X_perform_ref_spad_management+0x2b8>
 800c064:	e002      	b.n	800c06c <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800c066:	bf00      	nop
 800c068:	e000      	b.n	800c06c <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800c06a:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800c06c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800c070:	2b00      	cmp	r3, #0
 800c072:	d115      	bne.n	800c0a0 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 800c074:	68bb      	ldr	r3, [r7, #8]
 800c076:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c078:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800c080:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	2201      	movs	r2, #1
 800c086:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c08a:	68bb      	ldr	r3, [r7, #8]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	b2da      	uxtb	r2, r3
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	781a      	ldrb	r2, [r3, #0]
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 800c0a0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	375c      	adds	r7, #92	; 0x5c
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	bd90      	pop	{r4, r7, pc}

0800c0ac <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 800c0ac:	b590      	push	{r4, r7, lr}
 800c0ae:	b093      	sub	sp, #76	; 0x4c
 800c0b0:	af06      	add	r7, sp, #24
 800c0b2:	60f8      	str	r0, [r7, #12]
 800c0b4:	60b9      	str	r1, [r7, #8]
 800c0b6:	4613      	mov	r3, r2
 800c0b8:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 800c0c4:	23b4      	movs	r3, #180	; 0xb4
 800c0c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 800c0ca:	2306      	movs	r3, #6
 800c0cc:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 800c0ce:	232c      	movs	r3, #44	; 0x2c
 800c0d0:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800c0d2:	2201      	movs	r2, #1
 800c0d4:	21ff      	movs	r1, #255	; 0xff
 800c0d6:	68f8      	ldr	r0, [r7, #12]
 800c0d8:	f002 fe16 	bl	800ed08 <VL53L0X_WrByte>
 800c0dc:	4603      	mov	r3, r0
 800c0de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800c0e2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d107      	bne.n	800c0fa <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	214f      	movs	r1, #79	; 0x4f
 800c0ee:	68f8      	ldr	r0, [r7, #12]
 800c0f0:	f002 fe0a 	bl	800ed08 <VL53L0X_WrByte>
 800c0f4:	4603      	mov	r3, r0
 800c0f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800c0fa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d107      	bne.n	800c112 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 800c102:	222c      	movs	r2, #44	; 0x2c
 800c104:	214e      	movs	r1, #78	; 0x4e
 800c106:	68f8      	ldr	r0, [r7, #12]
 800c108:	f002 fdfe 	bl	800ed08 <VL53L0X_WrByte>
 800c10c:	4603      	mov	r3, r0
 800c10e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800c112:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c116:	2b00      	cmp	r3, #0
 800c118:	d107      	bne.n	800c12a <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800c11a:	2200      	movs	r2, #0
 800c11c:	21ff      	movs	r1, #255	; 0xff
 800c11e:	68f8      	ldr	r0, [r7, #12]
 800c120:	f002 fdf2 	bl	800ed08 <VL53L0X_WrByte>
 800c124:	4603      	mov	r3, r0
 800c126:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800c12a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d109      	bne.n	800c146 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 800c132:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c136:	461a      	mov	r2, r3
 800c138:	21b6      	movs	r1, #182	; 0xb6
 800c13a:	68f8      	ldr	r0, [r7, #12]
 800c13c:	f002 fde4 	bl	800ed08 <VL53L0X_WrByte>
 800c140:	4603      	mov	r3, r0
 800c142:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 800c146:	2300      	movs	r3, #0
 800c148:	627b      	str	r3, [r7, #36]	; 0x24
 800c14a:	e009      	b.n	800c160 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800c14c:	68fa      	ldr	r2, [r7, #12]
 800c14e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c150:	4413      	add	r3, r2
 800c152:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800c156:	2200      	movs	r2, #0
 800c158:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800c15a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c15c:	3301      	adds	r3, #1
 800c15e:	627b      	str	r3, [r7, #36]	; 0x24
 800c160:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c162:	69fb      	ldr	r3, [r7, #28]
 800c164:	429a      	cmp	r2, r3
 800c166:	d3f1      	bcc.n	800c14c <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 800c168:	79fb      	ldrb	r3, [r7, #7]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d011      	beq.n	800c192 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800c16e:	e002      	b.n	800c176 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 800c170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c172:	3301      	adds	r3, #1
 800c174:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800c176:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800c17a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c17c:	4413      	add	r3, r2
 800c17e:	4618      	mov	r0, r3
 800c180:	f7ff fc2a 	bl	800b9d8 <is_aperture>
 800c184:	4603      	mov	r3, r0
 800c186:	2b00      	cmp	r3, #0
 800c188:	d103      	bne.n	800c192 <VL53L0X_set_reference_spads+0xe6>
 800c18a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c18c:	69bb      	ldr	r3, [r7, #24]
 800c18e:	429a      	cmp	r2, r3
 800c190:	d3ee      	bcc.n	800c170 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 800c19e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c1a2:	79f9      	ldrb	r1, [r7, #7]
 800c1a4:	f107 0214 	add.w	r2, r7, #20
 800c1a8:	9204      	str	r2, [sp, #16]
 800c1aa:	68ba      	ldr	r2, [r7, #8]
 800c1ac:	9203      	str	r2, [sp, #12]
 800c1ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c1b0:	9202      	str	r2, [sp, #8]
 800c1b2:	9301      	str	r3, [sp, #4]
 800c1b4:	69fb      	ldr	r3, [r7, #28]
 800c1b6:	9300      	str	r3, [sp, #0]
 800c1b8:	4623      	mov	r3, r4
 800c1ba:	4602      	mov	r2, r0
 800c1bc:	68f8      	ldr	r0, [r7, #12]
 800c1be:	f7ff fc83 	bl	800bac8 <enable_ref_spads>
 800c1c2:	4603      	mov	r3, r0
 800c1c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 800c1c8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d10c      	bne.n	800c1ea <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	2201      	movs	r2, #1
 800c1d4:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c1d8:	68bb      	ldr	r3, [r7, #8]
 800c1da:	b2da      	uxtb	r2, r3
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	79fa      	ldrb	r2, [r7, #7]
 800c1e6:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 800c1ea:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	3734      	adds	r7, #52	; 0x34
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	bd90      	pop	{r4, r7, pc}

0800c1f6 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 800c1f6:	b580      	push	{r7, lr}
 800c1f8:	b084      	sub	sp, #16
 800c1fa:	af00      	add	r7, sp, #0
 800c1fc:	6078      	str	r0, [r7, #4]
 800c1fe:	460b      	mov	r3, r1
 800c200:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c202:	2300      	movs	r3, #0
 800c204:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800c206:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d10a      	bne.n	800c224 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800c20e:	78fb      	ldrb	r3, [r7, #3]
 800c210:	f043 0301 	orr.w	r3, r3, #1
 800c214:	b2db      	uxtb	r3, r3
 800c216:	461a      	mov	r2, r3
 800c218:	2100      	movs	r1, #0
 800c21a:	6878      	ldr	r0, [r7, #4]
 800c21c:	f002 fd74 	bl	800ed08 <VL53L0X_WrByte>
 800c220:	4603      	mov	r3, r0
 800c222:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 800c224:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d104      	bne.n	800c236 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800c22c:	6878      	ldr	r0, [r7, #4]
 800c22e:	f000 f9e2 	bl	800c5f6 <VL53L0X_measurement_poll_for_completion>
 800c232:	4603      	mov	r3, r0
 800c234:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800c236:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d105      	bne.n	800c24a <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800c23e:	2100      	movs	r1, #0
 800c240:	6878      	ldr	r0, [r7, #4]
 800c242:	f7ff fa6d 	bl	800b720 <VL53L0X_ClearInterruptMask>
 800c246:	4603      	mov	r3, r0
 800c248:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800c24a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d106      	bne.n	800c260 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 800c252:	2200      	movs	r2, #0
 800c254:	2100      	movs	r1, #0
 800c256:	6878      	ldr	r0, [r7, #4]
 800c258:	f002 fd56 	bl	800ed08 <VL53L0X_WrByte>
 800c25c:	4603      	mov	r3, r0
 800c25e:	73fb      	strb	r3, [r7, #15]

	return Status;
 800c260:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c264:	4618      	mov	r0, r3
 800c266:	3710      	adds	r7, #16
 800c268:	46bd      	mov	sp, r7
 800c26a:	bd80      	pop	{r7, pc}

0800c26c <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b084      	sub	sp, #16
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
 800c274:	4608      	mov	r0, r1
 800c276:	4611      	mov	r1, r2
 800c278:	461a      	mov	r2, r3
 800c27a:	4603      	mov	r3, r0
 800c27c:	70fb      	strb	r3, [r7, #3]
 800c27e:	460b      	mov	r3, r1
 800c280:	70bb      	strb	r3, [r7, #2]
 800c282:	4613      	mov	r3, r2
 800c284:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c286:	2300      	movs	r3, #0
 800c288:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 800c28a:	2300      	movs	r3, #0
 800c28c:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800c28e:	2201      	movs	r2, #1
 800c290:	21ff      	movs	r1, #255	; 0xff
 800c292:	6878      	ldr	r0, [r7, #4]
 800c294:	f002 fd38 	bl	800ed08 <VL53L0X_WrByte>
 800c298:	4603      	mov	r3, r0
 800c29a:	461a      	mov	r2, r3
 800c29c:	7bfb      	ldrb	r3, [r7, #15]
 800c29e:	4313      	orrs	r3, r2
 800c2a0:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	2100      	movs	r1, #0
 800c2a6:	6878      	ldr	r0, [r7, #4]
 800c2a8:	f002 fd2e 	bl	800ed08 <VL53L0X_WrByte>
 800c2ac:	4603      	mov	r3, r0
 800c2ae:	461a      	mov	r2, r3
 800c2b0:	7bfb      	ldrb	r3, [r7, #15]
 800c2b2:	4313      	orrs	r3, r2
 800c2b4:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800c2b6:	2200      	movs	r2, #0
 800c2b8:	21ff      	movs	r1, #255	; 0xff
 800c2ba:	6878      	ldr	r0, [r7, #4]
 800c2bc:	f002 fd24 	bl	800ed08 <VL53L0X_WrByte>
 800c2c0:	4603      	mov	r3, r0
 800c2c2:	461a      	mov	r2, r3
 800c2c4:	7bfb      	ldrb	r3, [r7, #15]
 800c2c6:	4313      	orrs	r3, r2
 800c2c8:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 800c2ca:	78fb      	ldrb	r3, [r7, #3]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d01e      	beq.n	800c30e <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 800c2d0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d009      	beq.n	800c2ec <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 800c2d8:	69ba      	ldr	r2, [r7, #24]
 800c2da:	21cb      	movs	r1, #203	; 0xcb
 800c2dc:	6878      	ldr	r0, [r7, #4]
 800c2de:	f002 fd95 	bl	800ee0c <VL53L0X_RdByte>
 800c2e2:	4603      	mov	r3, r0
 800c2e4:	461a      	mov	r2, r3
 800c2e6:	7bfb      	ldrb	r3, [r7, #15]
 800c2e8:	4313      	orrs	r3, r2
 800c2ea:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800c2ec:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d02a      	beq.n	800c34a <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 800c2f4:	f107 030e 	add.w	r3, r7, #14
 800c2f8:	461a      	mov	r2, r3
 800c2fa:	21ee      	movs	r1, #238	; 0xee
 800c2fc:	6878      	ldr	r0, [r7, #4]
 800c2fe:	f002 fd85 	bl	800ee0c <VL53L0X_RdByte>
 800c302:	4603      	mov	r3, r0
 800c304:	461a      	mov	r2, r3
 800c306:	7bfb      	ldrb	r3, [r7, #15]
 800c308:	4313      	orrs	r3, r2
 800c30a:	73fb      	strb	r3, [r7, #15]
 800c30c:	e01d      	b.n	800c34a <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 800c30e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c312:	2b00      	cmp	r3, #0
 800c314:	d00a      	beq.n	800c32c <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 800c316:	78bb      	ldrb	r3, [r7, #2]
 800c318:	461a      	mov	r2, r3
 800c31a:	21cb      	movs	r1, #203	; 0xcb
 800c31c:	6878      	ldr	r0, [r7, #4]
 800c31e:	f002 fcf3 	bl	800ed08 <VL53L0X_WrByte>
 800c322:	4603      	mov	r3, r0
 800c324:	461a      	mov	r2, r3
 800c326:	7bfb      	ldrb	r3, [r7, #15]
 800c328:	4313      	orrs	r3, r2
 800c32a:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800c32c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c330:	2b00      	cmp	r3, #0
 800c332:	d00a      	beq.n	800c34a <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 800c334:	787b      	ldrb	r3, [r7, #1]
 800c336:	2280      	movs	r2, #128	; 0x80
 800c338:	21ee      	movs	r1, #238	; 0xee
 800c33a:	6878      	ldr	r0, [r7, #4]
 800c33c:	f002 fd32 	bl	800eda4 <VL53L0X_UpdateByte>
 800c340:	4603      	mov	r3, r0
 800c342:	461a      	mov	r2, r3
 800c344:	7bfb      	ldrb	r3, [r7, #15]
 800c346:	4313      	orrs	r3, r2
 800c348:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800c34a:	2201      	movs	r2, #1
 800c34c:	21ff      	movs	r1, #255	; 0xff
 800c34e:	6878      	ldr	r0, [r7, #4]
 800c350:	f002 fcda 	bl	800ed08 <VL53L0X_WrByte>
 800c354:	4603      	mov	r3, r0
 800c356:	461a      	mov	r2, r3
 800c358:	7bfb      	ldrb	r3, [r7, #15]
 800c35a:	4313      	orrs	r3, r2
 800c35c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800c35e:	2201      	movs	r2, #1
 800c360:	2100      	movs	r1, #0
 800c362:	6878      	ldr	r0, [r7, #4]
 800c364:	f002 fcd0 	bl	800ed08 <VL53L0X_WrByte>
 800c368:	4603      	mov	r3, r0
 800c36a:	461a      	mov	r2, r3
 800c36c:	7bfb      	ldrb	r3, [r7, #15]
 800c36e:	4313      	orrs	r3, r2
 800c370:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800c372:	2200      	movs	r2, #0
 800c374:	21ff      	movs	r1, #255	; 0xff
 800c376:	6878      	ldr	r0, [r7, #4]
 800c378:	f002 fcc6 	bl	800ed08 <VL53L0X_WrByte>
 800c37c:	4603      	mov	r3, r0
 800c37e:	461a      	mov	r2, r3
 800c380:	7bfb      	ldrb	r3, [r7, #15]
 800c382:	4313      	orrs	r3, r2
 800c384:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 800c386:	7bbb      	ldrb	r3, [r7, #14]
 800c388:	f023 0310 	bic.w	r3, r3, #16
 800c38c:	b2da      	uxtb	r2, r3
 800c38e:	69fb      	ldr	r3, [r7, #28]
 800c390:	701a      	strb	r2, [r3, #0]

	return Status;
 800c392:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c396:	4618      	mov	r0, r3
 800c398:	3710      	adds	r7, #16
 800c39a:	46bd      	mov	sp, r7
 800c39c:	bd80      	pop	{r7, pc}

0800c39e <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800c39e:	b580      	push	{r7, lr}
 800c3a0:	b08a      	sub	sp, #40	; 0x28
 800c3a2:	af04      	add	r7, sp, #16
 800c3a4:	60f8      	str	r0, [r7, #12]
 800c3a6:	60b9      	str	r1, [r7, #8]
 800c3a8:	4611      	mov	r1, r2
 800c3aa:	461a      	mov	r2, r3
 800c3ac:	460b      	mov	r3, r1
 800c3ae:	71fb      	strb	r3, [r7, #7]
 800c3b0:	4613      	mov	r3, r2
 800c3b2:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800c3bc:	2300      	movs	r3, #0
 800c3be:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800c3c0:	2300      	movs	r3, #0
 800c3c2:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800c3c8:	79bb      	ldrb	r3, [r7, #6]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d003      	beq.n	800c3d6 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800c3d4:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 800c3d6:	2201      	movs	r2, #1
 800c3d8:	2101      	movs	r1, #1
 800c3da:	68f8      	ldr	r0, [r7, #12]
 800c3dc:	f002 fc94 	bl	800ed08 <VL53L0X_WrByte>
 800c3e0:	4603      	mov	r3, r0
 800c3e2:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800c3e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d105      	bne.n	800c3f8 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 800c3ec:	2140      	movs	r1, #64	; 0x40
 800c3ee:	68f8      	ldr	r0, [r7, #12]
 800c3f0:	f7ff ff01 	bl	800c1f6 <VL53L0X_perform_single_ref_calibration>
 800c3f4:	4603      	mov	r3, r0
 800c3f6:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800c3f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d115      	bne.n	800c42c <VL53L0X_perform_vhv_calibration+0x8e>
 800c400:	79fb      	ldrb	r3, [r7, #7]
 800c402:	2b01      	cmp	r3, #1
 800c404:	d112      	bne.n	800c42c <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800c406:	7d39      	ldrb	r1, [r7, #20]
 800c408:	7d7a      	ldrb	r2, [r7, #21]
 800c40a:	2300      	movs	r3, #0
 800c40c:	9303      	str	r3, [sp, #12]
 800c40e:	2301      	movs	r3, #1
 800c410:	9302      	str	r3, [sp, #8]
 800c412:	f107 0313 	add.w	r3, r7, #19
 800c416:	9301      	str	r3, [sp, #4]
 800c418:	68bb      	ldr	r3, [r7, #8]
 800c41a:	9300      	str	r3, [sp, #0]
 800c41c:	460b      	mov	r3, r1
 800c41e:	2101      	movs	r1, #1
 800c420:	68f8      	ldr	r0, [r7, #12]
 800c422:	f7ff ff23 	bl	800c26c <VL53L0X_ref_calibration_io>
 800c426:	4603      	mov	r3, r0
 800c428:	75fb      	strb	r3, [r7, #23]
 800c42a:	e002      	b.n	800c432 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 800c42c:	68bb      	ldr	r3, [r7, #8]
 800c42e:	2200      	movs	r2, #0
 800c430:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800c432:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d112      	bne.n	800c460 <VL53L0X_perform_vhv_calibration+0xc2>
 800c43a:	79bb      	ldrb	r3, [r7, #6]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d00f      	beq.n	800c460 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800c440:	7dbb      	ldrb	r3, [r7, #22]
 800c442:	461a      	mov	r2, r3
 800c444:	2101      	movs	r1, #1
 800c446:	68f8      	ldr	r0, [r7, #12]
 800c448:	f002 fc5e 	bl	800ed08 <VL53L0X_WrByte>
 800c44c:	4603      	mov	r3, r0
 800c44e:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800c450:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d103      	bne.n	800c460 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	7dba      	ldrb	r2, [r7, #22]
 800c45c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800c460:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c464:	4618      	mov	r0, r3
 800c466:	3718      	adds	r7, #24
 800c468:	46bd      	mov	sp, r7
 800c46a:	bd80      	pop	{r7, pc}

0800c46c <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b08a      	sub	sp, #40	; 0x28
 800c470:	af04      	add	r7, sp, #16
 800c472:	60f8      	str	r0, [r7, #12]
 800c474:	60b9      	str	r1, [r7, #8]
 800c476:	4611      	mov	r1, r2
 800c478:	461a      	mov	r2, r3
 800c47a:	460b      	mov	r3, r1
 800c47c:	71fb      	strb	r3, [r7, #7]
 800c47e:	4613      	mov	r3, r2
 800c480:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c482:	2300      	movs	r3, #0
 800c484:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800c486:	2300      	movs	r3, #0
 800c488:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800c48a:	2300      	movs	r3, #0
 800c48c:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800c48e:	2300      	movs	r3, #0
 800c490:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800c492:	79bb      	ldrb	r3, [r7, #6]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d003      	beq.n	800c4a0 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800c49e:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 800c4a0:	2202      	movs	r2, #2
 800c4a2:	2101      	movs	r1, #1
 800c4a4:	68f8      	ldr	r0, [r7, #12]
 800c4a6:	f002 fc2f 	bl	800ed08 <VL53L0X_WrByte>
 800c4aa:	4603      	mov	r3, r0
 800c4ac:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800c4ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d105      	bne.n	800c4c2 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 800c4b6:	2100      	movs	r1, #0
 800c4b8:	68f8      	ldr	r0, [r7, #12]
 800c4ba:	f7ff fe9c 	bl	800c1f6 <VL53L0X_perform_single_ref_calibration>
 800c4be:	4603      	mov	r3, r0
 800c4c0:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800c4c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d115      	bne.n	800c4f6 <VL53L0X_perform_phase_calibration+0x8a>
 800c4ca:	79fb      	ldrb	r3, [r7, #7]
 800c4cc:	2b01      	cmp	r3, #1
 800c4ce:	d112      	bne.n	800c4f6 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800c4d0:	7d39      	ldrb	r1, [r7, #20]
 800c4d2:	7d7a      	ldrb	r2, [r7, #21]
 800c4d4:	2301      	movs	r3, #1
 800c4d6:	9303      	str	r3, [sp, #12]
 800c4d8:	2300      	movs	r3, #0
 800c4da:	9302      	str	r3, [sp, #8]
 800c4dc:	68bb      	ldr	r3, [r7, #8]
 800c4de:	9301      	str	r3, [sp, #4]
 800c4e0:	f107 0313 	add.w	r3, r7, #19
 800c4e4:	9300      	str	r3, [sp, #0]
 800c4e6:	460b      	mov	r3, r1
 800c4e8:	2101      	movs	r1, #1
 800c4ea:	68f8      	ldr	r0, [r7, #12]
 800c4ec:	f7ff febe 	bl	800c26c <VL53L0X_ref_calibration_io>
 800c4f0:	4603      	mov	r3, r0
 800c4f2:	75fb      	strb	r3, [r7, #23]
 800c4f4:	e002      	b.n	800c4fc <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 800c4f6:	68bb      	ldr	r3, [r7, #8]
 800c4f8:	2200      	movs	r2, #0
 800c4fa:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800c4fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d112      	bne.n	800c52a <VL53L0X_perform_phase_calibration+0xbe>
 800c504:	79bb      	ldrb	r3, [r7, #6]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d00f      	beq.n	800c52a <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800c50a:	7dbb      	ldrb	r3, [r7, #22]
 800c50c:	461a      	mov	r2, r3
 800c50e:	2101      	movs	r1, #1
 800c510:	68f8      	ldr	r0, [r7, #12]
 800c512:	f002 fbf9 	bl	800ed08 <VL53L0X_WrByte>
 800c516:	4603      	mov	r3, r0
 800c518:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800c51a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d103      	bne.n	800c52a <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	7dba      	ldrb	r2, [r7, #22]
 800c526:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800c52a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c52e:	4618      	mov	r0, r3
 800c530:	3718      	adds	r7, #24
 800c532:	46bd      	mov	sp, r7
 800c534:	bd80      	pop	{r7, pc}

0800c536 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 800c536:	b580      	push	{r7, lr}
 800c538:	b086      	sub	sp, #24
 800c53a:	af00      	add	r7, sp, #0
 800c53c:	60f8      	str	r0, [r7, #12]
 800c53e:	60b9      	str	r1, [r7, #8]
 800c540:	607a      	str	r2, [r7, #4]
 800c542:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c544:	2300      	movs	r3, #0
 800c546:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800c548:	2300      	movs	r3, #0
 800c54a:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800c552:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 800c554:	78fa      	ldrb	r2, [r7, #3]
 800c556:	2300      	movs	r3, #0
 800c558:	68b9      	ldr	r1, [r7, #8]
 800c55a:	68f8      	ldr	r0, [r7, #12]
 800c55c:	f7ff ff1f 	bl	800c39e <VL53L0X_perform_vhv_calibration>
 800c560:	4603      	mov	r3, r0
 800c562:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800c564:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d107      	bne.n	800c57c <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 800c56c:	78fa      	ldrb	r2, [r7, #3]
 800c56e:	2300      	movs	r3, #0
 800c570:	6879      	ldr	r1, [r7, #4]
 800c572:	68f8      	ldr	r0, [r7, #12]
 800c574:	f7ff ff7a 	bl	800c46c <VL53L0X_perform_phase_calibration>
 800c578:	4603      	mov	r3, r0
 800c57a:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 800c57c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d10f      	bne.n	800c5a4 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800c584:	7dbb      	ldrb	r3, [r7, #22]
 800c586:	461a      	mov	r2, r3
 800c588:	2101      	movs	r1, #1
 800c58a:	68f8      	ldr	r0, [r7, #12]
 800c58c:	f002 fbbc 	bl	800ed08 <VL53L0X_WrByte>
 800c590:	4603      	mov	r3, r0
 800c592:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800c594:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d103      	bne.n	800c5a4 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	7dba      	ldrb	r2, [r7, #22]
 800c5a0:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800c5a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	3718      	adds	r7, #24
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	bd80      	pop	{r7, pc}

0800c5b0 <VL53L0X_set_ref_calibration>:

VL53L0X_Error VL53L0X_set_ref_calibration(VL53L0X_DEV Dev,
		uint8_t VhvSettings, uint8_t PhaseCal)
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b088      	sub	sp, #32
 800c5b4:	af04      	add	r7, sp, #16
 800c5b6:	6078      	str	r0, [r7, #4]
 800c5b8:	460b      	mov	r3, r1
 800c5ba:	70fb      	strb	r3, [r7, #3]
 800c5bc:	4613      	mov	r3, r2
 800c5be:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	73fb      	strb	r3, [r7, #15]
	uint8_t pVhvSettings;
	uint8_t pPhaseCal;

	Status = VL53L0X_ref_calibration_io(Dev, 0,
 800c5c4:	78b9      	ldrb	r1, [r7, #2]
 800c5c6:	78fa      	ldrb	r2, [r7, #3]
 800c5c8:	2301      	movs	r3, #1
 800c5ca:	9303      	str	r3, [sp, #12]
 800c5cc:	2301      	movs	r3, #1
 800c5ce:	9302      	str	r3, [sp, #8]
 800c5d0:	f107 030d 	add.w	r3, r7, #13
 800c5d4:	9301      	str	r3, [sp, #4]
 800c5d6:	f107 030e 	add.w	r3, r7, #14
 800c5da:	9300      	str	r3, [sp, #0]
 800c5dc:	460b      	mov	r3, r1
 800c5de:	2100      	movs	r1, #0
 800c5e0:	6878      	ldr	r0, [r7, #4]
 800c5e2:	f7ff fe43 	bl	800c26c <VL53L0X_ref_calibration_io>
 800c5e6:	4603      	mov	r3, r0
 800c5e8:	73fb      	strb	r3, [r7, #15]
		VhvSettings, PhaseCal,
		&pVhvSettings, &pPhaseCal,
		1, 1);

	return Status;
 800c5ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	3710      	adds	r7, #16
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	bd80      	pop	{r7, pc}

0800c5f6 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 800c5f6:	b580      	push	{r7, lr}
 800c5f8:	b086      	sub	sp, #24
 800c5fa:	af00      	add	r7, sp, #0
 800c5fc:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c5fe:	2300      	movs	r3, #0
 800c600:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 800c602:	2300      	movs	r3, #0
 800c604:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 800c606:	2300      	movs	r3, #0
 800c608:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800c60a:	f107 030f 	add.w	r3, r7, #15
 800c60e:	4619      	mov	r1, r3
 800c610:	6878      	ldr	r0, [r7, #4]
 800c612:	f7fe fd97 	bl	800b144 <VL53L0X_GetMeasurementDataReady>
 800c616:	4603      	mov	r3, r0
 800c618:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 800c61a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d110      	bne.n	800c644 <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 800c622:	7bfb      	ldrb	r3, [r7, #15]
 800c624:	2b01      	cmp	r3, #1
 800c626:	d00f      	beq.n	800c648 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 800c628:	693b      	ldr	r3, [r7, #16]
 800c62a:	3301      	adds	r3, #1
 800c62c:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 800c62e:	693b      	ldr	r3, [r7, #16]
 800c630:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800c634:	d302      	bcc.n	800c63c <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 800c636:	23f9      	movs	r3, #249	; 0xf9
 800c638:	75fb      	strb	r3, [r7, #23]
			break;
 800c63a:	e006      	b.n	800c64a <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 800c63c:	6878      	ldr	r0, [r7, #4]
 800c63e:	f002 fc83 	bl	800ef48 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800c642:	e7e2      	b.n	800c60a <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 800c644:	bf00      	nop
 800c646:	e000      	b.n	800c64a <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 800c648:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 800c64a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c64e:	4618      	mov	r0, r3
 800c650:	3718      	adds	r7, #24
 800c652:	46bd      	mov	sp, r7
 800c654:	bd80      	pop	{r7, pc}

0800c656 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800c656:	b480      	push	{r7}
 800c658:	b085      	sub	sp, #20
 800c65a:	af00      	add	r7, sp, #0
 800c65c:	4603      	mov	r3, r0
 800c65e:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800c660:	2300      	movs	r3, #0
 800c662:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800c664:	79fb      	ldrb	r3, [r7, #7]
 800c666:	3301      	adds	r3, #1
 800c668:	b2db      	uxtb	r3, r3
 800c66a:	005b      	lsls	r3, r3, #1
 800c66c:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800c66e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c670:	4618      	mov	r0, r3
 800c672:	3714      	adds	r7, #20
 800c674:	46bd      	mov	sp, r7
 800c676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67a:	4770      	bx	lr

0800c67c <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 800c67c:	b480      	push	{r7}
 800c67e:	b085      	sub	sp, #20
 800c680:	af00      	add	r7, sp, #0
 800c682:	4603      	mov	r3, r0
 800c684:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 800c686:	2300      	movs	r3, #0
 800c688:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 800c68a:	79fb      	ldrb	r3, [r7, #7]
 800c68c:	085b      	lsrs	r3, r3, #1
 800c68e:	b2db      	uxtb	r3, r3
 800c690:	3b01      	subs	r3, #1
 800c692:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 800c694:	7bfb      	ldrb	r3, [r7, #15]
}
 800c696:	4618      	mov	r0, r3
 800c698:	3714      	adds	r7, #20
 800c69a:	46bd      	mov	sp, r7
 800c69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a0:	4770      	bx	lr

0800c6a2 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 800c6a2:	b480      	push	{r7}
 800c6a4:	b085      	sub	sp, #20
 800c6a6:	af00      	add	r7, sp, #0
 800c6a8:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800c6ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c6b2:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 800c6b4:	e002      	b.n	800c6bc <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 800c6b6:	68bb      	ldr	r3, [r7, #8]
 800c6b8:	089b      	lsrs	r3, r3, #2
 800c6ba:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800c6bc:	68ba      	ldr	r2, [r7, #8]
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	429a      	cmp	r2, r3
 800c6c2:	d8f8      	bhi.n	800c6b6 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 800c6c4:	e017      	b.n	800c6f6 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 800c6c6:	68fa      	ldr	r2, [r7, #12]
 800c6c8:	68bb      	ldr	r3, [r7, #8]
 800c6ca:	4413      	add	r3, r2
 800c6cc:	687a      	ldr	r2, [r7, #4]
 800c6ce:	429a      	cmp	r2, r3
 800c6d0:	d30b      	bcc.n	800c6ea <VL53L0X_isqrt+0x48>
			num -= res + bit;
 800c6d2:	68fa      	ldr	r2, [r7, #12]
 800c6d4:	68bb      	ldr	r3, [r7, #8]
 800c6d6:	4413      	add	r3, r2
 800c6d8:	687a      	ldr	r2, [r7, #4]
 800c6da:	1ad3      	subs	r3, r2, r3
 800c6dc:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	085b      	lsrs	r3, r3, #1
 800c6e2:	68ba      	ldr	r2, [r7, #8]
 800c6e4:	4413      	add	r3, r2
 800c6e6:	60fb      	str	r3, [r7, #12]
 800c6e8:	e002      	b.n	800c6f0 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	085b      	lsrs	r3, r3, #1
 800c6ee:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 800c6f0:	68bb      	ldr	r3, [r7, #8]
 800c6f2:	089b      	lsrs	r3, r3, #2
 800c6f4:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800c6f6:	68bb      	ldr	r3, [r7, #8]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d1e4      	bne.n	800c6c6 <VL53L0X_isqrt+0x24>
	}

	return res;
 800c6fc:	68fb      	ldr	r3, [r7, #12]
}
 800c6fe:	4618      	mov	r0, r3
 800c700:	3714      	adds	r7, #20
 800c702:	46bd      	mov	sp, r7
 800c704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c708:	4770      	bx	lr

0800c70a <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 800c70a:	b580      	push	{r7, lr}
 800c70c:	b086      	sub	sp, #24
 800c70e:	af00      	add	r7, sp, #0
 800c710:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c712:	2300      	movs	r3, #0
 800c714:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 800c716:	2200      	movs	r2, #0
 800c718:	2183      	movs	r1, #131	; 0x83
 800c71a:	6878      	ldr	r0, [r7, #4]
 800c71c:	f002 faf4 	bl	800ed08 <VL53L0X_WrByte>
 800c720:	4603      	mov	r3, r0
 800c722:	461a      	mov	r2, r3
 800c724:	7dfb      	ldrb	r3, [r7, #23]
 800c726:	4313      	orrs	r3, r2
 800c728:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 800c72a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d11e      	bne.n	800c770 <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 800c732:	2300      	movs	r3, #0
 800c734:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 800c736:	f107 030f 	add.w	r3, r7, #15
 800c73a:	461a      	mov	r2, r3
 800c73c:	2183      	movs	r1, #131	; 0x83
 800c73e:	6878      	ldr	r0, [r7, #4]
 800c740:	f002 fb64 	bl	800ee0c <VL53L0X_RdByte>
 800c744:	4603      	mov	r3, r0
 800c746:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 800c748:	7bfb      	ldrb	r3, [r7, #15]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d10a      	bne.n	800c764 <VL53L0X_device_read_strobe+0x5a>
 800c74e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d106      	bne.n	800c764 <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 800c756:	693b      	ldr	r3, [r7, #16]
 800c758:	3301      	adds	r3, #1
 800c75a:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800c75c:	693b      	ldr	r3, [r7, #16]
 800c75e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800c762:	d3e8      	bcc.n	800c736 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800c764:	693b      	ldr	r3, [r7, #16]
 800c766:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800c76a:	d301      	bcc.n	800c770 <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 800c76c:	23f9      	movs	r3, #249	; 0xf9
 800c76e:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 800c770:	2201      	movs	r2, #1
 800c772:	2183      	movs	r1, #131	; 0x83
 800c774:	6878      	ldr	r0, [r7, #4]
 800c776:	f002 fac7 	bl	800ed08 <VL53L0X_WrByte>
 800c77a:	4603      	mov	r3, r0
 800c77c:	461a      	mov	r2, r3
 800c77e:	7dfb      	ldrb	r3, [r7, #23]
 800c780:	4313      	orrs	r3, r2
 800c782:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 800c784:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800c788:	4618      	mov	r0, r3
 800c78a:	3718      	adds	r7, #24
 800c78c:	46bd      	mov	sp, r7
 800c78e:	bd80      	pop	{r7, pc}

0800c790 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 800c790:	b580      	push	{r7, lr}
 800c792:	b098      	sub	sp, #96	; 0x60
 800c794:	af00      	add	r7, sp, #0
 800c796:	6078      	str	r0, [r7, #4]
 800c798:	460b      	mov	r3, r1
 800c79a:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c79c:	2300      	movs	r3, #0
 800c79e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 800c7c0:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800c7c4:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 800c7c6:	2300      	movs	r3, #0
 800c7c8:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800c7d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 800c7dc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c7e0:	2b07      	cmp	r3, #7
 800c7e2:	f000 8408 	beq.w	800cff6 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800c7e6:	2201      	movs	r2, #1
 800c7e8:	2180      	movs	r1, #128	; 0x80
 800c7ea:	6878      	ldr	r0, [r7, #4]
 800c7ec:	f002 fa8c 	bl	800ed08 <VL53L0X_WrByte>
 800c7f0:	4603      	mov	r3, r0
 800c7f2:	461a      	mov	r2, r3
 800c7f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c7f8:	4313      	orrs	r3, r2
 800c7fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800c7fe:	2201      	movs	r2, #1
 800c800:	21ff      	movs	r1, #255	; 0xff
 800c802:	6878      	ldr	r0, [r7, #4]
 800c804:	f002 fa80 	bl	800ed08 <VL53L0X_WrByte>
 800c808:	4603      	mov	r3, r0
 800c80a:	461a      	mov	r2, r3
 800c80c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c810:	4313      	orrs	r3, r2
 800c812:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800c816:	2200      	movs	r2, #0
 800c818:	2100      	movs	r1, #0
 800c81a:	6878      	ldr	r0, [r7, #4]
 800c81c:	f002 fa74 	bl	800ed08 <VL53L0X_WrByte>
 800c820:	4603      	mov	r3, r0
 800c822:	461a      	mov	r2, r3
 800c824:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c828:	4313      	orrs	r3, r2
 800c82a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800c82e:	2206      	movs	r2, #6
 800c830:	21ff      	movs	r1, #255	; 0xff
 800c832:	6878      	ldr	r0, [r7, #4]
 800c834:	f002 fa68 	bl	800ed08 <VL53L0X_WrByte>
 800c838:	4603      	mov	r3, r0
 800c83a:	461a      	mov	r2, r3
 800c83c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c840:	4313      	orrs	r3, r2
 800c842:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800c846:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800c84a:	461a      	mov	r2, r3
 800c84c:	2183      	movs	r1, #131	; 0x83
 800c84e:	6878      	ldr	r0, [r7, #4]
 800c850:	f002 fadc 	bl	800ee0c <VL53L0X_RdByte>
 800c854:	4603      	mov	r3, r0
 800c856:	461a      	mov	r2, r3
 800c858:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c85c:	4313      	orrs	r3, r2
 800c85e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 800c862:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c866:	f043 0304 	orr.w	r3, r3, #4
 800c86a:	b2db      	uxtb	r3, r3
 800c86c:	461a      	mov	r2, r3
 800c86e:	2183      	movs	r1, #131	; 0x83
 800c870:	6878      	ldr	r0, [r7, #4]
 800c872:	f002 fa49 	bl	800ed08 <VL53L0X_WrByte>
 800c876:	4603      	mov	r3, r0
 800c878:	461a      	mov	r2, r3
 800c87a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c87e:	4313      	orrs	r3, r2
 800c880:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 800c884:	2207      	movs	r2, #7
 800c886:	21ff      	movs	r1, #255	; 0xff
 800c888:	6878      	ldr	r0, [r7, #4]
 800c88a:	f002 fa3d 	bl	800ed08 <VL53L0X_WrByte>
 800c88e:	4603      	mov	r3, r0
 800c890:	461a      	mov	r2, r3
 800c892:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c896:	4313      	orrs	r3, r2
 800c898:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 800c89c:	2201      	movs	r2, #1
 800c89e:	2181      	movs	r1, #129	; 0x81
 800c8a0:	6878      	ldr	r0, [r7, #4]
 800c8a2:	f002 fa31 	bl	800ed08 <VL53L0X_WrByte>
 800c8a6:	4603      	mov	r3, r0
 800c8a8:	461a      	mov	r2, r3
 800c8aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c8ae:	4313      	orrs	r3, r2
 800c8b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 800c8b4:	6878      	ldr	r0, [r7, #4]
 800c8b6:	f002 fb47 	bl	800ef48 <VL53L0X_PollingDelay>
 800c8ba:	4603      	mov	r3, r0
 800c8bc:	461a      	mov	r2, r3
 800c8be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c8c2:	4313      	orrs	r3, r2
 800c8c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800c8c8:	2201      	movs	r2, #1
 800c8ca:	2180      	movs	r1, #128	; 0x80
 800c8cc:	6878      	ldr	r0, [r7, #4]
 800c8ce:	f002 fa1b 	bl	800ed08 <VL53L0X_WrByte>
 800c8d2:	4603      	mov	r3, r0
 800c8d4:	461a      	mov	r2, r3
 800c8d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c8da:	4313      	orrs	r3, r2
 800c8dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 800c8e0:	78fb      	ldrb	r3, [r7, #3]
 800c8e2:	f003 0301 	and.w	r3, r3, #1
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	f000 8098 	beq.w	800ca1c <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800c8ec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c8f0:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	f040 8091 	bne.w	800ca1c <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 800c8fa:	226b      	movs	r2, #107	; 0x6b
 800c8fc:	2194      	movs	r1, #148	; 0x94
 800c8fe:	6878      	ldr	r0, [r7, #4]
 800c900:	f002 fa02 	bl	800ed08 <VL53L0X_WrByte>
 800c904:	4603      	mov	r3, r0
 800c906:	461a      	mov	r2, r3
 800c908:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c90c:	4313      	orrs	r3, r2
 800c90e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c912:	6878      	ldr	r0, [r7, #4]
 800c914:	f7ff fef9 	bl	800c70a <VL53L0X_device_read_strobe>
 800c918:	4603      	mov	r3, r0
 800c91a:	461a      	mov	r2, r3
 800c91c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c920:	4313      	orrs	r3, r2
 800c922:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800c926:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c92a:	461a      	mov	r2, r3
 800c92c:	2190      	movs	r1, #144	; 0x90
 800c92e:	6878      	ldr	r0, [r7, #4]
 800c930:	f002 face 	bl	800eed0 <VL53L0X_RdDWord>
 800c934:	4603      	mov	r3, r0
 800c936:	461a      	mov	r2, r3
 800c938:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c93c:	4313      	orrs	r3, r2
 800c93e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 800c942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c944:	0a1b      	lsrs	r3, r3, #8
 800c946:	b2db      	uxtb	r3, r3
 800c948:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c94c:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 800c950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c952:	0bdb      	lsrs	r3, r3, #15
 800c954:	b2db      	uxtb	r3, r3
 800c956:	f003 0301 	and.w	r3, r3, #1
 800c95a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 800c95e:	2224      	movs	r2, #36	; 0x24
 800c960:	2194      	movs	r1, #148	; 0x94
 800c962:	6878      	ldr	r0, [r7, #4]
 800c964:	f002 f9d0 	bl	800ed08 <VL53L0X_WrByte>
 800c968:	4603      	mov	r3, r0
 800c96a:	461a      	mov	r2, r3
 800c96c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c970:	4313      	orrs	r3, r2
 800c972:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c976:	6878      	ldr	r0, [r7, #4]
 800c978:	f7ff fec7 	bl	800c70a <VL53L0X_device_read_strobe>
 800c97c:	4603      	mov	r3, r0
 800c97e:	461a      	mov	r2, r3
 800c980:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c984:	4313      	orrs	r3, r2
 800c986:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800c98a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c98e:	461a      	mov	r2, r3
 800c990:	2190      	movs	r1, #144	; 0x90
 800c992:	6878      	ldr	r0, [r7, #4]
 800c994:	f002 fa9c 	bl	800eed0 <VL53L0X_RdDWord>
 800c998:	4603      	mov	r3, r0
 800c99a:	461a      	mov	r2, r3
 800c99c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c9a0:	4313      	orrs	r3, r2
 800c9a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 800c9a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9a8:	0e1b      	lsrs	r3, r3, #24
 800c9aa:	b2db      	uxtb	r3, r3
 800c9ac:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 800c9ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9b0:	0c1b      	lsrs	r3, r3, #16
 800c9b2:	b2db      	uxtb	r3, r3
 800c9b4:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 800c9b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9b8:	0a1b      	lsrs	r3, r3, #8
 800c9ba:	b2db      	uxtb	r3, r3
 800c9bc:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 800c9be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9c0:	b2db      	uxtb	r3, r3
 800c9c2:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 800c9c4:	2225      	movs	r2, #37	; 0x25
 800c9c6:	2194      	movs	r1, #148	; 0x94
 800c9c8:	6878      	ldr	r0, [r7, #4]
 800c9ca:	f002 f99d 	bl	800ed08 <VL53L0X_WrByte>
 800c9ce:	4603      	mov	r3, r0
 800c9d0:	461a      	mov	r2, r3
 800c9d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c9d6:	4313      	orrs	r3, r2
 800c9d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c9dc:	6878      	ldr	r0, [r7, #4]
 800c9de:	f7ff fe94 	bl	800c70a <VL53L0X_device_read_strobe>
 800c9e2:	4603      	mov	r3, r0
 800c9e4:	461a      	mov	r2, r3
 800c9e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c9ea:	4313      	orrs	r3, r2
 800c9ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800c9f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c9f4:	461a      	mov	r2, r3
 800c9f6:	2190      	movs	r1, #144	; 0x90
 800c9f8:	6878      	ldr	r0, [r7, #4]
 800c9fa:	f002 fa69 	bl	800eed0 <VL53L0X_RdDWord>
 800c9fe:	4603      	mov	r3, r0
 800ca00:	461a      	mov	r2, r3
 800ca02:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ca06:	4313      	orrs	r3, r2
 800ca08:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 800ca0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca0e:	0e1b      	lsrs	r3, r3, #24
 800ca10:	b2db      	uxtb	r3, r3
 800ca12:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 800ca14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca16:	0c1b      	lsrs	r3, r3, #16
 800ca18:	b2db      	uxtb	r3, r3
 800ca1a:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 800ca1c:	78fb      	ldrb	r3, [r7, #3]
 800ca1e:	f003 0302 	and.w	r3, r3, #2
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	f000 8189 	beq.w	800cd3a <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800ca28:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ca2c:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	f040 8182 	bne.w	800cd3a <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 800ca36:	2202      	movs	r2, #2
 800ca38:	2194      	movs	r1, #148	; 0x94
 800ca3a:	6878      	ldr	r0, [r7, #4]
 800ca3c:	f002 f964 	bl	800ed08 <VL53L0X_WrByte>
 800ca40:	4603      	mov	r3, r0
 800ca42:	461a      	mov	r2, r3
 800ca44:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ca48:	4313      	orrs	r3, r2
 800ca4a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800ca4e:	6878      	ldr	r0, [r7, #4]
 800ca50:	f7ff fe5b 	bl	800c70a <VL53L0X_device_read_strobe>
 800ca54:	4603      	mov	r3, r0
 800ca56:	461a      	mov	r2, r3
 800ca58:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ca5c:	4313      	orrs	r3, r2
 800ca5e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 800ca62:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800ca66:	461a      	mov	r2, r3
 800ca68:	2190      	movs	r1, #144	; 0x90
 800ca6a:	6878      	ldr	r0, [r7, #4]
 800ca6c:	f002 f9ce 	bl	800ee0c <VL53L0X_RdByte>
 800ca70:	4603      	mov	r3, r0
 800ca72:	461a      	mov	r2, r3
 800ca74:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ca78:	4313      	orrs	r3, r2
 800ca7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800ca7e:	227b      	movs	r2, #123	; 0x7b
 800ca80:	2194      	movs	r1, #148	; 0x94
 800ca82:	6878      	ldr	r0, [r7, #4]
 800ca84:	f002 f940 	bl	800ed08 <VL53L0X_WrByte>
 800ca88:	4603      	mov	r3, r0
 800ca8a:	461a      	mov	r2, r3
 800ca8c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ca90:	4313      	orrs	r3, r2
 800ca92:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800ca96:	6878      	ldr	r0, [r7, #4]
 800ca98:	f7ff fe37 	bl	800c70a <VL53L0X_device_read_strobe>
 800ca9c:	4603      	mov	r3, r0
 800ca9e:	461a      	mov	r2, r3
 800caa0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800caa4:	4313      	orrs	r3, r2
 800caa6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 800caaa:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800caae:	461a      	mov	r2, r3
 800cab0:	2190      	movs	r1, #144	; 0x90
 800cab2:	6878      	ldr	r0, [r7, #4]
 800cab4:	f002 f9aa 	bl	800ee0c <VL53L0X_RdByte>
 800cab8:	4603      	mov	r3, r0
 800caba:	461a      	mov	r2, r3
 800cabc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cac0:	4313      	orrs	r3, r2
 800cac2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 800cac6:	2277      	movs	r2, #119	; 0x77
 800cac8:	2194      	movs	r1, #148	; 0x94
 800caca:	6878      	ldr	r0, [r7, #4]
 800cacc:	f002 f91c 	bl	800ed08 <VL53L0X_WrByte>
 800cad0:	4603      	mov	r3, r0
 800cad2:	461a      	mov	r2, r3
 800cad4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cad8:	4313      	orrs	r3, r2
 800cada:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800cade:	6878      	ldr	r0, [r7, #4]
 800cae0:	f7ff fe13 	bl	800c70a <VL53L0X_device_read_strobe>
 800cae4:	4603      	mov	r3, r0
 800cae6:	461a      	mov	r2, r3
 800cae8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800caec:	4313      	orrs	r3, r2
 800caee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800caf2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800caf6:	461a      	mov	r2, r3
 800caf8:	2190      	movs	r1, #144	; 0x90
 800cafa:	6878      	ldr	r0, [r7, #4]
 800cafc:	f002 f9e8 	bl	800eed0 <VL53L0X_RdDWord>
 800cb00:	4603      	mov	r3, r0
 800cb02:	461a      	mov	r2, r3
 800cb04:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cb08:	4313      	orrs	r3, r2
 800cb0a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 800cb0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb10:	0e5b      	lsrs	r3, r3, #25
 800cb12:	b2db      	uxtb	r3, r3
 800cb14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb18:	b2db      	uxtb	r3, r3
 800cb1a:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 800cb1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb1e:	0c9b      	lsrs	r3, r3, #18
 800cb20:	b2db      	uxtb	r3, r3
 800cb22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb26:	b2db      	uxtb	r3, r3
 800cb28:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 800cb2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb2c:	0adb      	lsrs	r3, r3, #11
 800cb2e:	b2db      	uxtb	r3, r3
 800cb30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb34:	b2db      	uxtb	r3, r3
 800cb36:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 800cb38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb3a:	091b      	lsrs	r3, r3, #4
 800cb3c:	b2db      	uxtb	r3, r3
 800cb3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb42:	b2db      	uxtb	r3, r3
 800cb44:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 800cb46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb48:	b2db      	uxtb	r3, r3
 800cb4a:	00db      	lsls	r3, r3, #3
 800cb4c:	b2db      	uxtb	r3, r3
 800cb4e:	f003 0378 	and.w	r3, r3, #120	; 0x78
 800cb52:	b2db      	uxtb	r3, r3
 800cb54:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 800cb58:	2278      	movs	r2, #120	; 0x78
 800cb5a:	2194      	movs	r1, #148	; 0x94
 800cb5c:	6878      	ldr	r0, [r7, #4]
 800cb5e:	f002 f8d3 	bl	800ed08 <VL53L0X_WrByte>
 800cb62:	4603      	mov	r3, r0
 800cb64:	461a      	mov	r2, r3
 800cb66:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cb6a:	4313      	orrs	r3, r2
 800cb6c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800cb70:	6878      	ldr	r0, [r7, #4]
 800cb72:	f7ff fdca 	bl	800c70a <VL53L0X_device_read_strobe>
 800cb76:	4603      	mov	r3, r0
 800cb78:	461a      	mov	r2, r3
 800cb7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cb7e:	4313      	orrs	r3, r2
 800cb80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800cb84:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cb88:	461a      	mov	r2, r3
 800cb8a:	2190      	movs	r1, #144	; 0x90
 800cb8c:	6878      	ldr	r0, [r7, #4]
 800cb8e:	f002 f99f 	bl	800eed0 <VL53L0X_RdDWord>
 800cb92:	4603      	mov	r3, r0
 800cb94:	461a      	mov	r2, r3
 800cb96:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cb9a:	4313      	orrs	r3, r2
 800cb9c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 800cba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cba2:	0f5b      	lsrs	r3, r3, #29
 800cba4:	b2db      	uxtb	r3, r3
 800cba6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cbaa:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 800cbac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cbb0:	4413      	add	r3, r2
 800cbb2:	b2db      	uxtb	r3, r3
 800cbb4:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 800cbb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbb8:	0d9b      	lsrs	r3, r3, #22
 800cbba:	b2db      	uxtb	r3, r3
 800cbbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cbc0:	b2db      	uxtb	r3, r3
 800cbc2:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 800cbc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbc6:	0bdb      	lsrs	r3, r3, #15
 800cbc8:	b2db      	uxtb	r3, r3
 800cbca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cbce:	b2db      	uxtb	r3, r3
 800cbd0:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 800cbd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbd4:	0a1b      	lsrs	r3, r3, #8
 800cbd6:	b2db      	uxtb	r3, r3
 800cbd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cbdc:	b2db      	uxtb	r3, r3
 800cbde:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 800cbe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbe2:	085b      	lsrs	r3, r3, #1
 800cbe4:	b2db      	uxtb	r3, r3
 800cbe6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cbea:	b2db      	uxtb	r3, r3
 800cbec:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 800cbee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbf0:	b2db      	uxtb	r3, r3
 800cbf2:	019b      	lsls	r3, r3, #6
 800cbf4:	b2db      	uxtb	r3, r3
 800cbf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbfa:	b2db      	uxtb	r3, r3
 800cbfc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 800cc00:	2279      	movs	r2, #121	; 0x79
 800cc02:	2194      	movs	r1, #148	; 0x94
 800cc04:	6878      	ldr	r0, [r7, #4]
 800cc06:	f002 f87f 	bl	800ed08 <VL53L0X_WrByte>
 800cc0a:	4603      	mov	r3, r0
 800cc0c:	461a      	mov	r2, r3
 800cc0e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cc12:	4313      	orrs	r3, r2
 800cc14:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800cc18:	6878      	ldr	r0, [r7, #4]
 800cc1a:	f7ff fd76 	bl	800c70a <VL53L0X_device_read_strobe>
 800cc1e:	4603      	mov	r3, r0
 800cc20:	461a      	mov	r2, r3
 800cc22:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cc26:	4313      	orrs	r3, r2
 800cc28:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800cc2c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cc30:	461a      	mov	r2, r3
 800cc32:	2190      	movs	r1, #144	; 0x90
 800cc34:	6878      	ldr	r0, [r7, #4]
 800cc36:	f002 f94b 	bl	800eed0 <VL53L0X_RdDWord>
 800cc3a:	4603      	mov	r3, r0
 800cc3c:	461a      	mov	r2, r3
 800cc3e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cc42:	4313      	orrs	r3, r2
 800cc44:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 800cc48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc4a:	0e9b      	lsrs	r3, r3, #26
 800cc4c:	b2db      	uxtb	r3, r3
 800cc4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc52:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 800cc54:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cc58:	4413      	add	r3, r2
 800cc5a:	b2db      	uxtb	r3, r3
 800cc5c:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 800cc5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc60:	0cdb      	lsrs	r3, r3, #19
 800cc62:	b2db      	uxtb	r3, r3
 800cc64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc68:	b2db      	uxtb	r3, r3
 800cc6a:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 800cc6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc6e:	0b1b      	lsrs	r3, r3, #12
 800cc70:	b2db      	uxtb	r3, r3
 800cc72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc76:	b2db      	uxtb	r3, r3
 800cc78:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 800cc7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc7c:	095b      	lsrs	r3, r3, #5
 800cc7e:	b2db      	uxtb	r3, r3
 800cc80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc84:	b2db      	uxtb	r3, r3
 800cc86:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800cc88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc8a:	b2db      	uxtb	r3, r3
 800cc8c:	009b      	lsls	r3, r3, #2
 800cc8e:	b2db      	uxtb	r3, r3
 800cc90:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 800cc94:	b2db      	uxtb	r3, r3
 800cc96:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 800cc9a:	227a      	movs	r2, #122	; 0x7a
 800cc9c:	2194      	movs	r1, #148	; 0x94
 800cc9e:	6878      	ldr	r0, [r7, #4]
 800cca0:	f002 f832 	bl	800ed08 <VL53L0X_WrByte>
 800cca4:	4603      	mov	r3, r0
 800cca6:	461a      	mov	r2, r3
 800cca8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ccac:	4313      	orrs	r3, r2
 800ccae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800ccb2:	6878      	ldr	r0, [r7, #4]
 800ccb4:	f7ff fd29 	bl	800c70a <VL53L0X_device_read_strobe>
 800ccb8:	4603      	mov	r3, r0
 800ccba:	461a      	mov	r2, r3
 800ccbc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ccc0:	4313      	orrs	r3, r2
 800ccc2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800ccc6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ccca:	461a      	mov	r2, r3
 800cccc:	2190      	movs	r1, #144	; 0x90
 800ccce:	6878      	ldr	r0, [r7, #4]
 800ccd0:	f002 f8fe 	bl	800eed0 <VL53L0X_RdDWord>
 800ccd4:	4603      	mov	r3, r0
 800ccd6:	461a      	mov	r2, r3
 800ccd8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ccdc:	4313      	orrs	r3, r2
 800ccde:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 800cce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cce4:	0f9b      	lsrs	r3, r3, #30
 800cce6:	b2db      	uxtb	r3, r3
 800cce8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ccec:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 800ccee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ccf2:	4413      	add	r3, r2
 800ccf4:	b2db      	uxtb	r3, r3
 800ccf6:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 800ccf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccfa:	0ddb      	lsrs	r3, r3, #23
 800ccfc:	b2db      	uxtb	r3, r3
 800ccfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd02:	b2db      	uxtb	r3, r3
 800cd04:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 800cd06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd08:	0c1b      	lsrs	r3, r3, #16
 800cd0a:	b2db      	uxtb	r3, r3
 800cd0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd10:	b2db      	uxtb	r3, r3
 800cd12:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 800cd14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd16:	0a5b      	lsrs	r3, r3, #9
 800cd18:	b2db      	uxtb	r3, r3
 800cd1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd1e:	b2db      	uxtb	r3, r3
 800cd20:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 800cd24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd26:	089b      	lsrs	r3, r3, #2
 800cd28:	b2db      	uxtb	r3, r3
 800cd2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd2e:	b2db      	uxtb	r3, r3
 800cd30:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 800cd34:	2300      	movs	r3, #0
 800cd36:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 800cd3a:	78fb      	ldrb	r3, [r7, #3]
 800cd3c:	f003 0304 	and.w	r3, r3, #4
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	f000 80f1 	beq.w	800cf28 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800cd46:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cd4a:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	f040 80ea 	bne.w	800cf28 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800cd54:	227b      	movs	r2, #123	; 0x7b
 800cd56:	2194      	movs	r1, #148	; 0x94
 800cd58:	6878      	ldr	r0, [r7, #4]
 800cd5a:	f001 ffd5 	bl	800ed08 <VL53L0X_WrByte>
 800cd5e:	4603      	mov	r3, r0
 800cd60:	461a      	mov	r2, r3
 800cd62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cd66:	4313      	orrs	r3, r2
 800cd68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800cd6c:	6878      	ldr	r0, [r7, #4]
 800cd6e:	f7ff fccc 	bl	800c70a <VL53L0X_device_read_strobe>
 800cd72:	4603      	mov	r3, r0
 800cd74:	461a      	mov	r2, r3
 800cd76:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cd7a:	4313      	orrs	r3, r2
 800cd7c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 800cd80:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800cd84:	461a      	mov	r2, r3
 800cd86:	2190      	movs	r1, #144	; 0x90
 800cd88:	6878      	ldr	r0, [r7, #4]
 800cd8a:	f002 f8a1 	bl	800eed0 <VL53L0X_RdDWord>
 800cd8e:	4603      	mov	r3, r0
 800cd90:	461a      	mov	r2, r3
 800cd92:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cd96:	4313      	orrs	r3, r2
 800cd98:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 800cd9c:	227c      	movs	r2, #124	; 0x7c
 800cd9e:	2194      	movs	r1, #148	; 0x94
 800cda0:	6878      	ldr	r0, [r7, #4]
 800cda2:	f001 ffb1 	bl	800ed08 <VL53L0X_WrByte>
 800cda6:	4603      	mov	r3, r0
 800cda8:	461a      	mov	r2, r3
 800cdaa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cdae:	4313      	orrs	r3, r2
 800cdb0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800cdb4:	6878      	ldr	r0, [r7, #4]
 800cdb6:	f7ff fca8 	bl	800c70a <VL53L0X_device_read_strobe>
 800cdba:	4603      	mov	r3, r0
 800cdbc:	461a      	mov	r2, r3
 800cdbe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cdc2:	4313      	orrs	r3, r2
 800cdc4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 800cdc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cdcc:	461a      	mov	r2, r3
 800cdce:	2190      	movs	r1, #144	; 0x90
 800cdd0:	6878      	ldr	r0, [r7, #4]
 800cdd2:	f002 f87d 	bl	800eed0 <VL53L0X_RdDWord>
 800cdd6:	4603      	mov	r3, r0
 800cdd8:	461a      	mov	r2, r3
 800cdda:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cdde:	4313      	orrs	r3, r2
 800cde0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 800cde4:	2273      	movs	r2, #115	; 0x73
 800cde6:	2194      	movs	r1, #148	; 0x94
 800cde8:	6878      	ldr	r0, [r7, #4]
 800cdea:	f001 ff8d 	bl	800ed08 <VL53L0X_WrByte>
 800cdee:	4603      	mov	r3, r0
 800cdf0:	461a      	mov	r2, r3
 800cdf2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cdf6:	4313      	orrs	r3, r2
 800cdf8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800cdfc:	6878      	ldr	r0, [r7, #4]
 800cdfe:	f7ff fc84 	bl	800c70a <VL53L0X_device_read_strobe>
 800ce02:	4603      	mov	r3, r0
 800ce04:	461a      	mov	r2, r3
 800ce06:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ce0a:	4313      	orrs	r3, r2
 800ce0c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800ce10:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ce14:	461a      	mov	r2, r3
 800ce16:	2190      	movs	r1, #144	; 0x90
 800ce18:	6878      	ldr	r0, [r7, #4]
 800ce1a:	f002 f859 	bl	800eed0 <VL53L0X_RdDWord>
 800ce1e:	4603      	mov	r3, r0
 800ce20:	461a      	mov	r2, r3
 800ce22:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ce26:	4313      	orrs	r3, r2
 800ce28:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 800ce2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce2e:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 800ce30:	b29b      	uxth	r3, r3
 800ce32:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800ce34:	2274      	movs	r2, #116	; 0x74
 800ce36:	2194      	movs	r1, #148	; 0x94
 800ce38:	6878      	ldr	r0, [r7, #4]
 800ce3a:	f001 ff65 	bl	800ed08 <VL53L0X_WrByte>
 800ce3e:	4603      	mov	r3, r0
 800ce40:	461a      	mov	r2, r3
 800ce42:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ce46:	4313      	orrs	r3, r2
 800ce48:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800ce4c:	6878      	ldr	r0, [r7, #4]
 800ce4e:	f7ff fc5c 	bl	800c70a <VL53L0X_device_read_strobe>
 800ce52:	4603      	mov	r3, r0
 800ce54:	461a      	mov	r2, r3
 800ce56:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ce5a:	4313      	orrs	r3, r2
 800ce5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800ce60:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ce64:	461a      	mov	r2, r3
 800ce66:	2190      	movs	r1, #144	; 0x90
 800ce68:	6878      	ldr	r0, [r7, #4]
 800ce6a:	f002 f831 	bl	800eed0 <VL53L0X_RdDWord>
 800ce6e:	4603      	mov	r3, r0
 800ce70:	461a      	mov	r2, r3
 800ce72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ce76:	4313      	orrs	r3, r2
 800ce78:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 800ce7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce7e:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 800ce80:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ce82:	4313      	orrs	r3, r2
 800ce84:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 800ce86:	2275      	movs	r2, #117	; 0x75
 800ce88:	2194      	movs	r1, #148	; 0x94
 800ce8a:	6878      	ldr	r0, [r7, #4]
 800ce8c:	f001 ff3c 	bl	800ed08 <VL53L0X_WrByte>
 800ce90:	4603      	mov	r3, r0
 800ce92:	461a      	mov	r2, r3
 800ce94:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ce98:	4313      	orrs	r3, r2
 800ce9a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800ce9e:	6878      	ldr	r0, [r7, #4]
 800cea0:	f7ff fc33 	bl	800c70a <VL53L0X_device_read_strobe>
 800cea4:	4603      	mov	r3, r0
 800cea6:	461a      	mov	r2, r3
 800cea8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ceac:	4313      	orrs	r3, r2
 800ceae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800ceb2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ceb6:	461a      	mov	r2, r3
 800ceb8:	2190      	movs	r1, #144	; 0x90
 800ceba:	6878      	ldr	r0, [r7, #4]
 800cebc:	f002 f808 	bl	800eed0 <VL53L0X_RdDWord>
 800cec0:	4603      	mov	r3, r0
 800cec2:	461a      	mov	r2, r3
 800cec4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cec8:	4313      	orrs	r3, r2
 800ceca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 800cece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ced0:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 800ced2:	b29b      	uxth	r3, r3
 800ced4:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 800ced6:	2276      	movs	r2, #118	; 0x76
 800ced8:	2194      	movs	r1, #148	; 0x94
 800ceda:	6878      	ldr	r0, [r7, #4]
 800cedc:	f001 ff14 	bl	800ed08 <VL53L0X_WrByte>
 800cee0:	4603      	mov	r3, r0
 800cee2:	461a      	mov	r2, r3
 800cee4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cee8:	4313      	orrs	r3, r2
 800ceea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800ceee:	6878      	ldr	r0, [r7, #4]
 800cef0:	f7ff fc0b 	bl	800c70a <VL53L0X_device_read_strobe>
 800cef4:	4603      	mov	r3, r0
 800cef6:	461a      	mov	r2, r3
 800cef8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cefc:	4313      	orrs	r3, r2
 800cefe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800cf02:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cf06:	461a      	mov	r2, r3
 800cf08:	2190      	movs	r1, #144	; 0x90
 800cf0a:	6878      	ldr	r0, [r7, #4]
 800cf0c:	f001 ffe0 	bl	800eed0 <VL53L0X_RdDWord>
 800cf10:	4603      	mov	r3, r0
 800cf12:	461a      	mov	r2, r3
 800cf14:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cf18:	4313      	orrs	r3, r2
 800cf1a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 800cf1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf20:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 800cf22:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cf24:	4313      	orrs	r3, r2
 800cf26:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 800cf28:	2200      	movs	r2, #0
 800cf2a:	2181      	movs	r1, #129	; 0x81
 800cf2c:	6878      	ldr	r0, [r7, #4]
 800cf2e:	f001 feeb 	bl	800ed08 <VL53L0X_WrByte>
 800cf32:	4603      	mov	r3, r0
 800cf34:	461a      	mov	r2, r3
 800cf36:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cf3a:	4313      	orrs	r3, r2
 800cf3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800cf40:	2206      	movs	r2, #6
 800cf42:	21ff      	movs	r1, #255	; 0xff
 800cf44:	6878      	ldr	r0, [r7, #4]
 800cf46:	f001 fedf 	bl	800ed08 <VL53L0X_WrByte>
 800cf4a:	4603      	mov	r3, r0
 800cf4c:	461a      	mov	r2, r3
 800cf4e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cf52:	4313      	orrs	r3, r2
 800cf54:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800cf58:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800cf5c:	461a      	mov	r2, r3
 800cf5e:	2183      	movs	r1, #131	; 0x83
 800cf60:	6878      	ldr	r0, [r7, #4]
 800cf62:	f001 ff53 	bl	800ee0c <VL53L0X_RdByte>
 800cf66:	4603      	mov	r3, r0
 800cf68:	461a      	mov	r2, r3
 800cf6a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cf6e:	4313      	orrs	r3, r2
 800cf70:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 800cf74:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cf78:	f023 0304 	bic.w	r3, r3, #4
 800cf7c:	b2db      	uxtb	r3, r3
 800cf7e:	461a      	mov	r2, r3
 800cf80:	2183      	movs	r1, #131	; 0x83
 800cf82:	6878      	ldr	r0, [r7, #4]
 800cf84:	f001 fec0 	bl	800ed08 <VL53L0X_WrByte>
 800cf88:	4603      	mov	r3, r0
 800cf8a:	461a      	mov	r2, r3
 800cf8c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cf90:	4313      	orrs	r3, r2
 800cf92:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800cf96:	2201      	movs	r2, #1
 800cf98:	21ff      	movs	r1, #255	; 0xff
 800cf9a:	6878      	ldr	r0, [r7, #4]
 800cf9c:	f001 feb4 	bl	800ed08 <VL53L0X_WrByte>
 800cfa0:	4603      	mov	r3, r0
 800cfa2:	461a      	mov	r2, r3
 800cfa4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cfa8:	4313      	orrs	r3, r2
 800cfaa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800cfae:	2201      	movs	r2, #1
 800cfb0:	2100      	movs	r1, #0
 800cfb2:	6878      	ldr	r0, [r7, #4]
 800cfb4:	f001 fea8 	bl	800ed08 <VL53L0X_WrByte>
 800cfb8:	4603      	mov	r3, r0
 800cfba:	461a      	mov	r2, r3
 800cfbc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cfc0:	4313      	orrs	r3, r2
 800cfc2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800cfc6:	2200      	movs	r2, #0
 800cfc8:	21ff      	movs	r1, #255	; 0xff
 800cfca:	6878      	ldr	r0, [r7, #4]
 800cfcc:	f001 fe9c 	bl	800ed08 <VL53L0X_WrByte>
 800cfd0:	4603      	mov	r3, r0
 800cfd2:	461a      	mov	r2, r3
 800cfd4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cfd8:	4313      	orrs	r3, r2
 800cfda:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800cfde:	2200      	movs	r2, #0
 800cfe0:	2180      	movs	r1, #128	; 0x80
 800cfe2:	6878      	ldr	r0, [r7, #4]
 800cfe4:	f001 fe90 	bl	800ed08 <VL53L0X_WrByte>
 800cfe8:	4603      	mov	r3, r0
 800cfea:	461a      	mov	r2, r3
 800cfec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cff0:	4313      	orrs	r3, r2
 800cff2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800cff6:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	f040 808f 	bne.w	800d11e <VL53L0X_get_info_from_device+0x98e>
 800d000:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d004:	2b07      	cmp	r3, #7
 800d006:	f000 808a 	beq.w	800d11e <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 800d00a:	78fb      	ldrb	r3, [r7, #3]
 800d00c:	f003 0301 	and.w	r3, r3, #1
 800d010:	2b00      	cmp	r3, #0
 800d012:	d024      	beq.n	800d05e <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800d014:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d018:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d11e      	bne.n	800d05e <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800d026:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 800d030:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800d034:	2300      	movs	r3, #0
 800d036:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d038:	e00e      	b.n	800d058 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 800d03a:	f107 0208 	add.w	r2, r7, #8
 800d03e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d040:	4413      	add	r3, r2
 800d042:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 800d044:	687a      	ldr	r2, [r7, #4]
 800d046:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d048:	4413      	add	r3, r2
 800d04a:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800d04e:	460a      	mov	r2, r1
 800d050:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800d052:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d054:	3301      	adds	r3, #1
 800d056:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d058:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d05a:	2b05      	cmp	r3, #5
 800d05c:	dded      	ble.n	800d03a <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 800d05e:	78fb      	ldrb	r3, [r7, #3]
 800d060:	f003 0302 	and.w	r3, r3, #2
 800d064:	2b00      	cmp	r3, #0
 800d066:	d018      	beq.n	800d09a <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800d068:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d06c:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800d070:	2b00      	cmp	r3, #0
 800d072:	d112      	bne.n	800d09a <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d074:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d07e:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	33f3      	adds	r3, #243	; 0xf3
 800d08c:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 800d08e:	f107 0310 	add.w	r3, r7, #16
 800d092:	4619      	mov	r1, r3
 800d094:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d096:	f006 fbb0 	bl	80137fa <strcpy>

		}

		if (((option & 4) == 4) &&
 800d09a:	78fb      	ldrb	r3, [r7, #3]
 800d09c:	f003 0304 	and.w	r3, r3, #4
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d030      	beq.n	800d106 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800d0a4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d0a8:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d12a      	bne.n	800d106 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d0b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d0b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 800d0c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d0c2:	025b      	lsls	r3, r3, #9
 800d0c4:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d0ca:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 800d0d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d011      	beq.n	800d0fe <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 800d0da:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d0dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d0de:	1ad3      	subs	r3, r2, r3
 800d0e0:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 800d0e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d0e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d0e8:	fb02 f303 	mul.w	r3, r2, r3
 800d0ec:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 800d0ee:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 800d0f2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800d0f6:	425b      	negs	r3, r3
 800d0f8:	b29b      	uxth	r3, r3
 800d0fa:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 800d0fe:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 800d106:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800d10a:	78fb      	ldrb	r3, [r7, #3]
 800d10c:	4313      	orrs	r3, r2
 800d10e:	b2db      	uxtb	r3, r3
 800d110:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 800d114:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800d11e:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 800d122:	4618      	mov	r0, r3
 800d124:	3760      	adds	r7, #96	; 0x60
 800d126:	46bd      	mov	sp, r7
 800d128:	bd80      	pop	{r7, pc}

0800d12a <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 800d12a:	b480      	push	{r7}
 800d12c:	b087      	sub	sp, #28
 800d12e:	af00      	add	r7, sp, #0
 800d130:	6078      	str	r0, [r7, #4]
 800d132:	460b      	mov	r3, r1
 800d134:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 800d136:	f240 6277 	movw	r2, #1655	; 0x677
 800d13a:	f04f 0300 	mov.w	r3, #0
 800d13e:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 800d142:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800d146:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 800d148:	78fb      	ldrb	r3, [r7, #3]
 800d14a:	68fa      	ldr	r2, [r7, #12]
 800d14c:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 800d150:	693a      	ldr	r2, [r7, #16]
 800d152:	fb02 f303 	mul.w	r3, r2, r3
 800d156:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 800d158:	68bb      	ldr	r3, [r7, #8]
}
 800d15a:	4618      	mov	r0, r3
 800d15c:	371c      	adds	r7, #28
 800d15e:	46bd      	mov	sp, r7
 800d160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d164:	4770      	bx	lr

0800d166 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 800d166:	b480      	push	{r7}
 800d168:	b087      	sub	sp, #28
 800d16a:	af00      	add	r7, sp, #0
 800d16c:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800d16e:	2300      	movs	r3, #0
 800d170:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800d172:	2300      	movs	r3, #0
 800d174:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800d176:	2300      	movs	r3, #0
 800d178:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d017      	beq.n	800d1b0 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	3b01      	subs	r3, #1
 800d184:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800d186:	e005      	b.n	800d194 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800d188:	693b      	ldr	r3, [r7, #16]
 800d18a:	085b      	lsrs	r3, r3, #1
 800d18c:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800d18e:	89fb      	ldrh	r3, [r7, #14]
 800d190:	3301      	adds	r3, #1
 800d192:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800d194:	693b      	ldr	r3, [r7, #16]
 800d196:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d1f4      	bne.n	800d188 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800d19e:	89fb      	ldrh	r3, [r7, #14]
 800d1a0:	021b      	lsls	r3, r3, #8
 800d1a2:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800d1a4:	693b      	ldr	r3, [r7, #16]
 800d1a6:	b29b      	uxth	r3, r3
 800d1a8:	b2db      	uxtb	r3, r3
 800d1aa:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800d1ac:	4413      	add	r3, r2
 800d1ae:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800d1b0:	8afb      	ldrh	r3, [r7, #22]

}
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	371c      	adds	r7, #28
 800d1b6:	46bd      	mov	sp, r7
 800d1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1bc:	4770      	bx	lr

0800d1be <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 800d1be:	b480      	push	{r7}
 800d1c0:	b085      	sub	sp, #20
 800d1c2:	af00      	add	r7, sp, #0
 800d1c4:	4603      	mov	r3, r0
 800d1c6:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800d1c8:	2300      	movs	r3, #0
 800d1ca:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800d1cc:	88fb      	ldrh	r3, [r7, #6]
 800d1ce:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800d1d0:	88fa      	ldrh	r2, [r7, #6]
 800d1d2:	0a12      	lsrs	r2, r2, #8
 800d1d4:	b292      	uxth	r2, r2
 800d1d6:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800d1d8:	3301      	adds	r3, #1
 800d1da:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800d1dc:	68fb      	ldr	r3, [r7, #12]
}
 800d1de:	4618      	mov	r0, r3
 800d1e0:	3714      	adds	r7, #20
 800d1e2:	46bd      	mov	sp, r7
 800d1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e8:	4770      	bx	lr
	...

0800d1ec <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 800d1ec:	b580      	push	{r7, lr}
 800d1ee:	b088      	sub	sp, #32
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	60f8      	str	r0, [r7, #12]
 800d1f4:	60b9      	str	r1, [r7, #8]
 800d1f6:	4613      	mov	r3, r2
 800d1f8:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800d1fa:	2300      	movs	r3, #0
 800d1fc:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800d1fe:	79fb      	ldrb	r3, [r7, #7]
 800d200:	4619      	mov	r1, r3
 800d202:	68f8      	ldr	r0, [r7, #12]
 800d204:	f7ff ff91 	bl	800d12a <VL53L0X_calc_macro_period_ps>
 800d208:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800d20a:	69bb      	ldr	r3, [r7, #24]
 800d20c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800d210:	4a0a      	ldr	r2, [pc, #40]	; (800d23c <VL53L0X_calc_timeout_mclks+0x50>)
 800d212:	fba2 2303 	umull	r2, r3, r2, r3
 800d216:	099b      	lsrs	r3, r3, #6
 800d218:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 800d21a:	68bb      	ldr	r3, [r7, #8]
 800d21c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d220:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 800d224:	697b      	ldr	r3, [r7, #20]
 800d226:	085b      	lsrs	r3, r3, #1
 800d228:	441a      	add	r2, r3
	timeout_period_mclks =
 800d22a:	697b      	ldr	r3, [r7, #20]
 800d22c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d230:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 800d232:	69fb      	ldr	r3, [r7, #28]
}
 800d234:	4618      	mov	r0, r3
 800d236:	3720      	adds	r7, #32
 800d238:	46bd      	mov	sp, r7
 800d23a:	bd80      	pop	{r7, pc}
 800d23c:	10624dd3 	.word	0x10624dd3

0800d240 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 800d240:	b580      	push	{r7, lr}
 800d242:	b086      	sub	sp, #24
 800d244:	af00      	add	r7, sp, #0
 800d246:	6078      	str	r0, [r7, #4]
 800d248:	460b      	mov	r3, r1
 800d24a:	807b      	strh	r3, [r7, #2]
 800d24c:	4613      	mov	r3, r2
 800d24e:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 800d250:	2300      	movs	r3, #0
 800d252:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800d254:	787b      	ldrb	r3, [r7, #1]
 800d256:	4619      	mov	r1, r3
 800d258:	6878      	ldr	r0, [r7, #4]
 800d25a:	f7ff ff66 	bl	800d12a <VL53L0X_calc_macro_period_ps>
 800d25e:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800d260:	693b      	ldr	r3, [r7, #16]
 800d262:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800d266:	4a0a      	ldr	r2, [pc, #40]	; (800d290 <VL53L0X_calc_timeout_us+0x50>)
 800d268:	fba2 2303 	umull	r2, r3, r2, r3
 800d26c:	099b      	lsrs	r3, r3, #6
 800d26e:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 800d270:	887b      	ldrh	r3, [r7, #2]
 800d272:	68fa      	ldr	r2, [r7, #12]
 800d274:	fb02 f303 	mul.w	r3, r2, r3
 800d278:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 800d27c:	4a04      	ldr	r2, [pc, #16]	; (800d290 <VL53L0X_calc_timeout_us+0x50>)
 800d27e:	fba2 2303 	umull	r2, r3, r2, r3
 800d282:	099b      	lsrs	r3, r3, #6
 800d284:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 800d286:	697b      	ldr	r3, [r7, #20]
}
 800d288:	4618      	mov	r0, r3
 800d28a:	3718      	adds	r7, #24
 800d28c:	46bd      	mov	sp, r7
 800d28e:	bd80      	pop	{r7, pc}
 800d290:	10624dd3 	.word	0x10624dd3

0800d294 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 800d294:	b580      	push	{r7, lr}
 800d296:	b08c      	sub	sp, #48	; 0x30
 800d298:	af00      	add	r7, sp, #0
 800d29a:	60f8      	str	r0, [r7, #12]
 800d29c:	460b      	mov	r3, r1
 800d29e:	607a      	str	r2, [r7, #4]
 800d2a0:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 800d2a8:	2300      	movs	r3, #0
 800d2aa:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 800d2ae:	2300      	movs	r3, #0
 800d2b0:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 800d2b6:	2300      	movs	r3, #0
 800d2b8:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800d2ba:	7afb      	ldrb	r3, [r7, #11]
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d005      	beq.n	800d2cc <get_sequence_step_timeout+0x38>
 800d2c0:	7afb      	ldrb	r3, [r7, #11]
 800d2c2:	2b01      	cmp	r3, #1
 800d2c4:	d002      	beq.n	800d2cc <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800d2c6:	7afb      	ldrb	r3, [r7, #11]
 800d2c8:	2b02      	cmp	r3, #2
 800d2ca:	d128      	bne.n	800d31e <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800d2cc:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800d2d0:	461a      	mov	r2, r3
 800d2d2:	2100      	movs	r1, #0
 800d2d4:	68f8      	ldr	r0, [r7, #12]
 800d2d6:	f7fd f9f9 	bl	800a6cc <VL53L0X_GetVcselPulsePeriod>
 800d2da:	4603      	mov	r3, r0
 800d2dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 800d2e0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d109      	bne.n	800d2fc <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 800d2e8:	f107 0320 	add.w	r3, r7, #32
 800d2ec:	461a      	mov	r2, r3
 800d2ee:	2146      	movs	r1, #70	; 0x46
 800d2f0:	68f8      	ldr	r0, [r7, #12]
 800d2f2:	f001 fd8b 	bl	800ee0c <VL53L0X_RdByte>
 800d2f6:	4603      	mov	r3, r0
 800d2f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 800d2fc:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d300:	b29b      	uxth	r3, r3
 800d302:	4618      	mov	r0, r3
 800d304:	f7ff ff5b 	bl	800d1be <VL53L0X_decode_timeout>
 800d308:	4603      	mov	r3, r0
 800d30a:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800d30c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800d310:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d312:	4619      	mov	r1, r3
 800d314:	68f8      	ldr	r0, [r7, #12]
 800d316:	f7ff ff93 	bl	800d240 <VL53L0X_calc_timeout_us>
 800d31a:	62b8      	str	r0, [r7, #40]	; 0x28
 800d31c:	e092      	b.n	800d444 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800d31e:	7afb      	ldrb	r3, [r7, #11]
 800d320:	2b03      	cmp	r3, #3
 800d322:	d135      	bne.n	800d390 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800d324:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800d328:	461a      	mov	r2, r3
 800d32a:	2100      	movs	r1, #0
 800d32c:	68f8      	ldr	r0, [r7, #12]
 800d32e:	f7fd f9cd 	bl	800a6cc <VL53L0X_GetVcselPulsePeriod>
 800d332:	4603      	mov	r3, r0
 800d334:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800d338:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	f040 8081 	bne.w	800d444 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800d342:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800d346:	461a      	mov	r2, r3
 800d348:	2100      	movs	r1, #0
 800d34a:	68f8      	ldr	r0, [r7, #12]
 800d34c:	f7fd f9be 	bl	800a6cc <VL53L0X_GetVcselPulsePeriod>
 800d350:	4603      	mov	r3, r0
 800d352:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 800d356:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d109      	bne.n	800d372 <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 800d35e:	f107 031e 	add.w	r3, r7, #30
 800d362:	461a      	mov	r2, r3
 800d364:	2151      	movs	r1, #81	; 0x51
 800d366:	68f8      	ldr	r0, [r7, #12]
 800d368:	f001 fd7a 	bl	800ee60 <VL53L0X_RdWord>
 800d36c:	4603      	mov	r3, r0
 800d36e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800d372:	8bfb      	ldrh	r3, [r7, #30]
 800d374:	4618      	mov	r0, r3
 800d376:	f7ff ff22 	bl	800d1be <VL53L0X_decode_timeout>
 800d37a:	4603      	mov	r3, r0
 800d37c:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800d37e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800d382:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d384:	4619      	mov	r1, r3
 800d386:	68f8      	ldr	r0, [r7, #12]
 800d388:	f7ff ff5a 	bl	800d240 <VL53L0X_calc_timeout_us>
 800d38c:	62b8      	str	r0, [r7, #40]	; 0x28
 800d38e:	e059      	b.n	800d444 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800d390:	7afb      	ldrb	r3, [r7, #11]
 800d392:	2b04      	cmp	r3, #4
 800d394:	d156      	bne.n	800d444 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800d396:	f107 0314 	add.w	r3, r7, #20
 800d39a:	4619      	mov	r1, r3
 800d39c:	68f8      	ldr	r0, [r7, #12]
 800d39e:	f7fd faa1 	bl	800a8e4 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 800d3a2:	2300      	movs	r3, #0
 800d3a4:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 800d3a6:	7dfb      	ldrb	r3, [r7, #23]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d01d      	beq.n	800d3e8 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800d3ac:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800d3b0:	461a      	mov	r2, r3
 800d3b2:	2100      	movs	r1, #0
 800d3b4:	68f8      	ldr	r0, [r7, #12]
 800d3b6:	f7fd f989 	bl	800a6cc <VL53L0X_GetVcselPulsePeriod>
 800d3ba:	4603      	mov	r3, r0
 800d3bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 800d3c0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d10f      	bne.n	800d3e8 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 800d3c8:	f107 031e 	add.w	r3, r7, #30
 800d3cc:	461a      	mov	r2, r3
 800d3ce:	2151      	movs	r1, #81	; 0x51
 800d3d0:	68f8      	ldr	r0, [r7, #12]
 800d3d2:	f001 fd45 	bl	800ee60 <VL53L0X_RdWord>
 800d3d6:	4603      	mov	r3, r0
 800d3d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800d3dc:	8bfb      	ldrh	r3, [r7, #30]
 800d3de:	4618      	mov	r0, r3
 800d3e0:	f7ff feed 	bl	800d1be <VL53L0X_decode_timeout>
 800d3e4:	4603      	mov	r3, r0
 800d3e6:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800d3e8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d109      	bne.n	800d404 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800d3f0:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800d3f4:	461a      	mov	r2, r3
 800d3f6:	2101      	movs	r1, #1
 800d3f8:	68f8      	ldr	r0, [r7, #12]
 800d3fa:	f7fd f967 	bl	800a6cc <VL53L0X_GetVcselPulsePeriod>
 800d3fe:	4603      	mov	r3, r0
 800d400:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800d404:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d10f      	bne.n	800d42c <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 800d40c:	f107 031c 	add.w	r3, r7, #28
 800d410:	461a      	mov	r2, r3
 800d412:	2171      	movs	r1, #113	; 0x71
 800d414:	68f8      	ldr	r0, [r7, #12]
 800d416:	f001 fd23 	bl	800ee60 <VL53L0X_RdWord>
 800d41a:	4603      	mov	r3, r0
 800d41c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 800d420:	8bbb      	ldrh	r3, [r7, #28]
 800d422:	4618      	mov	r0, r3
 800d424:	f7ff fecb 	bl	800d1be <VL53L0X_decode_timeout>
 800d428:	4603      	mov	r3, r0
 800d42a:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 800d42c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d42e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d430:	1ad3      	subs	r3, r2, r3
 800d432:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800d434:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800d438:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d43a:	4619      	mov	r1, r3
 800d43c:	68f8      	ldr	r0, [r7, #12]
 800d43e:	f7ff feff 	bl	800d240 <VL53L0X_calc_timeout_us>
 800d442:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d448:	601a      	str	r2, [r3, #0]

	return Status;
 800d44a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800d44e:	4618      	mov	r0, r3
 800d450:	3730      	adds	r7, #48	; 0x30
 800d452:	46bd      	mov	sp, r7
 800d454:	bd80      	pop	{r7, pc}

0800d456 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 800d456:	b580      	push	{r7, lr}
 800d458:	b08a      	sub	sp, #40	; 0x28
 800d45a:	af00      	add	r7, sp, #0
 800d45c:	60f8      	str	r0, [r7, #12]
 800d45e:	460b      	mov	r3, r1
 800d460:	607a      	str	r2, [r7, #4]
 800d462:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d464:	2300      	movs	r3, #0
 800d466:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800d46a:	7afb      	ldrb	r3, [r7, #11]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d005      	beq.n	800d47c <set_sequence_step_timeout+0x26>
 800d470:	7afb      	ldrb	r3, [r7, #11]
 800d472:	2b01      	cmp	r3, #1
 800d474:	d002      	beq.n	800d47c <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800d476:	7afb      	ldrb	r3, [r7, #11]
 800d478:	2b02      	cmp	r3, #2
 800d47a:	d138      	bne.n	800d4ee <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800d47c:	f107 031b 	add.w	r3, r7, #27
 800d480:	461a      	mov	r2, r3
 800d482:	2100      	movs	r1, #0
 800d484:	68f8      	ldr	r0, [r7, #12]
 800d486:	f7fd f921 	bl	800a6cc <VL53L0X_GetVcselPulsePeriod>
 800d48a:	4603      	mov	r3, r0
 800d48c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 800d490:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d494:	2b00      	cmp	r3, #0
 800d496:	d11a      	bne.n	800d4ce <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 800d498:	7efb      	ldrb	r3, [r7, #27]
 800d49a:	461a      	mov	r2, r3
 800d49c:	6879      	ldr	r1, [r7, #4]
 800d49e:	68f8      	ldr	r0, [r7, #12]
 800d4a0:	f7ff fea4 	bl	800d1ec <VL53L0X_calc_timeout_mclks>
 800d4a4:	4603      	mov	r3, r0
 800d4a6:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 800d4a8:	8bbb      	ldrh	r3, [r7, #28]
 800d4aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d4ae:	d903      	bls.n	800d4b8 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 800d4b0:	23ff      	movs	r3, #255	; 0xff
 800d4b2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d4b6:	e004      	b.n	800d4c2 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 800d4b8:	8bbb      	ldrh	r3, [r7, #28]
 800d4ba:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 800d4bc:	3b01      	subs	r3, #1
 800d4be:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d4c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d4c6:	b29a      	uxth	r2, r3
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800d4ce:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	f040 80ab 	bne.w	800d62e <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 800d4d8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d4dc:	461a      	mov	r2, r3
 800d4de:	2146      	movs	r1, #70	; 0x46
 800d4e0:	68f8      	ldr	r0, [r7, #12]
 800d4e2:	f001 fc11 	bl	800ed08 <VL53L0X_WrByte>
 800d4e6:	4603      	mov	r3, r0
 800d4e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 800d4ec:	e09f      	b.n	800d62e <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800d4ee:	7afb      	ldrb	r3, [r7, #11]
 800d4f0:	2b03      	cmp	r3, #3
 800d4f2:	d135      	bne.n	800d560 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 800d4f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d11b      	bne.n	800d534 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800d4fc:	f107 031b 	add.w	r3, r7, #27
 800d500:	461a      	mov	r2, r3
 800d502:	2100      	movs	r1, #0
 800d504:	68f8      	ldr	r0, [r7, #12]
 800d506:	f7fd f8e1 	bl	800a6cc <VL53L0X_GetVcselPulsePeriod>
 800d50a:	4603      	mov	r3, r0
 800d50c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800d510:	7efb      	ldrb	r3, [r7, #27]
 800d512:	461a      	mov	r2, r3
 800d514:	6879      	ldr	r1, [r7, #4]
 800d516:	68f8      	ldr	r0, [r7, #12]
 800d518:	f7ff fe68 	bl	800d1ec <VL53L0X_calc_timeout_mclks>
 800d51c:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 800d51e:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 800d520:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d522:	4618      	mov	r0, r3
 800d524:	f7ff fe1f 	bl	800d166 <VL53L0X_encode_timeout>
 800d528:	4603      	mov	r3, r0
 800d52a:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d52c:	8b3a      	ldrh	r2, [r7, #24]
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800d534:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d108      	bne.n	800d54e <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 800d53c:	8b3b      	ldrh	r3, [r7, #24]
 800d53e:	461a      	mov	r2, r3
 800d540:	2151      	movs	r1, #81	; 0x51
 800d542:	68f8      	ldr	r0, [r7, #12]
 800d544:	f001 fc04 	bl	800ed50 <VL53L0X_WrWord>
 800d548:	4603      	mov	r3, r0
 800d54a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800d54e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d552:	2b00      	cmp	r3, #0
 800d554:	d16b      	bne.n	800d62e <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	687a      	ldr	r2, [r7, #4]
 800d55a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800d55e:	e066      	b.n	800d62e <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800d560:	7afb      	ldrb	r3, [r7, #11]
 800d562:	2b04      	cmp	r3, #4
 800d564:	d160      	bne.n	800d628 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800d566:	f107 0310 	add.w	r3, r7, #16
 800d56a:	4619      	mov	r1, r3
 800d56c:	68f8      	ldr	r0, [r7, #12]
 800d56e:	f7fd f9b9 	bl	800a8e4 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800d572:	2300      	movs	r3, #0
 800d574:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800d576:	7cfb      	ldrb	r3, [r7, #19]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d01d      	beq.n	800d5b8 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800d57c:	f107 031b 	add.w	r3, r7, #27
 800d580:	461a      	mov	r2, r3
 800d582:	2100      	movs	r1, #0
 800d584:	68f8      	ldr	r0, [r7, #12]
 800d586:	f7fd f8a1 	bl	800a6cc <VL53L0X_GetVcselPulsePeriod>
 800d58a:	4603      	mov	r3, r0
 800d58c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 800d590:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d594:	2b00      	cmp	r3, #0
 800d596:	d10f      	bne.n	800d5b8 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 800d598:	f107 0318 	add.w	r3, r7, #24
 800d59c:	461a      	mov	r2, r3
 800d59e:	2151      	movs	r1, #81	; 0x51
 800d5a0:	68f8      	ldr	r0, [r7, #12]
 800d5a2:	f001 fc5d 	bl	800ee60 <VL53L0X_RdWord>
 800d5a6:	4603      	mov	r3, r0
 800d5a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 800d5ac:	8b3b      	ldrh	r3, [r7, #24]
 800d5ae:	4618      	mov	r0, r3
 800d5b0:	f7ff fe05 	bl	800d1be <VL53L0X_decode_timeout>
 800d5b4:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800d5b6:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800d5b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d109      	bne.n	800d5d4 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800d5c0:	f107 031b 	add.w	r3, r7, #27
 800d5c4:	461a      	mov	r2, r3
 800d5c6:	2101      	movs	r1, #1
 800d5c8:	68f8      	ldr	r0, [r7, #12]
 800d5ca:	f7fd f87f 	bl	800a6cc <VL53L0X_GetVcselPulsePeriod>
 800d5ce:	4603      	mov	r3, r0
 800d5d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800d5d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d128      	bne.n	800d62e <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800d5dc:	7efb      	ldrb	r3, [r7, #27]
 800d5de:	461a      	mov	r2, r3
 800d5e0:	6879      	ldr	r1, [r7, #4]
 800d5e2:	68f8      	ldr	r0, [r7, #12]
 800d5e4:	f7ff fe02 	bl	800d1ec <VL53L0X_calc_timeout_mclks>
 800d5e8:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800d5ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d5ec:	6a3a      	ldr	r2, [r7, #32]
 800d5ee:	4413      	add	r3, r2
 800d5f0:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800d5f2:	6a38      	ldr	r0, [r7, #32]
 800d5f4:	f7ff fdb7 	bl	800d166 <VL53L0X_encode_timeout>
 800d5f8:	4603      	mov	r3, r0
 800d5fa:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 800d5fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d600:	2b00      	cmp	r3, #0
 800d602:	d108      	bne.n	800d616 <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800d604:	8bfb      	ldrh	r3, [r7, #30]
 800d606:	461a      	mov	r2, r3
 800d608:	2171      	movs	r1, #113	; 0x71
 800d60a:	68f8      	ldr	r0, [r7, #12]
 800d60c:	f001 fba0 	bl	800ed50 <VL53L0X_WrWord>
 800d610:	4603      	mov	r3, r0
 800d612:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800d616:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d107      	bne.n	800d62e <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	687a      	ldr	r2, [r7, #4]
 800d622:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800d626:	e002      	b.n	800d62e <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800d628:	23fc      	movs	r3, #252	; 0xfc
 800d62a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 800d62e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d632:	4618      	mov	r0, r3
 800d634:	3728      	adds	r7, #40	; 0x28
 800d636:	46bd      	mov	sp, r7
 800d638:	bd80      	pop	{r7, pc}

0800d63a <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800d63a:	b580      	push	{r7, lr}
 800d63c:	b08a      	sub	sp, #40	; 0x28
 800d63e:	af00      	add	r7, sp, #0
 800d640:	6078      	str	r0, [r7, #4]
 800d642:	460b      	mov	r3, r1
 800d644:	70fb      	strb	r3, [r7, #3]
 800d646:	4613      	mov	r3, r2
 800d648:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d64a:	2300      	movs	r3, #0
 800d64c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 800d650:	230c      	movs	r3, #12
 800d652:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 800d656:	2312      	movs	r3, #18
 800d658:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 800d65c:	2308      	movs	r3, #8
 800d65e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 800d662:	230e      	movs	r3, #14
 800d664:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 800d668:	2300      	movs	r3, #0
 800d66a:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 800d66c:	78bb      	ldrb	r3, [r7, #2]
 800d66e:	f003 0301 	and.w	r3, r3, #1
 800d672:	b2db      	uxtb	r3, r3
 800d674:	2b00      	cmp	r3, #0
 800d676:	d003      	beq.n	800d680 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800d678:	23fc      	movs	r3, #252	; 0xfc
 800d67a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d67e:	e020      	b.n	800d6c2 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 800d680:	78fb      	ldrb	r3, [r7, #3]
 800d682:	2b00      	cmp	r3, #0
 800d684:	d10d      	bne.n	800d6a2 <VL53L0X_set_vcsel_pulse_period+0x68>
 800d686:	78ba      	ldrb	r2, [r7, #2]
 800d688:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d68c:	429a      	cmp	r2, r3
 800d68e:	d304      	bcc.n	800d69a <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 800d690:	78ba      	ldrb	r2, [r7, #2]
 800d692:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800d696:	429a      	cmp	r2, r3
 800d698:	d903      	bls.n	800d6a2 <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800d69a:	23fc      	movs	r3, #252	; 0xfc
 800d69c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d6a0:	e00f      	b.n	800d6c2 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 800d6a2:	78fb      	ldrb	r3, [r7, #3]
 800d6a4:	2b01      	cmp	r3, #1
 800d6a6:	d10c      	bne.n	800d6c2 <VL53L0X_set_vcsel_pulse_period+0x88>
 800d6a8:	78ba      	ldrb	r2, [r7, #2]
 800d6aa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d6ae:	429a      	cmp	r2, r3
 800d6b0:	d304      	bcc.n	800d6bc <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 800d6b2:	78ba      	ldrb	r2, [r7, #2]
 800d6b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d6b8:	429a      	cmp	r2, r3
 800d6ba:	d902      	bls.n	800d6c2 <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800d6bc:	23fc      	movs	r3, #252	; 0xfc
 800d6be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 800d6c2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d002      	beq.n	800d6d0 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 800d6ca:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d6ce:	e239      	b.n	800db44 <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 800d6d0:	78fb      	ldrb	r3, [r7, #3]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d150      	bne.n	800d778 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 800d6d6:	78bb      	ldrb	r3, [r7, #2]
 800d6d8:	2b0c      	cmp	r3, #12
 800d6da:	d110      	bne.n	800d6fe <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 800d6dc:	2218      	movs	r2, #24
 800d6de:	2157      	movs	r1, #87	; 0x57
 800d6e0:	6878      	ldr	r0, [r7, #4]
 800d6e2:	f001 fb11 	bl	800ed08 <VL53L0X_WrByte>
 800d6e6:	4603      	mov	r3, r0
 800d6e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 800d6ec:	2208      	movs	r2, #8
 800d6ee:	2156      	movs	r1, #86	; 0x56
 800d6f0:	6878      	ldr	r0, [r7, #4]
 800d6f2:	f001 fb09 	bl	800ed08 <VL53L0X_WrByte>
 800d6f6:	4603      	mov	r3, r0
 800d6f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d6fc:	e17f      	b.n	800d9fe <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 800d6fe:	78bb      	ldrb	r3, [r7, #2]
 800d700:	2b0e      	cmp	r3, #14
 800d702:	d110      	bne.n	800d726 <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 800d704:	2230      	movs	r2, #48	; 0x30
 800d706:	2157      	movs	r1, #87	; 0x57
 800d708:	6878      	ldr	r0, [r7, #4]
 800d70a:	f001 fafd 	bl	800ed08 <VL53L0X_WrByte>
 800d70e:	4603      	mov	r3, r0
 800d710:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 800d714:	2208      	movs	r2, #8
 800d716:	2156      	movs	r1, #86	; 0x56
 800d718:	6878      	ldr	r0, [r7, #4]
 800d71a:	f001 faf5 	bl	800ed08 <VL53L0X_WrByte>
 800d71e:	4603      	mov	r3, r0
 800d720:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d724:	e16b      	b.n	800d9fe <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 800d726:	78bb      	ldrb	r3, [r7, #2]
 800d728:	2b10      	cmp	r3, #16
 800d72a:	d110      	bne.n	800d74e <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 800d72c:	2240      	movs	r2, #64	; 0x40
 800d72e:	2157      	movs	r1, #87	; 0x57
 800d730:	6878      	ldr	r0, [r7, #4]
 800d732:	f001 fae9 	bl	800ed08 <VL53L0X_WrByte>
 800d736:	4603      	mov	r3, r0
 800d738:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 800d73c:	2208      	movs	r2, #8
 800d73e:	2156      	movs	r1, #86	; 0x56
 800d740:	6878      	ldr	r0, [r7, #4]
 800d742:	f001 fae1 	bl	800ed08 <VL53L0X_WrByte>
 800d746:	4603      	mov	r3, r0
 800d748:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d74c:	e157      	b.n	800d9fe <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 800d74e:	78bb      	ldrb	r3, [r7, #2]
 800d750:	2b12      	cmp	r3, #18
 800d752:	f040 8154 	bne.w	800d9fe <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800d756:	2250      	movs	r2, #80	; 0x50
 800d758:	2157      	movs	r1, #87	; 0x57
 800d75a:	6878      	ldr	r0, [r7, #4]
 800d75c:	f001 fad4 	bl	800ed08 <VL53L0X_WrByte>
 800d760:	4603      	mov	r3, r0
 800d762:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 800d766:	2208      	movs	r2, #8
 800d768:	2156      	movs	r1, #86	; 0x56
 800d76a:	6878      	ldr	r0, [r7, #4]
 800d76c:	f001 facc 	bl	800ed08 <VL53L0X_WrByte>
 800d770:	4603      	mov	r3, r0
 800d772:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d776:	e142      	b.n	800d9fe <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 800d778:	78fb      	ldrb	r3, [r7, #3]
 800d77a:	2b01      	cmp	r3, #1
 800d77c:	f040 813f 	bne.w	800d9fe <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 800d780:	78bb      	ldrb	r3, [r7, #2]
 800d782:	2b08      	cmp	r3, #8
 800d784:	d14c      	bne.n	800d820 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 800d786:	2210      	movs	r2, #16
 800d788:	2148      	movs	r1, #72	; 0x48
 800d78a:	6878      	ldr	r0, [r7, #4]
 800d78c:	f001 fabc 	bl	800ed08 <VL53L0X_WrByte>
 800d790:	4603      	mov	r3, r0
 800d792:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 800d796:	2208      	movs	r2, #8
 800d798:	2147      	movs	r1, #71	; 0x47
 800d79a:	6878      	ldr	r0, [r7, #4]
 800d79c:	f001 fab4 	bl	800ed08 <VL53L0X_WrByte>
 800d7a0:	4603      	mov	r3, r0
 800d7a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800d7a6:	2202      	movs	r2, #2
 800d7a8:	2132      	movs	r1, #50	; 0x32
 800d7aa:	6878      	ldr	r0, [r7, #4]
 800d7ac:	f001 faac 	bl	800ed08 <VL53L0X_WrByte>
 800d7b0:	4603      	mov	r3, r0
 800d7b2:	461a      	mov	r2, r3
 800d7b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d7b8:	4313      	orrs	r3, r2
 800d7ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 800d7be:	220c      	movs	r2, #12
 800d7c0:	2130      	movs	r1, #48	; 0x30
 800d7c2:	6878      	ldr	r0, [r7, #4]
 800d7c4:	f001 faa0 	bl	800ed08 <VL53L0X_WrByte>
 800d7c8:	4603      	mov	r3, r0
 800d7ca:	461a      	mov	r2, r3
 800d7cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d7d0:	4313      	orrs	r3, r2
 800d7d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800d7d6:	2201      	movs	r2, #1
 800d7d8:	21ff      	movs	r1, #255	; 0xff
 800d7da:	6878      	ldr	r0, [r7, #4]
 800d7dc:	f001 fa94 	bl	800ed08 <VL53L0X_WrByte>
 800d7e0:	4603      	mov	r3, r0
 800d7e2:	461a      	mov	r2, r3
 800d7e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d7e8:	4313      	orrs	r3, r2
 800d7ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800d7ee:	2230      	movs	r2, #48	; 0x30
 800d7f0:	2130      	movs	r1, #48	; 0x30
 800d7f2:	6878      	ldr	r0, [r7, #4]
 800d7f4:	f001 fa88 	bl	800ed08 <VL53L0X_WrByte>
 800d7f8:	4603      	mov	r3, r0
 800d7fa:	461a      	mov	r2, r3
 800d7fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d800:	4313      	orrs	r3, r2
 800d802:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800d806:	2200      	movs	r2, #0
 800d808:	21ff      	movs	r1, #255	; 0xff
 800d80a:	6878      	ldr	r0, [r7, #4]
 800d80c:	f001 fa7c 	bl	800ed08 <VL53L0X_WrByte>
 800d810:	4603      	mov	r3, r0
 800d812:	461a      	mov	r2, r3
 800d814:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d818:	4313      	orrs	r3, r2
 800d81a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d81e:	e0ee      	b.n	800d9fe <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 800d820:	78bb      	ldrb	r3, [r7, #2]
 800d822:	2b0a      	cmp	r3, #10
 800d824:	d14c      	bne.n	800d8c0 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 800d826:	2228      	movs	r2, #40	; 0x28
 800d828:	2148      	movs	r1, #72	; 0x48
 800d82a:	6878      	ldr	r0, [r7, #4]
 800d82c:	f001 fa6c 	bl	800ed08 <VL53L0X_WrByte>
 800d830:	4603      	mov	r3, r0
 800d832:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 800d836:	2208      	movs	r2, #8
 800d838:	2147      	movs	r1, #71	; 0x47
 800d83a:	6878      	ldr	r0, [r7, #4]
 800d83c:	f001 fa64 	bl	800ed08 <VL53L0X_WrByte>
 800d840:	4603      	mov	r3, r0
 800d842:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800d846:	2203      	movs	r2, #3
 800d848:	2132      	movs	r1, #50	; 0x32
 800d84a:	6878      	ldr	r0, [r7, #4]
 800d84c:	f001 fa5c 	bl	800ed08 <VL53L0X_WrByte>
 800d850:	4603      	mov	r3, r0
 800d852:	461a      	mov	r2, r3
 800d854:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d858:	4313      	orrs	r3, r2
 800d85a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800d85e:	2209      	movs	r2, #9
 800d860:	2130      	movs	r1, #48	; 0x30
 800d862:	6878      	ldr	r0, [r7, #4]
 800d864:	f001 fa50 	bl	800ed08 <VL53L0X_WrByte>
 800d868:	4603      	mov	r3, r0
 800d86a:	461a      	mov	r2, r3
 800d86c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d870:	4313      	orrs	r3, r2
 800d872:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800d876:	2201      	movs	r2, #1
 800d878:	21ff      	movs	r1, #255	; 0xff
 800d87a:	6878      	ldr	r0, [r7, #4]
 800d87c:	f001 fa44 	bl	800ed08 <VL53L0X_WrByte>
 800d880:	4603      	mov	r3, r0
 800d882:	461a      	mov	r2, r3
 800d884:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d888:	4313      	orrs	r3, r2
 800d88a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800d88e:	2220      	movs	r2, #32
 800d890:	2130      	movs	r1, #48	; 0x30
 800d892:	6878      	ldr	r0, [r7, #4]
 800d894:	f001 fa38 	bl	800ed08 <VL53L0X_WrByte>
 800d898:	4603      	mov	r3, r0
 800d89a:	461a      	mov	r2, r3
 800d89c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d8a0:	4313      	orrs	r3, r2
 800d8a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800d8a6:	2200      	movs	r2, #0
 800d8a8:	21ff      	movs	r1, #255	; 0xff
 800d8aa:	6878      	ldr	r0, [r7, #4]
 800d8ac:	f001 fa2c 	bl	800ed08 <VL53L0X_WrByte>
 800d8b0:	4603      	mov	r3, r0
 800d8b2:	461a      	mov	r2, r3
 800d8b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d8b8:	4313      	orrs	r3, r2
 800d8ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d8be:	e09e      	b.n	800d9fe <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 800d8c0:	78bb      	ldrb	r3, [r7, #2]
 800d8c2:	2b0c      	cmp	r3, #12
 800d8c4:	d14c      	bne.n	800d960 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 800d8c6:	2238      	movs	r2, #56	; 0x38
 800d8c8:	2148      	movs	r1, #72	; 0x48
 800d8ca:	6878      	ldr	r0, [r7, #4]
 800d8cc:	f001 fa1c 	bl	800ed08 <VL53L0X_WrByte>
 800d8d0:	4603      	mov	r3, r0
 800d8d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 800d8d6:	2208      	movs	r2, #8
 800d8d8:	2147      	movs	r1, #71	; 0x47
 800d8da:	6878      	ldr	r0, [r7, #4]
 800d8dc:	f001 fa14 	bl	800ed08 <VL53L0X_WrByte>
 800d8e0:	4603      	mov	r3, r0
 800d8e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800d8e6:	2203      	movs	r2, #3
 800d8e8:	2132      	movs	r1, #50	; 0x32
 800d8ea:	6878      	ldr	r0, [r7, #4]
 800d8ec:	f001 fa0c 	bl	800ed08 <VL53L0X_WrByte>
 800d8f0:	4603      	mov	r3, r0
 800d8f2:	461a      	mov	r2, r3
 800d8f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d8f8:	4313      	orrs	r3, r2
 800d8fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800d8fe:	2208      	movs	r2, #8
 800d900:	2130      	movs	r1, #48	; 0x30
 800d902:	6878      	ldr	r0, [r7, #4]
 800d904:	f001 fa00 	bl	800ed08 <VL53L0X_WrByte>
 800d908:	4603      	mov	r3, r0
 800d90a:	461a      	mov	r2, r3
 800d90c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d910:	4313      	orrs	r3, r2
 800d912:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800d916:	2201      	movs	r2, #1
 800d918:	21ff      	movs	r1, #255	; 0xff
 800d91a:	6878      	ldr	r0, [r7, #4]
 800d91c:	f001 f9f4 	bl	800ed08 <VL53L0X_WrByte>
 800d920:	4603      	mov	r3, r0
 800d922:	461a      	mov	r2, r3
 800d924:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d928:	4313      	orrs	r3, r2
 800d92a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800d92e:	2220      	movs	r2, #32
 800d930:	2130      	movs	r1, #48	; 0x30
 800d932:	6878      	ldr	r0, [r7, #4]
 800d934:	f001 f9e8 	bl	800ed08 <VL53L0X_WrByte>
 800d938:	4603      	mov	r3, r0
 800d93a:	461a      	mov	r2, r3
 800d93c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d940:	4313      	orrs	r3, r2
 800d942:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800d946:	2200      	movs	r2, #0
 800d948:	21ff      	movs	r1, #255	; 0xff
 800d94a:	6878      	ldr	r0, [r7, #4]
 800d94c:	f001 f9dc 	bl	800ed08 <VL53L0X_WrByte>
 800d950:	4603      	mov	r3, r0
 800d952:	461a      	mov	r2, r3
 800d954:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d958:	4313      	orrs	r3, r2
 800d95a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d95e:	e04e      	b.n	800d9fe <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 800d960:	78bb      	ldrb	r3, [r7, #2]
 800d962:	2b0e      	cmp	r3, #14
 800d964:	d14b      	bne.n	800d9fe <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800d966:	2248      	movs	r2, #72	; 0x48
 800d968:	2148      	movs	r1, #72	; 0x48
 800d96a:	6878      	ldr	r0, [r7, #4]
 800d96c:	f001 f9cc 	bl	800ed08 <VL53L0X_WrByte>
 800d970:	4603      	mov	r3, r0
 800d972:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 800d976:	2208      	movs	r2, #8
 800d978:	2147      	movs	r1, #71	; 0x47
 800d97a:	6878      	ldr	r0, [r7, #4]
 800d97c:	f001 f9c4 	bl	800ed08 <VL53L0X_WrByte>
 800d980:	4603      	mov	r3, r0
 800d982:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800d986:	2203      	movs	r2, #3
 800d988:	2132      	movs	r1, #50	; 0x32
 800d98a:	6878      	ldr	r0, [r7, #4]
 800d98c:	f001 f9bc 	bl	800ed08 <VL53L0X_WrByte>
 800d990:	4603      	mov	r3, r0
 800d992:	461a      	mov	r2, r3
 800d994:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d998:	4313      	orrs	r3, r2
 800d99a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800d99e:	2207      	movs	r2, #7
 800d9a0:	2130      	movs	r1, #48	; 0x30
 800d9a2:	6878      	ldr	r0, [r7, #4]
 800d9a4:	f001 f9b0 	bl	800ed08 <VL53L0X_WrByte>
 800d9a8:	4603      	mov	r3, r0
 800d9aa:	461a      	mov	r2, r3
 800d9ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d9b0:	4313      	orrs	r3, r2
 800d9b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800d9b6:	2201      	movs	r2, #1
 800d9b8:	21ff      	movs	r1, #255	; 0xff
 800d9ba:	6878      	ldr	r0, [r7, #4]
 800d9bc:	f001 f9a4 	bl	800ed08 <VL53L0X_WrByte>
 800d9c0:	4603      	mov	r3, r0
 800d9c2:	461a      	mov	r2, r3
 800d9c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d9c8:	4313      	orrs	r3, r2
 800d9ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800d9ce:	2220      	movs	r2, #32
 800d9d0:	2130      	movs	r1, #48	; 0x30
 800d9d2:	6878      	ldr	r0, [r7, #4]
 800d9d4:	f001 f998 	bl	800ed08 <VL53L0X_WrByte>
 800d9d8:	4603      	mov	r3, r0
 800d9da:	461a      	mov	r2, r3
 800d9dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d9e0:	4313      	orrs	r3, r2
 800d9e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800d9e6:	2200      	movs	r2, #0
 800d9e8:	21ff      	movs	r1, #255	; 0xff
 800d9ea:	6878      	ldr	r0, [r7, #4]
 800d9ec:	f001 f98c 	bl	800ed08 <VL53L0X_WrByte>
 800d9f0:	4603      	mov	r3, r0
 800d9f2:	461a      	mov	r2, r3
 800d9f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d9f8:	4313      	orrs	r3, r2
 800d9fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 800d9fe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800da02:	2b00      	cmp	r3, #0
 800da04:	d17f      	bne.n	800db06 <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 800da06:	78bb      	ldrb	r3, [r7, #2]
 800da08:	4618      	mov	r0, r3
 800da0a:	f7fe fe37 	bl	800c67c <VL53L0X_encode_vcsel_period>
 800da0e:	4603      	mov	r3, r0
 800da10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 800da14:	78fb      	ldrb	r3, [r7, #3]
 800da16:	2b00      	cmp	r3, #0
 800da18:	d002      	beq.n	800da20 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 800da1a:	2b01      	cmp	r3, #1
 800da1c:	d045      	beq.n	800daaa <VL53L0X_set_vcsel_pulse_period+0x470>
 800da1e:	e06e      	b.n	800dafe <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800da20:	f107 0314 	add.w	r3, r7, #20
 800da24:	461a      	mov	r2, r3
 800da26:	2103      	movs	r1, #3
 800da28:	6878      	ldr	r0, [r7, #4]
 800da2a:	f7ff fc33 	bl	800d294 <get_sequence_step_timeout>
 800da2e:	4603      	mov	r3, r0
 800da30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800da34:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d109      	bne.n	800da50 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 800da3c:	f107 0310 	add.w	r3, r7, #16
 800da40:	461a      	mov	r2, r3
 800da42:	2102      	movs	r1, #2
 800da44:	6878      	ldr	r0, [r7, #4]
 800da46:	f7ff fc25 	bl	800d294 <get_sequence_step_timeout>
 800da4a:	4603      	mov	r3, r0
 800da4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800da50:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800da54:	2b00      	cmp	r3, #0
 800da56:	d109      	bne.n	800da6c <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 800da58:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800da5c:	461a      	mov	r2, r3
 800da5e:	2150      	movs	r1, #80	; 0x50
 800da60:	6878      	ldr	r0, [r7, #4]
 800da62:	f001 f951 	bl	800ed08 <VL53L0X_WrByte>
 800da66:	4603      	mov	r3, r0
 800da68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800da6c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800da70:	2b00      	cmp	r3, #0
 800da72:	d108      	bne.n	800da86 <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 800da74:	697b      	ldr	r3, [r7, #20]
 800da76:	461a      	mov	r2, r3
 800da78:	2103      	movs	r1, #3
 800da7a:	6878      	ldr	r0, [r7, #4]
 800da7c:	f7ff fceb 	bl	800d456 <set_sequence_step_timeout>
 800da80:	4603      	mov	r3, r0
 800da82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 800da86:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d108      	bne.n	800daa0 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 800da8e:	693b      	ldr	r3, [r7, #16]
 800da90:	461a      	mov	r2, r3
 800da92:	2102      	movs	r1, #2
 800da94:	6878      	ldr	r0, [r7, #4]
 800da96:	f7ff fcde 	bl	800d456 <set_sequence_step_timeout>
 800da9a:	4603      	mov	r3, r0
 800da9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	78ba      	ldrb	r2, [r7, #2]
 800daa4:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800daa8:	e02e      	b.n	800db08 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800daaa:	f107 0318 	add.w	r3, r7, #24
 800daae:	461a      	mov	r2, r3
 800dab0:	2104      	movs	r1, #4
 800dab2:	6878      	ldr	r0, [r7, #4]
 800dab4:	f7ff fbee 	bl	800d294 <get_sequence_step_timeout>
 800dab8:	4603      	mov	r3, r0
 800daba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800dabe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d109      	bne.n	800dada <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 800dac6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800daca:	461a      	mov	r2, r3
 800dacc:	2170      	movs	r1, #112	; 0x70
 800dace:	6878      	ldr	r0, [r7, #4]
 800dad0:	f001 f91a 	bl	800ed08 <VL53L0X_WrByte>
 800dad4:	4603      	mov	r3, r0
 800dad6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800dada:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d108      	bne.n	800daf4 <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 800dae2:	69bb      	ldr	r3, [r7, #24]
 800dae4:	461a      	mov	r2, r3
 800dae6:	2104      	movs	r1, #4
 800dae8:	6878      	ldr	r0, [r7, #4]
 800daea:	f7ff fcb4 	bl	800d456 <set_sequence_step_timeout>
 800daee:	4603      	mov	r3, r0
 800daf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	78ba      	ldrb	r2, [r7, #2]
 800daf8:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800dafc:	e004      	b.n	800db08 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800dafe:	23fc      	movs	r3, #252	; 0xfc
 800db00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800db04:	e000      	b.n	800db08 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 800db06:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 800db08:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d109      	bne.n	800db24 <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	695b      	ldr	r3, [r3, #20]
 800db14:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800db16:	69f9      	ldr	r1, [r7, #28]
 800db18:	6878      	ldr	r0, [r7, #4]
 800db1a:	f7fc fd99 	bl	800a650 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800db1e:	4603      	mov	r3, r0
 800db20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 800db24:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d109      	bne.n	800db40 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 800db2c:	f107 010f 	add.w	r1, r7, #15
 800db30:	2301      	movs	r3, #1
 800db32:	2200      	movs	r2, #0
 800db34:	6878      	ldr	r0, [r7, #4]
 800db36:	f7fe fc99 	bl	800c46c <VL53L0X_perform_phase_calibration>
 800db3a:	4603      	mov	r3, r0
 800db3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 800db40:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800db44:	4618      	mov	r0, r3
 800db46:	3728      	adds	r7, #40	; 0x28
 800db48:	46bd      	mov	sp, r7
 800db4a:	bd80      	pop	{r7, pc}

0800db4c <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800db4c:	b580      	push	{r7, lr}
 800db4e:	b086      	sub	sp, #24
 800db50:	af00      	add	r7, sp, #0
 800db52:	60f8      	str	r0, [r7, #12]
 800db54:	460b      	mov	r3, r1
 800db56:	607a      	str	r2, [r7, #4]
 800db58:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800db5a:	2300      	movs	r3, #0
 800db5c:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800db5e:	7afb      	ldrb	r3, [r7, #11]
 800db60:	2b00      	cmp	r3, #0
 800db62:	d002      	beq.n	800db6a <VL53L0X_get_vcsel_pulse_period+0x1e>
 800db64:	2b01      	cmp	r3, #1
 800db66:	d00a      	beq.n	800db7e <VL53L0X_get_vcsel_pulse_period+0x32>
 800db68:	e013      	b.n	800db92 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800db6a:	f107 0316 	add.w	r3, r7, #22
 800db6e:	461a      	mov	r2, r3
 800db70:	2150      	movs	r1, #80	; 0x50
 800db72:	68f8      	ldr	r0, [r7, #12]
 800db74:	f001 f94a 	bl	800ee0c <VL53L0X_RdByte>
 800db78:	4603      	mov	r3, r0
 800db7a:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800db7c:	e00b      	b.n	800db96 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800db7e:	f107 0316 	add.w	r3, r7, #22
 800db82:	461a      	mov	r2, r3
 800db84:	2170      	movs	r1, #112	; 0x70
 800db86:	68f8      	ldr	r0, [r7, #12]
 800db88:	f001 f940 	bl	800ee0c <VL53L0X_RdByte>
 800db8c:	4603      	mov	r3, r0
 800db8e:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800db90:	e001      	b.n	800db96 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800db92:	23fc      	movs	r3, #252	; 0xfc
 800db94:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800db96:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d107      	bne.n	800dbae <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800db9e:	7dbb      	ldrb	r3, [r7, #22]
 800dba0:	4618      	mov	r0, r3
 800dba2:	f7fe fd58 	bl	800c656 <VL53L0X_decode_vcsel_period>
 800dba6:	4603      	mov	r3, r0
 800dba8:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	701a      	strb	r2, [r3, #0]

	return Status;
 800dbae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	3718      	adds	r7, #24
 800dbb6:	46bd      	mov	sp, r7
 800dbb8:	bd80      	pop	{r7, pc}

0800dbba <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800dbba:	b580      	push	{r7, lr}
 800dbbc:	b092      	sub	sp, #72	; 0x48
 800dbbe:	af00      	add	r7, sp, #0
 800dbc0:	6078      	str	r0, [r7, #4]
 800dbc2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800dbc4:	2300      	movs	r3, #0
 800dbc6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800dbca:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800dbce:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800dbd0:	f240 7376 	movw	r3, #1910	; 0x776
 800dbd4:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800dbd6:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800dbda:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800dbdc:	f44f 7325 	mov.w	r3, #660	; 0x294
 800dbe0:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 800dbe2:	f240 234e 	movw	r3, #590	; 0x24e
 800dbe6:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 800dbe8:	f240 23b2 	movw	r3, #690	; 0x2b2
 800dbec:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800dbee:	f44f 7325 	mov.w	r3, #660	; 0x294
 800dbf2:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800dbf4:	f240 2326 	movw	r3, #550	; 0x226
 800dbf8:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 800dbfe:	f644 6320 	movw	r3, #20000	; 0x4e20
 800dc02:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 800dc04:	2300      	movs	r3, #0
 800dc06:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 800dc08:	683a      	ldr	r2, [r7, #0]
 800dc0a:	6a3b      	ldr	r3, [r7, #32]
 800dc0c:	429a      	cmp	r2, r3
 800dc0e:	d205      	bcs.n	800dc1c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800dc10:	23fc      	movs	r3, #252	; 0xfc
 800dc12:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 800dc16:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800dc1a:	e0aa      	b.n	800dd72 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800dc1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dc1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc20:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 800dc22:	683a      	ldr	r2, [r7, #0]
 800dc24:	1ad3      	subs	r3, r2, r3
 800dc26:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800dc28:	f107 0314 	add.w	r3, r7, #20
 800dc2c:	4619      	mov	r1, r3
 800dc2e:	6878      	ldr	r0, [r7, #4]
 800dc30:	f7fc fe58 	bl	800a8e4 <VL53L0X_GetSequenceStepEnables>
 800dc34:	4603      	mov	r3, r0
 800dc36:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 800dc3a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d15b      	bne.n	800dcfa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 800dc42:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d105      	bne.n	800dc54 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 800dc48:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d102      	bne.n	800dc54 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 800dc4e:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d052      	beq.n	800dcfa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800dc54:	f107 0310 	add.w	r3, r7, #16
 800dc58:	461a      	mov	r2, r3
 800dc5a:	2102      	movs	r1, #2
 800dc5c:	6878      	ldr	r0, [r7, #4]
 800dc5e:	f7ff fb19 	bl	800d294 <get_sequence_step_timeout>
 800dc62:	4603      	mov	r3, r0
 800dc64:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800dc68:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d002      	beq.n	800dc76 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 800dc70:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800dc74:	e07d      	b.n	800dd72 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800dc76:	7d3b      	ldrb	r3, [r7, #20]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d00f      	beq.n	800dc9c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800dc7c:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800dc7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc80:	4413      	add	r3, r2
 800dc82:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800dc84:	69fa      	ldr	r2, [r7, #28]
 800dc86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc88:	429a      	cmp	r2, r3
 800dc8a:	d204      	bcs.n	800dc96 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800dc8c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dc8e:	69fb      	ldr	r3, [r7, #28]
 800dc90:	1ad3      	subs	r3, r2, r3
 800dc92:	643b      	str	r3, [r7, #64]	; 0x40
 800dc94:	e002      	b.n	800dc9c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800dc96:	23fc      	movs	r3, #252	; 0xfc
 800dc98:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800dc9c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d002      	beq.n	800dcaa <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800dca4:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800dca8:	e063      	b.n	800dd72 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800dcaa:	7dbb      	ldrb	r3, [r7, #22]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d011      	beq.n	800dcd4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800dcb0:	693a      	ldr	r2, [r7, #16]
 800dcb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcb4:	4413      	add	r3, r2
 800dcb6:	005b      	lsls	r3, r3, #1
 800dcb8:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800dcba:	69fa      	ldr	r2, [r7, #28]
 800dcbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dcbe:	429a      	cmp	r2, r3
 800dcc0:	d204      	bcs.n	800dccc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800dcc2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dcc4:	69fb      	ldr	r3, [r7, #28]
 800dcc6:	1ad3      	subs	r3, r2, r3
 800dcc8:	643b      	str	r3, [r7, #64]	; 0x40
 800dcca:	e016      	b.n	800dcfa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800dccc:	23fc      	movs	r3, #252	; 0xfc
 800dcce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800dcd2:	e012      	b.n	800dcfa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800dcd4:	7d7b      	ldrb	r3, [r7, #21]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d00f      	beq.n	800dcfa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800dcda:	693b      	ldr	r3, [r7, #16]
 800dcdc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dcde:	4413      	add	r3, r2
 800dce0:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800dce2:	69fa      	ldr	r2, [r7, #28]
 800dce4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dce6:	429a      	cmp	r2, r3
 800dce8:	d204      	bcs.n	800dcf4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800dcea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dcec:	69fb      	ldr	r3, [r7, #28]
 800dcee:	1ad3      	subs	r3, r2, r3
 800dcf0:	643b      	str	r3, [r7, #64]	; 0x40
 800dcf2:	e002      	b.n	800dcfa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800dcf4:	23fc      	movs	r3, #252	; 0xfc
 800dcf6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800dcfa:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d002      	beq.n	800dd08 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 800dd02:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800dd06:	e034      	b.n	800dd72 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800dd08:	7dfb      	ldrb	r3, [r7, #23]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d019      	beq.n	800dd42 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800dd0e:	f107 030c 	add.w	r3, r7, #12
 800dd12:	461a      	mov	r2, r3
 800dd14:	2103      	movs	r1, #3
 800dd16:	6878      	ldr	r0, [r7, #4]
 800dd18:	f7ff fabc 	bl	800d294 <get_sequence_step_timeout>
 800dd1c:	4603      	mov	r3, r0
 800dd1e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dd26:	4413      	add	r3, r2
 800dd28:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800dd2a:	69fa      	ldr	r2, [r7, #28]
 800dd2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dd2e:	429a      	cmp	r2, r3
 800dd30:	d204      	bcs.n	800dd3c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800dd32:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dd34:	69fb      	ldr	r3, [r7, #28]
 800dd36:	1ad3      	subs	r3, r2, r3
 800dd38:	643b      	str	r3, [r7, #64]	; 0x40
 800dd3a:	e002      	b.n	800dd42 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800dd3c:	23fc      	movs	r3, #252	; 0xfc
 800dd3e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800dd42:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d111      	bne.n	800dd6e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800dd4a:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d00e      	beq.n	800dd6e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 800dd50:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dd52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd54:	1ad3      	subs	r3, r2, r3
 800dd56:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800dd58:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dd5a:	2104      	movs	r1, #4
 800dd5c:	6878      	ldr	r0, [r7, #4]
 800dd5e:	f7ff fb7a 	bl	800d456 <set_sequence_step_timeout>
 800dd62:	4603      	mov	r3, r0
 800dd64:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	683a      	ldr	r2, [r7, #0]
 800dd6c:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800dd6e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800dd72:	4618      	mov	r0, r3
 800dd74:	3748      	adds	r7, #72	; 0x48
 800dd76:	46bd      	mov	sp, r7
 800dd78:	bd80      	pop	{r7, pc}

0800dd7a <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800dd7a:	b580      	push	{r7, lr}
 800dd7c:	b090      	sub	sp, #64	; 0x40
 800dd7e:	af00      	add	r7, sp, #0
 800dd80:	6078      	str	r0, [r7, #4]
 800dd82:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800dd84:	2300      	movs	r3, #0
 800dd86:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800dd8a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800dd8e:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800dd90:	f240 7376 	movw	r3, #1910	; 0x776
 800dd94:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800dd96:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800dd9a:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800dd9c:	f44f 7325 	mov.w	r3, #660	; 0x294
 800dda0:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800dda2:	f240 234e 	movw	r3, #590	; 0x24e
 800dda6:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800dda8:	f240 23b2 	movw	r3, #690	; 0x2b2
 800ddac:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800ddae:	f44f 7325 	mov.w	r3, #660	; 0x294
 800ddb2:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800ddb4:	f240 2326 	movw	r3, #550	; 0x226
 800ddb8:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800ddba:	2300      	movs	r3, #0
 800ddbc:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800ddbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ddc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ddc2:	441a      	add	r2, r3
 800ddc4:	683b      	ldr	r3, [r7, #0]
 800ddc6:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800ddc8:	f107 0318 	add.w	r3, r7, #24
 800ddcc:	4619      	mov	r1, r3
 800ddce:	6878      	ldr	r0, [r7, #4]
 800ddd0:	f7fc fd88 	bl	800a8e4 <VL53L0X_GetSequenceStepEnables>
 800ddd4:	4603      	mov	r3, r0
 800ddd6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800ddda:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d002      	beq.n	800dde8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800dde2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800dde6:	e075      	b.n	800ded4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800dde8:	7e3b      	ldrb	r3, [r7, #24]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d105      	bne.n	800ddfa <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800ddee:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d102      	bne.n	800ddfa <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800ddf4:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d030      	beq.n	800de5c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800ddfa:	f107 0310 	add.w	r3, r7, #16
 800ddfe:	461a      	mov	r2, r3
 800de00:	2102      	movs	r1, #2
 800de02:	6878      	ldr	r0, [r7, #4]
 800de04:	f7ff fa46 	bl	800d294 <get_sequence_step_timeout>
 800de08:	4603      	mov	r3, r0
 800de0a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800de0e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800de12:	2b00      	cmp	r3, #0
 800de14:	d122      	bne.n	800de5c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800de16:	7e3b      	ldrb	r3, [r7, #24]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d007      	beq.n	800de2c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800de1c:	683b      	ldr	r3, [r7, #0]
 800de1e:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800de20:	6939      	ldr	r1, [r7, #16]
 800de22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de24:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800de26:	441a      	add	r2, r3
 800de28:	683b      	ldr	r3, [r7, #0]
 800de2a:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800de2c:	7ebb      	ldrb	r3, [r7, #26]
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d009      	beq.n	800de46 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800de32:	683b      	ldr	r3, [r7, #0]
 800de34:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800de36:	6939      	ldr	r1, [r7, #16]
 800de38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de3a:	440b      	add	r3, r1
 800de3c:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800de3e:	441a      	add	r2, r3
 800de40:	683b      	ldr	r3, [r7, #0]
 800de42:	601a      	str	r2, [r3, #0]
 800de44:	e00a      	b.n	800de5c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800de46:	7e7b      	ldrb	r3, [r7, #25]
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d007      	beq.n	800de5c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800de4c:	683b      	ldr	r3, [r7, #0]
 800de4e:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800de50:	6939      	ldr	r1, [r7, #16]
 800de52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de54:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800de56:	441a      	add	r2, r3
 800de58:	683b      	ldr	r3, [r7, #0]
 800de5a:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800de5c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800de60:	2b00      	cmp	r3, #0
 800de62:	d114      	bne.n	800de8e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800de64:	7efb      	ldrb	r3, [r7, #27]
 800de66:	2b00      	cmp	r3, #0
 800de68:	d011      	beq.n	800de8e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800de6a:	f107 030c 	add.w	r3, r7, #12
 800de6e:	461a      	mov	r2, r3
 800de70:	2103      	movs	r1, #3
 800de72:	6878      	ldr	r0, [r7, #4]
 800de74:	f7ff fa0e 	bl	800d294 <get_sequence_step_timeout>
 800de78:	4603      	mov	r3, r0
 800de7a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800de7e:	683b      	ldr	r3, [r7, #0]
 800de80:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800de82:	68f9      	ldr	r1, [r7, #12]
 800de84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de86:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800de88:	441a      	add	r2, r3
 800de8a:	683b      	ldr	r3, [r7, #0]
 800de8c:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800de8e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800de92:	2b00      	cmp	r3, #0
 800de94:	d114      	bne.n	800dec0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800de96:	7f3b      	ldrb	r3, [r7, #28]
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d011      	beq.n	800dec0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800de9c:	f107 0314 	add.w	r3, r7, #20
 800dea0:	461a      	mov	r2, r3
 800dea2:	2104      	movs	r1, #4
 800dea4:	6878      	ldr	r0, [r7, #4]
 800dea6:	f7ff f9f5 	bl	800d294 <get_sequence_step_timeout>
 800deaa:	4603      	mov	r3, r0
 800deac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800deb0:	683b      	ldr	r3, [r7, #0]
 800deb2:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800deb4:	6979      	ldr	r1, [r7, #20]
 800deb6:	6a3b      	ldr	r3, [r7, #32]
 800deb8:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800deba:	441a      	add	r2, r3
 800debc:	683b      	ldr	r3, [r7, #0]
 800debe:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800dec0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d103      	bne.n	800ded0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800dec8:	683b      	ldr	r3, [r7, #0]
 800deca:	681a      	ldr	r2, [r3, #0]
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ded0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800ded4:	4618      	mov	r0, r3
 800ded6:	3740      	adds	r7, #64	; 0x40
 800ded8:	46bd      	mov	sp, r7
 800deda:	bd80      	pop	{r7, pc}

0800dedc <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800dedc:	b580      	push	{r7, lr}
 800dede:	b088      	sub	sp, #32
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	6078      	str	r0, [r7, #4]
 800dee4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800dee6:	2300      	movs	r3, #0
 800dee8:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800deea:	2300      	movs	r3, #0
 800deec:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800deee:	e0c6      	b.n	800e07e <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800def0:	697b      	ldr	r3, [r7, #20]
 800def2:	683a      	ldr	r2, [r7, #0]
 800def4:	4413      	add	r3, r2
 800def6:	781b      	ldrb	r3, [r3, #0]
 800def8:	74fb      	strb	r3, [r7, #19]
		Index++;
 800defa:	697b      	ldr	r3, [r7, #20]
 800defc:	3301      	adds	r3, #1
 800defe:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 800df00:	7cfb      	ldrb	r3, [r7, #19]
 800df02:	2bff      	cmp	r3, #255	; 0xff
 800df04:	f040 808d 	bne.w	800e022 <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800df08:	697b      	ldr	r3, [r7, #20]
 800df0a:	683a      	ldr	r2, [r7, #0]
 800df0c:	4413      	add	r3, r2
 800df0e:	781b      	ldrb	r3, [r3, #0]
 800df10:	747b      	strb	r3, [r7, #17]
			Index++;
 800df12:	697b      	ldr	r3, [r7, #20]
 800df14:	3301      	adds	r3, #1
 800df16:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800df18:	7c7b      	ldrb	r3, [r7, #17]
 800df1a:	2b03      	cmp	r3, #3
 800df1c:	d87e      	bhi.n	800e01c <VL53L0X_load_tuning_settings+0x140>
 800df1e:	a201      	add	r2, pc, #4	; (adr r2, 800df24 <VL53L0X_load_tuning_settings+0x48>)
 800df20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df24:	0800df35 	.word	0x0800df35
 800df28:	0800df6f 	.word	0x0800df6f
 800df2c:	0800dfa9 	.word	0x0800dfa9
 800df30:	0800dfe3 	.word	0x0800dfe3
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800df34:	697b      	ldr	r3, [r7, #20]
 800df36:	683a      	ldr	r2, [r7, #0]
 800df38:	4413      	add	r3, r2
 800df3a:	781b      	ldrb	r3, [r3, #0]
 800df3c:	743b      	strb	r3, [r7, #16]
				Index++;
 800df3e:	697b      	ldr	r3, [r7, #20]
 800df40:	3301      	adds	r3, #1
 800df42:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800df44:	697b      	ldr	r3, [r7, #20]
 800df46:	683a      	ldr	r2, [r7, #0]
 800df48:	4413      	add	r3, r2
 800df4a:	781b      	ldrb	r3, [r3, #0]
 800df4c:	73fb      	strb	r3, [r7, #15]
				Index++;
 800df4e:	697b      	ldr	r3, [r7, #20]
 800df50:	3301      	adds	r3, #1
 800df52:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800df54:	7c3b      	ldrb	r3, [r7, #16]
 800df56:	b29b      	uxth	r3, r3
 800df58:	021b      	lsls	r3, r3, #8
 800df5a:	b29a      	uxth	r2, r3
 800df5c:	7bfb      	ldrb	r3, [r7, #15]
 800df5e:	b29b      	uxth	r3, r3
 800df60:	4413      	add	r3, r2
 800df62:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	89ba      	ldrh	r2, [r7, #12]
 800df68:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 800df6c:	e087      	b.n	800e07e <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800df6e:	697b      	ldr	r3, [r7, #20]
 800df70:	683a      	ldr	r2, [r7, #0]
 800df72:	4413      	add	r3, r2
 800df74:	781b      	ldrb	r3, [r3, #0]
 800df76:	743b      	strb	r3, [r7, #16]
				Index++;
 800df78:	697b      	ldr	r3, [r7, #20]
 800df7a:	3301      	adds	r3, #1
 800df7c:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800df7e:	697b      	ldr	r3, [r7, #20]
 800df80:	683a      	ldr	r2, [r7, #0]
 800df82:	4413      	add	r3, r2
 800df84:	781b      	ldrb	r3, [r3, #0]
 800df86:	73fb      	strb	r3, [r7, #15]
				Index++;
 800df88:	697b      	ldr	r3, [r7, #20]
 800df8a:	3301      	adds	r3, #1
 800df8c:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800df8e:	7c3b      	ldrb	r3, [r7, #16]
 800df90:	b29b      	uxth	r3, r3
 800df92:	021b      	lsls	r3, r3, #8
 800df94:	b29a      	uxth	r2, r3
 800df96:	7bfb      	ldrb	r3, [r7, #15]
 800df98:	b29b      	uxth	r3, r3
 800df9a:	4413      	add	r3, r2
 800df9c:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	89ba      	ldrh	r2, [r7, #12]
 800dfa2:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 800dfa6:	e06a      	b.n	800e07e <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800dfa8:	697b      	ldr	r3, [r7, #20]
 800dfaa:	683a      	ldr	r2, [r7, #0]
 800dfac:	4413      	add	r3, r2
 800dfae:	781b      	ldrb	r3, [r3, #0]
 800dfb0:	743b      	strb	r3, [r7, #16]
				Index++;
 800dfb2:	697b      	ldr	r3, [r7, #20]
 800dfb4:	3301      	adds	r3, #1
 800dfb6:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800dfb8:	697b      	ldr	r3, [r7, #20]
 800dfba:	683a      	ldr	r2, [r7, #0]
 800dfbc:	4413      	add	r3, r2
 800dfbe:	781b      	ldrb	r3, [r3, #0]
 800dfc0:	73fb      	strb	r3, [r7, #15]
				Index++;
 800dfc2:	697b      	ldr	r3, [r7, #20]
 800dfc4:	3301      	adds	r3, #1
 800dfc6:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800dfc8:	7c3b      	ldrb	r3, [r7, #16]
 800dfca:	b29b      	uxth	r3, r3
 800dfcc:	021b      	lsls	r3, r3, #8
 800dfce:	b29a      	uxth	r2, r3
 800dfd0:	7bfb      	ldrb	r3, [r7, #15]
 800dfd2:	b29b      	uxth	r3, r3
 800dfd4:	4413      	add	r3, r2
 800dfd6:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	89ba      	ldrh	r2, [r7, #12]
 800dfdc:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 800dfe0:	e04d      	b.n	800e07e <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800dfe2:	697b      	ldr	r3, [r7, #20]
 800dfe4:	683a      	ldr	r2, [r7, #0]
 800dfe6:	4413      	add	r3, r2
 800dfe8:	781b      	ldrb	r3, [r3, #0]
 800dfea:	743b      	strb	r3, [r7, #16]
				Index++;
 800dfec:	697b      	ldr	r3, [r7, #20]
 800dfee:	3301      	adds	r3, #1
 800dff0:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800dff2:	697b      	ldr	r3, [r7, #20]
 800dff4:	683a      	ldr	r2, [r7, #0]
 800dff6:	4413      	add	r3, r2
 800dff8:	781b      	ldrb	r3, [r3, #0]
 800dffa:	73fb      	strb	r3, [r7, #15]
				Index++;
 800dffc:	697b      	ldr	r3, [r7, #20]
 800dffe:	3301      	adds	r3, #1
 800e000:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800e002:	7c3b      	ldrb	r3, [r7, #16]
 800e004:	b29b      	uxth	r3, r3
 800e006:	021b      	lsls	r3, r3, #8
 800e008:	b29a      	uxth	r2, r3
 800e00a:	7bfb      	ldrb	r3, [r7, #15]
 800e00c:	b29b      	uxth	r3, r3
 800e00e:	4413      	add	r3, r2
 800e010:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	89ba      	ldrh	r2, [r7, #12]
 800e016:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 800e01a:	e030      	b.n	800e07e <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e01c:	23fc      	movs	r3, #252	; 0xfc
 800e01e:	77fb      	strb	r3, [r7, #31]
 800e020:	e02d      	b.n	800e07e <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800e022:	7cfb      	ldrb	r3, [r7, #19]
 800e024:	2b04      	cmp	r3, #4
 800e026:	d828      	bhi.n	800e07a <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800e028:	697b      	ldr	r3, [r7, #20]
 800e02a:	683a      	ldr	r2, [r7, #0]
 800e02c:	4413      	add	r3, r2
 800e02e:	781b      	ldrb	r3, [r3, #0]
 800e030:	74bb      	strb	r3, [r7, #18]
			Index++;
 800e032:	697b      	ldr	r3, [r7, #20]
 800e034:	3301      	adds	r3, #1
 800e036:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800e038:	2300      	movs	r3, #0
 800e03a:	61bb      	str	r3, [r7, #24]
 800e03c:	e00f      	b.n	800e05e <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800e03e:	697b      	ldr	r3, [r7, #20]
 800e040:	683a      	ldr	r2, [r7, #0]
 800e042:	4413      	add	r3, r2
 800e044:	7819      	ldrb	r1, [r3, #0]
 800e046:	f107 0208 	add.w	r2, r7, #8
 800e04a:	69bb      	ldr	r3, [r7, #24]
 800e04c:	4413      	add	r3, r2
 800e04e:	460a      	mov	r2, r1
 800e050:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800e052:	697b      	ldr	r3, [r7, #20]
 800e054:	3301      	adds	r3, #1
 800e056:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800e058:	69bb      	ldr	r3, [r7, #24]
 800e05a:	3301      	adds	r3, #1
 800e05c:	61bb      	str	r3, [r7, #24]
 800e05e:	7cfb      	ldrb	r3, [r7, #19]
 800e060:	69ba      	ldr	r2, [r7, #24]
 800e062:	429a      	cmp	r2, r3
 800e064:	dbeb      	blt.n	800e03e <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800e066:	7cfb      	ldrb	r3, [r7, #19]
 800e068:	f107 0208 	add.w	r2, r7, #8
 800e06c:	7cb9      	ldrb	r1, [r7, #18]
 800e06e:	6878      	ldr	r0, [r7, #4]
 800e070:	f000 fdee 	bl	800ec50 <VL53L0X_WriteMulti>
 800e074:	4603      	mov	r3, r0
 800e076:	77fb      	strb	r3, [r7, #31]
 800e078:	e001      	b.n	800e07e <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e07a:	23fc      	movs	r3, #252	; 0xfc
 800e07c:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800e07e:	697b      	ldr	r3, [r7, #20]
 800e080:	683a      	ldr	r2, [r7, #0]
 800e082:	4413      	add	r3, r2
 800e084:	781b      	ldrb	r3, [r3, #0]
 800e086:	2b00      	cmp	r3, #0
 800e088:	d004      	beq.n	800e094 <VL53L0X_load_tuning_settings+0x1b8>
 800e08a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e08e:	2b00      	cmp	r3, #0
 800e090:	f43f af2e 	beq.w	800def0 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800e094:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e098:	4618      	mov	r0, r3
 800e09a:	3720      	adds	r7, #32
 800e09c:	46bd      	mov	sp, r7
 800e09e:	bd80      	pop	{r7, pc}

0800e0a0 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800e0a0:	b580      	push	{r7, lr}
 800e0a2:	b088      	sub	sp, #32
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	60f8      	str	r0, [r7, #12]
 800e0a8:	60b9      	str	r1, [r7, #8]
 800e0aa:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e0ac:	2300      	movs	r3, #0
 800e0ae:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	2200      	movs	r2, #0
 800e0b4:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800e0b6:	f107 0313 	add.w	r3, r7, #19
 800e0ba:	4619      	mov	r1, r3
 800e0bc:	68f8      	ldr	r0, [r7, #12]
 800e0be:	f7fc fc9d 	bl	800a9fc <VL53L0X_GetXTalkCompensationEnable>
 800e0c2:	4603      	mov	r3, r0
 800e0c4:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800e0c6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d111      	bne.n	800e0f2 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800e0ce:	7cfb      	ldrb	r3, [r7, #19]
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d00e      	beq.n	800e0f2 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	6a1b      	ldr	r3, [r3, #32]
 800e0d8:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800e0da:	68bb      	ldr	r3, [r7, #8]
 800e0dc:	8a9b      	ldrh	r3, [r3, #20]
 800e0de:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800e0e0:	69bb      	ldr	r3, [r7, #24]
 800e0e2:	fb02 f303 	mul.w	r3, r2, r3
 800e0e6:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800e0e8:	697b      	ldr	r3, [r7, #20]
 800e0ea:	3380      	adds	r3, #128	; 0x80
 800e0ec:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800e0f2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e0f6:	4618      	mov	r0, r3
 800e0f8:	3720      	adds	r7, #32
 800e0fa:	46bd      	mov	sp, r7
 800e0fc:	bd80      	pop	{r7, pc}

0800e0fe <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800e0fe:	b580      	push	{r7, lr}
 800e100:	b086      	sub	sp, #24
 800e102:	af00      	add	r7, sp, #0
 800e104:	60f8      	str	r0, [r7, #12]
 800e106:	60b9      	str	r1, [r7, #8]
 800e108:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e10a:	2300      	movs	r3, #0
 800e10c:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800e10e:	68bb      	ldr	r3, [r7, #8]
 800e110:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800e116:	f107 0310 	add.w	r3, r7, #16
 800e11a:	461a      	mov	r2, r3
 800e11c:	68b9      	ldr	r1, [r7, #8]
 800e11e:	68f8      	ldr	r0, [r7, #12]
 800e120:	f7ff ffbe 	bl	800e0a0 <VL53L0X_get_total_xtalk_rate>
 800e124:	4603      	mov	r3, r0
 800e126:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800e128:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d105      	bne.n	800e13c <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	681a      	ldr	r2, [r3, #0]
 800e134:	693b      	ldr	r3, [r7, #16]
 800e136:	441a      	add	r2, r3
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	601a      	str	r2, [r3, #0]

	return Status;
 800e13c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e140:	4618      	mov	r0, r3
 800e142:	3718      	adds	r7, #24
 800e144:	46bd      	mov	sp, r7
 800e146:	bd80      	pop	{r7, pc}

0800e148 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 800e148:	b580      	push	{r7, lr}
 800e14a:	b09a      	sub	sp, #104	; 0x68
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	60f8      	str	r0, [r7, #12]
 800e150:	60b9      	str	r1, [r7, #8]
 800e152:	607a      	str	r2, [r7, #4]
 800e154:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800e156:	2312      	movs	r3, #18
 800e158:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800e15a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e15e:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800e160:	2342      	movs	r3, #66	; 0x42
 800e162:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800e164:	2306      	movs	r3, #6
 800e166:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 800e168:	2307      	movs	r3, #7
 800e16a:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e16c:	2300      	movs	r3, #0
 800e16e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 800e178:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800e180:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800e182:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e184:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e186:	fb02 f303 	mul.w	r3, r2, r3
 800e18a:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800e18c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e18e:	3380      	adds	r3, #128	; 0x80
 800e190:	0a1b      	lsrs	r3, r3, #8
 800e192:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800e194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e196:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e198:	fb02 f303 	mul.w	r3, r2, r3
 800e19c:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 800e19e:	2300      	movs	r3, #0
 800e1a0:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d01a      	beq.n	800e1de <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800e1a8:	68bb      	ldr	r3, [r7, #8]
 800e1aa:	029b      	lsls	r3, r3, #10
 800e1ac:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800e1b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e1b4:	4413      	add	r3, r2
 800e1b6:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800e1b8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800e1c0:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800e1c2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e1c4:	4613      	mov	r3, r2
 800e1c6:	005b      	lsls	r3, r3, #1
 800e1c8:	4413      	add	r3, r2
 800e1ca:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800e1cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e1ce:	fb03 f303 	mul.w	r3, r3, r3
 800e1d2:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800e1d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e1d6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e1da:	0c1b      	lsrs	r3, r3, #16
 800e1dc:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800e1de:	683b      	ldr	r3, [r7, #0]
 800e1e0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e1e2:	fb02 f303 	mul.w	r3, r2, r3
 800e1e6:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800e1e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1ea:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e1ee:	0c1b      	lsrs	r3, r3, #16
 800e1f0:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800e1f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1f4:	fb03 f303 	mul.w	r3, r3, r3
 800e1f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800e1fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e1fc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e200:	0c1b      	lsrs	r3, r3, #16
 800e202:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800e204:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e206:	085a      	lsrs	r2, r3, #1
 800e208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e20a:	441a      	add	r2, r3
 800e20c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e20e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e212:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800e214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e216:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e218:	fb02 f303 	mul.w	r3, r2, r3
 800e21c:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800e21e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e220:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e224:	d302      	bcc.n	800e22c <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 800e226:	4b54      	ldr	r3, [pc, #336]	; (800e378 <VL53L0X_calc_dmax+0x230>)
 800e228:	663b      	str	r3, [r7, #96]	; 0x60
 800e22a:	e015      	b.n	800e258 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800e22c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e22e:	085a      	lsrs	r2, r3, #1
 800e230:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e232:	441a      	add	r2, r3
 800e234:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e236:	fbb2 f3f3 	udiv	r3, r2, r3
 800e23a:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800e23c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e23e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e240:	fb02 f303 	mul.w	r3, r2, r3
 800e244:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800e246:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e248:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e24c:	0c1b      	lsrs	r3, r3, #16
 800e24e:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800e250:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e252:	fb03 f303 	mul.w	r3, r3, r3
 800e256:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800e258:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e25a:	039b      	lsls	r3, r3, #14
 800e25c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800e260:	4a46      	ldr	r2, [pc, #280]	; (800e37c <VL53L0X_calc_dmax+0x234>)
 800e262:	fba2 2303 	umull	r2, r3, r2, r3
 800e266:	099b      	lsrs	r3, r3, #6
 800e268:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800e26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e26c:	fb03 f303 	mul.w	r3, r3, r3
 800e270:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800e272:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e274:	fb03 f303 	mul.w	r3, r3, r3
 800e278:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800e27a:	6a3b      	ldr	r3, [r7, #32]
 800e27c:	3308      	adds	r3, #8
 800e27e:	091b      	lsrs	r3, r3, #4
 800e280:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800e282:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e284:	6a3b      	ldr	r3, [r7, #32]
 800e286:	1ad3      	subs	r3, r2, r3
 800e288:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800e28a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e28c:	4613      	mov	r3, r2
 800e28e:	005b      	lsls	r3, r3, #1
 800e290:	4413      	add	r3, r2
 800e292:	011b      	lsls	r3, r3, #4
 800e294:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800e296:	69fb      	ldr	r3, [r7, #28]
 800e298:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800e29c:	0b9b      	lsrs	r3, r3, #14
 800e29e:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800e2a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e2a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e2a4:	4413      	add	r3, r2
 800e2a6:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800e2a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e2aa:	085b      	lsrs	r3, r3, #1
 800e2ac:	69ba      	ldr	r2, [r7, #24]
 800e2ae:	4413      	add	r3, r2
 800e2b0:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800e2b2:	69ba      	ldr	r2, [r7, #24]
 800e2b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e2b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800e2ba:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800e2bc:	69bb      	ldr	r3, [r7, #24]
 800e2be:	039b      	lsls	r3, r3, #14
 800e2c0:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800e2c2:	69fb      	ldr	r3, [r7, #28]
 800e2c4:	085b      	lsrs	r3, r3, #1
 800e2c6:	69ba      	ldr	r2, [r7, #24]
 800e2c8:	4413      	add	r3, r2
 800e2ca:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800e2cc:	69ba      	ldr	r2, [r7, #24]
 800e2ce:	69fb      	ldr	r3, [r7, #28]
 800e2d0:	fbb2 f3f3 	udiv	r3, r2, r3
 800e2d4:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800e2d6:	69bb      	ldr	r3, [r7, #24]
 800e2d8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e2da:	fb02 f303 	mul.w	r3, r2, r3
 800e2de:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800e2e0:	69bb      	ldr	r3, [r7, #24]
 800e2e2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800e2e6:	4a25      	ldr	r2, [pc, #148]	; (800e37c <VL53L0X_calc_dmax+0x234>)
 800e2e8:	fba2 2303 	umull	r2, r3, r2, r3
 800e2ec:	099b      	lsrs	r3, r3, #6
 800e2ee:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800e2f0:	69bb      	ldr	r3, [r7, #24]
 800e2f2:	011b      	lsls	r3, r3, #4
 800e2f4:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800e2f6:	69bb      	ldr	r3, [r7, #24]
 800e2f8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800e2fc:	4a1f      	ldr	r2, [pc, #124]	; (800e37c <VL53L0X_calc_dmax+0x234>)
 800e2fe:	fba2 2303 	umull	r2, r3, r2, r3
 800e302:	099b      	lsrs	r3, r3, #6
 800e304:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800e306:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e308:	3380      	adds	r3, #128	; 0x80
 800e30a:	0a1b      	lsrs	r3, r3, #8
 800e30c:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800e30e:	697b      	ldr	r3, [r7, #20]
 800e310:	2b00      	cmp	r3, #0
 800e312:	d008      	beq.n	800e326 <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800e314:	697b      	ldr	r3, [r7, #20]
 800e316:	085a      	lsrs	r2, r3, #1
 800e318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e31a:	441a      	add	r2, r3
 800e31c:	697b      	ldr	r3, [r7, #20]
 800e31e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e322:	65bb      	str	r3, [r7, #88]	; 0x58
 800e324:	e001      	b.n	800e32a <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800e326:	2300      	movs	r3, #0
 800e328:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800e32a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800e32c:	f7fe f9b9 	bl	800c6a2 <VL53L0X_isqrt>
 800e330:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800e332:	69bb      	ldr	r3, [r7, #24]
 800e334:	2b00      	cmp	r3, #0
 800e336:	d008      	beq.n	800e34a <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800e338:	69bb      	ldr	r3, [r7, #24]
 800e33a:	085a      	lsrs	r2, r3, #1
 800e33c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e33e:	441a      	add	r2, r3
 800e340:	69bb      	ldr	r3, [r7, #24]
 800e342:	fbb2 f3f3 	udiv	r3, r2, r3
 800e346:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e348:	e001      	b.n	800e34e <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800e34a:	2300      	movs	r3, #0
 800e34c:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800e34e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800e350:	f7fe f9a7 	bl	800c6a2 <VL53L0X_isqrt>
 800e354:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 800e356:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e358:	693a      	ldr	r2, [r7, #16]
 800e35a:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800e35c:	693a      	ldr	r2, [r7, #16]
 800e35e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e360:	429a      	cmp	r2, r3
 800e362:	d902      	bls.n	800e36a <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 800e364:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e366:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e368:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800e36a:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800e36e:	4618      	mov	r0, r3
 800e370:	3768      	adds	r7, #104	; 0x68
 800e372:	46bd      	mov	sp, r7
 800e374:	bd80      	pop	{r7, pc}
 800e376:	bf00      	nop
 800e378:	fff00000 	.word	0xfff00000
 800e37c:	10624dd3 	.word	0x10624dd3

0800e380 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800e380:	b580      	push	{r7, lr}
 800e382:	b0b4      	sub	sp, #208	; 0xd0
 800e384:	af04      	add	r7, sp, #16
 800e386:	60f8      	str	r0, [r7, #12]
 800e388:	60b9      	str	r1, [r7, #8]
 800e38a:	607a      	str	r2, [r7, #4]
 800e38c:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800e38e:	f44f 7348 	mov.w	r3, #800	; 0x320
 800e392:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800e396:	f44f 7316 	mov.w	r3, #600	; 0x258
 800e39a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800e39e:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800e3a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800e3a6:	f241 235c 	movw	r3, #4700	; 0x125c
 800e3aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800e3ae:	4b9e      	ldr	r3, [pc, #632]	; (800e628 <VL53L0X_calc_sigma_estimate+0x2a8>)
 800e3b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800e3b4:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800e3b8:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800e3ba:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800e3be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e3c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800e3c6:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800e3c8:	4b98      	ldr	r3, [pc, #608]	; (800e62c <VL53L0X_calc_sigma_estimate+0x2ac>)
 800e3ca:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800e3cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e3d0:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800e3d2:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800e3d6:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 800e3d8:	f240 6377 	movw	r3, #1655	; 0x677
 800e3dc:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e3de:	2300      	movs	r3, #0
 800e3e0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	6a1b      	ldr	r3, [r3, #32]
 800e3e8:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800e3ea:	68bb      	ldr	r3, [r7, #8]
 800e3ec:	691b      	ldr	r3, [r3, #16]
 800e3ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e3f2:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800e3f6:	0c1b      	lsrs	r3, r3, #16
 800e3f8:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 800e3fa:	68bb      	ldr	r3, [r7, #8]
 800e3fc:	68db      	ldr	r3, [r3, #12]
 800e3fe:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 800e400:	f107 0310 	add.w	r3, r7, #16
 800e404:	461a      	mov	r2, r3
 800e406:	68b9      	ldr	r1, [r7, #8]
 800e408:	68f8      	ldr	r0, [r7, #12]
 800e40a:	f7ff fe78 	bl	800e0fe <VL53L0X_get_total_signal_rate>
 800e40e:	4603      	mov	r3, r0
 800e410:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800e414:	f107 0314 	add.w	r3, r7, #20
 800e418:	461a      	mov	r2, r3
 800e41a:	68b9      	ldr	r1, [r7, #8]
 800e41c:	68f8      	ldr	r0, [r7, #12]
 800e41e:	f7ff fe3f 	bl	800e0a0 <VL53L0X_get_total_xtalk_rate>
 800e422:	4603      	mov	r3, r0
 800e424:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800e428:	693b      	ldr	r3, [r7, #16]
 800e42a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e42e:	fb02 f303 	mul.w	r3, r2, r3
 800e432:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800e434:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e436:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e43a:	0c1b      	lsrs	r3, r3, #16
 800e43c:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800e43e:	697b      	ldr	r3, [r7, #20]
 800e440:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e444:	fb02 f303 	mul.w	r3, r2, r3
 800e448:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800e44c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800e450:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e452:	429a      	cmp	r2, r3
 800e454:	d902      	bls.n	800e45c <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800e456:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e458:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800e45c:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800e460:	2b00      	cmp	r3, #0
 800e462:	d168      	bne.n	800e536 <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800e46a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800e474:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800e478:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800e47c:	461a      	mov	r2, r3
 800e47e:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800e482:	68f8      	ldr	r0, [r7, #12]
 800e484:	f7fe feb2 	bl	800d1ec <VL53L0X_calc_timeout_mclks>
 800e488:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800e490:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800e49a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800e49e:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800e4a2:	461a      	mov	r2, r3
 800e4a4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800e4a8:	68f8      	ldr	r0, [r7, #12]
 800e4aa:	f7fe fe9f 	bl	800d1ec <VL53L0X_calc_timeout_mclks>
 800e4ae:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800e4b0:	2303      	movs	r3, #3
 800e4b2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 800e4b6:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800e4ba:	2b08      	cmp	r3, #8
 800e4bc:	d102      	bne.n	800e4c4 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 800e4be:	2302      	movs	r3, #2
 800e4c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800e4c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e4c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e4c8:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800e4ca:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800e4ce:	fb02 f303 	mul.w	r3, r2, r3
 800e4d2:	02db      	lsls	r3, r3, #11
 800e4d4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800e4d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e4dc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800e4e0:	4a53      	ldr	r2, [pc, #332]	; (800e630 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800e4e2:	fba2 2303 	umull	r2, r3, r2, r3
 800e4e6:	099b      	lsrs	r3, r3, #6
 800e4e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 800e4ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e4f0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e4f2:	fb02 f303 	mul.w	r3, r2, r3
 800e4f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800e4fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e4fe:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800e502:	4a4b      	ldr	r2, [pc, #300]	; (800e630 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800e504:	fba2 2303 	umull	r2, r3, r2, r3
 800e508:	099b      	lsrs	r3, r3, #6
 800e50a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800e50e:	693b      	ldr	r3, [r7, #16]
 800e510:	3380      	adds	r3, #128	; 0x80
 800e512:	0a1b      	lsrs	r3, r3, #8
 800e514:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800e516:	693a      	ldr	r2, [r7, #16]
 800e518:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e51c:	fb02 f303 	mul.w	r3, r2, r3
 800e520:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800e524:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800e528:	3380      	adds	r3, #128	; 0x80
 800e52a:	0a1b      	lsrs	r3, r3, #8
 800e52c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800e530:	693b      	ldr	r3, [r7, #16]
 800e532:	021b      	lsls	r3, r3, #8
 800e534:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800e536:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d002      	beq.n	800e544 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 800e53e:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800e542:	e15e      	b.n	800e802 <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 800e544:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e546:	2b00      	cmp	r3, #0
 800e548:	d10c      	bne.n	800e564 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e550:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e558:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 800e55c:	683b      	ldr	r3, [r7, #0]
 800e55e:	2200      	movs	r2, #0
 800e560:	601a      	str	r2, [r3, #0]
 800e562:	e14c      	b.n	800e7fe <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 800e564:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d102      	bne.n	800e572 <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 800e56c:	2301      	movs	r3, #1
 800e56e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800e572:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e576:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800e578:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e57a:	041a      	lsls	r2, r3, #16
 800e57c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e57e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e582:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800e586:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e58a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e58c:	429a      	cmp	r2, r3
 800e58e:	d902      	bls.n	800e596 <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800e590:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e592:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800e596:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e59a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800e59e:	fb02 f303 	mul.w	r3, r2, r3
 800e5a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800e5a6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800e5aa:	4613      	mov	r3, r2
 800e5ac:	005b      	lsls	r3, r3, #1
 800e5ae:	4413      	add	r3, r2
 800e5b0:	009b      	lsls	r3, r3, #2
 800e5b2:	4618      	mov	r0, r3
 800e5b4:	f7fe f875 	bl	800c6a2 <VL53L0X_isqrt>
 800e5b8:	4603      	mov	r3, r0
 800e5ba:	005b      	lsls	r3, r3, #1
 800e5bc:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800e5be:	68bb      	ldr	r3, [r7, #8]
 800e5c0:	891b      	ldrh	r3, [r3, #8]
 800e5c2:	461a      	mov	r2, r3
 800e5c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e5c6:	fb02 f303 	mul.w	r3, r2, r3
 800e5ca:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800e5cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e5ce:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800e5d0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e5d4:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800e5d6:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800e5d8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800e5dc:	4a14      	ldr	r2, [pc, #80]	; (800e630 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800e5de:	fba2 2303 	umull	r2, r3, r2, r3
 800e5e2:	099b      	lsrs	r3, r3, #6
 800e5e4:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800e5e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e5e8:	041b      	lsls	r3, r3, #16
 800e5ea:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800e5ee:	4a10      	ldr	r2, [pc, #64]	; (800e630 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800e5f0:	fba2 2303 	umull	r2, r3, r2, r3
 800e5f4:	099b      	lsrs	r3, r3, #6
 800e5f6:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800e5f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5fa:	021b      	lsls	r3, r3, #8
 800e5fc:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800e5fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e602:	fbb2 f3f3 	udiv	r3, r2, r3
 800e606:	2b00      	cmp	r3, #0
 800e608:	bfb8      	it	lt
 800e60a:	425b      	neglt	r3, r3
 800e60c:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800e60e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e610:	021b      	lsls	r3, r3, #8
 800e612:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800e614:	68bb      	ldr	r3, [r7, #8]
 800e616:	7e1b      	ldrb	r3, [r3, #24]
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d00b      	beq.n	800e634 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 800e61c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800e620:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e624:	e033      	b.n	800e68e <VL53L0X_calc_sigma_estimate+0x30e>
 800e626:	bf00      	nop
 800e628:	028f87ae 	.word	0x028f87ae
 800e62c:	0006999a 	.word	0x0006999a
 800e630:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800e634:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e636:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e63a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e63e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800e642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e644:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800e648:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e64c:	fb02 f303 	mul.w	r3, r2, r3
 800e650:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800e654:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800e658:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e65a:	4413      	add	r3, r2
 800e65c:	0c1b      	lsrs	r3, r3, #16
 800e65e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800e662:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e666:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800e66a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800e66e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e672:	085b      	lsrs	r3, r3, #1
 800e674:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800e678:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e67c:	fb03 f303 	mul.w	r3, r3, r3
 800e680:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800e684:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e688:	0b9b      	lsrs	r3, r3, #14
 800e68a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800e68e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e692:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e694:	fb02 f303 	mul.w	r3, r2, r3
 800e698:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800e69a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e69c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e6a0:	0c1b      	lsrs	r3, r3, #16
 800e6a2:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800e6a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6a6:	fb03 f303 	mul.w	r3, r3, r3
 800e6aa:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 800e6ac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e6b0:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800e6b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6b4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e6b8:	0c1b      	lsrs	r3, r3, #16
 800e6ba:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800e6bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6be:	fb03 f303 	mul.w	r3, r3, r3
 800e6c2:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800e6c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e6c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6c8:	4413      	add	r3, r2
 800e6ca:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800e6cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e6ce:	f7fd ffe8 	bl	800c6a2 <VL53L0X_isqrt>
 800e6d2:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800e6d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6d6:	041b      	lsls	r3, r3, #16
 800e6d8:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800e6da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6dc:	3332      	adds	r3, #50	; 0x32
 800e6de:	4a4b      	ldr	r2, [pc, #300]	; (800e80c <VL53L0X_calc_sigma_estimate+0x48c>)
 800e6e0:	fba2 2303 	umull	r2, r3, r2, r3
 800e6e4:	095a      	lsrs	r2, r3, #5
 800e6e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e6e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800e6ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800e6f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e6f4:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800e6f8:	fb02 f303 	mul.w	r3, r2, r3
 800e6fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800e700:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e704:	f241 3388 	movw	r3, #5000	; 0x1388
 800e708:	4413      	add	r3, r2
 800e70a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 800e70e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e712:	4a3f      	ldr	r2, [pc, #252]	; (800e810 <VL53L0X_calc_sigma_estimate+0x490>)
 800e714:	fba2 2303 	umull	r2, r3, r2, r3
 800e718:	0b5b      	lsrs	r3, r3, #13
 800e71a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800e71e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e722:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e724:	429a      	cmp	r2, r3
 800e726:	d902      	bls.n	800e72e <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800e728:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e72a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800e72e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800e732:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e736:	4413      	add	r3, r2
 800e738:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800e73c:	4a35      	ldr	r2, [pc, #212]	; (800e814 <VL53L0X_calc_sigma_estimate+0x494>)
 800e73e:	fba2 2303 	umull	r2, r3, r2, r3
 800e742:	099b      	lsrs	r3, r3, #6
 800e744:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800e746:	6a3b      	ldr	r3, [r7, #32]
 800e748:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800e74a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e74e:	441a      	add	r2, r3
 800e750:	6a3b      	ldr	r3, [r7, #32]
 800e752:	fbb2 f3f3 	udiv	r3, r2, r3
 800e756:	4618      	mov	r0, r3
 800e758:	f7fd ffa3 	bl	800c6a2 <VL53L0X_isqrt>
 800e75c:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800e75e:	69fb      	ldr	r3, [r7, #28]
 800e760:	021b      	lsls	r3, r3, #8
 800e762:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800e764:	69fb      	ldr	r3, [r7, #28]
 800e766:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800e76a:	4a2a      	ldr	r2, [pc, #168]	; (800e814 <VL53L0X_calc_sigma_estimate+0x494>)
 800e76c:	fba2 2303 	umull	r2, r3, r2, r3
 800e770:	099b      	lsrs	r3, r3, #6
 800e772:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800e774:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e778:	fb03 f303 	mul.w	r3, r3, r3
 800e77c:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800e77e:	69fb      	ldr	r3, [r7, #28]
 800e780:	fb03 f303 	mul.w	r3, r3, r3
 800e784:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800e786:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e78a:	4413      	add	r3, r2
 800e78c:	4618      	mov	r0, r3
 800e78e:	f7fd ff88 	bl	800c6a2 <VL53L0X_isqrt>
 800e792:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800e794:	69bb      	ldr	r3, [r7, #24]
 800e796:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e79a:	fb02 f303 	mul.w	r3, r2, r3
 800e79e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800e7a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d009      	beq.n	800e7bc <VL53L0X_calc_sigma_estimate+0x43c>
 800e7a8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d005      	beq.n	800e7bc <VL53L0X_calc_sigma_estimate+0x43c>
 800e7b0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800e7b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e7b8:	429a      	cmp	r2, r3
 800e7ba:	d903      	bls.n	800e7c4 <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800e7bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e7c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800e7ca:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	681a      	ldr	r2, [r3, #0]
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 800e7d6:	6939      	ldr	r1, [r7, #16]
 800e7d8:	683b      	ldr	r3, [r7, #0]
 800e7da:	9303      	str	r3, [sp, #12]
 800e7dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e7e0:	9302      	str	r3, [sp, #8]
 800e7e2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e7e6:	9301      	str	r3, [sp, #4]
 800e7e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e7ea:	9300      	str	r3, [sp, #0]
 800e7ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e7f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e7f2:	68f8      	ldr	r0, [r7, #12]
 800e7f4:	f7ff fca8 	bl	800e148 <VL53L0X_calc_dmax>
 800e7f8:	4603      	mov	r3, r0
 800e7fa:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800e7fe:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 800e802:	4618      	mov	r0, r3
 800e804:	37c0      	adds	r7, #192	; 0xc0
 800e806:	46bd      	mov	sp, r7
 800e808:	bd80      	pop	{r7, pc}
 800e80a:	bf00      	nop
 800e80c:	51eb851f 	.word	0x51eb851f
 800e810:	d1b71759 	.word	0xd1b71759
 800e814:	10624dd3 	.word	0x10624dd3

0800e818 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800e818:	b580      	push	{r7, lr}
 800e81a:	b090      	sub	sp, #64	; 0x40
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	60f8      	str	r0, [r7, #12]
 800e820:	607a      	str	r2, [r7, #4]
 800e822:	461a      	mov	r2, r3
 800e824:	460b      	mov	r3, r1
 800e826:	72fb      	strb	r3, [r7, #11]
 800e828:	4613      	mov	r3, r2
 800e82a:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e82c:	2300      	movs	r3, #0
 800e82e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800e832:	2300      	movs	r3, #0
 800e834:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800e838:	2300      	movs	r3, #0
 800e83a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800e83e:	2300      	movs	r3, #0
 800e840:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800e844:	2300      	movs	r3, #0
 800e846:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800e84a:	2300      	movs	r3, #0
 800e84c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800e850:	2300      	movs	r3, #0
 800e852:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800e856:	2300      	movs	r3, #0
 800e858:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800e85c:	2300      	movs	r3, #0
 800e85e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800e862:	2300      	movs	r3, #0
 800e864:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800e866:	2300      	movs	r3, #0
 800e868:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800e86a:	7afb      	ldrb	r3, [r7, #11]
 800e86c:	10db      	asrs	r3, r3, #3
 800e86e:	b2db      	uxtb	r3, r3
 800e870:	f003 030f 	and.w	r3, r3, #15
 800e874:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800e878:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d017      	beq.n	800e8b0 <VL53L0X_get_pal_range_status+0x98>
 800e880:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e884:	2b05      	cmp	r3, #5
 800e886:	d013      	beq.n	800e8b0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800e888:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e88c:	2b07      	cmp	r3, #7
 800e88e:	d00f      	beq.n	800e8b0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800e890:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e894:	2b0c      	cmp	r3, #12
 800e896:	d00b      	beq.n	800e8b0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800e898:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e89c:	2b0d      	cmp	r3, #13
 800e89e:	d007      	beq.n	800e8b0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800e8a0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e8a4:	2b0e      	cmp	r3, #14
 800e8a6:	d003      	beq.n	800e8b0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800e8a8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e8ac:	2b0f      	cmp	r3, #15
 800e8ae:	d103      	bne.n	800e8b8 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800e8b0:	2301      	movs	r3, #1
 800e8b2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800e8b6:	e002      	b.n	800e8be <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800e8b8:	2300      	movs	r3, #0
 800e8ba:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800e8be:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d109      	bne.n	800e8da <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800e8c6:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800e8ca:	461a      	mov	r2, r3
 800e8cc:	2100      	movs	r1, #0
 800e8ce:	68f8      	ldr	r0, [r7, #12]
 800e8d0:	f7fc f980 	bl	800abd4 <VL53L0X_GetLimitCheckEnable>
 800e8d4:	4603      	mov	r3, r0
 800e8d6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800e8da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d02e      	beq.n	800e940 <VL53L0X_get_pal_range_status+0x128>
 800e8e2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d12a      	bne.n	800e940 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800e8ea:	f107 0310 	add.w	r3, r7, #16
 800e8ee:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800e8f2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e8f4:	68f8      	ldr	r0, [r7, #12]
 800e8f6:	f7ff fd43 	bl	800e380 <VL53L0X_calc_sigma_estimate>
 800e8fa:	4603      	mov	r3, r0
 800e8fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800e900:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e904:	2b00      	cmp	r3, #0
 800e906:	d103      	bne.n	800e910 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800e908:	693b      	ldr	r3, [r7, #16]
 800e90a:	b29a      	uxth	r2, r3
 800e90c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e90e:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800e910:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e914:	2b00      	cmp	r3, #0
 800e916:	d113      	bne.n	800e940 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800e918:	f107 0320 	add.w	r3, r7, #32
 800e91c:	461a      	mov	r2, r3
 800e91e:	2100      	movs	r1, #0
 800e920:	68f8      	ldr	r0, [r7, #12]
 800e922:	f7fc f9dd 	bl	800ace0 <VL53L0X_GetLimitCheckValue>
 800e926:	4603      	mov	r3, r0
 800e928:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800e92c:	6a3b      	ldr	r3, [r7, #32]
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d006      	beq.n	800e940 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800e932:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e934:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800e936:	429a      	cmp	r2, r3
 800e938:	d902      	bls.n	800e940 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800e93a:	2301      	movs	r3, #1
 800e93c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800e940:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e944:	2b00      	cmp	r3, #0
 800e946:	d109      	bne.n	800e95c <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800e948:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800e94c:	461a      	mov	r2, r3
 800e94e:	2102      	movs	r1, #2
 800e950:	68f8      	ldr	r0, [r7, #12]
 800e952:	f7fc f93f 	bl	800abd4 <VL53L0X_GetLimitCheckEnable>
 800e956:	4603      	mov	r3, r0
 800e958:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800e95c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800e960:	2b00      	cmp	r3, #0
 800e962:	d044      	beq.n	800e9ee <VL53L0X_get_pal_range_status+0x1d6>
 800e964:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d140      	bne.n	800e9ee <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800e96c:	f107 031c 	add.w	r3, r7, #28
 800e970:	461a      	mov	r2, r3
 800e972:	2102      	movs	r1, #2
 800e974:	68f8      	ldr	r0, [r7, #12]
 800e976:	f7fc f9b3 	bl	800ace0 <VL53L0X_GetLimitCheckValue>
 800e97a:	4603      	mov	r3, r0
 800e97c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800e980:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e984:	2b00      	cmp	r3, #0
 800e986:	d107      	bne.n	800e998 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800e988:	2201      	movs	r2, #1
 800e98a:	21ff      	movs	r1, #255	; 0xff
 800e98c:	68f8      	ldr	r0, [r7, #12]
 800e98e:	f000 f9bb 	bl	800ed08 <VL53L0X_WrByte>
 800e992:	4603      	mov	r3, r0
 800e994:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800e998:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d109      	bne.n	800e9b4 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 800e9a0:	f107 0316 	add.w	r3, r7, #22
 800e9a4:	461a      	mov	r2, r3
 800e9a6:	21b6      	movs	r1, #182	; 0xb6
 800e9a8:	68f8      	ldr	r0, [r7, #12]
 800e9aa:	f000 fa59 	bl	800ee60 <VL53L0X_RdWord>
 800e9ae:	4603      	mov	r3, r0
 800e9b0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800e9b4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d107      	bne.n	800e9cc <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800e9bc:	2200      	movs	r2, #0
 800e9be:	21ff      	movs	r1, #255	; 0xff
 800e9c0:	68f8      	ldr	r0, [r7, #12]
 800e9c2:	f000 f9a1 	bl	800ed08 <VL53L0X_WrByte>
 800e9c6:	4603      	mov	r3, r0
 800e9c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800e9cc:	8afb      	ldrh	r3, [r7, #22]
 800e9ce:	025b      	lsls	r3, r3, #9
 800e9d0:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e9d6:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 800e9da:	69fb      	ldr	r3, [r7, #28]
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d006      	beq.n	800e9ee <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800e9e0:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800e9e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e9e4:	429a      	cmp	r2, r3
 800e9e6:	d902      	bls.n	800e9ee <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800e9e8:	2301      	movs	r3, #1
 800e9ea:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800e9ee:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d109      	bne.n	800ea0a <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800e9f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e9fa:	461a      	mov	r2, r3
 800e9fc:	2103      	movs	r1, #3
 800e9fe:	68f8      	ldr	r0, [r7, #12]
 800ea00:	f7fc f8e8 	bl	800abd4 <VL53L0X_GetLimitCheckEnable>
 800ea04:	4603      	mov	r3, r0
 800ea06:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800ea0a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d023      	beq.n	800ea5a <VL53L0X_get_pal_range_status+0x242>
 800ea12:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d11f      	bne.n	800ea5a <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800ea1a:	893b      	ldrh	r3, [r7, #8]
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d102      	bne.n	800ea26 <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800ea20:	2300      	movs	r3, #0
 800ea22:	637b      	str	r3, [r7, #52]	; 0x34
 800ea24:	e005      	b.n	800ea32 <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	021a      	lsls	r2, r3, #8
 800ea2a:	893b      	ldrh	r3, [r7, #8]
 800ea2c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ea30:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800ea32:	f107 0318 	add.w	r3, r7, #24
 800ea36:	461a      	mov	r2, r3
 800ea38:	2103      	movs	r1, #3
 800ea3a:	68f8      	ldr	r0, [r7, #12]
 800ea3c:	f7fc f950 	bl	800ace0 <VL53L0X_GetLimitCheckValue>
 800ea40:	4603      	mov	r3, r0
 800ea42:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800ea46:	69bb      	ldr	r3, [r7, #24]
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d006      	beq.n	800ea5a <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800ea4c:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800ea4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ea50:	429a      	cmp	r2, r3
 800ea52:	d202      	bcs.n	800ea5a <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800ea54:	2301      	movs	r3, #1
 800ea56:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ea5a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d14a      	bne.n	800eaf8 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800ea62:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800ea66:	2b01      	cmp	r3, #1
 800ea68:	d103      	bne.n	800ea72 <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800ea6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea6c:	22ff      	movs	r2, #255	; 0xff
 800ea6e:	701a      	strb	r2, [r3, #0]
 800ea70:	e042      	b.n	800eaf8 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800ea72:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ea76:	2b01      	cmp	r3, #1
 800ea78:	d007      	beq.n	800ea8a <VL53L0X_get_pal_range_status+0x272>
 800ea7a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ea7e:	2b02      	cmp	r3, #2
 800ea80:	d003      	beq.n	800ea8a <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800ea82:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ea86:	2b03      	cmp	r3, #3
 800ea88:	d103      	bne.n	800ea92 <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800ea8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea8c:	2205      	movs	r2, #5
 800ea8e:	701a      	strb	r2, [r3, #0]
 800ea90:	e032      	b.n	800eaf8 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800ea92:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ea96:	2b06      	cmp	r3, #6
 800ea98:	d003      	beq.n	800eaa2 <VL53L0X_get_pal_range_status+0x28a>
 800ea9a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ea9e:	2b09      	cmp	r3, #9
 800eaa0:	d103      	bne.n	800eaaa <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800eaa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eaa4:	2204      	movs	r2, #4
 800eaa6:	701a      	strb	r2, [r3, #0]
 800eaa8:	e026      	b.n	800eaf8 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800eaaa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800eaae:	2b08      	cmp	r3, #8
 800eab0:	d007      	beq.n	800eac2 <VL53L0X_get_pal_range_status+0x2aa>
 800eab2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800eab6:	2b0a      	cmp	r3, #10
 800eab8:	d003      	beq.n	800eac2 <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800eaba:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800eabe:	2b01      	cmp	r3, #1
 800eac0:	d103      	bne.n	800eaca <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800eac2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eac4:	2203      	movs	r2, #3
 800eac6:	701a      	strb	r2, [r3, #0]
 800eac8:	e016      	b.n	800eaf8 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800eaca:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800eace:	2b04      	cmp	r3, #4
 800ead0:	d003      	beq.n	800eada <VL53L0X_get_pal_range_status+0x2c2>
 800ead2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800ead6:	2b01      	cmp	r3, #1
 800ead8:	d103      	bne.n	800eae2 <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800eada:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eadc:	2202      	movs	r2, #2
 800eade:	701a      	strb	r2, [r3, #0]
 800eae0:	e00a      	b.n	800eaf8 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800eae2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800eae6:	2b01      	cmp	r3, #1
 800eae8:	d103      	bne.n	800eaf2 <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800eaea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eaec:	2201      	movs	r2, #1
 800eaee:	701a      	strb	r2, [r3, #0]
 800eaf0:	e002      	b.n	800eaf8 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800eaf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eaf4:	2200      	movs	r2, #0
 800eaf6:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800eaf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eafa:	781b      	ldrb	r3, [r3, #0]
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d102      	bne.n	800eb06 <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800eb00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eb02:	2200      	movs	r2, #0
 800eb04:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800eb06:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800eb0a:	461a      	mov	r2, r3
 800eb0c:	2101      	movs	r1, #1
 800eb0e:	68f8      	ldr	r0, [r7, #12]
 800eb10:	f7fc f860 	bl	800abd4 <VL53L0X_GetLimitCheckEnable>
 800eb14:	4603      	mov	r3, r0
 800eb16:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800eb1a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d14f      	bne.n	800ebc2 <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800eb22:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d003      	beq.n	800eb32 <VL53L0X_get_pal_range_status+0x31a>
 800eb2a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800eb2e:	2b01      	cmp	r3, #1
 800eb30:	d103      	bne.n	800eb3a <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800eb32:	2301      	movs	r3, #1
 800eb34:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb38:	e002      	b.n	800eb40 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800eb3a:	2300      	movs	r3, #0
 800eb3c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800eb46:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800eb4a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800eb4e:	2b04      	cmp	r3, #4
 800eb50:	d003      	beq.n	800eb5a <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800eb52:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d103      	bne.n	800eb62 <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800eb5a:	2301      	movs	r3, #1
 800eb5c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb60:	e002      	b.n	800eb68 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800eb62:	2300      	movs	r3, #0
 800eb64:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800eb6e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800eb72:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d003      	beq.n	800eb82 <VL53L0X_get_pal_range_status+0x36a>
 800eb7a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800eb7e:	2b01      	cmp	r3, #1
 800eb80:	d103      	bne.n	800eb8a <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800eb82:	2301      	movs	r3, #1
 800eb84:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb88:	e002      	b.n	800eb90 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800eb8a:	2300      	movs	r3, #0
 800eb8c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800eb96:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800eb9a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d003      	beq.n	800ebaa <VL53L0X_get_pal_range_status+0x392>
 800eba2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800eba6:	2b01      	cmp	r3, #1
 800eba8:	d103      	bne.n	800ebb2 <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800ebaa:	2301      	movs	r3, #1
 800ebac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ebb0:	e002      	b.n	800ebb8 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800ebb2:	2300      	movs	r3, #0
 800ebb4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800ebbe:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ebc2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800ebc6:	4618      	mov	r0, r3
 800ebc8:	3740      	adds	r7, #64	; 0x40
 800ebca:	46bd      	mov	sp, r7
 800ebcc:	bd80      	pop	{r7, pc}

0800ebce <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800ebce:	b580      	push	{r7, lr}
 800ebd0:	b088      	sub	sp, #32
 800ebd2:	af02      	add	r7, sp, #8
 800ebd4:	60f8      	str	r0, [r7, #12]
 800ebd6:	60b9      	str	r1, [r7, #8]
 800ebd8:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	330a      	adds	r3, #10
 800ebde:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800ebec:	b299      	uxth	r1, r3
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	b29a      	uxth	r2, r3
 800ebf2:	697b      	ldr	r3, [r7, #20]
 800ebf4:	9300      	str	r3, [sp, #0]
 800ebf6:	4613      	mov	r3, r2
 800ebf8:	68ba      	ldr	r2, [r7, #8]
 800ebfa:	f7f6 fb35 	bl	8005268 <HAL_I2C_Master_Transmit>
 800ebfe:	4603      	mov	r3, r0
 800ec00:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800ec02:	693b      	ldr	r3, [r7, #16]
}
 800ec04:	4618      	mov	r0, r3
 800ec06:	3718      	adds	r7, #24
 800ec08:	46bd      	mov	sp, r7
 800ec0a:	bd80      	pop	{r7, pc}

0800ec0c <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800ec0c:	b580      	push	{r7, lr}
 800ec0e:	b088      	sub	sp, #32
 800ec10:	af02      	add	r7, sp, #8
 800ec12:	60f8      	str	r0, [r7, #12]
 800ec14:	60b9      	str	r1, [r7, #8]
 800ec16:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	330a      	adds	r3, #10
 800ec1c:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800ec2a:	f043 0301 	orr.w	r3, r3, #1
 800ec2e:	b2db      	uxtb	r3, r3
 800ec30:	b299      	uxth	r1, r3
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	b29a      	uxth	r2, r3
 800ec36:	697b      	ldr	r3, [r7, #20]
 800ec38:	9300      	str	r3, [sp, #0]
 800ec3a:	4613      	mov	r3, r2
 800ec3c:	68ba      	ldr	r2, [r7, #8]
 800ec3e:	f7f6 fc07 	bl	8005450 <HAL_I2C_Master_Receive>
 800ec42:	4603      	mov	r3, r0
 800ec44:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800ec46:	693b      	ldr	r3, [r7, #16]
}
 800ec48:	4618      	mov	r0, r3
 800ec4a:	3718      	adds	r7, #24
 800ec4c:	46bd      	mov	sp, r7
 800ec4e:	bd80      	pop	{r7, pc}

0800ec50 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800ec50:	b580      	push	{r7, lr}
 800ec52:	b086      	sub	sp, #24
 800ec54:	af00      	add	r7, sp, #0
 800ec56:	60f8      	str	r0, [r7, #12]
 800ec58:	607a      	str	r2, [r7, #4]
 800ec5a:	603b      	str	r3, [r7, #0]
 800ec5c:	460b      	mov	r3, r1
 800ec5e:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ec60:	2300      	movs	r3, #0
 800ec62:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800ec64:	683b      	ldr	r3, [r7, #0]
 800ec66:	2b3f      	cmp	r3, #63	; 0x3f
 800ec68:	d902      	bls.n	800ec70 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800ec6a:	f06f 0303 	mvn.w	r3, #3
 800ec6e:	e016      	b.n	800ec9e <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 800ec70:	4a0d      	ldr	r2, [pc, #52]	; (800eca8 <VL53L0X_WriteMulti+0x58>)
 800ec72:	7afb      	ldrb	r3, [r7, #11]
 800ec74:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800ec76:	683a      	ldr	r2, [r7, #0]
 800ec78:	6879      	ldr	r1, [r7, #4]
 800ec7a:	480c      	ldr	r0, [pc, #48]	; (800ecac <VL53L0X_WriteMulti+0x5c>)
 800ec7c:	f003 fda6 	bl	80127cc <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800ec80:	683b      	ldr	r3, [r7, #0]
 800ec82:	3301      	adds	r3, #1
 800ec84:	461a      	mov	r2, r3
 800ec86:	4908      	ldr	r1, [pc, #32]	; (800eca8 <VL53L0X_WriteMulti+0x58>)
 800ec88:	68f8      	ldr	r0, [r7, #12]
 800ec8a:	f7ff ffa0 	bl	800ebce <_I2CWrite>
 800ec8e:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ec90:	693b      	ldr	r3, [r7, #16]
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d001      	beq.n	800ec9a <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ec96:	23ec      	movs	r3, #236	; 0xec
 800ec98:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800ec9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ec9e:	4618      	mov	r0, r3
 800eca0:	3718      	adds	r7, #24
 800eca2:	46bd      	mov	sp, r7
 800eca4:	bd80      	pop	{r7, pc}
 800eca6:	bf00      	nop
 800eca8:	2000c56c 	.word	0x2000c56c
 800ecac:	2000c56d 	.word	0x2000c56d

0800ecb0 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800ecb0:	b580      	push	{r7, lr}
 800ecb2:	b086      	sub	sp, #24
 800ecb4:	af00      	add	r7, sp, #0
 800ecb6:	60f8      	str	r0, [r7, #12]
 800ecb8:	607a      	str	r2, [r7, #4]
 800ecba:	603b      	str	r3, [r7, #0]
 800ecbc:	460b      	mov	r3, r1
 800ecbe:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ecc0:	2300      	movs	r3, #0
 800ecc2:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800ecc4:	f107 030b 	add.w	r3, r7, #11
 800ecc8:	2201      	movs	r2, #1
 800ecca:	4619      	mov	r1, r3
 800eccc:	68f8      	ldr	r0, [r7, #12]
 800ecce:	f7ff ff7e 	bl	800ebce <_I2CWrite>
 800ecd2:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ecd4:	693b      	ldr	r3, [r7, #16]
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d002      	beq.n	800ece0 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ecda:	23ec      	movs	r3, #236	; 0xec
 800ecdc:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ecde:	e00c      	b.n	800ecfa <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800ece0:	683a      	ldr	r2, [r7, #0]
 800ece2:	6879      	ldr	r1, [r7, #4]
 800ece4:	68f8      	ldr	r0, [r7, #12]
 800ece6:	f7ff ff91 	bl	800ec0c <_I2CRead>
 800ecea:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ecec:	693b      	ldr	r3, [r7, #16]
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d002      	beq.n	800ecf8 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ecf2:	23ec      	movs	r3, #236	; 0xec
 800ecf4:	75fb      	strb	r3, [r7, #23]
 800ecf6:	e000      	b.n	800ecfa <VL53L0X_ReadMulti+0x4a>
    }
done:
 800ecf8:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800ecfa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ecfe:	4618      	mov	r0, r3
 800ed00:	3718      	adds	r7, #24
 800ed02:	46bd      	mov	sp, r7
 800ed04:	bd80      	pop	{r7, pc}
	...

0800ed08 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800ed08:	b580      	push	{r7, lr}
 800ed0a:	b084      	sub	sp, #16
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	6078      	str	r0, [r7, #4]
 800ed10:	460b      	mov	r3, r1
 800ed12:	70fb      	strb	r3, [r7, #3]
 800ed14:	4613      	mov	r3, r2
 800ed16:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ed18:	2300      	movs	r3, #0
 800ed1a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800ed1c:	4a0b      	ldr	r2, [pc, #44]	; (800ed4c <VL53L0X_WrByte+0x44>)
 800ed1e:	78fb      	ldrb	r3, [r7, #3]
 800ed20:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800ed22:	4a0a      	ldr	r2, [pc, #40]	; (800ed4c <VL53L0X_WrByte+0x44>)
 800ed24:	78bb      	ldrb	r3, [r7, #2]
 800ed26:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800ed28:	2202      	movs	r2, #2
 800ed2a:	4908      	ldr	r1, [pc, #32]	; (800ed4c <VL53L0X_WrByte+0x44>)
 800ed2c:	6878      	ldr	r0, [r7, #4]
 800ed2e:	f7ff ff4e 	bl	800ebce <_I2CWrite>
 800ed32:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800ed34:	68bb      	ldr	r3, [r7, #8]
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d001      	beq.n	800ed3e <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ed3a:	23ec      	movs	r3, #236	; 0xec
 800ed3c:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800ed3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ed42:	4618      	mov	r0, r3
 800ed44:	3710      	adds	r7, #16
 800ed46:	46bd      	mov	sp, r7
 800ed48:	bd80      	pop	{r7, pc}
 800ed4a:	bf00      	nop
 800ed4c:	2000c56c 	.word	0x2000c56c

0800ed50 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800ed50:	b580      	push	{r7, lr}
 800ed52:	b084      	sub	sp, #16
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	6078      	str	r0, [r7, #4]
 800ed58:	460b      	mov	r3, r1
 800ed5a:	70fb      	strb	r3, [r7, #3]
 800ed5c:	4613      	mov	r3, r2
 800ed5e:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ed60:	2300      	movs	r3, #0
 800ed62:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800ed64:	4a0e      	ldr	r2, [pc, #56]	; (800eda0 <VL53L0X_WrWord+0x50>)
 800ed66:	78fb      	ldrb	r3, [r7, #3]
 800ed68:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800ed6a:	883b      	ldrh	r3, [r7, #0]
 800ed6c:	0a1b      	lsrs	r3, r3, #8
 800ed6e:	b29b      	uxth	r3, r3
 800ed70:	b2da      	uxtb	r2, r3
 800ed72:	4b0b      	ldr	r3, [pc, #44]	; (800eda0 <VL53L0X_WrWord+0x50>)
 800ed74:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800ed76:	883b      	ldrh	r3, [r7, #0]
 800ed78:	b2da      	uxtb	r2, r3
 800ed7a:	4b09      	ldr	r3, [pc, #36]	; (800eda0 <VL53L0X_WrWord+0x50>)
 800ed7c:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800ed7e:	2203      	movs	r2, #3
 800ed80:	4907      	ldr	r1, [pc, #28]	; (800eda0 <VL53L0X_WrWord+0x50>)
 800ed82:	6878      	ldr	r0, [r7, #4]
 800ed84:	f7ff ff23 	bl	800ebce <_I2CWrite>
 800ed88:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800ed8a:	68bb      	ldr	r3, [r7, #8]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d001      	beq.n	800ed94 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ed90:	23ec      	movs	r3, #236	; 0xec
 800ed92:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800ed94:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ed98:	4618      	mov	r0, r3
 800ed9a:	3710      	adds	r7, #16
 800ed9c:	46bd      	mov	sp, r7
 800ed9e:	bd80      	pop	{r7, pc}
 800eda0:	2000c56c 	.word	0x2000c56c

0800eda4 <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800eda4:	b580      	push	{r7, lr}
 800eda6:	b084      	sub	sp, #16
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	6078      	str	r0, [r7, #4]
 800edac:	4608      	mov	r0, r1
 800edae:	4611      	mov	r1, r2
 800edb0:	461a      	mov	r2, r3
 800edb2:	4603      	mov	r3, r0
 800edb4:	70fb      	strb	r3, [r7, #3]
 800edb6:	460b      	mov	r3, r1
 800edb8:	70bb      	strb	r3, [r7, #2]
 800edba:	4613      	mov	r3, r2
 800edbc:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800edbe:	2300      	movs	r3, #0
 800edc0:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800edc2:	f107 020e 	add.w	r2, r7, #14
 800edc6:	78fb      	ldrb	r3, [r7, #3]
 800edc8:	4619      	mov	r1, r3
 800edca:	6878      	ldr	r0, [r7, #4]
 800edcc:	f000 f81e 	bl	800ee0c <VL53L0X_RdByte>
 800edd0:	4603      	mov	r3, r0
 800edd2:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 800edd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d110      	bne.n	800edfe <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 800eddc:	7bba      	ldrb	r2, [r7, #14]
 800edde:	78bb      	ldrb	r3, [r7, #2]
 800ede0:	4013      	ands	r3, r2
 800ede2:	b2da      	uxtb	r2, r3
 800ede4:	787b      	ldrb	r3, [r7, #1]
 800ede6:	4313      	orrs	r3, r2
 800ede8:	b2db      	uxtb	r3, r3
 800edea:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800edec:	7bba      	ldrb	r2, [r7, #14]
 800edee:	78fb      	ldrb	r3, [r7, #3]
 800edf0:	4619      	mov	r1, r3
 800edf2:	6878      	ldr	r0, [r7, #4]
 800edf4:	f7ff ff88 	bl	800ed08 <VL53L0X_WrByte>
 800edf8:	4603      	mov	r3, r0
 800edfa:	73fb      	strb	r3, [r7, #15]
 800edfc:	e000      	b.n	800ee00 <VL53L0X_UpdateByte+0x5c>
        goto done;
 800edfe:	bf00      	nop
done:
    return Status;
 800ee00:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ee04:	4618      	mov	r0, r3
 800ee06:	3710      	adds	r7, #16
 800ee08:	46bd      	mov	sp, r7
 800ee0a:	bd80      	pop	{r7, pc}

0800ee0c <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800ee0c:	b580      	push	{r7, lr}
 800ee0e:	b086      	sub	sp, #24
 800ee10:	af00      	add	r7, sp, #0
 800ee12:	60f8      	str	r0, [r7, #12]
 800ee14:	460b      	mov	r3, r1
 800ee16:	607a      	str	r2, [r7, #4]
 800ee18:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ee1a:	2300      	movs	r3, #0
 800ee1c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800ee1e:	f107 030b 	add.w	r3, r7, #11
 800ee22:	2201      	movs	r2, #1
 800ee24:	4619      	mov	r1, r3
 800ee26:	68f8      	ldr	r0, [r7, #12]
 800ee28:	f7ff fed1 	bl	800ebce <_I2CWrite>
 800ee2c:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800ee2e:	693b      	ldr	r3, [r7, #16]
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d002      	beq.n	800ee3a <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ee34:	23ec      	movs	r3, #236	; 0xec
 800ee36:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ee38:	e00c      	b.n	800ee54 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 800ee3a:	2201      	movs	r2, #1
 800ee3c:	6879      	ldr	r1, [r7, #4]
 800ee3e:	68f8      	ldr	r0, [r7, #12]
 800ee40:	f7ff fee4 	bl	800ec0c <_I2CRead>
 800ee44:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ee46:	693b      	ldr	r3, [r7, #16]
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d002      	beq.n	800ee52 <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ee4c:	23ec      	movs	r3, #236	; 0xec
 800ee4e:	75fb      	strb	r3, [r7, #23]
 800ee50:	e000      	b.n	800ee54 <VL53L0X_RdByte+0x48>
    }
done:
 800ee52:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800ee54:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ee58:	4618      	mov	r0, r3
 800ee5a:	3718      	adds	r7, #24
 800ee5c:	46bd      	mov	sp, r7
 800ee5e:	bd80      	pop	{r7, pc}

0800ee60 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800ee60:	b580      	push	{r7, lr}
 800ee62:	b086      	sub	sp, #24
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	60f8      	str	r0, [r7, #12]
 800ee68:	460b      	mov	r3, r1
 800ee6a:	607a      	str	r2, [r7, #4]
 800ee6c:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ee6e:	2300      	movs	r3, #0
 800ee70:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800ee72:	f107 030b 	add.w	r3, r7, #11
 800ee76:	2201      	movs	r2, #1
 800ee78:	4619      	mov	r1, r3
 800ee7a:	68f8      	ldr	r0, [r7, #12]
 800ee7c:	f7ff fea7 	bl	800ebce <_I2CWrite>
 800ee80:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800ee82:	693b      	ldr	r3, [r7, #16]
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d002      	beq.n	800ee8e <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ee88:	23ec      	movs	r3, #236	; 0xec
 800ee8a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ee8c:	e017      	b.n	800eebe <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800ee8e:	2202      	movs	r2, #2
 800ee90:	490e      	ldr	r1, [pc, #56]	; (800eecc <VL53L0X_RdWord+0x6c>)
 800ee92:	68f8      	ldr	r0, [r7, #12]
 800ee94:	f7ff feba 	bl	800ec0c <_I2CRead>
 800ee98:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ee9a:	693b      	ldr	r3, [r7, #16]
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d002      	beq.n	800eea6 <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800eea0:	23ec      	movs	r3, #236	; 0xec
 800eea2:	75fb      	strb	r3, [r7, #23]
        goto done;
 800eea4:	e00b      	b.n	800eebe <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800eea6:	4b09      	ldr	r3, [pc, #36]	; (800eecc <VL53L0X_RdWord+0x6c>)
 800eea8:	781b      	ldrb	r3, [r3, #0]
 800eeaa:	b29b      	uxth	r3, r3
 800eeac:	021b      	lsls	r3, r3, #8
 800eeae:	b29a      	uxth	r2, r3
 800eeb0:	4b06      	ldr	r3, [pc, #24]	; (800eecc <VL53L0X_RdWord+0x6c>)
 800eeb2:	785b      	ldrb	r3, [r3, #1]
 800eeb4:	b29b      	uxth	r3, r3
 800eeb6:	4413      	add	r3, r2
 800eeb8:	b29a      	uxth	r2, r3
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 800eebe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800eec2:	4618      	mov	r0, r3
 800eec4:	3718      	adds	r7, #24
 800eec6:	46bd      	mov	sp, r7
 800eec8:	bd80      	pop	{r7, pc}
 800eeca:	bf00      	nop
 800eecc:	2000c56c 	.word	0x2000c56c

0800eed0 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 800eed0:	b580      	push	{r7, lr}
 800eed2:	b086      	sub	sp, #24
 800eed4:	af00      	add	r7, sp, #0
 800eed6:	60f8      	str	r0, [r7, #12]
 800eed8:	460b      	mov	r3, r1
 800eeda:	607a      	str	r2, [r7, #4]
 800eedc:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800eede:	2300      	movs	r3, #0
 800eee0:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800eee2:	f107 030b 	add.w	r3, r7, #11
 800eee6:	2201      	movs	r2, #1
 800eee8:	4619      	mov	r1, r3
 800eeea:	68f8      	ldr	r0, [r7, #12]
 800eeec:	f7ff fe6f 	bl	800ebce <_I2CWrite>
 800eef0:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800eef2:	693b      	ldr	r3, [r7, #16]
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d002      	beq.n	800eefe <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800eef8:	23ec      	movs	r3, #236	; 0xec
 800eefa:	75fb      	strb	r3, [r7, #23]
        goto done;
 800eefc:	e01b      	b.n	800ef36 <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800eefe:	2204      	movs	r2, #4
 800ef00:	4910      	ldr	r1, [pc, #64]	; (800ef44 <VL53L0X_RdDWord+0x74>)
 800ef02:	68f8      	ldr	r0, [r7, #12]
 800ef04:	f7ff fe82 	bl	800ec0c <_I2CRead>
 800ef08:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ef0a:	693b      	ldr	r3, [r7, #16]
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d002      	beq.n	800ef16 <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ef10:	23ec      	movs	r3, #236	; 0xec
 800ef12:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ef14:	e00f      	b.n	800ef36 <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800ef16:	4b0b      	ldr	r3, [pc, #44]	; (800ef44 <VL53L0X_RdDWord+0x74>)
 800ef18:	781b      	ldrb	r3, [r3, #0]
 800ef1a:	061a      	lsls	r2, r3, #24
 800ef1c:	4b09      	ldr	r3, [pc, #36]	; (800ef44 <VL53L0X_RdDWord+0x74>)
 800ef1e:	785b      	ldrb	r3, [r3, #1]
 800ef20:	041b      	lsls	r3, r3, #16
 800ef22:	441a      	add	r2, r3
 800ef24:	4b07      	ldr	r3, [pc, #28]	; (800ef44 <VL53L0X_RdDWord+0x74>)
 800ef26:	789b      	ldrb	r3, [r3, #2]
 800ef28:	021b      	lsls	r3, r3, #8
 800ef2a:	4413      	add	r3, r2
 800ef2c:	4a05      	ldr	r2, [pc, #20]	; (800ef44 <VL53L0X_RdDWord+0x74>)
 800ef2e:	78d2      	ldrb	r2, [r2, #3]
 800ef30:	441a      	add	r2, r3
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 800ef36:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ef3a:	4618      	mov	r0, r3
 800ef3c:	3718      	adds	r7, #24
 800ef3e:	46bd      	mov	sp, r7
 800ef40:	bd80      	pop	{r7, pc}
 800ef42:	bf00      	nop
 800ef44:	2000c56c 	.word	0x2000c56c

0800ef48 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 800ef48:	b580      	push	{r7, lr}
 800ef4a:	b084      	sub	sp, #16
 800ef4c:	af00      	add	r7, sp, #0
 800ef4e:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800ef50:	2300      	movs	r3, #0
 800ef52:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800ef54:	2002      	movs	r0, #2
 800ef56:	f7f5 fc35 	bl	80047c4 <HAL_Delay>
    return status;
 800ef5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ef5e:	4618      	mov	r0, r3
 800ef60:	3710      	adds	r7, #16
 800ef62:	46bd      	mov	sp, r7
 800ef64:	bd80      	pop	{r7, pc}
	...

0800ef68 <fourline_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool fourline_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 800ef68:	b580      	push	{r7, lr}
 800ef6a:	b082      	sub	sp, #8
 800ef6c:	af00      	add	r7, sp, #0
 800ef6e:	6078      	str	r0, [r7, #4]
 800ef70:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_fourline_activations_map, 1, params)) {
 800ef72:	683a      	ldr	r2, [r7, #0]
 800ef74:	2101      	movs	r1, #1
 800ef76:	4850      	ldr	r0, [pc, #320]	; (800f0b8 <fourline_configure_activations+0x150>)
 800ef78:	f000 fbea 	bl	800f750 <ai_platform_get_activations_map>
 800ef7c:	4603      	mov	r3, r0
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	f000 8090 	beq.w	800f0a4 <fourline_configure_activations+0x13c>
    /* Updating activations (byte) offsets */
    
    input_0_output_array.data = AI_PTR(g_fourline_activations_map[0] + 48);
 800ef84:	4b4c      	ldr	r3, [pc, #304]	; (800f0b8 <fourline_configure_activations+0x150>)
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	3330      	adds	r3, #48	; 0x30
 800ef8a:	4a4c      	ldr	r2, [pc, #304]	; (800f0bc <fourline_configure_activations+0x154>)
 800ef8c:	6093      	str	r3, [r2, #8]
    input_0_output_array.data_start = AI_PTR(g_fourline_activations_map[0] + 48);
 800ef8e:	4b4a      	ldr	r3, [pc, #296]	; (800f0b8 <fourline_configure_activations+0x150>)
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	3330      	adds	r3, #48	; 0x30
 800ef94:	4a49      	ldr	r2, [pc, #292]	; (800f0bc <fourline_configure_activations+0x154>)
 800ef96:	60d3      	str	r3, [r2, #12]
    
    conv2d_1_conv2d_output_array.data = AI_PTR(g_fourline_activations_map[0] + 256);
 800ef98:	4b47      	ldr	r3, [pc, #284]	; (800f0b8 <fourline_configure_activations+0x150>)
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800efa0:	4a47      	ldr	r2, [pc, #284]	; (800f0c0 <fourline_configure_activations+0x158>)
 800efa2:	6093      	str	r3, [r2, #8]
    conv2d_1_conv2d_output_array.data_start = AI_PTR(g_fourline_activations_map[0] + 256);
 800efa4:	4b44      	ldr	r3, [pc, #272]	; (800f0b8 <fourline_configure_activations+0x150>)
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800efac:	4a44      	ldr	r2, [pc, #272]	; (800f0c0 <fourline_configure_activations+0x158>)
 800efae:	60d3      	str	r3, [r2, #12]
    
    conv2d_1_output_array.data = AI_PTR(g_fourline_activations_map[0] + 256);
 800efb0:	4b41      	ldr	r3, [pc, #260]	; (800f0b8 <fourline_configure_activations+0x150>)
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800efb8:	4a42      	ldr	r2, [pc, #264]	; (800f0c4 <fourline_configure_activations+0x15c>)
 800efba:	6093      	str	r3, [r2, #8]
    conv2d_1_output_array.data_start = AI_PTR(g_fourline_activations_map[0] + 256);
 800efbc:	4b3e      	ldr	r3, [pc, #248]	; (800f0b8 <fourline_configure_activations+0x150>)
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800efc4:	4a3f      	ldr	r2, [pc, #252]	; (800f0c4 <fourline_configure_activations+0x15c>)
 800efc6:	60d3      	str	r3, [r2, #12]
    
    dense_6_dense_output_array.data = AI_PTR(g_fourline_activations_map[0] + 0);
 800efc8:	4b3b      	ldr	r3, [pc, #236]	; (800f0b8 <fourline_configure_activations+0x150>)
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	4a3e      	ldr	r2, [pc, #248]	; (800f0c8 <fourline_configure_activations+0x160>)
 800efce:	6093      	str	r3, [r2, #8]
    dense_6_dense_output_array.data_start = AI_PTR(g_fourline_activations_map[0] + 0);
 800efd0:	4b39      	ldr	r3, [pc, #228]	; (800f0b8 <fourline_configure_activations+0x150>)
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	4a3c      	ldr	r2, [pc, #240]	; (800f0c8 <fourline_configure_activations+0x160>)
 800efd6:	60d3      	str	r3, [r2, #12]
    
    dense_6_output_array.data = AI_PTR(g_fourline_activations_map[0] + 256);
 800efd8:	4b37      	ldr	r3, [pc, #220]	; (800f0b8 <fourline_configure_activations+0x150>)
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800efe0:	4a3a      	ldr	r2, [pc, #232]	; (800f0cc <fourline_configure_activations+0x164>)
 800efe2:	6093      	str	r3, [r2, #8]
    dense_6_output_array.data_start = AI_PTR(g_fourline_activations_map[0] + 256);
 800efe4:	4b34      	ldr	r3, [pc, #208]	; (800f0b8 <fourline_configure_activations+0x150>)
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800efec:	4a37      	ldr	r2, [pc, #220]	; (800f0cc <fourline_configure_activations+0x164>)
 800efee:	60d3      	str	r3, [r2, #12]
    
    dense_7_dense_output_array.data = AI_PTR(g_fourline_activations_map[0] + 0);
 800eff0:	4b31      	ldr	r3, [pc, #196]	; (800f0b8 <fourline_configure_activations+0x150>)
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	4a36      	ldr	r2, [pc, #216]	; (800f0d0 <fourline_configure_activations+0x168>)
 800eff6:	6093      	str	r3, [r2, #8]
    dense_7_dense_output_array.data_start = AI_PTR(g_fourline_activations_map[0] + 0);
 800eff8:	4b2f      	ldr	r3, [pc, #188]	; (800f0b8 <fourline_configure_activations+0x150>)
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	4a34      	ldr	r2, [pc, #208]	; (800f0d0 <fourline_configure_activations+0x168>)
 800effe:	60d3      	str	r3, [r2, #12]
    
    dense_7_output_array.data = AI_PTR(g_fourline_activations_map[0] + 256);
 800f000:	4b2d      	ldr	r3, [pc, #180]	; (800f0b8 <fourline_configure_activations+0x150>)
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800f008:	4a32      	ldr	r2, [pc, #200]	; (800f0d4 <fourline_configure_activations+0x16c>)
 800f00a:	6093      	str	r3, [r2, #8]
    dense_7_output_array.data_start = AI_PTR(g_fourline_activations_map[0] + 256);
 800f00c:	4b2a      	ldr	r3, [pc, #168]	; (800f0b8 <fourline_configure_activations+0x150>)
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800f014:	4a2f      	ldr	r2, [pc, #188]	; (800f0d4 <fourline_configure_activations+0x16c>)
 800f016:	60d3      	str	r3, [r2, #12]
    
    dense_8_dense_output_array.data = AI_PTR(g_fourline_activations_map[0] + 0);
 800f018:	4b27      	ldr	r3, [pc, #156]	; (800f0b8 <fourline_configure_activations+0x150>)
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	4a2e      	ldr	r2, [pc, #184]	; (800f0d8 <fourline_configure_activations+0x170>)
 800f01e:	6093      	str	r3, [r2, #8]
    dense_8_dense_output_array.data_start = AI_PTR(g_fourline_activations_map[0] + 0);
 800f020:	4b25      	ldr	r3, [pc, #148]	; (800f0b8 <fourline_configure_activations+0x150>)
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	4a2c      	ldr	r2, [pc, #176]	; (800f0d8 <fourline_configure_activations+0x170>)
 800f026:	60d3      	str	r3, [r2, #12]
    
    dense_8_output_array.data = AI_PTR(g_fourline_activations_map[0] + 256);
 800f028:	4b23      	ldr	r3, [pc, #140]	; (800f0b8 <fourline_configure_activations+0x150>)
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800f030:	4a2a      	ldr	r2, [pc, #168]	; (800f0dc <fourline_configure_activations+0x174>)
 800f032:	6093      	str	r3, [r2, #8]
    dense_8_output_array.data_start = AI_PTR(g_fourline_activations_map[0] + 256);
 800f034:	4b20      	ldr	r3, [pc, #128]	; (800f0b8 <fourline_configure_activations+0x150>)
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800f03c:	4a27      	ldr	r2, [pc, #156]	; (800f0dc <fourline_configure_activations+0x174>)
 800f03e:	60d3      	str	r3, [r2, #12]
    
    dense_9_dense_output_array.data = AI_PTR(g_fourline_activations_map[0] + 0);
 800f040:	4b1d      	ldr	r3, [pc, #116]	; (800f0b8 <fourline_configure_activations+0x150>)
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	4a26      	ldr	r2, [pc, #152]	; (800f0e0 <fourline_configure_activations+0x178>)
 800f046:	6093      	str	r3, [r2, #8]
    dense_9_dense_output_array.data_start = AI_PTR(g_fourline_activations_map[0] + 0);
 800f048:	4b1b      	ldr	r3, [pc, #108]	; (800f0b8 <fourline_configure_activations+0x150>)
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	4a24      	ldr	r2, [pc, #144]	; (800f0e0 <fourline_configure_activations+0x178>)
 800f04e:	60d3      	str	r3, [r2, #12]
    
    dense_9_output_array.data = AI_PTR(g_fourline_activations_map[0] + 256);
 800f050:	4b19      	ldr	r3, [pc, #100]	; (800f0b8 <fourline_configure_activations+0x150>)
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800f058:	4a22      	ldr	r2, [pc, #136]	; (800f0e4 <fourline_configure_activations+0x17c>)
 800f05a:	6093      	str	r3, [r2, #8]
    dense_9_output_array.data_start = AI_PTR(g_fourline_activations_map[0] + 256);
 800f05c:	4b16      	ldr	r3, [pc, #88]	; (800f0b8 <fourline_configure_activations+0x150>)
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800f064:	4a1f      	ldr	r2, [pc, #124]	; (800f0e4 <fourline_configure_activations+0x17c>)
 800f066:	60d3      	str	r3, [r2, #12]
    
    dense_10_dense_output_array.data = AI_PTR(g_fourline_activations_map[0] + 0);
 800f068:	4b13      	ldr	r3, [pc, #76]	; (800f0b8 <fourline_configure_activations+0x150>)
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	4a1e      	ldr	r2, [pc, #120]	; (800f0e8 <fourline_configure_activations+0x180>)
 800f06e:	6093      	str	r3, [r2, #8]
    dense_10_dense_output_array.data_start = AI_PTR(g_fourline_activations_map[0] + 0);
 800f070:	4b11      	ldr	r3, [pc, #68]	; (800f0b8 <fourline_configure_activations+0x150>)
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	4a1c      	ldr	r2, [pc, #112]	; (800f0e8 <fourline_configure_activations+0x180>)
 800f076:	60d3      	str	r3, [r2, #12]
    
    dense_10_output_array.data = AI_PTR(g_fourline_activations_map[0] + 256);
 800f078:	4b0f      	ldr	r3, [pc, #60]	; (800f0b8 <fourline_configure_activations+0x150>)
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800f080:	4a1a      	ldr	r2, [pc, #104]	; (800f0ec <fourline_configure_activations+0x184>)
 800f082:	6093      	str	r3, [r2, #8]
    dense_10_output_array.data_start = AI_PTR(g_fourline_activations_map[0] + 256);
 800f084:	4b0c      	ldr	r3, [pc, #48]	; (800f0b8 <fourline_configure_activations+0x150>)
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800f08c:	4a17      	ldr	r2, [pc, #92]	; (800f0ec <fourline_configure_activations+0x184>)
 800f08e:	60d3      	str	r3, [r2, #12]
    
    dense_11_dense_output_array.data = AI_PTR(g_fourline_activations_map[0] + 0);
 800f090:	4b09      	ldr	r3, [pc, #36]	; (800f0b8 <fourline_configure_activations+0x150>)
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	4a16      	ldr	r2, [pc, #88]	; (800f0f0 <fourline_configure_activations+0x188>)
 800f096:	6093      	str	r3, [r2, #8]
    dense_11_dense_output_array.data_start = AI_PTR(g_fourline_activations_map[0] + 0);
 800f098:	4b07      	ldr	r3, [pc, #28]	; (800f0b8 <fourline_configure_activations+0x150>)
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	4a14      	ldr	r2, [pc, #80]	; (800f0f0 <fourline_configure_activations+0x188>)
 800f09e:	60d3      	str	r3, [r2, #12]
    
    return true;
 800f0a0:	2301      	movs	r3, #1
 800f0a2:	e005      	b.n	800f0b0 <fourline_configure_activations+0x148>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 800f0a4:	2213      	movs	r2, #19
 800f0a6:	2130      	movs	r1, #48	; 0x30
 800f0a8:	6878      	ldr	r0, [r7, #4]
 800f0aa:	f000 fccf 	bl	800fa4c <ai_platform_network_set_error>
  return false;
 800f0ae:	2300      	movs	r3, #0
}
 800f0b0:	4618      	mov	r0, r3
 800f0b2:	3708      	adds	r7, #8
 800f0b4:	46bd      	mov	sp, r7
 800f0b6:	bd80      	pop	{r7, pc}
 800f0b8:	2000c5ac 	.word	0x2000c5ac
 800f0bc:	2000069c 	.word	0x2000069c
 800f0c0:	200006ac 	.word	0x200006ac
 800f0c4:	200006bc 	.word	0x200006bc
 800f0c8:	200006cc 	.word	0x200006cc
 800f0cc:	200006dc 	.word	0x200006dc
 800f0d0:	200006ec 	.word	0x200006ec
 800f0d4:	200006fc 	.word	0x200006fc
 800f0d8:	2000070c 	.word	0x2000070c
 800f0dc:	2000071c 	.word	0x2000071c
 800f0e0:	2000072c 	.word	0x2000072c
 800f0e4:	2000073c 	.word	0x2000073c
 800f0e8:	2000074c 	.word	0x2000074c
 800f0ec:	2000075c 	.word	0x2000075c
 800f0f0:	2000076c 	.word	0x2000076c

0800f0f4 <fourline_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool fourline_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 800f0f4:	b580      	push	{r7, lr}
 800f0f6:	b082      	sub	sp, #8
 800f0f8:	af00      	add	r7, sp, #0
 800f0fa:	6078      	str	r0, [r7, #4]
 800f0fc:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_fourline_weights_map, 1, params)) {
 800f0fe:	683a      	ldr	r2, [r7, #0]
 800f100:	2101      	movs	r1, #1
 800f102:	4884      	ldr	r0, [pc, #528]	; (800f314 <fourline_configure_weights+0x220>)
 800f104:	f000 facc 	bl	800f6a0 <ai_platform_get_weights_map>
 800f108:	4603      	mov	r3, r0
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	f000 80f8 	beq.w	800f300 <fourline_configure_weights+0x20c>
    /* Updating weights (byte) offsets */
    
    conv2d_1_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 800f110:	4b81      	ldr	r3, [pc, #516]	; (800f318 <fourline_configure_weights+0x224>)
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f118:	4a7f      	ldr	r2, [pc, #508]	; (800f318 <fourline_configure_weights+0x224>)
 800f11a:	6013      	str	r3, [r2, #0]
    conv2d_1_conv2d_bias_array.data = AI_PTR(g_fourline_weights_map[0] + 0);
 800f11c:	4b7d      	ldr	r3, [pc, #500]	; (800f314 <fourline_configure_weights+0x220>)
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	4a7d      	ldr	r2, [pc, #500]	; (800f318 <fourline_configure_weights+0x224>)
 800f122:	6093      	str	r3, [r2, #8]
    conv2d_1_conv2d_bias_array.data_start = AI_PTR(g_fourline_weights_map[0] + 0);
 800f124:	4b7b      	ldr	r3, [pc, #492]	; (800f314 <fourline_configure_weights+0x220>)
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	4a7b      	ldr	r2, [pc, #492]	; (800f318 <fourline_configure_weights+0x224>)
 800f12a:	60d3      	str	r3, [r2, #12]
    
    dense_6_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800f12c:	4b7b      	ldr	r3, [pc, #492]	; (800f31c <fourline_configure_weights+0x228>)
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f134:	4a79      	ldr	r2, [pc, #484]	; (800f31c <fourline_configure_weights+0x228>)
 800f136:	6013      	str	r3, [r2, #0]
    dense_6_dense_weights_array.data = AI_PTR(g_fourline_weights_map[0] + 64);
 800f138:	4b76      	ldr	r3, [pc, #472]	; (800f314 <fourline_configure_weights+0x220>)
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	3340      	adds	r3, #64	; 0x40
 800f13e:	4a77      	ldr	r2, [pc, #476]	; (800f31c <fourline_configure_weights+0x228>)
 800f140:	6093      	str	r3, [r2, #8]
    dense_6_dense_weights_array.data_start = AI_PTR(g_fourline_weights_map[0] + 64);
 800f142:	4b74      	ldr	r3, [pc, #464]	; (800f314 <fourline_configure_weights+0x220>)
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	3340      	adds	r3, #64	; 0x40
 800f148:	4a74      	ldr	r2, [pc, #464]	; (800f31c <fourline_configure_weights+0x228>)
 800f14a:	60d3      	str	r3, [r2, #12]
    
    dense_6_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800f14c:	4b74      	ldr	r3, [pc, #464]	; (800f320 <fourline_configure_weights+0x22c>)
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f154:	4a72      	ldr	r2, [pc, #456]	; (800f320 <fourline_configure_weights+0x22c>)
 800f156:	6013      	str	r3, [r2, #0]
    dense_6_dense_bias_array.data = AI_PTR(g_fourline_weights_map[0] + 213056);
 800f158:	4b6e      	ldr	r3, [pc, #440]	; (800f314 <fourline_configure_weights+0x220>)
 800f15a:	681a      	ldr	r2, [r3, #0]
 800f15c:	4b71      	ldr	r3, [pc, #452]	; (800f324 <fourline_configure_weights+0x230>)
 800f15e:	4413      	add	r3, r2
 800f160:	4a6f      	ldr	r2, [pc, #444]	; (800f320 <fourline_configure_weights+0x22c>)
 800f162:	6093      	str	r3, [r2, #8]
    dense_6_dense_bias_array.data_start = AI_PTR(g_fourline_weights_map[0] + 213056);
 800f164:	4b6b      	ldr	r3, [pc, #428]	; (800f314 <fourline_configure_weights+0x220>)
 800f166:	681a      	ldr	r2, [r3, #0]
 800f168:	4b6e      	ldr	r3, [pc, #440]	; (800f324 <fourline_configure_weights+0x230>)
 800f16a:	4413      	add	r3, r2
 800f16c:	4a6c      	ldr	r2, [pc, #432]	; (800f320 <fourline_configure_weights+0x22c>)
 800f16e:	60d3      	str	r3, [r2, #12]
    
    dense_7_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800f170:	4b6d      	ldr	r3, [pc, #436]	; (800f328 <fourline_configure_weights+0x234>)
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f178:	4a6b      	ldr	r2, [pc, #428]	; (800f328 <fourline_configure_weights+0x234>)
 800f17a:	6013      	str	r3, [r2, #0]
    dense_7_dense_weights_array.data = AI_PTR(g_fourline_weights_map[0] + 213312);
 800f17c:	4b65      	ldr	r3, [pc, #404]	; (800f314 <fourline_configure_weights+0x220>)
 800f17e:	681a      	ldr	r2, [r3, #0]
 800f180:	4b6a      	ldr	r3, [pc, #424]	; (800f32c <fourline_configure_weights+0x238>)
 800f182:	4413      	add	r3, r2
 800f184:	4a68      	ldr	r2, [pc, #416]	; (800f328 <fourline_configure_weights+0x234>)
 800f186:	6093      	str	r3, [r2, #8]
    dense_7_dense_weights_array.data_start = AI_PTR(g_fourline_weights_map[0] + 213312);
 800f188:	4b62      	ldr	r3, [pc, #392]	; (800f314 <fourline_configure_weights+0x220>)
 800f18a:	681a      	ldr	r2, [r3, #0]
 800f18c:	4b67      	ldr	r3, [pc, #412]	; (800f32c <fourline_configure_weights+0x238>)
 800f18e:	4413      	add	r3, r2
 800f190:	4a65      	ldr	r2, [pc, #404]	; (800f328 <fourline_configure_weights+0x234>)
 800f192:	60d3      	str	r3, [r2, #12]
    
    dense_7_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800f194:	4b66      	ldr	r3, [pc, #408]	; (800f330 <fourline_configure_weights+0x23c>)
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f19c:	4a64      	ldr	r2, [pc, #400]	; (800f330 <fourline_configure_weights+0x23c>)
 800f19e:	6013      	str	r3, [r2, #0]
    dense_7_dense_bias_array.data = AI_PTR(g_fourline_weights_map[0] + 229696);
 800f1a0:	4b5c      	ldr	r3, [pc, #368]	; (800f314 <fourline_configure_weights+0x220>)
 800f1a2:	681a      	ldr	r2, [r3, #0]
 800f1a4:	4b63      	ldr	r3, [pc, #396]	; (800f334 <fourline_configure_weights+0x240>)
 800f1a6:	4413      	add	r3, r2
 800f1a8:	4a61      	ldr	r2, [pc, #388]	; (800f330 <fourline_configure_weights+0x23c>)
 800f1aa:	6093      	str	r3, [r2, #8]
    dense_7_dense_bias_array.data_start = AI_PTR(g_fourline_weights_map[0] + 229696);
 800f1ac:	4b59      	ldr	r3, [pc, #356]	; (800f314 <fourline_configure_weights+0x220>)
 800f1ae:	681a      	ldr	r2, [r3, #0]
 800f1b0:	4b60      	ldr	r3, [pc, #384]	; (800f334 <fourline_configure_weights+0x240>)
 800f1b2:	4413      	add	r3, r2
 800f1b4:	4a5e      	ldr	r2, [pc, #376]	; (800f330 <fourline_configure_weights+0x23c>)
 800f1b6:	60d3      	str	r3, [r2, #12]
    
    dense_8_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800f1b8:	4b5f      	ldr	r3, [pc, #380]	; (800f338 <fourline_configure_weights+0x244>)
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f1c0:	4a5d      	ldr	r2, [pc, #372]	; (800f338 <fourline_configure_weights+0x244>)
 800f1c2:	6013      	str	r3, [r2, #0]
    dense_8_dense_weights_array.data = AI_PTR(g_fourline_weights_map[0] + 229952);
 800f1c4:	4b53      	ldr	r3, [pc, #332]	; (800f314 <fourline_configure_weights+0x220>)
 800f1c6:	681a      	ldr	r2, [r3, #0]
 800f1c8:	4b5c      	ldr	r3, [pc, #368]	; (800f33c <fourline_configure_weights+0x248>)
 800f1ca:	4413      	add	r3, r2
 800f1cc:	4a5a      	ldr	r2, [pc, #360]	; (800f338 <fourline_configure_weights+0x244>)
 800f1ce:	6093      	str	r3, [r2, #8]
    dense_8_dense_weights_array.data_start = AI_PTR(g_fourline_weights_map[0] + 229952);
 800f1d0:	4b50      	ldr	r3, [pc, #320]	; (800f314 <fourline_configure_weights+0x220>)
 800f1d2:	681a      	ldr	r2, [r3, #0]
 800f1d4:	4b59      	ldr	r3, [pc, #356]	; (800f33c <fourline_configure_weights+0x248>)
 800f1d6:	4413      	add	r3, r2
 800f1d8:	4a57      	ldr	r2, [pc, #348]	; (800f338 <fourline_configure_weights+0x244>)
 800f1da:	60d3      	str	r3, [r2, #12]
    
    dense_8_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800f1dc:	4b58      	ldr	r3, [pc, #352]	; (800f340 <fourline_configure_weights+0x24c>)
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f1e4:	4a56      	ldr	r2, [pc, #344]	; (800f340 <fourline_configure_weights+0x24c>)
 800f1e6:	6013      	str	r3, [r2, #0]
    dense_8_dense_bias_array.data = AI_PTR(g_fourline_weights_map[0] + 246336);
 800f1e8:	4b4a      	ldr	r3, [pc, #296]	; (800f314 <fourline_configure_weights+0x220>)
 800f1ea:	681a      	ldr	r2, [r3, #0]
 800f1ec:	4b55      	ldr	r3, [pc, #340]	; (800f344 <fourline_configure_weights+0x250>)
 800f1ee:	4413      	add	r3, r2
 800f1f0:	4a53      	ldr	r2, [pc, #332]	; (800f340 <fourline_configure_weights+0x24c>)
 800f1f2:	6093      	str	r3, [r2, #8]
    dense_8_dense_bias_array.data_start = AI_PTR(g_fourline_weights_map[0] + 246336);
 800f1f4:	4b47      	ldr	r3, [pc, #284]	; (800f314 <fourline_configure_weights+0x220>)
 800f1f6:	681a      	ldr	r2, [r3, #0]
 800f1f8:	4b52      	ldr	r3, [pc, #328]	; (800f344 <fourline_configure_weights+0x250>)
 800f1fa:	4413      	add	r3, r2
 800f1fc:	4a50      	ldr	r2, [pc, #320]	; (800f340 <fourline_configure_weights+0x24c>)
 800f1fe:	60d3      	str	r3, [r2, #12]
    
    dense_9_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800f200:	4b51      	ldr	r3, [pc, #324]	; (800f348 <fourline_configure_weights+0x254>)
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f208:	4a4f      	ldr	r2, [pc, #316]	; (800f348 <fourline_configure_weights+0x254>)
 800f20a:	6013      	str	r3, [r2, #0]
    dense_9_dense_weights_array.data = AI_PTR(g_fourline_weights_map[0] + 246592);
 800f20c:	4b41      	ldr	r3, [pc, #260]	; (800f314 <fourline_configure_weights+0x220>)
 800f20e:	681a      	ldr	r2, [r3, #0]
 800f210:	4b4e      	ldr	r3, [pc, #312]	; (800f34c <fourline_configure_weights+0x258>)
 800f212:	4413      	add	r3, r2
 800f214:	4a4c      	ldr	r2, [pc, #304]	; (800f348 <fourline_configure_weights+0x254>)
 800f216:	6093      	str	r3, [r2, #8]
    dense_9_dense_weights_array.data_start = AI_PTR(g_fourline_weights_map[0] + 246592);
 800f218:	4b3e      	ldr	r3, [pc, #248]	; (800f314 <fourline_configure_weights+0x220>)
 800f21a:	681a      	ldr	r2, [r3, #0]
 800f21c:	4b4b      	ldr	r3, [pc, #300]	; (800f34c <fourline_configure_weights+0x258>)
 800f21e:	4413      	add	r3, r2
 800f220:	4a49      	ldr	r2, [pc, #292]	; (800f348 <fourline_configure_weights+0x254>)
 800f222:	60d3      	str	r3, [r2, #12]
    
    dense_9_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800f224:	4b4a      	ldr	r3, [pc, #296]	; (800f350 <fourline_configure_weights+0x25c>)
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f22c:	4a48      	ldr	r2, [pc, #288]	; (800f350 <fourline_configure_weights+0x25c>)
 800f22e:	6013      	str	r3, [r2, #0]
    dense_9_dense_bias_array.data = AI_PTR(g_fourline_weights_map[0] + 262976);
 800f230:	4b38      	ldr	r3, [pc, #224]	; (800f314 <fourline_configure_weights+0x220>)
 800f232:	681a      	ldr	r2, [r3, #0]
 800f234:	4b47      	ldr	r3, [pc, #284]	; (800f354 <fourline_configure_weights+0x260>)
 800f236:	4413      	add	r3, r2
 800f238:	4a45      	ldr	r2, [pc, #276]	; (800f350 <fourline_configure_weights+0x25c>)
 800f23a:	6093      	str	r3, [r2, #8]
    dense_9_dense_bias_array.data_start = AI_PTR(g_fourline_weights_map[0] + 262976);
 800f23c:	4b35      	ldr	r3, [pc, #212]	; (800f314 <fourline_configure_weights+0x220>)
 800f23e:	681a      	ldr	r2, [r3, #0]
 800f240:	4b44      	ldr	r3, [pc, #272]	; (800f354 <fourline_configure_weights+0x260>)
 800f242:	4413      	add	r3, r2
 800f244:	4a42      	ldr	r2, [pc, #264]	; (800f350 <fourline_configure_weights+0x25c>)
 800f246:	60d3      	str	r3, [r2, #12]
    
    dense_10_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800f248:	4b43      	ldr	r3, [pc, #268]	; (800f358 <fourline_configure_weights+0x264>)
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f250:	4a41      	ldr	r2, [pc, #260]	; (800f358 <fourline_configure_weights+0x264>)
 800f252:	6013      	str	r3, [r2, #0]
    dense_10_dense_weights_array.data = AI_PTR(g_fourline_weights_map[0] + 263232);
 800f254:	4b2f      	ldr	r3, [pc, #188]	; (800f314 <fourline_configure_weights+0x220>)
 800f256:	681a      	ldr	r2, [r3, #0]
 800f258:	4b40      	ldr	r3, [pc, #256]	; (800f35c <fourline_configure_weights+0x268>)
 800f25a:	4413      	add	r3, r2
 800f25c:	4a3e      	ldr	r2, [pc, #248]	; (800f358 <fourline_configure_weights+0x264>)
 800f25e:	6093      	str	r3, [r2, #8]
    dense_10_dense_weights_array.data_start = AI_PTR(g_fourline_weights_map[0] + 263232);
 800f260:	4b2c      	ldr	r3, [pc, #176]	; (800f314 <fourline_configure_weights+0x220>)
 800f262:	681a      	ldr	r2, [r3, #0]
 800f264:	4b3d      	ldr	r3, [pc, #244]	; (800f35c <fourline_configure_weights+0x268>)
 800f266:	4413      	add	r3, r2
 800f268:	4a3b      	ldr	r2, [pc, #236]	; (800f358 <fourline_configure_weights+0x264>)
 800f26a:	60d3      	str	r3, [r2, #12]
    
    dense_10_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800f26c:	4b3c      	ldr	r3, [pc, #240]	; (800f360 <fourline_configure_weights+0x26c>)
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f274:	4a3a      	ldr	r2, [pc, #232]	; (800f360 <fourline_configure_weights+0x26c>)
 800f276:	6013      	str	r3, [r2, #0]
    dense_10_dense_bias_array.data = AI_PTR(g_fourline_weights_map[0] + 279616);
 800f278:	4b26      	ldr	r3, [pc, #152]	; (800f314 <fourline_configure_weights+0x220>)
 800f27a:	681a      	ldr	r2, [r3, #0]
 800f27c:	4b39      	ldr	r3, [pc, #228]	; (800f364 <fourline_configure_weights+0x270>)
 800f27e:	4413      	add	r3, r2
 800f280:	4a37      	ldr	r2, [pc, #220]	; (800f360 <fourline_configure_weights+0x26c>)
 800f282:	6093      	str	r3, [r2, #8]
    dense_10_dense_bias_array.data_start = AI_PTR(g_fourline_weights_map[0] + 279616);
 800f284:	4b23      	ldr	r3, [pc, #140]	; (800f314 <fourline_configure_weights+0x220>)
 800f286:	681a      	ldr	r2, [r3, #0]
 800f288:	4b36      	ldr	r3, [pc, #216]	; (800f364 <fourline_configure_weights+0x270>)
 800f28a:	4413      	add	r3, r2
 800f28c:	4a34      	ldr	r2, [pc, #208]	; (800f360 <fourline_configure_weights+0x26c>)
 800f28e:	60d3      	str	r3, [r2, #12]
    
    dense_11_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800f290:	4b35      	ldr	r3, [pc, #212]	; (800f368 <fourline_configure_weights+0x274>)
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f298:	4a33      	ldr	r2, [pc, #204]	; (800f368 <fourline_configure_weights+0x274>)
 800f29a:	6013      	str	r3, [r2, #0]
    dense_11_dense_weights_array.data = AI_PTR(g_fourline_weights_map[0] + 279872);
 800f29c:	4b1d      	ldr	r3, [pc, #116]	; (800f314 <fourline_configure_weights+0x220>)
 800f29e:	681a      	ldr	r2, [r3, #0]
 800f2a0:	4b32      	ldr	r3, [pc, #200]	; (800f36c <fourline_configure_weights+0x278>)
 800f2a2:	4413      	add	r3, r2
 800f2a4:	4a30      	ldr	r2, [pc, #192]	; (800f368 <fourline_configure_weights+0x274>)
 800f2a6:	6093      	str	r3, [r2, #8]
    dense_11_dense_weights_array.data_start = AI_PTR(g_fourline_weights_map[0] + 279872);
 800f2a8:	4b1a      	ldr	r3, [pc, #104]	; (800f314 <fourline_configure_weights+0x220>)
 800f2aa:	681a      	ldr	r2, [r3, #0]
 800f2ac:	4b2f      	ldr	r3, [pc, #188]	; (800f36c <fourline_configure_weights+0x278>)
 800f2ae:	4413      	add	r3, r2
 800f2b0:	4a2d      	ldr	r2, [pc, #180]	; (800f368 <fourline_configure_weights+0x274>)
 800f2b2:	60d3      	str	r3, [r2, #12]
    
    dense_11_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800f2b4:	4b2e      	ldr	r3, [pc, #184]	; (800f370 <fourline_configure_weights+0x27c>)
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f2bc:	4a2c      	ldr	r2, [pc, #176]	; (800f370 <fourline_configure_weights+0x27c>)
 800f2be:	6013      	str	r3, [r2, #0]
    dense_11_dense_bias_array.data = AI_PTR(g_fourline_weights_map[0] + 280896);
 800f2c0:	4b14      	ldr	r3, [pc, #80]	; (800f314 <fourline_configure_weights+0x220>)
 800f2c2:	681a      	ldr	r2, [r3, #0]
 800f2c4:	4b2b      	ldr	r3, [pc, #172]	; (800f374 <fourline_configure_weights+0x280>)
 800f2c6:	4413      	add	r3, r2
 800f2c8:	4a29      	ldr	r2, [pc, #164]	; (800f370 <fourline_configure_weights+0x27c>)
 800f2ca:	6093      	str	r3, [r2, #8]
    dense_11_dense_bias_array.data_start = AI_PTR(g_fourline_weights_map[0] + 280896);
 800f2cc:	4b11      	ldr	r3, [pc, #68]	; (800f314 <fourline_configure_weights+0x220>)
 800f2ce:	681a      	ldr	r2, [r3, #0]
 800f2d0:	4b28      	ldr	r3, [pc, #160]	; (800f374 <fourline_configure_weights+0x280>)
 800f2d2:	4413      	add	r3, r2
 800f2d4:	4a26      	ldr	r2, [pc, #152]	; (800f370 <fourline_configure_weights+0x27c>)
 800f2d6:	60d3      	str	r3, [r2, #12]
    
    conv2d_1_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 800f2d8:	4b27      	ldr	r3, [pc, #156]	; (800f378 <fourline_configure_weights+0x284>)
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f2e0:	4a25      	ldr	r2, [pc, #148]	; (800f378 <fourline_configure_weights+0x284>)
 800f2e2:	6013      	str	r3, [r2, #0]
    conv2d_1_conv2d_weights_array.data = AI_PTR(g_fourline_weights_map[0] + 280912);
 800f2e4:	4b0b      	ldr	r3, [pc, #44]	; (800f314 <fourline_configure_weights+0x220>)
 800f2e6:	681a      	ldr	r2, [r3, #0]
 800f2e8:	4b24      	ldr	r3, [pc, #144]	; (800f37c <fourline_configure_weights+0x288>)
 800f2ea:	4413      	add	r3, r2
 800f2ec:	4a22      	ldr	r2, [pc, #136]	; (800f378 <fourline_configure_weights+0x284>)
 800f2ee:	6093      	str	r3, [r2, #8]
    conv2d_1_conv2d_weights_array.data_start = AI_PTR(g_fourline_weights_map[0] + 280912);
 800f2f0:	4b08      	ldr	r3, [pc, #32]	; (800f314 <fourline_configure_weights+0x220>)
 800f2f2:	681a      	ldr	r2, [r3, #0]
 800f2f4:	4b21      	ldr	r3, [pc, #132]	; (800f37c <fourline_configure_weights+0x288>)
 800f2f6:	4413      	add	r3, r2
 800f2f8:	4a1f      	ldr	r2, [pc, #124]	; (800f378 <fourline_configure_weights+0x284>)
 800f2fa:	60d3      	str	r3, [r2, #12]
    
    return true;
 800f2fc:	2301      	movs	r3, #1
 800f2fe:	e005      	b.n	800f30c <fourline_configure_weights+0x218>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 800f300:	2212      	movs	r2, #18
 800f302:	2130      	movs	r1, #48	; 0x30
 800f304:	6878      	ldr	r0, [r7, #4]
 800f306:	f000 fba1 	bl	800fa4c <ai_platform_network_set_error>
  return false;
 800f30a:	2300      	movs	r3, #0
}
 800f30c:	4618      	mov	r0, r3
 800f30e:	3708      	adds	r7, #8
 800f310:	46bd      	mov	sp, r7
 800f312:	bd80      	pop	{r7, pc}
 800f314:	2000c5b0 	.word	0x2000c5b0
 800f318:	200005cc 	.word	0x200005cc
 800f31c:	200005dc 	.word	0x200005dc
 800f320:	200005ec 	.word	0x200005ec
 800f324:	00034040 	.word	0x00034040
 800f328:	200005fc 	.word	0x200005fc
 800f32c:	00034140 	.word	0x00034140
 800f330:	2000060c 	.word	0x2000060c
 800f334:	00038140 	.word	0x00038140
 800f338:	2000061c 	.word	0x2000061c
 800f33c:	00038240 	.word	0x00038240
 800f340:	2000062c 	.word	0x2000062c
 800f344:	0003c240 	.word	0x0003c240
 800f348:	2000063c 	.word	0x2000063c
 800f34c:	0003c340 	.word	0x0003c340
 800f350:	2000064c 	.word	0x2000064c
 800f354:	00040340 	.word	0x00040340
 800f358:	2000065c 	.word	0x2000065c
 800f35c:	00040440 	.word	0x00040440
 800f360:	2000066c 	.word	0x2000066c
 800f364:	00044440 	.word	0x00044440
 800f368:	2000067c 	.word	0x2000067c
 800f36c:	00044540 	.word	0x00044540
 800f370:	2000068c 	.word	0x2000068c
 800f374:	00044940 	.word	0x00044940
 800f378:	2000077c 	.word	0x2000077c
 800f37c:	00044950 	.word	0x00044950

0800f380 <ai_fourline_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_fourline_get_error(ai_handle network)
{
 800f380:	b580      	push	{r7, lr}
 800f382:	b082      	sub	sp, #8
 800f384:	af00      	add	r7, sp, #0
 800f386:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 800f388:	6878      	ldr	r0, [r7, #4]
 800f38a:	f000 fa53 	bl	800f834 <ai_platform_network_get_error>
 800f38e:	4603      	mov	r3, r0
}
 800f390:	4618      	mov	r0, r3
 800f392:	3708      	adds	r7, #8
 800f394:	46bd      	mov	sp, r7
 800f396:	bd80      	pop	{r7, pc}

0800f398 <ai_fourline_create>:

AI_API_ENTRY
ai_error ai_fourline_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800f398:	b580      	push	{r7, lr}
 800f39a:	b084      	sub	sp, #16
 800f39c:	af02      	add	r7, sp, #8
 800f39e:	6078      	str	r0, [r7, #4]
 800f3a0:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800f3a2:	2300      	movs	r3, #0
 800f3a4:	9301      	str	r3, [sp, #4]
 800f3a6:	2305      	movs	r3, #5
 800f3a8:	9300      	str	r3, [sp, #0]
 800f3aa:	2301      	movs	r3, #1
 800f3ac:	4a04      	ldr	r2, [pc, #16]	; (800f3c0 <ai_fourline_create+0x28>)
 800f3ae:	6839      	ldr	r1, [r7, #0]
 800f3b0:	6878      	ldr	r0, [r7, #4]
 800f3b2:	f000 fe65 	bl	8010080 <ai_platform_network_create>
 800f3b6:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800f3b8:	4618      	mov	r0, r3
 800f3ba:	3708      	adds	r7, #8
 800f3bc:	46bd      	mov	sp, r7
 800f3be:	bd80      	pop	{r7, pc}
 800f3c0:	200013b8 	.word	0x200013b8

0800f3c4 <ai_fourline_create_and_init>:

AI_API_ENTRY
ai_error ai_fourline_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 800f3c4:	b580      	push	{r7, lr}
 800f3c6:	b096      	sub	sp, #88	; 0x58
 800f3c8:	af00      	add	r7, sp, #0
 800f3ca:	60f8      	str	r0, [r7, #12]
 800f3cc:	60b9      	str	r1, [r7, #8]
 800f3ce:	607a      	str	r2, [r7, #4]
    ai_error err;
    ai_network_params params;

    err = ai_fourline_create(network, AI_FOURLINE_DATA_CONFIG);
 800f3d0:	2100      	movs	r1, #0
 800f3d2:	68f8      	ldr	r0, [r7, #12]
 800f3d4:	f7ff ffe0 	bl	800f398 <ai_fourline_create>
 800f3d8:	4603      	mov	r3, r0
 800f3da:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (err.type != AI_ERROR_NONE)
 800f3dc:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d001      	beq.n	800f3e8 <ai_fourline_create_and_init+0x24>
        return err;
 800f3e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f3e6:	e05d      	b.n	800f4a4 <ai_fourline_create_and_init+0xe0>
    if (ai_fourline_data_params_get(&params) != true) {
 800f3e8:	f107 0314 	add.w	r3, r7, #20
 800f3ec:	4618      	mov	r0, r3
 800f3ee:	f000 f8dd 	bl	800f5ac <ai_fourline_data_params_get>
 800f3f2:	4603      	mov	r3, r0
 800f3f4:	f083 0301 	eor.w	r3, r3, #1
 800f3f8:	b2db      	uxtb	r3, r3
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d008      	beq.n	800f410 <ai_fourline_create_and_init+0x4c>
        err = ai_fourline_get_error(*network);
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	4618      	mov	r0, r3
 800f404:	f7ff ffbc 	bl	800f380 <ai_fourline_get_error>
 800f408:	4603      	mov	r3, r0
 800f40a:	64fb      	str	r3, [r7, #76]	; 0x4c
        return err;
 800f40c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f40e:	e049      	b.n	800f4a4 <ai_fourline_create_and_init+0xe0>
    }
#if defined(AI_FOURLINE_DATA_ACTIVATIONS_COUNT)
    if (activations) {
 800f410:	68bb      	ldr	r3, [r7, #8]
 800f412:	2b00      	cmp	r3, #0
 800f414:	d016      	beq.n	800f444 <ai_fourline_create_and_init+0x80>
        /* set the addresses of the activations buffers */
        for (int idx=0;idx<params.map_activations.size;idx++)
 800f416:	2300      	movs	r3, #0
 800f418:	657b      	str	r3, [r7, #84]	; 0x54
 800f41a:	e00e      	b.n	800f43a <ai_fourline_create_and_init+0x76>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 800f41c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f41e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f420:	009b      	lsls	r3, r3, #2
 800f422:	68ba      	ldr	r2, [r7, #8]
 800f424:	4413      	add	r3, r2
 800f426:	681a      	ldr	r2, [r3, #0]
 800f428:	f107 0314 	add.w	r3, r7, #20
 800f42c:	330c      	adds	r3, #12
 800f42e:	4618      	mov	r0, r3
 800f430:	f000 f922 	bl	800f678 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 800f434:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f436:	3301      	adds	r3, #1
 800f438:	657b      	str	r3, [r7, #84]	; 0x54
 800f43a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f43c:	461a      	mov	r2, r3
 800f43e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f440:	4293      	cmp	r3, r2
 800f442:	dbeb      	blt.n	800f41c <ai_fourline_create_and_init+0x58>
    }
#endif
#if defined(AI_FOURLINE_DATA_WEIGHTS_COUNT)
    if (weights) {
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	2b00      	cmp	r3, #0
 800f448:	d016      	beq.n	800f478 <ai_fourline_create_and_init+0xb4>
        /* set the addresses of the weight buffers */
        for (int idx=0;idx<params.map_weights.size;idx++)
 800f44a:	2300      	movs	r3, #0
 800f44c:	653b      	str	r3, [r7, #80]	; 0x50
 800f44e:	e00e      	b.n	800f46e <ai_fourline_create_and_init+0xaa>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 800f450:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f452:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f454:	009b      	lsls	r3, r3, #2
 800f456:	687a      	ldr	r2, [r7, #4]
 800f458:	4413      	add	r3, r2
 800f45a:	681a      	ldr	r2, [r3, #0]
 800f45c:	f107 0314 	add.w	r3, r7, #20
 800f460:	3304      	adds	r3, #4
 800f462:	4618      	mov	r0, r3
 800f464:	f000 f908 	bl	800f678 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 800f468:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f46a:	3301      	adds	r3, #1
 800f46c:	653b      	str	r3, [r7, #80]	; 0x50
 800f46e:	8b7b      	ldrh	r3, [r7, #26]
 800f470:	461a      	mov	r2, r3
 800f472:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f474:	4293      	cmp	r3, r2
 800f476:	dbeb      	blt.n	800f450 <ai_fourline_create_and_init+0x8c>
    }
#endif
    if (ai_fourline_init(*network, &params) != true) {
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	f107 0214 	add.w	r2, r7, #20
 800f480:	4611      	mov	r1, r2
 800f482:	4618      	mov	r0, r3
 800f484:	f000 f846 	bl	800f514 <ai_fourline_init>
 800f488:	4603      	mov	r3, r0
 800f48a:	f083 0301 	eor.w	r3, r3, #1
 800f48e:	b2db      	uxtb	r3, r3
 800f490:	2b00      	cmp	r3, #0
 800f492:	d006      	beq.n	800f4a2 <ai_fourline_create_and_init+0xde>
        err = ai_fourline_get_error(*network);
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	4618      	mov	r0, r3
 800f49a:	f7ff ff71 	bl	800f380 <ai_fourline_get_error>
 800f49e:	4603      	mov	r3, r0
 800f4a0:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    return err;
 800f4a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800f4a4:	4618      	mov	r0, r3
 800f4a6:	3758      	adds	r7, #88	; 0x58
 800f4a8:	46bd      	mov	sp, r7
 800f4aa:	bd80      	pop	{r7, pc}

0800f4ac <ai_fourline_inputs_get>:

AI_API_ENTRY
ai_buffer* ai_fourline_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800f4ac:	b580      	push	{r7, lr}
 800f4ae:	b082      	sub	sp, #8
 800f4b0:	af00      	add	r7, sp, #0
 800f4b2:	6078      	str	r0, [r7, #4]
 800f4b4:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d104      	bne.n	800f4c6 <ai_fourline_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800f4bc:	4b06      	ldr	r3, [pc, #24]	; (800f4d8 <ai_fourline_inputs_get+0x2c>)
 800f4be:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	4a06      	ldr	r2, [pc, #24]	; (800f4dc <ai_fourline_inputs_get+0x30>)
 800f4c4:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 800f4c6:	6839      	ldr	r1, [r7, #0]
 800f4c8:	6878      	ldr	r0, [r7, #4]
 800f4ca:	f000 fac5 	bl	800fa58 <ai_platform_inputs_get>
 800f4ce:	4603      	mov	r3, r0
}
 800f4d0:	4618      	mov	r0, r3
 800f4d2:	3708      	adds	r7, #8
 800f4d4:	46bd      	mov	sp, r7
 800f4d6:	bd80      	pop	{r7, pc}
 800f4d8:	200013b8 	.word	0x200013b8
 800f4dc:	a1c00100 	.word	0xa1c00100

0800f4e0 <ai_fourline_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_fourline_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800f4e0:	b580      	push	{r7, lr}
 800f4e2:	b082      	sub	sp, #8
 800f4e4:	af00      	add	r7, sp, #0
 800f4e6:	6078      	str	r0, [r7, #4]
 800f4e8:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d104      	bne.n	800f4fa <ai_fourline_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800f4f0:	4b06      	ldr	r3, [pc, #24]	; (800f50c <ai_fourline_outputs_get+0x2c>)
 800f4f2:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	4a06      	ldr	r2, [pc, #24]	; (800f510 <ai_fourline_outputs_get+0x30>)
 800f4f8:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 800f4fa:	6839      	ldr	r1, [r7, #0]
 800f4fc:	6878      	ldr	r0, [r7, #4]
 800f4fe:	f000 fc37 	bl	800fd70 <ai_platform_outputs_get>
 800f502:	4603      	mov	r3, r0
}
 800f504:	4618      	mov	r0, r3
 800f506:	3708      	adds	r7, #8
 800f508:	46bd      	mov	sp, r7
 800f50a:	bd80      	pop	{r7, pc}
 800f50c:	200013b8 	.word	0x200013b8
 800f510:	a1c00100 	.word	0xa1c00100

0800f514 <ai_fourline_init>:
}

AI_API_ENTRY
ai_bool ai_fourline_init(
  ai_handle network, const ai_network_params* params)
{
 800f514:	b580      	push	{r7, lr}
 800f516:	b084      	sub	sp, #16
 800f518:	af00      	add	r7, sp, #0
 800f51a:	6078      	str	r0, [r7, #4]
 800f51c:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 800f51e:	6839      	ldr	r1, [r7, #0]
 800f520:	6878      	ldr	r0, [r7, #4]
 800f522:	f000 ff87 	bl	8010434 <ai_platform_network_init>
 800f526:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d101      	bne.n	800f532 <ai_fourline_init+0x1e>
 800f52e:	2300      	movs	r3, #0
 800f530:	e028      	b.n	800f584 <ai_fourline_init+0x70>

  ai_bool ok = true;
 800f532:	2301      	movs	r3, #1
 800f534:	72fb      	strb	r3, [r7, #11]
  ok &= fourline_configure_weights(net_ctx, params);
 800f536:	6839      	ldr	r1, [r7, #0]
 800f538:	68f8      	ldr	r0, [r7, #12]
 800f53a:	f7ff fddb 	bl	800f0f4 <fourline_configure_weights>
 800f53e:	4603      	mov	r3, r0
 800f540:	461a      	mov	r2, r3
 800f542:	7afb      	ldrb	r3, [r7, #11]
 800f544:	4013      	ands	r3, r2
 800f546:	2b00      	cmp	r3, #0
 800f548:	bf14      	ite	ne
 800f54a:	2301      	movne	r3, #1
 800f54c:	2300      	moveq	r3, #0
 800f54e:	72fb      	strb	r3, [r7, #11]
  ok &= fourline_configure_activations(net_ctx, params);
 800f550:	6839      	ldr	r1, [r7, #0]
 800f552:	68f8      	ldr	r0, [r7, #12]
 800f554:	f7ff fd08 	bl	800ef68 <fourline_configure_activations>
 800f558:	4603      	mov	r3, r0
 800f55a:	461a      	mov	r2, r3
 800f55c:	7afb      	ldrb	r3, [r7, #11]
 800f55e:	4013      	ands	r3, r2
 800f560:	2b00      	cmp	r3, #0
 800f562:	bf14      	ite	ne
 800f564:	2301      	movne	r3, #1
 800f566:	2300      	moveq	r3, #0
 800f568:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 800f56a:	6878      	ldr	r0, [r7, #4]
 800f56c:	f001 f8fe 	bl	801076c <ai_platform_network_post_init>
 800f570:	4603      	mov	r3, r0
 800f572:	461a      	mov	r2, r3
 800f574:	7afb      	ldrb	r3, [r7, #11]
 800f576:	4013      	ands	r3, r2
 800f578:	2b00      	cmp	r3, #0
 800f57a:	bf14      	ite	ne
 800f57c:	2301      	movne	r3, #1
 800f57e:	2300      	moveq	r3, #0
 800f580:	72fb      	strb	r3, [r7, #11]

  return ok;
 800f582:	7afb      	ldrb	r3, [r7, #11]
}
 800f584:	4618      	mov	r0, r3
 800f586:	3710      	adds	r7, #16
 800f588:	46bd      	mov	sp, r7
 800f58a:	bd80      	pop	{r7, pc}

0800f58c <ai_fourline_run>:


AI_API_ENTRY
ai_i32 ai_fourline_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 800f58c:	b580      	push	{r7, lr}
 800f58e:	b084      	sub	sp, #16
 800f590:	af00      	add	r7, sp, #0
 800f592:	60f8      	str	r0, [r7, #12]
 800f594:	60b9      	str	r1, [r7, #8]
 800f596:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 800f598:	687a      	ldr	r2, [r7, #4]
 800f59a:	68b9      	ldr	r1, [r7, #8]
 800f59c:	68f8      	ldr	r0, [r7, #12]
 800f59e:	f001 fa0f 	bl	80109c0 <ai_platform_network_process>
 800f5a2:	4603      	mov	r3, r0
}
 800f5a4:	4618      	mov	r0, r3
 800f5a6:	3710      	adds	r7, #16
 800f5a8:	46bd      	mov	sp, r7
 800f5aa:	bd80      	pop	{r7, pc}

0800f5ac <ai_fourline_data_params_get>:
 * @ingroup fourline_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_fourline_data_params_get(ai_network_params* params)
{
 800f5ac:	b580      	push	{r7, lr}
 800f5ae:	b086      	sub	sp, #24
 800f5b0:	af00      	add	r7, sp, #0
 800f5b2:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d101      	bne.n	800f5be <ai_fourline_data_params_get+0x12>
 800f5ba:	2300      	movs	r3, #0
 800f5bc:	e016      	b.n	800f5ec <ai_fourline_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 800f5be:	4a0d      	ldr	r2, [pc, #52]	; (800f5f4 <ai_fourline_data_params_get+0x48>)
 800f5c0:	f107 0310 	add.w	r3, r7, #16
 800f5c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f5c8:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_FOURLINE_DATA_ACTIVATIONS_COUNT, g_fourline_data_map_activations);
  
  const ai_buffer_array map_weights = 
 800f5cc:	4a0a      	ldr	r2, [pc, #40]	; (800f5f8 <ai_fourline_data_params_get+0x4c>)
 800f5ce:	f107 0308 	add.w	r3, r7, #8
 800f5d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f5d6:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_FOURLINE_DATA_WEIGHTS_COUNT, g_fourline_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 800f5da:	f107 0210 	add.w	r2, r7, #16
 800f5de:	f107 0308 	add.w	r3, r7, #8
 800f5e2:	4619      	mov	r1, r3
 800f5e4:	6878      	ldr	r0, [r7, #4]
 800f5e6:	f000 f90b 	bl	800f800 <ai_platform_bind_network_params>
 800f5ea:	4603      	mov	r3, r0
}
 800f5ec:	4618      	mov	r0, r3
 800f5ee:	3718      	adds	r7, #24
 800f5f0:	46bd      	mov	sp, r7
 800f5f2:	bd80      	pop	{r7, pc}
 800f5f4:	08018e00 	.word	0x08018e00
 800f5f8:	08018e08 	.word	0x08018e08

0800f5fc <ai_buffer_get_size>:
 800f5fc:	b368      	cbz	r0, 800f65a <ai_buffer_get_size+0x5e>
 800f5fe:	4b17      	ldr	r3, [pc, #92]	; (800f65c <ai_buffer_get_size+0x60>)
 800f600:	4a17      	ldr	r2, [pc, #92]	; (800f660 <ai_buffer_get_size+0x64>)
 800f602:	b410      	push	{r4}
 800f604:	6804      	ldr	r4, [r0, #0]
 800f606:	4023      	ands	r3, r4
 800f608:	4293      	cmp	r3, r2
 800f60a:	d123      	bne.n	800f654 <ai_buffer_get_size+0x58>
 800f60c:	b311      	cbz	r1, 800f654 <ai_buffer_get_size+0x58>
 800f60e:	6984      	ldr	r4, [r0, #24]
 800f610:	6862      	ldr	r2, [r4, #4]
 800f612:	321f      	adds	r2, #31
 800f614:	f022 021f 	bic.w	r2, r2, #31
 800f618:	7d03      	ldrb	r3, [r0, #20]
 800f61a:	6941      	ldr	r1, [r0, #20]
 800f61c:	f1a3 0301 	sub.w	r3, r3, #1
 800f620:	f3c1 2017 	ubfx	r0, r1, #8, #24
 800f624:	fab3 f383 	clz	r3, r3
 800f628:	095b      	lsrs	r3, r3, #5
 800f62a:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 800f62e:	da0c      	bge.n	800f64a <ai_buffer_get_size+0x4e>
 800f630:	2b01      	cmp	r3, #1
 800f632:	d103      	bne.n	800f63c <ai_buffer_get_size+0x40>
 800f634:	2802      	cmp	r0, #2
 800f636:	f04f 0302 	mov.w	r3, #2
 800f63a:	d006      	beq.n	800f64a <ai_buffer_get_size+0x4e>
 800f63c:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800f640:	3301      	adds	r3, #1
 800f642:	4298      	cmp	r0, r3
 800f644:	fb01 f202 	mul.w	r2, r1, r2
 800f648:	d1f2      	bne.n	800f630 <ai_buffer_get_size+0x34>
 800f64a:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 800f64e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f652:	4770      	bx	lr
 800f654:	6984      	ldr	r4, [r0, #24]
 800f656:	6862      	ldr	r2, [r4, #4]
 800f658:	e7de      	b.n	800f618 <ai_buffer_get_size+0x1c>
 800f65a:	4770      	bx	lr
 800f65c:	017fffff 	.word	0x017fffff
 800f660:	000400c0 	.word	0x000400c0

0800f664 <ai_buffer_array_sane>:
 800f664:	b138      	cbz	r0, 800f676 <ai_buffer_array_sane+0x12>
 800f666:	6843      	ldr	r3, [r0, #4]
 800f668:	b123      	cbz	r3, 800f674 <ai_buffer_array_sane+0x10>
 800f66a:	8840      	ldrh	r0, [r0, #2]
 800f66c:	3800      	subs	r0, #0
 800f66e:	bf18      	it	ne
 800f670:	2001      	movne	r0, #1
 800f672:	4770      	bx	lr
 800f674:	4618      	mov	r0, r3
 800f676:	4770      	bx	lr

0800f678 <ai_buffer_array_item_set_address>:
 800f678:	b150      	cbz	r0, 800f690 <ai_buffer_array_item_set_address+0x18>
 800f67a:	6843      	ldr	r3, [r0, #4]
 800f67c:	b14b      	cbz	r3, 800f692 <ai_buffer_array_item_set_address+0x1a>
 800f67e:	8840      	ldrh	r0, [r0, #2]
 800f680:	b900      	cbnz	r0, 800f684 <ai_buffer_array_item_set_address+0xc>
 800f682:	4770      	bx	lr
 800f684:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800f688:	2001      	movs	r0, #1
 800f68a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800f68e:	604a      	str	r2, [r1, #4]
 800f690:	4770      	bx	lr
 800f692:	4618      	mov	r0, r3
 800f694:	4770      	bx	lr
 800f696:	bf00      	nop

0800f698 <_ai_platform_acquire_crc>:
 800f698:	2001      	movs	r0, #1
 800f69a:	4770      	bx	lr

0800f69c <_ai_platform_release_crc>:
 800f69c:	4770      	bx	lr
 800f69e:	bf00      	nop

0800f6a0 <ai_platform_get_weights_map>:
 800f6a0:	2900      	cmp	r1, #0
 800f6a2:	bf18      	it	ne
 800f6a4:	2800      	cmpne	r0, #0
 800f6a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6a8:	bf0c      	ite	eq
 800f6aa:	2401      	moveq	r4, #1
 800f6ac:	2400      	movne	r4, #0
 800f6ae:	2a00      	cmp	r2, #0
 800f6b0:	bf08      	it	eq
 800f6b2:	f044 0401 	orreq.w	r4, r4, #1
 800f6b6:	b114      	cbz	r4, 800f6be <ai_platform_get_weights_map+0x1e>
 800f6b8:	2400      	movs	r4, #0
 800f6ba:	4620      	mov	r0, r4
 800f6bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f6be:	4616      	mov	r6, r2
 800f6c0:	4b22      	ldr	r3, [pc, #136]	; (800f74c <ai_platform_get_weights_map+0xac>)
 800f6c2:	6812      	ldr	r2, [r2, #0]
 800f6c4:	4605      	mov	r5, r0
 800f6c6:	460f      	mov	r7, r1
 800f6c8:	429a      	cmp	r2, r3
 800f6ca:	d022      	beq.n	800f712 <ai_platform_get_weights_map+0x72>
 800f6cc:	6870      	ldr	r0, [r6, #4]
 800f6ce:	2800      	cmp	r0, #0
 800f6d0:	d0f2      	beq.n	800f6b8 <ai_platform_get_weights_map+0x18>
 800f6d2:	6806      	ldr	r6, [r0, #0]
 800f6d4:	429e      	cmp	r6, r3
 800f6d6:	d006      	beq.n	800f6e6 <ai_platform_get_weights_map+0x46>
 800f6d8:	f1a1 0401 	sub.w	r4, r1, #1
 800f6dc:	6028      	str	r0, [r5, #0]
 800f6de:	fab4 f484 	clz	r4, r4
 800f6e2:	0964      	lsrs	r4, r4, #5
 800f6e4:	e7e9      	b.n	800f6ba <ai_platform_get_weights_map+0x1a>
 800f6e6:	3d04      	subs	r5, #4
 800f6e8:	4602      	mov	r2, r0
 800f6ea:	4621      	mov	r1, r4
 800f6ec:	e000      	b.n	800f6f0 <ai_platform_get_weights_map+0x50>
 800f6ee:	4619      	mov	r1, r3
 800f6f0:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800f6f4:	42b3      	cmp	r3, r6
 800f6f6:	d025      	beq.n	800f744 <ai_platform_get_weights_map+0xa4>
 800f6f8:	f845 3f04 	str.w	r3, [r5, #4]!
 800f6fc:	1c4b      	adds	r3, r1, #1
 800f6fe:	429f      	cmp	r7, r3
 800f700:	d8f5      	bhi.n	800f6ee <ai_platform_get_weights_map+0x4e>
 800f702:	d1da      	bne.n	800f6ba <ai_platform_get_weights_map+0x1a>
 800f704:	3102      	adds	r1, #2
 800f706:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800f70a:	42b3      	cmp	r3, r6
 800f70c:	d1d5      	bne.n	800f6ba <ai_platform_get_weights_map+0x1a>
 800f70e:	2401      	movs	r4, #1
 800f710:	e7d3      	b.n	800f6ba <ai_platform_get_weights_map+0x1a>
 800f712:	1d30      	adds	r0, r6, #4
 800f714:	f7ff ffa6 	bl	800f664 <ai_buffer_array_sane>
 800f718:	2800      	cmp	r0, #0
 800f71a:	d0cd      	beq.n	800f6b8 <ai_platform_get_weights_map+0x18>
 800f71c:	88f3      	ldrh	r3, [r6, #6]
 800f71e:	429f      	cmp	r7, r3
 800f720:	d1ca      	bne.n	800f6b8 <ai_platform_get_weights_map+0x18>
 800f722:	3d04      	subs	r5, #4
 800f724:	4622      	mov	r2, r4
 800f726:	68b3      	ldr	r3, [r6, #8]
 800f728:	4423      	add	r3, r4
 800f72a:	341c      	adds	r4, #28
 800f72c:	685b      	ldr	r3, [r3, #4]
 800f72e:	b123      	cbz	r3, 800f73a <ai_platform_get_weights_map+0x9a>
 800f730:	3201      	adds	r2, #1
 800f732:	f845 3f04 	str.w	r3, [r5, #4]!
 800f736:	4297      	cmp	r7, r2
 800f738:	d8f5      	bhi.n	800f726 <ai_platform_get_weights_map+0x86>
 800f73a:	1abc      	subs	r4, r7, r2
 800f73c:	fab4 f484 	clz	r4, r4
 800f740:	0964      	lsrs	r4, r4, #5
 800f742:	e7ba      	b.n	800f6ba <ai_platform_get_weights_map+0x1a>
 800f744:	428f      	cmp	r7, r1
 800f746:	d1b8      	bne.n	800f6ba <ai_platform_get_weights_map+0x1a>
 800f748:	e7e1      	b.n	800f70e <ai_platform_get_weights_map+0x6e>
 800f74a:	bf00      	nop
 800f74c:	a1facade 	.word	0xa1facade

0800f750 <ai_platform_get_activations_map>:
 800f750:	2900      	cmp	r1, #0
 800f752:	bf18      	it	ne
 800f754:	2800      	cmpne	r0, #0
 800f756:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f758:	bf0c      	ite	eq
 800f75a:	2401      	moveq	r4, #1
 800f75c:	2400      	movne	r4, #0
 800f75e:	2a00      	cmp	r2, #0
 800f760:	bf08      	it	eq
 800f762:	f044 0401 	orreq.w	r4, r4, #1
 800f766:	b114      	cbz	r4, 800f76e <ai_platform_get_activations_map+0x1e>
 800f768:	2400      	movs	r4, #0
 800f76a:	4620      	mov	r0, r4
 800f76c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f76e:	4616      	mov	r6, r2
 800f770:	4b22      	ldr	r3, [pc, #136]	; (800f7fc <ai_platform_get_activations_map+0xac>)
 800f772:	6812      	ldr	r2, [r2, #0]
 800f774:	4605      	mov	r5, r0
 800f776:	460f      	mov	r7, r1
 800f778:	429a      	cmp	r2, r3
 800f77a:	d022      	beq.n	800f7c2 <ai_platform_get_activations_map+0x72>
 800f77c:	6a30      	ldr	r0, [r6, #32]
 800f77e:	2800      	cmp	r0, #0
 800f780:	d0f2      	beq.n	800f768 <ai_platform_get_activations_map+0x18>
 800f782:	6806      	ldr	r6, [r0, #0]
 800f784:	429e      	cmp	r6, r3
 800f786:	d006      	beq.n	800f796 <ai_platform_get_activations_map+0x46>
 800f788:	f1a1 0401 	sub.w	r4, r1, #1
 800f78c:	6028      	str	r0, [r5, #0]
 800f78e:	fab4 f484 	clz	r4, r4
 800f792:	0964      	lsrs	r4, r4, #5
 800f794:	e7e9      	b.n	800f76a <ai_platform_get_activations_map+0x1a>
 800f796:	3d04      	subs	r5, #4
 800f798:	4602      	mov	r2, r0
 800f79a:	4621      	mov	r1, r4
 800f79c:	e000      	b.n	800f7a0 <ai_platform_get_activations_map+0x50>
 800f79e:	4619      	mov	r1, r3
 800f7a0:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800f7a4:	42b3      	cmp	r3, r6
 800f7a6:	d026      	beq.n	800f7f6 <ai_platform_get_activations_map+0xa6>
 800f7a8:	f845 3f04 	str.w	r3, [r5, #4]!
 800f7ac:	1c4b      	adds	r3, r1, #1
 800f7ae:	429f      	cmp	r7, r3
 800f7b0:	d8f5      	bhi.n	800f79e <ai_platform_get_activations_map+0x4e>
 800f7b2:	d1da      	bne.n	800f76a <ai_platform_get_activations_map+0x1a>
 800f7b4:	3102      	adds	r1, #2
 800f7b6:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800f7ba:	42b3      	cmp	r3, r6
 800f7bc:	d1d5      	bne.n	800f76a <ai_platform_get_activations_map+0x1a>
 800f7be:	2401      	movs	r4, #1
 800f7c0:	e7d3      	b.n	800f76a <ai_platform_get_activations_map+0x1a>
 800f7c2:	f106 000c 	add.w	r0, r6, #12
 800f7c6:	f7ff ff4d 	bl	800f664 <ai_buffer_array_sane>
 800f7ca:	2800      	cmp	r0, #0
 800f7cc:	d0cc      	beq.n	800f768 <ai_platform_get_activations_map+0x18>
 800f7ce:	89f3      	ldrh	r3, [r6, #14]
 800f7d0:	429f      	cmp	r7, r3
 800f7d2:	d1c9      	bne.n	800f768 <ai_platform_get_activations_map+0x18>
 800f7d4:	3d04      	subs	r5, #4
 800f7d6:	4622      	mov	r2, r4
 800f7d8:	6933      	ldr	r3, [r6, #16]
 800f7da:	4423      	add	r3, r4
 800f7dc:	341c      	adds	r4, #28
 800f7de:	685b      	ldr	r3, [r3, #4]
 800f7e0:	b123      	cbz	r3, 800f7ec <ai_platform_get_activations_map+0x9c>
 800f7e2:	3201      	adds	r2, #1
 800f7e4:	f845 3f04 	str.w	r3, [r5, #4]!
 800f7e8:	4297      	cmp	r7, r2
 800f7ea:	d8f5      	bhi.n	800f7d8 <ai_platform_get_activations_map+0x88>
 800f7ec:	1abc      	subs	r4, r7, r2
 800f7ee:	fab4 f484 	clz	r4, r4
 800f7f2:	0964      	lsrs	r4, r4, #5
 800f7f4:	e7b9      	b.n	800f76a <ai_platform_get_activations_map+0x1a>
 800f7f6:	428f      	cmp	r7, r1
 800f7f8:	d1b7      	bne.n	800f76a <ai_platform_get_activations_map+0x1a>
 800f7fa:	e7e0      	b.n	800f7be <ai_platform_get_activations_map+0x6e>
 800f7fc:	a1facade 	.word	0xa1facade

0800f800 <ai_platform_bind_network_params>:
 800f800:	2a00      	cmp	r2, #0
 800f802:	bf18      	it	ne
 800f804:	2900      	cmpne	r1, #0
 800f806:	d010      	beq.n	800f82a <ai_platform_bind_network_params+0x2a>
 800f808:	b178      	cbz	r0, 800f82a <ai_platform_bind_network_params+0x2a>
 800f80a:	4603      	mov	r3, r0
 800f80c:	4808      	ldr	r0, [pc, #32]	; (800f830 <ai_platform_bind_network_params+0x30>)
 800f80e:	f103 0c0c 	add.w	ip, r3, #12
 800f812:	f843 0b04 	str.w	r0, [r3], #4
 800f816:	c903      	ldmia	r1, {r0, r1}
 800f818:	e883 0003 	stmia.w	r3, {r0, r1}
 800f81c:	2301      	movs	r3, #1
 800f81e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f822:	e88c 0003 	stmia.w	ip, {r0, r1}
 800f826:	4618      	mov	r0, r3
 800f828:	4770      	bx	lr
 800f82a:	2300      	movs	r3, #0
 800f82c:	4618      	mov	r0, r3
 800f82e:	4770      	bx	lr
 800f830:	a1facade 	.word	0xa1facade

0800f834 <ai_platform_network_get_error>:
 800f834:	b510      	push	{r4, lr}
 800f836:	2800      	cmp	r0, #0
 800f838:	d03f      	beq.n	800f8ba <ai_platform_network_get_error+0x86>
 800f83a:	4b7d      	ldr	r3, [pc, #500]	; (800fa30 <ai_platform_network_get_error+0x1fc>)
 800f83c:	4604      	mov	r4, r0
 800f83e:	6802      	ldr	r2, [r0, #0]
 800f840:	429a      	cmp	r2, r3
 800f842:	d13a      	bne.n	800f8ba <ai_platform_network_get_error+0x86>
 800f844:	f7ff ff28 	bl	800f698 <_ai_platform_acquire_crc>
 800f848:	4b7a      	ldr	r3, [pc, #488]	; (800fa34 <ai_platform_network_get_error+0x200>)
 800f84a:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f854:	189a      	adds	r2, r3, r2
 800f856:	2a01      	cmp	r2, #1
 800f858:	f240 8086 	bls.w	800f968 <ai_platform_network_get_error+0x134>
 800f85c:	f240 4249 	movw	r2, #1097	; 0x449
 800f860:	4293      	cmp	r3, r2
 800f862:	f000 8081 	beq.w	800f968 <ai_platform_network_get_error+0x134>
 800f866:	4a74      	ldr	r2, [pc, #464]	; (800fa38 <ai_platform_network_get_error+0x204>)
 800f868:	6813      	ldr	r3, [r2, #0]
 800f86a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f86e:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800f872:	f000 8087 	beq.w	800f984 <ai_platform_network_get_error+0x150>
 800f876:	6813      	ldr	r3, [r2, #0]
 800f878:	f240 4183 	movw	r1, #1155	; 0x483
 800f87c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f880:	428b      	cmp	r3, r1
 800f882:	f000 80a9 	beq.w	800f9d8 <ai_platform_network_get_error+0x1a4>
 800f886:	6813      	ldr	r3, [r2, #0]
 800f888:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f88c:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800f890:	f000 80c0 	beq.w	800fa14 <ai_platform_network_get_error+0x1e0>
 800f894:	6813      	ldr	r3, [r2, #0]
 800f896:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	f040 8082 	bne.w	800f9a4 <ai_platform_network_get_error+0x170>
 800f8a0:	4a66      	ldr	r2, [pc, #408]	; (800fa3c <ai_platform_network_get_error+0x208>)
 800f8a2:	2301      	movs	r3, #1
 800f8a4:	6093      	str	r3, [r2, #8]
 800f8a6:	6893      	ldr	r3, [r2, #8]
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d1fc      	bne.n	800f8a6 <ai_platform_network_get_error+0x72>
 800f8ac:	4964      	ldr	r1, [pc, #400]	; (800fa40 <ai_platform_network_get_error+0x20c>)
 800f8ae:	4b65      	ldr	r3, [pc, #404]	; (800fa44 <ai_platform_network_get_error+0x210>)
 800f8b0:	6011      	str	r1, [r2, #0]
 800f8b2:	6812      	ldr	r2, [r2, #0]
 800f8b4:	429a      	cmp	r2, r3
 800f8b6:	d075      	beq.n	800f9a4 <ai_platform_network_get_error+0x170>
 800f8b8:	e7fe      	b.n	800f8b8 <ai_platform_network_get_error+0x84>
 800f8ba:	f7ff feed 	bl	800f698 <_ai_platform_acquire_crc>
 800f8be:	4b5d      	ldr	r3, [pc, #372]	; (800fa34 <ai_platform_network_get_error+0x200>)
 800f8c0:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f8ca:	185a      	adds	r2, r3, r1
 800f8cc:	2a01      	cmp	r2, #1
 800f8ce:	d929      	bls.n	800f924 <ai_platform_network_get_error+0xf0>
 800f8d0:	f240 4249 	movw	r2, #1097	; 0x449
 800f8d4:	4293      	cmp	r3, r2
 800f8d6:	d025      	beq.n	800f924 <ai_platform_network_get_error+0xf0>
 800f8d8:	4a57      	ldr	r2, [pc, #348]	; (800fa38 <ai_platform_network_get_error+0x204>)
 800f8da:	6813      	ldr	r3, [r2, #0]
 800f8dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f8e0:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800f8e4:	d02b      	beq.n	800f93e <ai_platform_network_get_error+0x10a>
 800f8e6:	6813      	ldr	r3, [r2, #0]
 800f8e8:	f240 4183 	movw	r1, #1155	; 0x483
 800f8ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f8f0:	428b      	cmp	r3, r1
 800f8f2:	d060      	beq.n	800f9b6 <ai_platform_network_get_error+0x182>
 800f8f4:	6813      	ldr	r3, [r2, #0]
 800f8f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f8fa:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800f8fe:	d07c      	beq.n	800f9fa <ai_platform_network_get_error+0x1c6>
 800f900:	6813      	ldr	r3, [r2, #0]
 800f902:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f906:	2b00      	cmp	r3, #0
 800f908:	d129      	bne.n	800f95e <ai_platform_network_get_error+0x12a>
 800f90a:	4a4c      	ldr	r2, [pc, #304]	; (800fa3c <ai_platform_network_get_error+0x208>)
 800f90c:	2301      	movs	r3, #1
 800f90e:	6093      	str	r3, [r2, #8]
 800f910:	6893      	ldr	r3, [r2, #8]
 800f912:	2b00      	cmp	r3, #0
 800f914:	d1fc      	bne.n	800f910 <ai_platform_network_get_error+0xdc>
 800f916:	494a      	ldr	r1, [pc, #296]	; (800fa40 <ai_platform_network_get_error+0x20c>)
 800f918:	4b4a      	ldr	r3, [pc, #296]	; (800fa44 <ai_platform_network_get_error+0x210>)
 800f91a:	6011      	str	r1, [r2, #0]
 800f91c:	6812      	ldr	r2, [r2, #0]
 800f91e:	429a      	cmp	r2, r3
 800f920:	d01d      	beq.n	800f95e <ai_platform_network_get_error+0x12a>
 800f922:	e7fe      	b.n	800f922 <ai_platform_network_get_error+0xee>
 800f924:	4a45      	ldr	r2, [pc, #276]	; (800fa3c <ai_platform_network_get_error+0x208>)
 800f926:	2301      	movs	r3, #1
 800f928:	6093      	str	r3, [r2, #8]
 800f92a:	6893      	ldr	r3, [r2, #8]
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d1fc      	bne.n	800f92a <ai_platform_network_get_error+0xf6>
 800f930:	4943      	ldr	r1, [pc, #268]	; (800fa40 <ai_platform_network_get_error+0x20c>)
 800f932:	4b44      	ldr	r3, [pc, #272]	; (800fa44 <ai_platform_network_get_error+0x210>)
 800f934:	6011      	str	r1, [r2, #0]
 800f936:	6812      	ldr	r2, [r2, #0]
 800f938:	429a      	cmp	r2, r3
 800f93a:	d010      	beq.n	800f95e <ai_platform_network_get_error+0x12a>
 800f93c:	e7fe      	b.n	800f93c <ai_platform_network_get_error+0x108>
 800f93e:	4a42      	ldr	r2, [pc, #264]	; (800fa48 <ai_platform_network_get_error+0x214>)
 800f940:	2301      	movs	r3, #1
 800f942:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800f946:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d1fb      	bne.n	800f946 <ai_platform_network_get_error+0x112>
 800f94e:	493c      	ldr	r1, [pc, #240]	; (800fa40 <ai_platform_network_get_error+0x20c>)
 800f950:	4b3c      	ldr	r3, [pc, #240]	; (800fa44 <ai_platform_network_get_error+0x210>)
 800f952:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800f956:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800f95a:	429a      	cmp	r2, r3
 800f95c:	d111      	bne.n	800f982 <ai_platform_network_get_error+0x14e>
 800f95e:	f7ff fe9d 	bl	800f69c <_ai_platform_release_crc>
 800f962:	f241 0010 	movw	r0, #4112	; 0x1010
 800f966:	bd10      	pop	{r4, pc}
 800f968:	4a34      	ldr	r2, [pc, #208]	; (800fa3c <ai_platform_network_get_error+0x208>)
 800f96a:	2301      	movs	r3, #1
 800f96c:	6093      	str	r3, [r2, #8]
 800f96e:	6893      	ldr	r3, [r2, #8]
 800f970:	2b00      	cmp	r3, #0
 800f972:	d1fc      	bne.n	800f96e <ai_platform_network_get_error+0x13a>
 800f974:	4932      	ldr	r1, [pc, #200]	; (800fa40 <ai_platform_network_get_error+0x20c>)
 800f976:	4b33      	ldr	r3, [pc, #204]	; (800fa44 <ai_platform_network_get_error+0x210>)
 800f978:	6011      	str	r1, [r2, #0]
 800f97a:	6812      	ldr	r2, [r2, #0]
 800f97c:	429a      	cmp	r2, r3
 800f97e:	d011      	beq.n	800f9a4 <ai_platform_network_get_error+0x170>
 800f980:	e7fe      	b.n	800f980 <ai_platform_network_get_error+0x14c>
 800f982:	e7fe      	b.n	800f982 <ai_platform_network_get_error+0x14e>
 800f984:	4a30      	ldr	r2, [pc, #192]	; (800fa48 <ai_platform_network_get_error+0x214>)
 800f986:	2301      	movs	r3, #1
 800f988:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800f98c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800f990:	2b00      	cmp	r3, #0
 800f992:	d1fb      	bne.n	800f98c <ai_platform_network_get_error+0x158>
 800f994:	492a      	ldr	r1, [pc, #168]	; (800fa40 <ai_platform_network_get_error+0x20c>)
 800f996:	4b2b      	ldr	r3, [pc, #172]	; (800fa44 <ai_platform_network_get_error+0x210>)
 800f998:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800f99c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800f9a0:	429a      	cmp	r2, r3
 800f9a2:	d107      	bne.n	800f9b4 <ai_platform_network_get_error+0x180>
 800f9a4:	f7ff fe7a 	bl	800f69c <_ai_platform_release_crc>
 800f9a8:	f104 0010 	add.w	r0, r4, #16
 800f9ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f9b0:	f001 bae4 	b.w	8010f7c <core_get_error>
 800f9b4:	e7fe      	b.n	800f9b4 <ai_platform_network_get_error+0x180>
 800f9b6:	4a24      	ldr	r2, [pc, #144]	; (800fa48 <ai_platform_network_get_error+0x214>)
 800f9b8:	2301      	movs	r3, #1
 800f9ba:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800f9be:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d1fb      	bne.n	800f9be <ai_platform_network_get_error+0x18a>
 800f9c6:	491e      	ldr	r1, [pc, #120]	; (800fa40 <ai_platform_network_get_error+0x20c>)
 800f9c8:	4b1e      	ldr	r3, [pc, #120]	; (800fa44 <ai_platform_network_get_error+0x210>)
 800f9ca:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800f9ce:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800f9d2:	429a      	cmp	r2, r3
 800f9d4:	d0c3      	beq.n	800f95e <ai_platform_network_get_error+0x12a>
 800f9d6:	e7fe      	b.n	800f9d6 <ai_platform_network_get_error+0x1a2>
 800f9d8:	4a1b      	ldr	r2, [pc, #108]	; (800fa48 <ai_platform_network_get_error+0x214>)
 800f9da:	2301      	movs	r3, #1
 800f9dc:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800f9e0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d1fb      	bne.n	800f9e0 <ai_platform_network_get_error+0x1ac>
 800f9e8:	4915      	ldr	r1, [pc, #84]	; (800fa40 <ai_platform_network_get_error+0x20c>)
 800f9ea:	4b16      	ldr	r3, [pc, #88]	; (800fa44 <ai_platform_network_get_error+0x210>)
 800f9ec:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800f9f0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800f9f4:	429a      	cmp	r2, r3
 800f9f6:	d0d5      	beq.n	800f9a4 <ai_platform_network_get_error+0x170>
 800f9f8:	e7fe      	b.n	800f9f8 <ai_platform_network_get_error+0x1c4>
 800f9fa:	4a10      	ldr	r2, [pc, #64]	; (800fa3c <ai_platform_network_get_error+0x208>)
 800f9fc:	2301      	movs	r3, #1
 800f9fe:	6093      	str	r3, [r2, #8]
 800fa00:	6893      	ldr	r3, [r2, #8]
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d1fc      	bne.n	800fa00 <ai_platform_network_get_error+0x1cc>
 800fa06:	490e      	ldr	r1, [pc, #56]	; (800fa40 <ai_platform_network_get_error+0x20c>)
 800fa08:	4b0e      	ldr	r3, [pc, #56]	; (800fa44 <ai_platform_network_get_error+0x210>)
 800fa0a:	6011      	str	r1, [r2, #0]
 800fa0c:	6812      	ldr	r2, [r2, #0]
 800fa0e:	429a      	cmp	r2, r3
 800fa10:	d0a5      	beq.n	800f95e <ai_platform_network_get_error+0x12a>
 800fa12:	e7fe      	b.n	800fa12 <ai_platform_network_get_error+0x1de>
 800fa14:	4a09      	ldr	r2, [pc, #36]	; (800fa3c <ai_platform_network_get_error+0x208>)
 800fa16:	2301      	movs	r3, #1
 800fa18:	6093      	str	r3, [r2, #8]
 800fa1a:	6893      	ldr	r3, [r2, #8]
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d1fc      	bne.n	800fa1a <ai_platform_network_get_error+0x1e6>
 800fa20:	4907      	ldr	r1, [pc, #28]	; (800fa40 <ai_platform_network_get_error+0x20c>)
 800fa22:	4b08      	ldr	r3, [pc, #32]	; (800fa44 <ai_platform_network_get_error+0x210>)
 800fa24:	6011      	str	r1, [r2, #0]
 800fa26:	6812      	ldr	r2, [r2, #0]
 800fa28:	429a      	cmp	r2, r3
 800fa2a:	d0bb      	beq.n	800f9a4 <ai_platform_network_get_error+0x170>
 800fa2c:	e7fe      	b.n	800fa2c <ai_platform_network_get_error+0x1f8>
 800fa2e:	bf00      	nop
 800fa30:	a1c00100 	.word	0xa1c00100
 800fa34:	e0042000 	.word	0xe0042000
 800fa38:	5c001000 	.word	0x5c001000
 800fa3c:	40023000 	.word	0x40023000
 800fa40:	f407a5c2 	.word	0xf407a5c2
 800fa44:	b5e8b5cd 	.word	0xb5e8b5cd
 800fa48:	58024000 	.word	0x58024000

0800fa4c <ai_platform_network_set_error>:
 800fa4c:	b110      	cbz	r0, 800fa54 <ai_platform_network_set_error+0x8>
 800fa4e:	3010      	adds	r0, #16
 800fa50:	f001 ba9a 	b.w	8010f88 <core_set_error>
 800fa54:	4770      	bx	lr
 800fa56:	bf00      	nop

0800fa58 <ai_platform_inputs_get>:
 800fa58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa5c:	b085      	sub	sp, #20
 800fa5e:	9102      	str	r1, [sp, #8]
 800fa60:	2800      	cmp	r0, #0
 800fa62:	f000 8093 	beq.w	800fb8c <ai_platform_inputs_get+0x134>
 800fa66:	4baa      	ldr	r3, [pc, #680]	; (800fd10 <ai_platform_inputs_get+0x2b8>)
 800fa68:	4681      	mov	r9, r0
 800fa6a:	6802      	ldr	r2, [r0, #0]
 800fa6c:	429a      	cmp	r2, r3
 800fa6e:	f040 808d 	bne.w	800fb8c <ai_platform_inputs_get+0x134>
 800fa72:	f7ff fe11 	bl	800f698 <_ai_platform_acquire_crc>
 800fa76:	4ba7      	ldr	r3, [pc, #668]	; (800fd14 <ai_platform_inputs_get+0x2bc>)
 800fa78:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fa82:	189a      	adds	r2, r3, r2
 800fa84:	2a01      	cmp	r2, #1
 800fa86:	f240 80da 	bls.w	800fc3e <ai_platform_inputs_get+0x1e6>
 800fa8a:	f240 4249 	movw	r2, #1097	; 0x449
 800fa8e:	4293      	cmp	r3, r2
 800fa90:	f000 80d5 	beq.w	800fc3e <ai_platform_inputs_get+0x1e6>
 800fa94:	4aa0      	ldr	r2, [pc, #640]	; (800fd18 <ai_platform_inputs_get+0x2c0>)
 800fa96:	6813      	ldr	r3, [r2, #0]
 800fa98:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fa9c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800faa0:	f000 80dc 	beq.w	800fc5c <ai_platform_inputs_get+0x204>
 800faa4:	6813      	ldr	r3, [r2, #0]
 800faa6:	f240 4183 	movw	r1, #1155	; 0x483
 800faaa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800faae:	428b      	cmp	r3, r1
 800fab0:	f000 810e 	beq.w	800fcd0 <ai_platform_inputs_get+0x278>
 800fab4:	6813      	ldr	r3, [r2, #0]
 800fab6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800faba:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800fabe:	f000 8143 	beq.w	800fd48 <ai_platform_inputs_get+0x2f0>
 800fac2:	6813      	ldr	r3, [r2, #0]
 800fac4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fac8:	2b00      	cmp	r3, #0
 800faca:	f000 8113 	beq.w	800fcf4 <ai_platform_inputs_get+0x29c>
 800face:	f7ff fde5 	bl	800f69c <_ai_platform_release_crc>
 800fad2:	f8b9 302c 	ldrh.w	r3, [r9, #44]	; 0x2c
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	f000 80d2 	beq.w	800fc80 <ai_platform_inputs_get+0x228>
 800fadc:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 800fae0:	f1ba 0f00 	cmp.w	sl, #0
 800fae4:	f000 80cc 	beq.w	800fc80 <ai_platform_inputs_get+0x228>
 800fae8:	2100      	movs	r1, #0
 800faea:	f8cd 900c 	str.w	r9, [sp, #12]
 800faee:	460d      	mov	r5, r1
 800faf0:	4689      	mov	r9, r1
 800faf2:	e016      	b.n	800fb22 <ai_platform_inputs_get+0xca>
 800faf4:	9a01      	ldr	r2, [sp, #4]
 800faf6:	2301      	movs	r3, #1
 800faf8:	f848 3002 	str.w	r3, [r8, r2]
 800fafc:	69b2      	ldr	r2, [r6, #24]
 800fafe:	f04f 0301 	mov.w	r3, #1
 800fb02:	6856      	ldr	r6, [r2, #4]
 800fb04:	3501      	adds	r5, #1
 800fb06:	f109 091c 	add.w	r9, r9, #28
 800fb0a:	7523      	strb	r3, [r4, #20]
 800fb0c:	2300      	movs	r3, #0
 800fb0e:	6962      	ldr	r2, [r4, #20]
 800fb10:	60a7      	str	r7, [r4, #8]
 800fb12:	f36b 221f 	bfi	r2, fp, #8, #24
 800fb16:	6126      	str	r6, [r4, #16]
 800fb18:	61a1      	str	r1, [r4, #24]
 800fb1a:	60e3      	str	r3, [r4, #12]
 800fb1c:	6162      	str	r2, [r4, #20]
 800fb1e:	e9c4 0c00 	strd	r0, ip, [r4]
 800fb22:	f8ba 3000 	ldrh.w	r3, [sl]
 800fb26:	b2ac      	uxth	r4, r5
 800fb28:	42ab      	cmp	r3, r5
 800fb2a:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 800fb2e:	9301      	str	r3, [sp, #4]
 800fb30:	f240 80b5 	bls.w	800fc9e <ai_platform_inputs_get+0x246>
 800fb34:	f8da 3004 	ldr.w	r3, [sl, #4]
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	f000 80b0 	beq.w	800fc9e <ai_platform_inputs_get+0x246>
 800fb3e:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800fb42:	2e00      	cmp	r6, #0
 800fb44:	f000 80ab 	beq.w	800fc9e <ai_platform_inputs_get+0x246>
 800fb48:	f8da 3008 	ldr.w	r3, [sl, #8]
 800fb4c:	69b2      	ldr	r2, [r6, #24]
 800fb4e:	68f1      	ldr	r1, [r6, #12]
 800fb50:	6810      	ldr	r0, [r2, #0]
 800fb52:	9100      	str	r1, [sp, #0]
 800fb54:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 800fb58:	68b3      	ldr	r3, [r6, #8]
 800fb5a:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 800fb5e:	444c      	add	r4, r9
 800fb60:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 800fb64:	f002 fd40 	bl	80125e8 <ai_array_to_buffer_fmt>
 800fb68:	69b2      	ldr	r2, [r6, #24]
 800fb6a:	9900      	ldr	r1, [sp, #0]
 800fb6c:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800fb70:	2f00      	cmp	r7, #0
 800fb72:	d0c4      	beq.n	800fafe <ai_platform_inputs_get+0xa6>
 800fb74:	2200      	movs	r2, #0
 800fb76:	f848 2035 	str.w	r2, [r8, r5, lsl #3]
 800fb7a:	6832      	ldr	r2, [r6, #0]
 800fb7c:	607a      	str	r2, [r7, #4]
 800fb7e:	b112      	cbz	r2, 800fb86 <ai_platform_inputs_get+0x12e>
 800fb80:	8852      	ldrh	r2, [r2, #2]
 800fb82:	2a00      	cmp	r2, #0
 800fb84:	d1b6      	bne.n	800faf4 <ai_platform_inputs_get+0x9c>
 800fb86:	69b2      	ldr	r2, [r6, #24]
 800fb88:	2700      	movs	r7, #0
 800fb8a:	e7b8      	b.n	800fafe <ai_platform_inputs_get+0xa6>
 800fb8c:	f7ff fd84 	bl	800f698 <_ai_platform_acquire_crc>
 800fb90:	4b60      	ldr	r3, [pc, #384]	; (800fd14 <ai_platform_inputs_get+0x2bc>)
 800fb92:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fb9c:	185a      	adds	r2, r3, r1
 800fb9e:	2a01      	cmp	r2, #1
 800fba0:	d92a      	bls.n	800fbf8 <ai_platform_inputs_get+0x1a0>
 800fba2:	f240 4249 	movw	r2, #1097	; 0x449
 800fba6:	4293      	cmp	r3, r2
 800fba8:	d026      	beq.n	800fbf8 <ai_platform_inputs_get+0x1a0>
 800fbaa:	4a5b      	ldr	r2, [pc, #364]	; (800fd18 <ai_platform_inputs_get+0x2c0>)
 800fbac:	6813      	ldr	r3, [r2, #0]
 800fbae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fbb2:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800fbb6:	d02c      	beq.n	800fc12 <ai_platform_inputs_get+0x1ba>
 800fbb8:	6813      	ldr	r3, [r2, #0]
 800fbba:	f240 4183 	movw	r1, #1155	; 0x483
 800fbbe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fbc2:	428b      	cmp	r3, r1
 800fbc4:	d073      	beq.n	800fcae <ai_platform_inputs_get+0x256>
 800fbc6:	6813      	ldr	r3, [r2, #0]
 800fbc8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fbcc:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800fbd0:	f000 80ac 	beq.w	800fd2c <ai_platform_inputs_get+0x2d4>
 800fbd4:	6813      	ldr	r3, [r2, #0]
 800fbd6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d129      	bne.n	800fc32 <ai_platform_inputs_get+0x1da>
 800fbde:	4a4f      	ldr	r2, [pc, #316]	; (800fd1c <ai_platform_inputs_get+0x2c4>)
 800fbe0:	2301      	movs	r3, #1
 800fbe2:	6093      	str	r3, [r2, #8]
 800fbe4:	6893      	ldr	r3, [r2, #8]
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d1fc      	bne.n	800fbe4 <ai_platform_inputs_get+0x18c>
 800fbea:	494d      	ldr	r1, [pc, #308]	; (800fd20 <ai_platform_inputs_get+0x2c8>)
 800fbec:	4b4d      	ldr	r3, [pc, #308]	; (800fd24 <ai_platform_inputs_get+0x2cc>)
 800fbee:	6011      	str	r1, [r2, #0]
 800fbf0:	6812      	ldr	r2, [r2, #0]
 800fbf2:	429a      	cmp	r2, r3
 800fbf4:	d01d      	beq.n	800fc32 <ai_platform_inputs_get+0x1da>
 800fbf6:	e7fe      	b.n	800fbf6 <ai_platform_inputs_get+0x19e>
 800fbf8:	4a48      	ldr	r2, [pc, #288]	; (800fd1c <ai_platform_inputs_get+0x2c4>)
 800fbfa:	2301      	movs	r3, #1
 800fbfc:	6093      	str	r3, [r2, #8]
 800fbfe:	6893      	ldr	r3, [r2, #8]
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d1fc      	bne.n	800fbfe <ai_platform_inputs_get+0x1a6>
 800fc04:	4946      	ldr	r1, [pc, #280]	; (800fd20 <ai_platform_inputs_get+0x2c8>)
 800fc06:	4b47      	ldr	r3, [pc, #284]	; (800fd24 <ai_platform_inputs_get+0x2cc>)
 800fc08:	6011      	str	r1, [r2, #0]
 800fc0a:	6812      	ldr	r2, [r2, #0]
 800fc0c:	429a      	cmp	r2, r3
 800fc0e:	d010      	beq.n	800fc32 <ai_platform_inputs_get+0x1da>
 800fc10:	e7fe      	b.n	800fc10 <ai_platform_inputs_get+0x1b8>
 800fc12:	4a45      	ldr	r2, [pc, #276]	; (800fd28 <ai_platform_inputs_get+0x2d0>)
 800fc14:	2301      	movs	r3, #1
 800fc16:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800fc1a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d1fb      	bne.n	800fc1a <ai_platform_inputs_get+0x1c2>
 800fc22:	493f      	ldr	r1, [pc, #252]	; (800fd20 <ai_platform_inputs_get+0x2c8>)
 800fc24:	4b3f      	ldr	r3, [pc, #252]	; (800fd24 <ai_platform_inputs_get+0x2cc>)
 800fc26:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800fc2a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800fc2e:	429a      	cmp	r2, r3
 800fc30:	d113      	bne.n	800fc5a <ai_platform_inputs_get+0x202>
 800fc32:	f7ff fd33 	bl	800f69c <_ai_platform_release_crc>
 800fc36:	2000      	movs	r0, #0
 800fc38:	b005      	add	sp, #20
 800fc3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc3e:	4a37      	ldr	r2, [pc, #220]	; (800fd1c <ai_platform_inputs_get+0x2c4>)
 800fc40:	2301      	movs	r3, #1
 800fc42:	6093      	str	r3, [r2, #8]
 800fc44:	6893      	ldr	r3, [r2, #8]
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d1fc      	bne.n	800fc44 <ai_platform_inputs_get+0x1ec>
 800fc4a:	4b35      	ldr	r3, [pc, #212]	; (800fd20 <ai_platform_inputs_get+0x2c8>)
 800fc4c:	6013      	str	r3, [r2, #0]
 800fc4e:	4b35      	ldr	r3, [pc, #212]	; (800fd24 <ai_platform_inputs_get+0x2cc>)
 800fc50:	6812      	ldr	r2, [r2, #0]
 800fc52:	429a      	cmp	r2, r3
 800fc54:	f43f af3b 	beq.w	800face <ai_platform_inputs_get+0x76>
 800fc58:	e7fe      	b.n	800fc58 <ai_platform_inputs_get+0x200>
 800fc5a:	e7fe      	b.n	800fc5a <ai_platform_inputs_get+0x202>
 800fc5c:	4a32      	ldr	r2, [pc, #200]	; (800fd28 <ai_platform_inputs_get+0x2d0>)
 800fc5e:	2301      	movs	r3, #1
 800fc60:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800fc64:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d1fb      	bne.n	800fc64 <ai_platform_inputs_get+0x20c>
 800fc6c:	4b2c      	ldr	r3, [pc, #176]	; (800fd20 <ai_platform_inputs_get+0x2c8>)
 800fc6e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800fc72:	4b2c      	ldr	r3, [pc, #176]	; (800fd24 <ai_platform_inputs_get+0x2cc>)
 800fc74:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800fc78:	429a      	cmp	r2, r3
 800fc7a:	f43f af28 	beq.w	800face <ai_platform_inputs_get+0x76>
 800fc7e:	e7fe      	b.n	800fc7e <ai_platform_inputs_get+0x226>
 800fc80:	2400      	movs	r4, #0
 800fc82:	2218      	movs	r2, #24
 800fc84:	2111      	movs	r1, #17
 800fc86:	f109 0010 	add.w	r0, r9, #16
 800fc8a:	f001 f97d 	bl	8010f88 <core_set_error>
 800fc8e:	4620      	mov	r0, r4
 800fc90:	9b02      	ldr	r3, [sp, #8]
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d0d0      	beq.n	800fc38 <ai_platform_inputs_get+0x1e0>
 800fc96:	801c      	strh	r4, [r3, #0]
 800fc98:	b005      	add	sp, #20
 800fc9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc9e:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800fca2:	2c00      	cmp	r4, #0
 800fca4:	d0ec      	beq.n	800fc80 <ai_platform_inputs_get+0x228>
 800fca6:	f8da 3008 	ldr.w	r3, [sl, #8]
 800fcaa:	6858      	ldr	r0, [r3, #4]
 800fcac:	e7f0      	b.n	800fc90 <ai_platform_inputs_get+0x238>
 800fcae:	4a1e      	ldr	r2, [pc, #120]	; (800fd28 <ai_platform_inputs_get+0x2d0>)
 800fcb0:	2301      	movs	r3, #1
 800fcb2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800fcb6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d1fb      	bne.n	800fcb6 <ai_platform_inputs_get+0x25e>
 800fcbe:	4918      	ldr	r1, [pc, #96]	; (800fd20 <ai_platform_inputs_get+0x2c8>)
 800fcc0:	4b18      	ldr	r3, [pc, #96]	; (800fd24 <ai_platform_inputs_get+0x2cc>)
 800fcc2:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800fcc6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800fcca:	429a      	cmp	r2, r3
 800fccc:	d0b1      	beq.n	800fc32 <ai_platform_inputs_get+0x1da>
 800fcce:	e7fe      	b.n	800fcce <ai_platform_inputs_get+0x276>
 800fcd0:	4a15      	ldr	r2, [pc, #84]	; (800fd28 <ai_platform_inputs_get+0x2d0>)
 800fcd2:	2301      	movs	r3, #1
 800fcd4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800fcd8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d1fb      	bne.n	800fcd8 <ai_platform_inputs_get+0x280>
 800fce0:	4b0f      	ldr	r3, [pc, #60]	; (800fd20 <ai_platform_inputs_get+0x2c8>)
 800fce2:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800fce6:	4b0f      	ldr	r3, [pc, #60]	; (800fd24 <ai_platform_inputs_get+0x2cc>)
 800fce8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800fcec:	429a      	cmp	r2, r3
 800fcee:	f43f aeee 	beq.w	800face <ai_platform_inputs_get+0x76>
 800fcf2:	e7fe      	b.n	800fcf2 <ai_platform_inputs_get+0x29a>
 800fcf4:	4a09      	ldr	r2, [pc, #36]	; (800fd1c <ai_platform_inputs_get+0x2c4>)
 800fcf6:	2301      	movs	r3, #1
 800fcf8:	6093      	str	r3, [r2, #8]
 800fcfa:	6893      	ldr	r3, [r2, #8]
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d1fc      	bne.n	800fcfa <ai_platform_inputs_get+0x2a2>
 800fd00:	4b07      	ldr	r3, [pc, #28]	; (800fd20 <ai_platform_inputs_get+0x2c8>)
 800fd02:	6013      	str	r3, [r2, #0]
 800fd04:	4b07      	ldr	r3, [pc, #28]	; (800fd24 <ai_platform_inputs_get+0x2cc>)
 800fd06:	6812      	ldr	r2, [r2, #0]
 800fd08:	429a      	cmp	r2, r3
 800fd0a:	f43f aee0 	beq.w	800face <ai_platform_inputs_get+0x76>
 800fd0e:	e7fe      	b.n	800fd0e <ai_platform_inputs_get+0x2b6>
 800fd10:	a1c00100 	.word	0xa1c00100
 800fd14:	e0042000 	.word	0xe0042000
 800fd18:	5c001000 	.word	0x5c001000
 800fd1c:	40023000 	.word	0x40023000
 800fd20:	f407a5c2 	.word	0xf407a5c2
 800fd24:	b5e8b5cd 	.word	0xb5e8b5cd
 800fd28:	58024000 	.word	0x58024000
 800fd2c:	4a0d      	ldr	r2, [pc, #52]	; (800fd64 <ai_platform_inputs_get+0x30c>)
 800fd2e:	2301      	movs	r3, #1
 800fd30:	6093      	str	r3, [r2, #8]
 800fd32:	6893      	ldr	r3, [r2, #8]
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d1fc      	bne.n	800fd32 <ai_platform_inputs_get+0x2da>
 800fd38:	490b      	ldr	r1, [pc, #44]	; (800fd68 <ai_platform_inputs_get+0x310>)
 800fd3a:	4b0c      	ldr	r3, [pc, #48]	; (800fd6c <ai_platform_inputs_get+0x314>)
 800fd3c:	6011      	str	r1, [r2, #0]
 800fd3e:	6812      	ldr	r2, [r2, #0]
 800fd40:	429a      	cmp	r2, r3
 800fd42:	f43f af76 	beq.w	800fc32 <ai_platform_inputs_get+0x1da>
 800fd46:	e7fe      	b.n	800fd46 <ai_platform_inputs_get+0x2ee>
 800fd48:	4a06      	ldr	r2, [pc, #24]	; (800fd64 <ai_platform_inputs_get+0x30c>)
 800fd4a:	2301      	movs	r3, #1
 800fd4c:	6093      	str	r3, [r2, #8]
 800fd4e:	6893      	ldr	r3, [r2, #8]
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d1fc      	bne.n	800fd4e <ai_platform_inputs_get+0x2f6>
 800fd54:	4b04      	ldr	r3, [pc, #16]	; (800fd68 <ai_platform_inputs_get+0x310>)
 800fd56:	6013      	str	r3, [r2, #0]
 800fd58:	4b04      	ldr	r3, [pc, #16]	; (800fd6c <ai_platform_inputs_get+0x314>)
 800fd5a:	6812      	ldr	r2, [r2, #0]
 800fd5c:	429a      	cmp	r2, r3
 800fd5e:	f43f aeb6 	beq.w	800face <ai_platform_inputs_get+0x76>
 800fd62:	e7fe      	b.n	800fd62 <ai_platform_inputs_get+0x30a>
 800fd64:	40023000 	.word	0x40023000
 800fd68:	f407a5c2 	.word	0xf407a5c2
 800fd6c:	b5e8b5cd 	.word	0xb5e8b5cd

0800fd70 <ai_platform_outputs_get>:
 800fd70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd74:	b085      	sub	sp, #20
 800fd76:	9102      	str	r1, [sp, #8]
 800fd78:	2800      	cmp	r0, #0
 800fd7a:	f000 808f 	beq.w	800fe9c <ai_platform_outputs_get+0x12c>
 800fd7e:	4ba8      	ldr	r3, [pc, #672]	; (8010020 <ai_platform_outputs_get+0x2b0>)
 800fd80:	4681      	mov	r9, r0
 800fd82:	6802      	ldr	r2, [r0, #0]
 800fd84:	429a      	cmp	r2, r3
 800fd86:	f040 8089 	bne.w	800fe9c <ai_platform_outputs_get+0x12c>
 800fd8a:	f7ff fc85 	bl	800f698 <_ai_platform_acquire_crc>
 800fd8e:	4ba5      	ldr	r3, [pc, #660]	; (8010024 <ai_platform_outputs_get+0x2b4>)
 800fd90:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fd9a:	189a      	adds	r2, r3, r2
 800fd9c:	2a01      	cmp	r2, #1
 800fd9e:	f240 80d6 	bls.w	800ff4e <ai_platform_outputs_get+0x1de>
 800fda2:	f240 4249 	movw	r2, #1097	; 0x449
 800fda6:	4293      	cmp	r3, r2
 800fda8:	f000 80d1 	beq.w	800ff4e <ai_platform_outputs_get+0x1de>
 800fdac:	4a9e      	ldr	r2, [pc, #632]	; (8010028 <ai_platform_outputs_get+0x2b8>)
 800fdae:	6813      	ldr	r3, [r2, #0]
 800fdb0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fdb4:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800fdb8:	f000 80d8 	beq.w	800ff6c <ai_platform_outputs_get+0x1fc>
 800fdbc:	6813      	ldr	r3, [r2, #0]
 800fdbe:	f240 4183 	movw	r1, #1155	; 0x483
 800fdc2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fdc6:	428b      	cmp	r3, r1
 800fdc8:	f000 8109 	beq.w	800ffde <ai_platform_outputs_get+0x26e>
 800fdcc:	6813      	ldr	r3, [r2, #0]
 800fdce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fdd2:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800fdd6:	f000 813f 	beq.w	8010058 <ai_platform_outputs_get+0x2e8>
 800fdda:	6813      	ldr	r3, [r2, #0]
 800fddc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	f000 810e 	beq.w	8010002 <ai_platform_outputs_get+0x292>
 800fde6:	f7ff fc59 	bl	800f69c <_ai_platform_release_crc>
 800fdea:	f8b9 302c 	ldrh.w	r3, [r9, #44]	; 0x2c
 800fdee:	2b01      	cmp	r3, #1
 800fdf0:	f240 80db 	bls.w	800ffaa <ai_platform_outputs_get+0x23a>
 800fdf4:	2100      	movs	r1, #0
 800fdf6:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 800fdfa:	f8cd 900c 	str.w	r9, [sp, #12]
 800fdfe:	460d      	mov	r5, r1
 800fe00:	4689      	mov	r9, r1
 800fe02:	e016      	b.n	800fe32 <ai_platform_outputs_get+0xc2>
 800fe04:	9a01      	ldr	r2, [sp, #4]
 800fe06:	2301      	movs	r3, #1
 800fe08:	f848 3002 	str.w	r3, [r8, r2]
 800fe0c:	69b2      	ldr	r2, [r6, #24]
 800fe0e:	f04f 0301 	mov.w	r3, #1
 800fe12:	6856      	ldr	r6, [r2, #4]
 800fe14:	3501      	adds	r5, #1
 800fe16:	f109 091c 	add.w	r9, r9, #28
 800fe1a:	7523      	strb	r3, [r4, #20]
 800fe1c:	2300      	movs	r3, #0
 800fe1e:	6962      	ldr	r2, [r4, #20]
 800fe20:	60a7      	str	r7, [r4, #8]
 800fe22:	f36b 221f 	bfi	r2, fp, #8, #24
 800fe26:	6126      	str	r6, [r4, #16]
 800fe28:	61a1      	str	r1, [r4, #24]
 800fe2a:	60e3      	str	r3, [r4, #12]
 800fe2c:	6162      	str	r2, [r4, #20]
 800fe2e:	e9c4 0c00 	strd	r0, ip, [r4]
 800fe32:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800fe36:	b2ac      	uxth	r4, r5
 800fe38:	42ab      	cmp	r3, r5
 800fe3a:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 800fe3e:	9301      	str	r3, [sp, #4]
 800fe40:	f240 80a6 	bls.w	800ff90 <ai_platform_outputs_get+0x220>
 800fe44:	f8da 3010 	ldr.w	r3, [sl, #16]
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	f000 80a1 	beq.w	800ff90 <ai_platform_outputs_get+0x220>
 800fe4e:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800fe52:	2e00      	cmp	r6, #0
 800fe54:	f000 809c 	beq.w	800ff90 <ai_platform_outputs_get+0x220>
 800fe58:	f8da 3014 	ldr.w	r3, [sl, #20]
 800fe5c:	69b2      	ldr	r2, [r6, #24]
 800fe5e:	68f1      	ldr	r1, [r6, #12]
 800fe60:	6810      	ldr	r0, [r2, #0]
 800fe62:	9100      	str	r1, [sp, #0]
 800fe64:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 800fe68:	68b3      	ldr	r3, [r6, #8]
 800fe6a:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 800fe6e:	444c      	add	r4, r9
 800fe70:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 800fe74:	f002 fbb8 	bl	80125e8 <ai_array_to_buffer_fmt>
 800fe78:	69b2      	ldr	r2, [r6, #24]
 800fe7a:	9900      	ldr	r1, [sp, #0]
 800fe7c:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800fe80:	2f00      	cmp	r7, #0
 800fe82:	d0c4      	beq.n	800fe0e <ai_platform_outputs_get+0x9e>
 800fe84:	2200      	movs	r2, #0
 800fe86:	f848 2035 	str.w	r2, [r8, r5, lsl #3]
 800fe8a:	6832      	ldr	r2, [r6, #0]
 800fe8c:	607a      	str	r2, [r7, #4]
 800fe8e:	b112      	cbz	r2, 800fe96 <ai_platform_outputs_get+0x126>
 800fe90:	8852      	ldrh	r2, [r2, #2]
 800fe92:	2a00      	cmp	r2, #0
 800fe94:	d1b6      	bne.n	800fe04 <ai_platform_outputs_get+0x94>
 800fe96:	69b2      	ldr	r2, [r6, #24]
 800fe98:	2700      	movs	r7, #0
 800fe9a:	e7b8      	b.n	800fe0e <ai_platform_outputs_get+0x9e>
 800fe9c:	f7ff fbfc 	bl	800f698 <_ai_platform_acquire_crc>
 800fea0:	4b60      	ldr	r3, [pc, #384]	; (8010024 <ai_platform_outputs_get+0x2b4>)
 800fea2:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800feac:	185a      	adds	r2, r3, r1
 800feae:	2a01      	cmp	r2, #1
 800feb0:	d92a      	bls.n	800ff08 <ai_platform_outputs_get+0x198>
 800feb2:	f240 4249 	movw	r2, #1097	; 0x449
 800feb6:	4293      	cmp	r3, r2
 800feb8:	d026      	beq.n	800ff08 <ai_platform_outputs_get+0x198>
 800feba:	4a5b      	ldr	r2, [pc, #364]	; (8010028 <ai_platform_outputs_get+0x2b8>)
 800febc:	6813      	ldr	r3, [r2, #0]
 800febe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fec2:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800fec6:	d02c      	beq.n	800ff22 <ai_platform_outputs_get+0x1b2>
 800fec8:	6813      	ldr	r3, [r2, #0]
 800feca:	f240 4183 	movw	r1, #1155	; 0x483
 800fece:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fed2:	428b      	cmp	r3, r1
 800fed4:	d072      	beq.n	800ffbc <ai_platform_outputs_get+0x24c>
 800fed6:	6813      	ldr	r3, [r2, #0]
 800fed8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fedc:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800fee0:	f000 80ac 	beq.w	801003c <ai_platform_outputs_get+0x2cc>
 800fee4:	6813      	ldr	r3, [r2, #0]
 800fee6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800feea:	2b00      	cmp	r3, #0
 800feec:	d129      	bne.n	800ff42 <ai_platform_outputs_get+0x1d2>
 800feee:	4a4f      	ldr	r2, [pc, #316]	; (801002c <ai_platform_outputs_get+0x2bc>)
 800fef0:	2301      	movs	r3, #1
 800fef2:	6093      	str	r3, [r2, #8]
 800fef4:	6893      	ldr	r3, [r2, #8]
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d1fc      	bne.n	800fef4 <ai_platform_outputs_get+0x184>
 800fefa:	494d      	ldr	r1, [pc, #308]	; (8010030 <ai_platform_outputs_get+0x2c0>)
 800fefc:	4b4d      	ldr	r3, [pc, #308]	; (8010034 <ai_platform_outputs_get+0x2c4>)
 800fefe:	6011      	str	r1, [r2, #0]
 800ff00:	6812      	ldr	r2, [r2, #0]
 800ff02:	429a      	cmp	r2, r3
 800ff04:	d01d      	beq.n	800ff42 <ai_platform_outputs_get+0x1d2>
 800ff06:	e7fe      	b.n	800ff06 <ai_platform_outputs_get+0x196>
 800ff08:	4a48      	ldr	r2, [pc, #288]	; (801002c <ai_platform_outputs_get+0x2bc>)
 800ff0a:	2301      	movs	r3, #1
 800ff0c:	6093      	str	r3, [r2, #8]
 800ff0e:	6893      	ldr	r3, [r2, #8]
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d1fc      	bne.n	800ff0e <ai_platform_outputs_get+0x19e>
 800ff14:	4946      	ldr	r1, [pc, #280]	; (8010030 <ai_platform_outputs_get+0x2c0>)
 800ff16:	4b47      	ldr	r3, [pc, #284]	; (8010034 <ai_platform_outputs_get+0x2c4>)
 800ff18:	6011      	str	r1, [r2, #0]
 800ff1a:	6812      	ldr	r2, [r2, #0]
 800ff1c:	429a      	cmp	r2, r3
 800ff1e:	d010      	beq.n	800ff42 <ai_platform_outputs_get+0x1d2>
 800ff20:	e7fe      	b.n	800ff20 <ai_platform_outputs_get+0x1b0>
 800ff22:	4a45      	ldr	r2, [pc, #276]	; (8010038 <ai_platform_outputs_get+0x2c8>)
 800ff24:	2301      	movs	r3, #1
 800ff26:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800ff2a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d1fb      	bne.n	800ff2a <ai_platform_outputs_get+0x1ba>
 800ff32:	493f      	ldr	r1, [pc, #252]	; (8010030 <ai_platform_outputs_get+0x2c0>)
 800ff34:	4b3f      	ldr	r3, [pc, #252]	; (8010034 <ai_platform_outputs_get+0x2c4>)
 800ff36:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800ff3a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800ff3e:	429a      	cmp	r2, r3
 800ff40:	d113      	bne.n	800ff6a <ai_platform_outputs_get+0x1fa>
 800ff42:	f7ff fbab 	bl	800f69c <_ai_platform_release_crc>
 800ff46:	2000      	movs	r0, #0
 800ff48:	b005      	add	sp, #20
 800ff4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff4e:	4a37      	ldr	r2, [pc, #220]	; (801002c <ai_platform_outputs_get+0x2bc>)
 800ff50:	2301      	movs	r3, #1
 800ff52:	6093      	str	r3, [r2, #8]
 800ff54:	6893      	ldr	r3, [r2, #8]
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d1fc      	bne.n	800ff54 <ai_platform_outputs_get+0x1e4>
 800ff5a:	4b35      	ldr	r3, [pc, #212]	; (8010030 <ai_platform_outputs_get+0x2c0>)
 800ff5c:	6013      	str	r3, [r2, #0]
 800ff5e:	4b35      	ldr	r3, [pc, #212]	; (8010034 <ai_platform_outputs_get+0x2c4>)
 800ff60:	6812      	ldr	r2, [r2, #0]
 800ff62:	429a      	cmp	r2, r3
 800ff64:	f43f af3f 	beq.w	800fde6 <ai_platform_outputs_get+0x76>
 800ff68:	e7fe      	b.n	800ff68 <ai_platform_outputs_get+0x1f8>
 800ff6a:	e7fe      	b.n	800ff6a <ai_platform_outputs_get+0x1fa>
 800ff6c:	4a32      	ldr	r2, [pc, #200]	; (8010038 <ai_platform_outputs_get+0x2c8>)
 800ff6e:	2301      	movs	r3, #1
 800ff70:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800ff74:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d1fb      	bne.n	800ff74 <ai_platform_outputs_get+0x204>
 800ff7c:	4b2c      	ldr	r3, [pc, #176]	; (8010030 <ai_platform_outputs_get+0x2c0>)
 800ff7e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800ff82:	4b2c      	ldr	r3, [pc, #176]	; (8010034 <ai_platform_outputs_get+0x2c4>)
 800ff84:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800ff88:	429a      	cmp	r2, r3
 800ff8a:	f43f af2c 	beq.w	800fde6 <ai_platform_outputs_get+0x76>
 800ff8e:	e7fe      	b.n	800ff8e <ai_platform_outputs_get+0x21e>
 800ff90:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800ff94:	b14c      	cbz	r4, 800ffaa <ai_platform_outputs_get+0x23a>
 800ff96:	f8da 3014 	ldr.w	r3, [sl, #20]
 800ff9a:	6858      	ldr	r0, [r3, #4]
 800ff9c:	9b02      	ldr	r3, [sp, #8]
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d0d2      	beq.n	800ff48 <ai_platform_outputs_get+0x1d8>
 800ffa2:	801c      	strh	r4, [r3, #0]
 800ffa4:	b005      	add	sp, #20
 800ffa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffaa:	2400      	movs	r4, #0
 800ffac:	2218      	movs	r2, #24
 800ffae:	2111      	movs	r1, #17
 800ffb0:	f109 0010 	add.w	r0, r9, #16
 800ffb4:	f000 ffe8 	bl	8010f88 <core_set_error>
 800ffb8:	4620      	mov	r0, r4
 800ffba:	e7ef      	b.n	800ff9c <ai_platform_outputs_get+0x22c>
 800ffbc:	4a1e      	ldr	r2, [pc, #120]	; (8010038 <ai_platform_outputs_get+0x2c8>)
 800ffbe:	2301      	movs	r3, #1
 800ffc0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800ffc4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d1fb      	bne.n	800ffc4 <ai_platform_outputs_get+0x254>
 800ffcc:	4918      	ldr	r1, [pc, #96]	; (8010030 <ai_platform_outputs_get+0x2c0>)
 800ffce:	4b19      	ldr	r3, [pc, #100]	; (8010034 <ai_platform_outputs_get+0x2c4>)
 800ffd0:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800ffd4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800ffd8:	429a      	cmp	r2, r3
 800ffda:	d0b2      	beq.n	800ff42 <ai_platform_outputs_get+0x1d2>
 800ffdc:	e7fe      	b.n	800ffdc <ai_platform_outputs_get+0x26c>
 800ffde:	4a16      	ldr	r2, [pc, #88]	; (8010038 <ai_platform_outputs_get+0x2c8>)
 800ffe0:	2301      	movs	r3, #1
 800ffe2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800ffe6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d1fb      	bne.n	800ffe6 <ai_platform_outputs_get+0x276>
 800ffee:	4b10      	ldr	r3, [pc, #64]	; (8010030 <ai_platform_outputs_get+0x2c0>)
 800fff0:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800fff4:	4b0f      	ldr	r3, [pc, #60]	; (8010034 <ai_platform_outputs_get+0x2c4>)
 800fff6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800fffa:	429a      	cmp	r2, r3
 800fffc:	f43f aef3 	beq.w	800fde6 <ai_platform_outputs_get+0x76>
 8010000:	e7fe      	b.n	8010000 <ai_platform_outputs_get+0x290>
 8010002:	4a0a      	ldr	r2, [pc, #40]	; (801002c <ai_platform_outputs_get+0x2bc>)
 8010004:	2301      	movs	r3, #1
 8010006:	6093      	str	r3, [r2, #8]
 8010008:	6893      	ldr	r3, [r2, #8]
 801000a:	2b00      	cmp	r3, #0
 801000c:	d1fc      	bne.n	8010008 <ai_platform_outputs_get+0x298>
 801000e:	4b08      	ldr	r3, [pc, #32]	; (8010030 <ai_platform_outputs_get+0x2c0>)
 8010010:	6013      	str	r3, [r2, #0]
 8010012:	4b08      	ldr	r3, [pc, #32]	; (8010034 <ai_platform_outputs_get+0x2c4>)
 8010014:	6812      	ldr	r2, [r2, #0]
 8010016:	429a      	cmp	r2, r3
 8010018:	f43f aee5 	beq.w	800fde6 <ai_platform_outputs_get+0x76>
 801001c:	e7fe      	b.n	801001c <ai_platform_outputs_get+0x2ac>
 801001e:	bf00      	nop
 8010020:	a1c00100 	.word	0xa1c00100
 8010024:	e0042000 	.word	0xe0042000
 8010028:	5c001000 	.word	0x5c001000
 801002c:	40023000 	.word	0x40023000
 8010030:	f407a5c2 	.word	0xf407a5c2
 8010034:	b5e8b5cd 	.word	0xb5e8b5cd
 8010038:	58024000 	.word	0x58024000
 801003c:	4a0d      	ldr	r2, [pc, #52]	; (8010074 <ai_platform_outputs_get+0x304>)
 801003e:	2301      	movs	r3, #1
 8010040:	6093      	str	r3, [r2, #8]
 8010042:	6893      	ldr	r3, [r2, #8]
 8010044:	2b00      	cmp	r3, #0
 8010046:	d1fc      	bne.n	8010042 <ai_platform_outputs_get+0x2d2>
 8010048:	490b      	ldr	r1, [pc, #44]	; (8010078 <ai_platform_outputs_get+0x308>)
 801004a:	4b0c      	ldr	r3, [pc, #48]	; (801007c <ai_platform_outputs_get+0x30c>)
 801004c:	6011      	str	r1, [r2, #0]
 801004e:	6812      	ldr	r2, [r2, #0]
 8010050:	429a      	cmp	r2, r3
 8010052:	f43f af76 	beq.w	800ff42 <ai_platform_outputs_get+0x1d2>
 8010056:	e7fe      	b.n	8010056 <ai_platform_outputs_get+0x2e6>
 8010058:	4a06      	ldr	r2, [pc, #24]	; (8010074 <ai_platform_outputs_get+0x304>)
 801005a:	2301      	movs	r3, #1
 801005c:	6093      	str	r3, [r2, #8]
 801005e:	6893      	ldr	r3, [r2, #8]
 8010060:	2b00      	cmp	r3, #0
 8010062:	d1fc      	bne.n	801005e <ai_platform_outputs_get+0x2ee>
 8010064:	4b04      	ldr	r3, [pc, #16]	; (8010078 <ai_platform_outputs_get+0x308>)
 8010066:	6013      	str	r3, [r2, #0]
 8010068:	4b04      	ldr	r3, [pc, #16]	; (801007c <ai_platform_outputs_get+0x30c>)
 801006a:	6812      	ldr	r2, [r2, #0]
 801006c:	429a      	cmp	r2, r3
 801006e:	f43f aeba 	beq.w	800fde6 <ai_platform_outputs_get+0x76>
 8010072:	e7fe      	b.n	8010072 <ai_platform_outputs_get+0x302>
 8010074:	40023000 	.word	0x40023000
 8010078:	f407a5c2 	.word	0xf407a5c2
 801007c:	b5e8b5cd 	.word	0xb5e8b5cd

08010080 <ai_platform_network_create>:
 8010080:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010084:	b083      	sub	sp, #12
 8010086:	4604      	mov	r4, r0
 8010088:	4615      	mov	r5, r2
 801008a:	461e      	mov	r6, r3
 801008c:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 8010090:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 8010094:	f7ff fb00 	bl	800f698 <_ai_platform_acquire_crc>
 8010098:	2800      	cmp	r0, #0
 801009a:	f000 80bd 	beq.w	8010218 <ai_platform_network_create+0x198>
 801009e:	4ba5      	ldr	r3, [pc, #660]	; (8010334 <ai_platform_network_create+0x2b4>)
 80100a0:	f46f 6c8a 	mvn.w	ip, #1104	; 0x450
 80100a4:	4601      	mov	r1, r0
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80100ac:	eb03 020c 	add.w	r2, r3, ip
 80100b0:	2a01      	cmp	r2, #1
 80100b2:	f240 80a8 	bls.w	8010206 <ai_platform_network_create+0x186>
 80100b6:	f240 4249 	movw	r2, #1097	; 0x449
 80100ba:	4293      	cmp	r3, r2
 80100bc:	f000 80a3 	beq.w	8010206 <ai_platform_network_create+0x186>
 80100c0:	4a9d      	ldr	r2, [pc, #628]	; (8010338 <ai_platform_network_create+0x2b8>)
 80100c2:	6813      	ldr	r3, [r2, #0]
 80100c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80100c8:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80100cc:	f000 80b9 	beq.w	8010242 <ai_platform_network_create+0x1c2>
 80100d0:	6813      	ldr	r3, [r2, #0]
 80100d2:	f240 4c83 	movw	ip, #1155	; 0x483
 80100d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80100da:	4563      	cmp	r3, ip
 80100dc:	f000 80a1 	beq.w	8010222 <ai_platform_network_create+0x1a2>
 80100e0:	6813      	ldr	r3, [r2, #0]
 80100e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80100e6:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80100ea:	f000 8153 	beq.w	8010394 <ai_platform_network_create+0x314>
 80100ee:	6813      	ldr	r3, [r2, #0]
 80100f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	f040 808d 	bne.w	8010214 <ai_platform_network_create+0x194>
 80100fa:	4a90      	ldr	r2, [pc, #576]	; (801033c <ai_platform_network_create+0x2bc>)
 80100fc:	2318      	movs	r3, #24
 80100fe:	6093      	str	r3, [r2, #8]
 8010100:	6893      	ldr	r3, [r2, #8]
 8010102:	2b18      	cmp	r3, #24
 8010104:	f040 8086 	bne.w	8010214 <ai_platform_network_create+0x194>
 8010108:	2301      	movs	r3, #1
 801010a:	6093      	str	r3, [r2, #8]
 801010c:	6893      	ldr	r3, [r2, #8]
 801010e:	2b00      	cmp	r3, #0
 8010110:	d1fc      	bne.n	801010c <ai_platform_network_create+0x8c>
 8010112:	4608      	mov	r0, r1
 8010114:	f7ff fac2 	bl	800f69c <_ai_platform_release_crc>
 8010118:	f7ff fabe 	bl	800f698 <_ai_platform_acquire_crc>
 801011c:	4b85      	ldr	r3, [pc, #532]	; (8010334 <ai_platform_network_create+0x2b4>)
 801011e:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010128:	189a      	adds	r2, r3, r2
 801012a:	2a01      	cmp	r2, #1
 801012c:	f240 809f 	bls.w	801026e <ai_platform_network_create+0x1ee>
 8010130:	f240 4249 	movw	r2, #1097	; 0x449
 8010134:	4293      	cmp	r3, r2
 8010136:	f000 809a 	beq.w	801026e <ai_platform_network_create+0x1ee>
 801013a:	4a7f      	ldr	r2, [pc, #508]	; (8010338 <ai_platform_network_create+0x2b8>)
 801013c:	6813      	ldr	r3, [r2, #0]
 801013e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010142:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8010146:	f000 80a0 	beq.w	801028a <ai_platform_network_create+0x20a>
 801014a:	6813      	ldr	r3, [r2, #0]
 801014c:	f240 4183 	movw	r1, #1155	; 0x483
 8010150:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010154:	428b      	cmp	r3, r1
 8010156:	f000 80bf 	beq.w	80102d8 <ai_platform_network_create+0x258>
 801015a:	6813      	ldr	r3, [r2, #0]
 801015c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010160:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8010164:	f000 8123 	beq.w	80103ae <ai_platform_network_create+0x32e>
 8010168:	6813      	ldr	r3, [r2, #0]
 801016a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801016e:	2b00      	cmp	r3, #0
 8010170:	f000 80c4 	beq.w	80102fc <ai_platform_network_create+0x27c>
 8010174:	f7ff fa92 	bl	800f69c <_ai_platform_release_crc>
 8010178:	2c00      	cmp	r4, #0
 801017a:	f000 80aa 	beq.w	80102d2 <ai_platform_network_create+0x252>
 801017e:	4b70      	ldr	r3, [pc, #448]	; (8010340 <ai_platform_network_create+0x2c0>)
 8010180:	602b      	str	r3, [r5, #0]
 8010182:	6025      	str	r5, [r4, #0]
 8010184:	f000 fef8 	bl	8010f78 <core_init>
 8010188:	2800      	cmp	r0, #0
 801018a:	f000 8090 	beq.w	80102ae <ai_platform_network_create+0x22e>
 801018e:	f7ff fa83 	bl	800f698 <_ai_platform_acquire_crc>
 8010192:	4b68      	ldr	r3, [pc, #416]	; (8010334 <ai_platform_network_create+0x2b4>)
 8010194:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801019e:	185a      	adds	r2, r3, r1
 80101a0:	2a01      	cmp	r2, #1
 80101a2:	f240 80b9 	bls.w	8010318 <ai_platform_network_create+0x298>
 80101a6:	f240 4249 	movw	r2, #1097	; 0x449
 80101aa:	4293      	cmp	r3, r2
 80101ac:	f000 80b4 	beq.w	8010318 <ai_platform_network_create+0x298>
 80101b0:	4a61      	ldr	r2, [pc, #388]	; (8010338 <ai_platform_network_create+0x2b8>)
 80101b2:	6813      	ldr	r3, [r2, #0]
 80101b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80101b8:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80101bc:	f000 80c8 	beq.w	8010350 <ai_platform_network_create+0x2d0>
 80101c0:	6813      	ldr	r3, [r2, #0]
 80101c2:	f240 4183 	movw	r1, #1155	; 0x483
 80101c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80101ca:	428b      	cmp	r3, r1
 80101cc:	f000 8107 	beq.w	80103de <ai_platform_network_create+0x35e>
 80101d0:	6813      	ldr	r3, [r2, #0]
 80101d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80101d6:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80101da:	f000 8111 	beq.w	8010400 <ai_platform_network_create+0x380>
 80101de:	6813      	ldr	r3, [r2, #0]
 80101e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	f040 80c3 	bne.w	8010370 <ai_platform_network_create+0x2f0>
 80101ea:	4b54      	ldr	r3, [pc, #336]	; (801033c <ai_platform_network_create+0x2bc>)
 80101ec:	2201      	movs	r2, #1
 80101ee:	609a      	str	r2, [r3, #8]
 80101f0:	689a      	ldr	r2, [r3, #8]
 80101f2:	2a00      	cmp	r2, #0
 80101f4:	d1fc      	bne.n	80101f0 <ai_platform_network_create+0x170>
 80101f6:	4a53      	ldr	r2, [pc, #332]	; (8010344 <ai_platform_network_create+0x2c4>)
 80101f8:	601a      	str	r2, [r3, #0]
 80101fa:	681a      	ldr	r2, [r3, #0]
 80101fc:	4b52      	ldr	r3, [pc, #328]	; (8010348 <ai_platform_network_create+0x2c8>)
 80101fe:	429a      	cmp	r2, r3
 8010200:	f000 80b6 	beq.w	8010370 <ai_platform_network_create+0x2f0>
 8010204:	e7fe      	b.n	8010204 <ai_platform_network_create+0x184>
 8010206:	4b4d      	ldr	r3, [pc, #308]	; (801033c <ai_platform_network_create+0x2bc>)
 8010208:	2218      	movs	r2, #24
 801020a:	609a      	str	r2, [r3, #8]
 801020c:	689a      	ldr	r2, [r3, #8]
 801020e:	2a18      	cmp	r2, #24
 8010210:	d027      	beq.n	8010262 <ai_platform_network_create+0x1e2>
 8010212:	4608      	mov	r0, r1
 8010214:	f7ff fa42 	bl	800f69c <_ai_platform_release_crc>
 8010218:	f244 1033 	movw	r0, #16691	; 0x4133
 801021c:	b003      	add	sp, #12
 801021e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010222:	4a4a      	ldr	r2, [pc, #296]	; (801034c <ai_platform_network_create+0x2cc>)
 8010224:	2318      	movs	r3, #24
 8010226:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 801022a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801022e:	2b18      	cmp	r3, #24
 8010230:	d1f0      	bne.n	8010214 <ai_platform_network_create+0x194>
 8010232:	2301      	movs	r3, #1
 8010234:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8010238:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801023c:	2b00      	cmp	r3, #0
 801023e:	d1fb      	bne.n	8010238 <ai_platform_network_create+0x1b8>
 8010240:	e767      	b.n	8010112 <ai_platform_network_create+0x92>
 8010242:	4a42      	ldr	r2, [pc, #264]	; (801034c <ai_platform_network_create+0x2cc>)
 8010244:	2318      	movs	r3, #24
 8010246:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 801024a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801024e:	2b18      	cmp	r3, #24
 8010250:	d1e0      	bne.n	8010214 <ai_platform_network_create+0x194>
 8010252:	2301      	movs	r3, #1
 8010254:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8010258:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801025c:	2b00      	cmp	r3, #0
 801025e:	d1fb      	bne.n	8010258 <ai_platform_network_create+0x1d8>
 8010260:	e757      	b.n	8010112 <ai_platform_network_create+0x92>
 8010262:	2201      	movs	r2, #1
 8010264:	609a      	str	r2, [r3, #8]
 8010266:	689a      	ldr	r2, [r3, #8]
 8010268:	2a00      	cmp	r2, #0
 801026a:	d1fc      	bne.n	8010266 <ai_platform_network_create+0x1e6>
 801026c:	e751      	b.n	8010112 <ai_platform_network_create+0x92>
 801026e:	4a33      	ldr	r2, [pc, #204]	; (801033c <ai_platform_network_create+0x2bc>)
 8010270:	2301      	movs	r3, #1
 8010272:	6093      	str	r3, [r2, #8]
 8010274:	6891      	ldr	r1, [r2, #8]
 8010276:	2900      	cmp	r1, #0
 8010278:	d1fc      	bne.n	8010274 <ai_platform_network_create+0x1f4>
 801027a:	4b32      	ldr	r3, [pc, #200]	; (8010344 <ai_platform_network_create+0x2c4>)
 801027c:	6013      	str	r3, [r2, #0]
 801027e:	4b32      	ldr	r3, [pc, #200]	; (8010348 <ai_platform_network_create+0x2c8>)
 8010280:	6812      	ldr	r2, [r2, #0]
 8010282:	429a      	cmp	r2, r3
 8010284:	f43f af76 	beq.w	8010174 <ai_platform_network_create+0xf4>
 8010288:	e7fe      	b.n	8010288 <ai_platform_network_create+0x208>
 801028a:	4a30      	ldr	r2, [pc, #192]	; (801034c <ai_platform_network_create+0x2cc>)
 801028c:	2301      	movs	r3, #1
 801028e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8010292:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8010296:	2b00      	cmp	r3, #0
 8010298:	d1fb      	bne.n	8010292 <ai_platform_network_create+0x212>
 801029a:	4b2a      	ldr	r3, [pc, #168]	; (8010344 <ai_platform_network_create+0x2c4>)
 801029c:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80102a0:	4b29      	ldr	r3, [pc, #164]	; (8010348 <ai_platform_network_create+0x2c8>)
 80102a2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80102a6:	429a      	cmp	r2, r3
 80102a8:	f43f af64 	beq.w	8010174 <ai_platform_network_create+0xf4>
 80102ac:	e7fe      	b.n	80102ac <ai_platform_network_create+0x22c>
 80102ae:	f04f 0930 	mov.w	r9, #48	; 0x30
 80102b2:	2300      	movs	r3, #0
 80102b4:	6023      	str	r3, [r4, #0]
 80102b6:	2410      	movs	r4, #16
 80102b8:	4642      	mov	r2, r8
 80102ba:	4639      	mov	r1, r7
 80102bc:	4630      	mov	r0, r6
 80102be:	f002 fa37 	bl	8012730 <ai_version_get>
 80102c2:	4603      	mov	r3, r0
 80102c4:	2000      	movs	r0, #0
 80102c6:	64ab      	str	r3, [r5, #72]	; 0x48
 80102c8:	f369 0007 	bfi	r0, r9, #0, #8
 80102cc:	f364 201f 	bfi	r0, r4, #8, #24
 80102d0:	e7a4      	b.n	801021c <ai_platform_network_create+0x19c>
 80102d2:	f241 0010 	movw	r0, #4112	; 0x1010
 80102d6:	e7a1      	b.n	801021c <ai_platform_network_create+0x19c>
 80102d8:	4a1c      	ldr	r2, [pc, #112]	; (801034c <ai_platform_network_create+0x2cc>)
 80102da:	2301      	movs	r3, #1
 80102dc:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80102e0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d1fb      	bne.n	80102e0 <ai_platform_network_create+0x260>
 80102e8:	4b16      	ldr	r3, [pc, #88]	; (8010344 <ai_platform_network_create+0x2c4>)
 80102ea:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80102ee:	4b16      	ldr	r3, [pc, #88]	; (8010348 <ai_platform_network_create+0x2c8>)
 80102f0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80102f4:	429a      	cmp	r2, r3
 80102f6:	f43f af3d 	beq.w	8010174 <ai_platform_network_create+0xf4>
 80102fa:	e7fe      	b.n	80102fa <ai_platform_network_create+0x27a>
 80102fc:	4a0f      	ldr	r2, [pc, #60]	; (801033c <ai_platform_network_create+0x2bc>)
 80102fe:	2301      	movs	r3, #1
 8010300:	6093      	str	r3, [r2, #8]
 8010302:	6893      	ldr	r3, [r2, #8]
 8010304:	2b00      	cmp	r3, #0
 8010306:	d1fc      	bne.n	8010302 <ai_platform_network_create+0x282>
 8010308:	4b0e      	ldr	r3, [pc, #56]	; (8010344 <ai_platform_network_create+0x2c4>)
 801030a:	6013      	str	r3, [r2, #0]
 801030c:	4b0e      	ldr	r3, [pc, #56]	; (8010348 <ai_platform_network_create+0x2c8>)
 801030e:	6812      	ldr	r2, [r2, #0]
 8010310:	429a      	cmp	r2, r3
 8010312:	f43f af2f 	beq.w	8010174 <ai_platform_network_create+0xf4>
 8010316:	e7fe      	b.n	8010316 <ai_platform_network_create+0x296>
 8010318:	4a08      	ldr	r2, [pc, #32]	; (801033c <ai_platform_network_create+0x2bc>)
 801031a:	2301      	movs	r3, #1
 801031c:	6093      	str	r3, [r2, #8]
 801031e:	6893      	ldr	r3, [r2, #8]
 8010320:	2b00      	cmp	r3, #0
 8010322:	d1fc      	bne.n	801031e <ai_platform_network_create+0x29e>
 8010324:	4b07      	ldr	r3, [pc, #28]	; (8010344 <ai_platform_network_create+0x2c4>)
 8010326:	6013      	str	r3, [r2, #0]
 8010328:	4b07      	ldr	r3, [pc, #28]	; (8010348 <ai_platform_network_create+0x2c8>)
 801032a:	6812      	ldr	r2, [r2, #0]
 801032c:	429a      	cmp	r2, r3
 801032e:	d01f      	beq.n	8010370 <ai_platform_network_create+0x2f0>
 8010330:	e7fe      	b.n	8010330 <ai_platform_network_create+0x2b0>
 8010332:	bf00      	nop
 8010334:	e0042000 	.word	0xe0042000
 8010338:	5c001000 	.word	0x5c001000
 801033c:	40023000 	.word	0x40023000
 8010340:	a1c00100 	.word	0xa1c00100
 8010344:	f407a5c2 	.word	0xf407a5c2
 8010348:	b5e8b5cd 	.word	0xb5e8b5cd
 801034c:	58024000 	.word	0x58024000
 8010350:	4a33      	ldr	r2, [pc, #204]	; (8010420 <ai_platform_network_create+0x3a0>)
 8010352:	2301      	movs	r3, #1
 8010354:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8010358:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801035c:	2b00      	cmp	r3, #0
 801035e:	d1fb      	bne.n	8010358 <ai_platform_network_create+0x2d8>
 8010360:	4b30      	ldr	r3, [pc, #192]	; (8010424 <ai_platform_network_create+0x3a4>)
 8010362:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8010366:	4b30      	ldr	r3, [pc, #192]	; (8010428 <ai_platform_network_create+0x3a8>)
 8010368:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 801036c:	429a      	cmp	r2, r3
 801036e:	d12c      	bne.n	80103ca <ai_platform_network_create+0x34a>
 8010370:	f7ff f994 	bl	800f69c <_ai_platform_release_crc>
 8010374:	2200      	movs	r2, #0
 8010376:	4639      	mov	r1, r7
 8010378:	4630      	mov	r0, r6
 801037a:	f002 f9d9 	bl	8012730 <ai_version_get>
 801037e:	4681      	mov	r9, r0
 8010380:	2200      	movs	r2, #0
 8010382:	2105      	movs	r1, #5
 8010384:	2001      	movs	r0, #1
 8010386:	f002 f9d3 	bl	8012730 <ai_version_get>
 801038a:	4581      	cmp	r9, r0
 801038c:	d01e      	beq.n	80103cc <ai_platform_network_create+0x34c>
 801038e:	f04f 0901 	mov.w	r9, #1
 8010392:	e78e      	b.n	80102b2 <ai_platform_network_create+0x232>
 8010394:	4b25      	ldr	r3, [pc, #148]	; (801042c <ai_platform_network_create+0x3ac>)
 8010396:	2218      	movs	r2, #24
 8010398:	609a      	str	r2, [r3, #8]
 801039a:	689a      	ldr	r2, [r3, #8]
 801039c:	2a18      	cmp	r2, #24
 801039e:	f47f af39 	bne.w	8010214 <ai_platform_network_create+0x194>
 80103a2:	2201      	movs	r2, #1
 80103a4:	609a      	str	r2, [r3, #8]
 80103a6:	689a      	ldr	r2, [r3, #8]
 80103a8:	2a00      	cmp	r2, #0
 80103aa:	d1fc      	bne.n	80103a6 <ai_platform_network_create+0x326>
 80103ac:	e6b1      	b.n	8010112 <ai_platform_network_create+0x92>
 80103ae:	4a1f      	ldr	r2, [pc, #124]	; (801042c <ai_platform_network_create+0x3ac>)
 80103b0:	2301      	movs	r3, #1
 80103b2:	6093      	str	r3, [r2, #8]
 80103b4:	6893      	ldr	r3, [r2, #8]
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d1fc      	bne.n	80103b4 <ai_platform_network_create+0x334>
 80103ba:	4b1a      	ldr	r3, [pc, #104]	; (8010424 <ai_platform_network_create+0x3a4>)
 80103bc:	6013      	str	r3, [r2, #0]
 80103be:	4b1a      	ldr	r3, [pc, #104]	; (8010428 <ai_platform_network_create+0x3a8>)
 80103c0:	6812      	ldr	r2, [r2, #0]
 80103c2:	429a      	cmp	r2, r3
 80103c4:	f43f aed6 	beq.w	8010174 <ai_platform_network_create+0xf4>
 80103c8:	e7fe      	b.n	80103c8 <ai_platform_network_create+0x348>
 80103ca:	e7fe      	b.n	80103ca <ai_platform_network_create+0x34a>
 80103cc:	4b18      	ldr	r3, [pc, #96]	; (8010430 <ai_platform_network_create+0x3b0>)
 80103ce:	a801      	add	r0, sp, #4
 80103d0:	9301      	str	r3, [sp, #4]
 80103d2:	f000 fde5 	bl	8010fa0 <ai_check_custom_types>
 80103d6:	b300      	cbz	r0, 801041a <ai_platform_network_create+0x39a>
 80103d8:	2400      	movs	r4, #0
 80103da:	46a1      	mov	r9, r4
 80103dc:	e76c      	b.n	80102b8 <ai_platform_network_create+0x238>
 80103de:	4b10      	ldr	r3, [pc, #64]	; (8010420 <ai_platform_network_create+0x3a0>)
 80103e0:	2201      	movs	r2, #1
 80103e2:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 80103e6:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 80103ea:	2a00      	cmp	r2, #0
 80103ec:	d1fb      	bne.n	80103e6 <ai_platform_network_create+0x366>
 80103ee:	4a0d      	ldr	r2, [pc, #52]	; (8010424 <ai_platform_network_create+0x3a4>)
 80103f0:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 80103f4:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 80103f8:	4b0b      	ldr	r3, [pc, #44]	; (8010428 <ai_platform_network_create+0x3a8>)
 80103fa:	429a      	cmp	r2, r3
 80103fc:	d0b8      	beq.n	8010370 <ai_platform_network_create+0x2f0>
 80103fe:	e7fe      	b.n	80103fe <ai_platform_network_create+0x37e>
 8010400:	4b0a      	ldr	r3, [pc, #40]	; (801042c <ai_platform_network_create+0x3ac>)
 8010402:	2201      	movs	r2, #1
 8010404:	609a      	str	r2, [r3, #8]
 8010406:	689a      	ldr	r2, [r3, #8]
 8010408:	2a00      	cmp	r2, #0
 801040a:	d1fc      	bne.n	8010406 <ai_platform_network_create+0x386>
 801040c:	4a05      	ldr	r2, [pc, #20]	; (8010424 <ai_platform_network_create+0x3a4>)
 801040e:	601a      	str	r2, [r3, #0]
 8010410:	681a      	ldr	r2, [r3, #0]
 8010412:	4b05      	ldr	r3, [pc, #20]	; (8010428 <ai_platform_network_create+0x3a8>)
 8010414:	429a      	cmp	r2, r3
 8010416:	d0ab      	beq.n	8010370 <ai_platform_network_create+0x2f0>
 8010418:	e7fe      	b.n	8010418 <ai_platform_network_create+0x398>
 801041a:	f04f 0902 	mov.w	r9, #2
 801041e:	e748      	b.n	80102b2 <ai_platform_network_create+0x232>
 8010420:	58024000 	.word	0x58024000
 8010424:	f407a5c2 	.word	0xf407a5c2
 8010428:	b5e8b5cd 	.word	0xb5e8b5cd
 801042c:	40023000 	.word	0x40023000
 8010430:	84048403 	.word	0x84048403

08010434 <ai_platform_network_init>:
 8010434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010438:	2800      	cmp	r0, #0
 801043a:	d052      	beq.n	80104e2 <ai_platform_network_init+0xae>
 801043c:	4bab      	ldr	r3, [pc, #684]	; (80106ec <ai_platform_network_init+0x2b8>)
 801043e:	4604      	mov	r4, r0
 8010440:	6802      	ldr	r2, [r0, #0]
 8010442:	429a      	cmp	r2, r3
 8010444:	d14d      	bne.n	80104e2 <ai_platform_network_init+0xae>
 8010446:	460d      	mov	r5, r1
 8010448:	f7ff f926 	bl	800f698 <_ai_platform_acquire_crc>
 801044c:	4ba8      	ldr	r3, [pc, #672]	; (80106f0 <ai_platform_network_init+0x2bc>)
 801044e:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010458:	189a      	adds	r2, r3, r2
 801045a:	2a01      	cmp	r2, #1
 801045c:	f240 809b 	bls.w	8010596 <ai_platform_network_init+0x162>
 8010460:	f240 4249 	movw	r2, #1097	; 0x449
 8010464:	4293      	cmp	r3, r2
 8010466:	f000 8096 	beq.w	8010596 <ai_platform_network_init+0x162>
 801046a:	4aa2      	ldr	r2, [pc, #648]	; (80106f4 <ai_platform_network_init+0x2c0>)
 801046c:	6813      	ldr	r3, [r2, #0]
 801046e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010472:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8010476:	f000 809d 	beq.w	80105b4 <ai_platform_network_init+0x180>
 801047a:	6813      	ldr	r3, [r2, #0]
 801047c:	f240 4183 	movw	r1, #1155	; 0x483
 8010480:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010484:	428b      	cmp	r3, r1
 8010486:	f000 80e4 	beq.w	8010652 <ai_platform_network_init+0x21e>
 801048a:	6813      	ldr	r3, [r2, #0]
 801048c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010490:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8010494:	f000 811b 	beq.w	80106ce <ai_platform_network_init+0x29a>
 8010498:	6813      	ldr	r3, [r2, #0]
 801049a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801049e:	2b00      	cmp	r3, #0
 80104a0:	f000 80f9 	beq.w	8010696 <ai_platform_network_init+0x262>
 80104a4:	f7ff f8fa 	bl	800f69c <_ai_platform_release_crc>
 80104a8:	2d00      	cmp	r5, #0
 80104aa:	f000 8147 	beq.w	801073c <ai_platform_network_init+0x308>
 80104ae:	4b92      	ldr	r3, [pc, #584]	; (80106f8 <ai_platform_network_init+0x2c4>)
 80104b0:	682a      	ldr	r2, [r5, #0]
 80104b2:	429a      	cmp	r2, r3
 80104b4:	f040 8090 	bne.w	80105d8 <ai_platform_network_init+0x1a4>
 80104b8:	692b      	ldr	r3, [r5, #16]
 80104ba:	89ae      	ldrh	r6, [r5, #12]
 80104bc:	f8b5 c00e 	ldrh.w	ip, [r5, #14]
 80104c0:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
 80104c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80104c6:	e9c4 1207 	strd	r1, r2, [r4, #28]
 80104ca:	2303      	movs	r3, #3
 80104cc:	84a6      	strh	r6, [r4, #36]	; 0x24
 80104ce:	4626      	mov	r6, r4
 80104d0:	4620      	mov	r0, r4
 80104d2:	f8a4 c026 	strh.w	ip, [r4, #38]	; 0x26
 80104d6:	60e3      	str	r3, [r4, #12]
 80104d8:	f000 fd8a 	bl	8010ff0 <ai_layers_init_all>
 80104dc:	4630      	mov	r0, r6
 80104de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80104e2:	f7ff f8d9 	bl	800f698 <_ai_platform_acquire_crc>
 80104e6:	4b82      	ldr	r3, [pc, #520]	; (80106f0 <ai_platform_network_init+0x2bc>)
 80104e8:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 80104ec:	681b      	ldr	r3, [r3, #0]
 80104ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80104f2:	185a      	adds	r2, r3, r1
 80104f4:	2a01      	cmp	r2, #1
 80104f6:	d92b      	bls.n	8010550 <ai_platform_network_init+0x11c>
 80104f8:	f240 4249 	movw	r2, #1097	; 0x449
 80104fc:	4293      	cmp	r3, r2
 80104fe:	d027      	beq.n	8010550 <ai_platform_network_init+0x11c>
 8010500:	4a7c      	ldr	r2, [pc, #496]	; (80106f4 <ai_platform_network_init+0x2c0>)
 8010502:	6813      	ldr	r3, [r2, #0]
 8010504:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010508:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801050c:	d02d      	beq.n	801056a <ai_platform_network_init+0x136>
 801050e:	6813      	ldr	r3, [r2, #0]
 8010510:	f240 4183 	movw	r1, #1155	; 0x483
 8010514:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010518:	428b      	cmp	r3, r1
 801051a:	f000 8089 	beq.w	8010630 <ai_platform_network_init+0x1fc>
 801051e:	6813      	ldr	r3, [r2, #0]
 8010520:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010524:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8010528:	f000 80c3 	beq.w	80106b2 <ai_platform_network_init+0x27e>
 801052c:	6813      	ldr	r3, [r2, #0]
 801052e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010532:	2b00      	cmp	r3, #0
 8010534:	d129      	bne.n	801058a <ai_platform_network_init+0x156>
 8010536:	4a71      	ldr	r2, [pc, #452]	; (80106fc <ai_platform_network_init+0x2c8>)
 8010538:	2301      	movs	r3, #1
 801053a:	6093      	str	r3, [r2, #8]
 801053c:	6893      	ldr	r3, [r2, #8]
 801053e:	2b00      	cmp	r3, #0
 8010540:	d1fc      	bne.n	801053c <ai_platform_network_init+0x108>
 8010542:	496f      	ldr	r1, [pc, #444]	; (8010700 <ai_platform_network_init+0x2cc>)
 8010544:	4b6f      	ldr	r3, [pc, #444]	; (8010704 <ai_platform_network_init+0x2d0>)
 8010546:	6011      	str	r1, [r2, #0]
 8010548:	6812      	ldr	r2, [r2, #0]
 801054a:	429a      	cmp	r2, r3
 801054c:	d01d      	beq.n	801058a <ai_platform_network_init+0x156>
 801054e:	e7fe      	b.n	801054e <ai_platform_network_init+0x11a>
 8010550:	4a6a      	ldr	r2, [pc, #424]	; (80106fc <ai_platform_network_init+0x2c8>)
 8010552:	2301      	movs	r3, #1
 8010554:	6093      	str	r3, [r2, #8]
 8010556:	6893      	ldr	r3, [r2, #8]
 8010558:	2b00      	cmp	r3, #0
 801055a:	d1fc      	bne.n	8010556 <ai_platform_network_init+0x122>
 801055c:	4968      	ldr	r1, [pc, #416]	; (8010700 <ai_platform_network_init+0x2cc>)
 801055e:	4b69      	ldr	r3, [pc, #420]	; (8010704 <ai_platform_network_init+0x2d0>)
 8010560:	6011      	str	r1, [r2, #0]
 8010562:	6812      	ldr	r2, [r2, #0]
 8010564:	429a      	cmp	r2, r3
 8010566:	d010      	beq.n	801058a <ai_platform_network_init+0x156>
 8010568:	e7fe      	b.n	8010568 <ai_platform_network_init+0x134>
 801056a:	4a67      	ldr	r2, [pc, #412]	; (8010708 <ai_platform_network_init+0x2d4>)
 801056c:	2301      	movs	r3, #1
 801056e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8010572:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8010576:	2b00      	cmp	r3, #0
 8010578:	d1fb      	bne.n	8010572 <ai_platform_network_init+0x13e>
 801057a:	4961      	ldr	r1, [pc, #388]	; (8010700 <ai_platform_network_init+0x2cc>)
 801057c:	4b61      	ldr	r3, [pc, #388]	; (8010704 <ai_platform_network_init+0x2d0>)
 801057e:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8010582:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8010586:	429a      	cmp	r2, r3
 8010588:	d113      	bne.n	80105b2 <ai_platform_network_init+0x17e>
 801058a:	2600      	movs	r6, #0
 801058c:	f7ff f886 	bl	800f69c <_ai_platform_release_crc>
 8010590:	4630      	mov	r0, r6
 8010592:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010596:	4a59      	ldr	r2, [pc, #356]	; (80106fc <ai_platform_network_init+0x2c8>)
 8010598:	2301      	movs	r3, #1
 801059a:	6093      	str	r3, [r2, #8]
 801059c:	6893      	ldr	r3, [r2, #8]
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d1fc      	bne.n	801059c <ai_platform_network_init+0x168>
 80105a2:	4b57      	ldr	r3, [pc, #348]	; (8010700 <ai_platform_network_init+0x2cc>)
 80105a4:	6013      	str	r3, [r2, #0]
 80105a6:	4b57      	ldr	r3, [pc, #348]	; (8010704 <ai_platform_network_init+0x2d0>)
 80105a8:	6812      	ldr	r2, [r2, #0]
 80105aa:	429a      	cmp	r2, r3
 80105ac:	f43f af7a 	beq.w	80104a4 <ai_platform_network_init+0x70>
 80105b0:	e7fe      	b.n	80105b0 <ai_platform_network_init+0x17c>
 80105b2:	e7fe      	b.n	80105b2 <ai_platform_network_init+0x17e>
 80105b4:	4a54      	ldr	r2, [pc, #336]	; (8010708 <ai_platform_network_init+0x2d4>)
 80105b6:	2301      	movs	r3, #1
 80105b8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80105bc:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d1fb      	bne.n	80105bc <ai_platform_network_init+0x188>
 80105c4:	4b4e      	ldr	r3, [pc, #312]	; (8010700 <ai_platform_network_init+0x2cc>)
 80105c6:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80105ca:	4b4e      	ldr	r3, [pc, #312]	; (8010704 <ai_platform_network_init+0x2d0>)
 80105cc:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80105d0:	429a      	cmp	r2, r3
 80105d2:	f43f af67 	beq.w	80104a4 <ai_platform_network_init+0x70>
 80105d6:	e7fe      	b.n	80105d6 <ai_platform_network_init+0x1a2>
 80105d8:	2101      	movs	r1, #1
 80105da:	4628      	mov	r0, r5
 80105dc:	f105 081c 	add.w	r8, r5, #28
 80105e0:	686e      	ldr	r6, [r5, #4]
 80105e2:	f7ff f80b 	bl	800f5fc <ai_buffer_get_size>
 80105e6:	4607      	mov	r7, r0
 80105e8:	2101      	movs	r1, #1
 80105ea:	4640      	mov	r0, r8
 80105ec:	f8d5 9020 	ldr.w	r9, [r5, #32]
 80105f0:	f7ff f804 	bl	800f5fc <ai_buffer_get_size>
 80105f4:	2f00      	cmp	r7, #0
 80105f6:	d13e      	bne.n	8010676 <ai_platform_network_init+0x242>
 80105f8:	2800      	cmp	r0, #0
 80105fa:	f000 808e 	beq.w	801071a <ai_platform_network_init+0x2e6>
 80105fe:	f1b9 0f00 	cmp.w	r9, #0
 8010602:	f000 8094 	beq.w	801072e <ai_platform_network_init+0x2fa>
 8010606:	f04f 0c01 	mov.w	ip, #1
 801060a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 801060c:	2600      	movs	r6, #0
 801060e:	83e7      	strh	r7, [r4, #30]
 8010610:	4563      	cmp	r3, ip
 8010612:	83a6      	strh	r6, [r4, #28]
 8010614:	d37a      	bcc.n	801070c <ai_platform_network_init+0x2d8>
 8010616:	f1bc 0f00 	cmp.w	ip, #0
 801061a:	f000 809c 	beq.w	8010756 <ai_platform_network_init+0x322>
 801061e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8010620:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 8010624:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010626:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 801062a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 801062e:	e74c      	b.n	80104ca <ai_platform_network_init+0x96>
 8010630:	4a35      	ldr	r2, [pc, #212]	; (8010708 <ai_platform_network_init+0x2d4>)
 8010632:	2301      	movs	r3, #1
 8010634:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8010638:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801063c:	2b00      	cmp	r3, #0
 801063e:	d1fb      	bne.n	8010638 <ai_platform_network_init+0x204>
 8010640:	492f      	ldr	r1, [pc, #188]	; (8010700 <ai_platform_network_init+0x2cc>)
 8010642:	4b30      	ldr	r3, [pc, #192]	; (8010704 <ai_platform_network_init+0x2d0>)
 8010644:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8010648:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 801064c:	429a      	cmp	r2, r3
 801064e:	d09c      	beq.n	801058a <ai_platform_network_init+0x156>
 8010650:	e7fe      	b.n	8010650 <ai_platform_network_init+0x21c>
 8010652:	4a2d      	ldr	r2, [pc, #180]	; (8010708 <ai_platform_network_init+0x2d4>)
 8010654:	2301      	movs	r3, #1
 8010656:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 801065a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801065e:	2b00      	cmp	r3, #0
 8010660:	d1fb      	bne.n	801065a <ai_platform_network_init+0x226>
 8010662:	4b27      	ldr	r3, [pc, #156]	; (8010700 <ai_platform_network_init+0x2cc>)
 8010664:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8010668:	4b26      	ldr	r3, [pc, #152]	; (8010704 <ai_platform_network_init+0x2d0>)
 801066a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 801066e:	429a      	cmp	r2, r3
 8010670:	f43f af18 	beq.w	80104a4 <ai_platform_network_init+0x70>
 8010674:	e7fe      	b.n	8010674 <ai_platform_network_init+0x240>
 8010676:	2800      	cmp	r0, #0
 8010678:	d153      	bne.n	8010722 <ai_platform_network_init+0x2ee>
 801067a:	4680      	mov	r8, r0
 801067c:	4684      	mov	ip, r0
 801067e:	2e00      	cmp	r6, #0
 8010680:	d063      	beq.n	801074a <ai_platform_network_init+0x316>
 8010682:	8be6      	ldrh	r6, [r4, #30]
 8010684:	2e00      	cmp	r6, #0
 8010686:	d168      	bne.n	801075a <ai_platform_network_init+0x326>
 8010688:	2212      	movs	r2, #18
 801068a:	2116      	movs	r1, #22
 801068c:	f104 0010 	add.w	r0, r4, #16
 8010690:	f000 fc7a 	bl	8010f88 <core_set_error>
 8010694:	e77c      	b.n	8010590 <ai_platform_network_init+0x15c>
 8010696:	4a19      	ldr	r2, [pc, #100]	; (80106fc <ai_platform_network_init+0x2c8>)
 8010698:	2301      	movs	r3, #1
 801069a:	6093      	str	r3, [r2, #8]
 801069c:	6893      	ldr	r3, [r2, #8]
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d1fc      	bne.n	801069c <ai_platform_network_init+0x268>
 80106a2:	4b17      	ldr	r3, [pc, #92]	; (8010700 <ai_platform_network_init+0x2cc>)
 80106a4:	6013      	str	r3, [r2, #0]
 80106a6:	4b17      	ldr	r3, [pc, #92]	; (8010704 <ai_platform_network_init+0x2d0>)
 80106a8:	6812      	ldr	r2, [r2, #0]
 80106aa:	429a      	cmp	r2, r3
 80106ac:	f43f aefa 	beq.w	80104a4 <ai_platform_network_init+0x70>
 80106b0:	e7fe      	b.n	80106b0 <ai_platform_network_init+0x27c>
 80106b2:	4a12      	ldr	r2, [pc, #72]	; (80106fc <ai_platform_network_init+0x2c8>)
 80106b4:	2301      	movs	r3, #1
 80106b6:	6093      	str	r3, [r2, #8]
 80106b8:	6893      	ldr	r3, [r2, #8]
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	d1fc      	bne.n	80106b8 <ai_platform_network_init+0x284>
 80106be:	4910      	ldr	r1, [pc, #64]	; (8010700 <ai_platform_network_init+0x2cc>)
 80106c0:	4b10      	ldr	r3, [pc, #64]	; (8010704 <ai_platform_network_init+0x2d0>)
 80106c2:	6011      	str	r1, [r2, #0]
 80106c4:	6812      	ldr	r2, [r2, #0]
 80106c6:	429a      	cmp	r2, r3
 80106c8:	f43f af5f 	beq.w	801058a <ai_platform_network_init+0x156>
 80106cc:	e7fe      	b.n	80106cc <ai_platform_network_init+0x298>
 80106ce:	4a0b      	ldr	r2, [pc, #44]	; (80106fc <ai_platform_network_init+0x2c8>)
 80106d0:	2301      	movs	r3, #1
 80106d2:	6093      	str	r3, [r2, #8]
 80106d4:	6893      	ldr	r3, [r2, #8]
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d1fc      	bne.n	80106d4 <ai_platform_network_init+0x2a0>
 80106da:	4b09      	ldr	r3, [pc, #36]	; (8010700 <ai_platform_network_init+0x2cc>)
 80106dc:	6013      	str	r3, [r2, #0]
 80106de:	4b09      	ldr	r3, [pc, #36]	; (8010704 <ai_platform_network_init+0x2d0>)
 80106e0:	6812      	ldr	r2, [r2, #0]
 80106e2:	429a      	cmp	r2, r3
 80106e4:	f43f aede 	beq.w	80104a4 <ai_platform_network_init+0x70>
 80106e8:	e7fe      	b.n	80106e8 <ai_platform_network_init+0x2b4>
 80106ea:	bf00      	nop
 80106ec:	a1c00100 	.word	0xa1c00100
 80106f0:	e0042000 	.word	0xe0042000
 80106f4:	5c001000 	.word	0x5c001000
 80106f8:	a1facade 	.word	0xa1facade
 80106fc:	40023000 	.word	0x40023000
 8010700:	f407a5c2 	.word	0xf407a5c2
 8010704:	b5e8b5cd 	.word	0xb5e8b5cd
 8010708:	58024000 	.word	0x58024000
 801070c:	2213      	movs	r2, #19
 801070e:	2116      	movs	r1, #22
 8010710:	f104 0010 	add.w	r0, r4, #16
 8010714:	f000 fc38 	bl	8010f88 <core_set_error>
 8010718:	e73a      	b.n	8010590 <ai_platform_network_init+0x15c>
 801071a:	4607      	mov	r7, r0
 801071c:	4680      	mov	r8, r0
 801071e:	4684      	mov	ip, r0
 8010720:	e773      	b.n	801060a <ai_platform_network_init+0x1d6>
 8010722:	f1b9 0f00 	cmp.w	r9, #0
 8010726:	d002      	beq.n	801072e <ai_platform_network_init+0x2fa>
 8010728:	f04f 0c01 	mov.w	ip, #1
 801072c:	e7a7      	b.n	801067e <ai_platform_network_init+0x24a>
 801072e:	2110      	movs	r1, #16
 8010730:	2213      	movs	r2, #19
 8010732:	2600      	movs	r6, #0
 8010734:	1860      	adds	r0, r4, r1
 8010736:	f000 fc27 	bl	8010f88 <core_set_error>
 801073a:	e729      	b.n	8010590 <ai_platform_network_init+0x15c>
 801073c:	2110      	movs	r1, #16
 801073e:	2211      	movs	r2, #17
 8010740:	462e      	mov	r6, r5
 8010742:	1860      	adds	r0, r4, r1
 8010744:	f000 fc20 	bl	8010f88 <core_set_error>
 8010748:	e722      	b.n	8010590 <ai_platform_network_init+0x15c>
 801074a:	2110      	movs	r1, #16
 801074c:	2212      	movs	r2, #18
 801074e:	1860      	adds	r0, r4, r1
 8010750:	f000 fc1a 	bl	8010f88 <core_set_error>
 8010754:	e71c      	b.n	8010590 <ai_platform_network_init+0x15c>
 8010756:	4666      	mov	r6, ip
 8010758:	e6b7      	b.n	80104ca <ai_platform_network_init+0x96>
 801075a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801075c:	6a26      	ldr	r6, [r4, #32]
 801075e:	2701      	movs	r7, #1
 8010760:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8010762:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8010766:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 801076a:	e74e      	b.n	801060a <ai_platform_network_init+0x1d6>

0801076c <ai_platform_network_post_init>:
 801076c:	b538      	push	{r3, r4, r5, lr}
 801076e:	2800      	cmp	r0, #0
 8010770:	d04e      	beq.n	8010810 <ai_platform_network_post_init+0xa4>
 8010772:	4b8c      	ldr	r3, [pc, #560]	; (80109a4 <ai_platform_network_post_init+0x238>)
 8010774:	4604      	mov	r4, r0
 8010776:	6802      	ldr	r2, [r0, #0]
 8010778:	429a      	cmp	r2, r3
 801077a:	d149      	bne.n	8010810 <ai_platform_network_post_init+0xa4>
 801077c:	f7fe ff8c 	bl	800f698 <_ai_platform_acquire_crc>
 8010780:	4b89      	ldr	r3, [pc, #548]	; (80109a8 <ai_platform_network_post_init+0x23c>)
 8010782:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801078c:	189a      	adds	r2, r3, r2
 801078e:	2a01      	cmp	r2, #1
 8010790:	f240 8095 	bls.w	80108be <ai_platform_network_post_init+0x152>
 8010794:	f240 4249 	movw	r2, #1097	; 0x449
 8010798:	4293      	cmp	r3, r2
 801079a:	f000 8090 	beq.w	80108be <ai_platform_network_post_init+0x152>
 801079e:	4a83      	ldr	r2, [pc, #524]	; (80109ac <ai_platform_network_post_init+0x240>)
 80107a0:	6813      	ldr	r3, [r2, #0]
 80107a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80107a6:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80107aa:	f000 8096 	beq.w	80108da <ai_platform_network_post_init+0x16e>
 80107ae:	6813      	ldr	r3, [r2, #0]
 80107b0:	f240 4183 	movw	r1, #1155	; 0x483
 80107b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80107b8:	428b      	cmp	r3, r1
 80107ba:	f000 80b8 	beq.w	801092e <ai_platform_network_post_init+0x1c2>
 80107be:	6813      	ldr	r3, [r2, #0]
 80107c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80107c4:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80107c8:	f000 80de 	beq.w	8010988 <ai_platform_network_post_init+0x21c>
 80107cc:	6813      	ldr	r3, [r2, #0]
 80107ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	f000 80bd 	beq.w	8010952 <ai_platform_network_post_init+0x1e6>
 80107d8:	f7fe ff60 	bl	800f69c <_ai_platform_release_crc>
 80107dc:	68e3      	ldr	r3, [r4, #12]
 80107de:	f013 0502 	ands.w	r5, r3, #2
 80107e2:	f000 808c 	beq.w	80108fe <ai_platform_network_post_init+0x192>
 80107e6:	4620      	mov	r0, r4
 80107e8:	f000 fc10 	bl	801100c <ai_layers_post_init_all>
 80107ec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80107ee:	b16b      	cbz	r3, 801080c <ai_platform_network_post_init+0xa0>
 80107f0:	6b65      	ldr	r5, [r4, #52]	; 0x34
 80107f2:	e007      	b.n	8010804 <ai_platform_network_post_init+0x98>
 80107f4:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 80107f8:	4798      	blx	r3
 80107fa:	692b      	ldr	r3, [r5, #16]
 80107fc:	b133      	cbz	r3, 801080c <ai_platform_network_post_init+0xa0>
 80107fe:	42ab      	cmp	r3, r5
 8010800:	461d      	mov	r5, r3
 8010802:	d003      	beq.n	801080c <ai_platform_network_post_init+0xa0>
 8010804:	4629      	mov	r1, r5
 8010806:	2000      	movs	r0, #0
 8010808:	2d00      	cmp	r5, #0
 801080a:	d1f3      	bne.n	80107f4 <ai_platform_network_post_init+0x88>
 801080c:	2001      	movs	r0, #1
 801080e:	bd38      	pop	{r3, r4, r5, pc}
 8010810:	f7fe ff42 	bl	800f698 <_ai_platform_acquire_crc>
 8010814:	4b64      	ldr	r3, [pc, #400]	; (80109a8 <ai_platform_network_post_init+0x23c>)
 8010816:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 801081a:	681b      	ldr	r3, [r3, #0]
 801081c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010820:	185a      	adds	r2, r3, r1
 8010822:	2a01      	cmp	r2, #1
 8010824:	d92a      	bls.n	801087c <ai_platform_network_post_init+0x110>
 8010826:	f240 4249 	movw	r2, #1097	; 0x449
 801082a:	4293      	cmp	r3, r2
 801082c:	d026      	beq.n	801087c <ai_platform_network_post_init+0x110>
 801082e:	4a5f      	ldr	r2, [pc, #380]	; (80109ac <ai_platform_network_post_init+0x240>)
 8010830:	6813      	ldr	r3, [r2, #0]
 8010832:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010836:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801083a:	d02c      	beq.n	8010896 <ai_platform_network_post_init+0x12a>
 801083c:	6813      	ldr	r3, [r2, #0]
 801083e:	f240 4183 	movw	r1, #1155	; 0x483
 8010842:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010846:	428b      	cmp	r3, r1
 8010848:	d060      	beq.n	801090c <ai_platform_network_post_init+0x1a0>
 801084a:	6813      	ldr	r3, [r2, #0]
 801084c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010850:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8010854:	f000 808b 	beq.w	801096e <ai_platform_network_post_init+0x202>
 8010858:	6813      	ldr	r3, [r2, #0]
 801085a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801085e:	2b00      	cmp	r3, #0
 8010860:	d129      	bne.n	80108b6 <ai_platform_network_post_init+0x14a>
 8010862:	4a53      	ldr	r2, [pc, #332]	; (80109b0 <ai_platform_network_post_init+0x244>)
 8010864:	2301      	movs	r3, #1
 8010866:	6093      	str	r3, [r2, #8]
 8010868:	6893      	ldr	r3, [r2, #8]
 801086a:	2b00      	cmp	r3, #0
 801086c:	d1fc      	bne.n	8010868 <ai_platform_network_post_init+0xfc>
 801086e:	4951      	ldr	r1, [pc, #324]	; (80109b4 <ai_platform_network_post_init+0x248>)
 8010870:	4b51      	ldr	r3, [pc, #324]	; (80109b8 <ai_platform_network_post_init+0x24c>)
 8010872:	6011      	str	r1, [r2, #0]
 8010874:	6812      	ldr	r2, [r2, #0]
 8010876:	429a      	cmp	r2, r3
 8010878:	d01d      	beq.n	80108b6 <ai_platform_network_post_init+0x14a>
 801087a:	e7fe      	b.n	801087a <ai_platform_network_post_init+0x10e>
 801087c:	4a4c      	ldr	r2, [pc, #304]	; (80109b0 <ai_platform_network_post_init+0x244>)
 801087e:	2301      	movs	r3, #1
 8010880:	6093      	str	r3, [r2, #8]
 8010882:	6893      	ldr	r3, [r2, #8]
 8010884:	2b00      	cmp	r3, #0
 8010886:	d1fc      	bne.n	8010882 <ai_platform_network_post_init+0x116>
 8010888:	494a      	ldr	r1, [pc, #296]	; (80109b4 <ai_platform_network_post_init+0x248>)
 801088a:	4b4b      	ldr	r3, [pc, #300]	; (80109b8 <ai_platform_network_post_init+0x24c>)
 801088c:	6011      	str	r1, [r2, #0]
 801088e:	6812      	ldr	r2, [r2, #0]
 8010890:	429a      	cmp	r2, r3
 8010892:	d010      	beq.n	80108b6 <ai_platform_network_post_init+0x14a>
 8010894:	e7fe      	b.n	8010894 <ai_platform_network_post_init+0x128>
 8010896:	4a49      	ldr	r2, [pc, #292]	; (80109bc <ai_platform_network_post_init+0x250>)
 8010898:	2301      	movs	r3, #1
 801089a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 801089e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d1fb      	bne.n	801089e <ai_platform_network_post_init+0x132>
 80108a6:	4943      	ldr	r1, [pc, #268]	; (80109b4 <ai_platform_network_post_init+0x248>)
 80108a8:	4b43      	ldr	r3, [pc, #268]	; (80109b8 <ai_platform_network_post_init+0x24c>)
 80108aa:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 80108ae:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80108b2:	429a      	cmp	r2, r3
 80108b4:	d110      	bne.n	80108d8 <ai_platform_network_post_init+0x16c>
 80108b6:	f7fe fef1 	bl	800f69c <_ai_platform_release_crc>
 80108ba:	2000      	movs	r0, #0
 80108bc:	bd38      	pop	{r3, r4, r5, pc}
 80108be:	4a3c      	ldr	r2, [pc, #240]	; (80109b0 <ai_platform_network_post_init+0x244>)
 80108c0:	2301      	movs	r3, #1
 80108c2:	6093      	str	r3, [r2, #8]
 80108c4:	6893      	ldr	r3, [r2, #8]
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d1fc      	bne.n	80108c4 <ai_platform_network_post_init+0x158>
 80108ca:	493a      	ldr	r1, [pc, #232]	; (80109b4 <ai_platform_network_post_init+0x248>)
 80108cc:	4b3a      	ldr	r3, [pc, #232]	; (80109b8 <ai_platform_network_post_init+0x24c>)
 80108ce:	6011      	str	r1, [r2, #0]
 80108d0:	6812      	ldr	r2, [r2, #0]
 80108d2:	429a      	cmp	r2, r3
 80108d4:	d080      	beq.n	80107d8 <ai_platform_network_post_init+0x6c>
 80108d6:	e7fe      	b.n	80108d6 <ai_platform_network_post_init+0x16a>
 80108d8:	e7fe      	b.n	80108d8 <ai_platform_network_post_init+0x16c>
 80108da:	4a38      	ldr	r2, [pc, #224]	; (80109bc <ai_platform_network_post_init+0x250>)
 80108dc:	2301      	movs	r3, #1
 80108de:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80108e2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d1fb      	bne.n	80108e2 <ai_platform_network_post_init+0x176>
 80108ea:	4932      	ldr	r1, [pc, #200]	; (80109b4 <ai_platform_network_post_init+0x248>)
 80108ec:	4b32      	ldr	r3, [pc, #200]	; (80109b8 <ai_platform_network_post_init+0x24c>)
 80108ee:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 80108f2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80108f6:	429a      	cmp	r2, r3
 80108f8:	f43f af6e 	beq.w	80107d8 <ai_platform_network_post_init+0x6c>
 80108fc:	e7fe      	b.n	80108fc <ai_platform_network_post_init+0x190>
 80108fe:	2210      	movs	r2, #16
 8010900:	2111      	movs	r1, #17
 8010902:	18a0      	adds	r0, r4, r2
 8010904:	f000 fb40 	bl	8010f88 <core_set_error>
 8010908:	4628      	mov	r0, r5
 801090a:	bd38      	pop	{r3, r4, r5, pc}
 801090c:	4a2b      	ldr	r2, [pc, #172]	; (80109bc <ai_platform_network_post_init+0x250>)
 801090e:	2301      	movs	r3, #1
 8010910:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8010914:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8010918:	2b00      	cmp	r3, #0
 801091a:	d1fb      	bne.n	8010914 <ai_platform_network_post_init+0x1a8>
 801091c:	4925      	ldr	r1, [pc, #148]	; (80109b4 <ai_platform_network_post_init+0x248>)
 801091e:	4b26      	ldr	r3, [pc, #152]	; (80109b8 <ai_platform_network_post_init+0x24c>)
 8010920:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8010924:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8010928:	429a      	cmp	r2, r3
 801092a:	d0c4      	beq.n	80108b6 <ai_platform_network_post_init+0x14a>
 801092c:	e7fe      	b.n	801092c <ai_platform_network_post_init+0x1c0>
 801092e:	4a23      	ldr	r2, [pc, #140]	; (80109bc <ai_platform_network_post_init+0x250>)
 8010930:	2301      	movs	r3, #1
 8010932:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8010936:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801093a:	2b00      	cmp	r3, #0
 801093c:	d1fb      	bne.n	8010936 <ai_platform_network_post_init+0x1ca>
 801093e:	491d      	ldr	r1, [pc, #116]	; (80109b4 <ai_platform_network_post_init+0x248>)
 8010940:	4b1d      	ldr	r3, [pc, #116]	; (80109b8 <ai_platform_network_post_init+0x24c>)
 8010942:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8010946:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 801094a:	429a      	cmp	r2, r3
 801094c:	f43f af44 	beq.w	80107d8 <ai_platform_network_post_init+0x6c>
 8010950:	e7fe      	b.n	8010950 <ai_platform_network_post_init+0x1e4>
 8010952:	4a17      	ldr	r2, [pc, #92]	; (80109b0 <ai_platform_network_post_init+0x244>)
 8010954:	2301      	movs	r3, #1
 8010956:	6093      	str	r3, [r2, #8]
 8010958:	6893      	ldr	r3, [r2, #8]
 801095a:	2b00      	cmp	r3, #0
 801095c:	d1fc      	bne.n	8010958 <ai_platform_network_post_init+0x1ec>
 801095e:	4915      	ldr	r1, [pc, #84]	; (80109b4 <ai_platform_network_post_init+0x248>)
 8010960:	4b15      	ldr	r3, [pc, #84]	; (80109b8 <ai_platform_network_post_init+0x24c>)
 8010962:	6011      	str	r1, [r2, #0]
 8010964:	6812      	ldr	r2, [r2, #0]
 8010966:	429a      	cmp	r2, r3
 8010968:	f43f af36 	beq.w	80107d8 <ai_platform_network_post_init+0x6c>
 801096c:	e7fe      	b.n	801096c <ai_platform_network_post_init+0x200>
 801096e:	4a10      	ldr	r2, [pc, #64]	; (80109b0 <ai_platform_network_post_init+0x244>)
 8010970:	2301      	movs	r3, #1
 8010972:	6093      	str	r3, [r2, #8]
 8010974:	6893      	ldr	r3, [r2, #8]
 8010976:	2b00      	cmp	r3, #0
 8010978:	d1fc      	bne.n	8010974 <ai_platform_network_post_init+0x208>
 801097a:	490e      	ldr	r1, [pc, #56]	; (80109b4 <ai_platform_network_post_init+0x248>)
 801097c:	4b0e      	ldr	r3, [pc, #56]	; (80109b8 <ai_platform_network_post_init+0x24c>)
 801097e:	6011      	str	r1, [r2, #0]
 8010980:	6812      	ldr	r2, [r2, #0]
 8010982:	429a      	cmp	r2, r3
 8010984:	d097      	beq.n	80108b6 <ai_platform_network_post_init+0x14a>
 8010986:	e7fe      	b.n	8010986 <ai_platform_network_post_init+0x21a>
 8010988:	4a09      	ldr	r2, [pc, #36]	; (80109b0 <ai_platform_network_post_init+0x244>)
 801098a:	2301      	movs	r3, #1
 801098c:	6093      	str	r3, [r2, #8]
 801098e:	6893      	ldr	r3, [r2, #8]
 8010990:	2b00      	cmp	r3, #0
 8010992:	d1fc      	bne.n	801098e <ai_platform_network_post_init+0x222>
 8010994:	4907      	ldr	r1, [pc, #28]	; (80109b4 <ai_platform_network_post_init+0x248>)
 8010996:	4b08      	ldr	r3, [pc, #32]	; (80109b8 <ai_platform_network_post_init+0x24c>)
 8010998:	6011      	str	r1, [r2, #0]
 801099a:	6812      	ldr	r2, [r2, #0]
 801099c:	429a      	cmp	r2, r3
 801099e:	f43f af1b 	beq.w	80107d8 <ai_platform_network_post_init+0x6c>
 80109a2:	e7fe      	b.n	80109a2 <ai_platform_network_post_init+0x236>
 80109a4:	a1c00100 	.word	0xa1c00100
 80109a8:	e0042000 	.word	0xe0042000
 80109ac:	5c001000 	.word	0x5c001000
 80109b0:	40023000 	.word	0x40023000
 80109b4:	f407a5c2 	.word	0xf407a5c2
 80109b8:	b5e8b5cd 	.word	0xb5e8b5cd
 80109bc:	58024000 	.word	0x58024000

080109c0 <ai_platform_network_process>:
 80109c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109c4:	b085      	sub	sp, #20
 80109c6:	460e      	mov	r6, r1
 80109c8:	4605      	mov	r5, r0
 80109ca:	9201      	str	r2, [sp, #4]
 80109cc:	b120      	cbz	r0, 80109d8 <ai_platform_network_process+0x18>
 80109ce:	4b24      	ldr	r3, [pc, #144]	; (8010a60 <ai_platform_network_process+0xa0>)
 80109d0:	6802      	ldr	r2, [r0, #0]
 80109d2:	429a      	cmp	r2, r3
 80109d4:	bf18      	it	ne
 80109d6:	2500      	movne	r5, #0
 80109d8:	f7fe fe5e 	bl	800f698 <_ai_platform_acquire_crc>
 80109dc:	4b21      	ldr	r3, [pc, #132]	; (8010a64 <ai_platform_network_process+0xa4>)
 80109de:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80109e8:	185a      	adds	r2, r3, r1
 80109ea:	2a01      	cmp	r2, #1
 80109ec:	d92b      	bls.n	8010a46 <ai_platform_network_process+0x86>
 80109ee:	f240 4249 	movw	r2, #1097	; 0x449
 80109f2:	4293      	cmp	r3, r2
 80109f4:	d027      	beq.n	8010a46 <ai_platform_network_process+0x86>
 80109f6:	4a1c      	ldr	r2, [pc, #112]	; (8010a68 <ai_platform_network_process+0xa8>)
 80109f8:	6813      	ldr	r3, [r2, #0]
 80109fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80109fe:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8010a02:	d039      	beq.n	8010a78 <ai_platform_network_process+0xb8>
 8010a04:	6813      	ldr	r3, [r2, #0]
 8010a06:	f240 4183 	movw	r1, #1155	; 0x483
 8010a0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010a0e:	428b      	cmp	r3, r1
 8010a10:	f000 819c 	beq.w	8010d4c <ai_platform_network_process+0x38c>
 8010a14:	6813      	ldr	r3, [r2, #0]
 8010a16:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010a1a:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8010a1e:	f000 8179 	beq.w	8010d14 <ai_platform_network_process+0x354>
 8010a22:	6813      	ldr	r3, [r2, #0]
 8010a24:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d136      	bne.n	8010a9a <ai_platform_network_process+0xda>
 8010a2c:	4a0f      	ldr	r2, [pc, #60]	; (8010a6c <ai_platform_network_process+0xac>)
 8010a2e:	2301      	movs	r3, #1
 8010a30:	6093      	str	r3, [r2, #8]
 8010a32:	6893      	ldr	r3, [r2, #8]
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d1fc      	bne.n	8010a32 <ai_platform_network_process+0x72>
 8010a38:	4b0d      	ldr	r3, [pc, #52]	; (8010a70 <ai_platform_network_process+0xb0>)
 8010a3a:	6013      	str	r3, [r2, #0]
 8010a3c:	4b0d      	ldr	r3, [pc, #52]	; (8010a74 <ai_platform_network_process+0xb4>)
 8010a3e:	6812      	ldr	r2, [r2, #0]
 8010a40:	429a      	cmp	r2, r3
 8010a42:	d02a      	beq.n	8010a9a <ai_platform_network_process+0xda>
 8010a44:	e7fe      	b.n	8010a44 <ai_platform_network_process+0x84>
 8010a46:	4a09      	ldr	r2, [pc, #36]	; (8010a6c <ai_platform_network_process+0xac>)
 8010a48:	2301      	movs	r3, #1
 8010a4a:	6093      	str	r3, [r2, #8]
 8010a4c:	6893      	ldr	r3, [r2, #8]
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d1fc      	bne.n	8010a4c <ai_platform_network_process+0x8c>
 8010a52:	4b07      	ldr	r3, [pc, #28]	; (8010a70 <ai_platform_network_process+0xb0>)
 8010a54:	6013      	str	r3, [r2, #0]
 8010a56:	4b07      	ldr	r3, [pc, #28]	; (8010a74 <ai_platform_network_process+0xb4>)
 8010a58:	6812      	ldr	r2, [r2, #0]
 8010a5a:	429a      	cmp	r2, r3
 8010a5c:	d01d      	beq.n	8010a9a <ai_platform_network_process+0xda>
 8010a5e:	e7fe      	b.n	8010a5e <ai_platform_network_process+0x9e>
 8010a60:	a1c00100 	.word	0xa1c00100
 8010a64:	e0042000 	.word	0xe0042000
 8010a68:	5c001000 	.word	0x5c001000
 8010a6c:	40023000 	.word	0x40023000
 8010a70:	f407a5c2 	.word	0xf407a5c2
 8010a74:	b5e8b5cd 	.word	0xb5e8b5cd
 8010a78:	4ab0      	ldr	r2, [pc, #704]	; (8010d3c <ai_platform_network_process+0x37c>)
 8010a7a:	2301      	movs	r3, #1
 8010a7c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8010a80:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d1fb      	bne.n	8010a80 <ai_platform_network_process+0xc0>
 8010a88:	4bad      	ldr	r3, [pc, #692]	; (8010d40 <ai_platform_network_process+0x380>)
 8010a8a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8010a8e:	4bad      	ldr	r3, [pc, #692]	; (8010d44 <ai_platform_network_process+0x384>)
 8010a90:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8010a94:	429a      	cmp	r2, r3
 8010a96:	f040 812b 	bne.w	8010cf0 <ai_platform_network_process+0x330>
 8010a9a:	f7fe fdff 	bl	800f69c <_ai_platform_release_crc>
 8010a9e:	2d00      	cmp	r5, #0
 8010aa0:	f000 8172 	beq.w	8010d88 <ai_platform_network_process+0x3c8>
 8010aa4:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	f000 8123 	beq.w	8010cf2 <ai_platform_network_process+0x332>
 8010aac:	68eb      	ldr	r3, [r5, #12]
 8010aae:	2200      	movs	r2, #0
 8010ab0:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 8010ab4:	f003 0303 	and.w	r3, r3, #3
 8010ab8:	616a      	str	r2, [r5, #20]
 8010aba:	2b03      	cmp	r3, #3
 8010abc:	f040 811f 	bne.w	8010cfe <ai_platform_network_process+0x33e>
 8010ac0:	2e00      	cmp	r6, #0
 8010ac2:	f000 8156 	beq.w	8010d72 <ai_platform_network_process+0x3b2>
 8010ac6:	fab8 f788 	clz	r7, r8
 8010aca:	097f      	lsrs	r7, r7, #5
 8010acc:	f1b8 0f00 	cmp.w	r8, #0
 8010ad0:	f000 814f 	beq.w	8010d72 <ai_platform_network_process+0x3b2>
 8010ad4:	f8b8 3000 	ldrh.w	r3, [r8]
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	f000 814a 	beq.w	8010d72 <ai_platform_network_process+0x3b2>
 8010ade:	69b3      	ldr	r3, [r6, #24]
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	e9cd 3502 	strd	r3, r5, [sp, #8]
 8010ae6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d072      	beq.n	8010bd4 <ai_platform_network_process+0x214>
 8010aee:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8010af2:	2c00      	cmp	r4, #0
 8010af4:	d06e      	beq.n	8010bd4 <ai_platform_network_process+0x214>
 8010af6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010afa:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8010afe:	f8d3 a000 	ldr.w	sl, [r3]
 8010b02:	eb1a 1907 	adds.w	r9, sl, r7, lsl #4
 8010b06:	f000 8133 	beq.w	8010d70 <ai_platform_network_process+0x3b0>
 8010b0a:	69a3      	ldr	r3, [r4, #24]
 8010b0c:	2101      	movs	r1, #1
 8010b0e:	4630      	mov	r0, r6
 8010b10:	685d      	ldr	r5, [r3, #4]
 8010b12:	f7fe fd73 	bl	800f5fc <ai_buffer_get_size>
 8010b16:	4285      	cmp	r5, r0
 8010b18:	f0c0 8138 	bcc.w	8010d8c <ai_platform_network_process+0x3cc>
 8010b1c:	68e0      	ldr	r0, [r4, #12]
 8010b1e:	69b1      	ldr	r1, [r6, #24]
 8010b20:	68c2      	ldr	r2, [r0, #12]
 8010b22:	68cb      	ldr	r3, [r1, #12]
 8010b24:	429a      	cmp	r2, r3
 8010b26:	f040 8131 	bne.w	8010d8c <ai_platform_network_process+0x3cc>
 8010b2a:	6882      	ldr	r2, [r0, #8]
 8010b2c:	688b      	ldr	r3, [r1, #8]
 8010b2e:	429a      	cmp	r2, r3
 8010b30:	f040 812c 	bne.w	8010d8c <ai_platform_network_process+0x3cc>
 8010b34:	6842      	ldr	r2, [r0, #4]
 8010b36:	684b      	ldr	r3, [r1, #4]
 8010b38:	429a      	cmp	r2, r3
 8010b3a:	f040 8127 	bne.w	8010d8c <ai_platform_network_process+0x3cc>
 8010b3e:	69a3      	ldr	r3, [r4, #24]
 8010b40:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010b44:	f001 fde4 	bl	8012710 <ai_array_get_data_byte_size>
 8010b48:	4605      	mov	r5, r0
 8010b4a:	4620      	mov	r0, r4
 8010b4c:	f001 fdf6 	bl	801273c <get_tensor_byte_size>
 8010b50:	4285      	cmp	r5, r0
 8010b52:	f0c0 811b 	bcc.w	8010d8c <ai_platform_network_process+0x3cc>
 8010b56:	69a3      	ldr	r3, [r4, #24]
 8010b58:	6818      	ldr	r0, [r3, #0]
 8010b5a:	f001 fd45 	bl	80125e8 <ai_array_to_buffer_fmt>
 8010b5e:	6833      	ldr	r3, [r6, #0]
 8010b60:	4058      	eors	r0, r3
 8010b62:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8010b66:	f040 81c8 	bne.w	8010efa <ai_platform_network_process+0x53a>
 8010b6a:	6873      	ldr	r3, [r6, #4]
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	f000 81bb 	beq.w	8010ee8 <ai_platform_network_process+0x528>
 8010b72:	69b3      	ldr	r3, [r6, #24]
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	f000 81c8 	beq.w	8010f0c <ai_platform_network_process+0x54c>
 8010b7c:	9a02      	ldr	r2, [sp, #8]
 8010b7e:	4620      	mov	r0, r4
 8010b80:	3701      	adds	r7, #1
 8010b82:	361c      	adds	r6, #28
 8010b84:	429a      	cmp	r2, r3
 8010b86:	bf38      	it	cc
 8010b88:	461a      	movcc	r2, r3
 8010b8a:	9202      	str	r2, [sp, #8]
 8010b8c:	f001 fdd6 	bl	801273c <get_tensor_byte_size>
 8010b90:	f8c9 0008 	str.w	r0, [r9, #8]
 8010b94:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	fb00 f303 	mul.w	r3, r0, r3
 8010b9e:	f8c9 300c 	str.w	r3, [r9, #12]
 8010ba2:	f856 1c18 	ldr.w	r1, [r6, #-24]
 8010ba6:	440b      	add	r3, r1
 8010ba8:	f8c9 1004 	str.w	r1, [r9, #4]
 8010bac:	f84a 300b 	str.w	r3, [sl, fp]
 8010bb0:	69a0      	ldr	r0, [r4, #24]
 8010bb2:	6803      	ldr	r3, [r0, #0]
 8010bb4:	009a      	lsls	r2, r3, #2
 8010bb6:	f100 80bb 	bmi.w	8010d30 <ai_platform_network_process+0x370>
 8010bba:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8010bbe:	1a9b      	subs	r3, r3, r2
 8010bc0:	4419      	add	r1, r3
 8010bc2:	6081      	str	r1, [r0, #8]
 8010bc4:	69a3      	ldr	r3, [r4, #24]
 8010bc6:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8010bca:	60da      	str	r2, [r3, #12]
 8010bcc:	f8b8 3000 	ldrh.w	r3, [r8]
 8010bd0:	42bb      	cmp	r3, r7
 8010bd2:	d888      	bhi.n	8010ae6 <ai_platform_network_process+0x126>
 8010bd4:	9d03      	ldr	r5, [sp, #12]
 8010bd6:	9b01      	ldr	r3, [sp, #4]
 8010bd8:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	f000 819f 	beq.w	8010f1e <ai_platform_network_process+0x55e>
 8010be0:	2a01      	cmp	r2, #1
 8010be2:	f240 8179 	bls.w	8010ed8 <ai_platform_network_process+0x518>
 8010be6:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 8010bea:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	f000 8172 	beq.w	8010ed8 <ai_platform_network_process+0x518>
 8010bf4:	9e01      	ldr	r6, [sp, #4]
 8010bf6:	2700      	movs	r7, #0
 8010bf8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	f000 80d3 	beq.w	8010da8 <ai_platform_network_process+0x3e8>
 8010c02:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8010c06:	2c00      	cmp	r4, #0
 8010c08:	f000 80ce 	beq.w	8010da8 <ai_platform_network_process+0x3e8>
 8010c0c:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8010c10:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8010c14:	f8d3 8000 	ldr.w	r8, [r3]
 8010c18:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 8010c1c:	f000 819d 	beq.w	8010f5a <ai_platform_network_process+0x59a>
 8010c20:	69a3      	ldr	r3, [r4, #24]
 8010c22:	2101      	movs	r1, #1
 8010c24:	4630      	mov	r0, r6
 8010c26:	685b      	ldr	r3, [r3, #4]
 8010c28:	9301      	str	r3, [sp, #4]
 8010c2a:	f7fe fce7 	bl	800f5fc <ai_buffer_get_size>
 8010c2e:	9b01      	ldr	r3, [sp, #4]
 8010c30:	4283      	cmp	r3, r0
 8010c32:	f0c0 8151 	bcc.w	8010ed8 <ai_platform_network_process+0x518>
 8010c36:	68e0      	ldr	r0, [r4, #12]
 8010c38:	69b1      	ldr	r1, [r6, #24]
 8010c3a:	68c2      	ldr	r2, [r0, #12]
 8010c3c:	68cb      	ldr	r3, [r1, #12]
 8010c3e:	429a      	cmp	r2, r3
 8010c40:	f040 814a 	bne.w	8010ed8 <ai_platform_network_process+0x518>
 8010c44:	6882      	ldr	r2, [r0, #8]
 8010c46:	688b      	ldr	r3, [r1, #8]
 8010c48:	429a      	cmp	r2, r3
 8010c4a:	f040 8145 	bne.w	8010ed8 <ai_platform_network_process+0x518>
 8010c4e:	6842      	ldr	r2, [r0, #4]
 8010c50:	684b      	ldr	r3, [r1, #4]
 8010c52:	429a      	cmp	r2, r3
 8010c54:	f040 8140 	bne.w	8010ed8 <ai_platform_network_process+0x518>
 8010c58:	69a3      	ldr	r3, [r4, #24]
 8010c5a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010c5e:	f001 fd57 	bl	8012710 <ai_array_get_data_byte_size>
 8010c62:	9001      	str	r0, [sp, #4]
 8010c64:	4620      	mov	r0, r4
 8010c66:	f001 fd69 	bl	801273c <get_tensor_byte_size>
 8010c6a:	9b01      	ldr	r3, [sp, #4]
 8010c6c:	4283      	cmp	r3, r0
 8010c6e:	f0c0 8133 	bcc.w	8010ed8 <ai_platform_network_process+0x518>
 8010c72:	69a3      	ldr	r3, [r4, #24]
 8010c74:	6818      	ldr	r0, [r3, #0]
 8010c76:	f001 fcb7 	bl	80125e8 <ai_array_to_buffer_fmt>
 8010c7a:	6833      	ldr	r3, [r6, #0]
 8010c7c:	4058      	eors	r0, r3
 8010c7e:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8010c82:	f040 815a 	bne.w	8010f3a <ai_platform_network_process+0x57a>
 8010c86:	6873      	ldr	r3, [r6, #4]
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	f000 814e 	beq.w	8010f2a <ai_platform_network_process+0x56a>
 8010c8e:	69b3      	ldr	r3, [r6, #24]
 8010c90:	681b      	ldr	r3, [r3, #0]
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	f000 8159 	beq.w	8010f4a <ai_platform_network_process+0x58a>
 8010c98:	9a02      	ldr	r2, [sp, #8]
 8010c9a:	4620      	mov	r0, r4
 8010c9c:	3701      	adds	r7, #1
 8010c9e:	361c      	adds	r6, #28
 8010ca0:	429a      	cmp	r2, r3
 8010ca2:	bf38      	it	cc
 8010ca4:	461a      	movcc	r2, r3
 8010ca6:	9202      	str	r2, [sp, #8]
 8010ca8:	f001 fd48 	bl	801273c <get_tensor_byte_size>
 8010cac:	f8ca 0008 	str.w	r0, [sl, #8]
 8010cb0:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8010cb4:	681b      	ldr	r3, [r3, #0]
 8010cb6:	fb00 f303 	mul.w	r3, r0, r3
 8010cba:	f8ca 300c 	str.w	r3, [sl, #12]
 8010cbe:	f856 1c18 	ldr.w	r1, [r6, #-24]
 8010cc2:	440b      	add	r3, r1
 8010cc4:	f8ca 1004 	str.w	r1, [sl, #4]
 8010cc8:	f848 300b 	str.w	r3, [r8, fp]
 8010ccc:	69a0      	ldr	r0, [r4, #24]
 8010cce:	6803      	ldr	r3, [r0, #0]
 8010cd0:	009b      	lsls	r3, r3, #2
 8010cd2:	d464      	bmi.n	8010d9e <ai_platform_network_process+0x3de>
 8010cd4:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8010cd8:	1a9b      	subs	r3, r3, r2
 8010cda:	4419      	add	r1, r3
 8010cdc:	6081      	str	r1, [r0, #8]
 8010cde:	69a3      	ldr	r3, [r4, #24]
 8010ce0:	f8da 2004 	ldr.w	r2, [sl, #4]
 8010ce4:	60da      	str	r2, [r3, #12]
 8010ce6:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8010cea:	429f      	cmp	r7, r3
 8010cec:	d384      	bcc.n	8010bf8 <ai_platform_network_process+0x238>
 8010cee:	e05b      	b.n	8010da8 <ai_platform_network_process+0x3e8>
 8010cf0:	e7fe      	b.n	8010cf0 <ai_platform_network_process+0x330>
 8010cf2:	68ea      	ldr	r2, [r5, #12]
 8010cf4:	616b      	str	r3, [r5, #20]
 8010cf6:	f002 0203 	and.w	r2, r2, #3
 8010cfa:	2a03      	cmp	r2, #3
 8010cfc:	d039      	beq.n	8010d72 <ai_platform_network_process+0x3b2>
 8010cfe:	2230      	movs	r2, #48	; 0x30
 8010d00:	2111      	movs	r1, #17
 8010d02:	f105 0010 	add.w	r0, r5, #16
 8010d06:	2400      	movs	r4, #0
 8010d08:	f000 f93e 	bl	8010f88 <core_set_error>
 8010d0c:	4620      	mov	r0, r4
 8010d0e:	b005      	add	sp, #20
 8010d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d14:	4a0c      	ldr	r2, [pc, #48]	; (8010d48 <ai_platform_network_process+0x388>)
 8010d16:	2301      	movs	r3, #1
 8010d18:	6093      	str	r3, [r2, #8]
 8010d1a:	6893      	ldr	r3, [r2, #8]
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d1fc      	bne.n	8010d1a <ai_platform_network_process+0x35a>
 8010d20:	4b07      	ldr	r3, [pc, #28]	; (8010d40 <ai_platform_network_process+0x380>)
 8010d22:	6013      	str	r3, [r2, #0]
 8010d24:	4b07      	ldr	r3, [pc, #28]	; (8010d44 <ai_platform_network_process+0x384>)
 8010d26:	6812      	ldr	r2, [r2, #0]
 8010d28:	429a      	cmp	r2, r3
 8010d2a:	f43f aeb6 	beq.w	8010a9a <ai_platform_network_process+0xda>
 8010d2e:	e7fe      	b.n	8010d2e <ai_platform_network_process+0x36e>
 8010d30:	f8b8 3000 	ldrh.w	r3, [r8]
 8010d34:	429f      	cmp	r7, r3
 8010d36:	f4ff aed6 	bcc.w	8010ae6 <ai_platform_network_process+0x126>
 8010d3a:	e74b      	b.n	8010bd4 <ai_platform_network_process+0x214>
 8010d3c:	58024000 	.word	0x58024000
 8010d40:	f407a5c2 	.word	0xf407a5c2
 8010d44:	b5e8b5cd 	.word	0xb5e8b5cd
 8010d48:	40023000 	.word	0x40023000
 8010d4c:	4a87      	ldr	r2, [pc, #540]	; (8010f6c <ai_platform_network_process+0x5ac>)
 8010d4e:	2301      	movs	r3, #1
 8010d50:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8010d54:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d1fb      	bne.n	8010d54 <ai_platform_network_process+0x394>
 8010d5c:	4b84      	ldr	r3, [pc, #528]	; (8010f70 <ai_platform_network_process+0x5b0>)
 8010d5e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8010d62:	4b84      	ldr	r3, [pc, #528]	; (8010f74 <ai_platform_network_process+0x5b4>)
 8010d64:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8010d68:	429a      	cmp	r2, r3
 8010d6a:	f43f ae96 	beq.w	8010a9a <ai_platform_network_process+0xda>
 8010d6e:	e7fe      	b.n	8010d6e <ai_platform_network_process+0x3ae>
 8010d70:	9d03      	ldr	r5, [sp, #12]
 8010d72:	2400      	movs	r4, #0
 8010d74:	2217      	movs	r2, #23
 8010d76:	2112      	movs	r1, #18
 8010d78:	f105 0010 	add.w	r0, r5, #16
 8010d7c:	f000 f904 	bl	8010f88 <core_set_error>
 8010d80:	4620      	mov	r0, r4
 8010d82:	b005      	add	sp, #20
 8010d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d88:	462c      	mov	r4, r5
 8010d8a:	e7bf      	b.n	8010d0c <ai_platform_network_process+0x34c>
 8010d8c:	9d03      	ldr	r5, [sp, #12]
 8010d8e:	2218      	movs	r2, #24
 8010d90:	2112      	movs	r1, #18
 8010d92:	2400      	movs	r4, #0
 8010d94:	f105 0010 	add.w	r0, r5, #16
 8010d98:	f000 f8f6 	bl	8010f88 <core_set_error>
 8010d9c:	e7b6      	b.n	8010d0c <ai_platform_network_process+0x34c>
 8010d9e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8010da2:	429f      	cmp	r7, r3
 8010da4:	f4ff af28 	bcc.w	8010bf8 <ai_platform_network_process+0x238>
 8010da8:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8010dac:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 8010dae:	82ab      	strh	r3, [r5, #20]
 8010db0:	2a00      	cmp	r2, #0
 8010db2:	f040 808b 	bne.w	8010ecc <ai_platform_network_process+0x50c>
 8010db6:	4616      	mov	r6, r2
 8010db8:	4617      	mov	r7, r2
 8010dba:	8aec      	ldrh	r4, [r5, #22]
 8010dbc:	429c      	cmp	r4, r3
 8010dbe:	d2a5      	bcs.n	8010d0c <ai_platform_network_process+0x34c>
 8010dc0:	46ab      	mov	fp, r5
 8010dc2:	2e00      	cmp	r6, #0
 8010dc4:	d030      	beq.n	8010e28 <ai_platform_network_process+0x468>
 8010dc6:	f04f 0800 	mov.w	r8, #0
 8010dca:	e014      	b.n	8010df6 <ai_platform_network_process+0x436>
 8010dcc:	6882      	ldr	r2, [r0, #8]
 8010dce:	68c5      	ldr	r5, [r0, #12]
 8010dd0:	6863      	ldr	r3, [r4, #4]
 8010dd2:	1b52      	subs	r2, r2, r5
 8010dd4:	4413      	add	r3, r2
 8010dd6:	6083      	str	r3, [r0, #8]
 8010dd8:	698b      	ldr	r3, [r1, #24]
 8010dda:	6862      	ldr	r2, [r4, #4]
 8010ddc:	60da      	str	r2, [r3, #12]
 8010dde:	f859 200a 	ldr.w	r2, [r9, sl]
 8010de2:	f108 0801 	add.w	r8, r8, #1
 8010de6:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8010dea:	440b      	add	r3, r1
 8010dec:	4293      	cmp	r3, r2
 8010dee:	d301      	bcc.n	8010df4 <ai_platform_network_process+0x434>
 8010df0:	68e3      	ldr	r3, [r4, #12]
 8010df2:	1ad3      	subs	r3, r2, r3
 8010df4:	6063      	str	r3, [r4, #4]
 8010df6:	8833      	ldrh	r3, [r6, #0]
 8010df8:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8010dfc:	4543      	cmp	r3, r8
 8010dfe:	d913      	bls.n	8010e28 <ai_platform_network_process+0x468>
 8010e00:	6873      	ldr	r3, [r6, #4]
 8010e02:	b18b      	cbz	r3, 8010e28 <ai_platform_network_process+0x468>
 8010e04:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8010e08:	b171      	cbz	r1, 8010e28 <ai_platform_network_process+0x468>
 8010e0a:	6988      	ldr	r0, [r1, #24]
 8010e0c:	68b2      	ldr	r2, [r6, #8]
 8010e0e:	6803      	ldr	r3, [r0, #0]
 8010e10:	f8d2 9000 	ldr.w	r9, [r2]
 8010e14:	009d      	lsls	r5, r3, #2
 8010e16:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8010e1a:	d5d7      	bpl.n	8010dcc <ai_platform_network_process+0x40c>
 8010e1c:	6881      	ldr	r1, [r0, #8]
 8010e1e:	68a2      	ldr	r2, [r4, #8]
 8010e20:	6860      	ldr	r0, [r4, #4]
 8010e22:	f001 fb59 	bl	80124d8 <st_int8_copy>
 8010e26:	e7da      	b.n	8010dde <ai_platform_network_process+0x41e>
 8010e28:	4658      	mov	r0, fp
 8010e2a:	f000 f903 	bl	8011034 <ai_layers_forward_all>
 8010e2e:	2f00      	cmp	r7, #0
 8010e30:	d03d      	beq.n	8010eae <ai_platform_network_process+0x4ee>
 8010e32:	2400      	movs	r4, #0
 8010e34:	e016      	b.n	8010e64 <ai_platform_network_process+0x4a4>
 8010e36:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8010e3a:	f859 100a 	ldr.w	r1, [r9, sl]
 8010e3e:	4413      	add	r3, r2
 8010e40:	428b      	cmp	r3, r1
 8010e42:	d302      	bcc.n	8010e4a <ai_platform_network_process+0x48a>
 8010e44:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010e48:	1acb      	subs	r3, r1, r3
 8010e4a:	f8c8 3004 	str.w	r3, [r8, #4]
 8010e4e:	6981      	ldr	r1, [r0, #24]
 8010e50:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8010e54:	1b52      	subs	r2, r2, r5
 8010e56:	4413      	add	r3, r2
 8010e58:	608b      	str	r3, [r1, #8]
 8010e5a:	6983      	ldr	r3, [r0, #24]
 8010e5c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8010e60:	60da      	str	r2, [r3, #12]
 8010e62:	3401      	adds	r4, #1
 8010e64:	883b      	ldrh	r3, [r7, #0]
 8010e66:	42a3      	cmp	r3, r4
 8010e68:	d921      	bls.n	8010eae <ai_platform_network_process+0x4ee>
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	b1fb      	cbz	r3, 8010eae <ai_platform_network_process+0x4ee>
 8010e6e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8010e72:	b1e0      	cbz	r0, 8010eae <ai_platform_network_process+0x4ee>
 8010e74:	68ba      	ldr	r2, [r7, #8]
 8010e76:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8010e7a:	6983      	ldr	r3, [r0, #24]
 8010e7c:	f8d2 9000 	ldr.w	r9, [r2]
 8010e80:	681a      	ldr	r2, [r3, #0]
 8010e82:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8010e86:	0092      	lsls	r2, r2, #2
 8010e88:	d5d5      	bpl.n	8010e36 <ai_platform_network_process+0x476>
 8010e8a:	6898      	ldr	r0, [r3, #8]
 8010e8c:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 8010e90:	f001 fb22 	bl	80124d8 <st_int8_copy>
 8010e94:	f859 200a 	ldr.w	r2, [r9, sl]
 8010e98:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8010e9c:	440b      	add	r3, r1
 8010e9e:	4293      	cmp	r3, r2
 8010ea0:	d302      	bcc.n	8010ea8 <ai_platform_network_process+0x4e8>
 8010ea2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010ea6:	1ad3      	subs	r3, r2, r3
 8010ea8:	f8c8 3004 	str.w	r3, [r8, #4]
 8010eac:	e7d9      	b.n	8010e62 <ai_platform_network_process+0x4a2>
 8010eae:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 8010eb2:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 8010eb6:	3401      	adds	r4, #1
 8010eb8:	b2a4      	uxth	r4, r4
 8010eba:	42a3      	cmp	r3, r4
 8010ebc:	f8ab 4016 	strh.w	r4, [fp, #22]
 8010ec0:	f63f af7f 	bhi.w	8010dc2 <ai_platform_network_process+0x402>
 8010ec4:	4620      	mov	r0, r4
 8010ec6:	b005      	add	sp, #20
 8010ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ecc:	2a01      	cmp	r2, #1
 8010ece:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 8010ed0:	d029      	beq.n	8010f26 <ai_platform_network_process+0x566>
 8010ed2:	f106 070c 	add.w	r7, r6, #12
 8010ed6:	e770      	b.n	8010dba <ai_platform_network_process+0x3fa>
 8010ed8:	2218      	movs	r2, #24
 8010eda:	2113      	movs	r1, #19
 8010edc:	f105 0010 	add.w	r0, r5, #16
 8010ee0:	2400      	movs	r4, #0
 8010ee2:	f000 f851 	bl	8010f88 <core_set_error>
 8010ee6:	e711      	b.n	8010d0c <ai_platform_network_process+0x34c>
 8010ee8:	9d03      	ldr	r5, [sp, #12]
 8010eea:	4604      	mov	r4, r0
 8010eec:	2217      	movs	r2, #23
 8010eee:	2112      	movs	r1, #18
 8010ef0:	f105 0010 	add.w	r0, r5, #16
 8010ef4:	f000 f848 	bl	8010f88 <core_set_error>
 8010ef8:	e708      	b.n	8010d0c <ai_platform_network_process+0x34c>
 8010efa:	9d03      	ldr	r5, [sp, #12]
 8010efc:	2219      	movs	r2, #25
 8010efe:	2112      	movs	r1, #18
 8010f00:	2400      	movs	r4, #0
 8010f02:	f105 0010 	add.w	r0, r5, #16
 8010f06:	f000 f83f 	bl	8010f88 <core_set_error>
 8010f0a:	e6ff      	b.n	8010d0c <ai_platform_network_process+0x34c>
 8010f0c:	9d03      	ldr	r5, [sp, #12]
 8010f0e:	4604      	mov	r4, r0
 8010f10:	2221      	movs	r2, #33	; 0x21
 8010f12:	2112      	movs	r1, #18
 8010f14:	f105 0010 	add.w	r0, r5, #16
 8010f18:	f000 f836 	bl	8010f88 <core_set_error>
 8010f1c:	e6f6      	b.n	8010d0c <ai_platform_network_process+0x34c>
 8010f1e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8010f22:	82ab      	strh	r3, [r5, #20]
 8010f24:	e744      	b.n	8010db0 <ai_platform_network_process+0x3f0>
 8010f26:	2700      	movs	r7, #0
 8010f28:	e747      	b.n	8010dba <ai_platform_network_process+0x3fa>
 8010f2a:	4604      	mov	r4, r0
 8010f2c:	2217      	movs	r2, #23
 8010f2e:	2113      	movs	r1, #19
 8010f30:	f105 0010 	add.w	r0, r5, #16
 8010f34:	f000 f828 	bl	8010f88 <core_set_error>
 8010f38:	e6e8      	b.n	8010d0c <ai_platform_network_process+0x34c>
 8010f3a:	2219      	movs	r2, #25
 8010f3c:	2113      	movs	r1, #19
 8010f3e:	f105 0010 	add.w	r0, r5, #16
 8010f42:	2400      	movs	r4, #0
 8010f44:	f000 f820 	bl	8010f88 <core_set_error>
 8010f48:	e6e0      	b.n	8010d0c <ai_platform_network_process+0x34c>
 8010f4a:	4604      	mov	r4, r0
 8010f4c:	2221      	movs	r2, #33	; 0x21
 8010f4e:	2113      	movs	r1, #19
 8010f50:	f105 0010 	add.w	r0, r5, #16
 8010f54:	f000 f818 	bl	8010f88 <core_set_error>
 8010f58:	e6d8      	b.n	8010d0c <ai_platform_network_process+0x34c>
 8010f5a:	2217      	movs	r2, #23
 8010f5c:	2113      	movs	r1, #19
 8010f5e:	f105 0010 	add.w	r0, r5, #16
 8010f62:	4654      	mov	r4, sl
 8010f64:	f000 f810 	bl	8010f88 <core_set_error>
 8010f68:	e6d0      	b.n	8010d0c <ai_platform_network_process+0x34c>
 8010f6a:	bf00      	nop
 8010f6c:	58024000 	.word	0x58024000
 8010f70:	f407a5c2 	.word	0xf407a5c2
 8010f74:	b5e8b5cd 	.word	0xb5e8b5cd

08010f78 <core_init>:
 8010f78:	2001      	movs	r0, #1
 8010f7a:	4770      	bx	lr

08010f7c <core_get_error>:
 8010f7c:	4603      	mov	r3, r0
 8010f7e:	2200      	movs	r2, #0
 8010f80:	6800      	ldr	r0, [r0, #0]
 8010f82:	601a      	str	r2, [r3, #0]
 8010f84:	4770      	bx	lr
 8010f86:	bf00      	nop

08010f88 <core_set_error>:
 8010f88:	4603      	mov	r3, r0
 8010f8a:	7800      	ldrb	r0, [r0, #0]
 8010f8c:	b108      	cbz	r0, 8010f92 <core_set_error+0xa>
 8010f8e:	2000      	movs	r0, #0
 8010f90:	4770      	bx	lr
 8010f92:	7019      	strb	r1, [r3, #0]
 8010f94:	2001      	movs	r0, #1
 8010f96:	6819      	ldr	r1, [r3, #0]
 8010f98:	f362 211f 	bfi	r1, r2, #8, #24
 8010f9c:	6019      	str	r1, [r3, #0]
 8010f9e:	4770      	bx	lr

08010fa0 <ai_check_custom_types>:
 8010fa0:	b082      	sub	sp, #8
 8010fa2:	4b12      	ldr	r3, [pc, #72]	; (8010fec <ai_check_custom_types+0x4c>)
 8010fa4:	9301      	str	r3, [sp, #4]
 8010fa6:	b118      	cbz	r0, 8010fb0 <ai_check_custom_types+0x10>
 8010fa8:	7803      	ldrb	r3, [r0, #0]
 8010faa:	2b03      	cmp	r3, #3
 8010fac:	d002      	beq.n	8010fb4 <ai_check_custom_types+0x14>
 8010fae:	2000      	movs	r0, #0
 8010fb0:	b002      	add	sp, #8
 8010fb2:	4770      	bx	lr
 8010fb4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010fb8:	4293      	cmp	r3, r2
 8010fba:	d004      	beq.n	8010fc6 <ai_check_custom_types+0x26>
 8010fbc:	2001      	movs	r0, #1
 8010fbe:	f080 0001 	eor.w	r0, r0, #1
 8010fc2:	b002      	add	sp, #8
 8010fc4:	4770      	bx	lr
 8010fc6:	7842      	ldrb	r2, [r0, #1]
 8010fc8:	3001      	adds	r0, #1
 8010fca:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010fce:	429a      	cmp	r2, r3
 8010fd0:	d1f4      	bne.n	8010fbc <ai_check_custom_types+0x1c>
 8010fd2:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8010fd6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010fda:	429a      	cmp	r2, r3
 8010fdc:	d1ee      	bne.n	8010fbc <ai_check_custom_types+0x1c>
 8010fde:	7842      	ldrb	r2, [r0, #1]
 8010fe0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010fe4:	429a      	cmp	r2, r3
 8010fe6:	d1e9      	bne.n	8010fbc <ai_check_custom_types+0x1c>
 8010fe8:	2000      	movs	r0, #0
 8010fea:	e7e8      	b.n	8010fbe <ai_check_custom_types+0x1e>
 8010fec:	84048403 	.word	0x84048403

08010ff0 <ai_layers_init_all>:
 8010ff0:	2100      	movs	r1, #0
 8010ff2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010ff4:	b13b      	cbz	r3, 8011006 <ai_layers_init_all+0x16>
 8010ff6:	691a      	ldr	r2, [r3, #16]
 8010ff8:	3101      	adds	r1, #1
 8010ffa:	60d8      	str	r0, [r3, #12]
 8010ffc:	429a      	cmp	r2, r3
 8010ffe:	4613      	mov	r3, r2
 8011000:	d001      	beq.n	8011006 <ai_layers_init_all+0x16>
 8011002:	2a00      	cmp	r2, #0
 8011004:	d1f6      	bne.n	8010ff4 <ai_layers_init_all+0x4>
 8011006:	4608      	mov	r0, r1
 8011008:	4770      	bx	lr
 801100a:	bf00      	nop

0801100c <ai_layers_post_init_all>:
 801100c:	b538      	push	{r3, r4, r5, lr}
 801100e:	2500      	movs	r5, #0
 8011010:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8011012:	b16c      	cbz	r4, 8011030 <ai_layers_post_init_all+0x24>
 8011014:	6863      	ldr	r3, [r4, #4]
 8011016:	07db      	lsls	r3, r3, #31
 8011018:	d504      	bpl.n	8011024 <ai_layers_post_init_all+0x18>
 801101a:	6a23      	ldr	r3, [r4, #32]
 801101c:	4620      	mov	r0, r4
 801101e:	b10b      	cbz	r3, 8011024 <ai_layers_post_init_all+0x18>
 8011020:	3501      	adds	r5, #1
 8011022:	4798      	blx	r3
 8011024:	6923      	ldr	r3, [r4, #16]
 8011026:	42a3      	cmp	r3, r4
 8011028:	461c      	mov	r4, r3
 801102a:	d001      	beq.n	8011030 <ai_layers_post_init_all+0x24>
 801102c:	2b00      	cmp	r3, #0
 801102e:	d1f0      	bne.n	8011012 <ai_layers_post_init_all+0x6>
 8011030:	4628      	mov	r0, r5
 8011032:	bd38      	pop	{r3, r4, r5, pc}

08011034 <ai_layers_forward_all>:
 8011034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011038:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 801103c:	4604      	mov	r4, r0
 801103e:	f1b8 0f00 	cmp.w	r8, #0
 8011042:	d02a      	beq.n	801109a <ai_layers_forward_all+0x66>
 8011044:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8011046:	6381      	str	r1, [r0, #56]	; 0x38
 8011048:	b319      	cbz	r1, 8011092 <ai_layers_forward_all+0x5e>
 801104a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 801104c:	2001      	movs	r0, #1
 801104e:	47c0      	blx	r8
 8011050:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8011052:	b1f6      	cbz	r6, 8011092 <ai_layers_forward_all+0x5e>
 8011054:	2700      	movs	r7, #0
 8011056:	4631      	mov	r1, r6
 8011058:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801105a:	2002      	movs	r0, #2
 801105c:	47c0      	blx	r8
 801105e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8011060:	4628      	mov	r0, r5
 8011062:	696b      	ldr	r3, [r5, #20]
 8011064:	4798      	blx	r3
 8011066:	692e      	ldr	r6, [r5, #16]
 8011068:	2003      	movs	r0, #3
 801106a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801106c:	42b5      	cmp	r5, r6
 801106e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8011070:	d007      	beq.n	8011082 <ai_layers_forward_all+0x4e>
 8011072:	47c0      	blx	r8
 8011074:	3701      	adds	r7, #1
 8011076:	63a6      	str	r6, [r4, #56]	; 0x38
 8011078:	2e00      	cmp	r6, #0
 801107a:	d1ec      	bne.n	8011056 <ai_layers_forward_all+0x22>
 801107c:	4638      	mov	r0, r7
 801107e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011082:	2003      	movs	r0, #3
 8011084:	3701      	adds	r7, #1
 8011086:	47c0      	blx	r8
 8011088:	2300      	movs	r3, #0
 801108a:	4638      	mov	r0, r7
 801108c:	63a3      	str	r3, [r4, #56]	; 0x38
 801108e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011092:	2700      	movs	r7, #0
 8011094:	4638      	mov	r0, r7
 8011096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801109a:	6b45      	ldr	r5, [r0, #52]	; 0x34
 801109c:	6385      	str	r5, [r0, #56]	; 0x38
 801109e:	2d00      	cmp	r5, #0
 80110a0:	d0f7      	beq.n	8011092 <ai_layers_forward_all+0x5e>
 80110a2:	4647      	mov	r7, r8
 80110a4:	696b      	ldr	r3, [r5, #20]
 80110a6:	4628      	mov	r0, r5
 80110a8:	4798      	blx	r3
 80110aa:	462b      	mov	r3, r5
 80110ac:	692d      	ldr	r5, [r5, #16]
 80110ae:	429d      	cmp	r5, r3
 80110b0:	d004      	beq.n	80110bc <ai_layers_forward_all+0x88>
 80110b2:	3701      	adds	r7, #1
 80110b4:	63a5      	str	r5, [r4, #56]	; 0x38
 80110b6:	2d00      	cmp	r5, #0
 80110b8:	d1f4      	bne.n	80110a4 <ai_layers_forward_all+0x70>
 80110ba:	e7df      	b.n	801107c <ai_layers_forward_all+0x48>
 80110bc:	2300      	movs	r3, #0
 80110be:	3701      	adds	r7, #1
 80110c0:	63a3      	str	r3, [r4, #56]	; 0x38
 80110c2:	e7db      	b.n	801107c <ai_layers_forward_all+0x48>

080110c4 <ai_dict_decompress_f32>:
 80110c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80110c8:	9d08      	ldr	r5, [sp, #32]
 80110ca:	2b04      	cmp	r3, #4
 80110cc:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80110d0:	d00e      	beq.n	80110f0 <ai_dict_decompress_f32+0x2c>
 80110d2:	2b08      	cmp	r3, #8
 80110d4:	d10a      	bne.n	80110ec <ai_dict_decompress_f32+0x28>
 80110d6:	42a8      	cmp	r0, r5
 80110d8:	d208      	bcs.n	80110ec <ai_dict_decompress_f32+0x28>
 80110da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80110de:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80110e2:	681b      	ldr	r3, [r3, #0]
 80110e4:	f840 3b04 	str.w	r3, [r0], #4
 80110e8:	4285      	cmp	r5, r0
 80110ea:	d8f6      	bhi.n	80110da <ai_dict_decompress_f32+0x16>
 80110ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80110f0:	9b07      	ldr	r3, [sp, #28]
 80110f2:	085e      	lsrs	r6, r3, #1
 80110f4:	f003 0701 	and.w	r7, r3, #1
 80110f8:	ea4f 09c6 	mov.w	r9, r6, lsl #3
 80110fc:	f106 38ff 	add.w	r8, r6, #4294967295
 8011100:	42a8      	cmp	r0, r5
 8011102:	d2f3      	bcs.n	80110ec <ai_dict_decompress_f32+0x28>
 8011104:	b33e      	cbz	r6, 8011156 <ai_dict_decompress_f32+0x92>
 8011106:	f100 0e08 	add.w	lr, r0, #8
 801110a:	f101 3cff 	add.w	ip, r1, #4294967295
 801110e:	eb01 0408 	add.w	r4, r1, r8
 8011112:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 8011116:	f10e 0e08 	add.w	lr, lr, #8
 801111a:	091b      	lsrs	r3, r3, #4
 801111c:	4564      	cmp	r4, ip
 801111e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011122:	681b      	ldr	r3, [r3, #0]
 8011124:	f84e 3c10 	str.w	r3, [lr, #-16]
 8011128:	f89c 3000 	ldrb.w	r3, [ip]
 801112c:	f003 030f 	and.w	r3, r3, #15
 8011130:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011134:	681b      	ldr	r3, [r3, #0]
 8011136:	f84e 3c0c 	str.w	r3, [lr, #-12]
 801113a:	d1ea      	bne.n	8011112 <ai_dict_decompress_f32+0x4e>
 801113c:	4431      	add	r1, r6
 801113e:	4448      	add	r0, r9
 8011140:	2f00      	cmp	r7, #0
 8011142:	d0dd      	beq.n	8011100 <ai_dict_decompress_f32+0x3c>
 8011144:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011148:	091b      	lsrs	r3, r3, #4
 801114a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801114e:	681b      	ldr	r3, [r3, #0]
 8011150:	f840 3b04 	str.w	r3, [r0], #4
 8011154:	e7d4      	b.n	8011100 <ai_dict_decompress_f32+0x3c>
 8011156:	2f00      	cmp	r7, #0
 8011158:	d1f4      	bne.n	8011144 <ai_dict_decompress_f32+0x80>
 801115a:	42a8      	cmp	r0, r5
 801115c:	d3fd      	bcc.n	801115a <ai_dict_decompress_f32+0x96>
 801115e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011162:	bf00      	nop

08011164 <forward_conv2d_if32of32wf32>:
 8011164:	6982      	ldr	r2, [r0, #24]
 8011166:	8813      	ldrh	r3, [r2, #0]
 8011168:	2b00      	cmp	r3, #0
 801116a:	f000 8092 	beq.w	8011292 <forward_conv2d_if32of32wf32+0x12e>
 801116e:	f8d2 c004 	ldr.w	ip, [r2, #4]
 8011172:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8011176:	b102      	cbz	r2, 801117a <forward_conv2d_if32of32wf32+0x16>
 8011178:	6812      	ldr	r2, [r2, #0]
 801117a:	2b01      	cmp	r3, #1
 801117c:	f000 80b3 	beq.w	80112e6 <forward_conv2d_if32of32wf32+0x182>
 8011180:	f8dc 1010 	ldr.w	r1, [ip, #16]
 8011184:	b101      	cbz	r1, 8011188 <forward_conv2d_if32of32wf32+0x24>
 8011186:	6809      	ldr	r1, [r1, #0]
 8011188:	2b02      	cmp	r3, #2
 801118a:	f000 8084 	beq.w	8011296 <forward_conv2d_if32of32wf32+0x132>
 801118e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011192:	f8dc 601c 	ldr.w	r6, [ip, #28]
 8011196:	b0a1      	sub	sp, #132	; 0x84
 8011198:	2e00      	cmp	r6, #0
 801119a:	f000 809d 	beq.w	80112d8 <forward_conv2d_if32of32wf32+0x174>
 801119e:	f8bc 5018 	ldrh.w	r5, [ip, #24]
 80111a2:	6834      	ldr	r4, [r6, #0]
 80111a4:	2d01      	cmp	r5, #1
 80111a6:	f240 8099 	bls.w	80112dc <forward_conv2d_if32of32wf32+0x178>
 80111aa:	6876      	ldr	r6, [r6, #4]
 80111ac:	f8d2 800c 	ldr.w	r8, [r2, #12]
 80111b0:	f8d1 900c 	ldr.w	r9, [r1, #12]
 80111b4:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80111b8:	6992      	ldr	r2, [r2, #24]
 80111ba:	9713      	str	r7, [sp, #76]	; 0x4c
 80111bc:	f8d9 7004 	ldr.w	r7, [r9, #4]
 80111c0:	f8d0 e03c 	ldr.w	lr, [r0, #60]	; 0x3c
 80111c4:	9714      	str	r7, [sp, #80]	; 0x50
 80111c6:	f8d9 700c 	ldr.w	r7, [r9, #12]
 80111ca:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 80111ce:	9715      	str	r7, [sp, #84]	; 0x54
 80111d0:	f8d9 7008 	ldr.w	r7, [r9, #8]
 80111d4:	f8d2 b008 	ldr.w	fp, [r2, #8]
 80111d8:	9716      	str	r7, [sp, #88]	; 0x58
 80111da:	f8d8 700c 	ldr.w	r7, [r8, #12]
 80111de:	69a2      	ldr	r2, [r4, #24]
 80111e0:	9717      	str	r7, [sp, #92]	; 0x5c
 80111e2:	f8d8 7008 	ldr.w	r7, [r8, #8]
 80111e6:	9718      	str	r7, [sp, #96]	; 0x60
 80111e8:	8d07      	ldrh	r7, [r0, #40]	; 0x28
 80111ea:	e9d0 540c 	ldrd	r5, r4, [r0, #48]	; 0x30
 80111ee:	9719      	str	r7, [sp, #100]	; 0x64
 80111f0:	8d87      	ldrh	r7, [r0, #44]	; 0x2c
 80111f2:	69c0      	ldr	r0, [r0, #28]
 80111f4:	971a      	str	r7, [sp, #104]	; 0x68
 80111f6:	901f      	str	r0, [sp, #124]	; 0x7c
 80111f8:	f8be 0000 	ldrh.w	r0, [lr]
 80111fc:	901b      	str	r0, [sp, #108]	; 0x6c
 80111fe:	f8be 0004 	ldrh.w	r0, [lr, #4]
 8011202:	901c      	str	r0, [sp, #112]	; 0x70
 8011204:	b2a8      	uxth	r0, r5
 8011206:	901d      	str	r0, [sp, #116]	; 0x74
 8011208:	b2a0      	uxth	r0, r4
 801120a:	901e      	str	r0, [sp, #120]	; 0x78
 801120c:	f8d2 9008 	ldr.w	r9, [r2, #8]
 8011210:	e9da 7801 	ldrd	r7, r8, [sl, #4]
 8011214:	b10e      	cbz	r6, 801121a <forward_conv2d_if32of32wf32+0xb6>
 8011216:	69b0      	ldr	r0, [r6, #24]
 8011218:	6886      	ldr	r6, [r0, #8]
 801121a:	b2a4      	uxth	r4, r4
 801121c:	6989      	ldr	r1, [r1, #24]
 801121e:	f108 30ff 	add.w	r0, r8, #4294967295
 8011222:	b2ad      	uxth	r5, r5
 8011224:	3c01      	subs	r4, #1
 8011226:	f8d1 a008 	ldr.w	sl, [r1, #8]
 801122a:	3d01      	subs	r5, #1
 801122c:	6811      	ldr	r1, [r2, #0]
 801122e:	fb00 8404 	mla	r4, r0, r4, r8
 8011232:	1e78      	subs	r0, r7, #1
 8011234:	fb00 7505 	mla	r5, r0, r5, r7
 8011238:	f3c1 4043 	ubfx	r0, r1, #17, #4
 801123c:	2804      	cmp	r0, #4
 801123e:	d02d      	beq.n	801129c <forward_conv2d_if32of32wf32+0x138>
 8011240:	2808      	cmp	r0, #8
 8011242:	d02b      	beq.n	801129c <forward_conv2d_if32of32wf32+0x138>
 8011244:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011246:	464a      	mov	r2, r9
 8011248:	940c      	str	r4, [sp, #48]	; 0x30
 801124a:	4651      	mov	r1, sl
 801124c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 801124e:	4658      	mov	r0, fp
 8011250:	9706      	str	r7, [sp, #24]
 8011252:	940f      	str	r4, [sp, #60]	; 0x3c
 8011254:	e9cd 530d 	strd	r5, r3, [sp, #52]	; 0x34
 8011258:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801125a:	930b      	str	r3, [sp, #44]	; 0x2c
 801125c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801125e:	930a      	str	r3, [sp, #40]	; 0x28
 8011260:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011262:	9309      	str	r3, [sp, #36]	; 0x24
 8011264:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8011266:	e9cd 8307 	strd	r8, r3, [sp, #28]
 801126a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801126c:	9305      	str	r3, [sp, #20]
 801126e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011270:	9304      	str	r3, [sp, #16]
 8011272:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011274:	9303      	str	r3, [sp, #12]
 8011276:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8011278:	9302      	str	r3, [sp, #8]
 801127a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801127c:	9301      	str	r3, [sp, #4]
 801127e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011280:	9300      	str	r3, [sp, #0]
 8011282:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011284:	9310      	str	r3, [sp, #64]	; 0x40
 8011286:	4633      	mov	r3, r6
 8011288:	f000 fe9e 	bl	8011fc8 <forward_lite_conv2d_if32of32wf32>
 801128c:	b021      	add	sp, #132	; 0x84
 801128e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011292:	685b      	ldr	r3, [r3, #4]
 8011294:	deff      	udf	#255	; 0xff
 8011296:	2300      	movs	r3, #0
 8011298:	685b      	ldr	r3, [r3, #4]
 801129a:	deff      	udf	#255	; 0xff
 801129c:	68d2      	ldr	r2, [r2, #12]
 801129e:	2a00      	cmp	r2, #0
 80112a0:	d0d0      	beq.n	8011244 <forward_conv2d_if32of32wf32+0xe0>
 80112a2:	2b03      	cmp	r3, #3
 80112a4:	d022      	beq.n	80112ec <forward_conv2d_if32of32wf32+0x188>
 80112a6:	f8dc 3028 	ldr.w	r3, [ip, #40]	; 0x28
 80112aa:	b1cb      	cbz	r3, 80112e0 <forward_conv2d_if32of32wf32+0x17c>
 80112ac:	681b      	ldr	r3, [r3, #0]
 80112ae:	b1bb      	cbz	r3, 80112e0 <forward_conv2d_if32of32wf32+0x17c>
 80112b0:	f8d3 c018 	ldr.w	ip, [r3, #24]
 80112b4:	f3c1 13c6 	ubfx	r3, r1, #7, #7
 80112b8:	f3c1 5141 	ubfx	r1, r1, #21, #2
 80112bc:	410b      	asrs	r3, r1
 80112be:	e9dc 1001 	ldrd	r1, r0, [ip, #4]
 80112c2:	b29b      	uxth	r3, r3
 80112c4:	9101      	str	r1, [sp, #4]
 80112c6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80112c8:	9100      	str	r1, [sp, #0]
 80112ca:	4649      	mov	r1, r9
 80112cc:	2800      	cmp	r0, #0
 80112ce:	bf18      	it	ne
 80112d0:	4681      	movne	r9, r0
 80112d2:	f7ff fef7 	bl	80110c4 <ai_dict_decompress_f32>
 80112d6:	e7b5      	b.n	8011244 <forward_conv2d_if32of32wf32+0xe0>
 80112d8:	4634      	mov	r4, r6
 80112da:	e767      	b.n	80111ac <forward_conv2d_if32of32wf32+0x48>
 80112dc:	2600      	movs	r6, #0
 80112de:	e765      	b.n	80111ac <forward_conv2d_if32of32wf32+0x48>
 80112e0:	2300      	movs	r3, #0
 80112e2:	699b      	ldr	r3, [r3, #24]
 80112e4:	deff      	udf	#255	; 0xff
 80112e6:	2300      	movs	r3, #0
 80112e8:	685b      	ldr	r3, [r3, #4]
 80112ea:	deff      	udf	#255	; 0xff
 80112ec:	2300      	movs	r3, #0
 80112ee:	685b      	ldr	r3, [r3, #4]
 80112f0:	deff      	udf	#255	; 0xff
 80112f2:	bf00      	nop

080112f4 <forward_dense>:
 80112f4:	6983      	ldr	r3, [r0, #24]
 80112f6:	881a      	ldrh	r2, [r3, #0]
 80112f8:	2a00      	cmp	r2, #0
 80112fa:	f000 80f0 	beq.w	80114de <forward_dense+0x1ea>
 80112fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011302:	ed2d 8b02 	vpush	{d8}
 8011306:	6858      	ldr	r0, [r3, #4]
 8011308:	b09b      	sub	sp, #108	; 0x6c
 801130a:	6845      	ldr	r5, [r0, #4]
 801130c:	b105      	cbz	r5, 8011310 <forward_dense+0x1c>
 801130e:	682d      	ldr	r5, [r5, #0]
 8011310:	2a01      	cmp	r2, #1
 8011312:	f000 840a 	beq.w	8011b2a <forward_dense+0x836>
 8011316:	6906      	ldr	r6, [r0, #16]
 8011318:	b106      	cbz	r6, 801131c <forward_dense+0x28>
 801131a:	6836      	ldr	r6, [r6, #0]
 801131c:	2a02      	cmp	r2, #2
 801131e:	f000 80e0 	beq.w	80114e2 <forward_dense+0x1ee>
 8011322:	69c3      	ldr	r3, [r0, #28]
 8011324:	930d      	str	r3, [sp, #52]	; 0x34
 8011326:	2b00      	cmp	r3, #0
 8011328:	f000 83f1 	beq.w	8011b0e <forward_dense+0x81a>
 801132c:	4619      	mov	r1, r3
 801132e:	8b03      	ldrh	r3, [r0, #24]
 8011330:	6809      	ldr	r1, [r1, #0]
 8011332:	2b01      	cmp	r3, #1
 8011334:	910f      	str	r1, [sp, #60]	; 0x3c
 8011336:	f240 83ec 	bls.w	8011b12 <forward_dense+0x81e>
 801133a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801133c:	685b      	ldr	r3, [r3, #4]
 801133e:	930d      	str	r3, [sp, #52]	; 0x34
 8011340:	460b      	mov	r3, r1
 8011342:	f8d3 8018 	ldr.w	r8, [r3, #24]
 8011346:	2a03      	cmp	r2, #3
 8011348:	68eb      	ldr	r3, [r5, #12]
 801134a:	68f7      	ldr	r7, [r6, #12]
 801134c:	685b      	ldr	r3, [r3, #4]
 801134e:	687c      	ldr	r4, [r7, #4]
 8011350:	9317      	str	r3, [sp, #92]	; 0x5c
 8011352:	f8d8 3000 	ldr.w	r3, [r8]
 8011356:	4621      	mov	r1, r4
 8011358:	9419      	str	r4, [sp, #100]	; 0x64
 801135a:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 801135e:	f3c3 5c41 	ubfx	ip, r3, #21, #2
 8011362:	e9d7 4702 	ldrd	r4, r7, [r7, #8]
 8011366:	fb01 f404 	mul.w	r4, r1, r4
 801136a:	fa4e f10c 	asr.w	r1, lr, ip
 801136e:	9116      	str	r1, [sp, #88]	; 0x58
 8011370:	f000 83d8 	beq.w	8011b24 <forward_dense+0x830>
 8011374:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8011376:	f3c3 4343 	ubfx	r3, r3, #17, #4
 801137a:	2a00      	cmp	r2, #0
 801137c:	f000 83c2 	beq.w	8011b04 <forward_dense+0x810>
 8011380:	6812      	ldr	r2, [r2, #0]
 8011382:	2a00      	cmp	r2, #0
 8011384:	f000 83be 	beq.w	8011b04 <forward_dense+0x810>
 8011388:	2b04      	cmp	r3, #4
 801138a:	f8d2 9018 	ldr.w	r9, [r2, #24]
 801138e:	f000 83a8 	beq.w	8011ae2 <forward_dense+0x7ee>
 8011392:	2b08      	cmp	r3, #8
 8011394:	f000 83a5 	beq.w	8011ae2 <forward_dense+0x7ee>
 8011398:	f04f 0a00 	mov.w	sl, #0
 801139c:	69ab      	ldr	r3, [r5, #24]
 801139e:	fb07 f404 	mul.w	r4, r7, r4
 80113a2:	69b2      	ldr	r2, [r6, #24]
 80113a4:	f8d3 9008 	ldr.w	r9, [r3, #8]
 80113a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80113aa:	6892      	ldr	r2, [r2, #8]
 80113ac:	695b      	ldr	r3, [r3, #20]
 80113ae:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 80113b2:	9206      	str	r2, [sp, #24]
 80113b4:	685b      	ldr	r3, [r3, #4]
 80113b6:	428a      	cmp	r2, r1
 80113b8:	9110      	str	r1, [sp, #64]	; 0x40
 80113ba:	9304      	str	r3, [sp, #16]
 80113bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80113be:	ea4f 0083 	mov.w	r0, r3, lsl #2
 80113c2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80113c6:	900e      	str	r0, [sp, #56]	; 0x38
 80113c8:	9303      	str	r3, [sp, #12]
 80113ca:	f080 8380 	bcs.w	8011ace <forward_dense+0x7da>
 80113ce:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80113d0:	4654      	mov	r4, sl
 80113d2:	4bb9      	ldr	r3, [pc, #740]	; (80116b8 <forward_dense+0x3c4>)
 80113d4:	46ca      	mov	sl, r9
 80113d6:	08d0      	lsrs	r0, r2, #3
 80113d8:	ed9f 8ab8 	vldr	s16, [pc, #736]	; 80116bc <forward_dense+0x3c8>
 80113dc:	4413      	add	r3, r2
 80113de:	9009      	str	r0, [sp, #36]	; 0x24
 80113e0:	0099      	lsls	r1, r3, #2
 80113e2:	f022 0301 	bic.w	r3, r2, #1
 80113e6:	f002 0201 	and.w	r2, r2, #1
 80113ea:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 80113ee:	9118      	str	r1, [sp, #96]	; 0x60
 80113f0:	920a      	str	r2, [sp, #40]	; 0x28
 80113f2:	eb09 1240 	add.w	r2, r9, r0, lsl #5
 80113f6:	9305      	str	r3, [sp, #20]
 80113f8:	f101 0320 	add.w	r3, r1, #32
 80113fc:	9207      	str	r2, [sp, #28]
 80113fe:	9311      	str	r3, [sp, #68]	; 0x44
 8011400:	444b      	add	r3, r9
 8011402:	469b      	mov	fp, r3
 8011404:	930b      	str	r3, [sp, #44]	; 0x2c
 8011406:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011408:	699b      	ldr	r3, [r3, #24]
 801140a:	689a      	ldr	r2, [r3, #8]
 801140c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801140e:	b10b      	cbz	r3, 8011414 <forward_dense+0x120>
 8011410:	699b      	ldr	r3, [r3, #24]
 8011412:	689b      	ldr	r3, [r3, #8]
 8011414:	2c00      	cmp	r4, #0
 8011416:	f000 834b 	beq.w	8011ab0 <forward_dense+0x7bc>
 801141a:	9916      	ldr	r1, [sp, #88]	; 0x58
 801141c:	2904      	cmp	r1, #4
 801141e:	f000 826a 	beq.w	80118f6 <forward_dense+0x602>
 8011422:	9903      	ldr	r1, [sp, #12]
 8011424:	9806      	ldr	r0, [sp, #24]
 8011426:	4281      	cmp	r1, r0
 8011428:	f240 8356 	bls.w	8011ad8 <forward_dense+0x7e4>
 801142c:	4686      	mov	lr, r0
 801142e:	9818      	ldr	r0, [sp, #96]	; 0x60
 8011430:	eb00 090a 	add.w	r9, r0, sl
 8011434:	0941      	lsrs	r1, r0, #5
 8011436:	f10a 0004 	add.w	r0, sl, #4
 801143a:	f8cd 9020 	str.w	r9, [sp, #32]
 801143e:	9012      	str	r0, [sp, #72]	; 0x48
 8011440:	1c48      	adds	r0, r1, #1
 8011442:	00c9      	lsls	r1, r1, #3
 8011444:	3110      	adds	r1, #16
 8011446:	9115      	str	r1, [sp, #84]	; 0x54
 8011448:	00c1      	lsls	r1, r0, #3
 801144a:	9113      	str	r1, [sp, #76]	; 0x4c
 801144c:	eb0a 1140 	add.w	r1, sl, r0, lsl #5
 8011450:	9114      	str	r1, [sp, #80]	; 0x50
 8011452:	f1a9 0104 	sub.w	r1, r9, #4
 8011456:	f8dd 905c 	ldr.w	r9, [sp, #92]	; 0x5c
 801145a:	910c      	str	r1, [sp, #48]	; 0x30
 801145c:	2b00      	cmp	r3, #0
 801145e:	f000 8128 	beq.w	80116b2 <forward_dense+0x3be>
 8011462:	ecb3 5a01 	vldmia	r3!, {s10}
 8011466:	f1b9 0f07 	cmp.w	r9, #7
 801146a:	d83d      	bhi.n	80114e8 <forward_dense+0x1f4>
 801146c:	45da      	cmp	sl, fp
 801146e:	d211      	bcs.n	8011494 <forward_dense+0x1a0>
 8011470:	eddf 7a92 	vldr	s15, [pc, #584]	; 80116bc <forward_dense+0x3c8>
 8011474:	4650      	mov	r0, sl
 8011476:	4615      	mov	r5, r2
 8011478:	f815 1b01 	ldrb.w	r1, [r5], #1
 801147c:	ecb0 7a01 	vldmia	r0!, {s14}
 8011480:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8011484:	4558      	cmp	r0, fp
 8011486:	edd1 6a00 	vldr	s13, [r1]
 801148a:	eee6 7a87 	vfma.f32	s15, s13, s14
 801148e:	d3f3      	bcc.n	8011478 <forward_dense+0x184>
 8011490:	ee35 5a27 	vadd.f32	s10, s10, s15
 8011494:	9904      	ldr	r1, [sp, #16]
 8011496:	ecae 5a01 	vstmia	lr!, {s10}
 801149a:	440a      	add	r2, r1
 801149c:	9903      	ldr	r1, [sp, #12]
 801149e:	458e      	cmp	lr, r1
 80114a0:	d3dc      	bcc.n	801145c <forward_dense+0x168>
 80114a2:	9a06      	ldr	r2, [sp, #24]
 80114a4:	1a8b      	subs	r3, r1, r2
 80114a6:	3b01      	subs	r3, #1
 80114a8:	f023 0303 	bic.w	r3, r3, #3
 80114ac:	3304      	adds	r3, #4
 80114ae:	18d3      	adds	r3, r2, r3
 80114b0:	4619      	mov	r1, r3
 80114b2:	9306      	str	r3, [sp, #24]
 80114b4:	9b03      	ldr	r3, [sp, #12]
 80114b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80114b8:	9810      	ldr	r0, [sp, #64]	; 0x40
 80114ba:	4413      	add	r3, r2
 80114bc:	9a07      	ldr	r2, [sp, #28]
 80114be:	4281      	cmp	r1, r0
 80114c0:	9303      	str	r3, [sp, #12]
 80114c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80114c4:	441a      	add	r2, r3
 80114c6:	449b      	add	fp, r3
 80114c8:	9207      	str	r2, [sp, #28]
 80114ca:	9a05      	ldr	r2, [sp, #20]
 80114cc:	441a      	add	r2, r3
 80114ce:	9205      	str	r2, [sp, #20]
 80114d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80114d2:	4692      	mov	sl, r2
 80114d4:	f080 82fb 	bcs.w	8011ace <forward_dense+0x7da>
 80114d8:	441a      	add	r2, r3
 80114da:	920b      	str	r2, [sp, #44]	; 0x2c
 80114dc:	e793      	b.n	8011406 <forward_dense+0x112>
 80114de:	6853      	ldr	r3, [r2, #4]
 80114e0:	deff      	udf	#255	; 0xff
 80114e2:	2300      	movs	r3, #0
 80114e4:	685b      	ldr	r3, [r3, #4]
 80114e6:	deff      	udf	#255	; 0xff
 80114e8:	f002 0103 	and.w	r1, r2, #3
 80114ec:	2902      	cmp	r1, #2
 80114ee:	f000 81e6 	beq.w	80118be <forward_dense+0x5ca>
 80114f2:	2903      	cmp	r1, #3
 80114f4:	f000 80e4 	beq.w	80116c0 <forward_dense+0x3cc>
 80114f8:	2901      	cmp	r1, #1
 80114fa:	f000 81ef 	beq.w	80118dc <forward_dense+0x5e8>
 80114fe:	9908      	ldr	r1, [sp, #32]
 8011500:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 80116bc <forward_dense+0x3c8>
 8011504:	458a      	cmp	sl, r1
 8011506:	f200 82e9 	bhi.w	8011adc <forward_dense+0x7e8>
 801150a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801150c:	f102 0108 	add.w	r1, r2, #8
 8011510:	f10a 0020 	add.w	r0, sl, #32
 8011514:	18ae      	adds	r6, r5, r2
 8011516:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 801151a:	3108      	adds	r1, #8
 801151c:	ed50 2a07 	vldr	s5, [r0, #-28]	; 0xffffffe4
 8011520:	3020      	adds	r0, #32
 8011522:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8011526:	ed10 3a10 	vldr	s6, [r0, #-64]	; 0xffffffc0
 801152a:	ed50 3a0e 	vldr	s7, [r0, #-56]	; 0xffffffc8
 801152e:	edd5 7a00 	vldr	s15, [r5]
 8011532:	f811 5c10 	ldrb.w	r5, [r1, #-16]
 8011536:	ee67 7aa2 	vmul.f32	s15, s15, s5
 801153a:	ed10 4a0d 	vldr	s8, [r0, #-52]	; 0xffffffcc
 801153e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8011542:	ed50 4a0c 	vldr	s9, [r0, #-48]	; 0xffffffd0
 8011546:	ed50 5a0b 	vldr	s11, [r0, #-44]	; 0xffffffd4
 801154a:	edd5 2a00 	vldr	s5, [r5]
 801154e:	f811 5c0e 	ldrb.w	r5, [r1, #-14]
 8011552:	eee2 7a83 	vfma.f32	s15, s5, s6
 8011556:	ed10 6a0a 	vldr	s12, [r0, #-40]	; 0xffffffd8
 801155a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 801155e:	ed50 6a09 	vldr	s13, [r0, #-36]	; 0xffffffdc
 8011562:	ed95 3a00 	vldr	s6, [r5]
 8011566:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 801156a:	eee3 7a23 	vfma.f32	s15, s6, s7
 801156e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8011572:	edd5 3a00 	vldr	s7, [r5]
 8011576:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 801157a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 801157e:	eee3 7a84 	vfma.f32	s15, s7, s8
 8011582:	ed95 4a00 	vldr	s8, [r5]
 8011586:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 801158a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 801158e:	eee4 7a24 	vfma.f32	s15, s8, s9
 8011592:	edd5 4a00 	vldr	s9, [r5]
 8011596:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 801159a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 801159e:	eee4 7aa5 	vfma.f32	s15, s9, s11
 80115a2:	edd5 5a00 	vldr	s11, [r5]
 80115a6:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 80115aa:	428e      	cmp	r6, r1
 80115ac:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80115b0:	eee5 7a86 	vfma.f32	s15, s11, s12
 80115b4:	ed95 6a00 	vldr	s12, [r5]
 80115b8:	eee6 7a26 	vfma.f32	s15, s12, s13
 80115bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80115c0:	d1a9      	bne.n	8011516 <forward_dense+0x222>
 80115c2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80115c4:	1850      	adds	r0, r2, r1
 80115c6:	9914      	ldr	r1, [sp, #80]	; 0x50
 80115c8:	4559      	cmp	r1, fp
 80115ca:	d26f      	bcs.n	80116ac <forward_dense+0x3b8>
 80115cc:	7805      	ldrb	r5, [r0, #0]
 80115ce:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80115d2:	edd5 7a00 	vldr	s15, [r5]
 80115d6:	460d      	mov	r5, r1
 80115d8:	ecf5 6a01 	vldmia	r5!, {s13}
 80115dc:	45ab      	cmp	fp, r5
 80115de:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80115e2:	d963      	bls.n	80116ac <forward_dense+0x3b8>
 80115e4:	7845      	ldrb	r5, [r0, #1]
 80115e6:	edd1 6a01 	vldr	s13, [r1, #4]
 80115ea:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80115ee:	edd5 7a00 	vldr	s15, [r5]
 80115f2:	f101 0508 	add.w	r5, r1, #8
 80115f6:	45ab      	cmp	fp, r5
 80115f8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80115fc:	d956      	bls.n	80116ac <forward_dense+0x3b8>
 80115fe:	7885      	ldrb	r5, [r0, #2]
 8011600:	edd1 6a02 	vldr	s13, [r1, #8]
 8011604:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8011608:	edd5 7a00 	vldr	s15, [r5]
 801160c:	f101 050c 	add.w	r5, r1, #12
 8011610:	45ab      	cmp	fp, r5
 8011612:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011616:	d949      	bls.n	80116ac <forward_dense+0x3b8>
 8011618:	78c5      	ldrb	r5, [r0, #3]
 801161a:	edd1 6a03 	vldr	s13, [r1, #12]
 801161e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8011622:	edd5 7a00 	vldr	s15, [r5]
 8011626:	f101 0510 	add.w	r5, r1, #16
 801162a:	45ab      	cmp	fp, r5
 801162c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011630:	d93c      	bls.n	80116ac <forward_dense+0x3b8>
 8011632:	7905      	ldrb	r5, [r0, #4]
 8011634:	edd1 6a04 	vldr	s13, [r1, #16]
 8011638:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 801163c:	edd5 7a00 	vldr	s15, [r5]
 8011640:	f101 0514 	add.w	r5, r1, #20
 8011644:	45ab      	cmp	fp, r5
 8011646:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801164a:	d92f      	bls.n	80116ac <forward_dense+0x3b8>
 801164c:	7945      	ldrb	r5, [r0, #5]
 801164e:	edd1 6a05 	vldr	s13, [r1, #20]
 8011652:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8011656:	edd5 7a00 	vldr	s15, [r5]
 801165a:	f101 0518 	add.w	r5, r1, #24
 801165e:	45ab      	cmp	fp, r5
 8011660:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011664:	d922      	bls.n	80116ac <forward_dense+0x3b8>
 8011666:	7985      	ldrb	r5, [r0, #6]
 8011668:	edd1 6a06 	vldr	s13, [r1, #24]
 801166c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8011670:	edd5 7a00 	vldr	s15, [r5]
 8011674:	f101 051c 	add.w	r5, r1, #28
 8011678:	45ab      	cmp	fp, r5
 801167a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801167e:	d915      	bls.n	80116ac <forward_dense+0x3b8>
 8011680:	79c5      	ldrb	r5, [r0, #7]
 8011682:	edd1 6a07 	vldr	s13, [r1, #28]
 8011686:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 801168a:	edd5 7a00 	vldr	s15, [r5]
 801168e:	f101 0520 	add.w	r5, r1, #32
 8011692:	45ab      	cmp	fp, r5
 8011694:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011698:	d908      	bls.n	80116ac <forward_dense+0x3b8>
 801169a:	edd1 7a08 	vldr	s15, [r1, #32]
 801169e:	7a01      	ldrb	r1, [r0, #8]
 80116a0:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80116a4:	edd1 6a00 	vldr	s13, [r1]
 80116a8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80116ac:	ee35 5a07 	vadd.f32	s10, s10, s14
 80116b0:	e6f0      	b.n	8011494 <forward_dense+0x1a0>
 80116b2:	ed9f 5a02 	vldr	s10, [pc, #8]	; 80116bc <forward_dense+0x3c8>
 80116b6:	e6d6      	b.n	8011466 <forward_dense+0x172>
 80116b8:	3ffffff8 	.word	0x3ffffff8
 80116bc:	00000000 	.word	0x00000000
 80116c0:	eeb0 7a48 	vmov.f32	s14, s16
 80116c4:	4650      	mov	r0, sl
 80116c6:	4611      	mov	r1, r2
 80116c8:	468c      	mov	ip, r1
 80116ca:	4606      	mov	r6, r0
 80116cc:	f81c 5b01 	ldrb.w	r5, [ip], #1
 80116d0:	ecf6 7a01 	vldmia	r6!, {s15}
 80116d4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80116d8:	edd5 6a00 	vldr	s13, [r5]
 80116dc:	9d08      	ldr	r5, [sp, #32]
 80116de:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80116e2:	42ae      	cmp	r6, r5
 80116e4:	d866      	bhi.n	80117b4 <forward_dense+0x4c0>
 80116e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80116e8:	f101 0711 	add.w	r7, r1, #17
 80116ec:	3109      	adds	r1, #9
 80116ee:	eba5 0800 	sub.w	r8, r5, r0
 80116f2:	3024      	adds	r0, #36	; 0x24
 80116f4:	ea4f 1858 	mov.w	r8, r8, lsr #5
 80116f8:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 80116fc:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 8011700:	3108      	adds	r1, #8
 8011702:	ed50 2a07 	vldr	s5, [r0, #-28]	; 0xffffffe4
 8011706:	3020      	adds	r0, #32
 8011708:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 801170c:	ed10 3a10 	vldr	s6, [r0, #-64]	; 0xffffffc0
 8011710:	ed50 3a0e 	vldr	s7, [r0, #-56]	; 0xffffffc8
 8011714:	edd5 7a00 	vldr	s15, [r5]
 8011718:	f811 5c10 	ldrb.w	r5, [r1, #-16]
 801171c:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8011720:	ed10 4a0d 	vldr	s8, [r0, #-52]	; 0xffffffcc
 8011724:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8011728:	ed50 4a0c 	vldr	s9, [r0, #-48]	; 0xffffffd0
 801172c:	ed50 5a0b 	vldr	s11, [r0, #-44]	; 0xffffffd4
 8011730:	edd5 2a00 	vldr	s5, [r5]
 8011734:	f811 5c0e 	ldrb.w	r5, [r1, #-14]
 8011738:	eee2 7a83 	vfma.f32	s15, s5, s6
 801173c:	ed10 6a0a 	vldr	s12, [r0, #-40]	; 0xffffffd8
 8011740:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8011744:	ed50 6a09 	vldr	s13, [r0, #-36]	; 0xffffffdc
 8011748:	ed95 3a00 	vldr	s6, [r5]
 801174c:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 8011750:	eee3 7a23 	vfma.f32	s15, s6, s7
 8011754:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8011758:	edd5 3a00 	vldr	s7, [r5]
 801175c:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 8011760:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8011764:	eee3 7a84 	vfma.f32	s15, s7, s8
 8011768:	ed95 4a00 	vldr	s8, [r5]
 801176c:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 8011770:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8011774:	eee4 7a24 	vfma.f32	s15, s8, s9
 8011778:	edd5 4a00 	vldr	s9, [r5]
 801177c:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 8011780:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8011784:	eee4 7aa5 	vfma.f32	s15, s9, s11
 8011788:	edd5 5a00 	vldr	s11, [r5]
 801178c:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 8011790:	428f      	cmp	r7, r1
 8011792:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8011796:	eee5 7a86 	vfma.f32	s15, s11, s12
 801179a:	ed95 6a00 	vldr	s12, [r5]
 801179e:	eee6 7a26 	vfma.f32	s15, s12, s13
 80117a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80117a6:	d1a9      	bne.n	80116fc <forward_dense+0x408>
 80117a8:	f108 0801 	add.w	r8, r8, #1
 80117ac:	eb0c 0cc8 	add.w	ip, ip, r8, lsl #3
 80117b0:	eb06 1648 	add.w	r6, r6, r8, lsl #5
 80117b4:	455e      	cmp	r6, fp
 80117b6:	f4bf af79 	bcs.w	80116ac <forward_dense+0x3b8>
 80117ba:	f89c 1000 	ldrb.w	r1, [ip]
 80117be:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80117c2:	edd1 7a00 	vldr	s15, [r1]
 80117c6:	4631      	mov	r1, r6
 80117c8:	ecf1 6a01 	vldmia	r1!, {s13}
 80117cc:	458b      	cmp	fp, r1
 80117ce:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80117d2:	f67f af6b 	bls.w	80116ac <forward_dense+0x3b8>
 80117d6:	f89c 1001 	ldrb.w	r1, [ip, #1]
 80117da:	edd6 6a01 	vldr	s13, [r6, #4]
 80117de:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80117e2:	edd1 7a00 	vldr	s15, [r1]
 80117e6:	f106 0108 	add.w	r1, r6, #8
 80117ea:	458b      	cmp	fp, r1
 80117ec:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80117f0:	f67f af5c 	bls.w	80116ac <forward_dense+0x3b8>
 80117f4:	f89c 1002 	ldrb.w	r1, [ip, #2]
 80117f8:	edd6 6a02 	vldr	s13, [r6, #8]
 80117fc:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8011800:	edd1 7a00 	vldr	s15, [r1]
 8011804:	f106 010c 	add.w	r1, r6, #12
 8011808:	458b      	cmp	fp, r1
 801180a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801180e:	f67f af4d 	bls.w	80116ac <forward_dense+0x3b8>
 8011812:	f89c 1003 	ldrb.w	r1, [ip, #3]
 8011816:	edd6 6a03 	vldr	s13, [r6, #12]
 801181a:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801181e:	edd1 7a00 	vldr	s15, [r1]
 8011822:	f106 0110 	add.w	r1, r6, #16
 8011826:	458b      	cmp	fp, r1
 8011828:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801182c:	f67f af3e 	bls.w	80116ac <forward_dense+0x3b8>
 8011830:	f89c 1004 	ldrb.w	r1, [ip, #4]
 8011834:	edd6 6a04 	vldr	s13, [r6, #16]
 8011838:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801183c:	edd1 7a00 	vldr	s15, [r1]
 8011840:	f106 0114 	add.w	r1, r6, #20
 8011844:	458b      	cmp	fp, r1
 8011846:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801184a:	f67f af2f 	bls.w	80116ac <forward_dense+0x3b8>
 801184e:	f89c 1005 	ldrb.w	r1, [ip, #5]
 8011852:	edd6 6a05 	vldr	s13, [r6, #20]
 8011856:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801185a:	edd1 7a00 	vldr	s15, [r1]
 801185e:	f106 0118 	add.w	r1, r6, #24
 8011862:	458b      	cmp	fp, r1
 8011864:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011868:	f67f af20 	bls.w	80116ac <forward_dense+0x3b8>
 801186c:	f89c 1006 	ldrb.w	r1, [ip, #6]
 8011870:	edd6 6a06 	vldr	s13, [r6, #24]
 8011874:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8011878:	edd1 7a00 	vldr	s15, [r1]
 801187c:	f106 011c 	add.w	r1, r6, #28
 8011880:	458b      	cmp	fp, r1
 8011882:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011886:	f67f af11 	bls.w	80116ac <forward_dense+0x3b8>
 801188a:	f89c 1007 	ldrb.w	r1, [ip, #7]
 801188e:	edd6 6a07 	vldr	s13, [r6, #28]
 8011892:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8011896:	edd1 7a00 	vldr	s15, [r1]
 801189a:	f106 0120 	add.w	r1, r6, #32
 801189e:	458b      	cmp	fp, r1
 80118a0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80118a4:	f67f af02 	bls.w	80116ac <forward_dense+0x3b8>
 80118a8:	f89c 1008 	ldrb.w	r1, [ip, #8]
 80118ac:	edd6 7a08 	vldr	s15, [r6, #32]
 80118b0:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80118b4:	edd1 6a00 	vldr	s13, [r1]
 80118b8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80118bc:	e6f6      	b.n	80116ac <forward_dense+0x3b8>
 80118be:	eeb0 7a48 	vmov.f32	s14, s16
 80118c2:	4650      	mov	r0, sl
 80118c4:	4611      	mov	r1, r2
 80118c6:	f811 5b01 	ldrb.w	r5, [r1], #1
 80118ca:	ecf0 7a01 	vldmia	r0!, {s15}
 80118ce:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80118d2:	edd5 6a00 	vldr	s13, [r5]
 80118d6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80118da:	e6f5      	b.n	80116c8 <forward_dense+0x3d4>
 80118dc:	4611      	mov	r1, r2
 80118de:	edda 7a00 	vldr	s15, [sl]
 80118e2:	9812      	ldr	r0, [sp, #72]	; 0x48
 80118e4:	f811 5b01 	ldrb.w	r5, [r1], #1
 80118e8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80118ec:	ed95 7a00 	vldr	s14, [r5]
 80118f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80118f4:	e7e7      	b.n	80118c6 <forward_dense+0x5d2>
 80118f6:	9803      	ldr	r0, [sp, #12]
 80118f8:	9906      	ldr	r1, [sp, #24]
 80118fa:	4288      	cmp	r0, r1
 80118fc:	f67f adda 	bls.w	80114b4 <forward_dense+0x1c0>
 8011900:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011902:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8011906:	468b      	mov	fp, r1
 8011908:	f100 0c01 	add.w	ip, r0, #1
 801190c:	9805      	ldr	r0, [sp, #20]
 801190e:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8011912:	3801      	subs	r0, #1
 8011914:	9008      	str	r0, [sp, #32]
 8011916:	2b00      	cmp	r3, #0
 8011918:	f000 80bf 	beq.w	8011a9a <forward_dense+0x7a6>
 801191c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801191e:	ecf3 2a01 	vldmia	r3!, {s5}
 8011922:	ed1f 7a9a 	vldr	s14, [pc, #-616]	; 80116bc <forward_dense+0x3c8>
 8011926:	2900      	cmp	r1, #0
 8011928:	f000 80bf 	beq.w	8011aaa <forward_dense+0x7b6>
 801192c:	1d10      	adds	r0, r2, #4
 801192e:	f10a 0120 	add.w	r1, sl, #32
 8011932:	f810 7c04 	ldrb.w	r7, [r0, #-4]
 8011936:	3004      	adds	r0, #4
 8011938:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
 801193c:	3120      	adds	r1, #32
 801193e:	f007 0e0f 	and.w	lr, r7, #15
 8011942:	093f      	lsrs	r7, r7, #4
 8011944:	f810 6c07 	ldrb.w	r6, [r0, #-7]
 8011948:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
 801194c:	ed11 4a10 	vldr	s8, [r1, #-64]	; 0xffffffc0
 8011950:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8011954:	ed51 3a0e 	vldr	s7, [r1, #-56]	; 0xffffffc8
 8011958:	edde 7a00 	vldr	s15, [lr]
 801195c:	ed97 3a00 	vldr	s6, [r7]
 8011960:	0937      	lsrs	r7, r6, #4
 8011962:	ee67 7a82 	vmul.f32	s15, s15, s4
 8011966:	f006 060f 	and.w	r6, r6, #15
 801196a:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 801196e:	f810 5c06 	ldrb.w	r5, [r0, #-6]
 8011972:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8011976:	ed11 5a0d 	vldr	s10, [r1, #-52]	; 0xffffffcc
 801197a:	eee3 7a04 	vfma.f32	s15, s6, s8
 801197e:	ed97 3a00 	vldr	s6, [r7]
 8011982:	ed96 4a00 	vldr	s8, [r6]
 8011986:	092e      	lsrs	r6, r5, #4
 8011988:	ed51 4a0c 	vldr	s9, [r1, #-48]	; 0xffffffd0
 801198c:	f005 050f 	and.w	r5, r5, #15
 8011990:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8011994:	ed11 6a0b 	vldr	s12, [r1, #-44]	; 0xffffffd4
 8011998:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 801199c:	ed51 5a0a 	vldr	s11, [r1, #-40]	; 0xffffffd8
 80119a0:	ed51 6a09 	vldr	s13, [r1, #-36]	; 0xffffffdc
 80119a4:	eee3 7a23 	vfma.f32	s15, s6, s7
 80119a8:	eee4 7a05 	vfma.f32	s15, s8, s10
 80119ac:	ed96 4a00 	vldr	s8, [r6]
 80119b0:	ed95 5a00 	vldr	s10, [r5]
 80119b4:	f810 5c05 	ldrb.w	r5, [r0, #-5]
 80119b8:	4560      	cmp	r0, ip
 80119ba:	ea4f 1615 	mov.w	r6, r5, lsr #4
 80119be:	f005 050f 	and.w	r5, r5, #15
 80119c2:	eee4 7a24 	vfma.f32	s15, s8, s9
 80119c6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80119ca:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80119ce:	eee5 7a06 	vfma.f32	s15, s10, s12
 80119d2:	ed96 5a00 	vldr	s10, [r6]
 80119d6:	ed95 6a00 	vldr	s12, [r5]
 80119da:	eee5 7a25 	vfma.f32	s15, s10, s11
 80119de:	eee6 7a26 	vfma.f32	s15, s12, s13
 80119e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80119e6:	d1a4      	bne.n	8011932 <forward_dense+0x63e>
 80119e8:	f1ac 0804 	sub.w	r8, ip, #4
 80119ec:	f8dd e01c 	ldr.w	lr, [sp, #28]
 80119f0:	9905      	ldr	r1, [sp, #20]
 80119f2:	458e      	cmp	lr, r1
 80119f4:	d229      	bcs.n	8011a4a <forward_dense+0x756>
 80119f6:	9908      	ldr	r1, [sp, #32]
 80119f8:	f10e 0008 	add.w	r0, lr, #8
 80119fc:	f108 36ff 	add.w	r6, r8, #4294967295
 8011a00:	eba1 070e 	sub.w	r7, r1, lr
 8011a04:	ea4f 09d7 	mov.w	r9, r7, lsr #3
 8011a08:	eb08 07d7 	add.w	r7, r8, r7, lsr #3
 8011a0c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011a10:	3008      	adds	r0, #8
 8011a12:	ed50 5a03 	vldr	s11, [r0, #-12]
 8011a16:	f001 050f 	and.w	r5, r1, #15
 8011a1a:	0909      	lsrs	r1, r1, #4
 8011a1c:	ed50 6a04 	vldr	s13, [r0, #-16]
 8011a20:	42b7      	cmp	r7, r6
 8011a22:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8011a26:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8011a2a:	edd5 7a00 	vldr	s15, [r5]
 8011a2e:	ed91 6a00 	vldr	s12, [r1]
 8011a32:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8011a36:	eee6 7a26 	vfma.f32	s15, s12, s13
 8011a3a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011a3e:	d1e5      	bne.n	8011a0c <forward_dense+0x718>
 8011a40:	f109 0901 	add.w	r9, r9, #1
 8011a44:	44c8      	add	r8, r9
 8011a46:	eb0e 0ec9 	add.w	lr, lr, r9, lsl #3
 8011a4a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011a4c:	b1c1      	cbz	r1, 8011a80 <forward_dense+0x78c>
 8011a4e:	f898 1000 	ldrb.w	r1, [r8]
 8011a52:	edde 7a00 	vldr	s15, [lr]
 8011a56:	0909      	lsrs	r1, r1, #4
 8011a58:	9804      	ldr	r0, [sp, #16]
 8011a5a:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8011a5e:	4402      	add	r2, r0
 8011a60:	4484      	add	ip, r0
 8011a62:	edd1 6a00 	vldr	s13, [r1]
 8011a66:	9903      	ldr	r1, [sp, #12]
 8011a68:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011a6c:	ee72 2a87 	vadd.f32	s5, s5, s14
 8011a70:	eceb 2a01 	vstmia	fp!, {s5}
 8011a74:	4559      	cmp	r1, fp
 8011a76:	f63f af4e 	bhi.w	8011916 <forward_dense+0x622>
 8011a7a:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 8011a7e:	e510      	b.n	80114a2 <forward_dense+0x1ae>
 8011a80:	9904      	ldr	r1, [sp, #16]
 8011a82:	ee32 7a87 	vadd.f32	s14, s5, s14
 8011a86:	440a      	add	r2, r1
 8011a88:	448c      	add	ip, r1
 8011a8a:	9903      	ldr	r1, [sp, #12]
 8011a8c:	ecab 7a01 	vstmia	fp!, {s14}
 8011a90:	458b      	cmp	fp, r1
 8011a92:	d2f2      	bcs.n	8011a7a <forward_dense+0x786>
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	f47f af41 	bne.w	801191c <forward_dense+0x628>
 8011a9a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011a9c:	eef0 2a48 	vmov.f32	s5, s16
 8011aa0:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8011b30 <forward_dense+0x83c>
 8011aa4:	2900      	cmp	r1, #0
 8011aa6:	f47f af41 	bne.w	801192c <forward_dense+0x638>
 8011aaa:	46d6      	mov	lr, sl
 8011aac:	4690      	mov	r8, r2
 8011aae:	e79f      	b.n	80119f0 <forward_dense+0x6fc>
 8011ab0:	9819      	ldr	r0, [sp, #100]	; 0x64
 8011ab2:	4651      	mov	r1, sl
 8011ab4:	9d06      	ldr	r5, [sp, #24]
 8011ab6:	9001      	str	r0, [sp, #4]
 8011ab8:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8011aba:	9000      	str	r0, [sp, #0]
 8011abc:	4628      	mov	r0, r5
 8011abe:	f000 fbe3 	bl	8012288 <forward_lite_dense_if32of32wf32>
 8011ac2:	462b      	mov	r3, r5
 8011ac4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011ac6:	4413      	add	r3, r2
 8011ac8:	4619      	mov	r1, r3
 8011aca:	9306      	str	r3, [sp, #24]
 8011acc:	e4f2      	b.n	80114b4 <forward_dense+0x1c0>
 8011ace:	b01b      	add	sp, #108	; 0x6c
 8011ad0:	ecbd 8b02 	vpop	{d8}
 8011ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ad8:	4601      	mov	r1, r0
 8011ada:	e4eb      	b.n	80114b4 <forward_dense+0x1c0>
 8011adc:	4651      	mov	r1, sl
 8011ade:	4610      	mov	r0, r2
 8011ae0:	e572      	b.n	80115c8 <forward_dense+0x2d4>
 8011ae2:	f8d8 800c 	ldr.w	r8, [r8, #12]
 8011ae6:	f1b9 0f00 	cmp.w	r9, #0
 8011aea:	d016      	beq.n	8011b1a <forward_dense+0x826>
 8011aec:	e9d9 0100 	ldrd	r0, r1, [r9]
 8011af0:	f000 fde6 	bl	80126c0 <ai_array_get_byte_size>
 8011af4:	f8d9 a00c 	ldr.w	sl, [r9, #12]
 8011af8:	4602      	mov	r2, r0
 8011afa:	4640      	mov	r0, r8
 8011afc:	4651      	mov	r1, sl
 8011afe:	f000 fceb 	bl	80124d8 <st_int8_copy>
 8011b02:	e44b      	b.n	801139c <forward_dense+0xa8>
 8011b04:	2b04      	cmp	r3, #4
 8011b06:	d00a      	beq.n	8011b1e <forward_dense+0x82a>
 8011b08:	f04f 0900 	mov.w	r9, #0
 8011b0c:	e441      	b.n	8011392 <forward_dense+0x9e>
 8011b0e:	930f      	str	r3, [sp, #60]	; 0x3c
 8011b10:	e417      	b.n	8011342 <forward_dense+0x4e>
 8011b12:	2300      	movs	r3, #0
 8011b14:	930d      	str	r3, [sp, #52]	; 0x34
 8011b16:	460b      	mov	r3, r1
 8011b18:	e413      	b.n	8011342 <forward_dense+0x4e>
 8011b1a:	46c2      	mov	sl, r8
 8011b1c:	e43e      	b.n	801139c <forward_dense+0xa8>
 8011b1e:	f8d8 a00c 	ldr.w	sl, [r8, #12]
 8011b22:	e43b      	b.n	801139c <forward_dense+0xa8>
 8011b24:	2300      	movs	r3, #0
 8011b26:	685b      	ldr	r3, [r3, #4]
 8011b28:	deff      	udf	#255	; 0xff
 8011b2a:	2300      	movs	r3, #0
 8011b2c:	685b      	ldr	r3, [r3, #4]
 8011b2e:	deff      	udf	#255	; 0xff
 8011b30:	00000000 	.word	0x00000000

08011b34 <forward_relu>:
 8011b34:	6982      	ldr	r2, [r0, #24]
 8011b36:	8813      	ldrh	r3, [r2, #0]
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d05b      	beq.n	8011bf4 <forward_relu+0xc0>
 8011b3c:	6851      	ldr	r1, [r2, #4]
 8011b3e:	684a      	ldr	r2, [r1, #4]
 8011b40:	b102      	cbz	r2, 8011b44 <forward_relu+0x10>
 8011b42:	6812      	ldr	r2, [r2, #0]
 8011b44:	2b01      	cmp	r3, #1
 8011b46:	f000 8123 	beq.w	8011d90 <forward_relu+0x25c>
 8011b4a:	b470      	push	{r4, r5, r6}
 8011b4c:	690b      	ldr	r3, [r1, #16]
 8011b4e:	b103      	cbz	r3, 8011b52 <forward_relu+0x1e>
 8011b50:	681b      	ldr	r3, [r3, #0]
 8011b52:	69c6      	ldr	r6, [r0, #28]
 8011b54:	2e00      	cmp	r6, #0
 8011b56:	f000 809e 	beq.w	8011c96 <forward_relu+0x162>
 8011b5a:	6871      	ldr	r1, [r6, #4]
 8011b5c:	6998      	ldr	r0, [r3, #24]
 8011b5e:	2901      	cmp	r1, #1
 8011b60:	f000 80c3 	beq.w	8011cea <forward_relu+0x1b6>
 8011b64:	6893      	ldr	r3, [r2, #8]
 8011b66:	6991      	ldr	r1, [r2, #24]
 8011b68:	0a1b      	lsrs	r3, r3, #8
 8011b6a:	6880      	ldr	r0, [r0, #8]
 8011b6c:	688d      	ldr	r5, [r1, #8]
 8011b6e:	f000 80f2 	beq.w	8011d56 <forward_relu+0x222>
 8011b72:	68d4      	ldr	r4, [r2, #12]
 8011b74:	2201      	movs	r2, #1
 8011b76:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011b7a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011b7e:	42a3      	cmp	r3, r4
 8011b80:	fb01 f202 	mul.w	r2, r1, r2
 8011b84:	d1f9      	bne.n	8011b7a <forward_relu+0x46>
 8011b86:	68b3      	ldr	r3, [r6, #8]
 8011b88:	ed93 7a02 	vldr	s14, [r3, #8]
 8011b8c:	edd3 6a00 	vldr	s13, [r3]
 8011b90:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8011b94:	ed93 6a01 	vldr	s12, [r3, #4]
 8011b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b9c:	d42c      	bmi.n	8011bf8 <forward_relu+0xc4>
 8011b9e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8011ba2:	4413      	add	r3, r2
 8011ba4:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 8011ba8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8011bac:	4295      	cmp	r5, r2
 8011bae:	d81f      	bhi.n	8011bf0 <forward_relu+0xbc>
 8011bb0:	3204      	adds	r2, #4
 8011bb2:	1d01      	adds	r1, r0, #4
 8011bb4:	e00d      	b.n	8011bd2 <forward_relu+0x9e>
 8011bb6:	eef4 6ae7 	vcmpe.f32	s13, s15
 8011bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bbe:	db03      	blt.n	8011bc8 <forward_relu+0x94>
 8011bc0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011bc4:	ee67 7a86 	vmul.f32	s15, s15, s12
 8011bc8:	3b08      	subs	r3, #8
 8011bca:	ed61 7a01 	vstmdb	r1!, {s15}
 8011bce:	429d      	cmp	r5, r3
 8011bd0:	d80e      	bhi.n	8011bf0 <forward_relu+0xbc>
 8011bd2:	4613      	mov	r3, r2
 8011bd4:	ed72 7a01 	vldmdb	r2!, {s15}
 8011bd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011be0:	d9e9      	bls.n	8011bb6 <forward_relu+0x82>
 8011be2:	3b08      	subs	r3, #8
 8011be4:	eef0 7a47 	vmov.f32	s15, s14
 8011be8:	429d      	cmp	r5, r3
 8011bea:	ed61 7a01 	vstmdb	r1!, {s15}
 8011bee:	d9f0      	bls.n	8011bd2 <forward_relu+0x9e>
 8011bf0:	bc70      	pop	{r4, r5, r6}
 8011bf2:	4770      	bx	lr
 8011bf4:	685b      	ldr	r3, [r3, #4]
 8011bf6:	deff      	udf	#255	; 0xff
 8011bf8:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8011bfc:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
 8011c00:	4411      	add	r1, r2
 8011c02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c06:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8011c0a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8011c0e:	d11f      	bne.n	8011c50 <forward_relu+0x11c>
 8011c10:	429d      	cmp	r5, r3
 8011c12:	d8ed      	bhi.n	8011bf0 <forward_relu+0xbc>
 8011c14:	1b5d      	subs	r5, r3, r5
 8011c16:	1d1a      	adds	r2, r3, #4
 8011c18:	1d01      	adds	r1, r0, #4
 8011c1a:	2000      	movs	r0, #0
 8011c1c:	f025 0503 	bic.w	r5, r5, #3
 8011c20:	1b5b      	subs	r3, r3, r5
 8011c22:	ed72 7a01 	vldmdb	r2!, {s15}
 8011c26:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c2e:	dc0a      	bgt.n	8011c46 <forward_relu+0x112>
 8011c30:	429a      	cmp	r2, r3
 8011c32:	f841 0d04 	str.w	r0, [r1, #-4]!
 8011c36:	d0db      	beq.n	8011bf0 <forward_relu+0xbc>
 8011c38:	ed72 7a01 	vldmdb	r2!, {s15}
 8011c3c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011c40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c44:	ddf4      	ble.n	8011c30 <forward_relu+0xfc>
 8011c46:	429a      	cmp	r2, r3
 8011c48:	ed61 7a01 	vstmdb	r1!, {s15}
 8011c4c:	d1e9      	bne.n	8011c22 <forward_relu+0xee>
 8011c4e:	e7cf      	b.n	8011bf0 <forward_relu+0xbc>
 8011c50:	429d      	cmp	r5, r3
 8011c52:	d8cd      	bhi.n	8011bf0 <forward_relu+0xbc>
 8011c54:	1b5d      	subs	r5, r3, r5
 8011c56:	1d1a      	adds	r2, r3, #4
 8011c58:	1d01      	adds	r1, r0, #4
 8011c5a:	f025 0503 	bic.w	r5, r5, #3
 8011c5e:	1b5b      	subs	r3, r3, r5
 8011c60:	ed72 7a01 	vldmdb	r2!, {s15}
 8011c64:	eef4 6ae7 	vcmpe.f32	s13, s15
 8011c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c6c:	db0e      	blt.n	8011c8c <forward_relu+0x158>
 8011c6e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011c72:	4293      	cmp	r3, r2
 8011c74:	ee67 7a86 	vmul.f32	s15, s15, s12
 8011c78:	ed61 7a01 	vstmdb	r1!, {s15}
 8011c7c:	d0b8      	beq.n	8011bf0 <forward_relu+0xbc>
 8011c7e:	ed72 7a01 	vldmdb	r2!, {s15}
 8011c82:	eef4 6ae7 	vcmpe.f32	s13, s15
 8011c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c8a:	daf0      	bge.n	8011c6e <forward_relu+0x13a>
 8011c8c:	4293      	cmp	r3, r2
 8011c8e:	ed61 7a01 	vstmdb	r1!, {s15}
 8011c92:	d1e5      	bne.n	8011c60 <forward_relu+0x12c>
 8011c94:	e7ac      	b.n	8011bf0 <forward_relu+0xbc>
 8011c96:	6999      	ldr	r1, [r3, #24]
 8011c98:	6893      	ldr	r3, [r2, #8]
 8011c9a:	6990      	ldr	r0, [r2, #24]
 8011c9c:	0a1b      	lsrs	r3, r3, #8
 8011c9e:	6889      	ldr	r1, [r1, #8]
 8011ca0:	6884      	ldr	r4, [r0, #8]
 8011ca2:	d06e      	beq.n	8011d82 <forward_relu+0x24e>
 8011ca4:	68d5      	ldr	r5, [r2, #12]
 8011ca6:	2201      	movs	r2, #1
 8011ca8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8011cac:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 8011cb0:	429d      	cmp	r5, r3
 8011cb2:	fb00 f202 	mul.w	r2, r0, r2
 8011cb6:	d1f9      	bne.n	8011cac <forward_relu+0x178>
 8011cb8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8011cbc:	4413      	add	r3, r2
 8011cbe:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8011cc2:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8011cc6:	4294      	cmp	r4, r2
 8011cc8:	d892      	bhi.n	8011bf0 <forward_relu+0xbc>
 8011cca:	3204      	adds	r2, #4
 8011ccc:	3104      	adds	r1, #4
 8011cce:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8011d98 <forward_relu+0x264>
 8011cd2:	4613      	mov	r3, r2
 8011cd4:	ed72 7a01 	vldmdb	r2!, {s15}
 8011cd8:	3b08      	subs	r3, #8
 8011cda:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8011cde:	ed61 7a01 	vstmdb	r1!, {s15}
 8011ce2:	429c      	cmp	r4, r3
 8011ce4:	d9f5      	bls.n	8011cd2 <forward_relu+0x19e>
 8011ce6:	bc70      	pop	{r4, r5, r6}
 8011ce8:	4770      	bx	lr
 8011cea:	6993      	ldr	r3, [r2, #24]
 8011cec:	6880      	ldr	r0, [r0, #8]
 8011cee:	689c      	ldr	r4, [r3, #8]
 8011cf0:	6893      	ldr	r3, [r2, #8]
 8011cf2:	0a1b      	lsrs	r3, r3, #8
 8011cf4:	d047      	beq.n	8011d86 <forward_relu+0x252>
 8011cf6:	68d5      	ldr	r5, [r2, #12]
 8011cf8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8011cfc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8011d00:	42ab      	cmp	r3, r5
 8011d02:	fb02 f101 	mul.w	r1, r2, r1
 8011d06:	d1f9      	bne.n	8011cfc <forward_relu+0x1c8>
 8011d08:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 8011d0c:	68b3      	ldr	r3, [r6, #8]
 8011d0e:	440a      	add	r2, r1
 8011d10:	ed93 7a00 	vldr	s14, [r3]
 8011d14:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011d18:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8011d1c:	429c      	cmp	r4, r3
 8011d1e:	f63f af67 	bhi.w	8011bf0 <forward_relu+0xbc>
 8011d22:	1d02      	adds	r2, r0, #4
 8011d24:	3304      	adds	r3, #4
 8011d26:	2000      	movs	r0, #0
 8011d28:	ed53 7a01 	vldr	s15, [r3, #-4]
 8011d2c:	1f19      	subs	r1, r3, #4
 8011d2e:	3b08      	subs	r3, #8
 8011d30:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d38:	d406      	bmi.n	8011d48 <forward_relu+0x214>
 8011d3a:	429c      	cmp	r4, r3
 8011d3c:	f842 0d04 	str.w	r0, [r2, #-4]!
 8011d40:	f63f af56 	bhi.w	8011bf0 <forward_relu+0xbc>
 8011d44:	460b      	mov	r3, r1
 8011d46:	e7ef      	b.n	8011d28 <forward_relu+0x1f4>
 8011d48:	429c      	cmp	r4, r3
 8011d4a:	ed62 7a01 	vstmdb	r2!, {s15}
 8011d4e:	f63f af4f 	bhi.w	8011bf0 <forward_relu+0xbc>
 8011d52:	460b      	mov	r3, r1
 8011d54:	e7e8      	b.n	8011d28 <forward_relu+0x1f4>
 8011d56:	68b3      	ldr	r3, [r6, #8]
 8011d58:	ed93 7a02 	vldr	s14, [r3, #8]
 8011d5c:	edd3 6a00 	vldr	s13, [r3]
 8011d60:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8011d64:	ed93 6a01 	vldr	s12, [r3, #4]
 8011d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d6c:	d401      	bmi.n	8011d72 <forward_relu+0x23e>
 8011d6e:	462a      	mov	r2, r5
 8011d70:	e71e      	b.n	8011bb0 <forward_relu+0x7c>
 8011d72:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8011d76:	462b      	mov	r3, r5
 8011d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d7c:	f47f af6a 	bne.w	8011c54 <forward_relu+0x120>
 8011d80:	e748      	b.n	8011c14 <forward_relu+0xe0>
 8011d82:	4622      	mov	r2, r4
 8011d84:	e7a1      	b.n	8011cca <forward_relu+0x196>
 8011d86:	68b2      	ldr	r2, [r6, #8]
 8011d88:	4623      	mov	r3, r4
 8011d8a:	ed92 7a00 	vldr	s14, [r2]
 8011d8e:	e7c8      	b.n	8011d22 <forward_relu+0x1ee>
 8011d90:	2300      	movs	r3, #0
 8011d92:	685b      	ldr	r3, [r3, #4]
 8011d94:	deff      	udf	#255	; 0xff
 8011d96:	bf00      	nop
 8011d98:	00000000 	.word	0x00000000

08011d9c <ai_conv2d_kernel_simple_opt_f32.constprop.0>:
 8011d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011da0:	ed2d 8b0c 	vpush	{d8-d13}
 8011da4:	b08d      	sub	sp, #52	; 0x34
 8011da6:	461d      	mov	r5, r3
 8011da8:	9003      	str	r0, [sp, #12]
 8011daa:	9207      	str	r2, [sp, #28]
 8011dac:	9c24      	ldr	r4, [sp, #144]	; 0x90
 8011dae:	9308      	str	r3, [sp, #32]
 8011db0:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
 8011db4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011db6:	910b      	str	r1, [sp, #44]	; 0x2c
 8011db8:	e9dd 0225 	ldrd	r0, r2, [sp, #148]	; 0x94
 8011dbc:	fb00 f002 	mul.w	r0, r0, r2
 8011dc0:	9004      	str	r0, [sp, #16]
 8011dc2:	f8bd 00a4 	ldrh.w	r0, [sp, #164]	; 0xa4
 8011dc6:	9009      	str	r0, [sp, #36]	; 0x24
 8011dc8:	2c00      	cmp	r4, #0
 8011dca:	f000 80ed 	beq.w	8011fa8 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x20c>
 8011dce:	009c      	lsls	r4, r3, #2
 8011dd0:	fb00 f305 	mul.w	r3, r0, r5
 8011dd4:	009b      	lsls	r3, r3, #2
 8011dd6:	9405      	str	r4, [sp, #20]
 8011dd8:	9306      	str	r3, [sp, #24]
 8011dda:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8011ddc:	fb03 f305 	mul.w	r3, r3, r5
 8011de0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8011de4:	9301      	str	r3, [sp, #4]
 8011de6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8011de8:	425b      	negs	r3, r3
 8011dea:	9300      	str	r3, [sp, #0]
 8011dec:	2300      	movs	r3, #0
 8011dee:	9302      	str	r3, [sp, #8]
 8011df0:	00ab      	lsls	r3, r5, #2
 8011df2:	930a      	str	r3, [sp, #40]	; 0x28
 8011df4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	f2c0 80dd 	blt.w	8011fb6 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x21a>
 8011dfc:	9e01      	ldr	r6, [sp, #4]
 8011dfe:	2000      	movs	r0, #0
 8011e00:	9d04      	ldr	r5, [sp, #16]
 8011e02:	9b07      	ldr	r3, [sp, #28]
 8011e04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011e06:	9900      	ldr	r1, [sp, #0]
 8011e08:	fb05 3502 	mla	r5, r5, r2, r3
 8011e0c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8011e0e:	440b      	add	r3, r1
 8011e10:	9925      	ldr	r1, [sp, #148]	; 0x94
 8011e12:	428b      	cmp	r3, r1
 8011e14:	bf94      	ite	ls
 8011e16:	ebc0 0003 	rsbls	r0, r0, r3
 8011e1a:	ebc0 0001 	rsbhi	r0, r0, r1
 8011e1e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8011e20:	f1bb 0f00 	cmp.w	fp, #0
 8011e24:	eba3 0a00 	sub.w	sl, r3, r0
 8011e28:	9b08      	ldr	r3, [sp, #32]
 8011e2a:	eba1 0900 	sub.w	r9, r1, r0
 8011e2e:	fb03 f000 	mul.w	r0, r3, r0
 8011e32:	f340 80c6 	ble.w	8011fc2 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x226>
 8011e36:	f020 040f 	bic.w	r4, r0, #15
 8011e3a:	eeb0 7a40 	vmov.f32	s14, s0
 8011e3e:	fb02 fa0a 	mul.w	sl, r2, sl
 8011e42:	f04f 0c00 	mov.w	ip, #0
 8011e46:	f104 38ff 	add.w	r8, r4, #4294967295
 8011e4a:	fb02 f909 	mul.w	r9, r2, r9
 8011e4e:	ea4f 1818 	mov.w	r8, r8, lsr #4
 8011e52:	f108 0801 	add.w	r8, r8, #1
 8011e56:	ea4f 1e88 	mov.w	lr, r8, lsl #6
 8011e5a:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8011e5e:	2c00      	cmp	r4, #0
 8011e60:	f340 80a7 	ble.w	8011fb2 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x216>
 8011e64:	f106 0240 	add.w	r2, r6, #64	; 0x40
 8011e68:	f105 0340 	add.w	r3, r5, #64	; 0x40
 8011e6c:	2100      	movs	r1, #0
 8011e6e:	ed53 6a0f 	vldr	s13, [r3, #-60]	; 0xffffffc4
 8011e72:	3110      	adds	r1, #16
 8011e74:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 8011e78:	3340      	adds	r3, #64	; 0x40
 8011e7a:	ed52 4a10 	vldr	s9, [r2, #-64]	; 0xffffffc0
 8011e7e:	42a1      	cmp	r1, r4
 8011e80:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011e84:	ed13 5a20 	vldr	s10, [r3, #-128]	; 0xffffff80
 8011e88:	ed52 5a0e 	vldr	s11, [r2, #-56]	; 0xffffffc8
 8011e8c:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8011e90:	ed13 6a1e 	vldr	s12, [r3, #-120]	; 0xffffff88
 8011e94:	eee4 7a85 	vfma.f32	s15, s9, s10
 8011e98:	ed53 6a1d 	vldr	s13, [r3, #-116]	; 0xffffff8c
 8011e9c:	ed52 da1d 	vldr	s27, [r2, #-116]	; 0xffffff8c
 8011ea0:	ed12 da1c 	vldr	s26, [r2, #-112]	; 0xffffff90
 8011ea4:	ed53 ca1c 	vldr	s25, [r3, #-112]	; 0xffffff90
 8011ea8:	ed12 ca1b 	vldr	s24, [r2, #-108]	; 0xffffff94
 8011eac:	ed53 ba1b 	vldr	s23, [r3, #-108]	; 0xffffff94
 8011eb0:	eee5 7a86 	vfma.f32	s15, s11, s12
 8011eb4:	ed12 ba1a 	vldr	s22, [r2, #-104]	; 0xffffff98
 8011eb8:	ed53 aa1a 	vldr	s21, [r3, #-104]	; 0xffffff98
 8011ebc:	ed12 aa19 	vldr	s20, [r2, #-100]	; 0xffffff9c
 8011ec0:	ed53 9a19 	vldr	s19, [r3, #-100]	; 0xffffff9c
 8011ec4:	ed12 9a18 	vldr	s18, [r2, #-96]	; 0xffffffa0
 8011ec8:	ed53 8a18 	vldr	s17, [r3, #-96]	; 0xffffffa0
 8011ecc:	eeed 7aa6 	vfma.f32	s15, s27, s13
 8011ed0:	ed12 8a17 	vldr	s16, [r2, #-92]	; 0xffffffa4
 8011ed4:	ed53 0a17 	vldr	s1, [r3, #-92]	; 0xffffffa4
 8011ed8:	ed12 1a16 	vldr	s2, [r2, #-88]	; 0xffffffa8
 8011edc:	ed53 1a16 	vldr	s3, [r3, #-88]	; 0xffffffa8
 8011ee0:	ed12 2a15 	vldr	s4, [r2, #-84]	; 0xffffffac
 8011ee4:	ed53 2a15 	vldr	s5, [r3, #-84]	; 0xffffffac
 8011ee8:	eeed 7a2c 	vfma.f32	s15, s26, s25
 8011eec:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 8011ef0:	ed53 3a14 	vldr	s7, [r3, #-80]	; 0xffffffb0
 8011ef4:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 8011ef8:	ed53 4a13 	vldr	s9, [r3, #-76]	; 0xffffffb4
 8011efc:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 8011f00:	ed53 5a12 	vldr	s11, [r3, #-72]	; 0xffffffb8
 8011f04:	eeec 7a2b 	vfma.f32	s15, s24, s23
 8011f08:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 8011f0c:	ed53 6a11 	vldr	s13, [r3, #-68]	; 0xffffffbc
 8011f10:	eeeb 7a2a 	vfma.f32	s15, s22, s21
 8011f14:	eeea 7a29 	vfma.f32	s15, s20, s19
 8011f18:	eee9 7a28 	vfma.f32	s15, s18, s17
 8011f1c:	eee8 7a20 	vfma.f32	s15, s16, s1
 8011f20:	eee1 7a21 	vfma.f32	s15, s2, s3
 8011f24:	eee2 7a22 	vfma.f32	s15, s4, s5
 8011f28:	eee3 7a23 	vfma.f32	s15, s6, s7
 8011f2c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8011f30:	eee5 7a25 	vfma.f32	s15, s10, s11
 8011f34:	eee6 7a26 	vfma.f32	s15, s12, s13
 8011f38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011f3c:	db97      	blt.n	8011e6e <ai_conv2d_kernel_simple_opt_f32.constprop.0+0xd2>
 8011f3e:	4476      	add	r6, lr
 8011f40:	4475      	add	r5, lr
 8011f42:	4647      	mov	r7, r8
 8011f44:	42b8      	cmp	r0, r7
 8011f46:	dd10      	ble.n	8011f6a <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1ce>
 8011f48:	463b      	mov	r3, r7
 8011f4a:	4631      	mov	r1, r6
 8011f4c:	462a      	mov	r2, r5
 8011f4e:	3301      	adds	r3, #1
 8011f50:	ecf2 6a01 	vldmia	r2!, {s13}
 8011f54:	ecf1 7a01 	vldmia	r1!, {s15}
 8011f58:	4298      	cmp	r0, r3
 8011f5a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011f5e:	d1f6      	bne.n	8011f4e <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1b2>
 8011f60:	1bc7      	subs	r7, r0, r7
 8011f62:	eb05 0587 	add.w	r5, r5, r7, lsl #2
 8011f66:	eb06 0687 	add.w	r6, r6, r7, lsl #2
 8011f6a:	f10c 0c01 	add.w	ip, ip, #1
 8011f6e:	4456      	add	r6, sl
 8011f70:	444d      	add	r5, r9
 8011f72:	45dc      	cmp	ip, fp
 8011f74:	f47f af73 	bne.w	8011e5e <ai_conv2d_kernel_simple_opt_f32.constprop.0+0xc2>
 8011f78:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8011f7a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011f7c:	9a03      	ldr	r2, [sp, #12]
 8011f7e:	4401      	add	r1, r0
 8011f80:	9b02      	ldr	r3, [sp, #8]
 8011f82:	ed82 7a00 	vstr	s14, [r2]
 8011f86:	9128      	str	r1, [sp, #160]	; 0xa0
 8011f88:	3301      	adds	r3, #1
 8011f8a:	9905      	ldr	r1, [sp, #20]
 8011f8c:	9302      	str	r3, [sp, #8]
 8011f8e:	440a      	add	r2, r1
 8011f90:	9906      	ldr	r1, [sp, #24]
 8011f92:	9203      	str	r2, [sp, #12]
 8011f94:	9a00      	ldr	r2, [sp, #0]
 8011f96:	1a12      	subs	r2, r2, r0
 8011f98:	9200      	str	r2, [sp, #0]
 8011f9a:	9a01      	ldr	r2, [sp, #4]
 8011f9c:	440a      	add	r2, r1
 8011f9e:	9201      	str	r2, [sp, #4]
 8011fa0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8011fa2:	4293      	cmp	r3, r2
 8011fa4:	f47f af26 	bne.w	8011df4 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x58>
 8011fa8:	b00d      	add	sp, #52	; 0x34
 8011faa:	ecbd 8b0c 	vpop	{d8-d13}
 8011fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fb2:	2700      	movs	r7, #0
 8011fb4:	e7c6      	b.n	8011f44 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1a8>
 8011fb6:	9a00      	ldr	r2, [sp, #0]
 8011fb8:	9b04      	ldr	r3, [sp, #16]
 8011fba:	4610      	mov	r0, r2
 8011fbc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8011fbe:	189d      	adds	r5, r3, r2
 8011fc0:	e71f      	b.n	8011e02 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x66>
 8011fc2:	eeb0 7a40 	vmov.f32	s14, s0
 8011fc6:	e7d7      	b.n	8011f78 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1dc>

08011fc8 <forward_lite_conv2d_if32of32wf32>:
 8011fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fcc:	ed2d 8b02 	vpush	{d8}
 8011fd0:	b09f      	sub	sp, #124	; 0x7c
 8011fd2:	4686      	mov	lr, r0
 8011fd4:	4694      	mov	ip, r2
 8011fd6:	af08      	add	r7, sp, #32
 8011fd8:	f8b7 40b0 	ldrh.w	r4, [r7, #176]	; 0xb0
 8011fdc:	62f9      	str	r1, [r7, #44]	; 0x2c
 8011fde:	f8b7 10ac 	ldrh.w	r1, [r7, #172]	; 0xac
 8011fe2:	f8b7 50b4 	ldrh.w	r5, [r7, #180]	; 0xb4
 8011fe6:	424e      	negs	r6, r1
 8011fe8:	64fc      	str	r4, [r7, #76]	; 0x4c
 8011fea:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 8011fee:	6078      	str	r0, [r7, #4]
 8011ff0:	613a      	str	r2, [r7, #16]
 8011ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011ff4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8011ff8:	f8b7 00a8 	ldrh.w	r0, [r7, #168]	; 0xa8
 8011ffc:	617d      	str	r5, [r7, #20]
 8011ffe:	633e      	str	r6, [r7, #48]	; 0x30
 8012000:	e9d7 3a22 	ldrd	r3, sl, [r7, #136]	; 0x88
 8012004:	2c00      	cmp	r4, #0
 8012006:	f000 8092 	beq.w	801212e <forward_lite_conv2d_if32of32wf32+0x166>
 801200a:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 801200e:	6379      	str	r1, [r7, #52]	; 0x34
 8012010:	fb04 f202 	mul.w	r2, r4, r2
 8012014:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8012018:	4244      	negs	r4, r0
 801201a:	ed9f 8a9a 	vldr	s16, [pc, #616]	; 8012284 <forward_lite_conv2d_if32of32wf32+0x2bc>
 801201e:	653c      	str	r4, [r7, #80]	; 0x50
 8012020:	fb03 f402 	mul.w	r4, r3, r2
 8012024:	fb03 f201 	mul.w	r2, r3, r1
 8012028:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 801202c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8012030:	63bc      	str	r4, [r7, #56]	; 0x38
 8012032:	fb01 f10a 	mul.w	r1, r1, sl
 8012036:	0089      	lsls	r1, r1, #2
 8012038:	61b9      	str	r1, [r7, #24]
 801203a:	fb05 f102 	mul.w	r1, r5, r2
 801203e:	4655      	mov	r5, sl
 8012040:	fb06 f202 	mul.w	r2, r6, r2
 8012044:	46da      	mov	sl, fp
 8012046:	0089      	lsls	r1, r1, #2
 8012048:	61f9      	str	r1, [r7, #28]
 801204a:	eb0e 0182 	add.w	r1, lr, r2, lsl #2
 801204e:	f10b 0207 	add.w	r2, fp, #7
 8012052:	62b9      	str	r1, [r7, #40]	; 0x28
 8012054:	f022 0107 	bic.w	r1, r2, #7
 8012058:	eb0c 0284 	add.w	r2, ip, r4, lsl #2
 801205c:	60f9      	str	r1, [r7, #12]
 801205e:	f10c 4178 	add.w	r1, ip, #4160749568	; 0xf8000000
 8012062:	60ba      	str	r2, [r7, #8]
 8012064:	2200      	movs	r2, #0
 8012066:	6239      	str	r1, [r7, #32]
 8012068:	627a      	str	r2, [r7, #36]	; 0x24
 801206a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801206c:	2a00      	cmp	r2, #0
 801206e:	f2c0 80d5 	blt.w	801221c <forward_lite_conv2d_if32of32wf32+0x254>
 8012072:	2200      	movs	r2, #0
 8012074:	f8d7 b028 	ldr.w	fp, [r7, #40]	; 0x28
 8012078:	657a      	str	r2, [r7, #84]	; 0x54
 801207a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801207c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8012080:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8012084:	440a      	add	r2, r1
 8012086:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012088:	4282      	cmp	r2, r0
 801208a:	bf94      	ite	ls
 801208c:	ebc1 0102 	rsbls	r1, r1, r2
 8012090:	ebc1 0100 	rsbhi	r1, r1, r0
 8012094:	6a3a      	ldr	r2, [r7, #32]
 8012096:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 801209a:	6439      	str	r1, [r7, #64]	; 0x40
 801209c:	d24d      	bcs.n	801213a <forward_lite_conv2d_if32of32wf32+0x172>
 801209e:	b385      	cbz	r5, 8012102 <forward_lite_conv2d_if32of32wf32+0x13a>
 80120a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80120a2:	2a00      	cmp	r2, #0
 80120a4:	f000 80bf 	beq.w	8012226 <forward_lite_conv2d_if32of32wf32+0x25e>
 80120a8:	4659      	mov	r1, fp
 80120aa:	4691      	mov	r9, r2
 80120ac:	46d3      	mov	fp, sl
 80120ae:	f8d7 802c 	ldr.w	r8, [r7, #44]	; 0x2c
 80120b2:	693e      	ldr	r6, [r7, #16]
 80120b4:	2400      	movs	r4, #0
 80120b6:	f8d7 a040 	ldr.w	sl, [r7, #64]	; 0x40
 80120ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80120bc:	3401      	adds	r4, #1
 80120be:	ecb9 0a01 	vldmia	r9!, {s0}
 80120c2:	4640      	mov	r0, r8
 80120c4:	9207      	str	r2, [sp, #28]
 80120c6:	f108 0804 	add.w	r8, r8, #4
 80120ca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80120cc:	e9cd a205 	strd	sl, r2, [sp, #20]
 80120d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80120d2:	9204      	str	r2, [sp, #16]
 80120d4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80120d8:	9203      	str	r2, [sp, #12]
 80120da:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80120de:	9202      	str	r2, [sp, #8]
 80120e0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80120e4:	e9cd 5200 	strd	r5, r2, [sp]
 80120e8:	4632      	mov	r2, r6
 80120ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80120ee:	64b9      	str	r1, [r7, #72]	; 0x48
 80120f0:	445e      	add	r6, fp
 80120f2:	f7ff fe53 	bl	8011d9c <ai_conv2d_kernel_simple_opt_f32.constprop.0>
 80120f6:	42a5      	cmp	r5, r4
 80120f8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80120fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80120fe:	d1dc      	bne.n	80120ba <forward_lite_conv2d_if32of32wf32+0xf2>
 8012100:	46da      	mov	sl, fp
 8012102:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012104:	69b8      	ldr	r0, [r7, #24]
 8012106:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012108:	4401      	add	r1, r0
 801210a:	6978      	ldr	r0, [r7, #20]
 801210c:	3201      	adds	r2, #1
 801210e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8012110:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012112:	627a      	str	r2, [r7, #36]	; 0x24
 8012114:	4401      	add	r1, r0
 8012116:	6339      	str	r1, [r7, #48]	; 0x30
 8012118:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801211a:	1a09      	subs	r1, r1, r0
 801211c:	69f8      	ldr	r0, [r7, #28]
 801211e:	6379      	str	r1, [r7, #52]	; 0x34
 8012120:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012122:	4401      	add	r1, r0
 8012124:	62b9      	str	r1, [r7, #40]	; 0x28
 8012126:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 801212a:	4291      	cmp	r1, r2
 801212c:	d19d      	bne.n	801206a <forward_lite_conv2d_if32of32wf32+0xa2>
 801212e:	375c      	adds	r7, #92	; 0x5c
 8012130:	46bd      	mov	sp, r7
 8012132:	ecbd 8b02 	vpop	{d8}
 8012136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801213a:	466a      	mov	r2, sp
 801213c:	ee08 2a90 	vmov	s17, r2
 8012140:	68fa      	ldr	r2, [r7, #12]
 8012142:	ebad 0d02 	sub.w	sp, sp, r2
 8012146:	aa08      	add	r2, sp, #32
 8012148:	2d00      	cmp	r5, #0
 801214a:	d03d      	beq.n	80121c8 <forward_lite_conv2d_if32of32wf32+0x200>
 801214c:	6938      	ldr	r0, [r7, #16]
 801214e:	4659      	mov	r1, fp
 8012150:	68bc      	ldr	r4, [r7, #8]
 8012152:	46ab      	mov	fp, r5
 8012154:	f8d7 902c 	ldr.w	r9, [r7, #44]	; 0x2c
 8012158:	f04f 0800 	mov.w	r8, #0
 801215c:	6bfe      	ldr	r6, [r7, #60]	; 0x3c
 801215e:	4605      	mov	r5, r0
 8012160:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012162:	b138      	cbz	r0, 8012174 <forward_lite_conv2d_if32of32wf32+0x1ac>
 8012164:	4628      	mov	r0, r5
 8012166:	4694      	mov	ip, r2
 8012168:	f850 eb04 	ldr.w	lr, [r0], #4
 801216c:	42a0      	cmp	r0, r4
 801216e:	f84c eb04 	str.w	lr, [ip], #4
 8012172:	d1f9      	bne.n	8012168 <forward_lite_conv2d_if32of32wf32+0x1a0>
 8012174:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012176:	f108 0801 	add.w	r8, r8, #1
 801217a:	b348      	cbz	r0, 80121d0 <forward_lite_conv2d_if32of32wf32+0x208>
 801217c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801217e:	4455      	add	r5, sl
 8012180:	ecb6 0a01 	vldmia	r6!, {s0}
 8012184:	4454      	add	r4, sl
 8012186:	9007      	str	r0, [sp, #28]
 8012188:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801218a:	9006      	str	r0, [sp, #24]
 801218c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801218e:	9005      	str	r0, [sp, #20]
 8012190:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012192:	9004      	str	r0, [sp, #16]
 8012194:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8012198:	9003      	str	r0, [sp, #12]
 801219a:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 801219e:	9002      	str	r0, [sp, #8]
 80121a0:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80121a4:	e9cd b000 	strd	fp, r0, [sp]
 80121a8:	4648      	mov	r0, r9
 80121aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80121ae:	f109 0904 	add.w	r9, r9, #4
 80121b2:	e9c7 2111 	strd	r2, r1, [r7, #68]	; 0x44
 80121b6:	f7ff fdf1 	bl	8011d9c <ai_conv2d_kernel_simple_opt_f32.constprop.0>
 80121ba:	45d8      	cmp	r8, fp
 80121bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80121c0:	e9d7 2111 	ldrd	r2, r1, [r7, #68]	; 0x44
 80121c4:	d1cc      	bne.n	8012160 <forward_lite_conv2d_if32of32wf32+0x198>
 80121c6:	465d      	mov	r5, fp
 80121c8:	ee18 2a90 	vmov	r2, s17
 80121cc:	4695      	mov	sp, r2
 80121ce:	e798      	b.n	8012102 <forward_lite_conv2d_if32of32wf32+0x13a>
 80121d0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80121d2:	eeb0 0a48 	vmov.f32	s0, s16
 80121d6:	4455      	add	r5, sl
 80121d8:	4454      	add	r4, sl
 80121da:	9007      	str	r0, [sp, #28]
 80121dc:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80121de:	9006      	str	r0, [sp, #24]
 80121e0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80121e2:	9005      	str	r0, [sp, #20]
 80121e4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80121e6:	9004      	str	r0, [sp, #16]
 80121e8:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80121ec:	9003      	str	r0, [sp, #12]
 80121ee:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80121f2:	9002      	str	r0, [sp, #8]
 80121f4:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80121f8:	e9cd b000 	strd	fp, r0, [sp]
 80121fc:	4648      	mov	r0, r9
 80121fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8012202:	f109 0904 	add.w	r9, r9, #4
 8012206:	e9c7 2111 	strd	r2, r1, [r7, #68]	; 0x44
 801220a:	f7ff fdc7 	bl	8011d9c <ai_conv2d_kernel_simple_opt_f32.constprop.0>
 801220e:	45c3      	cmp	fp, r8
 8012210:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8012214:	e9d7 2111 	ldrd	r2, r1, [r7, #68]	; 0x44
 8012218:	d1a2      	bne.n	8012160 <forward_lite_conv2d_if32of32wf32+0x198>
 801221a:	e7d4      	b.n	80121c6 <forward_lite_conv2d_if32of32wf32+0x1fe>
 801221c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801221e:	f8d7 b004 	ldr.w	fp, [r7, #4]
 8012222:	657a      	str	r2, [r7, #84]	; 0x54
 8012224:	e729      	b.n	801207a <forward_lite_conv2d_if32of32wf32+0xb2>
 8012226:	4659      	mov	r1, fp
 8012228:	f8d7 802c 	ldr.w	r8, [r7, #44]	; 0x2c
 801222c:	46d3      	mov	fp, sl
 801222e:	693e      	ldr	r6, [r7, #16]
 8012230:	4614      	mov	r4, r2
 8012232:	f8d7 9054 	ldr.w	r9, [r7, #84]	; 0x54
 8012236:	f8d7 a040 	ldr.w	sl, [r7, #64]	; 0x40
 801223a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801223c:	3401      	adds	r4, #1
 801223e:	4640      	mov	r0, r8
 8012240:	eeb0 0a48 	vmov.f32	s0, s16
 8012244:	9207      	str	r2, [sp, #28]
 8012246:	f108 0804 	add.w	r8, r8, #4
 801224a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801224c:	f8cd 9010 	str.w	r9, [sp, #16]
 8012250:	e9cd a205 	strd	sl, r2, [sp, #20]
 8012254:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8012258:	9203      	str	r2, [sp, #12]
 801225a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801225e:	9202      	str	r2, [sp, #8]
 8012260:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8012264:	e9cd 5200 	strd	r5, r2, [sp]
 8012268:	4632      	mov	r2, r6
 801226a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801226e:	6579      	str	r1, [r7, #84]	; 0x54
 8012270:	445e      	add	r6, fp
 8012272:	f7ff fd93 	bl	8011d9c <ai_conv2d_kernel_simple_opt_f32.constprop.0>
 8012276:	42a5      	cmp	r5, r4
 8012278:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801227a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801227e:	d1dc      	bne.n	801223a <forward_lite_conv2d_if32of32wf32+0x272>
 8012280:	e73e      	b.n	8012100 <forward_lite_conv2d_if32of32wf32+0x138>
 8012282:	bf00      	nop
 8012284:	00000000 	.word	0x00000000

08012288 <forward_lite_dense_if32of32wf32>:
 8012288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801228c:	ed2d 8b0c 	vpush	{d8-d13}
 8012290:	e9dd 6415 	ldrd	r6, r4, [sp, #84]	; 0x54
 8012294:	eb00 0784 	add.w	r7, r0, r4, lsl #2
 8012298:	4287      	cmp	r7, r0
 801229a:	f240 8105 	bls.w	80124a8 <forward_lite_dense_if32of32wf32+0x220>
 801229e:	f1a6 0810 	sub.w	r8, r6, #16
 80122a2:	ea4f 0986 	mov.w	r9, r6, lsl #2
 80122a6:	4605      	mov	r5, r0
 80122a8:	f006 0b0f 	and.w	fp, r6, #15
 80122ac:	ea4f 1818 	mov.w	r8, r8, lsr #4
 80122b0:	f108 0801 	add.w	r8, r8, #1
 80122b4:	ea4f 1a88 	mov.w	sl, r8, lsl #6
 80122b8:	eb01 1888 	add.w	r8, r1, r8, lsl #6
 80122bc:	2e0f      	cmp	r6, #15
 80122be:	ed9f 7a85 	vldr	s14, [pc, #532]	; 80124d4 <forward_lite_dense_if32of32wf32+0x24c>
 80122c2:	f240 8102 	bls.w	80124ca <forward_lite_dense_if32of32wf32+0x242>
 80122c6:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 80122ca:	f102 0440 	add.w	r4, r2, #64	; 0x40
 80122ce:	46b6      	mov	lr, r6
 80122d0:	ed54 6a0f 	vldr	s13, [r4, #-60]	; 0xffffffc4
 80122d4:	f1ae 0e10 	sub.w	lr, lr, #16
 80122d8:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 80122dc:	3440      	adds	r4, #64	; 0x40
 80122de:	ed5c 4a10 	vldr	s9, [ip, #-64]	; 0xffffffc0
 80122e2:	f1be 0f0f 	cmp.w	lr, #15
 80122e6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80122ea:	ed14 5a20 	vldr	s10, [r4, #-128]	; 0xffffff80
 80122ee:	ed5c 5a0e 	vldr	s11, [ip, #-56]	; 0xffffffc8
 80122f2:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 80122f6:	ed14 6a1e 	vldr	s12, [r4, #-120]	; 0xffffff88
 80122fa:	eee4 7a85 	vfma.f32	s15, s9, s10
 80122fe:	ed54 6a1d 	vldr	s13, [r4, #-116]	; 0xffffff8c
 8012302:	ed1c da1d 	vldr	s26, [ip, #-116]	; 0xffffff8c
 8012306:	ed5c ca1c 	vldr	s25, [ip, #-112]	; 0xffffff90
 801230a:	ed14 ca1c 	vldr	s24, [r4, #-112]	; 0xffffff90
 801230e:	ed5c ba1b 	vldr	s23, [ip, #-108]	; 0xffffff94
 8012312:	ed14 ba1b 	vldr	s22, [r4, #-108]	; 0xffffff94
 8012316:	eee5 7a86 	vfma.f32	s15, s11, s12
 801231a:	ed5c aa1a 	vldr	s21, [ip, #-104]	; 0xffffff98
 801231e:	ed14 aa1a 	vldr	s20, [r4, #-104]	; 0xffffff98
 8012322:	ed5c 9a19 	vldr	s19, [ip, #-100]	; 0xffffff9c
 8012326:	ed14 9a19 	vldr	s18, [r4, #-100]	; 0xffffff9c
 801232a:	ed5c 8a18 	vldr	s17, [ip, #-96]	; 0xffffffa0
 801232e:	ed14 8a18 	vldr	s16, [r4, #-96]	; 0xffffffa0
 8012332:	eeed 7a26 	vfma.f32	s15, s26, s13
 8012336:	ed1c 0a17 	vldr	s0, [ip, #-92]	; 0xffffffa4
 801233a:	ed54 0a17 	vldr	s1, [r4, #-92]	; 0xffffffa4
 801233e:	ed1c 1a16 	vldr	s2, [ip, #-88]	; 0xffffffa8
 8012342:	ed54 1a16 	vldr	s3, [r4, #-88]	; 0xffffffa8
 8012346:	ed1c 2a15 	vldr	s4, [ip, #-84]	; 0xffffffac
 801234a:	ed54 2a15 	vldr	s5, [r4, #-84]	; 0xffffffac
 801234e:	eeec 7a8c 	vfma.f32	s15, s25, s24
 8012352:	ed1c 3a14 	vldr	s6, [ip, #-80]	; 0xffffffb0
 8012356:	ed54 3a14 	vldr	s7, [r4, #-80]	; 0xffffffb0
 801235a:	ed1c 4a13 	vldr	s8, [ip, #-76]	; 0xffffffb4
 801235e:	ed54 4a13 	vldr	s9, [r4, #-76]	; 0xffffffb4
 8012362:	ed1c 5a12 	vldr	s10, [ip, #-72]	; 0xffffffb8
 8012366:	ed54 5a12 	vldr	s11, [r4, #-72]	; 0xffffffb8
 801236a:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 801236e:	ed1c 6a11 	vldr	s12, [ip, #-68]	; 0xffffffbc
 8012372:	ed54 6a11 	vldr	s13, [r4, #-68]	; 0xffffffbc
 8012376:	eeea 7a8a 	vfma.f32	s15, s21, s20
 801237a:	eee9 7a89 	vfma.f32	s15, s19, s18
 801237e:	eee8 7a88 	vfma.f32	s15, s17, s16
 8012382:	eee0 7a20 	vfma.f32	s15, s0, s1
 8012386:	eee1 7a21 	vfma.f32	s15, s2, s3
 801238a:	eee2 7a22 	vfma.f32	s15, s4, s5
 801238e:	eee3 7a23 	vfma.f32	s15, s6, s7
 8012392:	eee4 7a24 	vfma.f32	s15, s8, s9
 8012396:	eee5 7a25 	vfma.f32	s15, s10, s11
 801239a:	eee6 7a26 	vfma.f32	s15, s12, s13
 801239e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80123a2:	d895      	bhi.n	80122d0 <forward_lite_dense_if32of32wf32+0x48>
 80123a4:	eb02 0e0a 	add.w	lr, r2, sl
 80123a8:	465c      	mov	r4, fp
 80123aa:	46c4      	mov	ip, r8
 80123ac:	2c00      	cmp	r4, #0
 80123ae:	d075      	beq.n	801249c <forward_lite_dense_if32of32wf32+0x214>
 80123b0:	eddc 6a00 	vldr	s13, [ip]
 80123b4:	2c01      	cmp	r4, #1
 80123b6:	edde 7a00 	vldr	s15, [lr]
 80123ba:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80123be:	d06d      	beq.n	801249c <forward_lite_dense_if32of32wf32+0x214>
 80123c0:	eddc 6a01 	vldr	s13, [ip, #4]
 80123c4:	2c02      	cmp	r4, #2
 80123c6:	edde 7a01 	vldr	s15, [lr, #4]
 80123ca:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80123ce:	d065      	beq.n	801249c <forward_lite_dense_if32of32wf32+0x214>
 80123d0:	eddc 6a02 	vldr	s13, [ip, #8]
 80123d4:	2c03      	cmp	r4, #3
 80123d6:	edde 7a02 	vldr	s15, [lr, #8]
 80123da:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80123de:	d05d      	beq.n	801249c <forward_lite_dense_if32of32wf32+0x214>
 80123e0:	eddc 6a03 	vldr	s13, [ip, #12]
 80123e4:	2c04      	cmp	r4, #4
 80123e6:	edde 7a03 	vldr	s15, [lr, #12]
 80123ea:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80123ee:	d055      	beq.n	801249c <forward_lite_dense_if32of32wf32+0x214>
 80123f0:	eddc 6a04 	vldr	s13, [ip, #16]
 80123f4:	2c05      	cmp	r4, #5
 80123f6:	edde 7a04 	vldr	s15, [lr, #16]
 80123fa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80123fe:	d04d      	beq.n	801249c <forward_lite_dense_if32of32wf32+0x214>
 8012400:	eddc 6a05 	vldr	s13, [ip, #20]
 8012404:	2c06      	cmp	r4, #6
 8012406:	edde 7a05 	vldr	s15, [lr, #20]
 801240a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801240e:	d045      	beq.n	801249c <forward_lite_dense_if32of32wf32+0x214>
 8012410:	eddc 6a06 	vldr	s13, [ip, #24]
 8012414:	2c07      	cmp	r4, #7
 8012416:	edde 7a06 	vldr	s15, [lr, #24]
 801241a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801241e:	d03d      	beq.n	801249c <forward_lite_dense_if32of32wf32+0x214>
 8012420:	eddc 6a07 	vldr	s13, [ip, #28]
 8012424:	2c08      	cmp	r4, #8
 8012426:	edde 7a07 	vldr	s15, [lr, #28]
 801242a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801242e:	d035      	beq.n	801249c <forward_lite_dense_if32of32wf32+0x214>
 8012430:	eddc 6a08 	vldr	s13, [ip, #32]
 8012434:	2c09      	cmp	r4, #9
 8012436:	edde 7a08 	vldr	s15, [lr, #32]
 801243a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801243e:	d02d      	beq.n	801249c <forward_lite_dense_if32of32wf32+0x214>
 8012440:	eddc 6a09 	vldr	s13, [ip, #36]	; 0x24
 8012444:	2c0a      	cmp	r4, #10
 8012446:	edde 7a09 	vldr	s15, [lr, #36]	; 0x24
 801244a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801244e:	d025      	beq.n	801249c <forward_lite_dense_if32of32wf32+0x214>
 8012450:	eddc 6a0a 	vldr	s13, [ip, #40]	; 0x28
 8012454:	2c0b      	cmp	r4, #11
 8012456:	edde 7a0a 	vldr	s15, [lr, #40]	; 0x28
 801245a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801245e:	d01d      	beq.n	801249c <forward_lite_dense_if32of32wf32+0x214>
 8012460:	eddc 6a0b 	vldr	s13, [ip, #44]	; 0x2c
 8012464:	2c0c      	cmp	r4, #12
 8012466:	edde 7a0b 	vldr	s15, [lr, #44]	; 0x2c
 801246a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801246e:	d015      	beq.n	801249c <forward_lite_dense_if32of32wf32+0x214>
 8012470:	eddc 6a0c 	vldr	s13, [ip, #48]	; 0x30
 8012474:	3c0d      	subs	r4, #13
 8012476:	edde 7a0c 	vldr	s15, [lr, #48]	; 0x30
 801247a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801247e:	d00d      	beq.n	801249c <forward_lite_dense_if32of32wf32+0x214>
 8012480:	eddc 6a0d 	vldr	s13, [ip, #52]	; 0x34
 8012484:	2c01      	cmp	r4, #1
 8012486:	edde 7a0d 	vldr	s15, [lr, #52]	; 0x34
 801248a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801248e:	d005      	beq.n	801249c <forward_lite_dense_if32of32wf32+0x214>
 8012490:	edde 6a0e 	vldr	s13, [lr, #56]	; 0x38
 8012494:	eddc 7a0e 	vldr	s15, [ip, #56]	; 0x38
 8012498:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801249c:	eca5 7a01 	vstmia	r5!, {s14}
 80124a0:	42af      	cmp	r7, r5
 80124a2:	444a      	add	r2, r9
 80124a4:	f63f af0a 	bhi.w	80122bc <forward_lite_dense_if32of32wf32+0x34>
 80124a8:	b15b      	cbz	r3, 80124c2 <forward_lite_dense_if32of32wf32+0x23a>
 80124aa:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80124ac:	b14a      	cbz	r2, 80124c2 <forward_lite_dense_if32of32wf32+0x23a>
 80124ae:	edd0 7a00 	vldr	s15, [r0]
 80124b2:	ecb3 7a01 	vldmia	r3!, {s14}
 80124b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80124ba:	ece0 7a01 	vstmia	r0!, {s15}
 80124be:	4287      	cmp	r7, r0
 80124c0:	d1f5      	bne.n	80124ae <forward_lite_dense_if32of32wf32+0x226>
 80124c2:	ecbd 8b0c 	vpop	{d8-d13}
 80124c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124ca:	4634      	mov	r4, r6
 80124cc:	4696      	mov	lr, r2
 80124ce:	468c      	mov	ip, r1
 80124d0:	e76c      	b.n	80123ac <forward_lite_dense_if32of32wf32+0x124>
 80124d2:	bf00      	nop
 80124d4:	00000000 	.word	0x00000000

080124d8 <st_int8_copy>:
 80124d8:	4288      	cmp	r0, r1
 80124da:	d010      	beq.n	80124fe <st_int8_copy+0x26>
 80124dc:	b17a      	cbz	r2, 80124fe <st_int8_copy+0x26>
 80124de:	4288      	cmp	r0, r1
 80124e0:	eb00 0302 	add.w	r3, r0, r2
 80124e4:	d20c      	bcs.n	8012500 <st_int8_copy+0x28>
 80124e6:	428b      	cmp	r3, r1
 80124e8:	d90a      	bls.n	8012500 <st_int8_copy+0x28>
 80124ea:	4283      	cmp	r3, r0
 80124ec:	440a      	add	r2, r1
 80124ee:	d906      	bls.n	80124fe <st_int8_copy+0x26>
 80124f0:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 80124f4:	4283      	cmp	r3, r0
 80124f6:	f802 1d01 	strb.w	r1, [r2, #-1]!
 80124fa:	d1f9      	bne.n	80124f0 <st_int8_copy+0x18>
 80124fc:	4770      	bx	lr
 80124fe:	4770      	bx	lr
 8012500:	078b      	lsls	r3, r1, #30
 8012502:	d102      	bne.n	801250a <st_int8_copy+0x32>
 8012504:	e008      	b.n	8012518 <st_int8_copy+0x40>
 8012506:	2a00      	cmp	r2, #0
 8012508:	d04d      	beq.n	80125a6 <st_int8_copy+0xce>
 801250a:	f910 3b01 	ldrsb.w	r3, [r0], #1
 801250e:	3a01      	subs	r2, #1
 8012510:	f801 3b01 	strb.w	r3, [r1], #1
 8012514:	078b      	lsls	r3, r1, #30
 8012516:	d1f6      	bne.n	8012506 <st_int8_copy+0x2e>
 8012518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801251c:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 8012520:	d05e      	beq.n	80125e0 <st_int8_copy+0x108>
 8012522:	ea40 0301 	orr.w	r3, r0, r1
 8012526:	075b      	lsls	r3, r3, #29
 8012528:	d13e      	bne.n	80125a8 <st_int8_copy+0xd0>
 801252a:	f10e 33ff 	add.w	r3, lr, #4294967295
 801252e:	2b01      	cmp	r3, #1
 8012530:	d93a      	bls.n	80125a8 <st_int8_copy+0xd0>
 8012532:	f100 0310 	add.w	r3, r0, #16
 8012536:	ea4f 140e 	mov.w	r4, lr, lsl #4
 801253a:	f101 0c10 	add.w	ip, r1, #16
 801253e:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 8012542:	3310      	adds	r3, #16
 8012544:	f10c 0c10 	add.w	ip, ip, #16
 8012548:	ed13 6b08 	vldr	d6, [r3, #-32]	; 0xffffffe0
 801254c:	ed13 7b06 	vldr	d7, [r3, #-24]	; 0xffffffe8
 8012550:	4573      	cmp	r3, lr
 8012552:	ed0c 6b08 	vstr	d6, [ip, #-32]	; 0xffffffe0
 8012556:	ed0c 7b06 	vstr	d7, [ip, #-24]	; 0xffffffe8
 801255a:	d1f2      	bne.n	8012542 <st_int8_copy+0x6a>
 801255c:	f3c2 0381 	ubfx	r3, r2, #2, #2
 8012560:	4421      	add	r1, r4
 8012562:	4420      	add	r0, r4
 8012564:	f002 0203 	and.w	r2, r2, #3
 8012568:	b16b      	cbz	r3, 8012586 <st_int8_copy+0xae>
 801256a:	6804      	ldr	r4, [r0, #0]
 801256c:	600c      	str	r4, [r1, #0]
 801256e:	1e5c      	subs	r4, r3, #1
 8012570:	d005      	beq.n	801257e <st_int8_copy+0xa6>
 8012572:	6845      	ldr	r5, [r0, #4]
 8012574:	2c01      	cmp	r4, #1
 8012576:	604d      	str	r5, [r1, #4]
 8012578:	d001      	beq.n	801257e <st_int8_copy+0xa6>
 801257a:	6884      	ldr	r4, [r0, #8]
 801257c:	608c      	str	r4, [r1, #8]
 801257e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8012582:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8012586:	b162      	cbz	r2, 80125a2 <st_int8_copy+0xca>
 8012588:	f990 3000 	ldrsb.w	r3, [r0]
 801258c:	3a01      	subs	r2, #1
 801258e:	700b      	strb	r3, [r1, #0]
 8012590:	d007      	beq.n	80125a2 <st_int8_copy+0xca>
 8012592:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8012596:	2a01      	cmp	r2, #1
 8012598:	704b      	strb	r3, [r1, #1]
 801259a:	d002      	beq.n	80125a2 <st_int8_copy+0xca>
 801259c:	f990 3002 	ldrsb.w	r3, [r0, #2]
 80125a0:	708b      	strb	r3, [r1, #2]
 80125a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125a6:	4770      	bx	lr
 80125a8:	ea4f 140e 	mov.w	r4, lr, lsl #4
 80125ac:	460b      	mov	r3, r1
 80125ae:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 80125b2:	4684      	mov	ip, r0
 80125b4:	f8dc 8000 	ldr.w	r8, [ip]
 80125b8:	3310      	adds	r3, #16
 80125ba:	f8dc 7004 	ldr.w	r7, [ip, #4]
 80125be:	f10c 0c10 	add.w	ip, ip, #16
 80125c2:	f85c 6c08 	ldr.w	r6, [ip, #-8]
 80125c6:	f85c 5c04 	ldr.w	r5, [ip, #-4]
 80125ca:	f843 8c10 	str.w	r8, [r3, #-16]
 80125ce:	f843 7c0c 	str.w	r7, [r3, #-12]
 80125d2:	f843 6c08 	str.w	r6, [r3, #-8]
 80125d6:	f843 5c04 	str.w	r5, [r3, #-4]
 80125da:	459e      	cmp	lr, r3
 80125dc:	d1ea      	bne.n	80125b4 <st_int8_copy+0xdc>
 80125de:	e7bd      	b.n	801255c <st_int8_copy+0x84>
 80125e0:	0893      	lsrs	r3, r2, #2
 80125e2:	f002 0203 	and.w	r2, r2, #3
 80125e6:	e7bf      	b.n	8012568 <st_int8_copy+0x90>

080125e8 <ai_array_to_buffer_fmt>:
 80125e8:	f3c0 4343 	ubfx	r3, r0, #17, #4
 80125ec:	2b02      	cmp	r3, #2
 80125ee:	d050      	beq.n	8012692 <ai_array_to_buffer_fmt+0xaa>
 80125f0:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 80125f4:	4b29      	ldr	r3, [pc, #164]	; (801269c <ai_array_to_buffer_fmt+0xb4>)
 80125f6:	429a      	cmp	r2, r3
 80125f8:	d00b      	beq.n	8012612 <ai_array_to_buffer_fmt+0x2a>
 80125fa:	dc1c      	bgt.n	8012636 <ai_array_to_buffer_fmt+0x4e>
 80125fc:	4b28      	ldr	r3, [pc, #160]	; (80126a0 <ai_array_to_buffer_fmt+0xb8>)
 80125fe:	429a      	cmp	r2, r3
 8012600:	d007      	beq.n	8012612 <ai_array_to_buffer_fmt+0x2a>
 8012602:	dd0b      	ble.n	801261c <ai_array_to_buffer_fmt+0x34>
 8012604:	4b27      	ldr	r3, [pc, #156]	; (80126a4 <ai_array_to_buffer_fmt+0xbc>)
 8012606:	429a      	cmp	r2, r3
 8012608:	d003      	beq.n	8012612 <ai_array_to_buffer_fmt+0x2a>
 801260a:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 801260e:	429a      	cmp	r2, r3
 8012610:	d131      	bne.n	8012676 <ai_array_to_buffer_fmt+0x8e>
 8012612:	4613      	mov	r3, r2
 8012614:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8012618:	4318      	orrs	r0, r3
 801261a:	4770      	bx	lr
 801261c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8012620:	429a      	cmp	r2, r3
 8012622:	d0f6      	beq.n	8012612 <ai_array_to_buffer_fmt+0x2a>
 8012624:	dd2c      	ble.n	8012680 <ai_array_to_buffer_fmt+0x98>
 8012626:	4b20      	ldr	r3, [pc, #128]	; (80126a8 <ai_array_to_buffer_fmt+0xc0>)
 8012628:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 801262c:	429a      	cmp	r2, r3
 801262e:	bf18      	it	ne
 8012630:	2340      	movne	r3, #64	; 0x40
 8012632:	4318      	orrs	r0, r3
 8012634:	4770      	bx	lr
 8012636:	4b1d      	ldr	r3, [pc, #116]	; (80126ac <ai_array_to_buffer_fmt+0xc4>)
 8012638:	429a      	cmp	r2, r3
 801263a:	d0ea      	beq.n	8012612 <ai_array_to_buffer_fmt+0x2a>
 801263c:	dd0e      	ble.n	801265c <ai_array_to_buffer_fmt+0x74>
 801263e:	4b1c      	ldr	r3, [pc, #112]	; (80126b0 <ai_array_to_buffer_fmt+0xc8>)
 8012640:	429a      	cmp	r2, r3
 8012642:	d0e6      	beq.n	8012612 <ai_array_to_buffer_fmt+0x2a>
 8012644:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 8012648:	429a      	cmp	r2, r3
 801264a:	d0e2      	beq.n	8012612 <ai_array_to_buffer_fmt+0x2a>
 801264c:	4b19      	ldr	r3, [pc, #100]	; (80126b4 <ai_array_to_buffer_fmt+0xcc>)
 801264e:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8012652:	429a      	cmp	r2, r3
 8012654:	bf18      	it	ne
 8012656:	2340      	movne	r3, #64	; 0x40
 8012658:	4318      	orrs	r0, r3
 801265a:	4770      	bx	lr
 801265c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8012660:	429a      	cmp	r2, r3
 8012662:	d0d6      	beq.n	8012612 <ai_array_to_buffer_fmt+0x2a>
 8012664:	3307      	adds	r3, #7
 8012666:	429a      	cmp	r2, r3
 8012668:	d0d3      	beq.n	8012612 <ai_array_to_buffer_fmt+0x2a>
 801266a:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 801266e:	429a      	cmp	r2, r3
 8012670:	bf18      	it	ne
 8012672:	2340      	movne	r3, #64	; 0x40
 8012674:	e7ce      	b.n	8012614 <ai_array_to_buffer_fmt+0x2c>
 8012676:	4b10      	ldr	r3, [pc, #64]	; (80126b8 <ai_array_to_buffer_fmt+0xd0>)
 8012678:	429a      	cmp	r2, r3
 801267a:	bf18      	it	ne
 801267c:	2340      	movne	r3, #64	; 0x40
 801267e:	e7c9      	b.n	8012614 <ai_array_to_buffer_fmt+0x2c>
 8012680:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8012684:	429a      	cmp	r2, r3
 8012686:	d0c4      	beq.n	8012612 <ai_array_to_buffer_fmt+0x2a>
 8012688:	3380      	adds	r3, #128	; 0x80
 801268a:	429a      	cmp	r2, r3
 801268c:	bf18      	it	ne
 801268e:	2340      	movne	r3, #64	; 0x40
 8012690:	e7c0      	b.n	8012614 <ai_array_to_buffer_fmt+0x2c>
 8012692:	4b0a      	ldr	r3, [pc, #40]	; (80126bc <ai_array_to_buffer_fmt+0xd4>)
 8012694:	4003      	ands	r3, r0
 8012696:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801269a:	e7bb      	b.n	8012614 <ai_array_to_buffer_fmt+0x2c>
 801269c:	00840040 	.word	0x00840040
 80126a0:	00040840 	.word	0x00040840
 80126a4:	00041040 	.word	0x00041040
 80126a8:	00040447 	.word	0x00040447
 80126ac:	00840840 	.word	0x00840840
 80126b0:	00841040 	.word	0x00841040
 80126b4:	0084084f 	.word	0x0084084f
 80126b8:	0004084f 	.word	0x0004084f
 80126bc:	00803fff 	.word	0x00803fff

080126c0 <ai_array_get_byte_size>:
 80126c0:	b319      	cbz	r1, 801270a <ai_array_get_byte_size+0x4a>
 80126c2:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 80126c6:	f3c0 4243 	ubfx	r2, r0, #17, #4
 80126ca:	f3c0 5c41 	ubfx	ip, r0, #21, #2
 80126ce:	11c0      	asrs	r0, r0, #7
 80126d0:	fb03 f101 	mul.w	r1, r3, r1
 80126d4:	2a04      	cmp	r2, #4
 80126d6:	f101 0107 	add.w	r1, r1, #7
 80126da:	f021 0107 	bic.w	r1, r1, #7
 80126de:	fa21 f10c 	lsr.w	r1, r1, ip
 80126e2:	d00b      	beq.n	80126fc <ai_array_get_byte_size+0x3c>
 80126e4:	2a08      	cmp	r2, #8
 80126e6:	d002      	beq.n	80126ee <ai_array_get_byte_size+0x2e>
 80126e8:	3107      	adds	r1, #7
 80126ea:	08c8      	lsrs	r0, r1, #3
 80126ec:	4770      	bx	lr
 80126ee:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80126f2:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 80126f6:	3107      	adds	r1, #7
 80126f8:	08c8      	lsrs	r0, r1, #3
 80126fa:	4770      	bx	lr
 80126fc:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8012700:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 8012704:	3107      	adds	r1, #7
 8012706:	08c8      	lsrs	r0, r1, #3
 8012708:	4770      	bx	lr
 801270a:	4608      	mov	r0, r1
 801270c:	4770      	bx	lr
 801270e:	bf00      	nop

08012710 <ai_array_get_data_byte_size>:
 8012710:	b161      	cbz	r1, 801272c <ai_array_get_data_byte_size+0x1c>
 8012712:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8012716:	f3c0 5241 	ubfx	r2, r0, #21, #2
 801271a:	fb03 f101 	mul.w	r1, r3, r1
 801271e:	1dc8      	adds	r0, r1, #7
 8012720:	f020 0007 	bic.w	r0, r0, #7
 8012724:	40d0      	lsrs	r0, r2
 8012726:	3007      	adds	r0, #7
 8012728:	08c0      	lsrs	r0, r0, #3
 801272a:	4770      	bx	lr
 801272c:	4608      	mov	r0, r1
 801272e:	4770      	bx	lr

08012730 <ai_version_get>:
 8012730:	0212      	lsls	r2, r2, #8
 8012732:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8012736:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 801273a:	4770      	bx	lr

0801273c <get_tensor_byte_size>:
 801273c:	b430      	push	{r4, r5}
 801273e:	6985      	ldr	r5, [r0, #24]
 8012740:	68c4      	ldr	r4, [r0, #12]
 8012742:	6941      	ldr	r1, [r0, #20]
 8012744:	4b06      	ldr	r3, [pc, #24]	; (8012760 <get_tensor_byte_size+0x24>)
 8012746:	6828      	ldr	r0, [r5, #0]
 8012748:	4a06      	ldr	r2, [pc, #24]	; (8012764 <get_tensor_byte_size+0x28>)
 801274a:	4003      	ands	r3, r0
 801274c:	68c9      	ldr	r1, [r1, #12]
 801274e:	68e0      	ldr	r0, [r4, #12]
 8012750:	4293      	cmp	r3, r2
 8012752:	fb01 f000 	mul.w	r0, r1, r0
 8012756:	d101      	bne.n	801275c <get_tensor_byte_size+0x20>
 8012758:	3007      	adds	r0, #7
 801275a:	08c0      	lsrs	r0, r0, #3
 801275c:	bc30      	pop	{r4, r5}
 801275e:	4770      	bx	lr
 8012760:	017fffff 	.word	0x017fffff
 8012764:	000400c0 	.word	0x000400c0

08012768 <__errno>:
 8012768:	4b01      	ldr	r3, [pc, #4]	; (8012770 <__errno+0x8>)
 801276a:	6818      	ldr	r0, [r3, #0]
 801276c:	4770      	bx	lr
 801276e:	bf00      	nop
 8012770:	2000145c 	.word	0x2000145c

08012774 <__libc_init_array>:
 8012774:	b570      	push	{r4, r5, r6, lr}
 8012776:	4d0d      	ldr	r5, [pc, #52]	; (80127ac <__libc_init_array+0x38>)
 8012778:	4c0d      	ldr	r4, [pc, #52]	; (80127b0 <__libc_init_array+0x3c>)
 801277a:	1b64      	subs	r4, r4, r5
 801277c:	10a4      	asrs	r4, r4, #2
 801277e:	2600      	movs	r6, #0
 8012780:	42a6      	cmp	r6, r4
 8012782:	d109      	bne.n	8012798 <__libc_init_array+0x24>
 8012784:	4d0b      	ldr	r5, [pc, #44]	; (80127b4 <__libc_init_array+0x40>)
 8012786:	4c0c      	ldr	r4, [pc, #48]	; (80127b8 <__libc_init_array+0x44>)
 8012788:	f006 f8b6 	bl	80188f8 <_init>
 801278c:	1b64      	subs	r4, r4, r5
 801278e:	10a4      	asrs	r4, r4, #2
 8012790:	2600      	movs	r6, #0
 8012792:	42a6      	cmp	r6, r4
 8012794:	d105      	bne.n	80127a2 <__libc_init_array+0x2e>
 8012796:	bd70      	pop	{r4, r5, r6, pc}
 8012798:	f855 3b04 	ldr.w	r3, [r5], #4
 801279c:	4798      	blx	r3
 801279e:	3601      	adds	r6, #1
 80127a0:	e7ee      	b.n	8012780 <__libc_init_array+0xc>
 80127a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80127a6:	4798      	blx	r3
 80127a8:	3601      	adds	r6, #1
 80127aa:	e7f2      	b.n	8012792 <__libc_init_array+0x1e>
 80127ac:	0805de40 	.word	0x0805de40
 80127b0:	0805de40 	.word	0x0805de40
 80127b4:	0805de40 	.word	0x0805de40
 80127b8:	0805de44 	.word	0x0805de44

080127bc <malloc>:
 80127bc:	4b02      	ldr	r3, [pc, #8]	; (80127c8 <malloc+0xc>)
 80127be:	4601      	mov	r1, r0
 80127c0:	6818      	ldr	r0, [r3, #0]
 80127c2:	f000 b885 	b.w	80128d0 <_malloc_r>
 80127c6:	bf00      	nop
 80127c8:	2000145c 	.word	0x2000145c

080127cc <memcpy>:
 80127cc:	440a      	add	r2, r1
 80127ce:	4291      	cmp	r1, r2
 80127d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80127d4:	d100      	bne.n	80127d8 <memcpy+0xc>
 80127d6:	4770      	bx	lr
 80127d8:	b510      	push	{r4, lr}
 80127da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80127de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80127e2:	4291      	cmp	r1, r2
 80127e4:	d1f9      	bne.n	80127da <memcpy+0xe>
 80127e6:	bd10      	pop	{r4, pc}

080127e8 <memset>:
 80127e8:	4402      	add	r2, r0
 80127ea:	4603      	mov	r3, r0
 80127ec:	4293      	cmp	r3, r2
 80127ee:	d100      	bne.n	80127f2 <memset+0xa>
 80127f0:	4770      	bx	lr
 80127f2:	f803 1b01 	strb.w	r1, [r3], #1
 80127f6:	e7f9      	b.n	80127ec <memset+0x4>

080127f8 <_free_r>:
 80127f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80127fa:	2900      	cmp	r1, #0
 80127fc:	d044      	beq.n	8012888 <_free_r+0x90>
 80127fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012802:	9001      	str	r0, [sp, #4]
 8012804:	2b00      	cmp	r3, #0
 8012806:	f1a1 0404 	sub.w	r4, r1, #4
 801280a:	bfb8      	it	lt
 801280c:	18e4      	addlt	r4, r4, r3
 801280e:	f003 f96b 	bl	8015ae8 <__malloc_lock>
 8012812:	4a1e      	ldr	r2, [pc, #120]	; (801288c <_free_r+0x94>)
 8012814:	9801      	ldr	r0, [sp, #4]
 8012816:	6813      	ldr	r3, [r2, #0]
 8012818:	b933      	cbnz	r3, 8012828 <_free_r+0x30>
 801281a:	6063      	str	r3, [r4, #4]
 801281c:	6014      	str	r4, [r2, #0]
 801281e:	b003      	add	sp, #12
 8012820:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012824:	f003 b966 	b.w	8015af4 <__malloc_unlock>
 8012828:	42a3      	cmp	r3, r4
 801282a:	d908      	bls.n	801283e <_free_r+0x46>
 801282c:	6825      	ldr	r5, [r4, #0]
 801282e:	1961      	adds	r1, r4, r5
 8012830:	428b      	cmp	r3, r1
 8012832:	bf01      	itttt	eq
 8012834:	6819      	ldreq	r1, [r3, #0]
 8012836:	685b      	ldreq	r3, [r3, #4]
 8012838:	1949      	addeq	r1, r1, r5
 801283a:	6021      	streq	r1, [r4, #0]
 801283c:	e7ed      	b.n	801281a <_free_r+0x22>
 801283e:	461a      	mov	r2, r3
 8012840:	685b      	ldr	r3, [r3, #4]
 8012842:	b10b      	cbz	r3, 8012848 <_free_r+0x50>
 8012844:	42a3      	cmp	r3, r4
 8012846:	d9fa      	bls.n	801283e <_free_r+0x46>
 8012848:	6811      	ldr	r1, [r2, #0]
 801284a:	1855      	adds	r5, r2, r1
 801284c:	42a5      	cmp	r5, r4
 801284e:	d10b      	bne.n	8012868 <_free_r+0x70>
 8012850:	6824      	ldr	r4, [r4, #0]
 8012852:	4421      	add	r1, r4
 8012854:	1854      	adds	r4, r2, r1
 8012856:	42a3      	cmp	r3, r4
 8012858:	6011      	str	r1, [r2, #0]
 801285a:	d1e0      	bne.n	801281e <_free_r+0x26>
 801285c:	681c      	ldr	r4, [r3, #0]
 801285e:	685b      	ldr	r3, [r3, #4]
 8012860:	6053      	str	r3, [r2, #4]
 8012862:	4421      	add	r1, r4
 8012864:	6011      	str	r1, [r2, #0]
 8012866:	e7da      	b.n	801281e <_free_r+0x26>
 8012868:	d902      	bls.n	8012870 <_free_r+0x78>
 801286a:	230c      	movs	r3, #12
 801286c:	6003      	str	r3, [r0, #0]
 801286e:	e7d6      	b.n	801281e <_free_r+0x26>
 8012870:	6825      	ldr	r5, [r4, #0]
 8012872:	1961      	adds	r1, r4, r5
 8012874:	428b      	cmp	r3, r1
 8012876:	bf04      	itt	eq
 8012878:	6819      	ldreq	r1, [r3, #0]
 801287a:	685b      	ldreq	r3, [r3, #4]
 801287c:	6063      	str	r3, [r4, #4]
 801287e:	bf04      	itt	eq
 8012880:	1949      	addeq	r1, r1, r5
 8012882:	6021      	streq	r1, [r4, #0]
 8012884:	6054      	str	r4, [r2, #4]
 8012886:	e7ca      	b.n	801281e <_free_r+0x26>
 8012888:	b003      	add	sp, #12
 801288a:	bd30      	pop	{r4, r5, pc}
 801288c:	2000c668 	.word	0x2000c668

08012890 <sbrk_aligned>:
 8012890:	b570      	push	{r4, r5, r6, lr}
 8012892:	4e0e      	ldr	r6, [pc, #56]	; (80128cc <sbrk_aligned+0x3c>)
 8012894:	460c      	mov	r4, r1
 8012896:	6831      	ldr	r1, [r6, #0]
 8012898:	4605      	mov	r5, r0
 801289a:	b911      	cbnz	r1, 80128a2 <sbrk_aligned+0x12>
 801289c:	f000 ff06 	bl	80136ac <_sbrk_r>
 80128a0:	6030      	str	r0, [r6, #0]
 80128a2:	4621      	mov	r1, r4
 80128a4:	4628      	mov	r0, r5
 80128a6:	f000 ff01 	bl	80136ac <_sbrk_r>
 80128aa:	1c43      	adds	r3, r0, #1
 80128ac:	d00a      	beq.n	80128c4 <sbrk_aligned+0x34>
 80128ae:	1cc4      	adds	r4, r0, #3
 80128b0:	f024 0403 	bic.w	r4, r4, #3
 80128b4:	42a0      	cmp	r0, r4
 80128b6:	d007      	beq.n	80128c8 <sbrk_aligned+0x38>
 80128b8:	1a21      	subs	r1, r4, r0
 80128ba:	4628      	mov	r0, r5
 80128bc:	f000 fef6 	bl	80136ac <_sbrk_r>
 80128c0:	3001      	adds	r0, #1
 80128c2:	d101      	bne.n	80128c8 <sbrk_aligned+0x38>
 80128c4:	f04f 34ff 	mov.w	r4, #4294967295
 80128c8:	4620      	mov	r0, r4
 80128ca:	bd70      	pop	{r4, r5, r6, pc}
 80128cc:	2000c66c 	.word	0x2000c66c

080128d0 <_malloc_r>:
 80128d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80128d4:	1ccd      	adds	r5, r1, #3
 80128d6:	f025 0503 	bic.w	r5, r5, #3
 80128da:	3508      	adds	r5, #8
 80128dc:	2d0c      	cmp	r5, #12
 80128de:	bf38      	it	cc
 80128e0:	250c      	movcc	r5, #12
 80128e2:	2d00      	cmp	r5, #0
 80128e4:	4607      	mov	r7, r0
 80128e6:	db01      	blt.n	80128ec <_malloc_r+0x1c>
 80128e8:	42a9      	cmp	r1, r5
 80128ea:	d905      	bls.n	80128f8 <_malloc_r+0x28>
 80128ec:	230c      	movs	r3, #12
 80128ee:	603b      	str	r3, [r7, #0]
 80128f0:	2600      	movs	r6, #0
 80128f2:	4630      	mov	r0, r6
 80128f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80128f8:	4e2e      	ldr	r6, [pc, #184]	; (80129b4 <_malloc_r+0xe4>)
 80128fa:	f003 f8f5 	bl	8015ae8 <__malloc_lock>
 80128fe:	6833      	ldr	r3, [r6, #0]
 8012900:	461c      	mov	r4, r3
 8012902:	bb34      	cbnz	r4, 8012952 <_malloc_r+0x82>
 8012904:	4629      	mov	r1, r5
 8012906:	4638      	mov	r0, r7
 8012908:	f7ff ffc2 	bl	8012890 <sbrk_aligned>
 801290c:	1c43      	adds	r3, r0, #1
 801290e:	4604      	mov	r4, r0
 8012910:	d14d      	bne.n	80129ae <_malloc_r+0xde>
 8012912:	6834      	ldr	r4, [r6, #0]
 8012914:	4626      	mov	r6, r4
 8012916:	2e00      	cmp	r6, #0
 8012918:	d140      	bne.n	801299c <_malloc_r+0xcc>
 801291a:	6823      	ldr	r3, [r4, #0]
 801291c:	4631      	mov	r1, r6
 801291e:	4638      	mov	r0, r7
 8012920:	eb04 0803 	add.w	r8, r4, r3
 8012924:	f000 fec2 	bl	80136ac <_sbrk_r>
 8012928:	4580      	cmp	r8, r0
 801292a:	d13a      	bne.n	80129a2 <_malloc_r+0xd2>
 801292c:	6821      	ldr	r1, [r4, #0]
 801292e:	3503      	adds	r5, #3
 8012930:	1a6d      	subs	r5, r5, r1
 8012932:	f025 0503 	bic.w	r5, r5, #3
 8012936:	3508      	adds	r5, #8
 8012938:	2d0c      	cmp	r5, #12
 801293a:	bf38      	it	cc
 801293c:	250c      	movcc	r5, #12
 801293e:	4629      	mov	r1, r5
 8012940:	4638      	mov	r0, r7
 8012942:	f7ff ffa5 	bl	8012890 <sbrk_aligned>
 8012946:	3001      	adds	r0, #1
 8012948:	d02b      	beq.n	80129a2 <_malloc_r+0xd2>
 801294a:	6823      	ldr	r3, [r4, #0]
 801294c:	442b      	add	r3, r5
 801294e:	6023      	str	r3, [r4, #0]
 8012950:	e00e      	b.n	8012970 <_malloc_r+0xa0>
 8012952:	6822      	ldr	r2, [r4, #0]
 8012954:	1b52      	subs	r2, r2, r5
 8012956:	d41e      	bmi.n	8012996 <_malloc_r+0xc6>
 8012958:	2a0b      	cmp	r2, #11
 801295a:	d916      	bls.n	801298a <_malloc_r+0xba>
 801295c:	1961      	adds	r1, r4, r5
 801295e:	42a3      	cmp	r3, r4
 8012960:	6025      	str	r5, [r4, #0]
 8012962:	bf18      	it	ne
 8012964:	6059      	strne	r1, [r3, #4]
 8012966:	6863      	ldr	r3, [r4, #4]
 8012968:	bf08      	it	eq
 801296a:	6031      	streq	r1, [r6, #0]
 801296c:	5162      	str	r2, [r4, r5]
 801296e:	604b      	str	r3, [r1, #4]
 8012970:	4638      	mov	r0, r7
 8012972:	f104 060b 	add.w	r6, r4, #11
 8012976:	f003 f8bd 	bl	8015af4 <__malloc_unlock>
 801297a:	f026 0607 	bic.w	r6, r6, #7
 801297e:	1d23      	adds	r3, r4, #4
 8012980:	1af2      	subs	r2, r6, r3
 8012982:	d0b6      	beq.n	80128f2 <_malloc_r+0x22>
 8012984:	1b9b      	subs	r3, r3, r6
 8012986:	50a3      	str	r3, [r4, r2]
 8012988:	e7b3      	b.n	80128f2 <_malloc_r+0x22>
 801298a:	6862      	ldr	r2, [r4, #4]
 801298c:	42a3      	cmp	r3, r4
 801298e:	bf0c      	ite	eq
 8012990:	6032      	streq	r2, [r6, #0]
 8012992:	605a      	strne	r2, [r3, #4]
 8012994:	e7ec      	b.n	8012970 <_malloc_r+0xa0>
 8012996:	4623      	mov	r3, r4
 8012998:	6864      	ldr	r4, [r4, #4]
 801299a:	e7b2      	b.n	8012902 <_malloc_r+0x32>
 801299c:	4634      	mov	r4, r6
 801299e:	6876      	ldr	r6, [r6, #4]
 80129a0:	e7b9      	b.n	8012916 <_malloc_r+0x46>
 80129a2:	230c      	movs	r3, #12
 80129a4:	603b      	str	r3, [r7, #0]
 80129a6:	4638      	mov	r0, r7
 80129a8:	f003 f8a4 	bl	8015af4 <__malloc_unlock>
 80129ac:	e7a1      	b.n	80128f2 <_malloc_r+0x22>
 80129ae:	6025      	str	r5, [r4, #0]
 80129b0:	e7de      	b.n	8012970 <_malloc_r+0xa0>
 80129b2:	bf00      	nop
 80129b4:	2000c668 	.word	0x2000c668

080129b8 <__cvt>:
 80129b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80129bc:	ec55 4b10 	vmov	r4, r5, d0
 80129c0:	2d00      	cmp	r5, #0
 80129c2:	460e      	mov	r6, r1
 80129c4:	4619      	mov	r1, r3
 80129c6:	462b      	mov	r3, r5
 80129c8:	bfbb      	ittet	lt
 80129ca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80129ce:	461d      	movlt	r5, r3
 80129d0:	2300      	movge	r3, #0
 80129d2:	232d      	movlt	r3, #45	; 0x2d
 80129d4:	700b      	strb	r3, [r1, #0]
 80129d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80129d8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80129dc:	4691      	mov	r9, r2
 80129de:	f023 0820 	bic.w	r8, r3, #32
 80129e2:	bfbc      	itt	lt
 80129e4:	4622      	movlt	r2, r4
 80129e6:	4614      	movlt	r4, r2
 80129e8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80129ec:	d005      	beq.n	80129fa <__cvt+0x42>
 80129ee:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80129f2:	d100      	bne.n	80129f6 <__cvt+0x3e>
 80129f4:	3601      	adds	r6, #1
 80129f6:	2102      	movs	r1, #2
 80129f8:	e000      	b.n	80129fc <__cvt+0x44>
 80129fa:	2103      	movs	r1, #3
 80129fc:	ab03      	add	r3, sp, #12
 80129fe:	9301      	str	r3, [sp, #4]
 8012a00:	ab02      	add	r3, sp, #8
 8012a02:	9300      	str	r3, [sp, #0]
 8012a04:	ec45 4b10 	vmov	d0, r4, r5
 8012a08:	4653      	mov	r3, sl
 8012a0a:	4632      	mov	r2, r6
 8012a0c:	f001 fed4 	bl	80147b8 <_dtoa_r>
 8012a10:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8012a14:	4607      	mov	r7, r0
 8012a16:	d102      	bne.n	8012a1e <__cvt+0x66>
 8012a18:	f019 0f01 	tst.w	r9, #1
 8012a1c:	d022      	beq.n	8012a64 <__cvt+0xac>
 8012a1e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8012a22:	eb07 0906 	add.w	r9, r7, r6
 8012a26:	d110      	bne.n	8012a4a <__cvt+0x92>
 8012a28:	783b      	ldrb	r3, [r7, #0]
 8012a2a:	2b30      	cmp	r3, #48	; 0x30
 8012a2c:	d10a      	bne.n	8012a44 <__cvt+0x8c>
 8012a2e:	2200      	movs	r2, #0
 8012a30:	2300      	movs	r3, #0
 8012a32:	4620      	mov	r0, r4
 8012a34:	4629      	mov	r1, r5
 8012a36:	f7ee f877 	bl	8000b28 <__aeabi_dcmpeq>
 8012a3a:	b918      	cbnz	r0, 8012a44 <__cvt+0x8c>
 8012a3c:	f1c6 0601 	rsb	r6, r6, #1
 8012a40:	f8ca 6000 	str.w	r6, [sl]
 8012a44:	f8da 3000 	ldr.w	r3, [sl]
 8012a48:	4499      	add	r9, r3
 8012a4a:	2200      	movs	r2, #0
 8012a4c:	2300      	movs	r3, #0
 8012a4e:	4620      	mov	r0, r4
 8012a50:	4629      	mov	r1, r5
 8012a52:	f7ee f869 	bl	8000b28 <__aeabi_dcmpeq>
 8012a56:	b108      	cbz	r0, 8012a5c <__cvt+0xa4>
 8012a58:	f8cd 900c 	str.w	r9, [sp, #12]
 8012a5c:	2230      	movs	r2, #48	; 0x30
 8012a5e:	9b03      	ldr	r3, [sp, #12]
 8012a60:	454b      	cmp	r3, r9
 8012a62:	d307      	bcc.n	8012a74 <__cvt+0xbc>
 8012a64:	9b03      	ldr	r3, [sp, #12]
 8012a66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012a68:	1bdb      	subs	r3, r3, r7
 8012a6a:	4638      	mov	r0, r7
 8012a6c:	6013      	str	r3, [r2, #0]
 8012a6e:	b004      	add	sp, #16
 8012a70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a74:	1c59      	adds	r1, r3, #1
 8012a76:	9103      	str	r1, [sp, #12]
 8012a78:	701a      	strb	r2, [r3, #0]
 8012a7a:	e7f0      	b.n	8012a5e <__cvt+0xa6>

08012a7c <__exponent>:
 8012a7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012a7e:	4603      	mov	r3, r0
 8012a80:	2900      	cmp	r1, #0
 8012a82:	bfb8      	it	lt
 8012a84:	4249      	neglt	r1, r1
 8012a86:	f803 2b02 	strb.w	r2, [r3], #2
 8012a8a:	bfb4      	ite	lt
 8012a8c:	222d      	movlt	r2, #45	; 0x2d
 8012a8e:	222b      	movge	r2, #43	; 0x2b
 8012a90:	2909      	cmp	r1, #9
 8012a92:	7042      	strb	r2, [r0, #1]
 8012a94:	dd2a      	ble.n	8012aec <__exponent+0x70>
 8012a96:	f10d 0407 	add.w	r4, sp, #7
 8012a9a:	46a4      	mov	ip, r4
 8012a9c:	270a      	movs	r7, #10
 8012a9e:	46a6      	mov	lr, r4
 8012aa0:	460a      	mov	r2, r1
 8012aa2:	fb91 f6f7 	sdiv	r6, r1, r7
 8012aa6:	fb07 1516 	mls	r5, r7, r6, r1
 8012aaa:	3530      	adds	r5, #48	; 0x30
 8012aac:	2a63      	cmp	r2, #99	; 0x63
 8012aae:	f104 34ff 	add.w	r4, r4, #4294967295
 8012ab2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8012ab6:	4631      	mov	r1, r6
 8012ab8:	dcf1      	bgt.n	8012a9e <__exponent+0x22>
 8012aba:	3130      	adds	r1, #48	; 0x30
 8012abc:	f1ae 0502 	sub.w	r5, lr, #2
 8012ac0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8012ac4:	1c44      	adds	r4, r0, #1
 8012ac6:	4629      	mov	r1, r5
 8012ac8:	4561      	cmp	r1, ip
 8012aca:	d30a      	bcc.n	8012ae2 <__exponent+0x66>
 8012acc:	f10d 0209 	add.w	r2, sp, #9
 8012ad0:	eba2 020e 	sub.w	r2, r2, lr
 8012ad4:	4565      	cmp	r5, ip
 8012ad6:	bf88      	it	hi
 8012ad8:	2200      	movhi	r2, #0
 8012ada:	4413      	add	r3, r2
 8012adc:	1a18      	subs	r0, r3, r0
 8012ade:	b003      	add	sp, #12
 8012ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012ae2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012ae6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8012aea:	e7ed      	b.n	8012ac8 <__exponent+0x4c>
 8012aec:	2330      	movs	r3, #48	; 0x30
 8012aee:	3130      	adds	r1, #48	; 0x30
 8012af0:	7083      	strb	r3, [r0, #2]
 8012af2:	70c1      	strb	r1, [r0, #3]
 8012af4:	1d03      	adds	r3, r0, #4
 8012af6:	e7f1      	b.n	8012adc <__exponent+0x60>

08012af8 <_printf_float>:
 8012af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012afc:	ed2d 8b02 	vpush	{d8}
 8012b00:	b08d      	sub	sp, #52	; 0x34
 8012b02:	460c      	mov	r4, r1
 8012b04:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8012b08:	4616      	mov	r6, r2
 8012b0a:	461f      	mov	r7, r3
 8012b0c:	4605      	mov	r5, r0
 8012b0e:	f002 ffc3 	bl	8015a98 <_localeconv_r>
 8012b12:	f8d0 a000 	ldr.w	sl, [r0]
 8012b16:	4650      	mov	r0, sl
 8012b18:	f7ed fb84 	bl	8000224 <strlen>
 8012b1c:	2300      	movs	r3, #0
 8012b1e:	930a      	str	r3, [sp, #40]	; 0x28
 8012b20:	6823      	ldr	r3, [r4, #0]
 8012b22:	9305      	str	r3, [sp, #20]
 8012b24:	f8d8 3000 	ldr.w	r3, [r8]
 8012b28:	f894 b018 	ldrb.w	fp, [r4, #24]
 8012b2c:	3307      	adds	r3, #7
 8012b2e:	f023 0307 	bic.w	r3, r3, #7
 8012b32:	f103 0208 	add.w	r2, r3, #8
 8012b36:	f8c8 2000 	str.w	r2, [r8]
 8012b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b3e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8012b42:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8012b46:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012b4a:	9307      	str	r3, [sp, #28]
 8012b4c:	f8cd 8018 	str.w	r8, [sp, #24]
 8012b50:	ee08 0a10 	vmov	s16, r0
 8012b54:	4b9f      	ldr	r3, [pc, #636]	; (8012dd4 <_printf_float+0x2dc>)
 8012b56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012b5a:	f04f 32ff 	mov.w	r2, #4294967295
 8012b5e:	f7ee f815 	bl	8000b8c <__aeabi_dcmpun>
 8012b62:	bb88      	cbnz	r0, 8012bc8 <_printf_float+0xd0>
 8012b64:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012b68:	4b9a      	ldr	r3, [pc, #616]	; (8012dd4 <_printf_float+0x2dc>)
 8012b6a:	f04f 32ff 	mov.w	r2, #4294967295
 8012b6e:	f7ed ffef 	bl	8000b50 <__aeabi_dcmple>
 8012b72:	bb48      	cbnz	r0, 8012bc8 <_printf_float+0xd0>
 8012b74:	2200      	movs	r2, #0
 8012b76:	2300      	movs	r3, #0
 8012b78:	4640      	mov	r0, r8
 8012b7a:	4649      	mov	r1, r9
 8012b7c:	f7ed ffde 	bl	8000b3c <__aeabi_dcmplt>
 8012b80:	b110      	cbz	r0, 8012b88 <_printf_float+0x90>
 8012b82:	232d      	movs	r3, #45	; 0x2d
 8012b84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012b88:	4b93      	ldr	r3, [pc, #588]	; (8012dd8 <_printf_float+0x2e0>)
 8012b8a:	4894      	ldr	r0, [pc, #592]	; (8012ddc <_printf_float+0x2e4>)
 8012b8c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8012b90:	bf94      	ite	ls
 8012b92:	4698      	movls	r8, r3
 8012b94:	4680      	movhi	r8, r0
 8012b96:	2303      	movs	r3, #3
 8012b98:	6123      	str	r3, [r4, #16]
 8012b9a:	9b05      	ldr	r3, [sp, #20]
 8012b9c:	f023 0204 	bic.w	r2, r3, #4
 8012ba0:	6022      	str	r2, [r4, #0]
 8012ba2:	f04f 0900 	mov.w	r9, #0
 8012ba6:	9700      	str	r7, [sp, #0]
 8012ba8:	4633      	mov	r3, r6
 8012baa:	aa0b      	add	r2, sp, #44	; 0x2c
 8012bac:	4621      	mov	r1, r4
 8012bae:	4628      	mov	r0, r5
 8012bb0:	f000 f9d8 	bl	8012f64 <_printf_common>
 8012bb4:	3001      	adds	r0, #1
 8012bb6:	f040 8090 	bne.w	8012cda <_printf_float+0x1e2>
 8012bba:	f04f 30ff 	mov.w	r0, #4294967295
 8012bbe:	b00d      	add	sp, #52	; 0x34
 8012bc0:	ecbd 8b02 	vpop	{d8}
 8012bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012bc8:	4642      	mov	r2, r8
 8012bca:	464b      	mov	r3, r9
 8012bcc:	4640      	mov	r0, r8
 8012bce:	4649      	mov	r1, r9
 8012bd0:	f7ed ffdc 	bl	8000b8c <__aeabi_dcmpun>
 8012bd4:	b140      	cbz	r0, 8012be8 <_printf_float+0xf0>
 8012bd6:	464b      	mov	r3, r9
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	bfbc      	itt	lt
 8012bdc:	232d      	movlt	r3, #45	; 0x2d
 8012bde:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8012be2:	487f      	ldr	r0, [pc, #508]	; (8012de0 <_printf_float+0x2e8>)
 8012be4:	4b7f      	ldr	r3, [pc, #508]	; (8012de4 <_printf_float+0x2ec>)
 8012be6:	e7d1      	b.n	8012b8c <_printf_float+0x94>
 8012be8:	6863      	ldr	r3, [r4, #4]
 8012bea:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8012bee:	9206      	str	r2, [sp, #24]
 8012bf0:	1c5a      	adds	r2, r3, #1
 8012bf2:	d13f      	bne.n	8012c74 <_printf_float+0x17c>
 8012bf4:	2306      	movs	r3, #6
 8012bf6:	6063      	str	r3, [r4, #4]
 8012bf8:	9b05      	ldr	r3, [sp, #20]
 8012bfa:	6861      	ldr	r1, [r4, #4]
 8012bfc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8012c00:	2300      	movs	r3, #0
 8012c02:	9303      	str	r3, [sp, #12]
 8012c04:	ab0a      	add	r3, sp, #40	; 0x28
 8012c06:	e9cd b301 	strd	fp, r3, [sp, #4]
 8012c0a:	ab09      	add	r3, sp, #36	; 0x24
 8012c0c:	ec49 8b10 	vmov	d0, r8, r9
 8012c10:	9300      	str	r3, [sp, #0]
 8012c12:	6022      	str	r2, [r4, #0]
 8012c14:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8012c18:	4628      	mov	r0, r5
 8012c1a:	f7ff fecd 	bl	80129b8 <__cvt>
 8012c1e:	9b06      	ldr	r3, [sp, #24]
 8012c20:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012c22:	2b47      	cmp	r3, #71	; 0x47
 8012c24:	4680      	mov	r8, r0
 8012c26:	d108      	bne.n	8012c3a <_printf_float+0x142>
 8012c28:	1cc8      	adds	r0, r1, #3
 8012c2a:	db02      	blt.n	8012c32 <_printf_float+0x13a>
 8012c2c:	6863      	ldr	r3, [r4, #4]
 8012c2e:	4299      	cmp	r1, r3
 8012c30:	dd41      	ble.n	8012cb6 <_printf_float+0x1be>
 8012c32:	f1ab 0b02 	sub.w	fp, fp, #2
 8012c36:	fa5f fb8b 	uxtb.w	fp, fp
 8012c3a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8012c3e:	d820      	bhi.n	8012c82 <_printf_float+0x18a>
 8012c40:	3901      	subs	r1, #1
 8012c42:	465a      	mov	r2, fp
 8012c44:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012c48:	9109      	str	r1, [sp, #36]	; 0x24
 8012c4a:	f7ff ff17 	bl	8012a7c <__exponent>
 8012c4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012c50:	1813      	adds	r3, r2, r0
 8012c52:	2a01      	cmp	r2, #1
 8012c54:	4681      	mov	r9, r0
 8012c56:	6123      	str	r3, [r4, #16]
 8012c58:	dc02      	bgt.n	8012c60 <_printf_float+0x168>
 8012c5a:	6822      	ldr	r2, [r4, #0]
 8012c5c:	07d2      	lsls	r2, r2, #31
 8012c5e:	d501      	bpl.n	8012c64 <_printf_float+0x16c>
 8012c60:	3301      	adds	r3, #1
 8012c62:	6123      	str	r3, [r4, #16]
 8012c64:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	d09c      	beq.n	8012ba6 <_printf_float+0xae>
 8012c6c:	232d      	movs	r3, #45	; 0x2d
 8012c6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012c72:	e798      	b.n	8012ba6 <_printf_float+0xae>
 8012c74:	9a06      	ldr	r2, [sp, #24]
 8012c76:	2a47      	cmp	r2, #71	; 0x47
 8012c78:	d1be      	bne.n	8012bf8 <_printf_float+0x100>
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	d1bc      	bne.n	8012bf8 <_printf_float+0x100>
 8012c7e:	2301      	movs	r3, #1
 8012c80:	e7b9      	b.n	8012bf6 <_printf_float+0xfe>
 8012c82:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8012c86:	d118      	bne.n	8012cba <_printf_float+0x1c2>
 8012c88:	2900      	cmp	r1, #0
 8012c8a:	6863      	ldr	r3, [r4, #4]
 8012c8c:	dd0b      	ble.n	8012ca6 <_printf_float+0x1ae>
 8012c8e:	6121      	str	r1, [r4, #16]
 8012c90:	b913      	cbnz	r3, 8012c98 <_printf_float+0x1a0>
 8012c92:	6822      	ldr	r2, [r4, #0]
 8012c94:	07d0      	lsls	r0, r2, #31
 8012c96:	d502      	bpl.n	8012c9e <_printf_float+0x1a6>
 8012c98:	3301      	adds	r3, #1
 8012c9a:	440b      	add	r3, r1
 8012c9c:	6123      	str	r3, [r4, #16]
 8012c9e:	65a1      	str	r1, [r4, #88]	; 0x58
 8012ca0:	f04f 0900 	mov.w	r9, #0
 8012ca4:	e7de      	b.n	8012c64 <_printf_float+0x16c>
 8012ca6:	b913      	cbnz	r3, 8012cae <_printf_float+0x1b6>
 8012ca8:	6822      	ldr	r2, [r4, #0]
 8012caa:	07d2      	lsls	r2, r2, #31
 8012cac:	d501      	bpl.n	8012cb2 <_printf_float+0x1ba>
 8012cae:	3302      	adds	r3, #2
 8012cb0:	e7f4      	b.n	8012c9c <_printf_float+0x1a4>
 8012cb2:	2301      	movs	r3, #1
 8012cb4:	e7f2      	b.n	8012c9c <_printf_float+0x1a4>
 8012cb6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8012cba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012cbc:	4299      	cmp	r1, r3
 8012cbe:	db05      	blt.n	8012ccc <_printf_float+0x1d4>
 8012cc0:	6823      	ldr	r3, [r4, #0]
 8012cc2:	6121      	str	r1, [r4, #16]
 8012cc4:	07d8      	lsls	r0, r3, #31
 8012cc6:	d5ea      	bpl.n	8012c9e <_printf_float+0x1a6>
 8012cc8:	1c4b      	adds	r3, r1, #1
 8012cca:	e7e7      	b.n	8012c9c <_printf_float+0x1a4>
 8012ccc:	2900      	cmp	r1, #0
 8012cce:	bfd4      	ite	le
 8012cd0:	f1c1 0202 	rsble	r2, r1, #2
 8012cd4:	2201      	movgt	r2, #1
 8012cd6:	4413      	add	r3, r2
 8012cd8:	e7e0      	b.n	8012c9c <_printf_float+0x1a4>
 8012cda:	6823      	ldr	r3, [r4, #0]
 8012cdc:	055a      	lsls	r2, r3, #21
 8012cde:	d407      	bmi.n	8012cf0 <_printf_float+0x1f8>
 8012ce0:	6923      	ldr	r3, [r4, #16]
 8012ce2:	4642      	mov	r2, r8
 8012ce4:	4631      	mov	r1, r6
 8012ce6:	4628      	mov	r0, r5
 8012ce8:	47b8      	blx	r7
 8012cea:	3001      	adds	r0, #1
 8012cec:	d12c      	bne.n	8012d48 <_printf_float+0x250>
 8012cee:	e764      	b.n	8012bba <_printf_float+0xc2>
 8012cf0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8012cf4:	f240 80e0 	bls.w	8012eb8 <_printf_float+0x3c0>
 8012cf8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012cfc:	2200      	movs	r2, #0
 8012cfe:	2300      	movs	r3, #0
 8012d00:	f7ed ff12 	bl	8000b28 <__aeabi_dcmpeq>
 8012d04:	2800      	cmp	r0, #0
 8012d06:	d034      	beq.n	8012d72 <_printf_float+0x27a>
 8012d08:	4a37      	ldr	r2, [pc, #220]	; (8012de8 <_printf_float+0x2f0>)
 8012d0a:	2301      	movs	r3, #1
 8012d0c:	4631      	mov	r1, r6
 8012d0e:	4628      	mov	r0, r5
 8012d10:	47b8      	blx	r7
 8012d12:	3001      	adds	r0, #1
 8012d14:	f43f af51 	beq.w	8012bba <_printf_float+0xc2>
 8012d18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012d1c:	429a      	cmp	r2, r3
 8012d1e:	db02      	blt.n	8012d26 <_printf_float+0x22e>
 8012d20:	6823      	ldr	r3, [r4, #0]
 8012d22:	07d8      	lsls	r0, r3, #31
 8012d24:	d510      	bpl.n	8012d48 <_printf_float+0x250>
 8012d26:	ee18 3a10 	vmov	r3, s16
 8012d2a:	4652      	mov	r2, sl
 8012d2c:	4631      	mov	r1, r6
 8012d2e:	4628      	mov	r0, r5
 8012d30:	47b8      	blx	r7
 8012d32:	3001      	adds	r0, #1
 8012d34:	f43f af41 	beq.w	8012bba <_printf_float+0xc2>
 8012d38:	f04f 0800 	mov.w	r8, #0
 8012d3c:	f104 091a 	add.w	r9, r4, #26
 8012d40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012d42:	3b01      	subs	r3, #1
 8012d44:	4543      	cmp	r3, r8
 8012d46:	dc09      	bgt.n	8012d5c <_printf_float+0x264>
 8012d48:	6823      	ldr	r3, [r4, #0]
 8012d4a:	079b      	lsls	r3, r3, #30
 8012d4c:	f100 8105 	bmi.w	8012f5a <_printf_float+0x462>
 8012d50:	68e0      	ldr	r0, [r4, #12]
 8012d52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012d54:	4298      	cmp	r0, r3
 8012d56:	bfb8      	it	lt
 8012d58:	4618      	movlt	r0, r3
 8012d5a:	e730      	b.n	8012bbe <_printf_float+0xc6>
 8012d5c:	2301      	movs	r3, #1
 8012d5e:	464a      	mov	r2, r9
 8012d60:	4631      	mov	r1, r6
 8012d62:	4628      	mov	r0, r5
 8012d64:	47b8      	blx	r7
 8012d66:	3001      	adds	r0, #1
 8012d68:	f43f af27 	beq.w	8012bba <_printf_float+0xc2>
 8012d6c:	f108 0801 	add.w	r8, r8, #1
 8012d70:	e7e6      	b.n	8012d40 <_printf_float+0x248>
 8012d72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d74:	2b00      	cmp	r3, #0
 8012d76:	dc39      	bgt.n	8012dec <_printf_float+0x2f4>
 8012d78:	4a1b      	ldr	r2, [pc, #108]	; (8012de8 <_printf_float+0x2f0>)
 8012d7a:	2301      	movs	r3, #1
 8012d7c:	4631      	mov	r1, r6
 8012d7e:	4628      	mov	r0, r5
 8012d80:	47b8      	blx	r7
 8012d82:	3001      	adds	r0, #1
 8012d84:	f43f af19 	beq.w	8012bba <_printf_float+0xc2>
 8012d88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012d8c:	4313      	orrs	r3, r2
 8012d8e:	d102      	bne.n	8012d96 <_printf_float+0x29e>
 8012d90:	6823      	ldr	r3, [r4, #0]
 8012d92:	07d9      	lsls	r1, r3, #31
 8012d94:	d5d8      	bpl.n	8012d48 <_printf_float+0x250>
 8012d96:	ee18 3a10 	vmov	r3, s16
 8012d9a:	4652      	mov	r2, sl
 8012d9c:	4631      	mov	r1, r6
 8012d9e:	4628      	mov	r0, r5
 8012da0:	47b8      	blx	r7
 8012da2:	3001      	adds	r0, #1
 8012da4:	f43f af09 	beq.w	8012bba <_printf_float+0xc2>
 8012da8:	f04f 0900 	mov.w	r9, #0
 8012dac:	f104 0a1a 	add.w	sl, r4, #26
 8012db0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012db2:	425b      	negs	r3, r3
 8012db4:	454b      	cmp	r3, r9
 8012db6:	dc01      	bgt.n	8012dbc <_printf_float+0x2c4>
 8012db8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012dba:	e792      	b.n	8012ce2 <_printf_float+0x1ea>
 8012dbc:	2301      	movs	r3, #1
 8012dbe:	4652      	mov	r2, sl
 8012dc0:	4631      	mov	r1, r6
 8012dc2:	4628      	mov	r0, r5
 8012dc4:	47b8      	blx	r7
 8012dc6:	3001      	adds	r0, #1
 8012dc8:	f43f aef7 	beq.w	8012bba <_printf_float+0xc2>
 8012dcc:	f109 0901 	add.w	r9, r9, #1
 8012dd0:	e7ee      	b.n	8012db0 <_printf_float+0x2b8>
 8012dd2:	bf00      	nop
 8012dd4:	7fefffff 	.word	0x7fefffff
 8012dd8:	0805d8f4 	.word	0x0805d8f4
 8012ddc:	0805d8f8 	.word	0x0805d8f8
 8012de0:	0805d900 	.word	0x0805d900
 8012de4:	0805d8fc 	.word	0x0805d8fc
 8012de8:	0805dd91 	.word	0x0805dd91
 8012dec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012dee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012df0:	429a      	cmp	r2, r3
 8012df2:	bfa8      	it	ge
 8012df4:	461a      	movge	r2, r3
 8012df6:	2a00      	cmp	r2, #0
 8012df8:	4691      	mov	r9, r2
 8012dfa:	dc37      	bgt.n	8012e6c <_printf_float+0x374>
 8012dfc:	f04f 0b00 	mov.w	fp, #0
 8012e00:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012e04:	f104 021a 	add.w	r2, r4, #26
 8012e08:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012e0a:	9305      	str	r3, [sp, #20]
 8012e0c:	eba3 0309 	sub.w	r3, r3, r9
 8012e10:	455b      	cmp	r3, fp
 8012e12:	dc33      	bgt.n	8012e7c <_printf_float+0x384>
 8012e14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012e18:	429a      	cmp	r2, r3
 8012e1a:	db3b      	blt.n	8012e94 <_printf_float+0x39c>
 8012e1c:	6823      	ldr	r3, [r4, #0]
 8012e1e:	07da      	lsls	r2, r3, #31
 8012e20:	d438      	bmi.n	8012e94 <_printf_float+0x39c>
 8012e22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012e24:	9a05      	ldr	r2, [sp, #20]
 8012e26:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012e28:	1a9a      	subs	r2, r3, r2
 8012e2a:	eba3 0901 	sub.w	r9, r3, r1
 8012e2e:	4591      	cmp	r9, r2
 8012e30:	bfa8      	it	ge
 8012e32:	4691      	movge	r9, r2
 8012e34:	f1b9 0f00 	cmp.w	r9, #0
 8012e38:	dc35      	bgt.n	8012ea6 <_printf_float+0x3ae>
 8012e3a:	f04f 0800 	mov.w	r8, #0
 8012e3e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012e42:	f104 0a1a 	add.w	sl, r4, #26
 8012e46:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012e4a:	1a9b      	subs	r3, r3, r2
 8012e4c:	eba3 0309 	sub.w	r3, r3, r9
 8012e50:	4543      	cmp	r3, r8
 8012e52:	f77f af79 	ble.w	8012d48 <_printf_float+0x250>
 8012e56:	2301      	movs	r3, #1
 8012e58:	4652      	mov	r2, sl
 8012e5a:	4631      	mov	r1, r6
 8012e5c:	4628      	mov	r0, r5
 8012e5e:	47b8      	blx	r7
 8012e60:	3001      	adds	r0, #1
 8012e62:	f43f aeaa 	beq.w	8012bba <_printf_float+0xc2>
 8012e66:	f108 0801 	add.w	r8, r8, #1
 8012e6a:	e7ec      	b.n	8012e46 <_printf_float+0x34e>
 8012e6c:	4613      	mov	r3, r2
 8012e6e:	4631      	mov	r1, r6
 8012e70:	4642      	mov	r2, r8
 8012e72:	4628      	mov	r0, r5
 8012e74:	47b8      	blx	r7
 8012e76:	3001      	adds	r0, #1
 8012e78:	d1c0      	bne.n	8012dfc <_printf_float+0x304>
 8012e7a:	e69e      	b.n	8012bba <_printf_float+0xc2>
 8012e7c:	2301      	movs	r3, #1
 8012e7e:	4631      	mov	r1, r6
 8012e80:	4628      	mov	r0, r5
 8012e82:	9205      	str	r2, [sp, #20]
 8012e84:	47b8      	blx	r7
 8012e86:	3001      	adds	r0, #1
 8012e88:	f43f ae97 	beq.w	8012bba <_printf_float+0xc2>
 8012e8c:	9a05      	ldr	r2, [sp, #20]
 8012e8e:	f10b 0b01 	add.w	fp, fp, #1
 8012e92:	e7b9      	b.n	8012e08 <_printf_float+0x310>
 8012e94:	ee18 3a10 	vmov	r3, s16
 8012e98:	4652      	mov	r2, sl
 8012e9a:	4631      	mov	r1, r6
 8012e9c:	4628      	mov	r0, r5
 8012e9e:	47b8      	blx	r7
 8012ea0:	3001      	adds	r0, #1
 8012ea2:	d1be      	bne.n	8012e22 <_printf_float+0x32a>
 8012ea4:	e689      	b.n	8012bba <_printf_float+0xc2>
 8012ea6:	9a05      	ldr	r2, [sp, #20]
 8012ea8:	464b      	mov	r3, r9
 8012eaa:	4442      	add	r2, r8
 8012eac:	4631      	mov	r1, r6
 8012eae:	4628      	mov	r0, r5
 8012eb0:	47b8      	blx	r7
 8012eb2:	3001      	adds	r0, #1
 8012eb4:	d1c1      	bne.n	8012e3a <_printf_float+0x342>
 8012eb6:	e680      	b.n	8012bba <_printf_float+0xc2>
 8012eb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012eba:	2a01      	cmp	r2, #1
 8012ebc:	dc01      	bgt.n	8012ec2 <_printf_float+0x3ca>
 8012ebe:	07db      	lsls	r3, r3, #31
 8012ec0:	d538      	bpl.n	8012f34 <_printf_float+0x43c>
 8012ec2:	2301      	movs	r3, #1
 8012ec4:	4642      	mov	r2, r8
 8012ec6:	4631      	mov	r1, r6
 8012ec8:	4628      	mov	r0, r5
 8012eca:	47b8      	blx	r7
 8012ecc:	3001      	adds	r0, #1
 8012ece:	f43f ae74 	beq.w	8012bba <_printf_float+0xc2>
 8012ed2:	ee18 3a10 	vmov	r3, s16
 8012ed6:	4652      	mov	r2, sl
 8012ed8:	4631      	mov	r1, r6
 8012eda:	4628      	mov	r0, r5
 8012edc:	47b8      	blx	r7
 8012ede:	3001      	adds	r0, #1
 8012ee0:	f43f ae6b 	beq.w	8012bba <_printf_float+0xc2>
 8012ee4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012ee8:	2200      	movs	r2, #0
 8012eea:	2300      	movs	r3, #0
 8012eec:	f7ed fe1c 	bl	8000b28 <__aeabi_dcmpeq>
 8012ef0:	b9d8      	cbnz	r0, 8012f2a <_printf_float+0x432>
 8012ef2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012ef4:	f108 0201 	add.w	r2, r8, #1
 8012ef8:	3b01      	subs	r3, #1
 8012efa:	4631      	mov	r1, r6
 8012efc:	4628      	mov	r0, r5
 8012efe:	47b8      	blx	r7
 8012f00:	3001      	adds	r0, #1
 8012f02:	d10e      	bne.n	8012f22 <_printf_float+0x42a>
 8012f04:	e659      	b.n	8012bba <_printf_float+0xc2>
 8012f06:	2301      	movs	r3, #1
 8012f08:	4652      	mov	r2, sl
 8012f0a:	4631      	mov	r1, r6
 8012f0c:	4628      	mov	r0, r5
 8012f0e:	47b8      	blx	r7
 8012f10:	3001      	adds	r0, #1
 8012f12:	f43f ae52 	beq.w	8012bba <_printf_float+0xc2>
 8012f16:	f108 0801 	add.w	r8, r8, #1
 8012f1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012f1c:	3b01      	subs	r3, #1
 8012f1e:	4543      	cmp	r3, r8
 8012f20:	dcf1      	bgt.n	8012f06 <_printf_float+0x40e>
 8012f22:	464b      	mov	r3, r9
 8012f24:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012f28:	e6dc      	b.n	8012ce4 <_printf_float+0x1ec>
 8012f2a:	f04f 0800 	mov.w	r8, #0
 8012f2e:	f104 0a1a 	add.w	sl, r4, #26
 8012f32:	e7f2      	b.n	8012f1a <_printf_float+0x422>
 8012f34:	2301      	movs	r3, #1
 8012f36:	4642      	mov	r2, r8
 8012f38:	e7df      	b.n	8012efa <_printf_float+0x402>
 8012f3a:	2301      	movs	r3, #1
 8012f3c:	464a      	mov	r2, r9
 8012f3e:	4631      	mov	r1, r6
 8012f40:	4628      	mov	r0, r5
 8012f42:	47b8      	blx	r7
 8012f44:	3001      	adds	r0, #1
 8012f46:	f43f ae38 	beq.w	8012bba <_printf_float+0xc2>
 8012f4a:	f108 0801 	add.w	r8, r8, #1
 8012f4e:	68e3      	ldr	r3, [r4, #12]
 8012f50:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012f52:	1a5b      	subs	r3, r3, r1
 8012f54:	4543      	cmp	r3, r8
 8012f56:	dcf0      	bgt.n	8012f3a <_printf_float+0x442>
 8012f58:	e6fa      	b.n	8012d50 <_printf_float+0x258>
 8012f5a:	f04f 0800 	mov.w	r8, #0
 8012f5e:	f104 0919 	add.w	r9, r4, #25
 8012f62:	e7f4      	b.n	8012f4e <_printf_float+0x456>

08012f64 <_printf_common>:
 8012f64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012f68:	4616      	mov	r6, r2
 8012f6a:	4699      	mov	r9, r3
 8012f6c:	688a      	ldr	r2, [r1, #8]
 8012f6e:	690b      	ldr	r3, [r1, #16]
 8012f70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012f74:	4293      	cmp	r3, r2
 8012f76:	bfb8      	it	lt
 8012f78:	4613      	movlt	r3, r2
 8012f7a:	6033      	str	r3, [r6, #0]
 8012f7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012f80:	4607      	mov	r7, r0
 8012f82:	460c      	mov	r4, r1
 8012f84:	b10a      	cbz	r2, 8012f8a <_printf_common+0x26>
 8012f86:	3301      	adds	r3, #1
 8012f88:	6033      	str	r3, [r6, #0]
 8012f8a:	6823      	ldr	r3, [r4, #0]
 8012f8c:	0699      	lsls	r1, r3, #26
 8012f8e:	bf42      	ittt	mi
 8012f90:	6833      	ldrmi	r3, [r6, #0]
 8012f92:	3302      	addmi	r3, #2
 8012f94:	6033      	strmi	r3, [r6, #0]
 8012f96:	6825      	ldr	r5, [r4, #0]
 8012f98:	f015 0506 	ands.w	r5, r5, #6
 8012f9c:	d106      	bne.n	8012fac <_printf_common+0x48>
 8012f9e:	f104 0a19 	add.w	sl, r4, #25
 8012fa2:	68e3      	ldr	r3, [r4, #12]
 8012fa4:	6832      	ldr	r2, [r6, #0]
 8012fa6:	1a9b      	subs	r3, r3, r2
 8012fa8:	42ab      	cmp	r3, r5
 8012faa:	dc26      	bgt.n	8012ffa <_printf_common+0x96>
 8012fac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012fb0:	1e13      	subs	r3, r2, #0
 8012fb2:	6822      	ldr	r2, [r4, #0]
 8012fb4:	bf18      	it	ne
 8012fb6:	2301      	movne	r3, #1
 8012fb8:	0692      	lsls	r2, r2, #26
 8012fba:	d42b      	bmi.n	8013014 <_printf_common+0xb0>
 8012fbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012fc0:	4649      	mov	r1, r9
 8012fc2:	4638      	mov	r0, r7
 8012fc4:	47c0      	blx	r8
 8012fc6:	3001      	adds	r0, #1
 8012fc8:	d01e      	beq.n	8013008 <_printf_common+0xa4>
 8012fca:	6823      	ldr	r3, [r4, #0]
 8012fcc:	68e5      	ldr	r5, [r4, #12]
 8012fce:	6832      	ldr	r2, [r6, #0]
 8012fd0:	f003 0306 	and.w	r3, r3, #6
 8012fd4:	2b04      	cmp	r3, #4
 8012fd6:	bf08      	it	eq
 8012fd8:	1aad      	subeq	r5, r5, r2
 8012fda:	68a3      	ldr	r3, [r4, #8]
 8012fdc:	6922      	ldr	r2, [r4, #16]
 8012fde:	bf0c      	ite	eq
 8012fe0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012fe4:	2500      	movne	r5, #0
 8012fe6:	4293      	cmp	r3, r2
 8012fe8:	bfc4      	itt	gt
 8012fea:	1a9b      	subgt	r3, r3, r2
 8012fec:	18ed      	addgt	r5, r5, r3
 8012fee:	2600      	movs	r6, #0
 8012ff0:	341a      	adds	r4, #26
 8012ff2:	42b5      	cmp	r5, r6
 8012ff4:	d11a      	bne.n	801302c <_printf_common+0xc8>
 8012ff6:	2000      	movs	r0, #0
 8012ff8:	e008      	b.n	801300c <_printf_common+0xa8>
 8012ffa:	2301      	movs	r3, #1
 8012ffc:	4652      	mov	r2, sl
 8012ffe:	4649      	mov	r1, r9
 8013000:	4638      	mov	r0, r7
 8013002:	47c0      	blx	r8
 8013004:	3001      	adds	r0, #1
 8013006:	d103      	bne.n	8013010 <_printf_common+0xac>
 8013008:	f04f 30ff 	mov.w	r0, #4294967295
 801300c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013010:	3501      	adds	r5, #1
 8013012:	e7c6      	b.n	8012fa2 <_printf_common+0x3e>
 8013014:	18e1      	adds	r1, r4, r3
 8013016:	1c5a      	adds	r2, r3, #1
 8013018:	2030      	movs	r0, #48	; 0x30
 801301a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801301e:	4422      	add	r2, r4
 8013020:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013024:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013028:	3302      	adds	r3, #2
 801302a:	e7c7      	b.n	8012fbc <_printf_common+0x58>
 801302c:	2301      	movs	r3, #1
 801302e:	4622      	mov	r2, r4
 8013030:	4649      	mov	r1, r9
 8013032:	4638      	mov	r0, r7
 8013034:	47c0      	blx	r8
 8013036:	3001      	adds	r0, #1
 8013038:	d0e6      	beq.n	8013008 <_printf_common+0xa4>
 801303a:	3601      	adds	r6, #1
 801303c:	e7d9      	b.n	8012ff2 <_printf_common+0x8e>
	...

08013040 <_printf_i>:
 8013040:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013044:	7e0f      	ldrb	r7, [r1, #24]
 8013046:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013048:	2f78      	cmp	r7, #120	; 0x78
 801304a:	4691      	mov	r9, r2
 801304c:	4680      	mov	r8, r0
 801304e:	460c      	mov	r4, r1
 8013050:	469a      	mov	sl, r3
 8013052:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8013056:	d807      	bhi.n	8013068 <_printf_i+0x28>
 8013058:	2f62      	cmp	r7, #98	; 0x62
 801305a:	d80a      	bhi.n	8013072 <_printf_i+0x32>
 801305c:	2f00      	cmp	r7, #0
 801305e:	f000 80d8 	beq.w	8013212 <_printf_i+0x1d2>
 8013062:	2f58      	cmp	r7, #88	; 0x58
 8013064:	f000 80a3 	beq.w	80131ae <_printf_i+0x16e>
 8013068:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801306c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013070:	e03a      	b.n	80130e8 <_printf_i+0xa8>
 8013072:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013076:	2b15      	cmp	r3, #21
 8013078:	d8f6      	bhi.n	8013068 <_printf_i+0x28>
 801307a:	a101      	add	r1, pc, #4	; (adr r1, 8013080 <_printf_i+0x40>)
 801307c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013080:	080130d9 	.word	0x080130d9
 8013084:	080130ed 	.word	0x080130ed
 8013088:	08013069 	.word	0x08013069
 801308c:	08013069 	.word	0x08013069
 8013090:	08013069 	.word	0x08013069
 8013094:	08013069 	.word	0x08013069
 8013098:	080130ed 	.word	0x080130ed
 801309c:	08013069 	.word	0x08013069
 80130a0:	08013069 	.word	0x08013069
 80130a4:	08013069 	.word	0x08013069
 80130a8:	08013069 	.word	0x08013069
 80130ac:	080131f9 	.word	0x080131f9
 80130b0:	0801311d 	.word	0x0801311d
 80130b4:	080131db 	.word	0x080131db
 80130b8:	08013069 	.word	0x08013069
 80130bc:	08013069 	.word	0x08013069
 80130c0:	0801321b 	.word	0x0801321b
 80130c4:	08013069 	.word	0x08013069
 80130c8:	0801311d 	.word	0x0801311d
 80130cc:	08013069 	.word	0x08013069
 80130d0:	08013069 	.word	0x08013069
 80130d4:	080131e3 	.word	0x080131e3
 80130d8:	682b      	ldr	r3, [r5, #0]
 80130da:	1d1a      	adds	r2, r3, #4
 80130dc:	681b      	ldr	r3, [r3, #0]
 80130de:	602a      	str	r2, [r5, #0]
 80130e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80130e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80130e8:	2301      	movs	r3, #1
 80130ea:	e0a3      	b.n	8013234 <_printf_i+0x1f4>
 80130ec:	6820      	ldr	r0, [r4, #0]
 80130ee:	6829      	ldr	r1, [r5, #0]
 80130f0:	0606      	lsls	r6, r0, #24
 80130f2:	f101 0304 	add.w	r3, r1, #4
 80130f6:	d50a      	bpl.n	801310e <_printf_i+0xce>
 80130f8:	680e      	ldr	r6, [r1, #0]
 80130fa:	602b      	str	r3, [r5, #0]
 80130fc:	2e00      	cmp	r6, #0
 80130fe:	da03      	bge.n	8013108 <_printf_i+0xc8>
 8013100:	232d      	movs	r3, #45	; 0x2d
 8013102:	4276      	negs	r6, r6
 8013104:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013108:	485e      	ldr	r0, [pc, #376]	; (8013284 <_printf_i+0x244>)
 801310a:	230a      	movs	r3, #10
 801310c:	e019      	b.n	8013142 <_printf_i+0x102>
 801310e:	680e      	ldr	r6, [r1, #0]
 8013110:	602b      	str	r3, [r5, #0]
 8013112:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013116:	bf18      	it	ne
 8013118:	b236      	sxthne	r6, r6
 801311a:	e7ef      	b.n	80130fc <_printf_i+0xbc>
 801311c:	682b      	ldr	r3, [r5, #0]
 801311e:	6820      	ldr	r0, [r4, #0]
 8013120:	1d19      	adds	r1, r3, #4
 8013122:	6029      	str	r1, [r5, #0]
 8013124:	0601      	lsls	r1, r0, #24
 8013126:	d501      	bpl.n	801312c <_printf_i+0xec>
 8013128:	681e      	ldr	r6, [r3, #0]
 801312a:	e002      	b.n	8013132 <_printf_i+0xf2>
 801312c:	0646      	lsls	r6, r0, #25
 801312e:	d5fb      	bpl.n	8013128 <_printf_i+0xe8>
 8013130:	881e      	ldrh	r6, [r3, #0]
 8013132:	4854      	ldr	r0, [pc, #336]	; (8013284 <_printf_i+0x244>)
 8013134:	2f6f      	cmp	r7, #111	; 0x6f
 8013136:	bf0c      	ite	eq
 8013138:	2308      	moveq	r3, #8
 801313a:	230a      	movne	r3, #10
 801313c:	2100      	movs	r1, #0
 801313e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013142:	6865      	ldr	r5, [r4, #4]
 8013144:	60a5      	str	r5, [r4, #8]
 8013146:	2d00      	cmp	r5, #0
 8013148:	bfa2      	ittt	ge
 801314a:	6821      	ldrge	r1, [r4, #0]
 801314c:	f021 0104 	bicge.w	r1, r1, #4
 8013150:	6021      	strge	r1, [r4, #0]
 8013152:	b90e      	cbnz	r6, 8013158 <_printf_i+0x118>
 8013154:	2d00      	cmp	r5, #0
 8013156:	d04d      	beq.n	80131f4 <_printf_i+0x1b4>
 8013158:	4615      	mov	r5, r2
 801315a:	fbb6 f1f3 	udiv	r1, r6, r3
 801315e:	fb03 6711 	mls	r7, r3, r1, r6
 8013162:	5dc7      	ldrb	r7, [r0, r7]
 8013164:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8013168:	4637      	mov	r7, r6
 801316a:	42bb      	cmp	r3, r7
 801316c:	460e      	mov	r6, r1
 801316e:	d9f4      	bls.n	801315a <_printf_i+0x11a>
 8013170:	2b08      	cmp	r3, #8
 8013172:	d10b      	bne.n	801318c <_printf_i+0x14c>
 8013174:	6823      	ldr	r3, [r4, #0]
 8013176:	07de      	lsls	r6, r3, #31
 8013178:	d508      	bpl.n	801318c <_printf_i+0x14c>
 801317a:	6923      	ldr	r3, [r4, #16]
 801317c:	6861      	ldr	r1, [r4, #4]
 801317e:	4299      	cmp	r1, r3
 8013180:	bfde      	ittt	le
 8013182:	2330      	movle	r3, #48	; 0x30
 8013184:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013188:	f105 35ff 	addle.w	r5, r5, #4294967295
 801318c:	1b52      	subs	r2, r2, r5
 801318e:	6122      	str	r2, [r4, #16]
 8013190:	f8cd a000 	str.w	sl, [sp]
 8013194:	464b      	mov	r3, r9
 8013196:	aa03      	add	r2, sp, #12
 8013198:	4621      	mov	r1, r4
 801319a:	4640      	mov	r0, r8
 801319c:	f7ff fee2 	bl	8012f64 <_printf_common>
 80131a0:	3001      	adds	r0, #1
 80131a2:	d14c      	bne.n	801323e <_printf_i+0x1fe>
 80131a4:	f04f 30ff 	mov.w	r0, #4294967295
 80131a8:	b004      	add	sp, #16
 80131aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80131ae:	4835      	ldr	r0, [pc, #212]	; (8013284 <_printf_i+0x244>)
 80131b0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80131b4:	6829      	ldr	r1, [r5, #0]
 80131b6:	6823      	ldr	r3, [r4, #0]
 80131b8:	f851 6b04 	ldr.w	r6, [r1], #4
 80131bc:	6029      	str	r1, [r5, #0]
 80131be:	061d      	lsls	r5, r3, #24
 80131c0:	d514      	bpl.n	80131ec <_printf_i+0x1ac>
 80131c2:	07df      	lsls	r7, r3, #31
 80131c4:	bf44      	itt	mi
 80131c6:	f043 0320 	orrmi.w	r3, r3, #32
 80131ca:	6023      	strmi	r3, [r4, #0]
 80131cc:	b91e      	cbnz	r6, 80131d6 <_printf_i+0x196>
 80131ce:	6823      	ldr	r3, [r4, #0]
 80131d0:	f023 0320 	bic.w	r3, r3, #32
 80131d4:	6023      	str	r3, [r4, #0]
 80131d6:	2310      	movs	r3, #16
 80131d8:	e7b0      	b.n	801313c <_printf_i+0xfc>
 80131da:	6823      	ldr	r3, [r4, #0]
 80131dc:	f043 0320 	orr.w	r3, r3, #32
 80131e0:	6023      	str	r3, [r4, #0]
 80131e2:	2378      	movs	r3, #120	; 0x78
 80131e4:	4828      	ldr	r0, [pc, #160]	; (8013288 <_printf_i+0x248>)
 80131e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80131ea:	e7e3      	b.n	80131b4 <_printf_i+0x174>
 80131ec:	0659      	lsls	r1, r3, #25
 80131ee:	bf48      	it	mi
 80131f0:	b2b6      	uxthmi	r6, r6
 80131f2:	e7e6      	b.n	80131c2 <_printf_i+0x182>
 80131f4:	4615      	mov	r5, r2
 80131f6:	e7bb      	b.n	8013170 <_printf_i+0x130>
 80131f8:	682b      	ldr	r3, [r5, #0]
 80131fa:	6826      	ldr	r6, [r4, #0]
 80131fc:	6961      	ldr	r1, [r4, #20]
 80131fe:	1d18      	adds	r0, r3, #4
 8013200:	6028      	str	r0, [r5, #0]
 8013202:	0635      	lsls	r5, r6, #24
 8013204:	681b      	ldr	r3, [r3, #0]
 8013206:	d501      	bpl.n	801320c <_printf_i+0x1cc>
 8013208:	6019      	str	r1, [r3, #0]
 801320a:	e002      	b.n	8013212 <_printf_i+0x1d2>
 801320c:	0670      	lsls	r0, r6, #25
 801320e:	d5fb      	bpl.n	8013208 <_printf_i+0x1c8>
 8013210:	8019      	strh	r1, [r3, #0]
 8013212:	2300      	movs	r3, #0
 8013214:	6123      	str	r3, [r4, #16]
 8013216:	4615      	mov	r5, r2
 8013218:	e7ba      	b.n	8013190 <_printf_i+0x150>
 801321a:	682b      	ldr	r3, [r5, #0]
 801321c:	1d1a      	adds	r2, r3, #4
 801321e:	602a      	str	r2, [r5, #0]
 8013220:	681d      	ldr	r5, [r3, #0]
 8013222:	6862      	ldr	r2, [r4, #4]
 8013224:	2100      	movs	r1, #0
 8013226:	4628      	mov	r0, r5
 8013228:	f7ed f80a 	bl	8000240 <memchr>
 801322c:	b108      	cbz	r0, 8013232 <_printf_i+0x1f2>
 801322e:	1b40      	subs	r0, r0, r5
 8013230:	6060      	str	r0, [r4, #4]
 8013232:	6863      	ldr	r3, [r4, #4]
 8013234:	6123      	str	r3, [r4, #16]
 8013236:	2300      	movs	r3, #0
 8013238:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801323c:	e7a8      	b.n	8013190 <_printf_i+0x150>
 801323e:	6923      	ldr	r3, [r4, #16]
 8013240:	462a      	mov	r2, r5
 8013242:	4649      	mov	r1, r9
 8013244:	4640      	mov	r0, r8
 8013246:	47d0      	blx	sl
 8013248:	3001      	adds	r0, #1
 801324a:	d0ab      	beq.n	80131a4 <_printf_i+0x164>
 801324c:	6823      	ldr	r3, [r4, #0]
 801324e:	079b      	lsls	r3, r3, #30
 8013250:	d413      	bmi.n	801327a <_printf_i+0x23a>
 8013252:	68e0      	ldr	r0, [r4, #12]
 8013254:	9b03      	ldr	r3, [sp, #12]
 8013256:	4298      	cmp	r0, r3
 8013258:	bfb8      	it	lt
 801325a:	4618      	movlt	r0, r3
 801325c:	e7a4      	b.n	80131a8 <_printf_i+0x168>
 801325e:	2301      	movs	r3, #1
 8013260:	4632      	mov	r2, r6
 8013262:	4649      	mov	r1, r9
 8013264:	4640      	mov	r0, r8
 8013266:	47d0      	blx	sl
 8013268:	3001      	adds	r0, #1
 801326a:	d09b      	beq.n	80131a4 <_printf_i+0x164>
 801326c:	3501      	adds	r5, #1
 801326e:	68e3      	ldr	r3, [r4, #12]
 8013270:	9903      	ldr	r1, [sp, #12]
 8013272:	1a5b      	subs	r3, r3, r1
 8013274:	42ab      	cmp	r3, r5
 8013276:	dcf2      	bgt.n	801325e <_printf_i+0x21e>
 8013278:	e7eb      	b.n	8013252 <_printf_i+0x212>
 801327a:	2500      	movs	r5, #0
 801327c:	f104 0619 	add.w	r6, r4, #25
 8013280:	e7f5      	b.n	801326e <_printf_i+0x22e>
 8013282:	bf00      	nop
 8013284:	0805d904 	.word	0x0805d904
 8013288:	0805d915 	.word	0x0805d915

0801328c <_scanf_float>:
 801328c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013290:	b087      	sub	sp, #28
 8013292:	4617      	mov	r7, r2
 8013294:	9303      	str	r3, [sp, #12]
 8013296:	688b      	ldr	r3, [r1, #8]
 8013298:	1e5a      	subs	r2, r3, #1
 801329a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801329e:	bf83      	ittte	hi
 80132a0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80132a4:	195b      	addhi	r3, r3, r5
 80132a6:	9302      	strhi	r3, [sp, #8]
 80132a8:	2300      	movls	r3, #0
 80132aa:	bf86      	itte	hi
 80132ac:	f240 135d 	movwhi	r3, #349	; 0x15d
 80132b0:	608b      	strhi	r3, [r1, #8]
 80132b2:	9302      	strls	r3, [sp, #8]
 80132b4:	680b      	ldr	r3, [r1, #0]
 80132b6:	468b      	mov	fp, r1
 80132b8:	2500      	movs	r5, #0
 80132ba:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80132be:	f84b 3b1c 	str.w	r3, [fp], #28
 80132c2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80132c6:	4680      	mov	r8, r0
 80132c8:	460c      	mov	r4, r1
 80132ca:	465e      	mov	r6, fp
 80132cc:	46aa      	mov	sl, r5
 80132ce:	46a9      	mov	r9, r5
 80132d0:	9501      	str	r5, [sp, #4]
 80132d2:	68a2      	ldr	r2, [r4, #8]
 80132d4:	b152      	cbz	r2, 80132ec <_scanf_float+0x60>
 80132d6:	683b      	ldr	r3, [r7, #0]
 80132d8:	781b      	ldrb	r3, [r3, #0]
 80132da:	2b4e      	cmp	r3, #78	; 0x4e
 80132dc:	d864      	bhi.n	80133a8 <_scanf_float+0x11c>
 80132de:	2b40      	cmp	r3, #64	; 0x40
 80132e0:	d83c      	bhi.n	801335c <_scanf_float+0xd0>
 80132e2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80132e6:	b2c8      	uxtb	r0, r1
 80132e8:	280e      	cmp	r0, #14
 80132ea:	d93a      	bls.n	8013362 <_scanf_float+0xd6>
 80132ec:	f1b9 0f00 	cmp.w	r9, #0
 80132f0:	d003      	beq.n	80132fa <_scanf_float+0x6e>
 80132f2:	6823      	ldr	r3, [r4, #0]
 80132f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80132f8:	6023      	str	r3, [r4, #0]
 80132fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80132fe:	f1ba 0f01 	cmp.w	sl, #1
 8013302:	f200 8113 	bhi.w	801352c <_scanf_float+0x2a0>
 8013306:	455e      	cmp	r6, fp
 8013308:	f200 8105 	bhi.w	8013516 <_scanf_float+0x28a>
 801330c:	2501      	movs	r5, #1
 801330e:	4628      	mov	r0, r5
 8013310:	b007      	add	sp, #28
 8013312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013316:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801331a:	2a0d      	cmp	r2, #13
 801331c:	d8e6      	bhi.n	80132ec <_scanf_float+0x60>
 801331e:	a101      	add	r1, pc, #4	; (adr r1, 8013324 <_scanf_float+0x98>)
 8013320:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8013324:	08013463 	.word	0x08013463
 8013328:	080132ed 	.word	0x080132ed
 801332c:	080132ed 	.word	0x080132ed
 8013330:	080132ed 	.word	0x080132ed
 8013334:	080134c3 	.word	0x080134c3
 8013338:	0801349b 	.word	0x0801349b
 801333c:	080132ed 	.word	0x080132ed
 8013340:	080132ed 	.word	0x080132ed
 8013344:	08013471 	.word	0x08013471
 8013348:	080132ed 	.word	0x080132ed
 801334c:	080132ed 	.word	0x080132ed
 8013350:	080132ed 	.word	0x080132ed
 8013354:	080132ed 	.word	0x080132ed
 8013358:	08013429 	.word	0x08013429
 801335c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8013360:	e7db      	b.n	801331a <_scanf_float+0x8e>
 8013362:	290e      	cmp	r1, #14
 8013364:	d8c2      	bhi.n	80132ec <_scanf_float+0x60>
 8013366:	a001      	add	r0, pc, #4	; (adr r0, 801336c <_scanf_float+0xe0>)
 8013368:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801336c:	0801341b 	.word	0x0801341b
 8013370:	080132ed 	.word	0x080132ed
 8013374:	0801341b 	.word	0x0801341b
 8013378:	080134af 	.word	0x080134af
 801337c:	080132ed 	.word	0x080132ed
 8013380:	080133c9 	.word	0x080133c9
 8013384:	08013405 	.word	0x08013405
 8013388:	08013405 	.word	0x08013405
 801338c:	08013405 	.word	0x08013405
 8013390:	08013405 	.word	0x08013405
 8013394:	08013405 	.word	0x08013405
 8013398:	08013405 	.word	0x08013405
 801339c:	08013405 	.word	0x08013405
 80133a0:	08013405 	.word	0x08013405
 80133a4:	08013405 	.word	0x08013405
 80133a8:	2b6e      	cmp	r3, #110	; 0x6e
 80133aa:	d809      	bhi.n	80133c0 <_scanf_float+0x134>
 80133ac:	2b60      	cmp	r3, #96	; 0x60
 80133ae:	d8b2      	bhi.n	8013316 <_scanf_float+0x8a>
 80133b0:	2b54      	cmp	r3, #84	; 0x54
 80133b2:	d077      	beq.n	80134a4 <_scanf_float+0x218>
 80133b4:	2b59      	cmp	r3, #89	; 0x59
 80133b6:	d199      	bne.n	80132ec <_scanf_float+0x60>
 80133b8:	2d07      	cmp	r5, #7
 80133ba:	d197      	bne.n	80132ec <_scanf_float+0x60>
 80133bc:	2508      	movs	r5, #8
 80133be:	e029      	b.n	8013414 <_scanf_float+0x188>
 80133c0:	2b74      	cmp	r3, #116	; 0x74
 80133c2:	d06f      	beq.n	80134a4 <_scanf_float+0x218>
 80133c4:	2b79      	cmp	r3, #121	; 0x79
 80133c6:	e7f6      	b.n	80133b6 <_scanf_float+0x12a>
 80133c8:	6821      	ldr	r1, [r4, #0]
 80133ca:	05c8      	lsls	r0, r1, #23
 80133cc:	d51a      	bpl.n	8013404 <_scanf_float+0x178>
 80133ce:	9b02      	ldr	r3, [sp, #8]
 80133d0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80133d4:	6021      	str	r1, [r4, #0]
 80133d6:	f109 0901 	add.w	r9, r9, #1
 80133da:	b11b      	cbz	r3, 80133e4 <_scanf_float+0x158>
 80133dc:	3b01      	subs	r3, #1
 80133de:	3201      	adds	r2, #1
 80133e0:	9302      	str	r3, [sp, #8]
 80133e2:	60a2      	str	r2, [r4, #8]
 80133e4:	68a3      	ldr	r3, [r4, #8]
 80133e6:	3b01      	subs	r3, #1
 80133e8:	60a3      	str	r3, [r4, #8]
 80133ea:	6923      	ldr	r3, [r4, #16]
 80133ec:	3301      	adds	r3, #1
 80133ee:	6123      	str	r3, [r4, #16]
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	3b01      	subs	r3, #1
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	607b      	str	r3, [r7, #4]
 80133f8:	f340 8084 	ble.w	8013504 <_scanf_float+0x278>
 80133fc:	683b      	ldr	r3, [r7, #0]
 80133fe:	3301      	adds	r3, #1
 8013400:	603b      	str	r3, [r7, #0]
 8013402:	e766      	b.n	80132d2 <_scanf_float+0x46>
 8013404:	eb1a 0f05 	cmn.w	sl, r5
 8013408:	f47f af70 	bne.w	80132ec <_scanf_float+0x60>
 801340c:	6822      	ldr	r2, [r4, #0]
 801340e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8013412:	6022      	str	r2, [r4, #0]
 8013414:	f806 3b01 	strb.w	r3, [r6], #1
 8013418:	e7e4      	b.n	80133e4 <_scanf_float+0x158>
 801341a:	6822      	ldr	r2, [r4, #0]
 801341c:	0610      	lsls	r0, r2, #24
 801341e:	f57f af65 	bpl.w	80132ec <_scanf_float+0x60>
 8013422:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8013426:	e7f4      	b.n	8013412 <_scanf_float+0x186>
 8013428:	f1ba 0f00 	cmp.w	sl, #0
 801342c:	d10e      	bne.n	801344c <_scanf_float+0x1c0>
 801342e:	f1b9 0f00 	cmp.w	r9, #0
 8013432:	d10e      	bne.n	8013452 <_scanf_float+0x1c6>
 8013434:	6822      	ldr	r2, [r4, #0]
 8013436:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801343a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801343e:	d108      	bne.n	8013452 <_scanf_float+0x1c6>
 8013440:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8013444:	6022      	str	r2, [r4, #0]
 8013446:	f04f 0a01 	mov.w	sl, #1
 801344a:	e7e3      	b.n	8013414 <_scanf_float+0x188>
 801344c:	f1ba 0f02 	cmp.w	sl, #2
 8013450:	d055      	beq.n	80134fe <_scanf_float+0x272>
 8013452:	2d01      	cmp	r5, #1
 8013454:	d002      	beq.n	801345c <_scanf_float+0x1d0>
 8013456:	2d04      	cmp	r5, #4
 8013458:	f47f af48 	bne.w	80132ec <_scanf_float+0x60>
 801345c:	3501      	adds	r5, #1
 801345e:	b2ed      	uxtb	r5, r5
 8013460:	e7d8      	b.n	8013414 <_scanf_float+0x188>
 8013462:	f1ba 0f01 	cmp.w	sl, #1
 8013466:	f47f af41 	bne.w	80132ec <_scanf_float+0x60>
 801346a:	f04f 0a02 	mov.w	sl, #2
 801346e:	e7d1      	b.n	8013414 <_scanf_float+0x188>
 8013470:	b97d      	cbnz	r5, 8013492 <_scanf_float+0x206>
 8013472:	f1b9 0f00 	cmp.w	r9, #0
 8013476:	f47f af3c 	bne.w	80132f2 <_scanf_float+0x66>
 801347a:	6822      	ldr	r2, [r4, #0]
 801347c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8013480:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8013484:	f47f af39 	bne.w	80132fa <_scanf_float+0x6e>
 8013488:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801348c:	6022      	str	r2, [r4, #0]
 801348e:	2501      	movs	r5, #1
 8013490:	e7c0      	b.n	8013414 <_scanf_float+0x188>
 8013492:	2d03      	cmp	r5, #3
 8013494:	d0e2      	beq.n	801345c <_scanf_float+0x1d0>
 8013496:	2d05      	cmp	r5, #5
 8013498:	e7de      	b.n	8013458 <_scanf_float+0x1cc>
 801349a:	2d02      	cmp	r5, #2
 801349c:	f47f af26 	bne.w	80132ec <_scanf_float+0x60>
 80134a0:	2503      	movs	r5, #3
 80134a2:	e7b7      	b.n	8013414 <_scanf_float+0x188>
 80134a4:	2d06      	cmp	r5, #6
 80134a6:	f47f af21 	bne.w	80132ec <_scanf_float+0x60>
 80134aa:	2507      	movs	r5, #7
 80134ac:	e7b2      	b.n	8013414 <_scanf_float+0x188>
 80134ae:	6822      	ldr	r2, [r4, #0]
 80134b0:	0591      	lsls	r1, r2, #22
 80134b2:	f57f af1b 	bpl.w	80132ec <_scanf_float+0x60>
 80134b6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80134ba:	6022      	str	r2, [r4, #0]
 80134bc:	f8cd 9004 	str.w	r9, [sp, #4]
 80134c0:	e7a8      	b.n	8013414 <_scanf_float+0x188>
 80134c2:	6822      	ldr	r2, [r4, #0]
 80134c4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80134c8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80134cc:	d006      	beq.n	80134dc <_scanf_float+0x250>
 80134ce:	0550      	lsls	r0, r2, #21
 80134d0:	f57f af0c 	bpl.w	80132ec <_scanf_float+0x60>
 80134d4:	f1b9 0f00 	cmp.w	r9, #0
 80134d8:	f43f af0f 	beq.w	80132fa <_scanf_float+0x6e>
 80134dc:	0591      	lsls	r1, r2, #22
 80134de:	bf58      	it	pl
 80134e0:	9901      	ldrpl	r1, [sp, #4]
 80134e2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80134e6:	bf58      	it	pl
 80134e8:	eba9 0101 	subpl.w	r1, r9, r1
 80134ec:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80134f0:	bf58      	it	pl
 80134f2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80134f6:	6022      	str	r2, [r4, #0]
 80134f8:	f04f 0900 	mov.w	r9, #0
 80134fc:	e78a      	b.n	8013414 <_scanf_float+0x188>
 80134fe:	f04f 0a03 	mov.w	sl, #3
 8013502:	e787      	b.n	8013414 <_scanf_float+0x188>
 8013504:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013508:	4639      	mov	r1, r7
 801350a:	4640      	mov	r0, r8
 801350c:	4798      	blx	r3
 801350e:	2800      	cmp	r0, #0
 8013510:	f43f aedf 	beq.w	80132d2 <_scanf_float+0x46>
 8013514:	e6ea      	b.n	80132ec <_scanf_float+0x60>
 8013516:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801351a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801351e:	463a      	mov	r2, r7
 8013520:	4640      	mov	r0, r8
 8013522:	4798      	blx	r3
 8013524:	6923      	ldr	r3, [r4, #16]
 8013526:	3b01      	subs	r3, #1
 8013528:	6123      	str	r3, [r4, #16]
 801352a:	e6ec      	b.n	8013306 <_scanf_float+0x7a>
 801352c:	1e6b      	subs	r3, r5, #1
 801352e:	2b06      	cmp	r3, #6
 8013530:	d825      	bhi.n	801357e <_scanf_float+0x2f2>
 8013532:	2d02      	cmp	r5, #2
 8013534:	d836      	bhi.n	80135a4 <_scanf_float+0x318>
 8013536:	455e      	cmp	r6, fp
 8013538:	f67f aee8 	bls.w	801330c <_scanf_float+0x80>
 801353c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013540:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013544:	463a      	mov	r2, r7
 8013546:	4640      	mov	r0, r8
 8013548:	4798      	blx	r3
 801354a:	6923      	ldr	r3, [r4, #16]
 801354c:	3b01      	subs	r3, #1
 801354e:	6123      	str	r3, [r4, #16]
 8013550:	e7f1      	b.n	8013536 <_scanf_float+0x2aa>
 8013552:	9802      	ldr	r0, [sp, #8]
 8013554:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013558:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801355c:	9002      	str	r0, [sp, #8]
 801355e:	463a      	mov	r2, r7
 8013560:	4640      	mov	r0, r8
 8013562:	4798      	blx	r3
 8013564:	6923      	ldr	r3, [r4, #16]
 8013566:	3b01      	subs	r3, #1
 8013568:	6123      	str	r3, [r4, #16]
 801356a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801356e:	fa5f fa8a 	uxtb.w	sl, sl
 8013572:	f1ba 0f02 	cmp.w	sl, #2
 8013576:	d1ec      	bne.n	8013552 <_scanf_float+0x2c6>
 8013578:	3d03      	subs	r5, #3
 801357a:	b2ed      	uxtb	r5, r5
 801357c:	1b76      	subs	r6, r6, r5
 801357e:	6823      	ldr	r3, [r4, #0]
 8013580:	05da      	lsls	r2, r3, #23
 8013582:	d52f      	bpl.n	80135e4 <_scanf_float+0x358>
 8013584:	055b      	lsls	r3, r3, #21
 8013586:	d510      	bpl.n	80135aa <_scanf_float+0x31e>
 8013588:	455e      	cmp	r6, fp
 801358a:	f67f aebf 	bls.w	801330c <_scanf_float+0x80>
 801358e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013592:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013596:	463a      	mov	r2, r7
 8013598:	4640      	mov	r0, r8
 801359a:	4798      	blx	r3
 801359c:	6923      	ldr	r3, [r4, #16]
 801359e:	3b01      	subs	r3, #1
 80135a0:	6123      	str	r3, [r4, #16]
 80135a2:	e7f1      	b.n	8013588 <_scanf_float+0x2fc>
 80135a4:	46aa      	mov	sl, r5
 80135a6:	9602      	str	r6, [sp, #8]
 80135a8:	e7df      	b.n	801356a <_scanf_float+0x2de>
 80135aa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80135ae:	6923      	ldr	r3, [r4, #16]
 80135b0:	2965      	cmp	r1, #101	; 0x65
 80135b2:	f103 33ff 	add.w	r3, r3, #4294967295
 80135b6:	f106 35ff 	add.w	r5, r6, #4294967295
 80135ba:	6123      	str	r3, [r4, #16]
 80135bc:	d00c      	beq.n	80135d8 <_scanf_float+0x34c>
 80135be:	2945      	cmp	r1, #69	; 0x45
 80135c0:	d00a      	beq.n	80135d8 <_scanf_float+0x34c>
 80135c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80135c6:	463a      	mov	r2, r7
 80135c8:	4640      	mov	r0, r8
 80135ca:	4798      	blx	r3
 80135cc:	6923      	ldr	r3, [r4, #16]
 80135ce:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80135d2:	3b01      	subs	r3, #1
 80135d4:	1eb5      	subs	r5, r6, #2
 80135d6:	6123      	str	r3, [r4, #16]
 80135d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80135dc:	463a      	mov	r2, r7
 80135de:	4640      	mov	r0, r8
 80135e0:	4798      	blx	r3
 80135e2:	462e      	mov	r6, r5
 80135e4:	6825      	ldr	r5, [r4, #0]
 80135e6:	f015 0510 	ands.w	r5, r5, #16
 80135ea:	d159      	bne.n	80136a0 <_scanf_float+0x414>
 80135ec:	7035      	strb	r5, [r6, #0]
 80135ee:	6823      	ldr	r3, [r4, #0]
 80135f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80135f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80135f8:	d11b      	bne.n	8013632 <_scanf_float+0x3a6>
 80135fa:	9b01      	ldr	r3, [sp, #4]
 80135fc:	454b      	cmp	r3, r9
 80135fe:	eba3 0209 	sub.w	r2, r3, r9
 8013602:	d123      	bne.n	801364c <_scanf_float+0x3c0>
 8013604:	2200      	movs	r2, #0
 8013606:	4659      	mov	r1, fp
 8013608:	4640      	mov	r0, r8
 801360a:	f000 ff23 	bl	8014454 <_strtod_r>
 801360e:	6822      	ldr	r2, [r4, #0]
 8013610:	9b03      	ldr	r3, [sp, #12]
 8013612:	f012 0f02 	tst.w	r2, #2
 8013616:	ec57 6b10 	vmov	r6, r7, d0
 801361a:	681b      	ldr	r3, [r3, #0]
 801361c:	d021      	beq.n	8013662 <_scanf_float+0x3d6>
 801361e:	9903      	ldr	r1, [sp, #12]
 8013620:	1d1a      	adds	r2, r3, #4
 8013622:	600a      	str	r2, [r1, #0]
 8013624:	681b      	ldr	r3, [r3, #0]
 8013626:	e9c3 6700 	strd	r6, r7, [r3]
 801362a:	68e3      	ldr	r3, [r4, #12]
 801362c:	3301      	adds	r3, #1
 801362e:	60e3      	str	r3, [r4, #12]
 8013630:	e66d      	b.n	801330e <_scanf_float+0x82>
 8013632:	9b04      	ldr	r3, [sp, #16]
 8013634:	2b00      	cmp	r3, #0
 8013636:	d0e5      	beq.n	8013604 <_scanf_float+0x378>
 8013638:	9905      	ldr	r1, [sp, #20]
 801363a:	230a      	movs	r3, #10
 801363c:	462a      	mov	r2, r5
 801363e:	3101      	adds	r1, #1
 8013640:	4640      	mov	r0, r8
 8013642:	f000 ffeb 	bl	801461c <_strtol_r>
 8013646:	9b04      	ldr	r3, [sp, #16]
 8013648:	9e05      	ldr	r6, [sp, #20]
 801364a:	1ac2      	subs	r2, r0, r3
 801364c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8013650:	429e      	cmp	r6, r3
 8013652:	bf28      	it	cs
 8013654:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8013658:	4912      	ldr	r1, [pc, #72]	; (80136a4 <_scanf_float+0x418>)
 801365a:	4630      	mov	r0, r6
 801365c:	f000 f83c 	bl	80136d8 <siprintf>
 8013660:	e7d0      	b.n	8013604 <_scanf_float+0x378>
 8013662:	9903      	ldr	r1, [sp, #12]
 8013664:	f012 0f04 	tst.w	r2, #4
 8013668:	f103 0204 	add.w	r2, r3, #4
 801366c:	600a      	str	r2, [r1, #0]
 801366e:	d1d9      	bne.n	8013624 <_scanf_float+0x398>
 8013670:	f8d3 8000 	ldr.w	r8, [r3]
 8013674:	ee10 2a10 	vmov	r2, s0
 8013678:	ee10 0a10 	vmov	r0, s0
 801367c:	463b      	mov	r3, r7
 801367e:	4639      	mov	r1, r7
 8013680:	f7ed fa84 	bl	8000b8c <__aeabi_dcmpun>
 8013684:	b128      	cbz	r0, 8013692 <_scanf_float+0x406>
 8013686:	4808      	ldr	r0, [pc, #32]	; (80136a8 <_scanf_float+0x41c>)
 8013688:	f000 f820 	bl	80136cc <nanf>
 801368c:	ed88 0a00 	vstr	s0, [r8]
 8013690:	e7cb      	b.n	801362a <_scanf_float+0x39e>
 8013692:	4630      	mov	r0, r6
 8013694:	4639      	mov	r1, r7
 8013696:	f7ed fad7 	bl	8000c48 <__aeabi_d2f>
 801369a:	f8c8 0000 	str.w	r0, [r8]
 801369e:	e7c4      	b.n	801362a <_scanf_float+0x39e>
 80136a0:	2500      	movs	r5, #0
 80136a2:	e634      	b.n	801330e <_scanf_float+0x82>
 80136a4:	0805d926 	.word	0x0805d926
 80136a8:	0805da2f 	.word	0x0805da2f

080136ac <_sbrk_r>:
 80136ac:	b538      	push	{r3, r4, r5, lr}
 80136ae:	4d06      	ldr	r5, [pc, #24]	; (80136c8 <_sbrk_r+0x1c>)
 80136b0:	2300      	movs	r3, #0
 80136b2:	4604      	mov	r4, r0
 80136b4:	4608      	mov	r0, r1
 80136b6:	602b      	str	r3, [r5, #0]
 80136b8:	f7f0 fe3a 	bl	8004330 <_sbrk>
 80136bc:	1c43      	adds	r3, r0, #1
 80136be:	d102      	bne.n	80136c6 <_sbrk_r+0x1a>
 80136c0:	682b      	ldr	r3, [r5, #0]
 80136c2:	b103      	cbz	r3, 80136c6 <_sbrk_r+0x1a>
 80136c4:	6023      	str	r3, [r4, #0]
 80136c6:	bd38      	pop	{r3, r4, r5, pc}
 80136c8:	2000c670 	.word	0x2000c670

080136cc <nanf>:
 80136cc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80136d4 <nanf+0x8>
 80136d0:	4770      	bx	lr
 80136d2:	bf00      	nop
 80136d4:	7fc00000 	.word	0x7fc00000

080136d8 <siprintf>:
 80136d8:	b40e      	push	{r1, r2, r3}
 80136da:	b500      	push	{lr}
 80136dc:	b09c      	sub	sp, #112	; 0x70
 80136de:	ab1d      	add	r3, sp, #116	; 0x74
 80136e0:	9002      	str	r0, [sp, #8]
 80136e2:	9006      	str	r0, [sp, #24]
 80136e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80136e8:	4809      	ldr	r0, [pc, #36]	; (8013710 <siprintf+0x38>)
 80136ea:	9107      	str	r1, [sp, #28]
 80136ec:	9104      	str	r1, [sp, #16]
 80136ee:	4909      	ldr	r1, [pc, #36]	; (8013714 <siprintf+0x3c>)
 80136f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80136f4:	9105      	str	r1, [sp, #20]
 80136f6:	6800      	ldr	r0, [r0, #0]
 80136f8:	9301      	str	r3, [sp, #4]
 80136fa:	a902      	add	r1, sp, #8
 80136fc:	f002 ff62 	bl	80165c4 <_svfiprintf_r>
 8013700:	9b02      	ldr	r3, [sp, #8]
 8013702:	2200      	movs	r2, #0
 8013704:	701a      	strb	r2, [r3, #0]
 8013706:	b01c      	add	sp, #112	; 0x70
 8013708:	f85d eb04 	ldr.w	lr, [sp], #4
 801370c:	b003      	add	sp, #12
 801370e:	4770      	bx	lr
 8013710:	2000145c 	.word	0x2000145c
 8013714:	ffff0208 	.word	0xffff0208

08013718 <siscanf>:
 8013718:	b40e      	push	{r1, r2, r3}
 801371a:	b510      	push	{r4, lr}
 801371c:	b09f      	sub	sp, #124	; 0x7c
 801371e:	ac21      	add	r4, sp, #132	; 0x84
 8013720:	f44f 7101 	mov.w	r1, #516	; 0x204
 8013724:	f854 2b04 	ldr.w	r2, [r4], #4
 8013728:	9201      	str	r2, [sp, #4]
 801372a:	f8ad 101c 	strh.w	r1, [sp, #28]
 801372e:	9004      	str	r0, [sp, #16]
 8013730:	9008      	str	r0, [sp, #32]
 8013732:	f7ec fd77 	bl	8000224 <strlen>
 8013736:	4b0c      	ldr	r3, [pc, #48]	; (8013768 <siscanf+0x50>)
 8013738:	9005      	str	r0, [sp, #20]
 801373a:	9009      	str	r0, [sp, #36]	; 0x24
 801373c:	930d      	str	r3, [sp, #52]	; 0x34
 801373e:	480b      	ldr	r0, [pc, #44]	; (801376c <siscanf+0x54>)
 8013740:	9a01      	ldr	r2, [sp, #4]
 8013742:	6800      	ldr	r0, [r0, #0]
 8013744:	9403      	str	r4, [sp, #12]
 8013746:	2300      	movs	r3, #0
 8013748:	9311      	str	r3, [sp, #68]	; 0x44
 801374a:	9316      	str	r3, [sp, #88]	; 0x58
 801374c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013750:	f8ad 301e 	strh.w	r3, [sp, #30]
 8013754:	a904      	add	r1, sp, #16
 8013756:	4623      	mov	r3, r4
 8013758:	f003 f88e 	bl	8016878 <__ssvfiscanf_r>
 801375c:	b01f      	add	sp, #124	; 0x7c
 801375e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013762:	b003      	add	sp, #12
 8013764:	4770      	bx	lr
 8013766:	bf00      	nop
 8013768:	08013793 	.word	0x08013793
 801376c:	2000145c 	.word	0x2000145c

08013770 <__sread>:
 8013770:	b510      	push	{r4, lr}
 8013772:	460c      	mov	r4, r1
 8013774:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013778:	f003 fca2 	bl	80170c0 <_read_r>
 801377c:	2800      	cmp	r0, #0
 801377e:	bfab      	itete	ge
 8013780:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013782:	89a3      	ldrhlt	r3, [r4, #12]
 8013784:	181b      	addge	r3, r3, r0
 8013786:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801378a:	bfac      	ite	ge
 801378c:	6563      	strge	r3, [r4, #84]	; 0x54
 801378e:	81a3      	strhlt	r3, [r4, #12]
 8013790:	bd10      	pop	{r4, pc}

08013792 <__seofread>:
 8013792:	2000      	movs	r0, #0
 8013794:	4770      	bx	lr

08013796 <__swrite>:
 8013796:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801379a:	461f      	mov	r7, r3
 801379c:	898b      	ldrh	r3, [r1, #12]
 801379e:	05db      	lsls	r3, r3, #23
 80137a0:	4605      	mov	r5, r0
 80137a2:	460c      	mov	r4, r1
 80137a4:	4616      	mov	r6, r2
 80137a6:	d505      	bpl.n	80137b4 <__swrite+0x1e>
 80137a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80137ac:	2302      	movs	r3, #2
 80137ae:	2200      	movs	r2, #0
 80137b0:	f002 f976 	bl	8015aa0 <_lseek_r>
 80137b4:	89a3      	ldrh	r3, [r4, #12]
 80137b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80137ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80137be:	81a3      	strh	r3, [r4, #12]
 80137c0:	4632      	mov	r2, r6
 80137c2:	463b      	mov	r3, r7
 80137c4:	4628      	mov	r0, r5
 80137c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80137ca:	f000 bf29 	b.w	8014620 <_write_r>

080137ce <__sseek>:
 80137ce:	b510      	push	{r4, lr}
 80137d0:	460c      	mov	r4, r1
 80137d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80137d6:	f002 f963 	bl	8015aa0 <_lseek_r>
 80137da:	1c43      	adds	r3, r0, #1
 80137dc:	89a3      	ldrh	r3, [r4, #12]
 80137de:	bf15      	itete	ne
 80137e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80137e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80137e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80137ea:	81a3      	strheq	r3, [r4, #12]
 80137ec:	bf18      	it	ne
 80137ee:	81a3      	strhne	r3, [r4, #12]
 80137f0:	bd10      	pop	{r4, pc}

080137f2 <__sclose>:
 80137f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80137f6:	f000 bf43 	b.w	8014680 <_close_r>

080137fa <strcpy>:
 80137fa:	4603      	mov	r3, r0
 80137fc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013800:	f803 2b01 	strb.w	r2, [r3], #1
 8013804:	2a00      	cmp	r2, #0
 8013806:	d1f9      	bne.n	80137fc <strcpy+0x2>
 8013808:	4770      	bx	lr

0801380a <sulp>:
 801380a:	b570      	push	{r4, r5, r6, lr}
 801380c:	4604      	mov	r4, r0
 801380e:	460d      	mov	r5, r1
 8013810:	ec45 4b10 	vmov	d0, r4, r5
 8013814:	4616      	mov	r6, r2
 8013816:	f002 fce5 	bl	80161e4 <__ulp>
 801381a:	ec51 0b10 	vmov	r0, r1, d0
 801381e:	b17e      	cbz	r6, 8013840 <sulp+0x36>
 8013820:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8013824:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013828:	2b00      	cmp	r3, #0
 801382a:	dd09      	ble.n	8013840 <sulp+0x36>
 801382c:	051b      	lsls	r3, r3, #20
 801382e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8013832:	2400      	movs	r4, #0
 8013834:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8013838:	4622      	mov	r2, r4
 801383a:	462b      	mov	r3, r5
 801383c:	f7ec ff0c 	bl	8000658 <__aeabi_dmul>
 8013840:	bd70      	pop	{r4, r5, r6, pc}
 8013842:	0000      	movs	r0, r0
 8013844:	0000      	movs	r0, r0
	...

08013848 <_strtod_l>:
 8013848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801384c:	ed2d 8b02 	vpush	{d8}
 8013850:	b09d      	sub	sp, #116	; 0x74
 8013852:	461f      	mov	r7, r3
 8013854:	2300      	movs	r3, #0
 8013856:	9318      	str	r3, [sp, #96]	; 0x60
 8013858:	4ba2      	ldr	r3, [pc, #648]	; (8013ae4 <_strtod_l+0x29c>)
 801385a:	9213      	str	r2, [sp, #76]	; 0x4c
 801385c:	681b      	ldr	r3, [r3, #0]
 801385e:	9305      	str	r3, [sp, #20]
 8013860:	4604      	mov	r4, r0
 8013862:	4618      	mov	r0, r3
 8013864:	4688      	mov	r8, r1
 8013866:	f7ec fcdd 	bl	8000224 <strlen>
 801386a:	f04f 0a00 	mov.w	sl, #0
 801386e:	4605      	mov	r5, r0
 8013870:	f04f 0b00 	mov.w	fp, #0
 8013874:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8013878:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801387a:	781a      	ldrb	r2, [r3, #0]
 801387c:	2a2b      	cmp	r2, #43	; 0x2b
 801387e:	d04e      	beq.n	801391e <_strtod_l+0xd6>
 8013880:	d83b      	bhi.n	80138fa <_strtod_l+0xb2>
 8013882:	2a0d      	cmp	r2, #13
 8013884:	d834      	bhi.n	80138f0 <_strtod_l+0xa8>
 8013886:	2a08      	cmp	r2, #8
 8013888:	d834      	bhi.n	80138f4 <_strtod_l+0xac>
 801388a:	2a00      	cmp	r2, #0
 801388c:	d03e      	beq.n	801390c <_strtod_l+0xc4>
 801388e:	2300      	movs	r3, #0
 8013890:	930a      	str	r3, [sp, #40]	; 0x28
 8013892:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8013894:	7833      	ldrb	r3, [r6, #0]
 8013896:	2b30      	cmp	r3, #48	; 0x30
 8013898:	f040 80b0 	bne.w	80139fc <_strtod_l+0x1b4>
 801389c:	7873      	ldrb	r3, [r6, #1]
 801389e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80138a2:	2b58      	cmp	r3, #88	; 0x58
 80138a4:	d168      	bne.n	8013978 <_strtod_l+0x130>
 80138a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80138a8:	9301      	str	r3, [sp, #4]
 80138aa:	ab18      	add	r3, sp, #96	; 0x60
 80138ac:	9702      	str	r7, [sp, #8]
 80138ae:	9300      	str	r3, [sp, #0]
 80138b0:	4a8d      	ldr	r2, [pc, #564]	; (8013ae8 <_strtod_l+0x2a0>)
 80138b2:	ab19      	add	r3, sp, #100	; 0x64
 80138b4:	a917      	add	r1, sp, #92	; 0x5c
 80138b6:	4620      	mov	r0, r4
 80138b8:	f001 fde6 	bl	8015488 <__gethex>
 80138bc:	f010 0707 	ands.w	r7, r0, #7
 80138c0:	4605      	mov	r5, r0
 80138c2:	d005      	beq.n	80138d0 <_strtod_l+0x88>
 80138c4:	2f06      	cmp	r7, #6
 80138c6:	d12c      	bne.n	8013922 <_strtod_l+0xda>
 80138c8:	3601      	adds	r6, #1
 80138ca:	2300      	movs	r3, #0
 80138cc:	9617      	str	r6, [sp, #92]	; 0x5c
 80138ce:	930a      	str	r3, [sp, #40]	; 0x28
 80138d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80138d2:	2b00      	cmp	r3, #0
 80138d4:	f040 8590 	bne.w	80143f8 <_strtod_l+0xbb0>
 80138d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80138da:	b1eb      	cbz	r3, 8013918 <_strtod_l+0xd0>
 80138dc:	4652      	mov	r2, sl
 80138de:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80138e2:	ec43 2b10 	vmov	d0, r2, r3
 80138e6:	b01d      	add	sp, #116	; 0x74
 80138e8:	ecbd 8b02 	vpop	{d8}
 80138ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138f0:	2a20      	cmp	r2, #32
 80138f2:	d1cc      	bne.n	801388e <_strtod_l+0x46>
 80138f4:	3301      	adds	r3, #1
 80138f6:	9317      	str	r3, [sp, #92]	; 0x5c
 80138f8:	e7be      	b.n	8013878 <_strtod_l+0x30>
 80138fa:	2a2d      	cmp	r2, #45	; 0x2d
 80138fc:	d1c7      	bne.n	801388e <_strtod_l+0x46>
 80138fe:	2201      	movs	r2, #1
 8013900:	920a      	str	r2, [sp, #40]	; 0x28
 8013902:	1c5a      	adds	r2, r3, #1
 8013904:	9217      	str	r2, [sp, #92]	; 0x5c
 8013906:	785b      	ldrb	r3, [r3, #1]
 8013908:	2b00      	cmp	r3, #0
 801390a:	d1c2      	bne.n	8013892 <_strtod_l+0x4a>
 801390c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801390e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8013912:	2b00      	cmp	r3, #0
 8013914:	f040 856e 	bne.w	80143f4 <_strtod_l+0xbac>
 8013918:	4652      	mov	r2, sl
 801391a:	465b      	mov	r3, fp
 801391c:	e7e1      	b.n	80138e2 <_strtod_l+0x9a>
 801391e:	2200      	movs	r2, #0
 8013920:	e7ee      	b.n	8013900 <_strtod_l+0xb8>
 8013922:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013924:	b13a      	cbz	r2, 8013936 <_strtod_l+0xee>
 8013926:	2135      	movs	r1, #53	; 0x35
 8013928:	a81a      	add	r0, sp, #104	; 0x68
 801392a:	f002 fd66 	bl	80163fa <__copybits>
 801392e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013930:	4620      	mov	r0, r4
 8013932:	f002 f925 	bl	8015b80 <_Bfree>
 8013936:	3f01      	subs	r7, #1
 8013938:	2f04      	cmp	r7, #4
 801393a:	d806      	bhi.n	801394a <_strtod_l+0x102>
 801393c:	e8df f007 	tbb	[pc, r7]
 8013940:	1714030a 	.word	0x1714030a
 8013944:	0a          	.byte	0x0a
 8013945:	00          	.byte	0x00
 8013946:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 801394a:	0728      	lsls	r0, r5, #28
 801394c:	d5c0      	bpl.n	80138d0 <_strtod_l+0x88>
 801394e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8013952:	e7bd      	b.n	80138d0 <_strtod_l+0x88>
 8013954:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8013958:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801395a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801395e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8013962:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8013966:	e7f0      	b.n	801394a <_strtod_l+0x102>
 8013968:	f8df b180 	ldr.w	fp, [pc, #384]	; 8013aec <_strtod_l+0x2a4>
 801396c:	e7ed      	b.n	801394a <_strtod_l+0x102>
 801396e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8013972:	f04f 3aff 	mov.w	sl, #4294967295
 8013976:	e7e8      	b.n	801394a <_strtod_l+0x102>
 8013978:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801397a:	1c5a      	adds	r2, r3, #1
 801397c:	9217      	str	r2, [sp, #92]	; 0x5c
 801397e:	785b      	ldrb	r3, [r3, #1]
 8013980:	2b30      	cmp	r3, #48	; 0x30
 8013982:	d0f9      	beq.n	8013978 <_strtod_l+0x130>
 8013984:	2b00      	cmp	r3, #0
 8013986:	d0a3      	beq.n	80138d0 <_strtod_l+0x88>
 8013988:	2301      	movs	r3, #1
 801398a:	f04f 0900 	mov.w	r9, #0
 801398e:	9304      	str	r3, [sp, #16]
 8013990:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013992:	9308      	str	r3, [sp, #32]
 8013994:	f8cd 901c 	str.w	r9, [sp, #28]
 8013998:	464f      	mov	r7, r9
 801399a:	220a      	movs	r2, #10
 801399c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801399e:	7806      	ldrb	r6, [r0, #0]
 80139a0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80139a4:	b2d9      	uxtb	r1, r3
 80139a6:	2909      	cmp	r1, #9
 80139a8:	d92a      	bls.n	8013a00 <_strtod_l+0x1b8>
 80139aa:	9905      	ldr	r1, [sp, #20]
 80139ac:	462a      	mov	r2, r5
 80139ae:	f003 fbdb 	bl	8017168 <strncmp>
 80139b2:	b398      	cbz	r0, 8013a1c <_strtod_l+0x1d4>
 80139b4:	2000      	movs	r0, #0
 80139b6:	4632      	mov	r2, r6
 80139b8:	463d      	mov	r5, r7
 80139ba:	9005      	str	r0, [sp, #20]
 80139bc:	4603      	mov	r3, r0
 80139be:	2a65      	cmp	r2, #101	; 0x65
 80139c0:	d001      	beq.n	80139c6 <_strtod_l+0x17e>
 80139c2:	2a45      	cmp	r2, #69	; 0x45
 80139c4:	d118      	bne.n	80139f8 <_strtod_l+0x1b0>
 80139c6:	b91d      	cbnz	r5, 80139d0 <_strtod_l+0x188>
 80139c8:	9a04      	ldr	r2, [sp, #16]
 80139ca:	4302      	orrs	r2, r0
 80139cc:	d09e      	beq.n	801390c <_strtod_l+0xc4>
 80139ce:	2500      	movs	r5, #0
 80139d0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80139d4:	f108 0201 	add.w	r2, r8, #1
 80139d8:	9217      	str	r2, [sp, #92]	; 0x5c
 80139da:	f898 2001 	ldrb.w	r2, [r8, #1]
 80139de:	2a2b      	cmp	r2, #43	; 0x2b
 80139e0:	d075      	beq.n	8013ace <_strtod_l+0x286>
 80139e2:	2a2d      	cmp	r2, #45	; 0x2d
 80139e4:	d07b      	beq.n	8013ade <_strtod_l+0x296>
 80139e6:	f04f 0c00 	mov.w	ip, #0
 80139ea:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80139ee:	2909      	cmp	r1, #9
 80139f0:	f240 8082 	bls.w	8013af8 <_strtod_l+0x2b0>
 80139f4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80139f8:	2600      	movs	r6, #0
 80139fa:	e09d      	b.n	8013b38 <_strtod_l+0x2f0>
 80139fc:	2300      	movs	r3, #0
 80139fe:	e7c4      	b.n	801398a <_strtod_l+0x142>
 8013a00:	2f08      	cmp	r7, #8
 8013a02:	bfd8      	it	le
 8013a04:	9907      	ldrle	r1, [sp, #28]
 8013a06:	f100 0001 	add.w	r0, r0, #1
 8013a0a:	bfda      	itte	le
 8013a0c:	fb02 3301 	mlale	r3, r2, r1, r3
 8013a10:	9307      	strle	r3, [sp, #28]
 8013a12:	fb02 3909 	mlagt	r9, r2, r9, r3
 8013a16:	3701      	adds	r7, #1
 8013a18:	9017      	str	r0, [sp, #92]	; 0x5c
 8013a1a:	e7bf      	b.n	801399c <_strtod_l+0x154>
 8013a1c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013a1e:	195a      	adds	r2, r3, r5
 8013a20:	9217      	str	r2, [sp, #92]	; 0x5c
 8013a22:	5d5a      	ldrb	r2, [r3, r5]
 8013a24:	2f00      	cmp	r7, #0
 8013a26:	d037      	beq.n	8013a98 <_strtod_l+0x250>
 8013a28:	9005      	str	r0, [sp, #20]
 8013a2a:	463d      	mov	r5, r7
 8013a2c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8013a30:	2b09      	cmp	r3, #9
 8013a32:	d912      	bls.n	8013a5a <_strtod_l+0x212>
 8013a34:	2301      	movs	r3, #1
 8013a36:	e7c2      	b.n	80139be <_strtod_l+0x176>
 8013a38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013a3a:	1c5a      	adds	r2, r3, #1
 8013a3c:	9217      	str	r2, [sp, #92]	; 0x5c
 8013a3e:	785a      	ldrb	r2, [r3, #1]
 8013a40:	3001      	adds	r0, #1
 8013a42:	2a30      	cmp	r2, #48	; 0x30
 8013a44:	d0f8      	beq.n	8013a38 <_strtod_l+0x1f0>
 8013a46:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8013a4a:	2b08      	cmp	r3, #8
 8013a4c:	f200 84d9 	bhi.w	8014402 <_strtod_l+0xbba>
 8013a50:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013a52:	9005      	str	r0, [sp, #20]
 8013a54:	2000      	movs	r0, #0
 8013a56:	9308      	str	r3, [sp, #32]
 8013a58:	4605      	mov	r5, r0
 8013a5a:	3a30      	subs	r2, #48	; 0x30
 8013a5c:	f100 0301 	add.w	r3, r0, #1
 8013a60:	d014      	beq.n	8013a8c <_strtod_l+0x244>
 8013a62:	9905      	ldr	r1, [sp, #20]
 8013a64:	4419      	add	r1, r3
 8013a66:	9105      	str	r1, [sp, #20]
 8013a68:	462b      	mov	r3, r5
 8013a6a:	eb00 0e05 	add.w	lr, r0, r5
 8013a6e:	210a      	movs	r1, #10
 8013a70:	4573      	cmp	r3, lr
 8013a72:	d113      	bne.n	8013a9c <_strtod_l+0x254>
 8013a74:	182b      	adds	r3, r5, r0
 8013a76:	2b08      	cmp	r3, #8
 8013a78:	f105 0501 	add.w	r5, r5, #1
 8013a7c:	4405      	add	r5, r0
 8013a7e:	dc1c      	bgt.n	8013aba <_strtod_l+0x272>
 8013a80:	9907      	ldr	r1, [sp, #28]
 8013a82:	230a      	movs	r3, #10
 8013a84:	fb03 2301 	mla	r3, r3, r1, r2
 8013a88:	9307      	str	r3, [sp, #28]
 8013a8a:	2300      	movs	r3, #0
 8013a8c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013a8e:	1c51      	adds	r1, r2, #1
 8013a90:	9117      	str	r1, [sp, #92]	; 0x5c
 8013a92:	7852      	ldrb	r2, [r2, #1]
 8013a94:	4618      	mov	r0, r3
 8013a96:	e7c9      	b.n	8013a2c <_strtod_l+0x1e4>
 8013a98:	4638      	mov	r0, r7
 8013a9a:	e7d2      	b.n	8013a42 <_strtod_l+0x1fa>
 8013a9c:	2b08      	cmp	r3, #8
 8013a9e:	dc04      	bgt.n	8013aaa <_strtod_l+0x262>
 8013aa0:	9e07      	ldr	r6, [sp, #28]
 8013aa2:	434e      	muls	r6, r1
 8013aa4:	9607      	str	r6, [sp, #28]
 8013aa6:	3301      	adds	r3, #1
 8013aa8:	e7e2      	b.n	8013a70 <_strtod_l+0x228>
 8013aaa:	f103 0c01 	add.w	ip, r3, #1
 8013aae:	f1bc 0f10 	cmp.w	ip, #16
 8013ab2:	bfd8      	it	le
 8013ab4:	fb01 f909 	mulle.w	r9, r1, r9
 8013ab8:	e7f5      	b.n	8013aa6 <_strtod_l+0x25e>
 8013aba:	2d10      	cmp	r5, #16
 8013abc:	bfdc      	itt	le
 8013abe:	230a      	movle	r3, #10
 8013ac0:	fb03 2909 	mlale	r9, r3, r9, r2
 8013ac4:	e7e1      	b.n	8013a8a <_strtod_l+0x242>
 8013ac6:	2300      	movs	r3, #0
 8013ac8:	9305      	str	r3, [sp, #20]
 8013aca:	2301      	movs	r3, #1
 8013acc:	e77c      	b.n	80139c8 <_strtod_l+0x180>
 8013ace:	f04f 0c00 	mov.w	ip, #0
 8013ad2:	f108 0202 	add.w	r2, r8, #2
 8013ad6:	9217      	str	r2, [sp, #92]	; 0x5c
 8013ad8:	f898 2002 	ldrb.w	r2, [r8, #2]
 8013adc:	e785      	b.n	80139ea <_strtod_l+0x1a2>
 8013ade:	f04f 0c01 	mov.w	ip, #1
 8013ae2:	e7f6      	b.n	8013ad2 <_strtod_l+0x28a>
 8013ae4:	0805dc10 	.word	0x0805dc10
 8013ae8:	0805d92c 	.word	0x0805d92c
 8013aec:	7ff00000 	.word	0x7ff00000
 8013af0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013af2:	1c51      	adds	r1, r2, #1
 8013af4:	9117      	str	r1, [sp, #92]	; 0x5c
 8013af6:	7852      	ldrb	r2, [r2, #1]
 8013af8:	2a30      	cmp	r2, #48	; 0x30
 8013afa:	d0f9      	beq.n	8013af0 <_strtod_l+0x2a8>
 8013afc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8013b00:	2908      	cmp	r1, #8
 8013b02:	f63f af79 	bhi.w	80139f8 <_strtod_l+0x1b0>
 8013b06:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8013b0a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013b0c:	9206      	str	r2, [sp, #24]
 8013b0e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013b10:	1c51      	adds	r1, r2, #1
 8013b12:	9117      	str	r1, [sp, #92]	; 0x5c
 8013b14:	7852      	ldrb	r2, [r2, #1]
 8013b16:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8013b1a:	2e09      	cmp	r6, #9
 8013b1c:	d937      	bls.n	8013b8e <_strtod_l+0x346>
 8013b1e:	9e06      	ldr	r6, [sp, #24]
 8013b20:	1b89      	subs	r1, r1, r6
 8013b22:	2908      	cmp	r1, #8
 8013b24:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8013b28:	dc02      	bgt.n	8013b30 <_strtod_l+0x2e8>
 8013b2a:	4576      	cmp	r6, lr
 8013b2c:	bfa8      	it	ge
 8013b2e:	4676      	movge	r6, lr
 8013b30:	f1bc 0f00 	cmp.w	ip, #0
 8013b34:	d000      	beq.n	8013b38 <_strtod_l+0x2f0>
 8013b36:	4276      	negs	r6, r6
 8013b38:	2d00      	cmp	r5, #0
 8013b3a:	d14d      	bne.n	8013bd8 <_strtod_l+0x390>
 8013b3c:	9904      	ldr	r1, [sp, #16]
 8013b3e:	4301      	orrs	r1, r0
 8013b40:	f47f aec6 	bne.w	80138d0 <_strtod_l+0x88>
 8013b44:	2b00      	cmp	r3, #0
 8013b46:	f47f aee1 	bne.w	801390c <_strtod_l+0xc4>
 8013b4a:	2a69      	cmp	r2, #105	; 0x69
 8013b4c:	d027      	beq.n	8013b9e <_strtod_l+0x356>
 8013b4e:	dc24      	bgt.n	8013b9a <_strtod_l+0x352>
 8013b50:	2a49      	cmp	r2, #73	; 0x49
 8013b52:	d024      	beq.n	8013b9e <_strtod_l+0x356>
 8013b54:	2a4e      	cmp	r2, #78	; 0x4e
 8013b56:	f47f aed9 	bne.w	801390c <_strtod_l+0xc4>
 8013b5a:	499f      	ldr	r1, [pc, #636]	; (8013dd8 <_strtod_l+0x590>)
 8013b5c:	a817      	add	r0, sp, #92	; 0x5c
 8013b5e:	f001 feeb 	bl	8015938 <__match>
 8013b62:	2800      	cmp	r0, #0
 8013b64:	f43f aed2 	beq.w	801390c <_strtod_l+0xc4>
 8013b68:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013b6a:	781b      	ldrb	r3, [r3, #0]
 8013b6c:	2b28      	cmp	r3, #40	; 0x28
 8013b6e:	d12d      	bne.n	8013bcc <_strtod_l+0x384>
 8013b70:	499a      	ldr	r1, [pc, #616]	; (8013ddc <_strtod_l+0x594>)
 8013b72:	aa1a      	add	r2, sp, #104	; 0x68
 8013b74:	a817      	add	r0, sp, #92	; 0x5c
 8013b76:	f001 fef3 	bl	8015960 <__hexnan>
 8013b7a:	2805      	cmp	r0, #5
 8013b7c:	d126      	bne.n	8013bcc <_strtod_l+0x384>
 8013b7e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013b80:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8013b84:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8013b88:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8013b8c:	e6a0      	b.n	80138d0 <_strtod_l+0x88>
 8013b8e:	210a      	movs	r1, #10
 8013b90:	fb01 2e0e 	mla	lr, r1, lr, r2
 8013b94:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8013b98:	e7b9      	b.n	8013b0e <_strtod_l+0x2c6>
 8013b9a:	2a6e      	cmp	r2, #110	; 0x6e
 8013b9c:	e7db      	b.n	8013b56 <_strtod_l+0x30e>
 8013b9e:	4990      	ldr	r1, [pc, #576]	; (8013de0 <_strtod_l+0x598>)
 8013ba0:	a817      	add	r0, sp, #92	; 0x5c
 8013ba2:	f001 fec9 	bl	8015938 <__match>
 8013ba6:	2800      	cmp	r0, #0
 8013ba8:	f43f aeb0 	beq.w	801390c <_strtod_l+0xc4>
 8013bac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013bae:	498d      	ldr	r1, [pc, #564]	; (8013de4 <_strtod_l+0x59c>)
 8013bb0:	3b01      	subs	r3, #1
 8013bb2:	a817      	add	r0, sp, #92	; 0x5c
 8013bb4:	9317      	str	r3, [sp, #92]	; 0x5c
 8013bb6:	f001 febf 	bl	8015938 <__match>
 8013bba:	b910      	cbnz	r0, 8013bc2 <_strtod_l+0x37a>
 8013bbc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013bbe:	3301      	adds	r3, #1
 8013bc0:	9317      	str	r3, [sp, #92]	; 0x5c
 8013bc2:	f8df b230 	ldr.w	fp, [pc, #560]	; 8013df4 <_strtod_l+0x5ac>
 8013bc6:	f04f 0a00 	mov.w	sl, #0
 8013bca:	e681      	b.n	80138d0 <_strtod_l+0x88>
 8013bcc:	4886      	ldr	r0, [pc, #536]	; (8013de8 <_strtod_l+0x5a0>)
 8013bce:	f003 fa8b 	bl	80170e8 <nan>
 8013bd2:	ec5b ab10 	vmov	sl, fp, d0
 8013bd6:	e67b      	b.n	80138d0 <_strtod_l+0x88>
 8013bd8:	9b05      	ldr	r3, [sp, #20]
 8013bda:	9807      	ldr	r0, [sp, #28]
 8013bdc:	1af3      	subs	r3, r6, r3
 8013bde:	2f00      	cmp	r7, #0
 8013be0:	bf08      	it	eq
 8013be2:	462f      	moveq	r7, r5
 8013be4:	2d10      	cmp	r5, #16
 8013be6:	9306      	str	r3, [sp, #24]
 8013be8:	46a8      	mov	r8, r5
 8013bea:	bfa8      	it	ge
 8013bec:	f04f 0810 	movge.w	r8, #16
 8013bf0:	f7ec fcb8 	bl	8000564 <__aeabi_ui2d>
 8013bf4:	2d09      	cmp	r5, #9
 8013bf6:	4682      	mov	sl, r0
 8013bf8:	468b      	mov	fp, r1
 8013bfa:	dd13      	ble.n	8013c24 <_strtod_l+0x3dc>
 8013bfc:	4b7b      	ldr	r3, [pc, #492]	; (8013dec <_strtod_l+0x5a4>)
 8013bfe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8013c02:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8013c06:	f7ec fd27 	bl	8000658 <__aeabi_dmul>
 8013c0a:	4682      	mov	sl, r0
 8013c0c:	4648      	mov	r0, r9
 8013c0e:	468b      	mov	fp, r1
 8013c10:	f7ec fca8 	bl	8000564 <__aeabi_ui2d>
 8013c14:	4602      	mov	r2, r0
 8013c16:	460b      	mov	r3, r1
 8013c18:	4650      	mov	r0, sl
 8013c1a:	4659      	mov	r1, fp
 8013c1c:	f7ec fb66 	bl	80002ec <__adddf3>
 8013c20:	4682      	mov	sl, r0
 8013c22:	468b      	mov	fp, r1
 8013c24:	2d0f      	cmp	r5, #15
 8013c26:	dc38      	bgt.n	8013c9a <_strtod_l+0x452>
 8013c28:	9b06      	ldr	r3, [sp, #24]
 8013c2a:	2b00      	cmp	r3, #0
 8013c2c:	f43f ae50 	beq.w	80138d0 <_strtod_l+0x88>
 8013c30:	dd24      	ble.n	8013c7c <_strtod_l+0x434>
 8013c32:	2b16      	cmp	r3, #22
 8013c34:	dc0b      	bgt.n	8013c4e <_strtod_l+0x406>
 8013c36:	496d      	ldr	r1, [pc, #436]	; (8013dec <_strtod_l+0x5a4>)
 8013c38:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013c3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013c40:	4652      	mov	r2, sl
 8013c42:	465b      	mov	r3, fp
 8013c44:	f7ec fd08 	bl	8000658 <__aeabi_dmul>
 8013c48:	4682      	mov	sl, r0
 8013c4a:	468b      	mov	fp, r1
 8013c4c:	e640      	b.n	80138d0 <_strtod_l+0x88>
 8013c4e:	9a06      	ldr	r2, [sp, #24]
 8013c50:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8013c54:	4293      	cmp	r3, r2
 8013c56:	db20      	blt.n	8013c9a <_strtod_l+0x452>
 8013c58:	4c64      	ldr	r4, [pc, #400]	; (8013dec <_strtod_l+0x5a4>)
 8013c5a:	f1c5 050f 	rsb	r5, r5, #15
 8013c5e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8013c62:	4652      	mov	r2, sl
 8013c64:	465b      	mov	r3, fp
 8013c66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013c6a:	f7ec fcf5 	bl	8000658 <__aeabi_dmul>
 8013c6e:	9b06      	ldr	r3, [sp, #24]
 8013c70:	1b5d      	subs	r5, r3, r5
 8013c72:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8013c76:	e9d4 2300 	ldrd	r2, r3, [r4]
 8013c7a:	e7e3      	b.n	8013c44 <_strtod_l+0x3fc>
 8013c7c:	9b06      	ldr	r3, [sp, #24]
 8013c7e:	3316      	adds	r3, #22
 8013c80:	db0b      	blt.n	8013c9a <_strtod_l+0x452>
 8013c82:	9b05      	ldr	r3, [sp, #20]
 8013c84:	1b9e      	subs	r6, r3, r6
 8013c86:	4b59      	ldr	r3, [pc, #356]	; (8013dec <_strtod_l+0x5a4>)
 8013c88:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8013c8c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8013c90:	4650      	mov	r0, sl
 8013c92:	4659      	mov	r1, fp
 8013c94:	f7ec fe0a 	bl	80008ac <__aeabi_ddiv>
 8013c98:	e7d6      	b.n	8013c48 <_strtod_l+0x400>
 8013c9a:	9b06      	ldr	r3, [sp, #24]
 8013c9c:	eba5 0808 	sub.w	r8, r5, r8
 8013ca0:	4498      	add	r8, r3
 8013ca2:	f1b8 0f00 	cmp.w	r8, #0
 8013ca6:	dd74      	ble.n	8013d92 <_strtod_l+0x54a>
 8013ca8:	f018 030f 	ands.w	r3, r8, #15
 8013cac:	d00a      	beq.n	8013cc4 <_strtod_l+0x47c>
 8013cae:	494f      	ldr	r1, [pc, #316]	; (8013dec <_strtod_l+0x5a4>)
 8013cb0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013cb4:	4652      	mov	r2, sl
 8013cb6:	465b      	mov	r3, fp
 8013cb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013cbc:	f7ec fccc 	bl	8000658 <__aeabi_dmul>
 8013cc0:	4682      	mov	sl, r0
 8013cc2:	468b      	mov	fp, r1
 8013cc4:	f038 080f 	bics.w	r8, r8, #15
 8013cc8:	d04f      	beq.n	8013d6a <_strtod_l+0x522>
 8013cca:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8013cce:	dd22      	ble.n	8013d16 <_strtod_l+0x4ce>
 8013cd0:	2500      	movs	r5, #0
 8013cd2:	462e      	mov	r6, r5
 8013cd4:	9507      	str	r5, [sp, #28]
 8013cd6:	9505      	str	r5, [sp, #20]
 8013cd8:	2322      	movs	r3, #34	; 0x22
 8013cda:	f8df b118 	ldr.w	fp, [pc, #280]	; 8013df4 <_strtod_l+0x5ac>
 8013cde:	6023      	str	r3, [r4, #0]
 8013ce0:	f04f 0a00 	mov.w	sl, #0
 8013ce4:	9b07      	ldr	r3, [sp, #28]
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	f43f adf2 	beq.w	80138d0 <_strtod_l+0x88>
 8013cec:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013cee:	4620      	mov	r0, r4
 8013cf0:	f001 ff46 	bl	8015b80 <_Bfree>
 8013cf4:	9905      	ldr	r1, [sp, #20]
 8013cf6:	4620      	mov	r0, r4
 8013cf8:	f001 ff42 	bl	8015b80 <_Bfree>
 8013cfc:	4631      	mov	r1, r6
 8013cfe:	4620      	mov	r0, r4
 8013d00:	f001 ff3e 	bl	8015b80 <_Bfree>
 8013d04:	9907      	ldr	r1, [sp, #28]
 8013d06:	4620      	mov	r0, r4
 8013d08:	f001 ff3a 	bl	8015b80 <_Bfree>
 8013d0c:	4629      	mov	r1, r5
 8013d0e:	4620      	mov	r0, r4
 8013d10:	f001 ff36 	bl	8015b80 <_Bfree>
 8013d14:	e5dc      	b.n	80138d0 <_strtod_l+0x88>
 8013d16:	4b36      	ldr	r3, [pc, #216]	; (8013df0 <_strtod_l+0x5a8>)
 8013d18:	9304      	str	r3, [sp, #16]
 8013d1a:	2300      	movs	r3, #0
 8013d1c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8013d20:	4650      	mov	r0, sl
 8013d22:	4659      	mov	r1, fp
 8013d24:	4699      	mov	r9, r3
 8013d26:	f1b8 0f01 	cmp.w	r8, #1
 8013d2a:	dc21      	bgt.n	8013d70 <_strtod_l+0x528>
 8013d2c:	b10b      	cbz	r3, 8013d32 <_strtod_l+0x4ea>
 8013d2e:	4682      	mov	sl, r0
 8013d30:	468b      	mov	fp, r1
 8013d32:	4b2f      	ldr	r3, [pc, #188]	; (8013df0 <_strtod_l+0x5a8>)
 8013d34:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8013d38:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8013d3c:	4652      	mov	r2, sl
 8013d3e:	465b      	mov	r3, fp
 8013d40:	e9d9 0100 	ldrd	r0, r1, [r9]
 8013d44:	f7ec fc88 	bl	8000658 <__aeabi_dmul>
 8013d48:	4b2a      	ldr	r3, [pc, #168]	; (8013df4 <_strtod_l+0x5ac>)
 8013d4a:	460a      	mov	r2, r1
 8013d4c:	400b      	ands	r3, r1
 8013d4e:	492a      	ldr	r1, [pc, #168]	; (8013df8 <_strtod_l+0x5b0>)
 8013d50:	428b      	cmp	r3, r1
 8013d52:	4682      	mov	sl, r0
 8013d54:	d8bc      	bhi.n	8013cd0 <_strtod_l+0x488>
 8013d56:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8013d5a:	428b      	cmp	r3, r1
 8013d5c:	bf86      	itte	hi
 8013d5e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8013dfc <_strtod_l+0x5b4>
 8013d62:	f04f 3aff 	movhi.w	sl, #4294967295
 8013d66:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8013d6a:	2300      	movs	r3, #0
 8013d6c:	9304      	str	r3, [sp, #16]
 8013d6e:	e084      	b.n	8013e7a <_strtod_l+0x632>
 8013d70:	f018 0f01 	tst.w	r8, #1
 8013d74:	d005      	beq.n	8013d82 <_strtod_l+0x53a>
 8013d76:	9b04      	ldr	r3, [sp, #16]
 8013d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d7c:	f7ec fc6c 	bl	8000658 <__aeabi_dmul>
 8013d80:	2301      	movs	r3, #1
 8013d82:	9a04      	ldr	r2, [sp, #16]
 8013d84:	3208      	adds	r2, #8
 8013d86:	f109 0901 	add.w	r9, r9, #1
 8013d8a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8013d8e:	9204      	str	r2, [sp, #16]
 8013d90:	e7c9      	b.n	8013d26 <_strtod_l+0x4de>
 8013d92:	d0ea      	beq.n	8013d6a <_strtod_l+0x522>
 8013d94:	f1c8 0800 	rsb	r8, r8, #0
 8013d98:	f018 020f 	ands.w	r2, r8, #15
 8013d9c:	d00a      	beq.n	8013db4 <_strtod_l+0x56c>
 8013d9e:	4b13      	ldr	r3, [pc, #76]	; (8013dec <_strtod_l+0x5a4>)
 8013da0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013da4:	4650      	mov	r0, sl
 8013da6:	4659      	mov	r1, fp
 8013da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013dac:	f7ec fd7e 	bl	80008ac <__aeabi_ddiv>
 8013db0:	4682      	mov	sl, r0
 8013db2:	468b      	mov	fp, r1
 8013db4:	ea5f 1828 	movs.w	r8, r8, asr #4
 8013db8:	d0d7      	beq.n	8013d6a <_strtod_l+0x522>
 8013dba:	f1b8 0f1f 	cmp.w	r8, #31
 8013dbe:	dd1f      	ble.n	8013e00 <_strtod_l+0x5b8>
 8013dc0:	2500      	movs	r5, #0
 8013dc2:	462e      	mov	r6, r5
 8013dc4:	9507      	str	r5, [sp, #28]
 8013dc6:	9505      	str	r5, [sp, #20]
 8013dc8:	2322      	movs	r3, #34	; 0x22
 8013dca:	f04f 0a00 	mov.w	sl, #0
 8013dce:	f04f 0b00 	mov.w	fp, #0
 8013dd2:	6023      	str	r3, [r4, #0]
 8013dd4:	e786      	b.n	8013ce4 <_strtod_l+0x49c>
 8013dd6:	bf00      	nop
 8013dd8:	0805d901 	.word	0x0805d901
 8013ddc:	0805d940 	.word	0x0805d940
 8013de0:	0805d8f9 	.word	0x0805d8f9
 8013de4:	0805db34 	.word	0x0805db34
 8013de8:	0805da2f 	.word	0x0805da2f
 8013dec:	0805dca8 	.word	0x0805dca8
 8013df0:	0805dc80 	.word	0x0805dc80
 8013df4:	7ff00000 	.word	0x7ff00000
 8013df8:	7ca00000 	.word	0x7ca00000
 8013dfc:	7fefffff 	.word	0x7fefffff
 8013e00:	f018 0310 	ands.w	r3, r8, #16
 8013e04:	bf18      	it	ne
 8013e06:	236a      	movne	r3, #106	; 0x6a
 8013e08:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80141b8 <_strtod_l+0x970>
 8013e0c:	9304      	str	r3, [sp, #16]
 8013e0e:	4650      	mov	r0, sl
 8013e10:	4659      	mov	r1, fp
 8013e12:	2300      	movs	r3, #0
 8013e14:	f018 0f01 	tst.w	r8, #1
 8013e18:	d004      	beq.n	8013e24 <_strtod_l+0x5dc>
 8013e1a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8013e1e:	f7ec fc1b 	bl	8000658 <__aeabi_dmul>
 8013e22:	2301      	movs	r3, #1
 8013e24:	ea5f 0868 	movs.w	r8, r8, asr #1
 8013e28:	f109 0908 	add.w	r9, r9, #8
 8013e2c:	d1f2      	bne.n	8013e14 <_strtod_l+0x5cc>
 8013e2e:	b10b      	cbz	r3, 8013e34 <_strtod_l+0x5ec>
 8013e30:	4682      	mov	sl, r0
 8013e32:	468b      	mov	fp, r1
 8013e34:	9b04      	ldr	r3, [sp, #16]
 8013e36:	b1c3      	cbz	r3, 8013e6a <_strtod_l+0x622>
 8013e38:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8013e3c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	4659      	mov	r1, fp
 8013e44:	dd11      	ble.n	8013e6a <_strtod_l+0x622>
 8013e46:	2b1f      	cmp	r3, #31
 8013e48:	f340 8124 	ble.w	8014094 <_strtod_l+0x84c>
 8013e4c:	2b34      	cmp	r3, #52	; 0x34
 8013e4e:	bfde      	ittt	le
 8013e50:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8013e54:	f04f 33ff 	movle.w	r3, #4294967295
 8013e58:	fa03 f202 	lslle.w	r2, r3, r2
 8013e5c:	f04f 0a00 	mov.w	sl, #0
 8013e60:	bfcc      	ite	gt
 8013e62:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8013e66:	ea02 0b01 	andle.w	fp, r2, r1
 8013e6a:	2200      	movs	r2, #0
 8013e6c:	2300      	movs	r3, #0
 8013e6e:	4650      	mov	r0, sl
 8013e70:	4659      	mov	r1, fp
 8013e72:	f7ec fe59 	bl	8000b28 <__aeabi_dcmpeq>
 8013e76:	2800      	cmp	r0, #0
 8013e78:	d1a2      	bne.n	8013dc0 <_strtod_l+0x578>
 8013e7a:	9b07      	ldr	r3, [sp, #28]
 8013e7c:	9300      	str	r3, [sp, #0]
 8013e7e:	9908      	ldr	r1, [sp, #32]
 8013e80:	462b      	mov	r3, r5
 8013e82:	463a      	mov	r2, r7
 8013e84:	4620      	mov	r0, r4
 8013e86:	f001 fee3 	bl	8015c50 <__s2b>
 8013e8a:	9007      	str	r0, [sp, #28]
 8013e8c:	2800      	cmp	r0, #0
 8013e8e:	f43f af1f 	beq.w	8013cd0 <_strtod_l+0x488>
 8013e92:	9b05      	ldr	r3, [sp, #20]
 8013e94:	1b9e      	subs	r6, r3, r6
 8013e96:	9b06      	ldr	r3, [sp, #24]
 8013e98:	2b00      	cmp	r3, #0
 8013e9a:	bfb4      	ite	lt
 8013e9c:	4633      	movlt	r3, r6
 8013e9e:	2300      	movge	r3, #0
 8013ea0:	930c      	str	r3, [sp, #48]	; 0x30
 8013ea2:	9b06      	ldr	r3, [sp, #24]
 8013ea4:	2500      	movs	r5, #0
 8013ea6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013eaa:	9312      	str	r3, [sp, #72]	; 0x48
 8013eac:	462e      	mov	r6, r5
 8013eae:	9b07      	ldr	r3, [sp, #28]
 8013eb0:	4620      	mov	r0, r4
 8013eb2:	6859      	ldr	r1, [r3, #4]
 8013eb4:	f001 fe24 	bl	8015b00 <_Balloc>
 8013eb8:	9005      	str	r0, [sp, #20]
 8013eba:	2800      	cmp	r0, #0
 8013ebc:	f43f af0c 	beq.w	8013cd8 <_strtod_l+0x490>
 8013ec0:	9b07      	ldr	r3, [sp, #28]
 8013ec2:	691a      	ldr	r2, [r3, #16]
 8013ec4:	3202      	adds	r2, #2
 8013ec6:	f103 010c 	add.w	r1, r3, #12
 8013eca:	0092      	lsls	r2, r2, #2
 8013ecc:	300c      	adds	r0, #12
 8013ece:	f7fe fc7d 	bl	80127cc <memcpy>
 8013ed2:	ec4b ab10 	vmov	d0, sl, fp
 8013ed6:	aa1a      	add	r2, sp, #104	; 0x68
 8013ed8:	a919      	add	r1, sp, #100	; 0x64
 8013eda:	4620      	mov	r0, r4
 8013edc:	f002 f9fe 	bl	80162dc <__d2b>
 8013ee0:	ec4b ab18 	vmov	d8, sl, fp
 8013ee4:	9018      	str	r0, [sp, #96]	; 0x60
 8013ee6:	2800      	cmp	r0, #0
 8013ee8:	f43f aef6 	beq.w	8013cd8 <_strtod_l+0x490>
 8013eec:	2101      	movs	r1, #1
 8013eee:	4620      	mov	r0, r4
 8013ef0:	f001 ff48 	bl	8015d84 <__i2b>
 8013ef4:	4606      	mov	r6, r0
 8013ef6:	2800      	cmp	r0, #0
 8013ef8:	f43f aeee 	beq.w	8013cd8 <_strtod_l+0x490>
 8013efc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013efe:	9904      	ldr	r1, [sp, #16]
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	bfab      	itete	ge
 8013f04:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8013f06:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8013f08:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8013f0a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8013f0e:	bfac      	ite	ge
 8013f10:	eb03 0902 	addge.w	r9, r3, r2
 8013f14:	1ad7      	sublt	r7, r2, r3
 8013f16:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8013f18:	eba3 0801 	sub.w	r8, r3, r1
 8013f1c:	4490      	add	r8, r2
 8013f1e:	4ba1      	ldr	r3, [pc, #644]	; (80141a4 <_strtod_l+0x95c>)
 8013f20:	f108 38ff 	add.w	r8, r8, #4294967295
 8013f24:	4598      	cmp	r8, r3
 8013f26:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8013f2a:	f280 80c7 	bge.w	80140bc <_strtod_l+0x874>
 8013f2e:	eba3 0308 	sub.w	r3, r3, r8
 8013f32:	2b1f      	cmp	r3, #31
 8013f34:	eba2 0203 	sub.w	r2, r2, r3
 8013f38:	f04f 0101 	mov.w	r1, #1
 8013f3c:	f300 80b1 	bgt.w	80140a2 <_strtod_l+0x85a>
 8013f40:	fa01 f303 	lsl.w	r3, r1, r3
 8013f44:	930d      	str	r3, [sp, #52]	; 0x34
 8013f46:	2300      	movs	r3, #0
 8013f48:	9308      	str	r3, [sp, #32]
 8013f4a:	eb09 0802 	add.w	r8, r9, r2
 8013f4e:	9b04      	ldr	r3, [sp, #16]
 8013f50:	45c1      	cmp	r9, r8
 8013f52:	4417      	add	r7, r2
 8013f54:	441f      	add	r7, r3
 8013f56:	464b      	mov	r3, r9
 8013f58:	bfa8      	it	ge
 8013f5a:	4643      	movge	r3, r8
 8013f5c:	42bb      	cmp	r3, r7
 8013f5e:	bfa8      	it	ge
 8013f60:	463b      	movge	r3, r7
 8013f62:	2b00      	cmp	r3, #0
 8013f64:	bfc2      	ittt	gt
 8013f66:	eba8 0803 	subgt.w	r8, r8, r3
 8013f6a:	1aff      	subgt	r7, r7, r3
 8013f6c:	eba9 0903 	subgt.w	r9, r9, r3
 8013f70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	dd17      	ble.n	8013fa6 <_strtod_l+0x75e>
 8013f76:	4631      	mov	r1, r6
 8013f78:	461a      	mov	r2, r3
 8013f7a:	4620      	mov	r0, r4
 8013f7c:	f001 ffc2 	bl	8015f04 <__pow5mult>
 8013f80:	4606      	mov	r6, r0
 8013f82:	2800      	cmp	r0, #0
 8013f84:	f43f aea8 	beq.w	8013cd8 <_strtod_l+0x490>
 8013f88:	4601      	mov	r1, r0
 8013f8a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013f8c:	4620      	mov	r0, r4
 8013f8e:	f001 ff0f 	bl	8015db0 <__multiply>
 8013f92:	900b      	str	r0, [sp, #44]	; 0x2c
 8013f94:	2800      	cmp	r0, #0
 8013f96:	f43f ae9f 	beq.w	8013cd8 <_strtod_l+0x490>
 8013f9a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013f9c:	4620      	mov	r0, r4
 8013f9e:	f001 fdef 	bl	8015b80 <_Bfree>
 8013fa2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013fa4:	9318      	str	r3, [sp, #96]	; 0x60
 8013fa6:	f1b8 0f00 	cmp.w	r8, #0
 8013faa:	f300 808c 	bgt.w	80140c6 <_strtod_l+0x87e>
 8013fae:	9b06      	ldr	r3, [sp, #24]
 8013fb0:	2b00      	cmp	r3, #0
 8013fb2:	dd08      	ble.n	8013fc6 <_strtod_l+0x77e>
 8013fb4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013fb6:	9905      	ldr	r1, [sp, #20]
 8013fb8:	4620      	mov	r0, r4
 8013fba:	f001 ffa3 	bl	8015f04 <__pow5mult>
 8013fbe:	9005      	str	r0, [sp, #20]
 8013fc0:	2800      	cmp	r0, #0
 8013fc2:	f43f ae89 	beq.w	8013cd8 <_strtod_l+0x490>
 8013fc6:	2f00      	cmp	r7, #0
 8013fc8:	dd08      	ble.n	8013fdc <_strtod_l+0x794>
 8013fca:	9905      	ldr	r1, [sp, #20]
 8013fcc:	463a      	mov	r2, r7
 8013fce:	4620      	mov	r0, r4
 8013fd0:	f001 fff2 	bl	8015fb8 <__lshift>
 8013fd4:	9005      	str	r0, [sp, #20]
 8013fd6:	2800      	cmp	r0, #0
 8013fd8:	f43f ae7e 	beq.w	8013cd8 <_strtod_l+0x490>
 8013fdc:	f1b9 0f00 	cmp.w	r9, #0
 8013fe0:	dd08      	ble.n	8013ff4 <_strtod_l+0x7ac>
 8013fe2:	4631      	mov	r1, r6
 8013fe4:	464a      	mov	r2, r9
 8013fe6:	4620      	mov	r0, r4
 8013fe8:	f001 ffe6 	bl	8015fb8 <__lshift>
 8013fec:	4606      	mov	r6, r0
 8013fee:	2800      	cmp	r0, #0
 8013ff0:	f43f ae72 	beq.w	8013cd8 <_strtod_l+0x490>
 8013ff4:	9a05      	ldr	r2, [sp, #20]
 8013ff6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013ff8:	4620      	mov	r0, r4
 8013ffa:	f002 f869 	bl	80160d0 <__mdiff>
 8013ffe:	4605      	mov	r5, r0
 8014000:	2800      	cmp	r0, #0
 8014002:	f43f ae69 	beq.w	8013cd8 <_strtod_l+0x490>
 8014006:	68c3      	ldr	r3, [r0, #12]
 8014008:	930b      	str	r3, [sp, #44]	; 0x2c
 801400a:	2300      	movs	r3, #0
 801400c:	60c3      	str	r3, [r0, #12]
 801400e:	4631      	mov	r1, r6
 8014010:	f002 f842 	bl	8016098 <__mcmp>
 8014014:	2800      	cmp	r0, #0
 8014016:	da60      	bge.n	80140da <_strtod_l+0x892>
 8014018:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801401a:	ea53 030a 	orrs.w	r3, r3, sl
 801401e:	f040 8082 	bne.w	8014126 <_strtod_l+0x8de>
 8014022:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014026:	2b00      	cmp	r3, #0
 8014028:	d17d      	bne.n	8014126 <_strtod_l+0x8de>
 801402a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801402e:	0d1b      	lsrs	r3, r3, #20
 8014030:	051b      	lsls	r3, r3, #20
 8014032:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8014036:	d976      	bls.n	8014126 <_strtod_l+0x8de>
 8014038:	696b      	ldr	r3, [r5, #20]
 801403a:	b913      	cbnz	r3, 8014042 <_strtod_l+0x7fa>
 801403c:	692b      	ldr	r3, [r5, #16]
 801403e:	2b01      	cmp	r3, #1
 8014040:	dd71      	ble.n	8014126 <_strtod_l+0x8de>
 8014042:	4629      	mov	r1, r5
 8014044:	2201      	movs	r2, #1
 8014046:	4620      	mov	r0, r4
 8014048:	f001 ffb6 	bl	8015fb8 <__lshift>
 801404c:	4631      	mov	r1, r6
 801404e:	4605      	mov	r5, r0
 8014050:	f002 f822 	bl	8016098 <__mcmp>
 8014054:	2800      	cmp	r0, #0
 8014056:	dd66      	ble.n	8014126 <_strtod_l+0x8de>
 8014058:	9904      	ldr	r1, [sp, #16]
 801405a:	4a53      	ldr	r2, [pc, #332]	; (80141a8 <_strtod_l+0x960>)
 801405c:	465b      	mov	r3, fp
 801405e:	2900      	cmp	r1, #0
 8014060:	f000 8081 	beq.w	8014166 <_strtod_l+0x91e>
 8014064:	ea02 010b 	and.w	r1, r2, fp
 8014068:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801406c:	dc7b      	bgt.n	8014166 <_strtod_l+0x91e>
 801406e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8014072:	f77f aea9 	ble.w	8013dc8 <_strtod_l+0x580>
 8014076:	4b4d      	ldr	r3, [pc, #308]	; (80141ac <_strtod_l+0x964>)
 8014078:	4650      	mov	r0, sl
 801407a:	4659      	mov	r1, fp
 801407c:	2200      	movs	r2, #0
 801407e:	f7ec faeb 	bl	8000658 <__aeabi_dmul>
 8014082:	460b      	mov	r3, r1
 8014084:	4303      	orrs	r3, r0
 8014086:	bf08      	it	eq
 8014088:	2322      	moveq	r3, #34	; 0x22
 801408a:	4682      	mov	sl, r0
 801408c:	468b      	mov	fp, r1
 801408e:	bf08      	it	eq
 8014090:	6023      	streq	r3, [r4, #0]
 8014092:	e62b      	b.n	8013cec <_strtod_l+0x4a4>
 8014094:	f04f 32ff 	mov.w	r2, #4294967295
 8014098:	fa02 f303 	lsl.w	r3, r2, r3
 801409c:	ea03 0a0a 	and.w	sl, r3, sl
 80140a0:	e6e3      	b.n	8013e6a <_strtod_l+0x622>
 80140a2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80140a6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80140aa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80140ae:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80140b2:	fa01 f308 	lsl.w	r3, r1, r8
 80140b6:	9308      	str	r3, [sp, #32]
 80140b8:	910d      	str	r1, [sp, #52]	; 0x34
 80140ba:	e746      	b.n	8013f4a <_strtod_l+0x702>
 80140bc:	2300      	movs	r3, #0
 80140be:	9308      	str	r3, [sp, #32]
 80140c0:	2301      	movs	r3, #1
 80140c2:	930d      	str	r3, [sp, #52]	; 0x34
 80140c4:	e741      	b.n	8013f4a <_strtod_l+0x702>
 80140c6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80140c8:	4642      	mov	r2, r8
 80140ca:	4620      	mov	r0, r4
 80140cc:	f001 ff74 	bl	8015fb8 <__lshift>
 80140d0:	9018      	str	r0, [sp, #96]	; 0x60
 80140d2:	2800      	cmp	r0, #0
 80140d4:	f47f af6b 	bne.w	8013fae <_strtod_l+0x766>
 80140d8:	e5fe      	b.n	8013cd8 <_strtod_l+0x490>
 80140da:	465f      	mov	r7, fp
 80140dc:	d16e      	bne.n	80141bc <_strtod_l+0x974>
 80140de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80140e0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80140e4:	b342      	cbz	r2, 8014138 <_strtod_l+0x8f0>
 80140e6:	4a32      	ldr	r2, [pc, #200]	; (80141b0 <_strtod_l+0x968>)
 80140e8:	4293      	cmp	r3, r2
 80140ea:	d128      	bne.n	801413e <_strtod_l+0x8f6>
 80140ec:	9b04      	ldr	r3, [sp, #16]
 80140ee:	4651      	mov	r1, sl
 80140f0:	b1eb      	cbz	r3, 801412e <_strtod_l+0x8e6>
 80140f2:	4b2d      	ldr	r3, [pc, #180]	; (80141a8 <_strtod_l+0x960>)
 80140f4:	403b      	ands	r3, r7
 80140f6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80140fa:	f04f 32ff 	mov.w	r2, #4294967295
 80140fe:	d819      	bhi.n	8014134 <_strtod_l+0x8ec>
 8014100:	0d1b      	lsrs	r3, r3, #20
 8014102:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8014106:	fa02 f303 	lsl.w	r3, r2, r3
 801410a:	4299      	cmp	r1, r3
 801410c:	d117      	bne.n	801413e <_strtod_l+0x8f6>
 801410e:	4b29      	ldr	r3, [pc, #164]	; (80141b4 <_strtod_l+0x96c>)
 8014110:	429f      	cmp	r7, r3
 8014112:	d102      	bne.n	801411a <_strtod_l+0x8d2>
 8014114:	3101      	adds	r1, #1
 8014116:	f43f addf 	beq.w	8013cd8 <_strtod_l+0x490>
 801411a:	4b23      	ldr	r3, [pc, #140]	; (80141a8 <_strtod_l+0x960>)
 801411c:	403b      	ands	r3, r7
 801411e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8014122:	f04f 0a00 	mov.w	sl, #0
 8014126:	9b04      	ldr	r3, [sp, #16]
 8014128:	2b00      	cmp	r3, #0
 801412a:	d1a4      	bne.n	8014076 <_strtod_l+0x82e>
 801412c:	e5de      	b.n	8013cec <_strtod_l+0x4a4>
 801412e:	f04f 33ff 	mov.w	r3, #4294967295
 8014132:	e7ea      	b.n	801410a <_strtod_l+0x8c2>
 8014134:	4613      	mov	r3, r2
 8014136:	e7e8      	b.n	801410a <_strtod_l+0x8c2>
 8014138:	ea53 030a 	orrs.w	r3, r3, sl
 801413c:	d08c      	beq.n	8014058 <_strtod_l+0x810>
 801413e:	9b08      	ldr	r3, [sp, #32]
 8014140:	b1db      	cbz	r3, 801417a <_strtod_l+0x932>
 8014142:	423b      	tst	r3, r7
 8014144:	d0ef      	beq.n	8014126 <_strtod_l+0x8de>
 8014146:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014148:	9a04      	ldr	r2, [sp, #16]
 801414a:	4650      	mov	r0, sl
 801414c:	4659      	mov	r1, fp
 801414e:	b1c3      	cbz	r3, 8014182 <_strtod_l+0x93a>
 8014150:	f7ff fb5b 	bl	801380a <sulp>
 8014154:	4602      	mov	r2, r0
 8014156:	460b      	mov	r3, r1
 8014158:	ec51 0b18 	vmov	r0, r1, d8
 801415c:	f7ec f8c6 	bl	80002ec <__adddf3>
 8014160:	4682      	mov	sl, r0
 8014162:	468b      	mov	fp, r1
 8014164:	e7df      	b.n	8014126 <_strtod_l+0x8de>
 8014166:	4013      	ands	r3, r2
 8014168:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801416c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8014170:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8014174:	f04f 3aff 	mov.w	sl, #4294967295
 8014178:	e7d5      	b.n	8014126 <_strtod_l+0x8de>
 801417a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801417c:	ea13 0f0a 	tst.w	r3, sl
 8014180:	e7e0      	b.n	8014144 <_strtod_l+0x8fc>
 8014182:	f7ff fb42 	bl	801380a <sulp>
 8014186:	4602      	mov	r2, r0
 8014188:	460b      	mov	r3, r1
 801418a:	ec51 0b18 	vmov	r0, r1, d8
 801418e:	f7ec f8ab 	bl	80002e8 <__aeabi_dsub>
 8014192:	2200      	movs	r2, #0
 8014194:	2300      	movs	r3, #0
 8014196:	4682      	mov	sl, r0
 8014198:	468b      	mov	fp, r1
 801419a:	f7ec fcc5 	bl	8000b28 <__aeabi_dcmpeq>
 801419e:	2800      	cmp	r0, #0
 80141a0:	d0c1      	beq.n	8014126 <_strtod_l+0x8de>
 80141a2:	e611      	b.n	8013dc8 <_strtod_l+0x580>
 80141a4:	fffffc02 	.word	0xfffffc02
 80141a8:	7ff00000 	.word	0x7ff00000
 80141ac:	39500000 	.word	0x39500000
 80141b0:	000fffff 	.word	0x000fffff
 80141b4:	7fefffff 	.word	0x7fefffff
 80141b8:	0805d958 	.word	0x0805d958
 80141bc:	4631      	mov	r1, r6
 80141be:	4628      	mov	r0, r5
 80141c0:	f002 f8e8 	bl	8016394 <__ratio>
 80141c4:	ec59 8b10 	vmov	r8, r9, d0
 80141c8:	ee10 0a10 	vmov	r0, s0
 80141cc:	2200      	movs	r2, #0
 80141ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80141d2:	4649      	mov	r1, r9
 80141d4:	f7ec fcbc 	bl	8000b50 <__aeabi_dcmple>
 80141d8:	2800      	cmp	r0, #0
 80141da:	d07a      	beq.n	80142d2 <_strtod_l+0xa8a>
 80141dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80141de:	2b00      	cmp	r3, #0
 80141e0:	d04a      	beq.n	8014278 <_strtod_l+0xa30>
 80141e2:	4b95      	ldr	r3, [pc, #596]	; (8014438 <_strtod_l+0xbf0>)
 80141e4:	2200      	movs	r2, #0
 80141e6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80141ea:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8014438 <_strtod_l+0xbf0>
 80141ee:	f04f 0800 	mov.w	r8, #0
 80141f2:	4b92      	ldr	r3, [pc, #584]	; (801443c <_strtod_l+0xbf4>)
 80141f4:	403b      	ands	r3, r7
 80141f6:	930d      	str	r3, [sp, #52]	; 0x34
 80141f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80141fa:	4b91      	ldr	r3, [pc, #580]	; (8014440 <_strtod_l+0xbf8>)
 80141fc:	429a      	cmp	r2, r3
 80141fe:	f040 80b0 	bne.w	8014362 <_strtod_l+0xb1a>
 8014202:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014206:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801420a:	ec4b ab10 	vmov	d0, sl, fp
 801420e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014212:	f001 ffe7 	bl	80161e4 <__ulp>
 8014216:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801421a:	ec53 2b10 	vmov	r2, r3, d0
 801421e:	f7ec fa1b 	bl	8000658 <__aeabi_dmul>
 8014222:	4652      	mov	r2, sl
 8014224:	465b      	mov	r3, fp
 8014226:	f7ec f861 	bl	80002ec <__adddf3>
 801422a:	460b      	mov	r3, r1
 801422c:	4983      	ldr	r1, [pc, #524]	; (801443c <_strtod_l+0xbf4>)
 801422e:	4a85      	ldr	r2, [pc, #532]	; (8014444 <_strtod_l+0xbfc>)
 8014230:	4019      	ands	r1, r3
 8014232:	4291      	cmp	r1, r2
 8014234:	4682      	mov	sl, r0
 8014236:	d960      	bls.n	80142fa <_strtod_l+0xab2>
 8014238:	ee18 3a90 	vmov	r3, s17
 801423c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8014240:	4293      	cmp	r3, r2
 8014242:	d104      	bne.n	801424e <_strtod_l+0xa06>
 8014244:	ee18 3a10 	vmov	r3, s16
 8014248:	3301      	adds	r3, #1
 801424a:	f43f ad45 	beq.w	8013cd8 <_strtod_l+0x490>
 801424e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8014450 <_strtod_l+0xc08>
 8014252:	f04f 3aff 	mov.w	sl, #4294967295
 8014256:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014258:	4620      	mov	r0, r4
 801425a:	f001 fc91 	bl	8015b80 <_Bfree>
 801425e:	9905      	ldr	r1, [sp, #20]
 8014260:	4620      	mov	r0, r4
 8014262:	f001 fc8d 	bl	8015b80 <_Bfree>
 8014266:	4631      	mov	r1, r6
 8014268:	4620      	mov	r0, r4
 801426a:	f001 fc89 	bl	8015b80 <_Bfree>
 801426e:	4629      	mov	r1, r5
 8014270:	4620      	mov	r0, r4
 8014272:	f001 fc85 	bl	8015b80 <_Bfree>
 8014276:	e61a      	b.n	8013eae <_strtod_l+0x666>
 8014278:	f1ba 0f00 	cmp.w	sl, #0
 801427c:	d11b      	bne.n	80142b6 <_strtod_l+0xa6e>
 801427e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014282:	b9f3      	cbnz	r3, 80142c2 <_strtod_l+0xa7a>
 8014284:	4b6c      	ldr	r3, [pc, #432]	; (8014438 <_strtod_l+0xbf0>)
 8014286:	2200      	movs	r2, #0
 8014288:	4640      	mov	r0, r8
 801428a:	4649      	mov	r1, r9
 801428c:	f7ec fc56 	bl	8000b3c <__aeabi_dcmplt>
 8014290:	b9d0      	cbnz	r0, 80142c8 <_strtod_l+0xa80>
 8014292:	4640      	mov	r0, r8
 8014294:	4649      	mov	r1, r9
 8014296:	4b6c      	ldr	r3, [pc, #432]	; (8014448 <_strtod_l+0xc00>)
 8014298:	2200      	movs	r2, #0
 801429a:	f7ec f9dd 	bl	8000658 <__aeabi_dmul>
 801429e:	4680      	mov	r8, r0
 80142a0:	4689      	mov	r9, r1
 80142a2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80142a6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80142aa:	9315      	str	r3, [sp, #84]	; 0x54
 80142ac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80142b0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80142b4:	e79d      	b.n	80141f2 <_strtod_l+0x9aa>
 80142b6:	f1ba 0f01 	cmp.w	sl, #1
 80142ba:	d102      	bne.n	80142c2 <_strtod_l+0xa7a>
 80142bc:	2f00      	cmp	r7, #0
 80142be:	f43f ad83 	beq.w	8013dc8 <_strtod_l+0x580>
 80142c2:	4b62      	ldr	r3, [pc, #392]	; (801444c <_strtod_l+0xc04>)
 80142c4:	2200      	movs	r2, #0
 80142c6:	e78e      	b.n	80141e6 <_strtod_l+0x99e>
 80142c8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8014448 <_strtod_l+0xc00>
 80142cc:	f04f 0800 	mov.w	r8, #0
 80142d0:	e7e7      	b.n	80142a2 <_strtod_l+0xa5a>
 80142d2:	4b5d      	ldr	r3, [pc, #372]	; (8014448 <_strtod_l+0xc00>)
 80142d4:	4640      	mov	r0, r8
 80142d6:	4649      	mov	r1, r9
 80142d8:	2200      	movs	r2, #0
 80142da:	f7ec f9bd 	bl	8000658 <__aeabi_dmul>
 80142de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80142e0:	4680      	mov	r8, r0
 80142e2:	4689      	mov	r9, r1
 80142e4:	b933      	cbnz	r3, 80142f4 <_strtod_l+0xaac>
 80142e6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80142ea:	900e      	str	r0, [sp, #56]	; 0x38
 80142ec:	930f      	str	r3, [sp, #60]	; 0x3c
 80142ee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80142f2:	e7dd      	b.n	80142b0 <_strtod_l+0xa68>
 80142f4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80142f8:	e7f9      	b.n	80142ee <_strtod_l+0xaa6>
 80142fa:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80142fe:	9b04      	ldr	r3, [sp, #16]
 8014300:	2b00      	cmp	r3, #0
 8014302:	d1a8      	bne.n	8014256 <_strtod_l+0xa0e>
 8014304:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014308:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801430a:	0d1b      	lsrs	r3, r3, #20
 801430c:	051b      	lsls	r3, r3, #20
 801430e:	429a      	cmp	r2, r3
 8014310:	d1a1      	bne.n	8014256 <_strtod_l+0xa0e>
 8014312:	4640      	mov	r0, r8
 8014314:	4649      	mov	r1, r9
 8014316:	f7ec fcff 	bl	8000d18 <__aeabi_d2lz>
 801431a:	f7ec f96f 	bl	80005fc <__aeabi_l2d>
 801431e:	4602      	mov	r2, r0
 8014320:	460b      	mov	r3, r1
 8014322:	4640      	mov	r0, r8
 8014324:	4649      	mov	r1, r9
 8014326:	f7eb ffdf 	bl	80002e8 <__aeabi_dsub>
 801432a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801432c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014330:	ea43 030a 	orr.w	r3, r3, sl
 8014334:	4313      	orrs	r3, r2
 8014336:	4680      	mov	r8, r0
 8014338:	4689      	mov	r9, r1
 801433a:	d055      	beq.n	80143e8 <_strtod_l+0xba0>
 801433c:	a336      	add	r3, pc, #216	; (adr r3, 8014418 <_strtod_l+0xbd0>)
 801433e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014342:	f7ec fbfb 	bl	8000b3c <__aeabi_dcmplt>
 8014346:	2800      	cmp	r0, #0
 8014348:	f47f acd0 	bne.w	8013cec <_strtod_l+0x4a4>
 801434c:	a334      	add	r3, pc, #208	; (adr r3, 8014420 <_strtod_l+0xbd8>)
 801434e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014352:	4640      	mov	r0, r8
 8014354:	4649      	mov	r1, r9
 8014356:	f7ec fc0f 	bl	8000b78 <__aeabi_dcmpgt>
 801435a:	2800      	cmp	r0, #0
 801435c:	f43f af7b 	beq.w	8014256 <_strtod_l+0xa0e>
 8014360:	e4c4      	b.n	8013cec <_strtod_l+0x4a4>
 8014362:	9b04      	ldr	r3, [sp, #16]
 8014364:	b333      	cbz	r3, 80143b4 <_strtod_l+0xb6c>
 8014366:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014368:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801436c:	d822      	bhi.n	80143b4 <_strtod_l+0xb6c>
 801436e:	a32e      	add	r3, pc, #184	; (adr r3, 8014428 <_strtod_l+0xbe0>)
 8014370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014374:	4640      	mov	r0, r8
 8014376:	4649      	mov	r1, r9
 8014378:	f7ec fbea 	bl	8000b50 <__aeabi_dcmple>
 801437c:	b1a0      	cbz	r0, 80143a8 <_strtod_l+0xb60>
 801437e:	4649      	mov	r1, r9
 8014380:	4640      	mov	r0, r8
 8014382:	f7ec fc41 	bl	8000c08 <__aeabi_d2uiz>
 8014386:	2801      	cmp	r0, #1
 8014388:	bf38      	it	cc
 801438a:	2001      	movcc	r0, #1
 801438c:	f7ec f8ea 	bl	8000564 <__aeabi_ui2d>
 8014390:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014392:	4680      	mov	r8, r0
 8014394:	4689      	mov	r9, r1
 8014396:	bb23      	cbnz	r3, 80143e2 <_strtod_l+0xb9a>
 8014398:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801439c:	9010      	str	r0, [sp, #64]	; 0x40
 801439e:	9311      	str	r3, [sp, #68]	; 0x44
 80143a0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80143a4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80143a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80143aa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80143ac:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80143b0:	1a9b      	subs	r3, r3, r2
 80143b2:	9309      	str	r3, [sp, #36]	; 0x24
 80143b4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80143b8:	eeb0 0a48 	vmov.f32	s0, s16
 80143bc:	eef0 0a68 	vmov.f32	s1, s17
 80143c0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80143c4:	f001 ff0e 	bl	80161e4 <__ulp>
 80143c8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80143cc:	ec53 2b10 	vmov	r2, r3, d0
 80143d0:	f7ec f942 	bl	8000658 <__aeabi_dmul>
 80143d4:	ec53 2b18 	vmov	r2, r3, d8
 80143d8:	f7eb ff88 	bl	80002ec <__adddf3>
 80143dc:	4682      	mov	sl, r0
 80143de:	468b      	mov	fp, r1
 80143e0:	e78d      	b.n	80142fe <_strtod_l+0xab6>
 80143e2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80143e6:	e7db      	b.n	80143a0 <_strtod_l+0xb58>
 80143e8:	a311      	add	r3, pc, #68	; (adr r3, 8014430 <_strtod_l+0xbe8>)
 80143ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143ee:	f7ec fba5 	bl	8000b3c <__aeabi_dcmplt>
 80143f2:	e7b2      	b.n	801435a <_strtod_l+0xb12>
 80143f4:	2300      	movs	r3, #0
 80143f6:	930a      	str	r3, [sp, #40]	; 0x28
 80143f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80143fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80143fc:	6013      	str	r3, [r2, #0]
 80143fe:	f7ff ba6b 	b.w	80138d8 <_strtod_l+0x90>
 8014402:	2a65      	cmp	r2, #101	; 0x65
 8014404:	f43f ab5f 	beq.w	8013ac6 <_strtod_l+0x27e>
 8014408:	2a45      	cmp	r2, #69	; 0x45
 801440a:	f43f ab5c 	beq.w	8013ac6 <_strtod_l+0x27e>
 801440e:	2301      	movs	r3, #1
 8014410:	f7ff bb94 	b.w	8013b3c <_strtod_l+0x2f4>
 8014414:	f3af 8000 	nop.w
 8014418:	94a03595 	.word	0x94a03595
 801441c:	3fdfffff 	.word	0x3fdfffff
 8014420:	35afe535 	.word	0x35afe535
 8014424:	3fe00000 	.word	0x3fe00000
 8014428:	ffc00000 	.word	0xffc00000
 801442c:	41dfffff 	.word	0x41dfffff
 8014430:	94a03595 	.word	0x94a03595
 8014434:	3fcfffff 	.word	0x3fcfffff
 8014438:	3ff00000 	.word	0x3ff00000
 801443c:	7ff00000 	.word	0x7ff00000
 8014440:	7fe00000 	.word	0x7fe00000
 8014444:	7c9fffff 	.word	0x7c9fffff
 8014448:	3fe00000 	.word	0x3fe00000
 801444c:	bff00000 	.word	0xbff00000
 8014450:	7fefffff 	.word	0x7fefffff

08014454 <_strtod_r>:
 8014454:	4b01      	ldr	r3, [pc, #4]	; (801445c <_strtod_r+0x8>)
 8014456:	f7ff b9f7 	b.w	8013848 <_strtod_l>
 801445a:	bf00      	nop
 801445c:	200014c4 	.word	0x200014c4

08014460 <strtok>:
 8014460:	4b16      	ldr	r3, [pc, #88]	; (80144bc <strtok+0x5c>)
 8014462:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014464:	681e      	ldr	r6, [r3, #0]
 8014466:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8014468:	4605      	mov	r5, r0
 801446a:	b9fc      	cbnz	r4, 80144ac <strtok+0x4c>
 801446c:	2050      	movs	r0, #80	; 0x50
 801446e:	9101      	str	r1, [sp, #4]
 8014470:	f7fe f9a4 	bl	80127bc <malloc>
 8014474:	9901      	ldr	r1, [sp, #4]
 8014476:	65b0      	str	r0, [r6, #88]	; 0x58
 8014478:	4602      	mov	r2, r0
 801447a:	b920      	cbnz	r0, 8014486 <strtok+0x26>
 801447c:	4b10      	ldr	r3, [pc, #64]	; (80144c0 <strtok+0x60>)
 801447e:	4811      	ldr	r0, [pc, #68]	; (80144c4 <strtok+0x64>)
 8014480:	2157      	movs	r1, #87	; 0x57
 8014482:	f000 f8df 	bl	8014644 <__assert_func>
 8014486:	e9c0 4400 	strd	r4, r4, [r0]
 801448a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801448e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8014492:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8014496:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 801449a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 801449e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80144a2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80144a6:	6184      	str	r4, [r0, #24]
 80144a8:	7704      	strb	r4, [r0, #28]
 80144aa:	6244      	str	r4, [r0, #36]	; 0x24
 80144ac:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80144ae:	2301      	movs	r3, #1
 80144b0:	4628      	mov	r0, r5
 80144b2:	b002      	add	sp, #8
 80144b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80144b8:	f000 b806 	b.w	80144c8 <__strtok_r>
 80144bc:	2000145c 	.word	0x2000145c
 80144c0:	0805d980 	.word	0x0805d980
 80144c4:	0805d997 	.word	0x0805d997

080144c8 <__strtok_r>:
 80144c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80144ca:	b908      	cbnz	r0, 80144d0 <__strtok_r+0x8>
 80144cc:	6810      	ldr	r0, [r2, #0]
 80144ce:	b188      	cbz	r0, 80144f4 <__strtok_r+0x2c>
 80144d0:	4604      	mov	r4, r0
 80144d2:	4620      	mov	r0, r4
 80144d4:	f814 5b01 	ldrb.w	r5, [r4], #1
 80144d8:	460f      	mov	r7, r1
 80144da:	f817 6b01 	ldrb.w	r6, [r7], #1
 80144de:	b91e      	cbnz	r6, 80144e8 <__strtok_r+0x20>
 80144e0:	b965      	cbnz	r5, 80144fc <__strtok_r+0x34>
 80144e2:	6015      	str	r5, [r2, #0]
 80144e4:	4628      	mov	r0, r5
 80144e6:	e005      	b.n	80144f4 <__strtok_r+0x2c>
 80144e8:	42b5      	cmp	r5, r6
 80144ea:	d1f6      	bne.n	80144da <__strtok_r+0x12>
 80144ec:	2b00      	cmp	r3, #0
 80144ee:	d1f0      	bne.n	80144d2 <__strtok_r+0xa>
 80144f0:	6014      	str	r4, [r2, #0]
 80144f2:	7003      	strb	r3, [r0, #0]
 80144f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80144f6:	461c      	mov	r4, r3
 80144f8:	e00c      	b.n	8014514 <__strtok_r+0x4c>
 80144fa:	b915      	cbnz	r5, 8014502 <__strtok_r+0x3a>
 80144fc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8014500:	460e      	mov	r6, r1
 8014502:	f816 5b01 	ldrb.w	r5, [r6], #1
 8014506:	42ab      	cmp	r3, r5
 8014508:	d1f7      	bne.n	80144fa <__strtok_r+0x32>
 801450a:	2b00      	cmp	r3, #0
 801450c:	d0f3      	beq.n	80144f6 <__strtok_r+0x2e>
 801450e:	2300      	movs	r3, #0
 8014510:	f804 3c01 	strb.w	r3, [r4, #-1]
 8014514:	6014      	str	r4, [r2, #0]
 8014516:	e7ed      	b.n	80144f4 <__strtok_r+0x2c>

08014518 <_strtol_l.constprop.0>:
 8014518:	2b01      	cmp	r3, #1
 801451a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801451e:	d001      	beq.n	8014524 <_strtol_l.constprop.0+0xc>
 8014520:	2b24      	cmp	r3, #36	; 0x24
 8014522:	d906      	bls.n	8014532 <_strtol_l.constprop.0+0x1a>
 8014524:	f7fe f920 	bl	8012768 <__errno>
 8014528:	2316      	movs	r3, #22
 801452a:	6003      	str	r3, [r0, #0]
 801452c:	2000      	movs	r0, #0
 801452e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014532:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8014618 <_strtol_l.constprop.0+0x100>
 8014536:	460d      	mov	r5, r1
 8014538:	462e      	mov	r6, r5
 801453a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801453e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8014542:	f017 0708 	ands.w	r7, r7, #8
 8014546:	d1f7      	bne.n	8014538 <_strtol_l.constprop.0+0x20>
 8014548:	2c2d      	cmp	r4, #45	; 0x2d
 801454a:	d132      	bne.n	80145b2 <_strtol_l.constprop.0+0x9a>
 801454c:	782c      	ldrb	r4, [r5, #0]
 801454e:	2701      	movs	r7, #1
 8014550:	1cb5      	adds	r5, r6, #2
 8014552:	2b00      	cmp	r3, #0
 8014554:	d05b      	beq.n	801460e <_strtol_l.constprop.0+0xf6>
 8014556:	2b10      	cmp	r3, #16
 8014558:	d109      	bne.n	801456e <_strtol_l.constprop.0+0x56>
 801455a:	2c30      	cmp	r4, #48	; 0x30
 801455c:	d107      	bne.n	801456e <_strtol_l.constprop.0+0x56>
 801455e:	782c      	ldrb	r4, [r5, #0]
 8014560:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8014564:	2c58      	cmp	r4, #88	; 0x58
 8014566:	d14d      	bne.n	8014604 <_strtol_l.constprop.0+0xec>
 8014568:	786c      	ldrb	r4, [r5, #1]
 801456a:	2310      	movs	r3, #16
 801456c:	3502      	adds	r5, #2
 801456e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8014572:	f108 38ff 	add.w	r8, r8, #4294967295
 8014576:	f04f 0c00 	mov.w	ip, #0
 801457a:	fbb8 f9f3 	udiv	r9, r8, r3
 801457e:	4666      	mov	r6, ip
 8014580:	fb03 8a19 	mls	sl, r3, r9, r8
 8014584:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8014588:	f1be 0f09 	cmp.w	lr, #9
 801458c:	d816      	bhi.n	80145bc <_strtol_l.constprop.0+0xa4>
 801458e:	4674      	mov	r4, lr
 8014590:	42a3      	cmp	r3, r4
 8014592:	dd24      	ble.n	80145de <_strtol_l.constprop.0+0xc6>
 8014594:	f1bc 0f00 	cmp.w	ip, #0
 8014598:	db1e      	blt.n	80145d8 <_strtol_l.constprop.0+0xc0>
 801459a:	45b1      	cmp	r9, r6
 801459c:	d31c      	bcc.n	80145d8 <_strtol_l.constprop.0+0xc0>
 801459e:	d101      	bne.n	80145a4 <_strtol_l.constprop.0+0x8c>
 80145a0:	45a2      	cmp	sl, r4
 80145a2:	db19      	blt.n	80145d8 <_strtol_l.constprop.0+0xc0>
 80145a4:	fb06 4603 	mla	r6, r6, r3, r4
 80145a8:	f04f 0c01 	mov.w	ip, #1
 80145ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 80145b0:	e7e8      	b.n	8014584 <_strtol_l.constprop.0+0x6c>
 80145b2:	2c2b      	cmp	r4, #43	; 0x2b
 80145b4:	bf04      	itt	eq
 80145b6:	782c      	ldrbeq	r4, [r5, #0]
 80145b8:	1cb5      	addeq	r5, r6, #2
 80145ba:	e7ca      	b.n	8014552 <_strtol_l.constprop.0+0x3a>
 80145bc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80145c0:	f1be 0f19 	cmp.w	lr, #25
 80145c4:	d801      	bhi.n	80145ca <_strtol_l.constprop.0+0xb2>
 80145c6:	3c37      	subs	r4, #55	; 0x37
 80145c8:	e7e2      	b.n	8014590 <_strtol_l.constprop.0+0x78>
 80145ca:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80145ce:	f1be 0f19 	cmp.w	lr, #25
 80145d2:	d804      	bhi.n	80145de <_strtol_l.constprop.0+0xc6>
 80145d4:	3c57      	subs	r4, #87	; 0x57
 80145d6:	e7db      	b.n	8014590 <_strtol_l.constprop.0+0x78>
 80145d8:	f04f 3cff 	mov.w	ip, #4294967295
 80145dc:	e7e6      	b.n	80145ac <_strtol_l.constprop.0+0x94>
 80145de:	f1bc 0f00 	cmp.w	ip, #0
 80145e2:	da05      	bge.n	80145f0 <_strtol_l.constprop.0+0xd8>
 80145e4:	2322      	movs	r3, #34	; 0x22
 80145e6:	6003      	str	r3, [r0, #0]
 80145e8:	4646      	mov	r6, r8
 80145ea:	b942      	cbnz	r2, 80145fe <_strtol_l.constprop.0+0xe6>
 80145ec:	4630      	mov	r0, r6
 80145ee:	e79e      	b.n	801452e <_strtol_l.constprop.0+0x16>
 80145f0:	b107      	cbz	r7, 80145f4 <_strtol_l.constprop.0+0xdc>
 80145f2:	4276      	negs	r6, r6
 80145f4:	2a00      	cmp	r2, #0
 80145f6:	d0f9      	beq.n	80145ec <_strtol_l.constprop.0+0xd4>
 80145f8:	f1bc 0f00 	cmp.w	ip, #0
 80145fc:	d000      	beq.n	8014600 <_strtol_l.constprop.0+0xe8>
 80145fe:	1e69      	subs	r1, r5, #1
 8014600:	6011      	str	r1, [r2, #0]
 8014602:	e7f3      	b.n	80145ec <_strtol_l.constprop.0+0xd4>
 8014604:	2430      	movs	r4, #48	; 0x30
 8014606:	2b00      	cmp	r3, #0
 8014608:	d1b1      	bne.n	801456e <_strtol_l.constprop.0+0x56>
 801460a:	2308      	movs	r3, #8
 801460c:	e7af      	b.n	801456e <_strtol_l.constprop.0+0x56>
 801460e:	2c30      	cmp	r4, #48	; 0x30
 8014610:	d0a5      	beq.n	801455e <_strtol_l.constprop.0+0x46>
 8014612:	230a      	movs	r3, #10
 8014614:	e7ab      	b.n	801456e <_strtol_l.constprop.0+0x56>
 8014616:	bf00      	nop
 8014618:	0805da31 	.word	0x0805da31

0801461c <_strtol_r>:
 801461c:	f7ff bf7c 	b.w	8014518 <_strtol_l.constprop.0>

08014620 <_write_r>:
 8014620:	b538      	push	{r3, r4, r5, lr}
 8014622:	4d07      	ldr	r5, [pc, #28]	; (8014640 <_write_r+0x20>)
 8014624:	4604      	mov	r4, r0
 8014626:	4608      	mov	r0, r1
 8014628:	4611      	mov	r1, r2
 801462a:	2200      	movs	r2, #0
 801462c:	602a      	str	r2, [r5, #0]
 801462e:	461a      	mov	r2, r3
 8014630:	f004 f958 	bl	80188e4 <_write>
 8014634:	1c43      	adds	r3, r0, #1
 8014636:	d102      	bne.n	801463e <_write_r+0x1e>
 8014638:	682b      	ldr	r3, [r5, #0]
 801463a:	b103      	cbz	r3, 801463e <_write_r+0x1e>
 801463c:	6023      	str	r3, [r4, #0]
 801463e:	bd38      	pop	{r3, r4, r5, pc}
 8014640:	2000c670 	.word	0x2000c670

08014644 <__assert_func>:
 8014644:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014646:	4614      	mov	r4, r2
 8014648:	461a      	mov	r2, r3
 801464a:	4b09      	ldr	r3, [pc, #36]	; (8014670 <__assert_func+0x2c>)
 801464c:	681b      	ldr	r3, [r3, #0]
 801464e:	4605      	mov	r5, r0
 8014650:	68d8      	ldr	r0, [r3, #12]
 8014652:	b14c      	cbz	r4, 8014668 <__assert_func+0x24>
 8014654:	4b07      	ldr	r3, [pc, #28]	; (8014674 <__assert_func+0x30>)
 8014656:	9100      	str	r1, [sp, #0]
 8014658:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801465c:	4906      	ldr	r1, [pc, #24]	; (8014678 <__assert_func+0x34>)
 801465e:	462b      	mov	r3, r5
 8014660:	f000 fe98 	bl	8015394 <fiprintf>
 8014664:	f002 ff10 	bl	8017488 <abort>
 8014668:	4b04      	ldr	r3, [pc, #16]	; (801467c <__assert_func+0x38>)
 801466a:	461c      	mov	r4, r3
 801466c:	e7f3      	b.n	8014656 <__assert_func+0x12>
 801466e:	bf00      	nop
 8014670:	2000145c 	.word	0x2000145c
 8014674:	0805d9f4 	.word	0x0805d9f4
 8014678:	0805da01 	.word	0x0805da01
 801467c:	0805da2f 	.word	0x0805da2f

08014680 <_close_r>:
 8014680:	b538      	push	{r3, r4, r5, lr}
 8014682:	4d06      	ldr	r5, [pc, #24]	; (801469c <_close_r+0x1c>)
 8014684:	2300      	movs	r3, #0
 8014686:	4604      	mov	r4, r0
 8014688:	4608      	mov	r0, r1
 801468a:	602b      	str	r3, [r5, #0]
 801468c:	f004 f8f2 	bl	8018874 <_close>
 8014690:	1c43      	adds	r3, r0, #1
 8014692:	d102      	bne.n	801469a <_close_r+0x1a>
 8014694:	682b      	ldr	r3, [r5, #0]
 8014696:	b103      	cbz	r3, 801469a <_close_r+0x1a>
 8014698:	6023      	str	r3, [r4, #0]
 801469a:	bd38      	pop	{r3, r4, r5, pc}
 801469c:	2000c670 	.word	0x2000c670

080146a0 <quorem>:
 80146a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146a4:	6903      	ldr	r3, [r0, #16]
 80146a6:	690c      	ldr	r4, [r1, #16]
 80146a8:	42a3      	cmp	r3, r4
 80146aa:	4607      	mov	r7, r0
 80146ac:	f2c0 8081 	blt.w	80147b2 <quorem+0x112>
 80146b0:	3c01      	subs	r4, #1
 80146b2:	f101 0814 	add.w	r8, r1, #20
 80146b6:	f100 0514 	add.w	r5, r0, #20
 80146ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80146be:	9301      	str	r3, [sp, #4]
 80146c0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80146c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80146c8:	3301      	adds	r3, #1
 80146ca:	429a      	cmp	r2, r3
 80146cc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80146d0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80146d4:	fbb2 f6f3 	udiv	r6, r2, r3
 80146d8:	d331      	bcc.n	801473e <quorem+0x9e>
 80146da:	f04f 0e00 	mov.w	lr, #0
 80146de:	4640      	mov	r0, r8
 80146e0:	46ac      	mov	ip, r5
 80146e2:	46f2      	mov	sl, lr
 80146e4:	f850 2b04 	ldr.w	r2, [r0], #4
 80146e8:	b293      	uxth	r3, r2
 80146ea:	fb06 e303 	mla	r3, r6, r3, lr
 80146ee:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80146f2:	b29b      	uxth	r3, r3
 80146f4:	ebaa 0303 	sub.w	r3, sl, r3
 80146f8:	f8dc a000 	ldr.w	sl, [ip]
 80146fc:	0c12      	lsrs	r2, r2, #16
 80146fe:	fa13 f38a 	uxtah	r3, r3, sl
 8014702:	fb06 e202 	mla	r2, r6, r2, lr
 8014706:	9300      	str	r3, [sp, #0]
 8014708:	9b00      	ldr	r3, [sp, #0]
 801470a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801470e:	b292      	uxth	r2, r2
 8014710:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8014714:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014718:	f8bd 3000 	ldrh.w	r3, [sp]
 801471c:	4581      	cmp	r9, r0
 801471e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014722:	f84c 3b04 	str.w	r3, [ip], #4
 8014726:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801472a:	d2db      	bcs.n	80146e4 <quorem+0x44>
 801472c:	f855 300b 	ldr.w	r3, [r5, fp]
 8014730:	b92b      	cbnz	r3, 801473e <quorem+0x9e>
 8014732:	9b01      	ldr	r3, [sp, #4]
 8014734:	3b04      	subs	r3, #4
 8014736:	429d      	cmp	r5, r3
 8014738:	461a      	mov	r2, r3
 801473a:	d32e      	bcc.n	801479a <quorem+0xfa>
 801473c:	613c      	str	r4, [r7, #16]
 801473e:	4638      	mov	r0, r7
 8014740:	f001 fcaa 	bl	8016098 <__mcmp>
 8014744:	2800      	cmp	r0, #0
 8014746:	db24      	blt.n	8014792 <quorem+0xf2>
 8014748:	3601      	adds	r6, #1
 801474a:	4628      	mov	r0, r5
 801474c:	f04f 0c00 	mov.w	ip, #0
 8014750:	f858 2b04 	ldr.w	r2, [r8], #4
 8014754:	f8d0 e000 	ldr.w	lr, [r0]
 8014758:	b293      	uxth	r3, r2
 801475a:	ebac 0303 	sub.w	r3, ip, r3
 801475e:	0c12      	lsrs	r2, r2, #16
 8014760:	fa13 f38e 	uxtah	r3, r3, lr
 8014764:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8014768:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801476c:	b29b      	uxth	r3, r3
 801476e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014772:	45c1      	cmp	r9, r8
 8014774:	f840 3b04 	str.w	r3, [r0], #4
 8014778:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801477c:	d2e8      	bcs.n	8014750 <quorem+0xb0>
 801477e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014782:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014786:	b922      	cbnz	r2, 8014792 <quorem+0xf2>
 8014788:	3b04      	subs	r3, #4
 801478a:	429d      	cmp	r5, r3
 801478c:	461a      	mov	r2, r3
 801478e:	d30a      	bcc.n	80147a6 <quorem+0x106>
 8014790:	613c      	str	r4, [r7, #16]
 8014792:	4630      	mov	r0, r6
 8014794:	b003      	add	sp, #12
 8014796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801479a:	6812      	ldr	r2, [r2, #0]
 801479c:	3b04      	subs	r3, #4
 801479e:	2a00      	cmp	r2, #0
 80147a0:	d1cc      	bne.n	801473c <quorem+0x9c>
 80147a2:	3c01      	subs	r4, #1
 80147a4:	e7c7      	b.n	8014736 <quorem+0x96>
 80147a6:	6812      	ldr	r2, [r2, #0]
 80147a8:	3b04      	subs	r3, #4
 80147aa:	2a00      	cmp	r2, #0
 80147ac:	d1f0      	bne.n	8014790 <quorem+0xf0>
 80147ae:	3c01      	subs	r4, #1
 80147b0:	e7eb      	b.n	801478a <quorem+0xea>
 80147b2:	2000      	movs	r0, #0
 80147b4:	e7ee      	b.n	8014794 <quorem+0xf4>
	...

080147b8 <_dtoa_r>:
 80147b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147bc:	ed2d 8b04 	vpush	{d8-d9}
 80147c0:	ec57 6b10 	vmov	r6, r7, d0
 80147c4:	b093      	sub	sp, #76	; 0x4c
 80147c6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80147c8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80147cc:	9106      	str	r1, [sp, #24]
 80147ce:	ee10 aa10 	vmov	sl, s0
 80147d2:	4604      	mov	r4, r0
 80147d4:	9209      	str	r2, [sp, #36]	; 0x24
 80147d6:	930c      	str	r3, [sp, #48]	; 0x30
 80147d8:	46bb      	mov	fp, r7
 80147da:	b975      	cbnz	r5, 80147fa <_dtoa_r+0x42>
 80147dc:	2010      	movs	r0, #16
 80147de:	f7fd ffed 	bl	80127bc <malloc>
 80147e2:	4602      	mov	r2, r0
 80147e4:	6260      	str	r0, [r4, #36]	; 0x24
 80147e6:	b920      	cbnz	r0, 80147f2 <_dtoa_r+0x3a>
 80147e8:	4ba7      	ldr	r3, [pc, #668]	; (8014a88 <_dtoa_r+0x2d0>)
 80147ea:	21ea      	movs	r1, #234	; 0xea
 80147ec:	48a7      	ldr	r0, [pc, #668]	; (8014a8c <_dtoa_r+0x2d4>)
 80147ee:	f7ff ff29 	bl	8014644 <__assert_func>
 80147f2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80147f6:	6005      	str	r5, [r0, #0]
 80147f8:	60c5      	str	r5, [r0, #12]
 80147fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80147fc:	6819      	ldr	r1, [r3, #0]
 80147fe:	b151      	cbz	r1, 8014816 <_dtoa_r+0x5e>
 8014800:	685a      	ldr	r2, [r3, #4]
 8014802:	604a      	str	r2, [r1, #4]
 8014804:	2301      	movs	r3, #1
 8014806:	4093      	lsls	r3, r2
 8014808:	608b      	str	r3, [r1, #8]
 801480a:	4620      	mov	r0, r4
 801480c:	f001 f9b8 	bl	8015b80 <_Bfree>
 8014810:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014812:	2200      	movs	r2, #0
 8014814:	601a      	str	r2, [r3, #0]
 8014816:	1e3b      	subs	r3, r7, #0
 8014818:	bfaa      	itet	ge
 801481a:	2300      	movge	r3, #0
 801481c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8014820:	f8c8 3000 	strge.w	r3, [r8]
 8014824:	4b9a      	ldr	r3, [pc, #616]	; (8014a90 <_dtoa_r+0x2d8>)
 8014826:	bfbc      	itt	lt
 8014828:	2201      	movlt	r2, #1
 801482a:	f8c8 2000 	strlt.w	r2, [r8]
 801482e:	ea33 030b 	bics.w	r3, r3, fp
 8014832:	d11b      	bne.n	801486c <_dtoa_r+0xb4>
 8014834:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014836:	f242 730f 	movw	r3, #9999	; 0x270f
 801483a:	6013      	str	r3, [r2, #0]
 801483c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014840:	4333      	orrs	r3, r6
 8014842:	f000 8592 	beq.w	801536a <_dtoa_r+0xbb2>
 8014846:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014848:	b963      	cbnz	r3, 8014864 <_dtoa_r+0xac>
 801484a:	4b92      	ldr	r3, [pc, #584]	; (8014a94 <_dtoa_r+0x2dc>)
 801484c:	e022      	b.n	8014894 <_dtoa_r+0xdc>
 801484e:	4b92      	ldr	r3, [pc, #584]	; (8014a98 <_dtoa_r+0x2e0>)
 8014850:	9301      	str	r3, [sp, #4]
 8014852:	3308      	adds	r3, #8
 8014854:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014856:	6013      	str	r3, [r2, #0]
 8014858:	9801      	ldr	r0, [sp, #4]
 801485a:	b013      	add	sp, #76	; 0x4c
 801485c:	ecbd 8b04 	vpop	{d8-d9}
 8014860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014864:	4b8b      	ldr	r3, [pc, #556]	; (8014a94 <_dtoa_r+0x2dc>)
 8014866:	9301      	str	r3, [sp, #4]
 8014868:	3303      	adds	r3, #3
 801486a:	e7f3      	b.n	8014854 <_dtoa_r+0x9c>
 801486c:	2200      	movs	r2, #0
 801486e:	2300      	movs	r3, #0
 8014870:	4650      	mov	r0, sl
 8014872:	4659      	mov	r1, fp
 8014874:	f7ec f958 	bl	8000b28 <__aeabi_dcmpeq>
 8014878:	ec4b ab19 	vmov	d9, sl, fp
 801487c:	4680      	mov	r8, r0
 801487e:	b158      	cbz	r0, 8014898 <_dtoa_r+0xe0>
 8014880:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014882:	2301      	movs	r3, #1
 8014884:	6013      	str	r3, [r2, #0]
 8014886:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014888:	2b00      	cmp	r3, #0
 801488a:	f000 856b 	beq.w	8015364 <_dtoa_r+0xbac>
 801488e:	4883      	ldr	r0, [pc, #524]	; (8014a9c <_dtoa_r+0x2e4>)
 8014890:	6018      	str	r0, [r3, #0]
 8014892:	1e43      	subs	r3, r0, #1
 8014894:	9301      	str	r3, [sp, #4]
 8014896:	e7df      	b.n	8014858 <_dtoa_r+0xa0>
 8014898:	ec4b ab10 	vmov	d0, sl, fp
 801489c:	aa10      	add	r2, sp, #64	; 0x40
 801489e:	a911      	add	r1, sp, #68	; 0x44
 80148a0:	4620      	mov	r0, r4
 80148a2:	f001 fd1b 	bl	80162dc <__d2b>
 80148a6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80148aa:	ee08 0a10 	vmov	s16, r0
 80148ae:	2d00      	cmp	r5, #0
 80148b0:	f000 8084 	beq.w	80149bc <_dtoa_r+0x204>
 80148b4:	ee19 3a90 	vmov	r3, s19
 80148b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80148bc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80148c0:	4656      	mov	r6, sl
 80148c2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80148c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80148ca:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80148ce:	4b74      	ldr	r3, [pc, #464]	; (8014aa0 <_dtoa_r+0x2e8>)
 80148d0:	2200      	movs	r2, #0
 80148d2:	4630      	mov	r0, r6
 80148d4:	4639      	mov	r1, r7
 80148d6:	f7eb fd07 	bl	80002e8 <__aeabi_dsub>
 80148da:	a365      	add	r3, pc, #404	; (adr r3, 8014a70 <_dtoa_r+0x2b8>)
 80148dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148e0:	f7eb feba 	bl	8000658 <__aeabi_dmul>
 80148e4:	a364      	add	r3, pc, #400	; (adr r3, 8014a78 <_dtoa_r+0x2c0>)
 80148e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148ea:	f7eb fcff 	bl	80002ec <__adddf3>
 80148ee:	4606      	mov	r6, r0
 80148f0:	4628      	mov	r0, r5
 80148f2:	460f      	mov	r7, r1
 80148f4:	f7eb fe46 	bl	8000584 <__aeabi_i2d>
 80148f8:	a361      	add	r3, pc, #388	; (adr r3, 8014a80 <_dtoa_r+0x2c8>)
 80148fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148fe:	f7eb feab 	bl	8000658 <__aeabi_dmul>
 8014902:	4602      	mov	r2, r0
 8014904:	460b      	mov	r3, r1
 8014906:	4630      	mov	r0, r6
 8014908:	4639      	mov	r1, r7
 801490a:	f7eb fcef 	bl	80002ec <__adddf3>
 801490e:	4606      	mov	r6, r0
 8014910:	460f      	mov	r7, r1
 8014912:	f7ec f951 	bl	8000bb8 <__aeabi_d2iz>
 8014916:	2200      	movs	r2, #0
 8014918:	9000      	str	r0, [sp, #0]
 801491a:	2300      	movs	r3, #0
 801491c:	4630      	mov	r0, r6
 801491e:	4639      	mov	r1, r7
 8014920:	f7ec f90c 	bl	8000b3c <__aeabi_dcmplt>
 8014924:	b150      	cbz	r0, 801493c <_dtoa_r+0x184>
 8014926:	9800      	ldr	r0, [sp, #0]
 8014928:	f7eb fe2c 	bl	8000584 <__aeabi_i2d>
 801492c:	4632      	mov	r2, r6
 801492e:	463b      	mov	r3, r7
 8014930:	f7ec f8fa 	bl	8000b28 <__aeabi_dcmpeq>
 8014934:	b910      	cbnz	r0, 801493c <_dtoa_r+0x184>
 8014936:	9b00      	ldr	r3, [sp, #0]
 8014938:	3b01      	subs	r3, #1
 801493a:	9300      	str	r3, [sp, #0]
 801493c:	9b00      	ldr	r3, [sp, #0]
 801493e:	2b16      	cmp	r3, #22
 8014940:	d85a      	bhi.n	80149f8 <_dtoa_r+0x240>
 8014942:	9a00      	ldr	r2, [sp, #0]
 8014944:	4b57      	ldr	r3, [pc, #348]	; (8014aa4 <_dtoa_r+0x2ec>)
 8014946:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801494a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801494e:	ec51 0b19 	vmov	r0, r1, d9
 8014952:	f7ec f8f3 	bl	8000b3c <__aeabi_dcmplt>
 8014956:	2800      	cmp	r0, #0
 8014958:	d050      	beq.n	80149fc <_dtoa_r+0x244>
 801495a:	9b00      	ldr	r3, [sp, #0]
 801495c:	3b01      	subs	r3, #1
 801495e:	9300      	str	r3, [sp, #0]
 8014960:	2300      	movs	r3, #0
 8014962:	930b      	str	r3, [sp, #44]	; 0x2c
 8014964:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014966:	1b5d      	subs	r5, r3, r5
 8014968:	1e6b      	subs	r3, r5, #1
 801496a:	9305      	str	r3, [sp, #20]
 801496c:	bf45      	ittet	mi
 801496e:	f1c5 0301 	rsbmi	r3, r5, #1
 8014972:	9304      	strmi	r3, [sp, #16]
 8014974:	2300      	movpl	r3, #0
 8014976:	2300      	movmi	r3, #0
 8014978:	bf4c      	ite	mi
 801497a:	9305      	strmi	r3, [sp, #20]
 801497c:	9304      	strpl	r3, [sp, #16]
 801497e:	9b00      	ldr	r3, [sp, #0]
 8014980:	2b00      	cmp	r3, #0
 8014982:	db3d      	blt.n	8014a00 <_dtoa_r+0x248>
 8014984:	9b05      	ldr	r3, [sp, #20]
 8014986:	9a00      	ldr	r2, [sp, #0]
 8014988:	920a      	str	r2, [sp, #40]	; 0x28
 801498a:	4413      	add	r3, r2
 801498c:	9305      	str	r3, [sp, #20]
 801498e:	2300      	movs	r3, #0
 8014990:	9307      	str	r3, [sp, #28]
 8014992:	9b06      	ldr	r3, [sp, #24]
 8014994:	2b09      	cmp	r3, #9
 8014996:	f200 8089 	bhi.w	8014aac <_dtoa_r+0x2f4>
 801499a:	2b05      	cmp	r3, #5
 801499c:	bfc4      	itt	gt
 801499e:	3b04      	subgt	r3, #4
 80149a0:	9306      	strgt	r3, [sp, #24]
 80149a2:	9b06      	ldr	r3, [sp, #24]
 80149a4:	f1a3 0302 	sub.w	r3, r3, #2
 80149a8:	bfcc      	ite	gt
 80149aa:	2500      	movgt	r5, #0
 80149ac:	2501      	movle	r5, #1
 80149ae:	2b03      	cmp	r3, #3
 80149b0:	f200 8087 	bhi.w	8014ac2 <_dtoa_r+0x30a>
 80149b4:	e8df f003 	tbb	[pc, r3]
 80149b8:	59383a2d 	.word	0x59383a2d
 80149bc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80149c0:	441d      	add	r5, r3
 80149c2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80149c6:	2b20      	cmp	r3, #32
 80149c8:	bfc1      	itttt	gt
 80149ca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80149ce:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80149d2:	fa0b f303 	lslgt.w	r3, fp, r3
 80149d6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80149da:	bfda      	itte	le
 80149dc:	f1c3 0320 	rsble	r3, r3, #32
 80149e0:	fa06 f003 	lslle.w	r0, r6, r3
 80149e4:	4318      	orrgt	r0, r3
 80149e6:	f7eb fdbd 	bl	8000564 <__aeabi_ui2d>
 80149ea:	2301      	movs	r3, #1
 80149ec:	4606      	mov	r6, r0
 80149ee:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80149f2:	3d01      	subs	r5, #1
 80149f4:	930e      	str	r3, [sp, #56]	; 0x38
 80149f6:	e76a      	b.n	80148ce <_dtoa_r+0x116>
 80149f8:	2301      	movs	r3, #1
 80149fa:	e7b2      	b.n	8014962 <_dtoa_r+0x1aa>
 80149fc:	900b      	str	r0, [sp, #44]	; 0x2c
 80149fe:	e7b1      	b.n	8014964 <_dtoa_r+0x1ac>
 8014a00:	9b04      	ldr	r3, [sp, #16]
 8014a02:	9a00      	ldr	r2, [sp, #0]
 8014a04:	1a9b      	subs	r3, r3, r2
 8014a06:	9304      	str	r3, [sp, #16]
 8014a08:	4253      	negs	r3, r2
 8014a0a:	9307      	str	r3, [sp, #28]
 8014a0c:	2300      	movs	r3, #0
 8014a0e:	930a      	str	r3, [sp, #40]	; 0x28
 8014a10:	e7bf      	b.n	8014992 <_dtoa_r+0x1da>
 8014a12:	2300      	movs	r3, #0
 8014a14:	9308      	str	r3, [sp, #32]
 8014a16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014a18:	2b00      	cmp	r3, #0
 8014a1a:	dc55      	bgt.n	8014ac8 <_dtoa_r+0x310>
 8014a1c:	2301      	movs	r3, #1
 8014a1e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8014a22:	461a      	mov	r2, r3
 8014a24:	9209      	str	r2, [sp, #36]	; 0x24
 8014a26:	e00c      	b.n	8014a42 <_dtoa_r+0x28a>
 8014a28:	2301      	movs	r3, #1
 8014a2a:	e7f3      	b.n	8014a14 <_dtoa_r+0x25c>
 8014a2c:	2300      	movs	r3, #0
 8014a2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014a30:	9308      	str	r3, [sp, #32]
 8014a32:	9b00      	ldr	r3, [sp, #0]
 8014a34:	4413      	add	r3, r2
 8014a36:	9302      	str	r3, [sp, #8]
 8014a38:	3301      	adds	r3, #1
 8014a3a:	2b01      	cmp	r3, #1
 8014a3c:	9303      	str	r3, [sp, #12]
 8014a3e:	bfb8      	it	lt
 8014a40:	2301      	movlt	r3, #1
 8014a42:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8014a44:	2200      	movs	r2, #0
 8014a46:	6042      	str	r2, [r0, #4]
 8014a48:	2204      	movs	r2, #4
 8014a4a:	f102 0614 	add.w	r6, r2, #20
 8014a4e:	429e      	cmp	r6, r3
 8014a50:	6841      	ldr	r1, [r0, #4]
 8014a52:	d93d      	bls.n	8014ad0 <_dtoa_r+0x318>
 8014a54:	4620      	mov	r0, r4
 8014a56:	f001 f853 	bl	8015b00 <_Balloc>
 8014a5a:	9001      	str	r0, [sp, #4]
 8014a5c:	2800      	cmp	r0, #0
 8014a5e:	d13b      	bne.n	8014ad8 <_dtoa_r+0x320>
 8014a60:	4b11      	ldr	r3, [pc, #68]	; (8014aa8 <_dtoa_r+0x2f0>)
 8014a62:	4602      	mov	r2, r0
 8014a64:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8014a68:	e6c0      	b.n	80147ec <_dtoa_r+0x34>
 8014a6a:	2301      	movs	r3, #1
 8014a6c:	e7df      	b.n	8014a2e <_dtoa_r+0x276>
 8014a6e:	bf00      	nop
 8014a70:	636f4361 	.word	0x636f4361
 8014a74:	3fd287a7 	.word	0x3fd287a7
 8014a78:	8b60c8b3 	.word	0x8b60c8b3
 8014a7c:	3fc68a28 	.word	0x3fc68a28
 8014a80:	509f79fb 	.word	0x509f79fb
 8014a84:	3fd34413 	.word	0x3fd34413
 8014a88:	0805d980 	.word	0x0805d980
 8014a8c:	0805db3e 	.word	0x0805db3e
 8014a90:	7ff00000 	.word	0x7ff00000
 8014a94:	0805db3a 	.word	0x0805db3a
 8014a98:	0805db31 	.word	0x0805db31
 8014a9c:	0805dd92 	.word	0x0805dd92
 8014aa0:	3ff80000 	.word	0x3ff80000
 8014aa4:	0805dca8 	.word	0x0805dca8
 8014aa8:	0805db99 	.word	0x0805db99
 8014aac:	2501      	movs	r5, #1
 8014aae:	2300      	movs	r3, #0
 8014ab0:	9306      	str	r3, [sp, #24]
 8014ab2:	9508      	str	r5, [sp, #32]
 8014ab4:	f04f 33ff 	mov.w	r3, #4294967295
 8014ab8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8014abc:	2200      	movs	r2, #0
 8014abe:	2312      	movs	r3, #18
 8014ac0:	e7b0      	b.n	8014a24 <_dtoa_r+0x26c>
 8014ac2:	2301      	movs	r3, #1
 8014ac4:	9308      	str	r3, [sp, #32]
 8014ac6:	e7f5      	b.n	8014ab4 <_dtoa_r+0x2fc>
 8014ac8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014aca:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8014ace:	e7b8      	b.n	8014a42 <_dtoa_r+0x28a>
 8014ad0:	3101      	adds	r1, #1
 8014ad2:	6041      	str	r1, [r0, #4]
 8014ad4:	0052      	lsls	r2, r2, #1
 8014ad6:	e7b8      	b.n	8014a4a <_dtoa_r+0x292>
 8014ad8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014ada:	9a01      	ldr	r2, [sp, #4]
 8014adc:	601a      	str	r2, [r3, #0]
 8014ade:	9b03      	ldr	r3, [sp, #12]
 8014ae0:	2b0e      	cmp	r3, #14
 8014ae2:	f200 809d 	bhi.w	8014c20 <_dtoa_r+0x468>
 8014ae6:	2d00      	cmp	r5, #0
 8014ae8:	f000 809a 	beq.w	8014c20 <_dtoa_r+0x468>
 8014aec:	9b00      	ldr	r3, [sp, #0]
 8014aee:	2b00      	cmp	r3, #0
 8014af0:	dd32      	ble.n	8014b58 <_dtoa_r+0x3a0>
 8014af2:	4ab7      	ldr	r2, [pc, #732]	; (8014dd0 <_dtoa_r+0x618>)
 8014af4:	f003 030f 	and.w	r3, r3, #15
 8014af8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8014afc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014b00:	9b00      	ldr	r3, [sp, #0]
 8014b02:	05d8      	lsls	r0, r3, #23
 8014b04:	ea4f 1723 	mov.w	r7, r3, asr #4
 8014b08:	d516      	bpl.n	8014b38 <_dtoa_r+0x380>
 8014b0a:	4bb2      	ldr	r3, [pc, #712]	; (8014dd4 <_dtoa_r+0x61c>)
 8014b0c:	ec51 0b19 	vmov	r0, r1, d9
 8014b10:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8014b14:	f7eb feca 	bl	80008ac <__aeabi_ddiv>
 8014b18:	f007 070f 	and.w	r7, r7, #15
 8014b1c:	4682      	mov	sl, r0
 8014b1e:	468b      	mov	fp, r1
 8014b20:	2503      	movs	r5, #3
 8014b22:	4eac      	ldr	r6, [pc, #688]	; (8014dd4 <_dtoa_r+0x61c>)
 8014b24:	b957      	cbnz	r7, 8014b3c <_dtoa_r+0x384>
 8014b26:	4642      	mov	r2, r8
 8014b28:	464b      	mov	r3, r9
 8014b2a:	4650      	mov	r0, sl
 8014b2c:	4659      	mov	r1, fp
 8014b2e:	f7eb febd 	bl	80008ac <__aeabi_ddiv>
 8014b32:	4682      	mov	sl, r0
 8014b34:	468b      	mov	fp, r1
 8014b36:	e028      	b.n	8014b8a <_dtoa_r+0x3d2>
 8014b38:	2502      	movs	r5, #2
 8014b3a:	e7f2      	b.n	8014b22 <_dtoa_r+0x36a>
 8014b3c:	07f9      	lsls	r1, r7, #31
 8014b3e:	d508      	bpl.n	8014b52 <_dtoa_r+0x39a>
 8014b40:	4640      	mov	r0, r8
 8014b42:	4649      	mov	r1, r9
 8014b44:	e9d6 2300 	ldrd	r2, r3, [r6]
 8014b48:	f7eb fd86 	bl	8000658 <__aeabi_dmul>
 8014b4c:	3501      	adds	r5, #1
 8014b4e:	4680      	mov	r8, r0
 8014b50:	4689      	mov	r9, r1
 8014b52:	107f      	asrs	r7, r7, #1
 8014b54:	3608      	adds	r6, #8
 8014b56:	e7e5      	b.n	8014b24 <_dtoa_r+0x36c>
 8014b58:	f000 809b 	beq.w	8014c92 <_dtoa_r+0x4da>
 8014b5c:	9b00      	ldr	r3, [sp, #0]
 8014b5e:	4f9d      	ldr	r7, [pc, #628]	; (8014dd4 <_dtoa_r+0x61c>)
 8014b60:	425e      	negs	r6, r3
 8014b62:	4b9b      	ldr	r3, [pc, #620]	; (8014dd0 <_dtoa_r+0x618>)
 8014b64:	f006 020f 	and.w	r2, r6, #15
 8014b68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b70:	ec51 0b19 	vmov	r0, r1, d9
 8014b74:	f7eb fd70 	bl	8000658 <__aeabi_dmul>
 8014b78:	1136      	asrs	r6, r6, #4
 8014b7a:	4682      	mov	sl, r0
 8014b7c:	468b      	mov	fp, r1
 8014b7e:	2300      	movs	r3, #0
 8014b80:	2502      	movs	r5, #2
 8014b82:	2e00      	cmp	r6, #0
 8014b84:	d17a      	bne.n	8014c7c <_dtoa_r+0x4c4>
 8014b86:	2b00      	cmp	r3, #0
 8014b88:	d1d3      	bne.n	8014b32 <_dtoa_r+0x37a>
 8014b8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014b8c:	2b00      	cmp	r3, #0
 8014b8e:	f000 8082 	beq.w	8014c96 <_dtoa_r+0x4de>
 8014b92:	4b91      	ldr	r3, [pc, #580]	; (8014dd8 <_dtoa_r+0x620>)
 8014b94:	2200      	movs	r2, #0
 8014b96:	4650      	mov	r0, sl
 8014b98:	4659      	mov	r1, fp
 8014b9a:	f7eb ffcf 	bl	8000b3c <__aeabi_dcmplt>
 8014b9e:	2800      	cmp	r0, #0
 8014ba0:	d079      	beq.n	8014c96 <_dtoa_r+0x4de>
 8014ba2:	9b03      	ldr	r3, [sp, #12]
 8014ba4:	2b00      	cmp	r3, #0
 8014ba6:	d076      	beq.n	8014c96 <_dtoa_r+0x4de>
 8014ba8:	9b02      	ldr	r3, [sp, #8]
 8014baa:	2b00      	cmp	r3, #0
 8014bac:	dd36      	ble.n	8014c1c <_dtoa_r+0x464>
 8014bae:	9b00      	ldr	r3, [sp, #0]
 8014bb0:	4650      	mov	r0, sl
 8014bb2:	4659      	mov	r1, fp
 8014bb4:	1e5f      	subs	r7, r3, #1
 8014bb6:	2200      	movs	r2, #0
 8014bb8:	4b88      	ldr	r3, [pc, #544]	; (8014ddc <_dtoa_r+0x624>)
 8014bba:	f7eb fd4d 	bl	8000658 <__aeabi_dmul>
 8014bbe:	9e02      	ldr	r6, [sp, #8]
 8014bc0:	4682      	mov	sl, r0
 8014bc2:	468b      	mov	fp, r1
 8014bc4:	3501      	adds	r5, #1
 8014bc6:	4628      	mov	r0, r5
 8014bc8:	f7eb fcdc 	bl	8000584 <__aeabi_i2d>
 8014bcc:	4652      	mov	r2, sl
 8014bce:	465b      	mov	r3, fp
 8014bd0:	f7eb fd42 	bl	8000658 <__aeabi_dmul>
 8014bd4:	4b82      	ldr	r3, [pc, #520]	; (8014de0 <_dtoa_r+0x628>)
 8014bd6:	2200      	movs	r2, #0
 8014bd8:	f7eb fb88 	bl	80002ec <__adddf3>
 8014bdc:	46d0      	mov	r8, sl
 8014bde:	46d9      	mov	r9, fp
 8014be0:	4682      	mov	sl, r0
 8014be2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8014be6:	2e00      	cmp	r6, #0
 8014be8:	d158      	bne.n	8014c9c <_dtoa_r+0x4e4>
 8014bea:	4b7e      	ldr	r3, [pc, #504]	; (8014de4 <_dtoa_r+0x62c>)
 8014bec:	2200      	movs	r2, #0
 8014bee:	4640      	mov	r0, r8
 8014bf0:	4649      	mov	r1, r9
 8014bf2:	f7eb fb79 	bl	80002e8 <__aeabi_dsub>
 8014bf6:	4652      	mov	r2, sl
 8014bf8:	465b      	mov	r3, fp
 8014bfa:	4680      	mov	r8, r0
 8014bfc:	4689      	mov	r9, r1
 8014bfe:	f7eb ffbb 	bl	8000b78 <__aeabi_dcmpgt>
 8014c02:	2800      	cmp	r0, #0
 8014c04:	f040 8295 	bne.w	8015132 <_dtoa_r+0x97a>
 8014c08:	4652      	mov	r2, sl
 8014c0a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8014c0e:	4640      	mov	r0, r8
 8014c10:	4649      	mov	r1, r9
 8014c12:	f7eb ff93 	bl	8000b3c <__aeabi_dcmplt>
 8014c16:	2800      	cmp	r0, #0
 8014c18:	f040 8289 	bne.w	801512e <_dtoa_r+0x976>
 8014c1c:	ec5b ab19 	vmov	sl, fp, d9
 8014c20:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014c22:	2b00      	cmp	r3, #0
 8014c24:	f2c0 8148 	blt.w	8014eb8 <_dtoa_r+0x700>
 8014c28:	9a00      	ldr	r2, [sp, #0]
 8014c2a:	2a0e      	cmp	r2, #14
 8014c2c:	f300 8144 	bgt.w	8014eb8 <_dtoa_r+0x700>
 8014c30:	4b67      	ldr	r3, [pc, #412]	; (8014dd0 <_dtoa_r+0x618>)
 8014c32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014c36:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014c3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014c3c:	2b00      	cmp	r3, #0
 8014c3e:	f280 80d5 	bge.w	8014dec <_dtoa_r+0x634>
 8014c42:	9b03      	ldr	r3, [sp, #12]
 8014c44:	2b00      	cmp	r3, #0
 8014c46:	f300 80d1 	bgt.w	8014dec <_dtoa_r+0x634>
 8014c4a:	f040 826f 	bne.w	801512c <_dtoa_r+0x974>
 8014c4e:	4b65      	ldr	r3, [pc, #404]	; (8014de4 <_dtoa_r+0x62c>)
 8014c50:	2200      	movs	r2, #0
 8014c52:	4640      	mov	r0, r8
 8014c54:	4649      	mov	r1, r9
 8014c56:	f7eb fcff 	bl	8000658 <__aeabi_dmul>
 8014c5a:	4652      	mov	r2, sl
 8014c5c:	465b      	mov	r3, fp
 8014c5e:	f7eb ff81 	bl	8000b64 <__aeabi_dcmpge>
 8014c62:	9e03      	ldr	r6, [sp, #12]
 8014c64:	4637      	mov	r7, r6
 8014c66:	2800      	cmp	r0, #0
 8014c68:	f040 8245 	bne.w	80150f6 <_dtoa_r+0x93e>
 8014c6c:	9d01      	ldr	r5, [sp, #4]
 8014c6e:	2331      	movs	r3, #49	; 0x31
 8014c70:	f805 3b01 	strb.w	r3, [r5], #1
 8014c74:	9b00      	ldr	r3, [sp, #0]
 8014c76:	3301      	adds	r3, #1
 8014c78:	9300      	str	r3, [sp, #0]
 8014c7a:	e240      	b.n	80150fe <_dtoa_r+0x946>
 8014c7c:	07f2      	lsls	r2, r6, #31
 8014c7e:	d505      	bpl.n	8014c8c <_dtoa_r+0x4d4>
 8014c80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014c84:	f7eb fce8 	bl	8000658 <__aeabi_dmul>
 8014c88:	3501      	adds	r5, #1
 8014c8a:	2301      	movs	r3, #1
 8014c8c:	1076      	asrs	r6, r6, #1
 8014c8e:	3708      	adds	r7, #8
 8014c90:	e777      	b.n	8014b82 <_dtoa_r+0x3ca>
 8014c92:	2502      	movs	r5, #2
 8014c94:	e779      	b.n	8014b8a <_dtoa_r+0x3d2>
 8014c96:	9f00      	ldr	r7, [sp, #0]
 8014c98:	9e03      	ldr	r6, [sp, #12]
 8014c9a:	e794      	b.n	8014bc6 <_dtoa_r+0x40e>
 8014c9c:	9901      	ldr	r1, [sp, #4]
 8014c9e:	4b4c      	ldr	r3, [pc, #304]	; (8014dd0 <_dtoa_r+0x618>)
 8014ca0:	4431      	add	r1, r6
 8014ca2:	910d      	str	r1, [sp, #52]	; 0x34
 8014ca4:	9908      	ldr	r1, [sp, #32]
 8014ca6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8014caa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8014cae:	2900      	cmp	r1, #0
 8014cb0:	d043      	beq.n	8014d3a <_dtoa_r+0x582>
 8014cb2:	494d      	ldr	r1, [pc, #308]	; (8014de8 <_dtoa_r+0x630>)
 8014cb4:	2000      	movs	r0, #0
 8014cb6:	f7eb fdf9 	bl	80008ac <__aeabi_ddiv>
 8014cba:	4652      	mov	r2, sl
 8014cbc:	465b      	mov	r3, fp
 8014cbe:	f7eb fb13 	bl	80002e8 <__aeabi_dsub>
 8014cc2:	9d01      	ldr	r5, [sp, #4]
 8014cc4:	4682      	mov	sl, r0
 8014cc6:	468b      	mov	fp, r1
 8014cc8:	4649      	mov	r1, r9
 8014cca:	4640      	mov	r0, r8
 8014ccc:	f7eb ff74 	bl	8000bb8 <__aeabi_d2iz>
 8014cd0:	4606      	mov	r6, r0
 8014cd2:	f7eb fc57 	bl	8000584 <__aeabi_i2d>
 8014cd6:	4602      	mov	r2, r0
 8014cd8:	460b      	mov	r3, r1
 8014cda:	4640      	mov	r0, r8
 8014cdc:	4649      	mov	r1, r9
 8014cde:	f7eb fb03 	bl	80002e8 <__aeabi_dsub>
 8014ce2:	3630      	adds	r6, #48	; 0x30
 8014ce4:	f805 6b01 	strb.w	r6, [r5], #1
 8014ce8:	4652      	mov	r2, sl
 8014cea:	465b      	mov	r3, fp
 8014cec:	4680      	mov	r8, r0
 8014cee:	4689      	mov	r9, r1
 8014cf0:	f7eb ff24 	bl	8000b3c <__aeabi_dcmplt>
 8014cf4:	2800      	cmp	r0, #0
 8014cf6:	d163      	bne.n	8014dc0 <_dtoa_r+0x608>
 8014cf8:	4642      	mov	r2, r8
 8014cfa:	464b      	mov	r3, r9
 8014cfc:	4936      	ldr	r1, [pc, #216]	; (8014dd8 <_dtoa_r+0x620>)
 8014cfe:	2000      	movs	r0, #0
 8014d00:	f7eb faf2 	bl	80002e8 <__aeabi_dsub>
 8014d04:	4652      	mov	r2, sl
 8014d06:	465b      	mov	r3, fp
 8014d08:	f7eb ff18 	bl	8000b3c <__aeabi_dcmplt>
 8014d0c:	2800      	cmp	r0, #0
 8014d0e:	f040 80b5 	bne.w	8014e7c <_dtoa_r+0x6c4>
 8014d12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014d14:	429d      	cmp	r5, r3
 8014d16:	d081      	beq.n	8014c1c <_dtoa_r+0x464>
 8014d18:	4b30      	ldr	r3, [pc, #192]	; (8014ddc <_dtoa_r+0x624>)
 8014d1a:	2200      	movs	r2, #0
 8014d1c:	4650      	mov	r0, sl
 8014d1e:	4659      	mov	r1, fp
 8014d20:	f7eb fc9a 	bl	8000658 <__aeabi_dmul>
 8014d24:	4b2d      	ldr	r3, [pc, #180]	; (8014ddc <_dtoa_r+0x624>)
 8014d26:	4682      	mov	sl, r0
 8014d28:	468b      	mov	fp, r1
 8014d2a:	4640      	mov	r0, r8
 8014d2c:	4649      	mov	r1, r9
 8014d2e:	2200      	movs	r2, #0
 8014d30:	f7eb fc92 	bl	8000658 <__aeabi_dmul>
 8014d34:	4680      	mov	r8, r0
 8014d36:	4689      	mov	r9, r1
 8014d38:	e7c6      	b.n	8014cc8 <_dtoa_r+0x510>
 8014d3a:	4650      	mov	r0, sl
 8014d3c:	4659      	mov	r1, fp
 8014d3e:	f7eb fc8b 	bl	8000658 <__aeabi_dmul>
 8014d42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014d44:	9d01      	ldr	r5, [sp, #4]
 8014d46:	930f      	str	r3, [sp, #60]	; 0x3c
 8014d48:	4682      	mov	sl, r0
 8014d4a:	468b      	mov	fp, r1
 8014d4c:	4649      	mov	r1, r9
 8014d4e:	4640      	mov	r0, r8
 8014d50:	f7eb ff32 	bl	8000bb8 <__aeabi_d2iz>
 8014d54:	4606      	mov	r6, r0
 8014d56:	f7eb fc15 	bl	8000584 <__aeabi_i2d>
 8014d5a:	3630      	adds	r6, #48	; 0x30
 8014d5c:	4602      	mov	r2, r0
 8014d5e:	460b      	mov	r3, r1
 8014d60:	4640      	mov	r0, r8
 8014d62:	4649      	mov	r1, r9
 8014d64:	f7eb fac0 	bl	80002e8 <__aeabi_dsub>
 8014d68:	f805 6b01 	strb.w	r6, [r5], #1
 8014d6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014d6e:	429d      	cmp	r5, r3
 8014d70:	4680      	mov	r8, r0
 8014d72:	4689      	mov	r9, r1
 8014d74:	f04f 0200 	mov.w	r2, #0
 8014d78:	d124      	bne.n	8014dc4 <_dtoa_r+0x60c>
 8014d7a:	4b1b      	ldr	r3, [pc, #108]	; (8014de8 <_dtoa_r+0x630>)
 8014d7c:	4650      	mov	r0, sl
 8014d7e:	4659      	mov	r1, fp
 8014d80:	f7eb fab4 	bl	80002ec <__adddf3>
 8014d84:	4602      	mov	r2, r0
 8014d86:	460b      	mov	r3, r1
 8014d88:	4640      	mov	r0, r8
 8014d8a:	4649      	mov	r1, r9
 8014d8c:	f7eb fef4 	bl	8000b78 <__aeabi_dcmpgt>
 8014d90:	2800      	cmp	r0, #0
 8014d92:	d173      	bne.n	8014e7c <_dtoa_r+0x6c4>
 8014d94:	4652      	mov	r2, sl
 8014d96:	465b      	mov	r3, fp
 8014d98:	4913      	ldr	r1, [pc, #76]	; (8014de8 <_dtoa_r+0x630>)
 8014d9a:	2000      	movs	r0, #0
 8014d9c:	f7eb faa4 	bl	80002e8 <__aeabi_dsub>
 8014da0:	4602      	mov	r2, r0
 8014da2:	460b      	mov	r3, r1
 8014da4:	4640      	mov	r0, r8
 8014da6:	4649      	mov	r1, r9
 8014da8:	f7eb fec8 	bl	8000b3c <__aeabi_dcmplt>
 8014dac:	2800      	cmp	r0, #0
 8014dae:	f43f af35 	beq.w	8014c1c <_dtoa_r+0x464>
 8014db2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8014db4:	1e6b      	subs	r3, r5, #1
 8014db6:	930f      	str	r3, [sp, #60]	; 0x3c
 8014db8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014dbc:	2b30      	cmp	r3, #48	; 0x30
 8014dbe:	d0f8      	beq.n	8014db2 <_dtoa_r+0x5fa>
 8014dc0:	9700      	str	r7, [sp, #0]
 8014dc2:	e049      	b.n	8014e58 <_dtoa_r+0x6a0>
 8014dc4:	4b05      	ldr	r3, [pc, #20]	; (8014ddc <_dtoa_r+0x624>)
 8014dc6:	f7eb fc47 	bl	8000658 <__aeabi_dmul>
 8014dca:	4680      	mov	r8, r0
 8014dcc:	4689      	mov	r9, r1
 8014dce:	e7bd      	b.n	8014d4c <_dtoa_r+0x594>
 8014dd0:	0805dca8 	.word	0x0805dca8
 8014dd4:	0805dc80 	.word	0x0805dc80
 8014dd8:	3ff00000 	.word	0x3ff00000
 8014ddc:	40240000 	.word	0x40240000
 8014de0:	401c0000 	.word	0x401c0000
 8014de4:	40140000 	.word	0x40140000
 8014de8:	3fe00000 	.word	0x3fe00000
 8014dec:	9d01      	ldr	r5, [sp, #4]
 8014dee:	4656      	mov	r6, sl
 8014df0:	465f      	mov	r7, fp
 8014df2:	4642      	mov	r2, r8
 8014df4:	464b      	mov	r3, r9
 8014df6:	4630      	mov	r0, r6
 8014df8:	4639      	mov	r1, r7
 8014dfa:	f7eb fd57 	bl	80008ac <__aeabi_ddiv>
 8014dfe:	f7eb fedb 	bl	8000bb8 <__aeabi_d2iz>
 8014e02:	4682      	mov	sl, r0
 8014e04:	f7eb fbbe 	bl	8000584 <__aeabi_i2d>
 8014e08:	4642      	mov	r2, r8
 8014e0a:	464b      	mov	r3, r9
 8014e0c:	f7eb fc24 	bl	8000658 <__aeabi_dmul>
 8014e10:	4602      	mov	r2, r0
 8014e12:	460b      	mov	r3, r1
 8014e14:	4630      	mov	r0, r6
 8014e16:	4639      	mov	r1, r7
 8014e18:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8014e1c:	f7eb fa64 	bl	80002e8 <__aeabi_dsub>
 8014e20:	f805 6b01 	strb.w	r6, [r5], #1
 8014e24:	9e01      	ldr	r6, [sp, #4]
 8014e26:	9f03      	ldr	r7, [sp, #12]
 8014e28:	1bae      	subs	r6, r5, r6
 8014e2a:	42b7      	cmp	r7, r6
 8014e2c:	4602      	mov	r2, r0
 8014e2e:	460b      	mov	r3, r1
 8014e30:	d135      	bne.n	8014e9e <_dtoa_r+0x6e6>
 8014e32:	f7eb fa5b 	bl	80002ec <__adddf3>
 8014e36:	4642      	mov	r2, r8
 8014e38:	464b      	mov	r3, r9
 8014e3a:	4606      	mov	r6, r0
 8014e3c:	460f      	mov	r7, r1
 8014e3e:	f7eb fe9b 	bl	8000b78 <__aeabi_dcmpgt>
 8014e42:	b9d0      	cbnz	r0, 8014e7a <_dtoa_r+0x6c2>
 8014e44:	4642      	mov	r2, r8
 8014e46:	464b      	mov	r3, r9
 8014e48:	4630      	mov	r0, r6
 8014e4a:	4639      	mov	r1, r7
 8014e4c:	f7eb fe6c 	bl	8000b28 <__aeabi_dcmpeq>
 8014e50:	b110      	cbz	r0, 8014e58 <_dtoa_r+0x6a0>
 8014e52:	f01a 0f01 	tst.w	sl, #1
 8014e56:	d110      	bne.n	8014e7a <_dtoa_r+0x6c2>
 8014e58:	4620      	mov	r0, r4
 8014e5a:	ee18 1a10 	vmov	r1, s16
 8014e5e:	f000 fe8f 	bl	8015b80 <_Bfree>
 8014e62:	2300      	movs	r3, #0
 8014e64:	9800      	ldr	r0, [sp, #0]
 8014e66:	702b      	strb	r3, [r5, #0]
 8014e68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014e6a:	3001      	adds	r0, #1
 8014e6c:	6018      	str	r0, [r3, #0]
 8014e6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014e70:	2b00      	cmp	r3, #0
 8014e72:	f43f acf1 	beq.w	8014858 <_dtoa_r+0xa0>
 8014e76:	601d      	str	r5, [r3, #0]
 8014e78:	e4ee      	b.n	8014858 <_dtoa_r+0xa0>
 8014e7a:	9f00      	ldr	r7, [sp, #0]
 8014e7c:	462b      	mov	r3, r5
 8014e7e:	461d      	mov	r5, r3
 8014e80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014e84:	2a39      	cmp	r2, #57	; 0x39
 8014e86:	d106      	bne.n	8014e96 <_dtoa_r+0x6de>
 8014e88:	9a01      	ldr	r2, [sp, #4]
 8014e8a:	429a      	cmp	r2, r3
 8014e8c:	d1f7      	bne.n	8014e7e <_dtoa_r+0x6c6>
 8014e8e:	9901      	ldr	r1, [sp, #4]
 8014e90:	2230      	movs	r2, #48	; 0x30
 8014e92:	3701      	adds	r7, #1
 8014e94:	700a      	strb	r2, [r1, #0]
 8014e96:	781a      	ldrb	r2, [r3, #0]
 8014e98:	3201      	adds	r2, #1
 8014e9a:	701a      	strb	r2, [r3, #0]
 8014e9c:	e790      	b.n	8014dc0 <_dtoa_r+0x608>
 8014e9e:	4ba6      	ldr	r3, [pc, #664]	; (8015138 <_dtoa_r+0x980>)
 8014ea0:	2200      	movs	r2, #0
 8014ea2:	f7eb fbd9 	bl	8000658 <__aeabi_dmul>
 8014ea6:	2200      	movs	r2, #0
 8014ea8:	2300      	movs	r3, #0
 8014eaa:	4606      	mov	r6, r0
 8014eac:	460f      	mov	r7, r1
 8014eae:	f7eb fe3b 	bl	8000b28 <__aeabi_dcmpeq>
 8014eb2:	2800      	cmp	r0, #0
 8014eb4:	d09d      	beq.n	8014df2 <_dtoa_r+0x63a>
 8014eb6:	e7cf      	b.n	8014e58 <_dtoa_r+0x6a0>
 8014eb8:	9a08      	ldr	r2, [sp, #32]
 8014eba:	2a00      	cmp	r2, #0
 8014ebc:	f000 80d7 	beq.w	801506e <_dtoa_r+0x8b6>
 8014ec0:	9a06      	ldr	r2, [sp, #24]
 8014ec2:	2a01      	cmp	r2, #1
 8014ec4:	f300 80ba 	bgt.w	801503c <_dtoa_r+0x884>
 8014ec8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014eca:	2a00      	cmp	r2, #0
 8014ecc:	f000 80b2 	beq.w	8015034 <_dtoa_r+0x87c>
 8014ed0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8014ed4:	9e07      	ldr	r6, [sp, #28]
 8014ed6:	9d04      	ldr	r5, [sp, #16]
 8014ed8:	9a04      	ldr	r2, [sp, #16]
 8014eda:	441a      	add	r2, r3
 8014edc:	9204      	str	r2, [sp, #16]
 8014ede:	9a05      	ldr	r2, [sp, #20]
 8014ee0:	2101      	movs	r1, #1
 8014ee2:	441a      	add	r2, r3
 8014ee4:	4620      	mov	r0, r4
 8014ee6:	9205      	str	r2, [sp, #20]
 8014ee8:	f000 ff4c 	bl	8015d84 <__i2b>
 8014eec:	4607      	mov	r7, r0
 8014eee:	2d00      	cmp	r5, #0
 8014ef0:	dd0c      	ble.n	8014f0c <_dtoa_r+0x754>
 8014ef2:	9b05      	ldr	r3, [sp, #20]
 8014ef4:	2b00      	cmp	r3, #0
 8014ef6:	dd09      	ble.n	8014f0c <_dtoa_r+0x754>
 8014ef8:	42ab      	cmp	r3, r5
 8014efa:	9a04      	ldr	r2, [sp, #16]
 8014efc:	bfa8      	it	ge
 8014efe:	462b      	movge	r3, r5
 8014f00:	1ad2      	subs	r2, r2, r3
 8014f02:	9204      	str	r2, [sp, #16]
 8014f04:	9a05      	ldr	r2, [sp, #20]
 8014f06:	1aed      	subs	r5, r5, r3
 8014f08:	1ad3      	subs	r3, r2, r3
 8014f0a:	9305      	str	r3, [sp, #20]
 8014f0c:	9b07      	ldr	r3, [sp, #28]
 8014f0e:	b31b      	cbz	r3, 8014f58 <_dtoa_r+0x7a0>
 8014f10:	9b08      	ldr	r3, [sp, #32]
 8014f12:	2b00      	cmp	r3, #0
 8014f14:	f000 80af 	beq.w	8015076 <_dtoa_r+0x8be>
 8014f18:	2e00      	cmp	r6, #0
 8014f1a:	dd13      	ble.n	8014f44 <_dtoa_r+0x78c>
 8014f1c:	4639      	mov	r1, r7
 8014f1e:	4632      	mov	r2, r6
 8014f20:	4620      	mov	r0, r4
 8014f22:	f000 ffef 	bl	8015f04 <__pow5mult>
 8014f26:	ee18 2a10 	vmov	r2, s16
 8014f2a:	4601      	mov	r1, r0
 8014f2c:	4607      	mov	r7, r0
 8014f2e:	4620      	mov	r0, r4
 8014f30:	f000 ff3e 	bl	8015db0 <__multiply>
 8014f34:	ee18 1a10 	vmov	r1, s16
 8014f38:	4680      	mov	r8, r0
 8014f3a:	4620      	mov	r0, r4
 8014f3c:	f000 fe20 	bl	8015b80 <_Bfree>
 8014f40:	ee08 8a10 	vmov	s16, r8
 8014f44:	9b07      	ldr	r3, [sp, #28]
 8014f46:	1b9a      	subs	r2, r3, r6
 8014f48:	d006      	beq.n	8014f58 <_dtoa_r+0x7a0>
 8014f4a:	ee18 1a10 	vmov	r1, s16
 8014f4e:	4620      	mov	r0, r4
 8014f50:	f000 ffd8 	bl	8015f04 <__pow5mult>
 8014f54:	ee08 0a10 	vmov	s16, r0
 8014f58:	2101      	movs	r1, #1
 8014f5a:	4620      	mov	r0, r4
 8014f5c:	f000 ff12 	bl	8015d84 <__i2b>
 8014f60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014f62:	2b00      	cmp	r3, #0
 8014f64:	4606      	mov	r6, r0
 8014f66:	f340 8088 	ble.w	801507a <_dtoa_r+0x8c2>
 8014f6a:	461a      	mov	r2, r3
 8014f6c:	4601      	mov	r1, r0
 8014f6e:	4620      	mov	r0, r4
 8014f70:	f000 ffc8 	bl	8015f04 <__pow5mult>
 8014f74:	9b06      	ldr	r3, [sp, #24]
 8014f76:	2b01      	cmp	r3, #1
 8014f78:	4606      	mov	r6, r0
 8014f7a:	f340 8081 	ble.w	8015080 <_dtoa_r+0x8c8>
 8014f7e:	f04f 0800 	mov.w	r8, #0
 8014f82:	6933      	ldr	r3, [r6, #16]
 8014f84:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8014f88:	6918      	ldr	r0, [r3, #16]
 8014f8a:	f000 feab 	bl	8015ce4 <__hi0bits>
 8014f8e:	f1c0 0020 	rsb	r0, r0, #32
 8014f92:	9b05      	ldr	r3, [sp, #20]
 8014f94:	4418      	add	r0, r3
 8014f96:	f010 001f 	ands.w	r0, r0, #31
 8014f9a:	f000 8092 	beq.w	80150c2 <_dtoa_r+0x90a>
 8014f9e:	f1c0 0320 	rsb	r3, r0, #32
 8014fa2:	2b04      	cmp	r3, #4
 8014fa4:	f340 808a 	ble.w	80150bc <_dtoa_r+0x904>
 8014fa8:	f1c0 001c 	rsb	r0, r0, #28
 8014fac:	9b04      	ldr	r3, [sp, #16]
 8014fae:	4403      	add	r3, r0
 8014fb0:	9304      	str	r3, [sp, #16]
 8014fb2:	9b05      	ldr	r3, [sp, #20]
 8014fb4:	4403      	add	r3, r0
 8014fb6:	4405      	add	r5, r0
 8014fb8:	9305      	str	r3, [sp, #20]
 8014fba:	9b04      	ldr	r3, [sp, #16]
 8014fbc:	2b00      	cmp	r3, #0
 8014fbe:	dd07      	ble.n	8014fd0 <_dtoa_r+0x818>
 8014fc0:	ee18 1a10 	vmov	r1, s16
 8014fc4:	461a      	mov	r2, r3
 8014fc6:	4620      	mov	r0, r4
 8014fc8:	f000 fff6 	bl	8015fb8 <__lshift>
 8014fcc:	ee08 0a10 	vmov	s16, r0
 8014fd0:	9b05      	ldr	r3, [sp, #20]
 8014fd2:	2b00      	cmp	r3, #0
 8014fd4:	dd05      	ble.n	8014fe2 <_dtoa_r+0x82a>
 8014fd6:	4631      	mov	r1, r6
 8014fd8:	461a      	mov	r2, r3
 8014fda:	4620      	mov	r0, r4
 8014fdc:	f000 ffec 	bl	8015fb8 <__lshift>
 8014fe0:	4606      	mov	r6, r0
 8014fe2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014fe4:	2b00      	cmp	r3, #0
 8014fe6:	d06e      	beq.n	80150c6 <_dtoa_r+0x90e>
 8014fe8:	ee18 0a10 	vmov	r0, s16
 8014fec:	4631      	mov	r1, r6
 8014fee:	f001 f853 	bl	8016098 <__mcmp>
 8014ff2:	2800      	cmp	r0, #0
 8014ff4:	da67      	bge.n	80150c6 <_dtoa_r+0x90e>
 8014ff6:	9b00      	ldr	r3, [sp, #0]
 8014ff8:	3b01      	subs	r3, #1
 8014ffa:	ee18 1a10 	vmov	r1, s16
 8014ffe:	9300      	str	r3, [sp, #0]
 8015000:	220a      	movs	r2, #10
 8015002:	2300      	movs	r3, #0
 8015004:	4620      	mov	r0, r4
 8015006:	f000 fddd 	bl	8015bc4 <__multadd>
 801500a:	9b08      	ldr	r3, [sp, #32]
 801500c:	ee08 0a10 	vmov	s16, r0
 8015010:	2b00      	cmp	r3, #0
 8015012:	f000 81b1 	beq.w	8015378 <_dtoa_r+0xbc0>
 8015016:	2300      	movs	r3, #0
 8015018:	4639      	mov	r1, r7
 801501a:	220a      	movs	r2, #10
 801501c:	4620      	mov	r0, r4
 801501e:	f000 fdd1 	bl	8015bc4 <__multadd>
 8015022:	9b02      	ldr	r3, [sp, #8]
 8015024:	2b00      	cmp	r3, #0
 8015026:	4607      	mov	r7, r0
 8015028:	f300 808e 	bgt.w	8015148 <_dtoa_r+0x990>
 801502c:	9b06      	ldr	r3, [sp, #24]
 801502e:	2b02      	cmp	r3, #2
 8015030:	dc51      	bgt.n	80150d6 <_dtoa_r+0x91e>
 8015032:	e089      	b.n	8015148 <_dtoa_r+0x990>
 8015034:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015036:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801503a:	e74b      	b.n	8014ed4 <_dtoa_r+0x71c>
 801503c:	9b03      	ldr	r3, [sp, #12]
 801503e:	1e5e      	subs	r6, r3, #1
 8015040:	9b07      	ldr	r3, [sp, #28]
 8015042:	42b3      	cmp	r3, r6
 8015044:	bfbf      	itttt	lt
 8015046:	9b07      	ldrlt	r3, [sp, #28]
 8015048:	9607      	strlt	r6, [sp, #28]
 801504a:	1af2      	sublt	r2, r6, r3
 801504c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801504e:	bfb6      	itet	lt
 8015050:	189b      	addlt	r3, r3, r2
 8015052:	1b9e      	subge	r6, r3, r6
 8015054:	930a      	strlt	r3, [sp, #40]	; 0x28
 8015056:	9b03      	ldr	r3, [sp, #12]
 8015058:	bfb8      	it	lt
 801505a:	2600      	movlt	r6, #0
 801505c:	2b00      	cmp	r3, #0
 801505e:	bfb7      	itett	lt
 8015060:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8015064:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8015068:	1a9d      	sublt	r5, r3, r2
 801506a:	2300      	movlt	r3, #0
 801506c:	e734      	b.n	8014ed8 <_dtoa_r+0x720>
 801506e:	9e07      	ldr	r6, [sp, #28]
 8015070:	9d04      	ldr	r5, [sp, #16]
 8015072:	9f08      	ldr	r7, [sp, #32]
 8015074:	e73b      	b.n	8014eee <_dtoa_r+0x736>
 8015076:	9a07      	ldr	r2, [sp, #28]
 8015078:	e767      	b.n	8014f4a <_dtoa_r+0x792>
 801507a:	9b06      	ldr	r3, [sp, #24]
 801507c:	2b01      	cmp	r3, #1
 801507e:	dc18      	bgt.n	80150b2 <_dtoa_r+0x8fa>
 8015080:	f1ba 0f00 	cmp.w	sl, #0
 8015084:	d115      	bne.n	80150b2 <_dtoa_r+0x8fa>
 8015086:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801508a:	b993      	cbnz	r3, 80150b2 <_dtoa_r+0x8fa>
 801508c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8015090:	0d1b      	lsrs	r3, r3, #20
 8015092:	051b      	lsls	r3, r3, #20
 8015094:	b183      	cbz	r3, 80150b8 <_dtoa_r+0x900>
 8015096:	9b04      	ldr	r3, [sp, #16]
 8015098:	3301      	adds	r3, #1
 801509a:	9304      	str	r3, [sp, #16]
 801509c:	9b05      	ldr	r3, [sp, #20]
 801509e:	3301      	adds	r3, #1
 80150a0:	9305      	str	r3, [sp, #20]
 80150a2:	f04f 0801 	mov.w	r8, #1
 80150a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80150a8:	2b00      	cmp	r3, #0
 80150aa:	f47f af6a 	bne.w	8014f82 <_dtoa_r+0x7ca>
 80150ae:	2001      	movs	r0, #1
 80150b0:	e76f      	b.n	8014f92 <_dtoa_r+0x7da>
 80150b2:	f04f 0800 	mov.w	r8, #0
 80150b6:	e7f6      	b.n	80150a6 <_dtoa_r+0x8ee>
 80150b8:	4698      	mov	r8, r3
 80150ba:	e7f4      	b.n	80150a6 <_dtoa_r+0x8ee>
 80150bc:	f43f af7d 	beq.w	8014fba <_dtoa_r+0x802>
 80150c0:	4618      	mov	r0, r3
 80150c2:	301c      	adds	r0, #28
 80150c4:	e772      	b.n	8014fac <_dtoa_r+0x7f4>
 80150c6:	9b03      	ldr	r3, [sp, #12]
 80150c8:	2b00      	cmp	r3, #0
 80150ca:	dc37      	bgt.n	801513c <_dtoa_r+0x984>
 80150cc:	9b06      	ldr	r3, [sp, #24]
 80150ce:	2b02      	cmp	r3, #2
 80150d0:	dd34      	ble.n	801513c <_dtoa_r+0x984>
 80150d2:	9b03      	ldr	r3, [sp, #12]
 80150d4:	9302      	str	r3, [sp, #8]
 80150d6:	9b02      	ldr	r3, [sp, #8]
 80150d8:	b96b      	cbnz	r3, 80150f6 <_dtoa_r+0x93e>
 80150da:	4631      	mov	r1, r6
 80150dc:	2205      	movs	r2, #5
 80150de:	4620      	mov	r0, r4
 80150e0:	f000 fd70 	bl	8015bc4 <__multadd>
 80150e4:	4601      	mov	r1, r0
 80150e6:	4606      	mov	r6, r0
 80150e8:	ee18 0a10 	vmov	r0, s16
 80150ec:	f000 ffd4 	bl	8016098 <__mcmp>
 80150f0:	2800      	cmp	r0, #0
 80150f2:	f73f adbb 	bgt.w	8014c6c <_dtoa_r+0x4b4>
 80150f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80150f8:	9d01      	ldr	r5, [sp, #4]
 80150fa:	43db      	mvns	r3, r3
 80150fc:	9300      	str	r3, [sp, #0]
 80150fe:	f04f 0800 	mov.w	r8, #0
 8015102:	4631      	mov	r1, r6
 8015104:	4620      	mov	r0, r4
 8015106:	f000 fd3b 	bl	8015b80 <_Bfree>
 801510a:	2f00      	cmp	r7, #0
 801510c:	f43f aea4 	beq.w	8014e58 <_dtoa_r+0x6a0>
 8015110:	f1b8 0f00 	cmp.w	r8, #0
 8015114:	d005      	beq.n	8015122 <_dtoa_r+0x96a>
 8015116:	45b8      	cmp	r8, r7
 8015118:	d003      	beq.n	8015122 <_dtoa_r+0x96a>
 801511a:	4641      	mov	r1, r8
 801511c:	4620      	mov	r0, r4
 801511e:	f000 fd2f 	bl	8015b80 <_Bfree>
 8015122:	4639      	mov	r1, r7
 8015124:	4620      	mov	r0, r4
 8015126:	f000 fd2b 	bl	8015b80 <_Bfree>
 801512a:	e695      	b.n	8014e58 <_dtoa_r+0x6a0>
 801512c:	2600      	movs	r6, #0
 801512e:	4637      	mov	r7, r6
 8015130:	e7e1      	b.n	80150f6 <_dtoa_r+0x93e>
 8015132:	9700      	str	r7, [sp, #0]
 8015134:	4637      	mov	r7, r6
 8015136:	e599      	b.n	8014c6c <_dtoa_r+0x4b4>
 8015138:	40240000 	.word	0x40240000
 801513c:	9b08      	ldr	r3, [sp, #32]
 801513e:	2b00      	cmp	r3, #0
 8015140:	f000 80ca 	beq.w	80152d8 <_dtoa_r+0xb20>
 8015144:	9b03      	ldr	r3, [sp, #12]
 8015146:	9302      	str	r3, [sp, #8]
 8015148:	2d00      	cmp	r5, #0
 801514a:	dd05      	ble.n	8015158 <_dtoa_r+0x9a0>
 801514c:	4639      	mov	r1, r7
 801514e:	462a      	mov	r2, r5
 8015150:	4620      	mov	r0, r4
 8015152:	f000 ff31 	bl	8015fb8 <__lshift>
 8015156:	4607      	mov	r7, r0
 8015158:	f1b8 0f00 	cmp.w	r8, #0
 801515c:	d05b      	beq.n	8015216 <_dtoa_r+0xa5e>
 801515e:	6879      	ldr	r1, [r7, #4]
 8015160:	4620      	mov	r0, r4
 8015162:	f000 fccd 	bl	8015b00 <_Balloc>
 8015166:	4605      	mov	r5, r0
 8015168:	b928      	cbnz	r0, 8015176 <_dtoa_r+0x9be>
 801516a:	4b87      	ldr	r3, [pc, #540]	; (8015388 <_dtoa_r+0xbd0>)
 801516c:	4602      	mov	r2, r0
 801516e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8015172:	f7ff bb3b 	b.w	80147ec <_dtoa_r+0x34>
 8015176:	693a      	ldr	r2, [r7, #16]
 8015178:	3202      	adds	r2, #2
 801517a:	0092      	lsls	r2, r2, #2
 801517c:	f107 010c 	add.w	r1, r7, #12
 8015180:	300c      	adds	r0, #12
 8015182:	f7fd fb23 	bl	80127cc <memcpy>
 8015186:	2201      	movs	r2, #1
 8015188:	4629      	mov	r1, r5
 801518a:	4620      	mov	r0, r4
 801518c:	f000 ff14 	bl	8015fb8 <__lshift>
 8015190:	9b01      	ldr	r3, [sp, #4]
 8015192:	f103 0901 	add.w	r9, r3, #1
 8015196:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801519a:	4413      	add	r3, r2
 801519c:	9305      	str	r3, [sp, #20]
 801519e:	f00a 0301 	and.w	r3, sl, #1
 80151a2:	46b8      	mov	r8, r7
 80151a4:	9304      	str	r3, [sp, #16]
 80151a6:	4607      	mov	r7, r0
 80151a8:	4631      	mov	r1, r6
 80151aa:	ee18 0a10 	vmov	r0, s16
 80151ae:	f7ff fa77 	bl	80146a0 <quorem>
 80151b2:	4641      	mov	r1, r8
 80151b4:	9002      	str	r0, [sp, #8]
 80151b6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80151ba:	ee18 0a10 	vmov	r0, s16
 80151be:	f000 ff6b 	bl	8016098 <__mcmp>
 80151c2:	463a      	mov	r2, r7
 80151c4:	9003      	str	r0, [sp, #12]
 80151c6:	4631      	mov	r1, r6
 80151c8:	4620      	mov	r0, r4
 80151ca:	f000 ff81 	bl	80160d0 <__mdiff>
 80151ce:	68c2      	ldr	r2, [r0, #12]
 80151d0:	f109 3bff 	add.w	fp, r9, #4294967295
 80151d4:	4605      	mov	r5, r0
 80151d6:	bb02      	cbnz	r2, 801521a <_dtoa_r+0xa62>
 80151d8:	4601      	mov	r1, r0
 80151da:	ee18 0a10 	vmov	r0, s16
 80151de:	f000 ff5b 	bl	8016098 <__mcmp>
 80151e2:	4602      	mov	r2, r0
 80151e4:	4629      	mov	r1, r5
 80151e6:	4620      	mov	r0, r4
 80151e8:	9207      	str	r2, [sp, #28]
 80151ea:	f000 fcc9 	bl	8015b80 <_Bfree>
 80151ee:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80151f2:	ea43 0102 	orr.w	r1, r3, r2
 80151f6:	9b04      	ldr	r3, [sp, #16]
 80151f8:	430b      	orrs	r3, r1
 80151fa:	464d      	mov	r5, r9
 80151fc:	d10f      	bne.n	801521e <_dtoa_r+0xa66>
 80151fe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8015202:	d02a      	beq.n	801525a <_dtoa_r+0xaa2>
 8015204:	9b03      	ldr	r3, [sp, #12]
 8015206:	2b00      	cmp	r3, #0
 8015208:	dd02      	ble.n	8015210 <_dtoa_r+0xa58>
 801520a:	9b02      	ldr	r3, [sp, #8]
 801520c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8015210:	f88b a000 	strb.w	sl, [fp]
 8015214:	e775      	b.n	8015102 <_dtoa_r+0x94a>
 8015216:	4638      	mov	r0, r7
 8015218:	e7ba      	b.n	8015190 <_dtoa_r+0x9d8>
 801521a:	2201      	movs	r2, #1
 801521c:	e7e2      	b.n	80151e4 <_dtoa_r+0xa2c>
 801521e:	9b03      	ldr	r3, [sp, #12]
 8015220:	2b00      	cmp	r3, #0
 8015222:	db04      	blt.n	801522e <_dtoa_r+0xa76>
 8015224:	9906      	ldr	r1, [sp, #24]
 8015226:	430b      	orrs	r3, r1
 8015228:	9904      	ldr	r1, [sp, #16]
 801522a:	430b      	orrs	r3, r1
 801522c:	d122      	bne.n	8015274 <_dtoa_r+0xabc>
 801522e:	2a00      	cmp	r2, #0
 8015230:	ddee      	ble.n	8015210 <_dtoa_r+0xa58>
 8015232:	ee18 1a10 	vmov	r1, s16
 8015236:	2201      	movs	r2, #1
 8015238:	4620      	mov	r0, r4
 801523a:	f000 febd 	bl	8015fb8 <__lshift>
 801523e:	4631      	mov	r1, r6
 8015240:	ee08 0a10 	vmov	s16, r0
 8015244:	f000 ff28 	bl	8016098 <__mcmp>
 8015248:	2800      	cmp	r0, #0
 801524a:	dc03      	bgt.n	8015254 <_dtoa_r+0xa9c>
 801524c:	d1e0      	bne.n	8015210 <_dtoa_r+0xa58>
 801524e:	f01a 0f01 	tst.w	sl, #1
 8015252:	d0dd      	beq.n	8015210 <_dtoa_r+0xa58>
 8015254:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8015258:	d1d7      	bne.n	801520a <_dtoa_r+0xa52>
 801525a:	2339      	movs	r3, #57	; 0x39
 801525c:	f88b 3000 	strb.w	r3, [fp]
 8015260:	462b      	mov	r3, r5
 8015262:	461d      	mov	r5, r3
 8015264:	3b01      	subs	r3, #1
 8015266:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801526a:	2a39      	cmp	r2, #57	; 0x39
 801526c:	d071      	beq.n	8015352 <_dtoa_r+0xb9a>
 801526e:	3201      	adds	r2, #1
 8015270:	701a      	strb	r2, [r3, #0]
 8015272:	e746      	b.n	8015102 <_dtoa_r+0x94a>
 8015274:	2a00      	cmp	r2, #0
 8015276:	dd07      	ble.n	8015288 <_dtoa_r+0xad0>
 8015278:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801527c:	d0ed      	beq.n	801525a <_dtoa_r+0xaa2>
 801527e:	f10a 0301 	add.w	r3, sl, #1
 8015282:	f88b 3000 	strb.w	r3, [fp]
 8015286:	e73c      	b.n	8015102 <_dtoa_r+0x94a>
 8015288:	9b05      	ldr	r3, [sp, #20]
 801528a:	f809 ac01 	strb.w	sl, [r9, #-1]
 801528e:	4599      	cmp	r9, r3
 8015290:	d047      	beq.n	8015322 <_dtoa_r+0xb6a>
 8015292:	ee18 1a10 	vmov	r1, s16
 8015296:	2300      	movs	r3, #0
 8015298:	220a      	movs	r2, #10
 801529a:	4620      	mov	r0, r4
 801529c:	f000 fc92 	bl	8015bc4 <__multadd>
 80152a0:	45b8      	cmp	r8, r7
 80152a2:	ee08 0a10 	vmov	s16, r0
 80152a6:	f04f 0300 	mov.w	r3, #0
 80152aa:	f04f 020a 	mov.w	r2, #10
 80152ae:	4641      	mov	r1, r8
 80152b0:	4620      	mov	r0, r4
 80152b2:	d106      	bne.n	80152c2 <_dtoa_r+0xb0a>
 80152b4:	f000 fc86 	bl	8015bc4 <__multadd>
 80152b8:	4680      	mov	r8, r0
 80152ba:	4607      	mov	r7, r0
 80152bc:	f109 0901 	add.w	r9, r9, #1
 80152c0:	e772      	b.n	80151a8 <_dtoa_r+0x9f0>
 80152c2:	f000 fc7f 	bl	8015bc4 <__multadd>
 80152c6:	4639      	mov	r1, r7
 80152c8:	4680      	mov	r8, r0
 80152ca:	2300      	movs	r3, #0
 80152cc:	220a      	movs	r2, #10
 80152ce:	4620      	mov	r0, r4
 80152d0:	f000 fc78 	bl	8015bc4 <__multadd>
 80152d4:	4607      	mov	r7, r0
 80152d6:	e7f1      	b.n	80152bc <_dtoa_r+0xb04>
 80152d8:	9b03      	ldr	r3, [sp, #12]
 80152da:	9302      	str	r3, [sp, #8]
 80152dc:	9d01      	ldr	r5, [sp, #4]
 80152de:	ee18 0a10 	vmov	r0, s16
 80152e2:	4631      	mov	r1, r6
 80152e4:	f7ff f9dc 	bl	80146a0 <quorem>
 80152e8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80152ec:	9b01      	ldr	r3, [sp, #4]
 80152ee:	f805 ab01 	strb.w	sl, [r5], #1
 80152f2:	1aea      	subs	r2, r5, r3
 80152f4:	9b02      	ldr	r3, [sp, #8]
 80152f6:	4293      	cmp	r3, r2
 80152f8:	dd09      	ble.n	801530e <_dtoa_r+0xb56>
 80152fa:	ee18 1a10 	vmov	r1, s16
 80152fe:	2300      	movs	r3, #0
 8015300:	220a      	movs	r2, #10
 8015302:	4620      	mov	r0, r4
 8015304:	f000 fc5e 	bl	8015bc4 <__multadd>
 8015308:	ee08 0a10 	vmov	s16, r0
 801530c:	e7e7      	b.n	80152de <_dtoa_r+0xb26>
 801530e:	9b02      	ldr	r3, [sp, #8]
 8015310:	2b00      	cmp	r3, #0
 8015312:	bfc8      	it	gt
 8015314:	461d      	movgt	r5, r3
 8015316:	9b01      	ldr	r3, [sp, #4]
 8015318:	bfd8      	it	le
 801531a:	2501      	movle	r5, #1
 801531c:	441d      	add	r5, r3
 801531e:	f04f 0800 	mov.w	r8, #0
 8015322:	ee18 1a10 	vmov	r1, s16
 8015326:	2201      	movs	r2, #1
 8015328:	4620      	mov	r0, r4
 801532a:	f000 fe45 	bl	8015fb8 <__lshift>
 801532e:	4631      	mov	r1, r6
 8015330:	ee08 0a10 	vmov	s16, r0
 8015334:	f000 feb0 	bl	8016098 <__mcmp>
 8015338:	2800      	cmp	r0, #0
 801533a:	dc91      	bgt.n	8015260 <_dtoa_r+0xaa8>
 801533c:	d102      	bne.n	8015344 <_dtoa_r+0xb8c>
 801533e:	f01a 0f01 	tst.w	sl, #1
 8015342:	d18d      	bne.n	8015260 <_dtoa_r+0xaa8>
 8015344:	462b      	mov	r3, r5
 8015346:	461d      	mov	r5, r3
 8015348:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801534c:	2a30      	cmp	r2, #48	; 0x30
 801534e:	d0fa      	beq.n	8015346 <_dtoa_r+0xb8e>
 8015350:	e6d7      	b.n	8015102 <_dtoa_r+0x94a>
 8015352:	9a01      	ldr	r2, [sp, #4]
 8015354:	429a      	cmp	r2, r3
 8015356:	d184      	bne.n	8015262 <_dtoa_r+0xaaa>
 8015358:	9b00      	ldr	r3, [sp, #0]
 801535a:	3301      	adds	r3, #1
 801535c:	9300      	str	r3, [sp, #0]
 801535e:	2331      	movs	r3, #49	; 0x31
 8015360:	7013      	strb	r3, [r2, #0]
 8015362:	e6ce      	b.n	8015102 <_dtoa_r+0x94a>
 8015364:	4b09      	ldr	r3, [pc, #36]	; (801538c <_dtoa_r+0xbd4>)
 8015366:	f7ff ba95 	b.w	8014894 <_dtoa_r+0xdc>
 801536a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801536c:	2b00      	cmp	r3, #0
 801536e:	f47f aa6e 	bne.w	801484e <_dtoa_r+0x96>
 8015372:	4b07      	ldr	r3, [pc, #28]	; (8015390 <_dtoa_r+0xbd8>)
 8015374:	f7ff ba8e 	b.w	8014894 <_dtoa_r+0xdc>
 8015378:	9b02      	ldr	r3, [sp, #8]
 801537a:	2b00      	cmp	r3, #0
 801537c:	dcae      	bgt.n	80152dc <_dtoa_r+0xb24>
 801537e:	9b06      	ldr	r3, [sp, #24]
 8015380:	2b02      	cmp	r3, #2
 8015382:	f73f aea8 	bgt.w	80150d6 <_dtoa_r+0x91e>
 8015386:	e7a9      	b.n	80152dc <_dtoa_r+0xb24>
 8015388:	0805db99 	.word	0x0805db99
 801538c:	0805dd91 	.word	0x0805dd91
 8015390:	0805db31 	.word	0x0805db31

08015394 <fiprintf>:
 8015394:	b40e      	push	{r1, r2, r3}
 8015396:	b503      	push	{r0, r1, lr}
 8015398:	4601      	mov	r1, r0
 801539a:	ab03      	add	r3, sp, #12
 801539c:	4805      	ldr	r0, [pc, #20]	; (80153b4 <fiprintf+0x20>)
 801539e:	f853 2b04 	ldr.w	r2, [r3], #4
 80153a2:	6800      	ldr	r0, [r0, #0]
 80153a4:	9301      	str	r3, [sp, #4]
 80153a6:	f001 fc09 	bl	8016bbc <_vfiprintf_r>
 80153aa:	b002      	add	sp, #8
 80153ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80153b0:	b003      	add	sp, #12
 80153b2:	4770      	bx	lr
 80153b4:	2000145c 	.word	0x2000145c

080153b8 <rshift>:
 80153b8:	6903      	ldr	r3, [r0, #16]
 80153ba:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80153be:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80153c2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80153c6:	f100 0414 	add.w	r4, r0, #20
 80153ca:	dd45      	ble.n	8015458 <rshift+0xa0>
 80153cc:	f011 011f 	ands.w	r1, r1, #31
 80153d0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80153d4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80153d8:	d10c      	bne.n	80153f4 <rshift+0x3c>
 80153da:	f100 0710 	add.w	r7, r0, #16
 80153de:	4629      	mov	r1, r5
 80153e0:	42b1      	cmp	r1, r6
 80153e2:	d334      	bcc.n	801544e <rshift+0x96>
 80153e4:	1a9b      	subs	r3, r3, r2
 80153e6:	009b      	lsls	r3, r3, #2
 80153e8:	1eea      	subs	r2, r5, #3
 80153ea:	4296      	cmp	r6, r2
 80153ec:	bf38      	it	cc
 80153ee:	2300      	movcc	r3, #0
 80153f0:	4423      	add	r3, r4
 80153f2:	e015      	b.n	8015420 <rshift+0x68>
 80153f4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80153f8:	f1c1 0820 	rsb	r8, r1, #32
 80153fc:	40cf      	lsrs	r7, r1
 80153fe:	f105 0e04 	add.w	lr, r5, #4
 8015402:	46a1      	mov	r9, r4
 8015404:	4576      	cmp	r6, lr
 8015406:	46f4      	mov	ip, lr
 8015408:	d815      	bhi.n	8015436 <rshift+0x7e>
 801540a:	1a9a      	subs	r2, r3, r2
 801540c:	0092      	lsls	r2, r2, #2
 801540e:	3a04      	subs	r2, #4
 8015410:	3501      	adds	r5, #1
 8015412:	42ae      	cmp	r6, r5
 8015414:	bf38      	it	cc
 8015416:	2200      	movcc	r2, #0
 8015418:	18a3      	adds	r3, r4, r2
 801541a:	50a7      	str	r7, [r4, r2]
 801541c:	b107      	cbz	r7, 8015420 <rshift+0x68>
 801541e:	3304      	adds	r3, #4
 8015420:	1b1a      	subs	r2, r3, r4
 8015422:	42a3      	cmp	r3, r4
 8015424:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8015428:	bf08      	it	eq
 801542a:	2300      	moveq	r3, #0
 801542c:	6102      	str	r2, [r0, #16]
 801542e:	bf08      	it	eq
 8015430:	6143      	streq	r3, [r0, #20]
 8015432:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015436:	f8dc c000 	ldr.w	ip, [ip]
 801543a:	fa0c fc08 	lsl.w	ip, ip, r8
 801543e:	ea4c 0707 	orr.w	r7, ip, r7
 8015442:	f849 7b04 	str.w	r7, [r9], #4
 8015446:	f85e 7b04 	ldr.w	r7, [lr], #4
 801544a:	40cf      	lsrs	r7, r1
 801544c:	e7da      	b.n	8015404 <rshift+0x4c>
 801544e:	f851 cb04 	ldr.w	ip, [r1], #4
 8015452:	f847 cf04 	str.w	ip, [r7, #4]!
 8015456:	e7c3      	b.n	80153e0 <rshift+0x28>
 8015458:	4623      	mov	r3, r4
 801545a:	e7e1      	b.n	8015420 <rshift+0x68>

0801545c <__hexdig_fun>:
 801545c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8015460:	2b09      	cmp	r3, #9
 8015462:	d802      	bhi.n	801546a <__hexdig_fun+0xe>
 8015464:	3820      	subs	r0, #32
 8015466:	b2c0      	uxtb	r0, r0
 8015468:	4770      	bx	lr
 801546a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801546e:	2b05      	cmp	r3, #5
 8015470:	d801      	bhi.n	8015476 <__hexdig_fun+0x1a>
 8015472:	3847      	subs	r0, #71	; 0x47
 8015474:	e7f7      	b.n	8015466 <__hexdig_fun+0xa>
 8015476:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801547a:	2b05      	cmp	r3, #5
 801547c:	d801      	bhi.n	8015482 <__hexdig_fun+0x26>
 801547e:	3827      	subs	r0, #39	; 0x27
 8015480:	e7f1      	b.n	8015466 <__hexdig_fun+0xa>
 8015482:	2000      	movs	r0, #0
 8015484:	4770      	bx	lr
	...

08015488 <__gethex>:
 8015488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801548c:	ed2d 8b02 	vpush	{d8}
 8015490:	b089      	sub	sp, #36	; 0x24
 8015492:	ee08 0a10 	vmov	s16, r0
 8015496:	9304      	str	r3, [sp, #16]
 8015498:	4bb4      	ldr	r3, [pc, #720]	; (801576c <__gethex+0x2e4>)
 801549a:	681b      	ldr	r3, [r3, #0]
 801549c:	9301      	str	r3, [sp, #4]
 801549e:	4618      	mov	r0, r3
 80154a0:	468b      	mov	fp, r1
 80154a2:	4690      	mov	r8, r2
 80154a4:	f7ea febe 	bl	8000224 <strlen>
 80154a8:	9b01      	ldr	r3, [sp, #4]
 80154aa:	f8db 2000 	ldr.w	r2, [fp]
 80154ae:	4403      	add	r3, r0
 80154b0:	4682      	mov	sl, r0
 80154b2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80154b6:	9305      	str	r3, [sp, #20]
 80154b8:	1c93      	adds	r3, r2, #2
 80154ba:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80154be:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80154c2:	32fe      	adds	r2, #254	; 0xfe
 80154c4:	18d1      	adds	r1, r2, r3
 80154c6:	461f      	mov	r7, r3
 80154c8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80154cc:	9100      	str	r1, [sp, #0]
 80154ce:	2830      	cmp	r0, #48	; 0x30
 80154d0:	d0f8      	beq.n	80154c4 <__gethex+0x3c>
 80154d2:	f7ff ffc3 	bl	801545c <__hexdig_fun>
 80154d6:	4604      	mov	r4, r0
 80154d8:	2800      	cmp	r0, #0
 80154da:	d13a      	bne.n	8015552 <__gethex+0xca>
 80154dc:	9901      	ldr	r1, [sp, #4]
 80154de:	4652      	mov	r2, sl
 80154e0:	4638      	mov	r0, r7
 80154e2:	f001 fe41 	bl	8017168 <strncmp>
 80154e6:	4605      	mov	r5, r0
 80154e8:	2800      	cmp	r0, #0
 80154ea:	d168      	bne.n	80155be <__gethex+0x136>
 80154ec:	f817 000a 	ldrb.w	r0, [r7, sl]
 80154f0:	eb07 060a 	add.w	r6, r7, sl
 80154f4:	f7ff ffb2 	bl	801545c <__hexdig_fun>
 80154f8:	2800      	cmp	r0, #0
 80154fa:	d062      	beq.n	80155c2 <__gethex+0x13a>
 80154fc:	4633      	mov	r3, r6
 80154fe:	7818      	ldrb	r0, [r3, #0]
 8015500:	2830      	cmp	r0, #48	; 0x30
 8015502:	461f      	mov	r7, r3
 8015504:	f103 0301 	add.w	r3, r3, #1
 8015508:	d0f9      	beq.n	80154fe <__gethex+0x76>
 801550a:	f7ff ffa7 	bl	801545c <__hexdig_fun>
 801550e:	2301      	movs	r3, #1
 8015510:	fab0 f480 	clz	r4, r0
 8015514:	0964      	lsrs	r4, r4, #5
 8015516:	4635      	mov	r5, r6
 8015518:	9300      	str	r3, [sp, #0]
 801551a:	463a      	mov	r2, r7
 801551c:	4616      	mov	r6, r2
 801551e:	3201      	adds	r2, #1
 8015520:	7830      	ldrb	r0, [r6, #0]
 8015522:	f7ff ff9b 	bl	801545c <__hexdig_fun>
 8015526:	2800      	cmp	r0, #0
 8015528:	d1f8      	bne.n	801551c <__gethex+0x94>
 801552a:	9901      	ldr	r1, [sp, #4]
 801552c:	4652      	mov	r2, sl
 801552e:	4630      	mov	r0, r6
 8015530:	f001 fe1a 	bl	8017168 <strncmp>
 8015534:	b980      	cbnz	r0, 8015558 <__gethex+0xd0>
 8015536:	b94d      	cbnz	r5, 801554c <__gethex+0xc4>
 8015538:	eb06 050a 	add.w	r5, r6, sl
 801553c:	462a      	mov	r2, r5
 801553e:	4616      	mov	r6, r2
 8015540:	3201      	adds	r2, #1
 8015542:	7830      	ldrb	r0, [r6, #0]
 8015544:	f7ff ff8a 	bl	801545c <__hexdig_fun>
 8015548:	2800      	cmp	r0, #0
 801554a:	d1f8      	bne.n	801553e <__gethex+0xb6>
 801554c:	1bad      	subs	r5, r5, r6
 801554e:	00ad      	lsls	r5, r5, #2
 8015550:	e004      	b.n	801555c <__gethex+0xd4>
 8015552:	2400      	movs	r4, #0
 8015554:	4625      	mov	r5, r4
 8015556:	e7e0      	b.n	801551a <__gethex+0x92>
 8015558:	2d00      	cmp	r5, #0
 801555a:	d1f7      	bne.n	801554c <__gethex+0xc4>
 801555c:	7833      	ldrb	r3, [r6, #0]
 801555e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8015562:	2b50      	cmp	r3, #80	; 0x50
 8015564:	d13b      	bne.n	80155de <__gethex+0x156>
 8015566:	7873      	ldrb	r3, [r6, #1]
 8015568:	2b2b      	cmp	r3, #43	; 0x2b
 801556a:	d02c      	beq.n	80155c6 <__gethex+0x13e>
 801556c:	2b2d      	cmp	r3, #45	; 0x2d
 801556e:	d02e      	beq.n	80155ce <__gethex+0x146>
 8015570:	1c71      	adds	r1, r6, #1
 8015572:	f04f 0900 	mov.w	r9, #0
 8015576:	7808      	ldrb	r0, [r1, #0]
 8015578:	f7ff ff70 	bl	801545c <__hexdig_fun>
 801557c:	1e43      	subs	r3, r0, #1
 801557e:	b2db      	uxtb	r3, r3
 8015580:	2b18      	cmp	r3, #24
 8015582:	d82c      	bhi.n	80155de <__gethex+0x156>
 8015584:	f1a0 0210 	sub.w	r2, r0, #16
 8015588:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801558c:	f7ff ff66 	bl	801545c <__hexdig_fun>
 8015590:	1e43      	subs	r3, r0, #1
 8015592:	b2db      	uxtb	r3, r3
 8015594:	2b18      	cmp	r3, #24
 8015596:	d91d      	bls.n	80155d4 <__gethex+0x14c>
 8015598:	f1b9 0f00 	cmp.w	r9, #0
 801559c:	d000      	beq.n	80155a0 <__gethex+0x118>
 801559e:	4252      	negs	r2, r2
 80155a0:	4415      	add	r5, r2
 80155a2:	f8cb 1000 	str.w	r1, [fp]
 80155a6:	b1e4      	cbz	r4, 80155e2 <__gethex+0x15a>
 80155a8:	9b00      	ldr	r3, [sp, #0]
 80155aa:	2b00      	cmp	r3, #0
 80155ac:	bf14      	ite	ne
 80155ae:	2700      	movne	r7, #0
 80155b0:	2706      	moveq	r7, #6
 80155b2:	4638      	mov	r0, r7
 80155b4:	b009      	add	sp, #36	; 0x24
 80155b6:	ecbd 8b02 	vpop	{d8}
 80155ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80155be:	463e      	mov	r6, r7
 80155c0:	4625      	mov	r5, r4
 80155c2:	2401      	movs	r4, #1
 80155c4:	e7ca      	b.n	801555c <__gethex+0xd4>
 80155c6:	f04f 0900 	mov.w	r9, #0
 80155ca:	1cb1      	adds	r1, r6, #2
 80155cc:	e7d3      	b.n	8015576 <__gethex+0xee>
 80155ce:	f04f 0901 	mov.w	r9, #1
 80155d2:	e7fa      	b.n	80155ca <__gethex+0x142>
 80155d4:	230a      	movs	r3, #10
 80155d6:	fb03 0202 	mla	r2, r3, r2, r0
 80155da:	3a10      	subs	r2, #16
 80155dc:	e7d4      	b.n	8015588 <__gethex+0x100>
 80155de:	4631      	mov	r1, r6
 80155e0:	e7df      	b.n	80155a2 <__gethex+0x11a>
 80155e2:	1bf3      	subs	r3, r6, r7
 80155e4:	3b01      	subs	r3, #1
 80155e6:	4621      	mov	r1, r4
 80155e8:	2b07      	cmp	r3, #7
 80155ea:	dc0b      	bgt.n	8015604 <__gethex+0x17c>
 80155ec:	ee18 0a10 	vmov	r0, s16
 80155f0:	f000 fa86 	bl	8015b00 <_Balloc>
 80155f4:	4604      	mov	r4, r0
 80155f6:	b940      	cbnz	r0, 801560a <__gethex+0x182>
 80155f8:	4b5d      	ldr	r3, [pc, #372]	; (8015770 <__gethex+0x2e8>)
 80155fa:	4602      	mov	r2, r0
 80155fc:	21de      	movs	r1, #222	; 0xde
 80155fe:	485d      	ldr	r0, [pc, #372]	; (8015774 <__gethex+0x2ec>)
 8015600:	f7ff f820 	bl	8014644 <__assert_func>
 8015604:	3101      	adds	r1, #1
 8015606:	105b      	asrs	r3, r3, #1
 8015608:	e7ee      	b.n	80155e8 <__gethex+0x160>
 801560a:	f100 0914 	add.w	r9, r0, #20
 801560e:	f04f 0b00 	mov.w	fp, #0
 8015612:	f1ca 0301 	rsb	r3, sl, #1
 8015616:	f8cd 9008 	str.w	r9, [sp, #8]
 801561a:	f8cd b000 	str.w	fp, [sp]
 801561e:	9306      	str	r3, [sp, #24]
 8015620:	42b7      	cmp	r7, r6
 8015622:	d340      	bcc.n	80156a6 <__gethex+0x21e>
 8015624:	9802      	ldr	r0, [sp, #8]
 8015626:	9b00      	ldr	r3, [sp, #0]
 8015628:	f840 3b04 	str.w	r3, [r0], #4
 801562c:	eba0 0009 	sub.w	r0, r0, r9
 8015630:	1080      	asrs	r0, r0, #2
 8015632:	0146      	lsls	r6, r0, #5
 8015634:	6120      	str	r0, [r4, #16]
 8015636:	4618      	mov	r0, r3
 8015638:	f000 fb54 	bl	8015ce4 <__hi0bits>
 801563c:	1a30      	subs	r0, r6, r0
 801563e:	f8d8 6000 	ldr.w	r6, [r8]
 8015642:	42b0      	cmp	r0, r6
 8015644:	dd63      	ble.n	801570e <__gethex+0x286>
 8015646:	1b87      	subs	r7, r0, r6
 8015648:	4639      	mov	r1, r7
 801564a:	4620      	mov	r0, r4
 801564c:	f000 fef8 	bl	8016440 <__any_on>
 8015650:	4682      	mov	sl, r0
 8015652:	b1a8      	cbz	r0, 8015680 <__gethex+0x1f8>
 8015654:	1e7b      	subs	r3, r7, #1
 8015656:	1159      	asrs	r1, r3, #5
 8015658:	f003 021f 	and.w	r2, r3, #31
 801565c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8015660:	f04f 0a01 	mov.w	sl, #1
 8015664:	fa0a f202 	lsl.w	r2, sl, r2
 8015668:	420a      	tst	r2, r1
 801566a:	d009      	beq.n	8015680 <__gethex+0x1f8>
 801566c:	4553      	cmp	r3, sl
 801566e:	dd05      	ble.n	801567c <__gethex+0x1f4>
 8015670:	1eb9      	subs	r1, r7, #2
 8015672:	4620      	mov	r0, r4
 8015674:	f000 fee4 	bl	8016440 <__any_on>
 8015678:	2800      	cmp	r0, #0
 801567a:	d145      	bne.n	8015708 <__gethex+0x280>
 801567c:	f04f 0a02 	mov.w	sl, #2
 8015680:	4639      	mov	r1, r7
 8015682:	4620      	mov	r0, r4
 8015684:	f7ff fe98 	bl	80153b8 <rshift>
 8015688:	443d      	add	r5, r7
 801568a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801568e:	42ab      	cmp	r3, r5
 8015690:	da4c      	bge.n	801572c <__gethex+0x2a4>
 8015692:	ee18 0a10 	vmov	r0, s16
 8015696:	4621      	mov	r1, r4
 8015698:	f000 fa72 	bl	8015b80 <_Bfree>
 801569c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801569e:	2300      	movs	r3, #0
 80156a0:	6013      	str	r3, [r2, #0]
 80156a2:	27a3      	movs	r7, #163	; 0xa3
 80156a4:	e785      	b.n	80155b2 <__gethex+0x12a>
 80156a6:	1e73      	subs	r3, r6, #1
 80156a8:	9a05      	ldr	r2, [sp, #20]
 80156aa:	9303      	str	r3, [sp, #12]
 80156ac:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80156b0:	4293      	cmp	r3, r2
 80156b2:	d019      	beq.n	80156e8 <__gethex+0x260>
 80156b4:	f1bb 0f20 	cmp.w	fp, #32
 80156b8:	d107      	bne.n	80156ca <__gethex+0x242>
 80156ba:	9b02      	ldr	r3, [sp, #8]
 80156bc:	9a00      	ldr	r2, [sp, #0]
 80156be:	f843 2b04 	str.w	r2, [r3], #4
 80156c2:	9302      	str	r3, [sp, #8]
 80156c4:	2300      	movs	r3, #0
 80156c6:	9300      	str	r3, [sp, #0]
 80156c8:	469b      	mov	fp, r3
 80156ca:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80156ce:	f7ff fec5 	bl	801545c <__hexdig_fun>
 80156d2:	9b00      	ldr	r3, [sp, #0]
 80156d4:	f000 000f 	and.w	r0, r0, #15
 80156d8:	fa00 f00b 	lsl.w	r0, r0, fp
 80156dc:	4303      	orrs	r3, r0
 80156de:	9300      	str	r3, [sp, #0]
 80156e0:	f10b 0b04 	add.w	fp, fp, #4
 80156e4:	9b03      	ldr	r3, [sp, #12]
 80156e6:	e00d      	b.n	8015704 <__gethex+0x27c>
 80156e8:	9b03      	ldr	r3, [sp, #12]
 80156ea:	9a06      	ldr	r2, [sp, #24]
 80156ec:	4413      	add	r3, r2
 80156ee:	42bb      	cmp	r3, r7
 80156f0:	d3e0      	bcc.n	80156b4 <__gethex+0x22c>
 80156f2:	4618      	mov	r0, r3
 80156f4:	9901      	ldr	r1, [sp, #4]
 80156f6:	9307      	str	r3, [sp, #28]
 80156f8:	4652      	mov	r2, sl
 80156fa:	f001 fd35 	bl	8017168 <strncmp>
 80156fe:	9b07      	ldr	r3, [sp, #28]
 8015700:	2800      	cmp	r0, #0
 8015702:	d1d7      	bne.n	80156b4 <__gethex+0x22c>
 8015704:	461e      	mov	r6, r3
 8015706:	e78b      	b.n	8015620 <__gethex+0x198>
 8015708:	f04f 0a03 	mov.w	sl, #3
 801570c:	e7b8      	b.n	8015680 <__gethex+0x1f8>
 801570e:	da0a      	bge.n	8015726 <__gethex+0x29e>
 8015710:	1a37      	subs	r7, r6, r0
 8015712:	4621      	mov	r1, r4
 8015714:	ee18 0a10 	vmov	r0, s16
 8015718:	463a      	mov	r2, r7
 801571a:	f000 fc4d 	bl	8015fb8 <__lshift>
 801571e:	1bed      	subs	r5, r5, r7
 8015720:	4604      	mov	r4, r0
 8015722:	f100 0914 	add.w	r9, r0, #20
 8015726:	f04f 0a00 	mov.w	sl, #0
 801572a:	e7ae      	b.n	801568a <__gethex+0x202>
 801572c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8015730:	42a8      	cmp	r0, r5
 8015732:	dd72      	ble.n	801581a <__gethex+0x392>
 8015734:	1b45      	subs	r5, r0, r5
 8015736:	42ae      	cmp	r6, r5
 8015738:	dc36      	bgt.n	80157a8 <__gethex+0x320>
 801573a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801573e:	2b02      	cmp	r3, #2
 8015740:	d02a      	beq.n	8015798 <__gethex+0x310>
 8015742:	2b03      	cmp	r3, #3
 8015744:	d02c      	beq.n	80157a0 <__gethex+0x318>
 8015746:	2b01      	cmp	r3, #1
 8015748:	d11c      	bne.n	8015784 <__gethex+0x2fc>
 801574a:	42ae      	cmp	r6, r5
 801574c:	d11a      	bne.n	8015784 <__gethex+0x2fc>
 801574e:	2e01      	cmp	r6, #1
 8015750:	d112      	bne.n	8015778 <__gethex+0x2f0>
 8015752:	9a04      	ldr	r2, [sp, #16]
 8015754:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015758:	6013      	str	r3, [r2, #0]
 801575a:	2301      	movs	r3, #1
 801575c:	6123      	str	r3, [r4, #16]
 801575e:	f8c9 3000 	str.w	r3, [r9]
 8015762:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015764:	2762      	movs	r7, #98	; 0x62
 8015766:	601c      	str	r4, [r3, #0]
 8015768:	e723      	b.n	80155b2 <__gethex+0x12a>
 801576a:	bf00      	nop
 801576c:	0805dc10 	.word	0x0805dc10
 8015770:	0805db99 	.word	0x0805db99
 8015774:	0805dbaa 	.word	0x0805dbaa
 8015778:	1e71      	subs	r1, r6, #1
 801577a:	4620      	mov	r0, r4
 801577c:	f000 fe60 	bl	8016440 <__any_on>
 8015780:	2800      	cmp	r0, #0
 8015782:	d1e6      	bne.n	8015752 <__gethex+0x2ca>
 8015784:	ee18 0a10 	vmov	r0, s16
 8015788:	4621      	mov	r1, r4
 801578a:	f000 f9f9 	bl	8015b80 <_Bfree>
 801578e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015790:	2300      	movs	r3, #0
 8015792:	6013      	str	r3, [r2, #0]
 8015794:	2750      	movs	r7, #80	; 0x50
 8015796:	e70c      	b.n	80155b2 <__gethex+0x12a>
 8015798:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801579a:	2b00      	cmp	r3, #0
 801579c:	d1f2      	bne.n	8015784 <__gethex+0x2fc>
 801579e:	e7d8      	b.n	8015752 <__gethex+0x2ca>
 80157a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80157a2:	2b00      	cmp	r3, #0
 80157a4:	d1d5      	bne.n	8015752 <__gethex+0x2ca>
 80157a6:	e7ed      	b.n	8015784 <__gethex+0x2fc>
 80157a8:	1e6f      	subs	r7, r5, #1
 80157aa:	f1ba 0f00 	cmp.w	sl, #0
 80157ae:	d131      	bne.n	8015814 <__gethex+0x38c>
 80157b0:	b127      	cbz	r7, 80157bc <__gethex+0x334>
 80157b2:	4639      	mov	r1, r7
 80157b4:	4620      	mov	r0, r4
 80157b6:	f000 fe43 	bl	8016440 <__any_on>
 80157ba:	4682      	mov	sl, r0
 80157bc:	117b      	asrs	r3, r7, #5
 80157be:	2101      	movs	r1, #1
 80157c0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80157c4:	f007 071f 	and.w	r7, r7, #31
 80157c8:	fa01 f707 	lsl.w	r7, r1, r7
 80157cc:	421f      	tst	r7, r3
 80157ce:	4629      	mov	r1, r5
 80157d0:	4620      	mov	r0, r4
 80157d2:	bf18      	it	ne
 80157d4:	f04a 0a02 	orrne.w	sl, sl, #2
 80157d8:	1b76      	subs	r6, r6, r5
 80157da:	f7ff fded 	bl	80153b8 <rshift>
 80157de:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80157e2:	2702      	movs	r7, #2
 80157e4:	f1ba 0f00 	cmp.w	sl, #0
 80157e8:	d048      	beq.n	801587c <__gethex+0x3f4>
 80157ea:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80157ee:	2b02      	cmp	r3, #2
 80157f0:	d015      	beq.n	801581e <__gethex+0x396>
 80157f2:	2b03      	cmp	r3, #3
 80157f4:	d017      	beq.n	8015826 <__gethex+0x39e>
 80157f6:	2b01      	cmp	r3, #1
 80157f8:	d109      	bne.n	801580e <__gethex+0x386>
 80157fa:	f01a 0f02 	tst.w	sl, #2
 80157fe:	d006      	beq.n	801580e <__gethex+0x386>
 8015800:	f8d9 0000 	ldr.w	r0, [r9]
 8015804:	ea4a 0a00 	orr.w	sl, sl, r0
 8015808:	f01a 0f01 	tst.w	sl, #1
 801580c:	d10e      	bne.n	801582c <__gethex+0x3a4>
 801580e:	f047 0710 	orr.w	r7, r7, #16
 8015812:	e033      	b.n	801587c <__gethex+0x3f4>
 8015814:	f04f 0a01 	mov.w	sl, #1
 8015818:	e7d0      	b.n	80157bc <__gethex+0x334>
 801581a:	2701      	movs	r7, #1
 801581c:	e7e2      	b.n	80157e4 <__gethex+0x35c>
 801581e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015820:	f1c3 0301 	rsb	r3, r3, #1
 8015824:	9315      	str	r3, [sp, #84]	; 0x54
 8015826:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015828:	2b00      	cmp	r3, #0
 801582a:	d0f0      	beq.n	801580e <__gethex+0x386>
 801582c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8015830:	f104 0314 	add.w	r3, r4, #20
 8015834:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8015838:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801583c:	f04f 0c00 	mov.w	ip, #0
 8015840:	4618      	mov	r0, r3
 8015842:	f853 2b04 	ldr.w	r2, [r3], #4
 8015846:	f1b2 3fff 	cmp.w	r2, #4294967295
 801584a:	d01c      	beq.n	8015886 <__gethex+0x3fe>
 801584c:	3201      	adds	r2, #1
 801584e:	6002      	str	r2, [r0, #0]
 8015850:	2f02      	cmp	r7, #2
 8015852:	f104 0314 	add.w	r3, r4, #20
 8015856:	d13f      	bne.n	80158d8 <__gethex+0x450>
 8015858:	f8d8 2000 	ldr.w	r2, [r8]
 801585c:	3a01      	subs	r2, #1
 801585e:	42b2      	cmp	r2, r6
 8015860:	d10a      	bne.n	8015878 <__gethex+0x3f0>
 8015862:	1171      	asrs	r1, r6, #5
 8015864:	2201      	movs	r2, #1
 8015866:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801586a:	f006 061f 	and.w	r6, r6, #31
 801586e:	fa02 f606 	lsl.w	r6, r2, r6
 8015872:	421e      	tst	r6, r3
 8015874:	bf18      	it	ne
 8015876:	4617      	movne	r7, r2
 8015878:	f047 0720 	orr.w	r7, r7, #32
 801587c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801587e:	601c      	str	r4, [r3, #0]
 8015880:	9b04      	ldr	r3, [sp, #16]
 8015882:	601d      	str	r5, [r3, #0]
 8015884:	e695      	b.n	80155b2 <__gethex+0x12a>
 8015886:	4299      	cmp	r1, r3
 8015888:	f843 cc04 	str.w	ip, [r3, #-4]
 801588c:	d8d8      	bhi.n	8015840 <__gethex+0x3b8>
 801588e:	68a3      	ldr	r3, [r4, #8]
 8015890:	459b      	cmp	fp, r3
 8015892:	db19      	blt.n	80158c8 <__gethex+0x440>
 8015894:	6861      	ldr	r1, [r4, #4]
 8015896:	ee18 0a10 	vmov	r0, s16
 801589a:	3101      	adds	r1, #1
 801589c:	f000 f930 	bl	8015b00 <_Balloc>
 80158a0:	4681      	mov	r9, r0
 80158a2:	b918      	cbnz	r0, 80158ac <__gethex+0x424>
 80158a4:	4b1a      	ldr	r3, [pc, #104]	; (8015910 <__gethex+0x488>)
 80158a6:	4602      	mov	r2, r0
 80158a8:	2184      	movs	r1, #132	; 0x84
 80158aa:	e6a8      	b.n	80155fe <__gethex+0x176>
 80158ac:	6922      	ldr	r2, [r4, #16]
 80158ae:	3202      	adds	r2, #2
 80158b0:	f104 010c 	add.w	r1, r4, #12
 80158b4:	0092      	lsls	r2, r2, #2
 80158b6:	300c      	adds	r0, #12
 80158b8:	f7fc ff88 	bl	80127cc <memcpy>
 80158bc:	4621      	mov	r1, r4
 80158be:	ee18 0a10 	vmov	r0, s16
 80158c2:	f000 f95d 	bl	8015b80 <_Bfree>
 80158c6:	464c      	mov	r4, r9
 80158c8:	6923      	ldr	r3, [r4, #16]
 80158ca:	1c5a      	adds	r2, r3, #1
 80158cc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80158d0:	6122      	str	r2, [r4, #16]
 80158d2:	2201      	movs	r2, #1
 80158d4:	615a      	str	r2, [r3, #20]
 80158d6:	e7bb      	b.n	8015850 <__gethex+0x3c8>
 80158d8:	6922      	ldr	r2, [r4, #16]
 80158da:	455a      	cmp	r2, fp
 80158dc:	dd0b      	ble.n	80158f6 <__gethex+0x46e>
 80158de:	2101      	movs	r1, #1
 80158e0:	4620      	mov	r0, r4
 80158e2:	f7ff fd69 	bl	80153b8 <rshift>
 80158e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80158ea:	3501      	adds	r5, #1
 80158ec:	42ab      	cmp	r3, r5
 80158ee:	f6ff aed0 	blt.w	8015692 <__gethex+0x20a>
 80158f2:	2701      	movs	r7, #1
 80158f4:	e7c0      	b.n	8015878 <__gethex+0x3f0>
 80158f6:	f016 061f 	ands.w	r6, r6, #31
 80158fa:	d0fa      	beq.n	80158f2 <__gethex+0x46a>
 80158fc:	4453      	add	r3, sl
 80158fe:	f1c6 0620 	rsb	r6, r6, #32
 8015902:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8015906:	f000 f9ed 	bl	8015ce4 <__hi0bits>
 801590a:	42b0      	cmp	r0, r6
 801590c:	dbe7      	blt.n	80158de <__gethex+0x456>
 801590e:	e7f0      	b.n	80158f2 <__gethex+0x46a>
 8015910:	0805db99 	.word	0x0805db99

08015914 <L_shift>:
 8015914:	f1c2 0208 	rsb	r2, r2, #8
 8015918:	0092      	lsls	r2, r2, #2
 801591a:	b570      	push	{r4, r5, r6, lr}
 801591c:	f1c2 0620 	rsb	r6, r2, #32
 8015920:	6843      	ldr	r3, [r0, #4]
 8015922:	6804      	ldr	r4, [r0, #0]
 8015924:	fa03 f506 	lsl.w	r5, r3, r6
 8015928:	432c      	orrs	r4, r5
 801592a:	40d3      	lsrs	r3, r2
 801592c:	6004      	str	r4, [r0, #0]
 801592e:	f840 3f04 	str.w	r3, [r0, #4]!
 8015932:	4288      	cmp	r0, r1
 8015934:	d3f4      	bcc.n	8015920 <L_shift+0xc>
 8015936:	bd70      	pop	{r4, r5, r6, pc}

08015938 <__match>:
 8015938:	b530      	push	{r4, r5, lr}
 801593a:	6803      	ldr	r3, [r0, #0]
 801593c:	3301      	adds	r3, #1
 801593e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015942:	b914      	cbnz	r4, 801594a <__match+0x12>
 8015944:	6003      	str	r3, [r0, #0]
 8015946:	2001      	movs	r0, #1
 8015948:	bd30      	pop	{r4, r5, pc}
 801594a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801594e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8015952:	2d19      	cmp	r5, #25
 8015954:	bf98      	it	ls
 8015956:	3220      	addls	r2, #32
 8015958:	42a2      	cmp	r2, r4
 801595a:	d0f0      	beq.n	801593e <__match+0x6>
 801595c:	2000      	movs	r0, #0
 801595e:	e7f3      	b.n	8015948 <__match+0x10>

08015960 <__hexnan>:
 8015960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015964:	680b      	ldr	r3, [r1, #0]
 8015966:	115e      	asrs	r6, r3, #5
 8015968:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801596c:	f013 031f 	ands.w	r3, r3, #31
 8015970:	b087      	sub	sp, #28
 8015972:	bf18      	it	ne
 8015974:	3604      	addne	r6, #4
 8015976:	2500      	movs	r5, #0
 8015978:	1f37      	subs	r7, r6, #4
 801597a:	4690      	mov	r8, r2
 801597c:	6802      	ldr	r2, [r0, #0]
 801597e:	9301      	str	r3, [sp, #4]
 8015980:	4682      	mov	sl, r0
 8015982:	f846 5c04 	str.w	r5, [r6, #-4]
 8015986:	46b9      	mov	r9, r7
 8015988:	463c      	mov	r4, r7
 801598a:	9502      	str	r5, [sp, #8]
 801598c:	46ab      	mov	fp, r5
 801598e:	7851      	ldrb	r1, [r2, #1]
 8015990:	1c53      	adds	r3, r2, #1
 8015992:	9303      	str	r3, [sp, #12]
 8015994:	b341      	cbz	r1, 80159e8 <__hexnan+0x88>
 8015996:	4608      	mov	r0, r1
 8015998:	9205      	str	r2, [sp, #20]
 801599a:	9104      	str	r1, [sp, #16]
 801599c:	f7ff fd5e 	bl	801545c <__hexdig_fun>
 80159a0:	2800      	cmp	r0, #0
 80159a2:	d14f      	bne.n	8015a44 <__hexnan+0xe4>
 80159a4:	9904      	ldr	r1, [sp, #16]
 80159a6:	9a05      	ldr	r2, [sp, #20]
 80159a8:	2920      	cmp	r1, #32
 80159aa:	d818      	bhi.n	80159de <__hexnan+0x7e>
 80159ac:	9b02      	ldr	r3, [sp, #8]
 80159ae:	459b      	cmp	fp, r3
 80159b0:	dd13      	ble.n	80159da <__hexnan+0x7a>
 80159b2:	454c      	cmp	r4, r9
 80159b4:	d206      	bcs.n	80159c4 <__hexnan+0x64>
 80159b6:	2d07      	cmp	r5, #7
 80159b8:	dc04      	bgt.n	80159c4 <__hexnan+0x64>
 80159ba:	462a      	mov	r2, r5
 80159bc:	4649      	mov	r1, r9
 80159be:	4620      	mov	r0, r4
 80159c0:	f7ff ffa8 	bl	8015914 <L_shift>
 80159c4:	4544      	cmp	r4, r8
 80159c6:	d950      	bls.n	8015a6a <__hexnan+0x10a>
 80159c8:	2300      	movs	r3, #0
 80159ca:	f1a4 0904 	sub.w	r9, r4, #4
 80159ce:	f844 3c04 	str.w	r3, [r4, #-4]
 80159d2:	f8cd b008 	str.w	fp, [sp, #8]
 80159d6:	464c      	mov	r4, r9
 80159d8:	461d      	mov	r5, r3
 80159da:	9a03      	ldr	r2, [sp, #12]
 80159dc:	e7d7      	b.n	801598e <__hexnan+0x2e>
 80159de:	2929      	cmp	r1, #41	; 0x29
 80159e0:	d156      	bne.n	8015a90 <__hexnan+0x130>
 80159e2:	3202      	adds	r2, #2
 80159e4:	f8ca 2000 	str.w	r2, [sl]
 80159e8:	f1bb 0f00 	cmp.w	fp, #0
 80159ec:	d050      	beq.n	8015a90 <__hexnan+0x130>
 80159ee:	454c      	cmp	r4, r9
 80159f0:	d206      	bcs.n	8015a00 <__hexnan+0xa0>
 80159f2:	2d07      	cmp	r5, #7
 80159f4:	dc04      	bgt.n	8015a00 <__hexnan+0xa0>
 80159f6:	462a      	mov	r2, r5
 80159f8:	4649      	mov	r1, r9
 80159fa:	4620      	mov	r0, r4
 80159fc:	f7ff ff8a 	bl	8015914 <L_shift>
 8015a00:	4544      	cmp	r4, r8
 8015a02:	d934      	bls.n	8015a6e <__hexnan+0x10e>
 8015a04:	f1a8 0204 	sub.w	r2, r8, #4
 8015a08:	4623      	mov	r3, r4
 8015a0a:	f853 1b04 	ldr.w	r1, [r3], #4
 8015a0e:	f842 1f04 	str.w	r1, [r2, #4]!
 8015a12:	429f      	cmp	r7, r3
 8015a14:	d2f9      	bcs.n	8015a0a <__hexnan+0xaa>
 8015a16:	1b3b      	subs	r3, r7, r4
 8015a18:	f023 0303 	bic.w	r3, r3, #3
 8015a1c:	3304      	adds	r3, #4
 8015a1e:	3401      	adds	r4, #1
 8015a20:	3e03      	subs	r6, #3
 8015a22:	42b4      	cmp	r4, r6
 8015a24:	bf88      	it	hi
 8015a26:	2304      	movhi	r3, #4
 8015a28:	4443      	add	r3, r8
 8015a2a:	2200      	movs	r2, #0
 8015a2c:	f843 2b04 	str.w	r2, [r3], #4
 8015a30:	429f      	cmp	r7, r3
 8015a32:	d2fb      	bcs.n	8015a2c <__hexnan+0xcc>
 8015a34:	683b      	ldr	r3, [r7, #0]
 8015a36:	b91b      	cbnz	r3, 8015a40 <__hexnan+0xe0>
 8015a38:	4547      	cmp	r7, r8
 8015a3a:	d127      	bne.n	8015a8c <__hexnan+0x12c>
 8015a3c:	2301      	movs	r3, #1
 8015a3e:	603b      	str	r3, [r7, #0]
 8015a40:	2005      	movs	r0, #5
 8015a42:	e026      	b.n	8015a92 <__hexnan+0x132>
 8015a44:	3501      	adds	r5, #1
 8015a46:	2d08      	cmp	r5, #8
 8015a48:	f10b 0b01 	add.w	fp, fp, #1
 8015a4c:	dd06      	ble.n	8015a5c <__hexnan+0xfc>
 8015a4e:	4544      	cmp	r4, r8
 8015a50:	d9c3      	bls.n	80159da <__hexnan+0x7a>
 8015a52:	2300      	movs	r3, #0
 8015a54:	f844 3c04 	str.w	r3, [r4, #-4]
 8015a58:	2501      	movs	r5, #1
 8015a5a:	3c04      	subs	r4, #4
 8015a5c:	6822      	ldr	r2, [r4, #0]
 8015a5e:	f000 000f 	and.w	r0, r0, #15
 8015a62:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8015a66:	6022      	str	r2, [r4, #0]
 8015a68:	e7b7      	b.n	80159da <__hexnan+0x7a>
 8015a6a:	2508      	movs	r5, #8
 8015a6c:	e7b5      	b.n	80159da <__hexnan+0x7a>
 8015a6e:	9b01      	ldr	r3, [sp, #4]
 8015a70:	2b00      	cmp	r3, #0
 8015a72:	d0df      	beq.n	8015a34 <__hexnan+0xd4>
 8015a74:	f04f 32ff 	mov.w	r2, #4294967295
 8015a78:	f1c3 0320 	rsb	r3, r3, #32
 8015a7c:	fa22 f303 	lsr.w	r3, r2, r3
 8015a80:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8015a84:	401a      	ands	r2, r3
 8015a86:	f846 2c04 	str.w	r2, [r6, #-4]
 8015a8a:	e7d3      	b.n	8015a34 <__hexnan+0xd4>
 8015a8c:	3f04      	subs	r7, #4
 8015a8e:	e7d1      	b.n	8015a34 <__hexnan+0xd4>
 8015a90:	2004      	movs	r0, #4
 8015a92:	b007      	add	sp, #28
 8015a94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015a98 <_localeconv_r>:
 8015a98:	4800      	ldr	r0, [pc, #0]	; (8015a9c <_localeconv_r+0x4>)
 8015a9a:	4770      	bx	lr
 8015a9c:	200015b4 	.word	0x200015b4

08015aa0 <_lseek_r>:
 8015aa0:	b538      	push	{r3, r4, r5, lr}
 8015aa2:	4d07      	ldr	r5, [pc, #28]	; (8015ac0 <_lseek_r+0x20>)
 8015aa4:	4604      	mov	r4, r0
 8015aa6:	4608      	mov	r0, r1
 8015aa8:	4611      	mov	r1, r2
 8015aaa:	2200      	movs	r2, #0
 8015aac:	602a      	str	r2, [r5, #0]
 8015aae:	461a      	mov	r2, r3
 8015ab0:	f002 ff08 	bl	80188c4 <_lseek>
 8015ab4:	1c43      	adds	r3, r0, #1
 8015ab6:	d102      	bne.n	8015abe <_lseek_r+0x1e>
 8015ab8:	682b      	ldr	r3, [r5, #0]
 8015aba:	b103      	cbz	r3, 8015abe <_lseek_r+0x1e>
 8015abc:	6023      	str	r3, [r4, #0]
 8015abe:	bd38      	pop	{r3, r4, r5, pc}
 8015ac0:	2000c670 	.word	0x2000c670

08015ac4 <__ascii_mbtowc>:
 8015ac4:	b082      	sub	sp, #8
 8015ac6:	b901      	cbnz	r1, 8015aca <__ascii_mbtowc+0x6>
 8015ac8:	a901      	add	r1, sp, #4
 8015aca:	b142      	cbz	r2, 8015ade <__ascii_mbtowc+0x1a>
 8015acc:	b14b      	cbz	r3, 8015ae2 <__ascii_mbtowc+0x1e>
 8015ace:	7813      	ldrb	r3, [r2, #0]
 8015ad0:	600b      	str	r3, [r1, #0]
 8015ad2:	7812      	ldrb	r2, [r2, #0]
 8015ad4:	1e10      	subs	r0, r2, #0
 8015ad6:	bf18      	it	ne
 8015ad8:	2001      	movne	r0, #1
 8015ada:	b002      	add	sp, #8
 8015adc:	4770      	bx	lr
 8015ade:	4610      	mov	r0, r2
 8015ae0:	e7fb      	b.n	8015ada <__ascii_mbtowc+0x16>
 8015ae2:	f06f 0001 	mvn.w	r0, #1
 8015ae6:	e7f8      	b.n	8015ada <__ascii_mbtowc+0x16>

08015ae8 <__malloc_lock>:
 8015ae8:	4801      	ldr	r0, [pc, #4]	; (8015af0 <__malloc_lock+0x8>)
 8015aea:	f001 be8d 	b.w	8017808 <__retarget_lock_acquire_recursive>
 8015aee:	bf00      	nop
 8015af0:	2000c674 	.word	0x2000c674

08015af4 <__malloc_unlock>:
 8015af4:	4801      	ldr	r0, [pc, #4]	; (8015afc <__malloc_unlock+0x8>)
 8015af6:	f001 be88 	b.w	801780a <__retarget_lock_release_recursive>
 8015afa:	bf00      	nop
 8015afc:	2000c674 	.word	0x2000c674

08015b00 <_Balloc>:
 8015b00:	b570      	push	{r4, r5, r6, lr}
 8015b02:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015b04:	4604      	mov	r4, r0
 8015b06:	460d      	mov	r5, r1
 8015b08:	b976      	cbnz	r6, 8015b28 <_Balloc+0x28>
 8015b0a:	2010      	movs	r0, #16
 8015b0c:	f7fc fe56 	bl	80127bc <malloc>
 8015b10:	4602      	mov	r2, r0
 8015b12:	6260      	str	r0, [r4, #36]	; 0x24
 8015b14:	b920      	cbnz	r0, 8015b20 <_Balloc+0x20>
 8015b16:	4b18      	ldr	r3, [pc, #96]	; (8015b78 <_Balloc+0x78>)
 8015b18:	4818      	ldr	r0, [pc, #96]	; (8015b7c <_Balloc+0x7c>)
 8015b1a:	2166      	movs	r1, #102	; 0x66
 8015b1c:	f7fe fd92 	bl	8014644 <__assert_func>
 8015b20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015b24:	6006      	str	r6, [r0, #0]
 8015b26:	60c6      	str	r6, [r0, #12]
 8015b28:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8015b2a:	68f3      	ldr	r3, [r6, #12]
 8015b2c:	b183      	cbz	r3, 8015b50 <_Balloc+0x50>
 8015b2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015b30:	68db      	ldr	r3, [r3, #12]
 8015b32:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015b36:	b9b8      	cbnz	r0, 8015b68 <_Balloc+0x68>
 8015b38:	2101      	movs	r1, #1
 8015b3a:	fa01 f605 	lsl.w	r6, r1, r5
 8015b3e:	1d72      	adds	r2, r6, #5
 8015b40:	0092      	lsls	r2, r2, #2
 8015b42:	4620      	mov	r0, r4
 8015b44:	f000 fc9d 	bl	8016482 <_calloc_r>
 8015b48:	b160      	cbz	r0, 8015b64 <_Balloc+0x64>
 8015b4a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8015b4e:	e00e      	b.n	8015b6e <_Balloc+0x6e>
 8015b50:	2221      	movs	r2, #33	; 0x21
 8015b52:	2104      	movs	r1, #4
 8015b54:	4620      	mov	r0, r4
 8015b56:	f000 fc94 	bl	8016482 <_calloc_r>
 8015b5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015b5c:	60f0      	str	r0, [r6, #12]
 8015b5e:	68db      	ldr	r3, [r3, #12]
 8015b60:	2b00      	cmp	r3, #0
 8015b62:	d1e4      	bne.n	8015b2e <_Balloc+0x2e>
 8015b64:	2000      	movs	r0, #0
 8015b66:	bd70      	pop	{r4, r5, r6, pc}
 8015b68:	6802      	ldr	r2, [r0, #0]
 8015b6a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015b6e:	2300      	movs	r3, #0
 8015b70:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015b74:	e7f7      	b.n	8015b66 <_Balloc+0x66>
 8015b76:	bf00      	nop
 8015b78:	0805d980 	.word	0x0805d980
 8015b7c:	0805dc24 	.word	0x0805dc24

08015b80 <_Bfree>:
 8015b80:	b570      	push	{r4, r5, r6, lr}
 8015b82:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015b84:	4605      	mov	r5, r0
 8015b86:	460c      	mov	r4, r1
 8015b88:	b976      	cbnz	r6, 8015ba8 <_Bfree+0x28>
 8015b8a:	2010      	movs	r0, #16
 8015b8c:	f7fc fe16 	bl	80127bc <malloc>
 8015b90:	4602      	mov	r2, r0
 8015b92:	6268      	str	r0, [r5, #36]	; 0x24
 8015b94:	b920      	cbnz	r0, 8015ba0 <_Bfree+0x20>
 8015b96:	4b09      	ldr	r3, [pc, #36]	; (8015bbc <_Bfree+0x3c>)
 8015b98:	4809      	ldr	r0, [pc, #36]	; (8015bc0 <_Bfree+0x40>)
 8015b9a:	218a      	movs	r1, #138	; 0x8a
 8015b9c:	f7fe fd52 	bl	8014644 <__assert_func>
 8015ba0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015ba4:	6006      	str	r6, [r0, #0]
 8015ba6:	60c6      	str	r6, [r0, #12]
 8015ba8:	b13c      	cbz	r4, 8015bba <_Bfree+0x3a>
 8015baa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8015bac:	6862      	ldr	r2, [r4, #4]
 8015bae:	68db      	ldr	r3, [r3, #12]
 8015bb0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015bb4:	6021      	str	r1, [r4, #0]
 8015bb6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8015bba:	bd70      	pop	{r4, r5, r6, pc}
 8015bbc:	0805d980 	.word	0x0805d980
 8015bc0:	0805dc24 	.word	0x0805dc24

08015bc4 <__multadd>:
 8015bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015bc8:	690d      	ldr	r5, [r1, #16]
 8015bca:	4607      	mov	r7, r0
 8015bcc:	460c      	mov	r4, r1
 8015bce:	461e      	mov	r6, r3
 8015bd0:	f101 0c14 	add.w	ip, r1, #20
 8015bd4:	2000      	movs	r0, #0
 8015bd6:	f8dc 3000 	ldr.w	r3, [ip]
 8015bda:	b299      	uxth	r1, r3
 8015bdc:	fb02 6101 	mla	r1, r2, r1, r6
 8015be0:	0c1e      	lsrs	r6, r3, #16
 8015be2:	0c0b      	lsrs	r3, r1, #16
 8015be4:	fb02 3306 	mla	r3, r2, r6, r3
 8015be8:	b289      	uxth	r1, r1
 8015bea:	3001      	adds	r0, #1
 8015bec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8015bf0:	4285      	cmp	r5, r0
 8015bf2:	f84c 1b04 	str.w	r1, [ip], #4
 8015bf6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8015bfa:	dcec      	bgt.n	8015bd6 <__multadd+0x12>
 8015bfc:	b30e      	cbz	r6, 8015c42 <__multadd+0x7e>
 8015bfe:	68a3      	ldr	r3, [r4, #8]
 8015c00:	42ab      	cmp	r3, r5
 8015c02:	dc19      	bgt.n	8015c38 <__multadd+0x74>
 8015c04:	6861      	ldr	r1, [r4, #4]
 8015c06:	4638      	mov	r0, r7
 8015c08:	3101      	adds	r1, #1
 8015c0a:	f7ff ff79 	bl	8015b00 <_Balloc>
 8015c0e:	4680      	mov	r8, r0
 8015c10:	b928      	cbnz	r0, 8015c1e <__multadd+0x5a>
 8015c12:	4602      	mov	r2, r0
 8015c14:	4b0c      	ldr	r3, [pc, #48]	; (8015c48 <__multadd+0x84>)
 8015c16:	480d      	ldr	r0, [pc, #52]	; (8015c4c <__multadd+0x88>)
 8015c18:	21b5      	movs	r1, #181	; 0xb5
 8015c1a:	f7fe fd13 	bl	8014644 <__assert_func>
 8015c1e:	6922      	ldr	r2, [r4, #16]
 8015c20:	3202      	adds	r2, #2
 8015c22:	f104 010c 	add.w	r1, r4, #12
 8015c26:	0092      	lsls	r2, r2, #2
 8015c28:	300c      	adds	r0, #12
 8015c2a:	f7fc fdcf 	bl	80127cc <memcpy>
 8015c2e:	4621      	mov	r1, r4
 8015c30:	4638      	mov	r0, r7
 8015c32:	f7ff ffa5 	bl	8015b80 <_Bfree>
 8015c36:	4644      	mov	r4, r8
 8015c38:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015c3c:	3501      	adds	r5, #1
 8015c3e:	615e      	str	r6, [r3, #20]
 8015c40:	6125      	str	r5, [r4, #16]
 8015c42:	4620      	mov	r0, r4
 8015c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c48:	0805db99 	.word	0x0805db99
 8015c4c:	0805dc24 	.word	0x0805dc24

08015c50 <__s2b>:
 8015c50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015c54:	460c      	mov	r4, r1
 8015c56:	4615      	mov	r5, r2
 8015c58:	461f      	mov	r7, r3
 8015c5a:	2209      	movs	r2, #9
 8015c5c:	3308      	adds	r3, #8
 8015c5e:	4606      	mov	r6, r0
 8015c60:	fb93 f3f2 	sdiv	r3, r3, r2
 8015c64:	2100      	movs	r1, #0
 8015c66:	2201      	movs	r2, #1
 8015c68:	429a      	cmp	r2, r3
 8015c6a:	db09      	blt.n	8015c80 <__s2b+0x30>
 8015c6c:	4630      	mov	r0, r6
 8015c6e:	f7ff ff47 	bl	8015b00 <_Balloc>
 8015c72:	b940      	cbnz	r0, 8015c86 <__s2b+0x36>
 8015c74:	4602      	mov	r2, r0
 8015c76:	4b19      	ldr	r3, [pc, #100]	; (8015cdc <__s2b+0x8c>)
 8015c78:	4819      	ldr	r0, [pc, #100]	; (8015ce0 <__s2b+0x90>)
 8015c7a:	21ce      	movs	r1, #206	; 0xce
 8015c7c:	f7fe fce2 	bl	8014644 <__assert_func>
 8015c80:	0052      	lsls	r2, r2, #1
 8015c82:	3101      	adds	r1, #1
 8015c84:	e7f0      	b.n	8015c68 <__s2b+0x18>
 8015c86:	9b08      	ldr	r3, [sp, #32]
 8015c88:	6143      	str	r3, [r0, #20]
 8015c8a:	2d09      	cmp	r5, #9
 8015c8c:	f04f 0301 	mov.w	r3, #1
 8015c90:	6103      	str	r3, [r0, #16]
 8015c92:	dd16      	ble.n	8015cc2 <__s2b+0x72>
 8015c94:	f104 0909 	add.w	r9, r4, #9
 8015c98:	46c8      	mov	r8, r9
 8015c9a:	442c      	add	r4, r5
 8015c9c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8015ca0:	4601      	mov	r1, r0
 8015ca2:	3b30      	subs	r3, #48	; 0x30
 8015ca4:	220a      	movs	r2, #10
 8015ca6:	4630      	mov	r0, r6
 8015ca8:	f7ff ff8c 	bl	8015bc4 <__multadd>
 8015cac:	45a0      	cmp	r8, r4
 8015cae:	d1f5      	bne.n	8015c9c <__s2b+0x4c>
 8015cb0:	f1a5 0408 	sub.w	r4, r5, #8
 8015cb4:	444c      	add	r4, r9
 8015cb6:	1b2d      	subs	r5, r5, r4
 8015cb8:	1963      	adds	r3, r4, r5
 8015cba:	42bb      	cmp	r3, r7
 8015cbc:	db04      	blt.n	8015cc8 <__s2b+0x78>
 8015cbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015cc2:	340a      	adds	r4, #10
 8015cc4:	2509      	movs	r5, #9
 8015cc6:	e7f6      	b.n	8015cb6 <__s2b+0x66>
 8015cc8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8015ccc:	4601      	mov	r1, r0
 8015cce:	3b30      	subs	r3, #48	; 0x30
 8015cd0:	220a      	movs	r2, #10
 8015cd2:	4630      	mov	r0, r6
 8015cd4:	f7ff ff76 	bl	8015bc4 <__multadd>
 8015cd8:	e7ee      	b.n	8015cb8 <__s2b+0x68>
 8015cda:	bf00      	nop
 8015cdc:	0805db99 	.word	0x0805db99
 8015ce0:	0805dc24 	.word	0x0805dc24

08015ce4 <__hi0bits>:
 8015ce4:	0c03      	lsrs	r3, r0, #16
 8015ce6:	041b      	lsls	r3, r3, #16
 8015ce8:	b9d3      	cbnz	r3, 8015d20 <__hi0bits+0x3c>
 8015cea:	0400      	lsls	r0, r0, #16
 8015cec:	2310      	movs	r3, #16
 8015cee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8015cf2:	bf04      	itt	eq
 8015cf4:	0200      	lsleq	r0, r0, #8
 8015cf6:	3308      	addeq	r3, #8
 8015cf8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8015cfc:	bf04      	itt	eq
 8015cfe:	0100      	lsleq	r0, r0, #4
 8015d00:	3304      	addeq	r3, #4
 8015d02:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8015d06:	bf04      	itt	eq
 8015d08:	0080      	lsleq	r0, r0, #2
 8015d0a:	3302      	addeq	r3, #2
 8015d0c:	2800      	cmp	r0, #0
 8015d0e:	db05      	blt.n	8015d1c <__hi0bits+0x38>
 8015d10:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8015d14:	f103 0301 	add.w	r3, r3, #1
 8015d18:	bf08      	it	eq
 8015d1a:	2320      	moveq	r3, #32
 8015d1c:	4618      	mov	r0, r3
 8015d1e:	4770      	bx	lr
 8015d20:	2300      	movs	r3, #0
 8015d22:	e7e4      	b.n	8015cee <__hi0bits+0xa>

08015d24 <__lo0bits>:
 8015d24:	6803      	ldr	r3, [r0, #0]
 8015d26:	f013 0207 	ands.w	r2, r3, #7
 8015d2a:	4601      	mov	r1, r0
 8015d2c:	d00b      	beq.n	8015d46 <__lo0bits+0x22>
 8015d2e:	07da      	lsls	r2, r3, #31
 8015d30:	d423      	bmi.n	8015d7a <__lo0bits+0x56>
 8015d32:	0798      	lsls	r0, r3, #30
 8015d34:	bf49      	itett	mi
 8015d36:	085b      	lsrmi	r3, r3, #1
 8015d38:	089b      	lsrpl	r3, r3, #2
 8015d3a:	2001      	movmi	r0, #1
 8015d3c:	600b      	strmi	r3, [r1, #0]
 8015d3e:	bf5c      	itt	pl
 8015d40:	600b      	strpl	r3, [r1, #0]
 8015d42:	2002      	movpl	r0, #2
 8015d44:	4770      	bx	lr
 8015d46:	b298      	uxth	r0, r3
 8015d48:	b9a8      	cbnz	r0, 8015d76 <__lo0bits+0x52>
 8015d4a:	0c1b      	lsrs	r3, r3, #16
 8015d4c:	2010      	movs	r0, #16
 8015d4e:	b2da      	uxtb	r2, r3
 8015d50:	b90a      	cbnz	r2, 8015d56 <__lo0bits+0x32>
 8015d52:	3008      	adds	r0, #8
 8015d54:	0a1b      	lsrs	r3, r3, #8
 8015d56:	071a      	lsls	r2, r3, #28
 8015d58:	bf04      	itt	eq
 8015d5a:	091b      	lsreq	r3, r3, #4
 8015d5c:	3004      	addeq	r0, #4
 8015d5e:	079a      	lsls	r2, r3, #30
 8015d60:	bf04      	itt	eq
 8015d62:	089b      	lsreq	r3, r3, #2
 8015d64:	3002      	addeq	r0, #2
 8015d66:	07da      	lsls	r2, r3, #31
 8015d68:	d403      	bmi.n	8015d72 <__lo0bits+0x4e>
 8015d6a:	085b      	lsrs	r3, r3, #1
 8015d6c:	f100 0001 	add.w	r0, r0, #1
 8015d70:	d005      	beq.n	8015d7e <__lo0bits+0x5a>
 8015d72:	600b      	str	r3, [r1, #0]
 8015d74:	4770      	bx	lr
 8015d76:	4610      	mov	r0, r2
 8015d78:	e7e9      	b.n	8015d4e <__lo0bits+0x2a>
 8015d7a:	2000      	movs	r0, #0
 8015d7c:	4770      	bx	lr
 8015d7e:	2020      	movs	r0, #32
 8015d80:	4770      	bx	lr
	...

08015d84 <__i2b>:
 8015d84:	b510      	push	{r4, lr}
 8015d86:	460c      	mov	r4, r1
 8015d88:	2101      	movs	r1, #1
 8015d8a:	f7ff feb9 	bl	8015b00 <_Balloc>
 8015d8e:	4602      	mov	r2, r0
 8015d90:	b928      	cbnz	r0, 8015d9e <__i2b+0x1a>
 8015d92:	4b05      	ldr	r3, [pc, #20]	; (8015da8 <__i2b+0x24>)
 8015d94:	4805      	ldr	r0, [pc, #20]	; (8015dac <__i2b+0x28>)
 8015d96:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8015d9a:	f7fe fc53 	bl	8014644 <__assert_func>
 8015d9e:	2301      	movs	r3, #1
 8015da0:	6144      	str	r4, [r0, #20]
 8015da2:	6103      	str	r3, [r0, #16]
 8015da4:	bd10      	pop	{r4, pc}
 8015da6:	bf00      	nop
 8015da8:	0805db99 	.word	0x0805db99
 8015dac:	0805dc24 	.word	0x0805dc24

08015db0 <__multiply>:
 8015db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015db4:	4691      	mov	r9, r2
 8015db6:	690a      	ldr	r2, [r1, #16]
 8015db8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015dbc:	429a      	cmp	r2, r3
 8015dbe:	bfb8      	it	lt
 8015dc0:	460b      	movlt	r3, r1
 8015dc2:	460c      	mov	r4, r1
 8015dc4:	bfbc      	itt	lt
 8015dc6:	464c      	movlt	r4, r9
 8015dc8:	4699      	movlt	r9, r3
 8015dca:	6927      	ldr	r7, [r4, #16]
 8015dcc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8015dd0:	68a3      	ldr	r3, [r4, #8]
 8015dd2:	6861      	ldr	r1, [r4, #4]
 8015dd4:	eb07 060a 	add.w	r6, r7, sl
 8015dd8:	42b3      	cmp	r3, r6
 8015dda:	b085      	sub	sp, #20
 8015ddc:	bfb8      	it	lt
 8015dde:	3101      	addlt	r1, #1
 8015de0:	f7ff fe8e 	bl	8015b00 <_Balloc>
 8015de4:	b930      	cbnz	r0, 8015df4 <__multiply+0x44>
 8015de6:	4602      	mov	r2, r0
 8015de8:	4b44      	ldr	r3, [pc, #272]	; (8015efc <__multiply+0x14c>)
 8015dea:	4845      	ldr	r0, [pc, #276]	; (8015f00 <__multiply+0x150>)
 8015dec:	f240 115d 	movw	r1, #349	; 0x15d
 8015df0:	f7fe fc28 	bl	8014644 <__assert_func>
 8015df4:	f100 0514 	add.w	r5, r0, #20
 8015df8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8015dfc:	462b      	mov	r3, r5
 8015dfe:	2200      	movs	r2, #0
 8015e00:	4543      	cmp	r3, r8
 8015e02:	d321      	bcc.n	8015e48 <__multiply+0x98>
 8015e04:	f104 0314 	add.w	r3, r4, #20
 8015e08:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8015e0c:	f109 0314 	add.w	r3, r9, #20
 8015e10:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8015e14:	9202      	str	r2, [sp, #8]
 8015e16:	1b3a      	subs	r2, r7, r4
 8015e18:	3a15      	subs	r2, #21
 8015e1a:	f022 0203 	bic.w	r2, r2, #3
 8015e1e:	3204      	adds	r2, #4
 8015e20:	f104 0115 	add.w	r1, r4, #21
 8015e24:	428f      	cmp	r7, r1
 8015e26:	bf38      	it	cc
 8015e28:	2204      	movcc	r2, #4
 8015e2a:	9201      	str	r2, [sp, #4]
 8015e2c:	9a02      	ldr	r2, [sp, #8]
 8015e2e:	9303      	str	r3, [sp, #12]
 8015e30:	429a      	cmp	r2, r3
 8015e32:	d80c      	bhi.n	8015e4e <__multiply+0x9e>
 8015e34:	2e00      	cmp	r6, #0
 8015e36:	dd03      	ble.n	8015e40 <__multiply+0x90>
 8015e38:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8015e3c:	2b00      	cmp	r3, #0
 8015e3e:	d05a      	beq.n	8015ef6 <__multiply+0x146>
 8015e40:	6106      	str	r6, [r0, #16]
 8015e42:	b005      	add	sp, #20
 8015e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e48:	f843 2b04 	str.w	r2, [r3], #4
 8015e4c:	e7d8      	b.n	8015e00 <__multiply+0x50>
 8015e4e:	f8b3 a000 	ldrh.w	sl, [r3]
 8015e52:	f1ba 0f00 	cmp.w	sl, #0
 8015e56:	d024      	beq.n	8015ea2 <__multiply+0xf2>
 8015e58:	f104 0e14 	add.w	lr, r4, #20
 8015e5c:	46a9      	mov	r9, r5
 8015e5e:	f04f 0c00 	mov.w	ip, #0
 8015e62:	f85e 2b04 	ldr.w	r2, [lr], #4
 8015e66:	f8d9 1000 	ldr.w	r1, [r9]
 8015e6a:	fa1f fb82 	uxth.w	fp, r2
 8015e6e:	b289      	uxth	r1, r1
 8015e70:	fb0a 110b 	mla	r1, sl, fp, r1
 8015e74:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8015e78:	f8d9 2000 	ldr.w	r2, [r9]
 8015e7c:	4461      	add	r1, ip
 8015e7e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8015e82:	fb0a c20b 	mla	r2, sl, fp, ip
 8015e86:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8015e8a:	b289      	uxth	r1, r1
 8015e8c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8015e90:	4577      	cmp	r7, lr
 8015e92:	f849 1b04 	str.w	r1, [r9], #4
 8015e96:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8015e9a:	d8e2      	bhi.n	8015e62 <__multiply+0xb2>
 8015e9c:	9a01      	ldr	r2, [sp, #4]
 8015e9e:	f845 c002 	str.w	ip, [r5, r2]
 8015ea2:	9a03      	ldr	r2, [sp, #12]
 8015ea4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8015ea8:	3304      	adds	r3, #4
 8015eaa:	f1b9 0f00 	cmp.w	r9, #0
 8015eae:	d020      	beq.n	8015ef2 <__multiply+0x142>
 8015eb0:	6829      	ldr	r1, [r5, #0]
 8015eb2:	f104 0c14 	add.w	ip, r4, #20
 8015eb6:	46ae      	mov	lr, r5
 8015eb8:	f04f 0a00 	mov.w	sl, #0
 8015ebc:	f8bc b000 	ldrh.w	fp, [ip]
 8015ec0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8015ec4:	fb09 220b 	mla	r2, r9, fp, r2
 8015ec8:	4492      	add	sl, r2
 8015eca:	b289      	uxth	r1, r1
 8015ecc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8015ed0:	f84e 1b04 	str.w	r1, [lr], #4
 8015ed4:	f85c 2b04 	ldr.w	r2, [ip], #4
 8015ed8:	f8be 1000 	ldrh.w	r1, [lr]
 8015edc:	0c12      	lsrs	r2, r2, #16
 8015ede:	fb09 1102 	mla	r1, r9, r2, r1
 8015ee2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8015ee6:	4567      	cmp	r7, ip
 8015ee8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8015eec:	d8e6      	bhi.n	8015ebc <__multiply+0x10c>
 8015eee:	9a01      	ldr	r2, [sp, #4]
 8015ef0:	50a9      	str	r1, [r5, r2]
 8015ef2:	3504      	adds	r5, #4
 8015ef4:	e79a      	b.n	8015e2c <__multiply+0x7c>
 8015ef6:	3e01      	subs	r6, #1
 8015ef8:	e79c      	b.n	8015e34 <__multiply+0x84>
 8015efa:	bf00      	nop
 8015efc:	0805db99 	.word	0x0805db99
 8015f00:	0805dc24 	.word	0x0805dc24

08015f04 <__pow5mult>:
 8015f04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015f08:	4615      	mov	r5, r2
 8015f0a:	f012 0203 	ands.w	r2, r2, #3
 8015f0e:	4606      	mov	r6, r0
 8015f10:	460f      	mov	r7, r1
 8015f12:	d007      	beq.n	8015f24 <__pow5mult+0x20>
 8015f14:	4c25      	ldr	r4, [pc, #148]	; (8015fac <__pow5mult+0xa8>)
 8015f16:	3a01      	subs	r2, #1
 8015f18:	2300      	movs	r3, #0
 8015f1a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015f1e:	f7ff fe51 	bl	8015bc4 <__multadd>
 8015f22:	4607      	mov	r7, r0
 8015f24:	10ad      	asrs	r5, r5, #2
 8015f26:	d03d      	beq.n	8015fa4 <__pow5mult+0xa0>
 8015f28:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8015f2a:	b97c      	cbnz	r4, 8015f4c <__pow5mult+0x48>
 8015f2c:	2010      	movs	r0, #16
 8015f2e:	f7fc fc45 	bl	80127bc <malloc>
 8015f32:	4602      	mov	r2, r0
 8015f34:	6270      	str	r0, [r6, #36]	; 0x24
 8015f36:	b928      	cbnz	r0, 8015f44 <__pow5mult+0x40>
 8015f38:	4b1d      	ldr	r3, [pc, #116]	; (8015fb0 <__pow5mult+0xac>)
 8015f3a:	481e      	ldr	r0, [pc, #120]	; (8015fb4 <__pow5mult+0xb0>)
 8015f3c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8015f40:	f7fe fb80 	bl	8014644 <__assert_func>
 8015f44:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015f48:	6004      	str	r4, [r0, #0]
 8015f4a:	60c4      	str	r4, [r0, #12]
 8015f4c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8015f50:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015f54:	b94c      	cbnz	r4, 8015f6a <__pow5mult+0x66>
 8015f56:	f240 2171 	movw	r1, #625	; 0x271
 8015f5a:	4630      	mov	r0, r6
 8015f5c:	f7ff ff12 	bl	8015d84 <__i2b>
 8015f60:	2300      	movs	r3, #0
 8015f62:	f8c8 0008 	str.w	r0, [r8, #8]
 8015f66:	4604      	mov	r4, r0
 8015f68:	6003      	str	r3, [r0, #0]
 8015f6a:	f04f 0900 	mov.w	r9, #0
 8015f6e:	07eb      	lsls	r3, r5, #31
 8015f70:	d50a      	bpl.n	8015f88 <__pow5mult+0x84>
 8015f72:	4639      	mov	r1, r7
 8015f74:	4622      	mov	r2, r4
 8015f76:	4630      	mov	r0, r6
 8015f78:	f7ff ff1a 	bl	8015db0 <__multiply>
 8015f7c:	4639      	mov	r1, r7
 8015f7e:	4680      	mov	r8, r0
 8015f80:	4630      	mov	r0, r6
 8015f82:	f7ff fdfd 	bl	8015b80 <_Bfree>
 8015f86:	4647      	mov	r7, r8
 8015f88:	106d      	asrs	r5, r5, #1
 8015f8a:	d00b      	beq.n	8015fa4 <__pow5mult+0xa0>
 8015f8c:	6820      	ldr	r0, [r4, #0]
 8015f8e:	b938      	cbnz	r0, 8015fa0 <__pow5mult+0x9c>
 8015f90:	4622      	mov	r2, r4
 8015f92:	4621      	mov	r1, r4
 8015f94:	4630      	mov	r0, r6
 8015f96:	f7ff ff0b 	bl	8015db0 <__multiply>
 8015f9a:	6020      	str	r0, [r4, #0]
 8015f9c:	f8c0 9000 	str.w	r9, [r0]
 8015fa0:	4604      	mov	r4, r0
 8015fa2:	e7e4      	b.n	8015f6e <__pow5mult+0x6a>
 8015fa4:	4638      	mov	r0, r7
 8015fa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015faa:	bf00      	nop
 8015fac:	0805dd70 	.word	0x0805dd70
 8015fb0:	0805d980 	.word	0x0805d980
 8015fb4:	0805dc24 	.word	0x0805dc24

08015fb8 <__lshift>:
 8015fb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015fbc:	460c      	mov	r4, r1
 8015fbe:	6849      	ldr	r1, [r1, #4]
 8015fc0:	6923      	ldr	r3, [r4, #16]
 8015fc2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8015fc6:	68a3      	ldr	r3, [r4, #8]
 8015fc8:	4607      	mov	r7, r0
 8015fca:	4691      	mov	r9, r2
 8015fcc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015fd0:	f108 0601 	add.w	r6, r8, #1
 8015fd4:	42b3      	cmp	r3, r6
 8015fd6:	db0b      	blt.n	8015ff0 <__lshift+0x38>
 8015fd8:	4638      	mov	r0, r7
 8015fda:	f7ff fd91 	bl	8015b00 <_Balloc>
 8015fde:	4605      	mov	r5, r0
 8015fe0:	b948      	cbnz	r0, 8015ff6 <__lshift+0x3e>
 8015fe2:	4602      	mov	r2, r0
 8015fe4:	4b2a      	ldr	r3, [pc, #168]	; (8016090 <__lshift+0xd8>)
 8015fe6:	482b      	ldr	r0, [pc, #172]	; (8016094 <__lshift+0xdc>)
 8015fe8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8015fec:	f7fe fb2a 	bl	8014644 <__assert_func>
 8015ff0:	3101      	adds	r1, #1
 8015ff2:	005b      	lsls	r3, r3, #1
 8015ff4:	e7ee      	b.n	8015fd4 <__lshift+0x1c>
 8015ff6:	2300      	movs	r3, #0
 8015ff8:	f100 0114 	add.w	r1, r0, #20
 8015ffc:	f100 0210 	add.w	r2, r0, #16
 8016000:	4618      	mov	r0, r3
 8016002:	4553      	cmp	r3, sl
 8016004:	db37      	blt.n	8016076 <__lshift+0xbe>
 8016006:	6920      	ldr	r0, [r4, #16]
 8016008:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801600c:	f104 0314 	add.w	r3, r4, #20
 8016010:	f019 091f 	ands.w	r9, r9, #31
 8016014:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016018:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801601c:	d02f      	beq.n	801607e <__lshift+0xc6>
 801601e:	f1c9 0e20 	rsb	lr, r9, #32
 8016022:	468a      	mov	sl, r1
 8016024:	f04f 0c00 	mov.w	ip, #0
 8016028:	681a      	ldr	r2, [r3, #0]
 801602a:	fa02 f209 	lsl.w	r2, r2, r9
 801602e:	ea42 020c 	orr.w	r2, r2, ip
 8016032:	f84a 2b04 	str.w	r2, [sl], #4
 8016036:	f853 2b04 	ldr.w	r2, [r3], #4
 801603a:	4298      	cmp	r0, r3
 801603c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8016040:	d8f2      	bhi.n	8016028 <__lshift+0x70>
 8016042:	1b03      	subs	r3, r0, r4
 8016044:	3b15      	subs	r3, #21
 8016046:	f023 0303 	bic.w	r3, r3, #3
 801604a:	3304      	adds	r3, #4
 801604c:	f104 0215 	add.w	r2, r4, #21
 8016050:	4290      	cmp	r0, r2
 8016052:	bf38      	it	cc
 8016054:	2304      	movcc	r3, #4
 8016056:	f841 c003 	str.w	ip, [r1, r3]
 801605a:	f1bc 0f00 	cmp.w	ip, #0
 801605e:	d001      	beq.n	8016064 <__lshift+0xac>
 8016060:	f108 0602 	add.w	r6, r8, #2
 8016064:	3e01      	subs	r6, #1
 8016066:	4638      	mov	r0, r7
 8016068:	612e      	str	r6, [r5, #16]
 801606a:	4621      	mov	r1, r4
 801606c:	f7ff fd88 	bl	8015b80 <_Bfree>
 8016070:	4628      	mov	r0, r5
 8016072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016076:	f842 0f04 	str.w	r0, [r2, #4]!
 801607a:	3301      	adds	r3, #1
 801607c:	e7c1      	b.n	8016002 <__lshift+0x4a>
 801607e:	3904      	subs	r1, #4
 8016080:	f853 2b04 	ldr.w	r2, [r3], #4
 8016084:	f841 2f04 	str.w	r2, [r1, #4]!
 8016088:	4298      	cmp	r0, r3
 801608a:	d8f9      	bhi.n	8016080 <__lshift+0xc8>
 801608c:	e7ea      	b.n	8016064 <__lshift+0xac>
 801608e:	bf00      	nop
 8016090:	0805db99 	.word	0x0805db99
 8016094:	0805dc24 	.word	0x0805dc24

08016098 <__mcmp>:
 8016098:	b530      	push	{r4, r5, lr}
 801609a:	6902      	ldr	r2, [r0, #16]
 801609c:	690c      	ldr	r4, [r1, #16]
 801609e:	1b12      	subs	r2, r2, r4
 80160a0:	d10e      	bne.n	80160c0 <__mcmp+0x28>
 80160a2:	f100 0314 	add.w	r3, r0, #20
 80160a6:	3114      	adds	r1, #20
 80160a8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80160ac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80160b0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80160b4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80160b8:	42a5      	cmp	r5, r4
 80160ba:	d003      	beq.n	80160c4 <__mcmp+0x2c>
 80160bc:	d305      	bcc.n	80160ca <__mcmp+0x32>
 80160be:	2201      	movs	r2, #1
 80160c0:	4610      	mov	r0, r2
 80160c2:	bd30      	pop	{r4, r5, pc}
 80160c4:	4283      	cmp	r3, r0
 80160c6:	d3f3      	bcc.n	80160b0 <__mcmp+0x18>
 80160c8:	e7fa      	b.n	80160c0 <__mcmp+0x28>
 80160ca:	f04f 32ff 	mov.w	r2, #4294967295
 80160ce:	e7f7      	b.n	80160c0 <__mcmp+0x28>

080160d0 <__mdiff>:
 80160d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160d4:	460c      	mov	r4, r1
 80160d6:	4606      	mov	r6, r0
 80160d8:	4611      	mov	r1, r2
 80160da:	4620      	mov	r0, r4
 80160dc:	4690      	mov	r8, r2
 80160de:	f7ff ffdb 	bl	8016098 <__mcmp>
 80160e2:	1e05      	subs	r5, r0, #0
 80160e4:	d110      	bne.n	8016108 <__mdiff+0x38>
 80160e6:	4629      	mov	r1, r5
 80160e8:	4630      	mov	r0, r6
 80160ea:	f7ff fd09 	bl	8015b00 <_Balloc>
 80160ee:	b930      	cbnz	r0, 80160fe <__mdiff+0x2e>
 80160f0:	4b3a      	ldr	r3, [pc, #232]	; (80161dc <__mdiff+0x10c>)
 80160f2:	4602      	mov	r2, r0
 80160f4:	f240 2132 	movw	r1, #562	; 0x232
 80160f8:	4839      	ldr	r0, [pc, #228]	; (80161e0 <__mdiff+0x110>)
 80160fa:	f7fe faa3 	bl	8014644 <__assert_func>
 80160fe:	2301      	movs	r3, #1
 8016100:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8016104:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016108:	bfa4      	itt	ge
 801610a:	4643      	movge	r3, r8
 801610c:	46a0      	movge	r8, r4
 801610e:	4630      	mov	r0, r6
 8016110:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8016114:	bfa6      	itte	ge
 8016116:	461c      	movge	r4, r3
 8016118:	2500      	movge	r5, #0
 801611a:	2501      	movlt	r5, #1
 801611c:	f7ff fcf0 	bl	8015b00 <_Balloc>
 8016120:	b920      	cbnz	r0, 801612c <__mdiff+0x5c>
 8016122:	4b2e      	ldr	r3, [pc, #184]	; (80161dc <__mdiff+0x10c>)
 8016124:	4602      	mov	r2, r0
 8016126:	f44f 7110 	mov.w	r1, #576	; 0x240
 801612a:	e7e5      	b.n	80160f8 <__mdiff+0x28>
 801612c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8016130:	6926      	ldr	r6, [r4, #16]
 8016132:	60c5      	str	r5, [r0, #12]
 8016134:	f104 0914 	add.w	r9, r4, #20
 8016138:	f108 0514 	add.w	r5, r8, #20
 801613c:	f100 0e14 	add.w	lr, r0, #20
 8016140:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8016144:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8016148:	f108 0210 	add.w	r2, r8, #16
 801614c:	46f2      	mov	sl, lr
 801614e:	2100      	movs	r1, #0
 8016150:	f859 3b04 	ldr.w	r3, [r9], #4
 8016154:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8016158:	fa1f f883 	uxth.w	r8, r3
 801615c:	fa11 f18b 	uxtah	r1, r1, fp
 8016160:	0c1b      	lsrs	r3, r3, #16
 8016162:	eba1 0808 	sub.w	r8, r1, r8
 8016166:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801616a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801616e:	fa1f f888 	uxth.w	r8, r8
 8016172:	1419      	asrs	r1, r3, #16
 8016174:	454e      	cmp	r6, r9
 8016176:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801617a:	f84a 3b04 	str.w	r3, [sl], #4
 801617e:	d8e7      	bhi.n	8016150 <__mdiff+0x80>
 8016180:	1b33      	subs	r3, r6, r4
 8016182:	3b15      	subs	r3, #21
 8016184:	f023 0303 	bic.w	r3, r3, #3
 8016188:	3304      	adds	r3, #4
 801618a:	3415      	adds	r4, #21
 801618c:	42a6      	cmp	r6, r4
 801618e:	bf38      	it	cc
 8016190:	2304      	movcc	r3, #4
 8016192:	441d      	add	r5, r3
 8016194:	4473      	add	r3, lr
 8016196:	469e      	mov	lr, r3
 8016198:	462e      	mov	r6, r5
 801619a:	4566      	cmp	r6, ip
 801619c:	d30e      	bcc.n	80161bc <__mdiff+0xec>
 801619e:	f10c 0203 	add.w	r2, ip, #3
 80161a2:	1b52      	subs	r2, r2, r5
 80161a4:	f022 0203 	bic.w	r2, r2, #3
 80161a8:	3d03      	subs	r5, #3
 80161aa:	45ac      	cmp	ip, r5
 80161ac:	bf38      	it	cc
 80161ae:	2200      	movcc	r2, #0
 80161b0:	441a      	add	r2, r3
 80161b2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80161b6:	b17b      	cbz	r3, 80161d8 <__mdiff+0x108>
 80161b8:	6107      	str	r7, [r0, #16]
 80161ba:	e7a3      	b.n	8016104 <__mdiff+0x34>
 80161bc:	f856 8b04 	ldr.w	r8, [r6], #4
 80161c0:	fa11 f288 	uxtah	r2, r1, r8
 80161c4:	1414      	asrs	r4, r2, #16
 80161c6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80161ca:	b292      	uxth	r2, r2
 80161cc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80161d0:	f84e 2b04 	str.w	r2, [lr], #4
 80161d4:	1421      	asrs	r1, r4, #16
 80161d6:	e7e0      	b.n	801619a <__mdiff+0xca>
 80161d8:	3f01      	subs	r7, #1
 80161da:	e7ea      	b.n	80161b2 <__mdiff+0xe2>
 80161dc:	0805db99 	.word	0x0805db99
 80161e0:	0805dc24 	.word	0x0805dc24

080161e4 <__ulp>:
 80161e4:	b082      	sub	sp, #8
 80161e6:	ed8d 0b00 	vstr	d0, [sp]
 80161ea:	9b01      	ldr	r3, [sp, #4]
 80161ec:	4912      	ldr	r1, [pc, #72]	; (8016238 <__ulp+0x54>)
 80161ee:	4019      	ands	r1, r3
 80161f0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80161f4:	2900      	cmp	r1, #0
 80161f6:	dd05      	ble.n	8016204 <__ulp+0x20>
 80161f8:	2200      	movs	r2, #0
 80161fa:	460b      	mov	r3, r1
 80161fc:	ec43 2b10 	vmov	d0, r2, r3
 8016200:	b002      	add	sp, #8
 8016202:	4770      	bx	lr
 8016204:	4249      	negs	r1, r1
 8016206:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801620a:	ea4f 5021 	mov.w	r0, r1, asr #20
 801620e:	f04f 0200 	mov.w	r2, #0
 8016212:	f04f 0300 	mov.w	r3, #0
 8016216:	da04      	bge.n	8016222 <__ulp+0x3e>
 8016218:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801621c:	fa41 f300 	asr.w	r3, r1, r0
 8016220:	e7ec      	b.n	80161fc <__ulp+0x18>
 8016222:	f1a0 0114 	sub.w	r1, r0, #20
 8016226:	291e      	cmp	r1, #30
 8016228:	bfda      	itte	le
 801622a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801622e:	fa20 f101 	lsrle.w	r1, r0, r1
 8016232:	2101      	movgt	r1, #1
 8016234:	460a      	mov	r2, r1
 8016236:	e7e1      	b.n	80161fc <__ulp+0x18>
 8016238:	7ff00000 	.word	0x7ff00000

0801623c <__b2d>:
 801623c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801623e:	6905      	ldr	r5, [r0, #16]
 8016240:	f100 0714 	add.w	r7, r0, #20
 8016244:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8016248:	1f2e      	subs	r6, r5, #4
 801624a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801624e:	4620      	mov	r0, r4
 8016250:	f7ff fd48 	bl	8015ce4 <__hi0bits>
 8016254:	f1c0 0320 	rsb	r3, r0, #32
 8016258:	280a      	cmp	r0, #10
 801625a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80162d8 <__b2d+0x9c>
 801625e:	600b      	str	r3, [r1, #0]
 8016260:	dc14      	bgt.n	801628c <__b2d+0x50>
 8016262:	f1c0 0e0b 	rsb	lr, r0, #11
 8016266:	fa24 f10e 	lsr.w	r1, r4, lr
 801626a:	42b7      	cmp	r7, r6
 801626c:	ea41 030c 	orr.w	r3, r1, ip
 8016270:	bf34      	ite	cc
 8016272:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8016276:	2100      	movcs	r1, #0
 8016278:	3015      	adds	r0, #21
 801627a:	fa04 f000 	lsl.w	r0, r4, r0
 801627e:	fa21 f10e 	lsr.w	r1, r1, lr
 8016282:	ea40 0201 	orr.w	r2, r0, r1
 8016286:	ec43 2b10 	vmov	d0, r2, r3
 801628a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801628c:	42b7      	cmp	r7, r6
 801628e:	bf3a      	itte	cc
 8016290:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8016294:	f1a5 0608 	subcc.w	r6, r5, #8
 8016298:	2100      	movcs	r1, #0
 801629a:	380b      	subs	r0, #11
 801629c:	d017      	beq.n	80162ce <__b2d+0x92>
 801629e:	f1c0 0c20 	rsb	ip, r0, #32
 80162a2:	fa04 f500 	lsl.w	r5, r4, r0
 80162a6:	42be      	cmp	r6, r7
 80162a8:	fa21 f40c 	lsr.w	r4, r1, ip
 80162ac:	ea45 0504 	orr.w	r5, r5, r4
 80162b0:	bf8c      	ite	hi
 80162b2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80162b6:	2400      	movls	r4, #0
 80162b8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80162bc:	fa01 f000 	lsl.w	r0, r1, r0
 80162c0:	fa24 f40c 	lsr.w	r4, r4, ip
 80162c4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80162c8:	ea40 0204 	orr.w	r2, r0, r4
 80162cc:	e7db      	b.n	8016286 <__b2d+0x4a>
 80162ce:	ea44 030c 	orr.w	r3, r4, ip
 80162d2:	460a      	mov	r2, r1
 80162d4:	e7d7      	b.n	8016286 <__b2d+0x4a>
 80162d6:	bf00      	nop
 80162d8:	3ff00000 	.word	0x3ff00000

080162dc <__d2b>:
 80162dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80162e0:	4689      	mov	r9, r1
 80162e2:	2101      	movs	r1, #1
 80162e4:	ec57 6b10 	vmov	r6, r7, d0
 80162e8:	4690      	mov	r8, r2
 80162ea:	f7ff fc09 	bl	8015b00 <_Balloc>
 80162ee:	4604      	mov	r4, r0
 80162f0:	b930      	cbnz	r0, 8016300 <__d2b+0x24>
 80162f2:	4602      	mov	r2, r0
 80162f4:	4b25      	ldr	r3, [pc, #148]	; (801638c <__d2b+0xb0>)
 80162f6:	4826      	ldr	r0, [pc, #152]	; (8016390 <__d2b+0xb4>)
 80162f8:	f240 310a 	movw	r1, #778	; 0x30a
 80162fc:	f7fe f9a2 	bl	8014644 <__assert_func>
 8016300:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8016304:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8016308:	bb35      	cbnz	r5, 8016358 <__d2b+0x7c>
 801630a:	2e00      	cmp	r6, #0
 801630c:	9301      	str	r3, [sp, #4]
 801630e:	d028      	beq.n	8016362 <__d2b+0x86>
 8016310:	4668      	mov	r0, sp
 8016312:	9600      	str	r6, [sp, #0]
 8016314:	f7ff fd06 	bl	8015d24 <__lo0bits>
 8016318:	9900      	ldr	r1, [sp, #0]
 801631a:	b300      	cbz	r0, 801635e <__d2b+0x82>
 801631c:	9a01      	ldr	r2, [sp, #4]
 801631e:	f1c0 0320 	rsb	r3, r0, #32
 8016322:	fa02 f303 	lsl.w	r3, r2, r3
 8016326:	430b      	orrs	r3, r1
 8016328:	40c2      	lsrs	r2, r0
 801632a:	6163      	str	r3, [r4, #20]
 801632c:	9201      	str	r2, [sp, #4]
 801632e:	9b01      	ldr	r3, [sp, #4]
 8016330:	61a3      	str	r3, [r4, #24]
 8016332:	2b00      	cmp	r3, #0
 8016334:	bf14      	ite	ne
 8016336:	2202      	movne	r2, #2
 8016338:	2201      	moveq	r2, #1
 801633a:	6122      	str	r2, [r4, #16]
 801633c:	b1d5      	cbz	r5, 8016374 <__d2b+0x98>
 801633e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8016342:	4405      	add	r5, r0
 8016344:	f8c9 5000 	str.w	r5, [r9]
 8016348:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801634c:	f8c8 0000 	str.w	r0, [r8]
 8016350:	4620      	mov	r0, r4
 8016352:	b003      	add	sp, #12
 8016354:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016358:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801635c:	e7d5      	b.n	801630a <__d2b+0x2e>
 801635e:	6161      	str	r1, [r4, #20]
 8016360:	e7e5      	b.n	801632e <__d2b+0x52>
 8016362:	a801      	add	r0, sp, #4
 8016364:	f7ff fcde 	bl	8015d24 <__lo0bits>
 8016368:	9b01      	ldr	r3, [sp, #4]
 801636a:	6163      	str	r3, [r4, #20]
 801636c:	2201      	movs	r2, #1
 801636e:	6122      	str	r2, [r4, #16]
 8016370:	3020      	adds	r0, #32
 8016372:	e7e3      	b.n	801633c <__d2b+0x60>
 8016374:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8016378:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801637c:	f8c9 0000 	str.w	r0, [r9]
 8016380:	6918      	ldr	r0, [r3, #16]
 8016382:	f7ff fcaf 	bl	8015ce4 <__hi0bits>
 8016386:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801638a:	e7df      	b.n	801634c <__d2b+0x70>
 801638c:	0805db99 	.word	0x0805db99
 8016390:	0805dc24 	.word	0x0805dc24

08016394 <__ratio>:
 8016394:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016398:	4688      	mov	r8, r1
 801639a:	4669      	mov	r1, sp
 801639c:	4681      	mov	r9, r0
 801639e:	f7ff ff4d 	bl	801623c <__b2d>
 80163a2:	a901      	add	r1, sp, #4
 80163a4:	4640      	mov	r0, r8
 80163a6:	ec55 4b10 	vmov	r4, r5, d0
 80163aa:	f7ff ff47 	bl	801623c <__b2d>
 80163ae:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80163b2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80163b6:	eba3 0c02 	sub.w	ip, r3, r2
 80163ba:	e9dd 3200 	ldrd	r3, r2, [sp]
 80163be:	1a9b      	subs	r3, r3, r2
 80163c0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80163c4:	ec51 0b10 	vmov	r0, r1, d0
 80163c8:	2b00      	cmp	r3, #0
 80163ca:	bfd6      	itet	le
 80163cc:	460a      	movle	r2, r1
 80163ce:	462a      	movgt	r2, r5
 80163d0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80163d4:	468b      	mov	fp, r1
 80163d6:	462f      	mov	r7, r5
 80163d8:	bfd4      	ite	le
 80163da:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80163de:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80163e2:	4620      	mov	r0, r4
 80163e4:	ee10 2a10 	vmov	r2, s0
 80163e8:	465b      	mov	r3, fp
 80163ea:	4639      	mov	r1, r7
 80163ec:	f7ea fa5e 	bl	80008ac <__aeabi_ddiv>
 80163f0:	ec41 0b10 	vmov	d0, r0, r1
 80163f4:	b003      	add	sp, #12
 80163f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080163fa <__copybits>:
 80163fa:	3901      	subs	r1, #1
 80163fc:	b570      	push	{r4, r5, r6, lr}
 80163fe:	1149      	asrs	r1, r1, #5
 8016400:	6914      	ldr	r4, [r2, #16]
 8016402:	3101      	adds	r1, #1
 8016404:	f102 0314 	add.w	r3, r2, #20
 8016408:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801640c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8016410:	1f05      	subs	r5, r0, #4
 8016412:	42a3      	cmp	r3, r4
 8016414:	d30c      	bcc.n	8016430 <__copybits+0x36>
 8016416:	1aa3      	subs	r3, r4, r2
 8016418:	3b11      	subs	r3, #17
 801641a:	f023 0303 	bic.w	r3, r3, #3
 801641e:	3211      	adds	r2, #17
 8016420:	42a2      	cmp	r2, r4
 8016422:	bf88      	it	hi
 8016424:	2300      	movhi	r3, #0
 8016426:	4418      	add	r0, r3
 8016428:	2300      	movs	r3, #0
 801642a:	4288      	cmp	r0, r1
 801642c:	d305      	bcc.n	801643a <__copybits+0x40>
 801642e:	bd70      	pop	{r4, r5, r6, pc}
 8016430:	f853 6b04 	ldr.w	r6, [r3], #4
 8016434:	f845 6f04 	str.w	r6, [r5, #4]!
 8016438:	e7eb      	b.n	8016412 <__copybits+0x18>
 801643a:	f840 3b04 	str.w	r3, [r0], #4
 801643e:	e7f4      	b.n	801642a <__copybits+0x30>

08016440 <__any_on>:
 8016440:	f100 0214 	add.w	r2, r0, #20
 8016444:	6900      	ldr	r0, [r0, #16]
 8016446:	114b      	asrs	r3, r1, #5
 8016448:	4298      	cmp	r0, r3
 801644a:	b510      	push	{r4, lr}
 801644c:	db11      	blt.n	8016472 <__any_on+0x32>
 801644e:	dd0a      	ble.n	8016466 <__any_on+0x26>
 8016450:	f011 011f 	ands.w	r1, r1, #31
 8016454:	d007      	beq.n	8016466 <__any_on+0x26>
 8016456:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801645a:	fa24 f001 	lsr.w	r0, r4, r1
 801645e:	fa00 f101 	lsl.w	r1, r0, r1
 8016462:	428c      	cmp	r4, r1
 8016464:	d10b      	bne.n	801647e <__any_on+0x3e>
 8016466:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801646a:	4293      	cmp	r3, r2
 801646c:	d803      	bhi.n	8016476 <__any_on+0x36>
 801646e:	2000      	movs	r0, #0
 8016470:	bd10      	pop	{r4, pc}
 8016472:	4603      	mov	r3, r0
 8016474:	e7f7      	b.n	8016466 <__any_on+0x26>
 8016476:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801647a:	2900      	cmp	r1, #0
 801647c:	d0f5      	beq.n	801646a <__any_on+0x2a>
 801647e:	2001      	movs	r0, #1
 8016480:	e7f6      	b.n	8016470 <__any_on+0x30>

08016482 <_calloc_r>:
 8016482:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016484:	fba1 2402 	umull	r2, r4, r1, r2
 8016488:	b94c      	cbnz	r4, 801649e <_calloc_r+0x1c>
 801648a:	4611      	mov	r1, r2
 801648c:	9201      	str	r2, [sp, #4]
 801648e:	f7fc fa1f 	bl	80128d0 <_malloc_r>
 8016492:	9a01      	ldr	r2, [sp, #4]
 8016494:	4605      	mov	r5, r0
 8016496:	b930      	cbnz	r0, 80164a6 <_calloc_r+0x24>
 8016498:	4628      	mov	r0, r5
 801649a:	b003      	add	sp, #12
 801649c:	bd30      	pop	{r4, r5, pc}
 801649e:	220c      	movs	r2, #12
 80164a0:	6002      	str	r2, [r0, #0]
 80164a2:	2500      	movs	r5, #0
 80164a4:	e7f8      	b.n	8016498 <_calloc_r+0x16>
 80164a6:	4621      	mov	r1, r4
 80164a8:	f7fc f99e 	bl	80127e8 <memset>
 80164ac:	e7f4      	b.n	8016498 <_calloc_r+0x16>

080164ae <_realloc_r>:
 80164ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80164b2:	4680      	mov	r8, r0
 80164b4:	4614      	mov	r4, r2
 80164b6:	460e      	mov	r6, r1
 80164b8:	b921      	cbnz	r1, 80164c4 <_realloc_r+0x16>
 80164ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80164be:	4611      	mov	r1, r2
 80164c0:	f7fc ba06 	b.w	80128d0 <_malloc_r>
 80164c4:	b92a      	cbnz	r2, 80164d2 <_realloc_r+0x24>
 80164c6:	f7fc f997 	bl	80127f8 <_free_r>
 80164ca:	4625      	mov	r5, r4
 80164cc:	4628      	mov	r0, r5
 80164ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80164d2:	f001 fa1b 	bl	801790c <_malloc_usable_size_r>
 80164d6:	4284      	cmp	r4, r0
 80164d8:	4607      	mov	r7, r0
 80164da:	d802      	bhi.n	80164e2 <_realloc_r+0x34>
 80164dc:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80164e0:	d812      	bhi.n	8016508 <_realloc_r+0x5a>
 80164e2:	4621      	mov	r1, r4
 80164e4:	4640      	mov	r0, r8
 80164e6:	f7fc f9f3 	bl	80128d0 <_malloc_r>
 80164ea:	4605      	mov	r5, r0
 80164ec:	2800      	cmp	r0, #0
 80164ee:	d0ed      	beq.n	80164cc <_realloc_r+0x1e>
 80164f0:	42bc      	cmp	r4, r7
 80164f2:	4622      	mov	r2, r4
 80164f4:	4631      	mov	r1, r6
 80164f6:	bf28      	it	cs
 80164f8:	463a      	movcs	r2, r7
 80164fa:	f7fc f967 	bl	80127cc <memcpy>
 80164fe:	4631      	mov	r1, r6
 8016500:	4640      	mov	r0, r8
 8016502:	f7fc f979 	bl	80127f8 <_free_r>
 8016506:	e7e1      	b.n	80164cc <_realloc_r+0x1e>
 8016508:	4635      	mov	r5, r6
 801650a:	e7df      	b.n	80164cc <_realloc_r+0x1e>

0801650c <__ssputs_r>:
 801650c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016510:	688e      	ldr	r6, [r1, #8]
 8016512:	429e      	cmp	r6, r3
 8016514:	4682      	mov	sl, r0
 8016516:	460c      	mov	r4, r1
 8016518:	4690      	mov	r8, r2
 801651a:	461f      	mov	r7, r3
 801651c:	d838      	bhi.n	8016590 <__ssputs_r+0x84>
 801651e:	898a      	ldrh	r2, [r1, #12]
 8016520:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016524:	d032      	beq.n	801658c <__ssputs_r+0x80>
 8016526:	6825      	ldr	r5, [r4, #0]
 8016528:	6909      	ldr	r1, [r1, #16]
 801652a:	eba5 0901 	sub.w	r9, r5, r1
 801652e:	6965      	ldr	r5, [r4, #20]
 8016530:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016534:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016538:	3301      	adds	r3, #1
 801653a:	444b      	add	r3, r9
 801653c:	106d      	asrs	r5, r5, #1
 801653e:	429d      	cmp	r5, r3
 8016540:	bf38      	it	cc
 8016542:	461d      	movcc	r5, r3
 8016544:	0553      	lsls	r3, r2, #21
 8016546:	d531      	bpl.n	80165ac <__ssputs_r+0xa0>
 8016548:	4629      	mov	r1, r5
 801654a:	f7fc f9c1 	bl	80128d0 <_malloc_r>
 801654e:	4606      	mov	r6, r0
 8016550:	b950      	cbnz	r0, 8016568 <__ssputs_r+0x5c>
 8016552:	230c      	movs	r3, #12
 8016554:	f8ca 3000 	str.w	r3, [sl]
 8016558:	89a3      	ldrh	r3, [r4, #12]
 801655a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801655e:	81a3      	strh	r3, [r4, #12]
 8016560:	f04f 30ff 	mov.w	r0, #4294967295
 8016564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016568:	6921      	ldr	r1, [r4, #16]
 801656a:	464a      	mov	r2, r9
 801656c:	f7fc f92e 	bl	80127cc <memcpy>
 8016570:	89a3      	ldrh	r3, [r4, #12]
 8016572:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016576:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801657a:	81a3      	strh	r3, [r4, #12]
 801657c:	6126      	str	r6, [r4, #16]
 801657e:	6165      	str	r5, [r4, #20]
 8016580:	444e      	add	r6, r9
 8016582:	eba5 0509 	sub.w	r5, r5, r9
 8016586:	6026      	str	r6, [r4, #0]
 8016588:	60a5      	str	r5, [r4, #8]
 801658a:	463e      	mov	r6, r7
 801658c:	42be      	cmp	r6, r7
 801658e:	d900      	bls.n	8016592 <__ssputs_r+0x86>
 8016590:	463e      	mov	r6, r7
 8016592:	6820      	ldr	r0, [r4, #0]
 8016594:	4632      	mov	r2, r6
 8016596:	4641      	mov	r1, r8
 8016598:	f001 f99e 	bl	80178d8 <memmove>
 801659c:	68a3      	ldr	r3, [r4, #8]
 801659e:	1b9b      	subs	r3, r3, r6
 80165a0:	60a3      	str	r3, [r4, #8]
 80165a2:	6823      	ldr	r3, [r4, #0]
 80165a4:	4433      	add	r3, r6
 80165a6:	6023      	str	r3, [r4, #0]
 80165a8:	2000      	movs	r0, #0
 80165aa:	e7db      	b.n	8016564 <__ssputs_r+0x58>
 80165ac:	462a      	mov	r2, r5
 80165ae:	f7ff ff7e 	bl	80164ae <_realloc_r>
 80165b2:	4606      	mov	r6, r0
 80165b4:	2800      	cmp	r0, #0
 80165b6:	d1e1      	bne.n	801657c <__ssputs_r+0x70>
 80165b8:	6921      	ldr	r1, [r4, #16]
 80165ba:	4650      	mov	r0, sl
 80165bc:	f7fc f91c 	bl	80127f8 <_free_r>
 80165c0:	e7c7      	b.n	8016552 <__ssputs_r+0x46>
	...

080165c4 <_svfiprintf_r>:
 80165c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165c8:	4698      	mov	r8, r3
 80165ca:	898b      	ldrh	r3, [r1, #12]
 80165cc:	061b      	lsls	r3, r3, #24
 80165ce:	b09d      	sub	sp, #116	; 0x74
 80165d0:	4607      	mov	r7, r0
 80165d2:	460d      	mov	r5, r1
 80165d4:	4614      	mov	r4, r2
 80165d6:	d50e      	bpl.n	80165f6 <_svfiprintf_r+0x32>
 80165d8:	690b      	ldr	r3, [r1, #16]
 80165da:	b963      	cbnz	r3, 80165f6 <_svfiprintf_r+0x32>
 80165dc:	2140      	movs	r1, #64	; 0x40
 80165de:	f7fc f977 	bl	80128d0 <_malloc_r>
 80165e2:	6028      	str	r0, [r5, #0]
 80165e4:	6128      	str	r0, [r5, #16]
 80165e6:	b920      	cbnz	r0, 80165f2 <_svfiprintf_r+0x2e>
 80165e8:	230c      	movs	r3, #12
 80165ea:	603b      	str	r3, [r7, #0]
 80165ec:	f04f 30ff 	mov.w	r0, #4294967295
 80165f0:	e0d1      	b.n	8016796 <_svfiprintf_r+0x1d2>
 80165f2:	2340      	movs	r3, #64	; 0x40
 80165f4:	616b      	str	r3, [r5, #20]
 80165f6:	2300      	movs	r3, #0
 80165f8:	9309      	str	r3, [sp, #36]	; 0x24
 80165fa:	2320      	movs	r3, #32
 80165fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016600:	f8cd 800c 	str.w	r8, [sp, #12]
 8016604:	2330      	movs	r3, #48	; 0x30
 8016606:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80167b0 <_svfiprintf_r+0x1ec>
 801660a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801660e:	f04f 0901 	mov.w	r9, #1
 8016612:	4623      	mov	r3, r4
 8016614:	469a      	mov	sl, r3
 8016616:	f813 2b01 	ldrb.w	r2, [r3], #1
 801661a:	b10a      	cbz	r2, 8016620 <_svfiprintf_r+0x5c>
 801661c:	2a25      	cmp	r2, #37	; 0x25
 801661e:	d1f9      	bne.n	8016614 <_svfiprintf_r+0x50>
 8016620:	ebba 0b04 	subs.w	fp, sl, r4
 8016624:	d00b      	beq.n	801663e <_svfiprintf_r+0x7a>
 8016626:	465b      	mov	r3, fp
 8016628:	4622      	mov	r2, r4
 801662a:	4629      	mov	r1, r5
 801662c:	4638      	mov	r0, r7
 801662e:	f7ff ff6d 	bl	801650c <__ssputs_r>
 8016632:	3001      	adds	r0, #1
 8016634:	f000 80aa 	beq.w	801678c <_svfiprintf_r+0x1c8>
 8016638:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801663a:	445a      	add	r2, fp
 801663c:	9209      	str	r2, [sp, #36]	; 0x24
 801663e:	f89a 3000 	ldrb.w	r3, [sl]
 8016642:	2b00      	cmp	r3, #0
 8016644:	f000 80a2 	beq.w	801678c <_svfiprintf_r+0x1c8>
 8016648:	2300      	movs	r3, #0
 801664a:	f04f 32ff 	mov.w	r2, #4294967295
 801664e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016652:	f10a 0a01 	add.w	sl, sl, #1
 8016656:	9304      	str	r3, [sp, #16]
 8016658:	9307      	str	r3, [sp, #28]
 801665a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801665e:	931a      	str	r3, [sp, #104]	; 0x68
 8016660:	4654      	mov	r4, sl
 8016662:	2205      	movs	r2, #5
 8016664:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016668:	4851      	ldr	r0, [pc, #324]	; (80167b0 <_svfiprintf_r+0x1ec>)
 801666a:	f7e9 fde9 	bl	8000240 <memchr>
 801666e:	9a04      	ldr	r2, [sp, #16]
 8016670:	b9d8      	cbnz	r0, 80166aa <_svfiprintf_r+0xe6>
 8016672:	06d0      	lsls	r0, r2, #27
 8016674:	bf44      	itt	mi
 8016676:	2320      	movmi	r3, #32
 8016678:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801667c:	0711      	lsls	r1, r2, #28
 801667e:	bf44      	itt	mi
 8016680:	232b      	movmi	r3, #43	; 0x2b
 8016682:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016686:	f89a 3000 	ldrb.w	r3, [sl]
 801668a:	2b2a      	cmp	r3, #42	; 0x2a
 801668c:	d015      	beq.n	80166ba <_svfiprintf_r+0xf6>
 801668e:	9a07      	ldr	r2, [sp, #28]
 8016690:	4654      	mov	r4, sl
 8016692:	2000      	movs	r0, #0
 8016694:	f04f 0c0a 	mov.w	ip, #10
 8016698:	4621      	mov	r1, r4
 801669a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801669e:	3b30      	subs	r3, #48	; 0x30
 80166a0:	2b09      	cmp	r3, #9
 80166a2:	d94e      	bls.n	8016742 <_svfiprintf_r+0x17e>
 80166a4:	b1b0      	cbz	r0, 80166d4 <_svfiprintf_r+0x110>
 80166a6:	9207      	str	r2, [sp, #28]
 80166a8:	e014      	b.n	80166d4 <_svfiprintf_r+0x110>
 80166aa:	eba0 0308 	sub.w	r3, r0, r8
 80166ae:	fa09 f303 	lsl.w	r3, r9, r3
 80166b2:	4313      	orrs	r3, r2
 80166b4:	9304      	str	r3, [sp, #16]
 80166b6:	46a2      	mov	sl, r4
 80166b8:	e7d2      	b.n	8016660 <_svfiprintf_r+0x9c>
 80166ba:	9b03      	ldr	r3, [sp, #12]
 80166bc:	1d19      	adds	r1, r3, #4
 80166be:	681b      	ldr	r3, [r3, #0]
 80166c0:	9103      	str	r1, [sp, #12]
 80166c2:	2b00      	cmp	r3, #0
 80166c4:	bfbb      	ittet	lt
 80166c6:	425b      	neglt	r3, r3
 80166c8:	f042 0202 	orrlt.w	r2, r2, #2
 80166cc:	9307      	strge	r3, [sp, #28]
 80166ce:	9307      	strlt	r3, [sp, #28]
 80166d0:	bfb8      	it	lt
 80166d2:	9204      	strlt	r2, [sp, #16]
 80166d4:	7823      	ldrb	r3, [r4, #0]
 80166d6:	2b2e      	cmp	r3, #46	; 0x2e
 80166d8:	d10c      	bne.n	80166f4 <_svfiprintf_r+0x130>
 80166da:	7863      	ldrb	r3, [r4, #1]
 80166dc:	2b2a      	cmp	r3, #42	; 0x2a
 80166de:	d135      	bne.n	801674c <_svfiprintf_r+0x188>
 80166e0:	9b03      	ldr	r3, [sp, #12]
 80166e2:	1d1a      	adds	r2, r3, #4
 80166e4:	681b      	ldr	r3, [r3, #0]
 80166e6:	9203      	str	r2, [sp, #12]
 80166e8:	2b00      	cmp	r3, #0
 80166ea:	bfb8      	it	lt
 80166ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80166f0:	3402      	adds	r4, #2
 80166f2:	9305      	str	r3, [sp, #20]
 80166f4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80167c0 <_svfiprintf_r+0x1fc>
 80166f8:	7821      	ldrb	r1, [r4, #0]
 80166fa:	2203      	movs	r2, #3
 80166fc:	4650      	mov	r0, sl
 80166fe:	f7e9 fd9f 	bl	8000240 <memchr>
 8016702:	b140      	cbz	r0, 8016716 <_svfiprintf_r+0x152>
 8016704:	2340      	movs	r3, #64	; 0x40
 8016706:	eba0 000a 	sub.w	r0, r0, sl
 801670a:	fa03 f000 	lsl.w	r0, r3, r0
 801670e:	9b04      	ldr	r3, [sp, #16]
 8016710:	4303      	orrs	r3, r0
 8016712:	3401      	adds	r4, #1
 8016714:	9304      	str	r3, [sp, #16]
 8016716:	f814 1b01 	ldrb.w	r1, [r4], #1
 801671a:	4826      	ldr	r0, [pc, #152]	; (80167b4 <_svfiprintf_r+0x1f0>)
 801671c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016720:	2206      	movs	r2, #6
 8016722:	f7e9 fd8d 	bl	8000240 <memchr>
 8016726:	2800      	cmp	r0, #0
 8016728:	d038      	beq.n	801679c <_svfiprintf_r+0x1d8>
 801672a:	4b23      	ldr	r3, [pc, #140]	; (80167b8 <_svfiprintf_r+0x1f4>)
 801672c:	bb1b      	cbnz	r3, 8016776 <_svfiprintf_r+0x1b2>
 801672e:	9b03      	ldr	r3, [sp, #12]
 8016730:	3307      	adds	r3, #7
 8016732:	f023 0307 	bic.w	r3, r3, #7
 8016736:	3308      	adds	r3, #8
 8016738:	9303      	str	r3, [sp, #12]
 801673a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801673c:	4433      	add	r3, r6
 801673e:	9309      	str	r3, [sp, #36]	; 0x24
 8016740:	e767      	b.n	8016612 <_svfiprintf_r+0x4e>
 8016742:	fb0c 3202 	mla	r2, ip, r2, r3
 8016746:	460c      	mov	r4, r1
 8016748:	2001      	movs	r0, #1
 801674a:	e7a5      	b.n	8016698 <_svfiprintf_r+0xd4>
 801674c:	2300      	movs	r3, #0
 801674e:	3401      	adds	r4, #1
 8016750:	9305      	str	r3, [sp, #20]
 8016752:	4619      	mov	r1, r3
 8016754:	f04f 0c0a 	mov.w	ip, #10
 8016758:	4620      	mov	r0, r4
 801675a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801675e:	3a30      	subs	r2, #48	; 0x30
 8016760:	2a09      	cmp	r2, #9
 8016762:	d903      	bls.n	801676c <_svfiprintf_r+0x1a8>
 8016764:	2b00      	cmp	r3, #0
 8016766:	d0c5      	beq.n	80166f4 <_svfiprintf_r+0x130>
 8016768:	9105      	str	r1, [sp, #20]
 801676a:	e7c3      	b.n	80166f4 <_svfiprintf_r+0x130>
 801676c:	fb0c 2101 	mla	r1, ip, r1, r2
 8016770:	4604      	mov	r4, r0
 8016772:	2301      	movs	r3, #1
 8016774:	e7f0      	b.n	8016758 <_svfiprintf_r+0x194>
 8016776:	ab03      	add	r3, sp, #12
 8016778:	9300      	str	r3, [sp, #0]
 801677a:	462a      	mov	r2, r5
 801677c:	4b0f      	ldr	r3, [pc, #60]	; (80167bc <_svfiprintf_r+0x1f8>)
 801677e:	a904      	add	r1, sp, #16
 8016780:	4638      	mov	r0, r7
 8016782:	f7fc f9b9 	bl	8012af8 <_printf_float>
 8016786:	1c42      	adds	r2, r0, #1
 8016788:	4606      	mov	r6, r0
 801678a:	d1d6      	bne.n	801673a <_svfiprintf_r+0x176>
 801678c:	89ab      	ldrh	r3, [r5, #12]
 801678e:	065b      	lsls	r3, r3, #25
 8016790:	f53f af2c 	bmi.w	80165ec <_svfiprintf_r+0x28>
 8016794:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016796:	b01d      	add	sp, #116	; 0x74
 8016798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801679c:	ab03      	add	r3, sp, #12
 801679e:	9300      	str	r3, [sp, #0]
 80167a0:	462a      	mov	r2, r5
 80167a2:	4b06      	ldr	r3, [pc, #24]	; (80167bc <_svfiprintf_r+0x1f8>)
 80167a4:	a904      	add	r1, sp, #16
 80167a6:	4638      	mov	r0, r7
 80167a8:	f7fc fc4a 	bl	8013040 <_printf_i>
 80167ac:	e7eb      	b.n	8016786 <_svfiprintf_r+0x1c2>
 80167ae:	bf00      	nop
 80167b0:	0805dd7c 	.word	0x0805dd7c
 80167b4:	0805dd86 	.word	0x0805dd86
 80167b8:	08012af9 	.word	0x08012af9
 80167bc:	0801650d 	.word	0x0801650d
 80167c0:	0805dd82 	.word	0x0805dd82

080167c4 <_sungetc_r>:
 80167c4:	b538      	push	{r3, r4, r5, lr}
 80167c6:	1c4b      	adds	r3, r1, #1
 80167c8:	4614      	mov	r4, r2
 80167ca:	d103      	bne.n	80167d4 <_sungetc_r+0x10>
 80167cc:	f04f 35ff 	mov.w	r5, #4294967295
 80167d0:	4628      	mov	r0, r5
 80167d2:	bd38      	pop	{r3, r4, r5, pc}
 80167d4:	8993      	ldrh	r3, [r2, #12]
 80167d6:	f023 0320 	bic.w	r3, r3, #32
 80167da:	8193      	strh	r3, [r2, #12]
 80167dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80167de:	6852      	ldr	r2, [r2, #4]
 80167e0:	b2cd      	uxtb	r5, r1
 80167e2:	b18b      	cbz	r3, 8016808 <_sungetc_r+0x44>
 80167e4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80167e6:	4293      	cmp	r3, r2
 80167e8:	dd08      	ble.n	80167fc <_sungetc_r+0x38>
 80167ea:	6823      	ldr	r3, [r4, #0]
 80167ec:	1e5a      	subs	r2, r3, #1
 80167ee:	6022      	str	r2, [r4, #0]
 80167f0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80167f4:	6863      	ldr	r3, [r4, #4]
 80167f6:	3301      	adds	r3, #1
 80167f8:	6063      	str	r3, [r4, #4]
 80167fa:	e7e9      	b.n	80167d0 <_sungetc_r+0xc>
 80167fc:	4621      	mov	r1, r4
 80167fe:	f000 fd3b 	bl	8017278 <__submore>
 8016802:	2800      	cmp	r0, #0
 8016804:	d0f1      	beq.n	80167ea <_sungetc_r+0x26>
 8016806:	e7e1      	b.n	80167cc <_sungetc_r+0x8>
 8016808:	6921      	ldr	r1, [r4, #16]
 801680a:	6823      	ldr	r3, [r4, #0]
 801680c:	b151      	cbz	r1, 8016824 <_sungetc_r+0x60>
 801680e:	4299      	cmp	r1, r3
 8016810:	d208      	bcs.n	8016824 <_sungetc_r+0x60>
 8016812:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8016816:	42a9      	cmp	r1, r5
 8016818:	d104      	bne.n	8016824 <_sungetc_r+0x60>
 801681a:	3b01      	subs	r3, #1
 801681c:	3201      	adds	r2, #1
 801681e:	6023      	str	r3, [r4, #0]
 8016820:	6062      	str	r2, [r4, #4]
 8016822:	e7d5      	b.n	80167d0 <_sungetc_r+0xc>
 8016824:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8016828:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801682c:	6363      	str	r3, [r4, #52]	; 0x34
 801682e:	2303      	movs	r3, #3
 8016830:	63a3      	str	r3, [r4, #56]	; 0x38
 8016832:	4623      	mov	r3, r4
 8016834:	f803 5f46 	strb.w	r5, [r3, #70]!
 8016838:	6023      	str	r3, [r4, #0]
 801683a:	2301      	movs	r3, #1
 801683c:	e7dc      	b.n	80167f8 <_sungetc_r+0x34>

0801683e <__ssrefill_r>:
 801683e:	b510      	push	{r4, lr}
 8016840:	460c      	mov	r4, r1
 8016842:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8016844:	b169      	cbz	r1, 8016862 <__ssrefill_r+0x24>
 8016846:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801684a:	4299      	cmp	r1, r3
 801684c:	d001      	beq.n	8016852 <__ssrefill_r+0x14>
 801684e:	f7fb ffd3 	bl	80127f8 <_free_r>
 8016852:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016854:	6063      	str	r3, [r4, #4]
 8016856:	2000      	movs	r0, #0
 8016858:	6360      	str	r0, [r4, #52]	; 0x34
 801685a:	b113      	cbz	r3, 8016862 <__ssrefill_r+0x24>
 801685c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801685e:	6023      	str	r3, [r4, #0]
 8016860:	bd10      	pop	{r4, pc}
 8016862:	6923      	ldr	r3, [r4, #16]
 8016864:	6023      	str	r3, [r4, #0]
 8016866:	2300      	movs	r3, #0
 8016868:	6063      	str	r3, [r4, #4]
 801686a:	89a3      	ldrh	r3, [r4, #12]
 801686c:	f043 0320 	orr.w	r3, r3, #32
 8016870:	81a3      	strh	r3, [r4, #12]
 8016872:	f04f 30ff 	mov.w	r0, #4294967295
 8016876:	e7f3      	b.n	8016860 <__ssrefill_r+0x22>

08016878 <__ssvfiscanf_r>:
 8016878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801687c:	460c      	mov	r4, r1
 801687e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8016882:	2100      	movs	r1, #0
 8016884:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8016888:	49a6      	ldr	r1, [pc, #664]	; (8016b24 <__ssvfiscanf_r+0x2ac>)
 801688a:	91a0      	str	r1, [sp, #640]	; 0x280
 801688c:	f10d 0804 	add.w	r8, sp, #4
 8016890:	49a5      	ldr	r1, [pc, #660]	; (8016b28 <__ssvfiscanf_r+0x2b0>)
 8016892:	4fa6      	ldr	r7, [pc, #664]	; (8016b2c <__ssvfiscanf_r+0x2b4>)
 8016894:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8016b30 <__ssvfiscanf_r+0x2b8>
 8016898:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801689c:	4606      	mov	r6, r0
 801689e:	91a1      	str	r1, [sp, #644]	; 0x284
 80168a0:	9300      	str	r3, [sp, #0]
 80168a2:	7813      	ldrb	r3, [r2, #0]
 80168a4:	2b00      	cmp	r3, #0
 80168a6:	f000 815a 	beq.w	8016b5e <__ssvfiscanf_r+0x2e6>
 80168aa:	5dd9      	ldrb	r1, [r3, r7]
 80168ac:	f011 0108 	ands.w	r1, r1, #8
 80168b0:	f102 0501 	add.w	r5, r2, #1
 80168b4:	d019      	beq.n	80168ea <__ssvfiscanf_r+0x72>
 80168b6:	6863      	ldr	r3, [r4, #4]
 80168b8:	2b00      	cmp	r3, #0
 80168ba:	dd0f      	ble.n	80168dc <__ssvfiscanf_r+0x64>
 80168bc:	6823      	ldr	r3, [r4, #0]
 80168be:	781a      	ldrb	r2, [r3, #0]
 80168c0:	5cba      	ldrb	r2, [r7, r2]
 80168c2:	0712      	lsls	r2, r2, #28
 80168c4:	d401      	bmi.n	80168ca <__ssvfiscanf_r+0x52>
 80168c6:	462a      	mov	r2, r5
 80168c8:	e7eb      	b.n	80168a2 <__ssvfiscanf_r+0x2a>
 80168ca:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80168cc:	3201      	adds	r2, #1
 80168ce:	9245      	str	r2, [sp, #276]	; 0x114
 80168d0:	6862      	ldr	r2, [r4, #4]
 80168d2:	3301      	adds	r3, #1
 80168d4:	3a01      	subs	r2, #1
 80168d6:	6062      	str	r2, [r4, #4]
 80168d8:	6023      	str	r3, [r4, #0]
 80168da:	e7ec      	b.n	80168b6 <__ssvfiscanf_r+0x3e>
 80168dc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80168de:	4621      	mov	r1, r4
 80168e0:	4630      	mov	r0, r6
 80168e2:	4798      	blx	r3
 80168e4:	2800      	cmp	r0, #0
 80168e6:	d0e9      	beq.n	80168bc <__ssvfiscanf_r+0x44>
 80168e8:	e7ed      	b.n	80168c6 <__ssvfiscanf_r+0x4e>
 80168ea:	2b25      	cmp	r3, #37	; 0x25
 80168ec:	d012      	beq.n	8016914 <__ssvfiscanf_r+0x9c>
 80168ee:	469a      	mov	sl, r3
 80168f0:	6863      	ldr	r3, [r4, #4]
 80168f2:	2b00      	cmp	r3, #0
 80168f4:	f340 8091 	ble.w	8016a1a <__ssvfiscanf_r+0x1a2>
 80168f8:	6822      	ldr	r2, [r4, #0]
 80168fa:	7813      	ldrb	r3, [r2, #0]
 80168fc:	4553      	cmp	r3, sl
 80168fe:	f040 812e 	bne.w	8016b5e <__ssvfiscanf_r+0x2e6>
 8016902:	6863      	ldr	r3, [r4, #4]
 8016904:	3b01      	subs	r3, #1
 8016906:	6063      	str	r3, [r4, #4]
 8016908:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801690a:	3201      	adds	r2, #1
 801690c:	3301      	adds	r3, #1
 801690e:	6022      	str	r2, [r4, #0]
 8016910:	9345      	str	r3, [sp, #276]	; 0x114
 8016912:	e7d8      	b.n	80168c6 <__ssvfiscanf_r+0x4e>
 8016914:	9141      	str	r1, [sp, #260]	; 0x104
 8016916:	9143      	str	r1, [sp, #268]	; 0x10c
 8016918:	7853      	ldrb	r3, [r2, #1]
 801691a:	2b2a      	cmp	r3, #42	; 0x2a
 801691c:	bf02      	ittt	eq
 801691e:	2310      	moveq	r3, #16
 8016920:	1c95      	addeq	r5, r2, #2
 8016922:	9341      	streq	r3, [sp, #260]	; 0x104
 8016924:	220a      	movs	r2, #10
 8016926:	46aa      	mov	sl, r5
 8016928:	f81a 1b01 	ldrb.w	r1, [sl], #1
 801692c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8016930:	2b09      	cmp	r3, #9
 8016932:	d91d      	bls.n	8016970 <__ssvfiscanf_r+0xf8>
 8016934:	487e      	ldr	r0, [pc, #504]	; (8016b30 <__ssvfiscanf_r+0x2b8>)
 8016936:	2203      	movs	r2, #3
 8016938:	f7e9 fc82 	bl	8000240 <memchr>
 801693c:	b140      	cbz	r0, 8016950 <__ssvfiscanf_r+0xd8>
 801693e:	2301      	movs	r3, #1
 8016940:	eba0 0009 	sub.w	r0, r0, r9
 8016944:	fa03 f000 	lsl.w	r0, r3, r0
 8016948:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801694a:	4318      	orrs	r0, r3
 801694c:	9041      	str	r0, [sp, #260]	; 0x104
 801694e:	4655      	mov	r5, sl
 8016950:	f815 3b01 	ldrb.w	r3, [r5], #1
 8016954:	2b78      	cmp	r3, #120	; 0x78
 8016956:	d806      	bhi.n	8016966 <__ssvfiscanf_r+0xee>
 8016958:	2b57      	cmp	r3, #87	; 0x57
 801695a:	d810      	bhi.n	801697e <__ssvfiscanf_r+0x106>
 801695c:	2b25      	cmp	r3, #37	; 0x25
 801695e:	d0c6      	beq.n	80168ee <__ssvfiscanf_r+0x76>
 8016960:	d856      	bhi.n	8016a10 <__ssvfiscanf_r+0x198>
 8016962:	2b00      	cmp	r3, #0
 8016964:	d064      	beq.n	8016a30 <__ssvfiscanf_r+0x1b8>
 8016966:	2303      	movs	r3, #3
 8016968:	9347      	str	r3, [sp, #284]	; 0x11c
 801696a:	230a      	movs	r3, #10
 801696c:	9342      	str	r3, [sp, #264]	; 0x108
 801696e:	e071      	b.n	8016a54 <__ssvfiscanf_r+0x1dc>
 8016970:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8016972:	fb02 1103 	mla	r1, r2, r3, r1
 8016976:	3930      	subs	r1, #48	; 0x30
 8016978:	9143      	str	r1, [sp, #268]	; 0x10c
 801697a:	4655      	mov	r5, sl
 801697c:	e7d3      	b.n	8016926 <__ssvfiscanf_r+0xae>
 801697e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8016982:	2a20      	cmp	r2, #32
 8016984:	d8ef      	bhi.n	8016966 <__ssvfiscanf_r+0xee>
 8016986:	a101      	add	r1, pc, #4	; (adr r1, 801698c <__ssvfiscanf_r+0x114>)
 8016988:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801698c:	08016a3f 	.word	0x08016a3f
 8016990:	08016967 	.word	0x08016967
 8016994:	08016967 	.word	0x08016967
 8016998:	08016a9d 	.word	0x08016a9d
 801699c:	08016967 	.word	0x08016967
 80169a0:	08016967 	.word	0x08016967
 80169a4:	08016967 	.word	0x08016967
 80169a8:	08016967 	.word	0x08016967
 80169ac:	08016967 	.word	0x08016967
 80169b0:	08016967 	.word	0x08016967
 80169b4:	08016967 	.word	0x08016967
 80169b8:	08016ab3 	.word	0x08016ab3
 80169bc:	08016a89 	.word	0x08016a89
 80169c0:	08016a17 	.word	0x08016a17
 80169c4:	08016a17 	.word	0x08016a17
 80169c8:	08016a17 	.word	0x08016a17
 80169cc:	08016967 	.word	0x08016967
 80169d0:	08016a8d 	.word	0x08016a8d
 80169d4:	08016967 	.word	0x08016967
 80169d8:	08016967 	.word	0x08016967
 80169dc:	08016967 	.word	0x08016967
 80169e0:	08016967 	.word	0x08016967
 80169e4:	08016ac3 	.word	0x08016ac3
 80169e8:	08016a95 	.word	0x08016a95
 80169ec:	08016a37 	.word	0x08016a37
 80169f0:	08016967 	.word	0x08016967
 80169f4:	08016967 	.word	0x08016967
 80169f8:	08016abf 	.word	0x08016abf
 80169fc:	08016967 	.word	0x08016967
 8016a00:	08016a89 	.word	0x08016a89
 8016a04:	08016967 	.word	0x08016967
 8016a08:	08016967 	.word	0x08016967
 8016a0c:	08016a3f 	.word	0x08016a3f
 8016a10:	3b45      	subs	r3, #69	; 0x45
 8016a12:	2b02      	cmp	r3, #2
 8016a14:	d8a7      	bhi.n	8016966 <__ssvfiscanf_r+0xee>
 8016a16:	2305      	movs	r3, #5
 8016a18:	e01b      	b.n	8016a52 <__ssvfiscanf_r+0x1da>
 8016a1a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016a1c:	4621      	mov	r1, r4
 8016a1e:	4630      	mov	r0, r6
 8016a20:	4798      	blx	r3
 8016a22:	2800      	cmp	r0, #0
 8016a24:	f43f af68 	beq.w	80168f8 <__ssvfiscanf_r+0x80>
 8016a28:	9844      	ldr	r0, [sp, #272]	; 0x110
 8016a2a:	2800      	cmp	r0, #0
 8016a2c:	f040 808d 	bne.w	8016b4a <__ssvfiscanf_r+0x2d2>
 8016a30:	f04f 30ff 	mov.w	r0, #4294967295
 8016a34:	e08f      	b.n	8016b56 <__ssvfiscanf_r+0x2de>
 8016a36:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8016a38:	f042 0220 	orr.w	r2, r2, #32
 8016a3c:	9241      	str	r2, [sp, #260]	; 0x104
 8016a3e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8016a40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016a44:	9241      	str	r2, [sp, #260]	; 0x104
 8016a46:	2210      	movs	r2, #16
 8016a48:	2b6f      	cmp	r3, #111	; 0x6f
 8016a4a:	9242      	str	r2, [sp, #264]	; 0x108
 8016a4c:	bf34      	ite	cc
 8016a4e:	2303      	movcc	r3, #3
 8016a50:	2304      	movcs	r3, #4
 8016a52:	9347      	str	r3, [sp, #284]	; 0x11c
 8016a54:	6863      	ldr	r3, [r4, #4]
 8016a56:	2b00      	cmp	r3, #0
 8016a58:	dd42      	ble.n	8016ae0 <__ssvfiscanf_r+0x268>
 8016a5a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016a5c:	0659      	lsls	r1, r3, #25
 8016a5e:	d404      	bmi.n	8016a6a <__ssvfiscanf_r+0x1f2>
 8016a60:	6823      	ldr	r3, [r4, #0]
 8016a62:	781a      	ldrb	r2, [r3, #0]
 8016a64:	5cba      	ldrb	r2, [r7, r2]
 8016a66:	0712      	lsls	r2, r2, #28
 8016a68:	d441      	bmi.n	8016aee <__ssvfiscanf_r+0x276>
 8016a6a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8016a6c:	2b02      	cmp	r3, #2
 8016a6e:	dc50      	bgt.n	8016b12 <__ssvfiscanf_r+0x29a>
 8016a70:	466b      	mov	r3, sp
 8016a72:	4622      	mov	r2, r4
 8016a74:	a941      	add	r1, sp, #260	; 0x104
 8016a76:	4630      	mov	r0, r6
 8016a78:	f000 f9d0 	bl	8016e1c <_scanf_chars>
 8016a7c:	2801      	cmp	r0, #1
 8016a7e:	d06e      	beq.n	8016b5e <__ssvfiscanf_r+0x2e6>
 8016a80:	2802      	cmp	r0, #2
 8016a82:	f47f af20 	bne.w	80168c6 <__ssvfiscanf_r+0x4e>
 8016a86:	e7cf      	b.n	8016a28 <__ssvfiscanf_r+0x1b0>
 8016a88:	220a      	movs	r2, #10
 8016a8a:	e7dd      	b.n	8016a48 <__ssvfiscanf_r+0x1d0>
 8016a8c:	2300      	movs	r3, #0
 8016a8e:	9342      	str	r3, [sp, #264]	; 0x108
 8016a90:	2303      	movs	r3, #3
 8016a92:	e7de      	b.n	8016a52 <__ssvfiscanf_r+0x1da>
 8016a94:	2308      	movs	r3, #8
 8016a96:	9342      	str	r3, [sp, #264]	; 0x108
 8016a98:	2304      	movs	r3, #4
 8016a9a:	e7da      	b.n	8016a52 <__ssvfiscanf_r+0x1da>
 8016a9c:	4629      	mov	r1, r5
 8016a9e:	4640      	mov	r0, r8
 8016aa0:	f000 fb2a 	bl	80170f8 <__sccl>
 8016aa4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016aa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016aaa:	9341      	str	r3, [sp, #260]	; 0x104
 8016aac:	4605      	mov	r5, r0
 8016aae:	2301      	movs	r3, #1
 8016ab0:	e7cf      	b.n	8016a52 <__ssvfiscanf_r+0x1da>
 8016ab2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016ab4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016ab8:	9341      	str	r3, [sp, #260]	; 0x104
 8016aba:	2300      	movs	r3, #0
 8016abc:	e7c9      	b.n	8016a52 <__ssvfiscanf_r+0x1da>
 8016abe:	2302      	movs	r3, #2
 8016ac0:	e7c7      	b.n	8016a52 <__ssvfiscanf_r+0x1da>
 8016ac2:	9841      	ldr	r0, [sp, #260]	; 0x104
 8016ac4:	06c3      	lsls	r3, r0, #27
 8016ac6:	f53f aefe 	bmi.w	80168c6 <__ssvfiscanf_r+0x4e>
 8016aca:	9b00      	ldr	r3, [sp, #0]
 8016acc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8016ace:	1d19      	adds	r1, r3, #4
 8016ad0:	9100      	str	r1, [sp, #0]
 8016ad2:	681b      	ldr	r3, [r3, #0]
 8016ad4:	f010 0f01 	tst.w	r0, #1
 8016ad8:	bf14      	ite	ne
 8016ada:	801a      	strhne	r2, [r3, #0]
 8016adc:	601a      	streq	r2, [r3, #0]
 8016ade:	e6f2      	b.n	80168c6 <__ssvfiscanf_r+0x4e>
 8016ae0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016ae2:	4621      	mov	r1, r4
 8016ae4:	4630      	mov	r0, r6
 8016ae6:	4798      	blx	r3
 8016ae8:	2800      	cmp	r0, #0
 8016aea:	d0b6      	beq.n	8016a5a <__ssvfiscanf_r+0x1e2>
 8016aec:	e79c      	b.n	8016a28 <__ssvfiscanf_r+0x1b0>
 8016aee:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8016af0:	3201      	adds	r2, #1
 8016af2:	9245      	str	r2, [sp, #276]	; 0x114
 8016af4:	6862      	ldr	r2, [r4, #4]
 8016af6:	3a01      	subs	r2, #1
 8016af8:	2a00      	cmp	r2, #0
 8016afa:	6062      	str	r2, [r4, #4]
 8016afc:	dd02      	ble.n	8016b04 <__ssvfiscanf_r+0x28c>
 8016afe:	3301      	adds	r3, #1
 8016b00:	6023      	str	r3, [r4, #0]
 8016b02:	e7ad      	b.n	8016a60 <__ssvfiscanf_r+0x1e8>
 8016b04:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016b06:	4621      	mov	r1, r4
 8016b08:	4630      	mov	r0, r6
 8016b0a:	4798      	blx	r3
 8016b0c:	2800      	cmp	r0, #0
 8016b0e:	d0a7      	beq.n	8016a60 <__ssvfiscanf_r+0x1e8>
 8016b10:	e78a      	b.n	8016a28 <__ssvfiscanf_r+0x1b0>
 8016b12:	2b04      	cmp	r3, #4
 8016b14:	dc0e      	bgt.n	8016b34 <__ssvfiscanf_r+0x2bc>
 8016b16:	466b      	mov	r3, sp
 8016b18:	4622      	mov	r2, r4
 8016b1a:	a941      	add	r1, sp, #260	; 0x104
 8016b1c:	4630      	mov	r0, r6
 8016b1e:	f000 f9d7 	bl	8016ed0 <_scanf_i>
 8016b22:	e7ab      	b.n	8016a7c <__ssvfiscanf_r+0x204>
 8016b24:	080167c5 	.word	0x080167c5
 8016b28:	0801683f 	.word	0x0801683f
 8016b2c:	0805da31 	.word	0x0805da31
 8016b30:	0805dd82 	.word	0x0805dd82
 8016b34:	4b0b      	ldr	r3, [pc, #44]	; (8016b64 <__ssvfiscanf_r+0x2ec>)
 8016b36:	2b00      	cmp	r3, #0
 8016b38:	f43f aec5 	beq.w	80168c6 <__ssvfiscanf_r+0x4e>
 8016b3c:	466b      	mov	r3, sp
 8016b3e:	4622      	mov	r2, r4
 8016b40:	a941      	add	r1, sp, #260	; 0x104
 8016b42:	4630      	mov	r0, r6
 8016b44:	f7fc fba2 	bl	801328c <_scanf_float>
 8016b48:	e798      	b.n	8016a7c <__ssvfiscanf_r+0x204>
 8016b4a:	89a3      	ldrh	r3, [r4, #12]
 8016b4c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8016b50:	bf18      	it	ne
 8016b52:	f04f 30ff 	movne.w	r0, #4294967295
 8016b56:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8016b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016b5e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8016b60:	e7f9      	b.n	8016b56 <__ssvfiscanf_r+0x2de>
 8016b62:	bf00      	nop
 8016b64:	0801328d 	.word	0x0801328d

08016b68 <__sfputc_r>:
 8016b68:	6893      	ldr	r3, [r2, #8]
 8016b6a:	3b01      	subs	r3, #1
 8016b6c:	2b00      	cmp	r3, #0
 8016b6e:	b410      	push	{r4}
 8016b70:	6093      	str	r3, [r2, #8]
 8016b72:	da08      	bge.n	8016b86 <__sfputc_r+0x1e>
 8016b74:	6994      	ldr	r4, [r2, #24]
 8016b76:	42a3      	cmp	r3, r4
 8016b78:	db01      	blt.n	8016b7e <__sfputc_r+0x16>
 8016b7a:	290a      	cmp	r1, #10
 8016b7c:	d103      	bne.n	8016b86 <__sfputc_r+0x1e>
 8016b7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016b82:	f000 bbb3 	b.w	80172ec <__swbuf_r>
 8016b86:	6813      	ldr	r3, [r2, #0]
 8016b88:	1c58      	adds	r0, r3, #1
 8016b8a:	6010      	str	r0, [r2, #0]
 8016b8c:	7019      	strb	r1, [r3, #0]
 8016b8e:	4608      	mov	r0, r1
 8016b90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016b94:	4770      	bx	lr

08016b96 <__sfputs_r>:
 8016b96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b98:	4606      	mov	r6, r0
 8016b9a:	460f      	mov	r7, r1
 8016b9c:	4614      	mov	r4, r2
 8016b9e:	18d5      	adds	r5, r2, r3
 8016ba0:	42ac      	cmp	r4, r5
 8016ba2:	d101      	bne.n	8016ba8 <__sfputs_r+0x12>
 8016ba4:	2000      	movs	r0, #0
 8016ba6:	e007      	b.n	8016bb8 <__sfputs_r+0x22>
 8016ba8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016bac:	463a      	mov	r2, r7
 8016bae:	4630      	mov	r0, r6
 8016bb0:	f7ff ffda 	bl	8016b68 <__sfputc_r>
 8016bb4:	1c43      	adds	r3, r0, #1
 8016bb6:	d1f3      	bne.n	8016ba0 <__sfputs_r+0xa>
 8016bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016bbc <_vfiprintf_r>:
 8016bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016bc0:	460d      	mov	r5, r1
 8016bc2:	b09d      	sub	sp, #116	; 0x74
 8016bc4:	4614      	mov	r4, r2
 8016bc6:	4698      	mov	r8, r3
 8016bc8:	4606      	mov	r6, r0
 8016bca:	b118      	cbz	r0, 8016bd4 <_vfiprintf_r+0x18>
 8016bcc:	6983      	ldr	r3, [r0, #24]
 8016bce:	b90b      	cbnz	r3, 8016bd4 <_vfiprintf_r+0x18>
 8016bd0:	f000 fd7c 	bl	80176cc <__sinit>
 8016bd4:	4b89      	ldr	r3, [pc, #548]	; (8016dfc <_vfiprintf_r+0x240>)
 8016bd6:	429d      	cmp	r5, r3
 8016bd8:	d11b      	bne.n	8016c12 <_vfiprintf_r+0x56>
 8016bda:	6875      	ldr	r5, [r6, #4]
 8016bdc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016bde:	07d9      	lsls	r1, r3, #31
 8016be0:	d405      	bmi.n	8016bee <_vfiprintf_r+0x32>
 8016be2:	89ab      	ldrh	r3, [r5, #12]
 8016be4:	059a      	lsls	r2, r3, #22
 8016be6:	d402      	bmi.n	8016bee <_vfiprintf_r+0x32>
 8016be8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016bea:	f000 fe0d 	bl	8017808 <__retarget_lock_acquire_recursive>
 8016bee:	89ab      	ldrh	r3, [r5, #12]
 8016bf0:	071b      	lsls	r3, r3, #28
 8016bf2:	d501      	bpl.n	8016bf8 <_vfiprintf_r+0x3c>
 8016bf4:	692b      	ldr	r3, [r5, #16]
 8016bf6:	b9eb      	cbnz	r3, 8016c34 <_vfiprintf_r+0x78>
 8016bf8:	4629      	mov	r1, r5
 8016bfa:	4630      	mov	r0, r6
 8016bfc:	f000 fbd6 	bl	80173ac <__swsetup_r>
 8016c00:	b1c0      	cbz	r0, 8016c34 <_vfiprintf_r+0x78>
 8016c02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016c04:	07dc      	lsls	r4, r3, #31
 8016c06:	d50e      	bpl.n	8016c26 <_vfiprintf_r+0x6a>
 8016c08:	f04f 30ff 	mov.w	r0, #4294967295
 8016c0c:	b01d      	add	sp, #116	; 0x74
 8016c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c12:	4b7b      	ldr	r3, [pc, #492]	; (8016e00 <_vfiprintf_r+0x244>)
 8016c14:	429d      	cmp	r5, r3
 8016c16:	d101      	bne.n	8016c1c <_vfiprintf_r+0x60>
 8016c18:	68b5      	ldr	r5, [r6, #8]
 8016c1a:	e7df      	b.n	8016bdc <_vfiprintf_r+0x20>
 8016c1c:	4b79      	ldr	r3, [pc, #484]	; (8016e04 <_vfiprintf_r+0x248>)
 8016c1e:	429d      	cmp	r5, r3
 8016c20:	bf08      	it	eq
 8016c22:	68f5      	ldreq	r5, [r6, #12]
 8016c24:	e7da      	b.n	8016bdc <_vfiprintf_r+0x20>
 8016c26:	89ab      	ldrh	r3, [r5, #12]
 8016c28:	0598      	lsls	r0, r3, #22
 8016c2a:	d4ed      	bmi.n	8016c08 <_vfiprintf_r+0x4c>
 8016c2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016c2e:	f000 fdec 	bl	801780a <__retarget_lock_release_recursive>
 8016c32:	e7e9      	b.n	8016c08 <_vfiprintf_r+0x4c>
 8016c34:	2300      	movs	r3, #0
 8016c36:	9309      	str	r3, [sp, #36]	; 0x24
 8016c38:	2320      	movs	r3, #32
 8016c3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016c3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8016c42:	2330      	movs	r3, #48	; 0x30
 8016c44:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8016e08 <_vfiprintf_r+0x24c>
 8016c48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016c4c:	f04f 0901 	mov.w	r9, #1
 8016c50:	4623      	mov	r3, r4
 8016c52:	469a      	mov	sl, r3
 8016c54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016c58:	b10a      	cbz	r2, 8016c5e <_vfiprintf_r+0xa2>
 8016c5a:	2a25      	cmp	r2, #37	; 0x25
 8016c5c:	d1f9      	bne.n	8016c52 <_vfiprintf_r+0x96>
 8016c5e:	ebba 0b04 	subs.w	fp, sl, r4
 8016c62:	d00b      	beq.n	8016c7c <_vfiprintf_r+0xc0>
 8016c64:	465b      	mov	r3, fp
 8016c66:	4622      	mov	r2, r4
 8016c68:	4629      	mov	r1, r5
 8016c6a:	4630      	mov	r0, r6
 8016c6c:	f7ff ff93 	bl	8016b96 <__sfputs_r>
 8016c70:	3001      	adds	r0, #1
 8016c72:	f000 80aa 	beq.w	8016dca <_vfiprintf_r+0x20e>
 8016c76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016c78:	445a      	add	r2, fp
 8016c7a:	9209      	str	r2, [sp, #36]	; 0x24
 8016c7c:	f89a 3000 	ldrb.w	r3, [sl]
 8016c80:	2b00      	cmp	r3, #0
 8016c82:	f000 80a2 	beq.w	8016dca <_vfiprintf_r+0x20e>
 8016c86:	2300      	movs	r3, #0
 8016c88:	f04f 32ff 	mov.w	r2, #4294967295
 8016c8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016c90:	f10a 0a01 	add.w	sl, sl, #1
 8016c94:	9304      	str	r3, [sp, #16]
 8016c96:	9307      	str	r3, [sp, #28]
 8016c98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016c9c:	931a      	str	r3, [sp, #104]	; 0x68
 8016c9e:	4654      	mov	r4, sl
 8016ca0:	2205      	movs	r2, #5
 8016ca2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016ca6:	4858      	ldr	r0, [pc, #352]	; (8016e08 <_vfiprintf_r+0x24c>)
 8016ca8:	f7e9 faca 	bl	8000240 <memchr>
 8016cac:	9a04      	ldr	r2, [sp, #16]
 8016cae:	b9d8      	cbnz	r0, 8016ce8 <_vfiprintf_r+0x12c>
 8016cb0:	06d1      	lsls	r1, r2, #27
 8016cb2:	bf44      	itt	mi
 8016cb4:	2320      	movmi	r3, #32
 8016cb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016cba:	0713      	lsls	r3, r2, #28
 8016cbc:	bf44      	itt	mi
 8016cbe:	232b      	movmi	r3, #43	; 0x2b
 8016cc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016cc4:	f89a 3000 	ldrb.w	r3, [sl]
 8016cc8:	2b2a      	cmp	r3, #42	; 0x2a
 8016cca:	d015      	beq.n	8016cf8 <_vfiprintf_r+0x13c>
 8016ccc:	9a07      	ldr	r2, [sp, #28]
 8016cce:	4654      	mov	r4, sl
 8016cd0:	2000      	movs	r0, #0
 8016cd2:	f04f 0c0a 	mov.w	ip, #10
 8016cd6:	4621      	mov	r1, r4
 8016cd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016cdc:	3b30      	subs	r3, #48	; 0x30
 8016cde:	2b09      	cmp	r3, #9
 8016ce0:	d94e      	bls.n	8016d80 <_vfiprintf_r+0x1c4>
 8016ce2:	b1b0      	cbz	r0, 8016d12 <_vfiprintf_r+0x156>
 8016ce4:	9207      	str	r2, [sp, #28]
 8016ce6:	e014      	b.n	8016d12 <_vfiprintf_r+0x156>
 8016ce8:	eba0 0308 	sub.w	r3, r0, r8
 8016cec:	fa09 f303 	lsl.w	r3, r9, r3
 8016cf0:	4313      	orrs	r3, r2
 8016cf2:	9304      	str	r3, [sp, #16]
 8016cf4:	46a2      	mov	sl, r4
 8016cf6:	e7d2      	b.n	8016c9e <_vfiprintf_r+0xe2>
 8016cf8:	9b03      	ldr	r3, [sp, #12]
 8016cfa:	1d19      	adds	r1, r3, #4
 8016cfc:	681b      	ldr	r3, [r3, #0]
 8016cfe:	9103      	str	r1, [sp, #12]
 8016d00:	2b00      	cmp	r3, #0
 8016d02:	bfbb      	ittet	lt
 8016d04:	425b      	neglt	r3, r3
 8016d06:	f042 0202 	orrlt.w	r2, r2, #2
 8016d0a:	9307      	strge	r3, [sp, #28]
 8016d0c:	9307      	strlt	r3, [sp, #28]
 8016d0e:	bfb8      	it	lt
 8016d10:	9204      	strlt	r2, [sp, #16]
 8016d12:	7823      	ldrb	r3, [r4, #0]
 8016d14:	2b2e      	cmp	r3, #46	; 0x2e
 8016d16:	d10c      	bne.n	8016d32 <_vfiprintf_r+0x176>
 8016d18:	7863      	ldrb	r3, [r4, #1]
 8016d1a:	2b2a      	cmp	r3, #42	; 0x2a
 8016d1c:	d135      	bne.n	8016d8a <_vfiprintf_r+0x1ce>
 8016d1e:	9b03      	ldr	r3, [sp, #12]
 8016d20:	1d1a      	adds	r2, r3, #4
 8016d22:	681b      	ldr	r3, [r3, #0]
 8016d24:	9203      	str	r2, [sp, #12]
 8016d26:	2b00      	cmp	r3, #0
 8016d28:	bfb8      	it	lt
 8016d2a:	f04f 33ff 	movlt.w	r3, #4294967295
 8016d2e:	3402      	adds	r4, #2
 8016d30:	9305      	str	r3, [sp, #20]
 8016d32:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8016e18 <_vfiprintf_r+0x25c>
 8016d36:	7821      	ldrb	r1, [r4, #0]
 8016d38:	2203      	movs	r2, #3
 8016d3a:	4650      	mov	r0, sl
 8016d3c:	f7e9 fa80 	bl	8000240 <memchr>
 8016d40:	b140      	cbz	r0, 8016d54 <_vfiprintf_r+0x198>
 8016d42:	2340      	movs	r3, #64	; 0x40
 8016d44:	eba0 000a 	sub.w	r0, r0, sl
 8016d48:	fa03 f000 	lsl.w	r0, r3, r0
 8016d4c:	9b04      	ldr	r3, [sp, #16]
 8016d4e:	4303      	orrs	r3, r0
 8016d50:	3401      	adds	r4, #1
 8016d52:	9304      	str	r3, [sp, #16]
 8016d54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016d58:	482c      	ldr	r0, [pc, #176]	; (8016e0c <_vfiprintf_r+0x250>)
 8016d5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016d5e:	2206      	movs	r2, #6
 8016d60:	f7e9 fa6e 	bl	8000240 <memchr>
 8016d64:	2800      	cmp	r0, #0
 8016d66:	d03f      	beq.n	8016de8 <_vfiprintf_r+0x22c>
 8016d68:	4b29      	ldr	r3, [pc, #164]	; (8016e10 <_vfiprintf_r+0x254>)
 8016d6a:	bb1b      	cbnz	r3, 8016db4 <_vfiprintf_r+0x1f8>
 8016d6c:	9b03      	ldr	r3, [sp, #12]
 8016d6e:	3307      	adds	r3, #7
 8016d70:	f023 0307 	bic.w	r3, r3, #7
 8016d74:	3308      	adds	r3, #8
 8016d76:	9303      	str	r3, [sp, #12]
 8016d78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016d7a:	443b      	add	r3, r7
 8016d7c:	9309      	str	r3, [sp, #36]	; 0x24
 8016d7e:	e767      	b.n	8016c50 <_vfiprintf_r+0x94>
 8016d80:	fb0c 3202 	mla	r2, ip, r2, r3
 8016d84:	460c      	mov	r4, r1
 8016d86:	2001      	movs	r0, #1
 8016d88:	e7a5      	b.n	8016cd6 <_vfiprintf_r+0x11a>
 8016d8a:	2300      	movs	r3, #0
 8016d8c:	3401      	adds	r4, #1
 8016d8e:	9305      	str	r3, [sp, #20]
 8016d90:	4619      	mov	r1, r3
 8016d92:	f04f 0c0a 	mov.w	ip, #10
 8016d96:	4620      	mov	r0, r4
 8016d98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016d9c:	3a30      	subs	r2, #48	; 0x30
 8016d9e:	2a09      	cmp	r2, #9
 8016da0:	d903      	bls.n	8016daa <_vfiprintf_r+0x1ee>
 8016da2:	2b00      	cmp	r3, #0
 8016da4:	d0c5      	beq.n	8016d32 <_vfiprintf_r+0x176>
 8016da6:	9105      	str	r1, [sp, #20]
 8016da8:	e7c3      	b.n	8016d32 <_vfiprintf_r+0x176>
 8016daa:	fb0c 2101 	mla	r1, ip, r1, r2
 8016dae:	4604      	mov	r4, r0
 8016db0:	2301      	movs	r3, #1
 8016db2:	e7f0      	b.n	8016d96 <_vfiprintf_r+0x1da>
 8016db4:	ab03      	add	r3, sp, #12
 8016db6:	9300      	str	r3, [sp, #0]
 8016db8:	462a      	mov	r2, r5
 8016dba:	4b16      	ldr	r3, [pc, #88]	; (8016e14 <_vfiprintf_r+0x258>)
 8016dbc:	a904      	add	r1, sp, #16
 8016dbe:	4630      	mov	r0, r6
 8016dc0:	f7fb fe9a 	bl	8012af8 <_printf_float>
 8016dc4:	4607      	mov	r7, r0
 8016dc6:	1c78      	adds	r0, r7, #1
 8016dc8:	d1d6      	bne.n	8016d78 <_vfiprintf_r+0x1bc>
 8016dca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016dcc:	07d9      	lsls	r1, r3, #31
 8016dce:	d405      	bmi.n	8016ddc <_vfiprintf_r+0x220>
 8016dd0:	89ab      	ldrh	r3, [r5, #12]
 8016dd2:	059a      	lsls	r2, r3, #22
 8016dd4:	d402      	bmi.n	8016ddc <_vfiprintf_r+0x220>
 8016dd6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016dd8:	f000 fd17 	bl	801780a <__retarget_lock_release_recursive>
 8016ddc:	89ab      	ldrh	r3, [r5, #12]
 8016dde:	065b      	lsls	r3, r3, #25
 8016de0:	f53f af12 	bmi.w	8016c08 <_vfiprintf_r+0x4c>
 8016de4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016de6:	e711      	b.n	8016c0c <_vfiprintf_r+0x50>
 8016de8:	ab03      	add	r3, sp, #12
 8016dea:	9300      	str	r3, [sp, #0]
 8016dec:	462a      	mov	r2, r5
 8016dee:	4b09      	ldr	r3, [pc, #36]	; (8016e14 <_vfiprintf_r+0x258>)
 8016df0:	a904      	add	r1, sp, #16
 8016df2:	4630      	mov	r0, r6
 8016df4:	f7fc f924 	bl	8013040 <_printf_i>
 8016df8:	e7e4      	b.n	8016dc4 <_vfiprintf_r+0x208>
 8016dfa:	bf00      	nop
 8016dfc:	0805ddc8 	.word	0x0805ddc8
 8016e00:	0805dde8 	.word	0x0805dde8
 8016e04:	0805dda8 	.word	0x0805dda8
 8016e08:	0805dd7c 	.word	0x0805dd7c
 8016e0c:	0805dd86 	.word	0x0805dd86
 8016e10:	08012af9 	.word	0x08012af9
 8016e14:	08016b97 	.word	0x08016b97
 8016e18:	0805dd82 	.word	0x0805dd82

08016e1c <_scanf_chars>:
 8016e1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016e20:	4615      	mov	r5, r2
 8016e22:	688a      	ldr	r2, [r1, #8]
 8016e24:	4680      	mov	r8, r0
 8016e26:	460c      	mov	r4, r1
 8016e28:	b932      	cbnz	r2, 8016e38 <_scanf_chars+0x1c>
 8016e2a:	698a      	ldr	r2, [r1, #24]
 8016e2c:	2a00      	cmp	r2, #0
 8016e2e:	bf0c      	ite	eq
 8016e30:	2201      	moveq	r2, #1
 8016e32:	f04f 32ff 	movne.w	r2, #4294967295
 8016e36:	608a      	str	r2, [r1, #8]
 8016e38:	6822      	ldr	r2, [r4, #0]
 8016e3a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8016ecc <_scanf_chars+0xb0>
 8016e3e:	06d1      	lsls	r1, r2, #27
 8016e40:	bf5f      	itttt	pl
 8016e42:	681a      	ldrpl	r2, [r3, #0]
 8016e44:	1d11      	addpl	r1, r2, #4
 8016e46:	6019      	strpl	r1, [r3, #0]
 8016e48:	6816      	ldrpl	r6, [r2, #0]
 8016e4a:	2700      	movs	r7, #0
 8016e4c:	69a0      	ldr	r0, [r4, #24]
 8016e4e:	b188      	cbz	r0, 8016e74 <_scanf_chars+0x58>
 8016e50:	2801      	cmp	r0, #1
 8016e52:	d107      	bne.n	8016e64 <_scanf_chars+0x48>
 8016e54:	682a      	ldr	r2, [r5, #0]
 8016e56:	7811      	ldrb	r1, [r2, #0]
 8016e58:	6962      	ldr	r2, [r4, #20]
 8016e5a:	5c52      	ldrb	r2, [r2, r1]
 8016e5c:	b952      	cbnz	r2, 8016e74 <_scanf_chars+0x58>
 8016e5e:	2f00      	cmp	r7, #0
 8016e60:	d031      	beq.n	8016ec6 <_scanf_chars+0xaa>
 8016e62:	e022      	b.n	8016eaa <_scanf_chars+0x8e>
 8016e64:	2802      	cmp	r0, #2
 8016e66:	d120      	bne.n	8016eaa <_scanf_chars+0x8e>
 8016e68:	682b      	ldr	r3, [r5, #0]
 8016e6a:	781b      	ldrb	r3, [r3, #0]
 8016e6c:	f813 3009 	ldrb.w	r3, [r3, r9]
 8016e70:	071b      	lsls	r3, r3, #28
 8016e72:	d41a      	bmi.n	8016eaa <_scanf_chars+0x8e>
 8016e74:	6823      	ldr	r3, [r4, #0]
 8016e76:	06da      	lsls	r2, r3, #27
 8016e78:	bf5e      	ittt	pl
 8016e7a:	682b      	ldrpl	r3, [r5, #0]
 8016e7c:	781b      	ldrbpl	r3, [r3, #0]
 8016e7e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8016e82:	682a      	ldr	r2, [r5, #0]
 8016e84:	686b      	ldr	r3, [r5, #4]
 8016e86:	3201      	adds	r2, #1
 8016e88:	602a      	str	r2, [r5, #0]
 8016e8a:	68a2      	ldr	r2, [r4, #8]
 8016e8c:	3b01      	subs	r3, #1
 8016e8e:	3a01      	subs	r2, #1
 8016e90:	606b      	str	r3, [r5, #4]
 8016e92:	3701      	adds	r7, #1
 8016e94:	60a2      	str	r2, [r4, #8]
 8016e96:	b142      	cbz	r2, 8016eaa <_scanf_chars+0x8e>
 8016e98:	2b00      	cmp	r3, #0
 8016e9a:	dcd7      	bgt.n	8016e4c <_scanf_chars+0x30>
 8016e9c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016ea0:	4629      	mov	r1, r5
 8016ea2:	4640      	mov	r0, r8
 8016ea4:	4798      	blx	r3
 8016ea6:	2800      	cmp	r0, #0
 8016ea8:	d0d0      	beq.n	8016e4c <_scanf_chars+0x30>
 8016eaa:	6823      	ldr	r3, [r4, #0]
 8016eac:	f013 0310 	ands.w	r3, r3, #16
 8016eb0:	d105      	bne.n	8016ebe <_scanf_chars+0xa2>
 8016eb2:	68e2      	ldr	r2, [r4, #12]
 8016eb4:	3201      	adds	r2, #1
 8016eb6:	60e2      	str	r2, [r4, #12]
 8016eb8:	69a2      	ldr	r2, [r4, #24]
 8016eba:	b102      	cbz	r2, 8016ebe <_scanf_chars+0xa2>
 8016ebc:	7033      	strb	r3, [r6, #0]
 8016ebe:	6923      	ldr	r3, [r4, #16]
 8016ec0:	443b      	add	r3, r7
 8016ec2:	6123      	str	r3, [r4, #16]
 8016ec4:	2000      	movs	r0, #0
 8016ec6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016eca:	bf00      	nop
 8016ecc:	0805da31 	.word	0x0805da31

08016ed0 <_scanf_i>:
 8016ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ed4:	4698      	mov	r8, r3
 8016ed6:	4b76      	ldr	r3, [pc, #472]	; (80170b0 <_scanf_i+0x1e0>)
 8016ed8:	460c      	mov	r4, r1
 8016eda:	4682      	mov	sl, r0
 8016edc:	4616      	mov	r6, r2
 8016ede:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016ee2:	b087      	sub	sp, #28
 8016ee4:	ab03      	add	r3, sp, #12
 8016ee6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8016eea:	4b72      	ldr	r3, [pc, #456]	; (80170b4 <_scanf_i+0x1e4>)
 8016eec:	69a1      	ldr	r1, [r4, #24]
 8016eee:	4a72      	ldr	r2, [pc, #456]	; (80170b8 <_scanf_i+0x1e8>)
 8016ef0:	2903      	cmp	r1, #3
 8016ef2:	bf18      	it	ne
 8016ef4:	461a      	movne	r2, r3
 8016ef6:	68a3      	ldr	r3, [r4, #8]
 8016ef8:	9201      	str	r2, [sp, #4]
 8016efa:	1e5a      	subs	r2, r3, #1
 8016efc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8016f00:	bf88      	it	hi
 8016f02:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8016f06:	4627      	mov	r7, r4
 8016f08:	bf82      	ittt	hi
 8016f0a:	eb03 0905 	addhi.w	r9, r3, r5
 8016f0e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8016f12:	60a3      	strhi	r3, [r4, #8]
 8016f14:	f857 3b1c 	ldr.w	r3, [r7], #28
 8016f18:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8016f1c:	bf98      	it	ls
 8016f1e:	f04f 0900 	movls.w	r9, #0
 8016f22:	6023      	str	r3, [r4, #0]
 8016f24:	463d      	mov	r5, r7
 8016f26:	f04f 0b00 	mov.w	fp, #0
 8016f2a:	6831      	ldr	r1, [r6, #0]
 8016f2c:	ab03      	add	r3, sp, #12
 8016f2e:	7809      	ldrb	r1, [r1, #0]
 8016f30:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8016f34:	2202      	movs	r2, #2
 8016f36:	f7e9 f983 	bl	8000240 <memchr>
 8016f3a:	b328      	cbz	r0, 8016f88 <_scanf_i+0xb8>
 8016f3c:	f1bb 0f01 	cmp.w	fp, #1
 8016f40:	d159      	bne.n	8016ff6 <_scanf_i+0x126>
 8016f42:	6862      	ldr	r2, [r4, #4]
 8016f44:	b92a      	cbnz	r2, 8016f52 <_scanf_i+0x82>
 8016f46:	6822      	ldr	r2, [r4, #0]
 8016f48:	2308      	movs	r3, #8
 8016f4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016f4e:	6063      	str	r3, [r4, #4]
 8016f50:	6022      	str	r2, [r4, #0]
 8016f52:	6822      	ldr	r2, [r4, #0]
 8016f54:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8016f58:	6022      	str	r2, [r4, #0]
 8016f5a:	68a2      	ldr	r2, [r4, #8]
 8016f5c:	1e51      	subs	r1, r2, #1
 8016f5e:	60a1      	str	r1, [r4, #8]
 8016f60:	b192      	cbz	r2, 8016f88 <_scanf_i+0xb8>
 8016f62:	6832      	ldr	r2, [r6, #0]
 8016f64:	1c51      	adds	r1, r2, #1
 8016f66:	6031      	str	r1, [r6, #0]
 8016f68:	7812      	ldrb	r2, [r2, #0]
 8016f6a:	f805 2b01 	strb.w	r2, [r5], #1
 8016f6e:	6872      	ldr	r2, [r6, #4]
 8016f70:	3a01      	subs	r2, #1
 8016f72:	2a00      	cmp	r2, #0
 8016f74:	6072      	str	r2, [r6, #4]
 8016f76:	dc07      	bgt.n	8016f88 <_scanf_i+0xb8>
 8016f78:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8016f7c:	4631      	mov	r1, r6
 8016f7e:	4650      	mov	r0, sl
 8016f80:	4790      	blx	r2
 8016f82:	2800      	cmp	r0, #0
 8016f84:	f040 8085 	bne.w	8017092 <_scanf_i+0x1c2>
 8016f88:	f10b 0b01 	add.w	fp, fp, #1
 8016f8c:	f1bb 0f03 	cmp.w	fp, #3
 8016f90:	d1cb      	bne.n	8016f2a <_scanf_i+0x5a>
 8016f92:	6863      	ldr	r3, [r4, #4]
 8016f94:	b90b      	cbnz	r3, 8016f9a <_scanf_i+0xca>
 8016f96:	230a      	movs	r3, #10
 8016f98:	6063      	str	r3, [r4, #4]
 8016f9a:	6863      	ldr	r3, [r4, #4]
 8016f9c:	4947      	ldr	r1, [pc, #284]	; (80170bc <_scanf_i+0x1ec>)
 8016f9e:	6960      	ldr	r0, [r4, #20]
 8016fa0:	1ac9      	subs	r1, r1, r3
 8016fa2:	f000 f8a9 	bl	80170f8 <__sccl>
 8016fa6:	f04f 0b00 	mov.w	fp, #0
 8016faa:	68a3      	ldr	r3, [r4, #8]
 8016fac:	6822      	ldr	r2, [r4, #0]
 8016fae:	2b00      	cmp	r3, #0
 8016fb0:	d03d      	beq.n	801702e <_scanf_i+0x15e>
 8016fb2:	6831      	ldr	r1, [r6, #0]
 8016fb4:	6960      	ldr	r0, [r4, #20]
 8016fb6:	f891 c000 	ldrb.w	ip, [r1]
 8016fba:	f810 000c 	ldrb.w	r0, [r0, ip]
 8016fbe:	2800      	cmp	r0, #0
 8016fc0:	d035      	beq.n	801702e <_scanf_i+0x15e>
 8016fc2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8016fc6:	d124      	bne.n	8017012 <_scanf_i+0x142>
 8016fc8:	0510      	lsls	r0, r2, #20
 8016fca:	d522      	bpl.n	8017012 <_scanf_i+0x142>
 8016fcc:	f10b 0b01 	add.w	fp, fp, #1
 8016fd0:	f1b9 0f00 	cmp.w	r9, #0
 8016fd4:	d003      	beq.n	8016fde <_scanf_i+0x10e>
 8016fd6:	3301      	adds	r3, #1
 8016fd8:	f109 39ff 	add.w	r9, r9, #4294967295
 8016fdc:	60a3      	str	r3, [r4, #8]
 8016fde:	6873      	ldr	r3, [r6, #4]
 8016fe0:	3b01      	subs	r3, #1
 8016fe2:	2b00      	cmp	r3, #0
 8016fe4:	6073      	str	r3, [r6, #4]
 8016fe6:	dd1b      	ble.n	8017020 <_scanf_i+0x150>
 8016fe8:	6833      	ldr	r3, [r6, #0]
 8016fea:	3301      	adds	r3, #1
 8016fec:	6033      	str	r3, [r6, #0]
 8016fee:	68a3      	ldr	r3, [r4, #8]
 8016ff0:	3b01      	subs	r3, #1
 8016ff2:	60a3      	str	r3, [r4, #8]
 8016ff4:	e7d9      	b.n	8016faa <_scanf_i+0xda>
 8016ff6:	f1bb 0f02 	cmp.w	fp, #2
 8016ffa:	d1ae      	bne.n	8016f5a <_scanf_i+0x8a>
 8016ffc:	6822      	ldr	r2, [r4, #0]
 8016ffe:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8017002:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8017006:	d1bf      	bne.n	8016f88 <_scanf_i+0xb8>
 8017008:	2310      	movs	r3, #16
 801700a:	6063      	str	r3, [r4, #4]
 801700c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017010:	e7a2      	b.n	8016f58 <_scanf_i+0x88>
 8017012:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8017016:	6022      	str	r2, [r4, #0]
 8017018:	780b      	ldrb	r3, [r1, #0]
 801701a:	f805 3b01 	strb.w	r3, [r5], #1
 801701e:	e7de      	b.n	8016fde <_scanf_i+0x10e>
 8017020:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017024:	4631      	mov	r1, r6
 8017026:	4650      	mov	r0, sl
 8017028:	4798      	blx	r3
 801702a:	2800      	cmp	r0, #0
 801702c:	d0df      	beq.n	8016fee <_scanf_i+0x11e>
 801702e:	6823      	ldr	r3, [r4, #0]
 8017030:	05db      	lsls	r3, r3, #23
 8017032:	d50d      	bpl.n	8017050 <_scanf_i+0x180>
 8017034:	42bd      	cmp	r5, r7
 8017036:	d909      	bls.n	801704c <_scanf_i+0x17c>
 8017038:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801703c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017040:	4632      	mov	r2, r6
 8017042:	4650      	mov	r0, sl
 8017044:	4798      	blx	r3
 8017046:	f105 39ff 	add.w	r9, r5, #4294967295
 801704a:	464d      	mov	r5, r9
 801704c:	42bd      	cmp	r5, r7
 801704e:	d02d      	beq.n	80170ac <_scanf_i+0x1dc>
 8017050:	6822      	ldr	r2, [r4, #0]
 8017052:	f012 0210 	ands.w	r2, r2, #16
 8017056:	d113      	bne.n	8017080 <_scanf_i+0x1b0>
 8017058:	702a      	strb	r2, [r5, #0]
 801705a:	6863      	ldr	r3, [r4, #4]
 801705c:	9e01      	ldr	r6, [sp, #4]
 801705e:	4639      	mov	r1, r7
 8017060:	4650      	mov	r0, sl
 8017062:	47b0      	blx	r6
 8017064:	6821      	ldr	r1, [r4, #0]
 8017066:	f8d8 3000 	ldr.w	r3, [r8]
 801706a:	f011 0f20 	tst.w	r1, #32
 801706e:	d013      	beq.n	8017098 <_scanf_i+0x1c8>
 8017070:	1d1a      	adds	r2, r3, #4
 8017072:	f8c8 2000 	str.w	r2, [r8]
 8017076:	681b      	ldr	r3, [r3, #0]
 8017078:	6018      	str	r0, [r3, #0]
 801707a:	68e3      	ldr	r3, [r4, #12]
 801707c:	3301      	adds	r3, #1
 801707e:	60e3      	str	r3, [r4, #12]
 8017080:	1bed      	subs	r5, r5, r7
 8017082:	44ab      	add	fp, r5
 8017084:	6925      	ldr	r5, [r4, #16]
 8017086:	445d      	add	r5, fp
 8017088:	6125      	str	r5, [r4, #16]
 801708a:	2000      	movs	r0, #0
 801708c:	b007      	add	sp, #28
 801708e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017092:	f04f 0b00 	mov.w	fp, #0
 8017096:	e7ca      	b.n	801702e <_scanf_i+0x15e>
 8017098:	1d1a      	adds	r2, r3, #4
 801709a:	f8c8 2000 	str.w	r2, [r8]
 801709e:	681b      	ldr	r3, [r3, #0]
 80170a0:	f011 0f01 	tst.w	r1, #1
 80170a4:	bf14      	ite	ne
 80170a6:	8018      	strhne	r0, [r3, #0]
 80170a8:	6018      	streq	r0, [r3, #0]
 80170aa:	e7e6      	b.n	801707a <_scanf_i+0x1aa>
 80170ac:	2001      	movs	r0, #1
 80170ae:	e7ed      	b.n	801708c <_scanf_i+0x1bc>
 80170b0:	08018e10 	.word	0x08018e10
 80170b4:	08017275 	.word	0x08017275
 80170b8:	0801461d 	.word	0x0801461d
 80170bc:	0805dda6 	.word	0x0805dda6

080170c0 <_read_r>:
 80170c0:	b538      	push	{r3, r4, r5, lr}
 80170c2:	4d07      	ldr	r5, [pc, #28]	; (80170e0 <_read_r+0x20>)
 80170c4:	4604      	mov	r4, r0
 80170c6:	4608      	mov	r0, r1
 80170c8:	4611      	mov	r1, r2
 80170ca:	2200      	movs	r2, #0
 80170cc:	602a      	str	r2, [r5, #0]
 80170ce:	461a      	mov	r2, r3
 80170d0:	f001 fc00 	bl	80188d4 <_read>
 80170d4:	1c43      	adds	r3, r0, #1
 80170d6:	d102      	bne.n	80170de <_read_r+0x1e>
 80170d8:	682b      	ldr	r3, [r5, #0]
 80170da:	b103      	cbz	r3, 80170de <_read_r+0x1e>
 80170dc:	6023      	str	r3, [r4, #0]
 80170de:	bd38      	pop	{r3, r4, r5, pc}
 80170e0:	2000c670 	.word	0x2000c670
 80170e4:	00000000 	.word	0x00000000

080170e8 <nan>:
 80170e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80170f0 <nan+0x8>
 80170ec:	4770      	bx	lr
 80170ee:	bf00      	nop
 80170f0:	00000000 	.word	0x00000000
 80170f4:	7ff80000 	.word	0x7ff80000

080170f8 <__sccl>:
 80170f8:	b570      	push	{r4, r5, r6, lr}
 80170fa:	780b      	ldrb	r3, [r1, #0]
 80170fc:	4604      	mov	r4, r0
 80170fe:	2b5e      	cmp	r3, #94	; 0x5e
 8017100:	bf0b      	itete	eq
 8017102:	784b      	ldrbeq	r3, [r1, #1]
 8017104:	1c48      	addne	r0, r1, #1
 8017106:	1c88      	addeq	r0, r1, #2
 8017108:	2200      	movne	r2, #0
 801710a:	bf08      	it	eq
 801710c:	2201      	moveq	r2, #1
 801710e:	1e61      	subs	r1, r4, #1
 8017110:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8017114:	f801 2f01 	strb.w	r2, [r1, #1]!
 8017118:	42a9      	cmp	r1, r5
 801711a:	d1fb      	bne.n	8017114 <__sccl+0x1c>
 801711c:	b90b      	cbnz	r3, 8017122 <__sccl+0x2a>
 801711e:	3801      	subs	r0, #1
 8017120:	bd70      	pop	{r4, r5, r6, pc}
 8017122:	f082 0201 	eor.w	r2, r2, #1
 8017126:	54e2      	strb	r2, [r4, r3]
 8017128:	4605      	mov	r5, r0
 801712a:	4628      	mov	r0, r5
 801712c:	f810 1b01 	ldrb.w	r1, [r0], #1
 8017130:	292d      	cmp	r1, #45	; 0x2d
 8017132:	d006      	beq.n	8017142 <__sccl+0x4a>
 8017134:	295d      	cmp	r1, #93	; 0x5d
 8017136:	d0f3      	beq.n	8017120 <__sccl+0x28>
 8017138:	b909      	cbnz	r1, 801713e <__sccl+0x46>
 801713a:	4628      	mov	r0, r5
 801713c:	e7f0      	b.n	8017120 <__sccl+0x28>
 801713e:	460b      	mov	r3, r1
 8017140:	e7f1      	b.n	8017126 <__sccl+0x2e>
 8017142:	786e      	ldrb	r6, [r5, #1]
 8017144:	2e5d      	cmp	r6, #93	; 0x5d
 8017146:	d0fa      	beq.n	801713e <__sccl+0x46>
 8017148:	42b3      	cmp	r3, r6
 801714a:	dcf8      	bgt.n	801713e <__sccl+0x46>
 801714c:	3502      	adds	r5, #2
 801714e:	4619      	mov	r1, r3
 8017150:	3101      	adds	r1, #1
 8017152:	428e      	cmp	r6, r1
 8017154:	5462      	strb	r2, [r4, r1]
 8017156:	dcfb      	bgt.n	8017150 <__sccl+0x58>
 8017158:	1af1      	subs	r1, r6, r3
 801715a:	3901      	subs	r1, #1
 801715c:	1c58      	adds	r0, r3, #1
 801715e:	42b3      	cmp	r3, r6
 8017160:	bfa8      	it	ge
 8017162:	2100      	movge	r1, #0
 8017164:	1843      	adds	r3, r0, r1
 8017166:	e7e0      	b.n	801712a <__sccl+0x32>

08017168 <strncmp>:
 8017168:	b510      	push	{r4, lr}
 801716a:	b17a      	cbz	r2, 801718c <strncmp+0x24>
 801716c:	4603      	mov	r3, r0
 801716e:	3901      	subs	r1, #1
 8017170:	1884      	adds	r4, r0, r2
 8017172:	f813 0b01 	ldrb.w	r0, [r3], #1
 8017176:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801717a:	4290      	cmp	r0, r2
 801717c:	d101      	bne.n	8017182 <strncmp+0x1a>
 801717e:	42a3      	cmp	r3, r4
 8017180:	d101      	bne.n	8017186 <strncmp+0x1e>
 8017182:	1a80      	subs	r0, r0, r2
 8017184:	bd10      	pop	{r4, pc}
 8017186:	2800      	cmp	r0, #0
 8017188:	d1f3      	bne.n	8017172 <strncmp+0xa>
 801718a:	e7fa      	b.n	8017182 <strncmp+0x1a>
 801718c:	4610      	mov	r0, r2
 801718e:	e7f9      	b.n	8017184 <strncmp+0x1c>

08017190 <_strtoul_l.constprop.0>:
 8017190:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017194:	4f36      	ldr	r7, [pc, #216]	; (8017270 <_strtoul_l.constprop.0+0xe0>)
 8017196:	4686      	mov	lr, r0
 8017198:	460d      	mov	r5, r1
 801719a:	4628      	mov	r0, r5
 801719c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80171a0:	5de6      	ldrb	r6, [r4, r7]
 80171a2:	f016 0608 	ands.w	r6, r6, #8
 80171a6:	d1f8      	bne.n	801719a <_strtoul_l.constprop.0+0xa>
 80171a8:	2c2d      	cmp	r4, #45	; 0x2d
 80171aa:	d12f      	bne.n	801720c <_strtoul_l.constprop.0+0x7c>
 80171ac:	782c      	ldrb	r4, [r5, #0]
 80171ae:	2601      	movs	r6, #1
 80171b0:	1c85      	adds	r5, r0, #2
 80171b2:	2b00      	cmp	r3, #0
 80171b4:	d057      	beq.n	8017266 <_strtoul_l.constprop.0+0xd6>
 80171b6:	2b10      	cmp	r3, #16
 80171b8:	d109      	bne.n	80171ce <_strtoul_l.constprop.0+0x3e>
 80171ba:	2c30      	cmp	r4, #48	; 0x30
 80171bc:	d107      	bne.n	80171ce <_strtoul_l.constprop.0+0x3e>
 80171be:	7828      	ldrb	r0, [r5, #0]
 80171c0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80171c4:	2858      	cmp	r0, #88	; 0x58
 80171c6:	d149      	bne.n	801725c <_strtoul_l.constprop.0+0xcc>
 80171c8:	786c      	ldrb	r4, [r5, #1]
 80171ca:	2310      	movs	r3, #16
 80171cc:	3502      	adds	r5, #2
 80171ce:	f04f 38ff 	mov.w	r8, #4294967295
 80171d2:	2700      	movs	r7, #0
 80171d4:	fbb8 f8f3 	udiv	r8, r8, r3
 80171d8:	fb03 f908 	mul.w	r9, r3, r8
 80171dc:	ea6f 0909 	mvn.w	r9, r9
 80171e0:	4638      	mov	r0, r7
 80171e2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80171e6:	f1bc 0f09 	cmp.w	ip, #9
 80171ea:	d814      	bhi.n	8017216 <_strtoul_l.constprop.0+0x86>
 80171ec:	4664      	mov	r4, ip
 80171ee:	42a3      	cmp	r3, r4
 80171f0:	dd22      	ble.n	8017238 <_strtoul_l.constprop.0+0xa8>
 80171f2:	2f00      	cmp	r7, #0
 80171f4:	db1d      	blt.n	8017232 <_strtoul_l.constprop.0+0xa2>
 80171f6:	4580      	cmp	r8, r0
 80171f8:	d31b      	bcc.n	8017232 <_strtoul_l.constprop.0+0xa2>
 80171fa:	d101      	bne.n	8017200 <_strtoul_l.constprop.0+0x70>
 80171fc:	45a1      	cmp	r9, r4
 80171fe:	db18      	blt.n	8017232 <_strtoul_l.constprop.0+0xa2>
 8017200:	fb00 4003 	mla	r0, r0, r3, r4
 8017204:	2701      	movs	r7, #1
 8017206:	f815 4b01 	ldrb.w	r4, [r5], #1
 801720a:	e7ea      	b.n	80171e2 <_strtoul_l.constprop.0+0x52>
 801720c:	2c2b      	cmp	r4, #43	; 0x2b
 801720e:	bf04      	itt	eq
 8017210:	782c      	ldrbeq	r4, [r5, #0]
 8017212:	1c85      	addeq	r5, r0, #2
 8017214:	e7cd      	b.n	80171b2 <_strtoul_l.constprop.0+0x22>
 8017216:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801721a:	f1bc 0f19 	cmp.w	ip, #25
 801721e:	d801      	bhi.n	8017224 <_strtoul_l.constprop.0+0x94>
 8017220:	3c37      	subs	r4, #55	; 0x37
 8017222:	e7e4      	b.n	80171ee <_strtoul_l.constprop.0+0x5e>
 8017224:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8017228:	f1bc 0f19 	cmp.w	ip, #25
 801722c:	d804      	bhi.n	8017238 <_strtoul_l.constprop.0+0xa8>
 801722e:	3c57      	subs	r4, #87	; 0x57
 8017230:	e7dd      	b.n	80171ee <_strtoul_l.constprop.0+0x5e>
 8017232:	f04f 37ff 	mov.w	r7, #4294967295
 8017236:	e7e6      	b.n	8017206 <_strtoul_l.constprop.0+0x76>
 8017238:	2f00      	cmp	r7, #0
 801723a:	da07      	bge.n	801724c <_strtoul_l.constprop.0+0xbc>
 801723c:	2322      	movs	r3, #34	; 0x22
 801723e:	f8ce 3000 	str.w	r3, [lr]
 8017242:	f04f 30ff 	mov.w	r0, #4294967295
 8017246:	b932      	cbnz	r2, 8017256 <_strtoul_l.constprop.0+0xc6>
 8017248:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801724c:	b106      	cbz	r6, 8017250 <_strtoul_l.constprop.0+0xc0>
 801724e:	4240      	negs	r0, r0
 8017250:	2a00      	cmp	r2, #0
 8017252:	d0f9      	beq.n	8017248 <_strtoul_l.constprop.0+0xb8>
 8017254:	b107      	cbz	r7, 8017258 <_strtoul_l.constprop.0+0xc8>
 8017256:	1e69      	subs	r1, r5, #1
 8017258:	6011      	str	r1, [r2, #0]
 801725a:	e7f5      	b.n	8017248 <_strtoul_l.constprop.0+0xb8>
 801725c:	2430      	movs	r4, #48	; 0x30
 801725e:	2b00      	cmp	r3, #0
 8017260:	d1b5      	bne.n	80171ce <_strtoul_l.constprop.0+0x3e>
 8017262:	2308      	movs	r3, #8
 8017264:	e7b3      	b.n	80171ce <_strtoul_l.constprop.0+0x3e>
 8017266:	2c30      	cmp	r4, #48	; 0x30
 8017268:	d0a9      	beq.n	80171be <_strtoul_l.constprop.0+0x2e>
 801726a:	230a      	movs	r3, #10
 801726c:	e7af      	b.n	80171ce <_strtoul_l.constprop.0+0x3e>
 801726e:	bf00      	nop
 8017270:	0805da31 	.word	0x0805da31

08017274 <_strtoul_r>:
 8017274:	f7ff bf8c 	b.w	8017190 <_strtoul_l.constprop.0>

08017278 <__submore>:
 8017278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801727c:	460c      	mov	r4, r1
 801727e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8017280:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017284:	4299      	cmp	r1, r3
 8017286:	d11d      	bne.n	80172c4 <__submore+0x4c>
 8017288:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801728c:	f7fb fb20 	bl	80128d0 <_malloc_r>
 8017290:	b918      	cbnz	r0, 801729a <__submore+0x22>
 8017292:	f04f 30ff 	mov.w	r0, #4294967295
 8017296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801729a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801729e:	63a3      	str	r3, [r4, #56]	; 0x38
 80172a0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80172a4:	6360      	str	r0, [r4, #52]	; 0x34
 80172a6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80172aa:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80172ae:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80172b2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80172b6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80172ba:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80172be:	6020      	str	r0, [r4, #0]
 80172c0:	2000      	movs	r0, #0
 80172c2:	e7e8      	b.n	8017296 <__submore+0x1e>
 80172c4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80172c6:	0077      	lsls	r7, r6, #1
 80172c8:	463a      	mov	r2, r7
 80172ca:	f7ff f8f0 	bl	80164ae <_realloc_r>
 80172ce:	4605      	mov	r5, r0
 80172d0:	2800      	cmp	r0, #0
 80172d2:	d0de      	beq.n	8017292 <__submore+0x1a>
 80172d4:	eb00 0806 	add.w	r8, r0, r6
 80172d8:	4601      	mov	r1, r0
 80172da:	4632      	mov	r2, r6
 80172dc:	4640      	mov	r0, r8
 80172de:	f7fb fa75 	bl	80127cc <memcpy>
 80172e2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80172e6:	f8c4 8000 	str.w	r8, [r4]
 80172ea:	e7e9      	b.n	80172c0 <__submore+0x48>

080172ec <__swbuf_r>:
 80172ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80172ee:	460e      	mov	r6, r1
 80172f0:	4614      	mov	r4, r2
 80172f2:	4605      	mov	r5, r0
 80172f4:	b118      	cbz	r0, 80172fe <__swbuf_r+0x12>
 80172f6:	6983      	ldr	r3, [r0, #24]
 80172f8:	b90b      	cbnz	r3, 80172fe <__swbuf_r+0x12>
 80172fa:	f000 f9e7 	bl	80176cc <__sinit>
 80172fe:	4b21      	ldr	r3, [pc, #132]	; (8017384 <__swbuf_r+0x98>)
 8017300:	429c      	cmp	r4, r3
 8017302:	d12b      	bne.n	801735c <__swbuf_r+0x70>
 8017304:	686c      	ldr	r4, [r5, #4]
 8017306:	69a3      	ldr	r3, [r4, #24]
 8017308:	60a3      	str	r3, [r4, #8]
 801730a:	89a3      	ldrh	r3, [r4, #12]
 801730c:	071a      	lsls	r2, r3, #28
 801730e:	d52f      	bpl.n	8017370 <__swbuf_r+0x84>
 8017310:	6923      	ldr	r3, [r4, #16]
 8017312:	b36b      	cbz	r3, 8017370 <__swbuf_r+0x84>
 8017314:	6923      	ldr	r3, [r4, #16]
 8017316:	6820      	ldr	r0, [r4, #0]
 8017318:	1ac0      	subs	r0, r0, r3
 801731a:	6963      	ldr	r3, [r4, #20]
 801731c:	b2f6      	uxtb	r6, r6
 801731e:	4283      	cmp	r3, r0
 8017320:	4637      	mov	r7, r6
 8017322:	dc04      	bgt.n	801732e <__swbuf_r+0x42>
 8017324:	4621      	mov	r1, r4
 8017326:	4628      	mov	r0, r5
 8017328:	f000 f93c 	bl	80175a4 <_fflush_r>
 801732c:	bb30      	cbnz	r0, 801737c <__swbuf_r+0x90>
 801732e:	68a3      	ldr	r3, [r4, #8]
 8017330:	3b01      	subs	r3, #1
 8017332:	60a3      	str	r3, [r4, #8]
 8017334:	6823      	ldr	r3, [r4, #0]
 8017336:	1c5a      	adds	r2, r3, #1
 8017338:	6022      	str	r2, [r4, #0]
 801733a:	701e      	strb	r6, [r3, #0]
 801733c:	6963      	ldr	r3, [r4, #20]
 801733e:	3001      	adds	r0, #1
 8017340:	4283      	cmp	r3, r0
 8017342:	d004      	beq.n	801734e <__swbuf_r+0x62>
 8017344:	89a3      	ldrh	r3, [r4, #12]
 8017346:	07db      	lsls	r3, r3, #31
 8017348:	d506      	bpl.n	8017358 <__swbuf_r+0x6c>
 801734a:	2e0a      	cmp	r6, #10
 801734c:	d104      	bne.n	8017358 <__swbuf_r+0x6c>
 801734e:	4621      	mov	r1, r4
 8017350:	4628      	mov	r0, r5
 8017352:	f000 f927 	bl	80175a4 <_fflush_r>
 8017356:	b988      	cbnz	r0, 801737c <__swbuf_r+0x90>
 8017358:	4638      	mov	r0, r7
 801735a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801735c:	4b0a      	ldr	r3, [pc, #40]	; (8017388 <__swbuf_r+0x9c>)
 801735e:	429c      	cmp	r4, r3
 8017360:	d101      	bne.n	8017366 <__swbuf_r+0x7a>
 8017362:	68ac      	ldr	r4, [r5, #8]
 8017364:	e7cf      	b.n	8017306 <__swbuf_r+0x1a>
 8017366:	4b09      	ldr	r3, [pc, #36]	; (801738c <__swbuf_r+0xa0>)
 8017368:	429c      	cmp	r4, r3
 801736a:	bf08      	it	eq
 801736c:	68ec      	ldreq	r4, [r5, #12]
 801736e:	e7ca      	b.n	8017306 <__swbuf_r+0x1a>
 8017370:	4621      	mov	r1, r4
 8017372:	4628      	mov	r0, r5
 8017374:	f000 f81a 	bl	80173ac <__swsetup_r>
 8017378:	2800      	cmp	r0, #0
 801737a:	d0cb      	beq.n	8017314 <__swbuf_r+0x28>
 801737c:	f04f 37ff 	mov.w	r7, #4294967295
 8017380:	e7ea      	b.n	8017358 <__swbuf_r+0x6c>
 8017382:	bf00      	nop
 8017384:	0805ddc8 	.word	0x0805ddc8
 8017388:	0805dde8 	.word	0x0805dde8
 801738c:	0805dda8 	.word	0x0805dda8

08017390 <__ascii_wctomb>:
 8017390:	b149      	cbz	r1, 80173a6 <__ascii_wctomb+0x16>
 8017392:	2aff      	cmp	r2, #255	; 0xff
 8017394:	bf85      	ittet	hi
 8017396:	238a      	movhi	r3, #138	; 0x8a
 8017398:	6003      	strhi	r3, [r0, #0]
 801739a:	700a      	strbls	r2, [r1, #0]
 801739c:	f04f 30ff 	movhi.w	r0, #4294967295
 80173a0:	bf98      	it	ls
 80173a2:	2001      	movls	r0, #1
 80173a4:	4770      	bx	lr
 80173a6:	4608      	mov	r0, r1
 80173a8:	4770      	bx	lr
	...

080173ac <__swsetup_r>:
 80173ac:	4b32      	ldr	r3, [pc, #200]	; (8017478 <__swsetup_r+0xcc>)
 80173ae:	b570      	push	{r4, r5, r6, lr}
 80173b0:	681d      	ldr	r5, [r3, #0]
 80173b2:	4606      	mov	r6, r0
 80173b4:	460c      	mov	r4, r1
 80173b6:	b125      	cbz	r5, 80173c2 <__swsetup_r+0x16>
 80173b8:	69ab      	ldr	r3, [r5, #24]
 80173ba:	b913      	cbnz	r3, 80173c2 <__swsetup_r+0x16>
 80173bc:	4628      	mov	r0, r5
 80173be:	f000 f985 	bl	80176cc <__sinit>
 80173c2:	4b2e      	ldr	r3, [pc, #184]	; (801747c <__swsetup_r+0xd0>)
 80173c4:	429c      	cmp	r4, r3
 80173c6:	d10f      	bne.n	80173e8 <__swsetup_r+0x3c>
 80173c8:	686c      	ldr	r4, [r5, #4]
 80173ca:	89a3      	ldrh	r3, [r4, #12]
 80173cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80173d0:	0719      	lsls	r1, r3, #28
 80173d2:	d42c      	bmi.n	801742e <__swsetup_r+0x82>
 80173d4:	06dd      	lsls	r5, r3, #27
 80173d6:	d411      	bmi.n	80173fc <__swsetup_r+0x50>
 80173d8:	2309      	movs	r3, #9
 80173da:	6033      	str	r3, [r6, #0]
 80173dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80173e0:	81a3      	strh	r3, [r4, #12]
 80173e2:	f04f 30ff 	mov.w	r0, #4294967295
 80173e6:	e03e      	b.n	8017466 <__swsetup_r+0xba>
 80173e8:	4b25      	ldr	r3, [pc, #148]	; (8017480 <__swsetup_r+0xd4>)
 80173ea:	429c      	cmp	r4, r3
 80173ec:	d101      	bne.n	80173f2 <__swsetup_r+0x46>
 80173ee:	68ac      	ldr	r4, [r5, #8]
 80173f0:	e7eb      	b.n	80173ca <__swsetup_r+0x1e>
 80173f2:	4b24      	ldr	r3, [pc, #144]	; (8017484 <__swsetup_r+0xd8>)
 80173f4:	429c      	cmp	r4, r3
 80173f6:	bf08      	it	eq
 80173f8:	68ec      	ldreq	r4, [r5, #12]
 80173fa:	e7e6      	b.n	80173ca <__swsetup_r+0x1e>
 80173fc:	0758      	lsls	r0, r3, #29
 80173fe:	d512      	bpl.n	8017426 <__swsetup_r+0x7a>
 8017400:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017402:	b141      	cbz	r1, 8017416 <__swsetup_r+0x6a>
 8017404:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017408:	4299      	cmp	r1, r3
 801740a:	d002      	beq.n	8017412 <__swsetup_r+0x66>
 801740c:	4630      	mov	r0, r6
 801740e:	f7fb f9f3 	bl	80127f8 <_free_r>
 8017412:	2300      	movs	r3, #0
 8017414:	6363      	str	r3, [r4, #52]	; 0x34
 8017416:	89a3      	ldrh	r3, [r4, #12]
 8017418:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801741c:	81a3      	strh	r3, [r4, #12]
 801741e:	2300      	movs	r3, #0
 8017420:	6063      	str	r3, [r4, #4]
 8017422:	6923      	ldr	r3, [r4, #16]
 8017424:	6023      	str	r3, [r4, #0]
 8017426:	89a3      	ldrh	r3, [r4, #12]
 8017428:	f043 0308 	orr.w	r3, r3, #8
 801742c:	81a3      	strh	r3, [r4, #12]
 801742e:	6923      	ldr	r3, [r4, #16]
 8017430:	b94b      	cbnz	r3, 8017446 <__swsetup_r+0x9a>
 8017432:	89a3      	ldrh	r3, [r4, #12]
 8017434:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017438:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801743c:	d003      	beq.n	8017446 <__swsetup_r+0x9a>
 801743e:	4621      	mov	r1, r4
 8017440:	4630      	mov	r0, r6
 8017442:	f000 fa09 	bl	8017858 <__smakebuf_r>
 8017446:	89a0      	ldrh	r0, [r4, #12]
 8017448:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801744c:	f010 0301 	ands.w	r3, r0, #1
 8017450:	d00a      	beq.n	8017468 <__swsetup_r+0xbc>
 8017452:	2300      	movs	r3, #0
 8017454:	60a3      	str	r3, [r4, #8]
 8017456:	6963      	ldr	r3, [r4, #20]
 8017458:	425b      	negs	r3, r3
 801745a:	61a3      	str	r3, [r4, #24]
 801745c:	6923      	ldr	r3, [r4, #16]
 801745e:	b943      	cbnz	r3, 8017472 <__swsetup_r+0xc6>
 8017460:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017464:	d1ba      	bne.n	80173dc <__swsetup_r+0x30>
 8017466:	bd70      	pop	{r4, r5, r6, pc}
 8017468:	0781      	lsls	r1, r0, #30
 801746a:	bf58      	it	pl
 801746c:	6963      	ldrpl	r3, [r4, #20]
 801746e:	60a3      	str	r3, [r4, #8]
 8017470:	e7f4      	b.n	801745c <__swsetup_r+0xb0>
 8017472:	2000      	movs	r0, #0
 8017474:	e7f7      	b.n	8017466 <__swsetup_r+0xba>
 8017476:	bf00      	nop
 8017478:	2000145c 	.word	0x2000145c
 801747c:	0805ddc8 	.word	0x0805ddc8
 8017480:	0805dde8 	.word	0x0805dde8
 8017484:	0805dda8 	.word	0x0805dda8

08017488 <abort>:
 8017488:	b508      	push	{r3, lr}
 801748a:	2006      	movs	r0, #6
 801748c:	f000 fa6e 	bl	801796c <raise>
 8017490:	2001      	movs	r0, #1
 8017492:	f001 fa2f 	bl	80188f4 <_exit>
	...

08017498 <__sflush_r>:
 8017498:	898a      	ldrh	r2, [r1, #12]
 801749a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801749e:	4605      	mov	r5, r0
 80174a0:	0710      	lsls	r0, r2, #28
 80174a2:	460c      	mov	r4, r1
 80174a4:	d458      	bmi.n	8017558 <__sflush_r+0xc0>
 80174a6:	684b      	ldr	r3, [r1, #4]
 80174a8:	2b00      	cmp	r3, #0
 80174aa:	dc05      	bgt.n	80174b8 <__sflush_r+0x20>
 80174ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80174ae:	2b00      	cmp	r3, #0
 80174b0:	dc02      	bgt.n	80174b8 <__sflush_r+0x20>
 80174b2:	2000      	movs	r0, #0
 80174b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80174b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80174ba:	2e00      	cmp	r6, #0
 80174bc:	d0f9      	beq.n	80174b2 <__sflush_r+0x1a>
 80174be:	2300      	movs	r3, #0
 80174c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80174c4:	682f      	ldr	r7, [r5, #0]
 80174c6:	602b      	str	r3, [r5, #0]
 80174c8:	d032      	beq.n	8017530 <__sflush_r+0x98>
 80174ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80174cc:	89a3      	ldrh	r3, [r4, #12]
 80174ce:	075a      	lsls	r2, r3, #29
 80174d0:	d505      	bpl.n	80174de <__sflush_r+0x46>
 80174d2:	6863      	ldr	r3, [r4, #4]
 80174d4:	1ac0      	subs	r0, r0, r3
 80174d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80174d8:	b10b      	cbz	r3, 80174de <__sflush_r+0x46>
 80174da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80174dc:	1ac0      	subs	r0, r0, r3
 80174de:	2300      	movs	r3, #0
 80174e0:	4602      	mov	r2, r0
 80174e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80174e4:	6a21      	ldr	r1, [r4, #32]
 80174e6:	4628      	mov	r0, r5
 80174e8:	47b0      	blx	r6
 80174ea:	1c43      	adds	r3, r0, #1
 80174ec:	89a3      	ldrh	r3, [r4, #12]
 80174ee:	d106      	bne.n	80174fe <__sflush_r+0x66>
 80174f0:	6829      	ldr	r1, [r5, #0]
 80174f2:	291d      	cmp	r1, #29
 80174f4:	d82c      	bhi.n	8017550 <__sflush_r+0xb8>
 80174f6:	4a2a      	ldr	r2, [pc, #168]	; (80175a0 <__sflush_r+0x108>)
 80174f8:	40ca      	lsrs	r2, r1
 80174fa:	07d6      	lsls	r6, r2, #31
 80174fc:	d528      	bpl.n	8017550 <__sflush_r+0xb8>
 80174fe:	2200      	movs	r2, #0
 8017500:	6062      	str	r2, [r4, #4]
 8017502:	04d9      	lsls	r1, r3, #19
 8017504:	6922      	ldr	r2, [r4, #16]
 8017506:	6022      	str	r2, [r4, #0]
 8017508:	d504      	bpl.n	8017514 <__sflush_r+0x7c>
 801750a:	1c42      	adds	r2, r0, #1
 801750c:	d101      	bne.n	8017512 <__sflush_r+0x7a>
 801750e:	682b      	ldr	r3, [r5, #0]
 8017510:	b903      	cbnz	r3, 8017514 <__sflush_r+0x7c>
 8017512:	6560      	str	r0, [r4, #84]	; 0x54
 8017514:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017516:	602f      	str	r7, [r5, #0]
 8017518:	2900      	cmp	r1, #0
 801751a:	d0ca      	beq.n	80174b2 <__sflush_r+0x1a>
 801751c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017520:	4299      	cmp	r1, r3
 8017522:	d002      	beq.n	801752a <__sflush_r+0x92>
 8017524:	4628      	mov	r0, r5
 8017526:	f7fb f967 	bl	80127f8 <_free_r>
 801752a:	2000      	movs	r0, #0
 801752c:	6360      	str	r0, [r4, #52]	; 0x34
 801752e:	e7c1      	b.n	80174b4 <__sflush_r+0x1c>
 8017530:	6a21      	ldr	r1, [r4, #32]
 8017532:	2301      	movs	r3, #1
 8017534:	4628      	mov	r0, r5
 8017536:	47b0      	blx	r6
 8017538:	1c41      	adds	r1, r0, #1
 801753a:	d1c7      	bne.n	80174cc <__sflush_r+0x34>
 801753c:	682b      	ldr	r3, [r5, #0]
 801753e:	2b00      	cmp	r3, #0
 8017540:	d0c4      	beq.n	80174cc <__sflush_r+0x34>
 8017542:	2b1d      	cmp	r3, #29
 8017544:	d001      	beq.n	801754a <__sflush_r+0xb2>
 8017546:	2b16      	cmp	r3, #22
 8017548:	d101      	bne.n	801754e <__sflush_r+0xb6>
 801754a:	602f      	str	r7, [r5, #0]
 801754c:	e7b1      	b.n	80174b2 <__sflush_r+0x1a>
 801754e:	89a3      	ldrh	r3, [r4, #12]
 8017550:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017554:	81a3      	strh	r3, [r4, #12]
 8017556:	e7ad      	b.n	80174b4 <__sflush_r+0x1c>
 8017558:	690f      	ldr	r7, [r1, #16]
 801755a:	2f00      	cmp	r7, #0
 801755c:	d0a9      	beq.n	80174b2 <__sflush_r+0x1a>
 801755e:	0793      	lsls	r3, r2, #30
 8017560:	680e      	ldr	r6, [r1, #0]
 8017562:	bf08      	it	eq
 8017564:	694b      	ldreq	r3, [r1, #20]
 8017566:	600f      	str	r7, [r1, #0]
 8017568:	bf18      	it	ne
 801756a:	2300      	movne	r3, #0
 801756c:	eba6 0807 	sub.w	r8, r6, r7
 8017570:	608b      	str	r3, [r1, #8]
 8017572:	f1b8 0f00 	cmp.w	r8, #0
 8017576:	dd9c      	ble.n	80174b2 <__sflush_r+0x1a>
 8017578:	6a21      	ldr	r1, [r4, #32]
 801757a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801757c:	4643      	mov	r3, r8
 801757e:	463a      	mov	r2, r7
 8017580:	4628      	mov	r0, r5
 8017582:	47b0      	blx	r6
 8017584:	2800      	cmp	r0, #0
 8017586:	dc06      	bgt.n	8017596 <__sflush_r+0xfe>
 8017588:	89a3      	ldrh	r3, [r4, #12]
 801758a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801758e:	81a3      	strh	r3, [r4, #12]
 8017590:	f04f 30ff 	mov.w	r0, #4294967295
 8017594:	e78e      	b.n	80174b4 <__sflush_r+0x1c>
 8017596:	4407      	add	r7, r0
 8017598:	eba8 0800 	sub.w	r8, r8, r0
 801759c:	e7e9      	b.n	8017572 <__sflush_r+0xda>
 801759e:	bf00      	nop
 80175a0:	20400001 	.word	0x20400001

080175a4 <_fflush_r>:
 80175a4:	b538      	push	{r3, r4, r5, lr}
 80175a6:	690b      	ldr	r3, [r1, #16]
 80175a8:	4605      	mov	r5, r0
 80175aa:	460c      	mov	r4, r1
 80175ac:	b913      	cbnz	r3, 80175b4 <_fflush_r+0x10>
 80175ae:	2500      	movs	r5, #0
 80175b0:	4628      	mov	r0, r5
 80175b2:	bd38      	pop	{r3, r4, r5, pc}
 80175b4:	b118      	cbz	r0, 80175be <_fflush_r+0x1a>
 80175b6:	6983      	ldr	r3, [r0, #24]
 80175b8:	b90b      	cbnz	r3, 80175be <_fflush_r+0x1a>
 80175ba:	f000 f887 	bl	80176cc <__sinit>
 80175be:	4b14      	ldr	r3, [pc, #80]	; (8017610 <_fflush_r+0x6c>)
 80175c0:	429c      	cmp	r4, r3
 80175c2:	d11b      	bne.n	80175fc <_fflush_r+0x58>
 80175c4:	686c      	ldr	r4, [r5, #4]
 80175c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80175ca:	2b00      	cmp	r3, #0
 80175cc:	d0ef      	beq.n	80175ae <_fflush_r+0xa>
 80175ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80175d0:	07d0      	lsls	r0, r2, #31
 80175d2:	d404      	bmi.n	80175de <_fflush_r+0x3a>
 80175d4:	0599      	lsls	r1, r3, #22
 80175d6:	d402      	bmi.n	80175de <_fflush_r+0x3a>
 80175d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80175da:	f000 f915 	bl	8017808 <__retarget_lock_acquire_recursive>
 80175de:	4628      	mov	r0, r5
 80175e0:	4621      	mov	r1, r4
 80175e2:	f7ff ff59 	bl	8017498 <__sflush_r>
 80175e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80175e8:	07da      	lsls	r2, r3, #31
 80175ea:	4605      	mov	r5, r0
 80175ec:	d4e0      	bmi.n	80175b0 <_fflush_r+0xc>
 80175ee:	89a3      	ldrh	r3, [r4, #12]
 80175f0:	059b      	lsls	r3, r3, #22
 80175f2:	d4dd      	bmi.n	80175b0 <_fflush_r+0xc>
 80175f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80175f6:	f000 f908 	bl	801780a <__retarget_lock_release_recursive>
 80175fa:	e7d9      	b.n	80175b0 <_fflush_r+0xc>
 80175fc:	4b05      	ldr	r3, [pc, #20]	; (8017614 <_fflush_r+0x70>)
 80175fe:	429c      	cmp	r4, r3
 8017600:	d101      	bne.n	8017606 <_fflush_r+0x62>
 8017602:	68ac      	ldr	r4, [r5, #8]
 8017604:	e7df      	b.n	80175c6 <_fflush_r+0x22>
 8017606:	4b04      	ldr	r3, [pc, #16]	; (8017618 <_fflush_r+0x74>)
 8017608:	429c      	cmp	r4, r3
 801760a:	bf08      	it	eq
 801760c:	68ec      	ldreq	r4, [r5, #12]
 801760e:	e7da      	b.n	80175c6 <_fflush_r+0x22>
 8017610:	0805ddc8 	.word	0x0805ddc8
 8017614:	0805dde8 	.word	0x0805dde8
 8017618:	0805dda8 	.word	0x0805dda8

0801761c <std>:
 801761c:	2300      	movs	r3, #0
 801761e:	b510      	push	{r4, lr}
 8017620:	4604      	mov	r4, r0
 8017622:	e9c0 3300 	strd	r3, r3, [r0]
 8017626:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801762a:	6083      	str	r3, [r0, #8]
 801762c:	8181      	strh	r1, [r0, #12]
 801762e:	6643      	str	r3, [r0, #100]	; 0x64
 8017630:	81c2      	strh	r2, [r0, #14]
 8017632:	6183      	str	r3, [r0, #24]
 8017634:	4619      	mov	r1, r3
 8017636:	2208      	movs	r2, #8
 8017638:	305c      	adds	r0, #92	; 0x5c
 801763a:	f7fb f8d5 	bl	80127e8 <memset>
 801763e:	4b05      	ldr	r3, [pc, #20]	; (8017654 <std+0x38>)
 8017640:	6263      	str	r3, [r4, #36]	; 0x24
 8017642:	4b05      	ldr	r3, [pc, #20]	; (8017658 <std+0x3c>)
 8017644:	62a3      	str	r3, [r4, #40]	; 0x28
 8017646:	4b05      	ldr	r3, [pc, #20]	; (801765c <std+0x40>)
 8017648:	62e3      	str	r3, [r4, #44]	; 0x2c
 801764a:	4b05      	ldr	r3, [pc, #20]	; (8017660 <std+0x44>)
 801764c:	6224      	str	r4, [r4, #32]
 801764e:	6323      	str	r3, [r4, #48]	; 0x30
 8017650:	bd10      	pop	{r4, pc}
 8017652:	bf00      	nop
 8017654:	08013771 	.word	0x08013771
 8017658:	08013797 	.word	0x08013797
 801765c:	080137cf 	.word	0x080137cf
 8017660:	080137f3 	.word	0x080137f3

08017664 <_cleanup_r>:
 8017664:	4901      	ldr	r1, [pc, #4]	; (801766c <_cleanup_r+0x8>)
 8017666:	f000 b8af 	b.w	80177c8 <_fwalk_reent>
 801766a:	bf00      	nop
 801766c:	080175a5 	.word	0x080175a5

08017670 <__sfmoreglue>:
 8017670:	b570      	push	{r4, r5, r6, lr}
 8017672:	2268      	movs	r2, #104	; 0x68
 8017674:	1e4d      	subs	r5, r1, #1
 8017676:	4355      	muls	r5, r2
 8017678:	460e      	mov	r6, r1
 801767a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801767e:	f7fb f927 	bl	80128d0 <_malloc_r>
 8017682:	4604      	mov	r4, r0
 8017684:	b140      	cbz	r0, 8017698 <__sfmoreglue+0x28>
 8017686:	2100      	movs	r1, #0
 8017688:	e9c0 1600 	strd	r1, r6, [r0]
 801768c:	300c      	adds	r0, #12
 801768e:	60a0      	str	r0, [r4, #8]
 8017690:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017694:	f7fb f8a8 	bl	80127e8 <memset>
 8017698:	4620      	mov	r0, r4
 801769a:	bd70      	pop	{r4, r5, r6, pc}

0801769c <__sfp_lock_acquire>:
 801769c:	4801      	ldr	r0, [pc, #4]	; (80176a4 <__sfp_lock_acquire+0x8>)
 801769e:	f000 b8b3 	b.w	8017808 <__retarget_lock_acquire_recursive>
 80176a2:	bf00      	nop
 80176a4:	2000c675 	.word	0x2000c675

080176a8 <__sfp_lock_release>:
 80176a8:	4801      	ldr	r0, [pc, #4]	; (80176b0 <__sfp_lock_release+0x8>)
 80176aa:	f000 b8ae 	b.w	801780a <__retarget_lock_release_recursive>
 80176ae:	bf00      	nop
 80176b0:	2000c675 	.word	0x2000c675

080176b4 <__sinit_lock_acquire>:
 80176b4:	4801      	ldr	r0, [pc, #4]	; (80176bc <__sinit_lock_acquire+0x8>)
 80176b6:	f000 b8a7 	b.w	8017808 <__retarget_lock_acquire_recursive>
 80176ba:	bf00      	nop
 80176bc:	2000c676 	.word	0x2000c676

080176c0 <__sinit_lock_release>:
 80176c0:	4801      	ldr	r0, [pc, #4]	; (80176c8 <__sinit_lock_release+0x8>)
 80176c2:	f000 b8a2 	b.w	801780a <__retarget_lock_release_recursive>
 80176c6:	bf00      	nop
 80176c8:	2000c676 	.word	0x2000c676

080176cc <__sinit>:
 80176cc:	b510      	push	{r4, lr}
 80176ce:	4604      	mov	r4, r0
 80176d0:	f7ff fff0 	bl	80176b4 <__sinit_lock_acquire>
 80176d4:	69a3      	ldr	r3, [r4, #24]
 80176d6:	b11b      	cbz	r3, 80176e0 <__sinit+0x14>
 80176d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80176dc:	f7ff bff0 	b.w	80176c0 <__sinit_lock_release>
 80176e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80176e4:	6523      	str	r3, [r4, #80]	; 0x50
 80176e6:	4b13      	ldr	r3, [pc, #76]	; (8017734 <__sinit+0x68>)
 80176e8:	4a13      	ldr	r2, [pc, #76]	; (8017738 <__sinit+0x6c>)
 80176ea:	681b      	ldr	r3, [r3, #0]
 80176ec:	62a2      	str	r2, [r4, #40]	; 0x28
 80176ee:	42a3      	cmp	r3, r4
 80176f0:	bf04      	itt	eq
 80176f2:	2301      	moveq	r3, #1
 80176f4:	61a3      	streq	r3, [r4, #24]
 80176f6:	4620      	mov	r0, r4
 80176f8:	f000 f820 	bl	801773c <__sfp>
 80176fc:	6060      	str	r0, [r4, #4]
 80176fe:	4620      	mov	r0, r4
 8017700:	f000 f81c 	bl	801773c <__sfp>
 8017704:	60a0      	str	r0, [r4, #8]
 8017706:	4620      	mov	r0, r4
 8017708:	f000 f818 	bl	801773c <__sfp>
 801770c:	2200      	movs	r2, #0
 801770e:	60e0      	str	r0, [r4, #12]
 8017710:	2104      	movs	r1, #4
 8017712:	6860      	ldr	r0, [r4, #4]
 8017714:	f7ff ff82 	bl	801761c <std>
 8017718:	68a0      	ldr	r0, [r4, #8]
 801771a:	2201      	movs	r2, #1
 801771c:	2109      	movs	r1, #9
 801771e:	f7ff ff7d 	bl	801761c <std>
 8017722:	68e0      	ldr	r0, [r4, #12]
 8017724:	2202      	movs	r2, #2
 8017726:	2112      	movs	r1, #18
 8017728:	f7ff ff78 	bl	801761c <std>
 801772c:	2301      	movs	r3, #1
 801772e:	61a3      	str	r3, [r4, #24]
 8017730:	e7d2      	b.n	80176d8 <__sinit+0xc>
 8017732:	bf00      	nop
 8017734:	0805d8f0 	.word	0x0805d8f0
 8017738:	08017665 	.word	0x08017665

0801773c <__sfp>:
 801773c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801773e:	4607      	mov	r7, r0
 8017740:	f7ff ffac 	bl	801769c <__sfp_lock_acquire>
 8017744:	4b1e      	ldr	r3, [pc, #120]	; (80177c0 <__sfp+0x84>)
 8017746:	681e      	ldr	r6, [r3, #0]
 8017748:	69b3      	ldr	r3, [r6, #24]
 801774a:	b913      	cbnz	r3, 8017752 <__sfp+0x16>
 801774c:	4630      	mov	r0, r6
 801774e:	f7ff ffbd 	bl	80176cc <__sinit>
 8017752:	3648      	adds	r6, #72	; 0x48
 8017754:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017758:	3b01      	subs	r3, #1
 801775a:	d503      	bpl.n	8017764 <__sfp+0x28>
 801775c:	6833      	ldr	r3, [r6, #0]
 801775e:	b30b      	cbz	r3, 80177a4 <__sfp+0x68>
 8017760:	6836      	ldr	r6, [r6, #0]
 8017762:	e7f7      	b.n	8017754 <__sfp+0x18>
 8017764:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017768:	b9d5      	cbnz	r5, 80177a0 <__sfp+0x64>
 801776a:	4b16      	ldr	r3, [pc, #88]	; (80177c4 <__sfp+0x88>)
 801776c:	60e3      	str	r3, [r4, #12]
 801776e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017772:	6665      	str	r5, [r4, #100]	; 0x64
 8017774:	f000 f847 	bl	8017806 <__retarget_lock_init_recursive>
 8017778:	f7ff ff96 	bl	80176a8 <__sfp_lock_release>
 801777c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8017780:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8017784:	6025      	str	r5, [r4, #0]
 8017786:	61a5      	str	r5, [r4, #24]
 8017788:	2208      	movs	r2, #8
 801778a:	4629      	mov	r1, r5
 801778c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017790:	f7fb f82a 	bl	80127e8 <memset>
 8017794:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017798:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801779c:	4620      	mov	r0, r4
 801779e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80177a0:	3468      	adds	r4, #104	; 0x68
 80177a2:	e7d9      	b.n	8017758 <__sfp+0x1c>
 80177a4:	2104      	movs	r1, #4
 80177a6:	4638      	mov	r0, r7
 80177a8:	f7ff ff62 	bl	8017670 <__sfmoreglue>
 80177ac:	4604      	mov	r4, r0
 80177ae:	6030      	str	r0, [r6, #0]
 80177b0:	2800      	cmp	r0, #0
 80177b2:	d1d5      	bne.n	8017760 <__sfp+0x24>
 80177b4:	f7ff ff78 	bl	80176a8 <__sfp_lock_release>
 80177b8:	230c      	movs	r3, #12
 80177ba:	603b      	str	r3, [r7, #0]
 80177bc:	e7ee      	b.n	801779c <__sfp+0x60>
 80177be:	bf00      	nop
 80177c0:	0805d8f0 	.word	0x0805d8f0
 80177c4:	ffff0001 	.word	0xffff0001

080177c8 <_fwalk_reent>:
 80177c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80177cc:	4606      	mov	r6, r0
 80177ce:	4688      	mov	r8, r1
 80177d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80177d4:	2700      	movs	r7, #0
 80177d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80177da:	f1b9 0901 	subs.w	r9, r9, #1
 80177de:	d505      	bpl.n	80177ec <_fwalk_reent+0x24>
 80177e0:	6824      	ldr	r4, [r4, #0]
 80177e2:	2c00      	cmp	r4, #0
 80177e4:	d1f7      	bne.n	80177d6 <_fwalk_reent+0xe>
 80177e6:	4638      	mov	r0, r7
 80177e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80177ec:	89ab      	ldrh	r3, [r5, #12]
 80177ee:	2b01      	cmp	r3, #1
 80177f0:	d907      	bls.n	8017802 <_fwalk_reent+0x3a>
 80177f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80177f6:	3301      	adds	r3, #1
 80177f8:	d003      	beq.n	8017802 <_fwalk_reent+0x3a>
 80177fa:	4629      	mov	r1, r5
 80177fc:	4630      	mov	r0, r6
 80177fe:	47c0      	blx	r8
 8017800:	4307      	orrs	r7, r0
 8017802:	3568      	adds	r5, #104	; 0x68
 8017804:	e7e9      	b.n	80177da <_fwalk_reent+0x12>

08017806 <__retarget_lock_init_recursive>:
 8017806:	4770      	bx	lr

08017808 <__retarget_lock_acquire_recursive>:
 8017808:	4770      	bx	lr

0801780a <__retarget_lock_release_recursive>:
 801780a:	4770      	bx	lr

0801780c <__swhatbuf_r>:
 801780c:	b570      	push	{r4, r5, r6, lr}
 801780e:	460e      	mov	r6, r1
 8017810:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017814:	2900      	cmp	r1, #0
 8017816:	b096      	sub	sp, #88	; 0x58
 8017818:	4614      	mov	r4, r2
 801781a:	461d      	mov	r5, r3
 801781c:	da08      	bge.n	8017830 <__swhatbuf_r+0x24>
 801781e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8017822:	2200      	movs	r2, #0
 8017824:	602a      	str	r2, [r5, #0]
 8017826:	061a      	lsls	r2, r3, #24
 8017828:	d410      	bmi.n	801784c <__swhatbuf_r+0x40>
 801782a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801782e:	e00e      	b.n	801784e <__swhatbuf_r+0x42>
 8017830:	466a      	mov	r2, sp
 8017832:	f000 f8b7 	bl	80179a4 <_fstat_r>
 8017836:	2800      	cmp	r0, #0
 8017838:	dbf1      	blt.n	801781e <__swhatbuf_r+0x12>
 801783a:	9a01      	ldr	r2, [sp, #4]
 801783c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017840:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017844:	425a      	negs	r2, r3
 8017846:	415a      	adcs	r2, r3
 8017848:	602a      	str	r2, [r5, #0]
 801784a:	e7ee      	b.n	801782a <__swhatbuf_r+0x1e>
 801784c:	2340      	movs	r3, #64	; 0x40
 801784e:	2000      	movs	r0, #0
 8017850:	6023      	str	r3, [r4, #0]
 8017852:	b016      	add	sp, #88	; 0x58
 8017854:	bd70      	pop	{r4, r5, r6, pc}
	...

08017858 <__smakebuf_r>:
 8017858:	898b      	ldrh	r3, [r1, #12]
 801785a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801785c:	079d      	lsls	r5, r3, #30
 801785e:	4606      	mov	r6, r0
 8017860:	460c      	mov	r4, r1
 8017862:	d507      	bpl.n	8017874 <__smakebuf_r+0x1c>
 8017864:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017868:	6023      	str	r3, [r4, #0]
 801786a:	6123      	str	r3, [r4, #16]
 801786c:	2301      	movs	r3, #1
 801786e:	6163      	str	r3, [r4, #20]
 8017870:	b002      	add	sp, #8
 8017872:	bd70      	pop	{r4, r5, r6, pc}
 8017874:	ab01      	add	r3, sp, #4
 8017876:	466a      	mov	r2, sp
 8017878:	f7ff ffc8 	bl	801780c <__swhatbuf_r>
 801787c:	9900      	ldr	r1, [sp, #0]
 801787e:	4605      	mov	r5, r0
 8017880:	4630      	mov	r0, r6
 8017882:	f7fb f825 	bl	80128d0 <_malloc_r>
 8017886:	b948      	cbnz	r0, 801789c <__smakebuf_r+0x44>
 8017888:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801788c:	059a      	lsls	r2, r3, #22
 801788e:	d4ef      	bmi.n	8017870 <__smakebuf_r+0x18>
 8017890:	f023 0303 	bic.w	r3, r3, #3
 8017894:	f043 0302 	orr.w	r3, r3, #2
 8017898:	81a3      	strh	r3, [r4, #12]
 801789a:	e7e3      	b.n	8017864 <__smakebuf_r+0xc>
 801789c:	4b0d      	ldr	r3, [pc, #52]	; (80178d4 <__smakebuf_r+0x7c>)
 801789e:	62b3      	str	r3, [r6, #40]	; 0x28
 80178a0:	89a3      	ldrh	r3, [r4, #12]
 80178a2:	6020      	str	r0, [r4, #0]
 80178a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80178a8:	81a3      	strh	r3, [r4, #12]
 80178aa:	9b00      	ldr	r3, [sp, #0]
 80178ac:	6163      	str	r3, [r4, #20]
 80178ae:	9b01      	ldr	r3, [sp, #4]
 80178b0:	6120      	str	r0, [r4, #16]
 80178b2:	b15b      	cbz	r3, 80178cc <__smakebuf_r+0x74>
 80178b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80178b8:	4630      	mov	r0, r6
 80178ba:	f000 f885 	bl	80179c8 <_isatty_r>
 80178be:	b128      	cbz	r0, 80178cc <__smakebuf_r+0x74>
 80178c0:	89a3      	ldrh	r3, [r4, #12]
 80178c2:	f023 0303 	bic.w	r3, r3, #3
 80178c6:	f043 0301 	orr.w	r3, r3, #1
 80178ca:	81a3      	strh	r3, [r4, #12]
 80178cc:	89a0      	ldrh	r0, [r4, #12]
 80178ce:	4305      	orrs	r5, r0
 80178d0:	81a5      	strh	r5, [r4, #12]
 80178d2:	e7cd      	b.n	8017870 <__smakebuf_r+0x18>
 80178d4:	08017665 	.word	0x08017665

080178d8 <memmove>:
 80178d8:	4288      	cmp	r0, r1
 80178da:	b510      	push	{r4, lr}
 80178dc:	eb01 0402 	add.w	r4, r1, r2
 80178e0:	d902      	bls.n	80178e8 <memmove+0x10>
 80178e2:	4284      	cmp	r4, r0
 80178e4:	4623      	mov	r3, r4
 80178e6:	d807      	bhi.n	80178f8 <memmove+0x20>
 80178e8:	1e43      	subs	r3, r0, #1
 80178ea:	42a1      	cmp	r1, r4
 80178ec:	d008      	beq.n	8017900 <memmove+0x28>
 80178ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80178f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80178f6:	e7f8      	b.n	80178ea <memmove+0x12>
 80178f8:	4402      	add	r2, r0
 80178fa:	4601      	mov	r1, r0
 80178fc:	428a      	cmp	r2, r1
 80178fe:	d100      	bne.n	8017902 <memmove+0x2a>
 8017900:	bd10      	pop	{r4, pc}
 8017902:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017906:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801790a:	e7f7      	b.n	80178fc <memmove+0x24>

0801790c <_malloc_usable_size_r>:
 801790c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017910:	1f18      	subs	r0, r3, #4
 8017912:	2b00      	cmp	r3, #0
 8017914:	bfbc      	itt	lt
 8017916:	580b      	ldrlt	r3, [r1, r0]
 8017918:	18c0      	addlt	r0, r0, r3
 801791a:	4770      	bx	lr

0801791c <_raise_r>:
 801791c:	291f      	cmp	r1, #31
 801791e:	b538      	push	{r3, r4, r5, lr}
 8017920:	4604      	mov	r4, r0
 8017922:	460d      	mov	r5, r1
 8017924:	d904      	bls.n	8017930 <_raise_r+0x14>
 8017926:	2316      	movs	r3, #22
 8017928:	6003      	str	r3, [r0, #0]
 801792a:	f04f 30ff 	mov.w	r0, #4294967295
 801792e:	bd38      	pop	{r3, r4, r5, pc}
 8017930:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8017932:	b112      	cbz	r2, 801793a <_raise_r+0x1e>
 8017934:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017938:	b94b      	cbnz	r3, 801794e <_raise_r+0x32>
 801793a:	4620      	mov	r0, r4
 801793c:	f000 f830 	bl	80179a0 <_getpid_r>
 8017940:	462a      	mov	r2, r5
 8017942:	4601      	mov	r1, r0
 8017944:	4620      	mov	r0, r4
 8017946:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801794a:	f000 b817 	b.w	801797c <_kill_r>
 801794e:	2b01      	cmp	r3, #1
 8017950:	d00a      	beq.n	8017968 <_raise_r+0x4c>
 8017952:	1c59      	adds	r1, r3, #1
 8017954:	d103      	bne.n	801795e <_raise_r+0x42>
 8017956:	2316      	movs	r3, #22
 8017958:	6003      	str	r3, [r0, #0]
 801795a:	2001      	movs	r0, #1
 801795c:	e7e7      	b.n	801792e <_raise_r+0x12>
 801795e:	2400      	movs	r4, #0
 8017960:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017964:	4628      	mov	r0, r5
 8017966:	4798      	blx	r3
 8017968:	2000      	movs	r0, #0
 801796a:	e7e0      	b.n	801792e <_raise_r+0x12>

0801796c <raise>:
 801796c:	4b02      	ldr	r3, [pc, #8]	; (8017978 <raise+0xc>)
 801796e:	4601      	mov	r1, r0
 8017970:	6818      	ldr	r0, [r3, #0]
 8017972:	f7ff bfd3 	b.w	801791c <_raise_r>
 8017976:	bf00      	nop
 8017978:	2000145c 	.word	0x2000145c

0801797c <_kill_r>:
 801797c:	b538      	push	{r3, r4, r5, lr}
 801797e:	4d07      	ldr	r5, [pc, #28]	; (801799c <_kill_r+0x20>)
 8017980:	2300      	movs	r3, #0
 8017982:	4604      	mov	r4, r0
 8017984:	4608      	mov	r0, r1
 8017986:	4611      	mov	r1, r2
 8017988:	602b      	str	r3, [r5, #0]
 801798a:	f000 ff93 	bl	80188b4 <_kill>
 801798e:	1c43      	adds	r3, r0, #1
 8017990:	d102      	bne.n	8017998 <_kill_r+0x1c>
 8017992:	682b      	ldr	r3, [r5, #0]
 8017994:	b103      	cbz	r3, 8017998 <_kill_r+0x1c>
 8017996:	6023      	str	r3, [r4, #0]
 8017998:	bd38      	pop	{r3, r4, r5, pc}
 801799a:	bf00      	nop
 801799c:	2000c670 	.word	0x2000c670

080179a0 <_getpid_r>:
 80179a0:	f000 bf78 	b.w	8018894 <_getpid>

080179a4 <_fstat_r>:
 80179a4:	b538      	push	{r3, r4, r5, lr}
 80179a6:	4d07      	ldr	r5, [pc, #28]	; (80179c4 <_fstat_r+0x20>)
 80179a8:	2300      	movs	r3, #0
 80179aa:	4604      	mov	r4, r0
 80179ac:	4608      	mov	r0, r1
 80179ae:	4611      	mov	r1, r2
 80179b0:	602b      	str	r3, [r5, #0]
 80179b2:	f000 ff67 	bl	8018884 <_fstat>
 80179b6:	1c43      	adds	r3, r0, #1
 80179b8:	d102      	bne.n	80179c0 <_fstat_r+0x1c>
 80179ba:	682b      	ldr	r3, [r5, #0]
 80179bc:	b103      	cbz	r3, 80179c0 <_fstat_r+0x1c>
 80179be:	6023      	str	r3, [r4, #0]
 80179c0:	bd38      	pop	{r3, r4, r5, pc}
 80179c2:	bf00      	nop
 80179c4:	2000c670 	.word	0x2000c670

080179c8 <_isatty_r>:
 80179c8:	b538      	push	{r3, r4, r5, lr}
 80179ca:	4d06      	ldr	r5, [pc, #24]	; (80179e4 <_isatty_r+0x1c>)
 80179cc:	2300      	movs	r3, #0
 80179ce:	4604      	mov	r4, r0
 80179d0:	4608      	mov	r0, r1
 80179d2:	602b      	str	r3, [r5, #0]
 80179d4:	f000 ff66 	bl	80188a4 <_isatty>
 80179d8:	1c43      	adds	r3, r0, #1
 80179da:	d102      	bne.n	80179e2 <_isatty_r+0x1a>
 80179dc:	682b      	ldr	r3, [r5, #0]
 80179de:	b103      	cbz	r3, 80179e2 <_isatty_r+0x1a>
 80179e0:	6023      	str	r3, [r4, #0]
 80179e2:	bd38      	pop	{r3, r4, r5, pc}
 80179e4:	2000c670 	.word	0x2000c670

080179e8 <pow>:
 80179e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80179ea:	ed2d 8b02 	vpush	{d8}
 80179ee:	eeb0 8a40 	vmov.f32	s16, s0
 80179f2:	eef0 8a60 	vmov.f32	s17, s1
 80179f6:	ec55 4b11 	vmov	r4, r5, d1
 80179fa:	f000 f891 	bl	8017b20 <__ieee754_pow>
 80179fe:	4622      	mov	r2, r4
 8017a00:	462b      	mov	r3, r5
 8017a02:	4620      	mov	r0, r4
 8017a04:	4629      	mov	r1, r5
 8017a06:	ec57 6b10 	vmov	r6, r7, d0
 8017a0a:	f7e9 f8bf 	bl	8000b8c <__aeabi_dcmpun>
 8017a0e:	2800      	cmp	r0, #0
 8017a10:	d13b      	bne.n	8017a8a <pow+0xa2>
 8017a12:	ec51 0b18 	vmov	r0, r1, d8
 8017a16:	2200      	movs	r2, #0
 8017a18:	2300      	movs	r3, #0
 8017a1a:	f7e9 f885 	bl	8000b28 <__aeabi_dcmpeq>
 8017a1e:	b1b8      	cbz	r0, 8017a50 <pow+0x68>
 8017a20:	2200      	movs	r2, #0
 8017a22:	2300      	movs	r3, #0
 8017a24:	4620      	mov	r0, r4
 8017a26:	4629      	mov	r1, r5
 8017a28:	f7e9 f87e 	bl	8000b28 <__aeabi_dcmpeq>
 8017a2c:	2800      	cmp	r0, #0
 8017a2e:	d146      	bne.n	8017abe <pow+0xd6>
 8017a30:	ec45 4b10 	vmov	d0, r4, r5
 8017a34:	f000 fe8d 	bl	8018752 <finite>
 8017a38:	b338      	cbz	r0, 8017a8a <pow+0xa2>
 8017a3a:	2200      	movs	r2, #0
 8017a3c:	2300      	movs	r3, #0
 8017a3e:	4620      	mov	r0, r4
 8017a40:	4629      	mov	r1, r5
 8017a42:	f7e9 f87b 	bl	8000b3c <__aeabi_dcmplt>
 8017a46:	b300      	cbz	r0, 8017a8a <pow+0xa2>
 8017a48:	f7fa fe8e 	bl	8012768 <__errno>
 8017a4c:	2322      	movs	r3, #34	; 0x22
 8017a4e:	e01b      	b.n	8017a88 <pow+0xa0>
 8017a50:	ec47 6b10 	vmov	d0, r6, r7
 8017a54:	f000 fe7d 	bl	8018752 <finite>
 8017a58:	b9e0      	cbnz	r0, 8017a94 <pow+0xac>
 8017a5a:	eeb0 0a48 	vmov.f32	s0, s16
 8017a5e:	eef0 0a68 	vmov.f32	s1, s17
 8017a62:	f000 fe76 	bl	8018752 <finite>
 8017a66:	b1a8      	cbz	r0, 8017a94 <pow+0xac>
 8017a68:	ec45 4b10 	vmov	d0, r4, r5
 8017a6c:	f000 fe71 	bl	8018752 <finite>
 8017a70:	b180      	cbz	r0, 8017a94 <pow+0xac>
 8017a72:	4632      	mov	r2, r6
 8017a74:	463b      	mov	r3, r7
 8017a76:	4630      	mov	r0, r6
 8017a78:	4639      	mov	r1, r7
 8017a7a:	f7e9 f887 	bl	8000b8c <__aeabi_dcmpun>
 8017a7e:	2800      	cmp	r0, #0
 8017a80:	d0e2      	beq.n	8017a48 <pow+0x60>
 8017a82:	f7fa fe71 	bl	8012768 <__errno>
 8017a86:	2321      	movs	r3, #33	; 0x21
 8017a88:	6003      	str	r3, [r0, #0]
 8017a8a:	ecbd 8b02 	vpop	{d8}
 8017a8e:	ec47 6b10 	vmov	d0, r6, r7
 8017a92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017a94:	2200      	movs	r2, #0
 8017a96:	2300      	movs	r3, #0
 8017a98:	4630      	mov	r0, r6
 8017a9a:	4639      	mov	r1, r7
 8017a9c:	f7e9 f844 	bl	8000b28 <__aeabi_dcmpeq>
 8017aa0:	2800      	cmp	r0, #0
 8017aa2:	d0f2      	beq.n	8017a8a <pow+0xa2>
 8017aa4:	eeb0 0a48 	vmov.f32	s0, s16
 8017aa8:	eef0 0a68 	vmov.f32	s1, s17
 8017aac:	f000 fe51 	bl	8018752 <finite>
 8017ab0:	2800      	cmp	r0, #0
 8017ab2:	d0ea      	beq.n	8017a8a <pow+0xa2>
 8017ab4:	ec45 4b10 	vmov	d0, r4, r5
 8017ab8:	f000 fe4b 	bl	8018752 <finite>
 8017abc:	e7c3      	b.n	8017a46 <pow+0x5e>
 8017abe:	4f01      	ldr	r7, [pc, #4]	; (8017ac4 <pow+0xdc>)
 8017ac0:	2600      	movs	r6, #0
 8017ac2:	e7e2      	b.n	8017a8a <pow+0xa2>
 8017ac4:	3ff00000 	.word	0x3ff00000

08017ac8 <sqrt>:
 8017ac8:	b538      	push	{r3, r4, r5, lr}
 8017aca:	ed2d 8b02 	vpush	{d8}
 8017ace:	ec55 4b10 	vmov	r4, r5, d0
 8017ad2:	f000 fd53 	bl	801857c <__ieee754_sqrt>
 8017ad6:	4622      	mov	r2, r4
 8017ad8:	462b      	mov	r3, r5
 8017ada:	4620      	mov	r0, r4
 8017adc:	4629      	mov	r1, r5
 8017ade:	eeb0 8a40 	vmov.f32	s16, s0
 8017ae2:	eef0 8a60 	vmov.f32	s17, s1
 8017ae6:	f7e9 f851 	bl	8000b8c <__aeabi_dcmpun>
 8017aea:	b990      	cbnz	r0, 8017b12 <sqrt+0x4a>
 8017aec:	2200      	movs	r2, #0
 8017aee:	2300      	movs	r3, #0
 8017af0:	4620      	mov	r0, r4
 8017af2:	4629      	mov	r1, r5
 8017af4:	f7e9 f822 	bl	8000b3c <__aeabi_dcmplt>
 8017af8:	b158      	cbz	r0, 8017b12 <sqrt+0x4a>
 8017afa:	f7fa fe35 	bl	8012768 <__errno>
 8017afe:	2321      	movs	r3, #33	; 0x21
 8017b00:	6003      	str	r3, [r0, #0]
 8017b02:	2200      	movs	r2, #0
 8017b04:	2300      	movs	r3, #0
 8017b06:	4610      	mov	r0, r2
 8017b08:	4619      	mov	r1, r3
 8017b0a:	f7e8 fecf 	bl	80008ac <__aeabi_ddiv>
 8017b0e:	ec41 0b18 	vmov	d8, r0, r1
 8017b12:	eeb0 0a48 	vmov.f32	s0, s16
 8017b16:	eef0 0a68 	vmov.f32	s1, s17
 8017b1a:	ecbd 8b02 	vpop	{d8}
 8017b1e:	bd38      	pop	{r3, r4, r5, pc}

08017b20 <__ieee754_pow>:
 8017b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b24:	ed2d 8b06 	vpush	{d8-d10}
 8017b28:	b089      	sub	sp, #36	; 0x24
 8017b2a:	ed8d 1b00 	vstr	d1, [sp]
 8017b2e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8017b32:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8017b36:	ea58 0102 	orrs.w	r1, r8, r2
 8017b3a:	ec57 6b10 	vmov	r6, r7, d0
 8017b3e:	d115      	bne.n	8017b6c <__ieee754_pow+0x4c>
 8017b40:	19b3      	adds	r3, r6, r6
 8017b42:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8017b46:	4152      	adcs	r2, r2
 8017b48:	4299      	cmp	r1, r3
 8017b4a:	4b89      	ldr	r3, [pc, #548]	; (8017d70 <__ieee754_pow+0x250>)
 8017b4c:	4193      	sbcs	r3, r2
 8017b4e:	f080 84d2 	bcs.w	80184f6 <__ieee754_pow+0x9d6>
 8017b52:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017b56:	4630      	mov	r0, r6
 8017b58:	4639      	mov	r1, r7
 8017b5a:	f7e8 fbc7 	bl	80002ec <__adddf3>
 8017b5e:	ec41 0b10 	vmov	d0, r0, r1
 8017b62:	b009      	add	sp, #36	; 0x24
 8017b64:	ecbd 8b06 	vpop	{d8-d10}
 8017b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b6c:	4b81      	ldr	r3, [pc, #516]	; (8017d74 <__ieee754_pow+0x254>)
 8017b6e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8017b72:	429c      	cmp	r4, r3
 8017b74:	ee10 aa10 	vmov	sl, s0
 8017b78:	463d      	mov	r5, r7
 8017b7a:	dc06      	bgt.n	8017b8a <__ieee754_pow+0x6a>
 8017b7c:	d101      	bne.n	8017b82 <__ieee754_pow+0x62>
 8017b7e:	2e00      	cmp	r6, #0
 8017b80:	d1e7      	bne.n	8017b52 <__ieee754_pow+0x32>
 8017b82:	4598      	cmp	r8, r3
 8017b84:	dc01      	bgt.n	8017b8a <__ieee754_pow+0x6a>
 8017b86:	d10f      	bne.n	8017ba8 <__ieee754_pow+0x88>
 8017b88:	b172      	cbz	r2, 8017ba8 <__ieee754_pow+0x88>
 8017b8a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8017b8e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8017b92:	ea55 050a 	orrs.w	r5, r5, sl
 8017b96:	d1dc      	bne.n	8017b52 <__ieee754_pow+0x32>
 8017b98:	e9dd 3200 	ldrd	r3, r2, [sp]
 8017b9c:	18db      	adds	r3, r3, r3
 8017b9e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8017ba2:	4152      	adcs	r2, r2
 8017ba4:	429d      	cmp	r5, r3
 8017ba6:	e7d0      	b.n	8017b4a <__ieee754_pow+0x2a>
 8017ba8:	2d00      	cmp	r5, #0
 8017baa:	da3b      	bge.n	8017c24 <__ieee754_pow+0x104>
 8017bac:	4b72      	ldr	r3, [pc, #456]	; (8017d78 <__ieee754_pow+0x258>)
 8017bae:	4598      	cmp	r8, r3
 8017bb0:	dc51      	bgt.n	8017c56 <__ieee754_pow+0x136>
 8017bb2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8017bb6:	4598      	cmp	r8, r3
 8017bb8:	f340 84ac 	ble.w	8018514 <__ieee754_pow+0x9f4>
 8017bbc:	ea4f 5328 	mov.w	r3, r8, asr #20
 8017bc0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8017bc4:	2b14      	cmp	r3, #20
 8017bc6:	dd0f      	ble.n	8017be8 <__ieee754_pow+0xc8>
 8017bc8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8017bcc:	fa22 f103 	lsr.w	r1, r2, r3
 8017bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8017bd4:	4293      	cmp	r3, r2
 8017bd6:	f040 849d 	bne.w	8018514 <__ieee754_pow+0x9f4>
 8017bda:	f001 0101 	and.w	r1, r1, #1
 8017bde:	f1c1 0302 	rsb	r3, r1, #2
 8017be2:	9304      	str	r3, [sp, #16]
 8017be4:	b182      	cbz	r2, 8017c08 <__ieee754_pow+0xe8>
 8017be6:	e05f      	b.n	8017ca8 <__ieee754_pow+0x188>
 8017be8:	2a00      	cmp	r2, #0
 8017bea:	d15b      	bne.n	8017ca4 <__ieee754_pow+0x184>
 8017bec:	f1c3 0314 	rsb	r3, r3, #20
 8017bf0:	fa48 f103 	asr.w	r1, r8, r3
 8017bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8017bf8:	4543      	cmp	r3, r8
 8017bfa:	f040 8488 	bne.w	801850e <__ieee754_pow+0x9ee>
 8017bfe:	f001 0101 	and.w	r1, r1, #1
 8017c02:	f1c1 0302 	rsb	r3, r1, #2
 8017c06:	9304      	str	r3, [sp, #16]
 8017c08:	4b5c      	ldr	r3, [pc, #368]	; (8017d7c <__ieee754_pow+0x25c>)
 8017c0a:	4598      	cmp	r8, r3
 8017c0c:	d132      	bne.n	8017c74 <__ieee754_pow+0x154>
 8017c0e:	f1b9 0f00 	cmp.w	r9, #0
 8017c12:	f280 8478 	bge.w	8018506 <__ieee754_pow+0x9e6>
 8017c16:	4959      	ldr	r1, [pc, #356]	; (8017d7c <__ieee754_pow+0x25c>)
 8017c18:	4632      	mov	r2, r6
 8017c1a:	463b      	mov	r3, r7
 8017c1c:	2000      	movs	r0, #0
 8017c1e:	f7e8 fe45 	bl	80008ac <__aeabi_ddiv>
 8017c22:	e79c      	b.n	8017b5e <__ieee754_pow+0x3e>
 8017c24:	2300      	movs	r3, #0
 8017c26:	9304      	str	r3, [sp, #16]
 8017c28:	2a00      	cmp	r2, #0
 8017c2a:	d13d      	bne.n	8017ca8 <__ieee754_pow+0x188>
 8017c2c:	4b51      	ldr	r3, [pc, #324]	; (8017d74 <__ieee754_pow+0x254>)
 8017c2e:	4598      	cmp	r8, r3
 8017c30:	d1ea      	bne.n	8017c08 <__ieee754_pow+0xe8>
 8017c32:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8017c36:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8017c3a:	ea53 030a 	orrs.w	r3, r3, sl
 8017c3e:	f000 845a 	beq.w	80184f6 <__ieee754_pow+0x9d6>
 8017c42:	4b4f      	ldr	r3, [pc, #316]	; (8017d80 <__ieee754_pow+0x260>)
 8017c44:	429c      	cmp	r4, r3
 8017c46:	dd08      	ble.n	8017c5a <__ieee754_pow+0x13a>
 8017c48:	f1b9 0f00 	cmp.w	r9, #0
 8017c4c:	f2c0 8457 	blt.w	80184fe <__ieee754_pow+0x9de>
 8017c50:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017c54:	e783      	b.n	8017b5e <__ieee754_pow+0x3e>
 8017c56:	2302      	movs	r3, #2
 8017c58:	e7e5      	b.n	8017c26 <__ieee754_pow+0x106>
 8017c5a:	f1b9 0f00 	cmp.w	r9, #0
 8017c5e:	f04f 0000 	mov.w	r0, #0
 8017c62:	f04f 0100 	mov.w	r1, #0
 8017c66:	f6bf af7a 	bge.w	8017b5e <__ieee754_pow+0x3e>
 8017c6a:	e9dd 0300 	ldrd	r0, r3, [sp]
 8017c6e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8017c72:	e774      	b.n	8017b5e <__ieee754_pow+0x3e>
 8017c74:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8017c78:	d106      	bne.n	8017c88 <__ieee754_pow+0x168>
 8017c7a:	4632      	mov	r2, r6
 8017c7c:	463b      	mov	r3, r7
 8017c7e:	4630      	mov	r0, r6
 8017c80:	4639      	mov	r1, r7
 8017c82:	f7e8 fce9 	bl	8000658 <__aeabi_dmul>
 8017c86:	e76a      	b.n	8017b5e <__ieee754_pow+0x3e>
 8017c88:	4b3e      	ldr	r3, [pc, #248]	; (8017d84 <__ieee754_pow+0x264>)
 8017c8a:	4599      	cmp	r9, r3
 8017c8c:	d10c      	bne.n	8017ca8 <__ieee754_pow+0x188>
 8017c8e:	2d00      	cmp	r5, #0
 8017c90:	db0a      	blt.n	8017ca8 <__ieee754_pow+0x188>
 8017c92:	ec47 6b10 	vmov	d0, r6, r7
 8017c96:	b009      	add	sp, #36	; 0x24
 8017c98:	ecbd 8b06 	vpop	{d8-d10}
 8017c9c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ca0:	f000 bc6c 	b.w	801857c <__ieee754_sqrt>
 8017ca4:	2300      	movs	r3, #0
 8017ca6:	9304      	str	r3, [sp, #16]
 8017ca8:	ec47 6b10 	vmov	d0, r6, r7
 8017cac:	f000 fd48 	bl	8018740 <fabs>
 8017cb0:	ec51 0b10 	vmov	r0, r1, d0
 8017cb4:	f1ba 0f00 	cmp.w	sl, #0
 8017cb8:	d129      	bne.n	8017d0e <__ieee754_pow+0x1ee>
 8017cba:	b124      	cbz	r4, 8017cc6 <__ieee754_pow+0x1a6>
 8017cbc:	4b2f      	ldr	r3, [pc, #188]	; (8017d7c <__ieee754_pow+0x25c>)
 8017cbe:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8017cc2:	429a      	cmp	r2, r3
 8017cc4:	d123      	bne.n	8017d0e <__ieee754_pow+0x1ee>
 8017cc6:	f1b9 0f00 	cmp.w	r9, #0
 8017cca:	da05      	bge.n	8017cd8 <__ieee754_pow+0x1b8>
 8017ccc:	4602      	mov	r2, r0
 8017cce:	460b      	mov	r3, r1
 8017cd0:	2000      	movs	r0, #0
 8017cd2:	492a      	ldr	r1, [pc, #168]	; (8017d7c <__ieee754_pow+0x25c>)
 8017cd4:	f7e8 fdea 	bl	80008ac <__aeabi_ddiv>
 8017cd8:	2d00      	cmp	r5, #0
 8017cda:	f6bf af40 	bge.w	8017b5e <__ieee754_pow+0x3e>
 8017cde:	9b04      	ldr	r3, [sp, #16]
 8017ce0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8017ce4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8017ce8:	4323      	orrs	r3, r4
 8017cea:	d108      	bne.n	8017cfe <__ieee754_pow+0x1de>
 8017cec:	4602      	mov	r2, r0
 8017cee:	460b      	mov	r3, r1
 8017cf0:	4610      	mov	r0, r2
 8017cf2:	4619      	mov	r1, r3
 8017cf4:	f7e8 faf8 	bl	80002e8 <__aeabi_dsub>
 8017cf8:	4602      	mov	r2, r0
 8017cfa:	460b      	mov	r3, r1
 8017cfc:	e78f      	b.n	8017c1e <__ieee754_pow+0xfe>
 8017cfe:	9b04      	ldr	r3, [sp, #16]
 8017d00:	2b01      	cmp	r3, #1
 8017d02:	f47f af2c 	bne.w	8017b5e <__ieee754_pow+0x3e>
 8017d06:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017d0a:	4619      	mov	r1, r3
 8017d0c:	e727      	b.n	8017b5e <__ieee754_pow+0x3e>
 8017d0e:	0feb      	lsrs	r3, r5, #31
 8017d10:	3b01      	subs	r3, #1
 8017d12:	9306      	str	r3, [sp, #24]
 8017d14:	9a06      	ldr	r2, [sp, #24]
 8017d16:	9b04      	ldr	r3, [sp, #16]
 8017d18:	4313      	orrs	r3, r2
 8017d1a:	d102      	bne.n	8017d22 <__ieee754_pow+0x202>
 8017d1c:	4632      	mov	r2, r6
 8017d1e:	463b      	mov	r3, r7
 8017d20:	e7e6      	b.n	8017cf0 <__ieee754_pow+0x1d0>
 8017d22:	4b19      	ldr	r3, [pc, #100]	; (8017d88 <__ieee754_pow+0x268>)
 8017d24:	4598      	cmp	r8, r3
 8017d26:	f340 80fb 	ble.w	8017f20 <__ieee754_pow+0x400>
 8017d2a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8017d2e:	4598      	cmp	r8, r3
 8017d30:	4b13      	ldr	r3, [pc, #76]	; (8017d80 <__ieee754_pow+0x260>)
 8017d32:	dd0c      	ble.n	8017d4e <__ieee754_pow+0x22e>
 8017d34:	429c      	cmp	r4, r3
 8017d36:	dc0f      	bgt.n	8017d58 <__ieee754_pow+0x238>
 8017d38:	f1b9 0f00 	cmp.w	r9, #0
 8017d3c:	da0f      	bge.n	8017d5e <__ieee754_pow+0x23e>
 8017d3e:	2000      	movs	r0, #0
 8017d40:	b009      	add	sp, #36	; 0x24
 8017d42:	ecbd 8b06 	vpop	{d8-d10}
 8017d46:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d4a:	f000 bcf0 	b.w	801872e <__math_oflow>
 8017d4e:	429c      	cmp	r4, r3
 8017d50:	dbf2      	blt.n	8017d38 <__ieee754_pow+0x218>
 8017d52:	4b0a      	ldr	r3, [pc, #40]	; (8017d7c <__ieee754_pow+0x25c>)
 8017d54:	429c      	cmp	r4, r3
 8017d56:	dd19      	ble.n	8017d8c <__ieee754_pow+0x26c>
 8017d58:	f1b9 0f00 	cmp.w	r9, #0
 8017d5c:	dcef      	bgt.n	8017d3e <__ieee754_pow+0x21e>
 8017d5e:	2000      	movs	r0, #0
 8017d60:	b009      	add	sp, #36	; 0x24
 8017d62:	ecbd 8b06 	vpop	{d8-d10}
 8017d66:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d6a:	f000 bcd7 	b.w	801871c <__math_uflow>
 8017d6e:	bf00      	nop
 8017d70:	fff00000 	.word	0xfff00000
 8017d74:	7ff00000 	.word	0x7ff00000
 8017d78:	433fffff 	.word	0x433fffff
 8017d7c:	3ff00000 	.word	0x3ff00000
 8017d80:	3fefffff 	.word	0x3fefffff
 8017d84:	3fe00000 	.word	0x3fe00000
 8017d88:	41e00000 	.word	0x41e00000
 8017d8c:	4b60      	ldr	r3, [pc, #384]	; (8017f10 <__ieee754_pow+0x3f0>)
 8017d8e:	2200      	movs	r2, #0
 8017d90:	f7e8 faaa 	bl	80002e8 <__aeabi_dsub>
 8017d94:	a354      	add	r3, pc, #336	; (adr r3, 8017ee8 <__ieee754_pow+0x3c8>)
 8017d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d9a:	4604      	mov	r4, r0
 8017d9c:	460d      	mov	r5, r1
 8017d9e:	f7e8 fc5b 	bl	8000658 <__aeabi_dmul>
 8017da2:	a353      	add	r3, pc, #332	; (adr r3, 8017ef0 <__ieee754_pow+0x3d0>)
 8017da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017da8:	4606      	mov	r6, r0
 8017daa:	460f      	mov	r7, r1
 8017dac:	4620      	mov	r0, r4
 8017dae:	4629      	mov	r1, r5
 8017db0:	f7e8 fc52 	bl	8000658 <__aeabi_dmul>
 8017db4:	4b57      	ldr	r3, [pc, #348]	; (8017f14 <__ieee754_pow+0x3f4>)
 8017db6:	4682      	mov	sl, r0
 8017db8:	468b      	mov	fp, r1
 8017dba:	2200      	movs	r2, #0
 8017dbc:	4620      	mov	r0, r4
 8017dbe:	4629      	mov	r1, r5
 8017dc0:	f7e8 fc4a 	bl	8000658 <__aeabi_dmul>
 8017dc4:	4602      	mov	r2, r0
 8017dc6:	460b      	mov	r3, r1
 8017dc8:	a14b      	add	r1, pc, #300	; (adr r1, 8017ef8 <__ieee754_pow+0x3d8>)
 8017dca:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017dce:	f7e8 fa8b 	bl	80002e8 <__aeabi_dsub>
 8017dd2:	4622      	mov	r2, r4
 8017dd4:	462b      	mov	r3, r5
 8017dd6:	f7e8 fc3f 	bl	8000658 <__aeabi_dmul>
 8017dda:	4602      	mov	r2, r0
 8017ddc:	460b      	mov	r3, r1
 8017dde:	2000      	movs	r0, #0
 8017de0:	494d      	ldr	r1, [pc, #308]	; (8017f18 <__ieee754_pow+0x3f8>)
 8017de2:	f7e8 fa81 	bl	80002e8 <__aeabi_dsub>
 8017de6:	4622      	mov	r2, r4
 8017de8:	4680      	mov	r8, r0
 8017dea:	4689      	mov	r9, r1
 8017dec:	462b      	mov	r3, r5
 8017dee:	4620      	mov	r0, r4
 8017df0:	4629      	mov	r1, r5
 8017df2:	f7e8 fc31 	bl	8000658 <__aeabi_dmul>
 8017df6:	4602      	mov	r2, r0
 8017df8:	460b      	mov	r3, r1
 8017dfa:	4640      	mov	r0, r8
 8017dfc:	4649      	mov	r1, r9
 8017dfe:	f7e8 fc2b 	bl	8000658 <__aeabi_dmul>
 8017e02:	a33f      	add	r3, pc, #252	; (adr r3, 8017f00 <__ieee754_pow+0x3e0>)
 8017e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e08:	f7e8 fc26 	bl	8000658 <__aeabi_dmul>
 8017e0c:	4602      	mov	r2, r0
 8017e0e:	460b      	mov	r3, r1
 8017e10:	4650      	mov	r0, sl
 8017e12:	4659      	mov	r1, fp
 8017e14:	f7e8 fa68 	bl	80002e8 <__aeabi_dsub>
 8017e18:	4602      	mov	r2, r0
 8017e1a:	460b      	mov	r3, r1
 8017e1c:	4680      	mov	r8, r0
 8017e1e:	4689      	mov	r9, r1
 8017e20:	4630      	mov	r0, r6
 8017e22:	4639      	mov	r1, r7
 8017e24:	f7e8 fa62 	bl	80002ec <__adddf3>
 8017e28:	2000      	movs	r0, #0
 8017e2a:	4632      	mov	r2, r6
 8017e2c:	463b      	mov	r3, r7
 8017e2e:	4604      	mov	r4, r0
 8017e30:	460d      	mov	r5, r1
 8017e32:	f7e8 fa59 	bl	80002e8 <__aeabi_dsub>
 8017e36:	4602      	mov	r2, r0
 8017e38:	460b      	mov	r3, r1
 8017e3a:	4640      	mov	r0, r8
 8017e3c:	4649      	mov	r1, r9
 8017e3e:	f7e8 fa53 	bl	80002e8 <__aeabi_dsub>
 8017e42:	9b04      	ldr	r3, [sp, #16]
 8017e44:	9a06      	ldr	r2, [sp, #24]
 8017e46:	3b01      	subs	r3, #1
 8017e48:	4313      	orrs	r3, r2
 8017e4a:	4682      	mov	sl, r0
 8017e4c:	468b      	mov	fp, r1
 8017e4e:	f040 81e7 	bne.w	8018220 <__ieee754_pow+0x700>
 8017e52:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8017f08 <__ieee754_pow+0x3e8>
 8017e56:	eeb0 8a47 	vmov.f32	s16, s14
 8017e5a:	eef0 8a67 	vmov.f32	s17, s15
 8017e5e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8017e62:	2600      	movs	r6, #0
 8017e64:	4632      	mov	r2, r6
 8017e66:	463b      	mov	r3, r7
 8017e68:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017e6c:	f7e8 fa3c 	bl	80002e8 <__aeabi_dsub>
 8017e70:	4622      	mov	r2, r4
 8017e72:	462b      	mov	r3, r5
 8017e74:	f7e8 fbf0 	bl	8000658 <__aeabi_dmul>
 8017e78:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017e7c:	4680      	mov	r8, r0
 8017e7e:	4689      	mov	r9, r1
 8017e80:	4650      	mov	r0, sl
 8017e82:	4659      	mov	r1, fp
 8017e84:	f7e8 fbe8 	bl	8000658 <__aeabi_dmul>
 8017e88:	4602      	mov	r2, r0
 8017e8a:	460b      	mov	r3, r1
 8017e8c:	4640      	mov	r0, r8
 8017e8e:	4649      	mov	r1, r9
 8017e90:	f7e8 fa2c 	bl	80002ec <__adddf3>
 8017e94:	4632      	mov	r2, r6
 8017e96:	463b      	mov	r3, r7
 8017e98:	4680      	mov	r8, r0
 8017e9a:	4689      	mov	r9, r1
 8017e9c:	4620      	mov	r0, r4
 8017e9e:	4629      	mov	r1, r5
 8017ea0:	f7e8 fbda 	bl	8000658 <__aeabi_dmul>
 8017ea4:	460b      	mov	r3, r1
 8017ea6:	4604      	mov	r4, r0
 8017ea8:	460d      	mov	r5, r1
 8017eaa:	4602      	mov	r2, r0
 8017eac:	4649      	mov	r1, r9
 8017eae:	4640      	mov	r0, r8
 8017eb0:	f7e8 fa1c 	bl	80002ec <__adddf3>
 8017eb4:	4b19      	ldr	r3, [pc, #100]	; (8017f1c <__ieee754_pow+0x3fc>)
 8017eb6:	4299      	cmp	r1, r3
 8017eb8:	ec45 4b19 	vmov	d9, r4, r5
 8017ebc:	4606      	mov	r6, r0
 8017ebe:	460f      	mov	r7, r1
 8017ec0:	468b      	mov	fp, r1
 8017ec2:	f340 82f1 	ble.w	80184a8 <__ieee754_pow+0x988>
 8017ec6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8017eca:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8017ece:	4303      	orrs	r3, r0
 8017ed0:	f000 81e4 	beq.w	801829c <__ieee754_pow+0x77c>
 8017ed4:	ec51 0b18 	vmov	r0, r1, d8
 8017ed8:	2200      	movs	r2, #0
 8017eda:	2300      	movs	r3, #0
 8017edc:	f7e8 fe2e 	bl	8000b3c <__aeabi_dcmplt>
 8017ee0:	3800      	subs	r0, #0
 8017ee2:	bf18      	it	ne
 8017ee4:	2001      	movne	r0, #1
 8017ee6:	e72b      	b.n	8017d40 <__ieee754_pow+0x220>
 8017ee8:	60000000 	.word	0x60000000
 8017eec:	3ff71547 	.word	0x3ff71547
 8017ef0:	f85ddf44 	.word	0xf85ddf44
 8017ef4:	3e54ae0b 	.word	0x3e54ae0b
 8017ef8:	55555555 	.word	0x55555555
 8017efc:	3fd55555 	.word	0x3fd55555
 8017f00:	652b82fe 	.word	0x652b82fe
 8017f04:	3ff71547 	.word	0x3ff71547
 8017f08:	00000000 	.word	0x00000000
 8017f0c:	bff00000 	.word	0xbff00000
 8017f10:	3ff00000 	.word	0x3ff00000
 8017f14:	3fd00000 	.word	0x3fd00000
 8017f18:	3fe00000 	.word	0x3fe00000
 8017f1c:	408fffff 	.word	0x408fffff
 8017f20:	4bd5      	ldr	r3, [pc, #852]	; (8018278 <__ieee754_pow+0x758>)
 8017f22:	402b      	ands	r3, r5
 8017f24:	2200      	movs	r2, #0
 8017f26:	b92b      	cbnz	r3, 8017f34 <__ieee754_pow+0x414>
 8017f28:	4bd4      	ldr	r3, [pc, #848]	; (801827c <__ieee754_pow+0x75c>)
 8017f2a:	f7e8 fb95 	bl	8000658 <__aeabi_dmul>
 8017f2e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8017f32:	460c      	mov	r4, r1
 8017f34:	1523      	asrs	r3, r4, #20
 8017f36:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8017f3a:	4413      	add	r3, r2
 8017f3c:	9305      	str	r3, [sp, #20]
 8017f3e:	4bd0      	ldr	r3, [pc, #832]	; (8018280 <__ieee754_pow+0x760>)
 8017f40:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8017f44:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8017f48:	429c      	cmp	r4, r3
 8017f4a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8017f4e:	dd08      	ble.n	8017f62 <__ieee754_pow+0x442>
 8017f50:	4bcc      	ldr	r3, [pc, #816]	; (8018284 <__ieee754_pow+0x764>)
 8017f52:	429c      	cmp	r4, r3
 8017f54:	f340 8162 	ble.w	801821c <__ieee754_pow+0x6fc>
 8017f58:	9b05      	ldr	r3, [sp, #20]
 8017f5a:	3301      	adds	r3, #1
 8017f5c:	9305      	str	r3, [sp, #20]
 8017f5e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8017f62:	2400      	movs	r4, #0
 8017f64:	00e3      	lsls	r3, r4, #3
 8017f66:	9307      	str	r3, [sp, #28]
 8017f68:	4bc7      	ldr	r3, [pc, #796]	; (8018288 <__ieee754_pow+0x768>)
 8017f6a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8017f6e:	ed93 7b00 	vldr	d7, [r3]
 8017f72:	4629      	mov	r1, r5
 8017f74:	ec53 2b17 	vmov	r2, r3, d7
 8017f78:	eeb0 9a47 	vmov.f32	s18, s14
 8017f7c:	eef0 9a67 	vmov.f32	s19, s15
 8017f80:	4682      	mov	sl, r0
 8017f82:	f7e8 f9b1 	bl	80002e8 <__aeabi_dsub>
 8017f86:	4652      	mov	r2, sl
 8017f88:	4606      	mov	r6, r0
 8017f8a:	460f      	mov	r7, r1
 8017f8c:	462b      	mov	r3, r5
 8017f8e:	ec51 0b19 	vmov	r0, r1, d9
 8017f92:	f7e8 f9ab 	bl	80002ec <__adddf3>
 8017f96:	4602      	mov	r2, r0
 8017f98:	460b      	mov	r3, r1
 8017f9a:	2000      	movs	r0, #0
 8017f9c:	49bb      	ldr	r1, [pc, #748]	; (801828c <__ieee754_pow+0x76c>)
 8017f9e:	f7e8 fc85 	bl	80008ac <__aeabi_ddiv>
 8017fa2:	ec41 0b1a 	vmov	d10, r0, r1
 8017fa6:	4602      	mov	r2, r0
 8017fa8:	460b      	mov	r3, r1
 8017faa:	4630      	mov	r0, r6
 8017fac:	4639      	mov	r1, r7
 8017fae:	f7e8 fb53 	bl	8000658 <__aeabi_dmul>
 8017fb2:	2300      	movs	r3, #0
 8017fb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017fb8:	9302      	str	r3, [sp, #8]
 8017fba:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8017fbe:	46ab      	mov	fp, r5
 8017fc0:	106d      	asrs	r5, r5, #1
 8017fc2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8017fc6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8017fca:	ec41 0b18 	vmov	d8, r0, r1
 8017fce:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8017fd2:	2200      	movs	r2, #0
 8017fd4:	4640      	mov	r0, r8
 8017fd6:	4649      	mov	r1, r9
 8017fd8:	4614      	mov	r4, r2
 8017fda:	461d      	mov	r5, r3
 8017fdc:	f7e8 fb3c 	bl	8000658 <__aeabi_dmul>
 8017fe0:	4602      	mov	r2, r0
 8017fe2:	460b      	mov	r3, r1
 8017fe4:	4630      	mov	r0, r6
 8017fe6:	4639      	mov	r1, r7
 8017fe8:	f7e8 f97e 	bl	80002e8 <__aeabi_dsub>
 8017fec:	ec53 2b19 	vmov	r2, r3, d9
 8017ff0:	4606      	mov	r6, r0
 8017ff2:	460f      	mov	r7, r1
 8017ff4:	4620      	mov	r0, r4
 8017ff6:	4629      	mov	r1, r5
 8017ff8:	f7e8 f976 	bl	80002e8 <__aeabi_dsub>
 8017ffc:	4602      	mov	r2, r0
 8017ffe:	460b      	mov	r3, r1
 8018000:	4650      	mov	r0, sl
 8018002:	4659      	mov	r1, fp
 8018004:	f7e8 f970 	bl	80002e8 <__aeabi_dsub>
 8018008:	4642      	mov	r2, r8
 801800a:	464b      	mov	r3, r9
 801800c:	f7e8 fb24 	bl	8000658 <__aeabi_dmul>
 8018010:	4602      	mov	r2, r0
 8018012:	460b      	mov	r3, r1
 8018014:	4630      	mov	r0, r6
 8018016:	4639      	mov	r1, r7
 8018018:	f7e8 f966 	bl	80002e8 <__aeabi_dsub>
 801801c:	ec53 2b1a 	vmov	r2, r3, d10
 8018020:	f7e8 fb1a 	bl	8000658 <__aeabi_dmul>
 8018024:	ec53 2b18 	vmov	r2, r3, d8
 8018028:	ec41 0b19 	vmov	d9, r0, r1
 801802c:	ec51 0b18 	vmov	r0, r1, d8
 8018030:	f7e8 fb12 	bl	8000658 <__aeabi_dmul>
 8018034:	a37c      	add	r3, pc, #496	; (adr r3, 8018228 <__ieee754_pow+0x708>)
 8018036:	e9d3 2300 	ldrd	r2, r3, [r3]
 801803a:	4604      	mov	r4, r0
 801803c:	460d      	mov	r5, r1
 801803e:	f7e8 fb0b 	bl	8000658 <__aeabi_dmul>
 8018042:	a37b      	add	r3, pc, #492	; (adr r3, 8018230 <__ieee754_pow+0x710>)
 8018044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018048:	f7e8 f950 	bl	80002ec <__adddf3>
 801804c:	4622      	mov	r2, r4
 801804e:	462b      	mov	r3, r5
 8018050:	f7e8 fb02 	bl	8000658 <__aeabi_dmul>
 8018054:	a378      	add	r3, pc, #480	; (adr r3, 8018238 <__ieee754_pow+0x718>)
 8018056:	e9d3 2300 	ldrd	r2, r3, [r3]
 801805a:	f7e8 f947 	bl	80002ec <__adddf3>
 801805e:	4622      	mov	r2, r4
 8018060:	462b      	mov	r3, r5
 8018062:	f7e8 faf9 	bl	8000658 <__aeabi_dmul>
 8018066:	a376      	add	r3, pc, #472	; (adr r3, 8018240 <__ieee754_pow+0x720>)
 8018068:	e9d3 2300 	ldrd	r2, r3, [r3]
 801806c:	f7e8 f93e 	bl	80002ec <__adddf3>
 8018070:	4622      	mov	r2, r4
 8018072:	462b      	mov	r3, r5
 8018074:	f7e8 faf0 	bl	8000658 <__aeabi_dmul>
 8018078:	a373      	add	r3, pc, #460	; (adr r3, 8018248 <__ieee754_pow+0x728>)
 801807a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801807e:	f7e8 f935 	bl	80002ec <__adddf3>
 8018082:	4622      	mov	r2, r4
 8018084:	462b      	mov	r3, r5
 8018086:	f7e8 fae7 	bl	8000658 <__aeabi_dmul>
 801808a:	a371      	add	r3, pc, #452	; (adr r3, 8018250 <__ieee754_pow+0x730>)
 801808c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018090:	f7e8 f92c 	bl	80002ec <__adddf3>
 8018094:	4622      	mov	r2, r4
 8018096:	4606      	mov	r6, r0
 8018098:	460f      	mov	r7, r1
 801809a:	462b      	mov	r3, r5
 801809c:	4620      	mov	r0, r4
 801809e:	4629      	mov	r1, r5
 80180a0:	f7e8 fada 	bl	8000658 <__aeabi_dmul>
 80180a4:	4602      	mov	r2, r0
 80180a6:	460b      	mov	r3, r1
 80180a8:	4630      	mov	r0, r6
 80180aa:	4639      	mov	r1, r7
 80180ac:	f7e8 fad4 	bl	8000658 <__aeabi_dmul>
 80180b0:	4642      	mov	r2, r8
 80180b2:	4604      	mov	r4, r0
 80180b4:	460d      	mov	r5, r1
 80180b6:	464b      	mov	r3, r9
 80180b8:	ec51 0b18 	vmov	r0, r1, d8
 80180bc:	f7e8 f916 	bl	80002ec <__adddf3>
 80180c0:	ec53 2b19 	vmov	r2, r3, d9
 80180c4:	f7e8 fac8 	bl	8000658 <__aeabi_dmul>
 80180c8:	4622      	mov	r2, r4
 80180ca:	462b      	mov	r3, r5
 80180cc:	f7e8 f90e 	bl	80002ec <__adddf3>
 80180d0:	4642      	mov	r2, r8
 80180d2:	4682      	mov	sl, r0
 80180d4:	468b      	mov	fp, r1
 80180d6:	464b      	mov	r3, r9
 80180d8:	4640      	mov	r0, r8
 80180da:	4649      	mov	r1, r9
 80180dc:	f7e8 fabc 	bl	8000658 <__aeabi_dmul>
 80180e0:	4b6b      	ldr	r3, [pc, #428]	; (8018290 <__ieee754_pow+0x770>)
 80180e2:	2200      	movs	r2, #0
 80180e4:	4606      	mov	r6, r0
 80180e6:	460f      	mov	r7, r1
 80180e8:	f7e8 f900 	bl	80002ec <__adddf3>
 80180ec:	4652      	mov	r2, sl
 80180ee:	465b      	mov	r3, fp
 80180f0:	f7e8 f8fc 	bl	80002ec <__adddf3>
 80180f4:	2000      	movs	r0, #0
 80180f6:	4604      	mov	r4, r0
 80180f8:	460d      	mov	r5, r1
 80180fa:	4602      	mov	r2, r0
 80180fc:	460b      	mov	r3, r1
 80180fe:	4640      	mov	r0, r8
 8018100:	4649      	mov	r1, r9
 8018102:	f7e8 faa9 	bl	8000658 <__aeabi_dmul>
 8018106:	4b62      	ldr	r3, [pc, #392]	; (8018290 <__ieee754_pow+0x770>)
 8018108:	4680      	mov	r8, r0
 801810a:	4689      	mov	r9, r1
 801810c:	2200      	movs	r2, #0
 801810e:	4620      	mov	r0, r4
 8018110:	4629      	mov	r1, r5
 8018112:	f7e8 f8e9 	bl	80002e8 <__aeabi_dsub>
 8018116:	4632      	mov	r2, r6
 8018118:	463b      	mov	r3, r7
 801811a:	f7e8 f8e5 	bl	80002e8 <__aeabi_dsub>
 801811e:	4602      	mov	r2, r0
 8018120:	460b      	mov	r3, r1
 8018122:	4650      	mov	r0, sl
 8018124:	4659      	mov	r1, fp
 8018126:	f7e8 f8df 	bl	80002e8 <__aeabi_dsub>
 801812a:	ec53 2b18 	vmov	r2, r3, d8
 801812e:	f7e8 fa93 	bl	8000658 <__aeabi_dmul>
 8018132:	4622      	mov	r2, r4
 8018134:	4606      	mov	r6, r0
 8018136:	460f      	mov	r7, r1
 8018138:	462b      	mov	r3, r5
 801813a:	ec51 0b19 	vmov	r0, r1, d9
 801813e:	f7e8 fa8b 	bl	8000658 <__aeabi_dmul>
 8018142:	4602      	mov	r2, r0
 8018144:	460b      	mov	r3, r1
 8018146:	4630      	mov	r0, r6
 8018148:	4639      	mov	r1, r7
 801814a:	f7e8 f8cf 	bl	80002ec <__adddf3>
 801814e:	4606      	mov	r6, r0
 8018150:	460f      	mov	r7, r1
 8018152:	4602      	mov	r2, r0
 8018154:	460b      	mov	r3, r1
 8018156:	4640      	mov	r0, r8
 8018158:	4649      	mov	r1, r9
 801815a:	f7e8 f8c7 	bl	80002ec <__adddf3>
 801815e:	a33e      	add	r3, pc, #248	; (adr r3, 8018258 <__ieee754_pow+0x738>)
 8018160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018164:	2000      	movs	r0, #0
 8018166:	4604      	mov	r4, r0
 8018168:	460d      	mov	r5, r1
 801816a:	f7e8 fa75 	bl	8000658 <__aeabi_dmul>
 801816e:	4642      	mov	r2, r8
 8018170:	ec41 0b18 	vmov	d8, r0, r1
 8018174:	464b      	mov	r3, r9
 8018176:	4620      	mov	r0, r4
 8018178:	4629      	mov	r1, r5
 801817a:	f7e8 f8b5 	bl	80002e8 <__aeabi_dsub>
 801817e:	4602      	mov	r2, r0
 8018180:	460b      	mov	r3, r1
 8018182:	4630      	mov	r0, r6
 8018184:	4639      	mov	r1, r7
 8018186:	f7e8 f8af 	bl	80002e8 <__aeabi_dsub>
 801818a:	a335      	add	r3, pc, #212	; (adr r3, 8018260 <__ieee754_pow+0x740>)
 801818c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018190:	f7e8 fa62 	bl	8000658 <__aeabi_dmul>
 8018194:	a334      	add	r3, pc, #208	; (adr r3, 8018268 <__ieee754_pow+0x748>)
 8018196:	e9d3 2300 	ldrd	r2, r3, [r3]
 801819a:	4606      	mov	r6, r0
 801819c:	460f      	mov	r7, r1
 801819e:	4620      	mov	r0, r4
 80181a0:	4629      	mov	r1, r5
 80181a2:	f7e8 fa59 	bl	8000658 <__aeabi_dmul>
 80181a6:	4602      	mov	r2, r0
 80181a8:	460b      	mov	r3, r1
 80181aa:	4630      	mov	r0, r6
 80181ac:	4639      	mov	r1, r7
 80181ae:	f7e8 f89d 	bl	80002ec <__adddf3>
 80181b2:	9a07      	ldr	r2, [sp, #28]
 80181b4:	4b37      	ldr	r3, [pc, #220]	; (8018294 <__ieee754_pow+0x774>)
 80181b6:	4413      	add	r3, r2
 80181b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80181bc:	f7e8 f896 	bl	80002ec <__adddf3>
 80181c0:	4682      	mov	sl, r0
 80181c2:	9805      	ldr	r0, [sp, #20]
 80181c4:	468b      	mov	fp, r1
 80181c6:	f7e8 f9dd 	bl	8000584 <__aeabi_i2d>
 80181ca:	9a07      	ldr	r2, [sp, #28]
 80181cc:	4b32      	ldr	r3, [pc, #200]	; (8018298 <__ieee754_pow+0x778>)
 80181ce:	4413      	add	r3, r2
 80181d0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80181d4:	4606      	mov	r6, r0
 80181d6:	460f      	mov	r7, r1
 80181d8:	4652      	mov	r2, sl
 80181da:	465b      	mov	r3, fp
 80181dc:	ec51 0b18 	vmov	r0, r1, d8
 80181e0:	f7e8 f884 	bl	80002ec <__adddf3>
 80181e4:	4642      	mov	r2, r8
 80181e6:	464b      	mov	r3, r9
 80181e8:	f7e8 f880 	bl	80002ec <__adddf3>
 80181ec:	4632      	mov	r2, r6
 80181ee:	463b      	mov	r3, r7
 80181f0:	f7e8 f87c 	bl	80002ec <__adddf3>
 80181f4:	2000      	movs	r0, #0
 80181f6:	4632      	mov	r2, r6
 80181f8:	463b      	mov	r3, r7
 80181fa:	4604      	mov	r4, r0
 80181fc:	460d      	mov	r5, r1
 80181fe:	f7e8 f873 	bl	80002e8 <__aeabi_dsub>
 8018202:	4642      	mov	r2, r8
 8018204:	464b      	mov	r3, r9
 8018206:	f7e8 f86f 	bl	80002e8 <__aeabi_dsub>
 801820a:	ec53 2b18 	vmov	r2, r3, d8
 801820e:	f7e8 f86b 	bl	80002e8 <__aeabi_dsub>
 8018212:	4602      	mov	r2, r0
 8018214:	460b      	mov	r3, r1
 8018216:	4650      	mov	r0, sl
 8018218:	4659      	mov	r1, fp
 801821a:	e610      	b.n	8017e3e <__ieee754_pow+0x31e>
 801821c:	2401      	movs	r4, #1
 801821e:	e6a1      	b.n	8017f64 <__ieee754_pow+0x444>
 8018220:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8018270 <__ieee754_pow+0x750>
 8018224:	e617      	b.n	8017e56 <__ieee754_pow+0x336>
 8018226:	bf00      	nop
 8018228:	4a454eef 	.word	0x4a454eef
 801822c:	3fca7e28 	.word	0x3fca7e28
 8018230:	93c9db65 	.word	0x93c9db65
 8018234:	3fcd864a 	.word	0x3fcd864a
 8018238:	a91d4101 	.word	0xa91d4101
 801823c:	3fd17460 	.word	0x3fd17460
 8018240:	518f264d 	.word	0x518f264d
 8018244:	3fd55555 	.word	0x3fd55555
 8018248:	db6fabff 	.word	0xdb6fabff
 801824c:	3fdb6db6 	.word	0x3fdb6db6
 8018250:	33333303 	.word	0x33333303
 8018254:	3fe33333 	.word	0x3fe33333
 8018258:	e0000000 	.word	0xe0000000
 801825c:	3feec709 	.word	0x3feec709
 8018260:	dc3a03fd 	.word	0xdc3a03fd
 8018264:	3feec709 	.word	0x3feec709
 8018268:	145b01f5 	.word	0x145b01f5
 801826c:	be3e2fe0 	.word	0xbe3e2fe0
 8018270:	00000000 	.word	0x00000000
 8018274:	3ff00000 	.word	0x3ff00000
 8018278:	7ff00000 	.word	0x7ff00000
 801827c:	43400000 	.word	0x43400000
 8018280:	0003988e 	.word	0x0003988e
 8018284:	000bb679 	.word	0x000bb679
 8018288:	0805de08 	.word	0x0805de08
 801828c:	3ff00000 	.word	0x3ff00000
 8018290:	40080000 	.word	0x40080000
 8018294:	0805de28 	.word	0x0805de28
 8018298:	0805de18 	.word	0x0805de18
 801829c:	a3b5      	add	r3, pc, #724	; (adr r3, 8018574 <__ieee754_pow+0xa54>)
 801829e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80182a2:	4640      	mov	r0, r8
 80182a4:	4649      	mov	r1, r9
 80182a6:	f7e8 f821 	bl	80002ec <__adddf3>
 80182aa:	4622      	mov	r2, r4
 80182ac:	ec41 0b1a 	vmov	d10, r0, r1
 80182b0:	462b      	mov	r3, r5
 80182b2:	4630      	mov	r0, r6
 80182b4:	4639      	mov	r1, r7
 80182b6:	f7e8 f817 	bl	80002e8 <__aeabi_dsub>
 80182ba:	4602      	mov	r2, r0
 80182bc:	460b      	mov	r3, r1
 80182be:	ec51 0b1a 	vmov	r0, r1, d10
 80182c2:	f7e8 fc59 	bl	8000b78 <__aeabi_dcmpgt>
 80182c6:	2800      	cmp	r0, #0
 80182c8:	f47f ae04 	bne.w	8017ed4 <__ieee754_pow+0x3b4>
 80182cc:	4aa4      	ldr	r2, [pc, #656]	; (8018560 <__ieee754_pow+0xa40>)
 80182ce:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80182d2:	4293      	cmp	r3, r2
 80182d4:	f340 8108 	ble.w	80184e8 <__ieee754_pow+0x9c8>
 80182d8:	151b      	asrs	r3, r3, #20
 80182da:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80182de:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80182e2:	fa4a f303 	asr.w	r3, sl, r3
 80182e6:	445b      	add	r3, fp
 80182e8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80182ec:	4e9d      	ldr	r6, [pc, #628]	; (8018564 <__ieee754_pow+0xa44>)
 80182ee:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80182f2:	4116      	asrs	r6, r2
 80182f4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80182f8:	2000      	movs	r0, #0
 80182fa:	ea23 0106 	bic.w	r1, r3, r6
 80182fe:	f1c2 0214 	rsb	r2, r2, #20
 8018302:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8018306:	fa4a fa02 	asr.w	sl, sl, r2
 801830a:	f1bb 0f00 	cmp.w	fp, #0
 801830e:	4602      	mov	r2, r0
 8018310:	460b      	mov	r3, r1
 8018312:	4620      	mov	r0, r4
 8018314:	4629      	mov	r1, r5
 8018316:	bfb8      	it	lt
 8018318:	f1ca 0a00 	rsblt	sl, sl, #0
 801831c:	f7e7 ffe4 	bl	80002e8 <__aeabi_dsub>
 8018320:	ec41 0b19 	vmov	d9, r0, r1
 8018324:	4642      	mov	r2, r8
 8018326:	464b      	mov	r3, r9
 8018328:	ec51 0b19 	vmov	r0, r1, d9
 801832c:	f7e7 ffde 	bl	80002ec <__adddf3>
 8018330:	a37b      	add	r3, pc, #492	; (adr r3, 8018520 <__ieee754_pow+0xa00>)
 8018332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018336:	2000      	movs	r0, #0
 8018338:	4604      	mov	r4, r0
 801833a:	460d      	mov	r5, r1
 801833c:	f7e8 f98c 	bl	8000658 <__aeabi_dmul>
 8018340:	ec53 2b19 	vmov	r2, r3, d9
 8018344:	4606      	mov	r6, r0
 8018346:	460f      	mov	r7, r1
 8018348:	4620      	mov	r0, r4
 801834a:	4629      	mov	r1, r5
 801834c:	f7e7 ffcc 	bl	80002e8 <__aeabi_dsub>
 8018350:	4602      	mov	r2, r0
 8018352:	460b      	mov	r3, r1
 8018354:	4640      	mov	r0, r8
 8018356:	4649      	mov	r1, r9
 8018358:	f7e7 ffc6 	bl	80002e8 <__aeabi_dsub>
 801835c:	a372      	add	r3, pc, #456	; (adr r3, 8018528 <__ieee754_pow+0xa08>)
 801835e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018362:	f7e8 f979 	bl	8000658 <__aeabi_dmul>
 8018366:	a372      	add	r3, pc, #456	; (adr r3, 8018530 <__ieee754_pow+0xa10>)
 8018368:	e9d3 2300 	ldrd	r2, r3, [r3]
 801836c:	4680      	mov	r8, r0
 801836e:	4689      	mov	r9, r1
 8018370:	4620      	mov	r0, r4
 8018372:	4629      	mov	r1, r5
 8018374:	f7e8 f970 	bl	8000658 <__aeabi_dmul>
 8018378:	4602      	mov	r2, r0
 801837a:	460b      	mov	r3, r1
 801837c:	4640      	mov	r0, r8
 801837e:	4649      	mov	r1, r9
 8018380:	f7e7 ffb4 	bl	80002ec <__adddf3>
 8018384:	4604      	mov	r4, r0
 8018386:	460d      	mov	r5, r1
 8018388:	4602      	mov	r2, r0
 801838a:	460b      	mov	r3, r1
 801838c:	4630      	mov	r0, r6
 801838e:	4639      	mov	r1, r7
 8018390:	f7e7 ffac 	bl	80002ec <__adddf3>
 8018394:	4632      	mov	r2, r6
 8018396:	463b      	mov	r3, r7
 8018398:	4680      	mov	r8, r0
 801839a:	4689      	mov	r9, r1
 801839c:	f7e7 ffa4 	bl	80002e8 <__aeabi_dsub>
 80183a0:	4602      	mov	r2, r0
 80183a2:	460b      	mov	r3, r1
 80183a4:	4620      	mov	r0, r4
 80183a6:	4629      	mov	r1, r5
 80183a8:	f7e7 ff9e 	bl	80002e8 <__aeabi_dsub>
 80183ac:	4642      	mov	r2, r8
 80183ae:	4606      	mov	r6, r0
 80183b0:	460f      	mov	r7, r1
 80183b2:	464b      	mov	r3, r9
 80183b4:	4640      	mov	r0, r8
 80183b6:	4649      	mov	r1, r9
 80183b8:	f7e8 f94e 	bl	8000658 <__aeabi_dmul>
 80183bc:	a35e      	add	r3, pc, #376	; (adr r3, 8018538 <__ieee754_pow+0xa18>)
 80183be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80183c2:	4604      	mov	r4, r0
 80183c4:	460d      	mov	r5, r1
 80183c6:	f7e8 f947 	bl	8000658 <__aeabi_dmul>
 80183ca:	a35d      	add	r3, pc, #372	; (adr r3, 8018540 <__ieee754_pow+0xa20>)
 80183cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80183d0:	f7e7 ff8a 	bl	80002e8 <__aeabi_dsub>
 80183d4:	4622      	mov	r2, r4
 80183d6:	462b      	mov	r3, r5
 80183d8:	f7e8 f93e 	bl	8000658 <__aeabi_dmul>
 80183dc:	a35a      	add	r3, pc, #360	; (adr r3, 8018548 <__ieee754_pow+0xa28>)
 80183de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80183e2:	f7e7 ff83 	bl	80002ec <__adddf3>
 80183e6:	4622      	mov	r2, r4
 80183e8:	462b      	mov	r3, r5
 80183ea:	f7e8 f935 	bl	8000658 <__aeabi_dmul>
 80183ee:	a358      	add	r3, pc, #352	; (adr r3, 8018550 <__ieee754_pow+0xa30>)
 80183f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80183f4:	f7e7 ff78 	bl	80002e8 <__aeabi_dsub>
 80183f8:	4622      	mov	r2, r4
 80183fa:	462b      	mov	r3, r5
 80183fc:	f7e8 f92c 	bl	8000658 <__aeabi_dmul>
 8018400:	a355      	add	r3, pc, #340	; (adr r3, 8018558 <__ieee754_pow+0xa38>)
 8018402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018406:	f7e7 ff71 	bl	80002ec <__adddf3>
 801840a:	4622      	mov	r2, r4
 801840c:	462b      	mov	r3, r5
 801840e:	f7e8 f923 	bl	8000658 <__aeabi_dmul>
 8018412:	4602      	mov	r2, r0
 8018414:	460b      	mov	r3, r1
 8018416:	4640      	mov	r0, r8
 8018418:	4649      	mov	r1, r9
 801841a:	f7e7 ff65 	bl	80002e8 <__aeabi_dsub>
 801841e:	4604      	mov	r4, r0
 8018420:	460d      	mov	r5, r1
 8018422:	4602      	mov	r2, r0
 8018424:	460b      	mov	r3, r1
 8018426:	4640      	mov	r0, r8
 8018428:	4649      	mov	r1, r9
 801842a:	f7e8 f915 	bl	8000658 <__aeabi_dmul>
 801842e:	2200      	movs	r2, #0
 8018430:	ec41 0b19 	vmov	d9, r0, r1
 8018434:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8018438:	4620      	mov	r0, r4
 801843a:	4629      	mov	r1, r5
 801843c:	f7e7 ff54 	bl	80002e8 <__aeabi_dsub>
 8018440:	4602      	mov	r2, r0
 8018442:	460b      	mov	r3, r1
 8018444:	ec51 0b19 	vmov	r0, r1, d9
 8018448:	f7e8 fa30 	bl	80008ac <__aeabi_ddiv>
 801844c:	4632      	mov	r2, r6
 801844e:	4604      	mov	r4, r0
 8018450:	460d      	mov	r5, r1
 8018452:	463b      	mov	r3, r7
 8018454:	4640      	mov	r0, r8
 8018456:	4649      	mov	r1, r9
 8018458:	f7e8 f8fe 	bl	8000658 <__aeabi_dmul>
 801845c:	4632      	mov	r2, r6
 801845e:	463b      	mov	r3, r7
 8018460:	f7e7 ff44 	bl	80002ec <__adddf3>
 8018464:	4602      	mov	r2, r0
 8018466:	460b      	mov	r3, r1
 8018468:	4620      	mov	r0, r4
 801846a:	4629      	mov	r1, r5
 801846c:	f7e7 ff3c 	bl	80002e8 <__aeabi_dsub>
 8018470:	4642      	mov	r2, r8
 8018472:	464b      	mov	r3, r9
 8018474:	f7e7 ff38 	bl	80002e8 <__aeabi_dsub>
 8018478:	460b      	mov	r3, r1
 801847a:	4602      	mov	r2, r0
 801847c:	493a      	ldr	r1, [pc, #232]	; (8018568 <__ieee754_pow+0xa48>)
 801847e:	2000      	movs	r0, #0
 8018480:	f7e7 ff32 	bl	80002e8 <__aeabi_dsub>
 8018484:	ec41 0b10 	vmov	d0, r0, r1
 8018488:	ee10 3a90 	vmov	r3, s1
 801848c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8018490:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8018494:	da2b      	bge.n	80184ee <__ieee754_pow+0x9ce>
 8018496:	4650      	mov	r0, sl
 8018498:	f000 f966 	bl	8018768 <scalbn>
 801849c:	ec51 0b10 	vmov	r0, r1, d0
 80184a0:	ec53 2b18 	vmov	r2, r3, d8
 80184a4:	f7ff bbed 	b.w	8017c82 <__ieee754_pow+0x162>
 80184a8:	4b30      	ldr	r3, [pc, #192]	; (801856c <__ieee754_pow+0xa4c>)
 80184aa:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80184ae:	429e      	cmp	r6, r3
 80184b0:	f77f af0c 	ble.w	80182cc <__ieee754_pow+0x7ac>
 80184b4:	4b2e      	ldr	r3, [pc, #184]	; (8018570 <__ieee754_pow+0xa50>)
 80184b6:	440b      	add	r3, r1
 80184b8:	4303      	orrs	r3, r0
 80184ba:	d009      	beq.n	80184d0 <__ieee754_pow+0x9b0>
 80184bc:	ec51 0b18 	vmov	r0, r1, d8
 80184c0:	2200      	movs	r2, #0
 80184c2:	2300      	movs	r3, #0
 80184c4:	f7e8 fb3a 	bl	8000b3c <__aeabi_dcmplt>
 80184c8:	3800      	subs	r0, #0
 80184ca:	bf18      	it	ne
 80184cc:	2001      	movne	r0, #1
 80184ce:	e447      	b.n	8017d60 <__ieee754_pow+0x240>
 80184d0:	4622      	mov	r2, r4
 80184d2:	462b      	mov	r3, r5
 80184d4:	f7e7 ff08 	bl	80002e8 <__aeabi_dsub>
 80184d8:	4642      	mov	r2, r8
 80184da:	464b      	mov	r3, r9
 80184dc:	f7e8 fb42 	bl	8000b64 <__aeabi_dcmpge>
 80184e0:	2800      	cmp	r0, #0
 80184e2:	f43f aef3 	beq.w	80182cc <__ieee754_pow+0x7ac>
 80184e6:	e7e9      	b.n	80184bc <__ieee754_pow+0x99c>
 80184e8:	f04f 0a00 	mov.w	sl, #0
 80184ec:	e71a      	b.n	8018324 <__ieee754_pow+0x804>
 80184ee:	ec51 0b10 	vmov	r0, r1, d0
 80184f2:	4619      	mov	r1, r3
 80184f4:	e7d4      	b.n	80184a0 <__ieee754_pow+0x980>
 80184f6:	491c      	ldr	r1, [pc, #112]	; (8018568 <__ieee754_pow+0xa48>)
 80184f8:	2000      	movs	r0, #0
 80184fa:	f7ff bb30 	b.w	8017b5e <__ieee754_pow+0x3e>
 80184fe:	2000      	movs	r0, #0
 8018500:	2100      	movs	r1, #0
 8018502:	f7ff bb2c 	b.w	8017b5e <__ieee754_pow+0x3e>
 8018506:	4630      	mov	r0, r6
 8018508:	4639      	mov	r1, r7
 801850a:	f7ff bb28 	b.w	8017b5e <__ieee754_pow+0x3e>
 801850e:	9204      	str	r2, [sp, #16]
 8018510:	f7ff bb7a 	b.w	8017c08 <__ieee754_pow+0xe8>
 8018514:	2300      	movs	r3, #0
 8018516:	f7ff bb64 	b.w	8017be2 <__ieee754_pow+0xc2>
 801851a:	bf00      	nop
 801851c:	f3af 8000 	nop.w
 8018520:	00000000 	.word	0x00000000
 8018524:	3fe62e43 	.word	0x3fe62e43
 8018528:	fefa39ef 	.word	0xfefa39ef
 801852c:	3fe62e42 	.word	0x3fe62e42
 8018530:	0ca86c39 	.word	0x0ca86c39
 8018534:	be205c61 	.word	0xbe205c61
 8018538:	72bea4d0 	.word	0x72bea4d0
 801853c:	3e663769 	.word	0x3e663769
 8018540:	c5d26bf1 	.word	0xc5d26bf1
 8018544:	3ebbbd41 	.word	0x3ebbbd41
 8018548:	af25de2c 	.word	0xaf25de2c
 801854c:	3f11566a 	.word	0x3f11566a
 8018550:	16bebd93 	.word	0x16bebd93
 8018554:	3f66c16c 	.word	0x3f66c16c
 8018558:	5555553e 	.word	0x5555553e
 801855c:	3fc55555 	.word	0x3fc55555
 8018560:	3fe00000 	.word	0x3fe00000
 8018564:	000fffff 	.word	0x000fffff
 8018568:	3ff00000 	.word	0x3ff00000
 801856c:	4090cbff 	.word	0x4090cbff
 8018570:	3f6f3400 	.word	0x3f6f3400
 8018574:	652b82fe 	.word	0x652b82fe
 8018578:	3c971547 	.word	0x3c971547

0801857c <__ieee754_sqrt>:
 801857c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018580:	ec55 4b10 	vmov	r4, r5, d0
 8018584:	4e55      	ldr	r6, [pc, #340]	; (80186dc <__ieee754_sqrt+0x160>)
 8018586:	43ae      	bics	r6, r5
 8018588:	ee10 0a10 	vmov	r0, s0
 801858c:	ee10 3a10 	vmov	r3, s0
 8018590:	462a      	mov	r2, r5
 8018592:	4629      	mov	r1, r5
 8018594:	d110      	bne.n	80185b8 <__ieee754_sqrt+0x3c>
 8018596:	ee10 2a10 	vmov	r2, s0
 801859a:	462b      	mov	r3, r5
 801859c:	f7e8 f85c 	bl	8000658 <__aeabi_dmul>
 80185a0:	4602      	mov	r2, r0
 80185a2:	460b      	mov	r3, r1
 80185a4:	4620      	mov	r0, r4
 80185a6:	4629      	mov	r1, r5
 80185a8:	f7e7 fea0 	bl	80002ec <__adddf3>
 80185ac:	4604      	mov	r4, r0
 80185ae:	460d      	mov	r5, r1
 80185b0:	ec45 4b10 	vmov	d0, r4, r5
 80185b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80185b8:	2d00      	cmp	r5, #0
 80185ba:	dc10      	bgt.n	80185de <__ieee754_sqrt+0x62>
 80185bc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80185c0:	4330      	orrs	r0, r6
 80185c2:	d0f5      	beq.n	80185b0 <__ieee754_sqrt+0x34>
 80185c4:	b15d      	cbz	r5, 80185de <__ieee754_sqrt+0x62>
 80185c6:	ee10 2a10 	vmov	r2, s0
 80185ca:	462b      	mov	r3, r5
 80185cc:	ee10 0a10 	vmov	r0, s0
 80185d0:	f7e7 fe8a 	bl	80002e8 <__aeabi_dsub>
 80185d4:	4602      	mov	r2, r0
 80185d6:	460b      	mov	r3, r1
 80185d8:	f7e8 f968 	bl	80008ac <__aeabi_ddiv>
 80185dc:	e7e6      	b.n	80185ac <__ieee754_sqrt+0x30>
 80185de:	1512      	asrs	r2, r2, #20
 80185e0:	d074      	beq.n	80186cc <__ieee754_sqrt+0x150>
 80185e2:	07d4      	lsls	r4, r2, #31
 80185e4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80185e8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80185ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80185f0:	bf5e      	ittt	pl
 80185f2:	0fda      	lsrpl	r2, r3, #31
 80185f4:	005b      	lslpl	r3, r3, #1
 80185f6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80185fa:	2400      	movs	r4, #0
 80185fc:	0fda      	lsrs	r2, r3, #31
 80185fe:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8018602:	107f      	asrs	r7, r7, #1
 8018604:	005b      	lsls	r3, r3, #1
 8018606:	2516      	movs	r5, #22
 8018608:	4620      	mov	r0, r4
 801860a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801860e:	1886      	adds	r6, r0, r2
 8018610:	428e      	cmp	r6, r1
 8018612:	bfde      	ittt	le
 8018614:	1b89      	suble	r1, r1, r6
 8018616:	18b0      	addle	r0, r6, r2
 8018618:	18a4      	addle	r4, r4, r2
 801861a:	0049      	lsls	r1, r1, #1
 801861c:	3d01      	subs	r5, #1
 801861e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8018622:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8018626:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801862a:	d1f0      	bne.n	801860e <__ieee754_sqrt+0x92>
 801862c:	462a      	mov	r2, r5
 801862e:	f04f 0e20 	mov.w	lr, #32
 8018632:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8018636:	4281      	cmp	r1, r0
 8018638:	eb06 0c05 	add.w	ip, r6, r5
 801863c:	dc02      	bgt.n	8018644 <__ieee754_sqrt+0xc8>
 801863e:	d113      	bne.n	8018668 <__ieee754_sqrt+0xec>
 8018640:	459c      	cmp	ip, r3
 8018642:	d811      	bhi.n	8018668 <__ieee754_sqrt+0xec>
 8018644:	f1bc 0f00 	cmp.w	ip, #0
 8018648:	eb0c 0506 	add.w	r5, ip, r6
 801864c:	da43      	bge.n	80186d6 <__ieee754_sqrt+0x15a>
 801864e:	2d00      	cmp	r5, #0
 8018650:	db41      	blt.n	80186d6 <__ieee754_sqrt+0x15a>
 8018652:	f100 0801 	add.w	r8, r0, #1
 8018656:	1a09      	subs	r1, r1, r0
 8018658:	459c      	cmp	ip, r3
 801865a:	bf88      	it	hi
 801865c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8018660:	eba3 030c 	sub.w	r3, r3, ip
 8018664:	4432      	add	r2, r6
 8018666:	4640      	mov	r0, r8
 8018668:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 801866c:	f1be 0e01 	subs.w	lr, lr, #1
 8018670:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8018674:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8018678:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801867c:	d1db      	bne.n	8018636 <__ieee754_sqrt+0xba>
 801867e:	430b      	orrs	r3, r1
 8018680:	d006      	beq.n	8018690 <__ieee754_sqrt+0x114>
 8018682:	1c50      	adds	r0, r2, #1
 8018684:	bf13      	iteet	ne
 8018686:	3201      	addne	r2, #1
 8018688:	3401      	addeq	r4, #1
 801868a:	4672      	moveq	r2, lr
 801868c:	f022 0201 	bicne.w	r2, r2, #1
 8018690:	1063      	asrs	r3, r4, #1
 8018692:	0852      	lsrs	r2, r2, #1
 8018694:	07e1      	lsls	r1, r4, #31
 8018696:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801869a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801869e:	bf48      	it	mi
 80186a0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80186a4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80186a8:	4614      	mov	r4, r2
 80186aa:	e781      	b.n	80185b0 <__ieee754_sqrt+0x34>
 80186ac:	0ad9      	lsrs	r1, r3, #11
 80186ae:	3815      	subs	r0, #21
 80186b0:	055b      	lsls	r3, r3, #21
 80186b2:	2900      	cmp	r1, #0
 80186b4:	d0fa      	beq.n	80186ac <__ieee754_sqrt+0x130>
 80186b6:	02cd      	lsls	r5, r1, #11
 80186b8:	d50a      	bpl.n	80186d0 <__ieee754_sqrt+0x154>
 80186ba:	f1c2 0420 	rsb	r4, r2, #32
 80186be:	fa23 f404 	lsr.w	r4, r3, r4
 80186c2:	1e55      	subs	r5, r2, #1
 80186c4:	4093      	lsls	r3, r2
 80186c6:	4321      	orrs	r1, r4
 80186c8:	1b42      	subs	r2, r0, r5
 80186ca:	e78a      	b.n	80185e2 <__ieee754_sqrt+0x66>
 80186cc:	4610      	mov	r0, r2
 80186ce:	e7f0      	b.n	80186b2 <__ieee754_sqrt+0x136>
 80186d0:	0049      	lsls	r1, r1, #1
 80186d2:	3201      	adds	r2, #1
 80186d4:	e7ef      	b.n	80186b6 <__ieee754_sqrt+0x13a>
 80186d6:	4680      	mov	r8, r0
 80186d8:	e7bd      	b.n	8018656 <__ieee754_sqrt+0xda>
 80186da:	bf00      	nop
 80186dc:	7ff00000 	.word	0x7ff00000

080186e0 <with_errno>:
 80186e0:	b570      	push	{r4, r5, r6, lr}
 80186e2:	4604      	mov	r4, r0
 80186e4:	460d      	mov	r5, r1
 80186e6:	4616      	mov	r6, r2
 80186e8:	f7fa f83e 	bl	8012768 <__errno>
 80186ec:	4629      	mov	r1, r5
 80186ee:	6006      	str	r6, [r0, #0]
 80186f0:	4620      	mov	r0, r4
 80186f2:	bd70      	pop	{r4, r5, r6, pc}

080186f4 <xflow>:
 80186f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80186f6:	4614      	mov	r4, r2
 80186f8:	461d      	mov	r5, r3
 80186fa:	b108      	cbz	r0, 8018700 <xflow+0xc>
 80186fc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8018700:	e9cd 2300 	strd	r2, r3, [sp]
 8018704:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018708:	4620      	mov	r0, r4
 801870a:	4629      	mov	r1, r5
 801870c:	f7e7 ffa4 	bl	8000658 <__aeabi_dmul>
 8018710:	2222      	movs	r2, #34	; 0x22
 8018712:	b003      	add	sp, #12
 8018714:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018718:	f7ff bfe2 	b.w	80186e0 <with_errno>

0801871c <__math_uflow>:
 801871c:	b508      	push	{r3, lr}
 801871e:	2200      	movs	r2, #0
 8018720:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8018724:	f7ff ffe6 	bl	80186f4 <xflow>
 8018728:	ec41 0b10 	vmov	d0, r0, r1
 801872c:	bd08      	pop	{r3, pc}

0801872e <__math_oflow>:
 801872e:	b508      	push	{r3, lr}
 8018730:	2200      	movs	r2, #0
 8018732:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8018736:	f7ff ffdd 	bl	80186f4 <xflow>
 801873a:	ec41 0b10 	vmov	d0, r0, r1
 801873e:	bd08      	pop	{r3, pc}

08018740 <fabs>:
 8018740:	ec51 0b10 	vmov	r0, r1, d0
 8018744:	ee10 2a10 	vmov	r2, s0
 8018748:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801874c:	ec43 2b10 	vmov	d0, r2, r3
 8018750:	4770      	bx	lr

08018752 <finite>:
 8018752:	b082      	sub	sp, #8
 8018754:	ed8d 0b00 	vstr	d0, [sp]
 8018758:	9801      	ldr	r0, [sp, #4]
 801875a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801875e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8018762:	0fc0      	lsrs	r0, r0, #31
 8018764:	b002      	add	sp, #8
 8018766:	4770      	bx	lr

08018768 <scalbn>:
 8018768:	b570      	push	{r4, r5, r6, lr}
 801876a:	ec55 4b10 	vmov	r4, r5, d0
 801876e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8018772:	4606      	mov	r6, r0
 8018774:	462b      	mov	r3, r5
 8018776:	b99a      	cbnz	r2, 80187a0 <scalbn+0x38>
 8018778:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801877c:	4323      	orrs	r3, r4
 801877e:	d036      	beq.n	80187ee <scalbn+0x86>
 8018780:	4b39      	ldr	r3, [pc, #228]	; (8018868 <scalbn+0x100>)
 8018782:	4629      	mov	r1, r5
 8018784:	ee10 0a10 	vmov	r0, s0
 8018788:	2200      	movs	r2, #0
 801878a:	f7e7 ff65 	bl	8000658 <__aeabi_dmul>
 801878e:	4b37      	ldr	r3, [pc, #220]	; (801886c <scalbn+0x104>)
 8018790:	429e      	cmp	r6, r3
 8018792:	4604      	mov	r4, r0
 8018794:	460d      	mov	r5, r1
 8018796:	da10      	bge.n	80187ba <scalbn+0x52>
 8018798:	a32b      	add	r3, pc, #172	; (adr r3, 8018848 <scalbn+0xe0>)
 801879a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801879e:	e03a      	b.n	8018816 <scalbn+0xae>
 80187a0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80187a4:	428a      	cmp	r2, r1
 80187a6:	d10c      	bne.n	80187c2 <scalbn+0x5a>
 80187a8:	ee10 2a10 	vmov	r2, s0
 80187ac:	4620      	mov	r0, r4
 80187ae:	4629      	mov	r1, r5
 80187b0:	f7e7 fd9c 	bl	80002ec <__adddf3>
 80187b4:	4604      	mov	r4, r0
 80187b6:	460d      	mov	r5, r1
 80187b8:	e019      	b.n	80187ee <scalbn+0x86>
 80187ba:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80187be:	460b      	mov	r3, r1
 80187c0:	3a36      	subs	r2, #54	; 0x36
 80187c2:	4432      	add	r2, r6
 80187c4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80187c8:	428a      	cmp	r2, r1
 80187ca:	dd08      	ble.n	80187de <scalbn+0x76>
 80187cc:	2d00      	cmp	r5, #0
 80187ce:	a120      	add	r1, pc, #128	; (adr r1, 8018850 <scalbn+0xe8>)
 80187d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80187d4:	da1c      	bge.n	8018810 <scalbn+0xa8>
 80187d6:	a120      	add	r1, pc, #128	; (adr r1, 8018858 <scalbn+0xf0>)
 80187d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80187dc:	e018      	b.n	8018810 <scalbn+0xa8>
 80187de:	2a00      	cmp	r2, #0
 80187e0:	dd08      	ble.n	80187f4 <scalbn+0x8c>
 80187e2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80187e6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80187ea:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80187ee:	ec45 4b10 	vmov	d0, r4, r5
 80187f2:	bd70      	pop	{r4, r5, r6, pc}
 80187f4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80187f8:	da19      	bge.n	801882e <scalbn+0xc6>
 80187fa:	f24c 3350 	movw	r3, #50000	; 0xc350
 80187fe:	429e      	cmp	r6, r3
 8018800:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8018804:	dd0a      	ble.n	801881c <scalbn+0xb4>
 8018806:	a112      	add	r1, pc, #72	; (adr r1, 8018850 <scalbn+0xe8>)
 8018808:	e9d1 0100 	ldrd	r0, r1, [r1]
 801880c:	2b00      	cmp	r3, #0
 801880e:	d1e2      	bne.n	80187d6 <scalbn+0x6e>
 8018810:	a30f      	add	r3, pc, #60	; (adr r3, 8018850 <scalbn+0xe8>)
 8018812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018816:	f7e7 ff1f 	bl	8000658 <__aeabi_dmul>
 801881a:	e7cb      	b.n	80187b4 <scalbn+0x4c>
 801881c:	a10a      	add	r1, pc, #40	; (adr r1, 8018848 <scalbn+0xe0>)
 801881e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018822:	2b00      	cmp	r3, #0
 8018824:	d0b8      	beq.n	8018798 <scalbn+0x30>
 8018826:	a10e      	add	r1, pc, #56	; (adr r1, 8018860 <scalbn+0xf8>)
 8018828:	e9d1 0100 	ldrd	r0, r1, [r1]
 801882c:	e7b4      	b.n	8018798 <scalbn+0x30>
 801882e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8018832:	3236      	adds	r2, #54	; 0x36
 8018834:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8018838:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801883c:	4620      	mov	r0, r4
 801883e:	4b0c      	ldr	r3, [pc, #48]	; (8018870 <scalbn+0x108>)
 8018840:	2200      	movs	r2, #0
 8018842:	e7e8      	b.n	8018816 <scalbn+0xae>
 8018844:	f3af 8000 	nop.w
 8018848:	c2f8f359 	.word	0xc2f8f359
 801884c:	01a56e1f 	.word	0x01a56e1f
 8018850:	8800759c 	.word	0x8800759c
 8018854:	7e37e43c 	.word	0x7e37e43c
 8018858:	8800759c 	.word	0x8800759c
 801885c:	fe37e43c 	.word	0xfe37e43c
 8018860:	c2f8f359 	.word	0xc2f8f359
 8018864:	81a56e1f 	.word	0x81a56e1f
 8018868:	43500000 	.word	0x43500000
 801886c:	ffff3cb0 	.word	0xffff3cb0
 8018870:	3c900000 	.word	0x3c900000

08018874 <_close>:
 8018874:	4b02      	ldr	r3, [pc, #8]	; (8018880 <_close+0xc>)
 8018876:	2258      	movs	r2, #88	; 0x58
 8018878:	601a      	str	r2, [r3, #0]
 801887a:	f04f 30ff 	mov.w	r0, #4294967295
 801887e:	4770      	bx	lr
 8018880:	2000c670 	.word	0x2000c670

08018884 <_fstat>:
 8018884:	4b02      	ldr	r3, [pc, #8]	; (8018890 <_fstat+0xc>)
 8018886:	2258      	movs	r2, #88	; 0x58
 8018888:	601a      	str	r2, [r3, #0]
 801888a:	f04f 30ff 	mov.w	r0, #4294967295
 801888e:	4770      	bx	lr
 8018890:	2000c670 	.word	0x2000c670

08018894 <_getpid>:
 8018894:	4b02      	ldr	r3, [pc, #8]	; (80188a0 <_getpid+0xc>)
 8018896:	2258      	movs	r2, #88	; 0x58
 8018898:	601a      	str	r2, [r3, #0]
 801889a:	f04f 30ff 	mov.w	r0, #4294967295
 801889e:	4770      	bx	lr
 80188a0:	2000c670 	.word	0x2000c670

080188a4 <_isatty>:
 80188a4:	4b02      	ldr	r3, [pc, #8]	; (80188b0 <_isatty+0xc>)
 80188a6:	2258      	movs	r2, #88	; 0x58
 80188a8:	601a      	str	r2, [r3, #0]
 80188aa:	2000      	movs	r0, #0
 80188ac:	4770      	bx	lr
 80188ae:	bf00      	nop
 80188b0:	2000c670 	.word	0x2000c670

080188b4 <_kill>:
 80188b4:	4b02      	ldr	r3, [pc, #8]	; (80188c0 <_kill+0xc>)
 80188b6:	2258      	movs	r2, #88	; 0x58
 80188b8:	601a      	str	r2, [r3, #0]
 80188ba:	f04f 30ff 	mov.w	r0, #4294967295
 80188be:	4770      	bx	lr
 80188c0:	2000c670 	.word	0x2000c670

080188c4 <_lseek>:
 80188c4:	4b02      	ldr	r3, [pc, #8]	; (80188d0 <_lseek+0xc>)
 80188c6:	2258      	movs	r2, #88	; 0x58
 80188c8:	601a      	str	r2, [r3, #0]
 80188ca:	f04f 30ff 	mov.w	r0, #4294967295
 80188ce:	4770      	bx	lr
 80188d0:	2000c670 	.word	0x2000c670

080188d4 <_read>:
 80188d4:	4b02      	ldr	r3, [pc, #8]	; (80188e0 <_read+0xc>)
 80188d6:	2258      	movs	r2, #88	; 0x58
 80188d8:	601a      	str	r2, [r3, #0]
 80188da:	f04f 30ff 	mov.w	r0, #4294967295
 80188de:	4770      	bx	lr
 80188e0:	2000c670 	.word	0x2000c670

080188e4 <_write>:
 80188e4:	4b02      	ldr	r3, [pc, #8]	; (80188f0 <_write+0xc>)
 80188e6:	2258      	movs	r2, #88	; 0x58
 80188e8:	601a      	str	r2, [r3, #0]
 80188ea:	f04f 30ff 	mov.w	r0, #4294967295
 80188ee:	4770      	bx	lr
 80188f0:	2000c670 	.word	0x2000c670

080188f4 <_exit>:
 80188f4:	e7fe      	b.n	80188f4 <_exit>
	...

080188f8 <_init>:
 80188f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80188fa:	bf00      	nop
 80188fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80188fe:	bc08      	pop	{r3}
 8018900:	469e      	mov	lr, r3
 8018902:	4770      	bx	lr

08018904 <_fini>:
 8018904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018906:	bf00      	nop
 8018908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801890a:	bc08      	pop	{r3}
 801890c:	469e      	mov	lr, r3
 801890e:	4770      	bx	lr
